
CPU3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006800  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00086800  00086800  00016800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000c6c  20070000  00086808  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000005dc  20070c6c  00087474  00020c6c  2**2
                  ALLOC
  4 .stack        00002000  20071248  00087a50  00020c6c  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020c6c  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020c95  2**0
                  CONTENTS, READONLY
  7 .debug_info   00014b50  00000000  00000000  00020cee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002e86  00000000  00000000  0003583e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000073de  00000000  00000000  000386c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000d70  00000000  00000000  0003faa2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000be8  00000000  00000000  00040812  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00009cd2  00000000  00000000  000413fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00016e67  00000000  00000000  0004b0cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00062520  00000000  00000000  00061f33  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00004234  00000000  00000000  000c4454  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20073248 	.word	0x20073248
   80004:	0008308d 	.word	0x0008308d
   80008:	00083085 	.word	0x00083085
   8000c:	00083085 	.word	0x00083085
   80010:	00083085 	.word	0x00083085
   80014:	00083085 	.word	0x00083085
   80018:	00083085 	.word	0x00083085
	...
   8002c:	00083085 	.word	0x00083085
   80030:	00083085 	.word	0x00083085
   80034:	00000000 	.word	0x00000000
   80038:	00083085 	.word	0x00083085
   8003c:	00083085 	.word	0x00083085
   80040:	00083085 	.word	0x00083085
   80044:	00083085 	.word	0x00083085
   80048:	00083085 	.word	0x00083085
   8004c:	00083085 	.word	0x00083085
   80050:	00083085 	.word	0x00083085
   80054:	00083085 	.word	0x00083085
   80058:	00083085 	.word	0x00083085
   8005c:	00083085 	.word	0x00083085
   80060:	00081c99 	.word	0x00081c99
   80064:	00083085 	.word	0x00083085
   80068:	00000000 	.word	0x00000000
   8006c:	00082d09 	.word	0x00082d09
   80070:	00082d21 	.word	0x00082d21
   80074:	00082d39 	.word	0x00082d39
   80078:	00082d51 	.word	0x00082d51
	...
   80084:	00083085 	.word	0x00083085
   80088:	00083085 	.word	0x00083085
   8008c:	00083085 	.word	0x00083085
   80090:	00083085 	.word	0x00083085
   80094:	00083085 	.word	0x00083085
   80098:	00083085 	.word	0x00083085
   8009c:	00083085 	.word	0x00083085
   800a0:	00083085 	.word	0x00083085
   800a4:	00000000 	.word	0x00000000
   800a8:	00083085 	.word	0x00083085
   800ac:	00080a65 	.word	0x00080a65
   800b0:	00080b3d 	.word	0x00080b3d
   800b4:	00080c15 	.word	0x00080c15
   800b8:	00080c4d 	.word	0x00080c4d
   800bc:	00083085 	.word	0x00083085
   800c0:	00083085 	.word	0x00083085
   800c4:	00080c65 	.word	0x00080c65
   800c8:	00083085 	.word	0x00083085
   800cc:	00083085 	.word	0x00083085
   800d0:	00083085 	.word	0x00083085
   800d4:	00083085 	.word	0x00083085
   800d8:	00083085 	.word	0x00083085
   800dc:	00083085 	.word	0x00083085
   800e0:	00083085 	.word	0x00083085
   800e4:	00083085 	.word	0x00083085
   800e8:	00083085 	.word	0x00083085
   800ec:	000801b5 	.word	0x000801b5
   800f0:	00083085 	.word	0x00083085

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070c6c 	.word	0x20070c6c
   80110:	00000000 	.word	0x00000000
   80114:	00086808 	.word	0x00086808

00080118 <frame_dummy>:
   80118:	4b08      	ldr	r3, [pc, #32]	; (8013c <frame_dummy+0x24>)
   8011a:	b510      	push	{r4, lr}
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4908      	ldr	r1, [pc, #32]	; (80140 <frame_dummy+0x28>)
   80120:	4808      	ldr	r0, [pc, #32]	; (80144 <frame_dummy+0x2c>)
   80122:	f3af 8000 	nop.w
   80126:	4808      	ldr	r0, [pc, #32]	; (80148 <frame_dummy+0x30>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b903      	cbnz	r3, 8012e <frame_dummy+0x16>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	4b07      	ldr	r3, [pc, #28]	; (8014c <frame_dummy+0x34>)
   80130:	2b00      	cmp	r3, #0
   80132:	d0fb      	beq.n	8012c <frame_dummy+0x14>
   80134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80138:	4718      	bx	r3
   8013a:	bf00      	nop
   8013c:	00000000 	.word	0x00000000
   80140:	20070c70 	.word	0x20070c70
   80144:	00086808 	.word	0x00086808
   80148:	00086808 	.word	0x00086808
   8014c:	00000000 	.word	0x00000000

00080150 <CPU3_D_INIT_CLOCK>:
 *  Author: wid7
 */ 
#include "D_CLOCK.h"

void CPU3_D_INIT_CLOCK()
{
   80150:	b580      	push	{r7, lr}
   80152:	af00      	add	r7, sp, #0
	sysclk_init();
   80154:	4b07      	ldr	r3, [pc, #28]	; (80174 <CPU3_D_INIT_CLOCK+0x24>)
   80156:	4798      	blx	r3
	PMC->PMC_WPMR  = 0x504D4300;
   80158:	4b07      	ldr	r3, [pc, #28]	; (80178 <CPU3_D_INIT_CLOCK+0x28>)
   8015a:	4a08      	ldr	r2, [pc, #32]	; (8017c <CPU3_D_INIT_CLOCK+0x2c>)
   8015c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PMC->PMC_PCER0 = 0xF8407900;
   80160:	4b05      	ldr	r3, [pc, #20]	; (80178 <CPU3_D_INIT_CLOCK+0x28>)
   80162:	4a07      	ldr	r2, [pc, #28]	; (80180 <CPU3_D_INIT_CLOCK+0x30>)
   80164:	611a      	str	r2, [r3, #16]
	PMC->PMC_PCER1 = 0x0000083F;
   80166:	4b04      	ldr	r3, [pc, #16]	; (80178 <CPU3_D_INIT_CLOCK+0x28>)
   80168:	f640 023f 	movw	r2, #2111	; 0x83f
   8016c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   80170:	bf00      	nop
   80172:	bd80      	pop	{r7, pc}
   80174:	00082739 	.word	0x00082739
   80178:	400e0600 	.word	0x400e0600
   8017c:	504d4300 	.word	0x504d4300
   80180:	f8407900 	.word	0xf8407900

00080184 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   80184:	b480      	push	{r7}
   80186:	b083      	sub	sp, #12
   80188:	af00      	add	r7, sp, #0
   8018a:	4603      	mov	r3, r0
   8018c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   8018e:	4908      	ldr	r1, [pc, #32]	; (801b0 <NVIC_EnableIRQ+0x2c>)
   80190:	f997 3007 	ldrsb.w	r3, [r7, #7]
   80194:	095b      	lsrs	r3, r3, #5
   80196:	79fa      	ldrb	r2, [r7, #7]
   80198:	f002 021f 	and.w	r2, r2, #31
   8019c:	2001      	movs	r0, #1
   8019e:	fa00 f202 	lsl.w	r2, r0, r2
   801a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   801a6:	bf00      	nop
   801a8:	370c      	adds	r7, #12
   801aa:	46bd      	mov	sp, r7
   801ac:	bc80      	pop	{r7}
   801ae:	4770      	bx	lr
   801b0:	e000e100 	.word	0xe000e100

000801b4 <CAN0_Handler>:
can_mb_conf_t can0_mailbox;
volatile uint32_t g_ul_recv_status = 0;
temp_struct_type  temp_struct;


void CAN0_Handler(void)   {
   801b4:	b580      	push	{r7, lr}
   801b6:	b082      	sub	sp, #8
   801b8:	af00      	add	r7, sp, #0
	uint32_t ul_status;
	ul_status = (CAN0 -> CAN_SR);
   801ba:	4b11      	ldr	r3, [pc, #68]	; (80200 <CAN0_Handler+0x4c>)
   801bc:	691b      	ldr	r3, [r3, #16]
   801be:	607b      	str	r3, [r7, #4]
	if (ul_status & GLOBAL_MAILBOX_MASK) {
   801c0:	687b      	ldr	r3, [r7, #4]
   801c2:	b2db      	uxtb	r3, r3
   801c4:	2b00      	cmp	r3, #0
   801c6:	d017      	beq.n	801f8 <CAN0_Handler+0x44>
		ul_status = CAN0->CAN_MB[1].CAN_MSR ;
   801c8:	4b0d      	ldr	r3, [pc, #52]	; (80200 <CAN0_Handler+0x4c>)
   801ca:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
   801ce:	607b      	str	r3, [r7, #4]
		if ((ul_status & CAN_MSR_MRDY) == CAN_MSR_MRDY) {
   801d0:	687b      	ldr	r3, [r7, #4]
   801d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   801d6:	2b00      	cmp	r3, #0
   801d8:	d00e      	beq.n	801f8 <CAN0_Handler+0x44>
			can0_mailbox.ul_mb_idx = 1;
   801da:	4b0a      	ldr	r3, [pc, #40]	; (80204 <CAN0_Handler+0x50>)
   801dc:	2201      	movs	r2, #1
   801de:	601a      	str	r2, [r3, #0]
			can0_mailbox.ul_status = ul_status;
   801e0:	4a08      	ldr	r2, [pc, #32]	; (80204 <CAN0_Handler+0x50>)
   801e2:	687b      	ldr	r3, [r7, #4]
   801e4:	6093      	str	r3, [r2, #8]
			dd_can_mailbox_read(&can0_mailbox);
   801e6:	4807      	ldr	r0, [pc, #28]	; (80204 <CAN0_Handler+0x50>)
   801e8:	4b07      	ldr	r3, [pc, #28]	; (80208 <CAN0_Handler+0x54>)
   801ea:	4798      	blx	r3
			dd_can_extract_mailbox_data(&can0_mailbox);
   801ec:	4805      	ldr	r0, [pc, #20]	; (80204 <CAN0_Handler+0x50>)
   801ee:	4b07      	ldr	r3, [pc, #28]	; (8020c <CAN0_Handler+0x58>)
   801f0:	4798      	blx	r3
			g_ul_recv_status = 1;
   801f2:	4b07      	ldr	r3, [pc, #28]	; (80210 <CAN0_Handler+0x5c>)
   801f4:	2201      	movs	r2, #1
   801f6:	601a      	str	r2, [r3, #0]
		}
		
	}
}
   801f8:	bf00      	nop
   801fa:	3708      	adds	r7, #8
   801fc:	46bd      	mov	sp, r7
   801fe:	bd80      	pop	{r7, pc}
   80200:	400b4000 	.word	0x400b4000
   80204:	20070dcc 	.word	0x20070dcc
   80208:	00080439 	.word	0x00080439
   8020c:	00080215 	.word	0x00080215
   80210:	20070c98 	.word	0x20070c98

00080214 <dd_can_extract_mailbox_data>:
	p_mailbox->ul_datal = 0;
	p_mailbox->ul_datah = 0;
}


static void dd_can_extract_mailbox_data(can_mb_conf_t *p_mailbox )   {
   80214:	b480      	push	{r7}
   80216:	b085      	sub	sp, #20
   80218:	af00      	add	r7, sp, #0
   8021a:	6078      	str	r0, [r7, #4]
		 uint32_t status ;	
		 uint32_t ul_reg;
	     uint8_t master_command_byte, master_data_byte;
		 
	
	   temp_struct.temp_reg_32 = (p_mailbox->ul_datal);
   8021c:	687b      	ldr	r3, [r7, #4]
   8021e:	699b      	ldr	r3, [r3, #24]
   80220:	4a78      	ldr	r2, [pc, #480]	; (80404 <dd_can_extract_mailbox_data+0x1f0>)
   80222:	6013      	str	r3, [r2, #0]
	   master_command_byte  =  temp_struct.temp_reg_8[1]  ;
   80224:	4b77      	ldr	r3, [pc, #476]	; (80404 <dd_can_extract_mailbox_data+0x1f0>)
   80226:	785b      	ldrb	r3, [r3, #1]
   80228:	73fb      	strb	r3, [r7, #15]
	   master_data_byte     =  temp_struct.temp_reg_8[1]  ;
   8022a:	4b76      	ldr	r3, [pc, #472]	; (80404 <dd_can_extract_mailbox_data+0x1f0>)
   8022c:	785b      	ldrb	r3, [r3, #1]
   8022e:	73bb      	strb	r3, [r7, #14]
	   sv_rxrdy_flag = true;
   80230:	4b75      	ldr	r3, [pc, #468]	; (80408 <dd_can_extract_mailbox_data+0x1f4>)
   80232:	2201      	movs	r2, #1
   80234:	701a      	strb	r2, [r3, #0]
	   switch (state)  {
   80236:	4b75      	ldr	r3, [pc, #468]	; (8040c <dd_can_extract_mailbox_data+0x1f8>)
   80238:	781b      	ldrb	r3, [r3, #0]
   8023a:	2b00      	cmp	r3, #0
   8023c:	d000      	beq.n	80240 <dd_can_extract_mailbox_data+0x2c>
				
				default:
				break;
			  }		  
		   default:
		   break;
   8023e:	e0db      	b.n	803f8 <dd_can_extract_mailbox_data+0x1e4>
	   master_command_byte  =  temp_struct.temp_reg_8[1]  ;
	   master_data_byte     =  temp_struct.temp_reg_8[1]  ;
	   sv_rxrdy_flag = true;
	   switch (state)  {
		   case CAN_IDLE:		
		      data[data_count] = master_command_byte;
   80240:	4b73      	ldr	r3, [pc, #460]	; (80410 <dd_can_extract_mailbox_data+0x1fc>)
   80242:	781b      	ldrb	r3, [r3, #0]
   80244:	b2db      	uxtb	r3, r3
   80246:	4619      	mov	r1, r3
   80248:	4a72      	ldr	r2, [pc, #456]	; (80414 <dd_can_extract_mailbox_data+0x200>)
   8024a:	7bfb      	ldrb	r3, [r7, #15]
   8024c:	5453      	strb	r3, [r2, r1]
		      data_buff[data_count] = data[data_count];		
   8024e:	4b70      	ldr	r3, [pc, #448]	; (80410 <dd_can_extract_mailbox_data+0x1fc>)
   80250:	781b      	ldrb	r3, [r3, #0]
   80252:	b2db      	uxtb	r3, r3
   80254:	461a      	mov	r2, r3
   80256:	4b6e      	ldr	r3, [pc, #440]	; (80410 <dd_can_extract_mailbox_data+0x1fc>)
   80258:	781b      	ldrb	r3, [r3, #0]
   8025a:	b2db      	uxtb	r3, r3
   8025c:	4619      	mov	r1, r3
   8025e:	4b6d      	ldr	r3, [pc, #436]	; (80414 <dd_can_extract_mailbox_data+0x200>)
   80260:	5c5b      	ldrb	r3, [r3, r1]
   80262:	b2d9      	uxtb	r1, r3
   80264:	4b6c      	ldr	r3, [pc, #432]	; (80418 <dd_can_extract_mailbox_data+0x204>)
   80266:	5499      	strb	r1, [r3, r2]
			  data_buffer[data_count]= data_buff[data_count];
   80268:	4b69      	ldr	r3, [pc, #420]	; (80410 <dd_can_extract_mailbox_data+0x1fc>)
   8026a:	781b      	ldrb	r3, [r3, #0]
   8026c:	b2db      	uxtb	r3, r3
   8026e:	461a      	mov	r2, r3
   80270:	4b67      	ldr	r3, [pc, #412]	; (80410 <dd_can_extract_mailbox_data+0x1fc>)
   80272:	781b      	ldrb	r3, [r3, #0]
   80274:	b2db      	uxtb	r3, r3
   80276:	4619      	mov	r1, r3
   80278:	4b67      	ldr	r3, [pc, #412]	; (80418 <dd_can_extract_mailbox_data+0x204>)
   8027a:	5c5b      	ldrb	r3, [r3, r1]
   8027c:	b2d9      	uxtb	r1, r3
   8027e:	4b67      	ldr	r3, [pc, #412]	; (8041c <dd_can_extract_mailbox_data+0x208>)
   80280:	5499      	strb	r1, [r3, r2]
			  
			  Master_cpu_command_type diff;
			  diff = data_buff[0];
   80282:	4b65      	ldr	r3, [pc, #404]	; (80418 <dd_can_extract_mailbox_data+0x204>)
   80284:	781b      	ldrb	r3, [r3, #0]
   80286:	737b      	strb	r3, [r7, #13]
		      start_c[0] =diff;
   80288:	4a65      	ldr	r2, [pc, #404]	; (80420 <dd_can_extract_mailbox_data+0x20c>)
   8028a:	7b7b      	ldrb	r3, [r7, #13]
   8028c:	7013      	strb	r3, [r2, #0]
		      switch (diff)	
   8028e:	7b7b      	ldrb	r3, [r7, #13]
   80290:	3b01      	subs	r3, #1
   80292:	2b0c      	cmp	r3, #12
   80294:	f200 80af 	bhi.w	803f6 <dd_can_extract_mailbox_data+0x1e2>
   80298:	a201      	add	r2, pc, #4	; (adr r2, 802a0 <dd_can_extract_mailbox_data+0x8c>)
   8029a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8029e:	bf00      	nop
   802a0:	00080319 	.word	0x00080319
   802a4:	0008033b 	.word	0x0008033b
   802a8:	00080365 	.word	0x00080365
   802ac:	000803bf 	.word	0x000803bf
   802b0:	000803cd 	.word	0x000803cd
   802b4:	000803db 	.word	0x000803db
   802b8:	000803e9 	.word	0x000803e9
   802bc:	000803a3 	.word	0x000803a3
   802c0:	000803b1 	.word	0x000803b1
   802c4:	00080387 	.word	0x00080387
   802c8:	00080395 	.word	0x00080395
   802cc:	000802d5 	.word	0x000802d5
   802d0:	000802f7 	.word	0x000802f7
			  {
				  case PROP_START_ACID_PUMP:
				  			          test =0;
   802d4:	4b53      	ldr	r3, [pc, #332]	; (80424 <dd_can_extract_mailbox_data+0x210>)
   802d6:	2200      	movs	r2, #0
   802d8:	701a      	strb	r2, [r3, #0]
				  			          count_start++;
   802da:	4b53      	ldr	r3, [pc, #332]	; (80428 <dd_can_extract_mailbox_data+0x214>)
   802dc:	881b      	ldrh	r3, [r3, #0]
   802de:	b29b      	uxth	r3, r3
   802e0:	3301      	adds	r3, #1
   802e2:	b29a      	uxth	r2, r3
   802e4:	4b50      	ldr	r3, [pc, #320]	; (80428 <dd_can_extract_mailbox_data+0x214>)
   802e6:	801a      	strh	r2, [r3, #0]
				  			          flag_buff = 1;
   802e8:	4b50      	ldr	r3, [pc, #320]	; (8042c <dd_can_extract_mailbox_data+0x218>)
   802ea:	2201      	movs	r2, #1
   802ec:	701a      	strb	r2, [r3, #0]
				  			          state = CAN_IDLE;
   802ee:	4b47      	ldr	r3, [pc, #284]	; (8040c <dd_can_extract_mailbox_data+0x1f8>)
   802f0:	2200      	movs	r2, #0
   802f2:	701a      	strb	r2, [r3, #0]
				  
				  break;
   802f4:	e080      	b.n	803f8 <dd_can_extract_mailbox_data+0x1e4>
				  
				  case PROP_START_BICARB_PUMP:
				  			          test =0;
   802f6:	4b4b      	ldr	r3, [pc, #300]	; (80424 <dd_can_extract_mailbox_data+0x210>)
   802f8:	2200      	movs	r2, #0
   802fa:	701a      	strb	r2, [r3, #0]
				  			          count_start++;
   802fc:	4b4a      	ldr	r3, [pc, #296]	; (80428 <dd_can_extract_mailbox_data+0x214>)
   802fe:	881b      	ldrh	r3, [r3, #0]
   80300:	b29b      	uxth	r3, r3
   80302:	3301      	adds	r3, #1
   80304:	b29a      	uxth	r2, r3
   80306:	4b48      	ldr	r3, [pc, #288]	; (80428 <dd_can_extract_mailbox_data+0x214>)
   80308:	801a      	strh	r2, [r3, #0]
				  			          flag_buff = 1;
   8030a:	4b48      	ldr	r3, [pc, #288]	; (8042c <dd_can_extract_mailbox_data+0x218>)
   8030c:	2201      	movs	r2, #1
   8030e:	701a      	strb	r2, [r3, #0]
				  			          state = CAN_IDLE;
   80310:	4b3e      	ldr	r3, [pc, #248]	; (8040c <dd_can_extract_mailbox_data+0x1f8>)
   80312:	2200      	movs	r2, #0
   80314:	701a      	strb	r2, [r3, #0]
				  
				  break;
   80316:	e06f      	b.n	803f8 <dd_can_extract_mailbox_data+0x1e4>
			     case PROP_START_ALIGMENT:
			          test =0;
   80318:	4b42      	ldr	r3, [pc, #264]	; (80424 <dd_can_extract_mailbox_data+0x210>)
   8031a:	2200      	movs	r2, #0
   8031c:	701a      	strb	r2, [r3, #0]
					  count_start++;
   8031e:	4b42      	ldr	r3, [pc, #264]	; (80428 <dd_can_extract_mailbox_data+0x214>)
   80320:	881b      	ldrh	r3, [r3, #0]
   80322:	b29b      	uxth	r3, r3
   80324:	3301      	adds	r3, #1
   80326:	b29a      	uxth	r2, r3
   80328:	4b3f      	ldr	r3, [pc, #252]	; (80428 <dd_can_extract_mailbox_data+0x214>)
   8032a:	801a      	strh	r2, [r3, #0]
			          flag_buff = 1;
   8032c:	4b3f      	ldr	r3, [pc, #252]	; (8042c <dd_can_extract_mailbox_data+0x218>)
   8032e:	2201      	movs	r2, #1
   80330:	701a      	strb	r2, [r3, #0]
			          state = CAN_IDLE;
   80332:	4b36      	ldr	r3, [pc, #216]	; (8040c <dd_can_extract_mailbox_data+0x1f8>)
   80334:	2200      	movs	r2, #0
   80336:	701a      	strb	r2, [r3, #0]
			    break;
   80338:	e05e      	b.n	803f8 <dd_can_extract_mailbox_data+0x1e4>
				
			    case PROP_START_MIXING:
			        User_setConductivity = temp_struct.temp_reg_16[1];
   8033a:	4b32      	ldr	r3, [pc, #200]	; (80404 <dd_can_extract_mailbox_data+0x1f0>)
   8033c:	885a      	ldrh	r2, [r3, #2]
   8033e:	4b3c      	ldr	r3, [pc, #240]	; (80430 <dd_can_extract_mailbox_data+0x21c>)
   80340:	801a      	strh	r2, [r3, #0]

				    test=0;
   80342:	4b38      	ldr	r3, [pc, #224]	; (80424 <dd_can_extract_mailbox_data+0x210>)
   80344:	2200      	movs	r2, #0
   80346:	701a      	strb	r2, [r3, #0]
					count_start++;					
   80348:	4b37      	ldr	r3, [pc, #220]	; (80428 <dd_can_extract_mailbox_data+0x214>)
   8034a:	881b      	ldrh	r3, [r3, #0]
   8034c:	b29b      	uxth	r3, r3
   8034e:	3301      	adds	r3, #1
   80350:	b29a      	uxth	r2, r3
   80352:	4b35      	ldr	r3, [pc, #212]	; (80428 <dd_can_extract_mailbox_data+0x214>)
   80354:	801a      	strh	r2, [r3, #0]
			        flag_buff = 1;
   80356:	4b35      	ldr	r3, [pc, #212]	; (8042c <dd_can_extract_mailbox_data+0x218>)
   80358:	2201      	movs	r2, #1
   8035a:	701a      	strb	r2, [r3, #0]
			        state = CAN_IDLE;
   8035c:	4b2b      	ldr	r3, [pc, #172]	; (8040c <dd_can_extract_mailbox_data+0x1f8>)
   8035e:	2200      	movs	r2, #0
   80360:	701a      	strb	r2, [r3, #0]
			    break;
   80362:	e049      	b.n	803f8 <dd_can_extract_mailbox_data+0x1e4>
				
			    case PROP_STOP_MIXING:
			        test =0;
   80364:	4b2f      	ldr	r3, [pc, #188]	; (80424 <dd_can_extract_mailbox_data+0x210>)
   80366:	2200      	movs	r2, #0
   80368:	701a      	strb	r2, [r3, #0]
					count_stop++;
   8036a:	4b32      	ldr	r3, [pc, #200]	; (80434 <dd_can_extract_mailbox_data+0x220>)
   8036c:	881b      	ldrh	r3, [r3, #0]
   8036e:	b29b      	uxth	r3, r3
   80370:	3301      	adds	r3, #1
   80372:	b29a      	uxth	r2, r3
   80374:	4b2f      	ldr	r3, [pc, #188]	; (80434 <dd_can_extract_mailbox_data+0x220>)
   80376:	801a      	strh	r2, [r3, #0]
			        flag_buff = 1;
   80378:	4b2c      	ldr	r3, [pc, #176]	; (8042c <dd_can_extract_mailbox_data+0x218>)
   8037a:	2201      	movs	r2, #1
   8037c:	701a      	strb	r2, [r3, #0]
			        state = CAN_IDLE;
   8037e:	4b23      	ldr	r3, [pc, #140]	; (8040c <dd_can_extract_mailbox_data+0x1f8>)
   80380:	2200      	movs	r2, #0
   80382:	701a      	strb	r2, [r3, #0]
			    break;
   80384:	e038      	b.n	803f8 <dd_can_extract_mailbox_data+0x1e4>
			       state = IDLE;
			    break;*/
				
			    case PROP_COMPLETED:
			        //flag = 1;
			          flag_buff = 1;
   80386:	4b29      	ldr	r3, [pc, #164]	; (8042c <dd_can_extract_mailbox_data+0x218>)
   80388:	2201      	movs	r2, #1
   8038a:	701a      	strb	r2, [r3, #0]
			          state = CAN_IDLE;
   8038c:	4b1f      	ldr	r3, [pc, #124]	; (8040c <dd_can_extract_mailbox_data+0x1f8>)
   8038e:	2200      	movs	r2, #0
   80390:	701a      	strb	r2, [r3, #0]
			    break;
   80392:	e031      	b.n	803f8 <dd_can_extract_mailbox_data+0x1e4>
				
			    case PROP_RECOVER:
			         //flag = 1;
			         flag_buff = 1;
   80394:	4b25      	ldr	r3, [pc, #148]	; (8042c <dd_can_extract_mailbox_data+0x218>)
   80396:	2201      	movs	r2, #1
   80398:	701a      	strb	r2, [r3, #0]
			         state = CAN_IDLE;
   8039a:	4b1c      	ldr	r3, [pc, #112]	; (8040c <dd_can_extract_mailbox_data+0x1f8>)
   8039c:	2200      	movs	r2, #0
   8039e:	701a      	strb	r2, [r3, #0]
			    break;
   803a0:	e02a      	b.n	803f8 <dd_can_extract_mailbox_data+0x1e4>
			    case PROP_START_OPENFILL:
			        flag_buff=1;
   803a2:	4b22      	ldr	r3, [pc, #136]	; (8042c <dd_can_extract_mailbox_data+0x218>)
   803a4:	2201      	movs	r2, #1
   803a6:	701a      	strb	r2, [r3, #0]
					state= CAN_IDLE;		
   803a8:	4b18      	ldr	r3, [pc, #96]	; (8040c <dd_can_extract_mailbox_data+0x1f8>)
   803aa:	2200      	movs	r2, #0
   803ac:	701a      	strb	r2, [r3, #0]
			    break;
   803ae:	e023      	b.n	803f8 <dd_can_extract_mailbox_data+0x1e4>
				
				
			    case PROP_STOP_OPENFILL:
				    flag_buff=1;
   803b0:	4b1e      	ldr	r3, [pc, #120]	; (8042c <dd_can_extract_mailbox_data+0x218>)
   803b2:	2201      	movs	r2, #1
   803b4:	701a      	strb	r2, [r3, #0]
				    state= CAN_IDLE;
   803b6:	4b15      	ldr	r3, [pc, #84]	; (8040c <dd_can_extract_mailbox_data+0x1f8>)
   803b8:	2200      	movs	r2, #0
   803ba:	701a      	strb	r2, [r3, #0]
				
				break;
   803bc:	e01c      	b.n	803f8 <dd_can_extract_mailbox_data+0x1e4>
				
				
				case PROP_START_DISINFECTION:
				   flag_buff=1;
   803be:	4b1b      	ldr	r3, [pc, #108]	; (8042c <dd_can_extract_mailbox_data+0x218>)
   803c0:	2201      	movs	r2, #1
   803c2:	701a      	strb	r2, [r3, #0]
				   state= CAN_IDLE;
   803c4:	4b11      	ldr	r3, [pc, #68]	; (8040c <dd_can_extract_mailbox_data+0x1f8>)
   803c6:	2200      	movs	r2, #0
   803c8:	701a      	strb	r2, [r3, #0]
				break;
   803ca:	e015      	b.n	803f8 <dd_can_extract_mailbox_data+0x1e4>
				
				
				case PROP_STOP_DISINFECTION:
				   flag_buff=1;
   803cc:	4b17      	ldr	r3, [pc, #92]	; (8042c <dd_can_extract_mailbox_data+0x218>)
   803ce:	2201      	movs	r2, #1
   803d0:	701a      	strb	r2, [r3, #0]
				   state= CAN_IDLE;
   803d2:	4b0e      	ldr	r3, [pc, #56]	; (8040c <dd_can_extract_mailbox_data+0x1f8>)
   803d4:	2200      	movs	r2, #0
   803d6:	701a      	strb	r2, [r3, #0]
				break;
   803d8:	e00e      	b.n	803f8 <dd_can_extract_mailbox_data+0x1e4>
				
				case PROP_START_CITRIC_DISINFECTION:
				   flag_buff=1;
   803da:	4b14      	ldr	r3, [pc, #80]	; (8042c <dd_can_extract_mailbox_data+0x218>)
   803dc:	2201      	movs	r2, #1
   803de:	701a      	strb	r2, [r3, #0]
				   state= CAN_IDLE;
   803e0:	4b0a      	ldr	r3, [pc, #40]	; (8040c <dd_can_extract_mailbox_data+0x1f8>)
   803e2:	2200      	movs	r2, #0
   803e4:	701a      	strb	r2, [r3, #0]
				break;
   803e6:	e007      	b.n	803f8 <dd_can_extract_mailbox_data+0x1e4>
				
				case PROP_STOP_CITRIC_DISINFECTION:
				flag_buff=1;
   803e8:	4b10      	ldr	r3, [pc, #64]	; (8042c <dd_can_extract_mailbox_data+0x218>)
   803ea:	2201      	movs	r2, #1
   803ec:	701a      	strb	r2, [r3, #0]
				state= CAN_IDLE;
   803ee:	4b07      	ldr	r3, [pc, #28]	; (8040c <dd_can_extract_mailbox_data+0x1f8>)
   803f0:	2200      	movs	r2, #0
   803f2:	701a      	strb	r2, [r3, #0]
				break;
   803f4:	e000      	b.n	803f8 <dd_can_extract_mailbox_data+0x1e4>
				
				default:
				break;
   803f6:	bf00      	nop
			  }		  
		   default:
		   break;
   803f8:	bf00      	nop
		   
	 }
}
   803fa:	bf00      	nop
   803fc:	3714      	adds	r7, #20
   803fe:	46bd      	mov	sp, r7
   80400:	bc80      	pop	{r7}
   80402:	4770      	bx	lr
   80404:	20070dc0 	.word	0x20070dc0
   80408:	20070c93 	.word	0x20070c93
   8040c:	20070c88 	.word	0x20070c88
   80410:	20070c8e 	.word	0x20070c8e
   80414:	20070c90 	.word	0x20070c90
   80418:	20070c94 	.word	0x20070c94
   8041c:	20070e00 	.word	0x20070e00
   80420:	20070dc4 	.word	0x20070dc4
   80424:	20070c97 	.word	0x20070c97
   80428:	20070c8a 	.word	0x20070c8a
   8042c:	20070dec 	.word	0x20070dec
   80430:	20070dc6 	.word	0x20070dc6
   80434:	20070c8c 	.word	0x20070c8c

00080438 <dd_can_mailbox_read>:
	
	



static uint32_t dd_can_mailbox_read(can_mb_conf_t *p_mailbox)   {
   80438:	b480      	push	{r7}
   8043a:	b087      	sub	sp, #28
   8043c:	af00      	add	r7, sp, #0
   8043e:	6078      	str	r0, [r7, #4]

	uint32_t ul_status;
	uint8_t uc_index;
	uint32_t ul_retval;

	ul_retval = 0;
   80440:	2300      	movs	r3, #0
   80442:	617b      	str	r3, [r7, #20]
	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   80444:	687b      	ldr	r3, [r7, #4]
   80446:	681b      	ldr	r3, [r3, #0]
   80448:	74fb      	strb	r3, [r7, #19]
	ul_status = p_mailbox->ul_status;
   8044a:	687b      	ldr	r3, [r7, #4]
   8044c:	689b      	ldr	r3, [r3, #8]
   8044e:	60fb      	str	r3, [r7, #12]
	 /* Check whether there is overwriting happening in Receive with * Overwrite mode,
	 * or there're messages lost in Receive mode. */
	 
	if ((ul_status & CAN_MSR_MRDY) && (ul_status & CAN_MSR_MMI)) {	ul_retval = CAN_MAILBOX_RX_OVER;	}
   80450:	68fb      	ldr	r3, [r7, #12]
   80452:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   80456:	2b00      	cmp	r3, #0
   80458:	d006      	beq.n	80468 <dd_can_mailbox_read+0x30>
   8045a:	68fb      	ldr	r3, [r7, #12]
   8045c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   80460:	2b00      	cmp	r3, #0
   80462:	d001      	beq.n	80468 <dd_can_mailbox_read+0x30>
   80464:	2302      	movs	r3, #2
   80466:	617b      	str	r3, [r7, #20]

	/* Read the message family ID. */
	p_mailbox->ul_fid =	CAN0->CAN_MB[uc_index].CAN_MFID & CAN_MFID_MFID_Msk;	
   80468:	4a26      	ldr	r2, [pc, #152]	; (80504 <dd_can_mailbox_read+0xcc>)
   8046a:	7cfb      	ldrb	r3, [r7, #19]
   8046c:	015b      	lsls	r3, r3, #5
   8046e:	4413      	add	r3, r2
   80470:	f503 7303 	add.w	r3, r3, #524	; 0x20c
   80474:	681b      	ldr	r3, [r3, #0]
   80476:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   8047a:	687b      	ldr	r3, [r7, #4]
   8047c:	615a      	str	r2, [r3, #20]

	/* Read received data length. */
	p_mailbox->uc_length = (ul_status & CAN_MSR_MDLC_Msk) >> CAN_MSR_MDLC_Pos;
   8047e:	68fb      	ldr	r3, [r7, #12]
   80480:	0c1b      	lsrs	r3, r3, #16
   80482:	b2db      	uxtb	r3, r3
   80484:	f003 030f 	and.w	r3, r3, #15
   80488:	b2da      	uxtb	r2, r3
   8048a:	687b      	ldr	r3, [r7, #4]
   8048c:	719a      	strb	r2, [r3, #6]
	
	/* Read received data. */
	p_mailbox->ul_datal = CAN0->CAN_MB[uc_index].CAN_MDL;
   8048e:	4a1d      	ldr	r2, [pc, #116]	; (80504 <dd_can_mailbox_read+0xcc>)
   80490:	7cfb      	ldrb	r3, [r7, #19]
   80492:	015b      	lsls	r3, r3, #5
   80494:	4413      	add	r3, r2
   80496:	f503 7305 	add.w	r3, r3, #532	; 0x214
   8049a:	681a      	ldr	r2, [r3, #0]
   8049c:	687b      	ldr	r3, [r7, #4]
   8049e:	619a      	str	r2, [r3, #24]
	p_mailbox->ul_datah = CAN0->CAN_MB[uc_index].CAN_MDH;
   804a0:	4a18      	ldr	r2, [pc, #96]	; (80504 <dd_can_mailbox_read+0xcc>)
   804a2:	7cfb      	ldrb	r3, [r7, #19]
   804a4:	015b      	lsls	r3, r3, #5
   804a6:	4413      	add	r3, r2
   804a8:	f503 7306 	add.w	r3, r3, #536	; 0x218
   804ac:	681a      	ldr	r2, [r3, #0]
   804ae:	687b      	ldr	r3, [r7, #4]
   804b0:	61da      	str	r2, [r3, #28]
	
	
	/* Read the mailbox status again to check whether the software needs to
	 * re-read mailbox data register. */
	p_mailbox->ul_status = CAN0->CAN_MB[uc_index].CAN_MSR;
   804b2:	4a14      	ldr	r2, [pc, #80]	; (80504 <dd_can_mailbox_read+0xcc>)
   804b4:	7cfb      	ldrb	r3, [r7, #19]
   804b6:	015b      	lsls	r3, r3, #5
   804b8:	4413      	add	r3, r2
   804ba:	f503 7304 	add.w	r3, r3, #528	; 0x210
   804be:	681a      	ldr	r2, [r3, #0]
   804c0:	687b      	ldr	r3, [r7, #4]
   804c2:	609a      	str	r2, [r3, #8]
	ul_status = p_mailbox->ul_status;
   804c4:	687b      	ldr	r3, [r7, #4]
   804c6:	689b      	ldr	r3, [r3, #8]
   804c8:	60fb      	str	r3, [r7, #12]
	if (ul_status & CAN_MSR_MMI) {ul_retval |= CAN_MAILBOX_RX_NEED_RD_AGAIN;	}
   804ca:	68fb      	ldr	r3, [r7, #12]
   804cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   804d0:	2b00      	cmp	r3, #0
   804d2:	d003      	beq.n	804dc <dd_can_mailbox_read+0xa4>
   804d4:	697b      	ldr	r3, [r7, #20]
   804d6:	f043 0304 	orr.w	r3, r3, #4
   804da:	617b      	str	r3, [r7, #20]
	else { ul_retval |= CAN_MAILBOX_TRANSFER_OK; }		
		
	/* Enable next receive process. */	 // Allows the reception of the next message
	CAN0->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MTCR |CAN_MCR_MDLC(p_mailbox->uc_length);    
   804dc:	4909      	ldr	r1, [pc, #36]	; (80504 <dd_can_mailbox_read+0xcc>)
   804de:	7cfb      	ldrb	r3, [r7, #19]
   804e0:	687a      	ldr	r2, [r7, #4]
   804e2:	7992      	ldrb	r2, [r2, #6]
   804e4:	0412      	lsls	r2, r2, #16
   804e6:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   804ea:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
   804ee:	015b      	lsls	r3, r3, #5
   804f0:	440b      	add	r3, r1
   804f2:	f503 7307 	add.w	r3, r3, #540	; 0x21c
   804f6:	601a      	str	r2, [r3, #0]
	return ul_retval;
   804f8:	697b      	ldr	r3, [r7, #20]
}
   804fa:	4618      	mov	r0, r3
   804fc:	371c      	adds	r7, #28
   804fe:	46bd      	mov	sp, r7
   80500:	bc80      	pop	{r7}
   80502:	4770      	bx	lr
   80504:	400b4000 	.word	0x400b4000

00080508 <dd_can_mailbox_conf>:
}



 void dd_can_mailbox_conf(can_mb_conf_t *p_mailbox)
{
   80508:	b480      	push	{r7}
   8050a:	b085      	sub	sp, #20
   8050c:	af00      	add	r7, sp, #0
   8050e:	6078      	str	r0, [r7, #4]
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   80510:	687b      	ldr	r3, [r7, #4]
   80512:	681b      	ldr	r3, [r3, #0]
   80514:	73fb      	strb	r3, [r7, #15]
	/* Check the object type of the mailbox. If it's used to disable the
	 * mailbox, reset the whole mailbox. */
	if (!p_mailbox->uc_obj_type) {
   80516:	687b      	ldr	r3, [r7, #4]
   80518:	791b      	ldrb	r3, [r3, #4]
   8051a:	2b00      	cmp	r3, #0
   8051c:	d12f      	bne.n	8057e <dd_can_mailbox_conf+0x76>
		CAN0->CAN_MB[uc_index].CAN_MMR = 0;
   8051e:	4a35      	ldr	r2, [pc, #212]	; (805f4 <dd_can_mailbox_conf+0xec>)
   80520:	7bfb      	ldrb	r3, [r7, #15]
   80522:	3310      	adds	r3, #16
   80524:	015b      	lsls	r3, r3, #5
   80526:	4413      	add	r3, r2
   80528:	2200      	movs	r2, #0
   8052a:	601a      	str	r2, [r3, #0]
		CAN0->CAN_MB[uc_index].CAN_MAM = 0;
   8052c:	4a31      	ldr	r2, [pc, #196]	; (805f4 <dd_can_mailbox_conf+0xec>)
   8052e:	7bfb      	ldrb	r3, [r7, #15]
   80530:	3310      	adds	r3, #16
   80532:	015b      	lsls	r3, r3, #5
   80534:	4413      	add	r3, r2
   80536:	3304      	adds	r3, #4
   80538:	2200      	movs	r2, #0
   8053a:	601a      	str	r2, [r3, #0]
		CAN0->CAN_MB[uc_index].CAN_MID = 0;
   8053c:	4a2d      	ldr	r2, [pc, #180]	; (805f4 <dd_can_mailbox_conf+0xec>)
   8053e:	7bfb      	ldrb	r3, [r7, #15]
   80540:	015b      	lsls	r3, r3, #5
   80542:	4413      	add	r3, r2
   80544:	f503 7302 	add.w	r3, r3, #520	; 0x208
   80548:	2200      	movs	r2, #0
   8054a:	601a      	str	r2, [r3, #0]
		CAN0->CAN_MB[uc_index].CAN_MDL = 0;
   8054c:	4a29      	ldr	r2, [pc, #164]	; (805f4 <dd_can_mailbox_conf+0xec>)
   8054e:	7bfb      	ldrb	r3, [r7, #15]
   80550:	015b      	lsls	r3, r3, #5
   80552:	4413      	add	r3, r2
   80554:	f503 7305 	add.w	r3, r3, #532	; 0x214
   80558:	2200      	movs	r2, #0
   8055a:	601a      	str	r2, [r3, #0]
		CAN0->CAN_MB[uc_index].CAN_MDH = 0;
   8055c:	4a25      	ldr	r2, [pc, #148]	; (805f4 <dd_can_mailbox_conf+0xec>)
   8055e:	7bfb      	ldrb	r3, [r7, #15]
   80560:	015b      	lsls	r3, r3, #5
   80562:	4413      	add	r3, r2
   80564:	f503 7306 	add.w	r3, r3, #536	; 0x218
   80568:	2200      	movs	r2, #0
   8056a:	601a      	str	r2, [r3, #0]
		CAN0->CAN_MB[uc_index].CAN_MCR = 0;
   8056c:	4a21      	ldr	r2, [pc, #132]	; (805f4 <dd_can_mailbox_conf+0xec>)
   8056e:	7bfb      	ldrb	r3, [r7, #15]
   80570:	015b      	lsls	r3, r3, #5
   80572:	4413      	add	r3, r2
   80574:	f503 7307 	add.w	r3, r3, #540	; 0x21c
   80578:	2200      	movs	r2, #0
   8057a:	601a      	str	r2, [r3, #0]
		return;
   8057c:	e035      	b.n	805ea <dd_can_mailbox_conf+0xe2>
	}
	
	/* Set the priority in Transmit mode. */                                                                   
	CAN0->CAN_MB[uc_index].CAN_MMR = (CAN0->CAN_MB[uc_index].CAN_MMR &  ~CAN_MMR_PRIOR_Msk) | (p_mailbox->uc_tx_prio << CAN_MMR_PRIOR_Pos);  
   8057e:	481d      	ldr	r0, [pc, #116]	; (805f4 <dd_can_mailbox_conf+0xec>)
   80580:	7bfb      	ldrb	r3, [r7, #15]
   80582:	491c      	ldr	r1, [pc, #112]	; (805f4 <dd_can_mailbox_conf+0xec>)
   80584:	7bfa      	ldrb	r2, [r7, #15]
   80586:	3210      	adds	r2, #16
   80588:	0152      	lsls	r2, r2, #5
   8058a:	440a      	add	r2, r1
   8058c:	6812      	ldr	r2, [r2, #0]
   8058e:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
   80592:	6879      	ldr	r1, [r7, #4]
   80594:	79c9      	ldrb	r1, [r1, #7]
   80596:	0409      	lsls	r1, r1, #16
   80598:	430a      	orrs	r2, r1
   8059a:	3310      	adds	r3, #16
   8059c:	015b      	lsls	r3, r3, #5
   8059e:	4403      	add	r3, r0
   805a0:	601a      	str	r2, [r3, #0]
	/* Set the message ID and message acceptance mask for the mailbox in * other modes. */	
		CAN0 ->CAN_MB[uc_index].CAN_MAM = p_mailbox->ul_id_msk;
   805a2:	4914      	ldr	r1, [pc, #80]	; (805f4 <dd_can_mailbox_conf+0xec>)
   805a4:	7bfb      	ldrb	r3, [r7, #15]
   805a6:	687a      	ldr	r2, [r7, #4]
   805a8:	68d2      	ldr	r2, [r2, #12]
   805aa:	3310      	adds	r3, #16
   805ac:	015b      	lsls	r3, r3, #5
   805ae:	440b      	add	r3, r1
   805b0:	3304      	adds	r3, #4
   805b2:	601a      	str	r2, [r3, #0]
		CAN0 ->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;	
   805b4:	490f      	ldr	r1, [pc, #60]	; (805f4 <dd_can_mailbox_conf+0xec>)
   805b6:	7bfb      	ldrb	r3, [r7, #15]
   805b8:	687a      	ldr	r2, [r7, #4]
   805ba:	6912      	ldr	r2, [r2, #16]
   805bc:	015b      	lsls	r3, r3, #5
   805be:	440b      	add	r3, r1
   805c0:	f503 7302 	add.w	r3, r3, #520	; 0x208
   805c4:	601a      	str	r2, [r3, #0]

	/* Set up mailbox in one of the five different modes. */                                                      
	CAN0 ->CAN_MB[uc_index].CAN_MMR = (CAN0 ->CAN_MB[uc_index].CAN_MMR & ~CAN_MMR_MOT_Msk) | (p_mailbox->uc_obj_type << CAN_MMR_MOT_Pos);		
   805c6:	480b      	ldr	r0, [pc, #44]	; (805f4 <dd_can_mailbox_conf+0xec>)
   805c8:	7bfb      	ldrb	r3, [r7, #15]
   805ca:	490a      	ldr	r1, [pc, #40]	; (805f4 <dd_can_mailbox_conf+0xec>)
   805cc:	7bfa      	ldrb	r2, [r7, #15]
   805ce:	3210      	adds	r2, #16
   805d0:	0152      	lsls	r2, r2, #5
   805d2:	440a      	add	r2, r1
   805d4:	6812      	ldr	r2, [r2, #0]
   805d6:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
   805da:	6879      	ldr	r1, [r7, #4]
   805dc:	7909      	ldrb	r1, [r1, #4]
   805de:	0609      	lsls	r1, r1, #24
   805e0:	430a      	orrs	r2, r1
   805e2:	3310      	adds	r3, #16
   805e4:	015b      	lsls	r3, r3, #5
   805e6:	4403      	add	r3, r0
   805e8:	601a      	str	r2, [r3, #0]
}
   805ea:	3714      	adds	r7, #20
   805ec:	46bd      	mov	sp, r7
   805ee:	bc80      	pop	{r7}
   805f0:	4770      	bx	lr
   805f2:	bf00      	nop
   805f4:	400b4000 	.word	0x400b4000

000805f8 <DD_INIT_CAN>:
	p_mailbox->ul_fid = 0;
	p_mailbox->ul_datal = 0;
	p_mailbox->ul_datah = 0;
}

void DD_INIT_CAN()     {
   805f8:	b580      	push	{r7, lr}
   805fa:	b08e      	sub	sp, #56	; 0x38
   805fc:	af00      	add	r7, sp, #0
	can_bit_timing_t  *p_bit_time ;
	p_bit_time = (can_bit_timing_t *)&can_bit_time[6];
   805fe:	4b4c      	ldr	r3, [pc, #304]	; (80730 <DD_INIT_CAN+0x138>)
   80600:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t ul_flag;
	uint32_t ul_tick;
	uint8_t uc_prescale = 120;
   80602:	2378      	movs	r3, #120	; 0x78
   80604:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t ul_sysclk;
	CAN0 ->CAN_WPMR = 0x43414E00;  //Can write protection disabled
   80608:	4b4a      	ldr	r3, [pc, #296]	; (80734 <DD_INIT_CAN+0x13c>)
   8060a:	4a4b      	ldr	r2, [pc, #300]	; (80738 <DD_INIT_CAN+0x140>)
   8060c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	CAN0 ->CAN_MR &= ~CAN_MR_CANEN ;  //0xFFFFFFFE; // DISABLE CAN0
   80610:	4a48      	ldr	r2, [pc, #288]	; (80734 <DD_INIT_CAN+0x13c>)
   80612:	4b48      	ldr	r3, [pc, #288]	; (80734 <DD_INIT_CAN+0x13c>)
   80614:	681b      	ldr	r3, [r3, #0]
   80616:	f023 0301 	bic.w	r3, r3, #1
   8061a:	6013      	str	r3, [r2, #0]
	CAN0->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) | CAN_BR_PROPAG(p_bit_time->uc_prog - 1) | CAN_BR_SJW(p_bit_time->uc_sjw - 1) |	CAN_BR_BRP(uc_prescale - 1);
   8061c:	4945      	ldr	r1, [pc, #276]	; (80734 <DD_INIT_CAN+0x13c>)
   8061e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   80620:	78db      	ldrb	r3, [r3, #3]
   80622:	3b01      	subs	r3, #1
   80624:	f003 0207 	and.w	r2, r3, #7
   80628:	6abb      	ldr	r3, [r7, #40]	; 0x28
   8062a:	789b      	ldrb	r3, [r3, #2]
   8062c:	3b01      	subs	r3, #1
   8062e:	011b      	lsls	r3, r3, #4
   80630:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80634:	431a      	orrs	r2, r3
   80636:	6abb      	ldr	r3, [r7, #40]	; 0x28
   80638:	785b      	ldrb	r3, [r3, #1]
   8063a:	3b01      	subs	r3, #1
   8063c:	021b      	lsls	r3, r3, #8
   8063e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
   80642:	431a      	orrs	r2, r3
   80644:	6abb      	ldr	r3, [r7, #40]	; 0x28
   80646:	791b      	ldrb	r3, [r3, #4]
   80648:	3b01      	subs	r3, #1
   8064a:	031b      	lsls	r3, r3, #12
   8064c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
   80650:	431a      	orrs	r2, r3
   80652:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   80656:	3b01      	subs	r3, #1
   80658:	041b      	lsls	r3, r3, #16
   8065a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
   8065e:	4313      	orrs	r3, r2
   80660:	614b      	str	r3, [r1, #20]
	can_mb_conf_t mb_config_t;
	
	//RESET ALL MAIL BOX
	//can_bit_timing_t *p_bit_time;
	/* Set the mailbox object type parameter to disable the mailbox. */
	mb_config_t.uc_obj_type = CAN_MB_DISABLE_MODE;
   80662:	2300      	movs	r3, #0
   80664:	723b      	strb	r3, [r7, #8]
	for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   80666:	2300      	movs	r3, #0
   80668:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   8066c:	e00b      	b.n	80686 <DD_INIT_CAN+0x8e>
		mb_config_t.ul_mb_idx = i;
   8066e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   80672:	607b      	str	r3, [r7, #4]
		dd_can_mailbox_conf(&mb_config_t);
   80674:	1d3b      	adds	r3, r7, #4
   80676:	4618      	mov	r0, r3
   80678:	4b30      	ldr	r3, [pc, #192]	; (8073c <DD_INIT_CAN+0x144>)
   8067a:	4798      	blx	r3
	
	//RESET ALL MAIL BOX
	//can_bit_timing_t *p_bit_time;
	/* Set the mailbox object type parameter to disable the mailbox. */
	mb_config_t.uc_obj_type = CAN_MB_DISABLE_MODE;
	for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   8067c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   80680:	3301      	adds	r3, #1
   80682:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   80686:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   8068a:	2b07      	cmp	r3, #7
   8068c:	d9ef      	bls.n	8066e <DD_INIT_CAN+0x76>
		mb_config_t.ul_mb_idx = i;
		dd_can_mailbox_conf(&mb_config_t);
	}
	// ALL MAIL BOX HAS BEEN RESET
	CAN0->CAN_MR |= CAN_MR_CANEN ;  //0x00000001; // CAN IS ENABLED
   8068e:	4a29      	ldr	r2, [pc, #164]	; (80734 <DD_INIT_CAN+0x13c>)
   80690:	4b28      	ldr	r3, [pc, #160]	; (80734 <DD_INIT_CAN+0x13c>)
   80692:	681b      	ldr	r3, [r3, #0]
   80694:	f043 0301 	orr.w	r3, r3, #1
   80698:	6013      	str	r3, [r2, #0]
	
	/* Wait until the CAN is synchronized with the bus activity. */
	ul_flag = 0;
   8069a:	2300      	movs	r3, #0
   8069c:	637b      	str	r3, [r7, #52]	; 0x34
	ul_tick = 0;
   8069e:	2300      	movs	r3, #0
   806a0:	633b      	str	r3, [r7, #48]	; 0x30
	while  (!(ul_flag & CAN_SR_WAKEUP) && (ul_tick < CAN_TIMEOUT))    {//(!(ul_flag & 0x100000 ) && (ul_tick < CAN_TIMEOUT)) {  //check can_bus wakeup bit
   806a2:	e005      	b.n	806b0 <DD_INIT_CAN+0xb8>
		ul_flag = (CAN0->CAN_SR);
   806a4:	4b23      	ldr	r3, [pc, #140]	; (80734 <DD_INIT_CAN+0x13c>)
   806a6:	691b      	ldr	r3, [r3, #16]
   806a8:	637b      	str	r3, [r7, #52]	; 0x34
		ul_tick++;
   806aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   806ac:	3301      	adds	r3, #1
   806ae:	633b      	str	r3, [r7, #48]	; 0x30
	CAN0->CAN_MR |= CAN_MR_CANEN ;  //0x00000001; // CAN IS ENABLED
	
	/* Wait until the CAN is synchronized with the bus activity. */
	ul_flag = 0;
	ul_tick = 0;
	while  (!(ul_flag & CAN_SR_WAKEUP) && (ul_tick < CAN_TIMEOUT))    {//(!(ul_flag & 0x100000 ) && (ul_tick < CAN_TIMEOUT)) {  //check can_bus wakeup bit
   806b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   806b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
   806b6:	2b00      	cmp	r3, #0
   806b8:	d103      	bne.n	806c2 <DD_INIT_CAN+0xca>
   806ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   806bc:	4a20      	ldr	r2, [pc, #128]	; (80740 <DD_INIT_CAN+0x148>)
   806be:	4293      	cmp	r3, r2
   806c0:	d9f0      	bls.n	806a4 <DD_INIT_CAN+0xac>
	/* Timeout or the CAN module has been synchronized with the bus. */
/*	if (CAN_TIMEOUT == ul_tick) { puts("CAN initialization (sync) ERROR" STRING_EOL);	}
	else {	puts("CAN initialization is completed." STRING_EOL);
	}*/
	//NVIC-> ISER reset_mailbox_conf(&can0_mailbox);
	can0_mailbox.ul_mb_idx =   MAILBOX_1;
   806c2:	4b20      	ldr	r3, [pc, #128]	; (80744 <DD_INIT_CAN+0x14c>)
   806c4:	2201      	movs	r2, #1
   806c6:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_RX_MODE ;
   806c8:	4b1e      	ldr	r3, [pc, #120]	; (80744 <DD_INIT_CAN+0x14c>)
   806ca:	2201      	movs	r2, #1
   806cc:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = 0;
   806ce:	4b1d      	ldr	r3, [pc, #116]	; (80744 <DD_INIT_CAN+0x14c>)
   806d0:	2200      	movs	r2, #0
   806d2:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   806d4:	4b1b      	ldr	r3, [pc, #108]	; (80744 <DD_INIT_CAN+0x14c>)
   806d6:	2200      	movs	r2, #0
   806d8:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk =  CAN_MFID_MFID_VA_dd(CAN_MASK);   // 0x7FC | CAN_MAM_MIDvA_Msk ;
   806da:	4b1a      	ldr	r3, [pc, #104]	; (80744 <DD_INIT_CAN+0x14c>)
   806dc:	4a1a      	ldr	r2, [pc, #104]	; (80748 <DD_INIT_CAN+0x150>)
   806de:	60da      	str	r2, [r3, #12]
	can0_mailbox.ul_id = CAN_MID_MIDvA_dd(PROPORTIONING_CPU_id) ;
   806e0:	4b18      	ldr	r3, [pc, #96]	; (80744 <DD_INIT_CAN+0x14c>)
   806e2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   806e6:	611a      	str	r2, [r3, #16]
	dd_can_mailbox_conf(&can0_mailbox);
   806e8:	4816      	ldr	r0, [pc, #88]	; (80744 <DD_INIT_CAN+0x14c>)
   806ea:	4b14      	ldr	r3, [pc, #80]	; (8073c <DD_INIT_CAN+0x144>)
   806ec:	4798      	blx	r3
	NVIC_EnableIRQ(CAN0_IRQn);
   806ee:	202b      	movs	r0, #43	; 0x2b
   806f0:	4b16      	ldr	r3, [pc, #88]	; (8074c <DD_INIT_CAN+0x154>)
   806f2:	4798      	blx	r3
	CAN0->CAN_IER = CAN_IER_MB1;
   806f4:	4b0f      	ldr	r3, [pc, #60]	; (80734 <DD_INIT_CAN+0x13c>)
   806f6:	2202      	movs	r2, #2
   806f8:	605a      	str	r2, [r3, #4]
	
	can0_mailbox.ul_mb_idx =   MAILBOX_0;
   806fa:	4b12      	ldr	r3, [pc, #72]	; (80744 <DD_INIT_CAN+0x14c>)
   806fc:	2200      	movs	r2, #0
   806fe:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_TX_MODE ;
   80700:	4b10      	ldr	r3, [pc, #64]	; (80744 <DD_INIT_CAN+0x14c>)
   80702:	2203      	movs	r2, #3
   80704:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = 1;
   80706:	4b0f      	ldr	r3, [pc, #60]	; (80744 <DD_INIT_CAN+0x14c>)
   80708:	2201      	movs	r2, #1
   8070a:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   8070c:	4b0d      	ldr	r3, [pc, #52]	; (80744 <DD_INIT_CAN+0x14c>)
   8070e:	2200      	movs	r2, #0
   80710:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk = CAN_MFID_MFID_VA_dd(CAN_MASK);// 0x7FC | CAN_MAM_MIDvA_Msk | CAN_MAM_MIDvB_Msk ;
   80712:	4b0c      	ldr	r3, [pc, #48]	; (80744 <DD_INIT_CAN+0x14c>)
   80714:	4a0c      	ldr	r2, [pc, #48]	; (80748 <DD_INIT_CAN+0x150>)
   80716:	60da      	str	r2, [r3, #12]
	can0_mailbox.ul_id = CAN_MID_MIDvA_dd(MASTER_CPU_id);
   80718:	4b0a      	ldr	r3, [pc, #40]	; (80744 <DD_INIT_CAN+0x14c>)
   8071a:	f44f 1220 	mov.w	r2, #2621440	; 0x280000
   8071e:	611a      	str	r2, [r3, #16]
	dd_can_mailbox_conf(&can0_mailbox);	
   80720:	4808      	ldr	r0, [pc, #32]	; (80744 <DD_INIT_CAN+0x14c>)
   80722:	4b06      	ldr	r3, [pc, #24]	; (8073c <DD_INIT_CAN+0x144>)
   80724:	4798      	blx	r3
}
   80726:	bf00      	nop
   80728:	3738      	adds	r7, #56	; 0x38
   8072a:	46bd      	mov	sp, r7
   8072c:	bd80      	pop	{r7, pc}
   8072e:	bf00      	nop
   80730:	00086718 	.word	0x00086718
   80734:	400b4000 	.word	0x400b4000
   80738:	43414e00 	.word	0x43414e00
   8073c:	00080509 	.word	0x00080509
   80740:	0001869f 	.word	0x0001869f
   80744:	20070dcc 	.word	0x20070dcc
   80748:	1ffc0000 	.word	0x1ffc0000
   8074c:	00080185 	.word	0x00080185

00080750 <CPU3_D_SET_PUMP>:
 */ 
#include "D_SYS.h"
#include "Platform/Service/sv_interface.h"

uint8_t CPU3_D_SET_PUMP(sv_pumptype id_pump)
{
   80750:	b580      	push	{r7, lr}
   80752:	b082      	sub	sp, #8
   80754:	af00      	add	r7, sp, #0
   80756:	4603      	mov	r3, r0
   80758:	71fb      	strb	r3, [r7, #7]
	PWM->PWM_CH_NUM[4].PWM_CPRD = 0x00000A41;
   8075a:	4b18      	ldr	r3, [pc, #96]	; (807bc <CPU3_D_SET_PUMP+0x6c>)
   8075c:	f640 2241 	movw	r2, #2625	; 0xa41
   80760:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
	PWM->PWM_CH_NUM[4].PWM_CDTY = 0x00000700;
   80764:	4b15      	ldr	r3, [pc, #84]	; (807bc <CPU3_D_SET_PUMP+0x6c>)
   80766:	f44f 62e0 	mov.w	r2, #1792	; 0x700
   8076a:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284
	
	PWM->PWM_CH_NUM[5].PWM_CPRD = 0x00000A41;
   8076e:	4b13      	ldr	r3, [pc, #76]	; (807bc <CPU3_D_SET_PUMP+0x6c>)
   80770:	f640 2241 	movw	r2, #2625	; 0xa41
   80774:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
	PWM->PWM_CH_NUM[5].PWM_CDTY = 0x00000700;
   80778:	4b10      	ldr	r3, [pc, #64]	; (807bc <CPU3_D_SET_PUMP+0x6c>)
   8077a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
   8077e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
	
	switch (id_pump)
   80782:	79fb      	ldrb	r3, [r7, #7]
   80784:	2b01      	cmp	r3, #1
   80786:	d002      	beq.n	8078e <CPU3_D_SET_PUMP+0x3e>
   80788:	2b02      	cmp	r3, #2
   8078a:	d009      	beq.n	807a0 <CPU3_D_SET_PUMP+0x50>
		PWM->PWM_ENA =0x00000020;
		gpio_configure_pin(PIN_PWM_LED1_GPIO,PIN_PWM_LED1_FLAGS);
		break;
		
		default:
		break;
   8078c:	e011      	b.n	807b2 <CPU3_D_SET_PUMP+0x62>
	
	switch (id_pump)
	{
		case ACID_PUMP: //ACID PUMP
		
		PWM->PWM_ENA =0x00000010;
   8078e:	4b0b      	ldr	r3, [pc, #44]	; (807bc <CPU3_D_SET_PUMP+0x6c>)
   80790:	2210      	movs	r2, #16
   80792:	605a      	str	r2, [r3, #4]
		gpio_configure_pin(PIN_PWM_LED0_GPIO,PIN_PWM_LED0_FLAGS);
   80794:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80798:	2055      	movs	r0, #85	; 0x55
   8079a:	4b09      	ldr	r3, [pc, #36]	; (807c0 <CPU3_D_SET_PUMP+0x70>)
   8079c:	4798      	blx	r3
		break;
   8079e:	e008      	b.n	807b2 <CPU3_D_SET_PUMP+0x62>
		
		case BICAR_PUMP:
		PWM->PWM_ENA =0x00000020;
   807a0:	4b06      	ldr	r3, [pc, #24]	; (807bc <CPU3_D_SET_PUMP+0x6c>)
   807a2:	2220      	movs	r2, #32
   807a4:	605a      	str	r2, [r3, #4]
		gpio_configure_pin(PIN_PWM_LED1_GPIO,PIN_PWM_LED1_FLAGS);
   807a6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   807aa:	2056      	movs	r0, #86	; 0x56
   807ac:	4b04      	ldr	r3, [pc, #16]	; (807c0 <CPU3_D_SET_PUMP+0x70>)
   807ae:	4798      	blx	r3
		break;
   807b0:	bf00      	nop
		
		default:
		break;
	}
	
	return 0;
   807b2:	2300      	movs	r3, #0
}
   807b4:	4618      	mov	r0, r3
   807b6:	3708      	adds	r7, #8
   807b8:	46bd      	mov	sp, r7
   807ba:	bd80      	pop	{r7, pc}
   807bc:	40094000 	.word	0x40094000
   807c0:	00082a3d 	.word	0x00082a3d

000807c4 <CPU3_D_CONFIG_TIMER>:
	return SENSOR_VAL;
	
}

uint8_t CPU3_D_CONFIG_TIMER(uint8_t timer_no, uint8_t timer_res)
{
   807c4:	b590      	push	{r4, r7, lr}
   807c6:	b089      	sub	sp, #36	; 0x24
   807c8:	af00      	add	r7, sp, #0
   807ca:	4603      	mov	r3, r0
   807cc:	460a      	mov	r2, r1
   807ce:	71fb      	strb	r3, [r7, #7]
   807d0:	4613      	mov	r3, r2
   807d2:	71bb      	strb	r3, [r7, #6]
	uint32_t ch_no=0,rc;
   807d4:	2300      	movs	r3, #0
   807d6:	61fb      	str	r3, [r7, #28]
	double rc_cal;
	rc_cal = ((84000000/(128 * timer_res)) -1);
   807d8:	79bb      	ldrb	r3, [r7, #6]
   807da:	01db      	lsls	r3, r3, #7
   807dc:	4a20      	ldr	r2, [pc, #128]	; (80860 <CPU3_D_CONFIG_TIMER+0x9c>)
   807de:	fb92 f3f3 	sdiv	r3, r2, r3
   807e2:	1e5a      	subs	r2, r3, #1
   807e4:	4b1f      	ldr	r3, [pc, #124]	; (80864 <CPU3_D_CONFIG_TIMER+0xa0>)
   807e6:	4610      	mov	r0, r2
   807e8:	4798      	blx	r3
   807ea:	4603      	mov	r3, r0
   807ec:	460c      	mov	r4, r1
   807ee:	e9c7 3404 	strd	r3, r4, [r7, #16]
	rc = rc_cal;
   807f2:	4b1d      	ldr	r3, [pc, #116]	; (80868 <CPU3_D_CONFIG_TIMER+0xa4>)
   807f4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   807f8:	4798      	blx	r3
   807fa:	4603      	mov	r3, r0
   807fc:	60fb      	str	r3, [r7, #12]

	switch (timer_no)
   807fe:	79fb      	ldrb	r3, [r7, #7]
   80800:	2b04      	cmp	r3, #4
   80802:	d826      	bhi.n	80852 <CPU3_D_CONFIG_TIMER+0x8e>
   80804:	a201      	add	r2, pc, #4	; (adr r2, 8080c <CPU3_D_CONFIG_TIMER+0x48>)
   80806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8080a:	bf00      	nop
   8080c:	00080821 	.word	0x00080821
   80810:	0008082f 	.word	0x0008082f
   80814:	00080841 	.word	0x00080841
   80818:	00080847 	.word	0x00080847
   8081c:	0008084d 	.word	0x0008084d
	{
		case 0:
		CPU3_D_MAIN_TIMER( TC2, ch_no, TC6_IRQn, rc);
   80820:	68fb      	ldr	r3, [r7, #12]
   80822:	2221      	movs	r2, #33	; 0x21
   80824:	69f9      	ldr	r1, [r7, #28]
   80826:	4811      	ldr	r0, [pc, #68]	; (8086c <CPU3_D_CONFIG_TIMER+0xa8>)
   80828:	4c11      	ldr	r4, [pc, #68]	; (80870 <CPU3_D_CONFIG_TIMER+0xac>)
   8082a:	47a0      	blx	r4
		break;
   8082c:	e012      	b.n	80854 <CPU3_D_CONFIG_TIMER+0x90>
		
		case 1:
		rc = timer_res;
   8082e:	79bb      	ldrb	r3, [r7, #6]
   80830:	60fb      	str	r3, [r7, #12]
		acid_startTimer1(TC0,0,TC0_IRQn,rc);
   80832:	68fb      	ldr	r3, [r7, #12]
   80834:	221b      	movs	r2, #27
   80836:	2100      	movs	r1, #0
   80838:	480e      	ldr	r0, [pc, #56]	; (80874 <CPU3_D_CONFIG_TIMER+0xb0>)
   8083a:	4c0f      	ldr	r4, [pc, #60]	; (80878 <CPU3_D_CONFIG_TIMER+0xb4>)
   8083c:	47a0      	blx	r4
		break;
   8083e:	e009      	b.n	80854 <CPU3_D_CONFIG_TIMER+0x90>
		
		case 2:
		rc = timer_res;
   80840:	79bb      	ldrb	r3, [r7, #6]
   80842:	60fb      	str	r3, [r7, #12]
		//acid_startTimer2(TC0,1,TC1_IRQn,rc);
		break;
   80844:	e006      	b.n	80854 <CPU3_D_CONFIG_TIMER+0x90>
		
		case 3:
		rc = timer_res;
   80846:	79bb      	ldrb	r3, [r7, #6]
   80848:	60fb      	str	r3, [r7, #12]
		//bicar_startTimer2(TC1,0,TC1_IRQn,rc);
		break;
   8084a:	e003      	b.n	80854 <CPU3_D_CONFIG_TIMER+0x90>
		
		case 4:
		rc = timer_res;
   8084c:	79bb      	ldrb	r3, [r7, #6]
   8084e:	60fb      	str	r3, [r7, #12]
		//bicar_startTimer2(TC1,1,TC1_IRQn,rc);
		break;
   80850:	e000      	b.n	80854 <CPU3_D_CONFIG_TIMER+0x90>
		
		
		default:
		break;
   80852:	bf00      	nop
		
	}
}
   80854:	bf00      	nop
   80856:	4618      	mov	r0, r3
   80858:	3724      	adds	r7, #36	; 0x24
   8085a:	46bd      	mov	sp, r7
   8085c:	bd90      	pop	{r4, r7, pc}
   8085e:	bf00      	nop
   80860:	0501bd00 	.word	0x0501bd00
   80864:	000836b9 	.word	0x000836b9
   80868:	00083785 	.word	0x00083785
   8086c:	40088000 	.word	0x40088000
   80870:	00081001 	.word	0x00081001
   80874:	40080000 	.word	0x40080000
   80878:	0008105d 	.word	0x0008105d

0008087c <CPU3_D_STOP_TIMER>:

uint8_t CPU3_D_STOP_TIMER(uint8_t timer_no)
{
   8087c:	b580      	push	{r7, lr}
   8087e:	b082      	sub	sp, #8
   80880:	af00      	add	r7, sp, #0
   80882:	4603      	mov	r3, r0
   80884:	71fb      	strb	r3, [r7, #7]
	//uint32_t ch_no=0;
	switch (timer_no)
   80886:	79fb      	ldrb	r3, [r7, #7]
   80888:	2b04      	cmp	r3, #4
   8088a:	d826      	bhi.n	808da <CPU3_D_STOP_TIMER+0x5e>
   8088c:	a201      	add	r2, pc, #4	; (adr r2, 80894 <CPU3_D_STOP_TIMER+0x18>)
   8088e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80892:	bf00      	nop
   80894:	000808a9 	.word	0x000808a9
   80898:	000808b3 	.word	0x000808b3
   8089c:	000808bd 	.word	0x000808bd
   808a0:	000808c7 	.word	0x000808c7
   808a4:	000808d1 	.word	0x000808d1
	{
		case 0:
		tc_stop(TC0,0);
   808a8:	2100      	movs	r1, #0
   808aa:	480f      	ldr	r0, [pc, #60]	; (808e8 <CPU3_D_STOP_TIMER+0x6c>)
   808ac:	4b0f      	ldr	r3, [pc, #60]	; (808ec <CPU3_D_STOP_TIMER+0x70>)
   808ae:	4798      	blx	r3
		break;
   808b0:	e014      	b.n	808dc <CPU3_D_STOP_TIMER+0x60>
		
		case 1:
		tc_stop(TC0,1);
   808b2:	2101      	movs	r1, #1
   808b4:	480c      	ldr	r0, [pc, #48]	; (808e8 <CPU3_D_STOP_TIMER+0x6c>)
   808b6:	4b0d      	ldr	r3, [pc, #52]	; (808ec <CPU3_D_STOP_TIMER+0x70>)
   808b8:	4798      	blx	r3
		break;
   808ba:	e00f      	b.n	808dc <CPU3_D_STOP_TIMER+0x60>
		
		case 2:
		tc_stop(TC2,0);
   808bc:	2100      	movs	r1, #0
   808be:	480c      	ldr	r0, [pc, #48]	; (808f0 <CPU3_D_STOP_TIMER+0x74>)
   808c0:	4b0a      	ldr	r3, [pc, #40]	; (808ec <CPU3_D_STOP_TIMER+0x70>)
   808c2:	4798      	blx	r3
		break;
   808c4:	e00a      	b.n	808dc <CPU3_D_STOP_TIMER+0x60>
		
		case 3:
		tc_stop(TC1,0);
   808c6:	2100      	movs	r1, #0
   808c8:	480a      	ldr	r0, [pc, #40]	; (808f4 <CPU3_D_STOP_TIMER+0x78>)
   808ca:	4b08      	ldr	r3, [pc, #32]	; (808ec <CPU3_D_STOP_TIMER+0x70>)
   808cc:	4798      	blx	r3
		break;
   808ce:	e005      	b.n	808dc <CPU3_D_STOP_TIMER+0x60>
		
		case 4:
		tc_stop(TC1,1);
   808d0:	2101      	movs	r1, #1
   808d2:	4808      	ldr	r0, [pc, #32]	; (808f4 <CPU3_D_STOP_TIMER+0x78>)
   808d4:	4b05      	ldr	r3, [pc, #20]	; (808ec <CPU3_D_STOP_TIMER+0x70>)
   808d6:	4798      	blx	r3
		break;
   808d8:	e000      	b.n	808dc <CPU3_D_STOP_TIMER+0x60>
		
		default:
		break;
   808da:	bf00      	nop
	}
   808dc:	bf00      	nop
   808de:	4618      	mov	r0, r3
   808e0:	3708      	adds	r7, #8
   808e2:	46bd      	mov	sp, r7
   808e4:	bd80      	pop	{r7, pc}
   808e6:	bf00      	nop
   808e8:	40080000 	.word	0x40080000
   808ec:	00081379 	.word	0x00081379
   808f0:	40088000 	.word	0x40088000
   808f4:	40084000 	.word	0x40084000

000808f8 <CPU3_D_INIT_PIO>:
 *  Author: wid7
 */ 
#include "D_GPIO.h"

void CPU3_D_INIT_PIO()
{
   808f8:	b580      	push	{r7, lr}
   808fa:	af00      	add	r7, sp, #0
	pmc_enable_periph_clk(ID_PIOA);
   808fc:	200b      	movs	r0, #11
   808fe:	4b3b      	ldr	r3, [pc, #236]	; (809ec <CPU3_D_INIT_PIO+0xf4>)
   80900:	4798      	blx	r3
	pmc_enable_periph_clk(ID_PIOB);
   80902:	200c      	movs	r0, #12
   80904:	4b39      	ldr	r3, [pc, #228]	; (809ec <CPU3_D_INIT_PIO+0xf4>)
   80906:	4798      	blx	r3
	pmc_enable_periph_clk(ID_PIOC);
   80908:	200d      	movs	r0, #13
   8090a:	4b38      	ldr	r3, [pc, #224]	; (809ec <CPU3_D_INIT_PIO+0xf4>)
   8090c:	4798      	blx	r3
	pmc_enable_periph_clk(ID_PIOD);
   8090e:	200e      	movs	r0, #14
   80910:	4b36      	ldr	r3, [pc, #216]	; (809ec <CPU3_D_INIT_PIO+0xf4>)
   80912:	4798      	blx	r3
	
	
	PIOA->PIO_WPMR = 0x50494F00;
   80914:	4b36      	ldr	r3, [pc, #216]	; (809f0 <CPU3_D_INIT_PIO+0xf8>)
   80916:	4a37      	ldr	r2, [pc, #220]	; (809f4 <CPU3_D_INIT_PIO+0xfc>)
   80918:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOB->PIO_WPMR = 0x50494F00;
   8091c:	4b36      	ldr	r3, [pc, #216]	; (809f8 <CPU3_D_INIT_PIO+0x100>)
   8091e:	4a35      	ldr	r2, [pc, #212]	; (809f4 <CPU3_D_INIT_PIO+0xfc>)
   80920:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOC->PIO_WPMR = 0x50494F00;
   80924:	4b35      	ldr	r3, [pc, #212]	; (809fc <CPU3_D_INIT_PIO+0x104>)
   80926:	4a33      	ldr	r2, [pc, #204]	; (809f4 <CPU3_D_INIT_PIO+0xfc>)
   80928:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOD->PIO_WPMR = 0x50494F00;
   8092c:	4b34      	ldr	r3, [pc, #208]	; (80a00 <CPU3_D_INIT_PIO+0x108>)
   8092e:	4a31      	ldr	r2, [pc, #196]	; (809f4 <CPU3_D_INIT_PIO+0xfc>)
   80930:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	
	PIOA->PIO_PUER = 0x00060000;			
   80934:	4b2e      	ldr	r3, [pc, #184]	; (809f0 <CPU3_D_INIT_PIO+0xf8>)
   80936:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
   8093a:	665a      	str	r2, [r3, #100]	; 0x64
	PIOA->PIO_PDR  = 0x1F870343;		//PIOA->PIO_PDR =	 0x00060000;				// initialization for TWI //
   8093c:	4b2c      	ldr	r3, [pc, #176]	; (809f0 <CPU3_D_INIT_PIO+0xf8>)
   8093e:	4a31      	ldr	r2, [pc, #196]	; (80a04 <CPU3_D_INIT_PIO+0x10c>)
   80940:	605a      	str	r2, [r3, #4]
	PIOA->PIO_ABSR = 0x00090000;
   80942:	4b2b      	ldr	r3, [pc, #172]	; (809f0 <CPU3_D_INIT_PIO+0xf8>)
   80944:	f44f 2210 	mov.w	r2, #589824	; 0x90000
   80948:	671a      	str	r2, [r3, #112]	; 0x70
	PIOA->PIO_PUER = 0x00000300;			// for scanf statement//
   8094a:	4b29      	ldr	r3, [pc, #164]	; (809f0 <CPU3_D_INIT_PIO+0xf8>)
   8094c:	f44f 7240 	mov.w	r2, #768	; 0x300
   80950:	665a      	str	r2, [r3, #100]	; 0x64
	PIOA->PIO_PUER = 0x00000300;
   80952:	4b27      	ldr	r3, [pc, #156]	; (809f0 <CPU3_D_INIT_PIO+0xf8>)
   80954:	f44f 7240 	mov.w	r2, #768	; 0x300
   80958:	665a      	str	r2, [r3, #100]	; 0x64
	PIOA->PIO_PER  = 0x0018C004;		//PIOA->PIO_PER  = 0x0018C000;
   8095a:	4b25      	ldr	r3, [pc, #148]	; (809f0 <CPU3_D_INIT_PIO+0xf8>)
   8095c:	4a2a      	ldr	r2, [pc, #168]	; (80a08 <CPU3_D_INIT_PIO+0x110>)
   8095e:	601a      	str	r2, [r3, #0]
	PIOA->PIO_OER  = 0x00180004;		//PIOA->PIO_OER  = 0x0018C000;
   80960:	4b23      	ldr	r3, [pc, #140]	; (809f0 <CPU3_D_INIT_PIO+0xf8>)
   80962:	4a2a      	ldr	r2, [pc, #168]	; (80a0c <CPU3_D_INIT_PIO+0x114>)
   80964:	611a      	str	r2, [r3, #16]
	PIOA->PIO_SODR = 0x00180000;           //??????
   80966:	4b22      	ldr	r3, [pc, #136]	; (809f0 <CPU3_D_INIT_PIO+0xf8>)
   80968:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
   8096c:	631a      	str	r2, [r3, #48]	; 0x30
	PIOA->PIO_ODR  = 0x0000C000;             //??????
   8096e:	4b20      	ldr	r3, [pc, #128]	; (809f0 <CPU3_D_INIT_PIO+0xf8>)
   80970:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   80974:	615a      	str	r2, [r3, #20]
	
		
	PIOB->PIO_PER  = 0x08204000;		//PIOB->PIO_OER  = 0x04204000;
   80976:	4b20      	ldr	r3, [pc, #128]	; (809f8 <CPU3_D_INIT_PIO+0x100>)
   80978:	4a25      	ldr	r2, [pc, #148]	; (80a10 <CPU3_D_INIT_PIO+0x118>)
   8097a:	601a      	str	r2, [r3, #0]
	PIOB->PIO_OER  = 0x08204000;		//PIOB->PIO_OER  = 0x06204000;
   8097c:	4b1e      	ldr	r3, [pc, #120]	; (809f8 <CPU3_D_INIT_PIO+0x100>)
   8097e:	4a24      	ldr	r2, [pc, #144]	; (80a10 <CPU3_D_INIT_PIO+0x118>)
   80980:	611a      	str	r2, [r3, #16]
	PIOB->PIO_PDR  = 0xF01800FF;
   80982:	4b1d      	ldr	r3, [pc, #116]	; (809f8 <CPU3_D_INIT_PIO+0x100>)
   80984:	4a23      	ldr	r2, [pc, #140]	; (80a14 <CPU3_D_INIT_PIO+0x11c>)
   80986:	605a      	str	r2, [r3, #4]
	PIOB->PIO_SODR = 0x06204000;
   80988:	4b1b      	ldr	r3, [pc, #108]	; (809f8 <CPU3_D_INIT_PIO+0x100>)
   8098a:	4a23      	ldr	r2, [pc, #140]	; (80a18 <CPU3_D_INIT_PIO+0x120>)
   8098c:	631a      	str	r2, [r3, #48]	; 0x30
	PIOB->PIO_CODR = 0x04000000;
   8098e:	4b1a      	ldr	r3, [pc, #104]	; (809f8 <CPU3_D_INIT_PIO+0x100>)
   80990:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   80994:	635a      	str	r2, [r3, #52]	; 0x34
	
	PIOC->PIO_PER  = 0x0D8FF1FE;		//PIOC->PIO_PER  = 0x378FF1FE;
   80996:	4b19      	ldr	r3, [pc, #100]	; (809fc <CPU3_D_INIT_PIO+0x104>)
   80998:	4a20      	ldr	r2, [pc, #128]	; (80a1c <CPU3_D_INIT_PIO+0x124>)
   8099a:	601a      	str	r2, [r3, #0]
	PIOC->PIO_OER  = 0x008FF1FE;		//PIOC->PIO_OER  = 0x068FF1FE;
   8099c:	4b17      	ldr	r3, [pc, #92]	; (809fc <CPU3_D_INIT_PIO+0x104>)
   8099e:	4a20      	ldr	r2, [pc, #128]	; (80a20 <CPU3_D_INIT_PIO+0x128>)
   809a0:	611a      	str	r2, [r3, #16]
	PIOC->PIO_ODR  = 0x05000000;		//PIOC->PIO_ODR  = 0x14000000;
   809a2:	4b16      	ldr	r3, [pc, #88]	; (809fc <CPU3_D_INIT_PIO+0x104>)
   809a4:	f04f 62a0 	mov.w	r2, #83886080	; 0x5000000
   809a8:	615a      	str	r2, [r3, #20]
	PIOC->PIO_CODR = 0x060FF1FE;
   809aa:	4b14      	ldr	r3, [pc, #80]	; (809fc <CPU3_D_INIT_PIO+0x104>)
   809ac:	4a1d      	ldr	r2, [pc, #116]	; (80a24 <CPU3_D_INIT_PIO+0x12c>)
   809ae:	635a      	str	r2, [r3, #52]	; 0x34
	PIOC->PIO_CODR = 0x00800000;
   809b0:	4b12      	ldr	r3, [pc, #72]	; (809fc <CPU3_D_INIT_PIO+0x104>)
   809b2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   809b6:	635a      	str	r2, [r3, #52]	; 0x34

	PIOD->PIO_PER  = 0X000001E10;		//PIOD->PIO_PER  = 0x0000000F;
   809b8:	4b11      	ldr	r3, [pc, #68]	; (80a00 <CPU3_D_INIT_PIO+0x108>)
   809ba:	f641 6210 	movw	r2, #7696	; 0x1e10
   809be:	601a      	str	r2, [r3, #0]
	PIOD->PIO_OER  = 0x0000006F;
   809c0:	4b0f      	ldr	r3, [pc, #60]	; (80a00 <CPU3_D_INIT_PIO+0x108>)
   809c2:	226f      	movs	r2, #111	; 0x6f
   809c4:	611a      	str	r2, [r3, #16]
	//PIOD->PIO_SODR = 0x0000000F;
	PIOD->PIO_PUER = 0x0000000F;
   809c6:	4b0e      	ldr	r3, [pc, #56]	; (80a00 <CPU3_D_INIT_PIO+0x108>)
   809c8:	220f      	movs	r2, #15
   809ca:	665a      	str	r2, [r3, #100]	; 0x64
	
	gpio_configure_pin(PIN_CAN0_RX_IDX, PIN_CAN0_RX_FLAGS);
   809cc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   809d0:	2001      	movs	r0, #1
   809d2:	4b15      	ldr	r3, [pc, #84]	; (80a28 <CPU3_D_INIT_PIO+0x130>)
   809d4:	4798      	blx	r3
	gpio_configure_pin(PIN_CAN0_TX_IDX, PIN_CAN0_TX_FLAGS);
   809d6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   809da:	2000      	movs	r0, #0
   809dc:	4b12      	ldr	r3, [pc, #72]	; (80a28 <CPU3_D_INIT_PIO+0x130>)
   809de:	4798      	blx	r3
	gpio_configure_pin(PIN_CAN0_STANDBY_IDX, PIN_CAN0_STANDBY_FLAGS);
   809e0:	4912      	ldr	r1, [pc, #72]	; (80a2c <CPU3_D_INIT_PIO+0x134>)
   809e2:	2003      	movs	r0, #3
   809e4:	4b10      	ldr	r3, [pc, #64]	; (80a28 <CPU3_D_INIT_PIO+0x130>)
   809e6:	4798      	blx	r3





}
   809e8:	bf00      	nop
   809ea:	bd80      	pop	{r7, pc}
   809ec:	00082fcd 	.word	0x00082fcd
   809f0:	400e0e00 	.word	0x400e0e00
   809f4:	50494f00 	.word	0x50494f00
   809f8:	400e1000 	.word	0x400e1000
   809fc:	400e1200 	.word	0x400e1200
   80a00:	400e1400 	.word	0x400e1400
   80a04:	1f870343 	.word	0x1f870343
   80a08:	0018c004 	.word	0x0018c004
   80a0c:	00180004 	.word	0x00180004
   80a10:	08204000 	.word	0x08204000
   80a14:	f01800ff 	.word	0xf01800ff
   80a18:	06204000 	.word	0x06204000
   80a1c:	0d8ff1fe 	.word	0x0d8ff1fe
   80a20:	008ff1fe 	.word	0x008ff1fe
   80a24:	060ff1fe 	.word	0x060ff1fe
   80a28:	00082a3d 	.word	0x00082a3d
   80a2c:	30000001 	.word	0x30000001

00080a30 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
   80a30:	b480      	push	{r7}
   80a32:	b083      	sub	sp, #12
   80a34:	af00      	add	r7, sp, #0
   80a36:	4603      	mov	r3, r0
   80a38:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   80a3a:	4909      	ldr	r1, [pc, #36]	; (80a60 <NVIC_ClearPendingIRQ+0x30>)
   80a3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
   80a40:	095b      	lsrs	r3, r3, #5
   80a42:	79fa      	ldrb	r2, [r7, #7]
   80a44:	f002 021f 	and.w	r2, r2, #31
   80a48:	2001      	movs	r0, #1
   80a4a:	fa00 f202 	lsl.w	r2, r0, r2
   80a4e:	3360      	adds	r3, #96	; 0x60
   80a50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   80a54:	bf00      	nop
   80a56:	370c      	adds	r7, #12
   80a58:	46bd      	mov	sp, r7
   80a5a:	bc80      	pop	{r7}
   80a5c:	4770      	bx	lr
   80a5e:	bf00      	nop
   80a60:	e000e100 	.word	0xe000e100

00080a64 <TC0_Handler>:
		}
	}
}*/

void TC0_Handler()
{
   80a64:	b580      	push	{r7, lr}
   80a66:	af00      	add	r7, sp, #0
	PIOD->PIO_WPMR	= 0x50494F00;
   80a68:	4b2b      	ldr	r3, [pc, #172]	; (80b18 <TC0_Handler+0xb4>)
   80a6a:	4a2c      	ldr	r2, [pc, #176]	; (80b1c <TC0_Handler+0xb8>)
   80a6c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOC->PIO_WPMR  = 0x50494F00;
   80a70:	4b2b      	ldr	r3, [pc, #172]	; (80b20 <TC0_Handler+0xbc>)
   80a72:	4a2a      	ldr	r2, [pc, #168]	; (80b1c <TC0_Handler+0xb8>)
   80a74:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOD->PIO_OWER  = 0x00000003;
   80a78:	4b27      	ldr	r3, [pc, #156]	; (80b18 <TC0_Handler+0xb4>)
   80a7a:	2203      	movs	r2, #3
   80a7c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	PIOD->PIO_OWDR  = 0x0000000C;
   80a80:	4b25      	ldr	r3, [pc, #148]	; (80b18 <TC0_Handler+0xb4>)
   80a82:	220c      	movs	r2, #12
   80a84:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	PIOC->PIO_OWER  = 0x000001FE;
   80a88:	4b25      	ldr	r3, [pc, #148]	; (80b20 <TC0_Handler+0xbc>)
   80a8a:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
   80a8e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	PIOC->PIO_OWDR  = 0x000FF000;
   80a92:	4b23      	ldr	r3, [pc, #140]	; (80b20 <TC0_Handler+0xbc>)
   80a94:	f44f 227f 	mov.w	r2, #1044480	; 0xff000
   80a98:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	count = count+1;
   80a9c:	4b21      	ldr	r3, [pc, #132]	; (80b24 <TC0_Handler+0xc0>)
   80a9e:	681b      	ldr	r3, [r3, #0]
   80aa0:	3301      	adds	r3, #1
   80aa2:	4a20      	ldr	r2, [pc, #128]	; (80b24 <TC0_Handler+0xc0>)
   80aa4:	6013      	str	r3, [r2, #0]
	TC1_cnt++;
   80aa6:	4b20      	ldr	r3, [pc, #128]	; (80b28 <TC0_Handler+0xc4>)
   80aa8:	681b      	ldr	r3, [r3, #0]
   80aaa:	3301      	adds	r3, #1
   80aac:	4a1e      	ldr	r2, [pc, #120]	; (80b28 <TC0_Handler+0xc4>)
   80aae:	6013      	str	r3, [r2, #0]
   Cnt_TC0_total++;
   80ab0:	4b1e      	ldr	r3, [pc, #120]	; (80b2c <TC0_Handler+0xc8>)
   80ab2:	681b      	ldr	r3, [r3, #0]
   80ab4:	3301      	adds	r3, #1
   80ab6:	4a1d      	ldr	r2, [pc, #116]	; (80b2c <TC0_Handler+0xc8>)
   80ab8:	6013      	str	r3, [r2, #0]
	
	if(count<64)
   80aba:	4b1a      	ldr	r3, [pc, #104]	; (80b24 <TC0_Handler+0xc0>)
   80abc:	681b      	ldr	r3, [r3, #0]
   80abe:	2b3f      	cmp	r3, #63	; 0x3f
   80ac0:	d80e      	bhi.n	80ae0 <TC0_Handler+0x7c>
	{
		PIOD->PIO_ODSR = array_acid[count].dir;
   80ac2:	4a15      	ldr	r2, [pc, #84]	; (80b18 <TC0_Handler+0xb4>)
   80ac4:	4b17      	ldr	r3, [pc, #92]	; (80b24 <TC0_Handler+0xc0>)
   80ac6:	681b      	ldr	r3, [r3, #0]
   80ac8:	4919      	ldr	r1, [pc, #100]	; (80b30 <TC0_Handler+0xcc>)
   80aca:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
   80ace:	6393      	str	r3, [r2, #56]	; 0x38
		PIOC->PIO_ODSR = array_acid[count].AB;
   80ad0:	4a13      	ldr	r2, [pc, #76]	; (80b20 <TC0_Handler+0xbc>)
   80ad2:	4b14      	ldr	r3, [pc, #80]	; (80b24 <TC0_Handler+0xc0>)
   80ad4:	681b      	ldr	r3, [r3, #0]
   80ad6:	4916      	ldr	r1, [pc, #88]	; (80b30 <TC0_Handler+0xcc>)
   80ad8:	00db      	lsls	r3, r3, #3
   80ada:	440b      	add	r3, r1
   80adc:	685b      	ldr	r3, [r3, #4]
   80ade:	6393      	str	r3, [r2, #56]	; 0x38
		//printf("%x %x\n",array_acid[count].dir,array_acid[count].AB);
	}
	if (count >=64)
   80ae0:	4b10      	ldr	r3, [pc, #64]	; (80b24 <TC0_Handler+0xc0>)
   80ae2:	681b      	ldr	r3, [r3, #0]
   80ae4:	2b3f      	cmp	r3, #63	; 0x3f
   80ae6:	d911      	bls.n	80b0c <TC0_Handler+0xa8>
	{
		count = 0;
   80ae8:	4b0e      	ldr	r3, [pc, #56]	; (80b24 <TC0_Handler+0xc0>)
   80aea:	2200      	movs	r2, #0
   80aec:	601a      	str	r2, [r3, #0]
		PIOD->PIO_ODSR = array_acid[count].dir;
   80aee:	4a0a      	ldr	r2, [pc, #40]	; (80b18 <TC0_Handler+0xb4>)
   80af0:	4b0c      	ldr	r3, [pc, #48]	; (80b24 <TC0_Handler+0xc0>)
   80af2:	681b      	ldr	r3, [r3, #0]
   80af4:	490e      	ldr	r1, [pc, #56]	; (80b30 <TC0_Handler+0xcc>)
   80af6:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
   80afa:	6393      	str	r3, [r2, #56]	; 0x38
		PIOC->PIO_ODSR = array_acid[count].AB;
   80afc:	4a08      	ldr	r2, [pc, #32]	; (80b20 <TC0_Handler+0xbc>)
   80afe:	4b09      	ldr	r3, [pc, #36]	; (80b24 <TC0_Handler+0xc0>)
   80b00:	681b      	ldr	r3, [r3, #0]
   80b02:	490b      	ldr	r1, [pc, #44]	; (80b30 <TC0_Handler+0xcc>)
   80b04:	00db      	lsls	r3, r3, #3
   80b06:	440b      	add	r3, r1
   80b08:	685b      	ldr	r3, [r3, #4]
   80b0a:	6393      	str	r3, [r2, #56]	; 0x38
		//printf("%x %x\n",array_acid[count].dir,array_acid[count].AB);
	}
	if ((tc_get_status(TC0, 0) & TC_SR_CPCS) == TC_SR_CPCS)
   80b0c:	2100      	movs	r1, #0
   80b0e:	4809      	ldr	r0, [pc, #36]	; (80b34 <TC0_Handler+0xd0>)
   80b10:	4b09      	ldr	r3, [pc, #36]	; (80b38 <TC0_Handler+0xd4>)
   80b12:	4798      	blx	r3
	{
	
	}
}
   80b14:	bf00      	nop
   80b16:	bd80      	pop	{r7, pc}
   80b18:	400e1400 	.word	0x400e1400
   80b1c:	50494f00 	.word	0x50494f00
   80b20:	400e1200 	.word	0x400e1200
   80b24:	20070cc8 	.word	0x20070cc8
   80b28:	20070ca0 	.word	0x20070ca0
   80b2c:	20070ca8 	.word	0x20070ca8
   80b30:	20070000 	.word	0x20070000
   80b34:	40080000 	.word	0x40080000
   80b38:	000813e5 	.word	0x000813e5

00080b3c <TC1_Handler>:

void TC1_Handler()
{	PIOD->PIO_WPMR	= 0x50494F00;
   80b3c:	b580      	push	{r7, lr}
   80b3e:	af00      	add	r7, sp, #0
   80b40:	4b2b      	ldr	r3, [pc, #172]	; (80bf0 <TC1_Handler+0xb4>)
   80b42:	4a2c      	ldr	r2, [pc, #176]	; (80bf4 <TC1_Handler+0xb8>)
   80b44:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOC->PIO_WPMR  = 0x50494F00;
   80b48:	4b2b      	ldr	r3, [pc, #172]	; (80bf8 <TC1_Handler+0xbc>)
   80b4a:	4a2a      	ldr	r2, [pc, #168]	; (80bf4 <TC1_Handler+0xb8>)
   80b4c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOD->PIO_OWER  = 0x0000000C;
   80b50:	4b27      	ldr	r3, [pc, #156]	; (80bf0 <TC1_Handler+0xb4>)
   80b52:	220c      	movs	r2, #12
   80b54:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	PIOD->PIO_OWDR  = 0x00000003;
   80b58:	4b25      	ldr	r3, [pc, #148]	; (80bf0 <TC1_Handler+0xb4>)
   80b5a:	2203      	movs	r2, #3
   80b5c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	PIOC->PIO_OWER  = 0x000FF000;
   80b60:	4b25      	ldr	r3, [pc, #148]	; (80bf8 <TC1_Handler+0xbc>)
   80b62:	f44f 227f 	mov.w	r2, #1044480	; 0xff000
   80b66:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	PIOC->PIO_OWDR  = 0x000001FE;
   80b6a:	4b23      	ldr	r3, [pc, #140]	; (80bf8 <TC1_Handler+0xbc>)
   80b6c:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
   80b70:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	count1 = count1+1;
   80b74:	4b21      	ldr	r3, [pc, #132]	; (80bfc <TC1_Handler+0xc0>)
   80b76:	681b      	ldr	r3, [r3, #0]
   80b78:	3301      	adds	r3, #1
   80b7a:	4a20      	ldr	r2, [pc, #128]	; (80bfc <TC1_Handler+0xc0>)
   80b7c:	6013      	str	r3, [r2, #0]
	TC2_cnt++;
   80b7e:	4b20      	ldr	r3, [pc, #128]	; (80c00 <TC1_Handler+0xc4>)
   80b80:	681b      	ldr	r3, [r3, #0]
   80b82:	3301      	adds	r3, #1
   80b84:	4a1e      	ldr	r2, [pc, #120]	; (80c00 <TC1_Handler+0xc4>)
   80b86:	6013      	str	r3, [r2, #0]
	Cnt_TC1_total++;
   80b88:	4b1e      	ldr	r3, [pc, #120]	; (80c04 <TC1_Handler+0xc8>)
   80b8a:	681b      	ldr	r3, [r3, #0]
   80b8c:	3301      	adds	r3, #1
   80b8e:	4a1d      	ldr	r2, [pc, #116]	; (80c04 <TC1_Handler+0xc8>)
   80b90:	6013      	str	r3, [r2, #0]
	if(count1<64)
   80b92:	4b1a      	ldr	r3, [pc, #104]	; (80bfc <TC1_Handler+0xc0>)
   80b94:	681b      	ldr	r3, [r3, #0]
   80b96:	2b3f      	cmp	r3, #63	; 0x3f
   80b98:	d80e      	bhi.n	80bb8 <TC1_Handler+0x7c>
	{
		PIOD->PIO_ODSR = array_bicar[count1].dir;
   80b9a:	4a15      	ldr	r2, [pc, #84]	; (80bf0 <TC1_Handler+0xb4>)
   80b9c:	4b17      	ldr	r3, [pc, #92]	; (80bfc <TC1_Handler+0xc0>)
   80b9e:	681b      	ldr	r3, [r3, #0]
   80ba0:	4919      	ldr	r1, [pc, #100]	; (80c08 <TC1_Handler+0xcc>)
   80ba2:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
   80ba6:	6393      	str	r3, [r2, #56]	; 0x38
		PIOC->PIO_ODSR = array_bicar[count1].AB;
   80ba8:	4a13      	ldr	r2, [pc, #76]	; (80bf8 <TC1_Handler+0xbc>)
   80baa:	4b14      	ldr	r3, [pc, #80]	; (80bfc <TC1_Handler+0xc0>)
   80bac:	681b      	ldr	r3, [r3, #0]
   80bae:	4916      	ldr	r1, [pc, #88]	; (80c08 <TC1_Handler+0xcc>)
   80bb0:	00db      	lsls	r3, r3, #3
   80bb2:	440b      	add	r3, r1
   80bb4:	685b      	ldr	r3, [r3, #4]
   80bb6:	6393      	str	r3, [r2, #56]	; 0x38
	}
	if (count1 >=64)
   80bb8:	4b10      	ldr	r3, [pc, #64]	; (80bfc <TC1_Handler+0xc0>)
   80bba:	681b      	ldr	r3, [r3, #0]
   80bbc:	2b3f      	cmp	r3, #63	; 0x3f
   80bbe:	d911      	bls.n	80be4 <TC1_Handler+0xa8>
	{
		count1 = 0;
   80bc0:	4b0e      	ldr	r3, [pc, #56]	; (80bfc <TC1_Handler+0xc0>)
   80bc2:	2200      	movs	r2, #0
   80bc4:	601a      	str	r2, [r3, #0]
		PIOD->PIO_ODSR = array_bicar[count1].dir;
   80bc6:	4a0a      	ldr	r2, [pc, #40]	; (80bf0 <TC1_Handler+0xb4>)
   80bc8:	4b0c      	ldr	r3, [pc, #48]	; (80bfc <TC1_Handler+0xc0>)
   80bca:	681b      	ldr	r3, [r3, #0]
   80bcc:	490e      	ldr	r1, [pc, #56]	; (80c08 <TC1_Handler+0xcc>)
   80bce:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
   80bd2:	6393      	str	r3, [r2, #56]	; 0x38
		PIOC->PIO_ODSR = array_bicar[count1].AB;
   80bd4:	4a08      	ldr	r2, [pc, #32]	; (80bf8 <TC1_Handler+0xbc>)
   80bd6:	4b09      	ldr	r3, [pc, #36]	; (80bfc <TC1_Handler+0xc0>)
   80bd8:	681b      	ldr	r3, [r3, #0]
   80bda:	490b      	ldr	r1, [pc, #44]	; (80c08 <TC1_Handler+0xcc>)
   80bdc:	00db      	lsls	r3, r3, #3
   80bde:	440b      	add	r3, r1
   80be0:	685b      	ldr	r3, [r3, #4]
   80be2:	6393      	str	r3, [r2, #56]	; 0x38
	}
	if ((tc_get_status(TC0, 1) & TC_SR_CPCS) == TC_SR_CPCS)
   80be4:	2101      	movs	r1, #1
   80be6:	4809      	ldr	r0, [pc, #36]	; (80c0c <TC1_Handler+0xd0>)
   80be8:	4b09      	ldr	r3, [pc, #36]	; (80c10 <TC1_Handler+0xd4>)
   80bea:	4798      	blx	r3
	{
		
		
	}
}
   80bec:	bf00      	nop
   80bee:	bd80      	pop	{r7, pc}
   80bf0:	400e1400 	.word	0x400e1400
   80bf4:	50494f00 	.word	0x50494f00
   80bf8:	400e1200 	.word	0x400e1200
   80bfc:	20070ccc 	.word	0x20070ccc
   80c00:	20070ca4 	.word	0x20070ca4
   80c04:	20070cac 	.word	0x20070cac
   80c08:	20070200 	.word	0x20070200
   80c0c:	40080000 	.word	0x40080000
   80c10:	000813e5 	.word	0x000813e5

00080c14 <TC2_Handler>:
void TC2_Handler()
{
   80c14:	b580      	push	{r7, lr}
   80c16:	af00      	add	r7, sp, #0
// 	else
// 	{
// 		i2c_counter = 0;
// 	}
	//printf("reached 2sec\n");
	tc_stop(TC0,0);
   80c18:	2100      	movs	r1, #0
   80c1a:	4808      	ldr	r0, [pc, #32]	; (80c3c <TC2_Handler+0x28>)
   80c1c:	4b08      	ldr	r3, [pc, #32]	; (80c40 <TC2_Handler+0x2c>)
   80c1e:	4798      	blx	r3
	tc_stop(TC0,1);
   80c20:	2101      	movs	r1, #1
   80c22:	4806      	ldr	r0, [pc, #24]	; (80c3c <TC2_Handler+0x28>)
   80c24:	4b06      	ldr	r3, [pc, #24]	; (80c40 <TC2_Handler+0x2c>)
   80c26:	4798      	blx	r3
// 	toggle = 1;
// }
// else
{
//	PIOB->PIO_CODR = 1 << 19 ;
	toggle = 0;
   80c28:	4b06      	ldr	r3, [pc, #24]	; (80c44 <TC2_Handler+0x30>)
   80c2a:	2200      	movs	r2, #0
   80c2c:	701a      	strb	r2, [r3, #0]
}

	if ((tc_get_status(TC0, 2) & TC_SR_CPCS) == TC_SR_CPCS)
   80c2e:	2102      	movs	r1, #2
   80c30:	4802      	ldr	r0, [pc, #8]	; (80c3c <TC2_Handler+0x28>)
   80c32:	4b05      	ldr	r3, [pc, #20]	; (80c48 <TC2_Handler+0x34>)
   80c34:	4798      	blx	r3
	{
		
	}
}
   80c36:	bf00      	nop
   80c38:	bd80      	pop	{r7, pc}
   80c3a:	bf00      	nop
   80c3c:	40080000 	.word	0x40080000
   80c40:	00081379 	.word	0x00081379
   80c44:	20070c9c 	.word	0x20070c9c
   80c48:	000813e5 	.word	0x000813e5

00080c4c <TC3_Handler>:
void TC3_Handler()
{
   80c4c:	b580      	push	{r7, lr}
   80c4e:	af00      	add	r7, sp, #0
	
	if ((tc_get_status(TC1, 0) & TC_SR_CPCS) == TC_SR_CPCS)
   80c50:	2100      	movs	r1, #0
   80c52:	4802      	ldr	r0, [pc, #8]	; (80c5c <TC3_Handler+0x10>)
   80c54:	4b02      	ldr	r3, [pc, #8]	; (80c60 <TC3_Handler+0x14>)
   80c56:	4798      	blx	r3
	{
		
	}
}
   80c58:	bf00      	nop
   80c5a:	bd80      	pop	{r7, pc}
   80c5c:	40084000 	.word	0x40084000
   80c60:	000813e5 	.word	0x000813e5

00080c64 <TC6_Handler>:

void TC6_Handler()
{
   80c64:	b580      	push	{r7, lr}
   80c66:	af00      	add	r7, sp, #0
	NVIC_ClearPendingIRQ(TC6_IRQn);
   80c68:	2021      	movs	r0, #33	; 0x21
   80c6a:	4b29      	ldr	r3, [pc, #164]	; (80d10 <TC6_Handler+0xac>)
   80c6c:	4798      	blx	r3
	tick++;
   80c6e:	4b29      	ldr	r3, [pc, #164]	; (80d14 <TC6_Handler+0xb0>)
   80c70:	681b      	ldr	r3, [r3, #0]
   80c72:	3301      	adds	r3, #1
   80c74:	4a27      	ldr	r2, [pc, #156]	; (80d14 <TC6_Handler+0xb0>)
   80c76:	6013      	str	r3, [r2, #0]
	if (tick == 10)
   80c78:	4b26      	ldr	r3, [pc, #152]	; (80d14 <TC6_Handler+0xb0>)
   80c7a:	681b      	ldr	r3, [r3, #0]
   80c7c:	2b0a      	cmp	r3, #10
   80c7e:	d10a      	bne.n	80c96 <TC6_Handler+0x32>
	{
		tick_10++;
   80c80:	4b25      	ldr	r3, [pc, #148]	; (80d18 <TC6_Handler+0xb4>)
   80c82:	681b      	ldr	r3, [r3, #0]
   80c84:	3301      	adds	r3, #1
   80c86:	4a24      	ldr	r2, [pc, #144]	; (80d18 <TC6_Handler+0xb4>)
   80c88:	6013      	str	r3, [r2, #0]
		tick = 0;
   80c8a:	4b22      	ldr	r3, [pc, #136]	; (80d14 <TC6_Handler+0xb0>)
   80c8c:	2200      	movs	r2, #0
   80c8e:	601a      	str	r2, [r3, #0]
		time_tick = TICK_10MS;
   80c90:	4b22      	ldr	r3, [pc, #136]	; (80d1c <TC6_Handler+0xb8>)
   80c92:	2200      	movs	r2, #0
   80c94:	601a      	str	r2, [r3, #0]
	}
	if (tick_10 == 5)
   80c96:	4b20      	ldr	r3, [pc, #128]	; (80d18 <TC6_Handler+0xb4>)
   80c98:	681b      	ldr	r3, [r3, #0]
   80c9a:	2b05      	cmp	r3, #5
   80c9c:	d10a      	bne.n	80cb4 <TC6_Handler+0x50>
	{
		tick_50++;
   80c9e:	4b20      	ldr	r3, [pc, #128]	; (80d20 <TC6_Handler+0xbc>)
   80ca0:	681b      	ldr	r3, [r3, #0]
   80ca2:	3301      	adds	r3, #1
   80ca4:	4a1e      	ldr	r2, [pc, #120]	; (80d20 <TC6_Handler+0xbc>)
   80ca6:	6013      	str	r3, [r2, #0]
		tick_10 = 0;
   80ca8:	4b1b      	ldr	r3, [pc, #108]	; (80d18 <TC6_Handler+0xb4>)
   80caa:	2200      	movs	r2, #0
   80cac:	601a      	str	r2, [r3, #0]
		time_tick = TICK_50MS;
   80cae:	4b1b      	ldr	r3, [pc, #108]	; (80d1c <TC6_Handler+0xb8>)
   80cb0:	2201      	movs	r2, #1
   80cb2:	601a      	str	r2, [r3, #0]
	}
	if (tick_50 == 2)
   80cb4:	4b1a      	ldr	r3, [pc, #104]	; (80d20 <TC6_Handler+0xbc>)
   80cb6:	681b      	ldr	r3, [r3, #0]
   80cb8:	2b02      	cmp	r3, #2
   80cba:	d10a      	bne.n	80cd2 <TC6_Handler+0x6e>
	{
		tick_100++;
   80cbc:	4b19      	ldr	r3, [pc, #100]	; (80d24 <TC6_Handler+0xc0>)
   80cbe:	681b      	ldr	r3, [r3, #0]
   80cc0:	3301      	adds	r3, #1
   80cc2:	4a18      	ldr	r2, [pc, #96]	; (80d24 <TC6_Handler+0xc0>)
   80cc4:	6013      	str	r3, [r2, #0]
		tick_50 = 0;
   80cc6:	4b16      	ldr	r3, [pc, #88]	; (80d20 <TC6_Handler+0xbc>)
   80cc8:	2200      	movs	r2, #0
   80cca:	601a      	str	r2, [r3, #0]
		time_tick = TICK_100MS;
   80ccc:	4b13      	ldr	r3, [pc, #76]	; (80d1c <TC6_Handler+0xb8>)
   80cce:	2202      	movs	r2, #2
   80cd0:	601a      	str	r2, [r3, #0]
	}
	if (tick_100 == 5)
   80cd2:	4b14      	ldr	r3, [pc, #80]	; (80d24 <TC6_Handler+0xc0>)
   80cd4:	681b      	ldr	r3, [r3, #0]
   80cd6:	2b05      	cmp	r3, #5
   80cd8:	d10a      	bne.n	80cf0 <TC6_Handler+0x8c>
	{
		tick_500++;
   80cda:	4b13      	ldr	r3, [pc, #76]	; (80d28 <TC6_Handler+0xc4>)
   80cdc:	681b      	ldr	r3, [r3, #0]
   80cde:	3301      	adds	r3, #1
   80ce0:	4a11      	ldr	r2, [pc, #68]	; (80d28 <TC6_Handler+0xc4>)
   80ce2:	6013      	str	r3, [r2, #0]
		tick_100 = 0;
   80ce4:	4b0f      	ldr	r3, [pc, #60]	; (80d24 <TC6_Handler+0xc0>)
   80ce6:	2200      	movs	r2, #0
   80ce8:	601a      	str	r2, [r3, #0]
		time_tick = TICK_500MS;
   80cea:	4b0c      	ldr	r3, [pc, #48]	; (80d1c <TC6_Handler+0xb8>)
   80cec:	2203      	movs	r2, #3
   80cee:	601a      	str	r2, [r3, #0]
	}
	if (tick_500 == 2)
   80cf0:	4b0d      	ldr	r3, [pc, #52]	; (80d28 <TC6_Handler+0xc4>)
   80cf2:	681b      	ldr	r3, [r3, #0]
   80cf4:	2b02      	cmp	r3, #2
   80cf6:	d105      	bne.n	80d04 <TC6_Handler+0xa0>
	{
		tick_500 = 0;
   80cf8:	4b0b      	ldr	r3, [pc, #44]	; (80d28 <TC6_Handler+0xc4>)
   80cfa:	2200      	movs	r2, #0
   80cfc:	601a      	str	r2, [r3, #0]
		time_tick = TICK_SEC;
   80cfe:	4b07      	ldr	r3, [pc, #28]	; (80d1c <TC6_Handler+0xb8>)
   80d00:	2204      	movs	r2, #4
   80d02:	601a      	str	r2, [r3, #0]
		//printf("1sec\n");
	}
	
	if ((tc_get_status(TC2, 0) & TC_SR_CPCS) == TC_SR_CPCS)
   80d04:	2100      	movs	r1, #0
   80d06:	4809      	ldr	r0, [pc, #36]	; (80d2c <TC6_Handler+0xc8>)
   80d08:	4b09      	ldr	r3, [pc, #36]	; (80d30 <TC6_Handler+0xcc>)
   80d0a:	4798      	blx	r3
	{
		//printf("i m in handler tc6\n");
	}
   80d0c:	bf00      	nop
   80d0e:	bd80      	pop	{r7, pc}
   80d10:	00080a31 	.word	0x00080a31
   80d14:	20070cb0 	.word	0x20070cb0
   80d18:	20070cb4 	.word	0x20070cb4
   80d1c:	200711e8 	.word	0x200711e8
   80d20:	20070cb8 	.word	0x20070cb8
   80d24:	20070cbc 	.word	0x20070cbc
   80d28:	20070cc0 	.word	0x20070cc0
   80d2c:	40088000 	.word	0x40088000
   80d30:	000813e5 	.word	0x000813e5

00080d34 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   80d34:	b480      	push	{r7}
   80d36:	b083      	sub	sp, #12
   80d38:	af00      	add	r7, sp, #0
   80d3a:	4603      	mov	r3, r0
   80d3c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   80d3e:	4908      	ldr	r1, [pc, #32]	; (80d60 <NVIC_EnableIRQ+0x2c>)
   80d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
   80d44:	095b      	lsrs	r3, r3, #5
   80d46:	79fa      	ldrb	r2, [r7, #7]
   80d48:	f002 021f 	and.w	r2, r2, #31
   80d4c:	2001      	movs	r0, #1
   80d4e:	fa00 f202 	lsl.w	r2, r0, r2
   80d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   80d56:	bf00      	nop
   80d58:	370c      	adds	r7, #12
   80d5a:	46bd      	mov	sp, r7
   80d5c:	bc80      	pop	{r7}
   80d5e:	4770      	bx	lr
   80d60:	e000e100 	.word	0xe000e100

00080d64 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
   80d64:	b480      	push	{r7}
   80d66:	b083      	sub	sp, #12
   80d68:	af00      	add	r7, sp, #0
   80d6a:	4603      	mov	r3, r0
   80d6c:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   80d6e:	4909      	ldr	r1, [pc, #36]	; (80d94 <NVIC_DisableIRQ+0x30>)
   80d70:	f997 3007 	ldrsb.w	r3, [r7, #7]
   80d74:	095b      	lsrs	r3, r3, #5
   80d76:	79fa      	ldrb	r2, [r7, #7]
   80d78:	f002 021f 	and.w	r2, r2, #31
   80d7c:	2001      	movs	r0, #1
   80d7e:	fa00 f202 	lsl.w	r2, r0, r2
   80d82:	3320      	adds	r3, #32
   80d84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   80d88:	bf00      	nop
   80d8a:	370c      	adds	r7, #12
   80d8c:	46bd      	mov	sp, r7
   80d8e:	bc80      	pop	{r7}
   80d90:	4770      	bx	lr
   80d92:	bf00      	nop
   80d94:	e000e100 	.word	0xe000e100

00080d98 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
   80d98:	b480      	push	{r7}
   80d9a:	b083      	sub	sp, #12
   80d9c:	af00      	add	r7, sp, #0
   80d9e:	4603      	mov	r3, r0
   80da0:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   80da2:	4909      	ldr	r1, [pc, #36]	; (80dc8 <NVIC_ClearPendingIRQ+0x30>)
   80da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
   80da8:	095b      	lsrs	r3, r3, #5
   80daa:	79fa      	ldrb	r2, [r7, #7]
   80dac:	f002 021f 	and.w	r2, r2, #31
   80db0:	2001      	movs	r0, #1
   80db2:	fa00 f202 	lsl.w	r2, r0, r2
   80db6:	3360      	adds	r3, #96	; 0x60
   80db8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   80dbc:	bf00      	nop
   80dbe:	370c      	adds	r7, #12
   80dc0:	46bd      	mov	sp, r7
   80dc2:	bc80      	pop	{r7}
   80dc4:	4770      	bx	lr
   80dc6:	bf00      	nop
   80dc8:	e000e100 	.word	0xe000e100

00080dcc <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   80dcc:	b480      	push	{r7}
   80dce:	b083      	sub	sp, #12
   80dd0:	af00      	add	r7, sp, #0
   80dd2:	4603      	mov	r3, r0
   80dd4:	6039      	str	r1, [r7, #0]
   80dd6:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   80dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
   80ddc:	2b00      	cmp	r3, #0
   80dde:	da0b      	bge.n	80df8 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   80de0:	490d      	ldr	r1, [pc, #52]	; (80e18 <NVIC_SetPriority+0x4c>)
   80de2:	79fb      	ldrb	r3, [r7, #7]
   80de4:	f003 030f 	and.w	r3, r3, #15
   80de8:	3b04      	subs	r3, #4
   80dea:	683a      	ldr	r2, [r7, #0]
   80dec:	b2d2      	uxtb	r2, r2
   80dee:	0112      	lsls	r2, r2, #4
   80df0:	b2d2      	uxtb	r2, r2
   80df2:	440b      	add	r3, r1
   80df4:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
   80df6:	e009      	b.n	80e0c <NVIC_SetPriority+0x40>
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   80df8:	4908      	ldr	r1, [pc, #32]	; (80e1c <NVIC_SetPriority+0x50>)
   80dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
   80dfe:	683a      	ldr	r2, [r7, #0]
   80e00:	b2d2      	uxtb	r2, r2
   80e02:	0112      	lsls	r2, r2, #4
   80e04:	b2d2      	uxtb	r2, r2
   80e06:	440b      	add	r3, r1
   80e08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   80e0c:	bf00      	nop
   80e0e:	370c      	adds	r7, #12
   80e10:	46bd      	mov	sp, r7
   80e12:	bc80      	pop	{r7}
   80e14:	4770      	bx	lr
   80e16:	bf00      	nop
   80e18:	e000ed00 	.word	0xe000ed00
   80e1c:	e000e100 	.word	0xe000e100

00080e20 <CPU3_D_INIT_INT>:
#include "D_INT.h"

#define BOARD_TWI_IRQn          TWI0_IRQn

void CPU3_D_INIT_INT()
{
   80e20:	b580      	push	{r7, lr}
   80e22:	af00      	add	r7, sp, #0
	
	NVIC_DisableIRQ(BOARD_TWI_IRQn);
   80e24:	2016      	movs	r0, #22
   80e26:	4b31      	ldr	r3, [pc, #196]	; (80eec <CPU3_D_INIT_INT+0xcc>)
   80e28:	4798      	blx	r3
	NVIC_ClearPendingIRQ(BOARD_TWI_IRQn);
   80e2a:	2016      	movs	r0, #22
   80e2c:	4b30      	ldr	r3, [pc, #192]	; (80ef0 <CPU3_D_INIT_INT+0xd0>)
   80e2e:	4798      	blx	r3
	NVIC_SetPriority(BOARD_TWI_IRQn, 0);
   80e30:	2100      	movs	r1, #0
   80e32:	2016      	movs	r0, #22
   80e34:	4b2f      	ldr	r3, [pc, #188]	; (80ef4 <CPU3_D_INIT_INT+0xd4>)
   80e36:	4798      	blx	r3
	NVIC_EnableIRQ(BOARD_TWI_IRQn);
   80e38:	2016      	movs	r0, #22
   80e3a:	4b2f      	ldr	r3, [pc, #188]	; (80ef8 <CPU3_D_INIT_INT+0xd8>)
   80e3c:	4798      	blx	r3
	
	NVIC_DisableIRQ(UART_IRQn);
   80e3e:	2008      	movs	r0, #8
   80e40:	4b2a      	ldr	r3, [pc, #168]	; (80eec <CPU3_D_INIT_INT+0xcc>)
   80e42:	4798      	blx	r3
	NVIC_ClearPendingIRQ(UART_IRQn);
   80e44:	2008      	movs	r0, #8
   80e46:	4b2a      	ldr	r3, [pc, #168]	; (80ef0 <CPU3_D_INIT_INT+0xd0>)
   80e48:	4798      	blx	r3
	NVIC_SetPriority(UART_IRQn,0);
   80e4a:	2100      	movs	r1, #0
   80e4c:	2008      	movs	r0, #8
   80e4e:	4b29      	ldr	r3, [pc, #164]	; (80ef4 <CPU3_D_INIT_INT+0xd4>)
   80e50:	4798      	blx	r3
	NVIC_EnableIRQ(UART_IRQn);
   80e52:	2008      	movs	r0, #8
   80e54:	4b28      	ldr	r3, [pc, #160]	; (80ef8 <CPU3_D_INIT_INT+0xd8>)
   80e56:	4798      	blx	r3
	uart_enable_interrupt(UART,UART_SR_RXRDY);
   80e58:	2101      	movs	r1, #1
   80e5a:	4828      	ldr	r0, [pc, #160]	; (80efc <CPU3_D_INIT_INT+0xdc>)
   80e5c:	4b28      	ldr	r3, [pc, #160]	; (80f00 <CPU3_D_INIT_INT+0xe0>)
   80e5e:	4798      	blx	r3
	
	NVIC_DisableIRQ(TC0_IRQn);
   80e60:	201b      	movs	r0, #27
   80e62:	4b22      	ldr	r3, [pc, #136]	; (80eec <CPU3_D_INIT_INT+0xcc>)
   80e64:	4798      	blx	r3
	NVIC_ClearPendingIRQ(TC0_IRQn);
   80e66:	201b      	movs	r0, #27
   80e68:	4b21      	ldr	r3, [pc, #132]	; (80ef0 <CPU3_D_INIT_INT+0xd0>)
   80e6a:	4798      	blx	r3
	NVIC_SetPriority(TC0_IRQn,0);
   80e6c:	2100      	movs	r1, #0
   80e6e:	201b      	movs	r0, #27
   80e70:	4b20      	ldr	r3, [pc, #128]	; (80ef4 <CPU3_D_INIT_INT+0xd4>)
   80e72:	4798      	blx	r3
	NVIC_EnableIRQ(TC0_IRQn);
   80e74:	201b      	movs	r0, #27
   80e76:	4b20      	ldr	r3, [pc, #128]	; (80ef8 <CPU3_D_INIT_INT+0xd8>)
   80e78:	4798      	blx	r3

	NVIC_DisableIRQ(TC1_IRQn);
   80e7a:	201c      	movs	r0, #28
   80e7c:	4b1b      	ldr	r3, [pc, #108]	; (80eec <CPU3_D_INIT_INT+0xcc>)
   80e7e:	4798      	blx	r3
	NVIC_ClearPendingIRQ(TC1_IRQn);
   80e80:	201c      	movs	r0, #28
   80e82:	4b1b      	ldr	r3, [pc, #108]	; (80ef0 <CPU3_D_INIT_INT+0xd0>)
   80e84:	4798      	blx	r3
	NVIC_SetPriority(TC1_IRQn,0);
   80e86:	2100      	movs	r1, #0
   80e88:	201c      	movs	r0, #28
   80e8a:	4b1a      	ldr	r3, [pc, #104]	; (80ef4 <CPU3_D_INIT_INT+0xd4>)
   80e8c:	4798      	blx	r3
	NVIC_EnableIRQ(TC1_IRQn);
   80e8e:	201c      	movs	r0, #28
   80e90:	4b19      	ldr	r3, [pc, #100]	; (80ef8 <CPU3_D_INIT_INT+0xd8>)
   80e92:	4798      	blx	r3
	
	NVIC_DisableIRQ(TC2_IRQn);
   80e94:	201d      	movs	r0, #29
   80e96:	4b15      	ldr	r3, [pc, #84]	; (80eec <CPU3_D_INIT_INT+0xcc>)
   80e98:	4798      	blx	r3
	NVIC_ClearPendingIRQ(TC2_IRQn);
   80e9a:	201d      	movs	r0, #29
   80e9c:	4b14      	ldr	r3, [pc, #80]	; (80ef0 <CPU3_D_INIT_INT+0xd0>)
   80e9e:	4798      	blx	r3
	NVIC_SetPriority(TC2_IRQn,0);
   80ea0:	2100      	movs	r1, #0
   80ea2:	201d      	movs	r0, #29
   80ea4:	4b13      	ldr	r3, [pc, #76]	; (80ef4 <CPU3_D_INIT_INT+0xd4>)
   80ea6:	4798      	blx	r3
	NVIC_EnableIRQ(TC2_IRQn);
   80ea8:	201d      	movs	r0, #29
   80eaa:	4b13      	ldr	r3, [pc, #76]	; (80ef8 <CPU3_D_INIT_INT+0xd8>)
   80eac:	4798      	blx	r3
	
	NVIC_DisableIRQ(TC3_IRQn);
   80eae:	201e      	movs	r0, #30
   80eb0:	4b0e      	ldr	r3, [pc, #56]	; (80eec <CPU3_D_INIT_INT+0xcc>)
   80eb2:	4798      	blx	r3
	NVIC_ClearPendingIRQ(TC3_IRQn);
   80eb4:	201e      	movs	r0, #30
   80eb6:	4b0e      	ldr	r3, [pc, #56]	; (80ef0 <CPU3_D_INIT_INT+0xd0>)
   80eb8:	4798      	blx	r3
	NVIC_SetPriority(TC3_IRQn,0);
   80eba:	2100      	movs	r1, #0
   80ebc:	201e      	movs	r0, #30
   80ebe:	4b0d      	ldr	r3, [pc, #52]	; (80ef4 <CPU3_D_INIT_INT+0xd4>)
   80ec0:	4798      	blx	r3
	NVIC_EnableIRQ(TC3_IRQn);
   80ec2:	201e      	movs	r0, #30
   80ec4:	4b0c      	ldr	r3, [pc, #48]	; (80ef8 <CPU3_D_INIT_INT+0xd8>)
   80ec6:	4798      	blx	r3
	
	NVIC_DisableIRQ(TC6_IRQn);
   80ec8:	2021      	movs	r0, #33	; 0x21
   80eca:	4b08      	ldr	r3, [pc, #32]	; (80eec <CPU3_D_INIT_INT+0xcc>)
   80ecc:	4798      	blx	r3
	NVIC_ClearPendingIRQ(TC6_IRQn);
   80ece:	2021      	movs	r0, #33	; 0x21
   80ed0:	4b07      	ldr	r3, [pc, #28]	; (80ef0 <CPU3_D_INIT_INT+0xd0>)
   80ed2:	4798      	blx	r3
	NVIC_SetPriority(TC6_IRQn,0);
   80ed4:	2100      	movs	r1, #0
   80ed6:	2021      	movs	r0, #33	; 0x21
   80ed8:	4b06      	ldr	r3, [pc, #24]	; (80ef4 <CPU3_D_INIT_INT+0xd4>)
   80eda:	4798      	blx	r3
	NVIC_EnableIRQ(TC6_IRQn);
   80edc:	2021      	movs	r0, #33	; 0x21
   80ede:	4b06      	ldr	r3, [pc, #24]	; (80ef8 <CPU3_D_INIT_INT+0xd8>)
   80ee0:	4798      	blx	r3
	
	NVIC_EnableIRQ(CAN0_IRQn);
   80ee2:	202b      	movs	r0, #43	; 0x2b
   80ee4:	4b04      	ldr	r3, [pc, #16]	; (80ef8 <CPU3_D_INIT_INT+0xd8>)
   80ee6:	4798      	blx	r3
	
	
   80ee8:	bf00      	nop
   80eea:	bd80      	pop	{r7, pc}
   80eec:	00080d65 	.word	0x00080d65
   80ef0:	00080d99 	.word	0x00080d99
   80ef4:	00080dcd 	.word	0x00080dcd
   80ef8:	00080d35 	.word	0x00080d35
   80efc:	400e0800 	.word	0x400e0800
   80f00:	000814b1 	.word	0x000814b1

00080f04 <CPU3_D_INIT_PWM>:
 */ 

#include "D_PWM.h"

void CPU3_D_INIT_PWM()
{
   80f04:	b480      	push	{r7}
   80f06:	af00      	add	r7, sp, #0
	PWM->PWM_WPCR = 0x50574D00;
   80f08:	4b14      	ldr	r3, [pc, #80]	; (80f5c <CPU3_D_INIT_PWM+0x58>)
   80f0a:	4a15      	ldr	r2, [pc, #84]	; (80f60 <CPU3_D_INIT_PWM+0x5c>)
   80f0c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	
	PWM->PWM_CH_NUM[4].PWM_CMR = PWM_CMR_CPOL|PWM_CMR_CPRE_MCK_DIV_32|PWM_CMR_CES|PWM_CMR_DTE|PWM_CMR_DTHI|PWM_CMR_DTLI;
   80f10:	4b12      	ldr	r3, [pc, #72]	; (80f5c <CPU3_D_INIT_PWM+0x58>)
   80f12:	4a14      	ldr	r2, [pc, #80]	; (80f64 <CPU3_D_INIT_PWM+0x60>)
   80f14:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
	PWM->PWM_CH_NUM[5].PWM_CMR = PWM_CMR_CPOL|PWM_CMR_CPRE_MCK_DIV_32|PWM_CMR_CES|PWM_CMR_DTE|PWM_CMR_DTHI|PWM_CMR_DTLI;
   80f18:	4b10      	ldr	r3, [pc, #64]	; (80f5c <CPU3_D_INIT_PWM+0x58>)
   80f1a:	4a12      	ldr	r2, [pc, #72]	; (80f64 <CPU3_D_INIT_PWM+0x60>)
   80f1c:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0

	PWM->PWM_DIS = 0x000000FF;
   80f20:	4b0e      	ldr	r3, [pc, #56]	; (80f5c <CPU3_D_INIT_PWM+0x58>)
   80f22:	22ff      	movs	r2, #255	; 0xff
   80f24:	609a      	str	r2, [r3, #8]
	
	PWM->PWM_CH_NUM[4].PWM_CPRD = 0x00000A41;
   80f26:	4b0d      	ldr	r3, [pc, #52]	; (80f5c <CPU3_D_INIT_PWM+0x58>)
   80f28:	f640 2241 	movw	r2, #2625	; 0xa41
   80f2c:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
	PWM->PWM_CH_NUM[4].PWM_CDTY = 0x00000700;
   80f30:	4b0a      	ldr	r3, [pc, #40]	; (80f5c <CPU3_D_INIT_PWM+0x58>)
   80f32:	f44f 62e0 	mov.w	r2, #1792	; 0x700
   80f36:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284
	
	PWM->PWM_CH_NUM[5].PWM_CPRD = 0x00000A41;
   80f3a:	4b08      	ldr	r3, [pc, #32]	; (80f5c <CPU3_D_INIT_PWM+0x58>)
   80f3c:	f640 2241 	movw	r2, #2625	; 0xa41
   80f40:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
	PWM->PWM_CH_NUM[5].PWM_CDTY = 0x00000700;
   80f44:	4b05      	ldr	r3, [pc, #20]	; (80f5c <CPU3_D_INIT_PWM+0x58>)
   80f46:	f44f 62e0 	mov.w	r2, #1792	; 0x700
   80f4a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
	PWM->PWM_ENA = 0x000000FF;
   80f4e:	4b03      	ldr	r3, [pc, #12]	; (80f5c <CPU3_D_INIT_PWM+0x58>)
   80f50:	22ff      	movs	r2, #255	; 0xff
   80f52:	605a      	str	r2, [r3, #4]
}
   80f54:	bf00      	nop
   80f56:	46bd      	mov	sp, r7
   80f58:	bc80      	pop	{r7}
   80f5a:	4770      	bx	lr
   80f5c:	40094000 	.word	0x40094000
   80f60:	50574d00 	.word	0x50574d00
   80f64:	00070605 	.word	0x00070605

00080f68 <CPU3_D_INIT_TIMER>:


extern uint32_t ra,rc;

void CPU3_D_INIT_TIMER()
{
   80f68:	b580      	push	{r7, lr}
   80f6a:	af00      	add	r7, sp, #0
	TC0->TC_WPMR = 0x54494D00;
   80f6c:	4b1f      	ldr	r3, [pc, #124]	; (80fec <CPU3_D_INIT_TIMER+0x84>)
   80f6e:	4a20      	ldr	r2, [pc, #128]	; (80ff0 <CPU3_D_INIT_TIMER+0x88>)
   80f70:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	TC1->TC_WPMR = 0x54494D00;
   80f74:	4b1f      	ldr	r3, [pc, #124]	; (80ff4 <CPU3_D_INIT_TIMER+0x8c>)
   80f76:	4a1e      	ldr	r2, [pc, #120]	; (80ff0 <CPU3_D_INIT_TIMER+0x88>)
   80f78:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	TC2->TC_WPMR = 0x54494D00;
   80f7c:	4b1e      	ldr	r3, [pc, #120]	; (80ff8 <CPU3_D_INIT_TIMER+0x90>)
   80f7e:	4a1c      	ldr	r2, [pc, #112]	; (80ff0 <CPU3_D_INIT_TIMER+0x88>)
   80f80:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	pmc_enable_periph_clk(ID_TC0);
   80f84:	201b      	movs	r0, #27
   80f86:	4b1d      	ldr	r3, [pc, #116]	; (80ffc <CPU3_D_INIT_TIMER+0x94>)
   80f88:	4798      	blx	r3
	pmc_enable_periph_clk(ID_TC1);
   80f8a:	201c      	movs	r0, #28
   80f8c:	4b1b      	ldr	r3, [pc, #108]	; (80ffc <CPU3_D_INIT_TIMER+0x94>)
   80f8e:	4798      	blx	r3
	pmc_enable_periph_clk(ID_TC3);
   80f90:	201e      	movs	r0, #30
   80f92:	4b1a      	ldr	r3, [pc, #104]	; (80ffc <CPU3_D_INIT_TIMER+0x94>)
   80f94:	4798      	blx	r3
	pmc_enable_periph_clk(ID_TC4);
   80f96:	201f      	movs	r0, #31
   80f98:	4b18      	ldr	r3, [pc, #96]	; (80ffc <CPU3_D_INIT_TIMER+0x94>)
   80f9a:	4798      	blx	r3
	pmc_enable_periph_clk(ID_TC6);
   80f9c:	2021      	movs	r0, #33	; 0x21
   80f9e:	4b17      	ldr	r3, [pc, #92]	; (80ffc <CPU3_D_INIT_TIMER+0x94>)
   80fa0:	4798      	blx	r3
	TC0->TC_CHANNEL[0].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   80fa2:	4b12      	ldr	r3, [pc, #72]	; (80fec <CPU3_D_INIT_TIMER+0x84>)
   80fa4:	f24c 0203 	movw	r2, #49155	; 0xc003
   80fa8:	605a      	str	r2, [r3, #4]
	TC0->TC_CHANNEL[1].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   80faa:	4b10      	ldr	r3, [pc, #64]	; (80fec <CPU3_D_INIT_TIMER+0x84>)
   80fac:	f24c 0203 	movw	r2, #49155	; 0xc003
   80fb0:	645a      	str	r2, [r3, #68]	; 0x44
	
	TC1->TC_CHANNEL[0].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   80fb2:	4b10      	ldr	r3, [pc, #64]	; (80ff4 <CPU3_D_INIT_TIMER+0x8c>)
   80fb4:	f24c 0203 	movw	r2, #49155	; 0xc003
   80fb8:	605a      	str	r2, [r3, #4]
	TC1->TC_CHANNEL[1].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   80fba:	4b0e      	ldr	r3, [pc, #56]	; (80ff4 <CPU3_D_INIT_TIMER+0x8c>)
   80fbc:	f24c 0203 	movw	r2, #49155	; 0xc003
   80fc0:	645a      	str	r2, [r3, #68]	; 0x44
	
	TC2->TC_CHANNEL[0].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   80fc2:	4b0d      	ldr	r3, [pc, #52]	; (80ff8 <CPU3_D_INIT_TIMER+0x90>)
   80fc4:	f24c 0203 	movw	r2, #49155	; 0xc003
   80fc8:	605a      	str	r2, [r3, #4]
	
	TC0->TC_CHANNEL[0].TC_IER = TC_IER_CPCS;
   80fca:	4b08      	ldr	r3, [pc, #32]	; (80fec <CPU3_D_INIT_TIMER+0x84>)
   80fcc:	2210      	movs	r2, #16
   80fce:	625a      	str	r2, [r3, #36]	; 0x24
	TC0->TC_CHANNEL[1].TC_IER = TC_IER_CPCS;
   80fd0:	4b06      	ldr	r3, [pc, #24]	; (80fec <CPU3_D_INIT_TIMER+0x84>)
   80fd2:	2210      	movs	r2, #16
   80fd4:	665a      	str	r2, [r3, #100]	; 0x64
	TC1->TC_CHANNEL[0].TC_IER = TC_IER_CPCS;
   80fd6:	4b07      	ldr	r3, [pc, #28]	; (80ff4 <CPU3_D_INIT_TIMER+0x8c>)
   80fd8:	2210      	movs	r2, #16
   80fda:	625a      	str	r2, [r3, #36]	; 0x24
	TC1->TC_CHANNEL[1].TC_IER = TC_IER_CPCS;
   80fdc:	4b05      	ldr	r3, [pc, #20]	; (80ff4 <CPU3_D_INIT_TIMER+0x8c>)
   80fde:	2210      	movs	r2, #16
   80fe0:	665a      	str	r2, [r3, #100]	; 0x64
	TC2->TC_CHANNEL[0].TC_IER = TC_IER_CPCS;
   80fe2:	4b05      	ldr	r3, [pc, #20]	; (80ff8 <CPU3_D_INIT_TIMER+0x90>)
   80fe4:	2210      	movs	r2, #16
   80fe6:	625a      	str	r2, [r3, #36]	; 0x24
}
   80fe8:	bf00      	nop
   80fea:	bd80      	pop	{r7, pc}
   80fec:	40080000 	.word	0x40080000
   80ff0:	54494d00 	.word	0x54494d00
   80ff4:	40084000 	.word	0x40084000
   80ff8:	40088000 	.word	0x40088000
   80ffc:	00082fcd 	.word	0x00082fcd

00081000 <CPU3_D_MAIN_TIMER>:


uint8_t CPU3_D_MAIN_TIMER(Tc *tc, uint32_t channel, IRQn_Type irq, uint32_t fre)
{
   81000:	b580      	push	{r7, lr}
   81002:	b084      	sub	sp, #16
   81004:	af00      	add	r7, sp, #0
   81006:	60f8      	str	r0, [r7, #12]
   81008:	60b9      	str	r1, [r7, #8]
   8100a:	603b      	str	r3, [r7, #0]
   8100c:	4613      	mov	r3, r2
   8100e:	71fb      	strb	r3, [r7, #7]
	pmc_set_writeprotect(0);
   81010:	2000      	movs	r0, #0
   81012:	4b0d      	ldr	r3, [pc, #52]	; (81048 <CPU3_D_MAIN_TIMER+0x48>)
   81014:	4798      	blx	r3
	channel=0;
   81016:	2300      	movs	r3, #0
   81018:	60bb      	str	r3, [r7, #8]
	TC2->TC_CHANNEL[0].TC_CMR = TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   8101a:	4b0c      	ldr	r3, [pc, #48]	; (8104c <CPU3_D_MAIN_TIMER+0x4c>)
   8101c:	f24c 0203 	movw	r2, #49155	; 0xc003
   81020:	605a      	str	r2, [r3, #4]
	tc_write_rc(tc, channel,fre);
   81022:	683a      	ldr	r2, [r7, #0]
   81024:	68b9      	ldr	r1, [r7, #8]
   81026:	68f8      	ldr	r0, [r7, #12]
   81028:	4b09      	ldr	r3, [pc, #36]	; (81050 <CPU3_D_MAIN_TIMER+0x50>)
   8102a:	4798      	blx	r3
	tc_start(tc, channel);
   8102c:	68b9      	ldr	r1, [r7, #8]
   8102e:	68f8      	ldr	r0, [r7, #12]
   81030:	4b08      	ldr	r3, [pc, #32]	; (81054 <CPU3_D_MAIN_TIMER+0x54>)
   81032:	4798      	blx	r3
	tc_enable_interrupt(tc, channel, TC_IER_CPCS);
   81034:	2210      	movs	r2, #16
   81036:	68b9      	ldr	r1, [r7, #8]
   81038:	68f8      	ldr	r0, [r7, #12]
   8103a:	4b07      	ldr	r3, [pc, #28]	; (81058 <CPU3_D_MAIN_TIMER+0x58>)
   8103c:	4798      	blx	r3
}
   8103e:	bf00      	nop
   81040:	4618      	mov	r0, r3
   81042:	3710      	adds	r7, #16
   81044:	46bd      	mov	sp, r7
   81046:	bd80      	pop	{r7, pc}
   81048:	0008304d 	.word	0x0008304d
   8104c:	40088000 	.word	0x40088000
   81050:	00081399 	.word	0x00081399
   81054:	00081359 	.word	0x00081359
   81058:	000813bd 	.word	0x000813bd

0008105c <acid_startTimer1>:

void acid_startTimer1(Tc *tc, uint32_t channel, IRQn_Type irq, uint32_t stepcount)
{
   8105c:	b580      	push	{r7, lr}
   8105e:	b084      	sub	sp, #16
   81060:	af00      	add	r7, sp, #0
   81062:	60f8      	str	r0, [r7, #12]
   81064:	60b9      	str	r1, [r7, #8]
   81066:	603b      	str	r3, [r7, #0]
   81068:	4613      	mov	r3, r2
   8106a:	71fb      	strb	r3, [r7, #7]
	//printf("h\n");
	pmc_set_writeprotect(0);
   8106c:	2000      	movs	r0, #0
   8106e:	4b10      	ldr	r3, [pc, #64]	; (810b0 <acid_startTimer1+0x54>)
   81070:	4798      	blx	r3
	pmc_enable_periph_clk(ID_TC0);
   81072:	201b      	movs	r0, #27
   81074:	4b0f      	ldr	r3, [pc, #60]	; (810b4 <acid_startTimer1+0x58>)
   81076:	4798      	blx	r3
	//printf("%d\n",stepcount);
	tc_init(tc, channel, TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK3);
   81078:	f24c 0202 	movw	r2, #49154	; 0xc002
   8107c:	68b9      	ldr	r1, [r7, #8]
   8107e:	68f8      	ldr	r0, [r7, #12]
   81080:	4b0d      	ldr	r3, [pc, #52]	; (810b8 <acid_startTimer1+0x5c>)
   81082:	4798      	blx	r3
	TC0->TC_CHANNEL[0].TC_CMR = TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK3;
   81084:	4b0d      	ldr	r3, [pc, #52]	; (810bc <acid_startTimer1+0x60>)
   81086:	f24c 0202 	movw	r2, #49154	; 0xc002
   8108a:	605a      	str	r2, [r3, #4]
	tc_write_rc(tc, channel, stepcount);
   8108c:	683a      	ldr	r2, [r7, #0]
   8108e:	68b9      	ldr	r1, [r7, #8]
   81090:	68f8      	ldr	r0, [r7, #12]
   81092:	4b0b      	ldr	r3, [pc, #44]	; (810c0 <acid_startTimer1+0x64>)
   81094:	4798      	blx	r3
	tc_enable_interrupt(TC0,0,TC_IER_CPCS);
   81096:	2210      	movs	r2, #16
   81098:	2100      	movs	r1, #0
   8109a:	4808      	ldr	r0, [pc, #32]	; (810bc <acid_startTimer1+0x60>)
   8109c:	4b09      	ldr	r3, [pc, #36]	; (810c4 <acid_startTimer1+0x68>)
   8109e:	4798      	blx	r3
	tc_start(tc, channel);
   810a0:	68b9      	ldr	r1, [r7, #8]
   810a2:	68f8      	ldr	r0, [r7, #12]
   810a4:	4b08      	ldr	r3, [pc, #32]	; (810c8 <acid_startTimer1+0x6c>)
   810a6:	4798      	blx	r3
}
   810a8:	bf00      	nop
   810aa:	3710      	adds	r7, #16
   810ac:	46bd      	mov	sp, r7
   810ae:	bd80      	pop	{r7, pc}
   810b0:	0008304d 	.word	0x0008304d
   810b4:	00082fcd 	.word	0x00082fcd
   810b8:	00081321 	.word	0x00081321
   810bc:	40080000 	.word	0x40080000
   810c0:	00081399 	.word	0x00081399
   810c4:	000813bd 	.word	0x000813bd
   810c8:	00081359 	.word	0x00081359

000810cc <bicar_startTimer1>:

void bicar_startTimer1(Tc *tc, uint32_t channel, IRQn_Type irq, uint32_t stepcount)
{
   810cc:	b580      	push	{r7, lr}
   810ce:	b084      	sub	sp, #16
   810d0:	af00      	add	r7, sp, #0
   810d2:	60f8      	str	r0, [r7, #12]
   810d4:	60b9      	str	r1, [r7, #8]
   810d6:	603b      	str	r3, [r7, #0]
   810d8:	4613      	mov	r3, r2
   810da:	71fb      	strb	r3, [r7, #7]
	pmc_set_writeprotect(0);
   810dc:	2000      	movs	r0, #0
   810de:	4b10      	ldr	r3, [pc, #64]	; (81120 <bicar_startTimer1+0x54>)
   810e0:	4798      	blx	r3
	pmc_enable_periph_clk(ID_TC1);
   810e2:	201c      	movs	r0, #28
   810e4:	4b0f      	ldr	r3, [pc, #60]	; (81124 <bicar_startTimer1+0x58>)
   810e6:	4798      	blx	r3
	tc_init(tc, channel, TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK3);
   810e8:	f24c 0202 	movw	r2, #49154	; 0xc002
   810ec:	68b9      	ldr	r1, [r7, #8]
   810ee:	68f8      	ldr	r0, [r7, #12]
   810f0:	4b0d      	ldr	r3, [pc, #52]	; (81128 <bicar_startTimer1+0x5c>)
   810f2:	4798      	blx	r3
	TC0->TC_CHANNEL[1].TC_CMR = TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK3;
   810f4:	4b0d      	ldr	r3, [pc, #52]	; (8112c <bicar_startTimer1+0x60>)
   810f6:	f24c 0202 	movw	r2, #49154	; 0xc002
   810fa:	645a      	str	r2, [r3, #68]	; 0x44
	tc_write_rc(tc, channel, stepcount);
   810fc:	683a      	ldr	r2, [r7, #0]
   810fe:	68b9      	ldr	r1, [r7, #8]
   81100:	68f8      	ldr	r0, [r7, #12]
   81102:	4b0b      	ldr	r3, [pc, #44]	; (81130 <bicar_startTimer1+0x64>)
   81104:	4798      	blx	r3
	tc_enable_interrupt(TC0,1,TC_IER_CPCS);
   81106:	2210      	movs	r2, #16
   81108:	2101      	movs	r1, #1
   8110a:	4808      	ldr	r0, [pc, #32]	; (8112c <bicar_startTimer1+0x60>)
   8110c:	4b09      	ldr	r3, [pc, #36]	; (81134 <bicar_startTimer1+0x68>)
   8110e:	4798      	blx	r3
	tc_start(tc, channel);
   81110:	68b9      	ldr	r1, [r7, #8]
   81112:	68f8      	ldr	r0, [r7, #12]
   81114:	4b08      	ldr	r3, [pc, #32]	; (81138 <bicar_startTimer1+0x6c>)
   81116:	4798      	blx	r3
}
   81118:	bf00      	nop
   8111a:	3710      	adds	r7, #16
   8111c:	46bd      	mov	sp, r7
   8111e:	bd80      	pop	{r7, pc}
   81120:	0008304d 	.word	0x0008304d
   81124:	00082fcd 	.word	0x00082fcd
   81128:	00081321 	.word	0x00081321
   8112c:	40080000 	.word	0x40080000
   81130:	00081399 	.word	0x00081399
   81134:	000813bd 	.word	0x000813bd
   81138:	00081359 	.word	0x00081359

0008113c <startTimer1>:
void startTimer1(Tc *tc, uint32_t channel, IRQn_Type irq, uint32_t stepcount)
{
   8113c:	b580      	push	{r7, lr}
   8113e:	b084      	sub	sp, #16
   81140:	af00      	add	r7, sp, #0
   81142:	60f8      	str	r0, [r7, #12]
   81144:	60b9      	str	r1, [r7, #8]
   81146:	603b      	str	r3, [r7, #0]
   81148:	4613      	mov	r3, r2
   8114a:	71fb      	strb	r3, [r7, #7]
	//printf("h\n");
	pmc_set_writeprotect(0);
   8114c:	2000      	movs	r0, #0
   8114e:	4b11      	ldr	r3, [pc, #68]	; (81194 <startTimer1+0x58>)
   81150:	4798      	blx	r3
	pmc_enable_periph_clk(ID_TC2);
   81152:	201d      	movs	r0, #29
   81154:	4b10      	ldr	r3, [pc, #64]	; (81198 <startTimer1+0x5c>)
   81156:	4798      	blx	r3
	tc_init(tc, channel, TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4);
   81158:	f24c 0203 	movw	r2, #49155	; 0xc003
   8115c:	68b9      	ldr	r1, [r7, #8]
   8115e:	68f8      	ldr	r0, [r7, #12]
   81160:	4b0e      	ldr	r3, [pc, #56]	; (8119c <startTimer1+0x60>)
   81162:	4798      	blx	r3
	TC0->TC_CHANNEL[2].TC_CMR = TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   81164:	4b0e      	ldr	r3, [pc, #56]	; (811a0 <startTimer1+0x64>)
   81166:	f24c 0203 	movw	r2, #49155	; 0xc003
   8116a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	tc_write_rc(tc, channel, stepcount);
   8116e:	683a      	ldr	r2, [r7, #0]
   81170:	68b9      	ldr	r1, [r7, #8]
   81172:	68f8      	ldr	r0, [r7, #12]
   81174:	4b0b      	ldr	r3, [pc, #44]	; (811a4 <startTimer1+0x68>)
   81176:	4798      	blx	r3
	tc_enable_interrupt(TC0,2,TC_IER_CPCS);
   81178:	2210      	movs	r2, #16
   8117a:	2102      	movs	r1, #2
   8117c:	4808      	ldr	r0, [pc, #32]	; (811a0 <startTimer1+0x64>)
   8117e:	4b0a      	ldr	r3, [pc, #40]	; (811a8 <startTimer1+0x6c>)
   81180:	4798      	blx	r3
	tc_start(tc, channel);
   81182:	68b9      	ldr	r1, [r7, #8]
   81184:	68f8      	ldr	r0, [r7, #12]
   81186:	4b09      	ldr	r3, [pc, #36]	; (811ac <startTimer1+0x70>)
   81188:	4798      	blx	r3
}
   8118a:	bf00      	nop
   8118c:	3710      	adds	r7, #16
   8118e:	46bd      	mov	sp, r7
   81190:	bd80      	pop	{r7, pc}
   81192:	bf00      	nop
   81194:	0008304d 	.word	0x0008304d
   81198:	00082fcd 	.word	0x00082fcd
   8119c:	00081321 	.word	0x00081321
   811a0:	40080000 	.word	0x40080000
   811a4:	00081399 	.word	0x00081399
   811a8:	000813bd 	.word	0x000813bd
   811ac:	00081359 	.word	0x00081359

000811b0 <cpu3_sv_cntrl_activatepump>:

#include "S_CNTRL.h"


uint8_t cpu3_sv_cntrl_activatepump(sv_pumptype sv_pump_id)
{
   811b0:	b580      	push	{r7, lr}
   811b2:	b082      	sub	sp, #8
   811b4:	af00      	add	r7, sp, #0
   811b6:	4603      	mov	r3, r0
   811b8:	71fb      	strb	r3, [r7, #7]
	CPU3_D_SET_PUMP(sv_pump_id);
   811ba:	79fb      	ldrb	r3, [r7, #7]
   811bc:	4618      	mov	r0, r3
   811be:	4b03      	ldr	r3, [pc, #12]	; (811cc <cpu3_sv_cntrl_activatepump+0x1c>)
   811c0:	4798      	blx	r3
	
	return 0;
   811c2:	2300      	movs	r3, #0
}
   811c4:	4618      	mov	r0, r3
   811c6:	3708      	adds	r7, #8
   811c8:	46bd      	mov	sp, r7
   811ca:	bd80      	pop	{r7, pc}
   811cc:	00080751 	.word	0x00080751

000811d0 <CPU3_S_SYSTEM_INIT>:
 */ 
#include "S_SYS.h"
#include "Platform/Service/TIMER/S_TIMER.h"

void CPU3_S_SYSTEM_INIT()
{
   811d0:	b580      	push	{r7, lr}
   811d2:	af00      	add	r7, sp, #0
	CPU3_D_INIT_CLOCK();
   811d4:	4b09      	ldr	r3, [pc, #36]	; (811fc <CPU3_S_SYSTEM_INIT+0x2c>)
   811d6:	4798      	blx	r3
//	CPU3_D_INIT_ADC();
	CPU3_D_INIT_INT();
   811d8:	4b09      	ldr	r3, [pc, #36]	; (81200 <CPU3_S_SYSTEM_INIT+0x30>)
   811da:	4798      	blx	r3
	CPU3_D_INIT_PIO();
   811dc:	4b09      	ldr	r3, [pc, #36]	; (81204 <CPU3_S_SYSTEM_INIT+0x34>)
   811de:	4798      	blx	r3
	CPU3_D_INIT_PWM();
   811e0:	4b09      	ldr	r3, [pc, #36]	; (81208 <CPU3_S_SYSTEM_INIT+0x38>)
   811e2:	4798      	blx	r3
	CPU3_D_INIT_TIMER();
   811e4:	4b09      	ldr	r3, [pc, #36]	; (8120c <CPU3_S_SYSTEM_INIT+0x3c>)
   811e6:	4798      	blx	r3
	DD_INIT_CAN();
   811e8:	4b09      	ldr	r3, [pc, #36]	; (81210 <CPU3_S_SYSTEM_INIT+0x40>)
   811ea:	4798      	blx	r3
	//CPU3_D_INIT_IIC();
	
	
	CPU3_S_START_TIMER(0,1000);			//1ms means 1000Hz interrupt frequency
   811ec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   811f0:	2000      	movs	r0, #0
   811f2:	4b08      	ldr	r3, [pc, #32]	; (81214 <CPU3_S_SYSTEM_INIT+0x44>)
   811f4:	4798      	blx	r3
}
   811f6:	bf00      	nop
   811f8:	bd80      	pop	{r7, pc}
   811fa:	bf00      	nop
   811fc:	00080151 	.word	0x00080151
   81200:	00080e21 	.word	0x00080e21
   81204:	000808f9 	.word	0x000808f9
   81208:	00080f05 	.word	0x00080f05
   8120c:	00080f69 	.word	0x00080f69
   81210:	000805f9 	.word	0x000805f9
   81214:	00081219 	.word	0x00081219

00081218 <CPU3_S_START_TIMER>:
 */ 
#include "S_TIMER.h"


uint8_t CPU3_S_START_TIMER(uint8_t timer_no, uint32_t timer_res)
{
   81218:	b580      	push	{r7, lr}
   8121a:	b082      	sub	sp, #8
   8121c:	af00      	add	r7, sp, #0
   8121e:	4603      	mov	r3, r0
   81220:	6039      	str	r1, [r7, #0]
   81222:	71fb      	strb	r3, [r7, #7]
	// 	timer_no = 2;
	// 	timer_res = 100;
	// 	printf("inside sv start");
	CPU3_D_CONFIG_TIMER(timer_no, timer_res);
   81224:	683b      	ldr	r3, [r7, #0]
   81226:	b2da      	uxtb	r2, r3
   81228:	79fb      	ldrb	r3, [r7, #7]
   8122a:	4611      	mov	r1, r2
   8122c:	4618      	mov	r0, r3
   8122e:	4b03      	ldr	r3, [pc, #12]	; (8123c <CPU3_S_START_TIMER+0x24>)
   81230:	4798      	blx	r3
	
	return 0;
   81232:	2300      	movs	r3, #0
}
   81234:	4618      	mov	r0, r3
   81236:	3708      	adds	r7, #8
   81238:	46bd      	mov	sp, r7
   8123a:	bd80      	pop	{r7, pc}
   8123c:	000807c5 	.word	0x000807c5

00081240 <CPU3_S_STOP_TIMER>:

uint8_t CPU3_S_STOP_TIMER(uint8_t timer_no)
{
   81240:	b580      	push	{r7, lr}
   81242:	b082      	sub	sp, #8
   81244:	af00      	add	r7, sp, #0
   81246:	4603      	mov	r3, r0
   81248:	71fb      	strb	r3, [r7, #7]
	
	CPU3_D_STOP_TIMER(timer_no);
   8124a:	79fb      	ldrb	r3, [r7, #7]
   8124c:	4618      	mov	r0, r3
   8124e:	4b03      	ldr	r3, [pc, #12]	; (8125c <CPU3_S_STOP_TIMER+0x1c>)
   81250:	4798      	blx	r3
	
	return 0;
   81252:	2300      	movs	r3, #0
   81254:	4618      	mov	r0, r3
   81256:	3708      	adds	r7, #8
   81258:	46bd      	mov	sp, r7
   8125a:	bd80      	pop	{r7, pc}
   8125c:	0008087d 	.word	0x0008087d

00081260 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   81260:	b580      	push	{r7, lr}
   81262:	b086      	sub	sp, #24
   81264:	af00      	add	r7, sp, #0
   81266:	60f8      	str	r0, [r7, #12]
   81268:	60b9      	str	r1, [r7, #8]
   8126a:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   8126c:	2300      	movs	r3, #0
   8126e:	617b      	str	r3, [r7, #20]

	if (file != 0) {
   81270:	68fb      	ldr	r3, [r7, #12]
   81272:	2b00      	cmp	r3, #0
   81274:	d012      	beq.n	8129c <_read+0x3c>
		return -1;
   81276:	f04f 33ff 	mov.w	r3, #4294967295
   8127a:	e013      	b.n	812a4 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   8127c:	4b0b      	ldr	r3, [pc, #44]	; (812ac <_read+0x4c>)
   8127e:	681b      	ldr	r3, [r3, #0]
   81280:	4a0b      	ldr	r2, [pc, #44]	; (812b0 <_read+0x50>)
   81282:	6812      	ldr	r2, [r2, #0]
   81284:	68b9      	ldr	r1, [r7, #8]
   81286:	4610      	mov	r0, r2
   81288:	4798      	blx	r3
		ptr++;
   8128a:	68bb      	ldr	r3, [r7, #8]
   8128c:	3301      	adds	r3, #1
   8128e:	60bb      	str	r3, [r7, #8]
		nChars++;
   81290:	697b      	ldr	r3, [r7, #20]
   81292:	3301      	adds	r3, #1
   81294:	617b      	str	r3, [r7, #20]

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   81296:	687b      	ldr	r3, [r7, #4]
   81298:	3b01      	subs	r3, #1
   8129a:	607b      	str	r3, [r7, #4]
   8129c:	687b      	ldr	r3, [r7, #4]
   8129e:	2b00      	cmp	r3, #0
   812a0:	dcec      	bgt.n	8127c <_read+0x1c>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
   812a2:	697b      	ldr	r3, [r7, #20]
}
   812a4:	4618      	mov	r0, r3
   812a6:	3718      	adds	r7, #24
   812a8:	46bd      	mov	sp, r7
   812aa:	bd80      	pop	{r7, pc}
   812ac:	200711f0 	.word	0x200711f0
   812b0:	200711f8 	.word	0x200711f8

000812b4 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   812b4:	b580      	push	{r7, lr}
   812b6:	b086      	sub	sp, #24
   812b8:	af00      	add	r7, sp, #0
   812ba:	60f8      	str	r0, [r7, #12]
   812bc:	60b9      	str	r1, [r7, #8]
   812be:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   812c0:	2300      	movs	r3, #0
   812c2:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
   812c4:	68fb      	ldr	r3, [r7, #12]
   812c6:	2b01      	cmp	r3, #1
   812c8:	d01e      	beq.n	81308 <_write+0x54>
   812ca:	68fb      	ldr	r3, [r7, #12]
   812cc:	2b02      	cmp	r3, #2
   812ce:	d01b      	beq.n	81308 <_write+0x54>
   812d0:	68fb      	ldr	r3, [r7, #12]
   812d2:	2b03      	cmp	r3, #3
   812d4:	d018      	beq.n	81308 <_write+0x54>
		return -1;
   812d6:	f04f 33ff 	mov.w	r3, #4294967295
   812da:	e019      	b.n	81310 <_write+0x5c>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
   812dc:	4b0e      	ldr	r3, [pc, #56]	; (81318 <_write+0x64>)
   812de:	681a      	ldr	r2, [r3, #0]
   812e0:	4b0e      	ldr	r3, [pc, #56]	; (8131c <_write+0x68>)
   812e2:	6818      	ldr	r0, [r3, #0]
   812e4:	68bb      	ldr	r3, [r7, #8]
   812e6:	1c59      	adds	r1, r3, #1
   812e8:	60b9      	str	r1, [r7, #8]
   812ea:	781b      	ldrb	r3, [r3, #0]
   812ec:	4619      	mov	r1, r3
   812ee:	4790      	blx	r2
   812f0:	4603      	mov	r3, r0
   812f2:	2b00      	cmp	r3, #0
   812f4:	da02      	bge.n	812fc <_write+0x48>
			return -1;
   812f6:	f04f 33ff 	mov.w	r3, #4294967295
   812fa:	e009      	b.n	81310 <_write+0x5c>
		}
		++nChars;
   812fc:	697b      	ldr	r3, [r7, #20]
   812fe:	3301      	adds	r3, #1
   81300:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   81302:	687b      	ldr	r3, [r7, #4]
   81304:	3b01      	subs	r3, #1
   81306:	607b      	str	r3, [r7, #4]
   81308:	687b      	ldr	r3, [r7, #4]
   8130a:	2b00      	cmp	r3, #0
   8130c:	d1e6      	bne.n	812dc <_write+0x28>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
   8130e:	697b      	ldr	r3, [r7, #20]
}
   81310:	4618      	mov	r0, r3
   81312:	3718      	adds	r7, #24
   81314:	46bd      	mov	sp, r7
   81316:	bd80      	pop	{r7, pc}
   81318:	200711f4 	.word	0x200711f4
   8131c:	200711f8 	.word	0x200711f8

00081320 <tc_init>:
 * This is because the setting forces TIOB to be an input even if the
 * external event trigger has not been enabled with \c TC_CMR_ENETRG, and
 * thus prevents normal operation of TIOB.
 */
void tc_init(Tc *p_tc, uint32_t ul_channel, uint32_t ul_mode)
{
   81320:	b480      	push	{r7}
   81322:	b087      	sub	sp, #28
   81324:	af00      	add	r7, sp, #0
   81326:	60f8      	str	r0, [r7, #12]
   81328:	60b9      	str	r1, [r7, #8]
   8132a:	607a      	str	r2, [r7, #4]
	TcChannel *tc_channel;

	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   8132c:	68fa      	ldr	r2, [r7, #12]
   8132e:	68bb      	ldr	r3, [r7, #8]
   81330:	019b      	lsls	r3, r3, #6
   81332:	4413      	add	r3, r2
   81334:	617b      	str	r3, [r7, #20]

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   81336:	697b      	ldr	r3, [r7, #20]
   81338:	2202      	movs	r2, #2
   8133a:	601a      	str	r2, [r3, #0]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   8133c:	697b      	ldr	r3, [r7, #20]
   8133e:	f04f 32ff 	mov.w	r2, #4294967295
   81342:	629a      	str	r2, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   81344:	697b      	ldr	r3, [r7, #20]
   81346:	6a1b      	ldr	r3, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   81348:	697b      	ldr	r3, [r7, #20]
   8134a:	687a      	ldr	r2, [r7, #4]
   8134c:	605a      	str	r2, [r3, #4]
}
   8134e:	bf00      	nop
   81350:	371c      	adds	r7, #28
   81352:	46bd      	mov	sp, r7
   81354:	bc80      	pop	{r7}
   81356:	4770      	bx	lr

00081358 <tc_start>:
 *
 * \param p_tc Pointer to a TC instance.
 * \param ul_channel Channel to configure.
 */
void tc_start(Tc *p_tc, uint32_t ul_channel)
{
   81358:	b480      	push	{r7}
   8135a:	b083      	sub	sp, #12
   8135c:	af00      	add	r7, sp, #0
   8135e:	6078      	str	r0, [r7, #4]
   81360:	6039      	str	r1, [r7, #0]
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   81362:	687a      	ldr	r2, [r7, #4]
   81364:	683b      	ldr	r3, [r7, #0]
   81366:	019b      	lsls	r3, r3, #6
   81368:	4413      	add	r3, r2
   8136a:	2205      	movs	r2, #5
   8136c:	601a      	str	r2, [r3, #0]
}
   8136e:	bf00      	nop
   81370:	370c      	adds	r7, #12
   81372:	46bd      	mov	sp, r7
   81374:	bc80      	pop	{r7}
   81376:	4770      	bx	lr

00081378 <tc_stop>:
 *
 * \param p_tc Pointer to a TC instance.
 * \param ul_channel Channel to configure.
 */
void tc_stop(Tc *p_tc, uint32_t ul_channel)
{
   81378:	b480      	push	{r7}
   8137a:	b083      	sub	sp, #12
   8137c:	af00      	add	r7, sp, #0
   8137e:	6078      	str	r0, [r7, #4]
   81380:	6039      	str	r1, [r7, #0]
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
   81382:	687a      	ldr	r2, [r7, #4]
   81384:	683b      	ldr	r3, [r7, #0]
   81386:	019b      	lsls	r3, r3, #6
   81388:	4413      	add	r3, r2
   8138a:	2202      	movs	r2, #2
   8138c:	601a      	str	r2, [r3, #0]
}
   8138e:	bf00      	nop
   81390:	370c      	adds	r7, #12
   81392:	46bd      	mov	sp, r7
   81394:	bc80      	pop	{r7}
   81396:	4770      	bx	lr

00081398 <tc_write_rc>:
 * \param ul_channel Channel to configure.
 * \param ul_value Value to set in register.
 */
void tc_write_rc(Tc *p_tc, uint32_t ul_channel,
		uint32_t ul_value)
{
   81398:	b480      	push	{r7}
   8139a:	b085      	sub	sp, #20
   8139c:	af00      	add	r7, sp, #0
   8139e:	60f8      	str	r0, [r7, #12]
   813a0:	60b9      	str	r1, [r7, #8]
   813a2:	607a      	str	r2, [r7, #4]
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
   813a4:	68fa      	ldr	r2, [r7, #12]
   813a6:	68bb      	ldr	r3, [r7, #8]
   813a8:	019b      	lsls	r3, r3, #6
   813aa:	4413      	add	r3, r2
   813ac:	331c      	adds	r3, #28
   813ae:	687a      	ldr	r2, [r7, #4]
   813b0:	601a      	str	r2, [r3, #0]
}
   813b2:	bf00      	nop
   813b4:	3714      	adds	r7, #20
   813b6:	46bd      	mov	sp, r7
   813b8:	bc80      	pop	{r7}
   813ba:	4770      	bx	lr

000813bc <tc_enable_interrupt>:
 * \param ul_channel Channel to configure.
 * \param ul_sources Interrupt sources bit map.
 */
void tc_enable_interrupt(Tc *p_tc, uint32_t ul_channel,
		uint32_t ul_sources)
{
   813bc:	b480      	push	{r7}
   813be:	b087      	sub	sp, #28
   813c0:	af00      	add	r7, sp, #0
   813c2:	60f8      	str	r0, [r7, #12]
   813c4:	60b9      	str	r1, [r7, #8]
   813c6:	607a      	str	r2, [r7, #4]
	TcChannel *tc_channel;

	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   813c8:	68fa      	ldr	r2, [r7, #12]
   813ca:	68bb      	ldr	r3, [r7, #8]
   813cc:	019b      	lsls	r3, r3, #6
   813ce:	4413      	add	r3, r2
   813d0:	617b      	str	r3, [r7, #20]
	tc_channel->TC_IER = ul_sources;
   813d2:	697b      	ldr	r3, [r7, #20]
   813d4:	687a      	ldr	r2, [r7, #4]
   813d6:	625a      	str	r2, [r3, #36]	; 0x24
}
   813d8:	bf00      	nop
   813da:	371c      	adds	r7, #28
   813dc:	46bd      	mov	sp, r7
   813de:	bc80      	pop	{r7}
   813e0:	4770      	bx	lr
   813e2:	bf00      	nop

000813e4 <tc_get_status>:
 * \param ul_channel Channel to configure.
 *
 * \return The current TC status.
 */
uint32_t tc_get_status(Tc *p_tc, uint32_t ul_channel)
{
   813e4:	b480      	push	{r7}
   813e6:	b085      	sub	sp, #20
   813e8:	af00      	add	r7, sp, #0
   813ea:	6078      	str	r0, [r7, #4]
   813ec:	6039      	str	r1, [r7, #0]
	TcChannel *tc_channel;

	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   813ee:	687a      	ldr	r2, [r7, #4]
   813f0:	683b      	ldr	r3, [r7, #0]
   813f2:	019b      	lsls	r3, r3, #6
   813f4:	4413      	add	r3, r2
   813f6:	60fb      	str	r3, [r7, #12]
	return tc_channel->TC_SR;
   813f8:	68fb      	ldr	r3, [r7, #12]
   813fa:	6a1b      	ldr	r3, [r3, #32]
}
   813fc:	4618      	mov	r0, r3
   813fe:	3714      	adds	r7, #20
   81400:	46bd      	mov	sp, r7
   81402:	bc80      	pop	{r7}
   81404:	4770      	bx	lr
   81406:	bf00      	nop

00081408 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   81408:	b480      	push	{r7}
   8140a:	b085      	sub	sp, #20
   8140c:	af00      	add	r7, sp, #0
   8140e:	6078      	str	r0, [r7, #4]
   81410:	6039      	str	r1, [r7, #0]
	uint32_t cd = 0;
   81412:	2300      	movs	r3, #0
   81414:	60fb      	str	r3, [r7, #12]

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   81416:	687b      	ldr	r3, [r7, #4]
   81418:	22ac      	movs	r2, #172	; 0xac
   8141a:	601a      	str	r2, [r3, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   8141c:	683b      	ldr	r3, [r7, #0]
   8141e:	681a      	ldr	r2, [r3, #0]
   81420:	683b      	ldr	r3, [r7, #0]
   81422:	685b      	ldr	r3, [r3, #4]
   81424:	fbb2 f3f3 	udiv	r3, r2, r3
   81428:	091b      	lsrs	r3, r3, #4
   8142a:	60fb      	str	r3, [r7, #12]
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   8142c:	68fb      	ldr	r3, [r7, #12]
   8142e:	2b00      	cmp	r3, #0
   81430:	d003      	beq.n	8143a <uart_init+0x32>
   81432:	68fb      	ldr	r3, [r7, #12]
   81434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   81438:	d301      	bcc.n	8143e <uart_init+0x36>
		return 1;
   8143a:	2301      	movs	r3, #1
   8143c:	e00f      	b.n	8145e <uart_init+0x56>

	p_uart->UART_BRGR = cd;
   8143e:	687b      	ldr	r3, [r7, #4]
   81440:	68fa      	ldr	r2, [r7, #12]
   81442:	621a      	str	r2, [r3, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   81444:	683b      	ldr	r3, [r7, #0]
   81446:	689a      	ldr	r2, [r3, #8]
   81448:	687b      	ldr	r3, [r7, #4]
   8144a:	605a      	str	r2, [r3, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   8144c:	687b      	ldr	r3, [r7, #4]
   8144e:	f240 2202 	movw	r2, #514	; 0x202
   81452:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   81456:	687b      	ldr	r3, [r7, #4]
   81458:	2250      	movs	r2, #80	; 0x50
   8145a:	601a      	str	r2, [r3, #0]

	return 0;
   8145c:	2300      	movs	r3, #0
}
   8145e:	4618      	mov	r0, r3
   81460:	3714      	adds	r7, #20
   81462:	46bd      	mov	sp, r7
   81464:	bc80      	pop	{r7}
   81466:	4770      	bx	lr

00081468 <uart_enable_tx>:
 * \brief Enable UART transmitter.
 *
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable_tx(Uart *p_uart)
{
   81468:	b480      	push	{r7}
   8146a:	b083      	sub	sp, #12
   8146c:	af00      	add	r7, sp, #0
   8146e:	6078      	str	r0, [r7, #4]
	/* Enable transmitter */
	p_uart->UART_CR = UART_CR_TXEN;
   81470:	687b      	ldr	r3, [r7, #4]
   81472:	2240      	movs	r2, #64	; 0x40
   81474:	601a      	str	r2, [r3, #0]
}
   81476:	bf00      	nop
   81478:	370c      	adds	r7, #12
   8147a:	46bd      	mov	sp, r7
   8147c:	bc80      	pop	{r7}
   8147e:	4770      	bx	lr

00081480 <uart_enable_rx>:
 * \brief Enable UART receiver.
 *
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable_rx(Uart *p_uart)
{
   81480:	b480      	push	{r7}
   81482:	b083      	sub	sp, #12
   81484:	af00      	add	r7, sp, #0
   81486:	6078      	str	r0, [r7, #4]
	/* Enable receiver */
	p_uart->UART_CR = UART_CR_RXEN;
   81488:	687b      	ldr	r3, [r7, #4]
   8148a:	2210      	movs	r2, #16
   8148c:	601a      	str	r2, [r3, #0]
}
   8148e:	bf00      	nop
   81490:	370c      	adds	r7, #12
   81492:	46bd      	mov	sp, r7
   81494:	bc80      	pop	{r7}
   81496:	4770      	bx	lr

00081498 <uart_enable>:
 * \brief Enable UART receiver and transmitter.
 *
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable(Uart *p_uart)
{
   81498:	b480      	push	{r7}
   8149a:	b083      	sub	sp, #12
   8149c:	af00      	add	r7, sp, #0
   8149e:	6078      	str	r0, [r7, #4]
	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   814a0:	687b      	ldr	r3, [r7, #4]
   814a2:	2250      	movs	r2, #80	; 0x50
   814a4:	601a      	str	r2, [r3, #0]
}
   814a6:	bf00      	nop
   814a8:	370c      	adds	r7, #12
   814aa:	46bd      	mov	sp, r7
   814ac:	bc80      	pop	{r7}
   814ae:	4770      	bx	lr

000814b0 <uart_enable_interrupt>:
 *
 * \param p_uart Pointer to a UART instance.
 *  \param ul_sources Interrupts to be enabled.
 */
void uart_enable_interrupt(Uart *p_uart, uint32_t ul_sources)
{
   814b0:	b480      	push	{r7}
   814b2:	b083      	sub	sp, #12
   814b4:	af00      	add	r7, sp, #0
   814b6:	6078      	str	r0, [r7, #4]
   814b8:	6039      	str	r1, [r7, #0]
	p_uart->UART_IER = ul_sources;
   814ba:	687b      	ldr	r3, [r7, #4]
   814bc:	683a      	ldr	r2, [r7, #0]
   814be:	609a      	str	r2, [r3, #8]
}
   814c0:	bf00      	nop
   814c2:	370c      	adds	r7, #12
   814c4:	46bd      	mov	sp, r7
   814c6:	bc80      	pop	{r7}
   814c8:	4770      	bx	lr
   814ca:	bf00      	nop

000814cc <uart_write>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
   814cc:	b480      	push	{r7}
   814ce:	b083      	sub	sp, #12
   814d0:	af00      	add	r7, sp, #0
   814d2:	6078      	str	r0, [r7, #4]
   814d4:	460b      	mov	r3, r1
   814d6:	70fb      	strb	r3, [r7, #3]
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   814d8:	687b      	ldr	r3, [r7, #4]
   814da:	695b      	ldr	r3, [r3, #20]
   814dc:	f003 0302 	and.w	r3, r3, #2
   814e0:	2b00      	cmp	r3, #0
   814e2:	d101      	bne.n	814e8 <uart_write+0x1c>
		return 1;
   814e4:	2301      	movs	r3, #1
   814e6:	e003      	b.n	814f0 <uart_write+0x24>

	/* Send character */
	p_uart->UART_THR = uc_data;
   814e8:	78fa      	ldrb	r2, [r7, #3]
   814ea:	687b      	ldr	r3, [r7, #4]
   814ec:	61da      	str	r2, [r3, #28]
	return 0;
   814ee:	2300      	movs	r3, #0
}
   814f0:	4618      	mov	r0, r3
   814f2:	370c      	adds	r7, #12
   814f4:	46bd      	mov	sp, r7
   814f6:	bc80      	pop	{r7}
   814f8:	4770      	bx	lr
   814fa:	bf00      	nop

000814fc <uart_read>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
   814fc:	b480      	push	{r7}
   814fe:	b083      	sub	sp, #12
   81500:	af00      	add	r7, sp, #0
   81502:	6078      	str	r0, [r7, #4]
   81504:	6039      	str	r1, [r7, #0]
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   81506:	687b      	ldr	r3, [r7, #4]
   81508:	695b      	ldr	r3, [r3, #20]
   8150a:	f003 0301 	and.w	r3, r3, #1
   8150e:	2b00      	cmp	r3, #0
   81510:	d101      	bne.n	81516 <uart_read+0x1a>
		return 1;
   81512:	2301      	movs	r3, #1
   81514:	e005      	b.n	81522 <uart_read+0x26>

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   81516:	687b      	ldr	r3, [r7, #4]
   81518:	699b      	ldr	r3, [r3, #24]
   8151a:	b2da      	uxtb	r2, r3
   8151c:	683b      	ldr	r3, [r7, #0]
   8151e:	701a      	strb	r2, [r3, #0]
	return 0;
   81520:	2300      	movs	r3, #0
}
   81522:	4618      	mov	r0, r3
   81524:	370c      	adds	r7, #12
   81526:	46bd      	mov	sp, r7
   81528:	bc80      	pop	{r7}
   8152a:	4770      	bx	lr

0008152c <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
static uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   8152c:	b480      	push	{r7}
   8152e:	b089      	sub	sp, #36	; 0x24
   81530:	af00      	add	r7, sp, #0
   81532:	60f8      	str	r0, [r7, #12]
   81534:	60b9      	str	r1, [r7, #8]
   81536:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
   81538:	68bb      	ldr	r3, [r7, #8]
   8153a:	011a      	lsls	r2, r3, #4
   8153c:	687b      	ldr	r3, [r7, #4]
   8153e:	429a      	cmp	r2, r3
   81540:	d802      	bhi.n	81548 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
   81542:	2310      	movs	r3, #16
   81544:	61fb      	str	r3, [r7, #28]
   81546:	e001      	b.n	8154c <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
   81548:	2308      	movs	r3, #8
   8154a:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   8154c:	687b      	ldr	r3, [r7, #4]
   8154e:	00da      	lsls	r2, r3, #3
   81550:	69fb      	ldr	r3, [r7, #28]
   81552:	68b9      	ldr	r1, [r7, #8]
   81554:	fb01 f303 	mul.w	r3, r1, r3
   81558:	085b      	lsrs	r3, r3, #1
   8155a:	441a      	add	r2, r3
   8155c:	69fb      	ldr	r3, [r7, #28]
   8155e:	68b9      	ldr	r1, [r7, #8]
   81560:	fb01 f303 	mul.w	r3, r1, r3
   81564:	fbb2 f3f3 	udiv	r3, r2, r3
   81568:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
   8156a:	69bb      	ldr	r3, [r7, #24]
   8156c:	08db      	lsrs	r3, r3, #3
   8156e:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
   81570:	69bb      	ldr	r3, [r7, #24]
   81572:	f003 0307 	and.w	r3, r3, #7
   81576:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   81578:	697b      	ldr	r3, [r7, #20]
   8157a:	2b00      	cmp	r3, #0
   8157c:	d003      	beq.n	81586 <usart_set_async_baudrate+0x5a>
   8157e:	697b      	ldr	r3, [r7, #20]
   81580:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   81584:	d301      	bcc.n	8158a <usart_set_async_baudrate+0x5e>
		return 1;
   81586:	2301      	movs	r3, #1
   81588:	e00f      	b.n	815aa <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
   8158a:	69fb      	ldr	r3, [r7, #28]
   8158c:	2b08      	cmp	r3, #8
   8158e:	d105      	bne.n	8159c <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
   81590:	68fb      	ldr	r3, [r7, #12]
   81592:	685b      	ldr	r3, [r3, #4]
   81594:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
   81598:	68fb      	ldr	r3, [r7, #12]
   8159a:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
   8159c:	693b      	ldr	r3, [r7, #16]
   8159e:	041a      	lsls	r2, r3, #16
   815a0:	697b      	ldr	r3, [r7, #20]
   815a2:	431a      	orrs	r2, r3
   815a4:	68fb      	ldr	r3, [r7, #12]
   815a6:	621a      	str	r2, [r3, #32]

	return 0;
   815a8:	2300      	movs	r3, #0
}
   815aa:	4618      	mov	r0, r3
   815ac:	3724      	adds	r7, #36	; 0x24
   815ae:	46bd      	mov	sp, r7
   815b0:	bc80      	pop	{r7}
   815b2:	4770      	bx	lr

000815b4 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
   815b4:	b580      	push	{r7, lr}
   815b6:	b082      	sub	sp, #8
   815b8:	af00      	add	r7, sp, #0
   815ba:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
   815bc:	6878      	ldr	r0, [r7, #4]
   815be:	4b0d      	ldr	r3, [pc, #52]	; (815f4 <usart_reset+0x40>)
   815c0:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
   815c2:	687b      	ldr	r3, [r7, #4]
   815c4:	2200      	movs	r2, #0
   815c6:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
   815c8:	687b      	ldr	r3, [r7, #4]
   815ca:	2200      	movs	r2, #0
   815cc:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
   815ce:	687b      	ldr	r3, [r7, #4]
   815d0:	2200      	movs	r2, #0
   815d2:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
   815d4:	6878      	ldr	r0, [r7, #4]
   815d6:	4b08      	ldr	r3, [pc, #32]	; (815f8 <usart_reset+0x44>)
   815d8:	4798      	blx	r3
	usart_reset_rx(p_usart);
   815da:	6878      	ldr	r0, [r7, #4]
   815dc:	4b07      	ldr	r3, [pc, #28]	; (815fc <usart_reset+0x48>)
   815de:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
   815e0:	6878      	ldr	r0, [r7, #4]
   815e2:	4b07      	ldr	r3, [pc, #28]	; (81600 <usart_reset+0x4c>)
   815e4:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
   815e6:	6878      	ldr	r0, [r7, #4]
   815e8:	4b06      	ldr	r3, [pc, #24]	; (81604 <usart_reset+0x50>)
   815ea:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
#endif
}
   815ec:	bf00      	nop
   815ee:	3708      	adds	r7, #8
   815f0:	46bd      	mov	sp, r7
   815f2:	bd80      	pop	{r7, pc}
   815f4:	00081789 	.word	0x00081789
   815f8:	000816a5 	.word	0x000816a5
   815fc:	000816d5 	.word	0x000816d5
   81600:	000816ed 	.word	0x000816ed
   81604:	00081709 	.word	0x00081709

00081608 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
   81608:	b580      	push	{r7, lr}
   8160a:	b084      	sub	sp, #16
   8160c:	af00      	add	r7, sp, #0
   8160e:	60f8      	str	r0, [r7, #12]
   81610:	60b9      	str	r1, [r7, #8]
   81612:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
   81614:	68f8      	ldr	r0, [r7, #12]
   81616:	4b1a      	ldr	r3, [pc, #104]	; (81680 <usart_init_rs232+0x78>)
   81618:	4798      	blx	r3

	ul_reg_val = 0;
   8161a:	4b1a      	ldr	r3, [pc, #104]	; (81684 <usart_init_rs232+0x7c>)
   8161c:	2200      	movs	r2, #0
   8161e:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
   81620:	68bb      	ldr	r3, [r7, #8]
   81622:	2b00      	cmp	r3, #0
   81624:	d009      	beq.n	8163a <usart_init_rs232+0x32>
   81626:	68bb      	ldr	r3, [r7, #8]
   81628:	681b      	ldr	r3, [r3, #0]
   8162a:	687a      	ldr	r2, [r7, #4]
   8162c:	4619      	mov	r1, r3
   8162e:	68f8      	ldr	r0, [r7, #12]
   81630:	4b15      	ldr	r3, [pc, #84]	; (81688 <usart_init_rs232+0x80>)
   81632:	4798      	blx	r3
   81634:	4603      	mov	r3, r0
   81636:	2b00      	cmp	r3, #0
   81638:	d001      	beq.n	8163e <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
   8163a:	2301      	movs	r3, #1
   8163c:	e01b      	b.n	81676 <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   8163e:	68bb      	ldr	r3, [r7, #8]
   81640:	685a      	ldr	r2, [r3, #4]
   81642:	68bb      	ldr	r3, [r7, #8]
   81644:	689b      	ldr	r3, [r3, #8]
   81646:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   81648:	68bb      	ldr	r3, [r7, #8]
   8164a:	691b      	ldr	r3, [r3, #16]
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   8164c:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   8164e:	68bb      	ldr	r3, [r7, #8]
   81650:	68db      	ldr	r3, [r3, #12]
   81652:	431a      	orrs	r2, r3
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   81654:	4b0b      	ldr	r3, [pc, #44]	; (81684 <usart_init_rs232+0x7c>)
   81656:	681b      	ldr	r3, [r3, #0]
   81658:	4313      	orrs	r3, r2
   8165a:	4a0a      	ldr	r2, [pc, #40]	; (81684 <usart_init_rs232+0x7c>)
   8165c:	6013      	str	r3, [r2, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
   8165e:	4b09      	ldr	r3, [pc, #36]	; (81684 <usart_init_rs232+0x7c>)
   81660:	681b      	ldr	r3, [r3, #0]
   81662:	4a08      	ldr	r2, [pc, #32]	; (81684 <usart_init_rs232+0x7c>)
   81664:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
   81666:	68fb      	ldr	r3, [r7, #12]
   81668:	685a      	ldr	r2, [r3, #4]
   8166a:	4b06      	ldr	r3, [pc, #24]	; (81684 <usart_init_rs232+0x7c>)
   8166c:	681b      	ldr	r3, [r3, #0]
   8166e:	431a      	orrs	r2, r3
   81670:	68fb      	ldr	r3, [r7, #12]
   81672:	605a      	str	r2, [r3, #4]

	return 0;
   81674:	2300      	movs	r3, #0
}
   81676:	4618      	mov	r0, r3
   81678:	3710      	adds	r7, #16
   8167a:	46bd      	mov	sp, r7
   8167c:	bd80      	pop	{r7, pc}
   8167e:	bf00      	nop
   81680:	000815b5 	.word	0x000815b5
   81684:	20070cc4 	.word	0x20070cc4
   81688:	0008152d 	.word	0x0008152d

0008168c <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
   8168c:	b480      	push	{r7}
   8168e:	b083      	sub	sp, #12
   81690:	af00      	add	r7, sp, #0
   81692:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
   81694:	687b      	ldr	r3, [r7, #4]
   81696:	2240      	movs	r2, #64	; 0x40
   81698:	601a      	str	r2, [r3, #0]
}
   8169a:	bf00      	nop
   8169c:	370c      	adds	r7, #12
   8169e:	46bd      	mov	sp, r7
   816a0:	bc80      	pop	{r7}
   816a2:	4770      	bx	lr

000816a4 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
   816a4:	b480      	push	{r7}
   816a6:	b083      	sub	sp, #12
   816a8:	af00      	add	r7, sp, #0
   816aa:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   816ac:	687b      	ldr	r3, [r7, #4]
   816ae:	2288      	movs	r2, #136	; 0x88
   816b0:	601a      	str	r2, [r3, #0]
}
   816b2:	bf00      	nop
   816b4:	370c      	adds	r7, #12
   816b6:	46bd      	mov	sp, r7
   816b8:	bc80      	pop	{r7}
   816ba:	4770      	bx	lr

000816bc <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
   816bc:	b480      	push	{r7}
   816be:	b083      	sub	sp, #12
   816c0:	af00      	add	r7, sp, #0
   816c2:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
   816c4:	687b      	ldr	r3, [r7, #4]
   816c6:	2210      	movs	r2, #16
   816c8:	601a      	str	r2, [r3, #0]
}
   816ca:	bf00      	nop
   816cc:	370c      	adds	r7, #12
   816ce:	46bd      	mov	sp, r7
   816d0:	bc80      	pop	{r7}
   816d2:	4770      	bx	lr

000816d4 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
   816d4:	b480      	push	{r7}
   816d6:	b083      	sub	sp, #12
   816d8:	af00      	add	r7, sp, #0
   816da:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   816dc:	687b      	ldr	r3, [r7, #4]
   816de:	2224      	movs	r2, #36	; 0x24
   816e0:	601a      	str	r2, [r3, #0]
}
   816e2:	bf00      	nop
   816e4:	370c      	adds	r7, #12
   816e6:	46bd      	mov	sp, r7
   816e8:	bc80      	pop	{r7}
   816ea:	4770      	bx	lr

000816ec <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
   816ec:	b480      	push	{r7}
   816ee:	b083      	sub	sp, #12
   816f0:	af00      	add	r7, sp, #0
   816f2:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
   816f4:	687b      	ldr	r3, [r7, #4]
   816f6:	f44f 7280 	mov.w	r2, #256	; 0x100
   816fa:	601a      	str	r2, [r3, #0]
}
   816fc:	bf00      	nop
   816fe:	370c      	adds	r7, #12
   81700:	46bd      	mov	sp, r7
   81702:	bc80      	pop	{r7}
   81704:	4770      	bx	lr
   81706:	bf00      	nop

00081708 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
   81708:	b480      	push	{r7}
   8170a:	b083      	sub	sp, #12
   8170c:	af00      	add	r7, sp, #0
   8170e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
   81710:	687b      	ldr	r3, [r7, #4]
   81712:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   81716:	601a      	str	r2, [r3, #0]
}
   81718:	bf00      	nop
   8171a:	370c      	adds	r7, #12
   8171c:	46bd      	mov	sp, r7
   8171e:	bc80      	pop	{r7}
   81720:	4770      	bx	lr
   81722:	bf00      	nop

00081724 <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
   81724:	b480      	push	{r7}
   81726:	b083      	sub	sp, #12
   81728:	af00      	add	r7, sp, #0
   8172a:	6078      	str	r0, [r7, #4]
   8172c:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   8172e:	687b      	ldr	r3, [r7, #4]
   81730:	695b      	ldr	r3, [r3, #20]
   81732:	f003 0302 	and.w	r3, r3, #2
   81736:	2b00      	cmp	r3, #0
   81738:	d101      	bne.n	8173e <usart_write+0x1a>
		return 1;
   8173a:	2301      	movs	r3, #1
   8173c:	e005      	b.n	8174a <usart_write+0x26>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   8173e:	683b      	ldr	r3, [r7, #0]
   81740:	f3c3 0208 	ubfx	r2, r3, #0, #9
   81744:	687b      	ldr	r3, [r7, #4]
   81746:	61da      	str	r2, [r3, #28]
	return 0;
   81748:	2300      	movs	r3, #0
}
   8174a:	4618      	mov	r0, r3
   8174c:	370c      	adds	r7, #12
   8174e:	46bd      	mov	sp, r7
   81750:	bc80      	pop	{r7}
   81752:	4770      	bx	lr

00081754 <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
   81754:	b480      	push	{r7}
   81756:	b083      	sub	sp, #12
   81758:	af00      	add	r7, sp, #0
   8175a:	6078      	str	r0, [r7, #4]
   8175c:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   8175e:	687b      	ldr	r3, [r7, #4]
   81760:	695b      	ldr	r3, [r3, #20]
   81762:	f003 0301 	and.w	r3, r3, #1
   81766:	2b00      	cmp	r3, #0
   81768:	d101      	bne.n	8176e <usart_read+0x1a>
		return 1;
   8176a:	2301      	movs	r3, #1
   8176c:	e006      	b.n	8177c <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   8176e:	687b      	ldr	r3, [r7, #4]
   81770:	699b      	ldr	r3, [r3, #24]
   81772:	f3c3 0208 	ubfx	r2, r3, #0, #9
   81776:	683b      	ldr	r3, [r7, #0]
   81778:	601a      	str	r2, [r3, #0]

	return 0;
   8177a:	2300      	movs	r3, #0
}
   8177c:	4618      	mov	r0, r3
   8177e:	370c      	adds	r7, #12
   81780:	46bd      	mov	sp, r7
   81782:	bc80      	pop	{r7}
   81784:	4770      	bx	lr
   81786:	bf00      	nop

00081788 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
   81788:	b480      	push	{r7}
   8178a:	b083      	sub	sp, #12
   8178c:	af00      	add	r7, sp, #0
   8178e:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY(US_WPKEY_VALUE);
   81790:	687b      	ldr	r3, [r7, #4]
   81792:	4a04      	ldr	r2, [pc, #16]	; (817a4 <usart_disable_writeprotect+0x1c>)
   81794:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
   81798:	bf00      	nop
   8179a:	370c      	adds	r7, #12
   8179c:	46bd      	mov	sp, r7
   8179e:	bc80      	pop	{r7}
   817a0:	4770      	bx	lr
   817a2:	bf00      	nop
   817a4:	55534100 	.word	0x55534100

000817a8 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   817a8:	b480      	push	{r7}
   817aa:	b083      	sub	sp, #12
   817ac:	af00      	add	r7, sp, #0
   817ae:	4603      	mov	r3, r0
   817b0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   817b2:	4908      	ldr	r1, [pc, #32]	; (817d4 <NVIC_EnableIRQ+0x2c>)
   817b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
   817b8:	095b      	lsrs	r3, r3, #5
   817ba:	79fa      	ldrb	r2, [r7, #7]
   817bc:	f002 021f 	and.w	r2, r2, #31
   817c0:	2001      	movs	r0, #1
   817c2:	fa00 f202 	lsl.w	r2, r0, r2
   817c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   817ca:	bf00      	nop
   817cc:	370c      	adds	r7, #12
   817ce:	46bd      	mov	sp, r7
   817d0:	bc80      	pop	{r7}
   817d2:	4770      	bx	lr
   817d4:	e000e100 	.word	0xe000e100

000817d8 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
   817d8:	b480      	push	{r7}
   817da:	b083      	sub	sp, #12
   817dc:	af00      	add	r7, sp, #0
   817de:	4603      	mov	r3, r0
   817e0:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   817e2:	4909      	ldr	r1, [pc, #36]	; (81808 <NVIC_DisableIRQ+0x30>)
   817e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
   817e8:	095b      	lsrs	r3, r3, #5
   817ea:	79fa      	ldrb	r2, [r7, #7]
   817ec:	f002 021f 	and.w	r2, r2, #31
   817f0:	2001      	movs	r0, #1
   817f2:	fa00 f202 	lsl.w	r2, r0, r2
   817f6:	3320      	adds	r3, #32
   817f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   817fc:	bf00      	nop
   817fe:	370c      	adds	r7, #12
   81800:	46bd      	mov	sp, r7
   81802:	bc80      	pop	{r7}
   81804:	4770      	bx	lr
   81806:	bf00      	nop
   81808:	e000e100 	.word	0xe000e100

0008180c <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
   8180c:	b480      	push	{r7}
   8180e:	b083      	sub	sp, #12
   81810:	af00      	add	r7, sp, #0
   81812:	4603      	mov	r3, r0
   81814:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   81816:	4909      	ldr	r1, [pc, #36]	; (8183c <NVIC_ClearPendingIRQ+0x30>)
   81818:	f997 3007 	ldrsb.w	r3, [r7, #7]
   8181c:	095b      	lsrs	r3, r3, #5
   8181e:	79fa      	ldrb	r2, [r7, #7]
   81820:	f002 021f 	and.w	r2, r2, #31
   81824:	2001      	movs	r0, #1
   81826:	fa00 f202 	lsl.w	r2, r0, r2
   8182a:	3360      	adds	r3, #96	; 0x60
   8182c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   81830:	bf00      	nop
   81832:	370c      	adds	r7, #12
   81834:	46bd      	mov	sp, r7
   81836:	bc80      	pop	{r7}
   81838:	4770      	bx	lr
   8183a:	bf00      	nop
   8183c:	e000e100 	.word	0xe000e100

00081840 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   81840:	b480      	push	{r7}
   81842:	b083      	sub	sp, #12
   81844:	af00      	add	r7, sp, #0
   81846:	4603      	mov	r3, r0
   81848:	6039      	str	r1, [r7, #0]
   8184a:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   8184c:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81850:	2b00      	cmp	r3, #0
   81852:	da0b      	bge.n	8186c <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   81854:	490d      	ldr	r1, [pc, #52]	; (8188c <NVIC_SetPriority+0x4c>)
   81856:	79fb      	ldrb	r3, [r7, #7]
   81858:	f003 030f 	and.w	r3, r3, #15
   8185c:	3b04      	subs	r3, #4
   8185e:	683a      	ldr	r2, [r7, #0]
   81860:	b2d2      	uxtb	r2, r2
   81862:	0112      	lsls	r2, r2, #4
   81864:	b2d2      	uxtb	r2, r2
   81866:	440b      	add	r3, r1
   81868:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
   8186a:	e009      	b.n	81880 <NVIC_SetPriority+0x40>
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   8186c:	4908      	ldr	r1, [pc, #32]	; (81890 <NVIC_SetPriority+0x50>)
   8186e:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81872:	683a      	ldr	r2, [r7, #0]
   81874:	b2d2      	uxtb	r2, r2
   81876:	0112      	lsls	r2, r2, #4
   81878:	b2d2      	uxtb	r2, r2
   8187a:	440b      	add	r3, r1
   8187c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   81880:	bf00      	nop
   81882:	370c      	adds	r7, #12
   81884:	46bd      	mov	sp, r7
   81886:	bc80      	pop	{r7}
   81888:	4770      	bx	lr
   8188a:	bf00      	nop
   8188c:	e000ed00 	.word	0xe000ed00
   81890:	e000e100 	.word	0xe000e100

00081894 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   81894:	b480      	push	{r7}
   81896:	b083      	sub	sp, #12
   81898:	af00      	add	r7, sp, #0
   8189a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   8189c:	687b      	ldr	r3, [r7, #4]
   8189e:	2b07      	cmp	r3, #7
   818a0:	d825      	bhi.n	818ee <osc_get_rate+0x5a>
   818a2:	a201      	add	r2, pc, #4	; (adr r2, 818a8 <osc_get_rate+0x14>)
   818a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   818a8:	000818c9 	.word	0x000818c9
   818ac:	000818cf 	.word	0x000818cf
   818b0:	000818d5 	.word	0x000818d5
   818b4:	000818db 	.word	0x000818db
   818b8:	000818df 	.word	0x000818df
   818bc:	000818e3 	.word	0x000818e3
   818c0:	000818e7 	.word	0x000818e7
   818c4:	000818eb 	.word	0x000818eb
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   818c8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   818cc:	e010      	b.n	818f0 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   818ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   818d2:	e00d      	b.n	818f0 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   818d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   818d8:	e00a      	b.n	818f0 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   818da:	4b08      	ldr	r3, [pc, #32]	; (818fc <osc_get_rate+0x68>)
   818dc:	e008      	b.n	818f0 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   818de:	4b08      	ldr	r3, [pc, #32]	; (81900 <osc_get_rate+0x6c>)
   818e0:	e006      	b.n	818f0 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   818e2:	4b08      	ldr	r3, [pc, #32]	; (81904 <osc_get_rate+0x70>)
   818e4:	e004      	b.n	818f0 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   818e6:	4b07      	ldr	r3, [pc, #28]	; (81904 <osc_get_rate+0x70>)
   818e8:	e002      	b.n	818f0 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   818ea:	4b06      	ldr	r3, [pc, #24]	; (81904 <osc_get_rate+0x70>)
   818ec:	e000      	b.n	818f0 <osc_get_rate+0x5c>
#endif
	}

	return 0;
   818ee:	2300      	movs	r3, #0
}
   818f0:	4618      	mov	r0, r3
   818f2:	370c      	adds	r7, #12
   818f4:	46bd      	mov	sp, r7
   818f6:	bc80      	pop	{r7}
   818f8:	4770      	bx	lr
   818fa:	bf00      	nop
   818fc:	003d0900 	.word	0x003d0900
   81900:	007a1200 	.word	0x007a1200
   81904:	00b71b00 	.word	0x00b71b00

00081908 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   81908:	b580      	push	{r7, lr}
   8190a:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   8190c:	2006      	movs	r0, #6
   8190e:	4b04      	ldr	r3, [pc, #16]	; (81920 <sysclk_get_main_hz+0x18>)
   81910:	4798      	blx	r3
   81912:	4602      	mov	r2, r0
   81914:	4613      	mov	r3, r2
   81916:	00db      	lsls	r3, r3, #3
   81918:	1a9b      	subs	r3, r3, r2
   8191a:	005b      	lsls	r3, r3, #1
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   8191c:	4618      	mov	r0, r3
   8191e:	bd80      	pop	{r7, pc}
   81920:	00081895 	.word	0x00081895

00081924 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
   81924:	b580      	push	{r7, lr}
   81926:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   81928:	4b02      	ldr	r3, [pc, #8]	; (81934 <sysclk_get_peripheral_hz+0x10>)
   8192a:	4798      	blx	r3
   8192c:	4603      	mov	r3, r0
   8192e:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   81930:	4618      	mov	r0, r3
   81932:	bd80      	pop	{r7, pc}
   81934:	00081909 	.word	0x00081909

00081938 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   81938:	b580      	push	{r7, lr}
   8193a:	b082      	sub	sp, #8
   8193c:	af00      	add	r7, sp, #0
   8193e:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   81940:	6878      	ldr	r0, [r7, #4]
   81942:	4b03      	ldr	r3, [pc, #12]	; (81950 <sysclk_enable_peripheral_clock+0x18>)
   81944:	4798      	blx	r3
}
   81946:	bf00      	nop
   81948:	3708      	adds	r7, #8
   8194a:	46bd      	mov	sp, r7
   8194c:	bd80      	pop	{r7, pc}
   8194e:	bf00      	nop
   81950:	00082fcd 	.word	0x00082fcd

00081954 <usart_serial_init>:
 * \param opt      Options needed to set up RS232 communication (see
 * \ref usart_options_t).
 */
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
   81954:	b580      	push	{r7, lr}
   81956:	b08c      	sub	sp, #48	; 0x30
   81958:	af00      	add	r7, sp, #0
   8195a:	6078      	str	r0, [r7, #4]
   8195c:	6039      	str	r1, [r7, #0]
#if (!SAM4L)
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   8195e:	4b40      	ldr	r3, [pc, #256]	; (81a60 <usart_serial_init+0x10c>)
   81960:	4798      	blx	r3
   81962:	4603      	mov	r3, r0
   81964:	623b      	str	r3, [r7, #32]
	uart_settings.ul_baudrate = opt->baudrate;
   81966:	683b      	ldr	r3, [r7, #0]
   81968:	681b      	ldr	r3, [r3, #0]
   8196a:	627b      	str	r3, [r7, #36]	; 0x24
	uart_settings.ul_mode = opt->paritytype;
   8196c:	683b      	ldr	r3, [r7, #0]
   8196e:	689b      	ldr	r3, [r3, #8]
   81970:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
   81972:	683b      	ldr	r3, [r7, #0]
   81974:	681b      	ldr	r3, [r3, #0]
   81976:	60bb      	str	r3, [r7, #8]
	usart_settings.char_length = opt->charlength;
   81978:	683b      	ldr	r3, [r7, #0]
   8197a:	685b      	ldr	r3, [r3, #4]
   8197c:	60fb      	str	r3, [r7, #12]
	usart_settings.parity_type = opt->paritytype;
   8197e:	683b      	ldr	r3, [r7, #0]
   81980:	689b      	ldr	r3, [r3, #8]
   81982:	613b      	str	r3, [r7, #16]
	usart_settings.stop_bits= opt->stopbits;
   81984:	683b      	ldr	r3, [r7, #0]
   81986:	7b1b      	ldrb	r3, [r3, #12]
   81988:	617b      	str	r3, [r7, #20]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
   8198a:	2300      	movs	r3, #0
   8198c:	61bb      	str	r3, [r7, #24]
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
   8198e:	687b      	ldr	r3, [r7, #4]
   81990:	4a34      	ldr	r2, [pc, #208]	; (81a64 <usart_serial_init+0x110>)
   81992:	4293      	cmp	r3, r2
   81994:	d108      	bne.n	819a8 <usart_serial_init+0x54>
		sysclk_enable_peripheral_clock(ID_UART);
   81996:	2008      	movs	r0, #8
   81998:	4b33      	ldr	r3, [pc, #204]	; (81a68 <usart_serial_init+0x114>)
   8199a:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   8199c:	f107 0320 	add.w	r3, r7, #32
   819a0:	4619      	mov	r1, r3
   819a2:	6878      	ldr	r0, [r7, #4]
   819a4:	4b31      	ldr	r3, [pc, #196]	; (81a6c <usart_serial_init+0x118>)
   819a6:	4798      	blx	r3
		usart_enable_tx(p_usart);
		usart_enable_rx(p_usart);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   819a8:	687b      	ldr	r3, [r7, #4]
   819aa:	4a31      	ldr	r2, [pc, #196]	; (81a70 <usart_serial_init+0x11c>)
   819ac:	4293      	cmp	r3, r2
   819ae:	d111      	bne.n	819d4 <usart_serial_init+0x80>
#if (!SAM4L)
		sysclk_enable_peripheral_clock(ID_USART0);
   819b0:	2011      	movs	r0, #17
   819b2:	4b2d      	ldr	r3, [pc, #180]	; (81a68 <usart_serial_init+0x114>)
   819b4:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
   819b6:	4b2a      	ldr	r3, [pc, #168]	; (81a60 <usart_serial_init+0x10c>)
   819b8:	4798      	blx	r3
   819ba:	4602      	mov	r2, r0
   819bc:	f107 0308 	add.w	r3, r7, #8
   819c0:	4619      	mov	r1, r3
   819c2:	6878      	ldr	r0, [r7, #4]
   819c4:	4b2b      	ldr	r3, [pc, #172]	; (81a74 <usart_serial_init+0x120>)
   819c6:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
   819c8:	6878      	ldr	r0, [r7, #4]
   819ca:	4b2b      	ldr	r3, [pc, #172]	; (81a78 <usart_serial_init+0x124>)
   819cc:	4798      	blx	r3
		usart_enable_rx(p_usart);
   819ce:	6878      	ldr	r0, [r7, #4]
   819d0:	4b2a      	ldr	r3, [pc, #168]	; (81a7c <usart_serial_init+0x128>)
   819d2:	4798      	blx	r3
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   819d4:	687b      	ldr	r3, [r7, #4]
   819d6:	4a2a      	ldr	r2, [pc, #168]	; (81a80 <usart_serial_init+0x12c>)
   819d8:	4293      	cmp	r3, r2
   819da:	d111      	bne.n	81a00 <usart_serial_init+0xac>
#if (!SAM4L)
		sysclk_enable_peripheral_clock(ID_USART1);
   819dc:	2012      	movs	r0, #18
   819de:	4b22      	ldr	r3, [pc, #136]	; (81a68 <usart_serial_init+0x114>)
   819e0:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
   819e2:	4b1f      	ldr	r3, [pc, #124]	; (81a60 <usart_serial_init+0x10c>)
   819e4:	4798      	blx	r3
   819e6:	4602      	mov	r2, r0
   819e8:	f107 0308 	add.w	r3, r7, #8
   819ec:	4619      	mov	r1, r3
   819ee:	6878      	ldr	r0, [r7, #4]
   819f0:	4b20      	ldr	r3, [pc, #128]	; (81a74 <usart_serial_init+0x120>)
   819f2:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
   819f4:	6878      	ldr	r0, [r7, #4]
   819f6:	4b20      	ldr	r3, [pc, #128]	; (81a78 <usart_serial_init+0x124>)
   819f8:	4798      	blx	r3
		usart_enable_rx(p_usart);
   819fa:	6878      	ldr	r0, [r7, #4]
   819fc:	4b1f      	ldr	r3, [pc, #124]	; (81a7c <usart_serial_init+0x128>)
   819fe:	4798      	blx	r3
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   81a00:	687b      	ldr	r3, [r7, #4]
   81a02:	4a20      	ldr	r2, [pc, #128]	; (81a84 <usart_serial_init+0x130>)
   81a04:	4293      	cmp	r3, r2
   81a06:	d111      	bne.n	81a2c <usart_serial_init+0xd8>
#if (!SAM4L)
		sysclk_enable_peripheral_clock(ID_USART2);
   81a08:	2013      	movs	r0, #19
   81a0a:	4b17      	ldr	r3, [pc, #92]	; (81a68 <usart_serial_init+0x114>)
   81a0c:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
   81a0e:	4b14      	ldr	r3, [pc, #80]	; (81a60 <usart_serial_init+0x10c>)
   81a10:	4798      	blx	r3
   81a12:	4602      	mov	r2, r0
   81a14:	f107 0308 	add.w	r3, r7, #8
   81a18:	4619      	mov	r1, r3
   81a1a:	6878      	ldr	r0, [r7, #4]
   81a1c:	4b15      	ldr	r3, [pc, #84]	; (81a74 <usart_serial_init+0x120>)
   81a1e:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
   81a20:	6878      	ldr	r0, [r7, #4]
   81a22:	4b15      	ldr	r3, [pc, #84]	; (81a78 <usart_serial_init+0x124>)
   81a24:	4798      	blx	r3
		usart_enable_rx(p_usart);
   81a26:	6878      	ldr	r0, [r7, #4]
   81a28:	4b14      	ldr	r3, [pc, #80]	; (81a7c <usart_serial_init+0x128>)
   81a2a:	4798      	blx	r3
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   81a2c:	687b      	ldr	r3, [r7, #4]
   81a2e:	4a16      	ldr	r2, [pc, #88]	; (81a88 <usart_serial_init+0x134>)
   81a30:	4293      	cmp	r3, r2
   81a32:	d111      	bne.n	81a58 <usart_serial_init+0x104>
#if (!SAM4L)
		sysclk_enable_peripheral_clock(ID_USART3);
   81a34:	2014      	movs	r0, #20
   81a36:	4b0c      	ldr	r3, [pc, #48]	; (81a68 <usart_serial_init+0x114>)
   81a38:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
   81a3a:	4b09      	ldr	r3, [pc, #36]	; (81a60 <usart_serial_init+0x10c>)
   81a3c:	4798      	blx	r3
   81a3e:	4602      	mov	r2, r0
   81a40:	f107 0308 	add.w	r3, r7, #8
   81a44:	4619      	mov	r1, r3
   81a46:	6878      	ldr	r0, [r7, #4]
   81a48:	4b0a      	ldr	r3, [pc, #40]	; (81a74 <usart_serial_init+0x120>)
   81a4a:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
   81a4c:	6878      	ldr	r0, [r7, #4]
   81a4e:	4b0a      	ldr	r3, [pc, #40]	; (81a78 <usart_serial_init+0x124>)
   81a50:	4798      	blx	r3
		usart_enable_rx(p_usart);
   81a52:	6878      	ldr	r0, [r7, #4]
   81a54:	4b09      	ldr	r3, [pc, #36]	; (81a7c <usart_serial_init+0x128>)
   81a56:	4798      	blx	r3
		usart_enable_rx(p_usart);
	}
# endif
#endif /* ifdef USART */

}
   81a58:	bf00      	nop
   81a5a:	3730      	adds	r7, #48	; 0x30
   81a5c:	46bd      	mov	sp, r7
   81a5e:	bd80      	pop	{r7, pc}
   81a60:	00081925 	.word	0x00081925
   81a64:	400e0800 	.word	0x400e0800
   81a68:	00081939 	.word	0x00081939
   81a6c:	00081409 	.word	0x00081409
   81a70:	40098000 	.word	0x40098000
   81a74:	00081609 	.word	0x00081609
   81a78:	0008168d 	.word	0x0008168d
   81a7c:	000816bd 	.word	0x000816bd
   81a80:	4009c000 	.word	0x4009c000
   81a84:	400a0000 	.word	0x400a0000
   81a88:	400a4000 	.word	0x400a4000

00081a8c <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   81a8c:	b580      	push	{r7, lr}
   81a8e:	b082      	sub	sp, #8
   81a90:	af00      	add	r7, sp, #0
   81a92:	6078      	str	r0, [r7, #4]
   81a94:	460b      	mov	r3, r1
   81a96:	70fb      	strb	r3, [r7, #3]
#ifdef UART
	if (UART == (Uart*)p_usart) {
   81a98:	687b      	ldr	r3, [r7, #4]
   81a9a:	4a27      	ldr	r2, [pc, #156]	; (81b38 <usart_serial_putchar+0xac>)
   81a9c:	4293      	cmp	r3, r2
   81a9e:	d10a      	bne.n	81ab6 <usart_serial_putchar+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
   81aa0:	bf00      	nop
   81aa2:	78fb      	ldrb	r3, [r7, #3]
   81aa4:	4619      	mov	r1, r3
   81aa6:	6878      	ldr	r0, [r7, #4]
   81aa8:	4b24      	ldr	r3, [pc, #144]	; (81b3c <usart_serial_putchar+0xb0>)
   81aaa:	4798      	blx	r3
   81aac:	4603      	mov	r3, r0
   81aae:	2b00      	cmp	r3, #0
   81ab0:	d1f7      	bne.n	81aa2 <usart_serial_putchar+0x16>
		return 1;
   81ab2:	2301      	movs	r3, #1
   81ab4:	e03c      	b.n	81b30 <usart_serial_putchar+0xa4>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   81ab6:	687b      	ldr	r3, [r7, #4]
   81ab8:	4a21      	ldr	r2, [pc, #132]	; (81b40 <usart_serial_putchar+0xb4>)
   81aba:	4293      	cmp	r3, r2
   81abc:	d10a      	bne.n	81ad4 <usart_serial_putchar+0x48>
		while (usart_write(p_usart, c)!=0);
   81abe:	bf00      	nop
   81ac0:	78fb      	ldrb	r3, [r7, #3]
   81ac2:	4619      	mov	r1, r3
   81ac4:	6878      	ldr	r0, [r7, #4]
   81ac6:	4b1f      	ldr	r3, [pc, #124]	; (81b44 <usart_serial_putchar+0xb8>)
   81ac8:	4798      	blx	r3
   81aca:	4603      	mov	r3, r0
   81acc:	2b00      	cmp	r3, #0
   81ace:	d1f7      	bne.n	81ac0 <usart_serial_putchar+0x34>
		return 1;
   81ad0:	2301      	movs	r3, #1
   81ad2:	e02d      	b.n	81b30 <usart_serial_putchar+0xa4>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   81ad4:	687b      	ldr	r3, [r7, #4]
   81ad6:	4a1c      	ldr	r2, [pc, #112]	; (81b48 <usart_serial_putchar+0xbc>)
   81ad8:	4293      	cmp	r3, r2
   81ada:	d10a      	bne.n	81af2 <usart_serial_putchar+0x66>
		while (usart_write(p_usart, c)!=0);
   81adc:	bf00      	nop
   81ade:	78fb      	ldrb	r3, [r7, #3]
   81ae0:	4619      	mov	r1, r3
   81ae2:	6878      	ldr	r0, [r7, #4]
   81ae4:	4b17      	ldr	r3, [pc, #92]	; (81b44 <usart_serial_putchar+0xb8>)
   81ae6:	4798      	blx	r3
   81ae8:	4603      	mov	r3, r0
   81aea:	2b00      	cmp	r3, #0
   81aec:	d1f7      	bne.n	81ade <usart_serial_putchar+0x52>
		return 1;
   81aee:	2301      	movs	r3, #1
   81af0:	e01e      	b.n	81b30 <usart_serial_putchar+0xa4>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   81af2:	687b      	ldr	r3, [r7, #4]
   81af4:	4a15      	ldr	r2, [pc, #84]	; (81b4c <usart_serial_putchar+0xc0>)
   81af6:	4293      	cmp	r3, r2
   81af8:	d10a      	bne.n	81b10 <usart_serial_putchar+0x84>
		while (usart_write(p_usart, c)!=0);
   81afa:	bf00      	nop
   81afc:	78fb      	ldrb	r3, [r7, #3]
   81afe:	4619      	mov	r1, r3
   81b00:	6878      	ldr	r0, [r7, #4]
   81b02:	4b10      	ldr	r3, [pc, #64]	; (81b44 <usart_serial_putchar+0xb8>)
   81b04:	4798      	blx	r3
   81b06:	4603      	mov	r3, r0
   81b08:	2b00      	cmp	r3, #0
   81b0a:	d1f7      	bne.n	81afc <usart_serial_putchar+0x70>
		return 1;
   81b0c:	2301      	movs	r3, #1
   81b0e:	e00f      	b.n	81b30 <usart_serial_putchar+0xa4>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   81b10:	687b      	ldr	r3, [r7, #4]
   81b12:	4a0f      	ldr	r2, [pc, #60]	; (81b50 <usart_serial_putchar+0xc4>)
   81b14:	4293      	cmp	r3, r2
   81b16:	d10a      	bne.n	81b2e <usart_serial_putchar+0xa2>
		while (usart_write(p_usart, c)!=0);
   81b18:	bf00      	nop
   81b1a:	78fb      	ldrb	r3, [r7, #3]
   81b1c:	4619      	mov	r1, r3
   81b1e:	6878      	ldr	r0, [r7, #4]
   81b20:	4b08      	ldr	r3, [pc, #32]	; (81b44 <usart_serial_putchar+0xb8>)
   81b22:	4798      	blx	r3
   81b24:	4603      	mov	r3, r0
   81b26:	2b00      	cmp	r3, #0
   81b28:	d1f7      	bne.n	81b1a <usart_serial_putchar+0x8e>
		return 1;
   81b2a:	2301      	movs	r3, #1
   81b2c:	e000      	b.n	81b30 <usart_serial_putchar+0xa4>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   81b2e:	2300      	movs	r3, #0
}
   81b30:	4618      	mov	r0, r3
   81b32:	3708      	adds	r7, #8
   81b34:	46bd      	mov	sp, r7
   81b36:	bd80      	pop	{r7, pc}
   81b38:	400e0800 	.word	0x400e0800
   81b3c:	000814cd 	.word	0x000814cd
   81b40:	40098000 	.word	0x40098000
   81b44:	00081725 	.word	0x00081725
   81b48:	4009c000 	.word	0x4009c000
   81b4c:	400a0000 	.word	0x400a0000
   81b50:	400a4000 	.word	0x400a4000

00081b54 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   81b54:	b580      	push	{r7, lr}
   81b56:	b084      	sub	sp, #16
   81b58:	af00      	add	r7, sp, #0
   81b5a:	6078      	str	r0, [r7, #4]
   81b5c:	6039      	str	r1, [r7, #0]
	uint32_t val = 0;
   81b5e:	2300      	movs	r3, #0
   81b60:	60fb      	str	r3, [r7, #12]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   81b62:	687b      	ldr	r3, [r7, #4]
   81b64:	4a2b      	ldr	r2, [pc, #172]	; (81c14 <usart_serial_getchar+0xc0>)
   81b66:	4293      	cmp	r3, r2
   81b68:	d107      	bne.n	81b7a <usart_serial_getchar+0x26>
		while (uart_read((Uart*)p_usart, data));
   81b6a:	bf00      	nop
   81b6c:	6839      	ldr	r1, [r7, #0]
   81b6e:	6878      	ldr	r0, [r7, #4]
   81b70:	4b29      	ldr	r3, [pc, #164]	; (81c18 <usart_serial_getchar+0xc4>)
   81b72:	4798      	blx	r3
   81b74:	4603      	mov	r3, r0
   81b76:	2b00      	cmp	r3, #0
   81b78:	d1f8      	bne.n	81b6c <usart_serial_getchar+0x18>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   81b7a:	687b      	ldr	r3, [r7, #4]
   81b7c:	4a27      	ldr	r2, [pc, #156]	; (81c1c <usart_serial_getchar+0xc8>)
   81b7e:	4293      	cmp	r3, r2
   81b80:	d10d      	bne.n	81b9e <usart_serial_getchar+0x4a>
		while (usart_read(p_usart, &val));
   81b82:	bf00      	nop
   81b84:	f107 030c 	add.w	r3, r7, #12
   81b88:	4619      	mov	r1, r3
   81b8a:	6878      	ldr	r0, [r7, #4]
   81b8c:	4b24      	ldr	r3, [pc, #144]	; (81c20 <usart_serial_getchar+0xcc>)
   81b8e:	4798      	blx	r3
   81b90:	4603      	mov	r3, r0
   81b92:	2b00      	cmp	r3, #0
   81b94:	d1f6      	bne.n	81b84 <usart_serial_getchar+0x30>
		*data = (uint8_t)(val & 0xFF);
   81b96:	68fb      	ldr	r3, [r7, #12]
   81b98:	b2da      	uxtb	r2, r3
   81b9a:	683b      	ldr	r3, [r7, #0]
   81b9c:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   81b9e:	687b      	ldr	r3, [r7, #4]
   81ba0:	4a20      	ldr	r2, [pc, #128]	; (81c24 <usart_serial_getchar+0xd0>)
   81ba2:	4293      	cmp	r3, r2
   81ba4:	d10d      	bne.n	81bc2 <usart_serial_getchar+0x6e>
		while (usart_read(p_usart, &val));
   81ba6:	bf00      	nop
   81ba8:	f107 030c 	add.w	r3, r7, #12
   81bac:	4619      	mov	r1, r3
   81bae:	6878      	ldr	r0, [r7, #4]
   81bb0:	4b1b      	ldr	r3, [pc, #108]	; (81c20 <usart_serial_getchar+0xcc>)
   81bb2:	4798      	blx	r3
   81bb4:	4603      	mov	r3, r0
   81bb6:	2b00      	cmp	r3, #0
   81bb8:	d1f6      	bne.n	81ba8 <usart_serial_getchar+0x54>
		*data = (uint8_t)(val & 0xFF);
   81bba:	68fb      	ldr	r3, [r7, #12]
   81bbc:	b2da      	uxtb	r2, r3
   81bbe:	683b      	ldr	r3, [r7, #0]
   81bc0:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   81bc2:	687b      	ldr	r3, [r7, #4]
   81bc4:	4a18      	ldr	r2, [pc, #96]	; (81c28 <usart_serial_getchar+0xd4>)
   81bc6:	4293      	cmp	r3, r2
   81bc8:	d10d      	bne.n	81be6 <usart_serial_getchar+0x92>
		while (usart_read(p_usart, &val));
   81bca:	bf00      	nop
   81bcc:	f107 030c 	add.w	r3, r7, #12
   81bd0:	4619      	mov	r1, r3
   81bd2:	6878      	ldr	r0, [r7, #4]
   81bd4:	4b12      	ldr	r3, [pc, #72]	; (81c20 <usart_serial_getchar+0xcc>)
   81bd6:	4798      	blx	r3
   81bd8:	4603      	mov	r3, r0
   81bda:	2b00      	cmp	r3, #0
   81bdc:	d1f6      	bne.n	81bcc <usart_serial_getchar+0x78>
		*data = (uint8_t)(val & 0xFF);
   81bde:	68fb      	ldr	r3, [r7, #12]
   81be0:	b2da      	uxtb	r2, r3
   81be2:	683b      	ldr	r3, [r7, #0]
   81be4:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   81be6:	687b      	ldr	r3, [r7, #4]
   81be8:	4a10      	ldr	r2, [pc, #64]	; (81c2c <usart_serial_getchar+0xd8>)
   81bea:	4293      	cmp	r3, r2
   81bec:	d10d      	bne.n	81c0a <usart_serial_getchar+0xb6>
		while (usart_read(p_usart, &val));
   81bee:	bf00      	nop
   81bf0:	f107 030c 	add.w	r3, r7, #12
   81bf4:	4619      	mov	r1, r3
   81bf6:	6878      	ldr	r0, [r7, #4]
   81bf8:	4b09      	ldr	r3, [pc, #36]	; (81c20 <usart_serial_getchar+0xcc>)
   81bfa:	4798      	blx	r3
   81bfc:	4603      	mov	r3, r0
   81bfe:	2b00      	cmp	r3, #0
   81c00:	d1f6      	bne.n	81bf0 <usart_serial_getchar+0x9c>
		*data = (uint8_t)(val & 0xFF);
   81c02:	68fb      	ldr	r3, [r7, #12]
   81c04:	b2da      	uxtb	r2, r3
   81c06:	683b      	ldr	r3, [r7, #0]
   81c08:	701a      	strb	r2, [r3, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   81c0a:	bf00      	nop
   81c0c:	3710      	adds	r7, #16
   81c0e:	46bd      	mov	sp, r7
   81c10:	bd80      	pop	{r7, pc}
   81c12:	bf00      	nop
   81c14:	400e0800 	.word	0x400e0800
   81c18:	000814fd 	.word	0x000814fd
   81c1c:	40098000 	.word	0x40098000
   81c20:	00081755 	.word	0x00081755
   81c24:	4009c000 	.word	0x4009c000
   81c28:	400a0000 	.word	0x400a0000
   81c2c:	400a4000 	.word	0x400a4000

00081c30 <stdio_serial_init>:
 * \param usart       Base address of the USART instance.
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
   81c30:	b580      	push	{r7, lr}
   81c32:	b082      	sub	sp, #8
   81c34:	af00      	add	r7, sp, #0
   81c36:	6078      	str	r0, [r7, #4]
   81c38:	6039      	str	r1, [r7, #0]
	stdio_base = (void *)usart;
   81c3a:	4a0f      	ldr	r2, [pc, #60]	; (81c78 <stdio_serial_init+0x48>)
   81c3c:	687b      	ldr	r3, [r7, #4]
   81c3e:	6013      	str	r3, [r2, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   81c40:	4b0e      	ldr	r3, [pc, #56]	; (81c7c <stdio_serial_init+0x4c>)
   81c42:	4a0f      	ldr	r2, [pc, #60]	; (81c80 <stdio_serial_init+0x50>)
   81c44:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   81c46:	4b0f      	ldr	r3, [pc, #60]	; (81c84 <stdio_serial_init+0x54>)
   81c48:	4a0f      	ldr	r2, [pc, #60]	; (81c88 <stdio_serial_init+0x58>)
   81c4a:	601a      	str	r2, [r3, #0]
# if (XMEGA || MEGA_RF)
	usart_serial_init((USART_t *)usart,opt);
# elif UC3
	usart_serial_init(usart,(usart_serial_options_t *)opt);
# elif SAM
	usart_serial_init((Usart *)usart,(usart_serial_options_t *)opt);
   81c4c:	6839      	ldr	r1, [r7, #0]
   81c4e:	6878      	ldr	r0, [r7, #4]
   81c50:	4b0e      	ldr	r3, [pc, #56]	; (81c8c <stdio_serial_init+0x5c>)
   81c52:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   81c54:	4b0e      	ldr	r3, [pc, #56]	; (81c90 <stdio_serial_init+0x60>)
   81c56:	681b      	ldr	r3, [r3, #0]
   81c58:	689b      	ldr	r3, [r3, #8]
   81c5a:	2100      	movs	r1, #0
   81c5c:	4618      	mov	r0, r3
   81c5e:	4b0d      	ldr	r3, [pc, #52]	; (81c94 <stdio_serial_init+0x64>)
   81c60:	4798      	blx	r3
	setbuf(stdin, NULL);
   81c62:	4b0b      	ldr	r3, [pc, #44]	; (81c90 <stdio_serial_init+0x60>)
   81c64:	681b      	ldr	r3, [r3, #0]
   81c66:	685b      	ldr	r3, [r3, #4]
   81c68:	2100      	movs	r1, #0
   81c6a:	4618      	mov	r0, r3
   81c6c:	4b09      	ldr	r3, [pc, #36]	; (81c94 <stdio_serial_init+0x64>)
   81c6e:	4798      	blx	r3
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
# endif
}
   81c70:	bf00      	nop
   81c72:	3708      	adds	r7, #8
   81c74:	46bd      	mov	sp, r7
   81c76:	bd80      	pop	{r7, pc}
   81c78:	200711f8 	.word	0x200711f8
   81c7c:	200711f4 	.word	0x200711f4
   81c80:	00081a8d 	.word	0x00081a8d
   81c84:	200711f0 	.word	0x200711f0
   81c88:	00081b55 	.word	0x00081b55
   81c8c:	00081955 	.word	0x00081955
   81c90:	20070830 	.word	0x20070830
   81c94:	000838d9 	.word	0x000838d9

00081c98 <UART_Handler>:
};
uint8_t feedcount_flag = 0;
uint32_t acid_count = 0;
uint32_t bicarb_count = 0;
void UART_Handler()
{
   81c98:	b580      	push	{r7, lr}
   81c9a:	b082      	sub	sp, #8
   81c9c:	af00      	add	r7, sp, #0
	static uint8_t cnt=0;
	cnt++;
   81c9e:	4b28      	ldr	r3, [pc, #160]	; (81d40 <UART_Handler+0xa8>)
   81ca0:	781b      	ldrb	r3, [r3, #0]
   81ca2:	3301      	adds	r3, #1
   81ca4:	b2da      	uxtb	r2, r3
   81ca6:	4b26      	ldr	r3, [pc, #152]	; (81d40 <UART_Handler+0xa8>)
   81ca8:	701a      	strb	r2, [r3, #0]
	//printf("l\n");
	uint32_t status;
	//static dummy_1=0;
	uint8_t rx_val;
	status= UART->UART_SR;
   81caa:	4b26      	ldr	r3, [pc, #152]	; (81d44 <UART_Handler+0xac>)
   81cac:	695b      	ldr	r3, [r3, #20]
   81cae:	607b      	str	r3, [r7, #4]
	if(status & 0x01)
   81cb0:	687b      	ldr	r3, [r7, #4]
   81cb2:	f003 0301 	and.w	r3, r3, #1
   81cb6:	2b00      	cmp	r3, #0
   81cb8:	d03d      	beq.n	81d36 <UART_Handler+0x9e>
	{
		rx_val=UART->UART_RHR;
   81cba:	4b22      	ldr	r3, [pc, #136]	; (81d44 <UART_Handler+0xac>)
   81cbc:	699b      	ldr	r3, [r3, #24]
   81cbe:	70fb      	strb	r3, [r7, #3]
		rx_val=rx_val+127;
   81cc0:	78fb      	ldrb	r3, [r7, #3]
   81cc2:	337f      	adds	r3, #127	; 0x7f
   81cc4:	70fb      	strb	r3, [r7, #3]
		if (cnt==1)
   81cc6:	4b1e      	ldr	r3, [pc, #120]	; (81d40 <UART_Handler+0xa8>)
   81cc8:	781b      	ldrb	r3, [r3, #0]
   81cca:	2b01      	cmp	r3, #1
   81ccc:	d103      	bne.n	81cd6 <UART_Handler+0x3e>
		{
			rc=rx_val;
   81cce:	78fb      	ldrb	r3, [r7, #3]
   81cd0:	4a1d      	ldr	r2, [pc, #116]	; (81d48 <UART_Handler+0xb0>)
   81cd2:	6013      	str	r3, [r2, #0]
   81cd4:	e009      	b.n	81cea <UART_Handler+0x52>
		}
		else if (cnt==2)
   81cd6:	4b1a      	ldr	r3, [pc, #104]	; (81d40 <UART_Handler+0xa8>)
   81cd8:	781b      	ldrb	r3, [r3, #0]
   81cda:	2b02      	cmp	r3, #2
   81cdc:	d105      	bne.n	81cea <UART_Handler+0x52>
		{
			bic_rc=rx_val;
   81cde:	78fb      	ldrb	r3, [r7, #3]
   81ce0:	4a1a      	ldr	r2, [pc, #104]	; (81d4c <UART_Handler+0xb4>)
   81ce2:	6013      	str	r3, [r2, #0]
			cnt=0;
   81ce4:	4b16      	ldr	r3, [pc, #88]	; (81d40 <UART_Handler+0xa8>)
   81ce6:	2200      	movs	r2, #0
   81ce8:	701a      	strb	r2, [r3, #0]
		}
		printf("%d %d\n",rc,bic_rc);
   81cea:	4b17      	ldr	r3, [pc, #92]	; (81d48 <UART_Handler+0xb0>)
   81cec:	6819      	ldr	r1, [r3, #0]
   81cee:	4b17      	ldr	r3, [pc, #92]	; (81d4c <UART_Handler+0xb4>)
   81cf0:	681b      	ldr	r3, [r3, #0]
   81cf2:	461a      	mov	r2, r3
   81cf4:	4816      	ldr	r0, [pc, #88]	; (81d50 <UART_Handler+0xb8>)
   81cf6:	4b17      	ldr	r3, [pc, #92]	; (81d54 <UART_Handler+0xbc>)
   81cf8:	4798      	blx	r3
		tc_stop(TC0,0);
   81cfa:	2100      	movs	r1, #0
   81cfc:	4816      	ldr	r0, [pc, #88]	; (81d58 <UART_Handler+0xc0>)
   81cfe:	4b17      	ldr	r3, [pc, #92]	; (81d5c <UART_Handler+0xc4>)
   81d00:	4798      	blx	r3
		tc_stop(TC0,1);
   81d02:	2101      	movs	r1, #1
   81d04:	4814      	ldr	r0, [pc, #80]	; (81d58 <UART_Handler+0xc0>)
   81d06:	4b15      	ldr	r3, [pc, #84]	; (81d5c <UART_Handler+0xc4>)
   81d08:	4798      	blx	r3
		tc_write_rc(TC0,0,rc);
   81d0a:	4b0f      	ldr	r3, [pc, #60]	; (81d48 <UART_Handler+0xb0>)
   81d0c:	681b      	ldr	r3, [r3, #0]
   81d0e:	461a      	mov	r2, r3
   81d10:	2100      	movs	r1, #0
   81d12:	4811      	ldr	r0, [pc, #68]	; (81d58 <UART_Handler+0xc0>)
   81d14:	4b12      	ldr	r3, [pc, #72]	; (81d60 <UART_Handler+0xc8>)
   81d16:	4798      	blx	r3
		tc_write_rc(TC0,1,bic_rc);
   81d18:	4b0c      	ldr	r3, [pc, #48]	; (81d4c <UART_Handler+0xb4>)
   81d1a:	681b      	ldr	r3, [r3, #0]
   81d1c:	461a      	mov	r2, r3
   81d1e:	2101      	movs	r1, #1
   81d20:	480d      	ldr	r0, [pc, #52]	; (81d58 <UART_Handler+0xc0>)
   81d22:	4b0f      	ldr	r3, [pc, #60]	; (81d60 <UART_Handler+0xc8>)
   81d24:	4798      	blx	r3
		tc_start(TC0,0);
   81d26:	2100      	movs	r1, #0
   81d28:	480b      	ldr	r0, [pc, #44]	; (81d58 <UART_Handler+0xc0>)
   81d2a:	4b0e      	ldr	r3, [pc, #56]	; (81d64 <UART_Handler+0xcc>)
   81d2c:	4798      	blx	r3
		tc_start(TC0,1);
   81d2e:	2101      	movs	r1, #1
   81d30:	4809      	ldr	r0, [pc, #36]	; (81d58 <UART_Handler+0xc0>)
   81d32:	4b0c      	ldr	r3, [pc, #48]	; (81d64 <UART_Handler+0xcc>)
   81d34:	4798      	blx	r3
	}
}
   81d36:	bf00      	nop
   81d38:	3708      	adds	r7, #8
   81d3a:	46bd      	mov	sp, r7
   81d3c:	bd80      	pop	{r7, pc}
   81d3e:	bf00      	nop
   81d40:	20070ce4 	.word	0x20070ce4
   81d44:	400e0800 	.word	0x400e0800
   81d48:	20070cd4 	.word	0x20070cd4
   81d4c:	20071208 	.word	0x20071208
   81d50:	00086770 	.word	0x00086770
   81d54:	00083815 	.word	0x00083815
   81d58:	40080000 	.word	0x40080000
   81d5c:	00081379 	.word	0x00081379
   81d60:	00081399 	.word	0x00081399
   81d64:	00081359 	.word	0x00081359

00081d68 <main>:
int main (void)
{
   81d68:	b590      	push	{r4, r7, lr}
   81d6a:	b085      	sub	sp, #20
   81d6c:	af00      	add	r7, sp, #0
	uint8_t uc_key;
	board_init();
   81d6e:	4b1a      	ldr	r3, [pc, #104]	; (81dd8 <main+0x70>)
   81d70:	4798      	blx	r3
	CPU3_S_SYSTEM_INIT();
   81d72:	4b1a      	ldr	r3, [pc, #104]	; (81ddc <main+0x74>)
   81d74:	4798      	blx	r3
	//configure_console();
	sysclk_enable_peripheral_clock(ID_UART);
   81d76:	2008      	movs	r0, #8
   81d78:	4b19      	ldr	r3, [pc, #100]	; (81de0 <main+0x78>)
   81d7a:	4798      	blx	r3
	pmc_enable_periph_clk(ID_PIOA);
   81d7c:	200b      	movs	r0, #11
   81d7e:	4b19      	ldr	r3, [pc, #100]	; (81de4 <main+0x7c>)
   81d80:	4798      	blx	r3
	UART->UART_CR	= 0x00000050;
   81d82:	4b19      	ldr	r3, [pc, #100]	; (81de8 <main+0x80>)
   81d84:	2250      	movs	r2, #80	; 0x50
   81d86:	601a      	str	r2, [r3, #0]
	UART->UART_MR	= 0x00000800;
   81d88:	4b17      	ldr	r3, [pc, #92]	; (81de8 <main+0x80>)
   81d8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
   81d8e:	605a      	str	r2, [r3, #4]
	UART->UART_BRGR = 0x00000046;
   81d90:	4b15      	ldr	r3, [pc, #84]	; (81de8 <main+0x80>)
   81d92:	2246      	movs	r2, #70	; 0x46
   81d94:	621a      	str	r2, [r3, #32]
	PIOA->PIO_PUER = 0x00000300;
   81d96:	4b15      	ldr	r3, [pc, #84]	; (81dec <main+0x84>)
   81d98:	f44f 7240 	mov.w	r2, #768	; 0x300
   81d9c:	665a      	str	r2, [r3, #100]	; 0x64
	
	stdio_serial_init(UART,&uart_serial_options);
   81d9e:	4914      	ldr	r1, [pc, #80]	; (81df0 <main+0x88>)
   81da0:	4811      	ldr	r0, [pc, #68]	; (81de8 <main+0x80>)
   81da2:	4b14      	ldr	r3, [pc, #80]	; (81df4 <main+0x8c>)
   81da4:	4798      	blx	r3
	uart_enable(UART);
   81da6:	4810      	ldr	r0, [pc, #64]	; (81de8 <main+0x80>)
   81da8:	4b13      	ldr	r3, [pc, #76]	; (81df8 <main+0x90>)
   81daa:	4798      	blx	r3
	uart_enable_rx(UART);
   81dac:	480e      	ldr	r0, [pc, #56]	; (81de8 <main+0x80>)
   81dae:	4b13      	ldr	r3, [pc, #76]	; (81dfc <main+0x94>)
   81db0:	4798      	blx	r3
	uart_enable_tx(UART);
   81db2:	480d      	ldr	r0, [pc, #52]	; (81de8 <main+0x80>)
   81db4:	4b12      	ldr	r3, [pc, #72]	; (81e00 <main+0x98>)
   81db6:	4798      	blx	r3
	
	NVIC_DisableIRQ(UART_IRQn);
   81db8:	2008      	movs	r0, #8
   81dba:	4b12      	ldr	r3, [pc, #72]	; (81e04 <main+0x9c>)
   81dbc:	4798      	blx	r3
	NVIC_ClearPendingIRQ(UART_IRQn);
   81dbe:	2008      	movs	r0, #8
   81dc0:	4b11      	ldr	r3, [pc, #68]	; (81e08 <main+0xa0>)
   81dc2:	4798      	blx	r3
	NVIC_SetPriority(UART_IRQn,0);
   81dc4:	2100      	movs	r1, #0
   81dc6:	2008      	movs	r0, #8
   81dc8:	4b10      	ldr	r3, [pc, #64]	; (81e0c <main+0xa4>)
   81dca:	4798      	blx	r3
	NVIC_EnableIRQ(UART_IRQn);
   81dcc:	2008      	movs	r0, #8
   81dce:	4b10      	ldr	r3, [pc, #64]	; (81e10 <main+0xa8>)
   81dd0:	4798      	blx	r3
	
	for (int i=0;i <100000;i++)
   81dd2:	2300      	movs	r3, #0
   81dd4:	60fb      	str	r3, [r7, #12]
   81dd6:	e020      	b.n	81e1a <main+0xb2>
   81dd8:	000827e1 	.word	0x000827e1
   81ddc:	000811d1 	.word	0x000811d1
   81de0:	00081939 	.word	0x00081939
   81de4:	00082fcd 	.word	0x00082fcd
   81de8:	400e0800 	.word	0x400e0800
   81dec:	400e0e00 	.word	0x400e0e00
   81df0:	00086760 	.word	0x00086760
   81df4:	00081c31 	.word	0x00081c31
   81df8:	00081499 	.word	0x00081499
   81dfc:	00081481 	.word	0x00081481
   81e00:	00081469 	.word	0x00081469
   81e04:	000817d9 	.word	0x000817d9
   81e08:	0008180d 	.word	0x0008180d
   81e0c:	00081841 	.word	0x00081841
   81e10:	000817a9 	.word	0x000817a9
   81e14:	68fb      	ldr	r3, [r7, #12]
   81e16:	3301      	adds	r3, #1
   81e18:	60fb      	str	r3, [r7, #12]
   81e1a:	68fb      	ldr	r3, [r7, #12]
   81e1c:	4a95      	ldr	r2, [pc, #596]	; (82074 <main+0x30c>)
   81e1e:	4293      	cmp	r3, r2
   81e20:	ddf8      	ble.n	81e14 <main+0xac>
	{
		;
	}
	printf("welcome\n");
   81e22:	4895      	ldr	r0, [pc, #596]	; (82078 <main+0x310>)
   81e24:	4b95      	ldr	r3, [pc, #596]	; (8207c <main+0x314>)
   81e26:	4798      	blx	r3
	
	pmc_enable_periph_clk(ID_PIOA);
   81e28:	200b      	movs	r0, #11
   81e2a:	4b95      	ldr	r3, [pc, #596]	; (82080 <main+0x318>)
   81e2c:	4798      	blx	r3
	pmc_enable_periph_clk(ID_PIOB);
   81e2e:	200c      	movs	r0, #12
   81e30:	4b93      	ldr	r3, [pc, #588]	; (82080 <main+0x318>)
   81e32:	4798      	blx	r3
	pmc_enable_periph_clk(ID_PIOC);
   81e34:	200d      	movs	r0, #13
   81e36:	4b92      	ldr	r3, [pc, #584]	; (82080 <main+0x318>)
   81e38:	4798      	blx	r3
	pmc_enable_periph_clk(ID_PIOD);
   81e3a:	200e      	movs	r0, #14
   81e3c:	4b90      	ldr	r3, [pc, #576]	; (82080 <main+0x318>)
   81e3e:	4798      	blx	r3
	static uint32_t dummy_1=0,flag_1=0,flag_1b=0,dummy_1b=0;
	static uint32_t status,status_bic,status_fdbck;
	static uint32_t prev_status=0, curr_status=0;
    static uint32_t prev_status_bic=0, curr_status_bic=0;
	static uint32_t prev_status_fdbck=0, curr_status_fdbck=0;
	status=(((PIOB->PIO_PDSR)>>25)&1);
   81e40:	4b90      	ldr	r3, [pc, #576]	; (82084 <main+0x31c>)
   81e42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   81e44:	0e5b      	lsrs	r3, r3, #25
   81e46:	f003 0301 	and.w	r3, r3, #1
   81e4a:	4a8f      	ldr	r2, [pc, #572]	; (82088 <main+0x320>)
   81e4c:	6013      	str	r3, [r2, #0]
	status_bic=(((PIOC->PIO_PDSR)>>28)&1);
   81e4e:	4b8f      	ldr	r3, [pc, #572]	; (8208c <main+0x324>)
   81e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   81e52:	0f1b      	lsrs	r3, r3, #28
   81e54:	f003 0301 	and.w	r3, r3, #1
   81e58:	4a8d      	ldr	r2, [pc, #564]	; (82090 <main+0x328>)
   81e5a:	6013      	str	r3, [r2, #0]
	status_fdbck=(((PIOC->PIO_PDSR)>>26)&1);
   81e5c:	4b8b      	ldr	r3, [pc, #556]	; (8208c <main+0x324>)
   81e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   81e60:	0e9b      	lsrs	r3, r3, #26
   81e62:	f003 0301 	and.w	r3, r3, #1
   81e66:	4a8b      	ldr	r2, [pc, #556]	; (82094 <main+0x32c>)
   81e68:	6013      	str	r3, [r2, #0]
	prev_status_bic=status_bic;
   81e6a:	4b89      	ldr	r3, [pc, #548]	; (82090 <main+0x328>)
   81e6c:	681b      	ldr	r3, [r3, #0]
   81e6e:	4a8a      	ldr	r2, [pc, #552]	; (82098 <main+0x330>)
   81e70:	6013      	str	r3, [r2, #0]
	prev_status_fdbck=status_fdbck;
   81e72:	4b88      	ldr	r3, [pc, #544]	; (82094 <main+0x32c>)
   81e74:	681b      	ldr	r3, [r3, #0]
   81e76:	4a89      	ldr	r2, [pc, #548]	; (8209c <main+0x334>)
   81e78:	6013      	str	r3, [r2, #0]
	uint32_t stepcount = 1312499; // sanjeer - this is original value
   81e7a:	4b89      	ldr	r3, [pc, #548]	; (820a0 <main+0x338>)
   81e7c:	60bb      	str	r3, [r7, #8]
//	uint32_t stepcount = 1351873; // changed to get right cond for clinical trial, need to re fix after adjusting angles again
//		uint32_t stepcount = 797782;
	uint32_t stepcount1 = 6562;
   81e7e:	f641 13a2 	movw	r3, #6562	; 0x19a2
   81e82:	607b      	str	r3, [r7, #4]
	uart_enable_interrupt(UART,UART_SR_RXRDY);
   81e84:	2101      	movs	r1, #1
   81e86:	4887      	ldr	r0, [pc, #540]	; (820a4 <main+0x33c>)
   81e88:	4b87      	ldr	r3, [pc, #540]	; (820a8 <main+0x340>)
   81e8a:	4798      	blx	r3
	
	
	
PIOB->PIO_PER = 1 << 19 ; //TEST
   81e8c:	4b7d      	ldr	r3, [pc, #500]	; (82084 <main+0x31c>)
   81e8e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   81e92:	601a      	str	r2, [r3, #0]
PIOB->PIO_OER = 1 << 19 ; //TEST
   81e94:	4b7b      	ldr	r3, [pc, #492]	; (82084 <main+0x31c>)
   81e96:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   81e9a:	611a      	str	r2, [r3, #16]
	
		
	
	while (FOREVER)
	{
		if(openfillstate != STATE_OPEN_FILL)
   81e9c:	4b83      	ldr	r3, [pc, #524]	; (820ac <main+0x344>)
   81e9e:	781b      	ldrb	r3, [r3, #0]
   81ea0:	2b01      	cmp	r3, #1
   81ea2:	d057      	beq.n	81f54 <main+0x1ec>
		{
			
		
				if(flag_1==0)
   81ea4:	4b82      	ldr	r3, [pc, #520]	; (820b0 <main+0x348>)
   81ea6:	681b      	ldr	r3, [r3, #0]
   81ea8:	2b00      	cmp	r3, #0
   81eaa:	d125      	bne.n	81ef8 <main+0x190>
				{
					status=(((PIOA->PIO_PDSR)>>14)&1);
   81eac:	4b81      	ldr	r3, [pc, #516]	; (820b4 <main+0x34c>)
   81eae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   81eb0:	0b9b      	lsrs	r3, r3, #14
   81eb2:	f003 0301 	and.w	r3, r3, #1
   81eb6:	4a74      	ldr	r2, [pc, #464]	; (82088 <main+0x320>)
   81eb8:	6013      	str	r3, [r2, #0]
					if (status==1 && prev_status ==0)
   81eba:	4b73      	ldr	r3, [pc, #460]	; (82088 <main+0x320>)
   81ebc:	681b      	ldr	r3, [r3, #0]
   81ebe:	2b01      	cmp	r3, #1
   81ec0:	d116      	bne.n	81ef0 <main+0x188>
   81ec2:	4b7d      	ldr	r3, [pc, #500]	; (820b8 <main+0x350>)
   81ec4:	681b      	ldr	r3, [r3, #0]
   81ec6:	2b00      	cmp	r3, #0
   81ec8:	d112      	bne.n	81ef0 <main+0x188>
					{
						dummy_1++;
   81eca:	4b7c      	ldr	r3, [pc, #496]	; (820bc <main+0x354>)
   81ecc:	681b      	ldr	r3, [r3, #0]
   81ece:	3301      	adds	r3, #1
   81ed0:	4a7a      	ldr	r2, [pc, #488]	; (820bc <main+0x354>)
   81ed2:	6013      	str	r3, [r2, #0]
						if (dummy_1==2)
   81ed4:	4b79      	ldr	r3, [pc, #484]	; (820bc <main+0x354>)
   81ed6:	681b      	ldr	r3, [r3, #0]
   81ed8:	2b02      	cmp	r3, #2
   81eda:	d109      	bne.n	81ef0 <main+0x188>
						{
							tc_stop(TC0,0);
   81edc:	2100      	movs	r1, #0
   81ede:	4878      	ldr	r0, [pc, #480]	; (820c0 <main+0x358>)
   81ee0:	4b78      	ldr	r3, [pc, #480]	; (820c4 <main+0x35c>)
   81ee2:	4798      	blx	r3
							dummy_1=0;
   81ee4:	4b75      	ldr	r3, [pc, #468]	; (820bc <main+0x354>)
   81ee6:	2200      	movs	r2, #0
   81ee8:	601a      	str	r2, [r3, #0]
							flag_1=1;
   81eea:	4b71      	ldr	r3, [pc, #452]	; (820b0 <main+0x348>)
   81eec:	2201      	movs	r2, #1
   81eee:	601a      	str	r2, [r3, #0]
						}
				
					}
					prev_status= status;
   81ef0:	4b65      	ldr	r3, [pc, #404]	; (82088 <main+0x320>)
   81ef2:	681b      	ldr	r3, [r3, #0]
   81ef4:	4a70      	ldr	r2, [pc, #448]	; (820b8 <main+0x350>)
   81ef6:	6013      	str	r3, [r2, #0]
				}
				if((flag_1b==0) && (flag_1==1))
   81ef8:	4b73      	ldr	r3, [pc, #460]	; (820c8 <main+0x360>)
   81efa:	681b      	ldr	r3, [r3, #0]
   81efc:	2b00      	cmp	r3, #0
   81efe:	d129      	bne.n	81f54 <main+0x1ec>
   81f00:	4b6b      	ldr	r3, [pc, #428]	; (820b0 <main+0x348>)
   81f02:	681b      	ldr	r3, [r3, #0]
   81f04:	2b01      	cmp	r3, #1
   81f06:	d125      	bne.n	81f54 <main+0x1ec>
				{
			                    
					status_bic=(((PIOA->PIO_PDSR)>>15)&1);
   81f08:	4b6a      	ldr	r3, [pc, #424]	; (820b4 <main+0x34c>)
   81f0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   81f0c:	0bdb      	lsrs	r3, r3, #15
   81f0e:	f003 0301 	and.w	r3, r3, #1
   81f12:	4a5f      	ldr	r2, [pc, #380]	; (82090 <main+0x328>)
   81f14:	6013      	str	r3, [r2, #0]
			
					if (status_bic==1 && prev_status_bic ==0)
   81f16:	4b5e      	ldr	r3, [pc, #376]	; (82090 <main+0x328>)
   81f18:	681b      	ldr	r3, [r3, #0]
   81f1a:	2b01      	cmp	r3, #1
   81f1c:	d116      	bne.n	81f4c <main+0x1e4>
   81f1e:	4b5e      	ldr	r3, [pc, #376]	; (82098 <main+0x330>)
   81f20:	681b      	ldr	r3, [r3, #0]
   81f22:	2b00      	cmp	r3, #0
   81f24:	d112      	bne.n	81f4c <main+0x1e4>
					{
						dummy_1b++;
   81f26:	4b69      	ldr	r3, [pc, #420]	; (820cc <main+0x364>)
   81f28:	681b      	ldr	r3, [r3, #0]
   81f2a:	3301      	adds	r3, #1
   81f2c:	4a67      	ldr	r2, [pc, #412]	; (820cc <main+0x364>)
   81f2e:	6013      	str	r3, [r2, #0]
						if (dummy_1b==2)
   81f30:	4b66      	ldr	r3, [pc, #408]	; (820cc <main+0x364>)
   81f32:	681b      	ldr	r3, [r3, #0]
   81f34:	2b02      	cmp	r3, #2
   81f36:	d109      	bne.n	81f4c <main+0x1e4>
						{
							tc_stop(TC0,1);
   81f38:	2101      	movs	r1, #1
   81f3a:	4861      	ldr	r0, [pc, #388]	; (820c0 <main+0x358>)
   81f3c:	4b61      	ldr	r3, [pc, #388]	; (820c4 <main+0x35c>)
   81f3e:	4798      	blx	r3
							dummy_1b=0;
   81f40:	4b62      	ldr	r3, [pc, #392]	; (820cc <main+0x364>)
   81f42:	2200      	movs	r2, #0
   81f44:	601a      	str	r2, [r3, #0]
							flag_1b=1;
   81f46:	4b60      	ldr	r3, [pc, #384]	; (820c8 <main+0x360>)
   81f48:	2201      	movs	r2, #1
   81f4a:	601a      	str	r2, [r3, #0]
						}
				
					}
					prev_status_bic= status_bic;
   81f4c:	4b50      	ldr	r3, [pc, #320]	; (82090 <main+0x328>)
   81f4e:	681b      	ldr	r3, [r3, #0]
   81f50:	4a51      	ldr	r2, [pc, #324]	; (82098 <main+0x330>)
   81f52:	6013      	str	r3, [r2, #0]
				}
		}
	
		
		if(feedcount_flag == 1)
   81f54:	4b5e      	ldr	r3, [pc, #376]	; (820d0 <main+0x368>)
   81f56:	781b      	ldrb	r3, [r3, #0]
   81f58:	2b01      	cmp	r3, #1
   81f5a:	d135      	bne.n	81fc8 <main+0x260>
		{
			
				status=(((PIOA->PIO_PDSR)>>14)&1);
   81f5c:	4b55      	ldr	r3, [pc, #340]	; (820b4 <main+0x34c>)
   81f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   81f60:	0b9b      	lsrs	r3, r3, #14
   81f62:	f003 0301 	and.w	r3, r3, #1
   81f66:	4a48      	ldr	r2, [pc, #288]	; (82088 <main+0x320>)
   81f68:	6013      	str	r3, [r2, #0]
				if (status==1 && prev_status ==0)
   81f6a:	4b47      	ldr	r3, [pc, #284]	; (82088 <main+0x320>)
   81f6c:	681b      	ldr	r3, [r3, #0]
   81f6e:	2b01      	cmp	r3, #1
   81f70:	d10b      	bne.n	81f8a <main+0x222>
   81f72:	4b51      	ldr	r3, [pc, #324]	; (820b8 <main+0x350>)
   81f74:	681b      	ldr	r3, [r3, #0]
   81f76:	2b00      	cmp	r3, #0
   81f78:	d107      	bne.n	81f8a <main+0x222>
				{
					acid_count++;
   81f7a:	4b56      	ldr	r3, [pc, #344]	; (820d4 <main+0x36c>)
   81f7c:	681b      	ldr	r3, [r3, #0]
   81f7e:	3301      	adds	r3, #1
   81f80:	4a54      	ldr	r2, [pc, #336]	; (820d4 <main+0x36c>)
   81f82:	6013      	str	r3, [r2, #0]
					TC1_cnt = 0;
   81f84:	4b54      	ldr	r3, [pc, #336]	; (820d8 <main+0x370>)
   81f86:	2200      	movs	r2, #0
   81f88:	601a      	str	r2, [r3, #0]
					
				}
				prev_status= status;
   81f8a:	4b3f      	ldr	r3, [pc, #252]	; (82088 <main+0x320>)
   81f8c:	681b      	ldr	r3, [r3, #0]
   81f8e:	4a4a      	ldr	r2, [pc, #296]	; (820b8 <main+0x350>)
   81f90:	6013      	str	r3, [r2, #0]
				
					
					
			
			
				status_bic=(((PIOA->PIO_PDSR)>>15)&1);
   81f92:	4b48      	ldr	r3, [pc, #288]	; (820b4 <main+0x34c>)
   81f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   81f96:	0bdb      	lsrs	r3, r3, #15
   81f98:	f003 0301 	and.w	r3, r3, #1
   81f9c:	4a3c      	ldr	r2, [pc, #240]	; (82090 <main+0x328>)
   81f9e:	6013      	str	r3, [r2, #0]
				
				if (status_bic==1 && prev_status_bic ==0)
   81fa0:	4b3b      	ldr	r3, [pc, #236]	; (82090 <main+0x328>)
   81fa2:	681b      	ldr	r3, [r3, #0]
   81fa4:	2b01      	cmp	r3, #1
   81fa6:	d10b      	bne.n	81fc0 <main+0x258>
   81fa8:	4b3b      	ldr	r3, [pc, #236]	; (82098 <main+0x330>)
   81faa:	681b      	ldr	r3, [r3, #0]
   81fac:	2b00      	cmp	r3, #0
   81fae:	d107      	bne.n	81fc0 <main+0x258>
				{
				 bicarb_count ++;
   81fb0:	4b4a      	ldr	r3, [pc, #296]	; (820dc <main+0x374>)
   81fb2:	681b      	ldr	r3, [r3, #0]
   81fb4:	3301      	adds	r3, #1
   81fb6:	4a49      	ldr	r2, [pc, #292]	; (820dc <main+0x374>)
   81fb8:	6013      	str	r3, [r2, #0]
				 TC2_cnt = 0;
   81fba:	4b49      	ldr	r3, [pc, #292]	; (820e0 <main+0x378>)
   81fbc:	2200      	movs	r2, #0
   81fbe:	601a      	str	r2, [r3, #0]
				 
				}
				prev_status_bic= status_bic;
   81fc0:	4b33      	ldr	r3, [pc, #204]	; (82090 <main+0x328>)
   81fc2:	681b      	ldr	r3, [r3, #0]
   81fc4:	4a34      	ldr	r2, [pc, #208]	; (82098 <main+0x330>)
   81fc6:	6013      	str	r3, [r2, #0]
				
				
				
		}
 		if ((flag_nrmal == 1) && (flag_1 == 1) && (flag_1b == 1))
   81fc8:	4b46      	ldr	r3, [pc, #280]	; (820e4 <main+0x37c>)
   81fca:	781b      	ldrb	r3, [r3, #0]
   81fcc:	b2db      	uxtb	r3, r3
   81fce:	2b01      	cmp	r3, #1
   81fd0:	d124      	bne.n	8201c <main+0x2b4>
   81fd2:	4b37      	ldr	r3, [pc, #220]	; (820b0 <main+0x348>)
   81fd4:	681b      	ldr	r3, [r3, #0]
   81fd6:	2b01      	cmp	r3, #1
   81fd8:	d120      	bne.n	8201c <main+0x2b4>
   81fda:	4b3b      	ldr	r3, [pc, #236]	; (820c8 <main+0x360>)
   81fdc:	681b      	ldr	r3, [r3, #0]
   81fde:	2b01      	cmp	r3, #1
   81fe0:	d11c      	bne.n	8201c <main+0x2b4>
		{
			status_fdbck=(((PIOC->PIO_PDSR)>>26)&1);
   81fe2:	4b2a      	ldr	r3, [pc, #168]	; (8208c <main+0x324>)
   81fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   81fe6:	0e9b      	lsrs	r3, r3, #26
   81fe8:	f003 0301 	and.w	r3, r3, #1
   81fec:	4a29      	ldr	r2, [pc, #164]	; (82094 <main+0x32c>)
   81fee:	6013      	str	r3, [r2, #0]
			
//			if (status_fdbck==0 && prev_status_fdbck ==1)
			if (status_fdbck==1 && prev_status_fdbck ==0)
   81ff0:	4b28      	ldr	r3, [pc, #160]	; (82094 <main+0x32c>)
   81ff2:	681b      	ldr	r3, [r3, #0]
   81ff4:	2b01      	cmp	r3, #1
   81ff6:	d10d      	bne.n	82014 <main+0x2ac>
   81ff8:	4b28      	ldr	r3, [pc, #160]	; (8209c <main+0x334>)
   81ffa:	681b      	ldr	r3, [r3, #0]
   81ffc:	2b00      	cmp	r3, #0
   81ffe:	d109      	bne.n	82014 <main+0x2ac>
			{
				
				//startTimer1(TC0,2,TC2_IRQn,stepcount);
			//	PIOB->PIO_SODR = 1 << 19 ;
				start_acidpump();
   82000:	4b39      	ldr	r3, [pc, #228]	; (820e8 <main+0x380>)
   82002:	4798      	blx	r3
				start_bicarpump();
   82004:	4b39      	ldr	r3, [pc, #228]	; (820ec <main+0x384>)
   82006:	4798      	blx	r3
				//tc_stop(TC0,2);
				startTimer1(TC0,2,TC2_IRQn,stepcount);
   82008:	68bb      	ldr	r3, [r7, #8]
   8200a:	221d      	movs	r2, #29
   8200c:	2102      	movs	r1, #2
   8200e:	482c      	ldr	r0, [pc, #176]	; (820c0 <main+0x358>)
   82010:	4c37      	ldr	r4, [pc, #220]	; (820f0 <main+0x388>)
   82012:	47a0      	blx	r4
			}
			prev_status_fdbck= status_fdbck;
   82014:	4b1f      	ldr	r3, [pc, #124]	; (82094 <main+0x32c>)
   82016:	681b      	ldr	r3, [r3, #0]
   82018:	4a20      	ldr	r2, [pc, #128]	; (8209c <main+0x334>)
   8201a:	6013      	str	r3, [r2, #0]
		}

			switch (state_3)
   8201c:	4b35      	ldr	r3, [pc, #212]	; (820f4 <main+0x38c>)
   8201e:	781b      	ldrb	r3, [r3, #0]
   82020:	2b05      	cmp	r3, #5
   82022:	f63f af3b 	bhi.w	81e9c <main+0x134>
   82026:	a201      	add	r2, pc, #4	; (adr r2, 8202c <main+0x2c4>)
   82028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8202c:	00082045 	.word	0x00082045
   82030:	000820fd 	.word	0x000820fd
   82034:	00081e9d 	.word	0x00081e9d
   82038:	0008205f 	.word	0x0008205f
   8203c:	00082117 	.word	0x00082117
   82040:	0008212d 	.word	0x0008212d
			{
				case IDLE_ACID:
					//printf("acid alignment\n");
					rc = 1000;
   82044:	4b2c      	ldr	r3, [pc, #176]	; (820f8 <main+0x390>)
   82046:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   8204a:	601a      	str	r2, [r3, #0]
					start_acidpump();
   8204c:	4b26      	ldr	r3, [pc, #152]	; (820e8 <main+0x380>)
   8204e:	4798      	blx	r3
					state_3 = ALIGNMENT_ACID;
   82050:	4b28      	ldr	r3, [pc, #160]	; (820f4 <main+0x38c>)
   82052:	2203      	movs	r2, #3
   82054:	701a      	strb	r2, [r3, #0]
					flag_nrmal=0;
   82056:	4b23      	ldr	r3, [pc, #140]	; (820e4 <main+0x37c>)
   82058:	2200      	movs	r2, #0
   8205a:	701a      	strb	r2, [r3, #0]
				break;
   8205c:	e114      	b.n	82288 <main+0x520>
				
				case ALIGNMENT_ACID:
					if (flag_1==1)
   8205e:	4b14      	ldr	r3, [pc, #80]	; (820b0 <main+0x348>)
   82060:	681b      	ldr	r3, [r3, #0]
   82062:	2b01      	cmp	r3, #1
   82064:	d102      	bne.n	8206c <main+0x304>
					{
						//printf("done acid alignment\n");
						state_3 = IDLE_BICAR;
   82066:	4b23      	ldr	r3, [pc, #140]	; (820f4 <main+0x38c>)
   82068:	2201      	movs	r2, #1
   8206a:	701a      	strb	r2, [r3, #0]
					}
					flag_nrmal=0;
   8206c:	4b1d      	ldr	r3, [pc, #116]	; (820e4 <main+0x37c>)
   8206e:	2200      	movs	r2, #0
   82070:	701a      	strb	r2, [r3, #0]
				break;
   82072:	e109      	b.n	82288 <main+0x520>
   82074:	0001869f 	.word	0x0001869f
   82078:	00086778 	.word	0x00086778
   8207c:	00083815 	.word	0x00083815
   82080:	00082fcd 	.word	0x00082fcd
   82084:	400e1000 	.word	0x400e1000
   82088:	20070ce8 	.word	0x20070ce8
   8208c:	400e1200 	.word	0x400e1200
   82090:	20070cec 	.word	0x20070cec
   82094:	20070cf0 	.word	0x20070cf0
   82098:	20070cf4 	.word	0x20070cf4
   8209c:	20070cf8 	.word	0x20070cf8
   820a0:	001406f3 	.word	0x001406f3
   820a4:	400e0800 	.word	0x400e0800
   820a8:	000814b1 	.word	0x000814b1
   820ac:	20070cd0 	.word	0x20070cd0
   820b0:	20070cfc 	.word	0x20070cfc
   820b4:	400e0e00 	.word	0x400e0e00
   820b8:	20070d00 	.word	0x20070d00
   820bc:	20070d04 	.word	0x20070d04
   820c0:	40080000 	.word	0x40080000
   820c4:	00081379 	.word	0x00081379
   820c8:	20070d08 	.word	0x20070d08
   820cc:	20070d0c 	.word	0x20070d0c
   820d0:	20070cd8 	.word	0x20070cd8
   820d4:	20070cdc 	.word	0x20070cdc
   820d8:	20070ca0 	.word	0x20070ca0
   820dc:	20070ce0 	.word	0x20070ce0
   820e0:	20070ca4 	.word	0x20070ca4
   820e4:	20070cd1 	.word	0x20070cd1
   820e8:	000822cd 	.word	0x000822cd
   820ec:	00082379 	.word	0x00082379
   820f0:	0008113d 	.word	0x0008113d
   820f4:	20070400 	.word	0x20070400
   820f8:	20070cd4 	.word	0x20070cd4
				
				case IDLE_BICAR:
					//printf("bicar alignment\n");
					bic_rc = 1000;
   820fc:	4b63      	ldr	r3, [pc, #396]	; (8228c <main+0x524>)
   820fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   82102:	601a      	str	r2, [r3, #0]
					start_bicarpump();
   82104:	4b62      	ldr	r3, [pc, #392]	; (82290 <main+0x528>)
   82106:	4798      	blx	r3
					state_3 = ALIGNMENT_BICAR;
   82108:	4b62      	ldr	r3, [pc, #392]	; (82294 <main+0x52c>)
   8210a:	2204      	movs	r2, #4
   8210c:	701a      	strb	r2, [r3, #0]
					flag_nrmal=0;
   8210e:	4b62      	ldr	r3, [pc, #392]	; (82298 <main+0x530>)
   82110:	2200      	movs	r2, #0
   82112:	701a      	strb	r2, [r3, #0]
				break;
   82114:	e0b8      	b.n	82288 <main+0x520>
				
				case ALIGNMENT_BICAR:
						
					if (flag_1b==1)
   82116:	4b61      	ldr	r3, [pc, #388]	; (8229c <main+0x534>)
   82118:	681b      	ldr	r3, [r3, #0]
   8211a:	2b01      	cmp	r3, #1
   8211c:	d102      	bne.n	82124 <main+0x3bc>
					{
						//printf("Done with bicar alignment\n");
						state_3 = CPU3_STANDBY;
   8211e:	4b5d      	ldr	r3, [pc, #372]	; (82294 <main+0x52c>)
   82120:	2205      	movs	r2, #5
   82122:	701a      	strb	r2, [r3, #0]
					}
					flag_nrmal=0;
   82124:	4b5c      	ldr	r3, [pc, #368]	; (82298 <main+0x530>)
   82126:	2200      	movs	r2, #0
   82128:	701a      	strb	r2, [r3, #0]
				break;
   8212a:	e0ad      	b.n	82288 <main+0x520>
				case CPU3_STANDBY:
	
					if(flag_buff==1)
   8212c:	4b5c      	ldr	r3, [pc, #368]	; (822a0 <main+0x538>)
   8212e:	781b      	ldrb	r3, [r3, #0]
   82130:	b2db      	uxtb	r3, r3
   82132:	2b01      	cmp	r3, #1
   82134:	f47f aeb2 	bne.w	81e9c <main+0x134>
					{
						Master_cpu_command_type dummy;
						dummy=data_buff[0];
   82138:	4b5a      	ldr	r3, [pc, #360]	; (822a4 <main+0x53c>)
   8213a:	781b      	ldrb	r3, [r3, #0]
   8213c:	70fb      	strb	r3, [r7, #3]
						switch (dummy)
   8213e:	78fb      	ldrb	r3, [r7, #3]
   82140:	3b01      	subs	r3, #1
   82142:	2b0c      	cmp	r3, #12
   82144:	f200 8095 	bhi.w	82272 <main+0x50a>
   82148:	a201      	add	r2, pc, #4	; (adr r2, 82150 <main+0x3e8>)
   8214a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8214e:	bf00      	nop
   82150:	000821d7 	.word	0x000821d7
   82154:	00082221 	.word	0x00082221
   82158:	00082261 	.word	0x00082261
   8215c:	000821e5 	.word	0x000821e5
   82160:	000821f7 	.word	0x000821f7
   82164:	00082203 	.word	0x00082203
   82168:	00082215 	.word	0x00082215
   8216c:	0008219d 	.word	0x0008219d
   82170:	000821bf 	.word	0x000821bf
   82174:	00082273 	.word	0x00082273
   82178:	00082273 	.word	0x00082273
   8217c:	00082185 	.word	0x00082185
   82180:	00082191 	.word	0x00082191
						{ 
							case PROP_START_ACID_PUMP:
															rc=210;
   82184:	4b48      	ldr	r3, [pc, #288]	; (822a8 <main+0x540>)
   82186:	22d2      	movs	r2, #210	; 0xd2
   82188:	601a      	str	r2, [r3, #0]
															start_acidpump();
   8218a:	4b48      	ldr	r3, [pc, #288]	; (822ac <main+0x544>)
   8218c:	4798      	blx	r3
							
							break;
   8218e:	e071      	b.n	82274 <main+0x50c>
							
							case PROP_START_BICARB_PUMP:
															bic_rc=210;
   82190:	4b3e      	ldr	r3, [pc, #248]	; (8228c <main+0x524>)
   82192:	22d2      	movs	r2, #210	; 0xd2
   82194:	601a      	str	r2, [r3, #0]
															start_bicarpump();
   82196:	4b3e      	ldr	r3, [pc, #248]	; (82290 <main+0x528>)
   82198:	4798      	blx	r3
							
							break;
   8219a:	e06b      	b.n	82274 <main+0x50c>
							case PROP_START_OPENFILL:
					//		startTimer1(TC0,2,TC2_IRQn,stepcount);
								rc=210;
   8219c:	4b42      	ldr	r3, [pc, #264]	; (822a8 <main+0x540>)
   8219e:	22d2      	movs	r2, #210	; 0xd2
   821a0:	601a      	str	r2, [r3, #0]
								bic_rc=210;
   821a2:	4b3a      	ldr	r3, [pc, #232]	; (8228c <main+0x524>)
   821a4:	22d2      	movs	r2, #210	; 0xd2
   821a6:	601a      	str	r2, [r3, #0]
								start_acidpump();
   821a8:	4b40      	ldr	r3, [pc, #256]	; (822ac <main+0x544>)
   821aa:	4798      	blx	r3
								start_bicarpump();
   821ac:	4b38      	ldr	r3, [pc, #224]	; (82290 <main+0x528>)
   821ae:	4798      	blx	r3
								state_3 =CPU3_STANDBY;
   821b0:	4b38      	ldr	r3, [pc, #224]	; (82294 <main+0x52c>)
   821b2:	2205      	movs	r2, #5
   821b4:	701a      	strb	r2, [r3, #0]
								openfillstate = STATE_OPEN_FILL; 
   821b6:	4b3e      	ldr	r3, [pc, #248]	; (822b0 <main+0x548>)
   821b8:	2201      	movs	r2, #1
   821ba:	701a      	strb	r2, [r3, #0]
							break;
   821bc:	e05a      	b.n	82274 <main+0x50c>
							case PROP_STOP_OPENFILL:
							//printf("stop_openfill\n");
								stop_pump();
   821be:	4b3d      	ldr	r3, [pc, #244]	; (822b4 <main+0x54c>)
   821c0:	4798      	blx	r3
								state_3 =CPU3_STANDBY;
   821c2:	4b34      	ldr	r3, [pc, #208]	; (82294 <main+0x52c>)
   821c4:	2205      	movs	r2, #5
   821c6:	701a      	strb	r2, [r3, #0]
								flag_nrmal=0;
   821c8:	4b33      	ldr	r3, [pc, #204]	; (82298 <main+0x530>)
   821ca:	2200      	movs	r2, #0
   821cc:	701a      	strb	r2, [r3, #0]
								openfillstate = STATE_IDLE;
   821ce:	4b38      	ldr	r3, [pc, #224]	; (822b0 <main+0x548>)
   821d0:	2200      	movs	r2, #0
   821d2:	701a      	strb	r2, [r3, #0]
							break;
   821d4:	e04e      	b.n	82274 <main+0x50c>
							case PROP_START_ALIGMENT:
		//					printf("start_aligment\n");
							flag_nrmal=0;
   821d6:	4b30      	ldr	r3, [pc, #192]	; (82298 <main+0x530>)
   821d8:	2200      	movs	r2, #0
   821da:	701a      	strb	r2, [r3, #0]
								state_3 = IDLE_ACID;
   821dc:	4b2d      	ldr	r3, [pc, #180]	; (82294 <main+0x52c>)
   821de:	2200      	movs	r2, #0
   821e0:	701a      	strb	r2, [r3, #0]
							break;
   821e2:	e047      	b.n	82274 <main+0x50c>
							case PROP_START_DISINFECTION:
								rc=210;
   821e4:	4b30      	ldr	r3, [pc, #192]	; (822a8 <main+0x540>)
   821e6:	22d2      	movs	r2, #210	; 0xd2
   821e8:	601a      	str	r2, [r3, #0]
								start_acidpump();
   821ea:	4b30      	ldr	r3, [pc, #192]	; (822ac <main+0x544>)
   821ec:	4798      	blx	r3
								state_3 = CPU3_STANDBY;
   821ee:	4b29      	ldr	r3, [pc, #164]	; (82294 <main+0x52c>)
   821f0:	2205      	movs	r2, #5
   821f2:	701a      	strb	r2, [r3, #0]
							break;
   821f4:	e03e      	b.n	82274 <main+0x50c>
							case PROP_STOP_DISINFECTION:
								stop_pump();
   821f6:	4b2f      	ldr	r3, [pc, #188]	; (822b4 <main+0x54c>)
   821f8:	4798      	blx	r3
								state_3 = CPU3_STANDBY;
   821fa:	4b26      	ldr	r3, [pc, #152]	; (82294 <main+0x52c>)
   821fc:	2205      	movs	r2, #5
   821fe:	701a      	strb	r2, [r3, #0]
							break;
   82200:	e038      	b.n	82274 <main+0x50c>
							case PROP_START_CITRIC_DISINFECTION:
								bic_rc=210;
   82202:	4b22      	ldr	r3, [pc, #136]	; (8228c <main+0x524>)
   82204:	22d2      	movs	r2, #210	; 0xd2
   82206:	601a      	str	r2, [r3, #0]
								start_bicarpump();
   82208:	4b21      	ldr	r3, [pc, #132]	; (82290 <main+0x528>)
   8220a:	4798      	blx	r3
								state_3 = CPU3_STANDBY;
   8220c:	4b21      	ldr	r3, [pc, #132]	; (82294 <main+0x52c>)
   8220e:	2205      	movs	r2, #5
   82210:	701a      	strb	r2, [r3, #0]
							break;
   82212:	e02f      	b.n	82274 <main+0x50c>
							case PROP_STOP_CITRIC_DISINFECTION:
								stop_pump();
   82214:	4b27      	ldr	r3, [pc, #156]	; (822b4 <main+0x54c>)
   82216:	4798      	blx	r3
								state_3 = CPU3_STANDBY;
   82218:	4b1e      	ldr	r3, [pc, #120]	; (82294 <main+0x52c>)
   8221a:	2205      	movs	r2, #5
   8221c:	701a      	strb	r2, [r3, #0]
							break;
   8221e:	e029      	b.n	82274 <main+0x50c>
							case PROP_START_MIXING:
								switch(User_setConductivity)
   82220:	4b25      	ldr	r3, [pc, #148]	; (822b8 <main+0x550>)
   82222:	881b      	ldrh	r3, [r3, #0]
   82224:	b29b      	uxth	r3, r3
   82226:	2b87      	cmp	r3, #135	; 0x87
   82228:	d106      	bne.n	82238 <main+0x4d0>
									{
										case 135:
											rc= 210;
   8222a:	4b1f      	ldr	r3, [pc, #124]	; (822a8 <main+0x540>)
   8222c:	22d2      	movs	r2, #210	; 0xd2
   8222e:	601a      	str	r2, [r3, #0]
											bic_rc = 210;
   82230:	4b16      	ldr	r3, [pc, #88]	; (8228c <main+0x524>)
   82232:	22d2      	movs	r2, #210	; 0xd2
   82234:	601a      	str	r2, [r3, #0]
										break;
   82236:	bf00      	nop
// 											bic_rc = 163;
// 										break;				
														
									}
						
							feedcount_flag = 1; // test - to be removed
   82238:	4b20      	ldr	r3, [pc, #128]	; (822bc <main+0x554>)
   8223a:	2201      	movs	r2, #1
   8223c:	701a      	strb	r2, [r3, #0]
							startTimer1(TC0,2,TC2_IRQn,stepcount);
   8223e:	68bb      	ldr	r3, [r7, #8]
   82240:	221d      	movs	r2, #29
   82242:	2102      	movs	r1, #2
   82244:	481e      	ldr	r0, [pc, #120]	; (822c0 <main+0x558>)
   82246:	4c1f      	ldr	r4, [pc, #124]	; (822c4 <main+0x55c>)
   82248:	47a0      	blx	r4
								//rc=184;
								//bic_rc=184;
// 								rc=195;   //273, 205 = 4 rotations per sec, 164 = 5rps, 136 =6 rps, 195 = 4.2 rps
// 								bic_rc=195;   
						
								start_acidpump();
   8224a:	4b18      	ldr	r3, [pc, #96]	; (822ac <main+0x544>)
   8224c:	4798      	blx	r3
								start_bicarpump();
   8224e:	4b10      	ldr	r3, [pc, #64]	; (82290 <main+0x528>)
   82250:	4798      	blx	r3
								flag_nrmal=1;
   82252:	4b11      	ldr	r3, [pc, #68]	; (82298 <main+0x530>)
   82254:	2201      	movs	r2, #1
   82256:	701a      	strb	r2, [r3, #0]
								state_3 = CPU3_STANDBY;
   82258:	4b0e      	ldr	r3, [pc, #56]	; (82294 <main+0x52c>)
   8225a:	2205      	movs	r2, #5
   8225c:	701a      	strb	r2, [r3, #0]
							break;
   8225e:	e009      	b.n	82274 <main+0x50c>
							case PROP_STOP_MIXING:
								//printf("stop\n");
								stop_pump();
   82260:	4b14      	ldr	r3, [pc, #80]	; (822b4 <main+0x54c>)
   82262:	4798      	blx	r3
								state_3 =CPU3_STANDBY;
   82264:	4b0b      	ldr	r3, [pc, #44]	; (82294 <main+0x52c>)
   82266:	2205      	movs	r2, #5
   82268:	701a      	strb	r2, [r3, #0]
								flag_nrmal=0;
   8226a:	4b0b      	ldr	r3, [pc, #44]	; (82298 <main+0x530>)
   8226c:	2200      	movs	r2, #0
   8226e:	701a      	strb	r2, [r3, #0]
							break;
   82270:	e000      	b.n	82274 <main+0x50c>
								count_start = 0;
								count_stop = 0;*/
							
							break;
						default:
							break;
   82272:	bf00      	nop
						}
						
					data_buff[0] = (uint8_t)0;
   82274:	4b0b      	ldr	r3, [pc, #44]	; (822a4 <main+0x53c>)
   82276:	2200      	movs	r2, #0
   82278:	701a      	strb	r2, [r3, #0]
					flag_buff = 0;
   8227a:	4b09      	ldr	r3, [pc, #36]	; (822a0 <main+0x538>)
   8227c:	2200      	movs	r2, #0
   8227e:	701a      	strb	r2, [r3, #0]
					data_count = 0;
   82280:	4b11      	ldr	r3, [pc, #68]	; (822c8 <main+0x560>)
   82282:	2200      	movs	r2, #0
   82284:	601a      	str	r2, [r3, #0]
				break;
   82286:	bf00      	nop
				break;
			}
		}*/
	}
 	}
	}
   82288:	e608      	b.n	81e9c <main+0x134>
   8228a:	bf00      	nop
   8228c:	20071208 	.word	0x20071208
   82290:	00082379 	.word	0x00082379
   82294:	20070400 	.word	0x20070400
   82298:	20070cd1 	.word	0x20070cd1
   8229c:	20070d08 	.word	0x20070d08
   822a0:	20070dec 	.word	0x20070dec
   822a4:	20070c94 	.word	0x20070c94
   822a8:	20070cd4 	.word	0x20070cd4
   822ac:	000822cd 	.word	0x000822cd
   822b0:	20070cd0 	.word	0x20070cd0
   822b4:	00082419 	.word	0x00082419
   822b8:	20070dc6 	.word	0x20070dc6
   822bc:	20070cd8 	.word	0x20070cd8
   822c0:	40080000 	.word	0x40080000
   822c4:	0008113d 	.word	0x0008113d
   822c8:	20070c8e 	.word	0x20070c8e

000822cc <start_acidpump>:
	}
	
void start_acidpump()
{
   822cc:	b598      	push	{r3, r4, r7, lr}
   822ce:	af00      	add	r7, sp, #0
	PIOA->PIO_CODR  = 0x00180000;				// brake clear
   822d0:	4b1f      	ldr	r3, [pc, #124]	; (82350 <start_acidpump+0x84>)
   822d2:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
   822d6:	635a      	str	r2, [r3, #52]	; 0x34
	PIOD->PIO_PER   = 0x00000003;
   822d8:	4b1e      	ldr	r3, [pc, #120]	; (82354 <start_acidpump+0x88>)
   822da:	2203      	movs	r2, #3
   822dc:	601a      	str	r2, [r3, #0]
	PIOC->PIO_PER  = 0x000001FE;
   822de:	4b1e      	ldr	r3, [pc, #120]	; (82358 <start_acidpump+0x8c>)
   822e0:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
   822e4:	601a      	str	r2, [r3, #0]
	PIOD->PIO_WPMR	= 0x50494F00;
   822e6:	4b1b      	ldr	r3, [pc, #108]	; (82354 <start_acidpump+0x88>)
   822e8:	4a1c      	ldr	r2, [pc, #112]	; (8235c <start_acidpump+0x90>)
   822ea:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOC->PIO_WPMR  = 0x50494F00;
   822ee:	4b1a      	ldr	r3, [pc, #104]	; (82358 <start_acidpump+0x8c>)
   822f0:	4a1a      	ldr	r2, [pc, #104]	; (8235c <start_acidpump+0x90>)
   822f2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOD->PIO_OWER  = 0x00000003;
   822f6:	4b17      	ldr	r3, [pc, #92]	; (82354 <start_acidpump+0x88>)
   822f8:	2203      	movs	r2, #3
   822fa:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	PIOD->PIO_OWDR  = 0x0000000C;
   822fe:	4b15      	ldr	r3, [pc, #84]	; (82354 <start_acidpump+0x88>)
   82300:	220c      	movs	r2, #12
   82302:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	PIOC->PIO_OWER  = 0x000001FE;
   82306:	4b14      	ldr	r3, [pc, #80]	; (82358 <start_acidpump+0x8c>)
   82308:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
   8230c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	PIOC->PIO_OWDR  = 0x000FF000;
   82310:	4b11      	ldr	r3, [pc, #68]	; (82358 <start_acidpump+0x8c>)
   82312:	f44f 227f 	mov.w	r2, #1044480	; 0xff000
   82316:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	
	PIOD->PIO_ODSR = array_acid[count].dir;
   8231a:	4a0e      	ldr	r2, [pc, #56]	; (82354 <start_acidpump+0x88>)
   8231c:	4b10      	ldr	r3, [pc, #64]	; (82360 <start_acidpump+0x94>)
   8231e:	681b      	ldr	r3, [r3, #0]
   82320:	4910      	ldr	r1, [pc, #64]	; (82364 <start_acidpump+0x98>)
   82322:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
   82326:	6393      	str	r3, [r2, #56]	; 0x38
	PIOC->PIO_ODSR = array_acid[count].AB;
   82328:	4a0b      	ldr	r2, [pc, #44]	; (82358 <start_acidpump+0x8c>)
   8232a:	4b0d      	ldr	r3, [pc, #52]	; (82360 <start_acidpump+0x94>)
   8232c:	681b      	ldr	r3, [r3, #0]
   8232e:	490d      	ldr	r1, [pc, #52]	; (82364 <start_acidpump+0x98>)
   82330:	00db      	lsls	r3, r3, #3
   82332:	440b      	add	r3, r1
   82334:	685b      	ldr	r3, [r3, #4]
   82336:	6393      	str	r3, [r2, #56]	; 0x38
	
	cpu3_sv_cntrl_activatepump(ACID_PUMP);
   82338:	2001      	movs	r0, #1
   8233a:	4b0b      	ldr	r3, [pc, #44]	; (82368 <start_acidpump+0x9c>)
   8233c:	4798      	blx	r3
	acid_startTimer1(TC0,0,TC0_IRQn,rc);	
   8233e:	4b0b      	ldr	r3, [pc, #44]	; (8236c <start_acidpump+0xa0>)
   82340:	681b      	ldr	r3, [r3, #0]
   82342:	221b      	movs	r2, #27
   82344:	2100      	movs	r1, #0
   82346:	480a      	ldr	r0, [pc, #40]	; (82370 <start_acidpump+0xa4>)
   82348:	4c0a      	ldr	r4, [pc, #40]	; (82374 <start_acidpump+0xa8>)
   8234a:	47a0      	blx	r4
}
   8234c:	bf00      	nop
   8234e:	bd98      	pop	{r3, r4, r7, pc}
   82350:	400e0e00 	.word	0x400e0e00
   82354:	400e1400 	.word	0x400e1400
   82358:	400e1200 	.word	0x400e1200
   8235c:	50494f00 	.word	0x50494f00
   82360:	20070cc8 	.word	0x20070cc8
   82364:	20070000 	.word	0x20070000
   82368:	000811b1 	.word	0x000811b1
   8236c:	20070cd4 	.word	0x20070cd4
   82370:	40080000 	.word	0x40080000
   82374:	0008105d 	.word	0x0008105d

00082378 <start_bicarpump>:

void start_bicarpump()
{
   82378:	b598      	push	{r3, r4, r7, lr}
   8237a:	af00      	add	r7, sp, #0
	//printf("start bicar pump\n");
		//cpu3_sv_cntrl_deactivate_pin(BICARBONATE_VALVE);
		PIOD->PIO_WPMR	= 0x50494F00;
   8237c:	4b1c      	ldr	r3, [pc, #112]	; (823f0 <start_bicarpump+0x78>)
   8237e:	4a1d      	ldr	r2, [pc, #116]	; (823f4 <start_bicarpump+0x7c>)
   82380:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
		PIOC->PIO_WPMR  = 0x50494F00;
   82384:	4b1c      	ldr	r3, [pc, #112]	; (823f8 <start_bicarpump+0x80>)
   82386:	4a1b      	ldr	r2, [pc, #108]	; (823f4 <start_bicarpump+0x7c>)
   82388:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
		PIOD->PIO_OWER  = 0x0000000C;
   8238c:	4b18      	ldr	r3, [pc, #96]	; (823f0 <start_bicarpump+0x78>)
   8238e:	220c      	movs	r2, #12
   82390:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		PIOD->PIO_OWDR = 0x000000003;
   82394:	4b16      	ldr	r3, [pc, #88]	; (823f0 <start_bicarpump+0x78>)
   82396:	2203      	movs	r2, #3
   82398:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		PIOC->PIO_OWER  = 0x000FF000;
   8239c:	4b16      	ldr	r3, [pc, #88]	; (823f8 <start_bicarpump+0x80>)
   8239e:	f44f 227f 	mov.w	r2, #1044480	; 0xff000
   823a2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		PIOC->PIO_OWDR  = 0x000001FE;
   823a6:	4b14      	ldr	r3, [pc, #80]	; (823f8 <start_bicarpump+0x80>)
   823a8:	f44f 72ff 	mov.w	r2, #510	; 0x1fe
   823ac:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		PIOB->PIO_CODR  = 0x00204000;			// brake clear
   823b0:	4b12      	ldr	r3, [pc, #72]	; (823fc <start_bicarpump+0x84>)
   823b2:	f44f 1201 	mov.w	r2, #2113536	; 0x204000
   823b6:	635a      	str	r2, [r3, #52]	; 0x34
		
		PIOD->PIO_ODSR = array_bicar[count1].dir;
   823b8:	4a0d      	ldr	r2, [pc, #52]	; (823f0 <start_bicarpump+0x78>)
   823ba:	4b11      	ldr	r3, [pc, #68]	; (82400 <start_bicarpump+0x88>)
   823bc:	681b      	ldr	r3, [r3, #0]
   823be:	4911      	ldr	r1, [pc, #68]	; (82404 <start_bicarpump+0x8c>)
   823c0:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
   823c4:	6393      	str	r3, [r2, #56]	; 0x38
		PIOC->PIO_ODSR = array_bicar[count1].AB;
   823c6:	4a0c      	ldr	r2, [pc, #48]	; (823f8 <start_bicarpump+0x80>)
   823c8:	4b0d      	ldr	r3, [pc, #52]	; (82400 <start_bicarpump+0x88>)
   823ca:	681b      	ldr	r3, [r3, #0]
   823cc:	490d      	ldr	r1, [pc, #52]	; (82404 <start_bicarpump+0x8c>)
   823ce:	00db      	lsls	r3, r3, #3
   823d0:	440b      	add	r3, r1
   823d2:	685b      	ldr	r3, [r3, #4]
   823d4:	6393      	str	r3, [r2, #56]	; 0x38
		
		cpu3_sv_cntrl_activatepump(BICAR_PUMP);
   823d6:	2002      	movs	r0, #2
   823d8:	4b0b      	ldr	r3, [pc, #44]	; (82408 <start_bicarpump+0x90>)
   823da:	4798      	blx	r3
		bicar_startTimer1(TC0,1,TC1_IRQn,bic_rc);
   823dc:	4b0b      	ldr	r3, [pc, #44]	; (8240c <start_bicarpump+0x94>)
   823de:	681b      	ldr	r3, [r3, #0]
   823e0:	221c      	movs	r2, #28
   823e2:	2101      	movs	r1, #1
   823e4:	480a      	ldr	r0, [pc, #40]	; (82410 <start_bicarpump+0x98>)
   823e6:	4c0b      	ldr	r4, [pc, #44]	; (82414 <start_bicarpump+0x9c>)
   823e8:	47a0      	blx	r4
}
   823ea:	bf00      	nop
   823ec:	bd98      	pop	{r3, r4, r7, pc}
   823ee:	bf00      	nop
   823f0:	400e1400 	.word	0x400e1400
   823f4:	50494f00 	.word	0x50494f00
   823f8:	400e1200 	.word	0x400e1200
   823fc:	400e1000 	.word	0x400e1000
   82400:	20070ccc 	.word	0x20070ccc
   82404:	20070200 	.word	0x20070200
   82408:	000811b1 	.word	0x000811b1
   8240c:	20071208 	.word	0x20071208
   82410:	40080000 	.word	0x40080000
   82414:	000810cd 	.word	0x000810cd

00082418 <stop_pump>:

void stop_pump()
{
   82418:	b580      	push	{r7, lr}
   8241a:	af00      	add	r7, sp, #0
	CPU3_S_STOP_TIMER(0);
   8241c:	2000      	movs	r0, #0
   8241e:	4b06      	ldr	r3, [pc, #24]	; (82438 <stop_pump+0x20>)
   82420:	4798      	blx	r3
	CPU3_S_STOP_TIMER(1);
   82422:	2001      	movs	r0, #1
   82424:	4b04      	ldr	r3, [pc, #16]	; (82438 <stop_pump+0x20>)
   82426:	4798      	blx	r3
	CPU3_S_STOP_TIMER(3);
   82428:	2003      	movs	r0, #3
   8242a:	4b03      	ldr	r3, [pc, #12]	; (82438 <stop_pump+0x20>)
   8242c:	4798      	blx	r3
	CPU3_S_STOP_TIMER(4);
   8242e:	2004      	movs	r0, #4
   82430:	4b01      	ldr	r3, [pc, #4]	; (82438 <stop_pump+0x20>)
   82432:	4798      	blx	r3
}
   82434:	bf00      	nop
   82436:	bd80      	pop	{r7, pc}
   82438:	00081241 	.word	0x00081241

0008243c <osc_enable>:
#define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
   8243c:	b580      	push	{r7, lr}
   8243e:	b082      	sub	sp, #8
   82440:	af00      	add	r7, sp, #0
   82442:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   82444:	687b      	ldr	r3, [r7, #4]
   82446:	2b07      	cmp	r3, #7
   82448:	d831      	bhi.n	824ae <osc_enable+0x72>
   8244a:	a201      	add	r2, pc, #4	; (adr r2, 82450 <osc_enable+0x14>)
   8244c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   82450:	000824ad 	.word	0x000824ad
   82454:	00082471 	.word	0x00082471
   82458:	00082479 	.word	0x00082479
   8245c:	00082481 	.word	0x00082481
   82460:	00082489 	.word	0x00082489
   82464:	00082491 	.word	0x00082491
   82468:	00082499 	.word	0x00082499
   8246c:	000824a3 	.word	0x000824a3
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   82470:	2000      	movs	r0, #0
   82472:	4b11      	ldr	r3, [pc, #68]	; (824b8 <osc_enable+0x7c>)
   82474:	4798      	blx	r3
		break;
   82476:	e01a      	b.n	824ae <osc_enable+0x72>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   82478:	2001      	movs	r0, #1
   8247a:	4b0f      	ldr	r3, [pc, #60]	; (824b8 <osc_enable+0x7c>)
   8247c:	4798      	blx	r3
		break;
   8247e:	e016      	b.n	824ae <osc_enable+0x72>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   82480:	2000      	movs	r0, #0
   82482:	4b0e      	ldr	r3, [pc, #56]	; (824bc <osc_enable+0x80>)
   82484:	4798      	blx	r3
		break;
   82486:	e012      	b.n	824ae <osc_enable+0x72>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   82488:	2010      	movs	r0, #16
   8248a:	4b0c      	ldr	r3, [pc, #48]	; (824bc <osc_enable+0x80>)
   8248c:	4798      	blx	r3
		break;
   8248e:	e00e      	b.n	824ae <osc_enable+0x72>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   82490:	2020      	movs	r0, #32
   82492:	4b0a      	ldr	r3, [pc, #40]	; (824bc <osc_enable+0x80>)
   82494:	4798      	blx	r3
		break;
   82496:	e00a      	b.n	824ae <osc_enable+0x72>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   82498:	213e      	movs	r1, #62	; 0x3e
   8249a:	2000      	movs	r0, #0
   8249c:	4b08      	ldr	r3, [pc, #32]	; (824c0 <osc_enable+0x84>)
   8249e:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
   824a0:	e005      	b.n	824ae <osc_enable+0x72>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
   824a2:	213e      	movs	r1, #62	; 0x3e
   824a4:	2001      	movs	r0, #1
   824a6:	4b06      	ldr	r3, [pc, #24]	; (824c0 <osc_enable+0x84>)
   824a8:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
   824aa:	e000      	b.n	824ae <osc_enable+0x72>

static inline void osc_enable(uint32_t ul_id)
{
	switch (ul_id) {
	case OSC_SLCK_32K_RC:
		break;
   824ac:	bf00      	nop
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
	}
}
   824ae:	bf00      	nop
   824b0:	3708      	adds	r7, #8
   824b2:	46bd      	mov	sp, r7
   824b4:	bd80      	pop	{r7, pc}
   824b6:	bf00      	nop
   824b8:	00082de9 	.word	0x00082de9
   824bc:	00082e55 	.word	0x00082e55
   824c0:	00082ef5 	.word	0x00082ef5

000824c4 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
   824c4:	b580      	push	{r7, lr}
   824c6:	b082      	sub	sp, #8
   824c8:	af00      	add	r7, sp, #0
   824ca:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   824cc:	687b      	ldr	r3, [r7, #4]
   824ce:	2b07      	cmp	r3, #7
   824d0:	d826      	bhi.n	82520 <osc_is_ready+0x5c>
   824d2:	a201      	add	r2, pc, #4	; (adr r2, 824d8 <osc_is_ready+0x14>)
   824d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   824d8:	000824f9 	.word	0x000824f9
   824dc:	000824fd 	.word	0x000824fd
   824e0:	000824fd 	.word	0x000824fd
   824e4:	0008250f 	.word	0x0008250f
   824e8:	0008250f 	.word	0x0008250f
   824ec:	0008250f 	.word	0x0008250f
   824f0:	0008250f 	.word	0x0008250f
   824f4:	0008250f 	.word	0x0008250f
	case OSC_SLCK_32K_RC:
		return 1;
   824f8:	2301      	movs	r3, #1
   824fa:	e012      	b.n	82522 <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
   824fc:	4b0b      	ldr	r3, [pc, #44]	; (8252c <osc_is_ready+0x68>)
   824fe:	4798      	blx	r3
   82500:	4603      	mov	r3, r0
   82502:	2b00      	cmp	r3, #0
   82504:	bf14      	ite	ne
   82506:	2301      	movne	r3, #1
   82508:	2300      	moveq	r3, #0
   8250a:	b2db      	uxtb	r3, r3
   8250c:	e009      	b.n	82522 <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   8250e:	4b08      	ldr	r3, [pc, #32]	; (82530 <osc_is_ready+0x6c>)
   82510:	4798      	blx	r3
   82512:	4603      	mov	r3, r0
   82514:	2b00      	cmp	r3, #0
   82516:	bf14      	ite	ne
   82518:	2301      	movne	r3, #1
   8251a:	2300      	moveq	r3, #0
   8251c:	b2db      	uxtb	r3, r3
   8251e:	e000      	b.n	82522 <osc_is_ready+0x5e>
	}

	return 0;
   82520:	2300      	movs	r3, #0
}
   82522:	4618      	mov	r0, r3
   82524:	3708      	adds	r7, #8
   82526:	46bd      	mov	sp, r7
   82528:	bd80      	pop	{r7, pc}
   8252a:	bf00      	nop
   8252c:	00082e21 	.word	0x00082e21
   82530:	00082f6d 	.word	0x00082f6d

00082534 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   82534:	b480      	push	{r7}
   82536:	b083      	sub	sp, #12
   82538:	af00      	add	r7, sp, #0
   8253a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   8253c:	687b      	ldr	r3, [r7, #4]
   8253e:	2b07      	cmp	r3, #7
   82540:	d825      	bhi.n	8258e <osc_get_rate+0x5a>
   82542:	a201      	add	r2, pc, #4	; (adr r2, 82548 <osc_get_rate+0x14>)
   82544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   82548:	00082569 	.word	0x00082569
   8254c:	0008256f 	.word	0x0008256f
   82550:	00082575 	.word	0x00082575
   82554:	0008257b 	.word	0x0008257b
   82558:	0008257f 	.word	0x0008257f
   8255c:	00082583 	.word	0x00082583
   82560:	00082587 	.word	0x00082587
   82564:	0008258b 	.word	0x0008258b
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   82568:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   8256c:	e010      	b.n	82590 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   8256e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   82572:	e00d      	b.n	82590 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   82574:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   82578:	e00a      	b.n	82590 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   8257a:	4b08      	ldr	r3, [pc, #32]	; (8259c <osc_get_rate+0x68>)
   8257c:	e008      	b.n	82590 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   8257e:	4b08      	ldr	r3, [pc, #32]	; (825a0 <osc_get_rate+0x6c>)
   82580:	e006      	b.n	82590 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   82582:	4b08      	ldr	r3, [pc, #32]	; (825a4 <osc_get_rate+0x70>)
   82584:	e004      	b.n	82590 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   82586:	4b07      	ldr	r3, [pc, #28]	; (825a4 <osc_get_rate+0x70>)
   82588:	e002      	b.n	82590 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   8258a:	4b06      	ldr	r3, [pc, #24]	; (825a4 <osc_get_rate+0x70>)
   8258c:	e000      	b.n	82590 <osc_get_rate+0x5c>
#endif
	}

	return 0;
   8258e:	2300      	movs	r3, #0
}
   82590:	4618      	mov	r0, r3
   82592:	370c      	adds	r7, #12
   82594:	46bd      	mov	sp, r7
   82596:	bc80      	pop	{r7}
   82598:	4770      	bx	lr
   8259a:	bf00      	nop
   8259c:	003d0900 	.word	0x003d0900
   825a0:	007a1200 	.word	0x007a1200
   825a4:	00b71b00 	.word	0x00b71b00

000825a8 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
   825a8:	b580      	push	{r7, lr}
   825aa:	b082      	sub	sp, #8
   825ac:	af00      	add	r7, sp, #0
   825ae:	4603      	mov	r3, r0
   825b0:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   825b2:	bf00      	nop
   825b4:	79fb      	ldrb	r3, [r7, #7]
   825b6:	4618      	mov	r0, r3
   825b8:	4b05      	ldr	r3, [pc, #20]	; (825d0 <osc_wait_ready+0x28>)
   825ba:	4798      	blx	r3
   825bc:	4603      	mov	r3, r0
   825be:	f083 0301 	eor.w	r3, r3, #1
   825c2:	b2db      	uxtb	r3, r3
   825c4:	2b00      	cmp	r3, #0
   825c6:	d1f5      	bne.n	825b4 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
   825c8:	bf00      	nop
   825ca:	3708      	adds	r7, #8
   825cc:	46bd      	mov	sp, r7
   825ce:	bd80      	pop	{r7, pc}
   825d0:	000824c5 	.word	0x000824c5

000825d4 <pll_config_init>:
 * \note The SAM3X PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
   825d4:	b580      	push	{r7, lr}
   825d6:	b086      	sub	sp, #24
   825d8:	af00      	add	r7, sp, #0
   825da:	60f8      	str	r0, [r7, #12]
   825dc:	607a      	str	r2, [r7, #4]
   825de:	603b      	str	r3, [r7, #0]
   825e0:	460b      	mov	r3, r1
   825e2:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
   825e4:	687b      	ldr	r3, [r7, #4]
   825e6:	2b00      	cmp	r3, #0
   825e8:	d107      	bne.n	825fa <pll_config_init+0x26>
   825ea:	683b      	ldr	r3, [r7, #0]
   825ec:	2b00      	cmp	r3, #0
   825ee:	d104      	bne.n	825fa <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
   825f0:	68fb      	ldr	r3, [r7, #12]
   825f2:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   825f6:	601a      	str	r2, [r3, #0]
   825f8:	e019      	b.n	8262e <pll_config_init+0x5a>
	} else { /* PLLA */
		/* Calculate internal VCO frequency */
		vco_hz = osc_get_rate(e_src) / ul_div;
   825fa:	7afb      	ldrb	r3, [r7, #11]
   825fc:	4618      	mov	r0, r3
   825fe:	4b0e      	ldr	r3, [pc, #56]	; (82638 <pll_config_init+0x64>)
   82600:	4798      	blx	r3
   82602:	4602      	mov	r2, r0
   82604:	687b      	ldr	r3, [r7, #4]
   82606:	fbb2 f3f3 	udiv	r3, r2, r3
   8260a:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_INPUT_MIN_HZ);
		Assert(vco_hz <= PLL_INPUT_MAX_HZ);

		vco_hz *= ul_mul;
   8260c:	697b      	ldr	r3, [r7, #20]
   8260e:	683a      	ldr	r2, [r7, #0]
   82610:	fb02 f303 	mul.w	r3, r2, r3
   82614:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
		Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

		/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
   82616:	683b      	ldr	r3, [r7, #0]
   82618:	3b01      	subs	r3, #1
   8261a:	041a      	lsls	r2, r3, #16
   8261c:	4b07      	ldr	r3, [pc, #28]	; (8263c <pll_config_init+0x68>)
   8261e:	4013      	ands	r3, r2
   82620:	687a      	ldr	r2, [r7, #4]
   82622:	b2d2      	uxtb	r2, r2
   82624:	4313      	orrs	r3, r2
   82626:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
   8262a:	68fb      	ldr	r3, [r7, #12]
   8262c:	601a      	str	r2, [r3, #0]
	}
}
   8262e:	bf00      	nop
   82630:	3718      	adds	r7, #24
   82632:	46bd      	mov	sp, r7
   82634:	bd80      	pop	{r7, pc}
   82636:	bf00      	nop
   82638:	00082535 	.word	0x00082535
   8263c:	07ff0000 	.word	0x07ff0000

00082640 <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
   82640:	b580      	push	{r7, lr}
   82642:	b082      	sub	sp, #8
   82644:	af00      	add	r7, sp, #0
   82646:	6078      	str	r0, [r7, #4]
   82648:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   8264a:	683b      	ldr	r3, [r7, #0]
   8264c:	2b00      	cmp	r3, #0
   8264e:	d108      	bne.n	82662 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
   82650:	4b09      	ldr	r3, [pc, #36]	; (82678 <pll_enable+0x38>)
   82652:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   82654:	4a09      	ldr	r2, [pc, #36]	; (8267c <pll_enable+0x3c>)
   82656:	687b      	ldr	r3, [r7, #4]
   82658:	681b      	ldr	r3, [r3, #0]
   8265a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   8265e:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
   82660:	e005      	b.n	8266e <pll_enable+0x2e>

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   82662:	4a06      	ldr	r2, [pc, #24]	; (8267c <pll_enable+0x3c>)
   82664:	687b      	ldr	r3, [r7, #4]
   82666:	681b      	ldr	r3, [r3, #0]
   82668:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   8266c:	61d3      	str	r3, [r2, #28]
	}
}
   8266e:	bf00      	nop
   82670:	3708      	adds	r7, #8
   82672:	46bd      	mov	sp, r7
   82674:	bd80      	pop	{r7, pc}
   82676:	bf00      	nop
   82678:	00082f85 	.word	0x00082f85
   8267c:	400e0600 	.word	0x400e0600

00082680 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
   82680:	b580      	push	{r7, lr}
   82682:	b082      	sub	sp, #8
   82684:	af00      	add	r7, sp, #0
   82686:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   82688:	687b      	ldr	r3, [r7, #4]
   8268a:	2b00      	cmp	r3, #0
   8268c:	d103      	bne.n	82696 <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
   8268e:	4b05      	ldr	r3, [pc, #20]	; (826a4 <pll_is_locked+0x24>)
   82690:	4798      	blx	r3
   82692:	4603      	mov	r3, r0
   82694:	e002      	b.n	8269c <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
   82696:	4b04      	ldr	r3, [pc, #16]	; (826a8 <pll_is_locked+0x28>)
   82698:	4798      	blx	r3
   8269a:	4603      	mov	r3, r0
	}
}
   8269c:	4618      	mov	r0, r3
   8269e:	3708      	adds	r7, #8
   826a0:	46bd      	mov	sp, r7
   826a2:	bd80      	pop	{r7, pc}
   826a4:	00082f9d 	.word	0x00082f9d
   826a8:	00082fb5 	.word	0x00082fb5

000826ac <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
   826ac:	b580      	push	{r7, lr}
   826ae:	b082      	sub	sp, #8
   826b0:	af00      	add	r7, sp, #0
   826b2:	4603      	mov	r3, r0
   826b4:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   826b6:	79fb      	ldrb	r3, [r7, #7]
   826b8:	3b03      	subs	r3, #3
   826ba:	2b04      	cmp	r3, #4
   826bc:	d808      	bhi.n	826d0 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
   826be:	79fb      	ldrb	r3, [r7, #7]
   826c0:	4618      	mov	r0, r3
   826c2:	4b06      	ldr	r3, [pc, #24]	; (826dc <pll_enable_source+0x30>)
   826c4:	4798      	blx	r3
		osc_wait_ready(e_src);
   826c6:	79fb      	ldrb	r3, [r7, #7]
   826c8:	4618      	mov	r0, r3
   826ca:	4b05      	ldr	r3, [pc, #20]	; (826e0 <pll_enable_source+0x34>)
   826cc:	4798      	blx	r3
		break;
   826ce:	e000      	b.n	826d2 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
   826d0:	bf00      	nop
	}
}
   826d2:	bf00      	nop
   826d4:	3708      	adds	r7, #8
   826d6:	46bd      	mov	sp, r7
   826d8:	bd80      	pop	{r7, pc}
   826da:	bf00      	nop
   826dc:	0008243d 	.word	0x0008243d
   826e0:	000825a9 	.word	0x000825a9

000826e4 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
   826e4:	b580      	push	{r7, lr}
   826e6:	b082      	sub	sp, #8
   826e8:	af00      	add	r7, sp, #0
   826ea:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   826ec:	bf00      	nop
   826ee:	6878      	ldr	r0, [r7, #4]
   826f0:	4b04      	ldr	r3, [pc, #16]	; (82704 <pll_wait_for_lock+0x20>)
   826f2:	4798      	blx	r3
   826f4:	4603      	mov	r3, r0
   826f6:	2b00      	cmp	r3, #0
   826f8:	d0f9      	beq.n	826ee <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
   826fa:	2300      	movs	r3, #0
}
   826fc:	4618      	mov	r0, r3
   826fe:	3708      	adds	r7, #8
   82700:	46bd      	mov	sp, r7
   82702:	bd80      	pop	{r7, pc}
   82704:	00082681 	.word	0x00082681

00082708 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   82708:	b580      	push	{r7, lr}
   8270a:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   8270c:	2006      	movs	r0, #6
   8270e:	4b04      	ldr	r3, [pc, #16]	; (82720 <sysclk_get_main_hz+0x18>)
   82710:	4798      	blx	r3
   82712:	4602      	mov	r2, r0
   82714:	4613      	mov	r3, r2
   82716:	00db      	lsls	r3, r3, #3
   82718:	1a9b      	subs	r3, r3, r2
   8271a:	005b      	lsls	r3, r3, #1
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   8271c:	4618      	mov	r0, r3
   8271e:	bd80      	pop	{r7, pc}
   82720:	00082535 	.word	0x00082535

00082724 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   82724:	b580      	push	{r7, lr}
   82726:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   82728:	4b02      	ldr	r3, [pc, #8]	; (82734 <sysclk_get_cpu_hz+0x10>)
   8272a:	4798      	blx	r3
   8272c:	4603      	mov	r3, r0
   8272e:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   82730:	4618      	mov	r0, r3
   82732:	bd80      	pop	{r7, pc}
   82734:	00082709 	.word	0x00082709

00082738 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   82738:	b590      	push	{r4, r7, lr}
   8273a:	b083      	sub	sp, #12
   8273c:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   8273e:	4b10      	ldr	r3, [pc, #64]	; (82780 <sysclk_init+0x48>)
   82740:	4798      	blx	r3
   82742:	4603      	mov	r3, r0
   82744:	4618      	mov	r0, r3
   82746:	4b0f      	ldr	r3, [pc, #60]	; (82784 <sysclk_init+0x4c>)
   82748:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
   8274a:	2006      	movs	r0, #6
   8274c:	4b0e      	ldr	r3, [pc, #56]	; (82788 <sysclk_init+0x50>)
   8274e:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
   82750:	1d38      	adds	r0, r7, #4
   82752:	230e      	movs	r3, #14
   82754:	2201      	movs	r2, #1
   82756:	2106      	movs	r1, #6
   82758:	4c0c      	ldr	r4, [pc, #48]	; (8278c <sysclk_init+0x54>)
   8275a:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
   8275c:	1d3b      	adds	r3, r7, #4
   8275e:	2100      	movs	r1, #0
   82760:	4618      	mov	r0, r3
   82762:	4b0b      	ldr	r3, [pc, #44]	; (82790 <sysclk_init+0x58>)
   82764:	4798      	blx	r3
		pll_wait_for_lock(0);
   82766:	2000      	movs	r0, #0
   82768:	4b0a      	ldr	r3, [pc, #40]	; (82794 <sysclk_init+0x5c>)
   8276a:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   8276c:	2010      	movs	r0, #16
   8276e:	4b0a      	ldr	r3, [pc, #40]	; (82798 <sysclk_init+0x60>)
   82770:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   82772:	4b0a      	ldr	r3, [pc, #40]	; (8279c <sysclk_init+0x64>)
   82774:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
   82776:	bf00      	nop
   82778:	370c      	adds	r7, #12
   8277a:	46bd      	mov	sp, r7
   8277c:	bd90      	pop	{r4, r7, pc}
   8277e:	bf00      	nop
   82780:	00082725 	.word	0x00082725
   82784:	000832b9 	.word	0x000832b9
   82788:	000826ad 	.word	0x000826ad
   8278c:	000825d5 	.word	0x000825d5
   82790:	00082641 	.word	0x00082641
   82794:	000826e5 	.word	0x000826e5
   82798:	00082d69 	.word	0x00082d69
   8279c:	00083135 	.word	0x00083135

000827a0 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   827a0:	b580      	push	{r7, lr}
   827a2:	b082      	sub	sp, #8
   827a4:	af00      	add	r7, sp, #0
   827a6:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   827a8:	6878      	ldr	r0, [r7, #4]
   827aa:	4b03      	ldr	r3, [pc, #12]	; (827b8 <sysclk_enable_peripheral_clock+0x18>)
   827ac:	4798      	blx	r3
}
   827ae:	bf00      	nop
   827b0:	3708      	adds	r7, #8
   827b2:	46bd      	mov	sp, r7
   827b4:	bd80      	pop	{r7, pc}
   827b6:	bf00      	nop
   827b8:	00082fcd 	.word	0x00082fcd

000827bc <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
   827bc:	b580      	push	{r7, lr}
   827be:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
   827c0:	200b      	movs	r0, #11
   827c2:	4b06      	ldr	r3, [pc, #24]	; (827dc <ioport_init+0x20>)
   827c4:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
   827c6:	200c      	movs	r0, #12
   827c8:	4b04      	ldr	r3, [pc, #16]	; (827dc <ioport_init+0x20>)
   827ca:	4798      	blx	r3
#endif
#ifdef ID_PIOC
	sysclk_enable_peripheral_clock(ID_PIOC);
   827cc:	200d      	movs	r0, #13
   827ce:	4b03      	ldr	r3, [pc, #12]	; (827dc <ioport_init+0x20>)
   827d0:	4798      	blx	r3
#endif
#ifdef ID_PIOD
	sysclk_enable_peripheral_clock(ID_PIOD);
   827d2:	200e      	movs	r0, #14
   827d4:	4b01      	ldr	r3, [pc, #4]	; (827dc <ioport_init+0x20>)
   827d6:	4798      	blx	r3
	arch_ioport_init();
}
   827d8:	bf00      	nop
   827da:	bd80      	pop	{r7, pc}
   827dc:	000827a1 	.word	0x000827a1

000827e0 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   827e0:	b580      	push	{r7, lr}
   827e2:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   827e4:	4b17      	ldr	r3, [pc, #92]	; (82844 <board_init+0x64>)
   827e6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   827ea:	605a      	str	r2, [r3, #4]

	/* GPIO has been deprecated, the old code just keeps it for compatibility.
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
   827ec:	4b16      	ldr	r3, [pc, #88]	; (82848 <board_init+0x68>)
   827ee:	4798      	blx	r3
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   827f0:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   827f4:	203b      	movs	r0, #59	; 0x3b
   827f6:	4b15      	ldr	r3, [pc, #84]	; (8284c <board_init+0x6c>)
   827f8:	4798      	blx	r3
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   827fa:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   827fe:	2055      	movs	r0, #85	; 0x55
   82800:	4b12      	ldr	r3, [pc, #72]	; (8284c <board_init+0x6c>)
   82802:	4798      	blx	r3
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   82804:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   82808:	2056      	movs	r0, #86	; 0x56
   8280a:	4b10      	ldr	r3, [pc, #64]	; (8284c <board_init+0x6c>)
   8280c:	4798      	blx	r3

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   8280e:	4910      	ldr	r1, [pc, #64]	; (82850 <board_init+0x70>)
   82810:	2068      	movs	r0, #104	; 0x68
   82812:	4b0e      	ldr	r3, [pc, #56]	; (8284c <board_init+0x6c>)
   82814:	4798      	blx	r3
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   82816:	490f      	ldr	r1, [pc, #60]	; (82854 <board_init+0x74>)
   82818:	205c      	movs	r0, #92	; 0x5c
   8281a:	4b0c      	ldr	r3, [pc, #48]	; (8284c <board_init+0x6c>)
   8281c:	4798      	blx	r3

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   8281e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   82822:	f44f 7140 	mov.w	r1, #768	; 0x300
   82826:	480c      	ldr	r0, [pc, #48]	; (82858 <board_init+0x78>)
   82828:	4b0c      	ldr	r3, [pc, #48]	; (8285c <board_init+0x7c>)
   8282a:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   8282c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82830:	202b      	movs	r0, #43	; 0x2b
   82832:	4b06      	ldr	r3, [pc, #24]	; (8284c <board_init+0x6c>)
   82834:	4798      	blx	r3
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   82836:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8283a:	202a      	movs	r0, #42	; 0x2a
   8283c:	4b03      	ldr	r3, [pc, #12]	; (8284c <board_init+0x6c>)
   8283e:	4798      	blx	r3
	gpio_configure_pin(SPI0_MISO_GPIO, SPI0_MISO_FLAGS);
	gpio_configure_pin(SPI0_MOSI_GPIO, SPI0_MOSI_FLAGS);
	gpio_configure_pin(SPI0_SPCK_GPIO, SPI0_SPCK_FLAGS);
	gpio_configure_pin(SPI0_NPCS0_GPIO, SPI0_NPCS0_FLAGS);
#endif
}
   82840:	bf00      	nop
   82842:	bd80      	pop	{r7, pc}
   82844:	400e1a50 	.word	0x400e1a50
   82848:	000827bd 	.word	0x000827bd
   8284c:	00082a3d 	.word	0x00082a3d
   82850:	28000079 	.word	0x28000079
   82854:	28000001 	.word	0x28000001
   82858:	400e0e00 	.word	0x400e0e00
   8285c:	00082b79 	.word	0x00082b79

00082860 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
   82860:	b480      	push	{r7}
   82862:	b085      	sub	sp, #20
   82864:	af00      	add	r7, sp, #0
   82866:	60f8      	str	r0, [r7, #12]
   82868:	60b9      	str	r1, [r7, #8]
   8286a:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8286c:	687b      	ldr	r3, [r7, #4]
   8286e:	2b00      	cmp	r3, #0
   82870:	d003      	beq.n	8287a <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
   82872:	68fb      	ldr	r3, [r7, #12]
   82874:	68ba      	ldr	r2, [r7, #8]
   82876:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
   82878:	e002      	b.n	82880 <pio_pull_up+0x20>
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8287a:	68fb      	ldr	r3, [r7, #12]
   8287c:	68ba      	ldr	r2, [r7, #8]
   8287e:	661a      	str	r2, [r3, #96]	; 0x60
	}
}
   82880:	bf00      	nop
   82882:	3714      	adds	r7, #20
   82884:	46bd      	mov	sp, r7
   82886:	bc80      	pop	{r7}
   82888:	4770      	bx	lr
   8288a:	bf00      	nop

0008288c <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
   8288c:	b480      	push	{r7}
   8288e:	b087      	sub	sp, #28
   82890:	af00      	add	r7, sp, #0
   82892:	60f8      	str	r0, [r7, #12]
   82894:	60b9      	str	r1, [r7, #8]
   82896:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   82898:	68fb      	ldr	r3, [r7, #12]
   8289a:	687a      	ldr	r2, [r7, #4]
   8289c:	645a      	str	r2, [r3, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   8289e:	68bb      	ldr	r3, [r7, #8]
   828a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   828a4:	d01f      	beq.n	828e6 <pio_set_peripheral+0x5a>
   828a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   828aa:	d805      	bhi.n	828b8 <pio_set_peripheral+0x2c>
   828ac:	2b00      	cmp	r3, #0
   828ae:	d027      	beq.n	82900 <pio_set_peripheral+0x74>
   828b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   828b4:	d00a      	beq.n	828cc <pio_set_peripheral+0x40>
   828b6:	e01f      	b.n	828f8 <pio_set_peripheral+0x6c>
   828b8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   828bc:	d020      	beq.n	82900 <pio_set_peripheral+0x74>
   828be:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   828c2:	d01d      	beq.n	82900 <pio_set_peripheral+0x74>
   828c4:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   828c8:	d01a      	beq.n	82900 <pio_set_peripheral+0x74>
   828ca:	e015      	b.n	828f8 <pio_set_peripheral+0x6c>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   828cc:	68fb      	ldr	r3, [r7, #12]
   828ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   828d0:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   828d2:	68fb      	ldr	r3, [r7, #12]
   828d4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   828d6:	687b      	ldr	r3, [r7, #4]
   828d8:	43d9      	mvns	r1, r3
   828da:	697b      	ldr	r3, [r7, #20]
   828dc:	400b      	ands	r3, r1
   828de:	401a      	ands	r2, r3
   828e0:	68fb      	ldr	r3, [r7, #12]
   828e2:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   828e4:	e008      	b.n	828f8 <pio_set_peripheral+0x6c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   828e6:	68fb      	ldr	r3, [r7, #12]
   828e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   828ea:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   828ec:	687a      	ldr	r2, [r7, #4]
   828ee:	697b      	ldr	r3, [r7, #20]
   828f0:	431a      	orrs	r2, r3
   828f2:	68fb      	ldr	r3, [r7, #12]
   828f4:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   828f6:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   828f8:	68fb      	ldr	r3, [r7, #12]
   828fa:	687a      	ldr	r2, [r7, #4]
   828fc:	605a      	str	r2, [r3, #4]
   828fe:	e000      	b.n	82902 <pio_set_peripheral+0x76>
		// other types are invalid in this function
	case PIO_INPUT:
	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
   82900:	bf00      	nop
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
}
   82902:	371c      	adds	r7, #28
   82904:	46bd      	mov	sp, r7
   82906:	bc80      	pop	{r7}
   82908:	4770      	bx	lr
   8290a:	bf00      	nop

0008290c <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
   8290c:	b580      	push	{r7, lr}
   8290e:	b084      	sub	sp, #16
   82910:	af00      	add	r7, sp, #0
   82912:	60f8      	str	r0, [r7, #12]
   82914:	60b9      	str	r1, [r7, #8]
   82916:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
   82918:	68b9      	ldr	r1, [r7, #8]
   8291a:	68f8      	ldr	r0, [r7, #12]
   8291c:	4b19      	ldr	r3, [pc, #100]	; (82984 <pio_set_input+0x78>)
   8291e:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
   82920:	687b      	ldr	r3, [r7, #4]
   82922:	f003 0301 	and.w	r3, r3, #1
   82926:	461a      	mov	r2, r3
   82928:	68b9      	ldr	r1, [r7, #8]
   8292a:	68f8      	ldr	r0, [r7, #12]
   8292c:	4b16      	ldr	r3, [pc, #88]	; (82988 <pio_set_input+0x7c>)
   8292e:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   82930:	687b      	ldr	r3, [r7, #4]
   82932:	f003 030a 	and.w	r3, r3, #10
   82936:	2b00      	cmp	r3, #0
   82938:	d003      	beq.n	82942 <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
   8293a:	68fb      	ldr	r3, [r7, #12]
   8293c:	68ba      	ldr	r2, [r7, #8]
   8293e:	621a      	str	r2, [r3, #32]
   82940:	e002      	b.n	82948 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
   82942:	68fb      	ldr	r3, [r7, #12]
   82944:	68ba      	ldr	r2, [r7, #8]
   82946:	625a      	str	r2, [r3, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   82948:	687b      	ldr	r3, [r7, #4]
   8294a:	f003 0302 	and.w	r3, r3, #2
   8294e:	2b00      	cmp	r3, #0
   82950:	d004      	beq.n	8295c <pio_set_input+0x50>
		p_pio->PIO_SCIFSR = ul_mask;
   82952:	68fb      	ldr	r3, [r7, #12]
   82954:	68ba      	ldr	r2, [r7, #8]
   82956:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   8295a:	e008      	b.n	8296e <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   8295c:	687b      	ldr	r3, [r7, #4]
   8295e:	f003 0308 	and.w	r3, r3, #8
   82962:	2b00      	cmp	r3, #0
   82964:	d003      	beq.n	8296e <pio_set_input+0x62>
			p_pio->PIO_SCIFSR = ul_mask;
   82966:	68fb      	ldr	r3, [r7, #12]
   82968:	68ba      	ldr	r2, [r7, #8]
   8296a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   8296e:	68fb      	ldr	r3, [r7, #12]
   82970:	68ba      	ldr	r2, [r7, #8]
   82972:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
   82974:	68fb      	ldr	r3, [r7, #12]
   82976:	68ba      	ldr	r2, [r7, #8]
   82978:	601a      	str	r2, [r3, #0]
}
   8297a:	bf00      	nop
   8297c:	3710      	adds	r7, #16
   8297e:	46bd      	mov	sp, r7
   82980:	bd80      	pop	{r7, pc}
   82982:	bf00      	nop
   82984:	000829f1 	.word	0x000829f1
   82988:	00082861 	.word	0x00082861

0008298c <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   8298c:	b580      	push	{r7, lr}
   8298e:	b084      	sub	sp, #16
   82990:	af00      	add	r7, sp, #0
   82992:	60f8      	str	r0, [r7, #12]
   82994:	60b9      	str	r1, [r7, #8]
   82996:	607a      	str	r2, [r7, #4]
   82998:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
   8299a:	68b9      	ldr	r1, [r7, #8]
   8299c:	68f8      	ldr	r0, [r7, #12]
   8299e:	4b12      	ldr	r3, [pc, #72]	; (829e8 <pio_set_output+0x5c>)
   829a0:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
   829a2:	69ba      	ldr	r2, [r7, #24]
   829a4:	68b9      	ldr	r1, [r7, #8]
   829a6:	68f8      	ldr	r0, [r7, #12]
   829a8:	4b10      	ldr	r3, [pc, #64]	; (829ec <pio_set_output+0x60>)
   829aa:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   829ac:	683b      	ldr	r3, [r7, #0]
   829ae:	2b00      	cmp	r3, #0
   829b0:	d003      	beq.n	829ba <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
   829b2:	68fb      	ldr	r3, [r7, #12]
   829b4:	68ba      	ldr	r2, [r7, #8]
   829b6:	651a      	str	r2, [r3, #80]	; 0x50
   829b8:	e002      	b.n	829c0 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   829ba:	68fb      	ldr	r3, [r7, #12]
   829bc:	68ba      	ldr	r2, [r7, #8]
   829be:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   829c0:	687b      	ldr	r3, [r7, #4]
   829c2:	2b00      	cmp	r3, #0
   829c4:	d003      	beq.n	829ce <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
   829c6:	68fb      	ldr	r3, [r7, #12]
   829c8:	68ba      	ldr	r2, [r7, #8]
   829ca:	631a      	str	r2, [r3, #48]	; 0x30
   829cc:	e002      	b.n	829d4 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
   829ce:	68fb      	ldr	r3, [r7, #12]
   829d0:	68ba      	ldr	r2, [r7, #8]
   829d2:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   829d4:	68fb      	ldr	r3, [r7, #12]
   829d6:	68ba      	ldr	r2, [r7, #8]
   829d8:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
   829da:	68fb      	ldr	r3, [r7, #12]
   829dc:	68ba      	ldr	r2, [r7, #8]
   829de:	601a      	str	r2, [r3, #0]
}
   829e0:	bf00      	nop
   829e2:	3710      	adds	r7, #16
   829e4:	46bd      	mov	sp, r7
   829e6:	bd80      	pop	{r7, pc}
   829e8:	000829f1 	.word	0x000829f1
   829ec:	00082861 	.word	0x00082861

000829f0 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
   829f0:	b480      	push	{r7}
   829f2:	b083      	sub	sp, #12
   829f4:	af00      	add	r7, sp, #0
   829f6:	6078      	str	r0, [r7, #4]
   829f8:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
   829fa:	687b      	ldr	r3, [r7, #4]
   829fc:	683a      	ldr	r2, [r7, #0]
   829fe:	645a      	str	r2, [r3, #68]	; 0x44
}
   82a00:	bf00      	nop
   82a02:	370c      	adds	r7, #12
   82a04:	46bd      	mov	sp, r7
   82a06:	bc80      	pop	{r7}
   82a08:	4770      	bx	lr
   82a0a:	bf00      	nop

00082a0c <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
   82a0c:	b480      	push	{r7}
   82a0e:	b083      	sub	sp, #12
   82a10:	af00      	add	r7, sp, #0
   82a12:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
   82a14:	687b      	ldr	r3, [r7, #4]
   82a16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
   82a18:	4618      	mov	r0, r3
   82a1a:	370c      	adds	r7, #12
   82a1c:	46bd      	mov	sp, r7
   82a1e:	bc80      	pop	{r7}
   82a20:	4770      	bx	lr
   82a22:	bf00      	nop

00082a24 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
   82a24:	b480      	push	{r7}
   82a26:	b083      	sub	sp, #12
   82a28:	af00      	add	r7, sp, #0
   82a2a:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
   82a2c:	687b      	ldr	r3, [r7, #4]
   82a2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
   82a30:	4618      	mov	r0, r3
   82a32:	370c      	adds	r7, #12
   82a34:	46bd      	mov	sp, r7
   82a36:	bc80      	pop	{r7}
   82a38:	4770      	bx	lr
   82a3a:	bf00      	nop

00082a3c <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   82a3c:	b590      	push	{r4, r7, lr}
   82a3e:	b087      	sub	sp, #28
   82a40:	af02      	add	r7, sp, #8
   82a42:	6078      	str	r0, [r7, #4]
   82a44:	6039      	str	r1, [r7, #0]
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   82a46:	687b      	ldr	r3, [r7, #4]
   82a48:	095b      	lsrs	r3, r3, #5
   82a4a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   82a4e:	f203 7307 	addw	r3, r3, #1799	; 0x707
   82a52:	025b      	lsls	r3, r3, #9
   82a54:	60fb      	str	r3, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   82a56:	683b      	ldr	r3, [r7, #0]
   82a58:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   82a5c:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   82a60:	d046      	beq.n	82af0 <pio_configure_pin+0xb4>
   82a62:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   82a66:	d806      	bhi.n	82a76 <pio_configure_pin+0x3a>
   82a68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   82a6c:	d00a      	beq.n	82a84 <pio_configure_pin+0x48>
   82a6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   82a72:	d022      	beq.n	82aba <pio_configure_pin+0x7e>
   82a74:	e070      	b.n	82b58 <pio_configure_pin+0x11c>
   82a76:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   82a7a:	d045      	beq.n	82b08 <pio_configure_pin+0xcc>
   82a7c:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82a80:	d042      	beq.n	82b08 <pio_configure_pin+0xcc>
   82a82:	e069      	b.n	82b58 <pio_configure_pin+0x11c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   82a84:	687b      	ldr	r3, [r7, #4]
   82a86:	f003 031f 	and.w	r3, r3, #31
   82a8a:	2201      	movs	r2, #1
   82a8c:	fa02 f303 	lsl.w	r3, r2, r3
   82a90:	461a      	mov	r2, r3
   82a92:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82a96:	68f8      	ldr	r0, [r7, #12]
   82a98:	4b33      	ldr	r3, [pc, #204]	; (82b68 <pio_configure_pin+0x12c>)
   82a9a:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   82a9c:	687b      	ldr	r3, [r7, #4]
   82a9e:	f003 031f 	and.w	r3, r3, #31
   82aa2:	2201      	movs	r2, #1
   82aa4:	fa02 f303 	lsl.w	r3, r2, r3
   82aa8:	4619      	mov	r1, r3
   82aaa:	683b      	ldr	r3, [r7, #0]
   82aac:	f003 0301 	and.w	r3, r3, #1
   82ab0:	461a      	mov	r2, r3
   82ab2:	68f8      	ldr	r0, [r7, #12]
   82ab4:	4b2d      	ldr	r3, [pc, #180]	; (82b6c <pio_configure_pin+0x130>)
   82ab6:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   82ab8:	e050      	b.n	82b5c <pio_configure_pin+0x120>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   82aba:	687b      	ldr	r3, [r7, #4]
   82abc:	f003 031f 	and.w	r3, r3, #31
   82ac0:	2201      	movs	r2, #1
   82ac2:	fa02 f303 	lsl.w	r3, r2, r3
   82ac6:	461a      	mov	r2, r3
   82ac8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   82acc:	68f8      	ldr	r0, [r7, #12]
   82ace:	4b26      	ldr	r3, [pc, #152]	; (82b68 <pio_configure_pin+0x12c>)
   82ad0:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   82ad2:	687b      	ldr	r3, [r7, #4]
   82ad4:	f003 031f 	and.w	r3, r3, #31
   82ad8:	2201      	movs	r2, #1
   82ada:	fa02 f303 	lsl.w	r3, r2, r3
   82ade:	4619      	mov	r1, r3
   82ae0:	683b      	ldr	r3, [r7, #0]
   82ae2:	f003 0301 	and.w	r3, r3, #1
   82ae6:	461a      	mov	r2, r3
   82ae8:	68f8      	ldr	r0, [r7, #12]
   82aea:	4b20      	ldr	r3, [pc, #128]	; (82b6c <pio_configure_pin+0x130>)
   82aec:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   82aee:	e035      	b.n	82b5c <pio_configure_pin+0x120>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   82af0:	687b      	ldr	r3, [r7, #4]
   82af2:	f003 031f 	and.w	r3, r3, #31
   82af6:	2201      	movs	r2, #1
   82af8:	fa02 f303 	lsl.w	r3, r2, r3
   82afc:	683a      	ldr	r2, [r7, #0]
   82afe:	4619      	mov	r1, r3
   82b00:	68f8      	ldr	r0, [r7, #12]
   82b02:	4b1b      	ldr	r3, [pc, #108]	; (82b70 <pio_configure_pin+0x134>)
   82b04:	4798      	blx	r3
		break;
   82b06:	e029      	b.n	82b5c <pio_configure_pin+0x120>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   82b08:	687b      	ldr	r3, [r7, #4]
   82b0a:	f003 031f 	and.w	r3, r3, #31
   82b0e:	2201      	movs	r2, #1
   82b10:	fa02 f303 	lsl.w	r3, r2, r3
   82b14:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   82b16:	683b      	ldr	r3, [r7, #0]
   82b18:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   82b1c:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82b20:	bf0c      	ite	eq
   82b22:	2301      	moveq	r3, #1
   82b24:	2300      	movne	r3, #0
   82b26:	b2db      	uxtb	r3, r3
   82b28:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   82b2a:	683b      	ldr	r3, [r7, #0]
   82b2c:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   82b30:	2b00      	cmp	r3, #0
   82b32:	bf14      	ite	ne
   82b34:	2301      	movne	r3, #1
   82b36:	2300      	moveq	r3, #0
   82b38:	b2db      	uxtb	r3, r3
   82b3a:	4618      	mov	r0, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
   82b3c:	683b      	ldr	r3, [r7, #0]
   82b3e:	f003 0301 	and.w	r3, r3, #1
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   82b42:	2b00      	cmp	r3, #0
   82b44:	bf14      	ite	ne
   82b46:	2301      	movne	r3, #1
   82b48:	2300      	moveq	r3, #0
   82b4a:	b2db      	uxtb	r3, r3
   82b4c:	9300      	str	r3, [sp, #0]
   82b4e:	4603      	mov	r3, r0
   82b50:	68f8      	ldr	r0, [r7, #12]
   82b52:	4c08      	ldr	r4, [pc, #32]	; (82b74 <pio_configure_pin+0x138>)
   82b54:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   82b56:	e001      	b.n	82b5c <pio_configure_pin+0x120>

	default:
		return 0;
   82b58:	2300      	movs	r3, #0
   82b5a:	e000      	b.n	82b5e <pio_configure_pin+0x122>
	}

	return 1;
   82b5c:	2301      	movs	r3, #1
}
   82b5e:	4618      	mov	r0, r3
   82b60:	3714      	adds	r7, #20
   82b62:	46bd      	mov	sp, r7
   82b64:	bd90      	pop	{r4, r7, pc}
   82b66:	bf00      	nop
   82b68:	0008288d 	.word	0x0008288d
   82b6c:	00082861 	.word	0x00082861
   82b70:	0008290d 	.word	0x0008290d
   82b74:	0008298d 	.word	0x0008298d

00082b78 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   82b78:	b590      	push	{r4, r7, lr}
   82b7a:	b087      	sub	sp, #28
   82b7c:	af02      	add	r7, sp, #8
   82b7e:	60f8      	str	r0, [r7, #12]
   82b80:	60b9      	str	r1, [r7, #8]
   82b82:	607a      	str	r2, [r7, #4]
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   82b84:	687b      	ldr	r3, [r7, #4]
   82b86:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   82b8a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   82b8e:	d02e      	beq.n	82bee <pio_configure_pin_group+0x76>
   82b90:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   82b94:	d806      	bhi.n	82ba4 <pio_configure_pin_group+0x2c>
   82b96:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   82b9a:	d00a      	beq.n	82bb2 <pio_configure_pin_group+0x3a>
   82b9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   82ba0:	d016      	beq.n	82bd0 <pio_configure_pin_group+0x58>
   82ba2:	e04c      	b.n	82c3e <pio_configure_pin_group+0xc6>
   82ba4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   82ba8:	d027      	beq.n	82bfa <pio_configure_pin_group+0x82>
   82baa:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82bae:	d024      	beq.n	82bfa <pio_configure_pin_group+0x82>
   82bb0:	e045      	b.n	82c3e <pio_configure_pin_group+0xc6>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   82bb2:	68ba      	ldr	r2, [r7, #8]
   82bb4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82bb8:	68f8      	ldr	r0, [r7, #12]
   82bba:	4b24      	ldr	r3, [pc, #144]	; (82c4c <pio_configure_pin_group+0xd4>)
   82bbc:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   82bbe:	687b      	ldr	r3, [r7, #4]
   82bc0:	f003 0301 	and.w	r3, r3, #1
   82bc4:	461a      	mov	r2, r3
   82bc6:	68b9      	ldr	r1, [r7, #8]
   82bc8:	68f8      	ldr	r0, [r7, #12]
   82bca:	4b21      	ldr	r3, [pc, #132]	; (82c50 <pio_configure_pin_group+0xd8>)
   82bcc:	4798      	blx	r3
		break;
   82bce:	e038      	b.n	82c42 <pio_configure_pin_group+0xca>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   82bd0:	68ba      	ldr	r2, [r7, #8]
   82bd2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   82bd6:	68f8      	ldr	r0, [r7, #12]
   82bd8:	4b1c      	ldr	r3, [pc, #112]	; (82c4c <pio_configure_pin_group+0xd4>)
   82bda:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   82bdc:	687b      	ldr	r3, [r7, #4]
   82bde:	f003 0301 	and.w	r3, r3, #1
   82be2:	461a      	mov	r2, r3
   82be4:	68b9      	ldr	r1, [r7, #8]
   82be6:	68f8      	ldr	r0, [r7, #12]
   82be8:	4b19      	ldr	r3, [pc, #100]	; (82c50 <pio_configure_pin_group+0xd8>)
   82bea:	4798      	blx	r3
		break;
   82bec:	e029      	b.n	82c42 <pio_configure_pin_group+0xca>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   82bee:	687a      	ldr	r2, [r7, #4]
   82bf0:	68b9      	ldr	r1, [r7, #8]
   82bf2:	68f8      	ldr	r0, [r7, #12]
   82bf4:	4b17      	ldr	r3, [pc, #92]	; (82c54 <pio_configure_pin_group+0xdc>)
   82bf6:	4798      	blx	r3
		break;
   82bf8:	e023      	b.n	82c42 <pio_configure_pin_group+0xca>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   82bfa:	687b      	ldr	r3, [r7, #4]
   82bfc:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   82c00:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82c04:	bf0c      	ite	eq
   82c06:	2301      	moveq	r3, #1
   82c08:	2300      	movne	r3, #0
   82c0a:	b2db      	uxtb	r3, r3
   82c0c:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   82c0e:	687b      	ldr	r3, [r7, #4]
   82c10:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   82c14:	2b00      	cmp	r3, #0
   82c16:	bf14      	ite	ne
   82c18:	2301      	movne	r3, #1
   82c1a:	2300      	moveq	r3, #0
   82c1c:	b2db      	uxtb	r3, r3
   82c1e:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
   82c20:	687b      	ldr	r3, [r7, #4]
   82c22:	f003 0301 	and.w	r3, r3, #1
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   82c26:	2b00      	cmp	r3, #0
   82c28:	bf14      	ite	ne
   82c2a:	2301      	movne	r3, #1
   82c2c:	2300      	moveq	r3, #0
   82c2e:	b2db      	uxtb	r3, r3
   82c30:	9300      	str	r3, [sp, #0]
   82c32:	460b      	mov	r3, r1
   82c34:	68b9      	ldr	r1, [r7, #8]
   82c36:	68f8      	ldr	r0, [r7, #12]
   82c38:	4c07      	ldr	r4, [pc, #28]	; (82c58 <pio_configure_pin_group+0xe0>)
   82c3a:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   82c3c:	e001      	b.n	82c42 <pio_configure_pin_group+0xca>

	default:
		return 0;
   82c3e:	2300      	movs	r3, #0
   82c40:	e000      	b.n	82c44 <pio_configure_pin_group+0xcc>
	}

	return 1;
   82c42:	2301      	movs	r3, #1
}
   82c44:	4618      	mov	r0, r3
   82c46:	3714      	adds	r7, #20
   82c48:	46bd      	mov	sp, r7
   82c4a:	bd90      	pop	{r4, r7, pc}
   82c4c:	0008288d 	.word	0x0008288d
   82c50:	00082861 	.word	0x00082861
   82c54:	0008290d 	.word	0x0008290d
   82c58:	0008298d 	.word	0x0008298d

00082c5c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   82c5c:	b580      	push	{r7, lr}
   82c5e:	b084      	sub	sp, #16
   82c60:	af00      	add	r7, sp, #0
   82c62:	6078      	str	r0, [r7, #4]
   82c64:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   82c66:	6878      	ldr	r0, [r7, #4]
   82c68:	4b24      	ldr	r3, [pc, #144]	; (82cfc <pio_handler_process+0xa0>)
   82c6a:	4798      	blx	r3
   82c6c:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
   82c6e:	6878      	ldr	r0, [r7, #4]
   82c70:	4b23      	ldr	r3, [pc, #140]	; (82d00 <pio_handler_process+0xa4>)
   82c72:	4798      	blx	r3
   82c74:	4602      	mov	r2, r0
   82c76:	68fb      	ldr	r3, [r7, #12]
   82c78:	4013      	ands	r3, r2
   82c7a:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
   82c7c:	68fb      	ldr	r3, [r7, #12]
   82c7e:	2b00      	cmp	r3, #0
   82c80:	d037      	beq.n	82cf2 <pio_handler_process+0x96>
		/* Find triggering source */
		i = 0;
   82c82:	2300      	movs	r3, #0
   82c84:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
   82c86:	e031      	b.n	82cec <pio_handler_process+0x90>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   82c88:	4a1e      	ldr	r2, [pc, #120]	; (82d04 <pio_handler_process+0xa8>)
   82c8a:	68bb      	ldr	r3, [r7, #8]
   82c8c:	011b      	lsls	r3, r3, #4
   82c8e:	4413      	add	r3, r2
   82c90:	681a      	ldr	r2, [r3, #0]
   82c92:	683b      	ldr	r3, [r7, #0]
   82c94:	429a      	cmp	r2, r3
   82c96:	d126      	bne.n	82ce6 <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   82c98:	4a1a      	ldr	r2, [pc, #104]	; (82d04 <pio_handler_process+0xa8>)
   82c9a:	68bb      	ldr	r3, [r7, #8]
   82c9c:	011b      	lsls	r3, r3, #4
   82c9e:	4413      	add	r3, r2
   82ca0:	3304      	adds	r3, #4
   82ca2:	681a      	ldr	r2, [r3, #0]
   82ca4:	68fb      	ldr	r3, [r7, #12]
   82ca6:	4013      	ands	r3, r2
   82ca8:	2b00      	cmp	r3, #0
   82caa:	d01c      	beq.n	82ce6 <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   82cac:	4a15      	ldr	r2, [pc, #84]	; (82d04 <pio_handler_process+0xa8>)
   82cae:	68bb      	ldr	r3, [r7, #8]
   82cb0:	011b      	lsls	r3, r3, #4
   82cb2:	4413      	add	r3, r2
   82cb4:	330c      	adds	r3, #12
   82cb6:	681b      	ldr	r3, [r3, #0]
   82cb8:	4912      	ldr	r1, [pc, #72]	; (82d04 <pio_handler_process+0xa8>)
   82cba:	68ba      	ldr	r2, [r7, #8]
   82cbc:	0112      	lsls	r2, r2, #4
   82cbe:	440a      	add	r2, r1
   82cc0:	6810      	ldr	r0, [r2, #0]
   82cc2:	4910      	ldr	r1, [pc, #64]	; (82d04 <pio_handler_process+0xa8>)
   82cc4:	68ba      	ldr	r2, [r7, #8]
   82cc6:	0112      	lsls	r2, r2, #4
   82cc8:	440a      	add	r2, r1
   82cca:	3204      	adds	r2, #4
   82ccc:	6812      	ldr	r2, [r2, #0]
   82cce:	4611      	mov	r1, r2
   82cd0:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   82cd2:	4a0c      	ldr	r2, [pc, #48]	; (82d04 <pio_handler_process+0xa8>)
   82cd4:	68bb      	ldr	r3, [r7, #8]
   82cd6:	011b      	lsls	r3, r3, #4
   82cd8:	4413      	add	r3, r2
   82cda:	3304      	adds	r3, #4
   82cdc:	681b      	ldr	r3, [r3, #0]
   82cde:	43db      	mvns	r3, r3
   82ce0:	68fa      	ldr	r2, [r7, #12]
   82ce2:	4013      	ands	r3, r2
   82ce4:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
   82ce6:	68bb      	ldr	r3, [r7, #8]
   82ce8:	3301      	adds	r3, #1
   82cea:	60bb      	str	r3, [r7, #8]

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   82cec:	68fb      	ldr	r3, [r7, #12]
   82cee:	2b00      	cmp	r3, #0
   82cf0:	d1ca      	bne.n	82c88 <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
   82cf2:	bf00      	nop
   82cf4:	3710      	adds	r7, #16
   82cf6:	46bd      	mov	sp, r7
   82cf8:	bd80      	pop	{r7, pc}
   82cfa:	bf00      	nop
   82cfc:	00082a0d 	.word	0x00082a0d
   82d00:	00082a25 	.word	0x00082a25
   82d04:	20070d10 	.word	0x20070d10

00082d08 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   82d08:	b580      	push	{r7, lr}
   82d0a:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
   82d0c:	210b      	movs	r1, #11
   82d0e:	4802      	ldr	r0, [pc, #8]	; (82d18 <PIOA_Handler+0x10>)
   82d10:	4b02      	ldr	r3, [pc, #8]	; (82d1c <PIOA_Handler+0x14>)
   82d12:	4798      	blx	r3
}
   82d14:	bf00      	nop
   82d16:	bd80      	pop	{r7, pc}
   82d18:	400e0e00 	.word	0x400e0e00
   82d1c:	00082c5d 	.word	0x00082c5d

00082d20 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   82d20:	b580      	push	{r7, lr}
   82d22:	af00      	add	r7, sp, #0
	//PIOB_Handler_interrupt(PIOB,25);
    pio_handler_process(PIOB, ID_PIOB);
   82d24:	210c      	movs	r1, #12
   82d26:	4802      	ldr	r0, [pc, #8]	; (82d30 <PIOB_Handler+0x10>)
   82d28:	4b02      	ldr	r3, [pc, #8]	; (82d34 <PIOB_Handler+0x14>)
   82d2a:	4798      	blx	r3
}
   82d2c:	bf00      	nop
   82d2e:	bd80      	pop	{r7, pc}
   82d30:	400e1000 	.word	0x400e1000
   82d34:	00082c5d 	.word	0x00082c5d

00082d38 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   82d38:	b580      	push	{r7, lr}
   82d3a:	af00      	add	r7, sp, #0
	//PIOC_Handler_interrupt(PIOC);
	pio_handler_process(PIOC, ID_PIOC);
   82d3c:	210d      	movs	r1, #13
   82d3e:	4802      	ldr	r0, [pc, #8]	; (82d48 <PIOC_Handler+0x10>)
   82d40:	4b02      	ldr	r3, [pc, #8]	; (82d4c <PIOC_Handler+0x14>)
   82d42:	4798      	blx	r3
}
   82d44:	bf00      	nop
   82d46:	bd80      	pop	{r7, pc}
   82d48:	400e1200 	.word	0x400e1200
   82d4c:	00082c5d 	.word	0x00082c5d

00082d50 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   82d50:	b580      	push	{r7, lr}
   82d52:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
   82d54:	210e      	movs	r1, #14
   82d56:	4802      	ldr	r0, [pc, #8]	; (82d60 <PIOD_Handler+0x10>)
   82d58:	4b02      	ldr	r3, [pc, #8]	; (82d64 <PIOD_Handler+0x14>)
   82d5a:	4798      	blx	r3
}
   82d5c:	bf00      	nop
   82d5e:	bd80      	pop	{r7, pc}
   82d60:	400e1400 	.word	0x400e1400
   82d64:	00082c5d 	.word	0x00082c5d

00082d68 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
   82d68:	b480      	push	{r7}
   82d6a:	b085      	sub	sp, #20
   82d6c:	af00      	add	r7, sp, #0
   82d6e:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   82d70:	491c      	ldr	r1, [pc, #112]	; (82de4 <pmc_switch_mck_to_pllack+0x7c>)
   82d72:	4b1c      	ldr	r3, [pc, #112]	; (82de4 <pmc_switch_mck_to_pllack+0x7c>)
   82d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82d76:	f023 0270 	bic.w	r2, r3, #112	; 0x70
   82d7a:	687b      	ldr	r3, [r7, #4]
   82d7c:	4313      	orrs	r3, r2
   82d7e:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82d80:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82d84:	60fb      	str	r3, [r7, #12]
   82d86:	e007      	b.n	82d98 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
   82d88:	68fb      	ldr	r3, [r7, #12]
   82d8a:	2b00      	cmp	r3, #0
   82d8c:	d101      	bne.n	82d92 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
   82d8e:	2301      	movs	r3, #1
   82d90:	e023      	b.n	82dda <pmc_switch_mck_to_pllack+0x72>
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
   82d92:	68fb      	ldr	r3, [r7, #12]
   82d94:	3b01      	subs	r3, #1
   82d96:	60fb      	str	r3, [r7, #12]
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82d98:	4b12      	ldr	r3, [pc, #72]	; (82de4 <pmc_switch_mck_to_pllack+0x7c>)
   82d9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82d9c:	f003 0308 	and.w	r3, r3, #8
   82da0:	2b00      	cmp	r3, #0
   82da2:	d0f1      	beq.n	82d88 <pmc_switch_mck_to_pllack+0x20>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   82da4:	4a0f      	ldr	r2, [pc, #60]	; (82de4 <pmc_switch_mck_to_pllack+0x7c>)
   82da6:	4b0f      	ldr	r3, [pc, #60]	; (82de4 <pmc_switch_mck_to_pllack+0x7c>)
   82da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82daa:	f023 0303 	bic.w	r3, r3, #3
   82dae:	f043 0302 	orr.w	r3, r3, #2
   82db2:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82db4:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82db8:	60fb      	str	r3, [r7, #12]
   82dba:	e007      	b.n	82dcc <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
   82dbc:	68fb      	ldr	r3, [r7, #12]
   82dbe:	2b00      	cmp	r3, #0
   82dc0:	d101      	bne.n	82dc6 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
   82dc2:	2301      	movs	r3, #1
   82dc4:	e009      	b.n	82dda <pmc_switch_mck_to_pllack+0x72>

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
   82dc6:	68fb      	ldr	r3, [r7, #12]
   82dc8:	3b01      	subs	r3, #1
   82dca:	60fb      	str	r3, [r7, #12]
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82dcc:	4b05      	ldr	r3, [pc, #20]	; (82de4 <pmc_switch_mck_to_pllack+0x7c>)
   82dce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82dd0:	f003 0308 	and.w	r3, r3, #8
   82dd4:	2b00      	cmp	r3, #0
   82dd6:	d0f1      	beq.n	82dbc <pmc_switch_mck_to_pllack+0x54>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   82dd8:	2300      	movs	r3, #0
}
   82dda:	4618      	mov	r0, r3
   82ddc:	3714      	adds	r7, #20
   82dde:	46bd      	mov	sp, r7
   82de0:	bc80      	pop	{r7}
   82de2:	4770      	bx	lr
   82de4:	400e0600 	.word	0x400e0600

00082de8 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
   82de8:	b480      	push	{r7}
   82dea:	b083      	sub	sp, #12
   82dec:	af00      	add	r7, sp, #0
   82dee:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
   82df0:	687b      	ldr	r3, [r7, #4]
   82df2:	2b01      	cmp	r3, #1
   82df4:	d107      	bne.n	82e06 <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY(SUPC_KEY_VALUE) |
   82df6:	4a08      	ldr	r2, [pc, #32]	; (82e18 <pmc_switch_sclk_to_32kxtal+0x30>)
   82df8:	4b07      	ldr	r3, [pc, #28]	; (82e18 <pmc_switch_sclk_to_32kxtal+0x30>)
   82dfa:	689b      	ldr	r3, [r3, #8]
   82dfc:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   82e00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   82e04:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY(SUPC_KEY_VALUE) | SUPC_CR_XTALSEL;
   82e06:	4b04      	ldr	r3, [pc, #16]	; (82e18 <pmc_switch_sclk_to_32kxtal+0x30>)
   82e08:	4a04      	ldr	r2, [pc, #16]	; (82e1c <pmc_switch_sclk_to_32kxtal+0x34>)
   82e0a:	601a      	str	r2, [r3, #0]
}
   82e0c:	bf00      	nop
   82e0e:	370c      	adds	r7, #12
   82e10:	46bd      	mov	sp, r7
   82e12:	bc80      	pop	{r7}
   82e14:	4770      	bx	lr
   82e16:	bf00      	nop
   82e18:	400e1a10 	.word	0x400e1a10
   82e1c:	a5000008 	.word	0xa5000008

00082e20 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
   82e20:	b480      	push	{r7}
   82e22:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
   82e24:	4b09      	ldr	r3, [pc, #36]	; (82e4c <pmc_osc_is_ready_32kxtal+0x2c>)
   82e26:	695b      	ldr	r3, [r3, #20]
   82e28:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
   82e2c:	2b00      	cmp	r3, #0
   82e2e:	d007      	beq.n	82e40 <pmc_osc_is_ready_32kxtal+0x20>
   82e30:	4b07      	ldr	r3, [pc, #28]	; (82e50 <pmc_osc_is_ready_32kxtal+0x30>)
   82e32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82e34:	f003 0380 	and.w	r3, r3, #128	; 0x80
   82e38:	2b00      	cmp	r3, #0
   82e3a:	d001      	beq.n	82e40 <pmc_osc_is_ready_32kxtal+0x20>
   82e3c:	2301      	movs	r3, #1
   82e3e:	e000      	b.n	82e42 <pmc_osc_is_ready_32kxtal+0x22>
   82e40:	2300      	movs	r3, #0
}
   82e42:	4618      	mov	r0, r3
   82e44:	46bd      	mov	sp, r7
   82e46:	bc80      	pop	{r7}
   82e48:	4770      	bx	lr
   82e4a:	bf00      	nop
   82e4c:	400e1a10 	.word	0x400e1a10
   82e50:	400e0600 	.word	0x400e0600

00082e54 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
   82e54:	b480      	push	{r7}
   82e56:	b085      	sub	sp, #20
   82e58:	af00      	add	r7, sp, #0
   82e5a:	6078      	str	r0, [r7, #4]
	uint32_t ul_needXTEN = 0;
   82e5c:	2300      	movs	r3, #0
   82e5e:	60fb      	str	r3, [r7, #12]

	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	if (PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN) {
   82e60:	4b21      	ldr	r3, [pc, #132]	; (82ee8 <pmc_switch_mainck_to_fastrc+0x94>)
   82e62:	6a1b      	ldr	r3, [r3, #32]
   82e64:	f003 0301 	and.w	r3, r3, #1
   82e68:	2b00      	cmp	r3, #0
   82e6a:	d00e      	beq.n	82e8a <pmc_switch_mainck_to_fastrc+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   82e6c:	491e      	ldr	r1, [pc, #120]	; (82ee8 <pmc_switch_mainck_to_fastrc+0x94>)
   82e6e:	4b1e      	ldr	r3, [pc, #120]	; (82ee8 <pmc_switch_mainck_to_fastrc+0x94>)
   82e70:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
   82e72:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   82e76:	f023 0378 	bic.w	r3, r3, #120	; 0x78
   82e7a:	687a      	ldr	r2, [r7, #4]
   82e7c:	4313      	orrs	r3, r2
   82e7e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   82e82:	f043 0308 	orr.w	r3, r3, #8
{
	uint32_t ul_needXTEN = 0;

	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	if (PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   82e86:	620b      	str	r3, [r1, #32]
   82e88:	e00b      	b.n	82ea2 <pmc_switch_mainck_to_fastrc+0x4e>
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				ul_moscrcf;
	} else {
		ul_needXTEN = 1;
   82e8a:	2301      	movs	r3, #1
   82e8c:	60fb      	str	r3, [r7, #12]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   82e8e:	4916      	ldr	r1, [pc, #88]	; (82ee8 <pmc_switch_mainck_to_fastrc+0x94>)
   82e90:	4b15      	ldr	r3, [pc, #84]	; (82ee8 <pmc_switch_mainck_to_fastrc+0x94>)
   82e92:	6a1a      	ldr	r2, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST_Msk |
   82e94:	4b15      	ldr	r3, [pc, #84]	; (82eec <pmc_switch_mainck_to_fastrc+0x98>)
   82e96:	4013      	ands	r3, r2
   82e98:	687a      	ldr	r2, [r7, #4]
   82e9a:	431a      	orrs	r2, r3
   82e9c:	4b14      	ldr	r3, [pc, #80]	; (82ef0 <pmc_switch_mainck_to_fastrc+0x9c>)
   82e9e:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				ul_moscrcf;
	} else {
		ul_needXTEN = 1;
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   82ea0:	620b      	str	r3, [r1, #32]
				CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST_Msk |
				ul_moscrcf;
	}

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   82ea2:	bf00      	nop
   82ea4:	4b10      	ldr	r3, [pc, #64]	; (82ee8 <pmc_switch_mainck_to_fastrc+0x94>)
   82ea6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82ea8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   82eac:	2b00      	cmp	r3, #0
   82eae:	d0f9      	beq.n	82ea4 <pmc_switch_mainck_to_fastrc+0x50>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
   82eb0:	4a0d      	ldr	r2, [pc, #52]	; (82ee8 <pmc_switch_mainck_to_fastrc+0x94>)
   82eb2:	4b0d      	ldr	r3, [pc, #52]	; (82ee8 <pmc_switch_mainck_to_fastrc+0x94>)
   82eb4:	6a1b      	ldr	r3, [r3, #32]
   82eb6:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
   82eba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   82ebe:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   82ec2:	6213      	str	r3, [r2, #32]
			PMC_CKGR_MOR_KEY_VALUE;

	/* Disable xtal oscillator */
	if (ul_needXTEN) {
   82ec4:	68fb      	ldr	r3, [r7, #12]
   82ec6:	2b00      	cmp	r3, #0
   82ec8:	d009      	beq.n	82ede <pmc_switch_mainck_to_fastrc+0x8a>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   82eca:	4a07      	ldr	r2, [pc, #28]	; (82ee8 <pmc_switch_mainck_to_fastrc+0x94>)
   82ecc:	4b06      	ldr	r3, [pc, #24]	; (82ee8 <pmc_switch_mainck_to_fastrc+0x94>)
   82ece:	6a1b      	ldr	r3, [r3, #32]
   82ed0:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   82ed4:	f023 0301 	bic.w	r3, r3, #1
   82ed8:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   82edc:	6213      	str	r3, [r2, #32]
				PMC_CKGR_MOR_KEY_VALUE;
	}
}
   82ede:	bf00      	nop
   82ee0:	3714      	adds	r7, #20
   82ee2:	46bd      	mov	sp, r7
   82ee4:	bc80      	pop	{r7}
   82ee6:	4770      	bx	lr
   82ee8:	400e0600 	.word	0x400e0600
   82eec:	ffc80086 	.word	0xffc80086
   82ef0:	0037ff09 	.word	0x0037ff09

00082ef4 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
   82ef4:	b480      	push	{r7}
   82ef6:	b083      	sub	sp, #12
   82ef8:	af00      	add	r7, sp, #0
   82efa:	6078      	str	r0, [r7, #4]
   82efc:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   82efe:	687b      	ldr	r3, [r7, #4]
   82f00:	2b00      	cmp	r3, #0
   82f02:	d008      	beq.n	82f16 <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   82f04:	4916      	ldr	r1, [pc, #88]	; (82f60 <pmc_switch_mainck_to_xtal+0x6c>)
   82f06:	4b16      	ldr	r3, [pc, #88]	; (82f60 <pmc_switch_mainck_to_xtal+0x6c>)
   82f08:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
   82f0a:	4a16      	ldr	r2, [pc, #88]	; (82f64 <pmc_switch_mainck_to_xtal+0x70>)
   82f0c:	401a      	ands	r2, r3
   82f0e:	4b16      	ldr	r3, [pc, #88]	; (82f68 <pmc_switch_mainck_to_xtal+0x74>)
   82f10:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   82f12:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCSEL;
	}
}
   82f14:	e01e      	b.n	82f54 <pmc_switch_mainck_to_xtal+0x60>
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   82f16:	4912      	ldr	r1, [pc, #72]	; (82f60 <pmc_switch_mainck_to_xtal+0x6c>)
   82f18:	4b11      	ldr	r3, [pc, #68]	; (82f60 <pmc_switch_mainck_to_xtal+0x6c>)
   82f1a:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   82f1c:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   82f20:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   82f24:	683a      	ldr	r2, [r7, #0]
   82f26:	0212      	lsls	r2, r2, #8
   82f28:	b292      	uxth	r2, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   82f2a:	4313      	orrs	r3, r2
   82f2c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   82f30:	f043 0301 	orr.w	r3, r3, #1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   82f34:	620b      	str	r3, [r1, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   82f36:	bf00      	nop
   82f38:	4b09      	ldr	r3, [pc, #36]	; (82f60 <pmc_switch_mainck_to_xtal+0x6c>)
   82f3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82f3c:	f003 0301 	and.w	r3, r3, #1
   82f40:	2b00      	cmp	r3, #0
   82f42:	d0f9      	beq.n	82f38 <pmc_switch_mainck_to_xtal+0x44>

		PMC->CKGR_MOR |= PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCSEL;
   82f44:	4a06      	ldr	r2, [pc, #24]	; (82f60 <pmc_switch_mainck_to_xtal+0x6c>)
   82f46:	4b06      	ldr	r3, [pc, #24]	; (82f60 <pmc_switch_mainck_to_xtal+0x6c>)
   82f48:	6a1b      	ldr	r3, [r3, #32]
   82f4a:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   82f4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   82f52:	6213      	str	r3, [r2, #32]
	}
}
   82f54:	bf00      	nop
   82f56:	370c      	adds	r7, #12
   82f58:	46bd      	mov	sp, r7
   82f5a:	bc80      	pop	{r7}
   82f5c:	4770      	bx	lr
   82f5e:	bf00      	nop
   82f60:	400e0600 	.word	0x400e0600
   82f64:	fec8fffc 	.word	0xfec8fffc
   82f68:	01370002 	.word	0x01370002

00082f6c <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
   82f6c:	b480      	push	{r7}
   82f6e:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   82f70:	4b03      	ldr	r3, [pc, #12]	; (82f80 <pmc_osc_is_ready_mainck+0x14>)
   82f72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82f74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
   82f78:	4618      	mov	r0, r3
   82f7a:	46bd      	mov	sp, r7
   82f7c:	bc80      	pop	{r7}
   82f7e:	4770      	bx	lr
   82f80:	400e0600 	.word	0x400e0600

00082f84 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
   82f84:	b480      	push	{r7}
   82f86:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   82f88:	4b03      	ldr	r3, [pc, #12]	; (82f98 <pmc_disable_pllack+0x14>)
   82f8a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   82f8e:	629a      	str	r2, [r3, #40]	; 0x28
}
   82f90:	bf00      	nop
   82f92:	46bd      	mov	sp, r7
   82f94:	bc80      	pop	{r7}
   82f96:	4770      	bx	lr
   82f98:	400e0600 	.word	0x400e0600

00082f9c <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
   82f9c:	b480      	push	{r7}
   82f9e:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   82fa0:	4b03      	ldr	r3, [pc, #12]	; (82fb0 <pmc_is_locked_pllack+0x14>)
   82fa2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82fa4:	f003 0302 	and.w	r3, r3, #2
}
   82fa8:	4618      	mov	r0, r3
   82faa:	46bd      	mov	sp, r7
   82fac:	bc80      	pop	{r7}
   82fae:	4770      	bx	lr
   82fb0:	400e0600 	.word	0x400e0600

00082fb4 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
   82fb4:	b480      	push	{r7}
   82fb6:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   82fb8:	4b03      	ldr	r3, [pc, #12]	; (82fc8 <pmc_is_locked_upll+0x14>)
   82fba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   82fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
   82fc0:	4618      	mov	r0, r3
   82fc2:	46bd      	mov	sp, r7
   82fc4:	bc80      	pop	{r7}
   82fc6:	4770      	bx	lr
   82fc8:	400e0600 	.word	0x400e0600

00082fcc <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
   82fcc:	b480      	push	{r7}
   82fce:	b083      	sub	sp, #12
   82fd0:	af00      	add	r7, sp, #0
   82fd2:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
   82fd4:	687b      	ldr	r3, [r7, #4]
   82fd6:	2b2c      	cmp	r3, #44	; 0x2c
   82fd8:	d901      	bls.n	82fde <pmc_enable_periph_clk+0x12>
		return 1;
   82fda:	2301      	movs	r3, #1
   82fdc:	e02f      	b.n	8303e <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
   82fde:	687b      	ldr	r3, [r7, #4]
   82fe0:	2b1f      	cmp	r3, #31
   82fe2:	d813      	bhi.n	8300c <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   82fe4:	4b18      	ldr	r3, [pc, #96]	; (83048 <pmc_enable_periph_clk+0x7c>)
   82fe6:	699a      	ldr	r2, [r3, #24]
   82fe8:	2101      	movs	r1, #1
   82fea:	687b      	ldr	r3, [r7, #4]
   82fec:	fa01 f303 	lsl.w	r3, r1, r3
   82ff0:	401a      	ands	r2, r3
   82ff2:	2101      	movs	r1, #1
   82ff4:	687b      	ldr	r3, [r7, #4]
   82ff6:	fa01 f303 	lsl.w	r3, r1, r3
   82ffa:	429a      	cmp	r2, r3
   82ffc:	d01e      	beq.n	8303c <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
   82ffe:	4a12      	ldr	r2, [pc, #72]	; (83048 <pmc_enable_periph_clk+0x7c>)
   83000:	2101      	movs	r1, #1
   83002:	687b      	ldr	r3, [r7, #4]
   83004:	fa01 f303 	lsl.w	r3, r1, r3
   83008:	6113      	str	r3, [r2, #16]
   8300a:	e017      	b.n	8303c <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E)
	} else {
		ul_id -= 32;
   8300c:	687b      	ldr	r3, [r7, #4]
   8300e:	3b20      	subs	r3, #32
   83010:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   83012:	4b0d      	ldr	r3, [pc, #52]	; (83048 <pmc_enable_periph_clk+0x7c>)
   83014:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   83018:	2101      	movs	r1, #1
   8301a:	687b      	ldr	r3, [r7, #4]
   8301c:	fa01 f303 	lsl.w	r3, r1, r3
   83020:	401a      	ands	r2, r3
   83022:	2101      	movs	r1, #1
   83024:	687b      	ldr	r3, [r7, #4]
   83026:	fa01 f303 	lsl.w	r3, r1, r3
   8302a:	429a      	cmp	r2, r3
   8302c:	d006      	beq.n	8303c <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
   8302e:	4a06      	ldr	r2, [pc, #24]	; (83048 <pmc_enable_periph_clk+0x7c>)
   83030:	2101      	movs	r1, #1
   83032:	687b      	ldr	r3, [r7, #4]
   83034:	fa01 f303 	lsl.w	r3, r1, r3
   83038:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
   8303c:	2300      	movs	r3, #0
}
   8303e:	4618      	mov	r0, r3
   83040:	370c      	adds	r7, #12
   83042:	46bd      	mov	sp, r7
   83044:	bc80      	pop	{r7}
   83046:	4770      	bx	lr
   83048:	400e0600 	.word	0x400e0600

0008304c <pmc_set_writeprotect>:
 * \brief Enable or disable write protect of PMC registers.
 *
 * \param ul_enable 1 to enable, 0 to disable.
 */
void pmc_set_writeprotect(uint32_t ul_enable)
{
   8304c:	b480      	push	{r7}
   8304e:	b083      	sub	sp, #12
   83050:	af00      	add	r7, sp, #0
   83052:	6078      	str	r0, [r7, #4]
	if (ul_enable) {
   83054:	687b      	ldr	r3, [r7, #4]
   83056:	2b00      	cmp	r3, #0
   83058:	d004      	beq.n	83064 <pmc_set_writeprotect+0x18>
		PMC->PMC_WPMR = PMC_WPMR_WPKEY_VALUE | PMC_WPMR_WPEN;
   8305a:	4b07      	ldr	r3, [pc, #28]	; (83078 <pmc_set_writeprotect+0x2c>)
   8305c:	4a07      	ldr	r2, [pc, #28]	; (8307c <pmc_set_writeprotect+0x30>)
   8305e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	} else {
		PMC->PMC_WPMR = PMC_WPMR_WPKEY_VALUE;
	}
}
   83062:	e003      	b.n	8306c <pmc_set_writeprotect+0x20>
void pmc_set_writeprotect(uint32_t ul_enable)
{
	if (ul_enable) {
		PMC->PMC_WPMR = PMC_WPMR_WPKEY_VALUE | PMC_WPMR_WPEN;
	} else {
		PMC->PMC_WPMR = PMC_WPMR_WPKEY_VALUE;
   83064:	4b04      	ldr	r3, [pc, #16]	; (83078 <pmc_set_writeprotect+0x2c>)
   83066:	4a06      	ldr	r2, [pc, #24]	; (83080 <pmc_set_writeprotect+0x34>)
   83068:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	}
}
   8306c:	bf00      	nop
   8306e:	370c      	adds	r7, #12
   83070:	46bd      	mov	sp, r7
   83072:	bc80      	pop	{r7}
   83074:	4770      	bx	lr
   83076:	bf00      	nop
   83078:	400e0600 	.word	0x400e0600
   8307c:	504d4301 	.word	0x504d4301
   83080:	504d4300 	.word	0x504d4300

00083084 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   83084:	b480      	push	{r7}
   83086:	af00      	add	r7, sp, #0
	while (1) {
	}
   83088:	e7fe      	b.n	83088 <Dummy_Handler+0x4>
   8308a:	bf00      	nop

0008308c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   8308c:	b580      	push	{r7, lr}
   8308e:	b082      	sub	sp, #8
   83090:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
   83092:	4b1e      	ldr	r3, [pc, #120]	; (8310c <Reset_Handler+0x80>)
   83094:	607b      	str	r3, [r7, #4]
	pDest = &_srelocate;
   83096:	4b1e      	ldr	r3, [pc, #120]	; (83110 <Reset_Handler+0x84>)
   83098:	603b      	str	r3, [r7, #0]

	if (pSrc != pDest) {
   8309a:	687a      	ldr	r2, [r7, #4]
   8309c:	683b      	ldr	r3, [r7, #0]
   8309e:	429a      	cmp	r2, r3
   830a0:	d00c      	beq.n	830bc <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
   830a2:	e007      	b.n	830b4 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
   830a4:	683b      	ldr	r3, [r7, #0]
   830a6:	1d1a      	adds	r2, r3, #4
   830a8:	603a      	str	r2, [r7, #0]
   830aa:	687a      	ldr	r2, [r7, #4]
   830ac:	1d11      	adds	r1, r2, #4
   830ae:	6079      	str	r1, [r7, #4]
   830b0:	6812      	ldr	r2, [r2, #0]
   830b2:	601a      	str	r2, [r3, #0]
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   830b4:	683b      	ldr	r3, [r7, #0]
   830b6:	4a17      	ldr	r2, [pc, #92]	; (83114 <Reset_Handler+0x88>)
   830b8:	4293      	cmp	r3, r2
   830ba:	d3f3      	bcc.n	830a4 <Reset_Handler+0x18>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   830bc:	4b16      	ldr	r3, [pc, #88]	; (83118 <Reset_Handler+0x8c>)
   830be:	603b      	str	r3, [r7, #0]
   830c0:	e004      	b.n	830cc <Reset_Handler+0x40>
		*pDest++ = 0;
   830c2:	683b      	ldr	r3, [r7, #0]
   830c4:	1d1a      	adds	r2, r3, #4
   830c6:	603a      	str	r2, [r7, #0]
   830c8:	2200      	movs	r2, #0
   830ca:	601a      	str	r2, [r3, #0]
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   830cc:	683b      	ldr	r3, [r7, #0]
   830ce:	4a13      	ldr	r2, [pc, #76]	; (8311c <Reset_Handler+0x90>)
   830d0:	4293      	cmp	r3, r2
   830d2:	d3f6      	bcc.n	830c2 <Reset_Handler+0x36>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
   830d4:	4b12      	ldr	r3, [pc, #72]	; (83120 <Reset_Handler+0x94>)
   830d6:	607b      	str	r3, [r7, #4]
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   830d8:	4a12      	ldr	r2, [pc, #72]	; (83124 <Reset_Handler+0x98>)
   830da:	687b      	ldr	r3, [r7, #4]
   830dc:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   830e0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   830e4:	6093      	str	r3, [r2, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   830e6:	687b      	ldr	r3, [r7, #4]
   830e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   830ec:	d309      	bcc.n	83102 <Reset_Handler+0x76>
   830ee:	687b      	ldr	r3, [r7, #4]
   830f0:	4a0d      	ldr	r2, [pc, #52]	; (83128 <Reset_Handler+0x9c>)
   830f2:	4293      	cmp	r3, r2
   830f4:	d805      	bhi.n	83102 <Reset_Handler+0x76>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   830f6:	4a0b      	ldr	r2, [pc, #44]	; (83124 <Reset_Handler+0x98>)
   830f8:	4b0a      	ldr	r3, [pc, #40]	; (83124 <Reset_Handler+0x98>)
   830fa:	689b      	ldr	r3, [r3, #8]
   830fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   83100:	6093      	str	r3, [r2, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   83102:	4b0a      	ldr	r3, [pc, #40]	; (8312c <Reset_Handler+0xa0>)
   83104:	4798      	blx	r3

	/* Branch to main function */
	main();
   83106:	4b0a      	ldr	r3, [pc, #40]	; (83130 <Reset_Handler+0xa4>)
   83108:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   8310a:	e7fe      	b.n	8310a <Reset_Handler+0x7e>
   8310c:	00086808 	.word	0x00086808
   83110:	20070000 	.word	0x20070000
   83114:	20070c6c 	.word	0x20070c6c
   83118:	20070c6c 	.word	0x20070c6c
   8311c:	20071248 	.word	0x20071248
   83120:	00080000 	.word	0x00080000
   83124:	e000ed00 	.word	0xe000ed00
   83128:	200fffff 	.word	0x200fffff
   8312c:	000837c5 	.word	0x000837c5
   83130:	00081d69 	.word	0x00081d69

00083134 <SystemCoreClockUpdate>:

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate(void)
{
   83134:	b480      	push	{r7}
   83136:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   83138:	4b57      	ldr	r3, [pc, #348]	; (83298 <SystemCoreClockUpdate+0x164>)
   8313a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8313c:	f003 0303 	and.w	r3, r3, #3
   83140:	2b03      	cmp	r3, #3
   83142:	f200 808a 	bhi.w	8325a <SystemCoreClockUpdate+0x126>
   83146:	a201      	add	r2, pc, #4	; (adr r2, 8314c <SystemCoreClockUpdate+0x18>)
   83148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8314c:	0008315d 	.word	0x0008315d
   83150:	0008317d 	.word	0x0008317d
   83154:	000831cd 	.word	0x000831cd
   83158:	000831cd 	.word	0x000831cd
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   8315c:	4b4f      	ldr	r3, [pc, #316]	; (8329c <SystemCoreClockUpdate+0x168>)
   8315e:	695b      	ldr	r3, [r3, #20]
   83160:	f003 0380 	and.w	r3, r3, #128	; 0x80
   83164:	2b00      	cmp	r3, #0
   83166:	d004      	beq.n	83172 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   83168:	4b4d      	ldr	r3, [pc, #308]	; (832a0 <SystemCoreClockUpdate+0x16c>)
   8316a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8316e:	601a      	str	r2, [r3, #0]
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
		}
		break;
   83170:	e073      	b.n	8325a <SystemCoreClockUpdate+0x126>
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   83172:	4b4b      	ldr	r3, [pc, #300]	; (832a0 <SystemCoreClockUpdate+0x16c>)
   83174:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
   83178:	601a      	str	r2, [r3, #0]
		}
		break;
   8317a:	e06e      	b.n	8325a <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   8317c:	4b46      	ldr	r3, [pc, #280]	; (83298 <SystemCoreClockUpdate+0x164>)
   8317e:	6a1b      	ldr	r3, [r3, #32]
   83180:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   83184:	2b00      	cmp	r3, #0
   83186:	d003      	beq.n	83190 <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   83188:	4b45      	ldr	r3, [pc, #276]	; (832a0 <SystemCoreClockUpdate+0x16c>)
   8318a:	4a46      	ldr	r2, [pc, #280]	; (832a4 <SystemCoreClockUpdate+0x170>)
   8318c:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		break;
   8318e:	e064      	b.n	8325a <SystemCoreClockUpdate+0x126>
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   83190:	4b43      	ldr	r3, [pc, #268]	; (832a0 <SystemCoreClockUpdate+0x16c>)
   83192:	4a45      	ldr	r2, [pc, #276]	; (832a8 <SystemCoreClockUpdate+0x174>)
   83194:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   83196:	4b40      	ldr	r3, [pc, #256]	; (83298 <SystemCoreClockUpdate+0x164>)
   83198:	6a1b      	ldr	r3, [r3, #32]
   8319a:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8319e:	2b10      	cmp	r3, #16
   831a0:	d004      	beq.n	831ac <SystemCoreClockUpdate+0x78>
   831a2:	2b20      	cmp	r3, #32
   831a4:	d008      	beq.n	831b8 <SystemCoreClockUpdate+0x84>
   831a6:	2b00      	cmp	r3, #0
   831a8:	d00e      	beq.n	831c8 <SystemCoreClockUpdate+0x94>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   831aa:	e00e      	b.n	831ca <SystemCoreClockUpdate+0x96>

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   831ac:	4b3c      	ldr	r3, [pc, #240]	; (832a0 <SystemCoreClockUpdate+0x16c>)
   831ae:	681b      	ldr	r3, [r3, #0]
   831b0:	005b      	lsls	r3, r3, #1
   831b2:	4a3b      	ldr	r2, [pc, #236]	; (832a0 <SystemCoreClockUpdate+0x16c>)
   831b4:	6013      	str	r3, [r2, #0]
				break;
   831b6:	e008      	b.n	831ca <SystemCoreClockUpdate+0x96>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   831b8:	4b39      	ldr	r3, [pc, #228]	; (832a0 <SystemCoreClockUpdate+0x16c>)
   831ba:	681a      	ldr	r2, [r3, #0]
   831bc:	4613      	mov	r3, r2
   831be:	005b      	lsls	r3, r3, #1
   831c0:	4413      	add	r3, r2
   831c2:	4a37      	ldr	r2, [pc, #220]	; (832a0 <SystemCoreClockUpdate+0x16c>)
   831c4:	6013      	str	r3, [r2, #0]
				break;
   831c6:	e000      	b.n	831ca <SystemCoreClockUpdate+0x96>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
   831c8:	bf00      	nop
				break;
			default:
				break;
			}
		}
		break;
   831ca:	e046      	b.n	8325a <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   831cc:	4b32      	ldr	r3, [pc, #200]	; (83298 <SystemCoreClockUpdate+0x164>)
   831ce:	6a1b      	ldr	r3, [r3, #32]
   831d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   831d4:	2b00      	cmp	r3, #0
   831d6:	d003      	beq.n	831e0 <SystemCoreClockUpdate+0xac>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   831d8:	4b31      	ldr	r3, [pc, #196]	; (832a0 <SystemCoreClockUpdate+0x16c>)
   831da:	4a32      	ldr	r2, [pc, #200]	; (832a4 <SystemCoreClockUpdate+0x170>)
   831dc:	601a      	str	r2, [r3, #0]
   831de:	e01c      	b.n	8321a <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   831e0:	4b2f      	ldr	r3, [pc, #188]	; (832a0 <SystemCoreClockUpdate+0x16c>)
   831e2:	4a31      	ldr	r2, [pc, #196]	; (832a8 <SystemCoreClockUpdate+0x174>)
   831e4:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   831e6:	4b2c      	ldr	r3, [pc, #176]	; (83298 <SystemCoreClockUpdate+0x164>)
   831e8:	6a1b      	ldr	r3, [r3, #32]
   831ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
   831ee:	2b10      	cmp	r3, #16
   831f0:	d004      	beq.n	831fc <SystemCoreClockUpdate+0xc8>
   831f2:	2b20      	cmp	r3, #32
   831f4:	d008      	beq.n	83208 <SystemCoreClockUpdate+0xd4>
   831f6:	2b00      	cmp	r3, #0
   831f8:	d00e      	beq.n	83218 <SystemCoreClockUpdate+0xe4>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   831fa:	e00e      	b.n	8321a <SystemCoreClockUpdate+0xe6>

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   831fc:	4b28      	ldr	r3, [pc, #160]	; (832a0 <SystemCoreClockUpdate+0x16c>)
   831fe:	681b      	ldr	r3, [r3, #0]
   83200:	005b      	lsls	r3, r3, #1
   83202:	4a27      	ldr	r2, [pc, #156]	; (832a0 <SystemCoreClockUpdate+0x16c>)
   83204:	6013      	str	r3, [r2, #0]
				break;
   83206:	e008      	b.n	8321a <SystemCoreClockUpdate+0xe6>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   83208:	4b25      	ldr	r3, [pc, #148]	; (832a0 <SystemCoreClockUpdate+0x16c>)
   8320a:	681a      	ldr	r2, [r3, #0]
   8320c:	4613      	mov	r3, r2
   8320e:	005b      	lsls	r3, r3, #1
   83210:	4413      	add	r3, r2
   83212:	4a23      	ldr	r2, [pc, #140]	; (832a0 <SystemCoreClockUpdate+0x16c>)
   83214:	6013      	str	r3, [r2, #0]
				break;
   83216:	e000      	b.n	8321a <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
   83218:	bf00      	nop
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   8321a:	4b1f      	ldr	r3, [pc, #124]	; (83298 <SystemCoreClockUpdate+0x164>)
   8321c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8321e:	f003 0303 	and.w	r3, r3, #3
   83222:	2b02      	cmp	r3, #2
   83224:	d115      	bne.n	83252 <SystemCoreClockUpdate+0x11e>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   83226:	4b1c      	ldr	r3, [pc, #112]	; (83298 <SystemCoreClockUpdate+0x164>)
   83228:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   8322a:	4b20      	ldr	r3, [pc, #128]	; (832ac <SystemCoreClockUpdate+0x178>)
   8322c:	4013      	ands	r3, r2
   8322e:	0c1b      	lsrs	r3, r3, #16
				                            CKGR_PLLAR_MULA_Pos) + 1U);
   83230:	3301      	adds	r3, #1
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   83232:	4a1b      	ldr	r2, [pc, #108]	; (832a0 <SystemCoreClockUpdate+0x16c>)
   83234:	6812      	ldr	r2, [r2, #0]
   83236:	fb02 f303 	mul.w	r3, r2, r3
   8323a:	4a19      	ldr	r2, [pc, #100]	; (832a0 <SystemCoreClockUpdate+0x16c>)
   8323c:	6013      	str	r3, [r2, #0]
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   8323e:	4b16      	ldr	r3, [pc, #88]	; (83298 <SystemCoreClockUpdate+0x164>)
   83240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   83242:	b2db      	uxtb	r3, r3
   83244:	4a16      	ldr	r2, [pc, #88]	; (832a0 <SystemCoreClockUpdate+0x16c>)
   83246:	6812      	ldr	r2, [r2, #0]
   83248:	fbb2 f3f3 	udiv	r3, r2, r3
   8324c:	4a14      	ldr	r2, [pc, #80]	; (832a0 <SystemCoreClockUpdate+0x16c>)
   8324e:	6013      	str	r3, [r2, #0]
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
   83250:	e002      	b.n	83258 <SystemCoreClockUpdate+0x124>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   83252:	4b13      	ldr	r3, [pc, #76]	; (832a0 <SystemCoreClockUpdate+0x16c>)
   83254:	4a16      	ldr	r2, [pc, #88]	; (832b0 <SystemCoreClockUpdate+0x17c>)
   83256:	601a      	str	r2, [r3, #0]
		}
		break;
   83258:	bf00      	nop
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   8325a:	4b0f      	ldr	r3, [pc, #60]	; (83298 <SystemCoreClockUpdate+0x164>)
   8325c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8325e:	f003 0370 	and.w	r3, r3, #112	; 0x70
   83262:	2b70      	cmp	r3, #112	; 0x70
   83264:	d108      	bne.n	83278 <SystemCoreClockUpdate+0x144>
		SystemCoreClock /= 3U;
   83266:	4b0e      	ldr	r3, [pc, #56]	; (832a0 <SystemCoreClockUpdate+0x16c>)
   83268:	681b      	ldr	r3, [r3, #0]
   8326a:	4a12      	ldr	r2, [pc, #72]	; (832b4 <SystemCoreClockUpdate+0x180>)
   8326c:	fba2 2303 	umull	r2, r3, r2, r3
   83270:	085b      	lsrs	r3, r3, #1
   83272:	4a0b      	ldr	r2, [pc, #44]	; (832a0 <SystemCoreClockUpdate+0x16c>)
   83274:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
			                          PMC_MCKR_PRES_Pos);
	}
}
   83276:	e00a      	b.n	8328e <SystemCoreClockUpdate+0x15a>
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   83278:	4b07      	ldr	r3, [pc, #28]	; (83298 <SystemCoreClockUpdate+0x164>)
   8327a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8327c:	f003 0370 	and.w	r3, r3, #112	; 0x70
   83280:	091b      	lsrs	r3, r3, #4
   83282:	4a07      	ldr	r2, [pc, #28]	; (832a0 <SystemCoreClockUpdate+0x16c>)
   83284:	6812      	ldr	r2, [r2, #0]
   83286:	fa22 f303 	lsr.w	r3, r2, r3
   8328a:	4a05      	ldr	r2, [pc, #20]	; (832a0 <SystemCoreClockUpdate+0x16c>)
   8328c:	6013      	str	r3, [r2, #0]
			                          PMC_MCKR_PRES_Pos);
	}
}
   8328e:	bf00      	nop
   83290:	46bd      	mov	sp, r7
   83292:	bc80      	pop	{r7}
   83294:	4770      	bx	lr
   83296:	bf00      	nop
   83298:	400e0600 	.word	0x400e0600
   8329c:	400e1a10 	.word	0x400e1a10
   832a0:	20070404 	.word	0x20070404
   832a4:	00b71b00 	.word	0x00b71b00
   832a8:	003d0900 	.word	0x003d0900
   832ac:	07ff0000 	.word	0x07ff0000
   832b0:	0e4e1c00 	.word	0x0e4e1c00
   832b4:	aaaaaaab 	.word	0xaaaaaaab

000832b8 <system_init_flash>:

/** 
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
   832b8:	b480      	push	{r7}
   832ba:	b083      	sub	sp, #12
   832bc:	af00      	add	r7, sp, #0
   832be:	6078      	str	r0, [r7, #4]
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
   832c0:	687b      	ldr	r3, [r7, #4]
   832c2:	4a25      	ldr	r2, [pc, #148]	; (83358 <system_init_flash+0xa0>)
   832c4:	4293      	cmp	r3, r2
   832c6:	d806      	bhi.n	832d6 <system_init_flash+0x1e>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
   832c8:	4b24      	ldr	r3, [pc, #144]	; (8335c <system_init_flash+0xa4>)
   832ca:	2200      	movs	r2, #0
   832cc:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
   832ce:	4b24      	ldr	r3, [pc, #144]	; (83360 <system_init_flash+0xa8>)
   832d0:	2200      	movs	r2, #0
   832d2:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
	}
}
   832d4:	e03b      	b.n	8334e <system_init_flash+0x96>
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
   832d6:	687b      	ldr	r3, [r7, #4]
   832d8:	4a22      	ldr	r2, [pc, #136]	; (83364 <system_init_flash+0xac>)
   832da:	4293      	cmp	r3, r2
   832dc:	d808      	bhi.n	832f0 <system_init_flash+0x38>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
   832de:	4b1f      	ldr	r3, [pc, #124]	; (8335c <system_init_flash+0xa4>)
   832e0:	f44f 7280 	mov.w	r2, #256	; 0x100
   832e4:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
   832e6:	4b1e      	ldr	r3, [pc, #120]	; (83360 <system_init_flash+0xa8>)
   832e8:	f44f 7280 	mov.w	r2, #256	; 0x100
   832ec:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
	}
}
   832ee:	e02e      	b.n	8334e <system_init_flash+0x96>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
   832f0:	687b      	ldr	r3, [r7, #4]
   832f2:	4a1d      	ldr	r2, [pc, #116]	; (83368 <system_init_flash+0xb0>)
   832f4:	4293      	cmp	r3, r2
   832f6:	d808      	bhi.n	8330a <system_init_flash+0x52>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
   832f8:	4b18      	ldr	r3, [pc, #96]	; (8335c <system_init_flash+0xa4>)
   832fa:	f44f 7200 	mov.w	r2, #512	; 0x200
   832fe:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
   83300:	4b17      	ldr	r3, [pc, #92]	; (83360 <system_init_flash+0xa8>)
   83302:	f44f 7200 	mov.w	r2, #512	; 0x200
   83306:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
	}
}
   83308:	e021      	b.n	8334e <system_init_flash+0x96>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
   8330a:	687b      	ldr	r3, [r7, #4]
   8330c:	4a17      	ldr	r2, [pc, #92]	; (8336c <system_init_flash+0xb4>)
   8330e:	4293      	cmp	r3, r2
   83310:	d808      	bhi.n	83324 <system_init_flash+0x6c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
   83312:	4b12      	ldr	r3, [pc, #72]	; (8335c <system_init_flash+0xa4>)
   83314:	f44f 7240 	mov.w	r2, #768	; 0x300
   83318:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
   8331a:	4b11      	ldr	r3, [pc, #68]	; (83360 <system_init_flash+0xa8>)
   8331c:	f44f 7240 	mov.w	r2, #768	; 0x300
   83320:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
	}
}
   83322:	e014      	b.n	8334e <system_init_flash+0x96>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
   83324:	687b      	ldr	r3, [r7, #4]
   83326:	4a12      	ldr	r2, [pc, #72]	; (83370 <system_init_flash+0xb8>)
   83328:	4293      	cmp	r3, r2
   8332a:	d808      	bhi.n	8333e <system_init_flash+0x86>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   8332c:	4b0b      	ldr	r3, [pc, #44]	; (8335c <system_init_flash+0xa4>)
   8332e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   83332:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
   83334:	4b0a      	ldr	r3, [pc, #40]	; (83360 <system_init_flash+0xa8>)
   83336:	f44f 6280 	mov.w	r2, #1024	; 0x400
   8333a:	601a      	str	r2, [r3, #0]
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
	}
}
   8333c:	e007      	b.n	8334e <system_init_flash+0x96>
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
   8333e:	4b07      	ldr	r3, [pc, #28]	; (8335c <system_init_flash+0xa4>)
   83340:	f44f 62a0 	mov.w	r2, #1280	; 0x500
   83344:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
   83346:	4b06      	ldr	r3, [pc, #24]	; (83360 <system_init_flash+0xa8>)
   83348:	f44f 62a0 	mov.w	r2, #1280	; 0x500
   8334c:	601a      	str	r2, [r3, #0]
	}
}
   8334e:	bf00      	nop
   83350:	370c      	adds	r7, #12
   83352:	46bd      	mov	sp, r7
   83354:	bc80      	pop	{r7}
   83356:	4770      	bx	lr
   83358:	0121eabf 	.word	0x0121eabf
   8335c:	400e0a00 	.word	0x400e0a00
   83360:	400e0c00 	.word	0x400e0c00
   83364:	02faf07f 	.word	0x02faf07f
   83368:	03d08fff 	.word	0x03d08fff
   8336c:	04c4b3ff 	.word	0x04c4b3ff
   83370:	055d4a7f 	.word	0x055d4a7f

00083374 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   83374:	b480      	push	{r7}
   83376:	b085      	sub	sp, #20
   83378:	af00      	add	r7, sp, #0
   8337a:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   8337c:	4b0a      	ldr	r3, [pc, #40]	; (833a8 <_sbrk+0x34>)
   8337e:	681b      	ldr	r3, [r3, #0]
   83380:	2b00      	cmp	r3, #0
   83382:	d102      	bne.n	8338a <_sbrk+0x16>
		heap = (unsigned char *)&_end;
   83384:	4b08      	ldr	r3, [pc, #32]	; (833a8 <_sbrk+0x34>)
   83386:	4a09      	ldr	r2, [pc, #36]	; (833ac <_sbrk+0x38>)
   83388:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   8338a:	4b07      	ldr	r3, [pc, #28]	; (833a8 <_sbrk+0x34>)
   8338c:	681b      	ldr	r3, [r3, #0]
   8338e:	60fb      	str	r3, [r7, #12]

	heap += incr;
   83390:	4b05      	ldr	r3, [pc, #20]	; (833a8 <_sbrk+0x34>)
   83392:	681a      	ldr	r2, [r3, #0]
   83394:	687b      	ldr	r3, [r7, #4]
   83396:	4413      	add	r3, r2
   83398:	4a03      	ldr	r2, [pc, #12]	; (833a8 <_sbrk+0x34>)
   8339a:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
   8339c:	68fb      	ldr	r3, [r7, #12]
}
   8339e:	4618      	mov	r0, r3
   833a0:	3714      	adds	r7, #20
   833a2:	46bd      	mov	sp, r7
   833a4:	bc80      	pop	{r7}
   833a6:	4770      	bx	lr
   833a8:	20070d80 	.word	0x20070d80
   833ac:	20073248 	.word	0x20073248

000833b0 <_close>:
{
	return -1;
}

extern int _close(int file)
{
   833b0:	b480      	push	{r7}
   833b2:	b083      	sub	sp, #12
   833b4:	af00      	add	r7, sp, #0
   833b6:	6078      	str	r0, [r7, #4]
	return -1;
   833b8:	f04f 33ff 	mov.w	r3, #4294967295
}
   833bc:	4618      	mov	r0, r3
   833be:	370c      	adds	r7, #12
   833c0:	46bd      	mov	sp, r7
   833c2:	bc80      	pop	{r7}
   833c4:	4770      	bx	lr
   833c6:	bf00      	nop

000833c8 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
   833c8:	b480      	push	{r7}
   833ca:	b083      	sub	sp, #12
   833cc:	af00      	add	r7, sp, #0
   833ce:	6078      	str	r0, [r7, #4]
   833d0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
   833d2:	683b      	ldr	r3, [r7, #0]
   833d4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   833d8:	605a      	str	r2, [r3, #4]

	return 0;
   833da:	2300      	movs	r3, #0
}
   833dc:	4618      	mov	r0, r3
   833de:	370c      	adds	r7, #12
   833e0:	46bd      	mov	sp, r7
   833e2:	bc80      	pop	{r7}
   833e4:	4770      	bx	lr
   833e6:	bf00      	nop

000833e8 <_isatty>:

extern int _isatty(int file)
{
   833e8:	b480      	push	{r7}
   833ea:	b083      	sub	sp, #12
   833ec:	af00      	add	r7, sp, #0
   833ee:	6078      	str	r0, [r7, #4]
	return 1;
   833f0:	2301      	movs	r3, #1
}
   833f2:	4618      	mov	r0, r3
   833f4:	370c      	adds	r7, #12
   833f6:	46bd      	mov	sp, r7
   833f8:	bc80      	pop	{r7}
   833fa:	4770      	bx	lr

000833fc <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
   833fc:	b480      	push	{r7}
   833fe:	b085      	sub	sp, #20
   83400:	af00      	add	r7, sp, #0
   83402:	60f8      	str	r0, [r7, #12]
   83404:	60b9      	str	r1, [r7, #8]
   83406:	607a      	str	r2, [r7, #4]
	return 0;
   83408:	2300      	movs	r3, #0
}
   8340a:	4618      	mov	r0, r3
   8340c:	3714      	adds	r7, #20
   8340e:	46bd      	mov	sp, r7
   83410:	bc80      	pop	{r7}
   83412:	4770      	bx	lr

00083414 <__aeabi_drsub>:
   83414:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   83418:	e002      	b.n	83420 <__adddf3>
   8341a:	bf00      	nop

0008341c <__aeabi_dsub>:
   8341c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00083420 <__adddf3>:
   83420:	b530      	push	{r4, r5, lr}
   83422:	ea4f 0441 	mov.w	r4, r1, lsl #1
   83426:	ea4f 0543 	mov.w	r5, r3, lsl #1
   8342a:	ea94 0f05 	teq	r4, r5
   8342e:	bf08      	it	eq
   83430:	ea90 0f02 	teqeq	r0, r2
   83434:	bf1f      	itttt	ne
   83436:	ea54 0c00 	orrsne.w	ip, r4, r0
   8343a:	ea55 0c02 	orrsne.w	ip, r5, r2
   8343e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   83442:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   83446:	f000 80e2 	beq.w	8360e <__adddf3+0x1ee>
   8344a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   8344e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   83452:	bfb8      	it	lt
   83454:	426d      	neglt	r5, r5
   83456:	dd0c      	ble.n	83472 <__adddf3+0x52>
   83458:	442c      	add	r4, r5
   8345a:	ea80 0202 	eor.w	r2, r0, r2
   8345e:	ea81 0303 	eor.w	r3, r1, r3
   83462:	ea82 0000 	eor.w	r0, r2, r0
   83466:	ea83 0101 	eor.w	r1, r3, r1
   8346a:	ea80 0202 	eor.w	r2, r0, r2
   8346e:	ea81 0303 	eor.w	r3, r1, r3
   83472:	2d36      	cmp	r5, #54	; 0x36
   83474:	bf88      	it	hi
   83476:	bd30      	pophi	{r4, r5, pc}
   83478:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8347c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   83480:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   83484:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   83488:	d002      	beq.n	83490 <__adddf3+0x70>
   8348a:	4240      	negs	r0, r0
   8348c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   83490:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   83494:	ea4f 3303 	mov.w	r3, r3, lsl #12
   83498:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   8349c:	d002      	beq.n	834a4 <__adddf3+0x84>
   8349e:	4252      	negs	r2, r2
   834a0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   834a4:	ea94 0f05 	teq	r4, r5
   834a8:	f000 80a7 	beq.w	835fa <__adddf3+0x1da>
   834ac:	f1a4 0401 	sub.w	r4, r4, #1
   834b0:	f1d5 0e20 	rsbs	lr, r5, #32
   834b4:	db0d      	blt.n	834d2 <__adddf3+0xb2>
   834b6:	fa02 fc0e 	lsl.w	ip, r2, lr
   834ba:	fa22 f205 	lsr.w	r2, r2, r5
   834be:	1880      	adds	r0, r0, r2
   834c0:	f141 0100 	adc.w	r1, r1, #0
   834c4:	fa03 f20e 	lsl.w	r2, r3, lr
   834c8:	1880      	adds	r0, r0, r2
   834ca:	fa43 f305 	asr.w	r3, r3, r5
   834ce:	4159      	adcs	r1, r3
   834d0:	e00e      	b.n	834f0 <__adddf3+0xd0>
   834d2:	f1a5 0520 	sub.w	r5, r5, #32
   834d6:	f10e 0e20 	add.w	lr, lr, #32
   834da:	2a01      	cmp	r2, #1
   834dc:	fa03 fc0e 	lsl.w	ip, r3, lr
   834e0:	bf28      	it	cs
   834e2:	f04c 0c02 	orrcs.w	ip, ip, #2
   834e6:	fa43 f305 	asr.w	r3, r3, r5
   834ea:	18c0      	adds	r0, r0, r3
   834ec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   834f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   834f4:	d507      	bpl.n	83506 <__adddf3+0xe6>
   834f6:	f04f 0e00 	mov.w	lr, #0
   834fa:	f1dc 0c00 	rsbs	ip, ip, #0
   834fe:	eb7e 0000 	sbcs.w	r0, lr, r0
   83502:	eb6e 0101 	sbc.w	r1, lr, r1
   83506:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   8350a:	d31b      	bcc.n	83544 <__adddf3+0x124>
   8350c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   83510:	d30c      	bcc.n	8352c <__adddf3+0x10c>
   83512:	0849      	lsrs	r1, r1, #1
   83514:	ea5f 0030 	movs.w	r0, r0, rrx
   83518:	ea4f 0c3c 	mov.w	ip, ip, rrx
   8351c:	f104 0401 	add.w	r4, r4, #1
   83520:	ea4f 5244 	mov.w	r2, r4, lsl #21
   83524:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   83528:	f080 809a 	bcs.w	83660 <__adddf3+0x240>
   8352c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   83530:	bf08      	it	eq
   83532:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   83536:	f150 0000 	adcs.w	r0, r0, #0
   8353a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8353e:	ea41 0105 	orr.w	r1, r1, r5
   83542:	bd30      	pop	{r4, r5, pc}
   83544:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   83548:	4140      	adcs	r0, r0
   8354a:	eb41 0101 	adc.w	r1, r1, r1
   8354e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   83552:	f1a4 0401 	sub.w	r4, r4, #1
   83556:	d1e9      	bne.n	8352c <__adddf3+0x10c>
   83558:	f091 0f00 	teq	r1, #0
   8355c:	bf04      	itt	eq
   8355e:	4601      	moveq	r1, r0
   83560:	2000      	moveq	r0, #0
   83562:	fab1 f381 	clz	r3, r1
   83566:	bf08      	it	eq
   83568:	3320      	addeq	r3, #32
   8356a:	f1a3 030b 	sub.w	r3, r3, #11
   8356e:	f1b3 0220 	subs.w	r2, r3, #32
   83572:	da0c      	bge.n	8358e <__adddf3+0x16e>
   83574:	320c      	adds	r2, #12
   83576:	dd08      	ble.n	8358a <__adddf3+0x16a>
   83578:	f102 0c14 	add.w	ip, r2, #20
   8357c:	f1c2 020c 	rsb	r2, r2, #12
   83580:	fa01 f00c 	lsl.w	r0, r1, ip
   83584:	fa21 f102 	lsr.w	r1, r1, r2
   83588:	e00c      	b.n	835a4 <__adddf3+0x184>
   8358a:	f102 0214 	add.w	r2, r2, #20
   8358e:	bfd8      	it	le
   83590:	f1c2 0c20 	rsble	ip, r2, #32
   83594:	fa01 f102 	lsl.w	r1, r1, r2
   83598:	fa20 fc0c 	lsr.w	ip, r0, ip
   8359c:	bfdc      	itt	le
   8359e:	ea41 010c 	orrle.w	r1, r1, ip
   835a2:	4090      	lslle	r0, r2
   835a4:	1ae4      	subs	r4, r4, r3
   835a6:	bfa2      	ittt	ge
   835a8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   835ac:	4329      	orrge	r1, r5
   835ae:	bd30      	popge	{r4, r5, pc}
   835b0:	ea6f 0404 	mvn.w	r4, r4
   835b4:	3c1f      	subs	r4, #31
   835b6:	da1c      	bge.n	835f2 <__adddf3+0x1d2>
   835b8:	340c      	adds	r4, #12
   835ba:	dc0e      	bgt.n	835da <__adddf3+0x1ba>
   835bc:	f104 0414 	add.w	r4, r4, #20
   835c0:	f1c4 0220 	rsb	r2, r4, #32
   835c4:	fa20 f004 	lsr.w	r0, r0, r4
   835c8:	fa01 f302 	lsl.w	r3, r1, r2
   835cc:	ea40 0003 	orr.w	r0, r0, r3
   835d0:	fa21 f304 	lsr.w	r3, r1, r4
   835d4:	ea45 0103 	orr.w	r1, r5, r3
   835d8:	bd30      	pop	{r4, r5, pc}
   835da:	f1c4 040c 	rsb	r4, r4, #12
   835de:	f1c4 0220 	rsb	r2, r4, #32
   835e2:	fa20 f002 	lsr.w	r0, r0, r2
   835e6:	fa01 f304 	lsl.w	r3, r1, r4
   835ea:	ea40 0003 	orr.w	r0, r0, r3
   835ee:	4629      	mov	r1, r5
   835f0:	bd30      	pop	{r4, r5, pc}
   835f2:	fa21 f004 	lsr.w	r0, r1, r4
   835f6:	4629      	mov	r1, r5
   835f8:	bd30      	pop	{r4, r5, pc}
   835fa:	f094 0f00 	teq	r4, #0
   835fe:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   83602:	bf06      	itte	eq
   83604:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   83608:	3401      	addeq	r4, #1
   8360a:	3d01      	subne	r5, #1
   8360c:	e74e      	b.n	834ac <__adddf3+0x8c>
   8360e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   83612:	bf18      	it	ne
   83614:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   83618:	d029      	beq.n	8366e <__adddf3+0x24e>
   8361a:	ea94 0f05 	teq	r4, r5
   8361e:	bf08      	it	eq
   83620:	ea90 0f02 	teqeq	r0, r2
   83624:	d005      	beq.n	83632 <__adddf3+0x212>
   83626:	ea54 0c00 	orrs.w	ip, r4, r0
   8362a:	bf04      	itt	eq
   8362c:	4619      	moveq	r1, r3
   8362e:	4610      	moveq	r0, r2
   83630:	bd30      	pop	{r4, r5, pc}
   83632:	ea91 0f03 	teq	r1, r3
   83636:	bf1e      	ittt	ne
   83638:	2100      	movne	r1, #0
   8363a:	2000      	movne	r0, #0
   8363c:	bd30      	popne	{r4, r5, pc}
   8363e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   83642:	d105      	bne.n	83650 <__adddf3+0x230>
   83644:	0040      	lsls	r0, r0, #1
   83646:	4149      	adcs	r1, r1
   83648:	bf28      	it	cs
   8364a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   8364e:	bd30      	pop	{r4, r5, pc}
   83650:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   83654:	bf3c      	itt	cc
   83656:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   8365a:	bd30      	popcc	{r4, r5, pc}
   8365c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   83660:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   83664:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   83668:	f04f 0000 	mov.w	r0, #0
   8366c:	bd30      	pop	{r4, r5, pc}
   8366e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   83672:	bf1a      	itte	ne
   83674:	4619      	movne	r1, r3
   83676:	4610      	movne	r0, r2
   83678:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   8367c:	bf1c      	itt	ne
   8367e:	460b      	movne	r3, r1
   83680:	4602      	movne	r2, r0
   83682:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   83686:	bf06      	itte	eq
   83688:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   8368c:	ea91 0f03 	teqeq	r1, r3
   83690:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   83694:	bd30      	pop	{r4, r5, pc}
   83696:	bf00      	nop

00083698 <__aeabi_ui2d>:
   83698:	f090 0f00 	teq	r0, #0
   8369c:	bf04      	itt	eq
   8369e:	2100      	moveq	r1, #0
   836a0:	4770      	bxeq	lr
   836a2:	b530      	push	{r4, r5, lr}
   836a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   836a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   836ac:	f04f 0500 	mov.w	r5, #0
   836b0:	f04f 0100 	mov.w	r1, #0
   836b4:	e750      	b.n	83558 <__adddf3+0x138>
   836b6:	bf00      	nop

000836b8 <__aeabi_i2d>:
   836b8:	f090 0f00 	teq	r0, #0
   836bc:	bf04      	itt	eq
   836be:	2100      	moveq	r1, #0
   836c0:	4770      	bxeq	lr
   836c2:	b530      	push	{r4, r5, lr}
   836c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   836c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   836cc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   836d0:	bf48      	it	mi
   836d2:	4240      	negmi	r0, r0
   836d4:	f04f 0100 	mov.w	r1, #0
   836d8:	e73e      	b.n	83558 <__adddf3+0x138>
   836da:	bf00      	nop

000836dc <__aeabi_f2d>:
   836dc:	0042      	lsls	r2, r0, #1
   836de:	ea4f 01e2 	mov.w	r1, r2, asr #3
   836e2:	ea4f 0131 	mov.w	r1, r1, rrx
   836e6:	ea4f 7002 	mov.w	r0, r2, lsl #28
   836ea:	bf1f      	itttt	ne
   836ec:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   836f0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   836f4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   836f8:	4770      	bxne	lr
   836fa:	f092 0f00 	teq	r2, #0
   836fe:	bf14      	ite	ne
   83700:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   83704:	4770      	bxeq	lr
   83706:	b530      	push	{r4, r5, lr}
   83708:	f44f 7460 	mov.w	r4, #896	; 0x380
   8370c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   83710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   83714:	e720      	b.n	83558 <__adddf3+0x138>
   83716:	bf00      	nop

00083718 <__aeabi_ul2d>:
   83718:	ea50 0201 	orrs.w	r2, r0, r1
   8371c:	bf08      	it	eq
   8371e:	4770      	bxeq	lr
   83720:	b530      	push	{r4, r5, lr}
   83722:	f04f 0500 	mov.w	r5, #0
   83726:	e00a      	b.n	8373e <__aeabi_l2d+0x16>

00083728 <__aeabi_l2d>:
   83728:	ea50 0201 	orrs.w	r2, r0, r1
   8372c:	bf08      	it	eq
   8372e:	4770      	bxeq	lr
   83730:	b530      	push	{r4, r5, lr}
   83732:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   83736:	d502      	bpl.n	8373e <__aeabi_l2d+0x16>
   83738:	4240      	negs	r0, r0
   8373a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8373e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   83742:	f104 0432 	add.w	r4, r4, #50	; 0x32
   83746:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   8374a:	f43f aedc 	beq.w	83506 <__adddf3+0xe6>
   8374e:	f04f 0203 	mov.w	r2, #3
   83752:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   83756:	bf18      	it	ne
   83758:	3203      	addne	r2, #3
   8375a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8375e:	bf18      	it	ne
   83760:	3203      	addne	r2, #3
   83762:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   83766:	f1c2 0320 	rsb	r3, r2, #32
   8376a:	fa00 fc03 	lsl.w	ip, r0, r3
   8376e:	fa20 f002 	lsr.w	r0, r0, r2
   83772:	fa01 fe03 	lsl.w	lr, r1, r3
   83776:	ea40 000e 	orr.w	r0, r0, lr
   8377a:	fa21 f102 	lsr.w	r1, r1, r2
   8377e:	4414      	add	r4, r2
   83780:	e6c1      	b.n	83506 <__adddf3+0xe6>
   83782:	bf00      	nop

00083784 <__aeabi_d2uiz>:
   83784:	004a      	lsls	r2, r1, #1
   83786:	d211      	bcs.n	837ac <__aeabi_d2uiz+0x28>
   83788:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   8378c:	d211      	bcs.n	837b2 <__aeabi_d2uiz+0x2e>
   8378e:	d50d      	bpl.n	837ac <__aeabi_d2uiz+0x28>
   83790:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   83794:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   83798:	d40e      	bmi.n	837b8 <__aeabi_d2uiz+0x34>
   8379a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8379e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   837a2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   837a6:	fa23 f002 	lsr.w	r0, r3, r2
   837aa:	4770      	bx	lr
   837ac:	f04f 0000 	mov.w	r0, #0
   837b0:	4770      	bx	lr
   837b2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   837b6:	d102      	bne.n	837be <__aeabi_d2uiz+0x3a>
   837b8:	f04f 30ff 	mov.w	r0, #4294967295
   837bc:	4770      	bx	lr
   837be:	f04f 0000 	mov.w	r0, #0
   837c2:	4770      	bx	lr

000837c4 <__libc_init_array>:
   837c4:	b570      	push	{r4, r5, r6, lr}
   837c6:	4e0f      	ldr	r6, [pc, #60]	; (83804 <__libc_init_array+0x40>)
   837c8:	4d0f      	ldr	r5, [pc, #60]	; (83808 <__libc_init_array+0x44>)
   837ca:	1b76      	subs	r6, r6, r5
   837cc:	10b6      	asrs	r6, r6, #2
   837ce:	bf18      	it	ne
   837d0:	2400      	movne	r4, #0
   837d2:	d005      	beq.n	837e0 <__libc_init_array+0x1c>
   837d4:	3401      	adds	r4, #1
   837d6:	f855 3b04 	ldr.w	r3, [r5], #4
   837da:	4798      	blx	r3
   837dc:	42a6      	cmp	r6, r4
   837de:	d1f9      	bne.n	837d4 <__libc_init_array+0x10>
   837e0:	4e0a      	ldr	r6, [pc, #40]	; (8380c <__libc_init_array+0x48>)
   837e2:	4d0b      	ldr	r5, [pc, #44]	; (83810 <__libc_init_array+0x4c>)
   837e4:	f002 fffa 	bl	867dc <_init>
   837e8:	1b76      	subs	r6, r6, r5
   837ea:	10b6      	asrs	r6, r6, #2
   837ec:	bf18      	it	ne
   837ee:	2400      	movne	r4, #0
   837f0:	d006      	beq.n	83800 <__libc_init_array+0x3c>
   837f2:	3401      	adds	r4, #1
   837f4:	f855 3b04 	ldr.w	r3, [r5], #4
   837f8:	4798      	blx	r3
   837fa:	42a6      	cmp	r6, r4
   837fc:	d1f9      	bne.n	837f2 <__libc_init_array+0x2e>
   837fe:	bd70      	pop	{r4, r5, r6, pc}
   83800:	bd70      	pop	{r4, r5, r6, pc}
   83802:	bf00      	nop
   83804:	000867e8 	.word	0x000867e8
   83808:	000867e8 	.word	0x000867e8
   8380c:	000867f0 	.word	0x000867f0
   83810:	000867e8 	.word	0x000867e8

00083814 <iprintf>:
   83814:	b40f      	push	{r0, r1, r2, r3}
   83816:	b510      	push	{r4, lr}
   83818:	4b07      	ldr	r3, [pc, #28]	; (83838 <iprintf+0x24>)
   8381a:	b082      	sub	sp, #8
   8381c:	ac04      	add	r4, sp, #16
   8381e:	f854 2b04 	ldr.w	r2, [r4], #4
   83822:	6818      	ldr	r0, [r3, #0]
   83824:	4623      	mov	r3, r4
   83826:	6881      	ldr	r1, [r0, #8]
   83828:	9401      	str	r4, [sp, #4]
   8382a:	f000 f96f 	bl	83b0c <_vfiprintf_r>
   8382e:	b002      	add	sp, #8
   83830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   83834:	b004      	add	sp, #16
   83836:	4770      	bx	lr
   83838:	20070830 	.word	0x20070830

0008383c <memset>:
   8383c:	b470      	push	{r4, r5, r6}
   8383e:	0784      	lsls	r4, r0, #30
   83840:	d046      	beq.n	838d0 <memset+0x94>
   83842:	1e54      	subs	r4, r2, #1
   83844:	2a00      	cmp	r2, #0
   83846:	d041      	beq.n	838cc <memset+0x90>
   83848:	b2cd      	uxtb	r5, r1
   8384a:	4603      	mov	r3, r0
   8384c:	e002      	b.n	83854 <memset+0x18>
   8384e:	1e62      	subs	r2, r4, #1
   83850:	b3e4      	cbz	r4, 838cc <memset+0x90>
   83852:	4614      	mov	r4, r2
   83854:	f803 5b01 	strb.w	r5, [r3], #1
   83858:	079a      	lsls	r2, r3, #30
   8385a:	d1f8      	bne.n	8384e <memset+0x12>
   8385c:	2c03      	cmp	r4, #3
   8385e:	d92e      	bls.n	838be <memset+0x82>
   83860:	b2cd      	uxtb	r5, r1
   83862:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   83866:	2c0f      	cmp	r4, #15
   83868:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   8386c:	d919      	bls.n	838a2 <memset+0x66>
   8386e:	4626      	mov	r6, r4
   83870:	f103 0210 	add.w	r2, r3, #16
   83874:	3e10      	subs	r6, #16
   83876:	2e0f      	cmp	r6, #15
   83878:	f842 5c10 	str.w	r5, [r2, #-16]
   8387c:	f842 5c0c 	str.w	r5, [r2, #-12]
   83880:	f842 5c08 	str.w	r5, [r2, #-8]
   83884:	f842 5c04 	str.w	r5, [r2, #-4]
   83888:	f102 0210 	add.w	r2, r2, #16
   8388c:	d8f2      	bhi.n	83874 <memset+0x38>
   8388e:	f1a4 0210 	sub.w	r2, r4, #16
   83892:	f022 020f 	bic.w	r2, r2, #15
   83896:	f004 040f 	and.w	r4, r4, #15
   8389a:	3210      	adds	r2, #16
   8389c:	2c03      	cmp	r4, #3
   8389e:	4413      	add	r3, r2
   838a0:	d90d      	bls.n	838be <memset+0x82>
   838a2:	461e      	mov	r6, r3
   838a4:	4622      	mov	r2, r4
   838a6:	3a04      	subs	r2, #4
   838a8:	2a03      	cmp	r2, #3
   838aa:	f846 5b04 	str.w	r5, [r6], #4
   838ae:	d8fa      	bhi.n	838a6 <memset+0x6a>
   838b0:	1f22      	subs	r2, r4, #4
   838b2:	f022 0203 	bic.w	r2, r2, #3
   838b6:	3204      	adds	r2, #4
   838b8:	4413      	add	r3, r2
   838ba:	f004 0403 	and.w	r4, r4, #3
   838be:	b12c      	cbz	r4, 838cc <memset+0x90>
   838c0:	b2c9      	uxtb	r1, r1
   838c2:	441c      	add	r4, r3
   838c4:	f803 1b01 	strb.w	r1, [r3], #1
   838c8:	42a3      	cmp	r3, r4
   838ca:	d1fb      	bne.n	838c4 <memset+0x88>
   838cc:	bc70      	pop	{r4, r5, r6}
   838ce:	4770      	bx	lr
   838d0:	4614      	mov	r4, r2
   838d2:	4603      	mov	r3, r0
   838d4:	e7c2      	b.n	8385c <memset+0x20>
   838d6:	bf00      	nop

000838d8 <setbuf>:
   838d8:	2900      	cmp	r1, #0
   838da:	bf0c      	ite	eq
   838dc:	2202      	moveq	r2, #2
   838de:	2200      	movne	r2, #0
   838e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
   838e4:	f000 b800 	b.w	838e8 <setvbuf>

000838e8 <setvbuf>:
   838e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   838ec:	4d51      	ldr	r5, [pc, #324]	; (83a34 <setvbuf+0x14c>)
   838ee:	b083      	sub	sp, #12
   838f0:	682d      	ldr	r5, [r5, #0]
   838f2:	4604      	mov	r4, r0
   838f4:	460f      	mov	r7, r1
   838f6:	4690      	mov	r8, r2
   838f8:	461e      	mov	r6, r3
   838fa:	b115      	cbz	r5, 83902 <setvbuf+0x1a>
   838fc:	6bab      	ldr	r3, [r5, #56]	; 0x38
   838fe:	2b00      	cmp	r3, #0
   83900:	d079      	beq.n	839f6 <setvbuf+0x10e>
   83902:	f1b8 0f02 	cmp.w	r8, #2
   83906:	d004      	beq.n	83912 <setvbuf+0x2a>
   83908:	f1b8 0f01 	cmp.w	r8, #1
   8390c:	d87f      	bhi.n	83a0e <setvbuf+0x126>
   8390e:	2e00      	cmp	r6, #0
   83910:	db7d      	blt.n	83a0e <setvbuf+0x126>
   83912:	4621      	mov	r1, r4
   83914:	4628      	mov	r0, r5
   83916:	f001 f93b 	bl	84b90 <_fflush_r>
   8391a:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8391c:	b141      	cbz	r1, 83930 <setvbuf+0x48>
   8391e:	f104 0340 	add.w	r3, r4, #64	; 0x40
   83922:	4299      	cmp	r1, r3
   83924:	d002      	beq.n	8392c <setvbuf+0x44>
   83926:	4628      	mov	r0, r5
   83928:	f001 fa8e 	bl	84e48 <_free_r>
   8392c:	2300      	movs	r3, #0
   8392e:	6323      	str	r3, [r4, #48]	; 0x30
   83930:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83934:	2200      	movs	r2, #0
   83936:	61a2      	str	r2, [r4, #24]
   83938:	6062      	str	r2, [r4, #4]
   8393a:	061a      	lsls	r2, r3, #24
   8393c:	d454      	bmi.n	839e8 <setvbuf+0x100>
   8393e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
   83942:	f023 0303 	bic.w	r3, r3, #3
   83946:	f1b8 0f02 	cmp.w	r8, #2
   8394a:	81a3      	strh	r3, [r4, #12]
   8394c:	d039      	beq.n	839c2 <setvbuf+0xda>
   8394e:	ab01      	add	r3, sp, #4
   83950:	466a      	mov	r2, sp
   83952:	4621      	mov	r1, r4
   83954:	4628      	mov	r0, r5
   83956:	f001 fd15 	bl	85384 <__swhatbuf_r>
   8395a:	89a3      	ldrh	r3, [r4, #12]
   8395c:	4318      	orrs	r0, r3
   8395e:	81a0      	strh	r0, [r4, #12]
   83960:	b326      	cbz	r6, 839ac <setvbuf+0xc4>
   83962:	b327      	cbz	r7, 839ae <setvbuf+0xc6>
   83964:	6bab      	ldr	r3, [r5, #56]	; 0x38
   83966:	2b00      	cmp	r3, #0
   83968:	d04d      	beq.n	83a06 <setvbuf+0x11e>
   8396a:	9b00      	ldr	r3, [sp, #0]
   8396c:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   83970:	429e      	cmp	r6, r3
   83972:	bf1c      	itt	ne
   83974:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
   83978:	81a0      	strhne	r0, [r4, #12]
   8397a:	f1b8 0f01 	cmp.w	r8, #1
   8397e:	bf08      	it	eq
   83980:	f040 0001 	orreq.w	r0, r0, #1
   83984:	b283      	uxth	r3, r0
   83986:	bf08      	it	eq
   83988:	81a0      	strheq	r0, [r4, #12]
   8398a:	f003 0008 	and.w	r0, r3, #8
   8398e:	b280      	uxth	r0, r0
   83990:	6027      	str	r7, [r4, #0]
   83992:	6127      	str	r7, [r4, #16]
   83994:	6166      	str	r6, [r4, #20]
   83996:	b318      	cbz	r0, 839e0 <setvbuf+0xf8>
   83998:	f013 0001 	ands.w	r0, r3, #1
   8399c:	d02f      	beq.n	839fe <setvbuf+0x116>
   8399e:	2000      	movs	r0, #0
   839a0:	4276      	negs	r6, r6
   839a2:	61a6      	str	r6, [r4, #24]
   839a4:	60a0      	str	r0, [r4, #8]
   839a6:	b003      	add	sp, #12
   839a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   839ac:	9e00      	ldr	r6, [sp, #0]
   839ae:	4630      	mov	r0, r6
   839b0:	f001 fd5c 	bl	8546c <malloc>
   839b4:	4607      	mov	r7, r0
   839b6:	b368      	cbz	r0, 83a14 <setvbuf+0x12c>
   839b8:	89a3      	ldrh	r3, [r4, #12]
   839ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   839be:	81a3      	strh	r3, [r4, #12]
   839c0:	e7d0      	b.n	83964 <setvbuf+0x7c>
   839c2:	2000      	movs	r0, #0
   839c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
   839c8:	f043 0302 	orr.w	r3, r3, #2
   839cc:	2500      	movs	r5, #0
   839ce:	2101      	movs	r1, #1
   839d0:	81a3      	strh	r3, [r4, #12]
   839d2:	60a5      	str	r5, [r4, #8]
   839d4:	6022      	str	r2, [r4, #0]
   839d6:	6122      	str	r2, [r4, #16]
   839d8:	6161      	str	r1, [r4, #20]
   839da:	b003      	add	sp, #12
   839dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   839e0:	60a0      	str	r0, [r4, #8]
   839e2:	b003      	add	sp, #12
   839e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   839e8:	6921      	ldr	r1, [r4, #16]
   839ea:	4628      	mov	r0, r5
   839ec:	f001 fa2c 	bl	84e48 <_free_r>
   839f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   839f4:	e7a3      	b.n	8393e <setvbuf+0x56>
   839f6:	4628      	mov	r0, r5
   839f8:	f001 f95e 	bl	84cb8 <__sinit>
   839fc:	e781      	b.n	83902 <setvbuf+0x1a>
   839fe:	60a6      	str	r6, [r4, #8]
   83a00:	b003      	add	sp, #12
   83a02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   83a06:	4628      	mov	r0, r5
   83a08:	f001 f956 	bl	84cb8 <__sinit>
   83a0c:	e7ad      	b.n	8396a <setvbuf+0x82>
   83a0e:	f04f 30ff 	mov.w	r0, #4294967295
   83a12:	e7e2      	b.n	839da <setvbuf+0xf2>
   83a14:	f8dd 9000 	ldr.w	r9, [sp]
   83a18:	45b1      	cmp	r9, r6
   83a1a:	d006      	beq.n	83a2a <setvbuf+0x142>
   83a1c:	4648      	mov	r0, r9
   83a1e:	f001 fd25 	bl	8546c <malloc>
   83a22:	4607      	mov	r7, r0
   83a24:	b108      	cbz	r0, 83a2a <setvbuf+0x142>
   83a26:	464e      	mov	r6, r9
   83a28:	e7c6      	b.n	839b8 <setvbuf+0xd0>
   83a2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83a2e:	f04f 30ff 	mov.w	r0, #4294967295
   83a32:	e7c7      	b.n	839c4 <setvbuf+0xdc>
   83a34:	20070830 	.word	0x20070830

00083a38 <strlen>:
   83a38:	f020 0103 	bic.w	r1, r0, #3
   83a3c:	f010 0003 	ands.w	r0, r0, #3
   83a40:	f1c0 0000 	rsb	r0, r0, #0
   83a44:	f851 3b04 	ldr.w	r3, [r1], #4
   83a48:	f100 0c04 	add.w	ip, r0, #4
   83a4c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   83a50:	f06f 0200 	mvn.w	r2, #0
   83a54:	bf1c      	itt	ne
   83a56:	fa22 f20c 	lsrne.w	r2, r2, ip
   83a5a:	4313      	orrne	r3, r2
   83a5c:	f04f 0c01 	mov.w	ip, #1
   83a60:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   83a64:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   83a68:	eba3 020c 	sub.w	r2, r3, ip
   83a6c:	ea22 0203 	bic.w	r2, r2, r3
   83a70:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   83a74:	bf04      	itt	eq
   83a76:	f851 3b04 	ldreq.w	r3, [r1], #4
   83a7a:	3004      	addeq	r0, #4
   83a7c:	d0f4      	beq.n	83a68 <strlen+0x30>
   83a7e:	f1c2 0100 	rsb	r1, r2, #0
   83a82:	ea02 0201 	and.w	r2, r2, r1
   83a86:	fab2 f282 	clz	r2, r2
   83a8a:	f1c2 021f 	rsb	r2, r2, #31
   83a8e:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   83a92:	4770      	bx	lr

00083a94 <__sprint_r.part.0>:
   83a94:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   83a96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   83a9a:	049c      	lsls	r4, r3, #18
   83a9c:	4692      	mov	sl, r2
   83a9e:	d52c      	bpl.n	83afa <__sprint_r.part.0+0x66>
   83aa0:	6893      	ldr	r3, [r2, #8]
   83aa2:	6812      	ldr	r2, [r2, #0]
   83aa4:	b33b      	cbz	r3, 83af6 <__sprint_r.part.0+0x62>
   83aa6:	460f      	mov	r7, r1
   83aa8:	4680      	mov	r8, r0
   83aaa:	f102 0908 	add.w	r9, r2, #8
   83aae:	e919 0060 	ldmdb	r9, {r5, r6}
   83ab2:	08b6      	lsrs	r6, r6, #2
   83ab4:	d017      	beq.n	83ae6 <__sprint_r.part.0+0x52>
   83ab6:	3d04      	subs	r5, #4
   83ab8:	2400      	movs	r4, #0
   83aba:	e001      	b.n	83ac0 <__sprint_r.part.0+0x2c>
   83abc:	42a6      	cmp	r6, r4
   83abe:	d010      	beq.n	83ae2 <__sprint_r.part.0+0x4e>
   83ac0:	463a      	mov	r2, r7
   83ac2:	f855 1f04 	ldr.w	r1, [r5, #4]!
   83ac6:	4640      	mov	r0, r8
   83ac8:	f001 f95e 	bl	84d88 <_fputwc_r>
   83acc:	1c43      	adds	r3, r0, #1
   83ace:	f104 0401 	add.w	r4, r4, #1
   83ad2:	d1f3      	bne.n	83abc <__sprint_r.part.0+0x28>
   83ad4:	2300      	movs	r3, #0
   83ad6:	f8ca 3008 	str.w	r3, [sl, #8]
   83ada:	f8ca 3004 	str.w	r3, [sl, #4]
   83ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83ae2:	f8da 3008 	ldr.w	r3, [sl, #8]
   83ae6:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
   83aea:	f8ca 3008 	str.w	r3, [sl, #8]
   83aee:	f109 0908 	add.w	r9, r9, #8
   83af2:	2b00      	cmp	r3, #0
   83af4:	d1db      	bne.n	83aae <__sprint_r.part.0+0x1a>
   83af6:	2000      	movs	r0, #0
   83af8:	e7ec      	b.n	83ad4 <__sprint_r.part.0+0x40>
   83afa:	f001 fa8d 	bl	85018 <__sfvwrite_r>
   83afe:	2300      	movs	r3, #0
   83b00:	f8ca 3008 	str.w	r3, [sl, #8]
   83b04:	f8ca 3004 	str.w	r3, [sl, #4]
   83b08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00083b0c <_vfiprintf_r>:
   83b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83b10:	b0ab      	sub	sp, #172	; 0xac
   83b12:	461c      	mov	r4, r3
   83b14:	9100      	str	r1, [sp, #0]
   83b16:	4690      	mov	r8, r2
   83b18:	9304      	str	r3, [sp, #16]
   83b1a:	9005      	str	r0, [sp, #20]
   83b1c:	b118      	cbz	r0, 83b26 <_vfiprintf_r+0x1a>
   83b1e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83b20:	2b00      	cmp	r3, #0
   83b22:	f000 80de 	beq.w	83ce2 <_vfiprintf_r+0x1d6>
   83b26:	9800      	ldr	r0, [sp, #0]
   83b28:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   83b2c:	b28a      	uxth	r2, r1
   83b2e:	0495      	lsls	r5, r2, #18
   83b30:	d407      	bmi.n	83b42 <_vfiprintf_r+0x36>
   83b32:	6e43      	ldr	r3, [r0, #100]	; 0x64
   83b34:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
   83b38:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   83b3c:	8182      	strh	r2, [r0, #12]
   83b3e:	6643      	str	r3, [r0, #100]	; 0x64
   83b40:	b292      	uxth	r2, r2
   83b42:	0711      	lsls	r1, r2, #28
   83b44:	f140 80b1 	bpl.w	83caa <_vfiprintf_r+0x19e>
   83b48:	9b00      	ldr	r3, [sp, #0]
   83b4a:	691b      	ldr	r3, [r3, #16]
   83b4c:	2b00      	cmp	r3, #0
   83b4e:	f000 80ac 	beq.w	83caa <_vfiprintf_r+0x19e>
   83b52:	f002 021a 	and.w	r2, r2, #26
   83b56:	2a0a      	cmp	r2, #10
   83b58:	f000 80b5 	beq.w	83cc6 <_vfiprintf_r+0x1ba>
   83b5c:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
   83b60:	46d3      	mov	fp, sl
   83b62:	2300      	movs	r3, #0
   83b64:	9302      	str	r3, [sp, #8]
   83b66:	930f      	str	r3, [sp, #60]	; 0x3c
   83b68:	930e      	str	r3, [sp, #56]	; 0x38
   83b6a:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
   83b6e:	f898 3000 	ldrb.w	r3, [r8]
   83b72:	4644      	mov	r4, r8
   83b74:	b1fb      	cbz	r3, 83bb6 <_vfiprintf_r+0xaa>
   83b76:	2b25      	cmp	r3, #37	; 0x25
   83b78:	d102      	bne.n	83b80 <_vfiprintf_r+0x74>
   83b7a:	e01c      	b.n	83bb6 <_vfiprintf_r+0xaa>
   83b7c:	2b25      	cmp	r3, #37	; 0x25
   83b7e:	d003      	beq.n	83b88 <_vfiprintf_r+0x7c>
   83b80:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   83b84:	2b00      	cmp	r3, #0
   83b86:	d1f9      	bne.n	83b7c <_vfiprintf_r+0x70>
   83b88:	ebc8 0504 	rsb	r5, r8, r4
   83b8c:	b19d      	cbz	r5, 83bb6 <_vfiprintf_r+0xaa>
   83b8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   83b90:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   83b92:	3301      	adds	r3, #1
   83b94:	442a      	add	r2, r5
   83b96:	2b07      	cmp	r3, #7
   83b98:	f8cb 8000 	str.w	r8, [fp]
   83b9c:	f8cb 5004 	str.w	r5, [fp, #4]
   83ba0:	920f      	str	r2, [sp, #60]	; 0x3c
   83ba2:	930e      	str	r3, [sp, #56]	; 0x38
   83ba4:	dd7b      	ble.n	83c9e <_vfiprintf_r+0x192>
   83ba6:	2a00      	cmp	r2, #0
   83ba8:	f040 851f 	bne.w	845ea <_vfiprintf_r+0xade>
   83bac:	46d3      	mov	fp, sl
   83bae:	9b02      	ldr	r3, [sp, #8]
   83bb0:	920e      	str	r2, [sp, #56]	; 0x38
   83bb2:	442b      	add	r3, r5
   83bb4:	9302      	str	r3, [sp, #8]
   83bb6:	7823      	ldrb	r3, [r4, #0]
   83bb8:	2b00      	cmp	r3, #0
   83bba:	f000 843b 	beq.w	84434 <_vfiprintf_r+0x928>
   83bbe:	f04f 0300 	mov.w	r3, #0
   83bc2:	2100      	movs	r1, #0
   83bc4:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   83bc8:	f104 0801 	add.w	r8, r4, #1
   83bcc:	7863      	ldrb	r3, [r4, #1]
   83bce:	4608      	mov	r0, r1
   83bd0:	460e      	mov	r6, r1
   83bd2:	460c      	mov	r4, r1
   83bd4:	f04f 32ff 	mov.w	r2, #4294967295
   83bd8:	9201      	str	r2, [sp, #4]
   83bda:	f108 0801 	add.w	r8, r8, #1
   83bde:	f1a3 0220 	sub.w	r2, r3, #32
   83be2:	2a58      	cmp	r2, #88	; 0x58
   83be4:	f200 838b 	bhi.w	842fe <_vfiprintf_r+0x7f2>
   83be8:	e8df f012 	tbh	[pc, r2, lsl #1]
   83bec:	0389033d 	.word	0x0389033d
   83bf0:	03450389 	.word	0x03450389
   83bf4:	03890389 	.word	0x03890389
   83bf8:	03890389 	.word	0x03890389
   83bfc:	03890389 	.word	0x03890389
   83c00:	026b007e 	.word	0x026b007e
   83c04:	00860389 	.word	0x00860389
   83c08:	03890270 	.word	0x03890270
   83c0c:	025d01cc 	.word	0x025d01cc
   83c10:	025d025d 	.word	0x025d025d
   83c14:	025d025d 	.word	0x025d025d
   83c18:	025d025d 	.word	0x025d025d
   83c1c:	025d025d 	.word	0x025d025d
   83c20:	03890389 	.word	0x03890389
   83c24:	03890389 	.word	0x03890389
   83c28:	03890389 	.word	0x03890389
   83c2c:	03890389 	.word	0x03890389
   83c30:	03890389 	.word	0x03890389
   83c34:	038901d1 	.word	0x038901d1
   83c38:	03890389 	.word	0x03890389
   83c3c:	03890389 	.word	0x03890389
   83c40:	03890389 	.word	0x03890389
   83c44:	03890389 	.word	0x03890389
   83c48:	021a0389 	.word	0x021a0389
   83c4c:	03890389 	.word	0x03890389
   83c50:	03890389 	.word	0x03890389
   83c54:	02e50389 	.word	0x02e50389
   83c58:	03890389 	.word	0x03890389
   83c5c:	03890308 	.word	0x03890308
   83c60:	03890389 	.word	0x03890389
   83c64:	03890389 	.word	0x03890389
   83c68:	03890389 	.word	0x03890389
   83c6c:	03890389 	.word	0x03890389
   83c70:	032b0389 	.word	0x032b0389
   83c74:	03890382 	.word	0x03890382
   83c78:	03890389 	.word	0x03890389
   83c7c:	0382035e 	.word	0x0382035e
   83c80:	03890389 	.word	0x03890389
   83c84:	03890363 	.word	0x03890363
   83c88:	028d0370 	.word	0x028d0370
   83c8c:	02e0008b 	.word	0x02e0008b
   83c90:	02930389 	.word	0x02930389
   83c94:	02b20389 	.word	0x02b20389
   83c98:	03890389 	.word	0x03890389
   83c9c:	034a      	.short	0x034a
   83c9e:	f10b 0b08 	add.w	fp, fp, #8
   83ca2:	9b02      	ldr	r3, [sp, #8]
   83ca4:	442b      	add	r3, r5
   83ca6:	9302      	str	r3, [sp, #8]
   83ca8:	e785      	b.n	83bb6 <_vfiprintf_r+0xaa>
   83caa:	9900      	ldr	r1, [sp, #0]
   83cac:	9805      	ldr	r0, [sp, #20]
   83cae:	f000 fe57 	bl	84960 <__swsetup_r>
   83cb2:	2800      	cmp	r0, #0
   83cb4:	f040 8545 	bne.w	84742 <_vfiprintf_r+0xc36>
   83cb8:	9b00      	ldr	r3, [sp, #0]
   83cba:	899a      	ldrh	r2, [r3, #12]
   83cbc:	f002 021a 	and.w	r2, r2, #26
   83cc0:	2a0a      	cmp	r2, #10
   83cc2:	f47f af4b 	bne.w	83b5c <_vfiprintf_r+0x50>
   83cc6:	9900      	ldr	r1, [sp, #0]
   83cc8:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
   83ccc:	2b00      	cmp	r3, #0
   83cce:	f6ff af45 	blt.w	83b5c <_vfiprintf_r+0x50>
   83cd2:	4623      	mov	r3, r4
   83cd4:	4642      	mov	r2, r8
   83cd6:	9805      	ldr	r0, [sp, #20]
   83cd8:	f000 fe0c 	bl	848f4 <__sbprintf>
   83cdc:	b02b      	add	sp, #172	; 0xac
   83cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83ce2:	f000 ffe9 	bl	84cb8 <__sinit>
   83ce6:	e71e      	b.n	83b26 <_vfiprintf_r+0x1a>
   83ce8:	9a04      	ldr	r2, [sp, #16]
   83cea:	4613      	mov	r3, r2
   83cec:	6814      	ldr	r4, [r2, #0]
   83cee:	3304      	adds	r3, #4
   83cf0:	2c00      	cmp	r4, #0
   83cf2:	9304      	str	r3, [sp, #16]
   83cf4:	da02      	bge.n	83cfc <_vfiprintf_r+0x1f0>
   83cf6:	4264      	negs	r4, r4
   83cf8:	f046 0604 	orr.w	r6, r6, #4
   83cfc:	f898 3000 	ldrb.w	r3, [r8]
   83d00:	e76b      	b.n	83bda <_vfiprintf_r+0xce>
   83d02:	f04f 0300 	mov.w	r3, #0
   83d06:	9804      	ldr	r0, [sp, #16]
   83d08:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   83d0c:	4603      	mov	r3, r0
   83d0e:	2130      	movs	r1, #48	; 0x30
   83d10:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
   83d14:	9901      	ldr	r1, [sp, #4]
   83d16:	2278      	movs	r2, #120	; 0x78
   83d18:	2900      	cmp	r1, #0
   83d1a:	9406      	str	r4, [sp, #24]
   83d1c:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
   83d20:	6804      	ldr	r4, [r0, #0]
   83d22:	f103 0304 	add.w	r3, r3, #4
   83d26:	f04f 0500 	mov.w	r5, #0
   83d2a:	f046 0202 	orr.w	r2, r6, #2
   83d2e:	f2c0 850c 	blt.w	8474a <_vfiprintf_r+0xc3e>
   83d32:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   83d36:	ea54 0205 	orrs.w	r2, r4, r5
   83d3a:	f046 0602 	orr.w	r6, r6, #2
   83d3e:	9304      	str	r3, [sp, #16]
   83d40:	f040 84b5 	bne.w	846ae <_vfiprintf_r+0xba2>
   83d44:	48b3      	ldr	r0, [pc, #716]	; (84014 <_vfiprintf_r+0x508>)
   83d46:	9b01      	ldr	r3, [sp, #4]
   83d48:	2b00      	cmp	r3, #0
   83d4a:	f040 8462 	bne.w	84612 <_vfiprintf_r+0xb06>
   83d4e:	4699      	mov	r9, r3
   83d50:	4657      	mov	r7, sl
   83d52:	2300      	movs	r3, #0
   83d54:	9301      	str	r3, [sp, #4]
   83d56:	9303      	str	r3, [sp, #12]
   83d58:	9b01      	ldr	r3, [sp, #4]
   83d5a:	9a03      	ldr	r2, [sp, #12]
   83d5c:	4293      	cmp	r3, r2
   83d5e:	bfb8      	it	lt
   83d60:	4613      	movlt	r3, r2
   83d62:	461d      	mov	r5, r3
   83d64:	f1b9 0f00 	cmp.w	r9, #0
   83d68:	d000      	beq.n	83d6c <_vfiprintf_r+0x260>
   83d6a:	3501      	adds	r5, #1
   83d6c:	f016 0302 	ands.w	r3, r6, #2
   83d70:	9307      	str	r3, [sp, #28]
   83d72:	bf18      	it	ne
   83d74:	3502      	addne	r5, #2
   83d76:	f016 0384 	ands.w	r3, r6, #132	; 0x84
   83d7a:	9308      	str	r3, [sp, #32]
   83d7c:	f040 82e8 	bne.w	84350 <_vfiprintf_r+0x844>
   83d80:	9b06      	ldr	r3, [sp, #24]
   83d82:	1b5c      	subs	r4, r3, r5
   83d84:	2c00      	cmp	r4, #0
   83d86:	f340 82e3 	ble.w	84350 <_vfiprintf_r+0x844>
   83d8a:	2c10      	cmp	r4, #16
   83d8c:	f340 853c 	ble.w	84808 <_vfiprintf_r+0xcfc>
   83d90:	f8df 9284 	ldr.w	r9, [pc, #644]	; 84018 <_vfiprintf_r+0x50c>
   83d94:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
   83d98:	46dc      	mov	ip, fp
   83d9a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   83d9c:	46c3      	mov	fp, r8
   83d9e:	2310      	movs	r3, #16
   83da0:	46a8      	mov	r8, r5
   83da2:	4670      	mov	r0, lr
   83da4:	464d      	mov	r5, r9
   83da6:	f8dd 9014 	ldr.w	r9, [sp, #20]
   83daa:	e007      	b.n	83dbc <_vfiprintf_r+0x2b0>
   83dac:	f100 0e02 	add.w	lr, r0, #2
   83db0:	4608      	mov	r0, r1
   83db2:	f10c 0c08 	add.w	ip, ip, #8
   83db6:	3c10      	subs	r4, #16
   83db8:	2c10      	cmp	r4, #16
   83dba:	dd13      	ble.n	83de4 <_vfiprintf_r+0x2d8>
   83dbc:	1c41      	adds	r1, r0, #1
   83dbe:	3210      	adds	r2, #16
   83dc0:	2907      	cmp	r1, #7
   83dc2:	920f      	str	r2, [sp, #60]	; 0x3c
   83dc4:	f8cc 5000 	str.w	r5, [ip]
   83dc8:	f8cc 3004 	str.w	r3, [ip, #4]
   83dcc:	910e      	str	r1, [sp, #56]	; 0x38
   83dce:	dded      	ble.n	83dac <_vfiprintf_r+0x2a0>
   83dd0:	2a00      	cmp	r2, #0
   83dd2:	f040 82a5 	bne.w	84320 <_vfiprintf_r+0x814>
   83dd6:	3c10      	subs	r4, #16
   83dd8:	2c10      	cmp	r4, #16
   83dda:	4610      	mov	r0, r2
   83ddc:	f04f 0e01 	mov.w	lr, #1
   83de0:	46d4      	mov	ip, sl
   83de2:	dceb      	bgt.n	83dbc <_vfiprintf_r+0x2b0>
   83de4:	46a9      	mov	r9, r5
   83de6:	4670      	mov	r0, lr
   83de8:	4645      	mov	r5, r8
   83dea:	46d8      	mov	r8, fp
   83dec:	46e3      	mov	fp, ip
   83dee:	4422      	add	r2, r4
   83df0:	2807      	cmp	r0, #7
   83df2:	920f      	str	r2, [sp, #60]	; 0x3c
   83df4:	f8cb 9000 	str.w	r9, [fp]
   83df8:	f8cb 4004 	str.w	r4, [fp, #4]
   83dfc:	900e      	str	r0, [sp, #56]	; 0x38
   83dfe:	f300 836d 	bgt.w	844dc <_vfiprintf_r+0x9d0>
   83e02:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   83e06:	f10b 0b08 	add.w	fp, fp, #8
   83e0a:	f100 0e01 	add.w	lr, r0, #1
   83e0e:	2b00      	cmp	r3, #0
   83e10:	f040 82a7 	bne.w	84362 <_vfiprintf_r+0x856>
   83e14:	9b07      	ldr	r3, [sp, #28]
   83e16:	2b00      	cmp	r3, #0
   83e18:	f000 82ba 	beq.w	84390 <_vfiprintf_r+0x884>
   83e1c:	3202      	adds	r2, #2
   83e1e:	a90c      	add	r1, sp, #48	; 0x30
   83e20:	2302      	movs	r3, #2
   83e22:	f1be 0f07 	cmp.w	lr, #7
   83e26:	920f      	str	r2, [sp, #60]	; 0x3c
   83e28:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   83e2c:	e88b 000a 	stmia.w	fp, {r1, r3}
   83e30:	f340 8370 	ble.w	84514 <_vfiprintf_r+0xa08>
   83e34:	2a00      	cmp	r2, #0
   83e36:	f040 8400 	bne.w	8463a <_vfiprintf_r+0xb2e>
   83e3a:	9b08      	ldr	r3, [sp, #32]
   83e3c:	f04f 0e01 	mov.w	lr, #1
   83e40:	2b80      	cmp	r3, #128	; 0x80
   83e42:	4610      	mov	r0, r2
   83e44:	46d3      	mov	fp, sl
   83e46:	f040 82a7 	bne.w	84398 <_vfiprintf_r+0x88c>
   83e4a:	9b06      	ldr	r3, [sp, #24]
   83e4c:	1b5c      	subs	r4, r3, r5
   83e4e:	2c00      	cmp	r4, #0
   83e50:	f340 82a2 	ble.w	84398 <_vfiprintf_r+0x88c>
   83e54:	2c10      	cmp	r4, #16
   83e56:	f340 84f8 	ble.w	8484a <_vfiprintf_r+0xd3e>
   83e5a:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 8401c <_vfiprintf_r+0x510>
   83e5e:	46de      	mov	lr, fp
   83e60:	2310      	movs	r3, #16
   83e62:	46c3      	mov	fp, r8
   83e64:	46a8      	mov	r8, r5
   83e66:	464d      	mov	r5, r9
   83e68:	f8dd 9014 	ldr.w	r9, [sp, #20]
   83e6c:	e007      	b.n	83e7e <_vfiprintf_r+0x372>
   83e6e:	f100 0c02 	add.w	ip, r0, #2
   83e72:	4608      	mov	r0, r1
   83e74:	f10e 0e08 	add.w	lr, lr, #8
   83e78:	3c10      	subs	r4, #16
   83e7a:	2c10      	cmp	r4, #16
   83e7c:	dd13      	ble.n	83ea6 <_vfiprintf_r+0x39a>
   83e7e:	1c41      	adds	r1, r0, #1
   83e80:	3210      	adds	r2, #16
   83e82:	2907      	cmp	r1, #7
   83e84:	920f      	str	r2, [sp, #60]	; 0x3c
   83e86:	f8ce 5000 	str.w	r5, [lr]
   83e8a:	f8ce 3004 	str.w	r3, [lr, #4]
   83e8e:	910e      	str	r1, [sp, #56]	; 0x38
   83e90:	dded      	ble.n	83e6e <_vfiprintf_r+0x362>
   83e92:	2a00      	cmp	r2, #0
   83e94:	f040 830c 	bne.w	844b0 <_vfiprintf_r+0x9a4>
   83e98:	3c10      	subs	r4, #16
   83e9a:	2c10      	cmp	r4, #16
   83e9c:	f04f 0c01 	mov.w	ip, #1
   83ea0:	4610      	mov	r0, r2
   83ea2:	46d6      	mov	lr, sl
   83ea4:	dceb      	bgt.n	83e7e <_vfiprintf_r+0x372>
   83ea6:	46a9      	mov	r9, r5
   83ea8:	4645      	mov	r5, r8
   83eaa:	46d8      	mov	r8, fp
   83eac:	46f3      	mov	fp, lr
   83eae:	4422      	add	r2, r4
   83eb0:	f1bc 0f07 	cmp.w	ip, #7
   83eb4:	920f      	str	r2, [sp, #60]	; 0x3c
   83eb6:	f8cb 9000 	str.w	r9, [fp]
   83eba:	f8cb 4004 	str.w	r4, [fp, #4]
   83ebe:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
   83ec2:	f300 83c8 	bgt.w	84656 <_vfiprintf_r+0xb4a>
   83ec6:	9b01      	ldr	r3, [sp, #4]
   83ec8:	9903      	ldr	r1, [sp, #12]
   83eca:	f10b 0b08 	add.w	fp, fp, #8
   83ece:	1a5c      	subs	r4, r3, r1
   83ed0:	2c00      	cmp	r4, #0
   83ed2:	f10c 0e01 	add.w	lr, ip, #1
   83ed6:	4660      	mov	r0, ip
   83ed8:	f300 8264 	bgt.w	843a4 <_vfiprintf_r+0x898>
   83edc:	9903      	ldr	r1, [sp, #12]
   83ede:	f1be 0f07 	cmp.w	lr, #7
   83ee2:	440a      	add	r2, r1
   83ee4:	920f      	str	r2, [sp, #60]	; 0x3c
   83ee6:	f8cb 7000 	str.w	r7, [fp]
   83eea:	f8cb 1004 	str.w	r1, [fp, #4]
   83eee:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   83ef2:	f340 82c5 	ble.w	84480 <_vfiprintf_r+0x974>
   83ef6:	2a00      	cmp	r2, #0
   83ef8:	f040 8332 	bne.w	84560 <_vfiprintf_r+0xa54>
   83efc:	0770      	lsls	r0, r6, #29
   83efe:	920e      	str	r2, [sp, #56]	; 0x38
   83f00:	d538      	bpl.n	83f74 <_vfiprintf_r+0x468>
   83f02:	9b06      	ldr	r3, [sp, #24]
   83f04:	1b5c      	subs	r4, r3, r5
   83f06:	2c00      	cmp	r4, #0
   83f08:	dd34      	ble.n	83f74 <_vfiprintf_r+0x468>
   83f0a:	46d3      	mov	fp, sl
   83f0c:	2c10      	cmp	r4, #16
   83f0e:	f340 8496 	ble.w	8483e <_vfiprintf_r+0xd32>
   83f12:	f8df 9104 	ldr.w	r9, [pc, #260]	; 84018 <_vfiprintf_r+0x50c>
   83f16:	990e      	ldr	r1, [sp, #56]	; 0x38
   83f18:	464f      	mov	r7, r9
   83f1a:	2610      	movs	r6, #16
   83f1c:	f8dd 9014 	ldr.w	r9, [sp, #20]
   83f20:	e006      	b.n	83f30 <_vfiprintf_r+0x424>
   83f22:	1c88      	adds	r0, r1, #2
   83f24:	4619      	mov	r1, r3
   83f26:	f10b 0b08 	add.w	fp, fp, #8
   83f2a:	3c10      	subs	r4, #16
   83f2c:	2c10      	cmp	r4, #16
   83f2e:	dd13      	ble.n	83f58 <_vfiprintf_r+0x44c>
   83f30:	1c4b      	adds	r3, r1, #1
   83f32:	3210      	adds	r2, #16
   83f34:	2b07      	cmp	r3, #7
   83f36:	920f      	str	r2, [sp, #60]	; 0x3c
   83f38:	f8cb 7000 	str.w	r7, [fp]
   83f3c:	f8cb 6004 	str.w	r6, [fp, #4]
   83f40:	930e      	str	r3, [sp, #56]	; 0x38
   83f42:	ddee      	ble.n	83f22 <_vfiprintf_r+0x416>
   83f44:	2a00      	cmp	r2, #0
   83f46:	f040 8285 	bne.w	84454 <_vfiprintf_r+0x948>
   83f4a:	3c10      	subs	r4, #16
   83f4c:	2c10      	cmp	r4, #16
   83f4e:	f04f 0001 	mov.w	r0, #1
   83f52:	4611      	mov	r1, r2
   83f54:	46d3      	mov	fp, sl
   83f56:	dceb      	bgt.n	83f30 <_vfiprintf_r+0x424>
   83f58:	46b9      	mov	r9, r7
   83f5a:	4422      	add	r2, r4
   83f5c:	2807      	cmp	r0, #7
   83f5e:	920f      	str	r2, [sp, #60]	; 0x3c
   83f60:	f8cb 9000 	str.w	r9, [fp]
   83f64:	f8cb 4004 	str.w	r4, [fp, #4]
   83f68:	900e      	str	r0, [sp, #56]	; 0x38
   83f6a:	f340 8292 	ble.w	84492 <_vfiprintf_r+0x986>
   83f6e:	2a00      	cmp	r2, #0
   83f70:	f040 840c 	bne.w	8478c <_vfiprintf_r+0xc80>
   83f74:	9b02      	ldr	r3, [sp, #8]
   83f76:	9a06      	ldr	r2, [sp, #24]
   83f78:	42aa      	cmp	r2, r5
   83f7a:	bfac      	ite	ge
   83f7c:	189b      	addge	r3, r3, r2
   83f7e:	195b      	addlt	r3, r3, r5
   83f80:	9302      	str	r3, [sp, #8]
   83f82:	e290      	b.n	844a6 <_vfiprintf_r+0x99a>
   83f84:	f046 0680 	orr.w	r6, r6, #128	; 0x80
   83f88:	f898 3000 	ldrb.w	r3, [r8]
   83f8c:	e625      	b.n	83bda <_vfiprintf_r+0xce>
   83f8e:	9406      	str	r4, [sp, #24]
   83f90:	2900      	cmp	r1, #0
   83f92:	f040 8485 	bne.w	848a0 <_vfiprintf_r+0xd94>
   83f96:	f046 0610 	orr.w	r6, r6, #16
   83f9a:	06b3      	lsls	r3, r6, #26
   83f9c:	f140 8304 	bpl.w	845a8 <_vfiprintf_r+0xa9c>
   83fa0:	9904      	ldr	r1, [sp, #16]
   83fa2:	3107      	adds	r1, #7
   83fa4:	f021 0107 	bic.w	r1, r1, #7
   83fa8:	e9d1 2300 	ldrd	r2, r3, [r1]
   83fac:	4614      	mov	r4, r2
   83fae:	461d      	mov	r5, r3
   83fb0:	3108      	adds	r1, #8
   83fb2:	9104      	str	r1, [sp, #16]
   83fb4:	2a00      	cmp	r2, #0
   83fb6:	f173 0300 	sbcs.w	r3, r3, #0
   83fba:	f2c0 837c 	blt.w	846b6 <_vfiprintf_r+0xbaa>
   83fbe:	9b01      	ldr	r3, [sp, #4]
   83fc0:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
   83fc4:	2b00      	cmp	r3, #0
   83fc6:	f2c0 830b 	blt.w	845e0 <_vfiprintf_r+0xad4>
   83fca:	ea54 0305 	orrs.w	r3, r4, r5
   83fce:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   83fd2:	f000 80de 	beq.w	84192 <_vfiprintf_r+0x686>
   83fd6:	2d00      	cmp	r5, #0
   83fd8:	bf08      	it	eq
   83fda:	2c0a      	cmpeq	r4, #10
   83fdc:	f0c0 80de 	bcc.w	8419c <_vfiprintf_r+0x690>
   83fe0:	4657      	mov	r7, sl
   83fe2:	4620      	mov	r0, r4
   83fe4:	4629      	mov	r1, r5
   83fe6:	220a      	movs	r2, #10
   83fe8:	2300      	movs	r3, #0
   83fea:	f002 f9f3 	bl	863d4 <__aeabi_uldivmod>
   83fee:	3230      	adds	r2, #48	; 0x30
   83ff0:	f807 2d01 	strb.w	r2, [r7, #-1]!
   83ff4:	4620      	mov	r0, r4
   83ff6:	4629      	mov	r1, r5
   83ff8:	2300      	movs	r3, #0
   83ffa:	220a      	movs	r2, #10
   83ffc:	f002 f9ea 	bl	863d4 <__aeabi_uldivmod>
   84000:	4604      	mov	r4, r0
   84002:	460d      	mov	r5, r1
   84004:	ea54 0305 	orrs.w	r3, r4, r5
   84008:	d1eb      	bne.n	83fe2 <_vfiprintf_r+0x4d6>
   8400a:	ebc7 030a 	rsb	r3, r7, sl
   8400e:	9303      	str	r3, [sp, #12]
   84010:	e6a2      	b.n	83d58 <_vfiprintf_r+0x24c>
   84012:	bf00      	nop
   84014:	000867b0 	.word	0x000867b0
   84018:	000867cc 	.word	0x000867cc
   8401c:	0008678c 	.word	0x0008678c
   84020:	9406      	str	r4, [sp, #24]
   84022:	2900      	cmp	r1, #0
   84024:	f040 8438 	bne.w	84898 <_vfiprintf_r+0xd8c>
   84028:	f046 0610 	orr.w	r6, r6, #16
   8402c:	f016 0320 	ands.w	r3, r6, #32
   84030:	f000 82a1 	beq.w	84576 <_vfiprintf_r+0xa6a>
   84034:	f04f 0200 	mov.w	r2, #0
   84038:	9b04      	ldr	r3, [sp, #16]
   8403a:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
   8403e:	3307      	adds	r3, #7
   84040:	f023 0307 	bic.w	r3, r3, #7
   84044:	f103 0208 	add.w	r2, r3, #8
   84048:	e9d3 4500 	ldrd	r4, r5, [r3]
   8404c:	9b01      	ldr	r3, [sp, #4]
   8404e:	9204      	str	r2, [sp, #16]
   84050:	2b00      	cmp	r3, #0
   84052:	db0a      	blt.n	8406a <_vfiprintf_r+0x55e>
   84054:	ea54 0305 	orrs.w	r3, r4, r5
   84058:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   8405c:	d105      	bne.n	8406a <_vfiprintf_r+0x55e>
   8405e:	9b01      	ldr	r3, [sp, #4]
   84060:	2b00      	cmp	r3, #0
   84062:	f000 8427 	beq.w	848b4 <_vfiprintf_r+0xda8>
   84066:	2400      	movs	r4, #0
   84068:	2500      	movs	r5, #0
   8406a:	f04f 0900 	mov.w	r9, #0
   8406e:	4657      	mov	r7, sl
   84070:	08e2      	lsrs	r2, r4, #3
   84072:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   84076:	08e9      	lsrs	r1, r5, #3
   84078:	f004 0307 	and.w	r3, r4, #7
   8407c:	460d      	mov	r5, r1
   8407e:	4614      	mov	r4, r2
   84080:	3330      	adds	r3, #48	; 0x30
   84082:	ea54 0205 	orrs.w	r2, r4, r5
   84086:	f807 3d01 	strb.w	r3, [r7, #-1]!
   8408a:	d1f1      	bne.n	84070 <_vfiprintf_r+0x564>
   8408c:	07f4      	lsls	r4, r6, #31
   8408e:	d5bc      	bpl.n	8400a <_vfiprintf_r+0x4fe>
   84090:	2b30      	cmp	r3, #48	; 0x30
   84092:	d0ba      	beq.n	8400a <_vfiprintf_r+0x4fe>
   84094:	2230      	movs	r2, #48	; 0x30
   84096:	1e7b      	subs	r3, r7, #1
   84098:	f807 2c01 	strb.w	r2, [r7, #-1]
   8409c:	ebc3 020a 	rsb	r2, r3, sl
   840a0:	9203      	str	r2, [sp, #12]
   840a2:	461f      	mov	r7, r3
   840a4:	e658      	b.n	83d58 <_vfiprintf_r+0x24c>
   840a6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   840aa:	2400      	movs	r4, #0
   840ac:	f818 3b01 	ldrb.w	r3, [r8], #1
   840b0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   840b4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
   840b8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   840bc:	2a09      	cmp	r2, #9
   840be:	d9f5      	bls.n	840ac <_vfiprintf_r+0x5a0>
   840c0:	e58d      	b.n	83bde <_vfiprintf_r+0xd2>
   840c2:	f898 3000 	ldrb.w	r3, [r8]
   840c6:	2101      	movs	r1, #1
   840c8:	202b      	movs	r0, #43	; 0x2b
   840ca:	e586      	b.n	83bda <_vfiprintf_r+0xce>
   840cc:	f898 3000 	ldrb.w	r3, [r8]
   840d0:	f108 0501 	add.w	r5, r8, #1
   840d4:	2b2a      	cmp	r3, #42	; 0x2a
   840d6:	f000 83cc 	beq.w	84872 <_vfiprintf_r+0xd66>
   840da:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   840de:	2a09      	cmp	r2, #9
   840e0:	46a8      	mov	r8, r5
   840e2:	bf98      	it	ls
   840e4:	2500      	movls	r5, #0
   840e6:	f200 83b5 	bhi.w	84854 <_vfiprintf_r+0xd48>
   840ea:	f818 3b01 	ldrb.w	r3, [r8], #1
   840ee:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   840f2:	eb02 0545 	add.w	r5, r2, r5, lsl #1
   840f6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   840fa:	2a09      	cmp	r2, #9
   840fc:	d9f5      	bls.n	840ea <_vfiprintf_r+0x5de>
   840fe:	ea45 72e5 	orr.w	r2, r5, r5, asr #31
   84102:	9201      	str	r2, [sp, #4]
   84104:	e56b      	b.n	83bde <_vfiprintf_r+0xd2>
   84106:	9406      	str	r4, [sp, #24]
   84108:	2900      	cmp	r1, #0
   8410a:	d08f      	beq.n	8402c <_vfiprintf_r+0x520>
   8410c:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   84110:	e78c      	b.n	8402c <_vfiprintf_r+0x520>
   84112:	f04f 0300 	mov.w	r3, #0
   84116:	9a04      	ldr	r2, [sp, #16]
   84118:	9406      	str	r4, [sp, #24]
   8411a:	6817      	ldr	r7, [r2, #0]
   8411c:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   84120:	1d14      	adds	r4, r2, #4
   84122:	9b01      	ldr	r3, [sp, #4]
   84124:	2f00      	cmp	r7, #0
   84126:	f000 837f 	beq.w	84828 <_vfiprintf_r+0xd1c>
   8412a:	2b00      	cmp	r3, #0
   8412c:	f2c0 8353 	blt.w	847d6 <_vfiprintf_r+0xcca>
   84130:	461a      	mov	r2, r3
   84132:	2100      	movs	r1, #0
   84134:	4638      	mov	r0, r7
   84136:	f001 fc4d 	bl	859d4 <memchr>
   8413a:	2800      	cmp	r0, #0
   8413c:	f000 838e 	beq.w	8485c <_vfiprintf_r+0xd50>
   84140:	1bc3      	subs	r3, r0, r7
   84142:	9303      	str	r3, [sp, #12]
   84144:	2300      	movs	r3, #0
   84146:	9404      	str	r4, [sp, #16]
   84148:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
   8414c:	9301      	str	r3, [sp, #4]
   8414e:	e603      	b.n	83d58 <_vfiprintf_r+0x24c>
   84150:	9406      	str	r4, [sp, #24]
   84152:	2900      	cmp	r1, #0
   84154:	f040 839d 	bne.w	84892 <_vfiprintf_r+0xd86>
   84158:	f016 0920 	ands.w	r9, r6, #32
   8415c:	d134      	bne.n	841c8 <_vfiprintf_r+0x6bc>
   8415e:	f016 0310 	ands.w	r3, r6, #16
   84162:	d103      	bne.n	8416c <_vfiprintf_r+0x660>
   84164:	f016 0940 	ands.w	r9, r6, #64	; 0x40
   84168:	f040 831f 	bne.w	847aa <_vfiprintf_r+0xc9e>
   8416c:	9a04      	ldr	r2, [sp, #16]
   8416e:	2500      	movs	r5, #0
   84170:	4613      	mov	r3, r2
   84172:	6814      	ldr	r4, [r2, #0]
   84174:	9a01      	ldr	r2, [sp, #4]
   84176:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
   8417a:	2a00      	cmp	r2, #0
   8417c:	f103 0304 	add.w	r3, r3, #4
   84180:	f2c0 8327 	blt.w	847d2 <_vfiprintf_r+0xcc6>
   84184:	ea54 0205 	orrs.w	r2, r4, r5
   84188:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   8418c:	9304      	str	r3, [sp, #16]
   8418e:	f47f af22 	bne.w	83fd6 <_vfiprintf_r+0x4ca>
   84192:	9b01      	ldr	r3, [sp, #4]
   84194:	2b00      	cmp	r3, #0
   84196:	f43f addb 	beq.w	83d50 <_vfiprintf_r+0x244>
   8419a:	2400      	movs	r4, #0
   8419c:	af2a      	add	r7, sp, #168	; 0xa8
   8419e:	3430      	adds	r4, #48	; 0x30
   841a0:	f807 4d41 	strb.w	r4, [r7, #-65]!
   841a4:	ebc7 030a 	rsb	r3, r7, sl
   841a8:	9303      	str	r3, [sp, #12]
   841aa:	e5d5      	b.n	83d58 <_vfiprintf_r+0x24c>
   841ac:	f046 0620 	orr.w	r6, r6, #32
   841b0:	f898 3000 	ldrb.w	r3, [r8]
   841b4:	e511      	b.n	83bda <_vfiprintf_r+0xce>
   841b6:	9406      	str	r4, [sp, #24]
   841b8:	2900      	cmp	r1, #0
   841ba:	f040 8375 	bne.w	848a8 <_vfiprintf_r+0xd9c>
   841be:	f046 0610 	orr.w	r6, r6, #16
   841c2:	f016 0920 	ands.w	r9, r6, #32
   841c6:	d0ca      	beq.n	8415e <_vfiprintf_r+0x652>
   841c8:	f04f 0200 	mov.w	r2, #0
   841cc:	9b04      	ldr	r3, [sp, #16]
   841ce:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
   841d2:	3307      	adds	r3, #7
   841d4:	f023 0307 	bic.w	r3, r3, #7
   841d8:	f103 0208 	add.w	r2, r3, #8
   841dc:	e9d3 4500 	ldrd	r4, r5, [r3]
   841e0:	9b01      	ldr	r3, [sp, #4]
   841e2:	9204      	str	r2, [sp, #16]
   841e4:	2b00      	cmp	r3, #0
   841e6:	f2c0 81f9 	blt.w	845dc <_vfiprintf_r+0xad0>
   841ea:	ea54 0305 	orrs.w	r3, r4, r5
   841ee:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   841f2:	f04f 0900 	mov.w	r9, #0
   841f6:	f47f aeee 	bne.w	83fd6 <_vfiprintf_r+0x4ca>
   841fa:	e7ca      	b.n	84192 <_vfiprintf_r+0x686>
   841fc:	9406      	str	r4, [sp, #24]
   841fe:	2900      	cmp	r1, #0
   84200:	f040 8355 	bne.w	848ae <_vfiprintf_r+0xda2>
   84204:	06b2      	lsls	r2, r6, #26
   84206:	48b2      	ldr	r0, [pc, #712]	; (844d0 <_vfiprintf_r+0x9c4>)
   84208:	d541      	bpl.n	8428e <_vfiprintf_r+0x782>
   8420a:	9a04      	ldr	r2, [sp, #16]
   8420c:	3207      	adds	r2, #7
   8420e:	f022 0207 	bic.w	r2, r2, #7
   84212:	f102 0108 	add.w	r1, r2, #8
   84216:	9104      	str	r1, [sp, #16]
   84218:	e9d2 4500 	ldrd	r4, r5, [r2]
   8421c:	f016 0901 	ands.w	r9, r6, #1
   84220:	f000 817e 	beq.w	84520 <_vfiprintf_r+0xa14>
   84224:	ea54 0205 	orrs.w	r2, r4, r5
   84228:	f040 822b 	bne.w	84682 <_vfiprintf_r+0xb76>
   8422c:	f04f 0300 	mov.w	r3, #0
   84230:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   84234:	9b01      	ldr	r3, [sp, #4]
   84236:	2b00      	cmp	r3, #0
   84238:	f2c0 82f3 	blt.w	84822 <_vfiprintf_r+0xd16>
   8423c:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   84240:	e581      	b.n	83d46 <_vfiprintf_r+0x23a>
   84242:	9a04      	ldr	r2, [sp, #16]
   84244:	f04f 0100 	mov.w	r1, #0
   84248:	6813      	ldr	r3, [r2, #0]
   8424a:	2501      	movs	r5, #1
   8424c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   84250:	4613      	mov	r3, r2
   84252:	3304      	adds	r3, #4
   84254:	9406      	str	r4, [sp, #24]
   84256:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   8425a:	9304      	str	r3, [sp, #16]
   8425c:	9503      	str	r5, [sp, #12]
   8425e:	af10      	add	r7, sp, #64	; 0x40
   84260:	2300      	movs	r3, #0
   84262:	9301      	str	r3, [sp, #4]
   84264:	e582      	b.n	83d6c <_vfiprintf_r+0x260>
   84266:	f898 3000 	ldrb.w	r3, [r8]
   8426a:	2800      	cmp	r0, #0
   8426c:	f47f acb5 	bne.w	83bda <_vfiprintf_r+0xce>
   84270:	2101      	movs	r1, #1
   84272:	2020      	movs	r0, #32
   84274:	e4b1      	b.n	83bda <_vfiprintf_r+0xce>
   84276:	f046 0601 	orr.w	r6, r6, #1
   8427a:	f898 3000 	ldrb.w	r3, [r8]
   8427e:	e4ac      	b.n	83bda <_vfiprintf_r+0xce>
   84280:	9406      	str	r4, [sp, #24]
   84282:	2900      	cmp	r1, #0
   84284:	f040 832a 	bne.w	848dc <_vfiprintf_r+0xdd0>
   84288:	06b2      	lsls	r2, r6, #26
   8428a:	4892      	ldr	r0, [pc, #584]	; (844d4 <_vfiprintf_r+0x9c8>)
   8428c:	d4bd      	bmi.n	8420a <_vfiprintf_r+0x6fe>
   8428e:	9904      	ldr	r1, [sp, #16]
   84290:	06f7      	lsls	r7, r6, #27
   84292:	460a      	mov	r2, r1
   84294:	f100 819d 	bmi.w	845d2 <_vfiprintf_r+0xac6>
   84298:	0675      	lsls	r5, r6, #25
   8429a:	f140 819a 	bpl.w	845d2 <_vfiprintf_r+0xac6>
   8429e:	3204      	adds	r2, #4
   842a0:	880c      	ldrh	r4, [r1, #0]
   842a2:	9204      	str	r2, [sp, #16]
   842a4:	2500      	movs	r5, #0
   842a6:	e7b9      	b.n	8421c <_vfiprintf_r+0x710>
   842a8:	f046 0640 	orr.w	r6, r6, #64	; 0x40
   842ac:	f898 3000 	ldrb.w	r3, [r8]
   842b0:	e493      	b.n	83bda <_vfiprintf_r+0xce>
   842b2:	f898 3000 	ldrb.w	r3, [r8]
   842b6:	2b6c      	cmp	r3, #108	; 0x6c
   842b8:	bf03      	ittte	eq
   842ba:	f898 3001 	ldrbeq.w	r3, [r8, #1]
   842be:	f046 0620 	orreq.w	r6, r6, #32
   842c2:	f108 0801 	addeq.w	r8, r8, #1
   842c6:	f046 0610 	orrne.w	r6, r6, #16
   842ca:	e486      	b.n	83bda <_vfiprintf_r+0xce>
   842cc:	2900      	cmp	r1, #0
   842ce:	f040 8302 	bne.w	848d6 <_vfiprintf_r+0xdca>
   842d2:	06b4      	lsls	r4, r6, #26
   842d4:	f140 8220 	bpl.w	84718 <_vfiprintf_r+0xc0c>
   842d8:	9a04      	ldr	r2, [sp, #16]
   842da:	4613      	mov	r3, r2
   842dc:	3304      	adds	r3, #4
   842de:	9304      	str	r3, [sp, #16]
   842e0:	9b02      	ldr	r3, [sp, #8]
   842e2:	6811      	ldr	r1, [r2, #0]
   842e4:	17dd      	asrs	r5, r3, #31
   842e6:	461a      	mov	r2, r3
   842e8:	462b      	mov	r3, r5
   842ea:	e9c1 2300 	strd	r2, r3, [r1]
   842ee:	e43e      	b.n	83b6e <_vfiprintf_r+0x62>
   842f0:	9406      	str	r4, [sp, #24]
   842f2:	2900      	cmp	r1, #0
   842f4:	f43f ae51 	beq.w	83f9a <_vfiprintf_r+0x48e>
   842f8:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   842fc:	e64d      	b.n	83f9a <_vfiprintf_r+0x48e>
   842fe:	9406      	str	r4, [sp, #24]
   84300:	2900      	cmp	r1, #0
   84302:	f040 82e5 	bne.w	848d0 <_vfiprintf_r+0xdc4>
   84306:	2b00      	cmp	r3, #0
   84308:	f000 8094 	beq.w	84434 <_vfiprintf_r+0x928>
   8430c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   84310:	f04f 0300 	mov.w	r3, #0
   84314:	2501      	movs	r5, #1
   84316:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   8431a:	9503      	str	r5, [sp, #12]
   8431c:	af10      	add	r7, sp, #64	; 0x40
   8431e:	e79f      	b.n	84260 <_vfiprintf_r+0x754>
   84320:	aa0d      	add	r2, sp, #52	; 0x34
   84322:	9900      	ldr	r1, [sp, #0]
   84324:	4648      	mov	r0, r9
   84326:	9309      	str	r3, [sp, #36]	; 0x24
   84328:	f7ff fbb4 	bl	83a94 <__sprint_r.part.0>
   8432c:	2800      	cmp	r0, #0
   8432e:	f040 8088 	bne.w	84442 <_vfiprintf_r+0x936>
   84332:	980e      	ldr	r0, [sp, #56]	; 0x38
   84334:	46d4      	mov	ip, sl
   84336:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84338:	f100 0e01 	add.w	lr, r0, #1
   8433c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8433e:	e53a      	b.n	83db6 <_vfiprintf_r+0x2aa>
   84340:	aa0d      	add	r2, sp, #52	; 0x34
   84342:	9900      	ldr	r1, [sp, #0]
   84344:	9805      	ldr	r0, [sp, #20]
   84346:	f7ff fba5 	bl	83a94 <__sprint_r.part.0>
   8434a:	2800      	cmp	r0, #0
   8434c:	d179      	bne.n	84442 <_vfiprintf_r+0x936>
   8434e:	46d3      	mov	fp, sl
   84350:	980e      	ldr	r0, [sp, #56]	; 0x38
   84352:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   84356:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84358:	f100 0e01 	add.w	lr, r0, #1
   8435c:	2b00      	cmp	r3, #0
   8435e:	f43f ad59 	beq.w	83e14 <_vfiprintf_r+0x308>
   84362:	3201      	adds	r2, #1
   84364:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
   84368:	2301      	movs	r3, #1
   8436a:	f1be 0f07 	cmp.w	lr, #7
   8436e:	920f      	str	r2, [sp, #60]	; 0x3c
   84370:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   84374:	e88b 000a 	stmia.w	fp, {r1, r3}
   84378:	f340 80c0 	ble.w	844fc <_vfiprintf_r+0x9f0>
   8437c:	2a00      	cmp	r2, #0
   8437e:	f040 814d 	bne.w	8461c <_vfiprintf_r+0xb10>
   84382:	9907      	ldr	r1, [sp, #28]
   84384:	2900      	cmp	r1, #0
   84386:	f040 80bf 	bne.w	84508 <_vfiprintf_r+0x9fc>
   8438a:	469e      	mov	lr, r3
   8438c:	4610      	mov	r0, r2
   8438e:	46d3      	mov	fp, sl
   84390:	9b08      	ldr	r3, [sp, #32]
   84392:	2b80      	cmp	r3, #128	; 0x80
   84394:	f43f ad59 	beq.w	83e4a <_vfiprintf_r+0x33e>
   84398:	9b01      	ldr	r3, [sp, #4]
   8439a:	9903      	ldr	r1, [sp, #12]
   8439c:	1a5c      	subs	r4, r3, r1
   8439e:	2c00      	cmp	r4, #0
   843a0:	f77f ad9c 	ble.w	83edc <_vfiprintf_r+0x3d0>
   843a4:	2c10      	cmp	r4, #16
   843a6:	f8df 9130 	ldr.w	r9, [pc, #304]	; 844d8 <_vfiprintf_r+0x9cc>
   843aa:	dd25      	ble.n	843f8 <_vfiprintf_r+0x8ec>
   843ac:	46dc      	mov	ip, fp
   843ae:	2310      	movs	r3, #16
   843b0:	46c3      	mov	fp, r8
   843b2:	46a8      	mov	r8, r5
   843b4:	464d      	mov	r5, r9
   843b6:	f8dd 9014 	ldr.w	r9, [sp, #20]
   843ba:	e007      	b.n	843cc <_vfiprintf_r+0x8c0>
   843bc:	f100 0e02 	add.w	lr, r0, #2
   843c0:	4608      	mov	r0, r1
   843c2:	f10c 0c08 	add.w	ip, ip, #8
   843c6:	3c10      	subs	r4, #16
   843c8:	2c10      	cmp	r4, #16
   843ca:	dd11      	ble.n	843f0 <_vfiprintf_r+0x8e4>
   843cc:	1c41      	adds	r1, r0, #1
   843ce:	3210      	adds	r2, #16
   843d0:	2907      	cmp	r1, #7
   843d2:	920f      	str	r2, [sp, #60]	; 0x3c
   843d4:	f8cc 5000 	str.w	r5, [ip]
   843d8:	f8cc 3004 	str.w	r3, [ip, #4]
   843dc:	910e      	str	r1, [sp, #56]	; 0x38
   843de:	dded      	ble.n	843bc <_vfiprintf_r+0x8b0>
   843e0:	b9d2      	cbnz	r2, 84418 <_vfiprintf_r+0x90c>
   843e2:	3c10      	subs	r4, #16
   843e4:	2c10      	cmp	r4, #16
   843e6:	f04f 0e01 	mov.w	lr, #1
   843ea:	4610      	mov	r0, r2
   843ec:	46d4      	mov	ip, sl
   843ee:	dced      	bgt.n	843cc <_vfiprintf_r+0x8c0>
   843f0:	46a9      	mov	r9, r5
   843f2:	4645      	mov	r5, r8
   843f4:	46d8      	mov	r8, fp
   843f6:	46e3      	mov	fp, ip
   843f8:	4422      	add	r2, r4
   843fa:	f1be 0f07 	cmp.w	lr, #7
   843fe:	920f      	str	r2, [sp, #60]	; 0x3c
   84400:	f8cb 9000 	str.w	r9, [fp]
   84404:	f8cb 4004 	str.w	r4, [fp, #4]
   84408:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   8440c:	dc2e      	bgt.n	8446c <_vfiprintf_r+0x960>
   8440e:	f10b 0b08 	add.w	fp, fp, #8
   84412:	f10e 0e01 	add.w	lr, lr, #1
   84416:	e561      	b.n	83edc <_vfiprintf_r+0x3d0>
   84418:	aa0d      	add	r2, sp, #52	; 0x34
   8441a:	9900      	ldr	r1, [sp, #0]
   8441c:	4648      	mov	r0, r9
   8441e:	9301      	str	r3, [sp, #4]
   84420:	f7ff fb38 	bl	83a94 <__sprint_r.part.0>
   84424:	b968      	cbnz	r0, 84442 <_vfiprintf_r+0x936>
   84426:	980e      	ldr	r0, [sp, #56]	; 0x38
   84428:	46d4      	mov	ip, sl
   8442a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8442c:	f100 0e01 	add.w	lr, r0, #1
   84430:	9b01      	ldr	r3, [sp, #4]
   84432:	e7c8      	b.n	843c6 <_vfiprintf_r+0x8ba>
   84434:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   84436:	b123      	cbz	r3, 84442 <_vfiprintf_r+0x936>
   84438:	9805      	ldr	r0, [sp, #20]
   8443a:	aa0d      	add	r2, sp, #52	; 0x34
   8443c:	9900      	ldr	r1, [sp, #0]
   8443e:	f7ff fb29 	bl	83a94 <__sprint_r.part.0>
   84442:	9b00      	ldr	r3, [sp, #0]
   84444:	899b      	ldrh	r3, [r3, #12]
   84446:	065a      	lsls	r2, r3, #25
   84448:	f100 817b 	bmi.w	84742 <_vfiprintf_r+0xc36>
   8444c:	9802      	ldr	r0, [sp, #8]
   8444e:	b02b      	add	sp, #172	; 0xac
   84450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84454:	aa0d      	add	r2, sp, #52	; 0x34
   84456:	9900      	ldr	r1, [sp, #0]
   84458:	4648      	mov	r0, r9
   8445a:	f7ff fb1b 	bl	83a94 <__sprint_r.part.0>
   8445e:	2800      	cmp	r0, #0
   84460:	d1ef      	bne.n	84442 <_vfiprintf_r+0x936>
   84462:	990e      	ldr	r1, [sp, #56]	; 0x38
   84464:	46d3      	mov	fp, sl
   84466:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84468:	1c48      	adds	r0, r1, #1
   8446a:	e55e      	b.n	83f2a <_vfiprintf_r+0x41e>
   8446c:	2a00      	cmp	r2, #0
   8446e:	f040 80fa 	bne.w	84666 <_vfiprintf_r+0xb5a>
   84472:	46d3      	mov	fp, sl
   84474:	9a03      	ldr	r2, [sp, #12]
   84476:	2301      	movs	r3, #1
   84478:	921b      	str	r2, [sp, #108]	; 0x6c
   8447a:	920f      	str	r2, [sp, #60]	; 0x3c
   8447c:	971a      	str	r7, [sp, #104]	; 0x68
   8447e:	930e      	str	r3, [sp, #56]	; 0x38
   84480:	f10b 0b08 	add.w	fp, fp, #8
   84484:	0771      	lsls	r1, r6, #29
   84486:	d504      	bpl.n	84492 <_vfiprintf_r+0x986>
   84488:	9b06      	ldr	r3, [sp, #24]
   8448a:	1b5c      	subs	r4, r3, r5
   8448c:	2c00      	cmp	r4, #0
   8448e:	f73f ad3d 	bgt.w	83f0c <_vfiprintf_r+0x400>
   84492:	9b02      	ldr	r3, [sp, #8]
   84494:	9906      	ldr	r1, [sp, #24]
   84496:	42a9      	cmp	r1, r5
   84498:	bfac      	ite	ge
   8449a:	185b      	addge	r3, r3, r1
   8449c:	195b      	addlt	r3, r3, r5
   8449e:	9302      	str	r3, [sp, #8]
   844a0:	2a00      	cmp	r2, #0
   844a2:	f040 80ad 	bne.w	84600 <_vfiprintf_r+0xaf4>
   844a6:	2300      	movs	r3, #0
   844a8:	930e      	str	r3, [sp, #56]	; 0x38
   844aa:	46d3      	mov	fp, sl
   844ac:	f7ff bb5f 	b.w	83b6e <_vfiprintf_r+0x62>
   844b0:	aa0d      	add	r2, sp, #52	; 0x34
   844b2:	9900      	ldr	r1, [sp, #0]
   844b4:	4648      	mov	r0, r9
   844b6:	9307      	str	r3, [sp, #28]
   844b8:	f7ff faec 	bl	83a94 <__sprint_r.part.0>
   844bc:	2800      	cmp	r0, #0
   844be:	d1c0      	bne.n	84442 <_vfiprintf_r+0x936>
   844c0:	980e      	ldr	r0, [sp, #56]	; 0x38
   844c2:	46d6      	mov	lr, sl
   844c4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   844c6:	f100 0c01 	add.w	ip, r0, #1
   844ca:	9b07      	ldr	r3, [sp, #28]
   844cc:	e4d4      	b.n	83e78 <_vfiprintf_r+0x36c>
   844ce:	bf00      	nop
   844d0:	0008679c 	.word	0x0008679c
   844d4:	000867b0 	.word	0x000867b0
   844d8:	0008678c 	.word	0x0008678c
   844dc:	2a00      	cmp	r2, #0
   844de:	f47f af2f 	bne.w	84340 <_vfiprintf_r+0x834>
   844e2:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   844e6:	2b00      	cmp	r3, #0
   844e8:	f000 80f3 	beq.w	846d2 <_vfiprintf_r+0xbc6>
   844ec:	2301      	movs	r3, #1
   844ee:	461a      	mov	r2, r3
   844f0:	469e      	mov	lr, r3
   844f2:	46d3      	mov	fp, sl
   844f4:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
   844f8:	931b      	str	r3, [sp, #108]	; 0x6c
   844fa:	911a      	str	r1, [sp, #104]	; 0x68
   844fc:	4670      	mov	r0, lr
   844fe:	f10b 0b08 	add.w	fp, fp, #8
   84502:	f10e 0e01 	add.w	lr, lr, #1
   84506:	e485      	b.n	83e14 <_vfiprintf_r+0x308>
   84508:	469e      	mov	lr, r3
   8450a:	46d3      	mov	fp, sl
   8450c:	a90c      	add	r1, sp, #48	; 0x30
   8450e:	2202      	movs	r2, #2
   84510:	911a      	str	r1, [sp, #104]	; 0x68
   84512:	921b      	str	r2, [sp, #108]	; 0x6c
   84514:	4670      	mov	r0, lr
   84516:	f10b 0b08 	add.w	fp, fp, #8
   8451a:	f10e 0e01 	add.w	lr, lr, #1
   8451e:	e737      	b.n	84390 <_vfiprintf_r+0x884>
   84520:	9b01      	ldr	r3, [sp, #4]
   84522:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
   84526:	2b00      	cmp	r3, #0
   84528:	f2c0 811b 	blt.w	84762 <_vfiprintf_r+0xc56>
   8452c:	ea54 0305 	orrs.w	r3, r4, r5
   84530:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   84534:	f43f ac07 	beq.w	83d46 <_vfiprintf_r+0x23a>
   84538:	4657      	mov	r7, sl
   8453a:	0923      	lsrs	r3, r4, #4
   8453c:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   84540:	0929      	lsrs	r1, r5, #4
   84542:	f004 020f 	and.w	r2, r4, #15
   84546:	460d      	mov	r5, r1
   84548:	461c      	mov	r4, r3
   8454a:	5c83      	ldrb	r3, [r0, r2]
   8454c:	f807 3d01 	strb.w	r3, [r7, #-1]!
   84550:	ea54 0305 	orrs.w	r3, r4, r5
   84554:	d1f1      	bne.n	8453a <_vfiprintf_r+0xa2e>
   84556:	ebc7 030a 	rsb	r3, r7, sl
   8455a:	9303      	str	r3, [sp, #12]
   8455c:	f7ff bbfc 	b.w	83d58 <_vfiprintf_r+0x24c>
   84560:	aa0d      	add	r2, sp, #52	; 0x34
   84562:	9900      	ldr	r1, [sp, #0]
   84564:	9805      	ldr	r0, [sp, #20]
   84566:	f7ff fa95 	bl	83a94 <__sprint_r.part.0>
   8456a:	2800      	cmp	r0, #0
   8456c:	f47f af69 	bne.w	84442 <_vfiprintf_r+0x936>
   84570:	46d3      	mov	fp, sl
   84572:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84574:	e786      	b.n	84484 <_vfiprintf_r+0x978>
   84576:	f016 0210 	ands.w	r2, r6, #16
   8457a:	f000 80b5 	beq.w	846e8 <_vfiprintf_r+0xbdc>
   8457e:	9904      	ldr	r1, [sp, #16]
   84580:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   84584:	460a      	mov	r2, r1
   84586:	680c      	ldr	r4, [r1, #0]
   84588:	9901      	ldr	r1, [sp, #4]
   8458a:	3204      	adds	r2, #4
   8458c:	2900      	cmp	r1, #0
   8458e:	f04f 0500 	mov.w	r5, #0
   84592:	f2c0 8152 	blt.w	8483a <_vfiprintf_r+0xd2e>
   84596:	ea54 0105 	orrs.w	r1, r4, r5
   8459a:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   8459e:	9204      	str	r2, [sp, #16]
   845a0:	f43f ad5d 	beq.w	8405e <_vfiprintf_r+0x552>
   845a4:	4699      	mov	r9, r3
   845a6:	e562      	b.n	8406e <_vfiprintf_r+0x562>
   845a8:	9a04      	ldr	r2, [sp, #16]
   845aa:	06f7      	lsls	r7, r6, #27
   845ac:	4613      	mov	r3, r2
   845ae:	d409      	bmi.n	845c4 <_vfiprintf_r+0xab8>
   845b0:	0675      	lsls	r5, r6, #25
   845b2:	d507      	bpl.n	845c4 <_vfiprintf_r+0xab8>
   845b4:	f9b2 4000 	ldrsh.w	r4, [r2]
   845b8:	3304      	adds	r3, #4
   845ba:	17e5      	asrs	r5, r4, #31
   845bc:	9304      	str	r3, [sp, #16]
   845be:	4622      	mov	r2, r4
   845c0:	462b      	mov	r3, r5
   845c2:	e4f7      	b.n	83fb4 <_vfiprintf_r+0x4a8>
   845c4:	681c      	ldr	r4, [r3, #0]
   845c6:	3304      	adds	r3, #4
   845c8:	17e5      	asrs	r5, r4, #31
   845ca:	9304      	str	r3, [sp, #16]
   845cc:	4622      	mov	r2, r4
   845ce:	462b      	mov	r3, r5
   845d0:	e4f0      	b.n	83fb4 <_vfiprintf_r+0x4a8>
   845d2:	6814      	ldr	r4, [r2, #0]
   845d4:	3204      	adds	r2, #4
   845d6:	9204      	str	r2, [sp, #16]
   845d8:	2500      	movs	r5, #0
   845da:	e61f      	b.n	8421c <_vfiprintf_r+0x710>
   845dc:	f04f 0900 	mov.w	r9, #0
   845e0:	ea54 0305 	orrs.w	r3, r4, r5
   845e4:	f47f acf7 	bne.w	83fd6 <_vfiprintf_r+0x4ca>
   845e8:	e5d8      	b.n	8419c <_vfiprintf_r+0x690>
   845ea:	aa0d      	add	r2, sp, #52	; 0x34
   845ec:	9900      	ldr	r1, [sp, #0]
   845ee:	9805      	ldr	r0, [sp, #20]
   845f0:	f7ff fa50 	bl	83a94 <__sprint_r.part.0>
   845f4:	2800      	cmp	r0, #0
   845f6:	f47f af24 	bne.w	84442 <_vfiprintf_r+0x936>
   845fa:	46d3      	mov	fp, sl
   845fc:	f7ff bb51 	b.w	83ca2 <_vfiprintf_r+0x196>
   84600:	aa0d      	add	r2, sp, #52	; 0x34
   84602:	9900      	ldr	r1, [sp, #0]
   84604:	9805      	ldr	r0, [sp, #20]
   84606:	f7ff fa45 	bl	83a94 <__sprint_r.part.0>
   8460a:	2800      	cmp	r0, #0
   8460c:	f43f af4b 	beq.w	844a6 <_vfiprintf_r+0x99a>
   84610:	e717      	b.n	84442 <_vfiprintf_r+0x936>
   84612:	2400      	movs	r4, #0
   84614:	2500      	movs	r5, #0
   84616:	f04f 0900 	mov.w	r9, #0
   8461a:	e78d      	b.n	84538 <_vfiprintf_r+0xa2c>
   8461c:	aa0d      	add	r2, sp, #52	; 0x34
   8461e:	9900      	ldr	r1, [sp, #0]
   84620:	9805      	ldr	r0, [sp, #20]
   84622:	f7ff fa37 	bl	83a94 <__sprint_r.part.0>
   84626:	2800      	cmp	r0, #0
   84628:	f47f af0b 	bne.w	84442 <_vfiprintf_r+0x936>
   8462c:	980e      	ldr	r0, [sp, #56]	; 0x38
   8462e:	46d3      	mov	fp, sl
   84630:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84632:	f100 0e01 	add.w	lr, r0, #1
   84636:	f7ff bbed 	b.w	83e14 <_vfiprintf_r+0x308>
   8463a:	aa0d      	add	r2, sp, #52	; 0x34
   8463c:	9900      	ldr	r1, [sp, #0]
   8463e:	9805      	ldr	r0, [sp, #20]
   84640:	f7ff fa28 	bl	83a94 <__sprint_r.part.0>
   84644:	2800      	cmp	r0, #0
   84646:	f47f aefc 	bne.w	84442 <_vfiprintf_r+0x936>
   8464a:	980e      	ldr	r0, [sp, #56]	; 0x38
   8464c:	46d3      	mov	fp, sl
   8464e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84650:	f100 0e01 	add.w	lr, r0, #1
   84654:	e69c      	b.n	84390 <_vfiprintf_r+0x884>
   84656:	2a00      	cmp	r2, #0
   84658:	f040 80c8 	bne.w	847ec <_vfiprintf_r+0xce0>
   8465c:	f04f 0e01 	mov.w	lr, #1
   84660:	4610      	mov	r0, r2
   84662:	46d3      	mov	fp, sl
   84664:	e698      	b.n	84398 <_vfiprintf_r+0x88c>
   84666:	aa0d      	add	r2, sp, #52	; 0x34
   84668:	9900      	ldr	r1, [sp, #0]
   8466a:	9805      	ldr	r0, [sp, #20]
   8466c:	f7ff fa12 	bl	83a94 <__sprint_r.part.0>
   84670:	2800      	cmp	r0, #0
   84672:	f47f aee6 	bne.w	84442 <_vfiprintf_r+0x936>
   84676:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   84678:	46d3      	mov	fp, sl
   8467a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8467c:	f103 0e01 	add.w	lr, r3, #1
   84680:	e42c      	b.n	83edc <_vfiprintf_r+0x3d0>
   84682:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
   84686:	f04f 0300 	mov.w	r3, #0
   8468a:	2230      	movs	r2, #48	; 0x30
   8468c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
   84690:	9a01      	ldr	r2, [sp, #4]
   84692:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   84696:	2a00      	cmp	r2, #0
   84698:	f046 0302 	orr.w	r3, r6, #2
   8469c:	f2c0 80bb 	blt.w	84816 <_vfiprintf_r+0xd0a>
   846a0:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   846a4:	f046 0602 	orr.w	r6, r6, #2
   846a8:	f04f 0900 	mov.w	r9, #0
   846ac:	e744      	b.n	84538 <_vfiprintf_r+0xa2c>
   846ae:	f04f 0900 	mov.w	r9, #0
   846b2:	488c      	ldr	r0, [pc, #560]	; (848e4 <_vfiprintf_r+0xdd8>)
   846b4:	e740      	b.n	84538 <_vfiprintf_r+0xa2c>
   846b6:	9b01      	ldr	r3, [sp, #4]
   846b8:	4264      	negs	r4, r4
   846ba:	f04f 092d 	mov.w	r9, #45	; 0x2d
   846be:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   846c2:	2b00      	cmp	r3, #0
   846c4:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
   846c8:	f6ff ac85 	blt.w	83fd6 <_vfiprintf_r+0x4ca>
   846cc:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   846d0:	e481      	b.n	83fd6 <_vfiprintf_r+0x4ca>
   846d2:	9b07      	ldr	r3, [sp, #28]
   846d4:	2b00      	cmp	r3, #0
   846d6:	d063      	beq.n	847a0 <_vfiprintf_r+0xc94>
   846d8:	ab0c      	add	r3, sp, #48	; 0x30
   846da:	2202      	movs	r2, #2
   846dc:	931a      	str	r3, [sp, #104]	; 0x68
   846de:	921b      	str	r2, [sp, #108]	; 0x6c
   846e0:	f04f 0e01 	mov.w	lr, #1
   846e4:	46d3      	mov	fp, sl
   846e6:	e715      	b.n	84514 <_vfiprintf_r+0xa08>
   846e8:	f016 0940 	ands.w	r9, r6, #64	; 0x40
   846ec:	d03b      	beq.n	84766 <_vfiprintf_r+0xc5a>
   846ee:	9904      	ldr	r1, [sp, #16]
   846f0:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
   846f4:	460b      	mov	r3, r1
   846f6:	880c      	ldrh	r4, [r1, #0]
   846f8:	9901      	ldr	r1, [sp, #4]
   846fa:	3304      	adds	r3, #4
   846fc:	2900      	cmp	r1, #0
   846fe:	f04f 0500 	mov.w	r5, #0
   84702:	f2c0 808c 	blt.w	8481e <_vfiprintf_r+0xd12>
   84706:	ea54 0105 	orrs.w	r1, r4, r5
   8470a:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   8470e:	9304      	str	r3, [sp, #16]
   84710:	f43f aca5 	beq.w	8405e <_vfiprintf_r+0x552>
   84714:	4691      	mov	r9, r2
   84716:	e4aa      	b.n	8406e <_vfiprintf_r+0x562>
   84718:	06f0      	lsls	r0, r6, #27
   8471a:	d40a      	bmi.n	84732 <_vfiprintf_r+0xc26>
   8471c:	0671      	lsls	r1, r6, #25
   8471e:	d508      	bpl.n	84732 <_vfiprintf_r+0xc26>
   84720:	9a04      	ldr	r2, [sp, #16]
   84722:	6813      	ldr	r3, [r2, #0]
   84724:	3204      	adds	r2, #4
   84726:	9204      	str	r2, [sp, #16]
   84728:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   8472c:	801a      	strh	r2, [r3, #0]
   8472e:	f7ff ba1e 	b.w	83b6e <_vfiprintf_r+0x62>
   84732:	9a04      	ldr	r2, [sp, #16]
   84734:	6813      	ldr	r3, [r2, #0]
   84736:	3204      	adds	r2, #4
   84738:	9204      	str	r2, [sp, #16]
   8473a:	9a02      	ldr	r2, [sp, #8]
   8473c:	601a      	str	r2, [r3, #0]
   8473e:	f7ff ba16 	b.w	83b6e <_vfiprintf_r+0x62>
   84742:	f04f 30ff 	mov.w	r0, #4294967295
   84746:	f7ff bac9 	b.w	83cdc <_vfiprintf_r+0x1d0>
   8474a:	4616      	mov	r6, r2
   8474c:	4865      	ldr	r0, [pc, #404]	; (848e4 <_vfiprintf_r+0xdd8>)
   8474e:	ea54 0205 	orrs.w	r2, r4, r5
   84752:	9304      	str	r3, [sp, #16]
   84754:	f04f 0900 	mov.w	r9, #0
   84758:	f47f aeee 	bne.w	84538 <_vfiprintf_r+0xa2c>
   8475c:	2400      	movs	r4, #0
   8475e:	2500      	movs	r5, #0
   84760:	e6ea      	b.n	84538 <_vfiprintf_r+0xa2c>
   84762:	9b04      	ldr	r3, [sp, #16]
   84764:	e7f3      	b.n	8474e <_vfiprintf_r+0xc42>
   84766:	9a04      	ldr	r2, [sp, #16]
   84768:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
   8476c:	4613      	mov	r3, r2
   8476e:	6814      	ldr	r4, [r2, #0]
   84770:	9a01      	ldr	r2, [sp, #4]
   84772:	3304      	adds	r3, #4
   84774:	2a00      	cmp	r2, #0
   84776:	f04f 0500 	mov.w	r5, #0
   8477a:	db50      	blt.n	8481e <_vfiprintf_r+0xd12>
   8477c:	ea54 0205 	orrs.w	r2, r4, r5
   84780:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   84784:	9304      	str	r3, [sp, #16]
   84786:	f47f ac72 	bne.w	8406e <_vfiprintf_r+0x562>
   8478a:	e468      	b.n	8405e <_vfiprintf_r+0x552>
   8478c:	aa0d      	add	r2, sp, #52	; 0x34
   8478e:	9900      	ldr	r1, [sp, #0]
   84790:	9805      	ldr	r0, [sp, #20]
   84792:	f7ff f97f 	bl	83a94 <__sprint_r.part.0>
   84796:	2800      	cmp	r0, #0
   84798:	f47f ae53 	bne.w	84442 <_vfiprintf_r+0x936>
   8479c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8479e:	e678      	b.n	84492 <_vfiprintf_r+0x986>
   847a0:	4610      	mov	r0, r2
   847a2:	f04f 0e01 	mov.w	lr, #1
   847a6:	46d3      	mov	fp, sl
   847a8:	e5f6      	b.n	84398 <_vfiprintf_r+0x88c>
   847aa:	9904      	ldr	r1, [sp, #16]
   847ac:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   847b0:	460a      	mov	r2, r1
   847b2:	880c      	ldrh	r4, [r1, #0]
   847b4:	9901      	ldr	r1, [sp, #4]
   847b6:	3204      	adds	r2, #4
   847b8:	2900      	cmp	r1, #0
   847ba:	f04f 0500 	mov.w	r5, #0
   847be:	db55      	blt.n	8486c <_vfiprintf_r+0xd60>
   847c0:	ea54 0105 	orrs.w	r1, r4, r5
   847c4:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   847c8:	9204      	str	r2, [sp, #16]
   847ca:	4699      	mov	r9, r3
   847cc:	f47f ac03 	bne.w	83fd6 <_vfiprintf_r+0x4ca>
   847d0:	e4df      	b.n	84192 <_vfiprintf_r+0x686>
   847d2:	9304      	str	r3, [sp, #16]
   847d4:	e704      	b.n	845e0 <_vfiprintf_r+0xad4>
   847d6:	4638      	mov	r0, r7
   847d8:	9404      	str	r4, [sp, #16]
   847da:	f7ff f92d 	bl	83a38 <strlen>
   847de:	2300      	movs	r3, #0
   847e0:	9003      	str	r0, [sp, #12]
   847e2:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
   847e6:	9301      	str	r3, [sp, #4]
   847e8:	f7ff bab6 	b.w	83d58 <_vfiprintf_r+0x24c>
   847ec:	aa0d      	add	r2, sp, #52	; 0x34
   847ee:	9900      	ldr	r1, [sp, #0]
   847f0:	9805      	ldr	r0, [sp, #20]
   847f2:	f7ff f94f 	bl	83a94 <__sprint_r.part.0>
   847f6:	2800      	cmp	r0, #0
   847f8:	f47f ae23 	bne.w	84442 <_vfiprintf_r+0x936>
   847fc:	980e      	ldr	r0, [sp, #56]	; 0x38
   847fe:	46d3      	mov	fp, sl
   84800:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84802:	f100 0e01 	add.w	lr, r0, #1
   84806:	e5c7      	b.n	84398 <_vfiprintf_r+0x88c>
   84808:	980e      	ldr	r0, [sp, #56]	; 0x38
   8480a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8480c:	3001      	adds	r0, #1
   8480e:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 848ec <_vfiprintf_r+0xde0>
   84812:	f7ff baec 	b.w	83dee <_vfiprintf_r+0x2e2>
   84816:	461e      	mov	r6, r3
   84818:	f04f 0900 	mov.w	r9, #0
   8481c:	e68c      	b.n	84538 <_vfiprintf_r+0xa2c>
   8481e:	9304      	str	r3, [sp, #16]
   84820:	e423      	b.n	8406a <_vfiprintf_r+0x55e>
   84822:	f04f 0900 	mov.w	r9, #0
   84826:	e799      	b.n	8475c <_vfiprintf_r+0xc50>
   84828:	2b06      	cmp	r3, #6
   8482a:	bf28      	it	cs
   8482c:	2306      	movcs	r3, #6
   8482e:	9303      	str	r3, [sp, #12]
   84830:	9404      	str	r4, [sp, #16]
   84832:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
   84836:	4f2c      	ldr	r7, [pc, #176]	; (848e8 <_vfiprintf_r+0xddc>)
   84838:	e512      	b.n	84260 <_vfiprintf_r+0x754>
   8483a:	9204      	str	r2, [sp, #16]
   8483c:	e415      	b.n	8406a <_vfiprintf_r+0x55e>
   8483e:	980e      	ldr	r0, [sp, #56]	; 0x38
   84840:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 848ec <_vfiprintf_r+0xde0>
   84844:	3001      	adds	r0, #1
   84846:	f7ff bb88 	b.w	83f5a <_vfiprintf_r+0x44e>
   8484a:	46f4      	mov	ip, lr
   8484c:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 848f0 <_vfiprintf_r+0xde4>
   84850:	f7ff bb2d 	b.w	83eae <_vfiprintf_r+0x3a2>
   84854:	2200      	movs	r2, #0
   84856:	9201      	str	r2, [sp, #4]
   84858:	f7ff b9c1 	b.w	83bde <_vfiprintf_r+0xd2>
   8485c:	9b01      	ldr	r3, [sp, #4]
   8485e:	9404      	str	r4, [sp, #16]
   84860:	9303      	str	r3, [sp, #12]
   84862:	9001      	str	r0, [sp, #4]
   84864:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
   84868:	f7ff ba76 	b.w	83d58 <_vfiprintf_r+0x24c>
   8486c:	9204      	str	r2, [sp, #16]
   8486e:	4699      	mov	r9, r3
   84870:	e6b6      	b.n	845e0 <_vfiprintf_r+0xad4>
   84872:	9a04      	ldr	r2, [sp, #16]
   84874:	6813      	ldr	r3, [r2, #0]
   84876:	3204      	adds	r2, #4
   84878:	2b00      	cmp	r3, #0
   8487a:	9301      	str	r3, [sp, #4]
   8487c:	9204      	str	r2, [sp, #16]
   8487e:	f898 3001 	ldrb.w	r3, [r8, #1]
   84882:	46a8      	mov	r8, r5
   84884:	f6bf a9a9 	bge.w	83bda <_vfiprintf_r+0xce>
   84888:	f04f 32ff 	mov.w	r2, #4294967295
   8488c:	9201      	str	r2, [sp, #4]
   8488e:	f7ff b9a4 	b.w	83bda <_vfiprintf_r+0xce>
   84892:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   84896:	e45f      	b.n	84158 <_vfiprintf_r+0x64c>
   84898:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   8489c:	f7ff bbc4 	b.w	84028 <_vfiprintf_r+0x51c>
   848a0:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   848a4:	f7ff bb77 	b.w	83f96 <_vfiprintf_r+0x48a>
   848a8:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   848ac:	e487      	b.n	841be <_vfiprintf_r+0x6b2>
   848ae:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   848b2:	e4a7      	b.n	84204 <_vfiprintf_r+0x6f8>
   848b4:	4699      	mov	r9, r3
   848b6:	07f3      	lsls	r3, r6, #31
   848b8:	d505      	bpl.n	848c6 <_vfiprintf_r+0xdba>
   848ba:	af2a      	add	r7, sp, #168	; 0xa8
   848bc:	2330      	movs	r3, #48	; 0x30
   848be:	f807 3d41 	strb.w	r3, [r7, #-65]!
   848c2:	f7ff bba2 	b.w	8400a <_vfiprintf_r+0x4fe>
   848c6:	9b01      	ldr	r3, [sp, #4]
   848c8:	4657      	mov	r7, sl
   848ca:	9303      	str	r3, [sp, #12]
   848cc:	f7ff ba44 	b.w	83d58 <_vfiprintf_r+0x24c>
   848d0:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   848d4:	e517      	b.n	84306 <_vfiprintf_r+0x7fa>
   848d6:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   848da:	e4fa      	b.n	842d2 <_vfiprintf_r+0x7c6>
   848dc:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   848e0:	e4d2      	b.n	84288 <_vfiprintf_r+0x77c>
   848e2:	bf00      	nop
   848e4:	000867b0 	.word	0x000867b0
   848e8:	000867c4 	.word	0x000867c4
   848ec:	000867cc 	.word	0x000867cc
   848f0:	0008678c 	.word	0x0008678c

000848f4 <__sbprintf>:
   848f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   848f6:	460c      	mov	r4, r1
   848f8:	8989      	ldrh	r1, [r1, #12]
   848fa:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
   848fe:	6e65      	ldr	r5, [r4, #100]	; 0x64
   84900:	f021 0102 	bic.w	r1, r1, #2
   84904:	6a66      	ldr	r6, [r4, #36]	; 0x24
   84906:	f8ad 100c 	strh.w	r1, [sp, #12]
   8490a:	69e1      	ldr	r1, [r4, #28]
   8490c:	89e7      	ldrh	r7, [r4, #14]
   8490e:	9519      	str	r5, [sp, #100]	; 0x64
   84910:	2500      	movs	r5, #0
   84912:	9107      	str	r1, [sp, #28]
   84914:	9609      	str	r6, [sp, #36]	; 0x24
   84916:	9506      	str	r5, [sp, #24]
   84918:	ae1a      	add	r6, sp, #104	; 0x68
   8491a:	f44f 6580 	mov.w	r5, #1024	; 0x400
   8491e:	4669      	mov	r1, sp
   84920:	9600      	str	r6, [sp, #0]
   84922:	9604      	str	r6, [sp, #16]
   84924:	9502      	str	r5, [sp, #8]
   84926:	9505      	str	r5, [sp, #20]
   84928:	f8ad 700e 	strh.w	r7, [sp, #14]
   8492c:	4606      	mov	r6, r0
   8492e:	f7ff f8ed 	bl	83b0c <_vfiprintf_r>
   84932:	1e05      	subs	r5, r0, #0
   84934:	db07      	blt.n	84946 <__sbprintf+0x52>
   84936:	4630      	mov	r0, r6
   84938:	4669      	mov	r1, sp
   8493a:	f000 f929 	bl	84b90 <_fflush_r>
   8493e:	2800      	cmp	r0, #0
   84940:	bf18      	it	ne
   84942:	f04f 35ff 	movne.w	r5, #4294967295
   84946:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   8494a:	065b      	lsls	r3, r3, #25
   8494c:	d503      	bpl.n	84956 <__sbprintf+0x62>
   8494e:	89a3      	ldrh	r3, [r4, #12]
   84950:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   84954:	81a3      	strh	r3, [r4, #12]
   84956:	4628      	mov	r0, r5
   84958:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
   8495c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8495e:	bf00      	nop

00084960 <__swsetup_r>:
   84960:	b538      	push	{r3, r4, r5, lr}
   84962:	4b30      	ldr	r3, [pc, #192]	; (84a24 <__swsetup_r+0xc4>)
   84964:	4605      	mov	r5, r0
   84966:	6818      	ldr	r0, [r3, #0]
   84968:	460c      	mov	r4, r1
   8496a:	b110      	cbz	r0, 84972 <__swsetup_r+0x12>
   8496c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8496e:	2b00      	cmp	r3, #0
   84970:	d038      	beq.n	849e4 <__swsetup_r+0x84>
   84972:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   84976:	b293      	uxth	r3, r2
   84978:	0718      	lsls	r0, r3, #28
   8497a:	d50c      	bpl.n	84996 <__swsetup_r+0x36>
   8497c:	6920      	ldr	r0, [r4, #16]
   8497e:	b1a8      	cbz	r0, 849ac <__swsetup_r+0x4c>
   84980:	f013 0201 	ands.w	r2, r3, #1
   84984:	d01e      	beq.n	849c4 <__swsetup_r+0x64>
   84986:	6963      	ldr	r3, [r4, #20]
   84988:	2200      	movs	r2, #0
   8498a:	425b      	negs	r3, r3
   8498c:	61a3      	str	r3, [r4, #24]
   8498e:	60a2      	str	r2, [r4, #8]
   84990:	b1f0      	cbz	r0, 849d0 <__swsetup_r+0x70>
   84992:	2000      	movs	r0, #0
   84994:	bd38      	pop	{r3, r4, r5, pc}
   84996:	06d9      	lsls	r1, r3, #27
   84998:	d53b      	bpl.n	84a12 <__swsetup_r+0xb2>
   8499a:	0758      	lsls	r0, r3, #29
   8499c:	d425      	bmi.n	849ea <__swsetup_r+0x8a>
   8499e:	6920      	ldr	r0, [r4, #16]
   849a0:	f042 0308 	orr.w	r3, r2, #8
   849a4:	81a3      	strh	r3, [r4, #12]
   849a6:	b29b      	uxth	r3, r3
   849a8:	2800      	cmp	r0, #0
   849aa:	d1e9      	bne.n	84980 <__swsetup_r+0x20>
   849ac:	f403 7220 	and.w	r2, r3, #640	; 0x280
   849b0:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   849b4:	d0e4      	beq.n	84980 <__swsetup_r+0x20>
   849b6:	4628      	mov	r0, r5
   849b8:	4621      	mov	r1, r4
   849ba:	f000 fd13 	bl	853e4 <__smakebuf_r>
   849be:	89a3      	ldrh	r3, [r4, #12]
   849c0:	6920      	ldr	r0, [r4, #16]
   849c2:	e7dd      	b.n	84980 <__swsetup_r+0x20>
   849c4:	0799      	lsls	r1, r3, #30
   849c6:	bf58      	it	pl
   849c8:	6962      	ldrpl	r2, [r4, #20]
   849ca:	60a2      	str	r2, [r4, #8]
   849cc:	2800      	cmp	r0, #0
   849ce:	d1e0      	bne.n	84992 <__swsetup_r+0x32>
   849d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   849d4:	061a      	lsls	r2, r3, #24
   849d6:	d5dd      	bpl.n	84994 <__swsetup_r+0x34>
   849d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   849dc:	81a3      	strh	r3, [r4, #12]
   849de:	f04f 30ff 	mov.w	r0, #4294967295
   849e2:	bd38      	pop	{r3, r4, r5, pc}
   849e4:	f000 f968 	bl	84cb8 <__sinit>
   849e8:	e7c3      	b.n	84972 <__swsetup_r+0x12>
   849ea:	6b21      	ldr	r1, [r4, #48]	; 0x30
   849ec:	b151      	cbz	r1, 84a04 <__swsetup_r+0xa4>
   849ee:	f104 0340 	add.w	r3, r4, #64	; 0x40
   849f2:	4299      	cmp	r1, r3
   849f4:	d004      	beq.n	84a00 <__swsetup_r+0xa0>
   849f6:	4628      	mov	r0, r5
   849f8:	f000 fa26 	bl	84e48 <_free_r>
   849fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   84a00:	2300      	movs	r3, #0
   84a02:	6323      	str	r3, [r4, #48]	; 0x30
   84a04:	6920      	ldr	r0, [r4, #16]
   84a06:	2300      	movs	r3, #0
   84a08:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   84a0c:	e884 0009 	stmia.w	r4, {r0, r3}
   84a10:	e7c6      	b.n	849a0 <__swsetup_r+0x40>
   84a12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   84a16:	2309      	movs	r3, #9
   84a18:	602b      	str	r3, [r5, #0]
   84a1a:	f04f 30ff 	mov.w	r0, #4294967295
   84a1e:	81a2      	strh	r2, [r4, #12]
   84a20:	bd38      	pop	{r3, r4, r5, pc}
   84a22:	bf00      	nop
   84a24:	20070830 	.word	0x20070830

00084a28 <register_fini>:
   84a28:	4b02      	ldr	r3, [pc, #8]	; (84a34 <register_fini+0xc>)
   84a2a:	b113      	cbz	r3, 84a32 <register_fini+0xa>
   84a2c:	4802      	ldr	r0, [pc, #8]	; (84a38 <register_fini+0x10>)
   84a2e:	f000 b805 	b.w	84a3c <atexit>
   84a32:	4770      	bx	lr
   84a34:	00000000 	.word	0x00000000
   84a38:	00084ccd 	.word	0x00084ccd

00084a3c <atexit>:
   84a3c:	2300      	movs	r3, #0
   84a3e:	4601      	mov	r1, r0
   84a40:	461a      	mov	r2, r3
   84a42:	4618      	mov	r0, r3
   84a44:	f001 bbce 	b.w	861e4 <__register_exitproc>

00084a48 <__sflush_r>:
   84a48:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   84a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84a50:	b29a      	uxth	r2, r3
   84a52:	460d      	mov	r5, r1
   84a54:	0711      	lsls	r1, r2, #28
   84a56:	4680      	mov	r8, r0
   84a58:	d43c      	bmi.n	84ad4 <__sflush_r+0x8c>
   84a5a:	686a      	ldr	r2, [r5, #4]
   84a5c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   84a60:	2a00      	cmp	r2, #0
   84a62:	81ab      	strh	r3, [r5, #12]
   84a64:	dd73      	ble.n	84b4e <__sflush_r+0x106>
   84a66:	6aac      	ldr	r4, [r5, #40]	; 0x28
   84a68:	2c00      	cmp	r4, #0
   84a6a:	d04b      	beq.n	84b04 <__sflush_r+0xbc>
   84a6c:	b29b      	uxth	r3, r3
   84a6e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   84a72:	2100      	movs	r1, #0
   84a74:	b292      	uxth	r2, r2
   84a76:	f8d8 6000 	ldr.w	r6, [r8]
   84a7a:	f8c8 1000 	str.w	r1, [r8]
   84a7e:	2a00      	cmp	r2, #0
   84a80:	d069      	beq.n	84b56 <__sflush_r+0x10e>
   84a82:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   84a84:	075f      	lsls	r7, r3, #29
   84a86:	d505      	bpl.n	84a94 <__sflush_r+0x4c>
   84a88:	6869      	ldr	r1, [r5, #4]
   84a8a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   84a8c:	1a52      	subs	r2, r2, r1
   84a8e:	b10b      	cbz	r3, 84a94 <__sflush_r+0x4c>
   84a90:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   84a92:	1ad2      	subs	r2, r2, r3
   84a94:	2300      	movs	r3, #0
   84a96:	69e9      	ldr	r1, [r5, #28]
   84a98:	4640      	mov	r0, r8
   84a9a:	47a0      	blx	r4
   84a9c:	1c44      	adds	r4, r0, #1
   84a9e:	d03c      	beq.n	84b1a <__sflush_r+0xd2>
   84aa0:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   84aa4:	6929      	ldr	r1, [r5, #16]
   84aa6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   84aaa:	2200      	movs	r2, #0
   84aac:	81ab      	strh	r3, [r5, #12]
   84aae:	04db      	lsls	r3, r3, #19
   84ab0:	e885 0006 	stmia.w	r5, {r1, r2}
   84ab4:	d449      	bmi.n	84b4a <__sflush_r+0x102>
   84ab6:	6b29      	ldr	r1, [r5, #48]	; 0x30
   84ab8:	f8c8 6000 	str.w	r6, [r8]
   84abc:	b311      	cbz	r1, 84b04 <__sflush_r+0xbc>
   84abe:	f105 0340 	add.w	r3, r5, #64	; 0x40
   84ac2:	4299      	cmp	r1, r3
   84ac4:	d002      	beq.n	84acc <__sflush_r+0x84>
   84ac6:	4640      	mov	r0, r8
   84ac8:	f000 f9be 	bl	84e48 <_free_r>
   84acc:	2000      	movs	r0, #0
   84ace:	6328      	str	r0, [r5, #48]	; 0x30
   84ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84ad4:	692e      	ldr	r6, [r5, #16]
   84ad6:	b1ae      	cbz	r6, 84b04 <__sflush_r+0xbc>
   84ad8:	0790      	lsls	r0, r2, #30
   84ada:	682c      	ldr	r4, [r5, #0]
   84adc:	bf0c      	ite	eq
   84ade:	696b      	ldreq	r3, [r5, #20]
   84ae0:	2300      	movne	r3, #0
   84ae2:	602e      	str	r6, [r5, #0]
   84ae4:	1ba4      	subs	r4, r4, r6
   84ae6:	60ab      	str	r3, [r5, #8]
   84ae8:	e00a      	b.n	84b00 <__sflush_r+0xb8>
   84aea:	4623      	mov	r3, r4
   84aec:	4632      	mov	r2, r6
   84aee:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   84af0:	69e9      	ldr	r1, [r5, #28]
   84af2:	4640      	mov	r0, r8
   84af4:	47b8      	blx	r7
   84af6:	2800      	cmp	r0, #0
   84af8:	eba4 0400 	sub.w	r4, r4, r0
   84afc:	4406      	add	r6, r0
   84afe:	dd04      	ble.n	84b0a <__sflush_r+0xc2>
   84b00:	2c00      	cmp	r4, #0
   84b02:	dcf2      	bgt.n	84aea <__sflush_r+0xa2>
   84b04:	2000      	movs	r0, #0
   84b06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84b0a:	89ab      	ldrh	r3, [r5, #12]
   84b0c:	f04f 30ff 	mov.w	r0, #4294967295
   84b10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   84b14:	81ab      	strh	r3, [r5, #12]
   84b16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84b1a:	f8d8 2000 	ldr.w	r2, [r8]
   84b1e:	2a1d      	cmp	r2, #29
   84b20:	d8f3      	bhi.n	84b0a <__sflush_r+0xc2>
   84b22:	4b1a      	ldr	r3, [pc, #104]	; (84b8c <__sflush_r+0x144>)
   84b24:	40d3      	lsrs	r3, r2
   84b26:	f003 0301 	and.w	r3, r3, #1
   84b2a:	f083 0401 	eor.w	r4, r3, #1
   84b2e:	2b00      	cmp	r3, #0
   84b30:	d0eb      	beq.n	84b0a <__sflush_r+0xc2>
   84b32:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   84b36:	6929      	ldr	r1, [r5, #16]
   84b38:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   84b3c:	6029      	str	r1, [r5, #0]
   84b3e:	04d9      	lsls	r1, r3, #19
   84b40:	606c      	str	r4, [r5, #4]
   84b42:	81ab      	strh	r3, [r5, #12]
   84b44:	d5b7      	bpl.n	84ab6 <__sflush_r+0x6e>
   84b46:	2a00      	cmp	r2, #0
   84b48:	d1b5      	bne.n	84ab6 <__sflush_r+0x6e>
   84b4a:	6528      	str	r0, [r5, #80]	; 0x50
   84b4c:	e7b3      	b.n	84ab6 <__sflush_r+0x6e>
   84b4e:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   84b50:	2a00      	cmp	r2, #0
   84b52:	dc88      	bgt.n	84a66 <__sflush_r+0x1e>
   84b54:	e7d6      	b.n	84b04 <__sflush_r+0xbc>
   84b56:	2301      	movs	r3, #1
   84b58:	69e9      	ldr	r1, [r5, #28]
   84b5a:	4640      	mov	r0, r8
   84b5c:	47a0      	blx	r4
   84b5e:	1c43      	adds	r3, r0, #1
   84b60:	4602      	mov	r2, r0
   84b62:	d002      	beq.n	84b6a <__sflush_r+0x122>
   84b64:	89ab      	ldrh	r3, [r5, #12]
   84b66:	6aac      	ldr	r4, [r5, #40]	; 0x28
   84b68:	e78c      	b.n	84a84 <__sflush_r+0x3c>
   84b6a:	f8d8 3000 	ldr.w	r3, [r8]
   84b6e:	2b00      	cmp	r3, #0
   84b70:	d0f8      	beq.n	84b64 <__sflush_r+0x11c>
   84b72:	2b1d      	cmp	r3, #29
   84b74:	d001      	beq.n	84b7a <__sflush_r+0x132>
   84b76:	2b16      	cmp	r3, #22
   84b78:	d102      	bne.n	84b80 <__sflush_r+0x138>
   84b7a:	f8c8 6000 	str.w	r6, [r8]
   84b7e:	e7c1      	b.n	84b04 <__sflush_r+0xbc>
   84b80:	89ab      	ldrh	r3, [r5, #12]
   84b82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   84b86:	81ab      	strh	r3, [r5, #12]
   84b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84b8c:	20400001 	.word	0x20400001

00084b90 <_fflush_r>:
   84b90:	b510      	push	{r4, lr}
   84b92:	4604      	mov	r4, r0
   84b94:	b082      	sub	sp, #8
   84b96:	b108      	cbz	r0, 84b9c <_fflush_r+0xc>
   84b98:	6b83      	ldr	r3, [r0, #56]	; 0x38
   84b9a:	b153      	cbz	r3, 84bb2 <_fflush_r+0x22>
   84b9c:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   84ba0:	b908      	cbnz	r0, 84ba6 <_fflush_r+0x16>
   84ba2:	b002      	add	sp, #8
   84ba4:	bd10      	pop	{r4, pc}
   84ba6:	4620      	mov	r0, r4
   84ba8:	b002      	add	sp, #8
   84baa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   84bae:	f7ff bf4b 	b.w	84a48 <__sflush_r>
   84bb2:	9101      	str	r1, [sp, #4]
   84bb4:	f000 f880 	bl	84cb8 <__sinit>
   84bb8:	9901      	ldr	r1, [sp, #4]
   84bba:	e7ef      	b.n	84b9c <_fflush_r+0xc>

00084bbc <_cleanup_r>:
   84bbc:	4901      	ldr	r1, [pc, #4]	; (84bc4 <_cleanup_r+0x8>)
   84bbe:	f000 bbaf 	b.w	85320 <_fwalk_reent>
   84bc2:	bf00      	nop
   84bc4:	000862ad 	.word	0x000862ad

00084bc8 <__sinit.part.1>:
   84bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84bcc:	4607      	mov	r7, r0
   84bce:	4835      	ldr	r0, [pc, #212]	; (84ca4 <__sinit.part.1+0xdc>)
   84bd0:	687d      	ldr	r5, [r7, #4]
   84bd2:	2400      	movs	r4, #0
   84bd4:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   84bd8:	2304      	movs	r3, #4
   84bda:	2103      	movs	r1, #3
   84bdc:	63f8      	str	r0, [r7, #60]	; 0x3c
   84bde:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   84be2:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   84be6:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   84bea:	b083      	sub	sp, #12
   84bec:	602c      	str	r4, [r5, #0]
   84bee:	606c      	str	r4, [r5, #4]
   84bf0:	60ac      	str	r4, [r5, #8]
   84bf2:	666c      	str	r4, [r5, #100]	; 0x64
   84bf4:	81ec      	strh	r4, [r5, #14]
   84bf6:	612c      	str	r4, [r5, #16]
   84bf8:	616c      	str	r4, [r5, #20]
   84bfa:	61ac      	str	r4, [r5, #24]
   84bfc:	81ab      	strh	r3, [r5, #12]
   84bfe:	4621      	mov	r1, r4
   84c00:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   84c04:	2208      	movs	r2, #8
   84c06:	f7fe fe19 	bl	8383c <memset>
   84c0a:	f8df b09c 	ldr.w	fp, [pc, #156]	; 84ca8 <__sinit.part.1+0xe0>
   84c0e:	68be      	ldr	r6, [r7, #8]
   84c10:	f8df a098 	ldr.w	sl, [pc, #152]	; 84cac <__sinit.part.1+0xe4>
   84c14:	f8df 9098 	ldr.w	r9, [pc, #152]	; 84cb0 <__sinit.part.1+0xe8>
   84c18:	f8df 8098 	ldr.w	r8, [pc, #152]	; 84cb4 <__sinit.part.1+0xec>
   84c1c:	2301      	movs	r3, #1
   84c1e:	2209      	movs	r2, #9
   84c20:	f8c5 b020 	str.w	fp, [r5, #32]
   84c24:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   84c28:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   84c2c:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   84c30:	61ed      	str	r5, [r5, #28]
   84c32:	4621      	mov	r1, r4
   84c34:	81f3      	strh	r3, [r6, #14]
   84c36:	81b2      	strh	r2, [r6, #12]
   84c38:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   84c3c:	6034      	str	r4, [r6, #0]
   84c3e:	6074      	str	r4, [r6, #4]
   84c40:	60b4      	str	r4, [r6, #8]
   84c42:	6674      	str	r4, [r6, #100]	; 0x64
   84c44:	6134      	str	r4, [r6, #16]
   84c46:	6174      	str	r4, [r6, #20]
   84c48:	61b4      	str	r4, [r6, #24]
   84c4a:	2208      	movs	r2, #8
   84c4c:	9301      	str	r3, [sp, #4]
   84c4e:	f7fe fdf5 	bl	8383c <memset>
   84c52:	68fd      	ldr	r5, [r7, #12]
   84c54:	2012      	movs	r0, #18
   84c56:	2202      	movs	r2, #2
   84c58:	61f6      	str	r6, [r6, #28]
   84c5a:	f8c6 b020 	str.w	fp, [r6, #32]
   84c5e:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   84c62:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   84c66:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   84c6a:	4621      	mov	r1, r4
   84c6c:	81a8      	strh	r0, [r5, #12]
   84c6e:	81ea      	strh	r2, [r5, #14]
   84c70:	602c      	str	r4, [r5, #0]
   84c72:	606c      	str	r4, [r5, #4]
   84c74:	60ac      	str	r4, [r5, #8]
   84c76:	666c      	str	r4, [r5, #100]	; 0x64
   84c78:	612c      	str	r4, [r5, #16]
   84c7a:	616c      	str	r4, [r5, #20]
   84c7c:	61ac      	str	r4, [r5, #24]
   84c7e:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   84c82:	2208      	movs	r2, #8
   84c84:	f7fe fdda 	bl	8383c <memset>
   84c88:	9b01      	ldr	r3, [sp, #4]
   84c8a:	61ed      	str	r5, [r5, #28]
   84c8c:	f8c5 b020 	str.w	fp, [r5, #32]
   84c90:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   84c94:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   84c98:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   84c9c:	63bb      	str	r3, [r7, #56]	; 0x38
   84c9e:	b003      	add	sp, #12
   84ca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84ca4:	00084bbd 	.word	0x00084bbd
   84ca8:	00086015 	.word	0x00086015
   84cac:	00086039 	.word	0x00086039
   84cb0:	00086075 	.word	0x00086075
   84cb4:	00086095 	.word	0x00086095

00084cb8 <__sinit>:
   84cb8:	6b83      	ldr	r3, [r0, #56]	; 0x38
   84cba:	b103      	cbz	r3, 84cbe <__sinit+0x6>
   84cbc:	4770      	bx	lr
   84cbe:	f7ff bf83 	b.w	84bc8 <__sinit.part.1>
   84cc2:	bf00      	nop

00084cc4 <__sfp_lock_acquire>:
   84cc4:	4770      	bx	lr
   84cc6:	bf00      	nop

00084cc8 <__sfp_lock_release>:
   84cc8:	4770      	bx	lr
   84cca:	bf00      	nop

00084ccc <__libc_fini_array>:
   84ccc:	b538      	push	{r3, r4, r5, lr}
   84cce:	4d07      	ldr	r5, [pc, #28]	; (84cec <__libc_fini_array+0x20>)
   84cd0:	4c07      	ldr	r4, [pc, #28]	; (84cf0 <__libc_fini_array+0x24>)
   84cd2:	1b2c      	subs	r4, r5, r4
   84cd4:	10a4      	asrs	r4, r4, #2
   84cd6:	d005      	beq.n	84ce4 <__libc_fini_array+0x18>
   84cd8:	3c01      	subs	r4, #1
   84cda:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   84cde:	4798      	blx	r3
   84ce0:	2c00      	cmp	r4, #0
   84ce2:	d1f9      	bne.n	84cd8 <__libc_fini_array+0xc>
   84ce4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   84ce8:	f001 bd82 	b.w	867f0 <_fini>
   84cec:	00086800 	.word	0x00086800
   84cf0:	000867fc 	.word	0x000867fc

00084cf4 <__fputwc>:
   84cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84cf8:	b082      	sub	sp, #8
   84cfa:	4606      	mov	r6, r0
   84cfc:	460f      	mov	r7, r1
   84cfe:	4614      	mov	r4, r2
   84d00:	f000 fb3a 	bl	85378 <__locale_mb_cur_max>
   84d04:	2801      	cmp	r0, #1
   84d06:	d032      	beq.n	84d6e <__fputwc+0x7a>
   84d08:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   84d0c:	463a      	mov	r2, r7
   84d0e:	a901      	add	r1, sp, #4
   84d10:	4630      	mov	r0, r6
   84d12:	f001 fa19 	bl	86148 <_wcrtomb_r>
   84d16:	f1b0 3fff 	cmp.w	r0, #4294967295
   84d1a:	4680      	mov	r8, r0
   84d1c:	d020      	beq.n	84d60 <__fputwc+0x6c>
   84d1e:	b370      	cbz	r0, 84d7e <__fputwc+0x8a>
   84d20:	f89d 1004 	ldrb.w	r1, [sp, #4]
   84d24:	2500      	movs	r5, #0
   84d26:	e008      	b.n	84d3a <__fputwc+0x46>
   84d28:	6823      	ldr	r3, [r4, #0]
   84d2a:	1c5a      	adds	r2, r3, #1
   84d2c:	6022      	str	r2, [r4, #0]
   84d2e:	7019      	strb	r1, [r3, #0]
   84d30:	3501      	adds	r5, #1
   84d32:	4545      	cmp	r5, r8
   84d34:	d223      	bcs.n	84d7e <__fputwc+0x8a>
   84d36:	ab01      	add	r3, sp, #4
   84d38:	5d59      	ldrb	r1, [r3, r5]
   84d3a:	68a3      	ldr	r3, [r4, #8]
   84d3c:	3b01      	subs	r3, #1
   84d3e:	2b00      	cmp	r3, #0
   84d40:	60a3      	str	r3, [r4, #8]
   84d42:	daf1      	bge.n	84d28 <__fputwc+0x34>
   84d44:	69a2      	ldr	r2, [r4, #24]
   84d46:	4293      	cmp	r3, r2
   84d48:	db01      	blt.n	84d4e <__fputwc+0x5a>
   84d4a:	290a      	cmp	r1, #10
   84d4c:	d1ec      	bne.n	84d28 <__fputwc+0x34>
   84d4e:	4622      	mov	r2, r4
   84d50:	4630      	mov	r0, r6
   84d52:	f001 f9a3 	bl	8609c <__swbuf_r>
   84d56:	1c43      	adds	r3, r0, #1
   84d58:	d1ea      	bne.n	84d30 <__fputwc+0x3c>
   84d5a:	b002      	add	sp, #8
   84d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84d60:	89a3      	ldrh	r3, [r4, #12]
   84d62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   84d66:	81a3      	strh	r3, [r4, #12]
   84d68:	b002      	add	sp, #8
   84d6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84d6e:	1e7b      	subs	r3, r7, #1
   84d70:	2bfe      	cmp	r3, #254	; 0xfe
   84d72:	d8c9      	bhi.n	84d08 <__fputwc+0x14>
   84d74:	b2f9      	uxtb	r1, r7
   84d76:	4680      	mov	r8, r0
   84d78:	f88d 1004 	strb.w	r1, [sp, #4]
   84d7c:	e7d2      	b.n	84d24 <__fputwc+0x30>
   84d7e:	4638      	mov	r0, r7
   84d80:	b002      	add	sp, #8
   84d82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84d86:	bf00      	nop

00084d88 <_fputwc_r>:
   84d88:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   84d8c:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   84d90:	d10a      	bne.n	84da8 <_fputwc_r+0x20>
   84d92:	b410      	push	{r4}
   84d94:	6e54      	ldr	r4, [r2, #100]	; 0x64
   84d96:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   84d9a:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
   84d9e:	6654      	str	r4, [r2, #100]	; 0x64
   84da0:	8193      	strh	r3, [r2, #12]
   84da2:	bc10      	pop	{r4}
   84da4:	f7ff bfa6 	b.w	84cf4 <__fputwc>
   84da8:	f7ff bfa4 	b.w	84cf4 <__fputwc>

00084dac <_malloc_trim_r>:
   84dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84dae:	460c      	mov	r4, r1
   84db0:	4f22      	ldr	r7, [pc, #136]	; (84e3c <_malloc_trim_r+0x90>)
   84db2:	4606      	mov	r6, r0
   84db4:	f000 ff2e 	bl	85c14 <__malloc_lock>
   84db8:	68bb      	ldr	r3, [r7, #8]
   84dba:	685d      	ldr	r5, [r3, #4]
   84dbc:	f025 0503 	bic.w	r5, r5, #3
   84dc0:	1b29      	subs	r1, r5, r4
   84dc2:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   84dc6:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   84dca:	f021 010f 	bic.w	r1, r1, #15
   84dce:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   84dd2:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   84dd6:	db07      	blt.n	84de8 <_malloc_trim_r+0x3c>
   84dd8:	2100      	movs	r1, #0
   84dda:	4630      	mov	r0, r6
   84ddc:	f001 f908 	bl	85ff0 <_sbrk_r>
   84de0:	68bb      	ldr	r3, [r7, #8]
   84de2:	442b      	add	r3, r5
   84de4:	4298      	cmp	r0, r3
   84de6:	d004      	beq.n	84df2 <_malloc_trim_r+0x46>
   84de8:	4630      	mov	r0, r6
   84dea:	f000 ff15 	bl	85c18 <__malloc_unlock>
   84dee:	2000      	movs	r0, #0
   84df0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84df2:	4261      	negs	r1, r4
   84df4:	4630      	mov	r0, r6
   84df6:	f001 f8fb 	bl	85ff0 <_sbrk_r>
   84dfa:	3001      	adds	r0, #1
   84dfc:	d00d      	beq.n	84e1a <_malloc_trim_r+0x6e>
   84dfe:	4b10      	ldr	r3, [pc, #64]	; (84e40 <_malloc_trim_r+0x94>)
   84e00:	68ba      	ldr	r2, [r7, #8]
   84e02:	6819      	ldr	r1, [r3, #0]
   84e04:	1b2d      	subs	r5, r5, r4
   84e06:	f045 0501 	orr.w	r5, r5, #1
   84e0a:	4630      	mov	r0, r6
   84e0c:	1b09      	subs	r1, r1, r4
   84e0e:	6055      	str	r5, [r2, #4]
   84e10:	6019      	str	r1, [r3, #0]
   84e12:	f000 ff01 	bl	85c18 <__malloc_unlock>
   84e16:	2001      	movs	r0, #1
   84e18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84e1a:	2100      	movs	r1, #0
   84e1c:	4630      	mov	r0, r6
   84e1e:	f001 f8e7 	bl	85ff0 <_sbrk_r>
   84e22:	68ba      	ldr	r2, [r7, #8]
   84e24:	1a83      	subs	r3, r0, r2
   84e26:	2b0f      	cmp	r3, #15
   84e28:	ddde      	ble.n	84de8 <_malloc_trim_r+0x3c>
   84e2a:	4c06      	ldr	r4, [pc, #24]	; (84e44 <_malloc_trim_r+0x98>)
   84e2c:	4904      	ldr	r1, [pc, #16]	; (84e40 <_malloc_trim_r+0x94>)
   84e2e:	6824      	ldr	r4, [r4, #0]
   84e30:	f043 0301 	orr.w	r3, r3, #1
   84e34:	1b00      	subs	r0, r0, r4
   84e36:	6053      	str	r3, [r2, #4]
   84e38:	6008      	str	r0, [r1, #0]
   84e3a:	e7d5      	b.n	84de8 <_malloc_trim_r+0x3c>
   84e3c:	20070858 	.word	0x20070858
   84e40:	20070d90 	.word	0x20070d90
   84e44:	20070c64 	.word	0x20070c64

00084e48 <_free_r>:
   84e48:	2900      	cmp	r1, #0
   84e4a:	d045      	beq.n	84ed8 <_free_r+0x90>
   84e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84e50:	460d      	mov	r5, r1
   84e52:	4680      	mov	r8, r0
   84e54:	f000 fede 	bl	85c14 <__malloc_lock>
   84e58:	f855 7c04 	ldr.w	r7, [r5, #-4]
   84e5c:	496a      	ldr	r1, [pc, #424]	; (85008 <_free_r+0x1c0>)
   84e5e:	f1a5 0408 	sub.w	r4, r5, #8
   84e62:	f027 0301 	bic.w	r3, r7, #1
   84e66:	18e2      	adds	r2, r4, r3
   84e68:	688e      	ldr	r6, [r1, #8]
   84e6a:	6850      	ldr	r0, [r2, #4]
   84e6c:	42b2      	cmp	r2, r6
   84e6e:	f020 0003 	bic.w	r0, r0, #3
   84e72:	d062      	beq.n	84f3a <_free_r+0xf2>
   84e74:	07fe      	lsls	r6, r7, #31
   84e76:	6050      	str	r0, [r2, #4]
   84e78:	d40b      	bmi.n	84e92 <_free_r+0x4a>
   84e7a:	f855 7c08 	ldr.w	r7, [r5, #-8]
   84e7e:	f101 0e08 	add.w	lr, r1, #8
   84e82:	1be4      	subs	r4, r4, r7
   84e84:	68a5      	ldr	r5, [r4, #8]
   84e86:	443b      	add	r3, r7
   84e88:	4575      	cmp	r5, lr
   84e8a:	d06f      	beq.n	84f6c <_free_r+0x124>
   84e8c:	68e7      	ldr	r7, [r4, #12]
   84e8e:	60ef      	str	r7, [r5, #12]
   84e90:	60bd      	str	r5, [r7, #8]
   84e92:	1815      	adds	r5, r2, r0
   84e94:	686d      	ldr	r5, [r5, #4]
   84e96:	07ed      	lsls	r5, r5, #31
   84e98:	d542      	bpl.n	84f20 <_free_r+0xd8>
   84e9a:	f043 0201 	orr.w	r2, r3, #1
   84e9e:	6062      	str	r2, [r4, #4]
   84ea0:	50e3      	str	r3, [r4, r3]
   84ea2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   84ea6:	d218      	bcs.n	84eda <_free_r+0x92>
   84ea8:	08db      	lsrs	r3, r3, #3
   84eaa:	6848      	ldr	r0, [r1, #4]
   84eac:	109d      	asrs	r5, r3, #2
   84eae:	2201      	movs	r2, #1
   84eb0:	3301      	adds	r3, #1
   84eb2:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   84eb6:	fa02 f505 	lsl.w	r5, r2, r5
   84eba:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
   84ebe:	4328      	orrs	r0, r5
   84ec0:	3a08      	subs	r2, #8
   84ec2:	60e2      	str	r2, [r4, #12]
   84ec4:	60a7      	str	r7, [r4, #8]
   84ec6:	6048      	str	r0, [r1, #4]
   84ec8:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   84ecc:	60fc      	str	r4, [r7, #12]
   84ece:	4640      	mov	r0, r8
   84ed0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   84ed4:	f000 bea0 	b.w	85c18 <__malloc_unlock>
   84ed8:	4770      	bx	lr
   84eda:	0a5a      	lsrs	r2, r3, #9
   84edc:	2a04      	cmp	r2, #4
   84ede:	d853      	bhi.n	84f88 <_free_r+0x140>
   84ee0:	099a      	lsrs	r2, r3, #6
   84ee2:	f102 0739 	add.w	r7, r2, #57	; 0x39
   84ee6:	007f      	lsls	r7, r7, #1
   84ee8:	f102 0538 	add.w	r5, r2, #56	; 0x38
   84eec:	eb01 0087 	add.w	r0, r1, r7, lsl #2
   84ef0:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
   84ef4:	3808      	subs	r0, #8
   84ef6:	4290      	cmp	r0, r2
   84ef8:	4943      	ldr	r1, [pc, #268]	; (85008 <_free_r+0x1c0>)
   84efa:	d04d      	beq.n	84f98 <_free_r+0x150>
   84efc:	6851      	ldr	r1, [r2, #4]
   84efe:	f021 0103 	bic.w	r1, r1, #3
   84f02:	428b      	cmp	r3, r1
   84f04:	d202      	bcs.n	84f0c <_free_r+0xc4>
   84f06:	6892      	ldr	r2, [r2, #8]
   84f08:	4290      	cmp	r0, r2
   84f0a:	d1f7      	bne.n	84efc <_free_r+0xb4>
   84f0c:	68d0      	ldr	r0, [r2, #12]
   84f0e:	60e0      	str	r0, [r4, #12]
   84f10:	60a2      	str	r2, [r4, #8]
   84f12:	6084      	str	r4, [r0, #8]
   84f14:	60d4      	str	r4, [r2, #12]
   84f16:	4640      	mov	r0, r8
   84f18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   84f1c:	f000 be7c 	b.w	85c18 <__malloc_unlock>
   84f20:	6895      	ldr	r5, [r2, #8]
   84f22:	4f3a      	ldr	r7, [pc, #232]	; (8500c <_free_r+0x1c4>)
   84f24:	4403      	add	r3, r0
   84f26:	42bd      	cmp	r5, r7
   84f28:	d03f      	beq.n	84faa <_free_r+0x162>
   84f2a:	68d0      	ldr	r0, [r2, #12]
   84f2c:	f043 0201 	orr.w	r2, r3, #1
   84f30:	60e8      	str	r0, [r5, #12]
   84f32:	6085      	str	r5, [r0, #8]
   84f34:	6062      	str	r2, [r4, #4]
   84f36:	50e3      	str	r3, [r4, r3]
   84f38:	e7b3      	b.n	84ea2 <_free_r+0x5a>
   84f3a:	07ff      	lsls	r7, r7, #31
   84f3c:	4403      	add	r3, r0
   84f3e:	d407      	bmi.n	84f50 <_free_r+0x108>
   84f40:	f855 5c08 	ldr.w	r5, [r5, #-8]
   84f44:	1b64      	subs	r4, r4, r5
   84f46:	68e2      	ldr	r2, [r4, #12]
   84f48:	68a0      	ldr	r0, [r4, #8]
   84f4a:	442b      	add	r3, r5
   84f4c:	60c2      	str	r2, [r0, #12]
   84f4e:	6090      	str	r0, [r2, #8]
   84f50:	4a2f      	ldr	r2, [pc, #188]	; (85010 <_free_r+0x1c8>)
   84f52:	f043 0001 	orr.w	r0, r3, #1
   84f56:	6812      	ldr	r2, [r2, #0]
   84f58:	6060      	str	r0, [r4, #4]
   84f5a:	4293      	cmp	r3, r2
   84f5c:	608c      	str	r4, [r1, #8]
   84f5e:	d3b6      	bcc.n	84ece <_free_r+0x86>
   84f60:	4b2c      	ldr	r3, [pc, #176]	; (85014 <_free_r+0x1cc>)
   84f62:	4640      	mov	r0, r8
   84f64:	6819      	ldr	r1, [r3, #0]
   84f66:	f7ff ff21 	bl	84dac <_malloc_trim_r>
   84f6a:	e7b0      	b.n	84ece <_free_r+0x86>
   84f6c:	1811      	adds	r1, r2, r0
   84f6e:	6849      	ldr	r1, [r1, #4]
   84f70:	07c9      	lsls	r1, r1, #31
   84f72:	d444      	bmi.n	84ffe <_free_r+0x1b6>
   84f74:	6891      	ldr	r1, [r2, #8]
   84f76:	4403      	add	r3, r0
   84f78:	68d2      	ldr	r2, [r2, #12]
   84f7a:	f043 0001 	orr.w	r0, r3, #1
   84f7e:	60ca      	str	r2, [r1, #12]
   84f80:	6091      	str	r1, [r2, #8]
   84f82:	6060      	str	r0, [r4, #4]
   84f84:	50e3      	str	r3, [r4, r3]
   84f86:	e7a2      	b.n	84ece <_free_r+0x86>
   84f88:	2a14      	cmp	r2, #20
   84f8a:	d817      	bhi.n	84fbc <_free_r+0x174>
   84f8c:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   84f90:	007f      	lsls	r7, r7, #1
   84f92:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   84f96:	e7a9      	b.n	84eec <_free_r+0xa4>
   84f98:	10aa      	asrs	r2, r5, #2
   84f9a:	684b      	ldr	r3, [r1, #4]
   84f9c:	2501      	movs	r5, #1
   84f9e:	fa05 f202 	lsl.w	r2, r5, r2
   84fa2:	4313      	orrs	r3, r2
   84fa4:	604b      	str	r3, [r1, #4]
   84fa6:	4602      	mov	r2, r0
   84fa8:	e7b1      	b.n	84f0e <_free_r+0xc6>
   84faa:	f043 0201 	orr.w	r2, r3, #1
   84fae:	614c      	str	r4, [r1, #20]
   84fb0:	610c      	str	r4, [r1, #16]
   84fb2:	60e5      	str	r5, [r4, #12]
   84fb4:	60a5      	str	r5, [r4, #8]
   84fb6:	6062      	str	r2, [r4, #4]
   84fb8:	50e3      	str	r3, [r4, r3]
   84fba:	e788      	b.n	84ece <_free_r+0x86>
   84fbc:	2a54      	cmp	r2, #84	; 0x54
   84fbe:	d806      	bhi.n	84fce <_free_r+0x186>
   84fc0:	0b1a      	lsrs	r2, r3, #12
   84fc2:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   84fc6:	007f      	lsls	r7, r7, #1
   84fc8:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   84fcc:	e78e      	b.n	84eec <_free_r+0xa4>
   84fce:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   84fd2:	d806      	bhi.n	84fe2 <_free_r+0x19a>
   84fd4:	0bda      	lsrs	r2, r3, #15
   84fd6:	f102 0778 	add.w	r7, r2, #120	; 0x78
   84fda:	007f      	lsls	r7, r7, #1
   84fdc:	f102 0577 	add.w	r5, r2, #119	; 0x77
   84fe0:	e784      	b.n	84eec <_free_r+0xa4>
   84fe2:	f240 5054 	movw	r0, #1364	; 0x554
   84fe6:	4282      	cmp	r2, r0
   84fe8:	d806      	bhi.n	84ff8 <_free_r+0x1b0>
   84fea:	0c9a      	lsrs	r2, r3, #18
   84fec:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   84ff0:	007f      	lsls	r7, r7, #1
   84ff2:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   84ff6:	e779      	b.n	84eec <_free_r+0xa4>
   84ff8:	27fe      	movs	r7, #254	; 0xfe
   84ffa:	257e      	movs	r5, #126	; 0x7e
   84ffc:	e776      	b.n	84eec <_free_r+0xa4>
   84ffe:	f043 0201 	orr.w	r2, r3, #1
   85002:	6062      	str	r2, [r4, #4]
   85004:	50e3      	str	r3, [r4, r3]
   85006:	e762      	b.n	84ece <_free_r+0x86>
   85008:	20070858 	.word	0x20070858
   8500c:	20070860 	.word	0x20070860
   85010:	20070c60 	.word	0x20070c60
   85014:	20070d8c 	.word	0x20070d8c

00085018 <__sfvwrite_r>:
   85018:	6893      	ldr	r3, [r2, #8]
   8501a:	2b00      	cmp	r3, #0
   8501c:	f000 80ab 	beq.w	85176 <__sfvwrite_r+0x15e>
   85020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85024:	898b      	ldrh	r3, [r1, #12]
   85026:	b085      	sub	sp, #20
   85028:	460c      	mov	r4, r1
   8502a:	0719      	lsls	r1, r3, #28
   8502c:	9002      	str	r0, [sp, #8]
   8502e:	4616      	mov	r6, r2
   85030:	d528      	bpl.n	85084 <__sfvwrite_r+0x6c>
   85032:	6922      	ldr	r2, [r4, #16]
   85034:	b332      	cbz	r2, 85084 <__sfvwrite_r+0x6c>
   85036:	f003 0802 	and.w	r8, r3, #2
   8503a:	fa1f f088 	uxth.w	r0, r8
   8503e:	6835      	ldr	r5, [r6, #0]
   85040:	b378      	cbz	r0, 850a2 <__sfvwrite_r+0x8a>
   85042:	f04f 0900 	mov.w	r9, #0
   85046:	46c8      	mov	r8, r9
   85048:	f8df a2d0 	ldr.w	sl, [pc, #720]	; 8531c <__sfvwrite_r+0x304>
   8504c:	f1b8 0f00 	cmp.w	r8, #0
   85050:	f000 808b 	beq.w	8516a <__sfvwrite_r+0x152>
   85054:	45d0      	cmp	r8, sl
   85056:	4643      	mov	r3, r8
   85058:	464a      	mov	r2, r9
   8505a:	bf28      	it	cs
   8505c:	4653      	movcs	r3, sl
   8505e:	69e1      	ldr	r1, [r4, #28]
   85060:	9802      	ldr	r0, [sp, #8]
   85062:	6a67      	ldr	r7, [r4, #36]	; 0x24
   85064:	47b8      	blx	r7
   85066:	2800      	cmp	r0, #0
   85068:	f340 80a5 	ble.w	851b6 <__sfvwrite_r+0x19e>
   8506c:	68b3      	ldr	r3, [r6, #8]
   8506e:	4481      	add	r9, r0
   85070:	1a1b      	subs	r3, r3, r0
   85072:	ebc0 0808 	rsb	r8, r0, r8
   85076:	60b3      	str	r3, [r6, #8]
   85078:	2b00      	cmp	r3, #0
   8507a:	d1e7      	bne.n	8504c <__sfvwrite_r+0x34>
   8507c:	2000      	movs	r0, #0
   8507e:	b005      	add	sp, #20
   85080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85084:	4621      	mov	r1, r4
   85086:	9802      	ldr	r0, [sp, #8]
   85088:	f7ff fc6a 	bl	84960 <__swsetup_r>
   8508c:	2800      	cmp	r0, #0
   8508e:	f040 813c 	bne.w	8530a <__sfvwrite_r+0x2f2>
   85092:	89a3      	ldrh	r3, [r4, #12]
   85094:	6835      	ldr	r5, [r6, #0]
   85096:	f003 0802 	and.w	r8, r3, #2
   8509a:	fa1f f088 	uxth.w	r0, r8
   8509e:	2800      	cmp	r0, #0
   850a0:	d1cf      	bne.n	85042 <__sfvwrite_r+0x2a>
   850a2:	f013 0901 	ands.w	r9, r3, #1
   850a6:	f040 8090 	bne.w	851ca <__sfvwrite_r+0x1b2>
   850aa:	464f      	mov	r7, r9
   850ac:	9601      	str	r6, [sp, #4]
   850ae:	2f00      	cmp	r7, #0
   850b0:	d056      	beq.n	85160 <__sfvwrite_r+0x148>
   850b2:	059a      	lsls	r2, r3, #22
   850b4:	f8d4 8008 	ldr.w	r8, [r4, #8]
   850b8:	d55f      	bpl.n	8517a <__sfvwrite_r+0x162>
   850ba:	4547      	cmp	r7, r8
   850bc:	46c2      	mov	sl, r8
   850be:	f0c0 80bf 	bcc.w	85240 <__sfvwrite_r+0x228>
   850c2:	f413 6f90 	tst.w	r3, #1152	; 0x480
   850c6:	f000 80bd 	beq.w	85244 <__sfvwrite_r+0x22c>
   850ca:	6962      	ldr	r2, [r4, #20]
   850cc:	6820      	ldr	r0, [r4, #0]
   850ce:	6921      	ldr	r1, [r4, #16]
   850d0:	eb02 0842 	add.w	r8, r2, r2, lsl #1
   850d4:	ebc1 0a00 	rsb	sl, r1, r0
   850d8:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
   850dc:	f10a 0001 	add.w	r0, sl, #1
   850e0:	ea4f 0868 	mov.w	r8, r8, asr #1
   850e4:	4438      	add	r0, r7
   850e6:	4540      	cmp	r0, r8
   850e8:	4642      	mov	r2, r8
   850ea:	bf84      	itt	hi
   850ec:	4680      	movhi	r8, r0
   850ee:	4642      	movhi	r2, r8
   850f0:	055b      	lsls	r3, r3, #21
   850f2:	f140 80f2 	bpl.w	852da <__sfvwrite_r+0x2c2>
   850f6:	4611      	mov	r1, r2
   850f8:	9802      	ldr	r0, [sp, #8]
   850fa:	f000 f9bf 	bl	8547c <_malloc_r>
   850fe:	4683      	mov	fp, r0
   85100:	2800      	cmp	r0, #0
   85102:	f000 8105 	beq.w	85310 <__sfvwrite_r+0x2f8>
   85106:	4652      	mov	r2, sl
   85108:	6921      	ldr	r1, [r4, #16]
   8510a:	f000 fca9 	bl	85a60 <memcpy>
   8510e:	89a3      	ldrh	r3, [r4, #12]
   85110:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   85114:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   85118:	81a3      	strh	r3, [r4, #12]
   8511a:	ebca 0308 	rsb	r3, sl, r8
   8511e:	eb0b 000a 	add.w	r0, fp, sl
   85122:	f8c4 8014 	str.w	r8, [r4, #20]
   85126:	46ba      	mov	sl, r7
   85128:	46b8      	mov	r8, r7
   8512a:	f8c4 b010 	str.w	fp, [r4, #16]
   8512e:	6020      	str	r0, [r4, #0]
   85130:	60a3      	str	r3, [r4, #8]
   85132:	4652      	mov	r2, sl
   85134:	4649      	mov	r1, r9
   85136:	f000 fd09 	bl	85b4c <memmove>
   8513a:	68a0      	ldr	r0, [r4, #8]
   8513c:	6823      	ldr	r3, [r4, #0]
   8513e:	ebc8 0000 	rsb	r0, r8, r0
   85142:	60a0      	str	r0, [r4, #8]
   85144:	4638      	mov	r0, r7
   85146:	4453      	add	r3, sl
   85148:	6023      	str	r3, [r4, #0]
   8514a:	9a01      	ldr	r2, [sp, #4]
   8514c:	4481      	add	r9, r0
   8514e:	6893      	ldr	r3, [r2, #8]
   85150:	1a3f      	subs	r7, r7, r0
   85152:	1a1b      	subs	r3, r3, r0
   85154:	6093      	str	r3, [r2, #8]
   85156:	2b00      	cmp	r3, #0
   85158:	d090      	beq.n	8507c <__sfvwrite_r+0x64>
   8515a:	89a3      	ldrh	r3, [r4, #12]
   8515c:	2f00      	cmp	r7, #0
   8515e:	d1a8      	bne.n	850b2 <__sfvwrite_r+0x9a>
   85160:	f8d5 9000 	ldr.w	r9, [r5]
   85164:	686f      	ldr	r7, [r5, #4]
   85166:	3508      	adds	r5, #8
   85168:	e7a1      	b.n	850ae <__sfvwrite_r+0x96>
   8516a:	f8d5 9000 	ldr.w	r9, [r5]
   8516e:	f8d5 8004 	ldr.w	r8, [r5, #4]
   85172:	3508      	adds	r5, #8
   85174:	e76a      	b.n	8504c <__sfvwrite_r+0x34>
   85176:	2000      	movs	r0, #0
   85178:	4770      	bx	lr
   8517a:	6820      	ldr	r0, [r4, #0]
   8517c:	6923      	ldr	r3, [r4, #16]
   8517e:	4298      	cmp	r0, r3
   85180:	d803      	bhi.n	8518a <__sfvwrite_r+0x172>
   85182:	6962      	ldr	r2, [r4, #20]
   85184:	4297      	cmp	r7, r2
   85186:	f080 8083 	bcs.w	85290 <__sfvwrite_r+0x278>
   8518a:	45b8      	cmp	r8, r7
   8518c:	bf28      	it	cs
   8518e:	46b8      	movcs	r8, r7
   85190:	4649      	mov	r1, r9
   85192:	4642      	mov	r2, r8
   85194:	f000 fcda 	bl	85b4c <memmove>
   85198:	68a3      	ldr	r3, [r4, #8]
   8519a:	6822      	ldr	r2, [r4, #0]
   8519c:	ebc8 0303 	rsb	r3, r8, r3
   851a0:	4442      	add	r2, r8
   851a2:	60a3      	str	r3, [r4, #8]
   851a4:	6022      	str	r2, [r4, #0]
   851a6:	2b00      	cmp	r3, #0
   851a8:	d148      	bne.n	8523c <__sfvwrite_r+0x224>
   851aa:	4621      	mov	r1, r4
   851ac:	9802      	ldr	r0, [sp, #8]
   851ae:	f7ff fcef 	bl	84b90 <_fflush_r>
   851b2:	2800      	cmp	r0, #0
   851b4:	d042      	beq.n	8523c <__sfvwrite_r+0x224>
   851b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   851ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   851be:	f04f 30ff 	mov.w	r0, #4294967295
   851c2:	81a3      	strh	r3, [r4, #12]
   851c4:	b005      	add	sp, #20
   851c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   851ca:	4680      	mov	r8, r0
   851cc:	4682      	mov	sl, r0
   851ce:	4681      	mov	r9, r0
   851d0:	9001      	str	r0, [sp, #4]
   851d2:	f1b9 0f00 	cmp.w	r9, #0
   851d6:	d029      	beq.n	8522c <__sfvwrite_r+0x214>
   851d8:	9b01      	ldr	r3, [sp, #4]
   851da:	2b00      	cmp	r3, #0
   851dc:	d04b      	beq.n	85276 <__sfvwrite_r+0x25e>
   851de:	45c8      	cmp	r8, r9
   851e0:	46c3      	mov	fp, r8
   851e2:	bf28      	it	cs
   851e4:	46cb      	movcs	fp, r9
   851e6:	6820      	ldr	r0, [r4, #0]
   851e8:	6923      	ldr	r3, [r4, #16]
   851ea:	465f      	mov	r7, fp
   851ec:	4298      	cmp	r0, r3
   851ee:	6962      	ldr	r2, [r4, #20]
   851f0:	d903      	bls.n	851fa <__sfvwrite_r+0x1e2>
   851f2:	68a3      	ldr	r3, [r4, #8]
   851f4:	4413      	add	r3, r2
   851f6:	459b      	cmp	fp, r3
   851f8:	dc5c      	bgt.n	852b4 <__sfvwrite_r+0x29c>
   851fa:	4593      	cmp	fp, r2
   851fc:	db24      	blt.n	85248 <__sfvwrite_r+0x230>
   851fe:	4613      	mov	r3, r2
   85200:	6a67      	ldr	r7, [r4, #36]	; 0x24
   85202:	4652      	mov	r2, sl
   85204:	69e1      	ldr	r1, [r4, #28]
   85206:	9802      	ldr	r0, [sp, #8]
   85208:	47b8      	blx	r7
   8520a:	1e07      	subs	r7, r0, #0
   8520c:	ddd3      	ble.n	851b6 <__sfvwrite_r+0x19e>
   8520e:	ebb8 0807 	subs.w	r8, r8, r7
   85212:	d027      	beq.n	85264 <__sfvwrite_r+0x24c>
   85214:	68b3      	ldr	r3, [r6, #8]
   85216:	44ba      	add	sl, r7
   85218:	1bdb      	subs	r3, r3, r7
   8521a:	ebc7 0909 	rsb	r9, r7, r9
   8521e:	60b3      	str	r3, [r6, #8]
   85220:	2b00      	cmp	r3, #0
   85222:	f43f af2b 	beq.w	8507c <__sfvwrite_r+0x64>
   85226:	f1b9 0f00 	cmp.w	r9, #0
   8522a:	d1d5      	bne.n	851d8 <__sfvwrite_r+0x1c0>
   8522c:	2300      	movs	r3, #0
   8522e:	f8d5 a000 	ldr.w	sl, [r5]
   85232:	f8d5 9004 	ldr.w	r9, [r5, #4]
   85236:	9301      	str	r3, [sp, #4]
   85238:	3508      	adds	r5, #8
   8523a:	e7ca      	b.n	851d2 <__sfvwrite_r+0x1ba>
   8523c:	4640      	mov	r0, r8
   8523e:	e784      	b.n	8514a <__sfvwrite_r+0x132>
   85240:	46b8      	mov	r8, r7
   85242:	46ba      	mov	sl, r7
   85244:	6820      	ldr	r0, [r4, #0]
   85246:	e774      	b.n	85132 <__sfvwrite_r+0x11a>
   85248:	465a      	mov	r2, fp
   8524a:	4651      	mov	r1, sl
   8524c:	f000 fc7e 	bl	85b4c <memmove>
   85250:	68a2      	ldr	r2, [r4, #8]
   85252:	6823      	ldr	r3, [r4, #0]
   85254:	ebcb 0202 	rsb	r2, fp, r2
   85258:	445b      	add	r3, fp
   8525a:	ebb8 0807 	subs.w	r8, r8, r7
   8525e:	60a2      	str	r2, [r4, #8]
   85260:	6023      	str	r3, [r4, #0]
   85262:	d1d7      	bne.n	85214 <__sfvwrite_r+0x1fc>
   85264:	4621      	mov	r1, r4
   85266:	9802      	ldr	r0, [sp, #8]
   85268:	f7ff fc92 	bl	84b90 <_fflush_r>
   8526c:	2800      	cmp	r0, #0
   8526e:	d1a2      	bne.n	851b6 <__sfvwrite_r+0x19e>
   85270:	f8cd 8004 	str.w	r8, [sp, #4]
   85274:	e7ce      	b.n	85214 <__sfvwrite_r+0x1fc>
   85276:	464a      	mov	r2, r9
   85278:	210a      	movs	r1, #10
   8527a:	4650      	mov	r0, sl
   8527c:	f000 fbaa 	bl	859d4 <memchr>
   85280:	2800      	cmp	r0, #0
   85282:	d03d      	beq.n	85300 <__sfvwrite_r+0x2e8>
   85284:	3001      	adds	r0, #1
   85286:	2301      	movs	r3, #1
   85288:	ebca 0800 	rsb	r8, sl, r0
   8528c:	9301      	str	r3, [sp, #4]
   8528e:	e7a6      	b.n	851de <__sfvwrite_r+0x1c6>
   85290:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   85294:	42bb      	cmp	r3, r7
   85296:	bf28      	it	cs
   85298:	463b      	movcs	r3, r7
   8529a:	fb93 f3f2 	sdiv	r3, r3, r2
   8529e:	69e1      	ldr	r1, [r4, #28]
   852a0:	fb02 f303 	mul.w	r3, r2, r3
   852a4:	9802      	ldr	r0, [sp, #8]
   852a6:	464a      	mov	r2, r9
   852a8:	6a66      	ldr	r6, [r4, #36]	; 0x24
   852aa:	47b0      	blx	r6
   852ac:	2800      	cmp	r0, #0
   852ae:	f73f af4c 	bgt.w	8514a <__sfvwrite_r+0x132>
   852b2:	e780      	b.n	851b6 <__sfvwrite_r+0x19e>
   852b4:	461a      	mov	r2, r3
   852b6:	4651      	mov	r1, sl
   852b8:	9303      	str	r3, [sp, #12]
   852ba:	f000 fc47 	bl	85b4c <memmove>
   852be:	6822      	ldr	r2, [r4, #0]
   852c0:	9b03      	ldr	r3, [sp, #12]
   852c2:	4621      	mov	r1, r4
   852c4:	441a      	add	r2, r3
   852c6:	6022      	str	r2, [r4, #0]
   852c8:	9802      	ldr	r0, [sp, #8]
   852ca:	f7ff fc61 	bl	84b90 <_fflush_r>
   852ce:	9b03      	ldr	r3, [sp, #12]
   852d0:	2800      	cmp	r0, #0
   852d2:	f47f af70 	bne.w	851b6 <__sfvwrite_r+0x19e>
   852d6:	461f      	mov	r7, r3
   852d8:	e799      	b.n	8520e <__sfvwrite_r+0x1f6>
   852da:	9802      	ldr	r0, [sp, #8]
   852dc:	f000 fc9e 	bl	85c1c <_realloc_r>
   852e0:	4683      	mov	fp, r0
   852e2:	2800      	cmp	r0, #0
   852e4:	f47f af19 	bne.w	8511a <__sfvwrite_r+0x102>
   852e8:	9d02      	ldr	r5, [sp, #8]
   852ea:	6921      	ldr	r1, [r4, #16]
   852ec:	4628      	mov	r0, r5
   852ee:	f7ff fdab 	bl	84e48 <_free_r>
   852f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   852f6:	220c      	movs	r2, #12
   852f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   852fc:	602a      	str	r2, [r5, #0]
   852fe:	e75c      	b.n	851ba <__sfvwrite_r+0x1a2>
   85300:	2301      	movs	r3, #1
   85302:	f109 0801 	add.w	r8, r9, #1
   85306:	9301      	str	r3, [sp, #4]
   85308:	e769      	b.n	851de <__sfvwrite_r+0x1c6>
   8530a:	f04f 30ff 	mov.w	r0, #4294967295
   8530e:	e6b6      	b.n	8507e <__sfvwrite_r+0x66>
   85310:	9a02      	ldr	r2, [sp, #8]
   85312:	230c      	movs	r3, #12
   85314:	6013      	str	r3, [r2, #0]
   85316:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8531a:	e74e      	b.n	851ba <__sfvwrite_r+0x1a2>
   8531c:	7ffffc00 	.word	0x7ffffc00

00085320 <_fwalk_reent>:
   85320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   85324:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   85328:	d01e      	beq.n	85368 <_fwalk_reent+0x48>
   8532a:	4688      	mov	r8, r1
   8532c:	4607      	mov	r7, r0
   8532e:	f04f 0900 	mov.w	r9, #0
   85332:	6875      	ldr	r5, [r6, #4]
   85334:	68b4      	ldr	r4, [r6, #8]
   85336:	3d01      	subs	r5, #1
   85338:	d410      	bmi.n	8535c <_fwalk_reent+0x3c>
   8533a:	89a3      	ldrh	r3, [r4, #12]
   8533c:	3d01      	subs	r5, #1
   8533e:	2b01      	cmp	r3, #1
   85340:	d908      	bls.n	85354 <_fwalk_reent+0x34>
   85342:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   85346:	3301      	adds	r3, #1
   85348:	d004      	beq.n	85354 <_fwalk_reent+0x34>
   8534a:	4621      	mov	r1, r4
   8534c:	4638      	mov	r0, r7
   8534e:	47c0      	blx	r8
   85350:	ea49 0900 	orr.w	r9, r9, r0
   85354:	1c6b      	adds	r3, r5, #1
   85356:	f104 0468 	add.w	r4, r4, #104	; 0x68
   8535a:	d1ee      	bne.n	8533a <_fwalk_reent+0x1a>
   8535c:	6836      	ldr	r6, [r6, #0]
   8535e:	2e00      	cmp	r6, #0
   85360:	d1e7      	bne.n	85332 <_fwalk_reent+0x12>
   85362:	4648      	mov	r0, r9
   85364:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   85368:	46b1      	mov	r9, r6
   8536a:	4648      	mov	r0, r9
   8536c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00085370 <__locale_charset>:
   85370:	4800      	ldr	r0, [pc, #0]	; (85374 <__locale_charset+0x4>)
   85372:	4770      	bx	lr
   85374:	20070834 	.word	0x20070834

00085378 <__locale_mb_cur_max>:
   85378:	4b01      	ldr	r3, [pc, #4]	; (85380 <__locale_mb_cur_max+0x8>)
   8537a:	6818      	ldr	r0, [r3, #0]
   8537c:	4770      	bx	lr
   8537e:	bf00      	nop
   85380:	20070854 	.word	0x20070854

00085384 <__swhatbuf_r>:
   85384:	b570      	push	{r4, r5, r6, lr}
   85386:	460e      	mov	r6, r1
   85388:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8538c:	b090      	sub	sp, #64	; 0x40
   8538e:	2900      	cmp	r1, #0
   85390:	4614      	mov	r4, r2
   85392:	461d      	mov	r5, r3
   85394:	db14      	blt.n	853c0 <__swhatbuf_r+0x3c>
   85396:	aa01      	add	r2, sp, #4
   85398:	f000 ffca 	bl	86330 <_fstat_r>
   8539c:	2800      	cmp	r0, #0
   8539e:	db0f      	blt.n	853c0 <__swhatbuf_r+0x3c>
   853a0:	9a02      	ldr	r2, [sp, #8]
   853a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
   853a6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   853aa:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   853ae:	fab2 f282 	clz	r2, r2
   853b2:	f44f 6000 	mov.w	r0, #2048	; 0x800
   853b6:	0952      	lsrs	r2, r2, #5
   853b8:	602a      	str	r2, [r5, #0]
   853ba:	6023      	str	r3, [r4, #0]
   853bc:	b010      	add	sp, #64	; 0x40
   853be:	bd70      	pop	{r4, r5, r6, pc}
   853c0:	89b2      	ldrh	r2, [r6, #12]
   853c2:	2000      	movs	r0, #0
   853c4:	f002 0280 	and.w	r2, r2, #128	; 0x80
   853c8:	b292      	uxth	r2, r2
   853ca:	6028      	str	r0, [r5, #0]
   853cc:	b11a      	cbz	r2, 853d6 <__swhatbuf_r+0x52>
   853ce:	2340      	movs	r3, #64	; 0x40
   853d0:	6023      	str	r3, [r4, #0]
   853d2:	b010      	add	sp, #64	; 0x40
   853d4:	bd70      	pop	{r4, r5, r6, pc}
   853d6:	4610      	mov	r0, r2
   853d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
   853dc:	6023      	str	r3, [r4, #0]
   853de:	b010      	add	sp, #64	; 0x40
   853e0:	bd70      	pop	{r4, r5, r6, pc}
   853e2:	bf00      	nop

000853e4 <__smakebuf_r>:
   853e4:	898a      	ldrh	r2, [r1, #12]
   853e6:	460b      	mov	r3, r1
   853e8:	0792      	lsls	r2, r2, #30
   853ea:	d506      	bpl.n	853fa <__smakebuf_r+0x16>
   853ec:	f101 0243 	add.w	r2, r1, #67	; 0x43
   853f0:	2101      	movs	r1, #1
   853f2:	601a      	str	r2, [r3, #0]
   853f4:	611a      	str	r2, [r3, #16]
   853f6:	6159      	str	r1, [r3, #20]
   853f8:	4770      	bx	lr
   853fa:	b5f0      	push	{r4, r5, r6, r7, lr}
   853fc:	b083      	sub	sp, #12
   853fe:	ab01      	add	r3, sp, #4
   85400:	466a      	mov	r2, sp
   85402:	460c      	mov	r4, r1
   85404:	4605      	mov	r5, r0
   85406:	f7ff ffbd 	bl	85384 <__swhatbuf_r>
   8540a:	9900      	ldr	r1, [sp, #0]
   8540c:	4606      	mov	r6, r0
   8540e:	4628      	mov	r0, r5
   85410:	f000 f834 	bl	8547c <_malloc_r>
   85414:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   85418:	b1d0      	cbz	r0, 85450 <__smakebuf_r+0x6c>
   8541a:	e89d 0006 	ldmia.w	sp, {r1, r2}
   8541e:	4f12      	ldr	r7, [pc, #72]	; (85468 <__smakebuf_r+0x84>)
   85420:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   85424:	63ef      	str	r7, [r5, #60]	; 0x3c
   85426:	81a3      	strh	r3, [r4, #12]
   85428:	6020      	str	r0, [r4, #0]
   8542a:	6120      	str	r0, [r4, #16]
   8542c:	6161      	str	r1, [r4, #20]
   8542e:	b91a      	cbnz	r2, 85438 <__smakebuf_r+0x54>
   85430:	4333      	orrs	r3, r6
   85432:	81a3      	strh	r3, [r4, #12]
   85434:	b003      	add	sp, #12
   85436:	bdf0      	pop	{r4, r5, r6, r7, pc}
   85438:	4628      	mov	r0, r5
   8543a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8543e:	f000 ff8b 	bl	86358 <_isatty_r>
   85442:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   85446:	2800      	cmp	r0, #0
   85448:	d0f2      	beq.n	85430 <__smakebuf_r+0x4c>
   8544a:	f043 0301 	orr.w	r3, r3, #1
   8544e:	e7ef      	b.n	85430 <__smakebuf_r+0x4c>
   85450:	059a      	lsls	r2, r3, #22
   85452:	d4ef      	bmi.n	85434 <__smakebuf_r+0x50>
   85454:	f104 0243 	add.w	r2, r4, #67	; 0x43
   85458:	f043 0302 	orr.w	r3, r3, #2
   8545c:	2101      	movs	r1, #1
   8545e:	81a3      	strh	r3, [r4, #12]
   85460:	6022      	str	r2, [r4, #0]
   85462:	6122      	str	r2, [r4, #16]
   85464:	6161      	str	r1, [r4, #20]
   85466:	e7e5      	b.n	85434 <__smakebuf_r+0x50>
   85468:	00084bbd 	.word	0x00084bbd

0008546c <malloc>:
   8546c:	4b02      	ldr	r3, [pc, #8]	; (85478 <malloc+0xc>)
   8546e:	4601      	mov	r1, r0
   85470:	6818      	ldr	r0, [r3, #0]
   85472:	f000 b803 	b.w	8547c <_malloc_r>
   85476:	bf00      	nop
   85478:	20070830 	.word	0x20070830

0008547c <_malloc_r>:
   8547c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85480:	f101 050b 	add.w	r5, r1, #11
   85484:	2d16      	cmp	r5, #22
   85486:	b083      	sub	sp, #12
   85488:	4606      	mov	r6, r0
   8548a:	f240 80a0 	bls.w	855ce <_malloc_r+0x152>
   8548e:	f035 0507 	bics.w	r5, r5, #7
   85492:	f100 80c0 	bmi.w	85616 <_malloc_r+0x19a>
   85496:	42a9      	cmp	r1, r5
   85498:	f200 80bd 	bhi.w	85616 <_malloc_r+0x19a>
   8549c:	f000 fbba 	bl	85c14 <__malloc_lock>
   854a0:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   854a4:	f0c0 8290 	bcc.w	859c8 <_malloc_r+0x54c>
   854a8:	0a6b      	lsrs	r3, r5, #9
   854aa:	f000 80bb 	beq.w	85624 <_malloc_r+0x1a8>
   854ae:	2b04      	cmp	r3, #4
   854b0:	f200 8177 	bhi.w	857a2 <_malloc_r+0x326>
   854b4:	09a8      	lsrs	r0, r5, #6
   854b6:	f100 0e39 	add.w	lr, r0, #57	; 0x39
   854ba:	ea4f 014e 	mov.w	r1, lr, lsl #1
   854be:	3038      	adds	r0, #56	; 0x38
   854c0:	4fbe      	ldr	r7, [pc, #760]	; (857bc <_malloc_r+0x340>)
   854c2:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   854c6:	684c      	ldr	r4, [r1, #4]
   854c8:	3908      	subs	r1, #8
   854ca:	42a1      	cmp	r1, r4
   854cc:	d107      	bne.n	854de <_malloc_r+0x62>
   854ce:	e0ae      	b.n	8562e <_malloc_r+0x1b2>
   854d0:	2a00      	cmp	r2, #0
   854d2:	f280 80ae 	bge.w	85632 <_malloc_r+0x1b6>
   854d6:	68e4      	ldr	r4, [r4, #12]
   854d8:	42a1      	cmp	r1, r4
   854da:	f000 80a8 	beq.w	8562e <_malloc_r+0x1b2>
   854de:	6863      	ldr	r3, [r4, #4]
   854e0:	f023 0303 	bic.w	r3, r3, #3
   854e4:	1b5a      	subs	r2, r3, r5
   854e6:	2a0f      	cmp	r2, #15
   854e8:	ddf2      	ble.n	854d0 <_malloc_r+0x54>
   854ea:	49b4      	ldr	r1, [pc, #720]	; (857bc <_malloc_r+0x340>)
   854ec:	693c      	ldr	r4, [r7, #16]
   854ee:	f101 0e08 	add.w	lr, r1, #8
   854f2:	4574      	cmp	r4, lr
   854f4:	f000 81a8 	beq.w	85848 <_malloc_r+0x3cc>
   854f8:	6863      	ldr	r3, [r4, #4]
   854fa:	f023 0303 	bic.w	r3, r3, #3
   854fe:	1b5a      	subs	r2, r3, r5
   85500:	2a0f      	cmp	r2, #15
   85502:	f300 818e 	bgt.w	85822 <_malloc_r+0x3a6>
   85506:	2a00      	cmp	r2, #0
   85508:	f8c1 e014 	str.w	lr, [r1, #20]
   8550c:	f8c1 e010 	str.w	lr, [r1, #16]
   85510:	f280 8093 	bge.w	8563a <_malloc_r+0x1be>
   85514:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   85518:	f080 815c 	bcs.w	857d4 <_malloc_r+0x358>
   8551c:	08db      	lsrs	r3, r3, #3
   8551e:	684a      	ldr	r2, [r1, #4]
   85520:	ea4f 09a3 	mov.w	r9, r3, asr #2
   85524:	f04f 0c01 	mov.w	ip, #1
   85528:	3301      	adds	r3, #1
   8552a:	f851 8033 	ldr.w	r8, [r1, r3, lsl #3]
   8552e:	fa0c f909 	lsl.w	r9, ip, r9
   85532:	eb01 0cc3 	add.w	ip, r1, r3, lsl #3
   85536:	ea49 0202 	orr.w	r2, r9, r2
   8553a:	f1ac 0c08 	sub.w	ip, ip, #8
   8553e:	f8c4 c00c 	str.w	ip, [r4, #12]
   85542:	f8c4 8008 	str.w	r8, [r4, #8]
   85546:	604a      	str	r2, [r1, #4]
   85548:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   8554c:	f8c8 400c 	str.w	r4, [r8, #12]
   85550:	1083      	asrs	r3, r0, #2
   85552:	2401      	movs	r4, #1
   85554:	409c      	lsls	r4, r3
   85556:	4294      	cmp	r4, r2
   85558:	d87c      	bhi.n	85654 <_malloc_r+0x1d8>
   8555a:	4214      	tst	r4, r2
   8555c:	d106      	bne.n	8556c <_malloc_r+0xf0>
   8555e:	f020 0003 	bic.w	r0, r0, #3
   85562:	0064      	lsls	r4, r4, #1
   85564:	4214      	tst	r4, r2
   85566:	f100 0004 	add.w	r0, r0, #4
   8556a:	d0fa      	beq.n	85562 <_malloc_r+0xe6>
   8556c:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   85570:	46cc      	mov	ip, r9
   85572:	4680      	mov	r8, r0
   85574:	f8dc 100c 	ldr.w	r1, [ip, #12]
   85578:	458c      	cmp	ip, r1
   8557a:	d107      	bne.n	8558c <_malloc_r+0x110>
   8557c:	e166      	b.n	8584c <_malloc_r+0x3d0>
   8557e:	2a00      	cmp	r2, #0
   85580:	f280 8174 	bge.w	8586c <_malloc_r+0x3f0>
   85584:	68c9      	ldr	r1, [r1, #12]
   85586:	458c      	cmp	ip, r1
   85588:	f000 8160 	beq.w	8584c <_malloc_r+0x3d0>
   8558c:	684b      	ldr	r3, [r1, #4]
   8558e:	f023 0303 	bic.w	r3, r3, #3
   85592:	1b5a      	subs	r2, r3, r5
   85594:	2a0f      	cmp	r2, #15
   85596:	ddf2      	ble.n	8557e <_malloc_r+0x102>
   85598:	460c      	mov	r4, r1
   8559a:	68cb      	ldr	r3, [r1, #12]
   8559c:	f854 cf08 	ldr.w	ip, [r4, #8]!
   855a0:	f045 0801 	orr.w	r8, r5, #1
   855a4:	f8c1 8004 	str.w	r8, [r1, #4]
   855a8:	440d      	add	r5, r1
   855aa:	f042 0101 	orr.w	r1, r2, #1
   855ae:	f8cc 300c 	str.w	r3, [ip, #12]
   855b2:	4630      	mov	r0, r6
   855b4:	f8c3 c008 	str.w	ip, [r3, #8]
   855b8:	617d      	str	r5, [r7, #20]
   855ba:	613d      	str	r5, [r7, #16]
   855bc:	f8c5 e00c 	str.w	lr, [r5, #12]
   855c0:	f8c5 e008 	str.w	lr, [r5, #8]
   855c4:	6069      	str	r1, [r5, #4]
   855c6:	50aa      	str	r2, [r5, r2]
   855c8:	f000 fb26 	bl	85c18 <__malloc_unlock>
   855cc:	e01f      	b.n	8560e <_malloc_r+0x192>
   855ce:	2910      	cmp	r1, #16
   855d0:	d821      	bhi.n	85616 <_malloc_r+0x19a>
   855d2:	f000 fb1f 	bl	85c14 <__malloc_lock>
   855d6:	2510      	movs	r5, #16
   855d8:	2306      	movs	r3, #6
   855da:	2002      	movs	r0, #2
   855dc:	4f77      	ldr	r7, [pc, #476]	; (857bc <_malloc_r+0x340>)
   855de:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   855e2:	685c      	ldr	r4, [r3, #4]
   855e4:	f1a3 0208 	sub.w	r2, r3, #8
   855e8:	4294      	cmp	r4, r2
   855ea:	f000 8138 	beq.w	8585e <_malloc_r+0x3e2>
   855ee:	6863      	ldr	r3, [r4, #4]
   855f0:	68e1      	ldr	r1, [r4, #12]
   855f2:	f023 0303 	bic.w	r3, r3, #3
   855f6:	4423      	add	r3, r4
   855f8:	685a      	ldr	r2, [r3, #4]
   855fa:	68a5      	ldr	r5, [r4, #8]
   855fc:	f042 0201 	orr.w	r2, r2, #1
   85600:	60e9      	str	r1, [r5, #12]
   85602:	4630      	mov	r0, r6
   85604:	608d      	str	r5, [r1, #8]
   85606:	605a      	str	r2, [r3, #4]
   85608:	f000 fb06 	bl	85c18 <__malloc_unlock>
   8560c:	3408      	adds	r4, #8
   8560e:	4620      	mov	r0, r4
   85610:	b003      	add	sp, #12
   85612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85616:	2400      	movs	r4, #0
   85618:	4620      	mov	r0, r4
   8561a:	230c      	movs	r3, #12
   8561c:	6033      	str	r3, [r6, #0]
   8561e:	b003      	add	sp, #12
   85620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85624:	2180      	movs	r1, #128	; 0x80
   85626:	f04f 0e40 	mov.w	lr, #64	; 0x40
   8562a:	203f      	movs	r0, #63	; 0x3f
   8562c:	e748      	b.n	854c0 <_malloc_r+0x44>
   8562e:	4670      	mov	r0, lr
   85630:	e75b      	b.n	854ea <_malloc_r+0x6e>
   85632:	4423      	add	r3, r4
   85634:	685a      	ldr	r2, [r3, #4]
   85636:	68e1      	ldr	r1, [r4, #12]
   85638:	e7df      	b.n	855fa <_malloc_r+0x17e>
   8563a:	4423      	add	r3, r4
   8563c:	685a      	ldr	r2, [r3, #4]
   8563e:	4630      	mov	r0, r6
   85640:	f042 0201 	orr.w	r2, r2, #1
   85644:	605a      	str	r2, [r3, #4]
   85646:	3408      	adds	r4, #8
   85648:	f000 fae6 	bl	85c18 <__malloc_unlock>
   8564c:	4620      	mov	r0, r4
   8564e:	b003      	add	sp, #12
   85650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85654:	68bc      	ldr	r4, [r7, #8]
   85656:	6863      	ldr	r3, [r4, #4]
   85658:	f023 0803 	bic.w	r8, r3, #3
   8565c:	45a8      	cmp	r8, r5
   8565e:	d304      	bcc.n	8566a <_malloc_r+0x1ee>
   85660:	ebc5 0308 	rsb	r3, r5, r8
   85664:	2b0f      	cmp	r3, #15
   85666:	f300 808c 	bgt.w	85782 <_malloc_r+0x306>
   8566a:	4b55      	ldr	r3, [pc, #340]	; (857c0 <_malloc_r+0x344>)
   8566c:	f8df 9160 	ldr.w	r9, [pc, #352]	; 857d0 <_malloc_r+0x354>
   85670:	681a      	ldr	r2, [r3, #0]
   85672:	f8d9 3000 	ldr.w	r3, [r9]
   85676:	442a      	add	r2, r5
   85678:	3301      	adds	r3, #1
   8567a:	eb04 0a08 	add.w	sl, r4, r8
   8567e:	f000 8160 	beq.w	85942 <_malloc_r+0x4c6>
   85682:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   85686:	320f      	adds	r2, #15
   85688:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
   8568c:	f022 020f 	bic.w	r2, r2, #15
   85690:	4611      	mov	r1, r2
   85692:	4630      	mov	r0, r6
   85694:	9201      	str	r2, [sp, #4]
   85696:	f000 fcab 	bl	85ff0 <_sbrk_r>
   8569a:	f1b0 3fff 	cmp.w	r0, #4294967295
   8569e:	4683      	mov	fp, r0
   856a0:	9a01      	ldr	r2, [sp, #4]
   856a2:	f000 8158 	beq.w	85956 <_malloc_r+0x4da>
   856a6:	4582      	cmp	sl, r0
   856a8:	f200 80fc 	bhi.w	858a4 <_malloc_r+0x428>
   856ac:	4b45      	ldr	r3, [pc, #276]	; (857c4 <_malloc_r+0x348>)
   856ae:	45da      	cmp	sl, fp
   856b0:	6819      	ldr	r1, [r3, #0]
   856b2:	4411      	add	r1, r2
   856b4:	6019      	str	r1, [r3, #0]
   856b6:	f000 8153 	beq.w	85960 <_malloc_r+0x4e4>
   856ba:	f8d9 0000 	ldr.w	r0, [r9]
   856be:	f8df e110 	ldr.w	lr, [pc, #272]	; 857d0 <_malloc_r+0x354>
   856c2:	3001      	adds	r0, #1
   856c4:	bf1b      	ittet	ne
   856c6:	ebca 0a0b 	rsbne	sl, sl, fp
   856ca:	4451      	addne	r1, sl
   856cc:	f8ce b000 	streq.w	fp, [lr]
   856d0:	6019      	strne	r1, [r3, #0]
   856d2:	f01b 0107 	ands.w	r1, fp, #7
   856d6:	f000 8117 	beq.w	85908 <_malloc_r+0x48c>
   856da:	f1c1 0008 	rsb	r0, r1, #8
   856de:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   856e2:	4483      	add	fp, r0
   856e4:	3108      	adds	r1, #8
   856e6:	445a      	add	r2, fp
   856e8:	f3c2 020b 	ubfx	r2, r2, #0, #12
   856ec:	ebc2 0901 	rsb	r9, r2, r1
   856f0:	4649      	mov	r1, r9
   856f2:	4630      	mov	r0, r6
   856f4:	9301      	str	r3, [sp, #4]
   856f6:	f000 fc7b 	bl	85ff0 <_sbrk_r>
   856fa:	1c43      	adds	r3, r0, #1
   856fc:	9b01      	ldr	r3, [sp, #4]
   856fe:	f000 813f 	beq.w	85980 <_malloc_r+0x504>
   85702:	ebcb 0200 	rsb	r2, fp, r0
   85706:	444a      	add	r2, r9
   85708:	f042 0201 	orr.w	r2, r2, #1
   8570c:	6819      	ldr	r1, [r3, #0]
   8570e:	42bc      	cmp	r4, r7
   85710:	4449      	add	r1, r9
   85712:	f8c7 b008 	str.w	fp, [r7, #8]
   85716:	6019      	str	r1, [r3, #0]
   85718:	f8cb 2004 	str.w	r2, [fp, #4]
   8571c:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 857c4 <_malloc_r+0x348>
   85720:	d016      	beq.n	85750 <_malloc_r+0x2d4>
   85722:	f1b8 0f0f 	cmp.w	r8, #15
   85726:	f240 80fd 	bls.w	85924 <_malloc_r+0x4a8>
   8572a:	6862      	ldr	r2, [r4, #4]
   8572c:	f1a8 030c 	sub.w	r3, r8, #12
   85730:	f023 0307 	bic.w	r3, r3, #7
   85734:	f002 0201 	and.w	r2, r2, #1
   85738:	18e0      	adds	r0, r4, r3
   8573a:	f04f 0e05 	mov.w	lr, #5
   8573e:	431a      	orrs	r2, r3
   85740:	2b0f      	cmp	r3, #15
   85742:	6062      	str	r2, [r4, #4]
   85744:	f8c0 e004 	str.w	lr, [r0, #4]
   85748:	f8c0 e008 	str.w	lr, [r0, #8]
   8574c:	f200 811c 	bhi.w	85988 <_malloc_r+0x50c>
   85750:	4b1d      	ldr	r3, [pc, #116]	; (857c8 <_malloc_r+0x34c>)
   85752:	68bc      	ldr	r4, [r7, #8]
   85754:	681a      	ldr	r2, [r3, #0]
   85756:	4291      	cmp	r1, r2
   85758:	bf88      	it	hi
   8575a:	6019      	strhi	r1, [r3, #0]
   8575c:	4b1b      	ldr	r3, [pc, #108]	; (857cc <_malloc_r+0x350>)
   8575e:	681a      	ldr	r2, [r3, #0]
   85760:	4291      	cmp	r1, r2
   85762:	6862      	ldr	r2, [r4, #4]
   85764:	bf88      	it	hi
   85766:	6019      	strhi	r1, [r3, #0]
   85768:	f022 0203 	bic.w	r2, r2, #3
   8576c:	4295      	cmp	r5, r2
   8576e:	eba2 0305 	sub.w	r3, r2, r5
   85772:	d801      	bhi.n	85778 <_malloc_r+0x2fc>
   85774:	2b0f      	cmp	r3, #15
   85776:	dc04      	bgt.n	85782 <_malloc_r+0x306>
   85778:	4630      	mov	r0, r6
   8577a:	f000 fa4d 	bl	85c18 <__malloc_unlock>
   8577e:	2400      	movs	r4, #0
   85780:	e745      	b.n	8560e <_malloc_r+0x192>
   85782:	f045 0201 	orr.w	r2, r5, #1
   85786:	f043 0301 	orr.w	r3, r3, #1
   8578a:	4425      	add	r5, r4
   8578c:	6062      	str	r2, [r4, #4]
   8578e:	4630      	mov	r0, r6
   85790:	60bd      	str	r5, [r7, #8]
   85792:	3408      	adds	r4, #8
   85794:	606b      	str	r3, [r5, #4]
   85796:	f000 fa3f 	bl	85c18 <__malloc_unlock>
   8579a:	4620      	mov	r0, r4
   8579c:	b003      	add	sp, #12
   8579e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   857a2:	2b14      	cmp	r3, #20
   857a4:	d971      	bls.n	8588a <_malloc_r+0x40e>
   857a6:	2b54      	cmp	r3, #84	; 0x54
   857a8:	f200 80a4 	bhi.w	858f4 <_malloc_r+0x478>
   857ac:	0b28      	lsrs	r0, r5, #12
   857ae:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
   857b2:	ea4f 014e 	mov.w	r1, lr, lsl #1
   857b6:	306e      	adds	r0, #110	; 0x6e
   857b8:	e682      	b.n	854c0 <_malloc_r+0x44>
   857ba:	bf00      	nop
   857bc:	20070858 	.word	0x20070858
   857c0:	20070d8c 	.word	0x20070d8c
   857c4:	20070d90 	.word	0x20070d90
   857c8:	20070d88 	.word	0x20070d88
   857cc:	20070d84 	.word	0x20070d84
   857d0:	20070c64 	.word	0x20070c64
   857d4:	0a5a      	lsrs	r2, r3, #9
   857d6:	2a04      	cmp	r2, #4
   857d8:	d95e      	bls.n	85898 <_malloc_r+0x41c>
   857da:	2a14      	cmp	r2, #20
   857dc:	f200 80b3 	bhi.w	85946 <_malloc_r+0x4ca>
   857e0:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   857e4:	0049      	lsls	r1, r1, #1
   857e6:	325b      	adds	r2, #91	; 0x5b
   857e8:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
   857ec:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
   857f0:	f1ac 0c08 	sub.w	ip, ip, #8
   857f4:	458c      	cmp	ip, r1
   857f6:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 859d0 <_malloc_r+0x554>
   857fa:	f000 8088 	beq.w	8590e <_malloc_r+0x492>
   857fe:	684a      	ldr	r2, [r1, #4]
   85800:	f022 0203 	bic.w	r2, r2, #3
   85804:	4293      	cmp	r3, r2
   85806:	d202      	bcs.n	8580e <_malloc_r+0x392>
   85808:	6889      	ldr	r1, [r1, #8]
   8580a:	458c      	cmp	ip, r1
   8580c:	d1f7      	bne.n	857fe <_malloc_r+0x382>
   8580e:	f8d1 c00c 	ldr.w	ip, [r1, #12]
   85812:	687a      	ldr	r2, [r7, #4]
   85814:	f8c4 c00c 	str.w	ip, [r4, #12]
   85818:	60a1      	str	r1, [r4, #8]
   8581a:	f8cc 4008 	str.w	r4, [ip, #8]
   8581e:	60cc      	str	r4, [r1, #12]
   85820:	e696      	b.n	85550 <_malloc_r+0xd4>
   85822:	f045 0701 	orr.w	r7, r5, #1
   85826:	f042 0301 	orr.w	r3, r2, #1
   8582a:	4425      	add	r5, r4
   8582c:	6067      	str	r7, [r4, #4]
   8582e:	4630      	mov	r0, r6
   85830:	614d      	str	r5, [r1, #20]
   85832:	610d      	str	r5, [r1, #16]
   85834:	f8c5 e00c 	str.w	lr, [r5, #12]
   85838:	f8c5 e008 	str.w	lr, [r5, #8]
   8583c:	606b      	str	r3, [r5, #4]
   8583e:	50aa      	str	r2, [r5, r2]
   85840:	3408      	adds	r4, #8
   85842:	f000 f9e9 	bl	85c18 <__malloc_unlock>
   85846:	e6e2      	b.n	8560e <_malloc_r+0x192>
   85848:	684a      	ldr	r2, [r1, #4]
   8584a:	e681      	b.n	85550 <_malloc_r+0xd4>
   8584c:	f108 0801 	add.w	r8, r8, #1
   85850:	f018 0f03 	tst.w	r8, #3
   85854:	f10c 0c08 	add.w	ip, ip, #8
   85858:	f47f ae8c 	bne.w	85574 <_malloc_r+0xf8>
   8585c:	e030      	b.n	858c0 <_malloc_r+0x444>
   8585e:	68dc      	ldr	r4, [r3, #12]
   85860:	42a3      	cmp	r3, r4
   85862:	bf08      	it	eq
   85864:	3002      	addeq	r0, #2
   85866:	f43f ae40 	beq.w	854ea <_malloc_r+0x6e>
   8586a:	e6c0      	b.n	855ee <_malloc_r+0x172>
   8586c:	460c      	mov	r4, r1
   8586e:	440b      	add	r3, r1
   85870:	685a      	ldr	r2, [r3, #4]
   85872:	68c9      	ldr	r1, [r1, #12]
   85874:	f854 5f08 	ldr.w	r5, [r4, #8]!
   85878:	f042 0201 	orr.w	r2, r2, #1
   8587c:	605a      	str	r2, [r3, #4]
   8587e:	4630      	mov	r0, r6
   85880:	60e9      	str	r1, [r5, #12]
   85882:	608d      	str	r5, [r1, #8]
   85884:	f000 f9c8 	bl	85c18 <__malloc_unlock>
   85888:	e6c1      	b.n	8560e <_malloc_r+0x192>
   8588a:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
   8588e:	f103 005b 	add.w	r0, r3, #91	; 0x5b
   85892:	ea4f 014e 	mov.w	r1, lr, lsl #1
   85896:	e613      	b.n	854c0 <_malloc_r+0x44>
   85898:	099a      	lsrs	r2, r3, #6
   8589a:	f102 0139 	add.w	r1, r2, #57	; 0x39
   8589e:	0049      	lsls	r1, r1, #1
   858a0:	3238      	adds	r2, #56	; 0x38
   858a2:	e7a1      	b.n	857e8 <_malloc_r+0x36c>
   858a4:	42bc      	cmp	r4, r7
   858a6:	4b4a      	ldr	r3, [pc, #296]	; (859d0 <_malloc_r+0x554>)
   858a8:	f43f af00 	beq.w	856ac <_malloc_r+0x230>
   858ac:	689c      	ldr	r4, [r3, #8]
   858ae:	6862      	ldr	r2, [r4, #4]
   858b0:	f022 0203 	bic.w	r2, r2, #3
   858b4:	e75a      	b.n	8576c <_malloc_r+0x2f0>
   858b6:	f859 3908 	ldr.w	r3, [r9], #-8
   858ba:	4599      	cmp	r9, r3
   858bc:	f040 8082 	bne.w	859c4 <_malloc_r+0x548>
   858c0:	f010 0f03 	tst.w	r0, #3
   858c4:	f100 30ff 	add.w	r0, r0, #4294967295
   858c8:	d1f5      	bne.n	858b6 <_malloc_r+0x43a>
   858ca:	687b      	ldr	r3, [r7, #4]
   858cc:	ea23 0304 	bic.w	r3, r3, r4
   858d0:	607b      	str	r3, [r7, #4]
   858d2:	0064      	lsls	r4, r4, #1
   858d4:	429c      	cmp	r4, r3
   858d6:	f63f aebd 	bhi.w	85654 <_malloc_r+0x1d8>
   858da:	2c00      	cmp	r4, #0
   858dc:	f43f aeba 	beq.w	85654 <_malloc_r+0x1d8>
   858e0:	421c      	tst	r4, r3
   858e2:	4640      	mov	r0, r8
   858e4:	f47f ae42 	bne.w	8556c <_malloc_r+0xf0>
   858e8:	0064      	lsls	r4, r4, #1
   858ea:	421c      	tst	r4, r3
   858ec:	f100 0004 	add.w	r0, r0, #4
   858f0:	d0fa      	beq.n	858e8 <_malloc_r+0x46c>
   858f2:	e63b      	b.n	8556c <_malloc_r+0xf0>
   858f4:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   858f8:	d818      	bhi.n	8592c <_malloc_r+0x4b0>
   858fa:	0be8      	lsrs	r0, r5, #15
   858fc:	f100 0e78 	add.w	lr, r0, #120	; 0x78
   85900:	ea4f 014e 	mov.w	r1, lr, lsl #1
   85904:	3077      	adds	r0, #119	; 0x77
   85906:	e5db      	b.n	854c0 <_malloc_r+0x44>
   85908:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   8590c:	e6eb      	b.n	856e6 <_malloc_r+0x26a>
   8590e:	2101      	movs	r1, #1
   85910:	f8d8 3004 	ldr.w	r3, [r8, #4]
   85914:	1092      	asrs	r2, r2, #2
   85916:	fa01 f202 	lsl.w	r2, r1, r2
   8591a:	431a      	orrs	r2, r3
   8591c:	f8c8 2004 	str.w	r2, [r8, #4]
   85920:	4661      	mov	r1, ip
   85922:	e777      	b.n	85814 <_malloc_r+0x398>
   85924:	2301      	movs	r3, #1
   85926:	f8cb 3004 	str.w	r3, [fp, #4]
   8592a:	e725      	b.n	85778 <_malloc_r+0x2fc>
   8592c:	f240 5254 	movw	r2, #1364	; 0x554
   85930:	4293      	cmp	r3, r2
   85932:	d820      	bhi.n	85976 <_malloc_r+0x4fa>
   85934:	0ca8      	lsrs	r0, r5, #18
   85936:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
   8593a:	ea4f 014e 	mov.w	r1, lr, lsl #1
   8593e:	307c      	adds	r0, #124	; 0x7c
   85940:	e5be      	b.n	854c0 <_malloc_r+0x44>
   85942:	3210      	adds	r2, #16
   85944:	e6a4      	b.n	85690 <_malloc_r+0x214>
   85946:	2a54      	cmp	r2, #84	; 0x54
   85948:	d826      	bhi.n	85998 <_malloc_r+0x51c>
   8594a:	0b1a      	lsrs	r2, r3, #12
   8594c:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   85950:	0049      	lsls	r1, r1, #1
   85952:	326e      	adds	r2, #110	; 0x6e
   85954:	e748      	b.n	857e8 <_malloc_r+0x36c>
   85956:	68bc      	ldr	r4, [r7, #8]
   85958:	6862      	ldr	r2, [r4, #4]
   8595a:	f022 0203 	bic.w	r2, r2, #3
   8595e:	e705      	b.n	8576c <_malloc_r+0x2f0>
   85960:	f3ca 000b 	ubfx	r0, sl, #0, #12
   85964:	2800      	cmp	r0, #0
   85966:	f47f aea8 	bne.w	856ba <_malloc_r+0x23e>
   8596a:	4442      	add	r2, r8
   8596c:	68bb      	ldr	r3, [r7, #8]
   8596e:	f042 0201 	orr.w	r2, r2, #1
   85972:	605a      	str	r2, [r3, #4]
   85974:	e6ec      	b.n	85750 <_malloc_r+0x2d4>
   85976:	21fe      	movs	r1, #254	; 0xfe
   85978:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
   8597c:	207e      	movs	r0, #126	; 0x7e
   8597e:	e59f      	b.n	854c0 <_malloc_r+0x44>
   85980:	2201      	movs	r2, #1
   85982:	f04f 0900 	mov.w	r9, #0
   85986:	e6c1      	b.n	8570c <_malloc_r+0x290>
   85988:	f104 0108 	add.w	r1, r4, #8
   8598c:	4630      	mov	r0, r6
   8598e:	f7ff fa5b 	bl	84e48 <_free_r>
   85992:	f8d9 1000 	ldr.w	r1, [r9]
   85996:	e6db      	b.n	85750 <_malloc_r+0x2d4>
   85998:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   8599c:	d805      	bhi.n	859aa <_malloc_r+0x52e>
   8599e:	0bda      	lsrs	r2, r3, #15
   859a0:	f102 0178 	add.w	r1, r2, #120	; 0x78
   859a4:	0049      	lsls	r1, r1, #1
   859a6:	3277      	adds	r2, #119	; 0x77
   859a8:	e71e      	b.n	857e8 <_malloc_r+0x36c>
   859aa:	f240 5154 	movw	r1, #1364	; 0x554
   859ae:	428a      	cmp	r2, r1
   859b0:	d805      	bhi.n	859be <_malloc_r+0x542>
   859b2:	0c9a      	lsrs	r2, r3, #18
   859b4:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   859b8:	0049      	lsls	r1, r1, #1
   859ba:	327c      	adds	r2, #124	; 0x7c
   859bc:	e714      	b.n	857e8 <_malloc_r+0x36c>
   859be:	21fe      	movs	r1, #254	; 0xfe
   859c0:	227e      	movs	r2, #126	; 0x7e
   859c2:	e711      	b.n	857e8 <_malloc_r+0x36c>
   859c4:	687b      	ldr	r3, [r7, #4]
   859c6:	e784      	b.n	858d2 <_malloc_r+0x456>
   859c8:	08e8      	lsrs	r0, r5, #3
   859ca:	1c43      	adds	r3, r0, #1
   859cc:	005b      	lsls	r3, r3, #1
   859ce:	e605      	b.n	855dc <_malloc_r+0x160>
   859d0:	20070858 	.word	0x20070858

000859d4 <memchr>:
   859d4:	0783      	lsls	r3, r0, #30
   859d6:	b470      	push	{r4, r5, r6}
   859d8:	b2cd      	uxtb	r5, r1
   859da:	d03d      	beq.n	85a58 <memchr+0x84>
   859dc:	1e53      	subs	r3, r2, #1
   859de:	b302      	cbz	r2, 85a22 <memchr+0x4e>
   859e0:	7802      	ldrb	r2, [r0, #0]
   859e2:	42aa      	cmp	r2, r5
   859e4:	d01e      	beq.n	85a24 <memchr+0x50>
   859e6:	1c42      	adds	r2, r0, #1
   859e8:	e004      	b.n	859f4 <memchr+0x20>
   859ea:	b1d3      	cbz	r3, 85a22 <memchr+0x4e>
   859ec:	7804      	ldrb	r4, [r0, #0]
   859ee:	3b01      	subs	r3, #1
   859f0:	42ac      	cmp	r4, r5
   859f2:	d017      	beq.n	85a24 <memchr+0x50>
   859f4:	f012 0f03 	tst.w	r2, #3
   859f8:	4610      	mov	r0, r2
   859fa:	f102 0201 	add.w	r2, r2, #1
   859fe:	d1f4      	bne.n	859ea <memchr+0x16>
   85a00:	2b03      	cmp	r3, #3
   85a02:	d811      	bhi.n	85a28 <memchr+0x54>
   85a04:	b353      	cbz	r3, 85a5c <memchr+0x88>
   85a06:	7802      	ldrb	r2, [r0, #0]
   85a08:	42aa      	cmp	r2, r5
   85a0a:	d00b      	beq.n	85a24 <memchr+0x50>
   85a0c:	4403      	add	r3, r0
   85a0e:	1c42      	adds	r2, r0, #1
   85a10:	e002      	b.n	85a18 <memchr+0x44>
   85a12:	7801      	ldrb	r1, [r0, #0]
   85a14:	42a9      	cmp	r1, r5
   85a16:	d005      	beq.n	85a24 <memchr+0x50>
   85a18:	4293      	cmp	r3, r2
   85a1a:	4610      	mov	r0, r2
   85a1c:	f102 0201 	add.w	r2, r2, #1
   85a20:	d1f7      	bne.n	85a12 <memchr+0x3e>
   85a22:	2000      	movs	r0, #0
   85a24:	bc70      	pop	{r4, r5, r6}
   85a26:	4770      	bx	lr
   85a28:	4604      	mov	r4, r0
   85a2a:	020e      	lsls	r6, r1, #8
   85a2c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
   85a30:	432e      	orrs	r6, r5
   85a32:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   85a36:	6822      	ldr	r2, [r4, #0]
   85a38:	4620      	mov	r0, r4
   85a3a:	4072      	eors	r2, r6
   85a3c:	f1a2 3101 	sub.w	r1, r2, #16843009	; 0x1010101
   85a40:	ea21 0202 	bic.w	r2, r1, r2
   85a44:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   85a48:	f104 0404 	add.w	r4, r4, #4
   85a4c:	d1db      	bne.n	85a06 <memchr+0x32>
   85a4e:	3b04      	subs	r3, #4
   85a50:	2b03      	cmp	r3, #3
   85a52:	4620      	mov	r0, r4
   85a54:	d8ef      	bhi.n	85a36 <memchr+0x62>
   85a56:	e7d5      	b.n	85a04 <memchr+0x30>
   85a58:	4613      	mov	r3, r2
   85a5a:	e7d1      	b.n	85a00 <memchr+0x2c>
   85a5c:	4618      	mov	r0, r3
   85a5e:	e7e1      	b.n	85a24 <memchr+0x50>

00085a60 <memcpy>:
   85a60:	4684      	mov	ip, r0
   85a62:	ea41 0300 	orr.w	r3, r1, r0
   85a66:	f013 0303 	ands.w	r3, r3, #3
   85a6a:	d149      	bne.n	85b00 <memcpy+0xa0>
   85a6c:	3a40      	subs	r2, #64	; 0x40
   85a6e:	d323      	bcc.n	85ab8 <memcpy+0x58>
   85a70:	680b      	ldr	r3, [r1, #0]
   85a72:	6003      	str	r3, [r0, #0]
   85a74:	684b      	ldr	r3, [r1, #4]
   85a76:	6043      	str	r3, [r0, #4]
   85a78:	688b      	ldr	r3, [r1, #8]
   85a7a:	6083      	str	r3, [r0, #8]
   85a7c:	68cb      	ldr	r3, [r1, #12]
   85a7e:	60c3      	str	r3, [r0, #12]
   85a80:	690b      	ldr	r3, [r1, #16]
   85a82:	6103      	str	r3, [r0, #16]
   85a84:	694b      	ldr	r3, [r1, #20]
   85a86:	6143      	str	r3, [r0, #20]
   85a88:	698b      	ldr	r3, [r1, #24]
   85a8a:	6183      	str	r3, [r0, #24]
   85a8c:	69cb      	ldr	r3, [r1, #28]
   85a8e:	61c3      	str	r3, [r0, #28]
   85a90:	6a0b      	ldr	r3, [r1, #32]
   85a92:	6203      	str	r3, [r0, #32]
   85a94:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   85a96:	6243      	str	r3, [r0, #36]	; 0x24
   85a98:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   85a9a:	6283      	str	r3, [r0, #40]	; 0x28
   85a9c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   85a9e:	62c3      	str	r3, [r0, #44]	; 0x2c
   85aa0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   85aa2:	6303      	str	r3, [r0, #48]	; 0x30
   85aa4:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   85aa6:	6343      	str	r3, [r0, #52]	; 0x34
   85aa8:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   85aaa:	6383      	str	r3, [r0, #56]	; 0x38
   85aac:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   85aae:	63c3      	str	r3, [r0, #60]	; 0x3c
   85ab0:	3040      	adds	r0, #64	; 0x40
   85ab2:	3140      	adds	r1, #64	; 0x40
   85ab4:	3a40      	subs	r2, #64	; 0x40
   85ab6:	d2db      	bcs.n	85a70 <memcpy+0x10>
   85ab8:	3230      	adds	r2, #48	; 0x30
   85aba:	d30b      	bcc.n	85ad4 <memcpy+0x74>
   85abc:	680b      	ldr	r3, [r1, #0]
   85abe:	6003      	str	r3, [r0, #0]
   85ac0:	684b      	ldr	r3, [r1, #4]
   85ac2:	6043      	str	r3, [r0, #4]
   85ac4:	688b      	ldr	r3, [r1, #8]
   85ac6:	6083      	str	r3, [r0, #8]
   85ac8:	68cb      	ldr	r3, [r1, #12]
   85aca:	60c3      	str	r3, [r0, #12]
   85acc:	3010      	adds	r0, #16
   85ace:	3110      	adds	r1, #16
   85ad0:	3a10      	subs	r2, #16
   85ad2:	d2f3      	bcs.n	85abc <memcpy+0x5c>
   85ad4:	320c      	adds	r2, #12
   85ad6:	d305      	bcc.n	85ae4 <memcpy+0x84>
   85ad8:	f851 3b04 	ldr.w	r3, [r1], #4
   85adc:	f840 3b04 	str.w	r3, [r0], #4
   85ae0:	3a04      	subs	r2, #4
   85ae2:	d2f9      	bcs.n	85ad8 <memcpy+0x78>
   85ae4:	3204      	adds	r2, #4
   85ae6:	d008      	beq.n	85afa <memcpy+0x9a>
   85ae8:	07d2      	lsls	r2, r2, #31
   85aea:	bf1c      	itt	ne
   85aec:	f811 3b01 	ldrbne.w	r3, [r1], #1
   85af0:	f800 3b01 	strbne.w	r3, [r0], #1
   85af4:	d301      	bcc.n	85afa <memcpy+0x9a>
   85af6:	880b      	ldrh	r3, [r1, #0]
   85af8:	8003      	strh	r3, [r0, #0]
   85afa:	4660      	mov	r0, ip
   85afc:	4770      	bx	lr
   85afe:	bf00      	nop
   85b00:	2a08      	cmp	r2, #8
   85b02:	d313      	bcc.n	85b2c <memcpy+0xcc>
   85b04:	078b      	lsls	r3, r1, #30
   85b06:	d0b1      	beq.n	85a6c <memcpy+0xc>
   85b08:	f010 0303 	ands.w	r3, r0, #3
   85b0c:	d0ae      	beq.n	85a6c <memcpy+0xc>
   85b0e:	f1c3 0304 	rsb	r3, r3, #4
   85b12:	1ad2      	subs	r2, r2, r3
   85b14:	07db      	lsls	r3, r3, #31
   85b16:	bf1c      	itt	ne
   85b18:	f811 3b01 	ldrbne.w	r3, [r1], #1
   85b1c:	f800 3b01 	strbne.w	r3, [r0], #1
   85b20:	d3a4      	bcc.n	85a6c <memcpy+0xc>
   85b22:	f831 3b02 	ldrh.w	r3, [r1], #2
   85b26:	f820 3b02 	strh.w	r3, [r0], #2
   85b2a:	e79f      	b.n	85a6c <memcpy+0xc>
   85b2c:	3a04      	subs	r2, #4
   85b2e:	d3d9      	bcc.n	85ae4 <memcpy+0x84>
   85b30:	3a01      	subs	r2, #1
   85b32:	f811 3b01 	ldrb.w	r3, [r1], #1
   85b36:	f800 3b01 	strb.w	r3, [r0], #1
   85b3a:	d2f9      	bcs.n	85b30 <memcpy+0xd0>
   85b3c:	780b      	ldrb	r3, [r1, #0]
   85b3e:	7003      	strb	r3, [r0, #0]
   85b40:	784b      	ldrb	r3, [r1, #1]
   85b42:	7043      	strb	r3, [r0, #1]
   85b44:	788b      	ldrb	r3, [r1, #2]
   85b46:	7083      	strb	r3, [r0, #2]
   85b48:	4660      	mov	r0, ip
   85b4a:	4770      	bx	lr

00085b4c <memmove>:
   85b4c:	4288      	cmp	r0, r1
   85b4e:	b5f0      	push	{r4, r5, r6, r7, lr}
   85b50:	d90d      	bls.n	85b6e <memmove+0x22>
   85b52:	188b      	adds	r3, r1, r2
   85b54:	4298      	cmp	r0, r3
   85b56:	d20a      	bcs.n	85b6e <memmove+0x22>
   85b58:	1881      	adds	r1, r0, r2
   85b5a:	2a00      	cmp	r2, #0
   85b5c:	d051      	beq.n	85c02 <memmove+0xb6>
   85b5e:	1a9a      	subs	r2, r3, r2
   85b60:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   85b64:	4293      	cmp	r3, r2
   85b66:	f801 4d01 	strb.w	r4, [r1, #-1]!
   85b6a:	d1f9      	bne.n	85b60 <memmove+0x14>
   85b6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   85b6e:	2a0f      	cmp	r2, #15
   85b70:	d948      	bls.n	85c04 <memmove+0xb8>
   85b72:	ea41 0300 	orr.w	r3, r1, r0
   85b76:	079b      	lsls	r3, r3, #30
   85b78:	d146      	bne.n	85c08 <memmove+0xbc>
   85b7a:	4615      	mov	r5, r2
   85b7c:	f100 0410 	add.w	r4, r0, #16
   85b80:	f101 0310 	add.w	r3, r1, #16
   85b84:	f853 6c10 	ldr.w	r6, [r3, #-16]
   85b88:	3d10      	subs	r5, #16
   85b8a:	f844 6c10 	str.w	r6, [r4, #-16]
   85b8e:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   85b92:	2d0f      	cmp	r5, #15
   85b94:	f844 6c0c 	str.w	r6, [r4, #-12]
   85b98:	f853 6c08 	ldr.w	r6, [r3, #-8]
   85b9c:	f104 0410 	add.w	r4, r4, #16
   85ba0:	f844 6c18 	str.w	r6, [r4, #-24]
   85ba4:	f853 6c04 	ldr.w	r6, [r3, #-4]
   85ba8:	f103 0310 	add.w	r3, r3, #16
   85bac:	f844 6c14 	str.w	r6, [r4, #-20]
   85bb0:	d8e8      	bhi.n	85b84 <memmove+0x38>
   85bb2:	f1a2 0310 	sub.w	r3, r2, #16
   85bb6:	f023 030f 	bic.w	r3, r3, #15
   85bba:	f002 0e0f 	and.w	lr, r2, #15
   85bbe:	3310      	adds	r3, #16
   85bc0:	f1be 0f03 	cmp.w	lr, #3
   85bc4:	4419      	add	r1, r3
   85bc6:	4403      	add	r3, r0
   85bc8:	d921      	bls.n	85c0e <memmove+0xc2>
   85bca:	460e      	mov	r6, r1
   85bcc:	4674      	mov	r4, lr
   85bce:	1f1d      	subs	r5, r3, #4
   85bd0:	f856 7b04 	ldr.w	r7, [r6], #4
   85bd4:	3c04      	subs	r4, #4
   85bd6:	2c03      	cmp	r4, #3
   85bd8:	f845 7f04 	str.w	r7, [r5, #4]!
   85bdc:	d8f8      	bhi.n	85bd0 <memmove+0x84>
   85bde:	f1ae 0404 	sub.w	r4, lr, #4
   85be2:	f024 0403 	bic.w	r4, r4, #3
   85be6:	3404      	adds	r4, #4
   85be8:	4423      	add	r3, r4
   85bea:	4421      	add	r1, r4
   85bec:	f002 0203 	and.w	r2, r2, #3
   85bf0:	b162      	cbz	r2, 85c0c <memmove+0xc0>
   85bf2:	3b01      	subs	r3, #1
   85bf4:	440a      	add	r2, r1
   85bf6:	f811 4b01 	ldrb.w	r4, [r1], #1
   85bfa:	428a      	cmp	r2, r1
   85bfc:	f803 4f01 	strb.w	r4, [r3, #1]!
   85c00:	d1f9      	bne.n	85bf6 <memmove+0xaa>
   85c02:	bdf0      	pop	{r4, r5, r6, r7, pc}
   85c04:	4603      	mov	r3, r0
   85c06:	e7f3      	b.n	85bf0 <memmove+0xa4>
   85c08:	4603      	mov	r3, r0
   85c0a:	e7f2      	b.n	85bf2 <memmove+0xa6>
   85c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   85c0e:	4672      	mov	r2, lr
   85c10:	e7ee      	b.n	85bf0 <memmove+0xa4>
   85c12:	bf00      	nop

00085c14 <__malloc_lock>:
   85c14:	4770      	bx	lr
   85c16:	bf00      	nop

00085c18 <__malloc_unlock>:
   85c18:	4770      	bx	lr
   85c1a:	bf00      	nop

00085c1c <_realloc_r>:
   85c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85c20:	4617      	mov	r7, r2
   85c22:	b083      	sub	sp, #12
   85c24:	2900      	cmp	r1, #0
   85c26:	f000 808f 	beq.w	85d48 <_realloc_r+0x12c>
   85c2a:	460d      	mov	r5, r1
   85c2c:	4681      	mov	r9, r0
   85c2e:	f107 040b 	add.w	r4, r7, #11
   85c32:	f7ff ffef 	bl	85c14 <__malloc_lock>
   85c36:	f855 ec04 	ldr.w	lr, [r5, #-4]
   85c3a:	2c16      	cmp	r4, #22
   85c3c:	f02e 0603 	bic.w	r6, lr, #3
   85c40:	f1a5 0808 	sub.w	r8, r5, #8
   85c44:	d83c      	bhi.n	85cc0 <_realloc_r+0xa4>
   85c46:	2210      	movs	r2, #16
   85c48:	4614      	mov	r4, r2
   85c4a:	42a7      	cmp	r7, r4
   85c4c:	d83d      	bhi.n	85cca <_realloc_r+0xae>
   85c4e:	4296      	cmp	r6, r2
   85c50:	da42      	bge.n	85cd8 <_realloc_r+0xbc>
   85c52:	4bc6      	ldr	r3, [pc, #792]	; (85f6c <_realloc_r+0x350>)
   85c54:	eb08 0006 	add.w	r0, r8, r6
   85c58:	6899      	ldr	r1, [r3, #8]
   85c5a:	4288      	cmp	r0, r1
   85c5c:	6841      	ldr	r1, [r0, #4]
   85c5e:	f000 80d7 	beq.w	85e10 <_realloc_r+0x1f4>
   85c62:	f021 0301 	bic.w	r3, r1, #1
   85c66:	4403      	add	r3, r0
   85c68:	685b      	ldr	r3, [r3, #4]
   85c6a:	07db      	lsls	r3, r3, #31
   85c6c:	d54c      	bpl.n	85d08 <_realloc_r+0xec>
   85c6e:	f01e 0f01 	tst.w	lr, #1
   85c72:	f000 809d 	beq.w	85db0 <_realloc_r+0x194>
   85c76:	4639      	mov	r1, r7
   85c78:	4648      	mov	r0, r9
   85c7a:	f7ff fbff 	bl	8547c <_malloc_r>
   85c7e:	4607      	mov	r7, r0
   85c80:	2800      	cmp	r0, #0
   85c82:	d03a      	beq.n	85cfa <_realloc_r+0xde>
   85c84:	f855 3c04 	ldr.w	r3, [r5, #-4]
   85c88:	f1a0 0208 	sub.w	r2, r0, #8
   85c8c:	f023 0301 	bic.w	r3, r3, #1
   85c90:	4443      	add	r3, r8
   85c92:	429a      	cmp	r2, r3
   85c94:	f000 813e 	beq.w	85f14 <_realloc_r+0x2f8>
   85c98:	1f32      	subs	r2, r6, #4
   85c9a:	2a24      	cmp	r2, #36	; 0x24
   85c9c:	f200 812b 	bhi.w	85ef6 <_realloc_r+0x2da>
   85ca0:	2a13      	cmp	r2, #19
   85ca2:	f200 80ff 	bhi.w	85ea4 <_realloc_r+0x288>
   85ca6:	4603      	mov	r3, r0
   85ca8:	462a      	mov	r2, r5
   85caa:	6811      	ldr	r1, [r2, #0]
   85cac:	6019      	str	r1, [r3, #0]
   85cae:	6851      	ldr	r1, [r2, #4]
   85cb0:	6059      	str	r1, [r3, #4]
   85cb2:	6892      	ldr	r2, [r2, #8]
   85cb4:	609a      	str	r2, [r3, #8]
   85cb6:	4629      	mov	r1, r5
   85cb8:	4648      	mov	r0, r9
   85cba:	f7ff f8c5 	bl	84e48 <_free_r>
   85cbe:	e01c      	b.n	85cfa <_realloc_r+0xde>
   85cc0:	f024 0407 	bic.w	r4, r4, #7
   85cc4:	2c00      	cmp	r4, #0
   85cc6:	4622      	mov	r2, r4
   85cc8:	dabf      	bge.n	85c4a <_realloc_r+0x2e>
   85cca:	230c      	movs	r3, #12
   85ccc:	2000      	movs	r0, #0
   85cce:	f8c9 3000 	str.w	r3, [r9]
   85cd2:	b003      	add	sp, #12
   85cd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85cd8:	462f      	mov	r7, r5
   85cda:	1b33      	subs	r3, r6, r4
   85cdc:	2b0f      	cmp	r3, #15
   85cde:	f8d8 2004 	ldr.w	r2, [r8, #4]
   85ce2:	d81d      	bhi.n	85d20 <_realloc_r+0x104>
   85ce4:	f002 0201 	and.w	r2, r2, #1
   85ce8:	4332      	orrs	r2, r6
   85cea:	eb08 0106 	add.w	r1, r8, r6
   85cee:	f8c8 2004 	str.w	r2, [r8, #4]
   85cf2:	684b      	ldr	r3, [r1, #4]
   85cf4:	f043 0301 	orr.w	r3, r3, #1
   85cf8:	604b      	str	r3, [r1, #4]
   85cfa:	4648      	mov	r0, r9
   85cfc:	f7ff ff8c 	bl	85c18 <__malloc_unlock>
   85d00:	4638      	mov	r0, r7
   85d02:	b003      	add	sp, #12
   85d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85d08:	f021 0103 	bic.w	r1, r1, #3
   85d0c:	4431      	add	r1, r6
   85d0e:	4291      	cmp	r1, r2
   85d10:	db20      	blt.n	85d54 <_realloc_r+0x138>
   85d12:	68c3      	ldr	r3, [r0, #12]
   85d14:	6882      	ldr	r2, [r0, #8]
   85d16:	462f      	mov	r7, r5
   85d18:	60d3      	str	r3, [r2, #12]
   85d1a:	460e      	mov	r6, r1
   85d1c:	609a      	str	r2, [r3, #8]
   85d1e:	e7dc      	b.n	85cda <_realloc_r+0xbe>
   85d20:	f002 0201 	and.w	r2, r2, #1
   85d24:	eb08 0104 	add.w	r1, r8, r4
   85d28:	4314      	orrs	r4, r2
   85d2a:	f043 0201 	orr.w	r2, r3, #1
   85d2e:	f8c8 4004 	str.w	r4, [r8, #4]
   85d32:	440b      	add	r3, r1
   85d34:	604a      	str	r2, [r1, #4]
   85d36:	685a      	ldr	r2, [r3, #4]
   85d38:	3108      	adds	r1, #8
   85d3a:	f042 0201 	orr.w	r2, r2, #1
   85d3e:	605a      	str	r2, [r3, #4]
   85d40:	4648      	mov	r0, r9
   85d42:	f7ff f881 	bl	84e48 <_free_r>
   85d46:	e7d8      	b.n	85cfa <_realloc_r+0xde>
   85d48:	4611      	mov	r1, r2
   85d4a:	b003      	add	sp, #12
   85d4c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85d50:	f7ff bb94 	b.w	8547c <_malloc_r>
   85d54:	f01e 0f01 	tst.w	lr, #1
   85d58:	d18d      	bne.n	85c76 <_realloc_r+0x5a>
   85d5a:	f855 3c08 	ldr.w	r3, [r5, #-8]
   85d5e:	ebc3 0a08 	rsb	sl, r3, r8
   85d62:	f8da 3004 	ldr.w	r3, [sl, #4]
   85d66:	f023 0c03 	bic.w	ip, r3, #3
   85d6a:	eb01 0e0c 	add.w	lr, r1, ip
   85d6e:	4596      	cmp	lr, r2
   85d70:	db26      	blt.n	85dc0 <_realloc_r+0x1a4>
   85d72:	4657      	mov	r7, sl
   85d74:	68c3      	ldr	r3, [r0, #12]
   85d76:	6881      	ldr	r1, [r0, #8]
   85d78:	1f32      	subs	r2, r6, #4
   85d7a:	60cb      	str	r3, [r1, #12]
   85d7c:	6099      	str	r1, [r3, #8]
   85d7e:	f857 1f08 	ldr.w	r1, [r7, #8]!
   85d82:	f8da 300c 	ldr.w	r3, [sl, #12]
   85d86:	2a24      	cmp	r2, #36	; 0x24
   85d88:	60cb      	str	r3, [r1, #12]
   85d8a:	6099      	str	r1, [r3, #8]
   85d8c:	f200 80c9 	bhi.w	85f22 <_realloc_r+0x306>
   85d90:	2a13      	cmp	r2, #19
   85d92:	f240 8092 	bls.w	85eba <_realloc_r+0x29e>
   85d96:	682b      	ldr	r3, [r5, #0]
   85d98:	2a1b      	cmp	r2, #27
   85d9a:	f8ca 3008 	str.w	r3, [sl, #8]
   85d9e:	686b      	ldr	r3, [r5, #4]
   85da0:	f8ca 300c 	str.w	r3, [sl, #12]
   85da4:	f200 80cd 	bhi.w	85f42 <_realloc_r+0x326>
   85da8:	3508      	adds	r5, #8
   85daa:	f10a 0310 	add.w	r3, sl, #16
   85dae:	e085      	b.n	85ebc <_realloc_r+0x2a0>
   85db0:	f855 3c08 	ldr.w	r3, [r5, #-8]
   85db4:	ebc3 0a08 	rsb	sl, r3, r8
   85db8:	f8da 3004 	ldr.w	r3, [sl, #4]
   85dbc:	f023 0c03 	bic.w	ip, r3, #3
   85dc0:	eb06 030c 	add.w	r3, r6, ip
   85dc4:	4293      	cmp	r3, r2
   85dc6:	f6ff af56 	blt.w	85c76 <_realloc_r+0x5a>
   85dca:	4657      	mov	r7, sl
   85dcc:	f8da 100c 	ldr.w	r1, [sl, #12]
   85dd0:	f857 0f08 	ldr.w	r0, [r7, #8]!
   85dd4:	1f32      	subs	r2, r6, #4
   85dd6:	2a24      	cmp	r2, #36	; 0x24
   85dd8:	60c1      	str	r1, [r0, #12]
   85dda:	6088      	str	r0, [r1, #8]
   85ddc:	f200 80aa 	bhi.w	85f34 <_realloc_r+0x318>
   85de0:	2a13      	cmp	r2, #19
   85de2:	f240 80a5 	bls.w	85f30 <_realloc_r+0x314>
   85de6:	6829      	ldr	r1, [r5, #0]
   85de8:	2a1b      	cmp	r2, #27
   85dea:	f8ca 1008 	str.w	r1, [sl, #8]
   85dee:	6869      	ldr	r1, [r5, #4]
   85df0:	f8ca 100c 	str.w	r1, [sl, #12]
   85df4:	f200 80bc 	bhi.w	85f70 <_realloc_r+0x354>
   85df8:	3508      	adds	r5, #8
   85dfa:	f10a 0210 	add.w	r2, sl, #16
   85dfe:	6829      	ldr	r1, [r5, #0]
   85e00:	461e      	mov	r6, r3
   85e02:	6011      	str	r1, [r2, #0]
   85e04:	6869      	ldr	r1, [r5, #4]
   85e06:	46d0      	mov	r8, sl
   85e08:	6051      	str	r1, [r2, #4]
   85e0a:	68ab      	ldr	r3, [r5, #8]
   85e0c:	6093      	str	r3, [r2, #8]
   85e0e:	e764      	b.n	85cda <_realloc_r+0xbe>
   85e10:	f021 0b03 	bic.w	fp, r1, #3
   85e14:	f104 0010 	add.w	r0, r4, #16
   85e18:	44b3      	add	fp, r6
   85e1a:	4583      	cmp	fp, r0
   85e1c:	da57      	bge.n	85ece <_realloc_r+0x2b2>
   85e1e:	f01e 0f01 	tst.w	lr, #1
   85e22:	f47f af28 	bne.w	85c76 <_realloc_r+0x5a>
   85e26:	f855 1c08 	ldr.w	r1, [r5, #-8]
   85e2a:	ebc1 0a08 	rsb	sl, r1, r8
   85e2e:	f8da 1004 	ldr.w	r1, [sl, #4]
   85e32:	f021 0c03 	bic.w	ip, r1, #3
   85e36:	44e3      	add	fp, ip
   85e38:	4558      	cmp	r0, fp
   85e3a:	dcc1      	bgt.n	85dc0 <_realloc_r+0x1a4>
   85e3c:	4657      	mov	r7, sl
   85e3e:	f8da 100c 	ldr.w	r1, [sl, #12]
   85e42:	f857 0f08 	ldr.w	r0, [r7, #8]!
   85e46:	1f32      	subs	r2, r6, #4
   85e48:	2a24      	cmp	r2, #36	; 0x24
   85e4a:	60c1      	str	r1, [r0, #12]
   85e4c:	6088      	str	r0, [r1, #8]
   85e4e:	f200 80b1 	bhi.w	85fb4 <_realloc_r+0x398>
   85e52:	2a13      	cmp	r2, #19
   85e54:	f240 80a2 	bls.w	85f9c <_realloc_r+0x380>
   85e58:	6829      	ldr	r1, [r5, #0]
   85e5a:	2a1b      	cmp	r2, #27
   85e5c:	f8ca 1008 	str.w	r1, [sl, #8]
   85e60:	6869      	ldr	r1, [r5, #4]
   85e62:	f8ca 100c 	str.w	r1, [sl, #12]
   85e66:	f200 80ac 	bhi.w	85fc2 <_realloc_r+0x3a6>
   85e6a:	3508      	adds	r5, #8
   85e6c:	f10a 0210 	add.w	r2, sl, #16
   85e70:	6829      	ldr	r1, [r5, #0]
   85e72:	6011      	str	r1, [r2, #0]
   85e74:	6869      	ldr	r1, [r5, #4]
   85e76:	6051      	str	r1, [r2, #4]
   85e78:	68a9      	ldr	r1, [r5, #8]
   85e7a:	6091      	str	r1, [r2, #8]
   85e7c:	ebc4 020b 	rsb	r2, r4, fp
   85e80:	eb0a 0104 	add.w	r1, sl, r4
   85e84:	f042 0201 	orr.w	r2, r2, #1
   85e88:	6099      	str	r1, [r3, #8]
   85e8a:	604a      	str	r2, [r1, #4]
   85e8c:	f8da 3004 	ldr.w	r3, [sl, #4]
   85e90:	4648      	mov	r0, r9
   85e92:	f003 0301 	and.w	r3, r3, #1
   85e96:	431c      	orrs	r4, r3
   85e98:	f8ca 4004 	str.w	r4, [sl, #4]
   85e9c:	f7ff febc 	bl	85c18 <__malloc_unlock>
   85ea0:	4638      	mov	r0, r7
   85ea2:	e72e      	b.n	85d02 <_realloc_r+0xe6>
   85ea4:	682b      	ldr	r3, [r5, #0]
   85ea6:	2a1b      	cmp	r2, #27
   85ea8:	6003      	str	r3, [r0, #0]
   85eaa:	686b      	ldr	r3, [r5, #4]
   85eac:	6043      	str	r3, [r0, #4]
   85eae:	d826      	bhi.n	85efe <_realloc_r+0x2e2>
   85eb0:	f100 0308 	add.w	r3, r0, #8
   85eb4:	f105 0208 	add.w	r2, r5, #8
   85eb8:	e6f7      	b.n	85caa <_realloc_r+0x8e>
   85eba:	463b      	mov	r3, r7
   85ebc:	682a      	ldr	r2, [r5, #0]
   85ebe:	4676      	mov	r6, lr
   85ec0:	601a      	str	r2, [r3, #0]
   85ec2:	686a      	ldr	r2, [r5, #4]
   85ec4:	46d0      	mov	r8, sl
   85ec6:	605a      	str	r2, [r3, #4]
   85ec8:	68aa      	ldr	r2, [r5, #8]
   85eca:	609a      	str	r2, [r3, #8]
   85ecc:	e705      	b.n	85cda <_realloc_r+0xbe>
   85ece:	ebc4 0b0b 	rsb	fp, r4, fp
   85ed2:	eb08 0104 	add.w	r1, r8, r4
   85ed6:	f04b 0201 	orr.w	r2, fp, #1
   85eda:	6099      	str	r1, [r3, #8]
   85edc:	604a      	str	r2, [r1, #4]
   85ede:	f855 3c04 	ldr.w	r3, [r5, #-4]
   85ee2:	4648      	mov	r0, r9
   85ee4:	f003 0301 	and.w	r3, r3, #1
   85ee8:	431c      	orrs	r4, r3
   85eea:	f845 4c04 	str.w	r4, [r5, #-4]
   85eee:	f7ff fe93 	bl	85c18 <__malloc_unlock>
   85ef2:	4628      	mov	r0, r5
   85ef4:	e705      	b.n	85d02 <_realloc_r+0xe6>
   85ef6:	4629      	mov	r1, r5
   85ef8:	f7ff fe28 	bl	85b4c <memmove>
   85efc:	e6db      	b.n	85cb6 <_realloc_r+0x9a>
   85efe:	68ab      	ldr	r3, [r5, #8]
   85f00:	2a24      	cmp	r2, #36	; 0x24
   85f02:	6083      	str	r3, [r0, #8]
   85f04:	68eb      	ldr	r3, [r5, #12]
   85f06:	60c3      	str	r3, [r0, #12]
   85f08:	d027      	beq.n	85f5a <_realloc_r+0x33e>
   85f0a:	f100 0310 	add.w	r3, r0, #16
   85f0e:	f105 0210 	add.w	r2, r5, #16
   85f12:	e6ca      	b.n	85caa <_realloc_r+0x8e>
   85f14:	f850 3c04 	ldr.w	r3, [r0, #-4]
   85f18:	462f      	mov	r7, r5
   85f1a:	f023 0303 	bic.w	r3, r3, #3
   85f1e:	441e      	add	r6, r3
   85f20:	e6db      	b.n	85cda <_realloc_r+0xbe>
   85f22:	4629      	mov	r1, r5
   85f24:	4638      	mov	r0, r7
   85f26:	4676      	mov	r6, lr
   85f28:	46d0      	mov	r8, sl
   85f2a:	f7ff fe0f 	bl	85b4c <memmove>
   85f2e:	e6d4      	b.n	85cda <_realloc_r+0xbe>
   85f30:	463a      	mov	r2, r7
   85f32:	e764      	b.n	85dfe <_realloc_r+0x1e2>
   85f34:	4629      	mov	r1, r5
   85f36:	4638      	mov	r0, r7
   85f38:	461e      	mov	r6, r3
   85f3a:	46d0      	mov	r8, sl
   85f3c:	f7ff fe06 	bl	85b4c <memmove>
   85f40:	e6cb      	b.n	85cda <_realloc_r+0xbe>
   85f42:	68ab      	ldr	r3, [r5, #8]
   85f44:	2a24      	cmp	r2, #36	; 0x24
   85f46:	f8ca 3010 	str.w	r3, [sl, #16]
   85f4a:	68eb      	ldr	r3, [r5, #12]
   85f4c:	f8ca 3014 	str.w	r3, [sl, #20]
   85f50:	d01a      	beq.n	85f88 <_realloc_r+0x36c>
   85f52:	3510      	adds	r5, #16
   85f54:	f10a 0318 	add.w	r3, sl, #24
   85f58:	e7b0      	b.n	85ebc <_realloc_r+0x2a0>
   85f5a:	692a      	ldr	r2, [r5, #16]
   85f5c:	f100 0318 	add.w	r3, r0, #24
   85f60:	6102      	str	r2, [r0, #16]
   85f62:	6969      	ldr	r1, [r5, #20]
   85f64:	f105 0218 	add.w	r2, r5, #24
   85f68:	6141      	str	r1, [r0, #20]
   85f6a:	e69e      	b.n	85caa <_realloc_r+0x8e>
   85f6c:	20070858 	.word	0x20070858
   85f70:	68a9      	ldr	r1, [r5, #8]
   85f72:	2a24      	cmp	r2, #36	; 0x24
   85f74:	f8ca 1010 	str.w	r1, [sl, #16]
   85f78:	68e9      	ldr	r1, [r5, #12]
   85f7a:	f8ca 1014 	str.w	r1, [sl, #20]
   85f7e:	d00f      	beq.n	85fa0 <_realloc_r+0x384>
   85f80:	3510      	adds	r5, #16
   85f82:	f10a 0218 	add.w	r2, sl, #24
   85f86:	e73a      	b.n	85dfe <_realloc_r+0x1e2>
   85f88:	692a      	ldr	r2, [r5, #16]
   85f8a:	f10a 0320 	add.w	r3, sl, #32
   85f8e:	f8ca 2018 	str.w	r2, [sl, #24]
   85f92:	696a      	ldr	r2, [r5, #20]
   85f94:	3518      	adds	r5, #24
   85f96:	f8ca 201c 	str.w	r2, [sl, #28]
   85f9a:	e78f      	b.n	85ebc <_realloc_r+0x2a0>
   85f9c:	463a      	mov	r2, r7
   85f9e:	e767      	b.n	85e70 <_realloc_r+0x254>
   85fa0:	6929      	ldr	r1, [r5, #16]
   85fa2:	f10a 0220 	add.w	r2, sl, #32
   85fa6:	f8ca 1018 	str.w	r1, [sl, #24]
   85faa:	6969      	ldr	r1, [r5, #20]
   85fac:	3518      	adds	r5, #24
   85fae:	f8ca 101c 	str.w	r1, [sl, #28]
   85fb2:	e724      	b.n	85dfe <_realloc_r+0x1e2>
   85fb4:	4629      	mov	r1, r5
   85fb6:	4638      	mov	r0, r7
   85fb8:	9301      	str	r3, [sp, #4]
   85fba:	f7ff fdc7 	bl	85b4c <memmove>
   85fbe:	9b01      	ldr	r3, [sp, #4]
   85fc0:	e75c      	b.n	85e7c <_realloc_r+0x260>
   85fc2:	68a9      	ldr	r1, [r5, #8]
   85fc4:	2a24      	cmp	r2, #36	; 0x24
   85fc6:	f8ca 1010 	str.w	r1, [sl, #16]
   85fca:	68e9      	ldr	r1, [r5, #12]
   85fcc:	f8ca 1014 	str.w	r1, [sl, #20]
   85fd0:	d003      	beq.n	85fda <_realloc_r+0x3be>
   85fd2:	3510      	adds	r5, #16
   85fd4:	f10a 0218 	add.w	r2, sl, #24
   85fd8:	e74a      	b.n	85e70 <_realloc_r+0x254>
   85fda:	6929      	ldr	r1, [r5, #16]
   85fdc:	f10a 0220 	add.w	r2, sl, #32
   85fe0:	f8ca 1018 	str.w	r1, [sl, #24]
   85fe4:	6969      	ldr	r1, [r5, #20]
   85fe6:	3518      	adds	r5, #24
   85fe8:	f8ca 101c 	str.w	r1, [sl, #28]
   85fec:	e740      	b.n	85e70 <_realloc_r+0x254>
   85fee:	bf00      	nop

00085ff0 <_sbrk_r>:
   85ff0:	b538      	push	{r3, r4, r5, lr}
   85ff2:	4c07      	ldr	r4, [pc, #28]	; (86010 <_sbrk_r+0x20>)
   85ff4:	2300      	movs	r3, #0
   85ff6:	4605      	mov	r5, r0
   85ff8:	4608      	mov	r0, r1
   85ffa:	6023      	str	r3, [r4, #0]
   85ffc:	f7fd f9ba 	bl	83374 <_sbrk>
   86000:	1c43      	adds	r3, r0, #1
   86002:	d000      	beq.n	86006 <_sbrk_r+0x16>
   86004:	bd38      	pop	{r3, r4, r5, pc}
   86006:	6823      	ldr	r3, [r4, #0]
   86008:	2b00      	cmp	r3, #0
   8600a:	d0fb      	beq.n	86004 <_sbrk_r+0x14>
   8600c:	602b      	str	r3, [r5, #0]
   8600e:	bd38      	pop	{r3, r4, r5, pc}
   86010:	20071244 	.word	0x20071244

00086014 <__sread>:
   86014:	b510      	push	{r4, lr}
   86016:	460c      	mov	r4, r1
   86018:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8601c:	f000 f9c4 	bl	863a8 <_read_r>
   86020:	2800      	cmp	r0, #0
   86022:	db03      	blt.n	8602c <__sread+0x18>
   86024:	6d23      	ldr	r3, [r4, #80]	; 0x50
   86026:	4403      	add	r3, r0
   86028:	6523      	str	r3, [r4, #80]	; 0x50
   8602a:	bd10      	pop	{r4, pc}
   8602c:	89a3      	ldrh	r3, [r4, #12]
   8602e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   86032:	81a3      	strh	r3, [r4, #12]
   86034:	bd10      	pop	{r4, pc}
   86036:	bf00      	nop

00086038 <__swrite>:
   86038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8603c:	460c      	mov	r4, r1
   8603e:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   86042:	461f      	mov	r7, r3
   86044:	05cb      	lsls	r3, r1, #23
   86046:	4616      	mov	r6, r2
   86048:	4605      	mov	r5, r0
   8604a:	d507      	bpl.n	8605c <__swrite+0x24>
   8604c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   86050:	2302      	movs	r3, #2
   86052:	2200      	movs	r2, #0
   86054:	f000 f992 	bl	8637c <_lseek_r>
   86058:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   8605c:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   86060:	81a1      	strh	r1, [r4, #12]
   86062:	463b      	mov	r3, r7
   86064:	4632      	mov	r2, r6
   86066:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8606a:	4628      	mov	r0, r5
   8606c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   86070:	f000 b8a2 	b.w	861b8 <_write_r>

00086074 <__sseek>:
   86074:	b510      	push	{r4, lr}
   86076:	460c      	mov	r4, r1
   86078:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8607c:	f000 f97e 	bl	8637c <_lseek_r>
   86080:	89a3      	ldrh	r3, [r4, #12]
   86082:	1c42      	adds	r2, r0, #1
   86084:	bf0e      	itee	eq
   86086:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   8608a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   8608e:	6520      	strne	r0, [r4, #80]	; 0x50
   86090:	81a3      	strh	r3, [r4, #12]
   86092:	bd10      	pop	{r4, pc}

00086094 <__sclose>:
   86094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   86098:	f000 b8f6 	b.w	86288 <_close_r>

0008609c <__swbuf_r>:
   8609c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8609e:	460e      	mov	r6, r1
   860a0:	4614      	mov	r4, r2
   860a2:	4607      	mov	r7, r0
   860a4:	b110      	cbz	r0, 860ac <__swbuf_r+0x10>
   860a6:	6b83      	ldr	r3, [r0, #56]	; 0x38
   860a8:	2b00      	cmp	r3, #0
   860aa:	d04a      	beq.n	86142 <__swbuf_r+0xa6>
   860ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   860b0:	69a3      	ldr	r3, [r4, #24]
   860b2:	b291      	uxth	r1, r2
   860b4:	0708      	lsls	r0, r1, #28
   860b6:	60a3      	str	r3, [r4, #8]
   860b8:	d538      	bpl.n	8612c <__swbuf_r+0x90>
   860ba:	6923      	ldr	r3, [r4, #16]
   860bc:	2b00      	cmp	r3, #0
   860be:	d035      	beq.n	8612c <__swbuf_r+0x90>
   860c0:	0489      	lsls	r1, r1, #18
   860c2:	b2f5      	uxtb	r5, r6
   860c4:	d515      	bpl.n	860f2 <__swbuf_r+0x56>
   860c6:	6822      	ldr	r2, [r4, #0]
   860c8:	6961      	ldr	r1, [r4, #20]
   860ca:	1ad3      	subs	r3, r2, r3
   860cc:	428b      	cmp	r3, r1
   860ce:	da1c      	bge.n	8610a <__swbuf_r+0x6e>
   860d0:	3301      	adds	r3, #1
   860d2:	68a1      	ldr	r1, [r4, #8]
   860d4:	1c50      	adds	r0, r2, #1
   860d6:	3901      	subs	r1, #1
   860d8:	60a1      	str	r1, [r4, #8]
   860da:	6020      	str	r0, [r4, #0]
   860dc:	7016      	strb	r6, [r2, #0]
   860de:	6962      	ldr	r2, [r4, #20]
   860e0:	429a      	cmp	r2, r3
   860e2:	d01a      	beq.n	8611a <__swbuf_r+0x7e>
   860e4:	89a3      	ldrh	r3, [r4, #12]
   860e6:	07db      	lsls	r3, r3, #31
   860e8:	d501      	bpl.n	860ee <__swbuf_r+0x52>
   860ea:	2d0a      	cmp	r5, #10
   860ec:	d015      	beq.n	8611a <__swbuf_r+0x7e>
   860ee:	4628      	mov	r0, r5
   860f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   860f2:	6e61      	ldr	r1, [r4, #100]	; 0x64
   860f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   860f8:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   860fc:	81a2      	strh	r2, [r4, #12]
   860fe:	6822      	ldr	r2, [r4, #0]
   86100:	6661      	str	r1, [r4, #100]	; 0x64
   86102:	6961      	ldr	r1, [r4, #20]
   86104:	1ad3      	subs	r3, r2, r3
   86106:	428b      	cmp	r3, r1
   86108:	dbe2      	blt.n	860d0 <__swbuf_r+0x34>
   8610a:	4621      	mov	r1, r4
   8610c:	4638      	mov	r0, r7
   8610e:	f7fe fd3f 	bl	84b90 <_fflush_r>
   86112:	b940      	cbnz	r0, 86126 <__swbuf_r+0x8a>
   86114:	6822      	ldr	r2, [r4, #0]
   86116:	2301      	movs	r3, #1
   86118:	e7db      	b.n	860d2 <__swbuf_r+0x36>
   8611a:	4621      	mov	r1, r4
   8611c:	4638      	mov	r0, r7
   8611e:	f7fe fd37 	bl	84b90 <_fflush_r>
   86122:	2800      	cmp	r0, #0
   86124:	d0e3      	beq.n	860ee <__swbuf_r+0x52>
   86126:	f04f 30ff 	mov.w	r0, #4294967295
   8612a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8612c:	4621      	mov	r1, r4
   8612e:	4638      	mov	r0, r7
   86130:	f7fe fc16 	bl	84960 <__swsetup_r>
   86134:	2800      	cmp	r0, #0
   86136:	d1f6      	bne.n	86126 <__swbuf_r+0x8a>
   86138:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8613c:	6923      	ldr	r3, [r4, #16]
   8613e:	b291      	uxth	r1, r2
   86140:	e7be      	b.n	860c0 <__swbuf_r+0x24>
   86142:	f7fe fdb9 	bl	84cb8 <__sinit>
   86146:	e7b1      	b.n	860ac <__swbuf_r+0x10>

00086148 <_wcrtomb_r>:
   86148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8614c:	4605      	mov	r5, r0
   8614e:	b086      	sub	sp, #24
   86150:	461e      	mov	r6, r3
   86152:	460c      	mov	r4, r1
   86154:	b1a1      	cbz	r1, 86180 <_wcrtomb_r+0x38>
   86156:	4b10      	ldr	r3, [pc, #64]	; (86198 <_wcrtomb_r+0x50>)
   86158:	4617      	mov	r7, r2
   8615a:	f8d3 8000 	ldr.w	r8, [r3]
   8615e:	f7ff f907 	bl	85370 <__locale_charset>
   86162:	9600      	str	r6, [sp, #0]
   86164:	4603      	mov	r3, r0
   86166:	463a      	mov	r2, r7
   86168:	4621      	mov	r1, r4
   8616a:	4628      	mov	r0, r5
   8616c:	47c0      	blx	r8
   8616e:	1c43      	adds	r3, r0, #1
   86170:	d103      	bne.n	8617a <_wcrtomb_r+0x32>
   86172:	2200      	movs	r2, #0
   86174:	238a      	movs	r3, #138	; 0x8a
   86176:	6032      	str	r2, [r6, #0]
   86178:	602b      	str	r3, [r5, #0]
   8617a:	b006      	add	sp, #24
   8617c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   86180:	4b05      	ldr	r3, [pc, #20]	; (86198 <_wcrtomb_r+0x50>)
   86182:	681f      	ldr	r7, [r3, #0]
   86184:	f7ff f8f4 	bl	85370 <__locale_charset>
   86188:	9600      	str	r6, [sp, #0]
   8618a:	4603      	mov	r3, r0
   8618c:	4622      	mov	r2, r4
   8618e:	a903      	add	r1, sp, #12
   86190:	4628      	mov	r0, r5
   86192:	47b8      	blx	r7
   86194:	e7eb      	b.n	8616e <_wcrtomb_r+0x26>
   86196:	bf00      	nop
   86198:	20070c68 	.word	0x20070c68

0008619c <__ascii_wctomb>:
   8619c:	b121      	cbz	r1, 861a8 <__ascii_wctomb+0xc>
   8619e:	2aff      	cmp	r2, #255	; 0xff
   861a0:	d804      	bhi.n	861ac <__ascii_wctomb+0x10>
   861a2:	700a      	strb	r2, [r1, #0]
   861a4:	2001      	movs	r0, #1
   861a6:	4770      	bx	lr
   861a8:	4608      	mov	r0, r1
   861aa:	4770      	bx	lr
   861ac:	238a      	movs	r3, #138	; 0x8a
   861ae:	6003      	str	r3, [r0, #0]
   861b0:	f04f 30ff 	mov.w	r0, #4294967295
   861b4:	4770      	bx	lr
   861b6:	bf00      	nop

000861b8 <_write_r>:
   861b8:	b570      	push	{r4, r5, r6, lr}
   861ba:	460d      	mov	r5, r1
   861bc:	4c08      	ldr	r4, [pc, #32]	; (861e0 <_write_r+0x28>)
   861be:	4611      	mov	r1, r2
   861c0:	4606      	mov	r6, r0
   861c2:	461a      	mov	r2, r3
   861c4:	4628      	mov	r0, r5
   861c6:	2300      	movs	r3, #0
   861c8:	6023      	str	r3, [r4, #0]
   861ca:	f7fb f873 	bl	812b4 <_write>
   861ce:	1c43      	adds	r3, r0, #1
   861d0:	d000      	beq.n	861d4 <_write_r+0x1c>
   861d2:	bd70      	pop	{r4, r5, r6, pc}
   861d4:	6823      	ldr	r3, [r4, #0]
   861d6:	2b00      	cmp	r3, #0
   861d8:	d0fb      	beq.n	861d2 <_write_r+0x1a>
   861da:	6033      	str	r3, [r6, #0]
   861dc:	bd70      	pop	{r4, r5, r6, pc}
   861de:	bf00      	nop
   861e0:	20071244 	.word	0x20071244

000861e4 <__register_exitproc>:
   861e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   861e8:	4c25      	ldr	r4, [pc, #148]	; (86280 <__register_exitproc+0x9c>)
   861ea:	4606      	mov	r6, r0
   861ec:	6825      	ldr	r5, [r4, #0]
   861ee:	4688      	mov	r8, r1
   861f0:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
   861f4:	4692      	mov	sl, r2
   861f6:	4699      	mov	r9, r3
   861f8:	b3c4      	cbz	r4, 8626c <__register_exitproc+0x88>
   861fa:	6860      	ldr	r0, [r4, #4]
   861fc:	281f      	cmp	r0, #31
   861fe:	dc17      	bgt.n	86230 <__register_exitproc+0x4c>
   86200:	1c41      	adds	r1, r0, #1
   86202:	b176      	cbz	r6, 86222 <__register_exitproc+0x3e>
   86204:	eb04 0380 	add.w	r3, r4, r0, lsl #2
   86208:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
   8620c:	f8d4 5188 	ldr.w	r5, [r4, #392]	; 0x188
   86210:	2201      	movs	r2, #1
   86212:	4082      	lsls	r2, r0
   86214:	4315      	orrs	r5, r2
   86216:	2e02      	cmp	r6, #2
   86218:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
   8621c:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
   86220:	d01e      	beq.n	86260 <__register_exitproc+0x7c>
   86222:	1c83      	adds	r3, r0, #2
   86224:	6061      	str	r1, [r4, #4]
   86226:	2000      	movs	r0, #0
   86228:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
   8622c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   86230:	4b14      	ldr	r3, [pc, #80]	; (86284 <__register_exitproc+0xa0>)
   86232:	b303      	cbz	r3, 86276 <__register_exitproc+0x92>
   86234:	f44f 70c8 	mov.w	r0, #400	; 0x190
   86238:	f7ff f918 	bl	8546c <malloc>
   8623c:	4604      	mov	r4, r0
   8623e:	b1d0      	cbz	r0, 86276 <__register_exitproc+0x92>
   86240:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
   86244:	2700      	movs	r7, #0
   86246:	e884 0088 	stmia.w	r4, {r3, r7}
   8624a:	4638      	mov	r0, r7
   8624c:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   86250:	2101      	movs	r1, #1
   86252:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
   86256:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
   8625a:	2e00      	cmp	r6, #0
   8625c:	d0e1      	beq.n	86222 <__register_exitproc+0x3e>
   8625e:	e7d1      	b.n	86204 <__register_exitproc+0x20>
   86260:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   86264:	431a      	orrs	r2, r3
   86266:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   8626a:	e7da      	b.n	86222 <__register_exitproc+0x3e>
   8626c:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
   86270:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   86274:	e7c1      	b.n	861fa <__register_exitproc+0x16>
   86276:	f04f 30ff 	mov.w	r0, #4294967295
   8627a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8627e:	bf00      	nop
   86280:	00086788 	.word	0x00086788
   86284:	0008546d 	.word	0x0008546d

00086288 <_close_r>:
   86288:	b538      	push	{r3, r4, r5, lr}
   8628a:	4c07      	ldr	r4, [pc, #28]	; (862a8 <_close_r+0x20>)
   8628c:	2300      	movs	r3, #0
   8628e:	4605      	mov	r5, r0
   86290:	4608      	mov	r0, r1
   86292:	6023      	str	r3, [r4, #0]
   86294:	f7fd f88c 	bl	833b0 <_close>
   86298:	1c43      	adds	r3, r0, #1
   8629a:	d000      	beq.n	8629e <_close_r+0x16>
   8629c:	bd38      	pop	{r3, r4, r5, pc}
   8629e:	6823      	ldr	r3, [r4, #0]
   862a0:	2b00      	cmp	r3, #0
   862a2:	d0fb      	beq.n	8629c <_close_r+0x14>
   862a4:	602b      	str	r3, [r5, #0]
   862a6:	bd38      	pop	{r3, r4, r5, pc}
   862a8:	20071244 	.word	0x20071244

000862ac <_fclose_r>:
   862ac:	2900      	cmp	r1, #0
   862ae:	d03d      	beq.n	8632c <_fclose_r+0x80>
   862b0:	b570      	push	{r4, r5, r6, lr}
   862b2:	4605      	mov	r5, r0
   862b4:	460c      	mov	r4, r1
   862b6:	b108      	cbz	r0, 862bc <_fclose_r+0x10>
   862b8:	6b83      	ldr	r3, [r0, #56]	; 0x38
   862ba:	b37b      	cbz	r3, 8631c <_fclose_r+0x70>
   862bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   862c0:	b90b      	cbnz	r3, 862c6 <_fclose_r+0x1a>
   862c2:	2000      	movs	r0, #0
   862c4:	bd70      	pop	{r4, r5, r6, pc}
   862c6:	4621      	mov	r1, r4
   862c8:	4628      	mov	r0, r5
   862ca:	f7fe fbbd 	bl	84a48 <__sflush_r>
   862ce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   862d0:	4606      	mov	r6, r0
   862d2:	b133      	cbz	r3, 862e2 <_fclose_r+0x36>
   862d4:	69e1      	ldr	r1, [r4, #28]
   862d6:	4628      	mov	r0, r5
   862d8:	4798      	blx	r3
   862da:	2800      	cmp	r0, #0
   862dc:	bfb8      	it	lt
   862de:	f04f 36ff 	movlt.w	r6, #4294967295
   862e2:	89a3      	ldrh	r3, [r4, #12]
   862e4:	061b      	lsls	r3, r3, #24
   862e6:	d41c      	bmi.n	86322 <_fclose_r+0x76>
   862e8:	6b21      	ldr	r1, [r4, #48]	; 0x30
   862ea:	b141      	cbz	r1, 862fe <_fclose_r+0x52>
   862ec:	f104 0340 	add.w	r3, r4, #64	; 0x40
   862f0:	4299      	cmp	r1, r3
   862f2:	d002      	beq.n	862fa <_fclose_r+0x4e>
   862f4:	4628      	mov	r0, r5
   862f6:	f7fe fda7 	bl	84e48 <_free_r>
   862fa:	2300      	movs	r3, #0
   862fc:	6323      	str	r3, [r4, #48]	; 0x30
   862fe:	6c61      	ldr	r1, [r4, #68]	; 0x44
   86300:	b121      	cbz	r1, 8630c <_fclose_r+0x60>
   86302:	4628      	mov	r0, r5
   86304:	f7fe fda0 	bl	84e48 <_free_r>
   86308:	2300      	movs	r3, #0
   8630a:	6463      	str	r3, [r4, #68]	; 0x44
   8630c:	f7fe fcda 	bl	84cc4 <__sfp_lock_acquire>
   86310:	2300      	movs	r3, #0
   86312:	81a3      	strh	r3, [r4, #12]
   86314:	f7fe fcd8 	bl	84cc8 <__sfp_lock_release>
   86318:	4630      	mov	r0, r6
   8631a:	bd70      	pop	{r4, r5, r6, pc}
   8631c:	f7fe fccc 	bl	84cb8 <__sinit>
   86320:	e7cc      	b.n	862bc <_fclose_r+0x10>
   86322:	6921      	ldr	r1, [r4, #16]
   86324:	4628      	mov	r0, r5
   86326:	f7fe fd8f 	bl	84e48 <_free_r>
   8632a:	e7dd      	b.n	862e8 <_fclose_r+0x3c>
   8632c:	2000      	movs	r0, #0
   8632e:	4770      	bx	lr

00086330 <_fstat_r>:
   86330:	b538      	push	{r3, r4, r5, lr}
   86332:	460b      	mov	r3, r1
   86334:	4c07      	ldr	r4, [pc, #28]	; (86354 <_fstat_r+0x24>)
   86336:	4605      	mov	r5, r0
   86338:	4611      	mov	r1, r2
   8633a:	4618      	mov	r0, r3
   8633c:	2300      	movs	r3, #0
   8633e:	6023      	str	r3, [r4, #0]
   86340:	f7fd f842 	bl	833c8 <_fstat>
   86344:	1c43      	adds	r3, r0, #1
   86346:	d000      	beq.n	8634a <_fstat_r+0x1a>
   86348:	bd38      	pop	{r3, r4, r5, pc}
   8634a:	6823      	ldr	r3, [r4, #0]
   8634c:	2b00      	cmp	r3, #0
   8634e:	d0fb      	beq.n	86348 <_fstat_r+0x18>
   86350:	602b      	str	r3, [r5, #0]
   86352:	bd38      	pop	{r3, r4, r5, pc}
   86354:	20071244 	.word	0x20071244

00086358 <_isatty_r>:
   86358:	b538      	push	{r3, r4, r5, lr}
   8635a:	4c07      	ldr	r4, [pc, #28]	; (86378 <_isatty_r+0x20>)
   8635c:	2300      	movs	r3, #0
   8635e:	4605      	mov	r5, r0
   86360:	4608      	mov	r0, r1
   86362:	6023      	str	r3, [r4, #0]
   86364:	f7fd f840 	bl	833e8 <_isatty>
   86368:	1c43      	adds	r3, r0, #1
   8636a:	d000      	beq.n	8636e <_isatty_r+0x16>
   8636c:	bd38      	pop	{r3, r4, r5, pc}
   8636e:	6823      	ldr	r3, [r4, #0]
   86370:	2b00      	cmp	r3, #0
   86372:	d0fb      	beq.n	8636c <_isatty_r+0x14>
   86374:	602b      	str	r3, [r5, #0]
   86376:	bd38      	pop	{r3, r4, r5, pc}
   86378:	20071244 	.word	0x20071244

0008637c <_lseek_r>:
   8637c:	b570      	push	{r4, r5, r6, lr}
   8637e:	460d      	mov	r5, r1
   86380:	4c08      	ldr	r4, [pc, #32]	; (863a4 <_lseek_r+0x28>)
   86382:	4611      	mov	r1, r2
   86384:	4606      	mov	r6, r0
   86386:	461a      	mov	r2, r3
   86388:	4628      	mov	r0, r5
   8638a:	2300      	movs	r3, #0
   8638c:	6023      	str	r3, [r4, #0]
   8638e:	f7fd f835 	bl	833fc <_lseek>
   86392:	1c43      	adds	r3, r0, #1
   86394:	d000      	beq.n	86398 <_lseek_r+0x1c>
   86396:	bd70      	pop	{r4, r5, r6, pc}
   86398:	6823      	ldr	r3, [r4, #0]
   8639a:	2b00      	cmp	r3, #0
   8639c:	d0fb      	beq.n	86396 <_lseek_r+0x1a>
   8639e:	6033      	str	r3, [r6, #0]
   863a0:	bd70      	pop	{r4, r5, r6, pc}
   863a2:	bf00      	nop
   863a4:	20071244 	.word	0x20071244

000863a8 <_read_r>:
   863a8:	b570      	push	{r4, r5, r6, lr}
   863aa:	460d      	mov	r5, r1
   863ac:	4c08      	ldr	r4, [pc, #32]	; (863d0 <_read_r+0x28>)
   863ae:	4611      	mov	r1, r2
   863b0:	4606      	mov	r6, r0
   863b2:	461a      	mov	r2, r3
   863b4:	4628      	mov	r0, r5
   863b6:	2300      	movs	r3, #0
   863b8:	6023      	str	r3, [r4, #0]
   863ba:	f7fa ff51 	bl	81260 <_read>
   863be:	1c43      	adds	r3, r0, #1
   863c0:	d000      	beq.n	863c4 <_read_r+0x1c>
   863c2:	bd70      	pop	{r4, r5, r6, pc}
   863c4:	6823      	ldr	r3, [r4, #0]
   863c6:	2b00      	cmp	r3, #0
   863c8:	d0fb      	beq.n	863c2 <_read_r+0x1a>
   863ca:	6033      	str	r3, [r6, #0]
   863cc:	bd70      	pop	{r4, r5, r6, pc}
   863ce:	bf00      	nop
   863d0:	20071244 	.word	0x20071244

000863d4 <__aeabi_uldivmod>:
   863d4:	b953      	cbnz	r3, 863ec <__aeabi_uldivmod+0x18>
   863d6:	b94a      	cbnz	r2, 863ec <__aeabi_uldivmod+0x18>
   863d8:	2900      	cmp	r1, #0
   863da:	bf08      	it	eq
   863dc:	2800      	cmpeq	r0, #0
   863de:	bf1c      	itt	ne
   863e0:	f04f 31ff 	movne.w	r1, #4294967295
   863e4:	f04f 30ff 	movne.w	r0, #4294967295
   863e8:	f000 b982 	b.w	866f0 <__aeabi_idiv0>
   863ec:	f1ad 0c08 	sub.w	ip, sp, #8
   863f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   863f4:	f000 f806 	bl	86404 <__udivmoddi4>
   863f8:	f8dd e004 	ldr.w	lr, [sp, #4]
   863fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   86400:	b004      	add	sp, #16
   86402:	4770      	bx	lr

00086404 <__udivmoddi4>:
   86404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86408:	468c      	mov	ip, r1
   8640a:	460c      	mov	r4, r1
   8640c:	4605      	mov	r5, r0
   8640e:	9e09      	ldr	r6, [sp, #36]	; 0x24
   86410:	2b00      	cmp	r3, #0
   86412:	d14f      	bne.n	864b4 <__udivmoddi4+0xb0>
   86414:	428a      	cmp	r2, r1
   86416:	4617      	mov	r7, r2
   86418:	d96b      	bls.n	864f2 <__udivmoddi4+0xee>
   8641a:	fab2 fe82 	clz	lr, r2
   8641e:	f1be 0f00 	cmp.w	lr, #0
   86422:	d00b      	beq.n	8643c <__udivmoddi4+0x38>
   86424:	f1ce 0520 	rsb	r5, lr, #32
   86428:	fa20 f505 	lsr.w	r5, r0, r5
   8642c:	fa01 f30e 	lsl.w	r3, r1, lr
   86430:	ea45 0c03 	orr.w	ip, r5, r3
   86434:	fa02 f70e 	lsl.w	r7, r2, lr
   86438:	fa00 f50e 	lsl.w	r5, r0, lr
   8643c:	0c39      	lsrs	r1, r7, #16
   8643e:	fbbc f0f1 	udiv	r0, ip, r1
   86442:	b2ba      	uxth	r2, r7
   86444:	fb01 c310 	mls	r3, r1, r0, ip
   86448:	fb00 f802 	mul.w	r8, r0, r2
   8644c:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   86450:	ea4c 4403 	orr.w	r4, ip, r3, lsl #16
   86454:	45a0      	cmp	r8, r4
   86456:	d909      	bls.n	8646c <__udivmoddi4+0x68>
   86458:	19e4      	adds	r4, r4, r7
   8645a:	f100 33ff 	add.w	r3, r0, #4294967295
   8645e:	f080 8128 	bcs.w	866b2 <__udivmoddi4+0x2ae>
   86462:	45a0      	cmp	r8, r4
   86464:	f240 8125 	bls.w	866b2 <__udivmoddi4+0x2ae>
   86468:	3802      	subs	r0, #2
   8646a:	443c      	add	r4, r7
   8646c:	ebc8 0404 	rsb	r4, r8, r4
   86470:	fbb4 f3f1 	udiv	r3, r4, r1
   86474:	fb01 4c13 	mls	ip, r1, r3, r4
   86478:	fb03 f202 	mul.w	r2, r3, r2
   8647c:	b2ac      	uxth	r4, r5
   8647e:	ea44 410c 	orr.w	r1, r4, ip, lsl #16
   86482:	428a      	cmp	r2, r1
   86484:	d909      	bls.n	8649a <__udivmoddi4+0x96>
   86486:	19c9      	adds	r1, r1, r7
   86488:	f103 34ff 	add.w	r4, r3, #4294967295
   8648c:	f080 810f 	bcs.w	866ae <__udivmoddi4+0x2aa>
   86490:	428a      	cmp	r2, r1
   86492:	f240 810c 	bls.w	866ae <__udivmoddi4+0x2aa>
   86496:	3b02      	subs	r3, #2
   86498:	4439      	add	r1, r7
   8649a:	1a8a      	subs	r2, r1, r2
   8649c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   864a0:	2100      	movs	r1, #0
   864a2:	2e00      	cmp	r6, #0
   864a4:	d063      	beq.n	8656e <__udivmoddi4+0x16a>
   864a6:	fa22 f20e 	lsr.w	r2, r2, lr
   864aa:	2300      	movs	r3, #0
   864ac:	e886 000c 	stmia.w	r6, {r2, r3}
   864b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   864b4:	428b      	cmp	r3, r1
   864b6:	d907      	bls.n	864c8 <__udivmoddi4+0xc4>
   864b8:	2e00      	cmp	r6, #0
   864ba:	d056      	beq.n	8656a <__udivmoddi4+0x166>
   864bc:	2100      	movs	r1, #0
   864be:	e886 0011 	stmia.w	r6, {r0, r4}
   864c2:	4608      	mov	r0, r1
   864c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   864c8:	fab3 f183 	clz	r1, r3
   864cc:	2900      	cmp	r1, #0
   864ce:	f040 8093 	bne.w	865f8 <__udivmoddi4+0x1f4>
   864d2:	42a3      	cmp	r3, r4
   864d4:	d302      	bcc.n	864dc <__udivmoddi4+0xd8>
   864d6:	4282      	cmp	r2, r0
   864d8:	f200 80fe 	bhi.w	866d8 <__udivmoddi4+0x2d4>
   864dc:	1a85      	subs	r5, r0, r2
   864de:	eb64 0303 	sbc.w	r3, r4, r3
   864e2:	469c      	mov	ip, r3
   864e4:	2001      	movs	r0, #1
   864e6:	2e00      	cmp	r6, #0
   864e8:	d041      	beq.n	8656e <__udivmoddi4+0x16a>
   864ea:	e886 1020 	stmia.w	r6, {r5, ip}
   864ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   864f2:	b912      	cbnz	r2, 864fa <__udivmoddi4+0xf6>
   864f4:	2701      	movs	r7, #1
   864f6:	fbb7 f7f2 	udiv	r7, r7, r2
   864fa:	fab7 fe87 	clz	lr, r7
   864fe:	f1be 0f00 	cmp.w	lr, #0
   86502:	d136      	bne.n	86572 <__udivmoddi4+0x16e>
   86504:	1be4      	subs	r4, r4, r7
   86506:	ea4f 4817 	mov.w	r8, r7, lsr #16
   8650a:	fa1f f987 	uxth.w	r9, r7
   8650e:	2101      	movs	r1, #1
   86510:	fbb4 f3f8 	udiv	r3, r4, r8
   86514:	fb08 4413 	mls	r4, r8, r3, r4
   86518:	fb09 f203 	mul.w	r2, r9, r3
   8651c:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   86520:	ea4c 4404 	orr.w	r4, ip, r4, lsl #16
   86524:	42a2      	cmp	r2, r4
   86526:	d907      	bls.n	86538 <__udivmoddi4+0x134>
   86528:	19e4      	adds	r4, r4, r7
   8652a:	f103 30ff 	add.w	r0, r3, #4294967295
   8652e:	d202      	bcs.n	86536 <__udivmoddi4+0x132>
   86530:	42a2      	cmp	r2, r4
   86532:	f200 80d3 	bhi.w	866dc <__udivmoddi4+0x2d8>
   86536:	4603      	mov	r3, r0
   86538:	1aa4      	subs	r4, r4, r2
   8653a:	fbb4 f0f8 	udiv	r0, r4, r8
   8653e:	fb08 4810 	mls	r8, r8, r0, r4
   86542:	fb09 f900 	mul.w	r9, r9, r0
   86546:	b2ac      	uxth	r4, r5
   86548:	ea44 4208 	orr.w	r2, r4, r8, lsl #16
   8654c:	4591      	cmp	r9, r2
   8654e:	d907      	bls.n	86560 <__udivmoddi4+0x15c>
   86550:	19d2      	adds	r2, r2, r7
   86552:	f100 34ff 	add.w	r4, r0, #4294967295
   86556:	d202      	bcs.n	8655e <__udivmoddi4+0x15a>
   86558:	4591      	cmp	r9, r2
   8655a:	f200 80ba 	bhi.w	866d2 <__udivmoddi4+0x2ce>
   8655e:	4620      	mov	r0, r4
   86560:	ebc9 0202 	rsb	r2, r9, r2
   86564:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   86568:	e79b      	b.n	864a2 <__udivmoddi4+0x9e>
   8656a:	4631      	mov	r1, r6
   8656c:	4630      	mov	r0, r6
   8656e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86572:	fa07 f70e 	lsl.w	r7, r7, lr
   86576:	f1ce 0c20 	rsb	ip, lr, #32
   8657a:	fa24 f30c 	lsr.w	r3, r4, ip
   8657e:	ea4f 4817 	mov.w	r8, r7, lsr #16
   86582:	fbb3 faf8 	udiv	sl, r3, r8
   86586:	fa1f f987 	uxth.w	r9, r7
   8658a:	fb08 351a 	mls	r5, r8, sl, r3
   8658e:	fa20 fc0c 	lsr.w	ip, r0, ip
   86592:	fa04 f40e 	lsl.w	r4, r4, lr
   86596:	fb0a fb09 	mul.w	fp, sl, r9
   8659a:	ea4c 0c04 	orr.w	ip, ip, r4
   8659e:	ea4f 421c 	mov.w	r2, ip, lsr #16
   865a2:	ea42 4305 	orr.w	r3, r2, r5, lsl #16
   865a6:	459b      	cmp	fp, r3
   865a8:	fa00 f50e 	lsl.w	r5, r0, lr
   865ac:	d90a      	bls.n	865c4 <__udivmoddi4+0x1c0>
   865ae:	19db      	adds	r3, r3, r7
   865b0:	f10a 32ff 	add.w	r2, sl, #4294967295
   865b4:	f080 808b 	bcs.w	866ce <__udivmoddi4+0x2ca>
   865b8:	459b      	cmp	fp, r3
   865ba:	f240 8088 	bls.w	866ce <__udivmoddi4+0x2ca>
   865be:	f1aa 0a02 	sub.w	sl, sl, #2
   865c2:	443b      	add	r3, r7
   865c4:	ebcb 0303 	rsb	r3, fp, r3
   865c8:	fbb3 f0f8 	udiv	r0, r3, r8
   865cc:	fb08 3310 	mls	r3, r8, r0, r3
   865d0:	fb00 f409 	mul.w	r4, r0, r9
   865d4:	fa1f fc8c 	uxth.w	ip, ip
   865d8:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
   865dc:	429c      	cmp	r4, r3
   865de:	d907      	bls.n	865f0 <__udivmoddi4+0x1ec>
   865e0:	19db      	adds	r3, r3, r7
   865e2:	f100 32ff 	add.w	r2, r0, #4294967295
   865e6:	d26e      	bcs.n	866c6 <__udivmoddi4+0x2c2>
   865e8:	429c      	cmp	r4, r3
   865ea:	d96c      	bls.n	866c6 <__udivmoddi4+0x2c2>
   865ec:	3802      	subs	r0, #2
   865ee:	443b      	add	r3, r7
   865f0:	1b1c      	subs	r4, r3, r4
   865f2:	ea40 410a 	orr.w	r1, r0, sl, lsl #16
   865f6:	e78b      	b.n	86510 <__udivmoddi4+0x10c>
   865f8:	f1c1 0e20 	rsb	lr, r1, #32
   865fc:	408b      	lsls	r3, r1
   865fe:	fa22 fc0e 	lsr.w	ip, r2, lr
   86602:	ea4c 0c03 	orr.w	ip, ip, r3
   86606:	fa24 f70e 	lsr.w	r7, r4, lr
   8660a:	ea4f 491c 	mov.w	r9, ip, lsr #16
   8660e:	fbb7 faf9 	udiv	sl, r7, r9
   86612:	fa1f f38c 	uxth.w	r3, ip
   86616:	fb09 771a 	mls	r7, r9, sl, r7
   8661a:	fa20 f80e 	lsr.w	r8, r0, lr
   8661e:	408c      	lsls	r4, r1
   86620:	fb0a f503 	mul.w	r5, sl, r3
   86624:	ea48 0404 	orr.w	r4, r8, r4
   86628:	ea4f 4814 	mov.w	r8, r4, lsr #16
   8662c:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
   86630:	42bd      	cmp	r5, r7
   86632:	fa02 f201 	lsl.w	r2, r2, r1
   86636:	fa00 fb01 	lsl.w	fp, r0, r1
   8663a:	d909      	bls.n	86650 <__udivmoddi4+0x24c>
   8663c:	eb17 070c 	adds.w	r7, r7, ip
   86640:	f10a 30ff 	add.w	r0, sl, #4294967295
   86644:	d241      	bcs.n	866ca <__udivmoddi4+0x2c6>
   86646:	42bd      	cmp	r5, r7
   86648:	d93f      	bls.n	866ca <__udivmoddi4+0x2c6>
   8664a:	f1aa 0a02 	sub.w	sl, sl, #2
   8664e:	4467      	add	r7, ip
   86650:	1b7f      	subs	r7, r7, r5
   86652:	fbb7 f5f9 	udiv	r5, r7, r9
   86656:	fb09 7715 	mls	r7, r9, r5, r7
   8665a:	fb05 f303 	mul.w	r3, r5, r3
   8665e:	b2a4      	uxth	r4, r4
   86660:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
   86664:	42bb      	cmp	r3, r7
   86666:	d908      	bls.n	8667a <__udivmoddi4+0x276>
   86668:	eb17 070c 	adds.w	r7, r7, ip
   8666c:	f105 30ff 	add.w	r0, r5, #4294967295
   86670:	d227      	bcs.n	866c2 <__udivmoddi4+0x2be>
   86672:	42bb      	cmp	r3, r7
   86674:	d925      	bls.n	866c2 <__udivmoddi4+0x2be>
   86676:	3d02      	subs	r5, #2
   86678:	4467      	add	r7, ip
   8667a:	ea45 400a 	orr.w	r0, r5, sl, lsl #16
   8667e:	fba0 8902 	umull	r8, r9, r0, r2
   86682:	1aff      	subs	r7, r7, r3
   86684:	454f      	cmp	r7, r9
   86686:	4645      	mov	r5, r8
   86688:	464c      	mov	r4, r9
   8668a:	d314      	bcc.n	866b6 <__udivmoddi4+0x2b2>
   8668c:	d029      	beq.n	866e2 <__udivmoddi4+0x2de>
   8668e:	b366      	cbz	r6, 866ea <__udivmoddi4+0x2e6>
   86690:	ebbb 0305 	subs.w	r3, fp, r5
   86694:	eb67 0704 	sbc.w	r7, r7, r4
   86698:	fa07 fe0e 	lsl.w	lr, r7, lr
   8669c:	40cb      	lsrs	r3, r1
   8669e:	40cf      	lsrs	r7, r1
   866a0:	ea4e 0303 	orr.w	r3, lr, r3
   866a4:	e886 0088 	stmia.w	r6, {r3, r7}
   866a8:	2100      	movs	r1, #0
   866aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   866ae:	4623      	mov	r3, r4
   866b0:	e6f3      	b.n	8649a <__udivmoddi4+0x96>
   866b2:	4618      	mov	r0, r3
   866b4:	e6da      	b.n	8646c <__udivmoddi4+0x68>
   866b6:	ebb8 0502 	subs.w	r5, r8, r2
   866ba:	eb69 040c 	sbc.w	r4, r9, ip
   866be:	3801      	subs	r0, #1
   866c0:	e7e5      	b.n	8668e <__udivmoddi4+0x28a>
   866c2:	4605      	mov	r5, r0
   866c4:	e7d9      	b.n	8667a <__udivmoddi4+0x276>
   866c6:	4610      	mov	r0, r2
   866c8:	e792      	b.n	865f0 <__udivmoddi4+0x1ec>
   866ca:	4682      	mov	sl, r0
   866cc:	e7c0      	b.n	86650 <__udivmoddi4+0x24c>
   866ce:	4692      	mov	sl, r2
   866d0:	e778      	b.n	865c4 <__udivmoddi4+0x1c0>
   866d2:	3802      	subs	r0, #2
   866d4:	443a      	add	r2, r7
   866d6:	e743      	b.n	86560 <__udivmoddi4+0x15c>
   866d8:	4608      	mov	r0, r1
   866da:	e704      	b.n	864e6 <__udivmoddi4+0xe2>
   866dc:	3b02      	subs	r3, #2
   866de:	443c      	add	r4, r7
   866e0:	e72a      	b.n	86538 <__udivmoddi4+0x134>
   866e2:	45c3      	cmp	fp, r8
   866e4:	d3e7      	bcc.n	866b6 <__udivmoddi4+0x2b2>
   866e6:	463c      	mov	r4, r7
   866e8:	e7d1      	b.n	8668e <__udivmoddi4+0x28a>
   866ea:	4631      	mov	r1, r6
   866ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000866f0 <__aeabi_idiv0>:
   866f0:	4770      	bx	lr
   866f2:	bf00      	nop

000866f4 <can_bit_time>:
   866f4:	0308 0202 4b03 0209 0303 4302 030a 0303     .....K.....C....
   86704:	4603 040b 0303 4804 030c 0404 4304 040d     .F.....H.....C..
   86714:	0404 4d04 040e 0504 4004 040f 0505 4304     ...M.....@.....C
   86724:	0510 0505 4504 0611 0505 4704 0512 0606     .....E.....G....
   86734:	4304 0613 0606 4404 0714 0606 4604 0815     .C.....D.....F..
   86744:	0606 4704 0716 0707 4404 0817 0708 4604     ...G.....D.....F
   86754:	0718 0808 4304 0819 0808 4404               .....C.....D

00086760 <uart_serial_options>:
   86760:	c200 0001 0000 0000 0800 0000 0001 0000     ................
   86770:	6425 2520 0a64 0000 6577 636c 6d6f 0a65     %d %d...welcome.
   86780:	0000 0000 0043 0000                         ....C...

00086788 <_global_impure_ptr>:
   86788:	0408 2007                                   ... 

0008678c <zeroes.6993>:
   8678c:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
   8679c:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
   867ac:	0000 0000 3130 3332 3534 3736 3938 6261     ....0123456789ab
   867bc:	6463 6665 0000 0000 6e28 6c75 296c 0000     cdef....(null)..

000867cc <blanks.6992>:
   867cc:	2020 2020 2020 2020 2020 2020 2020 2020                     

000867dc <_init>:
   867dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   867de:	bf00      	nop
   867e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   867e2:	bc08      	pop	{r3}
   867e4:	469e      	mov	lr, r3
   867e6:	4770      	bx	lr

000867e8 <__init_array_start>:
   867e8:	00084a29 	.word	0x00084a29

000867ec <__frame_dummy_init_array_entry>:
   867ec:	00080119                                ....

000867f0 <_fini>:
   867f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   867f2:	bf00      	nop
   867f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   867f6:	bc08      	pop	{r3}
   867f8:	469e      	mov	lr, r3
   867fa:	4770      	bx	lr

000867fc <__fini_array_start>:
   867fc:	000800f5 	.word	0x000800f5
