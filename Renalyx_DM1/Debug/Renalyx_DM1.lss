
Renalyx_DM1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00028ddc  00080000  00080000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00001604  20070000  000a8ddc  00038000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          00001230  20071604  000aa3e0  00039604  2**2
                  ALLOC
  3 .stack        00002004  20072834  000ab610  00039604  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  00039604  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  0003962d  2**0
                  CONTENTS, READONLY
  6 .debug_info   000571d1  00000000  00000000  00039688  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00009f06  00000000  00000000  00090859  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0001107f  00000000  00000000  0009a75f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000022a8  00000000  00000000  000ab7de  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00001de8  00000000  00000000  000ada86  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00033410  00000000  00000000  000af86e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0005b6a9  00000000  00000000  000e2c7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0007467a  00000000  00000000  0013e327  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00008bc4  00000000  00000000  001b29a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20074838 	.word	0x20074838
   80004:	0009b311 	.word	0x0009b311
   80008:	0009b309 	.word	0x0009b309
   8000c:	0009b309 	.word	0x0009b309
   80010:	0009b309 	.word	0x0009b309
   80014:	0009b309 	.word	0x0009b309
   80018:	0009b309 	.word	0x0009b309
	...
   8002c:	0009b309 	.word	0x0009b309
   80030:	0009b309 	.word	0x0009b309
   80034:	00000000 	.word	0x00000000
   80038:	0009b309 	.word	0x0009b309
   8003c:	000972fd 	.word	0x000972fd
   80040:	0009b309 	.word	0x0009b309
   80044:	0009b309 	.word	0x0009b309
   80048:	0009b309 	.word	0x0009b309
   8004c:	0009b309 	.word	0x0009b309
   80050:	0009b309 	.word	0x0009b309
   80054:	0009b309 	.word	0x0009b309
   80058:	0009b309 	.word	0x0009b309
   8005c:	0009b309 	.word	0x0009b309
   80060:	0009724d 	.word	0x0009724d
   80064:	0009b309 	.word	0x0009b309
   80068:	00000000 	.word	0x00000000
   8006c:	0009ab21 	.word	0x0009ab21
   80070:	0009ab39 	.word	0x0009ab39
   80074:	0009ab51 	.word	0x0009ab51
   80078:	0009ab69 	.word	0x0009ab69
	...
   80084:	0009b309 	.word	0x0009b309
   80088:	0009b309 	.word	0x0009b309
   8008c:	0009b309 	.word	0x0009b309
   80090:	0009b309 	.word	0x0009b309
   80094:	0009b309 	.word	0x0009b309
   80098:	0009b309 	.word	0x0009b309
   8009c:	0009b309 	.word	0x0009b309
   800a0:	0009b309 	.word	0x0009b309
   800a4:	00000000 	.word	0x00000000
   800a8:	0009b309 	.word	0x0009b309
   800ac:	00097289 	.word	0x00097289
   800b0:	0009c1dd 	.word	0x0009c1dd
   800b4:	0009b309 	.word	0x0009b309
   800b8:	000972dd 	.word	0x000972dd
   800bc:	0009b309 	.word	0x0009b309
   800c0:	0009b309 	.word	0x0009b309
   800c4:	000972bd 	.word	0x000972bd
   800c8:	0009b309 	.word	0x0009b309
   800cc:	0009b309 	.word	0x0009b309
   800d0:	0009b309 	.word	0x0009b309
   800d4:	0009b309 	.word	0x0009b309
   800d8:	0009b309 	.word	0x0009b309
   800dc:	0009b309 	.word	0x0009b309
   800e0:	0009b309 	.word	0x0009b309
   800e4:	0009b309 	.word	0x0009b309
   800e8:	0009b309 	.word	0x0009b309
   800ec:	00096499 	.word	0x00096499
   800f0:	0009b309 	.word	0x0009b309

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20071604 	.word	0x20071604
   80110:	00000000 	.word	0x00000000
   80114:	000a8ddc 	.word	0x000a8ddc

00080118 <frame_dummy>:
   80118:	4b08      	ldr	r3, [pc, #32]	; (8013c <frame_dummy+0x24>)
   8011a:	b510      	push	{r4, lr}
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4808      	ldr	r0, [pc, #32]	; (80140 <frame_dummy+0x28>)
   80120:	4908      	ldr	r1, [pc, #32]	; (80144 <frame_dummy+0x2c>)
   80122:	f3af 8000 	nop.w
   80126:	4808      	ldr	r0, [pc, #32]	; (80148 <frame_dummy+0x30>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b903      	cbnz	r3, 8012e <frame_dummy+0x16>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	4b07      	ldr	r3, [pc, #28]	; (8014c <frame_dummy+0x34>)
   80130:	2b00      	cmp	r3, #0
   80132:	d0fb      	beq.n	8012c <frame_dummy+0x14>
   80134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80138:	4718      	bx	r3
   8013a:	bf00      	nop
   8013c:	00000000 	.word	0x00000000
   80140:	000a8ddc 	.word	0x000a8ddc
   80144:	20071608 	.word	0x20071608
   80148:	000a8ddc 	.word	0x000a8ddc
   8014c:	00000000 	.word	0x00000000

00080150 <osc_enable>:
#define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
   80150:	b580      	push	{r7, lr}
   80152:	b082      	sub	sp, #8
   80154:	af00      	add	r7, sp, #0
   80156:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80158:	687b      	ldr	r3, [r7, #4]
   8015a:	2b07      	cmp	r3, #7
   8015c:	d830      	bhi.n	801c0 <osc_enable+0x70>
   8015e:	a201      	add	r2, pc, #4	; (adr r2, 80164 <osc_enable+0x14>)
   80160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80164:	000801c1 	.word	0x000801c1
   80168:	00080185 	.word	0x00080185
   8016c:	0008018d 	.word	0x0008018d
   80170:	00080195 	.word	0x00080195
   80174:	0008019d 	.word	0x0008019d
   80178:	000801a5 	.word	0x000801a5
   8017c:	000801ad 	.word	0x000801ad
   80180:	000801b7 	.word	0x000801b7
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   80184:	2000      	movs	r0, #0
   80186:	4b10      	ldr	r3, [pc, #64]	; (801c8 <osc_enable+0x78>)
   80188:	4798      	blx	r3
		break;
   8018a:	e019      	b.n	801c0 <osc_enable+0x70>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   8018c:	2001      	movs	r0, #1
   8018e:	4b0e      	ldr	r3, [pc, #56]	; (801c8 <osc_enable+0x78>)
   80190:	4798      	blx	r3
		break;
   80192:	e015      	b.n	801c0 <osc_enable+0x70>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   80194:	2000      	movs	r0, #0
   80196:	4b0d      	ldr	r3, [pc, #52]	; (801cc <osc_enable+0x7c>)
   80198:	4798      	blx	r3
		break;
   8019a:	e011      	b.n	801c0 <osc_enable+0x70>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   8019c:	2010      	movs	r0, #16
   8019e:	4b0b      	ldr	r3, [pc, #44]	; (801cc <osc_enable+0x7c>)
   801a0:	4798      	blx	r3
		break;
   801a2:	e00d      	b.n	801c0 <osc_enable+0x70>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   801a4:	2020      	movs	r0, #32
   801a6:	4b09      	ldr	r3, [pc, #36]	; (801cc <osc_enable+0x7c>)
   801a8:	4798      	blx	r3
		break;
   801aa:	e009      	b.n	801c0 <osc_enable+0x70>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   801ac:	2000      	movs	r0, #0
   801ae:	213e      	movs	r1, #62	; 0x3e
   801b0:	4b07      	ldr	r3, [pc, #28]	; (801d0 <osc_enable+0x80>)
   801b2:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
   801b4:	e004      	b.n	801c0 <osc_enable+0x70>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
   801b6:	2001      	movs	r0, #1
   801b8:	213e      	movs	r1, #62	; 0x3e
   801ba:	4b05      	ldr	r3, [pc, #20]	; (801d0 <osc_enable+0x80>)
   801bc:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
   801be:	bf00      	nop
	}
}
   801c0:	3708      	adds	r7, #8
   801c2:	46bd      	mov	sp, r7
   801c4:	bd80      	pop	{r7, pc}
   801c6:	bf00      	nop
   801c8:	0009ac05 	.word	0x0009ac05
   801cc:	0009ac71 	.word	0x0009ac71
   801d0:	0009ad11 	.word	0x0009ad11

000801d4 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
   801d4:	b580      	push	{r7, lr}
   801d6:	b082      	sub	sp, #8
   801d8:	af00      	add	r7, sp, #0
   801da:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   801dc:	687b      	ldr	r3, [r7, #4]
   801de:	2b07      	cmp	r3, #7
   801e0:	d826      	bhi.n	80230 <osc_is_ready+0x5c>
   801e2:	a201      	add	r2, pc, #4	; (adr r2, 801e8 <osc_is_ready+0x14>)
   801e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   801e8:	00080209 	.word	0x00080209
   801ec:	0008020d 	.word	0x0008020d
   801f0:	0008020d 	.word	0x0008020d
   801f4:	0008021f 	.word	0x0008021f
   801f8:	0008021f 	.word	0x0008021f
   801fc:	0008021f 	.word	0x0008021f
   80200:	0008021f 	.word	0x0008021f
   80204:	0008021f 	.word	0x0008021f
	case OSC_SLCK_32K_RC:
		return 1;
   80208:	2301      	movs	r3, #1
   8020a:	e012      	b.n	80232 <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
   8020c:	4b0b      	ldr	r3, [pc, #44]	; (8023c <osc_is_ready+0x68>)
   8020e:	4798      	blx	r3
   80210:	4603      	mov	r3, r0
   80212:	2b00      	cmp	r3, #0
   80214:	bf14      	ite	ne
   80216:	2301      	movne	r3, #1
   80218:	2300      	moveq	r3, #0
   8021a:	b2db      	uxtb	r3, r3
   8021c:	e009      	b.n	80232 <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   8021e:	4b08      	ldr	r3, [pc, #32]	; (80240 <osc_is_ready+0x6c>)
   80220:	4798      	blx	r3
   80222:	4603      	mov	r3, r0
   80224:	2b00      	cmp	r3, #0
   80226:	bf14      	ite	ne
   80228:	2301      	movne	r3, #1
   8022a:	2300      	moveq	r3, #0
   8022c:	b2db      	uxtb	r3, r3
   8022e:	e000      	b.n	80232 <osc_is_ready+0x5e>
	}

	return 0;
   80230:	2300      	movs	r3, #0
}
   80232:	4618      	mov	r0, r3
   80234:	3708      	adds	r7, #8
   80236:	46bd      	mov	sp, r7
   80238:	bd80      	pop	{r7, pc}
   8023a:	bf00      	nop
   8023c:	0009ac3d 	.word	0x0009ac3d
   80240:	0009ad89 	.word	0x0009ad89

00080244 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   80244:	b480      	push	{r7}
   80246:	b083      	sub	sp, #12
   80248:	af00      	add	r7, sp, #0
   8024a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   8024c:	687b      	ldr	r3, [r7, #4]
   8024e:	2b07      	cmp	r3, #7
   80250:	d825      	bhi.n	8029e <osc_get_rate+0x5a>
   80252:	a201      	add	r2, pc, #4	; (adr r2, 80258 <osc_get_rate+0x14>)
   80254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80258:	00080279 	.word	0x00080279
   8025c:	0008027f 	.word	0x0008027f
   80260:	00080285 	.word	0x00080285
   80264:	0008028b 	.word	0x0008028b
   80268:	0008028f 	.word	0x0008028f
   8026c:	00080293 	.word	0x00080293
   80270:	00080297 	.word	0x00080297
   80274:	0008029b 	.word	0x0008029b
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   80278:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   8027c:	e010      	b.n	802a0 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   8027e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   80282:	e00d      	b.n	802a0 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   80284:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   80288:	e00a      	b.n	802a0 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   8028a:	4b08      	ldr	r3, [pc, #32]	; (802ac <osc_get_rate+0x68>)
   8028c:	e008      	b.n	802a0 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   8028e:	4b08      	ldr	r3, [pc, #32]	; (802b0 <osc_get_rate+0x6c>)
   80290:	e006      	b.n	802a0 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   80292:	4b08      	ldr	r3, [pc, #32]	; (802b4 <osc_get_rate+0x70>)
   80294:	e004      	b.n	802a0 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   80296:	4b07      	ldr	r3, [pc, #28]	; (802b4 <osc_get_rate+0x70>)
   80298:	e002      	b.n	802a0 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   8029a:	4b06      	ldr	r3, [pc, #24]	; (802b4 <osc_get_rate+0x70>)
   8029c:	e000      	b.n	802a0 <osc_get_rate+0x5c>
#endif
	}

	return 0;
   8029e:	2300      	movs	r3, #0
}
   802a0:	4618      	mov	r0, r3
   802a2:	370c      	adds	r7, #12
   802a4:	46bd      	mov	sp, r7
   802a6:	f85d 7b04 	ldr.w	r7, [sp], #4
   802aa:	4770      	bx	lr
   802ac:	003d0900 	.word	0x003d0900
   802b0:	007a1200 	.word	0x007a1200
   802b4:	00b71b00 	.word	0x00b71b00

000802b8 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
   802b8:	b580      	push	{r7, lr}
   802ba:	b082      	sub	sp, #8
   802bc:	af00      	add	r7, sp, #0
   802be:	4603      	mov	r3, r0
   802c0:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   802c2:	bf00      	nop
   802c4:	79fb      	ldrb	r3, [r7, #7]
   802c6:	4618      	mov	r0, r3
   802c8:	4b05      	ldr	r3, [pc, #20]	; (802e0 <osc_wait_ready+0x28>)
   802ca:	4798      	blx	r3
   802cc:	4603      	mov	r3, r0
   802ce:	f083 0301 	eor.w	r3, r3, #1
   802d2:	b2db      	uxtb	r3, r3
   802d4:	2b00      	cmp	r3, #0
   802d6:	d1f5      	bne.n	802c4 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
   802d8:	3708      	adds	r7, #8
   802da:	46bd      	mov	sp, r7
   802dc:	bd80      	pop	{r7, pc}
   802de:	bf00      	nop
   802e0:	000801d5 	.word	0x000801d5

000802e4 <pll_config_init>:
 * \note The SAM3X PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
   802e4:	b580      	push	{r7, lr}
   802e6:	b086      	sub	sp, #24
   802e8:	af00      	add	r7, sp, #0
   802ea:	60f8      	str	r0, [r7, #12]
   802ec:	607a      	str	r2, [r7, #4]
   802ee:	603b      	str	r3, [r7, #0]
   802f0:	460b      	mov	r3, r1
   802f2:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
   802f4:	687b      	ldr	r3, [r7, #4]
   802f6:	2b00      	cmp	r3, #0
   802f8:	d107      	bne.n	8030a <pll_config_init+0x26>
   802fa:	683b      	ldr	r3, [r7, #0]
   802fc:	2b00      	cmp	r3, #0
   802fe:	d104      	bne.n	8030a <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
   80300:	68fb      	ldr	r3, [r7, #12]
   80302:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   80306:	601a      	str	r2, [r3, #0]
   80308:	e019      	b.n	8033e <pll_config_init+0x5a>
	} else { /* PLLA */
		/* Calculate internal VCO frequency */
		vco_hz = osc_get_rate(e_src) / ul_div;
   8030a:	7afb      	ldrb	r3, [r7, #11]
   8030c:	4618      	mov	r0, r3
   8030e:	4b0d      	ldr	r3, [pc, #52]	; (80344 <pll_config_init+0x60>)
   80310:	4798      	blx	r3
   80312:	4602      	mov	r2, r0
   80314:	687b      	ldr	r3, [r7, #4]
   80316:	fbb2 f3f3 	udiv	r3, r2, r3
   8031a:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_INPUT_MIN_HZ);
		Assert(vco_hz <= PLL_INPUT_MAX_HZ);

		vco_hz *= ul_mul;
   8031c:	697b      	ldr	r3, [r7, #20]
   8031e:	683a      	ldr	r2, [r7, #0]
   80320:	fb02 f303 	mul.w	r3, r2, r3
   80324:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
		Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

		/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
   80326:	683b      	ldr	r3, [r7, #0]
   80328:	3b01      	subs	r3, #1
   8032a:	041a      	lsls	r2, r3, #16
   8032c:	4b06      	ldr	r3, [pc, #24]	; (80348 <pll_config_init+0x64>)
   8032e:	4013      	ands	r3, r2
   80330:	687a      	ldr	r2, [r7, #4]
   80332:	b2d2      	uxtb	r2, r2
   80334:	4313      	orrs	r3, r2
   80336:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
   8033a:	68fb      	ldr	r3, [r7, #12]
   8033c:	601a      	str	r2, [r3, #0]
	}
}
   8033e:	3718      	adds	r7, #24
   80340:	46bd      	mov	sp, r7
   80342:	bd80      	pop	{r7, pc}
   80344:	00080245 	.word	0x00080245
   80348:	07ff0000 	.word	0x07ff0000

0008034c <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
   8034c:	b580      	push	{r7, lr}
   8034e:	b082      	sub	sp, #8
   80350:	af00      	add	r7, sp, #0
   80352:	6078      	str	r0, [r7, #4]
   80354:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   80356:	683b      	ldr	r3, [r7, #0]
   80358:	2b00      	cmp	r3, #0
   8035a:	d108      	bne.n	8036e <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
   8035c:	4b08      	ldr	r3, [pc, #32]	; (80380 <pll_enable+0x34>)
   8035e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   80360:	4a08      	ldr	r2, [pc, #32]	; (80384 <pll_enable+0x38>)
   80362:	687b      	ldr	r3, [r7, #4]
   80364:	681b      	ldr	r3, [r3, #0]
   80366:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   8036a:	6293      	str	r3, [r2, #40]	; 0x28
   8036c:	e005      	b.n	8037a <pll_enable+0x2e>
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   8036e:	4a05      	ldr	r2, [pc, #20]	; (80384 <pll_enable+0x38>)
   80370:	687b      	ldr	r3, [r7, #4]
   80372:	681b      	ldr	r3, [r3, #0]
   80374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80378:	61d3      	str	r3, [r2, #28]
	}
}
   8037a:	3708      	adds	r7, #8
   8037c:	46bd      	mov	sp, r7
   8037e:	bd80      	pop	{r7, pc}
   80380:	0009ada5 	.word	0x0009ada5
   80384:	400e0600 	.word	0x400e0600

00080388 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
   80388:	b580      	push	{r7, lr}
   8038a:	b082      	sub	sp, #8
   8038c:	af00      	add	r7, sp, #0
   8038e:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   80390:	687b      	ldr	r3, [r7, #4]
   80392:	2b00      	cmp	r3, #0
   80394:	d103      	bne.n	8039e <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
   80396:	4b05      	ldr	r3, [pc, #20]	; (803ac <pll_is_locked+0x24>)
   80398:	4798      	blx	r3
   8039a:	4603      	mov	r3, r0
   8039c:	e002      	b.n	803a4 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
   8039e:	4b04      	ldr	r3, [pc, #16]	; (803b0 <pll_is_locked+0x28>)
   803a0:	4798      	blx	r3
   803a2:	4603      	mov	r3, r0
	}
}
   803a4:	4618      	mov	r0, r3
   803a6:	3708      	adds	r7, #8
   803a8:	46bd      	mov	sp, r7
   803aa:	bd80      	pop	{r7, pc}
   803ac:	0009adbd 	.word	0x0009adbd
   803b0:	0009add9 	.word	0x0009add9

000803b4 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
   803b4:	b580      	push	{r7, lr}
   803b6:	b082      	sub	sp, #8
   803b8:	af00      	add	r7, sp, #0
   803ba:	4603      	mov	r3, r0
   803bc:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   803be:	79fb      	ldrb	r3, [r7, #7]
   803c0:	3b03      	subs	r3, #3
   803c2:	2b04      	cmp	r3, #4
   803c4:	d808      	bhi.n	803d8 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
   803c6:	79fb      	ldrb	r3, [r7, #7]
   803c8:	4618      	mov	r0, r3
   803ca:	4b05      	ldr	r3, [pc, #20]	; (803e0 <pll_enable_source+0x2c>)
   803cc:	4798      	blx	r3
		osc_wait_ready(e_src);
   803ce:	79fb      	ldrb	r3, [r7, #7]
   803d0:	4618      	mov	r0, r3
   803d2:	4b04      	ldr	r3, [pc, #16]	; (803e4 <pll_enable_source+0x30>)
   803d4:	4798      	blx	r3
		break;
   803d6:	e000      	b.n	803da <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
   803d8:	bf00      	nop
	}
}
   803da:	3708      	adds	r7, #8
   803dc:	46bd      	mov	sp, r7
   803de:	bd80      	pop	{r7, pc}
   803e0:	00080151 	.word	0x00080151
   803e4:	000802b9 	.word	0x000802b9

000803e8 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
   803e8:	b580      	push	{r7, lr}
   803ea:	b082      	sub	sp, #8
   803ec:	af00      	add	r7, sp, #0
   803ee:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   803f0:	bf00      	nop
   803f2:	6878      	ldr	r0, [r7, #4]
   803f4:	4b04      	ldr	r3, [pc, #16]	; (80408 <pll_wait_for_lock+0x20>)
   803f6:	4798      	blx	r3
   803f8:	4603      	mov	r3, r0
   803fa:	2b00      	cmp	r3, #0
   803fc:	d0f9      	beq.n	803f2 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
   803fe:	2300      	movs	r3, #0
}
   80400:	4618      	mov	r0, r3
   80402:	3708      	adds	r7, #8
   80404:	46bd      	mov	sp, r7
   80406:	bd80      	pop	{r7, pc}
   80408:	00080389 	.word	0x00080389

0008040c <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   8040c:	b580      	push	{r7, lr}
   8040e:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   80410:	2006      	movs	r0, #6
   80412:	4b04      	ldr	r3, [pc, #16]	; (80424 <sysclk_get_main_hz+0x18>)
   80414:	4798      	blx	r3
   80416:	4602      	mov	r2, r0
   80418:	4613      	mov	r3, r2
   8041a:	00db      	lsls	r3, r3, #3
   8041c:	1a9b      	subs	r3, r3, r2
   8041e:	005b      	lsls	r3, r3, #1
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   80420:	4618      	mov	r0, r3
   80422:	bd80      	pop	{r7, pc}
   80424:	00080245 	.word	0x00080245

00080428 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   80428:	b580      	push	{r7, lr}
   8042a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   8042c:	4b02      	ldr	r3, [pc, #8]	; (80438 <sysclk_get_cpu_hz+0x10>)
   8042e:	4798      	blx	r3
   80430:	4603      	mov	r3, r0
   80432:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   80434:	4618      	mov	r0, r3
   80436:	bd80      	pop	{r7, pc}
   80438:	0008040d 	.word	0x0008040d

0008043c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   8043c:	b590      	push	{r4, r7, lr}
   8043e:	b083      	sub	sp, #12
   80440:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   80442:	4b10      	ldr	r3, [pc, #64]	; (80484 <sysclk_init+0x48>)
   80444:	4798      	blx	r3
   80446:	4603      	mov	r3, r0
   80448:	4618      	mov	r0, r3
   8044a:	4b0f      	ldr	r3, [pc, #60]	; (80488 <sysclk_init+0x4c>)
   8044c:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
   8044e:	2006      	movs	r0, #6
   80450:	4b0e      	ldr	r3, [pc, #56]	; (8048c <sysclk_init+0x50>)
   80452:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
   80454:	1d3b      	adds	r3, r7, #4
   80456:	4618      	mov	r0, r3
   80458:	2106      	movs	r1, #6
   8045a:	2201      	movs	r2, #1
   8045c:	230e      	movs	r3, #14
   8045e:	4c0c      	ldr	r4, [pc, #48]	; (80490 <sysclk_init+0x54>)
   80460:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
   80462:	1d3b      	adds	r3, r7, #4
   80464:	4618      	mov	r0, r3
   80466:	2100      	movs	r1, #0
   80468:	4b0a      	ldr	r3, [pc, #40]	; (80494 <sysclk_init+0x58>)
   8046a:	4798      	blx	r3
		pll_wait_for_lock(0);
   8046c:	2000      	movs	r0, #0
   8046e:	4b0a      	ldr	r3, [pc, #40]	; (80498 <sysclk_init+0x5c>)
   80470:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   80472:	2010      	movs	r0, #16
   80474:	4b09      	ldr	r3, [pc, #36]	; (8049c <sysclk_init+0x60>)
   80476:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   80478:	4b09      	ldr	r3, [pc, #36]	; (804a0 <sysclk_init+0x64>)
   8047a:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
   8047c:	370c      	adds	r7, #12
   8047e:	46bd      	mov	sp, r7
   80480:	bd90      	pop	{r4, r7, pc}
   80482:	bf00      	nop
   80484:	00080429 	.word	0x00080429
   80488:	0009b539 	.word	0x0009b539
   8048c:	000803b5 	.word	0x000803b5
   80490:	000802e5 	.word	0x000802e5
   80494:	0008034d 	.word	0x0008034d
   80498:	000803e9 	.word	0x000803e9
   8049c:	0009ab81 	.word	0x0009ab81
   804a0:	0009b3b9 	.word	0x0009b3b9

000804a4 <efc_init>:
 * \param ul_fws The number of wait states in cycle (no shift).
 *
 * \return 0 if successful.
 */
uint32_t efc_init(Efc *p_efc, uint32_t ul_access_mode, uint32_t ul_fws)
{
   804a4:	b580      	push	{r7, lr}
   804a6:	b084      	sub	sp, #16
   804a8:	af00      	add	r7, sp, #0
   804aa:	60f8      	str	r0, [r7, #12]
   804ac:	60b9      	str	r1, [r7, #8]
   804ae:	607a      	str	r2, [r7, #4]
	efc_write_fmr(p_efc, ul_access_mode | EEFC_FMR_FWS(ul_fws));
   804b0:	687b      	ldr	r3, [r7, #4]
   804b2:	021b      	lsls	r3, r3, #8
   804b4:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
   804b8:	68bb      	ldr	r3, [r7, #8]
   804ba:	4313      	orrs	r3, r2
   804bc:	68f8      	ldr	r0, [r7, #12]
   804be:	4619      	mov	r1, r3
   804c0:	4b03      	ldr	r3, [pc, #12]	; (804d0 <efc_init+0x2c>)
   804c2:	4798      	blx	r3
	return EFC_RC_OK;
   804c4:	2300      	movs	r3, #0
}
   804c6:	4618      	mov	r0, r3
   804c8:	3710      	adds	r7, #16
   804ca:	46bd      	mov	sp, r7
   804cc:	bd80      	pop	{r7, pc}
   804ce:	bf00      	nop
   804d0:	200700b9 	.word	0x200700b9

000804d4 <efc_set_wait_state>:
 *
 * \param p_efc Pointer to an EFC instance.
 * \param ul_fws The number of wait states in cycle (no shift).
 */
void efc_set_wait_state(Efc *p_efc, uint32_t ul_fws)
{
   804d4:	b580      	push	{r7, lr}
   804d6:	b084      	sub	sp, #16
   804d8:	af00      	add	r7, sp, #0
   804da:	6078      	str	r0, [r7, #4]
   804dc:	6039      	str	r1, [r7, #0]
	uint32_t ul_fmr = p_efc->EEFC_FMR & (~EEFC_FMR_FWS_Msk);
   804de:	687b      	ldr	r3, [r7, #4]
   804e0:	681b      	ldr	r3, [r3, #0]
   804e2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
   804e6:	60fb      	str	r3, [r7, #12]

	efc_write_fmr(p_efc, ul_fmr | EEFC_FMR_FWS(ul_fws));
   804e8:	683b      	ldr	r3, [r7, #0]
   804ea:	021b      	lsls	r3, r3, #8
   804ec:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
   804f0:	68fb      	ldr	r3, [r7, #12]
   804f2:	4313      	orrs	r3, r2
   804f4:	6878      	ldr	r0, [r7, #4]
   804f6:	4619      	mov	r1, r3
   804f8:	4b02      	ldr	r3, [pc, #8]	; (80504 <efc_set_wait_state+0x30>)
   804fa:	4798      	blx	r3
}
   804fc:	3710      	adds	r7, #16
   804fe:	46bd      	mov	sp, r7
   80500:	bd80      	pop	{r7, pc}
   80502:	bf00      	nop
   80504:	200700b9 	.word	0x200700b9

00080508 <efc_get_wait_state>:
 * \param p_efc Pointer to an EFC instance.
 *
 * \return The number of wait states in cycle (no shift).
 */
uint32_t efc_get_wait_state(Efc *p_efc)
{
   80508:	b480      	push	{r7}
   8050a:	b083      	sub	sp, #12
   8050c:	af00      	add	r7, sp, #0
   8050e:	6078      	str	r0, [r7, #4]
	return ((p_efc->EEFC_FMR & EEFC_FMR_FWS_Msk) >> EEFC_FMR_FWS_Pos);
   80510:	687b      	ldr	r3, [r7, #4]
   80512:	681b      	ldr	r3, [r3, #0]
   80514:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
   80518:	0a1b      	lsrs	r3, r3, #8
}
   8051a:	4618      	mov	r0, r3
   8051c:	370c      	adds	r7, #12
   8051e:	46bd      	mov	sp, r7
   80520:	f85d 7b04 	ldr.w	r7, [sp], #4
   80524:	4770      	bx	lr
   80526:	bf00      	nop

00080528 <efc_perform_command>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t efc_perform_command(Efc *p_efc, uint32_t ul_command,
		uint32_t ul_argument)
{
   80528:	b580      	push	{r7, lr}
   8052a:	b086      	sub	sp, #24
   8052c:	af00      	add	r7, sp, #0
   8052e:	60f8      	str	r0, [r7, #12]
   80530:	60b9      	str	r1, [r7, #8]
   80532:	607a      	str	r2, [r7, #4]
	/* Unique ID commands are not supported. */
	if (ul_command == EFC_FCMD_STUI || ul_command == EFC_FCMD_SPUI) {
   80534:	68bb      	ldr	r3, [r7, #8]
   80536:	2b0e      	cmp	r3, #14
   80538:	d002      	beq.n	80540 <efc_perform_command+0x18>
   8053a:	68bb      	ldr	r3, [r7, #8]
   8053c:	2b0f      	cmp	r3, #15
   8053e:	d102      	bne.n	80546 <efc_perform_command+0x1e>
		return EFC_RC_NOT_SUPPORT;
   80540:	f04f 33ff 	mov.w	r3, #4294967295
   80544:	e020      	b.n	80588 <efc_perform_command+0x60>
	}

#if (SAM3XA || SAM3U4)
	/* Use IAP function with 2 parameters in ROM. */
	static uint32_t(*iap_perform_command) (uint32_t, uint32_t);
	uint32_t ul_efc_nb = (p_efc == EFC0) ? 0 : 1;
   80546:	68fb      	ldr	r3, [r7, #12]
   80548:	4a11      	ldr	r2, [pc, #68]	; (80590 <efc_perform_command+0x68>)
   8054a:	4293      	cmp	r3, r2
   8054c:	bf14      	ite	ne
   8054e:	2301      	movne	r3, #1
   80550:	2300      	moveq	r3, #0
   80552:	b2db      	uxtb	r3, r3
   80554:	617b      	str	r3, [r7, #20]

	iap_perform_command =
			(uint32_t(*)(uint32_t, uint32_t))
			*((uint32_t *) CHIP_FLASH_IAP_ADDRESS);
   80556:	4b0f      	ldr	r3, [pc, #60]	; (80594 <efc_perform_command+0x6c>)
   80558:	681b      	ldr	r3, [r3, #0]
	/* Use IAP function with 2 parameters in ROM. */
	static uint32_t(*iap_perform_command) (uint32_t, uint32_t);
	uint32_t ul_efc_nb = (p_efc == EFC0) ? 0 : 1;

	iap_perform_command =
			(uint32_t(*)(uint32_t, uint32_t))
   8055a:	461a      	mov	r2, r3
#if (SAM3XA || SAM3U4)
	/* Use IAP function with 2 parameters in ROM. */
	static uint32_t(*iap_perform_command) (uint32_t, uint32_t);
	uint32_t ul_efc_nb = (p_efc == EFC0) ? 0 : 1;

	iap_perform_command =
   8055c:	4b0e      	ldr	r3, [pc, #56]	; (80598 <efc_perform_command+0x70>)
   8055e:	601a      	str	r2, [r3, #0]
			(uint32_t(*)(uint32_t, uint32_t))
			*((uint32_t *) CHIP_FLASH_IAP_ADDRESS);
	iap_perform_command(ul_efc_nb,
   80560:	4b0d      	ldr	r3, [pc, #52]	; (80598 <efc_perform_command+0x70>)
   80562:	681a      	ldr	r2, [r3, #0]
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(ul_argument) |
   80564:	687b      	ldr	r3, [r7, #4]
   80566:	021b      	lsls	r3, r3, #8
   80568:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   8056c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
			EEFC_FCR_FCMD(ul_command));
   80570:	68b9      	ldr	r1, [r7, #8]
   80572:	b2c9      	uxtb	r1, r1

	iap_perform_command =
			(uint32_t(*)(uint32_t, uint32_t))
			*((uint32_t *) CHIP_FLASH_IAP_ADDRESS);
	iap_perform_command(ul_efc_nb,
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(ul_argument) |
   80574:	430b      	orrs	r3, r1
	uint32_t ul_efc_nb = (p_efc == EFC0) ? 0 : 1;

	iap_perform_command =
			(uint32_t(*)(uint32_t, uint32_t))
			*((uint32_t *) CHIP_FLASH_IAP_ADDRESS);
	iap_perform_command(ul_efc_nb,
   80576:	f043 43b4 	orr.w	r3, r3, #1509949440	; 0x5a000000
   8057a:	6978      	ldr	r0, [r7, #20]
   8057c:	4619      	mov	r1, r3
   8057e:	4790      	blx	r2
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(ul_argument) |
			EEFC_FCR_FCMD(ul_command));
	return (p_efc->EEFC_FSR & EEFC_ERROR_FLAGS);
   80580:	68fb      	ldr	r3, [r7, #12]
   80582:	689b      	ldr	r3, [r3, #8]
   80584:	f003 0306 	and.w	r3, r3, #6
	return efc_perform_fcr(p_efc,
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(ul_argument) |
			EEFC_FCR_FCMD(ul_command));

#endif
}
   80588:	4618      	mov	r0, r3
   8058a:	3718      	adds	r7, #24
   8058c:	46bd      	mov	sp, r7
   8058e:	bd80      	pop	{r7, pc}
   80590:	400e0a00 	.word	0x400e0a00
   80594:	00100008 	.word	0x00100008
   80598:	20071620 	.word	0x20071620

0008059c <efc_get_result>:
 * \param p_efc Pointer to an EFC instance.
 *
 * \return The result of the last executed command.
 */
uint32_t efc_get_result(Efc *p_efc)
{
   8059c:	b480      	push	{r7}
   8059e:	b083      	sub	sp, #12
   805a0:	af00      	add	r7, sp, #0
   805a2:	6078      	str	r0, [r7, #4]
	return p_efc->EEFC_FRR;
   805a4:	687b      	ldr	r3, [r7, #4]
   805a6:	68db      	ldr	r3, [r3, #12]
}
   805a8:	4618      	mov	r0, r3
   805aa:	370c      	adds	r7, #12
   805ac:	46bd      	mov	sp, r7
   805ae:	f85d 7b04 	ldr.w	r7, [sp], #4
   805b2:	4770      	bx	lr

000805b4 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   805b4:	b580      	push	{r7, lr}
   805b6:	b082      	sub	sp, #8
   805b8:	af00      	add	r7, sp, #0
   805ba:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   805bc:	6878      	ldr	r0, [r7, #4]
   805be:	4b02      	ldr	r3, [pc, #8]	; (805c8 <sysclk_enable_peripheral_clock+0x14>)
   805c0:	4798      	blx	r3
}
   805c2:	3708      	adds	r7, #8
   805c4:	46bd      	mov	sp, r7
   805c6:	bd80      	pop	{r7, pc}
   805c8:	0009adf5 	.word	0x0009adf5

000805cc <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
   805cc:	b580      	push	{r7, lr}
   805ce:	b082      	sub	sp, #8
   805d0:	af00      	add	r7, sp, #0
   805d2:	6078      	str	r0, [r7, #4]
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM)
	if (p_spi == SPI0) {
   805d4:	687b      	ldr	r3, [r7, #4]
   805d6:	4a04      	ldr	r2, [pc, #16]	; (805e8 <spi_enable_clock+0x1c>)
   805d8:	4293      	cmp	r3, r2
   805da:	d102      	bne.n	805e2 <spi_enable_clock+0x16>
		sysclk_enable_peripheral_clock(ID_SPI0);
   805dc:	2018      	movs	r0, #24
   805de:	4b03      	ldr	r3, [pc, #12]	; (805ec <spi_enable_clock+0x20>)
   805e0:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
   805e2:	3708      	adds	r7, #8
   805e4:	46bd      	mov	sp, r7
   805e6:	bd80      	pop	{r7, pc}
   805e8:	40008000 	.word	0x40008000
   805ec:	000805b5 	.word	0x000805b5

000805f0 <twi_enable_master_mode>:
 * \brief Enable TWI master mode.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_enable_master_mode(Twi *p_twi)
{
   805f0:	b480      	push	{r7}
   805f2:	b083      	sub	sp, #12
   805f4:	af00      	add	r7, sp, #0
   805f6:	6078      	str	r0, [r7, #4]
	/* Set Master Disable bit and Slave Disable bit */
	p_twi->TWI_CR = TWI_CR_MSDIS;
   805f8:	687b      	ldr	r3, [r7, #4]
   805fa:	2208      	movs	r2, #8
   805fc:	601a      	str	r2, [r3, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
   805fe:	687b      	ldr	r3, [r7, #4]
   80600:	2220      	movs	r2, #32
   80602:	601a      	str	r2, [r3, #0]

	/* Set Master Enable bit */
	p_twi->TWI_CR = TWI_CR_MSEN;
   80604:	687b      	ldr	r3, [r7, #4]
   80606:	2204      	movs	r2, #4
   80608:	601a      	str	r2, [r3, #0]
}
   8060a:	370c      	adds	r7, #12
   8060c:	46bd      	mov	sp, r7
   8060e:	f85d 7b04 	ldr.w	r7, [sp], #4
   80612:	4770      	bx	lr

00080614 <twi_master_init>:
 * \param p_opt Options for initializing the TWI module (see \ref twi_options_t).
 *
 * \return TWI_SUCCESS if initialization is complete, error code otherwise.
 */
uint32_t twi_master_init(Twi *p_twi, const twi_options_t *p_opt)
{
   80614:	b580      	push	{r7, lr}
   80616:	b084      	sub	sp, #16
   80618:	af00      	add	r7, sp, #0
   8061a:	6078      	str	r0, [r7, #4]
   8061c:	6039      	str	r1, [r7, #0]
	uint32_t status = TWI_SUCCESS;
   8061e:	2300      	movs	r3, #0
   80620:	60fb      	str	r3, [r7, #12]

	/* Disable TWI interrupts */
	p_twi->TWI_IDR = ~0UL;
   80622:	687b      	ldr	r3, [r7, #4]
   80624:	f04f 32ff 	mov.w	r2, #4294967295
   80628:	629a      	str	r2, [r3, #40]	; 0x28

	/* Dummy read in status register */
	p_twi->TWI_SR;
   8062a:	687b      	ldr	r3, [r7, #4]
   8062c:	6a1b      	ldr	r3, [r3, #32]

	/* Reset TWI peripheral */
	twi_reset(p_twi);
   8062e:	6878      	ldr	r0, [r7, #4]
   80630:	4b0f      	ldr	r3, [pc, #60]	; (80670 <twi_master_init+0x5c>)
   80632:	4798      	blx	r3

	twi_enable_master_mode(p_twi);
   80634:	6878      	ldr	r0, [r7, #4]
   80636:	4b0f      	ldr	r3, [pc, #60]	; (80674 <twi_master_init+0x60>)
   80638:	4798      	blx	r3

	/* Select the speed */
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
   8063a:	683b      	ldr	r3, [r7, #0]
   8063c:	685a      	ldr	r2, [r3, #4]
   8063e:	683b      	ldr	r3, [r7, #0]
   80640:	681b      	ldr	r3, [r3, #0]
   80642:	6878      	ldr	r0, [r7, #4]
   80644:	4611      	mov	r1, r2
   80646:	461a      	mov	r2, r3
   80648:	4b0b      	ldr	r3, [pc, #44]	; (80678 <twi_master_init+0x64>)
   8064a:	4798      	blx	r3
   8064c:	4603      	mov	r3, r0
   8064e:	2b01      	cmp	r3, #1
   80650:	d101      	bne.n	80656 <twi_master_init+0x42>
		/* The desired speed setting is rejected */
		status = TWI_INVALID_ARGUMENT;
   80652:	2301      	movs	r3, #1
   80654:	60fb      	str	r3, [r7, #12]
	}

	if (p_opt->smbus == 1) {
   80656:	683b      	ldr	r3, [r7, #0]
   80658:	7a5b      	ldrb	r3, [r3, #9]
   8065a:	2b01      	cmp	r3, #1
   8065c:	d102      	bne.n	80664 <twi_master_init+0x50>
		p_twi->TWI_CR = TWI_CR_QUICK;
   8065e:	687b      	ldr	r3, [r7, #4]
   80660:	2240      	movs	r2, #64	; 0x40
   80662:	601a      	str	r2, [r3, #0]
	}

	return status;
   80664:	68fb      	ldr	r3, [r7, #12]
}
   80666:	4618      	mov	r0, r3
   80668:	3710      	adds	r7, #16
   8066a:	46bd      	mov	sp, r7
   8066c:	bd80      	pop	{r7, pc}
   8066e:	bf00      	nop
   80670:	000806f9 	.word	0x000806f9
   80674:	000805f1 	.word	0x000805f1
   80678:	0008067d 	.word	0x0008067d

0008067c <twi_set_speed>:
 *
 * \retval PASS New speed setting is accepted.
 * \retval FAIL New speed setting is rejected.
 */
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
{
   8067c:	b480      	push	{r7}
   8067e:	b087      	sub	sp, #28
   80680:	af00      	add	r7, sp, #0
   80682:	60f8      	str	r0, [r7, #12]
   80684:	60b9      	str	r1, [r7, #8]
   80686:	607a      	str	r2, [r7, #4]
	uint32_t ckdiv = 0;
   80688:	2300      	movs	r3, #0
   8068a:	617b      	str	r3, [r7, #20]
	uint32_t c_lh_div;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
   8068c:	68bb      	ldr	r3, [r7, #8]
   8068e:	4a18      	ldr	r2, [pc, #96]	; (806f0 <twi_set_speed+0x74>)
   80690:	4293      	cmp	r3, r2
   80692:	d901      	bls.n	80698 <twi_set_speed+0x1c>
		return FAIL;
   80694:	2301      	movs	r3, #1
   80696:	e024      	b.n	806e2 <twi_set_speed+0x66>
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   80698:	68bb      	ldr	r3, [r7, #8]
   8069a:	005b      	lsls	r3, r3, #1
   8069c:	687a      	ldr	r2, [r7, #4]
   8069e:	fbb2 f3f3 	udiv	r3, r2, r3
   806a2:	3b04      	subs	r3, #4
   806a4:	613b      	str	r3, [r7, #16]

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   806a6:	e005      	b.n	806b4 <twi_set_speed+0x38>
		/* Increase clock divider */
		ckdiv++;
   806a8:	697b      	ldr	r3, [r7, #20]
   806aa:	3301      	adds	r3, #1
   806ac:	617b      	str	r3, [r7, #20]
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
   806ae:	693b      	ldr	r3, [r7, #16]
   806b0:	085b      	lsrs	r3, r3, #1
   806b2:	613b      	str	r3, [r7, #16]
	}

	c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;

	/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
	while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   806b4:	693b      	ldr	r3, [r7, #16]
   806b6:	2bff      	cmp	r3, #255	; 0xff
   806b8:	d902      	bls.n	806c0 <twi_set_speed+0x44>
   806ba:	697b      	ldr	r3, [r7, #20]
   806bc:	2b06      	cmp	r3, #6
   806be:	d9f3      	bls.n	806a8 <twi_set_speed+0x2c>
		/* Increase clock divider */
		ckdiv++;
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
	}
	c_lh_div_backup = c_lh_div;
   806c0:	4a0c      	ldr	r2, [pc, #48]	; (806f4 <twi_set_speed+0x78>)
   806c2:	693b      	ldr	r3, [r7, #16]
   806c4:	6013      	str	r3, [r2, #0]
	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   806c6:	693b      	ldr	r3, [r7, #16]
   806c8:	b2da      	uxtb	r2, r3
   806ca:	693b      	ldr	r3, [r7, #16]
   806cc:	021b      	lsls	r3, r3, #8
   806ce:	b29b      	uxth	r3, r3
   806d0:	431a      	orrs	r2, r3
			TWI_CWGR_CKDIV(ckdiv);
   806d2:	697b      	ldr	r3, [r7, #20]
   806d4:	041b      	lsls	r3, r3, #16
   806d6:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
		c_lh_div /= TWI_CLK_DIVIDER;
	}
	c_lh_div_backup = c_lh_div;
	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   806da:	431a      	orrs	r2, r3
		/* Divide cldiv value */
		c_lh_div /= TWI_CLK_DIVIDER;
	}
	c_lh_div_backup = c_lh_div;
	/* set clock waveform generator register */
	p_twi->TWI_CWGR =
   806dc:	68fb      	ldr	r3, [r7, #12]
   806de:	611a      	str	r2, [r3, #16]
			TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
			TWI_CWGR_CKDIV(ckdiv);

	return PASS;
   806e0:	2300      	movs	r3, #0
}
   806e2:	4618      	mov	r0, r3
   806e4:	371c      	adds	r7, #28
   806e6:	46bd      	mov	sp, r7
   806e8:	f85d 7b04 	ldr.w	r7, [sp], #4
   806ec:	4770      	bx	lr
   806ee:	bf00      	nop
   806f0:	00061a80 	.word	0x00061a80
   806f4:	20071624 	.word	0x20071624

000806f8 <twi_reset>:
 * \brief Reset TWI.
 *
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
   806f8:	b480      	push	{r7}
   806fa:	b083      	sub	sp, #12
   806fc:	af00      	add	r7, sp, #0
   806fe:	6078      	str	r0, [r7, #4]
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
   80700:	687b      	ldr	r3, [r7, #4]
   80702:	2280      	movs	r2, #128	; 0x80
   80704:	601a      	str	r2, [r3, #0]
	p_twi->TWI_RHR;
   80706:	687b      	ldr	r3, [r7, #4]
   80708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
   8070a:	370c      	adds	r7, #12
   8070c:	46bd      	mov	sp, r7
   8070e:	f85d 7b04 	ldr.w	r7, [sp], #4
   80712:	4770      	bx	lr

00080714 <translate_address>:
 * \param pus_page The first page accessed.
 * \param pus_offset Byte offset in the first page.
 */
static void translate_address(Efc **pp_efc, uint32_t ul_addr,
		uint16_t *pus_page, uint16_t *pus_offset)
{
   80714:	b480      	push	{r7}
   80716:	b087      	sub	sp, #28
   80718:	af00      	add	r7, sp, #0
   8071a:	60f8      	str	r0, [r7, #12]
   8071c:	60b9      	str	r1, [r7, #8]
   8071e:	607a      	str	r2, [r7, #4]
   80720:	603b      	str	r3, [r7, #0]
	Efc *p_efc;
	uint16_t us_page;
	uint16_t us_offset;

#if (SAM3XA || SAM3U4)
	if (ul_addr >= IFLASH1_ADDR) {
   80722:	68bb      	ldr	r3, [r7, #8]
   80724:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
   80728:	d30b      	bcc.n	80742 <translate_address+0x2e>
		p_efc = EFC1;
   8072a:	4b17      	ldr	r3, [pc, #92]	; (80788 <translate_address+0x74>)
   8072c:	617b      	str	r3, [r7, #20]
		us_page = (ul_addr - IFLASH1_ADDR) / IFLASH1_PAGE_SIZE;
   8072e:	68bb      	ldr	r3, [r7, #8]
   80730:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
   80734:	0a1b      	lsrs	r3, r3, #8
   80736:	827b      	strh	r3, [r7, #18]
		us_offset = (ul_addr - IFLASH1_ADDR) % IFLASH1_PAGE_SIZE;
   80738:	68bb      	ldr	r3, [r7, #8]
   8073a:	b29b      	uxth	r3, r3
   8073c:	b2db      	uxtb	r3, r3
   8073e:	823b      	strh	r3, [r7, #16]
   80740:	e00a      	b.n	80758 <translate_address+0x44>
	} else {
		p_efc = EFC0;
   80742:	4b12      	ldr	r3, [pc, #72]	; (8078c <translate_address+0x78>)
   80744:	617b      	str	r3, [r7, #20]
		us_page = (ul_addr - IFLASH0_ADDR) / IFLASH0_PAGE_SIZE;
   80746:	68bb      	ldr	r3, [r7, #8]
   80748:	f5a3 2300 	sub.w	r3, r3, #524288	; 0x80000
   8074c:	0a1b      	lsrs	r3, r3, #8
   8074e:	827b      	strh	r3, [r7, #18]
		us_offset = (ul_addr - IFLASH0_ADDR) % IFLASH0_PAGE_SIZE;
   80750:	68bb      	ldr	r3, [r7, #8]
   80752:	b29b      	uxth	r3, r3
   80754:	b2db      	uxtb	r3, r3
   80756:	823b      	strh	r3, [r7, #16]
	us_page = (ul_addr - IFLASH_ADDR) / IFLASH_PAGE_SIZE;
	us_offset = (ul_addr - IFLASH_ADDR) % IFLASH_PAGE_SIZE;
#endif

	/* Store values */
	if (pp_efc) {
   80758:	68fb      	ldr	r3, [r7, #12]
   8075a:	2b00      	cmp	r3, #0
   8075c:	d002      	beq.n	80764 <translate_address+0x50>
		*pp_efc = p_efc;
   8075e:	68fb      	ldr	r3, [r7, #12]
   80760:	697a      	ldr	r2, [r7, #20]
   80762:	601a      	str	r2, [r3, #0]
	}

	if (pus_page) {
   80764:	687b      	ldr	r3, [r7, #4]
   80766:	2b00      	cmp	r3, #0
   80768:	d002      	beq.n	80770 <translate_address+0x5c>
		*pus_page = us_page;
   8076a:	687b      	ldr	r3, [r7, #4]
   8076c:	8a7a      	ldrh	r2, [r7, #18]
   8076e:	801a      	strh	r2, [r3, #0]
	}

	if (pus_offset) {
   80770:	683b      	ldr	r3, [r7, #0]
   80772:	2b00      	cmp	r3, #0
   80774:	d002      	beq.n	8077c <translate_address+0x68>
		*pus_offset = us_offset;
   80776:	683b      	ldr	r3, [r7, #0]
   80778:	8a3a      	ldrh	r2, [r7, #16]
   8077a:	801a      	strh	r2, [r3, #0]
	}
}
   8077c:	371c      	adds	r7, #28
   8077e:	46bd      	mov	sp, r7
   80780:	f85d 7b04 	ldr.w	r7, [sp], #4
   80784:	4770      	bx	lr
   80786:	bf00      	nop
   80788:	400e0c00 	.word	0x400e0c00
   8078c:	400e0a00 	.word	0x400e0a00

00080790 <compute_address>:
 * \param us_offset Byte offset inside page.
 * \param pul_addr Computed address (optional).
 */
static void compute_address(Efc *p_efc, uint16_t us_page, uint16_t us_offset,
		uint32_t *pul_addr)
{
   80790:	b480      	push	{r7}
   80792:	b087      	sub	sp, #28
   80794:	af00      	add	r7, sp, #0
   80796:	60f8      	str	r0, [r7, #12]
   80798:	607b      	str	r3, [r7, #4]
   8079a:	460b      	mov	r3, r1
   8079c:	817b      	strh	r3, [r7, #10]
   8079e:	4613      	mov	r3, r2
   807a0:	813b      	strh	r3, [r7, #8]
		} else {
			ul_addr = IFLASH1_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset;
		}
	}
#else
	ul_addr = (p_efc == EFC0) ?
   807a2:	68fb      	ldr	r3, [r7, #12]
   807a4:	4a0d      	ldr	r2, [pc, #52]	; (807dc <compute_address+0x4c>)
   807a6:	4293      	cmp	r3, r2
   807a8:	d106      	bne.n	807b8 <compute_address+0x28>
			IFLASH0_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset :
   807aa:	897b      	ldrh	r3, [r7, #10]
   807ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
   807b0:	021a      	lsls	r2, r3, #8
		} else {
			ul_addr = IFLASH1_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset;
		}
	}
#else
	ul_addr = (p_efc == EFC0) ?
   807b2:	893b      	ldrh	r3, [r7, #8]
   807b4:	4413      	add	r3, r2
   807b6:	e005      	b.n	807c4 <compute_address+0x34>
			IFLASH0_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset :
			IFLASH1_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset;
   807b8:	897b      	ldrh	r3, [r7, #10]
   807ba:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
   807be:	021a      	lsls	r2, r3, #8
		} else {
			ul_addr = IFLASH1_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset;
		}
	}
#else
	ul_addr = (p_efc == EFC0) ?
   807c0:	893b      	ldrh	r3, [r7, #8]
   807c2:	4413      	add	r3, r2
   807c4:	617b      	str	r3, [r7, #20]
	/* Compute address */
	ul_addr = IFLASH_ADDR + us_page * IFLASH_PAGE_SIZE + us_offset;
#endif

	/* Store result */
	if (pul_addr != NULL) {
   807c6:	687b      	ldr	r3, [r7, #4]
   807c8:	2b00      	cmp	r3, #0
   807ca:	d002      	beq.n	807d2 <compute_address+0x42>
		*pul_addr = ul_addr;
   807cc:	687b      	ldr	r3, [r7, #4]
   807ce:	697a      	ldr	r2, [r7, #20]
   807d0:	601a      	str	r2, [r3, #0]
	}
}
   807d2:	371c      	adds	r7, #28
   807d4:	46bd      	mov	sp, r7
   807d6:	f85d 7b04 	ldr.w	r7, [sp], #4
   807da:	4770      	bx	lr
   807dc:	400e0a00 	.word	0x400e0a00

000807e0 <compute_lock_range>:
 * \param pul_actual_start Actual start address of lock range.
 * \param pul_actual_end Actual end address of lock range.
 */
static void compute_lock_range(uint32_t ul_start, uint32_t ul_end,
		uint32_t *pul_actual_start, uint32_t *pul_actual_end)
{
   807e0:	b480      	push	{r7}
   807e2:	b087      	sub	sp, #28
   807e4:	af00      	add	r7, sp, #0
   807e6:	60f8      	str	r0, [r7, #12]
   807e8:	60b9      	str	r1, [r7, #8]
   807ea:	607a      	str	r2, [r7, #4]
   807ec:	603b      	str	r3, [r7, #0]
	uint32_t ul_actual_start, ul_actual_end;

	ul_actual_start = ul_start - (ul_start % IFLASH_LOCK_REGION_SIZE);
   807ee:	68fb      	ldr	r3, [r7, #12]
   807f0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
   807f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   807f8:	617b      	str	r3, [r7, #20]
	ul_actual_end = ul_end - (ul_end % IFLASH_LOCK_REGION_SIZE) +
   807fa:	68bb      	ldr	r3, [r7, #8]
   807fc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
   80800:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   80804:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
   80808:	333f      	adds	r3, #63	; 0x3f
   8080a:	613b      	str	r3, [r7, #16]
			IFLASH_LOCK_REGION_SIZE - 1;

	if (pul_actual_start) {
   8080c:	687b      	ldr	r3, [r7, #4]
   8080e:	2b00      	cmp	r3, #0
   80810:	d002      	beq.n	80818 <compute_lock_range+0x38>
		*pul_actual_start = ul_actual_start;
   80812:	687b      	ldr	r3, [r7, #4]
   80814:	697a      	ldr	r2, [r7, #20]
   80816:	601a      	str	r2, [r3, #0]
	}

	if (pul_actual_end) {
   80818:	683b      	ldr	r3, [r7, #0]
   8081a:	2b00      	cmp	r3, #0
   8081c:	d002      	beq.n	80824 <compute_lock_range+0x44>
		*pul_actual_end = ul_actual_end;
   8081e:	683b      	ldr	r3, [r7, #0]
   80820:	693a      	ldr	r2, [r7, #16]
   80822:	601a      	str	r2, [r3, #0]
	}
}
   80824:	371c      	adds	r7, #28
   80826:	46bd      	mov	sp, r7
   80828:	f85d 7b04 	ldr.w	r7, [sp], #4
   8082c:	4770      	bx	lr
   8082e:	bf00      	nop

00080830 <flash_init>:
 * \param ul_fws The number of wait states in cycle (no shift).
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_init(uint32_t ul_mode, uint32_t ul_fws)
{
   80830:	b580      	push	{r7, lr}
   80832:	b082      	sub	sp, #8
   80834:	af00      	add	r7, sp, #0
   80836:	6078      	str	r0, [r7, #4]
   80838:	6039      	str	r1, [r7, #0]
	efc_init(EFC, ul_mode, ul_fws);
   8083a:	4807      	ldr	r0, [pc, #28]	; (80858 <flash_init+0x28>)
   8083c:	6879      	ldr	r1, [r7, #4]
   8083e:	683a      	ldr	r2, [r7, #0]
   80840:	4b06      	ldr	r3, [pc, #24]	; (8085c <flash_init+0x2c>)
   80842:	4798      	blx	r3

#ifdef EFC1
	efc_init(EFC1, ul_mode, ul_fws);
   80844:	4806      	ldr	r0, [pc, #24]	; (80860 <flash_init+0x30>)
   80846:	6879      	ldr	r1, [r7, #4]
   80848:	683a      	ldr	r2, [r7, #0]
   8084a:	4b04      	ldr	r3, [pc, #16]	; (8085c <flash_init+0x2c>)
   8084c:	4798      	blx	r3
#endif

	return FLASH_RC_OK;
   8084e:	2300      	movs	r3, #0
}
   80850:	4618      	mov	r0, r3
   80852:	3708      	adds	r7, #8
   80854:	46bd      	mov	sp, r7
   80856:	bd80      	pop	{r7, pc}
   80858:	400e0a00 	.word	0x400e0a00
   8085c:	000804a5 	.word	0x000804a5
   80860:	400e0c00 	.word	0x400e0c00

00080864 <flash_write>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t flash_write(uint32_t ul_address, const void *p_buffer,
		uint32_t ul_size, uint32_t ul_erase_flag)
{
   80864:	b590      	push	{r4, r7, lr}
   80866:	b08f      	sub	sp, #60	; 0x3c
   80868:	af00      	add	r7, sp, #0
   8086a:	60f8      	str	r0, [r7, #12]
   8086c:	60b9      	str	r1, [r7, #8]
   8086e:	607a      	str	r2, [r7, #4]
   80870:	603b      	str	r3, [r7, #0]
	uint32_t ul_page_addr;
	uint16_t us_padding;
	uint32_t ul_error;
	uint32_t ul_idx;
	uint32_t *p_aligned_dest;
	uint8_t *puc_page_buffer = (uint8_t *) gs_ul_page_buffer;
   80872:	4b4d      	ldr	r3, [pc, #308]	; (809a8 <flash_write+0x144>)
   80874:	62bb      	str	r3, [r7, #40]	; 0x28

	translate_address(&p_efc, ul_address, &us_page, &us_offset);
   80876:	f107 0118 	add.w	r1, r7, #24
   8087a:	f107 0216 	add.w	r2, r7, #22
   8087e:	f107 0314 	add.w	r3, r7, #20
   80882:	4608      	mov	r0, r1
   80884:	68f9      	ldr	r1, [r7, #12]
   80886:	4c49      	ldr	r4, [pc, #292]	; (809ac <flash_write+0x148>)
   80888:	47a0      	blx	r4

	/* According to the errata, set the wait state value to 6. */
	ul_fws_temp = efc_get_wait_state(p_efc);
   8088a:	69bb      	ldr	r3, [r7, #24]
   8088c:	4618      	mov	r0, r3
   8088e:	4b48      	ldr	r3, [pc, #288]	; (809b0 <flash_write+0x14c>)
   80890:	4798      	blx	r3
   80892:	6278      	str	r0, [r7, #36]	; 0x24
	efc_set_wait_state(p_efc, 6);
   80894:	69bb      	ldr	r3, [r7, #24]
   80896:	4618      	mov	r0, r3
   80898:	2106      	movs	r1, #6
   8089a:	4b46      	ldr	r3, [pc, #280]	; (809b4 <flash_write+0x150>)
   8089c:	4798      	blx	r3

	/* Write all pages */
	while (ul_size > 0) {
   8089e:	e076      	b.n	8098e <flash_write+0x12a>
		/* Copy data in temporary buffer to avoid alignment problems. */
		writeSize = Min((uint32_t) IFLASH_PAGE_SIZE - us_offset,
   808a0:	8abb      	ldrh	r3, [r7, #20]
   808a2:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
   808a6:	687b      	ldr	r3, [r7, #4]
   808a8:	4293      	cmp	r3, r2
   808aa:	bf28      	it	cs
   808ac:	4613      	movcs	r3, r2
   808ae:	623b      	str	r3, [r7, #32]
				ul_size);
		compute_address(p_efc, us_page, 0, &ul_page_addr);
   808b0:	69b9      	ldr	r1, [r7, #24]
   808b2:	8afa      	ldrh	r2, [r7, #22]
   808b4:	f107 0310 	add.w	r3, r7, #16
   808b8:	4608      	mov	r0, r1
   808ba:	4611      	mov	r1, r2
   808bc:	2200      	movs	r2, #0
   808be:	4c3e      	ldr	r4, [pc, #248]	; (809b8 <flash_write+0x154>)
   808c0:	47a0      	blx	r4
		us_padding = IFLASH_PAGE_SIZE - us_offset - writeSize;
   808c2:	8abb      	ldrh	r3, [r7, #20]
   808c4:	425b      	negs	r3, r3
   808c6:	b29a      	uxth	r2, r3
   808c8:	6a3b      	ldr	r3, [r7, #32]
   808ca:	b29b      	uxth	r3, r3
   808cc:	1ad3      	subs	r3, r2, r3
   808ce:	b29b      	uxth	r3, r3
   808d0:	f503 7380 	add.w	r3, r3, #256	; 0x100
   808d4:	83fb      	strh	r3, [r7, #30]

		/* Pre-buffer data */
		memcpy(puc_page_buffer, (void *)ul_page_addr, us_offset);
   808d6:	693b      	ldr	r3, [r7, #16]
   808d8:	461a      	mov	r2, r3
   808da:	8abb      	ldrh	r3, [r7, #20]
   808dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   808de:	4611      	mov	r1, r2
   808e0:	461a      	mov	r2, r3
   808e2:	4b36      	ldr	r3, [pc, #216]	; (809bc <flash_write+0x158>)
   808e4:	4798      	blx	r3

		/* Buffer data */
		memcpy(puc_page_buffer + us_offset, p_buffer, writeSize);
   808e6:	8abb      	ldrh	r3, [r7, #20]
   808e8:	461a      	mov	r2, r3
   808ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
   808ec:	4413      	add	r3, r2
   808ee:	4618      	mov	r0, r3
   808f0:	68b9      	ldr	r1, [r7, #8]
   808f2:	6a3a      	ldr	r2, [r7, #32]
   808f4:	4b31      	ldr	r3, [pc, #196]	; (809bc <flash_write+0x158>)
   808f6:	4798      	blx	r3

		/* Post-buffer data */
		memcpy(puc_page_buffer + us_offset + writeSize,
   808f8:	8abb      	ldrh	r3, [r7, #20]
   808fa:	461a      	mov	r2, r3
   808fc:	6a3b      	ldr	r3, [r7, #32]
   808fe:	4413      	add	r3, r2
   80900:	6aba      	ldr	r2, [r7, #40]	; 0x28
   80902:	18d1      	adds	r1, r2, r3
				(void *)(ul_page_addr + us_offset + writeSize),
   80904:	8abb      	ldrh	r3, [r7, #20]
   80906:	461a      	mov	r2, r3
   80908:	693b      	ldr	r3, [r7, #16]
   8090a:	441a      	add	r2, r3
   8090c:	6a3b      	ldr	r3, [r7, #32]
   8090e:	4413      	add	r3, r2

		/* Buffer data */
		memcpy(puc_page_buffer + us_offset, p_buffer, writeSize);

		/* Post-buffer data */
		memcpy(puc_page_buffer + us_offset + writeSize,
   80910:	461a      	mov	r2, r3
   80912:	8bfb      	ldrh	r3, [r7, #30]
   80914:	4608      	mov	r0, r1
   80916:	4611      	mov	r1, r2
   80918:	461a      	mov	r2, r3
   8091a:	4b28      	ldr	r3, [pc, #160]	; (809bc <flash_write+0x158>)
   8091c:	4798      	blx	r3

		/* Write page.
		 * Writing 8-bit and 16-bit data is not allowed and may lead to
		 * unpredictable data corruption.
		 */
		p_aligned_dest = (uint32_t *) ul_page_addr;
   8091e:	693b      	ldr	r3, [r7, #16]
   80920:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / sizeof(uint32_t));
   80922:	2300      	movs	r3, #0
   80924:	633b      	str	r3, [r7, #48]	; 0x30
   80926:	e00a      	b.n	8093e <flash_write+0xda>
				++ul_idx) {
			*p_aligned_dest++ = gs_ul_page_buffer[ul_idx];
   80928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   8092a:	1d1a      	adds	r2, r3, #4
   8092c:	62fa      	str	r2, [r7, #44]	; 0x2c
   8092e:	491e      	ldr	r1, [pc, #120]	; (809a8 <flash_write+0x144>)
   80930:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   80932:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
   80936:	601a      	str	r2, [r3, #0]
		 * Writing 8-bit and 16-bit data is not allowed and may lead to
		 * unpredictable data corruption.
		 */
		p_aligned_dest = (uint32_t *) ul_page_addr;
		for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / sizeof(uint32_t));
				++ul_idx) {
   80938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   8093a:	3301      	adds	r3, #1
   8093c:	633b      	str	r3, [r7, #48]	; 0x30
		/* Write page.
		 * Writing 8-bit and 16-bit data is not allowed and may lead to
		 * unpredictable data corruption.
		 */
		p_aligned_dest = (uint32_t *) ul_page_addr;
		for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / sizeof(uint32_t));
   8093e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   80940:	2b3f      	cmp	r3, #63	; 0x3f
   80942:	d9f1      	bls.n	80928 <flash_write+0xc4>
				++ul_idx) {
			*p_aligned_dest++ = gs_ul_page_buffer[ul_idx];
		}

		if (ul_erase_flag) {
   80944:	683b      	ldr	r3, [r7, #0]
   80946:	2b00      	cmp	r3, #0
   80948:	d007      	beq.n	8095a <flash_write+0xf6>
			ul_error = efc_perform_command(p_efc, EFC_FCMD_EWP,
   8094a:	69bb      	ldr	r3, [r7, #24]
   8094c:	8afa      	ldrh	r2, [r7, #22]
   8094e:	4618      	mov	r0, r3
   80950:	2103      	movs	r1, #3
   80952:	4b1b      	ldr	r3, [pc, #108]	; (809c0 <flash_write+0x15c>)
   80954:	4798      	blx	r3
   80956:	6378      	str	r0, [r7, #52]	; 0x34
   80958:	e006      	b.n	80968 <flash_write+0x104>
					us_page);
		} else {
			ul_error = efc_perform_command(p_efc, EFC_FCMD_WP,
   8095a:	69bb      	ldr	r3, [r7, #24]
   8095c:	8afa      	ldrh	r2, [r7, #22]
   8095e:	4618      	mov	r0, r3
   80960:	2101      	movs	r1, #1
   80962:	4b17      	ldr	r3, [pc, #92]	; (809c0 <flash_write+0x15c>)
   80964:	4798      	blx	r3
   80966:	6378      	str	r0, [r7, #52]	; 0x34
					us_page);
		}

		if (ul_error) {
   80968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   8096a:	2b00      	cmp	r3, #0
   8096c:	d001      	beq.n	80972 <flash_write+0x10e>
			return ul_error;
   8096e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   80970:	e016      	b.n	809a0 <flash_write+0x13c>
		}

		/* Progression */
		p_buffer = (void *)((uint32_t) p_buffer + writeSize);
   80972:	68ba      	ldr	r2, [r7, #8]
   80974:	6a3b      	ldr	r3, [r7, #32]
   80976:	4413      	add	r3, r2
   80978:	60bb      	str	r3, [r7, #8]
		ul_size -= writeSize;
   8097a:	687a      	ldr	r2, [r7, #4]
   8097c:	6a3b      	ldr	r3, [r7, #32]
   8097e:	1ad3      	subs	r3, r2, r3
   80980:	607b      	str	r3, [r7, #4]
		us_page++;
   80982:	8afb      	ldrh	r3, [r7, #22]
   80984:	3301      	adds	r3, #1
   80986:	b29b      	uxth	r3, r3
   80988:	82fb      	strh	r3, [r7, #22]
		us_offset = 0;
   8098a:	2300      	movs	r3, #0
   8098c:	82bb      	strh	r3, [r7, #20]
	/* According to the errata, set the wait state value to 6. */
	ul_fws_temp = efc_get_wait_state(p_efc);
	efc_set_wait_state(p_efc, 6);

	/* Write all pages */
	while (ul_size > 0) {
   8098e:	687b      	ldr	r3, [r7, #4]
   80990:	2b00      	cmp	r3, #0
   80992:	d185      	bne.n	808a0 <flash_write+0x3c>
		us_page++;
		us_offset = 0;
	}

	/* According to the errata, restore the wait state value. */
	efc_set_wait_state(p_efc, ul_fws_temp);
   80994:	69bb      	ldr	r3, [r7, #24]
   80996:	4618      	mov	r0, r3
   80998:	6a79      	ldr	r1, [r7, #36]	; 0x24
   8099a:	4b06      	ldr	r3, [pc, #24]	; (809b4 <flash_write+0x150>)
   8099c:	4798      	blx	r3

	return FLASH_RC_OK;
   8099e:	2300      	movs	r3, #0
}
   809a0:	4618      	mov	r0, r3
   809a2:	373c      	adds	r7, #60	; 0x3c
   809a4:	46bd      	mov	sp, r7
   809a6:	bd90      	pop	{r4, r7, pc}
   809a8:	20071628 	.word	0x20071628
   809ac:	00080715 	.word	0x00080715
   809b0:	00080509 	.word	0x00080509
   809b4:	000804d5 	.word	0x000804d5
   809b8:	00080791 	.word	0x00080791
   809bc:	000a6dc1 	.word	0x000a6dc1
   809c0:	00080529 	.word	0x00080529

000809c4 <flash_lock>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t flash_lock(uint32_t ul_start, uint32_t ul_end,
		uint32_t *pul_actual_start, uint32_t *pul_actual_end)
{
   809c4:	b590      	push	{r4, r7, lr}
   809c6:	b08b      	sub	sp, #44	; 0x2c
   809c8:	af00      	add	r7, sp, #0
   809ca:	60f8      	str	r0, [r7, #12]
   809cc:	60b9      	str	r1, [r7, #8]
   809ce:	607a      	str	r2, [r7, #4]
   809d0:	603b      	str	r3, [r7, #0]
	Efc *p_efc;
	uint32_t ul_actual_start, ul_actual_end;
	uint16_t us_start_page, us_end_page;
	uint32_t ul_error;
	uint16_t us_num_pages_in_region =
   809d2:	2340      	movs	r3, #64	; 0x40
   809d4:	84fb      	strh	r3, [r7, #38]	; 0x26
			IFLASH_LOCK_REGION_SIZE / IFLASH_PAGE_SIZE;

	/* Compute actual lock range and store it */
	compute_lock_range(ul_start, ul_end, &ul_actual_start, &ul_actual_end);
   809d6:	f107 0218 	add.w	r2, r7, #24
   809da:	f107 0314 	add.w	r3, r7, #20
   809de:	68f8      	ldr	r0, [r7, #12]
   809e0:	68b9      	ldr	r1, [r7, #8]
   809e2:	4c1e      	ldr	r4, [pc, #120]	; (80a5c <flash_lock+0x98>)
   809e4:	47a0      	blx	r4

	if (pul_actual_start != NULL) {
   809e6:	687b      	ldr	r3, [r7, #4]
   809e8:	2b00      	cmp	r3, #0
   809ea:	d002      	beq.n	809f2 <flash_lock+0x2e>
		*pul_actual_start = ul_actual_start;
   809ec:	69ba      	ldr	r2, [r7, #24]
   809ee:	687b      	ldr	r3, [r7, #4]
   809f0:	601a      	str	r2, [r3, #0]
	}

	if (pul_actual_end != NULL) {
   809f2:	683b      	ldr	r3, [r7, #0]
   809f4:	2b00      	cmp	r3, #0
   809f6:	d002      	beq.n	809fe <flash_lock+0x3a>
		*pul_actual_end = ul_actual_end;
   809f8:	697a      	ldr	r2, [r7, #20]
   809fa:	683b      	ldr	r3, [r7, #0]
   809fc:	601a      	str	r2, [r3, #0]
	}

	/* Compute page numbers */
	translate_address(&p_efc, ul_actual_start, &us_start_page, 0);
   809fe:	69ba      	ldr	r2, [r7, #24]
   80a00:	f107 011c 	add.w	r1, r7, #28
   80a04:	f107 0312 	add.w	r3, r7, #18
   80a08:	4608      	mov	r0, r1
   80a0a:	4611      	mov	r1, r2
   80a0c:	461a      	mov	r2, r3
   80a0e:	2300      	movs	r3, #0
   80a10:	4c13      	ldr	r4, [pc, #76]	; (80a60 <flash_lock+0x9c>)
   80a12:	47a0      	blx	r4
	translate_address(0, ul_actual_end, &us_end_page, 0);
   80a14:	697a      	ldr	r2, [r7, #20]
   80a16:	f107 0310 	add.w	r3, r7, #16
   80a1a:	2000      	movs	r0, #0
   80a1c:	4611      	mov	r1, r2
   80a1e:	461a      	mov	r2, r3
   80a20:	2300      	movs	r3, #0
   80a22:	4c0f      	ldr	r4, [pc, #60]	; (80a60 <flash_lock+0x9c>)
   80a24:	47a0      	blx	r4

	/* Lock all pages */
	while (us_start_page < us_end_page) {
   80a26:	e010      	b.n	80a4a <flash_lock+0x86>
		ul_error = efc_perform_command(p_efc, EFC_FCMD_SLB, us_start_page);
   80a28:	69fb      	ldr	r3, [r7, #28]
   80a2a:	8a7a      	ldrh	r2, [r7, #18]
   80a2c:	4618      	mov	r0, r3
   80a2e:	2108      	movs	r1, #8
   80a30:	4b0c      	ldr	r3, [pc, #48]	; (80a64 <flash_lock+0xa0>)
   80a32:	4798      	blx	r3
   80a34:	6238      	str	r0, [r7, #32]

		if (ul_error) {
   80a36:	6a3b      	ldr	r3, [r7, #32]
   80a38:	2b00      	cmp	r3, #0
   80a3a:	d001      	beq.n	80a40 <flash_lock+0x7c>
			return ul_error;
   80a3c:	6a3b      	ldr	r3, [r7, #32]
   80a3e:	e009      	b.n	80a54 <flash_lock+0x90>
		}
		us_start_page += us_num_pages_in_region;
   80a40:	8a7a      	ldrh	r2, [r7, #18]
   80a42:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
   80a44:	4413      	add	r3, r2
   80a46:	b29b      	uxth	r3, r3
   80a48:	827b      	strh	r3, [r7, #18]
	/* Compute page numbers */
	translate_address(&p_efc, ul_actual_start, &us_start_page, 0);
	translate_address(0, ul_actual_end, &us_end_page, 0);

	/* Lock all pages */
	while (us_start_page < us_end_page) {
   80a4a:	8a7a      	ldrh	r2, [r7, #18]
   80a4c:	8a3b      	ldrh	r3, [r7, #16]
   80a4e:	429a      	cmp	r2, r3
   80a50:	d3ea      	bcc.n	80a28 <flash_lock+0x64>
			return ul_error;
		}
		us_start_page += us_num_pages_in_region;
	}

	return FLASH_RC_OK;
   80a52:	2300      	movs	r3, #0
}
   80a54:	4618      	mov	r0, r3
   80a56:	372c      	adds	r7, #44	; 0x2c
   80a58:	46bd      	mov	sp, r7
   80a5a:	bd90      	pop	{r4, r7, pc}
   80a5c:	000807e1 	.word	0x000807e1
   80a60:	00080715 	.word	0x00080715
   80a64:	00080529 	.word	0x00080529

00080a68 <flash_unlock>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t flash_unlock(uint32_t ul_start, uint32_t ul_end,
		uint32_t *pul_actual_start, uint32_t *pul_actual_end)
{
   80a68:	b590      	push	{r4, r7, lr}
   80a6a:	b08b      	sub	sp, #44	; 0x2c
   80a6c:	af00      	add	r7, sp, #0
   80a6e:	60f8      	str	r0, [r7, #12]
   80a70:	60b9      	str	r1, [r7, #8]
   80a72:	607a      	str	r2, [r7, #4]
   80a74:	603b      	str	r3, [r7, #0]
	Efc *p_efc;
	uint32_t ul_actual_start, ul_actual_end;
	uint16_t us_start_page, us_end_page;
	uint32_t ul_error;
	uint16_t us_num_pages_in_region =
   80a76:	2340      	movs	r3, #64	; 0x40
   80a78:	84fb      	strh	r3, [r7, #38]	; 0x26
			IFLASH_LOCK_REGION_SIZE / IFLASH_PAGE_SIZE;

	/* Compute actual unlock range and store it */
	compute_lock_range(ul_start, ul_end, &ul_actual_start, &ul_actual_end);
   80a7a:	f107 0218 	add.w	r2, r7, #24
   80a7e:	f107 0314 	add.w	r3, r7, #20
   80a82:	68f8      	ldr	r0, [r7, #12]
   80a84:	68b9      	ldr	r1, [r7, #8]
   80a86:	4c1e      	ldr	r4, [pc, #120]	; (80b00 <flash_unlock+0x98>)
   80a88:	47a0      	blx	r4
	if (pul_actual_start != NULL) {
   80a8a:	687b      	ldr	r3, [r7, #4]
   80a8c:	2b00      	cmp	r3, #0
   80a8e:	d002      	beq.n	80a96 <flash_unlock+0x2e>
		*pul_actual_start = ul_actual_start;
   80a90:	69ba      	ldr	r2, [r7, #24]
   80a92:	687b      	ldr	r3, [r7, #4]
   80a94:	601a      	str	r2, [r3, #0]
	}
	if (pul_actual_end != NULL) {
   80a96:	683b      	ldr	r3, [r7, #0]
   80a98:	2b00      	cmp	r3, #0
   80a9a:	d002      	beq.n	80aa2 <flash_unlock+0x3a>
		*pul_actual_end = ul_actual_end;
   80a9c:	697a      	ldr	r2, [r7, #20]
   80a9e:	683b      	ldr	r3, [r7, #0]
   80aa0:	601a      	str	r2, [r3, #0]
	}

	/* Compute page numbers */
	translate_address(&p_efc, ul_actual_start, &us_start_page, 0);
   80aa2:	69ba      	ldr	r2, [r7, #24]
   80aa4:	f107 011c 	add.w	r1, r7, #28
   80aa8:	f107 0312 	add.w	r3, r7, #18
   80aac:	4608      	mov	r0, r1
   80aae:	4611      	mov	r1, r2
   80ab0:	461a      	mov	r2, r3
   80ab2:	2300      	movs	r3, #0
   80ab4:	4c13      	ldr	r4, [pc, #76]	; (80b04 <flash_unlock+0x9c>)
   80ab6:	47a0      	blx	r4
	translate_address(0, ul_actual_end, &us_end_page, 0);
   80ab8:	697a      	ldr	r2, [r7, #20]
   80aba:	f107 0310 	add.w	r3, r7, #16
   80abe:	2000      	movs	r0, #0
   80ac0:	4611      	mov	r1, r2
   80ac2:	461a      	mov	r2, r3
   80ac4:	2300      	movs	r3, #0
   80ac6:	4c0f      	ldr	r4, [pc, #60]	; (80b04 <flash_unlock+0x9c>)
   80ac8:	47a0      	blx	r4

	/* Unlock all pages */
	while (us_start_page < us_end_page) {
   80aca:	e010      	b.n	80aee <flash_unlock+0x86>
		ul_error = efc_perform_command(p_efc, EFC_FCMD_CLB,
   80acc:	69fb      	ldr	r3, [r7, #28]
   80ace:	8a7a      	ldrh	r2, [r7, #18]
   80ad0:	4618      	mov	r0, r3
   80ad2:	2109      	movs	r1, #9
   80ad4:	4b0c      	ldr	r3, [pc, #48]	; (80b08 <flash_unlock+0xa0>)
   80ad6:	4798      	blx	r3
   80ad8:	6238      	str	r0, [r7, #32]
				us_start_page);
		if (ul_error) {
   80ada:	6a3b      	ldr	r3, [r7, #32]
   80adc:	2b00      	cmp	r3, #0
   80ade:	d001      	beq.n	80ae4 <flash_unlock+0x7c>
			return ul_error;
   80ae0:	6a3b      	ldr	r3, [r7, #32]
   80ae2:	e009      	b.n	80af8 <flash_unlock+0x90>
		}
		us_start_page += us_num_pages_in_region;
   80ae4:	8a7a      	ldrh	r2, [r7, #18]
   80ae6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
   80ae8:	4413      	add	r3, r2
   80aea:	b29b      	uxth	r3, r3
   80aec:	827b      	strh	r3, [r7, #18]
	/* Compute page numbers */
	translate_address(&p_efc, ul_actual_start, &us_start_page, 0);
	translate_address(0, ul_actual_end, &us_end_page, 0);

	/* Unlock all pages */
	while (us_start_page < us_end_page) {
   80aee:	8a7a      	ldrh	r2, [r7, #18]
   80af0:	8a3b      	ldrh	r3, [r7, #16]
   80af2:	429a      	cmp	r2, r3
   80af4:	d3ea      	bcc.n	80acc <flash_unlock+0x64>
			return ul_error;
		}
		us_start_page += us_num_pages_in_region;
	}

	return FLASH_RC_OK;
   80af6:	2300      	movs	r3, #0
}
   80af8:	4618      	mov	r0, r3
   80afa:	372c      	adds	r7, #44	; 0x2c
   80afc:	46bd      	mov	sp, r7
   80afe:	bd90      	pop	{r4, r7, pc}
   80b00:	000807e1 	.word	0x000807e1
   80b04:	00080715 	.word	0x00080715
   80b08:	00080529 	.word	0x00080529

00080b0c <flash_set_gpnvm>:
 * \param ul_gpnvm GPNVM bit index.
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_set_gpnvm(uint32_t ul_gpnvm)
{
   80b0c:	b580      	push	{r7, lr}
   80b0e:	b082      	sub	sp, #8
   80b10:	af00      	add	r7, sp, #0
   80b12:	6078      	str	r0, [r7, #4]
	if (ul_gpnvm >= GPNVM_NUM_MAX) {
   80b14:	687b      	ldr	r3, [r7, #4]
   80b16:	2b02      	cmp	r3, #2
   80b18:	d901      	bls.n	80b1e <flash_set_gpnvm+0x12>
		return FLASH_RC_INVALID;
   80b1a:	2311      	movs	r3, #17
   80b1c:	e012      	b.n	80b44 <flash_set_gpnvm+0x38>
	}

	if (FLASH_RC_YES == flash_is_gpnvm_set(ul_gpnvm)) {
   80b1e:	6878      	ldr	r0, [r7, #4]
   80b20:	4b0a      	ldr	r3, [pc, #40]	; (80b4c <flash_set_gpnvm+0x40>)
   80b22:	4798      	blx	r3
   80b24:	4603      	mov	r3, r0
   80b26:	2b01      	cmp	r3, #1
   80b28:	d101      	bne.n	80b2e <flash_set_gpnvm+0x22>
		return FLASH_RC_OK;
   80b2a:	2300      	movs	r3, #0
   80b2c:	e00a      	b.n	80b44 <flash_set_gpnvm+0x38>
	}

	if (EFC_RC_OK == efc_perform_command(EFC, EFC_FCMD_SGPB, ul_gpnvm)) {
   80b2e:	4808      	ldr	r0, [pc, #32]	; (80b50 <flash_set_gpnvm+0x44>)
   80b30:	210b      	movs	r1, #11
   80b32:	687a      	ldr	r2, [r7, #4]
   80b34:	4b07      	ldr	r3, [pc, #28]	; (80b54 <flash_set_gpnvm+0x48>)
   80b36:	4798      	blx	r3
   80b38:	4603      	mov	r3, r0
   80b3a:	2b00      	cmp	r3, #0
   80b3c:	d101      	bne.n	80b42 <flash_set_gpnvm+0x36>
		return FLASH_RC_OK;
   80b3e:	2300      	movs	r3, #0
   80b40:	e000      	b.n	80b44 <flash_set_gpnvm+0x38>
	}

	return FLASH_RC_ERROR;
   80b42:	2310      	movs	r3, #16
}
   80b44:	4618      	mov	r0, r3
   80b46:	3708      	adds	r7, #8
   80b48:	46bd      	mov	sp, r7
   80b4a:	bd80      	pop	{r7, pc}
   80b4c:	00080b59 	.word	0x00080b59
   80b50:	400e0a00 	.word	0x400e0a00
   80b54:	00080529 	.word	0x00080529

00080b58 <flash_is_gpnvm_set>:
 * \retval 1 If the given GPNVM bit is currently set.
 * \retval 0 If the given GPNVM bit is currently cleared.
 * otherwise returns an error code.
 */
uint32_t flash_is_gpnvm_set(uint32_t ul_gpnvm)
{
   80b58:	b580      	push	{r7, lr}
   80b5a:	b084      	sub	sp, #16
   80b5c:	af00      	add	r7, sp, #0
   80b5e:	6078      	str	r0, [r7, #4]
	uint32_t ul_gpnvm_bits;

	if (ul_gpnvm >= GPNVM_NUM_MAX) {
   80b60:	687b      	ldr	r3, [r7, #4]
   80b62:	2b02      	cmp	r3, #2
   80b64:	d901      	bls.n	80b6a <flash_is_gpnvm_set+0x12>
		return FLASH_RC_INVALID;
   80b66:	2311      	movs	r3, #17
   80b68:	e019      	b.n	80b9e <flash_is_gpnvm_set+0x46>
	}

	if (EFC_RC_OK != efc_perform_command(EFC, EFC_FCMD_GGPB, 0)) {
   80b6a:	480f      	ldr	r0, [pc, #60]	; (80ba8 <flash_is_gpnvm_set+0x50>)
   80b6c:	210d      	movs	r1, #13
   80b6e:	2200      	movs	r2, #0
   80b70:	4b0e      	ldr	r3, [pc, #56]	; (80bac <flash_is_gpnvm_set+0x54>)
   80b72:	4798      	blx	r3
   80b74:	4603      	mov	r3, r0
   80b76:	2b00      	cmp	r3, #0
   80b78:	d001      	beq.n	80b7e <flash_is_gpnvm_set+0x26>
		return FLASH_RC_ERROR;
   80b7a:	2310      	movs	r3, #16
   80b7c:	e00f      	b.n	80b9e <flash_is_gpnvm_set+0x46>
	}

	ul_gpnvm_bits = efc_get_result(EFC);
   80b7e:	480a      	ldr	r0, [pc, #40]	; (80ba8 <flash_is_gpnvm_set+0x50>)
   80b80:	4b0b      	ldr	r3, [pc, #44]	; (80bb0 <flash_is_gpnvm_set+0x58>)
   80b82:	4798      	blx	r3
   80b84:	60f8      	str	r0, [r7, #12]
	if (ul_gpnvm_bits & (1 << ul_gpnvm)) {
   80b86:	687b      	ldr	r3, [r7, #4]
   80b88:	2201      	movs	r2, #1
   80b8a:	fa02 f303 	lsl.w	r3, r2, r3
   80b8e:	461a      	mov	r2, r3
   80b90:	68fb      	ldr	r3, [r7, #12]
   80b92:	4013      	ands	r3, r2
   80b94:	2b00      	cmp	r3, #0
   80b96:	d001      	beq.n	80b9c <flash_is_gpnvm_set+0x44>
		return FLASH_RC_YES;
   80b98:	2301      	movs	r3, #1
   80b9a:	e000      	b.n	80b9e <flash_is_gpnvm_set+0x46>
	}

	return FLASH_RC_NO;
   80b9c:	2300      	movs	r3, #0
}
   80b9e:	4618      	mov	r0, r3
   80ba0:	3710      	adds	r7, #16
   80ba2:	46bd      	mov	sp, r7
   80ba4:	bd80      	pop	{r7, pc}
   80ba6:	bf00      	nop
   80ba8:	400e0a00 	.word	0x400e0a00
   80bac:	00080529 	.word	0x00080529
   80bb0:	0008059d 	.word	0x0008059d

00080bb4 <flash_enable_security_bit>:
 * \brief Set security bit.
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_enable_security_bit(void)
{
   80bb4:	b580      	push	{r7, lr}
   80bb6:	af00      	add	r7, sp, #0
	return flash_set_gpnvm(0);
   80bb8:	2000      	movs	r0, #0
   80bba:	4b02      	ldr	r3, [pc, #8]	; (80bc4 <flash_enable_security_bit+0x10>)
   80bbc:	4798      	blx	r3
   80bbe:	4603      	mov	r3, r0
}
   80bc0:	4618      	mov	r0, r3
   80bc2:	bd80      	pop	{r7, pc}
   80bc4:	00080b0d 	.word	0x00080b0d

00080bc8 <Cl_Init_Alarms>:
 * \return CL_OK on success. 
 * \Globals used : 
 */
  
Cl_ReturnCodeType Cl_Init_Alarms(void)
{
   80bc8:	b580      	push	{r7, lr}
   80bca:	b082      	sub	sp, #8
   80bcc:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType cl_Alarm_retVal = CL_ERROR;
   80bce:	2304      	movs	r3, #4
   80bd0:	71fb      	strb	r3, [r7, #7]
	cl_Alarm_retVal = Cl_LoadAlarmThresholdTable();
   80bd2:	4b10      	ldr	r3, [pc, #64]	; (80c14 <Cl_Init_Alarms+0x4c>)
   80bd4:	4798      	blx	r3
   80bd6:	4603      	mov	r3, r0
   80bd8:	71fb      	strb	r3, [r7, #7]
	ASSERT_ERROR(cl_Alarm_retVal)
   80bda:	79fb      	ldrb	r3, [r7, #7]
   80bdc:	2b00      	cmp	r3, #0
   80bde:	d001      	beq.n	80be4 <Cl_Init_Alarms+0x1c>
   80be0:	4b0d      	ldr	r3, [pc, #52]	; (80c18 <Cl_Init_Alarms+0x50>)
   80be2:	4798      	blx	r3
	cl_Alarm_retVal = Cl_Temperature_Controller_Init();
   80be4:	4b0d      	ldr	r3, [pc, #52]	; (80c1c <Cl_Init_Alarms+0x54>)
   80be6:	4798      	blx	r3
   80be8:	4603      	mov	r3, r0
   80bea:	71fb      	strb	r3, [r7, #7]
	ASSERT_ERROR(cl_Alarm_retVal)
   80bec:	79fb      	ldrb	r3, [r7, #7]
   80bee:	2b00      	cmp	r3, #0
   80bf0:	d001      	beq.n	80bf6 <Cl_Init_Alarms+0x2e>
   80bf2:	4b09      	ldr	r3, [pc, #36]	; (80c18 <Cl_Init_Alarms+0x50>)
   80bf4:	4798      	blx	r3
	cl_Alarm_retVal = Cl_Pressure_Controller_Init();
   80bf6:	4b0a      	ldr	r3, [pc, #40]	; (80c20 <Cl_Init_Alarms+0x58>)
   80bf8:	4798      	blx	r3
   80bfa:	4603      	mov	r3, r0
   80bfc:	71fb      	strb	r3, [r7, #7]
	ASSERT_ERROR(cl_Alarm_retVal)
   80bfe:	79fb      	ldrb	r3, [r7, #7]
   80c00:	2b00      	cmp	r3, #0
   80c02:	d001      	beq.n	80c08 <Cl_Init_Alarms+0x40>
   80c04:	4b04      	ldr	r3, [pc, #16]	; (80c18 <Cl_Init_Alarms+0x50>)
   80c06:	4798      	blx	r3
	return CL_OK;
   80c08:	2300      	movs	r3, #0
	
}
   80c0a:	4618      	mov	r0, r3
   80c0c:	3708      	adds	r7, #8
   80c0e:	46bd      	mov	sp, r7
   80c10:	bd80      	pop	{r7, pc}
   80c12:	bf00      	nop
   80c14:	00080c25 	.word	0x00080c25
   80c18:	00088fc1 	.word	0x00088fc1
   80c1c:	0009025d 	.word	0x0009025d
   80c20:	0008fd81 	.word	0x0008fd81

00080c24 <Cl_LoadAlarmThresholdTable>:
 * \return CL_OK on success. 
 * \Globals used : 
 */
  
Cl_ReturnCodeType Cl_LoadAlarmThresholdTable(void)
{
   80c24:	b480      	push	{r7}
   80c26:	af00      	add	r7, sp, #0
		Cl_alarmThresholdTable.cond_low_threshold = 13.0;
   80c28:	4b3c      	ldr	r3, [pc, #240]	; (80d1c <Cl_LoadAlarmThresholdTable+0xf8>)
   80c2a:	220d      	movs	r2, #13
   80c2c:	801a      	strh	r2, [r3, #0]
		Cl_alarmThresholdTable.cond_high_threshold = 14.5;
   80c2e:	4b3b      	ldr	r3, [pc, #236]	; (80d1c <Cl_LoadAlarmThresholdTable+0xf8>)
   80c30:	220e      	movs	r2, #14
   80c32:	805a      	strh	r2, [r3, #2]
		Cl_alarmThresholdTable.cond_dac_high_threshold = 0;
   80c34:	4b39      	ldr	r3, [pc, #228]	; (80d1c <Cl_LoadAlarmThresholdTable+0xf8>)
   80c36:	2200      	movs	r2, #0
   80c38:	809a      	strh	r2, [r3, #4]
		Cl_alarmThresholdTable.cond_dac_low_threshold = 10000;
   80c3a:	4b38      	ldr	r3, [pc, #224]	; (80d1c <Cl_LoadAlarmThresholdTable+0xf8>)
   80c3c:	f242 7210 	movw	r2, #10000	; 0x2710
   80c40:	80da      	strh	r2, [r3, #6]
		Cl_alarmThresholdTable.apt_high_threshold = 500;
   80c42:	4b36      	ldr	r3, [pc, #216]	; (80d1c <Cl_LoadAlarmThresholdTable+0xf8>)
   80c44:	4a36      	ldr	r2, [pc, #216]	; (80d20 <Cl_LoadAlarmThresholdTable+0xfc>)
   80c46:	609a      	str	r2, [r3, #8]
		Cl_alarmThresholdTable. apt_low_threshold = -300;
   80c48:	4b34      	ldr	r3, [pc, #208]	; (80d1c <Cl_LoadAlarmThresholdTable+0xf8>)
   80c4a:	4a36      	ldr	r2, [pc, #216]	; (80d24 <Cl_LoadAlarmThresholdTable+0x100>)
   80c4c:	60da      	str	r2, [r3, #12]
		Cl_alarmThresholdTable.vpt_high_threshold = 500;
   80c4e:	4b33      	ldr	r3, [pc, #204]	; (80d1c <Cl_LoadAlarmThresholdTable+0xf8>)
   80c50:	4a33      	ldr	r2, [pc, #204]	; (80d20 <Cl_LoadAlarmThresholdTable+0xfc>)
   80c52:	611a      	str	r2, [r3, #16]
		Cl_alarmThresholdTable.vpt_low_threshold = -300;
   80c54:	4b31      	ldr	r3, [pc, #196]	; (80d1c <Cl_LoadAlarmThresholdTable+0xf8>)
   80c56:	4a33      	ldr	r2, [pc, #204]	; (80d24 <Cl_LoadAlarmThresholdTable+0x100>)
   80c58:	615a      	str	r2, [r3, #20]
		Cl_alarmThresholdTable.ps1_high_threshold = 400;
   80c5a:	4b30      	ldr	r3, [pc, #192]	; (80d1c <Cl_LoadAlarmThresholdTable+0xf8>)
   80c5c:	4a32      	ldr	r2, [pc, #200]	; (80d28 <Cl_LoadAlarmThresholdTable+0x104>)
   80c5e:	619a      	str	r2, [r3, #24]
		Cl_alarmThresholdTable.ps1_low_threshold = -200;
   80c60:	4b2e      	ldr	r3, [pc, #184]	; (80d1c <Cl_LoadAlarmThresholdTable+0xf8>)
   80c62:	4a32      	ldr	r2, [pc, #200]	; (80d2c <Cl_LoadAlarmThresholdTable+0x108>)
   80c64:	61da      	str	r2, [r3, #28]
		Cl_alarmThresholdTable.ps2_high_threshold = 400;
   80c66:	4b2d      	ldr	r3, [pc, #180]	; (80d1c <Cl_LoadAlarmThresholdTable+0xf8>)
   80c68:	4a2f      	ldr	r2, [pc, #188]	; (80d28 <Cl_LoadAlarmThresholdTable+0x104>)
   80c6a:	621a      	str	r2, [r3, #32]
		Cl_alarmThresholdTable.ps2_low_threshold = -300;
   80c6c:	4b2b      	ldr	r3, [pc, #172]	; (80d1c <Cl_LoadAlarmThresholdTable+0xf8>)
   80c6e:	4a2d      	ldr	r2, [pc, #180]	; (80d24 <Cl_LoadAlarmThresholdTable+0x100>)
   80c70:	625a      	str	r2, [r3, #36]	; 0x24
		Cl_alarmThresholdTable.ps3_high_threshold = 1000;
   80c72:	4b2a      	ldr	r3, [pc, #168]	; (80d1c <Cl_LoadAlarmThresholdTable+0xf8>)
   80c74:	4a2e      	ldr	r2, [pc, #184]	; (80d30 <Cl_LoadAlarmThresholdTable+0x10c>)
   80c76:	629a      	str	r2, [r3, #40]	; 0x28
		Cl_alarmThresholdTable.ps3_low_threshold = -300;
   80c78:	4b28      	ldr	r3, [pc, #160]	; (80d1c <Cl_LoadAlarmThresholdTable+0xf8>)
   80c7a:	4a2a      	ldr	r2, [pc, #168]	; (80d24 <Cl_LoadAlarmThresholdTable+0x100>)
   80c7c:	62da      	str	r2, [r3, #44]	; 0x2c
		Cl_alarmThresholdTable.temp1_high_threshold = 37;
   80c7e:	4b27      	ldr	r3, [pc, #156]	; (80d1c <Cl_LoadAlarmThresholdTable+0xf8>)
   80c80:	4a2c      	ldr	r2, [pc, #176]	; (80d34 <Cl_LoadAlarmThresholdTable+0x110>)
   80c82:	639a      	str	r2, [r3, #56]	; 0x38
		Cl_alarmThresholdTable.temp1_low_threshold = 25;
   80c84:	4b25      	ldr	r3, [pc, #148]	; (80d1c <Cl_LoadAlarmThresholdTable+0xf8>)
   80c86:	4a2c      	ldr	r2, [pc, #176]	; (80d38 <Cl_LoadAlarmThresholdTable+0x114>)
   80c88:	63da      	str	r2, [r3, #60]	; 0x3c
		Cl_alarmThresholdTable.temp2_high_threshold = 80;
   80c8a:	4b24      	ldr	r3, [pc, #144]	; (80d1c <Cl_LoadAlarmThresholdTable+0xf8>)
   80c8c:	4a2b      	ldr	r2, [pc, #172]	; (80d3c <Cl_LoadAlarmThresholdTable+0x118>)
   80c8e:	641a      	str	r2, [r3, #64]	; 0x40
		Cl_alarmThresholdTable.temp2_low_threshold = 25;
   80c90:	4b22      	ldr	r3, [pc, #136]	; (80d1c <Cl_LoadAlarmThresholdTable+0xf8>)
   80c92:	4a29      	ldr	r2, [pc, #164]	; (80d38 <Cl_LoadAlarmThresholdTable+0x114>)
   80c94:	645a      	str	r2, [r3, #68]	; 0x44
		Cl_alarmThresholdTable.temp3_high_threshold = 80;
   80c96:	4b21      	ldr	r3, [pc, #132]	; (80d1c <Cl_LoadAlarmThresholdTable+0xf8>)
   80c98:	4a28      	ldr	r2, [pc, #160]	; (80d3c <Cl_LoadAlarmThresholdTable+0x118>)
   80c9a:	649a      	str	r2, [r3, #72]	; 0x48
		Cl_alarmThresholdTable.temp3_low_threshold = 25;
   80c9c:	4b1f      	ldr	r3, [pc, #124]	; (80d1c <Cl_LoadAlarmThresholdTable+0xf8>)
   80c9e:	4a26      	ldr	r2, [pc, #152]	; (80d38 <Cl_LoadAlarmThresholdTable+0x114>)
   80ca0:	64da      	str	r2, [r3, #76]	; 0x4c
		Cl_alarmThresholdTable.heater_high_temp_threshold = 45;
   80ca2:	4b1e      	ldr	r3, [pc, #120]	; (80d1c <Cl_LoadAlarmThresholdTable+0xf8>)
   80ca4:	4a26      	ldr	r2, [pc, #152]	; (80d40 <Cl_LoadAlarmThresholdTable+0x11c>)
   80ca6:	651a      	str	r2, [r3, #80]	; 0x50
		Cl_alarmThresholdTable.hp_high_speed_threshold = 10000;
   80ca8:	4b1c      	ldr	r3, [pc, #112]	; (80d1c <Cl_LoadAlarmThresholdTable+0xf8>)
   80caa:	f242 7210 	movw	r2, #10000	; 0x2710
   80cae:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		Cl_alarmThresholdTable.hp_low_speed_threshold = 0;
   80cb2:	4b1a      	ldr	r3, [pc, #104]	; (80d1c <Cl_LoadAlarmThresholdTable+0xf8>)
   80cb4:	2200      	movs	r2, #0
   80cb6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
		Cl_alarmThresholdTable.bp_high_speed_threshold = 10000;
   80cba:	4b18      	ldr	r3, [pc, #96]	; (80d1c <Cl_LoadAlarmThresholdTable+0xf8>)
   80cbc:	f242 7210 	movw	r2, #10000	; 0x2710
   80cc0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
		Cl_alarmThresholdTable.bp_low_speed_threshold = 0;
   80cc4:	4b15      	ldr	r3, [pc, #84]	; (80d1c <Cl_LoadAlarmThresholdTable+0xf8>)
   80cc6:	2200      	movs	r2, #0
   80cc8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
		Cl_alarmThresholdTable.uf_high_speed_threshold = 10000;
   80ccc:	4b13      	ldr	r3, [pc, #76]	; (80d1c <Cl_LoadAlarmThresholdTable+0xf8>)
   80cce:	f242 7210 	movw	r2, #10000	; 0x2710
   80cd2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
		Cl_alarmThresholdTable.uf_low_speed_threshold = 0;
   80cd6:	4b11      	ldr	r3, [pc, #68]	; (80d1c <Cl_LoadAlarmThresholdTable+0xf8>)
   80cd8:	2200      	movs	r2, #0
   80cda:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
		Cl_alarmThresholdTable.flow_low_threshold = 5;
   80cde:	4b0f      	ldr	r3, [pc, #60]	; (80d1c <Cl_LoadAlarmThresholdTable+0xf8>)
   80ce0:	2205      	movs	r2, #5
   80ce2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
		Cl_alarmThresholdTable.flow_high_threshold = 20;
   80ce6:	4b0d      	ldr	r3, [pc, #52]	; (80d1c <Cl_LoadAlarmThresholdTable+0xf8>)
   80ce8:	2214      	movs	r2, #20
   80cea:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
		Cl_alarmThresholdTable.ls_toggle_high_threshold = 30;
   80cee:	4b0b      	ldr	r3, [pc, #44]	; (80d1c <Cl_LoadAlarmThresholdTable+0xf8>)
   80cf0:	221e      	movs	r2, #30
   80cf2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
		Cl_alarmThresholdTable.ls_toggle_low_threshold = 5;
   80cf6:	4b09      	ldr	r3, [pc, #36]	; (80d1c <Cl_LoadAlarmThresholdTable+0xf8>)
   80cf8:	2205      	movs	r2, #5
   80cfa:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
		Cl_alarmThresholdTable.bc_toggle_high_threshold = 30;
   80cfe:	4b07      	ldr	r3, [pc, #28]	; (80d1c <Cl_LoadAlarmThresholdTable+0xf8>)
   80d00:	221e      	movs	r2, #30
   80d02:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
		Cl_alarmThresholdTable.bc_toggle_low_threshold = 5;
   80d06:	4b05      	ldr	r3, [pc, #20]	; (80d1c <Cl_LoadAlarmThresholdTable+0xf8>)
   80d08:	2205      	movs	r2, #5
   80d0a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
		
		return CL_OK ;
   80d0e:	2300      	movs	r3, #0
}
   80d10:	4618      	mov	r0, r3
   80d12:	46bd      	mov	sp, r7
   80d14:	f85d 7b04 	ldr.w	r7, [sp], #4
   80d18:	4770      	bx	lr
   80d1a:	bf00      	nop
   80d1c:	20072104 	.word	0x20072104
   80d20:	43fa0000 	.word	0x43fa0000
   80d24:	c3960000 	.word	0xc3960000
   80d28:	43c80000 	.word	0x43c80000
   80d2c:	c3480000 	.word	0xc3480000
   80d30:	447a0000 	.word	0x447a0000
   80d34:	42140000 	.word	0x42140000
   80d38:	41c80000 	.word	0x41c80000
   80d3c:	42a00000 	.word	0x42a00000
   80d40:	42340000 	.word	0x42340000
   80d44:	00000000 	.word	0x00000000

00080d48 <Cl_Alarm_translate_sensor_values>:
 * \return CL_OK on success. 
 * \Globals used : test_sensor_status,cl_sys_statbuffer
 */
  
Cl_ReturnCodeType Cl_Alarm_translate_sensor_values(void)
{							
   80d48:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
   80d4c:	b08b      	sub	sp, #44	; 0x2c
   80d4e:	af00      	add	r7, sp, #0
	
	Cl_ReturnCodeType cl_alarm_retval = CL_ERROR;
   80d50:	2304      	movs	r3, #4
   80d52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	float temp;
	Cl_Uint16Type sensordata = 0;
   80d56:	2300      	movs	r3, #0
   80d58:	80fb      	strh	r3, [r7, #6]
	{
		ps3 = prev_ps3val;
	}
	#endif
	
	temp = ((cl_sys_statbuffer.ps1status* 3300 /4096) ) ;
   80d5a:	4b9d      	ldr	r3, [pc, #628]	; (80fd0 <Cl_Alarm_translate_sensor_values+0x288>)
   80d5c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
   80d5e:	461a      	mov	r2, r3
   80d60:	f640 43e4 	movw	r3, #3300	; 0xce4
   80d64:	fb03 f302 	mul.w	r3, r3, r2
   80d68:	2b00      	cmp	r3, #0
   80d6a:	da01      	bge.n	80d70 <Cl_Alarm_translate_sensor_values+0x28>
   80d6c:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   80d70:	131b      	asrs	r3, r3, #12
   80d72:	461a      	mov	r2, r3
   80d74:	4b97      	ldr	r3, [pc, #604]	; (80fd4 <Cl_Alarm_translate_sensor_values+0x28c>)
   80d76:	4610      	mov	r0, r2
   80d78:	4798      	blx	r3
   80d7a:	4603      	mov	r3, r0
   80d7c:	623b      	str	r3, [r7, #32]
	calibration_ps1(temp);
   80d7e:	4b96      	ldr	r3, [pc, #600]	; (80fd8 <Cl_Alarm_translate_sensor_values+0x290>)
   80d80:	6a38      	ldr	r0, [r7, #32]
   80d82:	4798      	blx	r3
   80d84:	4603      	mov	r3, r0
   80d86:	b29b      	uxth	r3, r3
   80d88:	b21b      	sxth	r3, r3
   80d8a:	4618      	mov	r0, r3
   80d8c:	4b93      	ldr	r3, [pc, #588]	; (80fdc <Cl_Alarm_translate_sensor_values+0x294>)
   80d8e:	4798      	blx	r3
	if(test_sensor_status[SENSOR_PS1STATUS].test_flag == true)
   80d90:	4b93      	ldr	r3, [pc, #588]	; (80fe0 <Cl_Alarm_translate_sensor_values+0x298>)
   80d92:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   80d96:	2b00      	cmp	r3, #0
   80d98:	d017      	beq.n	80dca <Cl_Alarm_translate_sensor_values+0x82>
	{
		cl_alarm_retval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TESTPS1",5);
   80d9a:	2018      	movs	r0, #24
   80d9c:	4991      	ldr	r1, [pc, #580]	; (80fe4 <Cl_Alarm_translate_sensor_values+0x29c>)
   80d9e:	2205      	movs	r2, #5
   80da0:	4b91      	ldr	r3, [pc, #580]	; (80fe8 <Cl_Alarm_translate_sensor_values+0x2a0>)
   80da2:	4798      	blx	r3
   80da4:	4603      	mov	r3, r0
   80da6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		ASSERT_ERROR(cl_alarm_retval);
   80daa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   80dae:	2b00      	cmp	r3, #0
   80db0:	d001      	beq.n	80db6 <Cl_Alarm_translate_sensor_values+0x6e>
   80db2:	4b8e      	ldr	r3, [pc, #568]	; (80fec <Cl_Alarm_translate_sensor_values+0x2a4>)
   80db4:	4798      	blx	r3
		ps1 =  test_sensor_status[SENSOR_PS1STATUS].test_sensord_data;
   80db6:	4b8a      	ldr	r3, [pc, #552]	; (80fe0 <Cl_Alarm_translate_sensor_values+0x298>)
   80db8:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
   80dba:	b21a      	sxth	r2, r3
   80dbc:	4b85      	ldr	r3, [pc, #532]	; (80fd4 <Cl_Alarm_translate_sensor_values+0x28c>)
   80dbe:	4610      	mov	r0, r2
   80dc0:	4798      	blx	r3
   80dc2:	4602      	mov	r2, r0
   80dc4:	4b8a      	ldr	r3, [pc, #552]	; (80ff0 <Cl_Alarm_translate_sensor_values+0x2a8>)
   80dc6:	601a      	str	r2, [r3, #0]
   80dc8:	e03a      	b.n	80e40 <Cl_Alarm_translate_sensor_values+0xf8>
	else
	{
		
		//ps1 = ((ps1* 49) + pressure_final_ps1)/50;
		
		Cl_SysStat_GetSensor_Status_Query(SENSOR_PS1STATUS,&Ps1);
   80dca:	1d3b      	adds	r3, r7, #4
   80dcc:	200e      	movs	r0, #14
   80dce:	4619      	mov	r1, r3
   80dd0:	4b88      	ldr	r3, [pc, #544]	; (80ff4 <Cl_Alarm_translate_sensor_values+0x2ac>)
   80dd2:	4798      	blx	r3

		if (Ps1 >32268)
   80dd4:	88bb      	ldrh	r3, [r7, #4]
   80dd6:	f647 620c 	movw	r2, #32268	; 0x7e0c
   80dda:	4293      	cmp	r3, r2
   80ddc:	d909      	bls.n	80df2 <Cl_Alarm_translate_sensor_values+0xaa>
		{
			ps1 = (65536 - Ps1) *(-1);
   80dde:	88bb      	ldrh	r3, [r7, #4]
   80de0:	f5a3 3280 	sub.w	r2, r3, #65536	; 0x10000
   80de4:	4b7b      	ldr	r3, [pc, #492]	; (80fd4 <Cl_Alarm_translate_sensor_values+0x28c>)
   80de6:	4610      	mov	r0, r2
   80de8:	4798      	blx	r3
   80dea:	4602      	mov	r2, r0
   80dec:	4b80      	ldr	r3, [pc, #512]	; (80ff0 <Cl_Alarm_translate_sensor_values+0x2a8>)
   80dee:	601a      	str	r2, [r3, #0]
   80df0:	e006      	b.n	80e00 <Cl_Alarm_translate_sensor_values+0xb8>
		}
		else
		ps1 = (float)Ps1;
   80df2:	88ba      	ldrh	r2, [r7, #4]
   80df4:	4b80      	ldr	r3, [pc, #512]	; (80ff8 <Cl_Alarm_translate_sensor_values+0x2b0>)
   80df6:	4610      	mov	r0, r2
   80df8:	4798      	blx	r3
   80dfa:	4602      	mov	r2, r0
   80dfc:	4b7c      	ldr	r3, [pc, #496]	; (80ff0 <Cl_Alarm_translate_sensor_values+0x2a8>)
   80dfe:	601a      	str	r2, [r3, #0]
		
		ps1 = (0.091009 * ps1) + 491.794;
   80e00:	4b7b      	ldr	r3, [pc, #492]	; (80ff0 <Cl_Alarm_translate_sensor_values+0x2a8>)
   80e02:	681a      	ldr	r2, [r3, #0]
   80e04:	4b7d      	ldr	r3, [pc, #500]	; (80ffc <Cl_Alarm_translate_sensor_values+0x2b4>)
   80e06:	4610      	mov	r0, r2
   80e08:	4798      	blx	r3
   80e0a:	4602      	mov	r2, r0
   80e0c:	460b      	mov	r3, r1
   80e0e:	4c7c      	ldr	r4, [pc, #496]	; (81000 <Cl_Alarm_translate_sensor_values+0x2b8>)
   80e10:	4610      	mov	r0, r2
   80e12:	4619      	mov	r1, r3
   80e14:	a36a      	add	r3, pc, #424	; (adr r3, 80fc0 <Cl_Alarm_translate_sensor_values+0x278>)
   80e16:	e9d3 2300 	ldrd	r2, r3, [r3]
   80e1a:	47a0      	blx	r4
   80e1c:	4602      	mov	r2, r0
   80e1e:	460b      	mov	r3, r1
   80e20:	4c78      	ldr	r4, [pc, #480]	; (81004 <Cl_Alarm_translate_sensor_values+0x2bc>)
   80e22:	4610      	mov	r0, r2
   80e24:	4619      	mov	r1, r3
   80e26:	a368      	add	r3, pc, #416	; (adr r3, 80fc8 <Cl_Alarm_translate_sensor_values+0x280>)
   80e28:	e9d3 2300 	ldrd	r2, r3, [r3]
   80e2c:	47a0      	blx	r4
   80e2e:	4602      	mov	r2, r0
   80e30:	460b      	mov	r3, r1
   80e32:	4610      	mov	r0, r2
   80e34:	4619      	mov	r1, r3
   80e36:	4b74      	ldr	r3, [pc, #464]	; (81008 <Cl_Alarm_translate_sensor_values+0x2c0>)
   80e38:	4798      	blx	r3
   80e3a:	4602      	mov	r2, r0
   80e3c:	4b6c      	ldr	r3, [pc, #432]	; (80ff0 <Cl_Alarm_translate_sensor_values+0x2a8>)
   80e3e:	601a      	str	r2, [r3, #0]
	}
	
	temp = ((cl_sys_statbuffer.ps2status* 3300 /4096) ) ;
   80e40:	4b63      	ldr	r3, [pc, #396]	; (80fd0 <Cl_Alarm_translate_sensor_values+0x288>)
   80e42:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   80e44:	461a      	mov	r2, r3
   80e46:	f640 43e4 	movw	r3, #3300	; 0xce4
   80e4a:	fb03 f302 	mul.w	r3, r3, r2
   80e4e:	2b00      	cmp	r3, #0
   80e50:	da01      	bge.n	80e56 <Cl_Alarm_translate_sensor_values+0x10e>
   80e52:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   80e56:	131b      	asrs	r3, r3, #12
   80e58:	461a      	mov	r2, r3
   80e5a:	4b5e      	ldr	r3, [pc, #376]	; (80fd4 <Cl_Alarm_translate_sensor_values+0x28c>)
   80e5c:	4610      	mov	r0, r2
   80e5e:	4798      	blx	r3
   80e60:	4603      	mov	r3, r0
   80e62:	623b      	str	r3, [r7, #32]
	calibration_ps2(temp);
   80e64:	4b5c      	ldr	r3, [pc, #368]	; (80fd8 <Cl_Alarm_translate_sensor_values+0x290>)
   80e66:	6a38      	ldr	r0, [r7, #32]
   80e68:	4798      	blx	r3
   80e6a:	4603      	mov	r3, r0
   80e6c:	b29b      	uxth	r3, r3
   80e6e:	b21b      	sxth	r3, r3
   80e70:	4618      	mov	r0, r3
   80e72:	4b66      	ldr	r3, [pc, #408]	; (8100c <Cl_Alarm_translate_sensor_values+0x2c4>)
   80e74:	4798      	blx	r3
	if(test_sensor_status[SENSOR_PS2STATUS].test_flag == true)
   80e76:	4b5a      	ldr	r3, [pc, #360]	; (80fe0 <Cl_Alarm_translate_sensor_values+0x298>)
   80e78:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
   80e7c:	2b00      	cmp	r3, #0
   80e7e:	d017      	beq.n	80eb0 <Cl_Alarm_translate_sensor_values+0x168>
	{
		cl_alarm_retval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TESTPS2",5);
   80e80:	2018      	movs	r0, #24
   80e82:	4963      	ldr	r1, [pc, #396]	; (81010 <Cl_Alarm_translate_sensor_values+0x2c8>)
   80e84:	2205      	movs	r2, #5
   80e86:	4b58      	ldr	r3, [pc, #352]	; (80fe8 <Cl_Alarm_translate_sensor_values+0x2a0>)
   80e88:	4798      	blx	r3
   80e8a:	4603      	mov	r3, r0
   80e8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		ASSERT_ERROR(cl_alarm_retval);
   80e90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   80e94:	2b00      	cmp	r3, #0
   80e96:	d001      	beq.n	80e9c <Cl_Alarm_translate_sensor_values+0x154>
   80e98:	4b54      	ldr	r3, [pc, #336]	; (80fec <Cl_Alarm_translate_sensor_values+0x2a4>)
   80e9a:	4798      	blx	r3
		ps2 =  test_sensor_status[SENSOR_PS2STATUS].test_sensord_data;
   80e9c:	4b50      	ldr	r3, [pc, #320]	; (80fe0 <Cl_Alarm_translate_sensor_values+0x298>)
   80e9e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
   80ea0:	b21a      	sxth	r2, r3
   80ea2:	4b4c      	ldr	r3, [pc, #304]	; (80fd4 <Cl_Alarm_translate_sensor_values+0x28c>)
   80ea4:	4610      	mov	r0, r2
   80ea6:	4798      	blx	r3
   80ea8:	4602      	mov	r2, r0
   80eaa:	4b5a      	ldr	r3, [pc, #360]	; (81014 <Cl_Alarm_translate_sensor_values+0x2cc>)
   80eac:	601a      	str	r2, [r3, #0]
   80eae:	e03a      	b.n	80f26 <Cl_Alarm_translate_sensor_values+0x1de>
		
	}
	else
	{
		Cl_SysStat_GetSensor_Status_Query(SENSOR_PS1STATUS,&Ps2);
   80eb0:	1cbb      	adds	r3, r7, #2
   80eb2:	200e      	movs	r0, #14
   80eb4:	4619      	mov	r1, r3
   80eb6:	4b4f      	ldr	r3, [pc, #316]	; (80ff4 <Cl_Alarm_translate_sensor_values+0x2ac>)
   80eb8:	4798      	blx	r3

		if (Ps2 >32268)
   80eba:	887b      	ldrh	r3, [r7, #2]
   80ebc:	f647 620c 	movw	r2, #32268	; 0x7e0c
   80ec0:	4293      	cmp	r3, r2
   80ec2:	d909      	bls.n	80ed8 <Cl_Alarm_translate_sensor_values+0x190>
		{
			ps2 = (65536 - Ps2) *(-1);
   80ec4:	887b      	ldrh	r3, [r7, #2]
   80ec6:	f5a3 3280 	sub.w	r2, r3, #65536	; 0x10000
   80eca:	4b42      	ldr	r3, [pc, #264]	; (80fd4 <Cl_Alarm_translate_sensor_values+0x28c>)
   80ecc:	4610      	mov	r0, r2
   80ece:	4798      	blx	r3
   80ed0:	4602      	mov	r2, r0
   80ed2:	4b50      	ldr	r3, [pc, #320]	; (81014 <Cl_Alarm_translate_sensor_values+0x2cc>)
   80ed4:	601a      	str	r2, [r3, #0]
   80ed6:	e006      	b.n	80ee6 <Cl_Alarm_translate_sensor_values+0x19e>
		}
		else
		ps2 = (float)Ps2;
   80ed8:	887a      	ldrh	r2, [r7, #2]
   80eda:	4b47      	ldr	r3, [pc, #284]	; (80ff8 <Cl_Alarm_translate_sensor_values+0x2b0>)
   80edc:	4610      	mov	r0, r2
   80ede:	4798      	blx	r3
   80ee0:	4602      	mov	r2, r0
   80ee2:	4b4c      	ldr	r3, [pc, #304]	; (81014 <Cl_Alarm_translate_sensor_values+0x2cc>)
   80ee4:	601a      	str	r2, [r3, #0]
		
		ps2 = (0.091009 * ps2) + 491.794;
   80ee6:	4b4b      	ldr	r3, [pc, #300]	; (81014 <Cl_Alarm_translate_sensor_values+0x2cc>)
   80ee8:	681a      	ldr	r2, [r3, #0]
   80eea:	4b44      	ldr	r3, [pc, #272]	; (80ffc <Cl_Alarm_translate_sensor_values+0x2b4>)
   80eec:	4610      	mov	r0, r2
   80eee:	4798      	blx	r3
   80ef0:	4602      	mov	r2, r0
   80ef2:	460b      	mov	r3, r1
   80ef4:	4c42      	ldr	r4, [pc, #264]	; (81000 <Cl_Alarm_translate_sensor_values+0x2b8>)
   80ef6:	4610      	mov	r0, r2
   80ef8:	4619      	mov	r1, r3
   80efa:	a331      	add	r3, pc, #196	; (adr r3, 80fc0 <Cl_Alarm_translate_sensor_values+0x278>)
   80efc:	e9d3 2300 	ldrd	r2, r3, [r3]
   80f00:	47a0      	blx	r4
   80f02:	4602      	mov	r2, r0
   80f04:	460b      	mov	r3, r1
   80f06:	4c3f      	ldr	r4, [pc, #252]	; (81004 <Cl_Alarm_translate_sensor_values+0x2bc>)
   80f08:	4610      	mov	r0, r2
   80f0a:	4619      	mov	r1, r3
   80f0c:	a32e      	add	r3, pc, #184	; (adr r3, 80fc8 <Cl_Alarm_translate_sensor_values+0x280>)
   80f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
   80f12:	47a0      	blx	r4
   80f14:	4602      	mov	r2, r0
   80f16:	460b      	mov	r3, r1
   80f18:	4610      	mov	r0, r2
   80f1a:	4619      	mov	r1, r3
   80f1c:	4b3a      	ldr	r3, [pc, #232]	; (81008 <Cl_Alarm_translate_sensor_values+0x2c0>)
   80f1e:	4798      	blx	r3
   80f20:	4602      	mov	r2, r0
   80f22:	4b3c      	ldr	r3, [pc, #240]	; (81014 <Cl_Alarm_translate_sensor_values+0x2cc>)
   80f24:	601a      	str	r2, [r3, #0]
		
		//ps2 = ((ps2* 49) + pressure_final_ps2)/50;
	}
	
	temp = ((cl_sys_statbuffer.ps3status* 3300 /4096) ) ;
   80f26:	4b2a      	ldr	r3, [pc, #168]	; (80fd0 <Cl_Alarm_translate_sensor_values+0x288>)
   80f28:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
   80f2a:	461a      	mov	r2, r3
   80f2c:	f640 43e4 	movw	r3, #3300	; 0xce4
   80f30:	fb03 f302 	mul.w	r3, r3, r2
   80f34:	2b00      	cmp	r3, #0
   80f36:	da01      	bge.n	80f3c <Cl_Alarm_translate_sensor_values+0x1f4>
   80f38:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   80f3c:	131b      	asrs	r3, r3, #12
   80f3e:	461a      	mov	r2, r3
   80f40:	4b24      	ldr	r3, [pc, #144]	; (80fd4 <Cl_Alarm_translate_sensor_values+0x28c>)
   80f42:	4610      	mov	r0, r2
   80f44:	4798      	blx	r3
   80f46:	4603      	mov	r3, r0
   80f48:	623b      	str	r3, [r7, #32]
	calibration_ps3(temp);
   80f4a:	4b23      	ldr	r3, [pc, #140]	; (80fd8 <Cl_Alarm_translate_sensor_values+0x290>)
   80f4c:	6a38      	ldr	r0, [r7, #32]
   80f4e:	4798      	blx	r3
   80f50:	4603      	mov	r3, r0
   80f52:	b29b      	uxth	r3, r3
   80f54:	b21b      	sxth	r3, r3
   80f56:	4618      	mov	r0, r3
   80f58:	4b2f      	ldr	r3, [pc, #188]	; (81018 <Cl_Alarm_translate_sensor_values+0x2d0>)
   80f5a:	4798      	blx	r3
	if(test_sensor_status[SENSOR_PS3STATUS].test_flag == true)
   80f5c:	4b20      	ldr	r3, [pc, #128]	; (80fe0 <Cl_Alarm_translate_sensor_values+0x298>)
   80f5e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
   80f62:	2b00      	cmp	r3, #0
   80f64:	d018      	beq.n	80f98 <Cl_Alarm_translate_sensor_values+0x250>
	{
		cl_alarm_retval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TESTPS3",5);
   80f66:	2018      	movs	r0, #24
   80f68:	492c      	ldr	r1, [pc, #176]	; (8101c <Cl_Alarm_translate_sensor_values+0x2d4>)
   80f6a:	2205      	movs	r2, #5
   80f6c:	4b1e      	ldr	r3, [pc, #120]	; (80fe8 <Cl_Alarm_translate_sensor_values+0x2a0>)
   80f6e:	4798      	blx	r3
   80f70:	4603      	mov	r3, r0
   80f72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		ASSERT_ERROR(cl_alarm_retval);
   80f76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   80f7a:	2b00      	cmp	r3, #0
   80f7c:	d001      	beq.n	80f82 <Cl_Alarm_translate_sensor_values+0x23a>
   80f7e:	4b1b      	ldr	r3, [pc, #108]	; (80fec <Cl_Alarm_translate_sensor_values+0x2a4>)
   80f80:	4798      	blx	r3
		ps3 =  test_sensor_status[SENSOR_PS3STATUS].test_sensord_data;			
   80f82:	4b17      	ldr	r3, [pc, #92]	; (80fe0 <Cl_Alarm_translate_sensor_values+0x298>)
   80f84:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
   80f88:	b21a      	sxth	r2, r3
   80f8a:	4b12      	ldr	r3, [pc, #72]	; (80fd4 <Cl_Alarm_translate_sensor_values+0x28c>)
   80f8c:	4610      	mov	r0, r2
   80f8e:	4798      	blx	r3
   80f90:	4602      	mov	r2, r0
   80f92:	4b23      	ldr	r3, [pc, #140]	; (81020 <Cl_Alarm_translate_sensor_values+0x2d8>)
   80f94:	601a      	str	r2, [r3, #0]
   80f96:	e06c      	b.n	81072 <Cl_Alarm_translate_sensor_values+0x32a>
	}
	else
	{
		Cl_SysStat_GetSensor_Status_Query(SENSOR_PS1STATUS,&Ps3);
   80f98:	463b      	mov	r3, r7
   80f9a:	200e      	movs	r0, #14
   80f9c:	4619      	mov	r1, r3
   80f9e:	4b15      	ldr	r3, [pc, #84]	; (80ff4 <Cl_Alarm_translate_sensor_values+0x2ac>)
   80fa0:	4798      	blx	r3

		if (Ps3 >32268)
   80fa2:	883b      	ldrh	r3, [r7, #0]
   80fa4:	f647 620c 	movw	r2, #32268	; 0x7e0c
   80fa8:	4293      	cmp	r3, r2
   80faa:	d93b      	bls.n	81024 <Cl_Alarm_translate_sensor_values+0x2dc>
		{
			ps3 = (65536 - Ps3) *(-1);
   80fac:	883b      	ldrh	r3, [r7, #0]
   80fae:	f5a3 3280 	sub.w	r2, r3, #65536	; 0x10000
   80fb2:	4b08      	ldr	r3, [pc, #32]	; (80fd4 <Cl_Alarm_translate_sensor_values+0x28c>)
   80fb4:	4610      	mov	r0, r2
   80fb6:	4798      	blx	r3
   80fb8:	4602      	mov	r2, r0
   80fba:	4b19      	ldr	r3, [pc, #100]	; (81020 <Cl_Alarm_translate_sensor_values+0x2d8>)
   80fbc:	601a      	str	r2, [r3, #0]
   80fbe:	e038      	b.n	81032 <Cl_Alarm_translate_sensor_values+0x2ea>
   80fc0:	a6a44418 	.word	0xa6a44418
   80fc4:	3fb74c5d 	.word	0x3fb74c5d
   80fc8:	39581062 	.word	0x39581062
   80fcc:	407ebcb4 	.word	0x407ebcb4
   80fd0:	20072224 	.word	0x20072224
   80fd4:	000a68b1 	.word	0x000a68b1
   80fd8:	000a6ce5 	.word	0x000a6ce5
   80fdc:	0008440d 	.word	0x0008440d
   80fe0:	200725c0 	.word	0x200725c0
   80fe4:	000a8864 	.word	0x000a8864
   80fe8:	0009ba51 	.word	0x0009ba51
   80fec:	00088fc1 	.word	0x00088fc1
   80ff0:	20071740 	.word	0x20071740
   80ff4:	0008e7f9 	.word	0x0008e7f9
   80ff8:	000a68a9 	.word	0x000a68a9
   80ffc:	000a6031 	.word	0x000a6031
   81000:	000a60d9 	.word	0x000a60d9
   81004:	000a5d75 	.word	0x000a5d75
   81008:	000a669d 	.word	0x000a669d
   8100c:	00084529 	.word	0x00084529
   81010:	000a886c 	.word	0x000a886c
   81014:	20071744 	.word	0x20071744
   81018:	00084645 	.word	0x00084645
   8101c:	000a8874 	.word	0x000a8874
   81020:	20071748 	.word	0x20071748
		}
		else
		ps3 = (float)Ps3;
   81024:	883a      	ldrh	r2, [r7, #0]
   81026:	4b8e      	ldr	r3, [pc, #568]	; (81260 <Cl_Alarm_translate_sensor_values+0x518>)
   81028:	4610      	mov	r0, r2
   8102a:	4798      	blx	r3
   8102c:	4602      	mov	r2, r0
   8102e:	4b8d      	ldr	r3, [pc, #564]	; (81264 <Cl_Alarm_translate_sensor_values+0x51c>)
   81030:	601a      	str	r2, [r3, #0]
		
		ps3 = (0.091009 * ps3) + 491.794;
   81032:	4b8c      	ldr	r3, [pc, #560]	; (81264 <Cl_Alarm_translate_sensor_values+0x51c>)
   81034:	681a      	ldr	r2, [r3, #0]
   81036:	4b8c      	ldr	r3, [pc, #560]	; (81268 <Cl_Alarm_translate_sensor_values+0x520>)
   81038:	4610      	mov	r0, r2
   8103a:	4798      	blx	r3
   8103c:	4602      	mov	r2, r0
   8103e:	460b      	mov	r3, r1
   81040:	4c8a      	ldr	r4, [pc, #552]	; (8126c <Cl_Alarm_translate_sensor_values+0x524>)
   81042:	4610      	mov	r0, r2
   81044:	4619      	mov	r1, r3
   81046:	a382      	add	r3, pc, #520	; (adr r3, 81250 <Cl_Alarm_translate_sensor_values+0x508>)
   81048:	e9d3 2300 	ldrd	r2, r3, [r3]
   8104c:	47a0      	blx	r4
   8104e:	4602      	mov	r2, r0
   81050:	460b      	mov	r3, r1
   81052:	4c87      	ldr	r4, [pc, #540]	; (81270 <Cl_Alarm_translate_sensor_values+0x528>)
   81054:	4610      	mov	r0, r2
   81056:	4619      	mov	r1, r3
   81058:	a37f      	add	r3, pc, #508	; (adr r3, 81258 <Cl_Alarm_translate_sensor_values+0x510>)
   8105a:	e9d3 2300 	ldrd	r2, r3, [r3]
   8105e:	47a0      	blx	r4
   81060:	4602      	mov	r2, r0
   81062:	460b      	mov	r3, r1
   81064:	4610      	mov	r0, r2
   81066:	4619      	mov	r1, r3
   81068:	4b82      	ldr	r3, [pc, #520]	; (81274 <Cl_Alarm_translate_sensor_values+0x52c>)
   8106a:	4798      	blx	r3
   8106c:	4602      	mov	r2, r0
   8106e:	4b7d      	ldr	r3, [pc, #500]	; (81264 <Cl_Alarm_translate_sensor_values+0x51c>)
   81070:	601a      	str	r2, [r3, #0]
		//ps3 = ((ps3* 49) + pressure_final_ps3)/50;
	}
				
	temp = ((cl_sys_statbuffer.aptstatus * 3300 /4096) ) ;
   81072:	4b81      	ldr	r3, [pc, #516]	; (81278 <Cl_Alarm_translate_sensor_values+0x530>)
   81074:	8a1b      	ldrh	r3, [r3, #16]
   81076:	461a      	mov	r2, r3
   81078:	f640 43e4 	movw	r3, #3300	; 0xce4
   8107c:	fb03 f302 	mul.w	r3, r3, r2
   81080:	2b00      	cmp	r3, #0
   81082:	da01      	bge.n	81088 <Cl_Alarm_translate_sensor_values+0x340>
   81084:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   81088:	131b      	asrs	r3, r3, #12
   8108a:	461a      	mov	r2, r3
   8108c:	4b7b      	ldr	r3, [pc, #492]	; (8127c <Cl_Alarm_translate_sensor_values+0x534>)
   8108e:	4610      	mov	r0, r2
   81090:	4798      	blx	r3
   81092:	4603      	mov	r3, r0
   81094:	623b      	str	r3, [r7, #32]
	calibration_apt(temp);
   81096:	4b7a      	ldr	r3, [pc, #488]	; (81280 <Cl_Alarm_translate_sensor_values+0x538>)
   81098:	6a38      	ldr	r0, [r7, #32]
   8109a:	4798      	blx	r3
   8109c:	4603      	mov	r3, r0
   8109e:	b29b      	uxth	r3, r3
   810a0:	b21b      	sxth	r3, r3
   810a2:	4618      	mov	r0, r3
   810a4:	4b77      	ldr	r3, [pc, #476]	; (81284 <Cl_Alarm_translate_sensor_values+0x53c>)
   810a6:	4798      	blx	r3
	if(test_sensor_status[SENSOR_APTSTATUS].test_flag == true)
   810a8:	4b77      	ldr	r3, [pc, #476]	; (81288 <Cl_Alarm_translate_sensor_values+0x540>)
   810aa:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
   810ae:	2b00      	cmp	r3, #0
   810b0:	d00e      	beq.n	810d0 <Cl_Alarm_translate_sensor_values+0x388>
	{
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TESTAPT",5);
   810b2:	2018      	movs	r0, #24
   810b4:	4975      	ldr	r1, [pc, #468]	; (8128c <Cl_Alarm_translate_sensor_values+0x544>)
   810b6:	2205      	movs	r2, #5
   810b8:	4b75      	ldr	r3, [pc, #468]	; (81290 <Cl_Alarm_translate_sensor_values+0x548>)
   810ba:	4798      	blx	r3
		apt =  test_sensor_status[SENSOR_APTSTATUS].test_sensord_data;
   810bc:	4b72      	ldr	r3, [pc, #456]	; (81288 <Cl_Alarm_translate_sensor_values+0x540>)
   810be:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   810c0:	b21a      	sxth	r2, r3
   810c2:	4b6e      	ldr	r3, [pc, #440]	; (8127c <Cl_Alarm_translate_sensor_values+0x534>)
   810c4:	4610      	mov	r0, r2
   810c6:	4798      	blx	r3
   810c8:	4602      	mov	r2, r0
   810ca:	4b72      	ldr	r3, [pc, #456]	; (81294 <Cl_Alarm_translate_sensor_values+0x54c>)
   810cc:	601a      	str	r2, [r3, #0]
   810ce:	e017      	b.n	81100 <Cl_Alarm_translate_sensor_values+0x3b8>
	}
	else
	{
		apt = ((apt* 49) + pressure_final_apt)/50;
   810d0:	4b70      	ldr	r3, [pc, #448]	; (81294 <Cl_Alarm_translate_sensor_values+0x54c>)
   810d2:	681a      	ldr	r2, [r3, #0]
   810d4:	4b70      	ldr	r3, [pc, #448]	; (81298 <Cl_Alarm_translate_sensor_values+0x550>)
   810d6:	4610      	mov	r0, r2
   810d8:	4970      	ldr	r1, [pc, #448]	; (8129c <Cl_Alarm_translate_sensor_values+0x554>)
   810da:	4798      	blx	r3
   810dc:	4603      	mov	r3, r0
   810de:	4619      	mov	r1, r3
   810e0:	4b6f      	ldr	r3, [pc, #444]	; (812a0 <Cl_Alarm_translate_sensor_values+0x558>)
   810e2:	681a      	ldr	r2, [r3, #0]
   810e4:	4b6f      	ldr	r3, [pc, #444]	; (812a4 <Cl_Alarm_translate_sensor_values+0x55c>)
   810e6:	4608      	mov	r0, r1
   810e8:	4611      	mov	r1, r2
   810ea:	4798      	blx	r3
   810ec:	4603      	mov	r3, r0
   810ee:	461a      	mov	r2, r3
   810f0:	4b6d      	ldr	r3, [pc, #436]	; (812a8 <Cl_Alarm_translate_sensor_values+0x560>)
   810f2:	4610      	mov	r0, r2
   810f4:	496d      	ldr	r1, [pc, #436]	; (812ac <Cl_Alarm_translate_sensor_values+0x564>)
   810f6:	4798      	blx	r3
   810f8:	4603      	mov	r3, r0
   810fa:	461a      	mov	r2, r3
   810fc:	4b65      	ldr	r3, [pc, #404]	; (81294 <Cl_Alarm_translate_sensor_values+0x54c>)
   810fe:	601a      	str	r2, [r3, #0]
	}

	temp = ((cl_sys_statbuffer.vptstatus * 3300 /4096) ) ;
   81100:	4b5d      	ldr	r3, [pc, #372]	; (81278 <Cl_Alarm_translate_sensor_values+0x530>)
   81102:	8a5b      	ldrh	r3, [r3, #18]
   81104:	461a      	mov	r2, r3
   81106:	f640 43e4 	movw	r3, #3300	; 0xce4
   8110a:	fb03 f302 	mul.w	r3, r3, r2
   8110e:	2b00      	cmp	r3, #0
   81110:	da01      	bge.n	81116 <Cl_Alarm_translate_sensor_values+0x3ce>
   81112:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   81116:	131b      	asrs	r3, r3, #12
   81118:	461a      	mov	r2, r3
   8111a:	4b58      	ldr	r3, [pc, #352]	; (8127c <Cl_Alarm_translate_sensor_values+0x534>)
   8111c:	4610      	mov	r0, r2
   8111e:	4798      	blx	r3
   81120:	4603      	mov	r3, r0
   81122:	623b      	str	r3, [r7, #32]
	calibration_vpt(temp);
   81124:	4b56      	ldr	r3, [pc, #344]	; (81280 <Cl_Alarm_translate_sensor_values+0x538>)
   81126:	6a38      	ldr	r0, [r7, #32]
   81128:	4798      	blx	r3
   8112a:	4603      	mov	r3, r0
   8112c:	b29b      	uxth	r3, r3
   8112e:	b21b      	sxth	r3, r3
   81130:	4618      	mov	r0, r3
   81132:	4b5f      	ldr	r3, [pc, #380]	; (812b0 <Cl_Alarm_translate_sensor_values+0x568>)
   81134:	4798      	blx	r3
	if(test_sensor_status[SENSOR_VPTSTATUS].test_flag == true)
   81136:	4b54      	ldr	r3, [pc, #336]	; (81288 <Cl_Alarm_translate_sensor_values+0x540>)
   81138:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
   8113c:	2b00      	cmp	r3, #0
   8113e:	d00e      	beq.n	8115e <Cl_Alarm_translate_sensor_values+0x416>
	{
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TESTAPT",5);
   81140:	2018      	movs	r0, #24
   81142:	4952      	ldr	r1, [pc, #328]	; (8128c <Cl_Alarm_translate_sensor_values+0x544>)
   81144:	2205      	movs	r2, #5
   81146:	4b52      	ldr	r3, [pc, #328]	; (81290 <Cl_Alarm_translate_sensor_values+0x548>)
   81148:	4798      	blx	r3
		vpt =  test_sensor_status[SENSOR_VPTSTATUS].test_sensord_data;
   8114a:	4b4f      	ldr	r3, [pc, #316]	; (81288 <Cl_Alarm_translate_sensor_values+0x540>)
   8114c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   8114e:	b21a      	sxth	r2, r3
   81150:	4b4a      	ldr	r3, [pc, #296]	; (8127c <Cl_Alarm_translate_sensor_values+0x534>)
   81152:	4610      	mov	r0, r2
   81154:	4798      	blx	r3
   81156:	4602      	mov	r2, r0
   81158:	4b56      	ldr	r3, [pc, #344]	; (812b4 <Cl_Alarm_translate_sensor_values+0x56c>)
   8115a:	601a      	str	r2, [r3, #0]
   8115c:	e017      	b.n	8118e <Cl_Alarm_translate_sensor_values+0x446>
	}
	else
	{
		vpt = ((vpt* 49) + pressure_final_vpt)/50;
   8115e:	4b55      	ldr	r3, [pc, #340]	; (812b4 <Cl_Alarm_translate_sensor_values+0x56c>)
   81160:	681a      	ldr	r2, [r3, #0]
   81162:	4b4d      	ldr	r3, [pc, #308]	; (81298 <Cl_Alarm_translate_sensor_values+0x550>)
   81164:	4610      	mov	r0, r2
   81166:	494d      	ldr	r1, [pc, #308]	; (8129c <Cl_Alarm_translate_sensor_values+0x554>)
   81168:	4798      	blx	r3
   8116a:	4603      	mov	r3, r0
   8116c:	4619      	mov	r1, r3
   8116e:	4b52      	ldr	r3, [pc, #328]	; (812b8 <Cl_Alarm_translate_sensor_values+0x570>)
   81170:	681a      	ldr	r2, [r3, #0]
   81172:	4b4c      	ldr	r3, [pc, #304]	; (812a4 <Cl_Alarm_translate_sensor_values+0x55c>)
   81174:	4608      	mov	r0, r1
   81176:	4611      	mov	r1, r2
   81178:	4798      	blx	r3
   8117a:	4603      	mov	r3, r0
   8117c:	461a      	mov	r2, r3
   8117e:	4b4a      	ldr	r3, [pc, #296]	; (812a8 <Cl_Alarm_translate_sensor_values+0x560>)
   81180:	4610      	mov	r0, r2
   81182:	494a      	ldr	r1, [pc, #296]	; (812ac <Cl_Alarm_translate_sensor_values+0x564>)
   81184:	4798      	blx	r3
   81186:	4603      	mov	r3, r0
   81188:	461a      	mov	r2, r3
   8118a:	4b4a      	ldr	r3, [pc, #296]	; (812b4 <Cl_Alarm_translate_sensor_values+0x56c>)
   8118c:	601a      	str	r2, [r3, #0]
	}

// 	temp = cl_sys_statbuffer.Temp1status * 0.805;
// 	calibration_tmp(temp,TS1);
	if(test_sensor_status[SENSOR_TEMP1STATUS].test_flag == true)
   8118e:	4b3e      	ldr	r3, [pc, #248]	; (81288 <Cl_Alarm_translate_sensor_values+0x540>)
   81190:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
   81194:	2b00      	cmp	r3, #0
   81196:	d00f      	beq.n	811b8 <Cl_Alarm_translate_sensor_values+0x470>
	{
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TESTT1",7);
   81198:	2018      	movs	r0, #24
   8119a:	4948      	ldr	r1, [pc, #288]	; (812bc <Cl_Alarm_translate_sensor_values+0x574>)
   8119c:	2207      	movs	r2, #7
   8119e:	4b3c      	ldr	r3, [pc, #240]	; (81290 <Cl_Alarm_translate_sensor_values+0x548>)
   811a0:	4798      	blx	r3
		temp1 =  test_sensor_status[SENSOR_TEMP1STATUS].test_sensord_data;
   811a2:	4b39      	ldr	r3, [pc, #228]	; (81288 <Cl_Alarm_translate_sensor_values+0x540>)
   811a4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
   811a8:	b21a      	sxth	r2, r3
   811aa:	4b34      	ldr	r3, [pc, #208]	; (8127c <Cl_Alarm_translate_sensor_values+0x534>)
   811ac:	4610      	mov	r0, r2
   811ae:	4798      	blx	r3
   811b0:	4602      	mov	r2, r0
   811b2:	4b43      	ldr	r3, [pc, #268]	; (812c0 <Cl_Alarm_translate_sensor_values+0x578>)
   811b4:	601a      	str	r2, [r3, #0]
   811b6:	e011      	b.n	811dc <Cl_Alarm_translate_sensor_values+0x494>
		uint16_t temp = res_temp_value/100;
		temp = temp - 2.5- 0.25;
								
		temp1 = ((temp1* 4) +temp)/5;
		//temp1=temp1*10; */
			Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP1STATUS,&sensordata);
   811b8:	1dbb      	adds	r3, r7, #6
   811ba:	2012      	movs	r0, #18
   811bc:	4619      	mov	r1, r3
   811be:	4b41      	ldr	r3, [pc, #260]	; (812c4 <Cl_Alarm_translate_sensor_values+0x57c>)
   811c0:	4798      	blx	r3
			{
				
				temp1 = (float)sensordata/10;
   811c2:	88fa      	ldrh	r2, [r7, #6]
   811c4:	4b26      	ldr	r3, [pc, #152]	; (81260 <Cl_Alarm_translate_sensor_values+0x518>)
   811c6:	4610      	mov	r0, r2
   811c8:	4798      	blx	r3
   811ca:	4602      	mov	r2, r0
   811cc:	4b36      	ldr	r3, [pc, #216]	; (812a8 <Cl_Alarm_translate_sensor_values+0x560>)
   811ce:	4610      	mov	r0, r2
   811d0:	493d      	ldr	r1, [pc, #244]	; (812c8 <Cl_Alarm_translate_sensor_values+0x580>)
   811d2:	4798      	blx	r3
   811d4:	4603      	mov	r3, r0
   811d6:	461a      	mov	r2, r3
   811d8:	4b39      	ldr	r3, [pc, #228]	; (812c0 <Cl_Alarm_translate_sensor_values+0x578>)
   811da:	601a      	str	r2, [r3, #0]
				
			}
	}
	

	if(test_sensor_status[SENSOR_TEMP2STATUS].test_flag == true)
   811dc:	4b2a      	ldr	r3, [pc, #168]	; (81288 <Cl_Alarm_translate_sensor_values+0x540>)
   811de:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
   811e2:	2b00      	cmp	r3, #0
   811e4:	d00f      	beq.n	81206 <Cl_Alarm_translate_sensor_values+0x4be>
	{
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TESTT2",7);
   811e6:	2018      	movs	r0, #24
   811e8:	4938      	ldr	r1, [pc, #224]	; (812cc <Cl_Alarm_translate_sensor_values+0x584>)
   811ea:	2207      	movs	r2, #7
   811ec:	4b28      	ldr	r3, [pc, #160]	; (81290 <Cl_Alarm_translate_sensor_values+0x548>)
   811ee:	4798      	blx	r3
		temp2 =  test_sensor_status[SENSOR_TEMP2STATUS].test_sensord_data;
   811f0:	4b25      	ldr	r3, [pc, #148]	; (81288 <Cl_Alarm_translate_sensor_values+0x540>)
   811f2:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
   811f6:	b21a      	sxth	r2, r3
   811f8:	4b20      	ldr	r3, [pc, #128]	; (8127c <Cl_Alarm_translate_sensor_values+0x534>)
   811fa:	4610      	mov	r0, r2
   811fc:	4798      	blx	r3
   811fe:	4602      	mov	r2, r0
   81200:	4b33      	ldr	r3, [pc, #204]	; (812d0 <Cl_Alarm_translate_sensor_values+0x588>)
   81202:	601a      	str	r2, [r3, #0]
   81204:	e011      	b.n	8122a <Cl_Alarm_translate_sensor_values+0x4e2>
				
				
				temp2 = ((temp2* 4) +temp)/5;
		//temp2=temp2*10;
		*/
			Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS,&sensordata);
   81206:	1dbb      	adds	r3, r7, #6
   81208:	2013      	movs	r0, #19
   8120a:	4619      	mov	r1, r3
   8120c:	4b2d      	ldr	r3, [pc, #180]	; (812c4 <Cl_Alarm_translate_sensor_values+0x57c>)
   8120e:	4798      	blx	r3
			{
				
				temp2 = (float)sensordata/10;
   81210:	88fa      	ldrh	r2, [r7, #6]
   81212:	4b13      	ldr	r3, [pc, #76]	; (81260 <Cl_Alarm_translate_sensor_values+0x518>)
   81214:	4610      	mov	r0, r2
   81216:	4798      	blx	r3
   81218:	4602      	mov	r2, r0
   8121a:	4b23      	ldr	r3, [pc, #140]	; (812a8 <Cl_Alarm_translate_sensor_values+0x560>)
   8121c:	4610      	mov	r0, r2
   8121e:	492a      	ldr	r1, [pc, #168]	; (812c8 <Cl_Alarm_translate_sensor_values+0x580>)
   81220:	4798      	blx	r3
   81222:	4603      	mov	r3, r0
   81224:	461a      	mov	r2, r3
   81226:	4b2a      	ldr	r3, [pc, #168]	; (812d0 <Cl_Alarm_translate_sensor_values+0x588>)
   81228:	601a      	str	r2, [r3, #0]

				
			}
	}

	if(test_sensor_status[SENSOR_TEMP3STATUS].test_flag == true)
   8122a:	4b17      	ldr	r3, [pc, #92]	; (81288 <Cl_Alarm_translate_sensor_values+0x540>)
   8122c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
   81230:	2b00      	cmp	r3, #0
   81232:	d051      	beq.n	812d8 <Cl_Alarm_translate_sensor_values+0x590>
	{
		//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TESTT3",7);
		temp3 =  test_sensor_status[SENSOR_TEMP3STATUS].test_sensord_data;
   81234:	4b14      	ldr	r3, [pc, #80]	; (81288 <Cl_Alarm_translate_sensor_values+0x540>)
   81236:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
   8123a:	b21a      	sxth	r2, r3
   8123c:	4b0f      	ldr	r3, [pc, #60]	; (8127c <Cl_Alarm_translate_sensor_values+0x534>)
   8123e:	4610      	mov	r0, r2
   81240:	4798      	blx	r3
   81242:	4602      	mov	r2, r0
   81244:	4b23      	ldr	r3, [pc, #140]	; (812d4 <Cl_Alarm_translate_sensor_values+0x58c>)
   81246:	601a      	str	r2, [r3, #0]
   81248:	e058      	b.n	812fc <Cl_Alarm_translate_sensor_values+0x5b4>
   8124a:	bf00      	nop
   8124c:	f3af 8000 	nop.w
   81250:	a6a44418 	.word	0xa6a44418
   81254:	3fb74c5d 	.word	0x3fb74c5d
   81258:	39581062 	.word	0x39581062
   8125c:	407ebcb4 	.word	0x407ebcb4
   81260:	000a68a9 	.word	0x000a68a9
   81264:	20071748 	.word	0x20071748
   81268:	000a6031 	.word	0x000a6031
   8126c:	000a60d9 	.word	0x000a60d9
   81270:	000a5d75 	.word	0x000a5d75
   81274:	000a669d 	.word	0x000a669d
   81278:	20072224 	.word	0x20072224
   8127c:	000a68b1 	.word	0x000a68b1
   81280:	000a6ce5 	.word	0x000a6ce5
   81284:	000840d9 	.word	0x000840d9
   81288:	200725c0 	.word	0x200725c0
   8128c:	000a887c 	.word	0x000a887c
   81290:	0009ba51 	.word	0x0009ba51
   81294:	200720fc 	.word	0x200720fc
   81298:	000a6959 	.word	0x000a6959
   8129c:	42440000 	.word	0x42440000
   812a0:	20072170 	.word	0x20072170
   812a4:	000a6749 	.word	0x000a6749
   812a8:	000a6ac1 	.word	0x000a6ac1
   812ac:	42480000 	.word	0x42480000
   812b0:	00084271 	.word	0x00084271
   812b4:	2007173c 	.word	0x2007173c
   812b8:	20071784 	.word	0x20071784
   812bc:	000a8884 	.word	0x000a8884
   812c0:	2007174c 	.word	0x2007174c
   812c4:	0008e7f9 	.word	0x0008e7f9
   812c8:	41200000 	.word	0x41200000
   812cc:	000a888c 	.word	0x000a888c
   812d0:	20071750 	.word	0x20071750
   812d4:	20071754 	.word	0x20071754
				temp = temp - 0.4;
				
				temp3 = ((temp3* 4) +temp)/5;
		//temp3=temp3*10; */
			
				Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&sensordata);
   812d8:	1dbb      	adds	r3, r7, #6
   812da:	2014      	movs	r0, #20
   812dc:	4619      	mov	r1, r3
   812de:	4b84      	ldr	r3, [pc, #528]	; (814f0 <Cl_Alarm_translate_sensor_values+0x7a8>)
   812e0:	4798      	blx	r3
				{
					
					temp3 = (float)sensordata/10;
   812e2:	88fa      	ldrh	r2, [r7, #6]
   812e4:	4b83      	ldr	r3, [pc, #524]	; (814f4 <Cl_Alarm_translate_sensor_values+0x7ac>)
   812e6:	4610      	mov	r0, r2
   812e8:	4798      	blx	r3
   812ea:	4602      	mov	r2, r0
   812ec:	4b82      	ldr	r3, [pc, #520]	; (814f8 <Cl_Alarm_translate_sensor_values+0x7b0>)
   812ee:	4610      	mov	r0, r2
   812f0:	4982      	ldr	r1, [pc, #520]	; (814fc <Cl_Alarm_translate_sensor_values+0x7b4>)
   812f2:	4798      	blx	r3
   812f4:	4603      	mov	r3, r0
   812f6:	461a      	mov	r2, r3
   812f8:	4b81      	ldr	r3, [pc, #516]	; (81500 <Cl_Alarm_translate_sensor_values+0x7b8>)
   812fa:	601a      	str	r2, [r3, #0]
			
	}
	

	
	if(test_sensor_status[SENSOR_COND_STATUS].test_flag == true)
   812fc:	4b81      	ldr	r3, [pc, #516]	; (81504 <Cl_Alarm_translate_sensor_values+0x7bc>)
   812fe:	7f9b      	ldrb	r3, [r3, #30]
   81300:	2b00      	cmp	r3, #0
   81302:	d00e      	beq.n	81322 <Cl_Alarm_translate_sensor_values+0x5da>
	{
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TESTCOND",5);
   81304:	2018      	movs	r0, #24
   81306:	4980      	ldr	r1, [pc, #512]	; (81508 <Cl_Alarm_translate_sensor_values+0x7c0>)
   81308:	2205      	movs	r2, #5
   8130a:	4b80      	ldr	r3, [pc, #512]	; (8150c <Cl_Alarm_translate_sensor_values+0x7c4>)
   8130c:	4798      	blx	r3
		cond_final =  test_sensor_status[SENSOR_COND_STATUS].test_sensord_data;
   8130e:	4b7d      	ldr	r3, [pc, #500]	; (81504 <Cl_Alarm_translate_sensor_values+0x7bc>)
   81310:	8b9b      	ldrh	r3, [r3, #28]
   81312:	b21a      	sxth	r2, r3
   81314:	4b7e      	ldr	r3, [pc, #504]	; (81510 <Cl_Alarm_translate_sensor_values+0x7c8>)
   81316:	4610      	mov	r0, r2
   81318:	4798      	blx	r3
   8131a:	4602      	mov	r2, r0
   8131c:	4b7d      	ldr	r3, [pc, #500]	; (81514 <Cl_Alarm_translate_sensor_values+0x7cc>)
   8131e:	601a      	str	r2, [r3, #0]
   81320:	e0c7      	b.n	814b2 <Cl_Alarm_translate_sensor_values+0x76a>
	{
		
/*		cond1 =  -0.0001 * cl_sys_statbuffer.cond_status * cl_sys_statbuffer.cond_status   + 0.36 * cl_sys_statbuffer.cond_status  - 38.39 ;
		cond_final= (cond1/(1+(temp3-25.0)*0.020)/10);
*/
	Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_STATUS,&sensordata);
   81322:	1dbb      	adds	r3, r7, #6
   81324:	2007      	movs	r0, #7
   81326:	4619      	mov	r1, r3
   81328:	4b71      	ldr	r3, [pc, #452]	; (814f0 <Cl_Alarm_translate_sensor_values+0x7a8>)
   8132a:	4798      	blx	r3
	{
		
		float cond_comp=0;
   8132c:	f04f 0300 	mov.w	r3, #0
   81330:	61fb      	str	r3, [r7, #28]
		float temp2=0;
   81332:	f04f 0300 	mov.w	r3, #0
   81336:	61bb      	str	r3, [r7, #24]
		float	 cond1,	cond_final, cond1x100, cond_final_X10000;
		sensordata = sensordata/10;
   81338:	88fb      	ldrh	r3, [r7, #6]
   8133a:	4a77      	ldr	r2, [pc, #476]	; (81518 <Cl_Alarm_translate_sensor_values+0x7d0>)
   8133c:	fba2 2303 	umull	r2, r3, r2, r3
   81340:	08db      	lsrs	r3, r3, #3
   81342:	b29b      	uxth	r3, r3
   81344:	80fb      	strh	r3, [r7, #6]
		if (sensordata > 50)
   81346:	88fb      	ldrh	r3, [r7, #6]
   81348:	2b32      	cmp	r3, #50	; 0x32
   8134a:	f240 80af 	bls.w	814ac <Cl_Alarm_translate_sensor_values+0x764>
		{
			
			cond1 = sensordata/100;
   8134e:	88fb      	ldrh	r3, [r7, #6]
   81350:	4a72      	ldr	r2, [pc, #456]	; (8151c <Cl_Alarm_translate_sensor_values+0x7d4>)
   81352:	fba2 2303 	umull	r2, r3, r2, r3
   81356:	095b      	lsrs	r3, r3, #5
   81358:	b29b      	uxth	r3, r3
   8135a:	461a      	mov	r2, r3
   8135c:	4b6c      	ldr	r3, [pc, #432]	; (81510 <Cl_Alarm_translate_sensor_values+0x7c8>)
   8135e:	4610      	mov	r0, r2
   81360:	4798      	blx	r3
   81362:	4603      	mov	r3, r0
   81364:	617b      	str	r3, [r7, #20]
			cond_final = 0.0001*cond1*cond1 + 0.032*cond1 +0.91 + 0.4;
   81366:	4b6e      	ldr	r3, [pc, #440]	; (81520 <Cl_Alarm_translate_sensor_values+0x7d8>)
   81368:	6978      	ldr	r0, [r7, #20]
   8136a:	4798      	blx	r3
   8136c:	4602      	mov	r2, r0
   8136e:	460b      	mov	r3, r1
   81370:	4c6c      	ldr	r4, [pc, #432]	; (81524 <Cl_Alarm_translate_sensor_values+0x7dc>)
   81372:	4610      	mov	r0, r2
   81374:	4619      	mov	r1, r3
   81376:	a352      	add	r3, pc, #328	; (adr r3, 814c0 <Cl_Alarm_translate_sensor_values+0x778>)
   81378:	e9d3 2300 	ldrd	r2, r3, [r3]
   8137c:	47a0      	blx	r4
   8137e:	4602      	mov	r2, r0
   81380:	460b      	mov	r3, r1
   81382:	4690      	mov	r8, r2
   81384:	4699      	mov	r9, r3
   81386:	4b66      	ldr	r3, [pc, #408]	; (81520 <Cl_Alarm_translate_sensor_values+0x7d8>)
   81388:	6978      	ldr	r0, [r7, #20]
   8138a:	4798      	blx	r3
   8138c:	4602      	mov	r2, r0
   8138e:	460b      	mov	r3, r1
   81390:	4c64      	ldr	r4, [pc, #400]	; (81524 <Cl_Alarm_translate_sensor_values+0x7dc>)
   81392:	4640      	mov	r0, r8
   81394:	4649      	mov	r1, r9
   81396:	47a0      	blx	r4
   81398:	4602      	mov	r2, r0
   8139a:	460b      	mov	r3, r1
   8139c:	4690      	mov	r8, r2
   8139e:	4699      	mov	r9, r3
   813a0:	4b5f      	ldr	r3, [pc, #380]	; (81520 <Cl_Alarm_translate_sensor_values+0x7d8>)
   813a2:	6978      	ldr	r0, [r7, #20]
   813a4:	4798      	blx	r3
   813a6:	4602      	mov	r2, r0
   813a8:	460b      	mov	r3, r1
   813aa:	4c5e      	ldr	r4, [pc, #376]	; (81524 <Cl_Alarm_translate_sensor_values+0x7dc>)
   813ac:	4610      	mov	r0, r2
   813ae:	4619      	mov	r1, r3
   813b0:	a345      	add	r3, pc, #276	; (adr r3, 814c8 <Cl_Alarm_translate_sensor_values+0x780>)
   813b2:	e9d3 2300 	ldrd	r2, r3, [r3]
   813b6:	47a0      	blx	r4
   813b8:	4602      	mov	r2, r0
   813ba:	460b      	mov	r3, r1
   813bc:	4c5a      	ldr	r4, [pc, #360]	; (81528 <Cl_Alarm_translate_sensor_values+0x7e0>)
   813be:	4640      	mov	r0, r8
   813c0:	4649      	mov	r1, r9
   813c2:	47a0      	blx	r4
   813c4:	4602      	mov	r2, r0
   813c6:	460b      	mov	r3, r1
   813c8:	4c57      	ldr	r4, [pc, #348]	; (81528 <Cl_Alarm_translate_sensor_values+0x7e0>)
   813ca:	4610      	mov	r0, r2
   813cc:	4619      	mov	r1, r3
   813ce:	a340      	add	r3, pc, #256	; (adr r3, 814d0 <Cl_Alarm_translate_sensor_values+0x788>)
   813d0:	e9d3 2300 	ldrd	r2, r3, [r3]
   813d4:	47a0      	blx	r4
   813d6:	4602      	mov	r2, r0
   813d8:	460b      	mov	r3, r1
   813da:	4c53      	ldr	r4, [pc, #332]	; (81528 <Cl_Alarm_translate_sensor_values+0x7e0>)
   813dc:	4610      	mov	r0, r2
   813de:	4619      	mov	r1, r3
   813e0:	a33d      	add	r3, pc, #244	; (adr r3, 814d8 <Cl_Alarm_translate_sensor_values+0x790>)
   813e2:	e9d3 2300 	ldrd	r2, r3, [r3]
   813e6:	47a0      	blx	r4
   813e8:	4602      	mov	r2, r0
   813ea:	460b      	mov	r3, r1
   813ec:	4610      	mov	r0, r2
   813ee:	4619      	mov	r1, r3
   813f0:	4b4e      	ldr	r3, [pc, #312]	; (8152c <Cl_Alarm_translate_sensor_values+0x7e4>)
   813f2:	4798      	blx	r3
   813f4:	4603      	mov	r3, r0
   813f6:	613b      	str	r3, [r7, #16]
			cond1x100 = cond_final*100; ;
   813f8:	4b4d      	ldr	r3, [pc, #308]	; (81530 <Cl_Alarm_translate_sensor_values+0x7e8>)
   813fa:	6938      	ldr	r0, [r7, #16]
   813fc:	494d      	ldr	r1, [pc, #308]	; (81534 <Cl_Alarm_translate_sensor_values+0x7ec>)
   813fe:	4798      	blx	r3
   81400:	4603      	mov	r3, r0
   81402:	60fb      	str	r3, [r7, #12]
			cond_final_X10000= (cond1x100/(1+(temp3/10  -25.0)*0.021));
   81404:	4b46      	ldr	r3, [pc, #280]	; (81520 <Cl_Alarm_translate_sensor_values+0x7d8>)
   81406:	68f8      	ldr	r0, [r7, #12]
   81408:	4798      	blx	r3
   8140a:	4680      	mov	r8, r0
   8140c:	4689      	mov	r9, r1
   8140e:	4b3c      	ldr	r3, [pc, #240]	; (81500 <Cl_Alarm_translate_sensor_values+0x7b8>)
   81410:	681a      	ldr	r2, [r3, #0]
   81412:	4b39      	ldr	r3, [pc, #228]	; (814f8 <Cl_Alarm_translate_sensor_values+0x7b0>)
   81414:	4610      	mov	r0, r2
   81416:	4939      	ldr	r1, [pc, #228]	; (814fc <Cl_Alarm_translate_sensor_values+0x7b4>)
   81418:	4798      	blx	r3
   8141a:	4603      	mov	r3, r0
   8141c:	461a      	mov	r2, r3
   8141e:	4b40      	ldr	r3, [pc, #256]	; (81520 <Cl_Alarm_translate_sensor_values+0x7d8>)
   81420:	4610      	mov	r0, r2
   81422:	4798      	blx	r3
   81424:	4602      	mov	r2, r0
   81426:	460b      	mov	r3, r1
   81428:	4c43      	ldr	r4, [pc, #268]	; (81538 <Cl_Alarm_translate_sensor_values+0x7f0>)
   8142a:	4610      	mov	r0, r2
   8142c:	4619      	mov	r1, r3
   8142e:	f04f 0200 	mov.w	r2, #0
   81432:	4b42      	ldr	r3, [pc, #264]	; (8153c <Cl_Alarm_translate_sensor_values+0x7f4>)
   81434:	47a0      	blx	r4
   81436:	4602      	mov	r2, r0
   81438:	460b      	mov	r3, r1
   8143a:	4c3a      	ldr	r4, [pc, #232]	; (81524 <Cl_Alarm_translate_sensor_values+0x7dc>)
   8143c:	4610      	mov	r0, r2
   8143e:	4619      	mov	r1, r3
   81440:	a327      	add	r3, pc, #156	; (adr r3, 814e0 <Cl_Alarm_translate_sensor_values+0x798>)
   81442:	e9d3 2300 	ldrd	r2, r3, [r3]
   81446:	47a0      	blx	r4
   81448:	4602      	mov	r2, r0
   8144a:	460b      	mov	r3, r1
   8144c:	4c36      	ldr	r4, [pc, #216]	; (81528 <Cl_Alarm_translate_sensor_values+0x7e0>)
   8144e:	4610      	mov	r0, r2
   81450:	4619      	mov	r1, r3
   81452:	f04f 0200 	mov.w	r2, #0
   81456:	4b3a      	ldr	r3, [pc, #232]	; (81540 <Cl_Alarm_translate_sensor_values+0x7f8>)
   81458:	47a0      	blx	r4
   8145a:	4602      	mov	r2, r0
   8145c:	460b      	mov	r3, r1
   8145e:	4c39      	ldr	r4, [pc, #228]	; (81544 <Cl_Alarm_translate_sensor_values+0x7fc>)
   81460:	4640      	mov	r0, r8
   81462:	4649      	mov	r1, r9
   81464:	47a0      	blx	r4
   81466:	4602      	mov	r2, r0
   81468:	460b      	mov	r3, r1
   8146a:	4610      	mov	r0, r2
   8146c:	4619      	mov	r1, r3
   8146e:	4b2f      	ldr	r3, [pc, #188]	; (8152c <Cl_Alarm_translate_sensor_values+0x7e4>)
   81470:	4798      	blx	r3
   81472:	4603      	mov	r3, r0
   81474:	60bb      	str	r3, [r7, #8]
			cond_final_X10000 =	cond_final_X10000 * 5.3 ;
   81476:	4b2a      	ldr	r3, [pc, #168]	; (81520 <Cl_Alarm_translate_sensor_values+0x7d8>)
   81478:	68b8      	ldr	r0, [r7, #8]
   8147a:	4798      	blx	r3
   8147c:	4602      	mov	r2, r0
   8147e:	460b      	mov	r3, r1
   81480:	4c28      	ldr	r4, [pc, #160]	; (81524 <Cl_Alarm_translate_sensor_values+0x7dc>)
   81482:	4610      	mov	r0, r2
   81484:	4619      	mov	r1, r3
   81486:	a318      	add	r3, pc, #96	; (adr r3, 814e8 <Cl_Alarm_translate_sensor_values+0x7a0>)
   81488:	e9d3 2300 	ldrd	r2, r3, [r3]
   8148c:	47a0      	blx	r4
   8148e:	4602      	mov	r2, r0
   81490:	460b      	mov	r3, r1
   81492:	4610      	mov	r0, r2
   81494:	4619      	mov	r1, r3
   81496:	4b25      	ldr	r3, [pc, #148]	; (8152c <Cl_Alarm_translate_sensor_values+0x7e4>)
   81498:	4798      	blx	r3
   8149a:	4603      	mov	r3, r0
   8149c:	60bb      	str	r3, [r7, #8]
			
			
			//	cond =  -0.0001 * temp* temp  + 0.36 * temp  - 38.39 ;
			//	cond_comp= cond/(1+(tmp3/100-25.0)*0.020);
			cond_final = (cond_final_X10000/10);
   8149e:	4b16      	ldr	r3, [pc, #88]	; (814f8 <Cl_Alarm_translate_sensor_values+0x7b0>)
   814a0:	68b8      	ldr	r0, [r7, #8]
   814a2:	4916      	ldr	r1, [pc, #88]	; (814fc <Cl_Alarm_translate_sensor_values+0x7b4>)
   814a4:	4798      	blx	r3
   814a6:	4603      	mov	r3, r0
   814a8:	613b      	str	r3, [r7, #16]
   814aa:	e002      	b.n	814b2 <Cl_Alarm_translate_sensor_values+0x76a>
			
		}
		else
		{
			cond_final = 0;
   814ac:	f04f 0300 	mov.w	r3, #0
   814b0:	613b      	str	r3, [r7, #16]
		
	}										

	}
	
}
   814b2:	4618      	mov	r0, r3
   814b4:	372c      	adds	r7, #44	; 0x2c
   814b6:	46bd      	mov	sp, r7
   814b8:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}
   814bc:	f3af 8000 	nop.w
   814c0:	eb1c432d 	.word	0xeb1c432d
   814c4:	3f1a36e2 	.word	0x3f1a36e2
   814c8:	d2f1a9fc 	.word	0xd2f1a9fc
   814cc:	3fa0624d 	.word	0x3fa0624d
   814d0:	51eb851f 	.word	0x51eb851f
   814d4:	3fed1eb8 	.word	0x3fed1eb8
   814d8:	9999999a 	.word	0x9999999a
   814dc:	3fd99999 	.word	0x3fd99999
   814e0:	24dd2f1b 	.word	0x24dd2f1b
   814e4:	3f958106 	.word	0x3f958106
   814e8:	33333333 	.word	0x33333333
   814ec:	40153333 	.word	0x40153333
   814f0:	0008e7f9 	.word	0x0008e7f9
   814f4:	000a68a9 	.word	0x000a68a9
   814f8:	000a6ac1 	.word	0x000a6ac1
   814fc:	41200000 	.word	0x41200000
   81500:	20071754 	.word	0x20071754
   81504:	200725c0 	.word	0x200725c0
   81508:	000a8894 	.word	0x000a8894
   8150c:	0009ba51 	.word	0x0009ba51
   81510:	000a68b1 	.word	0x000a68b1
   81514:	20071758 	.word	0x20071758
   81518:	cccccccd 	.word	0xcccccccd
   8151c:	51eb851f 	.word	0x51eb851f
   81520:	000a6031 	.word	0x000a6031
   81524:	000a60d9 	.word	0x000a60d9
   81528:	000a5d75 	.word	0x000a5d75
   8152c:	000a669d 	.word	0x000a669d
   81530:	000a6959 	.word	0x000a6959
   81534:	42c80000 	.word	0x42c80000
   81538:	000a5d71 	.word	0x000a5d71
   8153c:	40390000 	.word	0x40390000
   81540:	3ff00000 	.word	0x3ff00000
   81544:	000a632d 	.word	0x000a632d

00081548 <Cl_alarms_scanforAlarms>:
 * \return CL_OK on success. 
 * \Globals used : Cl_alarms_alarms[]
 */
  
Cl_ReturnCodeType Cl_alarms_scanforAlarms(void)
{
   81548:	b580      	push	{r7, lr}
   8154a:	b082      	sub	sp, #8
   8154c:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType Cl_alarms_retcode;
	
	 Cl_alarms_retcode = Cl_Alarm_translate_sensor_values();
   8154e:	4b94      	ldr	r3, [pc, #592]	; (817a0 <Cl_alarms_scanforAlarms+0x258>)
   81550:	4798      	blx	r3
   81552:	4603      	mov	r3, r0
   81554:	71fb      	strb	r3, [r7, #7]
	 ASSERT_ERROR(Cl_alarms_retcode);
   81556:	79fb      	ldrb	r3, [r7, #7]
   81558:	2b00      	cmp	r3, #0
   8155a:	d001      	beq.n	81560 <Cl_alarms_scanforAlarms+0x18>
   8155c:	4b91      	ldr	r3, [pc, #580]	; (817a4 <Cl_alarms_scanforAlarms+0x25c>)
   8155e:	4798      	blx	r3
	
	if(Cl_alarms_alarms[POWER_FAILURE].cl_is_enabled){
   81560:	4b91      	ldr	r3, [pc, #580]	; (817a8 <Cl_alarms_scanforAlarms+0x260>)
   81562:	f893 31de 	ldrb.w	r3, [r3, #478]	; 0x1de
   81566:	2b00      	cmp	r3, #0
   81568:	d033      	beq.n	815d2 <Cl_alarms_scanforAlarms+0x8a>
		
		if(cl_sys_statbuffer.PowerFailure)
   8156a:	4b90      	ldr	r3, [pc, #576]	; (817ac <Cl_alarms_scanforAlarms+0x264>)
   8156c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
   81570:	2b00      	cmp	r3, #0
   81572:	d02a      	beq.n	815ca <Cl_alarms_scanforAlarms+0x82>
		{

			Cl_alarms_alarms[POWER_FAILURE].cl_alarmstate = CL_ALARM_DETECTED;
   81574:	4b8c      	ldr	r3, [pc, #560]	; (817a8 <Cl_alarms_scanforAlarms+0x260>)
   81576:	2201      	movs	r2, #1
   81578:	f883 21d2 	strb.w	r2, [r3, #466]	; 0x1d2
			Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=POWER_FAILURE; 
   8157c:	4b8c      	ldr	r3, [pc, #560]	; (817b0 <Cl_alarms_scanforAlarms+0x268>)
   8157e:	781b      	ldrb	r3, [r3, #0]
   81580:	4a8b      	ldr	r2, [pc, #556]	; (817b0 <Cl_alarms_scanforAlarms+0x268>)
   81582:	3301      	adds	r3, #1
   81584:	00db      	lsls	r3, r3, #3
   81586:	4413      	add	r3, r2
   81588:	221d      	movs	r2, #29
   8158a:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[POWER_FAILURE].cl_detected_count++;
   8158c:	4b86      	ldr	r3, [pc, #536]	; (817a8 <Cl_alarms_scanforAlarms+0x260>)
   8158e:	f893 31dd 	ldrb.w	r3, [r3, #477]	; 0x1dd
   81592:	3301      	adds	r3, #1
   81594:	b2da      	uxtb	r2, r3
   81596:	4b84      	ldr	r3, [pc, #528]	; (817a8 <Cl_alarms_scanforAlarms+0x260>)
   81598:	f883 21dd 	strb.w	r2, [r3, #477]	; 0x1dd
			cl_alarm_triggered = true;
   8159c:	4b85      	ldr	r3, [pc, #532]	; (817b4 <Cl_alarms_scanforAlarms+0x26c>)
   8159e:	2201      	movs	r2, #1
   815a0:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = POWER_FAILURE;
   815a2:	4b85      	ldr	r3, [pc, #532]	; (817b8 <Cl_alarms_scanforAlarms+0x270>)
   815a4:	221d      	movs	r2, #29
   815a6:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   815a8:	4b81      	ldr	r3, [pc, #516]	; (817b0 <Cl_alarms_scanforAlarms+0x268>)
   815aa:	781b      	ldrb	r3, [r3, #0]
   815ac:	461a      	mov	r2, r3
   815ae:	4b80      	ldr	r3, [pc, #512]	; (817b0 <Cl_alarms_scanforAlarms+0x268>)
   815b0:	4413      	add	r3, r2
   815b2:	222e      	movs	r2, #46	; 0x2e
   815b4:	709a      	strb	r2, [r3, #2]
			Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   815b6:	4b81      	ldr	r3, [pc, #516]	; (817bc <Cl_alarms_scanforAlarms+0x274>)
   815b8:	4798      	blx	r3
   815ba:	4603      	mov	r3, r0
   815bc:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   815be:	79fb      	ldrb	r3, [r7, #7]
   815c0:	2b00      	cmp	r3, #0
   815c2:	d006      	beq.n	815d2 <Cl_alarms_scanforAlarms+0x8a>
   815c4:	4b77      	ldr	r3, [pc, #476]	; (817a4 <Cl_alarms_scanforAlarms+0x25c>)
   815c6:	4798      	blx	r3
   815c8:	e003      	b.n	815d2 <Cl_alarms_scanforAlarms+0x8a>
		}
		else
		{
			Cl_alarms_alarms[POWER_FAILURE].cl_alarmstate = CL_ALARM_INACTIVE;
   815ca:	4b77      	ldr	r3, [pc, #476]	; (817a8 <Cl_alarms_scanforAlarms+0x260>)
   815cc:	2204      	movs	r2, #4
   815ce:	f883 21d2 	strb.w	r2, [r3, #466]	; 0x1d2
		
	}
	
	
	
	if (Cl_alarms_alarms[ACID_IN_OPEN].cl_is_enabled)
   815d2:	4b75      	ldr	r3, [pc, #468]	; (817a8 <Cl_alarms_scanforAlarms+0x260>)
   815d4:	f893 329e 	ldrb.w	r3, [r3, #670]	; 0x29e
   815d8:	2b00      	cmp	r3, #0
   815da:	d048      	beq.n	8166e <Cl_alarms_scanforAlarms+0x126>
	{
		
		if(((Cl_alarms_alarms[ACID_IN_OPEN].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.acid_inlet_status )) || ((Cl_alarms_alarms[ACID_IN_OPEN].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.acid_inlet_status )) )
   815dc:	4b72      	ldr	r3, [pc, #456]	; (817a8 <Cl_alarms_scanforAlarms+0x260>)
   815de:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
   815e2:	2b01      	cmp	r3, #1
   815e4:	d104      	bne.n	815f0 <Cl_alarms_scanforAlarms+0xa8>
   815e6:	4b71      	ldr	r3, [pc, #452]	; (817ac <Cl_alarms_scanforAlarms+0x264>)
   815e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
   815ec:	2b00      	cmp	r3, #0
   815ee:	d109      	bne.n	81604 <Cl_alarms_scanforAlarms+0xbc>
   815f0:	4b6d      	ldr	r3, [pc, #436]	; (817a8 <Cl_alarms_scanforAlarms+0x260>)
   815f2:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
   815f6:	2b00      	cmp	r3, #0
   815f8:	d135      	bne.n	81666 <Cl_alarms_scanforAlarms+0x11e>
   815fa:	4b6c      	ldr	r3, [pc, #432]	; (817ac <Cl_alarms_scanforAlarms+0x264>)
   815fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
   81600:	2b00      	cmp	r3, #0
   81602:	d130      	bne.n	81666 <Cl_alarms_scanforAlarms+0x11e>
		{
			if(Cl_alarms_alarms[ACID_IN_OPEN].cl_alarmstate != CL_ALARM_DETECTED)
   81604:	4b68      	ldr	r3, [pc, #416]	; (817a8 <Cl_alarms_scanforAlarms+0x260>)
   81606:	f893 3292 	ldrb.w	r3, [r3, #658]	; 0x292
   8160a:	2b01      	cmp	r3, #1
   8160c:	d02a      	beq.n	81664 <Cl_alarms_scanforAlarms+0x11c>
			{
			Cl_alarms_alarms[ACID_IN_OPEN].cl_alarmstate = CL_ALARM_DETECTED;
   8160e:	4b66      	ldr	r3, [pc, #408]	; (817a8 <Cl_alarms_scanforAlarms+0x260>)
   81610:	2201      	movs	r2, #1
   81612:	f883 2292 	strb.w	r2, [r3, #658]	; 0x292
			Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=ACID_IN_OPEN;
   81616:	4b66      	ldr	r3, [pc, #408]	; (817b0 <Cl_alarms_scanforAlarms+0x268>)
   81618:	781b      	ldrb	r3, [r3, #0]
   8161a:	4a65      	ldr	r2, [pc, #404]	; (817b0 <Cl_alarms_scanforAlarms+0x268>)
   8161c:	3301      	adds	r3, #1
   8161e:	00db      	lsls	r3, r3, #3
   81620:	4413      	add	r3, r2
   81622:	2229      	movs	r2, #41	; 0x29
   81624:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[ACID_IN_OPEN].cl_detected_count++;
   81626:	4b60      	ldr	r3, [pc, #384]	; (817a8 <Cl_alarms_scanforAlarms+0x260>)
   81628:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
   8162c:	3301      	adds	r3, #1
   8162e:	b2da      	uxtb	r2, r3
   81630:	4b5d      	ldr	r3, [pc, #372]	; (817a8 <Cl_alarms_scanforAlarms+0x260>)
   81632:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
			cl_alarm_triggered = true;
   81636:	4b5f      	ldr	r3, [pc, #380]	; (817b4 <Cl_alarms_scanforAlarms+0x26c>)
   81638:	2201      	movs	r2, #1
   8163a:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = ACID_IN_OPEN;
   8163c:	4b5e      	ldr	r3, [pc, #376]	; (817b8 <Cl_alarms_scanforAlarms+0x270>)
   8163e:	2229      	movs	r2, #41	; 0x29
   81640:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81642:	4b5b      	ldr	r3, [pc, #364]	; (817b0 <Cl_alarms_scanforAlarms+0x268>)
   81644:	781b      	ldrb	r3, [r3, #0]
   81646:	461a      	mov	r2, r3
   81648:	4b59      	ldr	r3, [pc, #356]	; (817b0 <Cl_alarms_scanforAlarms+0x268>)
   8164a:	4413      	add	r3, r2
   8164c:	222e      	movs	r2, #46	; 0x2e
   8164e:	709a      	strb	r2, [r3, #2]
			Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   81650:	4b5a      	ldr	r3, [pc, #360]	; (817bc <Cl_alarms_scanforAlarms+0x274>)
   81652:	4798      	blx	r3
   81654:	4603      	mov	r3, r0
   81656:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   81658:	79fb      	ldrb	r3, [r7, #7]
   8165a:	2b00      	cmp	r3, #0
   8165c:	d002      	beq.n	81664 <Cl_alarms_scanforAlarms+0x11c>
   8165e:	4b51      	ldr	r3, [pc, #324]	; (817a4 <Cl_alarms_scanforAlarms+0x25c>)
   81660:	4798      	blx	r3
	if (Cl_alarms_alarms[ACID_IN_OPEN].cl_is_enabled)
	{
		
		if(((Cl_alarms_alarms[ACID_IN_OPEN].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.acid_inlet_status )) || ((Cl_alarms_alarms[ACID_IN_OPEN].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.acid_inlet_status )) )
		{
			if(Cl_alarms_alarms[ACID_IN_OPEN].cl_alarmstate != CL_ALARM_DETECTED)
   81662:	e004      	b.n	8166e <Cl_alarms_scanforAlarms+0x126>
   81664:	e003      	b.n	8166e <Cl_alarms_scanforAlarms+0x126>
			ASSERT_ERROR(Cl_alarms_retcode);
			}
		}
		else
		{
			Cl_alarms_alarms[ACID_IN_OPEN].cl_alarmstate = CL_ALARM_INACTIVE;
   81666:	4b50      	ldr	r3, [pc, #320]	; (817a8 <Cl_alarms_scanforAlarms+0x260>)
   81668:	2204      	movs	r2, #4
   8166a:	f883 2292 	strb.w	r2, [r3, #658]	; 0x292
		}	
	}
	if (Cl_alarms_alarms[ACID_IN_CLOSED].cl_is_enabled)
   8166e:	4b4e      	ldr	r3, [pc, #312]	; (817a8 <Cl_alarms_scanforAlarms+0x260>)
   81670:	f893 32ae 	ldrb.w	r3, [r3, #686]	; 0x2ae
   81674:	2b00      	cmp	r3, #0
   81676:	d048      	beq.n	8170a <Cl_alarms_scanforAlarms+0x1c2>
	{
		
		if(((Cl_alarms_alarms[ACID_IN_CLOSED].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.acid_inlet_status )) || ((Cl_alarms_alarms[ACID_IN_CLOSED].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.acid_inlet_status )) )
   81678:	4b4b      	ldr	r3, [pc, #300]	; (817a8 <Cl_alarms_scanforAlarms+0x260>)
   8167a:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
   8167e:	2b01      	cmp	r3, #1
   81680:	d104      	bne.n	8168c <Cl_alarms_scanforAlarms+0x144>
   81682:	4b4a      	ldr	r3, [pc, #296]	; (817ac <Cl_alarms_scanforAlarms+0x264>)
   81684:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
   81688:	2b00      	cmp	r3, #0
   8168a:	d109      	bne.n	816a0 <Cl_alarms_scanforAlarms+0x158>
   8168c:	4b46      	ldr	r3, [pc, #280]	; (817a8 <Cl_alarms_scanforAlarms+0x260>)
   8168e:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
   81692:	2b00      	cmp	r3, #0
   81694:	d135      	bne.n	81702 <Cl_alarms_scanforAlarms+0x1ba>
   81696:	4b45      	ldr	r3, [pc, #276]	; (817ac <Cl_alarms_scanforAlarms+0x264>)
   81698:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
   8169c:	2b00      	cmp	r3, #0
   8169e:	d130      	bne.n	81702 <Cl_alarms_scanforAlarms+0x1ba>
		{
			if(Cl_alarms_alarms[ACID_IN_CLOSED].cl_alarmstate != CL_ALARM_DETECTED)
   816a0:	4b41      	ldr	r3, [pc, #260]	; (817a8 <Cl_alarms_scanforAlarms+0x260>)
   816a2:	f893 32a2 	ldrb.w	r3, [r3, #674]	; 0x2a2
   816a6:	2b01      	cmp	r3, #1
   816a8:	d02a      	beq.n	81700 <Cl_alarms_scanforAlarms+0x1b8>
			{
				Cl_alarms_alarms[ACID_IN_CLOSED].cl_alarmstate = CL_ALARM_DETECTED;
   816aa:	4b3f      	ldr	r3, [pc, #252]	; (817a8 <Cl_alarms_scanforAlarms+0x260>)
   816ac:	2201      	movs	r2, #1
   816ae:	f883 22a2 	strb.w	r2, [r3, #674]	; 0x2a2
				Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=ACID_IN_OPEN;
   816b2:	4b3f      	ldr	r3, [pc, #252]	; (817b0 <Cl_alarms_scanforAlarms+0x268>)
   816b4:	781b      	ldrb	r3, [r3, #0]
   816b6:	4a3e      	ldr	r2, [pc, #248]	; (817b0 <Cl_alarms_scanforAlarms+0x268>)
   816b8:	3301      	adds	r3, #1
   816ba:	00db      	lsls	r3, r3, #3
   816bc:	4413      	add	r3, r2
   816be:	2229      	movs	r2, #41	; 0x29
   816c0:	809a      	strh	r2, [r3, #4]
				Cl_alarms_alarms[ACID_IN_CLOSED].cl_detected_count++;
   816c2:	4b39      	ldr	r3, [pc, #228]	; (817a8 <Cl_alarms_scanforAlarms+0x260>)
   816c4:	f893 32ad 	ldrb.w	r3, [r3, #685]	; 0x2ad
   816c8:	3301      	adds	r3, #1
   816ca:	b2da      	uxtb	r2, r3
   816cc:	4b36      	ldr	r3, [pc, #216]	; (817a8 <Cl_alarms_scanforAlarms+0x260>)
   816ce:	f883 22ad 	strb.w	r2, [r3, #685]	; 0x2ad
				cl_alarm_triggered = true;
   816d2:	4b38      	ldr	r3, [pc, #224]	; (817b4 <Cl_alarms_scanforAlarms+0x26c>)
   816d4:	2201      	movs	r2, #1
   816d6:	701a      	strb	r2, [r3, #0]
				cl_lastalarmid = ACID_IN_CLOSED;
   816d8:	4b37      	ldr	r3, [pc, #220]	; (817b8 <Cl_alarms_scanforAlarms+0x270>)
   816da:	222a      	movs	r2, #42	; 0x2a
   816dc:	701a      	strb	r2, [r3, #0]
				Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   816de:	4b34      	ldr	r3, [pc, #208]	; (817b0 <Cl_alarms_scanforAlarms+0x268>)
   816e0:	781b      	ldrb	r3, [r3, #0]
   816e2:	461a      	mov	r2, r3
   816e4:	4b32      	ldr	r3, [pc, #200]	; (817b0 <Cl_alarms_scanforAlarms+0x268>)
   816e6:	4413      	add	r3, r2
   816e8:	222e      	movs	r2, #46	; 0x2e
   816ea:	709a      	strb	r2, [r3, #2]
				Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   816ec:	4b33      	ldr	r3, [pc, #204]	; (817bc <Cl_alarms_scanforAlarms+0x274>)
   816ee:	4798      	blx	r3
   816f0:	4603      	mov	r3, r0
   816f2:	71fb      	strb	r3, [r7, #7]
				ASSERT_ERROR(Cl_alarms_retcode);
   816f4:	79fb      	ldrb	r3, [r7, #7]
   816f6:	2b00      	cmp	r3, #0
   816f8:	d002      	beq.n	81700 <Cl_alarms_scanforAlarms+0x1b8>
   816fa:	4b2a      	ldr	r3, [pc, #168]	; (817a4 <Cl_alarms_scanforAlarms+0x25c>)
   816fc:	4798      	blx	r3
	if (Cl_alarms_alarms[ACID_IN_CLOSED].cl_is_enabled)
	{
		
		if(((Cl_alarms_alarms[ACID_IN_CLOSED].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.acid_inlet_status )) || ((Cl_alarms_alarms[ACID_IN_CLOSED].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.acid_inlet_status )) )
		{
			if(Cl_alarms_alarms[ACID_IN_CLOSED].cl_alarmstate != CL_ALARM_DETECTED)
   816fe:	e004      	b.n	8170a <Cl_alarms_scanforAlarms+0x1c2>
   81700:	e003      	b.n	8170a <Cl_alarms_scanforAlarms+0x1c2>
				ASSERT_ERROR(Cl_alarms_retcode);
			}
		}
		else
		{
			Cl_alarms_alarms[ACID_IN_OPEN].cl_alarmstate = CL_ALARM_INACTIVE;
   81702:	4b29      	ldr	r3, [pc, #164]	; (817a8 <Cl_alarms_scanforAlarms+0x260>)
   81704:	2204      	movs	r2, #4
   81706:	f883 2292 	strb.w	r2, [r3, #658]	; 0x292
		}
	}
	
	if (Cl_alarms_alarms[BICARB_IN_OPEN].cl_is_enabled)
   8170a:	4b27      	ldr	r3, [pc, #156]	; (817a8 <Cl_alarms_scanforAlarms+0x260>)
   8170c:	f893 32be 	ldrb.w	r3, [r3, #702]	; 0x2be
   81710:	2b00      	cmp	r3, #0
   81712:	d059      	beq.n	817c8 <Cl_alarms_scanforAlarms+0x280>
	{
		
		if(((Cl_alarms_alarms[BICARB_IN_OPEN].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.bicarb_inlet_status )) || ((Cl_alarms_alarms[BICARB_IN_OPEN].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.bicarb_inlet_status )) )
   81714:	4b24      	ldr	r3, [pc, #144]	; (817a8 <Cl_alarms_scanforAlarms+0x260>)
   81716:	f893 32b1 	ldrb.w	r3, [r3, #689]	; 0x2b1
   8171a:	2b01      	cmp	r3, #1
   8171c:	d104      	bne.n	81728 <Cl_alarms_scanforAlarms+0x1e0>
   8171e:	4b23      	ldr	r3, [pc, #140]	; (817ac <Cl_alarms_scanforAlarms+0x264>)
   81720:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
   81724:	2b00      	cmp	r3, #0
   81726:	d109      	bne.n	8173c <Cl_alarms_scanforAlarms+0x1f4>
   81728:	4b1f      	ldr	r3, [pc, #124]	; (817a8 <Cl_alarms_scanforAlarms+0x260>)
   8172a:	f893 32b1 	ldrb.w	r3, [r3, #689]	; 0x2b1
   8172e:	2b00      	cmp	r3, #0
   81730:	d146      	bne.n	817c0 <Cl_alarms_scanforAlarms+0x278>
   81732:	4b1e      	ldr	r3, [pc, #120]	; (817ac <Cl_alarms_scanforAlarms+0x264>)
   81734:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
   81738:	2b00      	cmp	r3, #0
   8173a:	d141      	bne.n	817c0 <Cl_alarms_scanforAlarms+0x278>
		{
			if(Cl_alarms_alarms[BICARB_IN_OPEN].cl_alarmstate != CL_ALARM_DETECTED)
   8173c:	4b1a      	ldr	r3, [pc, #104]	; (817a8 <Cl_alarms_scanforAlarms+0x260>)
   8173e:	f893 32b2 	ldrb.w	r3, [r3, #690]	; 0x2b2
   81742:	2b01      	cmp	r3, #1
   81744:	d02a      	beq.n	8179c <Cl_alarms_scanforAlarms+0x254>
			{
			Cl_alarms_alarms[BICARB_IN_OPEN].cl_alarmstate = CL_ALARM_DETECTED;
   81746:	4b18      	ldr	r3, [pc, #96]	; (817a8 <Cl_alarms_scanforAlarms+0x260>)
   81748:	2201      	movs	r2, #1
   8174a:	f883 22b2 	strb.w	r2, [r3, #690]	; 0x2b2
			Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=BICARB_IN_OPEN;
   8174e:	4b18      	ldr	r3, [pc, #96]	; (817b0 <Cl_alarms_scanforAlarms+0x268>)
   81750:	781b      	ldrb	r3, [r3, #0]
   81752:	4a17      	ldr	r2, [pc, #92]	; (817b0 <Cl_alarms_scanforAlarms+0x268>)
   81754:	3301      	adds	r3, #1
   81756:	00db      	lsls	r3, r3, #3
   81758:	4413      	add	r3, r2
   8175a:	222b      	movs	r2, #43	; 0x2b
   8175c:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[BICARB_IN_OPEN].cl_detected_count++;
   8175e:	4b12      	ldr	r3, [pc, #72]	; (817a8 <Cl_alarms_scanforAlarms+0x260>)
   81760:	f893 32bd 	ldrb.w	r3, [r3, #701]	; 0x2bd
   81764:	3301      	adds	r3, #1
   81766:	b2da      	uxtb	r2, r3
   81768:	4b0f      	ldr	r3, [pc, #60]	; (817a8 <Cl_alarms_scanforAlarms+0x260>)
   8176a:	f883 22bd 	strb.w	r2, [r3, #701]	; 0x2bd
			cl_alarm_triggered = true;
   8176e:	4b11      	ldr	r3, [pc, #68]	; (817b4 <Cl_alarms_scanforAlarms+0x26c>)
   81770:	2201      	movs	r2, #1
   81772:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = BICARB_IN_OPEN;
   81774:	4b10      	ldr	r3, [pc, #64]	; (817b8 <Cl_alarms_scanforAlarms+0x270>)
   81776:	222b      	movs	r2, #43	; 0x2b
   81778:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   8177a:	4b0d      	ldr	r3, [pc, #52]	; (817b0 <Cl_alarms_scanforAlarms+0x268>)
   8177c:	781b      	ldrb	r3, [r3, #0]
   8177e:	461a      	mov	r2, r3
   81780:	4b0b      	ldr	r3, [pc, #44]	; (817b0 <Cl_alarms_scanforAlarms+0x268>)
   81782:	4413      	add	r3, r2
   81784:	222e      	movs	r2, #46	; 0x2e
   81786:	709a      	strb	r2, [r3, #2]
			Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   81788:	4b0c      	ldr	r3, [pc, #48]	; (817bc <Cl_alarms_scanforAlarms+0x274>)
   8178a:	4798      	blx	r3
   8178c:	4603      	mov	r3, r0
   8178e:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   81790:	79fb      	ldrb	r3, [r7, #7]
   81792:	2b00      	cmp	r3, #0
   81794:	d002      	beq.n	8179c <Cl_alarms_scanforAlarms+0x254>
   81796:	4b03      	ldr	r3, [pc, #12]	; (817a4 <Cl_alarms_scanforAlarms+0x25c>)
   81798:	4798      	blx	r3
	if (Cl_alarms_alarms[BICARB_IN_OPEN].cl_is_enabled)
	{
		
		if(((Cl_alarms_alarms[BICARB_IN_OPEN].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.bicarb_inlet_status )) || ((Cl_alarms_alarms[BICARB_IN_OPEN].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.bicarb_inlet_status )) )
		{
			if(Cl_alarms_alarms[BICARB_IN_OPEN].cl_alarmstate != CL_ALARM_DETECTED)
   8179a:	e015      	b.n	817c8 <Cl_alarms_scanforAlarms+0x280>
   8179c:	e014      	b.n	817c8 <Cl_alarms_scanforAlarms+0x280>
   8179e:	bf00      	nop
   817a0:	00080d49 	.word	0x00080d49
   817a4:	00088fc1 	.word	0x00088fc1
   817a8:	20071d0c 	.word	0x20071d0c
   817ac:	20072224 	.word	0x20072224
   817b0:	200722c0 	.word	0x200722c0
   817b4:	20071739 	.word	0x20071739
   817b8:	20072100 	.word	0x20072100
   817bc:	00082d91 	.word	0x00082d91
			ASSERT_ERROR(Cl_alarms_retcode);
			}
		}
		else
		{
			Cl_alarms_alarms[BICARB_IN_OPEN].cl_alarmstate = CL_ALARM_INACTIVE;
   817c0:	4b9a      	ldr	r3, [pc, #616]	; (81a2c <Cl_alarms_scanforAlarms+0x4e4>)
   817c2:	2204      	movs	r2, #4
   817c4:	f883 22b2 	strb.w	r2, [r3, #690]	; 0x2b2
		}
	}
	if (Cl_alarms_alarms[BICARB_IN_CLOSED].cl_is_enabled)
   817c8:	4b98      	ldr	r3, [pc, #608]	; (81a2c <Cl_alarms_scanforAlarms+0x4e4>)
   817ca:	f893 32ce 	ldrb.w	r3, [r3, #718]	; 0x2ce
   817ce:	2b00      	cmp	r3, #0
   817d0:	d048      	beq.n	81864 <Cl_alarms_scanforAlarms+0x31c>
	{
		
		if(((Cl_alarms_alarms[BICARB_IN_CLOSED].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.bicarb_inlet_status )) || ((Cl_alarms_alarms[BICARB_IN_CLOSED].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.bicarb_inlet_status )) )
   817d2:	4b96      	ldr	r3, [pc, #600]	; (81a2c <Cl_alarms_scanforAlarms+0x4e4>)
   817d4:	f893 32c1 	ldrb.w	r3, [r3, #705]	; 0x2c1
   817d8:	2b01      	cmp	r3, #1
   817da:	d104      	bne.n	817e6 <Cl_alarms_scanforAlarms+0x29e>
   817dc:	4b94      	ldr	r3, [pc, #592]	; (81a30 <Cl_alarms_scanforAlarms+0x4e8>)
   817de:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
   817e2:	2b00      	cmp	r3, #0
   817e4:	d109      	bne.n	817fa <Cl_alarms_scanforAlarms+0x2b2>
   817e6:	4b91      	ldr	r3, [pc, #580]	; (81a2c <Cl_alarms_scanforAlarms+0x4e4>)
   817e8:	f893 32c1 	ldrb.w	r3, [r3, #705]	; 0x2c1
   817ec:	2b00      	cmp	r3, #0
   817ee:	d135      	bne.n	8185c <Cl_alarms_scanforAlarms+0x314>
   817f0:	4b8f      	ldr	r3, [pc, #572]	; (81a30 <Cl_alarms_scanforAlarms+0x4e8>)
   817f2:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
   817f6:	2b00      	cmp	r3, #0
   817f8:	d130      	bne.n	8185c <Cl_alarms_scanforAlarms+0x314>
		{
			if(Cl_alarms_alarms[BICARB_IN_CLOSED].cl_alarmstate != CL_ALARM_DETECTED)
   817fa:	4b8c      	ldr	r3, [pc, #560]	; (81a2c <Cl_alarms_scanforAlarms+0x4e4>)
   817fc:	f893 32c2 	ldrb.w	r3, [r3, #706]	; 0x2c2
   81800:	2b01      	cmp	r3, #1
   81802:	d02a      	beq.n	8185a <Cl_alarms_scanforAlarms+0x312>
			{
				Cl_alarms_alarms[BICARB_IN_CLOSED].cl_alarmstate = CL_ALARM_DETECTED;
   81804:	4b89      	ldr	r3, [pc, #548]	; (81a2c <Cl_alarms_scanforAlarms+0x4e4>)
   81806:	2201      	movs	r2, #1
   81808:	f883 22c2 	strb.w	r2, [r3, #706]	; 0x2c2
				Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=BICARB_IN_CLOSED;
   8180c:	4b89      	ldr	r3, [pc, #548]	; (81a34 <Cl_alarms_scanforAlarms+0x4ec>)
   8180e:	781b      	ldrb	r3, [r3, #0]
   81810:	4a88      	ldr	r2, [pc, #544]	; (81a34 <Cl_alarms_scanforAlarms+0x4ec>)
   81812:	3301      	adds	r3, #1
   81814:	00db      	lsls	r3, r3, #3
   81816:	4413      	add	r3, r2
   81818:	222c      	movs	r2, #44	; 0x2c
   8181a:	809a      	strh	r2, [r3, #4]
				Cl_alarms_alarms[BICARB_IN_CLOSED].cl_detected_count++;
   8181c:	4b83      	ldr	r3, [pc, #524]	; (81a2c <Cl_alarms_scanforAlarms+0x4e4>)
   8181e:	f893 32cd 	ldrb.w	r3, [r3, #717]	; 0x2cd
   81822:	3301      	adds	r3, #1
   81824:	b2da      	uxtb	r2, r3
   81826:	4b81      	ldr	r3, [pc, #516]	; (81a2c <Cl_alarms_scanforAlarms+0x4e4>)
   81828:	f883 22cd 	strb.w	r2, [r3, #717]	; 0x2cd
				cl_alarm_triggered = true;
   8182c:	4b82      	ldr	r3, [pc, #520]	; (81a38 <Cl_alarms_scanforAlarms+0x4f0>)
   8182e:	2201      	movs	r2, #1
   81830:	701a      	strb	r2, [r3, #0]
				cl_lastalarmid = BICARB_IN_CLOSED;
   81832:	4b82      	ldr	r3, [pc, #520]	; (81a3c <Cl_alarms_scanforAlarms+0x4f4>)
   81834:	222c      	movs	r2, #44	; 0x2c
   81836:	701a      	strb	r2, [r3, #0]
				Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81838:	4b7e      	ldr	r3, [pc, #504]	; (81a34 <Cl_alarms_scanforAlarms+0x4ec>)
   8183a:	781b      	ldrb	r3, [r3, #0]
   8183c:	461a      	mov	r2, r3
   8183e:	4b7d      	ldr	r3, [pc, #500]	; (81a34 <Cl_alarms_scanforAlarms+0x4ec>)
   81840:	4413      	add	r3, r2
   81842:	222e      	movs	r2, #46	; 0x2e
   81844:	709a      	strb	r2, [r3, #2]
				Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   81846:	4b7e      	ldr	r3, [pc, #504]	; (81a40 <Cl_alarms_scanforAlarms+0x4f8>)
   81848:	4798      	blx	r3
   8184a:	4603      	mov	r3, r0
   8184c:	71fb      	strb	r3, [r7, #7]
				ASSERT_ERROR(Cl_alarms_retcode);
   8184e:	79fb      	ldrb	r3, [r7, #7]
   81850:	2b00      	cmp	r3, #0
   81852:	d002      	beq.n	8185a <Cl_alarms_scanforAlarms+0x312>
   81854:	4b7b      	ldr	r3, [pc, #492]	; (81a44 <Cl_alarms_scanforAlarms+0x4fc>)
   81856:	4798      	blx	r3
	if (Cl_alarms_alarms[BICARB_IN_CLOSED].cl_is_enabled)
	{
		
		if(((Cl_alarms_alarms[BICARB_IN_CLOSED].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.bicarb_inlet_status )) || ((Cl_alarms_alarms[BICARB_IN_CLOSED].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.bicarb_inlet_status )) )
		{
			if(Cl_alarms_alarms[BICARB_IN_CLOSED].cl_alarmstate != CL_ALARM_DETECTED)
   81858:	e004      	b.n	81864 <Cl_alarms_scanforAlarms+0x31c>
   8185a:	e003      	b.n	81864 <Cl_alarms_scanforAlarms+0x31c>
				ASSERT_ERROR(Cl_alarms_retcode);
			}
		}
		else
		{
			Cl_alarms_alarms[BICARB_IN_CLOSED].cl_alarmstate = CL_ALARM_INACTIVE;
   8185c:	4b73      	ldr	r3, [pc, #460]	; (81a2c <Cl_alarms_scanforAlarms+0x4e4>)
   8185e:	2204      	movs	r2, #4
   81860:	f883 22c2 	strb.w	r2, [r3, #706]	; 0x2c2
		}
	}
	
	if(Cl_alarms_alarms[ABD_EVENT].cl_is_enabled)
   81864:	4b71      	ldr	r3, [pc, #452]	; (81a2c <Cl_alarms_scanforAlarms+0x4e4>)
   81866:	f893 320e 	ldrb.w	r3, [r3, #526]	; 0x20e
   8186a:	2b00      	cmp	r3, #0
   8186c:	d032      	beq.n	818d4 <Cl_alarms_scanforAlarms+0x38c>
	{
		
		if(cl_sys_statbuffer.abdstatus)
   8186e:	4b70      	ldr	r3, [pc, #448]	; (81a30 <Cl_alarms_scanforAlarms+0x4e8>)
   81870:	8b1b      	ldrh	r3, [r3, #24]
   81872:	2b00      	cmp	r3, #0
   81874:	d02a      	beq.n	818cc <Cl_alarms_scanforAlarms+0x384>
		{

			Cl_alarms_alarms[ABD_EVENT].cl_alarmstate = CL_ALARM_DETECTED;
   81876:	4b6d      	ldr	r3, [pc, #436]	; (81a2c <Cl_alarms_scanforAlarms+0x4e4>)
   81878:	2201      	movs	r2, #1
   8187a:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
			Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=ABD_EVENT; 
   8187e:	4b6d      	ldr	r3, [pc, #436]	; (81a34 <Cl_alarms_scanforAlarms+0x4ec>)
   81880:	781b      	ldrb	r3, [r3, #0]
   81882:	4a6c      	ldr	r2, [pc, #432]	; (81a34 <Cl_alarms_scanforAlarms+0x4ec>)
   81884:	3301      	adds	r3, #1
   81886:	00db      	lsls	r3, r3, #3
   81888:	4413      	add	r3, r2
   8188a:	2220      	movs	r2, #32
   8188c:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[ABD_EVENT].cl_detected_count++;
   8188e:	4b67      	ldr	r3, [pc, #412]	; (81a2c <Cl_alarms_scanforAlarms+0x4e4>)
   81890:	f893 320d 	ldrb.w	r3, [r3, #525]	; 0x20d
   81894:	3301      	adds	r3, #1
   81896:	b2da      	uxtb	r2, r3
   81898:	4b64      	ldr	r3, [pc, #400]	; (81a2c <Cl_alarms_scanforAlarms+0x4e4>)
   8189a:	f883 220d 	strb.w	r2, [r3, #525]	; 0x20d
			cl_alarm_triggered = true;
   8189e:	4b66      	ldr	r3, [pc, #408]	; (81a38 <Cl_alarms_scanforAlarms+0x4f0>)
   818a0:	2201      	movs	r2, #1
   818a2:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = ABD_EVENT;
   818a4:	4b65      	ldr	r3, [pc, #404]	; (81a3c <Cl_alarms_scanforAlarms+0x4f4>)
   818a6:	2220      	movs	r2, #32
   818a8:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   818aa:	4b62      	ldr	r3, [pc, #392]	; (81a34 <Cl_alarms_scanforAlarms+0x4ec>)
   818ac:	781b      	ldrb	r3, [r3, #0]
   818ae:	461a      	mov	r2, r3
   818b0:	4b60      	ldr	r3, [pc, #384]	; (81a34 <Cl_alarms_scanforAlarms+0x4ec>)
   818b2:	4413      	add	r3, r2
   818b4:	222e      	movs	r2, #46	; 0x2e
   818b6:	709a      	strb	r2, [r3, #2]
			Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   818b8:	4b61      	ldr	r3, [pc, #388]	; (81a40 <Cl_alarms_scanforAlarms+0x4f8>)
   818ba:	4798      	blx	r3
   818bc:	4603      	mov	r3, r0
   818be:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   818c0:	79fb      	ldrb	r3, [r7, #7]
   818c2:	2b00      	cmp	r3, #0
   818c4:	d006      	beq.n	818d4 <Cl_alarms_scanforAlarms+0x38c>
   818c6:	4b5f      	ldr	r3, [pc, #380]	; (81a44 <Cl_alarms_scanforAlarms+0x4fc>)
   818c8:	4798      	blx	r3
   818ca:	e003      	b.n	818d4 <Cl_alarms_scanforAlarms+0x38c>
		}
		else
		{
			Cl_alarms_alarms[ABD_EVENT].cl_alarmstate = CL_ALARM_INACTIVE;
   818cc:	4b57      	ldr	r3, [pc, #348]	; (81a2c <Cl_alarms_scanforAlarms+0x4e4>)
   818ce:	2204      	movs	r2, #4
   818d0:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
		}
	
	}
	if(Cl_alarms_alarms[BD_EVENT].cl_is_enabled)
   818d4:	4b55      	ldr	r3, [pc, #340]	; (81a2c <Cl_alarms_scanforAlarms+0x4e4>)
   818d6:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
   818da:	2b00      	cmp	r3, #0
   818dc:	d032      	beq.n	81944 <Cl_alarms_scanforAlarms+0x3fc>
	{
		
		if(cl_sys_statbuffer.bdstatus)
   818de:	4b54      	ldr	r3, [pc, #336]	; (81a30 <Cl_alarms_scanforAlarms+0x4e8>)
   818e0:	8b5b      	ldrh	r3, [r3, #26]
   818e2:	2b00      	cmp	r3, #0
   818e4:	d02a      	beq.n	8193c <Cl_alarms_scanforAlarms+0x3f4>
		{

			Cl_alarms_alarms[BD_EVENT].cl_alarmstate = CL_ALARM_DETECTED;
   818e6:	4b51      	ldr	r3, [pc, #324]	; (81a2c <Cl_alarms_scanforAlarms+0x4e4>)
   818e8:	2201      	movs	r2, #1
   818ea:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
			Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=BD_EVENT; 
   818ee:	4b51      	ldr	r3, [pc, #324]	; (81a34 <Cl_alarms_scanforAlarms+0x4ec>)
   818f0:	781b      	ldrb	r3, [r3, #0]
   818f2:	4a50      	ldr	r2, [pc, #320]	; (81a34 <Cl_alarms_scanforAlarms+0x4ec>)
   818f4:	3301      	adds	r3, #1
   818f6:	00db      	lsls	r3, r3, #3
   818f8:	4413      	add	r3, r2
   818fa:	2221      	movs	r2, #33	; 0x21
   818fc:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[BD_EVENT].cl_detected_count++;
   818fe:	4b4b      	ldr	r3, [pc, #300]	; (81a2c <Cl_alarms_scanforAlarms+0x4e4>)
   81900:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
   81904:	3301      	adds	r3, #1
   81906:	b2da      	uxtb	r2, r3
   81908:	4b48      	ldr	r3, [pc, #288]	; (81a2c <Cl_alarms_scanforAlarms+0x4e4>)
   8190a:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
			cl_alarm_triggered = true;
   8190e:	4b4a      	ldr	r3, [pc, #296]	; (81a38 <Cl_alarms_scanforAlarms+0x4f0>)
   81910:	2201      	movs	r2, #1
   81912:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = BD_EVENT;
   81914:	4b49      	ldr	r3, [pc, #292]	; (81a3c <Cl_alarms_scanforAlarms+0x4f4>)
   81916:	2221      	movs	r2, #33	; 0x21
   81918:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   8191a:	4b46      	ldr	r3, [pc, #280]	; (81a34 <Cl_alarms_scanforAlarms+0x4ec>)
   8191c:	781b      	ldrb	r3, [r3, #0]
   8191e:	461a      	mov	r2, r3
   81920:	4b44      	ldr	r3, [pc, #272]	; (81a34 <Cl_alarms_scanforAlarms+0x4ec>)
   81922:	4413      	add	r3, r2
   81924:	222e      	movs	r2, #46	; 0x2e
   81926:	709a      	strb	r2, [r3, #2]
			Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   81928:	4b45      	ldr	r3, [pc, #276]	; (81a40 <Cl_alarms_scanforAlarms+0x4f8>)
   8192a:	4798      	blx	r3
   8192c:	4603      	mov	r3, r0
   8192e:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   81930:	79fb      	ldrb	r3, [r7, #7]
   81932:	2b00      	cmp	r3, #0
   81934:	d006      	beq.n	81944 <Cl_alarms_scanforAlarms+0x3fc>
   81936:	4b43      	ldr	r3, [pc, #268]	; (81a44 <Cl_alarms_scanforAlarms+0x4fc>)
   81938:	4798      	blx	r3
   8193a:	e003      	b.n	81944 <Cl_alarms_scanforAlarms+0x3fc>
		}
		else
		{
			Cl_alarms_alarms[BD_EVENT].cl_alarmstate = CL_ALARM_INACTIVE;
   8193c:	4b3b      	ldr	r3, [pc, #236]	; (81a2c <Cl_alarms_scanforAlarms+0x4e4>)
   8193e:	2204      	movs	r2, #4
   81940:	f883 2212 	strb.w	r2, [r3, #530]	; 0x212
		}
	}
	if(Cl_alarms_alarms[BLD_EVENT].cl_is_enabled)
   81944:	4b39      	ldr	r3, [pc, #228]	; (81a2c <Cl_alarms_scanforAlarms+0x4e4>)
   81946:	f893 322e 	ldrb.w	r3, [r3, #558]	; 0x22e
   8194a:	2b00      	cmp	r3, #0
   8194c:	d032      	beq.n	819b4 <Cl_alarms_scanforAlarms+0x46c>
	{
				if(cl_sys_statbuffer.bldstatus)
   8194e:	4b38      	ldr	r3, [pc, #224]	; (81a30 <Cl_alarms_scanforAlarms+0x4e8>)
   81950:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
   81952:	2b00      	cmp	r3, #0
   81954:	d02a      	beq.n	819ac <Cl_alarms_scanforAlarms+0x464>
				{
					Cl_alarms_alarms[BLD_EVENT].cl_alarmstate = CL_ALARM_DETECTED;
   81956:	4b35      	ldr	r3, [pc, #212]	; (81a2c <Cl_alarms_scanforAlarms+0x4e4>)
   81958:	2201      	movs	r2, #1
   8195a:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
					Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=BLD_EVENT; 
   8195e:	4b35      	ldr	r3, [pc, #212]	; (81a34 <Cl_alarms_scanforAlarms+0x4ec>)
   81960:	781b      	ldrb	r3, [r3, #0]
   81962:	4a34      	ldr	r2, [pc, #208]	; (81a34 <Cl_alarms_scanforAlarms+0x4ec>)
   81964:	3301      	adds	r3, #1
   81966:	00db      	lsls	r3, r3, #3
   81968:	4413      	add	r3, r2
   8196a:	2222      	movs	r2, #34	; 0x22
   8196c:	809a      	strh	r2, [r3, #4]
					Cl_alarms_alarms[BLD_EVENT].cl_detected_count++;
   8196e:	4b2f      	ldr	r3, [pc, #188]	; (81a2c <Cl_alarms_scanforAlarms+0x4e4>)
   81970:	f893 322d 	ldrb.w	r3, [r3, #557]	; 0x22d
   81974:	3301      	adds	r3, #1
   81976:	b2da      	uxtb	r2, r3
   81978:	4b2c      	ldr	r3, [pc, #176]	; (81a2c <Cl_alarms_scanforAlarms+0x4e4>)
   8197a:	f883 222d 	strb.w	r2, [r3, #557]	; 0x22d
					cl_alarm_triggered = true;
   8197e:	4b2e      	ldr	r3, [pc, #184]	; (81a38 <Cl_alarms_scanforAlarms+0x4f0>)
   81980:	2201      	movs	r2, #1
   81982:	701a      	strb	r2, [r3, #0]
					cl_lastalarmid = BLD_EVENT;
   81984:	4b2d      	ldr	r3, [pc, #180]	; (81a3c <Cl_alarms_scanforAlarms+0x4f4>)
   81986:	2222      	movs	r2, #34	; 0x22
   81988:	701a      	strb	r2, [r3, #0]
					Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   8198a:	4b2a      	ldr	r3, [pc, #168]	; (81a34 <Cl_alarms_scanforAlarms+0x4ec>)
   8198c:	781b      	ldrb	r3, [r3, #0]
   8198e:	461a      	mov	r2, r3
   81990:	4b28      	ldr	r3, [pc, #160]	; (81a34 <Cl_alarms_scanforAlarms+0x4ec>)
   81992:	4413      	add	r3, r2
   81994:	222e      	movs	r2, #46	; 0x2e
   81996:	709a      	strb	r2, [r3, #2]
					Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   81998:	4b29      	ldr	r3, [pc, #164]	; (81a40 <Cl_alarms_scanforAlarms+0x4f8>)
   8199a:	4798      	blx	r3
   8199c:	4603      	mov	r3, r0
   8199e:	71fb      	strb	r3, [r7, #7]
					ASSERT_ERROR(Cl_alarms_retcode);
   819a0:	79fb      	ldrb	r3, [r7, #7]
   819a2:	2b00      	cmp	r3, #0
   819a4:	d006      	beq.n	819b4 <Cl_alarms_scanforAlarms+0x46c>
   819a6:	4b27      	ldr	r3, [pc, #156]	; (81a44 <Cl_alarms_scanforAlarms+0x4fc>)
   819a8:	4798      	blx	r3
   819aa:	e003      	b.n	819b4 <Cl_alarms_scanforAlarms+0x46c>
				}
				else
				{

					Cl_alarms_alarms[BLD_EVENT].cl_alarmstate = CL_ALARM_INACTIVE;
   819ac:	4b1f      	ldr	r3, [pc, #124]	; (81a2c <Cl_alarms_scanforAlarms+0x4e4>)
   819ae:	2204      	movs	r2, #4
   819b0:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
					
				}
	}
	if(Cl_alarms_alarms[APTSTATUS_HIGH].cl_is_enabled)
   819b4:	4b1d      	ldr	r3, [pc, #116]	; (81a2c <Cl_alarms_scanforAlarms+0x4e4>)
   819b6:	f893 324e 	ldrb.w	r3, [r3, #590]	; 0x24e
   819ba:	2b00      	cmp	r3, #0
   819bc:	d053      	beq.n	81a66 <Cl_alarms_scanforAlarms+0x51e>
	{
		
				if(apt > Cl_alarmThresholdTable.apt_high_threshold)
   819be:	4b22      	ldr	r3, [pc, #136]	; (81a48 <Cl_alarms_scanforAlarms+0x500>)
   819c0:	6899      	ldr	r1, [r3, #8]
   819c2:	4b22      	ldr	r3, [pc, #136]	; (81a4c <Cl_alarms_scanforAlarms+0x504>)
   819c4:	681a      	ldr	r2, [r3, #0]
   819c6:	4b22      	ldr	r3, [pc, #136]	; (81a50 <Cl_alarms_scanforAlarms+0x508>)
   819c8:	4608      	mov	r0, r1
   819ca:	4611      	mov	r1, r2
   819cc:	4798      	blx	r3
   819ce:	4603      	mov	r3, r0
   819d0:	2b00      	cmp	r3, #0
   819d2:	d03f      	beq.n	81a54 <Cl_alarms_scanforAlarms+0x50c>
				{

					Cl_alarms_alarms[APTSTATUS_HIGH].cl_alarmstate = CL_ALARM_DETECTED;
   819d4:	4b15      	ldr	r3, [pc, #84]	; (81a2c <Cl_alarms_scanforAlarms+0x4e4>)
   819d6:	2201      	movs	r2, #1
   819d8:	f883 2242 	strb.w	r2, [r3, #578]	; 0x242
					Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=APTSTATUS_HIGH; 
   819dc:	4b15      	ldr	r3, [pc, #84]	; (81a34 <Cl_alarms_scanforAlarms+0x4ec>)
   819de:	781b      	ldrb	r3, [r3, #0]
   819e0:	4a14      	ldr	r2, [pc, #80]	; (81a34 <Cl_alarms_scanforAlarms+0x4ec>)
   819e2:	3301      	adds	r3, #1
   819e4:	00db      	lsls	r3, r3, #3
   819e6:	4413      	add	r3, r2
   819e8:	2224      	movs	r2, #36	; 0x24
   819ea:	809a      	strh	r2, [r3, #4]
					Cl_alarms_alarms[APTSTATUS_HIGH].cl_detected_count++;
   819ec:	4b0f      	ldr	r3, [pc, #60]	; (81a2c <Cl_alarms_scanforAlarms+0x4e4>)
   819ee:	f893 324d 	ldrb.w	r3, [r3, #589]	; 0x24d
   819f2:	3301      	adds	r3, #1
   819f4:	b2da      	uxtb	r2, r3
   819f6:	4b0d      	ldr	r3, [pc, #52]	; (81a2c <Cl_alarms_scanforAlarms+0x4e4>)
   819f8:	f883 224d 	strb.w	r2, [r3, #589]	; 0x24d
					cl_alarm_triggered = true;
   819fc:	4b0e      	ldr	r3, [pc, #56]	; (81a38 <Cl_alarms_scanforAlarms+0x4f0>)
   819fe:	2201      	movs	r2, #1
   81a00:	701a      	strb	r2, [r3, #0]
					cl_lastalarmid = APTSTATUS_HIGH;
   81a02:	4b0e      	ldr	r3, [pc, #56]	; (81a3c <Cl_alarms_scanforAlarms+0x4f4>)
   81a04:	2224      	movs	r2, #36	; 0x24
   81a06:	701a      	strb	r2, [r3, #0]
					Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81a08:	4b0a      	ldr	r3, [pc, #40]	; (81a34 <Cl_alarms_scanforAlarms+0x4ec>)
   81a0a:	781b      	ldrb	r3, [r3, #0]
   81a0c:	461a      	mov	r2, r3
   81a0e:	4b09      	ldr	r3, [pc, #36]	; (81a34 <Cl_alarms_scanforAlarms+0x4ec>)
   81a10:	4413      	add	r3, r2
   81a12:	222e      	movs	r2, #46	; 0x2e
   81a14:	709a      	strb	r2, [r3, #2]
					Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   81a16:	4b0a      	ldr	r3, [pc, #40]	; (81a40 <Cl_alarms_scanforAlarms+0x4f8>)
   81a18:	4798      	blx	r3
   81a1a:	4603      	mov	r3, r0
   81a1c:	71fb      	strb	r3, [r7, #7]
					ASSERT_ERROR(Cl_alarms_retcode);
   81a1e:	79fb      	ldrb	r3, [r7, #7]
   81a20:	2b00      	cmp	r3, #0
   81a22:	d020      	beq.n	81a66 <Cl_alarms_scanforAlarms+0x51e>
   81a24:	4b07      	ldr	r3, [pc, #28]	; (81a44 <Cl_alarms_scanforAlarms+0x4fc>)
   81a26:	4798      	blx	r3
   81a28:	e01d      	b.n	81a66 <Cl_alarms_scanforAlarms+0x51e>
   81a2a:	bf00      	nop
   81a2c:	20071d0c 	.word	0x20071d0c
   81a30:	20072224 	.word	0x20072224
   81a34:	200722c0 	.word	0x200722c0
   81a38:	20071739 	.word	0x20071739
   81a3c:	20072100 	.word	0x20072100
   81a40:	00082d91 	.word	0x00082d91
   81a44:	00088fc1 	.word	0x00088fc1
   81a48:	20072104 	.word	0x20072104
   81a4c:	200720fc 	.word	0x200720fc
   81a50:	000a6c95 	.word	0x000a6c95
					
				}
				else if (Cl_alarms_alarms[APTSTATUS_HIGH].cl_alarmstate == CL_ALARM_DETECTED)
   81a54:	4b93      	ldr	r3, [pc, #588]	; (81ca4 <Cl_alarms_scanforAlarms+0x75c>)
   81a56:	f893 3242 	ldrb.w	r3, [r3, #578]	; 0x242
   81a5a:	2b01      	cmp	r3, #1
   81a5c:	d103      	bne.n	81a66 <Cl_alarms_scanforAlarms+0x51e>
				{
					Cl_alarms_alarms[APTSTATUS_HIGH].cl_alarmstate = CL_ALARM_INACTIVE;
   81a5e:	4b91      	ldr	r3, [pc, #580]	; (81ca4 <Cl_alarms_scanforAlarms+0x75c>)
   81a60:	2204      	movs	r2, #4
   81a62:	f883 2242 	strb.w	r2, [r3, #578]	; 0x242
				}
	}
	if(Cl_alarms_alarms[APTSTATUS_LOW].cl_is_enabled)
   81a66:	4b8f      	ldr	r3, [pc, #572]	; (81ca4 <Cl_alarms_scanforAlarms+0x75c>)
   81a68:	f893 323e 	ldrb.w	r3, [r3, #574]	; 0x23e
   81a6c:	2b00      	cmp	r3, #0
   81a6e:	d043      	beq.n	81af8 <Cl_alarms_scanforAlarms+0x5b0>
	{
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DETECT_LOW",11);
   81a70:	2018      	movs	r0, #24
   81a72:	498d      	ldr	r1, [pc, #564]	; (81ca8 <Cl_alarms_scanforAlarms+0x760>)
   81a74:	220b      	movs	r2, #11
   81a76:	4b8d      	ldr	r3, [pc, #564]	; (81cac <Cl_alarms_scanforAlarms+0x764>)
   81a78:	4798      	blx	r3
		if(apt < Cl_alarmThresholdTable.apt_low_threshold)
   81a7a:	4b8d      	ldr	r3, [pc, #564]	; (81cb0 <Cl_alarms_scanforAlarms+0x768>)
   81a7c:	68d9      	ldr	r1, [r3, #12]
   81a7e:	4b8d      	ldr	r3, [pc, #564]	; (81cb4 <Cl_alarms_scanforAlarms+0x76c>)
   81a80:	681a      	ldr	r2, [r3, #0]
   81a82:	4b8d      	ldr	r3, [pc, #564]	; (81cb8 <Cl_alarms_scanforAlarms+0x770>)
   81a84:	4608      	mov	r0, r1
   81a86:	4611      	mov	r1, r2
   81a88:	4798      	blx	r3
   81a8a:	4603      	mov	r3, r0
   81a8c:	2b00      	cmp	r3, #0
   81a8e:	d02a      	beq.n	81ae6 <Cl_alarms_scanforAlarms+0x59e>
		{

			Cl_alarms_alarms[APTSTATUS_LOW].cl_alarmstate = CL_ALARM_DETECTED;
   81a90:	4b84      	ldr	r3, [pc, #528]	; (81ca4 <Cl_alarms_scanforAlarms+0x75c>)
   81a92:	2201      	movs	r2, #1
   81a94:	f883 2232 	strb.w	r2, [r3, #562]	; 0x232
			Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=APTSTATUS_LOW;
   81a98:	4b88      	ldr	r3, [pc, #544]	; (81cbc <Cl_alarms_scanforAlarms+0x774>)
   81a9a:	781b      	ldrb	r3, [r3, #0]
   81a9c:	4a87      	ldr	r2, [pc, #540]	; (81cbc <Cl_alarms_scanforAlarms+0x774>)
   81a9e:	3301      	adds	r3, #1
   81aa0:	00db      	lsls	r3, r3, #3
   81aa2:	4413      	add	r3, r2
   81aa4:	2223      	movs	r2, #35	; 0x23
   81aa6:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[APTSTATUS_LOW].cl_detected_count++;
   81aa8:	4b7e      	ldr	r3, [pc, #504]	; (81ca4 <Cl_alarms_scanforAlarms+0x75c>)
   81aaa:	f893 323d 	ldrb.w	r3, [r3, #573]	; 0x23d
   81aae:	3301      	adds	r3, #1
   81ab0:	b2da      	uxtb	r2, r3
   81ab2:	4b7c      	ldr	r3, [pc, #496]	; (81ca4 <Cl_alarms_scanforAlarms+0x75c>)
   81ab4:	f883 223d 	strb.w	r2, [r3, #573]	; 0x23d
			cl_alarm_triggered = true;
   81ab8:	4b81      	ldr	r3, [pc, #516]	; (81cc0 <Cl_alarms_scanforAlarms+0x778>)
   81aba:	2201      	movs	r2, #1
   81abc:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = APTSTATUS_LOW;
   81abe:	4b81      	ldr	r3, [pc, #516]	; (81cc4 <Cl_alarms_scanforAlarms+0x77c>)
   81ac0:	2223      	movs	r2, #35	; 0x23
   81ac2:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81ac4:	4b7d      	ldr	r3, [pc, #500]	; (81cbc <Cl_alarms_scanforAlarms+0x774>)
   81ac6:	781b      	ldrb	r3, [r3, #0]
   81ac8:	461a      	mov	r2, r3
   81aca:	4b7c      	ldr	r3, [pc, #496]	; (81cbc <Cl_alarms_scanforAlarms+0x774>)
   81acc:	4413      	add	r3, r2
   81ace:	222e      	movs	r2, #46	; 0x2e
   81ad0:	709a      	strb	r2, [r3, #2]
			Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   81ad2:	4b7d      	ldr	r3, [pc, #500]	; (81cc8 <Cl_alarms_scanforAlarms+0x780>)
   81ad4:	4798      	blx	r3
   81ad6:	4603      	mov	r3, r0
   81ad8:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   81ada:	79fb      	ldrb	r3, [r7, #7]
   81adc:	2b00      	cmp	r3, #0
   81ade:	d00b      	beq.n	81af8 <Cl_alarms_scanforAlarms+0x5b0>
   81ae0:	4b7a      	ldr	r3, [pc, #488]	; (81ccc <Cl_alarms_scanforAlarms+0x784>)
   81ae2:	4798      	blx	r3
   81ae4:	e008      	b.n	81af8 <Cl_alarms_scanforAlarms+0x5b0>
			
		}
		else if (Cl_alarms_alarms[APTSTATUS_LOW].cl_alarmstate == CL_ALARM_DETECTED)
   81ae6:	4b6f      	ldr	r3, [pc, #444]	; (81ca4 <Cl_alarms_scanforAlarms+0x75c>)
   81ae8:	f893 3232 	ldrb.w	r3, [r3, #562]	; 0x232
   81aec:	2b01      	cmp	r3, #1
   81aee:	d103      	bne.n	81af8 <Cl_alarms_scanforAlarms+0x5b0>
		{
			Cl_alarms_alarms[APTSTATUS_LOW].cl_alarmstate = CL_ALARM_INACTIVE;
   81af0:	4b6c      	ldr	r3, [pc, #432]	; (81ca4 <Cl_alarms_scanforAlarms+0x75c>)
   81af2:	2204      	movs	r2, #4
   81af4:	f883 2232 	strb.w	r2, [r3, #562]	; 0x232
		}
	}
	if(Cl_alarms_alarms[VPTSTATUS_HIGH].cl_is_enabled)
   81af8:	4b6a      	ldr	r3, [pc, #424]	; (81ca4 <Cl_alarms_scanforAlarms+0x75c>)
   81afa:	f893 326e 	ldrb.w	r3, [r3, #622]	; 0x26e
   81afe:	2b00      	cmp	r3, #0
   81b00:	d048      	beq.n	81b94 <Cl_alarms_scanforAlarms+0x64c>
	{
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"VPTHIGH",7);
   81b02:	2018      	movs	r0, #24
   81b04:	4972      	ldr	r1, [pc, #456]	; (81cd0 <Cl_alarms_scanforAlarms+0x788>)
   81b06:	2207      	movs	r2, #7
   81b08:	4b68      	ldr	r3, [pc, #416]	; (81cac <Cl_alarms_scanforAlarms+0x764>)
   81b0a:	4798      	blx	r3
		ASSERT_ERROR(Cl_alarms_retcode);
   81b0c:	79fb      	ldrb	r3, [r7, #7]
   81b0e:	2b00      	cmp	r3, #0
   81b10:	d001      	beq.n	81b16 <Cl_alarms_scanforAlarms+0x5ce>
   81b12:	4b6e      	ldr	r3, [pc, #440]	; (81ccc <Cl_alarms_scanforAlarms+0x784>)
   81b14:	4798      	blx	r3
				if(vpt > Cl_alarmThresholdTable.vpt_high_threshold)
   81b16:	4b66      	ldr	r3, [pc, #408]	; (81cb0 <Cl_alarms_scanforAlarms+0x768>)
   81b18:	6919      	ldr	r1, [r3, #16]
   81b1a:	4b6e      	ldr	r3, [pc, #440]	; (81cd4 <Cl_alarms_scanforAlarms+0x78c>)
   81b1c:	681a      	ldr	r2, [r3, #0]
   81b1e:	4b6e      	ldr	r3, [pc, #440]	; (81cd8 <Cl_alarms_scanforAlarms+0x790>)
   81b20:	4608      	mov	r0, r1
   81b22:	4611      	mov	r1, r2
   81b24:	4798      	blx	r3
   81b26:	4603      	mov	r3, r0
   81b28:	2b00      	cmp	r3, #0
   81b2a:	d02a      	beq.n	81b82 <Cl_alarms_scanforAlarms+0x63a>
				{

						Cl_alarms_alarms[VPTSTATUS_HIGH].cl_alarmstate = CL_ALARM_DETECTED;
   81b2c:	4b5d      	ldr	r3, [pc, #372]	; (81ca4 <Cl_alarms_scanforAlarms+0x75c>)
   81b2e:	2201      	movs	r2, #1
   81b30:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
						Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=VPTSTATUS_HIGH; 
   81b34:	4b61      	ldr	r3, [pc, #388]	; (81cbc <Cl_alarms_scanforAlarms+0x774>)
   81b36:	781b      	ldrb	r3, [r3, #0]
   81b38:	4a60      	ldr	r2, [pc, #384]	; (81cbc <Cl_alarms_scanforAlarms+0x774>)
   81b3a:	3301      	adds	r3, #1
   81b3c:	00db      	lsls	r3, r3, #3
   81b3e:	4413      	add	r3, r2
   81b40:	2226      	movs	r2, #38	; 0x26
   81b42:	809a      	strh	r2, [r3, #4]
						Cl_alarms_alarms[VPTSTATUS_HIGH].cl_detected_count++;
   81b44:	4b57      	ldr	r3, [pc, #348]	; (81ca4 <Cl_alarms_scanforAlarms+0x75c>)
   81b46:	f893 326d 	ldrb.w	r3, [r3, #621]	; 0x26d
   81b4a:	3301      	adds	r3, #1
   81b4c:	b2da      	uxtb	r2, r3
   81b4e:	4b55      	ldr	r3, [pc, #340]	; (81ca4 <Cl_alarms_scanforAlarms+0x75c>)
   81b50:	f883 226d 	strb.w	r2, [r3, #621]	; 0x26d
						cl_alarm_triggered = true;
   81b54:	4b5a      	ldr	r3, [pc, #360]	; (81cc0 <Cl_alarms_scanforAlarms+0x778>)
   81b56:	2201      	movs	r2, #1
   81b58:	701a      	strb	r2, [r3, #0]
						cl_lastalarmid = VPTSTATUS_HIGH;
   81b5a:	4b5a      	ldr	r3, [pc, #360]	; (81cc4 <Cl_alarms_scanforAlarms+0x77c>)
   81b5c:	2226      	movs	r2, #38	; 0x26
   81b5e:	701a      	strb	r2, [r3, #0]
						Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81b60:	4b56      	ldr	r3, [pc, #344]	; (81cbc <Cl_alarms_scanforAlarms+0x774>)
   81b62:	781b      	ldrb	r3, [r3, #0]
   81b64:	461a      	mov	r2, r3
   81b66:	4b55      	ldr	r3, [pc, #340]	; (81cbc <Cl_alarms_scanforAlarms+0x774>)
   81b68:	4413      	add	r3, r2
   81b6a:	222e      	movs	r2, #46	; 0x2e
   81b6c:	709a      	strb	r2, [r3, #2]
						Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   81b6e:	4b56      	ldr	r3, [pc, #344]	; (81cc8 <Cl_alarms_scanforAlarms+0x780>)
   81b70:	4798      	blx	r3
   81b72:	4603      	mov	r3, r0
   81b74:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_alarms_retcode);
   81b76:	79fb      	ldrb	r3, [r7, #7]
   81b78:	2b00      	cmp	r3, #0
   81b7a:	d00b      	beq.n	81b94 <Cl_alarms_scanforAlarms+0x64c>
   81b7c:	4b53      	ldr	r3, [pc, #332]	; (81ccc <Cl_alarms_scanforAlarms+0x784>)
   81b7e:	4798      	blx	r3
   81b80:	e008      	b.n	81b94 <Cl_alarms_scanforAlarms+0x64c>
					
				}
				else if (Cl_alarms_alarms[VPTSTATUS_HIGH].cl_alarmstate == CL_ALARM_DETECTED)
   81b82:	4b48      	ldr	r3, [pc, #288]	; (81ca4 <Cl_alarms_scanforAlarms+0x75c>)
   81b84:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
   81b88:	2b01      	cmp	r3, #1
   81b8a:	d103      	bne.n	81b94 <Cl_alarms_scanforAlarms+0x64c>
				{
					Cl_alarms_alarms[VPTSTATUS_HIGH].cl_alarmstate = CL_ALARM_INACTIVE;
   81b8c:	4b45      	ldr	r3, [pc, #276]	; (81ca4 <Cl_alarms_scanforAlarms+0x75c>)
   81b8e:	2204      	movs	r2, #4
   81b90:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
				}
	}

	if(Cl_alarms_alarms[VPTSTATUS_LOW].cl_is_enabled)
   81b94:	4b43      	ldr	r3, [pc, #268]	; (81ca4 <Cl_alarms_scanforAlarms+0x75c>)
   81b96:	f893 325e 	ldrb.w	r3, [r3, #606]	; 0x25e
   81b9a:	2b00      	cmp	r3, #0
   81b9c:	d03e      	beq.n	81c1c <Cl_alarms_scanforAlarms+0x6d4>
	{
		
		if(vpt < Cl_alarmThresholdTable.vpt_low_threshold)
   81b9e:	4b44      	ldr	r3, [pc, #272]	; (81cb0 <Cl_alarms_scanforAlarms+0x768>)
   81ba0:	6959      	ldr	r1, [r3, #20]
   81ba2:	4b4c      	ldr	r3, [pc, #304]	; (81cd4 <Cl_alarms_scanforAlarms+0x78c>)
   81ba4:	681a      	ldr	r2, [r3, #0]
   81ba6:	4b44      	ldr	r3, [pc, #272]	; (81cb8 <Cl_alarms_scanforAlarms+0x770>)
   81ba8:	4608      	mov	r0, r1
   81baa:	4611      	mov	r1, r2
   81bac:	4798      	blx	r3
   81bae:	4603      	mov	r3, r0
   81bb0:	2b00      	cmp	r3, #0
   81bb2:	d02a      	beq.n	81c0a <Cl_alarms_scanforAlarms+0x6c2>
		{
			Cl_alarms_alarms[VPTSTATUS_LOW].cl_alarmstate = CL_ALARM_DETECTED;
   81bb4:	4b3b      	ldr	r3, [pc, #236]	; (81ca4 <Cl_alarms_scanforAlarms+0x75c>)
   81bb6:	2201      	movs	r2, #1
   81bb8:	f883 2252 	strb.w	r2, [r3, #594]	; 0x252
			Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=VPTSTATUS_LOW;
   81bbc:	4b3f      	ldr	r3, [pc, #252]	; (81cbc <Cl_alarms_scanforAlarms+0x774>)
   81bbe:	781b      	ldrb	r3, [r3, #0]
   81bc0:	4a3e      	ldr	r2, [pc, #248]	; (81cbc <Cl_alarms_scanforAlarms+0x774>)
   81bc2:	3301      	adds	r3, #1
   81bc4:	00db      	lsls	r3, r3, #3
   81bc6:	4413      	add	r3, r2
   81bc8:	2225      	movs	r2, #37	; 0x25
   81bca:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[VPTSTATUS_LOW].cl_detected_count++;
   81bcc:	4b35      	ldr	r3, [pc, #212]	; (81ca4 <Cl_alarms_scanforAlarms+0x75c>)
   81bce:	f893 325d 	ldrb.w	r3, [r3, #605]	; 0x25d
   81bd2:	3301      	adds	r3, #1
   81bd4:	b2da      	uxtb	r2, r3
   81bd6:	4b33      	ldr	r3, [pc, #204]	; (81ca4 <Cl_alarms_scanforAlarms+0x75c>)
   81bd8:	f883 225d 	strb.w	r2, [r3, #605]	; 0x25d
			cl_alarm_triggered = true;
   81bdc:	4b38      	ldr	r3, [pc, #224]	; (81cc0 <Cl_alarms_scanforAlarms+0x778>)
   81bde:	2201      	movs	r2, #1
   81be0:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = VPTSTATUS_HIGH;
   81be2:	4b38      	ldr	r3, [pc, #224]	; (81cc4 <Cl_alarms_scanforAlarms+0x77c>)
   81be4:	2226      	movs	r2, #38	; 0x26
   81be6:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81be8:	4b34      	ldr	r3, [pc, #208]	; (81cbc <Cl_alarms_scanforAlarms+0x774>)
   81bea:	781b      	ldrb	r3, [r3, #0]
   81bec:	461a      	mov	r2, r3
   81bee:	4b33      	ldr	r3, [pc, #204]	; (81cbc <Cl_alarms_scanforAlarms+0x774>)
   81bf0:	4413      	add	r3, r2
   81bf2:	222e      	movs	r2, #46	; 0x2e
   81bf4:	709a      	strb	r2, [r3, #2]
			Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   81bf6:	4b34      	ldr	r3, [pc, #208]	; (81cc8 <Cl_alarms_scanforAlarms+0x780>)
   81bf8:	4798      	blx	r3
   81bfa:	4603      	mov	r3, r0
   81bfc:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   81bfe:	79fb      	ldrb	r3, [r7, #7]
   81c00:	2b00      	cmp	r3, #0
   81c02:	d00b      	beq.n	81c1c <Cl_alarms_scanforAlarms+0x6d4>
   81c04:	4b31      	ldr	r3, [pc, #196]	; (81ccc <Cl_alarms_scanforAlarms+0x784>)
   81c06:	4798      	blx	r3
   81c08:	e008      	b.n	81c1c <Cl_alarms_scanforAlarms+0x6d4>
			
		}
		else if (Cl_alarms_alarms[VPTSTATUS_LOW].cl_alarmstate == CL_ALARM_DETECTED)
   81c0a:	4b26      	ldr	r3, [pc, #152]	; (81ca4 <Cl_alarms_scanforAlarms+0x75c>)
   81c0c:	f893 3252 	ldrb.w	r3, [r3, #594]	; 0x252
   81c10:	2b01      	cmp	r3, #1
   81c12:	d103      	bne.n	81c1c <Cl_alarms_scanforAlarms+0x6d4>
		{
			Cl_alarms_alarms[VPTSTATUS_LOW].cl_alarmstate = CL_ALARM_INACTIVE;
   81c14:	4b23      	ldr	r3, [pc, #140]	; (81ca4 <Cl_alarms_scanforAlarms+0x75c>)
   81c16:	2204      	movs	r2, #4
   81c18:	f883 2252 	strb.w	r2, [r3, #594]	; 0x252
		}
	}
	

	if(Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_is_enabled)
   81c1c:	4b21      	ldr	r3, [pc, #132]	; (81ca4 <Cl_alarms_scanforAlarms+0x75c>)
   81c1e:	7f9b      	ldrb	r3, [r3, #30]
   81c20:	2b00      	cmp	r3, #0
   81c22:	d060      	beq.n	81ce6 <Cl_alarms_scanforAlarms+0x79e>
	{
		
		
				if(((Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.bloodpumpdoor )) || ((Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.bloodpumpdoor )) )
   81c24:	4b1f      	ldr	r3, [pc, #124]	; (81ca4 <Cl_alarms_scanforAlarms+0x75c>)
   81c26:	7c5b      	ldrb	r3, [r3, #17]
   81c28:	2b01      	cmp	r3, #1
   81c2a:	d103      	bne.n	81c34 <Cl_alarms_scanforAlarms+0x6ec>
   81c2c:	4b2b      	ldr	r3, [pc, #172]	; (81cdc <Cl_alarms_scanforAlarms+0x794>)
   81c2e:	781b      	ldrb	r3, [r3, #0]
   81c30:	2b00      	cmp	r3, #0
   81c32:	d10a      	bne.n	81c4a <Cl_alarms_scanforAlarms+0x702>
   81c34:	4b1b      	ldr	r3, [pc, #108]	; (81ca4 <Cl_alarms_scanforAlarms+0x75c>)
   81c36:	7c5b      	ldrb	r3, [r3, #17]
   81c38:	2b00      	cmp	r3, #0
   81c3a:	d151      	bne.n	81ce0 <Cl_alarms_scanforAlarms+0x798>
   81c3c:	4b27      	ldr	r3, [pc, #156]	; (81cdc <Cl_alarms_scanforAlarms+0x794>)
   81c3e:	781b      	ldrb	r3, [r3, #0]
   81c40:	f083 0301 	eor.w	r3, r3, #1
   81c44:	b2db      	uxtb	r3, r3
   81c46:	2b00      	cmp	r3, #0
   81c48:	d04a      	beq.n	81ce0 <Cl_alarms_scanforAlarms+0x798>
				{
					if(Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_alarmstate != CL_ALARM_DETECTED)
   81c4a:	4b16      	ldr	r3, [pc, #88]	; (81ca4 <Cl_alarms_scanforAlarms+0x75c>)
   81c4c:	7c9b      	ldrb	r3, [r3, #18]
   81c4e:	2b01      	cmp	r3, #1
   81c50:	d027      	beq.n	81ca2 <Cl_alarms_scanforAlarms+0x75a>
					{
						
						
					Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_alarmstate = CL_ALARM_DETECTED;
   81c52:	4b14      	ldr	r3, [pc, #80]	; (81ca4 <Cl_alarms_scanforAlarms+0x75c>)
   81c54:	2201      	movs	r2, #1
   81c56:	749a      	strb	r2, [r3, #18]
					Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=BLOODDOOR_STATUS_OPEN; 
   81c58:	4b18      	ldr	r3, [pc, #96]	; (81cbc <Cl_alarms_scanforAlarms+0x774>)
   81c5a:	781b      	ldrb	r3, [r3, #0]
   81c5c:	4a17      	ldr	r2, [pc, #92]	; (81cbc <Cl_alarms_scanforAlarms+0x774>)
   81c5e:	3301      	adds	r3, #1
   81c60:	00db      	lsls	r3, r3, #3
   81c62:	4413      	add	r3, r2
   81c64:	2201      	movs	r2, #1
   81c66:	809a      	strh	r2, [r3, #4]
					Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_detected_count++;
   81c68:	4b0e      	ldr	r3, [pc, #56]	; (81ca4 <Cl_alarms_scanforAlarms+0x75c>)
   81c6a:	7f5b      	ldrb	r3, [r3, #29]
   81c6c:	3301      	adds	r3, #1
   81c6e:	b2da      	uxtb	r2, r3
   81c70:	4b0c      	ldr	r3, [pc, #48]	; (81ca4 <Cl_alarms_scanforAlarms+0x75c>)
   81c72:	775a      	strb	r2, [r3, #29]
					cl_alarm_triggered = true;
   81c74:	4b12      	ldr	r3, [pc, #72]	; (81cc0 <Cl_alarms_scanforAlarms+0x778>)
   81c76:	2201      	movs	r2, #1
   81c78:	701a      	strb	r2, [r3, #0]
					cl_lastalarmid = BLOODDOOR_STATUS_OPEN;
   81c7a:	4b12      	ldr	r3, [pc, #72]	; (81cc4 <Cl_alarms_scanforAlarms+0x77c>)
   81c7c:	2201      	movs	r2, #1
   81c7e:	701a      	strb	r2, [r3, #0]
					Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81c80:	4b0e      	ldr	r3, [pc, #56]	; (81cbc <Cl_alarms_scanforAlarms+0x774>)
   81c82:	781b      	ldrb	r3, [r3, #0]
   81c84:	461a      	mov	r2, r3
   81c86:	4b0d      	ldr	r3, [pc, #52]	; (81cbc <Cl_alarms_scanforAlarms+0x774>)
   81c88:	4413      	add	r3, r2
   81c8a:	222e      	movs	r2, #46	; 0x2e
   81c8c:	709a      	strb	r2, [r3, #2]
					Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   81c8e:	4b0e      	ldr	r3, [pc, #56]	; (81cc8 <Cl_alarms_scanforAlarms+0x780>)
   81c90:	4798      	blx	r3
   81c92:	4603      	mov	r3, r0
   81c94:	71fb      	strb	r3, [r7, #7]
					ASSERT_ERROR(Cl_alarms_retcode);
   81c96:	79fb      	ldrb	r3, [r7, #7]
   81c98:	2b00      	cmp	r3, #0
   81c9a:	d002      	beq.n	81ca2 <Cl_alarms_scanforAlarms+0x75a>
   81c9c:	4b0b      	ldr	r3, [pc, #44]	; (81ccc <Cl_alarms_scanforAlarms+0x784>)
   81c9e:	4798      	blx	r3
	{
		
		
				if(((Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.bloodpumpdoor )) || ((Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.bloodpumpdoor )) )
				{
					if(Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_alarmstate != CL_ALARM_DETECTED)
   81ca0:	e021      	b.n	81ce6 <Cl_alarms_scanforAlarms+0x79e>
   81ca2:	e020      	b.n	81ce6 <Cl_alarms_scanforAlarms+0x79e>
   81ca4:	20071d0c 	.word	0x20071d0c
   81ca8:	000a88a0 	.word	0x000a88a0
   81cac:	0009ba51 	.word	0x0009ba51
   81cb0:	20072104 	.word	0x20072104
   81cb4:	200720fc 	.word	0x200720fc
   81cb8:	000a6cd1 	.word	0x000a6cd1
   81cbc:	200722c0 	.word	0x200722c0
   81cc0:	20071739 	.word	0x20071739
   81cc4:	20072100 	.word	0x20072100
   81cc8:	00082d91 	.word	0x00082d91
   81ccc:	00088fc1 	.word	0x00088fc1
   81cd0:	000a88ac 	.word	0x000a88ac
   81cd4:	2007173c 	.word	0x2007173c
   81cd8:	000a6c95 	.word	0x000a6c95
   81cdc:	20072224 	.word	0x20072224

				}
				else
				{

					Cl_alarms_alarms[BLOODDOOR_STATUS_OPEN].cl_alarmstate = CL_ALARM_INACTIVE;
   81ce0:	4b97      	ldr	r3, [pc, #604]	; (81f40 <Cl_alarms_scanforAlarms+0x9f8>)
   81ce2:	2204      	movs	r2, #4
   81ce4:	749a      	strb	r2, [r3, #18]
				}
				
		
	
	}
	if(Cl_alarms_alarms[HOLDER1STATUS_OPEN].cl_is_enabled)
   81ce6:	4b96      	ldr	r3, [pc, #600]	; (81f40 <Cl_alarms_scanforAlarms+0x9f8>)
   81ce8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
   81cec:	2b00      	cmp	r3, #0
   81cee:	d046      	beq.n	81d7e <Cl_alarms_scanforAlarms+0x836>
	{
				if(((Cl_alarms_alarms[HOLDER1STATUS_OPEN].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.holder1status )) || ((Cl_alarms_alarms[HOLDER1STATUS_OPEN].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.holder1status )) )
   81cf0:	4b93      	ldr	r3, [pc, #588]	; (81f40 <Cl_alarms_scanforAlarms+0x9f8>)
   81cf2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
   81cf6:	2b01      	cmp	r3, #1
   81cf8:	d104      	bne.n	81d04 <Cl_alarms_scanforAlarms+0x7bc>
   81cfa:	4b92      	ldr	r3, [pc, #584]	; (81f44 <Cl_alarms_scanforAlarms+0x9fc>)
   81cfc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   81d00:	2b00      	cmp	r3, #0
   81d02:	d10c      	bne.n	81d1e <Cl_alarms_scanforAlarms+0x7d6>
   81d04:	4b8e      	ldr	r3, [pc, #568]	; (81f40 <Cl_alarms_scanforAlarms+0x9f8>)
   81d06:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
   81d0a:	2b00      	cmp	r3, #0
   81d0c:	d133      	bne.n	81d76 <Cl_alarms_scanforAlarms+0x82e>
   81d0e:	4b8d      	ldr	r3, [pc, #564]	; (81f44 <Cl_alarms_scanforAlarms+0x9fc>)
   81d10:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   81d14:	f083 0301 	eor.w	r3, r3, #1
   81d18:	b2db      	uxtb	r3, r3
   81d1a:	2b00      	cmp	r3, #0
   81d1c:	d02b      	beq.n	81d76 <Cl_alarms_scanforAlarms+0x82e>
				{
					Cl_alarms_alarms[HOLDER1STATUS_OPEN].cl_alarmstate = CL_ALARM_DETECTED;
   81d1e:	4b88      	ldr	r3, [pc, #544]	; (81f40 <Cl_alarms_scanforAlarms+0x9f8>)
   81d20:	2201      	movs	r2, #1
   81d22:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
					Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=HOLDER1STATUS_OPEN; 
   81d26:	4b88      	ldr	r3, [pc, #544]	; (81f48 <Cl_alarms_scanforAlarms+0xa00>)
   81d28:	781b      	ldrb	r3, [r3, #0]
   81d2a:	4a87      	ldr	r2, [pc, #540]	; (81f48 <Cl_alarms_scanforAlarms+0xa00>)
   81d2c:	3301      	adds	r3, #1
   81d2e:	00db      	lsls	r3, r3, #3
   81d30:	4413      	add	r3, r2
   81d32:	2203      	movs	r2, #3
   81d34:	809a      	strh	r2, [r3, #4]
					Cl_alarms_alarms[HOLDER1STATUS_OPEN].cl_detected_count++;
   81d36:	4b82      	ldr	r3, [pc, #520]	; (81f40 <Cl_alarms_scanforAlarms+0x9f8>)
   81d38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
   81d3c:	3301      	adds	r3, #1
   81d3e:	b2da      	uxtb	r2, r3
   81d40:	4b7f      	ldr	r3, [pc, #508]	; (81f40 <Cl_alarms_scanforAlarms+0x9f8>)
   81d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
					cl_alarm_triggered = true;
   81d46:	4b81      	ldr	r3, [pc, #516]	; (81f4c <Cl_alarms_scanforAlarms+0xa04>)
   81d48:	2201      	movs	r2, #1
   81d4a:	701a      	strb	r2, [r3, #0]
					cl_lastalarmid = HOLDER1STATUS_OPEN;
   81d4c:	4b80      	ldr	r3, [pc, #512]	; (81f50 <Cl_alarms_scanforAlarms+0xa08>)
   81d4e:	2203      	movs	r2, #3
   81d50:	701a      	strb	r2, [r3, #0]
					Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81d52:	4b7d      	ldr	r3, [pc, #500]	; (81f48 <Cl_alarms_scanforAlarms+0xa00>)
   81d54:	781b      	ldrb	r3, [r3, #0]
   81d56:	461a      	mov	r2, r3
   81d58:	4b7b      	ldr	r3, [pc, #492]	; (81f48 <Cl_alarms_scanforAlarms+0xa00>)
   81d5a:	4413      	add	r3, r2
   81d5c:	222e      	movs	r2, #46	; 0x2e
   81d5e:	709a      	strb	r2, [r3, #2]
					Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   81d60:	4b7c      	ldr	r3, [pc, #496]	; (81f54 <Cl_alarms_scanforAlarms+0xa0c>)
   81d62:	4798      	blx	r3
   81d64:	4603      	mov	r3, r0
   81d66:	71fb      	strb	r3, [r7, #7]
					ASSERT_ERROR(Cl_alarms_retcode);
   81d68:	79fb      	ldrb	r3, [r7, #7]
   81d6a:	2b00      	cmp	r3, #0
   81d6c:	d002      	beq.n	81d74 <Cl_alarms_scanforAlarms+0x82c>
   81d6e:	4b7a      	ldr	r3, [pc, #488]	; (81f58 <Cl_alarms_scanforAlarms+0xa10>)
   81d70:	4798      	blx	r3
   81d72:	e004      	b.n	81d7e <Cl_alarms_scanforAlarms+0x836>
   81d74:	e003      	b.n	81d7e <Cl_alarms_scanforAlarms+0x836>
				}
				else
				{

					Cl_alarms_alarms[HOLDER1STATUS_OPEN].cl_alarmstate = CL_ALARM_INACTIVE;				
   81d76:	4b72      	ldr	r3, [pc, #456]	; (81f40 <Cl_alarms_scanforAlarms+0x9f8>)
   81d78:	2204      	movs	r2, #4
   81d7a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
		
				}
					
	}
	
	if(Cl_alarms_alarms[HOLDER1STATUS_CLOSED].cl_is_enabled)
   81d7e:	4b70      	ldr	r3, [pc, #448]	; (81f40 <Cl_alarms_scanforAlarms+0x9f8>)
   81d80:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
   81d84:	2b00      	cmp	r3, #0
   81d86:	d046      	beq.n	81e16 <Cl_alarms_scanforAlarms+0x8ce>
	{
		
		
		if(((Cl_alarms_alarms[HOLDER1STATUS_CLOSED].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.holder1status )) || ((Cl_alarms_alarms[HOLDER1STATUS_CLOSED].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.holder1status )) )
   81d88:	4b6d      	ldr	r3, [pc, #436]	; (81f40 <Cl_alarms_scanforAlarms+0x9f8>)
   81d8a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
   81d8e:	2b01      	cmp	r3, #1
   81d90:	d104      	bne.n	81d9c <Cl_alarms_scanforAlarms+0x854>
   81d92:	4b6c      	ldr	r3, [pc, #432]	; (81f44 <Cl_alarms_scanforAlarms+0x9fc>)
   81d94:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   81d98:	2b00      	cmp	r3, #0
   81d9a:	d10c      	bne.n	81db6 <Cl_alarms_scanforAlarms+0x86e>
   81d9c:	4b68      	ldr	r3, [pc, #416]	; (81f40 <Cl_alarms_scanforAlarms+0x9f8>)
   81d9e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
   81da2:	2b00      	cmp	r3, #0
   81da4:	d133      	bne.n	81e0e <Cl_alarms_scanforAlarms+0x8c6>
   81da6:	4b67      	ldr	r3, [pc, #412]	; (81f44 <Cl_alarms_scanforAlarms+0x9fc>)
   81da8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   81dac:	f083 0301 	eor.w	r3, r3, #1
   81db0:	b2db      	uxtb	r3, r3
   81db2:	2b00      	cmp	r3, #0
   81db4:	d02b      	beq.n	81e0e <Cl_alarms_scanforAlarms+0x8c6>
		{
			Cl_alarms_alarms[HOLDER1STATUS_CLOSED].cl_alarmstate = CL_ALARM_DETECTED;
   81db6:	4b62      	ldr	r3, [pc, #392]	; (81f40 <Cl_alarms_scanforAlarms+0x9f8>)
   81db8:	2201      	movs	r2, #1
   81dba:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
			Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=HOLDER1STATUS_OPEN;
   81dbe:	4b62      	ldr	r3, [pc, #392]	; (81f48 <Cl_alarms_scanforAlarms+0xa00>)
   81dc0:	781b      	ldrb	r3, [r3, #0]
   81dc2:	4a61      	ldr	r2, [pc, #388]	; (81f48 <Cl_alarms_scanforAlarms+0xa00>)
   81dc4:	3301      	adds	r3, #1
   81dc6:	00db      	lsls	r3, r3, #3
   81dc8:	4413      	add	r3, r2
   81dca:	2203      	movs	r2, #3
   81dcc:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[HOLDER1STATUS_CLOSED].cl_detected_count++;
   81dce:	4b5c      	ldr	r3, [pc, #368]	; (81f40 <Cl_alarms_scanforAlarms+0x9f8>)
   81dd0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
   81dd4:	3301      	adds	r3, #1
   81dd6:	b2da      	uxtb	r2, r3
   81dd8:	4b59      	ldr	r3, [pc, #356]	; (81f40 <Cl_alarms_scanforAlarms+0x9f8>)
   81dda:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			cl_alarm_triggered = true;
   81dde:	4b5b      	ldr	r3, [pc, #364]	; (81f4c <Cl_alarms_scanforAlarms+0xa04>)
   81de0:	2201      	movs	r2, #1
   81de2:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = HOLDER1STATUS_CLOSED;
   81de4:	4b5a      	ldr	r3, [pc, #360]	; (81f50 <Cl_alarms_scanforAlarms+0xa08>)
   81de6:	2205      	movs	r2, #5
   81de8:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81dea:	4b57      	ldr	r3, [pc, #348]	; (81f48 <Cl_alarms_scanforAlarms+0xa00>)
   81dec:	781b      	ldrb	r3, [r3, #0]
   81dee:	461a      	mov	r2, r3
   81df0:	4b55      	ldr	r3, [pc, #340]	; (81f48 <Cl_alarms_scanforAlarms+0xa00>)
   81df2:	4413      	add	r3, r2
   81df4:	222e      	movs	r2, #46	; 0x2e
   81df6:	709a      	strb	r2, [r3, #2]
			Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   81df8:	4b56      	ldr	r3, [pc, #344]	; (81f54 <Cl_alarms_scanforAlarms+0xa0c>)
   81dfa:	4798      	blx	r3
   81dfc:	4603      	mov	r3, r0
   81dfe:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   81e00:	79fb      	ldrb	r3, [r7, #7]
   81e02:	2b00      	cmp	r3, #0
   81e04:	d002      	beq.n	81e0c <Cl_alarms_scanforAlarms+0x8c4>
   81e06:	4b54      	ldr	r3, [pc, #336]	; (81f58 <Cl_alarms_scanforAlarms+0xa10>)
   81e08:	4798      	blx	r3
   81e0a:	e004      	b.n	81e16 <Cl_alarms_scanforAlarms+0x8ce>
   81e0c:	e003      	b.n	81e16 <Cl_alarms_scanforAlarms+0x8ce>
		}
		else
		{

			Cl_alarms_alarms[HOLDER1STATUS_CLOSED].cl_alarmstate = CL_ALARM_INACTIVE;
   81e0e:	4b4c      	ldr	r3, [pc, #304]	; (81f40 <Cl_alarms_scanforAlarms+0x9f8>)
   81e10:	2204      	movs	r2, #4
   81e12:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
		}
		
	}
	
	
if(Cl_alarms_alarms[HOLDER2STATUS_OPEN].cl_is_enabled)
   81e16:	4b4a      	ldr	r3, [pc, #296]	; (81f40 <Cl_alarms_scanforAlarms+0x9f8>)
   81e18:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
   81e1c:	2b00      	cmp	r3, #0
   81e1e:	d046      	beq.n	81eae <Cl_alarms_scanforAlarms+0x966>
{
			
		if(((Cl_alarms_alarms[HOLDER2STATUS_OPEN].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.holder2status )) || ((Cl_alarms_alarms[HOLDER2STATUS_OPEN].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.holder2status )) )
   81e20:	4b47      	ldr	r3, [pc, #284]	; (81f40 <Cl_alarms_scanforAlarms+0x9f8>)
   81e22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
   81e26:	2b01      	cmp	r3, #1
   81e28:	d104      	bne.n	81e34 <Cl_alarms_scanforAlarms+0x8ec>
   81e2a:	4b46      	ldr	r3, [pc, #280]	; (81f44 <Cl_alarms_scanforAlarms+0x9fc>)
   81e2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
   81e30:	2b00      	cmp	r3, #0
   81e32:	d10c      	bne.n	81e4e <Cl_alarms_scanforAlarms+0x906>
   81e34:	4b42      	ldr	r3, [pc, #264]	; (81f40 <Cl_alarms_scanforAlarms+0x9f8>)
   81e36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
   81e3a:	2b00      	cmp	r3, #0
   81e3c:	d133      	bne.n	81ea6 <Cl_alarms_scanforAlarms+0x95e>
   81e3e:	4b41      	ldr	r3, [pc, #260]	; (81f44 <Cl_alarms_scanforAlarms+0x9fc>)
   81e40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
   81e44:	f083 0301 	eor.w	r3, r3, #1
   81e48:	b2db      	uxtb	r3, r3
   81e4a:	2b00      	cmp	r3, #0
   81e4c:	d02b      	beq.n	81ea6 <Cl_alarms_scanforAlarms+0x95e>
				
			{
				Cl_alarms_alarms[HOLDER2STATUS_OPEN].cl_alarmstate = CL_ALARM_DETECTED;
   81e4e:	4b3c      	ldr	r3, [pc, #240]	; (81f40 <Cl_alarms_scanforAlarms+0x9f8>)
   81e50:	2201      	movs	r2, #1
   81e52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
				Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=HOLDER2STATUS_OPEN;
   81e56:	4b3c      	ldr	r3, [pc, #240]	; (81f48 <Cl_alarms_scanforAlarms+0xa00>)
   81e58:	781b      	ldrb	r3, [r3, #0]
   81e5a:	4a3b      	ldr	r2, [pc, #236]	; (81f48 <Cl_alarms_scanforAlarms+0xa00>)
   81e5c:	3301      	adds	r3, #1
   81e5e:	00db      	lsls	r3, r3, #3
   81e60:	4413      	add	r3, r2
   81e62:	2204      	movs	r2, #4
   81e64:	809a      	strh	r2, [r3, #4]
				Cl_alarms_alarms[HOLDER2STATUS_OPEN].cl_detected_count++;
   81e66:	4b36      	ldr	r3, [pc, #216]	; (81f40 <Cl_alarms_scanforAlarms+0x9f8>)
   81e68:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
   81e6c:	3301      	adds	r3, #1
   81e6e:	b2da      	uxtb	r2, r3
   81e70:	4b33      	ldr	r3, [pc, #204]	; (81f40 <Cl_alarms_scanforAlarms+0x9f8>)
   81e72:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
				cl_alarm_triggered = true;
   81e76:	4b35      	ldr	r3, [pc, #212]	; (81f4c <Cl_alarms_scanforAlarms+0xa04>)
   81e78:	2201      	movs	r2, #1
   81e7a:	701a      	strb	r2, [r3, #0]
				cl_lastalarmid = HOLDER2STATUS_OPEN;
   81e7c:	4b34      	ldr	r3, [pc, #208]	; (81f50 <Cl_alarms_scanforAlarms+0xa08>)
   81e7e:	2204      	movs	r2, #4
   81e80:	701a      	strb	r2, [r3, #0]
				Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81e82:	4b31      	ldr	r3, [pc, #196]	; (81f48 <Cl_alarms_scanforAlarms+0xa00>)
   81e84:	781b      	ldrb	r3, [r3, #0]
   81e86:	461a      	mov	r2, r3
   81e88:	4b2f      	ldr	r3, [pc, #188]	; (81f48 <Cl_alarms_scanforAlarms+0xa00>)
   81e8a:	4413      	add	r3, r2
   81e8c:	222e      	movs	r2, #46	; 0x2e
   81e8e:	709a      	strb	r2, [r3, #2]
				Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   81e90:	4b30      	ldr	r3, [pc, #192]	; (81f54 <Cl_alarms_scanforAlarms+0xa0c>)
   81e92:	4798      	blx	r3
   81e94:	4603      	mov	r3, r0
   81e96:	71fb      	strb	r3, [r7, #7]
				ASSERT_ERROR(Cl_alarms_retcode);
   81e98:	79fb      	ldrb	r3, [r7, #7]
   81e9a:	2b00      	cmp	r3, #0
   81e9c:	d002      	beq.n	81ea4 <Cl_alarms_scanforAlarms+0x95c>
   81e9e:	4b2e      	ldr	r3, [pc, #184]	; (81f58 <Cl_alarms_scanforAlarms+0xa10>)
   81ea0:	4798      	blx	r3
   81ea2:	e004      	b.n	81eae <Cl_alarms_scanforAlarms+0x966>
   81ea4:	e003      	b.n	81eae <Cl_alarms_scanforAlarms+0x966>
			}
			else
			{

				Cl_alarms_alarms[HOLDER2STATUS_OPEN].cl_alarmstate = CL_ALARM_INACTIVE;
   81ea6:	4b26      	ldr	r3, [pc, #152]	; (81f40 <Cl_alarms_scanforAlarms+0x9f8>)
   81ea8:	2204      	movs	r2, #4
   81eaa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
		

}

	
	if(Cl_alarms_alarms[HOLDER2STATUS_CLOSED].cl_is_enabled)
   81eae:	4b24      	ldr	r3, [pc, #144]	; (81f40 <Cl_alarms_scanforAlarms+0x9f8>)
   81eb0:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
   81eb4:	2b00      	cmp	r3, #0
   81eb6:	d055      	beq.n	81f64 <Cl_alarms_scanforAlarms+0xa1c>
	{
		
		if(((Cl_alarms_alarms[HOLDER2STATUS_CLOSED].cl_triggertype == LOGIC_HIGH) && (cl_sys_statbuffer.holder2status )) || ((Cl_alarms_alarms[HOLDER2STATUS_CLOSED].cl_triggertype == LOGIC_LOW) && (!cl_sys_statbuffer.holder2status )) )
   81eb8:	4b21      	ldr	r3, [pc, #132]	; (81f40 <Cl_alarms_scanforAlarms+0x9f8>)
   81eba:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
   81ebe:	2b01      	cmp	r3, #1
   81ec0:	d104      	bne.n	81ecc <Cl_alarms_scanforAlarms+0x984>
   81ec2:	4b20      	ldr	r3, [pc, #128]	; (81f44 <Cl_alarms_scanforAlarms+0x9fc>)
   81ec4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
   81ec8:	2b00      	cmp	r3, #0
   81eca:	d10c      	bne.n	81ee6 <Cl_alarms_scanforAlarms+0x99e>
   81ecc:	4b1c      	ldr	r3, [pc, #112]	; (81f40 <Cl_alarms_scanforAlarms+0x9f8>)
   81ece:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
   81ed2:	2b00      	cmp	r3, #0
   81ed4:	d142      	bne.n	81f5c <Cl_alarms_scanforAlarms+0xa14>
   81ed6:	4b1b      	ldr	r3, [pc, #108]	; (81f44 <Cl_alarms_scanforAlarms+0x9fc>)
   81ed8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
   81edc:	f083 0301 	eor.w	r3, r3, #1
   81ee0:	b2db      	uxtb	r3, r3
   81ee2:	2b00      	cmp	r3, #0
   81ee4:	d03a      	beq.n	81f5c <Cl_alarms_scanforAlarms+0xa14>
		
		{
			Cl_alarms_alarms[HOLDER2STATUS_CLOSED].cl_alarmstate = CL_ALARM_DETECTED;
   81ee6:	4b16      	ldr	r3, [pc, #88]	; (81f40 <Cl_alarms_scanforAlarms+0x9f8>)
   81ee8:	2201      	movs	r2, #1
   81eea:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
			Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=HOLDER2STATUS_CLOSED;
   81eee:	4b16      	ldr	r3, [pc, #88]	; (81f48 <Cl_alarms_scanforAlarms+0xa00>)
   81ef0:	781b      	ldrb	r3, [r3, #0]
   81ef2:	4a15      	ldr	r2, [pc, #84]	; (81f48 <Cl_alarms_scanforAlarms+0xa00>)
   81ef4:	3301      	adds	r3, #1
   81ef6:	00db      	lsls	r3, r3, #3
   81ef8:	4413      	add	r3, r2
   81efa:	2206      	movs	r2, #6
   81efc:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[HOLDER2STATUS_CLOSED].cl_detected_count++;
   81efe:	4b10      	ldr	r3, [pc, #64]	; (81f40 <Cl_alarms_scanforAlarms+0x9f8>)
   81f00:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
   81f04:	3301      	adds	r3, #1
   81f06:	b2da      	uxtb	r2, r3
   81f08:	4b0d      	ldr	r3, [pc, #52]	; (81f40 <Cl_alarms_scanforAlarms+0x9f8>)
   81f0a:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
			cl_alarm_triggered = true;
   81f0e:	4b0f      	ldr	r3, [pc, #60]	; (81f4c <Cl_alarms_scanforAlarms+0xa04>)
   81f10:	2201      	movs	r2, #1
   81f12:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = HOLDER2STATUS_CLOSED;
   81f14:	4b0e      	ldr	r3, [pc, #56]	; (81f50 <Cl_alarms_scanforAlarms+0xa08>)
   81f16:	2206      	movs	r2, #6
   81f18:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81f1a:	4b0b      	ldr	r3, [pc, #44]	; (81f48 <Cl_alarms_scanforAlarms+0xa00>)
   81f1c:	781b      	ldrb	r3, [r3, #0]
   81f1e:	461a      	mov	r2, r3
   81f20:	4b09      	ldr	r3, [pc, #36]	; (81f48 <Cl_alarms_scanforAlarms+0xa00>)
   81f22:	4413      	add	r3, r2
   81f24:	222e      	movs	r2, #46	; 0x2e
   81f26:	709a      	strb	r2, [r3, #2]
			Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   81f28:	4b0a      	ldr	r3, [pc, #40]	; (81f54 <Cl_alarms_scanforAlarms+0xa0c>)
   81f2a:	4798      	blx	r3
   81f2c:	4603      	mov	r3, r0
   81f2e:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   81f30:	79fb      	ldrb	r3, [r7, #7]
   81f32:	2b00      	cmp	r3, #0
   81f34:	d002      	beq.n	81f3c <Cl_alarms_scanforAlarms+0x9f4>
   81f36:	4b08      	ldr	r3, [pc, #32]	; (81f58 <Cl_alarms_scanforAlarms+0xa10>)
   81f38:	4798      	blx	r3
   81f3a:	e013      	b.n	81f64 <Cl_alarms_scanforAlarms+0xa1c>
   81f3c:	e012      	b.n	81f64 <Cl_alarms_scanforAlarms+0xa1c>
   81f3e:	bf00      	nop
   81f40:	20071d0c 	.word	0x20071d0c
   81f44:	20072224 	.word	0x20072224
   81f48:	200722c0 	.word	0x200722c0
   81f4c:	20071739 	.word	0x20071739
   81f50:	20072100 	.word	0x20072100
   81f54:	00082d91 	.word	0x00082d91
   81f58:	00088fc1 	.word	0x00088fc1
		}
		else
		{

			Cl_alarms_alarms[HOLDER2STATUS_CLOSED].cl_alarmstate = CL_ALARM_INACTIVE;
   81f5c:	4ba9      	ldr	r3, [pc, #676]	; (82204 <Cl_alarms_scanforAlarms+0xcbc>)
   81f5e:	2204      	movs	r2, #4
   81f60:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
*/
			
	//if(Cl_alarms_alarms[FLOWSTATUS_FLOWON].cl_is_enabled)
	{
				
		if(cl_sys_statbuffer.Flowstatus) 
   81f64:	4ba8      	ldr	r3, [pc, #672]	; (82208 <Cl_alarms_scanforAlarms+0xcc0>)
   81f66:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
   81f68:	2b00      	cmp	r3, #0
   81f6a:	d002      	beq.n	81f72 <Cl_alarms_scanforAlarms+0xa2a>
		{	
				Flowswitch_msg.flowswitch_event = FLOW_SWITCH_EVENT_LEVEL_HIGH;						
   81f6c:	4ba7      	ldr	r3, [pc, #668]	; (8220c <Cl_alarms_scanforAlarms+0xcc4>)
   81f6e:	2201      	movs	r2, #1
   81f70:	701a      	strb	r2, [r3, #0]


	//if(Cl_alarms_alarms[FLOWSTATUS_FLOWOFF].cl_is_enabled)
	{
				
		if(!cl_sys_statbuffer.Flowstatus)
   81f72:	4ba5      	ldr	r3, [pc, #660]	; (82208 <Cl_alarms_scanforAlarms+0xcc0>)
   81f74:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
   81f76:	2b00      	cmp	r3, #0
   81f78:	d102      	bne.n	81f80 <Cl_alarms_scanforAlarms+0xa38>
		{
				Flowswitch_msg.flowswitch_event = FLOW_SWITCH_EVENT_LEVEL_LOW;
   81f7a:	4ba4      	ldr	r3, [pc, #656]	; (8220c <Cl_alarms_scanforAlarms+0xcc4>)
   81f7c:	2202      	movs	r2, #2
   81f7e:	701a      	strb	r2, [r3, #0]
		}
	}


			
	if(Cl_alarms_alarms[LEVELSWITCH_OFF_TO_ON].cl_is_enabled)
   81f80:	4ba0      	ldr	r3, [pc, #640]	; (82204 <Cl_alarms_scanforAlarms+0xcbc>)
   81f82:	f893 33de 	ldrb.w	r3, [r3, #990]	; 0x3de
   81f86:	2b00      	cmp	r3, #0
   81f88:	d046      	beq.n	82018 <Cl_alarms_scanforAlarms+0xad0>
	{
	
		if(((cl_sys_statbuffer.levelswitch1) && (Cl_alarms_alarms[LEVELSWITCH_OFF_TO_ON].cl_triggertype == LOGIC_HIGH)) || ((!cl_sys_statbuffer.levelswitch1) && (Cl_alarms_alarms[LEVELSWITCH_OFF_TO_ON].cl_triggertype == LOGIC_LOW)))// when water level goes above it is a logic zero
   81f8a:	4b9f      	ldr	r3, [pc, #636]	; (82208 <Cl_alarms_scanforAlarms+0xcc0>)
   81f8c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   81f90:	2b00      	cmp	r3, #0
   81f92:	d004      	beq.n	81f9e <Cl_alarms_scanforAlarms+0xa56>
   81f94:	4b9b      	ldr	r3, [pc, #620]	; (82204 <Cl_alarms_scanforAlarms+0xcbc>)
   81f96:	f893 33d1 	ldrb.w	r3, [r3, #977]	; 0x3d1
   81f9a:	2b01      	cmp	r3, #1
   81f9c:	d00c      	beq.n	81fb8 <Cl_alarms_scanforAlarms+0xa70>
   81f9e:	4b9a      	ldr	r3, [pc, #616]	; (82208 <Cl_alarms_scanforAlarms+0xcc0>)
   81fa0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   81fa4:	f083 0301 	eor.w	r3, r3, #1
   81fa8:	b2db      	uxtb	r3, r3
   81faa:	2b00      	cmp	r3, #0
   81fac:	d034      	beq.n	82018 <Cl_alarms_scanforAlarms+0xad0>
   81fae:	4b95      	ldr	r3, [pc, #596]	; (82204 <Cl_alarms_scanforAlarms+0xcbc>)
   81fb0:	f893 33d1 	ldrb.w	r3, [r3, #977]	; 0x3d1
   81fb4:	2b00      	cmp	r3, #0
   81fb6:	d12f      	bne.n	82018 <Cl_alarms_scanforAlarms+0xad0>
		{
				
					//if(levelswitchprevstatus != 0)
					if (Cl_alarms_alarms[LEVELSWITCH_OFF_TO_ON].cl_alarmstate != CL_ALARM_DETECTED)
   81fb8:	4b92      	ldr	r3, [pc, #584]	; (82204 <Cl_alarms_scanforAlarms+0xcbc>)
   81fba:	f893 33d2 	ldrb.w	r3, [r3, #978]	; 0x3d2
   81fbe:	2b01      	cmp	r3, #1
   81fc0:	d020      	beq.n	82004 <Cl_alarms_scanforAlarms+0xabc>
					{
									

								Cl_alarms_alarms[LEVELSWITCH_ON_TO_OFF].cl_alarmstate = CL_ALARM_ACTIVE;	
   81fc2:	4b90      	ldr	r3, [pc, #576]	; (82204 <Cl_alarms_scanforAlarms+0xcbc>)
   81fc4:	2202      	movs	r2, #2
   81fc6:	f883 23e2 	strb.w	r2, [r3, #994]	; 0x3e2
								Cl_alarms_alarms[LEVELSWITCH_OFF_TO_ON].cl_alarmstate = CL_ALARM_DETECTED;
   81fca:	4b8e      	ldr	r3, [pc, #568]	; (82204 <Cl_alarms_scanforAlarms+0xcbc>)
   81fcc:	2201      	movs	r2, #1
   81fce:	f883 23d2 	strb.w	r2, [r3, #978]	; 0x3d2
								Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=LEVELSWITCH_OFF_TO_ON; 
   81fd2:	4b8f      	ldr	r3, [pc, #572]	; (82210 <Cl_alarms_scanforAlarms+0xcc8>)
   81fd4:	781b      	ldrb	r3, [r3, #0]
   81fd6:	4a8e      	ldr	r2, [pc, #568]	; (82210 <Cl_alarms_scanforAlarms+0xcc8>)
   81fd8:	3301      	adds	r3, #1
   81fda:	00db      	lsls	r3, r3, #3
   81fdc:	4413      	add	r3, r2
   81fde:	223d      	movs	r2, #61	; 0x3d
   81fe0:	809a      	strh	r2, [r3, #4]
								//Cl_alarms_alarms[LEVELSWITCH_OFF_TO_ON].cl_detected_count++;
								cl_alarm_triggered = true;
   81fe2:	4b8c      	ldr	r3, [pc, #560]	; (82214 <Cl_alarms_scanforAlarms+0xccc>)
   81fe4:	2201      	movs	r2, #1
   81fe6:	701a      	strb	r2, [r3, #0]
								cl_lastalarmid = LEVELSWITCH_OFF_TO_ON;
   81fe8:	4b8b      	ldr	r3, [pc, #556]	; (82218 <Cl_alarms_scanforAlarms+0xcd0>)
   81fea:	223d      	movs	r2, #61	; 0x3d
   81fec:	701a      	strb	r2, [r3, #0]
								Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   81fee:	4b88      	ldr	r3, [pc, #544]	; (82210 <Cl_alarms_scanforAlarms+0xcc8>)
   81ff0:	781b      	ldrb	r3, [r3, #0]
   81ff2:	461a      	mov	r2, r3
   81ff4:	4b86      	ldr	r3, [pc, #536]	; (82210 <Cl_alarms_scanforAlarms+0xcc8>)
   81ff6:	4413      	add	r3, r2
   81ff8:	222e      	movs	r2, #46	; 0x2e
   81ffa:	709a      	strb	r2, [r3, #2]
								//Cl_UpdateMacAlarmEventTable();
								Levelswitch_msg.levelswitch_event = LEVEL_SWITCH_EVENT_ON_TO_OFF;
   81ffc:	4b87      	ldr	r3, [pc, #540]	; (8221c <Cl_alarms_scanforAlarms+0xcd4>)
   81ffe:	2201      	movs	r2, #1
   82000:	701a      	strb	r2, [r3, #0]
   82002:	e006      	b.n	82012 <Cl_alarms_scanforAlarms+0xaca>
					
					}
					else
					{
						//		Cl_alarms_alarms[LEVELSWITCH_OFF_TO_ON].cl_alarmstate = CL_ALARM_INACTIVE;
								Cl_alarms_alarms[LEVELSWITCH_OFF_TO_ON].cl_detected_count = 0;
   82004:	4b7f      	ldr	r3, [pc, #508]	; (82204 <Cl_alarms_scanforAlarms+0xcbc>)
   82006:	2200      	movs	r2, #0
   82008:	f883 23dd 	strb.w	r2, [r3, #989]	; 0x3dd
								cl_alarm_triggered = false;
   8200c:	4b81      	ldr	r3, [pc, #516]	; (82214 <Cl_alarms_scanforAlarms+0xccc>)
   8200e:	2200      	movs	r2, #0
   82010:	701a      	strb	r2, [r3, #0]
					
					}
				
					levelswitchprevstatus = 0;
   82012:	4b83      	ldr	r3, [pc, #524]	; (82220 <Cl_alarms_scanforAlarms+0xcd8>)
   82014:	2200      	movs	r2, #0
   82016:	701a      	strb	r2, [r3, #0]
		}
	}


	if(Cl_alarms_alarms[LEVELSWITCH_ON_TO_OFF].cl_is_enabled)
   82018:	4b7a      	ldr	r3, [pc, #488]	; (82204 <Cl_alarms_scanforAlarms+0xcbc>)
   8201a:	f893 33ee 	ldrb.w	r3, [r3, #1006]	; 0x3ee
   8201e:	2b00      	cmp	r3, #0
   82020:	d043      	beq.n	820aa <Cl_alarms_scanforAlarms+0xb62>
	{
		if(((cl_sys_statbuffer.levelswitch1) && (Cl_alarms_alarms[LEVELSWITCH_ON_TO_OFF].cl_triggertype == LOGIC_HIGH)) || ((!cl_sys_statbuffer.levelswitch1) && (Cl_alarms_alarms[LEVELSWITCH_ON_TO_OFF].cl_triggertype == LOGIC_LOW)))	
   82022:	4b79      	ldr	r3, [pc, #484]	; (82208 <Cl_alarms_scanforAlarms+0xcc0>)
   82024:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   82028:	2b00      	cmp	r3, #0
   8202a:	d004      	beq.n	82036 <Cl_alarms_scanforAlarms+0xaee>
   8202c:	4b75      	ldr	r3, [pc, #468]	; (82204 <Cl_alarms_scanforAlarms+0xcbc>)
   8202e:	f893 33e1 	ldrb.w	r3, [r3, #993]	; 0x3e1
   82032:	2b01      	cmp	r3, #1
   82034:	d00c      	beq.n	82050 <Cl_alarms_scanforAlarms+0xb08>
   82036:	4b74      	ldr	r3, [pc, #464]	; (82208 <Cl_alarms_scanforAlarms+0xcc0>)
   82038:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   8203c:	f083 0301 	eor.w	r3, r3, #1
   82040:	b2db      	uxtb	r3, r3
   82042:	2b00      	cmp	r3, #0
   82044:	d031      	beq.n	820aa <Cl_alarms_scanforAlarms+0xb62>
   82046:	4b6f      	ldr	r3, [pc, #444]	; (82204 <Cl_alarms_scanforAlarms+0xcbc>)
   82048:	f893 33e1 	ldrb.w	r3, [r3, #993]	; 0x3e1
   8204c:	2b00      	cmp	r3, #0
   8204e:	d12c      	bne.n	820aa <Cl_alarms_scanforAlarms+0xb62>
		//if((!cl_sys_statbuffer.levelswitch1) && (Cl_alarms_alarms[LEVELSWITCH_ON_TO_OFF].cl_triggertype == LOGIC_LOW))
		{				
				//	if(levelswitchprevstatus != 1)
				if (Cl_alarms_alarms[LEVELSWITCH_ON_TO_OFF].cl_alarmstate != CL_ALARM_DETECTED)
   82050:	4b6c      	ldr	r3, [pc, #432]	; (82204 <Cl_alarms_scanforAlarms+0xcbc>)
   82052:	f893 33e2 	ldrb.w	r3, [r3, #994]	; 0x3e2
   82056:	2b01      	cmp	r3, #1
   82058:	d01d      	beq.n	82096 <Cl_alarms_scanforAlarms+0xb4e>
					{
					
				
						if(Cl_alarms_alarms[LEVELSWITCH_ON_TO_OFF].cl_is_enabled)
   8205a:	4b6a      	ldr	r3, [pc, #424]	; (82204 <Cl_alarms_scanforAlarms+0xcbc>)
   8205c:	f893 33ee 	ldrb.w	r3, [r3, #1006]	; 0x3ee
   82060:	2b00      	cmp	r3, #0
   82062:	d01f      	beq.n	820a4 <Cl_alarms_scanforAlarms+0xb5c>
						{
								Cl_alarms_alarms[LEVELSWITCH_OFF_TO_ON].cl_alarmstate = CL_ALARM_ACTIVE;	
   82064:	4b67      	ldr	r3, [pc, #412]	; (82204 <Cl_alarms_scanforAlarms+0xcbc>)
   82066:	2202      	movs	r2, #2
   82068:	f883 23d2 	strb.w	r2, [r3, #978]	; 0x3d2
									Cl_alarms_alarms[LEVELSWITCH_ON_TO_OFF].cl_alarmstate = CL_ALARM_DETECTED;	
   8206c:	4b65      	ldr	r3, [pc, #404]	; (82204 <Cl_alarms_scanforAlarms+0xcbc>)
   8206e:	2201      	movs	r2, #1
   82070:	f883 23e2 	strb.w	r2, [r3, #994]	; 0x3e2
							//	Cl_MacEventQueue1.Cl_MacEventData[Cl_MacEventQueue1.Cl_MacNewEventcount][0]=LEVELSWITCH_ON_TO_OFF; 
							//	Cl_alarms_alarms[LEVELSWITCH_ON_TO_OFF].cl_detected_count++;
								cl_alarm_triggered = true;
   82074:	4b67      	ldr	r3, [pc, #412]	; (82214 <Cl_alarms_scanforAlarms+0xccc>)
   82076:	2201      	movs	r2, #1
   82078:	701a      	strb	r2, [r3, #0]
								cl_lastalarmid = LEVELSWITCH_ON_TO_OFF;
   8207a:	4b67      	ldr	r3, [pc, #412]	; (82218 <Cl_alarms_scanforAlarms+0xcd0>)
   8207c:	223e      	movs	r2, #62	; 0x3e
   8207e:	701a      	strb	r2, [r3, #0]
								Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   82080:	4b63      	ldr	r3, [pc, #396]	; (82210 <Cl_alarms_scanforAlarms+0xcc8>)
   82082:	781b      	ldrb	r3, [r3, #0]
   82084:	461a      	mov	r2, r3
   82086:	4b62      	ldr	r3, [pc, #392]	; (82210 <Cl_alarms_scanforAlarms+0xcc8>)
   82088:	4413      	add	r3, r2
   8208a:	222e      	movs	r2, #46	; 0x2e
   8208c:	709a      	strb	r2, [r3, #2]
								//Cl_UpdateMacAlarmEventTable();
								Levelswitch_msg.levelswitch_event = LEVEL_SWITCH_EVENT_OFF_TO_ON;
   8208e:	4b63      	ldr	r3, [pc, #396]	; (8221c <Cl_alarms_scanforAlarms+0xcd4>)
   82090:	2202      	movs	r2, #2
   82092:	701a      	strb	r2, [r3, #0]
   82094:	e006      	b.n	820a4 <Cl_alarms_scanforAlarms+0xb5c>
						}
					}
					else
					{
					//	Cl_alarms_alarms[LEVELSWITCH_ON_TO_OFF].cl_alarmstate = CL_ALARM_INACTIVE;
						Cl_alarms_alarms[LEVELSWITCH_ON_TO_OFF].cl_detected_count = 0;
   82096:	4b5b      	ldr	r3, [pc, #364]	; (82204 <Cl_alarms_scanforAlarms+0xcbc>)
   82098:	2200      	movs	r2, #0
   8209a:	f883 23ed 	strb.w	r2, [r3, #1005]	; 0x3ed
						cl_alarm_triggered = false;
   8209e:	4b5d      	ldr	r3, [pc, #372]	; (82214 <Cl_alarms_scanforAlarms+0xccc>)
   820a0:	2200      	movs	r2, #0
   820a2:	701a      	strb	r2, [r3, #0]
					
					}
				
					levelswitchprevstatus = 1;
   820a4:	4b5e      	ldr	r3, [pc, #376]	; (82220 <Cl_alarms_scanforAlarms+0xcd8>)
   820a6:	2201      	movs	r2, #1
   820a8:	701a      	strb	r2, [r3, #0]
		
		}
	}

	
	if(Cl_alarms_alarms[PS1_HIGH_THRESHOLD].cl_is_enabled)
   820aa:	4b56      	ldr	r3, [pc, #344]	; (82204 <Cl_alarms_scanforAlarms+0xcbc>)
   820ac:	f893 315e 	ldrb.w	r3, [r3, #350]	; 0x15e
   820b0:	2b00      	cmp	r3, #0
   820b2:	d045      	beq.n	82140 <Cl_alarms_scanforAlarms+0xbf8>
	{
		
		if (Cl_alarms_alarms[PS1_HIGH_THRESHOLD].cl_alarmstate != CL_ALARM_DETECTED)
   820b4:	4b53      	ldr	r3, [pc, #332]	; (82204 <Cl_alarms_scanforAlarms+0xcbc>)
   820b6:	f893 3152 	ldrb.w	r3, [r3, #338]	; 0x152
   820ba:	2b01      	cmp	r3, #1
   820bc:	d037      	beq.n	8212e <Cl_alarms_scanforAlarms+0xbe6>
		{
				if(ps1 > Cl_alarms_alarms[PS1_HIGH_THRESHOLD].cl_upper)
   820be:	4b51      	ldr	r3, [pc, #324]	; (82204 <Cl_alarms_scanforAlarms+0xcbc>)
   820c0:	f8d3 1154 	ldr.w	r1, [r3, #340]	; 0x154
   820c4:	4b57      	ldr	r3, [pc, #348]	; (82224 <Cl_alarms_scanforAlarms+0xcdc>)
   820c6:	681a      	ldr	r2, [r3, #0]
   820c8:	4b57      	ldr	r3, [pc, #348]	; (82228 <Cl_alarms_scanforAlarms+0xce0>)
   820ca:	4608      	mov	r0, r1
   820cc:	4611      	mov	r1, r2
   820ce:	4798      	blx	r3
   820d0:	4603      	mov	r3, r0
   820d2:	2b00      	cmp	r3, #0
   820d4:	d100      	bne.n	820d8 <Cl_alarms_scanforAlarms+0xb90>
   820d6:	e033      	b.n	82140 <Cl_alarms_scanforAlarms+0xbf8>
					//Cl_Uint16Type temp_ps;
					//temp_ps=ps1;

					//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS1=",4);
					//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
					Cl_alarms_alarms[PS1_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;	
   820d8:	4b4a      	ldr	r3, [pc, #296]	; (82204 <Cl_alarms_scanforAlarms+0xcbc>)
   820da:	2201      	movs	r2, #1
   820dc:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
					Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=PS1_HIGH_THRESHOLD;
   820e0:	4b4b      	ldr	r3, [pc, #300]	; (82210 <Cl_alarms_scanforAlarms+0xcc8>)
   820e2:	781b      	ldrb	r3, [r3, #0]
   820e4:	4a4a      	ldr	r2, [pc, #296]	; (82210 <Cl_alarms_scanforAlarms+0xcc8>)
   820e6:	3301      	adds	r3, #1
   820e8:	00db      	lsls	r3, r3, #3
   820ea:	4413      	add	r3, r2
   820ec:	2215      	movs	r2, #21
   820ee:	809a      	strh	r2, [r3, #4]
					Cl_alarms_alarms[PS1_HIGH_THRESHOLD].cl_detected_count++;
   820f0:	4b44      	ldr	r3, [pc, #272]	; (82204 <Cl_alarms_scanforAlarms+0xcbc>)
   820f2:	f893 315d 	ldrb.w	r3, [r3, #349]	; 0x15d
   820f6:	3301      	adds	r3, #1
   820f8:	b2da      	uxtb	r2, r3
   820fa:	4b42      	ldr	r3, [pc, #264]	; (82204 <Cl_alarms_scanforAlarms+0xcbc>)
   820fc:	f883 215d 	strb.w	r2, [r3, #349]	; 0x15d
					cl_alarm_triggered = true;
   82100:	4b44      	ldr	r3, [pc, #272]	; (82214 <Cl_alarms_scanforAlarms+0xccc>)
   82102:	2201      	movs	r2, #1
   82104:	701a      	strb	r2, [r3, #0]
					cl_lastalarmid = PS1_HIGH_THRESHOLD;
   82106:	4b44      	ldr	r3, [pc, #272]	; (82218 <Cl_alarms_scanforAlarms+0xcd0>)
   82108:	2215      	movs	r2, #21
   8210a:	701a      	strb	r2, [r3, #0]
					Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   8210c:	4b40      	ldr	r3, [pc, #256]	; (82210 <Cl_alarms_scanforAlarms+0xcc8>)
   8210e:	781b      	ldrb	r3, [r3, #0]
   82110:	461a      	mov	r2, r3
   82112:	4b3f      	ldr	r3, [pc, #252]	; (82210 <Cl_alarms_scanforAlarms+0xcc8>)
   82114:	4413      	add	r3, r2
   82116:	222e      	movs	r2, #46	; 0x2e
   82118:	709a      	strb	r2, [r3, #2]
					Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   8211a:	4b44      	ldr	r3, [pc, #272]	; (8222c <Cl_alarms_scanforAlarms+0xce4>)
   8211c:	4798      	blx	r3
   8211e:	4603      	mov	r3, r0
   82120:	71fb      	strb	r3, [r7, #7]
					ASSERT_ERROR(Cl_alarms_retcode);
   82122:	79fb      	ldrb	r3, [r7, #7]
   82124:	2b00      	cmp	r3, #0
   82126:	d00b      	beq.n	82140 <Cl_alarms_scanforAlarms+0xbf8>
   82128:	4b41      	ldr	r3, [pc, #260]	; (82230 <Cl_alarms_scanforAlarms+0xce8>)
   8212a:	4798      	blx	r3
   8212c:	e008      	b.n	82140 <Cl_alarms_scanforAlarms+0xbf8>
				}
				
		}
		else if (Cl_alarms_alarms[PS1_HIGH_THRESHOLD].cl_alarmstate == CL_ALARM_DETECTED) 
   8212e:	4b35      	ldr	r3, [pc, #212]	; (82204 <Cl_alarms_scanforAlarms+0xcbc>)
   82130:	f893 3152 	ldrb.w	r3, [r3, #338]	; 0x152
   82134:	2b01      	cmp	r3, #1
   82136:	d103      	bne.n	82140 <Cl_alarms_scanforAlarms+0xbf8>
		{
			Cl_alarms_alarms[PS1_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_INACTIVE;
   82138:	4b32      	ldr	r3, [pc, #200]	; (82204 <Cl_alarms_scanforAlarms+0xcbc>)
   8213a:	2204      	movs	r2, #4
   8213c:	f883 2152 	strb.w	r2, [r3, #338]	; 0x152
		}
	}

if(Cl_alarms_alarms[PS1_LOW_THRESHOLD].cl_is_enabled)
   82140:	4b30      	ldr	r3, [pc, #192]	; (82204 <Cl_alarms_scanforAlarms+0xcbc>)
   82142:	f893 316e 	ldrb.w	r3, [r3, #366]	; 0x16e
   82146:	2b00      	cmp	r3, #0
   82148:	d045      	beq.n	821d6 <Cl_alarms_scanforAlarms+0xc8e>
{
	 
	if (Cl_alarms_alarms[PS1_LOW_THRESHOLD].cl_alarmstate != CL_ALARM_DETECTED)
   8214a:	4b2e      	ldr	r3, [pc, #184]	; (82204 <Cl_alarms_scanforAlarms+0xcbc>)
   8214c:	f893 3162 	ldrb.w	r3, [r3, #354]	; 0x162
   82150:	2b01      	cmp	r3, #1
   82152:	d037      	beq.n	821c4 <Cl_alarms_scanforAlarms+0xc7c>
	{
		if(ps1 < Cl_alarms_alarms[PS1_LOW_THRESHOLD].cl_lower)
   82154:	4b2b      	ldr	r3, [pc, #172]	; (82204 <Cl_alarms_scanforAlarms+0xcbc>)
   82156:	f8d3 1168 	ldr.w	r1, [r3, #360]	; 0x168
   8215a:	4b32      	ldr	r3, [pc, #200]	; (82224 <Cl_alarms_scanforAlarms+0xcdc>)
   8215c:	681a      	ldr	r2, [r3, #0]
   8215e:	4b35      	ldr	r3, [pc, #212]	; (82234 <Cl_alarms_scanforAlarms+0xcec>)
   82160:	4608      	mov	r0, r1
   82162:	4611      	mov	r1, r2
   82164:	4798      	blx	r3
   82166:	4603      	mov	r3, r0
   82168:	2b00      	cmp	r3, #0
   8216a:	d100      	bne.n	8216e <Cl_alarms_scanforAlarms+0xc26>
   8216c:	e033      	b.n	821d6 <Cl_alarms_scanforAlarms+0xc8e>
			//Cl_Uint16Type temp_ps;
			//temp_ps=ps1;

			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS1=",4);
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
			Cl_alarms_alarms[PS1_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;
   8216e:	4b25      	ldr	r3, [pc, #148]	; (82204 <Cl_alarms_scanforAlarms+0xcbc>)
   82170:	2201      	movs	r2, #1
   82172:	f883 2162 	strb.w	r2, [r3, #354]	; 0x162
			Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=PS1_LOW_THRESHOLD;
   82176:	4b26      	ldr	r3, [pc, #152]	; (82210 <Cl_alarms_scanforAlarms+0xcc8>)
   82178:	781b      	ldrb	r3, [r3, #0]
   8217a:	4a25      	ldr	r2, [pc, #148]	; (82210 <Cl_alarms_scanforAlarms+0xcc8>)
   8217c:	3301      	adds	r3, #1
   8217e:	00db      	lsls	r3, r3, #3
   82180:	4413      	add	r3, r2
   82182:	2216      	movs	r2, #22
   82184:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[PS1_LOW_THRESHOLD].cl_detected_count++;
   82186:	4b1f      	ldr	r3, [pc, #124]	; (82204 <Cl_alarms_scanforAlarms+0xcbc>)
   82188:	f893 316d 	ldrb.w	r3, [r3, #365]	; 0x16d
   8218c:	3301      	adds	r3, #1
   8218e:	b2da      	uxtb	r2, r3
   82190:	4b1c      	ldr	r3, [pc, #112]	; (82204 <Cl_alarms_scanforAlarms+0xcbc>)
   82192:	f883 216d 	strb.w	r2, [r3, #365]	; 0x16d
			cl_alarm_triggered = true;
   82196:	4b1f      	ldr	r3, [pc, #124]	; (82214 <Cl_alarms_scanforAlarms+0xccc>)
   82198:	2201      	movs	r2, #1
   8219a:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = PS1_LOW_THRESHOLD;
   8219c:	4b1e      	ldr	r3, [pc, #120]	; (82218 <Cl_alarms_scanforAlarms+0xcd0>)
   8219e:	2216      	movs	r2, #22
   821a0:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   821a2:	4b1b      	ldr	r3, [pc, #108]	; (82210 <Cl_alarms_scanforAlarms+0xcc8>)
   821a4:	781b      	ldrb	r3, [r3, #0]
   821a6:	461a      	mov	r2, r3
   821a8:	4b19      	ldr	r3, [pc, #100]	; (82210 <Cl_alarms_scanforAlarms+0xcc8>)
   821aa:	4413      	add	r3, r2
   821ac:	222e      	movs	r2, #46	; 0x2e
   821ae:	709a      	strb	r2, [r3, #2]
			Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   821b0:	4b1e      	ldr	r3, [pc, #120]	; (8222c <Cl_alarms_scanforAlarms+0xce4>)
   821b2:	4798      	blx	r3
   821b4:	4603      	mov	r3, r0
   821b6:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   821b8:	79fb      	ldrb	r3, [r7, #7]
   821ba:	2b00      	cmp	r3, #0
   821bc:	d00b      	beq.n	821d6 <Cl_alarms_scanforAlarms+0xc8e>
   821be:	4b1c      	ldr	r3, [pc, #112]	; (82230 <Cl_alarms_scanforAlarms+0xce8>)
   821c0:	4798      	blx	r3
   821c2:	e008      	b.n	821d6 <Cl_alarms_scanforAlarms+0xc8e>
		}
	}
	else if (Cl_alarms_alarms[PS1_LOW_THRESHOLD].cl_alarmstate == CL_ALARM_DETECTED)
   821c4:	4b0f      	ldr	r3, [pc, #60]	; (82204 <Cl_alarms_scanforAlarms+0xcbc>)
   821c6:	f893 3162 	ldrb.w	r3, [r3, #354]	; 0x162
   821ca:	2b01      	cmp	r3, #1
   821cc:	d103      	bne.n	821d6 <Cl_alarms_scanforAlarms+0xc8e>
	{
		Cl_alarms_alarms[PS1_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_INACTIVE;
   821ce:	4b0d      	ldr	r3, [pc, #52]	; (82204 <Cl_alarms_scanforAlarms+0xcbc>)
   821d0:	2204      	movs	r2, #4
   821d2:	f883 2162 	strb.w	r2, [r3, #354]	; 0x162
	}
}

	if(Cl_alarms_alarms[PS2_HIGH_THRESHOLD].cl_is_enabled)
   821d6:	4b0b      	ldr	r3, [pc, #44]	; (82204 <Cl_alarms_scanforAlarms+0xcbc>)
   821d8:	f893 317e 	ldrb.w	r3, [r3, #382]	; 0x17e
   821dc:	2b00      	cmp	r3, #0
   821de:	d061      	beq.n	822a4 <Cl_alarms_scanforAlarms+0xd5c>
	{
		
				if (Cl_alarms_alarms[PS2_HIGH_THRESHOLD].cl_alarmstate != CL_ALARM_DETECTED)
   821e0:	4b08      	ldr	r3, [pc, #32]	; (82204 <Cl_alarms_scanforAlarms+0xcbc>)
   821e2:	f893 3172 	ldrb.w	r3, [r3, #370]	; 0x172
   821e6:	2b01      	cmp	r3, #1
   821e8:	d053      	beq.n	82292 <Cl_alarms_scanforAlarms+0xd4a>
				{
				if(ps2 > Cl_alarms_alarms[PS2_HIGH_THRESHOLD].cl_upper)
   821ea:	4b06      	ldr	r3, [pc, #24]	; (82204 <Cl_alarms_scanforAlarms+0xcbc>)
   821ec:	f8d3 1174 	ldr.w	r1, [r3, #372]	; 0x174
   821f0:	4b11      	ldr	r3, [pc, #68]	; (82238 <Cl_alarms_scanforAlarms+0xcf0>)
   821f2:	681a      	ldr	r2, [r3, #0]
   821f4:	4b0c      	ldr	r3, [pc, #48]	; (82228 <Cl_alarms_scanforAlarms+0xce0>)
   821f6:	4608      	mov	r0, r1
   821f8:	4611      	mov	r1, r2
   821fa:	4798      	blx	r3
   821fc:	4603      	mov	r3, r0
   821fe:	2b00      	cmp	r3, #0
   82200:	d11c      	bne.n	8223c <Cl_alarms_scanforAlarms+0xcf4>
   82202:	e04f      	b.n	822a4 <Cl_alarms_scanforAlarms+0xd5c>
   82204:	20071d0c 	.word	0x20071d0c
   82208:	20072224 	.word	0x20072224
   8220c:	20071ac4 	.word	0x20071ac4
   82210:	200722c0 	.word	0x200722c0
   82214:	20071739 	.word	0x20071739
   82218:	20072100 	.word	0x20072100
   8221c:	20071aec 	.word	0x20071aec
   82220:	20070108 	.word	0x20070108
   82224:	20071740 	.word	0x20071740
   82228:	000a6c95 	.word	0x000a6c95
   8222c:	00082d91 	.word	0x00082d91
   82230:	00088fc1 	.word	0x00088fc1
   82234:	000a6cd1 	.word	0x000a6cd1
   82238:	20071744 	.word	0x20071744
						//temp_ps=ps2;

							// Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2=",4);
							// Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
												
					Cl_alarms_alarms[PS2_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;	
   8223c:	4b8f      	ldr	r3, [pc, #572]	; (8247c <Cl_alarms_scanforAlarms+0xf34>)
   8223e:	2201      	movs	r2, #1
   82240:	f883 2172 	strb.w	r2, [r3, #370]	; 0x172
					Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=PS2_HIGH_THRESHOLD;
   82244:	4b8e      	ldr	r3, [pc, #568]	; (82480 <Cl_alarms_scanforAlarms+0xf38>)
   82246:	781b      	ldrb	r3, [r3, #0]
   82248:	4a8d      	ldr	r2, [pc, #564]	; (82480 <Cl_alarms_scanforAlarms+0xf38>)
   8224a:	3301      	adds	r3, #1
   8224c:	00db      	lsls	r3, r3, #3
   8224e:	4413      	add	r3, r2
   82250:	2217      	movs	r2, #23
   82252:	809a      	strh	r2, [r3, #4]
					Cl_alarms_alarms[PS2_HIGH_THRESHOLD].cl_detected_count++;
   82254:	4b89      	ldr	r3, [pc, #548]	; (8247c <Cl_alarms_scanforAlarms+0xf34>)
   82256:	f893 317d 	ldrb.w	r3, [r3, #381]	; 0x17d
   8225a:	3301      	adds	r3, #1
   8225c:	b2da      	uxtb	r2, r3
   8225e:	4b87      	ldr	r3, [pc, #540]	; (8247c <Cl_alarms_scanforAlarms+0xf34>)
   82260:	f883 217d 	strb.w	r2, [r3, #381]	; 0x17d
					cl_alarm_triggered = true;
   82264:	4b87      	ldr	r3, [pc, #540]	; (82484 <Cl_alarms_scanforAlarms+0xf3c>)
   82266:	2201      	movs	r2, #1
   82268:	701a      	strb	r2, [r3, #0]
					cl_lastalarmid = PS2_HIGH_THRESHOLD;
   8226a:	4b87      	ldr	r3, [pc, #540]	; (82488 <Cl_alarms_scanforAlarms+0xf40>)
   8226c:	2217      	movs	r2, #23
   8226e:	701a      	strb	r2, [r3, #0]
					Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   82270:	4b83      	ldr	r3, [pc, #524]	; (82480 <Cl_alarms_scanforAlarms+0xf38>)
   82272:	781b      	ldrb	r3, [r3, #0]
   82274:	461a      	mov	r2, r3
   82276:	4b82      	ldr	r3, [pc, #520]	; (82480 <Cl_alarms_scanforAlarms+0xf38>)
   82278:	4413      	add	r3, r2
   8227a:	222e      	movs	r2, #46	; 0x2e
   8227c:	709a      	strb	r2, [r3, #2]
					Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   8227e:	4b83      	ldr	r3, [pc, #524]	; (8248c <Cl_alarms_scanforAlarms+0xf44>)
   82280:	4798      	blx	r3
   82282:	4603      	mov	r3, r0
   82284:	71fb      	strb	r3, [r7, #7]
					ASSERT_ERROR(Cl_alarms_retcode);
   82286:	79fb      	ldrb	r3, [r7, #7]
   82288:	2b00      	cmp	r3, #0
   8228a:	d00b      	beq.n	822a4 <Cl_alarms_scanforAlarms+0xd5c>
   8228c:	4b80      	ldr	r3, [pc, #512]	; (82490 <Cl_alarms_scanforAlarms+0xf48>)
   8228e:	4798      	blx	r3
   82290:	e008      	b.n	822a4 <Cl_alarms_scanforAlarms+0xd5c>
					
				}
				}
				else if (Cl_alarms_alarms[PS2_HIGH_THRESHOLD].cl_alarmstate == CL_ALARM_DETECTED)
   82292:	4b7a      	ldr	r3, [pc, #488]	; (8247c <Cl_alarms_scanforAlarms+0xf34>)
   82294:	f893 3172 	ldrb.w	r3, [r3, #370]	; 0x172
   82298:	2b01      	cmp	r3, #1
   8229a:	d103      	bne.n	822a4 <Cl_alarms_scanforAlarms+0xd5c>
				{
					Cl_alarms_alarms[PS2_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_INACTIVE;
   8229c:	4b77      	ldr	r3, [pc, #476]	; (8247c <Cl_alarms_scanforAlarms+0xf34>)
   8229e:	2204      	movs	r2, #4
   822a0:	f883 2172 	strb.w	r2, [r3, #370]	; 0x172
				}
	}
		if(Cl_alarms_alarms[PS2_LOW_THRESHOLD].cl_is_enabled)
   822a4:	4b75      	ldr	r3, [pc, #468]	; (8247c <Cl_alarms_scanforAlarms+0xf34>)
   822a6:	f893 318e 	ldrb.w	r3, [r3, #398]	; 0x18e
   822aa:	2b00      	cmp	r3, #0
   822ac:	d045      	beq.n	8233a <Cl_alarms_scanforAlarms+0xdf2>
		{
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DETECT",6);
			if (Cl_alarms_alarms[PS2_LOW_THRESHOLD].cl_alarmstate != CL_ALARM_DETECTED)
   822ae:	4b73      	ldr	r3, [pc, #460]	; (8247c <Cl_alarms_scanforAlarms+0xf34>)
   822b0:	f893 3182 	ldrb.w	r3, [r3, #386]	; 0x182
   822b4:	2b01      	cmp	r3, #1
   822b6:	d037      	beq.n	82328 <Cl_alarms_scanforAlarms+0xde0>
			{
				if(ps2 < Cl_alarms_alarms[PS2_LOW_THRESHOLD].cl_lower)
   822b8:	4b70      	ldr	r3, [pc, #448]	; (8247c <Cl_alarms_scanforAlarms+0xf34>)
   822ba:	f8d3 1188 	ldr.w	r1, [r3, #392]	; 0x188
   822be:	4b75      	ldr	r3, [pc, #468]	; (82494 <Cl_alarms_scanforAlarms+0xf4c>)
   822c0:	681a      	ldr	r2, [r3, #0]
   822c2:	4b75      	ldr	r3, [pc, #468]	; (82498 <Cl_alarms_scanforAlarms+0xf50>)
   822c4:	4608      	mov	r0, r1
   822c6:	4611      	mov	r1, r2
   822c8:	4798      	blx	r3
   822ca:	4603      	mov	r3, r0
   822cc:	2b00      	cmp	r3, #0
   822ce:	d100      	bne.n	822d2 <Cl_alarms_scanforAlarms+0xd8a>
   822d0:	e033      	b.n	8233a <Cl_alarms_scanforAlarms+0xdf2>
					//Cl_Uint16Type temp_ps;
					//temp_ps=ps2;

					//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2=",4);
					//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
					Cl_alarms_alarms[PS2_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;
   822d2:	4b6a      	ldr	r3, [pc, #424]	; (8247c <Cl_alarms_scanforAlarms+0xf34>)
   822d4:	2201      	movs	r2, #1
   822d6:	f883 2182 	strb.w	r2, [r3, #386]	; 0x182
					Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=PS2_LOW_THRESHOLD;
   822da:	4b69      	ldr	r3, [pc, #420]	; (82480 <Cl_alarms_scanforAlarms+0xf38>)
   822dc:	781b      	ldrb	r3, [r3, #0]
   822de:	4a68      	ldr	r2, [pc, #416]	; (82480 <Cl_alarms_scanforAlarms+0xf38>)
   822e0:	3301      	adds	r3, #1
   822e2:	00db      	lsls	r3, r3, #3
   822e4:	4413      	add	r3, r2
   822e6:	2218      	movs	r2, #24
   822e8:	809a      	strh	r2, [r3, #4]
					Cl_alarms_alarms[PS2_LOW_THRESHOLD].cl_detected_count++;
   822ea:	4b64      	ldr	r3, [pc, #400]	; (8247c <Cl_alarms_scanforAlarms+0xf34>)
   822ec:	f893 318d 	ldrb.w	r3, [r3, #397]	; 0x18d
   822f0:	3301      	adds	r3, #1
   822f2:	b2da      	uxtb	r2, r3
   822f4:	4b61      	ldr	r3, [pc, #388]	; (8247c <Cl_alarms_scanforAlarms+0xf34>)
   822f6:	f883 218d 	strb.w	r2, [r3, #397]	; 0x18d
					cl_alarm_triggered = true;
   822fa:	4b62      	ldr	r3, [pc, #392]	; (82484 <Cl_alarms_scanforAlarms+0xf3c>)
   822fc:	2201      	movs	r2, #1
   822fe:	701a      	strb	r2, [r3, #0]
					cl_lastalarmid = PS2_LOW_THRESHOLD;
   82300:	4b61      	ldr	r3, [pc, #388]	; (82488 <Cl_alarms_scanforAlarms+0xf40>)
   82302:	2218      	movs	r2, #24
   82304:	701a      	strb	r2, [r3, #0]
					Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   82306:	4b5e      	ldr	r3, [pc, #376]	; (82480 <Cl_alarms_scanforAlarms+0xf38>)
   82308:	781b      	ldrb	r3, [r3, #0]
   8230a:	461a      	mov	r2, r3
   8230c:	4b5c      	ldr	r3, [pc, #368]	; (82480 <Cl_alarms_scanforAlarms+0xf38>)
   8230e:	4413      	add	r3, r2
   82310:	222e      	movs	r2, #46	; 0x2e
   82312:	709a      	strb	r2, [r3, #2]
					Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   82314:	4b5d      	ldr	r3, [pc, #372]	; (8248c <Cl_alarms_scanforAlarms+0xf44>)
   82316:	4798      	blx	r3
   82318:	4603      	mov	r3, r0
   8231a:	71fb      	strb	r3, [r7, #7]
					ASSERT_ERROR(Cl_alarms_retcode);
   8231c:	79fb      	ldrb	r3, [r7, #7]
   8231e:	2b00      	cmp	r3, #0
   82320:	d00b      	beq.n	8233a <Cl_alarms_scanforAlarms+0xdf2>
   82322:	4b5b      	ldr	r3, [pc, #364]	; (82490 <Cl_alarms_scanforAlarms+0xf48>)
   82324:	4798      	blx	r3
   82326:	e008      	b.n	8233a <Cl_alarms_scanforAlarms+0xdf2>
					
				}
			}
			else if (Cl_alarms_alarms[PS2_LOW_THRESHOLD].cl_alarmstate == CL_ALARM_DETECTED)
   82328:	4b54      	ldr	r3, [pc, #336]	; (8247c <Cl_alarms_scanforAlarms+0xf34>)
   8232a:	f893 3182 	ldrb.w	r3, [r3, #386]	; 0x182
   8232e:	2b01      	cmp	r3, #1
   82330:	d103      	bne.n	8233a <Cl_alarms_scanforAlarms+0xdf2>
			{
				Cl_alarms_alarms[PS2_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_INACTIVE;
   82332:	4b52      	ldr	r3, [pc, #328]	; (8247c <Cl_alarms_scanforAlarms+0xf34>)
   82334:	2204      	movs	r2, #4
   82336:	f883 2182 	strb.w	r2, [r3, #386]	; 0x182
			}
		}
		

	if(Cl_alarms_alarms[PS3_HIGH_THRESHOLD].cl_is_enabled)
   8233a:	4b50      	ldr	r3, [pc, #320]	; (8247c <Cl_alarms_scanforAlarms+0xf34>)
   8233c:	f893 327e 	ldrb.w	r3, [r3, #638]	; 0x27e
   82340:	2b00      	cmp	r3, #0
   82342:	d045      	beq.n	823d0 <Cl_alarms_scanforAlarms+0xe88>
		{
			// Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DETECT_HIGH",11);
			//	if((cl_sys_statbuffer.ps3status > 1474) && (Cl_alarms_alarms[PS3STATUS_HIGH].cl_alarmstate != CL_ALARM_DETECTED)) // eqvt to 0.8 bar
				if((ps3 > Cl_alarms_alarms[PS3_HIGH_THRESHOLD].cl_upper ) && (Cl_alarms_alarms[PS3_HIGH_THRESHOLD].cl_alarmstate != CL_ALARM_DETECTED)) // eqvt to 0.8 bar
   82344:	4b4d      	ldr	r3, [pc, #308]	; (8247c <Cl_alarms_scanforAlarms+0xf34>)
   82346:	f8d3 1274 	ldr.w	r1, [r3, #628]	; 0x274
   8234a:	4b54      	ldr	r3, [pc, #336]	; (8249c <Cl_alarms_scanforAlarms+0xf54>)
   8234c:	681a      	ldr	r2, [r3, #0]
   8234e:	4b54      	ldr	r3, [pc, #336]	; (824a0 <Cl_alarms_scanforAlarms+0xf58>)
   82350:	4608      	mov	r0, r1
   82352:	4611      	mov	r1, r2
   82354:	4798      	blx	r3
   82356:	4603      	mov	r3, r0
   82358:	2b00      	cmp	r3, #0
   8235a:	d030      	beq.n	823be <Cl_alarms_scanforAlarms+0xe76>
   8235c:	4b47      	ldr	r3, [pc, #284]	; (8247c <Cl_alarms_scanforAlarms+0xf34>)
   8235e:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
   82362:	2b01      	cmp	r3, #1
   82364:	d02b      	beq.n	823be <Cl_alarms_scanforAlarms+0xe76>
					//Cl_Uint16Type temp_ps;
					//temp_ps=ps3;

					//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS3=",4);
					//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
				Cl_alarms_alarms[PS3_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;
   82366:	4b45      	ldr	r3, [pc, #276]	; (8247c <Cl_alarms_scanforAlarms+0xf34>)
   82368:	2201      	movs	r2, #1
   8236a:	f883 2272 	strb.w	r2, [r3, #626]	; 0x272
				Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=PS3_HIGH_THRESHOLD;
   8236e:	4b44      	ldr	r3, [pc, #272]	; (82480 <Cl_alarms_scanforAlarms+0xf38>)
   82370:	781b      	ldrb	r3, [r3, #0]
   82372:	4a43      	ldr	r2, [pc, #268]	; (82480 <Cl_alarms_scanforAlarms+0xf38>)
   82374:	3301      	adds	r3, #1
   82376:	00db      	lsls	r3, r3, #3
   82378:	4413      	add	r3, r2
   8237a:	2227      	movs	r2, #39	; 0x27
   8237c:	809a      	strh	r2, [r3, #4]
				Cl_alarms_alarms[PS3_HIGH_THRESHOLD].cl_detected_count++;
   8237e:	4b3f      	ldr	r3, [pc, #252]	; (8247c <Cl_alarms_scanforAlarms+0xf34>)
   82380:	f893 327d 	ldrb.w	r3, [r3, #637]	; 0x27d
   82384:	3301      	adds	r3, #1
   82386:	b2da      	uxtb	r2, r3
   82388:	4b3c      	ldr	r3, [pc, #240]	; (8247c <Cl_alarms_scanforAlarms+0xf34>)
   8238a:	f883 227d 	strb.w	r2, [r3, #637]	; 0x27d
				cl_alarm_triggered = true;
   8238e:	4b3d      	ldr	r3, [pc, #244]	; (82484 <Cl_alarms_scanforAlarms+0xf3c>)
   82390:	2201      	movs	r2, #1
   82392:	701a      	strb	r2, [r3, #0]
				cl_lastalarmid = PS3_HIGH_THRESHOLD;
   82394:	4b3c      	ldr	r3, [pc, #240]	; (82488 <Cl_alarms_scanforAlarms+0xf40>)
   82396:	2227      	movs	r2, #39	; 0x27
   82398:	701a      	strb	r2, [r3, #0]
				//Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALERT_TRIGGERED ;
				Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   8239a:	4b39      	ldr	r3, [pc, #228]	; (82480 <Cl_alarms_scanforAlarms+0xf38>)
   8239c:	781b      	ldrb	r3, [r3, #0]
   8239e:	461a      	mov	r2, r3
   823a0:	4b37      	ldr	r3, [pc, #220]	; (82480 <Cl_alarms_scanforAlarms+0xf38>)
   823a2:	4413      	add	r3, r2
   823a4:	222e      	movs	r2, #46	; 0x2e
   823a6:	709a      	strb	r2, [r3, #2]
						Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   823a8:	4b38      	ldr	r3, [pc, #224]	; (8248c <Cl_alarms_scanforAlarms+0xf44>)
   823aa:	4798      	blx	r3
   823ac:	4603      	mov	r3, r0
   823ae:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_alarms_retcode);
   823b0:	79fb      	ldrb	r3, [r7, #7]
   823b2:	2b00      	cmp	r3, #0
   823b4:	d002      	beq.n	823bc <Cl_alarms_scanforAlarms+0xe74>
   823b6:	4b36      	ldr	r3, [pc, #216]	; (82490 <Cl_alarms_scanforAlarms+0xf48>)
   823b8:	4798      	blx	r3
   823ba:	e009      	b.n	823d0 <Cl_alarms_scanforAlarms+0xe88>
   823bc:	e008      	b.n	823d0 <Cl_alarms_scanforAlarms+0xe88>
				}
				
				else if (Cl_alarms_alarms[PS3_HIGH_THRESHOLD].cl_alarmstate == CL_ALARM_DETECTED)
   823be:	4b2f      	ldr	r3, [pc, #188]	; (8247c <Cl_alarms_scanforAlarms+0xf34>)
   823c0:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
   823c4:	2b01      	cmp	r3, #1
   823c6:	d103      	bne.n	823d0 <Cl_alarms_scanforAlarms+0xe88>
				{
					Cl_alarms_alarms[PS3_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_INACTIVE;
   823c8:	4b2c      	ldr	r3, [pc, #176]	; (8247c <Cl_alarms_scanforAlarms+0xf34>)
   823ca:	2204      	movs	r2, #4
   823cc:	f883 2272 	strb.w	r2, [r3, #626]	; 0x272
				}
		}
	
	if(Cl_alarms_alarms[PS3_LOW_THRESHOLD].cl_is_enabled)
   823d0:	4b2a      	ldr	r3, [pc, #168]	; (8247c <Cl_alarms_scanforAlarms+0xf34>)
   823d2:	f893 328e 	ldrb.w	r3, [r3, #654]	; 0x28e
   823d6:	2b00      	cmp	r3, #0
   823d8:	d073      	beq.n	824c2 <Cl_alarms_scanforAlarms+0xf7a>
		//	if((cl_sys_statbuffer.ps3status > 1474) && (Cl_alarms_alarms[PS3STATUS_HIGH].cl_alarmstate != CL_ALARM_DETECTED)) // eqvt to 0.8 bar
		
		float temp,temp_ps;
		//temp = 
		
		if((ps3 < Cl_alarmThresholdTable.ps3_low_threshold ) && (Cl_alarms_alarms[PS3_LOW_THRESHOLD].cl_alarmstate != CL_ALARM_DETECTED)) // eqvt to 0.8 bar
   823da:	4b32      	ldr	r3, [pc, #200]	; (824a4 <Cl_alarms_scanforAlarms+0xf5c>)
   823dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
   823de:	4b2f      	ldr	r3, [pc, #188]	; (8249c <Cl_alarms_scanforAlarms+0xf54>)
   823e0:	681a      	ldr	r2, [r3, #0]
   823e2:	4b2d      	ldr	r3, [pc, #180]	; (82498 <Cl_alarms_scanforAlarms+0xf50>)
   823e4:	4608      	mov	r0, r1
   823e6:	4611      	mov	r1, r2
   823e8:	4798      	blx	r3
   823ea:	4603      	mov	r3, r0
   823ec:	2b00      	cmp	r3, #0
   823ee:	d05f      	beq.n	824b0 <Cl_alarms_scanforAlarms+0xf68>
   823f0:	4b22      	ldr	r3, [pc, #136]	; (8247c <Cl_alarms_scanforAlarms+0xf34>)
   823f2:	f893 3282 	ldrb.w	r3, [r3, #642]	; 0x282
   823f6:	2b01      	cmp	r3, #1
   823f8:	d05a      	beq.n	824b0 <Cl_alarms_scanforAlarms+0xf68>
		{
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS3=",4);
			
			if(ps3 < 0)
   823fa:	4b28      	ldr	r3, [pc, #160]	; (8249c <Cl_alarms_scanforAlarms+0xf54>)
   823fc:	681a      	ldr	r2, [r3, #0]
   823fe:	4b28      	ldr	r3, [pc, #160]	; (824a0 <Cl_alarms_scanforAlarms+0xf58>)
   82400:	4610      	mov	r0, r2
   82402:	f04f 0100 	mov.w	r1, #0
   82406:	4798      	blx	r3
   82408:	4603      	mov	r3, r0
   8240a:	2b00      	cmp	r3, #0
   8240c:	d009      	beq.n	82422 <Cl_alarms_scanforAlarms+0xeda>
			{
				ps3 = ps3+1000;
   8240e:	4b23      	ldr	r3, [pc, #140]	; (8249c <Cl_alarms_scanforAlarms+0xf54>)
   82410:	681a      	ldr	r2, [r3, #0]
   82412:	4b25      	ldr	r3, [pc, #148]	; (824a8 <Cl_alarms_scanforAlarms+0xf60>)
   82414:	4610      	mov	r0, r2
   82416:	4925      	ldr	r1, [pc, #148]	; (824ac <Cl_alarms_scanforAlarms+0xf64>)
   82418:	4798      	blx	r3
   8241a:	4603      	mov	r3, r0
   8241c:	461a      	mov	r2, r3
   8241e:	4b1f      	ldr	r3, [pc, #124]	; (8249c <Cl_alarms_scanforAlarms+0xf54>)
   82420:	601a      	str	r2, [r3, #0]
				//temp1= Cl_alarmThresholdTable.ps3_low_threshold;
				//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
				//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp1,2);
			}
			
			Cl_alarms_alarms[PS3_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;
   82422:	4b16      	ldr	r3, [pc, #88]	; (8247c <Cl_alarms_scanforAlarms+0xf34>)
   82424:	2201      	movs	r2, #1
   82426:	f883 2282 	strb.w	r2, [r3, #642]	; 0x282
			Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=PS3_LOW_THRESHOLD;
   8242a:	4b15      	ldr	r3, [pc, #84]	; (82480 <Cl_alarms_scanforAlarms+0xf38>)
   8242c:	781b      	ldrb	r3, [r3, #0]
   8242e:	4a14      	ldr	r2, [pc, #80]	; (82480 <Cl_alarms_scanforAlarms+0xf38>)
   82430:	3301      	adds	r3, #1
   82432:	00db      	lsls	r3, r3, #3
   82434:	4413      	add	r3, r2
   82436:	2228      	movs	r2, #40	; 0x28
   82438:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[PS3_LOW_THRESHOLD].cl_detected_count++;
   8243a:	4b10      	ldr	r3, [pc, #64]	; (8247c <Cl_alarms_scanforAlarms+0xf34>)
   8243c:	f893 328d 	ldrb.w	r3, [r3, #653]	; 0x28d
   82440:	3301      	adds	r3, #1
   82442:	b2da      	uxtb	r2, r3
   82444:	4b0d      	ldr	r3, [pc, #52]	; (8247c <Cl_alarms_scanforAlarms+0xf34>)
   82446:	f883 228d 	strb.w	r2, [r3, #653]	; 0x28d
			cl_alarm_triggered = true;
   8244a:	4b0e      	ldr	r3, [pc, #56]	; (82484 <Cl_alarms_scanforAlarms+0xf3c>)
   8244c:	2201      	movs	r2, #1
   8244e:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = PS3_LOW_THRESHOLD;
   82450:	4b0d      	ldr	r3, [pc, #52]	; (82488 <Cl_alarms_scanforAlarms+0xf40>)
   82452:	2228      	movs	r2, #40	; 0x28
   82454:	701a      	strb	r2, [r3, #0]
			//Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = EVT_ALERT_TRIGGERED ;
			Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   82456:	4b0a      	ldr	r3, [pc, #40]	; (82480 <Cl_alarms_scanforAlarms+0xf38>)
   82458:	781b      	ldrb	r3, [r3, #0]
   8245a:	461a      	mov	r2, r3
   8245c:	4b08      	ldr	r3, [pc, #32]	; (82480 <Cl_alarms_scanforAlarms+0xf38>)
   8245e:	4413      	add	r3, r2
   82460:	222e      	movs	r2, #46	; 0x2e
   82462:	709a      	strb	r2, [r3, #2]
			Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   82464:	4b09      	ldr	r3, [pc, #36]	; (8248c <Cl_alarms_scanforAlarms+0xf44>)
   82466:	4798      	blx	r3
   82468:	4603      	mov	r3, r0
   8246a:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   8246c:	79fb      	ldrb	r3, [r7, #7]
   8246e:	2b00      	cmp	r3, #0
   82470:	d002      	beq.n	82478 <Cl_alarms_scanforAlarms+0xf30>
   82472:	4b07      	ldr	r3, [pc, #28]	; (82490 <Cl_alarms_scanforAlarms+0xf48>)
   82474:	4798      	blx	r3
   82476:	e024      	b.n	824c2 <Cl_alarms_scanforAlarms+0xf7a>
   82478:	e023      	b.n	824c2 <Cl_alarms_scanforAlarms+0xf7a>
   8247a:	bf00      	nop
   8247c:	20071d0c 	.word	0x20071d0c
   82480:	200722c0 	.word	0x200722c0
   82484:	20071739 	.word	0x20071739
   82488:	20072100 	.word	0x20072100
   8248c:	00082d91 	.word	0x00082d91
   82490:	00088fc1 	.word	0x00088fc1
   82494:	20071744 	.word	0x20071744
   82498:	000a6cd1 	.word	0x000a6cd1
   8249c:	20071748 	.word	0x20071748
   824a0:	000a6c95 	.word	0x000a6c95
   824a4:	20072104 	.word	0x20072104
   824a8:	000a6749 	.word	0x000a6749
   824ac:	447a0000 	.word	0x447a0000
		}
		
		else if (Cl_alarms_alarms[PS3_LOW_THRESHOLD].cl_alarmstate == CL_ALARM_DETECTED)
   824b0:	4b9a      	ldr	r3, [pc, #616]	; (8271c <Cl_alarms_scanforAlarms+0x11d4>)
   824b2:	f893 3282 	ldrb.w	r3, [r3, #642]	; 0x282
   824b6:	2b01      	cmp	r3, #1
   824b8:	d103      	bne.n	824c2 <Cl_alarms_scanforAlarms+0xf7a>
		{
			Cl_alarms_alarms[PS3_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_INACTIVE;
   824ba:	4b98      	ldr	r3, [pc, #608]	; (8271c <Cl_alarms_scanforAlarms+0x11d4>)
   824bc:	2204      	movs	r2, #4
   824be:	f883 2282 	strb.w	r2, [r3, #642]	; 0x282
		}
	}
	
	
	if(Cl_alarms_alarms[TEMP1_HIGH_THRESHOLD].cl_is_enabled)
   824c2:	4b96      	ldr	r3, [pc, #600]	; (8271c <Cl_alarms_scanforAlarms+0x11d4>)
   824c4:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
   824c8:	2b00      	cmp	r3, #0
   824ca:	d046      	beq.n	8255a <Cl_alarms_scanforAlarms+0x1012>
	{

		//	if(temp1 > Cl_alarmThresholdTable.temp1_high_threshold)

			if(temp1 >  Cl_alarms_alarms[TEMP1_HIGH_THRESHOLD].cl_upper)
   824cc:	4b93      	ldr	r3, [pc, #588]	; (8271c <Cl_alarms_scanforAlarms+0x11d4>)
   824ce:	f8d3 10f4 	ldr.w	r1, [r3, #244]	; 0xf4
   824d2:	4b93      	ldr	r3, [pc, #588]	; (82720 <Cl_alarms_scanforAlarms+0x11d8>)
   824d4:	681a      	ldr	r2, [r3, #0]
   824d6:	4b93      	ldr	r3, [pc, #588]	; (82724 <Cl_alarms_scanforAlarms+0x11dc>)
   824d8:	4608      	mov	r0, r1
   824da:	4611      	mov	r1, r2
   824dc:	4798      	blx	r3
   824de:	4603      	mov	r3, r0
   824e0:	2b00      	cmp	r3, #0
   824e2:	d02a      	beq.n	8253a <Cl_alarms_scanforAlarms+0xff2>
				//Cl_Uint16Type temp_ps;
				//temp_ps=temp1;

				//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"T1=",3);
				//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
				Cl_alarms_alarms[TEMP1_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;
   824e4:	4b8d      	ldr	r3, [pc, #564]	; (8271c <Cl_alarms_scanforAlarms+0x11d4>)
   824e6:	2201      	movs	r2, #1
   824e8:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
				Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=TEMP1_HIGH_THRESHOLD;
   824ec:	4b8e      	ldr	r3, [pc, #568]	; (82728 <Cl_alarms_scanforAlarms+0x11e0>)
   824ee:	781b      	ldrb	r3, [r3, #0]
   824f0:	4a8d      	ldr	r2, [pc, #564]	; (82728 <Cl_alarms_scanforAlarms+0x11e0>)
   824f2:	3301      	adds	r3, #1
   824f4:	00db      	lsls	r3, r3, #3
   824f6:	4413      	add	r3, r2
   824f8:	220f      	movs	r2, #15
   824fa:	809a      	strh	r2, [r3, #4]
				Cl_alarms_alarms[TEMP1_HIGH_THRESHOLD].cl_detected_count++;
   824fc:	4b87      	ldr	r3, [pc, #540]	; (8271c <Cl_alarms_scanforAlarms+0x11d4>)
   824fe:	f893 30fd 	ldrb.w	r3, [r3, #253]	; 0xfd
   82502:	3301      	adds	r3, #1
   82504:	b2da      	uxtb	r2, r3
   82506:	4b85      	ldr	r3, [pc, #532]	; (8271c <Cl_alarms_scanforAlarms+0x11d4>)
   82508:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
				cl_alarm_triggered = true;
   8250c:	4b87      	ldr	r3, [pc, #540]	; (8272c <Cl_alarms_scanforAlarms+0x11e4>)
   8250e:	2201      	movs	r2, #1
   82510:	701a      	strb	r2, [r3, #0]
				cl_lastalarmid = TEMP1_HIGH_THRESHOLD;
   82512:	4b87      	ldr	r3, [pc, #540]	; (82730 <Cl_alarms_scanforAlarms+0x11e8>)
   82514:	220f      	movs	r2, #15
   82516:	701a      	strb	r2, [r3, #0]
				Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   82518:	4b83      	ldr	r3, [pc, #524]	; (82728 <Cl_alarms_scanforAlarms+0x11e0>)
   8251a:	781b      	ldrb	r3, [r3, #0]
   8251c:	461a      	mov	r2, r3
   8251e:	4b82      	ldr	r3, [pc, #520]	; (82728 <Cl_alarms_scanforAlarms+0x11e0>)
   82520:	4413      	add	r3, r2
   82522:	222e      	movs	r2, #46	; 0x2e
   82524:	709a      	strb	r2, [r3, #2]
				Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   82526:	4b83      	ldr	r3, [pc, #524]	; (82734 <Cl_alarms_scanforAlarms+0x11ec>)
   82528:	4798      	blx	r3
   8252a:	4603      	mov	r3, r0
   8252c:	71fb      	strb	r3, [r7, #7]
				ASSERT_ERROR(Cl_alarms_retcode);	
   8252e:	79fb      	ldrb	r3, [r7, #7]
   82530:	2b00      	cmp	r3, #0
   82532:	d012      	beq.n	8255a <Cl_alarms_scanforAlarms+0x1012>
   82534:	4b80      	ldr	r3, [pc, #512]	; (82738 <Cl_alarms_scanforAlarms+0x11f0>)
   82536:	4798      	blx	r3
   82538:	e00f      	b.n	8255a <Cl_alarms_scanforAlarms+0x1012>
			}
			else
			{
				if(Cl_alarms_alarms[TEMP1_HIGH_THRESHOLD].cl_alarmstate == CL_ALARM_DETECTED)
   8253a:	4b78      	ldr	r3, [pc, #480]	; (8271c <Cl_alarms_scanforAlarms+0x11d4>)
   8253c:	f893 30f2 	ldrb.w	r3, [r3, #242]	; 0xf2
   82540:	2b01      	cmp	r3, #1
   82542:	d10a      	bne.n	8255a <Cl_alarms_scanforAlarms+0x1012>
				{
					Cl_alarms_alarms[TEMP1_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_INACTIVE;
   82544:	4b75      	ldr	r3, [pc, #468]	; (8271c <Cl_alarms_scanforAlarms+0x11d4>)
   82546:	2204      	movs	r2, #4
   82548:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Cl_alarms_alarms[TEMP1_HIGH_THRESHOLD].cl_detected_count = 0;
   8254c:	4b73      	ldr	r3, [pc, #460]	; (8271c <Cl_alarms_scanforAlarms+0x11d4>)
   8254e:	2200      	movs	r2, #0
   82550:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
					cl_alarm_triggered = false;
   82554:	4b75      	ldr	r3, [pc, #468]	; (8272c <Cl_alarms_scanforAlarms+0x11e4>)
   82556:	2200      	movs	r2, #0
   82558:	701a      	strb	r2, [r3, #0]
			}
			
	}
	
	
	if(Cl_alarms_alarms[TEMP1_LOW_THRESHOLD].cl_is_enabled)
   8255a:	4b70      	ldr	r3, [pc, #448]	; (8271c <Cl_alarms_scanforAlarms+0x11d4>)
   8255c:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
   82560:	2b00      	cmp	r3, #0
   82562:	d04b      	beq.n	825fc <Cl_alarms_scanforAlarms+0x10b4>
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DETECT_LOW",11);
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp2,2);
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp1,2);
			//if(cl_sys_statbuffer.Temp1status > 4096)
		//	if(temp1 < Cl_alarmThresholdTable.temp1_low_threshold)
			if(temp1 < Cl_alarms_alarms[TEMP1_LOW_THRESHOLD].cl_lower)
   82564:	4b6d      	ldr	r3, [pc, #436]	; (8271c <Cl_alarms_scanforAlarms+0x11d4>)
   82566:	f8d3 1108 	ldr.w	r1, [r3, #264]	; 0x108
   8256a:	4b6d      	ldr	r3, [pc, #436]	; (82720 <Cl_alarms_scanforAlarms+0x11d8>)
   8256c:	681a      	ldr	r2, [r3, #0]
   8256e:	4b73      	ldr	r3, [pc, #460]	; (8273c <Cl_alarms_scanforAlarms+0x11f4>)
   82570:	4608      	mov	r0, r1
   82572:	4611      	mov	r1, r2
   82574:	4798      	blx	r3
   82576:	4603      	mov	r3, r0
   82578:	2b00      	cmp	r3, #0
   8257a:	d02f      	beq.n	825dc <Cl_alarms_scanforAlarms+0x1094>
				//Cl_Uint16Type temp_ps;
				//temp_ps=temp1;

				//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"T1=",3);
				//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
				if(Cl_alarms_alarms[TEMP1_LOW_THRESHOLD].cl_alarmstate != CL_ALARM_DETECTED)
   8257c:	4b67      	ldr	r3, [pc, #412]	; (8271c <Cl_alarms_scanforAlarms+0x11d4>)
   8257e:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
   82582:	2b01      	cmp	r3, #1
   82584:	d03a      	beq.n	825fc <Cl_alarms_scanforAlarms+0x10b4>
				{
				Cl_alarms_alarms[TEMP1_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;
   82586:	4b65      	ldr	r3, [pc, #404]	; (8271c <Cl_alarms_scanforAlarms+0x11d4>)
   82588:	2201      	movs	r2, #1
   8258a:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
				Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=TEMP1_LOW_THRESHOLD;
   8258e:	4b66      	ldr	r3, [pc, #408]	; (82728 <Cl_alarms_scanforAlarms+0x11e0>)
   82590:	781b      	ldrb	r3, [r3, #0]
   82592:	4a65      	ldr	r2, [pc, #404]	; (82728 <Cl_alarms_scanforAlarms+0x11e0>)
   82594:	3301      	adds	r3, #1
   82596:	00db      	lsls	r3, r3, #3
   82598:	4413      	add	r3, r2
   8259a:	2210      	movs	r2, #16
   8259c:	809a      	strh	r2, [r3, #4]
				Cl_alarms_alarms[TEMP1_LOW_THRESHOLD].cl_detected_count++;
   8259e:	4b5f      	ldr	r3, [pc, #380]	; (8271c <Cl_alarms_scanforAlarms+0x11d4>)
   825a0:	f893 310d 	ldrb.w	r3, [r3, #269]	; 0x10d
   825a4:	3301      	adds	r3, #1
   825a6:	b2da      	uxtb	r2, r3
   825a8:	4b5c      	ldr	r3, [pc, #368]	; (8271c <Cl_alarms_scanforAlarms+0x11d4>)
   825aa:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
				cl_alarm_triggered = true;
   825ae:	4b5f      	ldr	r3, [pc, #380]	; (8272c <Cl_alarms_scanforAlarms+0x11e4>)
   825b0:	2201      	movs	r2, #1
   825b2:	701a      	strb	r2, [r3, #0]
				cl_lastalarmid = TEMP1_LOW_THRESHOLD;
   825b4:	4b5e      	ldr	r3, [pc, #376]	; (82730 <Cl_alarms_scanforAlarms+0x11e8>)
   825b6:	2210      	movs	r2, #16
   825b8:	701a      	strb	r2, [r3, #0]
				Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   825ba:	4b5b      	ldr	r3, [pc, #364]	; (82728 <Cl_alarms_scanforAlarms+0x11e0>)
   825bc:	781b      	ldrb	r3, [r3, #0]
   825be:	461a      	mov	r2, r3
   825c0:	4b59      	ldr	r3, [pc, #356]	; (82728 <Cl_alarms_scanforAlarms+0x11e0>)
   825c2:	4413      	add	r3, r2
   825c4:	222e      	movs	r2, #46	; 0x2e
   825c6:	709a      	strb	r2, [r3, #2]
				Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   825c8:	4b5a      	ldr	r3, [pc, #360]	; (82734 <Cl_alarms_scanforAlarms+0x11ec>)
   825ca:	4798      	blx	r3
   825cc:	4603      	mov	r3, r0
   825ce:	71fb      	strb	r3, [r7, #7]
				ASSERT_ERROR(Cl_alarms_retcode);
   825d0:	79fb      	ldrb	r3, [r7, #7]
   825d2:	2b00      	cmp	r3, #0
   825d4:	d012      	beq.n	825fc <Cl_alarms_scanforAlarms+0x10b4>
   825d6:	4b58      	ldr	r3, [pc, #352]	; (82738 <Cl_alarms_scanforAlarms+0x11f0>)
   825d8:	4798      	blx	r3
   825da:	e00f      	b.n	825fc <Cl_alarms_scanforAlarms+0x10b4>
				}
						
			}
			else
			{	
				if(Cl_alarms_alarms[TEMP1_LOW_THRESHOLD].cl_alarmstate == CL_ALARM_DETECTED)
   825dc:	4b4f      	ldr	r3, [pc, #316]	; (8271c <Cl_alarms_scanforAlarms+0x11d4>)
   825de:	f893 3102 	ldrb.w	r3, [r3, #258]	; 0x102
   825e2:	2b01      	cmp	r3, #1
   825e4:	d10a      	bne.n	825fc <Cl_alarms_scanforAlarms+0x10b4>
				{												
					Cl_alarms_alarms[TEMP1_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_INACTIVE;
   825e6:	4b4d      	ldr	r3, [pc, #308]	; (8271c <Cl_alarms_scanforAlarms+0x11d4>)
   825e8:	2204      	movs	r2, #4
   825ea:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
					Cl_alarms_alarms[TEMP1_LOW_THRESHOLD].cl_detected_count = 0;
   825ee:	4b4b      	ldr	r3, [pc, #300]	; (8271c <Cl_alarms_scanforAlarms+0x11d4>)
   825f0:	2200      	movs	r2, #0
   825f2:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
					cl_alarm_triggered = false;	
   825f6:	4b4d      	ldr	r3, [pc, #308]	; (8272c <Cl_alarms_scanforAlarms+0x11e4>)
   825f8:	2200      	movs	r2, #0
   825fa:	701a      	strb	r2, [r3, #0]
				}						
			}
	}
	
	
	if(Cl_alarms_alarms[TEMP3_HIGH_THRESHOLD].cl_is_enabled)
   825fc:	4b47      	ldr	r3, [pc, #284]	; (8271c <Cl_alarms_scanforAlarms+0x11d4>)
   825fe:	f893 313e 	ldrb.w	r3, [r3, #318]	; 0x13e
   82602:	2b00      	cmp	r3, #0
   82604:	d04a      	beq.n	8269c <Cl_alarms_scanforAlarms+0x1154>
		{
		//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DETECT_HIGH",11);
			//	Cl_Int16Type temp1,temp2;
			//	temp1 = (0.805 * cl_sys_statbuffer.Temp3status) - 1004 ;
			//	temp2 = 3000 + (temp1 * 1000)/382;
			if(temp3 > Cl_alarmThresholdTable.temp3_high_threshold)
   82606:	4b4e      	ldr	r3, [pc, #312]	; (82740 <Cl_alarms_scanforAlarms+0x11f8>)
   82608:	6c99      	ldr	r1, [r3, #72]	; 0x48
   8260a:	4b4e      	ldr	r3, [pc, #312]	; (82744 <Cl_alarms_scanforAlarms+0x11fc>)
   8260c:	681a      	ldr	r2, [r3, #0]
   8260e:	4b45      	ldr	r3, [pc, #276]	; (82724 <Cl_alarms_scanforAlarms+0x11dc>)
   82610:	4608      	mov	r0, r1
   82612:	4611      	mov	r1, r2
   82614:	4798      	blx	r3
   82616:	4603      	mov	r3, r0
   82618:	2b00      	cmp	r3, #0
   8261a:	d02f      	beq.n	8267c <Cl_alarms_scanforAlarms+0x1134>
			//	Cl_Uint16Type temp_ps;
				//temp_ps=temp3;

				///Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"T3=",3);
				//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
				if(Cl_alarms_alarms[TEMP3_HIGH_THRESHOLD].cl_alarmstate != CL_ALARM_DETECTED)
   8261c:	4b3f      	ldr	r3, [pc, #252]	; (8271c <Cl_alarms_scanforAlarms+0x11d4>)
   8261e:	f893 3132 	ldrb.w	r3, [r3, #306]	; 0x132
   82622:	2b01      	cmp	r3, #1
   82624:	d03a      	beq.n	8269c <Cl_alarms_scanforAlarms+0x1154>
				{
					Cl_alarms_alarms[TEMP3_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;
   82626:	4b3d      	ldr	r3, [pc, #244]	; (8271c <Cl_alarms_scanforAlarms+0x11d4>)
   82628:	2201      	movs	r2, #1
   8262a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
					Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=TEMP3_HIGH_THRESHOLD;
   8262e:	4b3e      	ldr	r3, [pc, #248]	; (82728 <Cl_alarms_scanforAlarms+0x11e0>)
   82630:	781b      	ldrb	r3, [r3, #0]
   82632:	4a3d      	ldr	r2, [pc, #244]	; (82728 <Cl_alarms_scanforAlarms+0x11e0>)
   82634:	3301      	adds	r3, #1
   82636:	00db      	lsls	r3, r3, #3
   82638:	4413      	add	r3, r2
   8263a:	2213      	movs	r2, #19
   8263c:	809a      	strh	r2, [r3, #4]
					Cl_alarms_alarms[TEMP3_HIGH_THRESHOLD].cl_detected_count++;
   8263e:	4b37      	ldr	r3, [pc, #220]	; (8271c <Cl_alarms_scanforAlarms+0x11d4>)
   82640:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   82644:	3301      	adds	r3, #1
   82646:	b2da      	uxtb	r2, r3
   82648:	4b34      	ldr	r3, [pc, #208]	; (8271c <Cl_alarms_scanforAlarms+0x11d4>)
   8264a:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
					cl_alarm_triggered = true;
   8264e:	4b37      	ldr	r3, [pc, #220]	; (8272c <Cl_alarms_scanforAlarms+0x11e4>)
   82650:	2201      	movs	r2, #1
   82652:	701a      	strb	r2, [r3, #0]
					
					cl_lastalarmid = TEMP3_HIGH_THRESHOLD;
   82654:	4b36      	ldr	r3, [pc, #216]	; (82730 <Cl_alarms_scanforAlarms+0x11e8>)
   82656:	2213      	movs	r2, #19
   82658:	701a      	strb	r2, [r3, #0]
					Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   8265a:	4b33      	ldr	r3, [pc, #204]	; (82728 <Cl_alarms_scanforAlarms+0x11e0>)
   8265c:	781b      	ldrb	r3, [r3, #0]
   8265e:	461a      	mov	r2, r3
   82660:	4b31      	ldr	r3, [pc, #196]	; (82728 <Cl_alarms_scanforAlarms+0x11e0>)
   82662:	4413      	add	r3, r2
   82664:	222e      	movs	r2, #46	; 0x2e
   82666:	709a      	strb	r2, [r3, #2]
					Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   82668:	4b32      	ldr	r3, [pc, #200]	; (82734 <Cl_alarms_scanforAlarms+0x11ec>)
   8266a:	4798      	blx	r3
   8266c:	4603      	mov	r3, r0
   8266e:	71fb      	strb	r3, [r7, #7]
					ASSERT_ERROR(Cl_alarms_retcode);
   82670:	79fb      	ldrb	r3, [r7, #7]
   82672:	2b00      	cmp	r3, #0
   82674:	d012      	beq.n	8269c <Cl_alarms_scanforAlarms+0x1154>
   82676:	4b30      	ldr	r3, [pc, #192]	; (82738 <Cl_alarms_scanforAlarms+0x11f0>)
   82678:	4798      	blx	r3
   8267a:	e00f      	b.n	8269c <Cl_alarms_scanforAlarms+0x1154>
			}
	
				else 
			//	else if (cl_sys_statbuffer.Temp3status > 400)
				{	
					if(Cl_alarms_alarms[TEMP3_HIGH_THRESHOLD].cl_alarmstate == CL_ALARM_DETECTED)
   8267c:	4b27      	ldr	r3, [pc, #156]	; (8271c <Cl_alarms_scanforAlarms+0x11d4>)
   8267e:	f893 3132 	ldrb.w	r3, [r3, #306]	; 0x132
   82682:	2b01      	cmp	r3, #1
   82684:	d10a      	bne.n	8269c <Cl_alarms_scanforAlarms+0x1154>
					{												
						Cl_alarms_alarms[TEMP3_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_INACTIVE;
   82686:	4b25      	ldr	r3, [pc, #148]	; (8271c <Cl_alarms_scanforAlarms+0x11d4>)
   82688:	2204      	movs	r2, #4
   8268a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
						Cl_alarms_alarms[TEMP3_HIGH_THRESHOLD].cl_detected_count = 0;
   8268e:	4b23      	ldr	r3, [pc, #140]	; (8271c <Cl_alarms_scanforAlarms+0x11d4>)
   82690:	2200      	movs	r2, #0
   82692:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
						cl_alarm_triggered = false;	
   82696:	4b25      	ldr	r3, [pc, #148]	; (8272c <Cl_alarms_scanforAlarms+0x11e4>)
   82698:	2200      	movs	r2, #0
   8269a:	701a      	strb	r2, [r3, #0]
					}						
				}
				}
	if(Cl_alarms_alarms[TEMP3_LOW_THRESHOLD].cl_is_enabled)
   8269c:	4b1f      	ldr	r3, [pc, #124]	; (8271c <Cl_alarms_scanforAlarms+0x11d4>)
   8269e:	f893 314e 	ldrb.w	r3, [r3, #334]	; 0x14e
   826a2:	2b00      	cmp	r3, #0
   826a4:	d060      	beq.n	82768 <Cl_alarms_scanforAlarms+0x1220>
	{
		//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DETECT_LOW",11);
			 if (temp3 < Cl_alarmThresholdTable.temp3_low_threshold)
   826a6:	4b26      	ldr	r3, [pc, #152]	; (82740 <Cl_alarms_scanforAlarms+0x11f8>)
   826a8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   826aa:	4b26      	ldr	r3, [pc, #152]	; (82744 <Cl_alarms_scanforAlarms+0x11fc>)
   826ac:	681a      	ldr	r2, [r3, #0]
   826ae:	4b23      	ldr	r3, [pc, #140]	; (8273c <Cl_alarms_scanforAlarms+0x11f4>)
   826b0:	4608      	mov	r0, r1
   826b2:	4611      	mov	r1, r2
   826b4:	4798      	blx	r3
   826b6:	4603      	mov	r3, r0
   826b8:	2b00      	cmp	r3, #0
   826ba:	d045      	beq.n	82748 <Cl_alarms_scanforAlarms+0x1200>
				//Cl_Uint16Type temp_ps;
				//temp_ps=temp3;

				//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"T3=",3);
				//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
							if(Cl_alarms_alarms[TEMP3_LOW_THRESHOLD].cl_alarmstate != CL_ALARM_DETECTED)
   826bc:	4b17      	ldr	r3, [pc, #92]	; (8271c <Cl_alarms_scanforAlarms+0x11d4>)
   826be:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
   826c2:	2b01      	cmp	r3, #1
   826c4:	d050      	beq.n	82768 <Cl_alarms_scanforAlarms+0x1220>
							{
								Cl_alarms_alarms[TEMP3_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;
   826c6:	4b15      	ldr	r3, [pc, #84]	; (8271c <Cl_alarms_scanforAlarms+0x11d4>)
   826c8:	2201      	movs	r2, #1
   826ca:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
								Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=TEMP3_LOW_THRESHOLD;
   826ce:	4b16      	ldr	r3, [pc, #88]	; (82728 <Cl_alarms_scanforAlarms+0x11e0>)
   826d0:	781b      	ldrb	r3, [r3, #0]
   826d2:	4a15      	ldr	r2, [pc, #84]	; (82728 <Cl_alarms_scanforAlarms+0x11e0>)
   826d4:	3301      	adds	r3, #1
   826d6:	00db      	lsls	r3, r3, #3
   826d8:	4413      	add	r3, r2
   826da:	2214      	movs	r2, #20
   826dc:	809a      	strh	r2, [r3, #4]
								Cl_alarms_alarms[TEMP3_LOW_THRESHOLD].cl_detected_count++;
   826de:	4b0f      	ldr	r3, [pc, #60]	; (8271c <Cl_alarms_scanforAlarms+0x11d4>)
   826e0:	f893 314d 	ldrb.w	r3, [r3, #333]	; 0x14d
   826e4:	3301      	adds	r3, #1
   826e6:	b2da      	uxtb	r2, r3
   826e8:	4b0c      	ldr	r3, [pc, #48]	; (8271c <Cl_alarms_scanforAlarms+0x11d4>)
   826ea:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
								cl_alarm_triggered = true;
   826ee:	4b0f      	ldr	r3, [pc, #60]	; (8272c <Cl_alarms_scanforAlarms+0x11e4>)
   826f0:	2201      	movs	r2, #1
   826f2:	701a      	strb	r2, [r3, #0]
						
								cl_lastalarmid = TEMP3_LOW_THRESHOLD;
   826f4:	4b0e      	ldr	r3, [pc, #56]	; (82730 <Cl_alarms_scanforAlarms+0x11e8>)
   826f6:	2214      	movs	r2, #20
   826f8:	701a      	strb	r2, [r3, #0]
								Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   826fa:	4b0b      	ldr	r3, [pc, #44]	; (82728 <Cl_alarms_scanforAlarms+0x11e0>)
   826fc:	781b      	ldrb	r3, [r3, #0]
   826fe:	461a      	mov	r2, r3
   82700:	4b09      	ldr	r3, [pc, #36]	; (82728 <Cl_alarms_scanforAlarms+0x11e0>)
   82702:	4413      	add	r3, r2
   82704:	222e      	movs	r2, #46	; 0x2e
   82706:	709a      	strb	r2, [r3, #2]
								Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   82708:	4b0a      	ldr	r3, [pc, #40]	; (82734 <Cl_alarms_scanforAlarms+0x11ec>)
   8270a:	4798      	blx	r3
   8270c:	4603      	mov	r3, r0
   8270e:	71fb      	strb	r3, [r7, #7]
								ASSERT_ERROR(Cl_alarms_retcode);
   82710:	79fb      	ldrb	r3, [r7, #7]
   82712:	2b00      	cmp	r3, #0
   82714:	d028      	beq.n	82768 <Cl_alarms_scanforAlarms+0x1220>
   82716:	4b08      	ldr	r3, [pc, #32]	; (82738 <Cl_alarms_scanforAlarms+0x11f0>)
   82718:	4798      	blx	r3
   8271a:	e025      	b.n	82768 <Cl_alarms_scanforAlarms+0x1220>
   8271c:	20071d0c 	.word	0x20071d0c
   82720:	2007174c 	.word	0x2007174c
   82724:	000a6c95 	.word	0x000a6c95
   82728:	200722c0 	.word	0x200722c0
   8272c:	20071739 	.word	0x20071739
   82730:	20072100 	.word	0x20072100
   82734:	00082d91 	.word	0x00082d91
   82738:	00088fc1 	.word	0x00088fc1
   8273c:	000a6cd1 	.word	0x000a6cd1
   82740:	20072104 	.word	0x20072104
   82744:	20071754 	.word	0x20071754
							}
				}
				else
				{
									
							if(Cl_alarms_alarms[TEMP3_LOW_THRESHOLD].cl_alarmstate == CL_ALARM_DETECTED)
   82748:	4ba0      	ldr	r3, [pc, #640]	; (829cc <Cl_alarms_scanforAlarms+0x1484>)
   8274a:	f893 3142 	ldrb.w	r3, [r3, #322]	; 0x142
   8274e:	2b01      	cmp	r3, #1
   82750:	d10a      	bne.n	82768 <Cl_alarms_scanforAlarms+0x1220>
							{
								Cl_alarms_alarms[TEMP3_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_INACTIVE;
   82752:	4b9e      	ldr	r3, [pc, #632]	; (829cc <Cl_alarms_scanforAlarms+0x1484>)
   82754:	2204      	movs	r2, #4
   82756:	f883 2142 	strb.w	r2, [r3, #322]	; 0x142
								Cl_alarms_alarms[TEMP3_LOW_THRESHOLD].cl_detected_count = 0;
   8275a:	4b9c      	ldr	r3, [pc, #624]	; (829cc <Cl_alarms_scanforAlarms+0x1484>)
   8275c:	2200      	movs	r2, #0
   8275e:	f883 214d 	strb.w	r2, [r3, #333]	; 0x14d
								cl_alarm_triggered = false;
   82762:	4b9b      	ldr	r3, [pc, #620]	; (829d0 <Cl_alarms_scanforAlarms+0x1488>)
   82764:	2200      	movs	r2, #0
   82766:	701a      	strb	r2, [r3, #0]
				}

		}


if(Cl_alarms_alarms[TEMP2_HIGH_THRESHOLD].cl_is_enabled)
   82768:	4b98      	ldr	r3, [pc, #608]	; (829cc <Cl_alarms_scanforAlarms+0x1484>)
   8276a:	f893 311e 	ldrb.w	r3, [r3, #286]	; 0x11e
   8276e:	2b00      	cmp	r3, #0
   82770:	d04b      	beq.n	8280a <Cl_alarms_scanforAlarms+0x12c2>
{
	//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DETECT_HIGH",11);
	//		Cl_Int16Type temp1,temp2;
	//		temp1 = (0.805 * cl_sys_statbuffer.Temp2status) - 1004 ;
	//		temp2 = 3000 + (temp1 * 1000)/382;
			if(temp2 > Cl_alarms_alarms[TEMP2_HIGH_THRESHOLD].cl_upper)
   82772:	4b96      	ldr	r3, [pc, #600]	; (829cc <Cl_alarms_scanforAlarms+0x1484>)
   82774:	f8d3 1114 	ldr.w	r1, [r3, #276]	; 0x114
   82778:	4b96      	ldr	r3, [pc, #600]	; (829d4 <Cl_alarms_scanforAlarms+0x148c>)
   8277a:	681a      	ldr	r2, [r3, #0]
   8277c:	4b96      	ldr	r3, [pc, #600]	; (829d8 <Cl_alarms_scanforAlarms+0x1490>)
   8277e:	4608      	mov	r0, r1
   82780:	4611      	mov	r1, r2
   82782:	4798      	blx	r3
   82784:	4603      	mov	r3, r0
   82786:	2b00      	cmp	r3, #0
   82788:	d02f      	beq.n	827ea <Cl_alarms_scanforAlarms+0x12a2>
	//Cl_Uint16Type temp_ps;
	//temp_ps=temp2;

	//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"T2=",3);
	//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
		if(Cl_alarms_alarms[TEMP2_HIGH_THRESHOLD].cl_alarmstate != CL_ALARM_DETECTED)
   8278a:	4b90      	ldr	r3, [pc, #576]	; (829cc <Cl_alarms_scanforAlarms+0x1484>)
   8278c:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
   82790:	2b01      	cmp	r3, #1
   82792:	d03a      	beq.n	8280a <Cl_alarms_scanforAlarms+0x12c2>
		{
			Cl_alarms_alarms[TEMP2_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;
   82794:	4b8d      	ldr	r3, [pc, #564]	; (829cc <Cl_alarms_scanforAlarms+0x1484>)
   82796:	2201      	movs	r2, #1
   82798:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
			Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=TEMP2_HIGH_THRESHOLD;
   8279c:	4b8f      	ldr	r3, [pc, #572]	; (829dc <Cl_alarms_scanforAlarms+0x1494>)
   8279e:	781b      	ldrb	r3, [r3, #0]
   827a0:	4a8e      	ldr	r2, [pc, #568]	; (829dc <Cl_alarms_scanforAlarms+0x1494>)
   827a2:	3301      	adds	r3, #1
   827a4:	00db      	lsls	r3, r3, #3
   827a6:	4413      	add	r3, r2
   827a8:	2211      	movs	r2, #17
   827aa:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[TEMP2_HIGH_THRESHOLD].cl_detected_count++;
   827ac:	4b87      	ldr	r3, [pc, #540]	; (829cc <Cl_alarms_scanforAlarms+0x1484>)
   827ae:	f893 311d 	ldrb.w	r3, [r3, #285]	; 0x11d
   827b2:	3301      	adds	r3, #1
   827b4:	b2da      	uxtb	r2, r3
   827b6:	4b85      	ldr	r3, [pc, #532]	; (829cc <Cl_alarms_scanforAlarms+0x1484>)
   827b8:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
			cl_alarm_triggered = true;
   827bc:	4b84      	ldr	r3, [pc, #528]	; (829d0 <Cl_alarms_scanforAlarms+0x1488>)
   827be:	2201      	movs	r2, #1
   827c0:	701a      	strb	r2, [r3, #0]
			
			cl_lastalarmid = TEMP2_HIGH_THRESHOLD;
   827c2:	4b87      	ldr	r3, [pc, #540]	; (829e0 <Cl_alarms_scanforAlarms+0x1498>)
   827c4:	2211      	movs	r2, #17
   827c6:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   827c8:	4b84      	ldr	r3, [pc, #528]	; (829dc <Cl_alarms_scanforAlarms+0x1494>)
   827ca:	781b      	ldrb	r3, [r3, #0]
   827cc:	461a      	mov	r2, r3
   827ce:	4b83      	ldr	r3, [pc, #524]	; (829dc <Cl_alarms_scanforAlarms+0x1494>)
   827d0:	4413      	add	r3, r2
   827d2:	222e      	movs	r2, #46	; 0x2e
   827d4:	709a      	strb	r2, [r3, #2]
			Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   827d6:	4b83      	ldr	r3, [pc, #524]	; (829e4 <Cl_alarms_scanforAlarms+0x149c>)
   827d8:	4798      	blx	r3
   827da:	4603      	mov	r3, r0
   827dc:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   827de:	79fb      	ldrb	r3, [r7, #7]
   827e0:	2b00      	cmp	r3, #0
   827e2:	d012      	beq.n	8280a <Cl_alarms_scanforAlarms+0x12c2>
   827e4:	4b80      	ldr	r3, [pc, #512]	; (829e8 <Cl_alarms_scanforAlarms+0x14a0>)
   827e6:	4798      	blx	r3
   827e8:	e00f      	b.n	8280a <Cl_alarms_scanforAlarms+0x12c2>
	}
	else 
	//	else if (cl_sys_statbuffer.Temp3status > 400)
	{

			if(Cl_alarms_alarms[TEMP2_HIGH_THRESHOLD].cl_alarmstate == CL_ALARM_DETECTED)
   827ea:	4b78      	ldr	r3, [pc, #480]	; (829cc <Cl_alarms_scanforAlarms+0x1484>)
   827ec:	f893 3112 	ldrb.w	r3, [r3, #274]	; 0x112
   827f0:	2b01      	cmp	r3, #1
   827f2:	d10a      	bne.n	8280a <Cl_alarms_scanforAlarms+0x12c2>
			{
				Cl_alarms_alarms[TEMP2_HIGH_THRESHOLD].cl_alarmstate = CL_ALARM_INACTIVE;
   827f4:	4b75      	ldr	r3, [pc, #468]	; (829cc <Cl_alarms_scanforAlarms+0x1484>)
   827f6:	2204      	movs	r2, #4
   827f8:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
				Cl_alarms_alarms[TEMP2_HIGH_THRESHOLD].cl_detected_count = 0;
   827fc:	4b73      	ldr	r3, [pc, #460]	; (829cc <Cl_alarms_scanforAlarms+0x1484>)
   827fe:	2200      	movs	r2, #0
   82800:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
				cl_alarm_triggered = false;
   82804:	4b72      	ldr	r3, [pc, #456]	; (829d0 <Cl_alarms_scanforAlarms+0x1488>)
   82806:	2200      	movs	r2, #0
   82808:	701a      	strb	r2, [r3, #0]

		
		
	}
}
if(Cl_alarms_alarms[TEMP2_LOW_THRESHOLD].cl_is_enabled)
   8280a:	4b70      	ldr	r3, [pc, #448]	; (829cc <Cl_alarms_scanforAlarms+0x1484>)
   8280c:	f893 312e 	ldrb.w	r3, [r3, #302]	; 0x12e
   82810:	2b00      	cmp	r3, #0
   82812:	d04b      	beq.n	828ac <Cl_alarms_scanforAlarms+0x1364>
{
	//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DETECT_LOW",11);
	 if (temp2 < Cl_alarms_alarms[TEMP2_LOW_THRESHOLD].cl_lower)//)Cl_alarmThresholdTable.temp2_low_threshold)
   82814:	4b6d      	ldr	r3, [pc, #436]	; (829cc <Cl_alarms_scanforAlarms+0x1484>)
   82816:	f8d3 1128 	ldr.w	r1, [r3, #296]	; 0x128
   8281a:	4b6e      	ldr	r3, [pc, #440]	; (829d4 <Cl_alarms_scanforAlarms+0x148c>)
   8281c:	681a      	ldr	r2, [r3, #0]
   8281e:	4b73      	ldr	r3, [pc, #460]	; (829ec <Cl_alarms_scanforAlarms+0x14a4>)
   82820:	4608      	mov	r0, r1
   82822:	4611      	mov	r1, r2
   82824:	4798      	blx	r3
   82826:	4603      	mov	r3, r0
   82828:	2b00      	cmp	r3, #0
   8282a:	d02f      	beq.n	8288c <Cl_alarms_scanforAlarms+0x1344>
			//temp_ps=temp2;

			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"T2=",3);
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
		
		if(Cl_alarms_alarms[TEMP2_LOW_THRESHOLD].cl_alarmstate != CL_ALARM_DETECTED)
   8282c:	4b67      	ldr	r3, [pc, #412]	; (829cc <Cl_alarms_scanforAlarms+0x1484>)
   8282e:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
   82832:	2b01      	cmp	r3, #1
   82834:	d03a      	beq.n	828ac <Cl_alarms_scanforAlarms+0x1364>
		{
			Cl_alarms_alarms[TEMP2_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_DETECTED;
   82836:	4b65      	ldr	r3, [pc, #404]	; (829cc <Cl_alarms_scanforAlarms+0x1484>)
   82838:	2201      	movs	r2, #1
   8283a:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
			Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=TEMP2_LOW_THRESHOLD;
   8283e:	4b67      	ldr	r3, [pc, #412]	; (829dc <Cl_alarms_scanforAlarms+0x1494>)
   82840:	781b      	ldrb	r3, [r3, #0]
   82842:	4a66      	ldr	r2, [pc, #408]	; (829dc <Cl_alarms_scanforAlarms+0x1494>)
   82844:	3301      	adds	r3, #1
   82846:	00db      	lsls	r3, r3, #3
   82848:	4413      	add	r3, r2
   8284a:	2212      	movs	r2, #18
   8284c:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[TEMP2_LOW_THRESHOLD].cl_detected_count++;
   8284e:	4b5f      	ldr	r3, [pc, #380]	; (829cc <Cl_alarms_scanforAlarms+0x1484>)
   82850:	f893 312d 	ldrb.w	r3, [r3, #301]	; 0x12d
   82854:	3301      	adds	r3, #1
   82856:	b2da      	uxtb	r2, r3
   82858:	4b5c      	ldr	r3, [pc, #368]	; (829cc <Cl_alarms_scanforAlarms+0x1484>)
   8285a:	f883 212d 	strb.w	r2, [r3, #301]	; 0x12d
			cl_alarm_triggered = true;
   8285e:	4b5c      	ldr	r3, [pc, #368]	; (829d0 <Cl_alarms_scanforAlarms+0x1488>)
   82860:	2201      	movs	r2, #1
   82862:	701a      	strb	r2, [r3, #0]
			
			cl_lastalarmid = TEMP2_LOW_THRESHOLD;
   82864:	4b5e      	ldr	r3, [pc, #376]	; (829e0 <Cl_alarms_scanforAlarms+0x1498>)
   82866:	2212      	movs	r2, #18
   82868:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   8286a:	4b5c      	ldr	r3, [pc, #368]	; (829dc <Cl_alarms_scanforAlarms+0x1494>)
   8286c:	781b      	ldrb	r3, [r3, #0]
   8286e:	461a      	mov	r2, r3
   82870:	4b5a      	ldr	r3, [pc, #360]	; (829dc <Cl_alarms_scanforAlarms+0x1494>)
   82872:	4413      	add	r3, r2
   82874:	222e      	movs	r2, #46	; 0x2e
   82876:	709a      	strb	r2, [r3, #2]
			Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   82878:	4b5a      	ldr	r3, [pc, #360]	; (829e4 <Cl_alarms_scanforAlarms+0x149c>)
   8287a:	4798      	blx	r3
   8287c:	4603      	mov	r3, r0
   8287e:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   82880:	79fb      	ldrb	r3, [r7, #7]
   82882:	2b00      	cmp	r3, #0
   82884:	d012      	beq.n	828ac <Cl_alarms_scanforAlarms+0x1364>
   82886:	4b58      	ldr	r3, [pc, #352]	; (829e8 <Cl_alarms_scanforAlarms+0x14a0>)
   82888:	4798      	blx	r3
   8288a:	e00f      	b.n	828ac <Cl_alarms_scanforAlarms+0x1364>
		}
		}
	else
	//	else if (cl_sys_statbuffer.Temp3status > 400)
	{
		if(Cl_alarms_alarms[TEMP2_LOW_THRESHOLD].cl_alarmstate == CL_ALARM_DETECTED)
   8288c:	4b4f      	ldr	r3, [pc, #316]	; (829cc <Cl_alarms_scanforAlarms+0x1484>)
   8288e:	f893 3122 	ldrb.w	r3, [r3, #290]	; 0x122
   82892:	2b01      	cmp	r3, #1
   82894:	d10a      	bne.n	828ac <Cl_alarms_scanforAlarms+0x1364>
		{
			Cl_alarms_alarms[TEMP2_LOW_THRESHOLD].cl_alarmstate = CL_ALARM_INACTIVE;
   82896:	4b4d      	ldr	r3, [pc, #308]	; (829cc <Cl_alarms_scanforAlarms+0x1484>)
   82898:	2204      	movs	r2, #4
   8289a:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
			Cl_alarms_alarms[TEMP2_LOW_THRESHOLD].cl_detected_count = 0;
   8289e:	4b4b      	ldr	r3, [pc, #300]	; (829cc <Cl_alarms_scanforAlarms+0x1484>)
   828a0:	2200      	movs	r2, #0
   828a2:	f883 212d 	strb.w	r2, [r3, #301]	; 0x12d
			cl_alarm_triggered = false;
   828a6:	4b4a      	ldr	r3, [pc, #296]	; (829d0 <Cl_alarms_scanforAlarms+0x1488>)
   828a8:	2200      	movs	r2, #0
   828aa:	701a      	strb	r2, [r3, #0]
		}
	}
}
	if(Cl_alarms_alarms[COND_STATUS_HIGH].cl_is_enabled)
   828ac:	4b47      	ldr	r3, [pc, #284]	; (829cc <Cl_alarms_scanforAlarms+0x1484>)
   828ae:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
   828b2:	2b00      	cmp	r3, #0
   828b4:	d04a      	beq.n	8294c <Cl_alarms_scanforAlarms+0x1404>
		//cond = Cl_alarmThresholdTable.cond_high_threshold;
	//	cond1 = cond_final;

		//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cond,2);
		//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cond1,2);
		if(cond_final > Cl_alarmThresholdTable.cond_high_threshold) //Cl_alarms_alarms[COND_STATUS_HIGH].cl_upper)
   828b6:	4b4e      	ldr	r3, [pc, #312]	; (829f0 <Cl_alarms_scanforAlarms+0x14a8>)
   828b8:	885b      	ldrh	r3, [r3, #2]
   828ba:	b21a      	sxth	r2, r3
   828bc:	4b4d      	ldr	r3, [pc, #308]	; (829f4 <Cl_alarms_scanforAlarms+0x14ac>)
   828be:	4610      	mov	r0, r2
   828c0:	4798      	blx	r3
   828c2:	4601      	mov	r1, r0
   828c4:	4b4c      	ldr	r3, [pc, #304]	; (829f8 <Cl_alarms_scanforAlarms+0x14b0>)
   828c6:	681a      	ldr	r2, [r3, #0]
   828c8:	4b43      	ldr	r3, [pc, #268]	; (829d8 <Cl_alarms_scanforAlarms+0x1490>)
   828ca:	4608      	mov	r0, r1
   828cc:	4611      	mov	r1, r2
   828ce:	4798      	blx	r3
   828d0:	4603      	mov	r3, r0
   828d2:	2b00      	cmp	r3, #0
   828d4:	d02a      	beq.n	8292c <Cl_alarms_scanforAlarms+0x13e4>
			///Cl_Uint16Type temp_ps;
			//temp_ps=cond_final;

			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"CS=",3);
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
			Cl_alarms_alarms[COND_STATUS_HIGH].cl_alarmstate = CL_ALARM_DETECTED;
   828d6:	4b3d      	ldr	r3, [pc, #244]	; (829cc <Cl_alarms_scanforAlarms+0x1484>)
   828d8:	2201      	movs	r2, #1
   828da:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
			Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=COND_STATUS_HIGH;
   828de:	4b3f      	ldr	r3, [pc, #252]	; (829dc <Cl_alarms_scanforAlarms+0x1494>)
   828e0:	781b      	ldrb	r3, [r3, #0]
   828e2:	4a3e      	ldr	r2, [pc, #248]	; (829dc <Cl_alarms_scanforAlarms+0x1494>)
   828e4:	3301      	adds	r3, #1
   828e6:	00db      	lsls	r3, r3, #3
   828e8:	4413      	add	r3, r2
   828ea:	2208      	movs	r2, #8
   828ec:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[COND_STATUS_HIGH].cl_detected_count++;
   828ee:	4b37      	ldr	r3, [pc, #220]	; (829cc <Cl_alarms_scanforAlarms+0x1484>)
   828f0:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
   828f4:	3301      	adds	r3, #1
   828f6:	b2da      	uxtb	r2, r3
   828f8:	4b34      	ldr	r3, [pc, #208]	; (829cc <Cl_alarms_scanforAlarms+0x1484>)
   828fa:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
			cl_alarm_triggered = true;
   828fe:	4b34      	ldr	r3, [pc, #208]	; (829d0 <Cl_alarms_scanforAlarms+0x1488>)
   82900:	2201      	movs	r2, #1
   82902:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = COND_STATUS_HIGH;
   82904:	4b36      	ldr	r3, [pc, #216]	; (829e0 <Cl_alarms_scanforAlarms+0x1498>)
   82906:	2208      	movs	r2, #8
   82908:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   8290a:	4b34      	ldr	r3, [pc, #208]	; (829dc <Cl_alarms_scanforAlarms+0x1494>)
   8290c:	781b      	ldrb	r3, [r3, #0]
   8290e:	461a      	mov	r2, r3
   82910:	4b32      	ldr	r3, [pc, #200]	; (829dc <Cl_alarms_scanforAlarms+0x1494>)
   82912:	4413      	add	r3, r2
   82914:	222e      	movs	r2, #46	; 0x2e
   82916:	709a      	strb	r2, [r3, #2]
			Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   82918:	4b32      	ldr	r3, [pc, #200]	; (829e4 <Cl_alarms_scanforAlarms+0x149c>)
   8291a:	4798      	blx	r3
   8291c:	4603      	mov	r3, r0
   8291e:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   82920:	79fb      	ldrb	r3, [r7, #7]
   82922:	2b00      	cmp	r3, #0
   82924:	d012      	beq.n	8294c <Cl_alarms_scanforAlarms+0x1404>
   82926:	4b30      	ldr	r3, [pc, #192]	; (829e8 <Cl_alarms_scanforAlarms+0x14a0>)
   82928:	4798      	blx	r3
   8292a:	e00f      	b.n	8294c <Cl_alarms_scanforAlarms+0x1404>
		}
		else
		{
			if(Cl_alarms_alarms[COND_STATUS_HIGH].cl_alarmstate == CL_ALARM_DETECTED)
   8292c:	4b27      	ldr	r3, [pc, #156]	; (829cc <Cl_alarms_scanforAlarms+0x1484>)
   8292e:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
   82932:	2b01      	cmp	r3, #1
   82934:	d10a      	bne.n	8294c <Cl_alarms_scanforAlarms+0x1404>
			{
				Cl_alarms_alarms[COND_STATUS_HIGH].cl_alarmstate = CL_ALARM_INACTIVE;
   82936:	4b25      	ldr	r3, [pc, #148]	; (829cc <Cl_alarms_scanforAlarms+0x1484>)
   82938:	2204      	movs	r2, #4
   8293a:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
				Cl_alarms_alarms[COND_STATUS_HIGH].cl_detected_count = 0;
   8293e:	4b23      	ldr	r3, [pc, #140]	; (829cc <Cl_alarms_scanforAlarms+0x1484>)
   82940:	2200      	movs	r2, #0
   82942:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
				cl_alarm_triggered = false;
   82946:	4b22      	ldr	r3, [pc, #136]	; (829d0 <Cl_alarms_scanforAlarms+0x1488>)
   82948:	2200      	movs	r2, #0
   8294a:	701a      	strb	r2, [r3, #0]
			}
		} 
		
	}
	
	if(Cl_alarms_alarms[COND_STATUS_LOW].cl_is_enabled)
   8294c:	4b1f      	ldr	r3, [pc, #124]	; (829cc <Cl_alarms_scanforAlarms+0x1484>)
   8294e:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
   82952:	2b00      	cmp	r3, #0
   82954:	d062      	beq.n	82a1c <Cl_alarms_scanforAlarms+0x14d4>
		//Cl_Uint16Type cond,cond1;
		//cond = Cl_alarmThresholdTable.cond_low_threshold;
		//cond1 = cond_final;
		//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cond,2);
		//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cond1,2);
		if(cond_final < Cl_alarmThresholdTable.cond_low_threshold)
   82956:	4b26      	ldr	r3, [pc, #152]	; (829f0 <Cl_alarms_scanforAlarms+0x14a8>)
   82958:	881b      	ldrh	r3, [r3, #0]
   8295a:	b21a      	sxth	r2, r3
   8295c:	4b25      	ldr	r3, [pc, #148]	; (829f4 <Cl_alarms_scanforAlarms+0x14ac>)
   8295e:	4610      	mov	r0, r2
   82960:	4798      	blx	r3
   82962:	4601      	mov	r1, r0
   82964:	4b24      	ldr	r3, [pc, #144]	; (829f8 <Cl_alarms_scanforAlarms+0x14b0>)
   82966:	681a      	ldr	r2, [r3, #0]
   82968:	4b20      	ldr	r3, [pc, #128]	; (829ec <Cl_alarms_scanforAlarms+0x14a4>)
   8296a:	4608      	mov	r0, r1
   8296c:	4611      	mov	r1, r2
   8296e:	4798      	blx	r3
   82970:	4603      	mov	r3, r0
   82972:	2b00      	cmp	r3, #0
   82974:	d042      	beq.n	829fc <Cl_alarms_scanforAlarms+0x14b4>
			//Cl_Uint16Type temp_ps;
			//temp_ps=cond_final;

			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"CS=",3);
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
			Cl_alarms_alarms[COND_STATUS_LOW].cl_alarmstate = CL_ALARM_DETECTED;
   82976:	4b15      	ldr	r3, [pc, #84]	; (829cc <Cl_alarms_scanforAlarms+0x1484>)
   82978:	2201      	movs	r2, #1
   8297a:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
			Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=COND_STATUS_LOW;
   8297e:	4b17      	ldr	r3, [pc, #92]	; (829dc <Cl_alarms_scanforAlarms+0x1494>)
   82980:	781b      	ldrb	r3, [r3, #0]
   82982:	4a16      	ldr	r2, [pc, #88]	; (829dc <Cl_alarms_scanforAlarms+0x1494>)
   82984:	3301      	adds	r3, #1
   82986:	00db      	lsls	r3, r3, #3
   82988:	4413      	add	r3, r2
   8298a:	2207      	movs	r2, #7
   8298c:	809a      	strh	r2, [r3, #4]
			Cl_alarms_alarms[COND_STATUS_LOW].cl_detected_count++;
   8298e:	4b0f      	ldr	r3, [pc, #60]	; (829cc <Cl_alarms_scanforAlarms+0x1484>)
   82990:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
   82994:	3301      	adds	r3, #1
   82996:	b2da      	uxtb	r2, r3
   82998:	4b0c      	ldr	r3, [pc, #48]	; (829cc <Cl_alarms_scanforAlarms+0x1484>)
   8299a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
			cl_alarm_triggered = true;
   8299e:	4b0c      	ldr	r3, [pc, #48]	; (829d0 <Cl_alarms_scanforAlarms+0x1488>)
   829a0:	2201      	movs	r2, #1
   829a2:	701a      	strb	r2, [r3, #0]
			cl_lastalarmid = COND_STATUS_LOW;
   829a4:	4b0e      	ldr	r3, [pc, #56]	; (829e0 <Cl_alarms_scanforAlarms+0x1498>)
   829a6:	2207      	movs	r2, #7
   829a8:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   829aa:	4b0c      	ldr	r3, [pc, #48]	; (829dc <Cl_alarms_scanforAlarms+0x1494>)
   829ac:	781b      	ldrb	r3, [r3, #0]
   829ae:	461a      	mov	r2, r3
   829b0:	4b0a      	ldr	r3, [pc, #40]	; (829dc <Cl_alarms_scanforAlarms+0x1494>)
   829b2:	4413      	add	r3, r2
   829b4:	222e      	movs	r2, #46	; 0x2e
   829b6:	709a      	strb	r2, [r3, #2]
			Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   829b8:	4b0a      	ldr	r3, [pc, #40]	; (829e4 <Cl_alarms_scanforAlarms+0x149c>)
   829ba:	4798      	blx	r3
   829bc:	4603      	mov	r3, r0
   829be:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   829c0:	79fb      	ldrb	r3, [r7, #7]
   829c2:	2b00      	cmp	r3, #0
   829c4:	d02a      	beq.n	82a1c <Cl_alarms_scanforAlarms+0x14d4>
   829c6:	4b08      	ldr	r3, [pc, #32]	; (829e8 <Cl_alarms_scanforAlarms+0x14a0>)
   829c8:	4798      	blx	r3
   829ca:	e027      	b.n	82a1c <Cl_alarms_scanforAlarms+0x14d4>
   829cc:	20071d0c 	.word	0x20071d0c
   829d0:	20071739 	.word	0x20071739
   829d4:	20071750 	.word	0x20071750
   829d8:	000a6c95 	.word	0x000a6c95
   829dc:	200722c0 	.word	0x200722c0
   829e0:	20072100 	.word	0x20072100
   829e4:	00082d91 	.word	0x00082d91
   829e8:	00088fc1 	.word	0x00088fc1
   829ec:	000a6cd1 	.word	0x000a6cd1
   829f0:	20072104 	.word	0x20072104
   829f4:	000a68b1 	.word	0x000a68b1
   829f8:	20071758 	.word	0x20071758
			
		}
		else
		{
			if(Cl_alarms_alarms[COND_STATUS_LOW].cl_alarmstate == CL_ALARM_DETECTED)
   829fc:	4b7f      	ldr	r3, [pc, #508]	; (82bfc <Cl_alarms_scanforAlarms+0x16b4>)
   829fe:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
   82a02:	2b01      	cmp	r3, #1
   82a04:	d10a      	bne.n	82a1c <Cl_alarms_scanforAlarms+0x14d4>
			{
				Cl_alarms_alarms[COND_STATUS_LOW].cl_alarmstate = CL_ALARM_INACTIVE;
   82a06:	4b7d      	ldr	r3, [pc, #500]	; (82bfc <Cl_alarms_scanforAlarms+0x16b4>)
   82a08:	2204      	movs	r2, #4
   82a0a:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
				Cl_alarms_alarms[COND_STATUS_LOW].cl_detected_count = 0;
   82a0e:	4b7b      	ldr	r3, [pc, #492]	; (82bfc <Cl_alarms_scanforAlarms+0x16b4>)
   82a10:	2200      	movs	r2, #0
   82a12:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
				cl_alarm_triggered = false;
   82a16:	4b7a      	ldr	r3, [pc, #488]	; (82c00 <Cl_alarms_scanforAlarms+0x16b8>)
   82a18:	2200      	movs	r2, #0
   82a1a:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	
			
	if((Cl_alarms_alarms[COND_DAC_OPEN].cl_is_enabled) || (Cl_alarms_alarms[COND_DAC_RO].cl_is_enabled) || (Cl_alarms_alarms[COND_DAC_HIGH].cl_is_enabled) )
   82a1c:	4b77      	ldr	r3, [pc, #476]	; (82bfc <Cl_alarms_scanforAlarms+0x16b4>)
   82a1e:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
   82a22:	2b00      	cmp	r3, #0
   82a24:	d10a      	bne.n	82a3c <Cl_alarms_scanforAlarms+0x14f4>
   82a26:	4b75      	ldr	r3, [pc, #468]	; (82bfc <Cl_alarms_scanforAlarms+0x16b4>)
   82a28:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
   82a2c:	2b00      	cmp	r3, #0
   82a2e:	d105      	bne.n	82a3c <Cl_alarms_scanforAlarms+0x14f4>
   82a30:	4b72      	ldr	r3, [pc, #456]	; (82bfc <Cl_alarms_scanforAlarms+0x16b4>)
   82a32:	f893 30be 	ldrb.w	r3, [r3, #190]	; 0xbe
   82a36:	2b00      	cmp	r3, #0
   82a38:	f000 80f1 	beq.w	82c1e <Cl_alarms_scanforAlarms+0x16d6>
	{
			dac_cond_alarm = _NO_ALARM;
   82a3c:	4b71      	ldr	r3, [pc, #452]	; (82c04 <Cl_alarms_scanforAlarms+0x16bc>)
   82a3e:	2200      	movs	r2, #0
   82a40:	701a      	strb	r2, [r3, #0]
			Cl_alarms_retcode =  cl_get_dac_conductivity_info(&dac_cond_alarm);
   82a42:	4870      	ldr	r0, [pc, #448]	; (82c04 <Cl_alarms_scanforAlarms+0x16bc>)
   82a44:	4b70      	ldr	r3, [pc, #448]	; (82c08 <Cl_alarms_scanforAlarms+0x16c0>)
   82a46:	4798      	blx	r3
   82a48:	4603      	mov	r3, r0
   82a4a:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_alarms_retcode);
   82a4c:	79fb      	ldrb	r3, [r7, #7]
   82a4e:	2b00      	cmp	r3, #0
   82a50:	d001      	beq.n	82a56 <Cl_alarms_scanforAlarms+0x150e>
   82a52:	4b6e      	ldr	r3, [pc, #440]	; (82c0c <Cl_alarms_scanforAlarms+0x16c4>)
   82a54:	4798      	blx	r3
				switch(dac_cond_alarm)
   82a56:	4b6b      	ldr	r3, [pc, #428]	; (82c04 <Cl_alarms_scanforAlarms+0x16bc>)
   82a58:	781b      	ldrb	r3, [r3, #0]
   82a5a:	2b0a      	cmp	r3, #10
   82a5c:	d048      	beq.n	82af0 <Cl_alarms_scanforAlarms+0x15a8>
   82a5e:	2b0b      	cmp	r3, #11
   82a60:	f000 8089 	beq.w	82b76 <Cl_alarms_scanforAlarms+0x162e>
   82a64:	2b09      	cmp	r3, #9
   82a66:	f040 80da 	bne.w	82c1e <Cl_alarms_scanforAlarms+0x16d6>
				{
					case COND_DAC_OPEN:
						Cl_alarms_alarms[dac_cond_alarm].cl_alarmstate = CL_ALARM_DETECTED;
   82a6a:	4b66      	ldr	r3, [pc, #408]	; (82c04 <Cl_alarms_scanforAlarms+0x16bc>)
   82a6c:	781b      	ldrb	r3, [r3, #0]
   82a6e:	4a63      	ldr	r2, [pc, #396]	; (82bfc <Cl_alarms_scanforAlarms+0x16b4>)
   82a70:	011b      	lsls	r3, r3, #4
   82a72:	4413      	add	r3, r2
   82a74:	2201      	movs	r2, #1
   82a76:	709a      	strb	r2, [r3, #2]
						Cl_alarms_alarms[COND_DAC_RO].cl_alarmstate = CL_ALARM_INACTIVE;
   82a78:	4b60      	ldr	r3, [pc, #384]	; (82bfc <Cl_alarms_scanforAlarms+0x16b4>)
   82a7a:	2204      	movs	r2, #4
   82a7c:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
						Cl_alarms_alarms[COND_DAC_HIGH].cl_alarmstate = CL_ALARM_INACTIVE;
   82a80:	4b5e      	ldr	r3, [pc, #376]	; (82bfc <Cl_alarms_scanforAlarms+0x16b4>)
   82a82:	2204      	movs	r2, #4
   82a84:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
						Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=dac_cond_alarm;
   82a88:	4b61      	ldr	r3, [pc, #388]	; (82c10 <Cl_alarms_scanforAlarms+0x16c8>)
   82a8a:	781b      	ldrb	r3, [r3, #0]
   82a8c:	4618      	mov	r0, r3
   82a8e:	4b5d      	ldr	r3, [pc, #372]	; (82c04 <Cl_alarms_scanforAlarms+0x16bc>)
   82a90:	781b      	ldrb	r3, [r3, #0]
   82a92:	b299      	uxth	r1, r3
   82a94:	4a5e      	ldr	r2, [pc, #376]	; (82c10 <Cl_alarms_scanforAlarms+0x16c8>)
   82a96:	1c43      	adds	r3, r0, #1
   82a98:	00db      	lsls	r3, r3, #3
   82a9a:	4413      	add	r3, r2
   82a9c:	460a      	mov	r2, r1
   82a9e:	809a      	strh	r2, [r3, #4]
						Cl_alarms_alarms[dac_cond_alarm].cl_detected_count++;
   82aa0:	4b58      	ldr	r3, [pc, #352]	; (82c04 <Cl_alarms_scanforAlarms+0x16bc>)
   82aa2:	781b      	ldrb	r3, [r3, #0]
   82aa4:	4955      	ldr	r1, [pc, #340]	; (82bfc <Cl_alarms_scanforAlarms+0x16b4>)
   82aa6:	011a      	lsls	r2, r3, #4
   82aa8:	440a      	add	r2, r1
   82aaa:	3208      	adds	r2, #8
   82aac:	7952      	ldrb	r2, [r2, #5]
   82aae:	3201      	adds	r2, #1
   82ab0:	b2d1      	uxtb	r1, r2
   82ab2:	4a52      	ldr	r2, [pc, #328]	; (82bfc <Cl_alarms_scanforAlarms+0x16b4>)
   82ab4:	011b      	lsls	r3, r3, #4
   82ab6:	4413      	add	r3, r2
   82ab8:	3308      	adds	r3, #8
   82aba:	460a      	mov	r2, r1
   82abc:	715a      	strb	r2, [r3, #5]
						cl_alarm_triggered = true;
   82abe:	4b50      	ldr	r3, [pc, #320]	; (82c00 <Cl_alarms_scanforAlarms+0x16b8>)
   82ac0:	2201      	movs	r2, #1
   82ac2:	701a      	strb	r2, [r3, #0]
						cl_lastalarmid = dac_cond_alarm;
   82ac4:	4b4f      	ldr	r3, [pc, #316]	; (82c04 <Cl_alarms_scanforAlarms+0x16bc>)
   82ac6:	781a      	ldrb	r2, [r3, #0]
   82ac8:	4b52      	ldr	r3, [pc, #328]	; (82c14 <Cl_alarms_scanforAlarms+0x16cc>)
   82aca:	701a      	strb	r2, [r3, #0]
						Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   82acc:	4b50      	ldr	r3, [pc, #320]	; (82c10 <Cl_alarms_scanforAlarms+0x16c8>)
   82ace:	781b      	ldrb	r3, [r3, #0]
   82ad0:	461a      	mov	r2, r3
   82ad2:	4b4f      	ldr	r3, [pc, #316]	; (82c10 <Cl_alarms_scanforAlarms+0x16c8>)
   82ad4:	4413      	add	r3, r2
   82ad6:	222e      	movs	r2, #46	; 0x2e
   82ad8:	709a      	strb	r2, [r3, #2]
						Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   82ada:	4b4f      	ldr	r3, [pc, #316]	; (82c18 <Cl_alarms_scanforAlarms+0x16d0>)
   82adc:	4798      	blx	r3
   82ade:	4603      	mov	r3, r0
   82ae0:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_alarms_retcode);
   82ae2:	79fb      	ldrb	r3, [r7, #7]
   82ae4:	2b00      	cmp	r3, #0
   82ae6:	d002      	beq.n	82aee <Cl_alarms_scanforAlarms+0x15a6>
   82ae8:	4b48      	ldr	r3, [pc, #288]	; (82c0c <Cl_alarms_scanforAlarms+0x16c4>)
   82aea:	4798      	blx	r3
					break;
   82aec:	e097      	b.n	82c1e <Cl_alarms_scanforAlarms+0x16d6>
   82aee:	e096      	b.n	82c1e <Cl_alarms_scanforAlarms+0x16d6>
					case COND_DAC_RO:
						Cl_alarms_alarms[dac_cond_alarm].cl_alarmstate = CL_ALARM_DETECTED;
   82af0:	4b44      	ldr	r3, [pc, #272]	; (82c04 <Cl_alarms_scanforAlarms+0x16bc>)
   82af2:	781b      	ldrb	r3, [r3, #0]
   82af4:	4a41      	ldr	r2, [pc, #260]	; (82bfc <Cl_alarms_scanforAlarms+0x16b4>)
   82af6:	011b      	lsls	r3, r3, #4
   82af8:	4413      	add	r3, r2
   82afa:	2201      	movs	r2, #1
   82afc:	709a      	strb	r2, [r3, #2]
						Cl_alarms_alarms[COND_DAC_OPEN].cl_alarmstate = CL_ALARM_INACTIVE;
   82afe:	4b3f      	ldr	r3, [pc, #252]	; (82bfc <Cl_alarms_scanforAlarms+0x16b4>)
   82b00:	2204      	movs	r2, #4
   82b02:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
						Cl_alarms_alarms[COND_DAC_HIGH].cl_alarmstate = CL_ALARM_INACTIVE;
   82b06:	4b3d      	ldr	r3, [pc, #244]	; (82bfc <Cl_alarms_scanforAlarms+0x16b4>)
   82b08:	2204      	movs	r2, #4
   82b0a:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
						Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=dac_cond_alarm;
   82b0e:	4b40      	ldr	r3, [pc, #256]	; (82c10 <Cl_alarms_scanforAlarms+0x16c8>)
   82b10:	781b      	ldrb	r3, [r3, #0]
   82b12:	4618      	mov	r0, r3
   82b14:	4b3b      	ldr	r3, [pc, #236]	; (82c04 <Cl_alarms_scanforAlarms+0x16bc>)
   82b16:	781b      	ldrb	r3, [r3, #0]
   82b18:	b299      	uxth	r1, r3
   82b1a:	4a3d      	ldr	r2, [pc, #244]	; (82c10 <Cl_alarms_scanforAlarms+0x16c8>)
   82b1c:	1c43      	adds	r3, r0, #1
   82b1e:	00db      	lsls	r3, r3, #3
   82b20:	4413      	add	r3, r2
   82b22:	460a      	mov	r2, r1
   82b24:	809a      	strh	r2, [r3, #4]
						Cl_alarms_alarms[dac_cond_alarm].cl_detected_count++;
   82b26:	4b37      	ldr	r3, [pc, #220]	; (82c04 <Cl_alarms_scanforAlarms+0x16bc>)
   82b28:	781b      	ldrb	r3, [r3, #0]
   82b2a:	4934      	ldr	r1, [pc, #208]	; (82bfc <Cl_alarms_scanforAlarms+0x16b4>)
   82b2c:	011a      	lsls	r2, r3, #4
   82b2e:	440a      	add	r2, r1
   82b30:	3208      	adds	r2, #8
   82b32:	7952      	ldrb	r2, [r2, #5]
   82b34:	3201      	adds	r2, #1
   82b36:	b2d1      	uxtb	r1, r2
   82b38:	4a30      	ldr	r2, [pc, #192]	; (82bfc <Cl_alarms_scanforAlarms+0x16b4>)
   82b3a:	011b      	lsls	r3, r3, #4
   82b3c:	4413      	add	r3, r2
   82b3e:	3308      	adds	r3, #8
   82b40:	460a      	mov	r2, r1
   82b42:	715a      	strb	r2, [r3, #5]
						cl_alarm_triggered = true;
   82b44:	4b2e      	ldr	r3, [pc, #184]	; (82c00 <Cl_alarms_scanforAlarms+0x16b8>)
   82b46:	2201      	movs	r2, #1
   82b48:	701a      	strb	r2, [r3, #0]
						cl_lastalarmid = dac_cond_alarm;
   82b4a:	4b2e      	ldr	r3, [pc, #184]	; (82c04 <Cl_alarms_scanforAlarms+0x16bc>)
   82b4c:	781a      	ldrb	r2, [r3, #0]
   82b4e:	4b31      	ldr	r3, [pc, #196]	; (82c14 <Cl_alarms_scanforAlarms+0x16cc>)
   82b50:	701a      	strb	r2, [r3, #0]
						Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   82b52:	4b2f      	ldr	r3, [pc, #188]	; (82c10 <Cl_alarms_scanforAlarms+0x16c8>)
   82b54:	781b      	ldrb	r3, [r3, #0]
   82b56:	461a      	mov	r2, r3
   82b58:	4b2d      	ldr	r3, [pc, #180]	; (82c10 <Cl_alarms_scanforAlarms+0x16c8>)
   82b5a:	4413      	add	r3, r2
   82b5c:	222e      	movs	r2, #46	; 0x2e
   82b5e:	709a      	strb	r2, [r3, #2]
						Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   82b60:	4b2d      	ldr	r3, [pc, #180]	; (82c18 <Cl_alarms_scanforAlarms+0x16d0>)
   82b62:	4798      	blx	r3
   82b64:	4603      	mov	r3, r0
   82b66:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_alarms_retcode);
   82b68:	79fb      	ldrb	r3, [r7, #7]
   82b6a:	2b00      	cmp	r3, #0
   82b6c:	d002      	beq.n	82b74 <Cl_alarms_scanforAlarms+0x162c>
   82b6e:	4b27      	ldr	r3, [pc, #156]	; (82c0c <Cl_alarms_scanforAlarms+0x16c4>)
   82b70:	4798      	blx	r3
					break;
   82b72:	e054      	b.n	82c1e <Cl_alarms_scanforAlarms+0x16d6>
   82b74:	e053      	b.n	82c1e <Cl_alarms_scanforAlarms+0x16d6>
					case COND_DAC_HIGH:
						Cl_alarms_alarms[dac_cond_alarm].cl_alarmstate = CL_ALARM_DETECTED;
   82b76:	4b23      	ldr	r3, [pc, #140]	; (82c04 <Cl_alarms_scanforAlarms+0x16bc>)
   82b78:	781b      	ldrb	r3, [r3, #0]
   82b7a:	4a20      	ldr	r2, [pc, #128]	; (82bfc <Cl_alarms_scanforAlarms+0x16b4>)
   82b7c:	011b      	lsls	r3, r3, #4
   82b7e:	4413      	add	r3, r2
   82b80:	2201      	movs	r2, #1
   82b82:	709a      	strb	r2, [r3, #2]
						Cl_alarms_alarms[COND_DAC_OPEN].cl_alarmstate = CL_ALARM_INACTIVE;
   82b84:	4b1d      	ldr	r3, [pc, #116]	; (82bfc <Cl_alarms_scanforAlarms+0x16b4>)
   82b86:	2204      	movs	r2, #4
   82b88:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
						Cl_alarms_alarms[COND_DAC_RO].cl_alarmstate = CL_ALARM_INACTIVE;
   82b8c:	4b1b      	ldr	r3, [pc, #108]	; (82bfc <Cl_alarms_scanforAlarms+0x16b4>)
   82b8e:	2204      	movs	r2, #4
   82b90:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
						Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=dac_cond_alarm;
   82b94:	4b1e      	ldr	r3, [pc, #120]	; (82c10 <Cl_alarms_scanforAlarms+0x16c8>)
   82b96:	781b      	ldrb	r3, [r3, #0]
   82b98:	4618      	mov	r0, r3
   82b9a:	4b1a      	ldr	r3, [pc, #104]	; (82c04 <Cl_alarms_scanforAlarms+0x16bc>)
   82b9c:	781b      	ldrb	r3, [r3, #0]
   82b9e:	b299      	uxth	r1, r3
   82ba0:	4a1b      	ldr	r2, [pc, #108]	; (82c10 <Cl_alarms_scanforAlarms+0x16c8>)
   82ba2:	1c43      	adds	r3, r0, #1
   82ba4:	00db      	lsls	r3, r3, #3
   82ba6:	4413      	add	r3, r2
   82ba8:	460a      	mov	r2, r1
   82baa:	809a      	strh	r2, [r3, #4]
						Cl_alarms_alarms[dac_cond_alarm].cl_detected_count++;
   82bac:	4b15      	ldr	r3, [pc, #84]	; (82c04 <Cl_alarms_scanforAlarms+0x16bc>)
   82bae:	781b      	ldrb	r3, [r3, #0]
   82bb0:	4912      	ldr	r1, [pc, #72]	; (82bfc <Cl_alarms_scanforAlarms+0x16b4>)
   82bb2:	011a      	lsls	r2, r3, #4
   82bb4:	440a      	add	r2, r1
   82bb6:	3208      	adds	r2, #8
   82bb8:	7952      	ldrb	r2, [r2, #5]
   82bba:	3201      	adds	r2, #1
   82bbc:	b2d1      	uxtb	r1, r2
   82bbe:	4a0f      	ldr	r2, [pc, #60]	; (82bfc <Cl_alarms_scanforAlarms+0x16b4>)
   82bc0:	011b      	lsls	r3, r3, #4
   82bc2:	4413      	add	r3, r2
   82bc4:	3308      	adds	r3, #8
   82bc6:	460a      	mov	r2, r1
   82bc8:	715a      	strb	r2, [r3, #5]
						cl_alarm_triggered = true;
   82bca:	4b0d      	ldr	r3, [pc, #52]	; (82c00 <Cl_alarms_scanforAlarms+0x16b8>)
   82bcc:	2201      	movs	r2, #1
   82bce:	701a      	strb	r2, [r3, #0]
						cl_lastalarmid = dac_cond_alarm;
   82bd0:	4b0c      	ldr	r3, [pc, #48]	; (82c04 <Cl_alarms_scanforAlarms+0x16bc>)
   82bd2:	781a      	ldrb	r2, [r3, #0]
   82bd4:	4b0f      	ldr	r3, [pc, #60]	; (82c14 <Cl_alarms_scanforAlarms+0x16cc>)
   82bd6:	701a      	strb	r2, [r3, #0]
						Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   82bd8:	4b0d      	ldr	r3, [pc, #52]	; (82c10 <Cl_alarms_scanforAlarms+0x16c8>)
   82bda:	781b      	ldrb	r3, [r3, #0]
   82bdc:	461a      	mov	r2, r3
   82bde:	4b0c      	ldr	r3, [pc, #48]	; (82c10 <Cl_alarms_scanforAlarms+0x16c8>)
   82be0:	4413      	add	r3, r2
   82be2:	222e      	movs	r2, #46	; 0x2e
   82be4:	709a      	strb	r2, [r3, #2]
						Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   82be6:	4b0c      	ldr	r3, [pc, #48]	; (82c18 <Cl_alarms_scanforAlarms+0x16d0>)
   82be8:	4798      	blx	r3
   82bea:	4603      	mov	r3, r0
   82bec:	71fb      	strb	r3, [r7, #7]
						ASSERT_ERROR(Cl_alarms_retcode);
   82bee:	79fb      	ldrb	r3, [r7, #7]
   82bf0:	2b00      	cmp	r3, #0
   82bf2:	d013      	beq.n	82c1c <Cl_alarms_scanforAlarms+0x16d4>
   82bf4:	4b05      	ldr	r3, [pc, #20]	; (82c0c <Cl_alarms_scanforAlarms+0x16c4>)
   82bf6:	4798      	blx	r3

					break;
   82bf8:	e010      	b.n	82c1c <Cl_alarms_scanforAlarms+0x16d4>
   82bfa:	bf00      	nop
   82bfc:	20071d0c 	.word	0x20071d0c
   82c00:	20071739 	.word	0x20071739
   82c04:	20071738 	.word	0x20071738
   82c08:	00083205 	.word	0x00083205
   82c0c:	00088fc1 	.word	0x00088fc1
   82c10:	200722c0 	.word	0x200722c0
   82c14:	20072100 	.word	0x20072100
   82c18:	00082d91 	.word	0x00082d91
   82c1c:	bf00      	nop
			
		}
	}	*/


if (  gflow_en)//testing
   82c1e:	4b50      	ldr	r3, [pc, #320]	; (82d60 <Cl_alarms_scanforAlarms+0x1818>)
   82c20:	781b      	ldrb	r3, [r3, #0]
   82c22:	2b00      	cmp	r3, #0
   82c24:	f000 8097 	beq.w	82d56 <Cl_alarms_scanforAlarms+0x180e>
{
	if((Cl_alarms_alarms[FLOW_NO_FLOW].cl_is_enabled)|| (Cl_alarms_alarms[FLOW_LOW_FLOWRATE].cl_is_enabled)|| (Cl_alarms_alarms[FLOW_HIGH_FLOWRATE].cl_is_enabled))
   82c28:	4b4e      	ldr	r3, [pc, #312]	; (82d64 <Cl_alarms_scanforAlarms+0x181c>)
   82c2a:	f893 30ce 	ldrb.w	r3, [r3, #206]	; 0xce
   82c2e:	2b00      	cmp	r3, #0
   82c30:	d10a      	bne.n	82c48 <Cl_alarms_scanforAlarms+0x1700>
   82c32:	4b4c      	ldr	r3, [pc, #304]	; (82d64 <Cl_alarms_scanforAlarms+0x181c>)
   82c34:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
   82c38:	2b00      	cmp	r3, #0
   82c3a:	d105      	bne.n	82c48 <Cl_alarms_scanforAlarms+0x1700>
   82c3c:	4b49      	ldr	r3, [pc, #292]	; (82d64 <Cl_alarms_scanforAlarms+0x181c>)
   82c3e:	f893 30ee 	ldrb.w	r3, [r3, #238]	; 0xee
   82c42:	2b00      	cmp	r3, #0
   82c44:	f000 8087 	beq.w	82d56 <Cl_alarms_scanforAlarms+0x180e>
	{

		if(cl_sys_statbuffer.Flowstatus != prev_flowstatus )
   82c48:	4b47      	ldr	r3, [pc, #284]	; (82d68 <Cl_alarms_scanforAlarms+0x1820>)
   82c4a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
   82c4c:	461a      	mov	r2, r3
   82c4e:	4b47      	ldr	r3, [pc, #284]	; (82d6c <Cl_alarms_scanforAlarms+0x1824>)
   82c50:	681b      	ldr	r3, [r3, #0]
   82c52:	429a      	cmp	r2, r3
   82c54:	d00c      	beq.n	82c70 <Cl_alarms_scanforAlarms+0x1728>
		{
			// flow_watchdog = 1000000 ;
			 flow_watchdog = 0 ;
   82c56:	4b46      	ldr	r3, [pc, #280]	; (82d70 <Cl_alarms_scanforAlarms+0x1828>)
   82c58:	2200      	movs	r2, #0
   82c5a:	601a      	str	r2, [r3, #0]
			 flow_count++;
   82c5c:	4b45      	ldr	r3, [pc, #276]	; (82d74 <Cl_alarms_scanforAlarms+0x182c>)
   82c5e:	681b      	ldr	r3, [r3, #0]
   82c60:	3301      	adds	r3, #1
   82c62:	4a44      	ldr	r2, [pc, #272]	; (82d74 <Cl_alarms_scanforAlarms+0x182c>)
   82c64:	6013      	str	r3, [r2, #0]
			 flow_count_rate++;
   82c66:	4b44      	ldr	r3, [pc, #272]	; (82d78 <Cl_alarms_scanforAlarms+0x1830>)
   82c68:	681b      	ldr	r3, [r3, #0]
   82c6a:	3301      	adds	r3, #1
   82c6c:	4a42      	ldr	r2, [pc, #264]	; (82d78 <Cl_alarms_scanforAlarms+0x1830>)
   82c6e:	6013      	str	r3, [r2, #0]
		//	if(flow_watchdog > 0)
		//	flow_watchdog--;
		}
		
			//if(flow_watchdog < 999400)static Cl_Uint32Type flowstatus_off_alarm_count = 0;static Cl_Uint32Type flowstatus_off_alarm_count = 0;
			if(flow_watchdog > 40 )
   82c70:	4b3f      	ldr	r3, [pc, #252]	; (82d70 <Cl_alarms_scanforAlarms+0x1828>)
   82c72:	681b      	ldr	r3, [r3, #0]
   82c74:	2b28      	cmp	r3, #40	; 0x28
   82c76:	d932      	bls.n	82cde <Cl_alarms_scanforAlarms+0x1796>
			{
				if(Cl_alarms_alarms[FLOW_NO_FLOW].cl_alarmstate != CL_ALARM_DETECTED)
   82c78:	4b3a      	ldr	r3, [pc, #232]	; (82d64 <Cl_alarms_scanforAlarms+0x181c>)
   82c7a:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
   82c7e:	2b01      	cmp	r3, #1
   82c80:	d02d      	beq.n	82cde <Cl_alarms_scanforAlarms+0x1796>
				{
					Cl_alarms_alarms[FLOW_NO_FLOW].cl_alarmstate = CL_ALARM_DETECTED;
   82c82:	4b38      	ldr	r3, [pc, #224]	; (82d64 <Cl_alarms_scanforAlarms+0x181c>)
   82c84:	2201      	movs	r2, #1
   82c86:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
					Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=FLOW_NO_FLOW;
   82c8a:	4b3c      	ldr	r3, [pc, #240]	; (82d7c <Cl_alarms_scanforAlarms+0x1834>)
   82c8c:	781b      	ldrb	r3, [r3, #0]
   82c8e:	4a3b      	ldr	r2, [pc, #236]	; (82d7c <Cl_alarms_scanforAlarms+0x1834>)
   82c90:	3301      	adds	r3, #1
   82c92:	00db      	lsls	r3, r3, #3
   82c94:	4413      	add	r3, r2
   82c96:	220c      	movs	r2, #12
   82c98:	809a      	strh	r2, [r3, #4]
					Cl_alarms_alarms[FLOW_NO_FLOW].cl_detected_count++;
   82c9a:	4b32      	ldr	r3, [pc, #200]	; (82d64 <Cl_alarms_scanforAlarms+0x181c>)
   82c9c:	f893 30cd 	ldrb.w	r3, [r3, #205]	; 0xcd
   82ca0:	3301      	adds	r3, #1
   82ca2:	b2da      	uxtb	r2, r3
   82ca4:	4b2f      	ldr	r3, [pc, #188]	; (82d64 <Cl_alarms_scanforAlarms+0x181c>)
   82ca6:	f883 20cd 	strb.w	r2, [r3, #205]	; 0xcd
					
					Cl_alarms_alarms[FLOW_NO_FLOW].cl_alarmstate = CL_ALARM_INACTIVE;
   82caa:	4b2e      	ldr	r3, [pc, #184]	; (82d64 <Cl_alarms_scanforAlarms+0x181c>)
   82cac:	2204      	movs	r2, #4
   82cae:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
				
					cl_alarm_triggered = true;
   82cb2:	4b33      	ldr	r3, [pc, #204]	; (82d80 <Cl_alarms_scanforAlarms+0x1838>)
   82cb4:	2201      	movs	r2, #1
   82cb6:	701a      	strb	r2, [r3, #0]
					
					cl_lastalarmid = FLOW_NO_FLOW;
   82cb8:	4b32      	ldr	r3, [pc, #200]	; (82d84 <Cl_alarms_scanforAlarms+0x183c>)
   82cba:	220c      	movs	r2, #12
   82cbc:	701a      	strb	r2, [r3, #0]
			//		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"FLOW_OFF",8);
					
					Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALERT_TRIGGERED ;
   82cbe:	4b2f      	ldr	r3, [pc, #188]	; (82d7c <Cl_alarms_scanforAlarms+0x1834>)
   82cc0:	781b      	ldrb	r3, [r3, #0]
   82cc2:	461a      	mov	r2, r3
   82cc4:	4b2d      	ldr	r3, [pc, #180]	; (82d7c <Cl_alarms_scanforAlarms+0x1834>)
   82cc6:	4413      	add	r3, r2
   82cc8:	222d      	movs	r2, #45	; 0x2d
   82cca:	709a      	strb	r2, [r3, #2]
					Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   82ccc:	4b2e      	ldr	r3, [pc, #184]	; (82d88 <Cl_alarms_scanforAlarms+0x1840>)
   82cce:	4798      	blx	r3
   82cd0:	4603      	mov	r3, r0
   82cd2:	71fb      	strb	r3, [r7, #7]
					ASSERT_ERROR(Cl_alarms_retcode);
   82cd4:	79fb      	ldrb	r3, [r7, #7]
   82cd6:	2b00      	cmp	r3, #0
   82cd8:	d001      	beq.n	82cde <Cl_alarms_scanforAlarms+0x1796>
   82cda:	4b2c      	ldr	r3, [pc, #176]	; (82d8c <Cl_alarms_scanforAlarms+0x1844>)
   82cdc:	4798      	blx	r3
					
				}
			}
			if(flow_count  > 2)
   82cde:	4b25      	ldr	r3, [pc, #148]	; (82d74 <Cl_alarms_scanforAlarms+0x182c>)
   82ce0:	681b      	ldr	r3, [r3, #0]
   82ce2:	2b02      	cmp	r3, #2
   82ce4:	d932      	bls.n	82d4c <Cl_alarms_scanforAlarms+0x1804>
			{
				
				
				
				if(Cl_alarms_alarms[FLOW_HIGH_FLOWRATE].cl_alarmstate != CL_ALARM_DETECTED)
   82ce6:	4b1f      	ldr	r3, [pc, #124]	; (82d64 <Cl_alarms_scanforAlarms+0x181c>)
   82ce8:	f893 30e2 	ldrb.w	r3, [r3, #226]	; 0xe2
   82cec:	2b01      	cmp	r3, #1
   82cee:	d02d      	beq.n	82d4c <Cl_alarms_scanforAlarms+0x1804>
				{
					Cl_alarms_alarms[FLOW_HIGH_FLOWRATE].cl_alarmstate = CL_ALARM_DETECTED;
   82cf0:	4b1c      	ldr	r3, [pc, #112]	; (82d64 <Cl_alarms_scanforAlarms+0x181c>)
   82cf2:	2201      	movs	r2, #1
   82cf4:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
					Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=FLOW_HIGH_FLOWRATE;
   82cf8:	4b20      	ldr	r3, [pc, #128]	; (82d7c <Cl_alarms_scanforAlarms+0x1834>)
   82cfa:	781b      	ldrb	r3, [r3, #0]
   82cfc:	4a1f      	ldr	r2, [pc, #124]	; (82d7c <Cl_alarms_scanforAlarms+0x1834>)
   82cfe:	3301      	adds	r3, #1
   82d00:	00db      	lsls	r3, r3, #3
   82d02:	4413      	add	r3, r2
   82d04:	220e      	movs	r2, #14
   82d06:	809a      	strh	r2, [r3, #4]
					Cl_alarms_alarms[FLOW_HIGH_FLOWRATE].cl_detected_count++;
   82d08:	4b16      	ldr	r3, [pc, #88]	; (82d64 <Cl_alarms_scanforAlarms+0x181c>)
   82d0a:	f893 30ed 	ldrb.w	r3, [r3, #237]	; 0xed
   82d0e:	3301      	adds	r3, #1
   82d10:	b2da      	uxtb	r2, r3
   82d12:	4b14      	ldr	r3, [pc, #80]	; (82d64 <Cl_alarms_scanforAlarms+0x181c>)
   82d14:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
					
					Cl_alarms_alarms[FLOW_HIGH_FLOWRATE].cl_alarmstate = CL_ALARM_INACTIVE;
   82d18:	4b12      	ldr	r3, [pc, #72]	; (82d64 <Cl_alarms_scanforAlarms+0x181c>)
   82d1a:	2204      	movs	r2, #4
   82d1c:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
					
					cl_alarm_triggered = true;
   82d20:	4b17      	ldr	r3, [pc, #92]	; (82d80 <Cl_alarms_scanforAlarms+0x1838>)
   82d22:	2201      	movs	r2, #1
   82d24:	701a      	strb	r2, [r3, #0]
					
					cl_lastalarmid = FLOW_HIGH_FLOWRATE;
   82d26:	4b17      	ldr	r3, [pc, #92]	; (82d84 <Cl_alarms_scanforAlarms+0x183c>)
   82d28:	220e      	movs	r2, #14
   82d2a:	701a      	strb	r2, [r3, #0]
					Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALERT_TRIGGERED ;
   82d2c:	4b13      	ldr	r3, [pc, #76]	; (82d7c <Cl_alarms_scanforAlarms+0x1834>)
   82d2e:	781b      	ldrb	r3, [r3, #0]
   82d30:	461a      	mov	r2, r3
   82d32:	4b12      	ldr	r3, [pc, #72]	; (82d7c <Cl_alarms_scanforAlarms+0x1834>)
   82d34:	4413      	add	r3, r2
   82d36:	222d      	movs	r2, #45	; 0x2d
   82d38:	709a      	strb	r2, [r3, #2]
					Cl_alarms_retcode =  Cl_UpdateMacAlarmEventTable();
   82d3a:	4b13      	ldr	r3, [pc, #76]	; (82d88 <Cl_alarms_scanforAlarms+0x1840>)
   82d3c:	4798      	blx	r3
   82d3e:	4603      	mov	r3, r0
   82d40:	71fb      	strb	r3, [r7, #7]
					ASSERT_ERROR(Cl_alarms_retcode);
   82d42:	79fb      	ldrb	r3, [r7, #7]
   82d44:	2b00      	cmp	r3, #0
   82d46:	d001      	beq.n	82d4c <Cl_alarms_scanforAlarms+0x1804>
   82d48:	4b10      	ldr	r3, [pc, #64]	; (82d8c <Cl_alarms_scanforAlarms+0x1844>)
   82d4a:	4798      	blx	r3
					
				}
				
			}
		
		prev_flowstatus = cl_sys_statbuffer.Flowstatus;
   82d4c:	4b06      	ldr	r3, [pc, #24]	; (82d68 <Cl_alarms_scanforAlarms+0x1820>)
   82d4e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
   82d50:	461a      	mov	r2, r3
   82d52:	4b06      	ldr	r3, [pc, #24]	; (82d6c <Cl_alarms_scanforAlarms+0x1824>)
   82d54:	601a      	str	r2, [r3, #0]

	}
}
	
				 
		return CL_OK;
   82d56:	2300      	movs	r3, #0
}
   82d58:	4618      	mov	r0, r3
   82d5a:	3708      	adds	r7, #8
   82d5c:	46bd      	mov	sp, r7
   82d5e:	bd80      	pop	{r7, pc}
   82d60:	20071a69 	.word	0x20071a69
   82d64:	20071d0c 	.word	0x20071d0c
   82d68:	20072224 	.word	0x20072224
   82d6c:	20071728 	.word	0x20071728
   82d70:	2007172c 	.word	0x2007172c
   82d74:	20071730 	.word	0x20071730
   82d78:	20071734 	.word	0x20071734
   82d7c:	200722c0 	.word	0x200722c0
   82d80:	20071739 	.word	0x20071739
   82d84:	20072100 	.word	0x20072100
   82d88:	00082d91 	.word	0x00082d91
   82d8c:	00088fc1 	.word	0x00088fc1

00082d90 <Cl_UpdateMacAlarmEventTable>:
 * \return CL_OK on success. 
 * \Globals used : Cl_MacEventQueue1
 */

Cl_ReturnCodeType Cl_UpdateMacAlarmEventTable(void)
{
   82d90:	b480      	push	{r7}
   82d92:	af00      	add	r7, sp, #0
		Cl_MacEventQueue1.Cl_MacNewEvent = true;
		Cl_MacEventQueue1.Cl_MacNewEventcount++;
	}
	*/
	
	if((cl_alarm_triggered == true) &&( Cl_MacEventQueue4.Cl_MacNewEventcount < MAC_EVENT_COUNT_MAX ))
   82d94:	4b0b      	ldr	r3, [pc, #44]	; (82dc4 <Cl_UpdateMacAlarmEventTable+0x34>)
   82d96:	781b      	ldrb	r3, [r3, #0]
   82d98:	2b00      	cmp	r3, #0
   82d9a:	d00c      	beq.n	82db6 <Cl_UpdateMacAlarmEventTable+0x26>
   82d9c:	4b0a      	ldr	r3, [pc, #40]	; (82dc8 <Cl_UpdateMacAlarmEventTable+0x38>)
   82d9e:	781b      	ldrb	r3, [r3, #0]
   82da0:	2b09      	cmp	r3, #9
   82da2:	d808      	bhi.n	82db6 <Cl_UpdateMacAlarmEventTable+0x26>


	{
		Cl_MacEventQueue4.Cl_MacNewEvent = true;
   82da4:	4b08      	ldr	r3, [pc, #32]	; (82dc8 <Cl_UpdateMacAlarmEventTable+0x38>)
   82da6:	2201      	movs	r2, #1
   82da8:	705a      	strb	r2, [r3, #1]
		Cl_MacEventQueue4.Cl_MacNewEventcount++;
   82daa:	4b07      	ldr	r3, [pc, #28]	; (82dc8 <Cl_UpdateMacAlarmEventTable+0x38>)
   82dac:	781b      	ldrb	r3, [r3, #0]
   82dae:	3301      	adds	r3, #1
   82db0:	b2da      	uxtb	r2, r3
   82db2:	4b05      	ldr	r3, [pc, #20]	; (82dc8 <Cl_UpdateMacAlarmEventTable+0x38>)
   82db4:	701a      	strb	r2, [r3, #0]
	}
	
return CL_OK;
   82db6:	2300      	movs	r3, #0
}
   82db8:	4618      	mov	r0, r3
   82dba:	46bd      	mov	sp, r7
   82dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
   82dc0:	4770      	bx	lr
   82dc2:	bf00      	nop
   82dc4:	20071739 	.word	0x20071739
   82dc8:	200722c0 	.word	0x200722c0

00082dcc <Cl_UpdateMacBCEventTable>:


Cl_ReturnCodeType Cl_UpdateMacBCEventTable(void)
{
   82dcc:	b480      	push	{r7}
   82dce:	af00      	add	r7, sp, #0
		Cl_MacEventQueue1.Cl_MacNewEvent = true;
		Cl_MacEventQueue1.Cl_MacNewEventcount++;
	}
	*/
	
	if((cl_alarm_triggered == true) &&( Cl_MacEventQueueBc.Cl_MacNewEventcount < MAC_EVENT_COUNT_MAX ))
   82dd0:	4b0b      	ldr	r3, [pc, #44]	; (82e00 <Cl_UpdateMacBCEventTable+0x34>)
   82dd2:	781b      	ldrb	r3, [r3, #0]
   82dd4:	2b00      	cmp	r3, #0
   82dd6:	d00c      	beq.n	82df2 <Cl_UpdateMacBCEventTable+0x26>
   82dd8:	4b0a      	ldr	r3, [pc, #40]	; (82e04 <Cl_UpdateMacBCEventTable+0x38>)
   82dda:	781b      	ldrb	r3, [r3, #0]
   82ddc:	2b09      	cmp	r3, #9
   82dde:	d808      	bhi.n	82df2 <Cl_UpdateMacBCEventTable+0x26>


	{
		Cl_MacEventQueueBc.Cl_MacNewEvent = true;
   82de0:	4b08      	ldr	r3, [pc, #32]	; (82e04 <Cl_UpdateMacBCEventTable+0x38>)
   82de2:	2201      	movs	r2, #1
   82de4:	705a      	strb	r2, [r3, #1]
		Cl_MacEventQueueBc.Cl_MacNewEventcount++;
   82de6:	4b07      	ldr	r3, [pc, #28]	; (82e04 <Cl_UpdateMacBCEventTable+0x38>)
   82de8:	781b      	ldrb	r3, [r3, #0]
   82dea:	3301      	adds	r3, #1
   82dec:	b2da      	uxtb	r2, r3
   82dee:	4b05      	ldr	r3, [pc, #20]	; (82e04 <Cl_UpdateMacBCEventTable+0x38>)
   82df0:	701a      	strb	r2, [r3, #0]
	}
	
return CL_OK;
   82df2:	2300      	movs	r3, #0
}
   82df4:	4618      	mov	r0, r3
   82df6:	46bd      	mov	sp, r7
   82df8:	f85d 7b04 	ldr.w	r7, [sp], #4
   82dfc:	4770      	bx	lr
   82dfe:	bf00      	nop
   82e00:	20071739 	.word	0x20071739
   82e04:	200724e4 	.word	0x200724e4

00082e08 <Cl_AlarmConfigureAlarmType>:
 * \ 
 * \return CL_OK on success. 
 * \Globals used : Cl_alarms_alarms
 */
Cl_ReturnCodeType Cl_AlarmConfigureAlarmType(Cl_NewAlarmIdType cl_alarm_id , Cl_AlarmTriggerType alarmtriggertype,float cl_upper,float  cl_lower,Cl_Uint8Type  count_threshold )
{
   82e08:	b480      	push	{r7}
   82e0a:	b085      	sub	sp, #20
   82e0c:	af00      	add	r7, sp, #0
   82e0e:	60ba      	str	r2, [r7, #8]
   82e10:	607b      	str	r3, [r7, #4]
   82e12:	4603      	mov	r3, r0
   82e14:	73fb      	strb	r3, [r7, #15]
   82e16:	460b      	mov	r3, r1
   82e18:	73bb      	strb	r3, [r7, #14]
	
Cl_alarms_alarms[cl_alarm_id].cl_triggertype = alarmtriggertype;
   82e1a:	7bfb      	ldrb	r3, [r7, #15]
   82e1c:	4a0f      	ldr	r2, [pc, #60]	; (82e5c <Cl_AlarmConfigureAlarmType+0x54>)
   82e1e:	011b      	lsls	r3, r3, #4
   82e20:	4413      	add	r3, r2
   82e22:	7bba      	ldrb	r2, [r7, #14]
   82e24:	705a      	strb	r2, [r3, #1]
Cl_alarms_alarms[cl_alarm_id].cl_lower = cl_lower;
   82e26:	7bfb      	ldrb	r3, [r7, #15]
   82e28:	4a0c      	ldr	r2, [pc, #48]	; (82e5c <Cl_AlarmConfigureAlarmType+0x54>)
   82e2a:	011b      	lsls	r3, r3, #4
   82e2c:	4413      	add	r3, r2
   82e2e:	3308      	adds	r3, #8
   82e30:	687a      	ldr	r2, [r7, #4]
   82e32:	601a      	str	r2, [r3, #0]
Cl_alarms_alarms[cl_alarm_id].cl_upper = cl_upper;
   82e34:	7bfb      	ldrb	r3, [r7, #15]
   82e36:	4a09      	ldr	r2, [pc, #36]	; (82e5c <Cl_AlarmConfigureAlarmType+0x54>)
   82e38:	011b      	lsls	r3, r3, #4
   82e3a:	4413      	add	r3, r2
   82e3c:	68ba      	ldr	r2, [r7, #8]
   82e3e:	605a      	str	r2, [r3, #4]
Cl_alarms_alarms[cl_alarm_id].count_threshold = count_threshold;
   82e40:	7bfb      	ldrb	r3, [r7, #15]
   82e42:	4a06      	ldr	r2, [pc, #24]	; (82e5c <Cl_AlarmConfigureAlarmType+0x54>)
   82e44:	011b      	lsls	r3, r3, #4
   82e46:	4413      	add	r3, r2
   82e48:	3308      	adds	r3, #8
   82e4a:	7e3a      	ldrb	r2, [r7, #24]
   82e4c:	711a      	strb	r2, [r3, #4]

return CL_OK;
   82e4e:	2300      	movs	r3, #0
		
}
   82e50:	4618      	mov	r0, r3
   82e52:	3714      	adds	r7, #20
   82e54:	46bd      	mov	sp, r7
   82e56:	f85d 7b04 	ldr.w	r7, [sp], #4
   82e5a:	4770      	bx	lr
   82e5c:	20071d0c 	.word	0x20071d0c

00082e60 <Cl_AlarmActivateAlarms>:
 * \ 
 * \return CL_OK on success. 
 * \Globals used : Cl_alarms_alarms
 */
Cl_ReturnCodeType Cl_AlarmActivateAlarms(Cl_NewAlarmIdType cl_alarm_id , Cl_BoolType status )
{
   82e60:	b580      	push	{r7, lr}
   82e62:	b084      	sub	sp, #16
   82e64:	af00      	add	r7, sp, #0
   82e66:	4603      	mov	r3, r0
   82e68:	460a      	mov	r2, r1
   82e6a:	71fb      	strb	r3, [r7, #7]
   82e6c:	4613      	mov	r3, r2
   82e6e:	71bb      	strb	r3, [r7, #6]
	Cl_ReturnCodeType cl_AlarmRetCode = CL_OK;
   82e70:	2300      	movs	r3, #0
   82e72:	73fb      	strb	r3, [r7, #15]
	
	if((cl_alarm_id > _NO_ALARM) && (cl_alarm_id < _ALARM_MAX_ID))
   82e74:	79fb      	ldrb	r3, [r7, #7]
   82e76:	2b00      	cmp	r3, #0
   82e78:	d057      	beq.n	82f2a <Cl_AlarmActivateAlarms+0xca>
   82e7a:	79fb      	ldrb	r3, [r7, #7]
   82e7c:	2b3e      	cmp	r3, #62	; 0x3e
   82e7e:	d854      	bhi.n	82f2a <Cl_AlarmActivateAlarms+0xca>
	{

	if (	(cl_alarm_id == LEVELSWITCH_OFF_TO_ON) || (cl_alarm_id == LEVELSWITCH_ON_TO_OFF) || (cl_alarm_id == FPCURRENTSTATUS))
   82e80:	79fb      	ldrb	r3, [r7, #7]
   82e82:	2b3d      	cmp	r3, #61	; 0x3d
   82e84:	d005      	beq.n	82e92 <Cl_AlarmActivateAlarms+0x32>
   82e86:	79fb      	ldrb	r3, [r7, #7]
   82e88:	2b3e      	cmp	r3, #62	; 0x3e
   82e8a:	d002      	beq.n	82e92 <Cl_AlarmActivateAlarms+0x32>
   82e8c:	79fb      	ldrb	r3, [r7, #7]
   82e8e:	2b3c      	cmp	r3, #60	; 0x3c
   82e90:	d113      	bne.n	82eba <Cl_AlarmActivateAlarms+0x5a>
			{
				Cl_alarms_alarms[cl_alarm_id].cl_is_enabled = true;
   82e92:	79fb      	ldrb	r3, [r7, #7]
   82e94:	4a2b      	ldr	r2, [pc, #172]	; (82f44 <Cl_AlarmActivateAlarms+0xe4>)
   82e96:	011b      	lsls	r3, r3, #4
   82e98:	4413      	add	r3, r2
   82e9a:	3308      	adds	r3, #8
   82e9c:	2201      	movs	r2, #1
   82e9e:	719a      	strb	r2, [r3, #6]
				Cl_alarms_alarms[cl_alarm_id].cl_alarmstate = CL_ALARM_ACTIVE;
   82ea0:	79fb      	ldrb	r3, [r7, #7]
   82ea2:	4a28      	ldr	r2, [pc, #160]	; (82f44 <Cl_AlarmActivateAlarms+0xe4>)
   82ea4:	011b      	lsls	r3, r3, #4
   82ea6:	4413      	add	r3, r2
   82ea8:	2202      	movs	r2, #2
   82eaa:	709a      	strb	r2, [r3, #2]
				Cl_alarms_alarms[cl_alarm_id].cl_detected_count = 0;
   82eac:	79fb      	ldrb	r3, [r7, #7]
   82eae:	4a25      	ldr	r2, [pc, #148]	; (82f44 <Cl_AlarmActivateAlarms+0xe4>)
   82eb0:	011b      	lsls	r3, r3, #4
   82eb2:	4413      	add	r3, r2
   82eb4:	3308      	adds	r3, #8
   82eb6:	2200      	movs	r2, #0
   82eb8:	715a      	strb	r2, [r3, #5]
				
			}
		if ( TEST_STUB_ENABLEGATE)
   82eba:	4b23      	ldr	r3, [pc, #140]	; (82f48 <Cl_AlarmActivateAlarms+0xe8>)
   82ebc:	781b      	ldrb	r3, [r3, #0]
   82ebe:	2b00      	cmp	r3, #0
   82ec0:	d032      	beq.n	82f28 <Cl_AlarmActivateAlarms+0xc8>
		{
			Cl_alarms_alarms[cl_alarm_id].cl_alarmID = cl_alarm_id;
   82ec2:	79fb      	ldrb	r3, [r7, #7]
   82ec4:	4a1f      	ldr	r2, [pc, #124]	; (82f44 <Cl_AlarmActivateAlarms+0xe4>)
   82ec6:	011b      	lsls	r3, r3, #4
   82ec8:	4413      	add	r3, r2
   82eca:	79fa      	ldrb	r2, [r7, #7]
   82ecc:	701a      	strb	r2, [r3, #0]
			if ( status == true)
   82ece:	79bb      	ldrb	r3, [r7, #6]
   82ed0:	2b00      	cmp	r3, #0
   82ed2:	d014      	beq.n	82efe <Cl_AlarmActivateAlarms+0x9e>
			{
				
				Cl_alarms_alarms[cl_alarm_id].cl_is_enabled = true;
   82ed4:	79fb      	ldrb	r3, [r7, #7]
   82ed6:	4a1b      	ldr	r2, [pc, #108]	; (82f44 <Cl_AlarmActivateAlarms+0xe4>)
   82ed8:	011b      	lsls	r3, r3, #4
   82eda:	4413      	add	r3, r2
   82edc:	3308      	adds	r3, #8
   82ede:	2201      	movs	r2, #1
   82ee0:	719a      	strb	r2, [r3, #6]
				Cl_alarms_alarms[cl_alarm_id].cl_alarmstate = CL_ALARM_ACTIVE;
   82ee2:	79fb      	ldrb	r3, [r7, #7]
   82ee4:	4a17      	ldr	r2, [pc, #92]	; (82f44 <Cl_AlarmActivateAlarms+0xe4>)
   82ee6:	011b      	lsls	r3, r3, #4
   82ee8:	4413      	add	r3, r2
   82eea:	2202      	movs	r2, #2
   82eec:	709a      	strb	r2, [r3, #2]
				Cl_alarms_alarms[cl_alarm_id].cl_detected_count = 0;
   82eee:	79fb      	ldrb	r3, [r7, #7]
   82ef0:	4a14      	ldr	r2, [pc, #80]	; (82f44 <Cl_AlarmActivateAlarms+0xe4>)
   82ef2:	011b      	lsls	r3, r3, #4
   82ef4:	4413      	add	r3, r2
   82ef6:	3308      	adds	r3, #8
   82ef8:	2200      	movs	r2, #0
   82efa:	715a      	strb	r2, [r3, #5]
   82efc:	e014      	b.n	82f28 <Cl_AlarmActivateAlarms+0xc8>
				
			}
			else
			{
				Cl_alarms_alarms[cl_alarm_id].cl_is_enabled = false;
   82efe:	79fb      	ldrb	r3, [r7, #7]
   82f00:	4a10      	ldr	r2, [pc, #64]	; (82f44 <Cl_AlarmActivateAlarms+0xe4>)
   82f02:	011b      	lsls	r3, r3, #4
   82f04:	4413      	add	r3, r2
   82f06:	3308      	adds	r3, #8
   82f08:	2200      	movs	r2, #0
   82f0a:	719a      	strb	r2, [r3, #6]
				Cl_alarms_alarms[cl_alarm_id].cl_alarmstate = CL_ALARM_INACTIVE;
   82f0c:	79fb      	ldrb	r3, [r7, #7]
   82f0e:	4a0d      	ldr	r2, [pc, #52]	; (82f44 <Cl_AlarmActivateAlarms+0xe4>)
   82f10:	011b      	lsls	r3, r3, #4
   82f12:	4413      	add	r3, r2
   82f14:	2204      	movs	r2, #4
   82f16:	709a      	strb	r2, [r3, #2]
				Cl_alarms_alarms[cl_alarm_id].cl_detected_count = 0;
   82f18:	79fb      	ldrb	r3, [r7, #7]
   82f1a:	4a0a      	ldr	r2, [pc, #40]	; (82f44 <Cl_AlarmActivateAlarms+0xe4>)
   82f1c:	011b      	lsls	r3, r3, #4
   82f1e:	4413      	add	r3, r2
   82f20:	3308      	adds	r3, #8
   82f22:	2200      	movs	r2, #0
   82f24:	715a      	strb	r2, [r3, #5]
				Cl_alarms_alarms[cl_alarm_id].cl_is_enabled = true;
				Cl_alarms_alarms[cl_alarm_id].cl_alarmstate = CL_ALARM_ACTIVE;
				Cl_alarms_alarms[cl_alarm_id].cl_detected_count = 0;
				
			}
		if ( TEST_STUB_ENABLEGATE)
   82f26:	e002      	b.n	82f2e <Cl_AlarmActivateAlarms+0xce>
   82f28:	e001      	b.n	82f2e <Cl_AlarmActivateAlarms+0xce>
		}
		
	}
	else
	{
		cl_AlarmRetCode = CL_ERROR;
   82f2a:	2304      	movs	r3, #4
   82f2c:	73fb      	strb	r3, [r7, #15]
	}
	
	

	ASSERT_ERROR(cl_AlarmRetCode);
   82f2e:	7bfb      	ldrb	r3, [r7, #15]
   82f30:	2b00      	cmp	r3, #0
   82f32:	d001      	beq.n	82f38 <Cl_AlarmActivateAlarms+0xd8>
   82f34:	4b05      	ldr	r3, [pc, #20]	; (82f4c <Cl_AlarmActivateAlarms+0xec>)
   82f36:	4798      	blx	r3
	
	return(cl_AlarmRetCode);
   82f38:	7bfb      	ldrb	r3, [r7, #15]
	
	
}
   82f3a:	4618      	mov	r0, r3
   82f3c:	3710      	adds	r7, #16
   82f3e:	46bd      	mov	sp, r7
   82f40:	bd80      	pop	{r7, pc}
   82f42:	bf00      	nop
   82f44:	20071d0c 	.word	0x20071d0c
   82f48:	20070a38 	.word	0x20070a38
   82f4c:	00088fc1 	.word	0x00088fc1

00082f50 <Cl_AlarmResetAlarm>:
 * \ 
 * \return CL_OK on success. 
 * \Globals used : Cl_alarms_alarms
 */
Cl_ReturnCodeType Cl_AlarmResetAlarm(Cl_NewAlarmIdType cl_alarm_id )
{
   82f50:	b480      	push	{r7}
   82f52:	b085      	sub	sp, #20
   82f54:	af00      	add	r7, sp, #0
   82f56:	4603      	mov	r3, r0
   82f58:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType cl_AlarmRetCode = CL_OK;
   82f5a:	2300      	movs	r3, #0
   82f5c:	73fb      	strb	r3, [r7, #15]
		if((cl_alarm_id > _NO_ALARM) && (cl_alarm_id < _ALARM_MAX_ID))
   82f5e:	79fb      	ldrb	r3, [r7, #7]
   82f60:	2b00      	cmp	r3, #0
   82f62:	d00b      	beq.n	82f7c <Cl_AlarmResetAlarm+0x2c>
   82f64:	79fb      	ldrb	r3, [r7, #7]
   82f66:	2b3e      	cmp	r3, #62	; 0x3e
   82f68:	d808      	bhi.n	82f7c <Cl_AlarmResetAlarm+0x2c>
		{
					
					{
						
						Cl_alarms_alarms[cl_alarm_id].cl_alarmstate = CL_ALARM_ACTIVE;
   82f6a:	79fb      	ldrb	r3, [r7, #7]
   82f6c:	4a08      	ldr	r2, [pc, #32]	; (82f90 <Cl_AlarmResetAlarm+0x40>)
   82f6e:	011b      	lsls	r3, r3, #4
   82f70:	4413      	add	r3, r2
   82f72:	2202      	movs	r2, #2
   82f74:	709a      	strb	r2, [r3, #2]
						cl_AlarmRetCode = CL_OK;
   82f76:	2300      	movs	r3, #0
   82f78:	73fb      	strb	r3, [r7, #15]
   82f7a:	e001      	b.n	82f80 <Cl_AlarmResetAlarm+0x30>
					}
			
		}else
		{
			 cl_AlarmRetCode = CL_ERROR;
   82f7c:	2304      	movs	r3, #4
   82f7e:	73fb      	strb	r3, [r7, #15]
		}
	
		
	
	return(cl_AlarmRetCode);
   82f80:	7bfb      	ldrb	r3, [r7, #15]
	
	
}
   82f82:	4618      	mov	r0, r3
   82f84:	3714      	adds	r7, #20
   82f86:	46bd      	mov	sp, r7
   82f88:	f85d 7b04 	ldr.w	r7, [sp], #4
   82f8c:	4770      	bx	lr
   82f8e:	bf00      	nop
   82f90:	20071d0c 	.word	0x20071d0c

00082f94 <Cl_CheckBcEvent>:
 * \return CL_OK on success. 
 * \Globals used : Cl_alarms_alarms
 */
  
  
 Cl_ReturnCodeType Cl_CheckBcEvent(){
   82f94:	b580      	push	{r7, lr}
   82f96:	af00      	add	r7, sp, #0

	 
	 if(Cl_alarms_alarms[FPCURRENTSTATUS].cl_is_enabled)
   82f98:	4b1f      	ldr	r3, [pc, #124]	; (83018 <Cl_CheckBcEvent+0x84>)
   82f9a:	f893 33ce 	ldrb.w	r3, [r3, #974]	; 0x3ce
   82f9e:	2b00      	cmp	r3, #0
   82fa0:	d038      	beq.n	83014 <Cl_CheckBcEvent+0x80>
	 {			//FPcurrentstatus_prev = cl_sys_statbuffer.FPcurrentstatus;
		 if(cl_sys_statbuffer.FPcurrentstatus == 1 && FPcurrentstatus_prev == 0 )
   82fa2:	4b1e      	ldr	r3, [pc, #120]	; (8301c <Cl_CheckBcEvent+0x88>)
   82fa4:	8b9b      	ldrh	r3, [r3, #28]
   82fa6:	2b01      	cmp	r3, #1
   82fa8:	d127      	bne.n	82ffa <Cl_CheckBcEvent+0x66>
   82faa:	4b1d      	ldr	r3, [pc, #116]	; (83020 <Cl_CheckBcEvent+0x8c>)
   82fac:	881b      	ldrh	r3, [r3, #0]
   82fae:	2b00      	cmp	r3, #0
   82fb0:	d123      	bne.n	82ffa <Cl_CheckBcEvent+0x66>
		 {
			 
			 
			 Cl_alarms_alarms[FPCURRENTSTATUS].cl_alarmstate = CL_ALARM_DETECTED;
   82fb2:	4b19      	ldr	r3, [pc, #100]	; (83018 <Cl_CheckBcEvent+0x84>)
   82fb4:	2201      	movs	r2, #1
   82fb6:	f883 23c2 	strb.w	r2, [r3, #962]	; 0x3c2
			 Cl_MacEventQueueBc.Cl_MacEventData[Cl_MacEventQueueBc.Cl_MacNewEventcount][0]=FPCURRENTSTATUS;
   82fba:	4b1a      	ldr	r3, [pc, #104]	; (83024 <Cl_CheckBcEvent+0x90>)
   82fbc:	781b      	ldrb	r3, [r3, #0]
   82fbe:	4a19      	ldr	r2, [pc, #100]	; (83024 <Cl_CheckBcEvent+0x90>)
   82fc0:	3301      	adds	r3, #1
   82fc2:	00db      	lsls	r3, r3, #3
   82fc4:	4413      	add	r3, r2
   82fc6:	223c      	movs	r2, #60	; 0x3c
   82fc8:	809a      	strh	r2, [r3, #4]
			 Cl_alarms_alarms[FPCURRENTSTATUS].cl_detected_count++;
   82fca:	4b13      	ldr	r3, [pc, #76]	; (83018 <Cl_CheckBcEvent+0x84>)
   82fcc:	f893 33cd 	ldrb.w	r3, [r3, #973]	; 0x3cd
   82fd0:	3301      	adds	r3, #1
   82fd2:	b2da      	uxtb	r2, r3
   82fd4:	4b10      	ldr	r3, [pc, #64]	; (83018 <Cl_CheckBcEvent+0x84>)
   82fd6:	f883 23cd 	strb.w	r2, [r3, #973]	; 0x3cd
			 cl_alarm_triggered = true;
   82fda:	4b13      	ldr	r3, [pc, #76]	; (83028 <Cl_CheckBcEvent+0x94>)
   82fdc:	2201      	movs	r2, #1
   82fde:	701a      	strb	r2, [r3, #0]
			 cl_lastalarmid = FPCURRENTSTATUS;
   82fe0:	4b12      	ldr	r3, [pc, #72]	; (8302c <Cl_CheckBcEvent+0x98>)
   82fe2:	223c      	movs	r2, #60	; 0x3c
   82fe4:	701a      	strb	r2, [r3, #0]
			// Cl_MacEventQueueBc.Cl_MacEvent[Cl_MacEventQueueBc.Cl_MacNewEventcount] = EVT_ALERT_TRIGGERED ;
			 //Cl_UpdateMacBCEventTable();
			// ASSERT_ERROR(Cl_alarms_retcode);
			 Cl_MacEventQueueBc.Cl_MacEvent[Cl_MacEventQueueBc.Cl_MacNewEventcount] = EVT_ALERT_CS ;
   82fe6:	4b0f      	ldr	r3, [pc, #60]	; (83024 <Cl_CheckBcEvent+0x90>)
   82fe8:	781b      	ldrb	r3, [r3, #0]
   82fea:	461a      	mov	r2, r3
   82fec:	4b0d      	ldr	r3, [pc, #52]	; (83024 <Cl_CheckBcEvent+0x90>)
   82fee:	4413      	add	r3, r2
   82ff0:	222f      	movs	r2, #47	; 0x2f
   82ff2:	709a      	strb	r2, [r3, #2]
			 Cl_UpdateMacBCEventTable();//Cl_UpdateMacAlarmEventTable();
   82ff4:	4b0e      	ldr	r3, [pc, #56]	; (83030 <Cl_CheckBcEvent+0x9c>)
   82ff6:	4798      	blx	r3
   82ff8:	e007      	b.n	8300a <Cl_CheckBcEvent+0x76>
			 
		 }
		 else
		 {

			 Cl_alarms_alarms[FPCURRENTSTATUS].cl_alarmstate = CL_ALARM_INACTIVE;
   82ffa:	4b07      	ldr	r3, [pc, #28]	; (83018 <Cl_CheckBcEvent+0x84>)
   82ffc:	2204      	movs	r2, #4
   82ffe:	f883 23c2 	strb.w	r2, [r3, #962]	; 0x3c2
			 Cl_alarms_alarms[FPCURRENTSTATUS].cl_detected_count = 0;
   83002:	4b05      	ldr	r3, [pc, #20]	; (83018 <Cl_CheckBcEvent+0x84>)
   83004:	2200      	movs	r2, #0
   83006:	f883 23cd 	strb.w	r2, [r3, #973]	; 0x3cd

			 
		 }
		 FPcurrentstatus_prev = cl_sys_statbuffer.FPcurrentstatus;
   8300a:	4b04      	ldr	r3, [pc, #16]	; (8301c <Cl_CheckBcEvent+0x88>)
   8300c:	8b9b      	ldrh	r3, [r3, #28]
   8300e:	b29a      	uxth	r2, r3
   83010:	4b03      	ldr	r3, [pc, #12]	; (83020 <Cl_CheckBcEvent+0x8c>)
   83012:	801a      	strh	r2, [r3, #0]
		 
	 }
	 
 }
   83014:	4618      	mov	r0, r3
   83016:	bd80      	pop	{r7, pc}
   83018:	20071d0c 	.word	0x20071d0c
   8301c:	20072224 	.word	0x20072224
   83020:	2007173a 	.word	0x2007173a
   83024:	200724e4 	.word	0x200724e4
   83028:	20071739 	.word	0x20071739
   8302c:	20072100 	.word	0x20072100
   83030:	00082dcd 	.word	0x00082dcd

00083034 <Cl_Alarm_GetAlarmStatus>:
 * \return CL_OK on success. 
 * \Globals used : Cl_alarms_alarms
 */
  
Cl_ReturnCodeType Cl_Alarm_GetAlarmStatus(Cl_NewAlarmIdType cl_alarm_id , Cl_BoolType* cl_status)
{
   83034:	b580      	push	{r7, lr}
   83036:	b084      	sub	sp, #16
   83038:	af00      	add	r7, sp, #0
   8303a:	4603      	mov	r3, r0
   8303c:	6039      	str	r1, [r7, #0]
   8303e:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType cl_alarmRetCode = CL_OK;
   83040:	2300      	movs	r3, #0
   83042:	73fb      	strb	r3, [r7, #15]
	
	if((cl_alarm_id > _NO_ALARM) && (cl_alarm_id < _ALARM_MAX_ID))
   83044:	79fb      	ldrb	r3, [r7, #7]
   83046:	2b00      	cmp	r3, #0
   83048:	d01a      	beq.n	83080 <Cl_Alarm_GetAlarmStatus+0x4c>
   8304a:	79fb      	ldrb	r3, [r7, #7]
   8304c:	2b3e      	cmp	r3, #62	; 0x3e
   8304e:	d817      	bhi.n	83080 <Cl_Alarm_GetAlarmStatus+0x4c>
	{
	
		 if (Cl_alarms_alarms[cl_alarm_id].cl_alarmstate  == CL_ALARM_DETECTED ||  Cl_alarms_alarms[cl_alarm_id].cl_alarmstate == CL_ALARM_MUTE) 
   83050:	79fb      	ldrb	r3, [r7, #7]
   83052:	4a11      	ldr	r2, [pc, #68]	; (83098 <Cl_Alarm_GetAlarmStatus+0x64>)
   83054:	011b      	lsls	r3, r3, #4
   83056:	4413      	add	r3, r2
   83058:	789b      	ldrb	r3, [r3, #2]
   8305a:	2b01      	cmp	r3, #1
   8305c:	d006      	beq.n	8306c <Cl_Alarm_GetAlarmStatus+0x38>
   8305e:	79fb      	ldrb	r3, [r7, #7]
   83060:	4a0d      	ldr	r2, [pc, #52]	; (83098 <Cl_Alarm_GetAlarmStatus+0x64>)
   83062:	011b      	lsls	r3, r3, #4
   83064:	4413      	add	r3, r2
   83066:	789b      	ldrb	r3, [r3, #2]
   83068:	2b03      	cmp	r3, #3
   8306a:	d103      	bne.n	83074 <Cl_Alarm_GetAlarmStatus+0x40>
		 {
			 *cl_status = true;
   8306c:	683b      	ldr	r3, [r7, #0]
   8306e:	2201      	movs	r2, #1
   83070:	701a      	strb	r2, [r3, #0]
   83072:	e002      	b.n	8307a <Cl_Alarm_GetAlarmStatus+0x46>
		 }
		 else
		 {
			 *cl_status = false;
   83074:	683b      	ldr	r3, [r7, #0]
   83076:	2200      	movs	r2, #0
   83078:	701a      	strb	r2, [r3, #0]
		 }
		 
		 cl_alarmRetCode = CL_OK;
   8307a:	2300      	movs	r3, #0
   8307c:	73fb      	strb	r3, [r7, #15]
   8307e:	e001      	b.n	83084 <Cl_Alarm_GetAlarmStatus+0x50>
	}else
	{
		cl_alarmRetCode = CL_ERROR;
   83080:	2304      	movs	r3, #4
   83082:	73fb      	strb	r3, [r7, #15]
	}
	 
		
	ASSERT_ERROR(cl_alarmRetCode);
   83084:	7bfb      	ldrb	r3, [r7, #15]
   83086:	2b00      	cmp	r3, #0
   83088:	d001      	beq.n	8308e <Cl_Alarm_GetAlarmStatus+0x5a>
   8308a:	4b04      	ldr	r3, [pc, #16]	; (8309c <Cl_Alarm_GetAlarmStatus+0x68>)
   8308c:	4798      	blx	r3
	return cl_alarmRetCode;
   8308e:	7bfb      	ldrb	r3, [r7, #15]
	
}
   83090:	4618      	mov	r0, r3
   83092:	3710      	adds	r7, #16
   83094:	46bd      	mov	sp, r7
   83096:	bd80      	pop	{r7, pc}
   83098:	20071d0c 	.word	0x20071d0c
   8309c:	00088fc1 	.word	0x00088fc1

000830a0 <Cl_Alarm_TriggerAlarm>:
 * \return CL_OK on success. 
 * \Globals used : Cl_alarms_alarms,Cl_MacEventQueue1
 */

Cl_ReturnCodeType Cl_Alarm_TriggerAlarm(Cl_NewAlarmIdType cl_alarm_id , Cl_BoolType cl_status)
{
   830a0:	b580      	push	{r7, lr}
   830a2:	b084      	sub	sp, #16
   830a4:	af00      	add	r7, sp, #0
   830a6:	4603      	mov	r3, r0
   830a8:	460a      	mov	r2, r1
   830aa:	71fb      	strb	r3, [r7, #7]
   830ac:	4613      	mov	r3, r2
   830ae:	71bb      	strb	r3, [r7, #6]
	Cl_ReturnCodeType cl_alarmRetCode = CL_OK;
   830b0:	2300      	movs	r3, #0
   830b2:	73fb      	strb	r3, [r7, #15]
	
if((cl_alarm_id > _NO_ALARM) && (cl_alarm_id < _ALARM_MAX_ID))
   830b4:	79fb      	ldrb	r3, [r7, #7]
   830b6:	2b00      	cmp	r3, #0
   830b8:	d060      	beq.n	8317c <Cl_Alarm_TriggerAlarm+0xdc>
   830ba:	79fb      	ldrb	r3, [r7, #7]
   830bc:	2b3e      	cmp	r3, #62	; 0x3e
   830be:	d85d      	bhi.n	8317c <Cl_Alarm_TriggerAlarm+0xdc>
{
			
			
	if(Cl_alarms_alarms[cl_alarm_id].cl_is_enabled)
   830c0:	79fb      	ldrb	r3, [r7, #7]
   830c2:	4a34      	ldr	r2, [pc, #208]	; (83194 <Cl_Alarm_TriggerAlarm+0xf4>)
   830c4:	011b      	lsls	r3, r3, #4
   830c6:	4413      	add	r3, r2
   830c8:	3308      	adds	r3, #8
   830ca:	799b      	ldrb	r3, [r3, #6]
   830cc:	2b00      	cmp	r3, #0
   830ce:	d052      	beq.n	83176 <Cl_Alarm_TriggerAlarm+0xd6>
	{
			if(cl_status)
   830d0:	79bb      	ldrb	r3, [r7, #6]
   830d2:	2b00      	cmp	r3, #0
   830d4:	d038      	beq.n	83148 <Cl_Alarm_TriggerAlarm+0xa8>
			{
				Cl_alarms_alarms[cl_alarm_id].cl_alarmstate = CL_ALARM_DETECTED;
   830d6:	79fb      	ldrb	r3, [r7, #7]
   830d8:	4a2e      	ldr	r2, [pc, #184]	; (83194 <Cl_Alarm_TriggerAlarm+0xf4>)
   830da:	011b      	lsls	r3, r3, #4
   830dc:	4413      	add	r3, r2
   830de:	2201      	movs	r2, #1
   830e0:	709a      	strb	r2, [r3, #2]
				Cl_MacEventQueue4.Cl_MacEventData[Cl_MacEventQueue4.Cl_MacNewEventcount][0]=cl_alarm_id;
   830e2:	4b2d      	ldr	r3, [pc, #180]	; (83198 <Cl_Alarm_TriggerAlarm+0xf8>)
   830e4:	781b      	ldrb	r3, [r3, #0]
   830e6:	79fa      	ldrb	r2, [r7, #7]
   830e8:	b291      	uxth	r1, r2
   830ea:	4a2b      	ldr	r2, [pc, #172]	; (83198 <Cl_Alarm_TriggerAlarm+0xf8>)
   830ec:	3301      	adds	r3, #1
   830ee:	00db      	lsls	r3, r3, #3
   830f0:	4413      	add	r3, r2
   830f2:	460a      	mov	r2, r1
   830f4:	809a      	strh	r2, [r3, #4]
				Cl_alarms_alarms[cl_alarm_id].cl_detected_count++;
   830f6:	79fb      	ldrb	r3, [r7, #7]
   830f8:	4926      	ldr	r1, [pc, #152]	; (83194 <Cl_Alarm_TriggerAlarm+0xf4>)
   830fa:	011a      	lsls	r2, r3, #4
   830fc:	440a      	add	r2, r1
   830fe:	3208      	adds	r2, #8
   83100:	7952      	ldrb	r2, [r2, #5]
   83102:	3201      	adds	r2, #1
   83104:	b2d1      	uxtb	r1, r2
   83106:	4a23      	ldr	r2, [pc, #140]	; (83194 <Cl_Alarm_TriggerAlarm+0xf4>)
   83108:	011b      	lsls	r3, r3, #4
   8310a:	4413      	add	r3, r2
   8310c:	3308      	adds	r3, #8
   8310e:	460a      	mov	r2, r1
   83110:	715a      	strb	r2, [r3, #5]
				cl_alarm_triggered = true;
   83112:	4b22      	ldr	r3, [pc, #136]	; (8319c <Cl_Alarm_TriggerAlarm+0xfc>)
   83114:	2201      	movs	r2, #1
   83116:	701a      	strb	r2, [r3, #0]
				
				cl_lastalarmid = cl_alarm_id;
   83118:	4a21      	ldr	r2, [pc, #132]	; (831a0 <Cl_Alarm_TriggerAlarm+0x100>)
   8311a:	79fb      	ldrb	r3, [r7, #7]
   8311c:	7013      	strb	r3, [r2, #0]
				if(FPCURRENTSTATUS == cl_alarm_id)
   8311e:	79fb      	ldrb	r3, [r7, #7]
   83120:	2b3c      	cmp	r3, #60	; 0x3c
   83122:	d107      	bne.n	83134 <Cl_Alarm_TriggerAlarm+0x94>
				{
					Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALERT_TRIGGERED ;
   83124:	4b1c      	ldr	r3, [pc, #112]	; (83198 <Cl_Alarm_TriggerAlarm+0xf8>)
   83126:	781b      	ldrb	r3, [r3, #0]
   83128:	461a      	mov	r2, r3
   8312a:	4b1b      	ldr	r3, [pc, #108]	; (83198 <Cl_Alarm_TriggerAlarm+0xf8>)
   8312c:	4413      	add	r3, r2
   8312e:	222d      	movs	r2, #45	; 0x2d
   83130:	709a      	strb	r2, [r3, #2]
   83132:	e006      	b.n	83142 <Cl_Alarm_TriggerAlarm+0xa2>
				}
				else
				{
						Cl_MacEventQueue4.Cl_MacEvent[Cl_MacEventQueue4.Cl_MacNewEventcount] = EVT_ALARM_TRIGGERED ;
   83134:	4b18      	ldr	r3, [pc, #96]	; (83198 <Cl_Alarm_TriggerAlarm+0xf8>)
   83136:	781b      	ldrb	r3, [r3, #0]
   83138:	461a      	mov	r2, r3
   8313a:	4b17      	ldr	r3, [pc, #92]	; (83198 <Cl_Alarm_TriggerAlarm+0xf8>)
   8313c:	4413      	add	r3, r2
   8313e:	222e      	movs	r2, #46	; 0x2e
   83140:	709a      	strb	r2, [r3, #2]
				}
			
				Cl_UpdateMacAlarmEventTable();
   83142:	4b18      	ldr	r3, [pc, #96]	; (831a4 <Cl_Alarm_TriggerAlarm+0x104>)
   83144:	4798      	blx	r3
   83146:	e016      	b.n	83176 <Cl_Alarm_TriggerAlarm+0xd6>
			}
			else
			{
				
				if(Cl_alarms_alarms[cl_alarm_id].cl_alarmstate == CL_ALARM_DETECTED)
   83148:	79fb      	ldrb	r3, [r7, #7]
   8314a:	4a12      	ldr	r2, [pc, #72]	; (83194 <Cl_Alarm_TriggerAlarm+0xf4>)
   8314c:	011b      	lsls	r3, r3, #4
   8314e:	4413      	add	r3, r2
   83150:	789b      	ldrb	r3, [r3, #2]
   83152:	2b01      	cmp	r3, #1
   83154:	d10f      	bne.n	83176 <Cl_Alarm_TriggerAlarm+0xd6>
				{
					Cl_alarms_alarms[cl_alarm_id].cl_alarmstate = CL_ALARM_INACTIVE;
   83156:	79fb      	ldrb	r3, [r7, #7]
   83158:	4a0e      	ldr	r2, [pc, #56]	; (83194 <Cl_Alarm_TriggerAlarm+0xf4>)
   8315a:	011b      	lsls	r3, r3, #4
   8315c:	4413      	add	r3, r2
   8315e:	2204      	movs	r2, #4
   83160:	709a      	strb	r2, [r3, #2]
					Cl_alarms_alarms[cl_alarm_id].cl_detected_count = 0;
   83162:	79fb      	ldrb	r3, [r7, #7]
   83164:	4a0b      	ldr	r2, [pc, #44]	; (83194 <Cl_Alarm_TriggerAlarm+0xf4>)
   83166:	011b      	lsls	r3, r3, #4
   83168:	4413      	add	r3, r2
   8316a:	3308      	adds	r3, #8
   8316c:	2200      	movs	r2, #0
   8316e:	715a      	strb	r2, [r3, #5]
					cl_alarm_triggered = false;
   83170:	4b0a      	ldr	r3, [pc, #40]	; (8319c <Cl_Alarm_TriggerAlarm+0xfc>)
   83172:	2200      	movs	r2, #0
   83174:	701a      	strb	r2, [r3, #0]
				
				
			}
		
	}
	cl_alarmRetCode = CL_OK;
   83176:	2300      	movs	r3, #0
   83178:	73fb      	strb	r3, [r7, #15]
   8317a:	e001      	b.n	83180 <Cl_Alarm_TriggerAlarm+0xe0>
}else
{
	cl_alarmRetCode = CL_ERROR;
   8317c:	2304      	movs	r3, #4
   8317e:	73fb      	strb	r3, [r7, #15]
}
ASSERT_ERROR(cl_alarmRetCode);
   83180:	7bfb      	ldrb	r3, [r7, #15]
   83182:	2b00      	cmp	r3, #0
   83184:	d001      	beq.n	8318a <Cl_Alarm_TriggerAlarm+0xea>
   83186:	4b08      	ldr	r3, [pc, #32]	; (831a8 <Cl_Alarm_TriggerAlarm+0x108>)
   83188:	4798      	blx	r3
return CL_OK;
   8318a:	2300      	movs	r3, #0

}
   8318c:	4618      	mov	r0, r3
   8318e:	3710      	adds	r7, #16
   83190:	46bd      	mov	sp, r7
   83192:	bd80      	pop	{r7, pc}
   83194:	20071d0c 	.word	0x20071d0c
   83198:	200722c0 	.word	0x200722c0
   8319c:	20071739 	.word	0x20071739
   831a0:	20072100 	.word	0x20072100
   831a4:	00082d91 	.word	0x00082d91
   831a8:	00088fc1 	.word	0x00088fc1

000831ac <Cl_Alarm_timmer_50millisec>:
 * \return CL_OK on success. 
 * \Globals used : Cl_alarms_alarms,Cl_MacEventQueue1
 */
  
Cl_ReturnCodeType Cl_Alarm_timmer_50millisec(void) // testing
{
   831ac:	b480      	push	{r7}
   831ae:	b083      	sub	sp, #12
   831b0:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType cl_alarm_retcode = CL_OK;
   831b2:	2300      	movs	r3, #0
   831b4:	71fb      	strb	r3, [r7, #7]
	static Cl_Uint16Type fiftymscount = 0;
	fiftymscount++;
   831b6:	4b0f      	ldr	r3, [pc, #60]	; (831f4 <Cl_Alarm_timmer_50millisec+0x48>)
   831b8:	881b      	ldrh	r3, [r3, #0]
   831ba:	3301      	adds	r3, #1
   831bc:	b29a      	uxth	r2, r3
   831be:	4b0d      	ldr	r3, [pc, #52]	; (831f4 <Cl_Alarm_timmer_50millisec+0x48>)
   831c0:	801a      	strh	r2, [r3, #0]
//	 flow_watchdog = 999900 ;
	flow_count = 0;
   831c2:	4b0d      	ldr	r3, [pc, #52]	; (831f8 <Cl_Alarm_timmer_50millisec+0x4c>)
   831c4:	2200      	movs	r2, #0
   831c6:	601a      	str	r2, [r3, #0]
//	if(flow_watchdog >= 0)
	flow_watchdog++	;
   831c8:	4b0c      	ldr	r3, [pc, #48]	; (831fc <Cl_Alarm_timmer_50millisec+0x50>)
   831ca:	681b      	ldr	r3, [r3, #0]
   831cc:	3301      	adds	r3, #1
   831ce:	4a0b      	ldr	r2, [pc, #44]	; (831fc <Cl_Alarm_timmer_50millisec+0x50>)
   831d0:	6013      	str	r3, [r2, #0]
	
	if(fiftymscount > 20)
   831d2:	4b08      	ldr	r3, [pc, #32]	; (831f4 <Cl_Alarm_timmer_50millisec+0x48>)
   831d4:	881b      	ldrh	r3, [r3, #0]
   831d6:	2b14      	cmp	r3, #20
   831d8:	d905      	bls.n	831e6 <Cl_Alarm_timmer_50millisec+0x3a>
		if (  gflow_en)//testing
		{
	//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"FLOW_CNT",8);
	//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&flow_count_rate,2);
		}
		flow_count_rate =0;
   831da:	4b09      	ldr	r3, [pc, #36]	; (83200 <Cl_Alarm_timmer_50millisec+0x54>)
   831dc:	2200      	movs	r2, #0
   831de:	601a      	str	r2, [r3, #0]

		fiftymscount = 0;
   831e0:	4b04      	ldr	r3, [pc, #16]	; (831f4 <Cl_Alarm_timmer_50millisec+0x48>)
   831e2:	2200      	movs	r2, #0
   831e4:	801a      	strh	r2, [r3, #0]
	}
	
	return CL_OK;
   831e6:	2300      	movs	r3, #0
	
}
   831e8:	4618      	mov	r0, r3
   831ea:	370c      	adds	r7, #12
   831ec:	46bd      	mov	sp, r7
   831ee:	f85d 7b04 	ldr.w	r7, [sp], #4
   831f2:	4770      	bx	lr
   831f4:	2007175c 	.word	0x2007175c
   831f8:	20071730 	.word	0x20071730
   831fc:	2007172c 	.word	0x2007172c
   83200:	20071734 	.word	0x20071734

00083204 <cl_get_dac_conductivity_info>:
 * \return CL_OK on success. 
 * \Globals used : Cl_alarms_alarms,Cl_MacEventQueue1
 */
  
Cl_ReturnCodeType cl_get_dac_conductivity_info(Cl_NewAlarmIdType* cl_dac_alarmID)
{
   83204:	b480      	push	{r7}
   83206:	b083      	sub	sp, #12
   83208:	af00      	add	r7, sp, #0
   8320a:	6078      	str	r0, [r7, #4]
cl_ten_pt_dac_cond_avg = (9*cl_ten_pt_dac_cond_avg + cl_sys_statbuffer.cond_status_dac)/10;	
   8320c:	4b3b      	ldr	r3, [pc, #236]	; (832fc <cl_get_dac_conductivity_info+0xf8>)
   8320e:	881b      	ldrh	r3, [r3, #0]
   83210:	461a      	mov	r2, r3
   83212:	4613      	mov	r3, r2
   83214:	00db      	lsls	r3, r3, #3
   83216:	4413      	add	r3, r2
   83218:	4a39      	ldr	r2, [pc, #228]	; (83300 <cl_get_dac_conductivity_info+0xfc>)
   8321a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
   8321c:	4413      	add	r3, r2
   8321e:	4a39      	ldr	r2, [pc, #228]	; (83304 <cl_get_dac_conductivity_info+0x100>)
   83220:	fb82 1203 	smull	r1, r2, r2, r3
   83224:	1092      	asrs	r2, r2, #2
   83226:	17db      	asrs	r3, r3, #31
   83228:	1ad3      	subs	r3, r2, r3
   8322a:	b29a      	uxth	r2, r3
   8322c:	4b33      	ldr	r3, [pc, #204]	; (832fc <cl_get_dac_conductivity_info+0xf8>)
   8322e:	801a      	strh	r2, [r3, #0]
switch(dac_cond_state)
   83230:	4b35      	ldr	r3, [pc, #212]	; (83308 <cl_get_dac_conductivity_info+0x104>)
   83232:	781b      	ldrb	r3, [r3, #0]
   83234:	2b03      	cmp	r3, #3
   83236:	d859      	bhi.n	832ec <cl_get_dac_conductivity_info+0xe8>
   83238:	a201      	add	r2, pc, #4	; (adr r2, 83240 <cl_get_dac_conductivity_info+0x3c>)
   8323a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8323e:	bf00      	nop
   83240:	00083251 	.word	0x00083251
   83244:	00083289 	.word	0x00083289
   83248:	00083251 	.word	0x00083251
   8324c:	000832b7 	.word	0x000832b7
	{
		case CL_DAC_COND_STATE_NOSTATE:
		//break;
		case CL_DAC_COND_STATE_OPEN:

		if((cl_ten_pt_dac_cond_avg > 50) &&(cl_ten_pt_dac_cond_avg < 2000))
   83250:	4b2a      	ldr	r3, [pc, #168]	; (832fc <cl_get_dac_conductivity_info+0xf8>)
   83252:	881b      	ldrh	r3, [r3, #0]
   83254:	2b32      	cmp	r3, #50	; 0x32
   83256:	d90a      	bls.n	8326e <cl_get_dac_conductivity_info+0x6a>
   83258:	4b28      	ldr	r3, [pc, #160]	; (832fc <cl_get_dac_conductivity_info+0xf8>)
   8325a:	881b      	ldrh	r3, [r3, #0]
   8325c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
   83260:	d205      	bcs.n	8326e <cl_get_dac_conductivity_info+0x6a>
		{
			*cl_dac_alarmID = COND_DAC_RO;
   83262:	687b      	ldr	r3, [r7, #4]
   83264:	220a      	movs	r2, #10
   83266:	701a      	strb	r2, [r3, #0]
			dac_cond_state = CL_DAC_COND_STATE_RO;
   83268:	4b27      	ldr	r3, [pc, #156]	; (83308 <cl_get_dac_conductivity_info+0x104>)
   8326a:	2201      	movs	r2, #1
   8326c:	701a      	strb	r2, [r3, #0]
		}

		if(cl_ten_pt_dac_cond_avg > 2000)
   8326e:	4b23      	ldr	r3, [pc, #140]	; (832fc <cl_get_dac_conductivity_info+0xf8>)
   83270:	881b      	ldrh	r3, [r3, #0]
   83272:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
   83276:	d906      	bls.n	83286 <cl_get_dac_conductivity_info+0x82>
		{
			*cl_dac_alarmID = COND_DAC_HIGH;
   83278:	687b      	ldr	r3, [r7, #4]
   8327a:	220b      	movs	r2, #11
   8327c:	701a      	strb	r2, [r3, #0]
			dac_cond_state = CL_DAC_COND_STATE_HIGH;
   8327e:	4b22      	ldr	r3, [pc, #136]	; (83308 <cl_get_dac_conductivity_info+0x104>)
   83280:	2203      	movs	r2, #3
   83282:	701a      	strb	r2, [r3, #0]
		}
		break;
   83284:	e032      	b.n	832ec <cl_get_dac_conductivity_info+0xe8>
   83286:	e031      	b.n	832ec <cl_get_dac_conductivity_info+0xe8>
		
		case CL_DAC_COND_ALARM_RO:
				if(cl_ten_pt_dac_cond_avg > 2000)
   83288:	4b1c      	ldr	r3, [pc, #112]	; (832fc <cl_get_dac_conductivity_info+0xf8>)
   8328a:	881b      	ldrh	r3, [r3, #0]
   8328c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
   83290:	d905      	bls.n	8329e <cl_get_dac_conductivity_info+0x9a>
				{
					*cl_dac_alarmID = COND_DAC_HIGH;
   83292:	687b      	ldr	r3, [r7, #4]
   83294:	220b      	movs	r2, #11
   83296:	701a      	strb	r2, [r3, #0]
					dac_cond_state = CL_DAC_COND_STATE_HIGH;
   83298:	4b1b      	ldr	r3, [pc, #108]	; (83308 <cl_get_dac_conductivity_info+0x104>)
   8329a:	2203      	movs	r2, #3
   8329c:	701a      	strb	r2, [r3, #0]
				}
				if(cl_ten_pt_dac_cond_avg < 50)
   8329e:	4b17      	ldr	r3, [pc, #92]	; (832fc <cl_get_dac_conductivity_info+0xf8>)
   832a0:	881b      	ldrh	r3, [r3, #0]
   832a2:	2b31      	cmp	r3, #49	; 0x31
   832a4:	d806      	bhi.n	832b4 <cl_get_dac_conductivity_info+0xb0>
				{
					*cl_dac_alarmID = COND_DAC_OPEN;
   832a6:	687b      	ldr	r3, [r7, #4]
   832a8:	2209      	movs	r2, #9
   832aa:	701a      	strb	r2, [r3, #0]
					dac_cond_state = CL_DAC_COND_STATE_OPEN;					
   832ac:	4b16      	ldr	r3, [pc, #88]	; (83308 <cl_get_dac_conductivity_info+0x104>)
   832ae:	2202      	movs	r2, #2
   832b0:	701a      	strb	r2, [r3, #0]
				}
		break;
   832b2:	e01b      	b.n	832ec <cl_get_dac_conductivity_info+0xe8>
   832b4:	e01a      	b.n	832ec <cl_get_dac_conductivity_info+0xe8>
		case CL_DAC_COND_STATE_HIGH:
		if((cl_ten_pt_dac_cond_avg > 50) &&(cl_ten_pt_dac_cond_avg < 2000))
   832b6:	4b11      	ldr	r3, [pc, #68]	; (832fc <cl_get_dac_conductivity_info+0xf8>)
   832b8:	881b      	ldrh	r3, [r3, #0]
   832ba:	2b32      	cmp	r3, #50	; 0x32
   832bc:	d90a      	bls.n	832d4 <cl_get_dac_conductivity_info+0xd0>
   832be:	4b0f      	ldr	r3, [pc, #60]	; (832fc <cl_get_dac_conductivity_info+0xf8>)
   832c0:	881b      	ldrh	r3, [r3, #0]
   832c2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
   832c6:	d205      	bcs.n	832d4 <cl_get_dac_conductivity_info+0xd0>
				{
					*cl_dac_alarmID = COND_DAC_RO;
   832c8:	687b      	ldr	r3, [r7, #4]
   832ca:	220a      	movs	r2, #10
   832cc:	701a      	strb	r2, [r3, #0]
					dac_cond_state = CL_DAC_COND_STATE_RO;
   832ce:	4b0e      	ldr	r3, [pc, #56]	; (83308 <cl_get_dac_conductivity_info+0x104>)
   832d0:	2201      	movs	r2, #1
   832d2:	701a      	strb	r2, [r3, #0]
				}
		if(cl_ten_pt_dac_cond_avg < 50)
   832d4:	4b09      	ldr	r3, [pc, #36]	; (832fc <cl_get_dac_conductivity_info+0xf8>)
   832d6:	881b      	ldrh	r3, [r3, #0]
   832d8:	2b31      	cmp	r3, #49	; 0x31
   832da:	d806      	bhi.n	832ea <cl_get_dac_conductivity_info+0xe6>
				{
					*cl_dac_alarmID = COND_DAC_OPEN;
   832dc:	687b      	ldr	r3, [r7, #4]
   832de:	2209      	movs	r2, #9
   832e0:	701a      	strb	r2, [r3, #0]
					dac_cond_state = CL_DAC_COND_STATE_OPEN;
   832e2:	4b09      	ldr	r3, [pc, #36]	; (83308 <cl_get_dac_conductivity_info+0x104>)
   832e4:	2202      	movs	r2, #2
   832e6:	701a      	strb	r2, [r3, #0]
				}
		break;
   832e8:	e7ff      	b.n	832ea <cl_get_dac_conductivity_info+0xe6>
   832ea:	bf00      	nop
	}
return CL_OK;
   832ec:	2300      	movs	r3, #0
}
   832ee:	4618      	mov	r0, r3
   832f0:	370c      	adds	r7, #12
   832f2:	46bd      	mov	sp, r7
   832f4:	f85d 7b04 	ldr.w	r7, [sp], #4
   832f8:	4770      	bx	lr
   832fa:	bf00      	nop
   832fc:	2007175e 	.word	0x2007175e
   83300:	20072224 	.word	0x20072224
   83304:	66666667 	.word	0x66666667
   83308:	20071760 	.word	0x20071760

0008330c <Cl_bc_controller>:
 */
 
 

Cl_ReturnCodeType  Cl_bc_controller(Cl_BC_EventType cl_bc_event)
{
   8330c:	b580      	push	{r7, lr}
   8330e:	b084      	sub	sp, #16
   83310:	af00      	add	r7, sp, #0
   83312:	4603      	mov	r3, r0
   83314:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType cl_bc_returncode = CL_OK;
   83316:	2300      	movs	r3, #0
   83318:	73fb      	strb	r3, [r7, #15]
	static int16_t fill_time = 0;
	static cl_Datastreamtype cl_tdata,cl_tdata_temp;
	
	switch(cl_bc_event)
   8331a:	79fb      	ldrb	r3, [r7, #7]
   8331c:	3b04      	subs	r3, #4
   8331e:	2b0c      	cmp	r3, #12
   83320:	f200 80a8 	bhi.w	83474 <Cl_bc_controller+0x168>
   83324:	a201      	add	r2, pc, #4	; (adr r2, 8332c <Cl_bc_controller+0x20>)
   83326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8332a:	bf00      	nop
   8332c:	00083361 	.word	0x00083361
   83330:	000833fd 	.word	0x000833fd
   83334:	00083475 	.word	0x00083475
   83338:	00083475 	.word	0x00083475
   8333c:	00083475 	.word	0x00083475
   83340:	00083475 	.word	0x00083475
   83344:	00083475 	.word	0x00083475
   83348:	000833cb 	.word	0x000833cb
   8334c:	00083475 	.word	0x00083475
   83350:	00083419 	.word	0x00083419
   83354:	00083475 	.word	0x00083475
   83358:	0008345d 	.word	0x0008345d
   8335c:	00083427 	.word	0x00083427
	{
		case	BC_EVENT_START:
		
		
				cl_bc_returncode = sv_cntrl_setflowpath(BC_FLUSH_OPEN);
   83360:	2007      	movs	r0, #7
   83362:	4b96      	ldr	r3, [pc, #600]	; (835bc <Cl_bc_controller+0x2b0>)
   83364:	4798      	blx	r3
   83366:	4603      	mov	r3, r0
   83368:	73fb      	strb	r3, [r7, #15]
				sv_cntrl_setpumpspeed(DCMOTOR2,1100);
   8336a:	2002      	movs	r0, #2
   8336c:	f240 414c 	movw	r1, #1100	; 0x44c
   83370:	4b93      	ldr	r3, [pc, #588]	; (835c0 <Cl_bc_controller+0x2b4>)
   83372:	4798      	blx	r3
				sv_cntrl_setpumpspeed(DCMOTOR1,900);
   83374:	2001      	movs	r0, #1
   83376:	f44f 7161 	mov.w	r1, #900	; 0x384
   8337a:	4b91      	ldr	r3, [pc, #580]	; (835c0 <Cl_bc_controller+0x2b4>)
   8337c:	4798      	blx	r3
				Cl_AlarmActivateAlarms(BC_ALARM,false);
   8337e:	201a      	movs	r0, #26
   83380:	2100      	movs	r1, #0
   83382:	4b90      	ldr	r3, [pc, #576]	; (835c4 <Cl_bc_controller+0x2b8>)
   83384:	4798      	blx	r3
			
				
				if(openfill_flag == 1){
   83386:	4b90      	ldr	r3, [pc, #576]	; (835c8 <Cl_bc_controller+0x2bc>)
   83388:	781b      	ldrb	r3, [r3, #0]
   8338a:	2b01      	cmp	r3, #1
   8338c:	d115      	bne.n	833ba <Cl_bc_controller+0xae>
					
					cl_bc_returncode = sv_cntrl_setflowpath(BC_FLUSH_OPEN_DIS);
   8338e:	2015      	movs	r0, #21
   83390:	4b8a      	ldr	r3, [pc, #552]	; (835bc <Cl_bc_controller+0x2b0>)
   83392:	4798      	blx	r3
   83394:	4603      	mov	r3, r0
   83396:	73fb      	strb	r3, [r7, #15]
					
					if(flag_hotcitric == 1){
   83398:	4b8c      	ldr	r3, [pc, #560]	; (835cc <Cl_bc_controller+0x2c0>)
   8339a:	781b      	ldrb	r3, [r3, #0]
   8339c:	2b01      	cmp	r3, #1
   8339e:	d10c      	bne.n	833ba <Cl_bc_controller+0xae>
					
					sv_cntrl_poweronheater();
   833a0:	4b8b      	ldr	r3, [pc, #556]	; (835d0 <Cl_bc_controller+0x2c4>)
   833a2:	4798      	blx	r3
					sv_cntrl_incheater(3500);
   833a4:	f640 50ac 	movw	r0, #3500	; 0xdac
   833a8:	4b8a      	ldr	r3, [pc, #552]	; (835d4 <Cl_bc_controller+0x2c8>)
   833aa:	4798      	blx	r3
					SetHeaterState(CL_HEATER_STATE_ON);
   833ac:	2001      	movs	r0, #1
   833ae:	4b8a      	ldr	r3, [pc, #552]	; (835d8 <Cl_bc_controller+0x2cc>)
   833b0:	4798      	blx	r3
					Cl_Heater_Event_Handler(CL_HEATER_EVENT_TARGET_TEMP , 75);	
   833b2:	2005      	movs	r0, #5
   833b4:	4989      	ldr	r1, [pc, #548]	; (835dc <Cl_bc_controller+0x2d0>)
   833b6:	4b8a      	ldr	r3, [pc, #552]	; (835e0 <Cl_bc_controller+0x2d4>)
   833b8:	4798      	blx	r3
					}
					
				}
					bc_laststate = bc_state;
   833ba:	4b8a      	ldr	r3, [pc, #552]	; (835e4 <Cl_bc_controller+0x2d8>)
   833bc:	781a      	ldrb	r2, [r3, #0]
   833be:	4b8a      	ldr	r3, [pc, #552]	; (835e8 <Cl_bc_controller+0x2dc>)
   833c0:	701a      	strb	r2, [r3, #0]
					bc_state = CL_BC_STATE_OPENFILL_TRANSITION;
   833c2:	4b88      	ldr	r3, [pc, #544]	; (835e4 <Cl_bc_controller+0x2d8>)
   833c4:	2202      	movs	r2, #2
   833c6:	701a      	strb	r2, [r3, #0]
				
		
		break;
   833c8:	e054      	b.n	83474 <Cl_bc_controller+0x168>
		case BC_EVENT_RESUME:
		if(bc_state == CL_BC_STATE_IDLE)
   833ca:	4b86      	ldr	r3, [pc, #536]	; (835e4 <Cl_bc_controller+0x2d8>)
   833cc:	781b      	ldrb	r3, [r3, #0]
   833ce:	2b00      	cmp	r3, #0
   833d0:	d113      	bne.n	833fa <Cl_bc_controller+0xee>
				{
				cl_bc_returncode = sv_cntrl_setflowpath(BC_FLUSH_OPEN);
   833d2:	2007      	movs	r0, #7
   833d4:	4b79      	ldr	r3, [pc, #484]	; (835bc <Cl_bc_controller+0x2b0>)
   833d6:	4798      	blx	r3
   833d8:	4603      	mov	r3, r0
   833da:	73fb      	strb	r3, [r7, #15]
				cl_bc_returncode = sv_cntrl_setflowpath(cl_flowpathtable[bc_laststate]);
   833dc:	4b82      	ldr	r3, [pc, #520]	; (835e8 <Cl_bc_controller+0x2dc>)
   833de:	781b      	ldrb	r3, [r3, #0]
   833e0:	461a      	mov	r2, r3
   833e2:	4b82      	ldr	r3, [pc, #520]	; (835ec <Cl_bc_controller+0x2e0>)
   833e4:	5c9b      	ldrb	r3, [r3, r2]
   833e6:	4618      	mov	r0, r3
   833e8:	4b74      	ldr	r3, [pc, #464]	; (835bc <Cl_bc_controller+0x2b0>)
   833ea:	4798      	blx	r3
   833ec:	4603      	mov	r3, r0
   833ee:	73fb      	strb	r3, [r7, #15]
				//bc_laststate = bc_state;
				bc_state = bc_laststate;                                                       // added on 20.06.17 hot rinse switching was not happening
   833f0:	4b7d      	ldr	r3, [pc, #500]	; (835e8 <Cl_bc_controller+0x2dc>)
   833f2:	781a      	ldrb	r2, [r3, #0]
   833f4:	4b7b      	ldr	r3, [pc, #492]	; (835e4 <Cl_bc_controller+0x2d8>)
   833f6:	701a      	strb	r2, [r3, #0]
				}
		break;
   833f8:	e03c      	b.n	83474 <Cl_bc_controller+0x168>
   833fa:	e03b      	b.n	83474 <Cl_bc_controller+0x168>
		case	BC_EVENT_STOP:
		CSeventcount = 0;
   833fc:	4b7c      	ldr	r3, [pc, #496]	; (835f0 <Cl_bc_controller+0x2e4>)
   833fe:	2200      	movs	r2, #0
   83400:	601a      	str	r2, [r3, #0]
				Cl_AlarmActivateAlarms(BC_ALARM,false);
   83402:	201a      	movs	r0, #26
   83404:	2100      	movs	r1, #0
   83406:	4b6f      	ldr	r3, [pc, #444]	; (835c4 <Cl_bc_controller+0x2b8>)
   83408:	4798      	blx	r3
				sv_cntrl_setflowpath(FLOW_PATH_IDLE_RINSE);
   8340a:	2011      	movs	r0, #17
   8340c:	4b6b      	ldr	r3, [pc, #428]	; (835bc <Cl_bc_controller+0x2b0>)
   8340e:	4798      	blx	r3
				bc_state = CL_BC_STATE_IDLE;
   83410:	4b74      	ldr	r3, [pc, #464]	; (835e4 <Cl_bc_controller+0x2d8>)
   83412:	2200      	movs	r2, #0
   83414:	701a      	strb	r2, [r3, #0]
			
		break;
   83416:	e02d      	b.n	83474 <Cl_bc_controller+0x168>
		case BC_EVENT_STOP_RINSE:
				openfillcounter = 0;
   83418:	4b76      	ldr	r3, [pc, #472]	; (835f4 <Cl_bc_controller+0x2e8>)
   8341a:	2200      	movs	r2, #0
   8341c:	801a      	strh	r2, [r3, #0]
				bc_state = CL_BC_STATE_IDLE;
   8341e:	4b71      	ldr	r3, [pc, #452]	; (835e4 <Cl_bc_controller+0x2d8>)
   83420:	2200      	movs	r2, #0
   83422:	701a      	strb	r2, [r3, #0]
		break;
   83424:	e026      	b.n	83474 <Cl_bc_controller+0x168>
		break;
		case	BC_EVENT_RESET:
		break;
		case BC_EVENT_TEST_SWITCH:
		
		cl_bc_returncode = (Cl_ReturnCodeType)sv_cntrl_setflowpath(BC_FLUSH_1_V13_14);
   83426:	2005      	movs	r0, #5
   83428:	4b64      	ldr	r3, [pc, #400]	; (835bc <Cl_bc_controller+0x2b0>)
   8342a:	4798      	blx	r3
   8342c:	4603      	mov	r3, r0
   8342e:	73fb      	strb	r3, [r7, #15]
		sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   83430:	2002      	movs	r0, #2
   83432:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   83436:	4b62      	ldr	r3, [pc, #392]	; (835c0 <Cl_bc_controller+0x2b4>)
   83438:	4798      	blx	r3
		sv_cntrl_setpumpspeed(DCMOTOR1,1000);
   8343a:	2001      	movs	r0, #1
   8343c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   83440:	4b5f      	ldr	r3, [pc, #380]	; (835c0 <Cl_bc_controller+0x2b4>)
   83442:	4798      	blx	r3
		
		potvalue = (950 * 1024)/10000;                                 // 600
   83444:	4b6c      	ldr	r3, [pc, #432]	; (835f8 <Cl_bc_controller+0x2ec>)
   83446:	2261      	movs	r2, #97	; 0x61
   83448:	801a      	strh	r2, [r3, #0]
			sv_cs_setpotvalue(potvalue);
   8344a:	4b6b      	ldr	r3, [pc, #428]	; (835f8 <Cl_bc_controller+0x2ec>)
   8344c:	881b      	ldrh	r3, [r3, #0]
   8344e:	4618      	mov	r0, r3
   83450:	4b6a      	ldr	r3, [pc, #424]	; (835fc <Cl_bc_controller+0x2f0>)
   83452:	4798      	blx	r3
			
		bc_state = CL_BC_STATE_BO1_V13V14_TRANSITION;
   83454:	4b63      	ldr	r3, [pc, #396]	; (835e4 <Cl_bc_controller+0x2d8>)
   83456:	220c      	movs	r2, #12
   83458:	701a      	strb	r2, [r3, #0]
		break;
   8345a:	e00b      	b.n	83474 <Cl_bc_controller+0x168>
		
		case BC_EVENT_DISINF_INTAKE:
		
			
			potvalue = (650 * 1024)/10000;                                 // 600
   8345c:	4b66      	ldr	r3, [pc, #408]	; (835f8 <Cl_bc_controller+0x2ec>)
   8345e:	2242      	movs	r2, #66	; 0x42
   83460:	801a      	strh	r2, [r3, #0]
			sv_cs_setpotvalue(potvalue);
   83462:	4b65      	ldr	r3, [pc, #404]	; (835f8 <Cl_bc_controller+0x2ec>)
   83464:	881b      	ldrh	r3, [r3, #0]
   83466:	4618      	mov	r0, r3
   83468:	4b64      	ldr	r3, [pc, #400]	; (835fc <Cl_bc_controller+0x2f0>)
   8346a:	4798      	blx	r3
			
		bc_state = CL_BC_STATE_BO1_V13V14_TRANSITION;
   8346c:	4b5d      	ldr	r3, [pc, #372]	; (835e4 <Cl_bc_controller+0x2d8>)
   8346e:	220c      	movs	r2, #12
   83470:	701a      	strb	r2, [r3, #0]
		break;
   83472:	bf00      	nop
	}
	switch (bc_state)
   83474:	4b5b      	ldr	r3, [pc, #364]	; (835e4 <Cl_bc_controller+0x2d8>)
   83476:	781b      	ldrb	r3, [r3, #0]
   83478:	2b15      	cmp	r3, #21
   8347a:	f200 8594 	bhi.w	83fa6 <Cl_bc_controller+0xc9a>
   8347e:	a201      	add	r2, pc, #4	; (adr r2, 83484 <Cl_bc_controller+0x178>)
   83480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83484:	00083fa7 	.word	0x00083fa7
   83488:	00083fa7 	.word	0x00083fa7
   8348c:	000834dd 	.word	0x000834dd
   83490:	0008358b 	.word	0x0008358b
   83494:	00083877 	.word	0x00083877
   83498:	00083917 	.word	0x00083917
   8349c:	00083933 	.word	0x00083933
   834a0:	00083969 	.word	0x00083969
   834a4:	00083985 	.word	0x00083985
   834a8:	000839ab 	.word	0x000839ab
   834ac:	000839c7 	.word	0x000839c7
   834b0:	000839fd 	.word	0x000839fd
   834b4:	00083a19 	.word	0x00083a19
   834b8:	00083a87 	.word	0x00083a87
   834bc:	00083c85 	.word	0x00083c85
   834c0:	00083cf3 	.word	0x00083cf3
   834c4:	00083f1f 	.word	0x00083f1f
   834c8:	00083fa7 	.word	0x00083fa7
   834cc:	00083f63 	.word	0x00083f63
   834d0:	00083fa7 	.word	0x00083fa7
   834d4:	00083fa7 	.word	0x00083fa7
   834d8:	00083fa7 	.word	0x00083fa7
			// wait for commands
			break;
			case CL_BC_STATE_NC:
			break;
			case CL_BC_STATE_OPENFILL_TRANSITION:
							switch(cl_bc_event)
   834dc:	79fb      	ldrb	r3, [r7, #7]
   834de:	3b01      	subs	r3, #1
   834e0:	2b07      	cmp	r3, #7
   834e2:	d84f      	bhi.n	83584 <Cl_bc_controller+0x278>
   834e4:	a201      	add	r2, pc, #4	; (adr r2, 834ec <Cl_bc_controller+0x1e0>)
   834e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   834ea:	bf00      	nop
   834ec:	0008350d 	.word	0x0008350d
   834f0:	00083515 	.word	0x00083515
   834f4:	00083585 	.word	0x00083585
   834f8:	00083585 	.word	0x00083585
   834fc:	00083585 	.word	0x00083585
   83500:	00083535 	.word	0x00083535
   83504:	00083585 	.word	0x00083585
   83508:	0008355d 	.word	0x0008355d
							{							
								case BC_EVENT_500MS:				
									bc_wait = true;				
   8350c:	4b3c      	ldr	r3, [pc, #240]	; (83600 <Cl_bc_controller+0x2f4>)
   8350e:	2201      	movs	r2, #1
   83510:	701a      	strb	r2, [r3, #0]
								break;
   83512:	e038      	b.n	83586 <Cl_bc_controller+0x27a>
								case BC_EVENT_SECOND:
								if(bc_wait == true)
   83514:	4b3a      	ldr	r3, [pc, #232]	; (83600 <Cl_bc_controller+0x2f4>)
   83516:	781b      	ldrb	r3, [r3, #0]
   83518:	2b00      	cmp	r3, #0
   8351a:	d00a      	beq.n	83532 <Cl_bc_controller+0x226>
								{
									bc_laststate = bc_state;
   8351c:	4b31      	ldr	r3, [pc, #196]	; (835e4 <Cl_bc_controller+0x2d8>)
   8351e:	781a      	ldrb	r2, [r3, #0]
   83520:	4b31      	ldr	r3, [pc, #196]	; (835e8 <Cl_bc_controller+0x2dc>)
   83522:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_OPENFILL;
   83524:	4b2f      	ldr	r3, [pc, #188]	; (835e4 <Cl_bc_controller+0x2d8>)
   83526:	2203      	movs	r2, #3
   83528:	701a      	strb	r2, [r3, #0]
									bc_wait = false;
   8352a:	4b35      	ldr	r3, [pc, #212]	; (83600 <Cl_bc_controller+0x2f4>)
   8352c:	2200      	movs	r2, #0
   8352e:	701a      	strb	r2, [r3, #0]
								}
								break;
   83530:	e029      	b.n	83586 <Cl_bc_controller+0x27a>
   83532:	e028      	b.n	83586 <Cl_bc_controller+0x27a>
								case BC_EVENT_STOP_FOR_BC1:
								openfillcounter = 0;
   83534:	4b2f      	ldr	r3, [pc, #188]	; (835f4 <Cl_bc_controller+0x2e8>)
   83536:	2200      	movs	r2, #0
   83538:	801a      	strh	r2, [r3, #0]
								cl_bc_returncode = 
   8353a:	2005      	movs	r0, #5
   8353c:	4b1f      	ldr	r3, [pc, #124]	; (835bc <Cl_bc_controller+0x2b0>)
   8353e:	4798      	blx	r3
   83540:	4603      	mov	r3, r0
   83542:	73fb      	strb	r3, [r7, #15]
								(Cl_ReturnCodeType)sv_cntrl_setflowpath(BC_FLUSH_1_V13_14);
								if(cl_bc_returncode == CL_OK)
   83544:	7bfb      	ldrb	r3, [r7, #15]
   83546:	2b00      	cmp	r3, #0
   83548:	d107      	bne.n	8355a <Cl_bc_controller+0x24e>
								{
									bc_laststate = bc_state;
   8354a:	4b26      	ldr	r3, [pc, #152]	; (835e4 <Cl_bc_controller+0x2d8>)
   8354c:	781a      	ldrb	r2, [r3, #0]
   8354e:	4b26      	ldr	r3, [pc, #152]	; (835e8 <Cl_bc_controller+0x2dc>)
   83550:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_STOPPED_FOR_BC1;
   83552:	4b24      	ldr	r3, [pc, #144]	; (835e4 <Cl_bc_controller+0x2d8>)
   83554:	2210      	movs	r2, #16
   83556:	701a      	strb	r2, [r3, #0]
								}
								break;
   83558:	e015      	b.n	83586 <Cl_bc_controller+0x27a>
   8355a:	e014      	b.n	83586 <Cl_bc_controller+0x27a>
								case BC_EVENT_STOP_FOR_BC2:
								openfillcounter = 0;
   8355c:	4b25      	ldr	r3, [pc, #148]	; (835f4 <Cl_bc_controller+0x2e8>)
   8355e:	2200      	movs	r2, #0
   83560:	801a      	strh	r2, [r3, #0]
								cl_bc_returncode = (Cl_ReturnCodeType)sv_cntrl_setflowpath(BC_FLUSH_2_V13_14);
   83562:	2006      	movs	r0, #6
   83564:	4b15      	ldr	r3, [pc, #84]	; (835bc <Cl_bc_controller+0x2b0>)
   83566:	4798      	blx	r3
   83568:	4603      	mov	r3, r0
   8356a:	73fb      	strb	r3, [r7, #15]
								if(cl_bc_returncode == CL_OK)
   8356c:	7bfb      	ldrb	r3, [r7, #15]
   8356e:	2b00      	cmp	r3, #0
   83570:	d107      	bne.n	83582 <Cl_bc_controller+0x276>
								{
									bc_laststate = bc_state;
   83572:	4b1c      	ldr	r3, [pc, #112]	; (835e4 <Cl_bc_controller+0x2d8>)
   83574:	781a      	ldrb	r2, [r3, #0]
   83576:	4b1c      	ldr	r3, [pc, #112]	; (835e8 <Cl_bc_controller+0x2dc>)
   83578:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_STOPPED_FOR_BC2;
   8357a:	4b1a      	ldr	r3, [pc, #104]	; (835e4 <Cl_bc_controller+0x2d8>)
   8357c:	2212      	movs	r2, #18
   8357e:	701a      	strb	r2, [r3, #0]
								}
								break;
   83580:	e001      	b.n	83586 <Cl_bc_controller+0x27a>
   83582:	e000      	b.n	83586 <Cl_bc_controller+0x27a>
								default:break;
   83584:	bf00      	nop
							}
			break;
   83586:	f000 bd0f 	b.w	83fa8 <Cl_bc_controller+0xc9c>
			case CL_BC_STATE_OPENFILL:
							switch(cl_bc_event)
   8358a:	79fb      	ldrb	r3, [r7, #7]
   8358c:	3b01      	subs	r3, #1
   8358e:	2b07      	cmp	r3, #7
   83590:	f200 816f 	bhi.w	83872 <Cl_bc_controller+0x566>
   83594:	a201      	add	r2, pc, #4	; (adr r2, 8359c <Cl_bc_controller+0x290>)
   83596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8359a:	bf00      	nop
   8359c:	00083873 	.word	0x00083873
   835a0:	00083605 	.word	0x00083605
   835a4:	00083873 	.word	0x00083873
   835a8:	00083873 	.word	0x00083873
   835ac:	00083873 	.word	0x00083873
   835b0:	00083823 	.word	0x00083823
   835b4:	00083873 	.word	0x00083873
   835b8:	0008384b 	.word	0x0008384b
   835bc:	00099ebd 	.word	0x00099ebd
   835c0:	00099d45 	.word	0x00099d45
   835c4:	00082e61 	.word	0x00082e61
   835c8:	20071c12 	.word	0x20071c12
   835cc:	20071a5f 	.word	0x20071a5f
   835d0:	00099ca5 	.word	0x00099ca5
   835d4:	00099dad 	.word	0x00099dad
   835d8:	000894d9 	.word	0x000894d9
   835dc:	42960000 	.word	0x42960000
   835e0:	00089451 	.word	0x00089451
   835e4:	20071761 	.word	0x20071761
   835e8:	20071762 	.word	0x20071762
   835ec:	2007010c 	.word	0x2007010c
   835f0:	20071774 	.word	0x20071774
   835f4:	20071766 	.word	0x20071766
   835f8:	2007176a 	.word	0x2007176a
   835fc:	0009a175 	.word	0x0009a175
   83600:	20071763 	.word	0x20071763
							{
								case 	BC_EVENT_500MS:
								break;
								case	BC_EVENT_SECOND:
								
								if(openfill_flag == 1){
   83604:	4b9f      	ldr	r3, [pc, #636]	; (83884 <Cl_bc_controller+0x578>)
   83606:	781b      	ldrb	r3, [r3, #0]
   83608:	2b01      	cmp	r3, #1
   8360a:	d147      	bne.n	8369c <Cl_bc_controller+0x390>
									
									Cl_Uint16Type potvalue = 0;
   8360c:	2300      	movs	r3, #0
   8360e:	81bb      	strh	r3, [r7, #12]
									potvalue = (650 * 1024)/10000;                                 // 600
   83610:	2342      	movs	r3, #66	; 0x42
   83612:	81bb      	strh	r3, [r7, #12]
									sv_cs_setpotvalue(potvalue);
   83614:	89bb      	ldrh	r3, [r7, #12]
   83616:	4618      	mov	r0, r3
   83618:	4b9b      	ldr	r3, [pc, #620]	; (83888 <Cl_bc_controller+0x57c>)
   8361a:	4798      	blx	r3
										sv_cntrl_setpumpspeed(DCMOTOR2,500);
   8361c:	2002      	movs	r0, #2
   8361e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   83622:	4b9a      	ldr	r3, [pc, #616]	; (8388c <Cl_bc_controller+0x580>)
   83624:	4798      	blx	r3
										sv_cntrl_setpumpspeed(DCMOTOR1,1000);
   83626:	2001      	movs	r0, #1
   83628:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   8362c:	4b97      	ldr	r3, [pc, #604]	; (8388c <Cl_bc_controller+0x580>)
   8362e:	4798      	blx	r3
										
										if(disinfopenfillcounter++ > 600){
   83630:	4b97      	ldr	r3, [pc, #604]	; (83890 <Cl_bc_controller+0x584>)
   83632:	881b      	ldrh	r3, [r3, #0]
   83634:	b29b      	uxth	r3, r3
   83636:	b29a      	uxth	r2, r3
   83638:	3201      	adds	r2, #1
   8363a:	b292      	uxth	r2, r2
   8363c:	b291      	uxth	r1, r2
   8363e:	4a94      	ldr	r2, [pc, #592]	; (83890 <Cl_bc_controller+0x584>)
   83640:	8011      	strh	r1, [r2, #0]
   83642:	b21b      	sxth	r3, r3
   83644:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   83648:	dd27      	ble.n	8369a <Cl_bc_controller+0x38e>
											
											openfillcounter = 0;
   8364a:	4b92      	ldr	r3, [pc, #584]	; (83894 <Cl_bc_controller+0x588>)
   8364c:	2200      	movs	r2, #0
   8364e:	801a      	strh	r2, [r3, #0]
											disinfopenfillcounter = 0;
   83650:	4b8f      	ldr	r3, [pc, #572]	; (83890 <Cl_bc_controller+0x584>)
   83652:	2200      	movs	r2, #0
   83654:	801a      	strh	r2, [r3, #0]
											cl_bc_returncode = (Cl_ReturnCodeType)sv_cntrl_setflowpath(BC_FLUSH_1_V13_14);
   83656:	2005      	movs	r0, #5
   83658:	4b8f      	ldr	r3, [pc, #572]	; (83898 <Cl_bc_controller+0x58c>)
   8365a:	4798      	blx	r3
   8365c:	4603      	mov	r3, r0
   8365e:	73fb      	strb	r3, [r7, #15]
											cl_bc_returncode = sv_cntrl_deactivate_valve(VALVE_ID19);
   83660:	2013      	movs	r0, #19
   83662:	4b8e      	ldr	r3, [pc, #568]	; (8389c <Cl_bc_controller+0x590>)
   83664:	4798      	blx	r3
   83666:	4603      	mov	r3, r0
   83668:	73fb      	strb	r3, [r7, #15]
											cl_bc_returncode = Cl_mac_apprequesthandler(MACREQ_BC_OPENFILL_COMPLETED);
   8366a:	2051      	movs	r0, #81	; 0x51
   8366c:	4b8c      	ldr	r3, [pc, #560]	; (838a0 <Cl_bc_controller+0x594>)
   8366e:	4798      	blx	r3
   83670:	4603      	mov	r3, r0
   83672:	73fb      	strb	r3, [r7, #15]
											if(cl_bc_returncode == CL_OK)
   83674:	7bfb      	ldrb	r3, [r7, #15]
   83676:	2b00      	cmp	r3, #0
   83678:	d10f      	bne.n	8369a <Cl_bc_controller+0x38e>
											{
												Cl_AlarmActivateAlarms(BC_ALARM,false);
   8367a:	201a      	movs	r0, #26
   8367c:	2100      	movs	r1, #0
   8367e:	4b89      	ldr	r3, [pc, #548]	; (838a4 <Cl_bc_controller+0x598>)
   83680:	4798      	blx	r3
												bc_laststate = bc_state;
   83682:	4b89      	ldr	r3, [pc, #548]	; (838a8 <Cl_bc_controller+0x59c>)
   83684:	781a      	ldrb	r2, [r3, #0]
   83686:	4b89      	ldr	r3, [pc, #548]	; (838ac <Cl_bc_controller+0x5a0>)
   83688:	701a      	strb	r2, [r3, #0]
												bc_state = CL_BC_STATE_BO1_V13V14_TRANSITION;
   8368a:	4b87      	ldr	r3, [pc, #540]	; (838a8 <Cl_bc_controller+0x59c>)
   8368c:	220c      	movs	r2, #12
   8368e:	701a      	strb	r2, [r3, #0]
												bc_laststate = bc_state;
   83690:	4b85      	ldr	r3, [pc, #532]	; (838a8 <Cl_bc_controller+0x59c>)
   83692:	781a      	ldrb	r2, [r3, #0]
   83694:	4b85      	ldr	r3, [pc, #532]	; (838ac <Cl_bc_controller+0x5a0>)
   83696:	701a      	strb	r2, [r3, #0]
   83698:	e0c2      	b.n	83820 <Cl_bc_controller+0x514>
   8369a:	e0c1      	b.n	83820 <Cl_bc_controller+0x514>
								}
								
								else{
								
								
								if(openfillcounter++ > CL_BC_OPENFILL_TIMEOUT * 60)
   8369c:	4b7d      	ldr	r3, [pc, #500]	; (83894 <Cl_bc_controller+0x588>)
   8369e:	881b      	ldrh	r3, [r3, #0]
   836a0:	b29b      	uxth	r3, r3
   836a2:	b29a      	uxth	r2, r3
   836a4:	3201      	adds	r2, #1
   836a6:	b292      	uxth	r2, r2
   836a8:	b291      	uxth	r1, r2
   836aa:	4a7a      	ldr	r2, [pc, #488]	; (83894 <Cl_bc_controller+0x588>)
   836ac:	8011      	strh	r1, [r2, #0]
   836ae:	b21b      	sxth	r3, r3
   836b0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   836b4:	f340 80b4 	ble.w	83820 <Cl_bc_controller+0x514>
								{
									
									
									if (openfill_flag == 1)
   836b8:	4b72      	ldr	r3, [pc, #456]	; (83884 <Cl_bc_controller+0x578>)
   836ba:	781b      	ldrb	r3, [r3, #0]
   836bc:	2b01      	cmp	r3, #1
   836be:	d10d      	bne.n	836dc <Cl_bc_controller+0x3d0>
									{
										//sv_prop_stopopenfill();
										openfillcounter = 0;
   836c0:	4b74      	ldr	r3, [pc, #464]	; (83894 <Cl_bc_controller+0x588>)
   836c2:	2200      	movs	r2, #0
   836c4:	801a      	strh	r2, [r3, #0]
										
										sv_cntrl_setpumpspeed(DCMOTOR2,500);
   836c6:	2002      	movs	r0, #2
   836c8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   836cc:	4b6f      	ldr	r3, [pc, #444]	; (8388c <Cl_bc_controller+0x580>)
   836ce:	4798      	blx	r3
										sv_cntrl_setpumpspeed(DCMOTOR1,1000);
   836d0:	2001      	movs	r0, #1
   836d2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   836d6:	4b6d      	ldr	r3, [pc, #436]	; (8388c <Cl_bc_controller+0x580>)
   836d8:	4798      	blx	r3
   836da:	e06d      	b.n	837b8 <Cl_bc_controller+0x4ac>
										
									}
									else
									{
									sv_prop_stopopenfill();
   836dc:	4b74      	ldr	r3, [pc, #464]	; (838b0 <Cl_bc_controller+0x5a4>)
   836de:	4798      	blx	r3
									sv_prop_startpropeo_aligning();
   836e0:	4b74      	ldr	r3, [pc, #464]	; (838b4 <Cl_bc_controller+0x5a8>)
   836e2:	4798      	blx	r3
							
									openfillcounter = 0;
   836e4:	4b6b      	ldr	r3, [pc, #428]	; (83894 <Cl_bc_controller+0x588>)
   836e6:	2200      	movs	r2, #0
   836e8:	801a      	strh	r2, [r3, #0]
										
										sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   836ea:	2002      	movs	r0, #2
   836ec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   836f0:	4b66      	ldr	r3, [pc, #408]	; (8388c <Cl_bc_controller+0x580>)
   836f2:	4798      	blx	r3
										sv_cntrl_setpumpspeed(DCMOTOR1,1100);
   836f4:	2001      	movs	r0, #1
   836f6:	f240 414c 	movw	r1, #1100	; 0x44c
   836fa:	4b64      	ldr	r3, [pc, #400]	; (8388c <Cl_bc_controller+0x580>)
   836fc:	4798      	blx	r3
										potvalue = (670 * 1024)/10000;                                 // added on 30.06.2017
   836fe:	4b6e      	ldr	r3, [pc, #440]	; (838b8 <Cl_bc_controller+0x5ac>)
   83700:	2244      	movs	r2, #68	; 0x44
   83702:	801a      	strh	r2, [r3, #0]
										sv_cs_setpotvalue(potvalue);
   83704:	4b6c      	ldr	r3, [pc, #432]	; (838b8 <Cl_bc_controller+0x5ac>)
   83706:	881b      	ldrh	r3, [r3, #0]
   83708:	4618      	mov	r0, r3
   8370a:	4b5f      	ldr	r3, [pc, #380]	; (83888 <Cl_bc_controller+0x57c>)
   8370c:	4798      	blx	r3
										if (hotrinse_flag == 1)
   8370e:	4b6b      	ldr	r3, [pc, #428]	; (838bc <Cl_bc_controller+0x5b0>)
   83710:	781b      	ldrb	r3, [r3, #0]
   83712:	2b01      	cmp	r3, #1
   83714:	d150      	bne.n	837b8 <Cl_bc_controller+0x4ac>
										{
											 
											 sv_cntrl_setpumpspeed(DCMOTOR2,600);
   83716:	2002      	movs	r0, #2
   83718:	f44f 7116 	mov.w	r1, #600	; 0x258
   8371c:	4b5b      	ldr	r3, [pc, #364]	; (8388c <Cl_bc_controller+0x580>)
   8371e:	4798      	blx	r3
											 sv_cntrl_setpumpspeed(DCMOTOR1,1100);
   83720:	2001      	movs	r0, #1
   83722:	f240 414c 	movw	r1, #1100	; 0x44c
   83726:	4b59      	ldr	r3, [pc, #356]	; (8388c <Cl_bc_controller+0x580>)
   83728:	4798      	blx	r3
												sv_cntrl_enable_loopback();
   8372a:	4b65      	ldr	r3, [pc, #404]	; (838c0 <Cl_bc_controller+0x5b4>)
   8372c:	4798      	blx	r3
										//		sv_cntrl_enable_bypass();									// commented on 30.06.2017
										    
											potvalue = (800 * 1024)/10000;                                 // added on 30.06.2017
   8372e:	4b62      	ldr	r3, [pc, #392]	; (838b8 <Cl_bc_controller+0x5ac>)
   83730:	2251      	movs	r2, #81	; 0x51
   83732:	801a      	strh	r2, [r3, #0]
											sv_cs_setpotvalue(potvalue);
   83734:	4b60      	ldr	r3, [pc, #384]	; (838b8 <Cl_bc_controller+0x5ac>)
   83736:	881b      	ldrh	r3, [r3, #0]
   83738:	4618      	mov	r0, r3
   8373a:	4b53      	ldr	r3, [pc, #332]	; (83888 <Cl_bc_controller+0x57c>)
   8373c:	4798      	blx	r3
											
												sv_cntrl_poweronheater();
   8373e:	4b61      	ldr	r3, [pc, #388]	; (838c4 <Cl_bc_controller+0x5b8>)
   83740:	4798      	blx	r3
												sv_cntrl_incheater(4000);
   83742:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
   83746:	4b60      	ldr	r3, [pc, #384]	; (838c8 <Cl_bc_controller+0x5bc>)
   83748:	4798      	blx	r3
												SetHeaterState(CL_HEATER_STATE_ON);
   8374a:	2001      	movs	r0, #1
   8374c:	4b5f      	ldr	r3, [pc, #380]	; (838cc <Cl_bc_controller+0x5c0>)
   8374e:	4798      	blx	r3
												Cl_Heater_Event_Handler(CL_HEATER_EVENT_TARGET_TEMP , 80);
   83750:	2005      	movs	r0, #5
   83752:	495f      	ldr	r1, [pc, #380]	; (838d0 <Cl_bc_controller+0x5c4>)
   83754:	4b5f      	ldr	r3, [pc, #380]	; (838d4 <Cl_bc_controller+0x5c8>)
   83756:	4798      	blx	r3
											
											sv_cntrl_activate_valve(VALVE_ID2);
   83758:	2002      	movs	r0, #2
   8375a:	4b5f      	ldr	r3, [pc, #380]	; (838d8 <Cl_bc_controller+0x5cc>)
   8375c:	4798      	blx	r3
											sv_cntrl_activate_valve(VALVE_ID3);
   8375e:	2003      	movs	r0, #3
   83760:	4b5d      	ldr	r3, [pc, #372]	; (838d8 <Cl_bc_controller+0x5cc>)
   83762:	4798      	blx	r3
											sv_prop_startmixing();
   83764:	4b5d      	ldr	r3, [pc, #372]	; (838dc <Cl_bc_controller+0x5d0>)
   83766:	4798      	blx	r3
											cl_uf_controller(CL_UF_EVENT_START,0);
   83768:	2002      	movs	r0, #2
   8376a:	2100      	movs	r1, #0
   8376c:	4b5c      	ldr	r3, [pc, #368]	; (838e0 <Cl_bc_controller+0x5d4>)
   8376e:	4798      	blx	r3
											cl_ufpumpFeedback_start();
   83770:	4b5c      	ldr	r3, [pc, #368]	; (838e4 <Cl_bc_controller+0x5d8>)
   83772:	4798      	blx	r3
											cl_wait(100);
   83774:	2064      	movs	r0, #100	; 0x64
   83776:	4b5c      	ldr	r3, [pc, #368]	; (838e8 <Cl_bc_controller+0x5dc>)
   83778:	4798      	blx	r3
											cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,16000);
   8377a:	2001      	movs	r0, #1
   8377c:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
   83780:	4b57      	ldr	r3, [pc, #348]	; (838e0 <Cl_bc_controller+0x5d4>)
   83782:	4798      	blx	r3
											cl_wait(200);
   83784:	20c8      	movs	r0, #200	; 0xc8
   83786:	4b58      	ldr	r3, [pc, #352]	; (838e8 <Cl_bc_controller+0x5dc>)
   83788:	4798      	blx	r3
											cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,8000);
   8378a:	2001      	movs	r0, #1
   8378c:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
   83790:	4b53      	ldr	r3, [pc, #332]	; (838e0 <Cl_bc_controller+0x5d4>)
   83792:	4798      	blx	r3
											cl_wait(600);
   83794:	f44f 7016 	mov.w	r0, #600	; 0x258
   83798:	4b53      	ldr	r3, [pc, #332]	; (838e8 <Cl_bc_controller+0x5dc>)
   8379a:	4798      	blx	r3
											cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,5000);
   8379c:	2001      	movs	r0, #1
   8379e:	f241 3188 	movw	r1, #5000	; 0x1388
   837a2:	4b4f      	ldr	r3, [pc, #316]	; (838e0 <Cl_bc_controller+0x5d4>)
   837a4:	4798      	blx	r3
											cl_wait(800);
   837a6:	f44f 7048 	mov.w	r0, #800	; 0x320
   837aa:	4b4f      	ldr	r3, [pc, #316]	; (838e8 <Cl_bc_controller+0x5dc>)
   837ac:	4798      	blx	r3
											cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,2500);
   837ae:	2001      	movs	r0, #1
   837b0:	f640 11c4 	movw	r1, #2500	; 0x9c4
   837b4:	4b4a      	ldr	r3, [pc, #296]	; (838e0 <Cl_bc_controller+0x5d4>)
   837b6:	4798      	blx	r3
										
									}
								//	sv_prop_startmixing();
								//	SetHeaterState(CL_HEATER_STATE_START);
//check	
									potvalue = (650 * 1024)/10000;                                 // added on 30.06.2017
   837b8:	4b3f      	ldr	r3, [pc, #252]	; (838b8 <Cl_bc_controller+0x5ac>)
   837ba:	2242      	movs	r2, #66	; 0x42
   837bc:	801a      	strh	r2, [r3, #0]
									sv_cs_setpotvalue(potvalue);
   837be:	4b3e      	ldr	r3, [pc, #248]	; (838b8 <Cl_bc_controller+0x5ac>)
   837c0:	881b      	ldrh	r3, [r3, #0]
   837c2:	4618      	mov	r0, r3
   837c4:	4b30      	ldr	r3, [pc, #192]	; (83888 <Cl_bc_controller+0x57c>)
   837c6:	4798      	blx	r3

									sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   837c8:	2002      	movs	r0, #2
   837ca:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   837ce:	4b2f      	ldr	r3, [pc, #188]	; (8388c <Cl_bc_controller+0x580>)
   837d0:	4798      	blx	r3
									sv_cntrl_setpumpspeed(DCMOTOR1,1000);  //960
   837d2:	2001      	movs	r0, #1
   837d4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   837d8:	4b2c      	ldr	r3, [pc, #176]	; (8388c <Cl_bc_controller+0x580>)
   837da:	4798      	blx	r3
									
									
									cl_bc_returncode = (Cl_ReturnCodeType)sv_cntrl_setflowpath(BC_FLUSH_1_V13_14);
   837dc:	2005      	movs	r0, #5
   837de:	4b2e      	ldr	r3, [pc, #184]	; (83898 <Cl_bc_controller+0x58c>)
   837e0:	4798      	blx	r3
   837e2:	4603      	mov	r3, r0
   837e4:	73fb      	strb	r3, [r7, #15]
									cl_bc_returncode = sv_cntrl_deactivate_valve(VALVE_ID19);
   837e6:	2013      	movs	r0, #19
   837e8:	4b2c      	ldr	r3, [pc, #176]	; (8389c <Cl_bc_controller+0x590>)
   837ea:	4798      	blx	r3
   837ec:	4603      	mov	r3, r0
   837ee:	73fb      	strb	r3, [r7, #15]
									cl_bc_returncode = Cl_mac_apprequesthandler(MACREQ_BC_OPENFILL_COMPLETED);
   837f0:	2051      	movs	r0, #81	; 0x51
   837f2:	4b2b      	ldr	r3, [pc, #172]	; (838a0 <Cl_bc_controller+0x594>)
   837f4:	4798      	blx	r3
   837f6:	4603      	mov	r3, r0
   837f8:	73fb      	strb	r3, [r7, #15]
									if(cl_bc_returncode == CL_OK)
   837fa:	7bfb      	ldrb	r3, [r7, #15]
   837fc:	2b00      	cmp	r3, #0
   837fe:	d10f      	bne.n	83820 <Cl_bc_controller+0x514>
									{
										Cl_AlarmActivateAlarms(BC_ALARM,false);
   83800:	201a      	movs	r0, #26
   83802:	2100      	movs	r1, #0
   83804:	4b27      	ldr	r3, [pc, #156]	; (838a4 <Cl_bc_controller+0x598>)
   83806:	4798      	blx	r3
										bc_laststate = bc_state;
   83808:	4b27      	ldr	r3, [pc, #156]	; (838a8 <Cl_bc_controller+0x59c>)
   8380a:	781a      	ldrb	r2, [r3, #0]
   8380c:	4b27      	ldr	r3, [pc, #156]	; (838ac <Cl_bc_controller+0x5a0>)
   8380e:	701a      	strb	r2, [r3, #0]
										bc_state = CL_BC_STATE_BO1_V13V14_TRANSITION;
   83810:	4b25      	ldr	r3, [pc, #148]	; (838a8 <Cl_bc_controller+0x59c>)
   83812:	220c      	movs	r2, #12
   83814:	701a      	strb	r2, [r3, #0]
										bc_laststate = bc_state;
   83816:	4b24      	ldr	r3, [pc, #144]	; (838a8 <Cl_bc_controller+0x59c>)
   83818:	781a      	ldrb	r2, [r3, #0]
   8381a:	4b24      	ldr	r3, [pc, #144]	; (838ac <Cl_bc_controller+0x5a0>)
   8381c:	701a      	strb	r2, [r3, #0]
									}
								}
								}
								break;
   8381e:	e029      	b.n	83874 <Cl_bc_controller+0x568>
   83820:	e028      	b.n	83874 <Cl_bc_controller+0x568>
								case	BC_EVENT_CS:
								break;
								case BC_EVENT_STOP_FOR_BC1:
								openfillcounter = 0;
   83822:	4b1c      	ldr	r3, [pc, #112]	; (83894 <Cl_bc_controller+0x588>)
   83824:	2200      	movs	r2, #0
   83826:	801a      	strh	r2, [r3, #0]
								cl_bc_returncode = (Cl_ReturnCodeType)sv_cntrl_setflowpath(BC_FLUSH_1_V13_14);
   83828:	2005      	movs	r0, #5
   8382a:	4b1b      	ldr	r3, [pc, #108]	; (83898 <Cl_bc_controller+0x58c>)
   8382c:	4798      	blx	r3
   8382e:	4603      	mov	r3, r0
   83830:	73fb      	strb	r3, [r7, #15]
								if(cl_bc_returncode == CL_OK)
   83832:	7bfb      	ldrb	r3, [r7, #15]
   83834:	2b00      	cmp	r3, #0
   83836:	d107      	bne.n	83848 <Cl_bc_controller+0x53c>
								{
									bc_laststate = bc_state;
   83838:	4b1b      	ldr	r3, [pc, #108]	; (838a8 <Cl_bc_controller+0x59c>)
   8383a:	781a      	ldrb	r2, [r3, #0]
   8383c:	4b1b      	ldr	r3, [pc, #108]	; (838ac <Cl_bc_controller+0x5a0>)
   8383e:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_STOPPED_FOR_BC1;
   83840:	4b19      	ldr	r3, [pc, #100]	; (838a8 <Cl_bc_controller+0x59c>)
   83842:	2210      	movs	r2, #16
   83844:	701a      	strb	r2, [r3, #0]
								}
								break;
   83846:	e015      	b.n	83874 <Cl_bc_controller+0x568>
   83848:	e014      	b.n	83874 <Cl_bc_controller+0x568>
								case BC_EVENT_STOP_FOR_BC2:
								openfillcounter = 0;
   8384a:	4b12      	ldr	r3, [pc, #72]	; (83894 <Cl_bc_controller+0x588>)
   8384c:	2200      	movs	r2, #0
   8384e:	801a      	strh	r2, [r3, #0]
								cl_bc_returncode = (Cl_ReturnCodeType)sv_cntrl_setflowpath(BC_FLUSH_2_V13_14);
   83850:	2006      	movs	r0, #6
   83852:	4b11      	ldr	r3, [pc, #68]	; (83898 <Cl_bc_controller+0x58c>)
   83854:	4798      	blx	r3
   83856:	4603      	mov	r3, r0
   83858:	73fb      	strb	r3, [r7, #15]
								if(cl_bc_returncode == CL_OK)
   8385a:	7bfb      	ldrb	r3, [r7, #15]
   8385c:	2b00      	cmp	r3, #0
   8385e:	d107      	bne.n	83870 <Cl_bc_controller+0x564>
								{
									bc_laststate = bc_state;
   83860:	4b11      	ldr	r3, [pc, #68]	; (838a8 <Cl_bc_controller+0x59c>)
   83862:	781a      	ldrb	r2, [r3, #0]
   83864:	4b11      	ldr	r3, [pc, #68]	; (838ac <Cl_bc_controller+0x5a0>)
   83866:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_STOPPED_FOR_BC2;
   83868:	4b0f      	ldr	r3, [pc, #60]	; (838a8 <Cl_bc_controller+0x59c>)
   8386a:	2212      	movs	r2, #18
   8386c:	701a      	strb	r2, [r3, #0]
								}
								break;
   8386e:	e001      	b.n	83874 <Cl_bc_controller+0x568>
   83870:	e000      	b.n	83874 <Cl_bc_controller+0x568>
								default:break;
   83872:	bf00      	nop
							}
			break;
   83874:	e398      	b.n	83fa8 <Cl_bc_controller+0xc9c>
			case CL_BC_STATE_V15OPEN_TRANSITION:
							switch(cl_bc_event)
   83876:	79fb      	ldrb	r3, [r7, #7]
   83878:	2b01      	cmp	r3, #1
   8387a:	d037      	beq.n	838ec <Cl_bc_controller+0x5e0>
   8387c:	2b02      	cmp	r3, #2
   8387e:	d039      	beq.n	838f4 <Cl_bc_controller+0x5e8>
									bc_laststate = bc_state;
									bc_state = CL_BC_STATE_V15OPEN;
									bc_wait = false;
								}
								break;
								default:break;
   83880:	e048      	b.n	83914 <Cl_bc_controller+0x608>
   83882:	bf00      	nop
   83884:	20071c12 	.word	0x20071c12
   83888:	0009a175 	.word	0x0009a175
   8388c:	00099d45 	.word	0x00099d45
   83890:	20071768 	.word	0x20071768
   83894:	20071766 	.word	0x20071766
   83898:	00099ebd 	.word	0x00099ebd
   8389c:	00099ced 	.word	0x00099ced
   838a0:	0008bc51 	.word	0x0008bc51
   838a4:	00082e61 	.word	0x00082e61
   838a8:	20071761 	.word	0x20071761
   838ac:	20071762 	.word	0x20071762
   838b0:	0009a151 	.word	0x0009a151
   838b4:	0009a049 	.word	0x0009a049
   838b8:	2007176a 	.word	0x2007176a
   838bc:	20071cc1 	.word	0x20071cc1
   838c0:	00099e41 	.word	0x00099e41
   838c4:	00099ca5 	.word	0x00099ca5
   838c8:	00099dad 	.word	0x00099dad
   838cc:	000894d9 	.word	0x000894d9
   838d0:	42a00000 	.word	0x42a00000
   838d4:	00089451 	.word	0x00089451
   838d8:	00099ccd 	.word	0x00099ccd
   838dc:	0009a075 	.word	0x0009a075
   838e0:	00095df5 	.word	0x00095df5
   838e4:	00095da5 	.word	0x00095da5
   838e8:	00093195 	.word	0x00093195
			case CL_BC_STATE_V15OPEN_TRANSITION:
							switch(cl_bc_event)
							{
								
								case BC_EVENT_500MS:
									bc_wait = true;
   838ec:	4b9b      	ldr	r3, [pc, #620]	; (83b5c <Cl_bc_controller+0x850>)
   838ee:	2201      	movs	r2, #1
   838f0:	701a      	strb	r2, [r3, #0]
								
								break;
   838f2:	e00f      	b.n	83914 <Cl_bc_controller+0x608>
								case BC_EVENT_SECOND:
								if(bc_wait == true)
   838f4:	4b99      	ldr	r3, [pc, #612]	; (83b5c <Cl_bc_controller+0x850>)
   838f6:	781b      	ldrb	r3, [r3, #0]
   838f8:	2b00      	cmp	r3, #0
   838fa:	d00a      	beq.n	83912 <Cl_bc_controller+0x606>
								{
									bc_laststate = bc_state;
   838fc:	4b98      	ldr	r3, [pc, #608]	; (83b60 <Cl_bc_controller+0x854>)
   838fe:	781a      	ldrb	r2, [r3, #0]
   83900:	4b98      	ldr	r3, [pc, #608]	; (83b64 <Cl_bc_controller+0x858>)
   83902:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_V15OPEN;
   83904:	4b96      	ldr	r3, [pc, #600]	; (83b60 <Cl_bc_controller+0x854>)
   83906:	2205      	movs	r2, #5
   83908:	701a      	strb	r2, [r3, #0]
									bc_wait = false;
   8390a:	4b94      	ldr	r3, [pc, #592]	; (83b5c <Cl_bc_controller+0x850>)
   8390c:	2200      	movs	r2, #0
   8390e:	701a      	strb	r2, [r3, #0]
								}
								break;
   83910:	e7ff      	b.n	83912 <Cl_bc_controller+0x606>
   83912:	bf00      	nop
								default:break;
							}
			break;
   83914:	e348      	b.n	83fa8 <Cl_bc_controller+0xc9c>
			case CL_BC_STATE_V15OPEN:
							switch(cl_bc_event)
   83916:	79fb      	ldrb	r3, [r7, #7]
   83918:	2b02      	cmp	r3, #2
   8391a:	d004      	beq.n	83926 <Cl_bc_controller+0x61a>
   8391c:	2b03      	cmp	r3, #3
   8391e:	d004      	beq.n	8392a <Cl_bc_controller+0x61e>
   83920:	2b01      	cmp	r3, #1
   83922:	d004      	beq.n	8392e <Cl_bc_controller+0x622>
								case	BC_EVENT_SECOND:
										
								break;
								case	BC_EVENT_CS:
								break;
								default:break;
   83924:	e004      	b.n	83930 <Cl_bc_controller+0x624>
							{
								case 	BC_EVENT_500MS:
								break;
								case	BC_EVENT_SECOND:
										
								break;
   83926:	bf00      	nop
   83928:	e33e      	b.n	83fa8 <Cl_bc_controller+0xc9c>
								case	BC_EVENT_CS:
								break;
   8392a:	bf00      	nop
   8392c:	e33c      	b.n	83fa8 <Cl_bc_controller+0xc9c>
			break;
			case CL_BC_STATE_V15OPEN:
							switch(cl_bc_event)
							{
								case 	BC_EVENT_500MS:
								break;
   8392e:	bf00      	nop
								break;
								case	BC_EVENT_CS:
								break;
								default:break;
							}
			break;
   83930:	e33a      	b.n	83fa8 <Cl_bc_controller+0xc9c>
			case CL_BC_STATE_V2OPEN_TRANSITION:
							switch(cl_bc_event)
   83932:	79fb      	ldrb	r3, [r7, #7]
   83934:	2b01      	cmp	r3, #1
   83936:	d002      	beq.n	8393e <Cl_bc_controller+0x632>
   83938:	2b02      	cmp	r3, #2
   8393a:	d004      	beq.n	83946 <Cl_bc_controller+0x63a>
									bc_laststate = bc_state;
									bc_state = CL_BC_STATE_V2OPEN;
									bc_wait = false;
								}
								break;
								default:break;
   8393c:	e013      	b.n	83966 <Cl_bc_controller+0x65a>
			case CL_BC_STATE_V2OPEN_TRANSITION:
							switch(cl_bc_event)
							{
								
								case BC_EVENT_500MS:
								bc_wait = true;
   8393e:	4b87      	ldr	r3, [pc, #540]	; (83b5c <Cl_bc_controller+0x850>)
   83940:	2201      	movs	r2, #1
   83942:	701a      	strb	r2, [r3, #0]
								
								break;
   83944:	e00f      	b.n	83966 <Cl_bc_controller+0x65a>
								case BC_EVENT_SECOND:
								if(bc_wait == true)
   83946:	4b85      	ldr	r3, [pc, #532]	; (83b5c <Cl_bc_controller+0x850>)
   83948:	781b      	ldrb	r3, [r3, #0]
   8394a:	2b00      	cmp	r3, #0
   8394c:	d00a      	beq.n	83964 <Cl_bc_controller+0x658>
								{
									bc_laststate = bc_state;
   8394e:	4b84      	ldr	r3, [pc, #528]	; (83b60 <Cl_bc_controller+0x854>)
   83950:	781a      	ldrb	r2, [r3, #0]
   83952:	4b84      	ldr	r3, [pc, #528]	; (83b64 <Cl_bc_controller+0x858>)
   83954:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_V2OPEN;
   83956:	4b82      	ldr	r3, [pc, #520]	; (83b60 <Cl_bc_controller+0x854>)
   83958:	2207      	movs	r2, #7
   8395a:	701a      	strb	r2, [r3, #0]
									bc_wait = false;
   8395c:	4b7f      	ldr	r3, [pc, #508]	; (83b5c <Cl_bc_controller+0x850>)
   8395e:	2200      	movs	r2, #0
   83960:	701a      	strb	r2, [r3, #0]
								}
								break;
   83962:	e7ff      	b.n	83964 <Cl_bc_controller+0x658>
   83964:	bf00      	nop
								default:break;
							}
			break;
   83966:	e31f      	b.n	83fa8 <Cl_bc_controller+0xc9c>
			case CL_BC_STATE_V2OPEN:
							switch(cl_bc_event)
   83968:	79fb      	ldrb	r3, [r7, #7]
   8396a:	2b02      	cmp	r3, #2
   8396c:	d004      	beq.n	83978 <Cl_bc_controller+0x66c>
   8396e:	2b03      	cmp	r3, #3
   83970:	d004      	beq.n	8397c <Cl_bc_controller+0x670>
   83972:	2b01      	cmp	r3, #1
   83974:	d004      	beq.n	83980 <Cl_bc_controller+0x674>
								break;
								case	BC_EVENT_SECOND:
								break;
								case	BC_EVENT_CS:
								break;
								default:break;
   83976:	e004      	b.n	83982 <Cl_bc_controller+0x676>
							switch(cl_bc_event)
							{
								case 	BC_EVENT_500MS:
								break;
								case	BC_EVENT_SECOND:
								break;
   83978:	bf00      	nop
   8397a:	e315      	b.n	83fa8 <Cl_bc_controller+0xc9c>
								case	BC_EVENT_CS:
								break;
   8397c:	bf00      	nop
   8397e:	e313      	b.n	83fa8 <Cl_bc_controller+0xc9c>
			break;
			case CL_BC_STATE_V2OPEN:
							switch(cl_bc_event)
							{
								case 	BC_EVENT_500MS:
								break;
   83980:	bf00      	nop
								break;
								case	BC_EVENT_CS:
								break;
								default:break;
							}
			break;
   83982:	e311      	b.n	83fa8 <Cl_bc_controller+0xc9c>
			case CL_BC_STATE_BO1_V4_TRANSITION:
							switch(cl_bc_event)
   83984:	79fb      	ldrb	r3, [r7, #7]
   83986:	2b01      	cmp	r3, #1
   83988:	d002      	beq.n	83990 <Cl_bc_controller+0x684>
   8398a:	2b02      	cmp	r3, #2
   8398c:	d00b      	beq.n	839a6 <Cl_bc_controller+0x69a>
							//		bc_laststate = bc_state;
							//		bc_state = CL_BC_STATE_BO1_V4;
							//		bc_wait = false;
								}
								break;
								default:break;
   8398e:	e00b      	b.n	839a8 <Cl_bc_controller+0x69c>
			case CL_BC_STATE_BO1_V4_TRANSITION:
							switch(cl_bc_event)
							{
								
								case BC_EVENT_500MS:
									bc_laststate = bc_state;
   83990:	4b73      	ldr	r3, [pc, #460]	; (83b60 <Cl_bc_controller+0x854>)
   83992:	781a      	ldrb	r2, [r3, #0]
   83994:	4b73      	ldr	r3, [pc, #460]	; (83b64 <Cl_bc_controller+0x858>)
   83996:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_BO1_V4;
   83998:	4b71      	ldr	r3, [pc, #452]	; (83b60 <Cl_bc_controller+0x854>)
   8399a:	2209      	movs	r2, #9
   8399c:	701a      	strb	r2, [r3, #0]
									bc_wait = false;
   8399e:	4b6f      	ldr	r3, [pc, #444]	; (83b5c <Cl_bc_controller+0x850>)
   839a0:	2200      	movs	r2, #0
   839a2:	701a      	strb	r2, [r3, #0]
								break;
   839a4:	e000      	b.n	839a8 <Cl_bc_controller+0x69c>
								{
							//		bc_laststate = bc_state;
							//		bc_state = CL_BC_STATE_BO1_V4;
							//		bc_wait = false;
								}
								break;
   839a6:	bf00      	nop
								default:break;
							}
			break;
   839a8:	e2fe      	b.n	83fa8 <Cl_bc_controller+0xc9c>
			case CL_BC_STATE_BO1_V4:
							switch(cl_bc_event)
   839aa:	79fb      	ldrb	r3, [r7, #7]
   839ac:	2b02      	cmp	r3, #2
   839ae:	d004      	beq.n	839ba <Cl_bc_controller+0x6ae>
   839b0:	2b03      	cmp	r3, #3
   839b2:	d004      	beq.n	839be <Cl_bc_controller+0x6b2>
   839b4:	2b01      	cmp	r3, #1
   839b6:	d004      	beq.n	839c2 <Cl_bc_controller+0x6b6>
								break;
								case	BC_EVENT_SECOND:
								break;
								case	BC_EVENT_CS:
								break;
								default:break;
   839b8:	e004      	b.n	839c4 <Cl_bc_controller+0x6b8>
							switch(cl_bc_event)
							{
								case 	BC_EVENT_500MS:
								break;
								case	BC_EVENT_SECOND:
								break;
   839ba:	bf00      	nop
   839bc:	e2f4      	b.n	83fa8 <Cl_bc_controller+0xc9c>
								case	BC_EVENT_CS:
								break;
   839be:	bf00      	nop
   839c0:	e2f2      	b.n	83fa8 <Cl_bc_controller+0xc9c>
			break;
			case CL_BC_STATE_BO1_V4:
							switch(cl_bc_event)
							{
								case 	BC_EVENT_500MS:
								break;
   839c2:	bf00      	nop
								break;
								case	BC_EVENT_CS:
								break;
								default:break;
							}
			break;
   839c4:	e2f0      	b.n	83fa8 <Cl_bc_controller+0xc9c>
			case CL_BC_STATE_BO2_V4_TRANSITION:
							switch(cl_bc_event)
   839c6:	79fb      	ldrb	r3, [r7, #7]
   839c8:	2b01      	cmp	r3, #1
   839ca:	d002      	beq.n	839d2 <Cl_bc_controller+0x6c6>
   839cc:	2b02      	cmp	r3, #2
   839ce:	d004      	beq.n	839da <Cl_bc_controller+0x6ce>
									bc_laststate = bc_state;
									bc_state = CL_BC_STATE_BO2_V4;
									bc_wait = false;
								}
								break;
								default:break;
   839d0:	e013      	b.n	839fa <Cl_bc_controller+0x6ee>
			case CL_BC_STATE_BO2_V4_TRANSITION:
							switch(cl_bc_event)
							{
								
								case BC_EVENT_500MS:
								bc_wait = true;
   839d2:	4b62      	ldr	r3, [pc, #392]	; (83b5c <Cl_bc_controller+0x850>)
   839d4:	2201      	movs	r2, #1
   839d6:	701a      	strb	r2, [r3, #0]
								
								break;
   839d8:	e00f      	b.n	839fa <Cl_bc_controller+0x6ee>
								case BC_EVENT_SECOND:
								if(bc_wait == true)
   839da:	4b60      	ldr	r3, [pc, #384]	; (83b5c <Cl_bc_controller+0x850>)
   839dc:	781b      	ldrb	r3, [r3, #0]
   839de:	2b00      	cmp	r3, #0
   839e0:	d00a      	beq.n	839f8 <Cl_bc_controller+0x6ec>
								{
									bc_laststate = bc_state;
   839e2:	4b5f      	ldr	r3, [pc, #380]	; (83b60 <Cl_bc_controller+0x854>)
   839e4:	781a      	ldrb	r2, [r3, #0]
   839e6:	4b5f      	ldr	r3, [pc, #380]	; (83b64 <Cl_bc_controller+0x858>)
   839e8:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_BO2_V4;
   839ea:	4b5d      	ldr	r3, [pc, #372]	; (83b60 <Cl_bc_controller+0x854>)
   839ec:	220b      	movs	r2, #11
   839ee:	701a      	strb	r2, [r3, #0]
									bc_wait = false;
   839f0:	4b5a      	ldr	r3, [pc, #360]	; (83b5c <Cl_bc_controller+0x850>)
   839f2:	2200      	movs	r2, #0
   839f4:	701a      	strb	r2, [r3, #0]
								}
								break;
   839f6:	e7ff      	b.n	839f8 <Cl_bc_controller+0x6ec>
   839f8:	bf00      	nop
								default:break;
							}
			break;
   839fa:	e2d5      	b.n	83fa8 <Cl_bc_controller+0xc9c>
			case CL_BC_STATE_BO2_V4:
							switch(cl_bc_event)
   839fc:	79fb      	ldrb	r3, [r7, #7]
   839fe:	2b02      	cmp	r3, #2
   83a00:	d004      	beq.n	83a0c <Cl_bc_controller+0x700>
   83a02:	2b03      	cmp	r3, #3
   83a04:	d004      	beq.n	83a10 <Cl_bc_controller+0x704>
   83a06:	2b01      	cmp	r3, #1
   83a08:	d004      	beq.n	83a14 <Cl_bc_controller+0x708>
								break;
								case	BC_EVENT_SECOND:
								break;
								case	BC_EVENT_CS:
								break;
								default:break;
   83a0a:	e004      	b.n	83a16 <Cl_bc_controller+0x70a>
							switch(cl_bc_event)
							{
								case 	BC_EVENT_500MS:
								break;
								case	BC_EVENT_SECOND:
								break;
   83a0c:	bf00      	nop
   83a0e:	e2cb      	b.n	83fa8 <Cl_bc_controller+0xc9c>
								case	BC_EVENT_CS:
								break;
   83a10:	bf00      	nop
   83a12:	e2c9      	b.n	83fa8 <Cl_bc_controller+0xc9c>
			break;
			case CL_BC_STATE_BO2_V4:
							switch(cl_bc_event)
							{
								case 	BC_EVENT_500MS:
								break;
   83a14:	bf00      	nop
								break;
								case	BC_EVENT_CS:
								break;
								default:break;
							}
			break;
   83a16:	e2c7      	b.n	83fa8 <Cl_bc_controller+0xc9c>
			case CL_BC_STATE_BO1_V13V14_TRANSITION:
							switch(cl_bc_event)
   83a18:	79fb      	ldrb	r3, [r7, #7]
   83a1a:	2b00      	cmp	r3, #0
   83a1c:	d001      	beq.n	83a22 <Cl_bc_controller+0x716>
   83a1e:	2b02      	cmp	r3, #2
									
								}
								break;
								case BC_EVENT_SECOND:
						
								break;
   83a20:	e030      	b.n	83a84 <Cl_bc_controller+0x778>
			break;
			case CL_BC_STATE_BO1_V13V14_TRANSITION:
							switch(cl_bc_event)
							{
								case BC_EVENT_50MS:
								fill_time++;
   83a22:	4b51      	ldr	r3, [pc, #324]	; (83b68 <Cl_bc_controller+0x85c>)
   83a24:	881b      	ldrh	r3, [r3, #0]
   83a26:	b29b      	uxth	r3, r3
   83a28:	b29b      	uxth	r3, r3
   83a2a:	3301      	adds	r3, #1
   83a2c:	b29b      	uxth	r3, r3
   83a2e:	b29a      	uxth	r2, r3
   83a30:	4b4d      	ldr	r3, [pc, #308]	; (83b68 <Cl_bc_controller+0x85c>)
   83a32:	801a      	strh	r2, [r3, #0]
								if(wait_counter < 20)
   83a34:	4b4d      	ldr	r3, [pc, #308]	; (83b6c <Cl_bc_controller+0x860>)
   83a36:	881b      	ldrh	r3, [r3, #0]
   83a38:	b21b      	sxth	r3, r3
   83a3a:	2b13      	cmp	r3, #19
   83a3c:	dc17      	bgt.n	83a6e <Cl_bc_controller+0x762>
								{
									if(wait_counter == 2)
   83a3e:	4b4b      	ldr	r3, [pc, #300]	; (83b6c <Cl_bc_controller+0x860>)
   83a40:	881b      	ldrh	r3, [r3, #0]
   83a42:	b21b      	sxth	r3, r3
   83a44:	2b02      	cmp	r3, #2
   83a46:	d108      	bne.n	83a5a <Cl_bc_controller+0x74e>
									{
										sv_cntrl_deactivate_valve(VALVE_ID20);
   83a48:	2014      	movs	r0, #20
   83a4a:	4b49      	ldr	r3, [pc, #292]	; (83b70 <Cl_bc_controller+0x864>)
   83a4c:	4798      	blx	r3
										sv_cntrl_deactivate_valve(VALVE_ID19);
   83a4e:	2013      	movs	r0, #19
   83a50:	4b47      	ldr	r3, [pc, #284]	; (83b70 <Cl_bc_controller+0x864>)
   83a52:	4798      	blx	r3
										sv_cntrl_deactivate_valve(VALVE_ID4);
   83a54:	2004      	movs	r0, #4
   83a56:	4b46      	ldr	r3, [pc, #280]	; (83b70 <Cl_bc_controller+0x864>)
   83a58:	4798      	blx	r3
									}
									wait_counter ++;	// 1 sec wait
   83a5a:	4b44      	ldr	r3, [pc, #272]	; (83b6c <Cl_bc_controller+0x860>)
   83a5c:	881b      	ldrh	r3, [r3, #0]
   83a5e:	b29b      	uxth	r3, r3
   83a60:	b29b      	uxth	r3, r3
   83a62:	3301      	adds	r3, #1
   83a64:	b29b      	uxth	r3, r3
   83a66:	b29a      	uxth	r2, r3
   83a68:	4b40      	ldr	r3, [pc, #256]	; (83b6c <Cl_bc_controller+0x860>)
   83a6a:	801a      	strh	r2, [r3, #0]
									wait_counter = 0;
									bc_laststate = bc_state;
									bc_state = CL_BC_STATE_BO1_V13V14;
									
								}
								break;
   83a6c:	e009      	b.n	83a82 <Cl_bc_controller+0x776>
									wait_counter ++;	// 1 sec wait
									
								}
								else
								{
									wait_counter = 0;
   83a6e:	4b3f      	ldr	r3, [pc, #252]	; (83b6c <Cl_bc_controller+0x860>)
   83a70:	2200      	movs	r2, #0
   83a72:	801a      	strh	r2, [r3, #0]
									bc_laststate = bc_state;
   83a74:	4b3a      	ldr	r3, [pc, #232]	; (83b60 <Cl_bc_controller+0x854>)
   83a76:	781a      	ldrb	r2, [r3, #0]
   83a78:	4b3a      	ldr	r3, [pc, #232]	; (83b64 <Cl_bc_controller+0x858>)
   83a7a:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_BO1_V13V14;
   83a7c:	4b38      	ldr	r3, [pc, #224]	; (83b60 <Cl_bc_controller+0x854>)
   83a7e:	220d      	movs	r2, #13
   83a80:	701a      	strb	r2, [r3, #0]
									
								}
								break;
   83a82:	bf00      	nop
								case BC_EVENT_SECOND:
						
								break;
				
							}
			break;
   83a84:	e290      	b.n	83fa8 <Cl_bc_controller+0xc9c>
			case CL_BC_STATE_BO1_V13V14:
							switch(cl_bc_event)
   83a86:	79fb      	ldrb	r3, [r7, #7]
   83a88:	2b03      	cmp	r3, #3
   83a8a:	f200 80f9 	bhi.w	83c80 <Cl_bc_controller+0x974>
   83a8e:	a201      	add	r2, pc, #4	; (adr r2, 83a94 <Cl_bc_controller+0x788>)
   83a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83a94:	00083aa5 	.word	0x00083aa5
   83a98:	00083c81 	.word	0x00083c81
   83a9c:	00083ab9 	.word	0x00083ab9
   83aa0:	00083acf 	.word	0x00083acf
							{
								case BC_EVENT_50MS:
								fill_time++;
   83aa4:	4b30      	ldr	r3, [pc, #192]	; (83b68 <Cl_bc_controller+0x85c>)
   83aa6:	881b      	ldrh	r3, [r3, #0]
   83aa8:	b29b      	uxth	r3, r3
   83aaa:	b29b      	uxth	r3, r3
   83aac:	3301      	adds	r3, #1
   83aae:	b29b      	uxth	r3, r3
   83ab0:	b29a      	uxth	r2, r3
   83ab2:	4b2d      	ldr	r3, [pc, #180]	; (83b68 <Cl_bc_controller+0x85c>)
   83ab4:	801a      	strh	r2, [r3, #0]
								break;
   83ab6:	e0e4      	b.n	83c82 <Cl_bc_controller+0x976>
								case 	BC_EVENT_500MS:
								break;
								case	BC_EVENT_SECOND:
								if(fill_time > 150){
   83ab8:	4b2b      	ldr	r3, [pc, #172]	; (83b68 <Cl_bc_controller+0x85c>)
   83aba:	881b      	ldrh	r3, [r3, #0]
   83abc:	b21b      	sxth	r3, r3
   83abe:	2b96      	cmp	r3, #150	; 0x96
   83ac0:	dd04      	ble.n	83acc <Cl_bc_controller+0x7c0>
								//sv_cntrl_setyellowalarm();
// 								sv_cntrl_activate_valve( VALVE_ID4);
// 								cl_wait(50);
// 								sv_cntrl_deactivate_valve(VALVE_ID4);
// 								cl_wait(50);
								Cl_Alarm_TriggerAlarm(BC_ALARM, 1);
   83ac2:	201a      	movs	r0, #26
   83ac4:	2101      	movs	r1, #1
   83ac6:	4b2b      	ldr	r3, [pc, #172]	; (83b74 <Cl_bc_controller+0x868>)
   83ac8:	4798      	blx	r3
													
								}
								
								break;
   83aca:	e0da      	b.n	83c82 <Cl_bc_controller+0x976>
   83acc:	e0d9      	b.n	83c82 <Cl_bc_controller+0x976>
								case	BC_EVENT_CS:
									//switch_time1 = fill_time;
									current_sense = true;
   83ace:	4b2a      	ldr	r3, [pc, #168]	; (83b78 <Cl_bc_controller+0x86c>)
   83ad0:	2201      	movs	r2, #1
   83ad2:	701a      	strb	r2, [r3, #0]
									cl_tdata.word =0;
   83ad4:	4b29      	ldr	r3, [pc, #164]	; (83b7c <Cl_bc_controller+0x870>)
   83ad6:	2200      	movs	r2, #0
   83ad8:	601a      	str	r2, [r3, #0]
									cl_tdata.Twobyte = fill_time;
   83ada:	4b23      	ldr	r3, [pc, #140]	; (83b68 <Cl_bc_controller+0x85c>)
   83adc:	881b      	ldrh	r3, [r3, #0]
   83ade:	b29a      	uxth	r2, r3
   83ae0:	4b26      	ldr	r3, [pc, #152]	; (83b7c <Cl_bc_controller+0x870>)
   83ae2:	801a      	strh	r2, [r3, #0]
									cl_tdata.bytearray[2] = 22;
   83ae4:	4b25      	ldr	r3, [pc, #148]	; (83b7c <Cl_bc_controller+0x870>)
   83ae6:	2216      	movs	r2, #22
   83ae8:	709a      	strb	r2, [r3, #2]
									cl_tdata_temp.Twobyte = fill_time;
   83aea:	4b1f      	ldr	r3, [pc, #124]	; (83b68 <Cl_bc_controller+0x85c>)
   83aec:	881b      	ldrh	r3, [r3, #0]
   83aee:	b29a      	uxth	r2, r3
   83af0:	4b23      	ldr	r3, [pc, #140]	; (83b80 <Cl_bc_controller+0x874>)
   83af2:	801a      	strh	r2, [r3, #0]
									if (bc_flag == 1)
   83af4:	4b23      	ldr	r3, [pc, #140]	; (83b84 <Cl_bc_controller+0x878>)
   83af6:	781b      	ldrb	r3, [r3, #0]
   83af8:	2b01      	cmp	r3, #1
   83afa:	f040 8095 	bne.w	83c28 <Cl_bc_controller+0x91c>
									{
										switch (flow_rate)
   83afe:	4b22      	ldr	r3, [pc, #136]	; (83b88 <Cl_bc_controller+0x87c>)
   83b00:	681b      	ldr	r3, [r3, #0]
   83b02:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   83b06:	f000 808e 	beq.w	83c26 <Cl_bc_controller+0x91a>
   83b0a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   83b0e:	d805      	bhi.n	83b1c <Cl_bc_controller+0x810>
   83b10:	2bc8      	cmp	r3, #200	; 0xc8
   83b12:	d07e      	beq.n	83c12 <Cl_bc_controller+0x906>
   83b14:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   83b18:	d05d      	beq.n	83bd6 <Cl_bc_controller+0x8ca>
   83b1a:	e085      	b.n	83c28 <Cl_bc_controller+0x91c>
   83b1c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   83b20:	d03b      	beq.n	83b9a <Cl_bc_controller+0x88e>
   83b22:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   83b26:	d17f      	bne.n	83c28 <Cl_bc_controller+0x91c>
										{
											case 800:
												if ((fill_time > 55) || (fill_time < 45))
   83b28:	4b0f      	ldr	r3, [pc, #60]	; (83b68 <Cl_bc_controller+0x85c>)
   83b2a:	881b      	ldrh	r3, [r3, #0]
   83b2c:	b21b      	sxth	r3, r3
   83b2e:	2b37      	cmp	r3, #55	; 0x37
   83b30:	dc04      	bgt.n	83b3c <Cl_bc_controller+0x830>
   83b32:	4b0d      	ldr	r3, [pc, #52]	; (83b68 <Cl_bc_controller+0x85c>)
   83b34:	881b      	ldrh	r3, [r3, #0]
   83b36:	b21b      	sxth	r3, r3
   83b38:	2b2c      	cmp	r3, #44	; 0x2c
   83b3a:	dc29      	bgt.n	83b90 <Cl_bc_controller+0x884>
												{	
													
													switchb01alrcnt++ ;
   83b3c:	4b13      	ldr	r3, [pc, #76]	; (83b8c <Cl_bc_controller+0x880>)
   83b3e:	681b      	ldr	r3, [r3, #0]
   83b40:	3301      	adds	r3, #1
   83b42:	4a12      	ldr	r2, [pc, #72]	; (83b8c <Cl_bc_controller+0x880>)
   83b44:	6013      	str	r3, [r2, #0]

													if(switchb01alrcnt >3){
   83b46:	4b11      	ldr	r3, [pc, #68]	; (83b8c <Cl_bc_controller+0x880>)
   83b48:	681b      	ldr	r3, [r3, #0]
   83b4a:	2b03      	cmp	r3, #3
   83b4c:	dd04      	ble.n	83b58 <Cl_bc_controller+0x84c>
// 													sv_cntrl_setyellowalarm();
// 													sv_cntrl_activate_valve( VALVE_ID4);
// 													cl_wait(50);
// 													sv_cntrl_deactivate_valve(VALVE_ID4);
// 													cl_wait(50);
													 Cl_Alarm_TriggerAlarm(BC_ALARM, 1);
   83b4e:	201a      	movs	r0, #26
   83b50:	2101      	movs	r1, #1
   83b52:	4b08      	ldr	r3, [pc, #32]	; (83b74 <Cl_bc_controller+0x868>)
   83b54:	4798      	blx	r3
												if ((fill_time > 55) || (fill_time < 45))
												{	
													
													switchb01alrcnt++ ;

													if(switchb01alrcnt >3){
   83b56:	e01f      	b.n	83b98 <Cl_bc_controller+0x88c>
   83b58:	e01e      	b.n	83b98 <Cl_bc_controller+0x88c>
   83b5a:	bf00      	nop
   83b5c:	20071763 	.word	0x20071763
   83b60:	20071761 	.word	0x20071761
   83b64:	20071762 	.word	0x20071762
   83b68:	20071778 	.word	0x20071778
   83b6c:	20071764 	.word	0x20071764
   83b70:	00099ced 	.word	0x00099ced
   83b74:	000830a1 	.word	0x000830a1
   83b78:	20071a5c 	.word	0x20071a5c
   83b7c:	2007177c 	.word	0x2007177c
   83b80:	20071780 	.word	0x20071780
   83b84:	20071953 	.word	0x20071953
   83b88:	20071954 	.word	0x20071954
   83b8c:	2007176c 	.word	0x2007176c
													 Cl_Alarm_TriggerAlarm(BC_ALARM, 1);
													}
												}
												else
												{
													switchb01alrcnt = 0 ;
   83b90:	4b90      	ldr	r3, [pc, #576]	; (83dd4 <Cl_bc_controller+0xac8>)
   83b92:	2200      	movs	r2, #0
   83b94:	601a      	str	r2, [r3, #0]
										//			sv_cntrl_resetyellowalarm();
												}
											break;
   83b96:	e047      	b.n	83c28 <Cl_bc_controller+0x91c>
   83b98:	e046      	b.n	83c28 <Cl_bc_controller+0x91c>
											
											case 500:
												if ((fill_time > 77) || (fill_time < 67))
   83b9a:	4b8f      	ldr	r3, [pc, #572]	; (83dd8 <Cl_bc_controller+0xacc>)
   83b9c:	881b      	ldrh	r3, [r3, #0]
   83b9e:	b21b      	sxth	r3, r3
   83ba0:	2b4d      	cmp	r3, #77	; 0x4d
   83ba2:	dc04      	bgt.n	83bae <Cl_bc_controller+0x8a2>
   83ba4:	4b8c      	ldr	r3, [pc, #560]	; (83dd8 <Cl_bc_controller+0xacc>)
   83ba6:	881b      	ldrh	r3, [r3, #0]
   83ba8:	b21b      	sxth	r3, r3
   83baa:	2b42      	cmp	r3, #66	; 0x42
   83bac:	dc0e      	bgt.n	83bcc <Cl_bc_controller+0x8c0>
												{
													switchb01alrcnt++ ;
   83bae:	4b89      	ldr	r3, [pc, #548]	; (83dd4 <Cl_bc_controller+0xac8>)
   83bb0:	681b      	ldr	r3, [r3, #0]
   83bb2:	3301      	adds	r3, #1
   83bb4:	4a87      	ldr	r2, [pc, #540]	; (83dd4 <Cl_bc_controller+0xac8>)
   83bb6:	6013      	str	r3, [r2, #0]

													if(switchb01alrcnt >3){
   83bb8:	4b86      	ldr	r3, [pc, #536]	; (83dd4 <Cl_bc_controller+0xac8>)
   83bba:	681b      	ldr	r3, [r3, #0]
   83bbc:	2b03      	cmp	r3, #3
   83bbe:	dd04      	ble.n	83bca <Cl_bc_controller+0x8be>
// 													sv_cntrl_setyellowalarm();
// 													sv_cntrl_activate_valve( VALVE_ID4);
// 													cl_wait(50);
// 													sv_cntrl_deactivate_valve(VALVE_ID4);
// 													cl_wait(50);
													Cl_Alarm_TriggerAlarm(BC_ALARM, 1);
   83bc0:	201a      	movs	r0, #26
   83bc2:	2101      	movs	r1, #1
   83bc4:	4b85      	ldr	r3, [pc, #532]	; (83ddc <Cl_bc_controller+0xad0>)
   83bc6:	4798      	blx	r3
											case 500:
												if ((fill_time > 77) || (fill_time < 67))
												{
													switchb01alrcnt++ ;

													if(switchb01alrcnt >3){
   83bc8:	e004      	b.n	83bd4 <Cl_bc_controller+0x8c8>
   83bca:	e003      	b.n	83bd4 <Cl_bc_controller+0x8c8>
													Cl_Alarm_TriggerAlarm(BC_ALARM, 1);
													}
												}
												else
												{
													switchb01alrcnt = 0 ;
   83bcc:	4b81      	ldr	r3, [pc, #516]	; (83dd4 <Cl_bc_controller+0xac8>)
   83bce:	2200      	movs	r2, #0
   83bd0:	601a      	str	r2, [r3, #0]
									//				sv_cntrl_resetyellowalarm();
												}
											break;
   83bd2:	e029      	b.n	83c28 <Cl_bc_controller+0x91c>
   83bd4:	e028      	b.n	83c28 <Cl_bc_controller+0x91c>
											
											case 400:
											break;
											
											case 300:
												if ((fill_time > 125) || (fill_time < 115))
   83bd6:	4b80      	ldr	r3, [pc, #512]	; (83dd8 <Cl_bc_controller+0xacc>)
   83bd8:	881b      	ldrh	r3, [r3, #0]
   83bda:	b21b      	sxth	r3, r3
   83bdc:	2b7d      	cmp	r3, #125	; 0x7d
   83bde:	dc04      	bgt.n	83bea <Cl_bc_controller+0x8de>
   83be0:	4b7d      	ldr	r3, [pc, #500]	; (83dd8 <Cl_bc_controller+0xacc>)
   83be2:	881b      	ldrh	r3, [r3, #0]
   83be4:	b21b      	sxth	r3, r3
   83be6:	2b72      	cmp	r3, #114	; 0x72
   83be8:	dc0e      	bgt.n	83c08 <Cl_bc_controller+0x8fc>
												{
													
													switchb01alrcnt++ ;
   83bea:	4b7a      	ldr	r3, [pc, #488]	; (83dd4 <Cl_bc_controller+0xac8>)
   83bec:	681b      	ldr	r3, [r3, #0]
   83bee:	3301      	adds	r3, #1
   83bf0:	4a78      	ldr	r2, [pc, #480]	; (83dd4 <Cl_bc_controller+0xac8>)
   83bf2:	6013      	str	r3, [r2, #0]

													if(switchb01alrcnt >3){
   83bf4:	4b77      	ldr	r3, [pc, #476]	; (83dd4 <Cl_bc_controller+0xac8>)
   83bf6:	681b      	ldr	r3, [r3, #0]
   83bf8:	2b03      	cmp	r3, #3
   83bfa:	dd04      	ble.n	83c06 <Cl_bc_controller+0x8fa>
// 													sv_cntrl_setyellowalarm();
// 													sv_cntrl_activate_valve( VALVE_ID4);
// 													cl_wait(50);
// 													sv_cntrl_deactivate_valve(VALVE_ID4);
// 													cl_wait(50);
													Cl_Alarm_TriggerAlarm(BC_ALARM, 1);
   83bfc:	201a      	movs	r0, #26
   83bfe:	2101      	movs	r1, #1
   83c00:	4b76      	ldr	r3, [pc, #472]	; (83ddc <Cl_bc_controller+0xad0>)
   83c02:	4798      	blx	r3
												if ((fill_time > 125) || (fill_time < 115))
												{
													
													switchb01alrcnt++ ;

													if(switchb01alrcnt >3){
   83c04:	e004      	b.n	83c10 <Cl_bc_controller+0x904>
   83c06:	e003      	b.n	83c10 <Cl_bc_controller+0x904>
													Cl_Alarm_TriggerAlarm(BC_ALARM, 1);
													}
												}
												else
												{
													switchb01alrcnt = 0 ;
   83c08:	4b72      	ldr	r3, [pc, #456]	; (83dd4 <Cl_bc_controller+0xac8>)
   83c0a:	2200      	movs	r2, #0
   83c0c:	601a      	str	r2, [r3, #0]
										//			sv_cntrl_resetyellowalarm();
												}
											break;
   83c0e:	e00b      	b.n	83c28 <Cl_bc_controller+0x91c>
   83c10:	e00a      	b.n	83c28 <Cl_bc_controller+0x91c>
											
											case 200:
												if (fill_time > 190)
   83c12:	4b71      	ldr	r3, [pc, #452]	; (83dd8 <Cl_bc_controller+0xacc>)
   83c14:	881b      	ldrh	r3, [r3, #0]
   83c16:	b21b      	sxth	r3, r3
   83c18:	2bbe      	cmp	r3, #190	; 0xbe
   83c1a:	dd03      	ble.n	83c24 <Cl_bc_controller+0x918>
// 													sv_cntrl_setyellowalarm();
// 													sv_cntrl_activate_valve( VALVE_ID4);
// 													cl_wait(50);
// 													sv_cntrl_deactivate_valve(VALVE_ID4);
// 													cl_wait(50);
													Cl_Alarm_TriggerAlarm(BC_ALARM, 1);
   83c1c:	201a      	movs	r0, #26
   83c1e:	2101      	movs	r1, #1
   83c20:	4b6e      	ldr	r3, [pc, #440]	; (83ddc <Cl_bc_controller+0xad0>)
   83c22:	4798      	blx	r3
												}
												else
												{
										//			sv_cntrl_resetyellowalarm();
												}
											break;
   83c24:	e000      	b.n	83c28 <Cl_bc_controller+0x91c>
									//				sv_cntrl_resetyellowalarm();
												}
											break;
											
											case 400:
											break;
   83c26:	bf00      	nop
												}
											break;
										}
									}

								cl_bc_returncode = (Cl_ReturnCodeType)sv_cntrl_setflowpath(BC_FLUSH_2_V13_14);
   83c28:	2006      	movs	r0, #6
   83c2a:	4b6d      	ldr	r3, [pc, #436]	; (83de0 <Cl_bc_controller+0xad4>)
   83c2c:	4798      	blx	r3
   83c2e:	4603      	mov	r3, r0
   83c30:	73fb      	strb	r3, [r7, #15]
								sv_cntrl_activate_valve(VALVE_ID20);
   83c32:	2014      	movs	r0, #20
   83c34:	4b6b      	ldr	r3, [pc, #428]	; (83de4 <Cl_bc_controller+0xad8>)
   83c36:	4798      	blx	r3
								sv_cntrl_activate_valve(VALVE_ID19);
   83c38:	2013      	movs	r0, #19
   83c3a:	4b6a      	ldr	r3, [pc, #424]	; (83de4 <Cl_bc_controller+0xad8>)
   83c3c:	4798      	blx	r3
								sv_cntrl_activate_valve(VALVE_ID4);
   83c3e:	2004      	movs	r0, #4
   83c40:	4b68      	ldr	r3, [pc, #416]	; (83de4 <Cl_bc_controller+0xad8>)
   83c42:	4798      	blx	r3
								Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
   83c44:	2037      	movs	r0, #55	; 0x37
   83c46:	4968      	ldr	r1, [pc, #416]	; (83de8 <Cl_bc_controller+0xadc>)
   83c48:	2204      	movs	r2, #4
   83c4a:	4b68      	ldr	r3, [pc, #416]	; (83dec <Cl_bc_controller+0xae0>)
   83c4c:	4798      	blx	r3
// 								}
// 								
// 								BC_count =0;
// 								}
//************************************************************************** 22082017*********************								
								Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_BC_STATUS,&cl_tdata_temp,2);
   83c4e:	2049      	movs	r0, #73	; 0x49
   83c50:	4967      	ldr	r1, [pc, #412]	; (83df0 <Cl_bc_controller+0xae4>)
   83c52:	2202      	movs	r2, #2
   83c54:	4b65      	ldr	r3, [pc, #404]	; (83dec <Cl_bc_controller+0xae0>)
   83c56:	4798      	blx	r3
								CSeventcount++;
   83c58:	4b66      	ldr	r3, [pc, #408]	; (83df4 <Cl_bc_controller+0xae8>)
   83c5a:	681b      	ldr	r3, [r3, #0]
   83c5c:	3301      	adds	r3, #1
   83c5e:	4a65      	ldr	r2, [pc, #404]	; (83df4 <Cl_bc_controller+0xae8>)
   83c60:	6013      	str	r3, [r2, #0]
								if(cl_bc_returncode == CL_OK)
   83c62:	7bfb      	ldrb	r3, [r7, #15]
   83c64:	2b00      	cmp	r3, #0
   83c66:	d10a      	bne.n	83c7e <Cl_bc_controller+0x972>
								{
									bc_laststate = bc_state;
   83c68:	4b63      	ldr	r3, [pc, #396]	; (83df8 <Cl_bc_controller+0xaec>)
   83c6a:	781a      	ldrb	r2, [r3, #0]
   83c6c:	4b63      	ldr	r3, [pc, #396]	; (83dfc <Cl_bc_controller+0xaf0>)
   83c6e:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_BO2_V13V14_TRANSITION;	
   83c70:	4b61      	ldr	r3, [pc, #388]	; (83df8 <Cl_bc_controller+0xaec>)
   83c72:	220e      	movs	r2, #14
   83c74:	701a      	strb	r2, [r3, #0]
									fill_time = 0;															
   83c76:	4b58      	ldr	r3, [pc, #352]	; (83dd8 <Cl_bc_controller+0xacc>)
   83c78:	2200      	movs	r2, #0
   83c7a:	801a      	strh	r2, [r3, #0]
								}
								break;
   83c7c:	e001      	b.n	83c82 <Cl_bc_controller+0x976>
   83c7e:	e000      	b.n	83c82 <Cl_bc_controller+0x976>
								default:break;								
   83c80:	bf00      	nop
							}
			break;
   83c82:	e191      	b.n	83fa8 <Cl_bc_controller+0xc9c>
			case CL_BC_STATE_BO2_V13V14_TRANSITION:

							switch(cl_bc_event)
   83c84:	79fb      	ldrb	r3, [r7, #7]
   83c86:	2b00      	cmp	r3, #0
   83c88:	d001      	beq.n	83c8e <Cl_bc_controller+0x982>
   83c8a:	2b02      	cmp	r3, #2
									bc_laststate = bc_state;
									bc_state = CL_BC_STATE_BO2_V13V14;
								}
								break;case BC_EVENT_SECOND:
								
								break;
   83c8c:	e030      	b.n	83cf0 <Cl_bc_controller+0x9e4>
			case CL_BC_STATE_BO2_V13V14_TRANSITION:

							switch(cl_bc_event)
							{
								case BC_EVENT_50MS:
								fill_time++;
   83c8e:	4b52      	ldr	r3, [pc, #328]	; (83dd8 <Cl_bc_controller+0xacc>)
   83c90:	881b      	ldrh	r3, [r3, #0]
   83c92:	b29b      	uxth	r3, r3
   83c94:	b29b      	uxth	r3, r3
   83c96:	3301      	adds	r3, #1
   83c98:	b29b      	uxth	r3, r3
   83c9a:	b29a      	uxth	r2, r3
   83c9c:	4b4e      	ldr	r3, [pc, #312]	; (83dd8 <Cl_bc_controller+0xacc>)
   83c9e:	801a      	strh	r2, [r3, #0]
								if(wait_counter < 20)
   83ca0:	4b57      	ldr	r3, [pc, #348]	; (83e00 <Cl_bc_controller+0xaf4>)
   83ca2:	881b      	ldrh	r3, [r3, #0]
   83ca4:	b21b      	sxth	r3, r3
   83ca6:	2b13      	cmp	r3, #19
   83ca8:	dc17      	bgt.n	83cda <Cl_bc_controller+0x9ce>
								{
									if(wait_counter == 2)
   83caa:	4b55      	ldr	r3, [pc, #340]	; (83e00 <Cl_bc_controller+0xaf4>)
   83cac:	881b      	ldrh	r3, [r3, #0]
   83cae:	b21b      	sxth	r3, r3
   83cb0:	2b02      	cmp	r3, #2
   83cb2:	d108      	bne.n	83cc6 <Cl_bc_controller+0x9ba>
									{
										sv_cntrl_deactivate_valve(VALVE_ID20);
   83cb4:	2014      	movs	r0, #20
   83cb6:	4b53      	ldr	r3, [pc, #332]	; (83e04 <Cl_bc_controller+0xaf8>)
   83cb8:	4798      	blx	r3
										sv_cntrl_deactivate_valve(VALVE_ID19);
   83cba:	2013      	movs	r0, #19
   83cbc:	4b51      	ldr	r3, [pc, #324]	; (83e04 <Cl_bc_controller+0xaf8>)
   83cbe:	4798      	blx	r3
										sv_cntrl_deactivate_valve(VALVE_ID4);
   83cc0:	2004      	movs	r0, #4
   83cc2:	4b50      	ldr	r3, [pc, #320]	; (83e04 <Cl_bc_controller+0xaf8>)
   83cc4:	4798      	blx	r3
									}
									
									wait_counter ++;	// 1 sec wait
   83cc6:	4b4e      	ldr	r3, [pc, #312]	; (83e00 <Cl_bc_controller+0xaf4>)
   83cc8:	881b      	ldrh	r3, [r3, #0]
   83cca:	b29b      	uxth	r3, r3
   83ccc:	b29b      	uxth	r3, r3
   83cce:	3301      	adds	r3, #1
   83cd0:	b29b      	uxth	r3, r3
   83cd2:	b29a      	uxth	r2, r3
   83cd4:	4b4a      	ldr	r3, [pc, #296]	; (83e00 <Cl_bc_controller+0xaf4>)
   83cd6:	801a      	strh	r2, [r3, #0]
								{
									wait_counter = 0;
									bc_laststate = bc_state;
									bc_state = CL_BC_STATE_BO2_V13V14;
								}
								break;case BC_EVENT_SECOND:
   83cd8:	e009      	b.n	83cee <Cl_bc_controller+0x9e2>
									wait_counter ++;	// 1 sec wait
									
								}
								else
								{
									wait_counter = 0;
   83cda:	4b49      	ldr	r3, [pc, #292]	; (83e00 <Cl_bc_controller+0xaf4>)
   83cdc:	2200      	movs	r2, #0
   83cde:	801a      	strh	r2, [r3, #0]
									bc_laststate = bc_state;
   83ce0:	4b45      	ldr	r3, [pc, #276]	; (83df8 <Cl_bc_controller+0xaec>)
   83ce2:	781a      	ldrb	r2, [r3, #0]
   83ce4:	4b45      	ldr	r3, [pc, #276]	; (83dfc <Cl_bc_controller+0xaf0>)
   83ce6:	701a      	strb	r2, [r3, #0]
									bc_state = CL_BC_STATE_BO2_V13V14;
   83ce8:	4b43      	ldr	r3, [pc, #268]	; (83df8 <Cl_bc_controller+0xaec>)
   83cea:	220f      	movs	r2, #15
   83cec:	701a      	strb	r2, [r3, #0]
								}
								break;case BC_EVENT_SECOND:
   83cee:	bf00      	nop
								
								break;
								
							}
			break;
   83cf0:	e15a      	b.n	83fa8 <Cl_bc_controller+0xc9c>
			case CL_BC_STATE_BO2_V13V14:
							switch(cl_bc_event)
   83cf2:	79fb      	ldrb	r3, [r7, #7]
   83cf4:	2b03      	cmp	r3, #3
   83cf6:	f200 8110 	bhi.w	83f1a <Cl_bc_controller+0xc0e>
   83cfa:	a201      	add	r2, pc, #4	; (adr r2, 83d00 <Cl_bc_controller+0x9f4>)
   83cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83d00:	00083d11 	.word	0x00083d11
   83d04:	00083f1b 	.word	0x00083f1b
   83d08:	00083d25 	.word	0x00083d25
   83d0c:	00083d3b 	.word	0x00083d3b
							{
								case BC_EVENT_50MS:
								fill_time++;
   83d10:	4b31      	ldr	r3, [pc, #196]	; (83dd8 <Cl_bc_controller+0xacc>)
   83d12:	881b      	ldrh	r3, [r3, #0]
   83d14:	b29b      	uxth	r3, r3
   83d16:	b29b      	uxth	r3, r3
   83d18:	3301      	adds	r3, #1
   83d1a:	b29b      	uxth	r3, r3
   83d1c:	b29a      	uxth	r2, r3
   83d1e:	4b2e      	ldr	r3, [pc, #184]	; (83dd8 <Cl_bc_controller+0xacc>)
   83d20:	801a      	strh	r2, [r3, #0]
								break;
   83d22:	e0fb      	b.n	83f1c <Cl_bc_controller+0xc10>
								case 	BC_EVENT_500MS:
								break;
								case	BC_EVENT_SECOND:
									if(fill_time > 150){
   83d24:	4b2c      	ldr	r3, [pc, #176]	; (83dd8 <Cl_bc_controller+0xacc>)
   83d26:	881b      	ldrh	r3, [r3, #0]
   83d28:	b21b      	sxth	r3, r3
   83d2a:	2b96      	cmp	r3, #150	; 0x96
   83d2c:	dd04      	ble.n	83d38 <Cl_bc_controller+0xa2c>
					//					sv_cntrl_setyellowalarm();
// 										sv_cntrl_activate_valve( VALVE_ID4);
// 										cl_wait(50);
// 										sv_cntrl_deactivate_valve(VALVE_ID4);
// 										cl_wait(50);
										Cl_Alarm_TriggerAlarm(BC_ALARM, 1);
   83d2e:	201a      	movs	r0, #26
   83d30:	2101      	movs	r1, #1
   83d32:	4b2a      	ldr	r3, [pc, #168]	; (83ddc <Cl_bc_controller+0xad0>)
   83d34:	4798      	blx	r3
										
									}
								
								break;
   83d36:	e0f1      	b.n	83f1c <Cl_bc_controller+0xc10>
   83d38:	e0f0      	b.n	83f1c <Cl_bc_controller+0xc10>
								case	BC_EVENT_CS:
								//switch_time2 = fill_time;
								
								 current_sense = true;
   83d3a:	4b33      	ldr	r3, [pc, #204]	; (83e08 <Cl_bc_controller+0xafc>)
   83d3c:	2201      	movs	r2, #1
   83d3e:	701a      	strb	r2, [r3, #0]
									cl_tdata.word =0;
   83d40:	4b29      	ldr	r3, [pc, #164]	; (83de8 <Cl_bc_controller+0xadc>)
   83d42:	2200      	movs	r2, #0
   83d44:	601a      	str	r2, [r3, #0]
									cl_tdata.Twobyte = fill_time;
   83d46:	4b24      	ldr	r3, [pc, #144]	; (83dd8 <Cl_bc_controller+0xacc>)
   83d48:	881b      	ldrh	r3, [r3, #0]
   83d4a:	b29a      	uxth	r2, r3
   83d4c:	4b26      	ldr	r3, [pc, #152]	; (83de8 <Cl_bc_controller+0xadc>)
   83d4e:	801a      	strh	r2, [r3, #0]
									cl_tdata.bytearray[2] = 21;
   83d50:	4b25      	ldr	r3, [pc, #148]	; (83de8 <Cl_bc_controller+0xadc>)
   83d52:	2215      	movs	r2, #21
   83d54:	709a      	strb	r2, [r3, #2]
									
								cl_tdata_temp.Twobyte = fill_time ;
   83d56:	4b20      	ldr	r3, [pc, #128]	; (83dd8 <Cl_bc_controller+0xacc>)
   83d58:	881b      	ldrh	r3, [r3, #0]
   83d5a:	b29a      	uxth	r2, r3
   83d5c:	4b24      	ldr	r3, [pc, #144]	; (83df0 <Cl_bc_controller+0xae4>)
   83d5e:	801a      	strh	r2, [r3, #0]
							//	cl_tdata_temp.word = cl_tdata_temp.word << 16;
									if (bc_flag == 1)
   83d60:	4b2a      	ldr	r3, [pc, #168]	; (83e0c <Cl_bc_controller+0xb00>)
   83d62:	781b      	ldrb	r3, [r3, #0]
   83d64:	2b01      	cmp	r3, #1
   83d66:	f040 80ac 	bne.w	83ec2 <Cl_bc_controller+0xbb6>
									{
										switch (flow_rate)
   83d6a:	4b29      	ldr	r3, [pc, #164]	; (83e10 <Cl_bc_controller+0xb04>)
   83d6c:	681b      	ldr	r3, [r3, #0]
   83d6e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   83d72:	f000 80a5 	beq.w	83ec0 <Cl_bc_controller+0xbb4>
   83d76:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   83d7a:	d806      	bhi.n	83d8a <Cl_bc_controller+0xa7e>
   83d7c:	2bc8      	cmp	r3, #200	; 0xc8
   83d7e:	f000 8087 	beq.w	83e90 <Cl_bc_controller+0xb84>
   83d82:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   83d86:	d065      	beq.n	83e54 <Cl_bc_controller+0xb48>
   83d88:	e09b      	b.n	83ec2 <Cl_bc_controller+0xbb6>
   83d8a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   83d8e:	d043      	beq.n	83e18 <Cl_bc_controller+0xb0c>
   83d90:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   83d94:	f040 8095 	bne.w	83ec2 <Cl_bc_controller+0xbb6>
										{
											case 800:
												if ((fill_time > 55) || (fill_time < 45))
   83d98:	4b0f      	ldr	r3, [pc, #60]	; (83dd8 <Cl_bc_controller+0xacc>)
   83d9a:	881b      	ldrh	r3, [r3, #0]
   83d9c:	b21b      	sxth	r3, r3
   83d9e:	2b37      	cmp	r3, #55	; 0x37
   83da0:	dc04      	bgt.n	83dac <Cl_bc_controller+0xaa0>
   83da2:	4b0d      	ldr	r3, [pc, #52]	; (83dd8 <Cl_bc_controller+0xacc>)
   83da4:	881b      	ldrh	r3, [r3, #0]
   83da6:	b21b      	sxth	r3, r3
   83da8:	2b2c      	cmp	r3, #44	; 0x2c
   83daa:	dc0e      	bgt.n	83dca <Cl_bc_controller+0xabe>
												{
													
													switchb02alrcnt++ ;
   83dac:	4b19      	ldr	r3, [pc, #100]	; (83e14 <Cl_bc_controller+0xb08>)
   83dae:	681b      	ldr	r3, [r3, #0]
   83db0:	3301      	adds	r3, #1
   83db2:	4a18      	ldr	r2, [pc, #96]	; (83e14 <Cl_bc_controller+0xb08>)
   83db4:	6013      	str	r3, [r2, #0]

													if(switchb02alrcnt >3){
   83db6:	4b17      	ldr	r3, [pc, #92]	; (83e14 <Cl_bc_controller+0xb08>)
   83db8:	681b      	ldr	r3, [r3, #0]
   83dba:	2b03      	cmp	r3, #3
   83dbc:	dd04      	ble.n	83dc8 <Cl_bc_controller+0xabc>
// 													sv_cntrl_setyellowalarm();
// 													sv_cntrl_activate_valve( VALVE_ID4);
// 													cl_wait(50);
// 													sv_cntrl_deactivate_valve(VALVE_ID4);
// 													cl_wait(50);
													Cl_Alarm_TriggerAlarm(BC_ALARM, 1);
   83dbe:	201a      	movs	r0, #26
   83dc0:	2101      	movs	r1, #1
   83dc2:	4b06      	ldr	r3, [pc, #24]	; (83ddc <Cl_bc_controller+0xad0>)
   83dc4:	4798      	blx	r3
												if ((fill_time > 55) || (fill_time < 45))
												{
													
													switchb02alrcnt++ ;

													if(switchb02alrcnt >3){
   83dc6:	e004      	b.n	83dd2 <Cl_bc_controller+0xac6>
   83dc8:	e003      	b.n	83dd2 <Cl_bc_controller+0xac6>
													Cl_Alarm_TriggerAlarm(BC_ALARM, 1);
													}
												}
												else
												{
													switchb02alrcnt = 0;
   83dca:	4b12      	ldr	r3, [pc, #72]	; (83e14 <Cl_bc_controller+0xb08>)
   83dcc:	2200      	movs	r2, #0
   83dce:	601a      	str	r2, [r3, #0]
								//					sv_cntrl_resetyellowalarm();
												}
											break;
   83dd0:	e077      	b.n	83ec2 <Cl_bc_controller+0xbb6>
   83dd2:	e076      	b.n	83ec2 <Cl_bc_controller+0xbb6>
   83dd4:	2007176c 	.word	0x2007176c
   83dd8:	20071778 	.word	0x20071778
   83ddc:	000830a1 	.word	0x000830a1
   83de0:	00099ebd 	.word	0x00099ebd
   83de4:	00099ccd 	.word	0x00099ccd
   83de8:	2007177c 	.word	0x2007177c
   83dec:	0009ba51 	.word	0x0009ba51
   83df0:	20071780 	.word	0x20071780
   83df4:	20071774 	.word	0x20071774
   83df8:	20071761 	.word	0x20071761
   83dfc:	20071762 	.word	0x20071762
   83e00:	20071764 	.word	0x20071764
   83e04:	00099ced 	.word	0x00099ced
   83e08:	20071a5c 	.word	0x20071a5c
   83e0c:	20071953 	.word	0x20071953
   83e10:	20071954 	.word	0x20071954
   83e14:	20071770 	.word	0x20071770
											
											case 500:
												if ((fill_time > 77) || (fill_time < 67))
   83e18:	4b66      	ldr	r3, [pc, #408]	; (83fb4 <Cl_bc_controller+0xca8>)
   83e1a:	881b      	ldrh	r3, [r3, #0]
   83e1c:	b21b      	sxth	r3, r3
   83e1e:	2b4d      	cmp	r3, #77	; 0x4d
   83e20:	dc04      	bgt.n	83e2c <Cl_bc_controller+0xb20>
   83e22:	4b64      	ldr	r3, [pc, #400]	; (83fb4 <Cl_bc_controller+0xca8>)
   83e24:	881b      	ldrh	r3, [r3, #0]
   83e26:	b21b      	sxth	r3, r3
   83e28:	2b42      	cmp	r3, #66	; 0x42
   83e2a:	dc0e      	bgt.n	83e4a <Cl_bc_controller+0xb3e>
												{
													
													switchb02alrcnt++ ;
   83e2c:	4b62      	ldr	r3, [pc, #392]	; (83fb8 <Cl_bc_controller+0xcac>)
   83e2e:	681b      	ldr	r3, [r3, #0]
   83e30:	3301      	adds	r3, #1
   83e32:	4a61      	ldr	r2, [pc, #388]	; (83fb8 <Cl_bc_controller+0xcac>)
   83e34:	6013      	str	r3, [r2, #0]

													if(switchb02alrcnt >3){
   83e36:	4b60      	ldr	r3, [pc, #384]	; (83fb8 <Cl_bc_controller+0xcac>)
   83e38:	681b      	ldr	r3, [r3, #0]
   83e3a:	2b03      	cmp	r3, #3
   83e3c:	dd04      	ble.n	83e48 <Cl_bc_controller+0xb3c>
									//				sv_cntrl_setyellowalarm();
// 													sv_cntrl_activate_valve( VALVE_ID4);
// 													cl_wait(50);
// 													sv_cntrl_deactivate_valve(VALVE_ID4);
// 													cl_wait(50);
													Cl_Alarm_TriggerAlarm(BC_ALARM, 1);
   83e3e:	201a      	movs	r0, #26
   83e40:	2101      	movs	r1, #1
   83e42:	4b5e      	ldr	r3, [pc, #376]	; (83fbc <Cl_bc_controller+0xcb0>)
   83e44:	4798      	blx	r3
												if ((fill_time > 77) || (fill_time < 67))
												{
													
													switchb02alrcnt++ ;

													if(switchb02alrcnt >3){
   83e46:	e004      	b.n	83e52 <Cl_bc_controller+0xb46>
   83e48:	e003      	b.n	83e52 <Cl_bc_controller+0xb46>
													Cl_Alarm_TriggerAlarm(BC_ALARM, 1);
													}
												}
												else
												{
													switchb02alrcnt = 0;
   83e4a:	4b5b      	ldr	r3, [pc, #364]	; (83fb8 <Cl_bc_controller+0xcac>)
   83e4c:	2200      	movs	r2, #0
   83e4e:	601a      	str	r2, [r3, #0]
										//			sv_cntrl_resetyellowalarm();
												}
											break;
   83e50:	e037      	b.n	83ec2 <Cl_bc_controller+0xbb6>
   83e52:	e036      	b.n	83ec2 <Cl_bc_controller+0xbb6>
											
											case 400:
											break;
											
											case 300:
											if ((fill_time > 125) || (fill_time < 115))
   83e54:	4b57      	ldr	r3, [pc, #348]	; (83fb4 <Cl_bc_controller+0xca8>)
   83e56:	881b      	ldrh	r3, [r3, #0]
   83e58:	b21b      	sxth	r3, r3
   83e5a:	2b7d      	cmp	r3, #125	; 0x7d
   83e5c:	dc04      	bgt.n	83e68 <Cl_bc_controller+0xb5c>
   83e5e:	4b55      	ldr	r3, [pc, #340]	; (83fb4 <Cl_bc_controller+0xca8>)
   83e60:	881b      	ldrh	r3, [r3, #0]
   83e62:	b21b      	sxth	r3, r3
   83e64:	2b72      	cmp	r3, #114	; 0x72
   83e66:	dc0e      	bgt.n	83e86 <Cl_bc_controller+0xb7a>
											{
												
												switchb02alrcnt++ ;
   83e68:	4b53      	ldr	r3, [pc, #332]	; (83fb8 <Cl_bc_controller+0xcac>)
   83e6a:	681b      	ldr	r3, [r3, #0]
   83e6c:	3301      	adds	r3, #1
   83e6e:	4a52      	ldr	r2, [pc, #328]	; (83fb8 <Cl_bc_controller+0xcac>)
   83e70:	6013      	str	r3, [r2, #0]

												if(switchb02alrcnt >3){
   83e72:	4b51      	ldr	r3, [pc, #324]	; (83fb8 <Cl_bc_controller+0xcac>)
   83e74:	681b      	ldr	r3, [r3, #0]
   83e76:	2b03      	cmp	r3, #3
   83e78:	dd04      	ble.n	83e84 <Cl_bc_controller+0xb78>
							//					sv_cntrl_setyellowalarm();
// 												sv_cntrl_activate_valve( VALVE_ID4);
// 												cl_wait(50);
// 												sv_cntrl_deactivate_valve(VALVE_ID4);
// 												cl_wait(50);
												Cl_Alarm_TriggerAlarm(BC_ALARM, 1);
   83e7a:	201a      	movs	r0, #26
   83e7c:	2101      	movs	r1, #1
   83e7e:	4b4f      	ldr	r3, [pc, #316]	; (83fbc <Cl_bc_controller+0xcb0>)
   83e80:	4798      	blx	r3
											if ((fill_time > 125) || (fill_time < 115))
											{
												
												switchb02alrcnt++ ;

												if(switchb02alrcnt >3){
   83e82:	e004      	b.n	83e8e <Cl_bc_controller+0xb82>
   83e84:	e003      	b.n	83e8e <Cl_bc_controller+0xb82>
												Cl_Alarm_TriggerAlarm(BC_ALARM, 1);
												}
											}
											else
											{
												switchb02alrcnt = 0;
   83e86:	4b4c      	ldr	r3, [pc, #304]	; (83fb8 <Cl_bc_controller+0xcac>)
   83e88:	2200      	movs	r2, #0
   83e8a:	601a      	str	r2, [r3, #0]
									//			sv_cntrl_resetyellowalarm();
											}
											break;
   83e8c:	e019      	b.n	83ec2 <Cl_bc_controller+0xbb6>
   83e8e:	e018      	b.n	83ec2 <Cl_bc_controller+0xbb6>
											
											case 200:
												if (fill_time > 190)
   83e90:	4b48      	ldr	r3, [pc, #288]	; (83fb4 <Cl_bc_controller+0xca8>)
   83e92:	881b      	ldrh	r3, [r3, #0]
   83e94:	b21b      	sxth	r3, r3
   83e96:	2bbe      	cmp	r3, #190	; 0xbe
   83e98:	dd11      	ble.n	83ebe <Cl_bc_controller+0xbb2>
												{
													sv_cntrl_setyellowalarm();
   83e9a:	4b49      	ldr	r3, [pc, #292]	; (83fc0 <Cl_bc_controller+0xcb4>)
   83e9c:	4798      	blx	r3
													sv_cntrl_activate_valve( VALVE_ID4);
   83e9e:	2004      	movs	r0, #4
   83ea0:	4b48      	ldr	r3, [pc, #288]	; (83fc4 <Cl_bc_controller+0xcb8>)
   83ea2:	4798      	blx	r3
													cl_wait(50);
   83ea4:	2032      	movs	r0, #50	; 0x32
   83ea6:	4b48      	ldr	r3, [pc, #288]	; (83fc8 <Cl_bc_controller+0xcbc>)
   83ea8:	4798      	blx	r3
													sv_cntrl_deactivate_valve(VALVE_ID4);
   83eaa:	2004      	movs	r0, #4
   83eac:	4b47      	ldr	r3, [pc, #284]	; (83fcc <Cl_bc_controller+0xcc0>)
   83eae:	4798      	blx	r3
													cl_wait(50);
   83eb0:	2032      	movs	r0, #50	; 0x32
   83eb2:	4b45      	ldr	r3, [pc, #276]	; (83fc8 <Cl_bc_controller+0xcbc>)
   83eb4:	4798      	blx	r3
													Cl_Alarm_TriggerAlarm(BC_ALARM, 1);
   83eb6:	201a      	movs	r0, #26
   83eb8:	2101      	movs	r1, #1
   83eba:	4b40      	ldr	r3, [pc, #256]	; (83fbc <Cl_bc_controller+0xcb0>)
   83ebc:	4798      	blx	r3
												}
												else
												{
								//					sv_cntrl_resetyellowalarm();
												}
											break;
   83ebe:	e000      	b.n	83ec2 <Cl_bc_controller+0xbb6>
										//			sv_cntrl_resetyellowalarm();
												}
											break;
											
											case 400:
											break;
   83ec0:	bf00      	nop
												}
											break;
										}
									}
			//				
								cl_bc_returncode = (Cl_ReturnCodeType)sv_cntrl_setflowpath(BC_FLUSH_1_V13_14);
   83ec2:	2005      	movs	r0, #5
   83ec4:	4b42      	ldr	r3, [pc, #264]	; (83fd0 <Cl_bc_controller+0xcc4>)
   83ec6:	4798      	blx	r3
   83ec8:	4603      	mov	r3, r0
   83eca:	73fb      	strb	r3, [r7, #15]
								sv_cntrl_activate_valve(VALVE_ID19);
   83ecc:	2013      	movs	r0, #19
   83ece:	4b3d      	ldr	r3, [pc, #244]	; (83fc4 <Cl_bc_controller+0xcb8>)
   83ed0:	4798      	blx	r3
								sv_cntrl_activate_valve(VALVE_ID20);
   83ed2:	2014      	movs	r0, #20
   83ed4:	4b3b      	ldr	r3, [pc, #236]	; (83fc4 <Cl_bc_controller+0xcb8>)
   83ed6:	4798      	blx	r3
								sv_cntrl_activate_valve(VALVE_ID4);
   83ed8:	2004      	movs	r0, #4
   83eda:	4b3a      	ldr	r3, [pc, #232]	; (83fc4 <Cl_bc_controller+0xcb8>)
   83edc:	4798      	blx	r3
								Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
   83ede:	2037      	movs	r0, #55	; 0x37
   83ee0:	493c      	ldr	r1, [pc, #240]	; (83fd4 <Cl_bc_controller+0xcc8>)
   83ee2:	2204      	movs	r2, #4
   83ee4:	4b3c      	ldr	r3, [pc, #240]	; (83fd8 <Cl_bc_controller+0xccc>)
   83ee6:	4798      	blx	r3
// 									
// 									BC_count =0;
// 								}
								
//************************************************************************** 22082017*********************							
								Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_BC_STATUS,&cl_tdata_temp,2);
   83ee8:	2049      	movs	r0, #73	; 0x49
   83eea:	493c      	ldr	r1, [pc, #240]	; (83fdc <Cl_bc_controller+0xcd0>)
   83eec:	2202      	movs	r2, #2
   83eee:	4b3a      	ldr	r3, [pc, #232]	; (83fd8 <Cl_bc_controller+0xccc>)
   83ef0:	4798      	blx	r3
								CSeventcount++;
   83ef2:	4b3b      	ldr	r3, [pc, #236]	; (83fe0 <Cl_bc_controller+0xcd4>)
   83ef4:	681b      	ldr	r3, [r3, #0]
   83ef6:	3301      	adds	r3, #1
   83ef8:	4a39      	ldr	r2, [pc, #228]	; (83fe0 <Cl_bc_controller+0xcd4>)
   83efa:	6013      	str	r3, [r2, #0]
								if(cl_bc_returncode == CL_OK)
   83efc:	7bfb      	ldrb	r3, [r7, #15]
   83efe:	2b00      	cmp	r3, #0
   83f00:	d10a      	bne.n	83f18 <Cl_bc_controller+0xc0c>
								{
									bc_laststate = bc_state;
   83f02:	4b38      	ldr	r3, [pc, #224]	; (83fe4 <Cl_bc_controller+0xcd8>)
   83f04:	781a      	ldrb	r2, [r3, #0]
   83f06:	4b38      	ldr	r3, [pc, #224]	; (83fe8 <Cl_bc_controller+0xcdc>)
   83f08:	701a      	strb	r2, [r3, #0]
									fill_time = 0;
   83f0a:	4b2a      	ldr	r3, [pc, #168]	; (83fb4 <Cl_bc_controller+0xca8>)
   83f0c:	2200      	movs	r2, #0
   83f0e:	801a      	strh	r2, [r3, #0]
									bc_state = CL_BC_STATE_BO1_V13V14_TRANSITION;
   83f10:	4b34      	ldr	r3, [pc, #208]	; (83fe4 <Cl_bc_controller+0xcd8>)
   83f12:	220c      	movs	r2, #12
   83f14:	701a      	strb	r2, [r3, #0]
								}
								break;
   83f16:	e001      	b.n	83f1c <Cl_bc_controller+0xc10>
   83f18:	e000      	b.n	83f1c <Cl_bc_controller+0xc10>
								default:break;
   83f1a:	bf00      	nop
							}
			break;
   83f1c:	e044      	b.n	83fa8 <Cl_bc_controller+0xc9c>
			case CL_BC_STATE_STOPPED_FOR_BC1:
							switch(cl_bc_event)
   83f1e:	79fb      	ldrb	r3, [r7, #7]
   83f20:	2b04      	cmp	r3, #4
   83f22:	d00b      	beq.n	83f3c <Cl_bc_controller+0xc30>
   83f24:	2b07      	cmp	r3, #7
   83f26:	d000      	beq.n	83f2a <Cl_bc_controller+0xc1e>
								cl_bc_returncode = sv_cntrl_setflowpath(BC_FLUSH_OPEN);
								bc_laststate = bc_state;
								bc_state = CL_BC_STATE_OPENFILL_TRANSITION;
								cl_bc_returncode = sv_cntrl_activate_valve(VALVE_ID19);
								break;
								default:break;
   83f28:	e01a      	b.n	83f60 <Cl_bc_controller+0xc54>
			break;
			case CL_BC_STATE_STOPPED_FOR_BC1:
							switch(cl_bc_event)
							{
								case BC_EVENT_START_BC1:
								cl_bc_returncode = (Cl_ReturnCodeType)sv_cntrl_setflowpath(BC_FLUSH_1_V13_14);
   83f2a:	2005      	movs	r0, #5
   83f2c:	4b28      	ldr	r3, [pc, #160]	; (83fd0 <Cl_bc_controller+0xcc4>)
   83f2e:	4798      	blx	r3
   83f30:	4603      	mov	r3, r0
   83f32:	73fb      	strb	r3, [r7, #15]
								bc_state = CL_BC_STATE_BC1_TRANSITION;
   83f34:	4b2b      	ldr	r3, [pc, #172]	; (83fe4 <Cl_bc_controller+0xcd8>)
   83f36:	2211      	movs	r2, #17
   83f38:	701a      	strb	r2, [r3, #0]
								break;
   83f3a:	e011      	b.n	83f60 <Cl_bc_controller+0xc54>
								case BC_EVENT_START:
								cl_bc_returncode = sv_cntrl_setflowpath(BC_FLUSH_OPEN);
   83f3c:	2007      	movs	r0, #7
   83f3e:	4b24      	ldr	r3, [pc, #144]	; (83fd0 <Cl_bc_controller+0xcc4>)
   83f40:	4798      	blx	r3
   83f42:	4603      	mov	r3, r0
   83f44:	73fb      	strb	r3, [r7, #15]
								bc_laststate = bc_state;
   83f46:	4b27      	ldr	r3, [pc, #156]	; (83fe4 <Cl_bc_controller+0xcd8>)
   83f48:	781a      	ldrb	r2, [r3, #0]
   83f4a:	4b27      	ldr	r3, [pc, #156]	; (83fe8 <Cl_bc_controller+0xcdc>)
   83f4c:	701a      	strb	r2, [r3, #0]
								bc_state = CL_BC_STATE_OPENFILL_TRANSITION;
   83f4e:	4b25      	ldr	r3, [pc, #148]	; (83fe4 <Cl_bc_controller+0xcd8>)
   83f50:	2202      	movs	r2, #2
   83f52:	701a      	strb	r2, [r3, #0]
								cl_bc_returncode = sv_cntrl_activate_valve(VALVE_ID19);
   83f54:	2013      	movs	r0, #19
   83f56:	4b1b      	ldr	r3, [pc, #108]	; (83fc4 <Cl_bc_controller+0xcb8>)
   83f58:	4798      	blx	r3
   83f5a:	4603      	mov	r3, r0
   83f5c:	73fb      	strb	r3, [r7, #15]
								break;
   83f5e:	bf00      	nop
								default:break;
						
							}
						
			break;
   83f60:	e022      	b.n	83fa8 <Cl_bc_controller+0xc9c>

			case CL_BC_STATE_STOPPED_FOR_BC2:
							switch(cl_bc_event)
   83f62:	79fb      	ldrb	r3, [r7, #7]
   83f64:	2b04      	cmp	r3, #4
   83f66:	d00b      	beq.n	83f80 <Cl_bc_controller+0xc74>
   83f68:	2b09      	cmp	r3, #9
   83f6a:	d000      	beq.n	83f6e <Cl_bc_controller+0xc62>
								cl_bc_returncode = sv_cntrl_setflowpath(BC_FLUSH_OPEN);
								bc_laststate = bc_state;
								cl_bc_returncode = sv_cntrl_activate_valve(VALVE_ID19);
								bc_state = CL_BC_STATE_OPENFILL_TRANSITION;
								break;
								default:break;
   83f6c:	e01a      	b.n	83fa4 <Cl_bc_controller+0xc98>

			case CL_BC_STATE_STOPPED_FOR_BC2:
							switch(cl_bc_event)
							{
								case BC_EVENT_START_BC2:
								cl_bc_returncode = (Cl_ReturnCodeType)sv_cntrl_setflowpath(BC_FLUSH_2_V13_14);
   83f6e:	2006      	movs	r0, #6
   83f70:	4b17      	ldr	r3, [pc, #92]	; (83fd0 <Cl_bc_controller+0xcc4>)
   83f72:	4798      	blx	r3
   83f74:	4603      	mov	r3, r0
   83f76:	73fb      	strb	r3, [r7, #15]
								bc_state = CL_BC_STATE_BC2_TRANSITION;
   83f78:	4b1a      	ldr	r3, [pc, #104]	; (83fe4 <Cl_bc_controller+0xcd8>)
   83f7a:	2213      	movs	r2, #19
   83f7c:	701a      	strb	r2, [r3, #0]
								break;
   83f7e:	e011      	b.n	83fa4 <Cl_bc_controller+0xc98>
								case BC_EVENT_START:
								cl_bc_returncode = sv_cntrl_setflowpath(BC_FLUSH_OPEN);
   83f80:	2007      	movs	r0, #7
   83f82:	4b13      	ldr	r3, [pc, #76]	; (83fd0 <Cl_bc_controller+0xcc4>)
   83f84:	4798      	blx	r3
   83f86:	4603      	mov	r3, r0
   83f88:	73fb      	strb	r3, [r7, #15]
								bc_laststate = bc_state;
   83f8a:	4b16      	ldr	r3, [pc, #88]	; (83fe4 <Cl_bc_controller+0xcd8>)
   83f8c:	781a      	ldrb	r2, [r3, #0]
   83f8e:	4b16      	ldr	r3, [pc, #88]	; (83fe8 <Cl_bc_controller+0xcdc>)
   83f90:	701a      	strb	r2, [r3, #0]
								cl_bc_returncode = sv_cntrl_activate_valve(VALVE_ID19);
   83f92:	2013      	movs	r0, #19
   83f94:	4b0b      	ldr	r3, [pc, #44]	; (83fc4 <Cl_bc_controller+0xcb8>)
   83f96:	4798      	blx	r3
   83f98:	4603      	mov	r3, r0
   83f9a:	73fb      	strb	r3, [r7, #15]
								bc_state = CL_BC_STATE_OPENFILL_TRANSITION;
   83f9c:	4b11      	ldr	r3, [pc, #68]	; (83fe4 <Cl_bc_controller+0xcd8>)
   83f9e:	2202      	movs	r2, #2
   83fa0:	701a      	strb	r2, [r3, #0]
								break;
   83fa2:	bf00      	nop
								default:break;
								
							}
			break;
   83fa4:	e000      	b.n	83fa8 <Cl_bc_controller+0xc9c>
			case CL_BC_STATE_COMPLETED_BC1:
			break;
			case CL_BC_STATE_COMPLETED_BC2:
			break;
			default:break;
   83fa6:	bf00      	nop
	}

	
	return 0;
   83fa8:	2300      	movs	r3, #0
}
   83faa:	4618      	mov	r0, r3
   83fac:	3710      	adds	r7, #16
   83fae:	46bd      	mov	sp, r7
   83fb0:	bd80      	pop	{r7, pc}
   83fb2:	bf00      	nop
   83fb4:	20071778 	.word	0x20071778
   83fb8:	20071770 	.word	0x20071770
   83fbc:	000830a1 	.word	0x000830a1
   83fc0:	00099f39 	.word	0x00099f39
   83fc4:	00099ccd 	.word	0x00099ccd
   83fc8:	00093195 	.word	0x00093195
   83fcc:	00099ced 	.word	0x00099ced
   83fd0:	00099ebd 	.word	0x00099ebd
   83fd4:	2007177c 	.word	0x2007177c
   83fd8:	0009ba51 	.word	0x0009ba51
   83fdc:	20071780 	.word	0x20071780
   83fe0:	20071774 	.word	0x20071774
   83fe4:	20071761 	.word	0x20071761
   83fe8:	20071762 	.word	0x20071762

00083fec <hep_calibration>:

//*************************************************** till this************


Cl_Uint32Type hep_calibration(Cl_Uint32Type inpt_ml)
{
   83fec:	b480      	push	{r7}
   83fee:	b085      	sub	sp, #20
   83ff0:	af00      	add	r7, sp, #0
   83ff2:	6078      	str	r0, [r7, #4]
	int i;
	int16_t slope;
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<50;i++)
   83ff4:	2300      	movs	r3, #0
   83ff6:	60fb      	str	r3, [r7, #12]
   83ff8:	e061      	b.n	840be <hep_calibration+0xd2>
	{
		if (inpt_ml == hp[i].ml)
   83ffa:	4a35      	ldr	r2, [pc, #212]	; (840d0 <hep_calibration+0xe4>)
   83ffc:	68fb      	ldr	r3, [r7, #12]
   83ffe:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   84002:	b29b      	uxth	r3, r3
   84004:	461a      	mov	r2, r3
   84006:	687b      	ldr	r3, [r7, #4]
   84008:	429a      	cmp	r2, r3
   8400a:	d10b      	bne.n	84024 <hep_calibration+0x38>
		{
			hep_speed=hp[i].speed;
   8400c:	4a30      	ldr	r2, [pc, #192]	; (840d0 <hep_calibration+0xe4>)
   8400e:	68fb      	ldr	r3, [r7, #12]
   84010:	009b      	lsls	r3, r3, #2
   84012:	4413      	add	r3, r2
   84014:	885b      	ldrh	r3, [r3, #2]
   84016:	b29b      	uxth	r3, r3
   84018:	461a      	mov	r2, r3
   8401a:	4b2e      	ldr	r3, [pc, #184]	; (840d4 <hep_calibration+0xe8>)
   8401c:	601a      	str	r2, [r3, #0]
			return hep_speed;
   8401e:	4b2d      	ldr	r3, [pc, #180]	; (840d4 <hep_calibration+0xe8>)
   84020:	681b      	ldr	r3, [r3, #0]
   84022:	e04f      	b.n	840c4 <hep_calibration+0xd8>
			//sv_cntrl_setpumpspeed(HEPARINPUMP,hep_speed);
			break;
		}
		else if ((inpt_ml > hp[i].ml) && (inpt_ml < hp[i+1].ml))
   84024:	4a2a      	ldr	r2, [pc, #168]	; (840d0 <hep_calibration+0xe4>)
   84026:	68fb      	ldr	r3, [r7, #12]
   84028:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   8402c:	b29b      	uxth	r3, r3
   8402e:	461a      	mov	r2, r3
   84030:	687b      	ldr	r3, [r7, #4]
   84032:	429a      	cmp	r2, r3
   84034:	d240      	bcs.n	840b8 <hep_calibration+0xcc>
   84036:	68fb      	ldr	r3, [r7, #12]
   84038:	3301      	adds	r3, #1
   8403a:	4a25      	ldr	r2, [pc, #148]	; (840d0 <hep_calibration+0xe4>)
   8403c:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   84040:	b29b      	uxth	r3, r3
   84042:	461a      	mov	r2, r3
   84044:	687b      	ldr	r3, [r7, #4]
   84046:	429a      	cmp	r2, r3
   84048:	d936      	bls.n	840b8 <hep_calibration+0xcc>
		{
			slope = ((hp[i+1].ml-hp[i].ml)/(hp[i+1].speed-hp[i].speed));
   8404a:	68fb      	ldr	r3, [r7, #12]
   8404c:	3301      	adds	r3, #1
   8404e:	4a20      	ldr	r2, [pc, #128]	; (840d0 <hep_calibration+0xe4>)
   84050:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   84054:	b29b      	uxth	r3, r3
   84056:	4619      	mov	r1, r3
   84058:	4a1d      	ldr	r2, [pc, #116]	; (840d0 <hep_calibration+0xe4>)
   8405a:	68fb      	ldr	r3, [r7, #12]
   8405c:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   84060:	b29b      	uxth	r3, r3
   84062:	1aca      	subs	r2, r1, r3
   84064:	68fb      	ldr	r3, [r7, #12]
   84066:	3301      	adds	r3, #1
   84068:	4919      	ldr	r1, [pc, #100]	; (840d0 <hep_calibration+0xe4>)
   8406a:	009b      	lsls	r3, r3, #2
   8406c:	440b      	add	r3, r1
   8406e:	885b      	ldrh	r3, [r3, #2]
   84070:	b29b      	uxth	r3, r3
   84072:	4618      	mov	r0, r3
   84074:	4916      	ldr	r1, [pc, #88]	; (840d0 <hep_calibration+0xe4>)
   84076:	68fb      	ldr	r3, [r7, #12]
   84078:	009b      	lsls	r3, r3, #2
   8407a:	440b      	add	r3, r1
   8407c:	885b      	ldrh	r3, [r3, #2]
   8407e:	b29b      	uxth	r3, r3
   84080:	1ac3      	subs	r3, r0, r3
   84082:	fb92 f3f3 	sdiv	r3, r2, r3
   84086:	817b      	strh	r3, [r7, #10]
			hep_speed = slope * (inpt_ml-hp[i].ml) + hp[i].speed;
   84088:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
   8408c:	4910      	ldr	r1, [pc, #64]	; (840d0 <hep_calibration+0xe4>)
   8408e:	68fa      	ldr	r2, [r7, #12]
   84090:	f831 2022 	ldrh.w	r2, [r1, r2, lsl #2]
   84094:	b292      	uxth	r2, r2
   84096:	4611      	mov	r1, r2
   84098:	687a      	ldr	r2, [r7, #4]
   8409a:	1a52      	subs	r2, r2, r1
   8409c:	fb02 f203 	mul.w	r2, r2, r3
   840a0:	490b      	ldr	r1, [pc, #44]	; (840d0 <hep_calibration+0xe4>)
   840a2:	68fb      	ldr	r3, [r7, #12]
   840a4:	009b      	lsls	r3, r3, #2
   840a6:	440b      	add	r3, r1
   840a8:	885b      	ldrh	r3, [r3, #2]
   840aa:	b29b      	uxth	r3, r3
   840ac:	4413      	add	r3, r2
   840ae:	4a09      	ldr	r2, [pc, #36]	; (840d4 <hep_calibration+0xe8>)
   840b0:	6013      	str	r3, [r2, #0]
			//sv_cntrl_setpumpspeed(HEPARINPUMP,hep_speed);
			return hep_speed;
   840b2:	4b08      	ldr	r3, [pc, #32]	; (840d4 <hep_calibration+0xe8>)
   840b4:	681b      	ldr	r3, [r3, #0]
   840b6:	e005      	b.n	840c4 <hep_calibration+0xd8>
Cl_Uint32Type hep_calibration(Cl_Uint32Type inpt_ml)
{
	int i;
	int16_t slope;
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<50;i++)
   840b8:	68fb      	ldr	r3, [r7, #12]
   840ba:	3301      	adds	r3, #1
   840bc:	60fb      	str	r3, [r7, #12]
   840be:	68fb      	ldr	r3, [r7, #12]
   840c0:	2b31      	cmp	r3, #49	; 0x31
   840c2:	dd9a      	ble.n	83ffa <hep_calibration+0xe>
			return hep_speed;
			break;
		}
	}
	
}
   840c4:	4618      	mov	r0, r3
   840c6:	3714      	adds	r7, #20
   840c8:	46bd      	mov	sp, r7
   840ca:	f85d 7b04 	ldr.w	r7, [sp], #4
   840ce:	4770      	bx	lr
   840d0:	20070124 	.word	0x20070124
   840d4:	20072174 	.word	0x20072174

000840d8 <calibration_apt>:
void calibration_apt(int16_t sensordata)
{
   840d8:	b590      	push	{r4, r7, lr}
   840da:	b085      	sub	sp, #20
   840dc:	af00      	add	r7, sp, #0
   840de:	4603      	mov	r3, r0
   840e0:	80fb      	strh	r3, [r7, #6]
	int i;
	float slope;
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<26;i++)
   840e2:	2300      	movs	r3, #0
   840e4:	60fb      	str	r3, [r7, #12]
   840e6:	e0ad      	b.n	84244 <calibration_apt+0x16c>
	{
		if (sensordata == apt2[i].millivolt)
   840e8:	4a5a      	ldr	r2, [pc, #360]	; (84254 <calibration_apt+0x17c>)
   840ea:	68fb      	ldr	r3, [r7, #12]
   840ec:	009b      	lsls	r3, r3, #2
   840ee:	4413      	add	r3, r2
   840f0:	885b      	ldrh	r3, [r3, #2]
   840f2:	b29b      	uxth	r3, r3
   840f4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   840f8:	b21b      	sxth	r3, r3
   840fa:	429a      	cmp	r2, r3
   840fc:	d10c      	bne.n	84118 <calibration_apt+0x40>
		{
			pressure_final_apt=apt2[i].pressure;
   840fe:	4a55      	ldr	r2, [pc, #340]	; (84254 <calibration_apt+0x17c>)
   84100:	68fb      	ldr	r3, [r7, #12]
   84102:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   84106:	b29b      	uxth	r3, r3
   84108:	b21a      	sxth	r2, r3
   8410a:	4b53      	ldr	r3, [pc, #332]	; (84258 <calibration_apt+0x180>)
   8410c:	4610      	mov	r0, r2
   8410e:	4798      	blx	r3
   84110:	4602      	mov	r2, r0
   84112:	4b52      	ldr	r3, [pc, #328]	; (8425c <calibration_apt+0x184>)
   84114:	601a      	str	r2, [r3, #0]
   84116:	e092      	b.n	8423e <calibration_apt+0x166>
		}
		else if ((sensordata > apt2[i].millivolt) && (sensordata < apt2[i+1].millivolt))
   84118:	4a4e      	ldr	r2, [pc, #312]	; (84254 <calibration_apt+0x17c>)
   8411a:	68fb      	ldr	r3, [r7, #12]
   8411c:	009b      	lsls	r3, r3, #2
   8411e:	4413      	add	r3, r2
   84120:	885b      	ldrh	r3, [r3, #2]
   84122:	b29b      	uxth	r3, r3
   84124:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   84128:	b21b      	sxth	r3, r3
   8412a:	429a      	cmp	r2, r3
   8412c:	dd60      	ble.n	841f0 <calibration_apt+0x118>
   8412e:	68fb      	ldr	r3, [r7, #12]
   84130:	3301      	adds	r3, #1
   84132:	4a48      	ldr	r2, [pc, #288]	; (84254 <calibration_apt+0x17c>)
   84134:	009b      	lsls	r3, r3, #2
   84136:	4413      	add	r3, r2
   84138:	885b      	ldrh	r3, [r3, #2]
   8413a:	b29b      	uxth	r3, r3
   8413c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   84140:	b21b      	sxth	r3, r3
   84142:	429a      	cmp	r2, r3
   84144:	da54      	bge.n	841f0 <calibration_apt+0x118>
		{
			slope = ((apt2[i+1].pressure-apt2[i].pressure)*100/(apt2[i+1].millivolt-apt2[i].millivolt));
   84146:	68fb      	ldr	r3, [r7, #12]
   84148:	3301      	adds	r3, #1
   8414a:	4a42      	ldr	r2, [pc, #264]	; (84254 <calibration_apt+0x17c>)
   8414c:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   84150:	b29b      	uxth	r3, r3
   84152:	b21a      	sxth	r2, r3
   84154:	493f      	ldr	r1, [pc, #252]	; (84254 <calibration_apt+0x17c>)
   84156:	68fb      	ldr	r3, [r7, #12]
   84158:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
   8415c:	b29b      	uxth	r3, r3
   8415e:	b21b      	sxth	r3, r3
   84160:	1ad3      	subs	r3, r2, r3
   84162:	2264      	movs	r2, #100	; 0x64
   84164:	fb02 f203 	mul.w	r2, r2, r3
   84168:	68fb      	ldr	r3, [r7, #12]
   8416a:	3301      	adds	r3, #1
   8416c:	4939      	ldr	r1, [pc, #228]	; (84254 <calibration_apt+0x17c>)
   8416e:	009b      	lsls	r3, r3, #2
   84170:	440b      	add	r3, r1
   84172:	885b      	ldrh	r3, [r3, #2]
   84174:	b29b      	uxth	r3, r3
   84176:	b219      	sxth	r1, r3
   84178:	4836      	ldr	r0, [pc, #216]	; (84254 <calibration_apt+0x17c>)
   8417a:	68fb      	ldr	r3, [r7, #12]
   8417c:	009b      	lsls	r3, r3, #2
   8417e:	4403      	add	r3, r0
   84180:	885b      	ldrh	r3, [r3, #2]
   84182:	b29b      	uxth	r3, r3
   84184:	b21b      	sxth	r3, r3
   84186:	1acb      	subs	r3, r1, r3
   84188:	fb92 f2f3 	sdiv	r2, r2, r3
   8418c:	4b32      	ldr	r3, [pc, #200]	; (84258 <calibration_apt+0x180>)
   8418e:	4610      	mov	r0, r2
   84190:	4798      	blx	r3
   84192:	4603      	mov	r3, r0
   84194:	60bb      	str	r3, [r7, #8]
			pressure_final_apt = (slope * (sensordata-apt2[i].millivolt))/100 + apt2[i].pressure;
   84196:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   8419a:	492e      	ldr	r1, [pc, #184]	; (84254 <calibration_apt+0x17c>)
   8419c:	68fb      	ldr	r3, [r7, #12]
   8419e:	009b      	lsls	r3, r3, #2
   841a0:	440b      	add	r3, r1
   841a2:	885b      	ldrh	r3, [r3, #2]
   841a4:	b29b      	uxth	r3, r3
   841a6:	b21b      	sxth	r3, r3
   841a8:	1ad2      	subs	r2, r2, r3
   841aa:	4b2b      	ldr	r3, [pc, #172]	; (84258 <calibration_apt+0x180>)
   841ac:	4610      	mov	r0, r2
   841ae:	4798      	blx	r3
   841b0:	4602      	mov	r2, r0
   841b2:	4b2b      	ldr	r3, [pc, #172]	; (84260 <calibration_apt+0x188>)
   841b4:	4610      	mov	r0, r2
   841b6:	68b9      	ldr	r1, [r7, #8]
   841b8:	4798      	blx	r3
   841ba:	4603      	mov	r3, r0
   841bc:	461a      	mov	r2, r3
   841be:	4b29      	ldr	r3, [pc, #164]	; (84264 <calibration_apt+0x18c>)
   841c0:	4610      	mov	r0, r2
   841c2:	4929      	ldr	r1, [pc, #164]	; (84268 <calibration_apt+0x190>)
   841c4:	4798      	blx	r3
   841c6:	4603      	mov	r3, r0
   841c8:	461c      	mov	r4, r3
   841ca:	4a22      	ldr	r2, [pc, #136]	; (84254 <calibration_apt+0x17c>)
   841cc:	68fb      	ldr	r3, [r7, #12]
   841ce:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   841d2:	b29b      	uxth	r3, r3
   841d4:	b21a      	sxth	r2, r3
   841d6:	4b20      	ldr	r3, [pc, #128]	; (84258 <calibration_apt+0x180>)
   841d8:	4610      	mov	r0, r2
   841da:	4798      	blx	r3
   841dc:	4602      	mov	r2, r0
   841de:	4b23      	ldr	r3, [pc, #140]	; (8426c <calibration_apt+0x194>)
   841e0:	4620      	mov	r0, r4
   841e2:	4611      	mov	r1, r2
   841e4:	4798      	blx	r3
   841e6:	4603      	mov	r3, r0
   841e8:	461a      	mov	r2, r3
   841ea:	4b1c      	ldr	r3, [pc, #112]	; (8425c <calibration_apt+0x184>)
   841ec:	601a      	str	r2, [r3, #0]
   841ee:	e026      	b.n	8423e <calibration_apt+0x166>
		}
		else if(sensordata < apt2[0].millivolt)
   841f0:	4b18      	ldr	r3, [pc, #96]	; (84254 <calibration_apt+0x17c>)
   841f2:	885b      	ldrh	r3, [r3, #2]
   841f4:	b29b      	uxth	r3, r3
   841f6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   841fa:	b21b      	sxth	r3, r3
   841fc:	429a      	cmp	r2, r3
   841fe:	da0a      	bge.n	84216 <calibration_apt+0x13e>
		{
			pressure_final_apt = apt2[0].pressure;
   84200:	4b14      	ldr	r3, [pc, #80]	; (84254 <calibration_apt+0x17c>)
   84202:	881b      	ldrh	r3, [r3, #0]
   84204:	b29b      	uxth	r3, r3
   84206:	b21a      	sxth	r2, r3
   84208:	4b13      	ldr	r3, [pc, #76]	; (84258 <calibration_apt+0x180>)
   8420a:	4610      	mov	r0, r2
   8420c:	4798      	blx	r3
   8420e:	4602      	mov	r2, r0
   84210:	4b12      	ldr	r3, [pc, #72]	; (8425c <calibration_apt+0x184>)
   84212:	601a      	str	r2, [r3, #0]
   84214:	e013      	b.n	8423e <calibration_apt+0x166>
		}
		else  if(sensordata > apt2[25].millivolt)
   84216:	4b0f      	ldr	r3, [pc, #60]	; (84254 <calibration_apt+0x17c>)
   84218:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
   8421c:	b29b      	uxth	r3, r3
   8421e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   84222:	b21b      	sxth	r3, r3
   84224:	429a      	cmp	r2, r3
   84226:	dd0a      	ble.n	8423e <calibration_apt+0x166>
		{
			pressure_final_apt = apt2[25].pressure;
   84228:	4b0a      	ldr	r3, [pc, #40]	; (84254 <calibration_apt+0x17c>)
   8422a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
   8422e:	b29b      	uxth	r3, r3
   84230:	b21a      	sxth	r2, r3
   84232:	4b09      	ldr	r3, [pc, #36]	; (84258 <calibration_apt+0x180>)
   84234:	4610      	mov	r0, r2
   84236:	4798      	blx	r3
   84238:	4602      	mov	r2, r0
   8423a:	4b08      	ldr	r3, [pc, #32]	; (8425c <calibration_apt+0x184>)
   8423c:	601a      	str	r2, [r3, #0]
void calibration_apt(int16_t sensordata)
{
	int i;
	float slope;
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<26;i++)
   8423e:	68fb      	ldr	r3, [r7, #12]
   84240:	3301      	adds	r3, #1
   84242:	60fb      	str	r3, [r7, #12]
   84244:	68fb      	ldr	r3, [r7, #12]
   84246:	2b19      	cmp	r3, #25
   84248:	f77f af4e 	ble.w	840e8 <calibration_apt+0x10>
		{
			pressure_final_apt = apt2[25].pressure;
		}
		
	}
}
   8424c:	3714      	adds	r7, #20
   8424e:	46bd      	mov	sp, r7
   84250:	bd90      	pop	{r4, r7, pc}
   84252:	bf00      	nop
   84254:	200701ec 	.word	0x200701ec
   84258:	000a68b1 	.word	0x000a68b1
   8425c:	20072170 	.word	0x20072170
   84260:	000a6959 	.word	0x000a6959
   84264:	000a6ac1 	.word	0x000a6ac1
   84268:	42c80000 	.word	0x42c80000
   8426c:	000a6749 	.word	0x000a6749

00084270 <calibration_vpt>:
void calibration_vpt(int16_t sensordata)
{
   84270:	b590      	push	{r4, r7, lr}
   84272:	b085      	sub	sp, #20
   84274:	af00      	add	r7, sp, #0
   84276:	4603      	mov	r3, r0
   84278:	80fb      	strh	r3, [r7, #6]
	int i;
	float slope;
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<26;i++)
   8427a:	2300      	movs	r3, #0
   8427c:	60fb      	str	r3, [r7, #12]
   8427e:	e0ad      	b.n	843dc <calibration_vpt+0x16c>
	{
		if (sensordata == vpt2[i].millivolt)
   84280:	4a5a      	ldr	r2, [pc, #360]	; (843ec <calibration_vpt+0x17c>)
   84282:	68fb      	ldr	r3, [r7, #12]
   84284:	009b      	lsls	r3, r3, #2
   84286:	4413      	add	r3, r2
   84288:	885b      	ldrh	r3, [r3, #2]
   8428a:	b29b      	uxth	r3, r3
   8428c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   84290:	b21b      	sxth	r3, r3
   84292:	429a      	cmp	r2, r3
   84294:	d10c      	bne.n	842b0 <calibration_vpt+0x40>
		{
			pressure_final_vpt=vpt2[i].pressure;
   84296:	4a55      	ldr	r2, [pc, #340]	; (843ec <calibration_vpt+0x17c>)
   84298:	68fb      	ldr	r3, [r7, #12]
   8429a:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   8429e:	b29b      	uxth	r3, r3
   842a0:	b21a      	sxth	r2, r3
   842a2:	4b53      	ldr	r3, [pc, #332]	; (843f0 <calibration_vpt+0x180>)
   842a4:	4610      	mov	r0, r2
   842a6:	4798      	blx	r3
   842a8:	4602      	mov	r2, r0
   842aa:	4b52      	ldr	r3, [pc, #328]	; (843f4 <calibration_vpt+0x184>)
   842ac:	601a      	str	r2, [r3, #0]
			break;
   842ae:	e099      	b.n	843e4 <calibration_vpt+0x174>
		}
		else if ((sensordata > vpt2[i].millivolt) && (sensordata < vpt2[i+1].millivolt))
   842b0:	4a4e      	ldr	r2, [pc, #312]	; (843ec <calibration_vpt+0x17c>)
   842b2:	68fb      	ldr	r3, [r7, #12]
   842b4:	009b      	lsls	r3, r3, #2
   842b6:	4413      	add	r3, r2
   842b8:	885b      	ldrh	r3, [r3, #2]
   842ba:	b29b      	uxth	r3, r3
   842bc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   842c0:	b21b      	sxth	r3, r3
   842c2:	429a      	cmp	r2, r3
   842c4:	dd60      	ble.n	84388 <calibration_vpt+0x118>
   842c6:	68fb      	ldr	r3, [r7, #12]
   842c8:	3301      	adds	r3, #1
   842ca:	4a48      	ldr	r2, [pc, #288]	; (843ec <calibration_vpt+0x17c>)
   842cc:	009b      	lsls	r3, r3, #2
   842ce:	4413      	add	r3, r2
   842d0:	885b      	ldrh	r3, [r3, #2]
   842d2:	b29b      	uxth	r3, r3
   842d4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   842d8:	b21b      	sxth	r3, r3
   842da:	429a      	cmp	r2, r3
   842dc:	da54      	bge.n	84388 <calibration_vpt+0x118>
		{
			slope = ((vpt2[i+1].pressure-vpt2[i].pressure) * 100/(vpt2[i+1].millivolt-vpt2[i].millivolt));
   842de:	68fb      	ldr	r3, [r7, #12]
   842e0:	3301      	adds	r3, #1
   842e2:	4a42      	ldr	r2, [pc, #264]	; (843ec <calibration_vpt+0x17c>)
   842e4:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   842e8:	b29b      	uxth	r3, r3
   842ea:	b21a      	sxth	r2, r3
   842ec:	493f      	ldr	r1, [pc, #252]	; (843ec <calibration_vpt+0x17c>)
   842ee:	68fb      	ldr	r3, [r7, #12]
   842f0:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
   842f4:	b29b      	uxth	r3, r3
   842f6:	b21b      	sxth	r3, r3
   842f8:	1ad3      	subs	r3, r2, r3
   842fa:	2264      	movs	r2, #100	; 0x64
   842fc:	fb02 f203 	mul.w	r2, r2, r3
   84300:	68fb      	ldr	r3, [r7, #12]
   84302:	3301      	adds	r3, #1
   84304:	4939      	ldr	r1, [pc, #228]	; (843ec <calibration_vpt+0x17c>)
   84306:	009b      	lsls	r3, r3, #2
   84308:	440b      	add	r3, r1
   8430a:	885b      	ldrh	r3, [r3, #2]
   8430c:	b29b      	uxth	r3, r3
   8430e:	b219      	sxth	r1, r3
   84310:	4836      	ldr	r0, [pc, #216]	; (843ec <calibration_vpt+0x17c>)
   84312:	68fb      	ldr	r3, [r7, #12]
   84314:	009b      	lsls	r3, r3, #2
   84316:	4403      	add	r3, r0
   84318:	885b      	ldrh	r3, [r3, #2]
   8431a:	b29b      	uxth	r3, r3
   8431c:	b21b      	sxth	r3, r3
   8431e:	1acb      	subs	r3, r1, r3
   84320:	fb92 f2f3 	sdiv	r2, r2, r3
   84324:	4b32      	ldr	r3, [pc, #200]	; (843f0 <calibration_vpt+0x180>)
   84326:	4610      	mov	r0, r2
   84328:	4798      	blx	r3
   8432a:	4603      	mov	r3, r0
   8432c:	60bb      	str	r3, [r7, #8]
			pressure_final_vpt = (slope *(sensordata-vpt2[i].millivolt))/100 + vpt2[i].pressure;
   8432e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   84332:	492e      	ldr	r1, [pc, #184]	; (843ec <calibration_vpt+0x17c>)
   84334:	68fb      	ldr	r3, [r7, #12]
   84336:	009b      	lsls	r3, r3, #2
   84338:	440b      	add	r3, r1
   8433a:	885b      	ldrh	r3, [r3, #2]
   8433c:	b29b      	uxth	r3, r3
   8433e:	b21b      	sxth	r3, r3
   84340:	1ad2      	subs	r2, r2, r3
   84342:	4b2b      	ldr	r3, [pc, #172]	; (843f0 <calibration_vpt+0x180>)
   84344:	4610      	mov	r0, r2
   84346:	4798      	blx	r3
   84348:	4602      	mov	r2, r0
   8434a:	4b2b      	ldr	r3, [pc, #172]	; (843f8 <calibration_vpt+0x188>)
   8434c:	4610      	mov	r0, r2
   8434e:	68b9      	ldr	r1, [r7, #8]
   84350:	4798      	blx	r3
   84352:	4603      	mov	r3, r0
   84354:	461a      	mov	r2, r3
   84356:	4b29      	ldr	r3, [pc, #164]	; (843fc <calibration_vpt+0x18c>)
   84358:	4610      	mov	r0, r2
   8435a:	4929      	ldr	r1, [pc, #164]	; (84400 <calibration_vpt+0x190>)
   8435c:	4798      	blx	r3
   8435e:	4603      	mov	r3, r0
   84360:	461c      	mov	r4, r3
   84362:	4a22      	ldr	r2, [pc, #136]	; (843ec <calibration_vpt+0x17c>)
   84364:	68fb      	ldr	r3, [r7, #12]
   84366:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   8436a:	b29b      	uxth	r3, r3
   8436c:	b21a      	sxth	r2, r3
   8436e:	4b20      	ldr	r3, [pc, #128]	; (843f0 <calibration_vpt+0x180>)
   84370:	4610      	mov	r0, r2
   84372:	4798      	blx	r3
   84374:	4602      	mov	r2, r0
   84376:	4b23      	ldr	r3, [pc, #140]	; (84404 <calibration_vpt+0x194>)
   84378:	4620      	mov	r0, r4
   8437a:	4611      	mov	r1, r2
   8437c:	4798      	blx	r3
   8437e:	4603      	mov	r3, r0
   84380:	461a      	mov	r2, r3
   84382:	4b1c      	ldr	r3, [pc, #112]	; (843f4 <calibration_vpt+0x184>)
   84384:	601a      	str	r2, [r3, #0]
			break;
   84386:	e02d      	b.n	843e4 <calibration_vpt+0x174>
		}
		else if(sensordata < vpt2[0].millivolt)
   84388:	4b18      	ldr	r3, [pc, #96]	; (843ec <calibration_vpt+0x17c>)
   8438a:	885b      	ldrh	r3, [r3, #2]
   8438c:	b29b      	uxth	r3, r3
   8438e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   84392:	b21b      	sxth	r3, r3
   84394:	429a      	cmp	r2, r3
   84396:	da0a      	bge.n	843ae <calibration_vpt+0x13e>
		{
			pressure_final_apt = vpt2[0].pressure;
   84398:	4b14      	ldr	r3, [pc, #80]	; (843ec <calibration_vpt+0x17c>)
   8439a:	881b      	ldrh	r3, [r3, #0]
   8439c:	b29b      	uxth	r3, r3
   8439e:	b21a      	sxth	r2, r3
   843a0:	4b13      	ldr	r3, [pc, #76]	; (843f0 <calibration_vpt+0x180>)
   843a2:	4610      	mov	r0, r2
   843a4:	4798      	blx	r3
   843a6:	4602      	mov	r2, r0
   843a8:	4b17      	ldr	r3, [pc, #92]	; (84408 <calibration_vpt+0x198>)
   843aa:	601a      	str	r2, [r3, #0]
   843ac:	e013      	b.n	843d6 <calibration_vpt+0x166>
		}
		else  if(sensordata > vpt2[25].millivolt)
   843ae:	4b0f      	ldr	r3, [pc, #60]	; (843ec <calibration_vpt+0x17c>)
   843b0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
   843b4:	b29b      	uxth	r3, r3
   843b6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   843ba:	b21b      	sxth	r3, r3
   843bc:	429a      	cmp	r2, r3
   843be:	dd0a      	ble.n	843d6 <calibration_vpt+0x166>
		{
			pressure_final_apt = vpt2[25].pressure;
   843c0:	4b0a      	ldr	r3, [pc, #40]	; (843ec <calibration_vpt+0x17c>)
   843c2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
   843c6:	b29b      	uxth	r3, r3
   843c8:	b21a      	sxth	r2, r3
   843ca:	4b09      	ldr	r3, [pc, #36]	; (843f0 <calibration_vpt+0x180>)
   843cc:	4610      	mov	r0, r2
   843ce:	4798      	blx	r3
   843d0:	4602      	mov	r2, r0
   843d2:	4b0d      	ldr	r3, [pc, #52]	; (84408 <calibration_vpt+0x198>)
   843d4:	601a      	str	r2, [r3, #0]
void calibration_vpt(int16_t sensordata)
{
	int i;
	float slope;
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<26;i++)
   843d6:	68fb      	ldr	r3, [r7, #12]
   843d8:	3301      	adds	r3, #1
   843da:	60fb      	str	r3, [r7, #12]
   843dc:	68fb      	ldr	r3, [r7, #12]
   843de:	2b19      	cmp	r3, #25
   843e0:	f77f af4e 	ble.w	84280 <calibration_vpt+0x10>
		{
			pressure_final_apt = vpt2[25].pressure;
		}
	}
	
}
   843e4:	3714      	adds	r7, #20
   843e6:	46bd      	mov	sp, r7
   843e8:	bd90      	pop	{r4, r7, pc}
   843ea:	bf00      	nop
   843ec:	20070254 	.word	0x20070254
   843f0:	000a68b1 	.word	0x000a68b1
   843f4:	20071784 	.word	0x20071784
   843f8:	000a6959 	.word	0x000a6959
   843fc:	000a6ac1 	.word	0x000a6ac1
   84400:	42c80000 	.word	0x42c80000
   84404:	000a6749 	.word	0x000a6749
   84408:	20072170 	.word	0x20072170

0008440c <calibration_ps1>:
void calibration_ps1(int16_t sensordata)
{
   8440c:	b580      	push	{r7, lr}
   8440e:	b084      	sub	sp, #16
   84410:	af00      	add	r7, sp, #0
   84412:	4603      	mov	r3, r0
   84414:	80fb      	strh	r3, [r7, #6]
	int i;
	int16_t slope;
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<27;i++)
   84416:	2300      	movs	r3, #0
   84418:	60fb      	str	r3, [r7, #12]
   8441a:	e077      	b.n	8450c <calibration_ps1+0x100>
	{
		if (sensordata == ps_1_2[i].millivolt)
   8441c:	4a3e      	ldr	r2, [pc, #248]	; (84518 <calibration_ps1+0x10c>)
   8441e:	68fb      	ldr	r3, [r7, #12]
   84420:	009b      	lsls	r3, r3, #2
   84422:	4413      	add	r3, r2
   84424:	885b      	ldrh	r3, [r3, #2]
   84426:	b29b      	uxth	r3, r3
   84428:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   8442c:	b21b      	sxth	r3, r3
   8442e:	429a      	cmp	r2, r3
   84430:	d10c      	bne.n	8444c <calibration_ps1+0x40>
		{
			pressure_final_ps1=ps_1_2[i].pressure;
   84432:	4a39      	ldr	r2, [pc, #228]	; (84518 <calibration_ps1+0x10c>)
   84434:	68fb      	ldr	r3, [r7, #12]
   84436:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   8443a:	b29b      	uxth	r3, r3
   8443c:	b21a      	sxth	r2, r3
   8443e:	4b37      	ldr	r3, [pc, #220]	; (8451c <calibration_ps1+0x110>)
   84440:	4610      	mov	r0, r2
   84442:	4798      	blx	r3
   84444:	4602      	mov	r2, r0
   84446:	4b36      	ldr	r3, [pc, #216]	; (84520 <calibration_ps1+0x114>)
   84448:	601a      	str	r2, [r3, #0]
			break;
   8444a:	e062      	b.n	84512 <calibration_ps1+0x106>
		}
		else if ((sensordata > ps_1_2[i].millivolt) && (sensordata < ps_1_2[i+1].millivolt))
   8444c:	4a32      	ldr	r2, [pc, #200]	; (84518 <calibration_ps1+0x10c>)
   8444e:	68fb      	ldr	r3, [r7, #12]
   84450:	009b      	lsls	r3, r3, #2
   84452:	4413      	add	r3, r2
   84454:	885b      	ldrh	r3, [r3, #2]
   84456:	b29b      	uxth	r3, r3
   84458:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   8445c:	b21b      	sxth	r3, r3
   8445e:	429a      	cmp	r2, r3
   84460:	dd51      	ble.n	84506 <calibration_ps1+0xfa>
   84462:	68fb      	ldr	r3, [r7, #12]
   84464:	3301      	adds	r3, #1
   84466:	4a2c      	ldr	r2, [pc, #176]	; (84518 <calibration_ps1+0x10c>)
   84468:	009b      	lsls	r3, r3, #2
   8446a:	4413      	add	r3, r2
   8446c:	885b      	ldrh	r3, [r3, #2]
   8446e:	b29b      	uxth	r3, r3
   84470:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   84474:	b21b      	sxth	r3, r3
   84476:	429a      	cmp	r2, r3
   84478:	da45      	bge.n	84506 <calibration_ps1+0xfa>
		{
			slope = ((ps_1_2[i+1].pressure-ps_1_2[i].pressure)*100/(ps_1_2[i+1].millivolt-ps_1_2[i].millivolt));
   8447a:	68fb      	ldr	r3, [r7, #12]
   8447c:	3301      	adds	r3, #1
   8447e:	4a26      	ldr	r2, [pc, #152]	; (84518 <calibration_ps1+0x10c>)
   84480:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   84484:	b29b      	uxth	r3, r3
   84486:	b21a      	sxth	r2, r3
   84488:	4923      	ldr	r1, [pc, #140]	; (84518 <calibration_ps1+0x10c>)
   8448a:	68fb      	ldr	r3, [r7, #12]
   8448c:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
   84490:	b29b      	uxth	r3, r3
   84492:	b21b      	sxth	r3, r3
   84494:	1ad3      	subs	r3, r2, r3
   84496:	2264      	movs	r2, #100	; 0x64
   84498:	fb02 f203 	mul.w	r2, r2, r3
   8449c:	68fb      	ldr	r3, [r7, #12]
   8449e:	3301      	adds	r3, #1
   844a0:	491d      	ldr	r1, [pc, #116]	; (84518 <calibration_ps1+0x10c>)
   844a2:	009b      	lsls	r3, r3, #2
   844a4:	440b      	add	r3, r1
   844a6:	885b      	ldrh	r3, [r3, #2]
   844a8:	b29b      	uxth	r3, r3
   844aa:	b219      	sxth	r1, r3
   844ac:	481a      	ldr	r0, [pc, #104]	; (84518 <calibration_ps1+0x10c>)
   844ae:	68fb      	ldr	r3, [r7, #12]
   844b0:	009b      	lsls	r3, r3, #2
   844b2:	4403      	add	r3, r0
   844b4:	885b      	ldrh	r3, [r3, #2]
   844b6:	b29b      	uxth	r3, r3
   844b8:	b21b      	sxth	r3, r3
   844ba:	1acb      	subs	r3, r1, r3
   844bc:	fb92 f3f3 	sdiv	r3, r2, r3
   844c0:	817b      	strh	r3, [r7, #10]
			pressure_final_ps1 = (slope * (sensordata-ps_1_2[i].millivolt))/100 + ps_1_2[i].pressure;
   844c2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
   844c6:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
   844ca:	4813      	ldr	r0, [pc, #76]	; (84518 <calibration_ps1+0x10c>)
   844cc:	68fb      	ldr	r3, [r7, #12]
   844ce:	009b      	lsls	r3, r3, #2
   844d0:	4403      	add	r3, r0
   844d2:	885b      	ldrh	r3, [r3, #2]
   844d4:	b29b      	uxth	r3, r3
   844d6:	b21b      	sxth	r3, r3
   844d8:	1acb      	subs	r3, r1, r3
   844da:	fb03 f302 	mul.w	r3, r3, r2
   844de:	4a11      	ldr	r2, [pc, #68]	; (84524 <calibration_ps1+0x118>)
   844e0:	fb82 1203 	smull	r1, r2, r2, r3
   844e4:	1152      	asrs	r2, r2, #5
   844e6:	17db      	asrs	r3, r3, #31
   844e8:	1ad2      	subs	r2, r2, r3
   844ea:	490b      	ldr	r1, [pc, #44]	; (84518 <calibration_ps1+0x10c>)
   844ec:	68fb      	ldr	r3, [r7, #12]
   844ee:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
   844f2:	b29b      	uxth	r3, r3
   844f4:	b21b      	sxth	r3, r3
   844f6:	441a      	add	r2, r3
   844f8:	4b08      	ldr	r3, [pc, #32]	; (8451c <calibration_ps1+0x110>)
   844fa:	4610      	mov	r0, r2
   844fc:	4798      	blx	r3
   844fe:	4602      	mov	r2, r0
   84500:	4b07      	ldr	r3, [pc, #28]	; (84520 <calibration_ps1+0x114>)
   84502:	601a      	str	r2, [r3, #0]
			break;
   84504:	e005      	b.n	84512 <calibration_ps1+0x106>
void calibration_ps1(int16_t sensordata)
{
	int i;
	int16_t slope;
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<27;i++)
   84506:	68fb      	ldr	r3, [r7, #12]
   84508:	3301      	adds	r3, #1
   8450a:	60fb      	str	r3, [r7, #12]
   8450c:	68fb      	ldr	r3, [r7, #12]
   8450e:	2b1a      	cmp	r3, #26
   84510:	dd84      	ble.n	8441c <calibration_ps1+0x10>
			slope = ((ps_1_2[i+1].pressure-ps_1_2[i].pressure)*100/(ps_1_2[i+1].millivolt-ps_1_2[i].millivolt));
			pressure_final_ps1 = (slope * (sensordata-ps_1_2[i].millivolt))/100 + ps_1_2[i].pressure;
			break;
		}
	}
}
   84512:	3710      	adds	r7, #16
   84514:	46bd      	mov	sp, r7
   84516:	bd80      	pop	{r7, pc}
   84518:	200702f4 	.word	0x200702f4
   8451c:	000a68b1 	.word	0x000a68b1
   84520:	20071788 	.word	0x20071788
   84524:	51eb851f 	.word	0x51eb851f

00084528 <calibration_ps2>:
void calibration_ps2(int16_t sensordata)
{
   84528:	b580      	push	{r7, lr}
   8452a:	b084      	sub	sp, #16
   8452c:	af00      	add	r7, sp, #0
   8452e:	4603      	mov	r3, r0
   84530:	80fb      	strh	r3, [r7, #6]
	int i;
	int16_t slope;
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<27;i++)
   84532:	2300      	movs	r3, #0
   84534:	60fb      	str	r3, [r7, #12]
   84536:	e077      	b.n	84628 <calibration_ps2+0x100>
	{
		if (sensordata == ps_2_2[i].millivolt)
   84538:	4a3e      	ldr	r2, [pc, #248]	; (84634 <calibration_ps2+0x10c>)
   8453a:	68fb      	ldr	r3, [r7, #12]
   8453c:	009b      	lsls	r3, r3, #2
   8453e:	4413      	add	r3, r2
   84540:	885b      	ldrh	r3, [r3, #2]
   84542:	b29b      	uxth	r3, r3
   84544:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   84548:	b21b      	sxth	r3, r3
   8454a:	429a      	cmp	r2, r3
   8454c:	d10c      	bne.n	84568 <calibration_ps2+0x40>
		{
			pressure_final_ps2=ps_2_2[i].pressure;
   8454e:	4a39      	ldr	r2, [pc, #228]	; (84634 <calibration_ps2+0x10c>)
   84550:	68fb      	ldr	r3, [r7, #12]
   84552:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   84556:	b29b      	uxth	r3, r3
   84558:	b21a      	sxth	r2, r3
   8455a:	4b37      	ldr	r3, [pc, #220]	; (84638 <calibration_ps2+0x110>)
   8455c:	4610      	mov	r0, r2
   8455e:	4798      	blx	r3
   84560:	4602      	mov	r2, r0
   84562:	4b36      	ldr	r3, [pc, #216]	; (8463c <calibration_ps2+0x114>)
   84564:	601a      	str	r2, [r3, #0]
			break;
   84566:	e062      	b.n	8462e <calibration_ps2+0x106>
		}
		else if ((sensordata > ps_2_2[i].millivolt) && (sensordata < ps_2_2[i+1].millivolt))
   84568:	4a32      	ldr	r2, [pc, #200]	; (84634 <calibration_ps2+0x10c>)
   8456a:	68fb      	ldr	r3, [r7, #12]
   8456c:	009b      	lsls	r3, r3, #2
   8456e:	4413      	add	r3, r2
   84570:	885b      	ldrh	r3, [r3, #2]
   84572:	b29b      	uxth	r3, r3
   84574:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   84578:	b21b      	sxth	r3, r3
   8457a:	429a      	cmp	r2, r3
   8457c:	dd51      	ble.n	84622 <calibration_ps2+0xfa>
   8457e:	68fb      	ldr	r3, [r7, #12]
   84580:	3301      	adds	r3, #1
   84582:	4a2c      	ldr	r2, [pc, #176]	; (84634 <calibration_ps2+0x10c>)
   84584:	009b      	lsls	r3, r3, #2
   84586:	4413      	add	r3, r2
   84588:	885b      	ldrh	r3, [r3, #2]
   8458a:	b29b      	uxth	r3, r3
   8458c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   84590:	b21b      	sxth	r3, r3
   84592:	429a      	cmp	r2, r3
   84594:	da45      	bge.n	84622 <calibration_ps2+0xfa>
		{
			slope = ((ps_2_2[i+1].pressure-ps_2_2[i].pressure) *100 /(ps_2_2[i+1].millivolt-ps_2_2[i].millivolt));
   84596:	68fb      	ldr	r3, [r7, #12]
   84598:	3301      	adds	r3, #1
   8459a:	4a26      	ldr	r2, [pc, #152]	; (84634 <calibration_ps2+0x10c>)
   8459c:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   845a0:	b29b      	uxth	r3, r3
   845a2:	b21a      	sxth	r2, r3
   845a4:	4923      	ldr	r1, [pc, #140]	; (84634 <calibration_ps2+0x10c>)
   845a6:	68fb      	ldr	r3, [r7, #12]
   845a8:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
   845ac:	b29b      	uxth	r3, r3
   845ae:	b21b      	sxth	r3, r3
   845b0:	1ad3      	subs	r3, r2, r3
   845b2:	2264      	movs	r2, #100	; 0x64
   845b4:	fb02 f203 	mul.w	r2, r2, r3
   845b8:	68fb      	ldr	r3, [r7, #12]
   845ba:	3301      	adds	r3, #1
   845bc:	491d      	ldr	r1, [pc, #116]	; (84634 <calibration_ps2+0x10c>)
   845be:	009b      	lsls	r3, r3, #2
   845c0:	440b      	add	r3, r1
   845c2:	885b      	ldrh	r3, [r3, #2]
   845c4:	b29b      	uxth	r3, r3
   845c6:	b219      	sxth	r1, r3
   845c8:	481a      	ldr	r0, [pc, #104]	; (84634 <calibration_ps2+0x10c>)
   845ca:	68fb      	ldr	r3, [r7, #12]
   845cc:	009b      	lsls	r3, r3, #2
   845ce:	4403      	add	r3, r0
   845d0:	885b      	ldrh	r3, [r3, #2]
   845d2:	b29b      	uxth	r3, r3
   845d4:	b21b      	sxth	r3, r3
   845d6:	1acb      	subs	r3, r1, r3
   845d8:	fb92 f3f3 	sdiv	r3, r2, r3
   845dc:	817b      	strh	r3, [r7, #10]
			pressure_final_ps2 = (slope * (sensordata-ps_2_2[i].millivolt))/100 + ps_2_2[i].pressure;
   845de:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
   845e2:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
   845e6:	4813      	ldr	r0, [pc, #76]	; (84634 <calibration_ps2+0x10c>)
   845e8:	68fb      	ldr	r3, [r7, #12]
   845ea:	009b      	lsls	r3, r3, #2
   845ec:	4403      	add	r3, r0
   845ee:	885b      	ldrh	r3, [r3, #2]
   845f0:	b29b      	uxth	r3, r3
   845f2:	b21b      	sxth	r3, r3
   845f4:	1acb      	subs	r3, r1, r3
   845f6:	fb03 f302 	mul.w	r3, r3, r2
   845fa:	4a11      	ldr	r2, [pc, #68]	; (84640 <calibration_ps2+0x118>)
   845fc:	fb82 1203 	smull	r1, r2, r2, r3
   84600:	1152      	asrs	r2, r2, #5
   84602:	17db      	asrs	r3, r3, #31
   84604:	1ad2      	subs	r2, r2, r3
   84606:	490b      	ldr	r1, [pc, #44]	; (84634 <calibration_ps2+0x10c>)
   84608:	68fb      	ldr	r3, [r7, #12]
   8460a:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
   8460e:	b29b      	uxth	r3, r3
   84610:	b21b      	sxth	r3, r3
   84612:	441a      	add	r2, r3
   84614:	4b08      	ldr	r3, [pc, #32]	; (84638 <calibration_ps2+0x110>)
   84616:	4610      	mov	r0, r2
   84618:	4798      	blx	r3
   8461a:	4602      	mov	r2, r0
   8461c:	4b07      	ldr	r3, [pc, #28]	; (8463c <calibration_ps2+0x114>)
   8461e:	601a      	str	r2, [r3, #0]
			break;
   84620:	e005      	b.n	8462e <calibration_ps2+0x106>
void calibration_ps2(int16_t sensordata)
{
	int i;
	int16_t slope;
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<27;i++)
   84622:	68fb      	ldr	r3, [r7, #12]
   84624:	3301      	adds	r3, #1
   84626:	60fb      	str	r3, [r7, #12]
   84628:	68fb      	ldr	r3, [r7, #12]
   8462a:	2b1a      	cmp	r3, #26
   8462c:	dd84      	ble.n	84538 <calibration_ps2+0x10>
			slope = ((ps_2_2[i+1].pressure-ps_2_2[i].pressure) *100 /(ps_2_2[i+1].millivolt-ps_2_2[i].millivolt));
			pressure_final_ps2 = (slope * (sensordata-ps_2_2[i].millivolt))/100 + ps_2_2[i].pressure;
			break;
		}
	}
}
   8462e:	3710      	adds	r7, #16
   84630:	46bd      	mov	sp, r7
   84632:	bd80      	pop	{r7, pc}
   84634:	20070360 	.word	0x20070360
   84638:	000a68b1 	.word	0x000a68b1
   8463c:	2007178c 	.word	0x2007178c
   84640:	51eb851f 	.word	0x51eb851f

00084644 <calibration_ps3>:
void calibration_ps3(int16_t sensordata)
{
   84644:	b580      	push	{r7, lr}
   84646:	b084      	sub	sp, #16
   84648:	af00      	add	r7, sp, #0
   8464a:	4603      	mov	r3, r0
   8464c:	80fb      	strh	r3, [r7, #6]
	int i;
	int16_t slope;
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<50;i++)
   8464e:	2300      	movs	r3, #0
   84650:	60fb      	str	r3, [r7, #12]
   84652:	e077      	b.n	84744 <calibration_ps3+0x100>
	{
		if (sensordata == ps_3_2[i].millivolt)
   84654:	4a3e      	ldr	r2, [pc, #248]	; (84750 <calibration_ps3+0x10c>)
   84656:	68fb      	ldr	r3, [r7, #12]
   84658:	009b      	lsls	r3, r3, #2
   8465a:	4413      	add	r3, r2
   8465c:	885b      	ldrh	r3, [r3, #2]
   8465e:	b29b      	uxth	r3, r3
   84660:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   84664:	b21b      	sxth	r3, r3
   84666:	429a      	cmp	r2, r3
   84668:	d10c      	bne.n	84684 <calibration_ps3+0x40>
		{
			pressure_final_ps3=ps_3_2[i].pressure;
   8466a:	4a39      	ldr	r2, [pc, #228]	; (84750 <calibration_ps3+0x10c>)
   8466c:	68fb      	ldr	r3, [r7, #12]
   8466e:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   84672:	b29b      	uxth	r3, r3
   84674:	b21a      	sxth	r2, r3
   84676:	4b37      	ldr	r3, [pc, #220]	; (84754 <calibration_ps3+0x110>)
   84678:	4610      	mov	r0, r2
   8467a:	4798      	blx	r3
   8467c:	4602      	mov	r2, r0
   8467e:	4b36      	ldr	r3, [pc, #216]	; (84758 <calibration_ps3+0x114>)
   84680:	601a      	str	r2, [r3, #0]
			break;
   84682:	e062      	b.n	8474a <calibration_ps3+0x106>
		}
		else if ((sensordata > ps_3_2[i].millivolt) && (sensordata < ps_3_2[i+1].millivolt))
   84684:	4a32      	ldr	r2, [pc, #200]	; (84750 <calibration_ps3+0x10c>)
   84686:	68fb      	ldr	r3, [r7, #12]
   84688:	009b      	lsls	r3, r3, #2
   8468a:	4413      	add	r3, r2
   8468c:	885b      	ldrh	r3, [r3, #2]
   8468e:	b29b      	uxth	r3, r3
   84690:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   84694:	b21b      	sxth	r3, r3
   84696:	429a      	cmp	r2, r3
   84698:	dd51      	ble.n	8473e <calibration_ps3+0xfa>
   8469a:	68fb      	ldr	r3, [r7, #12]
   8469c:	3301      	adds	r3, #1
   8469e:	4a2c      	ldr	r2, [pc, #176]	; (84750 <calibration_ps3+0x10c>)
   846a0:	009b      	lsls	r3, r3, #2
   846a2:	4413      	add	r3, r2
   846a4:	885b      	ldrh	r3, [r3, #2]
   846a6:	b29b      	uxth	r3, r3
   846a8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   846ac:	b21b      	sxth	r3, r3
   846ae:	429a      	cmp	r2, r3
   846b0:	da45      	bge.n	8473e <calibration_ps3+0xfa>
		{
			slope = ((ps_3_2[i+1].pressure-ps_3_2[i].pressure)*100/(ps_3_2[i+1].millivolt-ps_3_2[i].millivolt));
   846b2:	68fb      	ldr	r3, [r7, #12]
   846b4:	3301      	adds	r3, #1
   846b6:	4a26      	ldr	r2, [pc, #152]	; (84750 <calibration_ps3+0x10c>)
   846b8:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   846bc:	b29b      	uxth	r3, r3
   846be:	b21a      	sxth	r2, r3
   846c0:	4923      	ldr	r1, [pc, #140]	; (84750 <calibration_ps3+0x10c>)
   846c2:	68fb      	ldr	r3, [r7, #12]
   846c4:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
   846c8:	b29b      	uxth	r3, r3
   846ca:	b21b      	sxth	r3, r3
   846cc:	1ad3      	subs	r3, r2, r3
   846ce:	2264      	movs	r2, #100	; 0x64
   846d0:	fb02 f203 	mul.w	r2, r2, r3
   846d4:	68fb      	ldr	r3, [r7, #12]
   846d6:	3301      	adds	r3, #1
   846d8:	491d      	ldr	r1, [pc, #116]	; (84750 <calibration_ps3+0x10c>)
   846da:	009b      	lsls	r3, r3, #2
   846dc:	440b      	add	r3, r1
   846de:	885b      	ldrh	r3, [r3, #2]
   846e0:	b29b      	uxth	r3, r3
   846e2:	b219      	sxth	r1, r3
   846e4:	481a      	ldr	r0, [pc, #104]	; (84750 <calibration_ps3+0x10c>)
   846e6:	68fb      	ldr	r3, [r7, #12]
   846e8:	009b      	lsls	r3, r3, #2
   846ea:	4403      	add	r3, r0
   846ec:	885b      	ldrh	r3, [r3, #2]
   846ee:	b29b      	uxth	r3, r3
   846f0:	b21b      	sxth	r3, r3
   846f2:	1acb      	subs	r3, r1, r3
   846f4:	fb92 f3f3 	sdiv	r3, r2, r3
   846f8:	817b      	strh	r3, [r7, #10]
			pressure_final_ps3 = ((slope * (sensordata-ps_3_2[i].millivolt))/100 + ps_3[i].pressure);
   846fa:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
   846fe:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
   84702:	4813      	ldr	r0, [pc, #76]	; (84750 <calibration_ps3+0x10c>)
   84704:	68fb      	ldr	r3, [r7, #12]
   84706:	009b      	lsls	r3, r3, #2
   84708:	4403      	add	r3, r0
   8470a:	885b      	ldrh	r3, [r3, #2]
   8470c:	b29b      	uxth	r3, r3
   8470e:	b21b      	sxth	r3, r3
   84710:	1acb      	subs	r3, r1, r3
   84712:	fb03 f302 	mul.w	r3, r3, r2
   84716:	4a11      	ldr	r2, [pc, #68]	; (8475c <calibration_ps3+0x118>)
   84718:	fb82 1203 	smull	r1, r2, r2, r3
   8471c:	1152      	asrs	r2, r2, #5
   8471e:	17db      	asrs	r3, r3, #31
   84720:	1ad2      	subs	r2, r2, r3
   84722:	490f      	ldr	r1, [pc, #60]	; (84760 <calibration_ps3+0x11c>)
   84724:	68fb      	ldr	r3, [r7, #12]
   84726:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
   8472a:	b29b      	uxth	r3, r3
   8472c:	b21b      	sxth	r3, r3
   8472e:	441a      	add	r2, r3
   84730:	4b08      	ldr	r3, [pc, #32]	; (84754 <calibration_ps3+0x110>)
   84732:	4610      	mov	r0, r2
   84734:	4798      	blx	r3
   84736:	4602      	mov	r2, r0
   84738:	4b07      	ldr	r3, [pc, #28]	; (84758 <calibration_ps3+0x114>)
   8473a:	601a      	str	r2, [r3, #0]
			break;
   8473c:	e005      	b.n	8474a <calibration_ps3+0x106>
void calibration_ps3(int16_t sensordata)
{
	int i;
	int16_t slope;
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<50;i++)
   8473e:	68fb      	ldr	r3, [r7, #12]
   84740:	3301      	adds	r3, #1
   84742:	60fb      	str	r3, [r7, #12]
   84744:	68fb      	ldr	r3, [r7, #12]
   84746:	2b31      	cmp	r3, #49	; 0x31
   84748:	dd84      	ble.n	84654 <calibration_ps3+0x10>
			slope = ((ps_3_2[i+1].pressure-ps_3_2[i].pressure)*100/(ps_3_2[i+1].millivolt-ps_3_2[i].millivolt));
			pressure_final_ps3 = ((slope * (sensordata-ps_3_2[i].millivolt))/100 + ps_3[i].pressure);
			break;
		}
	}
}
   8474a:	3710      	adds	r7, #16
   8474c:	46bd      	mov	sp, r7
   8474e:	bd80      	pop	{r7, pc}
   84750:	200703cc 	.word	0x200703cc
   84754:	000a68b1 	.word	0x000a68b1
   84758:	20071790 	.word	0x20071790
   8475c:	51eb851f 	.word	0x51eb851f
   84760:	200717a4 	.word	0x200717a4

00084764 <calibration_cond>:

void calibration_cond(float sensordata)
{
   84764:	b590      	push	{r4, r7, lr}
   84766:	b087      	sub	sp, #28
   84768:	af00      	add	r7, sp, #0
   8476a:	6078      	str	r0, [r7, #4]
	int i;
	float dummy_var = 0;
   8476c:	f04f 0300 	mov.w	r3, #0
   84770:	613b      	str	r3, [r7, #16]
	dummy_var = sensordata;
   84772:	687b      	ldr	r3, [r7, #4]
   84774:	613b      	str	r3, [r7, #16]
	float slope=0;
   84776:	f04f 0300 	mov.w	r3, #0
   8477a:	60fb      	str	r3, [r7, #12]
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<50;i++)
   8477c:	2300      	movs	r3, #0
   8477e:	617b      	str	r3, [r7, #20]
   84780:	e08f      	b.n	848a2 <calibration_cond+0x13e>
	{
		if (dummy_var == cond[i].volts)
   84782:	4a4b      	ldr	r2, [pc, #300]	; (848b0 <calibration_cond+0x14c>)
   84784:	697b      	ldr	r3, [r7, #20]
   84786:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   8478a:	b29b      	uxth	r3, r3
   8478c:	461a      	mov	r2, r3
   8478e:	4b49      	ldr	r3, [pc, #292]	; (848b4 <calibration_cond+0x150>)
   84790:	4610      	mov	r0, r2
   84792:	4798      	blx	r3
   84794:	4602      	mov	r2, r0
   84796:	4b48      	ldr	r3, [pc, #288]	; (848b8 <calibration_cond+0x154>)
   84798:	4610      	mov	r0, r2
   8479a:	6939      	ldr	r1, [r7, #16]
   8479c:	4798      	blx	r3
   8479e:	4603      	mov	r3, r0
   847a0:	2b00      	cmp	r3, #0
   847a2:	d00c      	beq.n	847be <calibration_cond+0x5a>
		{
			cond_final_cs3=cond[i].conductivity;
   847a4:	4a42      	ldr	r2, [pc, #264]	; (848b0 <calibration_cond+0x14c>)
   847a6:	697b      	ldr	r3, [r7, #20]
   847a8:	009b      	lsls	r3, r3, #2
   847aa:	4413      	add	r3, r2
   847ac:	885b      	ldrh	r3, [r3, #2]
   847ae:	b29a      	uxth	r2, r3
   847b0:	4b42      	ldr	r3, [pc, #264]	; (848bc <calibration_cond+0x158>)
   847b2:	4610      	mov	r0, r2
   847b4:	4798      	blx	r3
   847b6:	4602      	mov	r2, r0
   847b8:	4b41      	ldr	r3, [pc, #260]	; (848c0 <calibration_cond+0x15c>)
   847ba:	601a      	str	r2, [r3, #0]
   847bc:	e06e      	b.n	8489c <calibration_cond+0x138>
		}
		else if ((dummy_var > cond[i].volts) && (dummy_var < cond[i+1].volts))
   847be:	4a3c      	ldr	r2, [pc, #240]	; (848b0 <calibration_cond+0x14c>)
   847c0:	697b      	ldr	r3, [r7, #20]
   847c2:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   847c6:	b29b      	uxth	r3, r3
   847c8:	461a      	mov	r2, r3
   847ca:	4b3a      	ldr	r3, [pc, #232]	; (848b4 <calibration_cond+0x150>)
   847cc:	4610      	mov	r0, r2
   847ce:	4798      	blx	r3
   847d0:	4602      	mov	r2, r0
   847d2:	4b3c      	ldr	r3, [pc, #240]	; (848c4 <calibration_cond+0x160>)
   847d4:	4610      	mov	r0, r2
   847d6:	6939      	ldr	r1, [r7, #16]
   847d8:	4798      	blx	r3
   847da:	4603      	mov	r3, r0
   847dc:	2b00      	cmp	r3, #0
   847de:	d05d      	beq.n	8489c <calibration_cond+0x138>
   847e0:	697b      	ldr	r3, [r7, #20]
   847e2:	3301      	adds	r3, #1
   847e4:	4a32      	ldr	r2, [pc, #200]	; (848b0 <calibration_cond+0x14c>)
   847e6:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   847ea:	b29b      	uxth	r3, r3
   847ec:	461a      	mov	r2, r3
   847ee:	4b31      	ldr	r3, [pc, #196]	; (848b4 <calibration_cond+0x150>)
   847f0:	4610      	mov	r0, r2
   847f2:	4798      	blx	r3
   847f4:	4602      	mov	r2, r0
   847f6:	4b34      	ldr	r3, [pc, #208]	; (848c8 <calibration_cond+0x164>)
   847f8:	4610      	mov	r0, r2
   847fa:	6939      	ldr	r1, [r7, #16]
   847fc:	4798      	blx	r3
   847fe:	4603      	mov	r3, r0
   84800:	2b00      	cmp	r3, #0
   84802:	d04b      	beq.n	8489c <calibration_cond+0x138>
		{
			slope = ((cond[i+1].conductivity-cond[i].conductivity)/(cond[i+1].volts-cond[i].volts));
   84804:	697b      	ldr	r3, [r7, #20]
   84806:	3301      	adds	r3, #1
   84808:	4a29      	ldr	r2, [pc, #164]	; (848b0 <calibration_cond+0x14c>)
   8480a:	009b      	lsls	r3, r3, #2
   8480c:	4413      	add	r3, r2
   8480e:	885b      	ldrh	r3, [r3, #2]
   84810:	b29b      	uxth	r3, r3
   84812:	4619      	mov	r1, r3
   84814:	4a26      	ldr	r2, [pc, #152]	; (848b0 <calibration_cond+0x14c>)
   84816:	697b      	ldr	r3, [r7, #20]
   84818:	009b      	lsls	r3, r3, #2
   8481a:	4413      	add	r3, r2
   8481c:	885b      	ldrh	r3, [r3, #2]
   8481e:	b29b      	uxth	r3, r3
   84820:	1aca      	subs	r2, r1, r3
   84822:	697b      	ldr	r3, [r7, #20]
   84824:	3301      	adds	r3, #1
   84826:	4922      	ldr	r1, [pc, #136]	; (848b0 <calibration_cond+0x14c>)
   84828:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
   8482c:	b29b      	uxth	r3, r3
   8482e:	4618      	mov	r0, r3
   84830:	491f      	ldr	r1, [pc, #124]	; (848b0 <calibration_cond+0x14c>)
   84832:	697b      	ldr	r3, [r7, #20]
   84834:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
   84838:	b29b      	uxth	r3, r3
   8483a:	1ac3      	subs	r3, r0, r3
   8483c:	fb92 f2f3 	sdiv	r2, r2, r3
   84840:	4b1c      	ldr	r3, [pc, #112]	; (848b4 <calibration_cond+0x150>)
   84842:	4610      	mov	r0, r2
   84844:	4798      	blx	r3
   84846:	4603      	mov	r3, r0
   84848:	60fb      	str	r3, [r7, #12]
			cond_final_cs3 = slope*(dummy_var-cond[i].volts) + cond[i].conductivity;
   8484a:	4a19      	ldr	r2, [pc, #100]	; (848b0 <calibration_cond+0x14c>)
   8484c:	697b      	ldr	r3, [r7, #20]
   8484e:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   84852:	b29b      	uxth	r3, r3
   84854:	461a      	mov	r2, r3
   84856:	4b17      	ldr	r3, [pc, #92]	; (848b4 <calibration_cond+0x150>)
   84858:	4610      	mov	r0, r2
   8485a:	4798      	blx	r3
   8485c:	4602      	mov	r2, r0
   8485e:	4b1b      	ldr	r3, [pc, #108]	; (848cc <calibration_cond+0x168>)
   84860:	6938      	ldr	r0, [r7, #16]
   84862:	4611      	mov	r1, r2
   84864:	4798      	blx	r3
   84866:	4603      	mov	r3, r0
   84868:	461a      	mov	r2, r3
   8486a:	4b19      	ldr	r3, [pc, #100]	; (848d0 <calibration_cond+0x16c>)
   8486c:	4610      	mov	r0, r2
   8486e:	68f9      	ldr	r1, [r7, #12]
   84870:	4798      	blx	r3
   84872:	4603      	mov	r3, r0
   84874:	461c      	mov	r4, r3
   84876:	4a0e      	ldr	r2, [pc, #56]	; (848b0 <calibration_cond+0x14c>)
   84878:	697b      	ldr	r3, [r7, #20]
   8487a:	009b      	lsls	r3, r3, #2
   8487c:	4413      	add	r3, r2
   8487e:	885b      	ldrh	r3, [r3, #2]
   84880:	b29b      	uxth	r3, r3
   84882:	461a      	mov	r2, r3
   84884:	4b0b      	ldr	r3, [pc, #44]	; (848b4 <calibration_cond+0x150>)
   84886:	4610      	mov	r0, r2
   84888:	4798      	blx	r3
   8488a:	4602      	mov	r2, r0
   8488c:	4b11      	ldr	r3, [pc, #68]	; (848d4 <calibration_cond+0x170>)
   8488e:	4620      	mov	r0, r4
   84890:	4611      	mov	r1, r2
   84892:	4798      	blx	r3
   84894:	4603      	mov	r3, r0
   84896:	461a      	mov	r2, r3
   84898:	4b09      	ldr	r3, [pc, #36]	; (848c0 <calibration_cond+0x15c>)
   8489a:	601a      	str	r2, [r3, #0]
	int i;
	float dummy_var = 0;
	dummy_var = sensordata;
	float slope=0;
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<50;i++)
   8489c:	697b      	ldr	r3, [r7, #20]
   8489e:	3301      	adds	r3, #1
   848a0:	617b      	str	r3, [r7, #20]
   848a2:	697b      	ldr	r3, [r7, #20]
   848a4:	2b31      	cmp	r3, #49	; 0x31
   848a6:	f77f af6c 	ble.w	84782 <calibration_cond+0x1e>
		{
			slope = (cond[i].volts)/(cond[i].conductivity);
			cond_final_cs3 = slope*(sensordata-cond[i].volts) + cond[i].conductivity;
		}*/
	}
}
   848aa:	371c      	adds	r7, #28
   848ac:	46bd      	mov	sp, r7
   848ae:	bd90      	pop	{r4, r7, pc}
   848b0:	2007186c 	.word	0x2007186c
   848b4:	000a68b1 	.word	0x000a68b1
   848b8:	000a6c81 	.word	0x000a6c81
   848bc:	000a68a9 	.word	0x000a68a9
   848c0:	2007179c 	.word	0x2007179c
   848c4:	000a6c95 	.word	0x000a6c95
   848c8:	000a6cd1 	.word	0x000a6cd1
   848cc:	000a6745 	.word	0x000a6745
   848d0:	000a6959 	.word	0x000a6959
   848d4:	000a6749 	.word	0x000a6749

000848d8 <calibrate_uf>:


void calibrate_uf(int16_t ufrate){
   848d8:	b590      	push	{r4, r7, lr}
   848da:	b087      	sub	sp, #28
   848dc:	af00      	add	r7, sp, #0
   848de:	4603      	mov	r3, r0
   848e0:	80fb      	strh	r3, [r7, #6]
	
	Cl_Uint16Type i;
	float dummy_var = ufrate;
   848e2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
   848e6:	4b51      	ldr	r3, [pc, #324]	; (84a2c <calibrate_uf+0x154>)
   848e8:	4610      	mov	r0, r2
   848ea:	4798      	blx	r3
   848ec:	4603      	mov	r3, r0
   848ee:	613b      	str	r3, [r7, #16]
	Cl_Uint32Type dummy_var1;
	float slope;

	
	for (i=0;i<14;i++)
   848f0:	2300      	movs	r3, #0
   848f2:	82fb      	strh	r3, [r7, #22]
   848f4:	e092      	b.n	84a1c <calibrate_uf+0x144>
		{
			if (dummy_var == ufp[i].rate)
   848f6:	8afb      	ldrh	r3, [r7, #22]
   848f8:	4a4d      	ldr	r2, [pc, #308]	; (84a30 <calibrate_uf+0x158>)
   848fa:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   848fe:	b29b      	uxth	r3, r3
   84900:	461a      	mov	r2, r3
   84902:	4b4a      	ldr	r3, [pc, #296]	; (84a2c <calibrate_uf+0x154>)
   84904:	4610      	mov	r0, r2
   84906:	4798      	blx	r3
   84908:	4602      	mov	r2, r0
   8490a:	4b4a      	ldr	r3, [pc, #296]	; (84a34 <calibrate_uf+0x15c>)
   8490c:	4610      	mov	r0, r2
   8490e:	6939      	ldr	r1, [r7, #16]
   84910:	4798      	blx	r3
   84912:	4603      	mov	r3, r0
   84914:	2b00      	cmp	r3, #0
   84916:	d00a      	beq.n	8492e <calibrate_uf+0x56>
			{
				dummy_var1=ufp[i].speed;
   84918:	8afb      	ldrh	r3, [r7, #22]
   8491a:	4a45      	ldr	r2, [pc, #276]	; (84a30 <calibrate_uf+0x158>)
   8491c:	009b      	lsls	r3, r3, #2
   8491e:	4413      	add	r3, r2
   84920:	885b      	ldrh	r3, [r3, #2]
   84922:	b29b      	uxth	r3, r3
   84924:	60bb      	str	r3, [r7, #8]
				uf_final=dummy_var1;
   84926:	4a44      	ldr	r2, [pc, #272]	; (84a38 <calibrate_uf+0x160>)
   84928:	68bb      	ldr	r3, [r7, #8]
   8492a:	6013      	str	r3, [r2, #0]
				break;
   8492c:	e07a      	b.n	84a24 <calibrate_uf+0x14c>
			}
			else if ((dummy_var > ufp[i].rate) && (dummy_var < ufp[i+1].rate))
   8492e:	8afb      	ldrh	r3, [r7, #22]
   84930:	4a3f      	ldr	r2, [pc, #252]	; (84a30 <calibrate_uf+0x158>)
   84932:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   84936:	b29b      	uxth	r3, r3
   84938:	461a      	mov	r2, r3
   8493a:	4b3c      	ldr	r3, [pc, #240]	; (84a2c <calibrate_uf+0x154>)
   8493c:	4610      	mov	r0, r2
   8493e:	4798      	blx	r3
   84940:	4602      	mov	r2, r0
   84942:	4b3e      	ldr	r3, [pc, #248]	; (84a3c <calibrate_uf+0x164>)
   84944:	4610      	mov	r0, r2
   84946:	6939      	ldr	r1, [r7, #16]
   84948:	4798      	blx	r3
   8494a:	4603      	mov	r3, r0
   8494c:	2b00      	cmp	r3, #0
   8494e:	d062      	beq.n	84a16 <calibrate_uf+0x13e>
   84950:	8afb      	ldrh	r3, [r7, #22]
   84952:	3301      	adds	r3, #1
   84954:	4a36      	ldr	r2, [pc, #216]	; (84a30 <calibrate_uf+0x158>)
   84956:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   8495a:	b29b      	uxth	r3, r3
   8495c:	461a      	mov	r2, r3
   8495e:	4b33      	ldr	r3, [pc, #204]	; (84a2c <calibrate_uf+0x154>)
   84960:	4610      	mov	r0, r2
   84962:	4798      	blx	r3
   84964:	4602      	mov	r2, r0
   84966:	4b36      	ldr	r3, [pc, #216]	; (84a40 <calibrate_uf+0x168>)
   84968:	4610      	mov	r0, r2
   8496a:	6939      	ldr	r1, [r7, #16]
   8496c:	4798      	blx	r3
   8496e:	4603      	mov	r3, r0
   84970:	2b00      	cmp	r3, #0
   84972:	d050      	beq.n	84a16 <calibrate_uf+0x13e>
			{
				//temprature_final_value =dummy_var;
				slope = (((ufp[i+1].speed - ufp[i].speed))/(ufp[i+1].rate - ufp[i].rate));
   84974:	8afb      	ldrh	r3, [r7, #22]
   84976:	3301      	adds	r3, #1
   84978:	4a2d      	ldr	r2, [pc, #180]	; (84a30 <calibrate_uf+0x158>)
   8497a:	009b      	lsls	r3, r3, #2
   8497c:	4413      	add	r3, r2
   8497e:	885b      	ldrh	r3, [r3, #2]
   84980:	b29b      	uxth	r3, r3
   84982:	4619      	mov	r1, r3
   84984:	8afb      	ldrh	r3, [r7, #22]
   84986:	4a2a      	ldr	r2, [pc, #168]	; (84a30 <calibrate_uf+0x158>)
   84988:	009b      	lsls	r3, r3, #2
   8498a:	4413      	add	r3, r2
   8498c:	885b      	ldrh	r3, [r3, #2]
   8498e:	b29b      	uxth	r3, r3
   84990:	1aca      	subs	r2, r1, r3
   84992:	8afb      	ldrh	r3, [r7, #22]
   84994:	3301      	adds	r3, #1
   84996:	4926      	ldr	r1, [pc, #152]	; (84a30 <calibrate_uf+0x158>)
   84998:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
   8499c:	b29b      	uxth	r3, r3
   8499e:	4618      	mov	r0, r3
   849a0:	8afb      	ldrh	r3, [r7, #22]
   849a2:	4923      	ldr	r1, [pc, #140]	; (84a30 <calibrate_uf+0x158>)
   849a4:	f831 3023 	ldrh.w	r3, [r1, r3, lsl #2]
   849a8:	b29b      	uxth	r3, r3
   849aa:	1ac3      	subs	r3, r0, r3
   849ac:	fb92 f2f3 	sdiv	r2, r2, r3
   849b0:	4b1e      	ldr	r3, [pc, #120]	; (84a2c <calibrate_uf+0x154>)
   849b2:	4610      	mov	r0, r2
   849b4:	4798      	blx	r3
   849b6:	4603      	mov	r3, r0
   849b8:	60fb      	str	r3, [r7, #12]
				//temprature_final_value =slope*1000;
				uf_final = ((slope*(dummy_var - ufp[i].rate)) + ufp[i].speed);
   849ba:	8afb      	ldrh	r3, [r7, #22]
   849bc:	4a1c      	ldr	r2, [pc, #112]	; (84a30 <calibrate_uf+0x158>)
   849be:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
   849c2:	b29b      	uxth	r3, r3
   849c4:	461a      	mov	r2, r3
   849c6:	4b19      	ldr	r3, [pc, #100]	; (84a2c <calibrate_uf+0x154>)
   849c8:	4610      	mov	r0, r2
   849ca:	4798      	blx	r3
   849cc:	4602      	mov	r2, r0
   849ce:	4b1d      	ldr	r3, [pc, #116]	; (84a44 <calibrate_uf+0x16c>)
   849d0:	6938      	ldr	r0, [r7, #16]
   849d2:	4611      	mov	r1, r2
   849d4:	4798      	blx	r3
   849d6:	4603      	mov	r3, r0
   849d8:	461a      	mov	r2, r3
   849da:	4b1b      	ldr	r3, [pc, #108]	; (84a48 <calibrate_uf+0x170>)
   849dc:	4610      	mov	r0, r2
   849de:	68f9      	ldr	r1, [r7, #12]
   849e0:	4798      	blx	r3
   849e2:	4603      	mov	r3, r0
   849e4:	461c      	mov	r4, r3
   849e6:	8afb      	ldrh	r3, [r7, #22]
   849e8:	4a11      	ldr	r2, [pc, #68]	; (84a30 <calibrate_uf+0x158>)
   849ea:	009b      	lsls	r3, r3, #2
   849ec:	4413      	add	r3, r2
   849ee:	885b      	ldrh	r3, [r3, #2]
   849f0:	b29b      	uxth	r3, r3
   849f2:	461a      	mov	r2, r3
   849f4:	4b0d      	ldr	r3, [pc, #52]	; (84a2c <calibrate_uf+0x154>)
   849f6:	4610      	mov	r0, r2
   849f8:	4798      	blx	r3
   849fa:	4602      	mov	r2, r0
   849fc:	4b13      	ldr	r3, [pc, #76]	; (84a4c <calibrate_uf+0x174>)
   849fe:	4620      	mov	r0, r4
   84a00:	4611      	mov	r1, r2
   84a02:	4798      	blx	r3
   84a04:	4603      	mov	r3, r0
   84a06:	461a      	mov	r2, r3
   84a08:	4b11      	ldr	r3, [pc, #68]	; (84a50 <calibrate_uf+0x178>)
   84a0a:	4610      	mov	r0, r2
   84a0c:	4798      	blx	r3
   84a0e:	4602      	mov	r2, r0
   84a10:	4b09      	ldr	r3, [pc, #36]	; (84a38 <calibrate_uf+0x160>)
   84a12:	601a      	str	r2, [r3, #0]
				//temprature_final_value_1 =temprature_final_value_1/100;
				//temprature_final_value =1500;
				break;
   84a14:	e006      	b.n	84a24 <calibrate_uf+0x14c>
	float dummy_var = ufrate;
	Cl_Uint32Type dummy_var1;
	float slope;

	
	for (i=0;i<14;i++)
   84a16:	8afb      	ldrh	r3, [r7, #22]
   84a18:	3301      	adds	r3, #1
   84a1a:	82fb      	strh	r3, [r7, #22]
   84a1c:	8afb      	ldrh	r3, [r7, #22]
   84a1e:	2b0d      	cmp	r3, #13
   84a20:	f67f af69 	bls.w	848f6 <calibrate_uf+0x1e>
			}*/
			
		}
	
	
}
   84a24:	371c      	adds	r7, #28
   84a26:	46bd      	mov	sp, r7
   84a28:	bd90      	pop	{r4, r7, pc}
   84a2a:	bf00      	nop
   84a2c:	000a68b1 	.word	0x000a68b1
   84a30:	200702bc 	.word	0x200702bc
   84a34:	000a6c81 	.word	0x000a6c81
   84a38:	200717a0 	.word	0x200717a0
   84a3c:	000a6c95 	.word	0x000a6c95
   84a40:	000a6cd1 	.word	0x000a6cd1
   84a44:	000a6745 	.word	0x000a6745
   84a48:	000a6959 	.word	0x000a6959
   84a4c:	000a6749 	.word	0x000a6749
   84a50:	000a6d31 	.word	0x000a6d31

00084a54 <cl_datamanager_init>:
extern Cl_AlarmThresholdType  Cl_alarmThresholdTable;
extern Cl_Mac_EventQueueType  Cl_MacEventQueue2;
extern Cl_Uint32Type Treatdata[ID_MAX_TREAT_PARAM] ;

Cl_ReturnCodeType cl_datamanager_init()
{
   84a54:	b480      	push	{r7}
   84a56:	af00      	add	r7, sp, #0
	Treatdata[ID_dflow] = 500;
   84a58:	4b20      	ldr	r3, [pc, #128]	; (84adc <cl_datamanager_init+0x88>)
   84a5a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   84a5e:	615a      	str	r2, [r3, #20]
	Treatdata[ID_settemp] = 370;
   84a60:	4b1e      	ldr	r3, [pc, #120]	; (84adc <cl_datamanager_init+0x88>)
   84a62:	f44f 72b9 	mov.w	r2, #370	; 0x172
   84a66:	619a      	str	r2, [r3, #24]
	Treatdata[ID_setcond] = 135;
   84a68:	4b1c      	ldr	r3, [pc, #112]	; (84adc <cl_datamanager_init+0x88>)
   84a6a:	2287      	movs	r2, #135	; 0x87
   84a6c:	62da      	str	r2, [r3, #44]	; 0x2c
	Treatdata[ID_bloodrate] = 400;
   84a6e:	4b1b      	ldr	r3, [pc, #108]	; (84adc <cl_datamanager_init+0x88>)
   84a70:	f44f 72c8 	mov.w	r2, #400	; 0x190
   84a74:	63da      	str	r2, [r3, #60]	; 0x3c
	Treatdata[ID_tempulimit] = 375;
   84a76:	4b19      	ldr	r3, [pc, #100]	; (84adc <cl_datamanager_init+0x88>)
   84a78:	f240 1277 	movw	r2, #375	; 0x177
   84a7c:	661a      	str	r2, [r3, #96]	; 0x60
	Treatdata[ID_tempulimit] = 365;
   84a7e:	4b17      	ldr	r3, [pc, #92]	; (84adc <cl_datamanager_init+0x88>)
   84a80:	f240 126d 	movw	r2, #365	; 0x16d
   84a84:	661a      	str	r2, [r3, #96]	; 0x60
	Treatdata[ID_condulimit] = 150;
   84a86:	4b15      	ldr	r3, [pc, #84]	; (84adc <cl_datamanager_init+0x88>)
   84a88:	2296      	movs	r2, #150	; 0x96
   84a8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	Treatdata[ID_condllimit] = 0;
   84a8e:	4b13      	ldr	r3, [pc, #76]	; (84adc <cl_datamanager_init+0x88>)
   84a90:	2200      	movs	r2, #0
   84a92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	Treatdata[ID_aptulimit] =  400;
   84a96:	4b11      	ldr	r3, [pc, #68]	; (84adc <cl_datamanager_init+0x88>)
   84a98:	f44f 72c8 	mov.w	r2, #400	; 0x190
   84a9c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	Treatdata[ID_aptllimit] = 0;
   84aa0:	4b0e      	ldr	r3, [pc, #56]	; (84adc <cl_datamanager_init+0x88>)
   84aa2:	2200      	movs	r2, #0
   84aa4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	Treatdata[ID_vptulimit] = 400;
   84aa8:	4b0c      	ldr	r3, [pc, #48]	; (84adc <cl_datamanager_init+0x88>)
   84aaa:	f44f 72c8 	mov.w	r2, #400	; 0x190
   84aae:	675a      	str	r2, [r3, #116]	; 0x74
	Treatdata[ID_vptllimit] = 0;
   84ab0:	4b0a      	ldr	r3, [pc, #40]	; (84adc <cl_datamanager_init+0x88>)
   84ab2:	2200      	movs	r2, #0
   84ab4:	671a      	str	r2, [r3, #112]	; 0x70
	Treatdata[ID_tempulimit] = 50;
   84ab6:	4b09      	ldr	r3, [pc, #36]	; (84adc <cl_datamanager_init+0x88>)
   84ab8:	2232      	movs	r2, #50	; 0x32
   84aba:	661a      	str	r2, [r3, #96]	; 0x60
	Treatdata[ID_templlimit] = 0;
   84abc:	4b07      	ldr	r3, [pc, #28]	; (84adc <cl_datamanager_init+0x88>)
   84abe:	2200      	movs	r2, #0
   84ac0:	665a      	str	r2, [r3, #100]	; 0x64
	Treatdata[ID_ufgoal] = 0; // added default to check uf func
   84ac2:	4b06      	ldr	r3, [pc, #24]	; (84adc <cl_datamanager_init+0x88>)
   84ac4:	2200      	movs	r2, #0
   84ac6:	635a      	str	r2, [r3, #52]	; 0x34
	Treatdata[ID_treattime] = 240;
   84ac8:	4b04      	ldr	r3, [pc, #16]	; (84adc <cl_datamanager_init+0x88>)
   84aca:	22f0      	movs	r2, #240	; 0xf0
   84acc:	655a      	str	r2, [r3, #84]	; 0x54
	return CL_OK;
   84ace:	2300      	movs	r3, #0
	
}
   84ad0:	4618      	mov	r0, r3
   84ad2:	46bd      	mov	sp, r7
   84ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
   84ad8:	4770      	bx	lr
   84ada:	bf00      	nop
   84adc:	2007265c 	.word	0x2007265c

00084ae0 <cl_datamamanager>:
 * \return CL_OK on success. 
 * \Globals used : Treatdata,Cl_ConsoleRxMsg
 */

Cl_ReturnCodeType cl_datamamanager(Cl_Mac_EventsType cl_data_event)
{
   84ae0:	b580      	push	{r7, lr}
   84ae2:	b092      	sub	sp, #72	; 0x48
   84ae4:	af00      	add	r7, sp, #0
   84ae6:	4603      	mov	r3, r0
   84ae8:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType cl_data_ret_val = CL_ERROR;
   84aea:	2304      	movs	r3, #4
   84aec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   84af0:	2351      	movs	r3, #81	; 0x51
   84af2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	rxstreamtype datastream;
	Cl_Uint8Type dataarray[50] = {};
   84af6:	f107 030c 	add.w	r3, r7, #12
   84afa:	2200      	movs	r2, #0
   84afc:	601a      	str	r2, [r3, #0]
   84afe:	3304      	adds	r3, #4
   84b00:	2200      	movs	r2, #0
   84b02:	601a      	str	r2, [r3, #0]
   84b04:	3304      	adds	r3, #4
   84b06:	2200      	movs	r2, #0
   84b08:	601a      	str	r2, [r3, #0]
   84b0a:	3304      	adds	r3, #4
   84b0c:	2200      	movs	r2, #0
   84b0e:	601a      	str	r2, [r3, #0]
   84b10:	3304      	adds	r3, #4
   84b12:	2200      	movs	r2, #0
   84b14:	601a      	str	r2, [r3, #0]
   84b16:	3304      	adds	r3, #4
   84b18:	2200      	movs	r2, #0
   84b1a:	601a      	str	r2, [r3, #0]
   84b1c:	3304      	adds	r3, #4
   84b1e:	2200      	movs	r2, #0
   84b20:	601a      	str	r2, [r3, #0]
   84b22:	3304      	adds	r3, #4
   84b24:	2200      	movs	r2, #0
   84b26:	601a      	str	r2, [r3, #0]
   84b28:	3304      	adds	r3, #4
   84b2a:	2200      	movs	r2, #0
   84b2c:	601a      	str	r2, [r3, #0]
   84b2e:	3304      	adds	r3, #4
   84b30:	2200      	movs	r2, #0
   84b32:	601a      	str	r2, [r3, #0]
   84b34:	3304      	adds	r3, #4
   84b36:	2200      	movs	r2, #0
   84b38:	601a      	str	r2, [r3, #0]
   84b3a:	3304      	adds	r3, #4
   84b3c:	2200      	movs	r2, #0
   84b3e:	601a      	str	r2, [r3, #0]
   84b40:	3304      	adds	r3, #4
   84b42:	2200      	movs	r2, #0
   84b44:	801a      	strh	r2, [r3, #0]
   84b46:	3302      	adds	r3, #2
	
	switch(cl_data_event)
   84b48:	79fb      	ldrb	r3, [r7, #7]
   84b4a:	2b0e      	cmp	r3, #14
   84b4c:	d007      	beq.n	84b5e <cl_datamamanager+0x7e>
   84b4e:	2b3b      	cmp	r3, #59	; 0x3b
   84b50:	f000 8477 	beq.w	85442 <cl_datamamanager+0x962>
   84b54:	2b0d      	cmp	r3, #13
   84b56:	f000 8389 	beq.w	8526c <cl_datamamanager+0x78c>
							
		}
		break;
		
		default:
		break;
   84b5a:	f000 bc73 	b.w	85444 <cl_datamamanager+0x964>
		
		
		break;
		
		case EVT_CONSOLE_COMMAND_GET_DATA:
		if(Cl_ConsoleRxMsg.msgready == true)
   84b5e:	4bcb      	ldr	r3, [pc, #812]	; (84e8c <cl_datamamanager+0x3ac>)
   84b60:	7e1b      	ldrb	r3, [r3, #24]
   84b62:	2b00      	cmp	r3, #0
   84b64:	f000 8381 	beq.w	8526a <cl_datamamanager+0x78a>
		{
			switch(Cl_ConsoleRxMsg.data.byte[0])
   84b68:	4bc8      	ldr	r3, [pc, #800]	; (84e8c <cl_datamamanager+0x3ac>)
   84b6a:	791b      	ldrb	r3, [r3, #4]
   84b6c:	3b01      	subs	r3, #1
   84b6e:	2b21      	cmp	r3, #33	; 0x21
   84b70:	f200 837a 	bhi.w	85268 <cl_datamamanager+0x788>
   84b74:	a201      	add	r2, pc, #4	; (adr r2, 84b7c <cl_datamamanager+0x9c>)
   84b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   84b7a:	bf00      	nop
   84b7c:	00084c05 	.word	0x00084c05
   84b80:	00084c3d 	.word	0x00084c3d
   84b84:	00084ce9 	.word	0x00084ce9
   84b88:	00084d11 	.word	0x00084d11
   84b8c:	00085269 	.word	0x00085269
   84b90:	00085269 	.word	0x00085269
   84b94:	00085269 	.word	0x00085269
   84b98:	00085269 	.word	0x00085269
   84b9c:	00085269 	.word	0x00085269
   84ba0:	00085269 	.word	0x00085269
   84ba4:	00085269 	.word	0x00085269
   84ba8:	00085269 	.word	0x00085269
   84bac:	00085269 	.word	0x00085269
   84bb0:	00085269 	.word	0x00085269
   84bb4:	00085269 	.word	0x00085269
   84bb8:	00085269 	.word	0x00085269
   84bbc:	00085269 	.word	0x00085269
   84bc0:	00084d81 	.word	0x00084d81
   84bc4:	00085269 	.word	0x00085269
   84bc8:	00085269 	.word	0x00085269
   84bcc:	00085269 	.word	0x00085269
   84bd0:	00085269 	.word	0x00085269
   84bd4:	00085269 	.word	0x00085269
   84bd8:	00085269 	.word	0x00085269
   84bdc:	00085269 	.word	0x00085269
   84be0:	00085269 	.word	0x00085269
   84be4:	00085269 	.word	0x00085269
   84be8:	00085269 	.word	0x00085269
   84bec:	00085269 	.word	0x00085269
   84bf0:	00084c75 	.word	0x00084c75
   84bf4:	00085269 	.word	0x00085269
   84bf8:	00084c9d 	.word	0x00084c9d
   84bfc:	00084cc5 	.word	0x00084cc5
   84c00:	00084d49 	.word	0x00084d49
			{
				case CON_RX_PARAM_DATA_RINSE_STATUS:
				command = CON_TX_COMMAND_SYSDATA;
   84c04:	2316      	movs	r3, #22
   84c06:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   84c0a:	2301      	movs	r3, #1
   84c0c:	733b      	strb	r3, [r7, #12]
				cl_data_ret_val = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   84c0e:	f107 030c 	add.w	r3, r7, #12
   84c12:	3301      	adds	r3, #1
   84c14:	2001      	movs	r0, #1
   84c16:	4619      	mov	r1, r3
   84c18:	4b9d      	ldr	r3, [pc, #628]	; (84e90 <cl_datamamanager+0x3b0>)
   84c1a:	4798      	blx	r3
   84c1c:	4603      	mov	r3, r0
   84c1e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,2);
   84c22:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   84c26:	f107 030c 	add.w	r3, r7, #12
   84c2a:	4610      	mov	r0, r2
   84c2c:	4619      	mov	r1, r3
   84c2e:	2202      	movs	r2, #2
   84c30:	4b98      	ldr	r3, [pc, #608]	; (84e94 <cl_datamamanager+0x3b4>)
   84c32:	4798      	blx	r3
   84c34:	4603      	mov	r3, r0
   84c36:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
   84c3a:	e316      	b.n	8526a <cl_datamamanager+0x78a>
				case CON_RX_PARAM_DATA_PRIME_STATUS:
				command = CON_TX_COMMAND_SYSDATA;
   84c3c:	2316      	movs	r3, #22
   84c3e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				dataarray[0] = CON_TX_PARAM_DATA_PRIME_STATUS;
   84c42:	2302      	movs	r3, #2
   84c44:	733b      	strb	r3, [r7, #12]
				cl_data_ret_val = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_PRIME_STATUS, &dataarray[1]);
   84c46:	f107 030c 	add.w	r3, r7, #12
   84c4a:	3301      	adds	r3, #1
   84c4c:	2002      	movs	r0, #2
   84c4e:	4619      	mov	r1, r3
   84c50:	4b8f      	ldr	r3, [pc, #572]	; (84e90 <cl_datamamanager+0x3b0>)
   84c52:	4798      	blx	r3
   84c54:	4603      	mov	r3, r0
   84c56:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,2);
   84c5a:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   84c5e:	f107 030c 	add.w	r3, r7, #12
   84c62:	4610      	mov	r0, r2
   84c64:	4619      	mov	r1, r3
   84c66:	2202      	movs	r2, #2
   84c68:	4b8a      	ldr	r3, [pc, #552]	; (84e94 <cl_datamamanager+0x3b4>)
   84c6a:	4798      	blx	r3
   84c6c:	4603      	mov	r3, r0
   84c6e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
   84c72:	e2fa      	b.n	8526a <cl_datamamanager+0x78a>
				case CON_RX_PARAM_DATA_MIXING_STATUS:
				command = CON_TX_COMMAND_SYSDATA;
   84c74:	2316      	movs	r3, #22
   84c76:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				dataarray[0] = CON_TX_PARAM_DATA_MIXING;
   84c7a:	2320      	movs	r3, #32
   84c7c:	733b      	strb	r3, [r7, #12]
				//Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
				dataarray[1] = 0;
   84c7e:	2300      	movs	r3, #0
   84c80:	737b      	strb	r3, [r7, #13]
				cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,2);
   84c82:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   84c86:	f107 030c 	add.w	r3, r7, #12
   84c8a:	4610      	mov	r0, r2
   84c8c:	4619      	mov	r1, r3
   84c8e:	2202      	movs	r2, #2
   84c90:	4b80      	ldr	r3, [pc, #512]	; (84e94 <cl_datamamanager+0x3b4>)
   84c92:	4798      	blx	r3
   84c94:	4603      	mov	r3, r0
   84c96:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
   84c9a:	e2e6      	b.n	8526a <cl_datamamanager+0x78a>
				case CON_RX_PARAM_DATA_RECIRC_STATUS:
				command = CON_TX_COMMAND_SYSDATA;
   84c9c:	2316      	movs	r3, #22
   84c9e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				dataarray[0] = CON_TX_PARAM_DATA_RCIRC;
   84ca2:	2321      	movs	r3, #33	; 0x21
   84ca4:	733b      	strb	r3, [r7, #12]
				//Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
				dataarray[1] = 0;
   84ca6:	2300      	movs	r3, #0
   84ca8:	737b      	strb	r3, [r7, #13]
				cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,2);
   84caa:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   84cae:	f107 030c 	add.w	r3, r7, #12
   84cb2:	4610      	mov	r0, r2
   84cb4:	4619      	mov	r1, r3
   84cb6:	2202      	movs	r2, #2
   84cb8:	4b76      	ldr	r3, [pc, #472]	; (84e94 <cl_datamamanager+0x3b4>)
   84cba:	4798      	blx	r3
   84cbc:	4603      	mov	r3, r0
   84cbe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
   84cc2:	e2d2      	b.n	8526a <cl_datamamanager+0x78a>
				case CON_RX_PARAM_DATA_DISINF_STATUS:
				command = CON_TX_COMMAND_SYSDATA;
   84cc4:	2316      	movs	r3, #22
   84cc6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;
   84cca:	2323      	movs	r3, #35	; 0x23
   84ccc:	733b      	strb	r3, [r7, #12]
				
				cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,2);
   84cce:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   84cd2:	f107 030c 	add.w	r3, r7, #12
   84cd6:	4610      	mov	r0, r2
   84cd8:	4619      	mov	r1, r3
   84cda:	2202      	movs	r2, #2
   84cdc:	4b6d      	ldr	r3, [pc, #436]	; (84e94 <cl_datamamanager+0x3b4>)
   84cde:	4798      	blx	r3
   84ce0:	4603      	mov	r3, r0
   84ce2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
   84ce6:	e2c0      	b.n	8526a <cl_datamamanager+0x78a>
				case CON_RX_PARAM_DATA_DIALYSER_PRIME_STATUS:
				command = CON_TX_COMMAND_SYSDATA;
   84ce8:	2316      	movs	r3, #22
   84cea:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				dataarray[0] = CON_TX_PARAM_DATA_DIALYSER_PRIME_STATUS;
   84cee:	2303      	movs	r3, #3
   84cf0:	733b      	strb	r3, [r7, #12]
				dataarray[1] = 0;									
   84cf2:	2300      	movs	r3, #0
   84cf4:	737b      	strb	r3, [r7, #13]
				cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,2);
   84cf6:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   84cfa:	f107 030c 	add.w	r3, r7, #12
   84cfe:	4610      	mov	r0, r2
   84d00:	4619      	mov	r1, r3
   84d02:	2202      	movs	r2, #2
   84d04:	4b63      	ldr	r3, [pc, #396]	; (84e94 <cl_datamamanager+0x3b4>)
   84d06:	4798      	blx	r3
   84d08:	4603      	mov	r3, r0
   84d0a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
   84d0e:	e2ac      	b.n	8526a <cl_datamamanager+0x78a>
				
				case	CON_RX_PARAM_DATA_DIALYSIS_STATUS:
				command = CON_TX_COMMAND_SYSDATA;
   84d10:	2316      	movs	r3, #22
   84d12:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
   84d16:	2304      	movs	r3, #4
   84d18:	733b      	strb	r3, [r7, #12]
				cl_data_ret_val = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
   84d1a:	f107 030c 	add.w	r3, r7, #12
   84d1e:	3301      	adds	r3, #1
   84d20:	2004      	movs	r0, #4
   84d22:	4619      	mov	r1, r3
   84d24:	4b5a      	ldr	r3, [pc, #360]	; (84e90 <cl_datamamanager+0x3b0>)
   84d26:	4798      	blx	r3
   84d28:	4603      	mov	r3, r0
   84d2a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,2);
   84d2e:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   84d32:	f107 030c 	add.w	r3, r7, #12
   84d36:	4610      	mov	r0, r2
   84d38:	4619      	mov	r1, r3
   84d3a:	2202      	movs	r2, #2
   84d3c:	4b55      	ldr	r3, [pc, #340]	; (84e94 <cl_datamamanager+0x3b4>)
   84d3e:	4798      	blx	r3
   84d40:	4603      	mov	r3, r0
   84d42:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
   84d46:	e290      	b.n	8526a <cl_datamamanager+0x78a>

				case	CON_RX_PARAM_DATA_ISOUF_STATUS:
				command = CON_TX_COMMAND_SYSDATA;
   84d48:	2316      	movs	r3, #22
   84d4a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				dataarray[0] = CON_RX_PARAM_DATA_ISOUF_STATUS;
   84d4e:	2322      	movs	r3, #34	; 0x22
   84d50:	733b      	strb	r3, [r7, #12]
				cl_data_ret_val = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
   84d52:	f107 030c 	add.w	r3, r7, #12
   84d56:	3301      	adds	r3, #1
   84d58:	2004      	movs	r0, #4
   84d5a:	4619      	mov	r1, r3
   84d5c:	4b4c      	ldr	r3, [pc, #304]	; (84e90 <cl_datamamanager+0x3b0>)
   84d5e:	4798      	blx	r3
   84d60:	4603      	mov	r3, r0
   84d62:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,2);
   84d66:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   84d6a:	f107 030c 	add.w	r3, r7, #12
   84d6e:	4610      	mov	r0, r2
   84d70:	4619      	mov	r1, r3
   84d72:	2202      	movs	r2, #2
   84d74:	4b47      	ldr	r3, [pc, #284]	; (84e94 <cl_datamamanager+0x3b4>)
   84d76:	4798      	blx	r3
   84d78:	4603      	mov	r3, r0
   84d7a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
   84d7e:	e274      	b.n	8526a <cl_datamamanager+0x78a>

				case CON_RX_PARAM_DATA_TREATMENT_DATA:
				
				command = CON_TX_COMMAND_SYSDATA;
   84d80:	2316      	movs	r3, #22
   84d82:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				dataarray[0] =   CON_TX_PARAM_DATA_TREATMENT_DATA;
   84d86:	2312      	movs	r3, #18
   84d88:	733b      	strb	r3, [r7, #12]
				if(Cl_ConsoleRxMsg.data.byte[1] < ID_b_Dlaystedata)
   84d8a:	4b40      	ldr	r3, [pc, #256]	; (84e8c <cl_datamamanager+0x3ac>)
   84d8c:	795b      	ldrb	r3, [r3, #5]
   84d8e:	2b25      	cmp	r3, #37	; 0x25
   84d90:	d821      	bhi.n	84dd6 <cl_datamamanager+0x2f6>
				{
					dataarray[1] = Cl_ConsoleRxMsg.data.byte[1];
   84d92:	4b3e      	ldr	r3, [pc, #248]	; (84e8c <cl_datamamanager+0x3ac>)
   84d94:	795b      	ldrb	r3, [r3, #5]
   84d96:	737b      	strb	r3, [r7, #13]
					datastream.word = Treatdata[dataarray[1]];
   84d98:	7b7b      	ldrb	r3, [r7, #13]
   84d9a:	461a      	mov	r2, r3
   84d9c:	4b3e      	ldr	r3, [pc, #248]	; (84e98 <cl_datamamanager+0x3b8>)
   84d9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   84da2:	643b      	str	r3, [r7, #64]	; 0x40
					dataarray[2] = datastream.bytearray[0];
   84da4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84da8:	73bb      	strb	r3, [r7, #14]
					dataarray[3] = datastream.bytearray[1];
   84daa:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84dae:	73fb      	strb	r3, [r7, #15]
					dataarray[4] = datastream.bytearray[2];
   84db0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84db4:	743b      	strb	r3, [r7, #16]
					dataarray[5] = datastream.bytearray[3];
   84db6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84dba:	747b      	strb	r3, [r7, #17]

					cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,6);
   84dbc:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   84dc0:	f107 030c 	add.w	r3, r7, #12
   84dc4:	4610      	mov	r0, r2
   84dc6:	4619      	mov	r1, r3
   84dc8:	2206      	movs	r2, #6
   84dca:	4b32      	ldr	r3, [pc, #200]	; (84e94 <cl_datamamanager+0x3b4>)
   84dcc:	4798      	blx	r3
   84dce:	4603      	mov	r3, r0
   84dd0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
   84dd4:	e247      	b.n	85266 <cl_datamamanager+0x786>
				}
				else if(Cl_ConsoleRxMsg.data.byte[1] < ID_MAX_TREAT_PARAM)
   84dd6:	4b2d      	ldr	r3, [pc, #180]	; (84e8c <cl_datamamanager+0x3ac>)
   84dd8:	795b      	ldrb	r3, [r3, #5]
   84dda:	2b2d      	cmp	r3, #45	; 0x2d
   84ddc:	f200 8243 	bhi.w	85266 <cl_datamamanager+0x786>
				{
					dataarray[1] = Cl_ConsoleRxMsg.data.byte[1];
   84de0:	4b2a      	ldr	r3, [pc, #168]	; (84e8c <cl_datamamanager+0x3ac>)
   84de2:	795b      	ldrb	r3, [r3, #5]
   84de4:	737b      	strb	r3, [r7, #13]
					
					switch (Cl_ConsoleRxMsg.data.byte[1])
   84de6:	4b29      	ldr	r3, [pc, #164]	; (84e8c <cl_datamamanager+0x3ac>)
   84de8:	795b      	ldrb	r3, [r3, #5]
   84dea:	3b26      	subs	r3, #38	; 0x26
   84dec:	2b07      	cmp	r3, #7
   84dee:	f200 8239 	bhi.w	85264 <cl_datamamanager+0x784>
   84df2:	a201      	add	r2, pc, #4	; (adr r2, 84df8 <cl_datamamanager+0x318>)
   84df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   84df8:	00084e19 	.word	0x00084e19
   84dfc:	00084f17 	.word	0x00084f17
   84e00:	00085265 	.word	0x00085265
   84e04:	00084e9d 	.word	0x00084e9d
   84e08:	00084f8b 	.word	0x00084f8b
   84e0c:	000851ed 	.word	0x000851ed
   84e10:	0008516f 	.word	0x0008516f
   84e14:	00084ffd 	.word	0x00084ffd
					{
						case ID_b_Dlaystedata:
											datastream.word = Treatdata[ID_dflow];
   84e18:	4b1f      	ldr	r3, [pc, #124]	; (84e98 <cl_datamamanager+0x3b8>)
   84e1a:	695b      	ldr	r3, [r3, #20]
   84e1c:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[2] = datastream.bytearray[0];
   84e1e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84e22:	73bb      	strb	r3, [r7, #14]
											dataarray[3] = datastream.bytearray[1];
   84e24:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84e28:	73fb      	strb	r3, [r7, #15]
											dataarray[4] = datastream.bytearray[2];
   84e2a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84e2e:	743b      	strb	r3, [r7, #16]
											dataarray[5] = datastream.bytearray[3];
   84e30:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84e34:	747b      	strb	r3, [r7, #17]
											datastream.word = Treatdata[ID_settemp];
   84e36:	4b18      	ldr	r3, [pc, #96]	; (84e98 <cl_datamamanager+0x3b8>)
   84e38:	699b      	ldr	r3, [r3, #24]
   84e3a:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[6] = datastream.bytearray[0];
   84e3c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84e40:	74bb      	strb	r3, [r7, #18]
											dataarray[7] = datastream.bytearray[1];
   84e42:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84e46:	74fb      	strb	r3, [r7, #19]
											dataarray[8] = datastream.bytearray[2];
   84e48:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84e4c:	753b      	strb	r3, [r7, #20]
											dataarray[9] = datastream.bytearray[3];
   84e4e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84e52:	757b      	strb	r3, [r7, #21]
											datastream.word = Treatdata[ID_setcond];
   84e54:	4b10      	ldr	r3, [pc, #64]	; (84e98 <cl_datamamanager+0x3b8>)
   84e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   84e58:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[10] = datastream.bytearray[0];
   84e5a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84e5e:	75bb      	strb	r3, [r7, #22]
											dataarray[11] = datastream.bytearray[1];
   84e60:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84e64:	75fb      	strb	r3, [r7, #23]
											dataarray[12] = datastream.bytearray[2];
   84e66:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84e6a:	763b      	strb	r3, [r7, #24]
											dataarray[13] = datastream.bytearray[3];
   84e6c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84e70:	767b      	strb	r3, [r7, #25]
											cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,14);
   84e72:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   84e76:	f107 030c 	add.w	r3, r7, #12
   84e7a:	4610      	mov	r0, r2
   84e7c:	4619      	mov	r1, r3
   84e7e:	220e      	movs	r2, #14
   84e80:	4b04      	ldr	r3, [pc, #16]	; (84e94 <cl_datamamanager+0x3b4>)
   84e82:	4798      	blx	r3
   84e84:	4603      	mov	r3, r0
   84e86:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						break;
   84e8a:	e1ec      	b.n	85266 <cl_datamamanager+0x786>
   84e8c:	200723f0 	.word	0x200723f0
   84e90:	0009a545 	.word	0x0009a545
   84e94:	0009ba51 	.word	0x0009ba51
   84e98:	2007265c 	.word	0x2007265c
						case ID_b_Conddata:
											datastream.word = Treatdata[ID_condllimit];
   84e9c:	4bd1      	ldr	r3, [pc, #836]	; (851e4 <cl_datamamanager+0x704>)
   84e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   84ea2:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[2] = datastream.bytearray[0];
   84ea4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84ea8:	73bb      	strb	r3, [r7, #14]
											dataarray[3] = datastream.bytearray[1];
   84eaa:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84eae:	73fb      	strb	r3, [r7, #15]
											dataarray[4] = datastream.bytearray[2];
   84eb0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84eb4:	743b      	strb	r3, [r7, #16]
											dataarray[5] = datastream.bytearray[3];
   84eb6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84eba:	747b      	strb	r3, [r7, #17]
											datastream.word = Treatdata[ID_condulimit];
   84ebc:	4bc9      	ldr	r3, [pc, #804]	; (851e4 <cl_datamamanager+0x704>)
   84ebe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
   84ec2:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[6] = datastream.bytearray[0];
   84ec4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84ec8:	74bb      	strb	r3, [r7, #18]
											dataarray[7] = datastream.bytearray[1];
   84eca:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84ece:	74fb      	strb	r3, [r7, #19]
											dataarray[8] = datastream.bytearray[2];
   84ed0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84ed4:	753b      	strb	r3, [r7, #20]
											dataarray[9] = datastream.bytearray[3];
   84ed6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84eda:	757b      	strb	r3, [r7, #21]
											datastream.word = Treatdata[ID_b_Conddata];;
   84edc:	4bc1      	ldr	r3, [pc, #772]	; (851e4 <cl_datamamanager+0x704>)
   84ede:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
   84ee2:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[10] = datastream.bytearray[0];
   84ee4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84ee8:	75bb      	strb	r3, [r7, #22]
											dataarray[11] = datastream.bytearray[1];
   84eea:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84eee:	75fb      	strb	r3, [r7, #23]
											dataarray[12] = datastream.bytearray[2];
   84ef0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84ef4:	763b      	strb	r3, [r7, #24]
											dataarray[13] = datastream.bytearray[3];
   84ef6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84efa:	767b      	strb	r3, [r7, #25]
											cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,14);
   84efc:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   84f00:	f107 030c 	add.w	r3, r7, #12
   84f04:	4610      	mov	r0, r2
   84f06:	4619      	mov	r1, r3
   84f08:	220e      	movs	r2, #14
   84f0a:	4bb7      	ldr	r3, [pc, #732]	; (851e8 <cl_datamamanager+0x708>)
   84f0c:	4798      	blx	r3
   84f0e:	4603      	mov	r3, r0
   84f10:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						break;
   84f14:	e1a7      	b.n	85266 <cl_datamamanager+0x786>
						case ID_b_TempData:
											datastream.word = Treatdata[ID_templlimit];
   84f16:	4bb3      	ldr	r3, [pc, #716]	; (851e4 <cl_datamamanager+0x704>)
   84f18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   84f1a:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[2] = datastream.bytearray[0];
   84f1c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84f20:	73bb      	strb	r3, [r7, #14]
											dataarray[3] = datastream.bytearray[1];
   84f22:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84f26:	73fb      	strb	r3, [r7, #15]
											dataarray[4] = datastream.bytearray[2];
   84f28:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84f2c:	743b      	strb	r3, [r7, #16]
											dataarray[5] = datastream.bytearray[3];
   84f2e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84f32:	747b      	strb	r3, [r7, #17]
											datastream.word = Treatdata[ID_tempulimit];
   84f34:	4bab      	ldr	r3, [pc, #684]	; (851e4 <cl_datamamanager+0x704>)
   84f36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   84f38:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[6] = datastream.bytearray[0];
   84f3a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84f3e:	74bb      	strb	r3, [r7, #18]
											dataarray[7] = datastream.bytearray[1];
   84f40:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84f44:	74fb      	strb	r3, [r7, #19]
											dataarray[8] = datastream.bytearray[2];
   84f46:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84f4a:	753b      	strb	r3, [r7, #20]
											dataarray[9] = datastream.bytearray[3];
   84f4c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84f50:	757b      	strb	r3, [r7, #21]
											datastream.word = Treatdata[ID_settemp];
   84f52:	4ba4      	ldr	r3, [pc, #656]	; (851e4 <cl_datamamanager+0x704>)
   84f54:	699b      	ldr	r3, [r3, #24]
   84f56:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[10] = datastream.bytearray[0];
   84f58:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84f5c:	75bb      	strb	r3, [r7, #22]
											dataarray[11] = datastream.bytearray[1];
   84f5e:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84f62:	75fb      	strb	r3, [r7, #23]
											dataarray[12] = datastream.bytearray[2];
   84f64:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84f68:	763b      	strb	r3, [r7, #24]
											dataarray[13] = datastream.bytearray[3];
   84f6a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84f6e:	767b      	strb	r3, [r7, #25]
											cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,14);
   84f70:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   84f74:	f107 030c 	add.w	r3, r7, #12
   84f78:	4610      	mov	r0, r2
   84f7a:	4619      	mov	r1, r3
   84f7c:	220e      	movs	r2, #14
   84f7e:	4b9a      	ldr	r3, [pc, #616]	; (851e8 <cl_datamamanager+0x708>)
   84f80:	4798      	blx	r3
   84f82:	4603      	mov	r3, r0
   84f84:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						break;
   84f88:	e16d      	b.n	85266 <cl_datamamanager+0x786>
						case ID_b_tmp:
											datastream.word = Treatdata[ID_tmpllimit];
   84f8a:	4b96      	ldr	r3, [pc, #600]	; (851e4 <cl_datamamanager+0x704>)
   84f8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   84f8e:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[2] = datastream.bytearray[0];
   84f90:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84f94:	73bb      	strb	r3, [r7, #14]
											dataarray[3] = datastream.bytearray[1];
   84f96:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84f9a:	73fb      	strb	r3, [r7, #15]
											dataarray[4] = datastream.bytearray[2];
   84f9c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84fa0:	743b      	strb	r3, [r7, #16]
											dataarray[5] = datastream.bytearray[3];
   84fa2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84fa6:	747b      	strb	r3, [r7, #17]
											datastream.word = Treatdata[ID_tmpulimit];
   84fa8:	4b8e      	ldr	r3, [pc, #568]	; (851e4 <cl_datamamanager+0x704>)
   84faa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   84fac:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[6] = datastream.bytearray[0];
   84fae:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84fb2:	74bb      	strb	r3, [r7, #18]
											dataarray[7] = datastream.bytearray[1];
   84fb4:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84fb8:	74fb      	strb	r3, [r7, #19]
											dataarray[8] = datastream.bytearray[2];
   84fba:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84fbe:	753b      	strb	r3, [r7, #20]
											dataarray[9] = datastream.bytearray[3];
   84fc0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84fc4:	757b      	strb	r3, [r7, #21]
											datastream.word = 200;
   84fc6:	23c8      	movs	r3, #200	; 0xc8
   84fc8:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[10] = datastream.bytearray[0];
   84fca:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   84fce:	75bb      	strb	r3, [r7, #22]
											dataarray[11] = datastream.bytearray[1];
   84fd0:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   84fd4:	75fb      	strb	r3, [r7, #23]
											dataarray[12] = datastream.bytearray[2];
   84fd6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   84fda:	763b      	strb	r3, [r7, #24]
											dataarray[13] = datastream.bytearray[3];
   84fdc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   84fe0:	767b      	strb	r3, [r7, #25]
											cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,14);
   84fe2:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   84fe6:	f107 030c 	add.w	r3, r7, #12
   84fea:	4610      	mov	r0, r2
   84fec:	4619      	mov	r1, r3
   84fee:	220e      	movs	r2, #14
   84ff0:	4b7d      	ldr	r3, [pc, #500]	; (851e8 <cl_datamamanager+0x708>)
   84ff2:	4798      	blx	r3
   84ff4:	4603      	mov	r3, r0
   84ff6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						break;
   84ffa:	e134      	b.n	85266 <cl_datamamanager+0x786>
						case ID_b_treatmentdata:
											datastream.word = Treatdata[ID_setcond];
   84ffc:	4b79      	ldr	r3, [pc, #484]	; (851e4 <cl_datamamanager+0x704>)
   84ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   85000:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[2] = datastream.bytearray[0];
   85002:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   85006:	73bb      	strb	r3, [r7, #14]
											dataarray[3] = datastream.bytearray[1];
   85008:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   8500c:	73fb      	strb	r3, [r7, #15]
											dataarray[4] = datastream.bytearray[2];
   8500e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   85012:	743b      	strb	r3, [r7, #16]
											dataarray[5] = datastream.bytearray[3];
   85014:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   85018:	747b      	strb	r3, [r7, #17]
											datastream.word = Treatdata[ID_settemp];
   8501a:	4b72      	ldr	r3, [pc, #456]	; (851e4 <cl_datamamanager+0x704>)
   8501c:	699b      	ldr	r3, [r3, #24]
   8501e:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[6] = datastream.bytearray[0];
   85020:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   85024:	74bb      	strb	r3, [r7, #18]
											dataarray[7] = datastream.bytearray[1];
   85026:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   8502a:	74fb      	strb	r3, [r7, #19]
											dataarray[8] = datastream.bytearray[2];
   8502c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   85030:	753b      	strb	r3, [r7, #20]
											dataarray[9] = datastream.bytearray[3];
   85032:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   85036:	757b      	strb	r3, [r7, #21]
											datastream.word = Treatdata[ID_dflow];
   85038:	4b6a      	ldr	r3, [pc, #424]	; (851e4 <cl_datamamanager+0x704>)
   8503a:	695b      	ldr	r3, [r3, #20]
   8503c:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[10] = datastream.bytearray[0];
   8503e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   85042:	75bb      	strb	r3, [r7, #22]
											dataarray[11] = datastream.bytearray[1];
   85044:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   85048:	75fb      	strb	r3, [r7, #23]
											dataarray[12] = datastream.bytearray[2];
   8504a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   8504e:	763b      	strb	r3, [r7, #24]
											dataarray[13] = datastream.bytearray[3];
   85050:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   85054:	767b      	strb	r3, [r7, #25]
											datastream.word = Treatdata[ID_ufgoal];
   85056:	4b63      	ldr	r3, [pc, #396]	; (851e4 <cl_datamamanager+0x704>)
   85058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   8505a:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[14] = datastream.bytearray[0];
   8505c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   85060:	76bb      	strb	r3, [r7, #26]
											dataarray[15] = datastream.bytearray[1];
   85062:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   85066:	76fb      	strb	r3, [r7, #27]
											dataarray[16] = datastream.bytearray[2];
   85068:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   8506c:	773b      	strb	r3, [r7, #28]
											dataarray[17] = datastream.bytearray[3];
   8506e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   85072:	777b      	strb	r3, [r7, #29]
											datastream.word = Treatdata[ID_ufrate];
   85074:	4b5b      	ldr	r3, [pc, #364]	; (851e4 <cl_datamamanager+0x704>)
   85076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   85078:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[18] = datastream.bytearray[0];
   8507a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   8507e:	77bb      	strb	r3, [r7, #30]
											dataarray[19] = datastream.bytearray[1];
   85080:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   85084:	77fb      	strb	r3, [r7, #31]
											dataarray[20] = datastream.bytearray[2];
   85086:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   8508a:	f887 3020 	strb.w	r3, [r7, #32]
											dataarray[21] = datastream.bytearray[3];
   8508e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   85092:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
											datastream.word = Treatdata[ID_minufrate];
   85096:	4b53      	ldr	r3, [pc, #332]	; (851e4 <cl_datamamanager+0x704>)
   85098:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   8509a:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[22] = datastream.bytearray[0];
   8509c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   850a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
											dataarray[23] = datastream.bytearray[1];
   850a4:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   850a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
											dataarray[24] = datastream.bytearray[2];
   850ac:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   850b0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
											dataarray[25] = datastream.bytearray[3];
   850b4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   850b8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
											datastream.word = Treatdata[ID_bloodratetreat];
   850bc:	4b49      	ldr	r3, [pc, #292]	; (851e4 <cl_datamamanager+0x704>)
   850be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   850c0:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[26] = datastream.bytearray[0];
   850c2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   850c6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
											dataarray[27] = datastream.bytearray[1];
   850ca:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   850ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
											dataarray[28] = datastream.bytearray[2];
   850d2:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   850d6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
											dataarray[29] = datastream.bytearray[3];
   850da:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   850de:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
											datastream.word = Treatdata[ID_treattime];
   850e2:	4b40      	ldr	r3, [pc, #256]	; (851e4 <cl_datamamanager+0x704>)
   850e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   850e6:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[30] = datastream.bytearray[0];
   850e8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   850ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
											dataarray[31] = datastream.bytearray[1];
   850f0:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   850f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
											dataarray[32] = datastream.bytearray[2];
   850f8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   850fc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
											dataarray[33] = datastream.bytearray[3];
   85100:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   85104:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
											datastream.word = Treatdata[ID_heprate];
   85108:	4b36      	ldr	r3, [pc, #216]	; (851e4 <cl_datamamanager+0x704>)
   8510a:	69db      	ldr	r3, [r3, #28]
   8510c:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[34] = datastream.bytearray[0];
   8510e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   85112:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
											dataarray[35] = datastream.bytearray[1];
   85116:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   8511a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
											dataarray[36] = datastream.bytearray[2];
   8511e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   85122:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
											dataarray[37] = datastream.bytearray[3];
   85126:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   8512a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
											datastream.word = Treatdata[ID_bolusvol];
   8512e:	4b2d      	ldr	r3, [pc, #180]	; (851e4 <cl_datamamanager+0x704>)
   85130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   85132:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[38] = datastream.bytearray[0];
   85134:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   85138:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
											dataarray[39] = datastream.bytearray[1];
   8513c:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   85140:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
											dataarray[40] = datastream.bytearray[2];
   85144:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   85148:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
											dataarray[41] = datastream.bytearray[3];
   8514c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   85150:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
											cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,42);
   85154:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   85158:	f107 030c 	add.w	r3, r7, #12
   8515c:	4610      	mov	r0, r2
   8515e:	4619      	mov	r1, r3
   85160:	222a      	movs	r2, #42	; 0x2a
   85162:	4b21      	ldr	r3, [pc, #132]	; (851e8 <cl_datamamanager+0x708>)
   85164:	4798      	blx	r3
   85166:	4603      	mov	r3, r0
   85168:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						break;
   8516c:	e07b      	b.n	85266 <cl_datamamanager+0x786>
						case ID_b_vpt:
											datastream.word = Treatdata[ID_vptllimit];
   8516e:	4b1d      	ldr	r3, [pc, #116]	; (851e4 <cl_datamamanager+0x704>)
   85170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   85172:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[2] = datastream.bytearray[0];
   85174:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   85178:	73bb      	strb	r3, [r7, #14]
											dataarray[3] = datastream.bytearray[1];
   8517a:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   8517e:	73fb      	strb	r3, [r7, #15]
											dataarray[4] = datastream.bytearray[2];
   85180:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   85184:	743b      	strb	r3, [r7, #16]
											dataarray[5] = datastream.bytearray[3];
   85186:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   8518a:	747b      	strb	r3, [r7, #17]
											datastream.word = Treatdata[ID_vptulimit];
   8518c:	4b15      	ldr	r3, [pc, #84]	; (851e4 <cl_datamamanager+0x704>)
   8518e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   85190:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[6] = datastream.bytearray[0];
   85192:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   85196:	74bb      	strb	r3, [r7, #18]
											dataarray[7] = datastream.bytearray[1];
   85198:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   8519c:	74fb      	strb	r3, [r7, #19]
											dataarray[8] = datastream.bytearray[2];
   8519e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   851a2:	753b      	strb	r3, [r7, #20]
											dataarray[9] = datastream.bytearray[3];
   851a4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   851a8:	757b      	strb	r3, [r7, #21]
											datastream.word = 400;
   851aa:	f44f 73c8 	mov.w	r3, #400	; 0x190
   851ae:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[10] = datastream.bytearray[0];
   851b0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   851b4:	75bb      	strb	r3, [r7, #22]
											dataarray[11] = datastream.bytearray[1];
   851b6:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   851ba:	75fb      	strb	r3, [r7, #23]
											dataarray[12] = datastream.bytearray[2];
   851bc:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   851c0:	763b      	strb	r3, [r7, #24]
											dataarray[13] = datastream.bytearray[3];
   851c2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   851c6:	767b      	strb	r3, [r7, #25]
											cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,14);
   851c8:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   851cc:	f107 030c 	add.w	r3, r7, #12
   851d0:	4610      	mov	r0, r2
   851d2:	4619      	mov	r1, r3
   851d4:	220e      	movs	r2, #14
   851d6:	4b04      	ldr	r3, [pc, #16]	; (851e8 <cl_datamamanager+0x708>)
   851d8:	4798      	blx	r3
   851da:	4603      	mov	r3, r0
   851dc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						break;
   851e0:	e041      	b.n	85266 <cl_datamamanager+0x786>
   851e2:	bf00      	nop
   851e4:	2007265c 	.word	0x2007265c
   851e8:	0009ba51 	.word	0x0009ba51
						case ID_b_apt:
											datastream.word = Treatdata[ID_aptllimit];
   851ec:	4b98      	ldr	r3, [pc, #608]	; (85450 <cl_datamamanager+0x970>)
   851ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
   851f2:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[2] = datastream.bytearray[0];
   851f4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   851f8:	73bb      	strb	r3, [r7, #14]
											dataarray[3] = datastream.bytearray[1];
   851fa:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   851fe:	73fb      	strb	r3, [r7, #15]
											dataarray[4] = datastream.bytearray[2];
   85200:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   85204:	743b      	strb	r3, [r7, #16]
											dataarray[5] = datastream.bytearray[3];
   85206:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   8520a:	747b      	strb	r3, [r7, #17]
											datastream.word = Treatdata[ID_aptulimit];
   8520c:	4b90      	ldr	r3, [pc, #576]	; (85450 <cl_datamamanager+0x970>)
   8520e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   85212:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[6] = datastream.bytearray[0];
   85214:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   85218:	74bb      	strb	r3, [r7, #18]
											dataarray[7] = datastream.bytearray[1];
   8521a:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   8521e:	74fb      	strb	r3, [r7, #19]
											dataarray[8] = datastream.bytearray[2];
   85220:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   85224:	753b      	strb	r3, [r7, #20]
											dataarray[9] = datastream.bytearray[3];
   85226:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   8522a:	757b      	strb	r3, [r7, #21]
											datastream.word = 500;
   8522c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
   85230:	643b      	str	r3, [r7, #64]	; 0x40
											dataarray[10] = datastream.bytearray[0];
   85232:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   85236:	75bb      	strb	r3, [r7, #22]
											dataarray[11] = datastream.bytearray[1];
   85238:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   8523c:	75fb      	strb	r3, [r7, #23]
											dataarray[12] = datastream.bytearray[2];
   8523e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   85242:	763b      	strb	r3, [r7, #24]
											dataarray[13] = datastream.bytearray[3];
   85244:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   85248:	767b      	strb	r3, [r7, #25]
											cl_data_ret_val = Cl_SendDatatoconsole(command,&dataarray,14);
   8524a:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   8524e:	f107 030c 	add.w	r3, r7, #12
   85252:	4610      	mov	r0, r2
   85254:	4619      	mov	r1, r3
   85256:	220e      	movs	r2, #14
   85258:	4b7e      	ldr	r3, [pc, #504]	; (85454 <cl_datamamanager+0x974>)
   8525a:	4798      	blx	r3
   8525c:	4603      	mov	r3, r0
   8525e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						break;
   85262:	e000      	b.n	85266 <cl_datamamanager+0x786>
						
						default:break;
   85264:	bf00      	nop
					}
					
				}
		

				break;
   85266:	e000      	b.n	8526a <cl_datamamanager+0x78a>
				
				default:
				break;
   85268:	bf00      	nop
			}
		}
		break;
   8526a:	e0eb      	b.n	85444 <cl_datamamanager+0x964>
		case EVT_CONSOLE_COMMAND_SET_DATA:
		if(Cl_ConsoleRxMsg.msgready == true)
   8526c:	4b7a      	ldr	r3, [pc, #488]	; (85458 <cl_datamamanager+0x978>)
   8526e:	7e1b      	ldrb	r3, [r3, #24]
   85270:	2b00      	cmp	r3, #0
   85272:	f000 80e5 	beq.w	85440 <cl_datamamanager+0x960>
		{
			cl_Datastreamtype cl_temp  ;

			switch(Cl_ConsoleRxMsg.data.byte[0])
   85276:	4b78      	ldr	r3, [pc, #480]	; (85458 <cl_datamamanager+0x978>)
   85278:	791b      	ldrb	r3, [r3, #4]
   8527a:	2b12      	cmp	r3, #18
   8527c:	d000      	beq.n	85280 <cl_datamamanager+0x7a0>
						break;

						default:break;
					}
				break;
				default:break;
   8527e:	e0df      	b.n	85440 <cl_datamamanager+0x960>
			switch(Cl_ConsoleRxMsg.data.byte[0])
				{
					
					case CON_RX_PARAM_DATA_TREATMENT_DATA:
			
					if(Cl_ConsoleRxMsg.data.byte[1] < ID_b_Dlaystedata)
   85280:	4b75      	ldr	r3, [pc, #468]	; (85458 <cl_datamamanager+0x978>)
   85282:	795b      	ldrb	r3, [r3, #5]
   85284:	2b25      	cmp	r3, #37	; 0x25
   85286:	d818      	bhi.n	852ba <cl_datamamanager+0x7da>
					{
						dataarray[1] = Cl_ConsoleRxMsg.data.byte[1];
   85288:	4b73      	ldr	r3, [pc, #460]	; (85458 <cl_datamamanager+0x978>)
   8528a:	795b      	ldrb	r3, [r3, #5]
   8528c:	737b      	strb	r3, [r7, #13]
						
						datastream.bytearray[0] = Cl_ConsoleRxMsg.data.byte[2];
   8528e:	4b72      	ldr	r3, [pc, #456]	; (85458 <cl_datamamanager+0x978>)
   85290:	799b      	ldrb	r3, [r3, #6]
   85292:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
						datastream.bytearray[1] = Cl_ConsoleRxMsg.data.byte[3];
   85296:	4b70      	ldr	r3, [pc, #448]	; (85458 <cl_datamamanager+0x978>)
   85298:	79db      	ldrb	r3, [r3, #7]
   8529a:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
						datastream.bytearray[2] = Cl_ConsoleRxMsg.data.byte[4];
   8529e:	4b6e      	ldr	r3, [pc, #440]	; (85458 <cl_datamamanager+0x978>)
   852a0:	7a1b      	ldrb	r3, [r3, #8]
   852a2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
						datastream.bytearray[3] = Cl_ConsoleRxMsg.data.byte[5];
   852a6:	4b6c      	ldr	r3, [pc, #432]	; (85458 <cl_datamamanager+0x978>)
   852a8:	7a5b      	ldrb	r3, [r3, #9]
   852aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

						Treatdata[dataarray[1]] = datastream.word ;
   852ae:	7b7b      	ldrb	r3, [r7, #13]
   852b0:	4619      	mov	r1, r3
   852b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   852b4:	4a66      	ldr	r2, [pc, #408]	; (85450 <cl_datamamanager+0x970>)
   852b6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
					}

			

			
					switch(Cl_ConsoleRxMsg.data.byte[1])
   852ba:	4b67      	ldr	r3, [pc, #412]	; (85458 <cl_datamamanager+0x978>)
   852bc:	795b      	ldrb	r3, [r3, #5]
   852be:	3b05      	subs	r3, #5
   852c0:	2b20      	cmp	r3, #32
   852c2:	f200 80bb 	bhi.w	8543c <cl_datamamanager+0x95c>
   852c6:	a201      	add	r2, pc, #4	; (adr r2, 852cc <cl_datamamanager+0x7ec>)
   852c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   852cc:	00085351 	.word	0x00085351
   852d0:	00085359 	.word	0x00085359
   852d4:	0008543d 	.word	0x0008543d
   852d8:	0008543d 	.word	0x0008543d
   852dc:	0008543d 	.word	0x0008543d
   852e0:	0008543d 	.word	0x0008543d
   852e4:	00085361 	.word	0x00085361
   852e8:	00085369 	.word	0x00085369
   852ec:	00085379 	.word	0x00085379
   852f0:	0008543d 	.word	0x0008543d
   852f4:	0008543d 	.word	0x0008543d
   852f8:	0008543d 	.word	0x0008543d
   852fc:	0008543d 	.word	0x0008543d
   85300:	0008543d 	.word	0x0008543d
   85304:	0008543d 	.word	0x0008543d
   85308:	0008543d 	.word	0x0008543d
   8530c:	00085381 	.word	0x00085381
   85310:	0008543d 	.word	0x0008543d
   85314:	0008543d 	.word	0x0008543d
   85318:	00085389 	.word	0x00085389
   8531c:	00085399 	.word	0x00085399
   85320:	000853a9 	.word	0x000853a9
   85324:	000853b9 	.word	0x000853b9
   85328:	000853c9 	.word	0x000853c9
   8532c:	000853d9 	.word	0x000853d9
   85330:	0008543d 	.word	0x0008543d
   85334:	0008543d 	.word	0x0008543d
   85338:	0008543d 	.word	0x0008543d
   8533c:	0008543d 	.word	0x0008543d
   85340:	000853f1 	.word	0x000853f1
   85344:	00085403 	.word	0x00085403
   85348:	00085415 	.word	0x00085415
   8534c:	00085425 	.word	0x00085425
					{
						case ID_dflow:
						Treatdata[ID_dflow] = (datastream.word);
   85350:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   85352:	4a3f      	ldr	r2, [pc, #252]	; (85450 <cl_datamamanager+0x970>)
   85354:	6153      	str	r3, [r2, #20]
						break;
   85356:	e072      	b.n	8543e <cl_datamamanager+0x95e>
						case ID_settemp:
							Treatdata[ID_settemp] = (datastream.word);
   85358:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   8535a:	4a3d      	ldr	r2, [pc, #244]	; (85450 <cl_datamamanager+0x970>)
   8535c:	6193      	str	r3, [r2, #24]
						break;
   8535e:	e06e      	b.n	8543e <cl_datamamanager+0x95e>
						case ID_heprate:
						break;
						case ID_setcond:
							Treatdata[ID_setcond] = (datastream.word);
   85360:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   85362:	4a3b      	ldr	r2, [pc, #236]	; (85450 <cl_datamamanager+0x970>)
   85364:	62d3      	str	r3, [r2, #44]	; 0x2c
						break;
   85366:	e06a      	b.n	8543e <cl_datamamanager+0x95e>
						case ID_ufrate:
						Treatdata[ID_ufrate] = (datastream.word)/10; // added to get uf rate from ui
   85368:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   8536a:	4a3c      	ldr	r2, [pc, #240]	; (8545c <cl_datamamanager+0x97c>)
   8536c:	fba2 2303 	umull	r2, r3, r2, r3
   85370:	08db      	lsrs	r3, r3, #3
   85372:	4a37      	ldr	r2, [pc, #220]	; (85450 <cl_datamamanager+0x970>)
   85374:	6313      	str	r3, [r2, #48]	; 0x30
						break;
   85376:	e062      	b.n	8543e <cl_datamamanager+0x95e>
						case ID_ufgoal:
						Treatdata[ID_ufgoal] = datastream.word; // added to get uf goal data from ui
   85378:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   8537a:	4a35      	ldr	r2, [pc, #212]	; (85450 <cl_datamamanager+0x970>)
   8537c:	6353      	str	r3, [r2, #52]	; 0x34
						break;
   8537e:	e05e      	b.n	8543e <cl_datamamanager+0x95e>
						case ID_heparincheck:
						break;
						case ID_minufrate:
						break;
						case ID_treattime:
						Treatdata[ID_treattime] = datastream.word;
   85380:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   85382:	4a33      	ldr	r2, [pc, #204]	; (85450 <cl_datamamanager+0x970>)
   85384:	6553      	str	r3, [r2, #84]	; 0x54
						break;
   85386:	e05a      	b.n	8543e <cl_datamamanager+0x95e>
						case ID_bloodratereturn:
						break;
						case ID_bloodratetreat:
						break;
						case ID_tempulimit:
						Cl_alarmThresholdTable.temp3_high_threshold =  (datastream.word);
   85388:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   8538a:	4b35      	ldr	r3, [pc, #212]	; (85460 <cl_datamamanager+0x980>)
   8538c:	4610      	mov	r0, r2
   8538e:	4798      	blx	r3
   85390:	4602      	mov	r2, r0
   85392:	4b34      	ldr	r3, [pc, #208]	; (85464 <cl_datamamanager+0x984>)
   85394:	649a      	str	r2, [r3, #72]	; 0x48
						break;
   85396:	e052      	b.n	8543e <cl_datamamanager+0x95e>
						case ID_templlimit:
						Cl_alarmThresholdTable.temp3_low_threshold =  (datastream.word);
   85398:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   8539a:	4b31      	ldr	r3, [pc, #196]	; (85460 <cl_datamamanager+0x980>)
   8539c:	4610      	mov	r0, r2
   8539e:	4798      	blx	r3
   853a0:	4602      	mov	r2, r0
   853a2:	4b30      	ldr	r3, [pc, #192]	; (85464 <cl_datamamanager+0x984>)
   853a4:	64da      	str	r2, [r3, #76]	; 0x4c
						break;
   853a6:	e04a      	b.n	8543e <cl_datamamanager+0x95e>
						case ID_tmpllimit:
						Cl_alarmThresholdTable.tmp_low_threshold =  datastream.word;
   853a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   853aa:	4b2d      	ldr	r3, [pc, #180]	; (85460 <cl_datamamanager+0x980>)
   853ac:	4610      	mov	r0, r2
   853ae:	4798      	blx	r3
   853b0:	4602      	mov	r2, r0
   853b2:	4b2c      	ldr	r3, [pc, #176]	; (85464 <cl_datamamanager+0x984>)
   853b4:	635a      	str	r2, [r3, #52]	; 0x34
						break;
   853b6:	e042      	b.n	8543e <cl_datamamanager+0x95e>
						case ID_tmpulimit:
						Cl_alarmThresholdTable.tmp_high_threshold =  datastream.word;
   853b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   853ba:	4b29      	ldr	r3, [pc, #164]	; (85460 <cl_datamamanager+0x980>)
   853bc:	4610      	mov	r0, r2
   853be:	4798      	blx	r3
   853c0:	4602      	mov	r2, r0
   853c2:	4b28      	ldr	r3, [pc, #160]	; (85464 <cl_datamamanager+0x984>)
   853c4:	631a      	str	r2, [r3, #48]	; 0x30
						break;
   853c6:	e03a      	b.n	8543e <cl_datamamanager+0x95e>
						case ID_vptllimit:
						Cl_alarmThresholdTable.vpt_low_threshold =  (datastream.word);
   853c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   853ca:	4b25      	ldr	r3, [pc, #148]	; (85460 <cl_datamamanager+0x980>)
   853cc:	4610      	mov	r0, r2
   853ce:	4798      	blx	r3
   853d0:	4602      	mov	r2, r0
   853d2:	4b24      	ldr	r3, [pc, #144]	; (85464 <cl_datamamanager+0x984>)
   853d4:	615a      	str	r2, [r3, #20]
						break;
   853d6:	e032      	b.n	8543e <cl_datamamanager+0x95e>
						case ID_vptulimit:
						Cl_alarmThresholdTable.vpt_high_threshold =  (datastream.word)/100;
   853d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   853da:	4a23      	ldr	r2, [pc, #140]	; (85468 <cl_datamamanager+0x988>)
   853dc:	fba2 2303 	umull	r2, r3, r2, r3
   853e0:	095a      	lsrs	r2, r3, #5
   853e2:	4b1f      	ldr	r3, [pc, #124]	; (85460 <cl_datamamanager+0x980>)
   853e4:	4610      	mov	r0, r2
   853e6:	4798      	blx	r3
   853e8:	4602      	mov	r2, r0
   853ea:	4b1e      	ldr	r3, [pc, #120]	; (85464 <cl_datamamanager+0x984>)
   853ec:	611a      	str	r2, [r3, #16]
						break;
   853ee:	e026      	b.n	8543e <cl_datamamanager+0x95e>
						case ID_dflowllimit:
						break;
						case ID_dflowulimit:
						break;
						case ID_condllimit:
						Cl_alarmThresholdTable.cond_low_threshold =  datastream.word/10;
   853f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   853f2:	4a1a      	ldr	r2, [pc, #104]	; (8545c <cl_datamamanager+0x97c>)
   853f4:	fba2 2303 	umull	r2, r3, r2, r3
   853f8:	08db      	lsrs	r3, r3, #3
   853fa:	b29a      	uxth	r2, r3
   853fc:	4b19      	ldr	r3, [pc, #100]	; (85464 <cl_datamamanager+0x984>)
   853fe:	801a      	strh	r2, [r3, #0]
						break;
   85400:	e01d      	b.n	8543e <cl_datamamanager+0x95e>
						case ID_condulimit:
						Cl_alarmThresholdTable.cond_high_threshold =  datastream.word/10;
   85402:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   85404:	4a15      	ldr	r2, [pc, #84]	; (8545c <cl_datamamanager+0x97c>)
   85406:	fba2 2303 	umull	r2, r3, r2, r3
   8540a:	08db      	lsrs	r3, r3, #3
   8540c:	b29a      	uxth	r2, r3
   8540e:	4b15      	ldr	r3, [pc, #84]	; (85464 <cl_datamamanager+0x984>)
   85410:	805a      	strh	r2, [r3, #2]
						break;
   85412:	e014      	b.n	8543e <cl_datamamanager+0x95e>
						case ID_aptllimit:
						Cl_alarmThresholdTable.apt_low_threshold =  (datastream.word);
   85414:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   85416:	4b12      	ldr	r3, [pc, #72]	; (85460 <cl_datamamanager+0x980>)
   85418:	4610      	mov	r0, r2
   8541a:	4798      	blx	r3
   8541c:	4602      	mov	r2, r0
   8541e:	4b11      	ldr	r3, [pc, #68]	; (85464 <cl_datamamanager+0x984>)
   85420:	60da      	str	r2, [r3, #12]
						break;
   85422:	e00c      	b.n	8543e <cl_datamamanager+0x95e>
						case ID_aptulimit:
						Cl_alarmThresholdTable.apt_high_threshold =  (datastream.word)/100;
   85424:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   85426:	4a10      	ldr	r2, [pc, #64]	; (85468 <cl_datamamanager+0x988>)
   85428:	fba2 2303 	umull	r2, r3, r2, r3
   8542c:	095a      	lsrs	r2, r3, #5
   8542e:	4b0c      	ldr	r3, [pc, #48]	; (85460 <cl_datamamanager+0x980>)
   85430:	4610      	mov	r0, r2
   85432:	4798      	blx	r3
   85434:	4602      	mov	r2, r0
   85436:	4b0b      	ldr	r3, [pc, #44]	; (85464 <cl_datamamanager+0x984>)
   85438:	609a      	str	r2, [r3, #8]
						break;
   8543a:	e000      	b.n	8543e <cl_datamamanager+0x95e>

						default:break;
   8543c:	bf00      	nop
					}
				break;
   8543e:	bf00      	nop
				default:break;
			}
							
							
		}
		break;
   85440:	e000      	b.n	85444 <cl_datamamanager+0x964>
		
		case EVT_TICK_SEC :
		
		
		
		break;
   85442:	bf00      	nop
		
		default:
		break;
		
	}
return CL_OK;
   85444:	2300      	movs	r3, #0
}
   85446:	4618      	mov	r0, r3
   85448:	3748      	adds	r7, #72	; 0x48
   8544a:	46bd      	mov	sp, r7
   8544c:	bd80      	pop	{r7, pc}
   8544e:	bf00      	nop
   85450:	2007265c 	.word	0x2007265c
   85454:	0009ba51 	.word	0x0009ba51
   85458:	200723f0 	.word	0x200723f0
   8545c:	cccccccd 	.word	0xcccccccd
   85460:	000a68a9 	.word	0x000a68a9
   85464:	20072104 	.word	0x20072104
   85468:	51eb851f 	.word	0x51eb851f

0008546c <Cl_dlsis_init>:
{FPCURRENTSTATUS,false,false,false},
*/
};
volatile Cl_Uint8Type var=0;
 Cl_ReturnCodeType Cl_dlsis_init(void)
 {
   8546c:	b480      	push	{r7}
   8546e:	af00      	add	r7, sp, #0
  Cl_dlsissecondscounter_1 =0;Cl_dlsisMinutescounter_1=0; Cl_dlsishourscounter_1=0;
   85470:	4b2b      	ldr	r3, [pc, #172]	; (85520 <Cl_dlsis_init+0xb4>)
   85472:	2200      	movs	r2, #0
   85474:	601a      	str	r2, [r3, #0]
   85476:	4b2b      	ldr	r3, [pc, #172]	; (85524 <Cl_dlsis_init+0xb8>)
   85478:	2200      	movs	r2, #0
   8547a:	601a      	str	r2, [r3, #0]
   8547c:	4b2a      	ldr	r3, [pc, #168]	; (85528 <Cl_dlsis_init+0xbc>)
   8547e:	2200      	movs	r2, #0
   85480:	601a      	str	r2, [r3, #0]
  Cl_dlsisTotalMinutescounter_1=0; Cl_dlsisTotalhourscounter_1=0;
   85482:	4b2a      	ldr	r3, [pc, #168]	; (8552c <Cl_dlsis_init+0xc0>)
   85484:	2200      	movs	r2, #0
   85486:	601a      	str	r2, [r3, #0]
   85488:	4b29      	ldr	r3, [pc, #164]	; (85530 <Cl_dlsis_init+0xc4>)
   8548a:	2200      	movs	r2, #0
   8548c:	601a      	str	r2, [r3, #0]
 Cl_dlsisOpenFillTimeOut = false; heater_stable_status = false;
   8548e:	4b29      	ldr	r3, [pc, #164]	; (85534 <Cl_dlsis_init+0xc8>)
   85490:	2200      	movs	r2, #0
   85492:	701a      	strb	r2, [r3, #0]
   85494:	4b28      	ldr	r3, [pc, #160]	; (85538 <Cl_dlsis_init+0xcc>)
   85496:	2200      	movs	r2, #0
   85498:	701a      	strb	r2, [r3, #0]
  dlis_wait_cnt =0;
   8549a:	4b28      	ldr	r3, [pc, #160]	; (8553c <Cl_dlsis_init+0xd0>)
   8549c:	2200      	movs	r2, #0
   8549e:	801a      	strh	r2, [r3, #0]

  wait_cnt_dls = 0;TmpVal_dls =0;
   854a0:	4b27      	ldr	r3, [pc, #156]	; (85540 <Cl_dlsis_init+0xd4>)
   854a2:	2200      	movs	r2, #0
   854a4:	801a      	strh	r2, [r3, #0]
   854a6:	4b27      	ldr	r3, [pc, #156]	; (85544 <Cl_dlsis_init+0xd8>)
   854a8:	2200      	movs	r2, #0
   854aa:	801a      	strh	r2, [r3, #0]
  temp1_dls =0 ;temp2_dls =0;
   854ac:	4b26      	ldr	r3, [pc, #152]	; (85548 <Cl_dlsis_init+0xdc>)
   854ae:	2200      	movs	r2, #0
   854b0:	801a      	strh	r2, [r3, #0]
   854b2:	4b26      	ldr	r3, [pc, #152]	; (8554c <Cl_dlsis_init+0xe0>)
   854b4:	2200      	movs	r2, #0
   854b6:	801a      	strh	r2, [r3, #0]
  bypass_flag=0;
   854b8:	4b25      	ldr	r3, [pc, #148]	; (85550 <Cl_dlsis_init+0xe4>)
   854ba:	2200      	movs	r2, #0
   854bc:	701a      	strb	r2, [r3, #0]
   bc_flag=1;
   854be:	4b25      	ldr	r3, [pc, #148]	; (85554 <Cl_dlsis_init+0xe8>)
   854c0:	2201      	movs	r2, #1
   854c2:	701a      	strb	r2, [r3, #0]
  flow_rate=0;
   854c4:	4b24      	ldr	r3, [pc, #144]	; (85558 <Cl_dlsis_init+0xec>)
   854c6:	2200      	movs	r2, #0
   854c8:	601a      	str	r2, [r3, #0]
 dlsis_ps1 = 0; dlsis_ps2=0; dlsis_ps3=0;dlsis_apt = 0; dlsis_vpt=0;
   854ca:	4b24      	ldr	r3, [pc, #144]	; (8555c <Cl_dlsis_init+0xf0>)
   854cc:	f04f 0200 	mov.w	r2, #0
   854d0:	601a      	str	r2, [r3, #0]
   854d2:	4b23      	ldr	r3, [pc, #140]	; (85560 <Cl_dlsis_init+0xf4>)
   854d4:	f04f 0200 	mov.w	r2, #0
   854d8:	601a      	str	r2, [r3, #0]
   854da:	4b22      	ldr	r3, [pc, #136]	; (85564 <Cl_dlsis_init+0xf8>)
   854dc:	f04f 0200 	mov.w	r2, #0
   854e0:	601a      	str	r2, [r3, #0]
   854e2:	4b21      	ldr	r3, [pc, #132]	; (85568 <Cl_dlsis_init+0xfc>)
   854e4:	f04f 0200 	mov.w	r2, #0
   854e8:	601a      	str	r2, [r3, #0]
   854ea:	4b20      	ldr	r3, [pc, #128]	; (8556c <Cl_dlsis_init+0x100>)
   854ec:	f04f 0200 	mov.w	r2, #0
   854f0:	601a      	str	r2, [r3, #0]
 dlsis_temp1=0;dlsis_temp2=0;dlsis_temp3=0;dlsis_cond=0;
   854f2:	4b1f      	ldr	r3, [pc, #124]	; (85570 <Cl_dlsis_init+0x104>)
   854f4:	f04f 0200 	mov.w	r2, #0
   854f8:	601a      	str	r2, [r3, #0]
   854fa:	4b1e      	ldr	r3, [pc, #120]	; (85574 <Cl_dlsis_init+0x108>)
   854fc:	f04f 0200 	mov.w	r2, #0
   85500:	601a      	str	r2, [r3, #0]
   85502:	4b1d      	ldr	r3, [pc, #116]	; (85578 <Cl_dlsis_init+0x10c>)
   85504:	f04f 0200 	mov.w	r2, #0
   85508:	601a      	str	r2, [r3, #0]
   8550a:	4b1c      	ldr	r3, [pc, #112]	; (8557c <Cl_dlsis_init+0x110>)
   8550c:	f04f 0200 	mov.w	r2, #0
   85510:	601a      	str	r2, [r3, #0]
 
	 return CL_OK;
   85512:	2300      	movs	r3, #0
 }
   85514:	4618      	mov	r0, r3
   85516:	46bd      	mov	sp, r7
   85518:	f85d 7b04 	ldr.w	r7, [sp], #4
   8551c:	4770      	bx	lr
   8551e:	bf00      	nop
   85520:	20071938 	.word	0x20071938
   85524:	2007193c 	.word	0x2007193c
   85528:	20071940 	.word	0x20071940
   8552c:	20071944 	.word	0x20071944
   85530:	20071948 	.word	0x20071948
   85534:	2007194c 	.word	0x2007194c
   85538:	2007194d 	.word	0x2007194d
   8553c:	2007217c 	.word	0x2007217c
   85540:	2007194e 	.word	0x2007194e
   85544:	20071950 	.word	0x20071950
   85548:	20072178 	.word	0x20072178
   8554c:	2007217e 	.word	0x2007217e
   85550:	20071952 	.word	0x20071952
   85554:	20071953 	.word	0x20071953
   85558:	20071954 	.word	0x20071954
   8555c:	20071958 	.word	0x20071958
   85560:	2007195c 	.word	0x2007195c
   85564:	20071960 	.word	0x20071960
   85568:	20071964 	.word	0x20071964
   8556c:	20071968 	.word	0x20071968
   85570:	2007196c 	.word	0x2007196c
   85574:	20071970 	.word	0x20071970
   85578:	20071974 	.word	0x20071974
   8557c:	20071978 	.word	0x20071978

00085580 <Cl_Dlsis_controller>:
 
 
Cl_ReturnCodeType Cl_Dlsis_controller(Cl_Mac_EventsType Cl_MacDlsisEvent)
{
   85580:	b580      	push	{r7, lr}
   85582:	b098      	sub	sp, #96	; 0x60
   85584:	af00      	add	r7, sp, #0
   85586:	4603      	mov	r3, r0
   85588:	71fb      	strb	r3, [r7, #7]
	
Cl_ReturnCodeType Cl_dlsisretcode;
Cl_Dlsis_Eevents cl_dlsis_event = EVENT_NULL_EVENT;
   8558a:	2300      	movs	r3, #0
   8558c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
Cl_BoolType alarmstatus1 = false,alarmstatus2 = false,alarmstatus3 = false, flowstatus = false;
   85590:	2300      	movs	r3, #0
   85592:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
   85596:	2300      	movs	r3, #0
   85598:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
   8559c:	2300      	movs	r3, #0
   8559e:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
   855a2:	2300      	movs	r3, #0
   855a4:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
static Cl_BoolType bcs_wait = false;
static Cl_BoolType V2_toggle = false;
Cl_Uint16Type Tmp2Val = 0;
   855a8:	2300      	movs	r3, #0
   855aa:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
Cl_Uint8Type dataarray[8] =  {0,0,0,0};
   855ae:	2300      	movs	r3, #0
   855b0:	647b      	str	r3, [r7, #68]	; 0x44
   855b2:	2300      	movs	r3, #0
   855b4:	64bb      	str	r3, [r7, #72]	; 0x48
extern Cl_BoolType BC_window; //test
extern Cl_BoolType g_testbcfreeze; //test
extern Cl_BoolType Current_sense_trigger; // test
Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   855b6:	2351      	movs	r3, #81	; 0x51
   855b8:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
Cl_Uint8Type data = 0;
   855bc:	2300      	movs	r3, #0
   855be:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
Cl_Uint16Type tempcount=0;
   855c2:	2300      	movs	r3, #0
   855c4:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
float temp;
//static float apt=0, vpt=0;
StateDatatype abfdata;
Cl_Uint8Type abfdataarray[5] =  {0,0,0,0,0};
   855c8:	2300      	movs	r3, #0
   855ca:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
   855ce:	2300      	movs	r3, #0
   855d0:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
   855d4:	2300      	movs	r3, #0
   855d6:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
   855da:	2300      	movs	r3, #0
   855dc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
   855e0:	2300      	movs	r3, #0
   855e2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c


Cl_dlsisretcode =  cl_dlsis_translatemacevent( Cl_MacDlsisEvent, &cl_dlsis_event);
   855e6:	79fa      	ldrb	r2, [r7, #7]
   855e8:	f107 034f 	add.w	r3, r7, #79	; 0x4f
   855ec:	4610      	mov	r0, r2
   855ee:	4619      	mov	r1, r3
   855f0:	4bb7      	ldr	r3, [pc, #732]	; (858d0 <Cl_Dlsis_controller+0x350>)
   855f2:	4798      	blx	r3
   855f4:	4603      	mov	r3, r0
   855f6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	
	switch(cl_dlsis_event)
   855fa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   855fe:	3b11      	subs	r3, #17
   85600:	2b4b      	cmp	r3, #75	; 0x4b
   85602:	f200 81a3 	bhi.w	8594c <Cl_Dlsis_controller+0x3cc>
   85606:	a201      	add	r2, pc, #4	; (adr r2, 8560c <Cl_Dlsis_controller+0x8c>)
   85608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8560c:	0008594d 	.word	0x0008594d
   85610:	0008594d 	.word	0x0008594d
   85614:	0008573d 	.word	0x0008573d
   85618:	0008594d 	.word	0x0008594d
   8561c:	0008594d 	.word	0x0008594d
   85620:	0008594d 	.word	0x0008594d
   85624:	0008594d 	.word	0x0008594d
   85628:	0008594d 	.word	0x0008594d
   8562c:	0008594d 	.word	0x0008594d
   85630:	0008594d 	.word	0x0008594d
   85634:	0008594d 	.word	0x0008594d
   85638:	0008594d 	.word	0x0008594d
   8563c:	00085833 	.word	0x00085833
   85640:	00085803 	.word	0x00085803
   85644:	0008581b 	.word	0x0008581b
   85648:	00085755 	.word	0x00085755
   8564c:	00085795 	.word	0x00085795
   85650:	000857f9 	.word	0x000857f9
   85654:	0008574b 	.word	0x0008574b
   85658:	0008594d 	.word	0x0008594d
   8565c:	0008594d 	.word	0x0008594d
   85660:	0008594d 	.word	0x0008594d
   85664:	0008594d 	.word	0x0008594d
   85668:	0008594d 	.word	0x0008594d
   8566c:	0008594d 	.word	0x0008594d
   85670:	0008594d 	.word	0x0008594d
   85674:	0008594d 	.word	0x0008594d
   85678:	0008594d 	.word	0x0008594d
   8567c:	0008594d 	.word	0x0008594d
   85680:	0008594d 	.word	0x0008594d
   85684:	0008594d 	.word	0x0008594d
   85688:	0008594d 	.word	0x0008594d
   8568c:	0008594d 	.word	0x0008594d
   85690:	0008594d 	.word	0x0008594d
   85694:	0008594d 	.word	0x0008594d
   85698:	0008594d 	.word	0x0008594d
   8569c:	0008594d 	.word	0x0008594d
   856a0:	0008594d 	.word	0x0008594d
   856a4:	0008594d 	.word	0x0008594d
   856a8:	0008594d 	.word	0x0008594d
   856ac:	0008594d 	.word	0x0008594d
   856b0:	0008594d 	.word	0x0008594d
   856b4:	0008594d 	.word	0x0008594d
   856b8:	0008594d 	.word	0x0008594d
   856bc:	0008594d 	.word	0x0008594d
   856c0:	0008594d 	.word	0x0008594d
   856c4:	0008594d 	.word	0x0008594d
   856c8:	0008594d 	.word	0x0008594d
   856cc:	0008594d 	.word	0x0008594d
   856d0:	0008594d 	.word	0x0008594d
   856d4:	0008594d 	.word	0x0008594d
   856d8:	0008594d 	.word	0x0008594d
   856dc:	0008594d 	.word	0x0008594d
   856e0:	0008594d 	.word	0x0008594d
   856e4:	0008594d 	.word	0x0008594d
   856e8:	0008594d 	.word	0x0008594d
   856ec:	0008594d 	.word	0x0008594d
   856f0:	0008594d 	.word	0x0008594d
   856f4:	0008594d 	.word	0x0008594d
   856f8:	0008594d 	.word	0x0008594d
   856fc:	0008594d 	.word	0x0008594d
   85700:	0008594d 	.word	0x0008594d
   85704:	0008594d 	.word	0x0008594d
   85708:	0008594d 	.word	0x0008594d
   8570c:	0008594d 	.word	0x0008594d
   85710:	0008594d 	.word	0x0008594d
   85714:	0008594d 	.word	0x0008594d
   85718:	0008594d 	.word	0x0008594d
   8571c:	0008594d 	.word	0x0008594d
   85720:	0008594d 	.word	0x0008594d
   85724:	0008594d 	.word	0x0008594d
   85728:	0008594d 	.word	0x0008594d
   8572c:	0008594d 	.word	0x0008594d
   85730:	0008594d 	.word	0x0008594d
   85734:	00085871 	.word	0x00085871
   85738:	000858f1 	.word	0x000858f1
	{
		case EVENT_DLSIS_TICK_SECOND:
		Cl_dlsisretcode = Cl_bc_controller(BC_EVENT_SECOND);
   8573c:	2002      	movs	r0, #2
   8573e:	4b65      	ldr	r3, [pc, #404]	; (858d4 <Cl_Dlsis_controller+0x354>)
   85740:	4798      	blx	r3
   85742:	4603      	mov	r3, r0
   85744:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		break;
   85748:	e101      	b.n	8594e <Cl_Dlsis_controller+0x3ce>
		//Cl_dlsisretcode = Cl_bc_controller(BC_EVENT_50MS);
		break;
		
		
		case EVENT_DLSIS_HEAPARIN_BOLUS:
		cl_hep_controller(CL_HEP_EVENT_STARTBOLUS,0);
   8574a:	2007      	movs	r0, #7
   8574c:	2100      	movs	r1, #0
   8574e:	4b62      	ldr	r3, [pc, #392]	; (858d8 <Cl_Dlsis_controller+0x358>)
   85750:	4798      	blx	r3
		break;
   85752:	e0fc      	b.n	8594e <Cl_Dlsis_controller+0x3ce>
		
		
		case EVENT_DLSIS_HEP_RATE:
			if(Cl_ConsoleRxMsg.msgready == true)
   85754:	4b61      	ldr	r3, [pc, #388]	; (858dc <Cl_Dlsis_controller+0x35c>)
   85756:	7e1b      	ldrb	r3, [r3, #24]
   85758:	2b00      	cmp	r3, #0
   8575a:	d01a      	beq.n	85792 <Cl_Dlsis_controller+0x212>
			{
				
				cl_Datastreamtype cl_temp  ;
				cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   8575c:	4b5f      	ldr	r3, [pc, #380]	; (858dc <Cl_Dlsis_controller+0x35c>)
   8575e:	791b      	ldrb	r3, [r3, #4]
   85760:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
				cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[1];
   85764:	4b5d      	ldr	r3, [pc, #372]	; (858dc <Cl_Dlsis_controller+0x35c>)
   85766:	795b      	ldrb	r3, [r3, #5]
   85768:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
				cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[2];
   8576c:	4b5b      	ldr	r3, [pc, #364]	; (858dc <Cl_Dlsis_controller+0x35c>)
   8576e:	799b      	ldrb	r3, [r3, #6]
   85770:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
				cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
   85774:	4b59      	ldr	r3, [pc, #356]	; (858dc <Cl_Dlsis_controller+0x35c>)
   85776:	79db      	ldrb	r3, [r3, #7]
   85778:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				Treatdata[ID_heprate] = cl_temp.Twobyte;
   8577c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
   8577e:	461a      	mov	r2, r3
   85780:	4b57      	ldr	r3, [pc, #348]	; (858e0 <Cl_Dlsis_controller+0x360>)
   85782:	61da      	str	r2, [r3, #28]
			//	hep_calibration(Treatdata[ID_heprate]);
				cl_hep_controller(CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE,Treatdata[ID_heprate]);
   85784:	4b56      	ldr	r3, [pc, #344]	; (858e0 <Cl_Dlsis_controller+0x360>)
   85786:	69db      	ldr	r3, [r3, #28]
   85788:	2006      	movs	r0, #6
   8578a:	4619      	mov	r1, r3
   8578c:	4b52      	ldr	r3, [pc, #328]	; (858d8 <Cl_Dlsis_controller+0x358>)
   8578e:	4798      	blx	r3
			}
		break;
   85790:	e0dd      	b.n	8594e <Cl_Dlsis_controller+0x3ce>
   85792:	e0dc      	b.n	8594e <Cl_Dlsis_controller+0x3ce>
		case EVENT_DLSIS_HEP_ON:
		
		if(Cl_ConsoleRxMsg.msgready == true)
   85794:	4b51      	ldr	r3, [pc, #324]	; (858dc <Cl_Dlsis_controller+0x35c>)
   85796:	7e1b      	ldrb	r3, [r3, #24]
   85798:	2b00      	cmp	r3, #0
   8579a:	d02c      	beq.n	857f6 <Cl_Dlsis_controller+0x276>
		
		{
			cl_Datastreamtype cl_temp  ;
			cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[1];
   8579c:	4b4f      	ldr	r3, [pc, #316]	; (858dc <Cl_Dlsis_controller+0x35c>)
   8579e:	795b      	ldrb	r3, [r3, #5]
   857a0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
			cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[2];
   857a4:	4b4d      	ldr	r3, [pc, #308]	; (858dc <Cl_Dlsis_controller+0x35c>)
   857a6:	799b      	ldrb	r3, [r3, #6]
   857a8:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
			cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[3];
   857ac:	4b4b      	ldr	r3, [pc, #300]	; (858dc <Cl_Dlsis_controller+0x35c>)
   857ae:	79db      	ldrb	r3, [r3, #7]
   857b0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
			cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[4];
   857b4:	4b49      	ldr	r3, [pc, #292]	; (858dc <Cl_Dlsis_controller+0x35c>)
   857b6:	7a1b      	ldrb	r3, [r3, #8]
   857b8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			
			if(Cl_ConsoleRxMsg.data.byte[0] == 1)
   857bc:	4b47      	ldr	r3, [pc, #284]	; (858dc <Cl_Dlsis_controller+0x35c>)
   857be:	791b      	ldrb	r3, [r3, #4]
   857c0:	2b01      	cmp	r3, #1
   857c2:	d104      	bne.n	857ce <Cl_Dlsis_controller+0x24e>
			{
				cl_hep_controller(CL_HEP_EVENT_GO_TO_LEFTEND,0);
   857c4:	2001      	movs	r0, #1
   857c6:	2100      	movs	r1, #0
   857c8:	4b43      	ldr	r3, [pc, #268]	; (858d8 <Cl_Dlsis_controller+0x358>)
   857ca:	4798      	blx	r3
   857cc:	e013      	b.n	857f6 <Cl_Dlsis_controller+0x276>
				
			}
			else if(Cl_ConsoleRxMsg.data.byte[0] == 2)
   857ce:	4b43      	ldr	r3, [pc, #268]	; (858dc <Cl_Dlsis_controller+0x35c>)
   857d0:	791b      	ldrb	r3, [r3, #4]
   857d2:	2b02      	cmp	r3, #2
   857d4:	d104      	bne.n	857e0 <Cl_Dlsis_controller+0x260>
			{
				cl_hep_controller(CL_HEP_EVENT_GO_TO_RIGHTEND,0);
   857d6:	2004      	movs	r0, #4
   857d8:	2100      	movs	r1, #0
   857da:	4b3f      	ldr	r3, [pc, #252]	; (858d8 <Cl_Dlsis_controller+0x358>)
   857dc:	4798      	blx	r3
   857de:	e00a      	b.n	857f6 <Cl_Dlsis_controller+0x276>
			}
			else if(Cl_ConsoleRxMsg.data.byte[0] == 0)
   857e0:	4b3e      	ldr	r3, [pc, #248]	; (858dc <Cl_Dlsis_controller+0x35c>)
   857e2:	791b      	ldrb	r3, [r3, #4]
   857e4:	2b00      	cmp	r3, #0
   857e6:	d106      	bne.n	857f6 <Cl_Dlsis_controller+0x276>
			{
					cl_hep_controller(CL_HEP_EVENT_START_NORMAL_DELIVERY,Treatdata[ID_heprate]);
   857e8:	4b3d      	ldr	r3, [pc, #244]	; (858e0 <Cl_Dlsis_controller+0x360>)
   857ea:	69db      	ldr	r3, [r3, #28]
   857ec:	200a      	movs	r0, #10
   857ee:	4619      	mov	r1, r3
   857f0:	4b39      	ldr	r3, [pc, #228]	; (858d8 <Cl_Dlsis_controller+0x358>)
   857f2:	4798      	blx	r3
			}
			
		}
		
		
		break;
   857f4:	e0ab      	b.n	8594e <Cl_Dlsis_controller+0x3ce>
   857f6:	e0aa      	b.n	8594e <Cl_Dlsis_controller+0x3ce>
		case EVENT_DLSIS_HEP_OFF:
			cl_hep_controller(CL_HEP_EVENT_STOPBOLUS,0);
   857f8:	2009      	movs	r0, #9
   857fa:	2100      	movs	r1, #0
   857fc:	4b36      	ldr	r3, [pc, #216]	; (858d8 <Cl_Dlsis_controller+0x358>)
   857fe:	4798      	blx	r3
		break;
   85800:	e0a5      	b.n	8594e <Cl_Dlsis_controller+0x3ce>
		case EVENT_DLSIS_COMMAND_SET_BLDPMP_ON:
		cl_bp_controller(CL_BP_EVENT_START,0);
   85802:	2002      	movs	r0, #2
   85804:	2100      	movs	r1, #0
   85806:	4b37      	ldr	r3, [pc, #220]	; (858e4 <Cl_Dlsis_controller+0x364>)
   85808:	4798      	blx	r3
		Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true);
   8580a:	2001      	movs	r0, #1
   8580c:	2101      	movs	r1, #1
   8580e:	4b36      	ldr	r3, [pc, #216]	; (858e8 <Cl_Dlsis_controller+0x368>)
   85810:	4798      	blx	r3
   85812:	4603      	mov	r3, r0
   85814:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		break;
   85818:	e099      	b.n	8594e <Cl_Dlsis_controller+0x3ce>
		case EVENT_DLSIS_COMMAND_SET_BLDPMP_OFF:
		cl_bp_controller(CL_BP_EVENT_STOP,0);
   8581a:	2004      	movs	r0, #4
   8581c:	2100      	movs	r1, #0
   8581e:	4b31      	ldr	r3, [pc, #196]	; (858e4 <Cl_Dlsis_controller+0x364>)
   85820:	4798      	blx	r3
		Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,false);
   85822:	2001      	movs	r0, #1
   85824:	2100      	movs	r1, #0
   85826:	4b30      	ldr	r3, [pc, #192]	; (858e8 <Cl_Dlsis_controller+0x368>)
   85828:	4798      	blx	r3
   8582a:	4603      	mov	r3, r0
   8582c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		break;
   85830:	e08d      	b.n	8594e <Cl_Dlsis_controller+0x3ce>
		case EVENT_DLSIS_COMMAND_SET_BLDPUMPRATE:
		if(Cl_ConsoleRxMsg.msgready == true)
   85832:	4b2a      	ldr	r3, [pc, #168]	; (858dc <Cl_Dlsis_controller+0x35c>)
   85834:	7e1b      	ldrb	r3, [r3, #24]
   85836:	2b00      	cmp	r3, #0
   85838:	d019      	beq.n	8586e <Cl_Dlsis_controller+0x2ee>
		{
			
			cl_Datastreamtype cl_temp  ;
			cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   8583a:	4b28      	ldr	r3, [pc, #160]	; (858dc <Cl_Dlsis_controller+0x35c>)
   8583c:	791b      	ldrb	r3, [r3, #4]
   8583e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[1];
   85842:	4b26      	ldr	r3, [pc, #152]	; (858dc <Cl_Dlsis_controller+0x35c>)
   85844:	795b      	ldrb	r3, [r3, #5]
   85846:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[2];
   8584a:	4b24      	ldr	r3, [pc, #144]	; (858dc <Cl_Dlsis_controller+0x35c>)
   8584c:	799b      	ldrb	r3, [r3, #6]
   8584e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
   85852:	4b22      	ldr	r3, [pc, #136]	; (858dc <Cl_Dlsis_controller+0x35c>)
   85854:	79db      	ldrb	r3, [r3, #7]
   85856:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,cl_temp.Twobyte);
   8585a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
   8585c:	2001      	movs	r0, #1
   8585e:	4619      	mov	r1, r3
   85860:	4b20      	ldr	r3, [pc, #128]	; (858e4 <Cl_Dlsis_controller+0x364>)
   85862:	4798      	blx	r3
			Treatdata[ID_bloodratetreat] = cl_temp.Twobyte;
   85864:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
   85866:	461a      	mov	r2, r3
   85868:	4b1d      	ldr	r3, [pc, #116]	; (858e0 <Cl_Dlsis_controller+0x360>)
   8586a:	65da      	str	r2, [r3, #92]	; 0x5c
		}
		break;
   8586c:	e06f      	b.n	8594e <Cl_Dlsis_controller+0x3ce>
   8586e:	e06e      	b.n	8594e <Cl_Dlsis_controller+0x3ce>
		
			case EVT_CONSOLE_COMMAND_SET_BLDPUMPINC_MANUAL:
			
			if(Treatdata[ID_bloodrate] <= 450){
   85870:	4b1b      	ldr	r3, [pc, #108]	; (858e0 <Cl_Dlsis_controller+0x360>)
   85872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   85874:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
   85878:	d828      	bhi.n	858cc <Cl_Dlsis_controller+0x34c>
				
				Treatdata[ID_bloodrate] = Treatdata[ID_bloodrate] + 10;
   8587a:	4b19      	ldr	r3, [pc, #100]	; (858e0 <Cl_Dlsis_controller+0x360>)
   8587c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   8587e:	330a      	adds	r3, #10
   85880:	4a17      	ldr	r2, [pc, #92]	; (858e0 <Cl_Dlsis_controller+0x360>)
   85882:	63d3      	str	r3, [r2, #60]	; 0x3c
				cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,Treatdata[ID_bloodrate]);
   85884:	4b16      	ldr	r3, [pc, #88]	; (858e0 <Cl_Dlsis_controller+0x360>)
   85886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   85888:	2001      	movs	r0, #1
   8588a:	4619      	mov	r1, r3
   8588c:	4b15      	ldr	r3, [pc, #84]	; (858e4 <Cl_Dlsis_controller+0x364>)
   8588e:	4798      	blx	r3
				
				// send blood rate data to console
				
				
				abfdataarray[0] = CON_RX_PARAM_DATA_ABF_RATE;
   85890:	230f      	movs	r3, #15
   85892:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
				abfdata.fourbytedata = Treatdata[ID_bloodrate];
   85896:	4b12      	ldr	r3, [pc, #72]	; (858e0 <Cl_Dlsis_controller+0x360>)
   85898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   8589a:	643b      	str	r3, [r7, #64]	; 0x40
				abfdataarray[1] = abfdata.bytedata[0];
   8589c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   858a0:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
				abfdataarray[2] = abfdata.bytedata[1];
   858a4:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   858a8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
				abfdataarray[3] = abfdata.bytedata[2];
   858ac:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   858b0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
				abfdataarray[4] = abfdata.bytedata[3];
   858b4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   858b8:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
				
				Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&abfdataarray,5);
   858bc:	f107 0338 	add.w	r3, r7, #56	; 0x38
   858c0:	202a      	movs	r0, #42	; 0x2a
   858c2:	4619      	mov	r1, r3
   858c4:	2205      	movs	r2, #5
   858c6:	4b09      	ldr	r3, [pc, #36]	; (858ec <Cl_Dlsis_controller+0x36c>)
   858c8:	4798      	blx	r3
				
			}
			
			cl_dlsis_event == EVENT_NULL_EVENT;
			break;
   858ca:	e040      	b.n	8594e <Cl_Dlsis_controller+0x3ce>
   858cc:	e03f      	b.n	8594e <Cl_Dlsis_controller+0x3ce>
   858ce:	bf00      	nop
   858d0:	00086865 	.word	0x00086865
   858d4:	0008330d 	.word	0x0008330d
   858d8:	00093a0d 	.word	0x00093a0d
   858dc:	200723f0 	.word	0x200723f0
   858e0:	2007265c 	.word	0x2007265c
   858e4:	00093305 	.word	0x00093305
   858e8:	00082e61 	.word	0x00082e61
   858ec:	0009ba51 	.word	0x0009ba51
			
			case EVT_CONSOLE_COMMAND_SET_BLDPUMPDEC_MANUAL:
			
			if(Treatdata[ID_bloodrate] >= 100){
   858f0:	4bbb      	ldr	r3, [pc, #748]	; (85be0 <Cl_Dlsis_controller+0x660>)
   858f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   858f4:	2b63      	cmp	r3, #99	; 0x63
   858f6:	d928      	bls.n	8594a <Cl_Dlsis_controller+0x3ca>
				
				Treatdata[ID_bloodrate] = Treatdata[ID_bloodrate] - 10;
   858f8:	4bb9      	ldr	r3, [pc, #740]	; (85be0 <Cl_Dlsis_controller+0x660>)
   858fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   858fc:	3b0a      	subs	r3, #10
   858fe:	4ab8      	ldr	r2, [pc, #736]	; (85be0 <Cl_Dlsis_controller+0x660>)
   85900:	63d3      	str	r3, [r2, #60]	; 0x3c
				cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,Treatdata[ID_bloodrate]);
   85902:	4bb7      	ldr	r3, [pc, #732]	; (85be0 <Cl_Dlsis_controller+0x660>)
   85904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   85906:	2001      	movs	r0, #1
   85908:	4619      	mov	r1, r3
   8590a:	4bb6      	ldr	r3, [pc, #728]	; (85be4 <Cl_Dlsis_controller+0x664>)
   8590c:	4798      	blx	r3
				
				
				abfdataarray[0] = CON_RX_PARAM_DATA_ABF_RATE;
   8590e:	230f      	movs	r3, #15
   85910:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
				abfdata.fourbytedata = Treatdata[ID_bloodrate];
   85914:	4bb2      	ldr	r3, [pc, #712]	; (85be0 <Cl_Dlsis_controller+0x660>)
   85916:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   85918:	643b      	str	r3, [r7, #64]	; 0x40
				abfdataarray[1] = abfdata.bytedata[0];
   8591a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
   8591e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
				abfdataarray[2] = abfdata.bytedata[1];
   85922:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   85926:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
				abfdataarray[3] = abfdata.bytedata[2];
   8592a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   8592e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
				abfdataarray[4] = abfdata.bytedata[3];
   85932:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   85936:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
				
				Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&abfdataarray,5);
   8593a:	f107 0338 	add.w	r3, r7, #56	; 0x38
   8593e:	202a      	movs	r0, #42	; 0x2a
   85940:	4619      	mov	r1, r3
   85942:	2205      	movs	r2, #5
   85944:	4ba8      	ldr	r3, [pc, #672]	; (85be8 <Cl_Dlsis_controller+0x668>)
   85946:	4798      	blx	r3
			}
			
			cl_dlsis_event == EVENT_NULL_EVENT;
			break;
   85948:	e001      	b.n	8594e <Cl_Dlsis_controller+0x3ce>
   8594a:	e000      	b.n	8594e <Cl_Dlsis_controller+0x3ce>
			
		
		
		default:break;
   8594c:	bf00      	nop
		
	}
	if(cl_dlsis_event == EVENT_DLSIS_TICK_SECOND)
   8594e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   85952:	2b13      	cmp	r3, #19
   85954:	d115      	bne.n	85982 <Cl_Dlsis_controller+0x402>
	{

		//Cl_dlsisretcode =  Cl_AlarmResetAlarm( TEMP3_HIGH_THRESHOLD);
		//Cl_dlsisretcode =  Cl_AlarmResetAlarm( TEMP3_LOW_THRESHOLD);
		//Cl_dlsisretcode =  Cl_AlarmResetAlarm( TEMP2_HIGH_THRESHOLD);
		Cl_dlsisretcode =  Cl_AlarmResetAlarm( FLOW_NO_FLOW );
   85956:	200c      	movs	r0, #12
   85958:	4ba4      	ldr	r3, [pc, #656]	; (85bec <Cl_Dlsis_controller+0x66c>)
   8595a:	4798      	blx	r3
   8595c:	4603      	mov	r3, r0
   8595e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		Cl_dlsisretcode =  Cl_AlarmResetAlarm( FLOW_HIGH_FLOWRATE );
   85962:	200e      	movs	r0, #14
   85964:	4ba1      	ldr	r3, [pc, #644]	; (85bec <Cl_Dlsis_controller+0x66c>)
   85966:	4798      	blx	r3
   85968:	4603      	mov	r3, r0
   8596a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		Cl_dlsisretcode =  Cl_AlarmResetAlarm( FLOW_LOW_FLOWRATE );
   8596e:	200d      	movs	r0, #13
   85970:	4b9e      	ldr	r3, [pc, #632]	; (85bec <Cl_Dlsis_controller+0x66c>)
   85972:	4798      	blx	r3
   85974:	4603      	mov	r3, r0
   85976:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		
		cl_dlsis_state_dummy = cl_dlsis_state;
   8597a:	4b9d      	ldr	r3, [pc, #628]	; (85bf0 <Cl_Dlsis_controller+0x670>)
   8597c:	781a      	ldrb	r2, [r3, #0]
   8597e:	4b9d      	ldr	r3, [pc, #628]	; (85bf4 <Cl_Dlsis_controller+0x674>)
   85980:	701a      	strb	r2, [r3, #0]
	}


	switch(cl_dlsis_state)
   85982:	4b9b      	ldr	r3, [pc, #620]	; (85bf0 <Cl_Dlsis_controller+0x670>)
   85984:	781b      	ldrb	r3, [r3, #0]
   85986:	2b0a      	cmp	r3, #10
   85988:	f200 8760 	bhi.w	8684c <Cl_Dlsis_controller+0x12cc>
   8598c:	a201      	add	r2, pc, #4	; (adr r2, 85994 <Cl_Dlsis_controller+0x414>)
   8598e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   85992:	bf00      	nop
   85994:	000859c1 	.word	0x000859c1
   85998:	0008684d 	.word	0x0008684d
   8599c:	00085c25 	.word	0x00085c25
   859a0:	00085ca3 	.word	0x00085ca3
   859a4:	00085e79 	.word	0x00085e79
   859a8:	00085e55 	.word	0x00085e55
   859ac:	00086559 	.word	0x00086559
   859b0:	00086329 	.word	0x00086329
   859b4:	000862ab 	.word	0x000862ab
   859b8:	000863a9 	.word	0x000863a9
   859bc:	00086445 	.word	0x00086445
	{

		case CL_DLSIS_STATE_INIT:
		break;
		case CL_DLSIS_STATE_IDLE:
		switch (cl_dlsis_event)
   859c0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   859c4:	3b02      	subs	r3, #2
   859c6:	2b14      	cmp	r3, #20
   859c8:	f200 8129 	bhi.w	85c1e <Cl_Dlsis_controller+0x69e>
   859cc:	a201      	add	r2, pc, #4	; (adr r2, 859d4 <Cl_Dlsis_controller+0x454>)
   859ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   859d2:	bf00      	nop
   859d4:	00085a29 	.word	0x00085a29
   859d8:	00085a77 	.word	0x00085a77
   859dc:	00085c1f 	.word	0x00085c1f
   859e0:	00085c0d 	.word	0x00085c0d
   859e4:	00085c1f 	.word	0x00085c1f
   859e8:	00085c1f 	.word	0x00085c1f
   859ec:	00085c1f 	.word	0x00085c1f
   859f0:	00085c1f 	.word	0x00085c1f
   859f4:	00085c1f 	.word	0x00085c1f
   859f8:	00085c1f 	.word	0x00085c1f
   859fc:	00085c1f 	.word	0x00085c1f
   85a00:	00085c1f 	.word	0x00085c1f
   85a04:	00085c1f 	.word	0x00085c1f
   85a08:	00085c1f 	.word	0x00085c1f
   85a0c:	00085c1f 	.word	0x00085c1f
   85a10:	00085c1f 	.word	0x00085c1f
   85a14:	00085c1f 	.word	0x00085c1f
   85a18:	00085c1f 	.word	0x00085c1f
   85a1c:	00085c1f 	.word	0x00085c1f
   85a20:	00085c1f 	.word	0x00085c1f
   85a24:	00085c13 	.word	0x00085c13
		{
			case EVENT_DLSIS_GET_DATA:

				if(Cl_ConsoleRxMsg.msgready == true)
   85a28:	4b73      	ldr	r3, [pc, #460]	; (85bf8 <Cl_Dlsis_controller+0x678>)
   85a2a:	7e1b      	ldrb	r3, [r3, #24]
   85a2c:	2b00      	cmp	r3, #0
   85a2e:	d021      	beq.n	85a74 <Cl_Dlsis_controller+0x4f4>
				{
					switch(Cl_ConsoleRxMsg.data.byte[0])
   85a30:	4b71      	ldr	r3, [pc, #452]	; (85bf8 <Cl_Dlsis_controller+0x678>)
   85a32:	791b      	ldrb	r3, [r3, #4]
   85a34:	2b04      	cmp	r3, #4
   85a36:	d000      	beq.n	85a3a <Cl_Dlsis_controller+0x4ba>
						Cl_dlsisretcode = Cl_SendDatatoconsole(command,&dataarray,2);
						break;

							
						default:
						break;
   85a38:	e01c      	b.n	85a74 <Cl_Dlsis_controller+0x4f4>
				if(Cl_ConsoleRxMsg.msgready == true)
				{
					switch(Cl_ConsoleRxMsg.data.byte[0])
					{
						case	CON_RX_PARAM_DATA_DIALYSIS_STATUS:
						command = CON_TX_COMMAND_SYSDATA;
   85a3a:	2316      	movs	r3, #22
   85a3c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
						dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
   85a40:	2304      	movs	r3, #4
   85a42:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
						Cl_dlsisretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
   85a46:	f107 0344 	add.w	r3, r7, #68	; 0x44
   85a4a:	3301      	adds	r3, #1
   85a4c:	2004      	movs	r0, #4
   85a4e:	4619      	mov	r1, r3
   85a50:	4b6a      	ldr	r3, [pc, #424]	; (85bfc <Cl_Dlsis_controller+0x67c>)
   85a52:	4798      	blx	r3
   85a54:	4603      	mov	r3, r0
   85a56:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						Cl_dlsisretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   85a5a:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
   85a5e:	f107 0344 	add.w	r3, r7, #68	; 0x44
   85a62:	4610      	mov	r0, r2
   85a64:	4619      	mov	r1, r3
   85a66:	2202      	movs	r2, #2
   85a68:	4b5f      	ldr	r3, [pc, #380]	; (85be8 <Cl_Dlsis_controller+0x668>)
   85a6a:	4798      	blx	r3
   85a6c:	4603      	mov	r3, r0
   85a6e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						break;
   85a72:	bf00      	nop
							
						default:
						break;
					}
				}
			break;
   85a74:	e0d4      	b.n	85c20 <Cl_Dlsis_controller+0x6a0>
			case EVENT_DLSIS_SET_DATA:
			if(Cl_ConsoleRxMsg.msgready == true)
   85a76:	4b60      	ldr	r3, [pc, #384]	; (85bf8 <Cl_Dlsis_controller+0x678>)
   85a78:	7e1b      	ldrb	r3, [r3, #24]
   85a7a:	2b00      	cmp	r3, #0
   85a7c:	f000 80af 	beq.w	85bde <Cl_Dlsis_controller+0x65e>
			{
				cl_Datastreamtype cl_temp  ;
				cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[1];
   85a80:	4b5d      	ldr	r3, [pc, #372]	; (85bf8 <Cl_Dlsis_controller+0x678>)
   85a82:	795b      	ldrb	r3, [r3, #5]
   85a84:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
				cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[2];
   85a88:	4b5b      	ldr	r3, [pc, #364]	; (85bf8 <Cl_Dlsis_controller+0x678>)
   85a8a:	799b      	ldrb	r3, [r3, #6]
   85a8c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
				cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[3];
   85a90:	4b59      	ldr	r3, [pc, #356]	; (85bf8 <Cl_Dlsis_controller+0x678>)
   85a92:	79db      	ldrb	r3, [r3, #7]
   85a94:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
				cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[4];
   85a98:	4b57      	ldr	r3, [pc, #348]	; (85bf8 <Cl_Dlsis_controller+0x678>)
   85a9a:	7a1b      	ldrb	r3, [r3, #8]
   85a9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				
				switch(Cl_ConsoleRxMsg.data.byte[0])
   85aa0:	4b55      	ldr	r3, [pc, #340]	; (85bf8 <Cl_Dlsis_controller+0x678>)
   85aa2:	791b      	ldrb	r3, [r3, #4]
   85aa4:	3b05      	subs	r3, #5
   85aa6:	2b20      	cmp	r3, #32
   85aa8:	f200 8098 	bhi.w	85bdc <Cl_Dlsis_controller+0x65c>
   85aac:	a201      	add	r2, pc, #4	; (adr r2, 85ab4 <Cl_Dlsis_controller+0x534>)
   85aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   85ab2:	bf00      	nop
   85ab4:	00085bdd 	.word	0x00085bdd
   85ab8:	00085bdd 	.word	0x00085bdd
   85abc:	00085bdd 	.word	0x00085bdd
   85ac0:	00085bdd 	.word	0x00085bdd
   85ac4:	00085bdd 	.word	0x00085bdd
   85ac8:	00085bdd 	.word	0x00085bdd
   85acc:	00085bdd 	.word	0x00085bdd
   85ad0:	00085bdd 	.word	0x00085bdd
   85ad4:	00085bdd 	.word	0x00085bdd
   85ad8:	00085bdd 	.word	0x00085bdd
   85adc:	00085bdd 	.word	0x00085bdd
   85ae0:	00085bdd 	.word	0x00085bdd
   85ae4:	00085bdd 	.word	0x00085bdd
   85ae8:	00085bdd 	.word	0x00085bdd
   85aec:	00085bdd 	.word	0x00085bdd
   85af0:	00085bdd 	.word	0x00085bdd
   85af4:	00085bdd 	.word	0x00085bdd
   85af8:	00085bdd 	.word	0x00085bdd
   85afc:	00085bdd 	.word	0x00085bdd
   85b00:	00085b39 	.word	0x00085b39
   85b04:	00085b51 	.word	0x00085b51
   85b08:	00085b69 	.word	0x00085b69
   85b0c:	00085b79 	.word	0x00085b79
   85b10:	00085b89 	.word	0x00085b89
   85b14:	00085b99 	.word	0x00085b99
   85b18:	00085bdd 	.word	0x00085bdd
   85b1c:	00085bdd 	.word	0x00085bdd
   85b20:	00085bdd 	.word	0x00085bdd
   85b24:	00085bdd 	.word	0x00085bdd
   85b28:	00085ba9 	.word	0x00085ba9
   85b2c:	00085bb3 	.word	0x00085bb3
   85b30:	00085bbd 	.word	0x00085bbd
   85b34:	00085bcd 	.word	0x00085bcd
					case ID_bloodratereturn:
					break;
					case ID_bloodratetreat:
					break;
					case ID_tempulimit:
					Cl_alarmThresholdTable.temp3_high_threshold =  (cl_temp.word)/10;
   85b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
   85b3a:	4a31      	ldr	r2, [pc, #196]	; (85c00 <Cl_Dlsis_controller+0x680>)
   85b3c:	fba2 2303 	umull	r2, r3, r2, r3
   85b40:	08da      	lsrs	r2, r3, #3
   85b42:	4b30      	ldr	r3, [pc, #192]	; (85c04 <Cl_Dlsis_controller+0x684>)
   85b44:	4610      	mov	r0, r2
   85b46:	4798      	blx	r3
   85b48:	4602      	mov	r2, r0
   85b4a:	4b2f      	ldr	r3, [pc, #188]	; (85c08 <Cl_Dlsis_controller+0x688>)
   85b4c:	649a      	str	r2, [r3, #72]	; 0x48
					break;
   85b4e:	e046      	b.n	85bde <Cl_Dlsis_controller+0x65e>
					case ID_templlimit:
					Cl_alarmThresholdTable.temp3_low_threshold =  (cl_temp.word)/10;
   85b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
   85b52:	4a2b      	ldr	r2, [pc, #172]	; (85c00 <Cl_Dlsis_controller+0x680>)
   85b54:	fba2 2303 	umull	r2, r3, r2, r3
   85b58:	08da      	lsrs	r2, r3, #3
   85b5a:	4b2a      	ldr	r3, [pc, #168]	; (85c04 <Cl_Dlsis_controller+0x684>)
   85b5c:	4610      	mov	r0, r2
   85b5e:	4798      	blx	r3
   85b60:	4602      	mov	r2, r0
   85b62:	4b29      	ldr	r3, [pc, #164]	; (85c08 <Cl_Dlsis_controller+0x688>)
   85b64:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
   85b66:	e03a      	b.n	85bde <Cl_Dlsis_controller+0x65e>
					case ID_tmpllimit:
					Cl_alarmThresholdTable.tmp_low_threshold =  cl_temp.word;
   85b68:	6aba      	ldr	r2, [r7, #40]	; 0x28
   85b6a:	4b26      	ldr	r3, [pc, #152]	; (85c04 <Cl_Dlsis_controller+0x684>)
   85b6c:	4610      	mov	r0, r2
   85b6e:	4798      	blx	r3
   85b70:	4602      	mov	r2, r0
   85b72:	4b25      	ldr	r3, [pc, #148]	; (85c08 <Cl_Dlsis_controller+0x688>)
   85b74:	635a      	str	r2, [r3, #52]	; 0x34
					break;
   85b76:	e032      	b.n	85bde <Cl_Dlsis_controller+0x65e>
					case ID_tmpulimit:
					Cl_alarmThresholdTable.tmp_high_threshold =  cl_temp.word;
   85b78:	6aba      	ldr	r2, [r7, #40]	; 0x28
   85b7a:	4b22      	ldr	r3, [pc, #136]	; (85c04 <Cl_Dlsis_controller+0x684>)
   85b7c:	4610      	mov	r0, r2
   85b7e:	4798      	blx	r3
   85b80:	4602      	mov	r2, r0
   85b82:	4b21      	ldr	r3, [pc, #132]	; (85c08 <Cl_Dlsis_controller+0x688>)
   85b84:	631a      	str	r2, [r3, #48]	; 0x30
					break;
   85b86:	e02a      	b.n	85bde <Cl_Dlsis_controller+0x65e>
					case ID_vptllimit:
					Cl_alarmThresholdTable.vpt_low_threshold =  cl_temp.word;
   85b88:	6aba      	ldr	r2, [r7, #40]	; 0x28
   85b8a:	4b1e      	ldr	r3, [pc, #120]	; (85c04 <Cl_Dlsis_controller+0x684>)
   85b8c:	4610      	mov	r0, r2
   85b8e:	4798      	blx	r3
   85b90:	4602      	mov	r2, r0
   85b92:	4b1d      	ldr	r3, [pc, #116]	; (85c08 <Cl_Dlsis_controller+0x688>)
   85b94:	615a      	str	r2, [r3, #20]
					break;
   85b96:	e022      	b.n	85bde <Cl_Dlsis_controller+0x65e>
					case ID_vptulimit:
					Cl_alarmThresholdTable.vpt_high_threshold =  cl_temp.word;
   85b98:	6aba      	ldr	r2, [r7, #40]	; 0x28
   85b9a:	4b1a      	ldr	r3, [pc, #104]	; (85c04 <Cl_Dlsis_controller+0x684>)
   85b9c:	4610      	mov	r0, r2
   85b9e:	4798      	blx	r3
   85ba0:	4602      	mov	r2, r0
   85ba2:	4b19      	ldr	r3, [pc, #100]	; (85c08 <Cl_Dlsis_controller+0x688>)
   85ba4:	611a      	str	r2, [r3, #16]
					break;
   85ba6:	e01a      	b.n	85bde <Cl_Dlsis_controller+0x65e>
					case ID_dflowllimit:
					break;
					case ID_dflowulimit:
					break;
					case ID_condllimit:
					Cl_alarmThresholdTable.cond_low_threshold =  cl_temp.word;
   85ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   85baa:	b29a      	uxth	r2, r3
   85bac:	4b16      	ldr	r3, [pc, #88]	; (85c08 <Cl_Dlsis_controller+0x688>)
   85bae:	801a      	strh	r2, [r3, #0]
					break;
   85bb0:	e015      	b.n	85bde <Cl_Dlsis_controller+0x65e>
					case ID_condulimit:
					Cl_alarmThresholdTable.cond_high_threshold =  cl_temp.word;
   85bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   85bb4:	b29a      	uxth	r2, r3
   85bb6:	4b14      	ldr	r3, [pc, #80]	; (85c08 <Cl_Dlsis_controller+0x688>)
   85bb8:	805a      	strh	r2, [r3, #2]
					break;
   85bba:	e010      	b.n	85bde <Cl_Dlsis_controller+0x65e>
					case ID_aptllimit:
					Cl_alarmThresholdTable.apt_low_threshold =  cl_temp.word;
   85bbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
   85bbe:	4b11      	ldr	r3, [pc, #68]	; (85c04 <Cl_Dlsis_controller+0x684>)
   85bc0:	4610      	mov	r0, r2
   85bc2:	4798      	blx	r3
   85bc4:	4602      	mov	r2, r0
   85bc6:	4b10      	ldr	r3, [pc, #64]	; (85c08 <Cl_Dlsis_controller+0x688>)
   85bc8:	60da      	str	r2, [r3, #12]
					break;
   85bca:	e008      	b.n	85bde <Cl_Dlsis_controller+0x65e>
					case ID_aptulimit:
					Cl_alarmThresholdTable.apt_high_threshold =  cl_temp.word;
   85bcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
   85bce:	4b0d      	ldr	r3, [pc, #52]	; (85c04 <Cl_Dlsis_controller+0x684>)
   85bd0:	4610      	mov	r0, r2
   85bd2:	4798      	blx	r3
   85bd4:	4602      	mov	r2, r0
   85bd6:	4b0c      	ldr	r3, [pc, #48]	; (85c08 <Cl_Dlsis_controller+0x688>)
   85bd8:	609a      	str	r2, [r3, #8]
					break;
   85bda:	e000      	b.n	85bde <Cl_Dlsis_controller+0x65e>

					default:break;
   85bdc:	bf00      	nop
				}
			}
			
			
			break;
   85bde:	e01f      	b.n	85c20 <Cl_Dlsis_controller+0x6a0>
   85be0:	2007265c 	.word	0x2007265c
   85be4:	00093305 	.word	0x00093305
   85be8:	0009ba51 	.word	0x0009ba51
   85bec:	00082f51 	.word	0x00082f51
   85bf0:	20071934 	.word	0x20071934
   85bf4:	20072656 	.word	0x20072656
   85bf8:	200723f0 	.word	0x200723f0
   85bfc:	0009a545 	.word	0x0009a545
   85c00:	cccccccd 	.word	0xcccccccd
   85c04:	000a68a9 	.word	0x000a68a9
   85c08:	20072104 	.word	0x20072104
			case EVENT_DLSIS_START_DIALYSIS:
					Cl_Dlsis_StartDialysis();
   85c0c:	4bc0      	ldr	r3, [pc, #768]	; (85f10 <Cl_Dlsis_controller+0x990>)
   85c0e:	4798      	blx	r3
			break;
   85c10:	e006      	b.n	85c20 <Cl_Dlsis_controller+0x6a0>
			case EVENT_DLSIS_ALARM:
					Cl_dlsisretcode = Cl_Dlsis_ProcessAlarms();
   85c12:	4bc0      	ldr	r3, [pc, #768]	; (85f14 <Cl_Dlsis_controller+0x994>)
   85c14:	4798      	blx	r3
   85c16:	4603      	mov	r3, r0
   85c18:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			break;
   85c1c:	e000      	b.n	85c20 <Cl_Dlsis_controller+0x6a0>
			default:
			break;
   85c1e:	bf00      	nop
		}
		break;
   85c20:	f000 be17 	b.w	86852 <Cl_Dlsis_controller+0x12d2>
		case CL_DLSIS_STATE_WAIT_FOR_TEMP_COND_STABILITY:
		
			switch(cl_dlsis_event)
   85c24:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   85c28:	2b12      	cmp	r3, #18
   85c2a:	d000      	beq.n	85c2e <Cl_Dlsis_controller+0x6ae>
						
					}
				break;
				
				
				default:break;
   85c2c:	e037      	b.n	85c9e <Cl_Dlsis_controller+0x71e>
			{
				
				case EVENT_DLSIS_TICK_500MS:
				
					
					Cl_Heater_GetHeaterStableStatus(&heater_stable_status);
   85c2e:	48ba      	ldr	r0, [pc, #744]	; (85f18 <Cl_Dlsis_controller+0x998>)
   85c30:	4bba      	ldr	r3, [pc, #744]	; (85f1c <Cl_Dlsis_controller+0x99c>)
   85c32:	4798      	blx	r3
					Cl_Uint16Type temp = 0;
   85c34:	2300      	movs	r3, #0
   85c36:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
					//Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_STATUS , &temp);	
				//	if ((heater_stable_status) &&  (temp < 14) && (temp > 13.3))
					if( (temp == 0))
   85c3a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
   85c3e:	2b00      	cmp	r3, #0
   85c40:	d106      	bne.n	85c50 <Cl_Dlsis_controller+0x6d0>
					{
						
					//	sv_cntrl_disable_bypass();
				bypass_flag = 0;
   85c42:	4bb7      	ldr	r3, [pc, #732]	; (85f20 <Cl_Dlsis_controller+0x9a0>)
   85c44:	2200      	movs	r2, #0
   85c46:	701a      	strb	r2, [r3, #0]
				cl_dlsis_state = CL_DLSIS_STATE_WAIT_FOR_BLOOD_DETECT;
   85c48:	4bb6      	ldr	r3, [pc, #728]	; (85f24 <Cl_Dlsis_controller+0x9a4>)
   85c4a:	2203      	movs	r2, #3
   85c4c:	701a      	strb	r2, [r3, #0]
						 Cl_dlsisretcode = Cl_SendDatatoconsole(command,&data,3);
						sv_cntrl_enable_bypass();
						cl_uf_controller(CL_UF_EVENT_STOP,0);
						
					}
				break;
   85c4e:	e025      	b.n	85c9c <Cl_Dlsis_controller+0x71c>
				bypass_flag = 0;
				cl_dlsis_state = CL_DLSIS_STATE_WAIT_FOR_BLOOD_DETECT;
				
					}
					else{
						Cl_Uint8Type data[3] ={0, 0};
   85c50:	2300      	movs	r3, #0
   85c52:	84bb      	strh	r3, [r7, #36]	; 0x24
   85c54:	2300      	movs	r3, #0
   85c56:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
						data[0] = (Cl_Uint8Type)1;
   85c5a:	2301      	movs	r3, #1
   85c5c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
						data[1] = (Cl_Uint8Type) CL_ALARM_TRIGGERED;
   85c60:	2301      	movs	r3, #1
   85c62:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
						data[2] = (Cl_Uint8Type)CRITICAL;
   85c66:	2302      	movs	r3, #2
   85c68:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
						command = CON_TX_COMMAND_ALERT;
   85c6c:	234f      	movs	r3, #79	; 0x4f
   85c6e:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
						 cl_wait(10);
   85c72:	200a      	movs	r0, #10
   85c74:	4bac      	ldr	r3, [pc, #688]	; (85f28 <Cl_Dlsis_controller+0x9a8>)
   85c76:	4798      	blx	r3
						 Cl_dlsisretcode = Cl_SendDatatoconsole(command,&data,3);
   85c78:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
   85c7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
   85c80:	4610      	mov	r0, r2
   85c82:	4619      	mov	r1, r3
   85c84:	2203      	movs	r2, #3
   85c86:	4ba9      	ldr	r3, [pc, #676]	; (85f2c <Cl_Dlsis_controller+0x9ac>)
   85c88:	4798      	blx	r3
   85c8a:	4603      	mov	r3, r0
   85c8c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						sv_cntrl_enable_bypass();
   85c90:	4ba7      	ldr	r3, [pc, #668]	; (85f30 <Cl_Dlsis_controller+0x9b0>)
   85c92:	4798      	blx	r3
						cl_uf_controller(CL_UF_EVENT_STOP,0);
   85c94:	2004      	movs	r0, #4
   85c96:	2100      	movs	r1, #0
   85c98:	4ba6      	ldr	r3, [pc, #664]	; (85f34 <Cl_Dlsis_controller+0x9b4>)
   85c9a:	4798      	blx	r3
						
					}
				break;
   85c9c:	bf00      	nop
				
				
				default:break;
			}

		break;
   85c9e:	f000 bdd8 	b.w	86852 <Cl_Dlsis_controller+0x12d2>
		case CL_DLSIS_STATE_WAIT_FOR_BLOOD_DETECT:
		
		switch(cl_dlsis_event)
   85ca2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   85ca6:	2b12      	cmp	r3, #18
   85ca8:	d000      	beq.n	85cac <Cl_Dlsis_controller+0x72c>
						
					}
					
					}
			break;
			default:break;
   85caa:	e0d1      	b.n	85e50 <Cl_Dlsis_controller+0x8d0>
		switch(cl_dlsis_event)
		{
			
			case EVENT_DLSIS_TICK_500MS:
					{
						Cl_Uint16Type temp = 0;
   85cac:	2300      	movs	r3, #0
   85cae:	847b      	strh	r3, [r7, #34]	; 0x22
					
					Cl_SysStat_GetSensor_Status_Query(SENSOR_BDSTATUS , &temp);
   85cb0:	f107 0322 	add.w	r3, r7, #34	; 0x22
   85cb4:	200a      	movs	r0, #10
   85cb6:	4619      	mov	r1, r3
   85cb8:	4b9f      	ldr	r3, [pc, #636]	; (85f38 <Cl_Dlsis_controller+0x9b8>)
   85cba:	4798      	blx	r3
					if( temp == 0)  // need to change as per the blood detector status
   85cbc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
   85cbe:	2b00      	cmp	r3, #0
   85cc0:	f040 80bf 	bne.w	85e42 <Cl_Dlsis_controller+0x8c2>
					{
						
						Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"BLOOD_DL",8);
   85cc4:	2018      	movs	r0, #24
   85cc6:	499d      	ldr	r1, [pc, #628]	; (85f3c <Cl_Dlsis_controller+0x9bc>)
   85cc8:	2208      	movs	r2, #8
   85cca:	4b98      	ldr	r3, [pc, #608]	; (85f2c <Cl_Dlsis_controller+0x9ac>)
   85ccc:	4798      	blx	r3

         					Cl_Uint32Type temp1 = Treatdata[ID_heprate];
   85cce:	4b9c      	ldr	r3, [pc, #624]	; (85f40 <Cl_Dlsis_controller+0x9c0>)
   85cd0:	69db      	ldr	r3, [r3, #28]
   85cd2:	653b      	str	r3, [r7, #80]	; 0x50
							cl_hep_controller(CL_HEP_EVENT_START_NORMAL_DELIVERY,temp1);
   85cd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   85cd6:	200a      	movs	r0, #10
   85cd8:	4619      	mov	r1, r3
   85cda:	4b9a      	ldr	r3, [pc, #616]	; (85f44 <Cl_Dlsis_controller+0x9c4>)
   85cdc:	4798      	blx	r3
						
						sv_cntrl_disable_bypass();
   85cde:	4b9a      	ldr	r3, [pc, #616]	; (85f48 <Cl_Dlsis_controller+0x9c8>)
   85ce0:	4798      	blx	r3
					//	Cl_Uint32Type temp = Treatdata[ID_ufgoal];
					//	Cl_Uint32Type temptime = Treatdata[ID_treattime]; // added to get the dialysis duration
			
						cl_uf_controller(CL_UF_EVENT_START,0);
   85ce2:	2002      	movs	r0, #2
   85ce4:	2100      	movs	r1, #0
   85ce6:	4b93      	ldr	r3, [pc, #588]	; (85f34 <Cl_Dlsis_controller+0x9b4>)
   85ce8:	4798      	blx	r3
						cl_wait(600);
						cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,3000);
						cl_wait(800);
						cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,2500);*/
			
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true );
   85cea:	2001      	movs	r0, #1
   85cec:	2101      	movs	r1, #1
   85cee:	4b97      	ldr	r3, [pc, #604]	; (85f4c <Cl_Dlsis_controller+0x9cc>)
   85cf0:	4798      	blx	r3
   85cf2:	4603      	mov	r3, r0
   85cf4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms(APTSTATUS_HIGH,true );
   85cf8:	2024      	movs	r0, #36	; 0x24
   85cfa:	2101      	movs	r1, #1
   85cfc:	4b93      	ldr	r3, [pc, #588]	; (85f4c <Cl_Dlsis_controller+0x9cc>)
   85cfe:	4798      	blx	r3
   85d00:	4603      	mov	r3, r0
   85d02:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms(APTSTATUS_LOW,true );
   85d06:	2023      	movs	r0, #35	; 0x23
   85d08:	2101      	movs	r1, #1
   85d0a:	4b90      	ldr	r3, [pc, #576]	; (85f4c <Cl_Dlsis_controller+0x9cc>)
   85d0c:	4798      	blx	r3
   85d0e:	4603      	mov	r3, r0
   85d10:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms(VPTSTATUS_HIGH,true );
   85d14:	2026      	movs	r0, #38	; 0x26
   85d16:	2101      	movs	r1, #1
   85d18:	4b8c      	ldr	r3, [pc, #560]	; (85f4c <Cl_Dlsis_controller+0x9cc>)
   85d1a:	4798      	blx	r3
   85d1c:	4603      	mov	r3, r0
   85d1e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms(VPTSTATUS_LOW,true );
   85d22:	2025      	movs	r0, #37	; 0x25
   85d24:	2101      	movs	r1, #1
   85d26:	4b89      	ldr	r3, [pc, #548]	; (85f4c <Cl_Dlsis_controller+0x9cc>)
   85d28:	4798      	blx	r3
   85d2a:	4603      	mov	r3, r0
   85d2c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS1_HIGH_THRESHOLD,true );
   85d30:	2015      	movs	r0, #21
   85d32:	2101      	movs	r1, #1
   85d34:	4b85      	ldr	r3, [pc, #532]	; (85f4c <Cl_Dlsis_controller+0x9cc>)
   85d36:	4798      	blx	r3
   85d38:	4603      	mov	r3, r0
   85d3a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS1_LOW_THRESHOLD,true );
   85d3e:	2016      	movs	r0, #22
   85d40:	2101      	movs	r1, #1
   85d42:	4b82      	ldr	r3, [pc, #520]	; (85f4c <Cl_Dlsis_controller+0x9cc>)
   85d44:	4798      	blx	r3
   85d46:	4603      	mov	r3, r0
   85d48:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS2_HIGH_THRESHOLD,true );
   85d4c:	2017      	movs	r0, #23
   85d4e:	2101      	movs	r1, #1
   85d50:	4b7e      	ldr	r3, [pc, #504]	; (85f4c <Cl_Dlsis_controller+0x9cc>)
   85d52:	4798      	blx	r3
   85d54:	4603      	mov	r3, r0
   85d56:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS2_LOW_THRESHOLD,true );
   85d5a:	2018      	movs	r0, #24
   85d5c:	2101      	movs	r1, #1
   85d5e:	4b7b      	ldr	r3, [pc, #492]	; (85f4c <Cl_Dlsis_controller+0x9cc>)
   85d60:	4798      	blx	r3
   85d62:	4603      	mov	r3, r0
   85d64:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS3_HIGH_THRESHOLD,true );
   85d68:	2027      	movs	r0, #39	; 0x27
   85d6a:	2101      	movs	r1, #1
   85d6c:	4b77      	ldr	r3, [pc, #476]	; (85f4c <Cl_Dlsis_controller+0x9cc>)
   85d6e:	4798      	blx	r3
   85d70:	4603      	mov	r3, r0
   85d72:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS3_LOW_THRESHOLD,true );
   85d76:	2028      	movs	r0, #40	; 0x28
   85d78:	2101      	movs	r1, #1
   85d7a:	4b74      	ldr	r3, [pc, #464]	; (85f4c <Cl_Dlsis_controller+0x9cc>)
   85d7c:	4798      	blx	r3
   85d7e:	4603      	mov	r3, r0
   85d80:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			//	 Cl_dlsisretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON,false );
			//	 Cl_dlsisretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_ON_TO_OFF ,false);
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER1STATUS_CLOSED,true );
   85d84:	2005      	movs	r0, #5
   85d86:	2101      	movs	r1, #1
   85d88:	4b70      	ldr	r3, [pc, #448]	; (85f4c <Cl_Dlsis_controller+0x9cc>)
   85d8a:	4798      	blx	r3
   85d8c:	4603      	mov	r3, r0
   85d8e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER2STATUS_CLOSED,true );
   85d92:	2006      	movs	r0, #6
   85d94:	2101      	movs	r1, #1
   85d96:	4b6d      	ldr	r3, [pc, #436]	; (85f4c <Cl_Dlsis_controller+0x9cc>)
   85d98:	4798      	blx	r3
   85d9a:	4603      	mov	r3, r0
   85d9c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER1STATUS_OPEN,false );
   85da0:	2003      	movs	r0, #3
   85da2:	2100      	movs	r1, #0
   85da4:	4b69      	ldr	r3, [pc, #420]	; (85f4c <Cl_Dlsis_controller+0x9cc>)
   85da6:	4798      	blx	r3
   85da8:	4603      	mov	r3, r0
   85daa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER2STATUS_OPEN,false );
   85dae:	2004      	movs	r0, #4
   85db0:	2100      	movs	r1, #0
   85db2:	4b66      	ldr	r3, [pc, #408]	; (85f4c <Cl_Dlsis_controller+0x9cc>)
   85db4:	4798      	blx	r3
   85db6:	4603      	mov	r3, r0
   85db8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_STATUS_LOW,false );
   85dbc:	2007      	movs	r0, #7
   85dbe:	2100      	movs	r1, #0
   85dc0:	4b62      	ldr	r3, [pc, #392]	; (85f4c <Cl_Dlsis_controller+0x9cc>)
   85dc2:	4798      	blx	r3
   85dc4:	4603      	mov	r3, r0
   85dc6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_STATUS_HIGH,false );
   85dca:	2008      	movs	r0, #8
   85dcc:	2100      	movs	r1, #0
   85dce:	4b5f      	ldr	r3, [pc, #380]	; (85f4c <Cl_Dlsis_controller+0x9cc>)
   85dd0:	4798      	blx	r3
   85dd2:	4603      	mov	r3, r0
   85dd4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			//Cl_dlsisretcode =  Cl_AlarmActivateAlarms( ABD_EVENT,true );
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms(ACID_IN_OPEN,false);
   85dd8:	2029      	movs	r0, #41	; 0x29
   85dda:	2100      	movs	r1, #0
   85ddc:	4b5b      	ldr	r3, [pc, #364]	; (85f4c <Cl_Dlsis_controller+0x9cc>)
   85dde:	4798      	blx	r3
   85de0:	4603      	mov	r3, r0
   85de2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BICARB_IN_OPEN,false );
   85de6:	202b      	movs	r0, #43	; 0x2b
   85de8:	2100      	movs	r1, #0
   85dea:	4b58      	ldr	r3, [pc, #352]	; (85f4c <Cl_Dlsis_controller+0x9cc>)
   85dec:	4798      	blx	r3
   85dee:	4603      	mov	r3, r0
   85df0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms(ACID_IN_CLOSED,true);
   85df4:	202a      	movs	r0, #42	; 0x2a
   85df6:	2101      	movs	r1, #1
   85df8:	4b54      	ldr	r3, [pc, #336]	; (85f4c <Cl_Dlsis_controller+0x9cc>)
   85dfa:	4798      	blx	r3
   85dfc:	4603      	mov	r3, r0
   85dfe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BICARB_IN_CLOSED,true );
   85e02:	202c      	movs	r0, #44	; 0x2c
   85e04:	2101      	movs	r1, #1
   85e06:	4b51      	ldr	r3, [pc, #324]	; (85f4c <Cl_Dlsis_controller+0x9cc>)
   85e08:	4798      	blx	r3
   85e0a:	4603      	mov	r3, r0
   85e0c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms( BD_EVENT,false );
   85e10:	2021      	movs	r0, #33	; 0x21
   85e12:	2100      	movs	r1, #0
   85e14:	4b4d      	ldr	r3, [pc, #308]	; (85f4c <Cl_Dlsis_controller+0x9cc>)
   85e16:	4798      	blx	r3
   85e18:	4603      	mov	r3, r0
   85e1a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			//Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BLD_EVENT,true );
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP3_HIGH_THRESHOLD,true );
   85e1e:	2013      	movs	r0, #19
   85e20:	2101      	movs	r1, #1
   85e22:	4b4a      	ldr	r3, [pc, #296]	; (85f4c <Cl_Dlsis_controller+0x9cc>)
   85e24:	4798      	blx	r3
   85e26:	4603      	mov	r3, r0
   85e28:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP3_LOW_THRESHOLD,true );
   85e2c:	2014      	movs	r0, #20
   85e2e:	2101      	movs	r1, #1
   85e30:	4b46      	ldr	r3, [pc, #280]	; (85f4c <Cl_Dlsis_controller+0x9cc>)
   85e32:	4798      	blx	r3
   85e34:	4603      	mov	r3, r0
   85e36:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			
			
						cl_dlsis_state =CL_DLSIS_STATE_DIALYSIS; // added 
   85e3a:	4b3a      	ldr	r3, [pc, #232]	; (85f24 <Cl_Dlsis_controller+0x9a4>)
   85e3c:	2204      	movs	r2, #4
   85e3e:	701a      	strb	r2, [r3, #0]
						cl_uf_controller(CL_UF_EVENT_STOP,0);
						
					}
					
					}
			break;
   85e40:	e005      	b.n	85e4e <Cl_Dlsis_controller+0x8ce>
						cl_dlsis_state =CL_DLSIS_STATE_DIALYSIS; // added 
						//cl_dlsis_state = CL_DLSIS_STATE_UF_ACTIVATION; // commented as uf tick second event is under event dialysis tick seconds
					}
					else{
						
						sv_cntrl_enable_bypass();
   85e42:	4b3b      	ldr	r3, [pc, #236]	; (85f30 <Cl_Dlsis_controller+0x9b0>)
   85e44:	4798      	blx	r3
						
						cl_uf_controller(CL_UF_EVENT_STOP,0);
   85e46:	2004      	movs	r0, #4
   85e48:	2100      	movs	r1, #0
   85e4a:	4b3a      	ldr	r3, [pc, #232]	; (85f34 <Cl_Dlsis_controller+0x9b4>)
   85e4c:	4798      	blx	r3
						
					}
					
					}
			break;
   85e4e:	bf00      	nop
			default:break;
		}
		break;
   85e50:	f000 bcff 	b.w	86852 <Cl_Dlsis_controller+0x12d2>
		case CL_DLSIS_STATE_UF_ACTIVATION:
		switch (cl_dlsis_event)
   85e54:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   85e58:	2b13      	cmp	r3, #19
   85e5a:	d000      	beq.n	85e5e <Cl_Dlsis_controller+0x8de>
			case EVENT_DLSIS_TICK_SECOND:
			Cl_Dlsis_ResetAlertsforReassertion();
			cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,2500);
				cl_dlsis_state =CL_DLSIS_STATE_DIALYSIS;
			break;
			default:break;
   85e5c:	e00a      	b.n	85e74 <Cl_Dlsis_controller+0x8f4>
		case CL_DLSIS_STATE_UF_ACTIVATION:
		switch (cl_dlsis_event)
		{
			
			case EVENT_DLSIS_TICK_SECOND:
			Cl_Dlsis_ResetAlertsforReassertion();
   85e5e:	4b3c      	ldr	r3, [pc, #240]	; (85f50 <Cl_Dlsis_controller+0x9d0>)
   85e60:	4798      	blx	r3
			cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,2500);
   85e62:	2001      	movs	r0, #1
   85e64:	f640 11c4 	movw	r1, #2500	; 0x9c4
   85e68:	4b32      	ldr	r3, [pc, #200]	; (85f34 <Cl_Dlsis_controller+0x9b4>)
   85e6a:	4798      	blx	r3
				cl_dlsis_state =CL_DLSIS_STATE_DIALYSIS;
   85e6c:	4b2d      	ldr	r3, [pc, #180]	; (85f24 <Cl_Dlsis_controller+0x9a4>)
   85e6e:	2204      	movs	r2, #4
   85e70:	701a      	strb	r2, [r3, #0]
			break;
   85e72:	bf00      	nop
			default:break;
		}
		
		break;
   85e74:	f000 bced 	b.w	86852 <Cl_Dlsis_controller+0x12d2>
		
		case CL_DLSIS_STATE_DIALYSIS:
		switch (cl_dlsis_event)
   85e78:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   85e7c:	3b02      	subs	r3, #2
   85e7e:	2b1d      	cmp	r3, #29
   85e80:	f200 84e6 	bhi.w	86850 <Cl_Dlsis_controller+0x12d0>
   85e84:	a201      	add	r2, pc, #4	; (adr r2, 85e8c <Cl_Dlsis_controller+0x90c>)
   85e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   85e8a:	bf00      	nop
   85e8c:	00085f59 	.word	0x00085f59
   85e90:	00085fa7 	.word	0x00085fa7
   85e94:	00086851 	.word	0x00086851
   85e98:	00086851 	.word	0x00086851
   85e9c:	00086253 	.word	0x00086253
   85ea0:	00086269 	.word	0x00086269
   85ea4:	00086275 	.word	0x00086275
   85ea8:	0008627b 	.word	0x0008627b
   85eac:	00086851 	.word	0x00086851
   85eb0:	00086851 	.word	0x00086851
   85eb4:	00086851 	.word	0x00086851
   85eb8:	00086851 	.word	0x00086851
   85ebc:	00086851 	.word	0x00086851
   85ec0:	00086851 	.word	0x00086851
   85ec4:	00086851 	.word	0x00086851
   85ec8:	000862a7 	.word	0x000862a7
   85ecc:	000862a7 	.word	0x000862a7
   85ed0:	00086161 	.word	0x00086161
   85ed4:	00086137 	.word	0x00086137
   85ed8:	00086851 	.word	0x00086851
   85edc:	00086281 	.word	0x00086281
   85ee0:	0008628d 	.word	0x0008628d
   85ee4:	00086851 	.word	0x00086851
   85ee8:	00086851 	.word	0x00086851
   85eec:	00086851 	.word	0x00086851
   85ef0:	000862a7 	.word	0x000862a7
   85ef4:	000862a7 	.word	0x000862a7
   85ef8:	00086851 	.word	0x00086851
   85efc:	00086851 	.word	0x00086851
   85f00:	00085f05 	.word	0x00085f05
		{
			

			case EVENT_DLSIS_COMMAND_SET_BLDPMP_OFF:			
			Cl_Dlsis_PauseDialysis();
   85f04:	4b13      	ldr	r3, [pc, #76]	; (85f54 <Cl_Dlsis_controller+0x9d4>)
   85f06:	4798      	blx	r3
			cl_dlsis_state = CL_DLSIS_STATE_PAUSED;
   85f08:	4b06      	ldr	r3, [pc, #24]	; (85f24 <Cl_Dlsis_controller+0x9a4>)
   85f0a:	2207      	movs	r2, #7
   85f0c:	701a      	strb	r2, [r3, #0]
			break;
   85f0e:	e1cb      	b.n	862a8 <Cl_Dlsis_controller+0xd28>
   85f10:	0008806d 	.word	0x0008806d
   85f14:	000874d9 	.word	0x000874d9
   85f18:	2007194d 	.word	0x2007194d
   85f1c:	00089389 	.word	0x00089389
   85f20:	20071952 	.word	0x20071952
   85f24:	20071934 	.word	0x20071934
   85f28:	00093195 	.word	0x00093195
   85f2c:	0009ba51 	.word	0x0009ba51
   85f30:	00099e79 	.word	0x00099e79
   85f34:	00095df5 	.word	0x00095df5
   85f38:	0008e7f9 	.word	0x0008e7f9
   85f3c:	000a88b4 	.word	0x000a88b4
   85f40:	2007265c 	.word	0x2007265c
   85f44:	00093a0d 	.word	0x00093a0d
   85f48:	00099ea1 	.word	0x00099ea1
   85f4c:	00082e61 	.word	0x00082e61
   85f50:	00087521 	.word	0x00087521
   85f54:	00087485 	.word	0x00087485
			case EVENT_DLSIS_GET_DATA:

				if(Cl_ConsoleRxMsg.msgready == true)
   85f58:	4b79      	ldr	r3, [pc, #484]	; (86140 <Cl_Dlsis_controller+0xbc0>)
   85f5a:	7e1b      	ldrb	r3, [r3, #24]
   85f5c:	2b00      	cmp	r3, #0
   85f5e:	d021      	beq.n	85fa4 <Cl_Dlsis_controller+0xa24>
				{
					switch(Cl_ConsoleRxMsg.data.byte[0])
   85f60:	4b77      	ldr	r3, [pc, #476]	; (86140 <Cl_Dlsis_controller+0xbc0>)
   85f62:	791b      	ldrb	r3, [r3, #4]
   85f64:	2b04      	cmp	r3, #4
   85f66:	d000      	beq.n	85f6a <Cl_Dlsis_controller+0x9ea>
						Cl_dlsisretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
						Cl_dlsisretcode = Cl_SendDatatoconsole(command,&dataarray,2);
						break;

						default:
						break;
   85f68:	e01c      	b.n	85fa4 <Cl_Dlsis_controller+0xa24>
				if(Cl_ConsoleRxMsg.msgready == true)
				{
					switch(Cl_ConsoleRxMsg.data.byte[0])
					{
						case	CON_RX_PARAM_DATA_DIALYSIS_STATUS:
						command = CON_TX_COMMAND_SYSDATA;
   85f6a:	2316      	movs	r3, #22
   85f6c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
						dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
   85f70:	2304      	movs	r3, #4
   85f72:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
						Cl_dlsisretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
   85f76:	f107 0344 	add.w	r3, r7, #68	; 0x44
   85f7a:	3301      	adds	r3, #1
   85f7c:	2004      	movs	r0, #4
   85f7e:	4619      	mov	r1, r3
   85f80:	4b70      	ldr	r3, [pc, #448]	; (86144 <Cl_Dlsis_controller+0xbc4>)
   85f82:	4798      	blx	r3
   85f84:	4603      	mov	r3, r0
   85f86:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						Cl_dlsisretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   85f8a:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
   85f8e:	f107 0344 	add.w	r3, r7, #68	; 0x44
   85f92:	4610      	mov	r0, r2
   85f94:	4619      	mov	r1, r3
   85f96:	2202      	movs	r2, #2
   85f98:	4b6b      	ldr	r3, [pc, #428]	; (86148 <Cl_Dlsis_controller+0xbc8>)
   85f9a:	4798      	blx	r3
   85f9c:	4603      	mov	r3, r0
   85f9e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						break;
   85fa2:	bf00      	nop

						default:
						break;
					}
				}
			break;
   85fa4:	e180      	b.n	862a8 <Cl_Dlsis_controller+0xd28>
			case EVENT_DLSIS_SET_DATA:
				if(Cl_ConsoleRxMsg.msgready == true)
   85fa6:	4b66      	ldr	r3, [pc, #408]	; (86140 <Cl_Dlsis_controller+0xbc0>)
   85fa8:	7e1b      	ldrb	r3, [r3, #24]
   85faa:	2b00      	cmp	r3, #0
   85fac:	f000 80c2 	beq.w	86134 <Cl_Dlsis_controller+0xbb4>
										{
													cl_Datastreamtype cl_temp  ;	
													cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[1];
   85fb0:	4b63      	ldr	r3, [pc, #396]	; (86140 <Cl_Dlsis_controller+0xbc0>)
   85fb2:	795b      	ldrb	r3, [r3, #5]
   85fb4:	773b      	strb	r3, [r7, #28]
													cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[2];
   85fb6:	4b62      	ldr	r3, [pc, #392]	; (86140 <Cl_Dlsis_controller+0xbc0>)
   85fb8:	799b      	ldrb	r3, [r3, #6]
   85fba:	777b      	strb	r3, [r7, #29]
													cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[3];
   85fbc:	4b60      	ldr	r3, [pc, #384]	; (86140 <Cl_Dlsis_controller+0xbc0>)
   85fbe:	79db      	ldrb	r3, [r3, #7]
   85fc0:	77bb      	strb	r3, [r7, #30]
													cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[4];
   85fc2:	4b5f      	ldr	r3, [pc, #380]	; (86140 <Cl_Dlsis_controller+0xbc0>)
   85fc4:	7a1b      	ldrb	r3, [r3, #8]
   85fc6:	77fb      	strb	r3, [r7, #31]
											
											switch(Cl_ConsoleRxMsg.data.byte[0])
   85fc8:	4b5d      	ldr	r3, [pc, #372]	; (86140 <Cl_Dlsis_controller+0xbc0>)
   85fca:	791b      	ldrb	r3, [r3, #4]
   85fcc:	3b05      	subs	r3, #5
   85fce:	2b20      	cmp	r3, #32
   85fd0:	f200 80af 	bhi.w	86132 <Cl_Dlsis_controller+0xbb2>
   85fd4:	a201      	add	r2, pc, #4	; (adr r2, 85fdc <Cl_Dlsis_controller+0xa5c>)
   85fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   85fda:	bf00      	nop
   85fdc:	00086133 	.word	0x00086133
   85fe0:	00086133 	.word	0x00086133
   85fe4:	00086133 	.word	0x00086133
   85fe8:	00086133 	.word	0x00086133
   85fec:	00086133 	.word	0x00086133
   85ff0:	00086133 	.word	0x00086133
   85ff4:	00086133 	.word	0x00086133
   85ff8:	00086133 	.word	0x00086133
   85ffc:	00086061 	.word	0x00086061
   86000:	00086133 	.word	0x00086133
   86004:	00086133 	.word	0x00086133
   86008:	00086133 	.word	0x00086133
   8600c:	00086133 	.word	0x00086133
   86010:	00086133 	.word	0x00086133
   86014:	00086133 	.word	0x00086133
   86018:	00086133 	.word	0x00086133
   8601c:	0008607f 	.word	0x0008607f
   86020:	00086133 	.word	0x00086133
   86024:	00086133 	.word	0x00086133
   86028:	0008608f 	.word	0x0008608f
   8602c:	000860a7 	.word	0x000860a7
   86030:	000860bf 	.word	0x000860bf
   86034:	000860cf 	.word	0x000860cf
   86038:	000860df 	.word	0x000860df
   8603c:	000860ef 	.word	0x000860ef
   86040:	00086133 	.word	0x00086133
   86044:	00086133 	.word	0x00086133
   86048:	00086133 	.word	0x00086133
   8604c:	00086133 	.word	0x00086133
   86050:	000860ff 	.word	0x000860ff
   86054:	00086109 	.word	0x00086109
   86058:	00086113 	.word	0x00086113
   8605c:	00086123 	.word	0x00086123
													case ID_setcond:
													break;
													case ID_ufrate:
													break;
													case ID_ufgoal:
													if(cl_temp.word == 0){
   86060:	69fb      	ldr	r3, [r7, #28]
   86062:	2b00      	cmp	r3, #0
   86064:	d103      	bne.n	8606e <Cl_Dlsis_controller+0xaee>
														cl_uf_controller(CL_UF_EVENT_STOP,0);
   86066:	2004      	movs	r0, #4
   86068:	2100      	movs	r1, #0
   8606a:	4b38      	ldr	r3, [pc, #224]	; (8614c <Cl_Dlsis_controller+0xbcc>)
   8606c:	4798      	blx	r3
													}
													Treatdata[ID_ufgoal] = cl_temp.word;
   8606e:	69fb      	ldr	r3, [r7, #28]
   86070:	4a37      	ldr	r2, [pc, #220]	; (86150 <Cl_Dlsis_controller+0xbd0>)
   86072:	6353      	str	r3, [r2, #52]	; 0x34
													cl_uf_controller(CL_UF_EVENT_RESET,0);
   86074:	2008      	movs	r0, #8
   86076:	2100      	movs	r1, #0
   86078:	4b34      	ldr	r3, [pc, #208]	; (8614c <Cl_Dlsis_controller+0xbcc>)
   8607a:	4798      	blx	r3
													
													break;
   8607c:	e05a      	b.n	86134 <Cl_Dlsis_controller+0xbb4>
													case ID_heparincheck:
													break;
													case ID_minufrate:
													break;
													case ID_treattime:
													Treatdata[ID_treattime] = cl_temp.word;
   8607e:	69fb      	ldr	r3, [r7, #28]
   86080:	4a33      	ldr	r2, [pc, #204]	; (86150 <Cl_Dlsis_controller+0xbd0>)
   86082:	6553      	str	r3, [r2, #84]	; 0x54
													cl_uf_controller(CL_UF_EVENT_RESET,0);
   86084:	2008      	movs	r0, #8
   86086:	2100      	movs	r1, #0
   86088:	4b30      	ldr	r3, [pc, #192]	; (8614c <Cl_Dlsis_controller+0xbcc>)
   8608a:	4798      	blx	r3
													
													break;
   8608c:	e052      	b.n	86134 <Cl_Dlsis_controller+0xbb4>
													case ID_bloodratereturn:
													break;
													case ID_bloodratetreat:
													break;
													case ID_tempulimit:
														Cl_alarmThresholdTable.temp3_high_threshold =  (cl_temp.word)/10;
   8608e:	69fb      	ldr	r3, [r7, #28]
   86090:	4a30      	ldr	r2, [pc, #192]	; (86154 <Cl_Dlsis_controller+0xbd4>)
   86092:	fba2 2303 	umull	r2, r3, r2, r3
   86096:	08da      	lsrs	r2, r3, #3
   86098:	4b2f      	ldr	r3, [pc, #188]	; (86158 <Cl_Dlsis_controller+0xbd8>)
   8609a:	4610      	mov	r0, r2
   8609c:	4798      	blx	r3
   8609e:	4602      	mov	r2, r0
   860a0:	4b2e      	ldr	r3, [pc, #184]	; (8615c <Cl_Dlsis_controller+0xbdc>)
   860a2:	649a      	str	r2, [r3, #72]	; 0x48
													break;
   860a4:	e046      	b.n	86134 <Cl_Dlsis_controller+0xbb4>
													case ID_templlimit:
														Cl_alarmThresholdTable.temp3_low_threshold =  (cl_temp.word)/10;
   860a6:	69fb      	ldr	r3, [r7, #28]
   860a8:	4a2a      	ldr	r2, [pc, #168]	; (86154 <Cl_Dlsis_controller+0xbd4>)
   860aa:	fba2 2303 	umull	r2, r3, r2, r3
   860ae:	08da      	lsrs	r2, r3, #3
   860b0:	4b29      	ldr	r3, [pc, #164]	; (86158 <Cl_Dlsis_controller+0xbd8>)
   860b2:	4610      	mov	r0, r2
   860b4:	4798      	blx	r3
   860b6:	4602      	mov	r2, r0
   860b8:	4b28      	ldr	r3, [pc, #160]	; (8615c <Cl_Dlsis_controller+0xbdc>)
   860ba:	64da      	str	r2, [r3, #76]	; 0x4c
													break;
   860bc:	e03a      	b.n	86134 <Cl_Dlsis_controller+0xbb4>
													case ID_tmpllimit:
													Cl_alarmThresholdTable.tmp_low_threshold =  cl_temp.word;
   860be:	69fa      	ldr	r2, [r7, #28]
   860c0:	4b25      	ldr	r3, [pc, #148]	; (86158 <Cl_Dlsis_controller+0xbd8>)
   860c2:	4610      	mov	r0, r2
   860c4:	4798      	blx	r3
   860c6:	4602      	mov	r2, r0
   860c8:	4b24      	ldr	r3, [pc, #144]	; (8615c <Cl_Dlsis_controller+0xbdc>)
   860ca:	635a      	str	r2, [r3, #52]	; 0x34
													break;
   860cc:	e032      	b.n	86134 <Cl_Dlsis_controller+0xbb4>
													case ID_tmpulimit:
													Cl_alarmThresholdTable.tmp_high_threshold =  cl_temp.word;
   860ce:	69fa      	ldr	r2, [r7, #28]
   860d0:	4b21      	ldr	r3, [pc, #132]	; (86158 <Cl_Dlsis_controller+0xbd8>)
   860d2:	4610      	mov	r0, r2
   860d4:	4798      	blx	r3
   860d6:	4602      	mov	r2, r0
   860d8:	4b20      	ldr	r3, [pc, #128]	; (8615c <Cl_Dlsis_controller+0xbdc>)
   860da:	631a      	str	r2, [r3, #48]	; 0x30
													break;
   860dc:	e02a      	b.n	86134 <Cl_Dlsis_controller+0xbb4>
													case ID_vptllimit:
														Cl_alarmThresholdTable.vpt_low_threshold =  cl_temp.word;
   860de:	69fa      	ldr	r2, [r7, #28]
   860e0:	4b1d      	ldr	r3, [pc, #116]	; (86158 <Cl_Dlsis_controller+0xbd8>)
   860e2:	4610      	mov	r0, r2
   860e4:	4798      	blx	r3
   860e6:	4602      	mov	r2, r0
   860e8:	4b1c      	ldr	r3, [pc, #112]	; (8615c <Cl_Dlsis_controller+0xbdc>)
   860ea:	615a      	str	r2, [r3, #20]
													break;
   860ec:	e022      	b.n	86134 <Cl_Dlsis_controller+0xbb4>
													case ID_vptulimit:
														Cl_alarmThresholdTable.vpt_high_threshold =  cl_temp.word;
   860ee:	69fa      	ldr	r2, [r7, #28]
   860f0:	4b19      	ldr	r3, [pc, #100]	; (86158 <Cl_Dlsis_controller+0xbd8>)
   860f2:	4610      	mov	r0, r2
   860f4:	4798      	blx	r3
   860f6:	4602      	mov	r2, r0
   860f8:	4b18      	ldr	r3, [pc, #96]	; (8615c <Cl_Dlsis_controller+0xbdc>)
   860fa:	611a      	str	r2, [r3, #16]
													break;
   860fc:	e01a      	b.n	86134 <Cl_Dlsis_controller+0xbb4>
													case ID_dflowllimit:
													break;
													case ID_dflowulimit:
													break;
													case ID_condllimit:
													Cl_alarmThresholdTable.cond_low_threshold =  cl_temp.word;
   860fe:	69fb      	ldr	r3, [r7, #28]
   86100:	b29a      	uxth	r2, r3
   86102:	4b16      	ldr	r3, [pc, #88]	; (8615c <Cl_Dlsis_controller+0xbdc>)
   86104:	801a      	strh	r2, [r3, #0]
													break;
   86106:	e015      	b.n	86134 <Cl_Dlsis_controller+0xbb4>
													case ID_condulimit:
													Cl_alarmThresholdTable.cond_high_threshold =  cl_temp.word;
   86108:	69fb      	ldr	r3, [r7, #28]
   8610a:	b29a      	uxth	r2, r3
   8610c:	4b13      	ldr	r3, [pc, #76]	; (8615c <Cl_Dlsis_controller+0xbdc>)
   8610e:	805a      	strh	r2, [r3, #2]
													break;
   86110:	e010      	b.n	86134 <Cl_Dlsis_controller+0xbb4>
													case ID_aptllimit:
														Cl_alarmThresholdTable.apt_low_threshold =  cl_temp.word;
   86112:	69fa      	ldr	r2, [r7, #28]
   86114:	4b10      	ldr	r3, [pc, #64]	; (86158 <Cl_Dlsis_controller+0xbd8>)
   86116:	4610      	mov	r0, r2
   86118:	4798      	blx	r3
   8611a:	4602      	mov	r2, r0
   8611c:	4b0f      	ldr	r3, [pc, #60]	; (8615c <Cl_Dlsis_controller+0xbdc>)
   8611e:	60da      	str	r2, [r3, #12]
													break;
   86120:	e008      	b.n	86134 <Cl_Dlsis_controller+0xbb4>
													case ID_aptulimit:
													Cl_alarmThresholdTable.apt_high_threshold =  cl_temp.word;
   86122:	69fa      	ldr	r2, [r7, #28]
   86124:	4b0c      	ldr	r3, [pc, #48]	; (86158 <Cl_Dlsis_controller+0xbd8>)
   86126:	4610      	mov	r0, r2
   86128:	4798      	blx	r3
   8612a:	4602      	mov	r2, r0
   8612c:	4b0b      	ldr	r3, [pc, #44]	; (8615c <Cl_Dlsis_controller+0xbdc>)
   8612e:	609a      	str	r2, [r3, #8]
													break;
   86130:	e000      	b.n	86134 <Cl_Dlsis_controller+0xbb4>

												default:break;
   86132:	bf00      	nop
											}
										}
						
			break;
   86134:	e0b8      	b.n	862a8 <Cl_Dlsis_controller+0xd28>
			case EVENT_DLSIS_TICK_500MS:
				//UpdateHeaterControls();
			break;
			
			case EVENT_DLSIS_TICK_MINUTE:
				cl_uf_controller(CL_UF_EVENT_MINUTE,0);
   86136:	200a      	movs	r0, #10
   86138:	2100      	movs	r1, #0
   8613a:	4b04      	ldr	r3, [pc, #16]	; (8614c <Cl_Dlsis_controller+0xbcc>)
   8613c:	4798      	blx	r3
			break;
   8613e:	e0b3      	b.n	862a8 <Cl_Dlsis_controller+0xd28>
   86140:	200723f0 	.word	0x200723f0
   86144:	0009a545 	.word	0x0009a545
   86148:	0009ba51 	.word	0x0009ba51
   8614c:	00095df5 	.word	0x00095df5
   86150:	2007265c 	.word	0x2007265c
   86154:	cccccccd 	.word	0xcccccccd
   86158:	000a68a9 	.word	0x000a68a9
   8615c:	20072104 	.word	0x20072104
			
			case EVENT_DLSIS_TICK_SECOND:
		//	Cl_Dlsis_ResetAlertsforReassertion();
			//	UpdateHeaterControls();
			
				cl_hep_controller(CL_HEP_EVENT_SEC_TICK,0);
   86160:	200d      	movs	r0, #13
   86162:	2100      	movs	r1, #0
   86164:	4b9b      	ldr	r3, [pc, #620]	; (863d4 <Cl_Dlsis_controller+0xe54>)
   86166:	4798      	blx	r3
				Cl_Dlsis_SenddlsisData();
   86168:	4b9b      	ldr	r3, [pc, #620]	; (863d8 <Cl_Dlsis_controller+0xe58>)
   8616a:	4798      	blx	r3
				DlsisTime.Cl_dlsissecondscounter++;
   8616c:	4b9b      	ldr	r3, [pc, #620]	; (863dc <Cl_Dlsis_controller+0xe5c>)
   8616e:	781b      	ldrb	r3, [r3, #0]
   86170:	3301      	adds	r3, #1
   86172:	b2da      	uxtb	r2, r3
   86174:	4b99      	ldr	r3, [pc, #612]	; (863dc <Cl_Dlsis_controller+0xe5c>)
   86176:	701a      	strb	r2, [r3, #0]
				if ((DlsisTime.Cl_dlsissecondscounter == 30))
   86178:	4b98      	ldr	r3, [pc, #608]	; (863dc <Cl_Dlsis_controller+0xe5c>)
   8617a:	781b      	ldrb	r3, [r3, #0]
   8617c:	2b1e      	cmp	r3, #30
   8617e:	d101      	bne.n	86184 <Cl_Dlsis_controller+0xc04>
				{
					//sv_cs_setpotvalue(1900);
					//flag_bc =0 ;
					Cl_Dlsis_ResetAlertsforReassertion();
   86180:	4b97      	ldr	r3, [pc, #604]	; (863e0 <Cl_Dlsis_controller+0xe60>)
   86182:	4798      	blx	r3
				}
				if(DlsisTime.Cl_dlsissecondscounter == 60)
   86184:	4b95      	ldr	r3, [pc, #596]	; (863dc <Cl_Dlsis_controller+0xe5c>)
   86186:	781b      	ldrb	r3, [r3, #0]
   86188:	2b3c      	cmp	r3, #60	; 0x3c
   8618a:	d13f      	bne.n	8620c <Cl_Dlsis_controller+0xc8c>
				{
					
					Cl_dlsisretcode = Cl_Dlsis_UpdateTimeInfo();
   8618c:	4b95      	ldr	r3, [pc, #596]	; (863e4 <Cl_Dlsis_controller+0xe64>)
   8618e:	4798      	blx	r3
   86190:	4603      	mov	r3, r0
   86192:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					DlsisTime.Cl_dlsissecondscounter = 0;
   86196:	4b91      	ldr	r3, [pc, #580]	; (863dc <Cl_Dlsis_controller+0xe5c>)
   86198:	2200      	movs	r2, #0
   8619a:	701a      	strb	r2, [r3, #0]
					DlsisTime.Cl_dlsisMinutescounter++;
   8619c:	4b8f      	ldr	r3, [pc, #572]	; (863dc <Cl_Dlsis_controller+0xe5c>)
   8619e:	785b      	ldrb	r3, [r3, #1]
   861a0:	3301      	adds	r3, #1
   861a2:	b2da      	uxtb	r2, r3
   861a4:	4b8d      	ldr	r3, [pc, #564]	; (863dc <Cl_Dlsis_controller+0xe5c>)
   861a6:	705a      	strb	r2, [r3, #1]
						Cl_dlsisretcode =  Cl_AlarmActivateAlarms(VPTSTATUS_HIGH ,true);
						Cl_dlsisretcode =  Cl_AlarmActivateAlarms(APTSTATUS_LOW,true );
						Cl_dlsisretcode =  Cl_AlarmActivateAlarms(VPTSTATUS_LOW,true);
						bypass_flag = 0;*/
					}
                          if (DlsisTime.Cl_dlsisMinutescounter == 1)
   861a8:	4b8c      	ldr	r3, [pc, #560]	; (863dc <Cl_Dlsis_controller+0xe5c>)
   861aa:	785b      	ldrb	r3, [r3, #1]
   861ac:	2b01      	cmp	r3, #1
   861ae:	d127      	bne.n	86200 <Cl_Dlsis_controller+0xc80>
								/*Cl_dlsisretcode =  Cl_AlarmActivateAlarms(APTSTATUS_HIGH,true );
								Cl_dlsisretcode =  Cl_AlarmActivateAlarms(VPTSTATUS_HIGH ,true);
								Cl_dlsisretcode =  Cl_AlarmActivateAlarms(APTSTATUS_LOW,true );
								Cl_dlsisretcode =  Cl_AlarmActivateAlarms(VPTSTATUS_LOW,true);*/
						
									Cl_Uint16Type temp_ps=0, low_threshold=0, high_threshold=0;
   861b0:	2300      	movs	r3, #0
   861b2:	837b      	strh	r3, [r7, #26]
   861b4:	2300      	movs	r3, #0
   861b6:	833b      	strh	r3, [r7, #24]
   861b8:	2300      	movs	r3, #0
   861ba:	82fb      	strh	r3, [r7, #22]
									temp_ps=apt;
   861bc:	4b8a      	ldr	r3, [pc, #552]	; (863e8 <Cl_Dlsis_controller+0xe68>)
   861be:	681a      	ldr	r2, [r3, #0]
   861c0:	4b8a      	ldr	r3, [pc, #552]	; (863ec <Cl_Dlsis_controller+0xe6c>)
   861c2:	4610      	mov	r0, r2
   861c4:	4798      	blx	r3
   861c6:	4603      	mov	r3, r0
   861c8:	b29b      	uxth	r3, r3
   861ca:	837b      	strh	r3, [r7, #26]
									Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"APT",4);
   861cc:	2018      	movs	r0, #24
   861ce:	4988      	ldr	r1, [pc, #544]	; (863f0 <Cl_Dlsis_controller+0xe70>)
   861d0:	2204      	movs	r2, #4
   861d2:	4b88      	ldr	r3, [pc, #544]	; (863f4 <Cl_Dlsis_controller+0xe74>)
   861d4:	4798      	blx	r3
									Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_ps,2);
   861d6:	f107 031a 	add.w	r3, r7, #26
   861da:	2019      	movs	r0, #25
   861dc:	4619      	mov	r1, r3
   861de:	2202      	movs	r2, #2
   861e0:	4b84      	ldr	r3, [pc, #528]	; (863f4 <Cl_Dlsis_controller+0xe74>)
   861e2:	4798      	blx	r3
										//Cl_alarmThresholdTable.apt_high_threshold = apt + 50;
										//Cl_alarmThresholdTable.apt_low_threshold = apt - 50;
										//low_threshold = Cl_alarmThresholdTable.apt_low_threshold;
										//high_threshold = Cl_alarmThresholdTable.apt_high_threshold;
						
										Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&low_threshold,2);
   861e4:	f107 0318 	add.w	r3, r7, #24
   861e8:	2019      	movs	r0, #25
   861ea:	4619      	mov	r1, r3
   861ec:	2202      	movs	r2, #2
   861ee:	4b81      	ldr	r3, [pc, #516]	; (863f4 <Cl_Dlsis_controller+0xe74>)
   861f0:	4798      	blx	r3
										Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&high_threshold,2);
   861f2:	f107 0316 	add.w	r3, r7, #22
   861f6:	2019      	movs	r0, #25
   861f8:	4619      	mov	r1, r3
   861fa:	2202      	movs	r2, #2
   861fc:	4b7d      	ldr	r3, [pc, #500]	; (863f4 <Cl_Dlsis_controller+0xe74>)
   861fe:	4798      	blx	r3
						
										//Cl_alarmThresholdTable.vpt_high_threshold = vpt + 50;
										//Cl_alarmThresholdTable.vpt_low_threshold = vpt - 50;
							}
					DlsisTime.Cl_dlsisTotalMinutescounter++;
   86200:	4b76      	ldr	r3, [pc, #472]	; (863dc <Cl_Dlsis_controller+0xe5c>)
   86202:	78db      	ldrb	r3, [r3, #3]
   86204:	3301      	adds	r3, #1
   86206:	b2da      	uxtb	r2, r3
   86208:	4b74      	ldr	r3, [pc, #464]	; (863dc <Cl_Dlsis_controller+0xe5c>)
   8620a:	70da      	strb	r2, [r3, #3]
					if (DlsisTime.Cl_dlsisTotalMinutescounter == CL_DLSIS_TIMEOUT_MIN);//Treatdata[ID_treattime])
					{
						//cl_testvirus();
					}
				}
				if(cl_Dlsis_CheckforDialysisCompletion() == CL_OK )
   8620c:	4b7a      	ldr	r3, [pc, #488]	; (863f8 <Cl_Dlsis_controller+0xe78>)
   8620e:	4798      	blx	r3
   86210:	4603      	mov	r3, r0
   86212:	2b00      	cmp	r3, #0
   86214:	d11c      	bne.n	86250 <Cl_Dlsis_controller+0xcd0>
				{
					sv_cntrl_setgreenalarm();
   86216:	4b79      	ldr	r3, [pc, #484]	; (863fc <Cl_Dlsis_controller+0xe7c>)
   86218:	4798      	blx	r3
				//	sv_cntrl_deactivatepump(BLOODPUMP);
					Cl_dlsisretcode = cl_Dlsis_notifydacandgotorinsestandby();
   8621a:	4b79      	ldr	r3, [pc, #484]	; (86400 <Cl_Dlsis_controller+0xe80>)
   8621c:	4798      	blx	r3
   8621e:	4603      	mov	r3, r0
   86220:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					sv_cntrl_poweroffheater();
   86224:	4b77      	ldr	r3, [pc, #476]	; (86404 <Cl_Dlsis_controller+0xe84>)
   86226:	4798      	blx	r3
					SetHeaterState(CL_HEATER_STATE_OFF);
   86228:	2004      	movs	r0, #4
   8622a:	4b77      	ldr	r3, [pc, #476]	; (86408 <Cl_Dlsis_controller+0xe88>)
   8622c:	4798      	blx	r3
					sv_cntrl_setflowpath(FLOW_PATH_IDLE_RINSE);
   8622e:	2011      	movs	r0, #17
   86230:	4b76      	ldr	r3, [pc, #472]	; (8640c <Cl_Dlsis_controller+0xe8c>)
   86232:	4798      	blx	r3
					Cl_DlsisFillingFlowOff();
   86234:	4b76      	ldr	r3, [pc, #472]	; (86410 <Cl_Dlsis_controller+0xe90>)
   86236:	4798      	blx	r3
					cl_uf_controller(CL_UF_EVENT_STOP,0);
   86238:	2004      	movs	r0, #4
   8623a:	2100      	movs	r1, #0
   8623c:	4b75      	ldr	r3, [pc, #468]	; (86414 <Cl_Dlsis_controller+0xe94>)
   8623e:	4798      	blx	r3
					cl_hep_controller(CL_HEP_EVENT_STOP_NORMAL_DELIVERY,0);
   86240:	200c      	movs	r0, #12
   86242:	2100      	movs	r1, #0
   86244:	4b63      	ldr	r3, [pc, #396]	; (863d4 <Cl_Dlsis_controller+0xe54>)
   86246:	4798      	blx	r3
					cl_dlsis_state = CL_DLSIS_STATE_POST_DIALYSIS_STANDBY;
   86248:	4b73      	ldr	r3, [pc, #460]	; (86418 <Cl_Dlsis_controller+0xe98>)
   8624a:	2206      	movs	r2, #6
   8624c:	701a      	strb	r2, [r3, #0]
				}
			break;
   8624e:	e02b      	b.n	862a8 <Cl_Dlsis_controller+0xd28>
   86250:	e02a      	b.n	862a8 <Cl_Dlsis_controller+0xd28>
			case EVENT_DLSIS_STOP_DIALYSIS:
			Cl_dlsisretcode = sv_cntrl_enable_bypass();
   86252:	4b72      	ldr	r3, [pc, #456]	; (8641c <Cl_Dlsis_controller+0xe9c>)
   86254:	4798      	blx	r3
   86256:	4603      	mov	r3, r0
   86258:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			Cl_Dlsis_StopDialysis();
   8625c:	4b70      	ldr	r3, [pc, #448]	; (86420 <Cl_Dlsis_controller+0xea0>)
   8625e:	4798      	blx	r3
			cl_dlsis_state = CL_DLSIS_STATE_STOPPED;
   86260:	4b6d      	ldr	r3, [pc, #436]	; (86418 <Cl_Dlsis_controller+0xe98>)
   86262:	2209      	movs	r2, #9
   86264:	701a      	strb	r2, [r3, #0]
			break;
   86266:	e01f      	b.n	862a8 <Cl_Dlsis_controller+0xd28>
			case EVENT_DLSIS_PAUSE_DIALYSIS:
			Cl_Dlsis_PauseDialysis();
   86268:	4b6e      	ldr	r3, [pc, #440]	; (86424 <Cl_Dlsis_controller+0xea4>)
   8626a:	4798      	blx	r3
			cl_dlsis_state = CL_DLSIS_STATE_PAUSED;
   8626c:	4b6a      	ldr	r3, [pc, #424]	; (86418 <Cl_Dlsis_controller+0xe98>)
   8626e:	2207      	movs	r2, #7
   86270:	701a      	strb	r2, [r3, #0]
			break;
   86272:	e019      	b.n	862a8 <Cl_Dlsis_controller+0xd28>
			case EVENT_DLSIS_BYPASS_ON:
			Cl_Dlsis_BypassDialysis();
   86274:	4b6c      	ldr	r3, [pc, #432]	; (86428 <Cl_Dlsis_controller+0xea8>)
   86276:	4798      	blx	r3
			break;
   86278:	e016      	b.n	862a8 <Cl_Dlsis_controller+0xd28>
			case EVENT_DLSIS_BYPASS_OFF:
			Cl_Dlsis_BypassOff();
   8627a:	4b6c      	ldr	r3, [pc, #432]	; (8642c <Cl_Dlsis_controller+0xeac>)
   8627c:	4798      	blx	r3
			break;
   8627e:	e013      	b.n	862a8 <Cl_Dlsis_controller+0xd28>
			case EVENT_DLSIS__MINUF_ON:
			break;
			case EVENT_DLSIS__MINUF_OFF:
			break;
			case EVENT_DLSIS_ALARM:
					Cl_dlsisretcode = Cl_Dlsis_ProcessAlarms();
   86280:	4b6b      	ldr	r3, [pc, #428]	; (86430 <Cl_Dlsis_controller+0xeb0>)
   86282:	4798      	blx	r3
   86284:	4603      	mov	r3, r0
   86286:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			break;
   8628a:	e00d      	b.n	862a8 <Cl_Dlsis_controller+0xd28>
					//Cl_Alarm_GetAlarmStatus(FPCURRENTSTATUS,&alarmstatus1);
					if(alarmstatus1)
					{
						//Cl_dlsisretcode = Cl_bc_controller(BC_EVENT_CS);
					}
					Cl_Alarm_GetAlarmStatus(TEMP2_HIGH_THRESHOLD,&alarmstatus3);
   8628c:	f107 034e 	add.w	r3, r7, #78	; 0x4e
   86290:	2011      	movs	r0, #17
   86292:	4619      	mov	r1, r3
   86294:	4b67      	ldr	r3, [pc, #412]	; (86434 <Cl_Dlsis_controller+0xeb4>)
   86296:	4798      	blx	r3
					if(alarmstatus3)
					{
						//	UpdateHeaterControls();
					}
			
					Cl_Alarm_GetAlarmStatus(FLOW_HIGH_FLOWRATE,&flowstatus);
   86298:	f107 034d 	add.w	r3, r7, #77	; 0x4d
   8629c:	200e      	movs	r0, #14
   8629e:	4619      	mov	r1, r3
   862a0:	4b64      	ldr	r3, [pc, #400]	; (86434 <Cl_Dlsis_controller+0xeb4>)
   862a2:	4798      	blx	r3
					//	if(flowstatus)
					//	{
					//		Cl_rinseretcode = sv_cntrl_poweroffheater();
					//		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"FLOW_OFF",8);
					//	}
			break;
   862a4:	e000      	b.n	862a8 <Cl_Dlsis_controller+0xd28>
										}
						
			break;
			case EVENT_DLSIS_TICK_50MS:
			
			break;
   862a6:	bf00      	nop
					//	}
			break;


		}
		break;
   862a8:	e2d2      	b.n	86850 <Cl_Dlsis_controller+0x12d0>
		case CL_DLSIS_STATE_BYPASS:
									switch (cl_dlsis_event)
   862aa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   862ae:	3b06      	subs	r3, #6
   862b0:	2b10      	cmp	r3, #16
   862b2:	d837      	bhi.n	86324 <Cl_Dlsis_controller+0xda4>
   862b4:	a201      	add	r2, pc, #4	; (adr r2, 862bc <Cl_Dlsis_controller+0xd3c>)
   862b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   862ba:	bf00      	nop
   862bc:	0008631f 	.word	0x0008631f
   862c0:	00086313 	.word	0x00086313
   862c4:	00086325 	.word	0x00086325
   862c8:	0008630d 	.word	0x0008630d
   862cc:	00086325 	.word	0x00086325
   862d0:	00086325 	.word	0x00086325
   862d4:	00086325 	.word	0x00086325
   862d8:	00086325 	.word	0x00086325
   862dc:	00086325 	.word	0x00086325
   862e0:	00086325 	.word	0x00086325
   862e4:	00086325 	.word	0x00086325
   862e8:	00086325 	.word	0x00086325
   862ec:	00086325 	.word	0x00086325
   862f0:	00086325 	.word	0x00086325
   862f4:	00086325 	.word	0x00086325
   862f8:	00086325 	.word	0x00086325
   862fc:	00086301 	.word	0x00086301
									{
										case EVENT_DLSIS_ALARM:
										Cl_dlsisretcode = Cl_Dlsis_ProcessAlarms();
   86300:	4b4b      	ldr	r3, [pc, #300]	; (86430 <Cl_Dlsis_controller+0xeb0>)
   86302:	4798      	blx	r3
   86304:	4603      	mov	r3, r0
   86306:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
										break;
   8630a:	e00c      	b.n	86326 <Cl_Dlsis_controller+0xda6>
										case EVENT_DLSIS_BYPASS_OFF:
										Cl_Dlsis_BypassOff();
   8630c:	4b47      	ldr	r3, [pc, #284]	; (8642c <Cl_Dlsis_controller+0xeac>)
   8630e:	4798      	blx	r3
										break;
   86310:	e009      	b.n	86326 <Cl_Dlsis_controller+0xda6>
										case EVENT_DLSIS_PAUSE_DIALYSIS:
										Cl_Dlsis_PauseDialysis();
   86312:	4b44      	ldr	r3, [pc, #272]	; (86424 <Cl_Dlsis_controller+0xea4>)
   86314:	4798      	blx	r3
										cl_dlsis_state = CL_DLSIS_STATE_PAUSED;
   86316:	4b40      	ldr	r3, [pc, #256]	; (86418 <Cl_Dlsis_controller+0xe98>)
   86318:	2207      	movs	r2, #7
   8631a:	701a      	strb	r2, [r3, #0]
										break;
   8631c:	e003      	b.n	86326 <Cl_Dlsis_controller+0xda6>
										case  EVENT_DLSIS_STOP_DIALYSIS:
										Cl_Dlsis_StopDialysis();
   8631e:	4b40      	ldr	r3, [pc, #256]	; (86420 <Cl_Dlsis_controller+0xea0>)
   86320:	4798      	blx	r3
										break;
   86322:	e000      	b.n	86326 <Cl_Dlsis_controller+0xda6>
										default:break;
   86324:	bf00      	nop
									}

					
		break;
   86326:	e294      	b.n	86852 <Cl_Dlsis_controller+0x12d2>
		
		
		case CL_DLSIS_STATE_PAUSED:
							switch (cl_dlsis_event)
   86328:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   8632c:	3b05      	subs	r3, #5
   8632e:	2b11      	cmp	r3, #17
   86330:	d838      	bhi.n	863a4 <Cl_Dlsis_controller+0xe24>
   86332:	a201      	add	r2, pc, #4	; (adr r2, 86338 <Cl_Dlsis_controller+0xdb8>)
   86334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   86338:	00086381 	.word	0x00086381
   8633c:	00086387 	.word	0x00086387
   86340:	000863a5 	.word	0x000863a5
   86344:	00086393 	.word	0x00086393
   86348:	0008638d 	.word	0x0008638d
   8634c:	000863a5 	.word	0x000863a5
   86350:	000863a5 	.word	0x000863a5
   86354:	000863a5 	.word	0x000863a5
   86358:	000863a5 	.word	0x000863a5
   8635c:	000863a5 	.word	0x000863a5
   86360:	000863a5 	.word	0x000863a5
   86364:	000863a5 	.word	0x000863a5
   86368:	000863a5 	.word	0x000863a5
   8636c:	000863a5 	.word	0x000863a5
   86370:	000863a5 	.word	0x000863a5
   86374:	000863a5 	.word	0x000863a5
   86378:	000863a5 	.word	0x000863a5
   8637c:	00086399 	.word	0x00086399
							{
								case EVENT_DLSIS_START_DIALYSIS:
								Cl_Dlsis_ResumeDialysis();
   86380:	4b2d      	ldr	r3, [pc, #180]	; (86438 <Cl_Dlsis_controller+0xeb8>)
   86382:	4798      	blx	r3
								break;
   86384:	e00f      	b.n	863a6 <Cl_Dlsis_controller+0xe26>
								case  EVENT_DLSIS_STOP_DIALYSIS:
								Cl_Dlsis_StopDialysis();
   86386:	4b26      	ldr	r3, [pc, #152]	; (86420 <Cl_Dlsis_controller+0xea0>)
   86388:	4798      	blx	r3
								break;
   8638a:	e00c      	b.n	863a6 <Cl_Dlsis_controller+0xe26>
								case EVENT_DLSIS_BYPASS_OFF:
								Cl_Dlsis_BypassOff();
   8638c:	4b27      	ldr	r3, [pc, #156]	; (8642c <Cl_Dlsis_controller+0xeac>)
   8638e:	4798      	blx	r3
								break;
   86390:	e009      	b.n	863a6 <Cl_Dlsis_controller+0xe26>
								case EVENT_DLSIS_BYPASS_ON:
								Cl_Dlsis_BypassDialysis();
   86392:	4b25      	ldr	r3, [pc, #148]	; (86428 <Cl_Dlsis_controller+0xea8>)
   86394:	4798      	blx	r3
								break;
   86396:	e006      	b.n	863a6 <Cl_Dlsis_controller+0xe26>
								case EVENT_DLSIS_ALARM:
										Cl_dlsisretcode = Cl_Dlsis_ProcessAlarms();
   86398:	4b25      	ldr	r3, [pc, #148]	; (86430 <Cl_Dlsis_controller+0xeb0>)
   8639a:	4798      	blx	r3
   8639c:	4603      	mov	r3, r0
   8639e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
										break;
   863a2:	e000      	b.n	863a6 <Cl_Dlsis_controller+0xe26>
								default:break;
   863a4:	bf00      	nop
							}
		
		break;
   863a6:	e254      	b.n	86852 <Cl_Dlsis_controller+0x12d2>
		case CL_DLSIS_STATE_STOPPED:
							switch (cl_dlsis_event)
   863a8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   863ac:	2b05      	cmp	r3, #5
   863ae:	d004      	beq.n	863ba <Cl_Dlsis_controller+0xe3a>
   863b0:	2b24      	cmp	r3, #36	; 0x24
   863b2:	d009      	beq.n	863c8 <Cl_Dlsis_controller+0xe48>
   863b4:	2b04      	cmp	r3, #4
   863b6:	d003      	beq.n	863c0 <Cl_Dlsis_controller+0xe40>
								//Cl_MacRetval = cl_isouf_controller(Cl_MacEvent);
								
								
								break;
								
								default:break;
   863b8:	e00a      	b.n	863d0 <Cl_Dlsis_controller+0xe50>
		break;
		case CL_DLSIS_STATE_STOPPED:
							switch (cl_dlsis_event)
							{
								case EVENT_DLSIS_START_DIALYSIS:
								Cl_Dlsis_StartDialysis();
   863ba:	4b20      	ldr	r3, [pc, #128]	; (8643c <Cl_Dlsis_controller+0xebc>)
   863bc:	4798      	blx	r3
								break;
   863be:	e007      	b.n	863d0 <Cl_Dlsis_controller+0xe50>
								case EVENT_DLSIS_START_RINSE:
								Cl_mac_apprequesthandler(MACREQ_POST_DIALYSIS_RINSE_REQ);
   863c0:	2056      	movs	r0, #86	; 0x56
   863c2:	4b1f      	ldr	r3, [pc, #124]	; (86440 <Cl_Dlsis_controller+0xec0>)
   863c4:	4798      	blx	r3
								break;
   863c6:	e003      	b.n	863d0 <Cl_Dlsis_controller+0xe50>
								case EVENT_DLSIS_ISOUF_START:
								
								//Cl_MacState = MAC_ISOUF;
								Cl_mac_apprequesthandler(MACREQ_POST_DIALYSIS_ISOUF_REQ);
   863c8:	205e      	movs	r0, #94	; 0x5e
   863ca:	4b1d      	ldr	r3, [pc, #116]	; (86440 <Cl_Dlsis_controller+0xec0>)
   863cc:	4798      	blx	r3
								//Cl_MacRetval = cl_isouf_controller(Cl_MacEvent);
								
								
								break;
   863ce:	bf00      	nop
								
								default:break;
							}
							
		break;
   863d0:	e23f      	b.n	86852 <Cl_Dlsis_controller+0x12d2>
   863d2:	bf00      	nop
   863d4:	00093a0d 	.word	0x00093a0d
   863d8:	00087691 	.word	0x00087691
   863dc:	20072180 	.word	0x20072180
   863e0:	00087521 	.word	0x00087521
   863e4:	00086ae1 	.word	0x00086ae1
   863e8:	200720fc 	.word	0x200720fc
   863ec:	000a6d31 	.word	0x000a6d31
   863f0:	000a88c0 	.word	0x000a88c0
   863f4:	0009ba51 	.word	0x0009ba51
   863f8:	00086b65 	.word	0x00086b65
   863fc:	00099f4d 	.word	0x00099f4d
   86400:	00086b99 	.word	0x00086b99
   86404:	00099cb9 	.word	0x00099cb9
   86408:	000894d9 	.word	0x000894d9
   8640c:	00099ebd 	.word	0x00099ebd
   86410:	00087501 	.word	0x00087501
   86414:	00095df5 	.word	0x00095df5
   86418:	20071934 	.word	0x20071934
   8641c:	00099e79 	.word	0x00099e79
   86420:	00087071 	.word	0x00087071
   86424:	00087485 	.word	0x00087485
   86428:	00087159 	.word	0x00087159
   8642c:	00087309 	.word	0x00087309
   86430:	000874d9 	.word	0x000874d9
   86434:	00083035 	.word	0x00083035
   86438:	000880f9 	.word	0x000880f9
   8643c:	0008806d 	.word	0x0008806d
   86440:	0008bc51 	.word	0x0008bc51

		case CL_DLSIS_STATE_CRITICAL_ALARM:
					switch (cl_dlsis_event)
   86444:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   86448:	3b01      	subs	r3, #1
   8644a:	2b19      	cmp	r3, #25
   8644c:	f200 8082 	bhi.w	86554 <Cl_Dlsis_controller+0xfd4>
   86450:	a201      	add	r2, pc, #4	; (adr r2, 86458 <Cl_Dlsis_controller+0xed8>)
   86452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   86456:	bf00      	nop
   86458:	0008651b 	.word	0x0008651b
   8645c:	000864c7 	.word	0x000864c7
   86460:	00086555 	.word	0x00086555
   86464:	00086555 	.word	0x00086555
   86468:	000864c1 	.word	0x000864c1
   8646c:	00086555 	.word	0x00086555
   86470:	00086555 	.word	0x00086555
   86474:	00086549 	.word	0x00086549
   86478:	0008654f 	.word	0x0008654f
   8647c:	00086555 	.word	0x00086555
   86480:	00086555 	.word	0x00086555
   86484:	00086555 	.word	0x00086555
   86488:	00086555 	.word	0x00086555
   8648c:	00086555 	.word	0x00086555
   86490:	00086555 	.word	0x00086555
   86494:	00086555 	.word	0x00086555
   86498:	00086555 	.word	0x00086555
   8649c:	00086555 	.word	0x00086555
   864a0:	00086515 	.word	0x00086515
   864a4:	00086555 	.word	0x00086555
   864a8:	00086555 	.word	0x00086555
   864ac:	0008653d 	.word	0x0008653d
   864b0:	00086555 	.word	0x00086555
   864b4:	00086555 	.word	0x00086555
   864b8:	00086555 	.word	0x00086555
   864bc:	00086555 	.word	0x00086555
					{
						case EVENT_DLSIS_START_DIALYSIS:
						Cl_Dlsis_ResumeDialysis();
   864c0:	4bb2      	ldr	r3, [pc, #712]	; (8678c <Cl_Dlsis_controller+0x120c>)
   864c2:	4798      	blx	r3
						break;
   864c4:	e047      	b.n	86556 <Cl_Dlsis_controller+0xfd6>
						break;
						case EVENT_DLSIS__STOP_RETURN:
						break;
						case EVENT_DLSIS_GET_DATA:

							if(Cl_ConsoleRxMsg.msgready == true)
   864c6:	4bb2      	ldr	r3, [pc, #712]	; (86790 <Cl_Dlsis_controller+0x1210>)
   864c8:	7e1b      	ldrb	r3, [r3, #24]
   864ca:	2b00      	cmp	r3, #0
   864cc:	d021      	beq.n	86512 <Cl_Dlsis_controller+0xf92>
							{
								switch(Cl_ConsoleRxMsg.data.byte[0])
   864ce:	4bb0      	ldr	r3, [pc, #704]	; (86790 <Cl_Dlsis_controller+0x1210>)
   864d0:	791b      	ldrb	r3, [r3, #4]
   864d2:	2b04      	cmp	r3, #4
   864d4:	d000      	beq.n	864d8 <Cl_Dlsis_controller+0xf58>
									Cl_dlsisretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
									Cl_dlsisretcode = Cl_SendDatatoconsole(command,&dataarray,2);
									break;

									default:
									break;
   864d6:	e01c      	b.n	86512 <Cl_Dlsis_controller+0xf92>
							if(Cl_ConsoleRxMsg.msgready == true)
							{
								switch(Cl_ConsoleRxMsg.data.byte[0])
								{
									case	CON_RX_PARAM_DATA_DIALYSIS_STATUS:
									command = CON_TX_COMMAND_SYSDATA;
   864d8:	2316      	movs	r3, #22
   864da:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
									dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
   864de:	2304      	movs	r3, #4
   864e0:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
									Cl_dlsisretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
   864e4:	f107 0344 	add.w	r3, r7, #68	; 0x44
   864e8:	3301      	adds	r3, #1
   864ea:	2004      	movs	r0, #4
   864ec:	4619      	mov	r1, r3
   864ee:	4ba9      	ldr	r3, [pc, #676]	; (86794 <Cl_Dlsis_controller+0x1214>)
   864f0:	4798      	blx	r3
   864f2:	4603      	mov	r3, r0
   864f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
									Cl_dlsisretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   864f8:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
   864fc:	f107 0344 	add.w	r3, r7, #68	; 0x44
   86500:	4610      	mov	r0, r2
   86502:	4619      	mov	r1, r3
   86504:	2202      	movs	r2, #2
   86506:	4ba4      	ldr	r3, [pc, #656]	; (86798 <Cl_Dlsis_controller+0x1218>)
   86508:	4798      	blx	r3
   8650a:	4603      	mov	r3, r0
   8650c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
									break;
   86510:	bf00      	nop

									default:
									break;
								}
							}
						break;
   86512:	e020      	b.n	86556 <Cl_Dlsis_controller+0xfd6>
						case EVENT_DLSIS_TICK_SECOND:
						
						Cl_Dlsis_SenddlsisData();
   86514:	4ba1      	ldr	r3, [pc, #644]	; (8679c <Cl_Dlsis_controller+0x121c>)
   86516:	4798      	blx	r3
						/*	if (dlsisalarm != _NO_ALARM)
							{
								Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_1",8);
								dlsis_check_alarm(dlsisalarm);
							}*/
						break;
   86518:	e01d      	b.n	86556 <Cl_Dlsis_controller+0xfd6>
						case EVENT_DLSIS_CLR_ALARM:
						Cl_Dlsis_ResetAlertsforReassertion();
   8651a:	4ba1      	ldr	r3, [pc, #644]	; (867a0 <Cl_Dlsis_controller+0x1220>)
   8651c:	4798      	blx	r3
										sv_cntrl_resetredalarm();
   8651e:	4ba1      	ldr	r3, [pc, #644]	; (867a4 <Cl_Dlsis_controller+0x1224>)
   86520:	4798      	blx	r3
										sv_cntrl_resetyellowalarm();
   86522:	4ba1      	ldr	r3, [pc, #644]	; (867a8 <Cl_Dlsis_controller+0x1228>)
   86524:	4798      	blx	r3
										sv_cntrl_nobuzzer();
   86526:	4ba1      	ldr	r3, [pc, #644]	; (867ac <Cl_Dlsis_controller+0x122c>)
   86528:	4798      	blx	r3
										cl_bp_controller(CL_BP_EVENT_START,0);
   8652a:	2002      	movs	r0, #2
   8652c:	2100      	movs	r1, #0
   8652e:	4ba0      	ldr	r3, [pc, #640]	; (867b0 <Cl_Dlsis_controller+0x1230>)
   86530:	4798      	blx	r3
										sv_cntrl_activatevenousclamp();
   86532:	4ba0      	ldr	r3, [pc, #640]	; (867b4 <Cl_Dlsis_controller+0x1234>)
   86534:	4798      	blx	r3
										Cl_Dlsis_BypassOff();
   86536:	4ba0      	ldr	r3, [pc, #640]	; (867b8 <Cl_Dlsis_controller+0x1238>)
   86538:	4798      	blx	r3
										//cl_temp_recoveredstate();
						break;
   8653a:	e00c      	b.n	86556 <Cl_Dlsis_controller+0xfd6>
						case EVENT_DLSIS_ALARM:
						Cl_dlsisretcode = Cl_Dlsis_ProcessAlarms();
   8653c:	4b9f      	ldr	r3, [pc, #636]	; (867bc <Cl_Dlsis_controller+0x123c>)
   8653e:	4798      	blx	r3
   86540:	4603      	mov	r3, r0
   86542:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						break;
   86546:	e006      	b.n	86556 <Cl_Dlsis_controller+0xfd6>
						case EVENT_DLSIS_BYPASS_ON:
						Cl_Dlsis_BypassDialysis();
   86548:	4b9d      	ldr	r3, [pc, #628]	; (867c0 <Cl_Dlsis_controller+0x1240>)
   8654a:	4798      	blx	r3
						break;
   8654c:	e003      	b.n	86556 <Cl_Dlsis_controller+0xfd6>
						case EVENT_DLSIS_BYPASS_OFF:
						Cl_Dlsis_BypassOff();
   8654e:	4b9a      	ldr	r3, [pc, #616]	; (867b8 <Cl_Dlsis_controller+0x1238>)
   86550:	4798      	blx	r3
						break;
   86552:	e000      	b.n	86556 <Cl_Dlsis_controller+0xfd6>
						
						default:break;
   86554:	bf00      	nop
					}
		break;
   86556:	e17c      	b.n	86852 <Cl_Dlsis_controller+0x12d2>
		case CL_DLSIS_STATE_POST_DIALYSIS_STANDBY:
				switch(cl_dlsis_event)
   86558:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
   8655c:	3b02      	subs	r3, #2
   8655e:	2b20      	cmp	r3, #32
   86560:	f200 8172 	bhi.w	86848 <Cl_Dlsis_controller+0x12c8>
   86564:	a201      	add	r2, pc, #4	; (adr r2, 8656c <Cl_Dlsis_controller+0xfec>)
   86566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8656a:	bf00      	nop
   8656c:	000865f1 	.word	0x000865f1
   86570:	00086695 	.word	0x00086695
   86574:	00086849 	.word	0x00086849
   86578:	00086849 	.word	0x00086849
   8657c:	00086849 	.word	0x00086849
   86580:	00086849 	.word	0x00086849
   86584:	00086849 	.word	0x00086849
   86588:	00086849 	.word	0x00086849
   8658c:	00086849 	.word	0x00086849
   86590:	00086849 	.word	0x00086849
   86594:	00086849 	.word	0x00086849
   86598:	00086849 	.word	0x00086849
   8659c:	00086849 	.word	0x00086849
   865a0:	00086849 	.word	0x00086849
   865a4:	00086849 	.word	0x00086849
   865a8:	00086849 	.word	0x00086849
   865ac:	00086849 	.word	0x00086849
   865b0:	00086849 	.word	0x00086849
   865b4:	00086849 	.word	0x00086849
   865b8:	00086849 	.word	0x00086849
   865bc:	00086849 	.word	0x00086849
   865c0:	00086849 	.word	0x00086849
   865c4:	00086849 	.word	0x00086849
   865c8:	00086849 	.word	0x00086849
   865cc:	00086849 	.word	0x00086849
   865d0:	00086849 	.word	0x00086849
   865d4:	00086849 	.word	0x00086849
   865d8:	0008665f 	.word	0x0008665f
   865dc:	0008664b 	.word	0x0008664b
   865e0:	00086655 	.word	0x00086655
   865e4:	000865f1 	.word	0x000865f1
   865e8:	00086633 	.word	0x00086633
   865ec:	00086641 	.word	0x00086641
						
						case EVENT_DLSIS_GET_DATA:

	
						case EVENT_DLSIS_HEP_RATE:
							if(Cl_ConsoleRxMsg.msgready == true)
   865f0:	4b67      	ldr	r3, [pc, #412]	; (86790 <Cl_Dlsis_controller+0x1210>)
   865f2:	7e1b      	ldrb	r3, [r3, #24]
   865f4:	2b00      	cmp	r3, #0
   865f6:	d01b      	beq.n	86630 <Cl_Dlsis_controller+0x10b0>
							{
				
								cl_Datastreamtype cl_temp  ;
								cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   865f8:	4b65      	ldr	r3, [pc, #404]	; (86790 <Cl_Dlsis_controller+0x1210>)
   865fa:	791b      	ldrb	r3, [r3, #4]
   865fc:	743b      	strb	r3, [r7, #16]
								cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[1];
   865fe:	4b64      	ldr	r3, [pc, #400]	; (86790 <Cl_Dlsis_controller+0x1210>)
   86600:	795b      	ldrb	r3, [r3, #5]
   86602:	747b      	strb	r3, [r7, #17]
								cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[2];
   86604:	4b62      	ldr	r3, [pc, #392]	; (86790 <Cl_Dlsis_controller+0x1210>)
   86606:	799b      	ldrb	r3, [r3, #6]
   86608:	74bb      	strb	r3, [r7, #18]
								cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
   8660a:	4b61      	ldr	r3, [pc, #388]	; (86790 <Cl_Dlsis_controller+0x1210>)
   8660c:	79db      	ldrb	r3, [r3, #7]
   8660e:	74fb      	strb	r3, [r7, #19]
								Treatdata[ID_heprate] = cl_temp.Twobyte;
   86610:	8a3b      	ldrh	r3, [r7, #16]
   86612:	461a      	mov	r2, r3
   86614:	4b6b      	ldr	r3, [pc, #428]	; (867c4 <Cl_Dlsis_controller+0x1244>)
   86616:	61da      	str	r2, [r3, #28]
								hep_calibration(Treatdata[ID_heprate]);
   86618:	4b6a      	ldr	r3, [pc, #424]	; (867c4 <Cl_Dlsis_controller+0x1244>)
   8661a:	69db      	ldr	r3, [r3, #28]
   8661c:	4618      	mov	r0, r3
   8661e:	4b6a      	ldr	r3, [pc, #424]	; (867c8 <Cl_Dlsis_controller+0x1248>)
   86620:	4798      	blx	r3
								cl_hep_controller(CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE,hep_speed);
   86622:	4b6a      	ldr	r3, [pc, #424]	; (867cc <Cl_Dlsis_controller+0x124c>)
   86624:	681b      	ldr	r3, [r3, #0]
   86626:	2006      	movs	r0, #6
   86628:	4619      	mov	r1, r3
   8662a:	4b69      	ldr	r3, [pc, #420]	; (867d0 <Cl_Dlsis_controller+0x1250>)
   8662c:	4798      	blx	r3
							}
						break;
   8662e:	e10c      	b.n	8684a <Cl_Dlsis_controller+0x12ca>
   86630:	e10b      	b.n	8684a <Cl_Dlsis_controller+0x12ca>
						case EVENT_DLSIS_HEP_ON:
							cl_hep_controller(CL_HEP_EVENT_START_NORMAL_DELIVERY,hep_speed);
   86632:	4b66      	ldr	r3, [pc, #408]	; (867cc <Cl_Dlsis_controller+0x124c>)
   86634:	681b      	ldr	r3, [r3, #0]
   86636:	200a      	movs	r0, #10
   86638:	4619      	mov	r1, r3
   8663a:	4b65      	ldr	r3, [pc, #404]	; (867d0 <Cl_Dlsis_controller+0x1250>)
   8663c:	4798      	blx	r3
						break;
   8663e:	e104      	b.n	8684a <Cl_Dlsis_controller+0x12ca>
						case EVENT_DLSIS_HEP_OFF:
							cl_hep_controller(CL_HEP_EVENT_STOPBOLUS,0);
   86640:	2009      	movs	r0, #9
   86642:	2100      	movs	r1, #0
   86644:	4b62      	ldr	r3, [pc, #392]	; (867d0 <Cl_Dlsis_controller+0x1250>)
   86646:	4798      	blx	r3
						break;
   86648:	e0ff      	b.n	8684a <Cl_Dlsis_controller+0x12ca>
						case EVENT_DLSIS_COMMAND_SET_BLDPMP_ON:
						cl_bp_controller(CL_BP_EVENT_START,0);
   8664a:	2002      	movs	r0, #2
   8664c:	2100      	movs	r1, #0
   8664e:	4b58      	ldr	r3, [pc, #352]	; (867b0 <Cl_Dlsis_controller+0x1230>)
   86650:	4798      	blx	r3
						break;
   86652:	e0fa      	b.n	8684a <Cl_Dlsis_controller+0x12ca>
						case EVENT_DLSIS_COMMAND_SET_BLDPMP_OFF:
						cl_bp_controller(CL_BP_EVENT_STOP,0);
   86654:	2004      	movs	r0, #4
   86656:	2100      	movs	r1, #0
   86658:	4b55      	ldr	r3, [pc, #340]	; (867b0 <Cl_Dlsis_controller+0x1230>)
   8665a:	4798      	blx	r3
						break;
   8665c:	e0f5      	b.n	8684a <Cl_Dlsis_controller+0x12ca>
						case EVENT_DLSIS_COMMAND_SET_BLDPUMPRATE:
						if(Cl_ConsoleRxMsg.msgready == true)
   8665e:	4b4c      	ldr	r3, [pc, #304]	; (86790 <Cl_Dlsis_controller+0x1210>)
   86660:	7e1b      	ldrb	r3, [r3, #24]
   86662:	2b00      	cmp	r3, #0
   86664:	d015      	beq.n	86692 <Cl_Dlsis_controller+0x1112>
						{
			
							cl_Datastreamtype cl_temp  ;
							cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   86666:	4b4a      	ldr	r3, [pc, #296]	; (86790 <Cl_Dlsis_controller+0x1210>)
   86668:	791b      	ldrb	r3, [r3, #4]
   8666a:	733b      	strb	r3, [r7, #12]
							cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[1];
   8666c:	4b48      	ldr	r3, [pc, #288]	; (86790 <Cl_Dlsis_controller+0x1210>)
   8666e:	795b      	ldrb	r3, [r3, #5]
   86670:	737b      	strb	r3, [r7, #13]
							cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[2];
   86672:	4b47      	ldr	r3, [pc, #284]	; (86790 <Cl_Dlsis_controller+0x1210>)
   86674:	799b      	ldrb	r3, [r3, #6]
   86676:	73bb      	strb	r3, [r7, #14]
							cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
   86678:	4b45      	ldr	r3, [pc, #276]	; (86790 <Cl_Dlsis_controller+0x1210>)
   8667a:	79db      	ldrb	r3, [r3, #7]
   8667c:	73fb      	strb	r3, [r7, #15]
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,cl_temp.Twobyte);
   8667e:	89bb      	ldrh	r3, [r7, #12]
   86680:	2001      	movs	r0, #1
   86682:	4619      	mov	r1, r3
   86684:	4b4a      	ldr	r3, [pc, #296]	; (867b0 <Cl_Dlsis_controller+0x1230>)
   86686:	4798      	blx	r3
							Treatdata[ID_bloodratetreat] = cl_temp.Twobyte;
   86688:	89bb      	ldrh	r3, [r7, #12]
   8668a:	461a      	mov	r2, r3
   8668c:	4b4d      	ldr	r3, [pc, #308]	; (867c4 <Cl_Dlsis_controller+0x1244>)
   8668e:	65da      	str	r2, [r3, #92]	; 0x5c
						}
						break;
   86690:	e0db      	b.n	8684a <Cl_Dlsis_controller+0x12ca>
   86692:	e0da      	b.n	8684a <Cl_Dlsis_controller+0x12ca>
							case EVENT_DLSIS_SET_DATA:
									if(Cl_ConsoleRxMsg.msgready == true)
   86694:	4b3e      	ldr	r3, [pc, #248]	; (86790 <Cl_Dlsis_controller+0x1210>)
   86696:	7e1b      	ldrb	r3, [r3, #24]
   86698:	2b00      	cmp	r3, #0
   8669a:	f000 80d4 	beq.w	86846 <Cl_Dlsis_controller+0x12c6>
									{
										cl_Datastreamtype cl_temp  ;
										cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[1];
   8669e:	4b3c      	ldr	r3, [pc, #240]	; (86790 <Cl_Dlsis_controller+0x1210>)
   866a0:	795b      	ldrb	r3, [r3, #5]
   866a2:	723b      	strb	r3, [r7, #8]
										cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[2];
   866a4:	4b3a      	ldr	r3, [pc, #232]	; (86790 <Cl_Dlsis_controller+0x1210>)
   866a6:	799b      	ldrb	r3, [r3, #6]
   866a8:	727b      	strb	r3, [r7, #9]
										cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[3];
   866aa:	4b39      	ldr	r3, [pc, #228]	; (86790 <Cl_Dlsis_controller+0x1210>)
   866ac:	79db      	ldrb	r3, [r3, #7]
   866ae:	72bb      	strb	r3, [r7, #10]
										cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[4];
   866b0:	4b37      	ldr	r3, [pc, #220]	; (86790 <Cl_Dlsis_controller+0x1210>)
   866b2:	7a1b      	ldrb	r3, [r3, #8]
   866b4:	72fb      	strb	r3, [r7, #11]
				
										switch(Cl_ConsoleRxMsg.data.byte[0])
   866b6:	4b36      	ldr	r3, [pc, #216]	; (86790 <Cl_Dlsis_controller+0x1210>)
   866b8:	791b      	ldrb	r3, [r3, #4]
   866ba:	3b05      	subs	r3, #5
   866bc:	2b20      	cmp	r3, #32
   866be:	f200 80c1 	bhi.w	86844 <Cl_Dlsis_controller+0x12c4>
   866c2:	a201      	add	r2, pc, #4	; (adr r2, 866c8 <Cl_Dlsis_controller+0x1148>)
   866c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   866c8:	00086845 	.word	0x00086845
   866cc:	00086845 	.word	0x00086845
   866d0:	00086845 	.word	0x00086845
   866d4:	00086845 	.word	0x00086845
   866d8:	00086845 	.word	0x00086845
   866dc:	00086845 	.word	0x00086845
   866e0:	00086845 	.word	0x00086845
   866e4:	00086845 	.word	0x00086845
   866e8:	00086845 	.word	0x00086845
   866ec:	00086845 	.word	0x00086845
   866f0:	00086845 	.word	0x00086845
   866f4:	00086845 	.word	0x00086845
   866f8:	00086845 	.word	0x00086845
   866fc:	00086845 	.word	0x00086845
   86700:	00086845 	.word	0x00086845
   86704:	00086845 	.word	0x00086845
   86708:	00086845 	.word	0x00086845
   8670c:	00086845 	.word	0x00086845
   86710:	00086845 	.word	0x00086845
   86714:	0008674d 	.word	0x0008674d
   86718:	00086765 	.word	0x00086765
   8671c:	0008677d 	.word	0x0008677d
   86720:	000867e1 	.word	0x000867e1
   86724:	000867f1 	.word	0x000867f1
   86728:	00086801 	.word	0x00086801
   8672c:	00086845 	.word	0x00086845
   86730:	00086845 	.word	0x00086845
   86734:	00086845 	.word	0x00086845
   86738:	00086845 	.word	0x00086845
   8673c:	00086811 	.word	0x00086811
   86740:	0008681b 	.word	0x0008681b
   86744:	00086825 	.word	0x00086825
   86748:	00086835 	.word	0x00086835
											case ID_bloodratereturn:
											break;
											case ID_bloodratetreat:
											break;
											case ID_tempulimit:
											Cl_alarmThresholdTable.temp3_high_threshold =  (cl_temp.word)/10;
   8674c:	68bb      	ldr	r3, [r7, #8]
   8674e:	4a21      	ldr	r2, [pc, #132]	; (867d4 <Cl_Dlsis_controller+0x1254>)
   86750:	fba2 2303 	umull	r2, r3, r2, r3
   86754:	08da      	lsrs	r2, r3, #3
   86756:	4b20      	ldr	r3, [pc, #128]	; (867d8 <Cl_Dlsis_controller+0x1258>)
   86758:	4610      	mov	r0, r2
   8675a:	4798      	blx	r3
   8675c:	4602      	mov	r2, r0
   8675e:	4b1f      	ldr	r3, [pc, #124]	; (867dc <Cl_Dlsis_controller+0x125c>)
   86760:	649a      	str	r2, [r3, #72]	; 0x48
											break;
   86762:	e070      	b.n	86846 <Cl_Dlsis_controller+0x12c6>
											case ID_templlimit:
											Cl_alarmThresholdTable.temp3_low_threshold =  (cl_temp.word)/10;
   86764:	68bb      	ldr	r3, [r7, #8]
   86766:	4a1b      	ldr	r2, [pc, #108]	; (867d4 <Cl_Dlsis_controller+0x1254>)
   86768:	fba2 2303 	umull	r2, r3, r2, r3
   8676c:	08da      	lsrs	r2, r3, #3
   8676e:	4b1a      	ldr	r3, [pc, #104]	; (867d8 <Cl_Dlsis_controller+0x1258>)
   86770:	4610      	mov	r0, r2
   86772:	4798      	blx	r3
   86774:	4602      	mov	r2, r0
   86776:	4b19      	ldr	r3, [pc, #100]	; (867dc <Cl_Dlsis_controller+0x125c>)
   86778:	64da      	str	r2, [r3, #76]	; 0x4c
											break;
   8677a:	e064      	b.n	86846 <Cl_Dlsis_controller+0x12c6>
											case ID_tmpllimit:
											Cl_alarmThresholdTable.tmp_low_threshold =  cl_temp.word;
   8677c:	68ba      	ldr	r2, [r7, #8]
   8677e:	4b16      	ldr	r3, [pc, #88]	; (867d8 <Cl_Dlsis_controller+0x1258>)
   86780:	4610      	mov	r0, r2
   86782:	4798      	blx	r3
   86784:	4602      	mov	r2, r0
   86786:	4b15      	ldr	r3, [pc, #84]	; (867dc <Cl_Dlsis_controller+0x125c>)
   86788:	635a      	str	r2, [r3, #52]	; 0x34
											break;
   8678a:	e05c      	b.n	86846 <Cl_Dlsis_controller+0x12c6>
   8678c:	000880f9 	.word	0x000880f9
   86790:	200723f0 	.word	0x200723f0
   86794:	0009a545 	.word	0x0009a545
   86798:	0009ba51 	.word	0x0009ba51
   8679c:	00087691 	.word	0x00087691
   867a0:	00087521 	.word	0x00087521
   867a4:	00099f75 	.word	0x00099f75
   867a8:	00099f89 	.word	0x00099f89
   867ac:	00099fb1 	.word	0x00099fb1
   867b0:	00093305 	.word	0x00093305
   867b4:	00099e19 	.word	0x00099e19
   867b8:	00087309 	.word	0x00087309
   867bc:	000874d9 	.word	0x000874d9
   867c0:	00087159 	.word	0x00087159
   867c4:	2007265c 	.word	0x2007265c
   867c8:	00083fed 	.word	0x00083fed
   867cc:	20072174 	.word	0x20072174
   867d0:	00093a0d 	.word	0x00093a0d
   867d4:	cccccccd 	.word	0xcccccccd
   867d8:	000a68a9 	.word	0x000a68a9
   867dc:	20072104 	.word	0x20072104
											case ID_tmpulimit:
											Cl_alarmThresholdTable.tmp_high_threshold =  cl_temp.word;
   867e0:	68ba      	ldr	r2, [r7, #8]
   867e2:	4b1e      	ldr	r3, [pc, #120]	; (8685c <Cl_Dlsis_controller+0x12dc>)
   867e4:	4610      	mov	r0, r2
   867e6:	4798      	blx	r3
   867e8:	4602      	mov	r2, r0
   867ea:	4b1d      	ldr	r3, [pc, #116]	; (86860 <Cl_Dlsis_controller+0x12e0>)
   867ec:	631a      	str	r2, [r3, #48]	; 0x30
											break;
   867ee:	e02a      	b.n	86846 <Cl_Dlsis_controller+0x12c6>
											case ID_vptllimit:
											Cl_alarmThresholdTable.vpt_low_threshold =  cl_temp.word;
   867f0:	68ba      	ldr	r2, [r7, #8]
   867f2:	4b1a      	ldr	r3, [pc, #104]	; (8685c <Cl_Dlsis_controller+0x12dc>)
   867f4:	4610      	mov	r0, r2
   867f6:	4798      	blx	r3
   867f8:	4602      	mov	r2, r0
   867fa:	4b19      	ldr	r3, [pc, #100]	; (86860 <Cl_Dlsis_controller+0x12e0>)
   867fc:	615a      	str	r2, [r3, #20]
											break;
   867fe:	e022      	b.n	86846 <Cl_Dlsis_controller+0x12c6>
											case ID_vptulimit:
											Cl_alarmThresholdTable.vpt_high_threshold =  cl_temp.word;
   86800:	68ba      	ldr	r2, [r7, #8]
   86802:	4b16      	ldr	r3, [pc, #88]	; (8685c <Cl_Dlsis_controller+0x12dc>)
   86804:	4610      	mov	r0, r2
   86806:	4798      	blx	r3
   86808:	4602      	mov	r2, r0
   8680a:	4b15      	ldr	r3, [pc, #84]	; (86860 <Cl_Dlsis_controller+0x12e0>)
   8680c:	611a      	str	r2, [r3, #16]
											break;
   8680e:	e01a      	b.n	86846 <Cl_Dlsis_controller+0x12c6>
											case ID_dflowllimit:
											break;
											case ID_dflowulimit:
											break;
											case ID_condllimit:
											Cl_alarmThresholdTable.cond_low_threshold =  cl_temp.word;
   86810:	68bb      	ldr	r3, [r7, #8]
   86812:	b29a      	uxth	r2, r3
   86814:	4b12      	ldr	r3, [pc, #72]	; (86860 <Cl_Dlsis_controller+0x12e0>)
   86816:	801a      	strh	r2, [r3, #0]
											break;
   86818:	e015      	b.n	86846 <Cl_Dlsis_controller+0x12c6>
											case ID_condulimit:
											Cl_alarmThresholdTable.cond_high_threshold =  cl_temp.word;
   8681a:	68bb      	ldr	r3, [r7, #8]
   8681c:	b29a      	uxth	r2, r3
   8681e:	4b10      	ldr	r3, [pc, #64]	; (86860 <Cl_Dlsis_controller+0x12e0>)
   86820:	805a      	strh	r2, [r3, #2]
											break;
   86822:	e010      	b.n	86846 <Cl_Dlsis_controller+0x12c6>
											case ID_aptllimit:
											Cl_alarmThresholdTable.apt_low_threshold =  cl_temp.word;
   86824:	68ba      	ldr	r2, [r7, #8]
   86826:	4b0d      	ldr	r3, [pc, #52]	; (8685c <Cl_Dlsis_controller+0x12dc>)
   86828:	4610      	mov	r0, r2
   8682a:	4798      	blx	r3
   8682c:	4602      	mov	r2, r0
   8682e:	4b0c      	ldr	r3, [pc, #48]	; (86860 <Cl_Dlsis_controller+0x12e0>)
   86830:	60da      	str	r2, [r3, #12]
											break;
   86832:	e008      	b.n	86846 <Cl_Dlsis_controller+0x12c6>
											case ID_aptulimit:
											Cl_alarmThresholdTable.apt_high_threshold =  cl_temp.word;
   86834:	68ba      	ldr	r2, [r7, #8]
   86836:	4b09      	ldr	r3, [pc, #36]	; (8685c <Cl_Dlsis_controller+0x12dc>)
   86838:	4610      	mov	r0, r2
   8683a:	4798      	blx	r3
   8683c:	4602      	mov	r2, r0
   8683e:	4b08      	ldr	r3, [pc, #32]	; (86860 <Cl_Dlsis_controller+0x12e0>)
   86840:	609a      	str	r2, [r3, #8]
											
											break;
   86842:	e000      	b.n	86846 <Cl_Dlsis_controller+0x12c6>

											default:break;
   86844:	bf00      	nop
											}
										
										}
			
						break;
   86846:	e000      	b.n	8684a <Cl_Dlsis_controller+0x12ca>
						default:
						break;
   86848:	bf00      	nop
					}
		break;
   8684a:	e002      	b.n	86852 <Cl_Dlsis_controller+0x12d2>
		default:break;
   8684c:	bf00      	nop
   8684e:	e000      	b.n	86852 <Cl_Dlsis_controller+0x12d2>
					//	}
			break;


		}
		break;
   86850:	bf00      	nop
		default:break;
	}



return CL_OK;
   86852:	2300      	movs	r3, #0
}
   86854:	4618      	mov	r0, r3
   86856:	3760      	adds	r7, #96	; 0x60
   86858:	46bd      	mov	sp, r7
   8685a:	bd80      	pop	{r7, pc}
   8685c:	000a68a9 	.word	0x000a68a9
   86860:	20072104 	.word	0x20072104

00086864 <cl_dlsis_translatemacevent>:
	}
return CL_OK;
}

Cl_ReturnCodeType  cl_dlsis_translatemacevent(Cl_Mac_EventsType Cl_MacRinseEvt,Cl_Dlsis_Eevents* cl_dlsis_event)
{
   86864:	b480      	push	{r7}
   86866:	b083      	sub	sp, #12
   86868:	af00      	add	r7, sp, #0
   8686a:	4603      	mov	r3, r0
   8686c:	6039      	str	r1, [r7, #0]
   8686e:	71fb      	strb	r3, [r7, #7]
	switch(Cl_MacRinseEvt)
   86870:	79fb      	ldrb	r3, [r7, #7]
   86872:	3b07      	subs	r3, #7
   86874:	2b55      	cmp	r3, #85	; 0x55
   86876:	f200 812a 	bhi.w	86ace <cl_dlsis_translatemacevent+0x26a>
   8687a:	a201      	add	r2, pc, #4	; (adr r2, 86880 <cl_dlsis_translatemacevent+0x1c>)
   8687c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   86880:	00086a09 	.word	0x00086a09
   86884:	00086acf 	.word	0x00086acf
   86888:	00086acf 	.word	0x00086acf
   8688c:	000869e9 	.word	0x000869e9
   86890:	000869f1 	.word	0x000869f1
   86894:	000869e1 	.word	0x000869e1
   86898:	00086a01 	.word	0x00086a01
   8689c:	000869f9 	.word	0x000869f9
   868a0:	00086acf 	.word	0x00086acf
   868a4:	00086acf 	.word	0x00086acf
   868a8:	00086acf 	.word	0x00086acf
   868ac:	00086acf 	.word	0x00086acf
   868b0:	00086acf 	.word	0x00086acf
   868b4:	00086acf 	.word	0x00086acf
   868b8:	00086a99 	.word	0x00086a99
   868bc:	00086acf 	.word	0x00086acf
   868c0:	00086a11 	.word	0x00086a11
   868c4:	00086a19 	.word	0x00086a19
   868c8:	00086a21 	.word	0x00086a21
   868cc:	00086a29 	.word	0x00086a29
   868d0:	00086a31 	.word	0x00086a31
   868d4:	00086acf 	.word	0x00086acf
   868d8:	00086acf 	.word	0x00086acf
   868dc:	00086acf 	.word	0x00086acf
   868e0:	00086acf 	.word	0x00086acf
   868e4:	00086acf 	.word	0x00086acf
   868e8:	00086a71 	.word	0x00086a71
   868ec:	00086a79 	.word	0x00086a79
   868f0:	00086a81 	.word	0x00086a81
   868f4:	00086a89 	.word	0x00086a89
   868f8:	00086a91 	.word	0x00086a91
   868fc:	00086ac1 	.word	0x00086ac1
   86900:	00086aa1 	.word	0x00086aa1
   86904:	00086aa9 	.word	0x00086aa9
   86908:	000869d9 	.word	0x000869d9
   8690c:	00086acf 	.word	0x00086acf
   86910:	00086acf 	.word	0x00086acf
   86914:	00086acf 	.word	0x00086acf
   86918:	00086a69 	.word	0x00086a69
   8691c:	00086a61 	.word	0x00086a61
   86920:	00086acf 	.word	0x00086acf
   86924:	00086acf 	.word	0x00086acf
   86928:	00086acf 	.word	0x00086acf
   8692c:	00086acf 	.word	0x00086acf
   86930:	00086acf 	.word	0x00086acf
   86934:	00086acf 	.word	0x00086acf
   86938:	00086acf 	.word	0x00086acf
   8693c:	00086acf 	.word	0x00086acf
   86940:	00086acf 	.word	0x00086acf
   86944:	00086a39 	.word	0x00086a39
   86948:	00086acf 	.word	0x00086acf
   8694c:	00086a41 	.word	0x00086a41
   86950:	00086a49 	.word	0x00086a49
   86954:	00086a51 	.word	0x00086a51
   86958:	00086a59 	.word	0x00086a59
   8695c:	00086acf 	.word	0x00086acf
   86960:	00086acf 	.word	0x00086acf
   86964:	00086acf 	.word	0x00086acf
   86968:	00086acf 	.word	0x00086acf
   8696c:	00086acf 	.word	0x00086acf
   86970:	00086acf 	.word	0x00086acf
   86974:	00086acf 	.word	0x00086acf
   86978:	00086acf 	.word	0x00086acf
   8697c:	00086acf 	.word	0x00086acf
   86980:	00086acf 	.word	0x00086acf
   86984:	00086acf 	.word	0x00086acf
   86988:	00086acf 	.word	0x00086acf
   8698c:	00086acf 	.word	0x00086acf
   86990:	00086acf 	.word	0x00086acf
   86994:	00086acf 	.word	0x00086acf
   86998:	00086acf 	.word	0x00086acf
   8699c:	00086acf 	.word	0x00086acf
   869a0:	00086acf 	.word	0x00086acf
   869a4:	00086acf 	.word	0x00086acf
   869a8:	00086acf 	.word	0x00086acf
   869ac:	00086acf 	.word	0x00086acf
   869b0:	00086acf 	.word	0x00086acf
   869b4:	00086acf 	.word	0x00086acf
   869b8:	00086acf 	.word	0x00086acf
   869bc:	00086acf 	.word	0x00086acf
   869c0:	00086acf 	.word	0x00086acf
   869c4:	00086ac9 	.word	0x00086ac9
   869c8:	00086acf 	.word	0x00086acf
   869cc:	00086acf 	.word	0x00086acf
   869d0:	00086ab1 	.word	0x00086ab1
   869d4:	00086ab9 	.word	0x00086ab9
	{
		case EVT_CONSOLE_COMMAND_CLR_ALARM:
		*cl_dlsis_event = EVENT_DLSIS_CLR_ALARM;	
   869d8:	683b      	ldr	r3, [r7, #0]
   869da:	2201      	movs	r2, #1
   869dc:	701a      	strb	r2, [r3, #0]
		break;
   869de:	e077      	b.n	86ad0 <cl_dlsis_translatemacevent+0x26c>
		case 	EVT_CONSOLE_COMMAND_SET_BLDPUMPRATE:
		*cl_dlsis_event = EVENT_DLSIS_COMMAND_SET_BLDPUMPRATE;
   869e0:	683b      	ldr	r3, [r7, #0]
   869e2:	221d      	movs	r2, #29
   869e4:	701a      	strb	r2, [r3, #0]
		break;
   869e6:	e073      	b.n	86ad0 <cl_dlsis_translatemacevent+0x26c>
		case EVT_CONSOLE_COMMAND_SET_BLDPMP_ON:
		*cl_dlsis_event = EVENT_DLSIS_COMMAND_SET_BLDPMP_ON;
   869e8:	683b      	ldr	r3, [r7, #0]
   869ea:	221e      	movs	r2, #30
   869ec:	701a      	strb	r2, [r3, #0]
		break;
   869ee:	e06f      	b.n	86ad0 <cl_dlsis_translatemacevent+0x26c>
		case EVT_CONSOLE_COMMAND_SET_BLDPMP_OFF:
		*cl_dlsis_event = EVENT_DLSIS_COMMAND_SET_BLDPMP_OFF;
   869f0:	683b      	ldr	r3, [r7, #0]
   869f2:	221f      	movs	r2, #31
   869f4:	701a      	strb	r2, [r3, #0]
		break;
   869f6:	e06b      	b.n	86ad0 <cl_dlsis_translatemacevent+0x26c>
	
		case EVT_CONSOLE_COMMAND_GET_DATA:
		*cl_dlsis_event = EVENT_DLSIS_GET_DATA;
   869f8:	683b      	ldr	r3, [r7, #0]
   869fa:	2202      	movs	r2, #2
   869fc:	701a      	strb	r2, [r3, #0]
		break;
   869fe:	e067      	b.n	86ad0 <cl_dlsis_translatemacevent+0x26c>
		case EVT_CONSOLE_COMMAND_SET_DATA:
		*cl_dlsis_event = EVENT_DLSIS_SET_DATA;
   86a00:	683b      	ldr	r3, [r7, #0]
   86a02:	2203      	movs	r2, #3
   86a04:	701a      	strb	r2, [r3, #0]
		break;
   86a06:	e063      	b.n	86ad0 <cl_dlsis_translatemacevent+0x26c>
		case EVT_CONSOLE_COMMAND_RINSE_START:
		*cl_dlsis_event= EVENT_DLSIS_START_RINSE;
   86a08:	683b      	ldr	r3, [r7, #0]
   86a0a:	2204      	movs	r2, #4
   86a0c:	701a      	strb	r2, [r3, #0]
		break;
   86a0e:	e05f      	b.n	86ad0 <cl_dlsis_translatemacevent+0x26c>
		case  EVT_CONSOLE_COMMAND_DIALYSIS_START:
		*cl_dlsis_event= EVENT_DLSIS_START_DIALYSIS;
   86a10:	683b      	ldr	r3, [r7, #0]
   86a12:	2205      	movs	r2, #5
   86a14:	701a      	strb	r2, [r3, #0]
		break;
   86a16:	e05b      	b.n	86ad0 <cl_dlsis_translatemacevent+0x26c>
		case EVT_CONSOLE_COMMAND_DIALYSIS_STOP:
		*cl_dlsis_event= EVENT_DLSIS_STOP_DIALYSIS;
   86a18:	683b      	ldr	r3, [r7, #0]
   86a1a:	2206      	movs	r2, #6
   86a1c:	701a      	strb	r2, [r3, #0]
		break;
   86a1e:	e057      	b.n	86ad0 <cl_dlsis_translatemacevent+0x26c>
		case EVT_CONSOLE_COMMAND_DIALYSIS_PAUSE:
		*cl_dlsis_event= EVENT_DLSIS_PAUSE_DIALYSIS;
   86a20:	683b      	ldr	r3, [r7, #0]
   86a22:	2207      	movs	r2, #7
   86a24:	701a      	strb	r2, [r3, #0]
		break;
   86a26:	e053      	b.n	86ad0 <cl_dlsis_translatemacevent+0x26c>
		case EVT_CONSOLE_COMMAND_BYPASS_ON:
		*cl_dlsis_event= EVENT_DLSIS_BYPASS_ON;
   86a28:	683b      	ldr	r3, [r7, #0]
   86a2a:	2208      	movs	r2, #8
   86a2c:	701a      	strb	r2, [r3, #0]
		break;
   86a2e:	e04f      	b.n	86ad0 <cl_dlsis_translatemacevent+0x26c>
		case EVT_CONSOLE_COMMAND_BYPASS_OFF:
		*cl_dlsis_event= EVENT_DLSIS_BYPASS_OFF;
   86a30:	683b      	ldr	r3, [r7, #0]
   86a32:	2209      	movs	r2, #9
   86a34:	701a      	strb	r2, [r3, #0]
		break;
   86a36:	e04b      	b.n	86ad0 <cl_dlsis_translatemacevent+0x26c>
		case  EVT_TIMER_EXPIRED:
		
		break;
		case EVT_TICK_50M:
		*cl_dlsis_event =   EVENT_DLSIS_TICK_50MS;
   86a38:	683b      	ldr	r3, [r7, #0]
   86a3a:	2211      	movs	r2, #17
   86a3c:	701a      	strb	r2, [r3, #0]
		break;
   86a3e:	e047      	b.n	86ad0 <cl_dlsis_translatemacevent+0x26c>
		case EVT_TICK_500M:
		*cl_dlsis_event = EVENT_DLSIS_TICK_500MS;
   86a40:	683b      	ldr	r3, [r7, #0]
   86a42:	2212      	movs	r2, #18
   86a44:	701a      	strb	r2, [r3, #0]
		break;
   86a46:	e043      	b.n	86ad0 <cl_dlsis_translatemacevent+0x26c>
		case EVT_TICK_SEC:
		*cl_dlsis_event =   EVENT_DLSIS_TICK_SECOND;
   86a48:	683b      	ldr	r3, [r7, #0]
   86a4a:	2213      	movs	r2, #19
   86a4c:	701a      	strb	r2, [r3, #0]
		break;
   86a4e:	e03f      	b.n	86ad0 <cl_dlsis_translatemacevent+0x26c>
		case EVT_TICK_MIN:
		*cl_dlsis_event =   EVENT_DLSIS_TICK_MINUTE;
   86a50:	683b      	ldr	r3, [r7, #0]
   86a52:	2214      	movs	r2, #20
   86a54:	701a      	strb	r2, [r3, #0]
		break;
   86a56:	e03b      	b.n	86ad0 <cl_dlsis_translatemacevent+0x26c>
		case EVT_TICK_HOUR:
		*cl_dlsis_event =   EVENT_DLSIS_TICK_HOUR;
   86a58:	683b      	ldr	r3, [r7, #0]
   86a5a:	2215      	movs	r2, #21
   86a5c:	701a      	strb	r2, [r3, #0]
		break;
   86a5e:	e037      	b.n	86ad0 <cl_dlsis_translatemacevent+0x26c>
		case EVT_ALARM_TRIGGERED:
		*cl_dlsis_event =   EVENT_DLSIS_ALARM;		
   86a60:	683b      	ldr	r3, [r7, #0]
   86a62:	2216      	movs	r2, #22
   86a64:	701a      	strb	r2, [r3, #0]
		break;
   86a66:	e033      	b.n	86ad0 <cl_dlsis_translatemacevent+0x26c>
		case EVT_ALERT_TRIGGERED:
		*cl_dlsis_event =   EVENT_DLSIS_ALERT;
   86a68:	683b      	ldr	r3, [r7, #0]
   86a6a:	2217      	movs	r2, #23
   86a6c:	701a      	strb	r2, [r3, #0]
		break;
   86a6e:	e02f      	b.n	86ad0 <cl_dlsis_translatemacevent+0x26c>
		case EVT_CONSOLE_COMMAND_PATIENT_READY:
		
			*cl_dlsis_event =   EVENT_DLSIS__START_RETURN;
   86a70:	683b      	ldr	r3, [r7, #0]
   86a72:	2219      	movs	r2, #25
   86a74:	701a      	strb	r2, [r3, #0]

		break;
   86a76:	e02b      	b.n	86ad0 <cl_dlsis_translatemacevent+0x26c>
		case EVT_CONSOLE_COMMAND_START_RETURN:
			*cl_dlsis_event =   EVENT_DLSIS__STOP_RETURN;
   86a78:	683b      	ldr	r3, [r7, #0]
   86a7a:	221a      	movs	r2, #26
   86a7c:	701a      	strb	r2, [r3, #0]
		break;
   86a7e:	e027      	b.n	86ad0 <cl_dlsis_translatemacevent+0x26c>
		case EVT_CONSOLE_COMMAND_STOP_RETURN:
			*cl_dlsis_event =   EVENT_DLSIS__STOP_RETURN;
   86a80:	683b      	ldr	r3, [r7, #0]
   86a82:	221a      	movs	r2, #26
   86a84:	701a      	strb	r2, [r3, #0]
		break;
   86a86:	e023      	b.n	86ad0 <cl_dlsis_translatemacevent+0x26c>
		case EVT_CONSOLE_COMMAND_MINUF_ON:
			*cl_dlsis_event =   EVENT_DLSIS__MINUF_ON;
   86a88:	683b      	ldr	r3, [r7, #0]
   86a8a:	221b      	movs	r2, #27
   86a8c:	701a      	strb	r2, [r3, #0]
		break;
   86a8e:	e01f      	b.n	86ad0 <cl_dlsis_translatemacevent+0x26c>
		case EVT_CONSOLE_COMMAND_MINUF_OFF:
			*cl_dlsis_event =   EVENT_DLSIS__MINUF_OFF;
   86a90:	683b      	ldr	r3, [r7, #0]
   86a92:	221c      	movs	r2, #28
   86a94:	701a      	strb	r2, [r3, #0]
		break;
   86a96:	e01b      	b.n	86ad0 <cl_dlsis_translatemacevent+0x26c>
		case EVT_CONSOLE_COMMAND_HEP_PMP_RATE:
		*cl_dlsis_event =   EVENT_DLSIS_HEP_RATE;
   86a98:	683b      	ldr	r3, [r7, #0]
   86a9a:	2220      	movs	r2, #32
   86a9c:	701a      	strb	r2, [r3, #0]
		break;
   86a9e:	e017      	b.n	86ad0 <cl_dlsis_translatemacevent+0x26c>
		case EVT_CONSOLE_COMMAND_HEPARIN_START:
		*cl_dlsis_event =   EVENT_DLSIS_HEP_ON;
   86aa0:	683b      	ldr	r3, [r7, #0]
   86aa2:	2221      	movs	r2, #33	; 0x21
   86aa4:	701a      	strb	r2, [r3, #0]
		break;
   86aa6:	e013      	b.n	86ad0 <cl_dlsis_translatemacevent+0x26c>
		case EVT_CONSOLE_COMMAND_HEPARIN_STOP:
		*cl_dlsis_event =   EVENT_DLSIS_HEP_OFF;
   86aa8:	683b      	ldr	r3, [r7, #0]
   86aaa:	2222      	movs	r2, #34	; 0x22
   86aac:	701a      	strb	r2, [r3, #0]
		break;
   86aae:	e00f      	b.n	86ad0 <cl_dlsis_translatemacevent+0x26c>
		case EVT_CONSOLE_COMMAND_SET_BLDPUMPINC_MANUAL:
		*cl_dlsis_event = EVT_CONSOLE_COMMAND_SET_BLDPUMPINC_MANUAL;
   86ab0:	683b      	ldr	r3, [r7, #0]
   86ab2:	225b      	movs	r2, #91	; 0x5b
   86ab4:	701a      	strb	r2, [r3, #0]
		break;
   86ab6:	e00b      	b.n	86ad0 <cl_dlsis_translatemacevent+0x26c>
		case EVT_CONSOLE_COMMAND_SET_BLDPUMPDEC_MANUAL:
		*cl_dlsis_event = EVT_CONSOLE_COMMAND_SET_BLDPUMPDEC_MANUAL;
   86ab8:	683b      	ldr	r3, [r7, #0]
   86aba:	225c      	movs	r2, #92	; 0x5c
   86abc:	701a      	strb	r2, [r3, #0]
		break;
   86abe:	e007      	b.n	86ad0 <cl_dlsis_translatemacevent+0x26c>
		case 	EVT_CONSOLE_COMMAND_HEPARIN_BOLUS:
		*cl_dlsis_event = EVENT_DLSIS_HEAPARIN_BOLUS;
   86ac0:	683b      	ldr	r3, [r7, #0]
   86ac2:	2223      	movs	r2, #35	; 0x23
   86ac4:	701a      	strb	r2, [r3, #0]
		break;
   86ac6:	e003      	b.n	86ad0 <cl_dlsis_translatemacevent+0x26c>
		case EVT_CONSOLE_COMMAND_ISOUF_START:
		*cl_dlsis_event = EVENT_DLSIS_ISOUF_START;
   86ac8:	683b      	ldr	r3, [r7, #0]
   86aca:	2224      	movs	r2, #36	; 0x24
   86acc:	701a      	strb	r2, [r3, #0]
		default:
		break;
   86ace:	bf00      	nop
	}
	return CL_OK;
   86ad0:	2300      	movs	r3, #0
}
   86ad2:	4618      	mov	r0, r3
   86ad4:	370c      	adds	r7, #12
   86ad6:	46bd      	mov	sp, r7
   86ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
   86adc:	4770      	bx	lr
   86ade:	bf00      	nop

00086ae0 <Cl_Dlsis_UpdateTimeInfo>:



Cl_ReturnCodeType Cl_Dlsis_UpdateTimeInfo(void)
{
   86ae0:	b580      	push	{r7, lr}
   86ae2:	b084      	sub	sp, #16
   86ae4:	af00      	add	r7, sp, #0
	
	Cl_ReturnCodeType Cl_dlsisretcode = CL_ERROR;
   86ae6:	2304      	movs	r3, #4
   86ae8:	73fb      	strb	r3, [r7, #15]
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   86aea:	2351      	movs	r3, #81	; 0x51
   86aec:	73bb      	strb	r3, [r7, #14]
	Cl_Uint8Type data[7] = {0,0,0,0 ,0,0};
   86aee:	1d3b      	adds	r3, r7, #4
   86af0:	2200      	movs	r2, #0
   86af2:	601a      	str	r2, [r3, #0]
   86af4:	3304      	adds	r3, #4
   86af6:	2200      	movs	r2, #0
   86af8:	801a      	strh	r2, [r3, #0]
   86afa:	3302      	adds	r3, #2
   86afc:	2200      	movs	r2, #0
   86afe:	701a      	strb	r2, [r3, #0]
   86b00:	3301      	adds	r3, #1
	
	command = CON_TX_COMMAND_REM_TIME;
   86b02:	230a      	movs	r3, #10
   86b04:	73bb      	strb	r3, [r7, #14]
	data[0] = (Cl_Uint8Type) DIALYSIS_DATA;
   86b06:	2305      	movs	r3, #5
   86b08:	713b      	strb	r3, [r7, #4]
	data[1]= (Cl_Uint8Type)DlsisTime.Cl_dlsisTotalMinutescounter;
   86b0a:	4b14      	ldr	r3, [pc, #80]	; (86b5c <Cl_Dlsis_UpdateTimeInfo+0x7c>)
   86b0c:	78db      	ldrb	r3, [r3, #3]
   86b0e:	717b      	strb	r3, [r7, #5]
	data[2]= (Cl_Uint8Type)DlsisTime.Cl_dlsisTotalhourscounter;
   86b10:	4b12      	ldr	r3, [pc, #72]	; (86b5c <Cl_Dlsis_UpdateTimeInfo+0x7c>)
   86b12:	791b      	ldrb	r3, [r3, #4]
   86b14:	71bb      	strb	r3, [r7, #6]
	data[3]= (Cl_Uint8Type)DlsisTime.Cl_dlsissecondscounter;
   86b16:	4b11      	ldr	r3, [pc, #68]	; (86b5c <Cl_Dlsis_UpdateTimeInfo+0x7c>)
   86b18:	781b      	ldrb	r3, [r3, #0]
   86b1a:	71fb      	strb	r3, [r7, #7]
	data[4]= (Cl_Uint8Type) (CL_DLSIS_TIMEOUT_MIN - DlsisTime.Cl_dlsisTotalMinutescounter );
   86b1c:	4b0f      	ldr	r3, [pc, #60]	; (86b5c <Cl_Dlsis_UpdateTimeInfo+0x7c>)
   86b1e:	78da      	ldrb	r2, [r3, #3]
   86b20:	f06f 030f 	mvn.w	r3, #15
   86b24:	1a9b      	subs	r3, r3, r2
   86b26:	b2db      	uxtb	r3, r3
   86b28:	723b      	strb	r3, [r7, #8]
	data[5]= (Cl_Uint8Type) (CL_DLSIS_TIMEOUT_HRS - DlsisTime.Cl_dlsisTotalhourscounter );
   86b2a:	4b0c      	ldr	r3, [pc, #48]	; (86b5c <Cl_Dlsis_UpdateTimeInfo+0x7c>)
   86b2c:	791b      	ldrb	r3, [r3, #4]
   86b2e:	425b      	negs	r3, r3
   86b30:	b2db      	uxtb	r3, r3
   86b32:	727b      	strb	r3, [r7, #9]
	data[6]= (Cl_Uint8Type) (60 - DlsisTime.Cl_dlsissecondscounter );
   86b34:	4b09      	ldr	r3, [pc, #36]	; (86b5c <Cl_Dlsis_UpdateTimeInfo+0x7c>)
   86b36:	781b      	ldrb	r3, [r3, #0]
   86b38:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
   86b3c:	b2db      	uxtb	r3, r3
   86b3e:	72bb      	strb	r3, [r7, #10]
	
	Cl_dlsisretcode = Cl_SendDatatoconsole(command,&data,7);
   86b40:	7bba      	ldrb	r2, [r7, #14]
   86b42:	1d3b      	adds	r3, r7, #4
   86b44:	4610      	mov	r0, r2
   86b46:	4619      	mov	r1, r3
   86b48:	2207      	movs	r2, #7
   86b4a:	4b05      	ldr	r3, [pc, #20]	; (86b60 <Cl_Dlsis_UpdateTimeInfo+0x80>)
   86b4c:	4798      	blx	r3
   86b4e:	4603      	mov	r3, r0
   86b50:	73fb      	strb	r3, [r7, #15]
	
	return CL_OK;
   86b52:	2300      	movs	r3, #0
	}
   86b54:	4618      	mov	r0, r3
   86b56:	3710      	adds	r7, #16
   86b58:	46bd      	mov	sp, r7
   86b5a:	bd80      	pop	{r7, pc}
   86b5c:	20072180 	.word	0x20072180
   86b60:	0009ba51 	.word	0x0009ba51

00086b64 <cl_Dlsis_CheckforDialysisCompletion>:
	
	 Cl_ReturnCodeType cl_Dlsis_CheckforDialysisCompletion(void)
	 {
   86b64:	b480      	push	{r7}
   86b66:	b083      	sub	sp, #12
   86b68:	af00      	add	r7, sp, #0
		 Cl_ReturnCodeType Cl_dlsisretcode = CL_ERROR;
   86b6a:	2304      	movs	r3, #4
   86b6c:	71fb      	strb	r3, [r7, #7]
		 
		 if(DlsisTime.Cl_dlsisTotalMinutescounter > Treatdata[ID_treattime] )
   86b6e:	4b08      	ldr	r3, [pc, #32]	; (86b90 <cl_Dlsis_CheckforDialysisCompletion+0x2c>)
   86b70:	78db      	ldrb	r3, [r3, #3]
   86b72:	461a      	mov	r2, r3
   86b74:	4b07      	ldr	r3, [pc, #28]	; (86b94 <cl_Dlsis_CheckforDialysisCompletion+0x30>)
   86b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   86b78:	429a      	cmp	r2, r3
   86b7a:	d901      	bls.n	86b80 <cl_Dlsis_CheckforDialysisCompletion+0x1c>
		 {
			 
			 Cl_dlsisretcode = CL_OK;
   86b7c:	2300      	movs	r3, #0
   86b7e:	71fb      	strb	r3, [r7, #7]
		 }
		 
		 return (Cl_dlsisretcode);
   86b80:	79fb      	ldrb	r3, [r7, #7]
		 
	 }
   86b82:	4618      	mov	r0, r3
   86b84:	370c      	adds	r7, #12
   86b86:	46bd      	mov	sp, r7
   86b88:	f85d 7b04 	ldr.w	r7, [sp], #4
   86b8c:	4770      	bx	lr
   86b8e:	bf00      	nop
   86b90:	20072180 	.word	0x20072180
   86b94:	2007265c 	.word	0x2007265c

00086b98 <cl_Dlsis_notifydacandgotorinsestandby>:
	
	Cl_ReturnCodeType cl_Dlsis_notifydacandgotorinsestandby(void)
	{
   86b98:	b580      	push	{r7, lr}
   86b9a:	b082      	sub	sp, #8
   86b9c:	af00      	add	r7, sp, #0
		Cl_ReturnCodeType 	Cl_dlsisretcode = CL_OK;
   86b9e:	2300      	movs	r3, #0
   86ba0:	71fb      	strb	r3, [r7, #7]
		
		Cl_Uint8Type data =0;
   86ba2:	2300      	movs	r3, #0
   86ba4:	71bb      	strb	r3, [r7, #6]
		//inform DAC about rinse completed state.
		DlsisTime.Cl_dlsissecondscounter = 0;
   86ba6:	4b10      	ldr	r3, [pc, #64]	; (86be8 <cl_Dlsis_notifydacandgotorinsestandby+0x50>)
   86ba8:	2200      	movs	r2, #0
   86baa:	701a      	strb	r2, [r3, #0]
		DlsisTime.Cl_dlsisMinutescounter= 0;
   86bac:	4b0e      	ldr	r3, [pc, #56]	; (86be8 <cl_Dlsis_notifydacandgotorinsestandby+0x50>)
   86bae:	2200      	movs	r2, #0
   86bb0:	705a      	strb	r2, [r3, #1]
		DlsisTime.Cl_dlsishourscounter= 0;
   86bb2:	4b0d      	ldr	r3, [pc, #52]	; (86be8 <cl_Dlsis_notifydacandgotorinsestandby+0x50>)
   86bb4:	2200      	movs	r2, #0
   86bb6:	709a      	strb	r2, [r3, #2]
		DlsisTime.Cl_dlsisTotalMinutescounter= 0;
   86bb8:	4b0b      	ldr	r3, [pc, #44]	; (86be8 <cl_Dlsis_notifydacandgotorinsestandby+0x50>)
   86bba:	2200      	movs	r2, #0
   86bbc:	70da      	strb	r2, [r3, #3]
		DlsisTime.Cl_dlsisTotalhourscounter=0;
   86bbe:	4b0a      	ldr	r3, [pc, #40]	; (86be8 <cl_Dlsis_notifydacandgotorinsestandby+0x50>)
   86bc0:	2200      	movs	r2, #0
   86bc2:	711a      	strb	r2, [r3, #4]
		
		
		Cl_dlsisretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYS_COMPLTED,&data,0);
   86bc4:	1dbb      	adds	r3, r7, #6
   86bc6:	2015      	movs	r0, #21
   86bc8:	4619      	mov	r1, r3
   86bca:	2200      	movs	r2, #0
   86bcc:	4b07      	ldr	r3, [pc, #28]	; (86bec <cl_Dlsis_notifydacandgotorinsestandby+0x54>)
   86bce:	4798      	blx	r3
   86bd0:	4603      	mov	r3, r0
   86bd2:	71fb      	strb	r3, [r7, #7]
		Cl_dlsisretcode = Cl_mac_apprequesthandler(MACREQ_DIALYSIS_COMPLETED);
   86bd4:	2050      	movs	r0, #80	; 0x50
   86bd6:	4b06      	ldr	r3, [pc, #24]	; (86bf0 <cl_Dlsis_notifydacandgotorinsestandby+0x58>)
   86bd8:	4798      	blx	r3
   86bda:	4603      	mov	r3, r0
   86bdc:	71fb      	strb	r3, [r7, #7]
		
		return Cl_dlsisretcode;
   86bde:	79fb      	ldrb	r3, [r7, #7]
	}
   86be0:	4618      	mov	r0, r3
   86be2:	3708      	adds	r7, #8
   86be4:	46bd      	mov	sp, r7
   86be6:	bd80      	pop	{r7, pc}
   86be8:	20072180 	.word	0x20072180
   86bec:	0009ba51 	.word	0x0009ba51
   86bf0:	0008bc51 	.word	0x0008bc51

00086bf4 <Cl_Dlsis_UpdateAlarmTable>:
	
	
Cl_ReturnCodeType Cl_Dlsis_UpdateAlarmTable(ClDlsisAlarmIdType * ClRinseAlarmId )
{
   86bf4:	b580      	push	{r7, lr}
   86bf6:	b084      	sub	sp, #16
   86bf8:	af00      	add	r7, sp, #0
   86bfa:	6078      	str	r0, [r7, #4]
	Cl_ReturnCodeType 	Cl_dlsisretcode = CL_OK;
   86bfc:	2300      	movs	r3, #0
   86bfe:	73fb      	strb	r3, [r7, #15]
			Cl_NewAlarmIdType cl_alarmId;
	Cl_Uint8Type tempcount = 0;
   86c00:	2300      	movs	r3, #0
   86c02:	73bb      	strb	r3, [r7, #14]
			Cl_Uint8Type data[2];
			Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   86c04:	2351      	movs	r3, #81	; 0x51
   86c06:	737b      	strb	r3, [r7, #13]
	
	for (tempcount = 0 ; tempcount < CL_DLSIS_ALRM_MAX ; tempcount++)
   86c08:	2300      	movs	r3, #0
   86c0a:	73bb      	strb	r3, [r7, #14]
   86c0c:	e065      	b.n	86cda <Cl_Dlsis_UpdateAlarmTable+0xe6>
	{
		
		Cl_Alarm_GetAlarmStatus(Cl_DlsisAlarmTable[tempcount].Cl_DlsisAlarmId,&Cl_DlsisAlarmTable[tempcount].IsActive);
   86c0e:	7bba      	ldrb	r2, [r7, #14]
   86c10:	4936      	ldr	r1, [pc, #216]	; (86cec <Cl_Dlsis_UpdateAlarmTable+0xf8>)
   86c12:	4613      	mov	r3, r2
   86c14:	00db      	lsls	r3, r3, #3
   86c16:	1a9b      	subs	r3, r3, r2
   86c18:	440b      	add	r3, r1
   86c1a:	7819      	ldrb	r1, [r3, #0]
   86c1c:	7bba      	ldrb	r2, [r7, #14]
   86c1e:	4613      	mov	r3, r2
   86c20:	00db      	lsls	r3, r3, #3
   86c22:	1a9b      	subs	r3, r3, r2
   86c24:	4a31      	ldr	r2, [pc, #196]	; (86cec <Cl_Dlsis_UpdateAlarmTable+0xf8>)
   86c26:	4413      	add	r3, r2
   86c28:	3302      	adds	r3, #2
   86c2a:	4608      	mov	r0, r1
   86c2c:	4619      	mov	r1, r3
   86c2e:	4b30      	ldr	r3, [pc, #192]	; (86cf0 <Cl_Dlsis_UpdateAlarmTable+0xfc>)
   86c30:	4798      	blx	r3
		if (Cl_DlsisAlarmTable[tempcount].IsActive)
   86c32:	7bba      	ldrb	r2, [r7, #14]
   86c34:	492d      	ldr	r1, [pc, #180]	; (86cec <Cl_Dlsis_UpdateAlarmTable+0xf8>)
   86c36:	4613      	mov	r3, r2
   86c38:	00db      	lsls	r3, r3, #3
   86c3a:	1a9b      	subs	r3, r3, r2
   86c3c:	440b      	add	r3, r1
   86c3e:	789b      	ldrb	r3, [r3, #2]
   86c40:	2b00      	cmp	r3, #0
   86c42:	d020      	beq.n	86c86 <Cl_Dlsis_UpdateAlarmTable+0x92>
		{
			if(!Cl_DlsisAlarmTable[tempcount].IsRaised)
   86c44:	7bba      	ldrb	r2, [r7, #14]
   86c46:	4929      	ldr	r1, [pc, #164]	; (86cec <Cl_Dlsis_UpdateAlarmTable+0xf8>)
   86c48:	4613      	mov	r3, r2
   86c4a:	00db      	lsls	r3, r3, #3
   86c4c:	1a9b      	subs	r3, r3, r2
   86c4e:	440b      	add	r3, r1
   86c50:	78db      	ldrb	r3, [r3, #3]
   86c52:	f083 0301 	eor.w	r3, r3, #1
   86c56:	b2db      	uxtb	r3, r3
   86c58:	2b00      	cmp	r3, #0
   86c5a:	d03b      	beq.n	86cd4 <Cl_Dlsis_UpdateAlarmTable+0xe0>
				//	data[0] = (Cl_Uint8Type)Cl_DlsisAlarmTable[tempcount].Cl_DlsisAlarmId;
				//	data[1] = (Cl_Uint8Type) CL_ALARM_TRIGGERED;
				//	data[1] = (Cl_Uint8Type) CRITICAL;
				//	command = CON_TX_COMMAND_ALARM;
				//	Cl_dlsisretcode = Cl_SendDatatoconsole(command,&data,3);
					Cl_DlsisAlarmTable[tempcount].IsRaised = true;
   86c5c:	7bba      	ldrb	r2, [r7, #14]
   86c5e:	4923      	ldr	r1, [pc, #140]	; (86cec <Cl_Dlsis_UpdateAlarmTable+0xf8>)
   86c60:	4613      	mov	r3, r2
   86c62:	00db      	lsls	r3, r3, #3
   86c64:	1a9b      	subs	r3, r3, r2
   86c66:	440b      	add	r3, r1
   86c68:	2201      	movs	r2, #1
   86c6a:	70da      	strb	r2, [r3, #3]
					Cl_dlsisretcode = CL_DlsisAlarmActon(Cl_DlsisAlarmTable[tempcount].Cl_DlsisAlarmId);
   86c6c:	7bba      	ldrb	r2, [r7, #14]
   86c6e:	491f      	ldr	r1, [pc, #124]	; (86cec <Cl_Dlsis_UpdateAlarmTable+0xf8>)
   86c70:	4613      	mov	r3, r2
   86c72:	00db      	lsls	r3, r3, #3
   86c74:	1a9b      	subs	r3, r3, r2
   86c76:	440b      	add	r3, r1
   86c78:	781b      	ldrb	r3, [r3, #0]
   86c7a:	4618      	mov	r0, r3
   86c7c:	4b1d      	ldr	r3, [pc, #116]	; (86cf4 <Cl_Dlsis_UpdateAlarmTable+0x100>)
   86c7e:	4798      	blx	r3
   86c80:	4603      	mov	r3, r0
   86c82:	73fb      	strb	r3, [r7, #15]
   86c84:	e026      	b.n	86cd4 <Cl_Dlsis_UpdateAlarmTable+0xe0>
			
		}
		else
			{
				// alarm was present before , but not active now.
				if(Cl_DlsisAlarmTable[tempcount].IsRaised == true)
   86c86:	7bba      	ldrb	r2, [r7, #14]
   86c88:	4918      	ldr	r1, [pc, #96]	; (86cec <Cl_Dlsis_UpdateAlarmTable+0xf8>)
   86c8a:	4613      	mov	r3, r2
   86c8c:	00db      	lsls	r3, r3, #3
   86c8e:	1a9b      	subs	r3, r3, r2
   86c90:	440b      	add	r3, r1
   86c92:	78db      	ldrb	r3, [r3, #3]
   86c94:	2b00      	cmp	r3, #0
   86c96:	d01d      	beq.n	86cd4 <Cl_Dlsis_UpdateAlarmTable+0xe0>
				{
					Cl_DlsisAlarmTable[tempcount].IsRaised = false;
   86c98:	7bba      	ldrb	r2, [r7, #14]
   86c9a:	4914      	ldr	r1, [pc, #80]	; (86cec <Cl_Dlsis_UpdateAlarmTable+0xf8>)
   86c9c:	4613      	mov	r3, r2
   86c9e:	00db      	lsls	r3, r3, #3
   86ca0:	1a9b      	subs	r3, r3, r2
   86ca2:	440b      	add	r3, r1
   86ca4:	2200      	movs	r2, #0
   86ca6:	70da      	strb	r2, [r3, #3]
					command = CON_TX_COMMAND_ALARM;
   86ca8:	2307      	movs	r3, #7
   86caa:	737b      	strb	r3, [r7, #13]
					data[0] = (Cl_Uint8Type)(Cl_DlsisAlarmTable[tempcount].Cl_DlsisAlarmId);
   86cac:	7bba      	ldrb	r2, [r7, #14]
   86cae:	490f      	ldr	r1, [pc, #60]	; (86cec <Cl_Dlsis_UpdateAlarmTable+0xf8>)
   86cb0:	4613      	mov	r3, r2
   86cb2:	00db      	lsls	r3, r3, #3
   86cb4:	1a9b      	subs	r3, r3, r2
   86cb6:	440b      	add	r3, r1
   86cb8:	781b      	ldrb	r3, [r3, #0]
   86cba:	723b      	strb	r3, [r7, #8]
					data[1] = (Cl_Uint8Type) 0;
   86cbc:	2300      	movs	r3, #0
   86cbe:	727b      	strb	r3, [r7, #9]
					Cl_dlsisretcode = Cl_SendDatatoconsole(command,&data,2);
   86cc0:	7b7a      	ldrb	r2, [r7, #13]
   86cc2:	f107 0308 	add.w	r3, r7, #8
   86cc6:	4610      	mov	r0, r2
   86cc8:	4619      	mov	r1, r3
   86cca:	2202      	movs	r2, #2
   86ccc:	4b0a      	ldr	r3, [pc, #40]	; (86cf8 <Cl_Dlsis_UpdateAlarmTable+0x104>)
   86cce:	4798      	blx	r3
   86cd0:	4603      	mov	r3, r0
   86cd2:	73fb      	strb	r3, [r7, #15]
			Cl_NewAlarmIdType cl_alarmId;
	Cl_Uint8Type tempcount = 0;
			Cl_Uint8Type data[2];
			Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
	
	for (tempcount = 0 ; tempcount < CL_DLSIS_ALRM_MAX ; tempcount++)
   86cd4:	7bbb      	ldrb	r3, [r7, #14]
   86cd6:	3301      	adds	r3, #1
   86cd8:	73bb      	strb	r3, [r7, #14]
   86cda:	7bbb      	ldrb	r3, [r7, #14]
   86cdc:	2b1d      	cmp	r3, #29
   86cde:	d996      	bls.n	86c0e <Cl_Dlsis_UpdateAlarmTable+0x1a>
	}
	

	

return (Cl_dlsisretcode );
   86ce0:	7bfb      	ldrb	r3, [r7, #15]
}
   86ce2:	4618      	mov	r0, r3
   86ce4:	3710      	adds	r7, #16
   86ce6:	46bd      	mov	sp, r7
   86ce8:	bd80      	pop	{r7, pc}
   86cea:	bf00      	nop
   86cec:	2007046c 	.word	0x2007046c
   86cf0:	00083035 	.word	0x00083035
   86cf4:	00086cfd 	.word	0x00086cfd
   86cf8:	0009ba51 	.word	0x0009ba51

00086cfc <CL_DlsisAlarmActon>:


Cl_ReturnCodeType  CL_DlsisAlarmActon(Cl_NewAlarmIdType cl_dlsisalarmid)
{
   86cfc:	b580      	push	{r7, lr}
   86cfe:	b086      	sub	sp, #24
   86d00:	af00      	add	r7, sp, #0
   86d02:	4603      	mov	r3, r0
   86d04:	71fb      	strb	r3, [r7, #7]
		Cl_ReturnCodeType 	Cl_dlsisretcode = CL_OK;
   86d06:	2300      	movs	r3, #0
   86d08:	75fb      	strb	r3, [r7, #23]
			Cl_Uint8Type data[3] ={0, 0} ,*data1 = NULL;
   86d0a:	2300      	movs	r3, #0
   86d0c:	813b      	strh	r3, [r7, #8]
   86d0e:	2300      	movs	r3, #0
   86d10:	72bb      	strb	r3, [r7, #10]
   86d12:	2300      	movs	r3, #0
   86d14:	613b      	str	r3, [r7, #16]
			Cl_Uint8Type data3;
			Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   86d16:	2351      	movs	r3, #81	; 0x51
   86d18:	73fb      	strb	r3, [r7, #15]
			Cl_Uint16Type levelswitchstatus = 0;	
   86d1a:	2300      	movs	r3, #0
   86d1c:	81bb      	strh	r3, [r7, #12]
			static Cl_Uint8Type fillseccounter = 0;
			Cl_NewAlarmIdType NewAlarmId = _NO_ALARM;
   86d1e:	2300      	movs	r3, #0
   86d20:	72fb      	strb	r3, [r7, #11]
		

			

							
		switch(cl_dlsisalarmid)
   86d22:	79fb      	ldrb	r3, [r7, #7]
   86d24:	3b01      	subs	r3, #1
   86d26:	2b3a      	cmp	r3, #58	; 0x3a
   86d28:	f200 8099 	bhi.w	86e5e <CL_DlsisAlarmActon+0x162>
   86d2c:	a201      	add	r2, pc, #4	; (adr r2, 86d34 <CL_DlsisAlarmActon+0x38>)
   86d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   86d32:	bf00      	nop
   86d34:	00086e21 	.word	0x00086e21
   86d38:	00086e5f 	.word	0x00086e5f
   86d3c:	00086e5f 	.word	0x00086e5f
   86d40:	00086e5f 	.word	0x00086e5f
   86d44:	00086e2f 	.word	0x00086e2f
   86d48:	00086e2f 	.word	0x00086e2f
   86d4c:	00086e51 	.word	0x00086e51
   86d50:	00086e51 	.word	0x00086e51
   86d54:	00086e3d 	.word	0x00086e3d
   86d58:	00086e5f 	.word	0x00086e5f
   86d5c:	00086e3d 	.word	0x00086e3d
   86d60:	00086e3d 	.word	0x00086e3d
   86d64:	00086e3d 	.word	0x00086e3d
   86d68:	00086e3d 	.word	0x00086e3d
   86d6c:	00086e3d 	.word	0x00086e3d
   86d70:	00086e3d 	.word	0x00086e3d
   86d74:	00086e2f 	.word	0x00086e2f
   86d78:	00086e2f 	.word	0x00086e2f
   86d7c:	00086e2f 	.word	0x00086e2f
   86d80:	00086e2f 	.word	0x00086e2f
   86d84:	00086e2f 	.word	0x00086e2f
   86d88:	00086e2f 	.word	0x00086e2f
   86d8c:	00086e2f 	.word	0x00086e2f
   86d90:	00086e2f 	.word	0x00086e2f
   86d94:	00086e5f 	.word	0x00086e5f
   86d98:	00086e3d 	.word	0x00086e3d
   86d9c:	00086e5f 	.word	0x00086e5f
   86da0:	00086e5f 	.word	0x00086e5f
   86da4:	00086e5f 	.word	0x00086e5f
   86da8:	00086e5f 	.word	0x00086e5f
   86dac:	00086e5f 	.word	0x00086e5f
   86db0:	00086e21 	.word	0x00086e21
   86db4:	00086e3d 	.word	0x00086e3d
   86db8:	00086e21 	.word	0x00086e21
   86dbc:	00086e21 	.word	0x00086e21
   86dc0:	00086e21 	.word	0x00086e21
   86dc4:	00086e21 	.word	0x00086e21
   86dc8:	00086e21 	.word	0x00086e21
   86dcc:	00086e2f 	.word	0x00086e2f
   86dd0:	00086e2f 	.word	0x00086e2f
   86dd4:	00086e5f 	.word	0x00086e5f
   86dd8:	00086e2f 	.word	0x00086e2f
   86ddc:	00086e5f 	.word	0x00086e5f
   86de0:	00086e2f 	.word	0x00086e2f
   86de4:	00086e5f 	.word	0x00086e5f
   86de8:	00086e5f 	.word	0x00086e5f
   86dec:	00086e5f 	.word	0x00086e5f
   86df0:	00086e5f 	.word	0x00086e5f
   86df4:	00086e5f 	.word	0x00086e5f
   86df8:	00086e3d 	.word	0x00086e3d
   86dfc:	00086e3d 	.word	0x00086e3d
   86e00:	00086e5f 	.word	0x00086e5f
   86e04:	00086e5f 	.word	0x00086e5f
   86e08:	00086e5f 	.word	0x00086e5f
   86e0c:	00086e5f 	.word	0x00086e5f
   86e10:	00086e5f 	.word	0x00086e5f
   86e14:	00086e3d 	.word	0x00086e3d
   86e18:	00086e3d 	.word	0x00086e3d
   86e1c:	00086e3d 	.word	0x00086e3d
			case VPTSTATUS_LOW:
			case VPTSTATUS_HIGH:
			case ABD_EVENT:
			case BLD_EVENT:
							
				sv_cntrl_setredalarm();
   86e20:	4b29      	ldr	r3, [pc, #164]	; (86ec8 <CL_DlsisAlarmActon+0x1cc>)
   86e22:	4798      	blx	r3
				sv_cntrl_buzzer();
   86e24:	4b29      	ldr	r3, [pc, #164]	; (86ecc <CL_DlsisAlarmActon+0x1d0>)
   86e26:	4798      	blx	r3
				Cl_Dlsis_safesate();	
   86e28:	4b29      	ldr	r3, [pc, #164]	; (86ed0 <CL_DlsisAlarmActon+0x1d4>)
   86e2a:	4798      	blx	r3
			break;
   86e2c:	e018      	b.n	86e60 <CL_DlsisAlarmActon+0x164>
			case    PS1_LOW_THRESHOLD:
			case 	PS2_HIGH_THRESHOLD:
			case    PS2_LOW_THRESHOLD:
			case 	PS3_HIGH_THRESHOLD:
			case    PS3_LOW_THRESHOLD:
				sv_cntrl_setyellowalarm();
   86e2e:	4b29      	ldr	r3, [pc, #164]	; (86ed4 <CL_DlsisAlarmActon+0x1d8>)
   86e30:	4798      	blx	r3
				sv_cntrl_buzzer();
   86e32:	4b26      	ldr	r3, [pc, #152]	; (86ecc <CL_DlsisAlarmActon+0x1d0>)
   86e34:	4798      	blx	r3
				cl_temp_safestate();
   86e36:	4b28      	ldr	r3, [pc, #160]	; (86ed8 <CL_DlsisAlarmActon+0x1dc>)
   86e38:	4798      	blx	r3
			break;
   86e3a:	e011      	b.n	86e60 <CL_DlsisAlarmActon+0x164>
			case	BC_FAILED:
			case BD_EVENT:
			case BC_ALARM:
			case TEMP1_HIGH_THRESHOLD:
			case TEMP1_LOW_THRESHOLD:
				sv_cntrl_setredalarm();
   86e3c:	4b22      	ldr	r3, [pc, #136]	; (86ec8 <CL_DlsisAlarmActon+0x1cc>)
   86e3e:	4798      	blx	r3
				sv_cntrl_buzzer();
   86e40:	4b22      	ldr	r3, [pc, #136]	; (86ecc <CL_DlsisAlarmActon+0x1d0>)
   86e42:	4798      	blx	r3
				Cl_Dlsis_StopDialysis();
   86e44:	4b25      	ldr	r3, [pc, #148]	; (86edc <CL_DlsisAlarmActon+0x1e0>)
   86e46:	4798      	blx	r3
		    	cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   86e48:	4b25      	ldr	r3, [pc, #148]	; (86ee0 <CL_DlsisAlarmActon+0x1e4>)
   86e4a:	220a      	movs	r2, #10
   86e4c:	701a      	strb	r2, [r3, #0]
			break;
   86e4e:	e007      	b.n	86e60 <CL_DlsisAlarmActon+0x164>
			
			case COND_STATUS_LOW:
			case COND_STATUS_HIGH:
				sv_cntrl_setyellowalarm();
   86e50:	4b20      	ldr	r3, [pc, #128]	; (86ed4 <CL_DlsisAlarmActon+0x1d8>)
   86e52:	4798      	blx	r3
				sv_cntrl_buzzer();
   86e54:	4b1d      	ldr	r3, [pc, #116]	; (86ecc <CL_DlsisAlarmActon+0x1d0>)
   86e56:	4798      	blx	r3
				cl_temp_safestate();
   86e58:	4b1f      	ldr	r3, [pc, #124]	; (86ed8 <CL_DlsisAlarmActon+0x1dc>)
   86e5a:	4798      	blx	r3
				//cl_cond_safestate();
			break;
   86e5c:	e000      	b.n	86e60 <CL_DlsisAlarmActon+0x164>
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"COND",4);
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
			break;*/
			
			default:
			break;
   86e5e:	bf00      	nop

		}
		 if(cl_dlsisalarmid != _NO_ALARM)
   86e60:	79fb      	ldrb	r3, [r7, #7]
   86e62:	2b00      	cmp	r3, #0
   86e64:	d02b      	beq.n	86ebe <CL_DlsisAlarmActon+0x1c2>
		 {
			 dlsisalarm = cl_dlsisalarmid;
   86e66:	4a1f      	ldr	r2, [pc, #124]	; (86ee4 <CL_DlsisAlarmActon+0x1e8>)
   86e68:	79fb      	ldrb	r3, [r7, #7]
   86e6a:	7013      	strb	r3, [r2, #0]
			 dlsisalarm1 = dlsisalarm;
   86e6c:	4b1d      	ldr	r3, [pc, #116]	; (86ee4 <CL_DlsisAlarmActon+0x1e8>)
   86e6e:	781a      	ldrb	r2, [r3, #0]
   86e70:	4b1d      	ldr	r3, [pc, #116]	; (86ee8 <CL_DlsisAlarmActon+0x1ec>)
   86e72:	701a      	strb	r2, [r3, #0]
			data[0] = (Cl_Uint8Type)cl_dlsisalarmid;
   86e74:	79fb      	ldrb	r3, [r7, #7]
   86e76:	723b      	strb	r3, [r7, #8]
			data[1] = (Cl_Uint8Type) CL_ALARM_TRIGGERED;
   86e78:	2301      	movs	r3, #1
   86e7a:	727b      	strb	r3, [r7, #9]
			data[2] = (Cl_Uint8Type)CRITICAL;
   86e7c:	2302      	movs	r3, #2
   86e7e:	72bb      	strb	r3, [r7, #10]
			command = CON_TX_COMMAND_ALARM;
   86e80:	2307      	movs	r3, #7
   86e82:	73fb      	strb	r3, [r7, #15]
			cl_wait(10);
   86e84:	200a      	movs	r0, #10
   86e86:	4b19      	ldr	r3, [pc, #100]	; (86eec <CL_DlsisAlarmActon+0x1f0>)
   86e88:	4798      	blx	r3
			Cl_dlsisretcode = Cl_SendDatatoconsole(command,&data,3);
   86e8a:	7bfa      	ldrb	r2, [r7, #15]
   86e8c:	f107 0308 	add.w	r3, r7, #8
   86e90:	4610      	mov	r0, r2
   86e92:	4619      	mov	r1, r3
   86e94:	2203      	movs	r2, #3
   86e96:	4b16      	ldr	r3, [pc, #88]	; (86ef0 <CL_DlsisAlarmActon+0x1f4>)
   86e98:	4798      	blx	r3
   86e9a:	4603      	mov	r3, r0
   86e9c:	75fb      	strb	r3, [r7, #23]
			
					
			command = CON_TX_COMMAND_CL_SYS_STATE;
   86e9e:	232b      	movs	r3, #43	; 0x2b
   86ea0:	73fb      	strb	r3, [r7, #15]
			data[0] = (Cl_Uint8Type)CLEANING;
   86ea2:	2301      	movs	r3, #1
   86ea4:	723b      	strb	r3, [r7, #8]
			data[1] = (Cl_Uint8Type)CLEAN_CLEAN_ALARM_STOPPED;
   86ea6:	2302      	movs	r3, #2
   86ea8:	727b      	strb	r3, [r7, #9]
			Cl_dlsisretcode = Cl_SendDatatoconsole(command,&data,2);
   86eaa:	7bfa      	ldrb	r2, [r7, #15]
   86eac:	f107 0308 	add.w	r3, r7, #8
   86eb0:	4610      	mov	r0, r2
   86eb2:	4619      	mov	r1, r3
   86eb4:	2202      	movs	r2, #2
   86eb6:	4b0e      	ldr	r3, [pc, #56]	; (86ef0 <CL_DlsisAlarmActon+0x1f4>)
   86eb8:	4798      	blx	r3
   86eba:	4603      	mov	r3, r0
   86ebc:	75fb      	strb	r3, [r7, #23]
		 }
return CL_OK;			
   86ebe:	2300      	movs	r3, #0
}
   86ec0:	4618      	mov	r0, r3
   86ec2:	3718      	adds	r7, #24
   86ec4:	46bd      	mov	sp, r7
   86ec6:	bd80      	pop	{r7, pc}
   86ec8:	00099f25 	.word	0x00099f25
   86ecc:	00099f61 	.word	0x00099f61
   86ed0:	00088439 	.word	0x00088439
   86ed4:	00099f39 	.word	0x00099f39
   86ed8:	0008847d 	.word	0x0008847d
   86edc:	00087071 	.word	0x00087071
   86ee0:	20071934 	.word	0x20071934
   86ee4:	20072185 	.word	0x20072185
   86ee8:	2007217a 	.word	0x2007217a
   86eec:	00093195 	.word	0x00093195
   86ef0:	0009ba51 	.word	0x0009ba51

00086ef4 <Cl_Dlsis_deactivateallalarms>:

Cl_ReturnCodeType Cl_Dlsis_deactivateallalarms(){
   86ef4:	b580      	push	{r7, lr}
   86ef6:	b082      	sub	sp, #8
   86ef8:	af00      	add	r7, sp, #0
	
	Cl_ReturnCodeType Cl_dlsisretcode = CL_OK;
   86efa:	2300      	movs	r3, #0
   86efc:	71fb      	strb	r3, [r7, #7]
	
	Cl_Dlsis_ResetAlertsforReassertion();
   86efe:	4b5a      	ldr	r3, [pc, #360]	; (87068 <Cl_Dlsis_deactivateallalarms+0x174>)
   86f00:	4798      	blx	r3
	
	Cl_dlsisretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON,true );
   86f02:	203d      	movs	r0, #61	; 0x3d
   86f04:	2101      	movs	r1, #1
   86f06:	4b59      	ldr	r3, [pc, #356]	; (8706c <Cl_Dlsis_deactivateallalarms+0x178>)
   86f08:	4798      	blx	r3
   86f0a:	4603      	mov	r3, r0
   86f0c:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_ON_TO_OFF ,false);
   86f0e:	203e      	movs	r0, #62	; 0x3e
   86f10:	2100      	movs	r1, #0
   86f12:	4b56      	ldr	r3, [pc, #344]	; (8706c <Cl_Dlsis_deactivateallalarms+0x178>)
   86f14:	4798      	blx	r3
   86f16:	4603      	mov	r3, r0
   86f18:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER1STATUS_CLOSED,false );
   86f1a:	2005      	movs	r0, #5
   86f1c:	2100      	movs	r1, #0
   86f1e:	4b53      	ldr	r3, [pc, #332]	; (8706c <Cl_Dlsis_deactivateallalarms+0x178>)
   86f20:	4798      	blx	r3
   86f22:	4603      	mov	r3, r0
   86f24:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER2STATUS_CLOSED,false );
   86f26:	2006      	movs	r0, #6
   86f28:	2100      	movs	r1, #0
   86f2a:	4b50      	ldr	r3, [pc, #320]	; (8706c <Cl_Dlsis_deactivateallalarms+0x178>)
   86f2c:	4798      	blx	r3
   86f2e:	4603      	mov	r3, r0
   86f30:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER1STATUS_OPEN,false );
   86f32:	2003      	movs	r0, #3
   86f34:	2100      	movs	r1, #0
   86f36:	4b4d      	ldr	r3, [pc, #308]	; (8706c <Cl_Dlsis_deactivateallalarms+0x178>)
   86f38:	4798      	blx	r3
   86f3a:	4603      	mov	r3, r0
   86f3c:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER2STATUS_OPEN,false );
   86f3e:	2004      	movs	r0, #4
   86f40:	2100      	movs	r1, #0
   86f42:	4b4a      	ldr	r3, [pc, #296]	; (8706c <Cl_Dlsis_deactivateallalarms+0x178>)
   86f44:	4798      	blx	r3
   86f46:	4603      	mov	r3, r0
   86f48:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_STATUS_LOW,false );
   86f4a:	2007      	movs	r0, #7
   86f4c:	2100      	movs	r1, #0
   86f4e:	4b47      	ldr	r3, [pc, #284]	; (8706c <Cl_Dlsis_deactivateallalarms+0x178>)
   86f50:	4798      	blx	r3
   86f52:	4603      	mov	r3, r0
   86f54:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_STATUS_HIGH,false );
   86f56:	2008      	movs	r0, #8
   86f58:	2100      	movs	r1, #0
   86f5a:	4b44      	ldr	r3, [pc, #272]	; (8706c <Cl_Dlsis_deactivateallalarms+0x178>)
   86f5c:	4798      	blx	r3
   86f5e:	4603      	mov	r3, r0
   86f60:	71fb      	strb	r3, [r7, #7]
								//	Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_DAC_OPEN,true );
								//	Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_DAC_RO,true );
								//	Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_DAC_HIGH,true );
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms( ABD_EVENT,false );
   86f62:	2020      	movs	r0, #32
   86f64:	2100      	movs	r1, #0
   86f66:	4b41      	ldr	r3, [pc, #260]	; (8706c <Cl_Dlsis_deactivateallalarms+0x178>)
   86f68:	4798      	blx	r3
   86f6a:	4603      	mov	r3, r0
   86f6c:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms( BD_EVENT,false );
   86f6e:	2021      	movs	r0, #33	; 0x21
   86f70:	2100      	movs	r1, #0
   86f72:	4b3e      	ldr	r3, [pc, #248]	; (8706c <Cl_Dlsis_deactivateallalarms+0x178>)
   86f74:	4798      	blx	r3
   86f76:	4603      	mov	r3, r0
   86f78:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(APTSTATUS_HIGH,false );
   86f7a:	2024      	movs	r0, #36	; 0x24
   86f7c:	2100      	movs	r1, #0
   86f7e:	4b3b      	ldr	r3, [pc, #236]	; (8706c <Cl_Dlsis_deactivateallalarms+0x178>)
   86f80:	4798      	blx	r3
   86f82:	4603      	mov	r3, r0
   86f84:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(VPTSTATUS_HIGH ,false);
   86f86:	2026      	movs	r0, #38	; 0x26
   86f88:	2100      	movs	r1, #0
   86f8a:	4b38      	ldr	r3, [pc, #224]	; (8706c <Cl_Dlsis_deactivateallalarms+0x178>)
   86f8c:	4798      	blx	r3
   86f8e:	4603      	mov	r3, r0
   86f90:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(APTSTATUS_LOW,false );
   86f92:	2023      	movs	r0, #35	; 0x23
   86f94:	2100      	movs	r1, #0
   86f96:	4b35      	ldr	r3, [pc, #212]	; (8706c <Cl_Dlsis_deactivateallalarms+0x178>)
   86f98:	4798      	blx	r3
   86f9a:	4603      	mov	r3, r0
   86f9c:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(VPTSTATUS_LOW,false);
   86f9e:	2025      	movs	r0, #37	; 0x25
   86fa0:	2100      	movs	r1, #0
   86fa2:	4b32      	ldr	r3, [pc, #200]	; (8706c <Cl_Dlsis_deactivateallalarms+0x178>)
   86fa4:	4798      	blx	r3
   86fa6:	4603      	mov	r3, r0
   86fa8:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms( BLD_EVENT,true );
   86faa:	2022      	movs	r0, #34	; 0x22
   86fac:	2101      	movs	r1, #1
   86fae:	4b2f      	ldr	r3, [pc, #188]	; (8706c <Cl_Dlsis_deactivateallalarms+0x178>)
   86fb0:	4798      	blx	r3
   86fb2:	4603      	mov	r3, r0
   86fb4:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS2_HIGH_THRESHOLD,false );
   86fb6:	2017      	movs	r0, #23
   86fb8:	2100      	movs	r1, #0
   86fba:	4b2c      	ldr	r3, [pc, #176]	; (8706c <Cl_Dlsis_deactivateallalarms+0x178>)
   86fbc:	4798      	blx	r3
   86fbe:	4603      	mov	r3, r0
   86fc0:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS2_LOW_THRESHOLD,false );
   86fc2:	2018      	movs	r0, #24
   86fc4:	2100      	movs	r1, #0
   86fc6:	4b29      	ldr	r3, [pc, #164]	; (8706c <Cl_Dlsis_deactivateallalarms+0x178>)
   86fc8:	4798      	blx	r3
   86fca:	4603      	mov	r3, r0
   86fcc:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS1_HIGH_THRESHOLD,false );
   86fce:	2015      	movs	r0, #21
   86fd0:	2100      	movs	r1, #0
   86fd2:	4b26      	ldr	r3, [pc, #152]	; (8706c <Cl_Dlsis_deactivateallalarms+0x178>)
   86fd4:	4798      	blx	r3
   86fd6:	4603      	mov	r3, r0
   86fd8:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS1_LOW_THRESHOLD,false );
   86fda:	2016      	movs	r0, #22
   86fdc:	2100      	movs	r1, #0
   86fde:	4b23      	ldr	r3, [pc, #140]	; (8706c <Cl_Dlsis_deactivateallalarms+0x178>)
   86fe0:	4798      	blx	r3
   86fe2:	4603      	mov	r3, r0
   86fe4:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS3_HIGH_THRESHOLD ,false);
   86fe6:	2027      	movs	r0, #39	; 0x27
   86fe8:	2100      	movs	r1, #0
   86fea:	4b20      	ldr	r3, [pc, #128]	; (8706c <Cl_Dlsis_deactivateallalarms+0x178>)
   86fec:	4798      	blx	r3
   86fee:	4603      	mov	r3, r0
   86ff0:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS3_LOW_THRESHOLD ,false);
   86ff2:	2028      	movs	r0, #40	; 0x28
   86ff4:	2100      	movs	r1, #0
   86ff6:	4b1d      	ldr	r3, [pc, #116]	; (8706c <Cl_Dlsis_deactivateallalarms+0x178>)
   86ff8:	4798      	blx	r3
   86ffa:	4603      	mov	r3, r0
   86ffc:	71fb      	strb	r3, [r7, #7]
									
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(SENSOR_TEMP3STATUS,false );
   86ffe:	2014      	movs	r0, #20
   87000:	2100      	movs	r1, #0
   87002:	4b1a      	ldr	r3, [pc, #104]	; (8706c <Cl_Dlsis_deactivateallalarms+0x178>)
   87004:	4798      	blx	r3
   87006:	4603      	mov	r3, r0
   87008:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(SENSOR_TEMP2STATUS,false );
   8700a:	2013      	movs	r0, #19
   8700c:	2100      	movs	r1, #0
   8700e:	4b17      	ldr	r3, [pc, #92]	; (8706c <Cl_Dlsis_deactivateallalarms+0x178>)
   87010:	4798      	blx	r3
   87012:	4603      	mov	r3, r0
   87014:	71fb      	strb	r3, [r7, #7]
									
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP1_HIGH_THRESHOLD,false );
   87016:	200f      	movs	r0, #15
   87018:	2100      	movs	r1, #0
   8701a:	4b14      	ldr	r3, [pc, #80]	; (8706c <Cl_Dlsis_deactivateallalarms+0x178>)
   8701c:	4798      	blx	r3
   8701e:	4603      	mov	r3, r0
   87020:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP1_LOW_THRESHOLD,false );
   87022:	2010      	movs	r0, #16
   87024:	2100      	movs	r1, #0
   87026:	4b11      	ldr	r3, [pc, #68]	; (8706c <Cl_Dlsis_deactivateallalarms+0x178>)
   87028:	4798      	blx	r3
   8702a:	4603      	mov	r3, r0
   8702c:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP2_HIGH_THRESHOLD,false );
   8702e:	2011      	movs	r0, #17
   87030:	2100      	movs	r1, #0
   87032:	4b0e      	ldr	r3, [pc, #56]	; (8706c <Cl_Dlsis_deactivateallalarms+0x178>)
   87034:	4798      	blx	r3
   87036:	4603      	mov	r3, r0
   87038:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP2_LOW_THRESHOLD,false );
   8703a:	2012      	movs	r0, #18
   8703c:	2100      	movs	r1, #0
   8703e:	4b0b      	ldr	r3, [pc, #44]	; (8706c <Cl_Dlsis_deactivateallalarms+0x178>)
   87040:	4798      	blx	r3
   87042:	4603      	mov	r3, r0
   87044:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP3_HIGH_THRESHOLD,false );
   87046:	2013      	movs	r0, #19
   87048:	2100      	movs	r1, #0
   8704a:	4b08      	ldr	r3, [pc, #32]	; (8706c <Cl_Dlsis_deactivateallalarms+0x178>)
   8704c:	4798      	blx	r3
   8704e:	4603      	mov	r3, r0
   87050:	71fb      	strb	r3, [r7, #7]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP3_LOW_THRESHOLD,false );
   87052:	2014      	movs	r0, #20
   87054:	2100      	movs	r1, #0
   87056:	4b05      	ldr	r3, [pc, #20]	; (8706c <Cl_Dlsis_deactivateallalarms+0x178>)
   87058:	4798      	blx	r3
   8705a:	4603      	mov	r3, r0
   8705c:	71fb      	strb	r3, [r7, #7]
									
	
	
	return CL_OK;
   8705e:	2300      	movs	r3, #0
}
   87060:	4618      	mov	r0, r3
   87062:	3708      	adds	r7, #8
   87064:	46bd      	mov	sp, r7
   87066:	bd80      	pop	{r7, pc}
   87068:	00087521 	.word	0x00087521
   8706c:	00082e61 	.word	0x00082e61

00087070 <Cl_Dlsis_StopDialysis>:

Cl_ReturnCodeType Cl_Dlsis_StopDialysis(void)
{
   87070:	b580      	push	{r7, lr}
   87072:	b082      	sub	sp, #8
   87074:	af00      	add	r7, sp, #0
	Cl_Uint8Type data;
	Cl_ReturnCodeType Cl_dlsisretcode = CL_OK;
   87076:	2300      	movs	r3, #0
   87078:	71fb      	strb	r3, [r7, #7]
	Cl_Dlsis_deactivateallalarms();
   8707a:	4b2b      	ldr	r3, [pc, #172]	; (87128 <Cl_Dlsis_StopDialysis+0xb8>)
   8707c:	4798      	blx	r3
				if(!((cl_dlsis_state == CL_DLSIS_STATE_IDLE ) || (cl_dlsis_state == CL_DLSIS_STATE_STOPPED )|| (cl_dlsis_state == CL_DLSIS_STATE_PAUSED ) ||(cl_dlsis_state == CL_DLSIS_STATE_CRITICAL_ALARM )  ))
   8707e:	4b2b      	ldr	r3, [pc, #172]	; (8712c <Cl_Dlsis_StopDialysis+0xbc>)
   87080:	781b      	ldrb	r3, [r3, #0]
   87082:	2b00      	cmp	r3, #0
   87084:	d04b      	beq.n	8711e <Cl_Dlsis_StopDialysis+0xae>
   87086:	4b29      	ldr	r3, [pc, #164]	; (8712c <Cl_Dlsis_StopDialysis+0xbc>)
   87088:	781b      	ldrb	r3, [r3, #0]
   8708a:	2b09      	cmp	r3, #9
   8708c:	d047      	beq.n	8711e <Cl_Dlsis_StopDialysis+0xae>
   8708e:	4b27      	ldr	r3, [pc, #156]	; (8712c <Cl_Dlsis_StopDialysis+0xbc>)
   87090:	781b      	ldrb	r3, [r3, #0]
   87092:	2b07      	cmp	r3, #7
   87094:	d043      	beq.n	8711e <Cl_Dlsis_StopDialysis+0xae>
   87096:	4b25      	ldr	r3, [pc, #148]	; (8712c <Cl_Dlsis_StopDialysis+0xbc>)
   87098:	781b      	ldrb	r3, [r3, #0]
   8709a:	2b0a      	cmp	r3, #10
   8709c:	d03f      	beq.n	8711e <Cl_Dlsis_StopDialysis+0xae>
				{

					
					 	DlsisTime.Cl_dlsissecondscounter = 0;
   8709e:	4b24      	ldr	r3, [pc, #144]	; (87130 <Cl_Dlsis_StopDialysis+0xc0>)
   870a0:	2200      	movs	r2, #0
   870a2:	701a      	strb	r2, [r3, #0]
					 	DlsisTime.Cl_dlsisMinutescounter= 0;
   870a4:	4b22      	ldr	r3, [pc, #136]	; (87130 <Cl_Dlsis_StopDialysis+0xc0>)
   870a6:	2200      	movs	r2, #0
   870a8:	705a      	strb	r2, [r3, #1]
					 	DlsisTime.Cl_dlsishourscounter= 0;
   870aa:	4b21      	ldr	r3, [pc, #132]	; (87130 <Cl_Dlsis_StopDialysis+0xc0>)
   870ac:	2200      	movs	r2, #0
   870ae:	709a      	strb	r2, [r3, #2]
					 	DlsisTime.Cl_dlsisTotalMinutescounter= 0;
   870b0:	4b1f      	ldr	r3, [pc, #124]	; (87130 <Cl_Dlsis_StopDialysis+0xc0>)
   870b2:	2200      	movs	r2, #0
   870b4:	70da      	strb	r2, [r3, #3]
					 	DlsisTime.Cl_dlsisTotalhourscounter=0;
   870b6:	4b1e      	ldr	r3, [pc, #120]	; (87130 <Cl_Dlsis_StopDialysis+0xc0>)
   870b8:	2200      	movs	r2, #0
   870ba:	711a      	strb	r2, [r3, #4]

				Cl_dlsisretcode =  sv_cntrl_deactivatevenousclamp();
   870bc:	4b1d      	ldr	r3, [pc, #116]	; (87134 <Cl_Dlsis_StopDialysis+0xc4>)
   870be:	4798      	blx	r3
   870c0:	4603      	mov	r3, r0
   870c2:	71fb      	strb	r3, [r7, #7]
				Cl_dlsisretcode =  sv_cntrl_deactivatepump(UFPUMP);
   870c4:	2004      	movs	r0, #4
   870c6:	4b1c      	ldr	r3, [pc, #112]	; (87138 <Cl_Dlsis_StopDialysis+0xc8>)
   870c8:	4798      	blx	r3
   870ca:	4603      	mov	r3, r0
   870cc:	71fb      	strb	r3, [r7, #7]
				Cl_dlsisretcode = sv_cntrl_setflowpath(FLOW_PATH_IDLE_RINSE);
   870ce:	2011      	movs	r0, #17
   870d0:	4b1a      	ldr	r3, [pc, #104]	; (8713c <Cl_Dlsis_StopDialysis+0xcc>)
   870d2:	4798      	blx	r3
   870d4:	4603      	mov	r3, r0
   870d6:	71fb      	strb	r3, [r7, #7]
				Cl_dlsisretcode = sv_cntrl_poweroffheater();
   870d8:	4b19      	ldr	r3, [pc, #100]	; (87140 <Cl_Dlsis_StopDialysis+0xd0>)
   870da:	4798      	blx	r3
   870dc:	4603      	mov	r3, r0
   870de:	71fb      	strb	r3, [r7, #7]
				Cl_dlsisretcode = SetHeaterState(CL_HEATER_STATE_OFF);
   870e0:	2004      	movs	r0, #4
   870e2:	4b18      	ldr	r3, [pc, #96]	; (87144 <Cl_Dlsis_StopDialysis+0xd4>)
   870e4:	4798      	blx	r3
   870e6:	4603      	mov	r3, r0
   870e8:	71fb      	strb	r3, [r7, #7]
				cl_bp_controller(CL_BP_EVENT_STOP,0);
   870ea:	2004      	movs	r0, #4
   870ec:	2100      	movs	r1, #0
   870ee:	4b16      	ldr	r3, [pc, #88]	; (87148 <Cl_Dlsis_StopDialysis+0xd8>)
   870f0:	4798      	blx	r3
				Cl_dlsisretcode = sv_cntrl_setflowpath(FLOW_PATH_IDLE_RINSE);
   870f2:	2011      	movs	r0, #17
   870f4:	4b11      	ldr	r3, [pc, #68]	; (8713c <Cl_Dlsis_StopDialysis+0xcc>)
   870f6:	4798      	blx	r3
   870f8:	4603      	mov	r3, r0
   870fa:	71fb      	strb	r3, [r7, #7]
				cl_dlsis_state = CL_DLSIS_STATE_IDLE;
   870fc:	4b0b      	ldr	r3, [pc, #44]	; (8712c <Cl_Dlsis_StopDialysis+0xbc>)
   870fe:	2200      	movs	r2, #0
   87100:	701a      	strb	r2, [r3, #0]
				Cl_dlsisretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DLSIS_STOPPED,&data,0);
   87102:	1dbb      	adds	r3, r7, #6
   87104:	2014      	movs	r0, #20
   87106:	4619      	mov	r1, r3
   87108:	2200      	movs	r2, #0
   8710a:	4b10      	ldr	r3, [pc, #64]	; (8714c <Cl_Dlsis_StopDialysis+0xdc>)
   8710c:	4798      	blx	r3
   8710e:	4603      	mov	r3, r0
   87110:	71fb      	strb	r3, [r7, #7]
				Cl_bc_controller(BC_EVENT_STOP);
   87112:	2005      	movs	r0, #5
   87114:	4b0e      	ldr	r3, [pc, #56]	; (87150 <Cl_Dlsis_StopDialysis+0xe0>)
   87116:	4798      	blx	r3
				bc_flag = 0;
   87118:	4b0e      	ldr	r3, [pc, #56]	; (87154 <Cl_Dlsis_StopDialysis+0xe4>)
   8711a:	2200      	movs	r2, #0
   8711c:	701a      	strb	r2, [r3, #0]
					
				}
				
				// deactivate all alarms
				
				return CL_OK;
   8711e:	2300      	movs	r3, #0
}
   87120:	4618      	mov	r0, r3
   87122:	3708      	adds	r7, #8
   87124:	46bd      	mov	sp, r7
   87126:	bd80      	pop	{r7, pc}
   87128:	00086ef5 	.word	0x00086ef5
   8712c:	20071934 	.word	0x20071934
   87130:	20072180 	.word	0x20072180
   87134:	00099e2d 	.word	0x00099e2d
   87138:	00099c69 	.word	0x00099c69
   8713c:	00099ebd 	.word	0x00099ebd
   87140:	00099cb9 	.word	0x00099cb9
   87144:	000894d9 	.word	0x000894d9
   87148:	00093305 	.word	0x00093305
   8714c:	0009ba51 	.word	0x0009ba51
   87150:	0008330d 	.word	0x0008330d
   87154:	20071953 	.word	0x20071953

00087158 <Cl_Dlsis_BypassDialysis>:

Cl_ReturnCodeType Cl_Dlsis_BypassDialysis(void)
{
   87158:	b580      	push	{r7, lr}
   8715a:	b082      	sub	sp, #8
   8715c:	af00      	add	r7, sp, #0
			Cl_Uint8Type data;
			Cl_ReturnCodeType Cl_dlsisretcode = CL_OK;
   8715e:	2300      	movs	r3, #0
   87160:	71fb      	strb	r3, [r7, #7]
			Cl_dlsisretcode = sv_cntrl_enable_bypass();
   87162:	4b5e      	ldr	r3, [pc, #376]	; (872dc <Cl_Dlsis_BypassDialysis+0x184>)
   87164:	4798      	blx	r3
   87166:	4603      	mov	r3, r0
   87168:	71fb      	strb	r3, [r7, #7]
				cl_uf_controller(CL_UF_EVENT_STOP,0);
   8716a:	2004      	movs	r0, #4
   8716c:	2100      	movs	r1, #0
   8716e:	4b5c      	ldr	r3, [pc, #368]	; (872e0 <Cl_Dlsis_BypassDialysis+0x188>)
   87170:	4798      	blx	r3
			//Cl_dlsisretcode =  sv_cntrl_deactivatepump(UFPUMP);
			
			Cl_dlsissecondscounter_1 = DlsisTime.Cl_dlsissecondscounter;
   87172:	4b5c      	ldr	r3, [pc, #368]	; (872e4 <Cl_Dlsis_BypassDialysis+0x18c>)
   87174:	781b      	ldrb	r3, [r3, #0]
   87176:	461a      	mov	r2, r3
   87178:	4b5b      	ldr	r3, [pc, #364]	; (872e8 <Cl_Dlsis_BypassDialysis+0x190>)
   8717a:	601a      	str	r2, [r3, #0]
			Cl_dlsishourscounter_1 = DlsisTime.Cl_dlsishourscounter;
   8717c:	4b59      	ldr	r3, [pc, #356]	; (872e4 <Cl_Dlsis_BypassDialysis+0x18c>)
   8717e:	789b      	ldrb	r3, [r3, #2]
   87180:	461a      	mov	r2, r3
   87182:	4b5a      	ldr	r3, [pc, #360]	; (872ec <Cl_Dlsis_BypassDialysis+0x194>)
   87184:	601a      	str	r2, [r3, #0]
			Cl_dlsisMinutescounter_1 = DlsisTime.Cl_dlsisMinutescounter;
   87186:	4b57      	ldr	r3, [pc, #348]	; (872e4 <Cl_Dlsis_BypassDialysis+0x18c>)
   87188:	785b      	ldrb	r3, [r3, #1]
   8718a:	461a      	mov	r2, r3
   8718c:	4b58      	ldr	r3, [pc, #352]	; (872f0 <Cl_Dlsis_BypassDialysis+0x198>)
   8718e:	601a      	str	r2, [r3, #0]
			Cl_dlsisTotalMinutescounter_1 = DlsisTime.Cl_dlsisTotalMinutescounter;
   87190:	4b54      	ldr	r3, [pc, #336]	; (872e4 <Cl_Dlsis_BypassDialysis+0x18c>)
   87192:	78db      	ldrb	r3, [r3, #3]
   87194:	461a      	mov	r2, r3
   87196:	4b57      	ldr	r3, [pc, #348]	; (872f4 <Cl_Dlsis_BypassDialysis+0x19c>)
   87198:	601a      	str	r2, [r3, #0]
			Cl_dlsisTotalhourscounter_1 = DlsisTime.Cl_dlsisTotalhourscounter;
   8719a:	4b52      	ldr	r3, [pc, #328]	; (872e4 <Cl_Dlsis_BypassDialysis+0x18c>)
   8719c:	791b      	ldrb	r3, [r3, #4]
   8719e:	461a      	mov	r2, r3
   871a0:	4b55      	ldr	r3, [pc, #340]	; (872f8 <Cl_Dlsis_BypassDialysis+0x1a0>)
   871a2:	601a      	str	r2, [r3, #0]
// 			DlsisTime.Cl_dlsissecondscounter = 0;
// 			DlsisTime.Cl_dlsishourscounter = 0;
// 			DlsisTime.Cl_dlsisMinutescounter = 0;
// 			DlsisTime.Cl_dlsisTotalhourscounter = 0;
// 			 DlsisTime.Cl_dlsisTotalMinutescounter = 0;
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,false );
   871a4:	2001      	movs	r0, #1
   871a6:	2100      	movs	r1, #0
   871a8:	4b54      	ldr	r3, [pc, #336]	; (872fc <Cl_Dlsis_BypassDialysis+0x1a4>)
   871aa:	4798      	blx	r3
   871ac:	4603      	mov	r3, r0
   871ae:	71fb      	strb	r3, [r7, #7]
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms(APTSTATUS_HIGH,false );
   871b0:	2024      	movs	r0, #36	; 0x24
   871b2:	2100      	movs	r1, #0
   871b4:	4b51      	ldr	r3, [pc, #324]	; (872fc <Cl_Dlsis_BypassDialysis+0x1a4>)
   871b6:	4798      	blx	r3
   871b8:	4603      	mov	r3, r0
   871ba:	71fb      	strb	r3, [r7, #7]
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms(APTSTATUS_LOW,false );
   871bc:	2023      	movs	r0, #35	; 0x23
   871be:	2100      	movs	r1, #0
   871c0:	4b4e      	ldr	r3, [pc, #312]	; (872fc <Cl_Dlsis_BypassDialysis+0x1a4>)
   871c2:	4798      	blx	r3
   871c4:	4603      	mov	r3, r0
   871c6:	71fb      	strb	r3, [r7, #7]
		Cl_dlsisretcode =  Cl_AlarmActivateAlarms(VPTSTATUS_HIGH,false );
   871c8:	2026      	movs	r0, #38	; 0x26
   871ca:	2100      	movs	r1, #0
   871cc:	4b4b      	ldr	r3, [pc, #300]	; (872fc <Cl_Dlsis_BypassDialysis+0x1a4>)
   871ce:	4798      	blx	r3
   871d0:	4603      	mov	r3, r0
   871d2:	71fb      	strb	r3, [r7, #7]
		Cl_dlsisretcode =  Cl_AlarmActivateAlarms(VPTSTATUS_LOW,false );
   871d4:	2025      	movs	r0, #37	; 0x25
   871d6:	2100      	movs	r1, #0
   871d8:	4b48      	ldr	r3, [pc, #288]	; (872fc <Cl_Dlsis_BypassDialysis+0x1a4>)
   871da:	4798      	blx	r3
   871dc:	4603      	mov	r3, r0
   871de:	71fb      	strb	r3, [r7, #7]
	Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS1_HIGH_THRESHOLD,false );
   871e0:	2015      	movs	r0, #21
   871e2:	2100      	movs	r1, #0
   871e4:	4b45      	ldr	r3, [pc, #276]	; (872fc <Cl_Dlsis_BypassDialysis+0x1a4>)
   871e6:	4798      	blx	r3
   871e8:	4603      	mov	r3, r0
   871ea:	71fb      	strb	r3, [r7, #7]
	Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS1_LOW_THRESHOLD,false );
   871ec:	2016      	movs	r0, #22
   871ee:	2100      	movs	r1, #0
   871f0:	4b42      	ldr	r3, [pc, #264]	; (872fc <Cl_Dlsis_BypassDialysis+0x1a4>)
   871f2:	4798      	blx	r3
   871f4:	4603      	mov	r3, r0
   871f6:	71fb      	strb	r3, [r7, #7]
	Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS2_HIGH_THRESHOLD,false );
   871f8:	2017      	movs	r0, #23
   871fa:	2100      	movs	r1, #0
   871fc:	4b3f      	ldr	r3, [pc, #252]	; (872fc <Cl_Dlsis_BypassDialysis+0x1a4>)
   871fe:	4798      	blx	r3
   87200:	4603      	mov	r3, r0
   87202:	71fb      	strb	r3, [r7, #7]
	Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS2_LOW_THRESHOLD,false );
   87204:	2018      	movs	r0, #24
   87206:	2100      	movs	r1, #0
   87208:	4b3c      	ldr	r3, [pc, #240]	; (872fc <Cl_Dlsis_BypassDialysis+0x1a4>)
   8720a:	4798      	blx	r3
   8720c:	4603      	mov	r3, r0
   8720e:	71fb      	strb	r3, [r7, #7]
	Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS3_HIGH_THRESHOLD,false );
   87210:	2027      	movs	r0, #39	; 0x27
   87212:	2100      	movs	r1, #0
   87214:	4b39      	ldr	r3, [pc, #228]	; (872fc <Cl_Dlsis_BypassDialysis+0x1a4>)
   87216:	4798      	blx	r3
   87218:	4603      	mov	r3, r0
   8721a:	71fb      	strb	r3, [r7, #7]
	Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS3_LOW_THRESHOLD,false );
   8721c:	2028      	movs	r0, #40	; 0x28
   8721e:	2100      	movs	r1, #0
   87220:	4b36      	ldr	r3, [pc, #216]	; (872fc <Cl_Dlsis_BypassDialysis+0x1a4>)
   87222:	4798      	blx	r3
   87224:	4603      	mov	r3, r0
   87226:	71fb      	strb	r3, [r7, #7]
		//	 Cl_dlsisretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON,false );
		//	 Cl_dlsisretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_ON_TO_OFF ,false);
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER1STATUS_CLOSED,false );
   87228:	2005      	movs	r0, #5
   8722a:	2100      	movs	r1, #0
   8722c:	4b33      	ldr	r3, [pc, #204]	; (872fc <Cl_Dlsis_BypassDialysis+0x1a4>)
   8722e:	4798      	blx	r3
   87230:	4603      	mov	r3, r0
   87232:	71fb      	strb	r3, [r7, #7]
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER2STATUS_CLOSED,false );
   87234:	2006      	movs	r0, #6
   87236:	2100      	movs	r1, #0
   87238:	4b30      	ldr	r3, [pc, #192]	; (872fc <Cl_Dlsis_BypassDialysis+0x1a4>)
   8723a:	4798      	blx	r3
   8723c:	4603      	mov	r3, r0
   8723e:	71fb      	strb	r3, [r7, #7]
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER1STATUS_OPEN,false );
   87240:	2003      	movs	r0, #3
   87242:	2100      	movs	r1, #0
   87244:	4b2d      	ldr	r3, [pc, #180]	; (872fc <Cl_Dlsis_BypassDialysis+0x1a4>)
   87246:	4798      	blx	r3
   87248:	4603      	mov	r3, r0
   8724a:	71fb      	strb	r3, [r7, #7]
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER2STATUS_OPEN,false );
   8724c:	2004      	movs	r0, #4
   8724e:	2100      	movs	r1, #0
   87250:	4b2a      	ldr	r3, [pc, #168]	; (872fc <Cl_Dlsis_BypassDialysis+0x1a4>)
   87252:	4798      	blx	r3
   87254:	4603      	mov	r3, r0
   87256:	71fb      	strb	r3, [r7, #7]
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_STATUS_LOW,false );
   87258:	2007      	movs	r0, #7
   8725a:	2100      	movs	r1, #0
   8725c:	4b27      	ldr	r3, [pc, #156]	; (872fc <Cl_Dlsis_BypassDialysis+0x1a4>)
   8725e:	4798      	blx	r3
   87260:	4603      	mov	r3, r0
   87262:	71fb      	strb	r3, [r7, #7]
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_STATUS_HIGH,false );
   87264:	2008      	movs	r0, #8
   87266:	2100      	movs	r1, #0
   87268:	4b24      	ldr	r3, [pc, #144]	; (872fc <Cl_Dlsis_BypassDialysis+0x1a4>)
   8726a:	4798      	blx	r3
   8726c:	4603      	mov	r3, r0
   8726e:	71fb      	strb	r3, [r7, #7]
			 //Cl_dlsisretcode =  Cl_AlarmActivateAlarms( ABD_EVENT,true );
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms(ACID_IN_OPEN,false);
   87270:	2029      	movs	r0, #41	; 0x29
   87272:	2100      	movs	r1, #0
   87274:	4b21      	ldr	r3, [pc, #132]	; (872fc <Cl_Dlsis_BypassDialysis+0x1a4>)
   87276:	4798      	blx	r3
   87278:	4603      	mov	r3, r0
   8727a:	71fb      	strb	r3, [r7, #7]
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BICARB_IN_OPEN,false );
   8727c:	202b      	movs	r0, #43	; 0x2b
   8727e:	2100      	movs	r1, #0
   87280:	4b1e      	ldr	r3, [pc, #120]	; (872fc <Cl_Dlsis_BypassDialysis+0x1a4>)
   87282:	4798      	blx	r3
   87284:	4603      	mov	r3, r0
   87286:	71fb      	strb	r3, [r7, #7]
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms( BD_EVENT,false );
   87288:	2021      	movs	r0, #33	; 0x21
   8728a:	2100      	movs	r1, #0
   8728c:	4b1b      	ldr	r3, [pc, #108]	; (872fc <Cl_Dlsis_BypassDialysis+0x1a4>)
   8728e:	4798      	blx	r3
   87290:	4603      	mov	r3, r0
   87292:	71fb      	strb	r3, [r7, #7]
			 //Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BLD_EVENT,true );
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP3_HIGH_THRESHOLD,false );
   87294:	2013      	movs	r0, #19
   87296:	2100      	movs	r1, #0
   87298:	4b18      	ldr	r3, [pc, #96]	; (872fc <Cl_Dlsis_BypassDialysis+0x1a4>)
   8729a:	4798      	blx	r3
   8729c:	4603      	mov	r3, r0
   8729e:	71fb      	strb	r3, [r7, #7]
			 Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP3_LOW_THRESHOLD,false );
   872a0:	2014      	movs	r0, #20
   872a2:	2100      	movs	r1, #0
   872a4:	4b15      	ldr	r3, [pc, #84]	; (872fc <Cl_Dlsis_BypassDialysis+0x1a4>)
   872a6:	4798      	blx	r3
   872a8:	4603      	mov	r3, r0
   872aa:	71fb      	strb	r3, [r7, #7]
			 
			cl_dlsis_state = CL_DLSIS_STATE_BYPASS;
   872ac:	4b14      	ldr	r3, [pc, #80]	; (87300 <Cl_Dlsis_BypassDialysis+0x1a8>)
   872ae:	2208      	movs	r2, #8
   872b0:	701a      	strb	r2, [r3, #0]
						
			Cl_dlsisretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DLSIS_BYPASS_ON,&data,0);
   872b2:	1dbb      	adds	r3, r7, #6
   872b4:	2041      	movs	r0, #65	; 0x41
   872b6:	4619      	mov	r1, r3
   872b8:	2200      	movs	r2, #0
   872ba:	4b12      	ldr	r3, [pc, #72]	; (87304 <Cl_Dlsis_BypassDialysis+0x1ac>)
   872bc:	4798      	blx	r3
   872be:	4603      	mov	r3, r0
   872c0:	71fb      	strb	r3, [r7, #7]
	
			Cl_dlsisretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DLSIS_PAUSED,&data,0);
   872c2:	1dbb      	adds	r3, r7, #6
   872c4:	2040      	movs	r0, #64	; 0x40
   872c6:	4619      	mov	r1, r3
   872c8:	2200      	movs	r2, #0
   872ca:	4b0e      	ldr	r3, [pc, #56]	; (87304 <Cl_Dlsis_BypassDialysis+0x1ac>)
   872cc:	4798      	blx	r3
   872ce:	4603      	mov	r3, r0
   872d0:	71fb      	strb	r3, [r7, #7]
return CL_OK;	
   872d2:	2300      	movs	r3, #0
}
   872d4:	4618      	mov	r0, r3
   872d6:	3708      	adds	r7, #8
   872d8:	46bd      	mov	sp, r7
   872da:	bd80      	pop	{r7, pc}
   872dc:	00099e79 	.word	0x00099e79
   872e0:	00095df5 	.word	0x00095df5
   872e4:	20072180 	.word	0x20072180
   872e8:	20071938 	.word	0x20071938
   872ec:	20071940 	.word	0x20071940
   872f0:	2007193c 	.word	0x2007193c
   872f4:	20071944 	.word	0x20071944
   872f8:	20071948 	.word	0x20071948
   872fc:	00082e61 	.word	0x00082e61
   87300:	20071934 	.word	0x20071934
   87304:	0009ba51 	.word	0x0009ba51

00087308 <Cl_Dlsis_BypassOff>:

Cl_ReturnCodeType Cl_Dlsis_BypassOff(void)
{
   87308:	b580      	push	{r7, lr}
   8730a:	b082      	sub	sp, #8
   8730c:	af00      	add	r7, sp, #0
	Cl_Uint8Type data;
	Cl_ReturnCodeType Cl_dlsisretcode = CL_OK;
   8730e:	2300      	movs	r3, #0
   87310:	71fb      	strb	r3, [r7, #7]
	Cl_dlsisretcode = sv_cntrl_disable_bypass();
   87312:	4b4f      	ldr	r3, [pc, #316]	; (87450 <Cl_Dlsis_BypassOff+0x148>)
   87314:	4798      	blx	r3
   87316:	4603      	mov	r3, r0
   87318:	71fb      	strb	r3, [r7, #7]
	
	 DlsisTime.Cl_dlsissecondscounter = Cl_dlsissecondscounter_1 ;
   8731a:	4b4e      	ldr	r3, [pc, #312]	; (87454 <Cl_Dlsis_BypassOff+0x14c>)
   8731c:	681b      	ldr	r3, [r3, #0]
   8731e:	b2da      	uxtb	r2, r3
   87320:	4b4d      	ldr	r3, [pc, #308]	; (87458 <Cl_Dlsis_BypassOff+0x150>)
   87322:	701a      	strb	r2, [r3, #0]
	 DlsisTime.Cl_dlsishourscounter = Cl_dlsishourscounter_1 ;
   87324:	4b4d      	ldr	r3, [pc, #308]	; (8745c <Cl_Dlsis_BypassOff+0x154>)
   87326:	681b      	ldr	r3, [r3, #0]
   87328:	b2da      	uxtb	r2, r3
   8732a:	4b4b      	ldr	r3, [pc, #300]	; (87458 <Cl_Dlsis_BypassOff+0x150>)
   8732c:	709a      	strb	r2, [r3, #2]
	 DlsisTime.Cl_dlsisMinutescounter = Cl_dlsisMinutescounter_1 ;
   8732e:	4b4c      	ldr	r3, [pc, #304]	; (87460 <Cl_Dlsis_BypassOff+0x158>)
   87330:	681b      	ldr	r3, [r3, #0]
   87332:	b2da      	uxtb	r2, r3
   87334:	4b48      	ldr	r3, [pc, #288]	; (87458 <Cl_Dlsis_BypassOff+0x150>)
   87336:	705a      	strb	r2, [r3, #1]
	DlsisTime.Cl_dlsisTotalMinutescounter =  Cl_dlsisTotalMinutescounter_1;
   87338:	4b4a      	ldr	r3, [pc, #296]	; (87464 <Cl_Dlsis_BypassOff+0x15c>)
   8733a:	681b      	ldr	r3, [r3, #0]
   8733c:	b2da      	uxtb	r2, r3
   8733e:	4b46      	ldr	r3, [pc, #280]	; (87458 <Cl_Dlsis_BypassOff+0x150>)
   87340:	70da      	strb	r2, [r3, #3]
	  DlsisTime.Cl_dlsisTotalhourscounter = Cl_dlsisTotalhourscounter_1 ;
   87342:	4b49      	ldr	r3, [pc, #292]	; (87468 <Cl_Dlsis_BypassOff+0x160>)
   87344:	681b      	ldr	r3, [r3, #0]
   87346:	b2da      	uxtb	r2, r3
   87348:	4b43      	ldr	r3, [pc, #268]	; (87458 <Cl_Dlsis_BypassOff+0x150>)
   8734a:	711a      	strb	r2, [r3, #4]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true );
   8734c:	2001      	movs	r0, #1
   8734e:	2101      	movs	r1, #1
   87350:	4b46      	ldr	r3, [pc, #280]	; (8746c <Cl_Dlsis_BypassOff+0x164>)
   87352:	4798      	blx	r3
   87354:	4603      	mov	r3, r0
   87356:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON,true );
   87358:	203d      	movs	r0, #61	; 0x3d
   8735a:	2101      	movs	r1, #1
   8735c:	4b43      	ldr	r3, [pc, #268]	; (8746c <Cl_Dlsis_BypassOff+0x164>)
   8735e:	4798      	blx	r3
   87360:	4603      	mov	r3, r0
   87362:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_ON_TO_OFF ,true);
   87364:	203e      	movs	r0, #62	; 0x3e
   87366:	2101      	movs	r1, #1
   87368:	4b40      	ldr	r3, [pc, #256]	; (8746c <Cl_Dlsis_BypassOff+0x164>)
   8736a:	4798      	blx	r3
   8736c:	4603      	mov	r3, r0
   8736e:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER1STATUS_CLOSED,true );
   87370:	2005      	movs	r0, #5
   87372:	2101      	movs	r1, #1
   87374:	4b3d      	ldr	r3, [pc, #244]	; (8746c <Cl_Dlsis_BypassOff+0x164>)
   87376:	4798      	blx	r3
   87378:	4603      	mov	r3, r0
   8737a:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER2STATUS_CLOSED,true );
   8737c:	2006      	movs	r0, #6
   8737e:	2101      	movs	r1, #1
   87380:	4b3a      	ldr	r3, [pc, #232]	; (8746c <Cl_Dlsis_BypassOff+0x164>)
   87382:	4798      	blx	r3
   87384:	4603      	mov	r3, r0
   87386:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER1STATUS_OPEN,false );
   87388:	2003      	movs	r0, #3
   8738a:	2100      	movs	r1, #0
   8738c:	4b37      	ldr	r3, [pc, #220]	; (8746c <Cl_Dlsis_BypassOff+0x164>)
   8738e:	4798      	blx	r3
   87390:	4603      	mov	r3, r0
   87392:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER2STATUS_OPEN,false );
   87394:	2004      	movs	r0, #4
   87396:	2100      	movs	r1, #0
   87398:	4b34      	ldr	r3, [pc, #208]	; (8746c <Cl_Dlsis_BypassOff+0x164>)
   8739a:	4798      	blx	r3
   8739c:	4603      	mov	r3, r0
   8739e:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_STATUS_LOW,false );
   873a0:	2007      	movs	r0, #7
   873a2:	2100      	movs	r1, #0
   873a4:	4b31      	ldr	r3, [pc, #196]	; (8746c <Cl_Dlsis_BypassOff+0x164>)
   873a6:	4798      	blx	r3
   873a8:	4603      	mov	r3, r0
   873aa:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_STATUS_HIGH,false );
   873ac:	2008      	movs	r0, #8
   873ae:	2100      	movs	r1, #0
   873b0:	4b2e      	ldr	r3, [pc, #184]	; (8746c <Cl_Dlsis_BypassOff+0x164>)
   873b2:	4798      	blx	r3
   873b4:	4603      	mov	r3, r0
   873b6:	71fb      	strb	r3, [r7, #7]
	  //Cl_dlsisretcode =  Cl_AlarmActivateAlarms( ABD_EVENT,true );
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(ACID_IN_CLOSED,true );
   873b8:	202a      	movs	r0, #42	; 0x2a
   873ba:	2101      	movs	r1, #1
   873bc:	4b2b      	ldr	r3, [pc, #172]	; (8746c <Cl_Dlsis_BypassOff+0x164>)
   873be:	4798      	blx	r3
   873c0:	4603      	mov	r3, r0
   873c2:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BICARB_IN_CLOSED,true );
   873c4:	202c      	movs	r0, #44	; 0x2c
   873c6:	2101      	movs	r1, #1
   873c8:	4b28      	ldr	r3, [pc, #160]	; (8746c <Cl_Dlsis_BypassOff+0x164>)
   873ca:	4798      	blx	r3
   873cc:	4603      	mov	r3, r0
   873ce:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(ACID_IN_OPEN,false );
   873d0:	2029      	movs	r0, #41	; 0x29
   873d2:	2100      	movs	r1, #0
   873d4:	4b25      	ldr	r3, [pc, #148]	; (8746c <Cl_Dlsis_BypassOff+0x164>)
   873d6:	4798      	blx	r3
   873d8:	4603      	mov	r3, r0
   873da:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BICARB_IN_OPEN,false );
   873dc:	202b      	movs	r0, #43	; 0x2b
   873de:	2100      	movs	r1, #0
   873e0:	4b22      	ldr	r3, [pc, #136]	; (8746c <Cl_Dlsis_BypassOff+0x164>)
   873e2:	4798      	blx	r3
   873e4:	4603      	mov	r3, r0
   873e6:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms( BD_EVENT,false );
   873e8:	2021      	movs	r0, #33	; 0x21
   873ea:	2100      	movs	r1, #0
   873ec:	4b1f      	ldr	r3, [pc, #124]	; (8746c <Cl_Dlsis_BypassOff+0x164>)
   873ee:	4798      	blx	r3
   873f0:	4603      	mov	r3, r0
   873f2:	71fb      	strb	r3, [r7, #7]
	  //Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BLD_EVENT,true );
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP3_HIGH_THRESHOLD,true );
   873f4:	2013      	movs	r0, #19
   873f6:	2101      	movs	r1, #1
   873f8:	4b1c      	ldr	r3, [pc, #112]	; (8746c <Cl_Dlsis_BypassOff+0x164>)
   873fa:	4798      	blx	r3
   873fc:	4603      	mov	r3, r0
   873fe:	71fb      	strb	r3, [r7, #7]
	  Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP3_LOW_THRESHOLD,true );
   87400:	2014      	movs	r0, #20
   87402:	2101      	movs	r1, #1
   87404:	4b19      	ldr	r3, [pc, #100]	; (8746c <Cl_Dlsis_BypassOff+0x164>)
   87406:	4798      	blx	r3
   87408:	4603      	mov	r3, r0
   8740a:	71fb      	strb	r3, [r7, #7]
	  
	//Cl_dlsisretcode =  sv_cntrl_activatepump(UFPUMP);
	cl_dlsis_state = CL_DLSIS_STATE_WAIT_FOR_TEMP_COND_STABILITY;//CL_DLSIS_STATE_DIALYSIS;
   8740c:	4b18      	ldr	r3, [pc, #96]	; (87470 <Cl_Dlsis_BypassOff+0x168>)
   8740e:	2202      	movs	r2, #2
   87410:	701a      	strb	r2, [r3, #0]
 	Cl_dlsisretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DLSIS_BYPASS_OFF,&data,0);
   87412:	1dbb      	adds	r3, r7, #6
   87414:	2042      	movs	r0, #66	; 0x42
   87416:	4619      	mov	r1, r3
   87418:	2200      	movs	r2, #0
   8741a:	4b16      	ldr	r3, [pc, #88]	; (87474 <Cl_Dlsis_BypassOff+0x16c>)
   8741c:	4798      	blx	r3
   8741e:	4603      	mov	r3, r0
   87420:	71fb      	strb	r3, [r7, #7]
 	Cl_dlsisretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DLSIS_RESUMED,&data,0);
   87422:	1dbb      	adds	r3, r7, #6
   87424:	2043      	movs	r0, #67	; 0x43
   87426:	4619      	mov	r1, r3
   87428:	2200      	movs	r2, #0
   8742a:	4b12      	ldr	r3, [pc, #72]	; (87474 <Cl_Dlsis_BypassOff+0x16c>)
   8742c:	4798      	blx	r3
   8742e:	4603      	mov	r3, r0
   87430:	71fb      	strb	r3, [r7, #7]
 		Cl_Dlsis_UpdateTimeInfo();
   87432:	4b11      	ldr	r3, [pc, #68]	; (87478 <Cl_Dlsis_BypassOff+0x170>)
   87434:	4798      	blx	r3
 	bypass_flag = 1;
   87436:	4b11      	ldr	r3, [pc, #68]	; (8747c <Cl_Dlsis_BypassOff+0x174>)
   87438:	2201      	movs	r2, #1
   8743a:	701a      	strb	r2, [r3, #0]
// 	
 	cl_uf_controller(CL_UF_EVENT_START,0);
   8743c:	2002      	movs	r0, #2
   8743e:	2100      	movs	r1, #0
   87440:	4b0f      	ldr	r3, [pc, #60]	; (87480 <Cl_Dlsis_BypassOff+0x178>)
   87442:	4798      	blx	r3
// 	cl_ufpumpFeedback_start();
// 	
return CL_OK;
   87444:	2300      	movs	r3, #0
}
   87446:	4618      	mov	r0, r3
   87448:	3708      	adds	r7, #8
   8744a:	46bd      	mov	sp, r7
   8744c:	bd80      	pop	{r7, pc}
   8744e:	bf00      	nop
   87450:	00099ea1 	.word	0x00099ea1
   87454:	20071938 	.word	0x20071938
   87458:	20072180 	.word	0x20072180
   8745c:	20071940 	.word	0x20071940
   87460:	2007193c 	.word	0x2007193c
   87464:	20071944 	.word	0x20071944
   87468:	20071948 	.word	0x20071948
   8746c:	00082e61 	.word	0x00082e61
   87470:	20071934 	.word	0x20071934
   87474:	0009ba51 	.word	0x0009ba51
   87478:	00086ae1 	.word	0x00086ae1
   8747c:	20071952 	.word	0x20071952
   87480:	00095df5 	.word	0x00095df5

00087484 <Cl_Dlsis_PauseDialysis>:


Cl_ReturnCodeType Cl_Dlsis_PauseDialysis(void)
{
   87484:	b580      	push	{r7, lr}
   87486:	b082      	sub	sp, #8
   87488:	af00      	add	r7, sp, #0
		Cl_Uint8Type data;
		Cl_ReturnCodeType Cl_dlsisretcode = CL_OK;
   8748a:	2300      	movs	r3, #0
   8748c:	71fb      	strb	r3, [r7, #7]
		
		if(!(cl_dlsis_state == CL_DLSIS_STATE_IDLE ) )
   8748e:	4b0f      	ldr	r3, [pc, #60]	; (874cc <Cl_Dlsis_PauseDialysis+0x48>)
   87490:	781b      	ldrb	r3, [r3, #0]
   87492:	2b00      	cmp	r3, #0
   87494:	d015      	beq.n	874c2 <Cl_Dlsis_PauseDialysis+0x3e>
		
		switch (cl_dlsis_state)
   87496:	4b0d      	ldr	r3, [pc, #52]	; (874cc <Cl_Dlsis_PauseDialysis+0x48>)
   87498:	781b      	ldrb	r3, [r3, #0]
   8749a:	3b02      	subs	r3, #2
   8749c:	2b03      	cmp	r3, #3
   8749e:	d80f      	bhi.n	874c0 <Cl_Dlsis_PauseDialysis+0x3c>
			case CL_DLSIS_STATE_WAIT_FOR_BLOOD_DETECT:
			case CL_DLSIS_STATE_DIALYSIS:
			case CL_DLSIS_STATE_UF_ACTIVATION:
			
	
			Cl_dlsisretcode = sv_cntrl_enable_bypass();
   874a0:	4b0b      	ldr	r3, [pc, #44]	; (874d0 <Cl_Dlsis_PauseDialysis+0x4c>)
   874a2:	4798      	blx	r3
   874a4:	4603      	mov	r3, r0
   874a6:	71fb      	strb	r3, [r7, #7]
					//	Cl_dlsisretcode = sv_cntrl_setflowpath(FLOW_PATH_IDLE_RINSE);
					//	Cl_dlsisretcode = sv_cntrl_poweroffheater();
					//	Cl_dlsisretcode = SetHeaterState(CL_HEATER_STATE_OFF);
					//	cl_bp_controller(CL_BP_EVENT_STOP,0);
					//	Cl_dlsisretcode = sv_cntrl_setflowpath(FLOW_PATH_IDLE_RINSE);
						cl_dlsis_state = CL_DLSIS_STATE_PAUSED;
   874a8:	4b08      	ldr	r3, [pc, #32]	; (874cc <Cl_Dlsis_PauseDialysis+0x48>)
   874aa:	2207      	movs	r2, #7
   874ac:	701a      	strb	r2, [r3, #0]
						Cl_dlsisretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DLSIS_PAUSED,&data,0);
   874ae:	1dbb      	adds	r3, r7, #6
   874b0:	2040      	movs	r0, #64	; 0x40
   874b2:	4619      	mov	r1, r3
   874b4:	2200      	movs	r2, #0
   874b6:	4b07      	ldr	r3, [pc, #28]	; (874d4 <Cl_Dlsis_PauseDialysis+0x50>)
   874b8:	4798      	blx	r3
   874ba:	4603      	mov	r3, r0
   874bc:	71fb      	strb	r3, [r7, #7]
			
			break;
   874be:	e000      	b.n	874c2 <Cl_Dlsis_PauseDialysis+0x3e>
			default:break;
   874c0:	bf00      	nop
		}
return CL_OK;
   874c2:	2300      	movs	r3, #0
	
}
   874c4:	4618      	mov	r0, r3
   874c6:	3708      	adds	r7, #8
   874c8:	46bd      	mov	sp, r7
   874ca:	bd80      	pop	{r7, pc}
   874cc:	20071934 	.word	0x20071934
   874d0:	00099e79 	.word	0x00099e79
   874d4:	0009ba51 	.word	0x0009ba51

000874d8 <Cl_Dlsis_ProcessAlarms>:
Cl_ReturnCodeType Cl_Dlsis_ProcessAlarms( )
{
   874d8:	b580      	push	{r7, lr}
   874da:	b082      	sub	sp, #8
   874dc:	af00      	add	r7, sp, #0
		Cl_ReturnCodeType 	Cl_dlsisretcode = CL_OK;
   874de:	2300      	movs	r3, #0
   874e0:	71fb      	strb	r3, [r7, #7]
		ClDlsisAlarmIdType  ClDlsisAlarmId;
		Cl_Uint8Type data;
		Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   874e2:	2351      	movs	r3, #81	; 0x51
   874e4:	71bb      	strb	r3, [r7, #6]
		Cl_NewAlarmIdType cl_alarmid;
		
	   Cl_dlsisretcode = Cl_Dlsis_UpdateAlarmTable(&ClDlsisAlarmId);
   874e6:	1d7b      	adds	r3, r7, #5
   874e8:	4618      	mov	r0, r3
   874ea:	4b04      	ldr	r3, [pc, #16]	; (874fc <Cl_Dlsis_ProcessAlarms+0x24>)
   874ec:	4798      	blx	r3
   874ee:	4603      	mov	r3, r0
   874f0:	71fb      	strb	r3, [r7, #7]
	//   	Cl_rinseretcode =	Cl_Alarm_GetLastAlarm(&cl_rinsealarmid);
	//   	data = (Cl_Uint8Type)cl_rinsealarmid;
	//   	command = CON_TX_COMMAND_ALARM;
	//   	Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,0);
		   
		   return (Cl_dlsisretcode );
   874f2:	79fb      	ldrb	r3, [r7, #7]
	   	
}
   874f4:	4618      	mov	r0, r3
   874f6:	3708      	adds	r7, #8
   874f8:	46bd      	mov	sp, r7
   874fa:	bd80      	pop	{r7, pc}
   874fc:	00086bf5 	.word	0x00086bf5

00087500 <Cl_DlsisFillingFlowOff>:
	return Cl_RetVal;
	
}

Cl_ReturnCodeType  Cl_DlsisFillingFlowOff(void )
{
   87500:	b580      	push	{r7, lr}
   87502:	b082      	sub	sp, #8
   87504:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType Cl_RetVal = CL_OK;
   87506:	2300      	movs	r3, #0
   87508:	71fb      	strb	r3, [r7, #7]
	sv_cntrl_deactivate_valve(VALVE_ID1);
   8750a:	2001      	movs	r0, #1
   8750c:	4b03      	ldr	r3, [pc, #12]	; (8751c <Cl_DlsisFillingFlowOff+0x1c>)
   8750e:	4798      	blx	r3
	//cl_gfillinprogress = false;
	return Cl_RetVal;
   87510:	79fb      	ldrb	r3, [r7, #7]
	
}
   87512:	4618      	mov	r0, r3
   87514:	3708      	adds	r7, #8
   87516:	46bd      	mov	sp, r7
   87518:	bd80      	pop	{r7, pc}
   8751a:	bf00      	nop
   8751c:	00099ced 	.word	0x00099ced

00087520 <Cl_Dlsis_ResetAlertsforReassertion>:
Cl_ReturnCodeType Cl_Dlsis_ResetAlertsforReassertion(void )
{
   87520:	b580      	push	{r7, lr}
   87522:	b082      	sub	sp, #8
   87524:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType 	Cl_dlsisretcode = CL_OK;
   87526:	2300      	movs	r3, #0
   87528:	71fb      	strb	r3, [r7, #7]
	ClDlsisAlarmIdType ClDlsisAlarmId;
	Cl_Uint8Type data;
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   8752a:	2351      	movs	r3, #81	; 0x51
   8752c:	71bb      	strb	r3, [r7, #6]
	Cl_NewAlarmIdType cl_dlsisalarmid;
	
	Cl_DlsisAlarmTable[CL_DLSIS_ALARM_HOLDER1STATUS_CLOSE].IsRaised = false;
   8752e:	4b55      	ldr	r3, [pc, #340]	; (87684 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   87530:	2200      	movs	r2, #0
   87532:	70da      	strb	r2, [r3, #3]
	Cl_DlsisAlarmTable[CL_DLSIS_ALARM_HOLDER2STATUS_CLOSE].IsRaised = false;
   87534:	4b53      	ldr	r3, [pc, #332]	; (87684 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   87536:	2200      	movs	r2, #0
   87538:	729a      	strb	r2, [r3, #10]
	Cl_AlarmResetAlarm(HOLDER1STATUS_CLOSED);
   8753a:	2005      	movs	r0, #5
   8753c:	4b52      	ldr	r3, [pc, #328]	; (87688 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   8753e:	4798      	blx	r3
	Cl_AlarmResetAlarm(HOLDER2STATUS_CLOSED);
   87540:	2006      	movs	r0, #6
   87542:	4b51      	ldr	r3, [pc, #324]	; (87688 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   87544:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_DLSIS_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   87546:	4b4f      	ldr	r3, [pc, #316]	; (87684 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   87548:	2200      	movs	r2, #0
   8754a:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	Cl_AlarmResetAlarm(BLOODDOOR_STATUS_OPEN);
   8754e:	2001      	movs	r0, #1
   87550:	4b4d      	ldr	r3, [pc, #308]	; (87688 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   87552:	4798      	blx	r3
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_STATUS_HIGH].IsRaised = false;
	//Cl_AlarmResetAlarm(COND_STATUS_HIGH);
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_DAC_OPEN].IsRaised = false;
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_DAC_RO].IsRaised = false;
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_DAC_HIGH].IsRaised = false;
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_PS1_HIGH_THRESHOLD].IsRaised = false;
   87554:	4b4b      	ldr	r3, [pc, #300]	; (87684 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   87556:	2200      	movs	r2, #0
   87558:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_PS1_LOW_THRESHOLD].IsRaised = false;
   8755c:	4b49      	ldr	r3, [pc, #292]	; (87684 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   8755e:	2200      	movs	r2, #0
   87560:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	Cl_AlarmResetAlarm(PS1_HIGH_THRESHOLD);
   87564:	2015      	movs	r0, #21
   87566:	4b48      	ldr	r3, [pc, #288]	; (87688 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   87568:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS1_LOW_THRESHOLD);
   8756a:	2016      	movs	r0, #22
   8756c:	4b46      	ldr	r3, [pc, #280]	; (87688 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   8756e:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_PS2_HIGH_THRESHOLD].IsRaised = false;
   87570:	4b44      	ldr	r3, [pc, #272]	; (87684 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   87572:	2200      	movs	r2, #0
   87574:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_PS2_LOW_THRESHOLD].IsRaised = false;
   87578:	4b42      	ldr	r3, [pc, #264]	; (87684 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   8757a:	2200      	movs	r2, #0
   8757c:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	Cl_AlarmResetAlarm(PS2_HIGH_THRESHOLD);
   87580:	2017      	movs	r0, #23
   87582:	4b41      	ldr	r3, [pc, #260]	; (87688 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   87584:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS2_LOW_THRESHOLD);
   87586:	2018      	movs	r0, #24
   87588:	4b3f      	ldr	r3, [pc, #252]	; (87688 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   8758a:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_PS3_HIGH_THRESHOLD].IsRaised = false;
   8758c:	4b3d      	ldr	r3, [pc, #244]	; (87684 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   8758e:	2200      	movs	r2, #0
   87590:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_PS3_LOW_THRESHOLD].IsRaised = false;
   87594:	4b3b      	ldr	r3, [pc, #236]	; (87684 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   87596:	2200      	movs	r2, #0
   87598:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	Cl_AlarmResetAlarm(PS3_HIGH_THRESHOLD);
   8759c:	2027      	movs	r0, #39	; 0x27
   8759e:	4b3a      	ldr	r3, [pc, #232]	; (87688 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   875a0:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS3_LOW_THRESHOLD);
   875a2:	2028      	movs	r0, #40	; 0x28
   875a4:	4b38      	ldr	r3, [pc, #224]	; (87688 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   875a6:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_DLSIS_BDSTATUS].IsRaised = false;
   875a8:	4b36      	ldr	r3, [pc, #216]	; (87684 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   875aa:	2200      	movs	r2, #0
   875ac:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	Cl_AlarmResetAlarm(BD_EVENT);
   875b0:	2021      	movs	r0, #33	; 0x21
   875b2:	4b35      	ldr	r3, [pc, #212]	; (87688 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   875b4:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_DLSIS_ABDSTATUS].IsRaised = false;
   875b6:	4b33      	ldr	r3, [pc, #204]	; (87684 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   875b8:	2200      	movs	r2, #0
   875ba:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	Cl_AlarmResetAlarm(ABD_EVENT);
   875be:	2020      	movs	r0, #32
   875c0:	4b31      	ldr	r3, [pc, #196]	; (87688 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   875c2:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_DLSIS_BLDSTATUS].IsRaised = false;
   875c4:	4b2f      	ldr	r3, [pc, #188]	; (87684 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   875c6:	2200      	movs	r2, #0
   875c8:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	Cl_AlarmResetAlarm(BLD_EVENT);
   875cc:	2022      	movs	r0, #34	; 0x22
   875ce:	4b2e      	ldr	r3, [pc, #184]	; (87688 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   875d0:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_DLSIS_APTSTATUS_HIGH].IsRaised = false;
   875d2:	4b2c      	ldr	r3, [pc, #176]	; (87684 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   875d4:	2200      	movs	r2, #0
   875d6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	Cl_DlsisAlarmTable[CL_DLSIS_APTSTATUS_LOW].IsRaised = false;
   875da:	4b2a      	ldr	r3, [pc, #168]	; (87684 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   875dc:	2200      	movs	r2, #0
   875de:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
	Cl_AlarmResetAlarm(APTSTATUS_HIGH);
   875e2:	2024      	movs	r0, #36	; 0x24
   875e4:	4b28      	ldr	r3, [pc, #160]	; (87688 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   875e6:	4798      	blx	r3
	Cl_AlarmResetAlarm(APTSTATUS_LOW);
   875e8:	2023      	movs	r0, #35	; 0x23
   875ea:	4b27      	ldr	r3, [pc, #156]	; (87688 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   875ec:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_DLSIS_VPTSTATUS_HIGH].IsRaised = false;
   875ee:	4b25      	ldr	r3, [pc, #148]	; (87684 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   875f0:	2200      	movs	r2, #0
   875f2:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
	Cl_DlsisAlarmTable[CL_DLSIS_VPTSTATUS_LOW].IsRaised = false;
   875f6:	4b23      	ldr	r3, [pc, #140]	; (87684 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   875f8:	2200      	movs	r2, #0
   875fa:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	Cl_AlarmResetAlarm(VPTSTATUS_HIGH);
   875fe:	2026      	movs	r0, #38	; 0x26
   87600:	4b21      	ldr	r3, [pc, #132]	; (87688 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   87602:	4798      	blx	r3
	Cl_AlarmResetAlarm(VPTSTATUS_LOW);
   87604:	2025      	movs	r0, #37	; 0x25
   87606:	4b20      	ldr	r3, [pc, #128]	; (87688 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   87608:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_DLSIS_COND_STATUS_LOW].IsRaised = false;
   8760a:	4b1e      	ldr	r3, [pc, #120]	; (87684 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   8760c:	2200      	movs	r2, #0
   8760e:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
	Cl_DlsisAlarmTable[CL_DLSIS_COND_STATUS_HIGH].IsRaised = false;
   87612:	4b1c      	ldr	r3, [pc, #112]	; (87684 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   87614:	2200      	movs	r2, #0
   87616:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	Cl_AlarmResetAlarm(COND_STATUS_LOW);
   8761a:	2007      	movs	r0, #7
   8761c:	4b1a      	ldr	r3, [pc, #104]	; (87688 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   8761e:	4798      	blx	r3
	Cl_AlarmResetAlarm(COND_STATUS_HIGH);
   87620:	2008      	movs	r0, #8
   87622:	4b19      	ldr	r3, [pc, #100]	; (87688 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   87624:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_TEMP3_HIGH_THRESHOLD].IsRaised = false;
   87626:	4b17      	ldr	r3, [pc, #92]	; (87684 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   87628:	2200      	movs	r2, #0
   8762a:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_TEMP3_LOW_THRESHOLD].IsRaised = false;
   8762e:	4b15      	ldr	r3, [pc, #84]	; (87684 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   87630:	2200      	movs	r2, #0
   87632:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
	Cl_AlarmResetAlarm(TEMP3_HIGH_THRESHOLD);
   87636:	2013      	movs	r0, #19
   87638:	4b13      	ldr	r3, [pc, #76]	; (87688 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   8763a:	4798      	blx	r3
	Cl_AlarmResetAlarm(TEMP3_LOW_THRESHOLD);
   8763c:	2014      	movs	r0, #20
   8763e:	4b12      	ldr	r3, [pc, #72]	; (87688 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   87640:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_TEMP2_HIGH_THRESHOLD].IsRaised = false;
   87642:	4b10      	ldr	r3, [pc, #64]	; (87684 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   87644:	2200      	movs	r2, #0
   87646:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_TEMP2_LOW_THRESHOLD].IsRaised = false;
   8764a:	4b0e      	ldr	r3, [pc, #56]	; (87684 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   8764c:	2200      	movs	r2, #0
   8764e:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
	Cl_AlarmResetAlarm(TEMP2_HIGH_THRESHOLD);
   87652:	2011      	movs	r0, #17
   87654:	4b0c      	ldr	r3, [pc, #48]	; (87688 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   87656:	4798      	blx	r3
	Cl_AlarmResetAlarm(TEMP2_LOW_THRESHOLD);
   87658:	2012      	movs	r0, #18
   8765a:	4b0b      	ldr	r3, [pc, #44]	; (87688 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   8765c:	4798      	blx	r3
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_TEMP1_HIGH_THRESHOLD].IsRaised = false;
   8765e:	4b09      	ldr	r3, [pc, #36]	; (87684 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   87660:	2200      	movs	r2, #0
   87662:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
	Cl_DlsisAlarmTable[CL_Dlsis_ALARM_TEMP1_LOW_THRESHOLD].IsRaised = false;
   87666:	4b07      	ldr	r3, [pc, #28]	; (87684 <Cl_Dlsis_ResetAlertsforReassertion+0x164>)
   87668:	2200      	movs	r2, #0
   8766a:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
	Cl_AlarmResetAlarm(TEMP1_HIGH_THRESHOLD);
   8766e:	200f      	movs	r0, #15
   87670:	4b05      	ldr	r3, [pc, #20]	; (87688 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   87672:	4798      	blx	r3
	Cl_AlarmResetAlarm(TEMP1_LOW_THRESHOLD);
   87674:	2010      	movs	r0, #16
   87676:	4b04      	ldr	r3, [pc, #16]	; (87688 <Cl_Dlsis_ResetAlertsforReassertion+0x168>)
   87678:	4798      	blx	r3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_FLOW_LOW_FLOWRATE].IsRaised = false;
	Cl_RinseAlarmTable[CL_RINSE_ALARM_LEVEL_SWITCH_LOW_TOGGLERATE].IsRaised = false;*/
	
	
	
	return (Cl_dlsisretcode);
   8767a:	79fb      	ldrb	r3, [r7, #7]
}
   8767c:	4618      	mov	r0, r3
   8767e:	3708      	adds	r7, #8
   87680:	46bd      	mov	sp, r7
   87682:	bd80      	pop	{r7, pc}
   87684:	2007046c 	.word	0x2007046c
   87688:	00082f51 	.word	0x00082f51
   8768c:	00000000 	.word	0x00000000

00087690 <Cl_Dlsis_SenddlsisData>:

Cl_ReturnCodeType Cl_Dlsis_SenddlsisData(void)
{
   87690:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
   87694:	b099      	sub	sp, #100	; 0x64
   87696:	af00      	add	r7, sp, #0
	static float cond = 0;
	Cl_Uint8Type systemdataarray[44] =  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
   87698:	f107 0310 	add.w	r3, r7, #16
   8769c:	2200      	movs	r2, #0
   8769e:	601a      	str	r2, [r3, #0]
   876a0:	3304      	adds	r3, #4
   876a2:	2200      	movs	r2, #0
   876a4:	601a      	str	r2, [r3, #0]
   876a6:	3304      	adds	r3, #4
   876a8:	2200      	movs	r2, #0
   876aa:	601a      	str	r2, [r3, #0]
   876ac:	3304      	adds	r3, #4
   876ae:	2200      	movs	r2, #0
   876b0:	601a      	str	r2, [r3, #0]
   876b2:	3304      	adds	r3, #4
   876b4:	2200      	movs	r2, #0
   876b6:	601a      	str	r2, [r3, #0]
   876b8:	3304      	adds	r3, #4
   876ba:	2200      	movs	r2, #0
   876bc:	601a      	str	r2, [r3, #0]
   876be:	3304      	adds	r3, #4
   876c0:	2200      	movs	r2, #0
   876c2:	601a      	str	r2, [r3, #0]
   876c4:	3304      	adds	r3, #4
   876c6:	2200      	movs	r2, #0
   876c8:	601a      	str	r2, [r3, #0]
   876ca:	3304      	adds	r3, #4
   876cc:	2200      	movs	r2, #0
   876ce:	601a      	str	r2, [r3, #0]
   876d0:	3304      	adds	r3, #4
   876d2:	2200      	movs	r2, #0
   876d4:	601a      	str	r2, [r3, #0]
   876d6:	3304      	adds	r3, #4
   876d8:	2200      	movs	r2, #0
   876da:	601a      	str	r2, [r3, #0]
   876dc:	3304      	adds	r3, #4
	cl_DlsisDatatype tempdata;
	Cl_Uint16Type temp=0, temp1=0;
   876de:	2300      	movs	r3, #0
   876e0:	80fb      	strh	r3, [r7, #6]
   876e2:	2300      	movs	r3, #0
   876e4:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	static float avgtmp3=0,apt=0,vpt=0,ps1=0,ps2=0;
	static Cl_Uint32Type timecount = 0;
	Cl_ReturnCodeType Cl_dlsisretcode = CL_OK;
   876e8:	2300      	movs	r3, #0
   876ea:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	Cl_Uint8Type count = 0;
   876ee:	2300      	movs	r3, #0
   876f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   876f4:	2351      	movs	r3, #81	; 0x51
   876f6:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
	Cl_Uint16Type sensordatamillivolts;
	command = CON_TX_COMMAND_CL_SYS_STATE_DATA ;
   876fa:	232a      	movs	r3, #42	; 0x2a
   876fc:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
	systemdataarray[0] = DIALYSIS_DATA;
   87700:	2305      	movs	r3, #5
   87702:	743b      	strb	r3, [r7, #16]
	count++;
   87704:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   87708:	3301      	adds	r3, #1
   8770a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	averaging_count++;
   8770e:	4ba4      	ldr	r3, [pc, #656]	; (879a0 <Cl_Dlsis_SenddlsisData+0x310>)
   87710:	781b      	ldrb	r3, [r3, #0]
   87712:	3301      	adds	r3, #1
   87714:	b2da      	uxtb	r2, r3
   87716:	4ba2      	ldr	r3, [pc, #648]	; (879a0 <Cl_Dlsis_SenddlsisData+0x310>)
   87718:	701a      	strb	r2, [r3, #0]
	APT,
	VPT,
	TMP,
	UF_REMOVED
	*/
		Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&temp);
   8771a:	1dbb      	adds	r3, r7, #6
   8771c:	2014      	movs	r0, #20
   8771e:	4619      	mov	r1, r3
   87720:	4ba0      	ldr	r3, [pc, #640]	; (879a4 <Cl_Dlsis_SenddlsisData+0x314>)
   87722:	4798      	blx	r3
// 							res_temp_lookuptable(cal_data);
// 							//	tmp3 =	(tmp3*5 + res_temp_value)/6;
// 							temp1 = res_temp_value/10;
// //							temp1 = temp1 - 3.1+1.4;                                  // removed offset on 02.07.17
// 							temp1 = temp1 - 0.4;                                  // removed offset on 02.07.17
							temp1 = (float)temp/10;
   87724:	88fa      	ldrh	r2, [r7, #6]
   87726:	4ba0      	ldr	r3, [pc, #640]	; (879a8 <Cl_Dlsis_SenddlsisData+0x318>)
   87728:	4610      	mov	r0, r2
   8772a:	4798      	blx	r3
   8772c:	4602      	mov	r2, r0
   8772e:	4b9f      	ldr	r3, [pc, #636]	; (879ac <Cl_Dlsis_SenddlsisData+0x31c>)
   87730:	4610      	mov	r0, r2
   87732:	499f      	ldr	r1, [pc, #636]	; (879b0 <Cl_Dlsis_SenddlsisData+0x320>)
   87734:	4798      	blx	r3
   87736:	4603      	mov	r3, r0
   87738:	461a      	mov	r2, r3
   8773a:	4b9e      	ldr	r3, [pc, #632]	; (879b4 <Cl_Dlsis_SenddlsisData+0x324>)
   8773c:	4610      	mov	r0, r2
   8773e:	4798      	blx	r3
   87740:	4603      	mov	r3, r0
   87742:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
							avgtmp3 =(avgtmp3*5 + temp1)/6;
   87746:	4b9c      	ldr	r3, [pc, #624]	; (879b8 <Cl_Dlsis_SenddlsisData+0x328>)
   87748:	681a      	ldr	r2, [r3, #0]
   8774a:	4b9c      	ldr	r3, [pc, #624]	; (879bc <Cl_Dlsis_SenddlsisData+0x32c>)
   8774c:	4610      	mov	r0, r2
   8774e:	499c      	ldr	r1, [pc, #624]	; (879c0 <Cl_Dlsis_SenddlsisData+0x330>)
   87750:	4798      	blx	r3
   87752:	4603      	mov	r3, r0
   87754:	461c      	mov	r4, r3
   87756:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
   8775a:	4b9a      	ldr	r3, [pc, #616]	; (879c4 <Cl_Dlsis_SenddlsisData+0x334>)
   8775c:	4610      	mov	r0, r2
   8775e:	4798      	blx	r3
   87760:	4602      	mov	r2, r0
   87762:	4b99      	ldr	r3, [pc, #612]	; (879c8 <Cl_Dlsis_SenddlsisData+0x338>)
   87764:	4620      	mov	r0, r4
   87766:	4611      	mov	r1, r2
   87768:	4798      	blx	r3
   8776a:	4603      	mov	r3, r0
   8776c:	461a      	mov	r2, r3
   8776e:	4b8f      	ldr	r3, [pc, #572]	; (879ac <Cl_Dlsis_SenddlsisData+0x31c>)
   87770:	4610      	mov	r0, r2
   87772:	4996      	ldr	r1, [pc, #600]	; (879cc <Cl_Dlsis_SenddlsisData+0x33c>)
   87774:	4798      	blx	r3
   87776:	4603      	mov	r3, r0
   87778:	461a      	mov	r2, r3
   8777a:	4b8f      	ldr	r3, [pc, #572]	; (879b8 <Cl_Dlsis_SenddlsisData+0x328>)
   8777c:	601a      	str	r2, [r3, #0]
							
		}
		
		uint16_t sensordata = 0;
   8777e:	2300      	movs	r3, #0
   87780:	80bb      	strh	r3, [r7, #4]
		Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_STATUS,&sensordata);
   87782:	1d3b      	adds	r3, r7, #4
   87784:	2007      	movs	r0, #7
   87786:	4619      	mov	r1, r3
   87788:	4b86      	ldr	r3, [pc, #536]	; (879a4 <Cl_Dlsis_SenddlsisData+0x314>)
   8778a:	4798      	blx	r3
// 				cond1x100 = cond_final*100; ;
// 				cond_final_X10000= (cond1x100/(1+(avgtmp3/10  -25.0)*0.021));
// 			
// 				cond_final_X10000 =( cond_final_X10000 * 5.3 )/10;

float cond_comp=0;
   8778c:	f04f 0300 	mov.w	r3, #0
   87790:	657b      	str	r3, [r7, #84]	; 0x54
float temp2=0;
   87792:	f04f 0300 	mov.w	r3, #0
   87796:	653b      	str	r3, [r7, #80]	; 0x50
float	 cond1,	cond_final, cond1x100, cond_final_X10000;
//	temp2 = temp * 0.8036;
sensordata = sensordata/10;
   87798:	88bb      	ldrh	r3, [r7, #4]
   8779a:	4a8d      	ldr	r2, [pc, #564]	; (879d0 <Cl_Dlsis_SenddlsisData+0x340>)
   8779c:	fba2 2303 	umull	r2, r3, r2, r3
   877a0:	08db      	lsrs	r3, r3, #3
   877a2:	b29b      	uxth	r3, r3
   877a4:	80bb      	strh	r3, [r7, #4]
// 
// 				float conductivity_CS3, avg_conductivity ;
// 				conductivity_CS3 = cl_utilities_CalConductivity(sensordata,avgtmp3);
				//			avg_conductivity = (avg_conductivity *9 + conductivity_CS3)/10;
				
				if(sensordata >50)
   877a6:	88bb      	ldrh	r3, [r7, #4]
   877a8:	2b32      	cmp	r3, #50	; 0x32
   877aa:	f240 8129 	bls.w	87a00 <Cl_Dlsis_SenddlsisData+0x370>
// 						averaging_count =0;
// 						avg_conductivity = avgcond;
// 
// 					}
// 					
					cond1 = sensordata/100;
   877ae:	88bb      	ldrh	r3, [r7, #4]
   877b0:	4a88      	ldr	r2, [pc, #544]	; (879d4 <Cl_Dlsis_SenddlsisData+0x344>)
   877b2:	fba2 2303 	umull	r2, r3, r2, r3
   877b6:	095b      	lsrs	r3, r3, #5
   877b8:	b29b      	uxth	r3, r3
   877ba:	461a      	mov	r2, r3
   877bc:	4b81      	ldr	r3, [pc, #516]	; (879c4 <Cl_Dlsis_SenddlsisData+0x334>)
   877be:	4610      	mov	r0, r2
   877c0:	4798      	blx	r3
   877c2:	4603      	mov	r3, r0
   877c4:	64fb      	str	r3, [r7, #76]	; 0x4c
					cond_final = 0.0001*cond1*cond1 + 0.032*cond1 +0.91 + 0.4;
   877c6:	4b84      	ldr	r3, [pc, #528]	; (879d8 <Cl_Dlsis_SenddlsisData+0x348>)
   877c8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
   877ca:	4798      	blx	r3
   877cc:	4602      	mov	r2, r0
   877ce:	460b      	mov	r3, r1
   877d0:	4c82      	ldr	r4, [pc, #520]	; (879dc <Cl_Dlsis_SenddlsisData+0x34c>)
   877d2:	4610      	mov	r0, r2
   877d4:	4619      	mov	r1, r3
   877d6:	a366      	add	r3, pc, #408	; (adr r3, 87970 <Cl_Dlsis_SenddlsisData+0x2e0>)
   877d8:	e9d3 2300 	ldrd	r2, r3, [r3]
   877dc:	47a0      	blx	r4
   877de:	4602      	mov	r2, r0
   877e0:	460b      	mov	r3, r1
   877e2:	4690      	mov	r8, r2
   877e4:	4699      	mov	r9, r3
   877e6:	4b7c      	ldr	r3, [pc, #496]	; (879d8 <Cl_Dlsis_SenddlsisData+0x348>)
   877e8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
   877ea:	4798      	blx	r3
   877ec:	4602      	mov	r2, r0
   877ee:	460b      	mov	r3, r1
   877f0:	4c7a      	ldr	r4, [pc, #488]	; (879dc <Cl_Dlsis_SenddlsisData+0x34c>)
   877f2:	4640      	mov	r0, r8
   877f4:	4649      	mov	r1, r9
   877f6:	47a0      	blx	r4
   877f8:	4602      	mov	r2, r0
   877fa:	460b      	mov	r3, r1
   877fc:	4690      	mov	r8, r2
   877fe:	4699      	mov	r9, r3
   87800:	4b75      	ldr	r3, [pc, #468]	; (879d8 <Cl_Dlsis_SenddlsisData+0x348>)
   87802:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
   87804:	4798      	blx	r3
   87806:	4602      	mov	r2, r0
   87808:	460b      	mov	r3, r1
   8780a:	4c74      	ldr	r4, [pc, #464]	; (879dc <Cl_Dlsis_SenddlsisData+0x34c>)
   8780c:	4610      	mov	r0, r2
   8780e:	4619      	mov	r1, r3
   87810:	a359      	add	r3, pc, #356	; (adr r3, 87978 <Cl_Dlsis_SenddlsisData+0x2e8>)
   87812:	e9d3 2300 	ldrd	r2, r3, [r3]
   87816:	47a0      	blx	r4
   87818:	4602      	mov	r2, r0
   8781a:	460b      	mov	r3, r1
   8781c:	4c70      	ldr	r4, [pc, #448]	; (879e0 <Cl_Dlsis_SenddlsisData+0x350>)
   8781e:	4640      	mov	r0, r8
   87820:	4649      	mov	r1, r9
   87822:	47a0      	blx	r4
   87824:	4602      	mov	r2, r0
   87826:	460b      	mov	r3, r1
   87828:	4c6d      	ldr	r4, [pc, #436]	; (879e0 <Cl_Dlsis_SenddlsisData+0x350>)
   8782a:	4610      	mov	r0, r2
   8782c:	4619      	mov	r1, r3
   8782e:	a354      	add	r3, pc, #336	; (adr r3, 87980 <Cl_Dlsis_SenddlsisData+0x2f0>)
   87830:	e9d3 2300 	ldrd	r2, r3, [r3]
   87834:	47a0      	blx	r4
   87836:	4602      	mov	r2, r0
   87838:	460b      	mov	r3, r1
   8783a:	4c69      	ldr	r4, [pc, #420]	; (879e0 <Cl_Dlsis_SenddlsisData+0x350>)
   8783c:	4610      	mov	r0, r2
   8783e:	4619      	mov	r1, r3
   87840:	a351      	add	r3, pc, #324	; (adr r3, 87988 <Cl_Dlsis_SenddlsisData+0x2f8>)
   87842:	e9d3 2300 	ldrd	r2, r3, [r3]
   87846:	47a0      	blx	r4
   87848:	4602      	mov	r2, r0
   8784a:	460b      	mov	r3, r1
   8784c:	4610      	mov	r0, r2
   8784e:	4619      	mov	r1, r3
   87850:	4b64      	ldr	r3, [pc, #400]	; (879e4 <Cl_Dlsis_SenddlsisData+0x354>)
   87852:	4798      	blx	r3
   87854:	4603      	mov	r3, r0
   87856:	64bb      	str	r3, [r7, #72]	; 0x48
					cond1x100 = cond_final*100; ;
   87858:	4b58      	ldr	r3, [pc, #352]	; (879bc <Cl_Dlsis_SenddlsisData+0x32c>)
   8785a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
   8785c:	4962      	ldr	r1, [pc, #392]	; (879e8 <Cl_Dlsis_SenddlsisData+0x358>)
   8785e:	4798      	blx	r3
   87860:	4603      	mov	r3, r0
   87862:	647b      	str	r3, [r7, #68]	; 0x44
					cond_final_X10000= (cond1x100/(1+(temp1/10  -25.0)*0.021));
   87864:	4b5c      	ldr	r3, [pc, #368]	; (879d8 <Cl_Dlsis_SenddlsisData+0x348>)
   87866:	6c78      	ldr	r0, [r7, #68]	; 0x44
   87868:	4798      	blx	r3
   8786a:	4680      	mov	r8, r0
   8786c:	4689      	mov	r9, r1
   8786e:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
   87872:	4a57      	ldr	r2, [pc, #348]	; (879d0 <Cl_Dlsis_SenddlsisData+0x340>)
   87874:	fba2 2303 	umull	r2, r3, r2, r3
   87878:	08db      	lsrs	r3, r3, #3
   8787a:	b29b      	uxth	r3, r3
   8787c:	461a      	mov	r2, r3
   8787e:	4b5b      	ldr	r3, [pc, #364]	; (879ec <Cl_Dlsis_SenddlsisData+0x35c>)
   87880:	4610      	mov	r0, r2
   87882:	4798      	blx	r3
   87884:	4602      	mov	r2, r0
   87886:	460b      	mov	r3, r1
   87888:	4c59      	ldr	r4, [pc, #356]	; (879f0 <Cl_Dlsis_SenddlsisData+0x360>)
   8788a:	4610      	mov	r0, r2
   8788c:	4619      	mov	r1, r3
   8788e:	f04f 0200 	mov.w	r2, #0
   87892:	4b58      	ldr	r3, [pc, #352]	; (879f4 <Cl_Dlsis_SenddlsisData+0x364>)
   87894:	47a0      	blx	r4
   87896:	4602      	mov	r2, r0
   87898:	460b      	mov	r3, r1
   8789a:	4c50      	ldr	r4, [pc, #320]	; (879dc <Cl_Dlsis_SenddlsisData+0x34c>)
   8789c:	4610      	mov	r0, r2
   8789e:	4619      	mov	r1, r3
   878a0:	a33b      	add	r3, pc, #236	; (adr r3, 87990 <Cl_Dlsis_SenddlsisData+0x300>)
   878a2:	e9d3 2300 	ldrd	r2, r3, [r3]
   878a6:	47a0      	blx	r4
   878a8:	4602      	mov	r2, r0
   878aa:	460b      	mov	r3, r1
   878ac:	4c4c      	ldr	r4, [pc, #304]	; (879e0 <Cl_Dlsis_SenddlsisData+0x350>)
   878ae:	4610      	mov	r0, r2
   878b0:	4619      	mov	r1, r3
   878b2:	f04f 0200 	mov.w	r2, #0
   878b6:	4b50      	ldr	r3, [pc, #320]	; (879f8 <Cl_Dlsis_SenddlsisData+0x368>)
   878b8:	47a0      	blx	r4
   878ba:	4602      	mov	r2, r0
   878bc:	460b      	mov	r3, r1
   878be:	4c4f      	ldr	r4, [pc, #316]	; (879fc <Cl_Dlsis_SenddlsisData+0x36c>)
   878c0:	4640      	mov	r0, r8
   878c2:	4649      	mov	r1, r9
   878c4:	47a0      	blx	r4
   878c6:	4602      	mov	r2, r0
   878c8:	460b      	mov	r3, r1
   878ca:	4610      	mov	r0, r2
   878cc:	4619      	mov	r1, r3
   878ce:	4b45      	ldr	r3, [pc, #276]	; (879e4 <Cl_Dlsis_SenddlsisData+0x354>)
   878d0:	4798      	blx	r3
   878d2:	4603      	mov	r3, r0
   878d4:	643b      	str	r3, [r7, #64]	; 0x40
					cond_final_X10000 =	cond_final_X10000 * 5.3 ;
   878d6:	4b40      	ldr	r3, [pc, #256]	; (879d8 <Cl_Dlsis_SenddlsisData+0x348>)
   878d8:	6c38      	ldr	r0, [r7, #64]	; 0x40
   878da:	4798      	blx	r3
   878dc:	4602      	mov	r2, r0
   878de:	460b      	mov	r3, r1
   878e0:	4c3e      	ldr	r4, [pc, #248]	; (879dc <Cl_Dlsis_SenddlsisData+0x34c>)
   878e2:	4610      	mov	r0, r2
   878e4:	4619      	mov	r1, r3
   878e6:	a32c      	add	r3, pc, #176	; (adr r3, 87998 <Cl_Dlsis_SenddlsisData+0x308>)
   878e8:	e9d3 2300 	ldrd	r2, r3, [r3]
   878ec:	47a0      	blx	r4
   878ee:	4602      	mov	r2, r0
   878f0:	460b      	mov	r3, r1
   878f2:	4610      	mov	r0, r2
   878f4:	4619      	mov	r1, r3
   878f6:	4b3b      	ldr	r3, [pc, #236]	; (879e4 <Cl_Dlsis_SenddlsisData+0x354>)
   878f8:	4798      	blx	r3
   878fa:	4603      	mov	r3, r0
   878fc:	643b      	str	r3, [r7, #64]	; 0x40
					
					//tempdata.word = avg_conductivity;
					tempdata.word = (cond_final_X10000/10);
   878fe:	4b2b      	ldr	r3, [pc, #172]	; (879ac <Cl_Dlsis_SenddlsisData+0x31c>)
   87900:	6c38      	ldr	r0, [r7, #64]	; 0x40
   87902:	492b      	ldr	r1, [pc, #172]	; (879b0 <Cl_Dlsis_SenddlsisData+0x320>)
   87904:	4798      	blx	r3
   87906:	4603      	mov	r3, r0
   87908:	461a      	mov	r2, r3
   8790a:	4b2a      	ldr	r3, [pc, #168]	; (879b4 <Cl_Dlsis_SenddlsisData+0x324>)
   8790c:	4610      	mov	r0, r2
   8790e:	4798      	blx	r3
   87910:	4603      	mov	r3, r0
   87912:	60bb      	str	r3, [r7, #8]
					systemdataarray[count++] = tempdata.bytearray[0];
   87914:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   87918:	1c5a      	adds	r2, r3, #1
   8791a:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   8791e:	7a3a      	ldrb	r2, [r7, #8]
   87920:	f107 0160 	add.w	r1, r7, #96	; 0x60
   87924:	440b      	add	r3, r1
   87926:	f803 2c50 	strb.w	r2, [r3, #-80]
					systemdataarray[count++] = tempdata.bytearray[1];
   8792a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   8792e:	1c5a      	adds	r2, r3, #1
   87930:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   87934:	7a7a      	ldrb	r2, [r7, #9]
   87936:	f107 0160 	add.w	r1, r7, #96	; 0x60
   8793a:	440b      	add	r3, r1
   8793c:	f803 2c50 	strb.w	r2, [r3, #-80]
					systemdataarray[count++] = tempdata.bytearray[2];
   87940:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   87944:	1c5a      	adds	r2, r3, #1
   87946:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   8794a:	7aba      	ldrb	r2, [r7, #10]
   8794c:	f107 0160 	add.w	r1, r7, #96	; 0x60
   87950:	440b      	add	r3, r1
   87952:	f803 2c50 	strb.w	r2, [r3, #-80]
					systemdataarray[count++] = tempdata.bytearray[3];
   87956:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   8795a:	1c5a      	adds	r2, r3, #1
   8795c:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   87960:	7afa      	ldrb	r2, [r7, #11]
   87962:	f107 0160 	add.w	r1, r7, #96	; 0x60
   87966:	440b      	add	r3, r1
   87968:	f803 2c50 	strb.w	r2, [r3, #-80]
   8796c:	e076      	b.n	87a5c <Cl_Dlsis_SenddlsisData+0x3cc>
   8796e:	bf00      	nop
   87970:	eb1c432d 	.word	0xeb1c432d
   87974:	3f1a36e2 	.word	0x3f1a36e2
   87978:	d2f1a9fc 	.word	0xd2f1a9fc
   8797c:	3fa0624d 	.word	0x3fa0624d
   87980:	51eb851f 	.word	0x51eb851f
   87984:	3fed1eb8 	.word	0x3fed1eb8
   87988:	9999999a 	.word	0x9999999a
   8798c:	3fd99999 	.word	0x3fd99999
   87990:	24dd2f1b 	.word	0x24dd2f1b
   87994:	3f958106 	.word	0x3f958106
   87998:	33333333 	.word	0x33333333
   8799c:	40153333 	.word	0x40153333
   879a0:	2007197c 	.word	0x2007197c
   879a4:	0008e7f9 	.word	0x0008e7f9
   879a8:	000a68a9 	.word	0x000a68a9
   879ac:	000a6ac1 	.word	0x000a6ac1
   879b0:	41200000 	.word	0x41200000
   879b4:	000a6d31 	.word	0x000a6d31
   879b8:	20071980 	.word	0x20071980
   879bc:	000a6959 	.word	0x000a6959
   879c0:	40a00000 	.word	0x40a00000
   879c4:	000a68b1 	.word	0x000a68b1
   879c8:	000a6749 	.word	0x000a6749
   879cc:	40c00000 	.word	0x40c00000
   879d0:	cccccccd 	.word	0xcccccccd
   879d4:	51eb851f 	.word	0x51eb851f
   879d8:	000a6031 	.word	0x000a6031
   879dc:	000a60d9 	.word	0x000a60d9
   879e0:	000a5d75 	.word	0x000a5d75
   879e4:	000a669d 	.word	0x000a669d
   879e8:	42c80000 	.word	0x42c80000
   879ec:	000a600d 	.word	0x000a600d
   879f0:	000a5d71 	.word	0x000a5d71
   879f4:	40390000 	.word	0x40390000
   879f8:	3ff00000 	.word	0x3ff00000
   879fc:	000a632d 	.word	0x000a632d
				}
			 else
				{
					tempdata.word = 0;
   87a00:	2300      	movs	r3, #0
   87a02:	60bb      	str	r3, [r7, #8]
					systemdataarray[count++] = tempdata.bytearray[0];
   87a04:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   87a08:	1c5a      	adds	r2, r3, #1
   87a0a:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   87a0e:	7a3a      	ldrb	r2, [r7, #8]
   87a10:	f107 0160 	add.w	r1, r7, #96	; 0x60
   87a14:	440b      	add	r3, r1
   87a16:	f803 2c50 	strb.w	r2, [r3, #-80]
					systemdataarray[count++] = tempdata.bytearray[1];
   87a1a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   87a1e:	1c5a      	adds	r2, r3, #1
   87a20:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   87a24:	7a7a      	ldrb	r2, [r7, #9]
   87a26:	f107 0160 	add.w	r1, r7, #96	; 0x60
   87a2a:	440b      	add	r3, r1
   87a2c:	f803 2c50 	strb.w	r2, [r3, #-80]
					systemdataarray[count++] = tempdata.bytearray[2];
   87a30:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   87a34:	1c5a      	adds	r2, r3, #1
   87a36:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   87a3a:	7aba      	ldrb	r2, [r7, #10]
   87a3c:	f107 0160 	add.w	r1, r7, #96	; 0x60
   87a40:	440b      	add	r3, r1
   87a42:	f803 2c50 	strb.w	r2, [r3, #-80]
					systemdataarray[count++] = tempdata.bytearray[3];
   87a46:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   87a4a:	1c5a      	adds	r2, r3, #1
   87a4c:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   87a50:	7afa      	ldrb	r2, [r7, #11]
   87a52:	f107 0160 	add.w	r1, r7, #96	; 0x60
   87a56:	440b      	add	r3, r1
   87a58:	f803 2c50 	strb.w	r2, [r3, #-80]
				}
					
		}
		{

			tempdata.word = (avgtmp3);
   87a5c:	4b92      	ldr	r3, [pc, #584]	; (87ca8 <Cl_Dlsis_SenddlsisData+0x618>)
   87a5e:	681a      	ldr	r2, [r3, #0]
   87a60:	4b92      	ldr	r3, [pc, #584]	; (87cac <Cl_Dlsis_SenddlsisData+0x61c>)
   87a62:	4610      	mov	r0, r2
   87a64:	4798      	blx	r3
   87a66:	4603      	mov	r3, r0
   87a68:	60bb      	str	r3, [r7, #8]
			systemdataarray[count++] = tempdata.bytearray[0];
   87a6a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   87a6e:	1c5a      	adds	r2, r3, #1
   87a70:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   87a74:	7a3a      	ldrb	r2, [r7, #8]
   87a76:	f107 0160 	add.w	r1, r7, #96	; 0x60
   87a7a:	440b      	add	r3, r1
   87a7c:	f803 2c50 	strb.w	r2, [r3, #-80]
			systemdataarray[count++] = tempdata.bytearray[1];
   87a80:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   87a84:	1c5a      	adds	r2, r3, #1
   87a86:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   87a8a:	7a7a      	ldrb	r2, [r7, #9]
   87a8c:	f107 0160 	add.w	r1, r7, #96	; 0x60
   87a90:	440b      	add	r3, r1
   87a92:	f803 2c50 	strb.w	r2, [r3, #-80]
			systemdataarray[count++] = tempdata.bytearray[2];
   87a96:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   87a9a:	1c5a      	adds	r2, r3, #1
   87a9c:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   87aa0:	7aba      	ldrb	r2, [r7, #10]
   87aa2:	f107 0160 	add.w	r1, r7, #96	; 0x60
   87aa6:	440b      	add	r3, r1
   87aa8:	f803 2c50 	strb.w	r2, [r3, #-80]
			systemdataarray[count++] = tempdata.bytearray[3];
   87aac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   87ab0:	1c5a      	adds	r2, r3, #1
   87ab2:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   87ab6:	7afa      	ldrb	r2, [r7, #11]
   87ab8:	f107 0160 	add.w	r1, r7, #96	; 0x60
   87abc:	440b      	add	r3, r1
   87abe:	f803 2c50 	strb.w	r2, [r3, #-80]
		}
		Cl_SysStat_GetSensor_Status_Query(SENSOR_APTSTATUS,&tempdata.Twobyte);
   87ac2:	f107 0308 	add.w	r3, r7, #8
   87ac6:	200b      	movs	r0, #11
   87ac8:	4619      	mov	r1, r3
   87aca:	4b79      	ldr	r3, [pc, #484]	; (87cb0 <Cl_Dlsis_SenddlsisData+0x620>)
   87acc:	4798      	blx	r3
		{
			
			sensordatamillivolts = (tempdata.Twobyte * 0.8036) ;
   87ace:	893b      	ldrh	r3, [r7, #8]
   87ad0:	461a      	mov	r2, r3
   87ad2:	4b78      	ldr	r3, [pc, #480]	; (87cb4 <Cl_Dlsis_SenddlsisData+0x624>)
   87ad4:	4610      	mov	r0, r2
   87ad6:	4798      	blx	r3
   87ad8:	4602      	mov	r2, r0
   87ada:	460b      	mov	r3, r1
   87adc:	4c76      	ldr	r4, [pc, #472]	; (87cb8 <Cl_Dlsis_SenddlsisData+0x628>)
   87ade:	4610      	mov	r0, r2
   87ae0:	4619      	mov	r1, r3
   87ae2:	a36f      	add	r3, pc, #444	; (adr r3, 87ca0 <Cl_Dlsis_SenddlsisData+0x610>)
   87ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
   87ae8:	47a0      	blx	r4
   87aea:	4602      	mov	r2, r0
   87aec:	460b      	mov	r3, r1
   87aee:	4610      	mov	r0, r2
   87af0:	4619      	mov	r1, r3
   87af2:	4b72      	ldr	r3, [pc, #456]	; (87cbc <Cl_Dlsis_SenddlsisData+0x62c>)
   87af4:	4798      	blx	r3
   87af6:	4603      	mov	r3, r0
   87af8:	87fb      	strh	r3, [r7, #62]	; 0x3e
			calibration_apt(sensordatamillivolts);
   87afa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
   87afc:	b21b      	sxth	r3, r3
   87afe:	4618      	mov	r0, r3
   87b00:	4b6f      	ldr	r3, [pc, #444]	; (87cc0 <Cl_Dlsis_SenddlsisData+0x630>)
   87b02:	4798      	blx	r3
			apt =(apt*5 + pressure_final_apt)/6;
   87b04:	4b6f      	ldr	r3, [pc, #444]	; (87cc4 <Cl_Dlsis_SenddlsisData+0x634>)
   87b06:	681a      	ldr	r2, [r3, #0]
   87b08:	4b6f      	ldr	r3, [pc, #444]	; (87cc8 <Cl_Dlsis_SenddlsisData+0x638>)
   87b0a:	4610      	mov	r0, r2
   87b0c:	496f      	ldr	r1, [pc, #444]	; (87ccc <Cl_Dlsis_SenddlsisData+0x63c>)
   87b0e:	4798      	blx	r3
   87b10:	4603      	mov	r3, r0
   87b12:	4619      	mov	r1, r3
   87b14:	4b6e      	ldr	r3, [pc, #440]	; (87cd0 <Cl_Dlsis_SenddlsisData+0x640>)
   87b16:	681a      	ldr	r2, [r3, #0]
   87b18:	4b6e      	ldr	r3, [pc, #440]	; (87cd4 <Cl_Dlsis_SenddlsisData+0x644>)
   87b1a:	4608      	mov	r0, r1
   87b1c:	4611      	mov	r1, r2
   87b1e:	4798      	blx	r3
   87b20:	4603      	mov	r3, r0
   87b22:	461a      	mov	r2, r3
   87b24:	4b6c      	ldr	r3, [pc, #432]	; (87cd8 <Cl_Dlsis_SenddlsisData+0x648>)
   87b26:	4610      	mov	r0, r2
   87b28:	496c      	ldr	r1, [pc, #432]	; (87cdc <Cl_Dlsis_SenddlsisData+0x64c>)
   87b2a:	4798      	blx	r3
   87b2c:	4603      	mov	r3, r0
   87b2e:	461a      	mov	r2, r3
   87b30:	4b64      	ldr	r3, [pc, #400]	; (87cc4 <Cl_Dlsis_SenddlsisData+0x634>)
   87b32:	601a      	str	r2, [r3, #0]
			tempdata.word	= apt;
   87b34:	4b63      	ldr	r3, [pc, #396]	; (87cc4 <Cl_Dlsis_SenddlsisData+0x634>)
   87b36:	681a      	ldr	r2, [r3, #0]
   87b38:	4b5c      	ldr	r3, [pc, #368]	; (87cac <Cl_Dlsis_SenddlsisData+0x61c>)
   87b3a:	4610      	mov	r0, r2
   87b3c:	4798      	blx	r3
   87b3e:	4603      	mov	r3, r0
   87b40:	60bb      	str	r3, [r7, #8]
			systemdataarray[count++] = tempdata.bytearray[0] ;
   87b42:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   87b46:	1c5a      	adds	r2, r3, #1
   87b48:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   87b4c:	7a3a      	ldrb	r2, [r7, #8]
   87b4e:	f107 0160 	add.w	r1, r7, #96	; 0x60
   87b52:	440b      	add	r3, r1
   87b54:	f803 2c50 	strb.w	r2, [r3, #-80]
			systemdataarray[count++] = tempdata.bytearray[1] ;
   87b58:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   87b5c:	1c5a      	adds	r2, r3, #1
   87b5e:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   87b62:	7a7a      	ldrb	r2, [r7, #9]
   87b64:	f107 0160 	add.w	r1, r7, #96	; 0x60
   87b68:	440b      	add	r3, r1
   87b6a:	f803 2c50 	strb.w	r2, [r3, #-80]
			systemdataarray[count++] = tempdata.bytearray[2] ;
   87b6e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   87b72:	1c5a      	adds	r2, r3, #1
   87b74:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   87b78:	7aba      	ldrb	r2, [r7, #10]
   87b7a:	f107 0160 	add.w	r1, r7, #96	; 0x60
   87b7e:	440b      	add	r3, r1
   87b80:	f803 2c50 	strb.w	r2, [r3, #-80]
			systemdataarray[count++] = tempdata.bytearray[3] ;
   87b84:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   87b88:	1c5a      	adds	r2, r3, #1
   87b8a:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   87b8e:	7afa      	ldrb	r2, [r7, #11]
   87b90:	f107 0160 	add.w	r1, r7, #96	; 0x60
   87b94:	440b      	add	r3, r1
   87b96:	f803 2c50 	strb.w	r2, [r3, #-80]
		}
		Cl_SysStat_GetSensor_Status_Query(SENSOR_VPTSTATUS,&tempdata.Twobyte);
   87b9a:	f107 0308 	add.w	r3, r7, #8
   87b9e:	200c      	movs	r0, #12
   87ba0:	4619      	mov	r1, r3
   87ba2:	4b43      	ldr	r3, [pc, #268]	; (87cb0 <Cl_Dlsis_SenddlsisData+0x620>)
   87ba4:	4798      	blx	r3
		{
			sensordatamillivolts = (tempdata.Twobyte * 0.8036) ;
   87ba6:	893b      	ldrh	r3, [r7, #8]
   87ba8:	461a      	mov	r2, r3
   87baa:	4b42      	ldr	r3, [pc, #264]	; (87cb4 <Cl_Dlsis_SenddlsisData+0x624>)
   87bac:	4610      	mov	r0, r2
   87bae:	4798      	blx	r3
   87bb0:	4602      	mov	r2, r0
   87bb2:	460b      	mov	r3, r1
   87bb4:	4c40      	ldr	r4, [pc, #256]	; (87cb8 <Cl_Dlsis_SenddlsisData+0x628>)
   87bb6:	4610      	mov	r0, r2
   87bb8:	4619      	mov	r1, r3
   87bba:	a339      	add	r3, pc, #228	; (adr r3, 87ca0 <Cl_Dlsis_SenddlsisData+0x610>)
   87bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
   87bc0:	47a0      	blx	r4
   87bc2:	4602      	mov	r2, r0
   87bc4:	460b      	mov	r3, r1
   87bc6:	4610      	mov	r0, r2
   87bc8:	4619      	mov	r1, r3
   87bca:	4b3c      	ldr	r3, [pc, #240]	; (87cbc <Cl_Dlsis_SenddlsisData+0x62c>)
   87bcc:	4798      	blx	r3
   87bce:	4603      	mov	r3, r0
   87bd0:	87fb      	strh	r3, [r7, #62]	; 0x3e
			calibration_vpt(sensordatamillivolts);
   87bd2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
   87bd4:	b21b      	sxth	r3, r3
   87bd6:	4618      	mov	r0, r3
   87bd8:	4b41      	ldr	r3, [pc, #260]	; (87ce0 <Cl_Dlsis_SenddlsisData+0x650>)
   87bda:	4798      	blx	r3
			vpt =(vpt*5 + pressure_final_vpt)/6;
   87bdc:	4b41      	ldr	r3, [pc, #260]	; (87ce4 <Cl_Dlsis_SenddlsisData+0x654>)
   87bde:	681a      	ldr	r2, [r3, #0]
   87be0:	4b39      	ldr	r3, [pc, #228]	; (87cc8 <Cl_Dlsis_SenddlsisData+0x638>)
   87be2:	4610      	mov	r0, r2
   87be4:	4939      	ldr	r1, [pc, #228]	; (87ccc <Cl_Dlsis_SenddlsisData+0x63c>)
   87be6:	4798      	blx	r3
   87be8:	4603      	mov	r3, r0
   87bea:	4619      	mov	r1, r3
   87bec:	4b3e      	ldr	r3, [pc, #248]	; (87ce8 <Cl_Dlsis_SenddlsisData+0x658>)
   87bee:	681a      	ldr	r2, [r3, #0]
   87bf0:	4b38      	ldr	r3, [pc, #224]	; (87cd4 <Cl_Dlsis_SenddlsisData+0x644>)
   87bf2:	4608      	mov	r0, r1
   87bf4:	4611      	mov	r1, r2
   87bf6:	4798      	blx	r3
   87bf8:	4603      	mov	r3, r0
   87bfa:	461a      	mov	r2, r3
   87bfc:	4b36      	ldr	r3, [pc, #216]	; (87cd8 <Cl_Dlsis_SenddlsisData+0x648>)
   87bfe:	4610      	mov	r0, r2
   87c00:	4936      	ldr	r1, [pc, #216]	; (87cdc <Cl_Dlsis_SenddlsisData+0x64c>)
   87c02:	4798      	blx	r3
   87c04:	4603      	mov	r3, r0
   87c06:	461a      	mov	r2, r3
   87c08:	4b36      	ldr	r3, [pc, #216]	; (87ce4 <Cl_Dlsis_SenddlsisData+0x654>)
   87c0a:	601a      	str	r2, [r3, #0]
			tempdata.word	 = vpt;
   87c0c:	4b35      	ldr	r3, [pc, #212]	; (87ce4 <Cl_Dlsis_SenddlsisData+0x654>)
   87c0e:	681a      	ldr	r2, [r3, #0]
   87c10:	4b26      	ldr	r3, [pc, #152]	; (87cac <Cl_Dlsis_SenddlsisData+0x61c>)
   87c12:	4610      	mov	r0, r2
   87c14:	4798      	blx	r3
   87c16:	4603      	mov	r3, r0
   87c18:	60bb      	str	r3, [r7, #8]
			systemdataarray[count++] = tempdata.bytearray[0] ;
   87c1a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   87c1e:	1c5a      	adds	r2, r3, #1
   87c20:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   87c24:	7a3a      	ldrb	r2, [r7, #8]
   87c26:	f107 0160 	add.w	r1, r7, #96	; 0x60
   87c2a:	440b      	add	r3, r1
   87c2c:	f803 2c50 	strb.w	r2, [r3, #-80]
			systemdataarray[count++] = tempdata.bytearray[1] ;
   87c30:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   87c34:	1c5a      	adds	r2, r3, #1
   87c36:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   87c3a:	7a7a      	ldrb	r2, [r7, #9]
   87c3c:	f107 0160 	add.w	r1, r7, #96	; 0x60
   87c40:	440b      	add	r3, r1
   87c42:	f803 2c50 	strb.w	r2, [r3, #-80]
			systemdataarray[count++] = tempdata.bytearray[2] ;
   87c46:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   87c4a:	1c5a      	adds	r2, r3, #1
   87c4c:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   87c50:	7aba      	ldrb	r2, [r7, #10]
   87c52:	f107 0160 	add.w	r1, r7, #96	; 0x60
   87c56:	440b      	add	r3, r1
   87c58:	f803 2c50 	strb.w	r2, [r3, #-80]
			systemdataarray[count++] = tempdata.bytearray[3] ;
   87c5c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   87c60:	1c5a      	adds	r2, r3, #1
   87c62:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   87c66:	7afa      	ldrb	r2, [r7, #11]
   87c68:	f107 0160 	add.w	r1, r7, #96	; 0x60
   87c6c:	440b      	add	r3, r1
   87c6e:	f803 2c50 	strb.w	r2, [r3, #-80]
		}
			Cl_SysStat_GetSensor_Status_Query(SENSOR_PS1STATUS,&tempdata.Twobyte);
   87c72:	f107 0308 	add.w	r3, r7, #8
   87c76:	200e      	movs	r0, #14
   87c78:	4619      	mov	r1, r3
   87c7a:	4b0d      	ldr	r3, [pc, #52]	; (87cb0 <Cl_Dlsis_SenddlsisData+0x620>)
   87c7c:	4798      	blx	r3
			if (tempdata.Twobyte >32268)
   87c7e:	893b      	ldrh	r3, [r7, #8]
   87c80:	f647 620c 	movw	r2, #32268	; 0x7e0c
   87c84:	4293      	cmp	r3, r2
   87c86:	d935      	bls.n	87cf4 <Cl_Dlsis_SenddlsisData+0x664>
			{
				ps1 = (65536 - tempdata.Twobyte) *(-1);
   87c88:	893b      	ldrh	r3, [r7, #8]
   87c8a:	f5a3 3280 	sub.w	r2, r3, #65536	; 0x10000
   87c8e:	4b17      	ldr	r3, [pc, #92]	; (87cec <Cl_Dlsis_SenddlsisData+0x65c>)
   87c90:	4610      	mov	r0, r2
   87c92:	4798      	blx	r3
   87c94:	4602      	mov	r2, r0
   87c96:	4b16      	ldr	r3, [pc, #88]	; (87cf0 <Cl_Dlsis_SenddlsisData+0x660>)
   87c98:	601a      	str	r2, [r3, #0]
   87c9a:	e032      	b.n	87d02 <Cl_Dlsis_SenddlsisData+0x672>
   87c9c:	f3af 8000 	nop.w
   87ca0:	58e21965 	.word	0x58e21965
   87ca4:	3fe9b717 	.word	0x3fe9b717
   87ca8:	20071980 	.word	0x20071980
   87cac:	000a6d31 	.word	0x000a6d31
   87cb0:	0008e7f9 	.word	0x0008e7f9
   87cb4:	000a600d 	.word	0x000a600d
   87cb8:	000a60d9 	.word	0x000a60d9
   87cbc:	000a665d 	.word	0x000a665d
   87cc0:	000840d9 	.word	0x000840d9
   87cc4:	20071984 	.word	0x20071984
   87cc8:	000a6959 	.word	0x000a6959
   87ccc:	40a00000 	.word	0x40a00000
   87cd0:	20072170 	.word	0x20072170
   87cd4:	000a6749 	.word	0x000a6749
   87cd8:	000a6ac1 	.word	0x000a6ac1
   87cdc:	40c00000 	.word	0x40c00000
   87ce0:	00084271 	.word	0x00084271
   87ce4:	20071988 	.word	0x20071988
   87ce8:	20071784 	.word	0x20071784
   87cec:	000a68b1 	.word	0x000a68b1
   87cf0:	2007198c 	.word	0x2007198c
			}
			else
			ps1 = (float)tempdata.Twobyte;
   87cf4:	893a      	ldrh	r2, [r7, #8]
   87cf6:	4b2e      	ldr	r3, [pc, #184]	; (87db0 <Cl_Dlsis_SenddlsisData+0x720>)
   87cf8:	4610      	mov	r0, r2
   87cfa:	4798      	blx	r3
   87cfc:	4602      	mov	r2, r0
   87cfe:	4b2d      	ldr	r3, [pc, #180]	; (87db4 <Cl_Dlsis_SenddlsisData+0x724>)
   87d00:	601a      	str	r2, [r3, #0]
			
			ps1 = (0.091009 * ps1) + 491.794;
   87d02:	4b2c      	ldr	r3, [pc, #176]	; (87db4 <Cl_Dlsis_SenddlsisData+0x724>)
   87d04:	681a      	ldr	r2, [r3, #0]
   87d06:	4b2c      	ldr	r3, [pc, #176]	; (87db8 <Cl_Dlsis_SenddlsisData+0x728>)
   87d08:	4610      	mov	r0, r2
   87d0a:	4798      	blx	r3
   87d0c:	4602      	mov	r2, r0
   87d0e:	460b      	mov	r3, r1
   87d10:	4c2a      	ldr	r4, [pc, #168]	; (87dbc <Cl_Dlsis_SenddlsisData+0x72c>)
   87d12:	4610      	mov	r0, r2
   87d14:	4619      	mov	r1, r3
   87d16:	a322      	add	r3, pc, #136	; (adr r3, 87da0 <Cl_Dlsis_SenddlsisData+0x710>)
   87d18:	e9d3 2300 	ldrd	r2, r3, [r3]
   87d1c:	47a0      	blx	r4
   87d1e:	4602      	mov	r2, r0
   87d20:	460b      	mov	r3, r1
   87d22:	4c27      	ldr	r4, [pc, #156]	; (87dc0 <Cl_Dlsis_SenddlsisData+0x730>)
   87d24:	4610      	mov	r0, r2
   87d26:	4619      	mov	r1, r3
   87d28:	a31f      	add	r3, pc, #124	; (adr r3, 87da8 <Cl_Dlsis_SenddlsisData+0x718>)
   87d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
   87d2e:	47a0      	blx	r4
   87d30:	4602      	mov	r2, r0
   87d32:	460b      	mov	r3, r1
   87d34:	4610      	mov	r0, r2
   87d36:	4619      	mov	r1, r3
   87d38:	4b22      	ldr	r3, [pc, #136]	; (87dc4 <Cl_Dlsis_SenddlsisData+0x734>)
   87d3a:	4798      	blx	r3
   87d3c:	4602      	mov	r2, r0
   87d3e:	4b1d      	ldr	r3, [pc, #116]	; (87db4 <Cl_Dlsis_SenddlsisData+0x724>)
   87d40:	601a      	str	r2, [r3, #0]
			ps1=(ps1*5 + pressure_final_ps1)/6;
   87d42:	4b1c      	ldr	r3, [pc, #112]	; (87db4 <Cl_Dlsis_SenddlsisData+0x724>)
   87d44:	681a      	ldr	r2, [r3, #0]
   87d46:	4b20      	ldr	r3, [pc, #128]	; (87dc8 <Cl_Dlsis_SenddlsisData+0x738>)
   87d48:	4610      	mov	r0, r2
   87d4a:	4920      	ldr	r1, [pc, #128]	; (87dcc <Cl_Dlsis_SenddlsisData+0x73c>)
   87d4c:	4798      	blx	r3
   87d4e:	4603      	mov	r3, r0
   87d50:	4619      	mov	r1, r3
   87d52:	4b1f      	ldr	r3, [pc, #124]	; (87dd0 <Cl_Dlsis_SenddlsisData+0x740>)
   87d54:	681a      	ldr	r2, [r3, #0]
   87d56:	4b1f      	ldr	r3, [pc, #124]	; (87dd4 <Cl_Dlsis_SenddlsisData+0x744>)
   87d58:	4608      	mov	r0, r1
   87d5a:	4611      	mov	r1, r2
   87d5c:	4798      	blx	r3
   87d5e:	4603      	mov	r3, r0
   87d60:	461a      	mov	r2, r3
   87d62:	4b1d      	ldr	r3, [pc, #116]	; (87dd8 <Cl_Dlsis_SenddlsisData+0x748>)
   87d64:	4610      	mov	r0, r2
   87d66:	491d      	ldr	r1, [pc, #116]	; (87ddc <Cl_Dlsis_SenddlsisData+0x74c>)
   87d68:	4798      	blx	r3
   87d6a:	4603      	mov	r3, r0
   87d6c:	461a      	mov	r2, r3
   87d6e:	4b11      	ldr	r3, [pc, #68]	; (87db4 <Cl_Dlsis_SenddlsisData+0x724>)
   87d70:	601a      	str	r2, [r3, #0]
	
			Cl_SysStat_GetSensor_Status_Query(SENSOR_PS2STATUS,&tempdata.Twobyte);
   87d72:	f107 0308 	add.w	r3, r7, #8
   87d76:	200f      	movs	r0, #15
   87d78:	4619      	mov	r1, r3
   87d7a:	4b19      	ldr	r3, [pc, #100]	; (87de0 <Cl_Dlsis_SenddlsisData+0x750>)
   87d7c:	4798      	blx	r3
			if (tempdata.Twobyte >32268)
   87d7e:	893b      	ldrh	r3, [r7, #8]
   87d80:	f647 620c 	movw	r2, #32268	; 0x7e0c
   87d84:	4293      	cmp	r3, r2
   87d86:	d931      	bls.n	87dec <Cl_Dlsis_SenddlsisData+0x75c>
			{
				ps2 = (65536 - tempdata.Twobyte) *(-1);
   87d88:	893b      	ldrh	r3, [r7, #8]
   87d8a:	f5a3 3280 	sub.w	r2, r3, #65536	; 0x10000
   87d8e:	4b15      	ldr	r3, [pc, #84]	; (87de4 <Cl_Dlsis_SenddlsisData+0x754>)
   87d90:	4610      	mov	r0, r2
   87d92:	4798      	blx	r3
   87d94:	4602      	mov	r2, r0
   87d96:	4b14      	ldr	r3, [pc, #80]	; (87de8 <Cl_Dlsis_SenddlsisData+0x758>)
   87d98:	601a      	str	r2, [r3, #0]
   87d9a:	e02e      	b.n	87dfa <Cl_Dlsis_SenddlsisData+0x76a>
   87d9c:	f3af 8000 	nop.w
   87da0:	a6a44418 	.word	0xa6a44418
   87da4:	3fb74c5d 	.word	0x3fb74c5d
   87da8:	39581062 	.word	0x39581062
   87dac:	407ebcb4 	.word	0x407ebcb4
   87db0:	000a68a9 	.word	0x000a68a9
   87db4:	2007198c 	.word	0x2007198c
   87db8:	000a6031 	.word	0x000a6031
   87dbc:	000a60d9 	.word	0x000a60d9
   87dc0:	000a5d75 	.word	0x000a5d75
   87dc4:	000a669d 	.word	0x000a669d
   87dc8:	000a6959 	.word	0x000a6959
   87dcc:	40a00000 	.word	0x40a00000
   87dd0:	20071788 	.word	0x20071788
   87dd4:	000a6749 	.word	0x000a6749
   87dd8:	000a6ac1 	.word	0x000a6ac1
   87ddc:	40c00000 	.word	0x40c00000
   87de0:	0008e7f9 	.word	0x0008e7f9
   87de4:	000a68b1 	.word	0x000a68b1
   87de8:	20071990 	.word	0x20071990
			}
			else
			ps2 = (float)tempdata.Twobyte;
   87dec:	893a      	ldrh	r2, [r7, #8]
   87dee:	4b8a      	ldr	r3, [pc, #552]	; (88018 <Cl_Dlsis_SenddlsisData+0x988>)
   87df0:	4610      	mov	r0, r2
   87df2:	4798      	blx	r3
   87df4:	4602      	mov	r2, r0
   87df6:	4b89      	ldr	r3, [pc, #548]	; (8801c <Cl_Dlsis_SenddlsisData+0x98c>)
   87df8:	601a      	str	r2, [r3, #0]
			
			ps2 = (0.091009 * ps2) + 491.794;
   87dfa:	4b88      	ldr	r3, [pc, #544]	; (8801c <Cl_Dlsis_SenddlsisData+0x98c>)
   87dfc:	681a      	ldr	r2, [r3, #0]
   87dfe:	4b88      	ldr	r3, [pc, #544]	; (88020 <Cl_Dlsis_SenddlsisData+0x990>)
   87e00:	4610      	mov	r0, r2
   87e02:	4798      	blx	r3
   87e04:	4602      	mov	r2, r0
   87e06:	460b      	mov	r3, r1
   87e08:	4c86      	ldr	r4, [pc, #536]	; (88024 <Cl_Dlsis_SenddlsisData+0x994>)
   87e0a:	4610      	mov	r0, r2
   87e0c:	4619      	mov	r1, r3
   87e0e:	a37e      	add	r3, pc, #504	; (adr r3, 88008 <Cl_Dlsis_SenddlsisData+0x978>)
   87e10:	e9d3 2300 	ldrd	r2, r3, [r3]
   87e14:	47a0      	blx	r4
   87e16:	4602      	mov	r2, r0
   87e18:	460b      	mov	r3, r1
   87e1a:	4c83      	ldr	r4, [pc, #524]	; (88028 <Cl_Dlsis_SenddlsisData+0x998>)
   87e1c:	4610      	mov	r0, r2
   87e1e:	4619      	mov	r1, r3
   87e20:	a37b      	add	r3, pc, #492	; (adr r3, 88010 <Cl_Dlsis_SenddlsisData+0x980>)
   87e22:	e9d3 2300 	ldrd	r2, r3, [r3]
   87e26:	47a0      	blx	r4
   87e28:	4602      	mov	r2, r0
   87e2a:	460b      	mov	r3, r1
   87e2c:	4610      	mov	r0, r2
   87e2e:	4619      	mov	r1, r3
   87e30:	4b7e      	ldr	r3, [pc, #504]	; (8802c <Cl_Dlsis_SenddlsisData+0x99c>)
   87e32:	4798      	blx	r3
   87e34:	4602      	mov	r2, r0
   87e36:	4b79      	ldr	r3, [pc, #484]	; (8801c <Cl_Dlsis_SenddlsisData+0x98c>)
   87e38:	601a      	str	r2, [r3, #0]
			ps2=(ps2*5 + pressure_final_ps2)/6;
   87e3a:	4b78      	ldr	r3, [pc, #480]	; (8801c <Cl_Dlsis_SenddlsisData+0x98c>)
   87e3c:	681a      	ldr	r2, [r3, #0]
   87e3e:	4b7c      	ldr	r3, [pc, #496]	; (88030 <Cl_Dlsis_SenddlsisData+0x9a0>)
   87e40:	4610      	mov	r0, r2
   87e42:	497c      	ldr	r1, [pc, #496]	; (88034 <Cl_Dlsis_SenddlsisData+0x9a4>)
   87e44:	4798      	blx	r3
   87e46:	4603      	mov	r3, r0
   87e48:	4619      	mov	r1, r3
   87e4a:	4b7b      	ldr	r3, [pc, #492]	; (88038 <Cl_Dlsis_SenddlsisData+0x9a8>)
   87e4c:	681a      	ldr	r2, [r3, #0]
   87e4e:	4b7b      	ldr	r3, [pc, #492]	; (8803c <Cl_Dlsis_SenddlsisData+0x9ac>)
   87e50:	4608      	mov	r0, r1
   87e52:	4611      	mov	r1, r2
   87e54:	4798      	blx	r3
   87e56:	4603      	mov	r3, r0
   87e58:	461a      	mov	r2, r3
   87e5a:	4b79      	ldr	r3, [pc, #484]	; (88040 <Cl_Dlsis_SenddlsisData+0x9b0>)
   87e5c:	4610      	mov	r0, r2
   87e5e:	4979      	ldr	r1, [pc, #484]	; (88044 <Cl_Dlsis_SenddlsisData+0x9b4>)
   87e60:	4798      	blx	r3
   87e62:	4603      	mov	r3, r0
   87e64:	461a      	mov	r2, r3
   87e66:	4b6d      	ldr	r3, [pc, #436]	; (8801c <Cl_Dlsis_SenddlsisData+0x98c>)
   87e68:	601a      	str	r2, [r3, #0]
			
			tempdata.word	 = (((apt + vpt) - (ps1+ps2))/2)-25;
   87e6a:	4b77      	ldr	r3, [pc, #476]	; (88048 <Cl_Dlsis_SenddlsisData+0x9b8>)
   87e6c:	6819      	ldr	r1, [r3, #0]
   87e6e:	4b77      	ldr	r3, [pc, #476]	; (8804c <Cl_Dlsis_SenddlsisData+0x9bc>)
   87e70:	681a      	ldr	r2, [r3, #0]
   87e72:	4b72      	ldr	r3, [pc, #456]	; (8803c <Cl_Dlsis_SenddlsisData+0x9ac>)
   87e74:	4608      	mov	r0, r1
   87e76:	4611      	mov	r1, r2
   87e78:	4798      	blx	r3
   87e7a:	4603      	mov	r3, r0
   87e7c:	461c      	mov	r4, r3
   87e7e:	4b74      	ldr	r3, [pc, #464]	; (88050 <Cl_Dlsis_SenddlsisData+0x9c0>)
   87e80:	6819      	ldr	r1, [r3, #0]
   87e82:	4b66      	ldr	r3, [pc, #408]	; (8801c <Cl_Dlsis_SenddlsisData+0x98c>)
   87e84:	681a      	ldr	r2, [r3, #0]
   87e86:	4b6d      	ldr	r3, [pc, #436]	; (8803c <Cl_Dlsis_SenddlsisData+0x9ac>)
   87e88:	4608      	mov	r0, r1
   87e8a:	4611      	mov	r1, r2
   87e8c:	4798      	blx	r3
   87e8e:	4603      	mov	r3, r0
   87e90:	461a      	mov	r2, r3
   87e92:	4b70      	ldr	r3, [pc, #448]	; (88054 <Cl_Dlsis_SenddlsisData+0x9c4>)
   87e94:	4620      	mov	r0, r4
   87e96:	4611      	mov	r1, r2
   87e98:	4798      	blx	r3
   87e9a:	4603      	mov	r3, r0
   87e9c:	461a      	mov	r2, r3
   87e9e:	4b68      	ldr	r3, [pc, #416]	; (88040 <Cl_Dlsis_SenddlsisData+0x9b0>)
   87ea0:	4610      	mov	r0, r2
   87ea2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   87ea6:	4798      	blx	r3
   87ea8:	4603      	mov	r3, r0
   87eaa:	461a      	mov	r2, r3
   87eac:	4b69      	ldr	r3, [pc, #420]	; (88054 <Cl_Dlsis_SenddlsisData+0x9c4>)
   87eae:	4610      	mov	r0, r2
   87eb0:	4969      	ldr	r1, [pc, #420]	; (88058 <Cl_Dlsis_SenddlsisData+0x9c8>)
   87eb2:	4798      	blx	r3
   87eb4:	4603      	mov	r3, r0
   87eb6:	461a      	mov	r2, r3
   87eb8:	4b68      	ldr	r3, [pc, #416]	; (8805c <Cl_Dlsis_SenddlsisData+0x9cc>)
   87eba:	4610      	mov	r0, r2
   87ebc:	4798      	blx	r3
   87ebe:	4603      	mov	r3, r0
   87ec0:	60bb      	str	r3, [r7, #8]


			systemdataarray[count++] = tempdata.bytearray[0] ;
   87ec2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   87ec6:	1c5a      	adds	r2, r3, #1
   87ec8:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   87ecc:	7a3a      	ldrb	r2, [r7, #8]
   87ece:	f107 0160 	add.w	r1, r7, #96	; 0x60
   87ed2:	440b      	add	r3, r1
   87ed4:	f803 2c50 	strb.w	r2, [r3, #-80]
			systemdataarray[count++] = tempdata.bytearray[1] ;
   87ed8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   87edc:	1c5a      	adds	r2, r3, #1
   87ede:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   87ee2:	7a7a      	ldrb	r2, [r7, #9]
   87ee4:	f107 0160 	add.w	r1, r7, #96	; 0x60
   87ee8:	440b      	add	r3, r1
   87eea:	f803 2c50 	strb.w	r2, [r3, #-80]
			systemdataarray[count++] = tempdata.bytearray[2] ;
   87eee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   87ef2:	1c5a      	adds	r2, r3, #1
   87ef4:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   87ef8:	7aba      	ldrb	r2, [r7, #10]
   87efa:	f107 0160 	add.w	r1, r7, #96	; 0x60
   87efe:	440b      	add	r3, r1
   87f00:	f803 2c50 	strb.w	r2, [r3, #-80]
			systemdataarray[count++] = tempdata.bytearray[3] ;
   87f04:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   87f08:	1c5a      	adds	r2, r3, #1
   87f0a:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   87f0e:	7afa      	ldrb	r2, [r7, #11]
   87f10:	f107 0160 	add.w	r1, r7, #96	; 0x60
   87f14:	440b      	add	r3, r1
   87f16:	f803 2c50 	strb.w	r2, [r3, #-80]
// 			systemdataarray[count++] = 0x0A; // tmp
// 			systemdataarray[count++] = 0x0A; // tmp
// 			systemdataarray[count++] = 0x00;
// 			systemdataarray[count++] = 0x00;
// 			
 			tempdata.word = ufRemoved ;
   87f1a:	4b51      	ldr	r3, [pc, #324]	; (88060 <Cl_Dlsis_SenddlsisData+0x9d0>)
   87f1c:	681a      	ldr	r2, [r3, #0]
   87f1e:	4b4f      	ldr	r3, [pc, #316]	; (8805c <Cl_Dlsis_SenddlsisData+0x9cc>)
   87f20:	4610      	mov	r0, r2
   87f22:	4798      	blx	r3
   87f24:	4603      	mov	r3, r0
   87f26:	60bb      	str	r3, [r7, #8]
 			
 			systemdataarray[count++] = tempdata.bytearray[0] ;
   87f28:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   87f2c:	1c5a      	adds	r2, r3, #1
   87f2e:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   87f32:	7a3a      	ldrb	r2, [r7, #8]
   87f34:	f107 0160 	add.w	r1, r7, #96	; 0x60
   87f38:	440b      	add	r3, r1
   87f3a:	f803 2c50 	strb.w	r2, [r3, #-80]
 			systemdataarray[count++] = tempdata.bytearray[1] ;
   87f3e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   87f42:	1c5a      	adds	r2, r3, #1
   87f44:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   87f48:	7a7a      	ldrb	r2, [r7, #9]
   87f4a:	f107 0160 	add.w	r1, r7, #96	; 0x60
   87f4e:	440b      	add	r3, r1
   87f50:	f803 2c50 	strb.w	r2, [r3, #-80]
 			systemdataarray[count++] = tempdata.bytearray[2] ;
   87f54:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   87f58:	1c5a      	adds	r2, r3, #1
   87f5a:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   87f5e:	7aba      	ldrb	r2, [r7, #10]
   87f60:	f107 0160 	add.w	r1, r7, #96	; 0x60
   87f64:	440b      	add	r3, r1
   87f66:	f803 2c50 	strb.w	r2, [r3, #-80]
 			systemdataarray[count++] = tempdata.bytearray[3] ;
   87f6a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   87f6e:	1c5a      	adds	r2, r3, #1
   87f70:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   87f74:	7afa      	ldrb	r2, [r7, #11]
   87f76:	f107 0160 	add.w	r1, r7, #96	; 0x60
   87f7a:	440b      	add	r3, r1
   87f7c:	f803 2c50 	strb.w	r2, [r3, #-80]
 			
			tempdata.word = Treatdata[ID_ufrate] ;
   87f80:	4b38      	ldr	r3, [pc, #224]	; (88064 <Cl_Dlsis_SenddlsisData+0x9d4>)
   87f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   87f84:	60bb      	str	r3, [r7, #8]
			
			systemdataarray[count++] = tempdata.bytearray[0] ;
   87f86:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   87f8a:	1c5a      	adds	r2, r3, #1
   87f8c:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   87f90:	7a3a      	ldrb	r2, [r7, #8]
   87f92:	f107 0160 	add.w	r1, r7, #96	; 0x60
   87f96:	440b      	add	r3, r1
   87f98:	f803 2c50 	strb.w	r2, [r3, #-80]
			systemdataarray[count++] = tempdata.bytearray[1] ;
   87f9c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   87fa0:	1c5a      	adds	r2, r3, #1
   87fa2:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   87fa6:	7a7a      	ldrb	r2, [r7, #9]
   87fa8:	f107 0160 	add.w	r1, r7, #96	; 0x60
   87fac:	440b      	add	r3, r1
   87fae:	f803 2c50 	strb.w	r2, [r3, #-80]
			systemdataarray[count++] = tempdata.bytearray[2] ;
   87fb2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   87fb6:	1c5a      	adds	r2, r3, #1
   87fb8:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   87fbc:	7aba      	ldrb	r2, [r7, #10]
   87fbe:	f107 0160 	add.w	r1, r7, #96	; 0x60
   87fc2:	440b      	add	r3, r1
   87fc4:	f803 2c50 	strb.w	r2, [r3, #-80]
			systemdataarray[count++] = tempdata.bytearray[3] ;
   87fc8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   87fcc:	1c5a      	adds	r2, r3, #1
   87fce:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   87fd2:	7afa      	ldrb	r2, [r7, #11]
   87fd4:	f107 0160 	add.w	r1, r7, #96	; 0x60
   87fd8:	440b      	add	r3, r1
   87fda:	f803 2c50 	strb.w	r2, [r3, #-80]
			
			
Cl_dlsisretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&systemdataarray,count);
   87fde:	f107 0210 	add.w	r2, r7, #16
   87fe2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   87fe6:	202a      	movs	r0, #42	; 0x2a
   87fe8:	4611      	mov	r1, r2
   87fea:	461a      	mov	r2, r3
   87fec:	4b1e      	ldr	r3, [pc, #120]	; (88068 <Cl_Dlsis_SenddlsisData+0x9d8>)
   87fee:	4798      	blx	r3
   87ff0:	4603      	mov	r3, r0
   87ff2:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	//Cl_dlsisretcode = Cl_SendDatatoconsole(command,&systemdataarray,count);
	
	return CL_OK;
   87ff6:	2300      	movs	r3, #0
}
   87ff8:	4618      	mov	r0, r3
   87ffa:	3764      	adds	r7, #100	; 0x64
   87ffc:	46bd      	mov	sp, r7
   87ffe:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}
   88002:	bf00      	nop
   88004:	f3af 8000 	nop.w
   88008:	a6a44418 	.word	0xa6a44418
   8800c:	3fb74c5d 	.word	0x3fb74c5d
   88010:	39581062 	.word	0x39581062
   88014:	407ebcb4 	.word	0x407ebcb4
   88018:	000a68a9 	.word	0x000a68a9
   8801c:	20071990 	.word	0x20071990
   88020:	000a6031 	.word	0x000a6031
   88024:	000a60d9 	.word	0x000a60d9
   88028:	000a5d75 	.word	0x000a5d75
   8802c:	000a669d 	.word	0x000a669d
   88030:	000a6959 	.word	0x000a6959
   88034:	40a00000 	.word	0x40a00000
   88038:	2007178c 	.word	0x2007178c
   8803c:	000a6749 	.word	0x000a6749
   88040:	000a6ac1 	.word	0x000a6ac1
   88044:	40c00000 	.word	0x40c00000
   88048:	20071984 	.word	0x20071984
   8804c:	20071988 	.word	0x20071988
   88050:	2007198c 	.word	0x2007198c
   88054:	000a6745 	.word	0x000a6745
   88058:	41c80000 	.word	0x41c80000
   8805c:	000a6d31 	.word	0x000a6d31
   88060:	20071b24 	.word	0x20071b24
   88064:	2007265c 	.word	0x2007265c
   88068:	0009ba51 	.word	0x0009ba51

0008806c <Cl_Dlsis_StartDialysis>:
}



Cl_ReturnCodeType	Cl_Dlsis_StartDialysis(void)
{
   8806c:	b580      	push	{r7, lr}
   8806e:	b082      	sub	sp, #8
   88070:	af00      	add	r7, sp, #0
	
	sv_cntrl_resetgreenalarm();
   88072:	4b1b      	ldr	r3, [pc, #108]	; (880e0 <Cl_Dlsis_StartDialysis+0x74>)
   88074:	4798      	blx	r3
	Cl_ReturnCodeType Cl_dlsisretcode = CL_OK;
   88076:	2300      	movs	r3, #0
   88078:	71fb      	strb	r3, [r7, #7]
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   8807a:	2351      	movs	r3, #81	; 0x51
   8807c:	71bb      	strb	r3, [r7, #6]
	Cl_Uint8Type data = 0;
   8807e:	2300      	movs	r3, #0
   88080:	717b      	strb	r3, [r7, #5]
	
	ufRemoved = 0;
   88082:	4b18      	ldr	r3, [pc, #96]	; (880e4 <Cl_Dlsis_StartDialysis+0x78>)
   88084:	f04f 0200 	mov.w	r2, #0
   88088:	601a      	str	r2, [r3, #0]
	

	//Reset the  OPENFILL time count
	DlsisTime.Cl_dlsisMinutescounter = 0;
   8808a:	4b17      	ldr	r3, [pc, #92]	; (880e8 <Cl_Dlsis_StartDialysis+0x7c>)
   8808c:	2200      	movs	r2, #0
   8808e:	705a      	strb	r2, [r3, #1]
	DlsisTime.Cl_dlsisTotalMinutescounter = 0;
   88090:	4b15      	ldr	r3, [pc, #84]	; (880e8 <Cl_Dlsis_StartDialysis+0x7c>)
   88092:	2200      	movs	r2, #0
   88094:	70da      	strb	r2, [r3, #3]
	Cl_dlsisOpenFillTimeOut = false;
   88096:	4b15      	ldr	r3, [pc, #84]	; (880ec <Cl_Dlsis_StartDialysis+0x80>)
   88098:	2200      	movs	r2, #0
   8809a:	701a      	strb	r2, [r3, #0]
	
		command = CON_TX_COMMAND_DLSIS_CNFRM;
   8809c:	2312      	movs	r3, #18
   8809e:	71bb      	strb	r3, [r7, #6]
		data = (Cl_Uint8Type)COMMAND_RESULT_SUCCESS;
   880a0:	2301      	movs	r3, #1
   880a2:	717b      	strb	r3, [r7, #5]
		Cl_dlsisretcode = Cl_SendDatatoconsole(command,&data,1);
   880a4:	79ba      	ldrb	r2, [r7, #6]
   880a6:	1d7b      	adds	r3, r7, #5
   880a8:	4610      	mov	r0, r2
   880aa:	4619      	mov	r1, r3
   880ac:	2201      	movs	r2, #1
   880ae:	4b10      	ldr	r3, [pc, #64]	; (880f0 <Cl_Dlsis_StartDialysis+0x84>)
   880b0:	4798      	blx	r3
   880b2:	4603      	mov	r3, r0
   880b4:	71fb      	strb	r3, [r7, #7]
		command = CON_TX_COMMAND_DLSIS_STARTED;
   880b6:	2313      	movs	r3, #19
   880b8:	71bb      	strb	r3, [r7, #6]
		data = (Cl_Uint8Type)COMMAND_RESULT_SUCCESS;
   880ba:	2301      	movs	r3, #1
   880bc:	717b      	strb	r3, [r7, #5]
		Cl_dlsisretcode = Cl_SendDatatoconsole(command,&data,1);
   880be:	79ba      	ldrb	r2, [r7, #6]
   880c0:	1d7b      	adds	r3, r7, #5
   880c2:	4610      	mov	r0, r2
   880c4:	4619      	mov	r1, r3
   880c6:	2201      	movs	r2, #1
   880c8:	4b09      	ldr	r3, [pc, #36]	; (880f0 <Cl_Dlsis_StartDialysis+0x84>)
   880ca:	4798      	blx	r3
   880cc:	4603      	mov	r3, r0
   880ce:	71fb      	strb	r3, [r7, #7]
	Cl_Dlsis_ResumeDialysis();
   880d0:	4b08      	ldr	r3, [pc, #32]	; (880f4 <Cl_Dlsis_StartDialysis+0x88>)
   880d2:	4798      	blx	r3
	
	return 0;
   880d4:	2300      	movs	r3, #0

}
   880d6:	4618      	mov	r0, r3
   880d8:	3708      	adds	r7, #8
   880da:	46bd      	mov	sp, r7
   880dc:	bd80      	pop	{r7, pc}
   880de:	bf00      	nop
   880e0:	00099f9d 	.word	0x00099f9d
   880e4:	20071b24 	.word	0x20071b24
   880e8:	20072180 	.word	0x20072180
   880ec:	2007194c 	.word	0x2007194c
   880f0:	0009ba51 	.word	0x0009ba51
   880f4:	000880f9 	.word	0x000880f9

000880f8 <Cl_Dlsis_ResumeDialysis>:

Cl_ReturnCodeType	Cl_Dlsis_ResumeDialysis(void)
{
   880f8:	b590      	push	{r4, r7, lr}
   880fa:	b087      	sub	sp, #28
   880fc:	af02      	add	r7, sp, #8
	
		Cl_ReturnCodeType Cl_dlsisretcode = CL_OK;
   880fe:	2300      	movs	r3, #0
   88100:	73fb      	strb	r3, [r7, #15]
		Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   88102:	2351      	movs	r3, #81	; 0x51
   88104:	73bb      	strb	r3, [r7, #14]
		Cl_Uint8Type data = 0;
   88106:	2300      	movs	r3, #0
   88108:	737b      	strb	r3, [r7, #13]
									
									
									Cl_dlsisretcode =  Cl_AlarmConfigureAlarmType(BLOODDOOR_STATUS_OPEN,LOGIC_HIGH,0,0,0);
   8810a:	2300      	movs	r3, #0
   8810c:	9300      	str	r3, [sp, #0]
   8810e:	2001      	movs	r0, #1
   88110:	2101      	movs	r1, #1
   88112:	f04f 0200 	mov.w	r2, #0
   88116:	f04f 0300 	mov.w	r3, #0
   8811a:	4cb3      	ldr	r4, [pc, #716]	; (883e8 <Cl_Dlsis_ResumeDialysis+0x2f0>)
   8811c:	47a0      	blx	r4
   8811e:	4603      	mov	r3, r0
   88120:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmConfigureAlarmType(ACID_IN_OPEN,LOGIC_LOW,0,0,0);
   88122:	2300      	movs	r3, #0
   88124:	9300      	str	r3, [sp, #0]
   88126:	2029      	movs	r0, #41	; 0x29
   88128:	2100      	movs	r1, #0
   8812a:	f04f 0200 	mov.w	r2, #0
   8812e:	f04f 0300 	mov.w	r3, #0
   88132:	4cad      	ldr	r4, [pc, #692]	; (883e8 <Cl_Dlsis_ResumeDialysis+0x2f0>)
   88134:	47a0      	blx	r4
   88136:	4603      	mov	r3, r0
   88138:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmConfigureAlarmType(BICARB_IN_OPEN,LOGIC_LOW,0,0,0);
   8813a:	2300      	movs	r3, #0
   8813c:	9300      	str	r3, [sp, #0]
   8813e:	202b      	movs	r0, #43	; 0x2b
   88140:	2100      	movs	r1, #0
   88142:	f04f 0200 	mov.w	r2, #0
   88146:	f04f 0300 	mov.w	r3, #0
   8814a:	4ca7      	ldr	r4, [pc, #668]	; (883e8 <Cl_Dlsis_ResumeDialysis+0x2f0>)
   8814c:	47a0      	blx	r4
   8814e:	4603      	mov	r3, r0
   88150:	73fb      	strb	r3, [r7, #15]
									
									
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true );
   88152:	2001      	movs	r0, #1
   88154:	2101      	movs	r1, #1
   88156:	4ba5      	ldr	r3, [pc, #660]	; (883ec <Cl_Dlsis_ResumeDialysis+0x2f4>)
   88158:	4798      	blx	r3
   8815a:	4603      	mov	r3, r0
   8815c:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON,true );
   8815e:	203d      	movs	r0, #61	; 0x3d
   88160:	2101      	movs	r1, #1
   88162:	4ba2      	ldr	r3, [pc, #648]	; (883ec <Cl_Dlsis_ResumeDialysis+0x2f4>)
   88164:	4798      	blx	r3
   88166:	4603      	mov	r3, r0
   88168:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_ON_TO_OFF ,true);
   8816a:	203e      	movs	r0, #62	; 0x3e
   8816c:	2101      	movs	r1, #1
   8816e:	4b9f      	ldr	r3, [pc, #636]	; (883ec <Cl_Dlsis_ResumeDialysis+0x2f4>)
   88170:	4798      	blx	r3
   88172:	4603      	mov	r3, r0
   88174:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER1STATUS_CLOSED,true );
   88176:	2005      	movs	r0, #5
   88178:	2101      	movs	r1, #1
   8817a:	4b9c      	ldr	r3, [pc, #624]	; (883ec <Cl_Dlsis_ResumeDialysis+0x2f4>)
   8817c:	4798      	blx	r3
   8817e:	4603      	mov	r3, r0
   88180:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER2STATUS_CLOSED,true );
   88182:	2006      	movs	r0, #6
   88184:	2101      	movs	r1, #1
   88186:	4b99      	ldr	r3, [pc, #612]	; (883ec <Cl_Dlsis_ResumeDialysis+0x2f4>)
   88188:	4798      	blx	r3
   8818a:	4603      	mov	r3, r0
   8818c:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER1STATUS_OPEN,false );
   8818e:	2003      	movs	r0, #3
   88190:	2100      	movs	r1, #0
   88192:	4b96      	ldr	r3, [pc, #600]	; (883ec <Cl_Dlsis_ResumeDialysis+0x2f4>)
   88194:	4798      	blx	r3
   88196:	4603      	mov	r3, r0
   88198:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms( HOLDER2STATUS_OPEN,false );
   8819a:	2004      	movs	r0, #4
   8819c:	2100      	movs	r1, #0
   8819e:	4b93      	ldr	r3, [pc, #588]	; (883ec <Cl_Dlsis_ResumeDialysis+0x2f4>)
   881a0:	4798      	blx	r3
   881a2:	4603      	mov	r3, r0
   881a4:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_STATUS_LOW,false );
   881a6:	2007      	movs	r0, #7
   881a8:	2100      	movs	r1, #0
   881aa:	4b90      	ldr	r3, [pc, #576]	; (883ec <Cl_Dlsis_ResumeDialysis+0x2f4>)
   881ac:	4798      	blx	r3
   881ae:	4603      	mov	r3, r0
   881b0:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_STATUS_HIGH,false );
   881b2:	2008      	movs	r0, #8
   881b4:	2100      	movs	r1, #0
   881b6:	4b8d      	ldr	r3, [pc, #564]	; (883ec <Cl_Dlsis_ResumeDialysis+0x2f4>)
   881b8:	4798      	blx	r3
   881ba:	4603      	mov	r3, r0
   881bc:	73fb      	strb	r3, [r7, #15]
								//	Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_DAC_OPEN,true );
								//	Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_DAC_RO,true );
								//	Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_DAC_HIGH,true );
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms( ABD_EVENT,true );
   881be:	2020      	movs	r0, #32
   881c0:	2101      	movs	r1, #1
   881c2:	4b8a      	ldr	r3, [pc, #552]	; (883ec <Cl_Dlsis_ResumeDialysis+0x2f4>)
   881c4:	4798      	blx	r3
   881c6:	4603      	mov	r3, r0
   881c8:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms( BD_EVENT,false );
   881ca:	2021      	movs	r0, #33	; 0x21
   881cc:	2100      	movs	r1, #0
   881ce:	4b87      	ldr	r3, [pc, #540]	; (883ec <Cl_Dlsis_ResumeDialysis+0x2f4>)
   881d0:	4798      	blx	r3
   881d2:	4603      	mov	r3, r0
   881d4:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(APTSTATUS_HIGH,true );
   881d6:	2024      	movs	r0, #36	; 0x24
   881d8:	2101      	movs	r1, #1
   881da:	4b84      	ldr	r3, [pc, #528]	; (883ec <Cl_Dlsis_ResumeDialysis+0x2f4>)
   881dc:	4798      	blx	r3
   881de:	4603      	mov	r3, r0
   881e0:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(VPTSTATUS_HIGH ,true);
   881e2:	2026      	movs	r0, #38	; 0x26
   881e4:	2101      	movs	r1, #1
   881e6:	4b81      	ldr	r3, [pc, #516]	; (883ec <Cl_Dlsis_ResumeDialysis+0x2f4>)
   881e8:	4798      	blx	r3
   881ea:	4603      	mov	r3, r0
   881ec:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(APTSTATUS_LOW,true );
   881ee:	2023      	movs	r0, #35	; 0x23
   881f0:	2101      	movs	r1, #1
   881f2:	4b7e      	ldr	r3, [pc, #504]	; (883ec <Cl_Dlsis_ResumeDialysis+0x2f4>)
   881f4:	4798      	blx	r3
   881f6:	4603      	mov	r3, r0
   881f8:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(VPTSTATUS_LOW,true);
   881fa:	2025      	movs	r0, #37	; 0x25
   881fc:	2101      	movs	r1, #1
   881fe:	4b7b      	ldr	r3, [pc, #492]	; (883ec <Cl_Dlsis_ResumeDialysis+0x2f4>)
   88200:	4798      	blx	r3
   88202:	4603      	mov	r3, r0
   88204:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms( BLD_EVENT,true );
   88206:	2022      	movs	r0, #34	; 0x22
   88208:	2101      	movs	r1, #1
   8820a:	4b78      	ldr	r3, [pc, #480]	; (883ec <Cl_Dlsis_ResumeDialysis+0x2f4>)
   8820c:	4798      	blx	r3
   8820e:	4603      	mov	r3, r0
   88210:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS2_HIGH_THRESHOLD,true );
   88212:	2017      	movs	r0, #23
   88214:	2101      	movs	r1, #1
   88216:	4b75      	ldr	r3, [pc, #468]	; (883ec <Cl_Dlsis_ResumeDialysis+0x2f4>)
   88218:	4798      	blx	r3
   8821a:	4603      	mov	r3, r0
   8821c:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS2_LOW_THRESHOLD,true );
   8821e:	2018      	movs	r0, #24
   88220:	2101      	movs	r1, #1
   88222:	4b72      	ldr	r3, [pc, #456]	; (883ec <Cl_Dlsis_ResumeDialysis+0x2f4>)
   88224:	4798      	blx	r3
   88226:	4603      	mov	r3, r0
   88228:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS1_HIGH_THRESHOLD,true );
   8822a:	2015      	movs	r0, #21
   8822c:	2101      	movs	r1, #1
   8822e:	4b6f      	ldr	r3, [pc, #444]	; (883ec <Cl_Dlsis_ResumeDialysis+0x2f4>)
   88230:	4798      	blx	r3
   88232:	4603      	mov	r3, r0
   88234:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS1_LOW_THRESHOLD,true );
   88236:	2016      	movs	r0, #22
   88238:	2101      	movs	r1, #1
   8823a:	4b6c      	ldr	r3, [pc, #432]	; (883ec <Cl_Dlsis_ResumeDialysis+0x2f4>)
   8823c:	4798      	blx	r3
   8823e:	4603      	mov	r3, r0
   88240:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS3_HIGH_THRESHOLD ,true);
   88242:	2027      	movs	r0, #39	; 0x27
   88244:	2101      	movs	r1, #1
   88246:	4b69      	ldr	r3, [pc, #420]	; (883ec <Cl_Dlsis_ResumeDialysis+0x2f4>)
   88248:	4798      	blx	r3
   8824a:	4603      	mov	r3, r0
   8824c:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(PS3_LOW_THRESHOLD ,true);
   8824e:	2028      	movs	r0, #40	; 0x28
   88250:	2101      	movs	r1, #1
   88252:	4b66      	ldr	r3, [pc, #408]	; (883ec <Cl_Dlsis_ResumeDialysis+0x2f4>)
   88254:	4798      	blx	r3
   88256:	4603      	mov	r3, r0
   88258:	73fb      	strb	r3, [r7, #15]
									
// 									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(SENSOR_TEMP3STATUS,false );
// 									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(SENSOR_TEMP2STATUS,false );
// 									
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP1_HIGH_THRESHOLD,true );
   8825a:	200f      	movs	r0, #15
   8825c:	2101      	movs	r1, #1
   8825e:	4b63      	ldr	r3, [pc, #396]	; (883ec <Cl_Dlsis_ResumeDialysis+0x2f4>)
   88260:	4798      	blx	r3
   88262:	4603      	mov	r3, r0
   88264:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP1_LOW_THRESHOLD,true );
   88266:	2010      	movs	r0, #16
   88268:	2101      	movs	r1, #1
   8826a:	4b60      	ldr	r3, [pc, #384]	; (883ec <Cl_Dlsis_ResumeDialysis+0x2f4>)
   8826c:	4798      	blx	r3
   8826e:	4603      	mov	r3, r0
   88270:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP2_HIGH_THRESHOLD,true );
   88272:	2011      	movs	r0, #17
   88274:	2101      	movs	r1, #1
   88276:	4b5d      	ldr	r3, [pc, #372]	; (883ec <Cl_Dlsis_ResumeDialysis+0x2f4>)
   88278:	4798      	blx	r3
   8827a:	4603      	mov	r3, r0
   8827c:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP2_LOW_THRESHOLD,true );
   8827e:	2012      	movs	r0, #18
   88280:	2101      	movs	r1, #1
   88282:	4b5a      	ldr	r3, [pc, #360]	; (883ec <Cl_Dlsis_ResumeDialysis+0x2f4>)
   88284:	4798      	blx	r3
   88286:	4603      	mov	r3, r0
   88288:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP3_HIGH_THRESHOLD,true );
   8828a:	2013      	movs	r0, #19
   8828c:	2101      	movs	r1, #1
   8828e:	4b57      	ldr	r3, [pc, #348]	; (883ec <Cl_Dlsis_ResumeDialysis+0x2f4>)
   88290:	4798      	blx	r3
   88292:	4603      	mov	r3, r0
   88294:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  Cl_AlarmActivateAlarms(TEMP3_LOW_THRESHOLD,true );
   88296:	2014      	movs	r0, #20
   88298:	2101      	movs	r1, #1
   8829a:	4b54      	ldr	r3, [pc, #336]	; (883ec <Cl_Dlsis_ResumeDialysis+0x2f4>)
   8829c:	4798      	blx	r3
   8829e:	4603      	mov	r3, r0
   882a0:	73fb      	strb	r3, [r7, #15]
									
									if(Current_sense_trigger)
   882a2:	4b53      	ldr	r3, [pc, #332]	; (883f0 <Cl_Dlsis_ResumeDialysis+0x2f8>)
   882a4:	781b      	ldrb	r3, [r3, #0]
   882a6:	2b00      	cmp	r3, #0
   882a8:	d005      	beq.n	882b6 <Cl_Dlsis_ResumeDialysis+0x1be>
									{
										Cl_dlsisretcode =  Cl_AlarmActivateAlarms( FPCURRENTSTATUS,true );
   882aa:	203c      	movs	r0, #60	; 0x3c
   882ac:	2101      	movs	r1, #1
   882ae:	4b4f      	ldr	r3, [pc, #316]	; (883ec <Cl_Dlsis_ResumeDialysis+0x2f4>)
   882b0:	4798      	blx	r3
   882b2:	4603      	mov	r3, r0
   882b4:	73fb      	strb	r3, [r7, #15]
									}
									else
									{
										//			Cl_rinseretcode =  Cl_AlarmActivateAlarms( PS3STATUS_HIGH,true );
									}
									sv_cntrl_disable_loopback();
   882b6:	4b4f      	ldr	r3, [pc, #316]	; (883f4 <Cl_Dlsis_ResumeDialysis+0x2fc>)
   882b8:	4798      	blx	r3
									//Cl_Dlsis_BypassOff();
									sv_cntrl_activatevenousclamp();
   882ba:	4b4f      	ldr	r3, [pc, #316]	; (883f8 <Cl_Dlsis_ResumeDialysis+0x300>)
   882bc:	4798      	blx	r3
									Cl_dlsisretcode =  sv_cntrl_activatepump(DCMOTOR1);
   882be:	2001      	movs	r0, #1
   882c0:	4b4e      	ldr	r3, [pc, #312]	; (883fc <Cl_Dlsis_ResumeDialysis+0x304>)
   882c2:	4798      	blx	r3
   882c4:	4603      	mov	r3, r0
   882c6:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode =  sv_cntrl_activatepump(DCMOTOR2);
   882c8:	2002      	movs	r0, #2
   882ca:	4b4c      	ldr	r3, [pc, #304]	; (883fc <Cl_Dlsis_ResumeDialysis+0x304>)
   882cc:	4798      	blx	r3
   882ce:	4603      	mov	r3, r0
   882d0:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode = Cl_bc_controller(BC_EVENT_RESUME);
   882d2:	200b      	movs	r0, #11
   882d4:	4b4a      	ldr	r3, [pc, #296]	; (88400 <Cl_Dlsis_ResumeDialysis+0x308>)
   882d6:	4798      	blx	r3
   882d8:	4603      	mov	r3, r0
   882da:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode = SetHeaterState(CL_HEATER_STATE_DIALYSIS_ON);
   882dc:	2003      	movs	r0, #3
   882de:	4b49      	ldr	r3, [pc, #292]	; (88404 <Cl_Dlsis_ResumeDialysis+0x30c>)
   882e0:	4798      	blx	r3
   882e2:	4603      	mov	r3, r0
   882e4:	73fb      	strb	r3, [r7, #15]
									cl_bp_controller(CL_BP_EVENT_START,0);
   882e6:	2002      	movs	r0, #2
   882e8:	2100      	movs	r1, #0
   882ea:	4b47      	ldr	r3, [pc, #284]	; (88408 <Cl_Dlsis_ResumeDialysis+0x310>)
   882ec:	4798      	blx	r3
									cl_wait(100);
   882ee:	2064      	movs	r0, #100	; 0x64
   882f0:	4b46      	ldr	r3, [pc, #280]	; (8840c <Cl_Dlsis_ResumeDialysis+0x314>)
   882f2:	4798      	blx	r3
									Cl_Uint32Type temp1 = Treatdata[ID_bloodratetreat];
   882f4:	4b46      	ldr	r3, [pc, #280]	; (88410 <Cl_Dlsis_ResumeDialysis+0x318>)
   882f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   882f8:	60bb      	str	r3, [r7, #8]
									cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,temp1);
   882fa:	2001      	movs	r0, #1
   882fc:	68b9      	ldr	r1, [r7, #8]
   882fe:	4b42      	ldr	r3, [pc, #264]	; (88408 <Cl_Dlsis_ResumeDialysis+0x310>)
   88300:	4798      	blx	r3
									cl_wait(100);
   88302:	2064      	movs	r0, #100	; 0x64
   88304:	4b41      	ldr	r3, [pc, #260]	; (8840c <Cl_Dlsis_ResumeDialysis+0x314>)
   88306:	4798      	blx	r3
									//cl_wait(100);
									Cl_Uint32Type temp = Treatdata[ID_dflow];
   88308:	4b41      	ldr	r3, [pc, #260]	; (88410 <Cl_Dlsis_ResumeDialysis+0x318>)
   8830a:	695b      	ldr	r3, [r3, #20]
   8830c:	607b      	str	r3, [r7, #4]
									flow_rate = temp;
   8830e:	4a41      	ldr	r2, [pc, #260]	; (88414 <Cl_Dlsis_ResumeDialysis+0x31c>)
   88310:	687b      	ldr	r3, [r7, #4]
   88312:	6013      	str	r3, [r2, #0]
									Cl_Uint16Type potvalue = 0;
   88314:	2300      	movs	r3, #0
   88316:	807b      	strh	r3, [r7, #2]
									switch (temp)
   88318:	687b      	ldr	r3, [r7, #4]
   8831a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   8831e:	d017      	beq.n	88350 <Cl_Dlsis_ResumeDialysis+0x258>
   88320:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   88324:	d003      	beq.n	8832e <Cl_Dlsis_ResumeDialysis+0x236>
   88326:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   8832a:	d027      	beq.n	8837c <Cl_Dlsis_ResumeDialysis+0x284>
   8832c:	e037      	b.n	8839e <Cl_Dlsis_ResumeDialysis+0x2a6>
									{
										case 800:
										sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   8832e:	2002      	movs	r0, #2
   88330:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   88334:	4b38      	ldr	r3, [pc, #224]	; (88418 <Cl_Dlsis_ResumeDialysis+0x320>)
   88336:	4798      	blx	r3
										sv_cntrl_setpumpspeed(DCMOTOR1,1395);
   88338:	2001      	movs	r0, #1
   8833a:	f240 5173 	movw	r1, #1395	; 0x573
   8833e:	4b36      	ldr	r3, [pc, #216]	; (88418 <Cl_Dlsis_ResumeDialysis+0x320>)
   88340:	4798      	blx	r3
										potvalue = (612 * 1024)/10000;
   88342:	233e      	movs	r3, #62	; 0x3e
   88344:	807b      	strh	r3, [r7, #2]
										sv_cs_setpotvalue(potvalue);
   88346:	887b      	ldrh	r3, [r7, #2]
   88348:	4618      	mov	r0, r3
   8834a:	4b34      	ldr	r3, [pc, #208]	; (8841c <Cl_Dlsis_ResumeDialysis+0x324>)
   8834c:	4798      	blx	r3
										break;
   8834e:	e037      	b.n	883c0 <Cl_Dlsis_ResumeDialysis+0x2c8>
										
										case 500:
										Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"500",3);
   88350:	2018      	movs	r0, #24
   88352:	4933      	ldr	r1, [pc, #204]	; (88420 <Cl_Dlsis_ResumeDialysis+0x328>)
   88354:	2203      	movs	r2, #3
   88356:	4b33      	ldr	r3, [pc, #204]	; (88424 <Cl_Dlsis_ResumeDialysis+0x32c>)
   88358:	4798      	blx	r3
										sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   8835a:	2002      	movs	r0, #2
   8835c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   88360:	4b2d      	ldr	r3, [pc, #180]	; (88418 <Cl_Dlsis_ResumeDialysis+0x320>)
   88362:	4798      	blx	r3
										sv_cntrl_setpumpspeed(DCMOTOR1,1000);   //960
   88364:	2001      	movs	r0, #1
   88366:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   8836a:	4b2b      	ldr	r3, [pc, #172]	; (88418 <Cl_Dlsis_ResumeDialysis+0x320>)
   8836c:	4798      	blx	r3
										potvalue = (690 * 1024)/10000;
   8836e:	2346      	movs	r3, #70	; 0x46
   88370:	807b      	strh	r3, [r7, #2]
										sv_cs_setpotvalue(potvalue);
   88372:	887b      	ldrh	r3, [r7, #2]
   88374:	4618      	mov	r0, r3
   88376:	4b29      	ldr	r3, [pc, #164]	; (8841c <Cl_Dlsis_ResumeDialysis+0x324>)
   88378:	4798      	blx	r3
										break;
   8837a:	e021      	b.n	883c0 <Cl_Dlsis_ResumeDialysis+0x2c8>
										
									
										case 300:
										sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   8837c:	2002      	movs	r0, #2
   8837e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   88382:	4b25      	ldr	r3, [pc, #148]	; (88418 <Cl_Dlsis_ResumeDialysis+0x320>)
   88384:	4798      	blx	r3
										sv_cntrl_setpumpspeed(DCMOTOR1,600);
   88386:	2001      	movs	r0, #1
   88388:	f44f 7116 	mov.w	r1, #600	; 0x258
   8838c:	4b22      	ldr	r3, [pc, #136]	; (88418 <Cl_Dlsis_ResumeDialysis+0x320>)
   8838e:	4798      	blx	r3
										potvalue = (650 * 1024)/10000;
   88390:	2342      	movs	r3, #66	; 0x42
   88392:	807b      	strh	r3, [r7, #2]
										sv_cs_setpotvalue(potvalue);
   88394:	887b      	ldrh	r3, [r7, #2]
   88396:	4618      	mov	r0, r3
   88398:	4b20      	ldr	r3, [pc, #128]	; (8841c <Cl_Dlsis_ResumeDialysis+0x324>)
   8839a:	4798      	blx	r3
										break;
   8839c:	e010      	b.n	883c0 <Cl_Dlsis_ResumeDialysis+0x2c8>
										
										default:
										sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   8839e:	2002      	movs	r0, #2
   883a0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   883a4:	4b1c      	ldr	r3, [pc, #112]	; (88418 <Cl_Dlsis_ResumeDialysis+0x320>)
   883a6:	4798      	blx	r3
										sv_cntrl_setpumpspeed(DCMOTOR1,1100);   //960
   883a8:	2001      	movs	r0, #1
   883aa:	f240 414c 	movw	r1, #1100	; 0x44c
   883ae:	4b1a      	ldr	r3, [pc, #104]	; (88418 <Cl_Dlsis_ResumeDialysis+0x320>)
   883b0:	4798      	blx	r3
										potvalue = (670 * 1024)/10000;
   883b2:	2344      	movs	r3, #68	; 0x44
   883b4:	807b      	strh	r3, [r7, #2]
										sv_cs_setpotvalue(potvalue);
   883b6:	887b      	ldrh	r3, [r7, #2]
   883b8:	4618      	mov	r0, r3
   883ba:	4b18      	ldr	r3, [pc, #96]	; (8841c <Cl_Dlsis_ResumeDialysis+0x324>)
   883bc:	4798      	blx	r3
										break;
   883be:	bf00      	nop
									}
									bc_flag = 1;
   883c0:	4b19      	ldr	r3, [pc, #100]	; (88428 <Cl_Dlsis_ResumeDialysis+0x330>)
   883c2:	2201      	movs	r2, #1
   883c4:	701a      	strb	r2, [r3, #0]
									//Cl_Dlsis_BypassDialysis();
									Cl_dlsisretcode = sv_cntrl_disable_bypass();
   883c6:	4b19      	ldr	r3, [pc, #100]	; (8842c <Cl_Dlsis_ResumeDialysis+0x334>)
   883c8:	4798      	blx	r3
   883ca:	4603      	mov	r3, r0
   883cc:	73fb      	strb	r3, [r7, #15]
									Cl_dlsisretcode = Cl_Dlsis_UpdateTimeInfo();
   883ce:	4b18      	ldr	r3, [pc, #96]	; (88430 <Cl_Dlsis_ResumeDialysis+0x338>)
   883d0:	4798      	blx	r3
   883d2:	4603      	mov	r3, r0
   883d4:	73fb      	strb	r3, [r7, #15]
									cl_dlsis_state = CL_DLSIS_STATE_WAIT_FOR_TEMP_COND_STABILITY;
   883d6:	4b17      	ldr	r3, [pc, #92]	; (88434 <Cl_Dlsis_ResumeDialysis+0x33c>)
   883d8:	2202      	movs	r2, #2
   883da:	701a      	strb	r2, [r3, #0]
									//Cl_Dlsis_BypassOff();
									return 0;	
   883dc:	2300      	movs	r3, #0
}
   883de:	4618      	mov	r0, r3
   883e0:	3714      	adds	r7, #20
   883e2:	46bd      	mov	sp, r7
   883e4:	bd90      	pop	{r4, r7, pc}
   883e6:	bf00      	nop
   883e8:	00082e09 	.word	0x00082e09
   883ec:	00082e61 	.word	0x00082e61
   883f0:	20070a3a 	.word	0x20070a3a
   883f4:	00099e5d 	.word	0x00099e5d
   883f8:	00099e19 	.word	0x00099e19
   883fc:	00099c2d 	.word	0x00099c2d
   88400:	0008330d 	.word	0x0008330d
   88404:	000894d9 	.word	0x000894d9
   88408:	00093305 	.word	0x00093305
   8840c:	00093195 	.word	0x00093195
   88410:	2007265c 	.word	0x2007265c
   88414:	20071954 	.word	0x20071954
   88418:	00099d45 	.word	0x00099d45
   8841c:	0009a175 	.word	0x0009a175
   88420:	000a88dc 	.word	0x000a88dc
   88424:	0009ba51 	.word	0x0009ba51
   88428:	20071953 	.word	0x20071953
   8842c:	00099ea1 	.word	0x00099ea1
   88430:	00086ae1 	.word	0x00086ae1
   88434:	20071934 	.word	0x20071934

00088438 <Cl_Dlsis_safesate>:

Cl_ReturnCodeType	Cl_Dlsis_safesate(void)
{
   88438:	b580      	push	{r7, lr}
   8843a:	af00      	add	r7, sp, #0
	
	sv_cntrl_enable_bypass();
   8843c:	4b09      	ldr	r3, [pc, #36]	; (88464 <Cl_Dlsis_safesate+0x2c>)
   8843e:	4798      	blx	r3
	cl_uf_controller(CL_UF_EVENT_STOP,0);
   88440:	2004      	movs	r0, #4
   88442:	2100      	movs	r1, #0
   88444:	4b08      	ldr	r3, [pc, #32]	; (88468 <Cl_Dlsis_safesate+0x30>)
   88446:	4798      	blx	r3
	cl_bp_controller(CL_BP_EVENT_STOP,0);
   88448:	2004      	movs	r0, #4
   8844a:	2100      	movs	r1, #0
   8844c:	4b07      	ldr	r3, [pc, #28]	; (8846c <Cl_Dlsis_safesate+0x34>)
   8844e:	4798      	blx	r3
	sv_cntrl_deactivatevenousclamp();
   88450:	4b07      	ldr	r3, [pc, #28]	; (88470 <Cl_Dlsis_safesate+0x38>)
   88452:	4798      	blx	r3
	Cl_Dlsis_BypassDialysis();
   88454:	4b07      	ldr	r3, [pc, #28]	; (88474 <Cl_Dlsis_safesate+0x3c>)
   88456:	4798      	blx	r3
	cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   88458:	4b07      	ldr	r3, [pc, #28]	; (88478 <Cl_Dlsis_safesate+0x40>)
   8845a:	220a      	movs	r2, #10
   8845c:	701a      	strb	r2, [r3, #0]
	
	return 0;
   8845e:	2300      	movs	r3, #0
}
   88460:	4618      	mov	r0, r3
   88462:	bd80      	pop	{r7, pc}
   88464:	00099e79 	.word	0x00099e79
   88468:	00095df5 	.word	0x00095df5
   8846c:	00093305 	.word	0x00093305
   88470:	00099e2d 	.word	0x00099e2d
   88474:	00087159 	.word	0x00087159
   88478:	20071934 	.word	0x20071934

0008847c <cl_temp_safestate>:
	//sv_cntrl_nobuzzer();
	
	return 0;
}
Cl_ReturnCodeType cl_temp_safestate(void)
{
   8847c:	b580      	push	{r7, lr}
   8847e:	af00      	add	r7, sp, #0
	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"BYPASS",6);
   88480:	2018      	movs	r0, #24
   88482:	4909      	ldr	r1, [pc, #36]	; (884a8 <cl_temp_safestate+0x2c>)
   88484:	2206      	movs	r2, #6
   88486:	4b09      	ldr	r3, [pc, #36]	; (884ac <cl_temp_safestate+0x30>)
   88488:	4798      	blx	r3
	sv_cntrl_enable_bypass();
   8848a:	4b09      	ldr	r3, [pc, #36]	; (884b0 <cl_temp_safestate+0x34>)
   8848c:	4798      	blx	r3
	cl_uf_controller(CL_UF_EVENT_STOP,0);
   8848e:	2004      	movs	r0, #4
   88490:	2100      	movs	r1, #0
   88492:	4b08      	ldr	r3, [pc, #32]	; (884b4 <cl_temp_safestate+0x38>)
   88494:	4798      	blx	r3
	//sv_cntrl_deactivatevenousclamp();
	Cl_Dlsis_BypassDialysis();
   88496:	4b08      	ldr	r3, [pc, #32]	; (884b8 <cl_temp_safestate+0x3c>)
   88498:	4798      	blx	r3
	cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
   8849a:	4b08      	ldr	r3, [pc, #32]	; (884bc <cl_temp_safestate+0x40>)
   8849c:	220a      	movs	r2, #10
   8849e:	701a      	strb	r2, [r3, #0]
	return 0;
   884a0:	2300      	movs	r3, #0
}
   884a2:	4618      	mov	r0, r3
   884a4:	bd80      	pop	{r7, pc}
   884a6:	bf00      	nop
   884a8:	000a88e0 	.word	0x000a88e0
   884ac:	0009ba51 	.word	0x0009ba51
   884b0:	00099e79 	.word	0x00099e79
   884b4:	00095df5 	.word	0x00095df5
   884b8:	00087159 	.word	0x00087159
   884bc:	20071934 	.word	0x20071934

000884c0 <cl_dprep_primeInit>:
static int8_t cl_dialyser_prime_min = 0;

extern Cl_Dprep_PrimeStates cl_dprep_prime_stateDummy;

Cl_ReturnCodeType cl_dprep_primeInit(void)
{
   884c0:	b480      	push	{r7}
   884c2:	af00      	add	r7, sp, #0
	 cl_dprep_prime_state = CL_DPREP_PRIME_STATE_IDLE;
   884c4:	4b0b      	ldr	r3, [pc, #44]	; (884f4 <cl_dprep_primeInit+0x34>)
   884c6:	2200      	movs	r2, #0
   884c8:	701a      	strb	r2, [r3, #0]
	 cl_dprep_prime_event = CL_DPREP_PRIME_PRIME_NULL;
   884ca:	4b0b      	ldr	r3, [pc, #44]	; (884f8 <cl_dprep_primeInit+0x38>)
   884cc:	2200      	movs	r2, #0
   884ce:	701a      	strb	r2, [r3, #0]
	  cl_prime_sec = 0;
   884d0:	4b0a      	ldr	r3, [pc, #40]	; (884fc <cl_dprep_primeInit+0x3c>)
   884d2:	2200      	movs	r2, #0
   884d4:	701a      	strb	r2, [r3, #0]
	  cl_prime_min = 0;
   884d6:	4b0a      	ldr	r3, [pc, #40]	; (88500 <cl_dprep_primeInit+0x40>)
   884d8:	2200      	movs	r2, #0
   884da:	701a      	strb	r2, [r3, #0]
	  cl_dialyser_prime_sec = 0;
   884dc:	4b09      	ldr	r3, [pc, #36]	; (88504 <cl_dprep_primeInit+0x44>)
   884de:	2200      	movs	r2, #0
   884e0:	701a      	strb	r2, [r3, #0]
	  cl_dialyser_prime_min = 0;
   884e2:	4b09      	ldr	r3, [pc, #36]	; (88508 <cl_dprep_primeInit+0x48>)
   884e4:	2200      	movs	r2, #0
   884e6:	701a      	strb	r2, [r3, #0]
	
}
   884e8:	4618      	mov	r0, r3
   884ea:	46bd      	mov	sp, r7
   884ec:	f85d 7b04 	ldr.w	r7, [sp], #4
   884f0:	4770      	bx	lr
   884f2:	bf00      	nop
   884f4:	20071994 	.word	0x20071994
   884f8:	20071995 	.word	0x20071995
   884fc:	20071996 	.word	0x20071996
   88500:	20071997 	.word	0x20071997
   88504:	20071998 	.word	0x20071998
   88508:	20071999 	.word	0x20071999

0008850c <cl_dprep_primecontroller>:


Cl_ReturnCodeType cl_dprep_primecontroller(Cl_Dprep_PrimeEvents prime_event , int16_t data)
{
   8850c:	b580      	push	{r7, lr}
   8850e:	b084      	sub	sp, #16
   88510:	af00      	add	r7, sp, #0
   88512:	4603      	mov	r3, r0
   88514:	460a      	mov	r2, r1
   88516:	71fb      	strb	r3, [r7, #7]
   88518:	4613      	mov	r3, r2
   8851a:	80bb      	strh	r3, [r7, #4]
	Cl_ReturnCodeType 	 Cl_dprep_primeretcode = CL_ERROR;
   8851c:	2304      	movs	r3, #4
   8851e:	73fb      	strb	r3, [r7, #15]
	
	if(prime_event == CL_DPREP_PRIME_PRIME_TICK_SEC)
   88520:	79fb      	ldrb	r3, [r7, #7]
   88522:	2b0b      	cmp	r3, #11
   88524:	d103      	bne.n	8852e <cl_dprep_primecontroller+0x22>
	{
		cl_dprep_prime_stateDummy = cl_dprep_prime_state;
   88526:	4bb2      	ldr	r3, [pc, #712]	; (887f0 <cl_dprep_primecontroller+0x2e4>)
   88528:	781a      	ldrb	r2, [r3, #0]
   8852a:	4bb2      	ldr	r3, [pc, #712]	; (887f4 <cl_dprep_primecontroller+0x2e8>)
   8852c:	701a      	strb	r2, [r3, #0]
	}
		switch(cl_dprep_prime_state)
   8852e:	4bb0      	ldr	r3, [pc, #704]	; (887f0 <cl_dprep_primecontroller+0x2e4>)
   88530:	781b      	ldrb	r3, [r3, #0]
   88532:	2b0c      	cmp	r3, #12
   88534:	f200 84a5 	bhi.w	88e82 <cl_dprep_primecontroller+0x976>
   88538:	a201      	add	r2, pc, #4	; (adr r2, 88540 <cl_dprep_primecontroller+0x34>)
   8853a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8853e:	bf00      	nop
   88540:	00088575 	.word	0x00088575
   88544:	000885e1 	.word	0x000885e1
   88548:	00088899 	.word	0x00088899
   8854c:	000886f1 	.word	0x000886f1
   88550:	000887a9 	.word	0x000887a9
   88554:	000889bb 	.word	0x000889bb
   88558:	00088abf 	.word	0x00088abf
   8855c:	00088e83 	.word	0x00088e83
   88560:	00088b2d 	.word	0x00088b2d
   88564:	00088c4f 	.word	0x00088c4f
   88568:	00088e83 	.word	0x00088e83
   8856c:	00088d3d 	.word	0x00088d3d
   88570:	00088ded 	.word	0x00088ded
		{
			case CL_DPREP_PRIME_STATE_IDLE:
			//case CL_DPREP_PRIME_STATE_DIALYSER_PRIMING_STOPPED:
				switch(prime_event)
   88574:	79fb      	ldrb	r3, [r7, #7]
   88576:	2b01      	cmp	r3, #1
   88578:	d009      	beq.n	8858e <cl_dprep_primecontroller+0x82>
   8857a:	2b0e      	cmp	r3, #14
   8857c:	d000      	beq.n	88580 <cl_dprep_primecontroller+0x74>
						Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_PRIME_STARTED,&data,0);
						Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
								
						cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIMING;
					break;
					default:break;
   8857e:	e02d      	b.n	885dc <cl_dprep_primecontroller+0xd0>
			case CL_DPREP_PRIME_STATE_IDLE:
			//case CL_DPREP_PRIME_STATE_DIALYSER_PRIMING_STOPPED:
				switch(prime_event)
				{
					case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
					cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
   88580:	88bb      	ldrh	r3, [r7, #4]
   88582:	b21b      	sxth	r3, r3
   88584:	2001      	movs	r0, #1
   88586:	4619      	mov	r1, r3
   88588:	4b9b      	ldr	r3, [pc, #620]	; (887f8 <cl_dprep_primecontroller+0x2ec>)
   8858a:	4798      	blx	r3
					break;
   8858c:	e026      	b.n	885dc <cl_dprep_primecontroller+0xd0>
					case CL_DPREP_PRIME_PRIME_START:
					DD_CAN_WRITE_HEMO(HEMO_START_BD_CALIBRATION, 0);
   8858e:	2029      	movs	r0, #41	; 0x29
   88590:	2100      	movs	r1, #0
   88592:	4b9a      	ldr	r3, [pc, #616]	; (887fc <cl_dprep_primecontroller+0x2f0>)
   88594:	4798      	blx	r3
					Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PRIME2",6);
   88596:	2018      	movs	r0, #24
   88598:	4999      	ldr	r1, [pc, #612]	; (88800 <cl_dprep_primecontroller+0x2f4>)
   8859a:	2206      	movs	r2, #6
   8859c:	4b99      	ldr	r3, [pc, #612]	; (88804 <cl_dprep_primecontroller+0x2f8>)
   8859e:	4798      	blx	r3
					sv_cntrl_disable_bypass();
   885a0:	4b99      	ldr	r3, [pc, #612]	; (88808 <cl_dprep_primecontroller+0x2fc>)
   885a2:	4798      	blx	r3
					cl_bp_controller(CL_BP_EVENT_START,0);
   885a4:	2002      	movs	r0, #2
   885a6:	2100      	movs	r1, #0
   885a8:	4b93      	ldr	r3, [pc, #588]	; (887f8 <cl_dprep_primecontroller+0x2ec>)
   885aa:	4798      	blx	r3
						
						Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_PRIME_CNFRM,&data,0);
   885ac:	1d3b      	adds	r3, r7, #4
   885ae:	200d      	movs	r0, #13
   885b0:	4619      	mov	r1, r3
   885b2:	2200      	movs	r2, #0
   885b4:	4b93      	ldr	r3, [pc, #588]	; (88804 <cl_dprep_primecontroller+0x2f8>)
   885b6:	4798      	blx	r3
   885b8:	4603      	mov	r3, r0
   885ba:	73fb      	strb	r3, [r7, #15]
						Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_PRIME_STARTED,&data,0);
   885bc:	1d3b      	adds	r3, r7, #4
   885be:	2024      	movs	r0, #36	; 0x24
   885c0:	4619      	mov	r1, r3
   885c2:	2200      	movs	r2, #0
   885c4:	4b8f      	ldr	r3, [pc, #572]	; (88804 <cl_dprep_primecontroller+0x2f8>)
   885c6:	4798      	blx	r3
   885c8:	4603      	mov	r3, r0
   885ca:	73fb      	strb	r3, [r7, #15]
						Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
   885cc:	4b8f      	ldr	r3, [pc, #572]	; (8880c <cl_dprep_primecontroller+0x300>)
   885ce:	4798      	blx	r3
   885d0:	4603      	mov	r3, r0
   885d2:	73fb      	strb	r3, [r7, #15]
								
						cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIMING;
   885d4:	4b86      	ldr	r3, [pc, #536]	; (887f0 <cl_dprep_primecontroller+0x2e4>)
   885d6:	2201      	movs	r2, #1
   885d8:	701a      	strb	r2, [r3, #0]
					break;
   885da:	bf00      	nop
					default:break;
				}
			break;
   885dc:	f000 bc51 	b.w	88e82 <cl_dprep_primecontroller+0x976>
			case CL_DPREP_PRIME_STATE_PRIMING:
				switch(prime_event)
   885e0:	79fb      	ldrb	r3, [r7, #7]
   885e2:	3b02      	subs	r3, #2
   885e4:	2b0c      	cmp	r3, #12
   885e6:	f200 8081 	bhi.w	886ec <cl_dprep_primecontroller+0x1e0>
   885ea:	a201      	add	r2, pc, #4	; (adr r2, 885f0 <cl_dprep_primecontroller+0xe4>)
   885ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   885f0:	0008869b 	.word	0x0008869b
   885f4:	00088625 	.word	0x00088625
   885f8:	000886bb 	.word	0x000886bb
   885fc:	000886ed 	.word	0x000886ed
   88600:	000886ed 	.word	0x000886ed
   88604:	000886ed 	.word	0x000886ed
   88608:	000886ed 	.word	0x000886ed
   8860c:	000886ed 	.word	0x000886ed
   88610:	000886ed 	.word	0x000886ed
   88614:	0008862d 	.word	0x0008862d
   88618:	000886cb 	.word	0x000886cb
   8861c:	000886d5 	.word	0x000886d5
   88620:	000886df 	.word	0x000886df
				{
					case CL_DPREP_PRIME_PRIME_ALARM:
					cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_STOPPED;
   88624:	4b72      	ldr	r3, [pc, #456]	; (887f0 <cl_dprep_primecontroller+0x2e4>)
   88626:	2203      	movs	r2, #3
   88628:	701a      	strb	r2, [r3, #0]
					break;
   8862a:	e060      	b.n	886ee <cl_dprep_primecontroller+0x1e2>
					case CL_DPREP_PRIME_PRIME_TICK_SEC:
					Cl_dprep_primeretcode = Cl_Dprep_SendPrepStateData(PRIMING_DATA);
   8862c:	2002      	movs	r0, #2
   8862e:	4b78      	ldr	r3, [pc, #480]	; (88810 <cl_dprep_primecontroller+0x304>)
   88630:	4798      	blx	r3
   88632:	4603      	mov	r3, r0
   88634:	73fb      	strb	r3, [r7, #15]
					if(cl_prime_sec++ >= 60)
   88636:	4b77      	ldr	r3, [pc, #476]	; (88814 <cl_dprep_primecontroller+0x308>)
   88638:	781b      	ldrb	r3, [r3, #0]
   8863a:	b2db      	uxtb	r3, r3
   8863c:	b2da      	uxtb	r2, r3
   8863e:	3201      	adds	r2, #1
   88640:	b2d2      	uxtb	r2, r2
   88642:	b2d1      	uxtb	r1, r2
   88644:	4a73      	ldr	r2, [pc, #460]	; (88814 <cl_dprep_primecontroller+0x308>)
   88646:	7011      	strb	r1, [r2, #0]
   88648:	b25b      	sxtb	r3, r3
   8864a:	2b3b      	cmp	r3, #59	; 0x3b
   8864c:	dd0f      	ble.n	8866e <cl_dprep_primecontroller+0x162>
					{
						cl_prime_sec = 0;
   8864e:	4b71      	ldr	r3, [pc, #452]	; (88814 <cl_dprep_primecontroller+0x308>)
   88650:	2200      	movs	r2, #0
   88652:	701a      	strb	r2, [r3, #0]
						cl_prime_min++;
   88654:	4b70      	ldr	r3, [pc, #448]	; (88818 <cl_dprep_primecontroller+0x30c>)
   88656:	781b      	ldrb	r3, [r3, #0]
   88658:	b2db      	uxtb	r3, r3
   8865a:	b2db      	uxtb	r3, r3
   8865c:	3301      	adds	r3, #1
   8865e:	b2db      	uxtb	r3, r3
   88660:	b2da      	uxtb	r2, r3
   88662:	4b6d      	ldr	r3, [pc, #436]	; (88818 <cl_dprep_primecontroller+0x30c>)
   88664:	701a      	strb	r2, [r3, #0]
						Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
   88666:	4b69      	ldr	r3, [pc, #420]	; (8880c <cl_dprep_primecontroller+0x300>)
   88668:	4798      	blx	r3
   8866a:	4603      	mov	r3, r0
   8866c:	73fb      	strb	r3, [r7, #15]
						
					}
					if(cl_prime_min >= CL_DPREP_PRIME_TIMEOUT_MIN )
   8866e:	4b6a      	ldr	r3, [pc, #424]	; (88818 <cl_dprep_primecontroller+0x30c>)
   88670:	781b      	ldrb	r3, [r3, #0]
   88672:	b25b      	sxtb	r3, r3
   88674:	2b00      	cmp	r3, #0
   88676:	dd0f      	ble.n	88698 <cl_dprep_primecontroller+0x18c>
					{
						cl_bp_controller(CL_BP_EVENT_STOP,0);
   88678:	2004      	movs	r0, #4
   8867a:	2100      	movs	r1, #0
   8867c:	4b5e      	ldr	r3, [pc, #376]	; (887f8 <cl_dprep_primecontroller+0x2ec>)
   8867e:	4798      	blx	r3
						
						Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_PRIME_COMPLETED,&data,0);
   88680:	1d3b      	adds	r3, r7, #4
   88682:	200f      	movs	r0, #15
   88684:	4619      	mov	r1, r3
   88686:	2200      	movs	r2, #0
   88688:	4b5e      	ldr	r3, [pc, #376]	; (88804 <cl_dprep_primecontroller+0x2f8>)
   8868a:	4798      	blx	r3
   8868c:	4603      	mov	r3, r0
   8868e:	73fb      	strb	r3, [r7, #15]
						cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_COMPLETED;
   88690:	4b57      	ldr	r3, [pc, #348]	; (887f0 <cl_dprep_primecontroller+0x2e4>)
   88692:	2202      	movs	r2, #2
   88694:	701a      	strb	r2, [r3, #0]
					//	cl_dprep_prime_state = CL_DPREP_PRIME_STATE_IDLE;
					}

					break;
   88696:	e02a      	b.n	886ee <cl_dprep_primecontroller+0x1e2>
   88698:	e029      	b.n	886ee <cl_dprep_primecontroller+0x1e2>
					case CL_DPREP_PRIME_PRIME_SET_RATE:
					break;
					case CL_DPREP_PRIME_PRIME_STOP:
					cl_bp_controller(CL_BP_EVENT_STOP,0);
   8869a:	2004      	movs	r0, #4
   8869c:	2100      	movs	r1, #0
   8869e:	4b56      	ldr	r3, [pc, #344]	; (887f8 <cl_dprep_primecontroller+0x2ec>)
   886a0:	4798      	blx	r3
					Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_PRIME_STOPPED,&data,0);
   886a2:	1d3b      	adds	r3, r7, #4
   886a4:	2023      	movs	r0, #35	; 0x23
   886a6:	4619      	mov	r1, r3
   886a8:	2200      	movs	r2, #0
   886aa:	4b56      	ldr	r3, [pc, #344]	; (88804 <cl_dprep_primecontroller+0x2f8>)
   886ac:	4798      	blx	r3
   886ae:	4603      	mov	r3, r0
   886b0:	73fb      	strb	r3, [r7, #15]
					cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_STOPPED;
   886b2:	4b4f      	ldr	r3, [pc, #316]	; (887f0 <cl_dprep_primecontroller+0x2e4>)
   886b4:	2203      	movs	r2, #3
   886b6:	701a      	strb	r2, [r3, #0]
					break;
   886b8:	e019      	b.n	886ee <cl_dprep_primecontroller+0x1e2>
					case CL_DPREP_PRIME_PRIME_PAUSE:
					cl_bp_controller(CL_BP_EVENT_STOP,0);
   886ba:	2004      	movs	r0, #4
   886bc:	2100      	movs	r1, #0
   886be:	4b4e      	ldr	r3, [pc, #312]	; (887f8 <cl_dprep_primecontroller+0x2ec>)
   886c0:	4798      	blx	r3
					cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_PAUSED;
   886c2:	4b4b      	ldr	r3, [pc, #300]	; (887f0 <cl_dprep_primecontroller+0x2e4>)
   886c4:	2204      	movs	r2, #4
   886c6:	701a      	strb	r2, [r3, #0]
					break;
   886c8:	e011      	b.n	886ee <cl_dprep_primecontroller+0x1e2>
					case 	CL_DPREP_PRIME_BLOODPUMP_START:
					 cl_bp_controller(CL_BP_EVENT_START,0);
   886ca:	2002      	movs	r0, #2
   886cc:	2100      	movs	r1, #0
   886ce:	4b4a      	ldr	r3, [pc, #296]	; (887f8 <cl_dprep_primecontroller+0x2ec>)
   886d0:	4798      	blx	r3
					break;
   886d2:	e00c      	b.n	886ee <cl_dprep_primecontroller+0x1e2>
					case CL_DPREP_PRIME_BLOODPUMP_STOP:
					 cl_bp_controller(CL_BP_EVENT_STOP,0);
   886d4:	2004      	movs	r0, #4
   886d6:	2100      	movs	r1, #0
   886d8:	4b47      	ldr	r3, [pc, #284]	; (887f8 <cl_dprep_primecontroller+0x2ec>)
   886da:	4798      	blx	r3
					break;
   886dc:	e007      	b.n	886ee <cl_dprep_primecontroller+0x1e2>
					case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
					cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
   886de:	88bb      	ldrh	r3, [r7, #4]
   886e0:	b21b      	sxth	r3, r3
   886e2:	2001      	movs	r0, #1
   886e4:	4619      	mov	r1, r3
   886e6:	4b44      	ldr	r3, [pc, #272]	; (887f8 <cl_dprep_primecontroller+0x2ec>)
   886e8:	4798      	blx	r3
					break;
   886ea:	e000      	b.n	886ee <cl_dprep_primecontroller+0x1e2>
					default:break;
   886ec:	bf00      	nop
				}

			
			break;
   886ee:	e3c8      	b.n	88e82 <cl_dprep_primecontroller+0x976>
			case CL_DPREP_PRIME_STATE_PRIME_STOPPED:
						switch(prime_event)
   886f0:	79fb      	ldrb	r3, [r7, #7]
   886f2:	3b01      	subs	r3, #1
   886f4:	2b0d      	cmp	r3, #13
   886f6:	f200 83b9 	bhi.w	88e6c <cl_dprep_primecontroller+0x960>
   886fa:	a201      	add	r2, pc, #4	; (adr r2, 88700 <cl_dprep_primecontroller+0x1f4>)
   886fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   88700:	00088739 	.word	0x00088739
   88704:	00088e6d 	.word	0x00088e6d
   88708:	00088e6d 	.word	0x00088e6d
   8870c:	00088e6d 	.word	0x00088e6d
   88710:	00088e6d 	.word	0x00088e6d
   88714:	00088e6d 	.word	0x00088e6d
   88718:	00088e6d 	.word	0x00088e6d
   8871c:	00088e6d 	.word	0x00088e6d
   88720:	00088e6d 	.word	0x00088e6d
   88724:	00088e6d 	.word	0x00088e6d
   88728:	00088e6d 	.word	0x00088e6d
   8872c:	00088785 	.word	0x00088785
   88730:	0008878f 	.word	0x0008878f
   88734:	00088799 	.word	0x00088799
						{
							case CL_DPREP_PRIME_PRIME_START:
							DD_CAN_WRITE_HEMO(HEMO_START_BD_CALIBRATION, 0);
   88738:	2029      	movs	r0, #41	; 0x29
   8873a:	2100      	movs	r1, #0
   8873c:	4b2f      	ldr	r3, [pc, #188]	; (887fc <cl_dprep_primecontroller+0x2f0>)
   8873e:	4798      	blx	r3
								cl_bp_controller(CL_BP_EVENT_START,0);
   88740:	2002      	movs	r0, #2
   88742:	2100      	movs	r1, #0
   88744:	4b2c      	ldr	r3, [pc, #176]	; (887f8 <cl_dprep_primecontroller+0x2ec>)
   88746:	4798      	blx	r3
								cl_prime_min = 0;
   88748:	4b33      	ldr	r3, [pc, #204]	; (88818 <cl_dprep_primecontroller+0x30c>)
   8874a:	2200      	movs	r2, #0
   8874c:	701a      	strb	r2, [r3, #0]
								cl_prime_sec = 0;
   8874e:	4b31      	ldr	r3, [pc, #196]	; (88814 <cl_dprep_primecontroller+0x308>)
   88750:	2200      	movs	r2, #0
   88752:	701a      	strb	r2, [r3, #0]
								Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_PRIME_CNFRM,&data,0);
   88754:	1d3b      	adds	r3, r7, #4
   88756:	200d      	movs	r0, #13
   88758:	4619      	mov	r1, r3
   8875a:	2200      	movs	r2, #0
   8875c:	4b29      	ldr	r3, [pc, #164]	; (88804 <cl_dprep_primecontroller+0x2f8>)
   8875e:	4798      	blx	r3
   88760:	4603      	mov	r3, r0
   88762:	73fb      	strb	r3, [r7, #15]
								Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_PRIME_STARTED,&data,0);
   88764:	1d3b      	adds	r3, r7, #4
   88766:	2024      	movs	r0, #36	; 0x24
   88768:	4619      	mov	r1, r3
   8876a:	2200      	movs	r2, #0
   8876c:	4b25      	ldr	r3, [pc, #148]	; (88804 <cl_dprep_primecontroller+0x2f8>)
   8876e:	4798      	blx	r3
   88770:	4603      	mov	r3, r0
   88772:	73fb      	strb	r3, [r7, #15]
								Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
   88774:	4b25      	ldr	r3, [pc, #148]	; (8880c <cl_dprep_primecontroller+0x300>)
   88776:	4798      	blx	r3
   88778:	4603      	mov	r3, r0
   8877a:	73fb      	strb	r3, [r7, #15]
								
								cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIMING;
   8877c:	4b1c      	ldr	r3, [pc, #112]	; (887f0 <cl_dprep_primecontroller+0x2e4>)
   8877e:	2201      	movs	r2, #1
   88780:	701a      	strb	r2, [r3, #0]
							break;
   88782:	e010      	b.n	887a6 <cl_dprep_primecontroller+0x29a>
							case 	CL_DPREP_PRIME_BLOODPUMP_START:
							cl_bp_controller(CL_BP_EVENT_START,0);
   88784:	2002      	movs	r0, #2
   88786:	2100      	movs	r1, #0
   88788:	4b1b      	ldr	r3, [pc, #108]	; (887f8 <cl_dprep_primecontroller+0x2ec>)
   8878a:	4798      	blx	r3
							break;
   8878c:	e00b      	b.n	887a6 <cl_dprep_primecontroller+0x29a>
							case CL_DPREP_PRIME_BLOODPUMP_STOP:
							cl_bp_controller(CL_BP_EVENT_STOP,0);
   8878e:	2004      	movs	r0, #4
   88790:	2100      	movs	r1, #0
   88792:	4b19      	ldr	r3, [pc, #100]	; (887f8 <cl_dprep_primecontroller+0x2ec>)
   88794:	4798      	blx	r3
							break;
   88796:	e006      	b.n	887a6 <cl_dprep_primecontroller+0x29a>
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
   88798:	88bb      	ldrh	r3, [r7, #4]
   8879a:	b21b      	sxth	r3, r3
   8879c:	2001      	movs	r0, #1
   8879e:	4619      	mov	r1, r3
   887a0:	4b15      	ldr	r3, [pc, #84]	; (887f8 <cl_dprep_primecontroller+0x2ec>)
   887a2:	4798      	blx	r3
							break;
   887a4:	bf00      	nop
						}
			break;
   887a6:	e361      	b.n	88e6c <cl_dprep_primecontroller+0x960>
			case CL_DPREP_PRIME_STATE_PRIME_PAUSED:
						switch(prime_event)
   887a8:	79fb      	ldrb	r3, [r7, #7]
   887aa:	3b01      	subs	r3, #1
   887ac:	2b0d      	cmp	r3, #13
   887ae:	f200 835f 	bhi.w	88e70 <cl_dprep_primecontroller+0x964>
   887b2:	a201      	add	r2, pc, #4	; (adr r2, 887b8 <cl_dprep_primecontroller+0x2ac>)
   887b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   887b8:	0008881d 	.word	0x0008881d
   887bc:	00088855 	.word	0x00088855
   887c0:	00088e71 	.word	0x00088e71
   887c4:	00088e71 	.word	0x00088e71
   887c8:	00088e71 	.word	0x00088e71
   887cc:	00088e71 	.word	0x00088e71
   887d0:	00088e71 	.word	0x00088e71
   887d4:	00088e71 	.word	0x00088e71
   887d8:	00088e71 	.word	0x00088e71
   887dc:	00088e71 	.word	0x00088e71
   887e0:	00088e71 	.word	0x00088e71
   887e4:	00088875 	.word	0x00088875
   887e8:	0008887f 	.word	0x0008887f
   887ec:	00088889 	.word	0x00088889
   887f0:	20071994 	.word	0x20071994
   887f4:	20072654 	.word	0x20072654
   887f8:	00093305 	.word	0x00093305
   887fc:	00096a6d 	.word	0x00096a6d
   88800:	000a88e8 	.word	0x000a88e8
   88804:	0009ba51 	.word	0x0009ba51
   88808:	00099ea1 	.word	0x00099ea1
   8880c:	00088e9d 	.word	0x00088e9d
   88810:	000a08d1 	.word	0x000a08d1
   88814:	20071996 	.word	0x20071996
   88818:	20071997 	.word	0x20071997
						{
							case CL_DPREP_PRIME_PRIME_START:
								cl_bp_controller(CL_BP_EVENT_START,0);
   8881c:	2002      	movs	r0, #2
   8881e:	2100      	movs	r1, #0
   88820:	4ba9      	ldr	r3, [pc, #676]	; (88ac8 <cl_dprep_primecontroller+0x5bc>)
   88822:	4798      	blx	r3
								Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_PRIME_CNFRM,&data,0);
   88824:	1d3b      	adds	r3, r7, #4
   88826:	200d      	movs	r0, #13
   88828:	4619      	mov	r1, r3
   8882a:	2200      	movs	r2, #0
   8882c:	4ba7      	ldr	r3, [pc, #668]	; (88acc <cl_dprep_primecontroller+0x5c0>)
   8882e:	4798      	blx	r3
   88830:	4603      	mov	r3, r0
   88832:	73fb      	strb	r3, [r7, #15]
								Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_PRIME_STARTED,&data,0);
   88834:	1d3b      	adds	r3, r7, #4
   88836:	2024      	movs	r0, #36	; 0x24
   88838:	4619      	mov	r1, r3
   8883a:	2200      	movs	r2, #0
   8883c:	4ba3      	ldr	r3, [pc, #652]	; (88acc <cl_dprep_primecontroller+0x5c0>)
   8883e:	4798      	blx	r3
   88840:	4603      	mov	r3, r0
   88842:	73fb      	strb	r3, [r7, #15]
								Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
   88844:	4ba2      	ldr	r3, [pc, #648]	; (88ad0 <cl_dprep_primecontroller+0x5c4>)
   88846:	4798      	blx	r3
   88848:	4603      	mov	r3, r0
   8884a:	73fb      	strb	r3, [r7, #15]
								
								cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIMING;
   8884c:	4ba1      	ldr	r3, [pc, #644]	; (88ad4 <cl_dprep_primecontroller+0x5c8>)
   8884e:	2201      	movs	r2, #1
   88850:	701a      	strb	r2, [r3, #0]
							break;
   88852:	e020      	b.n	88896 <cl_dprep_primecontroller+0x38a>
							case CL_DPREP_PRIME_PRIME_STOP:
							cl_bp_controller(CL_BP_EVENT_STOP,0);
   88854:	2004      	movs	r0, #4
   88856:	2100      	movs	r1, #0
   88858:	4b9b      	ldr	r3, [pc, #620]	; (88ac8 <cl_dprep_primecontroller+0x5bc>)
   8885a:	4798      	blx	r3
							Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_PRIME_STOPPED,&data,0);
   8885c:	1d3b      	adds	r3, r7, #4
   8885e:	2023      	movs	r0, #35	; 0x23
   88860:	4619      	mov	r1, r3
   88862:	2200      	movs	r2, #0
   88864:	4b99      	ldr	r3, [pc, #612]	; (88acc <cl_dprep_primecontroller+0x5c0>)
   88866:	4798      	blx	r3
   88868:	4603      	mov	r3, r0
   8886a:	73fb      	strb	r3, [r7, #15]
							cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_STOPPED;
   8886c:	4b99      	ldr	r3, [pc, #612]	; (88ad4 <cl_dprep_primecontroller+0x5c8>)
   8886e:	2203      	movs	r2, #3
   88870:	701a      	strb	r2, [r3, #0]
							break;
   88872:	e010      	b.n	88896 <cl_dprep_primecontroller+0x38a>
							case 	CL_DPREP_PRIME_BLOODPUMP_START:
							cl_bp_controller(CL_BP_EVENT_START,0);
   88874:	2002      	movs	r0, #2
   88876:	2100      	movs	r1, #0
   88878:	4b93      	ldr	r3, [pc, #588]	; (88ac8 <cl_dprep_primecontroller+0x5bc>)
   8887a:	4798      	blx	r3
							break;
   8887c:	e00b      	b.n	88896 <cl_dprep_primecontroller+0x38a>
							case CL_DPREP_PRIME_BLOODPUMP_STOP:
							cl_bp_controller(CL_BP_EVENT_STOP,0);
   8887e:	2004      	movs	r0, #4
   88880:	2100      	movs	r1, #0
   88882:	4b91      	ldr	r3, [pc, #580]	; (88ac8 <cl_dprep_primecontroller+0x5bc>)
   88884:	4798      	blx	r3
							break;
   88886:	e006      	b.n	88896 <cl_dprep_primecontroller+0x38a>
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
   88888:	88bb      	ldrh	r3, [r7, #4]
   8888a:	b21b      	sxth	r3, r3
   8888c:	2001      	movs	r0, #1
   8888e:	4619      	mov	r1, r3
   88890:	4b8d      	ldr	r3, [pc, #564]	; (88ac8 <cl_dprep_primecontroller+0x5bc>)
   88892:	4798      	blx	r3
							break;
   88894:	bf00      	nop
						}
			break;
   88896:	e2eb      	b.n	88e70 <cl_dprep_primecontroller+0x964>
			case CL_DPREP_PRIME_STATE_PRIME_COMPLETED:
						switch(prime_event)
   88898:	79fb      	ldrb	r3, [r7, #7]
   8889a:	3b01      	subs	r3, #1
   8889c:	2b0d      	cmp	r3, #13
   8889e:	f200 82e9 	bhi.w	88e74 <cl_dprep_primecontroller+0x968>
   888a2:	a201      	add	r2, pc, #4	; (adr r2, 888a8 <cl_dprep_primecontroller+0x39c>)
   888a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   888a8:	0008891f 	.word	0x0008891f
   888ac:	00088e75 	.word	0x00088e75
   888b0:	00088e75 	.word	0x00088e75
   888b4:	00088e75 	.word	0x00088e75
   888b8:	000888e1 	.word	0x000888e1
   888bc:	000889b7 	.word	0x000889b7
   888c0:	00088e75 	.word	0x00088e75
   888c4:	0008896d 	.word	0x0008896d
   888c8:	00088e75 	.word	0x00088e75
   888cc:	00088e75 	.word	0x00088e75
   888d0:	00088e75 	.word	0x00088e75
   888d4:	00088995 	.word	0x00088995
   888d8:	0008899f 	.word	0x0008899f
   888dc:	000889a9 	.word	0x000889a9
						{
							case CL_DPREP_PRIME_RCIRC_START:
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC2",6);
   888e0:	2018      	movs	r0, #24
   888e2:	497d      	ldr	r1, [pc, #500]	; (88ad8 <cl_dprep_primecontroller+0x5cc>)
   888e4:	2206      	movs	r2, #6
   888e6:	4b79      	ldr	r3, [pc, #484]	; (88acc <cl_dprep_primecontroller+0x5c0>)
   888e8:	4798      	blx	r3
							cl_prime_min =  0;
   888ea:	4b7c      	ldr	r3, [pc, #496]	; (88adc <cl_dprep_primecontroller+0x5d0>)
   888ec:	2200      	movs	r2, #0
   888ee:	701a      	strb	r2, [r3, #0]
							cl_prime_sec = 0;
   888f0:	4b7b      	ldr	r3, [pc, #492]	; (88ae0 <cl_dprep_primecontroller+0x5d4>)
   888f2:	2200      	movs	r2, #0
   888f4:	701a      	strb	r2, [r3, #0]
					
								cl_bp_controller(CL_BP_EVENT_START,0);
   888f6:	2002      	movs	r0, #2
   888f8:	2100      	movs	r1, #0
   888fa:	4b73      	ldr	r3, [pc, #460]	; (88ac8 <cl_dprep_primecontroller+0x5bc>)
   888fc:	4798      	blx	r3
								//Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_PRIME_CNFRM,&data,0);
								Cl_dprep_primeretcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_SYS_RCIRC_STARTED,&data,0);
   888fe:	1d3b      	adds	r3, r7, #4
   88900:	202f      	movs	r0, #47	; 0x2f
   88902:	4619      	mov	r1, r3
   88904:	2200      	movs	r2, #0
   88906:	4b71      	ldr	r3, [pc, #452]	; (88acc <cl_dprep_primecontroller+0x5c0>)
   88908:	4798      	blx	r3
   8890a:	4603      	mov	r3, r0
   8890c:	73fb      	strb	r3, [r7, #15]
								Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
   8890e:	4b70      	ldr	r3, [pc, #448]	; (88ad0 <cl_dprep_primecontroller+0x5c4>)
   88910:	4798      	blx	r3
   88912:	4603      	mov	r3, r0
   88914:	73fb      	strb	r3, [r7, #15]
								
								cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_RCIRC_STARTED;
   88916:	4b6f      	ldr	r3, [pc, #444]	; (88ad4 <cl_dprep_primecontroller+0x5c8>)
   88918:	2205      	movs	r2, #5
   8891a:	701a      	strb	r2, [r3, #0]
							break;
   8891c:	e04c      	b.n	889b8 <cl_dprep_primecontroller+0x4ac>
							case CL_DPREP_PRIME_RCIRC_STOP:
							break;
							case CL_DPREP_PRIME_PRIME_START:
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PRIME2",6);
   8891e:	2018      	movs	r0, #24
   88920:	4970      	ldr	r1, [pc, #448]	; (88ae4 <cl_dprep_primecontroller+0x5d8>)
   88922:	2206      	movs	r2, #6
   88924:	4b69      	ldr	r3, [pc, #420]	; (88acc <cl_dprep_primecontroller+0x5c0>)
   88926:	4798      	blx	r3
							cl_prime_min =  0;
   88928:	4b6c      	ldr	r3, [pc, #432]	; (88adc <cl_dprep_primecontroller+0x5d0>)
   8892a:	2200      	movs	r2, #0
   8892c:	701a      	strb	r2, [r3, #0]
							cl_prime_sec = 0;
   8892e:	4b6c      	ldr	r3, [pc, #432]	; (88ae0 <cl_dprep_primecontroller+0x5d4>)
   88930:	2200      	movs	r2, #0
   88932:	701a      	strb	r2, [r3, #0]
					
								cl_bp_controller(CL_BP_EVENT_START,0);
   88934:	2002      	movs	r0, #2
   88936:	2100      	movs	r1, #0
   88938:	4b63      	ldr	r3, [pc, #396]	; (88ac8 <cl_dprep_primecontroller+0x5bc>)
   8893a:	4798      	blx	r3
								Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_PRIME_CNFRM,&data,0);
   8893c:	1d3b      	adds	r3, r7, #4
   8893e:	200d      	movs	r0, #13
   88940:	4619      	mov	r1, r3
   88942:	2200      	movs	r2, #0
   88944:	4b61      	ldr	r3, [pc, #388]	; (88acc <cl_dprep_primecontroller+0x5c0>)
   88946:	4798      	blx	r3
   88948:	4603      	mov	r3, r0
   8894a:	73fb      	strb	r3, [r7, #15]
								Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_PRIME_STARTED,&data,0);
   8894c:	1d3b      	adds	r3, r7, #4
   8894e:	2024      	movs	r0, #36	; 0x24
   88950:	4619      	mov	r1, r3
   88952:	2200      	movs	r2, #0
   88954:	4b5d      	ldr	r3, [pc, #372]	; (88acc <cl_dprep_primecontroller+0x5c0>)
   88956:	4798      	blx	r3
   88958:	4603      	mov	r3, r0
   8895a:	73fb      	strb	r3, [r7, #15]
								Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
   8895c:	4b5c      	ldr	r3, [pc, #368]	; (88ad0 <cl_dprep_primecontroller+0x5c4>)
   8895e:	4798      	blx	r3
   88960:	4603      	mov	r3, r0
   88962:	73fb      	strb	r3, [r7, #15]
								
								cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIMING;
   88964:	4b5b      	ldr	r3, [pc, #364]	; (88ad4 <cl_dprep_primecontroller+0x5c8>)
   88966:	2201      	movs	r2, #1
   88968:	701a      	strb	r2, [r3, #0]
							break;
   8896a:	e025      	b.n	889b8 <cl_dprep_primecontroller+0x4ac>

							case CL_DPREP_PRIME_PRIME_START_DIALYSER_PRIMING:
							cl_bp_controller(CL_BP_EVENT_START,0);
   8896c:	2002      	movs	r0, #2
   8896e:	2100      	movs	r1, #0
   88970:	4b55      	ldr	r3, [pc, #340]	; (88ac8 <cl_dprep_primecontroller+0x5bc>)
   88972:	4798      	blx	r3
						//	Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_DIALISER_PRIME_CNFRM,&data,0);
							Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSER_PRIME_STARTED,&data,0);
   88974:	1d3b      	adds	r3, r7, #4
   88976:	2028      	movs	r0, #40	; 0x28
   88978:	4619      	mov	r1, r3
   8897a:	2200      	movs	r2, #0
   8897c:	4b53      	ldr	r3, [pc, #332]	; (88acc <cl_dprep_primecontroller+0x5c0>)
   8897e:	4798      	blx	r3
   88980:	4603      	mov	r3, r0
   88982:	73fb      	strb	r3, [r7, #15]
							Cl_dprep_primeretcode = Cl_Dprep_UpdateDialyserPrimeTimeInfo();
   88984:	4b58      	ldr	r3, [pc, #352]	; (88ae8 <cl_dprep_primecontroller+0x5dc>)
   88986:	4798      	blx	r3
   88988:	4603      	mov	r3, r0
   8898a:	73fb      	strb	r3, [r7, #15]
							cl_dprep_prime_state = CL_DPREP_PRIME_STATE_DIALYSER_PRIMING;
   8898c:	4b51      	ldr	r3, [pc, #324]	; (88ad4 <cl_dprep_primecontroller+0x5c8>)
   8898e:	2209      	movs	r2, #9
   88990:	701a      	strb	r2, [r3, #0]
							break;
   88992:	e011      	b.n	889b8 <cl_dprep_primecontroller+0x4ac>
							case 	CL_DPREP_PRIME_BLOODPUMP_START:
							cl_bp_controller(CL_BP_EVENT_START,0);
   88994:	2002      	movs	r0, #2
   88996:	2100      	movs	r1, #0
   88998:	4b4b      	ldr	r3, [pc, #300]	; (88ac8 <cl_dprep_primecontroller+0x5bc>)
   8899a:	4798      	blx	r3
							break;
   8899c:	e00c      	b.n	889b8 <cl_dprep_primecontroller+0x4ac>
							case CL_DPREP_PRIME_BLOODPUMP_STOP:
							cl_bp_controller(CL_BP_EVENT_STOP,0);
   8899e:	2004      	movs	r0, #4
   889a0:	2100      	movs	r1, #0
   889a2:	4b49      	ldr	r3, [pc, #292]	; (88ac8 <cl_dprep_primecontroller+0x5bc>)
   889a4:	4798      	blx	r3
							break;
   889a6:	e007      	b.n	889b8 <cl_dprep_primecontroller+0x4ac>
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
   889a8:	88bb      	ldrh	r3, [r7, #4]
   889aa:	b21b      	sxth	r3, r3
   889ac:	2001      	movs	r0, #1
   889ae:	4619      	mov	r1, r3
   889b0:	4b45      	ldr	r3, [pc, #276]	; (88ac8 <cl_dprep_primecontroller+0x5bc>)
   889b2:	4798      	blx	r3
							break;
   889b4:	e000      	b.n	889b8 <cl_dprep_primecontroller+0x4ac>
								Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
								
								cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_RCIRC_STARTED;
							break;
							case CL_DPREP_PRIME_RCIRC_STOP:
							break;
   889b6:	bf00      	nop
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
							break;
							
						}
						
			break;
   889b8:	e25c      	b.n	88e74 <cl_dprep_primecontroller+0x968>
			case CL_DPREP_PRIME_STATE_PRIME_RCIRC_STARTED:
		
					switch(prime_event)
   889ba:	79fb      	ldrb	r3, [r7, #7]
   889bc:	3b02      	subs	r3, #2
   889be:	2b0c      	cmp	r3, #12
   889c0:	d87b      	bhi.n	88aba <cl_dprep_primecontroller+0x5ae>
   889c2:	a201      	add	r2, pc, #4	; (adr r2, 889c8 <cl_dprep_primecontroller+0x4bc>)
   889c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   889c8:	00088a69 	.word	0x00088a69
   889cc:	000889fd 	.word	0x000889fd
   889d0:	00088a89 	.word	0x00088a89
   889d4:	00088abb 	.word	0x00088abb
   889d8:	00088abb 	.word	0x00088abb
   889dc:	00088abb 	.word	0x00088abb
   889e0:	00088abb 	.word	0x00088abb
   889e4:	00088abb 	.word	0x00088abb
   889e8:	00088abb 	.word	0x00088abb
   889ec:	00088a05 	.word	0x00088a05
   889f0:	00088a99 	.word	0x00088a99
   889f4:	00088aa3 	.word	0x00088aa3
   889f8:	00088aad 	.word	0x00088aad
					{
						case CL_DPREP_PRIME_PRIME_ALARM:
						cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_RCIRC_STOPPED;
   889fc:	4b35      	ldr	r3, [pc, #212]	; (88ad4 <cl_dprep_primecontroller+0x5c8>)
   889fe:	2206      	movs	r2, #6
   88a00:	701a      	strb	r2, [r3, #0]
						break;
   88a02:	e05b      	b.n	88abc <cl_dprep_primecontroller+0x5b0>
						case CL_DPREP_PRIME_PRIME_TICK_SEC:
						if(cl_prime_sec++ >= 60)
   88a04:	4b36      	ldr	r3, [pc, #216]	; (88ae0 <cl_dprep_primecontroller+0x5d4>)
   88a06:	781b      	ldrb	r3, [r3, #0]
   88a08:	b2db      	uxtb	r3, r3
   88a0a:	b2da      	uxtb	r2, r3
   88a0c:	3201      	adds	r2, #1
   88a0e:	b2d2      	uxtb	r2, r2
   88a10:	b2d1      	uxtb	r1, r2
   88a12:	4a33      	ldr	r2, [pc, #204]	; (88ae0 <cl_dprep_primecontroller+0x5d4>)
   88a14:	7011      	strb	r1, [r2, #0]
   88a16:	b25b      	sxtb	r3, r3
   88a18:	2b3b      	cmp	r3, #59	; 0x3b
   88a1a:	dd0f      	ble.n	88a3c <cl_dprep_primecontroller+0x530>
						{
							cl_prime_sec = 0;
   88a1c:	4b30      	ldr	r3, [pc, #192]	; (88ae0 <cl_dprep_primecontroller+0x5d4>)
   88a1e:	2200      	movs	r2, #0
   88a20:	701a      	strb	r2, [r3, #0]
							cl_prime_min++;
   88a22:	4b2e      	ldr	r3, [pc, #184]	; (88adc <cl_dprep_primecontroller+0x5d0>)
   88a24:	781b      	ldrb	r3, [r3, #0]
   88a26:	b2db      	uxtb	r3, r3
   88a28:	b2db      	uxtb	r3, r3
   88a2a:	3301      	adds	r3, #1
   88a2c:	b2db      	uxtb	r3, r3
   88a2e:	b2da      	uxtb	r2, r3
   88a30:	4b2a      	ldr	r3, [pc, #168]	; (88adc <cl_dprep_primecontroller+0x5d0>)
   88a32:	701a      	strb	r2, [r3, #0]
							Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
   88a34:	4b26      	ldr	r3, [pc, #152]	; (88ad0 <cl_dprep_primecontroller+0x5c4>)
   88a36:	4798      	blx	r3
   88a38:	4603      	mov	r3, r0
   88a3a:	73fb      	strb	r3, [r7, #15]
						}
						if(cl_prime_min >= CL_DPREP_PRIME_TIMEOUT_MIN )
   88a3c:	4b27      	ldr	r3, [pc, #156]	; (88adc <cl_dprep_primecontroller+0x5d0>)
   88a3e:	781b      	ldrb	r3, [r3, #0]
   88a40:	b25b      	sxtb	r3, r3
   88a42:	2b00      	cmp	r3, #0
   88a44:	dd0f      	ble.n	88a66 <cl_dprep_primecontroller+0x55a>
						{
							cl_bp_controller(CL_BP_EVENT_STOP,0);
   88a46:	2004      	movs	r0, #4
   88a48:	2100      	movs	r1, #0
   88a4a:	4b1f      	ldr	r3, [pc, #124]	; (88ac8 <cl_dprep_primecontroller+0x5bc>)
   88a4c:	4798      	blx	r3
						
							Cl_dprep_primeretcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_SYS_RCIRC_COMPLETED,&data,0);
   88a4e:	1d3b      	adds	r3, r7, #4
   88a50:	2031      	movs	r0, #49	; 0x31
   88a52:	4619      	mov	r1, r3
   88a54:	2200      	movs	r2, #0
   88a56:	4b1d      	ldr	r3, [pc, #116]	; (88acc <cl_dprep_primecontroller+0x5c0>)
   88a58:	4798      	blx	r3
   88a5a:	4603      	mov	r3, r0
   88a5c:	73fb      	strb	r3, [r7, #15]
							cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_RCIRC_COMPLETED;
   88a5e:	4b1d      	ldr	r3, [pc, #116]	; (88ad4 <cl_dprep_primecontroller+0x5c8>)
   88a60:	2208      	movs	r2, #8
   88a62:	701a      	strb	r2, [r3, #0]
						
						}

						break;
   88a64:	e02a      	b.n	88abc <cl_dprep_primecontroller+0x5b0>
   88a66:	e029      	b.n	88abc <cl_dprep_primecontroller+0x5b0>
						case CL_DPREP_PRIME_PRIME_SET_RATE:
						break;
						case CL_DPREP_PRIME_PRIME_STOP:
						cl_bp_controller(CL_BP_EVENT_STOP,0);
   88a68:	2004      	movs	r0, #4
   88a6a:	2100      	movs	r1, #0
   88a6c:	4b16      	ldr	r3, [pc, #88]	; (88ac8 <cl_dprep_primecontroller+0x5bc>)
   88a6e:	4798      	blx	r3
						Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_PRIME_STOPPED,&data,0);
   88a70:	1d3b      	adds	r3, r7, #4
   88a72:	2023      	movs	r0, #35	; 0x23
   88a74:	4619      	mov	r1, r3
   88a76:	2200      	movs	r2, #0
   88a78:	4b14      	ldr	r3, [pc, #80]	; (88acc <cl_dprep_primecontroller+0x5c0>)
   88a7a:	4798      	blx	r3
   88a7c:	4603      	mov	r3, r0
   88a7e:	73fb      	strb	r3, [r7, #15]
						cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_STOPPED;
   88a80:	4b14      	ldr	r3, [pc, #80]	; (88ad4 <cl_dprep_primecontroller+0x5c8>)
   88a82:	2203      	movs	r2, #3
   88a84:	701a      	strb	r2, [r3, #0]
						break;
   88a86:	e019      	b.n	88abc <cl_dprep_primecontroller+0x5b0>
						case CL_DPREP_PRIME_PRIME_PAUSE:
						cl_bp_controller(CL_BP_EVENT_STOP,0);
   88a88:	2004      	movs	r0, #4
   88a8a:	2100      	movs	r1, #0
   88a8c:	4b0e      	ldr	r3, [pc, #56]	; (88ac8 <cl_dprep_primecontroller+0x5bc>)
   88a8e:	4798      	blx	r3
						cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_PAUSED;
   88a90:	4b10      	ldr	r3, [pc, #64]	; (88ad4 <cl_dprep_primecontroller+0x5c8>)
   88a92:	2204      	movs	r2, #4
   88a94:	701a      	strb	r2, [r3, #0]
						break;
   88a96:	e011      	b.n	88abc <cl_dprep_primecontroller+0x5b0>
						case 	CL_DPREP_PRIME_BLOODPUMP_START:
						 cl_bp_controller(CL_BP_EVENT_START,0);
   88a98:	2002      	movs	r0, #2
   88a9a:	2100      	movs	r1, #0
   88a9c:	4b0a      	ldr	r3, [pc, #40]	; (88ac8 <cl_dprep_primecontroller+0x5bc>)
   88a9e:	4798      	blx	r3
						break;
   88aa0:	e00c      	b.n	88abc <cl_dprep_primecontroller+0x5b0>
						case CL_DPREP_PRIME_BLOODPUMP_STOP:
						 cl_bp_controller(CL_BP_EVENT_STOP,0);
   88aa2:	2004      	movs	r0, #4
   88aa4:	2100      	movs	r1, #0
   88aa6:	4b08      	ldr	r3, [pc, #32]	; (88ac8 <cl_dprep_primecontroller+0x5bc>)
   88aa8:	4798      	blx	r3
						break;
   88aaa:	e007      	b.n	88abc <cl_dprep_primecontroller+0x5b0>
						case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
						cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
   88aac:	88bb      	ldrh	r3, [r7, #4]
   88aae:	b21b      	sxth	r3, r3
   88ab0:	2001      	movs	r0, #1
   88ab2:	4619      	mov	r1, r3
   88ab4:	4b04      	ldr	r3, [pc, #16]	; (88ac8 <cl_dprep_primecontroller+0x5bc>)
   88ab6:	4798      	blx	r3
						break;
   88ab8:	e000      	b.n	88abc <cl_dprep_primecontroller+0x5b0>
						default:break;
   88aba:	bf00      	nop
					}

			
			break;
   88abc:	e1e1      	b.n	88e82 <cl_dprep_primecontroller+0x976>
			case CL_DPREP_PRIME_STATE_PRIME_RCIRC_STOPPED:
							switch(prime_event)
   88abe:	79fb      	ldrb	r3, [r7, #7]
   88ac0:	2b05      	cmp	r3, #5
   88ac2:	d013      	beq.n	88aec <cl_dprep_primecontroller+0x5e0>
									Cl_dprep_primeretcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_SYS_RCIRC_STARTED,&data,0);
									Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
								
									cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_RCIRC_STARTED;
								break;
								default:break;
   88ac4:	e031      	b.n	88b2a <cl_dprep_primecontroller+0x61e>
   88ac6:	bf00      	nop
   88ac8:	00093305 	.word	0x00093305
   88acc:	0009ba51 	.word	0x0009ba51
   88ad0:	00088e9d 	.word	0x00088e9d
   88ad4:	20071994 	.word	0x20071994
   88ad8:	000a88f0 	.word	0x000a88f0
   88adc:	20071997 	.word	0x20071997
   88ae0:	20071996 	.word	0x20071996
   88ae4:	000a88e8 	.word	0x000a88e8
   88ae8:	00088f21 	.word	0x00088f21
			break;
			case CL_DPREP_PRIME_STATE_PRIME_RCIRC_STOPPED:
							switch(prime_event)
									{
							case CL_DPREP_PRIME_RCIRC_START:
									Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC2",6);
   88aec:	2018      	movs	r0, #24
   88aee:	49b2      	ldr	r1, [pc, #712]	; (88db8 <cl_dprep_primecontroller+0x8ac>)
   88af0:	2206      	movs	r2, #6
   88af2:	4bb2      	ldr	r3, [pc, #712]	; (88dbc <cl_dprep_primecontroller+0x8b0>)
   88af4:	4798      	blx	r3
									cl_prime_min =  0;
   88af6:	4bb2      	ldr	r3, [pc, #712]	; (88dc0 <cl_dprep_primecontroller+0x8b4>)
   88af8:	2200      	movs	r2, #0
   88afa:	701a      	strb	r2, [r3, #0]
									cl_prime_sec = 0;
   88afc:	4bb1      	ldr	r3, [pc, #708]	; (88dc4 <cl_dprep_primecontroller+0x8b8>)
   88afe:	2200      	movs	r2, #0
   88b00:	701a      	strb	r2, [r3, #0]
					
									cl_bp_controller(CL_BP_EVENT_START,0);
   88b02:	2002      	movs	r0, #2
   88b04:	2100      	movs	r1, #0
   88b06:	4bb0      	ldr	r3, [pc, #704]	; (88dc8 <cl_dprep_primecontroller+0x8bc>)
   88b08:	4798      	blx	r3
									//Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_PRIME_CNFRM,&data,0);
									Cl_dprep_primeretcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_SYS_RCIRC_STARTED,&data,0);
   88b0a:	1d3b      	adds	r3, r7, #4
   88b0c:	202f      	movs	r0, #47	; 0x2f
   88b0e:	4619      	mov	r1, r3
   88b10:	2200      	movs	r2, #0
   88b12:	4baa      	ldr	r3, [pc, #680]	; (88dbc <cl_dprep_primecontroller+0x8b0>)
   88b14:	4798      	blx	r3
   88b16:	4603      	mov	r3, r0
   88b18:	73fb      	strb	r3, [r7, #15]
									Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
   88b1a:	4bac      	ldr	r3, [pc, #688]	; (88dcc <cl_dprep_primecontroller+0x8c0>)
   88b1c:	4798      	blx	r3
   88b1e:	4603      	mov	r3, r0
   88b20:	73fb      	strb	r3, [r7, #15]
								
									cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_RCIRC_STARTED;
   88b22:	4bab      	ldr	r3, [pc, #684]	; (88dd0 <cl_dprep_primecontroller+0x8c4>)
   88b24:	2205      	movs	r2, #5
   88b26:	701a      	strb	r2, [r3, #0]
								break;
   88b28:	bf00      	nop
								default:break;
									}
			break;
   88b2a:	e1aa      	b.n	88e82 <cl_dprep_primecontroller+0x976>
			case CL_DPREP_PRIME_STATE_PRIME_RCIRC_COMPLETED:
						switch(prime_event)
   88b2c:	79fb      	ldrb	r3, [r7, #7]
   88b2e:	3b01      	subs	r3, #1
   88b30:	2b0d      	cmp	r3, #13
   88b32:	f200 81a1 	bhi.w	88e78 <cl_dprep_primecontroller+0x96c>
   88b36:	a201      	add	r2, pc, #4	; (adr r2, 88b3c <cl_dprep_primecontroller+0x630>)
   88b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   88b3c:	00088bb3 	.word	0x00088bb3
   88b40:	00088e79 	.word	0x00088e79
   88b44:	00088e79 	.word	0x00088e79
   88b48:	00088e79 	.word	0x00088e79
   88b4c:	00088b75 	.word	0x00088b75
   88b50:	00088c4b 	.word	0x00088c4b
   88b54:	00088e79 	.word	0x00088e79
   88b58:	00088c01 	.word	0x00088c01
   88b5c:	00088e79 	.word	0x00088e79
   88b60:	00088e79 	.word	0x00088e79
   88b64:	00088e79 	.word	0x00088e79
   88b68:	00088c29 	.word	0x00088c29
   88b6c:	00088c33 	.word	0x00088c33
   88b70:	00088c3d 	.word	0x00088c3d
						{
							case CL_DPREP_PRIME_RCIRC_START:
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC2",6);
   88b74:	2018      	movs	r0, #24
   88b76:	4990      	ldr	r1, [pc, #576]	; (88db8 <cl_dprep_primecontroller+0x8ac>)
   88b78:	2206      	movs	r2, #6
   88b7a:	4b90      	ldr	r3, [pc, #576]	; (88dbc <cl_dprep_primecontroller+0x8b0>)
   88b7c:	4798      	blx	r3
							cl_prime_min =  0;
   88b7e:	4b90      	ldr	r3, [pc, #576]	; (88dc0 <cl_dprep_primecontroller+0x8b4>)
   88b80:	2200      	movs	r2, #0
   88b82:	701a      	strb	r2, [r3, #0]
							cl_prime_sec = 0;
   88b84:	4b8f      	ldr	r3, [pc, #572]	; (88dc4 <cl_dprep_primecontroller+0x8b8>)
   88b86:	2200      	movs	r2, #0
   88b88:	701a      	strb	r2, [r3, #0]
					
								cl_bp_controller(CL_BP_EVENT_START,0);
   88b8a:	2002      	movs	r0, #2
   88b8c:	2100      	movs	r1, #0
   88b8e:	4b8e      	ldr	r3, [pc, #568]	; (88dc8 <cl_dprep_primecontroller+0x8bc>)
   88b90:	4798      	blx	r3
								//Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_PRIME_CNFRM,&data,0);
								Cl_dprep_primeretcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_SYS_RCIRC_STARTED,&data,0);
   88b92:	1d3b      	adds	r3, r7, #4
   88b94:	202f      	movs	r0, #47	; 0x2f
   88b96:	4619      	mov	r1, r3
   88b98:	2200      	movs	r2, #0
   88b9a:	4b88      	ldr	r3, [pc, #544]	; (88dbc <cl_dprep_primecontroller+0x8b0>)
   88b9c:	4798      	blx	r3
   88b9e:	4603      	mov	r3, r0
   88ba0:	73fb      	strb	r3, [r7, #15]
								Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
   88ba2:	4b8a      	ldr	r3, [pc, #552]	; (88dcc <cl_dprep_primecontroller+0x8c0>)
   88ba4:	4798      	blx	r3
   88ba6:	4603      	mov	r3, r0
   88ba8:	73fb      	strb	r3, [r7, #15]
								
								cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_RCIRC_STARTED;
   88baa:	4b89      	ldr	r3, [pc, #548]	; (88dd0 <cl_dprep_primecontroller+0x8c4>)
   88bac:	2205      	movs	r2, #5
   88bae:	701a      	strb	r2, [r3, #0]
							break;
   88bb0:	e04c      	b.n	88c4c <cl_dprep_primecontroller+0x740>
							case CL_DPREP_PRIME_RCIRC_STOP:
							break;
							case CL_DPREP_PRIME_PRIME_START:
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PRIME2",6);
   88bb2:	2018      	movs	r0, #24
   88bb4:	4987      	ldr	r1, [pc, #540]	; (88dd4 <cl_dprep_primecontroller+0x8c8>)
   88bb6:	2206      	movs	r2, #6
   88bb8:	4b80      	ldr	r3, [pc, #512]	; (88dbc <cl_dprep_primecontroller+0x8b0>)
   88bba:	4798      	blx	r3
							cl_prime_min =  0;
   88bbc:	4b80      	ldr	r3, [pc, #512]	; (88dc0 <cl_dprep_primecontroller+0x8b4>)
   88bbe:	2200      	movs	r2, #0
   88bc0:	701a      	strb	r2, [r3, #0]
							cl_prime_sec = 0;
   88bc2:	4b80      	ldr	r3, [pc, #512]	; (88dc4 <cl_dprep_primecontroller+0x8b8>)
   88bc4:	2200      	movs	r2, #0
   88bc6:	701a      	strb	r2, [r3, #0]
					
								cl_bp_controller(CL_BP_EVENT_START,0);
   88bc8:	2002      	movs	r0, #2
   88bca:	2100      	movs	r1, #0
   88bcc:	4b7e      	ldr	r3, [pc, #504]	; (88dc8 <cl_dprep_primecontroller+0x8bc>)
   88bce:	4798      	blx	r3
								Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_PRIME_CNFRM,&data,0);
   88bd0:	1d3b      	adds	r3, r7, #4
   88bd2:	200d      	movs	r0, #13
   88bd4:	4619      	mov	r1, r3
   88bd6:	2200      	movs	r2, #0
   88bd8:	4b78      	ldr	r3, [pc, #480]	; (88dbc <cl_dprep_primecontroller+0x8b0>)
   88bda:	4798      	blx	r3
   88bdc:	4603      	mov	r3, r0
   88bde:	73fb      	strb	r3, [r7, #15]
								Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_PRIME_STARTED,&data,0);
   88be0:	1d3b      	adds	r3, r7, #4
   88be2:	2024      	movs	r0, #36	; 0x24
   88be4:	4619      	mov	r1, r3
   88be6:	2200      	movs	r2, #0
   88be8:	4b74      	ldr	r3, [pc, #464]	; (88dbc <cl_dprep_primecontroller+0x8b0>)
   88bea:	4798      	blx	r3
   88bec:	4603      	mov	r3, r0
   88bee:	73fb      	strb	r3, [r7, #15]
								Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
   88bf0:	4b76      	ldr	r3, [pc, #472]	; (88dcc <cl_dprep_primecontroller+0x8c0>)
   88bf2:	4798      	blx	r3
   88bf4:	4603      	mov	r3, r0
   88bf6:	73fb      	strb	r3, [r7, #15]
								
								cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIMING;
   88bf8:	4b75      	ldr	r3, [pc, #468]	; (88dd0 <cl_dprep_primecontroller+0x8c4>)
   88bfa:	2201      	movs	r2, #1
   88bfc:	701a      	strb	r2, [r3, #0]
							break;
   88bfe:	e025      	b.n	88c4c <cl_dprep_primecontroller+0x740>

							case CL_DPREP_PRIME_PRIME_START_DIALYSER_PRIMING:
							cl_bp_controller(CL_BP_EVENT_START,0);
   88c00:	2002      	movs	r0, #2
   88c02:	2100      	movs	r1, #0
   88c04:	4b70      	ldr	r3, [pc, #448]	; (88dc8 <cl_dprep_primecontroller+0x8bc>)
   88c06:	4798      	blx	r3
						//	Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_DIALISER_PRIME_CNFRM,&data,0);
							Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSER_PRIME_STARTED,&data,0);
   88c08:	1d3b      	adds	r3, r7, #4
   88c0a:	2028      	movs	r0, #40	; 0x28
   88c0c:	4619      	mov	r1, r3
   88c0e:	2200      	movs	r2, #0
   88c10:	4b6a      	ldr	r3, [pc, #424]	; (88dbc <cl_dprep_primecontroller+0x8b0>)
   88c12:	4798      	blx	r3
   88c14:	4603      	mov	r3, r0
   88c16:	73fb      	strb	r3, [r7, #15]
							Cl_dprep_primeretcode = Cl_Dprep_UpdateDialyserPrimeTimeInfo();
   88c18:	4b6f      	ldr	r3, [pc, #444]	; (88dd8 <cl_dprep_primecontroller+0x8cc>)
   88c1a:	4798      	blx	r3
   88c1c:	4603      	mov	r3, r0
   88c1e:	73fb      	strb	r3, [r7, #15]
							cl_dprep_prime_state = CL_DPREP_PRIME_STATE_DIALYSER_PRIMING;
   88c20:	4b6b      	ldr	r3, [pc, #428]	; (88dd0 <cl_dprep_primecontroller+0x8c4>)
   88c22:	2209      	movs	r2, #9
   88c24:	701a      	strb	r2, [r3, #0]
							break;
   88c26:	e011      	b.n	88c4c <cl_dprep_primecontroller+0x740>
							case 	CL_DPREP_PRIME_BLOODPUMP_START:
							cl_bp_controller(CL_BP_EVENT_START,0);
   88c28:	2002      	movs	r0, #2
   88c2a:	2100      	movs	r1, #0
   88c2c:	4b66      	ldr	r3, [pc, #408]	; (88dc8 <cl_dprep_primecontroller+0x8bc>)
   88c2e:	4798      	blx	r3
							break;
   88c30:	e00c      	b.n	88c4c <cl_dprep_primecontroller+0x740>
							case CL_DPREP_PRIME_BLOODPUMP_STOP:
							cl_bp_controller(CL_BP_EVENT_STOP,0);
   88c32:	2004      	movs	r0, #4
   88c34:	2100      	movs	r1, #0
   88c36:	4b64      	ldr	r3, [pc, #400]	; (88dc8 <cl_dprep_primecontroller+0x8bc>)
   88c38:	4798      	blx	r3
							break;
   88c3a:	e007      	b.n	88c4c <cl_dprep_primecontroller+0x740>
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
   88c3c:	88bb      	ldrh	r3, [r7, #4]
   88c3e:	b21b      	sxth	r3, r3
   88c40:	2001      	movs	r0, #1
   88c42:	4619      	mov	r1, r3
   88c44:	4b60      	ldr	r3, [pc, #384]	; (88dc8 <cl_dprep_primecontroller+0x8bc>)
   88c46:	4798      	blx	r3
							break;
   88c48:	e000      	b.n	88c4c <cl_dprep_primecontroller+0x740>
								Cl_dprep_primeretcode = Cl_Dprep_primeUpdatePrimeTimeInfo();
								
								cl_dprep_prime_state = CL_DPREP_PRIME_STATE_PRIME_RCIRC_STARTED;
							break;
							case CL_DPREP_PRIME_RCIRC_STOP:
							break;
   88c4a:	bf00      	nop
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
							break;
							
						}
			break;
   88c4c:	e114      	b.n	88e78 <cl_dprep_primecontroller+0x96c>
			
			case CL_DPREP_PRIME_STATE_DIALYSER_PRIMING:
						switch(prime_event)
   88c4e:	79fb      	ldrb	r3, [r7, #7]
   88c50:	3b02      	subs	r3, #2
   88c52:	2b0c      	cmp	r3, #12
   88c54:	d870      	bhi.n	88d38 <cl_dprep_primecontroller+0x82c>
   88c56:	a201      	add	r2, pc, #4	; (adr r2, 88c5c <cl_dprep_primecontroller+0x750>)
   88c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   88c5c:	00088ccd 	.word	0x00088ccd
   88c60:	00088c91 	.word	0x00088c91
   88c64:	00088d39 	.word	0x00088d39
   88c68:	00088d39 	.word	0x00088d39
   88c6c:	00088d39 	.word	0x00088d39
   88c70:	00088d39 	.word	0x00088d39
   88c74:	00088d39 	.word	0x00088d39
   88c78:	00088ccd 	.word	0x00088ccd
   88c7c:	00088d0f 	.word	0x00088d0f
   88c80:	00088c99 	.word	0x00088c99
   88c84:	00088d17 	.word	0x00088d17
   88c88:	00088d21 	.word	0x00088d21
   88c8c:	00088d2b 	.word	0x00088d2b
						{
							case CL_DPREP_PRIME_PRIME_ALARM:
							cl_dprep_prime_state = CL_DPREP_PRIME_STATE_DIALYSER_PRIMING_STOPPED;
   88c90:	4b4f      	ldr	r3, [pc, #316]	; (88dd0 <cl_dprep_primecontroller+0x8c4>)
   88c92:	220b      	movs	r2, #11
   88c94:	701a      	strb	r2, [r3, #0]
							break;
   88c96:	e050      	b.n	88d3a <cl_dprep_primecontroller+0x82e>
							case CL_DPREP_PRIME_PRIME_TICK_SEC:
							if(cl_dialyser_prime_sec++ >= 60)
   88c98:	4b50      	ldr	r3, [pc, #320]	; (88ddc <cl_dprep_primecontroller+0x8d0>)
   88c9a:	781b      	ldrb	r3, [r3, #0]
   88c9c:	b2db      	uxtb	r3, r3
   88c9e:	b2da      	uxtb	r2, r3
   88ca0:	3201      	adds	r2, #1
   88ca2:	b2d2      	uxtb	r2, r2
   88ca4:	b2d1      	uxtb	r1, r2
   88ca6:	4a4d      	ldr	r2, [pc, #308]	; (88ddc <cl_dprep_primecontroller+0x8d0>)
   88ca8:	7011      	strb	r1, [r2, #0]
   88caa:	b25b      	sxtb	r3, r3
   88cac:	2b3b      	cmp	r3, #59	; 0x3b
   88cae:	dd0c      	ble.n	88cca <cl_dprep_primecontroller+0x7be>
							{
								cl_dialyser_prime_sec = 0;
   88cb0:	4b4a      	ldr	r3, [pc, #296]	; (88ddc <cl_dprep_primecontroller+0x8d0>)
   88cb2:	2200      	movs	r2, #0
   88cb4:	701a      	strb	r2, [r3, #0]
								cl_dialyser_prime_min++;
   88cb6:	4b4a      	ldr	r3, [pc, #296]	; (88de0 <cl_dprep_primecontroller+0x8d4>)
   88cb8:	781b      	ldrb	r3, [r3, #0]
   88cba:	b2db      	uxtb	r3, r3
   88cbc:	b2db      	uxtb	r3, r3
   88cbe:	3301      	adds	r3, #1
   88cc0:	b2db      	uxtb	r3, r3
   88cc2:	b2da      	uxtb	r2, r3
   88cc4:	4b46      	ldr	r3, [pc, #280]	; (88de0 <cl_dprep_primecontroller+0x8d4>)
   88cc6:	701a      	strb	r2, [r3, #0]
// 								cl_bp_controller(CL_BP_EVENT_STOP,0);
// 								Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALISYS_PRIME_COMPLETED,&data,0);
// 								cl_dprep_prime_state = CL_DPREP_PRIME_STATE_DIALYSER_PRIMING_COMPLETED;
// 						
// 							}
							break;
   88cc8:	e037      	b.n	88d3a <cl_dprep_primecontroller+0x82e>
   88cca:	e036      	b.n	88d3a <cl_dprep_primecontroller+0x82e>
							break;
							case CL_DPREP_PRIME_PRIME_STOP_DIALYSER_PRIMING:
							case CL_DPREP_PRIME_PRIME_STOP:
							
								// //lets keep bloodpump running
								if(data == 1)
   88ccc:	88bb      	ldrh	r3, [r7, #4]
   88cce:	b21b      	sxth	r3, r3
   88cd0:	2b01      	cmp	r3, #1
   88cd2:	d107      	bne.n	88ce4 <cl_dprep_primecontroller+0x7d8>
								{
									//Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALISYS_PRIME_COMPLETED,&data,0);
									cl_bp_controller(CL_BP_EVENT_STOP,0);
   88cd4:	2004      	movs	r0, #4
   88cd6:	2100      	movs	r1, #0
   88cd8:	4b3b      	ldr	r3, [pc, #236]	; (88dc8 <cl_dprep_primecontroller+0x8bc>)
   88cda:	4798      	blx	r3
									cl_dprep_prime_state = CL_DPREP_PRIME_STATE_DIALYSER_PRIMING_COMPLETED;
   88cdc:	4b3c      	ldr	r3, [pc, #240]	; (88dd0 <cl_dprep_primecontroller+0x8c4>)
   88cde:	220a      	movs	r2, #10
   88ce0:	701a      	strb	r2, [r3, #0]
									Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSER_PRIME_STOPPED,NULL,0);
								}

							//	Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSER_PRIME_STOPPED,NULL,0);
								
							break;
   88ce2:	e02a      	b.n	88d3a <cl_dprep_primecontroller+0x82e>
									//Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALISYS_PRIME_COMPLETED,&data,0);
									cl_bp_controller(CL_BP_EVENT_STOP,0);
									cl_dprep_prime_state = CL_DPREP_PRIME_STATE_DIALYSER_PRIMING_COMPLETED;
								}else
								{
									sv_cntrl_enable_bypass();
   88ce4:	4b3f      	ldr	r3, [pc, #252]	; (88de4 <cl_dprep_primecontroller+0x8d8>)
   88ce6:	4798      	blx	r3
									cl_bp_controller(CL_BP_EVENT_STOP,0);
   88ce8:	2004      	movs	r0, #4
   88cea:	2100      	movs	r1, #0
   88cec:	4b36      	ldr	r3, [pc, #216]	; (88dc8 <cl_dprep_primecontroller+0x8bc>)
   88cee:	4798      	blx	r3
									cl_dialyser_prime_sec = 0;
   88cf0:	4b3a      	ldr	r3, [pc, #232]	; (88ddc <cl_dprep_primecontroller+0x8d0>)
   88cf2:	2200      	movs	r2, #0
   88cf4:	701a      	strb	r2, [r3, #0]
									cl_dialyser_prime_min = 0;
   88cf6:	4b3a      	ldr	r3, [pc, #232]	; (88de0 <cl_dprep_primecontroller+0x8d4>)
   88cf8:	2200      	movs	r2, #0
   88cfa:	701a      	strb	r2, [r3, #0]
									cl_dprep_prime_state = CL_DPREP_PRIME_STATE_DIALYSER_PRIMING_STOPPED;
   88cfc:	4b34      	ldr	r3, [pc, #208]	; (88dd0 <cl_dprep_primecontroller+0x8c4>)
   88cfe:	220b      	movs	r2, #11
   88d00:	701a      	strb	r2, [r3, #0]
									Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSER_PRIME_STOPPED,NULL,0);
   88d02:	2029      	movs	r0, #41	; 0x29
   88d04:	2100      	movs	r1, #0
   88d06:	2200      	movs	r2, #0
   88d08:	4b2c      	ldr	r3, [pc, #176]	; (88dbc <cl_dprep_primecontroller+0x8b0>)
   88d0a:	4798      	blx	r3
								}

							//	Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSER_PRIME_STOPPED,NULL,0);
								
							break;
   88d0c:	e015      	b.n	88d3a <cl_dprep_primecontroller+0x82e>
							case CL_DPREP_PRIME_PRIME_PAUSE_DIALYSER_PRIMING:
							
							cl_dprep_prime_state = CL_DPREP_PRIME_STATE_DIALYSER_PRIMING_PAUSED;
   88d0e:	4b30      	ldr	r3, [pc, #192]	; (88dd0 <cl_dprep_primecontroller+0x8c4>)
   88d10:	220c      	movs	r2, #12
   88d12:	701a      	strb	r2, [r3, #0]
							break;
   88d14:	e011      	b.n	88d3a <cl_dprep_primecontroller+0x82e>
							case 	CL_DPREP_PRIME_BLOODPUMP_START:
							cl_bp_controller(CL_BP_EVENT_START,0);
   88d16:	2002      	movs	r0, #2
   88d18:	2100      	movs	r1, #0
   88d1a:	4b2b      	ldr	r3, [pc, #172]	; (88dc8 <cl_dprep_primecontroller+0x8bc>)
   88d1c:	4798      	blx	r3
							break;
   88d1e:	e00c      	b.n	88d3a <cl_dprep_primecontroller+0x82e>
							case CL_DPREP_PRIME_BLOODPUMP_STOP:
							cl_bp_controller(CL_BP_EVENT_STOP,0);
   88d20:	2004      	movs	r0, #4
   88d22:	2100      	movs	r1, #0
   88d24:	4b28      	ldr	r3, [pc, #160]	; (88dc8 <cl_dprep_primecontroller+0x8bc>)
   88d26:	4798      	blx	r3
							break;
   88d28:	e007      	b.n	88d3a <cl_dprep_primecontroller+0x82e>
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
   88d2a:	88bb      	ldrh	r3, [r7, #4]
   88d2c:	b21b      	sxth	r3, r3
   88d2e:	2001      	movs	r0, #1
   88d30:	4619      	mov	r1, r3
   88d32:	4b25      	ldr	r3, [pc, #148]	; (88dc8 <cl_dprep_primecontroller+0x8bc>)
   88d34:	4798      	blx	r3
							break;
   88d36:	e000      	b.n	88d3a <cl_dprep_primecontroller+0x82e>
							default:break;
   88d38:	bf00      	nop
						}
			break;
   88d3a:	e0a2      	b.n	88e82 <cl_dprep_primecontroller+0x976>
			case CL_DPREP_PRIME_STATE_DIALYSER_PRIMING_STOPPED:
						switch(prime_event)
   88d3c:	79fb      	ldrb	r3, [r7, #7]
   88d3e:	3b08      	subs	r3, #8
   88d40:	2b06      	cmp	r3, #6
   88d42:	f200 809b 	bhi.w	88e7c <cl_dprep_primecontroller+0x970>
   88d46:	a201      	add	r2, pc, #4	; (adr r2, 88d4c <cl_dprep_primecontroller+0x840>)
   88d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   88d4c:	00088d69 	.word	0x00088d69
   88d50:	00088e7d 	.word	0x00088e7d
   88d54:	00088e7d 	.word	0x00088e7d
   88d58:	00088e7d 	.word	0x00088e7d
   88d5c:	00088d95 	.word	0x00088d95
   88d60:	00088d9f 	.word	0x00088d9f
   88d64:	00088da9 	.word	0x00088da9
						{
							case CL_DPREP_PRIME_PRIME_START_DIALYSER_PRIMING:
							sv_cntrl_disable_bypass();
   88d68:	4b1f      	ldr	r3, [pc, #124]	; (88de8 <cl_dprep_primecontroller+0x8dc>)
   88d6a:	4798      	blx	r3
							cl_bp_controller(CL_BP_EVENT_START,0);
   88d6c:	2002      	movs	r0, #2
   88d6e:	2100      	movs	r1, #0
   88d70:	4b15      	ldr	r3, [pc, #84]	; (88dc8 <cl_dprep_primecontroller+0x8bc>)
   88d72:	4798      	blx	r3
					//		Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_DIALISER_PRIME_CNFRM,&data,0);
							Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSER_PRIME_STARTED,&data,0);
   88d74:	1d3b      	adds	r3, r7, #4
   88d76:	2028      	movs	r0, #40	; 0x28
   88d78:	4619      	mov	r1, r3
   88d7a:	2200      	movs	r2, #0
   88d7c:	4b0f      	ldr	r3, [pc, #60]	; (88dbc <cl_dprep_primecontroller+0x8b0>)
   88d7e:	4798      	blx	r3
   88d80:	4603      	mov	r3, r0
   88d82:	73fb      	strb	r3, [r7, #15]
							Cl_dprep_primeretcode = Cl_Dprep_UpdateDialyserPrimeTimeInfo();
   88d84:	4b14      	ldr	r3, [pc, #80]	; (88dd8 <cl_dprep_primecontroller+0x8cc>)
   88d86:	4798      	blx	r3
   88d88:	4603      	mov	r3, r0
   88d8a:	73fb      	strb	r3, [r7, #15]
							cl_dprep_prime_state = CL_DPREP_PRIME_STATE_DIALYSER_PRIMING;
   88d8c:	4b10      	ldr	r3, [pc, #64]	; (88dd0 <cl_dprep_primecontroller+0x8c4>)
   88d8e:	2209      	movs	r2, #9
   88d90:	701a      	strb	r2, [r3, #0]
							break;
   88d92:	e010      	b.n	88db6 <cl_dprep_primecontroller+0x8aa>
							case 	CL_DPREP_PRIME_BLOODPUMP_START:
							cl_bp_controller(CL_BP_EVENT_START,0);
   88d94:	2002      	movs	r0, #2
   88d96:	2100      	movs	r1, #0
   88d98:	4b0b      	ldr	r3, [pc, #44]	; (88dc8 <cl_dprep_primecontroller+0x8bc>)
   88d9a:	4798      	blx	r3
							break;
   88d9c:	e00b      	b.n	88db6 <cl_dprep_primecontroller+0x8aa>
							case CL_DPREP_PRIME_BLOODPUMP_STOP:
							cl_bp_controller(CL_BP_EVENT_STOP,0);
   88d9e:	2004      	movs	r0, #4
   88da0:	2100      	movs	r1, #0
   88da2:	4b09      	ldr	r3, [pc, #36]	; (88dc8 <cl_dprep_primecontroller+0x8bc>)
   88da4:	4798      	blx	r3
							break;
   88da6:	e006      	b.n	88db6 <cl_dprep_primecontroller+0x8aa>
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
   88da8:	88bb      	ldrh	r3, [r7, #4]
   88daa:	b21b      	sxth	r3, r3
   88dac:	2001      	movs	r0, #1
   88dae:	4619      	mov	r1, r3
   88db0:	4b05      	ldr	r3, [pc, #20]	; (88dc8 <cl_dprep_primecontroller+0x8bc>)
   88db2:	4798      	blx	r3
							break;
   88db4:	bf00      	nop
						}
			break;
   88db6:	e061      	b.n	88e7c <cl_dprep_primecontroller+0x970>
   88db8:	000a88f0 	.word	0x000a88f0
   88dbc:	0009ba51 	.word	0x0009ba51
   88dc0:	20071997 	.word	0x20071997
   88dc4:	20071996 	.word	0x20071996
   88dc8:	00093305 	.word	0x00093305
   88dcc:	00088e9d 	.word	0x00088e9d
   88dd0:	20071994 	.word	0x20071994
   88dd4:	000a88e8 	.word	0x000a88e8
   88dd8:	00088f21 	.word	0x00088f21
   88ddc:	20071998 	.word	0x20071998
   88de0:	20071999 	.word	0x20071999
   88de4:	00099e79 	.word	0x00099e79
   88de8:	00099ea1 	.word	0x00099ea1
			case CL_DPREP_PRIME_STATE_DIALYSER_PRIMING_PAUSED:
						switch(prime_event)
   88dec:	79fb      	ldrb	r3, [r7, #7]
   88dee:	3b08      	subs	r3, #8
   88df0:	2b06      	cmp	r3, #6
   88df2:	d845      	bhi.n	88e80 <cl_dprep_primecontroller+0x974>
   88df4:	a201      	add	r2, pc, #4	; (adr r2, 88dfc <cl_dprep_primecontroller+0x8f0>)
   88df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   88dfa:	bf00      	nop
   88dfc:	00088e19 	.word	0x00088e19
   88e00:	00088e41 	.word	0x00088e41
   88e04:	00088e81 	.word	0x00088e81
   88e08:	00088e81 	.word	0x00088e81
   88e0c:	00088e49 	.word	0x00088e49
   88e10:	00088e53 	.word	0x00088e53
   88e14:	00088e5d 	.word	0x00088e5d
						{
							case CL_DPREP_PRIME_PRIME_START_DIALYSER_PRIMING:
							cl_bp_controller(CL_BP_EVENT_START,0);
   88e18:	2002      	movs	r0, #2
   88e1a:	2100      	movs	r1, #0
   88e1c:	4b1b      	ldr	r3, [pc, #108]	; (88e8c <cl_dprep_primecontroller+0x980>)
   88e1e:	4798      	blx	r3
						//	Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_DIALISER_PRIME_CNFRM,&data,0);
							Cl_dprep_primeretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSER_PRIME_STARTED,&data,0);
   88e20:	1d3b      	adds	r3, r7, #4
   88e22:	2028      	movs	r0, #40	; 0x28
   88e24:	4619      	mov	r1, r3
   88e26:	2200      	movs	r2, #0
   88e28:	4b19      	ldr	r3, [pc, #100]	; (88e90 <cl_dprep_primecontroller+0x984>)
   88e2a:	4798      	blx	r3
   88e2c:	4603      	mov	r3, r0
   88e2e:	73fb      	strb	r3, [r7, #15]
							Cl_dprep_primeretcode = Cl_Dprep_UpdateDialyserPrimeTimeInfo();
   88e30:	4b18      	ldr	r3, [pc, #96]	; (88e94 <cl_dprep_primecontroller+0x988>)
   88e32:	4798      	blx	r3
   88e34:	4603      	mov	r3, r0
   88e36:	73fb      	strb	r3, [r7, #15]
							cl_dprep_prime_state = CL_DPREP_PRIME_STATE_DIALYSER_PRIMING;
   88e38:	4b17      	ldr	r3, [pc, #92]	; (88e98 <cl_dprep_primecontroller+0x98c>)
   88e3a:	2209      	movs	r2, #9
   88e3c:	701a      	strb	r2, [r3, #0]
							break;
   88e3e:	e014      	b.n	88e6a <cl_dprep_primecontroller+0x95e>
							case CL_DPREP_PRIME_PRIME_STOP_DIALYSER_PRIMING:
							cl_dprep_prime_state = CL_DPREP_PRIME_STATE_DIALYSER_PRIMING_STOPPED;
   88e40:	4b15      	ldr	r3, [pc, #84]	; (88e98 <cl_dprep_primecontroller+0x98c>)
   88e42:	220b      	movs	r2, #11
   88e44:	701a      	strb	r2, [r3, #0]
							break;
   88e46:	e010      	b.n	88e6a <cl_dprep_primecontroller+0x95e>
							case 	CL_DPREP_PRIME_BLOODPUMP_START:
							cl_bp_controller(CL_BP_EVENT_START,0);
   88e48:	2002      	movs	r0, #2
   88e4a:	2100      	movs	r1, #0
   88e4c:	4b0f      	ldr	r3, [pc, #60]	; (88e8c <cl_dprep_primecontroller+0x980>)
   88e4e:	4798      	blx	r3
							break;
   88e50:	e00b      	b.n	88e6a <cl_dprep_primecontroller+0x95e>
							case CL_DPREP_PRIME_BLOODPUMP_STOP:
							cl_bp_controller(CL_BP_EVENT_STOP,0);
   88e52:	2004      	movs	r0, #4
   88e54:	2100      	movs	r1, #0
   88e56:	4b0d      	ldr	r3, [pc, #52]	; (88e8c <cl_dprep_primecontroller+0x980>)
   88e58:	4798      	blx	r3
							break;
   88e5a:	e006      	b.n	88e6a <cl_dprep_primecontroller+0x95e>
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
   88e5c:	88bb      	ldrh	r3, [r7, #4]
   88e5e:	b21b      	sxth	r3, r3
   88e60:	2001      	movs	r0, #1
   88e62:	4619      	mov	r1, r3
   88e64:	4b09      	ldr	r3, [pc, #36]	; (88e8c <cl_dprep_primecontroller+0x980>)
   88e66:	4798      	blx	r3
							break;
   88e68:	bf00      	nop

						}
			break;
   88e6a:	e009      	b.n	88e80 <cl_dprep_primecontroller+0x974>
							break;
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
							break;
						}
			break;
   88e6c:	bf00      	nop
   88e6e:	e008      	b.n	88e82 <cl_dprep_primecontroller+0x976>
							break;
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
							break;
						}
			break;
   88e70:	bf00      	nop
   88e72:	e006      	b.n	88e82 <cl_dprep_primecontroller+0x976>
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
							break;
							
						}
						
			break;
   88e74:	bf00      	nop
   88e76:	e004      	b.n	88e82 <cl_dprep_primecontroller+0x976>
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
							break;
							
						}
			break;
   88e78:	bf00      	nop
   88e7a:	e002      	b.n	88e82 <cl_dprep_primecontroller+0x976>
							break;
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
							break;
						}
			break;
   88e7c:	bf00      	nop
   88e7e:	e000      	b.n	88e82 <cl_dprep_primecontroller+0x976>
							case CL_DPREP_PRIME_BLOODPUMP_SETRATE:
							cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,data);
							break;

						}
			break;
   88e80:	bf00      	nop

		}
	

	
	return 0;
   88e82:	2300      	movs	r3, #0
}
   88e84:	4618      	mov	r0, r3
   88e86:	3710      	adds	r7, #16
   88e88:	46bd      	mov	sp, r7
   88e8a:	bd80      	pop	{r7, pc}
   88e8c:	00093305 	.word	0x00093305
   88e90:	0009ba51 	.word	0x0009ba51
   88e94:	00088f21 	.word	0x00088f21
   88e98:	20071994 	.word	0x20071994

00088e9c <Cl_Dprep_primeUpdatePrimeTimeInfo>:


Cl_ReturnCodeType Cl_Dprep_primeUpdatePrimeTimeInfo(void)
{
   88e9c:	b580      	push	{r7, lr}
   88e9e:	b084      	sub	sp, #16
   88ea0:	af00      	add	r7, sp, #0
	
	Cl_ReturnCodeType  Cl_dprep_primeretcode = CL_ERROR;
   88ea2:	2304      	movs	r3, #4
   88ea4:	73fb      	strb	r3, [r7, #15]
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   88ea6:	2351      	movs	r3, #81	; 0x51
   88ea8:	73bb      	strb	r3, [r7, #14]
	Cl_Uint8Type data[7] = {0,0,0,0,0,0,0};
   88eaa:	2300      	movs	r3, #0
   88eac:	713b      	strb	r3, [r7, #4]
   88eae:	2300      	movs	r3, #0
   88eb0:	717b      	strb	r3, [r7, #5]
   88eb2:	2300      	movs	r3, #0
   88eb4:	71bb      	strb	r3, [r7, #6]
   88eb6:	2300      	movs	r3, #0
   88eb8:	71fb      	strb	r3, [r7, #7]
   88eba:	2300      	movs	r3, #0
   88ebc:	723b      	strb	r3, [r7, #8]
   88ebe:	2300      	movs	r3, #0
   88ec0:	727b      	strb	r3, [r7, #9]
   88ec2:	2300      	movs	r3, #0
   88ec4:	72bb      	strb	r3, [r7, #10]
	
	command = CON_TX_COMMAND_REM_TIME;
   88ec6:	230a      	movs	r3, #10
   88ec8:	73bb      	strb	r3, [r7, #14]

	data[0] = (Cl_Uint8Type) PRIMING_DATA;
   88eca:	2302      	movs	r3, #2
   88ecc:	713b      	strb	r3, [r7, #4]

	data[1]= (Cl_Uint8Type)cl_prime_min;
   88ece:	4b11      	ldr	r3, [pc, #68]	; (88f14 <Cl_Dprep_primeUpdatePrimeTimeInfo+0x78>)
   88ed0:	781b      	ldrb	r3, [r3, #0]
   88ed2:	b2db      	uxtb	r3, r3
   88ed4:	717b      	strb	r3, [r7, #5]
	data[2]= (Cl_Uint8Type)0;
   88ed6:	2300      	movs	r3, #0
   88ed8:	71bb      	strb	r3, [r7, #6]
	data[3]= (Cl_Uint8Type)cl_prime_sec;
   88eda:	4b0f      	ldr	r3, [pc, #60]	; (88f18 <Cl_Dprep_primeUpdatePrimeTimeInfo+0x7c>)
   88edc:	781b      	ldrb	r3, [r3, #0]
   88ede:	b2db      	uxtb	r3, r3
   88ee0:	71fb      	strb	r3, [r7, #7]
	data[4]= (Cl_Uint8Type) (CL_DPREP_PRIME_TIMEOUT_MIN - cl_prime_min );
   88ee2:	4b0c      	ldr	r3, [pc, #48]	; (88f14 <Cl_Dprep_primeUpdatePrimeTimeInfo+0x78>)
   88ee4:	781b      	ldrb	r3, [r3, #0]
   88ee6:	b2db      	uxtb	r3, r3
   88ee8:	f1c3 0301 	rsb	r3, r3, #1
   88eec:	b2db      	uxtb	r3, r3
   88eee:	723b      	strb	r3, [r7, #8]
	data[5]= (Cl_Uint8Type) 0;
   88ef0:	2300      	movs	r3, #0
   88ef2:	727b      	strb	r3, [r7, #9]
	data[6]= (Cl_Uint8Type) 0;
   88ef4:	2300      	movs	r3, #0
   88ef6:	72bb      	strb	r3, [r7, #10]
	
	Cl_dprep_primeretcode = Cl_SendDatatoconsole(command,&data,7);
   88ef8:	7bba      	ldrb	r2, [r7, #14]
   88efa:	1d3b      	adds	r3, r7, #4
   88efc:	4610      	mov	r0, r2
   88efe:	4619      	mov	r1, r3
   88f00:	2207      	movs	r2, #7
   88f02:	4b06      	ldr	r3, [pc, #24]	; (88f1c <Cl_Dprep_primeUpdatePrimeTimeInfo+0x80>)
   88f04:	4798      	blx	r3
   88f06:	4603      	mov	r3, r0
   88f08:	73fb      	strb	r3, [r7, #15]
	
	return CL_OK;
   88f0a:	2300      	movs	r3, #0
}
   88f0c:	4618      	mov	r0, r3
   88f0e:	3710      	adds	r7, #16
   88f10:	46bd      	mov	sp, r7
   88f12:	bd80      	pop	{r7, pc}
   88f14:	20071997 	.word	0x20071997
   88f18:	20071996 	.word	0x20071996
   88f1c:	0009ba51 	.word	0x0009ba51

00088f20 <Cl_Dprep_UpdateDialyserPrimeTimeInfo>:

Cl_ReturnCodeType Cl_Dprep_UpdateDialyserPrimeTimeInfo(void)
{
   88f20:	b580      	push	{r7, lr}
   88f22:	b084      	sub	sp, #16
   88f24:	af00      	add	r7, sp, #0
	
	Cl_ReturnCodeType  Cl_dprep_primeretcode = CL_ERROR;
   88f26:	2304      	movs	r3, #4
   88f28:	73fb      	strb	r3, [r7, #15]
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   88f2a:	2351      	movs	r3, #81	; 0x51
   88f2c:	73bb      	strb	r3, [r7, #14]
	Cl_Uint8Type data[7] = {0,0,0,0,0,0,0};
   88f2e:	2300      	movs	r3, #0
   88f30:	713b      	strb	r3, [r7, #4]
   88f32:	2300      	movs	r3, #0
   88f34:	717b      	strb	r3, [r7, #5]
   88f36:	2300      	movs	r3, #0
   88f38:	71bb      	strb	r3, [r7, #6]
   88f3a:	2300      	movs	r3, #0
   88f3c:	71fb      	strb	r3, [r7, #7]
   88f3e:	2300      	movs	r3, #0
   88f40:	723b      	strb	r3, [r7, #8]
   88f42:	2300      	movs	r3, #0
   88f44:	727b      	strb	r3, [r7, #9]
   88f46:	2300      	movs	r3, #0
   88f48:	72bb      	strb	r3, [r7, #10]
	
	command = CON_TX_COMMAND_REM_TIME;
   88f4a:	230a      	movs	r3, #10
   88f4c:	73bb      	strb	r3, [r7, #14]

	data[0] = (Cl_Uint8Type) DIALYSER_PRIME_DATA;
   88f4e:	2303      	movs	r3, #3
   88f50:	713b      	strb	r3, [r7, #4]

	data[1]= (Cl_Uint8Type)cl_dialyser_prime_min;
   88f52:	4b11      	ldr	r3, [pc, #68]	; (88f98 <Cl_Dprep_UpdateDialyserPrimeTimeInfo+0x78>)
   88f54:	781b      	ldrb	r3, [r3, #0]
   88f56:	b2db      	uxtb	r3, r3
   88f58:	717b      	strb	r3, [r7, #5]
	data[2]= (Cl_Uint8Type)0;
   88f5a:	2300      	movs	r3, #0
   88f5c:	71bb      	strb	r3, [r7, #6]
	data[3]= (Cl_Uint8Type)cl_dialyser_prime_sec;
   88f5e:	4b0f      	ldr	r3, [pc, #60]	; (88f9c <Cl_Dprep_UpdateDialyserPrimeTimeInfo+0x7c>)
   88f60:	781b      	ldrb	r3, [r3, #0]
   88f62:	b2db      	uxtb	r3, r3
   88f64:	71fb      	strb	r3, [r7, #7]
	data[4]= (Cl_Uint8Type) (CL_DPREP_DIALISER_PRIME_TIMEOUT_MIN - cl_prime_min );
   88f66:	4b0e      	ldr	r3, [pc, #56]	; (88fa0 <Cl_Dprep_UpdateDialyserPrimeTimeInfo+0x80>)
   88f68:	781b      	ldrb	r3, [r3, #0]
   88f6a:	b2db      	uxtb	r3, r3
   88f6c:	f1c3 0305 	rsb	r3, r3, #5
   88f70:	b2db      	uxtb	r3, r3
   88f72:	723b      	strb	r3, [r7, #8]
	data[5]= (Cl_Uint8Type) 0;
   88f74:	2300      	movs	r3, #0
   88f76:	727b      	strb	r3, [r7, #9]
	data[6]= (Cl_Uint8Type) 0;
   88f78:	2300      	movs	r3, #0
   88f7a:	72bb      	strb	r3, [r7, #10]
	
	Cl_dprep_primeretcode = Cl_SendDatatoconsole(command,&data,7);
   88f7c:	7bba      	ldrb	r2, [r7, #14]
   88f7e:	1d3b      	adds	r3, r7, #4
   88f80:	4610      	mov	r0, r2
   88f82:	4619      	mov	r1, r3
   88f84:	2207      	movs	r2, #7
   88f86:	4b07      	ldr	r3, [pc, #28]	; (88fa4 <Cl_Dprep_UpdateDialyserPrimeTimeInfo+0x84>)
   88f88:	4798      	blx	r3
   88f8a:	4603      	mov	r3, r0
   88f8c:	73fb      	strb	r3, [r7, #15]
	
	return CL_OK;
   88f8e:	2300      	movs	r3, #0

}
   88f90:	4618      	mov	r0, r3
   88f92:	3710      	adds	r7, #16
   88f94:	46bd      	mov	sp, r7
   88f96:	bd80      	pop	{r7, pc}
   88f98:	20071999 	.word	0x20071999
   88f9c:	20071998 	.word	0x20071998
   88fa0:	20071997 	.word	0x20071997
   88fa4:	0009ba51 	.word	0x0009ba51

00088fa8 <cl_dprep_activate_prime_related_alarms>:
		
Cl_ReturnCodeType cl_dprep_activate_prime_related_alarms(void)
{
   88fa8:	b480      	push	{r7}
   88faa:	b083      	sub	sp, #12
   88fac:	af00      	add	r7, sp, #0
			Cl_ReturnCodeType  Cl_dprep_primeretcode = CL_ERROR;
   88fae:	2304      	movs	r3, #4
   88fb0:	71fb      	strb	r3, [r7, #7]
			//		Cl_dprepretcode =  Cl_AlarmActivateAlarms(APTSTATUS_HIGH,true );
			//		Cl_dprepretcode =  Cl_AlarmActivateAlarms(VPTSTATUS_HIGH,true );
	//		Cl_dprep_primeretcode =  Cl_AlarmConfigureAlarmType(BLOODDOOR_STATUS_OPEN,LOGIC_LOW,0,0,0);
	//		Cl_dprep_primeretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true );
			
	return CL_OK;
   88fb2:	2300      	movs	r3, #0
}
   88fb4:	4618      	mov	r0, r3
   88fb6:	370c      	adds	r7, #12
   88fb8:	46bd      	mov	sp, r7
   88fba:	f85d 7b04 	ldr.w	r7, [sp], #4
   88fbe:	4770      	bx	lr

00088fc0 <Cl_Error_Handle_Error>:


#include "cl_errorhandler.h"

Cl_ReturnCodeType Cl_Error_Handle_Error()
{
   88fc0:	b480      	push	{r7}
   88fc2:	af00      	add	r7, sp, #0
	//	Cl_ReturnCodeType a=0,b=0;
	
	return(CL_OK);
   88fc4:	2300      	movs	r3, #0
   88fc6:	4618      	mov	r0, r3
   88fc8:	46bd      	mov	sp, r7
   88fca:	f85d 7b04 	ldr.w	r7, [sp], #4
   88fce:	4770      	bx	lr

00088fd0 <cl_event_handler>:
extern Cl_Uint32Type Treatdata[ID_MAX_TREAT_PARAM] ;
Cl_Int16Type testFPcurrentstatus_prev=0;
static Cl_Uint32Type test_counter =0;
extern Cl_Sys_statusType cl_sys_statbuffer;
Cl_ReturnCodeType cl_event_handler(Cl_Mac_EventsType cl_event)
{
   88fd0:	b580      	push	{r7, lr}
   88fd2:	b084      	sub	sp, #16
   88fd4:	af00      	add	r7, sp, #0
   88fd6:	4603      	mov	r3, r0
   88fd8:	71fb      	strb	r3, [r7, #7]
	
	static volatile Cl_BoolType toggle = false;
	static Cl_BoolType toggle_500 = false;
	
	switch(cl_event)
   88fda:	79fb      	ldrb	r3, [r7, #7]
   88fdc:	3b0d      	subs	r3, #13
   88fde:	2b50      	cmp	r3, #80	; 0x50
   88fe0:	f200 8196 	bhi.w	89310 <cl_event_handler+0x340>
   88fe4:	a201      	add	r2, pc, #4	; (adr r2, 88fec <cl_event_handler+0x1c>)
   88fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   88fea:	bf00      	nop
   88fec:	00089307 	.word	0x00089307
   88ff0:	00089307 	.word	0x00089307
   88ff4:	00089311 	.word	0x00089311
   88ff8:	00089311 	.word	0x00089311
   88ffc:	00089311 	.word	0x00089311
   89000:	00089311 	.word	0x00089311
   89004:	00089311 	.word	0x00089311
   89008:	00089311 	.word	0x00089311
   8900c:	00089311 	.word	0x00089311
   89010:	00089311 	.word	0x00089311
   89014:	00089311 	.word	0x00089311
   89018:	00089311 	.word	0x00089311
   8901c:	00089311 	.word	0x00089311
   89020:	00089311 	.word	0x00089311
   89024:	00089311 	.word	0x00089311
   89028:	00089311 	.word	0x00089311
   8902c:	00089311 	.word	0x00089311
   89030:	00089311 	.word	0x00089311
   89034:	00089311 	.word	0x00089311
   89038:	00089311 	.word	0x00089311
   8903c:	00089311 	.word	0x00089311
   89040:	00089311 	.word	0x00089311
   89044:	00089311 	.word	0x00089311
   89048:	00089311 	.word	0x00089311
   8904c:	00089311 	.word	0x00089311
   89050:	00089311 	.word	0x00089311
   89054:	00089311 	.word	0x00089311
   89058:	00089311 	.word	0x00089311
   8905c:	00089311 	.word	0x00089311
   89060:	00089311 	.word	0x00089311
   89064:	00089311 	.word	0x00089311
   89068:	00089311 	.word	0x00089311
   8906c:	00089311 	.word	0x00089311
   89070:	00089311 	.word	0x00089311
   89074:	000892ff 	.word	0x000892ff
   89078:	00089311 	.word	0x00089311
   8907c:	00089311 	.word	0x00089311
   89080:	00089131 	.word	0x00089131
   89084:	00089311 	.word	0x00089311
   89088:	00089311 	.word	0x00089311
   8908c:	00089311 	.word	0x00089311
   89090:	00089311 	.word	0x00089311
   89094:	0008913f 	.word	0x0008913f
   89098:	00089145 	.word	0x00089145
   8909c:	0008914d 	.word	0x0008914d
   890a0:	0008924f 	.word	0x0008924f
   890a4:	00089277 	.word	0x00089277
   890a8:	000892f7 	.word	0x000892f7
   890ac:	00089311 	.word	0x00089311
   890b0:	00089311 	.word	0x00089311
   890b4:	00089311 	.word	0x00089311
   890b8:	00089311 	.word	0x00089311
   890bc:	00089311 	.word	0x00089311
   890c0:	00089311 	.word	0x00089311
   890c4:	00089311 	.word	0x00089311
   890c8:	00089311 	.word	0x00089311
   890cc:	00089311 	.word	0x00089311
   890d0:	00089311 	.word	0x00089311
   890d4:	00089311 	.word	0x00089311
   890d8:	00089311 	.word	0x00089311
   890dc:	00089311 	.word	0x00089311
   890e0:	00089311 	.word	0x00089311
   890e4:	00089311 	.word	0x00089311
   890e8:	00089311 	.word	0x00089311
   890ec:	00089311 	.word	0x00089311
   890f0:	00089311 	.word	0x00089311
   890f4:	00089311 	.word	0x00089311
   890f8:	00089311 	.word	0x00089311
   890fc:	00089311 	.word	0x00089311
   89100:	00089311 	.word	0x00089311
   89104:	00089311 	.word	0x00089311
   89108:	00089311 	.word	0x00089311
   8910c:	00089311 	.word	0x00089311
   89110:	00089311 	.word	0x00089311
   89114:	00089311 	.word	0x00089311
   89118:	00089311 	.word	0x00089311
   8911c:	00089311 	.word	0x00089311
   89120:	00089311 	.word	0x00089311
   89124:	00089311 	.word	0x00089311
   89128:	00089311 	.word	0x00089311
   8912c:	00089311 	.word	0x00089311
	{
		case EVT_TICK_INSTANT:
		cl_level_switchcontroller(LEVEL_SWITCH_CNTRLER_EVENT_INSTANT);
   89130:	2004      	movs	r0, #4
   89132:	4b7a      	ldr	r3, [pc, #488]	; (8931c <cl_event_handler+0x34c>)
   89134:	4798      	blx	r3
		cl_flow_switchcontroller(FLOW_SWITCH_CNTRLER_EVENT_INSTANT);
   89136:	2006      	movs	r0, #6
   89138:	4b79      	ldr	r3, [pc, #484]	; (89320 <cl_event_handler+0x350>)
   8913a:	4798      	blx	r3
		//	sv_cs_setpotvalue(250);
		
		
		
		
		break;
   8913c:	e0e9      	b.n	89312 <cl_event_handler+0x342>
		}
		
		testFPcurrentstatus_prev = cl_sys_statbuffer.FPcurrentstatus;
		*/
				//cl_ufpumpFeedback_timer(); // commented for testing
				cl_hep_pumpFeedback_timer();
   8913e:	4b79      	ldr	r3, [pc, #484]	; (89324 <cl_event_handler+0x354>)
   89140:	4798      	blx	r3
//	toggle = false;
}
		
	
	
		break;		
   89142:	e0e6      	b.n	89312 <cl_event_handler+0x342>
				}
					
					spent_ticks = 	g_ul_ms_ticks - init_ticks;
			#endif
					
		 Cl_bc_controller(BC_EVENT_50MS);	
   89144:	2000      	movs	r0, #0
   89146:	4b78      	ldr	r3, [pc, #480]	; (89328 <cl_event_handler+0x358>)
   89148:	4798      	blx	r3
// 		}
// 		
// 		testFPcurrentstatus_prev = cl_sys_statbuffer.FPcurrentstatus;
// 		 
// 		}
		break;
   8914a:	e0e2      	b.n	89312 <cl_event_handler+0x342>
	
		
	break;	
		case EVT_TICK_100M:
	//	Cl_Mac_CheckforAlarms();// check if there is any alarms , if there is one generate an event. ALSO This can me moved to respective sub  state handlers to be acted up on a much smaller time tick (on a 10- 100 ms event..???)
	Cl_SysStat_GetSensor_Status_Query(SENSOR_BP_DEC_M , &dtemp);
   8914c:	201e      	movs	r0, #30
   8914e:	4977      	ldr	r1, [pc, #476]	; (8932c <cl_event_handler+0x35c>)
   89150:	4b77      	ldr	r3, [pc, #476]	; (89330 <cl_event_handler+0x360>)
   89152:	4798      	blx	r3
	if(dtemp == 1){
   89154:	4b75      	ldr	r3, [pc, #468]	; (8932c <cl_event_handler+0x35c>)
   89156:	881b      	ldrh	r3, [r3, #0]
   89158:	2b01      	cmp	r3, #1
   8915a:	d113      	bne.n	89184 <cl_event_handler+0x1b4>
		
		dtemp == 0;
		if( Cl_MacEventQueue2.Cl_MacNewEventcount <= MAC_EVENT_COUNT_MAX )
   8915c:	4b75      	ldr	r3, [pc, #468]	; (89334 <cl_event_handler+0x364>)
   8915e:	781b      	ldrb	r3, [r3, #0]
   89160:	2b0a      	cmp	r3, #10
   89162:	d80f      	bhi.n	89184 <cl_event_handler+0x1b4>
		{
			Cl_MacEventQueue2.Cl_MacEvent[Cl_MacEventQueue2.Cl_MacNewEventcount] = EVT_CONSOLE_COMMAND_SET_BLDPUMPDEC_MANUAL ;
   89164:	4b73      	ldr	r3, [pc, #460]	; (89334 <cl_event_handler+0x364>)
   89166:	781b      	ldrb	r3, [r3, #0]
   89168:	461a      	mov	r2, r3
   8916a:	4b72      	ldr	r3, [pc, #456]	; (89334 <cl_event_handler+0x364>)
   8916c:	4413      	add	r3, r2
   8916e:	225c      	movs	r2, #92	; 0x5c
   89170:	709a      	strb	r2, [r3, #2]
			Cl_MacEventQueue2.Cl_MacNewEvent = true;
   89172:	4b70      	ldr	r3, [pc, #448]	; (89334 <cl_event_handler+0x364>)
   89174:	2201      	movs	r2, #1
   89176:	705a      	strb	r2, [r3, #1]
			Cl_MacEventQueue2.Cl_MacNewEventcount++;
   89178:	4b6e      	ldr	r3, [pc, #440]	; (89334 <cl_event_handler+0x364>)
   8917a:	781b      	ldrb	r3, [r3, #0]
   8917c:	3301      	adds	r3, #1
   8917e:	b2da      	uxtb	r2, r3
   89180:	4b6c      	ldr	r3, [pc, #432]	; (89334 <cl_event_handler+0x364>)
   89182:	701a      	strb	r2, [r3, #0]
		
		//Treatdata[ID_bloodrate] - 10 ;
	}
	
	
	Cl_SysStat_GetSensor_Status_Query(SENSOR_BP_INC_M , &itemp);
   89184:	201d      	movs	r0, #29
   89186:	496c      	ldr	r1, [pc, #432]	; (89338 <cl_event_handler+0x368>)
   89188:	4b69      	ldr	r3, [pc, #420]	; (89330 <cl_event_handler+0x360>)
   8918a:	4798      	blx	r3
	if(itemp == 1){
   8918c:	4b6a      	ldr	r3, [pc, #424]	; (89338 <cl_event_handler+0x368>)
   8918e:	881b      	ldrh	r3, [r3, #0]
   89190:	2b01      	cmp	r3, #1
   89192:	d113      	bne.n	891bc <cl_event_handler+0x1ec>
		
		itemp == 0;
		if( Cl_MacEventQueue2.Cl_MacNewEventcount <= MAC_EVENT_COUNT_MAX )
   89194:	4b67      	ldr	r3, [pc, #412]	; (89334 <cl_event_handler+0x364>)
   89196:	781b      	ldrb	r3, [r3, #0]
   89198:	2b0a      	cmp	r3, #10
   8919a:	d80f      	bhi.n	891bc <cl_event_handler+0x1ec>
		{
			Cl_MacEventQueue2.Cl_MacEvent[Cl_MacEventQueue2.Cl_MacNewEventcount] = EVT_CONSOLE_COMMAND_SET_BLDPUMPINC_MANUAL ;
   8919c:	4b65      	ldr	r3, [pc, #404]	; (89334 <cl_event_handler+0x364>)
   8919e:	781b      	ldrb	r3, [r3, #0]
   891a0:	461a      	mov	r2, r3
   891a2:	4b64      	ldr	r3, [pc, #400]	; (89334 <cl_event_handler+0x364>)
   891a4:	4413      	add	r3, r2
   891a6:	225b      	movs	r2, #91	; 0x5b
   891a8:	709a      	strb	r2, [r3, #2]
			Cl_MacEventQueue2.Cl_MacNewEvent = true;
   891aa:	4b62      	ldr	r3, [pc, #392]	; (89334 <cl_event_handler+0x364>)
   891ac:	2201      	movs	r2, #1
   891ae:	705a      	strb	r2, [r3, #1]
			Cl_MacEventQueue2.Cl_MacNewEventcount++;
   891b0:	4b60      	ldr	r3, [pc, #384]	; (89334 <cl_event_handler+0x364>)
   891b2:	781b      	ldrb	r3, [r3, #0]
   891b4:	3301      	adds	r3, #1
   891b6:	b2da      	uxtb	r2, r3
   891b8:	4b5e      	ldr	r3, [pc, #376]	; (89334 <cl_event_handler+0x364>)
   891ba:	701a      	strb	r2, [r3, #0]
		//Treatdata[ID_bloodrate] + 10 ;
		
	}
	
	
	Cl_SysStat_GetSensor_Status_Query(SENSOR_BP_ON_OFF_M , &bptemp);
   891bc:	201f      	movs	r0, #31
   891be:	495f      	ldr	r1, [pc, #380]	; (8933c <cl_event_handler+0x36c>)
   891c0:	4b5b      	ldr	r3, [pc, #364]	; (89330 <cl_event_handler+0x360>)
   891c2:	4798      	blx	r3
	
	if(bptemp == 1){
   891c4:	4b5d      	ldr	r3, [pc, #372]	; (8933c <cl_event_handler+0x36c>)
   891c6:	881b      	ldrh	r3, [r3, #0]
   891c8:	2b01      	cmp	r3, #1
   891ca:	d135      	bne.n	89238 <cl_event_handler+0x268>
		
		if(prev_bpstate == 0 ){
   891cc:	4b5c      	ldr	r3, [pc, #368]	; (89340 <cl_event_handler+0x370>)
   891ce:	881b      	ldrh	r3, [r3, #0]
   891d0:	2b00      	cmp	r3, #0
   891d2:	d117      	bne.n	89204 <cl_event_handler+0x234>
			
			bptemp = 0;
   891d4:	4b59      	ldr	r3, [pc, #356]	; (8933c <cl_event_handler+0x36c>)
   891d6:	2200      	movs	r2, #0
   891d8:	801a      	strh	r2, [r3, #0]
			prev_bpstate == 1;
			if( Cl_MacEventQueue2.Cl_MacNewEventcount <= MAC_EVENT_COUNT_MAX )
   891da:	4b56      	ldr	r3, [pc, #344]	; (89334 <cl_event_handler+0x364>)
   891dc:	781b      	ldrb	r3, [r3, #0]
   891de:	2b0a      	cmp	r3, #10
   891e0:	d82a      	bhi.n	89238 <cl_event_handler+0x268>
			{
				Cl_MacEventQueue2.Cl_MacEvent[Cl_MacEventQueue2.Cl_MacNewEventcount] = EVT_CONSOLE_COMMAND_SET_BLDPMP_ON ;
   891e2:	4b54      	ldr	r3, [pc, #336]	; (89334 <cl_event_handler+0x364>)
   891e4:	781b      	ldrb	r3, [r3, #0]
   891e6:	461a      	mov	r2, r3
   891e8:	4b52      	ldr	r3, [pc, #328]	; (89334 <cl_event_handler+0x364>)
   891ea:	4413      	add	r3, r2
   891ec:	220a      	movs	r2, #10
   891ee:	709a      	strb	r2, [r3, #2]
				Cl_MacEventQueue2.Cl_MacNewEvent = true;
   891f0:	4b50      	ldr	r3, [pc, #320]	; (89334 <cl_event_handler+0x364>)
   891f2:	2201      	movs	r2, #1
   891f4:	705a      	strb	r2, [r3, #1]
				Cl_MacEventQueue2.Cl_MacNewEventcount++;
   891f6:	4b4f      	ldr	r3, [pc, #316]	; (89334 <cl_event_handler+0x364>)
   891f8:	781b      	ldrb	r3, [r3, #0]
   891fa:	3301      	adds	r3, #1
   891fc:	b2da      	uxtb	r2, r3
   891fe:	4b4d      	ldr	r3, [pc, #308]	; (89334 <cl_event_handler+0x364>)
   89200:	701a      	strb	r2, [r3, #0]
   89202:	e019      	b.n	89238 <cl_event_handler+0x268>
			
			
		}
		else {
			
			bptemp =0;
   89204:	4b4d      	ldr	r3, [pc, #308]	; (8933c <cl_event_handler+0x36c>)
   89206:	2200      	movs	r2, #0
   89208:	801a      	strh	r2, [r3, #0]
			prev_bpstate = 0;
   8920a:	4b4d      	ldr	r3, [pc, #308]	; (89340 <cl_event_handler+0x370>)
   8920c:	2200      	movs	r2, #0
   8920e:	801a      	strh	r2, [r3, #0]
			if( Cl_MacEventQueue2.Cl_MacNewEventcount <= MAC_EVENT_COUNT_MAX )
   89210:	4b48      	ldr	r3, [pc, #288]	; (89334 <cl_event_handler+0x364>)
   89212:	781b      	ldrb	r3, [r3, #0]
   89214:	2b0a      	cmp	r3, #10
   89216:	d80f      	bhi.n	89238 <cl_event_handler+0x268>
			{
				Cl_MacEventQueue2.Cl_MacEvent[Cl_MacEventQueue2.Cl_MacNewEventcount] = EVT_CONSOLE_COMMAND_SET_BLDPMP_OFF ;
   89218:	4b46      	ldr	r3, [pc, #280]	; (89334 <cl_event_handler+0x364>)
   8921a:	781b      	ldrb	r3, [r3, #0]
   8921c:	461a      	mov	r2, r3
   8921e:	4b45      	ldr	r3, [pc, #276]	; (89334 <cl_event_handler+0x364>)
   89220:	4413      	add	r3, r2
   89222:	220b      	movs	r2, #11
   89224:	709a      	strb	r2, [r3, #2]
				Cl_MacEventQueue2.Cl_MacNewEvent = true;
   89226:	4b43      	ldr	r3, [pc, #268]	; (89334 <cl_event_handler+0x364>)
   89228:	2201      	movs	r2, #1
   8922a:	705a      	strb	r2, [r3, #1]
				Cl_MacEventQueue2.Cl_MacNewEventcount++;
   8922c:	4b41      	ldr	r3, [pc, #260]	; (89334 <cl_event_handler+0x364>)
   8922e:	781b      	ldrb	r3, [r3, #0]
   89230:	3301      	adds	r3, #1
   89232:	b2da      	uxtb	r2, r3
   89234:	4b3f      	ldr	r3, [pc, #252]	; (89334 <cl_event_handler+0x364>)
   89236:	701a      	strb	r2, [r3, #0]
	
	
	
	
	
		Cl_Temperature_Controller_Handler(TS_EVENT_100MS);    // commented on 17082017, we dont need this controller handler any more
   89238:	2001      	movs	r0, #1
   8923a:	4b42      	ldr	r3, [pc, #264]	; (89344 <cl_event_handler+0x374>)
   8923c:	4798      	blx	r3
		Cl_Pressure_Controller_Handler(PS_EVENT_100MS);
   8923e:	2001      	movs	r0, #1
   89240:	4b41      	ldr	r3, [pc, #260]	; (89348 <cl_event_handler+0x378>)
   89242:	4798      	blx	r3
		cl_bp_pumpFeedback_timer();
   89244:	4b41      	ldr	r3, [pc, #260]	; (8934c <cl_event_handler+0x37c>)
   89246:	4798      	blx	r3
		cl_hep_pump_enddetction_timer();
   89248:	4b41      	ldr	r3, [pc, #260]	; (89350 <cl_event_handler+0x380>)
   8924a:	4798      	blx	r3
		}
		
		#endif
		
		
		break;
   8924c:	e061      	b.n	89312 <cl_event_handler+0x342>
		case EVT_TICK_500M:
		//UpdateHeaterControls();
		Cl_Heater_Event_Handler(CL_HEATER_EVENT_500MS,0);
   8924e:	2001      	movs	r0, #1
   89250:	f04f 0100 	mov.w	r1, #0
   89254:	4b3f      	ldr	r3, [pc, #252]	; (89354 <cl_event_handler+0x384>)
   89256:	4798      	blx	r3
		Cl_bc_controller(BC_EVENT_500MS);
   89258:	2001      	movs	r0, #1
   8925a:	4b33      	ldr	r3, [pc, #204]	; (89328 <cl_event_handler+0x358>)
   8925c:	4798      	blx	r3
		if(  toggle_500)
   8925e:	4b3e      	ldr	r3, [pc, #248]	; (89358 <cl_event_handler+0x388>)
   89260:	781b      	ldrb	r3, [r3, #0]
   89262:	2b00      	cmp	r3, #0
   89264:	d003      	beq.n	8926e <cl_event_handler+0x29e>
		{
			toggle_500 = false;
   89266:	4b3c      	ldr	r3, [pc, #240]	; (89358 <cl_event_handler+0x388>)
   89268:	2200      	movs	r2, #0
   8926a:	701a      	strb	r2, [r3, #0]
		
		


							
		break;
   8926c:	e051      	b.n	89312 <cl_event_handler+0x342>
		//	sv_cntrl_activatevenousclamp();
		}

		else
		{
			toggle_500 = true;
   8926e:	4b3a      	ldr	r3, [pc, #232]	; (89358 <cl_event_handler+0x388>)
   89270:	2201      	movs	r2, #1
   89272:	701a      	strb	r2, [r3, #0]
		
		


							
		break;
   89274:	e04d      	b.n	89312 <cl_event_handler+0x342>
		case EVT_TICK_SEC:
		{

		cl_level_switchcontroller(LEVEL_SWITCH_CNTRLER_EVENT_SEC);
   89276:	2001      	movs	r0, #1
   89278:	4b28      	ldr	r3, [pc, #160]	; (8931c <cl_event_handler+0x34c>)
   8927a:	4798      	blx	r3
		cl_flow_switchcontroller(FLOW_SWITCH_CNTRLER_EVENT_SEC);
   8927c:	2003      	movs	r0, #3
   8927e:	4b28      	ldr	r3, [pc, #160]	; (89320 <cl_event_handler+0x350>)
   89280:	4798      	blx	r3
		cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_TICK_SEC,0);
   89282:	200b      	movs	r0, #11
   89284:	2100      	movs	r1, #0
   89286:	4b35      	ldr	r3, [pc, #212]	; (8935c <cl_event_handler+0x38c>)
   89288:	4798      	blx	r3
		cl_hep_controller(CL_HEP_EVENT_SEC_TICK,0);
   8928a:	200d      	movs	r0, #13
   8928c:	2100      	movs	r1, #0
   8928e:	4b34      	ldr	r3, [pc, #208]	; (89360 <cl_event_handler+0x390>)
   89290:	4798      	blx	r3
		Cl_bc_controller(BC_EVENT_SECOND);
   89292:	2002      	movs	r0, #2
   89294:	4b24      	ldr	r3, [pc, #144]	; (89328 <cl_event_handler+0x358>)
   89296:	4798      	blx	r3
		Cl_Heater_Event_Handler(CL_HEATER_EVENT_1SEC,0);
   89298:	2002      	movs	r0, #2
   8929a:	f04f 0100 	mov.w	r1, #0
   8929e:	4b2d      	ldr	r3, [pc, #180]	; (89354 <cl_event_handler+0x384>)
   892a0:	4798      	blx	r3
		Cl_Conductivity_Sensor_Controller(COND_EVENT_1SEC);
   892a2:	2002      	movs	r0, #2
   892a4:	4b2f      	ldr	r3, [pc, #188]	; (89364 <cl_event_handler+0x394>)
   892a6:	4798      	blx	r3
		Cl_SysStat_mean_status_update();
   892a8:	4b2f      	ldr	r3, [pc, #188]	; (89368 <cl_event_handler+0x398>)
   892aa:	4798      	blx	r3
//	#if 0
		//DD_RETRY_IIC();
		static bool toggle = false;
				static Cl_Uint8Type temp_count=0;
				temp_count++;
   892ac:	4b2f      	ldr	r3, [pc, #188]	; (8936c <cl_event_handler+0x39c>)
   892ae:	781b      	ldrb	r3, [r3, #0]
   892b0:	3301      	adds	r3, #1
   892b2:	b2da      	uxtb	r2, r3
   892b4:	4b2d      	ldr	r3, [pc, #180]	; (8936c <cl_event_handler+0x39c>)
   892b6:	701a      	strb	r2, [r3, #0]

				
		if(!toggle)
   892b8:	4b2d      	ldr	r3, [pc, #180]	; (89370 <cl_event_handler+0x3a0>)
   892ba:	781b      	ldrb	r3, [r3, #0]
   892bc:	f083 0301 	eor.w	r3, r3, #1
   892c0:	b2db      	uxtb	r3, r3
   892c2:	2b00      	cmp	r3, #0
   892c4:	d005      	beq.n	892d2 <cl_event_handler+0x302>
		{
		SV_CAN_READ_HEMO(); // disabled for testing
   892c6:	4b2b      	ldr	r3, [pc, #172]	; (89374 <cl_event_handler+0x3a4>)
   892c8:	4798      	blx	r3
		
			toggle = true;
   892ca:	4b29      	ldr	r3, [pc, #164]	; (89370 <cl_event_handler+0x3a0>)
   892cc:	2201      	movs	r2, #1
   892ce:	701a      	strb	r2, [r3, #0]
   892d0:	e00b      	b.n	892ea <cl_event_handler+0x31a>
				}

		}
		else
		{
		SV_CAN_REQUEST_SENSORDATA();
   892d2:	4b29      	ldr	r3, [pc, #164]	; (89378 <cl_event_handler+0x3a8>)
   892d4:	4798      	blx	r3
			toggle = false;
   892d6:	4b26      	ldr	r3, [pc, #152]	; (89370 <cl_event_handler+0x3a0>)
   892d8:	2200      	movs	r2, #0
   892da:	701a      	strb	r2, [r3, #0]
				if (temp_count == 10)
   892dc:	4b23      	ldr	r3, [pc, #140]	; (8936c <cl_event_handler+0x39c>)
   892de:	781b      	ldrb	r3, [r3, #0]
   892e0:	2b0a      	cmp	r3, #10
   892e2:	d102      	bne.n	892ea <cl_event_handler+0x31a>
				{
			//		sv_cntrl_deactivatepump(BLOODPUMP);
					temp_count = 0;
   892e4:	4b21      	ldr	r3, [pc, #132]	; (8936c <cl_event_handler+0x39c>)
   892e6:	2200      	movs	r2, #0
   892e8:	701a      	strb	r2, [r3, #0]
				}
		}
		
//		#endif

		test_counter++;
   892ea:	4b24      	ldr	r3, [pc, #144]	; (8937c <cl_event_handler+0x3ac>)
   892ec:	681b      	ldr	r3, [r3, #0]
   892ee:	3301      	adds	r3, #1
   892f0:	4a22      	ldr	r2, [pc, #136]	; (8937c <cl_event_handler+0x3ac>)
   892f2:	6013      	str	r3, [r2, #0]
		}
		
		break;
   892f4:	e00d      	b.n	89312 <cl_event_handler+0x342>
		case EVT_TICK_MIN:
		{
			//Cl_SysStat_mean_status_update();
		Cl_Temperature_Controller_Handler(TS_EVENT_MIN);
   892f6:	2002      	movs	r0, #2
   892f8:	4b12      	ldr	r3, [pc, #72]	; (89344 <cl_event_handler+0x374>)
   892fa:	4798      	blx	r3
// 		cl_tdata.bytearray[2] = 28;
// 		Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
// 		
	
		}
		break;
   892fc:	e009      	b.n	89312 <cl_event_handler+0x342>
		case EVT_ALERT_CS:
		Cl_bc_controller(BC_EVENT_CS);
   892fe:	2003      	movs	r0, #3
   89300:	4b09      	ldr	r3, [pc, #36]	; (89328 <cl_event_handler+0x358>)
   89302:	4798      	blx	r3
		break;
   89304:	e005      	b.n	89312 <cl_event_handler+0x342>
		
		case EVT_CONSOLE_COMMAND_GET_DATA:
		case EVT_CONSOLE_COMMAND_SET_DATA:
		cl_datamamanager(cl_event);
   89306:	79fb      	ldrb	r3, [r7, #7]
   89308:	4618      	mov	r0, r3
   8930a:	4b1d      	ldr	r3, [pc, #116]	; (89380 <cl_event_handler+0x3b0>)
   8930c:	4798      	blx	r3
		break;
   8930e:	e000      	b.n	89312 <cl_event_handler+0x342>
		default:
		break;
   89310:	bf00      	nop
	}
	
	return 0;
   89312:	2300      	movs	r3, #0
}
   89314:	4618      	mov	r0, r3
   89316:	3710      	adds	r7, #16
   89318:	46bd      	mov	sp, r7
   8931a:	bd80      	pop	{r7, pc}
   8931c:	00094335 	.word	0x00094335
   89320:	00093815 	.word	0x00093815
   89324:	000940b1 	.word	0x000940b1
   89328:	0008330d 	.word	0x0008330d
   8932c:	2007199a 	.word	0x2007199a
   89330:	0008e7f9 	.word	0x0008e7f9
   89334:	20072198 	.word	0x20072198
   89338:	2007199c 	.word	0x2007199c
   8933c:	2007199e 	.word	0x2007199e
   89340:	200719a0 	.word	0x200719a0
   89344:	0008ff21 	.word	0x0008ff21
   89348:	0008fb09 	.word	0x0008fb09
   8934c:	00093571 	.word	0x00093571
   89350:	00094295 	.word	0x00094295
   89354:	00089451 	.word	0x00089451
   89358:	200719a8 	.word	0x200719a8
   8935c:	0008850d 	.word	0x0008850d
   89360:	00093a0d 	.word	0x00093a0d
   89364:	0008f8f9 	.word	0x0008f8f9
   89368:	0008ebf1 	.word	0x0008ebf1
   8936c:	200719a9 	.word	0x200719a9
   89370:	200719aa 	.word	0x200719aa
   89374:	00099b4d 	.word	0x00099b4d
   89378:	00099b81 	.word	0x00099b81
   8937c:	200719a4 	.word	0x200719a4
   89380:	00084ae1 	.word	0x00084ae1
   89384:	00000000 	.word	0x00000000

00089388 <Cl_Heater_GetHeaterStableStatus>:
#define TEMP2_FINE_MIN_300
#define TEMP2_FINE_MAX_300


Cl_ReturnCodeType Cl_Heater_GetHeaterStableStatus(Cl_BoolType* Stable)
{
   89388:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
   8938c:	b083      	sub	sp, #12
   8938e:	af00      	add	r7, sp, #0
   89390:	6078      	str	r0, [r7, #4]
	if((avgtmp3_cel > prescribed_temp - 0.2) &&(avgtmp3_cel < prescribed_temp + 0.2))
   89392:	4b27      	ldr	r3, [pc, #156]	; (89430 <Cl_Heater_GetHeaterStableStatus+0xa8>)
   89394:	681a      	ldr	r2, [r3, #0]
   89396:	4b27      	ldr	r3, [pc, #156]	; (89434 <Cl_Heater_GetHeaterStableStatus+0xac>)
   89398:	4610      	mov	r0, r2
   8939a:	4798      	blx	r3
   8939c:	4680      	mov	r8, r0
   8939e:	4689      	mov	r9, r1
   893a0:	4b25      	ldr	r3, [pc, #148]	; (89438 <Cl_Heater_GetHeaterStableStatus+0xb0>)
   893a2:	681a      	ldr	r2, [r3, #0]
   893a4:	4b23      	ldr	r3, [pc, #140]	; (89434 <Cl_Heater_GetHeaterStableStatus+0xac>)
   893a6:	4610      	mov	r0, r2
   893a8:	4798      	blx	r3
   893aa:	4602      	mov	r2, r0
   893ac:	460b      	mov	r3, r1
   893ae:	4c23      	ldr	r4, [pc, #140]	; (8943c <Cl_Heater_GetHeaterStableStatus+0xb4>)
   893b0:	4610      	mov	r0, r2
   893b2:	4619      	mov	r1, r3
   893b4:	a31c      	add	r3, pc, #112	; (adr r3, 89428 <Cl_Heater_GetHeaterStableStatus+0xa0>)
   893b6:	e9d3 2300 	ldrd	r2, r3, [r3]
   893ba:	47a0      	blx	r4
   893bc:	4602      	mov	r2, r0
   893be:	460b      	mov	r3, r1
   893c0:	4c1f      	ldr	r4, [pc, #124]	; (89440 <Cl_Heater_GetHeaterStableStatus+0xb8>)
   893c2:	4640      	mov	r0, r8
   893c4:	4649      	mov	r1, r9
   893c6:	47a0      	blx	r4
   893c8:	4603      	mov	r3, r0
   893ca:	2b00      	cmp	r3, #0
   893cc:	d022      	beq.n	89414 <Cl_Heater_GetHeaterStableStatus+0x8c>
   893ce:	4b18      	ldr	r3, [pc, #96]	; (89430 <Cl_Heater_GetHeaterStableStatus+0xa8>)
   893d0:	681a      	ldr	r2, [r3, #0]
   893d2:	4b18      	ldr	r3, [pc, #96]	; (89434 <Cl_Heater_GetHeaterStableStatus+0xac>)
   893d4:	4610      	mov	r0, r2
   893d6:	4798      	blx	r3
   893d8:	4680      	mov	r8, r0
   893da:	4689      	mov	r9, r1
   893dc:	4b16      	ldr	r3, [pc, #88]	; (89438 <Cl_Heater_GetHeaterStableStatus+0xb0>)
   893de:	681a      	ldr	r2, [r3, #0]
   893e0:	4b14      	ldr	r3, [pc, #80]	; (89434 <Cl_Heater_GetHeaterStableStatus+0xac>)
   893e2:	4610      	mov	r0, r2
   893e4:	4798      	blx	r3
   893e6:	4602      	mov	r2, r0
   893e8:	460b      	mov	r3, r1
   893ea:	4c16      	ldr	r4, [pc, #88]	; (89444 <Cl_Heater_GetHeaterStableStatus+0xbc>)
   893ec:	4610      	mov	r0, r2
   893ee:	4619      	mov	r1, r3
   893f0:	a30d      	add	r3, pc, #52	; (adr r3, 89428 <Cl_Heater_GetHeaterStableStatus+0xa0>)
   893f2:	e9d3 2300 	ldrd	r2, r3, [r3]
   893f6:	47a0      	blx	r4
   893f8:	4602      	mov	r2, r0
   893fa:	460b      	mov	r3, r1
   893fc:	4c12      	ldr	r4, [pc, #72]	; (89448 <Cl_Heater_GetHeaterStableStatus+0xc0>)
   893fe:	4640      	mov	r0, r8
   89400:	4649      	mov	r1, r9
   89402:	47a0      	blx	r4
   89404:	4603      	mov	r3, r0
   89406:	2b00      	cmp	r3, #0
   89408:	d004      	beq.n	89414 <Cl_Heater_GetHeaterStableStatus+0x8c>
	{
		*Stable =  cl_temp3_stable;
   8940a:	4b10      	ldr	r3, [pc, #64]	; (8944c <Cl_Heater_GetHeaterStableStatus+0xc4>)
   8940c:	781a      	ldrb	r2, [r3, #0]
   8940e:	687b      	ldr	r3, [r7, #4]
   89410:	701a      	strb	r2, [r3, #0]
   89412:	e002      	b.n	8941a <Cl_Heater_GetHeaterStableStatus+0x92>
	}
	else
	{
		*Stable =  false;
   89414:	687b      	ldr	r3, [r7, #4]
   89416:	2200      	movs	r2, #0
   89418:	701a      	strb	r2, [r3, #0]
	}
return CL_OK;
   8941a:	2300      	movs	r3, #0
}
   8941c:	4618      	mov	r0, r3
   8941e:	370c      	adds	r7, #12
   89420:	46bd      	mov	sp, r7
   89422:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}
   89426:	bf00      	nop
   89428:	9999999a 	.word	0x9999999a
   8942c:	3fc99999 	.word	0x3fc99999
   89430:	200719b8 	.word	0x200719b8
   89434:	000a6031 	.word	0x000a6031
   89438:	20070544 	.word	0x20070544
   8943c:	000a5d71 	.word	0x000a5d71
   89440:	000a65f9 	.word	0x000a65f9
   89444:	000a5d75 	.word	0x000a5d75
   89448:	000a65bd 	.word	0x000a65bd
   8944c:	20071c69 	.word	0x20071c69

00089450 <Cl_Heater_Event_Handler>:

Cl_ReturnCodeType Cl_Heater_Event_Handler(HeaterEventsType HeaterEvent, float data)
{
   89450:	b580      	push	{r7, lr}
   89452:	b084      	sub	sp, #16
   89454:	af00      	add	r7, sp, #0
   89456:	4603      	mov	r3, r0
   89458:	6039      	str	r1, [r7, #0]
   8945a:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType Cl_heeater_retcode = CL_OK;
   8945c:	2300      	movs	r3, #0
   8945e:	73fb      	strb	r3, [r7, #15]
	float cl_temp_delta = 0;
   89460:	f04f 0300 	mov.w	r3, #0
   89464:	60bb      	str	r3, [r7, #8]

switch(HeaterEvent)
   89466:	79fb      	ldrb	r3, [r7, #7]
   89468:	2b03      	cmp	r3, #3
   8946a:	d020      	beq.n	894ae <Cl_Heater_Event_Handler+0x5e>
   8946c:	2b05      	cmp	r3, #5
   8946e:	d011      	beq.n	89494 <Cl_Heater_Event_Handler+0x44>
   89470:	2b01      	cmp	r3, #1
   89472:	d000      	beq.n	89476 <Cl_Heater_Event_Handler+0x26>
	
	case CL_HEATER_EVENT_ON:
		cl_temp3_stable = false;
	break;
	
	default:break;
   89474:	e01f      	b.n	894b6 <Cl_Heater_Event_Handler+0x66>

switch(HeaterEvent)
{
	
	case CL_HEATER_EVENT_500MS:
		if (hotrinse_flag != 1)
   89476:	4b12      	ldr	r3, [pc, #72]	; (894c0 <Cl_Heater_Event_Handler+0x70>)
   89478:	781b      	ldrb	r3, [r3, #0]
   8947a:	2b01      	cmp	r3, #1
   8947c:	d002      	beq.n	89484 <Cl_Heater_Event_Handler+0x34>
		{
			Heat_Correction();
   8947e:	4b11      	ldr	r3, [pc, #68]	; (894c4 <Cl_Heater_Event_Handler+0x74>)
   89480:	4798      	blx	r3
   89482:	e006      	b.n	89492 <Cl_Heater_Event_Handler+0x42>
		}
		
		else if (hotrinse_flag ==1)
   89484:	4b0e      	ldr	r3, [pc, #56]	; (894c0 <Cl_Heater_Event_Handler+0x70>)
   89486:	781b      	ldrb	r3, [r3, #0]
   89488:	2b01      	cmp	r3, #1
   8948a:	d102      	bne.n	89492 <Cl_Heater_Event_Handler+0x42>
		{
			Hot_Rinse();
   8948c:	4b0e      	ldr	r3, [pc, #56]	; (894c8 <Cl_Heater_Event_Handler+0x78>)
   8948e:	4798      	blx	r3
		}
	break;
   89490:	e011      	b.n	894b6 <Cl_Heater_Event_Handler+0x66>
   89492:	e010      	b.n	894b6 <Cl_Heater_Event_Handler+0x66>
	
	case CL_HEATER_EVENT_TARGET_TEMP:
		prescribed_temp = data;
   89494:	4a0d      	ldr	r2, [pc, #52]	; (894cc <Cl_Heater_Event_Handler+0x7c>)
   89496:	683b      	ldr	r3, [r7, #0]
   89498:	6013      	str	r3, [r2, #0]
		if (hotrinse_flag == 1)
   8949a:	4b09      	ldr	r3, [pc, #36]	; (894c0 <Cl_Heater_Event_Handler+0x70>)
   8949c:	781b      	ldrb	r3, [r3, #0]
   8949e:	2b01      	cmp	r3, #1
   894a0:	d104      	bne.n	894ac <Cl_Heater_Event_Handler+0x5c>
		{
			avg_duty = 4000;
   894a2:	4b0b      	ldr	r3, [pc, #44]	; (894d0 <Cl_Heater_Event_Handler+0x80>)
   894a4:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
   894a8:	801a      	strh	r2, [r3, #0]
		}
 	break;
   894aa:	e004      	b.n	894b6 <Cl_Heater_Event_Handler+0x66>
   894ac:	e003      	b.n	894b6 <Cl_Heater_Event_Handler+0x66>
	
	case CL_HEATER_EVENT_ON:
		cl_temp3_stable = false;
   894ae:	4b09      	ldr	r3, [pc, #36]	; (894d4 <Cl_Heater_Event_Handler+0x84>)
   894b0:	2200      	movs	r2, #0
   894b2:	701a      	strb	r2, [r3, #0]
	break;
   894b4:	bf00      	nop
	
	default:break;
}
	
	return (Cl_heeater_retcode);
   894b6:	7bfb      	ldrb	r3, [r7, #15]
}
   894b8:	4618      	mov	r0, r3
   894ba:	3710      	adds	r7, #16
   894bc:	46bd      	mov	sp, r7
   894be:	bd80      	pop	{r7, pc}
   894c0:	20071cc1 	.word	0x20071cc1
   894c4:	00089881 	.word	0x00089881
   894c8:	0008b6e1 	.word	0x0008b6e1
   894cc:	20070544 	.word	0x20070544
   894d0:	200719ae 	.word	0x200719ae
   894d4:	20071c69 	.word	0x20071c69

000894d8 <SetHeaterState>:

Cl_ReturnCodeType SetHeaterState(HeaterStateType Param_HeaterState)
{
   894d8:	b590      	push	{r4, r7, lr}
   894da:	b085      	sub	sp, #20
   894dc:	af00      	add	r7, sp, #0
   894de:	4603      	mov	r3, r0
   894e0:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType Cl_rinseretcode = CL_OK;
   894e2:	2300      	movs	r3, #0
   894e4:	73fb      	strb	r3, [r7, #15]
	int16_t sensordata;
	
	HeaterPrevState = HeaterState;
   894e6:	4b4f      	ldr	r3, [pc, #316]	; (89624 <SetHeaterState+0x14c>)
   894e8:	781a      	ldrb	r2, [r3, #0]
   894ea:	4b4f      	ldr	r3, [pc, #316]	; (89628 <SetHeaterState+0x150>)
   894ec:	701a      	strb	r2, [r3, #0]
	HeaterState = Param_HeaterState;
   894ee:	4a4d      	ldr	r2, [pc, #308]	; (89624 <SetHeaterState+0x14c>)
   894f0:	79fb      	ldrb	r3, [r7, #7]
   894f2:	7013      	strb	r3, [r2, #0]
	if(Param_HeaterState == CL_HEATER_STATE_OFF)
   894f4:	79fb      	ldrb	r3, [r7, #7]
   894f6:	2b04      	cmp	r3, #4
   894f8:	d104      	bne.n	89504 <SetHeaterState+0x2c>
	{
		sv_cntrl_poweroffheater();
   894fa:	4b4c      	ldr	r3, [pc, #304]	; (8962c <SetHeaterState+0x154>)
   894fc:	4798      	blx	r3
		heater_substate = CL_HEATER_SUBSTATE_OFF;
   894fe:	4b4c      	ldr	r3, [pc, #304]	; (89630 <SetHeaterState+0x158>)
   89500:	2200      	movs	r2, #0
   89502:	701a      	strb	r2, [r3, #0]
	}
	if(Param_HeaterState == CL_HEATER_STATE_ON)
   89504:	79fb      	ldrb	r3, [r7, #7]
   89506:	2b01      	cmp	r3, #1
   89508:	d105      	bne.n	89516 <SetHeaterState+0x3e>
	{
    	cl_temp3_stable = false;
   8950a:	4b4a      	ldr	r3, [pc, #296]	; (89634 <SetHeaterState+0x15c>)
   8950c:	2200      	movs	r2, #0
   8950e:	701a      	strb	r2, [r3, #0]
		heater_substate = CL_HEATER_SUBSTATE_OFF;
   89510:	4b47      	ldr	r3, [pc, #284]	; (89630 <SetHeaterState+0x158>)
   89512:	2200      	movs	r2, #0
   89514:	701a      	strb	r2, [r3, #0]
	}	

	Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP1STATUS,&sensordata);
   89516:	f107 030c 	add.w	r3, r7, #12
   8951a:	2012      	movs	r0, #18
   8951c:	4619      	mov	r1, r3
   8951e:	4b46      	ldr	r3, [pc, #280]	; (89638 <SetHeaterState+0x160>)
   89520:	4798      	blx	r3

	if((Param_HeaterState != CL_HEATER_STATE_DIALYSER_PRIME_ON ) && (Param_HeaterState != CL_HEATER_STATE_DIALYSIS_ON))
   89522:	79fb      	ldrb	r3, [r7, #7]
   89524:	2b02      	cmp	r3, #2
   89526:	f000 80e0 	beq.w	896ea <SetHeaterState+0x212>
   8952a:	79fb      	ldrb	r3, [r7, #7]
   8952c:	2b03      	cmp	r3, #3
   8952e:	f000 80dc 	beq.w	896ea <SetHeaterState+0x212>
	{
					
		Tmp1Val = (Tmp1Val*9+ (float)sensordata/10)/10;
   89532:	4b42      	ldr	r3, [pc, #264]	; (8963c <SetHeaterState+0x164>)
   89534:	681a      	ldr	r2, [r3, #0]
   89536:	4b42      	ldr	r3, [pc, #264]	; (89640 <SetHeaterState+0x168>)
   89538:	4610      	mov	r0, r2
   8953a:	4942      	ldr	r1, [pc, #264]	; (89644 <SetHeaterState+0x16c>)
   8953c:	4798      	blx	r3
   8953e:	4603      	mov	r3, r0
   89540:	461c      	mov	r4, r3
   89542:	89bb      	ldrh	r3, [r7, #12]
   89544:	b21a      	sxth	r2, r3
   89546:	4b40      	ldr	r3, [pc, #256]	; (89648 <SetHeaterState+0x170>)
   89548:	4610      	mov	r0, r2
   8954a:	4798      	blx	r3
   8954c:	4602      	mov	r2, r0
   8954e:	4b3f      	ldr	r3, [pc, #252]	; (8964c <SetHeaterState+0x174>)
   89550:	4610      	mov	r0, r2
   89552:	493f      	ldr	r1, [pc, #252]	; (89650 <SetHeaterState+0x178>)
   89554:	4798      	blx	r3
   89556:	4603      	mov	r3, r0
   89558:	461a      	mov	r2, r3
   8955a:	4b3e      	ldr	r3, [pc, #248]	; (89654 <SetHeaterState+0x17c>)
   8955c:	4620      	mov	r0, r4
   8955e:	4611      	mov	r1, r2
   89560:	4798      	blx	r3
   89562:	4603      	mov	r3, r0
   89564:	461a      	mov	r2, r3
   89566:	4b39      	ldr	r3, [pc, #228]	; (8964c <SetHeaterState+0x174>)
   89568:	4610      	mov	r0, r2
   8956a:	4939      	ldr	r1, [pc, #228]	; (89650 <SetHeaterState+0x178>)
   8956c:	4798      	blx	r3
   8956e:	4603      	mov	r3, r0
   89570:	461a      	mov	r2, r3
   89572:	4b32      	ldr	r3, [pc, #200]	; (8963c <SetHeaterState+0x164>)
   89574:	601a      	str	r2, [r3, #0]
	 
        SYSTEM_FLOW = Treatdata[ID_dflow];					// Gopal:  will get the system flow rate from the user
   89576:	4b38      	ldr	r3, [pc, #224]	; (89658 <SetHeaterState+0x180>)
   89578:	695b      	ldr	r3, [r3, #20]
   8957a:	4a38      	ldr	r2, [pc, #224]	; (8965c <SetHeaterState+0x184>)
   8957c:	6013      	str	r3, [r2, #0]
        Prescribed_T3 = Treatdata[ID_settemp]/10;				// Gopal:  will get the user set temperature to prescribed T3
   8957e:	4b36      	ldr	r3, [pc, #216]	; (89658 <SetHeaterState+0x180>)
   89580:	699b      	ldr	r3, [r3, #24]
   89582:	4a37      	ldr	r2, [pc, #220]	; (89660 <SetHeaterState+0x188>)
   89584:	fba2 2303 	umull	r2, r3, r2, r3
   89588:	08da      	lsrs	r2, r3, #3
   8958a:	4b36      	ldr	r3, [pc, #216]	; (89664 <SetHeaterState+0x18c>)
   8958c:	4610      	mov	r0, r2
   8958e:	4798      	blx	r3
   89590:	4602      	mov	r2, r0
   89592:	4b35      	ldr	r3, [pc, #212]	; (89668 <SetHeaterState+0x190>)
   89594:	601a      	str	r2, [r3, #0]
 
	    if (hotrinse_flag == 1)
   89596:	4b35      	ldr	r3, [pc, #212]	; (8966c <SetHeaterState+0x194>)
   89598:	781b      	ldrb	r3, [r3, #0]
   8959a:	2b01      	cmp	r3, #1
   8959c:	d103      	bne.n	895a6 <SetHeaterState+0xce>
		{
		  avg_duty = 4000;
   8959e:	4b34      	ldr	r3, [pc, #208]	; (89670 <SetHeaterState+0x198>)
   895a0:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
   895a4:	801a      	strh	r2, [r3, #0]
		}
		  
		if (SYSTEM_FLOW == 300 )                   // Gopal: if initial inlet temperature in less than 26 or flow rate is 300 then avg duty is 2400
   895a6:	4b2d      	ldr	r3, [pc, #180]	; (8965c <SetHeaterState+0x184>)
   895a8:	681b      	ldr	r3, [r3, #0]
   895aa:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   895ae:	d113      	bne.n	895d8 <SetHeaterState+0x100>
		{
		  avg_duty = 2100;
   895b0:	4b2f      	ldr	r3, [pc, #188]	; (89670 <SetHeaterState+0x198>)
   895b2:	f640 0234 	movw	r2, #2100	; 0x834
   895b6:	801a      	strh	r2, [r3, #0]
		  wait_4_TS2Stability = WAIT_4_TS2STABILITY_300;
   895b8:	4b2e      	ldr	r3, [pc, #184]	; (89674 <SetHeaterState+0x19c>)
   895ba:	22f0      	movs	r2, #240	; 0xf0
   895bc:	801a      	strh	r2, [r3, #0]
		  wait_4_stability = WAIT_4_TS3STABILITY_300;
   895be:	4b2e      	ldr	r3, [pc, #184]	; (89678 <SetHeaterState+0x1a0>)
   895c0:	2278      	movs	r2, #120	; 0x78
   895c2:	801a      	strh	r2, [r3, #0]
		  post_stability_count = TS2_STABILITY_COUNT_300;
   895c4:	4b2d      	ldr	r3, [pc, #180]	; (8967c <SetHeaterState+0x1a4>)
   895c6:	221e      	movs	r2, #30
   895c8:	801a      	strh	r2, [r3, #0]
		  TS3_post_stability_count = TS3_STABILITY_COUNT_300;
   895ca:	4b2d      	ldr	r3, [pc, #180]	; (89680 <SetHeaterState+0x1a8>)
   895cc:	223c      	movs	r2, #60	; 0x3c
   895ce:	801a      	strh	r2, [r3, #0]
		  Prescribed_T2 = PRESCRIBED_TS2_300;
   895d0:	4b2c      	ldr	r3, [pc, #176]	; (89684 <SetHeaterState+0x1ac>)
   895d2:	4a2d      	ldr	r2, [pc, #180]	; (89688 <SetHeaterState+0x1b0>)
   895d4:	601a      	str	r2, [r3, #0]
   895d6:	e084      	b.n	896e2 <SetHeaterState+0x20a>
		}
		else if (SYSTEM_FLOW == 500)
   895d8:	4b20      	ldr	r3, [pc, #128]	; (8965c <SetHeaterState+0x184>)
   895da:	681b      	ldr	r3, [r3, #0]
   895dc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   895e0:	d15a      	bne.n	89698 <SetHeaterState+0x1c0>
		{
		  avg_duty = 2300;
   895e2:	4b23      	ldr	r3, [pc, #140]	; (89670 <SetHeaterState+0x198>)
   895e4:	f640 02fc 	movw	r2, #2300	; 0x8fc
   895e8:	801a      	strh	r2, [r3, #0]
		  if (Tmp1Val <= 26)
   895ea:	4b14      	ldr	r3, [pc, #80]	; (8963c <SetHeaterState+0x164>)
   895ec:	681a      	ldr	r2, [r3, #0]
   895ee:	4b27      	ldr	r3, [pc, #156]	; (8968c <SetHeaterState+0x1b4>)
   895f0:	4610      	mov	r0, r2
   895f2:	4927      	ldr	r1, [pc, #156]	; (89690 <SetHeaterState+0x1b8>)
   895f4:	4798      	blx	r3
   895f6:	4603      	mov	r3, r0
   895f8:	2b00      	cmp	r3, #0
   895fa:	d003      	beq.n	89604 <SetHeaterState+0x12c>
		  {
		   avg_duty = 2400;
   895fc:	4b1c      	ldr	r3, [pc, #112]	; (89670 <SetHeaterState+0x198>)
   895fe:	f44f 6216 	mov.w	r2, #2400	; 0x960
   89602:	801a      	strh	r2, [r3, #0]
		  }
		  wait_4_TS2Stability = WAIT_4_TS2STABILITY_500;
   89604:	4b1b      	ldr	r3, [pc, #108]	; (89674 <SetHeaterState+0x19c>)
   89606:	22b4      	movs	r2, #180	; 0xb4
   89608:	801a      	strh	r2, [r3, #0]
		  wait_4_stability = WAIT_4_STABILITY_500;
   8960a:	4b1b      	ldr	r3, [pc, #108]	; (89678 <SetHeaterState+0x1a0>)
   8960c:	22b4      	movs	r2, #180	; 0xb4
   8960e:	801a      	strh	r2, [r3, #0]
		  post_stability_count =  TS2_STABILITY_COUNT_500;
   89610:	4b1a      	ldr	r3, [pc, #104]	; (8967c <SetHeaterState+0x1a4>)
   89612:	221e      	movs	r2, #30
   89614:	801a      	strh	r2, [r3, #0]
		  TS3_post_stability_count = TS3_STABILITY_COUNT_500;
   89616:	4b1a      	ldr	r3, [pc, #104]	; (89680 <SetHeaterState+0x1a8>)
   89618:	223c      	movs	r2, #60	; 0x3c
   8961a:	801a      	strh	r2, [r3, #0]
		  Prescribed_T2 = PRESCRIBED_TS2_500;
   8961c:	4b19      	ldr	r3, [pc, #100]	; (89684 <SetHeaterState+0x1ac>)
   8961e:	4a1d      	ldr	r2, [pc, #116]	; (89694 <SetHeaterState+0x1bc>)
   89620:	601a      	str	r2, [r3, #0]
   89622:	e05e      	b.n	896e2 <SetHeaterState+0x20a>
   89624:	200719ab 	.word	0x200719ab
   89628:	200719ac 	.word	0x200719ac
   8962c:	00099cb9 	.word	0x00099cb9
   89630:	200719b0 	.word	0x200719b0
   89634:	20071c69 	.word	0x20071c69
   89638:	0008e7f9 	.word	0x0008e7f9
   8963c:	200719bc 	.word	0x200719bc
   89640:	000a6959 	.word	0x000a6959
   89644:	41100000 	.word	0x41100000
   89648:	000a68b1 	.word	0x000a68b1
   8964c:	000a6ac1 	.word	0x000a6ac1
   89650:	41200000 	.word	0x41200000
   89654:	000a6749 	.word	0x000a6749
   89658:	2007265c 	.word	0x2007265c
   8965c:	20070558 	.word	0x20070558
   89660:	cccccccd 	.word	0xcccccccd
   89664:	000a68a9 	.word	0x000a68a9
   89668:	20070554 	.word	0x20070554
   8966c:	20071cc1 	.word	0x20071cc1
   89670:	200719ae 	.word	0x200719ae
   89674:	20070548 	.word	0x20070548
   89678:	2007054a 	.word	0x2007054a
   8967c:	200719d0 	.word	0x200719d0
   89680:	200719d2 	.word	0x200719d2
   89684:	20070550 	.word	0x20070550
   89688:	42200000 	.word	0x42200000
   8968c:	000a6ca9 	.word	0x000a6ca9
   89690:	41d00000 	.word	0x41d00000
   89694:	421c0000 	.word	0x421c0000
		}
		else if (SYSTEM_FLOW == 800)
   89698:	4b5f      	ldr	r3, [pc, #380]	; (89818 <SetHeaterState+0x340>)
   8969a:	681b      	ldr	r3, [r3, #0]
   8969c:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   896a0:	d11f      	bne.n	896e2 <SetHeaterState+0x20a>
		{
			avg_duty = 2300;
   896a2:	4b5e      	ldr	r3, [pc, #376]	; (8981c <SetHeaterState+0x344>)
   896a4:	f640 02fc 	movw	r2, #2300	; 0x8fc
   896a8:	801a      	strh	r2, [r3, #0]
			if (Tmp1Val <= 26)
   896aa:	4b5d      	ldr	r3, [pc, #372]	; (89820 <SetHeaterState+0x348>)
   896ac:	681a      	ldr	r2, [r3, #0]
   896ae:	4b5d      	ldr	r3, [pc, #372]	; (89824 <SetHeaterState+0x34c>)
   896b0:	4610      	mov	r0, r2
   896b2:	495d      	ldr	r1, [pc, #372]	; (89828 <SetHeaterState+0x350>)
   896b4:	4798      	blx	r3
   896b6:	4603      	mov	r3, r0
   896b8:	2b00      	cmp	r3, #0
   896ba:	d003      	beq.n	896c4 <SetHeaterState+0x1ec>
			{
				avg_duty = 2400;
   896bc:	4b57      	ldr	r3, [pc, #348]	; (8981c <SetHeaterState+0x344>)
   896be:	f44f 6216 	mov.w	r2, #2400	; 0x960
   896c2:	801a      	strh	r2, [r3, #0]
			}
			wait_4_TS2Stability = WAIT_4_TS2STABILITY_800;
   896c4:	4b59      	ldr	r3, [pc, #356]	; (8982c <SetHeaterState+0x354>)
   896c6:	22b4      	movs	r2, #180	; 0xb4
   896c8:	801a      	strh	r2, [r3, #0]
			wait_4_stability = WAIT_4_STABILITY_800;
   896ca:	4b59      	ldr	r3, [pc, #356]	; (89830 <SetHeaterState+0x358>)
   896cc:	22b4      	movs	r2, #180	; 0xb4
   896ce:	801a      	strh	r2, [r3, #0]
			post_stability_count =  TS2_STABILITY_COUNT_800;
   896d0:	4b58      	ldr	r3, [pc, #352]	; (89834 <SetHeaterState+0x35c>)
   896d2:	221e      	movs	r2, #30
   896d4:	801a      	strh	r2, [r3, #0]
			TS3_post_stability_count = TS3_STABILITY_COUNT_800;
   896d6:	4b58      	ldr	r3, [pc, #352]	; (89838 <SetHeaterState+0x360>)
   896d8:	223c      	movs	r2, #60	; 0x3c
   896da:	801a      	strh	r2, [r3, #0]
			Prescribed_T2 = PRESCRIBED_TS2_800;
   896dc:	4b57      	ldr	r3, [pc, #348]	; (8983c <SetHeaterState+0x364>)
   896de:	4a58      	ldr	r2, [pc, #352]	; (89840 <SetHeaterState+0x368>)
   896e0:	601a      	str	r2, [r3, #0]
		}
			
		avg_duty = avg_duty ;
   896e2:	4b4e      	ldr	r3, [pc, #312]	; (8981c <SetHeaterState+0x344>)
   896e4:	881a      	ldrh	r2, [r3, #0]
   896e6:	4b4d      	ldr	r3, [pc, #308]	; (8981c <SetHeaterState+0x344>)
   896e8:	801a      	strh	r2, [r3, #0]
 	}

	Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP1STATUS,&sensordata);
   896ea:	f107 030c 	add.w	r3, r7, #12
   896ee:	2012      	movs	r0, #18
   896f0:	4619      	mov	r1, r3
   896f2:	4b54      	ldr	r3, [pc, #336]	; (89844 <SetHeaterState+0x36c>)
   896f4:	4798      	blx	r3
    {
		Tmp1Val = (Tmp1Val*9+ (float)sensordata/100)/10;
   896f6:	4b4a      	ldr	r3, [pc, #296]	; (89820 <SetHeaterState+0x348>)
   896f8:	681a      	ldr	r2, [r3, #0]
   896fa:	4b53      	ldr	r3, [pc, #332]	; (89848 <SetHeaterState+0x370>)
   896fc:	4610      	mov	r0, r2
   896fe:	4953      	ldr	r1, [pc, #332]	; (8984c <SetHeaterState+0x374>)
   89700:	4798      	blx	r3
   89702:	4603      	mov	r3, r0
   89704:	461c      	mov	r4, r3
   89706:	89bb      	ldrh	r3, [r7, #12]
   89708:	b21a      	sxth	r2, r3
   8970a:	4b51      	ldr	r3, [pc, #324]	; (89850 <SetHeaterState+0x378>)
   8970c:	4610      	mov	r0, r2
   8970e:	4798      	blx	r3
   89710:	4602      	mov	r2, r0
   89712:	4b50      	ldr	r3, [pc, #320]	; (89854 <SetHeaterState+0x37c>)
   89714:	4610      	mov	r0, r2
   89716:	4950      	ldr	r1, [pc, #320]	; (89858 <SetHeaterState+0x380>)
   89718:	4798      	blx	r3
   8971a:	4603      	mov	r3, r0
   8971c:	461a      	mov	r2, r3
   8971e:	4b4f      	ldr	r3, [pc, #316]	; (8985c <SetHeaterState+0x384>)
   89720:	4620      	mov	r0, r4
   89722:	4611      	mov	r1, r2
   89724:	4798      	blx	r3
   89726:	4603      	mov	r3, r0
   89728:	461a      	mov	r2, r3
   8972a:	4b4a      	ldr	r3, [pc, #296]	; (89854 <SetHeaterState+0x37c>)
   8972c:	4610      	mov	r0, r2
   8972e:	494c      	ldr	r1, [pc, #304]	; (89860 <SetHeaterState+0x388>)
   89730:	4798      	blx	r3
   89732:	4603      	mov	r3, r0
   89734:	461a      	mov	r2, r3
   89736:	4b3a      	ldr	r3, [pc, #232]	; (89820 <SetHeaterState+0x348>)
   89738:	601a      	str	r2, [r3, #0]
	}

	Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS,&sensordata);
   8973a:	f107 030c 	add.w	r3, r7, #12
   8973e:	2013      	movs	r0, #19
   89740:	4619      	mov	r1, r3
   89742:	4b40      	ldr	r3, [pc, #256]	; (89844 <SetHeaterState+0x36c>)
   89744:	4798      	blx	r3
	{
	   Tmp2Val = (Tmp2Val*9+ (float)sensordata/100)/10;
   89746:	4b47      	ldr	r3, [pc, #284]	; (89864 <SetHeaterState+0x38c>)
   89748:	681a      	ldr	r2, [r3, #0]
   8974a:	4b3f      	ldr	r3, [pc, #252]	; (89848 <SetHeaterState+0x370>)
   8974c:	4610      	mov	r0, r2
   8974e:	493f      	ldr	r1, [pc, #252]	; (8984c <SetHeaterState+0x374>)
   89750:	4798      	blx	r3
   89752:	4603      	mov	r3, r0
   89754:	461c      	mov	r4, r3
   89756:	89bb      	ldrh	r3, [r7, #12]
   89758:	b21a      	sxth	r2, r3
   8975a:	4b3d      	ldr	r3, [pc, #244]	; (89850 <SetHeaterState+0x378>)
   8975c:	4610      	mov	r0, r2
   8975e:	4798      	blx	r3
   89760:	4602      	mov	r2, r0
   89762:	4b3c      	ldr	r3, [pc, #240]	; (89854 <SetHeaterState+0x37c>)
   89764:	4610      	mov	r0, r2
   89766:	493c      	ldr	r1, [pc, #240]	; (89858 <SetHeaterState+0x380>)
   89768:	4798      	blx	r3
   8976a:	4603      	mov	r3, r0
   8976c:	461a      	mov	r2, r3
   8976e:	4b3b      	ldr	r3, [pc, #236]	; (8985c <SetHeaterState+0x384>)
   89770:	4620      	mov	r0, r4
   89772:	4611      	mov	r1, r2
   89774:	4798      	blx	r3
   89776:	4603      	mov	r3, r0
   89778:	461a      	mov	r2, r3
   8977a:	4b36      	ldr	r3, [pc, #216]	; (89854 <SetHeaterState+0x37c>)
   8977c:	4610      	mov	r0, r2
   8977e:	4938      	ldr	r1, [pc, #224]	; (89860 <SetHeaterState+0x388>)
   89780:	4798      	blx	r3
   89782:	4603      	mov	r3, r0
   89784:	461a      	mov	r2, r3
   89786:	4b37      	ldr	r3, [pc, #220]	; (89864 <SetHeaterState+0x38c>)
   89788:	601a      	str	r2, [r3, #0]
  	   prev_temp2val = Tmp2Val;
   8978a:	4b36      	ldr	r3, [pc, #216]	; (89864 <SetHeaterState+0x38c>)
   8978c:	681a      	ldr	r2, [r3, #0]
   8978e:	4b36      	ldr	r3, [pc, #216]	; (89868 <SetHeaterState+0x390>)
   89790:	4610      	mov	r0, r2
   89792:	4798      	blx	r3
   89794:	4603      	mov	r3, r0
   89796:	b29a      	uxth	r2, r3
   89798:	4b34      	ldr	r3, [pc, #208]	; (8986c <SetHeaterState+0x394>)
   8979a:	801a      	strh	r2, [r3, #0]
	}
		 	
	Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&sensordata);
   8979c:	f107 030c 	add.w	r3, r7, #12
   897a0:	2014      	movs	r0, #20
   897a2:	4619      	mov	r1, r3
   897a4:	4b27      	ldr	r3, [pc, #156]	; (89844 <SetHeaterState+0x36c>)
   897a6:	4798      	blx	r3
	{
		Tmp3Val = (Tmp3Val*9+ (float)sensordata/100)/10;
   897a8:	4b31      	ldr	r3, [pc, #196]	; (89870 <SetHeaterState+0x398>)
   897aa:	681a      	ldr	r2, [r3, #0]
   897ac:	4b26      	ldr	r3, [pc, #152]	; (89848 <SetHeaterState+0x370>)
   897ae:	4610      	mov	r0, r2
   897b0:	4926      	ldr	r1, [pc, #152]	; (8984c <SetHeaterState+0x374>)
   897b2:	4798      	blx	r3
   897b4:	4603      	mov	r3, r0
   897b6:	461c      	mov	r4, r3
   897b8:	89bb      	ldrh	r3, [r7, #12]
   897ba:	b21a      	sxth	r2, r3
   897bc:	4b24      	ldr	r3, [pc, #144]	; (89850 <SetHeaterState+0x378>)
   897be:	4610      	mov	r0, r2
   897c0:	4798      	blx	r3
   897c2:	4602      	mov	r2, r0
   897c4:	4b23      	ldr	r3, [pc, #140]	; (89854 <SetHeaterState+0x37c>)
   897c6:	4610      	mov	r0, r2
   897c8:	4923      	ldr	r1, [pc, #140]	; (89858 <SetHeaterState+0x380>)
   897ca:	4798      	blx	r3
   897cc:	4603      	mov	r3, r0
   897ce:	461a      	mov	r2, r3
   897d0:	4b22      	ldr	r3, [pc, #136]	; (8985c <SetHeaterState+0x384>)
   897d2:	4620      	mov	r0, r4
   897d4:	4611      	mov	r1, r2
   897d6:	4798      	blx	r3
   897d8:	4603      	mov	r3, r0
   897da:	461a      	mov	r2, r3
   897dc:	4b1d      	ldr	r3, [pc, #116]	; (89854 <SetHeaterState+0x37c>)
   897de:	4610      	mov	r0, r2
   897e0:	491f      	ldr	r1, [pc, #124]	; (89860 <SetHeaterState+0x388>)
   897e2:	4798      	blx	r3
   897e4:	4603      	mov	r3, r0
   897e6:	461a      	mov	r2, r3
   897e8:	4b21      	ldr	r3, [pc, #132]	; (89870 <SetHeaterState+0x398>)
   897ea:	601a      	str	r2, [r3, #0]
    	prev_temp3val = Tmp3Val;
   897ec:	4b20      	ldr	r3, [pc, #128]	; (89870 <SetHeaterState+0x398>)
   897ee:	681a      	ldr	r2, [r3, #0]
   897f0:	4b1d      	ldr	r3, [pc, #116]	; (89868 <SetHeaterState+0x390>)
   897f2:	4610      	mov	r0, r2
   897f4:	4798      	blx	r3
   897f6:	4603      	mov	r3, r0
   897f8:	b29a      	uxth	r2, r3
   897fa:	4b1e      	ldr	r3, [pc, #120]	; (89874 <SetHeaterState+0x39c>)
   897fc:	801a      	strh	r2, [r3, #0]
	}
		 
		 	
	if (HeaterState == CL_HEATER_STATE_CLOSED_HEATING)
   897fe:	4b1e      	ldr	r3, [pc, #120]	; (89878 <SetHeaterState+0x3a0>)
   89800:	781b      	ldrb	r3, [r3, #0]
   89802:	2b06      	cmp	r3, #6
   89804:	d102      	bne.n	8980c <SetHeaterState+0x334>
	{
		avg_duty = 100;
   89806:	4b05      	ldr	r3, [pc, #20]	; (8981c <SetHeaterState+0x344>)
   89808:	2264      	movs	r2, #100	; 0x64
   8980a:	801a      	strh	r2, [r3, #0]
	{
	//	avg_duty = stable_avg_dty;
	}

	
	return (Cl_rinseretcode);
   8980c:	7bfb      	ldrb	r3, [r7, #15]
}
   8980e:	4618      	mov	r0, r3
   89810:	3714      	adds	r7, #20
   89812:	46bd      	mov	sp, r7
   89814:	bd90      	pop	{r4, r7, pc}
   89816:	bf00      	nop
   89818:	20070558 	.word	0x20070558
   8981c:	200719ae 	.word	0x200719ae
   89820:	200719bc 	.word	0x200719bc
   89824:	000a6ca9 	.word	0x000a6ca9
   89828:	41d00000 	.word	0x41d00000
   8982c:	20070548 	.word	0x20070548
   89830:	2007054a 	.word	0x2007054a
   89834:	200719d0 	.word	0x200719d0
   89838:	200719d2 	.word	0x200719d2
   8983c:	20070550 	.word	0x20070550
   89840:	421c0000 	.word	0x421c0000
   89844:	0008e7f9 	.word	0x0008e7f9
   89848:	000a6959 	.word	0x000a6959
   8984c:	41100000 	.word	0x41100000
   89850:	000a68b1 	.word	0x000a68b1
   89854:	000a6ac1 	.word	0x000a6ac1
   89858:	42c80000 	.word	0x42c80000
   8985c:	000a6749 	.word	0x000a6749
   89860:	41200000 	.word	0x41200000
   89864:	200719c0 	.word	0x200719c0
   89868:	000a6ce5 	.word	0x000a6ce5
   8986c:	200719b2 	.word	0x200719b2
   89870:	200719c4 	.word	0x200719c4
   89874:	200719b4 	.word	0x200719b4
   89878:	200719ab 	.word	0x200719ab
   8987c:	00000000 	.word	0x00000000

00089880 <Heat_Correction>:

int16_t Heat_Correction()
{
   89880:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
   89884:	b083      	sub	sp, #12
   89886:	af00      	add	r7, sp, #0
	count_500ms ++;
   89888:	4b1b      	ldr	r3, [pc, #108]	; (898f8 <Heat_Correction+0x78>)
   8988a:	881b      	ldrh	r3, [r3, #0]
   8988c:	3301      	adds	r3, #1
   8988e:	b29a      	uxth	r2, r3
   89890:	4b19      	ldr	r3, [pc, #100]	; (898f8 <Heat_Correction+0x78>)
   89892:	801a      	strh	r2, [r3, #0]
    stability_count++;				//Count used to check if TS3 is stable, is being reset so we need this and cannot use count_500ms
   89894:	4b19      	ldr	r3, [pc, #100]	; (898fc <Heat_Correction+0x7c>)
   89896:	881b      	ldrh	r3, [r3, #0]
   89898:	3301      	adds	r3, #1
   8989a:	b29a      	uxth	r2, r3
   8989c:	4b17      	ldr	r3, [pc, #92]	; (898fc <Heat_Correction+0x7c>)
   8989e:	801a      	strh	r2, [r3, #0]
	TS2_stability_count++;
   898a0:	4b17      	ldr	r3, [pc, #92]	; (89900 <Heat_Correction+0x80>)
   898a2:	881b      	ldrh	r3, [r3, #0]
   898a4:	3301      	adds	r3, #1
   898a6:	b29a      	uxth	r2, r3
   898a8:	4b15      	ldr	r3, [pc, #84]	; (89900 <Heat_Correction+0x80>)
   898aa:	801a      	strh	r2, [r3, #0]
		
	if (!(count_500ms % 600))           // wait for 30 sec for storing TS2 value, used in slope calculation
   898ac:	4b12      	ldr	r3, [pc, #72]	; (898f8 <Heat_Correction+0x78>)
   898ae:	881b      	ldrh	r3, [r3, #0]
   898b0:	4a14      	ldr	r2, [pc, #80]	; (89904 <Heat_Correction+0x84>)
   898b2:	fba2 1203 	umull	r1, r2, r2, r3
   898b6:	0992      	lsrs	r2, r2, #6
   898b8:	f44f 7116 	mov.w	r1, #600	; 0x258
   898bc:	fb01 f202 	mul.w	r2, r1, r2
   898c0:	1a9b      	subs	r3, r3, r2
   898c2:	b29b      	uxth	r3, r3
   898c4:	2b00      	cmp	r3, #0
   898c6:	d107      	bne.n	898d8 <Heat_Correction+0x58>
	{
		Past_TS2 = Tmp2Val;
   898c8:	4b0f      	ldr	r3, [pc, #60]	; (89908 <Heat_Correction+0x88>)
   898ca:	681b      	ldr	r3, [r3, #0]
   898cc:	4a0f      	ldr	r2, [pc, #60]	; (8990c <Heat_Correction+0x8c>)
   898ce:	6013      	str	r3, [r2, #0]
		count_at_PastTS2 = count_500ms;  //for use in slope calculation
   898d0:	4b09      	ldr	r3, [pc, #36]	; (898f8 <Heat_Correction+0x78>)
   898d2:	881a      	ldrh	r2, [r3, #0]
   898d4:	4b0e      	ldr	r3, [pc, #56]	; (89910 <Heat_Correction+0x90>)
   898d6:	801a      	strh	r2, [r3, #0]
	
	// test code to detect pattern
	int16_t sensordata;
	
	
	if(HeaterState == CL_HEATER_STATE_OFF  )
   898d8:	4b0e      	ldr	r3, [pc, #56]	; (89914 <Heat_Correction+0x94>)
   898da:	781b      	ldrb	r3, [r3, #0]
   898dc:	2b04      	cmp	r3, #4
   898de:	d102      	bne.n	898e6 <Heat_Correction+0x66>
	{
		sv_cntrl_poweroffheater();
   898e0:	4b0d      	ldr	r3, [pc, #52]	; (89918 <Heat_Correction+0x98>)
   898e2:	4798      	blx	r3
		return;
   898e4:	e349      	b.n	89f7a <Heat_Correction+0x6fa>
	}
	if((HeaterState == CL_HEATER_STATE_INACTIVE) || (HeaterState == CL_HEATER_SUBSTATE_OFF))
   898e6:	4b0b      	ldr	r3, [pc, #44]	; (89914 <Heat_Correction+0x94>)
   898e8:	781b      	ldrb	r3, [r3, #0]
   898ea:	2b00      	cmp	r3, #0
   898ec:	d003      	beq.n	898f6 <Heat_Correction+0x76>
   898ee:	4b09      	ldr	r3, [pc, #36]	; (89914 <Heat_Correction+0x94>)
   898f0:	781b      	ldrb	r3, [r3, #0]
   898f2:	2b00      	cmp	r3, #0
   898f4:	d112      	bne.n	8991c <Heat_Correction+0x9c>
	{
		return;
   898f6:	e340      	b.n	89f7a <Heat_Correction+0x6fa>
   898f8:	200719c8 	.word	0x200719c8
   898fc:	200719ca 	.word	0x200719ca
   89900:	200719cc 	.word	0x200719cc
   89904:	1b4e81b5 	.word	0x1b4e81b5
   89908:	200719c0 	.word	0x200719c0
   8990c:	200719dc 	.word	0x200719dc
   89910:	200719ce 	.word	0x200719ce
   89914:	200719ab 	.word	0x200719ab
   89918:	00099cb9 	.word	0x00099cb9
	}
		
    // Sunil: We are calling power on heater every 500msec, HeaterState is set by Cl_RinseController. Should be turned ON only once?
	if((HeaterState == CL_HEATER_STATE_ON) || (HeaterState == CL_HEATER_STATE_DIALYSER_PRIME_ON) || (HeaterState == CL_HEATER_STATE_DIALYSIS_ON))
   8991c:	4b95      	ldr	r3, [pc, #596]	; (89b74 <Heat_Correction+0x2f4>)
   8991e:	781b      	ldrb	r3, [r3, #0]
   89920:	2b01      	cmp	r3, #1
   89922:	d007      	beq.n	89934 <Heat_Correction+0xb4>
   89924:	4b93      	ldr	r3, [pc, #588]	; (89b74 <Heat_Correction+0x2f4>)
   89926:	781b      	ldrb	r3, [r3, #0]
   89928:	2b02      	cmp	r3, #2
   8992a:	d003      	beq.n	89934 <Heat_Correction+0xb4>
   8992c:	4b91      	ldr	r3, [pc, #580]	; (89b74 <Heat_Correction+0x2f4>)
   8992e:	781b      	ldrb	r3, [r3, #0]
   89930:	2b03      	cmp	r3, #3
   89932:	d107      	bne.n	89944 <Heat_Correction+0xc4>
	{
	 		sv_cntrl_poweronheater();
   89934:	4b90      	ldr	r3, [pc, #576]	; (89b78 <Heat_Correction+0x2f8>)
   89936:	4798      	blx	r3
			sv_cntrl_incheater(avg_duty);
   89938:	4b90      	ldr	r3, [pc, #576]	; (89b7c <Heat_Correction+0x2fc>)
   8993a:	881b      	ldrh	r3, [r3, #0]
   8993c:	b21b      	sxth	r3, r3
   8993e:	4618      	mov	r0, r3
   89940:	4b8f      	ldr	r3, [pc, #572]	; (89b80 <Heat_Correction+0x300>)
   89942:	4798      	blx	r3
		   
	}
	
	Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP1STATUS,&sensordata);      // sensor data of T1
   89944:	1dbb      	adds	r3, r7, #6
   89946:	2012      	movs	r0, #18
   89948:	4619      	mov	r1, r3
   8994a:	4b8e      	ldr	r3, [pc, #568]	; (89b84 <Heat_Correction+0x304>)
   8994c:	4798      	blx	r3
	{
		Tmp1Val = (Tmp1Val*9+ (float)sensordata/100)/10;
   8994e:	4b8e      	ldr	r3, [pc, #568]	; (89b88 <Heat_Correction+0x308>)
   89950:	681a      	ldr	r2, [r3, #0]
   89952:	4b8e      	ldr	r3, [pc, #568]	; (89b8c <Heat_Correction+0x30c>)
   89954:	4610      	mov	r0, r2
   89956:	498e      	ldr	r1, [pc, #568]	; (89b90 <Heat_Correction+0x310>)
   89958:	4798      	blx	r3
   8995a:	4603      	mov	r3, r0
   8995c:	461c      	mov	r4, r3
   8995e:	88fb      	ldrh	r3, [r7, #6]
   89960:	b21a      	sxth	r2, r3
   89962:	4b8c      	ldr	r3, [pc, #560]	; (89b94 <Heat_Correction+0x314>)
   89964:	4610      	mov	r0, r2
   89966:	4798      	blx	r3
   89968:	4602      	mov	r2, r0
   8996a:	4b8b      	ldr	r3, [pc, #556]	; (89b98 <Heat_Correction+0x318>)
   8996c:	4610      	mov	r0, r2
   8996e:	498b      	ldr	r1, [pc, #556]	; (89b9c <Heat_Correction+0x31c>)
   89970:	4798      	blx	r3
   89972:	4603      	mov	r3, r0
   89974:	461a      	mov	r2, r3
   89976:	4b8a      	ldr	r3, [pc, #552]	; (89ba0 <Heat_Correction+0x320>)
   89978:	4620      	mov	r0, r4
   8997a:	4611      	mov	r1, r2
   8997c:	4798      	blx	r3
   8997e:	4603      	mov	r3, r0
   89980:	461a      	mov	r2, r3
   89982:	4b85      	ldr	r3, [pc, #532]	; (89b98 <Heat_Correction+0x318>)
   89984:	4610      	mov	r0, r2
   89986:	4987      	ldr	r1, [pc, #540]	; (89ba4 <Heat_Correction+0x324>)
   89988:	4798      	blx	r3
   8998a:	4603      	mov	r3, r0
   8998c:	461a      	mov	r2, r3
   8998e:	4b7e      	ldr	r3, [pc, #504]	; (89b88 <Heat_Correction+0x308>)
   89990:	601a      	str	r2, [r3, #0]
	}
	
	if (!(count_500ms %40))    // 40 28072017
   89992:	4b85      	ldr	r3, [pc, #532]	; (89ba8 <Heat_Correction+0x328>)
   89994:	881a      	ldrh	r2, [r3, #0]
   89996:	4b85      	ldr	r3, [pc, #532]	; (89bac <Heat_Correction+0x32c>)
   89998:	fba3 1302 	umull	r1, r3, r3, r2
   8999c:	0959      	lsrs	r1, r3, #5
   8999e:	460b      	mov	r3, r1
   899a0:	009b      	lsls	r3, r3, #2
   899a2:	440b      	add	r3, r1
   899a4:	00db      	lsls	r3, r3, #3
   899a6:	1ad3      	subs	r3, r2, r3
   899a8:	b29b      	uxth	r3, r3
   899aa:	2b00      	cmp	r3, #0
   899ac:	d103      	bne.n	899b6 <Heat_Correction+0x136>
		Tmp2Val_prev = Tmp2Val;  //For calculating if TS2 stable, read once in every 2 sec
   899ae:	4b80      	ldr	r3, [pc, #512]	; (89bb0 <Heat_Correction+0x330>)
   899b0:	681b      	ldr	r3, [r3, #0]
   899b2:	4a80      	ldr	r2, [pc, #512]	; (89bb4 <Heat_Correction+0x334>)
   899b4:	6013      	str	r3, [r2, #0]
					                                             
	Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS,&sensordata);     // sensor data of T2
   899b6:	1dbb      	adds	r3, r7, #6
   899b8:	2013      	movs	r0, #19
   899ba:	4619      	mov	r1, r3
   899bc:	4b71      	ldr	r3, [pc, #452]	; (89b84 <Heat_Correction+0x304>)
   899be:	4798      	blx	r3
	{
		Tmp2Val = (Tmp2Val*9+ (float)sensordata/100)/10;
   899c0:	4b7b      	ldr	r3, [pc, #492]	; (89bb0 <Heat_Correction+0x330>)
   899c2:	681a      	ldr	r2, [r3, #0]
   899c4:	4b71      	ldr	r3, [pc, #452]	; (89b8c <Heat_Correction+0x30c>)
   899c6:	4610      	mov	r0, r2
   899c8:	4971      	ldr	r1, [pc, #452]	; (89b90 <Heat_Correction+0x310>)
   899ca:	4798      	blx	r3
   899cc:	4603      	mov	r3, r0
   899ce:	461c      	mov	r4, r3
   899d0:	88fb      	ldrh	r3, [r7, #6]
   899d2:	b21a      	sxth	r2, r3
   899d4:	4b6f      	ldr	r3, [pc, #444]	; (89b94 <Heat_Correction+0x314>)
   899d6:	4610      	mov	r0, r2
   899d8:	4798      	blx	r3
   899da:	4602      	mov	r2, r0
   899dc:	4b6e      	ldr	r3, [pc, #440]	; (89b98 <Heat_Correction+0x318>)
   899de:	4610      	mov	r0, r2
   899e0:	496e      	ldr	r1, [pc, #440]	; (89b9c <Heat_Correction+0x31c>)
   899e2:	4798      	blx	r3
   899e4:	4603      	mov	r3, r0
   899e6:	461a      	mov	r2, r3
   899e8:	4b6d      	ldr	r3, [pc, #436]	; (89ba0 <Heat_Correction+0x320>)
   899ea:	4620      	mov	r0, r4
   899ec:	4611      	mov	r1, r2
   899ee:	4798      	blx	r3
   899f0:	4603      	mov	r3, r0
   899f2:	461a      	mov	r2, r3
   899f4:	4b68      	ldr	r3, [pc, #416]	; (89b98 <Heat_Correction+0x318>)
   899f6:	4610      	mov	r0, r2
   899f8:	496a      	ldr	r1, [pc, #424]	; (89ba4 <Heat_Correction+0x324>)
   899fa:	4798      	blx	r3
   899fc:	4603      	mov	r3, r0
   899fe:	461a      	mov	r2, r3
   89a00:	4b6b      	ldr	r3, [pc, #428]	; (89bb0 <Heat_Correction+0x330>)
   89a02:	601a      	str	r2, [r3, #0]
	}
			 	
	if (!(count_500ms %20))
   89a04:	4b68      	ldr	r3, [pc, #416]	; (89ba8 <Heat_Correction+0x328>)
   89a06:	881a      	ldrh	r2, [r3, #0]
   89a08:	4b68      	ldr	r3, [pc, #416]	; (89bac <Heat_Correction+0x32c>)
   89a0a:	fba3 1302 	umull	r1, r3, r3, r2
   89a0e:	0919      	lsrs	r1, r3, #4
   89a10:	460b      	mov	r3, r1
   89a12:	009b      	lsls	r3, r3, #2
   89a14:	440b      	add	r3, r1
   89a16:	009b      	lsls	r3, r3, #2
   89a18:	1ad3      	subs	r3, r2, r3
   89a1a:	b29b      	uxth	r3, r3
   89a1c:	2b00      	cmp	r3, #0
   89a1e:	d103      	bne.n	89a28 <Heat_Correction+0x1a8>
	{
		Tmp3Val_prev = Tmp3Val;		//Sunil: Used for checking TS3 stability
   89a20:	4b65      	ldr	r3, [pc, #404]	; (89bb8 <Heat_Correction+0x338>)
   89a22:	681b      	ldr	r3, [r3, #0]
   89a24:	4a65      	ldr	r2, [pc, #404]	; (89bbc <Heat_Correction+0x33c>)
   89a26:	6013      	str	r3, [r2, #0]
	}				 
				 
	Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&sensordata);                 // sensor data of T3
   89a28:	1dbb      	adds	r3, r7, #6
   89a2a:	2014      	movs	r0, #20
   89a2c:	4619      	mov	r1, r3
   89a2e:	4b55      	ldr	r3, [pc, #340]	; (89b84 <Heat_Correction+0x304>)
   89a30:	4798      	blx	r3
	{
		Tmp3Val = (Tmp3Val*9+ (float)sensordata/100)/10;
   89a32:	4b61      	ldr	r3, [pc, #388]	; (89bb8 <Heat_Correction+0x338>)
   89a34:	681a      	ldr	r2, [r3, #0]
   89a36:	4b55      	ldr	r3, [pc, #340]	; (89b8c <Heat_Correction+0x30c>)
   89a38:	4610      	mov	r0, r2
   89a3a:	4955      	ldr	r1, [pc, #340]	; (89b90 <Heat_Correction+0x310>)
   89a3c:	4798      	blx	r3
   89a3e:	4603      	mov	r3, r0
   89a40:	461c      	mov	r4, r3
   89a42:	88fb      	ldrh	r3, [r7, #6]
   89a44:	b21a      	sxth	r2, r3
   89a46:	4b53      	ldr	r3, [pc, #332]	; (89b94 <Heat_Correction+0x314>)
   89a48:	4610      	mov	r0, r2
   89a4a:	4798      	blx	r3
   89a4c:	4602      	mov	r2, r0
   89a4e:	4b52      	ldr	r3, [pc, #328]	; (89b98 <Heat_Correction+0x318>)
   89a50:	4610      	mov	r0, r2
   89a52:	4952      	ldr	r1, [pc, #328]	; (89b9c <Heat_Correction+0x31c>)
   89a54:	4798      	blx	r3
   89a56:	4603      	mov	r3, r0
   89a58:	461a      	mov	r2, r3
   89a5a:	4b51      	ldr	r3, [pc, #324]	; (89ba0 <Heat_Correction+0x320>)
   89a5c:	4620      	mov	r0, r4
   89a5e:	4611      	mov	r1, r2
   89a60:	4798      	blx	r3
   89a62:	4603      	mov	r3, r0
   89a64:	461a      	mov	r2, r3
   89a66:	4b4c      	ldr	r3, [pc, #304]	; (89b98 <Heat_Correction+0x318>)
   89a68:	4610      	mov	r0, r2
   89a6a:	494e      	ldr	r1, [pc, #312]	; (89ba4 <Heat_Correction+0x324>)
   89a6c:	4798      	blx	r3
   89a6e:	4603      	mov	r3, r0
   89a70:	461a      	mov	r2, r3
   89a72:	4b51      	ldr	r3, [pc, #324]	; (89bb8 <Heat_Correction+0x338>)
   89a74:	601a      	str	r2, [r3, #0]
	}
	
	DataDisplay();			 
   89a76:	4b52      	ldr	r3, [pc, #328]	; (89bc0 <Heat_Correction+0x340>)
   89a78:	4798      	blx	r3
	 	
	Calculate_slope();                     // calculate slope for TS2 curve to be used in Duty correction
   89a7a:	4b52      	ldr	r3, [pc, #328]	; (89bc4 <Heat_Correction+0x344>)
   89a7c:	4798      	blx	r3
	Calculate_direction();					// Calculate if temperature is raising or falling based on T2
   89a7e:	4b52      	ldr	r3, [pc, #328]	; (89bc8 <Heat_Correction+0x348>)
   89a80:	4798      	blx	r3
	  37 +/- 2 degrees of 39 deg.
	- T2 slope is used for calculating the steps.Slope = (T2(Sampled at 30 secs) - Current T2 )/ (current time - Time at sampling).
	  Higher the slope, lesser the duty count and vice versa. The duty cycle value is decreased if Temperature is increasing and 
	  increased if temperature is decreasing.
	*/
	TS2_Stable = Check_4_TS2_Stable();
   89a82:	4b52      	ldr	r3, [pc, #328]	; (89bcc <Heat_Correction+0x34c>)
   89a84:	4798      	blx	r3
   89a86:	4603      	mov	r3, r0
   89a88:	461a      	mov	r2, r3
   89a8a:	4b51      	ldr	r3, [pc, #324]	; (89bd0 <Heat_Correction+0x350>)
   89a8c:	701a      	strb	r2, [r3, #0]
	
	if (SYSTEM_FLOW == 300)
   89a8e:	4b51      	ldr	r3, [pc, #324]	; (89bd4 <Heat_Correction+0x354>)
   89a90:	681b      	ldr	r3, [r3, #0]
   89a92:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   89a96:	d137      	bne.n	89b08 <Heat_Correction+0x288>
	{
		if ((Tmp2Val >= (Prescribed_T2+0.5))  && (Tmp3Val <= 32))      // Restricting forced coarse correction only at the beginning and any time TS3 falls below 32
   89a98:	4b45      	ldr	r3, [pc, #276]	; (89bb0 <Heat_Correction+0x330>)
   89a9a:	681a      	ldr	r2, [r3, #0]
   89a9c:	4b4e      	ldr	r3, [pc, #312]	; (89bd8 <Heat_Correction+0x358>)
   89a9e:	4610      	mov	r0, r2
   89aa0:	4798      	blx	r3
   89aa2:	4680      	mov	r8, r0
   89aa4:	4689      	mov	r9, r1
   89aa6:	4b4d      	ldr	r3, [pc, #308]	; (89bdc <Heat_Correction+0x35c>)
   89aa8:	681a      	ldr	r2, [r3, #0]
   89aaa:	4b4b      	ldr	r3, [pc, #300]	; (89bd8 <Heat_Correction+0x358>)
   89aac:	4610      	mov	r0, r2
   89aae:	4798      	blx	r3
   89ab0:	4602      	mov	r2, r0
   89ab2:	460b      	mov	r3, r1
   89ab4:	4c4a      	ldr	r4, [pc, #296]	; (89be0 <Heat_Correction+0x360>)
   89ab6:	4610      	mov	r0, r2
   89ab8:	4619      	mov	r1, r3
   89aba:	f04f 0200 	mov.w	r2, #0
   89abe:	4b49      	ldr	r3, [pc, #292]	; (89be4 <Heat_Correction+0x364>)
   89ac0:	47a0      	blx	r4
   89ac2:	4602      	mov	r2, r0
   89ac4:	460b      	mov	r3, r1
   89ac6:	4c48      	ldr	r4, [pc, #288]	; (89be8 <Heat_Correction+0x368>)
   89ac8:	4640      	mov	r0, r8
   89aca:	4649      	mov	r1, r9
   89acc:	47a0      	blx	r4
   89ace:	4603      	mov	r3, r0
   89ad0:	2b00      	cmp	r3, #0
   89ad2:	d019      	beq.n	89b08 <Heat_Correction+0x288>
   89ad4:	4b38      	ldr	r3, [pc, #224]	; (89bb8 <Heat_Correction+0x338>)
   89ad6:	681a      	ldr	r2, [r3, #0]
   89ad8:	4b44      	ldr	r3, [pc, #272]	; (89bec <Heat_Correction+0x36c>)
   89ada:	4610      	mov	r0, r2
   89adc:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
   89ae0:	4798      	blx	r3
   89ae2:	4603      	mov	r3, r0
   89ae4:	2b00      	cmp	r3, #0
   89ae6:	d00f      	beq.n	89b08 <Heat_Correction+0x288>
		{
			if (!(count_500ms % 20))                  // force coarse correction if TS2 greater 39 and continues to remain for more than 1 sec
   89ae8:	4b2f      	ldr	r3, [pc, #188]	; (89ba8 <Heat_Correction+0x328>)
   89aea:	881a      	ldrh	r2, [r3, #0]
   89aec:	4b2f      	ldr	r3, [pc, #188]	; (89bac <Heat_Correction+0x32c>)
   89aee:	fba3 1302 	umull	r1, r3, r3, r2
   89af2:	0919      	lsrs	r1, r3, #4
   89af4:	460b      	mov	r3, r1
   89af6:	009b      	lsls	r3, r3, #2
   89af8:	440b      	add	r3, r1
   89afa:	009b      	lsls	r3, r3, #2
   89afc:	1ad3      	subs	r3, r2, r3
   89afe:	b29b      	uxth	r3, r3
   89b00:	2b00      	cmp	r3, #0
   89b02:	d101      	bne.n	89b08 <Heat_Correction+0x288>
			{
				Coarse_DutyCorrection();
   89b04:	4b3a      	ldr	r3, [pc, #232]	; (89bf0 <Heat_Correction+0x370>)
   89b06:	4798      	blx	r3
			}
			
		}
	}
	if (SYSTEM_FLOW == 500)
   89b08:	4b32      	ldr	r3, [pc, #200]	; (89bd4 <Heat_Correction+0x354>)
   89b0a:	681b      	ldr	r3, [r3, #0]
   89b0c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   89b10:	d179      	bne.n	89c06 <Heat_Correction+0x386>
	{
		if ((Tmp2Val >= (Prescribed_T2+0.5))  && (Tmp3Val <= 32))      // Restricting forced coarse correction only at the beginning and any time TS3 falls below 32
   89b12:	4b27      	ldr	r3, [pc, #156]	; (89bb0 <Heat_Correction+0x330>)
   89b14:	681a      	ldr	r2, [r3, #0]
   89b16:	4b30      	ldr	r3, [pc, #192]	; (89bd8 <Heat_Correction+0x358>)
   89b18:	4610      	mov	r0, r2
   89b1a:	4798      	blx	r3
   89b1c:	4680      	mov	r8, r0
   89b1e:	4689      	mov	r9, r1
   89b20:	4b2e      	ldr	r3, [pc, #184]	; (89bdc <Heat_Correction+0x35c>)
   89b22:	681a      	ldr	r2, [r3, #0]
   89b24:	4b2c      	ldr	r3, [pc, #176]	; (89bd8 <Heat_Correction+0x358>)
   89b26:	4610      	mov	r0, r2
   89b28:	4798      	blx	r3
   89b2a:	4602      	mov	r2, r0
   89b2c:	460b      	mov	r3, r1
   89b2e:	4c2c      	ldr	r4, [pc, #176]	; (89be0 <Heat_Correction+0x360>)
   89b30:	4610      	mov	r0, r2
   89b32:	4619      	mov	r1, r3
   89b34:	f04f 0200 	mov.w	r2, #0
   89b38:	4b2a      	ldr	r3, [pc, #168]	; (89be4 <Heat_Correction+0x364>)
   89b3a:	47a0      	blx	r4
   89b3c:	4602      	mov	r2, r0
   89b3e:	460b      	mov	r3, r1
   89b40:	4c29      	ldr	r4, [pc, #164]	; (89be8 <Heat_Correction+0x368>)
   89b42:	4640      	mov	r0, r8
   89b44:	4649      	mov	r1, r9
   89b46:	47a0      	blx	r4
   89b48:	4603      	mov	r3, r0
   89b4a:	2b00      	cmp	r3, #0
   89b4c:	d05b      	beq.n	89c06 <Heat_Correction+0x386>
   89b4e:	4b1a      	ldr	r3, [pc, #104]	; (89bb8 <Heat_Correction+0x338>)
   89b50:	681a      	ldr	r2, [r3, #0]
   89b52:	4b26      	ldr	r3, [pc, #152]	; (89bec <Heat_Correction+0x36c>)
   89b54:	4610      	mov	r0, r2
   89b56:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
   89b5a:	4798      	blx	r3
   89b5c:	4603      	mov	r3, r0
   89b5e:	2b00      	cmp	r3, #0
   89b60:	d051      	beq.n	89c06 <Heat_Correction+0x386>
		{
			if (!(count_500ms % 20))                  // force coarse correction if TS2 greater 39 and continues to remain for more than 1 sec
   89b62:	4b11      	ldr	r3, [pc, #68]	; (89ba8 <Heat_Correction+0x328>)
   89b64:	881a      	ldrh	r2, [r3, #0]
   89b66:	4b11      	ldr	r3, [pc, #68]	; (89bac <Heat_Correction+0x32c>)
   89b68:	fba3 1302 	umull	r1, r3, r3, r2
   89b6c:	0919      	lsrs	r1, r3, #4
   89b6e:	460b      	mov	r3, r1
   89b70:	e040      	b.n	89bf4 <Heat_Correction+0x374>
   89b72:	bf00      	nop
   89b74:	200719ab 	.word	0x200719ab
   89b78:	00099ca5 	.word	0x00099ca5
   89b7c:	200719ae 	.word	0x200719ae
   89b80:	00099dad 	.word	0x00099dad
   89b84:	0008e7f9 	.word	0x0008e7f9
   89b88:	200719bc 	.word	0x200719bc
   89b8c:	000a6959 	.word	0x000a6959
   89b90:	41100000 	.word	0x41100000
   89b94:	000a68b1 	.word	0x000a68b1
   89b98:	000a6ac1 	.word	0x000a6ac1
   89b9c:	42c80000 	.word	0x42c80000
   89ba0:	000a6749 	.word	0x000a6749
   89ba4:	41200000 	.word	0x41200000
   89ba8:	200719c8 	.word	0x200719c8
   89bac:	cccccccd 	.word	0xcccccccd
   89bb0:	200719c0 	.word	0x200719c0
   89bb4:	200719d8 	.word	0x200719d8
   89bb8:	200719c4 	.word	0x200719c4
   89bbc:	20072188 	.word	0x20072188
   89bc0:	0008b635 	.word	0x0008b635
   89bc4:	0008a21d 	.word	0x0008a21d
   89bc8:	0008a285 	.word	0x0008a285
   89bcc:	00089fc9 	.word	0x00089fc9
   89bd0:	2007218c 	.word	0x2007218c
   89bd4:	20070558 	.word	0x20070558
   89bd8:	000a6031 	.word	0x000a6031
   89bdc:	20070550 	.word	0x20070550
   89be0:	000a5d75 	.word	0x000a5d75
   89be4:	3fe00000 	.word	0x3fe00000
   89be8:	000a65e5 	.word	0x000a65e5
   89bec:	000a6ca9 	.word	0x000a6ca9
   89bf0:	0008a329 	.word	0x0008a329
   89bf4:	009b      	lsls	r3, r3, #2
   89bf6:	440b      	add	r3, r1
   89bf8:	009b      	lsls	r3, r3, #2
   89bfa:	1ad3      	subs	r3, r2, r3
   89bfc:	b29b      	uxth	r3, r3
   89bfe:	2b00      	cmp	r3, #0
   89c00:	d101      	bne.n	89c06 <Heat_Correction+0x386>
			{
				Coarse_DutyCorrection();
   89c02:	4b91      	ldr	r3, [pc, #580]	; (89e48 <Heat_Correction+0x5c8>)
   89c04:	4798      	blx	r3
			}
			
		}
	}
	if (SYSTEM_FLOW == 800)
   89c06:	4b91      	ldr	r3, [pc, #580]	; (89e4c <Heat_Correction+0x5cc>)
   89c08:	681b      	ldr	r3, [r3, #0]
   89c0a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   89c0e:	d137      	bne.n	89c80 <Heat_Correction+0x400>
	{
		if ((Tmp2Val >= (Prescribed_T2+0.5))  && (Tmp3Val <= 32))      // Restricting forced coarse correction only at the beginning and any time TS3 falls below 32
   89c10:	4b8f      	ldr	r3, [pc, #572]	; (89e50 <Heat_Correction+0x5d0>)
   89c12:	681a      	ldr	r2, [r3, #0]
   89c14:	4b8f      	ldr	r3, [pc, #572]	; (89e54 <Heat_Correction+0x5d4>)
   89c16:	4610      	mov	r0, r2
   89c18:	4798      	blx	r3
   89c1a:	4680      	mov	r8, r0
   89c1c:	4689      	mov	r9, r1
   89c1e:	4b8e      	ldr	r3, [pc, #568]	; (89e58 <Heat_Correction+0x5d8>)
   89c20:	681a      	ldr	r2, [r3, #0]
   89c22:	4b8c      	ldr	r3, [pc, #560]	; (89e54 <Heat_Correction+0x5d4>)
   89c24:	4610      	mov	r0, r2
   89c26:	4798      	blx	r3
   89c28:	4602      	mov	r2, r0
   89c2a:	460b      	mov	r3, r1
   89c2c:	4c8b      	ldr	r4, [pc, #556]	; (89e5c <Heat_Correction+0x5dc>)
   89c2e:	4610      	mov	r0, r2
   89c30:	4619      	mov	r1, r3
   89c32:	f04f 0200 	mov.w	r2, #0
   89c36:	4b8a      	ldr	r3, [pc, #552]	; (89e60 <Heat_Correction+0x5e0>)
   89c38:	47a0      	blx	r4
   89c3a:	4602      	mov	r2, r0
   89c3c:	460b      	mov	r3, r1
   89c3e:	4c89      	ldr	r4, [pc, #548]	; (89e64 <Heat_Correction+0x5e4>)
   89c40:	4640      	mov	r0, r8
   89c42:	4649      	mov	r1, r9
   89c44:	47a0      	blx	r4
   89c46:	4603      	mov	r3, r0
   89c48:	2b00      	cmp	r3, #0
   89c4a:	d019      	beq.n	89c80 <Heat_Correction+0x400>
   89c4c:	4b86      	ldr	r3, [pc, #536]	; (89e68 <Heat_Correction+0x5e8>)
   89c4e:	681a      	ldr	r2, [r3, #0]
   89c50:	4b86      	ldr	r3, [pc, #536]	; (89e6c <Heat_Correction+0x5ec>)
   89c52:	4610      	mov	r0, r2
   89c54:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
   89c58:	4798      	blx	r3
   89c5a:	4603      	mov	r3, r0
   89c5c:	2b00      	cmp	r3, #0
   89c5e:	d00f      	beq.n	89c80 <Heat_Correction+0x400>
		{
			if (!(count_500ms % 20))                  // force coarse correction if TS2 greater 39 and continues to remain for more than 1 sec
   89c60:	4b83      	ldr	r3, [pc, #524]	; (89e70 <Heat_Correction+0x5f0>)
   89c62:	881a      	ldrh	r2, [r3, #0]
   89c64:	4b83      	ldr	r3, [pc, #524]	; (89e74 <Heat_Correction+0x5f4>)
   89c66:	fba3 1302 	umull	r1, r3, r3, r2
   89c6a:	0919      	lsrs	r1, r3, #4
   89c6c:	460b      	mov	r3, r1
   89c6e:	009b      	lsls	r3, r3, #2
   89c70:	440b      	add	r3, r1
   89c72:	009b      	lsls	r3, r3, #2
   89c74:	1ad3      	subs	r3, r2, r3
   89c76:	b29b      	uxth	r3, r3
   89c78:	2b00      	cmp	r3, #0
   89c7a:	d101      	bne.n	89c80 <Heat_Correction+0x400>
			{
				Coarse_DutyCorrection();
   89c7c:	4b72      	ldr	r3, [pc, #456]	; (89e48 <Heat_Correction+0x5c8>)
   89c7e:	4798      	blx	r3
			
		}
	}
	
	
	if (SYSTEM_FLOW == 300)
   89c80:	4b72      	ldr	r3, [pc, #456]	; (89e4c <Heat_Correction+0x5cc>)
   89c82:	681b      	ldr	r3, [r3, #0]
   89c84:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   89c88:	d169      	bne.n	89d5e <Heat_Correction+0x4de>
	{
	  if(TS2_Stable)
   89c8a:	4b7b      	ldr	r3, [pc, #492]	; (89e78 <Heat_Correction+0x5f8>)
   89c8c:	781b      	ldrb	r3, [r3, #0]
   89c8e:	2b00      	cmp	r3, #0
   89c90:	d065      	beq.n	89d5e <Heat_Correction+0x4de>
	  {
		//Now TS2 is not rapidly increasing and is at certain Temperature +/- 2 deg. 
		//Start tuning T2 to be at 37 +/- 2 deg.
		if ( ((Tmp2Val - Prescribed_T2) > 0.5) || ((Prescribed_T2 - Tmp2Val) > 2) )
   89c92:	4b6f      	ldr	r3, [pc, #444]	; (89e50 <Heat_Correction+0x5d0>)
   89c94:	6819      	ldr	r1, [r3, #0]
   89c96:	4b70      	ldr	r3, [pc, #448]	; (89e58 <Heat_Correction+0x5d8>)
   89c98:	681a      	ldr	r2, [r3, #0]
   89c9a:	4b78      	ldr	r3, [pc, #480]	; (89e7c <Heat_Correction+0x5fc>)
   89c9c:	4608      	mov	r0, r1
   89c9e:	4611      	mov	r1, r2
   89ca0:	4798      	blx	r3
   89ca2:	4603      	mov	r3, r0
   89ca4:	461a      	mov	r2, r3
   89ca6:	4b76      	ldr	r3, [pc, #472]	; (89e80 <Heat_Correction+0x600>)
   89ca8:	4610      	mov	r0, r2
   89caa:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
   89cae:	4798      	blx	r3
   89cb0:	4603      	mov	r3, r0
   89cb2:	2b00      	cmp	r3, #0
   89cb4:	d111      	bne.n	89cda <Heat_Correction+0x45a>
   89cb6:	4b68      	ldr	r3, [pc, #416]	; (89e58 <Heat_Correction+0x5d8>)
   89cb8:	6819      	ldr	r1, [r3, #0]
   89cba:	4b65      	ldr	r3, [pc, #404]	; (89e50 <Heat_Correction+0x5d0>)
   89cbc:	681a      	ldr	r2, [r3, #0]
   89cbe:	4b6f      	ldr	r3, [pc, #444]	; (89e7c <Heat_Correction+0x5fc>)
   89cc0:	4608      	mov	r0, r1
   89cc2:	4611      	mov	r1, r2
   89cc4:	4798      	blx	r3
   89cc6:	4603      	mov	r3, r0
   89cc8:	461a      	mov	r2, r3
   89cca:	4b6d      	ldr	r3, [pc, #436]	; (89e80 <Heat_Correction+0x600>)
   89ccc:	4610      	mov	r0, r2
   89cce:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   89cd2:	4798      	blx	r3
   89cd4:	4603      	mov	r3, r0
   89cd6:	2b00      	cmp	r3, #0
   89cd8:	d002      	beq.n	89ce0 <Heat_Correction+0x460>
		{
			Coarse_DutyCorrection(); 
   89cda:	4b5b      	ldr	r3, [pc, #364]	; (89e48 <Heat_Correction+0x5c8>)
   89cdc:	4798      	blx	r3
   89cde:	e03e      	b.n	89d5e <Heat_Correction+0x4de>
		}
		else 
		{
			//T2 is stable and within 37 +/- 2 deg, check for T3 stability and apply fine correction
			TS3_Stable = Check_4_TS3_Stable();
   89ce0:	4b68      	ldr	r3, [pc, #416]	; (89e84 <Heat_Correction+0x604>)
   89ce2:	4798      	blx	r3
   89ce4:	4603      	mov	r3, r0
   89ce6:	461a      	mov	r2, r3
   89ce8:	4b67      	ldr	r3, [pc, #412]	; (89e88 <Heat_Correction+0x608>)
   89cea:	701a      	strb	r2, [r3, #0]
			if(TS3_Stable)
   89cec:	4b66      	ldr	r3, [pc, #408]	; (89e88 <Heat_Correction+0x608>)
   89cee:	781b      	ldrb	r3, [r3, #0]
   89cf0:	2b00      	cmp	r3, #0
   89cf2:	d034      	beq.n	89d5e <Heat_Correction+0x4de>
			{
			   if ( ((Tmp3Val - Prescribed_T3) > 0.1) || ((Prescribed_T3 - Tmp3Val) > 0.1) )
   89cf4:	4b5c      	ldr	r3, [pc, #368]	; (89e68 <Heat_Correction+0x5e8>)
   89cf6:	6819      	ldr	r1, [r3, #0]
   89cf8:	4b64      	ldr	r3, [pc, #400]	; (89e8c <Heat_Correction+0x60c>)
   89cfa:	681a      	ldr	r2, [r3, #0]
   89cfc:	4b5f      	ldr	r3, [pc, #380]	; (89e7c <Heat_Correction+0x5fc>)
   89cfe:	4608      	mov	r0, r1
   89d00:	4611      	mov	r1, r2
   89d02:	4798      	blx	r3
   89d04:	4603      	mov	r3, r0
   89d06:	461a      	mov	r2, r3
   89d08:	4b52      	ldr	r3, [pc, #328]	; (89e54 <Heat_Correction+0x5d4>)
   89d0a:	4610      	mov	r0, r2
   89d0c:	4798      	blx	r3
   89d0e:	4602      	mov	r2, r0
   89d10:	460b      	mov	r3, r1
   89d12:	4c5f      	ldr	r4, [pc, #380]	; (89e90 <Heat_Correction+0x610>)
   89d14:	4610      	mov	r0, r2
   89d16:	4619      	mov	r1, r3
   89d18:	a349      	add	r3, pc, #292	; (adr r3, 89e40 <Heat_Correction+0x5c0>)
   89d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
   89d1e:	47a0      	blx	r4
   89d20:	4603      	mov	r3, r0
   89d22:	2b00      	cmp	r3, #0
   89d24:	d119      	bne.n	89d5a <Heat_Correction+0x4da>
   89d26:	4b59      	ldr	r3, [pc, #356]	; (89e8c <Heat_Correction+0x60c>)
   89d28:	6819      	ldr	r1, [r3, #0]
   89d2a:	4b4f      	ldr	r3, [pc, #316]	; (89e68 <Heat_Correction+0x5e8>)
   89d2c:	681a      	ldr	r2, [r3, #0]
   89d2e:	4b53      	ldr	r3, [pc, #332]	; (89e7c <Heat_Correction+0x5fc>)
   89d30:	4608      	mov	r0, r1
   89d32:	4611      	mov	r1, r2
   89d34:	4798      	blx	r3
   89d36:	4603      	mov	r3, r0
   89d38:	461a      	mov	r2, r3
   89d3a:	4b46      	ldr	r3, [pc, #280]	; (89e54 <Heat_Correction+0x5d4>)
   89d3c:	4610      	mov	r0, r2
   89d3e:	4798      	blx	r3
   89d40:	4602      	mov	r2, r0
   89d42:	460b      	mov	r3, r1
   89d44:	4c52      	ldr	r4, [pc, #328]	; (89e90 <Heat_Correction+0x610>)
   89d46:	4610      	mov	r0, r2
   89d48:	4619      	mov	r1, r3
   89d4a:	a33d      	add	r3, pc, #244	; (adr r3, 89e40 <Heat_Correction+0x5c0>)
   89d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
   89d50:	47a0      	blx	r4
   89d52:	4603      	mov	r3, r0
   89d54:	2b00      	cmp	r3, #0
   89d56:	d100      	bne.n	89d5a <Heat_Correction+0x4da>
   89d58:	e001      	b.n	89d5e <Heat_Correction+0x4de>
			      Fine_DutyCorrection();
   89d5a:	4b4e      	ldr	r3, [pc, #312]	; (89e94 <Heat_Correction+0x614>)
   89d5c:	4798      	blx	r3
	  // TS2 not stable, wait for some more time
	  // Same avg_duty is being applied, no change till stability not achieved
	 }	
	}
	
	if (SYSTEM_FLOW == 500)
   89d5e:	4b3b      	ldr	r3, [pc, #236]	; (89e4c <Heat_Correction+0x5cc>)
   89d60:	681b      	ldr	r3, [r3, #0]
   89d62:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   89d66:	f040 8099 	bne.w	89e9c <Heat_Correction+0x61c>
	{
	  if(TS2_Stable)
   89d6a:	4b43      	ldr	r3, [pc, #268]	; (89e78 <Heat_Correction+0x5f8>)
   89d6c:	781b      	ldrb	r3, [r3, #0]
   89d6e:	2b00      	cmp	r3, #0
   89d70:	f000 8094 	beq.w	89e9c <Heat_Correction+0x61c>
	  {
		//Now TS2 is not rapidly increasing and is at certain Temperature +/- 2 deg. 
		//Start tuning T2 to be at 37 +/- 2 deg.
		if ( ((Tmp2Val - Prescribed_T2) > 1) || ((Prescribed_T2 - Tmp2Val) > 1) )
   89d74:	4b36      	ldr	r3, [pc, #216]	; (89e50 <Heat_Correction+0x5d0>)
   89d76:	6819      	ldr	r1, [r3, #0]
   89d78:	4b37      	ldr	r3, [pc, #220]	; (89e58 <Heat_Correction+0x5d8>)
   89d7a:	681a      	ldr	r2, [r3, #0]
   89d7c:	4b3f      	ldr	r3, [pc, #252]	; (89e7c <Heat_Correction+0x5fc>)
   89d7e:	4608      	mov	r0, r1
   89d80:	4611      	mov	r1, r2
   89d82:	4798      	blx	r3
   89d84:	4603      	mov	r3, r0
   89d86:	461a      	mov	r2, r3
   89d88:	4b3d      	ldr	r3, [pc, #244]	; (89e80 <Heat_Correction+0x600>)
   89d8a:	4610      	mov	r0, r2
   89d8c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   89d90:	4798      	blx	r3
   89d92:	4603      	mov	r3, r0
   89d94:	2b00      	cmp	r3, #0
   89d96:	d111      	bne.n	89dbc <Heat_Correction+0x53c>
   89d98:	4b2f      	ldr	r3, [pc, #188]	; (89e58 <Heat_Correction+0x5d8>)
   89d9a:	6819      	ldr	r1, [r3, #0]
   89d9c:	4b2c      	ldr	r3, [pc, #176]	; (89e50 <Heat_Correction+0x5d0>)
   89d9e:	681a      	ldr	r2, [r3, #0]
   89da0:	4b36      	ldr	r3, [pc, #216]	; (89e7c <Heat_Correction+0x5fc>)
   89da2:	4608      	mov	r0, r1
   89da4:	4611      	mov	r1, r2
   89da6:	4798      	blx	r3
   89da8:	4603      	mov	r3, r0
   89daa:	461a      	mov	r2, r3
   89dac:	4b34      	ldr	r3, [pc, #208]	; (89e80 <Heat_Correction+0x600>)
   89dae:	4610      	mov	r0, r2
   89db0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   89db4:	4798      	blx	r3
   89db6:	4603      	mov	r3, r0
   89db8:	2b00      	cmp	r3, #0
   89dba:	d002      	beq.n	89dc2 <Heat_Correction+0x542>
		{
			Coarse_DutyCorrection(); 
   89dbc:	4b22      	ldr	r3, [pc, #136]	; (89e48 <Heat_Correction+0x5c8>)
   89dbe:	4798      	blx	r3
   89dc0:	e06c      	b.n	89e9c <Heat_Correction+0x61c>
		}
		else 
		{
			//T2 is stable and within 37 +/- 2 deg, check for T3 stability and apply fine correction
			TS3_Stable = Check_4_TS3_Stable();
   89dc2:	4b30      	ldr	r3, [pc, #192]	; (89e84 <Heat_Correction+0x604>)
   89dc4:	4798      	blx	r3
   89dc6:	4603      	mov	r3, r0
   89dc8:	461a      	mov	r2, r3
   89dca:	4b2f      	ldr	r3, [pc, #188]	; (89e88 <Heat_Correction+0x608>)
   89dcc:	701a      	strb	r2, [r3, #0]
			if(TS3_Stable)
   89dce:	4b2e      	ldr	r3, [pc, #184]	; (89e88 <Heat_Correction+0x608>)
   89dd0:	781b      	ldrb	r3, [r3, #0]
   89dd2:	2b00      	cmp	r3, #0
   89dd4:	d062      	beq.n	89e9c <Heat_Correction+0x61c>
			{
			   if ( ((Tmp3Val - Prescribed_T3) > 0.1) || ((Prescribed_T3 - Tmp3Val) > 0.1) )
   89dd6:	4b24      	ldr	r3, [pc, #144]	; (89e68 <Heat_Correction+0x5e8>)
   89dd8:	6819      	ldr	r1, [r3, #0]
   89dda:	4b2c      	ldr	r3, [pc, #176]	; (89e8c <Heat_Correction+0x60c>)
   89ddc:	681a      	ldr	r2, [r3, #0]
   89dde:	4b27      	ldr	r3, [pc, #156]	; (89e7c <Heat_Correction+0x5fc>)
   89de0:	4608      	mov	r0, r1
   89de2:	4611      	mov	r1, r2
   89de4:	4798      	blx	r3
   89de6:	4603      	mov	r3, r0
   89de8:	461a      	mov	r2, r3
   89dea:	4b1a      	ldr	r3, [pc, #104]	; (89e54 <Heat_Correction+0x5d4>)
   89dec:	4610      	mov	r0, r2
   89dee:	4798      	blx	r3
   89df0:	4602      	mov	r2, r0
   89df2:	460b      	mov	r3, r1
   89df4:	4c26      	ldr	r4, [pc, #152]	; (89e90 <Heat_Correction+0x610>)
   89df6:	4610      	mov	r0, r2
   89df8:	4619      	mov	r1, r3
   89dfa:	a311      	add	r3, pc, #68	; (adr r3, 89e40 <Heat_Correction+0x5c0>)
   89dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
   89e00:	47a0      	blx	r4
   89e02:	4603      	mov	r3, r0
   89e04:	2b00      	cmp	r3, #0
   89e06:	d147      	bne.n	89e98 <Heat_Correction+0x618>
   89e08:	4b20      	ldr	r3, [pc, #128]	; (89e8c <Heat_Correction+0x60c>)
   89e0a:	6819      	ldr	r1, [r3, #0]
   89e0c:	4b16      	ldr	r3, [pc, #88]	; (89e68 <Heat_Correction+0x5e8>)
   89e0e:	681a      	ldr	r2, [r3, #0]
   89e10:	4b1a      	ldr	r3, [pc, #104]	; (89e7c <Heat_Correction+0x5fc>)
   89e12:	4608      	mov	r0, r1
   89e14:	4611      	mov	r1, r2
   89e16:	4798      	blx	r3
   89e18:	4603      	mov	r3, r0
   89e1a:	461a      	mov	r2, r3
   89e1c:	4b0d      	ldr	r3, [pc, #52]	; (89e54 <Heat_Correction+0x5d4>)
   89e1e:	4610      	mov	r0, r2
   89e20:	4798      	blx	r3
   89e22:	4602      	mov	r2, r0
   89e24:	460b      	mov	r3, r1
   89e26:	4c1a      	ldr	r4, [pc, #104]	; (89e90 <Heat_Correction+0x610>)
   89e28:	4610      	mov	r0, r2
   89e2a:	4619      	mov	r1, r3
   89e2c:	a304      	add	r3, pc, #16	; (adr r3, 89e40 <Heat_Correction+0x5c0>)
   89e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
   89e32:	47a0      	blx	r4
   89e34:	4603      	mov	r3, r0
   89e36:	2b00      	cmp	r3, #0
   89e38:	d12e      	bne.n	89e98 <Heat_Correction+0x618>
   89e3a:	e02f      	b.n	89e9c <Heat_Correction+0x61c>
   89e3c:	f3af 8000 	nop.w
   89e40:	9999999a 	.word	0x9999999a
   89e44:	3fb99999 	.word	0x3fb99999
   89e48:	0008a329 	.word	0x0008a329
   89e4c:	20070558 	.word	0x20070558
   89e50:	200719c0 	.word	0x200719c0
   89e54:	000a6031 	.word	0x000a6031
   89e58:	20070550 	.word	0x20070550
   89e5c:	000a5d75 	.word	0x000a5d75
   89e60:	3fe00000 	.word	0x3fe00000
   89e64:	000a65e5 	.word	0x000a65e5
   89e68:	200719c4 	.word	0x200719c4
   89e6c:	000a6ca9 	.word	0x000a6ca9
   89e70:	200719c8 	.word	0x200719c8
   89e74:	cccccccd 	.word	0xcccccccd
   89e78:	2007218c 	.word	0x2007218c
   89e7c:	000a6745 	.word	0x000a6745
   89e80:	000a6cd1 	.word	0x000a6cd1
   89e84:	0008a081 	.word	0x0008a081
   89e88:	20072195 	.word	0x20072195
   89e8c:	20070554 	.word	0x20070554
   89e90:	000a65f9 	.word	0x000a65f9
   89e94:	0008aca9 	.word	0x0008aca9
			      Fine_DutyCorrection();
   89e98:	4b3d      	ldr	r3, [pc, #244]	; (89f90 <Heat_Correction+0x710>)
   89e9a:	4798      	blx	r3
	 {
	  // TS2 not stable, wait for some more time
	  // Same avg_duty is being applied, no change till stability not achieved
	 }	
	}
	if (SYSTEM_FLOW == 800)
   89e9c:	4b3d      	ldr	r3, [pc, #244]	; (89f94 <Heat_Correction+0x714>)
   89e9e:	681b      	ldr	r3, [r3, #0]
   89ea0:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   89ea4:	d169      	bne.n	89f7a <Heat_Correction+0x6fa>
	{
		
		if(TS2_Stable)
   89ea6:	4b3c      	ldr	r3, [pc, #240]	; (89f98 <Heat_Correction+0x718>)
   89ea8:	781b      	ldrb	r3, [r3, #0]
   89eaa:	2b00      	cmp	r3, #0
   89eac:	d065      	beq.n	89f7a <Heat_Correction+0x6fa>
		{
			//Now TS2 is not rapidly increasing and is at certain Temperature +/- 2 deg.
			//Start tuning T2 to be at 37 +/- 2 deg.
			if ( ((Tmp2Val - Prescribed_T2) > 1) || ((Prescribed_T2 - Tmp2Val) > 1) )
   89eae:	4b3b      	ldr	r3, [pc, #236]	; (89f9c <Heat_Correction+0x71c>)
   89eb0:	6819      	ldr	r1, [r3, #0]
   89eb2:	4b3b      	ldr	r3, [pc, #236]	; (89fa0 <Heat_Correction+0x720>)
   89eb4:	681a      	ldr	r2, [r3, #0]
   89eb6:	4b3b      	ldr	r3, [pc, #236]	; (89fa4 <Heat_Correction+0x724>)
   89eb8:	4608      	mov	r0, r1
   89eba:	4611      	mov	r1, r2
   89ebc:	4798      	blx	r3
   89ebe:	4603      	mov	r3, r0
   89ec0:	461a      	mov	r2, r3
   89ec2:	4b39      	ldr	r3, [pc, #228]	; (89fa8 <Heat_Correction+0x728>)
   89ec4:	4610      	mov	r0, r2
   89ec6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   89eca:	4798      	blx	r3
   89ecc:	4603      	mov	r3, r0
   89ece:	2b00      	cmp	r3, #0
   89ed0:	d111      	bne.n	89ef6 <Heat_Correction+0x676>
   89ed2:	4b33      	ldr	r3, [pc, #204]	; (89fa0 <Heat_Correction+0x720>)
   89ed4:	6819      	ldr	r1, [r3, #0]
   89ed6:	4b31      	ldr	r3, [pc, #196]	; (89f9c <Heat_Correction+0x71c>)
   89ed8:	681a      	ldr	r2, [r3, #0]
   89eda:	4b32      	ldr	r3, [pc, #200]	; (89fa4 <Heat_Correction+0x724>)
   89edc:	4608      	mov	r0, r1
   89ede:	4611      	mov	r1, r2
   89ee0:	4798      	blx	r3
   89ee2:	4603      	mov	r3, r0
   89ee4:	461a      	mov	r2, r3
   89ee6:	4b30      	ldr	r3, [pc, #192]	; (89fa8 <Heat_Correction+0x728>)
   89ee8:	4610      	mov	r0, r2
   89eea:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   89eee:	4798      	blx	r3
   89ef0:	4603      	mov	r3, r0
   89ef2:	2b00      	cmp	r3, #0
   89ef4:	d002      	beq.n	89efc <Heat_Correction+0x67c>
			{
				Coarse_DutyCorrection();
   89ef6:	4b2d      	ldr	r3, [pc, #180]	; (89fac <Heat_Correction+0x72c>)
   89ef8:	4798      	blx	r3
   89efa:	e03e      	b.n	89f7a <Heat_Correction+0x6fa>
			}
			else
			{
				//T2 is stable and within 37 +/- 2 deg, check for T3 stability and apply fine correction
				TS3_Stable = Check_4_TS3_Stable();
   89efc:	4b2c      	ldr	r3, [pc, #176]	; (89fb0 <Heat_Correction+0x730>)
   89efe:	4798      	blx	r3
   89f00:	4603      	mov	r3, r0
   89f02:	461a      	mov	r2, r3
   89f04:	4b2b      	ldr	r3, [pc, #172]	; (89fb4 <Heat_Correction+0x734>)
   89f06:	701a      	strb	r2, [r3, #0]
				if(TS3_Stable)
   89f08:	4b2a      	ldr	r3, [pc, #168]	; (89fb4 <Heat_Correction+0x734>)
   89f0a:	781b      	ldrb	r3, [r3, #0]
   89f0c:	2b00      	cmp	r3, #0
   89f0e:	d034      	beq.n	89f7a <Heat_Correction+0x6fa>
				{
					if ( ((Tmp3Val - Prescribed_T3) > 0.1) || ((Prescribed_T3 - Tmp3Val) > 0.1) )
   89f10:	4b29      	ldr	r3, [pc, #164]	; (89fb8 <Heat_Correction+0x738>)
   89f12:	6819      	ldr	r1, [r3, #0]
   89f14:	4b29      	ldr	r3, [pc, #164]	; (89fbc <Heat_Correction+0x73c>)
   89f16:	681a      	ldr	r2, [r3, #0]
   89f18:	4b22      	ldr	r3, [pc, #136]	; (89fa4 <Heat_Correction+0x724>)
   89f1a:	4608      	mov	r0, r1
   89f1c:	4611      	mov	r1, r2
   89f1e:	4798      	blx	r3
   89f20:	4603      	mov	r3, r0
   89f22:	461a      	mov	r2, r3
   89f24:	4b26      	ldr	r3, [pc, #152]	; (89fc0 <Heat_Correction+0x740>)
   89f26:	4610      	mov	r0, r2
   89f28:	4798      	blx	r3
   89f2a:	4602      	mov	r2, r0
   89f2c:	460b      	mov	r3, r1
   89f2e:	4c25      	ldr	r4, [pc, #148]	; (89fc4 <Heat_Correction+0x744>)
   89f30:	4610      	mov	r0, r2
   89f32:	4619      	mov	r1, r3
   89f34:	a314      	add	r3, pc, #80	; (adr r3, 89f88 <Heat_Correction+0x708>)
   89f36:	e9d3 2300 	ldrd	r2, r3, [r3]
   89f3a:	47a0      	blx	r4
   89f3c:	4603      	mov	r3, r0
   89f3e:	2b00      	cmp	r3, #0
   89f40:	d119      	bne.n	89f76 <Heat_Correction+0x6f6>
   89f42:	4b1e      	ldr	r3, [pc, #120]	; (89fbc <Heat_Correction+0x73c>)
   89f44:	6819      	ldr	r1, [r3, #0]
   89f46:	4b1c      	ldr	r3, [pc, #112]	; (89fb8 <Heat_Correction+0x738>)
   89f48:	681a      	ldr	r2, [r3, #0]
   89f4a:	4b16      	ldr	r3, [pc, #88]	; (89fa4 <Heat_Correction+0x724>)
   89f4c:	4608      	mov	r0, r1
   89f4e:	4611      	mov	r1, r2
   89f50:	4798      	blx	r3
   89f52:	4603      	mov	r3, r0
   89f54:	461a      	mov	r2, r3
   89f56:	4b1a      	ldr	r3, [pc, #104]	; (89fc0 <Heat_Correction+0x740>)
   89f58:	4610      	mov	r0, r2
   89f5a:	4798      	blx	r3
   89f5c:	4602      	mov	r2, r0
   89f5e:	460b      	mov	r3, r1
   89f60:	4c18      	ldr	r4, [pc, #96]	; (89fc4 <Heat_Correction+0x744>)
   89f62:	4610      	mov	r0, r2
   89f64:	4619      	mov	r1, r3
   89f66:	a308      	add	r3, pc, #32	; (adr r3, 89f88 <Heat_Correction+0x708>)
   89f68:	e9d3 2300 	ldrd	r2, r3, [r3]
   89f6c:	47a0      	blx	r4
   89f6e:	4603      	mov	r3, r0
   89f70:	2b00      	cmp	r3, #0
   89f72:	d100      	bne.n	89f76 <Heat_Correction+0x6f6>
   89f74:	e001      	b.n	89f7a <Heat_Correction+0x6fa>
					Fine_DutyCorrection();
   89f76:	4b06      	ldr	r3, [pc, #24]	; (89f90 <Heat_Correction+0x710>)
   89f78:	4798      	blx	r3
			// TS2 not stable, wait for some more time
			// Same avg_duty is being applied, no change till stability not achieved
		}
	}

}
   89f7a:	4618      	mov	r0, r3
   89f7c:	370c      	adds	r7, #12
   89f7e:	46bd      	mov	sp, r7
   89f80:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}
   89f84:	f3af 8000 	nop.w
   89f88:	9999999a 	.word	0x9999999a
   89f8c:	3fb99999 	.word	0x3fb99999
   89f90:	0008aca9 	.word	0x0008aca9
   89f94:	20070558 	.word	0x20070558
   89f98:	2007218c 	.word	0x2007218c
   89f9c:	200719c0 	.word	0x200719c0
   89fa0:	20070550 	.word	0x20070550
   89fa4:	000a6745 	.word	0x000a6745
   89fa8:	000a6cd1 	.word	0x000a6cd1
   89fac:	0008a329 	.word	0x0008a329
   89fb0:	0008a081 	.word	0x0008a081
   89fb4:	20072195 	.word	0x20072195
   89fb8:	200719c4 	.word	0x200719c4
   89fbc:	20070554 	.word	0x20070554
   89fc0:	000a6031 	.word	0x000a6031
   89fc4:	000a65f9 	.word	0x000a65f9

00089fc8 <Check_4_TS2_Stable>:

bool Check_4_TS2_Stable()
{
   89fc8:	b580      	push	{r7, lr}
   89fca:	b082      	sub	sp, #8
   89fcc:	af00      	add	r7, sp, #0
	bool ts2_stable = false;
   89fce:	2300      	movs	r3, #0
   89fd0:	71fb      	strb	r3, [r7, #7]
	
	if (TS2_stability_count >= wait_4_TS2Stability) // Based on the profiling curve, it's assumed after wait_4_stability secs,
   89fd2:	4b23      	ldr	r3, [pc, #140]	; (8a060 <Check_4_TS2_Stable+0x98>)
   89fd4:	881a      	ldrh	r2, [r3, #0]
   89fd6:	4b23      	ldr	r3, [pc, #140]	; (8a064 <Check_4_TS2_Stable+0x9c>)
   89fd8:	881b      	ldrh	r3, [r3, #0]
   89fda:	429a      	cmp	r2, r3
   89fdc:	d33a      	bcc.n	8a054 <Check_4_TS2_Stable+0x8c>
	// TS2 is not increasing sharply
	{
		if (Tmp2Val_prev == Tmp2Val)
   89fde:	4b22      	ldr	r3, [pc, #136]	; (8a068 <Check_4_TS2_Stable+0xa0>)
   89fe0:	6819      	ldr	r1, [r3, #0]
   89fe2:	4b22      	ldr	r3, [pc, #136]	; (8a06c <Check_4_TS2_Stable+0xa4>)
   89fe4:	681a      	ldr	r2, [r3, #0]
   89fe6:	4b22      	ldr	r3, [pc, #136]	; (8a070 <Check_4_TS2_Stable+0xa8>)
   89fe8:	4608      	mov	r0, r1
   89fea:	4611      	mov	r1, r2
   89fec:	4798      	blx	r3
   89fee:	4603      	mov	r3, r0
   89ff0:	2b00      	cmp	r3, #0
   89ff2:	d002      	beq.n	89ffa <Check_4_TS2_Stable+0x32>
		{
			ts2_stable = true;
   89ff4:	2301      	movs	r3, #1
   89ff6:	71fb      	strb	r3, [r7, #7]
   89ff8:	e025      	b.n	8a046 <Check_4_TS2_Stable+0x7e>
			
		}
		else if(((Tmp2Val - Tmp2Val_prev) <= 2) || ((Tmp2Val_prev - Tmp2Val) <= 2))
   89ffa:	4b1c      	ldr	r3, [pc, #112]	; (8a06c <Check_4_TS2_Stable+0xa4>)
   89ffc:	6819      	ldr	r1, [r3, #0]
   89ffe:	4b1a      	ldr	r3, [pc, #104]	; (8a068 <Check_4_TS2_Stable+0xa0>)
   8a000:	681a      	ldr	r2, [r3, #0]
   8a002:	4b1c      	ldr	r3, [pc, #112]	; (8a074 <Check_4_TS2_Stable+0xac>)
   8a004:	4608      	mov	r0, r1
   8a006:	4611      	mov	r1, r2
   8a008:	4798      	blx	r3
   8a00a:	4603      	mov	r3, r0
   8a00c:	461a      	mov	r2, r3
   8a00e:	4b1a      	ldr	r3, [pc, #104]	; (8a078 <Check_4_TS2_Stable+0xb0>)
   8a010:	4610      	mov	r0, r2
   8a012:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   8a016:	4798      	blx	r3
   8a018:	4603      	mov	r3, r0
   8a01a:	2b00      	cmp	r3, #0
   8a01c:	d111      	bne.n	8a042 <Check_4_TS2_Stable+0x7a>
   8a01e:	4b12      	ldr	r3, [pc, #72]	; (8a068 <Check_4_TS2_Stable+0xa0>)
   8a020:	6819      	ldr	r1, [r3, #0]
   8a022:	4b12      	ldr	r3, [pc, #72]	; (8a06c <Check_4_TS2_Stable+0xa4>)
   8a024:	681a      	ldr	r2, [r3, #0]
   8a026:	4b13      	ldr	r3, [pc, #76]	; (8a074 <Check_4_TS2_Stable+0xac>)
   8a028:	4608      	mov	r0, r1
   8a02a:	4611      	mov	r1, r2
   8a02c:	4798      	blx	r3
   8a02e:	4603      	mov	r3, r0
   8a030:	461a      	mov	r2, r3
   8a032:	4b11      	ldr	r3, [pc, #68]	; (8a078 <Check_4_TS2_Stable+0xb0>)
   8a034:	4610      	mov	r0, r2
   8a036:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   8a03a:	4798      	blx	r3
   8a03c:	4603      	mov	r3, r0
   8a03e:	2b00      	cmp	r3, #0
   8a040:	d001      	beq.n	8a046 <Check_4_TS2_Stable+0x7e>
		{
			ts2_stable = true;
   8a042:	2301      	movs	r3, #1
   8a044:	71fb      	strb	r3, [r7, #7]
		}
		wait_4_TS2Stability = post_stability_count;  // Sunil: to ensure new value if temp difference not in band and apply for next stability
   8a046:	4b0d      	ldr	r3, [pc, #52]	; (8a07c <Check_4_TS2_Stable+0xb4>)
   8a048:	881a      	ldrh	r2, [r3, #0]
   8a04a:	4b06      	ldr	r3, [pc, #24]	; (8a064 <Check_4_TS2_Stable+0x9c>)
   8a04c:	801a      	strh	r2, [r3, #0]
													// Count 240 = 2 mins, Count 120 = 1 min
													 // Gopal: 30
		TS2_stability_count = 0;
   8a04e:	4b04      	ldr	r3, [pc, #16]	; (8a060 <Check_4_TS2_Stable+0x98>)
   8a050:	2200      	movs	r2, #0
   8a052:	801a      	strh	r2, [r3, #0]
	}
	return ts2_stable;
   8a054:	79fb      	ldrb	r3, [r7, #7]
}
   8a056:	4618      	mov	r0, r3
   8a058:	3708      	adds	r7, #8
   8a05a:	46bd      	mov	sp, r7
   8a05c:	bd80      	pop	{r7, pc}
   8a05e:	bf00      	nop
   8a060:	200719cc 	.word	0x200719cc
   8a064:	20070548 	.word	0x20070548
   8a068:	200719d8 	.word	0x200719d8
   8a06c:	200719c0 	.word	0x200719c0
   8a070:	000a6c81 	.word	0x000a6c81
   8a074:	000a6745 	.word	0x000a6745
   8a078:	000a6ca9 	.word	0x000a6ca9
   8a07c:	200719d0 	.word	0x200719d0

0008a080 <Check_4_TS3_Stable>:

bool Check_4_TS3_Stable()
{
   8a080:	b580      	push	{r7, lr}
   8a082:	b082      	sub	sp, #8
   8a084:	af00      	add	r7, sp, #0
	bool ts3_stable = false;
   8a086:	2300      	movs	r3, #0
   8a088:	71fb      	strb	r3, [r7, #7]
	if (stability_count >= wait_4_stability) // Based on the profiling curve, it's assumed after wait_4_stability secs, 
   8a08a:	4b23      	ldr	r3, [pc, #140]	; (8a118 <Check_4_TS3_Stable+0x98>)
   8a08c:	881a      	ldrh	r2, [r3, #0]
   8a08e:	4b23      	ldr	r3, [pc, #140]	; (8a11c <Check_4_TS3_Stable+0x9c>)
   8a090:	881b      	ldrh	r3, [r3, #0]
   8a092:	429a      	cmp	r2, r3
   8a094:	d33a      	bcc.n	8a10c <Check_4_TS3_Stable+0x8c>
											 // TS3 is not increasing sharply
	{
		if (Tmp3Val_prev == Tmp3Val)
   8a096:	4b22      	ldr	r3, [pc, #136]	; (8a120 <Check_4_TS3_Stable+0xa0>)
   8a098:	6819      	ldr	r1, [r3, #0]
   8a09a:	4b22      	ldr	r3, [pc, #136]	; (8a124 <Check_4_TS3_Stable+0xa4>)
   8a09c:	681a      	ldr	r2, [r3, #0]
   8a09e:	4b22      	ldr	r3, [pc, #136]	; (8a128 <Check_4_TS3_Stable+0xa8>)
   8a0a0:	4608      	mov	r0, r1
   8a0a2:	4611      	mov	r1, r2
   8a0a4:	4798      	blx	r3
   8a0a6:	4603      	mov	r3, r0
   8a0a8:	2b00      	cmp	r3, #0
   8a0aa:	d002      	beq.n	8a0b2 <Check_4_TS3_Stable+0x32>
		{
			ts3_stable = true;
   8a0ac:	2301      	movs	r3, #1
   8a0ae:	71fb      	strb	r3, [r7, #7]
   8a0b0:	e025      	b.n	8a0fe <Check_4_TS3_Stable+0x7e>
			
		}
		else if(((Tmp3Val - Tmp3Val_prev) <= 2) || ((Tmp3Val_prev - Tmp3Val) <= 2))  
   8a0b2:	4b1c      	ldr	r3, [pc, #112]	; (8a124 <Check_4_TS3_Stable+0xa4>)
   8a0b4:	6819      	ldr	r1, [r3, #0]
   8a0b6:	4b1a      	ldr	r3, [pc, #104]	; (8a120 <Check_4_TS3_Stable+0xa0>)
   8a0b8:	681a      	ldr	r2, [r3, #0]
   8a0ba:	4b1c      	ldr	r3, [pc, #112]	; (8a12c <Check_4_TS3_Stable+0xac>)
   8a0bc:	4608      	mov	r0, r1
   8a0be:	4611      	mov	r1, r2
   8a0c0:	4798      	blx	r3
   8a0c2:	4603      	mov	r3, r0
   8a0c4:	461a      	mov	r2, r3
   8a0c6:	4b1a      	ldr	r3, [pc, #104]	; (8a130 <Check_4_TS3_Stable+0xb0>)
   8a0c8:	4610      	mov	r0, r2
   8a0ca:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   8a0ce:	4798      	blx	r3
   8a0d0:	4603      	mov	r3, r0
   8a0d2:	2b00      	cmp	r3, #0
   8a0d4:	d111      	bne.n	8a0fa <Check_4_TS3_Stable+0x7a>
   8a0d6:	4b12      	ldr	r3, [pc, #72]	; (8a120 <Check_4_TS3_Stable+0xa0>)
   8a0d8:	6819      	ldr	r1, [r3, #0]
   8a0da:	4b12      	ldr	r3, [pc, #72]	; (8a124 <Check_4_TS3_Stable+0xa4>)
   8a0dc:	681a      	ldr	r2, [r3, #0]
   8a0de:	4b13      	ldr	r3, [pc, #76]	; (8a12c <Check_4_TS3_Stable+0xac>)
   8a0e0:	4608      	mov	r0, r1
   8a0e2:	4611      	mov	r1, r2
   8a0e4:	4798      	blx	r3
   8a0e6:	4603      	mov	r3, r0
   8a0e8:	461a      	mov	r2, r3
   8a0ea:	4b11      	ldr	r3, [pc, #68]	; (8a130 <Check_4_TS3_Stable+0xb0>)
   8a0ec:	4610      	mov	r0, r2
   8a0ee:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   8a0f2:	4798      	blx	r3
   8a0f4:	4603      	mov	r3, r0
   8a0f6:	2b00      	cmp	r3, #0
   8a0f8:	d001      	beq.n	8a0fe <Check_4_TS3_Stable+0x7e>
		{
			ts3_stable = true;
   8a0fa:	2301      	movs	r3, #1
   8a0fc:	71fb      	strb	r3, [r7, #7]
		}
		wait_4_stability = TS3_post_stability_count;   // Sunil: to ensure new value if temp difference not in band and apply for next stability
   8a0fe:	4b0d      	ldr	r3, [pc, #52]	; (8a134 <Check_4_TS3_Stable+0xb4>)
   8a100:	881a      	ldrh	r2, [r3, #0]
   8a102:	4b06      	ldr	r3, [pc, #24]	; (8a11c <Check_4_TS3_Stable+0x9c>)
   8a104:	801a      	strh	r2, [r3, #0]
		                                             // Gopal: 60
								 // Count 240 = 2 mins, Count 120 = 1 min
		stability_count = 0;
   8a106:	4b04      	ldr	r3, [pc, #16]	; (8a118 <Check_4_TS3_Stable+0x98>)
   8a108:	2200      	movs	r2, #0
   8a10a:	801a      	strh	r2, [r3, #0]
	}
 return ts3_stable;
   8a10c:	79fb      	ldrb	r3, [r7, #7]
}
   8a10e:	4618      	mov	r0, r3
   8a110:	3708      	adds	r7, #8
   8a112:	46bd      	mov	sp, r7
   8a114:	bd80      	pop	{r7, pc}
   8a116:	bf00      	nop
   8a118:	200719ca 	.word	0x200719ca
   8a11c:	2007054a 	.word	0x2007054a
   8a120:	20072188 	.word	0x20072188
   8a124:	200719c4 	.word	0x200719c4
   8a128:	000a6c81 	.word	0x000a6c81
   8a12c:	000a6745 	.word	0x000a6745
   8a130:	000a6ca9 	.word	0x000a6ca9
   8a134:	200719d2 	.word	0x200719d2

0008a138 <Check_4_Neutralstability>:

bool Check_4_Neutralstability()
{
   8a138:	b590      	push	{r4, r7, lr}
   8a13a:	b083      	sub	sp, #12
   8a13c:	af00      	add	r7, sp, #0
		bool neuts3_stable = false;
   8a13e:	2300      	movs	r3, #0
   8a140:	71fb      	strb	r3, [r7, #7]
	//wait_4_TS3NeuStability=240, Neupost_stability_count = 120,TS3_neustability_count
	
	if (TS3_neustability_count >= wait_4_TS3NeuStability) 
   8a142:	4b2d      	ldr	r3, [pc, #180]	; (8a1f8 <Check_4_Neutralstability+0xc0>)
   8a144:	881a      	ldrh	r2, [r3, #0]
   8a146:	4b2d      	ldr	r3, [pc, #180]	; (8a1fc <Check_4_Neutralstability+0xc4>)
   8a148:	881b      	ldrh	r3, [r3, #0]
   8a14a:	429a      	cmp	r2, r3
   8a14c:	d348      	bcc.n	8a1e0 <Check_4_Neutralstability+0xa8>
	{
		if (Tmp3Val_prev == Tmp3Val)
   8a14e:	4b2c      	ldr	r3, [pc, #176]	; (8a200 <Check_4_Neutralstability+0xc8>)
   8a150:	6819      	ldr	r1, [r3, #0]
   8a152:	4b2c      	ldr	r3, [pc, #176]	; (8a204 <Check_4_Neutralstability+0xcc>)
   8a154:	681a      	ldr	r2, [r3, #0]
   8a156:	4b2c      	ldr	r3, [pc, #176]	; (8a208 <Check_4_Neutralstability+0xd0>)
   8a158:	4608      	mov	r0, r1
   8a15a:	4611      	mov	r1, r2
   8a15c:	4798      	blx	r3
   8a15e:	4603      	mov	r3, r0
   8a160:	2b00      	cmp	r3, #0
   8a162:	d002      	beq.n	8a16a <Check_4_Neutralstability+0x32>
		{
			neuts3_stable = true;
   8a164:	2301      	movs	r3, #1
   8a166:	71fb      	strb	r3, [r7, #7]
   8a168:	e033      	b.n	8a1d2 <Check_4_Neutralstability+0x9a>
			
		}
		else if(((Tmp3Val - Tmp3Val_prev) <= 0.1) || ((Tmp3Val_prev - Tmp3Val) <= 0.1))
   8a16a:	4b26      	ldr	r3, [pc, #152]	; (8a204 <Check_4_Neutralstability+0xcc>)
   8a16c:	6819      	ldr	r1, [r3, #0]
   8a16e:	4b24      	ldr	r3, [pc, #144]	; (8a200 <Check_4_Neutralstability+0xc8>)
   8a170:	681a      	ldr	r2, [r3, #0]
   8a172:	4b26      	ldr	r3, [pc, #152]	; (8a20c <Check_4_Neutralstability+0xd4>)
   8a174:	4608      	mov	r0, r1
   8a176:	4611      	mov	r1, r2
   8a178:	4798      	blx	r3
   8a17a:	4603      	mov	r3, r0
   8a17c:	461a      	mov	r2, r3
   8a17e:	4b24      	ldr	r3, [pc, #144]	; (8a210 <Check_4_Neutralstability+0xd8>)
   8a180:	4610      	mov	r0, r2
   8a182:	4798      	blx	r3
   8a184:	4602      	mov	r2, r0
   8a186:	460b      	mov	r3, r1
   8a188:	4c22      	ldr	r4, [pc, #136]	; (8a214 <Check_4_Neutralstability+0xdc>)
   8a18a:	4610      	mov	r0, r2
   8a18c:	4619      	mov	r1, r3
   8a18e:	a318      	add	r3, pc, #96	; (adr r3, 8a1f0 <Check_4_Neutralstability+0xb8>)
   8a190:	e9d3 2300 	ldrd	r2, r3, [r3]
   8a194:	47a0      	blx	r4
   8a196:	4603      	mov	r3, r0
   8a198:	2b00      	cmp	r3, #0
   8a19a:	d118      	bne.n	8a1ce <Check_4_Neutralstability+0x96>
   8a19c:	4b18      	ldr	r3, [pc, #96]	; (8a200 <Check_4_Neutralstability+0xc8>)
   8a19e:	6819      	ldr	r1, [r3, #0]
   8a1a0:	4b18      	ldr	r3, [pc, #96]	; (8a204 <Check_4_Neutralstability+0xcc>)
   8a1a2:	681a      	ldr	r2, [r3, #0]
   8a1a4:	4b19      	ldr	r3, [pc, #100]	; (8a20c <Check_4_Neutralstability+0xd4>)
   8a1a6:	4608      	mov	r0, r1
   8a1a8:	4611      	mov	r1, r2
   8a1aa:	4798      	blx	r3
   8a1ac:	4603      	mov	r3, r0
   8a1ae:	461a      	mov	r2, r3
   8a1b0:	4b17      	ldr	r3, [pc, #92]	; (8a210 <Check_4_Neutralstability+0xd8>)
   8a1b2:	4610      	mov	r0, r2
   8a1b4:	4798      	blx	r3
   8a1b6:	4602      	mov	r2, r0
   8a1b8:	460b      	mov	r3, r1
   8a1ba:	4c16      	ldr	r4, [pc, #88]	; (8a214 <Check_4_Neutralstability+0xdc>)
   8a1bc:	4610      	mov	r0, r2
   8a1be:	4619      	mov	r1, r3
   8a1c0:	a30b      	add	r3, pc, #44	; (adr r3, 8a1f0 <Check_4_Neutralstability+0xb8>)
   8a1c2:	e9d3 2300 	ldrd	r2, r3, [r3]
   8a1c6:	47a0      	blx	r4
   8a1c8:	4603      	mov	r3, r0
   8a1ca:	2b00      	cmp	r3, #0
   8a1cc:	d001      	beq.n	8a1d2 <Check_4_Neutralstability+0x9a>
		{
			neuts3_stable = true;
   8a1ce:	2301      	movs	r3, #1
   8a1d0:	71fb      	strb	r3, [r7, #7]
		}
		wait_4_TS3NeuStability = Neupost_stability_count;  
   8a1d2:	4b11      	ldr	r3, [pc, #68]	; (8a218 <Check_4_Neutralstability+0xe0>)
   8a1d4:	881a      	ldrh	r2, [r3, #0]
   8a1d6:	4b09      	ldr	r3, [pc, #36]	; (8a1fc <Check_4_Neutralstability+0xc4>)
   8a1d8:	801a      	strh	r2, [r3, #0]
		TS3_neustability_count = 0;
   8a1da:	4b07      	ldr	r3, [pc, #28]	; (8a1f8 <Check_4_Neutralstability+0xc0>)
   8a1dc:	2200      	movs	r2, #0
   8a1de:	801a      	strh	r2, [r3, #0]
	}
	return neuts3_stable;
   8a1e0:	79fb      	ldrb	r3, [r7, #7]
}
   8a1e2:	4618      	mov	r0, r3
   8a1e4:	370c      	adds	r7, #12
   8a1e6:	46bd      	mov	sp, r7
   8a1e8:	bd90      	pop	{r4, r7, pc}
   8a1ea:	bf00      	nop
   8a1ec:	f3af 8000 	nop.w
   8a1f0:	9999999a 	.word	0x9999999a
   8a1f4:	3fb99999 	.word	0x3fb99999
   8a1f8:	200719d4 	.word	0x200719d4
   8a1fc:	2007054c 	.word	0x2007054c
   8a200:	20072188 	.word	0x20072188
   8a204:	200719c4 	.word	0x200719c4
   8a208:	000a6c81 	.word	0x000a6c81
   8a20c:	000a6745 	.word	0x000a6745
   8a210:	000a6031 	.word	0x000a6031
   8a214:	000a65d1 	.word	0x000a65d1
   8a218:	2007054e 	.word	0x2007054e

0008a21c <Calculate_slope>:

void Calculate_slope ()
{
   8a21c:	b598      	push	{r3, r4, r7, lr}
   8a21e:	af00      	add	r7, sp, #0
	TS2_slope = 0;
   8a220:	4b10      	ldr	r3, [pc, #64]	; (8a264 <Calculate_slope+0x48>)
   8a222:	f04f 0200 	mov.w	r2, #0
   8a226:	601a      	str	r2, [r3, #0]
	
	// Since slope is calculated every 500msec, we should use 500ms_Count - count at storing Past_TS2.
	 TS2_slope = (Tmp2Val - Past_TS2) / (count_500ms - count_at_PastTS2); 
   8a228:	4b0f      	ldr	r3, [pc, #60]	; (8a268 <Calculate_slope+0x4c>)
   8a22a:	6819      	ldr	r1, [r3, #0]
   8a22c:	4b0f      	ldr	r3, [pc, #60]	; (8a26c <Calculate_slope+0x50>)
   8a22e:	681a      	ldr	r2, [r3, #0]
   8a230:	4b0f      	ldr	r3, [pc, #60]	; (8a270 <Calculate_slope+0x54>)
   8a232:	4608      	mov	r0, r1
   8a234:	4611      	mov	r1, r2
   8a236:	4798      	blx	r3
   8a238:	4603      	mov	r3, r0
   8a23a:	461c      	mov	r4, r3
   8a23c:	4b0d      	ldr	r3, [pc, #52]	; (8a274 <Calculate_slope+0x58>)
   8a23e:	881b      	ldrh	r3, [r3, #0]
   8a240:	461a      	mov	r2, r3
   8a242:	4b0d      	ldr	r3, [pc, #52]	; (8a278 <Calculate_slope+0x5c>)
   8a244:	881b      	ldrh	r3, [r3, #0]
   8a246:	1ad2      	subs	r2, r2, r3
   8a248:	4b0c      	ldr	r3, [pc, #48]	; (8a27c <Calculate_slope+0x60>)
   8a24a:	4610      	mov	r0, r2
   8a24c:	4798      	blx	r3
   8a24e:	4602      	mov	r2, r0
   8a250:	4b0b      	ldr	r3, [pc, #44]	; (8a280 <Calculate_slope+0x64>)
   8a252:	4620      	mov	r0, r4
   8a254:	4611      	mov	r1, r2
   8a256:	4798      	blx	r3
   8a258:	4603      	mov	r3, r0
   8a25a:	461a      	mov	r2, r3
   8a25c:	4b01      	ldr	r3, [pc, #4]	; (8a264 <Calculate_slope+0x48>)
   8a25e:	601a      	str	r2, [r3, #0]
}
   8a260:	bd98      	pop	{r3, r4, r7, pc}
   8a262:	bf00      	nop
   8a264:	200719e0 	.word	0x200719e0
   8a268:	200719c0 	.word	0x200719c0
   8a26c:	200719dc 	.word	0x200719dc
   8a270:	000a6745 	.word	0x000a6745
   8a274:	200719c8 	.word	0x200719c8
   8a278:	200719ce 	.word	0x200719ce
   8a27c:	000a68b1 	.word	0x000a68b1
   8a280:	000a6ac1 	.word	0x000a6ac1

0008a284 <Calculate_direction>:

Calculate_direction()
{
   8a284:	b580      	push	{r7, lr}
   8a286:	af00      	add	r7, sp, #0
	if((Tmp2Val - Tmp2Val_prev) > 0)
   8a288:	4b20      	ldr	r3, [pc, #128]	; (8a30c <Calculate_direction+0x88>)
   8a28a:	6819      	ldr	r1, [r3, #0]
   8a28c:	4b20      	ldr	r3, [pc, #128]	; (8a310 <Calculate_direction+0x8c>)
   8a28e:	681a      	ldr	r2, [r3, #0]
   8a290:	4b20      	ldr	r3, [pc, #128]	; (8a314 <Calculate_direction+0x90>)
   8a292:	4608      	mov	r0, r1
   8a294:	4611      	mov	r1, r2
   8a296:	4798      	blx	r3
   8a298:	4603      	mov	r3, r0
   8a29a:	461a      	mov	r2, r3
   8a29c:	4b1e      	ldr	r3, [pc, #120]	; (8a318 <Calculate_direction+0x94>)
   8a29e:	4610      	mov	r0, r2
   8a2a0:	f04f 0100 	mov.w	r1, #0
   8a2a4:	4798      	blx	r3
   8a2a6:	4603      	mov	r3, r0
   8a2a8:	2b00      	cmp	r3, #0
   8a2aa:	d003      	beq.n	8a2b4 <Calculate_direction+0x30>
	    TS2_Direction = UP;
   8a2ac:	4b1b      	ldr	r3, [pc, #108]	; (8a31c <Calculate_direction+0x98>)
   8a2ae:	2200      	movs	r2, #0
   8a2b0:	701a      	strb	r2, [r3, #0]
   8a2b2:	e02a      	b.n	8a30a <Calculate_direction+0x86>
	else if ((Tmp2Val_prev - Tmp2Val) > 0)
   8a2b4:	4b16      	ldr	r3, [pc, #88]	; (8a310 <Calculate_direction+0x8c>)
   8a2b6:	6819      	ldr	r1, [r3, #0]
   8a2b8:	4b14      	ldr	r3, [pc, #80]	; (8a30c <Calculate_direction+0x88>)
   8a2ba:	681a      	ldr	r2, [r3, #0]
   8a2bc:	4b15      	ldr	r3, [pc, #84]	; (8a314 <Calculate_direction+0x90>)
   8a2be:	4608      	mov	r0, r1
   8a2c0:	4611      	mov	r1, r2
   8a2c2:	4798      	blx	r3
   8a2c4:	4603      	mov	r3, r0
   8a2c6:	461a      	mov	r2, r3
   8a2c8:	4b13      	ldr	r3, [pc, #76]	; (8a318 <Calculate_direction+0x94>)
   8a2ca:	4610      	mov	r0, r2
   8a2cc:	f04f 0100 	mov.w	r1, #0
   8a2d0:	4798      	blx	r3
   8a2d2:	4603      	mov	r3, r0
   8a2d4:	2b00      	cmp	r3, #0
   8a2d6:	d003      	beq.n	8a2e0 <Calculate_direction+0x5c>
	    TS2_Direction = DOWN;
   8a2d8:	4b10      	ldr	r3, [pc, #64]	; (8a31c <Calculate_direction+0x98>)
   8a2da:	2201      	movs	r2, #1
   8a2dc:	701a      	strb	r2, [r3, #0]
   8a2de:	e014      	b.n	8a30a <Calculate_direction+0x86>
	else if ((Tmp2Val_prev - Tmp2Val) == 0)
   8a2e0:	4b0b      	ldr	r3, [pc, #44]	; (8a310 <Calculate_direction+0x8c>)
   8a2e2:	6819      	ldr	r1, [r3, #0]
   8a2e4:	4b09      	ldr	r3, [pc, #36]	; (8a30c <Calculate_direction+0x88>)
   8a2e6:	681a      	ldr	r2, [r3, #0]
   8a2e8:	4b0a      	ldr	r3, [pc, #40]	; (8a314 <Calculate_direction+0x90>)
   8a2ea:	4608      	mov	r0, r1
   8a2ec:	4611      	mov	r1, r2
   8a2ee:	4798      	blx	r3
   8a2f0:	4603      	mov	r3, r0
   8a2f2:	461a      	mov	r2, r3
   8a2f4:	4b0a      	ldr	r3, [pc, #40]	; (8a320 <Calculate_direction+0x9c>)
   8a2f6:	4610      	mov	r0, r2
   8a2f8:	f04f 0100 	mov.w	r1, #0
   8a2fc:	4798      	blx	r3
   8a2fe:	4603      	mov	r3, r0
   8a300:	2b00      	cmp	r3, #0
   8a302:	d002      	beq.n	8a30a <Calculate_direction+0x86>
		TS2_Direction = NUETRAL;
   8a304:	4b05      	ldr	r3, [pc, #20]	; (8a31c <Calculate_direction+0x98>)
   8a306:	2202      	movs	r2, #2
   8a308:	701a      	strb	r2, [r3, #0]

}
   8a30a:	bd80      	pop	{r7, pc}
   8a30c:	200719c0 	.word	0x200719c0
   8a310:	200719d8 	.word	0x200719d8
   8a314:	000a6745 	.word	0x000a6745
   8a318:	000a6cd1 	.word	0x000a6cd1
   8a31c:	20072196 	.word	0x20072196
   8a320:	000a6c81 	.word	0x000a6c81
   8a324:	00000000 	.word	0x00000000

0008a328 <Coarse_DutyCorrection>:

Coarse_DutyCorrection()                                  // to be fine tuned based on further testing
{
   8a328:	e92d 4398 	stmdb	sp!, {r3, r4, r7, r8, r9, lr}
   8a32c:	af00      	add	r7, sp, #0
	if (TS2_slope <= TS2_SLOPE1)
   8a32e:	4b9a      	ldr	r3, [pc, #616]	; (8a598 <Coarse_DutyCorrection+0x270>)
   8a330:	681a      	ldr	r2, [r3, #0]
   8a332:	4b9a      	ldr	r3, [pc, #616]	; (8a59c <Coarse_DutyCorrection+0x274>)
   8a334:	4610      	mov	r0, r2
   8a336:	4798      	blx	r3
   8a338:	4602      	mov	r2, r0
   8a33a:	460b      	mov	r3, r1
   8a33c:	4c98      	ldr	r4, [pc, #608]	; (8a5a0 <Coarse_DutyCorrection+0x278>)
   8a33e:	4610      	mov	r0, r2
   8a340:	4619      	mov	r1, r3
   8a342:	a38f      	add	r3, pc, #572	; (adr r3, 8a580 <Coarse_DutyCorrection+0x258>)
   8a344:	e9d3 2300 	ldrd	r2, r3, [r3]
   8a348:	47a0      	blx	r4
   8a34a:	4603      	mov	r3, r0
   8a34c:	2b00      	cmp	r3, #0
   8a34e:	d002      	beq.n	8a356 <Coarse_DutyCorrection+0x2e>
	{
		duty_count = 60;					//Sunil: Lesser the slope i.e rising very fast, so decrease count; Earlier value = 80, wrong
   8a350:	4b94      	ldr	r3, [pc, #592]	; (8a5a4 <Coarse_DutyCorrection+0x27c>)
   8a352:	223c      	movs	r2, #60	; 0x3c
   8a354:	701a      	strb	r2, [r3, #0]

	}
	if ((TS2_slope <= TS2_SLOPE2) && (TS2_slope > TS2_SLOPE1))
   8a356:	4b90      	ldr	r3, [pc, #576]	; (8a598 <Coarse_DutyCorrection+0x270>)
   8a358:	681a      	ldr	r2, [r3, #0]
   8a35a:	4b90      	ldr	r3, [pc, #576]	; (8a59c <Coarse_DutyCorrection+0x274>)
   8a35c:	4610      	mov	r0, r2
   8a35e:	4798      	blx	r3
   8a360:	4602      	mov	r2, r0
   8a362:	460b      	mov	r3, r1
   8a364:	4c8e      	ldr	r4, [pc, #568]	; (8a5a0 <Coarse_DutyCorrection+0x278>)
   8a366:	4610      	mov	r0, r2
   8a368:	4619      	mov	r1, r3
   8a36a:	a387      	add	r3, pc, #540	; (adr r3, 8a588 <Coarse_DutyCorrection+0x260>)
   8a36c:	e9d3 2300 	ldrd	r2, r3, [r3]
   8a370:	47a0      	blx	r4
   8a372:	4603      	mov	r3, r0
   8a374:	2b00      	cmp	r3, #0
   8a376:	d013      	beq.n	8a3a0 <Coarse_DutyCorrection+0x78>
   8a378:	4b87      	ldr	r3, [pc, #540]	; (8a598 <Coarse_DutyCorrection+0x270>)
   8a37a:	681a      	ldr	r2, [r3, #0]
   8a37c:	4b87      	ldr	r3, [pc, #540]	; (8a59c <Coarse_DutyCorrection+0x274>)
   8a37e:	4610      	mov	r0, r2
   8a380:	4798      	blx	r3
   8a382:	4602      	mov	r2, r0
   8a384:	460b      	mov	r3, r1
   8a386:	4c88      	ldr	r4, [pc, #544]	; (8a5a8 <Coarse_DutyCorrection+0x280>)
   8a388:	4610      	mov	r0, r2
   8a38a:	4619      	mov	r1, r3
   8a38c:	a37c      	add	r3, pc, #496	; (adr r3, 8a580 <Coarse_DutyCorrection+0x258>)
   8a38e:	e9d3 2300 	ldrd	r2, r3, [r3]
   8a392:	47a0      	blx	r4
   8a394:	4603      	mov	r3, r0
   8a396:	2b00      	cmp	r3, #0
   8a398:	d002      	beq.n	8a3a0 <Coarse_DutyCorrection+0x78>
	{
		duty_count = 40;
   8a39a:	4b82      	ldr	r3, [pc, #520]	; (8a5a4 <Coarse_DutyCorrection+0x27c>)
   8a39c:	2228      	movs	r2, #40	; 0x28
   8a39e:	701a      	strb	r2, [r3, #0]

	}
	if (TS2_slope >= TS2_SLOPE2)
   8a3a0:	4b7d      	ldr	r3, [pc, #500]	; (8a598 <Coarse_DutyCorrection+0x270>)
   8a3a2:	681a      	ldr	r2, [r3, #0]
   8a3a4:	4b7d      	ldr	r3, [pc, #500]	; (8a59c <Coarse_DutyCorrection+0x274>)
   8a3a6:	4610      	mov	r0, r2
   8a3a8:	4798      	blx	r3
   8a3aa:	4602      	mov	r2, r0
   8a3ac:	460b      	mov	r3, r1
   8a3ae:	4c7f      	ldr	r4, [pc, #508]	; (8a5ac <Coarse_DutyCorrection+0x284>)
   8a3b0:	4610      	mov	r0, r2
   8a3b2:	4619      	mov	r1, r3
   8a3b4:	a374      	add	r3, pc, #464	; (adr r3, 8a588 <Coarse_DutyCorrection+0x260>)
   8a3b6:	e9d3 2300 	ldrd	r2, r3, [r3]
   8a3ba:	47a0      	blx	r4
   8a3bc:	4603      	mov	r3, r0
   8a3be:	2b00      	cmp	r3, #0
   8a3c0:	d002      	beq.n	8a3c8 <Coarse_DutyCorrection+0xa0>
	{
		duty_count = 8;
   8a3c2:	4b78      	ldr	r3, [pc, #480]	; (8a5a4 <Coarse_DutyCorrection+0x27c>)
   8a3c4:	2208      	movs	r2, #8
   8a3c6:	701a      	strb	r2, [r3, #0]
	
	}
	
	if (SYSTEM_FLOW == 800)
   8a3c8:	4b79      	ldr	r3, [pc, #484]	; (8a5b0 <Coarse_DutyCorrection+0x288>)
   8a3ca:	681b      	ldr	r3, [r3, #0]
   8a3cc:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   8a3d0:	f040 8150 	bne.w	8a674 <Coarse_DutyCorrection+0x34c>
	{
		if ((TS2_Direction == UP)  && (Tmp2Val >= (Prescribed_T2+4)) )   // if direction is upward restrict correction if TS2 not yet 39
   8a3d4:	4b77      	ldr	r3, [pc, #476]	; (8a5b4 <Coarse_DutyCorrection+0x28c>)
   8a3d6:	781b      	ldrb	r3, [r3, #0]
   8a3d8:	2b00      	cmp	r3, #0
   8a3da:	d128      	bne.n	8a42e <Coarse_DutyCorrection+0x106>
   8a3dc:	4b76      	ldr	r3, [pc, #472]	; (8a5b8 <Coarse_DutyCorrection+0x290>)
   8a3de:	681a      	ldr	r2, [r3, #0]
   8a3e0:	4b76      	ldr	r3, [pc, #472]	; (8a5bc <Coarse_DutyCorrection+0x294>)
   8a3e2:	4610      	mov	r0, r2
   8a3e4:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
   8a3e8:	4798      	blx	r3
   8a3ea:	4603      	mov	r3, r0
   8a3ec:	4619      	mov	r1, r3
   8a3ee:	4b74      	ldr	r3, [pc, #464]	; (8a5c0 <Coarse_DutyCorrection+0x298>)
   8a3f0:	681a      	ldr	r2, [r3, #0]
   8a3f2:	4b74      	ldr	r3, [pc, #464]	; (8a5c4 <Coarse_DutyCorrection+0x29c>)
   8a3f4:	4608      	mov	r0, r1
   8a3f6:	4611      	mov	r1, r2
   8a3f8:	4798      	blx	r3
   8a3fa:	4603      	mov	r3, r0
   8a3fc:	2b00      	cmp	r3, #0
   8a3fe:	d016      	beq.n	8a42e <Coarse_DutyCorrection+0x106>
		{													// Prescribed_T2 = 37 ; changed from 39 25071977
			
			avg_duty = avg_duty - duty_count;
   8a400:	4b71      	ldr	r3, [pc, #452]	; (8a5c8 <Coarse_DutyCorrection+0x2a0>)
   8a402:	881b      	ldrh	r3, [r3, #0]
   8a404:	b29a      	uxth	r2, r3
   8a406:	4b67      	ldr	r3, [pc, #412]	; (8a5a4 <Coarse_DutyCorrection+0x27c>)
   8a408:	781b      	ldrb	r3, [r3, #0]
   8a40a:	b29b      	uxth	r3, r3
   8a40c:	1ad3      	subs	r3, r2, r3
   8a40e:	b29b      	uxth	r3, r3
   8a410:	b29a      	uxth	r2, r3
   8a412:	4b6d      	ldr	r3, [pc, #436]	; (8a5c8 <Coarse_DutyCorrection+0x2a0>)
   8a414:	801a      	strh	r2, [r3, #0]
			
			if((avg_duty <= 1000) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   8a416:	4b6c      	ldr	r3, [pc, #432]	; (8a5c8 <Coarse_DutyCorrection+0x2a0>)
   8a418:	881b      	ldrh	r3, [r3, #0]
   8a41a:	b21b      	sxth	r3, r3
   8a41c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   8a420:	dc04      	bgt.n	8a42c <Coarse_DutyCorrection+0x104>
			{
				avg_duty = 1800;    // avoiding negATIVE values for the avg duty, which shouldnt happen in regular run
   8a422:	4b69      	ldr	r3, [pc, #420]	; (8a5c8 <Coarse_DutyCorrection+0x2a0>)
   8a424:	f44f 62e1 	mov.w	r2, #1800	; 0x708
   8a428:	801a      	strh	r2, [r3, #0]
		if ((TS2_Direction == UP)  && (Tmp2Val >= (Prescribed_T2+4)) )   // if direction is upward restrict correction if TS2 not yet 39
		{													// Prescribed_T2 = 37 ; changed from 39 25071977
			
			avg_duty = avg_duty - duty_count;
			
			if((avg_duty <= 1000) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   8a42a:	e122      	b.n	8a672 <Coarse_DutyCorrection+0x34a>
   8a42c:	e121      	b.n	8a672 <Coarse_DutyCorrection+0x34a>
			{
				avg_duty = 1800;    // avoiding negATIVE values for the avg duty, which shouldnt happen in regular run
			}
		}
		else if ((TS2_Direction == UP)  && ((Tmp2Val >= (Prescribed_T2+2.5)) && (Tmp3Val <= Prescribed_T3+0.1)))
   8a42e:	4b61      	ldr	r3, [pc, #388]	; (8a5b4 <Coarse_DutyCorrection+0x28c>)
   8a430:	781b      	ldrb	r3, [r3, #0]
   8a432:	2b00      	cmp	r3, #0
   8a434:	d15b      	bne.n	8a4ee <Coarse_DutyCorrection+0x1c6>
   8a436:	4b62      	ldr	r3, [pc, #392]	; (8a5c0 <Coarse_DutyCorrection+0x298>)
   8a438:	681a      	ldr	r2, [r3, #0]
   8a43a:	4b58      	ldr	r3, [pc, #352]	; (8a59c <Coarse_DutyCorrection+0x274>)
   8a43c:	4610      	mov	r0, r2
   8a43e:	4798      	blx	r3
   8a440:	4680      	mov	r8, r0
   8a442:	4689      	mov	r9, r1
   8a444:	4b5c      	ldr	r3, [pc, #368]	; (8a5b8 <Coarse_DutyCorrection+0x290>)
   8a446:	681a      	ldr	r2, [r3, #0]
   8a448:	4b54      	ldr	r3, [pc, #336]	; (8a59c <Coarse_DutyCorrection+0x274>)
   8a44a:	4610      	mov	r0, r2
   8a44c:	4798      	blx	r3
   8a44e:	4602      	mov	r2, r0
   8a450:	460b      	mov	r3, r1
   8a452:	4c5e      	ldr	r4, [pc, #376]	; (8a5cc <Coarse_DutyCorrection+0x2a4>)
   8a454:	4610      	mov	r0, r2
   8a456:	4619      	mov	r1, r3
   8a458:	f04f 0200 	mov.w	r2, #0
   8a45c:	4b5c      	ldr	r3, [pc, #368]	; (8a5d0 <Coarse_DutyCorrection+0x2a8>)
   8a45e:	47a0      	blx	r4
   8a460:	4602      	mov	r2, r0
   8a462:	460b      	mov	r3, r1
   8a464:	4c51      	ldr	r4, [pc, #324]	; (8a5ac <Coarse_DutyCorrection+0x284>)
   8a466:	4640      	mov	r0, r8
   8a468:	4649      	mov	r1, r9
   8a46a:	47a0      	blx	r4
   8a46c:	4603      	mov	r3, r0
   8a46e:	2b00      	cmp	r3, #0
   8a470:	d03d      	beq.n	8a4ee <Coarse_DutyCorrection+0x1c6>
   8a472:	4b58      	ldr	r3, [pc, #352]	; (8a5d4 <Coarse_DutyCorrection+0x2ac>)
   8a474:	681a      	ldr	r2, [r3, #0]
   8a476:	4b49      	ldr	r3, [pc, #292]	; (8a59c <Coarse_DutyCorrection+0x274>)
   8a478:	4610      	mov	r0, r2
   8a47a:	4798      	blx	r3
   8a47c:	4680      	mov	r8, r0
   8a47e:	4689      	mov	r9, r1
   8a480:	4b55      	ldr	r3, [pc, #340]	; (8a5d8 <Coarse_DutyCorrection+0x2b0>)
   8a482:	681a      	ldr	r2, [r3, #0]
   8a484:	4b45      	ldr	r3, [pc, #276]	; (8a59c <Coarse_DutyCorrection+0x274>)
   8a486:	4610      	mov	r0, r2
   8a488:	4798      	blx	r3
   8a48a:	4602      	mov	r2, r0
   8a48c:	460b      	mov	r3, r1
   8a48e:	4c4f      	ldr	r4, [pc, #316]	; (8a5cc <Coarse_DutyCorrection+0x2a4>)
   8a490:	4610      	mov	r0, r2
   8a492:	4619      	mov	r1, r3
   8a494:	a33e      	add	r3, pc, #248	; (adr r3, 8a590 <Coarse_DutyCorrection+0x268>)
   8a496:	e9d3 2300 	ldrd	r2, r3, [r3]
   8a49a:	47a0      	blx	r4
   8a49c:	4602      	mov	r2, r0
   8a49e:	460b      	mov	r3, r1
   8a4a0:	4c3f      	ldr	r4, [pc, #252]	; (8a5a0 <Coarse_DutyCorrection+0x278>)
   8a4a2:	4640      	mov	r0, r8
   8a4a4:	4649      	mov	r1, r9
   8a4a6:	47a0      	blx	r4
   8a4a8:	4603      	mov	r3, r0
   8a4aa:	2b00      	cmp	r3, #0
   8a4ac:	d01f      	beq.n	8a4ee <Coarse_DutyCorrection+0x1c6>
		{
			avg_duty = avg_duty - 10;
   8a4ae:	4b46      	ldr	r3, [pc, #280]	; (8a5c8 <Coarse_DutyCorrection+0x2a0>)
   8a4b0:	881b      	ldrh	r3, [r3, #0]
   8a4b2:	b29b      	uxth	r3, r3
   8a4b4:	3b0a      	subs	r3, #10
   8a4b6:	b29b      	uxth	r3, r3
   8a4b8:	b29a      	uxth	r2, r3
   8a4ba:	4b43      	ldr	r3, [pc, #268]	; (8a5c8 <Coarse_DutyCorrection+0x2a0>)
   8a4bc:	801a      	strh	r2, [r3, #0]
			if((avg_duty <= 1000) && (Tmp3Val < Prescribed_T3) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   8a4be:	4b42      	ldr	r3, [pc, #264]	; (8a5c8 <Coarse_DutyCorrection+0x2a0>)
   8a4c0:	881b      	ldrh	r3, [r3, #0]
   8a4c2:	b21b      	sxth	r3, r3
   8a4c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   8a4c8:	dc10      	bgt.n	8a4ec <Coarse_DutyCorrection+0x1c4>
   8a4ca:	4b42      	ldr	r3, [pc, #264]	; (8a5d4 <Coarse_DutyCorrection+0x2ac>)
   8a4cc:	6819      	ldr	r1, [r3, #0]
   8a4ce:	4b42      	ldr	r3, [pc, #264]	; (8a5d8 <Coarse_DutyCorrection+0x2b0>)
   8a4d0:	681a      	ldr	r2, [r3, #0]
   8a4d2:	4b42      	ldr	r3, [pc, #264]	; (8a5dc <Coarse_DutyCorrection+0x2b4>)
   8a4d4:	4608      	mov	r0, r1
   8a4d6:	4611      	mov	r1, r2
   8a4d8:	4798      	blx	r3
   8a4da:	4603      	mov	r3, r0
   8a4dc:	2b00      	cmp	r3, #0
   8a4de:	d100      	bne.n	8a4e2 <Coarse_DutyCorrection+0x1ba>
   8a4e0:	e0c7      	b.n	8a672 <Coarse_DutyCorrection+0x34a>
			{
				avg_duty = 1800;    // avoiding negATIVE values for the avg duty, which shouldnt happen in regular run
   8a4e2:	4b39      	ldr	r3, [pc, #228]	; (8a5c8 <Coarse_DutyCorrection+0x2a0>)
   8a4e4:	f44f 62e1 	mov.w	r2, #1800	; 0x708
   8a4e8:	801a      	strh	r2, [r3, #0]
			}
		}
		else if ((TS2_Direction == UP)  && ((Tmp2Val >= (Prescribed_T2+2.5)) && (Tmp3Val <= Prescribed_T3+0.1)))
		{
			avg_duty = avg_duty - 10;
			if((avg_duty <= 1000) && (Tmp3Val < Prescribed_T3) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   8a4ea:	e0c2      	b.n	8a672 <Coarse_DutyCorrection+0x34a>
   8a4ec:	e0c1      	b.n	8a672 <Coarse_DutyCorrection+0x34a>
			{
				avg_duty = 1800;    // avoiding negATIVE values for the avg duty, which shouldnt happen in regular run
			}
		}
		else if ((TS2_Direction == UP)  && ((Tmp2Val >= (Prescribed_T2-1)) && (Tmp2Val <= Prescribed_T2+3)))
   8a4ee:	4b31      	ldr	r3, [pc, #196]	; (8a5b4 <Coarse_DutyCorrection+0x28c>)
   8a4f0:	781b      	ldrb	r3, [r3, #0]
   8a4f2:	2b00      	cmp	r3, #0
   8a4f4:	d17e      	bne.n	8a5f4 <Coarse_DutyCorrection+0x2cc>
   8a4f6:	4b30      	ldr	r3, [pc, #192]	; (8a5b8 <Coarse_DutyCorrection+0x290>)
   8a4f8:	681a      	ldr	r2, [r3, #0]
   8a4fa:	4b39      	ldr	r3, [pc, #228]	; (8a5e0 <Coarse_DutyCorrection+0x2b8>)
   8a4fc:	4610      	mov	r0, r2
   8a4fe:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   8a502:	4798      	blx	r3
   8a504:	4603      	mov	r3, r0
   8a506:	4619      	mov	r1, r3
   8a508:	4b2d      	ldr	r3, [pc, #180]	; (8a5c0 <Coarse_DutyCorrection+0x298>)
   8a50a:	681a      	ldr	r2, [r3, #0]
   8a50c:	4b2d      	ldr	r3, [pc, #180]	; (8a5c4 <Coarse_DutyCorrection+0x29c>)
   8a50e:	4608      	mov	r0, r1
   8a510:	4611      	mov	r1, r2
   8a512:	4798      	blx	r3
   8a514:	4603      	mov	r3, r0
   8a516:	2b00      	cmp	r3, #0
   8a518:	d06c      	beq.n	8a5f4 <Coarse_DutyCorrection+0x2cc>
   8a51a:	4b27      	ldr	r3, [pc, #156]	; (8a5b8 <Coarse_DutyCorrection+0x290>)
   8a51c:	681a      	ldr	r2, [r3, #0]
   8a51e:	4b27      	ldr	r3, [pc, #156]	; (8a5bc <Coarse_DutyCorrection+0x294>)
   8a520:	4610      	mov	r0, r2
   8a522:	4930      	ldr	r1, [pc, #192]	; (8a5e4 <Coarse_DutyCorrection+0x2bc>)
   8a524:	4798      	blx	r3
   8a526:	4603      	mov	r3, r0
   8a528:	4619      	mov	r1, r3
   8a52a:	4b25      	ldr	r3, [pc, #148]	; (8a5c0 <Coarse_DutyCorrection+0x298>)
   8a52c:	681a      	ldr	r2, [r3, #0]
   8a52e:	4b2e      	ldr	r3, [pc, #184]	; (8a5e8 <Coarse_DutyCorrection+0x2c0>)
   8a530:	4608      	mov	r0, r1
   8a532:	4611      	mov	r1, r2
   8a534:	4798      	blx	r3
   8a536:	4603      	mov	r3, r0
   8a538:	2b00      	cmp	r3, #0
   8a53a:	d05b      	beq.n	8a5f4 <Coarse_DutyCorrection+0x2cc>
		{
			if((Tmp1Val <= 36) && (Tmp3Val < Prescribed_T3))  
   8a53c:	4b2b      	ldr	r3, [pc, #172]	; (8a5ec <Coarse_DutyCorrection+0x2c4>)
   8a53e:	681a      	ldr	r2, [r3, #0]
   8a540:	4b20      	ldr	r3, [pc, #128]	; (8a5c4 <Coarse_DutyCorrection+0x29c>)
   8a542:	4610      	mov	r0, r2
   8a544:	492a      	ldr	r1, [pc, #168]	; (8a5f0 <Coarse_DutyCorrection+0x2c8>)
   8a546:	4798      	blx	r3
   8a548:	4603      	mov	r3, r0
   8a54a:	2b00      	cmp	r3, #0
   8a54c:	f000 8091 	beq.w	8a672 <Coarse_DutyCorrection+0x34a>
   8a550:	4b20      	ldr	r3, [pc, #128]	; (8a5d4 <Coarse_DutyCorrection+0x2ac>)
   8a552:	6819      	ldr	r1, [r3, #0]
   8a554:	4b20      	ldr	r3, [pc, #128]	; (8a5d8 <Coarse_DutyCorrection+0x2b0>)
   8a556:	681a      	ldr	r2, [r3, #0]
   8a558:	4b20      	ldr	r3, [pc, #128]	; (8a5dc <Coarse_DutyCorrection+0x2b4>)
   8a55a:	4608      	mov	r0, r1
   8a55c:	4611      	mov	r1, r2
   8a55e:	4798      	blx	r3
   8a560:	4603      	mov	r3, r0
   8a562:	2b00      	cmp	r3, #0
   8a564:	d100      	bne.n	8a568 <Coarse_DutyCorrection+0x240>
   8a566:	e084      	b.n	8a672 <Coarse_DutyCorrection+0x34a>
				avg_duty = avg_duty + duty_count;            //To avoid TS2 getting stuck at 36 and 40
   8a568:	4b0e      	ldr	r3, [pc, #56]	; (8a5a4 <Coarse_DutyCorrection+0x27c>)
   8a56a:	781b      	ldrb	r3, [r3, #0]
   8a56c:	b29a      	uxth	r2, r3
   8a56e:	4b16      	ldr	r3, [pc, #88]	; (8a5c8 <Coarse_DutyCorrection+0x2a0>)
   8a570:	881b      	ldrh	r3, [r3, #0]
   8a572:	b29b      	uxth	r3, r3
   8a574:	4413      	add	r3, r2
   8a576:	b29b      	uxth	r3, r3
   8a578:	b29a      	uxth	r2, r3
   8a57a:	4b13      	ldr	r3, [pc, #76]	; (8a5c8 <Coarse_DutyCorrection+0x2a0>)
   8a57c:	801a      	strh	r2, [r3, #0]
				avg_duty = 1800;    // avoiding negATIVE values for the avg duty, which shouldnt happen in regular run
			}
		}
		else if ((TS2_Direction == UP)  && ((Tmp2Val >= (Prescribed_T2-1)) && (Tmp2Val <= Prescribed_T2+3)))
		{
			if((Tmp1Val <= 36) && (Tmp3Val < Prescribed_T3))  
   8a57e:	e078      	b.n	8a672 <Coarse_DutyCorrection+0x34a>
   8a580:	eb851eb8 	.word	0xeb851eb8
   8a584:	3f9eb851 	.word	0x3f9eb851
   8a588:	33333333 	.word	0x33333333
   8a58c:	3fd33333 	.word	0x3fd33333
   8a590:	9999999a 	.word	0x9999999a
   8a594:	3fb99999 	.word	0x3fb99999
   8a598:	200719e0 	.word	0x200719e0
   8a59c:	000a6031 	.word	0x000a6031
   8a5a0:	000a65d1 	.word	0x000a65d1
   8a5a4:	200719e4 	.word	0x200719e4
   8a5a8:	000a65f9 	.word	0x000a65f9
   8a5ac:	000a65e5 	.word	0x000a65e5
   8a5b0:	20070558 	.word	0x20070558
   8a5b4:	20072196 	.word	0x20072196
   8a5b8:	20070550 	.word	0x20070550
   8a5bc:	000a6749 	.word	0x000a6749
   8a5c0:	200719c0 	.word	0x200719c0
   8a5c4:	000a6ca9 	.word	0x000a6ca9
   8a5c8:	200719ae 	.word	0x200719ae
   8a5cc:	000a5d75 	.word	0x000a5d75
   8a5d0:	40040000 	.word	0x40040000
   8a5d4:	200719c4 	.word	0x200719c4
   8a5d8:	20070554 	.word	0x20070554
   8a5dc:	000a6c95 	.word	0x000a6c95
   8a5e0:	000a6745 	.word	0x000a6745
   8a5e4:	40400000 	.word	0x40400000
   8a5e8:	000a6cbd 	.word	0x000a6cbd
   8a5ec:	200719bc 	.word	0x200719bc
   8a5f0:	42100000 	.word	0x42100000
				avg_duty = avg_duty + duty_count;            //To avoid TS2 getting stuck at 36 and 40
		}
		else if ((TS2_Direction == DOWN) && (Tmp2Val <= Prescribed_T2) )
   8a5f4:	4b90      	ldr	r3, [pc, #576]	; (8a838 <Coarse_DutyCorrection+0x510>)
   8a5f6:	781b      	ldrb	r3, [r3, #0]
   8a5f8:	2b01      	cmp	r3, #1
   8a5fa:	d130      	bne.n	8a65e <Coarse_DutyCorrection+0x336>
   8a5fc:	4b8f      	ldr	r3, [pc, #572]	; (8a83c <Coarse_DutyCorrection+0x514>)
   8a5fe:	6819      	ldr	r1, [r3, #0]
   8a600:	4b8f      	ldr	r3, [pc, #572]	; (8a840 <Coarse_DutyCorrection+0x518>)
   8a602:	681a      	ldr	r2, [r3, #0]
   8a604:	4b8f      	ldr	r3, [pc, #572]	; (8a844 <Coarse_DutyCorrection+0x51c>)
   8a606:	4608      	mov	r0, r1
   8a608:	4611      	mov	r1, r2
   8a60a:	4798      	blx	r3
   8a60c:	4603      	mov	r3, r0
   8a60e:	2b00      	cmp	r3, #0
   8a610:	d025      	beq.n	8a65e <Coarse_DutyCorrection+0x336>
		{
			avg_duty = avg_duty + duty_count;
   8a612:	4b8d      	ldr	r3, [pc, #564]	; (8a848 <Coarse_DutyCorrection+0x520>)
   8a614:	781b      	ldrb	r3, [r3, #0]
   8a616:	b29a      	uxth	r2, r3
   8a618:	4b8c      	ldr	r3, [pc, #560]	; (8a84c <Coarse_DutyCorrection+0x524>)
   8a61a:	881b      	ldrh	r3, [r3, #0]
   8a61c:	b29b      	uxth	r3, r3
   8a61e:	4413      	add	r3, r2
   8a620:	b29b      	uxth	r3, r3
   8a622:	b29a      	uxth	r2, r3
   8a624:	4b89      	ldr	r3, [pc, #548]	; (8a84c <Coarse_DutyCorrection+0x524>)
   8a626:	801a      	strh	r2, [r3, #0]
			
			if ((avg_duty > 2300) && (Tmp3Val >= Prescribed_T3))  //Sunil limiting to 2300
   8a628:	4b88      	ldr	r3, [pc, #544]	; (8a84c <Coarse_DutyCorrection+0x524>)
   8a62a:	881b      	ldrh	r3, [r3, #0]
   8a62c:	b21b      	sxth	r3, r3
   8a62e:	f640 02fc 	movw	r2, #2300	; 0x8fc
   8a632:	4293      	cmp	r3, r2
   8a634:	dd12      	ble.n	8a65c <Coarse_DutyCorrection+0x334>
   8a636:	4b86      	ldr	r3, [pc, #536]	; (8a850 <Coarse_DutyCorrection+0x528>)
   8a638:	6819      	ldr	r1, [r3, #0]
   8a63a:	4b86      	ldr	r3, [pc, #536]	; (8a854 <Coarse_DutyCorrection+0x52c>)
   8a63c:	681a      	ldr	r2, [r3, #0]
   8a63e:	4b86      	ldr	r3, [pc, #536]	; (8a858 <Coarse_DutyCorrection+0x530>)
   8a640:	4608      	mov	r0, r1
   8a642:	4611      	mov	r1, r2
   8a644:	4798      	blx	r3
   8a646:	4603      	mov	r3, r0
   8a648:	2b00      	cmp	r3, #0
   8a64a:	d100      	bne.n	8a64e <Coarse_DutyCorrection+0x326>
   8a64c:	e011      	b.n	8a672 <Coarse_DutyCorrection+0x34a>
			{
				avg_duty = 2300;
   8a64e:	4b7f      	ldr	r3, [pc, #508]	; (8a84c <Coarse_DutyCorrection+0x524>)
   8a650:	f640 02fc 	movw	r2, #2300	; 0x8fc
   8a654:	801a      	strh	r2, [r3, #0]
				sv_cntrl_poweroffheater();
   8a656:	4b81      	ldr	r3, [pc, #516]	; (8a85c <Coarse_DutyCorrection+0x534>)
   8a658:	4798      	blx	r3
		}
		else if ((TS2_Direction == DOWN) && (Tmp2Val <= Prescribed_T2) )
		{
			avg_duty = avg_duty + duty_count;
			
			if ((avg_duty > 2300) && (Tmp3Val >= Prescribed_T3))  //Sunil limiting to 2300
   8a65a:	e00a      	b.n	8a672 <Coarse_DutyCorrection+0x34a>
   8a65c:	e009      	b.n	8a672 <Coarse_DutyCorrection+0x34a>
				avg_duty = 2300;
				sv_cntrl_poweroffheater();
				//			  HeaterState = CL_HEATER_STATE_OFF;
			}
		}
		else if (TS2_Direction == NUETRAL)    //Sunil: This means TS2 is neither increasing nor decreasing
   8a65e:	4b76      	ldr	r3, [pc, #472]	; (8a838 <Coarse_DutyCorrection+0x510>)
   8a660:	781b      	ldrb	r3, [r3, #0]
   8a662:	2b02      	cmp	r3, #2
   8a664:	f040 82f9 	bne.w	8ac5a <Coarse_DutyCorrection+0x932>
		avg_duty = avg_duty;
   8a668:	4b78      	ldr	r3, [pc, #480]	; (8a84c <Coarse_DutyCorrection+0x524>)
   8a66a:	881a      	ldrh	r2, [r3, #0]
   8a66c:	4b77      	ldr	r3, [pc, #476]	; (8a84c <Coarse_DutyCorrection+0x524>)
   8a66e:	801a      	strh	r2, [r3, #0]
   8a670:	e2f3      	b.n	8ac5a <Coarse_DutyCorrection+0x932>
   8a672:	e2f2      	b.n	8ac5a <Coarse_DutyCorrection+0x932>
		
	}

	else if (SYSTEM_FLOW == 500)
   8a674:	4b7a      	ldr	r3, [pc, #488]	; (8a860 <Coarse_DutyCorrection+0x538>)
   8a676:	681b      	ldr	r3, [r3, #0]
   8a678:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   8a67c:	f040 8163 	bne.w	8a946 <Coarse_DutyCorrection+0x61e>
	{
		if ((TS2_Direction == UP)  && (Tmp2Val >= Prescribed_T2+2) )   // if direction is upward restrict correction if TS2 not yet 39
   8a680:	4b6d      	ldr	r3, [pc, #436]	; (8a838 <Coarse_DutyCorrection+0x510>)
   8a682:	781b      	ldrb	r3, [r3, #0]
   8a684:	2b00      	cmp	r3, #0
   8a686:	d128      	bne.n	8a6da <Coarse_DutyCorrection+0x3b2>
   8a688:	4b6d      	ldr	r3, [pc, #436]	; (8a840 <Coarse_DutyCorrection+0x518>)
   8a68a:	681a      	ldr	r2, [r3, #0]
   8a68c:	4b75      	ldr	r3, [pc, #468]	; (8a864 <Coarse_DutyCorrection+0x53c>)
   8a68e:	4610      	mov	r0, r2
   8a690:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   8a694:	4798      	blx	r3
   8a696:	4603      	mov	r3, r0
   8a698:	4619      	mov	r1, r3
   8a69a:	4b68      	ldr	r3, [pc, #416]	; (8a83c <Coarse_DutyCorrection+0x514>)
   8a69c:	681a      	ldr	r2, [r3, #0]
   8a69e:	4b69      	ldr	r3, [pc, #420]	; (8a844 <Coarse_DutyCorrection+0x51c>)
   8a6a0:	4608      	mov	r0, r1
   8a6a2:	4611      	mov	r1, r2
   8a6a4:	4798      	blx	r3
   8a6a6:	4603      	mov	r3, r0
   8a6a8:	2b00      	cmp	r3, #0
   8a6aa:	d016      	beq.n	8a6da <Coarse_DutyCorrection+0x3b2>
		{													// Prescribed_T2 = 37 //changed from 39 25071977
			
			avg_duty = avg_duty - duty_count;
   8a6ac:	4b67      	ldr	r3, [pc, #412]	; (8a84c <Coarse_DutyCorrection+0x524>)
   8a6ae:	881b      	ldrh	r3, [r3, #0]
   8a6b0:	b29a      	uxth	r2, r3
   8a6b2:	4b65      	ldr	r3, [pc, #404]	; (8a848 <Coarse_DutyCorrection+0x520>)
   8a6b4:	781b      	ldrb	r3, [r3, #0]
   8a6b6:	b29b      	uxth	r3, r3
   8a6b8:	1ad3      	subs	r3, r2, r3
   8a6ba:	b29b      	uxth	r3, r3
   8a6bc:	b29a      	uxth	r2, r3
   8a6be:	4b63      	ldr	r3, [pc, #396]	; (8a84c <Coarse_DutyCorrection+0x524>)
   8a6c0:	801a      	strh	r2, [r3, #0]
			
			if((avg_duty <= 1000) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   8a6c2:	4b62      	ldr	r3, [pc, #392]	; (8a84c <Coarse_DutyCorrection+0x524>)
   8a6c4:	881b      	ldrh	r3, [r3, #0]
   8a6c6:	b21b      	sxth	r3, r3
   8a6c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   8a6cc:	dc04      	bgt.n	8a6d8 <Coarse_DutyCorrection+0x3b0>
			{
				avg_duty = 1800;    // avoiding negATIVE values for the avg duty, which shouldnt happen in regular run
   8a6ce:	4b5f      	ldr	r3, [pc, #380]	; (8a84c <Coarse_DutyCorrection+0x524>)
   8a6d0:	f44f 62e1 	mov.w	r2, #1800	; 0x708
   8a6d4:	801a      	strh	r2, [r3, #0]
		if ((TS2_Direction == UP)  && (Tmp2Val >= Prescribed_T2+2) )   // if direction is upward restrict correction if TS2 not yet 39
		{													// Prescribed_T2 = 37 //changed from 39 25071977
			
			avg_duty = avg_duty - duty_count;
			
			if((avg_duty <= 1000) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   8a6d6:	e135      	b.n	8a944 <Coarse_DutyCorrection+0x61c>
   8a6d8:	e134      	b.n	8a944 <Coarse_DutyCorrection+0x61c>
			{
				avg_duty = 1800;    // avoiding negATIVE values for the avg duty, which shouldnt happen in regular run
			}
		}
		else if ((TS2_Direction == UP)  && ((Tmp2Val >= (Prescribed_T2+0.5)) && (Tmp3Val > (Prescribed_T3+0.1))))  // gOPAL: EARLIER 37 CHANGED ON 07082017
   8a6da:	4b57      	ldr	r3, [pc, #348]	; (8a838 <Coarse_DutyCorrection+0x510>)
   8a6dc:	781b      	ldrb	r3, [r3, #0]
   8a6de:	2b00      	cmp	r3, #0
   8a6e0:	d15b      	bne.n	8a79a <Coarse_DutyCorrection+0x472>
   8a6e2:	4b56      	ldr	r3, [pc, #344]	; (8a83c <Coarse_DutyCorrection+0x514>)
   8a6e4:	681a      	ldr	r2, [r3, #0]
   8a6e6:	4b60      	ldr	r3, [pc, #384]	; (8a868 <Coarse_DutyCorrection+0x540>)
   8a6e8:	4610      	mov	r0, r2
   8a6ea:	4798      	blx	r3
   8a6ec:	4680      	mov	r8, r0
   8a6ee:	4689      	mov	r9, r1
   8a6f0:	4b53      	ldr	r3, [pc, #332]	; (8a840 <Coarse_DutyCorrection+0x518>)
   8a6f2:	681a      	ldr	r2, [r3, #0]
   8a6f4:	4b5c      	ldr	r3, [pc, #368]	; (8a868 <Coarse_DutyCorrection+0x540>)
   8a6f6:	4610      	mov	r0, r2
   8a6f8:	4798      	blx	r3
   8a6fa:	4602      	mov	r2, r0
   8a6fc:	460b      	mov	r3, r1
   8a6fe:	4c5b      	ldr	r4, [pc, #364]	; (8a86c <Coarse_DutyCorrection+0x544>)
   8a700:	4610      	mov	r0, r2
   8a702:	4619      	mov	r1, r3
   8a704:	f04f 0200 	mov.w	r2, #0
   8a708:	4b59      	ldr	r3, [pc, #356]	; (8a870 <Coarse_DutyCorrection+0x548>)
   8a70a:	47a0      	blx	r4
   8a70c:	4602      	mov	r2, r0
   8a70e:	460b      	mov	r3, r1
   8a710:	4c58      	ldr	r4, [pc, #352]	; (8a874 <Coarse_DutyCorrection+0x54c>)
   8a712:	4640      	mov	r0, r8
   8a714:	4649      	mov	r1, r9
   8a716:	47a0      	blx	r4
   8a718:	4603      	mov	r3, r0
   8a71a:	2b00      	cmp	r3, #0
   8a71c:	d03d      	beq.n	8a79a <Coarse_DutyCorrection+0x472>
   8a71e:	4b4c      	ldr	r3, [pc, #304]	; (8a850 <Coarse_DutyCorrection+0x528>)
   8a720:	681a      	ldr	r2, [r3, #0]
   8a722:	4b51      	ldr	r3, [pc, #324]	; (8a868 <Coarse_DutyCorrection+0x540>)
   8a724:	4610      	mov	r0, r2
   8a726:	4798      	blx	r3
   8a728:	4680      	mov	r8, r0
   8a72a:	4689      	mov	r9, r1
   8a72c:	4b49      	ldr	r3, [pc, #292]	; (8a854 <Coarse_DutyCorrection+0x52c>)
   8a72e:	681a      	ldr	r2, [r3, #0]
   8a730:	4b4d      	ldr	r3, [pc, #308]	; (8a868 <Coarse_DutyCorrection+0x540>)
   8a732:	4610      	mov	r0, r2
   8a734:	4798      	blx	r3
   8a736:	4602      	mov	r2, r0
   8a738:	460b      	mov	r3, r1
   8a73a:	4c4c      	ldr	r4, [pc, #304]	; (8a86c <Coarse_DutyCorrection+0x544>)
   8a73c:	4610      	mov	r0, r2
   8a73e:	4619      	mov	r1, r3
   8a740:	a33b      	add	r3, pc, #236	; (adr r3, 8a830 <Coarse_DutyCorrection+0x508>)
   8a742:	e9d3 2300 	ldrd	r2, r3, [r3]
   8a746:	47a0      	blx	r4
   8a748:	4602      	mov	r2, r0
   8a74a:	460b      	mov	r3, r1
   8a74c:	4c4a      	ldr	r4, [pc, #296]	; (8a878 <Coarse_DutyCorrection+0x550>)
   8a74e:	4640      	mov	r0, r8
   8a750:	4649      	mov	r1, r9
   8a752:	47a0      	blx	r4
   8a754:	4603      	mov	r3, r0
   8a756:	2b00      	cmp	r3, #0
   8a758:	d01f      	beq.n	8a79a <Coarse_DutyCorrection+0x472>
		{
			avg_duty = avg_duty - 10; 
   8a75a:	4b3c      	ldr	r3, [pc, #240]	; (8a84c <Coarse_DutyCorrection+0x524>)
   8a75c:	881b      	ldrh	r3, [r3, #0]
   8a75e:	b29b      	uxth	r3, r3
   8a760:	3b0a      	subs	r3, #10
   8a762:	b29b      	uxth	r3, r3
   8a764:	b29a      	uxth	r2, r3
   8a766:	4b39      	ldr	r3, [pc, #228]	; (8a84c <Coarse_DutyCorrection+0x524>)
   8a768:	801a      	strh	r2, [r3, #0]
			if((avg_duty <= 1000) && (Tmp3Val < Prescribed_T3) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   8a76a:	4b38      	ldr	r3, [pc, #224]	; (8a84c <Coarse_DutyCorrection+0x524>)
   8a76c:	881b      	ldrh	r3, [r3, #0]
   8a76e:	b21b      	sxth	r3, r3
   8a770:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   8a774:	dc10      	bgt.n	8a798 <Coarse_DutyCorrection+0x470>
   8a776:	4b36      	ldr	r3, [pc, #216]	; (8a850 <Coarse_DutyCorrection+0x528>)
   8a778:	6819      	ldr	r1, [r3, #0]
   8a77a:	4b36      	ldr	r3, [pc, #216]	; (8a854 <Coarse_DutyCorrection+0x52c>)
   8a77c:	681a      	ldr	r2, [r3, #0]
   8a77e:	4b3f      	ldr	r3, [pc, #252]	; (8a87c <Coarse_DutyCorrection+0x554>)
   8a780:	4608      	mov	r0, r1
   8a782:	4611      	mov	r1, r2
   8a784:	4798      	blx	r3
   8a786:	4603      	mov	r3, r0
   8a788:	2b00      	cmp	r3, #0
   8a78a:	d100      	bne.n	8a78e <Coarse_DutyCorrection+0x466>
   8a78c:	e0da      	b.n	8a944 <Coarse_DutyCorrection+0x61c>
			{
				avg_duty = 1800;    // avoiding negATIVE values for the avg duty, which shouldnt happen in regular run
   8a78e:	4b2f      	ldr	r3, [pc, #188]	; (8a84c <Coarse_DutyCorrection+0x524>)
   8a790:	f44f 62e1 	mov.w	r2, #1800	; 0x708
   8a794:	801a      	strh	r2, [r3, #0]
			}
		}
		else if ((TS2_Direction == UP)  && ((Tmp2Val >= (Prescribed_T2+0.5)) && (Tmp3Val > (Prescribed_T3+0.1))))  // gOPAL: EARLIER 37 CHANGED ON 07082017
		{
			avg_duty = avg_duty - 10; 
			if((avg_duty <= 1000) && (Tmp3Val < Prescribed_T3) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   8a796:	e0d5      	b.n	8a944 <Coarse_DutyCorrection+0x61c>
   8a798:	e0d4      	b.n	8a944 <Coarse_DutyCorrection+0x61c>
			{
				avg_duty = 1800;    // avoiding negATIVE values for the avg duty, which shouldnt happen in regular run
			}
		
		}
		else if ((TS2_Direction == UP)  && ((Tmp2Val >= (Prescribed_T2-3)) && (Tmp2Val <=(Prescribed_T2+1))))  // gOPAL: EARLIER 37 CHANGED ON 07082017
   8a79a:	4b27      	ldr	r3, [pc, #156]	; (8a838 <Coarse_DutyCorrection+0x510>)
   8a79c:	781b      	ldrb	r3, [r3, #0]
   8a79e:	2b00      	cmp	r3, #0
   8a7a0:	d176      	bne.n	8a890 <Coarse_DutyCorrection+0x568>
   8a7a2:	4b27      	ldr	r3, [pc, #156]	; (8a840 <Coarse_DutyCorrection+0x518>)
   8a7a4:	681a      	ldr	r2, [r3, #0]
   8a7a6:	4b36      	ldr	r3, [pc, #216]	; (8a880 <Coarse_DutyCorrection+0x558>)
   8a7a8:	4610      	mov	r0, r2
   8a7aa:	4936      	ldr	r1, [pc, #216]	; (8a884 <Coarse_DutyCorrection+0x55c>)
   8a7ac:	4798      	blx	r3
   8a7ae:	4603      	mov	r3, r0
   8a7b0:	4619      	mov	r1, r3
   8a7b2:	4b22      	ldr	r3, [pc, #136]	; (8a83c <Coarse_DutyCorrection+0x514>)
   8a7b4:	681a      	ldr	r2, [r3, #0]
   8a7b6:	4b23      	ldr	r3, [pc, #140]	; (8a844 <Coarse_DutyCorrection+0x51c>)
   8a7b8:	4608      	mov	r0, r1
   8a7ba:	4611      	mov	r1, r2
   8a7bc:	4798      	blx	r3
   8a7be:	4603      	mov	r3, r0
   8a7c0:	2b00      	cmp	r3, #0
   8a7c2:	d065      	beq.n	8a890 <Coarse_DutyCorrection+0x568>
   8a7c4:	4b1e      	ldr	r3, [pc, #120]	; (8a840 <Coarse_DutyCorrection+0x518>)
   8a7c6:	681a      	ldr	r2, [r3, #0]
   8a7c8:	4b26      	ldr	r3, [pc, #152]	; (8a864 <Coarse_DutyCorrection+0x53c>)
   8a7ca:	4610      	mov	r0, r2
   8a7cc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   8a7d0:	4798      	blx	r3
   8a7d2:	4603      	mov	r3, r0
   8a7d4:	4619      	mov	r1, r3
   8a7d6:	4b19      	ldr	r3, [pc, #100]	; (8a83c <Coarse_DutyCorrection+0x514>)
   8a7d8:	681a      	ldr	r2, [r3, #0]
   8a7da:	4b1f      	ldr	r3, [pc, #124]	; (8a858 <Coarse_DutyCorrection+0x530>)
   8a7dc:	4608      	mov	r0, r1
   8a7de:	4611      	mov	r1, r2
   8a7e0:	4798      	blx	r3
   8a7e2:	4603      	mov	r3, r0
   8a7e4:	2b00      	cmp	r3, #0
   8a7e6:	d053      	beq.n	8a890 <Coarse_DutyCorrection+0x568>
		{
			if((Tmp1Val <= 36) && (Tmp3Val < Prescribed_T3))
   8a7e8:	4b27      	ldr	r3, [pc, #156]	; (8a888 <Coarse_DutyCorrection+0x560>)
   8a7ea:	681a      	ldr	r2, [r3, #0]
   8a7ec:	4b15      	ldr	r3, [pc, #84]	; (8a844 <Coarse_DutyCorrection+0x51c>)
   8a7ee:	4610      	mov	r0, r2
   8a7f0:	4926      	ldr	r1, [pc, #152]	; (8a88c <Coarse_DutyCorrection+0x564>)
   8a7f2:	4798      	blx	r3
   8a7f4:	4603      	mov	r3, r0
   8a7f6:	2b00      	cmp	r3, #0
   8a7f8:	f000 80a4 	beq.w	8a944 <Coarse_DutyCorrection+0x61c>
   8a7fc:	4b14      	ldr	r3, [pc, #80]	; (8a850 <Coarse_DutyCorrection+0x528>)
   8a7fe:	6819      	ldr	r1, [r3, #0]
   8a800:	4b14      	ldr	r3, [pc, #80]	; (8a854 <Coarse_DutyCorrection+0x52c>)
   8a802:	681a      	ldr	r2, [r3, #0]
   8a804:	4b1d      	ldr	r3, [pc, #116]	; (8a87c <Coarse_DutyCorrection+0x554>)
   8a806:	4608      	mov	r0, r1
   8a808:	4611      	mov	r1, r2
   8a80a:	4798      	blx	r3
   8a80c:	4603      	mov	r3, r0
   8a80e:	2b00      	cmp	r3, #0
   8a810:	d100      	bne.n	8a814 <Coarse_DutyCorrection+0x4ec>
   8a812:	e097      	b.n	8a944 <Coarse_DutyCorrection+0x61c>
			{
				avg_duty = avg_duty + duty_count;            //To avoid TS2 getting stuck at 36 or 36.5
   8a814:	4b0c      	ldr	r3, [pc, #48]	; (8a848 <Coarse_DutyCorrection+0x520>)
   8a816:	781b      	ldrb	r3, [r3, #0]
   8a818:	b29a      	uxth	r2, r3
   8a81a:	4b0c      	ldr	r3, [pc, #48]	; (8a84c <Coarse_DutyCorrection+0x524>)
   8a81c:	881b      	ldrh	r3, [r3, #0]
   8a81e:	b29b      	uxth	r3, r3
   8a820:	4413      	add	r3, r2
   8a822:	b29b      	uxth	r3, r3
   8a824:	b29a      	uxth	r2, r3
   8a826:	4b09      	ldr	r3, [pc, #36]	; (8a84c <Coarse_DutyCorrection+0x524>)
   8a828:	801a      	strh	r2, [r3, #0]
			}
		
		}
		else if ((TS2_Direction == UP)  && ((Tmp2Val >= (Prescribed_T2-3)) && (Tmp2Val <=(Prescribed_T2+1))))  // gOPAL: EARLIER 37 CHANGED ON 07082017
		{
			if((Tmp1Val <= 36) && (Tmp3Val < Prescribed_T3))
   8a82a:	e08b      	b.n	8a944 <Coarse_DutyCorrection+0x61c>
   8a82c:	f3af 8000 	nop.w
   8a830:	9999999a 	.word	0x9999999a
   8a834:	3fb99999 	.word	0x3fb99999
   8a838:	20072196 	.word	0x20072196
   8a83c:	200719c0 	.word	0x200719c0
   8a840:	20070550 	.word	0x20070550
   8a844:	000a6ca9 	.word	0x000a6ca9
   8a848:	200719e4 	.word	0x200719e4
   8a84c:	200719ae 	.word	0x200719ae
   8a850:	200719c4 	.word	0x200719c4
   8a854:	20070554 	.word	0x20070554
   8a858:	000a6cbd 	.word	0x000a6cbd
   8a85c:	00099cb9 	.word	0x00099cb9
   8a860:	20070558 	.word	0x20070558
   8a864:	000a6749 	.word	0x000a6749
   8a868:	000a6031 	.word	0x000a6031
   8a86c:	000a5d75 	.word	0x000a5d75
   8a870:	3fe00000 	.word	0x3fe00000
   8a874:	000a65e5 	.word	0x000a65e5
   8a878:	000a65f9 	.word	0x000a65f9
   8a87c:	000a6c95 	.word	0x000a6c95
   8a880:	000a6745 	.word	0x000a6745
   8a884:	40400000 	.word	0x40400000
   8a888:	200719bc 	.word	0x200719bc
   8a88c:	42100000 	.word	0x42100000
			{
				avg_duty = avg_duty + duty_count;            //To avoid TS2 getting stuck at 36 or 36.5
			}           //To avoid TS2 getting stuck at 36 or 36.5
		}
		else if ((TS2_Direction == DOWN) && (Tmp2Val <= Prescribed_T2-2) )  
   8a890:	4b91      	ldr	r3, [pc, #580]	; (8aad8 <Coarse_DutyCorrection+0x7b0>)
   8a892:	781b      	ldrb	r3, [r3, #0]
   8a894:	2b01      	cmp	r3, #1
   8a896:	d14b      	bne.n	8a930 <Coarse_DutyCorrection+0x608>
   8a898:	4b90      	ldr	r3, [pc, #576]	; (8aadc <Coarse_DutyCorrection+0x7b4>)
   8a89a:	681a      	ldr	r2, [r3, #0]
   8a89c:	4b90      	ldr	r3, [pc, #576]	; (8aae0 <Coarse_DutyCorrection+0x7b8>)
   8a89e:	4610      	mov	r0, r2
   8a8a0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   8a8a4:	4798      	blx	r3
   8a8a6:	4603      	mov	r3, r0
   8a8a8:	4619      	mov	r1, r3
   8a8aa:	4b8e      	ldr	r3, [pc, #568]	; (8aae4 <Coarse_DutyCorrection+0x7bc>)
   8a8ac:	681a      	ldr	r2, [r3, #0]
   8a8ae:	4b8e      	ldr	r3, [pc, #568]	; (8aae8 <Coarse_DutyCorrection+0x7c0>)
   8a8b0:	4608      	mov	r0, r1
   8a8b2:	4611      	mov	r1, r2
   8a8b4:	4798      	blx	r3
   8a8b6:	4603      	mov	r3, r0
   8a8b8:	2b00      	cmp	r3, #0
   8a8ba:	d039      	beq.n	8a930 <Coarse_DutyCorrection+0x608>
		{
			if((Tmp1Val <= 36) && (Tmp3Val < Prescribed_T3))   //07082017 Gopal: added check of Ts3 to avoid avg duty increment when TS3 is more than 37
   8a8bc:	4b8b      	ldr	r3, [pc, #556]	; (8aaec <Coarse_DutyCorrection+0x7c4>)
   8a8be:	681a      	ldr	r2, [r3, #0]
   8a8c0:	4b8b      	ldr	r3, [pc, #556]	; (8aaf0 <Coarse_DutyCorrection+0x7c8>)
   8a8c2:	4610      	mov	r0, r2
   8a8c4:	498b      	ldr	r1, [pc, #556]	; (8aaf4 <Coarse_DutyCorrection+0x7cc>)
   8a8c6:	4798      	blx	r3
   8a8c8:	4603      	mov	r3, r0
   8a8ca:	2b00      	cmp	r3, #0
   8a8cc:	d015      	beq.n	8a8fa <Coarse_DutyCorrection+0x5d2>
   8a8ce:	4b8a      	ldr	r3, [pc, #552]	; (8aaf8 <Coarse_DutyCorrection+0x7d0>)
   8a8d0:	6819      	ldr	r1, [r3, #0]
   8a8d2:	4b8a      	ldr	r3, [pc, #552]	; (8aafc <Coarse_DutyCorrection+0x7d4>)
   8a8d4:	681a      	ldr	r2, [r3, #0]
   8a8d6:	4b8a      	ldr	r3, [pc, #552]	; (8ab00 <Coarse_DutyCorrection+0x7d8>)
   8a8d8:	4608      	mov	r0, r1
   8a8da:	4611      	mov	r1, r2
   8a8dc:	4798      	blx	r3
   8a8de:	4603      	mov	r3, r0
   8a8e0:	2b00      	cmp	r3, #0
   8a8e2:	d00a      	beq.n	8a8fa <Coarse_DutyCorrection+0x5d2>
			{
				avg_duty = avg_duty + duty_count;            
   8a8e4:	4b87      	ldr	r3, [pc, #540]	; (8ab04 <Coarse_DutyCorrection+0x7dc>)
   8a8e6:	781b      	ldrb	r3, [r3, #0]
   8a8e8:	b29a      	uxth	r2, r3
   8a8ea:	4b87      	ldr	r3, [pc, #540]	; (8ab08 <Coarse_DutyCorrection+0x7e0>)
   8a8ec:	881b      	ldrh	r3, [r3, #0]
   8a8ee:	b29b      	uxth	r3, r3
   8a8f0:	4413      	add	r3, r2
   8a8f2:	b29b      	uxth	r3, r3
   8a8f4:	b29a      	uxth	r2, r3
   8a8f6:	4b84      	ldr	r3, [pc, #528]	; (8ab08 <Coarse_DutyCorrection+0x7e0>)
   8a8f8:	801a      	strh	r2, [r3, #0]
			}
			
			if ((avg_duty > 2300) && (Tmp3Val >= Prescribed_T3))  //Sunil limiting to 2300
   8a8fa:	4b83      	ldr	r3, [pc, #524]	; (8ab08 <Coarse_DutyCorrection+0x7e0>)
   8a8fc:	881b      	ldrh	r3, [r3, #0]
   8a8fe:	b21b      	sxth	r3, r3
   8a900:	f640 02fc 	movw	r2, #2300	; 0x8fc
   8a904:	4293      	cmp	r3, r2
   8a906:	dd12      	ble.n	8a92e <Coarse_DutyCorrection+0x606>
   8a908:	4b7b      	ldr	r3, [pc, #492]	; (8aaf8 <Coarse_DutyCorrection+0x7d0>)
   8a90a:	6819      	ldr	r1, [r3, #0]
   8a90c:	4b7b      	ldr	r3, [pc, #492]	; (8aafc <Coarse_DutyCorrection+0x7d4>)
   8a90e:	681a      	ldr	r2, [r3, #0]
   8a910:	4b75      	ldr	r3, [pc, #468]	; (8aae8 <Coarse_DutyCorrection+0x7c0>)
   8a912:	4608      	mov	r0, r1
   8a914:	4611      	mov	r1, r2
   8a916:	4798      	blx	r3
   8a918:	4603      	mov	r3, r0
   8a91a:	2b00      	cmp	r3, #0
   8a91c:	d100      	bne.n	8a920 <Coarse_DutyCorrection+0x5f8>
   8a91e:	e011      	b.n	8a944 <Coarse_DutyCorrection+0x61c>
			{
				avg_duty = 2300;
   8a920:	4b79      	ldr	r3, [pc, #484]	; (8ab08 <Coarse_DutyCorrection+0x7e0>)
   8a922:	f640 02fc 	movw	r2, #2300	; 0x8fc
   8a926:	801a      	strh	r2, [r3, #0]
				sv_cntrl_poweroffheater();
   8a928:	4b78      	ldr	r3, [pc, #480]	; (8ab0c <Coarse_DutyCorrection+0x7e4>)
   8a92a:	4798      	blx	r3
			if((Tmp1Val <= 36) && (Tmp3Val < Prescribed_T3))   //07082017 Gopal: added check of Ts3 to avoid avg duty increment when TS3 is more than 37
			{
				avg_duty = avg_duty + duty_count;            
			}
			
			if ((avg_duty > 2300) && (Tmp3Val >= Prescribed_T3))  //Sunil limiting to 2300
   8a92c:	e00a      	b.n	8a944 <Coarse_DutyCorrection+0x61c>
   8a92e:	e009      	b.n	8a944 <Coarse_DutyCorrection+0x61c>
				avg_duty = 2300;
				sv_cntrl_poweroffheater();
				//			  HeaterState = CL_HEATER_STATE_OFF;
			}
		}
		else if (TS2_Direction == NUETRAL)    //Sunil: This means TS2 is neither increasing nor decreasing
   8a930:	4b69      	ldr	r3, [pc, #420]	; (8aad8 <Coarse_DutyCorrection+0x7b0>)
   8a932:	781b      	ldrb	r3, [r3, #0]
   8a934:	2b02      	cmp	r3, #2
   8a936:	f040 8190 	bne.w	8ac5a <Coarse_DutyCorrection+0x932>
		avg_duty = avg_duty;
   8a93a:	4b73      	ldr	r3, [pc, #460]	; (8ab08 <Coarse_DutyCorrection+0x7e0>)
   8a93c:	881a      	ldrh	r2, [r3, #0]
   8a93e:	4b72      	ldr	r3, [pc, #456]	; (8ab08 <Coarse_DutyCorrection+0x7e0>)
   8a940:	801a      	strh	r2, [r3, #0]
   8a942:	e18a      	b.n	8ac5a <Coarse_DutyCorrection+0x932>
   8a944:	e189      	b.n	8ac5a <Coarse_DutyCorrection+0x932>
		
	}
	
	else if (SYSTEM_FLOW == 300)
   8a946:	4b72      	ldr	r3, [pc, #456]	; (8ab10 <Coarse_DutyCorrection+0x7e8>)
   8a948:	681b      	ldr	r3, [r3, #0]
   8a94a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   8a94e:	f040 8184 	bne.w	8ac5a <Coarse_DutyCorrection+0x932>
	{
//	if ((TS2_Direction == UP)  && (Tmp2Val >= 39) && (Tmp3Val >= Prescribed_T3))   // if direction is upward restrict correction if TS2 not yet 39
		if (((TS2_Direction == UP)  && (Tmp2Val >= (Prescribed_T2+1))))// || (Tmp3Val >= (Prescribed_T3+0.5)))   // if direction is upward restrict correction if TS2 not yet 39
   8a952:	4b61      	ldr	r3, [pc, #388]	; (8aad8 <Coarse_DutyCorrection+0x7b0>)
   8a954:	781b      	ldrb	r3, [r3, #0]
   8a956:	2b00      	cmp	r3, #0
   8a958:	d134      	bne.n	8a9c4 <Coarse_DutyCorrection+0x69c>
   8a95a:	4b60      	ldr	r3, [pc, #384]	; (8aadc <Coarse_DutyCorrection+0x7b4>)
   8a95c:	681a      	ldr	r2, [r3, #0]
   8a95e:	4b6d      	ldr	r3, [pc, #436]	; (8ab14 <Coarse_DutyCorrection+0x7ec>)
   8a960:	4610      	mov	r0, r2
   8a962:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   8a966:	4798      	blx	r3
   8a968:	4603      	mov	r3, r0
   8a96a:	4619      	mov	r1, r3
   8a96c:	4b5d      	ldr	r3, [pc, #372]	; (8aae4 <Coarse_DutyCorrection+0x7bc>)
   8a96e:	681a      	ldr	r2, [r3, #0]
   8a970:	4b5f      	ldr	r3, [pc, #380]	; (8aaf0 <Coarse_DutyCorrection+0x7c8>)
   8a972:	4608      	mov	r0, r1
   8a974:	4611      	mov	r1, r2
   8a976:	4798      	blx	r3
   8a978:	4603      	mov	r3, r0
   8a97a:	2b00      	cmp	r3, #0
   8a97c:	d022      	beq.n	8a9c4 <Coarse_DutyCorrection+0x69c>
		{                                      // earlier was 41 01082017
												// earlier 42.5 04082017			
			avg_duty = avg_duty - duty_count;
   8a97e:	4b62      	ldr	r3, [pc, #392]	; (8ab08 <Coarse_DutyCorrection+0x7e0>)
   8a980:	881b      	ldrh	r3, [r3, #0]
   8a982:	b29a      	uxth	r2, r3
   8a984:	4b5f      	ldr	r3, [pc, #380]	; (8ab04 <Coarse_DutyCorrection+0x7dc>)
   8a986:	781b      	ldrb	r3, [r3, #0]
   8a988:	b29b      	uxth	r3, r3
   8a98a:	1ad3      	subs	r3, r2, r3
   8a98c:	b29b      	uxth	r3, r3
   8a98e:	b29a      	uxth	r2, r3
   8a990:	4b5d      	ldr	r3, [pc, #372]	; (8ab08 <Coarse_DutyCorrection+0x7e0>)
   8a992:	801a      	strh	r2, [r3, #0]
				
			if ((avg_duty <= 1000) && (Tmp3Val < Prescribed_T3) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   8a994:	4b5c      	ldr	r3, [pc, #368]	; (8ab08 <Coarse_DutyCorrection+0x7e0>)
   8a996:	881b      	ldrh	r3, [r3, #0]
   8a998:	b21b      	sxth	r3, r3
   8a99a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   8a99e:	dc10      	bgt.n	8a9c2 <Coarse_DutyCorrection+0x69a>
   8a9a0:	4b55      	ldr	r3, [pc, #340]	; (8aaf8 <Coarse_DutyCorrection+0x7d0>)
   8a9a2:	6819      	ldr	r1, [r3, #0]
   8a9a4:	4b55      	ldr	r3, [pc, #340]	; (8aafc <Coarse_DutyCorrection+0x7d4>)
   8a9a6:	681a      	ldr	r2, [r3, #0]
   8a9a8:	4b55      	ldr	r3, [pc, #340]	; (8ab00 <Coarse_DutyCorrection+0x7d8>)
   8a9aa:	4608      	mov	r0, r1
   8a9ac:	4611      	mov	r1, r2
   8a9ae:	4798      	blx	r3
   8a9b0:	4603      	mov	r3, r0
   8a9b2:	2b00      	cmp	r3, #0
   8a9b4:	d100      	bne.n	8a9b8 <Coarse_DutyCorrection+0x690>
   8a9b6:	e14c      	b.n	8ac52 <Coarse_DutyCorrection+0x92a>
			{
				avg_duty = 1800;    // avoiding negATIVE values for the avg duty, which shouldnt happen in regular run
   8a9b8:	4b53      	ldr	r3, [pc, #332]	; (8ab08 <Coarse_DutyCorrection+0x7e0>)
   8a9ba:	f44f 62e1 	mov.w	r2, #1800	; 0x708
   8a9be:	801a      	strh	r2, [r3, #0]
		if (((TS2_Direction == UP)  && (Tmp2Val >= (Prescribed_T2+1))))// || (Tmp3Val >= (Prescribed_T3+0.5)))   // if direction is upward restrict correction if TS2 not yet 39
		{                                      // earlier was 41 01082017
												// earlier 42.5 04082017			
			avg_duty = avg_duty - duty_count;
				
			if ((avg_duty <= 1000) && (Tmp3Val < Prescribed_T3) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   8a9c0:	e147      	b.n	8ac52 <Coarse_DutyCorrection+0x92a>
   8a9c2:	e146      	b.n	8ac52 <Coarse_DutyCorrection+0x92a>
			{
				avg_duty = 1800;    // avoiding negATIVE values for the avg duty, which shouldnt happen in regular run
			}
		}
		else if ((TS2_Direction == UP)  && ((Tmp2Val >= (Prescribed_T2)) && (Tmp3Val > (Prescribed_T3+0.1))))  // gOPAL: EARLIER 37 CHANGED ON 07082017
   8a9c4:	4b44      	ldr	r3, [pc, #272]	; (8aad8 <Coarse_DutyCorrection+0x7b0>)
   8a9c6:	781b      	ldrb	r3, [r3, #0]
   8a9c8:	2b00      	cmp	r3, #0
   8a9ca:	d148      	bne.n	8aa5e <Coarse_DutyCorrection+0x736>
   8a9cc:	4b45      	ldr	r3, [pc, #276]	; (8aae4 <Coarse_DutyCorrection+0x7bc>)
   8a9ce:	6819      	ldr	r1, [r3, #0]
   8a9d0:	4b42      	ldr	r3, [pc, #264]	; (8aadc <Coarse_DutyCorrection+0x7b4>)
   8a9d2:	681a      	ldr	r2, [r3, #0]
   8a9d4:	4b44      	ldr	r3, [pc, #272]	; (8aae8 <Coarse_DutyCorrection+0x7c0>)
   8a9d6:	4608      	mov	r0, r1
   8a9d8:	4611      	mov	r1, r2
   8a9da:	4798      	blx	r3
   8a9dc:	4603      	mov	r3, r0
   8a9de:	2b00      	cmp	r3, #0
   8a9e0:	d03d      	beq.n	8aa5e <Coarse_DutyCorrection+0x736>
   8a9e2:	4b45      	ldr	r3, [pc, #276]	; (8aaf8 <Coarse_DutyCorrection+0x7d0>)
   8a9e4:	681a      	ldr	r2, [r3, #0]
   8a9e6:	4b4c      	ldr	r3, [pc, #304]	; (8ab18 <Coarse_DutyCorrection+0x7f0>)
   8a9e8:	4610      	mov	r0, r2
   8a9ea:	4798      	blx	r3
   8a9ec:	4680      	mov	r8, r0
   8a9ee:	4689      	mov	r9, r1
   8a9f0:	4b42      	ldr	r3, [pc, #264]	; (8aafc <Coarse_DutyCorrection+0x7d4>)
   8a9f2:	681a      	ldr	r2, [r3, #0]
   8a9f4:	4b48      	ldr	r3, [pc, #288]	; (8ab18 <Coarse_DutyCorrection+0x7f0>)
   8a9f6:	4610      	mov	r0, r2
   8a9f8:	4798      	blx	r3
   8a9fa:	4602      	mov	r2, r0
   8a9fc:	460b      	mov	r3, r1
   8a9fe:	4c47      	ldr	r4, [pc, #284]	; (8ab1c <Coarse_DutyCorrection+0x7f4>)
   8aa00:	4610      	mov	r0, r2
   8aa02:	4619      	mov	r1, r3
   8aa04:	a332      	add	r3, pc, #200	; (adr r3, 8aad0 <Coarse_DutyCorrection+0x7a8>)
   8aa06:	e9d3 2300 	ldrd	r2, r3, [r3]
   8aa0a:	47a0      	blx	r4
   8aa0c:	4602      	mov	r2, r0
   8aa0e:	460b      	mov	r3, r1
   8aa10:	4c43      	ldr	r4, [pc, #268]	; (8ab20 <Coarse_DutyCorrection+0x7f8>)
   8aa12:	4640      	mov	r0, r8
   8aa14:	4649      	mov	r1, r9
   8aa16:	47a0      	blx	r4
   8aa18:	4603      	mov	r3, r0
   8aa1a:	2b00      	cmp	r3, #0
   8aa1c:	d01f      	beq.n	8aa5e <Coarse_DutyCorrection+0x736>
		{
			avg_duty = avg_duty - 10;
   8aa1e:	4b3a      	ldr	r3, [pc, #232]	; (8ab08 <Coarse_DutyCorrection+0x7e0>)
   8aa20:	881b      	ldrh	r3, [r3, #0]
   8aa22:	b29b      	uxth	r3, r3
   8aa24:	3b0a      	subs	r3, #10
   8aa26:	b29b      	uxth	r3, r3
   8aa28:	b29a      	uxth	r2, r3
   8aa2a:	4b37      	ldr	r3, [pc, #220]	; (8ab08 <Coarse_DutyCorrection+0x7e0>)
   8aa2c:	801a      	strh	r2, [r3, #0]
			if((avg_duty <= 1000) && (Tmp3Val < Prescribed_T3) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   8aa2e:	4b36      	ldr	r3, [pc, #216]	; (8ab08 <Coarse_DutyCorrection+0x7e0>)
   8aa30:	881b      	ldrh	r3, [r3, #0]
   8aa32:	b21b      	sxth	r3, r3
   8aa34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   8aa38:	dc10      	bgt.n	8aa5c <Coarse_DutyCorrection+0x734>
   8aa3a:	4b2f      	ldr	r3, [pc, #188]	; (8aaf8 <Coarse_DutyCorrection+0x7d0>)
   8aa3c:	6819      	ldr	r1, [r3, #0]
   8aa3e:	4b2f      	ldr	r3, [pc, #188]	; (8aafc <Coarse_DutyCorrection+0x7d4>)
   8aa40:	681a      	ldr	r2, [r3, #0]
   8aa42:	4b2f      	ldr	r3, [pc, #188]	; (8ab00 <Coarse_DutyCorrection+0x7d8>)
   8aa44:	4608      	mov	r0, r1
   8aa46:	4611      	mov	r1, r2
   8aa48:	4798      	blx	r3
   8aa4a:	4603      	mov	r3, r0
   8aa4c:	2b00      	cmp	r3, #0
   8aa4e:	d100      	bne.n	8aa52 <Coarse_DutyCorrection+0x72a>
   8aa50:	e0ff      	b.n	8ac52 <Coarse_DutyCorrection+0x92a>
			{
				avg_duty = 1800;    // avoiding negATIVE values for the avg duty, which shouldnt happen in regular run
   8aa52:	4b2d      	ldr	r3, [pc, #180]	; (8ab08 <Coarse_DutyCorrection+0x7e0>)
   8aa54:	f44f 62e1 	mov.w	r2, #1800	; 0x708
   8aa58:	801a      	strh	r2, [r3, #0]
			}
		}
		else if ((TS2_Direction == UP)  && ((Tmp2Val >= (Prescribed_T2)) && (Tmp3Val > (Prescribed_T3+0.1))))  // gOPAL: EARLIER 37 CHANGED ON 07082017
		{
			avg_duty = avg_duty - 10;
			if((avg_duty <= 1000) && (Tmp3Val < Prescribed_T3) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   8aa5a:	e0fa      	b.n	8ac52 <Coarse_DutyCorrection+0x92a>
   8aa5c:	e0f9      	b.n	8ac52 <Coarse_DutyCorrection+0x92a>
			{
				avg_duty = 1800;    // avoiding negATIVE values for the avg duty, which shouldnt happen in regular run
			}
			
		}
		else if ((TS2_Direction == UP)  && ((Tmp2Val >= (Prescribed_T2-3)) && (Tmp2Val <= Prescribed_T2)))     
   8aa5e:	4b1e      	ldr	r3, [pc, #120]	; (8aad8 <Coarse_DutyCorrection+0x7b0>)
   8aa60:	781b      	ldrb	r3, [r3, #0]
   8aa62:	2b00      	cmp	r3, #0
   8aa64:	d16c      	bne.n	8ab40 <Coarse_DutyCorrection+0x818>
   8aa66:	4b1d      	ldr	r3, [pc, #116]	; (8aadc <Coarse_DutyCorrection+0x7b4>)
   8aa68:	681a      	ldr	r2, [r3, #0]
   8aa6a:	4b1d      	ldr	r3, [pc, #116]	; (8aae0 <Coarse_DutyCorrection+0x7b8>)
   8aa6c:	4610      	mov	r0, r2
   8aa6e:	492d      	ldr	r1, [pc, #180]	; (8ab24 <Coarse_DutyCorrection+0x7fc>)
   8aa70:	4798      	blx	r3
   8aa72:	4603      	mov	r3, r0
   8aa74:	4619      	mov	r1, r3
   8aa76:	4b1b      	ldr	r3, [pc, #108]	; (8aae4 <Coarse_DutyCorrection+0x7bc>)
   8aa78:	681a      	ldr	r2, [r3, #0]
   8aa7a:	4b1d      	ldr	r3, [pc, #116]	; (8aaf0 <Coarse_DutyCorrection+0x7c8>)
   8aa7c:	4608      	mov	r0, r1
   8aa7e:	4611      	mov	r1, r2
   8aa80:	4798      	blx	r3
   8aa82:	4603      	mov	r3, r0
   8aa84:	2b00      	cmp	r3, #0
   8aa86:	d05b      	beq.n	8ab40 <Coarse_DutyCorrection+0x818>
   8aa88:	4b16      	ldr	r3, [pc, #88]	; (8aae4 <Coarse_DutyCorrection+0x7bc>)
   8aa8a:	6819      	ldr	r1, [r3, #0]
   8aa8c:	4b13      	ldr	r3, [pc, #76]	; (8aadc <Coarse_DutyCorrection+0x7b4>)
   8aa8e:	681a      	ldr	r2, [r3, #0]
   8aa90:	4b17      	ldr	r3, [pc, #92]	; (8aaf0 <Coarse_DutyCorrection+0x7c8>)
   8aa92:	4608      	mov	r0, r1
   8aa94:	4611      	mov	r1, r2
   8aa96:	4798      	blx	r3
   8aa98:	4603      	mov	r3, r0
   8aa9a:	2b00      	cmp	r3, #0
   8aa9c:	d050      	beq.n	8ab40 <Coarse_DutyCorrection+0x818>
		{
			if((Tmp1Val <= 36) && (Tmp3Val < Prescribed_T3))
   8aa9e:	4b13      	ldr	r3, [pc, #76]	; (8aaec <Coarse_DutyCorrection+0x7c4>)
   8aaa0:	681a      	ldr	r2, [r3, #0]
   8aaa2:	4b13      	ldr	r3, [pc, #76]	; (8aaf0 <Coarse_DutyCorrection+0x7c8>)
   8aaa4:	4610      	mov	r0, r2
   8aaa6:	4913      	ldr	r1, [pc, #76]	; (8aaf4 <Coarse_DutyCorrection+0x7cc>)
   8aaa8:	4798      	blx	r3
   8aaaa:	4603      	mov	r3, r0
   8aaac:	2b00      	cmp	r3, #0
   8aaae:	f000 80d0 	beq.w	8ac52 <Coarse_DutyCorrection+0x92a>
   8aab2:	4b11      	ldr	r3, [pc, #68]	; (8aaf8 <Coarse_DutyCorrection+0x7d0>)
   8aab4:	6819      	ldr	r1, [r3, #0]
   8aab6:	4b11      	ldr	r3, [pc, #68]	; (8aafc <Coarse_DutyCorrection+0x7d4>)
   8aab8:	681a      	ldr	r2, [r3, #0]
   8aaba:	4b11      	ldr	r3, [pc, #68]	; (8ab00 <Coarse_DutyCorrection+0x7d8>)
   8aabc:	4608      	mov	r0, r1
   8aabe:	4611      	mov	r1, r2
   8aac0:	4798      	blx	r3
   8aac2:	4603      	mov	r3, r0
   8aac4:	2b00      	cmp	r3, #0
   8aac6:	d12f      	bne.n	8ab28 <Coarse_DutyCorrection+0x800>
   8aac8:	e0c3      	b.n	8ac52 <Coarse_DutyCorrection+0x92a>
   8aaca:	bf00      	nop
   8aacc:	f3af 8000 	nop.w
   8aad0:	9999999a 	.word	0x9999999a
   8aad4:	3fb99999 	.word	0x3fb99999
   8aad8:	20072196 	.word	0x20072196
   8aadc:	20070550 	.word	0x20070550
   8aae0:	000a6745 	.word	0x000a6745
   8aae4:	200719c0 	.word	0x200719c0
   8aae8:	000a6cbd 	.word	0x000a6cbd
   8aaec:	200719bc 	.word	0x200719bc
   8aaf0:	000a6ca9 	.word	0x000a6ca9
   8aaf4:	42100000 	.word	0x42100000
   8aaf8:	200719c4 	.word	0x200719c4
   8aafc:	20070554 	.word	0x20070554
   8ab00:	000a6c95 	.word	0x000a6c95
   8ab04:	200719e4 	.word	0x200719e4
   8ab08:	200719ae 	.word	0x200719ae
   8ab0c:	00099cb9 	.word	0x00099cb9
   8ab10:	20070558 	.word	0x20070558
   8ab14:	000a6749 	.word	0x000a6749
   8ab18:	000a6031 	.word	0x000a6031
   8ab1c:	000a5d75 	.word	0x000a5d75
   8ab20:	000a65f9 	.word	0x000a65f9
   8ab24:	40400000 	.word	0x40400000
			{
				avg_duty = avg_duty + duty_count;            //To avoid TS2 getting stuck at 36 or 36.5
   8ab28:	4b4f      	ldr	r3, [pc, #316]	; (8ac68 <Coarse_DutyCorrection+0x940>)
   8ab2a:	781b      	ldrb	r3, [r3, #0]
   8ab2c:	b29a      	uxth	r2, r3
   8ab2e:	4b4f      	ldr	r3, [pc, #316]	; (8ac6c <Coarse_DutyCorrection+0x944>)
   8ab30:	881b      	ldrh	r3, [r3, #0]
   8ab32:	b29b      	uxth	r3, r3
   8ab34:	4413      	add	r3, r2
   8ab36:	b29b      	uxth	r3, r3
   8ab38:	b29a      	uxth	r2, r3
   8ab3a:	4b4c      	ldr	r3, [pc, #304]	; (8ac6c <Coarse_DutyCorrection+0x944>)
   8ab3c:	801a      	strh	r2, [r3, #0]
			}
			
		}
		else if ((TS2_Direction == UP)  && ((Tmp2Val >= (Prescribed_T2-3)) && (Tmp2Val <= Prescribed_T2)))     
		{
			if((Tmp1Val <= 36) && (Tmp3Val < Prescribed_T3))
   8ab3e:	e088      	b.n	8ac52 <Coarse_DutyCorrection+0x92a>
			{
				avg_duty = avg_duty + duty_count;            //To avoid TS2 getting stuck at 36 or 36.5
			}
			
		}
		else if ((TS2_Direction == DOWN) && (Tmp2Val <= Prescribed_T2) )        // last was 39
   8ab40:	4b4b      	ldr	r3, [pc, #300]	; (8ac70 <Coarse_DutyCorrection+0x948>)
   8ab42:	781b      	ldrb	r3, [r3, #0]
   8ab44:	2b01      	cmp	r3, #1
   8ab46:	d138      	bne.n	8abba <Coarse_DutyCorrection+0x892>
   8ab48:	4b4a      	ldr	r3, [pc, #296]	; (8ac74 <Coarse_DutyCorrection+0x94c>)
   8ab4a:	6819      	ldr	r1, [r3, #0]
   8ab4c:	4b4a      	ldr	r3, [pc, #296]	; (8ac78 <Coarse_DutyCorrection+0x950>)
   8ab4e:	681a      	ldr	r2, [r3, #0]
   8ab50:	4b4a      	ldr	r3, [pc, #296]	; (8ac7c <Coarse_DutyCorrection+0x954>)
   8ab52:	4608      	mov	r0, r1
   8ab54:	4611      	mov	r1, r2
   8ab56:	4798      	blx	r3
   8ab58:	4603      	mov	r3, r0
   8ab5a:	2b00      	cmp	r3, #0
   8ab5c:	d02d      	beq.n	8abba <Coarse_DutyCorrection+0x892>
		{
			if((Tmp1Val <= 36) && (Tmp3Val < Prescribed_T3))   // Gopal: added check of Ts3 to avoid avg duty increment when TS3 is more than 37
   8ab5e:	4b48      	ldr	r3, [pc, #288]	; (8ac80 <Coarse_DutyCorrection+0x958>)
   8ab60:	681a      	ldr	r2, [r3, #0]
   8ab62:	4b46      	ldr	r3, [pc, #280]	; (8ac7c <Coarse_DutyCorrection+0x954>)
   8ab64:	4610      	mov	r0, r2
   8ab66:	4947      	ldr	r1, [pc, #284]	; (8ac84 <Coarse_DutyCorrection+0x95c>)
   8ab68:	4798      	blx	r3
   8ab6a:	4603      	mov	r3, r0
   8ab6c:	2b00      	cmp	r3, #0
   8ab6e:	d015      	beq.n	8ab9c <Coarse_DutyCorrection+0x874>
   8ab70:	4b45      	ldr	r3, [pc, #276]	; (8ac88 <Coarse_DutyCorrection+0x960>)
   8ab72:	6819      	ldr	r1, [r3, #0]
   8ab74:	4b45      	ldr	r3, [pc, #276]	; (8ac8c <Coarse_DutyCorrection+0x964>)
   8ab76:	681a      	ldr	r2, [r3, #0]
   8ab78:	4b45      	ldr	r3, [pc, #276]	; (8ac90 <Coarse_DutyCorrection+0x968>)
   8ab7a:	4608      	mov	r0, r1
   8ab7c:	4611      	mov	r1, r2
   8ab7e:	4798      	blx	r3
   8ab80:	4603      	mov	r3, r0
   8ab82:	2b00      	cmp	r3, #0
   8ab84:	d00a      	beq.n	8ab9c <Coarse_DutyCorrection+0x874>
			{
				avg_duty = avg_duty + duty_count;            
   8ab86:	4b38      	ldr	r3, [pc, #224]	; (8ac68 <Coarse_DutyCorrection+0x940>)
   8ab88:	781b      	ldrb	r3, [r3, #0]
   8ab8a:	b29a      	uxth	r2, r3
   8ab8c:	4b37      	ldr	r3, [pc, #220]	; (8ac6c <Coarse_DutyCorrection+0x944>)
   8ab8e:	881b      	ldrh	r3, [r3, #0]
   8ab90:	b29b      	uxth	r3, r3
   8ab92:	4413      	add	r3, r2
   8ab94:	b29b      	uxth	r3, r3
   8ab96:	b29a      	uxth	r2, r3
   8ab98:	4b34      	ldr	r3, [pc, #208]	; (8ac6c <Coarse_DutyCorrection+0x944>)
   8ab9a:	801a      	strh	r2, [r3, #0]
			}
			
			if (avg_duty > 2500)  //Sunil limiting to 2300
   8ab9c:	4b33      	ldr	r3, [pc, #204]	; (8ac6c <Coarse_DutyCorrection+0x944>)
   8ab9e:	881b      	ldrh	r3, [r3, #0]
   8aba0:	b21b      	sxth	r3, r3
   8aba2:	f640 12c4 	movw	r2, #2500	; 0x9c4
   8aba6:	4293      	cmp	r3, r2
   8aba8:	dd06      	ble.n	8abb8 <Coarse_DutyCorrection+0x890>
			{
				avg_duty = 2500;
   8abaa:	4b30      	ldr	r3, [pc, #192]	; (8ac6c <Coarse_DutyCorrection+0x944>)
   8abac:	f640 12c4 	movw	r2, #2500	; 0x9c4
   8abb0:	801a      	strh	r2, [r3, #0]
				sv_cntrl_poweroffheater();
   8abb2:	4b38      	ldr	r3, [pc, #224]	; (8ac94 <Coarse_DutyCorrection+0x96c>)
   8abb4:	4798      	blx	r3
			if((Tmp1Val <= 36) && (Tmp3Val < Prescribed_T3))   // Gopal: added check of Ts3 to avoid avg duty increment when TS3 is more than 37
			{
				avg_duty = avg_duty + duty_count;            
			}
			
			if (avg_duty > 2500)  //Sunil limiting to 2300
   8abb6:	e04c      	b.n	8ac52 <Coarse_DutyCorrection+0x92a>
   8abb8:	e04b      	b.n	8ac52 <Coarse_DutyCorrection+0x92a>
				avg_duty = 2500;
				sv_cntrl_poweroffheater();
				//			  HeaterState = CL_HEATER_STATE_OFF;
			}
		}
		else if (TS2_Direction == NUETRAL){
   8abba:	4b2d      	ldr	r3, [pc, #180]	; (8ac70 <Coarse_DutyCorrection+0x948>)
   8abbc:	781b      	ldrb	r3, [r3, #0]
   8abbe:	2b02      	cmp	r3, #2
   8abc0:	d147      	bne.n	8ac52 <Coarse_DutyCorrection+0x92a>
			if (Check_4_Neutralstability())
   8abc2:	4b35      	ldr	r3, [pc, #212]	; (8ac98 <Coarse_DutyCorrection+0x970>)
   8abc4:	4798      	blx	r3
   8abc6:	4603      	mov	r3, r0
   8abc8:	2b00      	cmp	r3, #0
   8abca:	d042      	beq.n	8ac52 <Coarse_DutyCorrection+0x92a>
			{
				if ((Tmp3Val - Prescribed_T3) >0.2)
   8abcc:	4b2e      	ldr	r3, [pc, #184]	; (8ac88 <Coarse_DutyCorrection+0x960>)
   8abce:	6819      	ldr	r1, [r3, #0]
   8abd0:	4b2e      	ldr	r3, [pc, #184]	; (8ac8c <Coarse_DutyCorrection+0x964>)
   8abd2:	681a      	ldr	r2, [r3, #0]
   8abd4:	4b31      	ldr	r3, [pc, #196]	; (8ac9c <Coarse_DutyCorrection+0x974>)
   8abd6:	4608      	mov	r0, r1
   8abd8:	4611      	mov	r1, r2
   8abda:	4798      	blx	r3
   8abdc:	4603      	mov	r3, r0
   8abde:	461a      	mov	r2, r3
   8abe0:	4b2f      	ldr	r3, [pc, #188]	; (8aca0 <Coarse_DutyCorrection+0x978>)
   8abe2:	4610      	mov	r0, r2
   8abe4:	4798      	blx	r3
   8abe6:	4602      	mov	r2, r0
   8abe8:	460b      	mov	r3, r1
   8abea:	4c2e      	ldr	r4, [pc, #184]	; (8aca4 <Coarse_DutyCorrection+0x97c>)
   8abec:	4610      	mov	r0, r2
   8abee:	4619      	mov	r1, r3
   8abf0:	a31b      	add	r3, pc, #108	; (adr r3, 8ac60 <Coarse_DutyCorrection+0x938>)
   8abf2:	e9d3 2300 	ldrd	r2, r3, [r3]
   8abf6:	47a0      	blx	r4
   8abf8:	4603      	mov	r3, r0
   8abfa:	2b00      	cmp	r3, #0
   8abfc:	d008      	beq.n	8ac10 <Coarse_DutyCorrection+0x8e8>
				{
					avg_duty = avg_duty-6;
   8abfe:	4b1b      	ldr	r3, [pc, #108]	; (8ac6c <Coarse_DutyCorrection+0x944>)
   8ac00:	881b      	ldrh	r3, [r3, #0]
   8ac02:	b29b      	uxth	r3, r3
   8ac04:	3b06      	subs	r3, #6
   8ac06:	b29b      	uxth	r3, r3
   8ac08:	b29a      	uxth	r2, r3
   8ac0a:	4b18      	ldr	r3, [pc, #96]	; (8ac6c <Coarse_DutyCorrection+0x944>)
   8ac0c:	801a      	strh	r2, [r3, #0]
   8ac0e:	e020      	b.n	8ac52 <Coarse_DutyCorrection+0x92a>
				}
				else if ((Prescribed_T3- Tmp3Val) >0.2)
   8ac10:	4b1e      	ldr	r3, [pc, #120]	; (8ac8c <Coarse_DutyCorrection+0x964>)
   8ac12:	6819      	ldr	r1, [r3, #0]
   8ac14:	4b1c      	ldr	r3, [pc, #112]	; (8ac88 <Coarse_DutyCorrection+0x960>)
   8ac16:	681a      	ldr	r2, [r3, #0]
   8ac18:	4b20      	ldr	r3, [pc, #128]	; (8ac9c <Coarse_DutyCorrection+0x974>)
   8ac1a:	4608      	mov	r0, r1
   8ac1c:	4611      	mov	r1, r2
   8ac1e:	4798      	blx	r3
   8ac20:	4603      	mov	r3, r0
   8ac22:	461a      	mov	r2, r3
   8ac24:	4b1e      	ldr	r3, [pc, #120]	; (8aca0 <Coarse_DutyCorrection+0x978>)
   8ac26:	4610      	mov	r0, r2
   8ac28:	4798      	blx	r3
   8ac2a:	4602      	mov	r2, r0
   8ac2c:	460b      	mov	r3, r1
   8ac2e:	4c1d      	ldr	r4, [pc, #116]	; (8aca4 <Coarse_DutyCorrection+0x97c>)
   8ac30:	4610      	mov	r0, r2
   8ac32:	4619      	mov	r1, r3
   8ac34:	a30a      	add	r3, pc, #40	; (adr r3, 8ac60 <Coarse_DutyCorrection+0x938>)
   8ac36:	e9d3 2300 	ldrd	r2, r3, [r3]
   8ac3a:	47a0      	blx	r4
   8ac3c:	4603      	mov	r3, r0
   8ac3e:	2b00      	cmp	r3, #0
   8ac40:	d007      	beq.n	8ac52 <Coarse_DutyCorrection+0x92a>
				{
					avg_duty = avg_duty+6;
   8ac42:	4b0a      	ldr	r3, [pc, #40]	; (8ac6c <Coarse_DutyCorrection+0x944>)
   8ac44:	881b      	ldrh	r3, [r3, #0]
   8ac46:	b29b      	uxth	r3, r3
   8ac48:	3306      	adds	r3, #6
   8ac4a:	b29b      	uxth	r3, r3
   8ac4c:	b29a      	uxth	r2, r3
   8ac4e:	4b07      	ldr	r3, [pc, #28]	; (8ac6c <Coarse_DutyCorrection+0x944>)
   8ac50:	801a      	strh	r2, [r3, #0]
				}
			}
		}
	
		avg_duty = avg_duty;
   8ac52:	4b06      	ldr	r3, [pc, #24]	; (8ac6c <Coarse_DutyCorrection+0x944>)
   8ac54:	881a      	ldrh	r2, [r3, #0]
   8ac56:	4b05      	ldr	r3, [pc, #20]	; (8ac6c <Coarse_DutyCorrection+0x944>)
   8ac58:	801a      	strh	r2, [r3, #0]
		
	}
}
   8ac5a:	e8bd 8398 	ldmia.w	sp!, {r3, r4, r7, r8, r9, pc}
   8ac5e:	bf00      	nop
   8ac60:	9999999a 	.word	0x9999999a
   8ac64:	3fc99999 	.word	0x3fc99999
   8ac68:	200719e4 	.word	0x200719e4
   8ac6c:	200719ae 	.word	0x200719ae
   8ac70:	20072196 	.word	0x20072196
   8ac74:	200719c0 	.word	0x200719c0
   8ac78:	20070550 	.word	0x20070550
   8ac7c:	000a6ca9 	.word	0x000a6ca9
   8ac80:	200719bc 	.word	0x200719bc
   8ac84:	42100000 	.word	0x42100000
   8ac88:	200719c4 	.word	0x200719c4
   8ac8c:	20070554 	.word	0x20070554
   8ac90:	000a6c95 	.word	0x000a6c95
   8ac94:	00099cb9 	.word	0x00099cb9
   8ac98:	0008a139 	.word	0x0008a139
   8ac9c:	000a6745 	.word	0x000a6745
   8aca0:	000a6031 	.word	0x000a6031
   8aca4:	000a65f9 	.word	0x000a65f9

0008aca8 <Fine_DutyCorrection>:

Fine_DutyCorrection()                                  // to be fine tuned based on further testing
{
   8aca8:	e92d 4398 	stmdb	sp!, {r3, r4, r7, r8, r9, lr}
   8acac:	af00      	add	r7, sp, #0
	if (TS2_slope <= TS2_SLOPE1)
   8acae:	4b88      	ldr	r3, [pc, #544]	; (8aed0 <Fine_DutyCorrection+0x228>)
   8acb0:	681a      	ldr	r2, [r3, #0]
   8acb2:	4b88      	ldr	r3, [pc, #544]	; (8aed4 <Fine_DutyCorrection+0x22c>)
   8acb4:	4610      	mov	r0, r2
   8acb6:	4798      	blx	r3
   8acb8:	4602      	mov	r2, r0
   8acba:	460b      	mov	r3, r1
   8acbc:	4c86      	ldr	r4, [pc, #536]	; (8aed8 <Fine_DutyCorrection+0x230>)
   8acbe:	4610      	mov	r0, r2
   8acc0:	4619      	mov	r1, r3
   8acc2:	a37f      	add	r3, pc, #508	; (adr r3, 8aec0 <Fine_DutyCorrection+0x218>)
   8acc4:	e9d3 2300 	ldrd	r2, r3, [r3]
   8acc8:	47a0      	blx	r4
   8acca:	4603      	mov	r3, r0
   8accc:	2b00      	cmp	r3, #0
   8acce:	d002      	beq.n	8acd6 <Fine_DutyCorrection+0x2e>
	{
		duty_count = 42;												
   8acd0:	4b82      	ldr	r3, [pc, #520]	; (8aedc <Fine_DutyCorrection+0x234>)
   8acd2:	222a      	movs	r2, #42	; 0x2a
   8acd4:	701a      	strb	r2, [r3, #0]
	}
	if ((TS2_slope <= TS2_SLOPE2) && (TS2_slope > TS2_SLOPE1))
   8acd6:	4b7e      	ldr	r3, [pc, #504]	; (8aed0 <Fine_DutyCorrection+0x228>)
   8acd8:	681a      	ldr	r2, [r3, #0]
   8acda:	4b7e      	ldr	r3, [pc, #504]	; (8aed4 <Fine_DutyCorrection+0x22c>)
   8acdc:	4610      	mov	r0, r2
   8acde:	4798      	blx	r3
   8ace0:	4602      	mov	r2, r0
   8ace2:	460b      	mov	r3, r1
   8ace4:	4c7c      	ldr	r4, [pc, #496]	; (8aed8 <Fine_DutyCorrection+0x230>)
   8ace6:	4610      	mov	r0, r2
   8ace8:	4619      	mov	r1, r3
   8acea:	a377      	add	r3, pc, #476	; (adr r3, 8aec8 <Fine_DutyCorrection+0x220>)
   8acec:	e9d3 2300 	ldrd	r2, r3, [r3]
   8acf0:	47a0      	blx	r4
   8acf2:	4603      	mov	r3, r0
   8acf4:	2b00      	cmp	r3, #0
   8acf6:	d013      	beq.n	8ad20 <Fine_DutyCorrection+0x78>
   8acf8:	4b75      	ldr	r3, [pc, #468]	; (8aed0 <Fine_DutyCorrection+0x228>)
   8acfa:	681a      	ldr	r2, [r3, #0]
   8acfc:	4b75      	ldr	r3, [pc, #468]	; (8aed4 <Fine_DutyCorrection+0x22c>)
   8acfe:	4610      	mov	r0, r2
   8ad00:	4798      	blx	r3
   8ad02:	4602      	mov	r2, r0
   8ad04:	460b      	mov	r3, r1
   8ad06:	4c76      	ldr	r4, [pc, #472]	; (8aee0 <Fine_DutyCorrection+0x238>)
   8ad08:	4610      	mov	r0, r2
   8ad0a:	4619      	mov	r1, r3
   8ad0c:	a36c      	add	r3, pc, #432	; (adr r3, 8aec0 <Fine_DutyCorrection+0x218>)
   8ad0e:	e9d3 2300 	ldrd	r2, r3, [r3]
   8ad12:	47a0      	blx	r4
   8ad14:	4603      	mov	r3, r0
   8ad16:	2b00      	cmp	r3, #0
   8ad18:	d002      	beq.n	8ad20 <Fine_DutyCorrection+0x78>
	{
		duty_count = 20;
   8ad1a:	4b70      	ldr	r3, [pc, #448]	; (8aedc <Fine_DutyCorrection+0x234>)
   8ad1c:	2214      	movs	r2, #20
   8ad1e:	701a      	strb	r2, [r3, #0]
	}
	if (TS2_slope >= TS2_SLOPE2)
   8ad20:	4b6b      	ldr	r3, [pc, #428]	; (8aed0 <Fine_DutyCorrection+0x228>)
   8ad22:	681a      	ldr	r2, [r3, #0]
   8ad24:	4b6b      	ldr	r3, [pc, #428]	; (8aed4 <Fine_DutyCorrection+0x22c>)
   8ad26:	4610      	mov	r0, r2
   8ad28:	4798      	blx	r3
   8ad2a:	4602      	mov	r2, r0
   8ad2c:	460b      	mov	r3, r1
   8ad2e:	4c6d      	ldr	r4, [pc, #436]	; (8aee4 <Fine_DutyCorrection+0x23c>)
   8ad30:	4610      	mov	r0, r2
   8ad32:	4619      	mov	r1, r3
   8ad34:	a364      	add	r3, pc, #400	; (adr r3, 8aec8 <Fine_DutyCorrection+0x220>)
   8ad36:	e9d3 2300 	ldrd	r2, r3, [r3]
   8ad3a:	47a0      	blx	r4
   8ad3c:	4603      	mov	r3, r0
   8ad3e:	2b00      	cmp	r3, #0
   8ad40:	d002      	beq.n	8ad48 <Fine_DutyCorrection+0xa0>
	{
		duty_count = 4;
   8ad42:	4b66      	ldr	r3, [pc, #408]	; (8aedc <Fine_DutyCorrection+0x234>)
   8ad44:	2204      	movs	r2, #4
   8ad46:	701a      	strb	r2, [r3, #0]
	}
	
	if (SYSTEM_FLOW == 800)
   8ad48:	4b67      	ldr	r3, [pc, #412]	; (8aee8 <Fine_DutyCorrection+0x240>)
   8ad4a:	681b      	ldr	r3, [r3, #0]
   8ad4c:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   8ad50:	f040 8150 	bne.w	8aff4 <Fine_DutyCorrection+0x34c>
	{
		if ((TS2_Direction == UP ) && (Tmp2Val >= (Prescribed_T2+0.5)) && (Tmp3Val >= (Prescribed_T3+0.5)))     // Gopal added TS3 check as to reduce duty if ts3 goes above 37.5
   8ad54:	4b65      	ldr	r3, [pc, #404]	; (8aeec <Fine_DutyCorrection+0x244>)
   8ad56:	781b      	ldrb	r3, [r3, #0]
   8ad58:	2b00      	cmp	r3, #0
   8ad5a:	d152      	bne.n	8ae02 <Fine_DutyCorrection+0x15a>
   8ad5c:	4b64      	ldr	r3, [pc, #400]	; (8aef0 <Fine_DutyCorrection+0x248>)
   8ad5e:	681a      	ldr	r2, [r3, #0]
   8ad60:	4b5c      	ldr	r3, [pc, #368]	; (8aed4 <Fine_DutyCorrection+0x22c>)
   8ad62:	4610      	mov	r0, r2
   8ad64:	4798      	blx	r3
   8ad66:	4680      	mov	r8, r0
   8ad68:	4689      	mov	r9, r1
   8ad6a:	4b62      	ldr	r3, [pc, #392]	; (8aef4 <Fine_DutyCorrection+0x24c>)
   8ad6c:	681a      	ldr	r2, [r3, #0]
   8ad6e:	4b59      	ldr	r3, [pc, #356]	; (8aed4 <Fine_DutyCorrection+0x22c>)
   8ad70:	4610      	mov	r0, r2
   8ad72:	4798      	blx	r3
   8ad74:	4602      	mov	r2, r0
   8ad76:	460b      	mov	r3, r1
   8ad78:	4c5f      	ldr	r4, [pc, #380]	; (8aef8 <Fine_DutyCorrection+0x250>)
   8ad7a:	4610      	mov	r0, r2
   8ad7c:	4619      	mov	r1, r3
   8ad7e:	f04f 0200 	mov.w	r2, #0
   8ad82:	4b5e      	ldr	r3, [pc, #376]	; (8aefc <Fine_DutyCorrection+0x254>)
   8ad84:	47a0      	blx	r4
   8ad86:	4602      	mov	r2, r0
   8ad88:	460b      	mov	r3, r1
   8ad8a:	4c56      	ldr	r4, [pc, #344]	; (8aee4 <Fine_DutyCorrection+0x23c>)
   8ad8c:	4640      	mov	r0, r8
   8ad8e:	4649      	mov	r1, r9
   8ad90:	47a0      	blx	r4
   8ad92:	4603      	mov	r3, r0
   8ad94:	2b00      	cmp	r3, #0
   8ad96:	d034      	beq.n	8ae02 <Fine_DutyCorrection+0x15a>
   8ad98:	4b59      	ldr	r3, [pc, #356]	; (8af00 <Fine_DutyCorrection+0x258>)
   8ad9a:	681a      	ldr	r2, [r3, #0]
   8ad9c:	4b4d      	ldr	r3, [pc, #308]	; (8aed4 <Fine_DutyCorrection+0x22c>)
   8ad9e:	4610      	mov	r0, r2
   8ada0:	4798      	blx	r3
   8ada2:	4680      	mov	r8, r0
   8ada4:	4689      	mov	r9, r1
   8ada6:	4b57      	ldr	r3, [pc, #348]	; (8af04 <Fine_DutyCorrection+0x25c>)
   8ada8:	681a      	ldr	r2, [r3, #0]
   8adaa:	4b4a      	ldr	r3, [pc, #296]	; (8aed4 <Fine_DutyCorrection+0x22c>)
   8adac:	4610      	mov	r0, r2
   8adae:	4798      	blx	r3
   8adb0:	4602      	mov	r2, r0
   8adb2:	460b      	mov	r3, r1
   8adb4:	4c50      	ldr	r4, [pc, #320]	; (8aef8 <Fine_DutyCorrection+0x250>)
   8adb6:	4610      	mov	r0, r2
   8adb8:	4619      	mov	r1, r3
   8adba:	f04f 0200 	mov.w	r2, #0
   8adbe:	4b4f      	ldr	r3, [pc, #316]	; (8aefc <Fine_DutyCorrection+0x254>)
   8adc0:	47a0      	blx	r4
   8adc2:	4602      	mov	r2, r0
   8adc4:	460b      	mov	r3, r1
   8adc6:	4c47      	ldr	r4, [pc, #284]	; (8aee4 <Fine_DutyCorrection+0x23c>)
   8adc8:	4640      	mov	r0, r8
   8adca:	4649      	mov	r1, r9
   8adcc:	47a0      	blx	r4
   8adce:	4603      	mov	r3, r0
   8add0:	2b00      	cmp	r3, #0
   8add2:	d016      	beq.n	8ae02 <Fine_DutyCorrection+0x15a>
		{
			avg_duty = avg_duty - duty_count;
   8add4:	4b4c      	ldr	r3, [pc, #304]	; (8af08 <Fine_DutyCorrection+0x260>)
   8add6:	881b      	ldrh	r3, [r3, #0]
   8add8:	b29a      	uxth	r2, r3
   8adda:	4b40      	ldr	r3, [pc, #256]	; (8aedc <Fine_DutyCorrection+0x234>)
   8addc:	781b      	ldrb	r3, [r3, #0]
   8adde:	b29b      	uxth	r3, r3
   8ade0:	1ad3      	subs	r3, r2, r3
   8ade2:	b29b      	uxth	r3, r3
   8ade4:	b29a      	uxth	r2, r3
   8ade6:	4b48      	ldr	r3, [pc, #288]	; (8af08 <Fine_DutyCorrection+0x260>)
   8ade8:	801a      	strh	r2, [r3, #0]
			
			if ((avg_duty <= 1000) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   8adea:	4b47      	ldr	r3, [pc, #284]	; (8af08 <Fine_DutyCorrection+0x260>)
   8adec:	881b      	ldrh	r3, [r3, #0]
   8adee:	b21b      	sxth	r3, r3
   8adf0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   8adf4:	dc04      	bgt.n	8ae00 <Fine_DutyCorrection+0x158>
			{
				avg_duty = 1800;    // avoiding negative values for the avg duty, which shouldn/t happen in regular run
   8adf6:	4b44      	ldr	r3, [pc, #272]	; (8af08 <Fine_DutyCorrection+0x260>)
   8adf8:	f44f 62e1 	mov.w	r2, #1800	; 0x708
   8adfc:	801a      	strh	r2, [r3, #0]
	{
		if ((TS2_Direction == UP ) && (Tmp2Val >= (Prescribed_T2+0.5)) && (Tmp3Val >= (Prescribed_T3+0.5)))     // Gopal added TS3 check as to reduce duty if ts3 goes above 37.5
		{
			avg_duty = avg_duty - duty_count;
			
			if ((avg_duty <= 1000) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   8adfe:	e0f8      	b.n	8aff2 <Fine_DutyCorrection+0x34a>
   8ae00:	e0f7      	b.n	8aff2 <Fine_DutyCorrection+0x34a>
			{
				avg_duty = 1800;    // avoiding negative values for the avg duty, which shouldn/t happen in regular run
			}
		}
		else if ((TS2_Direction == UP)  && ((Tmp2Val >= (Prescribed_T2-2)) && (Tmp2Val <= (Prescribed_T2+2.5))) && (Tmp3Val <= (Prescribed_T3+0.5)) )  // Gopal added TS3 check as to increase duty if ts3 goes below 38
   8ae02:	4b3a      	ldr	r3, [pc, #232]	; (8aeec <Fine_DutyCorrection+0x244>)
   8ae04:	781b      	ldrb	r3, [r3, #0]
   8ae06:	2b00      	cmp	r3, #0
   8ae08:	f040 8086 	bne.w	8af18 <Fine_DutyCorrection+0x270>
   8ae0c:	4b39      	ldr	r3, [pc, #228]	; (8aef4 <Fine_DutyCorrection+0x24c>)
   8ae0e:	681a      	ldr	r2, [r3, #0]
   8ae10:	4b3e      	ldr	r3, [pc, #248]	; (8af0c <Fine_DutyCorrection+0x264>)
   8ae12:	4610      	mov	r0, r2
   8ae14:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   8ae18:	4798      	blx	r3
   8ae1a:	4603      	mov	r3, r0
   8ae1c:	4619      	mov	r1, r3
   8ae1e:	4b34      	ldr	r3, [pc, #208]	; (8aef0 <Fine_DutyCorrection+0x248>)
   8ae20:	681a      	ldr	r2, [r3, #0]
   8ae22:	4b3b      	ldr	r3, [pc, #236]	; (8af10 <Fine_DutyCorrection+0x268>)
   8ae24:	4608      	mov	r0, r1
   8ae26:	4611      	mov	r1, r2
   8ae28:	4798      	blx	r3
   8ae2a:	4603      	mov	r3, r0
   8ae2c:	2b00      	cmp	r3, #0
   8ae2e:	d073      	beq.n	8af18 <Fine_DutyCorrection+0x270>
   8ae30:	4b2f      	ldr	r3, [pc, #188]	; (8aef0 <Fine_DutyCorrection+0x248>)
   8ae32:	681a      	ldr	r2, [r3, #0]
   8ae34:	4b27      	ldr	r3, [pc, #156]	; (8aed4 <Fine_DutyCorrection+0x22c>)
   8ae36:	4610      	mov	r0, r2
   8ae38:	4798      	blx	r3
   8ae3a:	4680      	mov	r8, r0
   8ae3c:	4689      	mov	r9, r1
   8ae3e:	4b2d      	ldr	r3, [pc, #180]	; (8aef4 <Fine_DutyCorrection+0x24c>)
   8ae40:	681a      	ldr	r2, [r3, #0]
   8ae42:	4b24      	ldr	r3, [pc, #144]	; (8aed4 <Fine_DutyCorrection+0x22c>)
   8ae44:	4610      	mov	r0, r2
   8ae46:	4798      	blx	r3
   8ae48:	4602      	mov	r2, r0
   8ae4a:	460b      	mov	r3, r1
   8ae4c:	4c2a      	ldr	r4, [pc, #168]	; (8aef8 <Fine_DutyCorrection+0x250>)
   8ae4e:	4610      	mov	r0, r2
   8ae50:	4619      	mov	r1, r3
   8ae52:	f04f 0200 	mov.w	r2, #0
   8ae56:	4b2f      	ldr	r3, [pc, #188]	; (8af14 <Fine_DutyCorrection+0x26c>)
   8ae58:	47a0      	blx	r4
   8ae5a:	4602      	mov	r2, r0
   8ae5c:	460b      	mov	r3, r1
   8ae5e:	4c1e      	ldr	r4, [pc, #120]	; (8aed8 <Fine_DutyCorrection+0x230>)
   8ae60:	4640      	mov	r0, r8
   8ae62:	4649      	mov	r1, r9
   8ae64:	47a0      	blx	r4
   8ae66:	4603      	mov	r3, r0
   8ae68:	2b00      	cmp	r3, #0
   8ae6a:	d055      	beq.n	8af18 <Fine_DutyCorrection+0x270>
   8ae6c:	4b24      	ldr	r3, [pc, #144]	; (8af00 <Fine_DutyCorrection+0x258>)
   8ae6e:	681a      	ldr	r2, [r3, #0]
   8ae70:	4b18      	ldr	r3, [pc, #96]	; (8aed4 <Fine_DutyCorrection+0x22c>)
   8ae72:	4610      	mov	r0, r2
   8ae74:	4798      	blx	r3
   8ae76:	4680      	mov	r8, r0
   8ae78:	4689      	mov	r9, r1
   8ae7a:	4b22      	ldr	r3, [pc, #136]	; (8af04 <Fine_DutyCorrection+0x25c>)
   8ae7c:	681a      	ldr	r2, [r3, #0]
   8ae7e:	4b15      	ldr	r3, [pc, #84]	; (8aed4 <Fine_DutyCorrection+0x22c>)
   8ae80:	4610      	mov	r0, r2
   8ae82:	4798      	blx	r3
   8ae84:	4602      	mov	r2, r0
   8ae86:	460b      	mov	r3, r1
   8ae88:	4c1b      	ldr	r4, [pc, #108]	; (8aef8 <Fine_DutyCorrection+0x250>)
   8ae8a:	4610      	mov	r0, r2
   8ae8c:	4619      	mov	r1, r3
   8ae8e:	f04f 0200 	mov.w	r2, #0
   8ae92:	4b1a      	ldr	r3, [pc, #104]	; (8aefc <Fine_DutyCorrection+0x254>)
   8ae94:	47a0      	blx	r4
   8ae96:	4602      	mov	r2, r0
   8ae98:	460b      	mov	r3, r1
   8ae9a:	4c0f      	ldr	r4, [pc, #60]	; (8aed8 <Fine_DutyCorrection+0x230>)
   8ae9c:	4640      	mov	r0, r8
   8ae9e:	4649      	mov	r1, r9
   8aea0:	47a0      	blx	r4
   8aea2:	4603      	mov	r3, r0
   8aea4:	2b00      	cmp	r3, #0
   8aea6:	d037      	beq.n	8af18 <Fine_DutyCorrection+0x270>
		{																						// earlier value 38 chged on 07082017
			avg_duty = avg_duty + duty_count;            //To avoid TS2 getting stuck at 36 or 36.5
   8aea8:	4b0c      	ldr	r3, [pc, #48]	; (8aedc <Fine_DutyCorrection+0x234>)
   8aeaa:	781b      	ldrb	r3, [r3, #0]
   8aeac:	b29a      	uxth	r2, r3
   8aeae:	4b16      	ldr	r3, [pc, #88]	; (8af08 <Fine_DutyCorrection+0x260>)
   8aeb0:	881b      	ldrh	r3, [r3, #0]
   8aeb2:	b29b      	uxth	r3, r3
   8aeb4:	4413      	add	r3, r2
   8aeb6:	b29b      	uxth	r3, r3
   8aeb8:	b29a      	uxth	r2, r3
   8aeba:	4b13      	ldr	r3, [pc, #76]	; (8af08 <Fine_DutyCorrection+0x260>)
   8aebc:	801a      	strh	r2, [r3, #0]
   8aebe:	e098      	b.n	8aff2 <Fine_DutyCorrection+0x34a>
   8aec0:	eb851eb8 	.word	0xeb851eb8
   8aec4:	3f9eb851 	.word	0x3f9eb851
   8aec8:	33333333 	.word	0x33333333
   8aecc:	3fd33333 	.word	0x3fd33333
   8aed0:	200719e0 	.word	0x200719e0
   8aed4:	000a6031 	.word	0x000a6031
   8aed8:	000a65d1 	.word	0x000a65d1
   8aedc:	200719e4 	.word	0x200719e4
   8aee0:	000a65f9 	.word	0x000a65f9
   8aee4:	000a65e5 	.word	0x000a65e5
   8aee8:	20070558 	.word	0x20070558
   8aeec:	20072196 	.word	0x20072196
   8aef0:	200719c0 	.word	0x200719c0
   8aef4:	20070550 	.word	0x20070550
   8aef8:	000a5d75 	.word	0x000a5d75
   8aefc:	3fe00000 	.word	0x3fe00000
   8af00:	200719c4 	.word	0x200719c4
   8af04:	20070554 	.word	0x20070554
   8af08:	200719ae 	.word	0x200719ae
   8af0c:	000a6745 	.word	0x000a6745
   8af10:	000a6ca9 	.word	0x000a6ca9
   8af14:	40040000 	.word	0x40040000
		}
		else if ((TS2_Direction == DOWN ) && (Tmp2Val <= (Prescribed_T2+0.5)) )
   8af18:	4b97      	ldr	r3, [pc, #604]	; (8b178 <Fine_DutyCorrection+0x4d0>)
   8af1a:	781b      	ldrb	r3, [r3, #0]
   8af1c:	2b01      	cmp	r3, #1
   8af1e:	d15e      	bne.n	8afde <Fine_DutyCorrection+0x336>
   8af20:	4b96      	ldr	r3, [pc, #600]	; (8b17c <Fine_DutyCorrection+0x4d4>)
   8af22:	681a      	ldr	r2, [r3, #0]
   8af24:	4b96      	ldr	r3, [pc, #600]	; (8b180 <Fine_DutyCorrection+0x4d8>)
   8af26:	4610      	mov	r0, r2
   8af28:	4798      	blx	r3
   8af2a:	4680      	mov	r8, r0
   8af2c:	4689      	mov	r9, r1
   8af2e:	4b95      	ldr	r3, [pc, #596]	; (8b184 <Fine_DutyCorrection+0x4dc>)
   8af30:	681a      	ldr	r2, [r3, #0]
   8af32:	4b93      	ldr	r3, [pc, #588]	; (8b180 <Fine_DutyCorrection+0x4d8>)
   8af34:	4610      	mov	r0, r2
   8af36:	4798      	blx	r3
   8af38:	4602      	mov	r2, r0
   8af3a:	460b      	mov	r3, r1
   8af3c:	4c92      	ldr	r4, [pc, #584]	; (8b188 <Fine_DutyCorrection+0x4e0>)
   8af3e:	4610      	mov	r0, r2
   8af40:	4619      	mov	r1, r3
   8af42:	f04f 0200 	mov.w	r2, #0
   8af46:	4b91      	ldr	r3, [pc, #580]	; (8b18c <Fine_DutyCorrection+0x4e4>)
   8af48:	47a0      	blx	r4
   8af4a:	4602      	mov	r2, r0
   8af4c:	460b      	mov	r3, r1
   8af4e:	4c90      	ldr	r4, [pc, #576]	; (8b190 <Fine_DutyCorrection+0x4e8>)
   8af50:	4640      	mov	r0, r8
   8af52:	4649      	mov	r1, r9
   8af54:	47a0      	blx	r4
   8af56:	4603      	mov	r3, r0
   8af58:	2b00      	cmp	r3, #0
   8af5a:	d040      	beq.n	8afde <Fine_DutyCorrection+0x336>
		{
		   if((Tmp1Val <= 36) && (Tmp3Val < Prescribed_T3+0.2))
   8af5c:	4b8d      	ldr	r3, [pc, #564]	; (8b194 <Fine_DutyCorrection+0x4ec>)
   8af5e:	681a      	ldr	r2, [r3, #0]
   8af60:	4b8d      	ldr	r3, [pc, #564]	; (8b198 <Fine_DutyCorrection+0x4f0>)
   8af62:	4610      	mov	r0, r2
   8af64:	498d      	ldr	r1, [pc, #564]	; (8b19c <Fine_DutyCorrection+0x4f4>)
   8af66:	4798      	blx	r3
   8af68:	4603      	mov	r3, r0
   8af6a:	2b00      	cmp	r3, #0
   8af6c:	d028      	beq.n	8afc0 <Fine_DutyCorrection+0x318>
   8af6e:	4b8c      	ldr	r3, [pc, #560]	; (8b1a0 <Fine_DutyCorrection+0x4f8>)
   8af70:	681a      	ldr	r2, [r3, #0]
   8af72:	4b83      	ldr	r3, [pc, #524]	; (8b180 <Fine_DutyCorrection+0x4d8>)
   8af74:	4610      	mov	r0, r2
   8af76:	4798      	blx	r3
   8af78:	4680      	mov	r8, r0
   8af7a:	4689      	mov	r9, r1
   8af7c:	4b89      	ldr	r3, [pc, #548]	; (8b1a4 <Fine_DutyCorrection+0x4fc>)
   8af7e:	681a      	ldr	r2, [r3, #0]
   8af80:	4b7f      	ldr	r3, [pc, #508]	; (8b180 <Fine_DutyCorrection+0x4d8>)
   8af82:	4610      	mov	r0, r2
   8af84:	4798      	blx	r3
   8af86:	4602      	mov	r2, r0
   8af88:	460b      	mov	r3, r1
   8af8a:	4c7f      	ldr	r4, [pc, #508]	; (8b188 <Fine_DutyCorrection+0x4e0>)
   8af8c:	4610      	mov	r0, r2
   8af8e:	4619      	mov	r1, r3
   8af90:	a377      	add	r3, pc, #476	; (adr r3, 8b170 <Fine_DutyCorrection+0x4c8>)
   8af92:	e9d3 2300 	ldrd	r2, r3, [r3]
   8af96:	47a0      	blx	r4
   8af98:	4602      	mov	r2, r0
   8af9a:	460b      	mov	r3, r1
   8af9c:	4c82      	ldr	r4, [pc, #520]	; (8b1a8 <Fine_DutyCorrection+0x500>)
   8af9e:	4640      	mov	r0, r8
   8afa0:	4649      	mov	r1, r9
   8afa2:	47a0      	blx	r4
   8afa4:	4603      	mov	r3, r0
   8afa6:	2b00      	cmp	r3, #0
   8afa8:	d00a      	beq.n	8afc0 <Fine_DutyCorrection+0x318>
			  avg_duty = avg_duty + duty_count;
   8afaa:	4b80      	ldr	r3, [pc, #512]	; (8b1ac <Fine_DutyCorrection+0x504>)
   8afac:	781b      	ldrb	r3, [r3, #0]
   8afae:	b29a      	uxth	r2, r3
   8afb0:	4b7f      	ldr	r3, [pc, #508]	; (8b1b0 <Fine_DutyCorrection+0x508>)
   8afb2:	881b      	ldrh	r3, [r3, #0]
   8afb4:	b29b      	uxth	r3, r3
   8afb6:	4413      	add	r3, r2
   8afb8:	b29b      	uxth	r3, r3
   8afba:	b29a      	uxth	r2, r3
   8afbc:	4b7c      	ldr	r3, [pc, #496]	; (8b1b0 <Fine_DutyCorrection+0x508>)
   8afbe:	801a      	strh	r2, [r3, #0]
		   if (avg_duty > 2300)  //Sunil limiting to 2300
   8afc0:	4b7b      	ldr	r3, [pc, #492]	; (8b1b0 <Fine_DutyCorrection+0x508>)
   8afc2:	881b      	ldrh	r3, [r3, #0]
   8afc4:	b21b      	sxth	r3, r3
   8afc6:	f640 02fc 	movw	r2, #2300	; 0x8fc
   8afca:	4293      	cmp	r3, r2
   8afcc:	dd06      	ble.n	8afdc <Fine_DutyCorrection+0x334>
			{
				avg_duty = 2300;
   8afce:	4b78      	ldr	r3, [pc, #480]	; (8b1b0 <Fine_DutyCorrection+0x508>)
   8afd0:	f640 02fc 	movw	r2, #2300	; 0x8fc
   8afd4:	801a      	strh	r2, [r3, #0]
				sv_cntrl_poweroffheater();
   8afd6:	4b77      	ldr	r3, [pc, #476]	; (8b1b4 <Fine_DutyCorrection+0x50c>)
   8afd8:	4798      	blx	r3
		}
		else if ((TS2_Direction == DOWN ) && (Tmp2Val <= (Prescribed_T2+0.5)) )
		{
		   if((Tmp1Val <= 36) && (Tmp3Val < Prescribed_T3+0.2))
			  avg_duty = avg_duty + duty_count;
		   if (avg_duty > 2300)  //Sunil limiting to 2300
   8afda:	e00a      	b.n	8aff2 <Fine_DutyCorrection+0x34a>
   8afdc:	e009      	b.n	8aff2 <Fine_DutyCorrection+0x34a>
				avg_duty = 2300;
				sv_cntrl_poweroffheater();
				//			HeaterState = CL_HEATER_STATE_OFF;
			}
		}
		else if (TS2_Direction == NUETRAL)    //Sunil: This means TS2 is neither increasing nor decreasing
   8afde:	4b66      	ldr	r3, [pc, #408]	; (8b178 <Fine_DutyCorrection+0x4d0>)
   8afe0:	781b      	ldrb	r3, [r3, #0]
   8afe2:	2b02      	cmp	r3, #2
   8afe4:	f040 82f9 	bne.w	8b5da <Fine_DutyCorrection+0x932>
				avg_duty = avg_duty;
   8afe8:	4b71      	ldr	r3, [pc, #452]	; (8b1b0 <Fine_DutyCorrection+0x508>)
   8afea:	881a      	ldrh	r2, [r3, #0]
   8afec:	4b70      	ldr	r3, [pc, #448]	; (8b1b0 <Fine_DutyCorrection+0x508>)
   8afee:	801a      	strh	r2, [r3, #0]
   8aff0:	e2f3      	b.n	8b5da <Fine_DutyCorrection+0x932>
   8aff2:	e2f2      	b.n	8b5da <Fine_DutyCorrection+0x932>
	}
	else if (SYSTEM_FLOW == 500)
   8aff4:	4b70      	ldr	r3, [pc, #448]	; (8b1b8 <Fine_DutyCorrection+0x510>)
   8aff6:	681b      	ldr	r3, [r3, #0]
   8aff8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   8affc:	f040 8150 	bne.w	8b2a0 <Fine_DutyCorrection+0x5f8>
	{
		if ((TS2_Direction == UP ) && (Tmp2Val >= (Prescribed_T2+0.5)) && (Tmp3Val >= (Prescribed_T3+0.5)))     // Gopal added TS3 check as to reduce duty if ts3 goes above 37.5
   8b000:	4b5d      	ldr	r3, [pc, #372]	; (8b178 <Fine_DutyCorrection+0x4d0>)
   8b002:	781b      	ldrb	r3, [r3, #0]
   8b004:	2b00      	cmp	r3, #0
   8b006:	d152      	bne.n	8b0ae <Fine_DutyCorrection+0x406>
   8b008:	4b5c      	ldr	r3, [pc, #368]	; (8b17c <Fine_DutyCorrection+0x4d4>)
   8b00a:	681a      	ldr	r2, [r3, #0]
   8b00c:	4b5c      	ldr	r3, [pc, #368]	; (8b180 <Fine_DutyCorrection+0x4d8>)
   8b00e:	4610      	mov	r0, r2
   8b010:	4798      	blx	r3
   8b012:	4680      	mov	r8, r0
   8b014:	4689      	mov	r9, r1
   8b016:	4b5b      	ldr	r3, [pc, #364]	; (8b184 <Fine_DutyCorrection+0x4dc>)
   8b018:	681a      	ldr	r2, [r3, #0]
   8b01a:	4b59      	ldr	r3, [pc, #356]	; (8b180 <Fine_DutyCorrection+0x4d8>)
   8b01c:	4610      	mov	r0, r2
   8b01e:	4798      	blx	r3
   8b020:	4602      	mov	r2, r0
   8b022:	460b      	mov	r3, r1
   8b024:	4c58      	ldr	r4, [pc, #352]	; (8b188 <Fine_DutyCorrection+0x4e0>)
   8b026:	4610      	mov	r0, r2
   8b028:	4619      	mov	r1, r3
   8b02a:	f04f 0200 	mov.w	r2, #0
   8b02e:	4b57      	ldr	r3, [pc, #348]	; (8b18c <Fine_DutyCorrection+0x4e4>)
   8b030:	47a0      	blx	r4
   8b032:	4602      	mov	r2, r0
   8b034:	460b      	mov	r3, r1
   8b036:	4c61      	ldr	r4, [pc, #388]	; (8b1bc <Fine_DutyCorrection+0x514>)
   8b038:	4640      	mov	r0, r8
   8b03a:	4649      	mov	r1, r9
   8b03c:	47a0      	blx	r4
   8b03e:	4603      	mov	r3, r0
   8b040:	2b00      	cmp	r3, #0
   8b042:	d034      	beq.n	8b0ae <Fine_DutyCorrection+0x406>
   8b044:	4b56      	ldr	r3, [pc, #344]	; (8b1a0 <Fine_DutyCorrection+0x4f8>)
   8b046:	681a      	ldr	r2, [r3, #0]
   8b048:	4b4d      	ldr	r3, [pc, #308]	; (8b180 <Fine_DutyCorrection+0x4d8>)
   8b04a:	4610      	mov	r0, r2
   8b04c:	4798      	blx	r3
   8b04e:	4680      	mov	r8, r0
   8b050:	4689      	mov	r9, r1
   8b052:	4b54      	ldr	r3, [pc, #336]	; (8b1a4 <Fine_DutyCorrection+0x4fc>)
   8b054:	681a      	ldr	r2, [r3, #0]
   8b056:	4b4a      	ldr	r3, [pc, #296]	; (8b180 <Fine_DutyCorrection+0x4d8>)
   8b058:	4610      	mov	r0, r2
   8b05a:	4798      	blx	r3
   8b05c:	4602      	mov	r2, r0
   8b05e:	460b      	mov	r3, r1
   8b060:	4c49      	ldr	r4, [pc, #292]	; (8b188 <Fine_DutyCorrection+0x4e0>)
   8b062:	4610      	mov	r0, r2
   8b064:	4619      	mov	r1, r3
   8b066:	f04f 0200 	mov.w	r2, #0
   8b06a:	4b48      	ldr	r3, [pc, #288]	; (8b18c <Fine_DutyCorrection+0x4e4>)
   8b06c:	47a0      	blx	r4
   8b06e:	4602      	mov	r2, r0
   8b070:	460b      	mov	r3, r1
   8b072:	4c52      	ldr	r4, [pc, #328]	; (8b1bc <Fine_DutyCorrection+0x514>)
   8b074:	4640      	mov	r0, r8
   8b076:	4649      	mov	r1, r9
   8b078:	47a0      	blx	r4
   8b07a:	4603      	mov	r3, r0
   8b07c:	2b00      	cmp	r3, #0
   8b07e:	d016      	beq.n	8b0ae <Fine_DutyCorrection+0x406>
		{
			avg_duty = avg_duty - duty_count;
   8b080:	4b4b      	ldr	r3, [pc, #300]	; (8b1b0 <Fine_DutyCorrection+0x508>)
   8b082:	881b      	ldrh	r3, [r3, #0]
   8b084:	b29a      	uxth	r2, r3
   8b086:	4b49      	ldr	r3, [pc, #292]	; (8b1ac <Fine_DutyCorrection+0x504>)
   8b088:	781b      	ldrb	r3, [r3, #0]
   8b08a:	b29b      	uxth	r3, r3
   8b08c:	1ad3      	subs	r3, r2, r3
   8b08e:	b29b      	uxth	r3, r3
   8b090:	b29a      	uxth	r2, r3
   8b092:	4b47      	ldr	r3, [pc, #284]	; (8b1b0 <Fine_DutyCorrection+0x508>)
   8b094:	801a      	strh	r2, [r3, #0]
			
			if ((avg_duty <= 1000) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   8b096:	4b46      	ldr	r3, [pc, #280]	; (8b1b0 <Fine_DutyCorrection+0x508>)
   8b098:	881b      	ldrh	r3, [r3, #0]
   8b09a:	b21b      	sxth	r3, r3
   8b09c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   8b0a0:	dc04      	bgt.n	8b0ac <Fine_DutyCorrection+0x404>
			{
				avg_duty = 1800;    // avoiding negative values for the avg duty, which shouldn/t happen in regular run
   8b0a2:	4b43      	ldr	r3, [pc, #268]	; (8b1b0 <Fine_DutyCorrection+0x508>)
   8b0a4:	f44f 62e1 	mov.w	r2, #1800	; 0x708
   8b0a8:	801a      	strh	r2, [r3, #0]
	{
		if ((TS2_Direction == UP ) && (Tmp2Val >= (Prescribed_T2+0.5)) && (Tmp3Val >= (Prescribed_T3+0.5)))     // Gopal added TS3 check as to reduce duty if ts3 goes above 37.5
		{
			avg_duty = avg_duty - duty_count;
			
			if ((avg_duty <= 1000) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   8b0aa:	e0f8      	b.n	8b29e <Fine_DutyCorrection+0x5f6>
   8b0ac:	e0f7      	b.n	8b29e <Fine_DutyCorrection+0x5f6>
			{
				avg_duty = 1800;    // avoiding negative values for the avg duty, which shouldn/t happen in regular run
			}
		}
		else if ((TS2_Direction == UP)  && ((Tmp2Val >= (Prescribed_T2-2)) && (Tmp2Val <= (Prescribed_T2+0.5))) && (Tmp3Val <= (Prescribed_T3+0.5)) ) 
   8b0ae:	4b32      	ldr	r3, [pc, #200]	; (8b178 <Fine_DutyCorrection+0x4d0>)
   8b0b0:	781b      	ldrb	r3, [r3, #0]
   8b0b2:	2b00      	cmp	r3, #0
   8b0b4:	f040 8086 	bne.w	8b1c4 <Fine_DutyCorrection+0x51c>
   8b0b8:	4b32      	ldr	r3, [pc, #200]	; (8b184 <Fine_DutyCorrection+0x4dc>)
   8b0ba:	681a      	ldr	r2, [r3, #0]
   8b0bc:	4b40      	ldr	r3, [pc, #256]	; (8b1c0 <Fine_DutyCorrection+0x518>)
   8b0be:	4610      	mov	r0, r2
   8b0c0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   8b0c4:	4798      	blx	r3
   8b0c6:	4603      	mov	r3, r0
   8b0c8:	4619      	mov	r1, r3
   8b0ca:	4b2c      	ldr	r3, [pc, #176]	; (8b17c <Fine_DutyCorrection+0x4d4>)
   8b0cc:	681a      	ldr	r2, [r3, #0]
   8b0ce:	4b32      	ldr	r3, [pc, #200]	; (8b198 <Fine_DutyCorrection+0x4f0>)
   8b0d0:	4608      	mov	r0, r1
   8b0d2:	4611      	mov	r1, r2
   8b0d4:	4798      	blx	r3
   8b0d6:	4603      	mov	r3, r0
   8b0d8:	2b00      	cmp	r3, #0
   8b0da:	d073      	beq.n	8b1c4 <Fine_DutyCorrection+0x51c>
   8b0dc:	4b27      	ldr	r3, [pc, #156]	; (8b17c <Fine_DutyCorrection+0x4d4>)
   8b0de:	681a      	ldr	r2, [r3, #0]
   8b0e0:	4b27      	ldr	r3, [pc, #156]	; (8b180 <Fine_DutyCorrection+0x4d8>)
   8b0e2:	4610      	mov	r0, r2
   8b0e4:	4798      	blx	r3
   8b0e6:	4680      	mov	r8, r0
   8b0e8:	4689      	mov	r9, r1
   8b0ea:	4b26      	ldr	r3, [pc, #152]	; (8b184 <Fine_DutyCorrection+0x4dc>)
   8b0ec:	681a      	ldr	r2, [r3, #0]
   8b0ee:	4b24      	ldr	r3, [pc, #144]	; (8b180 <Fine_DutyCorrection+0x4d8>)
   8b0f0:	4610      	mov	r0, r2
   8b0f2:	4798      	blx	r3
   8b0f4:	4602      	mov	r2, r0
   8b0f6:	460b      	mov	r3, r1
   8b0f8:	4c23      	ldr	r4, [pc, #140]	; (8b188 <Fine_DutyCorrection+0x4e0>)
   8b0fa:	4610      	mov	r0, r2
   8b0fc:	4619      	mov	r1, r3
   8b0fe:	f04f 0200 	mov.w	r2, #0
   8b102:	4b22      	ldr	r3, [pc, #136]	; (8b18c <Fine_DutyCorrection+0x4e4>)
   8b104:	47a0      	blx	r4
   8b106:	4602      	mov	r2, r0
   8b108:	460b      	mov	r3, r1
   8b10a:	4c21      	ldr	r4, [pc, #132]	; (8b190 <Fine_DutyCorrection+0x4e8>)
   8b10c:	4640      	mov	r0, r8
   8b10e:	4649      	mov	r1, r9
   8b110:	47a0      	blx	r4
   8b112:	4603      	mov	r3, r0
   8b114:	2b00      	cmp	r3, #0
   8b116:	d055      	beq.n	8b1c4 <Fine_DutyCorrection+0x51c>
   8b118:	4b21      	ldr	r3, [pc, #132]	; (8b1a0 <Fine_DutyCorrection+0x4f8>)
   8b11a:	681a      	ldr	r2, [r3, #0]
   8b11c:	4b18      	ldr	r3, [pc, #96]	; (8b180 <Fine_DutyCorrection+0x4d8>)
   8b11e:	4610      	mov	r0, r2
   8b120:	4798      	blx	r3
   8b122:	4680      	mov	r8, r0
   8b124:	4689      	mov	r9, r1
   8b126:	4b1f      	ldr	r3, [pc, #124]	; (8b1a4 <Fine_DutyCorrection+0x4fc>)
   8b128:	681a      	ldr	r2, [r3, #0]
   8b12a:	4b15      	ldr	r3, [pc, #84]	; (8b180 <Fine_DutyCorrection+0x4d8>)
   8b12c:	4610      	mov	r0, r2
   8b12e:	4798      	blx	r3
   8b130:	4602      	mov	r2, r0
   8b132:	460b      	mov	r3, r1
   8b134:	4c14      	ldr	r4, [pc, #80]	; (8b188 <Fine_DutyCorrection+0x4e0>)
   8b136:	4610      	mov	r0, r2
   8b138:	4619      	mov	r1, r3
   8b13a:	f04f 0200 	mov.w	r2, #0
   8b13e:	4b13      	ldr	r3, [pc, #76]	; (8b18c <Fine_DutyCorrection+0x4e4>)
   8b140:	47a0      	blx	r4
   8b142:	4602      	mov	r2, r0
   8b144:	460b      	mov	r3, r1
   8b146:	4c12      	ldr	r4, [pc, #72]	; (8b190 <Fine_DutyCorrection+0x4e8>)
   8b148:	4640      	mov	r0, r8
   8b14a:	4649      	mov	r1, r9
   8b14c:	47a0      	blx	r4
   8b14e:	4603      	mov	r3, r0
   8b150:	2b00      	cmp	r3, #0
   8b152:	d037      	beq.n	8b1c4 <Fine_DutyCorrection+0x51c>
		 // Gopal added TS3 check as to increase duty if ts3 goes below 38
		{																                          //38    changed on 07082017
			avg_duty = avg_duty + duty_count;            //To avoid TS2 getting stuck at 36 or 36.5
   8b154:	4b15      	ldr	r3, [pc, #84]	; (8b1ac <Fine_DutyCorrection+0x504>)
   8b156:	781b      	ldrb	r3, [r3, #0]
   8b158:	b29a      	uxth	r2, r3
   8b15a:	4b15      	ldr	r3, [pc, #84]	; (8b1b0 <Fine_DutyCorrection+0x508>)
   8b15c:	881b      	ldrh	r3, [r3, #0]
   8b15e:	b29b      	uxth	r3, r3
   8b160:	4413      	add	r3, r2
   8b162:	b29b      	uxth	r3, r3
   8b164:	b29a      	uxth	r2, r3
   8b166:	4b12      	ldr	r3, [pc, #72]	; (8b1b0 <Fine_DutyCorrection+0x508>)
   8b168:	801a      	strh	r2, [r3, #0]
   8b16a:	e098      	b.n	8b29e <Fine_DutyCorrection+0x5f6>
   8b16c:	f3af 8000 	nop.w
   8b170:	9999999a 	.word	0x9999999a
   8b174:	3fc99999 	.word	0x3fc99999
   8b178:	20072196 	.word	0x20072196
   8b17c:	200719c0 	.word	0x200719c0
   8b180:	000a6031 	.word	0x000a6031
   8b184:	20070550 	.word	0x20070550
   8b188:	000a5d75 	.word	0x000a5d75
   8b18c:	3fe00000 	.word	0x3fe00000
   8b190:	000a65d1 	.word	0x000a65d1
   8b194:	200719bc 	.word	0x200719bc
   8b198:	000a6ca9 	.word	0x000a6ca9
   8b19c:	42100000 	.word	0x42100000
   8b1a0:	200719c4 	.word	0x200719c4
   8b1a4:	20070554 	.word	0x20070554
   8b1a8:	000a65bd 	.word	0x000a65bd
   8b1ac:	200719e4 	.word	0x200719e4
   8b1b0:	200719ae 	.word	0x200719ae
   8b1b4:	00099cb9 	.word	0x00099cb9
   8b1b8:	20070558 	.word	0x20070558
   8b1bc:	000a65e5 	.word	0x000a65e5
   8b1c0:	000a6745 	.word	0x000a6745
		}
		else if ((TS2_Direction == DOWN ) && (Tmp2Val <= (Prescribed_T2+0.5)) )  
   8b1c4:	4b70      	ldr	r3, [pc, #448]	; (8b388 <Fine_DutyCorrection+0x6e0>)
   8b1c6:	781b      	ldrb	r3, [r3, #0]
   8b1c8:	2b01      	cmp	r3, #1
   8b1ca:	d15e      	bne.n	8b28a <Fine_DutyCorrection+0x5e2>
   8b1cc:	4b6f      	ldr	r3, [pc, #444]	; (8b38c <Fine_DutyCorrection+0x6e4>)
   8b1ce:	681a      	ldr	r2, [r3, #0]
   8b1d0:	4b6f      	ldr	r3, [pc, #444]	; (8b390 <Fine_DutyCorrection+0x6e8>)
   8b1d2:	4610      	mov	r0, r2
   8b1d4:	4798      	blx	r3
   8b1d6:	4680      	mov	r8, r0
   8b1d8:	4689      	mov	r9, r1
   8b1da:	4b6e      	ldr	r3, [pc, #440]	; (8b394 <Fine_DutyCorrection+0x6ec>)
   8b1dc:	681a      	ldr	r2, [r3, #0]
   8b1de:	4b6c      	ldr	r3, [pc, #432]	; (8b390 <Fine_DutyCorrection+0x6e8>)
   8b1e0:	4610      	mov	r0, r2
   8b1e2:	4798      	blx	r3
   8b1e4:	4602      	mov	r2, r0
   8b1e6:	460b      	mov	r3, r1
   8b1e8:	4c6b      	ldr	r4, [pc, #428]	; (8b398 <Fine_DutyCorrection+0x6f0>)
   8b1ea:	4610      	mov	r0, r2
   8b1ec:	4619      	mov	r1, r3
   8b1ee:	f04f 0200 	mov.w	r2, #0
   8b1f2:	4b6a      	ldr	r3, [pc, #424]	; (8b39c <Fine_DutyCorrection+0x6f4>)
   8b1f4:	47a0      	blx	r4
   8b1f6:	4602      	mov	r2, r0
   8b1f8:	460b      	mov	r3, r1
   8b1fa:	4c69      	ldr	r4, [pc, #420]	; (8b3a0 <Fine_DutyCorrection+0x6f8>)
   8b1fc:	4640      	mov	r0, r8
   8b1fe:	4649      	mov	r1, r9
   8b200:	47a0      	blx	r4
   8b202:	4603      	mov	r3, r0
   8b204:	2b00      	cmp	r3, #0
   8b206:	d040      	beq.n	8b28a <Fine_DutyCorrection+0x5e2>
		{
			if ((Tmp1Val <=36)  && (Tmp3Val < Prescribed_T3+0.2 )) // Gopal : added to avoid TS3 going beyond 37 when inlet temperature is above 36
   8b208:	4b66      	ldr	r3, [pc, #408]	; (8b3a4 <Fine_DutyCorrection+0x6fc>)
   8b20a:	681a      	ldr	r2, [r3, #0]
   8b20c:	4b66      	ldr	r3, [pc, #408]	; (8b3a8 <Fine_DutyCorrection+0x700>)
   8b20e:	4610      	mov	r0, r2
   8b210:	4966      	ldr	r1, [pc, #408]	; (8b3ac <Fine_DutyCorrection+0x704>)
   8b212:	4798      	blx	r3
   8b214:	4603      	mov	r3, r0
   8b216:	2b00      	cmp	r3, #0
   8b218:	d028      	beq.n	8b26c <Fine_DutyCorrection+0x5c4>
   8b21a:	4b65      	ldr	r3, [pc, #404]	; (8b3b0 <Fine_DutyCorrection+0x708>)
   8b21c:	681a      	ldr	r2, [r3, #0]
   8b21e:	4b5c      	ldr	r3, [pc, #368]	; (8b390 <Fine_DutyCorrection+0x6e8>)
   8b220:	4610      	mov	r0, r2
   8b222:	4798      	blx	r3
   8b224:	4680      	mov	r8, r0
   8b226:	4689      	mov	r9, r1
   8b228:	4b62      	ldr	r3, [pc, #392]	; (8b3b4 <Fine_DutyCorrection+0x70c>)
   8b22a:	681a      	ldr	r2, [r3, #0]
   8b22c:	4b58      	ldr	r3, [pc, #352]	; (8b390 <Fine_DutyCorrection+0x6e8>)
   8b22e:	4610      	mov	r0, r2
   8b230:	4798      	blx	r3
   8b232:	4602      	mov	r2, r0
   8b234:	460b      	mov	r3, r1
   8b236:	4c58      	ldr	r4, [pc, #352]	; (8b398 <Fine_DutyCorrection+0x6f0>)
   8b238:	4610      	mov	r0, r2
   8b23a:	4619      	mov	r1, r3
   8b23c:	a34e      	add	r3, pc, #312	; (adr r3, 8b378 <Fine_DutyCorrection+0x6d0>)
   8b23e:	e9d3 2300 	ldrd	r2, r3, [r3]
   8b242:	47a0      	blx	r4
   8b244:	4602      	mov	r2, r0
   8b246:	460b      	mov	r3, r1
   8b248:	4c5b      	ldr	r4, [pc, #364]	; (8b3b8 <Fine_DutyCorrection+0x710>)
   8b24a:	4640      	mov	r0, r8
   8b24c:	4649      	mov	r1, r9
   8b24e:	47a0      	blx	r4
   8b250:	4603      	mov	r3, r0
   8b252:	2b00      	cmp	r3, #0
   8b254:	d00a      	beq.n	8b26c <Fine_DutyCorrection+0x5c4>
			{
				avg_duty = avg_duty + duty_count;            //To avoid TS2 getting stuck at 36 or 36.5
   8b256:	4b59      	ldr	r3, [pc, #356]	; (8b3bc <Fine_DutyCorrection+0x714>)
   8b258:	781b      	ldrb	r3, [r3, #0]
   8b25a:	b29a      	uxth	r2, r3
   8b25c:	4b58      	ldr	r3, [pc, #352]	; (8b3c0 <Fine_DutyCorrection+0x718>)
   8b25e:	881b      	ldrh	r3, [r3, #0]
   8b260:	b29b      	uxth	r3, r3
   8b262:	4413      	add	r3, r2
   8b264:	b29b      	uxth	r3, r3
   8b266:	b29a      	uxth	r2, r3
   8b268:	4b55      	ldr	r3, [pc, #340]	; (8b3c0 <Fine_DutyCorrection+0x718>)
   8b26a:	801a      	strh	r2, [r3, #0]
			}
			
			if (avg_duty > 2300)  //Sunil limiting to 2300
   8b26c:	4b54      	ldr	r3, [pc, #336]	; (8b3c0 <Fine_DutyCorrection+0x718>)
   8b26e:	881b      	ldrh	r3, [r3, #0]
   8b270:	b21b      	sxth	r3, r3
   8b272:	f640 02fc 	movw	r2, #2300	; 0x8fc
   8b276:	4293      	cmp	r3, r2
   8b278:	dd06      	ble.n	8b288 <Fine_DutyCorrection+0x5e0>
			{
				avg_duty = 2300;
   8b27a:	4b51      	ldr	r3, [pc, #324]	; (8b3c0 <Fine_DutyCorrection+0x718>)
   8b27c:	f640 02fc 	movw	r2, #2300	; 0x8fc
   8b280:	801a      	strh	r2, [r3, #0]
				sv_cntrl_poweroffheater();
   8b282:	4b50      	ldr	r3, [pc, #320]	; (8b3c4 <Fine_DutyCorrection+0x71c>)
   8b284:	4798      	blx	r3
			if ((Tmp1Val <=36)  && (Tmp3Val < Prescribed_T3+0.2 )) // Gopal : added to avoid TS3 going beyond 37 when inlet temperature is above 36
			{
				avg_duty = avg_duty + duty_count;            //To avoid TS2 getting stuck at 36 or 36.5
			}
			
			if (avg_duty > 2300)  //Sunil limiting to 2300
   8b286:	e00a      	b.n	8b29e <Fine_DutyCorrection+0x5f6>
   8b288:	e009      	b.n	8b29e <Fine_DutyCorrection+0x5f6>
				avg_duty = 2300;
				sv_cntrl_poweroffheater();
				//			HeaterState = CL_HEATER_STATE_OFF;
			}
		}
		else if (TS2_Direction == NUETRAL)    //Sunil: This means TS2 is neither increasing nor decreasing
   8b28a:	4b3f      	ldr	r3, [pc, #252]	; (8b388 <Fine_DutyCorrection+0x6e0>)
   8b28c:	781b      	ldrb	r3, [r3, #0]
   8b28e:	2b02      	cmp	r3, #2
   8b290:	f040 81a3 	bne.w	8b5da <Fine_DutyCorrection+0x932>
				avg_duty = avg_duty;
   8b294:	4b4a      	ldr	r3, [pc, #296]	; (8b3c0 <Fine_DutyCorrection+0x718>)
   8b296:	881a      	ldrh	r2, [r3, #0]
   8b298:	4b49      	ldr	r3, [pc, #292]	; (8b3c0 <Fine_DutyCorrection+0x718>)
   8b29a:	801a      	strh	r2, [r3, #0]
   8b29c:	e19d      	b.n	8b5da <Fine_DutyCorrection+0x932>
   8b29e:	e19c      	b.n	8b5da <Fine_DutyCorrection+0x932>
	}
	
	
	else if (SYSTEM_FLOW == 300)                                        // Gopal: if the flow rate is set to 300 temperature
   8b2a0:	4b49      	ldr	r3, [pc, #292]	; (8b3c8 <Fine_DutyCorrection+0x720>)
   8b2a2:	681b      	ldr	r3, [r3, #0]
   8b2a4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   8b2a8:	f040 8197 	bne.w	8b5da <Fine_DutyCorrection+0x932>
	{
//		if ((TS2_Direction == UP ) && (Tmp2Val >= 39) && (Tmp3Val >= Prescribed_T3))     // Gopal: added TS3 check as to reduce duty if ts3 goes above 37.5
		if (((TS2_Direction == UP)  && (Tmp2Val >= (Prescribed_T2+0.5))) && (Tmp3Val >= (Prescribed_T3 + 0.1))) // Gopal: added TS3 check as to reduce duty if ts3 goes above 37.5 29072017
   8b2ac:	4b36      	ldr	r3, [pc, #216]	; (8b388 <Fine_DutyCorrection+0x6e0>)
   8b2ae:	781b      	ldrb	r3, [r3, #0]
   8b2b0:	2b00      	cmp	r3, #0
   8b2b2:	f040 808f 	bne.w	8b3d4 <Fine_DutyCorrection+0x72c>
   8b2b6:	4b35      	ldr	r3, [pc, #212]	; (8b38c <Fine_DutyCorrection+0x6e4>)
   8b2b8:	681a      	ldr	r2, [r3, #0]
   8b2ba:	4b35      	ldr	r3, [pc, #212]	; (8b390 <Fine_DutyCorrection+0x6e8>)
   8b2bc:	4610      	mov	r0, r2
   8b2be:	4798      	blx	r3
   8b2c0:	4680      	mov	r8, r0
   8b2c2:	4689      	mov	r9, r1
   8b2c4:	4b33      	ldr	r3, [pc, #204]	; (8b394 <Fine_DutyCorrection+0x6ec>)
   8b2c6:	681a      	ldr	r2, [r3, #0]
   8b2c8:	4b31      	ldr	r3, [pc, #196]	; (8b390 <Fine_DutyCorrection+0x6e8>)
   8b2ca:	4610      	mov	r0, r2
   8b2cc:	4798      	blx	r3
   8b2ce:	4602      	mov	r2, r0
   8b2d0:	460b      	mov	r3, r1
   8b2d2:	4c31      	ldr	r4, [pc, #196]	; (8b398 <Fine_DutyCorrection+0x6f0>)
   8b2d4:	4610      	mov	r0, r2
   8b2d6:	4619      	mov	r1, r3
   8b2d8:	f04f 0200 	mov.w	r2, #0
   8b2dc:	4b2f      	ldr	r3, [pc, #188]	; (8b39c <Fine_DutyCorrection+0x6f4>)
   8b2de:	47a0      	blx	r4
   8b2e0:	4602      	mov	r2, r0
   8b2e2:	460b      	mov	r3, r1
   8b2e4:	4c39      	ldr	r4, [pc, #228]	; (8b3cc <Fine_DutyCorrection+0x724>)
   8b2e6:	4640      	mov	r0, r8
   8b2e8:	4649      	mov	r1, r9
   8b2ea:	47a0      	blx	r4
   8b2ec:	4603      	mov	r3, r0
   8b2ee:	2b00      	cmp	r3, #0
   8b2f0:	d070      	beq.n	8b3d4 <Fine_DutyCorrection+0x72c>
   8b2f2:	4b2f      	ldr	r3, [pc, #188]	; (8b3b0 <Fine_DutyCorrection+0x708>)
   8b2f4:	681a      	ldr	r2, [r3, #0]
   8b2f6:	4b26      	ldr	r3, [pc, #152]	; (8b390 <Fine_DutyCorrection+0x6e8>)
   8b2f8:	4610      	mov	r0, r2
   8b2fa:	4798      	blx	r3
   8b2fc:	4680      	mov	r8, r0
   8b2fe:	4689      	mov	r9, r1
   8b300:	4b2c      	ldr	r3, [pc, #176]	; (8b3b4 <Fine_DutyCorrection+0x70c>)
   8b302:	681a      	ldr	r2, [r3, #0]
   8b304:	4b22      	ldr	r3, [pc, #136]	; (8b390 <Fine_DutyCorrection+0x6e8>)
   8b306:	4610      	mov	r0, r2
   8b308:	4798      	blx	r3
   8b30a:	4602      	mov	r2, r0
   8b30c:	460b      	mov	r3, r1
   8b30e:	4c22      	ldr	r4, [pc, #136]	; (8b398 <Fine_DutyCorrection+0x6f0>)
   8b310:	4610      	mov	r0, r2
   8b312:	4619      	mov	r1, r3
   8b314:	a31a      	add	r3, pc, #104	; (adr r3, 8b380 <Fine_DutyCorrection+0x6d8>)
   8b316:	e9d3 2300 	ldrd	r2, r3, [r3]
   8b31a:	47a0      	blx	r4
   8b31c:	4602      	mov	r2, r0
   8b31e:	460b      	mov	r3, r1
   8b320:	4c2a      	ldr	r4, [pc, #168]	; (8b3cc <Fine_DutyCorrection+0x724>)
   8b322:	4640      	mov	r0, r8
   8b324:	4649      	mov	r1, r9
   8b326:	47a0      	blx	r4
   8b328:	4603      	mov	r3, r0
   8b32a:	2b00      	cmp	r3, #0
   8b32c:	d052      	beq.n	8b3d4 <Fine_DutyCorrection+0x72c>
									     //41 changed to 4.5 09082017 ; Gopal: earlier 41 1082017
		{                                
			avg_duty = avg_duty - duty_count;
   8b32e:	4b24      	ldr	r3, [pc, #144]	; (8b3c0 <Fine_DutyCorrection+0x718>)
   8b330:	881b      	ldrh	r3, [r3, #0]
   8b332:	b29a      	uxth	r2, r3
   8b334:	4b21      	ldr	r3, [pc, #132]	; (8b3bc <Fine_DutyCorrection+0x714>)
   8b336:	781b      	ldrb	r3, [r3, #0]
   8b338:	b29b      	uxth	r3, r3
   8b33a:	1ad3      	subs	r3, r2, r3
   8b33c:	b29b      	uxth	r3, r3
   8b33e:	b29a      	uxth	r2, r3
   8b340:	4b1f      	ldr	r3, [pc, #124]	; (8b3c0 <Fine_DutyCorrection+0x718>)
   8b342:	801a      	strh	r2, [r3, #0]
			
			if ((avg_duty <= 1000) && (Tmp3Val < Prescribed_T3) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   8b344:	4b1e      	ldr	r3, [pc, #120]	; (8b3c0 <Fine_DutyCorrection+0x718>)
   8b346:	881b      	ldrh	r3, [r3, #0]
   8b348:	b21b      	sxth	r3, r3
   8b34a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   8b34e:	dc10      	bgt.n	8b372 <Fine_DutyCorrection+0x6ca>
   8b350:	4b17      	ldr	r3, [pc, #92]	; (8b3b0 <Fine_DutyCorrection+0x708>)
   8b352:	6819      	ldr	r1, [r3, #0]
   8b354:	4b17      	ldr	r3, [pc, #92]	; (8b3b4 <Fine_DutyCorrection+0x70c>)
   8b356:	681a      	ldr	r2, [r3, #0]
   8b358:	4b1d      	ldr	r3, [pc, #116]	; (8b3d0 <Fine_DutyCorrection+0x728>)
   8b35a:	4608      	mov	r0, r1
   8b35c:	4611      	mov	r1, r2
   8b35e:	4798      	blx	r3
   8b360:	4603      	mov	r3, r0
   8b362:	2b00      	cmp	r3, #0
   8b364:	d100      	bne.n	8b368 <Fine_DutyCorrection+0x6c0>
   8b366:	e134      	b.n	8b5d2 <Fine_DutyCorrection+0x92a>
			{
				avg_duty = 1800;    // avoiding negative values for the avg duty, which shouldn/t happen in regular run
   8b368:	4b15      	ldr	r3, [pc, #84]	; (8b3c0 <Fine_DutyCorrection+0x718>)
   8b36a:	f44f 62e1 	mov.w	r2, #1800	; 0x708
   8b36e:	801a      	strh	r2, [r3, #0]
		if (((TS2_Direction == UP)  && (Tmp2Val >= (Prescribed_T2+0.5))) && (Tmp3Val >= (Prescribed_T3 + 0.1))) // Gopal: added TS3 check as to reduce duty if ts3 goes above 37.5 29072017
									     //41 changed to 4.5 09082017 ; Gopal: earlier 41 1082017
		{                                
			avg_duty = avg_duty - duty_count;
			
			if ((avg_duty <= 1000) && (Tmp3Val < Prescribed_T3) )   // Gopal: added check of Ts3 to avoid avg duty setting to 1800 when TS3 is more than 37
   8b370:	e12f      	b.n	8b5d2 <Fine_DutyCorrection+0x92a>
   8b372:	e12e      	b.n	8b5d2 <Fine_DutyCorrection+0x92a>
   8b374:	f3af 8000 	nop.w
   8b378:	9999999a 	.word	0x9999999a
   8b37c:	3fc99999 	.word	0x3fc99999
   8b380:	9999999a 	.word	0x9999999a
   8b384:	3fb99999 	.word	0x3fb99999
   8b388:	20072196 	.word	0x20072196
   8b38c:	200719c0 	.word	0x200719c0
   8b390:	000a6031 	.word	0x000a6031
   8b394:	20070550 	.word	0x20070550
   8b398:	000a5d75 	.word	0x000a5d75
   8b39c:	3fe00000 	.word	0x3fe00000
   8b3a0:	000a65d1 	.word	0x000a65d1
   8b3a4:	200719bc 	.word	0x200719bc
   8b3a8:	000a6ca9 	.word	0x000a6ca9
   8b3ac:	42100000 	.word	0x42100000
   8b3b0:	200719c4 	.word	0x200719c4
   8b3b4:	20070554 	.word	0x20070554
   8b3b8:	000a65bd 	.word	0x000a65bd
   8b3bc:	200719e4 	.word	0x200719e4
   8b3c0:	200719ae 	.word	0x200719ae
   8b3c4:	00099cb9 	.word	0x00099cb9
   8b3c8:	20070558 	.word	0x20070558
   8b3cc:	000a65e5 	.word	0x000a65e5
   8b3d0:	000a6c95 	.word	0x000a6c95
			{
				avg_duty = 1800;    // avoiding negative values for the avg duty, which shouldn/t happen in regular run
			}
		}
		else if ((TS2_Direction == UP)  && ((Tmp2Val >= (Prescribed_T2-2)) && (Tmp2Val <= (Prescribed_T2+1))) && (Tmp3Val < (Prescribed_T3 +0.2)))
   8b3d4:	4b84      	ldr	r3, [pc, #528]	; (8b5e8 <Fine_DutyCorrection+0x940>)
   8b3d6:	781b      	ldrb	r3, [r3, #0]
   8b3d8:	2b00      	cmp	r3, #0
   8b3da:	d157      	bne.n	8b48c <Fine_DutyCorrection+0x7e4>
   8b3dc:	4b83      	ldr	r3, [pc, #524]	; (8b5ec <Fine_DutyCorrection+0x944>)
   8b3de:	681a      	ldr	r2, [r3, #0]
   8b3e0:	4b83      	ldr	r3, [pc, #524]	; (8b5f0 <Fine_DutyCorrection+0x948>)
   8b3e2:	4610      	mov	r0, r2
   8b3e4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   8b3e8:	4798      	blx	r3
   8b3ea:	4603      	mov	r3, r0
   8b3ec:	4619      	mov	r1, r3
   8b3ee:	4b81      	ldr	r3, [pc, #516]	; (8b5f4 <Fine_DutyCorrection+0x94c>)
   8b3f0:	681a      	ldr	r2, [r3, #0]
   8b3f2:	4b81      	ldr	r3, [pc, #516]	; (8b5f8 <Fine_DutyCorrection+0x950>)
   8b3f4:	4608      	mov	r0, r1
   8b3f6:	4611      	mov	r1, r2
   8b3f8:	4798      	blx	r3
   8b3fa:	4603      	mov	r3, r0
   8b3fc:	2b00      	cmp	r3, #0
   8b3fe:	d045      	beq.n	8b48c <Fine_DutyCorrection+0x7e4>
   8b400:	4b7a      	ldr	r3, [pc, #488]	; (8b5ec <Fine_DutyCorrection+0x944>)
   8b402:	681a      	ldr	r2, [r3, #0]
   8b404:	4b7d      	ldr	r3, [pc, #500]	; (8b5fc <Fine_DutyCorrection+0x954>)
   8b406:	4610      	mov	r0, r2
   8b408:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   8b40c:	4798      	blx	r3
   8b40e:	4603      	mov	r3, r0
   8b410:	4619      	mov	r1, r3
   8b412:	4b78      	ldr	r3, [pc, #480]	; (8b5f4 <Fine_DutyCorrection+0x94c>)
   8b414:	681a      	ldr	r2, [r3, #0]
   8b416:	4b7a      	ldr	r3, [pc, #488]	; (8b600 <Fine_DutyCorrection+0x958>)
   8b418:	4608      	mov	r0, r1
   8b41a:	4611      	mov	r1, r2
   8b41c:	4798      	blx	r3
   8b41e:	4603      	mov	r3, r0
   8b420:	2b00      	cmp	r3, #0
   8b422:	d033      	beq.n	8b48c <Fine_DutyCorrection+0x7e4>
   8b424:	4b77      	ldr	r3, [pc, #476]	; (8b604 <Fine_DutyCorrection+0x95c>)
   8b426:	681a      	ldr	r2, [r3, #0]
   8b428:	4b77      	ldr	r3, [pc, #476]	; (8b608 <Fine_DutyCorrection+0x960>)
   8b42a:	4610      	mov	r0, r2
   8b42c:	4798      	blx	r3
   8b42e:	4680      	mov	r8, r0
   8b430:	4689      	mov	r9, r1
   8b432:	4b76      	ldr	r3, [pc, #472]	; (8b60c <Fine_DutyCorrection+0x964>)
   8b434:	681a      	ldr	r2, [r3, #0]
   8b436:	4b74      	ldr	r3, [pc, #464]	; (8b608 <Fine_DutyCorrection+0x960>)
   8b438:	4610      	mov	r0, r2
   8b43a:	4798      	blx	r3
   8b43c:	4602      	mov	r2, r0
   8b43e:	460b      	mov	r3, r1
   8b440:	4c73      	ldr	r4, [pc, #460]	; (8b610 <Fine_DutyCorrection+0x968>)
   8b442:	4610      	mov	r0, r2
   8b444:	4619      	mov	r1, r3
   8b446:	a366      	add	r3, pc, #408	; (adr r3, 8b5e0 <Fine_DutyCorrection+0x938>)
   8b448:	e9d3 2300 	ldrd	r2, r3, [r3]
   8b44c:	47a0      	blx	r4
   8b44e:	4602      	mov	r2, r0
   8b450:	460b      	mov	r3, r1
   8b452:	4c70      	ldr	r4, [pc, #448]	; (8b614 <Fine_DutyCorrection+0x96c>)
   8b454:	4640      	mov	r0, r8
   8b456:	4649      	mov	r1, r9
   8b458:	47a0      	blx	r4
   8b45a:	4603      	mov	r3, r0
   8b45c:	2b00      	cmp	r3, #0
   8b45e:	d015      	beq.n	8b48c <Fine_DutyCorrection+0x7e4>
		 // Gopal added TS3 check as to increase duty if ts3 goes below 38
		{                                                  // 37  41 020817  // CHANGED TO 37 FROM 38 ON 24072017 AS TS1 IS GETTING ALMOST PAR WITH TS3
			//if ((Tmp1Val <=36) && (Tmp2Val <= 39))    // Gopal : added to avoid TS3 going beyond 37 when inlet temperature is above 36
			if ((Tmp1Val <=36) )    // Gopal : added to avoid TS3 going beyond 37 when inlet temperature is above 36
   8b460:	4b6d      	ldr	r3, [pc, #436]	; (8b618 <Fine_DutyCorrection+0x970>)
   8b462:	681a      	ldr	r2, [r3, #0]
   8b464:	4b64      	ldr	r3, [pc, #400]	; (8b5f8 <Fine_DutyCorrection+0x950>)
   8b466:	4610      	mov	r0, r2
   8b468:	496c      	ldr	r1, [pc, #432]	; (8b61c <Fine_DutyCorrection+0x974>)
   8b46a:	4798      	blx	r3
   8b46c:	4603      	mov	r3, r0
   8b46e:	2b00      	cmp	r3, #0
   8b470:	f000 80af 	beq.w	8b5d2 <Fine_DutyCorrection+0x92a>
			{
				avg_duty = avg_duty + duty_count;            //To avoid TS2 getting stuck at 36 or 36.5
   8b474:	4b6a      	ldr	r3, [pc, #424]	; (8b620 <Fine_DutyCorrection+0x978>)
   8b476:	781b      	ldrb	r3, [r3, #0]
   8b478:	b29a      	uxth	r2, r3
   8b47a:	4b6a      	ldr	r3, [pc, #424]	; (8b624 <Fine_DutyCorrection+0x97c>)
   8b47c:	881b      	ldrh	r3, [r3, #0]
   8b47e:	b29b      	uxth	r3, r3
   8b480:	4413      	add	r3, r2
   8b482:	b29b      	uxth	r3, r3
   8b484:	b29a      	uxth	r2, r3
   8b486:	4b67      	ldr	r3, [pc, #412]	; (8b624 <Fine_DutyCorrection+0x97c>)
   8b488:	801a      	strh	r2, [r3, #0]
		}
		else if ((TS2_Direction == UP)  && ((Tmp2Val >= (Prescribed_T2-2)) && (Tmp2Val <= (Prescribed_T2+1))) && (Tmp3Val < (Prescribed_T3 +0.2)))
		 // Gopal added TS3 check as to increase duty if ts3 goes below 38
		{                                                  // 37  41 020817  // CHANGED TO 37 FROM 38 ON 24072017 AS TS1 IS GETTING ALMOST PAR WITH TS3
			//if ((Tmp1Val <=36) && (Tmp2Val <= 39))    // Gopal : added to avoid TS3 going beyond 37 when inlet temperature is above 36
			if ((Tmp1Val <=36) )    // Gopal : added to avoid TS3 going beyond 37 when inlet temperature is above 36
   8b48a:	e0a2      	b.n	8b5d2 <Fine_DutyCorrection+0x92a>
			{
				avg_duty = avg_duty + duty_count;            //To avoid TS2 getting stuck at 36 or 36.5
			}
			
		}
		else if ((TS2_Direction == DOWN ) && (Tmp2Val <= (Prescribed_T2+1)) )  // 39.5
   8b48c:	4b56      	ldr	r3, [pc, #344]	; (8b5e8 <Fine_DutyCorrection+0x940>)
   8b48e:	781b      	ldrb	r3, [r3, #0]
   8b490:	2b01      	cmp	r3, #1
   8b492:	d152      	bne.n	8b53a <Fine_DutyCorrection+0x892>
   8b494:	4b55      	ldr	r3, [pc, #340]	; (8b5ec <Fine_DutyCorrection+0x944>)
   8b496:	681a      	ldr	r2, [r3, #0]
   8b498:	4b58      	ldr	r3, [pc, #352]	; (8b5fc <Fine_DutyCorrection+0x954>)
   8b49a:	4610      	mov	r0, r2
   8b49c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   8b4a0:	4798      	blx	r3
   8b4a2:	4603      	mov	r3, r0
   8b4a4:	4619      	mov	r1, r3
   8b4a6:	4b53      	ldr	r3, [pc, #332]	; (8b5f4 <Fine_DutyCorrection+0x94c>)
   8b4a8:	681a      	ldr	r2, [r3, #0]
   8b4aa:	4b55      	ldr	r3, [pc, #340]	; (8b600 <Fine_DutyCorrection+0x958>)
   8b4ac:	4608      	mov	r0, r1
   8b4ae:	4611      	mov	r1, r2
   8b4b0:	4798      	blx	r3
   8b4b2:	4603      	mov	r3, r0
   8b4b4:	2b00      	cmp	r3, #0
   8b4b6:	d040      	beq.n	8b53a <Fine_DutyCorrection+0x892>
		{
//			if ((Tmp1Val <=36) && (Tmp2Val <= 39) && (Tmp3Val <= 37.5)) // Gopal : added to avoid TS3 going beyond 37 when inlet temperature is above 36
			if ((Tmp1Val <=36)  && (Tmp3Val < Prescribed_T3+0.2 )) // Gopal : added to avoid TS3 going beyond 37 when inlet temperature is above 36
   8b4b8:	4b57      	ldr	r3, [pc, #348]	; (8b618 <Fine_DutyCorrection+0x970>)
   8b4ba:	681a      	ldr	r2, [r3, #0]
   8b4bc:	4b4e      	ldr	r3, [pc, #312]	; (8b5f8 <Fine_DutyCorrection+0x950>)
   8b4be:	4610      	mov	r0, r2
   8b4c0:	4956      	ldr	r1, [pc, #344]	; (8b61c <Fine_DutyCorrection+0x974>)
   8b4c2:	4798      	blx	r3
   8b4c4:	4603      	mov	r3, r0
   8b4c6:	2b00      	cmp	r3, #0
   8b4c8:	d028      	beq.n	8b51c <Fine_DutyCorrection+0x874>
   8b4ca:	4b4e      	ldr	r3, [pc, #312]	; (8b604 <Fine_DutyCorrection+0x95c>)
   8b4cc:	681a      	ldr	r2, [r3, #0]
   8b4ce:	4b4e      	ldr	r3, [pc, #312]	; (8b608 <Fine_DutyCorrection+0x960>)
   8b4d0:	4610      	mov	r0, r2
   8b4d2:	4798      	blx	r3
   8b4d4:	4680      	mov	r8, r0
   8b4d6:	4689      	mov	r9, r1
   8b4d8:	4b4c      	ldr	r3, [pc, #304]	; (8b60c <Fine_DutyCorrection+0x964>)
   8b4da:	681a      	ldr	r2, [r3, #0]
   8b4dc:	4b4a      	ldr	r3, [pc, #296]	; (8b608 <Fine_DutyCorrection+0x960>)
   8b4de:	4610      	mov	r0, r2
   8b4e0:	4798      	blx	r3
   8b4e2:	4602      	mov	r2, r0
   8b4e4:	460b      	mov	r3, r1
   8b4e6:	4c4a      	ldr	r4, [pc, #296]	; (8b610 <Fine_DutyCorrection+0x968>)
   8b4e8:	4610      	mov	r0, r2
   8b4ea:	4619      	mov	r1, r3
   8b4ec:	a33c      	add	r3, pc, #240	; (adr r3, 8b5e0 <Fine_DutyCorrection+0x938>)
   8b4ee:	e9d3 2300 	ldrd	r2, r3, [r3]
   8b4f2:	47a0      	blx	r4
   8b4f4:	4602      	mov	r2, r0
   8b4f6:	460b      	mov	r3, r1
   8b4f8:	4c46      	ldr	r4, [pc, #280]	; (8b614 <Fine_DutyCorrection+0x96c>)
   8b4fa:	4640      	mov	r0, r8
   8b4fc:	4649      	mov	r1, r9
   8b4fe:	47a0      	blx	r4
   8b500:	4603      	mov	r3, r0
   8b502:	2b00      	cmp	r3, #0
   8b504:	d00a      	beq.n	8b51c <Fine_DutyCorrection+0x874>
			{
				avg_duty = avg_duty + duty_count;            //To avoid TS2 getting stuck at 36 or 36.5
   8b506:	4b46      	ldr	r3, [pc, #280]	; (8b620 <Fine_DutyCorrection+0x978>)
   8b508:	781b      	ldrb	r3, [r3, #0]
   8b50a:	b29a      	uxth	r2, r3
   8b50c:	4b45      	ldr	r3, [pc, #276]	; (8b624 <Fine_DutyCorrection+0x97c>)
   8b50e:	881b      	ldrh	r3, [r3, #0]
   8b510:	b29b      	uxth	r3, r3
   8b512:	4413      	add	r3, r2
   8b514:	b29b      	uxth	r3, r3
   8b516:	b29a      	uxth	r2, r3
   8b518:	4b42      	ldr	r3, [pc, #264]	; (8b624 <Fine_DutyCorrection+0x97c>)
   8b51a:	801a      	strh	r2, [r3, #0]
			}
			
			if (avg_duty > 2500)  //Sunil limiting to 2300
   8b51c:	4b41      	ldr	r3, [pc, #260]	; (8b624 <Fine_DutyCorrection+0x97c>)
   8b51e:	881b      	ldrh	r3, [r3, #0]
   8b520:	b21b      	sxth	r3, r3
   8b522:	f640 12c4 	movw	r2, #2500	; 0x9c4
   8b526:	4293      	cmp	r3, r2
   8b528:	dd06      	ble.n	8b538 <Fine_DutyCorrection+0x890>
			{
				avg_duty = 2500;
   8b52a:	4b3e      	ldr	r3, [pc, #248]	; (8b624 <Fine_DutyCorrection+0x97c>)
   8b52c:	f640 12c4 	movw	r2, #2500	; 0x9c4
   8b530:	801a      	strh	r2, [r3, #0]
				sv_cntrl_poweroffheater();
   8b532:	4b3d      	ldr	r3, [pc, #244]	; (8b628 <Fine_DutyCorrection+0x980>)
   8b534:	4798      	blx	r3
			if ((Tmp1Val <=36)  && (Tmp3Val < Prescribed_T3+0.2 )) // Gopal : added to avoid TS3 going beyond 37 when inlet temperature is above 36
			{
				avg_duty = avg_duty + duty_count;            //To avoid TS2 getting stuck at 36 or 36.5
			}
			
			if (avg_duty > 2500)  //Sunil limiting to 2300
   8b536:	e04c      	b.n	8b5d2 <Fine_DutyCorrection+0x92a>
   8b538:	e04b      	b.n	8b5d2 <Fine_DutyCorrection+0x92a>
				avg_duty = 2500;
				sv_cntrl_poweroffheater();
				//			HeaterState = CL_HEATER_STATE_OFF;
			}
		}
		else if (TS2_Direction == NUETRAL)    //Sunil: This means TS2 is neither increasing nor decreasing
   8b53a:	4b2b      	ldr	r3, [pc, #172]	; (8b5e8 <Fine_DutyCorrection+0x940>)
   8b53c:	781b      	ldrb	r3, [r3, #0]
   8b53e:	2b02      	cmp	r3, #2
   8b540:	d147      	bne.n	8b5d2 <Fine_DutyCorrection+0x92a>
		{
				
			if (Check_4_Neutralstability())
   8b542:	4b3a      	ldr	r3, [pc, #232]	; (8b62c <Fine_DutyCorrection+0x984>)
   8b544:	4798      	blx	r3
   8b546:	4603      	mov	r3, r0
   8b548:	2b00      	cmp	r3, #0
   8b54a:	d042      	beq.n	8b5d2 <Fine_DutyCorrection+0x92a>
			{
				if ((Tmp3Val - Prescribed_T3) >0.2)
   8b54c:	4b2d      	ldr	r3, [pc, #180]	; (8b604 <Fine_DutyCorrection+0x95c>)
   8b54e:	6819      	ldr	r1, [r3, #0]
   8b550:	4b2e      	ldr	r3, [pc, #184]	; (8b60c <Fine_DutyCorrection+0x964>)
   8b552:	681a      	ldr	r2, [r3, #0]
   8b554:	4b26      	ldr	r3, [pc, #152]	; (8b5f0 <Fine_DutyCorrection+0x948>)
   8b556:	4608      	mov	r0, r1
   8b558:	4611      	mov	r1, r2
   8b55a:	4798      	blx	r3
   8b55c:	4603      	mov	r3, r0
   8b55e:	461a      	mov	r2, r3
   8b560:	4b29      	ldr	r3, [pc, #164]	; (8b608 <Fine_DutyCorrection+0x960>)
   8b562:	4610      	mov	r0, r2
   8b564:	4798      	blx	r3
   8b566:	4602      	mov	r2, r0
   8b568:	460b      	mov	r3, r1
   8b56a:	4c31      	ldr	r4, [pc, #196]	; (8b630 <Fine_DutyCorrection+0x988>)
   8b56c:	4610      	mov	r0, r2
   8b56e:	4619      	mov	r1, r3
   8b570:	a31b      	add	r3, pc, #108	; (adr r3, 8b5e0 <Fine_DutyCorrection+0x938>)
   8b572:	e9d3 2300 	ldrd	r2, r3, [r3]
   8b576:	47a0      	blx	r4
   8b578:	4603      	mov	r3, r0
   8b57a:	2b00      	cmp	r3, #0
   8b57c:	d008      	beq.n	8b590 <Fine_DutyCorrection+0x8e8>
				{
					avg_duty = avg_duty-6;
   8b57e:	4b29      	ldr	r3, [pc, #164]	; (8b624 <Fine_DutyCorrection+0x97c>)
   8b580:	881b      	ldrh	r3, [r3, #0]
   8b582:	b29b      	uxth	r3, r3
   8b584:	3b06      	subs	r3, #6
   8b586:	b29b      	uxth	r3, r3
   8b588:	b29a      	uxth	r2, r3
   8b58a:	4b26      	ldr	r3, [pc, #152]	; (8b624 <Fine_DutyCorrection+0x97c>)
   8b58c:	801a      	strh	r2, [r3, #0]
   8b58e:	e020      	b.n	8b5d2 <Fine_DutyCorrection+0x92a>
				}
				else if ((Prescribed_T3- Tmp3Val) >0.2)
   8b590:	4b1e      	ldr	r3, [pc, #120]	; (8b60c <Fine_DutyCorrection+0x964>)
   8b592:	6819      	ldr	r1, [r3, #0]
   8b594:	4b1b      	ldr	r3, [pc, #108]	; (8b604 <Fine_DutyCorrection+0x95c>)
   8b596:	681a      	ldr	r2, [r3, #0]
   8b598:	4b15      	ldr	r3, [pc, #84]	; (8b5f0 <Fine_DutyCorrection+0x948>)
   8b59a:	4608      	mov	r0, r1
   8b59c:	4611      	mov	r1, r2
   8b59e:	4798      	blx	r3
   8b5a0:	4603      	mov	r3, r0
   8b5a2:	461a      	mov	r2, r3
   8b5a4:	4b18      	ldr	r3, [pc, #96]	; (8b608 <Fine_DutyCorrection+0x960>)
   8b5a6:	4610      	mov	r0, r2
   8b5a8:	4798      	blx	r3
   8b5aa:	4602      	mov	r2, r0
   8b5ac:	460b      	mov	r3, r1
   8b5ae:	4c20      	ldr	r4, [pc, #128]	; (8b630 <Fine_DutyCorrection+0x988>)
   8b5b0:	4610      	mov	r0, r2
   8b5b2:	4619      	mov	r1, r3
   8b5b4:	a30a      	add	r3, pc, #40	; (adr r3, 8b5e0 <Fine_DutyCorrection+0x938>)
   8b5b6:	e9d3 2300 	ldrd	r2, r3, [r3]
   8b5ba:	47a0      	blx	r4
   8b5bc:	4603      	mov	r3, r0
   8b5be:	2b00      	cmp	r3, #0
   8b5c0:	d007      	beq.n	8b5d2 <Fine_DutyCorrection+0x92a>
				{
					avg_duty = avg_duty+6;
   8b5c2:	4b18      	ldr	r3, [pc, #96]	; (8b624 <Fine_DutyCorrection+0x97c>)
   8b5c4:	881b      	ldrh	r3, [r3, #0]
   8b5c6:	b29b      	uxth	r3, r3
   8b5c8:	3306      	adds	r3, #6
   8b5ca:	b29b      	uxth	r3, r3
   8b5cc:	b29a      	uxth	r2, r3
   8b5ce:	4b15      	ldr	r3, [pc, #84]	; (8b624 <Fine_DutyCorrection+0x97c>)
   8b5d0:	801a      	strh	r2, [r3, #0]
				}
			}
			

		}
	  avg_duty = avg_duty;
   8b5d2:	4b14      	ldr	r3, [pc, #80]	; (8b624 <Fine_DutyCorrection+0x97c>)
   8b5d4:	881a      	ldrh	r2, [r3, #0]
   8b5d6:	4b13      	ldr	r3, [pc, #76]	; (8b624 <Fine_DutyCorrection+0x97c>)
   8b5d8:	801a      	strh	r2, [r3, #0]
	}
	
}
   8b5da:	e8bd 8398 	ldmia.w	sp!, {r3, r4, r7, r8, r9, pc}
   8b5de:	bf00      	nop
   8b5e0:	9999999a 	.word	0x9999999a
   8b5e4:	3fc99999 	.word	0x3fc99999
   8b5e8:	20072196 	.word	0x20072196
   8b5ec:	20070550 	.word	0x20070550
   8b5f0:	000a6745 	.word	0x000a6745
   8b5f4:	200719c0 	.word	0x200719c0
   8b5f8:	000a6ca9 	.word	0x000a6ca9
   8b5fc:	000a6749 	.word	0x000a6749
   8b600:	000a6cbd 	.word	0x000a6cbd
   8b604:	200719c4 	.word	0x200719c4
   8b608:	000a6031 	.word	0x000a6031
   8b60c:	20070554 	.word	0x20070554
   8b610:	000a5d75 	.word	0x000a5d75
   8b614:	000a65bd 	.word	0x000a65bd
   8b618:	200719bc 	.word	0x200719bc
   8b61c:	42100000 	.word	0x42100000
   8b620:	200719e4 	.word	0x200719e4
   8b624:	200719ae 	.word	0x200719ae
   8b628:	00099cb9 	.word	0x00099cb9
   8b62c:	0008a139 	.word	0x0008a139
   8b630:	000a65f9 	.word	0x000a65f9

0008b634 <DataDisplay>:

DataDisplay()
{
   8b634:	b580      	push	{r7, lr}
   8b636:	b082      	sub	sp, #8
   8b638:	af00      	add	r7, sp, #0
	//************************************** display
	cl_Datastreamtype cl_tdata;
	cl_tdata.word = 0;
   8b63a:	2300      	movs	r3, #0
   8b63c:	607b      	str	r3, [r7, #4]
	//cl_tdata.Twobyte = sensordata;
	//cl_tdata.Twobyte = mid_meantemp2;
	cl_tdata.Twobyte = Tmp1Val;
   8b63e:	4b22      	ldr	r3, [pc, #136]	; (8b6c8 <DataDisplay+0x94>)
   8b640:	681a      	ldr	r2, [r3, #0]
   8b642:	4b22      	ldr	r3, [pc, #136]	; (8b6cc <DataDisplay+0x98>)
   8b644:	4610      	mov	r0, r2
   8b646:	4798      	blx	r3
   8b648:	4603      	mov	r3, r0
   8b64a:	b29b      	uxth	r3, r3
   8b64c:	80bb      	strh	r3, [r7, #4]
	cl_tdata.bytearray[2] = 4;
   8b64e:	2304      	movs	r3, #4
   8b650:	71bb      	strb	r3, [r7, #6]
	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
   8b652:	1d3b      	adds	r3, r7, #4
   8b654:	2037      	movs	r0, #55	; 0x37
   8b656:	4619      	mov	r1, r3
   8b658:	2204      	movs	r2, #4
   8b65a:	4b1d      	ldr	r3, [pc, #116]	; (8b6d0 <DataDisplay+0x9c>)
   8b65c:	4798      	blx	r3
	
	cl_tdata.word = 0;
   8b65e:	2300      	movs	r3, #0
   8b660:	607b      	str	r3, [r7, #4]
	//cl_tdata.Twobyte = sensordata;
	//cl_tdata.Twobyte = mid_meantemp2;
	cl_tdata.Twobyte = Tmp2Val;
   8b662:	4b1c      	ldr	r3, [pc, #112]	; (8b6d4 <DataDisplay+0xa0>)
   8b664:	681a      	ldr	r2, [r3, #0]
   8b666:	4b19      	ldr	r3, [pc, #100]	; (8b6cc <DataDisplay+0x98>)
   8b668:	4610      	mov	r0, r2
   8b66a:	4798      	blx	r3
   8b66c:	4603      	mov	r3, r0
   8b66e:	b29b      	uxth	r3, r3
   8b670:	80bb      	strh	r3, [r7, #4]
	cl_tdata.bytearray[2] = 5;
   8b672:	2305      	movs	r3, #5
   8b674:	71bb      	strb	r3, [r7, #6]
	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
   8b676:	1d3b      	adds	r3, r7, #4
   8b678:	2037      	movs	r0, #55	; 0x37
   8b67a:	4619      	mov	r1, r3
   8b67c:	2204      	movs	r2, #4
   8b67e:	4b14      	ldr	r3, [pc, #80]	; (8b6d0 <DataDisplay+0x9c>)
   8b680:	4798      	blx	r3
	
	cl_tdata.word = 0;
   8b682:	2300      	movs	r3, #0
   8b684:	607b      	str	r3, [r7, #4]
	//cl_tdata.Twobyte = sensordata;
	//cl_tdata.Twobyte = mid_meantemp2;
	cl_tdata.Twobyte = Tmp3Val;
   8b686:	4b14      	ldr	r3, [pc, #80]	; (8b6d8 <DataDisplay+0xa4>)
   8b688:	681a      	ldr	r2, [r3, #0]
   8b68a:	4b10      	ldr	r3, [pc, #64]	; (8b6cc <DataDisplay+0x98>)
   8b68c:	4610      	mov	r0, r2
   8b68e:	4798      	blx	r3
   8b690:	4603      	mov	r3, r0
   8b692:	b29b      	uxth	r3, r3
   8b694:	80bb      	strh	r3, [r7, #4]
	cl_tdata.bytearray[2] = 6;
   8b696:	2306      	movs	r3, #6
   8b698:	71bb      	strb	r3, [r7, #6]
	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
   8b69a:	1d3b      	adds	r3, r7, #4
   8b69c:	2037      	movs	r0, #55	; 0x37
   8b69e:	4619      	mov	r1, r3
   8b6a0:	2204      	movs	r2, #4
   8b6a2:	4b0b      	ldr	r3, [pc, #44]	; (8b6d0 <DataDisplay+0x9c>)
   8b6a4:	4798      	blx	r3
	
	cl_tdata.word = 0;
   8b6a6:	2300      	movs	r3, #0
   8b6a8:	607b      	str	r3, [r7, #4]
	//cl_tdata.Twobyte = sensordata;
	cl_tdata.Twobyte = avg_duty;
   8b6aa:	4b0c      	ldr	r3, [pc, #48]	; (8b6dc <DataDisplay+0xa8>)
   8b6ac:	881b      	ldrh	r3, [r3, #0]
   8b6ae:	b29b      	uxth	r3, r3
   8b6b0:	80bb      	strh	r3, [r7, #4]
	cl_tdata.bytearray[2] = 7;
   8b6b2:	2307      	movs	r3, #7
   8b6b4:	71bb      	strb	r3, [r7, #6]
	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
   8b6b6:	1d3b      	adds	r3, r7, #4
   8b6b8:	2037      	movs	r0, #55	; 0x37
   8b6ba:	4619      	mov	r1, r3
   8b6bc:	2204      	movs	r2, #4
   8b6be:	4b04      	ldr	r3, [pc, #16]	; (8b6d0 <DataDisplay+0x9c>)
   8b6c0:	4798      	blx	r3
// 	cl_tdata.Twobyte = TS2_slope * 100;
// 	cl_tdata.bytearray[2] = 15;
// 	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
	
//****************************************
}
   8b6c2:	3708      	adds	r7, #8
   8b6c4:	46bd      	mov	sp, r7
   8b6c6:	bd80      	pop	{r7, pc}
   8b6c8:	200719bc 	.word	0x200719bc
   8b6cc:	000a6d31 	.word	0x000a6d31
   8b6d0:	0009ba51 	.word	0x0009ba51
   8b6d4:	200719c0 	.word	0x200719c0
   8b6d8:	200719c4 	.word	0x200719c4
   8b6dc:	200719ae 	.word	0x200719ae

0008b6e0 <Hot_Rinse>:


void Hot_Rinse()
{
   8b6e0:	b590      	push	{r4, r7, lr}
   8b6e2:	b083      	sub	sp, #12
   8b6e4:	af00      	add	r7, sp, #0
		int16_t sensordata;
		
		count_500ms ++;
   8b6e6:	4b81      	ldr	r3, [pc, #516]	; (8b8ec <Hot_Rinse+0x20c>)
   8b6e8:	881b      	ldrh	r3, [r3, #0]
   8b6ea:	3301      	adds	r3, #1
   8b6ec:	b29a      	uxth	r2, r3
   8b6ee:	4b7f      	ldr	r3, [pc, #508]	; (8b8ec <Hot_Rinse+0x20c>)
   8b6f0:	801a      	strh	r2, [r3, #0]
		if(HeaterState == CL_HEATER_STATE_OFF  )
   8b6f2:	4b7f      	ldr	r3, [pc, #508]	; (8b8f0 <Hot_Rinse+0x210>)
   8b6f4:	781b      	ldrb	r3, [r3, #0]
   8b6f6:	2b04      	cmp	r3, #4
   8b6f8:	d102      	bne.n	8b700 <Hot_Rinse+0x20>
		{
			sv_cntrl_poweroffheater();
   8b6fa:	4b7e      	ldr	r3, [pc, #504]	; (8b8f4 <Hot_Rinse+0x214>)
   8b6fc:	4798      	blx	r3
			return;
   8b6fe:	e0f2      	b.n	8b8e6 <Hot_Rinse+0x206>
		}
		if((HeaterState == CL_HEATER_STATE_INACTIVE) || (HeaterState == CL_HEATER_SUBSTATE_OFF))
   8b700:	4b7b      	ldr	r3, [pc, #492]	; (8b8f0 <Hot_Rinse+0x210>)
   8b702:	781b      	ldrb	r3, [r3, #0]
   8b704:	2b00      	cmp	r3, #0
   8b706:	d003      	beq.n	8b710 <Hot_Rinse+0x30>
   8b708:	4b79      	ldr	r3, [pc, #484]	; (8b8f0 <Hot_Rinse+0x210>)
   8b70a:	781b      	ldrb	r3, [r3, #0]
   8b70c:	2b00      	cmp	r3, #0
   8b70e:	d100      	bne.n	8b712 <Hot_Rinse+0x32>
		{
			return;
   8b710:	e0e9      	b.n	8b8e6 <Hot_Rinse+0x206>
		}
		//avg_duty is set to value 2240 for TS3 = 37.4 at global level
		
		
		if(HeaterState == CL_HEATER_STATE_ON)
   8b712:	4b77      	ldr	r3, [pc, #476]	; (8b8f0 <Hot_Rinse+0x210>)
   8b714:	781b      	ldrb	r3, [r3, #0]
   8b716:	2b01      	cmp	r3, #1
   8b718:	d107      	bne.n	8b72a <Hot_Rinse+0x4a>
		{
			sv_cntrl_poweronheater();
   8b71a:	4b77      	ldr	r3, [pc, #476]	; (8b8f8 <Hot_Rinse+0x218>)
   8b71c:	4798      	blx	r3
			sv_cntrl_incheater(avg_duty);
   8b71e:	4b77      	ldr	r3, [pc, #476]	; (8b8fc <Hot_Rinse+0x21c>)
   8b720:	881b      	ldrh	r3, [r3, #0]
   8b722:	b21b      	sxth	r3, r3
   8b724:	4618      	mov	r0, r3
   8b726:	4b76      	ldr	r3, [pc, #472]	; (8b900 <Hot_Rinse+0x220>)
   8b728:	4798      	blx	r3
// 			Tmp1Val = res_temp_value/100;                                      // Temp1 value in XX.yy format
// 			Tmp1Val = Tmp1Val - 2.5 + 1.2;
// 		}
// 		
// 		if (!(count_500ms %40))
		Tmp2Val_prev = Tmp2Val;  //For calculating if TS2 stable, read once in every 2 sec
   8b72a:	4b76      	ldr	r3, [pc, #472]	; (8b904 <Hot_Rinse+0x224>)
   8b72c:	681b      	ldr	r3, [r3, #0]
   8b72e:	4a76      	ldr	r2, [pc, #472]	; (8b908 <Hot_Rinse+0x228>)
   8b730:	6013      	str	r3, [r2, #0]
		
		Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS,&sensordata);     // sensor data of T2
   8b732:	1dbb      	adds	r3, r7, #6
   8b734:	2013      	movs	r0, #19
   8b736:	4619      	mov	r1, r3
   8b738:	4b74      	ldr	r3, [pc, #464]	; (8b90c <Hot_Rinse+0x22c>)
   8b73a:	4798      	blx	r3
// 			uint16_t cal_data  = (402 *100* sensordata)/(2*32768);			   // resistance of PT100
// 			res_temp_lookuptable(cal_data);									   // temperature from look up table in 4 digits
// 			Tmp2Val = res_temp_value/100;									   // Temp2 value in XX.yy format
// 			Tmp2Val = Tmp2Val - - 0.4;                                     // sensor offset

			Tmp2Val = (Tmp2Val*9+ (float)sensordata/100)/10;
   8b73c:	4b71      	ldr	r3, [pc, #452]	; (8b904 <Hot_Rinse+0x224>)
   8b73e:	681a      	ldr	r2, [r3, #0]
   8b740:	4b73      	ldr	r3, [pc, #460]	; (8b910 <Hot_Rinse+0x230>)
   8b742:	4610      	mov	r0, r2
   8b744:	4973      	ldr	r1, [pc, #460]	; (8b914 <Hot_Rinse+0x234>)
   8b746:	4798      	blx	r3
   8b748:	4603      	mov	r3, r0
   8b74a:	461c      	mov	r4, r3
   8b74c:	88fb      	ldrh	r3, [r7, #6]
   8b74e:	b21a      	sxth	r2, r3
   8b750:	4b71      	ldr	r3, [pc, #452]	; (8b918 <Hot_Rinse+0x238>)
   8b752:	4610      	mov	r0, r2
   8b754:	4798      	blx	r3
   8b756:	4602      	mov	r2, r0
   8b758:	4b70      	ldr	r3, [pc, #448]	; (8b91c <Hot_Rinse+0x23c>)
   8b75a:	4610      	mov	r0, r2
   8b75c:	4970      	ldr	r1, [pc, #448]	; (8b920 <Hot_Rinse+0x240>)
   8b75e:	4798      	blx	r3
   8b760:	4603      	mov	r3, r0
   8b762:	461a      	mov	r2, r3
   8b764:	4b6f      	ldr	r3, [pc, #444]	; (8b924 <Hot_Rinse+0x244>)
   8b766:	4620      	mov	r0, r4
   8b768:	4611      	mov	r1, r2
   8b76a:	4798      	blx	r3
   8b76c:	4603      	mov	r3, r0
   8b76e:	461a      	mov	r2, r3
   8b770:	4b6a      	ldr	r3, [pc, #424]	; (8b91c <Hot_Rinse+0x23c>)
   8b772:	4610      	mov	r0, r2
   8b774:	496c      	ldr	r1, [pc, #432]	; (8b928 <Hot_Rinse+0x248>)
   8b776:	4798      	blx	r3
   8b778:	4603      	mov	r3, r0
   8b77a:	461a      	mov	r2, r3
   8b77c:	4b61      	ldr	r3, [pc, #388]	; (8b904 <Hot_Rinse+0x224>)
   8b77e:	601a      	str	r2, [r3, #0]
//			Tmp2Val = (float)sensordata/100;
		}
		
		if (!(count_500ms %20))
   8b780:	4b5a      	ldr	r3, [pc, #360]	; (8b8ec <Hot_Rinse+0x20c>)
   8b782:	881a      	ldrh	r2, [r3, #0]
   8b784:	4b69      	ldr	r3, [pc, #420]	; (8b92c <Hot_Rinse+0x24c>)
   8b786:	fba3 1302 	umull	r1, r3, r3, r2
   8b78a:	0919      	lsrs	r1, r3, #4
   8b78c:	460b      	mov	r3, r1
   8b78e:	009b      	lsls	r3, r3, #2
   8b790:	440b      	add	r3, r1
   8b792:	009b      	lsls	r3, r3, #2
   8b794:	1ad3      	subs	r3, r2, r3
   8b796:	b29b      	uxth	r3, r3
   8b798:	2b00      	cmp	r3, #0
   8b79a:	d103      	bne.n	8b7a4 <Hot_Rinse+0xc4>
		{
			Tmp3Val_prev = Tmp3Val;		//Sunil: Used for checking TS3 stability
   8b79c:	4b64      	ldr	r3, [pc, #400]	; (8b930 <Hot_Rinse+0x250>)
   8b79e:	681b      	ldr	r3, [r3, #0]
   8b7a0:	4a64      	ldr	r2, [pc, #400]	; (8b934 <Hot_Rinse+0x254>)
   8b7a2:	6013      	str	r3, [r2, #0]
		}
		
		Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&sensordata);                 // sensor data of T3
   8b7a4:	1dbb      	adds	r3, r7, #6
   8b7a6:	2014      	movs	r0, #20
   8b7a8:	4619      	mov	r1, r3
   8b7aa:	4b58      	ldr	r3, [pc, #352]	; (8b90c <Hot_Rinse+0x22c>)
   8b7ac:	4798      	blx	r3
// 			uint16_t cal_data  = (402 *100* sensordata)/(2*32768);						// resistance of PT100
// 			res_temp_lookuptable(cal_data);									// temperature from look up table in 4 digits
// 			Tmp3Val = res_temp_value/100;									// Temp3 value in XX.yy format
// //			Tmp3Val = Tmp3Val - 3.1 + 1.4;										// sensor offset
// 			Tmp3Val = Tmp3Val - - 0.4;										// sensor offset
			Tmp3Val = (Tmp3Val*9+ (float)sensordata/100)/10;
   8b7ae:	4b60      	ldr	r3, [pc, #384]	; (8b930 <Hot_Rinse+0x250>)
   8b7b0:	681a      	ldr	r2, [r3, #0]
   8b7b2:	4b57      	ldr	r3, [pc, #348]	; (8b910 <Hot_Rinse+0x230>)
   8b7b4:	4610      	mov	r0, r2
   8b7b6:	4957      	ldr	r1, [pc, #348]	; (8b914 <Hot_Rinse+0x234>)
   8b7b8:	4798      	blx	r3
   8b7ba:	4603      	mov	r3, r0
   8b7bc:	461c      	mov	r4, r3
   8b7be:	88fb      	ldrh	r3, [r7, #6]
   8b7c0:	b21a      	sxth	r2, r3
   8b7c2:	4b55      	ldr	r3, [pc, #340]	; (8b918 <Hot_Rinse+0x238>)
   8b7c4:	4610      	mov	r0, r2
   8b7c6:	4798      	blx	r3
   8b7c8:	4602      	mov	r2, r0
   8b7ca:	4b54      	ldr	r3, [pc, #336]	; (8b91c <Hot_Rinse+0x23c>)
   8b7cc:	4610      	mov	r0, r2
   8b7ce:	4954      	ldr	r1, [pc, #336]	; (8b920 <Hot_Rinse+0x240>)
   8b7d0:	4798      	blx	r3
   8b7d2:	4603      	mov	r3, r0
   8b7d4:	461a      	mov	r2, r3
   8b7d6:	4b53      	ldr	r3, [pc, #332]	; (8b924 <Hot_Rinse+0x244>)
   8b7d8:	4620      	mov	r0, r4
   8b7da:	4611      	mov	r1, r2
   8b7dc:	4798      	blx	r3
   8b7de:	4603      	mov	r3, r0
   8b7e0:	461a      	mov	r2, r3
   8b7e2:	4b4e      	ldr	r3, [pc, #312]	; (8b91c <Hot_Rinse+0x23c>)
   8b7e4:	4610      	mov	r0, r2
   8b7e6:	4950      	ldr	r1, [pc, #320]	; (8b928 <Hot_Rinse+0x248>)
   8b7e8:	4798      	blx	r3
   8b7ea:	4603      	mov	r3, r0
   8b7ec:	461a      	mov	r2, r3
   8b7ee:	4b50      	ldr	r3, [pc, #320]	; (8b930 <Hot_Rinse+0x250>)
   8b7f0:	601a      	str	r2, [r3, #0]
//			Tmp3Val = (float)sensordata /100;
		}
		
		
		if (!(count_500ms %20))
   8b7f2:	4b3e      	ldr	r3, [pc, #248]	; (8b8ec <Hot_Rinse+0x20c>)
   8b7f4:	881a      	ldrh	r2, [r3, #0]
   8b7f6:	4b4d      	ldr	r3, [pc, #308]	; (8b92c <Hot_Rinse+0x24c>)
   8b7f8:	fba3 1302 	umull	r1, r3, r3, r2
   8b7fc:	0919      	lsrs	r1, r3, #4
   8b7fe:	460b      	mov	r3, r1
   8b800:	009b      	lsls	r3, r3, #2
   8b802:	440b      	add	r3, r1
   8b804:	009b      	lsls	r3, r3, #2
   8b806:	1ad3      	subs	r3, r2, r3
   8b808:	b29b      	uxth	r3, r3
   8b80a:	2b00      	cmp	r3, #0
   8b80c:	d16b      	bne.n	8b8e6 <Hot_Rinse+0x206>
		{
			
		
		if ((Tmp2Val - 75) > 5 )     
   8b80e:	4b3d      	ldr	r3, [pc, #244]	; (8b904 <Hot_Rinse+0x224>)
   8b810:	681a      	ldr	r2, [r3, #0]
   8b812:	4b49      	ldr	r3, [pc, #292]	; (8b938 <Hot_Rinse+0x258>)
   8b814:	4610      	mov	r0, r2
   8b816:	4949      	ldr	r1, [pc, #292]	; (8b93c <Hot_Rinse+0x25c>)
   8b818:	4798      	blx	r3
   8b81a:	4603      	mov	r3, r0
   8b81c:	461a      	mov	r2, r3
   8b81e:	4b48      	ldr	r3, [pc, #288]	; (8b940 <Hot_Rinse+0x260>)
   8b820:	4610      	mov	r0, r2
   8b822:	4948      	ldr	r1, [pc, #288]	; (8b944 <Hot_Rinse+0x264>)
   8b824:	4798      	blx	r3
   8b826:	4603      	mov	r3, r0
   8b828:	2b00      	cmp	r3, #0
   8b82a:	d013      	beq.n	8b854 <Hot_Rinse+0x174>
		{
			avg_duty = avg_duty - 100;
   8b82c:	4b33      	ldr	r3, [pc, #204]	; (8b8fc <Hot_Rinse+0x21c>)
   8b82e:	881b      	ldrh	r3, [r3, #0]
   8b830:	b29b      	uxth	r3, r3
   8b832:	3b64      	subs	r3, #100	; 0x64
   8b834:	b29b      	uxth	r3, r3
   8b836:	b29a      	uxth	r2, r3
   8b838:	4b30      	ldr	r3, [pc, #192]	; (8b8fc <Hot_Rinse+0x21c>)
   8b83a:	801a      	strh	r2, [r3, #0]
			if (avg_duty <2500)
   8b83c:	4b2f      	ldr	r3, [pc, #188]	; (8b8fc <Hot_Rinse+0x21c>)
   8b83e:	881b      	ldrh	r3, [r3, #0]
   8b840:	b21b      	sxth	r3, r3
   8b842:	f640 12c3 	movw	r2, #2499	; 0x9c3
   8b846:	4293      	cmp	r3, r2
   8b848:	dc47      	bgt.n	8b8da <Hot_Rinse+0x1fa>
			{
				avg_duty = 2500;
   8b84a:	4b2c      	ldr	r3, [pc, #176]	; (8b8fc <Hot_Rinse+0x21c>)
   8b84c:	f640 12c4 	movw	r2, #2500	; 0x9c4
   8b850:	801a      	strh	r2, [r3, #0]
   8b852:	e042      	b.n	8b8da <Hot_Rinse+0x1fa>
			}
			
		}
		else if ((75 - Tmp2Val) > 5 && (Tmp3Val <= 70))
   8b854:	4b2b      	ldr	r3, [pc, #172]	; (8b904 <Hot_Rinse+0x224>)
   8b856:	681a      	ldr	r2, [r3, #0]
   8b858:	4b37      	ldr	r3, [pc, #220]	; (8b938 <Hot_Rinse+0x258>)
   8b85a:	4838      	ldr	r0, [pc, #224]	; (8b93c <Hot_Rinse+0x25c>)
   8b85c:	4611      	mov	r1, r2
   8b85e:	4798      	blx	r3
   8b860:	4603      	mov	r3, r0
   8b862:	461a      	mov	r2, r3
   8b864:	4b36      	ldr	r3, [pc, #216]	; (8b940 <Hot_Rinse+0x260>)
   8b866:	4610      	mov	r0, r2
   8b868:	4936      	ldr	r1, [pc, #216]	; (8b944 <Hot_Rinse+0x264>)
   8b86a:	4798      	blx	r3
   8b86c:	4603      	mov	r3, r0
   8b86e:	2b00      	cmp	r3, #0
   8b870:	d01d      	beq.n	8b8ae <Hot_Rinse+0x1ce>
   8b872:	4b2f      	ldr	r3, [pc, #188]	; (8b930 <Hot_Rinse+0x250>)
   8b874:	681a      	ldr	r2, [r3, #0]
   8b876:	4b34      	ldr	r3, [pc, #208]	; (8b948 <Hot_Rinse+0x268>)
   8b878:	4610      	mov	r0, r2
   8b87a:	4934      	ldr	r1, [pc, #208]	; (8b94c <Hot_Rinse+0x26c>)
   8b87c:	4798      	blx	r3
   8b87e:	4603      	mov	r3, r0
   8b880:	2b00      	cmp	r3, #0
   8b882:	d014      	beq.n	8b8ae <Hot_Rinse+0x1ce>
		{
			avg_duty = avg_duty + 80;
   8b884:	4b1d      	ldr	r3, [pc, #116]	; (8b8fc <Hot_Rinse+0x21c>)
   8b886:	881b      	ldrh	r3, [r3, #0]
   8b888:	b29b      	uxth	r3, r3
   8b88a:	3350      	adds	r3, #80	; 0x50
   8b88c:	b29b      	uxth	r3, r3
   8b88e:	b29a      	uxth	r2, r3
   8b890:	4b1a      	ldr	r3, [pc, #104]	; (8b8fc <Hot_Rinse+0x21c>)
   8b892:	801a      	strh	r2, [r3, #0]
			if (avg_duty >3500)
   8b894:	4b19      	ldr	r3, [pc, #100]	; (8b8fc <Hot_Rinse+0x21c>)
   8b896:	881b      	ldrh	r3, [r3, #0]
   8b898:	b21b      	sxth	r3, r3
   8b89a:	f640 52ac 	movw	r2, #3500	; 0xdac
   8b89e:	4293      	cmp	r3, r2
   8b8a0:	dd04      	ble.n	8b8ac <Hot_Rinse+0x1cc>
			{
				avg_duty = 3500;
   8b8a2:	4b16      	ldr	r3, [pc, #88]	; (8b8fc <Hot_Rinse+0x21c>)
   8b8a4:	f640 52ac 	movw	r2, #3500	; 0xdac
   8b8a8:	801a      	strh	r2, [r3, #0]
			
		}
		else if ((75 - Tmp2Val) > 5 && (Tmp3Val <= 70))
		{
			avg_duty = avg_duty + 80;
			if (avg_duty >3500)
   8b8aa:	e016      	b.n	8b8da <Hot_Rinse+0x1fa>
   8b8ac:	e015      	b.n	8b8da <Hot_Rinse+0x1fa>
			{
				avg_duty = 3500;
			}
		}
		
		else if ((Tmp3Val <= 80) && (Tmp3Val >= 70))
   8b8ae:	4b20      	ldr	r3, [pc, #128]	; (8b930 <Hot_Rinse+0x250>)
   8b8b0:	681a      	ldr	r2, [r3, #0]
   8b8b2:	4b25      	ldr	r3, [pc, #148]	; (8b948 <Hot_Rinse+0x268>)
   8b8b4:	4610      	mov	r0, r2
   8b8b6:	4926      	ldr	r1, [pc, #152]	; (8b950 <Hot_Rinse+0x270>)
   8b8b8:	4798      	blx	r3
   8b8ba:	4603      	mov	r3, r0
   8b8bc:	2b00      	cmp	r3, #0
   8b8be:	d00c      	beq.n	8b8da <Hot_Rinse+0x1fa>
   8b8c0:	4b1b      	ldr	r3, [pc, #108]	; (8b930 <Hot_Rinse+0x250>)
   8b8c2:	681a      	ldr	r2, [r3, #0]
   8b8c4:	4b23      	ldr	r3, [pc, #140]	; (8b954 <Hot_Rinse+0x274>)
   8b8c6:	4610      	mov	r0, r2
   8b8c8:	4920      	ldr	r1, [pc, #128]	; (8b94c <Hot_Rinse+0x26c>)
   8b8ca:	4798      	blx	r3
   8b8cc:	4603      	mov	r3, r0
   8b8ce:	2b00      	cmp	r3, #0
   8b8d0:	d003      	beq.n	8b8da <Hot_Rinse+0x1fa>
		{
			avg_duty = avg_duty;
   8b8d2:	4b0a      	ldr	r3, [pc, #40]	; (8b8fc <Hot_Rinse+0x21c>)
   8b8d4:	881a      	ldrh	r2, [r3, #0]
   8b8d6:	4b09      	ldr	r3, [pc, #36]	; (8b8fc <Hot_Rinse+0x21c>)
   8b8d8:	801a      	strh	r2, [r3, #0]
		}
		
	sv_cntrl_incheater(avg_duty);
   8b8da:	4b08      	ldr	r3, [pc, #32]	; (8b8fc <Hot_Rinse+0x21c>)
   8b8dc:	881b      	ldrh	r3, [r3, #0]
   8b8de:	b21b      	sxth	r3, r3
   8b8e0:	4618      	mov	r0, r3
   8b8e2:	4b07      	ldr	r3, [pc, #28]	; (8b900 <Hot_Rinse+0x220>)
   8b8e4:	4798      	blx	r3
		
		}
	
}
   8b8e6:	370c      	adds	r7, #12
   8b8e8:	46bd      	mov	sp, r7
   8b8ea:	bd90      	pop	{r4, r7, pc}
   8b8ec:	200719c8 	.word	0x200719c8
   8b8f0:	200719ab 	.word	0x200719ab
   8b8f4:	00099cb9 	.word	0x00099cb9
   8b8f8:	00099ca5 	.word	0x00099ca5
   8b8fc:	200719ae 	.word	0x200719ae
   8b900:	00099dad 	.word	0x00099dad
   8b904:	200719c0 	.word	0x200719c0
   8b908:	200719d8 	.word	0x200719d8
   8b90c:	0008e7f9 	.word	0x0008e7f9
   8b910:	000a6959 	.word	0x000a6959
   8b914:	41100000 	.word	0x41100000
   8b918:	000a68b1 	.word	0x000a68b1
   8b91c:	000a6ac1 	.word	0x000a6ac1
   8b920:	42c80000 	.word	0x42c80000
   8b924:	000a6749 	.word	0x000a6749
   8b928:	41200000 	.word	0x41200000
   8b92c:	cccccccd 	.word	0xcccccccd
   8b930:	200719c4 	.word	0x200719c4
   8b934:	20072188 	.word	0x20072188
   8b938:	000a6745 	.word	0x000a6745
   8b93c:	42960000 	.word	0x42960000
   8b940:	000a6cd1 	.word	0x000a6cd1
   8b944:	40a00000 	.word	0x40a00000
   8b948:	000a6ca9 	.word	0x000a6ca9
   8b94c:	428c0000 	.word	0x428c0000
   8b950:	42a00000 	.word	0x42a00000
   8b954:	000a6cbd 	.word	0x000a6cbd

0008b958 <Cl_Init_Controller>:
extern Cl_ReturnCodeType  Cl_Conductivity_Sensor_Controller(Cl_CondSensor_EventType Cl_cond_Event);

extern Cl_Mac_EventQueueType Cl_MacEventQueue1;

Cl_ReturnCodeType  Cl_Init_Controller(Cl_Mac_EventsType Cl_MacInitEvent)
{
   8b958:	b580      	push	{r7, lr}
   8b95a:	b090      	sub	sp, #64	; 0x40
   8b95c:	af00      	add	r7, sp, #0
   8b95e:	4603      	mov	r3, r0
   8b960:	71fb      	strb	r3, [r7, #7]
	
	Cl_ReturnCodeType  Cl_initcode = CL_OK;
   8b962:	2300      	movs	r3, #0
   8b964:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	Cl_Init_Events cl_initevent = EVENT_NULL_EVENT;
   8b968:	2300      	movs	r3, #0
   8b96a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	static  Cl_Init_StatesType Cl_Init_States = CL_INIT_STATE_IDLE;
	Cl_Uint8Type data[2];
	Cl_ConsoleTxCommandtype command;
	int count = 0;
   8b96e:	2300      	movs	r3, #0
   8b970:	63fb      	str	r3, [r7, #60]	; 0x3c
	int lram_test_buffer[10];
	
	static int gram_test_buffer[10] = {0xAAAA,0x5555,0xAAAA,0x5555,0xAAAA,0x5555,0xAAAA,0x5555,0xAAAA,};
	
	
	cl_init_translatemacevent( Cl_MacInitEvent, &cl_initevent);
   8b972:	79fa      	ldrb	r2, [r7, #7]
   8b974:	f107 0339 	add.w	r3, r7, #57	; 0x39
   8b978:	4610      	mov	r0, r2
   8b97a:	4619      	mov	r1, r3
   8b97c:	4b83      	ldr	r3, [pc, #524]	; (8bb8c <Cl_Init_Controller+0x234>)
   8b97e:	4798      	blx	r3
	switch (Cl_Init_States)
   8b980:	4b83      	ldr	r3, [pc, #524]	; (8bb90 <Cl_Init_Controller+0x238>)
   8b982:	781b      	ldrb	r3, [r3, #0]
   8b984:	2b08      	cmp	r3, #8
   8b986:	f200 80fa 	bhi.w	8bb7e <Cl_Init_Controller+0x226>
   8b98a:	a201      	add	r2, pc, #4	; (adr r2, 8b990 <Cl_Init_Controller+0x38>)
   8b98c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8b990:	0008b9b5 	.word	0x0008b9b5
   8b994:	0008bac9 	.word	0x0008bac9
   8b998:	0008baf1 	.word	0x0008baf1
   8b99c:	0008bb7f 	.word	0x0008bb7f
   8b9a0:	0008bb7f 	.word	0x0008bb7f
   8b9a4:	0008bb19 	.word	0x0008bb19
   8b9a8:	0008bb7f 	.word	0x0008bb7f
   8b9ac:	0008bb7f 	.word	0x0008bb7f
   8b9b0:	0008bb49 	.word	0x0008bb49
	{
		
		case CL_INIT_STATE_IDLE:
					switch(cl_initevent)
   8b9b4:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
   8b9b8:	2b01      	cmp	r3, #1
   8b9ba:	d000      	beq.n	8b9be <Cl_Init_Controller+0x66>
						
						
						Cl_initcode =  Cl_Conductivity_Sensor_Controller(COND_EVENT_INIT);
							
						break;
						default:break;
   8b9bc:	e083      	b.n	8bac6 <Cl_Init_Controller+0x16e>
		
		case CL_INIT_STATE_IDLE:
					switch(cl_initevent)
					{
						case EVENT_INIT_INIT:
						Cl_Init_States = CL_INIT_STATE_INIT;
   8b9be:	4b74      	ldr	r3, [pc, #464]	; (8bb90 <Cl_Init_Controller+0x238>)
   8b9c0:	2201      	movs	r2, #1
   8b9c2:	701a      	strb	r2, [r3, #0]
						
						data[0] = CL_INIT_ROM_TEST_ON;//rom test
   8b9c4:	2302      	movs	r3, #2
   8b9c6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
						command = CON_TX_COMMAND_INIT_STATE;
   8b9ca:	231a      	movs	r3, #26
   8b9cc:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
						Cl_initcode = Cl_SendDatatoconsole(command,&data,1);
   8b9d0:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
   8b9d4:	f107 0334 	add.w	r3, r7, #52	; 0x34
   8b9d8:	4610      	mov	r0, r2
   8b9da:	4619      	mov	r1, r3
   8b9dc:	2201      	movs	r2, #1
   8b9de:	4b6d      	ldr	r3, [pc, #436]	; (8bb94 <Cl_Init_Controller+0x23c>)
   8b9e0:	4798      	blx	r3
   8b9e2:	4603      	mov	r3, r0
   8b9e4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
						//while( //rom test )		
						{
							// algo rom test
						}	
						Cl_Init_States = CL_INIT_RAM_TEST_ON;
   8b9e8:	4b69      	ldr	r3, [pc, #420]	; (8bb90 <Cl_Init_Controller+0x238>)
   8b9ea:	2205      	movs	r2, #5
   8b9ec:	701a      	strb	r2, [r3, #0]
						data[0] = CL_INIT_RAM_TEST_ON;//ram test
   8b9ee:	2305      	movs	r3, #5
   8b9f0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
						command = CON_TX_COMMAND_INIT_STATE;
   8b9f4:	231a      	movs	r3, #26
   8b9f6:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
						Cl_initcode = Cl_SendDatatoconsole(command,&data,1);
   8b9fa:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
   8b9fe:	f107 0334 	add.w	r3, r7, #52	; 0x34
   8ba02:	4610      	mov	r0, r2
   8ba04:	4619      	mov	r1, r3
   8ba06:	2201      	movs	r2, #1
   8ba08:	4b62      	ldr	r3, [pc, #392]	; (8bb94 <Cl_Init_Controller+0x23c>)
   8ba0a:	4798      	blx	r3
   8ba0c:	4603      	mov	r3, r0
   8ba0e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
						while( count <10)//ram test )	
   8ba12:	e00d      	b.n	8ba30 <Cl_Init_Controller+0xd8>
						{
							//algo ram test
							lram_test_buffer[count] = gram_test_buffer[count];
   8ba14:	4a60      	ldr	r2, [pc, #384]	; (8bb98 <Cl_Init_Controller+0x240>)
   8ba16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   8ba18:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   8ba1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   8ba1e:	009b      	lsls	r3, r3, #2
   8ba20:	f107 0140 	add.w	r1, r7, #64	; 0x40
   8ba24:	440b      	add	r3, r1
   8ba26:	f843 2c34 	str.w	r2, [r3, #-52]
							count++;
   8ba2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   8ba2c:	3301      	adds	r3, #1
   8ba2e:	63fb      	str	r3, [r7, #60]	; 0x3c
						}	
						Cl_Init_States = CL_INIT_RAM_TEST_ON;
						data[0] = CL_INIT_RAM_TEST_ON;//ram test
						command = CON_TX_COMMAND_INIT_STATE;
						Cl_initcode = Cl_SendDatatoconsole(command,&data,1);
						while( count <10)//ram test )	
   8ba30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   8ba32:	2b09      	cmp	r3, #9
   8ba34:	ddee      	ble.n	8ba14 <Cl_Init_Controller+0xbc>
						{
							//algo ram test
							lram_test_buffer[count] = gram_test_buffer[count];
							count++;
						}
						count = 0;
   8ba36:	2300      	movs	r3, #0
   8ba38:	63fb      	str	r3, [r7, #60]	; 0x3c
						while( count <10)//ram test verification )
   8ba3a:	e010      	b.n	8ba5e <Cl_Init_Controller+0x106>
						{
							if (lram_test_buffer[count] != gram_test_buffer[count])
   8ba3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   8ba3e:	009b      	lsls	r3, r3, #2
   8ba40:	f107 0240 	add.w	r2, r7, #64	; 0x40
   8ba44:	4413      	add	r3, r2
   8ba46:	f853 2c34 	ldr.w	r2, [r3, #-52]
   8ba4a:	4953      	ldr	r1, [pc, #332]	; (8bb98 <Cl_Init_Controller+0x240>)
   8ba4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   8ba4e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   8ba52:	429a      	cmp	r2, r3
   8ba54:	d000      	beq.n	8ba58 <Cl_Init_Controller+0x100>
							{
								// test FAILed
								break;
   8ba56:	e005      	b.n	8ba64 <Cl_Init_Controller+0x10c>
							}
							count++;
   8ba58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   8ba5a:	3301      	adds	r3, #1
   8ba5c:	63fb      	str	r3, [r7, #60]	; 0x3c
							//algo ram test
							lram_test_buffer[count] = gram_test_buffer[count];
							count++;
						}
						count = 0;
						while( count <10)//ram test verification )
   8ba5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   8ba60:	2b09      	cmp	r3, #9
   8ba62:	ddeb      	ble.n	8ba3c <Cl_Init_Controller+0xe4>
								break;
							}
							count++;
						}
						
						Cl_Init_States = CL_INIT_RAM_TEST_PASSED;
   8ba64:	4b4a      	ldr	r3, [pc, #296]	; (8bb90 <Cl_Init_Controller+0x238>)
   8ba66:	2207      	movs	r2, #7
   8ba68:	701a      	strb	r2, [r3, #0]
						//TEST PASSED
						
						data[0] = CL_INIT_RAM_TEST_PASSED;//ram test
   8ba6a:	2307      	movs	r3, #7
   8ba6c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
						command = CON_TX_COMMAND_INIT_STATE;
   8ba70:	231a      	movs	r3, #26
   8ba72:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
						Cl_initcode = Cl_SendDatatoconsole(command,&data,1);
   8ba76:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
   8ba7a:	f107 0334 	add.w	r3, r7, #52	; 0x34
   8ba7e:	4610      	mov	r0, r2
   8ba80:	4619      	mov	r1, r3
   8ba82:	2201      	movs	r2, #1
   8ba84:	4b43      	ldr	r3, [pc, #268]	; (8bb94 <Cl_Init_Controller+0x23c>)
   8ba86:	4798      	blx	r3
   8ba88:	4603      	mov	r3, r0
   8ba8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
						
						Cl_Init_States = CL_INIT_READY;
   8ba8e:	4b40      	ldr	r3, [pc, #256]	; (8bb90 <Cl_Init_Controller+0x238>)
   8ba90:	2208      	movs	r2, #8
   8ba92:	701a      	strb	r2, [r3, #0]
						data[0] = CL_INIT_READY;
   8ba94:	2308      	movs	r3, #8
   8ba96:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
						command = CON_TX_COMMAND_INIT_DONE;
   8ba9a:	231b      	movs	r3, #27
   8ba9c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
						Cl_initcode = Cl_SendDatatoconsole(command,&data,0);
   8baa0:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
   8baa4:	f107 0334 	add.w	r3, r7, #52	; 0x34
   8baa8:	4610      	mov	r0, r2
   8baaa:	4619      	mov	r1, r3
   8baac:	2200      	movs	r2, #0
   8baae:	4b39      	ldr	r3, [pc, #228]	; (8bb94 <Cl_Init_Controller+0x23c>)
   8bab0:	4798      	blx	r3
   8bab2:	4603      	mov	r3, r0
   8bab4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
						
						
						Cl_initcode =  Cl_Conductivity_Sensor_Controller(COND_EVENT_INIT);
   8bab8:	2000      	movs	r0, #0
   8baba:	4b38      	ldr	r3, [pc, #224]	; (8bb9c <Cl_Init_Controller+0x244>)
   8babc:	4798      	blx	r3
   8babe:	4603      	mov	r3, r0
   8bac0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
							
						break;
   8bac4:	bf00      	nop
						default:break;
					}
		break;
   8bac6:	e05b      	b.n	8bb80 <Cl_Init_Controller+0x228>
		case	CL_INIT_STATE_INIT:
					switch(cl_initevent)
   8bac8:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
   8bacc:	3b02      	subs	r3, #2
   8bace:	2b04      	cmp	r3, #4
   8bad0:	d80c      	bhi.n	8baec <Cl_Init_Controller+0x194>
   8bad2:	a201      	add	r2, pc, #4	; (adr r2, 8bad8 <Cl_Init_Controller+0x180>)
   8bad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8bad8:	0008baed 	.word	0x0008baed
   8badc:	0008baed 	.word	0x0008baed
   8bae0:	0008baed 	.word	0x0008baed
   8bae4:	0008baed 	.word	0x0008baed
   8bae8:	0008baed 	.word	0x0008baed
						case EVENT_INIT_TICK_MINUTE:
						break;
						case EVENT_INIT_TICK_HOUR:
						break;
						default:
						break;
   8baec:	bf00      	nop
					}
		break;
   8baee:	e047      	b.n	8bb80 <Cl_Init_Controller+0x228>
		case CL_INIT_ROM_TEST_ON:
					switch(cl_initevent)
   8baf0:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
   8baf4:	3b02      	subs	r3, #2
   8baf6:	2b04      	cmp	r3, #4
   8baf8:	d80c      	bhi.n	8bb14 <Cl_Init_Controller+0x1bc>
   8bafa:	a201      	add	r2, pc, #4	; (adr r2, 8bb00 <Cl_Init_Controller+0x1a8>)
   8bafc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8bb00:	0008bb15 	.word	0x0008bb15
   8bb04:	0008bb15 	.word	0x0008bb15
   8bb08:	0008bb15 	.word	0x0008bb15
   8bb0c:	0008bb15 	.word	0x0008bb15
   8bb10:	0008bb15 	.word	0x0008bb15
						case EVENT_INIT_TICK_MINUTE:
						break;
						case EVENT_INIT_TICK_HOUR:
						break;
						default:
						break;
   8bb14:	bf00      	nop
					}
		break;
   8bb16:	e033      	b.n	8bb80 <Cl_Init_Controller+0x228>
		case CL_INIT_RAM_TEST_ON:
					switch(cl_initevent)
   8bb18:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
   8bb1c:	3b02      	subs	r3, #2
   8bb1e:	2b04      	cmp	r3, #4
   8bb20:	d810      	bhi.n	8bb44 <Cl_Init_Controller+0x1ec>
   8bb22:	a201      	add	r2, pc, #4	; (adr r2, 8bb28 <Cl_Init_Controller+0x1d0>)
   8bb24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8bb28:	0008bb45 	.word	0x0008bb45
   8bb2c:	0008bb45 	.word	0x0008bb45
   8bb30:	0008bb3d 	.word	0x0008bb3d
   8bb34:	0008bb45 	.word	0x0008bb45
   8bb38:	0008bb45 	.word	0x0008bb45
						case EVENT_INIT_TICK_100MS:
						break;
						case EVENT_INIT_TICK_500MS:
						break;
						case EVENT_INIT_TICK_SECOND:
						Cl_Init_States = CL_INIT_READY;
   8bb3c:	4b14      	ldr	r3, [pc, #80]	; (8bb90 <Cl_Init_Controller+0x238>)
   8bb3e:	2208      	movs	r2, #8
   8bb40:	701a      	strb	r2, [r3, #0]
						
				//		command = CON_TX_COMMAND_INIT_DONE;
					//	Cl_initcode = Cl_SendDatatoconsole(command,&data,0);
						break;
   8bb42:	e000      	b.n	8bb46 <Cl_Init_Controller+0x1ee>
						case EVENT_INIT_TICK_MINUTE:
						break;
						case EVENT_INIT_TICK_HOUR:
						break;
						default:
						break;
   8bb44:	bf00      	nop
					}
		break;
   8bb46:	e01b      	b.n	8bb80 <Cl_Init_Controller+0x228>
		case CL_INIT_READY:
							switch(cl_initevent)
   8bb48:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
   8bb4c:	3b02      	subs	r3, #2
   8bb4e:	2b04      	cmp	r3, #4
   8bb50:	d813      	bhi.n	8bb7a <Cl_Init_Controller+0x222>
   8bb52:	a201      	add	r2, pc, #4	; (adr r2, 8bb58 <Cl_Init_Controller+0x200>)
   8bb54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8bb58:	0008bb7b 	.word	0x0008bb7b
   8bb5c:	0008bb7b 	.word	0x0008bb7b
   8bb60:	0008bb6d 	.word	0x0008bb6d
   8bb64:	0008bb7b 	.word	0x0008bb7b
   8bb68:	0008bb7b 	.word	0x0008bb7b
								case EVENT_INIT_TICK_100MS:
								break;
								case EVENT_INIT_TICK_500MS:
								break;
								case EVENT_INIT_TICK_SECOND:
								Cl_initcode = Cl_mac_apprequesthandler(MACREQ_ENTER_STANDBY);
   8bb6c:	2043      	movs	r0, #67	; 0x43
   8bb6e:	4b0c      	ldr	r3, [pc, #48]	; (8bba0 <Cl_Init_Controller+0x248>)
   8bb70:	4798      	blx	r3
   8bb72:	4603      	mov	r3, r0
   8bb74:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
								break;
   8bb78:	e000      	b.n	8bb7c <Cl_Init_Controller+0x224>
								case EVENT_INIT_TICK_MINUTE:
								break;
								case EVENT_INIT_TICK_HOUR:
								break;
								default:
								break;
   8bb7a:	bf00      	nop
							}
					

		break;
   8bb7c:	e000      	b.n	8bb80 <Cl_Init_Controller+0x228>

			
			default: break;
   8bb7e:	bf00      	nop
	}
return CL_OK;	
   8bb80:	2300      	movs	r3, #0
}
   8bb82:	4618      	mov	r0, r3
   8bb84:	3740      	adds	r7, #64	; 0x40
   8bb86:	46bd      	mov	sp, r7
   8bb88:	bd80      	pop	{r7, pc}
   8bb8a:	bf00      	nop
   8bb8c:	0008bba5 	.word	0x0008bba5
   8bb90:	200719e5 	.word	0x200719e5
   8bb94:	0009ba51 	.word	0x0009ba51
   8bb98:	2007055c 	.word	0x2007055c
   8bb9c:	0008f8f9 	.word	0x0008f8f9
   8bba0:	0008bc51 	.word	0x0008bc51

0008bba4 <cl_init_translatemacevent>:

Cl_ReturnCodeType  cl_init_translatemacevent(Cl_Mac_EventsType Cl_MacInitEvt,Cl_Init_Events* cl_init_event)
{
   8bba4:	b480      	push	{r7}
   8bba6:	b083      	sub	sp, #12
   8bba8:	af00      	add	r7, sp, #0
   8bbaa:	4603      	mov	r3, r0
   8bbac:	6039      	str	r1, [r7, #0]
   8bbae:	71fb      	strb	r3, [r7, #7]
	switch(Cl_MacInitEvt)
   8bbb0:	79fb      	ldrb	r3, [r7, #7]
   8bbb2:	3b2a      	subs	r3, #42	; 0x2a
   8bbb4:	2b13      	cmp	r3, #19
   8bbb6:	d843      	bhi.n	8bc40 <cl_init_translatemacevent+0x9c>
   8bbb8:	a201      	add	r2, pc, #4	; (adr r2, 8bbc0 <cl_init_translatemacevent+0x1c>)
   8bbba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8bbbe:	bf00      	nop
   8bbc0:	0008bc11 	.word	0x0008bc11
   8bbc4:	0008bc41 	.word	0x0008bc41
   8bbc8:	0008bc41 	.word	0x0008bc41
   8bbcc:	0008bc41 	.word	0x0008bc41
   8bbd0:	0008bc41 	.word	0x0008bc41
   8bbd4:	0008bc41 	.word	0x0008bc41
   8bbd8:	0008bc41 	.word	0x0008bc41
   8bbdc:	0008bc41 	.word	0x0008bc41
   8bbe0:	0008bc41 	.word	0x0008bc41
   8bbe4:	0008bc41 	.word	0x0008bc41
   8bbe8:	0008bc41 	.word	0x0008bc41
   8bbec:	0008bc41 	.word	0x0008bc41
   8bbf0:	0008bc41 	.word	0x0008bc41
   8bbf4:	0008bc41 	.word	0x0008bc41
   8bbf8:	0008bc41 	.word	0x0008bc41
   8bbfc:	0008bc19 	.word	0x0008bc19
   8bc00:	0008bc21 	.word	0x0008bc21
   8bc04:	0008bc29 	.word	0x0008bc29
   8bc08:	0008bc31 	.word	0x0008bc31
   8bc0c:	0008bc39 	.word	0x0008bc39
	{
		case EVT_COMMAND_ENTER_INIT:
		*cl_init_event = EVENT_INIT_INIT;
   8bc10:	683b      	ldr	r3, [r7, #0]
   8bc12:	2201      	movs	r2, #1
   8bc14:	701a      	strb	r2, [r3, #0]
		break;
   8bc16:	e014      	b.n	8bc42 <cl_init_translatemacevent+0x9e>
		case EVT_TICK_100M:
		*cl_init_event = EVENT_INIT_TICK_100MS;
   8bc18:	683b      	ldr	r3, [r7, #0]
   8bc1a:	2202      	movs	r2, #2
   8bc1c:	701a      	strb	r2, [r3, #0]
		break;
   8bc1e:	e010      	b.n	8bc42 <cl_init_translatemacevent+0x9e>
		case EVT_TICK_500M:
		*cl_init_event = EVENT_INIT_TICK_500MS;
   8bc20:	683b      	ldr	r3, [r7, #0]
   8bc22:	2203      	movs	r2, #3
   8bc24:	701a      	strb	r2, [r3, #0]
		break;
   8bc26:	e00c      	b.n	8bc42 <cl_init_translatemacevent+0x9e>
		case EVT_TICK_SEC:
		*cl_init_event = EVENT_INIT_TICK_SECOND;
   8bc28:	683b      	ldr	r3, [r7, #0]
   8bc2a:	2204      	movs	r2, #4
   8bc2c:	701a      	strb	r2, [r3, #0]
		break;		
   8bc2e:	e008      	b.n	8bc42 <cl_init_translatemacevent+0x9e>
		case EVT_TICK_MIN:
		*cl_init_event = EVENT_INIT_TICK_MINUTE;
   8bc30:	683b      	ldr	r3, [r7, #0]
   8bc32:	2205      	movs	r2, #5
   8bc34:	701a      	strb	r2, [r3, #0]
		break;	
   8bc36:	e004      	b.n	8bc42 <cl_init_translatemacevent+0x9e>
		case EVT_TICK_HOUR:
		*cl_init_event = EVENT_INIT_TICK_HOUR;
   8bc38:	683b      	ldr	r3, [r7, #0]
   8bc3a:	2206      	movs	r2, #6
   8bc3c:	701a      	strb	r2, [r3, #0]
		break;
   8bc3e:	e000      	b.n	8bc42 <cl_init_translatemacevent+0x9e>
		default:
		break;
   8bc40:	bf00      	nop
	}
	return CL_OK;
   8bc42:	2300      	movs	r3, #0
}
   8bc44:	4618      	mov	r0, r3
   8bc46:	370c      	adds	r7, #12
   8bc48:	46bd      	mov	sp, r7
   8bc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
   8bc4e:	4770      	bx	lr

0008bc50 <Cl_mac_apprequesthandler>:


Cl_ReturnCodeType Cl_mac_apprequesthandler(Cl_Mac_EventsType);

Cl_ReturnCodeType Cl_mac_apprequesthandler(Cl_Mac_EventsType cl_macirq)
{
   8bc50:	b480      	push	{r7}
   8bc52:	b085      	sub	sp, #20
   8bc54:	af00      	add	r7, sp, #0
   8bc56:	4603      	mov	r3, r0
   8bc58:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType Cl_Mac_RetVal = CL_OK;
   8bc5a:	2300      	movs	r3, #0
   8bc5c:	73fb      	strb	r3, [r7, #15]
	
	//Cl_MacEvent = cl_macirq;
	//Cl_MacNewEvent = true;
	
	if( Cl_MacEventQueue1.Cl_MacNewEventcount < MAC_EVENT_COUNT_MAX )
   8bc5e:	4b0d      	ldr	r3, [pc, #52]	; (8bc94 <Cl_mac_apprequesthandler+0x44>)
   8bc60:	781b      	ldrb	r3, [r3, #0]
   8bc62:	2b09      	cmp	r3, #9
   8bc64:	d80f      	bhi.n	8bc86 <Cl_mac_apprequesthandler+0x36>
	{
		Cl_MacEventQueue1.Cl_MacEvent[Cl_MacEventQueue1.Cl_MacNewEventcount] = cl_macirq ;
   8bc66:	4b0b      	ldr	r3, [pc, #44]	; (8bc94 <Cl_mac_apprequesthandler+0x44>)
   8bc68:	781b      	ldrb	r3, [r3, #0]
   8bc6a:	461a      	mov	r2, r3
   8bc6c:	4b09      	ldr	r3, [pc, #36]	; (8bc94 <Cl_mac_apprequesthandler+0x44>)
   8bc6e:	4413      	add	r3, r2
   8bc70:	79fa      	ldrb	r2, [r7, #7]
   8bc72:	709a      	strb	r2, [r3, #2]
		Cl_MacEventQueue1.Cl_MacNewEvent = true;
   8bc74:	4b07      	ldr	r3, [pc, #28]	; (8bc94 <Cl_mac_apprequesthandler+0x44>)
   8bc76:	2201      	movs	r2, #1
   8bc78:	705a      	strb	r2, [r3, #1]
		Cl_MacEventQueue1.Cl_MacNewEventcount++;
   8bc7a:	4b06      	ldr	r3, [pc, #24]	; (8bc94 <Cl_mac_apprequesthandler+0x44>)
   8bc7c:	781b      	ldrb	r3, [r3, #0]
   8bc7e:	3301      	adds	r3, #1
   8bc80:	b2da      	uxtb	r2, r3
   8bc82:	4b04      	ldr	r3, [pc, #16]	; (8bc94 <Cl_mac_apprequesthandler+0x44>)
   8bc84:	701a      	strb	r2, [r3, #0]
	}
	return Cl_Mac_RetVal;
   8bc86:	7bfb      	ldrb	r3, [r7, #15]
   8bc88:	4618      	mov	r0, r3
   8bc8a:	3714      	adds	r7, #20
   8bc8c:	46bd      	mov	sp, r7
   8bc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
   8bc92:	4770      	bx	lr
   8bc94:	2007231c 	.word	0x2007231c

0008bc98 <main>:
extern Cl_Uint8Type cur_data ;
extern Cl_Uint8Type cur_datasize;
extern Cl_Uint8Type flag_hotcitric, flag_hotrinse,flag_na , flag_citric;
Cl_Uint8Type queue_sequence_counter = 0;
int main(void)
          {
   8bc98:	b580      	push	{r7, lr}
   8bc9a:	b084      	sub	sp, #16
   8bc9c:	af00      	add	r7, sp, #0
	   
	Cl_ReturnCodeType 	 Cl_MacRetval = CL_ERROR;
   8bc9e:	2304      	movs	r3, #4
   8bca0:	73fb      	strb	r3, [r7, #15]
	Cl_Mac_EventsType Cl_MacstbEvent = EVT_NULL;
   8bca2:	2300      	movs	r3, #0
   8bca4:	72fb      	strb	r3, [r7, #11]
	Cl_Uint8Type Cl_MacEventData = 0;
   8bca6:	2300      	movs	r3, #0
   8bca8:	72bb      	strb	r3, [r7, #10]
	static uint loopcountm = 0, loopcountl = 0 , loopcountinsec = 0;
	Cl_Uint16Type temp100;
	   cl_Datastreamtype cl_temp  ;
	board_init();
   8bcaa:	4ba1      	ldr	r3, [pc, #644]	; (8bf30 <main+0x298>)
   8bcac:	4798      	blx	r3
	sysclk_init();	
   8bcae:	4ba1      	ldr	r3, [pc, #644]	; (8bf34 <main+0x29c>)
   8bcb0:	4798      	blx	r3
	SV_SYSTEM_INIT();
   8bcb2:	4ba1      	ldr	r3, [pc, #644]	; (8bf38 <main+0x2a0>)
   8bcb4:	4798      	blx	r3
	                                                                                           
//	udc_start();
	// Insert application code here, after the board has been initialized.
	//timerThread(  ) ;
//	Cl_MacRetval = sv_system_init(); 
pmc_enable_periph_clk(ID_PIOA);
   8bcb6:	200b      	movs	r0, #11
   8bcb8:	4ba0      	ldr	r3, [pc, #640]	; (8bf3c <main+0x2a4>)
   8bcba:	4798      	blx	r3
pmc_enable_periph_clk(ID_TWI0);
   8bcbc:	2016      	movs	r0, #22
   8bcbe:	4b9f      	ldr	r3, [pc, #636]	; (8bf3c <main+0x2a4>)
   8bcc0:	4798      	blx	r3

	sv_cntrl_activatepump(DCMOTOR1);
   8bcc2:	2001      	movs	r0, #1
   8bcc4:	4b9e      	ldr	r3, [pc, #632]	; (8bf40 <main+0x2a8>)
   8bcc6:	4798      	blx	r3
	sv_cntrl_activatepump(DCMOTOR2);
   8bcc8:	2002      	movs	r0, #2
   8bcca:	4b9d      	ldr	r3, [pc, #628]	; (8bf40 <main+0x2a8>)
   8bccc:	4798      	blx	r3
	sv_cntrl_activatepump(UFPUMP);
   8bcce:	2004      	movs	r0, #4
   8bcd0:	4b9b      	ldr	r3, [pc, #620]	; (8bf40 <main+0x2a8>)
   8bcd2:	4798      	blx	r3
	sv_cntrl_activatepump(HEPARINPUMP);
   8bcd4:	2005      	movs	r0, #5
   8bcd6:	4b9a      	ldr	r3, [pc, #616]	; (8bf40 <main+0x2a8>)
   8bcd8:	4798      	blx	r3

	sv_cntrl_deactivatepump(DCMOTOR1);
   8bcda:	2001      	movs	r0, #1
   8bcdc:	4b99      	ldr	r3, [pc, #612]	; (8bf44 <main+0x2ac>)
   8bcde:	4798      	blx	r3
	sv_cntrl_deactivatepump(DCMOTOR2);
   8bce0:	2002      	movs	r0, #2
   8bce2:	4b98      	ldr	r3, [pc, #608]	; (8bf44 <main+0x2ac>)
   8bce4:	4798      	blx	r3
	sv_cntrl_deactivatepump(UFPUMP);
   8bce6:	2004      	movs	r0, #4
   8bce8:	4b96      	ldr	r3, [pc, #600]	; (8bf44 <main+0x2ac>)
   8bcea:	4798      	blx	r3
	sv_cntrl_deactivatepump(HEPARINPUMP);
   8bcec:	2005      	movs	r0, #5
   8bcee:	4b95      	ldr	r3, [pc, #596]	; (8bf44 <main+0x2ac>)
   8bcf0:	4798      	blx	r3
	
   
	Cl_MacRetval = Cl_MacInit(); 	
   8bcf2:	4b95      	ldr	r3, [pc, #596]	; (8bf48 <main+0x2b0>)
   8bcf4:	4798      	blx	r3
   8bcf6:	4603      	mov	r3, r0
   8bcf8:	73fb      	strb	r3, [r7, #15]
	for(temp100 = 1;temp100<=20; temp100++)
   8bcfa:	2301      	movs	r3, #1
   8bcfc:	81bb      	strh	r3, [r7, #12]
   8bcfe:	e00a      	b.n	8bd16 <main+0x7e>
	{
		sv_cntrl_deactivate_valve((sv_valvetype)temp100);
   8bd00:	89bb      	ldrh	r3, [r7, #12]
   8bd02:	b2db      	uxtb	r3, r3
   8bd04:	4618      	mov	r0, r3
   8bd06:	4b91      	ldr	r3, [pc, #580]	; (8bf4c <main+0x2b4>)
   8bd08:	4798      	blx	r3
		cl_wait(10);
   8bd0a:	200a      	movs	r0, #10
   8bd0c:	4b90      	ldr	r3, [pc, #576]	; (8bf50 <main+0x2b8>)
   8bd0e:	4798      	blx	r3
	sv_cntrl_deactivatepump(UFPUMP);
	sv_cntrl_deactivatepump(HEPARINPUMP);
	
   
	Cl_MacRetval = Cl_MacInit(); 	
	for(temp100 = 1;temp100<=20; temp100++)
   8bd10:	89bb      	ldrh	r3, [r7, #12]
   8bd12:	3301      	adds	r3, #1
   8bd14:	81bb      	strh	r3, [r7, #12]
   8bd16:	89bb      	ldrh	r3, [r7, #12]
   8bd18:	2b14      	cmp	r3, #20
   8bd1a:	d9f1      	bls.n	8bd00 <main+0x68>
//	SV_CS_SET_POT(3800);				  
//	sv_cs_setpotvalue(3800);


	
	sv_cntrl_resetoutput(29,PA);                         //  V1 Hardware control disabled
   8bd1c:	201d      	movs	r0, #29
   8bd1e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8bd22:	4b8c      	ldr	r3, [pc, #560]	; (8bf54 <main+0x2bc>)
   8bd24:	4798      	blx	r3
	sv_cntrl_setoutput(10,PB);                            //  V1 on Software control    
   8bd26:	200a      	movs	r0, #10
   8bd28:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8bd2c:	4b8a      	ldr	r3, [pc, #552]	; (8bf58 <main+0x2c0>)
   8bd2e:	4798      	blx	r3
	sv_cntrl_resetoutput(27,PC);
   8bd30:	201b      	movs	r0, #27
   8bd32:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
   8bd36:	4b87      	ldr	r3, [pc, #540]	; (8bf54 <main+0x2bc>)
   8bd38:	4798      	blx	r3
	sv_cntrl_setoutput(14,PB);                            // Blood Pump Power Control    
   8bd3a:	200e      	movs	r0, #14
   8bd3c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8bd40:	4b85      	ldr	r3, [pc, #532]	; (8bf58 <main+0x2c0>)
   8bd42:	4798      	blx	r3
	
	sv_cntrl_setoutput(2,PD);
   8bd44:	2002      	movs	r0, #2
   8bd46:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
   8bd4a:	4b83      	ldr	r3, [pc, #524]	; (8bf58 <main+0x2c0>)
   8bd4c:	4798      	blx	r3
	
	
	
	
	sv_cntrl_buzzer();
   8bd4e:	4b83      	ldr	r3, [pc, #524]	; (8bf5c <main+0x2c4>)
   8bd50:	4798      	blx	r3
	sv_cntrl_nobuzzer();
   8bd52:	4b83      	ldr	r3, [pc, #524]	; (8bf60 <main+0x2c8>)
   8bd54:	4798      	blx	r3
	sv_cntrl_setyellowalarm();
   8bd56:	4b83      	ldr	r3, [pc, #524]	; (8bf64 <main+0x2cc>)
   8bd58:	4798      	blx	r3
	sv_cntrl_resetyellowalarm();
   8bd5a:	4b83      	ldr	r3, [pc, #524]	; (8bf68 <main+0x2d0>)
   8bd5c:	4798      	blx	r3
	sv_cntrl_setredalarm();
   8bd5e:	4b83      	ldr	r3, [pc, #524]	; (8bf6c <main+0x2d4>)
   8bd60:	4798      	blx	r3
	sv_cntrl_resetredalarm();
   8bd62:	4b83      	ldr	r3, [pc, #524]	; (8bf70 <main+0x2d8>)
   8bd64:	4798      	blx	r3
	sv_cntrl_setgreenalarm();
   8bd66:	4b83      	ldr	r3, [pc, #524]	; (8bf74 <main+0x2dc>)
   8bd68:	4798      	blx	r3
	sv_cntrl_resetgreenalarm();
   8bd6a:	4b83      	ldr	r3, [pc, #524]	; (8bf78 <main+0x2e0>)
   8bd6c:	4798      	blx	r3
// 	sv_status_getsystemstatus(&temp_sensor_struct);
// 	;
// 	
// }
	
	sv_cntrl_activate_valve( VALVE_ID17);
   8bd6e:	2011      	movs	r0, #17
   8bd70:	4b82      	ldr	r3, [pc, #520]	; (8bf7c <main+0x2e4>)
   8bd72:	4798      	blx	r3
	
	Cl_MacRetval = Cl_App_init(); 
   8bd74:	4b82      	ldr	r3, [pc, #520]	; (8bf80 <main+0x2e8>)
   8bd76:	4798      	blx	r3
   8bd78:	4603      	mov	r3, r0
   8bd7a:	73fb      	strb	r3, [r7, #15]
	 ASSERT_ERROR(Cl_MacRetval);
   8bd7c:	7bfb      	ldrb	r3, [r7, #15]
   8bd7e:	2b00      	cmp	r3, #0
   8bd80:	d001      	beq.n	8bd86 <main+0xee>
   8bd82:	4b80      	ldr	r3, [pc, #512]	; (8bf84 <main+0x2ec>)
   8bd84:	4798      	blx	r3
	
	if( Cl_MacRetval != CL_OK)
	{
		// Handle error
	}
	Cl_MacRetval = Cl_Mac_Configure();
   8bd86:	4b80      	ldr	r3, [pc, #512]	; (8bf88 <main+0x2f0>)
   8bd88:	4798      	blx	r3
   8bd8a:	4603      	mov	r3, r0
   8bd8c:	73fb      	strb	r3, [r7, #15]
	 ASSERT_ERROR(Cl_MacRetval);
   8bd8e:	7bfb      	ldrb	r3, [r7, #15]
   8bd90:	2b00      	cmp	r3, #0
   8bd92:	d001      	beq.n	8bd98 <main+0x100>
   8bd94:	4b7b      	ldr	r3, [pc, #492]	; (8bf84 <main+0x2ec>)
   8bd96:	4798      	blx	r3
		}		
	//	 if ( Cl_MacRetval == CL_ACCEPTED)
		 {
		 // System is ready for sending and receiving the data from console . A timer will read the data to be fetched by the MAC main loop for further processing
			
			Cl_MacState = MAC_CONSOLE_SYNC;
   8bd98:	4b7c      	ldr	r3, [pc, #496]	; (8bf8c <main+0x2f4>)
   8bd9a:	2204      	movs	r2, #4
   8bd9c:	701a      	strb	r2, [r3, #0]
			Cl_MacRetval = CL_ERROR;
   8bd9e:	2304      	movs	r3, #4
   8bda0:	73fb      	strb	r3, [r7, #15]
			Cl_MacRetval = Cl_Console_Console_Sync();
   8bda2:	4b7b      	ldr	r3, [pc, #492]	; (8bf90 <main+0x2f8>)
   8bda4:	4798      	blx	r3
   8bda6:	4603      	mov	r3, r0
   8bda8:	73fb      	strb	r3, [r7, #15]
			ASSERT_ERROR(Cl_MacRetval);
   8bdaa:	7bfb      	ldrb	r3, [r7, #15]
   8bdac:	2b00      	cmp	r3, #0
   8bdae:	d001      	beq.n	8bdb4 <main+0x11c>
   8bdb0:	4b74      	ldr	r3, [pc, #464]	; (8bf84 <main+0x2ec>)
   8bdb2:	4798      	blx	r3
			if(Cl_MacRetval == CL_OK)
   8bdb4:	7bfb      	ldrb	r3, [r7, #15]
   8bdb6:	2b00      	cmp	r3, #0
   8bdb8:	d105      	bne.n	8bdc6 <main+0x12e>
			{
				cl_sys_state = CL_SYS_STATE_WAIT_FOR_MODE;
   8bdba:	4b76      	ldr	r3, [pc, #472]	; (8bf94 <main+0x2fc>)
   8bdbc:	2201      	movs	r2, #1
   8bdbe:	701a      	strb	r2, [r3, #0]
				Cl_MacState =   MAC_INIT;
   8bdc0:	4b72      	ldr	r3, [pc, #456]	; (8bf8c <main+0x2f4>)
   8bdc2:	2202      	movs	r2, #2
   8bdc4:	701a      	strb	r2, [r3, #0]
	while (FOREVER)  // LOOP MAIN
	{


//sv_cntrl_deactivate_valve( VALVE_ID18);
	Cl_Mac_StateDummy = Cl_MacState;
   8bdc6:	4b71      	ldr	r3, [pc, #452]	; (8bf8c <main+0x2f4>)
   8bdc8:	781a      	ldrb	r2, [r3, #0]
   8bdca:	4b73      	ldr	r3, [pc, #460]	; (8bf98 <main+0x300>)
   8bdcc:	701a      	strb	r2, [r3, #0]
	ul_cur_ticks = g_ul_ms_ticks;
   8bdce:	4b73      	ldr	r3, [pc, #460]	; (8bf9c <main+0x304>)
   8bdd0:	681b      	ldr	r3, [r3, #0]
   8bdd2:	4a73      	ldr	r2, [pc, #460]	; (8bfa0 <main+0x308>)
   8bdd4:	6013      	str	r3, [r2, #0]
	
		Cl_MacRetval = Cl_Mac_GetSystem_Status_Query();// check if there is any system updates . ALSO may be this can be moved to a timer thread
   8bdd6:	4b73      	ldr	r3, [pc, #460]	; (8bfa4 <main+0x30c>)
   8bdd8:	4798      	blx	r3
   8bdda:	4603      	mov	r3, r0
   8bddc:	73fb      	strb	r3, [r7, #15]
		Cl_MacRetval = Cl_Mac_CheckforBCEvent();
   8bdde:	4b72      	ldr	r3, [pc, #456]	; (8bfa8 <main+0x310>)
   8bde0:	4798      	blx	r3
   8bde2:	4603      	mov	r3, r0
   8bde4:	73fb      	strb	r3, [r7, #15]
		Cl_MacRetval = Cl_Mac_CheckforAlarms();
   8bde6:	4b71      	ldr	r3, [pc, #452]	; (8bfac <main+0x314>)
   8bde8:	4798      	blx	r3
   8bdea:	4603      	mov	r3, r0
   8bdec:	73fb      	strb	r3, [r7, #15]
		ASSERT_ERROR(Cl_MacRetval);
   8bdee:	7bfb      	ldrb	r3, [r7, #15]
   8bdf0:	2b00      	cmp	r3, #0
   8bdf2:	d001      	beq.n	8bdf8 <main+0x160>
   8bdf4:	4b63      	ldr	r3, [pc, #396]	; (8bf84 <main+0x2ec>)
   8bdf6:	4798      	blx	r3
			if( Cl_MacRetval != CL_OK)
			{
				// Handle error
			}
		Cl_MacRetval = Cl_MacCheckforConsoleMessage();// check if there is any updates from console .. to be shifted to a polling timer..???
   8bdf8:	4b6d      	ldr	r3, [pc, #436]	; (8bfb0 <main+0x318>)
   8bdfa:	4798      	blx	r3
   8bdfc:	4603      	mov	r3, r0
   8bdfe:	73fb      	strb	r3, [r7, #15]
		ASSERT_ERROR(Cl_MacRetval);
   8be00:	7bfb      	ldrb	r3, [r7, #15]
   8be02:	2b00      	cmp	r3, #0
   8be04:	d001      	beq.n	8be0a <main+0x172>
   8be06:	4b5f      	ldr	r3, [pc, #380]	; (8bf84 <main+0x2ec>)
   8be08:	4798      	blx	r3
			if( Cl_MacRetval != CL_OK)
			{
				// Handle error
			}
		// TODO :  check for ret val
		delayticks = g_ul_ms_ticks - ul_cur_ticks; // testing-debugging
   8be0a:	4b64      	ldr	r3, [pc, #400]	; (8bf9c <main+0x304>)
   8be0c:	681a      	ldr	r2, [r3, #0]
   8be0e:	4b64      	ldr	r3, [pc, #400]	; (8bfa0 <main+0x308>)
   8be10:	681b      	ldr	r3, [r3, #0]
   8be12:	1ad3      	subs	r3, r2, r3
   8be14:	4a67      	ldr	r2, [pc, #412]	; (8bfb4 <main+0x31c>)
   8be16:	6013      	str	r3, [r2, #0]
		
		Cl_MacRetval = cl_event_handler(EVT_TICK_INSTANT);
   8be18:	2032      	movs	r0, #50	; 0x32
   8be1a:	4b67      	ldr	r3, [pc, #412]	; (8bfb8 <main+0x320>)
   8be1c:	4798      	blx	r3
   8be1e:	4603      	mov	r3, r0
   8be20:	73fb      	strb	r3, [r7, #15]
		ASSERT_ERROR(Cl_MacRetval);
   8be22:	7bfb      	ldrb	r3, [r7, #15]
   8be24:	2b00      	cmp	r3, #0
   8be26:	d001      	beq.n	8be2c <main+0x194>
   8be28:	4b56      	ldr	r3, [pc, #344]	; (8bf84 <main+0x2ec>)
   8be2a:	4798      	blx	r3
			{
				// Handle error
			}
		// TODO :  check for ret val
		
		while((Cl_MacEventQueueBc.Cl_MacNewEventcount > 0) || (Cl_MacEventQueue1.Cl_MacNewEventcount > 0) || (Cl_MacEventQueue2.Cl_MacNewEventcount > 0) || (Cl_MacEventQueue4.Cl_MacNewEventcount > 0))  // LOOP EVENT DISPATCH
   8be2c:	f001 bfdc 	b.w	8dde8 <main+0x2150>
		
		{
		Cl_MacEvent = EVT_NULL;
   8be30:	4b62      	ldr	r3, [pc, #392]	; (8bfbc <main+0x324>)
   8be32:	2200      	movs	r2, #0
   8be34:	701a      	strb	r2, [r3, #0]
		Cl_MacRetval = Cl_MacCreate_Macevent();
   8be36:	4b62      	ldr	r3, [pc, #392]	; (8bfc0 <main+0x328>)
   8be38:	4798      	blx	r3
   8be3a:	4603      	mov	r3, r0
   8be3c:	73fb      	strb	r3, [r7, #15]
		ASSERT_ERROR(Cl_MacRetval);
   8be3e:	7bfb      	ldrb	r3, [r7, #15]
   8be40:	2b00      	cmp	r3, #0
   8be42:	d001      	beq.n	8be48 <main+0x1b0>
   8be44:	4b4f      	ldr	r3, [pc, #316]	; (8bf84 <main+0x2ec>)
   8be46:	4798      	blx	r3
			if( Cl_MacRetval != CL_OK)
			{
				// Handle error
			}

		if(Cl_MacNewEvent)
   8be48:	4b5e      	ldr	r3, [pc, #376]	; (8bfc4 <main+0x32c>)
   8be4a:	781b      	ldrb	r3, [r3, #0]
   8be4c:	2b00      	cmp	r3, #0
   8be4e:	f001 87cb 	beq.w	8dde8 <main+0x2150>
		
		{
			Cl_MacRetval = cl_event_handler(Cl_MacEvent);
   8be52:	4b5a      	ldr	r3, [pc, #360]	; (8bfbc <main+0x324>)
   8be54:	781b      	ldrb	r3, [r3, #0]
   8be56:	4618      	mov	r0, r3
   8be58:	4b57      	ldr	r3, [pc, #348]	; (8bfb8 <main+0x320>)
   8be5a:	4798      	blx	r3
   8be5c:	4603      	mov	r3, r0
   8be5e:	73fb      	strb	r3, [r7, #15]
			ASSERT_ERROR(Cl_MacRetval);
   8be60:	7bfb      	ldrb	r3, [r7, #15]
   8be62:	2b00      	cmp	r3, #0
   8be64:	d001      	beq.n	8be6a <main+0x1d2>
   8be66:	4b47      	ldr	r3, [pc, #284]	; (8bf84 <main+0x2ec>)
   8be68:	4798      	blx	r3
			if( Cl_MacRetval != CL_OK)
			{
				// Handle error
			}

			if(Cl_MacEvent == EVT_CONSOLE_COMMAND_ACK)
   8be6a:	4b54      	ldr	r3, [pc, #336]	; (8bfbc <main+0x324>)
   8be6c:	781b      	ldrb	r3, [r3, #0]
   8be6e:	2b02      	cmp	r3, #2
   8be70:	d115      	bne.n	8be9e <main+0x206>
			{
				//send sync
				// save the data command 
				if(ackCommand = Cl_ConsoleRxMsg.data.byte[0]){
   8be72:	4b55      	ldr	r3, [pc, #340]	; (8bfc8 <main+0x330>)
   8be74:	791a      	ldrb	r2, [r3, #4]
   8be76:	4b55      	ldr	r3, [pc, #340]	; (8bfcc <main+0x334>)
   8be78:	701a      	strb	r2, [r3, #0]
   8be7a:	4b54      	ldr	r3, [pc, #336]	; (8bfcc <main+0x334>)
   8be7c:	781b      	ldrb	r3, [r3, #0]
   8be7e:	2b00      	cmp	r3, #0
   8be80:	d10a      	bne.n	8be98 <main+0x200>
					
				}
				else{
					// again send 
					Cl_SendDatatoconsole(cur_command, cur_data,cur_datasize);
   8be82:	4b53      	ldr	r3, [pc, #332]	; (8bfd0 <main+0x338>)
   8be84:	781a      	ldrb	r2, [r3, #0]
   8be86:	4b53      	ldr	r3, [pc, #332]	; (8bfd4 <main+0x33c>)
   8be88:	781b      	ldrb	r3, [r3, #0]
   8be8a:	4619      	mov	r1, r3
   8be8c:	4b52      	ldr	r3, [pc, #328]	; (8bfd8 <main+0x340>)
   8be8e:	781b      	ldrb	r3, [r3, #0]
   8be90:	4610      	mov	r0, r2
   8be92:	461a      	mov	r2, r3
   8be94:	4b51      	ldr	r3, [pc, #324]	; (8bfdc <main+0x344>)
   8be96:	4798      	blx	r3
				}
				ConsoleSync = true;
   8be98:	4b51      	ldr	r3, [pc, #324]	; (8bfe0 <main+0x348>)
   8be9a:	2201      	movs	r2, #1
   8be9c:	701a      	strb	r2, [r3, #0]
			}
			
			if(Cl_MacEvent == EVT_CONSOLE_COMMAND_SYNC)
   8be9e:	4b47      	ldr	r3, [pc, #284]	; (8bfbc <main+0x324>)
   8bea0:	781b      	ldrb	r3, [r3, #0]
   8bea2:	2b01      	cmp	r3, #1
   8bea4:	d111      	bne.n	8beca <main+0x232>
			{
				//send sync
				Cl_Uint8Type data = CON_RX_COMMAND_SYNC;
   8bea6:	2303      	movs	r3, #3
   8bea8:	70fb      	strb	r3, [r7, #3]
				ConsoleSync = true;
   8beaa:	4b4d      	ldr	r3, [pc, #308]	; (8bfe0 <main+0x348>)
   8beac:	2201      	movs	r2, #1
   8beae:	701a      	strb	r2, [r3, #0]
				Cl_MacRetval = Cl_SendDatatoconsole(CON_TX_COMMAND_ACK,&data,1);
   8beb0:	1cfb      	adds	r3, r7, #3
   8beb2:	2004      	movs	r0, #4
   8beb4:	4619      	mov	r1, r3
   8beb6:	2201      	movs	r2, #1
   8beb8:	4b48      	ldr	r3, [pc, #288]	; (8bfdc <main+0x344>)
   8beba:	4798      	blx	r3
   8bebc:	4603      	mov	r3, r0
   8bebe:	73fb      	strb	r3, [r7, #15]
				ASSERT_ERROR(Cl_MacRetval);
   8bec0:	7bfb      	ldrb	r3, [r7, #15]
   8bec2:	2b00      	cmp	r3, #0
   8bec4:	d001      	beq.n	8beca <main+0x232>
   8bec6:	4b2f      	ldr	r3, [pc, #188]	; (8bf84 <main+0x2ec>)
   8bec8:	4798      	blx	r3
				}
				
			}			
			
			
				switch (Cl_MacState)
   8beca:	4b30      	ldr	r3, [pc, #192]	; (8bf8c <main+0x2f4>)
   8becc:	781b      	ldrb	r3, [r3, #0]
   8bece:	3b01      	subs	r3, #1
   8bed0:	2b14      	cmp	r3, #20
   8bed2:	f201 877d 	bhi.w	8ddd0 <main+0x2138>
   8bed6:	a201      	add	r2, pc, #4	; (adr r2, 8bedc <main+0x244>)
   8bed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8bedc:	0008ddd1 	.word	0x0008ddd1
   8bee0:	0008bfe5 	.word	0x0008bfe5
   8bee4:	0008ddd1 	.word	0x0008ddd1
   8bee8:	0008ddd1 	.word	0x0008ddd1
   8beec:	0008c0f1 	.word	0x0008c0f1
   8bef0:	0008c5f9 	.word	0x0008c5f9
   8bef4:	0008c6af 	.word	0x0008c6af
   8bef8:	0008c3c5 	.word	0x0008c3c5
   8befc:	0008ddd1 	.word	0x0008ddd1
   8bf00:	0008c94f 	.word	0x0008c94f
   8bf04:	0008cc1d 	.word	0x0008cc1d
   8bf08:	0008ce9d 	.word	0x0008ce9d
   8bf0c:	0008d05f 	.word	0x0008d05f
   8bf10:	0008d079 	.word	0x0008d079
   8bf14:	0008d84f 	.word	0x0008d84f
   8bf18:	0008dadb 	.word	0x0008dadb
   8bf1c:	0008dc03 	.word	0x0008dc03
   8bf20:	0008ddc9 	.word	0x0008ddc9
   8bf24:	0008ddcd 	.word	0x0008ddcd
   8bf28:	0008d2af 	.word	0x0008d2af
   8bf2c:	0008d5c3 	.word	0x0008d5c3
   8bf30:	0009a665 	.word	0x0009a665
   8bf34:	0008043d 	.word	0x0008043d
   8bf38:	0009a4b9 	.word	0x0009a4b9
   8bf3c:	0009adf5 	.word	0x0009adf5
   8bf40:	00099c2d 	.word	0x00099c2d
   8bf44:	00099c69 	.word	0x00099c69
   8bf48:	0008de45 	.word	0x0008de45
   8bf4c:	00099ced 	.word	0x00099ced
   8bf50:	00093195 	.word	0x00093195
   8bf54:	00099fe5 	.word	0x00099fe5
   8bf58:	00099fc5 	.word	0x00099fc5
   8bf5c:	00099f61 	.word	0x00099f61
   8bf60:	00099fb1 	.word	0x00099fb1
   8bf64:	00099f39 	.word	0x00099f39
   8bf68:	00099f89 	.word	0x00099f89
   8bf6c:	00099f25 	.word	0x00099f25
   8bf70:	00099f75 	.word	0x00099f75
   8bf74:	00099f4d 	.word	0x00099f4d
   8bf78:	00099f9d 	.word	0x00099f9d
   8bf7c:	00099ccd 	.word	0x00099ccd
   8bf80:	0008df19 	.word	0x0008df19
   8bf84:	00088fc1 	.word	0x00088fc1
   8bf88:	0008dfe1 	.word	0x0008dfe1
   8bf8c:	20070584 	.word	0x20070584
   8bf90:	0009be25 	.word	0x0009be25
   8bf94:	200719e7 	.word	0x200719e7
   8bf98:	200725bf 	.word	0x200725bf
   8bf9c:	20071aa8 	.word	0x20071aa8
   8bfa0:	20072378 	.word	0x20072378
   8bfa4:	0008e005 	.word	0x0008e005
   8bfa8:	0008e419 	.word	0x0008e419
   8bfac:	0008e3ed 	.word	0x0008e3ed
   8bfb0:	0008e035 	.word	0x0008e035
   8bfb4:	200724e0 	.word	0x200724e0
   8bfb8:	00088fd1 	.word	0x00088fd1
   8bfbc:	200719e6 	.word	0x200719e6
   8bfc0:	0008e0b5 	.word	0x0008e0b5
   8bfc4:	200719e8 	.word	0x200719e8
   8bfc8:	200723f0 	.word	0x200723f0
   8bfcc:	20072817 	.word	0x20072817
   8bfd0:	20072815 	.word	0x20072815
   8bfd4:	20072816 	.word	0x20072816
   8bfd8:	20072814 	.word	0x20072814
   8bfdc:	0009ba51 	.word	0x0009ba51
   8bfe0:	20070585 	.word	0x20070585
					break;
					case MAC_IDLE:
					break;
					case MAC_INIT:
				
					switch ( Cl_MacEvent )
   8bfe4:	4bc7      	ldr	r3, [pc, #796]	; (8c304 <main+0x66c>)
   8bfe6:	781b      	ldrb	r3, [r3, #0]
   8bfe8:	3b2a      	subs	r3, #42	; 0x2a
   8bfea:	2b19      	cmp	r3, #25
   8bfec:	d87d      	bhi.n	8c0ea <main+0x452>
   8bfee:	a201      	add	r2, pc, #4	; (adr r2, 8bff4 <main+0x35c>)
   8bff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8bff4:	0008c05d 	.word	0x0008c05d
   8bff8:	0008c0eb 	.word	0x0008c0eb
   8bffc:	0008c0eb 	.word	0x0008c0eb
   8c000:	0008c0eb 	.word	0x0008c0eb
   8c004:	0008c0eb 	.word	0x0008c0eb
   8c008:	0008c0eb 	.word	0x0008c0eb
   8c00c:	0008c0eb 	.word	0x0008c0eb
   8c010:	0008c0eb 	.word	0x0008c0eb
   8c014:	0008c0eb 	.word	0x0008c0eb
   8c018:	0008c0eb 	.word	0x0008c0eb
   8c01c:	0008c0eb 	.word	0x0008c0eb
   8c020:	0008c0eb 	.word	0x0008c0eb
   8c024:	0008c0eb 	.word	0x0008c0eb
   8c028:	0008c0eb 	.word	0x0008c0eb
   8c02c:	0008c0eb 	.word	0x0008c0eb
   8c030:	0008c0cb 	.word	0x0008c0cb
   8c034:	0008c0eb 	.word	0x0008c0eb
   8c038:	0008c0cb 	.word	0x0008c0cb
   8c03c:	0008c0cb 	.word	0x0008c0cb
   8c040:	0008c0cb 	.word	0x0008c0cb
   8c044:	0008c0eb 	.word	0x0008c0eb
   8c048:	0008c0eb 	.word	0x0008c0eb
   8c04c:	0008c0eb 	.word	0x0008c0eb
   8c050:	0008c0eb 	.word	0x0008c0eb
   8c054:	0008c0eb 	.word	0x0008c0eb
   8c058:	0008c07d 	.word	0x0008c07d
					{
						case EVT_COMMAND_ENTER_INIT:
						Cl_MacRetval = Cl_Init_Controller(Cl_MacEvent);
   8c05c:	4ba9      	ldr	r3, [pc, #676]	; (8c304 <main+0x66c>)
   8c05e:	781b      	ldrb	r3, [r3, #0]
   8c060:	4618      	mov	r0, r3
   8c062:	4ba9      	ldr	r3, [pc, #676]	; (8c308 <main+0x670>)
   8c064:	4798      	blx	r3
   8c066:	4603      	mov	r3, r0
   8c068:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8c06a:	7bfb      	ldrb	r3, [r7, #15]
   8c06c:	2b00      	cmp	r3, #0
   8c06e:	d001      	beq.n	8c074 <main+0x3dc>
   8c070:	4ba6      	ldr	r3, [pc, #664]	; (8c30c <main+0x674>)
   8c072:	4798      	blx	r3
								if( Cl_MacRetval != CL_OK)
								{
								// Handle error
								}
			
							Cl_MacEvent = EVT_NULL;
   8c074:	4ba3      	ldr	r3, [pc, #652]	; (8c304 <main+0x66c>)
   8c076:	2200      	movs	r2, #0
   8c078:	701a      	strb	r2, [r3, #0]
						break;
   8c07a:	e037      	b.n	8c0ec <main+0x454>

						case MACREQ_ENTER_STANDBY:
						Cl_MacRetval = Cl_Init_Controller(EVT_COMMAND_ENTER_STANDBY);
   8c07c:	202b      	movs	r0, #43	; 0x2b
   8c07e:	4ba2      	ldr	r3, [pc, #648]	; (8c308 <main+0x670>)
   8c080:	4798      	blx	r3
   8c082:	4603      	mov	r3, r0
   8c084:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8c086:	7bfb      	ldrb	r3, [r7, #15]
   8c088:	2b00      	cmp	r3, #0
   8c08a:	d001      	beq.n	8c090 <main+0x3f8>
   8c08c:	4b9f      	ldr	r3, [pc, #636]	; (8c30c <main+0x674>)
   8c08e:	4798      	blx	r3
								if( Cl_MacRetval == CL_OK)
   8c090:	7bfb      	ldrb	r3, [r7, #15]
   8c092:	2b00      	cmp	r3, #0
   8c094:	d109      	bne.n	8c0aa <main+0x412>
								{
									Cl_MacRetval = Cl_Standby_Controller(EVT_COMMAND_ENTER_STANDBY);
   8c096:	202b      	movs	r0, #43	; 0x2b
   8c098:	4b9d      	ldr	r3, [pc, #628]	; (8c310 <main+0x678>)
   8c09a:	4798      	blx	r3
   8c09c:	4603      	mov	r3, r0
   8c09e:	73fb      	strb	r3, [r7, #15]
									ASSERT_ERROR(Cl_MacRetval);
   8c0a0:	7bfb      	ldrb	r3, [r7, #15]
   8c0a2:	2b00      	cmp	r3, #0
   8c0a4:	d001      	beq.n	8c0aa <main+0x412>
   8c0a6:	4b99      	ldr	r3, [pc, #612]	; (8c30c <main+0x674>)
   8c0a8:	4798      	blx	r3
								}
								
								if( Cl_MacRetval == CL_OK)
   8c0aa:	7bfb      	ldrb	r3, [r7, #15]
   8c0ac:	2b00      	cmp	r3, #0
   8c0ae:	d10b      	bne.n	8c0c8 <main+0x430>
								{
									Cl_MacEvent = EVT_NULL;
   8c0b0:	4b94      	ldr	r3, [pc, #592]	; (8c304 <main+0x66c>)
   8c0b2:	2200      	movs	r2, #0
   8c0b4:	701a      	strb	r2, [r3, #0]
									Cl_MacState =   MAC_STANDBY;
   8c0b6:	4b97      	ldr	r3, [pc, #604]	; (8c314 <main+0x67c>)
   8c0b8:	2205      	movs	r2, #5
   8c0ba:	701a      	strb	r2, [r3, #0]
									//Cl_MacRetval = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_STANDBY,1);
									ASSERT_ERROR(Cl_MacRetval);
   8c0bc:	7bfb      	ldrb	r3, [r7, #15]
   8c0be:	2b00      	cmp	r3, #0
   8c0c0:	d002      	beq.n	8c0c8 <main+0x430>
   8c0c2:	4b92      	ldr	r3, [pc, #584]	; (8c30c <main+0x674>)
   8c0c4:	4798      	blx	r3

								if( Cl_MacRetval != CL_OK)
								{
									// Handle error
								}
						break;
   8c0c6:	e011      	b.n	8c0ec <main+0x454>
   8c0c8:	e010      	b.n	8c0ec <main+0x454>
						case EVT_TICK_100M:	
						case EVT_TICK_SEC:
						case EVT_TICK_MIN:
						case EVT_TICK_HOUR:
						Cl_MacRetval = Cl_Init_Controller(Cl_MacEvent);
   8c0ca:	4b8e      	ldr	r3, [pc, #568]	; (8c304 <main+0x66c>)
   8c0cc:	781b      	ldrb	r3, [r3, #0]
   8c0ce:	4618      	mov	r0, r3
   8c0d0:	4b8d      	ldr	r3, [pc, #564]	; (8c308 <main+0x670>)
   8c0d2:	4798      	blx	r3
   8c0d4:	4603      	mov	r3, r0
   8c0d6:	73fb      	strb	r3, [r7, #15]
								ASSERT_ERROR(Cl_MacRetval);
   8c0d8:	7bfb      	ldrb	r3, [r7, #15]
   8c0da:	2b00      	cmp	r3, #0
   8c0dc:	d001      	beq.n	8c0e2 <main+0x44a>
   8c0de:	4b8b      	ldr	r3, [pc, #556]	; (8c30c <main+0x674>)
   8c0e0:	4798      	blx	r3
								if( Cl_MacRetval != CL_OK)
								{
									// Handle error
								}
							Cl_MacEvent = EVT_NULL;
   8c0e2:	4b88      	ldr	r3, [pc, #544]	; (8c304 <main+0x66c>)
   8c0e4:	2200      	movs	r2, #0
   8c0e6:	701a      	strb	r2, [r3, #0]

						break;
   8c0e8:	e000      	b.n	8c0ec <main+0x454>
						default: break;
   8c0ea:	bf00      	nop
					}
					break;
   8c0ec:	f001 be73 	b.w	8ddd6 <main+0x213e>
					case MAC_CONSOLE_SYNC:
				
					break;
					case MAC_STANDBY:
				
					switch ( Cl_MacEvent )
   8c0f0:	4b84      	ldr	r3, [pc, #528]	; (8c304 <main+0x66c>)
   8c0f2:	781b      	ldrb	r3, [r3, #0]
   8c0f4:	3b07      	subs	r3, #7
   8c0f6:	2b55      	cmp	r3, #85	; 0x55
   8c0f8:	f200 8161 	bhi.w	8c3be <main+0x726>
   8c0fc:	a201      	add	r2, pc, #4	; (adr r2, 8c104 <main+0x46c>)
   8c0fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8c102:	bf00      	nop
   8c104:	0008c27d 	.word	0x0008c27d
   8c108:	0008c3bf 	.word	0x0008c3bf
   8c10c:	0008c34d 	.word	0x0008c34d
   8c110:	0008c25d 	.word	0x0008c25d
   8c114:	0008c25d 	.word	0x0008c25d
   8c118:	0008c25d 	.word	0x0008c25d
   8c11c:	0008c3bf 	.word	0x0008c3bf
   8c120:	0008c3bf 	.word	0x0008c3bf
   8c124:	0008c2dd 	.word	0x0008c2dd
   8c128:	0008c3bf 	.word	0x0008c3bf
   8c12c:	0008c3bf 	.word	0x0008c3bf
   8c130:	0008c3bf 	.word	0x0008c3bf
   8c134:	0008c3bf 	.word	0x0008c3bf
   8c138:	0008c3bf 	.word	0x0008c3bf
   8c13c:	0008c3bf 	.word	0x0008c3bf
   8c140:	0008c3bf 	.word	0x0008c3bf
   8c144:	0008c3bf 	.word	0x0008c3bf
   8c148:	0008c3bf 	.word	0x0008c3bf
   8c14c:	0008c3bf 	.word	0x0008c3bf
   8c150:	0008c3bf 	.word	0x0008c3bf
   8c154:	0008c3bf 	.word	0x0008c3bf
   8c158:	0008c3bf 	.word	0x0008c3bf
   8c15c:	0008c3bf 	.word	0x0008c3bf
   8c160:	0008c3bf 	.word	0x0008c3bf
   8c164:	0008c3bf 	.word	0x0008c3bf
   8c168:	0008c3bf 	.word	0x0008c3bf
   8c16c:	0008c3bf 	.word	0x0008c3bf
   8c170:	0008c3bf 	.word	0x0008c3bf
   8c174:	0008c3bf 	.word	0x0008c3bf
   8c178:	0008c3bf 	.word	0x0008c3bf
   8c17c:	0008c3bf 	.word	0x0008c3bf
   8c180:	0008c3bf 	.word	0x0008c3bf
   8c184:	0008c3bf 	.word	0x0008c3bf
   8c188:	0008c3bf 	.word	0x0008c3bf
   8c18c:	0008c3bf 	.word	0x0008c3bf
   8c190:	0008c3bf 	.word	0x0008c3bf
   8c194:	0008c25d 	.word	0x0008c25d
   8c198:	0008c3bf 	.word	0x0008c3bf
   8c19c:	0008c25d 	.word	0x0008c25d
   8c1a0:	0008c25d 	.word	0x0008c25d
   8c1a4:	0008c3bf 	.word	0x0008c3bf
   8c1a8:	0008c3bf 	.word	0x0008c3bf
   8c1ac:	0008c3bf 	.word	0x0008c3bf
   8c1b0:	0008c3bf 	.word	0x0008c3bf
   8c1b4:	0008c3bf 	.word	0x0008c3bf
   8c1b8:	0008c3bf 	.word	0x0008c3bf
   8c1bc:	0008c3bf 	.word	0x0008c3bf
   8c1c0:	0008c3bf 	.word	0x0008c3bf
   8c1c4:	0008c3bf 	.word	0x0008c3bf
   8c1c8:	0008c3bf 	.word	0x0008c3bf
   8c1cc:	0008c25d 	.word	0x0008c25d
   8c1d0:	0008c3bf 	.word	0x0008c3bf
   8c1d4:	0008c25d 	.word	0x0008c25d
   8c1d8:	0008c25d 	.word	0x0008c25d
   8c1dc:	0008c25d 	.word	0x0008c25d
   8c1e0:	0008c3bf 	.word	0x0008c3bf
   8c1e4:	0008c321 	.word	0x0008c321
   8c1e8:	0008c3bf 	.word	0x0008c3bf
   8c1ec:	0008c3bf 	.word	0x0008c3bf
   8c1f0:	0008c3bf 	.word	0x0008c3bf
   8c1f4:	0008c3bf 	.word	0x0008c3bf
   8c1f8:	0008c3bf 	.word	0x0008c3bf
   8c1fc:	0008c3bf 	.word	0x0008c3bf
   8c200:	0008c3bf 	.word	0x0008c3bf
   8c204:	0008c3bf 	.word	0x0008c3bf
   8c208:	0008c3bf 	.word	0x0008c3bf
   8c20c:	0008c3bf 	.word	0x0008c3bf
   8c210:	0008c3bf 	.word	0x0008c3bf
   8c214:	0008c3bf 	.word	0x0008c3bf
   8c218:	0008c3bf 	.word	0x0008c3bf
   8c21c:	0008c3bf 	.word	0x0008c3bf
   8c220:	0008c3bf 	.word	0x0008c3bf
   8c224:	0008c3bf 	.word	0x0008c3bf
   8c228:	0008c3bf 	.word	0x0008c3bf
   8c22c:	0008c3bf 	.word	0x0008c3bf
   8c230:	0008c3bf 	.word	0x0008c3bf
   8c234:	0008c3bf 	.word	0x0008c3bf
   8c238:	0008c3bf 	.word	0x0008c3bf
   8c23c:	0008c3bf 	.word	0x0008c3bf
   8c240:	0008c3bf 	.word	0x0008c3bf
   8c244:	0008c3bf 	.word	0x0008c3bf
   8c248:	0008c3bf 	.word	0x0008c3bf
   8c24c:	0008c3bf 	.word	0x0008c3bf
   8c250:	0008c3bf 	.word	0x0008c3bf
   8c254:	0008c25d 	.word	0x0008c25d
   8c258:	0008c25d 	.word	0x0008c25d
						case EVT_CONSOLE_COMMAND_SET_BLDPMP_OFF:
						case EVT_CONSOLE_COMMAND_SET_BLDPUMPRATE:
						case EVT_CONSOLE_COMMAND_SET_BLDPUMPINC_MANUAL:
						case EVT_CONSOLE_COMMAND_SET_BLDPUMPDEC_MANUAL:
						
							Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8c25c:	4b29      	ldr	r3, [pc, #164]	; (8c304 <main+0x66c>)
   8c25e:	781b      	ldrb	r3, [r3, #0]
   8c260:	4618      	mov	r0, r3
   8c262:	4b2b      	ldr	r3, [pc, #172]	; (8c310 <main+0x678>)
   8c264:	4798      	blx	r3
   8c266:	4603      	mov	r3, r0
   8c268:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8c26a:	7bfb      	ldrb	r3, [r7, #15]
   8c26c:	2b00      	cmp	r3, #0
   8c26e:	d001      	beq.n	8c274 <main+0x5dc>
   8c270:	4b26      	ldr	r3, [pc, #152]	; (8c30c <main+0x674>)
   8c272:	4798      	blx	r3
										if( Cl_MacRetval != CL_OK)
										{
											// Handle error
										}
							Cl_MacEvent = EVT_NULL;
   8c274:	4b23      	ldr	r3, [pc, #140]	; (8c304 <main+0x66c>)
   8c276:	2200      	movs	r2, #0
   8c278:	701a      	strb	r2, [r3, #0]
							break;
   8c27a:	e0a1      	b.n	8c3c0 <main+0x728>

					
						case EVT_CONSOLE_COMMAND_RINSE_START:
							loopcountinsec = 0;
   8c27c:	4b26      	ldr	r3, [pc, #152]	; (8c318 <main+0x680>)
   8c27e:	2200      	movs	r2, #0
   8c280:	601a      	str	r2, [r3, #0]
							Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8c282:	4b20      	ldr	r3, [pc, #128]	; (8c304 <main+0x66c>)
   8c284:	781b      	ldrb	r3, [r3, #0]
   8c286:	4618      	mov	r0, r3
   8c288:	4b21      	ldr	r3, [pc, #132]	; (8c310 <main+0x678>)
   8c28a:	4798      	blx	r3
   8c28c:	4603      	mov	r3, r0
   8c28e:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8c290:	7bfb      	ldrb	r3, [r7, #15]
   8c292:	2b00      	cmp	r3, #0
   8c294:	d001      	beq.n	8c29a <main+0x602>
   8c296:	4b1d      	ldr	r3, [pc, #116]	; (8c30c <main+0x674>)
   8c298:	4798      	blx	r3

							if(Cl_MacRetval == CL_OK)
   8c29a:	7bfb      	ldrb	r3, [r7, #15]
   8c29c:	2b00      	cmp	r3, #0
   8c29e:	d10e      	bne.n	8c2be <main+0x626>
							{
								Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8c2a0:	4b18      	ldr	r3, [pc, #96]	; (8c304 <main+0x66c>)
   8c2a2:	781b      	ldrb	r3, [r3, #0]
   8c2a4:	4618      	mov	r0, r3
   8c2a6:	4b1d      	ldr	r3, [pc, #116]	; (8c31c <main+0x684>)
   8c2a8:	4798      	blx	r3
   8c2aa:	4603      	mov	r3, r0
   8c2ac:	73fb      	strb	r3, [r7, #15]
								if(Cl_MacRetval != CL_REJECTED)
   8c2ae:	7bfb      	ldrb	r3, [r7, #15]
   8c2b0:	2b03      	cmp	r3, #3
   8c2b2:	d004      	beq.n	8c2be <main+0x626>
								{
									ASSERT_ERROR(Cl_MacRetval);	
   8c2b4:	7bfb      	ldrb	r3, [r7, #15]
   8c2b6:	2b00      	cmp	r3, #0
   8c2b8:	d001      	beq.n	8c2be <main+0x626>
   8c2ba:	4b14      	ldr	r3, [pc, #80]	; (8c30c <main+0x674>)
   8c2bc:	4798      	blx	r3
								}
								
							}							
							if( Cl_MacRetval == CL_OK)
   8c2be:	7bfb      	ldrb	r3, [r7, #15]
   8c2c0:	2b00      	cmp	r3, #0
   8c2c2:	d107      	bne.n	8c2d4 <main+0x63c>
							{
								Cl_MacState = MAC_RINSE;
   8c2c4:	4b13      	ldr	r3, [pc, #76]	; (8c314 <main+0x67c>)
   8c2c6:	2207      	movs	r2, #7
   8c2c8:	701a      	strb	r2, [r3, #0]
								//Cl_MacRetval = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_RINSE,1);
								ASSERT_ERROR(Cl_MacRetval);			
   8c2ca:	7bfb      	ldrb	r3, [r7, #15]
   8c2cc:	2b00      	cmp	r3, #0
   8c2ce:	d001      	beq.n	8c2d4 <main+0x63c>
   8c2d0:	4b0e      	ldr	r3, [pc, #56]	; (8c30c <main+0x674>)
   8c2d2:	4798      	blx	r3
							}
							if( Cl_MacRetval != CL_OK)
							{
								// Handle error
							}
							Cl_MacEvent = EVT_NULL;
   8c2d4:	4b0b      	ldr	r3, [pc, #44]	; (8c304 <main+0x66c>)
   8c2d6:	2200      	movs	r2, #0
   8c2d8:	701a      	strb	r2, [r3, #0]
						break;
   8c2da:	e071      	b.n	8c3c0 <main+0x728>
						case EVT_CONSOLE_COMMAND_START_PRIME:
							Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8c2dc:	4b09      	ldr	r3, [pc, #36]	; (8c304 <main+0x66c>)
   8c2de:	781b      	ldrb	r3, [r3, #0]
   8c2e0:	4618      	mov	r0, r3
   8c2e2:	4b0e      	ldr	r3, [pc, #56]	; (8c31c <main+0x684>)
   8c2e4:	4798      	blx	r3
   8c2e6:	4603      	mov	r3, r0
   8c2e8:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8c2ea:	7bfb      	ldrb	r3, [r7, #15]
   8c2ec:	2b00      	cmp	r3, #0
   8c2ee:	d001      	beq.n	8c2f4 <main+0x65c>
   8c2f0:	4b06      	ldr	r3, [pc, #24]	; (8c30c <main+0x674>)
   8c2f2:	4798      	blx	r3
							if( Cl_MacRetval == CL_OK)
   8c2f4:	7bfb      	ldrb	r3, [r7, #15]
   8c2f6:	2b00      	cmp	r3, #0
   8c2f8:	d102      	bne.n	8c300 <main+0x668>
							{
								Cl_MacState = MAC_POST_RINSE_STANDBY;
   8c2fa:	4b06      	ldr	r3, [pc, #24]	; (8c314 <main+0x67c>)
   8c2fc:	220a      	movs	r2, #10
   8c2fe:	701a      	strb	r2, [r3, #0]
							else
							{
									// Handle error
							}
							
						break;
   8c300:	e05e      	b.n	8c3c0 <main+0x728>
   8c302:	bf00      	nop
   8c304:	200719e6 	.word	0x200719e6
   8c308:	0008b959 	.word	0x0008b959
   8c30c:	00088fc1 	.word	0x00088fc1
   8c310:	000a4e99 	.word	0x000a4e99
   8c314:	20070584 	.word	0x20070584
   8c318:	200719ec 	.word	0x200719ec
   8c31c:	000a2641 	.word	0x000a2641
						//	ASSERT_ERROR(Cl_MacRetval);
						//	if( Cl_MacRetval == CL_OK)
						//	{
								
							
								Cl_MacRetval = Cl_disinf_controller(Cl_MacEvent);
   8c320:	4bae      	ldr	r3, [pc, #696]	; (8c5dc <main+0x944>)
   8c322:	781b      	ldrb	r3, [r3, #0]
   8c324:	4618      	mov	r0, r3
   8c326:	4bae      	ldr	r3, [pc, #696]	; (8c5e0 <main+0x948>)
   8c328:	4798      	blx	r3
   8c32a:	4603      	mov	r3, r0
   8c32c:	73fb      	strb	r3, [r7, #15]
								ASSERT_ERROR(Cl_MacRetval);
   8c32e:	7bfb      	ldrb	r3, [r7, #15]
   8c330:	2b00      	cmp	r3, #0
   8c332:	d001      	beq.n	8c338 <main+0x6a0>
   8c334:	4bab      	ldr	r3, [pc, #684]	; (8c5e4 <main+0x94c>)
   8c336:	4798      	blx	r3
								Cl_MacState = MAC_DISINFECT;
   8c338:	4bab      	ldr	r3, [pc, #684]	; (8c5e8 <main+0x950>)
   8c33a:	2208      	movs	r2, #8
   8c33c:	701a      	strb	r2, [r3, #0]
								//Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_DISINFECT,1);
								ASSERT_ERROR(Cl_MacRetval);
   8c33e:	7bfb      	ldrb	r3, [r7, #15]
   8c340:	2b00      	cmp	r3, #0
   8c342:	d002      	beq.n	8c34a <main+0x6b2>
   8c344:	4ba7      	ldr	r3, [pc, #668]	; (8c5e4 <main+0x94c>)
   8c346:	4798      	blx	r3
// 							{
// 								// Handle error
// 							}
							

						break;
   8c348:	e03a      	b.n	8c3c0 <main+0x728>
   8c34a:	e039      	b.n	8c3c0 <main+0x728>
						
						case EVT_CONSOLE_COMMAND_DIALYSIS_PREP:
										
							Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8c34c:	4ba3      	ldr	r3, [pc, #652]	; (8c5dc <main+0x944>)
   8c34e:	781b      	ldrb	r3, [r3, #0]
   8c350:	4618      	mov	r0, r3
   8c352:	4ba6      	ldr	r3, [pc, #664]	; (8c5ec <main+0x954>)
   8c354:	4798      	blx	r3
   8c356:	4603      	mov	r3, r0
   8c358:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8c35a:	7bfb      	ldrb	r3, [r7, #15]
   8c35c:	2b00      	cmp	r3, #0
   8c35e:	d001      	beq.n	8c364 <main+0x6cc>
   8c360:	4ba0      	ldr	r3, [pc, #640]	; (8c5e4 <main+0x94c>)
   8c362:	4798      	blx	r3
							if(Cl_MacRetval == CL_ACCEPTED)
   8c364:	7bfb      	ldrb	r3, [r7, #15]
   8c366:	2b02      	cmp	r3, #2
   8c368:	d10b      	bne.n	8c382 <main+0x6ea>
							{
								Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8c36a:	4b9c      	ldr	r3, [pc, #624]	; (8c5dc <main+0x944>)
   8c36c:	781b      	ldrb	r3, [r3, #0]
   8c36e:	4618      	mov	r0, r3
   8c370:	4b9f      	ldr	r3, [pc, #636]	; (8c5f0 <main+0x958>)
   8c372:	4798      	blx	r3
   8c374:	4603      	mov	r3, r0
   8c376:	73fb      	strb	r3, [r7, #15]
								ASSERT_ERROR(Cl_MacRetval);
   8c378:	7bfb      	ldrb	r3, [r7, #15]
   8c37a:	2b00      	cmp	r3, #0
   8c37c:	d001      	beq.n	8c382 <main+0x6ea>
   8c37e:	4b99      	ldr	r3, [pc, #612]	; (8c5e4 <main+0x94c>)
   8c380:	4798      	blx	r3
							}
							
							if(Cl_MacRetval == CL_ACCEPTED)
   8c382:	7bfb      	ldrb	r3, [r7, #15]
   8c384:	2b02      	cmp	r3, #2
   8c386:	d10b      	bne.n	8c3a0 <main+0x708>
							{
								Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8c388:	4b94      	ldr	r3, [pc, #592]	; (8c5dc <main+0x944>)
   8c38a:	781b      	ldrb	r3, [r3, #0]
   8c38c:	4618      	mov	r0, r3
   8c38e:	4b99      	ldr	r3, [pc, #612]	; (8c5f4 <main+0x95c>)
   8c390:	4798      	blx	r3
   8c392:	4603      	mov	r3, r0
   8c394:	73fb      	strb	r3, [r7, #15]
								ASSERT_ERROR(Cl_MacRetval);
   8c396:	7bfb      	ldrb	r3, [r7, #15]
   8c398:	2b00      	cmp	r3, #0
   8c39a:	d001      	beq.n	8c3a0 <main+0x708>
   8c39c:	4b91      	ldr	r3, [pc, #580]	; (8c5e4 <main+0x94c>)
   8c39e:	4798      	blx	r3
							}
							
							if( Cl_MacRetval == CL_OK)
   8c3a0:	7bfb      	ldrb	r3, [r7, #15]
   8c3a2:	2b00      	cmp	r3, #0
   8c3a4:	d107      	bne.n	8c3b6 <main+0x71e>
							{
								Cl_MacState = MAC_DPREP;
   8c3a6:	4b90      	ldr	r3, [pc, #576]	; (8c5e8 <main+0x950>)
   8c3a8:	220b      	movs	r2, #11
   8c3aa:	701a      	strb	r2, [r3, #0]
							//	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_DPREP,1);
								ASSERT_ERROR(Cl_MacRetval);
   8c3ac:	7bfb      	ldrb	r3, [r7, #15]
   8c3ae:	2b00      	cmp	r3, #0
   8c3b0:	d001      	beq.n	8c3b6 <main+0x71e>
   8c3b2:	4b8c      	ldr	r3, [pc, #560]	; (8c5e4 <main+0x94c>)
   8c3b4:	4798      	blx	r3
							{
									// handle error
							}
							
							
							Cl_MacEvent = EVT_NULL;
   8c3b6:	4b89      	ldr	r3, [pc, #548]	; (8c5dc <main+0x944>)
   8c3b8:	2200      	movs	r2, #0
   8c3ba:	701a      	strb	r2, [r3, #0]
							
							
						break;
   8c3bc:	e000      	b.n	8c3c0 <main+0x728>

						
						default: break;
   8c3be:	bf00      	nop
					}
					break;
   8c3c0:	f001 bd09 	b.w	8ddd6 <main+0x213e>
					case MAC_DISINFECT:
					
					switch(Cl_MacEvent)
   8c3c4:	4b85      	ldr	r3, [pc, #532]	; (8c5dc <main+0x944>)
   8c3c6:	781b      	ldrb	r3, [r3, #0]
   8c3c8:	3b07      	subs	r3, #7
   8c3ca:	2b4d      	cmp	r3, #77	; 0x4d
   8c3cc:	f200 8100 	bhi.w	8c5d0 <main+0x938>
   8c3d0:	a201      	add	r2, pc, #4	; (adr r2, 8c3d8 <main+0x740>)
   8c3d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8c3d6:	bf00      	nop
   8c3d8:	0008c55b 	.word	0x0008c55b
   8c3dc:	0008c5d1 	.word	0x0008c5d1
   8c3e0:	0008c5d1 	.word	0x0008c5d1
   8c3e4:	0008c55b 	.word	0x0008c55b
   8c3e8:	0008c55b 	.word	0x0008c55b
   8c3ec:	0008c55b 	.word	0x0008c55b
   8c3f0:	0008c5d1 	.word	0x0008c5d1
   8c3f4:	0008c5d1 	.word	0x0008c5d1
   8c3f8:	0008c5d1 	.word	0x0008c5d1
   8c3fc:	0008c5d1 	.word	0x0008c5d1
   8c400:	0008c5d1 	.word	0x0008c5d1
   8c404:	0008c5d1 	.word	0x0008c5d1
   8c408:	0008c5d1 	.word	0x0008c5d1
   8c40c:	0008c5d1 	.word	0x0008c5d1
   8c410:	0008c5d1 	.word	0x0008c5d1
   8c414:	0008c5d1 	.word	0x0008c5d1
   8c418:	0008c5d1 	.word	0x0008c5d1
   8c41c:	0008c5d1 	.word	0x0008c5d1
   8c420:	0008c5d1 	.word	0x0008c5d1
   8c424:	0008c5d1 	.word	0x0008c5d1
   8c428:	0008c5d1 	.word	0x0008c5d1
   8c42c:	0008c5d1 	.word	0x0008c5d1
   8c430:	0008c5d1 	.word	0x0008c5d1
   8c434:	0008c5d1 	.word	0x0008c5d1
   8c438:	0008c5d1 	.word	0x0008c5d1
   8c43c:	0008c5d1 	.word	0x0008c5d1
   8c440:	0008c5d1 	.word	0x0008c5d1
   8c444:	0008c5d1 	.word	0x0008c5d1
   8c448:	0008c5d1 	.word	0x0008c5d1
   8c44c:	0008c5d1 	.word	0x0008c5d1
   8c450:	0008c5d1 	.word	0x0008c5d1
   8c454:	0008c5d1 	.word	0x0008c5d1
   8c458:	0008c5d1 	.word	0x0008c5d1
   8c45c:	0008c5d1 	.word	0x0008c5d1
   8c460:	0008c54b 	.word	0x0008c54b
   8c464:	0008c5d1 	.word	0x0008c5d1
   8c468:	0008c5d1 	.word	0x0008c5d1
   8c46c:	0008c5d1 	.word	0x0008c5d1
   8c470:	0008c5d1 	.word	0x0008c5d1
   8c474:	0008c54b 	.word	0x0008c54b
   8c478:	0008c5d1 	.word	0x0008c5d1
   8c47c:	0008c5d1 	.word	0x0008c5d1
   8c480:	0008c5d1 	.word	0x0008c5d1
   8c484:	0008c5d1 	.word	0x0008c5d1
   8c488:	0008c5d1 	.word	0x0008c5d1
   8c48c:	0008c5d1 	.word	0x0008c5d1
   8c490:	0008c5d1 	.word	0x0008c5d1
   8c494:	0008c5d1 	.word	0x0008c5d1
   8c498:	0008c5d1 	.word	0x0008c5d1
   8c49c:	0008c511 	.word	0x0008c511
   8c4a0:	0008c511 	.word	0x0008c511
   8c4a4:	0008c511 	.word	0x0008c511
   8c4a8:	0008c511 	.word	0x0008c511
   8c4ac:	0008c511 	.word	0x0008c511
   8c4b0:	0008c5d1 	.word	0x0008c5d1
   8c4b4:	0008c5d1 	.word	0x0008c5d1
   8c4b8:	0008c55b 	.word	0x0008c55b
   8c4bc:	0008c55b 	.word	0x0008c55b
   8c4c0:	0008c55b 	.word	0x0008c55b
   8c4c4:	0008c5d1 	.word	0x0008c5d1
   8c4c8:	0008c5d1 	.word	0x0008c5d1
   8c4cc:	0008c577 	.word	0x0008c577
   8c4d0:	0008c577 	.word	0x0008c577
   8c4d4:	0008c5d1 	.word	0x0008c5d1
   8c4d8:	0008c5d1 	.word	0x0008c5d1
   8c4dc:	0008c5d1 	.word	0x0008c5d1
   8c4e0:	0008c5d1 	.word	0x0008c5d1
   8c4e4:	0008c5d1 	.word	0x0008c5d1
   8c4e8:	0008c5d1 	.word	0x0008c5d1
   8c4ec:	0008c5d1 	.word	0x0008c5d1
   8c4f0:	0008c5d1 	.word	0x0008c5d1
   8c4f4:	0008c5d1 	.word	0x0008c5d1
   8c4f8:	0008c5d1 	.word	0x0008c5d1
   8c4fc:	0008c5d1 	.word	0x0008c5d1
   8c500:	0008c55b 	.word	0x0008c55b
   8c504:	0008c593 	.word	0x0008c593
   8c508:	0008c593 	.word	0x0008c593
   8c50c:	0008c5af 	.word	0x0008c5af
						case EVT_TICK_50M:
						case EVT_TICK_100M:
						case EVT_TICK_500M:
						case EVT_TICK_SEC:
						case EVT_TICK_MIN:
						Cl_MacRetval = Cl_disinf_controller(Cl_MacEvent);
   8c510:	4b32      	ldr	r3, [pc, #200]	; (8c5dc <main+0x944>)
   8c512:	781b      	ldrb	r3, [r3, #0]
   8c514:	4618      	mov	r0, r3
   8c516:	4b32      	ldr	r3, [pc, #200]	; (8c5e0 <main+0x948>)
   8c518:	4798      	blx	r3
   8c51a:	4603      	mov	r3, r0
   8c51c:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8c51e:	7bfb      	ldrb	r3, [r7, #15]
   8c520:	2b00      	cmp	r3, #0
   8c522:	d001      	beq.n	8c528 <main+0x890>
   8c524:	4b2f      	ldr	r3, [pc, #188]	; (8c5e4 <main+0x94c>)
   8c526:	4798      	blx	r3
							if( Cl_MacRetval == CL_OK)
   8c528:	7bfb      	ldrb	r3, [r7, #15]
   8c52a:	2b00      	cmp	r3, #0
   8c52c:	d10c      	bne.n	8c548 <main+0x8b0>
							{
							Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8c52e:	4b2b      	ldr	r3, [pc, #172]	; (8c5dc <main+0x944>)
   8c530:	781b      	ldrb	r3, [r3, #0]
   8c532:	4618      	mov	r0, r3
   8c534:	4b2e      	ldr	r3, [pc, #184]	; (8c5f0 <main+0x958>)
   8c536:	4798      	blx	r3
   8c538:	4603      	mov	r3, r0
   8c53a:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8c53c:	7bfb      	ldrb	r3, [r7, #15]
   8c53e:	2b00      	cmp	r3, #0
   8c540:	d002      	beq.n	8c548 <main+0x8b0>
   8c542:	4b28      	ldr	r3, [pc, #160]	; (8c5e4 <main+0x94c>)
   8c544:	4798      	blx	r3
							}
							if( Cl_MacRetval != CL_OK)
							{
								// handle error
							}
						break;
   8c546:	e044      	b.n	8c5d2 <main+0x93a>
   8c548:	e043      	b.n	8c5d2 <main+0x93a>
						
						case EVT_CONSOLE_COMMAND_CLR_ALARM:
						case EVT_ALARM_TRIGGERED:
						
						Cl_MacRetval = Cl_disinf_controller(Cl_MacEvent);
   8c54a:	4b24      	ldr	r3, [pc, #144]	; (8c5dc <main+0x944>)
   8c54c:	781b      	ldrb	r3, [r3, #0]
   8c54e:	4618      	mov	r0, r3
   8c550:	4b23      	ldr	r3, [pc, #140]	; (8c5e0 <main+0x948>)
   8c552:	4798      	blx	r3
   8c554:	4603      	mov	r3, r0
   8c556:	73fb      	strb	r3, [r7, #15]
						
						break;
   8c558:	e03b      	b.n	8c5d2 <main+0x93a>
						case EVT_CONSOLE_RESUME_DISINF_STAGE:
						case EVT_CONSOLE_COMMAND_RINSE_START:
						case MACREQ_BC_OPENFILL_COMPLETED:

						
						Cl_MacRetval = Cl_disinf_controller(Cl_MacEvent);
   8c55a:	4b20      	ldr	r3, [pc, #128]	; (8c5dc <main+0x944>)
   8c55c:	781b      	ldrb	r3, [r3, #0]
   8c55e:	4618      	mov	r0, r3
   8c560:	4b1f      	ldr	r3, [pc, #124]	; (8c5e0 <main+0x948>)
   8c562:	4798      	blx	r3
   8c564:	4603      	mov	r3, r0
   8c566:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8c568:	7bfb      	ldrb	r3, [r7, #15]
   8c56a:	2b00      	cmp	r3, #0
   8c56c:	d002      	beq.n	8c574 <main+0x8dc>
   8c56e:	4b1d      	ldr	r3, [pc, #116]	; (8c5e4 <main+0x94c>)
   8c570:	4798      	blx	r3
							if( Cl_MacRetval != CL_OK)
							{
								// handle error
							}
						break;
   8c572:	e02e      	b.n	8c5d2 <main+0x93a>
   8c574:	e02d      	b.n	8c5d2 <main+0x93a>
						case MACREQ_START_PRE_DISINF_RINSE:
						case MACREQ_START_POST_DISINF_RINSE:
						Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8c576:	4b19      	ldr	r3, [pc, #100]	; (8c5dc <main+0x944>)
   8c578:	781b      	ldrb	r3, [r3, #0]
   8c57a:	4618      	mov	r0, r3
   8c57c:	4b1c      	ldr	r3, [pc, #112]	; (8c5f0 <main+0x958>)
   8c57e:	4798      	blx	r3
   8c580:	4603      	mov	r3, r0
   8c582:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8c584:	7bfb      	ldrb	r3, [r7, #15]
   8c586:	2b00      	cmp	r3, #0
   8c588:	d002      	beq.n	8c590 <main+0x8f8>
   8c58a:	4b16      	ldr	r3, [pc, #88]	; (8c5e4 <main+0x94c>)
   8c58c:	4798      	blx	r3
							if( Cl_MacRetval != CL_OK)
							{
								// handle error
							}
						break;
   8c58e:	e020      	b.n	8c5d2 <main+0x93a>
   8c590:	e01f      	b.n	8c5d2 <main+0x93a>
						case MACREQ_PRE_DISINFECT_RINSE_COMPLETED:
						case MACREQ_POST_DISINFECT_RINSE_COMPLETED:
						Cl_MacRetval = Cl_disinf_controller(Cl_MacEvent);
   8c592:	4b12      	ldr	r3, [pc, #72]	; (8c5dc <main+0x944>)
   8c594:	781b      	ldrb	r3, [r3, #0]
   8c596:	4618      	mov	r0, r3
   8c598:	4b11      	ldr	r3, [pc, #68]	; (8c5e0 <main+0x948>)
   8c59a:	4798      	blx	r3
   8c59c:	4603      	mov	r3, r0
   8c59e:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8c5a0:	7bfb      	ldrb	r3, [r7, #15]
   8c5a2:	2b00      	cmp	r3, #0
   8c5a4:	d002      	beq.n	8c5ac <main+0x914>
   8c5a6:	4b0f      	ldr	r3, [pc, #60]	; (8c5e4 <main+0x94c>)
   8c5a8:	4798      	blx	r3
							if( Cl_MacRetval != CL_OK)
							{
								// handle error
							}
						break;
   8c5aa:	e012      	b.n	8c5d2 <main+0x93a>
   8c5ac:	e011      	b.n	8c5d2 <main+0x93a>
						case MACREQ_DISINF_COMPLETED:
					//	Cl_MacRetval = Cl_Init_Controller(EVT_COMMAND_ENTER_STANDBY);
					//	ASSERT_ERROR(Cl_MacRetval);
					//		if( Cl_MacRetval == CL_OK)
							{
								Cl_MacRetval = Cl_Standby_Controller(EVT_COMMAND_ENTER_STANDBY);
   8c5ae:	202b      	movs	r0, #43	; 0x2b
   8c5b0:	4b0e      	ldr	r3, [pc, #56]	; (8c5ec <main+0x954>)
   8c5b2:	4798      	blx	r3
   8c5b4:	4603      	mov	r3, r0
   8c5b6:	73fb      	strb	r3, [r7, #15]
								ASSERT_ERROR(Cl_MacRetval);
   8c5b8:	7bfb      	ldrb	r3, [r7, #15]
   8c5ba:	2b00      	cmp	r3, #0
   8c5bc:	d001      	beq.n	8c5c2 <main+0x92a>
   8c5be:	4b09      	ldr	r3, [pc, #36]	; (8c5e4 <main+0x94c>)
   8c5c0:	4798      	blx	r3
								Cl_MacState =   MAC_STANDBY;
   8c5c2:	4b09      	ldr	r3, [pc, #36]	; (8c5e8 <main+0x950>)
   8c5c4:	2205      	movs	r2, #5
   8c5c6:	701a      	strb	r2, [r3, #0]
							}
						Cl_MacEvent = EVT_NULL;
   8c5c8:	4b04      	ldr	r3, [pc, #16]	; (8c5dc <main+0x944>)
   8c5ca:	2200      	movs	r2, #0
   8c5cc:	701a      	strb	r2, [r3, #0]
						break;
   8c5ce:	e000      	b.n	8c5d2 <main+0x93a>
						default:break;
   8c5d0:	bf00      	nop
					}
	
					Cl_MacEvent = EVT_NULL;
   8c5d2:	4b02      	ldr	r3, [pc, #8]	; (8c5dc <main+0x944>)
   8c5d4:	2200      	movs	r2, #0
   8c5d6:	701a      	strb	r2, [r3, #0]
					break;
   8c5d8:	f001 bbfd 	b.w	8ddd6 <main+0x213e>
   8c5dc:	200719e6 	.word	0x200719e6
   8c5e0:	0009c211 	.word	0x0009c211
   8c5e4:	00088fc1 	.word	0x00088fc1
   8c5e8:	20070584 	.word	0x20070584
   8c5ec:	000a4e99 	.word	0x000a4e99
   8c5f0:	000a2641 	.word	0x000a2641
   8c5f4:	0009e4c9 	.word	0x0009e4c9
					case MAC_SAFE_STANDBY:
					switch ( Cl_MacEvent )
   8c5f8:	4bc5      	ldr	r3, [pc, #788]	; (8c910 <main+0xc78>)
   8c5fa:	781b      	ldrb	r3, [r3, #0]
   8c5fc:	3b07      	subs	r3, #7
   8c5fe:	2b27      	cmp	r3, #39	; 0x27
   8c600:	d852      	bhi.n	8c6a8 <main+0xa10>
   8c602:	a201      	add	r2, pc, #4	; (adr r2, 8c608 <main+0x970>)
   8c604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8c608:	0008c6a9 	.word	0x0008c6a9
   8c60c:	0008c6a9 	.word	0x0008c6a9
   8c610:	0008c6a9 	.word	0x0008c6a9
   8c614:	0008c6a9 	.word	0x0008c6a9
   8c618:	0008c6a9 	.word	0x0008c6a9
   8c61c:	0008c6a9 	.word	0x0008c6a9
   8c620:	0008c6a9 	.word	0x0008c6a9
   8c624:	0008c6a9 	.word	0x0008c6a9
   8c628:	0008c6a9 	.word	0x0008c6a9
   8c62c:	0008c6a9 	.word	0x0008c6a9
   8c630:	0008c6a9 	.word	0x0008c6a9
   8c634:	0008c6a9 	.word	0x0008c6a9
   8c638:	0008c6a9 	.word	0x0008c6a9
   8c63c:	0008c6a9 	.word	0x0008c6a9
   8c640:	0008c6a9 	.word	0x0008c6a9
   8c644:	0008c6a9 	.word	0x0008c6a9
   8c648:	0008c6a9 	.word	0x0008c6a9
   8c64c:	0008c6a9 	.word	0x0008c6a9
   8c650:	0008c6a9 	.word	0x0008c6a9
   8c654:	0008c6a9 	.word	0x0008c6a9
   8c658:	0008c6a9 	.word	0x0008c6a9
   8c65c:	0008c6a9 	.word	0x0008c6a9
   8c660:	0008c6a9 	.word	0x0008c6a9
   8c664:	0008c6a9 	.word	0x0008c6a9
   8c668:	0008c6a9 	.word	0x0008c6a9
   8c66c:	0008c6a9 	.word	0x0008c6a9
   8c670:	0008c6a9 	.word	0x0008c6a9
   8c674:	0008c6a9 	.word	0x0008c6a9
   8c678:	0008c6a9 	.word	0x0008c6a9
   8c67c:	0008c6a9 	.word	0x0008c6a9
   8c680:	0008c6a9 	.word	0x0008c6a9
   8c684:	0008c6a9 	.word	0x0008c6a9
   8c688:	0008c6a9 	.word	0x0008c6a9
   8c68c:	0008c6a9 	.word	0x0008c6a9
   8c690:	0008c6a9 	.word	0x0008c6a9
   8c694:	0008c6a9 	.word	0x0008c6a9
   8c698:	0008c6a9 	.word	0x0008c6a9
   8c69c:	0008c6a9 	.word	0x0008c6a9
   8c6a0:	0008c6a9 	.word	0x0008c6a9
   8c6a4:	0008c6a9 	.word	0x0008c6a9
						case EVT_ALARM_TRIGGERED:
						break;
						case EVT_ALERT_TRIGGERED:

						break;
						default: break;
   8c6a8:	bf00      	nop
					}
					break;
   8c6aa:	f001 bb94 	b.w	8ddd6 <main+0x213e>
					case MAC_RINSE:

					switch ( Cl_MacEvent )
   8c6ae:	4b98      	ldr	r3, [pc, #608]	; (8c910 <main+0xc78>)
   8c6b0:	781b      	ldrb	r3, [r3, #0]
   8c6b2:	3b07      	subs	r3, #7
   8c6b4:	2b4a      	cmp	r3, #74	; 0x4a
   8c6b6:	f200 8147 	bhi.w	8c948 <main+0xcb0>
   8c6ba:	a201      	add	r2, pc, #4	; (adr r2, 8c6c0 <main+0xa28>)
   8c6bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8c6c0:	0008c7ed 	.word	0x0008c7ed
   8c6c4:	0008c8d3 	.word	0x0008c8d3
   8c6c8:	0008c871 	.word	0x0008c871
   8c6cc:	0008c92d 	.word	0x0008c92d
   8c6d0:	0008c92d 	.word	0x0008c92d
   8c6d4:	0008c92d 	.word	0x0008c92d
   8c6d8:	0008c949 	.word	0x0008c949
   8c6dc:	0008c949 	.word	0x0008c949
   8c6e0:	0008c8f3 	.word	0x0008c8f3
   8c6e4:	0008c8f3 	.word	0x0008c8f3
   8c6e8:	0008c949 	.word	0x0008c949
   8c6ec:	0008c949 	.word	0x0008c949
   8c6f0:	0008c949 	.word	0x0008c949
   8c6f4:	0008c949 	.word	0x0008c949
   8c6f8:	0008c949 	.word	0x0008c949
   8c6fc:	0008c949 	.word	0x0008c949
   8c700:	0008c949 	.word	0x0008c949
   8c704:	0008c949 	.word	0x0008c949
   8c708:	0008c949 	.word	0x0008c949
   8c70c:	0008c949 	.word	0x0008c949
   8c710:	0008c949 	.word	0x0008c949
   8c714:	0008c949 	.word	0x0008c949
   8c718:	0008c949 	.word	0x0008c949
   8c71c:	0008c949 	.word	0x0008c949
   8c720:	0008c8f3 	.word	0x0008c8f3
   8c724:	0008c8f3 	.word	0x0008c8f3
   8c728:	0008c949 	.word	0x0008c949
   8c72c:	0008c949 	.word	0x0008c949
   8c730:	0008c949 	.word	0x0008c949
   8c734:	0008c949 	.word	0x0008c949
   8c738:	0008c949 	.word	0x0008c949
   8c73c:	0008c92d 	.word	0x0008c92d
   8c740:	0008c92d 	.word	0x0008c92d
   8c744:	0008c92d 	.word	0x0008c92d
   8c748:	0008c871 	.word	0x0008c871
   8c74c:	0008c949 	.word	0x0008c949
   8c750:	0008c949 	.word	0x0008c949
   8c754:	0008c949 	.word	0x0008c949
   8c758:	0008c871 	.word	0x0008c871
   8c75c:	0008c871 	.word	0x0008c871
   8c760:	0008c949 	.word	0x0008c949
   8c764:	0008c949 	.word	0x0008c949
   8c768:	0008c851 	.word	0x0008c851
   8c76c:	0008c949 	.word	0x0008c949
   8c770:	0008c949 	.word	0x0008c949
   8c774:	0008c949 	.word	0x0008c949
   8c778:	0008c949 	.word	0x0008c949
   8c77c:	0008c949 	.word	0x0008c949
   8c780:	0008c949 	.word	0x0008c949
   8c784:	0008c871 	.word	0x0008c871
   8c788:	0008c871 	.word	0x0008c871
   8c78c:	0008c871 	.word	0x0008c871
   8c790:	0008c871 	.word	0x0008c871
   8c794:	0008c871 	.word	0x0008c871
   8c798:	0008c871 	.word	0x0008c871
   8c79c:	0008c949 	.word	0x0008c949
   8c7a0:	0008c949 	.word	0x0008c949
   8c7a4:	0008c949 	.word	0x0008c949
   8c7a8:	0008c949 	.word	0x0008c949
   8c7ac:	0008c949 	.word	0x0008c949
   8c7b0:	0008c949 	.word	0x0008c949
   8c7b4:	0008c949 	.word	0x0008c949
   8c7b8:	0008c949 	.word	0x0008c949
   8c7bc:	0008c949 	.word	0x0008c949
   8c7c0:	0008c949 	.word	0x0008c949
   8c7c4:	0008c891 	.word	0x0008c891
   8c7c8:	0008c949 	.word	0x0008c949
   8c7cc:	0008c949 	.word	0x0008c949
   8c7d0:	0008c949 	.word	0x0008c949
   8c7d4:	0008c949 	.word	0x0008c949
   8c7d8:	0008c949 	.word	0x0008c949
   8c7dc:	0008c949 	.word	0x0008c949
   8c7e0:	0008c949 	.word	0x0008c949
   8c7e4:	0008c949 	.word	0x0008c949
   8c7e8:	0008c871 	.word	0x0008c871
				
					{
						case EVT_CONSOLE_COMMAND_RINSE_START:
							loopcountinsec =0;
   8c7ec:	4b49      	ldr	r3, [pc, #292]	; (8c914 <main+0xc7c>)
   8c7ee:	2200      	movs	r2, #0
   8c7f0:	601a      	str	r2, [r3, #0]
							Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8c7f2:	4b47      	ldr	r3, [pc, #284]	; (8c910 <main+0xc78>)
   8c7f4:	781b      	ldrb	r3, [r3, #0]
   8c7f6:	4618      	mov	r0, r3
   8c7f8:	4b47      	ldr	r3, [pc, #284]	; (8c918 <main+0xc80>)
   8c7fa:	4798      	blx	r3
   8c7fc:	4603      	mov	r3, r0
   8c7fe:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8c800:	7bfb      	ldrb	r3, [r7, #15]
   8c802:	2b00      	cmp	r3, #0
   8c804:	d001      	beq.n	8c80a <main+0xb72>
   8c806:	4b45      	ldr	r3, [pc, #276]	; (8c91c <main+0xc84>)
   8c808:	4798      	blx	r3
							if(Cl_MacRetval == CL_OK)
   8c80a:	7bfb      	ldrb	r3, [r7, #15]
   8c80c:	2b00      	cmp	r3, #0
   8c80e:	d10c      	bne.n	8c82a <main+0xb92>
							{
								Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8c810:	4b3f      	ldr	r3, [pc, #252]	; (8c910 <main+0xc78>)
   8c812:	781b      	ldrb	r3, [r3, #0]
   8c814:	4618      	mov	r0, r3
   8c816:	4b42      	ldr	r3, [pc, #264]	; (8c920 <main+0xc88>)
   8c818:	4798      	blx	r3
   8c81a:	4603      	mov	r3, r0
   8c81c:	73fb      	strb	r3, [r7, #15]
								ASSERT_ERROR(Cl_MacRetval);	
   8c81e:	7bfb      	ldrb	r3, [r7, #15]
   8c820:	2b00      	cmp	r3, #0
   8c822:	d011      	beq.n	8c848 <main+0xbb0>
   8c824:	4b3d      	ldr	r3, [pc, #244]	; (8c91c <main+0xc84>)
   8c826:	4798      	blx	r3
   8c828:	e00e      	b.n	8c848 <main+0xbb0>
							}
							else if(Cl_MacRetval == CL_OK)
   8c82a:	7bfb      	ldrb	r3, [r7, #15]
   8c82c:	2b00      	cmp	r3, #0
   8c82e:	d10b      	bne.n	8c848 <main+0xbb0>
							{
								Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8c830:	4b37      	ldr	r3, [pc, #220]	; (8c910 <main+0xc78>)
   8c832:	781b      	ldrb	r3, [r3, #0]
   8c834:	4618      	mov	r0, r3
   8c836:	4b3a      	ldr	r3, [pc, #232]	; (8c920 <main+0xc88>)
   8c838:	4798      	blx	r3
   8c83a:	4603      	mov	r3, r0
   8c83c:	73fb      	strb	r3, [r7, #15]
								ASSERT_ERROR(Cl_MacRetval);
   8c83e:	7bfb      	ldrb	r3, [r7, #15]
   8c840:	2b00      	cmp	r3, #0
   8c842:	d001      	beq.n	8c848 <main+0xbb0>
   8c844:	4b35      	ldr	r3, [pc, #212]	; (8c91c <main+0xc84>)
   8c846:	4798      	blx	r3
							}
							
							
							Cl_MacEvent = EVT_NULL;
   8c848:	4b31      	ldr	r3, [pc, #196]	; (8c910 <main+0xc78>)
   8c84a:	2200      	movs	r2, #0
   8c84c:	701a      	strb	r2, [r3, #0]
						break;
   8c84e:	e07c      	b.n	8c94a <main+0xcb2>

						case EVT_TIMER_EXPIRED:
							Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8c850:	4b2f      	ldr	r3, [pc, #188]	; (8c910 <main+0xc78>)
   8c852:	781b      	ldrb	r3, [r3, #0]
   8c854:	4618      	mov	r0, r3
   8c856:	4b32      	ldr	r3, [pc, #200]	; (8c920 <main+0xc88>)
   8c858:	4798      	blx	r3
   8c85a:	4603      	mov	r3, r0
   8c85c:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8c85e:	7bfb      	ldrb	r3, [r7, #15]
   8c860:	2b00      	cmp	r3, #0
   8c862:	d001      	beq.n	8c868 <main+0xbd0>
   8c864:	4b2d      	ldr	r3, [pc, #180]	; (8c91c <main+0xc84>)
   8c866:	4798      	blx	r3
							if(Cl_MacRetval != CL_OK)
							{
								 // handle error
							}
							Cl_MacEvent = EVT_NULL;
   8c868:	4b29      	ldr	r3, [pc, #164]	; (8c910 <main+0xc78>)
   8c86a:	2200      	movs	r2, #0
   8c86c:	701a      	strb	r2, [r3, #0]
						break;
   8c86e:	e06c      	b.n	8c94a <main+0xcb2>
						case EVT_ALARM_TRIGGERED:
						case EVT_ALERT_TRIGGERED:
					//	case EVT_CONSOLE_COMMAND_GET_DATA:
					//	case EVT_CONSOLE_COMMAND_SET_DATA:
						case MACREQ_BC_OPENFILL_COMPLETED:
							Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8c870:	4b27      	ldr	r3, [pc, #156]	; (8c910 <main+0xc78>)
   8c872:	781b      	ldrb	r3, [r3, #0]
   8c874:	4618      	mov	r0, r3
   8c876:	4b2a      	ldr	r3, [pc, #168]	; (8c920 <main+0xc88>)
   8c878:	4798      	blx	r3
   8c87a:	4603      	mov	r3, r0
   8c87c:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8c87e:	7bfb      	ldrb	r3, [r7, #15]
   8c880:	2b00      	cmp	r3, #0
   8c882:	d001      	beq.n	8c888 <main+0xbf0>
   8c884:	4b25      	ldr	r3, [pc, #148]	; (8c91c <main+0xc84>)
   8c886:	4798      	blx	r3
							if(Cl_MacRetval != CL_OK)
							{
								// handle error
							}
							
							Cl_MacEvent = EVT_NULL;
   8c888:	4b21      	ldr	r3, [pc, #132]	; (8c910 <main+0xc78>)
   8c88a:	2200      	movs	r2, #0
   8c88c:	701a      	strb	r2, [r3, #0]
						break;
   8c88e:	e05c      	b.n	8c94a <main+0xcb2>
						case MACREQ_RINSE_COMPLETED:
							Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8c890:	4b1f      	ldr	r3, [pc, #124]	; (8c910 <main+0xc78>)
   8c892:	781b      	ldrb	r3, [r3, #0]
   8c894:	4618      	mov	r0, r3
   8c896:	4b22      	ldr	r3, [pc, #136]	; (8c920 <main+0xc88>)
   8c898:	4798      	blx	r3
   8c89a:	4603      	mov	r3, r0
   8c89c:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8c89e:	7bfb      	ldrb	r3, [r7, #15]
   8c8a0:	2b00      	cmp	r3, #0
   8c8a2:	d001      	beq.n	8c8a8 <main+0xc10>
   8c8a4:	4b1d      	ldr	r3, [pc, #116]	; (8c91c <main+0xc84>)
   8c8a6:	4798      	blx	r3
							if( Cl_MacRetval == CL_OK)
   8c8a8:	7bfb      	ldrb	r3, [r7, #15]
   8c8aa:	2b00      	cmp	r3, #0
   8c8ac:	d109      	bne.n	8c8c2 <main+0xc2a>
							{
								Cl_MacState = MAC_POST_RINSE_STANDBY;
   8c8ae:	4b1d      	ldr	r3, [pc, #116]	; (8c924 <main+0xc8c>)
   8c8b0:	220a      	movs	r2, #10
   8c8b2:	701a      	strb	r2, [r3, #0]
								Cl_Uint8Type temp = MAC_POST_RINSE_STANDBY;
   8c8b4:	230a      	movs	r3, #10
   8c8b6:	727b      	strb	r3, [r7, #9]
								//	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(Cl_Uint8Type*)temp,1);
									ASSERT_ERROR(Cl_MacRetval);
   8c8b8:	7bfb      	ldrb	r3, [r7, #15]
   8c8ba:	2b00      	cmp	r3, #0
   8c8bc:	d001      	beq.n	8c8c2 <main+0xc2a>
   8c8be:	4b17      	ldr	r3, [pc, #92]	; (8c91c <main+0xc84>)
   8c8c0:	4798      	blx	r3
							if(Cl_MacRetval != CL_OK)
							{
								// handle error
							}
							
							Cl_MacRetval = Cl_dlsis_init();
   8c8c2:	4b19      	ldr	r3, [pc, #100]	; (8c928 <main+0xc90>)
   8c8c4:	4798      	blx	r3
   8c8c6:	4603      	mov	r3, r0
   8c8c8:	73fb      	strb	r3, [r7, #15]
							
							Cl_MacEvent = EVT_NULL;
   8c8ca:	4b11      	ldr	r3, [pc, #68]	; (8c910 <main+0xc78>)
   8c8cc:	2200      	movs	r2, #0
   8c8ce:	701a      	strb	r2, [r3, #0]
						break;
   8c8d0:	e03b      	b.n	8c94a <main+0xcb2>
						case EVT_CONSOLE_COMMAND_STOP_RINSE:
							Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8c8d2:	4b0f      	ldr	r3, [pc, #60]	; (8c910 <main+0xc78>)
   8c8d4:	781b      	ldrb	r3, [r3, #0]
   8c8d6:	4618      	mov	r0, r3
   8c8d8:	4b11      	ldr	r3, [pc, #68]	; (8c920 <main+0xc88>)
   8c8da:	4798      	blx	r3
   8c8dc:	4603      	mov	r3, r0
   8c8de:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8c8e0:	7bfb      	ldrb	r3, [r7, #15]
   8c8e2:	2b00      	cmp	r3, #0
   8c8e4:	d001      	beq.n	8c8ea <main+0xc52>
   8c8e6:	4b0d      	ldr	r3, [pc, #52]	; (8c91c <main+0xc84>)
   8c8e8:	4798      	blx	r3
							if( Cl_MacRetval == CL_OK)
							{
							//	Cl_MacState = MAC_POST_RINSE_STANDBY;
							}
							Cl_MacEvent = EVT_NULL;
   8c8ea:	4b09      	ldr	r3, [pc, #36]	; (8c910 <main+0xc78>)
   8c8ec:	2200      	movs	r2, #0
   8c8ee:	701a      	strb	r2, [r3, #0]
						break;
   8c8f0:	e02b      	b.n	8c94a <main+0xcb2>

						case EVT_CONSOLE_COMMAND_START_PRIME:
						case EVT_CONSOLE_COMMAND_STOP_PRIME:
						case EVT_CONSOLE_COMMAND_RCIRC_START:
						case EVT_CONSOLE_COMMAND_RCIRC_STOP:
						Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8c8f2:	4b07      	ldr	r3, [pc, #28]	; (8c910 <main+0xc78>)
   8c8f4:	781b      	ldrb	r3, [r3, #0]
   8c8f6:	4618      	mov	r0, r3
   8c8f8:	4b09      	ldr	r3, [pc, #36]	; (8c920 <main+0xc88>)
   8c8fa:	4798      	blx	r3
   8c8fc:	4603      	mov	r3, r0
   8c8fe:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8c900:	7bfb      	ldrb	r3, [r7, #15]
   8c902:	2b00      	cmp	r3, #0
   8c904:	d002      	beq.n	8c90c <main+0xc74>
   8c906:	4b05      	ldr	r3, [pc, #20]	; (8c91c <main+0xc84>)
   8c908:	4798      	blx	r3
							if(Cl_MacRetval != CL_OK)
							{
								// handle error
							}
						//Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
						break;
   8c90a:	e01e      	b.n	8c94a <main+0xcb2>
   8c90c:	e01d      	b.n	8c94a <main+0xcb2>
   8c90e:	bf00      	nop
   8c910:	200719e6 	.word	0x200719e6
   8c914:	200719ec 	.word	0x200719ec
   8c918:	000a4e99 	.word	0x000a4e99
   8c91c:	00088fc1 	.word	0x00088fc1
   8c920:	000a2641 	.word	0x000a2641
   8c924:	20070584 	.word	0x20070584
   8c928:	0008546d 	.word	0x0008546d
						case EVT_CONSOLE_COMMAND_SET_BLDPMP_OFF:
						case EVT_CONSOLE_COMMAND_SET_BLDPUMPRATE:
						case EVT_CONSOLE_COMMAND_HEPARIN_BOLUS:
						case EVT_CONSOLE_COMMAND_HEPARIN_START:
						case EVT_CONSOLE_COMMAND_HEPARIN_STOP:
						Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8c92c:	4ba8      	ldr	r3, [pc, #672]	; (8cbd0 <main+0xf38>)
   8c92e:	781b      	ldrb	r3, [r3, #0]
   8c930:	4618      	mov	r0, r3
   8c932:	4ba8      	ldr	r3, [pc, #672]	; (8cbd4 <main+0xf3c>)
   8c934:	4798      	blx	r3
   8c936:	4603      	mov	r3, r0
   8c938:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8c93a:	7bfb      	ldrb	r3, [r7, #15]
   8c93c:	2b00      	cmp	r3, #0
   8c93e:	d002      	beq.n	8c946 <main+0xcae>
   8c940:	4ba5      	ldr	r3, [pc, #660]	; (8cbd8 <main+0xf40>)
   8c942:	4798      	blx	r3
							if(Cl_MacRetval != CL_OK)
							{
								// handle error
							}						
						break;
   8c944:	e001      	b.n	8c94a <main+0xcb2>
   8c946:	e000      	b.n	8c94a <main+0xcb2>
						default: break;
   8c948:	bf00      	nop
					}
					break;
   8c94a:	f001 ba44 	b.w	8ddd6 <main+0x213e>
					case MAC_POST_RINSE_STANDBY:
				switch ( Cl_MacEvent )
   8c94e:	4ba0      	ldr	r3, [pc, #640]	; (8cbd0 <main+0xf38>)
   8c950:	781b      	ldrb	r3, [r3, #0]
   8c952:	3b07      	subs	r3, #7
   8c954:	2b38      	cmp	r3, #56	; 0x38
   8c956:	f200 815e 	bhi.w	8cc16 <main+0xf7e>
   8c95a:	a201      	add	r2, pc, #4	; (adr r2, 8c960 <main+0xcc8>)
   8c95c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8c960:	0008ca99 	.word	0x0008ca99
   8c964:	0008cc17 	.word	0x0008cc17
   8c968:	0008caf3 	.word	0x0008caf3
   8c96c:	0008cbf1 	.word	0x0008cbf1
   8c970:	0008cbf1 	.word	0x0008cbf1
   8c974:	0008cbf1 	.word	0x0008cbf1
   8c978:	0008cc17 	.word	0x0008cc17
   8c97c:	0008cc17 	.word	0x0008cc17
   8c980:	0008cbb3 	.word	0x0008cbb3
   8c984:	0008cbb3 	.word	0x0008cbb3
   8c988:	0008cc17 	.word	0x0008cc17
   8c98c:	0008cc17 	.word	0x0008cc17
   8c990:	0008cc17 	.word	0x0008cc17
   8c994:	0008cc17 	.word	0x0008cc17
   8c998:	0008cc17 	.word	0x0008cc17
   8c99c:	0008cc17 	.word	0x0008cc17
   8c9a0:	0008cc17 	.word	0x0008cc17
   8c9a4:	0008cc17 	.word	0x0008cc17
   8c9a8:	0008cc17 	.word	0x0008cc17
   8c9ac:	0008cc17 	.word	0x0008cc17
   8c9b0:	0008cc17 	.word	0x0008cc17
   8c9b4:	0008cc17 	.word	0x0008cc17
   8c9b8:	0008cb67 	.word	0x0008cb67
   8c9bc:	0008cc17 	.word	0x0008cc17
   8c9c0:	0008cb8d 	.word	0x0008cb8d
   8c9c4:	0008cb8d 	.word	0x0008cb8d
   8c9c8:	0008cc17 	.word	0x0008cc17
   8c9cc:	0008cc17 	.word	0x0008cc17
   8c9d0:	0008cc17 	.word	0x0008cc17
   8c9d4:	0008cc17 	.word	0x0008cc17
   8c9d8:	0008cc17 	.word	0x0008cc17
   8c9dc:	0008cbf1 	.word	0x0008cbf1
   8c9e0:	0008cbf1 	.word	0x0008cbf1
   8c9e4:	0008cbf1 	.word	0x0008cbf1
   8c9e8:	0008cc17 	.word	0x0008cc17
   8c9ec:	0008cc17 	.word	0x0008cc17
   8c9f0:	0008cc17 	.word	0x0008cc17
   8c9f4:	0008cc17 	.word	0x0008cc17
   8c9f8:	0008ca45 	.word	0x0008ca45
   8c9fc:	0008ca45 	.word	0x0008ca45
   8ca00:	0008cc17 	.word	0x0008cc17
   8ca04:	0008cc17 	.word	0x0008cc17
   8ca08:	0008cc17 	.word	0x0008cc17
   8ca0c:	0008cc17 	.word	0x0008cc17
   8ca10:	0008cc17 	.word	0x0008cc17
   8ca14:	0008cc17 	.word	0x0008cc17
   8ca18:	0008cc17 	.word	0x0008cc17
   8ca1c:	0008cc17 	.word	0x0008cc17
   8ca20:	0008cc17 	.word	0x0008cc17
   8ca24:	0008cc17 	.word	0x0008cc17
   8ca28:	0008cc17 	.word	0x0008cc17
   8ca2c:	0008cc17 	.word	0x0008cc17
   8ca30:	0008cc17 	.word	0x0008cc17
   8ca34:	0008cc17 	.word	0x0008cc17
   8ca38:	0008cc17 	.word	0x0008cc17
   8ca3c:	0008cc17 	.word	0x0008cc17
   8ca40:	0008ca55 	.word	0x0008ca55
				
					{
						case EVT_ALARM_TRIGGERED:
						case EVT_ALERT_TRIGGERED:
						Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8ca44:	4b62      	ldr	r3, [pc, #392]	; (8cbd0 <main+0xf38>)
   8ca46:	781b      	ldrb	r3, [r3, #0]
   8ca48:	4618      	mov	r0, r3
   8ca4a:	4b62      	ldr	r3, [pc, #392]	; (8cbd4 <main+0xf3c>)
   8ca4c:	4798      	blx	r3
   8ca4e:	4603      	mov	r3, r0
   8ca50:	73fb      	strb	r3, [r7, #15]
						break;
   8ca52:	e0e1      	b.n	8cc18 <main+0xf80>

						case EVT_CONSOLE_COMMAND_DISINF_START:

						Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
   8ca54:	4b5e      	ldr	r3, [pc, #376]	; (8cbd0 <main+0xf38>)
   8ca56:	781b      	ldrb	r3, [r3, #0]
   8ca58:	4618      	mov	r0, r3
   8ca5a:	4b60      	ldr	r3, [pc, #384]	; (8cbdc <main+0xf44>)
   8ca5c:	4798      	blx	r3
   8ca5e:	4603      	mov	r3, r0
   8ca60:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8ca62:	7bfb      	ldrb	r3, [r7, #15]
   8ca64:	2b00      	cmp	r3, #0
   8ca66:	d001      	beq.n	8ca6c <main+0xdd4>
   8ca68:	4b5b      	ldr	r3, [pc, #364]	; (8cbd8 <main+0xf40>)
   8ca6a:	4798      	blx	r3
							if(Cl_MacRetval == CL_OK)
   8ca6c:	7bfb      	ldrb	r3, [r7, #15]
   8ca6e:	2b00      	cmp	r3, #0
   8ca70:	d10b      	bne.n	8ca8a <main+0xdf2>
							{
							Cl_MacRetval = Cl_disinf_controller(Cl_MacEvent);
   8ca72:	4b57      	ldr	r3, [pc, #348]	; (8cbd0 <main+0xf38>)
   8ca74:	781b      	ldrb	r3, [r3, #0]
   8ca76:	4618      	mov	r0, r3
   8ca78:	4b59      	ldr	r3, [pc, #356]	; (8cbe0 <main+0xf48>)
   8ca7a:	4798      	blx	r3
   8ca7c:	4603      	mov	r3, r0
   8ca7e:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8ca80:	7bfb      	ldrb	r3, [r7, #15]
   8ca82:	2b00      	cmp	r3, #0
   8ca84:	d001      	beq.n	8ca8a <main+0xdf2>
   8ca86:	4b54      	ldr	r3, [pc, #336]	; (8cbd8 <main+0xf40>)
   8ca88:	4798      	blx	r3
							}
							if(Cl_MacRetval == CL_OK)
   8ca8a:	7bfb      	ldrb	r3, [r7, #15]
   8ca8c:	2b00      	cmp	r3, #0
   8ca8e:	d102      	bne.n	8ca96 <main+0xdfe>
							{
								Cl_MacState = MAC_DISINFECT;
   8ca90:	4b54      	ldr	r3, [pc, #336]	; (8cbe4 <main+0xf4c>)
   8ca92:	2208      	movs	r2, #8
   8ca94:	701a      	strb	r2, [r3, #0]
							else
							{
								// handdle error
							}
						
						break;
   8ca96:	e0bf      	b.n	8cc18 <main+0xf80>
						
						case EVT_CONSOLE_COMMAND_RINSE_START:
						
								Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8ca98:	4b4d      	ldr	r3, [pc, #308]	; (8cbd0 <main+0xf38>)
   8ca9a:	781b      	ldrb	r3, [r3, #0]
   8ca9c:	4618      	mov	r0, r3
   8ca9e:	4b52      	ldr	r3, [pc, #328]	; (8cbe8 <main+0xf50>)
   8caa0:	4798      	blx	r3
   8caa2:	4603      	mov	r3, r0
   8caa4:	73fb      	strb	r3, [r7, #15]
								ASSERT_ERROR(Cl_MacRetval);
   8caa6:	7bfb      	ldrb	r3, [r7, #15]
   8caa8:	2b00      	cmp	r3, #0
   8caaa:	d001      	beq.n	8cab0 <main+0xe18>
   8caac:	4b4a      	ldr	r3, [pc, #296]	; (8cbd8 <main+0xf40>)
   8caae:	4798      	blx	r3
								if(Cl_MacRetval == CL_OK)
   8cab0:	7bfb      	ldrb	r3, [r7, #15]
   8cab2:	2b00      	cmp	r3, #0
   8cab4:	d10b      	bne.n	8cace <main+0xe36>
								{
									Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8cab6:	4b46      	ldr	r3, [pc, #280]	; (8cbd0 <main+0xf38>)
   8cab8:	781b      	ldrb	r3, [r3, #0]
   8caba:	4618      	mov	r0, r3
   8cabc:	4b45      	ldr	r3, [pc, #276]	; (8cbd4 <main+0xf3c>)
   8cabe:	4798      	blx	r3
   8cac0:	4603      	mov	r3, r0
   8cac2:	73fb      	strb	r3, [r7, #15]
									ASSERT_ERROR(Cl_MacRetval);
   8cac4:	7bfb      	ldrb	r3, [r7, #15]
   8cac6:	2b00      	cmp	r3, #0
   8cac8:	d001      	beq.n	8cace <main+0xe36>
   8caca:	4b43      	ldr	r3, [pc, #268]	; (8cbd8 <main+0xf40>)
   8cacc:	4798      	blx	r3
								}
													
								if( Cl_MacRetval == CL_OK)
   8cace:	7bfb      	ldrb	r3, [r7, #15]
   8cad0:	2b00      	cmp	r3, #0
   8cad2:	d102      	bne.n	8cada <main+0xe42>
								{
									Cl_MacState = MAC_RINSE;
   8cad4:	4b43      	ldr	r3, [pc, #268]	; (8cbe4 <main+0xf4c>)
   8cad6:	2207      	movs	r2, #7
   8cad8:	701a      	strb	r2, [r3, #0]
									//Cl_MacState = MAC_POST_RINSE_STANDBY;						
								}
								if( Cl_MacRetval == CL_OK)
   8cada:	7bfb      	ldrb	r3, [r7, #15]
   8cadc:	2b00      	cmp	r3, #0
   8cade:	d104      	bne.n	8caea <main+0xe52>
								{
								//	Cl_MacRetval = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_RINSE,1);
									ASSERT_ERROR(Cl_MacRetval);
   8cae0:	7bfb      	ldrb	r3, [r7, #15]
   8cae2:	2b00      	cmp	r3, #0
   8cae4:	d001      	beq.n	8caea <main+0xe52>
   8cae6:	4b3c      	ldr	r3, [pc, #240]	; (8cbd8 <main+0xf40>)
   8cae8:	4798      	blx	r3
								if( Cl_MacRetval != CL_OK)
								{
									// handle error
								}
								
								Cl_MacEvent = EVT_NULL;
   8caea:	4b39      	ldr	r3, [pc, #228]	; (8cbd0 <main+0xf38>)
   8caec:	2200      	movs	r2, #0
   8caee:	701a      	strb	r2, [r3, #0]
						break;
   8caf0:	e092      	b.n	8cc18 <main+0xf80>
						case EVT_CONSOLE_COMMAND_DIALYSIS_PREP:
																				
							Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8caf2:	4b37      	ldr	r3, [pc, #220]	; (8cbd0 <main+0xf38>)
   8caf4:	781b      	ldrb	r3, [r3, #0]
   8caf6:	4618      	mov	r0, r3
   8caf8:	4b3b      	ldr	r3, [pc, #236]	; (8cbe8 <main+0xf50>)
   8cafa:	4798      	blx	r3
   8cafc:	4603      	mov	r3, r0
   8cafe:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8cb00:	7bfb      	ldrb	r3, [r7, #15]
   8cb02:	2b00      	cmp	r3, #0
   8cb04:	d001      	beq.n	8cb0a <main+0xe72>
   8cb06:	4b34      	ldr	r3, [pc, #208]	; (8cbd8 <main+0xf40>)
   8cb08:	4798      	blx	r3
							if(Cl_MacRetval == CL_OK)
   8cb0a:	7bfb      	ldrb	r3, [r7, #15]
   8cb0c:	2b00      	cmp	r3, #0
   8cb0e:	d10b      	bne.n	8cb28 <main+0xe90>
							{
								Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8cb10:	4b2f      	ldr	r3, [pc, #188]	; (8cbd0 <main+0xf38>)
   8cb12:	781b      	ldrb	r3, [r3, #0]
   8cb14:	4618      	mov	r0, r3
   8cb16:	4b2f      	ldr	r3, [pc, #188]	; (8cbd4 <main+0xf3c>)
   8cb18:	4798      	blx	r3
   8cb1a:	4603      	mov	r3, r0
   8cb1c:	73fb      	strb	r3, [r7, #15]
								ASSERT_ERROR(Cl_MacRetval);
   8cb1e:	7bfb      	ldrb	r3, [r7, #15]
   8cb20:	2b00      	cmp	r3, #0
   8cb22:	d001      	beq.n	8cb28 <main+0xe90>
   8cb24:	4b2c      	ldr	r3, [pc, #176]	; (8cbd8 <main+0xf40>)
   8cb26:	4798      	blx	r3
							}
							if(Cl_MacRetval == CL_OK)
   8cb28:	7bfb      	ldrb	r3, [r7, #15]
   8cb2a:	2b00      	cmp	r3, #0
   8cb2c:	d10b      	bne.n	8cb46 <main+0xeae>
							{
								Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8cb2e:	4b28      	ldr	r3, [pc, #160]	; (8cbd0 <main+0xf38>)
   8cb30:	781b      	ldrb	r3, [r3, #0]
   8cb32:	4618      	mov	r0, r3
   8cb34:	4b2d      	ldr	r3, [pc, #180]	; (8cbec <main+0xf54>)
   8cb36:	4798      	blx	r3
   8cb38:	4603      	mov	r3, r0
   8cb3a:	73fb      	strb	r3, [r7, #15]
								ASSERT_ERROR(Cl_MacRetval);
   8cb3c:	7bfb      	ldrb	r3, [r7, #15]
   8cb3e:	2b00      	cmp	r3, #0
   8cb40:	d001      	beq.n	8cb46 <main+0xeae>
   8cb42:	4b25      	ldr	r3, [pc, #148]	; (8cbd8 <main+0xf40>)
   8cb44:	4798      	blx	r3
							}
							if(Cl_MacRetval == CL_OK)
   8cb46:	7bfb      	ldrb	r3, [r7, #15]
   8cb48:	2b00      	cmp	r3, #0
   8cb4a:	d102      	bne.n	8cb52 <main+0xeba>
							{
									Cl_MacState = MAC_DPREP;
   8cb4c:	4b25      	ldr	r3, [pc, #148]	; (8cbe4 <main+0xf4c>)
   8cb4e:	220b      	movs	r2, #11
   8cb50:	701a      	strb	r2, [r3, #0]
							}
							if(Cl_MacRetval == CL_OK)
   8cb52:	7bfb      	ldrb	r3, [r7, #15]
   8cb54:	2b00      	cmp	r3, #0
   8cb56:	d105      	bne.n	8cb64 <main+0xecc>
							{
							//Cl_MacRetval = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_DPREP,1);
							ASSERT_ERROR(Cl_MacRetval);
   8cb58:	7bfb      	ldrb	r3, [r7, #15]
   8cb5a:	2b00      	cmp	r3, #0
   8cb5c:	d002      	beq.n	8cb64 <main+0xecc>
   8cb5e:	4b1e      	ldr	r3, [pc, #120]	; (8cbd8 <main+0xf40>)
   8cb60:	4798      	blx	r3
							}
							else
							{
								// handle error
							}
						break;
   8cb62:	e059      	b.n	8cc18 <main+0xf80>
   8cb64:	e058      	b.n	8cc18 <main+0xf80>
						case EVT_SEND_MIXING_PREP_START://0x21
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8cb66:	4b1a      	ldr	r3, [pc, #104]	; (8cbd0 <main+0xf38>)
   8cb68:	781b      	ldrb	r3, [r3, #0]
   8cb6a:	4618      	mov	r0, r3
   8cb6c:	4b1f      	ldr	r3, [pc, #124]	; (8cbec <main+0xf54>)
   8cb6e:	4798      	blx	r3
   8cb70:	4603      	mov	r3, r0
   8cb72:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8cb74:	7bfb      	ldrb	r3, [r7, #15]
   8cb76:	2b00      	cmp	r3, #0
   8cb78:	d001      	beq.n	8cb7e <main+0xee6>
   8cb7a:	4b17      	ldr	r3, [pc, #92]	; (8cbd8 <main+0xf40>)
   8cb7c:	4798      	blx	r3
							if(Cl_MacRetval == CL_OK)
   8cb7e:	7bfb      	ldrb	r3, [r7, #15]
   8cb80:	2b00      	cmp	r3, #0
   8cb82:	d102      	bne.n	8cb8a <main+0xef2>
							{
									Cl_MacState = MAC_DPREP;
   8cb84:	4b17      	ldr	r3, [pc, #92]	; (8cbe4 <main+0xf4c>)
   8cb86:	220b      	movs	r2, #11
   8cb88:	701a      	strb	r2, [r3, #0]
							else
							{
								// handle error
							}
						
						break;
   8cb8a:	e045      	b.n	8cc18 <main+0xf80>
						case EVT_SEND_MIXING_PREP_STOP://0x22
						break;

						case EVT_CONSOLE_COMMAND_RCIRC_START:
						case EVT_CONSOLE_COMMAND_RCIRC_STOP:
						Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8cb8c:	4b10      	ldr	r3, [pc, #64]	; (8cbd0 <main+0xf38>)
   8cb8e:	781b      	ldrb	r3, [r3, #0]
   8cb90:	4618      	mov	r0, r3
   8cb92:	4b10      	ldr	r3, [pc, #64]	; (8cbd4 <main+0xf3c>)
   8cb94:	4798      	blx	r3
   8cb96:	4603      	mov	r3, r0
   8cb98:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8cb9a:	7bfb      	ldrb	r3, [r7, #15]
   8cb9c:	2b00      	cmp	r3, #0
   8cb9e:	d001      	beq.n	8cba4 <main+0xf0c>
   8cba0:	4b0d      	ldr	r3, [pc, #52]	; (8cbd8 <main+0xf40>)
   8cba2:	4798      	blx	r3
							if(Cl_MacRetval == CL_OK)
   8cba4:	7bfb      	ldrb	r3, [r7, #15]
   8cba6:	2b00      	cmp	r3, #0
   8cba8:	d102      	bne.n	8cbb0 <main+0xf18>
							{
								Cl_MacState = MAC_DPREP;
   8cbaa:	4b0e      	ldr	r3, [pc, #56]	; (8cbe4 <main+0xf4c>)
   8cbac:	220b      	movs	r2, #11
   8cbae:	701a      	strb	r2, [r3, #0]
							else
							{
								// handle error
							}
													
						break;
   8cbb0:	e032      	b.n	8cc18 <main+0xf80>
						case EVT_CONSOLE_COMMAND_START_PRIME:
						case EVT_CONSOLE_COMMAND_STOP_PRIME:
						Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8cbb2:	4b07      	ldr	r3, [pc, #28]	; (8cbd0 <main+0xf38>)
   8cbb4:	781b      	ldrb	r3, [r3, #0]
   8cbb6:	4618      	mov	r0, r3
   8cbb8:	4b06      	ldr	r3, [pc, #24]	; (8cbd4 <main+0xf3c>)
   8cbba:	4798      	blx	r3
   8cbbc:	4603      	mov	r3, r0
   8cbbe:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8cbc0:	7bfb      	ldrb	r3, [r7, #15]
   8cbc2:	2b00      	cmp	r3, #0
   8cbc4:	d002      	beq.n	8cbcc <main+0xf34>
   8cbc6:	4b04      	ldr	r3, [pc, #16]	; (8cbd8 <main+0xf40>)
   8cbc8:	4798      	blx	r3
							else
							{
								// handle error
							}
													
						break;
   8cbca:	e025      	b.n	8cc18 <main+0xf80>
   8cbcc:	e024      	b.n	8cc18 <main+0xf80>
   8cbce:	bf00      	nop
   8cbd0:	200719e6 	.word	0x200719e6
   8cbd4:	000a2641 	.word	0x000a2641
   8cbd8:	00088fc1 	.word	0x00088fc1
   8cbdc:	00085581 	.word	0x00085581
   8cbe0:	0009c211 	.word	0x0009c211
   8cbe4:	20070584 	.word	0x20070584
   8cbe8:	000a4e99 	.word	0x000a4e99
   8cbec:	0009e4c9 	.word	0x0009e4c9
						case EVT_CONSOLE_COMMAND_SET_BLDPMP_OFF:
						case EVT_CONSOLE_COMMAND_SET_BLDPUMPRATE:
						case EVT_CONSOLE_COMMAND_HEPARIN_BOLUS:
						case EVT_CONSOLE_COMMAND_HEPARIN_START:
						case EVT_CONSOLE_COMMAND_HEPARIN_STOP:
						Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);	
   8cbf0:	4ba4      	ldr	r3, [pc, #656]	; (8ce84 <main+0x11ec>)
   8cbf2:	781b      	ldrb	r3, [r3, #0]
   8cbf4:	4618      	mov	r0, r3
   8cbf6:	4ba4      	ldr	r3, [pc, #656]	; (8ce88 <main+0x11f0>)
   8cbf8:	4798      	blx	r3
   8cbfa:	4603      	mov	r3, r0
   8cbfc:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8cbfe:	7bfb      	ldrb	r3, [r7, #15]
   8cc00:	2b00      	cmp	r3, #0
   8cc02:	d001      	beq.n	8cc08 <main+0xf70>
   8cc04:	4ba1      	ldr	r3, [pc, #644]	; (8ce8c <main+0x11f4>)
   8cc06:	4798      	blx	r3
							if(Cl_MacRetval == CL_OK)
   8cc08:	7bfb      	ldrb	r3, [r7, #15]
   8cc0a:	2b00      	cmp	r3, #0
   8cc0c:	d102      	bne.n	8cc14 <main+0xf7c>
							{
								Cl_MacState = MAC_DPREP;
   8cc0e:	4ba0      	ldr	r3, [pc, #640]	; (8ce90 <main+0x11f8>)
   8cc10:	220b      	movs	r2, #11
   8cc12:	701a      	strb	r2, [r3, #0]
							else
							{
								// handle error
							}
																		
						break;
   8cc14:	e000      	b.n	8cc18 <main+0xf80>
						default: break;
   8cc16:	bf00      	nop
					}
					break;
   8cc18:	f001 b8dd 	b.w	8ddd6 <main+0x213e>
					case MAC_DPREP:
					switch ( Cl_MacEvent )
   8cc1c:	4b99      	ldr	r3, [pc, #612]	; (8ce84 <main+0x11ec>)
   8cc1e:	781b      	ldrb	r3, [r3, #0]
   8cc20:	3b09      	subs	r3, #9
   8cc22:	2b4f      	cmp	r3, #79	; 0x4f
   8cc24:	f200 812b 	bhi.w	8ce7e <main+0x11e6>
   8cc28:	a201      	add	r2, pc, #4	; (adr r2, 8cc30 <main+0xf98>)
   8cc2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8cc2e:	bf00      	nop
   8cc30:	0008cd87 	.word	0x0008cd87
   8cc34:	0008cd87 	.word	0x0008cd87
   8cc38:	0008cd87 	.word	0x0008cd87
   8cc3c:	0008cd87 	.word	0x0008cd87
   8cc40:	0008ce7f 	.word	0x0008ce7f
   8cc44:	0008ce7f 	.word	0x0008ce7f
   8cc48:	0008cdad 	.word	0x0008cdad
   8cc4c:	0008cd87 	.word	0x0008cd87
   8cc50:	0008cd87 	.word	0x0008cd87
   8cc54:	0008ce63 	.word	0x0008ce63
   8cc58:	0008cd87 	.word	0x0008cd87
   8cc5c:	0008cd87 	.word	0x0008cd87
   8cc60:	0008cd87 	.word	0x0008cd87
   8cc64:	0008cdf9 	.word	0x0008cdf9
   8cc68:	0008ce7f 	.word	0x0008ce7f
   8cc6c:	0008ce7f 	.word	0x0008ce7f
   8cc70:	0008ce7f 	.word	0x0008ce7f
   8cc74:	0008ce7f 	.word	0x0008ce7f
   8cc78:	0008ce7f 	.word	0x0008ce7f
   8cc7c:	0008ce7f 	.word	0x0008ce7f
   8cc80:	0008cd87 	.word	0x0008cd87
   8cc84:	0008cd87 	.word	0x0008cd87
   8cc88:	0008cdd3 	.word	0x0008cdd3
   8cc8c:	0008ce7f 	.word	0x0008ce7f
   8cc90:	0008ce7f 	.word	0x0008ce7f
   8cc94:	0008ce7f 	.word	0x0008ce7f
   8cc98:	0008ce7f 	.word	0x0008ce7f
   8cc9c:	0008ce7f 	.word	0x0008ce7f
   8cca0:	0008ce7f 	.word	0x0008ce7f
   8cca4:	0008cd87 	.word	0x0008cd87
   8cca8:	0008cd87 	.word	0x0008cd87
   8ccac:	0008cd87 	.word	0x0008cd87
   8ccb0:	0008cd87 	.word	0x0008cd87
   8ccb4:	0008ce7f 	.word	0x0008ce7f
   8ccb8:	0008ce7f 	.word	0x0008ce7f
   8ccbc:	0008ce7f 	.word	0x0008ce7f
   8ccc0:	0008cd87 	.word	0x0008cd87
   8ccc4:	0008cd87 	.word	0x0008cd87
   8ccc8:	0008ce7f 	.word	0x0008ce7f
   8cccc:	0008ce7f 	.word	0x0008ce7f
   8ccd0:	0008ce7f 	.word	0x0008ce7f
   8ccd4:	0008ce7f 	.word	0x0008ce7f
   8ccd8:	0008ce7f 	.word	0x0008ce7f
   8ccdc:	0008ce7f 	.word	0x0008ce7f
   8cce0:	0008ce7f 	.word	0x0008ce7f
   8cce4:	0008ce7f 	.word	0x0008ce7f
   8cce8:	0008ce7f 	.word	0x0008ce7f
   8ccec:	0008cd87 	.word	0x0008cd87
   8ccf0:	0008cd87 	.word	0x0008cd87
   8ccf4:	0008cd87 	.word	0x0008cd87
   8ccf8:	0008cd87 	.word	0x0008cd87
   8ccfc:	0008cd87 	.word	0x0008cd87
   8cd00:	0008cd87 	.word	0x0008cd87
   8cd04:	0008ce7f 	.word	0x0008ce7f
   8cd08:	0008ce7f 	.word	0x0008ce7f
   8cd0c:	0008ce7f 	.word	0x0008ce7f
   8cd10:	0008ce7f 	.word	0x0008ce7f
   8cd14:	0008ce7f 	.word	0x0008ce7f
   8cd18:	0008ce7f 	.word	0x0008ce7f
   8cd1c:	0008ce7f 	.word	0x0008ce7f
   8cd20:	0008ce7f 	.word	0x0008ce7f
   8cd24:	0008ce7f 	.word	0x0008ce7f
   8cd28:	0008ce7f 	.word	0x0008ce7f
   8cd2c:	0008ce7f 	.word	0x0008ce7f
   8cd30:	0008ce7f 	.word	0x0008ce7f
   8cd34:	0008ce7f 	.word	0x0008ce7f
   8cd38:	0008ce7f 	.word	0x0008ce7f
   8cd3c:	0008ce31 	.word	0x0008ce31
   8cd40:	0008ce7f 	.word	0x0008ce7f
   8cd44:	0008ce7f 	.word	0x0008ce7f
   8cd48:	0008ce7f 	.word	0x0008ce7f
   8cd4c:	0008ce7f 	.word	0x0008ce7f
   8cd50:	0008ce7f 	.word	0x0008ce7f
   8cd54:	0008ce7f 	.word	0x0008ce7f
   8cd58:	0008ce7f 	.word	0x0008ce7f
   8cd5c:	0008ce7f 	.word	0x0008ce7f
   8cd60:	0008ce7f 	.word	0x0008ce7f
   8cd64:	0008ce7f 	.word	0x0008ce7f
   8cd68:	0008ce7f 	.word	0x0008ce7f
   8cd6c:	0008cd71 	.word	0x0008cd71
						{
							
							case EVT_CONSOLE_COMMAND_ISOUF_START:
							
							Cl_MacState = MAC_ISOUF;
   8cd70:	4b47      	ldr	r3, [pc, #284]	; (8ce90 <main+0x11f8>)
   8cd72:	2214      	movs	r2, #20
   8cd74:	701a      	strb	r2, [r3, #0]
							Cl_MacRetval = cl_isouf_controller(Cl_MacEvent);
   8cd76:	4b43      	ldr	r3, [pc, #268]	; (8ce84 <main+0x11ec>)
   8cd78:	781b      	ldrb	r3, [r3, #0]
   8cd7a:	4618      	mov	r0, r3
   8cd7c:	4b45      	ldr	r3, [pc, #276]	; (8ce94 <main+0x11fc>)
   8cd7e:	4798      	blx	r3
   8cd80:	4603      	mov	r3, r0
   8cd82:	73fb      	strb	r3, [r7, #15]
							
							
							break;
   8cd84:	e07c      	b.n	8ce80 <main+0x11e8>
						case EVT_ALARM_TRIGGERED:
						case EVT_CONSOLE_COMMAND_STOP_PRIME:
						case EVT_SEND_MIXING_PREP_STOP://0x22
	
						
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8cd86:	4b3f      	ldr	r3, [pc, #252]	; (8ce84 <main+0x11ec>)
   8cd88:	781b      	ldrb	r3, [r3, #0]
   8cd8a:	4618      	mov	r0, r3
   8cd8c:	4b42      	ldr	r3, [pc, #264]	; (8ce98 <main+0x1200>)
   8cd8e:	4798      	blx	r3
   8cd90:	4603      	mov	r3, r0
   8cd92:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8cd94:	7bfb      	ldrb	r3, [r7, #15]
   8cd96:	2b00      	cmp	r3, #0
   8cd98:	d001      	beq.n	8cd9e <main+0x1106>
   8cd9a:	4b3c      	ldr	r3, [pc, #240]	; (8ce8c <main+0x11f4>)
   8cd9c:	4798      	blx	r3
							if(Cl_MacRetval == CL_OK)
   8cd9e:	7bfb      	ldrb	r3, [r7, #15]
   8cda0:	2b00      	cmp	r3, #0
   8cda2:	d102      	bne.n	8cdaa <main+0x1112>
							{
								Cl_MacState = MAC_DPREP;
   8cda4:	4b3a      	ldr	r3, [pc, #232]	; (8ce90 <main+0x11f8>)
   8cda6:	220b      	movs	r2, #11
   8cda8:	701a      	strb	r2, [r3, #0]
							else
							{
								// handle error
							}
							
						break;
   8cdaa:	e069      	b.n	8ce80 <main+0x11e8>
						case EVT_CONSOLE_COMMAND_START_PRIME:
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8cdac:	4b35      	ldr	r3, [pc, #212]	; (8ce84 <main+0x11ec>)
   8cdae:	781b      	ldrb	r3, [r3, #0]
   8cdb0:	4618      	mov	r0, r3
   8cdb2:	4b39      	ldr	r3, [pc, #228]	; (8ce98 <main+0x1200>)
   8cdb4:	4798      	blx	r3
   8cdb6:	4603      	mov	r3, r0
   8cdb8:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8cdba:	7bfb      	ldrb	r3, [r7, #15]
   8cdbc:	2b00      	cmp	r3, #0
   8cdbe:	d001      	beq.n	8cdc4 <main+0x112c>
   8cdc0:	4b32      	ldr	r3, [pc, #200]	; (8ce8c <main+0x11f4>)
   8cdc2:	4798      	blx	r3
							if(Cl_MacRetval == CL_OK)
   8cdc4:	7bfb      	ldrb	r3, [r7, #15]
   8cdc6:	2b00      	cmp	r3, #0
   8cdc8:	d102      	bne.n	8cdd0 <main+0x1138>
							{
								Cl_MacState = MAC_DPREP;
   8cdca:	4b31      	ldr	r3, [pc, #196]	; (8ce90 <main+0x11f8>)
   8cdcc:	220b      	movs	r2, #11
   8cdce:	701a      	strb	r2, [r3, #0]
							}
							else
							{
								// handle error
							}
						break;
   8cdd0:	e056      	b.n	8ce80 <main+0x11e8>
						case EVT_CONSOLE_COMMAND_RCIRC_START:
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8cdd2:	4b2c      	ldr	r3, [pc, #176]	; (8ce84 <main+0x11ec>)
   8cdd4:	781b      	ldrb	r3, [r3, #0]
   8cdd6:	4618      	mov	r0, r3
   8cdd8:	4b2f      	ldr	r3, [pc, #188]	; (8ce98 <main+0x1200>)
   8cdda:	4798      	blx	r3
   8cddc:	4603      	mov	r3, r0
   8cdde:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8cde0:	7bfb      	ldrb	r3, [r7, #15]
   8cde2:	2b00      	cmp	r3, #0
   8cde4:	d001      	beq.n	8cdea <main+0x1152>
   8cde6:	4b29      	ldr	r3, [pc, #164]	; (8ce8c <main+0x11f4>)
   8cde8:	4798      	blx	r3
							if(Cl_MacRetval == CL_OK)
   8cdea:	7bfb      	ldrb	r3, [r7, #15]
   8cdec:	2b00      	cmp	r3, #0
   8cdee:	d102      	bne.n	8cdf6 <main+0x115e>
							{
								Cl_MacState = MAC_DPREP;
   8cdf0:	4b27      	ldr	r3, [pc, #156]	; (8ce90 <main+0x11f8>)
   8cdf2:	220b      	movs	r2, #11
   8cdf4:	701a      	strb	r2, [r3, #0]
							}
							else
							{
								// handle error
							}
						break;
   8cdf6:	e043      	b.n	8ce80 <main+0x11e8>
						case EVT_CONSOLE_COMMAND_MAN_PREP_COMPLETED:
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8cdf8:	4b22      	ldr	r3, [pc, #136]	; (8ce84 <main+0x11ec>)
   8cdfa:	781b      	ldrb	r3, [r3, #0]
   8cdfc:	4618      	mov	r0, r3
   8cdfe:	4b26      	ldr	r3, [pc, #152]	; (8ce98 <main+0x1200>)
   8ce00:	4798      	blx	r3
   8ce02:	4603      	mov	r3, r0
   8ce04:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8ce06:	7bfb      	ldrb	r3, [r7, #15]
   8ce08:	2b00      	cmp	r3, #0
   8ce0a:	d001      	beq.n	8ce10 <main+0x1178>
   8ce0c:	4b1f      	ldr	r3, [pc, #124]	; (8ce8c <main+0x11f4>)
   8ce0e:	4798      	blx	r3
							if(Cl_MacRetval == CL_OK)
   8ce10:	7bfb      	ldrb	r3, [r7, #15]
   8ce12:	2b00      	cmp	r3, #0
   8ce14:	d102      	bne.n	8ce1c <main+0x1184>
							{
								Cl_MacState = MAC_DPREP;
   8ce16:	4b1e      	ldr	r3, [pc, #120]	; (8ce90 <main+0x11f8>)
   8ce18:	220b      	movs	r2, #11
   8ce1a:	701a      	strb	r2, [r3, #0]
							{
								// handle error
							}
	
						//	Cl_MacState = MAC_POST_DPREP_STANDBY; // for now the prime is set after manual prwepartion is completed
							Cl_MacState = MAC_DPREP_PRIME;
   8ce1c:	4b1c      	ldr	r3, [pc, #112]	; (8ce90 <main+0x11f8>)
   8ce1e:	220c      	movs	r2, #12
   8ce20:	701a      	strb	r2, [r3, #0]
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_DPREP_PRIME,1);
							ASSERT_ERROR(Cl_MacRetval);
   8ce22:	7bfb      	ldrb	r3, [r7, #15]
   8ce24:	2b00      	cmp	r3, #0
   8ce26:	d002      	beq.n	8ce2e <main+0x1196>
   8ce28:	4b18      	ldr	r3, [pc, #96]	; (8ce8c <main+0x11f4>)
   8ce2a:	4798      	blx	r3
						
						break;
   8ce2c:	e028      	b.n	8ce80 <main+0x11e8>
   8ce2e:	e027      	b.n	8ce80 <main+0x11e8>
						
						
						//Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
						break;
						case MACREQ_DIALYSER_PRIME_COMPLETED:
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8ce30:	4b14      	ldr	r3, [pc, #80]	; (8ce84 <main+0x11ec>)
   8ce32:	781b      	ldrb	r3, [r3, #0]
   8ce34:	4618      	mov	r0, r3
   8ce36:	4b18      	ldr	r3, [pc, #96]	; (8ce98 <main+0x1200>)
   8ce38:	4798      	blx	r3
   8ce3a:	4603      	mov	r3, r0
   8ce3c:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8ce3e:	7bfb      	ldrb	r3, [r7, #15]
   8ce40:	2b00      	cmp	r3, #0
   8ce42:	d001      	beq.n	8ce48 <main+0x11b0>
   8ce44:	4b11      	ldr	r3, [pc, #68]	; (8ce8c <main+0x11f4>)
   8ce46:	4798      	blx	r3
						if(Cl_MacRetval == CL_OK)
   8ce48:	7bfb      	ldrb	r3, [r7, #15]
   8ce4a:	2b00      	cmp	r3, #0
   8ce4c:	d108      	bne.n	8ce60 <main+0x11c8>
						{
							Cl_MacState = MAC_POST_DPREP_STANDBY;
   8ce4e:	4b10      	ldr	r3, [pc, #64]	; (8ce90 <main+0x11f8>)
   8ce50:	220e      	movs	r2, #14
   8ce52:	701a      	strb	r2, [r3, #0]
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_POST_DPREP_STANDBY,1);
							ASSERT_ERROR(Cl_MacRetval);
   8ce54:	7bfb      	ldrb	r3, [r7, #15]
   8ce56:	2b00      	cmp	r3, #0
   8ce58:	d002      	beq.n	8ce60 <main+0x11c8>
   8ce5a:	4b0c      	ldr	r3, [pc, #48]	; (8ce8c <main+0x11f4>)
   8ce5c:	4798      	blx	r3
						}
						else
						{
							// handle error
						}
						break;
   8ce5e:	e00f      	b.n	8ce80 <main+0x11e8>
   8ce60:	e00e      	b.n	8ce80 <main+0x11e8>
						
						case EVT_CONSOLE_COMMAND_DILYSER_CONNECTED:
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8ce62:	4b08      	ldr	r3, [pc, #32]	; (8ce84 <main+0x11ec>)
   8ce64:	781b      	ldrb	r3, [r3, #0]
   8ce66:	4618      	mov	r0, r3
   8ce68:	4b0b      	ldr	r3, [pc, #44]	; (8ce98 <main+0x1200>)
   8ce6a:	4798      	blx	r3
   8ce6c:	4603      	mov	r3, r0
   8ce6e:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8ce70:	7bfb      	ldrb	r3, [r7, #15]
   8ce72:	2b00      	cmp	r3, #0
   8ce74:	d002      	beq.n	8ce7c <main+0x11e4>
   8ce76:	4b05      	ldr	r3, [pc, #20]	; (8ce8c <main+0x11f4>)
   8ce78:	4798      	blx	r3



						break;
   8ce7a:	e001      	b.n	8ce80 <main+0x11e8>
   8ce7c:	e000      	b.n	8ce80 <main+0x11e8>

						default: break;
   8ce7e:	bf00      	nop
					}
					break;
   8ce80:	f000 bfa9 	b.w	8ddd6 <main+0x213e>
   8ce84:	200719e6 	.word	0x200719e6
   8ce88:	000a2641 	.word	0x000a2641
   8ce8c:	00088fc1 	.word	0x00088fc1
   8ce90:	20070584 	.word	0x20070584
   8ce94:	0009443d 	.word	0x0009443d
   8ce98:	0009e4c9 	.word	0x0009e4c9
					case MAC_DPREP_PRIME:
					switch ( Cl_MacEvent )
   8ce9c:	4bd1      	ldr	r3, [pc, #836]	; (8d1e4 <main+0x154c>)
   8ce9e:	781b      	ldrb	r3, [r3, #0]
   8cea0:	3b0a      	subs	r3, #10
   8cea2:	2b42      	cmp	r3, #66	; 0x42
   8cea4:	f200 80d8 	bhi.w	8d058 <main+0x13c0>
   8cea8:	a201      	add	r2, pc, #4	; (adr r2, 8ceb0 <main+0x1218>)
   8ceaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8ceae:	bf00      	nop
   8ceb0:	0008cfbd 	.word	0x0008cfbd
   8ceb4:	0008cfbd 	.word	0x0008cfbd
   8ceb8:	0008cfbd 	.word	0x0008cfbd
   8cebc:	0008d059 	.word	0x0008d059
   8cec0:	0008d059 	.word	0x0008d059
   8cec4:	0008cfd9 	.word	0x0008cfd9
   8cec8:	0008d059 	.word	0x0008d059
   8cecc:	0008cfbd 	.word	0x0008cfbd
   8ced0:	0008cfbd 	.word	0x0008cfbd
   8ced4:	0008cfbd 	.word	0x0008cfbd
   8ced8:	0008cfbd 	.word	0x0008cfbd
   8cedc:	0008d059 	.word	0x0008d059
   8cee0:	0008cfbd 	.word	0x0008cfbd
   8cee4:	0008d059 	.word	0x0008d059
   8cee8:	0008d059 	.word	0x0008d059
   8ceec:	0008d059 	.word	0x0008d059
   8cef0:	0008d059 	.word	0x0008d059
   8cef4:	0008d059 	.word	0x0008d059
   8cef8:	0008d059 	.word	0x0008d059
   8cefc:	0008d059 	.word	0x0008d059
   8cf00:	0008d059 	.word	0x0008d059
   8cf04:	0008d059 	.word	0x0008d059
   8cf08:	0008d059 	.word	0x0008d059
   8cf0c:	0008d059 	.word	0x0008d059
   8cf10:	0008d059 	.word	0x0008d059
   8cf14:	0008d059 	.word	0x0008d059
   8cf18:	0008d059 	.word	0x0008d059
   8cf1c:	0008d059 	.word	0x0008d059
   8cf20:	0008cfbd 	.word	0x0008cfbd
   8cf24:	0008cfbd 	.word	0x0008cfbd
   8cf28:	0008cfbd 	.word	0x0008cfbd
   8cf2c:	0008d059 	.word	0x0008d059
   8cf30:	0008d059 	.word	0x0008d059
   8cf34:	0008d059 	.word	0x0008d059
   8cf38:	0008d059 	.word	0x0008d059
   8cf3c:	0008cfbd 	.word	0x0008cfbd
   8cf40:	0008cfbd 	.word	0x0008cfbd
   8cf44:	0008d059 	.word	0x0008d059
   8cf48:	0008d059 	.word	0x0008d059
   8cf4c:	0008d059 	.word	0x0008d059
   8cf50:	0008d059 	.word	0x0008d059
   8cf54:	0008d059 	.word	0x0008d059
   8cf58:	0008d059 	.word	0x0008d059
   8cf5c:	0008d059 	.word	0x0008d059
   8cf60:	0008d059 	.word	0x0008d059
   8cf64:	0008d059 	.word	0x0008d059
   8cf68:	0008d059 	.word	0x0008d059
   8cf6c:	0008d059 	.word	0x0008d059
   8cf70:	0008cfbd 	.word	0x0008cfbd
   8cf74:	0008cfbd 	.word	0x0008cfbd
   8cf78:	0008cfbd 	.word	0x0008cfbd
   8cf7c:	0008cfbd 	.word	0x0008cfbd
   8cf80:	0008d059 	.word	0x0008d059
   8cf84:	0008d059 	.word	0x0008d059
   8cf88:	0008d059 	.word	0x0008d059
   8cf8c:	0008d059 	.word	0x0008d059
   8cf90:	0008d059 	.word	0x0008d059
   8cf94:	0008d059 	.word	0x0008d059
   8cf98:	0008d059 	.word	0x0008d059
   8cf9c:	0008d059 	.word	0x0008d059
   8cfa0:	0008d059 	.word	0x0008d059
   8cfa4:	0008d059 	.word	0x0008d059
   8cfa8:	0008d059 	.word	0x0008d059
   8cfac:	0008d00b 	.word	0x0008d00b
   8cfb0:	0008d059 	.word	0x0008d059
   8cfb4:	0008d059 	.word	0x0008d059
   8cfb8:	0008d027 	.word	0x0008d027
						case EVT_TICK_SEC:
						case EVT_TICK_MIN:
						case EVT_TICK_HOUR:
						case EVT_ALERT_TRIGGERED:
						case EVT_ALARM_TRIGGERED:
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8cfbc:	4b89      	ldr	r3, [pc, #548]	; (8d1e4 <main+0x154c>)
   8cfbe:	781b      	ldrb	r3, [r3, #0]
   8cfc0:	4618      	mov	r0, r3
   8cfc2:	4b89      	ldr	r3, [pc, #548]	; (8d1e8 <main+0x1550>)
   8cfc4:	4798      	blx	r3
   8cfc6:	4603      	mov	r3, r0
   8cfc8:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8cfca:	7bfb      	ldrb	r3, [r7, #15]
   8cfcc:	2b00      	cmp	r3, #0
   8cfce:	d002      	beq.n	8cfd6 <main+0x133e>
   8cfd0:	4b86      	ldr	r3, [pc, #536]	; (8d1ec <main+0x1554>)
   8cfd2:	4798      	blx	r3
						if(Cl_MacRetval != CL_OK)
						{
							// handle error
						}
						break;
   8cfd4:	e041      	b.n	8d05a <main+0x13c2>
   8cfd6:	e040      	b.n	8d05a <main+0x13c2>
						case EVT_CONSOLE_COMMAND_START_PRIME:
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8cfd8:	4b82      	ldr	r3, [pc, #520]	; (8d1e4 <main+0x154c>)
   8cfda:	781b      	ldrb	r3, [r3, #0]
   8cfdc:	4618      	mov	r0, r3
   8cfde:	4b82      	ldr	r3, [pc, #520]	; (8d1e8 <main+0x1550>)
   8cfe0:	4798      	blx	r3
   8cfe2:	4603      	mov	r3, r0
   8cfe4:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8cfe6:	7bfb      	ldrb	r3, [r7, #15]
   8cfe8:	2b00      	cmp	r3, #0
   8cfea:	d001      	beq.n	8cff0 <main+0x1358>
   8cfec:	4b7f      	ldr	r3, [pc, #508]	; (8d1ec <main+0x1554>)
   8cfee:	4798      	blx	r3
							if(Cl_MacRetval == CL_OK)
   8cff0:	7bfb      	ldrb	r3, [r7, #15]
   8cff2:	2b00      	cmp	r3, #0
   8cff4:	d108      	bne.n	8d008 <main+0x1370>
							{
								Cl_MacState = 	MAC_DPREP_PRIME;
   8cff6:	4b7e      	ldr	r3, [pc, #504]	; (8d1f0 <main+0x1558>)
   8cff8:	220c      	movs	r2, #12
   8cffa:	701a      	strb	r2, [r3, #0]
							//	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_DPREP_PRIME,1);
								ASSERT_ERROR(Cl_MacRetval);
   8cffc:	7bfb      	ldrb	r3, [r7, #15]
   8cffe:	2b00      	cmp	r3, #0
   8d000:	d002      	beq.n	8d008 <main+0x1370>
   8d002:	4b7a      	ldr	r3, [pc, #488]	; (8d1ec <main+0x1554>)
   8d004:	4798      	blx	r3
							else
							{
								// handle error
							}

						break;
   8d006:	e028      	b.n	8d05a <main+0x13c2>
   8d008:	e027      	b.n	8d05a <main+0x13c2>

						

						case MACREQ_PRIME_COMPLETED:
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8d00a:	4b76      	ldr	r3, [pc, #472]	; (8d1e4 <main+0x154c>)
   8d00c:	781b      	ldrb	r3, [r3, #0]
   8d00e:	4618      	mov	r0, r3
   8d010:	4b75      	ldr	r3, [pc, #468]	; (8d1e8 <main+0x1550>)
   8d012:	4798      	blx	r3
   8d014:	4603      	mov	r3, r0
   8d016:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8d018:	7bfb      	ldrb	r3, [r7, #15]
   8d01a:	2b00      	cmp	r3, #0
   8d01c:	d002      	beq.n	8d024 <main+0x138c>
   8d01e:	4b73      	ldr	r3, [pc, #460]	; (8d1ec <main+0x1554>)
   8d020:	4798      	blx	r3
							if(Cl_MacRetval != CL_OK)
							{
								// handle error
							}

						break;
   8d022:	e01a      	b.n	8d05a <main+0x13c2>
   8d024:	e019      	b.n	8d05a <main+0x13c2>
						case MACREQ_DIALYSER_PRIME_COMPLETED:
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8d026:	4b6f      	ldr	r3, [pc, #444]	; (8d1e4 <main+0x154c>)
   8d028:	781b      	ldrb	r3, [r3, #0]
   8d02a:	4618      	mov	r0, r3
   8d02c:	4b6e      	ldr	r3, [pc, #440]	; (8d1e8 <main+0x1550>)
   8d02e:	4798      	blx	r3
   8d030:	4603      	mov	r3, r0
   8d032:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8d034:	7bfb      	ldrb	r3, [r7, #15]
   8d036:	2b00      	cmp	r3, #0
   8d038:	d001      	beq.n	8d03e <main+0x13a6>
   8d03a:	4b6c      	ldr	r3, [pc, #432]	; (8d1ec <main+0x1554>)
   8d03c:	4798      	blx	r3
							if(Cl_MacRetval == CL_OK)
   8d03e:	7bfb      	ldrb	r3, [r7, #15]
   8d040:	2b00      	cmp	r3, #0
   8d042:	d108      	bne.n	8d056 <main+0x13be>
							{
							Cl_MacState = MAC_POST_DPREP_STANDBY;
   8d044:	4b6a      	ldr	r3, [pc, #424]	; (8d1f0 <main+0x1558>)
   8d046:	220e      	movs	r2, #14
   8d048:	701a      	strb	r2, [r3, #0]
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_POST_DPREP_STANDBY,1);
							ASSERT_ERROR(Cl_MacRetval);
   8d04a:	7bfb      	ldrb	r3, [r7, #15]
   8d04c:	2b00      	cmp	r3, #0
   8d04e:	d002      	beq.n	8d056 <main+0x13be>
   8d050:	4b66      	ldr	r3, [pc, #408]	; (8d1ec <main+0x1554>)
   8d052:	4798      	blx	r3
							else
							{
								// handle error
							}

						break;
   8d054:	e001      	b.n	8d05a <main+0x13c2>
   8d056:	e000      	b.n	8d05a <main+0x13c2>
					

						default: break;
   8d058:	bf00      	nop
					}
					break;
   8d05a:	f000 bebc 	b.w	8ddd6 <main+0x213e>
					case MAC_SAFE_DPREP:
					switch ( Cl_MacEvent )
   8d05e:	4b61      	ldr	r3, [pc, #388]	; (8d1e4 <main+0x154c>)
   8d060:	781b      	ldrb	r3, [r3, #0]
   8d062:	2b07      	cmp	r3, #7
   8d064:	d002      	beq.n	8d06c <main+0x13d4>
   8d066:	2b09      	cmp	r3, #9
   8d068:	d003      	beq.n	8d072 <main+0x13da>
					{
						case EVT_CONSOLE_COMMAND_RINSE_START:
						break;
						case EVT_CONSOLE_COMMAND_DIALYSIS_PREP:
						break;
						default: break;
   8d06a:	e003      	b.n	8d074 <main+0x13dc>
					case MAC_SAFE_DPREP:
					switch ( Cl_MacEvent )
				
					{
						case EVT_CONSOLE_COMMAND_RINSE_START:
						break;
   8d06c:	bf00      	nop
   8d06e:	f000 beb2 	b.w	8ddd6 <main+0x213e>
						case EVT_CONSOLE_COMMAND_DIALYSIS_PREP:
						break;
   8d072:	bf00      	nop
						default: break;
					}
					break;
   8d074:	f000 beaf 	b.w	8ddd6 <main+0x213e>
					case MAC_POST_DPREP_STANDBY:
					switch ( Cl_MacEvent )
   8d078:	4b5a      	ldr	r3, [pc, #360]	; (8d1e4 <main+0x154c>)
   8d07a:	781b      	ldrb	r3, [r3, #0]
   8d07c:	3b0a      	subs	r3, #10
   8d07e:	2b4e      	cmp	r3, #78	; 0x4e
   8d080:	f200 8112 	bhi.w	8d2a8 <main+0x1610>
   8d084:	a201      	add	r2, pc, #4	; (adr r2, 8d08c <main+0x13f4>)
   8d086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8d08a:	bf00      	nop
   8d08c:	0008d1c9 	.word	0x0008d1c9
   8d090:	0008d1c9 	.word	0x0008d1c9
   8d094:	0008d1c9 	.word	0x0008d1c9
   8d098:	0008d2a9 	.word	0x0008d2a9
   8d09c:	0008d2a9 	.word	0x0008d2a9
   8d0a0:	0008d2a9 	.word	0x0008d2a9
   8d0a4:	0008d2a9 	.word	0x0008d2a9
   8d0a8:	0008d2a9 	.word	0x0008d2a9
   8d0ac:	0008d2a9 	.word	0x0008d2a9
   8d0b0:	0008d2a9 	.word	0x0008d2a9
   8d0b4:	0008d2a9 	.word	0x0008d2a9
   8d0b8:	0008d1c9 	.word	0x0008d1c9
   8d0bc:	0008d2a9 	.word	0x0008d2a9
   8d0c0:	0008d1f5 	.word	0x0008d1f5
   8d0c4:	0008d2a9 	.word	0x0008d2a9
   8d0c8:	0008d2a9 	.word	0x0008d2a9
   8d0cc:	0008d1c9 	.word	0x0008d1c9
   8d0d0:	0008d1c9 	.word	0x0008d1c9
   8d0d4:	0008d1c9 	.word	0x0008d1c9
   8d0d8:	0008d2a9 	.word	0x0008d2a9
   8d0dc:	0008d2a9 	.word	0x0008d2a9
   8d0e0:	0008d2a9 	.word	0x0008d2a9
   8d0e4:	0008d2a9 	.word	0x0008d2a9
   8d0e8:	0008d1c9 	.word	0x0008d1c9
   8d0ec:	0008d2a9 	.word	0x0008d2a9
   8d0f0:	0008d2a9 	.word	0x0008d2a9
   8d0f4:	0008d2a9 	.word	0x0008d2a9
   8d0f8:	0008d2a9 	.word	0x0008d2a9
   8d0fc:	0008d2a9 	.word	0x0008d2a9
   8d100:	0008d1c9 	.word	0x0008d1c9
   8d104:	0008d1c9 	.word	0x0008d1c9
   8d108:	0008d2a9 	.word	0x0008d2a9
   8d10c:	0008d2a9 	.word	0x0008d2a9
   8d110:	0008d2a9 	.word	0x0008d2a9
   8d114:	0008d2a9 	.word	0x0008d2a9
   8d118:	0008d1c9 	.word	0x0008d1c9
   8d11c:	0008d1c9 	.word	0x0008d1c9
   8d120:	0008d2a9 	.word	0x0008d2a9
   8d124:	0008d2a9 	.word	0x0008d2a9
   8d128:	0008d2a9 	.word	0x0008d2a9
   8d12c:	0008d2a9 	.word	0x0008d2a9
   8d130:	0008d2a9 	.word	0x0008d2a9
   8d134:	0008d2a9 	.word	0x0008d2a9
   8d138:	0008d2a9 	.word	0x0008d2a9
   8d13c:	0008d2a9 	.word	0x0008d2a9
   8d140:	0008d2a9 	.word	0x0008d2a9
   8d144:	0008d1c9 	.word	0x0008d1c9
   8d148:	0008d2a9 	.word	0x0008d2a9
   8d14c:	0008d1c9 	.word	0x0008d1c9
   8d150:	0008d1c9 	.word	0x0008d1c9
   8d154:	0008d2a9 	.word	0x0008d2a9
   8d158:	0008d2a9 	.word	0x0008d2a9
   8d15c:	0008d2a9 	.word	0x0008d2a9
   8d160:	0008d2a9 	.word	0x0008d2a9
   8d164:	0008d2a9 	.word	0x0008d2a9
   8d168:	0008d2a9 	.word	0x0008d2a9
   8d16c:	0008d2a9 	.word	0x0008d2a9
   8d170:	0008d2a9 	.word	0x0008d2a9
   8d174:	0008d2a9 	.word	0x0008d2a9
   8d178:	0008d2a9 	.word	0x0008d2a9
   8d17c:	0008d2a9 	.word	0x0008d2a9
   8d180:	0008d2a9 	.word	0x0008d2a9
   8d184:	0008d2a9 	.word	0x0008d2a9
   8d188:	0008d2a9 	.word	0x0008d2a9
   8d18c:	0008d2a9 	.word	0x0008d2a9
   8d190:	0008d2a9 	.word	0x0008d2a9
   8d194:	0008d2a9 	.word	0x0008d2a9
   8d198:	0008d2a9 	.word	0x0008d2a9
   8d19c:	0008d2a9 	.word	0x0008d2a9
   8d1a0:	0008d2a9 	.word	0x0008d2a9
   8d1a4:	0008d2a9 	.word	0x0008d2a9
   8d1a8:	0008d2a9 	.word	0x0008d2a9
   8d1ac:	0008d2a9 	.word	0x0008d2a9
   8d1b0:	0008d2a9 	.word	0x0008d2a9
   8d1b4:	0008d2a9 	.word	0x0008d2a9
   8d1b8:	0008d1c9 	.word	0x0008d1c9
   8d1bc:	0008d2a9 	.word	0x0008d2a9
   8d1c0:	0008d2a9 	.word	0x0008d2a9
   8d1c4:	0008d293 	.word	0x0008d293
						case EVT_TICK_500M:
						case EVT_CONSOLE_COMMAND_PATIENT_CONNECTED:
						case EVT_CONSOLE_COMMAND_PATIENT_READY:
						case EVT_CONSOLE_COMMAND_BYPASS_ON:
						case EVT_CONSOLE_COMMAND_BYPASS_OFF:
						Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8d1c8:	4b06      	ldr	r3, [pc, #24]	; (8d1e4 <main+0x154c>)
   8d1ca:	781b      	ldrb	r3, [r3, #0]
   8d1cc:	4618      	mov	r0, r3
   8d1ce:	4b06      	ldr	r3, [pc, #24]	; (8d1e8 <main+0x1550>)
   8d1d0:	4798      	blx	r3
   8d1d2:	4603      	mov	r3, r0
   8d1d4:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8d1d6:	7bfb      	ldrb	r3, [r7, #15]
   8d1d8:	2b00      	cmp	r3, #0
   8d1da:	d002      	beq.n	8d1e2 <main+0x154a>
   8d1dc:	4b03      	ldr	r3, [pc, #12]	; (8d1ec <main+0x1554>)
   8d1de:	4798      	blx	r3
							if(Cl_MacRetval != CL_OK)
							{
								// handle error
							}
							//Cl_MacEvent = EVT_NULL;
						break;
   8d1e0:	e063      	b.n	8d2aa <main+0x1612>
   8d1e2:	e062      	b.n	8d2aa <main+0x1612>
   8d1e4:	200719e6 	.word	0x200719e6
   8d1e8:	0009e4c9 	.word	0x0009e4c9
   8d1ec:	00088fc1 	.word	0x00088fc1
   8d1f0:	20070584 	.word	0x20070584
						//case EVT_CONSOLE_COMMAND_GET_DATA:
					//	Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
					//	ASSERT_ERROR(Cl_MacRetval);
					//	break;
						case EVT_CONSOLE_COMMAND_DIALYSIS_START:
							Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8d1f4:	4ba9      	ldr	r3, [pc, #676]	; (8d49c <main+0x1804>)
   8d1f6:	781b      	ldrb	r3, [r3, #0]
   8d1f8:	4618      	mov	r0, r3
   8d1fa:	4ba9      	ldr	r3, [pc, #676]	; (8d4a0 <main+0x1808>)
   8d1fc:	4798      	blx	r3
   8d1fe:	4603      	mov	r3, r0
   8d200:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8d202:	7bfb      	ldrb	r3, [r7, #15]
   8d204:	2b00      	cmp	r3, #0
   8d206:	d001      	beq.n	8d20c <main+0x1574>
   8d208:	4ba6      	ldr	r3, [pc, #664]	; (8d4a4 <main+0x180c>)
   8d20a:	4798      	blx	r3
							if((Cl_MacRetval == CL_OK)||(Cl_MacRetval == CL_REJECTED))
   8d20c:	7bfb      	ldrb	r3, [r7, #15]
   8d20e:	2b00      	cmp	r3, #0
   8d210:	d002      	beq.n	8d218 <main+0x1580>
   8d212:	7bfb      	ldrb	r3, [r7, #15]
   8d214:	2b03      	cmp	r3, #3
   8d216:	d10b      	bne.n	8d230 <main+0x1598>
							{
								Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8d218:	4ba0      	ldr	r3, [pc, #640]	; (8d49c <main+0x1804>)
   8d21a:	781b      	ldrb	r3, [r3, #0]
   8d21c:	4618      	mov	r0, r3
   8d21e:	4ba2      	ldr	r3, [pc, #648]	; (8d4a8 <main+0x1810>)
   8d220:	4798      	blx	r3
   8d222:	4603      	mov	r3, r0
   8d224:	73fb      	strb	r3, [r7, #15]
								ASSERT_ERROR(Cl_MacRetval);
   8d226:	7bfb      	ldrb	r3, [r7, #15]
   8d228:	2b00      	cmp	r3, #0
   8d22a:	d001      	beq.n	8d230 <main+0x1598>
   8d22c:	4b9d      	ldr	r3, [pc, #628]	; (8d4a4 <main+0x180c>)
   8d22e:	4798      	blx	r3
							}
							else
							{
								//handle error
							}
							if((Cl_MacRetval == CL_OK)||(Cl_MacRetval == CL_REJECTED))
   8d230:	7bfb      	ldrb	r3, [r7, #15]
   8d232:	2b00      	cmp	r3, #0
   8d234:	d002      	beq.n	8d23c <main+0x15a4>
   8d236:	7bfb      	ldrb	r3, [r7, #15]
   8d238:	2b03      	cmp	r3, #3
   8d23a:	d10b      	bne.n	8d254 <main+0x15bc>
							{
								Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8d23c:	4b97      	ldr	r3, [pc, #604]	; (8d49c <main+0x1804>)
   8d23e:	781b      	ldrb	r3, [r3, #0]
   8d240:	4618      	mov	r0, r3
   8d242:	4b9a      	ldr	r3, [pc, #616]	; (8d4ac <main+0x1814>)
   8d244:	4798      	blx	r3
   8d246:	4603      	mov	r3, r0
   8d248:	73fb      	strb	r3, [r7, #15]
								ASSERT_ERROR(Cl_MacRetval);
   8d24a:	7bfb      	ldrb	r3, [r7, #15]
   8d24c:	2b00      	cmp	r3, #0
   8d24e:	d001      	beq.n	8d254 <main+0x15bc>
   8d250:	4b94      	ldr	r3, [pc, #592]	; (8d4a4 <main+0x180c>)
   8d252:	4798      	blx	r3
							}
							else
							{
								//handle error
							}
							if((Cl_MacRetval == CL_OK)||(Cl_MacRetval == CL_REJECTED))
   8d254:	7bfb      	ldrb	r3, [r7, #15]
   8d256:	2b00      	cmp	r3, #0
   8d258:	d002      	beq.n	8d260 <main+0x15c8>
   8d25a:	7bfb      	ldrb	r3, [r7, #15]
   8d25c:	2b03      	cmp	r3, #3
   8d25e:	d10b      	bne.n	8d278 <main+0x15e0>
							{
								Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
   8d260:	4b8e      	ldr	r3, [pc, #568]	; (8d49c <main+0x1804>)
   8d262:	781b      	ldrb	r3, [r3, #0]
   8d264:	4618      	mov	r0, r3
   8d266:	4b92      	ldr	r3, [pc, #584]	; (8d4b0 <main+0x1818>)
   8d268:	4798      	blx	r3
   8d26a:	4603      	mov	r3, r0
   8d26c:	73fb      	strb	r3, [r7, #15]
								ASSERT_ERROR(Cl_MacRetval);
   8d26e:	7bfb      	ldrb	r3, [r7, #15]
   8d270:	2b00      	cmp	r3, #0
   8d272:	d001      	beq.n	8d278 <main+0x15e0>
   8d274:	4b8b      	ldr	r3, [pc, #556]	; (8d4a4 <main+0x180c>)
   8d276:	4798      	blx	r3
							else
							{
								//handle error
							}

						if(Cl_MacRetval == CL_OK)
   8d278:	7bfb      	ldrb	r3, [r7, #15]
   8d27a:	2b00      	cmp	r3, #0
   8d27c:	d108      	bne.n	8d290 <main+0x15f8>
						{
							Cl_MacState = MAC_DIALYSIS;
   8d27e:	4b8d      	ldr	r3, [pc, #564]	; (8d4b4 <main+0x181c>)
   8d280:	220f      	movs	r2, #15
   8d282:	701a      	strb	r2, [r3, #0]
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_DIALYSIS,1);
							ASSERT_ERROR(Cl_MacRetval);
   8d284:	7bfb      	ldrb	r3, [r7, #15]
   8d286:	2b00      	cmp	r3, #0
   8d288:	d002      	beq.n	8d290 <main+0x15f8>
   8d28a:	4b86      	ldr	r3, [pc, #536]	; (8d4a4 <main+0x180c>)
   8d28c:	4798      	blx	r3
						}
						break;
   8d28e:	e00c      	b.n	8d2aa <main+0x1612>
   8d290:	e00b      	b.n	8d2aa <main+0x1612>
						
						// add case for isouf start event
						case EVT_CONSOLE_COMMAND_ISOUF_START:
						
						Cl_MacState = MAC_ISOUF;
   8d292:	4b88      	ldr	r3, [pc, #544]	; (8d4b4 <main+0x181c>)
   8d294:	2214      	movs	r2, #20
   8d296:	701a      	strb	r2, [r3, #0]
						Cl_MacRetval = cl_isouf_controller(Cl_MacEvent);
   8d298:	4b80      	ldr	r3, [pc, #512]	; (8d49c <main+0x1804>)
   8d29a:	781b      	ldrb	r3, [r3, #0]
   8d29c:	4618      	mov	r0, r3
   8d29e:	4b86      	ldr	r3, [pc, #536]	; (8d4b8 <main+0x1820>)
   8d2a0:	4798      	blx	r3
   8d2a2:	4603      	mov	r3, r0
   8d2a4:	73fb      	strb	r3, [r7, #15]
						
						
						break;
   8d2a6:	e000      	b.n	8d2aa <main+0x1612>
						
						default: break;
   8d2a8:	bf00      	nop
					}
					break;
   8d2aa:	f000 bd94 	b.w	8ddd6 <main+0x213e>
					
					case MAC_ISOUF:
					
					switch(Cl_MacEvent){
   8d2ae:	4b7b      	ldr	r3, [pc, #492]	; (8d49c <main+0x1804>)
   8d2b0:	781b      	ldrb	r3, [r3, #0]
   8d2b2:	3b07      	subs	r3, #7
   8d2b4:	2b53      	cmp	r3, #83	; 0x53
   8d2b6:	f200 858d 	bhi.w	8ddd4 <main+0x213c>
   8d2ba:	a201      	add	r2, pc, #4	; (adr r2, 8d2c0 <main+0x1628>)
   8d2bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8d2c0:	0008d55f 	.word	0x0008d55f
   8d2c4:	0008ddd5 	.word	0x0008ddd5
   8d2c8:	0008ddd5 	.word	0x0008ddd5
   8d2cc:	0008d421 	.word	0x0008d421
   8d2d0:	0008d421 	.word	0x0008d421
   8d2d4:	0008d421 	.word	0x0008d421
   8d2d8:	0008ddd5 	.word	0x0008ddd5
   8d2dc:	0008ddd5 	.word	0x0008ddd5
   8d2e0:	0008ddd5 	.word	0x0008ddd5
   8d2e4:	0008ddd5 	.word	0x0008ddd5
   8d2e8:	0008ddd5 	.word	0x0008ddd5
   8d2ec:	0008ddd5 	.word	0x0008ddd5
   8d2f0:	0008ddd5 	.word	0x0008ddd5
   8d2f4:	0008ddd5 	.word	0x0008ddd5
   8d2f8:	0008d421 	.word	0x0008d421
   8d2fc:	0008ddd5 	.word	0x0008ddd5
   8d300:	0008d4c1 	.word	0x0008d4c1
   8d304:	0008ddd5 	.word	0x0008ddd5
   8d308:	0008ddd5 	.word	0x0008ddd5
   8d30c:	0008d421 	.word	0x0008d421
   8d310:	0008d421 	.word	0x0008d421
   8d314:	0008ddd5 	.word	0x0008ddd5
   8d318:	0008ddd5 	.word	0x0008ddd5
   8d31c:	0008ddd5 	.word	0x0008ddd5
   8d320:	0008ddd5 	.word	0x0008ddd5
   8d324:	0008ddd5 	.word	0x0008ddd5
   8d328:	0008ddd5 	.word	0x0008ddd5
   8d32c:	0008ddd5 	.word	0x0008ddd5
   8d330:	0008ddd5 	.word	0x0008ddd5
   8d334:	0008ddd5 	.word	0x0008ddd5
   8d338:	0008ddd5 	.word	0x0008ddd5
   8d33c:	0008ddd5 	.word	0x0008ddd5
   8d340:	0008d421 	.word	0x0008d421
   8d344:	0008d421 	.word	0x0008d421
   8d348:	0008d421 	.word	0x0008d421
   8d34c:	0008ddd5 	.word	0x0008ddd5
   8d350:	0008ddd5 	.word	0x0008ddd5
   8d354:	0008ddd5 	.word	0x0008ddd5
   8d358:	0008d421 	.word	0x0008d421
   8d35c:	0008d421 	.word	0x0008d421
   8d360:	0008ddd5 	.word	0x0008ddd5
   8d364:	0008ddd5 	.word	0x0008ddd5
   8d368:	0008ddd5 	.word	0x0008ddd5
   8d36c:	0008ddd5 	.word	0x0008ddd5
   8d370:	0008ddd5 	.word	0x0008ddd5
   8d374:	0008ddd5 	.word	0x0008ddd5
   8d378:	0008ddd5 	.word	0x0008ddd5
   8d37c:	0008ddd5 	.word	0x0008ddd5
   8d380:	0008ddd5 	.word	0x0008ddd5
   8d384:	0008d421 	.word	0x0008d421
   8d388:	0008ddd5 	.word	0x0008ddd5
   8d38c:	0008d421 	.word	0x0008d421
   8d390:	0008d421 	.word	0x0008d421
   8d394:	0008d421 	.word	0x0008d421
   8d398:	0008d421 	.word	0x0008d421
   8d39c:	0008ddd5 	.word	0x0008ddd5
   8d3a0:	0008ddd5 	.word	0x0008ddd5
   8d3a4:	0008ddd5 	.word	0x0008ddd5
   8d3a8:	0008ddd5 	.word	0x0008ddd5
   8d3ac:	0008ddd5 	.word	0x0008ddd5
   8d3b0:	0008ddd5 	.word	0x0008ddd5
   8d3b4:	0008ddd5 	.word	0x0008ddd5
   8d3b8:	0008ddd5 	.word	0x0008ddd5
   8d3bc:	0008ddd5 	.word	0x0008ddd5
   8d3c0:	0008ddd5 	.word	0x0008ddd5
   8d3c4:	0008ddd5 	.word	0x0008ddd5
   8d3c8:	0008ddd5 	.word	0x0008ddd5
   8d3cc:	0008ddd5 	.word	0x0008ddd5
   8d3d0:	0008ddd5 	.word	0x0008ddd5
   8d3d4:	0008ddd5 	.word	0x0008ddd5
   8d3d8:	0008ddd5 	.word	0x0008ddd5
   8d3dc:	0008ddd5 	.word	0x0008ddd5
   8d3e0:	0008ddd5 	.word	0x0008ddd5
   8d3e4:	0008ddd5 	.word	0x0008ddd5
   8d3e8:	0008ddd5 	.word	0x0008ddd5
   8d3ec:	0008ddd5 	.word	0x0008ddd5
   8d3f0:	0008ddd5 	.word	0x0008ddd5
   8d3f4:	0008ddd5 	.word	0x0008ddd5
   8d3f8:	0008ddd5 	.word	0x0008ddd5
   8d3fc:	0008ddd5 	.word	0x0008ddd5
   8d400:	0008ddd5 	.word	0x0008ddd5
   8d404:	0008d411 	.word	0x0008d411
   8d408:	0008d47f 	.word	0x0008d47f
   8d40c:	0008d441 	.word	0x0008d441
					
					case EVT_CONSOLE_COMMAND_ISOUF_START:
							
							//Cl_MacState = MAC_ISOUF;
							Cl_MacRetval = cl_isouf_controller(Cl_MacEvent);
   8d410:	4b22      	ldr	r3, [pc, #136]	; (8d49c <main+0x1804>)
   8d412:	781b      	ldrb	r3, [r3, #0]
   8d414:	4618      	mov	r0, r3
   8d416:	4b28      	ldr	r3, [pc, #160]	; (8d4b8 <main+0x1820>)
   8d418:	4798      	blx	r3
   8d41a:	4603      	mov	r3, r0
   8d41c:	73fb      	strb	r3, [r7, #15]
							
							
							break;
   8d41e:	e0ce      	b.n	8d5be <main+0x1926>
						case EVT_ALERT_TRIGGERED:
						case EVT_CONSOLE_COMMAND_BYPASS_ON:
						case EVT_CONSOLE_COMMAND_BYPASS_OFF:
						//case EVT_CONSOLE_COMMAND_GET_DATA:
						//case EVT_CONSOLE_COMMAND_SET_DATA:
						Cl_MacRetval = cl_isouf_controller(Cl_MacEvent);
   8d420:	4b1e      	ldr	r3, [pc, #120]	; (8d49c <main+0x1804>)
   8d422:	781b      	ldrb	r3, [r3, #0]
   8d424:	4618      	mov	r0, r3
   8d426:	4b24      	ldr	r3, [pc, #144]	; (8d4b8 <main+0x1820>)
   8d428:	4798      	blx	r3
   8d42a:	4603      	mov	r3, r0
   8d42c:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8d42e:	7bfb      	ldrb	r3, [r7, #15]
   8d430:	2b00      	cmp	r3, #0
   8d432:	d001      	beq.n	8d438 <main+0x17a0>
   8d434:	4b1b      	ldr	r3, [pc, #108]	; (8d4a4 <main+0x180c>)
   8d436:	4798      	blx	r3
						if(Cl_MacRetval != CL_OK)
						{
							// handle error
						}
						
						Cl_MacEvent = EVT_NULL;
   8d438:	4b18      	ldr	r3, [pc, #96]	; (8d49c <main+0x1804>)
   8d43a:	2200      	movs	r2, #0
   8d43c:	701a      	strb	r2, [r3, #0]
						break;
   8d43e:	e0be      	b.n	8d5be <main+0x1926>
						
						case MACREQ_ISOUF_COMPLETED:
						
						Cl_MacRetval = cl_isouf_controller(Cl_MacEvent);
   8d440:	4b16      	ldr	r3, [pc, #88]	; (8d49c <main+0x1804>)
   8d442:	781b      	ldrb	r3, [r3, #0]
   8d444:	4618      	mov	r0, r3
   8d446:	4b1c      	ldr	r3, [pc, #112]	; (8d4b8 <main+0x1820>)
   8d448:	4798      	blx	r3
   8d44a:	4603      	mov	r3, r0
   8d44c:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8d44e:	7bfb      	ldrb	r3, [r7, #15]
   8d450:	2b00      	cmp	r3, #0
   8d452:	d001      	beq.n	8d458 <main+0x17c0>
   8d454:	4b13      	ldr	r3, [pc, #76]	; (8d4a4 <main+0x180c>)
   8d456:	4798      	blx	r3
						if( Cl_MacRetval == CL_OK)
   8d458:	7bfb      	ldrb	r3, [r7, #15]
   8d45a:	2b00      	cmp	r3, #0
   8d45c:	d10b      	bne.n	8d476 <main+0x17de>
						{
							
						//	Cl_MacRetval = Cl_rinse_init();
						//	Cl_MacRetval = Cl_stby_init();
						//	Cl_MacRetval = Cl_dprep_init();
							Cl_MacRetval =Cl_isouf_init();
   8d45e:	4b17      	ldr	r3, [pc, #92]	; (8d4bc <main+0x1824>)
   8d460:	4798      	blx	r3
   8d462:	4603      	mov	r3, r0
   8d464:	73fb      	strb	r3, [r7, #15]
							
							Cl_MacState = MAC_POST_ISOUF_STANDBY;
   8d466:	4b13      	ldr	r3, [pc, #76]	; (8d4b4 <main+0x181c>)
   8d468:	2215      	movs	r2, #21
   8d46a:	701a      	strb	r2, [r3, #0]
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)Cl_MacState,1);
							ASSERT_ERROR(Cl_MacRetval);
   8d46c:	7bfb      	ldrb	r3, [r7, #15]
   8d46e:	2b00      	cmp	r3, #0
   8d470:	d001      	beq.n	8d476 <main+0x17de>
   8d472:	4b0c      	ldr	r3, [pc, #48]	; (8d4a4 <main+0x180c>)
   8d474:	4798      	blx	r3
						}
						else
						{
							//handle error
						}
						Cl_MacEvent = EVT_NULL;
   8d476:	4b09      	ldr	r3, [pc, #36]	; (8d49c <main+0x1804>)
   8d478:	2200      	movs	r2, #0
   8d47a:	701a      	strb	r2, [r3, #0]
						break;
   8d47c:	e09f      	b.n	8d5be <main+0x1926>
					
						case EVT_CONSOLE_COMMAND_ISOUF_STOP:
						Cl_MacRetval = cl_isouf_controller(Cl_MacEvent);
   8d47e:	4b07      	ldr	r3, [pc, #28]	; (8d49c <main+0x1804>)
   8d480:	781b      	ldrb	r3, [r3, #0]
   8d482:	4618      	mov	r0, r3
   8d484:	4b0c      	ldr	r3, [pc, #48]	; (8d4b8 <main+0x1820>)
   8d486:	4798      	blx	r3
   8d488:	4603      	mov	r3, r0
   8d48a:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8d48c:	7bfb      	ldrb	r3, [r7, #15]
   8d48e:	2b00      	cmp	r3, #0
   8d490:	d002      	beq.n	8d498 <main+0x1800>
   8d492:	4b04      	ldr	r3, [pc, #16]	; (8d4a4 <main+0x180c>)
   8d494:	4798      	blx	r3
						break;
   8d496:	e092      	b.n	8d5be <main+0x1926>
   8d498:	e091      	b.n	8d5be <main+0x1926>
   8d49a:	bf00      	nop
   8d49c:	200719e6 	.word	0x200719e6
   8d4a0:	000a4e99 	.word	0x000a4e99
   8d4a4:	00088fc1 	.word	0x00088fc1
   8d4a8:	000a2641 	.word	0x000a2641
   8d4ac:	0009e4c9 	.word	0x0009e4c9
   8d4b0:	00085581 	.word	0x00085581
   8d4b4:	20070584 	.word	0x20070584
   8d4b8:	0009443d 	.word	0x0009443d
   8d4bc:	00095d81 	.word	0x00095d81
						
						case EVT_CONSOLE_COMMAND_DIALYSIS_START:
						Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8d4c0:	4b9e      	ldr	r3, [pc, #632]	; (8d73c <main+0x1aa4>)
   8d4c2:	781b      	ldrb	r3, [r3, #0]
   8d4c4:	4618      	mov	r0, r3
   8d4c6:	4b9e      	ldr	r3, [pc, #632]	; (8d740 <main+0x1aa8>)
   8d4c8:	4798      	blx	r3
   8d4ca:	4603      	mov	r3, r0
   8d4cc:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8d4ce:	7bfb      	ldrb	r3, [r7, #15]
   8d4d0:	2b00      	cmp	r3, #0
   8d4d2:	d001      	beq.n	8d4d8 <main+0x1840>
   8d4d4:	4b9b      	ldr	r3, [pc, #620]	; (8d744 <main+0x1aac>)
   8d4d6:	4798      	blx	r3
						if((Cl_MacRetval == CL_OK)||(Cl_MacRetval == CL_REJECTED))
   8d4d8:	7bfb      	ldrb	r3, [r7, #15]
   8d4da:	2b00      	cmp	r3, #0
   8d4dc:	d002      	beq.n	8d4e4 <main+0x184c>
   8d4de:	7bfb      	ldrb	r3, [r7, #15]
   8d4e0:	2b03      	cmp	r3, #3
   8d4e2:	d10b      	bne.n	8d4fc <main+0x1864>
						{
							Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8d4e4:	4b95      	ldr	r3, [pc, #596]	; (8d73c <main+0x1aa4>)
   8d4e6:	781b      	ldrb	r3, [r3, #0]
   8d4e8:	4618      	mov	r0, r3
   8d4ea:	4b97      	ldr	r3, [pc, #604]	; (8d748 <main+0x1ab0>)
   8d4ec:	4798      	blx	r3
   8d4ee:	4603      	mov	r3, r0
   8d4f0:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8d4f2:	7bfb      	ldrb	r3, [r7, #15]
   8d4f4:	2b00      	cmp	r3, #0
   8d4f6:	d001      	beq.n	8d4fc <main+0x1864>
   8d4f8:	4b92      	ldr	r3, [pc, #584]	; (8d744 <main+0x1aac>)
   8d4fa:	4798      	blx	r3
						}
						else
						{
							//handle error
						}
						if((Cl_MacRetval == CL_OK)||(Cl_MacRetval == CL_REJECTED))
   8d4fc:	7bfb      	ldrb	r3, [r7, #15]
   8d4fe:	2b00      	cmp	r3, #0
   8d500:	d002      	beq.n	8d508 <main+0x1870>
   8d502:	7bfb      	ldrb	r3, [r7, #15]
   8d504:	2b03      	cmp	r3, #3
   8d506:	d10b      	bne.n	8d520 <main+0x1888>
						{
							Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8d508:	4b8c      	ldr	r3, [pc, #560]	; (8d73c <main+0x1aa4>)
   8d50a:	781b      	ldrb	r3, [r3, #0]
   8d50c:	4618      	mov	r0, r3
   8d50e:	4b8f      	ldr	r3, [pc, #572]	; (8d74c <main+0x1ab4>)
   8d510:	4798      	blx	r3
   8d512:	4603      	mov	r3, r0
   8d514:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8d516:	7bfb      	ldrb	r3, [r7, #15]
   8d518:	2b00      	cmp	r3, #0
   8d51a:	d001      	beq.n	8d520 <main+0x1888>
   8d51c:	4b89      	ldr	r3, [pc, #548]	; (8d744 <main+0x1aac>)
   8d51e:	4798      	blx	r3
						}
						else
						{
							//handle error
						}
						if((Cl_MacRetval == CL_OK)||(Cl_MacRetval == CL_REJECTED))
   8d520:	7bfb      	ldrb	r3, [r7, #15]
   8d522:	2b00      	cmp	r3, #0
   8d524:	d002      	beq.n	8d52c <main+0x1894>
   8d526:	7bfb      	ldrb	r3, [r7, #15]
   8d528:	2b03      	cmp	r3, #3
   8d52a:	d10b      	bne.n	8d544 <main+0x18ac>
						{
							Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
   8d52c:	4b83      	ldr	r3, [pc, #524]	; (8d73c <main+0x1aa4>)
   8d52e:	781b      	ldrb	r3, [r3, #0]
   8d530:	4618      	mov	r0, r3
   8d532:	4b87      	ldr	r3, [pc, #540]	; (8d750 <main+0x1ab8>)
   8d534:	4798      	blx	r3
   8d536:	4603      	mov	r3, r0
   8d538:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8d53a:	7bfb      	ldrb	r3, [r7, #15]
   8d53c:	2b00      	cmp	r3, #0
   8d53e:	d001      	beq.n	8d544 <main+0x18ac>
   8d540:	4b80      	ldr	r3, [pc, #512]	; (8d744 <main+0x1aac>)
   8d542:	4798      	blx	r3
						else
						{
							//handle error
						}

						if(Cl_MacRetval == CL_OK)
   8d544:	7bfb      	ldrb	r3, [r7, #15]
   8d546:	2b00      	cmp	r3, #0
   8d548:	d108      	bne.n	8d55c <main+0x18c4>
						{
							Cl_MacState = MAC_DIALYSIS;
   8d54a:	4b82      	ldr	r3, [pc, #520]	; (8d754 <main+0x1abc>)
   8d54c:	220f      	movs	r2, #15
   8d54e:	701a      	strb	r2, [r3, #0]
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_DIALYSIS,1);
							ASSERT_ERROR(Cl_MacRetval);
   8d550:	7bfb      	ldrb	r3, [r7, #15]
   8d552:	2b00      	cmp	r3, #0
   8d554:	d002      	beq.n	8d55c <main+0x18c4>
   8d556:	4b7b      	ldr	r3, [pc, #492]	; (8d744 <main+0x1aac>)
   8d558:	4798      	blx	r3
						}
						break;
   8d55a:	e030      	b.n	8d5be <main+0x1926>
   8d55c:	e02f      	b.n	8d5be <main+0x1926>
						
						case EVT_CONSOLE_COMMAND_RINSE_START:
						loopcountinsec = 0;
   8d55e:	4b7e      	ldr	r3, [pc, #504]	; (8d758 <main+0x1ac0>)
   8d560:	2200      	movs	r2, #0
   8d562:	601a      	str	r2, [r3, #0]
						Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8d564:	4b75      	ldr	r3, [pc, #468]	; (8d73c <main+0x1aa4>)
   8d566:	781b      	ldrb	r3, [r3, #0]
   8d568:	4618      	mov	r0, r3
   8d56a:	4b75      	ldr	r3, [pc, #468]	; (8d740 <main+0x1aa8>)
   8d56c:	4798      	blx	r3
   8d56e:	4603      	mov	r3, r0
   8d570:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8d572:	7bfb      	ldrb	r3, [r7, #15]
   8d574:	2b00      	cmp	r3, #0
   8d576:	d001      	beq.n	8d57c <main+0x18e4>
   8d578:	4b72      	ldr	r3, [pc, #456]	; (8d744 <main+0x1aac>)
   8d57a:	4798      	blx	r3

						if(Cl_MacRetval == CL_OK)
   8d57c:	7bfb      	ldrb	r3, [r7, #15]
   8d57e:	2b00      	cmp	r3, #0
   8d580:	d10e      	bne.n	8d5a0 <main+0x1908>
						{
							
							Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8d582:	4b6e      	ldr	r3, [pc, #440]	; (8d73c <main+0x1aa4>)
   8d584:	781b      	ldrb	r3, [r3, #0]
   8d586:	4618      	mov	r0, r3
   8d588:	4b6f      	ldr	r3, [pc, #444]	; (8d748 <main+0x1ab0>)
   8d58a:	4798      	blx	r3
   8d58c:	4603      	mov	r3, r0
   8d58e:	73fb      	strb	r3, [r7, #15]
							if(Cl_MacRetval != CL_REJECTED)
   8d590:	7bfb      	ldrb	r3, [r7, #15]
   8d592:	2b03      	cmp	r3, #3
   8d594:	d004      	beq.n	8d5a0 <main+0x1908>
							{
								ASSERT_ERROR(Cl_MacRetval);
   8d596:	7bfb      	ldrb	r3, [r7, #15]
   8d598:	2b00      	cmp	r3, #0
   8d59a:	d001      	beq.n	8d5a0 <main+0x1908>
   8d59c:	4b69      	ldr	r3, [pc, #420]	; (8d744 <main+0x1aac>)
   8d59e:	4798      	blx	r3
							}
							
						}
						if( Cl_MacRetval == CL_OK)
   8d5a0:	7bfb      	ldrb	r3, [r7, #15]
   8d5a2:	2b00      	cmp	r3, #0
   8d5a4:	d107      	bne.n	8d5b6 <main+0x191e>
						{
							Cl_MacState = MAC_RINSE;
   8d5a6:	4b6b      	ldr	r3, [pc, #428]	; (8d754 <main+0x1abc>)
   8d5a8:	2207      	movs	r2, #7
   8d5aa:	701a      	strb	r2, [r3, #0]
						//	Cl_MacRetval = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_RINSE,1);
							ASSERT_ERROR(Cl_MacRetval);
   8d5ac:	7bfb      	ldrb	r3, [r7, #15]
   8d5ae:	2b00      	cmp	r3, #0
   8d5b0:	d001      	beq.n	8d5b6 <main+0x191e>
   8d5b2:	4b64      	ldr	r3, [pc, #400]	; (8d744 <main+0x1aac>)
   8d5b4:	4798      	blx	r3
						}
						if( Cl_MacRetval != CL_OK)
						{
							// Handle error
						}
						Cl_MacEvent = EVT_NULL;
   8d5b6:	4b61      	ldr	r3, [pc, #388]	; (8d73c <main+0x1aa4>)
   8d5b8:	2200      	movs	r2, #0
   8d5ba:	701a      	strb	r2, [r3, #0]
						break;
   8d5bc:	bf00      	nop

						
					}
					
					break;
   8d5be:	f000 bc09 	b.w	8ddd4 <main+0x213c>
					
					case MAC_POST_ISOUF_STANDBY:
					
					switch(Cl_MacEvent){
   8d5c2:	4b5e      	ldr	r3, [pc, #376]	; (8d73c <main+0x1aa4>)
   8d5c4:	781b      	ldrb	r3, [r3, #0]
   8d5c6:	3b07      	subs	r3, #7
   8d5c8:	2b51      	cmp	r3, #81	; 0x51
   8d5ca:	f200 813e 	bhi.w	8d84a <main+0x1bb2>
   8d5ce:	a201      	add	r2, pc, #4	; (adr r2, 8d5d4 <main+0x193c>)
   8d5d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8d5d4:	0008d7ff 	.word	0x0008d7ff
   8d5d8:	0008d84b 	.word	0x0008d84b
   8d5dc:	0008d84b 	.word	0x0008d84b
   8d5e0:	0008d71d 	.word	0x0008d71d
   8d5e4:	0008d71d 	.word	0x0008d71d
   8d5e8:	0008d71d 	.word	0x0008d71d
   8d5ec:	0008d84b 	.word	0x0008d84b
   8d5f0:	0008d84b 	.word	0x0008d84b
   8d5f4:	0008d84b 	.word	0x0008d84b
   8d5f8:	0008d84b 	.word	0x0008d84b
   8d5fc:	0008d84b 	.word	0x0008d84b
   8d600:	0008d84b 	.word	0x0008d84b
   8d604:	0008d84b 	.word	0x0008d84b
   8d608:	0008d84b 	.word	0x0008d84b
   8d60c:	0008d71d 	.word	0x0008d71d
   8d610:	0008d84b 	.word	0x0008d84b
   8d614:	0008d761 	.word	0x0008d761
   8d618:	0008d84b 	.word	0x0008d84b
   8d61c:	0008d84b 	.word	0x0008d84b
   8d620:	0008d84b 	.word	0x0008d84b
   8d624:	0008d84b 	.word	0x0008d84b
   8d628:	0008d84b 	.word	0x0008d84b
   8d62c:	0008d84b 	.word	0x0008d84b
   8d630:	0008d84b 	.word	0x0008d84b
   8d634:	0008d84b 	.word	0x0008d84b
   8d638:	0008d84b 	.word	0x0008d84b
   8d63c:	0008d84b 	.word	0x0008d84b
   8d640:	0008d84b 	.word	0x0008d84b
   8d644:	0008d84b 	.word	0x0008d84b
   8d648:	0008d84b 	.word	0x0008d84b
   8d64c:	0008d84b 	.word	0x0008d84b
   8d650:	0008d84b 	.word	0x0008d84b
   8d654:	0008d71d 	.word	0x0008d71d
   8d658:	0008d71d 	.word	0x0008d71d
   8d65c:	0008d71d 	.word	0x0008d71d
   8d660:	0008d84b 	.word	0x0008d84b
   8d664:	0008d84b 	.word	0x0008d84b
   8d668:	0008d84b 	.word	0x0008d84b
   8d66c:	0008d71d 	.word	0x0008d71d
   8d670:	0008d71d 	.word	0x0008d71d
   8d674:	0008d84b 	.word	0x0008d84b
   8d678:	0008d84b 	.word	0x0008d84b
   8d67c:	0008d84b 	.word	0x0008d84b
   8d680:	0008d84b 	.word	0x0008d84b
   8d684:	0008d84b 	.word	0x0008d84b
   8d688:	0008d84b 	.word	0x0008d84b
   8d68c:	0008d84b 	.word	0x0008d84b
   8d690:	0008d84b 	.word	0x0008d84b
   8d694:	0008d84b 	.word	0x0008d84b
   8d698:	0008d71d 	.word	0x0008d71d
   8d69c:	0008d84b 	.word	0x0008d84b
   8d6a0:	0008d71d 	.word	0x0008d71d
   8d6a4:	0008d71d 	.word	0x0008d71d
   8d6a8:	0008d71d 	.word	0x0008d71d
   8d6ac:	0008d71d 	.word	0x0008d71d
   8d6b0:	0008d84b 	.word	0x0008d84b
   8d6b4:	0008d84b 	.word	0x0008d84b
   8d6b8:	0008d84b 	.word	0x0008d84b
   8d6bc:	0008d84b 	.word	0x0008d84b
   8d6c0:	0008d84b 	.word	0x0008d84b
   8d6c4:	0008d84b 	.word	0x0008d84b
   8d6c8:	0008d84b 	.word	0x0008d84b
   8d6cc:	0008d84b 	.word	0x0008d84b
   8d6d0:	0008d84b 	.word	0x0008d84b
   8d6d4:	0008d84b 	.word	0x0008d84b
   8d6d8:	0008d84b 	.word	0x0008d84b
   8d6dc:	0008d84b 	.word	0x0008d84b
   8d6e0:	0008d84b 	.word	0x0008d84b
   8d6e4:	0008d84b 	.word	0x0008d84b
   8d6e8:	0008d84b 	.word	0x0008d84b
   8d6ec:	0008d84b 	.word	0x0008d84b
   8d6f0:	0008d84b 	.word	0x0008d84b
   8d6f4:	0008d84b 	.word	0x0008d84b
   8d6f8:	0008d84b 	.word	0x0008d84b
   8d6fc:	0008d84b 	.word	0x0008d84b
   8d700:	0008d84b 	.word	0x0008d84b
   8d704:	0008d84b 	.word	0x0008d84b
   8d708:	0008d84b 	.word	0x0008d84b
   8d70c:	0008d84b 	.word	0x0008d84b
   8d710:	0008d84b 	.word	0x0008d84b
   8d714:	0008d84b 	.word	0x0008d84b
   8d718:	0008d835 	.word	0x0008d835
						case EVT_TICK_HOUR:
						case EVT_ALARM_TRIGGERED:
						case EVT_ALERT_TRIGGERED:
						//case EVT_CONSOLE_COMMAND_GET_DATA:
						//case EVT_CONSOLE_COMMAND_SET_DATA:
						Cl_MacRetval = cl_isouf_controller(Cl_MacEvent);
   8d71c:	4b07      	ldr	r3, [pc, #28]	; (8d73c <main+0x1aa4>)
   8d71e:	781b      	ldrb	r3, [r3, #0]
   8d720:	4618      	mov	r0, r3
   8d722:	4b0e      	ldr	r3, [pc, #56]	; (8d75c <main+0x1ac4>)
   8d724:	4798      	blx	r3
   8d726:	4603      	mov	r3, r0
   8d728:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8d72a:	7bfb      	ldrb	r3, [r7, #15]
   8d72c:	2b00      	cmp	r3, #0
   8d72e:	d001      	beq.n	8d734 <main+0x1a9c>
   8d730:	4b04      	ldr	r3, [pc, #16]	; (8d744 <main+0x1aac>)
   8d732:	4798      	blx	r3
						if(Cl_MacRetval != CL_OK)
						{
							// handle error
						}
						
						Cl_MacEvent = EVT_NULL;
   8d734:	4b01      	ldr	r3, [pc, #4]	; (8d73c <main+0x1aa4>)
   8d736:	2200      	movs	r2, #0
   8d738:	701a      	strb	r2, [r3, #0]
						break;
   8d73a:	e087      	b.n	8d84c <main+0x1bb4>
   8d73c:	200719e6 	.word	0x200719e6
   8d740:	000a4e99 	.word	0x000a4e99
   8d744:	00088fc1 	.word	0x00088fc1
   8d748:	000a2641 	.word	0x000a2641
   8d74c:	0009e4c9 	.word	0x0009e4c9
   8d750:	00085581 	.word	0x00085581
   8d754:	20070584 	.word	0x20070584
   8d758:	200719ec 	.word	0x200719ec
   8d75c:	0009443d 	.word	0x0009443d
						
						case EVT_CONSOLE_COMMAND_DIALYSIS_START:
						Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8d760:	4bac      	ldr	r3, [pc, #688]	; (8da14 <main+0x1d7c>)
   8d762:	781b      	ldrb	r3, [r3, #0]
   8d764:	4618      	mov	r0, r3
   8d766:	4bac      	ldr	r3, [pc, #688]	; (8da18 <main+0x1d80>)
   8d768:	4798      	blx	r3
   8d76a:	4603      	mov	r3, r0
   8d76c:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8d76e:	7bfb      	ldrb	r3, [r7, #15]
   8d770:	2b00      	cmp	r3, #0
   8d772:	d001      	beq.n	8d778 <main+0x1ae0>
   8d774:	4ba9      	ldr	r3, [pc, #676]	; (8da1c <main+0x1d84>)
   8d776:	4798      	blx	r3
						if((Cl_MacRetval == CL_OK)||(Cl_MacRetval == CL_REJECTED))
   8d778:	7bfb      	ldrb	r3, [r7, #15]
   8d77a:	2b00      	cmp	r3, #0
   8d77c:	d002      	beq.n	8d784 <main+0x1aec>
   8d77e:	7bfb      	ldrb	r3, [r7, #15]
   8d780:	2b03      	cmp	r3, #3
   8d782:	d10b      	bne.n	8d79c <main+0x1b04>
						{
							Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8d784:	4ba3      	ldr	r3, [pc, #652]	; (8da14 <main+0x1d7c>)
   8d786:	781b      	ldrb	r3, [r3, #0]
   8d788:	4618      	mov	r0, r3
   8d78a:	4ba5      	ldr	r3, [pc, #660]	; (8da20 <main+0x1d88>)
   8d78c:	4798      	blx	r3
   8d78e:	4603      	mov	r3, r0
   8d790:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8d792:	7bfb      	ldrb	r3, [r7, #15]
   8d794:	2b00      	cmp	r3, #0
   8d796:	d001      	beq.n	8d79c <main+0x1b04>
   8d798:	4ba0      	ldr	r3, [pc, #640]	; (8da1c <main+0x1d84>)
   8d79a:	4798      	blx	r3
						}
						else
						{
							//handle error
						}
						if((Cl_MacRetval == CL_OK)||(Cl_MacRetval == CL_REJECTED))
   8d79c:	7bfb      	ldrb	r3, [r7, #15]
   8d79e:	2b00      	cmp	r3, #0
   8d7a0:	d002      	beq.n	8d7a8 <main+0x1b10>
   8d7a2:	7bfb      	ldrb	r3, [r7, #15]
   8d7a4:	2b03      	cmp	r3, #3
   8d7a6:	d10b      	bne.n	8d7c0 <main+0x1b28>
						{
							Cl_MacRetval = Cl_dprep_controller(Cl_MacEvent);
   8d7a8:	4b9a      	ldr	r3, [pc, #616]	; (8da14 <main+0x1d7c>)
   8d7aa:	781b      	ldrb	r3, [r3, #0]
   8d7ac:	4618      	mov	r0, r3
   8d7ae:	4b9d      	ldr	r3, [pc, #628]	; (8da24 <main+0x1d8c>)
   8d7b0:	4798      	blx	r3
   8d7b2:	4603      	mov	r3, r0
   8d7b4:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8d7b6:	7bfb      	ldrb	r3, [r7, #15]
   8d7b8:	2b00      	cmp	r3, #0
   8d7ba:	d001      	beq.n	8d7c0 <main+0x1b28>
   8d7bc:	4b97      	ldr	r3, [pc, #604]	; (8da1c <main+0x1d84>)
   8d7be:	4798      	blx	r3
						}
						else
						{
							//handle error
						}
						if((Cl_MacRetval == CL_OK)||(Cl_MacRetval == CL_REJECTED))
   8d7c0:	7bfb      	ldrb	r3, [r7, #15]
   8d7c2:	2b00      	cmp	r3, #0
   8d7c4:	d002      	beq.n	8d7cc <main+0x1b34>
   8d7c6:	7bfb      	ldrb	r3, [r7, #15]
   8d7c8:	2b03      	cmp	r3, #3
   8d7ca:	d10b      	bne.n	8d7e4 <main+0x1b4c>
						{
							Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
   8d7cc:	4b91      	ldr	r3, [pc, #580]	; (8da14 <main+0x1d7c>)
   8d7ce:	781b      	ldrb	r3, [r3, #0]
   8d7d0:	4618      	mov	r0, r3
   8d7d2:	4b95      	ldr	r3, [pc, #596]	; (8da28 <main+0x1d90>)
   8d7d4:	4798      	blx	r3
   8d7d6:	4603      	mov	r3, r0
   8d7d8:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8d7da:	7bfb      	ldrb	r3, [r7, #15]
   8d7dc:	2b00      	cmp	r3, #0
   8d7de:	d001      	beq.n	8d7e4 <main+0x1b4c>
   8d7e0:	4b8e      	ldr	r3, [pc, #568]	; (8da1c <main+0x1d84>)
   8d7e2:	4798      	blx	r3
						else
						{
							//handle error
						}

						if(Cl_MacRetval == CL_OK)
   8d7e4:	7bfb      	ldrb	r3, [r7, #15]
   8d7e6:	2b00      	cmp	r3, #0
   8d7e8:	d108      	bne.n	8d7fc <main+0x1b64>
						{
							Cl_MacState = MAC_DIALYSIS;
   8d7ea:	4b90      	ldr	r3, [pc, #576]	; (8da2c <main+0x1d94>)
   8d7ec:	220f      	movs	r2, #15
   8d7ee:	701a      	strb	r2, [r3, #0]
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_DIALYSIS,1);
							ASSERT_ERROR(Cl_MacRetval);
   8d7f0:	7bfb      	ldrb	r3, [r7, #15]
   8d7f2:	2b00      	cmp	r3, #0
   8d7f4:	d002      	beq.n	8d7fc <main+0x1b64>
   8d7f6:	4b89      	ldr	r3, [pc, #548]	; (8da1c <main+0x1d84>)
   8d7f8:	4798      	blx	r3
						}
						break;
   8d7fa:	e027      	b.n	8d84c <main+0x1bb4>
   8d7fc:	e026      	b.n	8d84c <main+0x1bb4>
						case EVT_CONSOLE_COMMAND_RINSE_START:
						//Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
						//ASSERT_ERROR(Cl_MacRetval);
						//if(Cl_MacRetval == CL_OK)
						//{
							Cl_rinse_init();
   8d7fe:	4b8c      	ldr	r3, [pc, #560]	; (8da30 <main+0x1d98>)
   8d800:	4798      	blx	r3
							Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8d802:	4b84      	ldr	r3, [pc, #528]	; (8da14 <main+0x1d7c>)
   8d804:	781b      	ldrb	r3, [r3, #0]
   8d806:	4618      	mov	r0, r3
   8d808:	4b85      	ldr	r3, [pc, #532]	; (8da20 <main+0x1d88>)
   8d80a:	4798      	blx	r3
   8d80c:	4603      	mov	r3, r0
   8d80e:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8d810:	7bfb      	ldrb	r3, [r7, #15]
   8d812:	2b00      	cmp	r3, #0
   8d814:	d001      	beq.n	8d81a <main+0x1b82>
   8d816:	4b81      	ldr	r3, [pc, #516]	; (8da1c <main+0x1d84>)
   8d818:	4798      	blx	r3
						//else
						//{
							//handle error
						//}
						
						if( Cl_MacRetval == CL_OK)
   8d81a:	7bfb      	ldrb	r3, [r7, #15]
   8d81c:	2b00      	cmp	r3, #0
   8d81e:	d108      	bne.n	8d832 <main+0x1b9a>
						{
							Cl_MacState = MAC_RINSE;
   8d820:	4b82      	ldr	r3, [pc, #520]	; (8da2c <main+0x1d94>)
   8d822:	2207      	movs	r2, #7
   8d824:	701a      	strb	r2, [r3, #0]
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_RINSE,1);
							ASSERT_ERROR(Cl_MacRetval);
   8d826:	7bfb      	ldrb	r3, [r7, #15]
   8d828:	2b00      	cmp	r3, #0
   8d82a:	d002      	beq.n	8d832 <main+0x1b9a>
   8d82c:	4b7b      	ldr	r3, [pc, #492]	; (8da1c <main+0x1d84>)
   8d82e:	4798      	blx	r3
							//Cl_MacState = MAC_POST_RINSE_STANDBY;
						}else
						{
							//handle error
						}
						break;
   8d830:	e00c      	b.n	8d84c <main+0x1bb4>
   8d832:	e00b      	b.n	8d84c <main+0x1bb4>
						
						case EVT_CONSOLE_COMMAND_ISOUF_START:
						
						Cl_MacState = MAC_ISOUF;
   8d834:	4b7d      	ldr	r3, [pc, #500]	; (8da2c <main+0x1d94>)
   8d836:	2214      	movs	r2, #20
   8d838:	701a      	strb	r2, [r3, #0]
						Cl_MacRetval = cl_isouf_controller(Cl_MacEvent);
   8d83a:	4b76      	ldr	r3, [pc, #472]	; (8da14 <main+0x1d7c>)
   8d83c:	781b      	ldrb	r3, [r3, #0]
   8d83e:	4618      	mov	r0, r3
   8d840:	4b7c      	ldr	r3, [pc, #496]	; (8da34 <main+0x1d9c>)
   8d842:	4798      	blx	r3
   8d844:	4603      	mov	r3, r0
   8d846:	73fb      	strb	r3, [r7, #15]
						
						
						break;
   8d848:	e000      	b.n	8d84c <main+0x1bb4>
						
						
						default: break;
   8d84a:	bf00      	nop
					}
					break;
   8d84c:	e2c3      	b.n	8ddd6 <main+0x213e>
					
					case MAC_DIALYSIS:
					switch ( Cl_MacEvent )
   8d84e:	4b71      	ldr	r3, [pc, #452]	; (8da14 <main+0x1d7c>)
   8d850:	781b      	ldrb	r3, [r3, #0]
   8d852:	3b07      	subs	r3, #7
   8d854:	2b57      	cmp	r3, #87	; 0x57
   8d856:	f200 813e 	bhi.w	8dad6 <main+0x1e3e>
   8d85a:	a201      	add	r2, pc, #4	; (adr r2, 8d860 <main+0x1bc8>)
   8d85c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8d860:	0008da39 	.word	0x0008da39
   8d864:	0008dad7 	.word	0x0008dad7
   8d868:	0008dad7 	.word	0x0008dad7
   8d86c:	0008d9c1 	.word	0x0008d9c1
   8d870:	0008d9c1 	.word	0x0008d9c1
   8d874:	0008d9c1 	.word	0x0008d9c1
   8d878:	0008dad7 	.word	0x0008dad7
   8d87c:	0008dad7 	.word	0x0008dad7
   8d880:	0008dad7 	.word	0x0008dad7
   8d884:	0008dad7 	.word	0x0008dad7
   8d888:	0008dad7 	.word	0x0008dad7
   8d88c:	0008dad7 	.word	0x0008dad7
   8d890:	0008dad7 	.word	0x0008dad7
   8d894:	0008dad7 	.word	0x0008dad7
   8d898:	0008d9c1 	.word	0x0008d9c1
   8d89c:	0008dad7 	.word	0x0008dad7
   8d8a0:	0008dad7 	.word	0x0008dad7
   8d8a4:	0008d9e1 	.word	0x0008d9e1
   8d8a8:	0008d9c1 	.word	0x0008d9c1
   8d8ac:	0008d9c1 	.word	0x0008d9c1
   8d8b0:	0008d9c1 	.word	0x0008d9c1
   8d8b4:	0008dad7 	.word	0x0008dad7
   8d8b8:	0008dad7 	.word	0x0008dad7
   8d8bc:	0008dad7 	.word	0x0008dad7
   8d8c0:	0008dad7 	.word	0x0008dad7
   8d8c4:	0008dad7 	.word	0x0008dad7
   8d8c8:	0008dad7 	.word	0x0008dad7
   8d8cc:	0008dad7 	.word	0x0008dad7
   8d8d0:	0008dad7 	.word	0x0008dad7
   8d8d4:	0008dad7 	.word	0x0008dad7
   8d8d8:	0008dad7 	.word	0x0008dad7
   8d8dc:	0008dad7 	.word	0x0008dad7
   8d8e0:	0008d9c1 	.word	0x0008d9c1
   8d8e4:	0008d9c1 	.word	0x0008d9c1
   8d8e8:	0008d9c1 	.word	0x0008d9c1
   8d8ec:	0008dad7 	.word	0x0008dad7
   8d8f0:	0008dad7 	.word	0x0008dad7
   8d8f4:	0008dad7 	.word	0x0008dad7
   8d8f8:	0008d9c1 	.word	0x0008d9c1
   8d8fc:	0008d9c1 	.word	0x0008d9c1
   8d900:	0008dad7 	.word	0x0008dad7
   8d904:	0008dad7 	.word	0x0008dad7
   8d908:	0008dad7 	.word	0x0008dad7
   8d90c:	0008dad7 	.word	0x0008dad7
   8d910:	0008dad7 	.word	0x0008dad7
   8d914:	0008dad7 	.word	0x0008dad7
   8d918:	0008dad7 	.word	0x0008dad7
   8d91c:	0008dad7 	.word	0x0008dad7
   8d920:	0008dad7 	.word	0x0008dad7
   8d924:	0008d9c1 	.word	0x0008d9c1
   8d928:	0008dad7 	.word	0x0008dad7
   8d92c:	0008d9c1 	.word	0x0008d9c1
   8d930:	0008d9c1 	.word	0x0008d9c1
   8d934:	0008d9c1 	.word	0x0008d9c1
   8d938:	0008d9c1 	.word	0x0008d9c1
   8d93c:	0008dad7 	.word	0x0008dad7
   8d940:	0008dad7 	.word	0x0008dad7
   8d944:	0008dad7 	.word	0x0008dad7
   8d948:	0008dad7 	.word	0x0008dad7
   8d94c:	0008dad7 	.word	0x0008dad7
   8d950:	0008dad7 	.word	0x0008dad7
   8d954:	0008dad7 	.word	0x0008dad7
   8d958:	0008dad7 	.word	0x0008dad7
   8d95c:	0008dad7 	.word	0x0008dad7
   8d960:	0008dad7 	.word	0x0008dad7
   8d964:	0008dad7 	.word	0x0008dad7
   8d968:	0008dad7 	.word	0x0008dad7
   8d96c:	0008dad7 	.word	0x0008dad7
   8d970:	0008dad7 	.word	0x0008dad7
   8d974:	0008dad7 	.word	0x0008dad7
   8d978:	0008dad7 	.word	0x0008dad7
   8d97c:	0008dad7 	.word	0x0008dad7
   8d980:	0008dad7 	.word	0x0008dad7
   8d984:	0008da89 	.word	0x0008da89
   8d988:	0008dad7 	.word	0x0008dad7
   8d98c:	0008dad7 	.word	0x0008dad7
   8d990:	0008dad7 	.word	0x0008dad7
   8d994:	0008dad7 	.word	0x0008dad7
   8d998:	0008dad7 	.word	0x0008dad7
   8d99c:	0008dad7 	.word	0x0008dad7
   8d9a0:	0008dad7 	.word	0x0008dad7
   8d9a4:	0008dad7 	.word	0x0008dad7
   8d9a8:	0008dad7 	.word	0x0008dad7
   8d9ac:	0008dad7 	.word	0x0008dad7
   8d9b0:	0008dad7 	.word	0x0008dad7
   8d9b4:	0008dad7 	.word	0x0008dad7
   8d9b8:	0008dad7 	.word	0x0008dad7
   8d9bc:	0008d9fd 	.word	0x0008d9fd
						case EVT_CONSOLE_COMMAND_DIALYSIS_PAUSE:
						case EVT_CONSOLE_COMMAND_BYPASS_ON:
						case EVT_CONSOLE_COMMAND_BYPASS_OFF:
					//	case EVT_CONSOLE_COMMAND_GET_DATA:
					//	case EVT_CONSOLE_COMMAND_SET_DATA:
							Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
   8d9c0:	4b14      	ldr	r3, [pc, #80]	; (8da14 <main+0x1d7c>)
   8d9c2:	781b      	ldrb	r3, [r3, #0]
   8d9c4:	4618      	mov	r0, r3
   8d9c6:	4b18      	ldr	r3, [pc, #96]	; (8da28 <main+0x1d90>)
   8d9c8:	4798      	blx	r3
   8d9ca:	4603      	mov	r3, r0
   8d9cc:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8d9ce:	7bfb      	ldrb	r3, [r7, #15]
   8d9d0:	2b00      	cmp	r3, #0
   8d9d2:	d001      	beq.n	8d9d8 <main+0x1d40>
   8d9d4:	4b11      	ldr	r3, [pc, #68]	; (8da1c <main+0x1d84>)
   8d9d6:	4798      	blx	r3
								if(Cl_MacRetval != CL_OK)
								{
									// handle error
								}
							
							Cl_MacEvent = EVT_NULL;
   8d9d8:	4b0e      	ldr	r3, [pc, #56]	; (8da14 <main+0x1d7c>)
   8d9da:	2200      	movs	r2, #0
   8d9dc:	701a      	strb	r2, [r3, #0]
						break;
   8d9de:	e07b      	b.n	8dad8 <main+0x1e40>
// 							{
// 								// handle error
// 							}
// 						break;
						case EVT_CONSOLE_COMMAND_DIALYSIS_STOP:
						Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
   8d9e0:	4b0c      	ldr	r3, [pc, #48]	; (8da14 <main+0x1d7c>)
   8d9e2:	781b      	ldrb	r3, [r3, #0]
   8d9e4:	4618      	mov	r0, r3
   8d9e6:	4b10      	ldr	r3, [pc, #64]	; (8da28 <main+0x1d90>)
   8d9e8:	4798      	blx	r3
   8d9ea:	4603      	mov	r3, r0
   8d9ec:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8d9ee:	7bfb      	ldrb	r3, [r7, #15]
   8d9f0:	2b00      	cmp	r3, #0
   8d9f2:	d002      	beq.n	8d9fa <main+0x1d62>
   8d9f4:	4b09      	ldr	r3, [pc, #36]	; (8da1c <main+0x1d84>)
   8d9f6:	4798      	blx	r3
						break;
   8d9f8:	e06e      	b.n	8dad8 <main+0x1e40>
   8d9fa:	e06d      	b.n	8dad8 <main+0x1e40>
							// handle error
						}
						break;
						#endif
						case MACREQ_POST_DIALYSIS_ISOUF_REQ :
						Cl_MacState = MAC_ISOUF;
   8d9fc:	4b0b      	ldr	r3, [pc, #44]	; (8da2c <main+0x1d94>)
   8d9fe:	2214      	movs	r2, #20
   8da00:	701a      	strb	r2, [r3, #0]
						Cl_MacRetval = cl_isouf_controller(Cl_MacEvent);
   8da02:	4b04      	ldr	r3, [pc, #16]	; (8da14 <main+0x1d7c>)
   8da04:	781b      	ldrb	r3, [r3, #0]
   8da06:	4618      	mov	r0, r3
   8da08:	4b0a      	ldr	r3, [pc, #40]	; (8da34 <main+0x1d9c>)
   8da0a:	4798      	blx	r3
   8da0c:	4603      	mov	r3, r0
   8da0e:	73fb      	strb	r3, [r7, #15]
						
						break;
   8da10:	e062      	b.n	8dad8 <main+0x1e40>
   8da12:	bf00      	nop
   8da14:	200719e6 	.word	0x200719e6
   8da18:	000a4e99 	.word	0x000a4e99
   8da1c:	00088fc1 	.word	0x00088fc1
   8da20:	000a2641 	.word	0x000a2641
   8da24:	0009e4c9 	.word	0x0009e4c9
   8da28:	00085581 	.word	0x00085581
   8da2c:	20070584 	.word	0x20070584
   8da30:	000a3d4d 	.word	0x000a3d4d
   8da34:	0009443d 	.word	0x0009443d
						case EVT_CONSOLE_COMMAND_RINSE_START:
							Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8da38:	4bb6      	ldr	r3, [pc, #728]	; (8dd14 <main+0x207c>)
   8da3a:	781b      	ldrb	r3, [r3, #0]
   8da3c:	4618      	mov	r0, r3
   8da3e:	4bb6      	ldr	r3, [pc, #728]	; (8dd18 <main+0x2080>)
   8da40:	4798      	blx	r3
   8da42:	4603      	mov	r3, r0
   8da44:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8da46:	7bfb      	ldrb	r3, [r7, #15]
   8da48:	2b00      	cmp	r3, #0
   8da4a:	d001      	beq.n	8da50 <main+0x1db8>
   8da4c:	4bb3      	ldr	r3, [pc, #716]	; (8dd1c <main+0x2084>)
   8da4e:	4798      	blx	r3
							if(Cl_MacRetval == CL_OK)
   8da50:	7bfb      	ldrb	r3, [r7, #15]
   8da52:	2b00      	cmp	r3, #0
   8da54:	d10b      	bne.n	8da6e <main+0x1dd6>
							{
								Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8da56:	4baf      	ldr	r3, [pc, #700]	; (8dd14 <main+0x207c>)
   8da58:	781b      	ldrb	r3, [r3, #0]
   8da5a:	4618      	mov	r0, r3
   8da5c:	4bb0      	ldr	r3, [pc, #704]	; (8dd20 <main+0x2088>)
   8da5e:	4798      	blx	r3
   8da60:	4603      	mov	r3, r0
   8da62:	73fb      	strb	r3, [r7, #15]
								ASSERT_ERROR(Cl_MacRetval);
   8da64:	7bfb      	ldrb	r3, [r7, #15]
   8da66:	2b00      	cmp	r3, #0
   8da68:	d001      	beq.n	8da6e <main+0x1dd6>
   8da6a:	4bac      	ldr	r3, [pc, #688]	; (8dd1c <main+0x2084>)
   8da6c:	4798      	blx	r3
							else
							{
								//handle error
							}
							
							if( Cl_MacRetval == CL_OK)
   8da6e:	7bfb      	ldrb	r3, [r7, #15]
   8da70:	2b00      	cmp	r3, #0
   8da72:	d108      	bne.n	8da86 <main+0x1dee>
							{
								Cl_MacState = MAC_RINSE;
   8da74:	4bab      	ldr	r3, [pc, #684]	; (8dd24 <main+0x208c>)
   8da76:	2207      	movs	r2, #7
   8da78:	701a      	strb	r2, [r3, #0]
							//	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_RINSE,1);
								ASSERT_ERROR(Cl_MacRetval);
   8da7a:	7bfb      	ldrb	r3, [r7, #15]
   8da7c:	2b00      	cmp	r3, #0
   8da7e:	d002      	beq.n	8da86 <main+0x1dee>
   8da80:	4ba6      	ldr	r3, [pc, #664]	; (8dd1c <main+0x2084>)
   8da82:	4798      	blx	r3
								//Cl_MacState = MAC_POST_RINSE_STANDBY;
							}else
							{
								//handle error
							}
						break;
   8da84:	e028      	b.n	8dad8 <main+0x1e40>
   8da86:	e027      	b.n	8dad8 <main+0x1e40>
		
						case MACREQ_DIALYSIS_COMPLETED:
						
							Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
   8da88:	4ba2      	ldr	r3, [pc, #648]	; (8dd14 <main+0x207c>)
   8da8a:	781b      	ldrb	r3, [r3, #0]
   8da8c:	4618      	mov	r0, r3
   8da8e:	4ba6      	ldr	r3, [pc, #664]	; (8dd28 <main+0x2090>)
   8da90:	4798      	blx	r3
   8da92:	4603      	mov	r3, r0
   8da94:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8da96:	7bfb      	ldrb	r3, [r7, #15]
   8da98:	2b00      	cmp	r3, #0
   8da9a:	d001      	beq.n	8daa0 <main+0x1e08>
   8da9c:	4b9f      	ldr	r3, [pc, #636]	; (8dd1c <main+0x2084>)
   8da9e:	4798      	blx	r3
							if( Cl_MacRetval == CL_OK)
   8daa0:	7bfb      	ldrb	r3, [r7, #15]
   8daa2:	2b00      	cmp	r3, #0
   8daa4:	d113      	bne.n	8dace <main+0x1e36>
							{
							
								Cl_MacRetval = Cl_rinse_init();
   8daa6:	4ba1      	ldr	r3, [pc, #644]	; (8dd2c <main+0x2094>)
   8daa8:	4798      	blx	r3
   8daaa:	4603      	mov	r3, r0
   8daac:	73fb      	strb	r3, [r7, #15]
								Cl_MacRetval = Cl_stby_init();
   8daae:	4ba0      	ldr	r3, [pc, #640]	; (8dd30 <main+0x2098>)
   8dab0:	4798      	blx	r3
   8dab2:	4603      	mov	r3, r0
   8dab4:	73fb      	strb	r3, [r7, #15]
								Cl_MacRetval = Cl_dprep_init();
   8dab6:	4b9f      	ldr	r3, [pc, #636]	; (8dd34 <main+0x209c>)
   8dab8:	4798      	blx	r3
   8daba:	4603      	mov	r3, r0
   8dabc:	73fb      	strb	r3, [r7, #15]
								
								
								Cl_MacState = MAC_POST_DIALYSIS_STANDBY;
   8dabe:	4b99      	ldr	r3, [pc, #612]	; (8dd24 <main+0x208c>)
   8dac0:	2211      	movs	r2, #17
   8dac2:	701a      	strb	r2, [r3, #0]
							//		Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)Cl_MacState,1);
									ASSERT_ERROR(Cl_MacRetval);
   8dac4:	7bfb      	ldrb	r3, [r7, #15]
   8dac6:	2b00      	cmp	r3, #0
   8dac8:	d001      	beq.n	8dace <main+0x1e36>
   8daca:	4b94      	ldr	r3, [pc, #592]	; (8dd1c <main+0x2084>)
   8dacc:	4798      	blx	r3
							}
							else
							{
								//handle error
							}
							Cl_MacEvent = EVT_NULL;
   8dace:	4b91      	ldr	r3, [pc, #580]	; (8dd14 <main+0x207c>)
   8dad0:	2200      	movs	r2, #0
   8dad2:	701a      	strb	r2, [r3, #0]
						break;
   8dad4:	e000      	b.n	8dad8 <main+0x1e40>
						default: break;
   8dad6:	bf00      	nop
					}
					break;
   8dad8:	e17d      	b.n	8ddd6 <main+0x213e>
					case MAC_SAFE_DIALYSIS:
					switch ( Cl_MacEvent )
   8dada:	4b8e      	ldr	r3, [pc, #568]	; (8dd14 <main+0x207c>)
   8dadc:	781b      	ldrb	r3, [r3, #0]
   8dade:	3b07      	subs	r3, #7
   8dae0:	2b21      	cmp	r3, #33	; 0x21
   8dae2:	f200 808c 	bhi.w	8dbfe <main+0x1f66>
   8dae6:	a201      	add	r2, pc, #4	; (adr r2, 8daec <main+0x1e54>)
   8dae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8daec:	0008db85 	.word	0x0008db85
   8daf0:	0008dbff 	.word	0x0008dbff
   8daf4:	0008dbff 	.word	0x0008dbff
   8daf8:	0008db75 	.word	0x0008db75
   8dafc:	0008db75 	.word	0x0008db75
   8db00:	0008db75 	.word	0x0008db75
   8db04:	0008dbff 	.word	0x0008dbff
   8db08:	0008dbff 	.word	0x0008dbff
   8db0c:	0008dbff 	.word	0x0008dbff
   8db10:	0008dbff 	.word	0x0008dbff
   8db14:	0008dbff 	.word	0x0008dbff
   8db18:	0008dbff 	.word	0x0008dbff
   8db1c:	0008dbff 	.word	0x0008dbff
   8db20:	0008dbff 	.word	0x0008dbff
   8db24:	0008dbff 	.word	0x0008dbff
   8db28:	0008dbff 	.word	0x0008dbff
   8db2c:	0008dbff 	.word	0x0008dbff
   8db30:	0008dbff 	.word	0x0008dbff
   8db34:	0008dbff 	.word	0x0008dbff
   8db38:	0008dbd9 	.word	0x0008dbd9
   8db3c:	0008dbd9 	.word	0x0008dbd9
   8db40:	0008dbff 	.word	0x0008dbff
   8db44:	0008dbff 	.word	0x0008dbff
   8db48:	0008dbff 	.word	0x0008dbff
   8db4c:	0008dbff 	.word	0x0008dbff
   8db50:	0008dbff 	.word	0x0008dbff
   8db54:	0008dbff 	.word	0x0008dbff
   8db58:	0008dbff 	.word	0x0008dbff
   8db5c:	0008dbff 	.word	0x0008dbff
   8db60:	0008dbff 	.word	0x0008dbff
   8db64:	0008dbff 	.word	0x0008dbff
   8db68:	0008dbff 	.word	0x0008dbff
   8db6c:	0008db75 	.word	0x0008db75
   8db70:	0008db75 	.word	0x0008db75
						case EVT_CONSOLE_COMMAND_SET_BLDPMP_ON:
						case EVT_CONSOLE_COMMAND_SET_BLDPMP_OFF:
						case EVT_CONSOLE_COMMAND_SET_BLDPUMPRATE:
						case EVT_CONSOLE_COMMAND_HEPARIN_START:
						case EVT_CONSOLE_COMMAND_HEPARIN_STOP:
						Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8db74:	4b67      	ldr	r3, [pc, #412]	; (8dd14 <main+0x207c>)
   8db76:	781b      	ldrb	r3, [r3, #0]
   8db78:	4618      	mov	r0, r3
   8db7a:	4b67      	ldr	r3, [pc, #412]	; (8dd18 <main+0x2080>)
   8db7c:	4798      	blx	r3
   8db7e:	4603      	mov	r3, r0
   8db80:	73fb      	strb	r3, [r7, #15]
						break;
   8db82:	e03d      	b.n	8dc00 <main+0x1f68>
						case EVT_CONSOLE_COMMAND_RINSE_START:
							Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8db84:	4b63      	ldr	r3, [pc, #396]	; (8dd14 <main+0x207c>)
   8db86:	781b      	ldrb	r3, [r3, #0]
   8db88:	4618      	mov	r0, r3
   8db8a:	4b63      	ldr	r3, [pc, #396]	; (8dd18 <main+0x2080>)
   8db8c:	4798      	blx	r3
   8db8e:	4603      	mov	r3, r0
   8db90:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8db92:	7bfb      	ldrb	r3, [r7, #15]
   8db94:	2b00      	cmp	r3, #0
   8db96:	d001      	beq.n	8db9c <main+0x1f04>
   8db98:	4b60      	ldr	r3, [pc, #384]	; (8dd1c <main+0x2084>)
   8db9a:	4798      	blx	r3
							if(Cl_MacRetval == CL_OK)
   8db9c:	7bfb      	ldrb	r3, [r7, #15]
   8db9e:	2b00      	cmp	r3, #0
   8dba0:	d10b      	bne.n	8dbba <main+0x1f22>
							{
								Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);	
   8dba2:	4b5c      	ldr	r3, [pc, #368]	; (8dd14 <main+0x207c>)
   8dba4:	781b      	ldrb	r3, [r3, #0]
   8dba6:	4618      	mov	r0, r3
   8dba8:	4b5d      	ldr	r3, [pc, #372]	; (8dd20 <main+0x2088>)
   8dbaa:	4798      	blx	r3
   8dbac:	4603      	mov	r3, r0
   8dbae:	73fb      	strb	r3, [r7, #15]
								ASSERT_ERROR(Cl_MacRetval);
   8dbb0:	7bfb      	ldrb	r3, [r7, #15]
   8dbb2:	2b00      	cmp	r3, #0
   8dbb4:	d001      	beq.n	8dbba <main+0x1f22>
   8dbb6:	4b59      	ldr	r3, [pc, #356]	; (8dd1c <main+0x2084>)
   8dbb8:	4798      	blx	r3
							}
							else
							{
								//handle error
							}
							if( Cl_MacRetval == CL_OK)
   8dbba:	7bfb      	ldrb	r3, [r7, #15]
   8dbbc:	2b00      	cmp	r3, #0
   8dbbe:	d107      	bne.n	8dbd0 <main+0x1f38>
							{
								Cl_MacState = MAC_RINSE;
   8dbc0:	4b58      	ldr	r3, [pc, #352]	; (8dd24 <main+0x208c>)
   8dbc2:	2207      	movs	r2, #7
   8dbc4:	701a      	strb	r2, [r3, #0]
								//	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)Cl_MacState,1);
									ASSERT_ERROR(Cl_MacRetval);
   8dbc6:	7bfb      	ldrb	r3, [r7, #15]
   8dbc8:	2b00      	cmp	r3, #0
   8dbca:	d001      	beq.n	8dbd0 <main+0x1f38>
   8dbcc:	4b53      	ldr	r3, [pc, #332]	; (8dd1c <main+0x2084>)
   8dbce:	4798      	blx	r3
							}
							else
							{
								//handle error
							}
							Cl_MacEvent = EVT_NULL;
   8dbd0:	4b50      	ldr	r3, [pc, #320]	; (8dd14 <main+0x207c>)
   8dbd2:	2200      	movs	r2, #0
   8dbd4:	701a      	strb	r2, [r3, #0]
						break;
   8dbd6:	e013      	b.n	8dc00 <main+0x1f68>
					//		Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
						//	Cl_MacEvent = EVT_NULL;
						//	break;
						case EVT_CONSOLE_COMMAND_BYPASS_ON:
						case EVT_CONSOLE_COMMAND_BYPASS_OFF:
						Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
   8dbd8:	4b4e      	ldr	r3, [pc, #312]	; (8dd14 <main+0x207c>)
   8dbda:	781b      	ldrb	r3, [r3, #0]
   8dbdc:	4618      	mov	r0, r3
   8dbde:	4b52      	ldr	r3, [pc, #328]	; (8dd28 <main+0x2090>)
   8dbe0:	4798      	blx	r3
   8dbe2:	4603      	mov	r3, r0
   8dbe4:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8dbe6:	7bfb      	ldrb	r3, [r7, #15]
   8dbe8:	2b00      	cmp	r3, #0
   8dbea:	d001      	beq.n	8dbf0 <main+0x1f58>
   8dbec:	4b4b      	ldr	r3, [pc, #300]	; (8dd1c <main+0x2084>)
   8dbee:	4798      	blx	r3
								if( Cl_MacRetval == CL_OK)
   8dbf0:	7bfb      	ldrb	r3, [r7, #15]
   8dbf2:	2b00      	cmp	r3, #0
   8dbf4:	d102      	bne.n	8dbfc <main+0x1f64>
								{
									Cl_MacState = MAC_DIALYSIS;
   8dbf6:	4b4b      	ldr	r3, [pc, #300]	; (8dd24 <main+0x208c>)
   8dbf8:	220f      	movs	r2, #15
   8dbfa:	701a      	strb	r2, [r3, #0]
								else
								{
									//handle error
								}
						
						break;
   8dbfc:	e000      	b.n	8dc00 <main+0x1f68>
						{
							//handle error
						}
						break;
						#endif
						default: break;
   8dbfe:	bf00      	nop
					}
					break;
   8dc00:	e0e9      	b.n	8ddd6 <main+0x213e>
					case MAC_POST_DIALYSIS_STANDBY:
					switch ( Cl_MacEvent )
   8dc02:	4b44      	ldr	r3, [pc, #272]	; (8dd14 <main+0x207c>)
   8dc04:	781b      	ldrb	r3, [r3, #0]
   8dc06:	3b07      	subs	r3, #7
   8dc08:	2b38      	cmp	r3, #56	; 0x38
   8dc0a:	f200 80db 	bhi.w	8ddc4 <main+0x212c>
   8dc0e:	a201      	add	r2, pc, #4	; (adr r2, 8dc14 <main+0x1f7c>)
   8dc10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8dc14:	0008dd71 	.word	0x0008dd71
   8dc18:	0008ddc5 	.word	0x0008ddc5
   8dc1c:	0008ddc5 	.word	0x0008ddc5
   8dc20:	0008dcf9 	.word	0x0008dcf9
   8dc24:	0008dcf9 	.word	0x0008dcf9
   8dc28:	0008dcf9 	.word	0x0008dcf9
   8dc2c:	0008ddc5 	.word	0x0008ddc5
   8dc30:	0008ddc5 	.word	0x0008ddc5
   8dc34:	0008ddc5 	.word	0x0008ddc5
   8dc38:	0008ddc5 	.word	0x0008ddc5
   8dc3c:	0008ddc5 	.word	0x0008ddc5
   8dc40:	0008ddc5 	.word	0x0008ddc5
   8dc44:	0008ddc5 	.word	0x0008ddc5
   8dc48:	0008ddc5 	.word	0x0008ddc5
   8dc4c:	0008ddc5 	.word	0x0008ddc5
   8dc50:	0008ddc5 	.word	0x0008ddc5
   8dc54:	0008ddc5 	.word	0x0008ddc5
   8dc58:	0008ddc5 	.word	0x0008ddc5
   8dc5c:	0008ddc5 	.word	0x0008ddc5
   8dc60:	0008dcf9 	.word	0x0008dcf9
   8dc64:	0008dcf9 	.word	0x0008dcf9
   8dc68:	0008ddc5 	.word	0x0008ddc5
   8dc6c:	0008ddc5 	.word	0x0008ddc5
   8dc70:	0008ddc5 	.word	0x0008ddc5
   8dc74:	0008ddc5 	.word	0x0008ddc5
   8dc78:	0008ddc5 	.word	0x0008ddc5
   8dc7c:	0008ddc5 	.word	0x0008ddc5
   8dc80:	0008ddc5 	.word	0x0008ddc5
   8dc84:	0008ddc5 	.word	0x0008ddc5
   8dc88:	0008ddc5 	.word	0x0008ddc5
   8dc8c:	0008ddc5 	.word	0x0008ddc5
   8dc90:	0008ddc5 	.word	0x0008ddc5
   8dc94:	0008dcf9 	.word	0x0008dcf9
   8dc98:	0008dcf9 	.word	0x0008dcf9
   8dc9c:	0008ddc5 	.word	0x0008ddc5
   8dca0:	0008ddc5 	.word	0x0008ddc5
   8dca4:	0008ddc5 	.word	0x0008ddc5
   8dca8:	0008ddc5 	.word	0x0008ddc5
   8dcac:	0008ddc5 	.word	0x0008ddc5
   8dcb0:	0008ddc5 	.word	0x0008ddc5
   8dcb4:	0008ddc5 	.word	0x0008ddc5
   8dcb8:	0008ddc5 	.word	0x0008ddc5
   8dcbc:	0008ddc5 	.word	0x0008ddc5
   8dcc0:	0008ddc5 	.word	0x0008ddc5
   8dcc4:	0008ddc5 	.word	0x0008ddc5
   8dcc8:	0008ddc5 	.word	0x0008ddc5
   8dccc:	0008ddc5 	.word	0x0008ddc5
   8dcd0:	0008ddc5 	.word	0x0008ddc5
   8dcd4:	0008ddc5 	.word	0x0008ddc5
   8dcd8:	0008ddc5 	.word	0x0008ddc5
   8dcdc:	0008ddc5 	.word	0x0008ddc5
   8dce0:	0008ddc5 	.word	0x0008ddc5
   8dce4:	0008ddc5 	.word	0x0008ddc5
   8dce8:	0008ddc5 	.word	0x0008ddc5
   8dcec:	0008ddc5 	.word	0x0008ddc5
   8dcf0:	0008ddc5 	.word	0x0008ddc5
   8dcf4:	0008dd39 	.word	0x0008dd39
						case EVT_CONSOLE_COMMAND_HEPARIN_START:
						case EVT_CONSOLE_COMMAND_HEPARIN_STOP:
						
						case EVT_CONSOLE_COMMAND_BYPASS_ON:
						case EVT_CONSOLE_COMMAND_BYPASS_OFF:
						Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
   8dcf8:	4b06      	ldr	r3, [pc, #24]	; (8dd14 <main+0x207c>)
   8dcfa:	781b      	ldrb	r3, [r3, #0]
   8dcfc:	4618      	mov	r0, r3
   8dcfe:	4b0a      	ldr	r3, [pc, #40]	; (8dd28 <main+0x2090>)
   8dd00:	4798      	blx	r3
   8dd02:	4603      	mov	r3, r0
   8dd04:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8dd06:	7bfb      	ldrb	r3, [r7, #15]
   8dd08:	2b00      	cmp	r3, #0
   8dd0a:	d002      	beq.n	8dd12 <main+0x207a>
   8dd0c:	4b03      	ldr	r3, [pc, #12]	; (8dd1c <main+0x2084>)
   8dd0e:	4798      	blx	r3
							if( Cl_MacRetval != CL_OK)
							{
								//handle error
							}
						break;
   8dd10:	e059      	b.n	8ddc6 <main+0x212e>
   8dd12:	e058      	b.n	8ddc6 <main+0x212e>
   8dd14:	200719e6 	.word	0x200719e6
   8dd18:	000a4e99 	.word	0x000a4e99
   8dd1c:	00088fc1 	.word	0x00088fc1
   8dd20:	000a2641 	.word	0x000a2641
   8dd24:	20070584 	.word	0x20070584
   8dd28:	00085581 	.word	0x00085581
   8dd2c:	000a3d4d 	.word	0x000a3d4d
   8dd30:	000a5a21 	.word	0x000a5a21
   8dd34:	0009e385 	.word	0x0009e385
						case EVT_CONSOLE_COMMAND_DISINF_START:
						
						Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
   8dd38:	4b36      	ldr	r3, [pc, #216]	; (8de14 <main+0x217c>)
   8dd3a:	781b      	ldrb	r3, [r3, #0]
   8dd3c:	4618      	mov	r0, r3
   8dd3e:	4b36      	ldr	r3, [pc, #216]	; (8de18 <main+0x2180>)
   8dd40:	4798      	blx	r3
   8dd42:	4603      	mov	r3, r0
   8dd44:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8dd46:	7bfb      	ldrb	r3, [r7, #15]
   8dd48:	2b00      	cmp	r3, #0
   8dd4a:	d001      	beq.n	8dd50 <main+0x20b8>
   8dd4c:	4b33      	ldr	r3, [pc, #204]	; (8de1c <main+0x2184>)
   8dd4e:	4798      	blx	r3
							if( Cl_MacRetval != CL_OK)
							{
								//handle error
							}
						Cl_MacRetval = Cl_disinf_controller(Cl_MacEvent);
   8dd50:	4b30      	ldr	r3, [pc, #192]	; (8de14 <main+0x217c>)
   8dd52:	781b      	ldrb	r3, [r3, #0]
   8dd54:	4618      	mov	r0, r3
   8dd56:	4b32      	ldr	r3, [pc, #200]	; (8de20 <main+0x2188>)
   8dd58:	4798      	blx	r3
   8dd5a:	4603      	mov	r3, r0
   8dd5c:	73fb      	strb	r3, [r7, #15]
						ASSERT_ERROR(Cl_MacRetval);
   8dd5e:	7bfb      	ldrb	r3, [r7, #15]
   8dd60:	2b00      	cmp	r3, #0
   8dd62:	d001      	beq.n	8dd68 <main+0x20d0>
   8dd64:	4b2d      	ldr	r3, [pc, #180]	; (8de1c <main+0x2184>)
   8dd66:	4798      	blx	r3
							if( Cl_MacRetval != CL_OK)
							{
								//handle error
							}
						
						Cl_MacState = MAC_DISINFECT;
   8dd68:	4b2e      	ldr	r3, [pc, #184]	; (8de24 <main+0x218c>)
   8dd6a:	2208      	movs	r2, #8
   8dd6c:	701a      	strb	r2, [r3, #0]
						
						break;
   8dd6e:	e02a      	b.n	8ddc6 <main+0x212e>
					//	case EVT_CONSOLE_COMMAND_SET_DATA:
					//		Cl_MacRetval = Cl_Dlsis_controller(Cl_MacEvent);
					//		Cl_MacEvent = EVT_NULL;
					//		break;
						case EVT_CONSOLE_COMMAND_RINSE_START:
							Cl_MacRetval = Cl_Standby_Controller(Cl_MacEvent);
   8dd70:	4b28      	ldr	r3, [pc, #160]	; (8de14 <main+0x217c>)
   8dd72:	781b      	ldrb	r3, [r3, #0]
   8dd74:	4618      	mov	r0, r3
   8dd76:	4b2c      	ldr	r3, [pc, #176]	; (8de28 <main+0x2190>)
   8dd78:	4798      	blx	r3
   8dd7a:	4603      	mov	r3, r0
   8dd7c:	73fb      	strb	r3, [r7, #15]
							ASSERT_ERROR(Cl_MacRetval);
   8dd7e:	7bfb      	ldrb	r3, [r7, #15]
   8dd80:	2b00      	cmp	r3, #0
   8dd82:	d001      	beq.n	8dd88 <main+0x20f0>
   8dd84:	4b25      	ldr	r3, [pc, #148]	; (8de1c <main+0x2184>)
   8dd86:	4798      	blx	r3
							if(Cl_MacRetval == CL_OK)
   8dd88:	7bfb      	ldrb	r3, [r7, #15]
   8dd8a:	2b00      	cmp	r3, #0
   8dd8c:	d10b      	bne.n	8dda6 <main+0x210e>
							{
								Cl_MacRetval = Cl_Rinse_Controller(Cl_MacEvent);
   8dd8e:	4b21      	ldr	r3, [pc, #132]	; (8de14 <main+0x217c>)
   8dd90:	781b      	ldrb	r3, [r3, #0]
   8dd92:	4618      	mov	r0, r3
   8dd94:	4b25      	ldr	r3, [pc, #148]	; (8de2c <main+0x2194>)
   8dd96:	4798      	blx	r3
   8dd98:	4603      	mov	r3, r0
   8dd9a:	73fb      	strb	r3, [r7, #15]
								ASSERT_ERROR(Cl_MacRetval);	
   8dd9c:	7bfb      	ldrb	r3, [r7, #15]
   8dd9e:	2b00      	cmp	r3, #0
   8dda0:	d001      	beq.n	8dda6 <main+0x210e>
   8dda2:	4b1e      	ldr	r3, [pc, #120]	; (8de1c <main+0x2184>)
   8dda4:	4798      	blx	r3
							else
							{
								//handle error
							}
							
							if( Cl_MacRetval == CL_OK)
   8dda6:	7bfb      	ldrb	r3, [r7, #15]
   8dda8:	2b00      	cmp	r3, #0
   8ddaa:	d107      	bne.n	8ddbc <main+0x2124>
							{
								Cl_MacState = MAC_RINSE;
   8ddac:	4b1d      	ldr	r3, [pc, #116]	; (8de24 <main+0x218c>)
   8ddae:	2207      	movs	r2, #7
   8ddb0:	701a      	strb	r2, [r3, #0]
								//	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATE,(void*)MAC_RINSE,1);
									ASSERT_ERROR(Cl_MacRetval);
   8ddb2:	7bfb      	ldrb	r3, [r7, #15]
   8ddb4:	2b00      	cmp	r3, #0
   8ddb6:	d001      	beq.n	8ddbc <main+0x2124>
   8ddb8:	4b18      	ldr	r3, [pc, #96]	; (8de1c <main+0x2184>)
   8ddba:	4798      	blx	r3
								//Cl_MacState = MAC_POST_RINSE_STANDBY;
							}else
							{
								//handle error
							}
							Cl_MacEvent = EVT_NULL;
   8ddbc:	4b15      	ldr	r3, [pc, #84]	; (8de14 <main+0x217c>)
   8ddbe:	2200      	movs	r2, #0
   8ddc0:	701a      	strb	r2, [r3, #0]
						break;
   8ddc2:	e000      	b.n	8ddc6 <main+0x212e>
						

						default: break;
   8ddc4:	bf00      	nop
					}
					break;
   8ddc6:	e006      	b.n	8ddd6 <main+0x213e>
					case MAC_SERVICE:
					switch ( Cl_MacEvent )
				
					{

						default: break;
   8ddc8:	bf00      	nop
					}
					break;
   8ddca:	e004      	b.n	8ddd6 <main+0x213e>
					case MAC_STATE_MAX:
					switch ( Cl_MacEvent )
				
					{

						default: break;
   8ddcc:	bf00      	nop
					}
					break;
   8ddce:	e002      	b.n	8ddd6 <main+0x213e>
					default :
					break;
   8ddd0:	bf00      	nop
   8ddd2:	e000      	b.n	8ddd6 <main+0x213e>
						break;

						
					}
					
					break;
   8ddd4:	bf00      	nop
				}
				

			
		
				Cl_MacRetval = Cl_Mac_ClearEvents();
   8ddd6:	4b16      	ldr	r3, [pc, #88]	; (8de30 <main+0x2198>)
   8ddd8:	4798      	blx	r3
   8ddda:	4603      	mov	r3, r0
   8dddc:	73fb      	strb	r3, [r7, #15]
				ASSERT_ERROR(Cl_MacRetval);
   8ddde:	7bfb      	ldrb	r3, [r7, #15]
   8dde0:	2b00      	cmp	r3, #0
   8dde2:	d001      	beq.n	8dde8 <main+0x2150>
   8dde4:	4b0d      	ldr	r3, [pc, #52]	; (8de1c <main+0x2184>)
   8dde6:	4798      	blx	r3
			{
				// Handle error
			}
		// TODO :  check for ret val
		
		while((Cl_MacEventQueueBc.Cl_MacNewEventcount > 0) || (Cl_MacEventQueue1.Cl_MacNewEventcount > 0) || (Cl_MacEventQueue2.Cl_MacNewEventcount > 0) || (Cl_MacEventQueue4.Cl_MacNewEventcount > 0))  // LOOP EVENT DISPATCH
   8dde8:	4b12      	ldr	r3, [pc, #72]	; (8de34 <main+0x219c>)
   8ddea:	781b      	ldrb	r3, [r3, #0]
   8ddec:	2b00      	cmp	r3, #0
   8ddee:	f47e a81f 	bne.w	8be30 <main+0x198>
   8ddf2:	4b11      	ldr	r3, [pc, #68]	; (8de38 <main+0x21a0>)
   8ddf4:	781b      	ldrb	r3, [r3, #0]
   8ddf6:	2b00      	cmp	r3, #0
   8ddf8:	f47e a81a 	bne.w	8be30 <main+0x198>
   8ddfc:	4b0f      	ldr	r3, [pc, #60]	; (8de3c <main+0x21a4>)
   8ddfe:	781b      	ldrb	r3, [r3, #0]
   8de00:	2b00      	cmp	r3, #0
   8de02:	f47e a815 	bne.w	8be30 <main+0x198>
   8de06:	4b0e      	ldr	r3, [pc, #56]	; (8de40 <main+0x21a8>)
   8de08:	781b      	ldrb	r3, [r3, #0]
   8de0a:	2b00      	cmp	r3, #0
   8de0c:	f47e a810 	bne.w	8be30 <main+0x198>
			
		}
		
		}

	}
   8de10:	f7fd bfd9 	b.w	8bdc6 <main+0x12e>
   8de14:	200719e6 	.word	0x200719e6
   8de18:	00085581 	.word	0x00085581
   8de1c:	00088fc1 	.word	0x00088fc1
   8de20:	0009c211 	.word	0x0009c211
   8de24:	20070584 	.word	0x20070584
   8de28:	000a4e99 	.word	0x000a4e99
   8de2c:	000a2641 	.word	0x000a2641
   8de30:	0008e3dd 	.word	0x0008e3dd
   8de34:	200724e4 	.word	0x200724e4
   8de38:	2007231c 	.word	0x2007231c
   8de3c:	20072198 	.word	0x20072198
   8de40:	200722c0 	.word	0x200722c0

0008de44 <Cl_MacInit>:
 * \return CL_OK on success.
 *
 * \Globals used : Cl_MacEventQueue1
 */
Cl_ReturnCodeType 	Cl_MacInit(void) 
{
   8de44:	b580      	push	{r7, lr}
   8de46:	b082      	sub	sp, #8
   8de48:	af00      	add	r7, sp, #0
		Cl_ReturnCodeType Cl_MacRetval = CL_OK;
   8de4a:	2300      	movs	r3, #0
   8de4c:	71fb      	strb	r3, [r7, #7]
		
		queue_sequence_counter = 0;
   8de4e:	4b28      	ldr	r3, [pc, #160]	; (8def0 <Cl_MacInit+0xac>)
   8de50:	2200      	movs	r2, #0
   8de52:	701a      	strb	r2, [r3, #0]
		
		Cl_MacEventQueue1.Cl_MacEvent[0] =0;
   8de54:	4b27      	ldr	r3, [pc, #156]	; (8def4 <Cl_MacInit+0xb0>)
   8de56:	2200      	movs	r2, #0
   8de58:	709a      	strb	r2, [r3, #2]
		Cl_MacEventQueue1.Cl_MacNewEvent = false;
   8de5a:	4b26      	ldr	r3, [pc, #152]	; (8def4 <Cl_MacInit+0xb0>)
   8de5c:	2200      	movs	r2, #0
   8de5e:	705a      	strb	r2, [r3, #1]
		Cl_MacEventQueue1.Cl_MacNewEventcount = 0;
   8de60:	4b24      	ldr	r3, [pc, #144]	; (8def4 <Cl_MacInit+0xb0>)
   8de62:	2200      	movs	r2, #0
   8de64:	701a      	strb	r2, [r3, #0]
		
		Cl_MacEventQueue4.Cl_MacEvent[0] =0;
   8de66:	4b24      	ldr	r3, [pc, #144]	; (8def8 <Cl_MacInit+0xb4>)
   8de68:	2200      	movs	r2, #0
   8de6a:	709a      	strb	r2, [r3, #2]
		Cl_MacEventQueue4.Cl_MacNewEvent = false;
   8de6c:	4b22      	ldr	r3, [pc, #136]	; (8def8 <Cl_MacInit+0xb4>)
   8de6e:	2200      	movs	r2, #0
   8de70:	705a      	strb	r2, [r3, #1]
		Cl_MacEventQueue4.Cl_MacNewEventcount = 0;
   8de72:	4b21      	ldr	r3, [pc, #132]	; (8def8 <Cl_MacInit+0xb4>)
   8de74:	2200      	movs	r2, #0
   8de76:	701a      	strb	r2, [r3, #0]
		
		Cl_MacEventQueueBc.Cl_MacEvent[0] =0;
   8de78:	4b20      	ldr	r3, [pc, #128]	; (8defc <Cl_MacInit+0xb8>)
   8de7a:	2200      	movs	r2, #0
   8de7c:	709a      	strb	r2, [r3, #2]
		Cl_MacEventQueueBc.Cl_MacNewEvent = false;
   8de7e:	4b1f      	ldr	r3, [pc, #124]	; (8defc <Cl_MacInit+0xb8>)
   8de80:	2200      	movs	r2, #0
   8de82:	705a      	strb	r2, [r3, #1]
		Cl_MacEventQueueBc.Cl_MacNewEventcount = 0;
   8de84:	4b1d      	ldr	r3, [pc, #116]	; (8defc <Cl_MacInit+0xb8>)
   8de86:	2200      	movs	r2, #0
   8de88:	701a      	strb	r2, [r3, #0]
		
		
		Cl_Console_buffer.BufferSize = CONSOLE_BUFFER_SIZE;
   8de8a:	4b1d      	ldr	r3, [pc, #116]	; (8df00 <Cl_MacInit+0xbc>)
   8de8c:	2214      	movs	r2, #20
   8de8e:	759a      	strb	r2, [r3, #22]
		Cl_Console_msgbuffer.BufferSize = CONSOLE_MSG_BUFFER_SIZE;
   8de90:	4b1c      	ldr	r3, [pc, #112]	; (8df04 <Cl_MacInit+0xc0>)
   8de92:	2228      	movs	r2, #40	; 0x28
   8de94:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		Cl_Console_buffer1.BufferEmpty = true;
   8de98:	4b1b      	ldr	r3, [pc, #108]	; (8df08 <Cl_MacInit+0xc4>)
   8de9a:	2201      	movs	r2, #1
   8de9c:	771a      	strb	r2, [r3, #28]
		Cl_Console_buffer1.ConsoleDatabufferprocessed= false;
   8de9e:	4b1a      	ldr	r3, [pc, #104]	; (8df08 <Cl_MacInit+0xc4>)
   8dea0:	2200      	movs	r2, #0
   8dea2:	765a      	strb	r2, [r3, #25]
		Cl_Console_buffer1.ConsoleDatabufferReady=false;
   8dea4:	4b18      	ldr	r3, [pc, #96]	; (8df08 <Cl_MacInit+0xc4>)
   8dea6:	2200      	movs	r2, #0
   8dea8:	761a      	strb	r2, [r3, #24]
		Cl_Console_buffer1.CurreltyActive=true;
   8deaa:	4b17      	ldr	r3, [pc, #92]	; (8df08 <Cl_MacInit+0xc4>)
   8deac:	2201      	movs	r2, #1
   8deae:	769a      	strb	r2, [r3, #26]
		Cl_Console_buffer1.StartSequenceDetected=false;
   8deb0:	4b15      	ldr	r3, [pc, #84]	; (8df08 <Cl_MacInit+0xc4>)
   8deb2:	2200      	movs	r2, #0
   8deb4:	76da      	strb	r2, [r3, #27]

		Cl_Console_buffer2.BufferEmpty = true;
   8deb6:	4b15      	ldr	r3, [pc, #84]	; (8df0c <Cl_MacInit+0xc8>)
   8deb8:	2201      	movs	r2, #1
   8deba:	771a      	strb	r2, [r3, #28]
		Cl_Console_buffer2.ConsoleDatabufferprocessed= false;
   8debc:	4b13      	ldr	r3, [pc, #76]	; (8df0c <Cl_MacInit+0xc8>)
   8debe:	2200      	movs	r2, #0
   8dec0:	765a      	strb	r2, [r3, #25]
		Cl_Console_buffer2.ConsoleDatabufferReady=false;
   8dec2:	4b12      	ldr	r3, [pc, #72]	; (8df0c <Cl_MacInit+0xc8>)
   8dec4:	2200      	movs	r2, #0
   8dec6:	761a      	strb	r2, [r3, #24]
		Cl_Console_buffer2.CurreltyActive=false;
   8dec8:	4b10      	ldr	r3, [pc, #64]	; (8df0c <Cl_MacInit+0xc8>)
   8deca:	2200      	movs	r2, #0
   8decc:	769a      	strb	r2, [r3, #26]
		Cl_Console_buffer2.StartSequenceDetected=false;
   8dece:	4b0f      	ldr	r3, [pc, #60]	; (8df0c <Cl_MacInit+0xc8>)
   8ded0:	2200      	movs	r2, #0
   8ded2:	76da      	strb	r2, [r3, #27]
		
		Cl_MacState =	MAC_INIT;
   8ded4:	4b0e      	ldr	r3, [pc, #56]	; (8df10 <Cl_MacInit+0xcc>)
   8ded6:	2202      	movs	r2, #2
   8ded8:	701a      	strb	r2, [r3, #0]
		
		if( Cl_MacRetval != CL_OK)
		{
			//handle error
		}
		ASSERT_ERROR(Cl_MacRetval);
   8deda:	79fb      	ldrb	r3, [r7, #7]
   8dedc:	2b00      	cmp	r3, #0
   8dede:	d001      	beq.n	8dee4 <Cl_MacInit+0xa0>
   8dee0:	4b0c      	ldr	r3, [pc, #48]	; (8df14 <Cl_MacInit+0xd0>)
   8dee2:	4798      	blx	r3
		return Cl_MacRetval;
   8dee4:	79fb      	ldrb	r3, [r7, #7]
}
   8dee6:	4618      	mov	r0, r3
   8dee8:	3708      	adds	r7, #8
   8deea:	46bd      	mov	sp, r7
   8deec:	bd80      	pop	{r7, pc}
   8deee:	bf00      	nop
   8def0:	200719e9 	.word	0x200719e9
   8def4:	2007231c 	.word	0x2007231c
   8def8:	200722c0 	.word	0x200722c0
   8defc:	200724e4 	.word	0x200724e4
   8df00:	200723d0 	.word	0x200723d0
   8df04:	200721f4 	.word	0x200721f4
   8df08:	2007240c 	.word	0x2007240c
   8df0c:	20072278 	.word	0x20072278
   8df10:	20070584 	.word	0x20070584
   8df14:	00088fc1 	.word	0x00088fc1

0008df18 <Cl_App_init>:
 * \void function 
 * \return CL_OK on success.
 * \Globals used : 
 */
Cl_ReturnCodeType  Cl_App_init(void)
{
   8df18:	b580      	push	{r7, lr}
   8df1a:	b082      	sub	sp, #8
   8df1c:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType  Cl_RetValue = CL_ERROR;
   8df1e:	2304      	movs	r3, #4
   8df20:	71fb      	strb	r3, [r7, #7]
	
	Cl_RetValue = Cl_Init_Alarms();
   8df22:	4b26      	ldr	r3, [pc, #152]	; (8dfbc <Cl_App_init+0xa4>)
   8df24:	4798      	blx	r3
   8df26:	4603      	mov	r3, r0
   8df28:	71fb      	strb	r3, [r7, #7]
	ASSERT_ERROR(Cl_RetValue);
   8df2a:	79fb      	ldrb	r3, [r7, #7]
   8df2c:	2b00      	cmp	r3, #0
   8df2e:	d001      	beq.n	8df34 <Cl_App_init+0x1c>
   8df30:	4b23      	ldr	r3, [pc, #140]	; (8dfc0 <Cl_App_init+0xa8>)
   8df32:	4798      	blx	r3
			if( Cl_RetValue != CL_OK)
			{
				//handle error
			}
	Cl_RetValue = Cl_Console_init();
   8df34:	4b23      	ldr	r3, [pc, #140]	; (8dfc4 <Cl_App_init+0xac>)
   8df36:	4798      	blx	r3
   8df38:	4603      	mov	r3, r0
   8df3a:	71fb      	strb	r3, [r7, #7]
	ASSERT_ERROR(Cl_RetValue);
   8df3c:	79fb      	ldrb	r3, [r7, #7]
   8df3e:	2b00      	cmp	r3, #0
   8df40:	d001      	beq.n	8df46 <Cl_App_init+0x2e>
   8df42:	4b1f      	ldr	r3, [pc, #124]	; (8dfc0 <Cl_App_init+0xa8>)
   8df44:	4798      	blx	r3
			if( Cl_RetValue != CL_OK)
			{
				//handle error
			}
	Cl_RetValue = Cl_disinf_init();
   8df46:	4b20      	ldr	r3, [pc, #128]	; (8dfc8 <Cl_App_init+0xb0>)
   8df48:	4798      	blx	r3
   8df4a:	4603      	mov	r3, r0
   8df4c:	71fb      	strb	r3, [r7, #7]
	ASSERT_ERROR(Cl_RetValue);
   8df4e:	79fb      	ldrb	r3, [r7, #7]
   8df50:	2b00      	cmp	r3, #0
   8df52:	d001      	beq.n	8df58 <Cl_App_init+0x40>
   8df54:	4b1a      	ldr	r3, [pc, #104]	; (8dfc0 <Cl_App_init+0xa8>)
   8df56:	4798      	blx	r3
			if( Cl_RetValue != CL_OK)
			{
				//handle error
			}
	Cl_RetValue = Cl_dlsis_init();
   8df58:	4b1c      	ldr	r3, [pc, #112]	; (8dfcc <Cl_App_init+0xb4>)
   8df5a:	4798      	blx	r3
   8df5c:	4603      	mov	r3, r0
   8df5e:	71fb      	strb	r3, [r7, #7]
	ASSERT_ERROR(Cl_RetValue);
   8df60:	79fb      	ldrb	r3, [r7, #7]
   8df62:	2b00      	cmp	r3, #0
   8df64:	d001      	beq.n	8df6a <Cl_App_init+0x52>
   8df66:	4b16      	ldr	r3, [pc, #88]	; (8dfc0 <Cl_App_init+0xa8>)
   8df68:	4798      	blx	r3
			if( Cl_RetValue != CL_OK)
			{
				//handle error
			}
	Cl_RetValue = Cl_dprep_init(	);
   8df6a:	4b19      	ldr	r3, [pc, #100]	; (8dfd0 <Cl_App_init+0xb8>)
   8df6c:	4798      	blx	r3
   8df6e:	4603      	mov	r3, r0
   8df70:	71fb      	strb	r3, [r7, #7]
	ASSERT_ERROR(Cl_RetValue);
   8df72:	79fb      	ldrb	r3, [r7, #7]
   8df74:	2b00      	cmp	r3, #0
   8df76:	d001      	beq.n	8df7c <Cl_App_init+0x64>
   8df78:	4b11      	ldr	r3, [pc, #68]	; (8dfc0 <Cl_App_init+0xa8>)
   8df7a:	4798      	blx	r3
			if( Cl_RetValue != CL_OK)
			{
				//handle error
			}
	Cl_RetValue = Cl_rinse_init();
   8df7c:	4b15      	ldr	r3, [pc, #84]	; (8dfd4 <Cl_App_init+0xbc>)
   8df7e:	4798      	blx	r3
   8df80:	4603      	mov	r3, r0
   8df82:	71fb      	strb	r3, [r7, #7]
	ASSERT_ERROR(Cl_RetValue);
   8df84:	79fb      	ldrb	r3, [r7, #7]
   8df86:	2b00      	cmp	r3, #0
   8df88:	d001      	beq.n	8df8e <Cl_App_init+0x76>
   8df8a:	4b0d      	ldr	r3, [pc, #52]	; (8dfc0 <Cl_App_init+0xa8>)
   8df8c:	4798      	blx	r3
			if( Cl_RetValue != CL_OK)
			{
				//handle error
			}
	Cl_RetValue = Cl_stby_init();
   8df8e:	4b12      	ldr	r3, [pc, #72]	; (8dfd8 <Cl_App_init+0xc0>)
   8df90:	4798      	blx	r3
   8df92:	4603      	mov	r3, r0
   8df94:	71fb      	strb	r3, [r7, #7]
	ASSERT_ERROR(Cl_RetValue);
   8df96:	79fb      	ldrb	r3, [r7, #7]
   8df98:	2b00      	cmp	r3, #0
   8df9a:	d001      	beq.n	8dfa0 <Cl_App_init+0x88>
   8df9c:	4b08      	ldr	r3, [pc, #32]	; (8dfc0 <Cl_App_init+0xa8>)
   8df9e:	4798      	blx	r3
			if( Cl_RetValue != CL_OK)
			{
				//handle error
			}
	
	Cl_RetValue = cl_datamanager_init();
   8dfa0:	4b0e      	ldr	r3, [pc, #56]	; (8dfdc <Cl_App_init+0xc4>)
   8dfa2:	4798      	blx	r3
   8dfa4:	4603      	mov	r3, r0
   8dfa6:	71fb      	strb	r3, [r7, #7]
	ASSERT_ERROR(Cl_RetValue);
   8dfa8:	79fb      	ldrb	r3, [r7, #7]
   8dfaa:	2b00      	cmp	r3, #0
   8dfac:	d001      	beq.n	8dfb2 <Cl_App_init+0x9a>
   8dfae:	4b04      	ldr	r3, [pc, #16]	; (8dfc0 <Cl_App_init+0xa8>)
   8dfb0:	4798      	blx	r3
			if( Cl_RetValue != CL_OK)
			{
				//handle error
			}
	
	return CL_OK;
   8dfb2:	2300      	movs	r3, #0
	
}
   8dfb4:	4618      	mov	r0, r3
   8dfb6:	3708      	adds	r7, #8
   8dfb8:	46bd      	mov	sp, r7
   8dfba:	bd80      	pop	{r7, pc}
   8dfbc:	00080bc9 	.word	0x00080bc9
   8dfc0:	00088fc1 	.word	0x00088fc1
   8dfc4:	0009bf75 	.word	0x0009bf75
   8dfc8:	0009c1fd 	.word	0x0009c1fd
   8dfcc:	0008546d 	.word	0x0008546d
   8dfd0:	0009e385 	.word	0x0009e385
   8dfd4:	000a3d4d 	.word	0x000a3d4d
   8dfd8:	000a5a21 	.word	0x000a5a21
   8dfdc:	00084a55 	.word	0x00084a55

0008dfe0 <Cl_Mac_Configure>:
 * \return CL_OK on success.
 * \Globals used : 
 */
Cl_ReturnCodeType 	Cl_Mac_Configure(void)

{ 
   8dfe0:	b580      	push	{r7, lr}
   8dfe2:	b082      	sub	sp, #8
   8dfe4:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType Cl_Mac_retval = CL_ERROR;
   8dfe6:	2304      	movs	r3, #4
   8dfe8:	71fb      	strb	r3, [r7, #7]
	
	/*printf("System Configuring Controls\n");*/
	ASSERT_ERROR(Cl_Mac_retval);
   8dfea:	79fb      	ldrb	r3, [r7, #7]
   8dfec:	2b00      	cmp	r3, #0
   8dfee:	d001      	beq.n	8dff4 <Cl_Mac_Configure+0x14>
   8dff0:	4b03      	ldr	r3, [pc, #12]	; (8e000 <Cl_Mac_Configure+0x20>)
   8dff2:	4798      	blx	r3
			if( Cl_Mac_retval != CL_OK)
			{
				//handle error
			}
	
	return CL_OK;
   8dff4:	2300      	movs	r3, #0
}
   8dff6:	4618      	mov	r0, r3
   8dff8:	3708      	adds	r7, #8
   8dffa:	46bd      	mov	sp, r7
   8dffc:	bd80      	pop	{r7, pc}
   8dffe:	bf00      	nop
   8e000:	00088fc1 	.word	0x00088fc1

0008e004 <Cl_Mac_GetSystem_Status_Query>:
 * \return CL_OK on success.
 * \Globals used : 
 */

Cl_ReturnCodeType 	Cl_Mac_GetSystem_Status_Query(void)
{
   8e004:	b580      	push	{r7, lr}
   8e006:	b082      	sub	sp, #8
   8e008:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType Cl_MacRetval= CL_ERROR;
   8e00a:	2304      	movs	r3, #4
   8e00c:	71fb      	strb	r3, [r7, #7]
	Cl_MacRetval =	Cl_SysStat_System_Status_Query();
   8e00e:	4b07      	ldr	r3, [pc, #28]	; (8e02c <Cl_Mac_GetSystem_Status_Query+0x28>)
   8e010:	4798      	blx	r3
   8e012:	4603      	mov	r3, r0
   8e014:	71fb      	strb	r3, [r7, #7]
	ASSERT_ERROR(Cl_MacRetval);
   8e016:	79fb      	ldrb	r3, [r7, #7]
   8e018:	2b00      	cmp	r3, #0
   8e01a:	d001      	beq.n	8e020 <Cl_Mac_GetSystem_Status_Query+0x1c>
   8e01c:	4b04      	ldr	r3, [pc, #16]	; (8e030 <Cl_Mac_GetSystem_Status_Query+0x2c>)
   8e01e:	4798      	blx	r3
				if( Cl_MacRetval != CL_OK)
				{
					//handle error
				}
	
	return CL_OK;
   8e020:	2300      	movs	r3, #0
}
   8e022:	4618      	mov	r0, r3
   8e024:	3708      	adds	r7, #8
   8e026:	46bd      	mov	sp, r7
   8e028:	bd80      	pop	{r7, pc}
   8e02a:	bf00      	nop
   8e02c:	0008e445 	.word	0x0008e445
   8e030:	00088fc1 	.word	0x00088fc1

0008e034 <Cl_MacCheckforConsoleMessage>:
						}
		return CL_OK;
	
}
Cl_ReturnCodeType 	Cl_MacCheckforConsoleMessage(void)
{
   8e034:	b580      	push	{r7, lr}
   8e036:	b082      	sub	sp, #8
   8e038:	af00      	add	r7, sp, #0
			Cl_ReturnCodeType Cl_MacRetval1;
			
			Cl_MacRetval1 = Cl_Console_Read_ConsoleMessage_Status(); // Reads the status of the data buffer populated by the timer console read interrupt.
   8e03a:	4b19      	ldr	r3, [pc, #100]	; (8e0a0 <Cl_MacCheckforConsoleMessage+0x6c>)
   8e03c:	4798      	blx	r3
   8e03e:	4603      	mov	r3, r0
   8e040:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_MacRetval1);
   8e042:	79fb      	ldrb	r3, [r7, #7]
   8e044:	2b00      	cmp	r3, #0
   8e046:	d001      	beq.n	8e04c <Cl_MacCheckforConsoleMessage+0x18>
   8e048:	4b16      	ldr	r3, [pc, #88]	; (8e0a4 <Cl_MacCheckforConsoleMessage+0x70>)
   8e04a:	4798      	blx	r3
			if(Cl_MacRetval1 == CL_OK)
   8e04c:	79fb      	ldrb	r3, [r7, #7]
   8e04e:	2b00      	cmp	r3, #0
   8e050:	d108      	bne.n	8e064 <Cl_MacCheckforConsoleMessage+0x30>
			{
		
				Cl_MacRetval1 = Cl_Console_Read_Message_Console();
   8e052:	4b15      	ldr	r3, [pc, #84]	; (8e0a8 <Cl_MacCheckforConsoleMessage+0x74>)
   8e054:	4798      	blx	r3
   8e056:	4603      	mov	r3, r0
   8e058:	71fb      	strb	r3, [r7, #7]
				ASSERT_ERROR(Cl_MacRetval1);
   8e05a:	79fb      	ldrb	r3, [r7, #7]
   8e05c:	2b00      	cmp	r3, #0
   8e05e:	d001      	beq.n	8e064 <Cl_MacCheckforConsoleMessage+0x30>
   8e060:	4b10      	ldr	r3, [pc, #64]	; (8e0a4 <Cl_MacCheckforConsoleMessage+0x70>)
   8e062:	4798      	blx	r3
				
			} else 
			
			{ // LOG ERROR
			}
			if(Cl_MacRetval1 == CL_OK)
   8e064:	79fb      	ldrb	r3, [r7, #7]
   8e066:	2b00      	cmp	r3, #0
   8e068:	d108      	bne.n	8e07c <Cl_MacCheckforConsoleMessage+0x48>
			{
			Cl_MacRetval1 = Cl_Console_Read_Message_Ready_Status(); // Reads the status of the data buffer populated by the timer console read interrupt.
   8e06a:	4b10      	ldr	r3, [pc, #64]	; (8e0ac <Cl_MacCheckforConsoleMessage+0x78>)
   8e06c:	4798      	blx	r3
   8e06e:	4603      	mov	r3, r0
   8e070:	71fb      	strb	r3, [r7, #7]
			ASSERT_ERROR(Cl_MacRetval1);
   8e072:	79fb      	ldrb	r3, [r7, #7]
   8e074:	2b00      	cmp	r3, #0
   8e076:	d001      	beq.n	8e07c <Cl_MacCheckforConsoleMessage+0x48>
   8e078:	4b0a      	ldr	r3, [pc, #40]	; (8e0a4 <Cl_MacCheckforConsoleMessage+0x70>)
   8e07a:	4798      	blx	r3
			} 
			else { //LOG ERROR
			}
			
			if(Cl_MacRetval1== CL_OK)
   8e07c:	79fb      	ldrb	r3, [r7, #7]
   8e07e:	2b00      	cmp	r3, #0
   8e080:	d108      	bne.n	8e094 <Cl_MacCheckforConsoleMessage+0x60>
			{
		
				Cl_MacRetval1 = Cl_Mac_Create_ConsoleEvent(); // Create tyhe event and put it in the queue
   8e082:	4b0b      	ldr	r3, [pc, #44]	; (8e0b0 <Cl_MacCheckforConsoleMessage+0x7c>)
   8e084:	4798      	blx	r3
   8e086:	4603      	mov	r3, r0
   8e088:	71fb      	strb	r3, [r7, #7]
				ASSERT_ERROR(Cl_MacRetval1);
   8e08a:	79fb      	ldrb	r3, [r7, #7]
   8e08c:	2b00      	cmp	r3, #0
   8e08e:	d001      	beq.n	8e094 <Cl_MacCheckforConsoleMessage+0x60>
   8e090:	4b04      	ldr	r3, [pc, #16]	; (8e0a4 <Cl_MacCheckforConsoleMessage+0x70>)
   8e092:	4798      	blx	r3
				
			} 
			else {// LOG ERROR
			}
			
			return CL_OK; 
   8e094:	2300      	movs	r3, #0
}
   8e096:	4618      	mov	r0, r3
   8e098:	3708      	adds	r7, #8
   8e09a:	46bd      	mov	sp, r7
   8e09c:	bd80      	pop	{r7, pc}
   8e09e:	bf00      	nop
   8e0a0:	0009b6a1 	.word	0x0009b6a1
   8e0a4:	00088fc1 	.word	0x00088fc1
   8e0a8:	0009b705 	.word	0x0009b705
   8e0ac:	0009b6e1 	.word	0x0009b6e1
   8e0b0:	0009b86d 	.word	0x0009b86d

0008e0b4 <Cl_MacCreate_Macevent>:
 * \Globals used : 
 */


Cl_ReturnCodeType	Cl_MacCreate_Macevent(void)
{
   8e0b4:	b480      	push	{r7}
   8e0b6:	b083      	sub	sp, #12
   8e0b8:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType Cl_Mac_retVal = CL_OK;
   8e0ba:	2300      	movs	r3, #0
   8e0bc:	71bb      	strb	r3, [r7, #6]
	Cl_Uint8Type tempcount;
	
	Cl_MacNewEvent  = false;
   8e0be:	4ba1      	ldr	r3, [pc, #644]	; (8e344 <Cl_MacCreate_Macevent+0x290>)
   8e0c0:	2200      	movs	r2, #0
   8e0c2:	701a      	strb	r2, [r3, #0]
	Cl_MacEvent = EVT_NULL;
   8e0c4:	4ba0      	ldr	r3, [pc, #640]	; (8e348 <Cl_MacCreate_Macevent+0x294>)
   8e0c6:	2200      	movs	r2, #0
   8e0c8:	701a      	strb	r2, [r3, #0]
	
	queue_sequence_counter++;
   8e0ca:	4ba0      	ldr	r3, [pc, #640]	; (8e34c <Cl_MacCreate_Macevent+0x298>)
   8e0cc:	781b      	ldrb	r3, [r3, #0]
   8e0ce:	3301      	adds	r3, #1
   8e0d0:	b2da      	uxtb	r2, r3
   8e0d2:	4b9e      	ldr	r3, [pc, #632]	; (8e34c <Cl_MacCreate_Macevent+0x298>)
   8e0d4:	701a      	strb	r2, [r3, #0]
	if(queue_sequence_counter > 5){
   8e0d6:	4b9d      	ldr	r3, [pc, #628]	; (8e34c <Cl_MacCreate_Macevent+0x298>)
   8e0d8:	781b      	ldrb	r3, [r3, #0]
   8e0da:	2b05      	cmp	r3, #5
   8e0dc:	d902      	bls.n	8e0e4 <Cl_MacCreate_Macevent+0x30>
		
		queue_sequence_counter = 1;
   8e0de:	4b9b      	ldr	r3, [pc, #620]	; (8e34c <Cl_MacCreate_Macevent+0x298>)
   8e0e0:	2201      	movs	r2, #1
   8e0e2:	701a      	strb	r2, [r3, #0]
	}
	
	switch(queue_sequence_counter){
   8e0e4:	4b99      	ldr	r3, [pc, #612]	; (8e34c <Cl_MacCreate_Macevent+0x298>)
   8e0e6:	781b      	ldrb	r3, [r3, #0]
   8e0e8:	3b01      	subs	r3, #1
   8e0ea:	2b04      	cmp	r3, #4
   8e0ec:	f200 8169 	bhi.w	8e3c2 <Cl_MacCreate_Macevent+0x30e>
   8e0f0:	a201      	add	r2, pc, #4	; (adr r2, 8e0f8 <Cl_MacCreate_Macevent+0x44>)
   8e0f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8e0f6:	bf00      	nop
   8e0f8:	0008e10d 	.word	0x0008e10d
   8e0fc:	0008e18f 	.word	0x0008e18f
   8e100:	0008e211 	.word	0x0008e211
   8e104:	0008e293 	.word	0x0008e293
   8e108:	0008e315 	.word	0x0008e315
		
		case 1 : // bc switching
		
		if ((Cl_MacEventQueueBc.Cl_MacNewEvent) && (Cl_MacEventQueueBc.Cl_MacNewEventcount > 0))
   8e10c:	4b90      	ldr	r3, [pc, #576]	; (8e350 <Cl_MacCreate_Macevent+0x29c>)
   8e10e:	785b      	ldrb	r3, [r3, #1]
   8e110:	2b00      	cmp	r3, #0
   8e112:	d035      	beq.n	8e180 <Cl_MacCreate_Macevent+0xcc>
   8e114:	4b8e      	ldr	r3, [pc, #568]	; (8e350 <Cl_MacCreate_Macevent+0x29c>)
   8e116:	781b      	ldrb	r3, [r3, #0]
   8e118:	2b00      	cmp	r3, #0
   8e11a:	d031      	beq.n	8e180 <Cl_MacCreate_Macevent+0xcc>
		{
			

			Cl_MacNewEvent = true;
   8e11c:	4b89      	ldr	r3, [pc, #548]	; (8e344 <Cl_MacCreate_Macevent+0x290>)
   8e11e:	2201      	movs	r2, #1
   8e120:	701a      	strb	r2, [r3, #0]
			Cl_MacEvent = Cl_MacEventQueueBc.Cl_MacEvent[0];
   8e122:	4b8b      	ldr	r3, [pc, #556]	; (8e350 <Cl_MacCreate_Macevent+0x29c>)
   8e124:	789a      	ldrb	r2, [r3, #2]
   8e126:	4b88      	ldr	r3, [pc, #544]	; (8e348 <Cl_MacCreate_Macevent+0x294>)
   8e128:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueueBc.Cl_MacNewEventcount--;
   8e12a:	4b89      	ldr	r3, [pc, #548]	; (8e350 <Cl_MacCreate_Macevent+0x29c>)
   8e12c:	781b      	ldrb	r3, [r3, #0]
   8e12e:	3b01      	subs	r3, #1
   8e130:	b2da      	uxtb	r2, r3
   8e132:	4b87      	ldr	r3, [pc, #540]	; (8e350 <Cl_MacCreate_Macevent+0x29c>)
   8e134:	701a      	strb	r2, [r3, #0]
			
			for (tempcount =0 ;tempcount < Cl_MacEventQueueBc.Cl_MacNewEventcount;tempcount++ )
   8e136:	2300      	movs	r3, #0
   8e138:	71fb      	strb	r3, [r7, #7]
   8e13a:	e01a      	b.n	8e172 <Cl_MacCreate_Macevent+0xbe>
			{
				if(tempcount < MAC_EVENT_COUNT_MAX)
   8e13c:	79fb      	ldrb	r3, [r7, #7]
   8e13e:	2b09      	cmp	r3, #9
   8e140:	d80a      	bhi.n	8e158 <Cl_MacCreate_Macevent+0xa4>
				{
					Cl_MacEventQueueBc.Cl_MacEvent[tempcount] = Cl_MacEventQueueBc.Cl_MacEvent[tempcount+1];
   8e142:	79fb      	ldrb	r3, [r7, #7]
   8e144:	79fa      	ldrb	r2, [r7, #7]
   8e146:	3201      	adds	r2, #1
   8e148:	4981      	ldr	r1, [pc, #516]	; (8e350 <Cl_MacCreate_Macevent+0x29c>)
   8e14a:	440a      	add	r2, r1
   8e14c:	7891      	ldrb	r1, [r2, #2]
   8e14e:	4a80      	ldr	r2, [pc, #512]	; (8e350 <Cl_MacCreate_Macevent+0x29c>)
   8e150:	4413      	add	r3, r2
   8e152:	460a      	mov	r2, r1
   8e154:	709a      	strb	r2, [r3, #2]
   8e156:	e009      	b.n	8e16c <Cl_MacCreate_Macevent+0xb8>

					
				}
				else
				{
					if(tempcount >= MAC_EVENT_COUNT_MAX)
   8e158:	79fb      	ldrb	r3, [r7, #7]
   8e15a:	2b09      	cmp	r3, #9
   8e15c:	d905      	bls.n	8e16a <Cl_MacCreate_Macevent+0xb6>
					{
						Cl_MacEventQueueBc.Cl_MacEvent[tempcount] = EVT_NULL;
   8e15e:	79fb      	ldrb	r3, [r7, #7]
   8e160:	4a7b      	ldr	r2, [pc, #492]	; (8e350 <Cl_MacCreate_Macevent+0x29c>)
   8e162:	4413      	add	r3, r2
   8e164:	2200      	movs	r2, #0
   8e166:	709a      	strb	r2, [r3, #2]
					}
					// handle error, raise alarm. system stops
					break; //handle exception
   8e168:	e008      	b.n	8e17c <Cl_MacCreate_Macevent+0xc8>
   8e16a:	e007      	b.n	8e17c <Cl_MacCreate_Macevent+0xc8>

			Cl_MacNewEvent = true;
			Cl_MacEvent = Cl_MacEventQueueBc.Cl_MacEvent[0];
			Cl_MacEventQueueBc.Cl_MacNewEventcount--;
			
			for (tempcount =0 ;tempcount < Cl_MacEventQueueBc.Cl_MacNewEventcount;tempcount++ )
   8e16c:	79fb      	ldrb	r3, [r7, #7]
   8e16e:	3301      	adds	r3, #1
   8e170:	71fb      	strb	r3, [r7, #7]
   8e172:	4b77      	ldr	r3, [pc, #476]	; (8e350 <Cl_MacCreate_Macevent+0x29c>)
   8e174:	781b      	ldrb	r3, [r3, #0]
   8e176:	79fa      	ldrb	r2, [r7, #7]
   8e178:	429a      	cmp	r2, r3
   8e17a:	d3df      	bcc.n	8e13c <Cl_MacCreate_Macevent+0x88>
	
	switch(queue_sequence_counter){
		
		case 1 : // bc switching
		
		if ((Cl_MacEventQueueBc.Cl_MacNewEvent) && (Cl_MacEventQueueBc.Cl_MacNewEventcount > 0))
   8e17c:	bf00      	nop
		else{
			Cl_MacNewEvent = false;
			Cl_MacEvent = EVT_NULL;
		}
		
		break;
   8e17e:	e120      	b.n	8e3c2 <Cl_MacCreate_Macevent+0x30e>
			}
			
			
		}
		else{
			Cl_MacNewEvent = false;
   8e180:	4b70      	ldr	r3, [pc, #448]	; (8e344 <Cl_MacCreate_Macevent+0x290>)
   8e182:	2200      	movs	r2, #0
   8e184:	701a      	strb	r2, [r3, #0]
			Cl_MacEvent = EVT_NULL;
   8e186:	4b70      	ldr	r3, [pc, #448]	; (8e348 <Cl_MacCreate_Macevent+0x294>)
   8e188:	2200      	movs	r2, #0
   8e18a:	701a      	strb	r2, [r3, #0]
		}
		
		break;
   8e18c:	e119      	b.n	8e3c2 <Cl_MacCreate_Macevent+0x30e>
		
		case 2 : // serial data
		
		if ((Cl_MacEventQueue3.Cl_MacNewEvent) && (Cl_MacEventQueue3.Cl_MacNewEventcount > 0))
   8e18e:	4b71      	ldr	r3, [pc, #452]	; (8e354 <Cl_MacCreate_Macevent+0x2a0>)
   8e190:	785b      	ldrb	r3, [r3, #1]
   8e192:	2b00      	cmp	r3, #0
   8e194:	d035      	beq.n	8e202 <Cl_MacCreate_Macevent+0x14e>
   8e196:	4b6f      	ldr	r3, [pc, #444]	; (8e354 <Cl_MacCreate_Macevent+0x2a0>)
   8e198:	781b      	ldrb	r3, [r3, #0]
   8e19a:	2b00      	cmp	r3, #0
   8e19c:	d031      	beq.n	8e202 <Cl_MacCreate_Macevent+0x14e>
		{
	

			Cl_MacNewEvent = true;
   8e19e:	4b69      	ldr	r3, [pc, #420]	; (8e344 <Cl_MacCreate_Macevent+0x290>)
   8e1a0:	2201      	movs	r2, #1
   8e1a2:	701a      	strb	r2, [r3, #0]
			Cl_MacEvent = Cl_MacEventQueue3.Cl_MacEvent[0];
   8e1a4:	4b6b      	ldr	r3, [pc, #428]	; (8e354 <Cl_MacCreate_Macevent+0x2a0>)
   8e1a6:	789a      	ldrb	r2, [r3, #2]
   8e1a8:	4b67      	ldr	r3, [pc, #412]	; (8e348 <Cl_MacCreate_Macevent+0x294>)
   8e1aa:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue3.Cl_MacNewEventcount--;
   8e1ac:	4b69      	ldr	r3, [pc, #420]	; (8e354 <Cl_MacCreate_Macevent+0x2a0>)
   8e1ae:	781b      	ldrb	r3, [r3, #0]
   8e1b0:	3b01      	subs	r3, #1
   8e1b2:	b2da      	uxtb	r2, r3
   8e1b4:	4b67      	ldr	r3, [pc, #412]	; (8e354 <Cl_MacCreate_Macevent+0x2a0>)
   8e1b6:	701a      	strb	r2, [r3, #0]
	
			for (tempcount =0 ;tempcount < Cl_MacEventQueue3.Cl_MacNewEventcount;tempcount++ )
   8e1b8:	2300      	movs	r3, #0
   8e1ba:	71fb      	strb	r3, [r7, #7]
   8e1bc:	e01a      	b.n	8e1f4 <Cl_MacCreate_Macevent+0x140>
			{
				if(tempcount < MAC_EVENT_COUNT_MAX)
   8e1be:	79fb      	ldrb	r3, [r7, #7]
   8e1c0:	2b09      	cmp	r3, #9
   8e1c2:	d80a      	bhi.n	8e1da <Cl_MacCreate_Macevent+0x126>
				{
					Cl_MacEventQueue3.Cl_MacEvent[tempcount] = Cl_MacEventQueue3.Cl_MacEvent[tempcount+1];
   8e1c4:	79fb      	ldrb	r3, [r7, #7]
   8e1c6:	79fa      	ldrb	r2, [r7, #7]
   8e1c8:	3201      	adds	r2, #1
   8e1ca:	4962      	ldr	r1, [pc, #392]	; (8e354 <Cl_MacCreate_Macevent+0x2a0>)
   8e1cc:	440a      	add	r2, r1
   8e1ce:	7891      	ldrb	r1, [r2, #2]
   8e1d0:	4a60      	ldr	r2, [pc, #384]	; (8e354 <Cl_MacCreate_Macevent+0x2a0>)
   8e1d2:	4413      	add	r3, r2
   8e1d4:	460a      	mov	r2, r1
   8e1d6:	709a      	strb	r2, [r3, #2]
   8e1d8:	e009      	b.n	8e1ee <Cl_MacCreate_Macevent+0x13a>

			
				}
				else
				{
					if(tempcount >= MAC_EVENT_COUNT_MAX)
   8e1da:	79fb      	ldrb	r3, [r7, #7]
   8e1dc:	2b09      	cmp	r3, #9
   8e1de:	d905      	bls.n	8e1ec <Cl_MacCreate_Macevent+0x138>
					{
						Cl_MacEventQueue3.Cl_MacEvent[tempcount] = EVT_NULL;
   8e1e0:	79fb      	ldrb	r3, [r7, #7]
   8e1e2:	4a5c      	ldr	r2, [pc, #368]	; (8e354 <Cl_MacCreate_Macevent+0x2a0>)
   8e1e4:	4413      	add	r3, r2
   8e1e6:	2200      	movs	r2, #0
   8e1e8:	709a      	strb	r2, [r3, #2]
					}
					// handle error, raise alarm. system stops
					break; //handle exception
   8e1ea:	e008      	b.n	8e1fe <Cl_MacCreate_Macevent+0x14a>
   8e1ec:	e007      	b.n	8e1fe <Cl_MacCreate_Macevent+0x14a>

			Cl_MacNewEvent = true;
			Cl_MacEvent = Cl_MacEventQueue3.Cl_MacEvent[0];
			Cl_MacEventQueue3.Cl_MacNewEventcount--;
	
			for (tempcount =0 ;tempcount < Cl_MacEventQueue3.Cl_MacNewEventcount;tempcount++ )
   8e1ee:	79fb      	ldrb	r3, [r7, #7]
   8e1f0:	3301      	adds	r3, #1
   8e1f2:	71fb      	strb	r3, [r7, #7]
   8e1f4:	4b57      	ldr	r3, [pc, #348]	; (8e354 <Cl_MacCreate_Macevent+0x2a0>)
   8e1f6:	781b      	ldrb	r3, [r3, #0]
   8e1f8:	79fa      	ldrb	r2, [r7, #7]
   8e1fa:	429a      	cmp	r2, r3
   8e1fc:	d3df      	bcc.n	8e1be <Cl_MacCreate_Macevent+0x10a>
		
		break;
		
		case 2 : // serial data
		
		if ((Cl_MacEventQueue3.Cl_MacNewEvent) && (Cl_MacEventQueue3.Cl_MacNewEventcount > 0))
   8e1fe:	bf00      	nop
		}
	else{
		Cl_MacNewEvent = false;
			Cl_MacEvent = EVT_NULL;
	}
		break;
   8e200:	e0df      	b.n	8e3c2 <Cl_MacCreate_Macevent+0x30e>
			}
	
	
		}
	else{
		Cl_MacNewEvent = false;
   8e202:	4b50      	ldr	r3, [pc, #320]	; (8e344 <Cl_MacCreate_Macevent+0x290>)
   8e204:	2200      	movs	r2, #0
   8e206:	701a      	strb	r2, [r3, #0]
			Cl_MacEvent = EVT_NULL;
   8e208:	4b4f      	ldr	r3, [pc, #316]	; (8e348 <Cl_MacCreate_Macevent+0x294>)
   8e20a:	2200      	movs	r2, #0
   8e20c:	701a      	strb	r2, [r3, #0]
	}
		break;
   8e20e:	e0d8      	b.n	8e3c2 <Cl_MacCreate_Macevent+0x30e>
		case 3: // alarm
		
		 if ((Cl_MacEventQueue4.Cl_MacNewEvent) && (Cl_MacEventQueue4.Cl_MacNewEventcount > 0))
   8e210:	4b51      	ldr	r3, [pc, #324]	; (8e358 <Cl_MacCreate_Macevent+0x2a4>)
   8e212:	785b      	ldrb	r3, [r3, #1]
   8e214:	2b00      	cmp	r3, #0
   8e216:	d035      	beq.n	8e284 <Cl_MacCreate_Macevent+0x1d0>
   8e218:	4b4f      	ldr	r3, [pc, #316]	; (8e358 <Cl_MacCreate_Macevent+0x2a4>)
   8e21a:	781b      	ldrb	r3, [r3, #0]
   8e21c:	2b00      	cmp	r3, #0
   8e21e:	d031      	beq.n	8e284 <Cl_MacCreate_Macevent+0x1d0>
		{
			

			Cl_MacNewEvent = true;
   8e220:	4b48      	ldr	r3, [pc, #288]	; (8e344 <Cl_MacCreate_Macevent+0x290>)
   8e222:	2201      	movs	r2, #1
   8e224:	701a      	strb	r2, [r3, #0]
			Cl_MacEvent = Cl_MacEventQueue4.Cl_MacEvent[0];
   8e226:	4b4c      	ldr	r3, [pc, #304]	; (8e358 <Cl_MacCreate_Macevent+0x2a4>)
   8e228:	789a      	ldrb	r2, [r3, #2]
   8e22a:	4b47      	ldr	r3, [pc, #284]	; (8e348 <Cl_MacCreate_Macevent+0x294>)
   8e22c:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue4.Cl_MacNewEventcount--;
   8e22e:	4b4a      	ldr	r3, [pc, #296]	; (8e358 <Cl_MacCreate_Macevent+0x2a4>)
   8e230:	781b      	ldrb	r3, [r3, #0]
   8e232:	3b01      	subs	r3, #1
   8e234:	b2da      	uxtb	r2, r3
   8e236:	4b48      	ldr	r3, [pc, #288]	; (8e358 <Cl_MacCreate_Macevent+0x2a4>)
   8e238:	701a      	strb	r2, [r3, #0]
			
			for (tempcount =0 ;tempcount < Cl_MacEventQueue4.Cl_MacNewEventcount;tempcount++ )
   8e23a:	2300      	movs	r3, #0
   8e23c:	71fb      	strb	r3, [r7, #7]
   8e23e:	e01a      	b.n	8e276 <Cl_MacCreate_Macevent+0x1c2>
			{
				if(tempcount < MAC_EVENT_COUNT_MAX)
   8e240:	79fb      	ldrb	r3, [r7, #7]
   8e242:	2b09      	cmp	r3, #9
   8e244:	d80a      	bhi.n	8e25c <Cl_MacCreate_Macevent+0x1a8>
				{
					Cl_MacEventQueue4.Cl_MacEvent[tempcount] = Cl_MacEventQueue4.Cl_MacEvent[tempcount+1];
   8e246:	79fb      	ldrb	r3, [r7, #7]
   8e248:	79fa      	ldrb	r2, [r7, #7]
   8e24a:	3201      	adds	r2, #1
   8e24c:	4942      	ldr	r1, [pc, #264]	; (8e358 <Cl_MacCreate_Macevent+0x2a4>)
   8e24e:	440a      	add	r2, r1
   8e250:	7891      	ldrb	r1, [r2, #2]
   8e252:	4a41      	ldr	r2, [pc, #260]	; (8e358 <Cl_MacCreate_Macevent+0x2a4>)
   8e254:	4413      	add	r3, r2
   8e256:	460a      	mov	r2, r1
   8e258:	709a      	strb	r2, [r3, #2]
   8e25a:	e009      	b.n	8e270 <Cl_MacCreate_Macevent+0x1bc>

					
				}
				else
				{
					if(tempcount >= MAC_EVENT_COUNT_MAX)
   8e25c:	79fb      	ldrb	r3, [r7, #7]
   8e25e:	2b09      	cmp	r3, #9
   8e260:	d905      	bls.n	8e26e <Cl_MacCreate_Macevent+0x1ba>
					{
						Cl_MacEventQueue4.Cl_MacEvent[tempcount] = EVT_NULL;
   8e262:	79fb      	ldrb	r3, [r7, #7]
   8e264:	4a3c      	ldr	r2, [pc, #240]	; (8e358 <Cl_MacCreate_Macevent+0x2a4>)
   8e266:	4413      	add	r3, r2
   8e268:	2200      	movs	r2, #0
   8e26a:	709a      	strb	r2, [r3, #2]
					}
					// handle error, raise alarm. system stops
					break; //handle exception
   8e26c:	e008      	b.n	8e280 <Cl_MacCreate_Macevent+0x1cc>
   8e26e:	e007      	b.n	8e280 <Cl_MacCreate_Macevent+0x1cc>

			Cl_MacNewEvent = true;
			Cl_MacEvent = Cl_MacEventQueue4.Cl_MacEvent[0];
			Cl_MacEventQueue4.Cl_MacNewEventcount--;
			
			for (tempcount =0 ;tempcount < Cl_MacEventQueue4.Cl_MacNewEventcount;tempcount++ )
   8e270:	79fb      	ldrb	r3, [r7, #7]
   8e272:	3301      	adds	r3, #1
   8e274:	71fb      	strb	r3, [r7, #7]
   8e276:	4b38      	ldr	r3, [pc, #224]	; (8e358 <Cl_MacCreate_Macevent+0x2a4>)
   8e278:	781b      	ldrb	r3, [r3, #0]
   8e27a:	79fa      	ldrb	r2, [r7, #7]
   8e27c:	429a      	cmp	r2, r3
   8e27e:	d3df      	bcc.n	8e240 <Cl_MacCreate_Macevent+0x18c>
			Cl_MacEvent = EVT_NULL;
	}
		break;
		case 3: // alarm
		
		 if ((Cl_MacEventQueue4.Cl_MacNewEvent) && (Cl_MacEventQueue4.Cl_MacNewEventcount > 0))
   8e280:	bf00      	nop
		else{
		Cl_MacNewEvent = false;
			Cl_MacEvent = EVT_NULL;
	}
		
		break;
   8e282:	e09e      	b.n	8e3c2 <Cl_MacCreate_Macevent+0x30e>
			}
			
			
		}
		else{
		Cl_MacNewEvent = false;
   8e284:	4b2f      	ldr	r3, [pc, #188]	; (8e344 <Cl_MacCreate_Macevent+0x290>)
   8e286:	2200      	movs	r2, #0
   8e288:	701a      	strb	r2, [r3, #0]
			Cl_MacEvent = EVT_NULL;
   8e28a:	4b2f      	ldr	r3, [pc, #188]	; (8e348 <Cl_MacCreate_Macevent+0x294>)
   8e28c:	2200      	movs	r2, #0
   8e28e:	701a      	strb	r2, [r3, #0]
	}
		
		break;
   8e290:	e097      	b.n	8e3c2 <Cl_MacCreate_Macevent+0x30e>
		case 4 : // internal state change
		 if ((Cl_MacEventQueue1.Cl_MacNewEvent) && (Cl_MacEventQueue1.Cl_MacNewEventcount > 0))
   8e292:	4b32      	ldr	r3, [pc, #200]	; (8e35c <Cl_MacCreate_Macevent+0x2a8>)
   8e294:	785b      	ldrb	r3, [r3, #1]
   8e296:	2b00      	cmp	r3, #0
   8e298:	d035      	beq.n	8e306 <Cl_MacCreate_Macevent+0x252>
   8e29a:	4b30      	ldr	r3, [pc, #192]	; (8e35c <Cl_MacCreate_Macevent+0x2a8>)
   8e29c:	781b      	ldrb	r3, [r3, #0]
   8e29e:	2b00      	cmp	r3, #0
   8e2a0:	d031      	beq.n	8e306 <Cl_MacCreate_Macevent+0x252>
			{
				

				Cl_MacNewEvent = true;
   8e2a2:	4b28      	ldr	r3, [pc, #160]	; (8e344 <Cl_MacCreate_Macevent+0x290>)
   8e2a4:	2201      	movs	r2, #1
   8e2a6:	701a      	strb	r2, [r3, #0]
				Cl_MacEvent = Cl_MacEventQueue1.Cl_MacEvent[0];
   8e2a8:	4b2c      	ldr	r3, [pc, #176]	; (8e35c <Cl_MacCreate_Macevent+0x2a8>)
   8e2aa:	789a      	ldrb	r2, [r3, #2]
   8e2ac:	4b26      	ldr	r3, [pc, #152]	; (8e348 <Cl_MacCreate_Macevent+0x294>)
   8e2ae:	701a      	strb	r2, [r3, #0]
				Cl_MacEventQueue1.Cl_MacNewEventcount--;
   8e2b0:	4b2a      	ldr	r3, [pc, #168]	; (8e35c <Cl_MacCreate_Macevent+0x2a8>)
   8e2b2:	781b      	ldrb	r3, [r3, #0]
   8e2b4:	3b01      	subs	r3, #1
   8e2b6:	b2da      	uxtb	r2, r3
   8e2b8:	4b28      	ldr	r3, [pc, #160]	; (8e35c <Cl_MacCreate_Macevent+0x2a8>)
   8e2ba:	701a      	strb	r2, [r3, #0]
				
				for (tempcount =0 ;tempcount < Cl_MacEventQueue1.Cl_MacNewEventcount;tempcount++ )
   8e2bc:	2300      	movs	r3, #0
   8e2be:	71fb      	strb	r3, [r7, #7]
   8e2c0:	e01a      	b.n	8e2f8 <Cl_MacCreate_Macevent+0x244>
				{
					if(tempcount < MAC_EVENT_COUNT_MAX)
   8e2c2:	79fb      	ldrb	r3, [r7, #7]
   8e2c4:	2b09      	cmp	r3, #9
   8e2c6:	d80a      	bhi.n	8e2de <Cl_MacCreate_Macevent+0x22a>
					{
						Cl_MacEventQueue1.Cl_MacEvent[tempcount] = Cl_MacEventQueue1.Cl_MacEvent[tempcount+1];
   8e2c8:	79fb      	ldrb	r3, [r7, #7]
   8e2ca:	79fa      	ldrb	r2, [r7, #7]
   8e2cc:	3201      	adds	r2, #1
   8e2ce:	4923      	ldr	r1, [pc, #140]	; (8e35c <Cl_MacCreate_Macevent+0x2a8>)
   8e2d0:	440a      	add	r2, r1
   8e2d2:	7891      	ldrb	r1, [r2, #2]
   8e2d4:	4a21      	ldr	r2, [pc, #132]	; (8e35c <Cl_MacCreate_Macevent+0x2a8>)
   8e2d6:	4413      	add	r3, r2
   8e2d8:	460a      	mov	r2, r1
   8e2da:	709a      	strb	r2, [r3, #2]
   8e2dc:	e009      	b.n	8e2f2 <Cl_MacCreate_Macevent+0x23e>

						
					}
					else
					{
						if(tempcount >= MAC_EVENT_COUNT_MAX)
   8e2de:	79fb      	ldrb	r3, [r7, #7]
   8e2e0:	2b09      	cmp	r3, #9
   8e2e2:	d905      	bls.n	8e2f0 <Cl_MacCreate_Macevent+0x23c>
						{
							Cl_MacEventQueue1.Cl_MacEvent[tempcount] = EVT_NULL;
   8e2e4:	79fb      	ldrb	r3, [r7, #7]
   8e2e6:	4a1d      	ldr	r2, [pc, #116]	; (8e35c <Cl_MacCreate_Macevent+0x2a8>)
   8e2e8:	4413      	add	r3, r2
   8e2ea:	2200      	movs	r2, #0
   8e2ec:	709a      	strb	r2, [r3, #2]
						}
						// handle error, raise alarm. system stops
						break; //handle exception
   8e2ee:	e008      	b.n	8e302 <Cl_MacCreate_Macevent+0x24e>
   8e2f0:	e007      	b.n	8e302 <Cl_MacCreate_Macevent+0x24e>

				Cl_MacNewEvent = true;
				Cl_MacEvent = Cl_MacEventQueue1.Cl_MacEvent[0];
				Cl_MacEventQueue1.Cl_MacNewEventcount--;
				
				for (tempcount =0 ;tempcount < Cl_MacEventQueue1.Cl_MacNewEventcount;tempcount++ )
   8e2f2:	79fb      	ldrb	r3, [r7, #7]
   8e2f4:	3301      	adds	r3, #1
   8e2f6:	71fb      	strb	r3, [r7, #7]
   8e2f8:	4b18      	ldr	r3, [pc, #96]	; (8e35c <Cl_MacCreate_Macevent+0x2a8>)
   8e2fa:	781b      	ldrb	r3, [r3, #0]
   8e2fc:	79fa      	ldrb	r2, [r7, #7]
   8e2fe:	429a      	cmp	r2, r3
   8e300:	d3df      	bcc.n	8e2c2 <Cl_MacCreate_Macevent+0x20e>
			Cl_MacEvent = EVT_NULL;
	}
		
		break;
		case 4 : // internal state change
		 if ((Cl_MacEventQueue1.Cl_MacNewEvent) && (Cl_MacEventQueue1.Cl_MacNewEventcount > 0))
   8e302:	bf00      	nop
			else{
		Cl_MacNewEvent = false;
			Cl_MacEvent = EVT_NULL;
	}
			
		break;
   8e304:	e05d      	b.n	8e3c2 <Cl_MacCreate_Macevent+0x30e>
				}
				
				
			}
			else{
		Cl_MacNewEvent = false;
   8e306:	4b0f      	ldr	r3, [pc, #60]	; (8e344 <Cl_MacCreate_Macevent+0x290>)
   8e308:	2200      	movs	r2, #0
   8e30a:	701a      	strb	r2, [r3, #0]
			Cl_MacEvent = EVT_NULL;
   8e30c:	4b0e      	ldr	r3, [pc, #56]	; (8e348 <Cl_MacCreate_Macevent+0x294>)
   8e30e:	2200      	movs	r2, #0
   8e310:	701a      	strb	r2, [r3, #0]
	}
			
		break;
   8e312:	e056      	b.n	8e3c2 <Cl_MacCreate_Macevent+0x30e>
		case 5 : // timer events
		if ((Cl_MacEventQueue2.Cl_MacNewEvent) && (Cl_MacEventQueue2.Cl_MacNewEventcount > 0))
   8e314:	4b12      	ldr	r3, [pc, #72]	; (8e360 <Cl_MacCreate_Macevent+0x2ac>)
   8e316:	785b      	ldrb	r3, [r3, #1]
   8e318:	2b00      	cmp	r3, #0
   8e31a:	d04b      	beq.n	8e3b4 <Cl_MacCreate_Macevent+0x300>
   8e31c:	4b10      	ldr	r3, [pc, #64]	; (8e360 <Cl_MacCreate_Macevent+0x2ac>)
   8e31e:	781b      	ldrb	r3, [r3, #0]
   8e320:	2b00      	cmp	r3, #0
   8e322:	d047      	beq.n	8e3b4 <Cl_MacCreate_Macevent+0x300>
		{
			

			Cl_MacNewEvent = true;
   8e324:	4b07      	ldr	r3, [pc, #28]	; (8e344 <Cl_MacCreate_Macevent+0x290>)
   8e326:	2201      	movs	r2, #1
   8e328:	701a      	strb	r2, [r3, #0]
			Cl_MacEvent = Cl_MacEventQueue2.Cl_MacEvent[0];
   8e32a:	4b0d      	ldr	r3, [pc, #52]	; (8e360 <Cl_MacCreate_Macevent+0x2ac>)
   8e32c:	789a      	ldrb	r2, [r3, #2]
   8e32e:	4b06      	ldr	r3, [pc, #24]	; (8e348 <Cl_MacCreate_Macevent+0x294>)
   8e330:	701a      	strb	r2, [r3, #0]
			Cl_MacEventQueue2.Cl_MacNewEventcount--;
   8e332:	4b0b      	ldr	r3, [pc, #44]	; (8e360 <Cl_MacCreate_Macevent+0x2ac>)
   8e334:	781b      	ldrb	r3, [r3, #0]
   8e336:	3b01      	subs	r3, #1
   8e338:	b2da      	uxtb	r2, r3
   8e33a:	4b09      	ldr	r3, [pc, #36]	; (8e360 <Cl_MacCreate_Macevent+0x2ac>)
   8e33c:	701a      	strb	r2, [r3, #0]
			
			for (tempcount =0 ;tempcount < Cl_MacEventQueue2.Cl_MacNewEventcount;tempcount++ )
   8e33e:	2300      	movs	r3, #0
   8e340:	71fb      	strb	r3, [r7, #7]
   8e342:	e02a      	b.n	8e39a <Cl_MacCreate_Macevent+0x2e6>
   8e344:	200719e8 	.word	0x200719e8
   8e348:	200719e6 	.word	0x200719e6
   8e34c:	200719e9 	.word	0x200719e9
   8e350:	200724e4 	.word	0x200724e4
   8e354:	2007242c 	.word	0x2007242c
   8e358:	200722c0 	.word	0x200722c0
   8e35c:	2007231c 	.word	0x2007231c
   8e360:	20072198 	.word	0x20072198
			{
				if(tempcount < MAC_EVENT_COUNT_MAX)
   8e364:	79fb      	ldrb	r3, [r7, #7]
   8e366:	2b09      	cmp	r3, #9
   8e368:	d80a      	bhi.n	8e380 <Cl_MacCreate_Macevent+0x2cc>
				{
					Cl_MacEventQueue2.Cl_MacEvent[tempcount] = Cl_MacEventQueue2.Cl_MacEvent[tempcount+1];
   8e36a:	79fb      	ldrb	r3, [r7, #7]
   8e36c:	79fa      	ldrb	r2, [r7, #7]
   8e36e:	3201      	adds	r2, #1
   8e370:	4917      	ldr	r1, [pc, #92]	; (8e3d0 <Cl_MacCreate_Macevent+0x31c>)
   8e372:	440a      	add	r2, r1
   8e374:	7891      	ldrb	r1, [r2, #2]
   8e376:	4a16      	ldr	r2, [pc, #88]	; (8e3d0 <Cl_MacCreate_Macevent+0x31c>)
   8e378:	4413      	add	r3, r2
   8e37a:	460a      	mov	r2, r1
   8e37c:	709a      	strb	r2, [r3, #2]
   8e37e:	e009      	b.n	8e394 <Cl_MacCreate_Macevent+0x2e0>

					
				}
				else
				{
					if(tempcount >= MAC_EVENT_COUNT_MAX)
   8e380:	79fb      	ldrb	r3, [r7, #7]
   8e382:	2b09      	cmp	r3, #9
   8e384:	d905      	bls.n	8e392 <Cl_MacCreate_Macevent+0x2de>
					{
						Cl_MacEventQueue2.Cl_MacEvent[tempcount] = EVT_NULL;
   8e386:	79fb      	ldrb	r3, [r7, #7]
   8e388:	4a11      	ldr	r2, [pc, #68]	; (8e3d0 <Cl_MacCreate_Macevent+0x31c>)
   8e38a:	4413      	add	r3, r2
   8e38c:	2200      	movs	r2, #0
   8e38e:	709a      	strb	r2, [r3, #2]
					}
					// handle error, raise alarm. system stops
					break; //handle exception
   8e390:	e008      	b.n	8e3a4 <Cl_MacCreate_Macevent+0x2f0>
   8e392:	e007      	b.n	8e3a4 <Cl_MacCreate_Macevent+0x2f0>

			Cl_MacNewEvent = true;
			Cl_MacEvent = Cl_MacEventQueue2.Cl_MacEvent[0];
			Cl_MacEventQueue2.Cl_MacNewEventcount--;
			
			for (tempcount =0 ;tempcount < Cl_MacEventQueue2.Cl_MacNewEventcount;tempcount++ )
   8e394:	79fb      	ldrb	r3, [r7, #7]
   8e396:	3301      	adds	r3, #1
   8e398:	71fb      	strb	r3, [r7, #7]
   8e39a:	4b0d      	ldr	r3, [pc, #52]	; (8e3d0 <Cl_MacCreate_Macevent+0x31c>)
   8e39c:	781b      	ldrb	r3, [r3, #0]
   8e39e:	79fa      	ldrb	r2, [r7, #7]
   8e3a0:	429a      	cmp	r2, r3
   8e3a2:	d3df      	bcc.n	8e364 <Cl_MacCreate_Macevent+0x2b0>
					}
					// handle error, raise alarm. system stops
					break; //handle exception
				}
			}
			Cl_MacEventQueue2.Cl_MacEvent[Cl_MacEventQueue2.Cl_MacNewEventcount] = 0;
   8e3a4:	4b0a      	ldr	r3, [pc, #40]	; (8e3d0 <Cl_MacCreate_Macevent+0x31c>)
   8e3a6:	781b      	ldrb	r3, [r3, #0]
   8e3a8:	461a      	mov	r2, r3
   8e3aa:	4b09      	ldr	r3, [pc, #36]	; (8e3d0 <Cl_MacCreate_Macevent+0x31c>)
   8e3ac:	4413      	add	r3, r2
   8e3ae:	2200      	movs	r2, #0
   8e3b0:	709a      	strb	r2, [r3, #2]
		{
			Cl_MacNewEvent = false;
			Cl_MacEvent = EVT_NULL;
			
		}
		break;
   8e3b2:	e005      	b.n	8e3c0 <Cl_MacCreate_Macevent+0x30c>
			
			
		}
		else
		{
			Cl_MacNewEvent = false;
   8e3b4:	4b07      	ldr	r3, [pc, #28]	; (8e3d4 <Cl_MacCreate_Macevent+0x320>)
   8e3b6:	2200      	movs	r2, #0
   8e3b8:	701a      	strb	r2, [r3, #0]
			Cl_MacEvent = EVT_NULL;
   8e3ba:	4b07      	ldr	r3, [pc, #28]	; (8e3d8 <Cl_MacCreate_Macevent+0x324>)
   8e3bc:	2200      	movs	r2, #0
   8e3be:	701a      	strb	r2, [r3, #0]
			
		}
		break;
   8e3c0:	bf00      	nop
			
			
		}
	*/

	return CL_OK;
   8e3c2:	2300      	movs	r3, #0
}
   8e3c4:	4618      	mov	r0, r3
   8e3c6:	370c      	adds	r7, #12
   8e3c8:	46bd      	mov	sp, r7
   8e3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
   8e3ce:	4770      	bx	lr
   8e3d0:	20072198 	.word	0x20072198
   8e3d4:	200719e8 	.word	0x200719e8
   8e3d8:	200719e6 	.word	0x200719e6

0008e3dc <Cl_Mac_ClearEvents>:
 * \return CL_OK on success.
 * \Globals used : 
 */

Cl_ReturnCodeType Cl_Mac_ClearEvents(void)
{
   8e3dc:	b480      	push	{r7}
   8e3de:	af00      	add	r7, sp, #0
	
	return CL_OK;
   8e3e0:	2300      	movs	r3, #0
	
}
   8e3e2:	4618      	mov	r0, r3
   8e3e4:	46bd      	mov	sp, r7
   8e3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
   8e3ea:	4770      	bx	lr

0008e3ec <Cl_Mac_CheckforAlarms>:
 */



Cl_ReturnCodeType Cl_Mac_CheckforAlarms(void)
{
   8e3ec:	b580      	push	{r7, lr}
   8e3ee:	b082      	sub	sp, #8
   8e3f0:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType Cl_mac_retval;
	
	Cl_mac_retval = Cl_alarms_scanforAlarms();
   8e3f2:	4b07      	ldr	r3, [pc, #28]	; (8e410 <Cl_Mac_CheckforAlarms+0x24>)
   8e3f4:	4798      	blx	r3
   8e3f6:	4603      	mov	r3, r0
   8e3f8:	71fb      	strb	r3, [r7, #7]
	ASSERT_ERROR(Cl_mac_retval);
   8e3fa:	79fb      	ldrb	r3, [r7, #7]
   8e3fc:	2b00      	cmp	r3, #0
   8e3fe:	d001      	beq.n	8e404 <Cl_Mac_CheckforAlarms+0x18>
   8e400:	4b04      	ldr	r3, [pc, #16]	; (8e414 <Cl_Mac_CheckforAlarms+0x28>)
   8e402:	4798      	blx	r3
	if(Cl_mac_retval != CL_OK)
	{
		// handle error
	}
	
		return CL_OK;
   8e404:	2300      	movs	r3, #0
}
   8e406:	4618      	mov	r0, r3
   8e408:	3708      	adds	r7, #8
   8e40a:	46bd      	mov	sp, r7
   8e40c:	bd80      	pop	{r7, pc}
   8e40e:	bf00      	nop
   8e410:	00081549 	.word	0x00081549
   8e414:	00088fc1 	.word	0x00088fc1

0008e418 <Cl_Mac_CheckforBCEvent>:

Cl_ReturnCodeType Cl_Mac_CheckforBCEvent(void)
{
   8e418:	b580      	push	{r7, lr}
   8e41a:	b082      	sub	sp, #8
   8e41c:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType Cl_mac_retval;
	
	Cl_mac_retval = Cl_CheckBcEvent();
   8e41e:	4b07      	ldr	r3, [pc, #28]	; (8e43c <Cl_Mac_CheckforBCEvent+0x24>)
   8e420:	4798      	blx	r3
   8e422:	4603      	mov	r3, r0
   8e424:	71fb      	strb	r3, [r7, #7]
	ASSERT_ERROR(Cl_mac_retval);
   8e426:	79fb      	ldrb	r3, [r7, #7]
   8e428:	2b00      	cmp	r3, #0
   8e42a:	d001      	beq.n	8e430 <Cl_Mac_CheckforBCEvent+0x18>
   8e42c:	4b04      	ldr	r3, [pc, #16]	; (8e440 <Cl_Mac_CheckforBCEvent+0x28>)
   8e42e:	4798      	blx	r3
	if(Cl_mac_retval != CL_OK)
	{
		// handle error
	}
	
	return CL_OK;
   8e430:	2300      	movs	r3, #0
}
   8e432:	4618      	mov	r0, r3
   8e434:	3708      	adds	r7, #8
   8e436:	46bd      	mov	sp, r7
   8e438:	bd80      	pop	{r7, pc}
   8e43a:	bf00      	nop
   8e43c:	00082f95 	.word	0x00082f95
   8e440:	00088fc1 	.word	0x00088fc1

0008e444 <Cl_SysStat_System_Status_Query>:
static uint8_t Count_500ms =0;
extern float cl_utilities_CalConductivity(uint16_t ,float);
float PS1_bar =0,PS2_bar =0,PS3_bar =0;

Cl_ReturnCodeType 		Cl_SysStat_System_Status_Query(void)
{
   8e444:	b580      	push	{r7, lr}
   8e446:	b098      	sub	sp, #96	; 0x60
   8e448:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType RetVal;
	Sys_statusType sv_sys_statbuffer;
	int16_t temp,temp1, raw_data =0, cal_temp =0;
   8e44a:	2300      	movs	r3, #0
   8e44c:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
   8e450:	2300      	movs	r3, #0
   8e452:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	
	 RetVal = cl_memset((Cl_Uint8Type*)&sv_sys_statbuffer , sizeof(sv_sys_statbuffer)) ;
   8e456:	1d3b      	adds	r3, r7, #4
   8e458:	4618      	mov	r0, r3
   8e45a:	2156      	movs	r1, #86	; 0x56
   8e45c:	4b97      	ldr	r3, [pc, #604]	; (8e6bc <Cl_SysStat_System_Status_Query+0x278>)
   8e45e:	4798      	blx	r3
   8e460:	4603      	mov	r3, r0
   8e462:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	 #ifndef PLATFORMSTUB
	 cl_sys_statbuffer.FPcurrentstatus = 1;
   8e466:	4b96      	ldr	r3, [pc, #600]	; (8e6c0 <Cl_SysStat_System_Status_Query+0x27c>)
   8e468:	2201      	movs	r2, #1
   8e46a:	839a      	strh	r2, [r3, #28]
	 cl_sys_statbuffer.DGPstatus = 1;
   8e46c:	4b94      	ldr	r3, [pc, #592]	; (8e6c0 <Cl_SysStat_System_Status_Query+0x27c>)
   8e46e:	2201      	movs	r2, #1
   8e470:	83da      	strh	r2, [r3, #30]


	sv_status_getsystemstatus(&sv_sys_statbuffer);
   8e472:	1d3b      	adds	r3, r7, #4
   8e474:	4618      	mov	r0, r3
   8e476:	4b93      	ldr	r3, [pc, #588]	; (8e6c4 <Cl_SysStat_System_Status_Query+0x280>)
   8e478:	4798      	blx	r3

	cl_sys_statbuffer.cond_wien_status = sv_sys_statbuffer.cond_wien_status;
   8e47a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
   8e47c:	4b90      	ldr	r3, [pc, #576]	; (8e6c0 <Cl_SysStat_System_Status_Query+0x27c>)
   8e47e:	869a      	strh	r2, [r3, #52]	; 0x34
	cl_sys_statbuffer.abdstatus = sv_sys_statbuffer.abdstatus;
   8e480:	8bfa      	ldrh	r2, [r7, #30]
   8e482:	4b8f      	ldr	r3, [pc, #572]	; (8e6c0 <Cl_SysStat_System_Status_Query+0x27c>)
   8e484:	831a      	strh	r2, [r3, #24]
	if(sv_sys_statbuffer.aptstatus > 0  && sv_sys_statbuffer.aptstatus < 65535)
   8e486:	8abb      	ldrh	r3, [r7, #20]
   8e488:	2b00      	cmp	r3, #0
   8e48a:	d007      	beq.n	8e49c <Cl_SysStat_System_Status_Query+0x58>
   8e48c:	8abb      	ldrh	r3, [r7, #20]
   8e48e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   8e492:	4293      	cmp	r3, r2
   8e494:	d002      	beq.n	8e49c <Cl_SysStat_System_Status_Query+0x58>
	cl_sys_statbuffer.aptstatus = sv_sys_statbuffer.aptstatus;
   8e496:	8aba      	ldrh	r2, [r7, #20]
   8e498:	4b89      	ldr	r3, [pc, #548]	; (8e6c0 <Cl_SysStat_System_Status_Query+0x27c>)
   8e49a:	821a      	strh	r2, [r3, #16]
	if(sv_sys_statbuffer.vptstatus > 0 && sv_sys_statbuffer.vptstatus < 65535)
   8e49c:	8afb      	ldrh	r3, [r7, #22]
   8e49e:	2b00      	cmp	r3, #0
   8e4a0:	d007      	beq.n	8e4b2 <Cl_SysStat_System_Status_Query+0x6e>
   8e4a2:	8afb      	ldrh	r3, [r7, #22]
   8e4a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
   8e4a8:	4293      	cmp	r3, r2
   8e4aa:	d002      	beq.n	8e4b2 <Cl_SysStat_System_Status_Query+0x6e>
	cl_sys_statbuffer.vptstatus = sv_sys_statbuffer.vptstatus;
   8e4ac:	8afa      	ldrh	r2, [r7, #22]
   8e4ae:	4b84      	ldr	r3, [pc, #528]	; (8e6c0 <Cl_SysStat_System_Status_Query+0x27c>)
   8e4b0:	825a      	strh	r2, [r3, #18]
	cl_sys_statbuffer.bdstatus = sv_sys_statbuffer.bdstatus;
   8e4b2:	8bba      	ldrh	r2, [r7, #28]
   8e4b4:	4b82      	ldr	r3, [pc, #520]	; (8e6c0 <Cl_SysStat_System_Status_Query+0x27c>)
   8e4b6:	835a      	strh	r2, [r3, #26]
	cl_sys_statbuffer.BP_ON_OFF = sv_sys_statbuffer.BP_ON_OFF;
   8e4b8:	89ba      	ldrh	r2, [r7, #12]
   8e4ba:	4b81      	ldr	r3, [pc, #516]	; (8e6c0 <Cl_SysStat_System_Status_Query+0x27c>)
   8e4bc:	811a      	strh	r2, [r3, #8]
	cl_sys_statbuffer.bldstatus = sv_sys_statbuffer.bldstatus;
   8e4be:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
   8e4c2:	4b7f      	ldr	r3, [pc, #508]	; (8e6c0 <Cl_SysStat_System_Status_Query+0x27c>)
   8e4c4:	87da      	strh	r2, [r3, #62]	; 0x3e
	cl_sys_statbuffer.BPstatus = sv_sys_statbuffer.BPstatus;
   8e4c6:	88fa      	ldrh	r2, [r7, #6]
   8e4c8:	4b7d      	ldr	r3, [pc, #500]	; (8e6c0 <Cl_SysStat_System_Status_Query+0x27c>)
   8e4ca:	805a      	strh	r2, [r3, #2]
	cl_sys_statbuffer.cond_status = sv_sys_statbuffer.cond_status;
   8e4cc:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
   8e4ce:	4b7c      	ldr	r3, [pc, #496]	; (8e6c0 <Cl_SysStat_System_Status_Query+0x27c>)
   8e4d0:	861a      	strh	r2, [r3, #48]	; 0x30
	cl_sys_statbuffer.cond_status_dac = sv_sys_statbuffer.cond_status_dac;
   8e4d2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
   8e4d4:	4b7a      	ldr	r3, [pc, #488]	; (8e6c0 <Cl_SysStat_System_Status_Query+0x27c>)
   8e4d6:	865a      	strh	r2, [r3, #50]	; 0x32
	cl_sys_statbuffer.cond_status  = cl_sys_statbuffer.cond_status_dac; // sanjeer - for now  as hardware connection opending  - to be removed
   8e4d8:	4b79      	ldr	r3, [pc, #484]	; (8e6c0 <Cl_SysStat_System_Status_Query+0x27c>)
   8e4da:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
   8e4dc:	4b78      	ldr	r3, [pc, #480]	; (8e6c0 <Cl_SysStat_System_Status_Query+0x27c>)
   8e4de:	861a      	strh	r2, [r3, #48]	; 0x30
	cl_sys_statbuffer.cond_acid = sv_sys_statbuffer.cond_acid;
   8e4e0:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
   8e4e2:	4b77      	ldr	r3, [pc, #476]	; (8e6c0 <Cl_SysStat_System_Status_Query+0x27c>)
   8e4e4:	86da      	strh	r2, [r3, #54]	; 0x36
	cl_sys_statbuffer.cond_bicarb = sv_sys_statbuffer.cond_bicarb;
   8e4e6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
   8e4e8:	4b75      	ldr	r3, [pc, #468]	; (8e6c0 <Cl_SysStat_System_Status_Query+0x27c>)
   8e4ea:	871a      	strh	r2, [r3, #56]	; 0x38
	cl_sys_statbuffer.FPcurrentstatus = sv_sys_statbuffer.FPcurrentstatus;
   8e4ec:	8c3a      	ldrh	r2, [r7, #32]
   8e4ee:	4b74      	ldr	r3, [pc, #464]	; (8e6c0 <Cl_SysStat_System_Status_Query+0x27c>)
   8e4f0:	839a      	strh	r2, [r3, #28]
	cl_sys_statbuffer.DGPstatus = sv_sys_statbuffer.DGPstatus;
   8e4f2:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
   8e4f6:	4b72      	ldr	r3, [pc, #456]	; (8e6c0 <Cl_SysStat_System_Status_Query+0x27c>)
   8e4f8:	83da      	strh	r2, [r3, #30]
	cl_sys_statbuffer.UFPstatus = sv_sys_statbuffer.UFPstatus;
   8e4fa:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
   8e4fc:	4b70      	ldr	r3, [pc, #448]	; (8e6c0 <Cl_SysStat_System_Status_Query+0x27c>)
   8e4fe:	841a      	strh	r2, [r3, #32]
	cl_sys_statbuffer.holder1status = 	sv_sys_statbuffer.holderstatus1;
   8e500:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
   8e504:	2b00      	cmp	r3, #0
   8e506:	bf14      	ite	ne
   8e508:	2301      	movne	r3, #1
   8e50a:	2300      	moveq	r3, #0
   8e50c:	b2da      	uxtb	r2, r3
   8e50e:	4b6c      	ldr	r3, [pc, #432]	; (8e6c0 <Cl_SysStat_System_Status_Query+0x27c>)
   8e510:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	cl_sys_statbuffer.holder2status =   sv_sys_statbuffer.holderstatus2;
   8e514:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
   8e518:	2b00      	cmp	r3, #0
   8e51a:	bf14      	ite	ne
   8e51c:	2301      	movne	r3, #1
   8e51e:	2300      	moveq	r3, #0
   8e520:	b2da      	uxtb	r2, r3
   8e522:	4b67      	ldr	r3, [pc, #412]	; (8e6c0 <Cl_SysStat_System_Status_Query+0x27c>)
   8e524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	cl_sys_statbuffer.bloodpumpdoor = sv_sys_statbuffer.bloodpumpdoor;
   8e528:	793b      	ldrb	r3, [r7, #4]
   8e52a:	2b00      	cmp	r3, #0
   8e52c:	bf14      	ite	ne
   8e52e:	2301      	movne	r3, #1
   8e530:	2300      	moveq	r3, #0
   8e532:	b2da      	uxtb	r2, r3
   8e534:	4b62      	ldr	r3, [pc, #392]	; (8e6c0 <Cl_SysStat_System_Status_Query+0x27c>)
   8e536:	701a      	strb	r2, [r3, #0]
	cl_sys_statbuffer.levelswitch1 = sv_sys_statbuffer.levelswitch1;
   8e538:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
   8e53c:	2b00      	cmp	r3, #0
   8e53e:	bf14      	ite	ne
   8e540:	2301      	movne	r3, #1
   8e542:	2300      	moveq	r3, #0
   8e544:	b2da      	uxtb	r2, r3
   8e546:	4b5e      	ldr	r3, [pc, #376]	; (8e6c0 <Cl_SysStat_System_Status_Query+0x27c>)
   8e548:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

	cl_sys_statbuffer.ps1status = sv_sys_statbuffer.ps1status;
   8e54c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
   8e54e:	4b5c      	ldr	r3, [pc, #368]	; (8e6c0 <Cl_SysStat_System_Status_Query+0x27c>)
   8e550:	845a      	strh	r2, [r3, #34]	; 0x22
	cl_sys_statbuffer.ps2status = sv_sys_statbuffer.ps2status;
   8e552:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
   8e554:	4b5a      	ldr	r3, [pc, #360]	; (8e6c0 <Cl_SysStat_System_Status_Query+0x27c>)
   8e556:	849a      	strh	r2, [r3, #36]	; 0x24
	cl_sys_statbuffer.ps3status = sv_sys_statbuffer.ps3status;
   8e558:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
   8e55a:	4b59      	ldr	r3, [pc, #356]	; (8e6c0 <Cl_SysStat_System_Status_Query+0x27c>)
   8e55c:	84da      	strh	r2, [r3, #38]	; 0x26
	cl_sys_statbuffer.ps4status = sv_sys_statbuffer.ps4status;
   8e55e:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
   8e562:	4b57      	ldr	r3, [pc, #348]	; (8e6c0 <Cl_SysStat_System_Status_Query+0x27c>)
   8e564:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
	cl_sys_statbuffer.UFPstatus = sv_sys_statbuffer.UFPstatus;
   8e568:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
   8e56a:	4b55      	ldr	r3, [pc, #340]	; (8e6c0 <Cl_SysStat_System_Status_Query+0x27c>)
   8e56c:	841a      	strh	r2, [r3, #32]
//	cl_sys_statbuffer.Temp1status = sv_sys_statbuffer.Temp1status;
	raw_data = sv_sys_statbuffer.Temp1status;
   8e56e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
   8e570:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	cal_temp  = (402 *100* raw_data)/(2*32768); 
   8e574:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
   8e578:	f649 5208 	movw	r2, #40200	; 0x9d08
   8e57c:	fb02 f303 	mul.w	r3, r2, r3
   8e580:	2b00      	cmp	r3, #0
   8e582:	da02      	bge.n	8e58a <Cl_SysStat_System_Status_Query+0x146>
   8e584:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   8e588:	33ff      	adds	r3, #255	; 0xff
   8e58a:	141b      	asrs	r3, r3, #16
   8e58c:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	res_temp_lookuptable(cal_temp);
   8e590:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
   8e594:	4618      	mov	r0, r3
   8e596:	4b4c      	ldr	r3, [pc, #304]	; (8e6c8 <Cl_SysStat_System_Status_Query+0x284>)
   8e598:	4798      	blx	r3
	res_temp_value = (res_temp_value*9 + res_temp_value)/10;
   8e59a:	4b4c      	ldr	r3, [pc, #304]	; (8e6cc <Cl_SysStat_System_Status_Query+0x288>)
   8e59c:	681a      	ldr	r2, [r3, #0]
   8e59e:	4b4c      	ldr	r3, [pc, #304]	; (8e6d0 <Cl_SysStat_System_Status_Query+0x28c>)
   8e5a0:	4610      	mov	r0, r2
   8e5a2:	494c      	ldr	r1, [pc, #304]	; (8e6d4 <Cl_SysStat_System_Status_Query+0x290>)
   8e5a4:	4798      	blx	r3
   8e5a6:	4603      	mov	r3, r0
   8e5a8:	4619      	mov	r1, r3
   8e5aa:	4b48      	ldr	r3, [pc, #288]	; (8e6cc <Cl_SysStat_System_Status_Query+0x288>)
   8e5ac:	681a      	ldr	r2, [r3, #0]
   8e5ae:	4b4a      	ldr	r3, [pc, #296]	; (8e6d8 <Cl_SysStat_System_Status_Query+0x294>)
   8e5b0:	4608      	mov	r0, r1
   8e5b2:	4611      	mov	r1, r2
   8e5b4:	4798      	blx	r3
   8e5b6:	4603      	mov	r3, r0
   8e5b8:	461a      	mov	r2, r3
   8e5ba:	4b48      	ldr	r3, [pc, #288]	; (8e6dc <Cl_SysStat_System_Status_Query+0x298>)
   8e5bc:	4610      	mov	r0, r2
   8e5be:	4948      	ldr	r1, [pc, #288]	; (8e6e0 <Cl_SysStat_System_Status_Query+0x29c>)
   8e5c0:	4798      	blx	r3
   8e5c2:	4603      	mov	r3, r0
   8e5c4:	461a      	mov	r2, r3
   8e5c6:	4b41      	ldr	r3, [pc, #260]	; (8e6cc <Cl_SysStat_System_Status_Query+0x288>)
   8e5c8:	601a      	str	r2, [r3, #0]
	cl_sys_statbuffer.Temp1status = res_temp_value  -75;
   8e5ca:	4b40      	ldr	r3, [pc, #256]	; (8e6cc <Cl_SysStat_System_Status_Query+0x288>)
   8e5cc:	681a      	ldr	r2, [r3, #0]
   8e5ce:	4b45      	ldr	r3, [pc, #276]	; (8e6e4 <Cl_SysStat_System_Status_Query+0x2a0>)
   8e5d0:	4610      	mov	r0, r2
   8e5d2:	4945      	ldr	r1, [pc, #276]	; (8e6e8 <Cl_SysStat_System_Status_Query+0x2a4>)
   8e5d4:	4798      	blx	r3
   8e5d6:	4603      	mov	r3, r0
   8e5d8:	461a      	mov	r2, r3
   8e5da:	4b44      	ldr	r3, [pc, #272]	; (8e6ec <Cl_SysStat_System_Status_Query+0x2a8>)
   8e5dc:	4610      	mov	r0, r2
   8e5de:	4798      	blx	r3
   8e5e0:	4603      	mov	r3, r0
   8e5e2:	b29a      	uxth	r2, r3
   8e5e4:	4b36      	ldr	r3, [pc, #216]	; (8e6c0 <Cl_SysStat_System_Status_Query+0x27c>)
   8e5e6:	851a      	strh	r2, [r3, #40]	; 0x28
//	cl_sys_statbuffer.Temp1status = res_temp_value -80 ;			
				
//	cl_sys_statbuffer.Temp2status = sv_sys_statbuffer.Temp2status;
	raw_data = sv_sys_statbuffer.Temp2status;
   8e5e8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
   8e5ea:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	cal_temp  = (402 *100* raw_data)/(2*32768);
   8e5ee:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
   8e5f2:	f649 5208 	movw	r2, #40200	; 0x9d08
   8e5f6:	fb02 f303 	mul.w	r3, r2, r3
   8e5fa:	2b00      	cmp	r3, #0
   8e5fc:	da02      	bge.n	8e604 <Cl_SysStat_System_Status_Query+0x1c0>
   8e5fe:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   8e602:	33ff      	adds	r3, #255	; 0xff
   8e604:	141b      	asrs	r3, r3, #16
   8e606:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	res_temp_lookuptable(cal_temp);
   8e60a:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
   8e60e:	4618      	mov	r0, r3
   8e610:	4b2d      	ldr	r3, [pc, #180]	; (8e6c8 <Cl_SysStat_System_Status_Query+0x284>)
   8e612:	4798      	blx	r3
	res_temp_value = (res_temp_value*9 + res_temp_value)/10;
   8e614:	4b2d      	ldr	r3, [pc, #180]	; (8e6cc <Cl_SysStat_System_Status_Query+0x288>)
   8e616:	681a      	ldr	r2, [r3, #0]
   8e618:	4b2d      	ldr	r3, [pc, #180]	; (8e6d0 <Cl_SysStat_System_Status_Query+0x28c>)
   8e61a:	4610      	mov	r0, r2
   8e61c:	492d      	ldr	r1, [pc, #180]	; (8e6d4 <Cl_SysStat_System_Status_Query+0x290>)
   8e61e:	4798      	blx	r3
   8e620:	4603      	mov	r3, r0
   8e622:	4619      	mov	r1, r3
   8e624:	4b29      	ldr	r3, [pc, #164]	; (8e6cc <Cl_SysStat_System_Status_Query+0x288>)
   8e626:	681a      	ldr	r2, [r3, #0]
   8e628:	4b2b      	ldr	r3, [pc, #172]	; (8e6d8 <Cl_SysStat_System_Status_Query+0x294>)
   8e62a:	4608      	mov	r0, r1
   8e62c:	4611      	mov	r1, r2
   8e62e:	4798      	blx	r3
   8e630:	4603      	mov	r3, r0
   8e632:	461a      	mov	r2, r3
   8e634:	4b29      	ldr	r3, [pc, #164]	; (8e6dc <Cl_SysStat_System_Status_Query+0x298>)
   8e636:	4610      	mov	r0, r2
   8e638:	4929      	ldr	r1, [pc, #164]	; (8e6e0 <Cl_SysStat_System_Status_Query+0x29c>)
   8e63a:	4798      	blx	r3
   8e63c:	4603      	mov	r3, r0
   8e63e:	461a      	mov	r2, r3
   8e640:	4b22      	ldr	r3, [pc, #136]	; (8e6cc <Cl_SysStat_System_Status_Query+0x288>)
   8e642:	601a      	str	r2, [r3, #0]
	cl_sys_statbuffer.Temp2status = res_temp_value -25;
   8e644:	4b21      	ldr	r3, [pc, #132]	; (8e6cc <Cl_SysStat_System_Status_Query+0x288>)
   8e646:	681a      	ldr	r2, [r3, #0]
   8e648:	4b26      	ldr	r3, [pc, #152]	; (8e6e4 <Cl_SysStat_System_Status_Query+0x2a0>)
   8e64a:	4610      	mov	r0, r2
   8e64c:	4928      	ldr	r1, [pc, #160]	; (8e6f0 <Cl_SysStat_System_Status_Query+0x2ac>)
   8e64e:	4798      	blx	r3
   8e650:	4603      	mov	r3, r0
   8e652:	461a      	mov	r2, r3
   8e654:	4b25      	ldr	r3, [pc, #148]	; (8e6ec <Cl_SysStat_System_Status_Query+0x2a8>)
   8e656:	4610      	mov	r0, r2
   8e658:	4798      	blx	r3
   8e65a:	4603      	mov	r3, r0
   8e65c:	b29a      	uxth	r2, r3
   8e65e:	4b18      	ldr	r3, [pc, #96]	; (8e6c0 <Cl_SysStat_System_Status_Query+0x27c>)
   8e660:	855a      	strh	r2, [r3, #42]	; 0x2a
//	cl_sys_statbuffer.Temp2status = res_temp_value +20 -770;
	
//	cl_sys_statbuffer.Temp3status = sv_sys_statbuffer.Temp3status;
	raw_data = sv_sys_statbuffer.Temp3status;
   8e662:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
   8e664:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	cal_temp  = (402 *100* raw_data)/(2*32768);
   8e668:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
   8e66c:	f649 5208 	movw	r2, #40200	; 0x9d08
   8e670:	fb02 f303 	mul.w	r3, r2, r3
   8e674:	2b00      	cmp	r3, #0
   8e676:	da02      	bge.n	8e67e <Cl_SysStat_System_Status_Query+0x23a>
   8e678:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   8e67c:	33ff      	adds	r3, #255	; 0xff
   8e67e:	141b      	asrs	r3, r3, #16
   8e680:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	res_temp_lookuptable(cal_temp);
   8e684:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
   8e688:	4618      	mov	r0, r3
   8e68a:	4b0f      	ldr	r3, [pc, #60]	; (8e6c8 <Cl_SysStat_System_Status_Query+0x284>)
   8e68c:	4798      	blx	r3
	res_temp_value = (res_temp_value*9 + res_temp_value)/10;
   8e68e:	4b0f      	ldr	r3, [pc, #60]	; (8e6cc <Cl_SysStat_System_Status_Query+0x288>)
   8e690:	681a      	ldr	r2, [r3, #0]
   8e692:	4b0f      	ldr	r3, [pc, #60]	; (8e6d0 <Cl_SysStat_System_Status_Query+0x28c>)
   8e694:	4610      	mov	r0, r2
   8e696:	490f      	ldr	r1, [pc, #60]	; (8e6d4 <Cl_SysStat_System_Status_Query+0x290>)
   8e698:	4798      	blx	r3
   8e69a:	4603      	mov	r3, r0
   8e69c:	4619      	mov	r1, r3
   8e69e:	4b0b      	ldr	r3, [pc, #44]	; (8e6cc <Cl_SysStat_System_Status_Query+0x288>)
   8e6a0:	681a      	ldr	r2, [r3, #0]
   8e6a2:	4b0d      	ldr	r3, [pc, #52]	; (8e6d8 <Cl_SysStat_System_Status_Query+0x294>)
   8e6a4:	4608      	mov	r0, r1
   8e6a6:	4611      	mov	r1, r2
   8e6a8:	4798      	blx	r3
   8e6aa:	4603      	mov	r3, r0
   8e6ac:	461a      	mov	r2, r3
   8e6ae:	4b0b      	ldr	r3, [pc, #44]	; (8e6dc <Cl_SysStat_System_Status_Query+0x298>)
   8e6b0:	4610      	mov	r0, r2
   8e6b2:	490b      	ldr	r1, [pc, #44]	; (8e6e0 <Cl_SysStat_System_Status_Query+0x29c>)
   8e6b4:	4798      	blx	r3
   8e6b6:	4603      	mov	r3, r0
   8e6b8:	e01c      	b.n	8e6f4 <Cl_SysStat_System_Status_Query+0x2b0>
   8e6ba:	bf00      	nop
   8e6bc:	000931dd 	.word	0x000931dd
   8e6c0:	20072224 	.word	0x20072224
   8e6c4:	0009a1f5 	.word	0x0009a1f5
   8e6c8:	0008fdd5 	.word	0x0008fdd5
   8e6cc:	20071a58 	.word	0x20071a58
   8e6d0:	000a6959 	.word	0x000a6959
   8e6d4:	41100000 	.word	0x41100000
   8e6d8:	000a6749 	.word	0x000a6749
   8e6dc:	000a6ac1 	.word	0x000a6ac1
   8e6e0:	41200000 	.word	0x41200000
   8e6e4:	000a6745 	.word	0x000a6745
   8e6e8:	42960000 	.word	0x42960000
   8e6ec:	000a6d31 	.word	0x000a6d31
   8e6f0:	41c80000 	.word	0x41c80000
   8e6f4:	461a      	mov	r2, r3
   8e6f6:	4b37      	ldr	r3, [pc, #220]	; (8e7d4 <Cl_SysStat_System_Status_Query+0x390>)
   8e6f8:	601a      	str	r2, [r3, #0]
	cl_sys_statbuffer.Temp3status = res_temp_value + 10 ;
   8e6fa:	4b36      	ldr	r3, [pc, #216]	; (8e7d4 <Cl_SysStat_System_Status_Query+0x390>)
   8e6fc:	681a      	ldr	r2, [r3, #0]
   8e6fe:	4b36      	ldr	r3, [pc, #216]	; (8e7d8 <Cl_SysStat_System_Status_Query+0x394>)
   8e700:	4610      	mov	r0, r2
   8e702:	4936      	ldr	r1, [pc, #216]	; (8e7dc <Cl_SysStat_System_Status_Query+0x398>)
   8e704:	4798      	blx	r3
   8e706:	4603      	mov	r3, r0
   8e708:	461a      	mov	r2, r3
   8e70a:	4b35      	ldr	r3, [pc, #212]	; (8e7e0 <Cl_SysStat_System_Status_Query+0x39c>)
   8e70c:	4610      	mov	r0, r2
   8e70e:	4798      	blx	r3
   8e710:	4603      	mov	r3, r0
   8e712:	b29a      	uxth	r2, r3
   8e714:	4b33      	ldr	r3, [pc, #204]	; (8e7e4 <Cl_SysStat_System_Status_Query+0x3a0>)
   8e716:	859a      	strh	r2, [r3, #44]	; 0x2c
//	cl_sys_statbuffer.Temp3status = res_temp_value +20 - 30 - 80 + 120 ;
	
//	cl_sys_statbuffer.Temp4status = sv_sys_statbuffer.Temp4status;
	raw_data = sv_sys_statbuffer.Temp4status;
   8e718:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
   8e71a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	cal_temp  = (402 *100* raw_data)/(2*32768);
   8e71e:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
   8e722:	f649 5208 	movw	r2, #40200	; 0x9d08
   8e726:	fb02 f303 	mul.w	r3, r2, r3
   8e72a:	2b00      	cmp	r3, #0
   8e72c:	da02      	bge.n	8e734 <Cl_SysStat_System_Status_Query+0x2f0>
   8e72e:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   8e732:	33ff      	adds	r3, #255	; 0xff
   8e734:	141b      	asrs	r3, r3, #16
   8e736:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	res_temp_lookuptable(cal_temp);
   8e73a:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
   8e73e:	4618      	mov	r0, r3
   8e740:	4b29      	ldr	r3, [pc, #164]	; (8e7e8 <Cl_SysStat_System_Status_Query+0x3a4>)
   8e742:	4798      	blx	r3
	res_temp_value = (res_temp_value*9 + res_temp_value)/10;
   8e744:	4b23      	ldr	r3, [pc, #140]	; (8e7d4 <Cl_SysStat_System_Status_Query+0x390>)
   8e746:	681a      	ldr	r2, [r3, #0]
   8e748:	4b28      	ldr	r3, [pc, #160]	; (8e7ec <Cl_SysStat_System_Status_Query+0x3a8>)
   8e74a:	4610      	mov	r0, r2
   8e74c:	4928      	ldr	r1, [pc, #160]	; (8e7f0 <Cl_SysStat_System_Status_Query+0x3ac>)
   8e74e:	4798      	blx	r3
   8e750:	4603      	mov	r3, r0
   8e752:	4619      	mov	r1, r3
   8e754:	4b1f      	ldr	r3, [pc, #124]	; (8e7d4 <Cl_SysStat_System_Status_Query+0x390>)
   8e756:	681a      	ldr	r2, [r3, #0]
   8e758:	4b1f      	ldr	r3, [pc, #124]	; (8e7d8 <Cl_SysStat_System_Status_Query+0x394>)
   8e75a:	4608      	mov	r0, r1
   8e75c:	4611      	mov	r1, r2
   8e75e:	4798      	blx	r3
   8e760:	4603      	mov	r3, r0
   8e762:	461a      	mov	r2, r3
   8e764:	4b23      	ldr	r3, [pc, #140]	; (8e7f4 <Cl_SysStat_System_Status_Query+0x3b0>)
   8e766:	4610      	mov	r0, r2
   8e768:	491c      	ldr	r1, [pc, #112]	; (8e7dc <Cl_SysStat_System_Status_Query+0x398>)
   8e76a:	4798      	blx	r3
   8e76c:	4603      	mov	r3, r0
   8e76e:	461a      	mov	r2, r3
   8e770:	4b18      	ldr	r3, [pc, #96]	; (8e7d4 <Cl_SysStat_System_Status_Query+0x390>)
   8e772:	601a      	str	r2, [r3, #0]
	cl_sys_statbuffer.Temp4status = res_temp_value ;
   8e774:	4b17      	ldr	r3, [pc, #92]	; (8e7d4 <Cl_SysStat_System_Status_Query+0x390>)
   8e776:	681a      	ldr	r2, [r3, #0]
   8e778:	4b19      	ldr	r3, [pc, #100]	; (8e7e0 <Cl_SysStat_System_Status_Query+0x39c>)
   8e77a:	4610      	mov	r0, r2
   8e77c:	4798      	blx	r3
   8e77e:	4603      	mov	r3, r0
   8e780:	b29a      	uxth	r2, r3
   8e782:	4b18      	ldr	r3, [pc, #96]	; (8e7e4 <Cl_SysStat_System_Status_Query+0x3a0>)
   8e784:	85da      	strh	r2, [r3, #46]	; 0x2e
	
	cl_sys_statbuffer.Flowstatus = sv_sys_statbuffer.Flowstatus;
   8e786:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
   8e788:	4b16      	ldr	r3, [pc, #88]	; (8e7e4 <Cl_SysStat_System_Status_Query+0x3a0>)
   8e78a:	879a      	strh	r2, [r3, #60]	; 0x3c
	cl_sys_statbuffer.Heparin_full_marker = sv_sys_statbuffer.Heparin_full_marker;
   8e78c:	8a3a      	ldrh	r2, [r7, #16]
   8e78e:	4b15      	ldr	r3, [pc, #84]	; (8e7e4 <Cl_SysStat_System_Status_Query+0x3a0>)
   8e790:	819a      	strh	r2, [r3, #12]
	cl_sys_statbuffer.Heparin_empty_marker = sv_sys_statbuffer.Heparin_empty_marker;
   8e792:	8a7a      	ldrh	r2, [r7, #18]
   8e794:	4b13      	ldr	r3, [pc, #76]	; (8e7e4 <Cl_SysStat_System_Status_Query+0x3a0>)
   8e796:	81da      	strh	r2, [r3, #14]
	cl_sys_statbuffer.Heparin_rotation_marker = sv_sys_statbuffer.Heparin_rotation_marker;
   8e798:	89fa      	ldrh	r2, [r7, #14]
   8e79a:	4b12      	ldr	r3, [pc, #72]	; (8e7e4 <Cl_SysStat_System_Status_Query+0x3a0>)
   8e79c:	815a      	strh	r2, [r3, #10]
	cl_sys_statbuffer.acid_inlet_status = sv_sys_statbuffer.acid_inlet_status;
   8e79e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
   8e7a2:	4b10      	ldr	r3, [pc, #64]	; (8e7e4 <Cl_SysStat_System_Status_Query+0x3a0>)
   8e7a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	cl_sys_statbuffer.bicarb_inlet_status = sv_sys_statbuffer.bicarb_inlet_status;
   8e7a8:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   8e7ac:	4b0d      	ldr	r3, [pc, #52]	; (8e7e4 <Cl_SysStat_System_Status_Query+0x3a0>)
   8e7ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	cl_sys_statbuffer.BP_DEC = sv_sys_statbuffer.BP_DEC;
   8e7b2:	897a      	ldrh	r2, [r7, #10]
   8e7b4:	4b0b      	ldr	r3, [pc, #44]	; (8e7e4 <Cl_SysStat_System_Status_Query+0x3a0>)
   8e7b6:	80da      	strh	r2, [r3, #6]
	cl_sys_statbuffer.BP_INC = sv_sys_statbuffer.BP_INC;
   8e7b8:	893a      	ldrh	r2, [r7, #8]
   8e7ba:	4b0a      	ldr	r3, [pc, #40]	; (8e7e4 <Cl_SysStat_System_Status_Query+0x3a0>)
   8e7bc:	809a      	strh	r2, [r3, #4]
	cl_sys_statbuffer.PowerFailure = sv_sys_statbuffer.PowerFailure;
   8e7be:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
   8e7c2:	4b08      	ldr	r3, [pc, #32]	; (8e7e4 <Cl_SysStat_System_Status_Query+0x3a0>)
   8e7c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
	{
		sv_cntrl_deactivate_valve((sv_valvetype)1  );
	}
	//testing
#endif
	return CL_OK;
   8e7c8:	2300      	movs	r3, #0
}
   8e7ca:	4618      	mov	r0, r3
   8e7cc:	3760      	adds	r7, #96	; 0x60
   8e7ce:	46bd      	mov	sp, r7
   8e7d0:	bd80      	pop	{r7, pc}
   8e7d2:	bf00      	nop
   8e7d4:	20071a58 	.word	0x20071a58
   8e7d8:	000a6749 	.word	0x000a6749
   8e7dc:	41200000 	.word	0x41200000
   8e7e0:	000a6d31 	.word	0x000a6d31
   8e7e4:	20072224 	.word	0x20072224
   8e7e8:	0008fdd5 	.word	0x0008fdd5
   8e7ec:	000a6959 	.word	0x000a6959
   8e7f0:	41100000 	.word	0x41100000
   8e7f4:	000a6ac1 	.word	0x000a6ac1

0008e7f8 <Cl_SysStat_GetSensor_Status_Query>:

Cl_ReturnCodeType 		Cl_SysStat_GetSensor_Status_Query(Cl_SensorDeviceIdType dataID, uint16_t* pdata)
{
   8e7f8:	b480      	push	{r7}
   8e7fa:	b085      	sub	sp, #20
   8e7fc:	af00      	add	r7, sp, #0
   8e7fe:	4603      	mov	r3, r0
   8e800:	6039      	str	r1, [r7, #0]
   8e802:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType RetVal;
	Cl_Uint16Type tempdata=0;
   8e804:	2300      	movs	r3, #0
   8e806:	81fb      	strh	r3, [r7, #14]
	
		switch(dataID)
   8e808:	79fb      	ldrb	r3, [r7, #7]
   8e80a:	3b01      	subs	r3, #1
   8e80c:	2b2f      	cmp	r3, #47	; 0x2f
   8e80e:	f200 81e1 	bhi.w	8ebd4 <Cl_SysStat_GetSensor_Status_Query+0x3dc>
   8e812:	a201      	add	r2, pc, #4	; (adr r2, 8e818 <Cl_SysStat_GetSensor_Status_Query+0x20>)
   8e814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8e818:	0008ebb7 	.word	0x0008ebb7
   8e81c:	0008ebd5 	.word	0x0008ebd5
   8e820:	0008e93f 	.word	0x0008e93f
   8e824:	0008e94f 	.word	0x0008e94f
   8e828:	0008e95f 	.word	0x0008e95f
   8e82c:	0008e999 	.word	0x0008e999
   8e830:	0008e96f 	.word	0x0008e96f
   8e834:	0008e9a7 	.word	0x0008e9a7
   8e838:	0008e9d1 	.word	0x0008e9d1
   8e83c:	0008e9df 	.word	0x0008e9df
   8e840:	0008e9ed 	.word	0x0008e9ed
   8e844:	0008ea19 	.word	0x0008ea19
   8e848:	0008ea45 	.word	0x0008ea45
   8e84c:	0008ea53 	.word	0x0008ea53
   8e850:	0008ea7f 	.word	0x0008ea7f
   8e854:	0008eaab 	.word	0x0008eaab
   8e858:	0008ebd5 	.word	0x0008ebd5
   8e85c:	0008ead9 	.word	0x0008ead9
   8e860:	0008eb11 	.word	0x0008eb11
   8e864:	0008eb3f 	.word	0x0008eb3f
   8e868:	0008e9b5 	.word	0x0008e9b5
   8e86c:	0008ebd5 	.word	0x0008ebd5
   8e870:	0008eb71 	.word	0x0008eb71
   8e874:	0008eb7f 	.word	0x0008eb7f
   8e878:	0008eba9 	.word	0x0008eba9
   8e87c:	0008e9c3 	.word	0x0008e9c3
   8e880:	0008eb8d 	.word	0x0008eb8d
   8e884:	0008eb9b 	.word	0x0008eb9b
   8e888:	0008e915 	.word	0x0008e915
   8e88c:	0008e923 	.word	0x0008e923
   8e890:	0008e931 	.word	0x0008e931
   8e894:	0008e8f5 	.word	0x0008e8f5
   8e898:	0008e905 	.word	0x0008e905
   8e89c:	0008e8d9 	.word	0x0008e8d9
   8e8a0:	0008e8e7 	.word	0x0008e8e7
   8e8a4:	0008ebc5 	.word	0x0008ebc5
   8e8a8:	0008ebd5 	.word	0x0008ebd5
   8e8ac:	0008ebd5 	.word	0x0008ebd5
   8e8b0:	0008ebd5 	.word	0x0008ebd5
   8e8b4:	0008ebd5 	.word	0x0008ebd5
   8e8b8:	0008ebd5 	.word	0x0008ebd5
   8e8bc:	0008ebd5 	.word	0x0008ebd5
   8e8c0:	0008ebd5 	.word	0x0008ebd5
   8e8c4:	0008ebd5 	.word	0x0008ebd5
   8e8c8:	0008ebd5 	.word	0x0008ebd5
   8e8cc:	0008ebd5 	.word	0x0008ebd5
   8e8d0:	0008ebd5 	.word	0x0008ebd5
   8e8d4:	0008eb63 	.word	0x0008eb63
		{
			case SENSOR_ACID_COND:
			tempdata =  cl_sys_statbuffer.cond_acid;
   8e8d8:	4b87      	ldr	r3, [pc, #540]	; (8eaf8 <Cl_SysStat_GetSensor_Status_Query+0x300>)
   8e8da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
   8e8dc:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8e8de:	683b      	ldr	r3, [r7, #0]
   8e8e0:	89fa      	ldrh	r2, [r7, #14]
   8e8e2:	801a      	strh	r2, [r3, #0]
			break;
   8e8e4:	e177      	b.n	8ebd6 <Cl_SysStat_GetSensor_Status_Query+0x3de>
			case SENSOR_BICARB_COND:
			tempdata =  cl_sys_statbuffer.cond_bicarb;
   8e8e6:	4b84      	ldr	r3, [pc, #528]	; (8eaf8 <Cl_SysStat_GetSensor_Status_Query+0x300>)
   8e8e8:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
   8e8ea:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8e8ec:	683b      	ldr	r3, [r7, #0]
   8e8ee:	89fa      	ldrh	r2, [r7, #14]
   8e8f0:	801a      	strh	r2, [r3, #0]
			break;
   8e8f2:	e170      	b.n	8ebd6 <Cl_SysStat_GetSensor_Status_Query+0x3de>
			case SENSOR_ACID_INLET:
			tempdata =  cl_sys_statbuffer.acid_inlet_status;
   8e8f4:	4b80      	ldr	r3, [pc, #512]	; (8eaf8 <Cl_SysStat_GetSensor_Status_Query+0x300>)
   8e8f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
   8e8fa:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8e8fc:	683b      	ldr	r3, [r7, #0]
   8e8fe:	89fa      	ldrh	r2, [r7, #14]
   8e900:	801a      	strh	r2, [r3, #0]
			break;
   8e902:	e168      	b.n	8ebd6 <Cl_SysStat_GetSensor_Status_Query+0x3de>
			case SENSOR_BICARB_INLET:
			
			tempdata =  cl_sys_statbuffer.bicarb_inlet_status;
   8e904:	4b7c      	ldr	r3, [pc, #496]	; (8eaf8 <Cl_SysStat_GetSensor_Status_Query+0x300>)
   8e906:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
   8e90a:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8e90c:	683b      	ldr	r3, [r7, #0]
   8e90e:	89fa      	ldrh	r2, [r7, #14]
   8e910:	801a      	strh	r2, [r3, #0]
			
			break;
   8e912:	e160      	b.n	8ebd6 <Cl_SysStat_GetSensor_Status_Query+0x3de>
			case SENSOR_BP_INC_M:
			tempdata =  cl_sys_statbuffer.BP_INC;
   8e914:	4b78      	ldr	r3, [pc, #480]	; (8eaf8 <Cl_SysStat_GetSensor_Status_Query+0x300>)
   8e916:	889b      	ldrh	r3, [r3, #4]
   8e918:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8e91a:	683b      	ldr	r3, [r7, #0]
   8e91c:	89fa      	ldrh	r2, [r7, #14]
   8e91e:	801a      	strh	r2, [r3, #0]
			break;
   8e920:	e159      	b.n	8ebd6 <Cl_SysStat_GetSensor_Status_Query+0x3de>
			case SENSOR_BP_DEC_M:
			tempdata =  cl_sys_statbuffer.BP_DEC;
   8e922:	4b75      	ldr	r3, [pc, #468]	; (8eaf8 <Cl_SysStat_GetSensor_Status_Query+0x300>)
   8e924:	88db      	ldrh	r3, [r3, #6]
   8e926:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8e928:	683b      	ldr	r3, [r7, #0]
   8e92a:	89fa      	ldrh	r2, [r7, #14]
   8e92c:	801a      	strh	r2, [r3, #0]
			break;
   8e92e:	e152      	b.n	8ebd6 <Cl_SysStat_GetSensor_Status_Query+0x3de>
			case SENSOR_BP_ON_OFF_M:
			tempdata =  cl_sys_statbuffer.BP_ON_OFF;
   8e930:	4b71      	ldr	r3, [pc, #452]	; (8eaf8 <Cl_SysStat_GetSensor_Status_Query+0x300>)
   8e932:	891b      	ldrh	r3, [r3, #8]
   8e934:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8e936:	683b      	ldr	r3, [r7, #0]
   8e938:	89fa      	ldrh	r2, [r7, #14]
   8e93a:	801a      	strh	r2, [r3, #0]
			break;
   8e93c:	e14b      	b.n	8ebd6 <Cl_SysStat_GetSensor_Status_Query+0x3de>
			case SENSOR_HOLDER1STATUS:
			tempdata =  cl_sys_statbuffer.holder1status;
   8e93e:	4b6e      	ldr	r3, [pc, #440]	; (8eaf8 <Cl_SysStat_GetSensor_Status_Query+0x300>)
   8e940:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   8e944:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8e946:	683b      	ldr	r3, [r7, #0]
   8e948:	89fa      	ldrh	r2, [r7, #14]
   8e94a:	801a      	strh	r2, [r3, #0]
			break;
   8e94c:	e143      	b.n	8ebd6 <Cl_SysStat_GetSensor_Status_Query+0x3de>
			case SENSOR_HOLDER2STATUS:
			tempdata =  cl_sys_statbuffer.holder2status;
   8e94e:	4b6a      	ldr	r3, [pc, #424]	; (8eaf8 <Cl_SysStat_GetSensor_Status_Query+0x300>)
   8e950:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
   8e954:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8e956:	683b      	ldr	r3, [r7, #0]
   8e958:	89fa      	ldrh	r2, [r7, #14]
   8e95a:	801a      	strh	r2, [r3, #0]
			break;
   8e95c:	e13b      	b.n	8ebd6 <Cl_SysStat_GetSensor_Status_Query+0x3de>
			case SENSOR_LEVELSWITCH:
			tempdata =  cl_sys_statbuffer.levelswitch1;
   8e95e:	4b66      	ldr	r3, [pc, #408]	; (8eaf8 <Cl_SysStat_GetSensor_Status_Query+0x300>)
   8e960:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   8e964:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8e966:	683b      	ldr	r3, [r7, #0]
   8e968:	89fa      	ldrh	r2, [r7, #14]
   8e96a:	801a      	strh	r2, [r3, #0]
			break;
   8e96c:	e133      	b.n	8ebd6 <Cl_SysStat_GetSensor_Status_Query+0x3de>

			case SENSOR_COND_STATUS:
			if(!test_sensor_status[SENSOR_COND_STATUS].test_flag)
   8e96e:	4b63      	ldr	r3, [pc, #396]	; (8eafc <Cl_SysStat_GetSensor_Status_Query+0x304>)
   8e970:	7f9b      	ldrb	r3, [r3, #30]
   8e972:	f083 0301 	eor.w	r3, r3, #1
   8e976:	b2db      	uxtb	r3, r3
   8e978:	2b00      	cmp	r3, #0
   8e97a:	d006      	beq.n	8e98a <Cl_SysStat_GetSensor_Status_Query+0x192>
			{
				tempdata =  cl_sys_statbuffer.cond_status;
   8e97c:	4b5e      	ldr	r3, [pc, #376]	; (8eaf8 <Cl_SysStat_GetSensor_Status_Query+0x300>)
   8e97e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   8e980:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8e982:	683b      	ldr	r3, [r7, #0]
   8e984:	89fa      	ldrh	r2, [r7, #14]
   8e986:	801a      	strh	r2, [r3, #0]
			else
			{
				tempdata =  test_sensor_status[SENSOR_COND_STATUS].test_sensord_data;
				*pdata  = tempdata;
			}
			break;
   8e988:	e125      	b.n	8ebd6 <Cl_SysStat_GetSensor_Status_Query+0x3de>
				tempdata =  cl_sys_statbuffer.cond_status;
				*pdata  = tempdata;
			}
			else
			{
				tempdata =  test_sensor_status[SENSOR_COND_STATUS].test_sensord_data;
   8e98a:	4b5c      	ldr	r3, [pc, #368]	; (8eafc <Cl_SysStat_GetSensor_Status_Query+0x304>)
   8e98c:	8b9b      	ldrh	r3, [r3, #28]
   8e98e:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8e990:	683b      	ldr	r3, [r7, #0]
   8e992:	89fa      	ldrh	r2, [r7, #14]
   8e994:	801a      	strh	r2, [r3, #0]
			}
			break;
   8e996:	e11e      	b.n	8ebd6 <Cl_SysStat_GetSensor_Status_Query+0x3de>
			case  SENSOR_COND_WIEN_STATUS:
			tempdata =  cl_sys_statbuffer.cond_wien_status;
   8e998:	4b57      	ldr	r3, [pc, #348]	; (8eaf8 <Cl_SysStat_GetSensor_Status_Query+0x300>)
   8e99a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   8e99c:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8e99e:	683b      	ldr	r3, [r7, #0]
   8e9a0:	89fa      	ldrh	r2, [r7, #14]
   8e9a2:	801a      	strh	r2, [r3, #0]
			break;
   8e9a4:	e117      	b.n	8ebd6 <Cl_SysStat_GetSensor_Status_Query+0x3de>
			case SENSOR_COND_DAC:
			tempdata =  cl_sys_statbuffer.cond_status_dac;
   8e9a6:	4b54      	ldr	r3, [pc, #336]	; (8eaf8 <Cl_SysStat_GetSensor_Status_Query+0x300>)
   8e9a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   8e9aa:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8e9ac:	683b      	ldr	r3, [r7, #0]
   8e9ae:	89fa      	ldrh	r2, [r7, #14]
   8e9b0:	801a      	strh	r2, [r3, #0]
			break;
   8e9b2:	e110      	b.n	8ebd6 <Cl_SysStat_GetSensor_Status_Query+0x3de>
			case SENSOR_FPCURRENTSTATUS:
			tempdata =  cl_sys_statbuffer.FPcurrentstatus;
   8e9b4:	4b50      	ldr	r3, [pc, #320]	; (8eaf8 <Cl_SysStat_GetSensor_Status_Query+0x300>)
   8e9b6:	8b9b      	ldrh	r3, [r3, #28]
   8e9b8:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8e9ba:	683b      	ldr	r3, [r7, #0]
   8e9bc:	89fa      	ldrh	r2, [r7, #14]
   8e9be:	801a      	strh	r2, [r3, #0]
			break;
   8e9c0:	e109      	b.n	8ebd6 <Cl_SysStat_GetSensor_Status_Query+0x3de>
			case SENSOR_UFP_FB:
			tempdata =  cl_sys_statbuffer.UFPstatus;
   8e9c2:	4b4d      	ldr	r3, [pc, #308]	; (8eaf8 <Cl_SysStat_GetSensor_Status_Query+0x300>)
   8e9c4:	8c1b      	ldrh	r3, [r3, #32]
   8e9c6:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8e9c8:	683b      	ldr	r3, [r7, #0]
   8e9ca:	89fa      	ldrh	r2, [r7, #14]
   8e9cc:	801a      	strh	r2, [r3, #0]
			break;
   8e9ce:	e102      	b.n	8ebd6 <Cl_SysStat_GetSensor_Status_Query+0x3de>
			case SENSOR_ABDSTATUS:
			tempdata =  cl_sys_statbuffer.abdstatus;
   8e9d0:	4b49      	ldr	r3, [pc, #292]	; (8eaf8 <Cl_SysStat_GetSensor_Status_Query+0x300>)
   8e9d2:	8b1b      	ldrh	r3, [r3, #24]
   8e9d4:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8e9d6:	683b      	ldr	r3, [r7, #0]
   8e9d8:	89fa      	ldrh	r2, [r7, #14]
   8e9da:	801a      	strh	r2, [r3, #0]
			break;
   8e9dc:	e0fb      	b.n	8ebd6 <Cl_SysStat_GetSensor_Status_Query+0x3de>
			case SENSOR_BDSTATUS:
			tempdata =  cl_sys_statbuffer.bdstatus;
   8e9de:	4b46      	ldr	r3, [pc, #280]	; (8eaf8 <Cl_SysStat_GetSensor_Status_Query+0x300>)
   8e9e0:	8b5b      	ldrh	r3, [r3, #26]
   8e9e2:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8e9e4:	683b      	ldr	r3, [r7, #0]
   8e9e6:	89fa      	ldrh	r2, [r7, #14]
   8e9e8:	801a      	strh	r2, [r3, #0]
			break;
   8e9ea:	e0f4      	b.n	8ebd6 <Cl_SysStat_GetSensor_Status_Query+0x3de>
			case SENSOR_APTSTATUS:
			if(!test_sensor_status[SENSOR_APTSTATUS].test_flag)
   8e9ec:	4b43      	ldr	r3, [pc, #268]	; (8eafc <Cl_SysStat_GetSensor_Status_Query+0x304>)
   8e9ee:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
   8e9f2:	f083 0301 	eor.w	r3, r3, #1
   8e9f6:	b2db      	uxtb	r3, r3
   8e9f8:	2b00      	cmp	r3, #0
   8e9fa:	d006      	beq.n	8ea0a <Cl_SysStat_GetSensor_Status_Query+0x212>
			{
							tempdata =  cl_sys_statbuffer.aptstatus;
   8e9fc:	4b3e      	ldr	r3, [pc, #248]	; (8eaf8 <Cl_SysStat_GetSensor_Status_Query+0x300>)
   8e9fe:	8a1b      	ldrh	r3, [r3, #16]
   8ea00:	81fb      	strh	r3, [r7, #14]
							*pdata  = tempdata;
   8ea02:	683b      	ldr	r3, [r7, #0]
   8ea04:	89fa      	ldrh	r2, [r7, #14]
   8ea06:	801a      	strh	r2, [r3, #0]
			{
				tempdata =  test_sensor_status[SENSOR_APTSTATUS].test_sensord_data;
				*pdata  = tempdata;
			}

			break;
   8ea08:	e0e5      	b.n	8ebd6 <Cl_SysStat_GetSensor_Status_Query+0x3de>
							tempdata =  cl_sys_statbuffer.aptstatus;
							*pdata  = tempdata;
			}
			else
			{
				tempdata =  test_sensor_status[SENSOR_APTSTATUS].test_sensord_data;
   8ea0a:	4b3c      	ldr	r3, [pc, #240]	; (8eafc <Cl_SysStat_GetSensor_Status_Query+0x304>)
   8ea0c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   8ea0e:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8ea10:	683b      	ldr	r3, [r7, #0]
   8ea12:	89fa      	ldrh	r2, [r7, #14]
   8ea14:	801a      	strh	r2, [r3, #0]
			}

			break;
   8ea16:	e0de      	b.n	8ebd6 <Cl_SysStat_GetSensor_Status_Query+0x3de>
			case SENSOR_VPTSTATUS:
			if(!test_sensor_status[SENSOR_VPTSTATUS].test_flag)
   8ea18:	4b38      	ldr	r3, [pc, #224]	; (8eafc <Cl_SysStat_GetSensor_Status_Query+0x304>)
   8ea1a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
   8ea1e:	f083 0301 	eor.w	r3, r3, #1
   8ea22:	b2db      	uxtb	r3, r3
   8ea24:	2b00      	cmp	r3, #0
   8ea26:	d006      	beq.n	8ea36 <Cl_SysStat_GetSensor_Status_Query+0x23e>
			{
				tempdata =  cl_sys_statbuffer.vptstatus;
   8ea28:	4b33      	ldr	r3, [pc, #204]	; (8eaf8 <Cl_SysStat_GetSensor_Status_Query+0x300>)
   8ea2a:	8a5b      	ldrh	r3, [r3, #18]
   8ea2c:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8ea2e:	683b      	ldr	r3, [r7, #0]
   8ea30:	89fa      	ldrh	r2, [r7, #14]
   8ea32:	801a      	strh	r2, [r3, #0]
			else
			{
				tempdata =  test_sensor_status[SENSOR_VPTSTATUS].test_sensord_data;
				*pdata  = tempdata;
			}
			break;
   8ea34:	e0cf      	b.n	8ebd6 <Cl_SysStat_GetSensor_Status_Query+0x3de>
				tempdata =  cl_sys_statbuffer.vptstatus;
				*pdata  = tempdata;
			}
			else
			{
				tempdata =  test_sensor_status[SENSOR_VPTSTATUS].test_sensord_data;
   8ea36:	4b31      	ldr	r3, [pc, #196]	; (8eafc <Cl_SysStat_GetSensor_Status_Query+0x304>)
   8ea38:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   8ea3a:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8ea3c:	683b      	ldr	r3, [r7, #0]
   8ea3e:	89fa      	ldrh	r2, [r7, #14]
   8ea40:	801a      	strh	r2, [r3, #0]
			}
			break;
   8ea42:	e0c8      	b.n	8ebd6 <Cl_SysStat_GetSensor_Status_Query+0x3de>
			case SENSOR_BLDSTATUS:
			tempdata =  cl_sys_statbuffer.bldstatus;
   8ea44:	4b2c      	ldr	r3, [pc, #176]	; (8eaf8 <Cl_SysStat_GetSensor_Status_Query+0x300>)
   8ea46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
   8ea48:	81fb      	strh	r3, [r7, #14]
			*pdata  = tempdata;
   8ea4a:	683b      	ldr	r3, [r7, #0]
   8ea4c:	89fa      	ldrh	r2, [r7, #14]
   8ea4e:	801a      	strh	r2, [r3, #0]
			break;
   8ea50:	e0c1      	b.n	8ebd6 <Cl_SysStat_GetSensor_Status_Query+0x3de>
			case SENSOR_PS1STATUS:
				if(!test_sensor_status[SENSOR_PS1STATUS].test_flag)
   8ea52:	4b2a      	ldr	r3, [pc, #168]	; (8eafc <Cl_SysStat_GetSensor_Status_Query+0x304>)
   8ea54:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   8ea58:	f083 0301 	eor.w	r3, r3, #1
   8ea5c:	b2db      	uxtb	r3, r3
   8ea5e:	2b00      	cmp	r3, #0
   8ea60:	d006      	beq.n	8ea70 <Cl_SysStat_GetSensor_Status_Query+0x278>
					{
						tempdata =  cl_sys_statbuffer.ps1status;
   8ea62:	4b25      	ldr	r3, [pc, #148]	; (8eaf8 <Cl_SysStat_GetSensor_Status_Query+0x300>)
   8ea64:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
   8ea66:	81fb      	strh	r3, [r7, #14]
						*pdata  = tempdata;
   8ea68:	683b      	ldr	r3, [r7, #0]
   8ea6a:	89fa      	ldrh	r2, [r7, #14]
   8ea6c:	801a      	strh	r2, [r3, #0]
				else
					{
						tempdata =  test_sensor_status[SENSOR_PS1STATUS].test_sensord_data;
						*pdata  = tempdata;
					}
			break;
   8ea6e:	e0b2      	b.n	8ebd6 <Cl_SysStat_GetSensor_Status_Query+0x3de>
						tempdata =  cl_sys_statbuffer.ps1status;
						*pdata  = tempdata;
					}
				else
					{
						tempdata =  test_sensor_status[SENSOR_PS1STATUS].test_sensord_data;
   8ea70:	4b22      	ldr	r3, [pc, #136]	; (8eafc <Cl_SysStat_GetSensor_Status_Query+0x304>)
   8ea72:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
   8ea74:	81fb      	strh	r3, [r7, #14]
						*pdata  = tempdata;
   8ea76:	683b      	ldr	r3, [r7, #0]
   8ea78:	89fa      	ldrh	r2, [r7, #14]
   8ea7a:	801a      	strh	r2, [r3, #0]
					}
			break;
   8ea7c:	e0ab      	b.n	8ebd6 <Cl_SysStat_GetSensor_Status_Query+0x3de>
			case SENSOR_PS2STATUS:
				if(!test_sensor_status[SENSOR_PS2STATUS].test_flag)
   8ea7e:	4b1f      	ldr	r3, [pc, #124]	; (8eafc <Cl_SysStat_GetSensor_Status_Query+0x304>)
   8ea80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
   8ea84:	f083 0301 	eor.w	r3, r3, #1
   8ea88:	b2db      	uxtb	r3, r3
   8ea8a:	2b00      	cmp	r3, #0
   8ea8c:	d006      	beq.n	8ea9c <Cl_SysStat_GetSensor_Status_Query+0x2a4>
					{
						tempdata =  cl_sys_statbuffer.ps2status;
   8ea8e:	4b1a      	ldr	r3, [pc, #104]	; (8eaf8 <Cl_SysStat_GetSensor_Status_Query+0x300>)
   8ea90:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   8ea92:	81fb      	strh	r3, [r7, #14]
						*pdata  = tempdata;
   8ea94:	683b      	ldr	r3, [r7, #0]
   8ea96:	89fa      	ldrh	r2, [r7, #14]
   8ea98:	801a      	strh	r2, [r3, #0]
				else
					{
						tempdata =  test_sensor_status[SENSOR_PS2STATUS].test_sensord_data;
						*pdata  = tempdata;
					}
			break;
   8ea9a:	e09c      	b.n	8ebd6 <Cl_SysStat_GetSensor_Status_Query+0x3de>
						tempdata =  cl_sys_statbuffer.ps2status;
						*pdata  = tempdata;
					}
				else
					{
						tempdata =  test_sensor_status[SENSOR_PS2STATUS].test_sensord_data;
   8ea9c:	4b17      	ldr	r3, [pc, #92]	; (8eafc <Cl_SysStat_GetSensor_Status_Query+0x304>)
   8ea9e:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
   8eaa0:	81fb      	strh	r3, [r7, #14]
						*pdata  = tempdata;
   8eaa2:	683b      	ldr	r3, [r7, #0]
   8eaa4:	89fa      	ldrh	r2, [r7, #14]
   8eaa6:	801a      	strh	r2, [r3, #0]
					}
			break;
   8eaa8:	e095      	b.n	8ebd6 <Cl_SysStat_GetSensor_Status_Query+0x3de>
			case SENSOR_PS3STATUS:

				if(!test_sensor_status[SENSOR_PS3STATUS].test_flag)
   8eaaa:	4b14      	ldr	r3, [pc, #80]	; (8eafc <Cl_SysStat_GetSensor_Status_Query+0x304>)
   8eaac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
   8eab0:	f083 0301 	eor.w	r3, r3, #1
   8eab4:	b2db      	uxtb	r3, r3
   8eab6:	2b00      	cmp	r3, #0
   8eab8:	d006      	beq.n	8eac8 <Cl_SysStat_GetSensor_Status_Query+0x2d0>
				{
					tempdata =  cl_sys_statbuffer.ps3status;
   8eaba:	4b0f      	ldr	r3, [pc, #60]	; (8eaf8 <Cl_SysStat_GetSensor_Status_Query+0x300>)
   8eabc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
   8eabe:	81fb      	strh	r3, [r7, #14]
					*pdata  = tempdata;
   8eac0:	683b      	ldr	r3, [r7, #0]
   8eac2:	89fa      	ldrh	r2, [r7, #14]
   8eac4:	801a      	strh	r2, [r3, #0]
				}
			

			//tempdata =  cl_sys_statbuffer.ps3status;
			//*pdata  = tempdata;
			break;
   8eac6:	e086      	b.n	8ebd6 <Cl_SysStat_GetSensor_Status_Query+0x3de>
					tempdata =  cl_sys_statbuffer.ps3status;
					*pdata  = tempdata;
				}
				else
				{
					tempdata =  test_sensor_status[SENSOR_PS3STATUS].test_sensord_data;
   8eac8:	4b0c      	ldr	r3, [pc, #48]	; (8eafc <Cl_SysStat_GetSensor_Status_Query+0x304>)
   8eaca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
   8eace:	81fb      	strh	r3, [r7, #14]
					*pdata  = tempdata;
   8ead0:	683b      	ldr	r3, [r7, #0]
   8ead2:	89fa      	ldrh	r2, [r7, #14]
   8ead4:	801a      	strh	r2, [r3, #0]
				}
			

			//tempdata =  cl_sys_statbuffer.ps3status;
			//*pdata  = tempdata;
			break;
   8ead6:	e07e      	b.n	8ebd6 <Cl_SysStat_GetSensor_Status_Query+0x3de>

			case SENSOR_TEMP1STATUS:
						if(!test_sensor_status[SENSOR_TEMP1STATUS].test_flag)
   8ead8:	4b08      	ldr	r3, [pc, #32]	; (8eafc <Cl_SysStat_GetSensor_Status_Query+0x304>)
   8eada:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
   8eade:	f083 0301 	eor.w	r3, r3, #1
   8eae2:	b2db      	uxtb	r3, r3
   8eae4:	2b00      	cmp	r3, #0
   8eae6:	d00b      	beq.n	8eb00 <Cl_SysStat_GetSensor_Status_Query+0x308>
						{
							tempdata =  cl_sys_statbuffer.Temp1status;
   8eae8:	4b03      	ldr	r3, [pc, #12]	; (8eaf8 <Cl_SysStat_GetSensor_Status_Query+0x300>)
   8eaea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   8eaec:	81fb      	strh	r3, [r7, #14]
							*pdata  = tempdata;
   8eaee:	683b      	ldr	r3, [r7, #0]
   8eaf0:	89fa      	ldrh	r2, [r7, #14]
   8eaf2:	801a      	strh	r2, [r3, #0]
							tempdata =  test_sensor_status[SENSOR_TEMP1STATUS].test_sensord_data;
							*pdata  = tempdata;
						}


			break;
   8eaf4:	e06f      	b.n	8ebd6 <Cl_SysStat_GetSensor_Status_Query+0x3de>
   8eaf6:	bf00      	nop
   8eaf8:	20072224 	.word	0x20072224
   8eafc:	200725c0 	.word	0x200725c0
							tempdata =  cl_sys_statbuffer.Temp1status;
							*pdata  = tempdata;
						}
						else
						{
							tempdata =  test_sensor_status[SENSOR_TEMP1STATUS].test_sensord_data;
   8eb00:	4b38      	ldr	r3, [pc, #224]	; (8ebe4 <Cl_SysStat_GetSensor_Status_Query+0x3ec>)
   8eb02:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
   8eb06:	81fb      	strh	r3, [r7, #14]
							*pdata  = tempdata;
   8eb08:	683b      	ldr	r3, [r7, #0]
   8eb0a:	89fa      	ldrh	r2, [r7, #14]
   8eb0c:	801a      	strh	r2, [r3, #0]
						}


			break;
   8eb0e:	e062      	b.n	8ebd6 <Cl_SysStat_GetSensor_Status_Query+0x3de>
			case SENSOR_TEMP2STATUS:
			if(!test_sensor_status[SENSOR_TEMP2STATUS].test_flag)
   8eb10:	4b34      	ldr	r3, [pc, #208]	; (8ebe4 <Cl_SysStat_GetSensor_Status_Query+0x3ec>)
   8eb12:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
   8eb16:	f083 0301 	eor.w	r3, r3, #1
   8eb1a:	b2db      	uxtb	r3, r3
   8eb1c:	2b00      	cmp	r3, #0
   8eb1e:	d006      	beq.n	8eb2e <Cl_SysStat_GetSensor_Status_Query+0x336>
			{
				tempdata =  cl_sys_statbuffer.Temp2status;
   8eb20:	4b31      	ldr	r3, [pc, #196]	; (8ebe8 <Cl_SysStat_GetSensor_Status_Query+0x3f0>)
   8eb22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
   8eb24:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8eb26:	683b      	ldr	r3, [r7, #0]
   8eb28:	89fa      	ldrh	r2, [r7, #14]
   8eb2a:	801a      	strh	r2, [r3, #0]
			else
			{
				tempdata =  test_sensor_status[SENSOR_TEMP2STATUS].test_sensord_data;
				*pdata  = tempdata;
			}
			break;
   8eb2c:	e053      	b.n	8ebd6 <Cl_SysStat_GetSensor_Status_Query+0x3de>
				tempdata =  cl_sys_statbuffer.Temp2status;
				*pdata  = tempdata;
			}
			else
			{
				tempdata =  test_sensor_status[SENSOR_TEMP2STATUS].test_sensord_data;
   8eb2e:	4b2d      	ldr	r3, [pc, #180]	; (8ebe4 <Cl_SysStat_GetSensor_Status_Query+0x3ec>)
   8eb30:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
   8eb34:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8eb36:	683b      	ldr	r3, [r7, #0]
   8eb38:	89fa      	ldrh	r2, [r7, #14]
   8eb3a:	801a      	strh	r2, [r3, #0]
			}
			break;
   8eb3c:	e04b      	b.n	8ebd6 <Cl_SysStat_GetSensor_Status_Query+0x3de>
			case SENSOR_TEMP3STATUS:
			
			if(error_flag == 0)
   8eb3e:	4b2b      	ldr	r3, [pc, #172]	; (8ebec <Cl_SysStat_GetSensor_Status_Query+0x3f4>)
   8eb40:	781b      	ldrb	r3, [r3, #0]
   8eb42:	2b00      	cmp	r3, #0
   8eb44:	d106      	bne.n	8eb54 <Cl_SysStat_GetSensor_Status_Query+0x35c>
			{
				tempdata =  cl_sys_statbuffer.Temp3status;
   8eb46:	4b28      	ldr	r3, [pc, #160]	; (8ebe8 <Cl_SysStat_GetSensor_Status_Query+0x3f0>)
   8eb48:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   8eb4a:	81fb      	strh	r3, [r7, #14]
				//Cl_Uint16Type data=0;
				//tempdata =  Cl_get_Temperature_Value(TS3,&data);
				*pdata  = tempdata;
   8eb4c:	683b      	ldr	r3, [r7, #0]
   8eb4e:	89fa      	ldrh	r2, [r7, #14]
   8eb50:	801a      	strh	r2, [r3, #0]
			else
			{
				tempdata =  400;
				*pdata  = tempdata;
			}
			break;
   8eb52:	e040      	b.n	8ebd6 <Cl_SysStat_GetSensor_Status_Query+0x3de>
				//tempdata =  Cl_get_Temperature_Value(TS3,&data);
				*pdata  = tempdata;
			}
			else
			{
				tempdata =  400;
   8eb54:	f44f 73c8 	mov.w	r3, #400	; 0x190
   8eb58:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8eb5a:	683b      	ldr	r3, [r7, #0]
   8eb5c:	89fa      	ldrh	r2, [r7, #14]
   8eb5e:	801a      	strh	r2, [r3, #0]
			}
			break;
   8eb60:	e039      	b.n	8ebd6 <Cl_SysStat_GetSensor_Status_Query+0x3de>
			case HEATER_HIGH_TEMP:
				tempdata =  cl_sys_statbuffer.Temp4status;
   8eb62:	4b21      	ldr	r3, [pc, #132]	; (8ebe8 <Cl_SysStat_GetSensor_Status_Query+0x3f0>)
   8eb64:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   8eb66:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8eb68:	683b      	ldr	r3, [r7, #0]
   8eb6a:	89fa      	ldrh	r2, [r7, #14]
   8eb6c:	801a      	strh	r2, [r3, #0]
			break;
   8eb6e:	e032      	b.n	8ebd6 <Cl_SysStat_GetSensor_Status_Query+0x3de>
			case 	SENSOR_HP_START:
				tempdata =  cl_sys_statbuffer.Heparin_full_marker;
   8eb70:	4b1d      	ldr	r3, [pc, #116]	; (8ebe8 <Cl_SysStat_GetSensor_Status_Query+0x3f0>)
   8eb72:	899b      	ldrh	r3, [r3, #12]
   8eb74:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8eb76:	683b      	ldr	r3, [r7, #0]
   8eb78:	89fa      	ldrh	r2, [r7, #14]
   8eb7a:	801a      	strh	r2, [r3, #0]
			break;
   8eb7c:	e02b      	b.n	8ebd6 <Cl_SysStat_GetSensor_Status_Query+0x3de>
			case SENSOR_HP_END:
				tempdata =  cl_sys_statbuffer.Heparin_empty_marker;
   8eb7e:	4b1a      	ldr	r3, [pc, #104]	; (8ebe8 <Cl_SysStat_GetSensor_Status_Query+0x3f0>)
   8eb80:	89db      	ldrh	r3, [r3, #14]
   8eb82:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8eb84:	683b      	ldr	r3, [r7, #0]
   8eb86:	89fa      	ldrh	r2, [r7, #14]
   8eb88:	801a      	strh	r2, [r3, #0]
			break;
   8eb8a:	e024      	b.n	8ebd6 <Cl_SysStat_GetSensor_Status_Query+0x3de>
			case SENSOR_HP_FB:
				tempdata =  cl_sys_statbuffer.Heparin_rotation_marker;
   8eb8c:	4b16      	ldr	r3, [pc, #88]	; (8ebe8 <Cl_SysStat_GetSensor_Status_Query+0x3f0>)
   8eb8e:	895b      	ldrh	r3, [r3, #10]
   8eb90:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8eb92:	683b      	ldr	r3, [r7, #0]
   8eb94:	89fa      	ldrh	r2, [r7, #14]
   8eb96:	801a      	strh	r2, [r3, #0]
			break;
   8eb98:	e01d      	b.n	8ebd6 <Cl_SysStat_GetSensor_Status_Query+0x3de>
			case SENSOR_BP_FB:
				tempdata =  cl_sys_statbuffer.BPstatus;
   8eb9a:	4b13      	ldr	r3, [pc, #76]	; (8ebe8 <Cl_SysStat_GetSensor_Status_Query+0x3f0>)
   8eb9c:	885b      	ldrh	r3, [r3, #2]
   8eb9e:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8eba0:	683b      	ldr	r3, [r7, #0]
   8eba2:	89fa      	ldrh	r2, [r7, #14]
   8eba4:	801a      	strh	r2, [r3, #0]
			break;
   8eba6:	e016      	b.n	8ebd6 <Cl_SysStat_GetSensor_Status_Query+0x3de>
			case SENSOR_FLOW_SWITCH:
				tempdata =  cl_sys_statbuffer.Flowstatus;
   8eba8:	4b0f      	ldr	r3, [pc, #60]	; (8ebe8 <Cl_SysStat_GetSensor_Status_Query+0x3f0>)
   8ebaa:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
   8ebac:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8ebae:	683b      	ldr	r3, [r7, #0]
   8ebb0:	89fa      	ldrh	r2, [r7, #14]
   8ebb2:	801a      	strh	r2, [r3, #0]
			break;
   8ebb4:	e00f      	b.n	8ebd6 <Cl_SysStat_GetSensor_Status_Query+0x3de>
			case SENSOR_BLOODDOOR_STATUS:
				tempdata =  cl_sys_statbuffer.bloodpumpdoor;
   8ebb6:	4b0c      	ldr	r3, [pc, #48]	; (8ebe8 <Cl_SysStat_GetSensor_Status_Query+0x3f0>)
   8ebb8:	781b      	ldrb	r3, [r3, #0]
   8ebba:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8ebbc:	683b      	ldr	r3, [r7, #0]
   8ebbe:	89fa      	ldrh	r2, [r7, #14]
   8ebc0:	801a      	strh	r2, [r3, #0]
			break;  
   8ebc2:	e008      	b.n	8ebd6 <Cl_SysStat_GetSensor_Status_Query+0x3de>
			
			case SENSOR_POWER_FAILURE:
				tempdata =  cl_sys_statbuffer.PowerFailure;
   8ebc4:	4b08      	ldr	r3, [pc, #32]	; (8ebe8 <Cl_SysStat_GetSensor_Status_Query+0x3f0>)
   8ebc6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
   8ebca:	81fb      	strh	r3, [r7, #14]
				*pdata  = tempdata;
   8ebcc:	683b      	ldr	r3, [r7, #0]
   8ebce:	89fa      	ldrh	r2, [r7, #14]
   8ebd0:	801a      	strh	r2, [r3, #0]
			break;
   8ebd2:	e000      	b.n	8ebd6 <Cl_SysStat_GetSensor_Status_Query+0x3de>
			
			default:
			break;
   8ebd4:	bf00      	nop
		}
	return CL_OK;
   8ebd6:	2300      	movs	r3, #0
}
   8ebd8:	4618      	mov	r0, r3
   8ebda:	3714      	adds	r7, #20
   8ebdc:	46bd      	mov	sp, r7
   8ebde:	f85d 7b04 	ldr.w	r7, [sp], #4
   8ebe2:	4770      	bx	lr
   8ebe4:	200725c0 	.word	0x200725c0
   8ebe8:	20072224 	.word	0x20072224
   8ebec:	20071935 	.word	0x20071935

0008ebf0 <Cl_SysStat_mean_status_update>:

void Cl_SysStat_mean_status_update(void)
{
   8ebf0:	b590      	push	{r4, r7, lr}
   8ebf2:	b09f      	sub	sp, #124	; 0x7c
   8ebf4:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType cl_thretval = CL_ERROR;
   8ebf6:	2304      	movs	r3, #4
   8ebf8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	uint16_t Ps1,Ps2,Ps3,Atp,Vtp,TMP = 0;
   8ebfc:	2300      	movs	r3, #0
   8ebfe:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
	int16_t sensordata=0,temp2=0;
   8ec02:	2300      	movs	r3, #0
   8ec04:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
   8ec08:	2300      	movs	r3, #0
   8ec0a:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
	static int16_t prev_flow_status=0;
	int16_t Pressuredata=0;
   8ec0e:	2300      	movs	r3, #0
   8ec10:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
	int16_t sensordatamillivolts =0;
   8ec14:	2300      	movs	r3, #0
   8ec16:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	int16_t tempdata =0,count1;
   8ec1a:	2300      	movs	r3, #0
   8ec1c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
	int16_t Pressuredatainmillibars =0;
   8ec20:	2300      	movs	r3, #0
   8ec22:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
	Cl_Uint8Type* pdataarray;
	cl_Datastreamtype cl_tdata;
	int16_t bulk_data[14];
	uint16_t raw_cond =0;
   8ec26:	2300      	movs	r3, #0
   8ec28:	867b      	strh	r3, [r7, #50]	; 0x32
	StateLogDatatype data;
	Cl_Uint8Type dataarray[36] =  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
   8ec2a:	f107 0308 	add.w	r3, r7, #8
   8ec2e:	2200      	movs	r2, #0
   8ec30:	601a      	str	r2, [r3, #0]
   8ec32:	3304      	adds	r3, #4
   8ec34:	2200      	movs	r2, #0
   8ec36:	601a      	str	r2, [r3, #0]
   8ec38:	3304      	adds	r3, #4
   8ec3a:	2200      	movs	r2, #0
   8ec3c:	601a      	str	r2, [r3, #0]
   8ec3e:	3304      	adds	r3, #4
   8ec40:	2200      	movs	r2, #0
   8ec42:	601a      	str	r2, [r3, #0]
   8ec44:	3304      	adds	r3, #4
   8ec46:	2200      	movs	r2, #0
   8ec48:	601a      	str	r2, [r3, #0]
   8ec4a:	3304      	adds	r3, #4
   8ec4c:	2200      	movs	r2, #0
   8ec4e:	601a      	str	r2, [r3, #0]
   8ec50:	3304      	adds	r3, #4
   8ec52:	2200      	movs	r2, #0
   8ec54:	601a      	str	r2, [r3, #0]
   8ec56:	3304      	adds	r3, #4
   8ec58:	2200      	movs	r2, #0
   8ec5a:	601a      	str	r2, [r3, #0]
   8ec5c:	3304      	adds	r3, #4
   8ec5e:	2200      	movs	r2, #0
   8ec60:	601a      	str	r2, [r3, #0]
   8ec62:	3304      	adds	r3, #4
	Count_500ms++;
   8ec64:	4ba9      	ldr	r3, [pc, #676]	; (8ef0c <Cl_SysStat_mean_status_update+0x31c>)
   8ec66:	781b      	ldrb	r3, [r3, #0]
   8ec68:	3301      	adds	r3, #1
   8ec6a:	b2da      	uxtb	r2, r3
   8ec6c:	4ba7      	ldr	r3, [pc, #668]	; (8ef0c <Cl_SysStat_mean_status_update+0x31c>)
   8ec6e:	701a      	strb	r2, [r3, #0]
	
	float TS3;
	Cl_Uint8Type count=0;
   8ec70:	2300      	movs	r3, #0
   8ec72:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
	static Cl_Uint8Type  flow_counter =0 ;
	static Cl_Uint16Type counter=0,threeseccounter=0,CS_ontimecnter=0,cnt = 0,levelsw_cnter = 0;
	if(syncdone)
   8ec76:	4ba6      	ldr	r3, [pc, #664]	; (8ef10 <Cl_SysStat_mean_status_update+0x320>)
   8ec78:	781b      	ldrb	r3, [r3, #0]
   8ec7a:	2b00      	cmp	r3, #0
   8ec7c:	f000 860b 	beq.w	8f896 <Cl_SysStat_mean_status_update+0xca6>
	{
	
		if(syncdone)
   8ec80:	4ba3      	ldr	r3, [pc, #652]	; (8ef10 <Cl_SysStat_mean_status_update+0x320>)
   8ec82:	781b      	ldrb	r3, [r3, #0]
   8ec84:	2b00      	cmp	r3, #0
   8ec86:	f000 8606 	beq.w	8f896 <Cl_SysStat_mean_status_update+0xca6>
		{
			Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP1STATUS, &sensordata);
   8ec8a:	f107 0354 	add.w	r3, r7, #84	; 0x54
   8ec8e:	2012      	movs	r0, #18
   8ec90:	4619      	mov	r1, r3
   8ec92:	4ba0      	ldr	r3, [pc, #640]	; (8ef14 <Cl_SysStat_mean_status_update+0x324>)
   8ec94:	4798      	blx	r3
			{
							
// 				uint16_t cal_data  = (402 *100* sensordata)/(2*32768); 
// 				res_temp_lookuptable(cal_data);
				avgtmp1 =	(avgtmp1*9 + sensordata)/10;
   8ec96:	4ba0      	ldr	r3, [pc, #640]	; (8ef18 <Cl_SysStat_mean_status_update+0x328>)
   8ec98:	681a      	ldr	r2, [r3, #0]
   8ec9a:	4ba0      	ldr	r3, [pc, #640]	; (8ef1c <Cl_SysStat_mean_status_update+0x32c>)
   8ec9c:	4610      	mov	r0, r2
   8ec9e:	49a0      	ldr	r1, [pc, #640]	; (8ef20 <Cl_SysStat_mean_status_update+0x330>)
   8eca0:	4798      	blx	r3
   8eca2:	4603      	mov	r3, r0
   8eca4:	461c      	mov	r4, r3
   8eca6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
   8ecaa:	b21a      	sxth	r2, r3
   8ecac:	4b9d      	ldr	r3, [pc, #628]	; (8ef24 <Cl_SysStat_mean_status_update+0x334>)
   8ecae:	4610      	mov	r0, r2
   8ecb0:	4798      	blx	r3
   8ecb2:	4602      	mov	r2, r0
   8ecb4:	4b9c      	ldr	r3, [pc, #624]	; (8ef28 <Cl_SysStat_mean_status_update+0x338>)
   8ecb6:	4620      	mov	r0, r4
   8ecb8:	4611      	mov	r1, r2
   8ecba:	4798      	blx	r3
   8ecbc:	4603      	mov	r3, r0
   8ecbe:	461a      	mov	r2, r3
   8ecc0:	4b9a      	ldr	r3, [pc, #616]	; (8ef2c <Cl_SysStat_mean_status_update+0x33c>)
   8ecc2:	4610      	mov	r0, r2
   8ecc4:	499a      	ldr	r1, [pc, #616]	; (8ef30 <Cl_SysStat_mean_status_update+0x340>)
   8ecc6:	4798      	blx	r3
   8ecc8:	4603      	mov	r3, r0
   8ecca:	461a      	mov	r2, r3
   8eccc:	4b92      	ldr	r3, [pc, #584]	; (8ef18 <Cl_SysStat_mean_status_update+0x328>)
   8ecce:	601a      	str	r2, [r3, #0]
// //				temp = temp - 25 +12 + 2.5;
// 				bulk_data[0] = res_temp_value/10;
// 				//bulk_data[0] = toggle_count_flow;
//				bulk_data[0] = sensordata/10;
			
				bulk_data[0] = avgtmp1/10; // manav changed
   8ecd0:	4b91      	ldr	r3, [pc, #580]	; (8ef18 <Cl_SysStat_mean_status_update+0x328>)
   8ecd2:	681a      	ldr	r2, [r3, #0]
   8ecd4:	4b95      	ldr	r3, [pc, #596]	; (8ef2c <Cl_SysStat_mean_status_update+0x33c>)
   8ecd6:	4610      	mov	r0, r2
   8ecd8:	4995      	ldr	r1, [pc, #596]	; (8ef30 <Cl_SysStat_mean_status_update+0x340>)
   8ecda:	4798      	blx	r3
   8ecdc:	4603      	mov	r3, r0
   8ecde:	461a      	mov	r2, r3
   8ece0:	4b94      	ldr	r3, [pc, #592]	; (8ef34 <Cl_SysStat_mean_status_update+0x344>)
   8ece2:	4610      	mov	r0, r2
   8ece4:	4798      	blx	r3
   8ece6:	4603      	mov	r3, r0
   8ece8:	b29b      	uxth	r3, r3
   8ecea:	86bb      	strh	r3, [r7, #52]	; 0x34
				
				
				data.fourbytedata = avgtmp1/10;
   8ecec:	4b8a      	ldr	r3, [pc, #552]	; (8ef18 <Cl_SysStat_mean_status_update+0x328>)
   8ecee:	681a      	ldr	r2, [r3, #0]
   8ecf0:	4b8e      	ldr	r3, [pc, #568]	; (8ef2c <Cl_SysStat_mean_status_update+0x33c>)
   8ecf2:	4610      	mov	r0, r2
   8ecf4:	498e      	ldr	r1, [pc, #568]	; (8ef30 <Cl_SysStat_mean_status_update+0x340>)
   8ecf6:	4798      	blx	r3
   8ecf8:	4603      	mov	r3, r0
   8ecfa:	461a      	mov	r2, r3
   8ecfc:	4b8e      	ldr	r3, [pc, #568]	; (8ef38 <Cl_SysStat_mean_status_update+0x348>)
   8ecfe:	4610      	mov	r0, r2
   8ed00:	4798      	blx	r3
   8ed02:	4603      	mov	r3, r0
   8ed04:	62fb      	str	r3, [r7, #44]	; 0x2c
				dataarray[count++] = data.bytedata[0];
   8ed06:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
   8ed0a:	1c5a      	adds	r2, r3, #1
   8ed0c:	f887 2069 	strb.w	r2, [r7, #105]	; 0x69
   8ed10:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
   8ed14:	f107 0178 	add.w	r1, r7, #120	; 0x78
   8ed18:	440b      	add	r3, r1
   8ed1a:	f803 2c70 	strb.w	r2, [r3, #-112]
				dataarray[count++] = data.bytedata[1];
   8ed1e:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
   8ed22:	1c5a      	adds	r2, r3, #1
   8ed24:	f887 2069 	strb.w	r2, [r7, #105]	; 0x69
   8ed28:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
   8ed2c:	f107 0178 	add.w	r1, r7, #120	; 0x78
   8ed30:	440b      	add	r3, r1
   8ed32:	f803 2c70 	strb.w	r2, [r3, #-112]
				dataarray[count++] = data.bytedata[2];
   8ed36:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
   8ed3a:	1c5a      	adds	r2, r3, #1
   8ed3c:	f887 2069 	strb.w	r2, [r7, #105]	; 0x69
   8ed40:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
   8ed44:	f107 0178 	add.w	r1, r7, #120	; 0x78
   8ed48:	440b      	add	r3, r1
   8ed4a:	f803 2c70 	strb.w	r2, [r3, #-112]
				dataarray[count++] = data.bytedata[3];
   8ed4e:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
   8ed52:	1c5a      	adds	r2, r3, #1
   8ed54:	f887 2069 	strb.w	r2, [r7, #105]	; 0x69
   8ed58:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
   8ed5c:	f107 0178 	add.w	r1, r7, #120	; 0x78
   8ed60:	440b      	add	r3, r1
   8ed62:	f803 2c70 	strb.w	r2, [r3, #-112]
				
			}
	
			Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS,&sensordata);
   8ed66:	f107 0354 	add.w	r3, r7, #84	; 0x54
   8ed6a:	2013      	movs	r0, #19
   8ed6c:	4619      	mov	r1, r3
   8ed6e:	4b69      	ldr	r3, [pc, #420]	; (8ef14 <Cl_SysStat_mean_status_update+0x324>)
   8ed70:	4798      	blx	r3
			{
// 					
// 				uint16_t cal_data  = (402 *100* sensordata)/(2*32768); 
// 				res_temp_lookuptable(cal_data);
				avgtmp2 =	((avgtmp2*9 + sensordata)/10 );
   8ed72:	4b72      	ldr	r3, [pc, #456]	; (8ef3c <Cl_SysStat_mean_status_update+0x34c>)
   8ed74:	681a      	ldr	r2, [r3, #0]
   8ed76:	4b69      	ldr	r3, [pc, #420]	; (8ef1c <Cl_SysStat_mean_status_update+0x32c>)
   8ed78:	4610      	mov	r0, r2
   8ed7a:	4969      	ldr	r1, [pc, #420]	; (8ef20 <Cl_SysStat_mean_status_update+0x330>)
   8ed7c:	4798      	blx	r3
   8ed7e:	4603      	mov	r3, r0
   8ed80:	461c      	mov	r4, r3
   8ed82:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
   8ed86:	b21a      	sxth	r2, r3
   8ed88:	4b66      	ldr	r3, [pc, #408]	; (8ef24 <Cl_SysStat_mean_status_update+0x334>)
   8ed8a:	4610      	mov	r0, r2
   8ed8c:	4798      	blx	r3
   8ed8e:	4602      	mov	r2, r0
   8ed90:	4b65      	ldr	r3, [pc, #404]	; (8ef28 <Cl_SysStat_mean_status_update+0x338>)
   8ed92:	4620      	mov	r0, r4
   8ed94:	4611      	mov	r1, r2
   8ed96:	4798      	blx	r3
   8ed98:	4603      	mov	r3, r0
   8ed9a:	461a      	mov	r2, r3
   8ed9c:	4b63      	ldr	r3, [pc, #396]	; (8ef2c <Cl_SysStat_mean_status_update+0x33c>)
   8ed9e:	4610      	mov	r0, r2
   8eda0:	4963      	ldr	r1, [pc, #396]	; (8ef30 <Cl_SysStat_mean_status_update+0x340>)
   8eda2:	4798      	blx	r3
   8eda4:	4603      	mov	r3, r0
   8eda6:	461a      	mov	r2, r3
   8eda8:	4b64      	ldr	r3, [pc, #400]	; (8ef3c <Cl_SysStat_mean_status_update+0x34c>)
   8edaa:	601a      	str	r2, [r3, #0]
// 			//	temp = temp -45;                                      // commented for machine 2
// 			//	temp = temp - 25 +12;
// //				temp = temp - 25 + 8.1 ;
// 				bulk_data[1] = (res_temp_value- 4)/10;
//				bulk_data[1] = sensordata /10;
			bulk_data[1] = avgtmp2 /10; // manav changed
   8edac:	4b63      	ldr	r3, [pc, #396]	; (8ef3c <Cl_SysStat_mean_status_update+0x34c>)
   8edae:	681a      	ldr	r2, [r3, #0]
   8edb0:	4b5e      	ldr	r3, [pc, #376]	; (8ef2c <Cl_SysStat_mean_status_update+0x33c>)
   8edb2:	4610      	mov	r0, r2
   8edb4:	495e      	ldr	r1, [pc, #376]	; (8ef30 <Cl_SysStat_mean_status_update+0x340>)
   8edb6:	4798      	blx	r3
   8edb8:	4603      	mov	r3, r0
   8edba:	461a      	mov	r2, r3
   8edbc:	4b5d      	ldr	r3, [pc, #372]	; (8ef34 <Cl_SysStat_mean_status_update+0x344>)
   8edbe:	4610      	mov	r0, r2
   8edc0:	4798      	blx	r3
   8edc2:	4603      	mov	r3, r0
   8edc4:	b29b      	uxth	r3, r3
   8edc6:	86fb      	strh	r3, [r7, #54]	; 0x36
				
				data.fourbytedata = avgtmp2/10;
   8edc8:	4b5c      	ldr	r3, [pc, #368]	; (8ef3c <Cl_SysStat_mean_status_update+0x34c>)
   8edca:	681a      	ldr	r2, [r3, #0]
   8edcc:	4b57      	ldr	r3, [pc, #348]	; (8ef2c <Cl_SysStat_mean_status_update+0x33c>)
   8edce:	4610      	mov	r0, r2
   8edd0:	4957      	ldr	r1, [pc, #348]	; (8ef30 <Cl_SysStat_mean_status_update+0x340>)
   8edd2:	4798      	blx	r3
   8edd4:	4603      	mov	r3, r0
   8edd6:	461a      	mov	r2, r3
   8edd8:	4b57      	ldr	r3, [pc, #348]	; (8ef38 <Cl_SysStat_mean_status_update+0x348>)
   8edda:	4610      	mov	r0, r2
   8eddc:	4798      	blx	r3
   8edde:	4603      	mov	r3, r0
   8ede0:	62fb      	str	r3, [r7, #44]	; 0x2c
				dataarray[count++] = data.bytedata[0];
   8ede2:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
   8ede6:	1c5a      	adds	r2, r3, #1
   8ede8:	f887 2069 	strb.w	r2, [r7, #105]	; 0x69
   8edec:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
   8edf0:	f107 0178 	add.w	r1, r7, #120	; 0x78
   8edf4:	440b      	add	r3, r1
   8edf6:	f803 2c70 	strb.w	r2, [r3, #-112]
				dataarray[count++] = data.bytedata[1];
   8edfa:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
   8edfe:	1c5a      	adds	r2, r3, #1
   8ee00:	f887 2069 	strb.w	r2, [r7, #105]	; 0x69
   8ee04:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
   8ee08:	f107 0178 	add.w	r1, r7, #120	; 0x78
   8ee0c:	440b      	add	r3, r1
   8ee0e:	f803 2c70 	strb.w	r2, [r3, #-112]
				dataarray[count++] = data.bytedata[2];
   8ee12:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
   8ee16:	1c5a      	adds	r2, r3, #1
   8ee18:	f887 2069 	strb.w	r2, [r7, #105]	; 0x69
   8ee1c:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
   8ee20:	f107 0178 	add.w	r1, r7, #120	; 0x78
   8ee24:	440b      	add	r3, r1
   8ee26:	f803 2c70 	strb.w	r2, [r3, #-112]
				dataarray[count++] = data.bytedata[3];
   8ee2a:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
   8ee2e:	1c5a      	adds	r2, r3, #1
   8ee30:	f887 2069 	strb.w	r2, [r7, #105]	; 0x69
   8ee34:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
   8ee38:	f107 0178 	add.w	r1, r7, #120	; 0x78
   8ee3c:	440b      	add	r3, r1
   8ee3e:	f803 2c70 	strb.w	r2, [r3, #-112]
			}
			Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&sensordata);
   8ee42:	f107 0354 	add.w	r3, r7, #84	; 0x54
   8ee46:	2014      	movs	r0, #20
   8ee48:	4619      	mov	r1, r3
   8ee4a:	4b32      	ldr	r3, [pc, #200]	; (8ef14 <Cl_SysStat_mean_status_update+0x324>)
   8ee4c:	4798      	blx	r3
			{
// 				uint16_t cal_data  = (402 *100* sensordata)/(2*32768); 
// 				res_temp_lookuptable(cal_data);
				avgtmp3 =	(avgtmp3*9 + sensordata)/10;
   8ee4e:	4b3c      	ldr	r3, [pc, #240]	; (8ef40 <Cl_SysStat_mean_status_update+0x350>)
   8ee50:	681a      	ldr	r2, [r3, #0]
   8ee52:	4b32      	ldr	r3, [pc, #200]	; (8ef1c <Cl_SysStat_mean_status_update+0x32c>)
   8ee54:	4610      	mov	r0, r2
   8ee56:	4932      	ldr	r1, [pc, #200]	; (8ef20 <Cl_SysStat_mean_status_update+0x330>)
   8ee58:	4798      	blx	r3
   8ee5a:	4603      	mov	r3, r0
   8ee5c:	461c      	mov	r4, r3
   8ee5e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
   8ee62:	b21a      	sxth	r2, r3
   8ee64:	4b2f      	ldr	r3, [pc, #188]	; (8ef24 <Cl_SysStat_mean_status_update+0x334>)
   8ee66:	4610      	mov	r0, r2
   8ee68:	4798      	blx	r3
   8ee6a:	4602      	mov	r2, r0
   8ee6c:	4b2e      	ldr	r3, [pc, #184]	; (8ef28 <Cl_SysStat_mean_status_update+0x338>)
   8ee6e:	4620      	mov	r0, r4
   8ee70:	4611      	mov	r1, r2
   8ee72:	4798      	blx	r3
   8ee74:	4603      	mov	r3, r0
   8ee76:	461a      	mov	r2, r3
   8ee78:	4b2c      	ldr	r3, [pc, #176]	; (8ef2c <Cl_SysStat_mean_status_update+0x33c>)
   8ee7a:	4610      	mov	r0, r2
   8ee7c:	492c      	ldr	r1, [pc, #176]	; (8ef30 <Cl_SysStat_mean_status_update+0x340>)
   8ee7e:	4798      	blx	r3
   8ee80:	4603      	mov	r3, r0
   8ee82:	461a      	mov	r2, r3
   8ee84:	4b2e      	ldr	r3, [pc, #184]	; (8ef40 <Cl_SysStat_mean_status_update+0x350>)
   8ee86:	601a      	str	r2, [r3, #0]
// 				TS3 = (res_temp_value/10) - 0.4;
// //				TS3 = (res_temp_value/100) - 3.1 - 2;
// //				TS3 = (avgtmp3/10) - 0.4;
// 				bulk_data[2] =  (uint16_t)(TS3); // * 10);
//				bulk_data[2] = sensordata/10;
			bulk_data[2] = avgtmp3/10;   // manav changed
   8ee88:	4b2d      	ldr	r3, [pc, #180]	; (8ef40 <Cl_SysStat_mean_status_update+0x350>)
   8ee8a:	681a      	ldr	r2, [r3, #0]
   8ee8c:	4b27      	ldr	r3, [pc, #156]	; (8ef2c <Cl_SysStat_mean_status_update+0x33c>)
   8ee8e:	4610      	mov	r0, r2
   8ee90:	4927      	ldr	r1, [pc, #156]	; (8ef30 <Cl_SysStat_mean_status_update+0x340>)
   8ee92:	4798      	blx	r3
   8ee94:	4603      	mov	r3, r0
   8ee96:	461a      	mov	r2, r3
   8ee98:	4b26      	ldr	r3, [pc, #152]	; (8ef34 <Cl_SysStat_mean_status_update+0x344>)
   8ee9a:	4610      	mov	r0, r2
   8ee9c:	4798      	blx	r3
   8ee9e:	4603      	mov	r3, r0
   8eea0:	b29b      	uxth	r3, r3
   8eea2:	873b      	strh	r3, [r7, #56]	; 0x38
				
				data.fourbytedata = avgtmp3/10;
   8eea4:	4b26      	ldr	r3, [pc, #152]	; (8ef40 <Cl_SysStat_mean_status_update+0x350>)
   8eea6:	681a      	ldr	r2, [r3, #0]
   8eea8:	4b20      	ldr	r3, [pc, #128]	; (8ef2c <Cl_SysStat_mean_status_update+0x33c>)
   8eeaa:	4610      	mov	r0, r2
   8eeac:	4920      	ldr	r1, [pc, #128]	; (8ef30 <Cl_SysStat_mean_status_update+0x340>)
   8eeae:	4798      	blx	r3
   8eeb0:	4603      	mov	r3, r0
   8eeb2:	461a      	mov	r2, r3
   8eeb4:	4b20      	ldr	r3, [pc, #128]	; (8ef38 <Cl_SysStat_mean_status_update+0x348>)
   8eeb6:	4610      	mov	r0, r2
   8eeb8:	4798      	blx	r3
   8eeba:	4603      	mov	r3, r0
   8eebc:	62fb      	str	r3, [r7, #44]	; 0x2c
				dataarray[count++] = data.bytedata[0];
   8eebe:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
   8eec2:	1c5a      	adds	r2, r3, #1
   8eec4:	f887 2069 	strb.w	r2, [r7, #105]	; 0x69
   8eec8:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
   8eecc:	f107 0178 	add.w	r1, r7, #120	; 0x78
   8eed0:	440b      	add	r3, r1
   8eed2:	f803 2c70 	strb.w	r2, [r3, #-112]
				dataarray[count++] = data.bytedata[1];
   8eed6:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
   8eeda:	1c5a      	adds	r2, r3, #1
   8eedc:	f887 2069 	strb.w	r2, [r7, #105]	; 0x69
   8eee0:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
   8eee4:	f107 0178 	add.w	r1, r7, #120	; 0x78
   8eee8:	440b      	add	r3, r1
   8eeea:	f803 2c70 	strb.w	r2, [r3, #-112]
				dataarray[count++] = data.bytedata[2];
   8eeee:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
   8eef2:	1c5a      	adds	r2, r3, #1
   8eef4:	f887 2069 	strb.w	r2, [r7, #105]	; 0x69
   8eef8:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
   8eefc:	f107 0178 	add.w	r1, r7, #120	; 0x78
   8ef00:	440b      	add	r3, r1
   8ef02:	f803 2c70 	strb.w	r2, [r3, #-112]
				dataarray[count++] = data.bytedata[3];
   8ef06:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
   8ef0a:	e01b      	b.n	8ef44 <Cl_SysStat_mean_status_update+0x354>
   8ef0c:	20071a20 	.word	0x20071a20
   8ef10:	20071bd8 	.word	0x20071bd8
   8ef14:	0008e7f9 	.word	0x0008e7f9
   8ef18:	20071a04 	.word	0x20071a04
   8ef1c:	000a6959 	.word	0x000a6959
   8ef20:	41100000 	.word	0x41100000
   8ef24:	000a68b1 	.word	0x000a68b1
   8ef28:	000a6749 	.word	0x000a6749
   8ef2c:	000a6ac1 	.word	0x000a6ac1
   8ef30:	41200000 	.word	0x41200000
   8ef34:	000a6ce5 	.word	0x000a6ce5
   8ef38:	000a6d31 	.word	0x000a6d31
   8ef3c:	20071a00 	.word	0x20071a00
   8ef40:	200719fc 	.word	0x200719fc
   8ef44:	1c5a      	adds	r2, r3, #1
   8ef46:	f887 2069 	strb.w	r2, [r7, #105]	; 0x69
   8ef4a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
   8ef4e:	f107 0178 	add.w	r1, r7, #120	; 0x78
   8ef52:	440b      	add	r3, r1
   8ef54:	f803 2c70 	strb.w	r2, [r3, #-112]
				
				TS3 = (float)avgtmp3 /100;
   8ef58:	4b6a      	ldr	r3, [pc, #424]	; (8f104 <Cl_SysStat_mean_status_update+0x514>)
   8ef5a:	681a      	ldr	r2, [r3, #0]
   8ef5c:	4b6a      	ldr	r3, [pc, #424]	; (8f108 <Cl_SysStat_mean_status_update+0x518>)
   8ef5e:	4610      	mov	r0, r2
   8ef60:	496a      	ldr	r1, [pc, #424]	; (8f10c <Cl_SysStat_mean_status_update+0x51c>)
   8ef62:	4798      	blx	r3
   8ef64:	4603      	mov	r3, r0
   8ef66:	667b      	str	r3, [r7, #100]	; 0x64
			}
			Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_STATUS,&raw_cond);
   8ef68:	f107 0332 	add.w	r3, r7, #50	; 0x32
   8ef6c:	2007      	movs	r0, #7
   8ef6e:	4619      	mov	r1, r3
   8ef70:	4b67      	ldr	r3, [pc, #412]	; (8f110 <Cl_SysStat_mean_status_update+0x520>)
   8ef72:	4798      	blx	r3
			{
			float conductivity_CS3;
			conductivity_CS3 = cl_utilities_CalConductivity(raw_cond,TS3);
   8ef74:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
   8ef76:	4618      	mov	r0, r3
   8ef78:	6e79      	ldr	r1, [r7, #100]	; 0x64
   8ef7a:	4b66      	ldr	r3, [pc, #408]	; (8f114 <Cl_SysStat_mean_status_update+0x524>)
   8ef7c:	4798      	blx	r3
   8ef7e:	6638      	str	r0, [r7, #96]	; 0x60
//			avg_conductivity = (avg_conductivity *9 + conductivity_CS3)/10;
     		avgcond = avgcond + conductivity_CS3;
   8ef80:	4b65      	ldr	r3, [pc, #404]	; (8f118 <Cl_SysStat_mean_status_update+0x528>)
   8ef82:	681a      	ldr	r2, [r3, #0]
   8ef84:	4b65      	ldr	r3, [pc, #404]	; (8f11c <Cl_SysStat_mean_status_update+0x52c>)
   8ef86:	4610      	mov	r0, r2
   8ef88:	6e39      	ldr	r1, [r7, #96]	; 0x60
   8ef8a:	4798      	blx	r3
   8ef8c:	4603      	mov	r3, r0
   8ef8e:	461a      	mov	r2, r3
   8ef90:	4b61      	ldr	r3, [pc, #388]	; (8f118 <Cl_SysStat_mean_status_update+0x528>)
   8ef92:	601a      	str	r2, [r3, #0]
			
			if (Count_500ms == 11)
   8ef94:	4b62      	ldr	r3, [pc, #392]	; (8f120 <Cl_SysStat_mean_status_update+0x530>)
   8ef96:	781b      	ldrb	r3, [r3, #0]
   8ef98:	2b0b      	cmp	r3, #11
   8ef9a:	d110      	bne.n	8efbe <Cl_SysStat_mean_status_update+0x3ce>
			{
				avgcond = avgcond/10;
   8ef9c:	4b5e      	ldr	r3, [pc, #376]	; (8f118 <Cl_SysStat_mean_status_update+0x528>)
   8ef9e:	681a      	ldr	r2, [r3, #0]
   8efa0:	4b59      	ldr	r3, [pc, #356]	; (8f108 <Cl_SysStat_mean_status_update+0x518>)
   8efa2:	4610      	mov	r0, r2
   8efa4:	495f      	ldr	r1, [pc, #380]	; (8f124 <Cl_SysStat_mean_status_update+0x534>)
   8efa6:	4798      	blx	r3
   8efa8:	4603      	mov	r3, r0
   8efaa:	461a      	mov	r2, r3
   8efac:	4b5a      	ldr	r3, [pc, #360]	; (8f118 <Cl_SysStat_mean_status_update+0x528>)
   8efae:	601a      	str	r2, [r3, #0]
				Count_500ms =0;
   8efb0:	4b5b      	ldr	r3, [pc, #364]	; (8f120 <Cl_SysStat_mean_status_update+0x530>)
   8efb2:	2200      	movs	r2, #0
   8efb4:	701a      	strb	r2, [r3, #0]
				avg_conductivity = avgcond;
   8efb6:	4b58      	ldr	r3, [pc, #352]	; (8f118 <Cl_SysStat_mean_status_update+0x528>)
   8efb8:	681b      	ldr	r3, [r3, #0]
   8efba:	4a5b      	ldr	r2, [pc, #364]	; (8f128 <Cl_SysStat_mean_status_update+0x538>)
   8efbc:	6013      	str	r3, [r2, #0]

			}
	
			    bulk_data[3] = avg_conductivity;								// multiplication for display purpose
   8efbe:	4b5a      	ldr	r3, [pc, #360]	; (8f128 <Cl_SysStat_mean_status_update+0x538>)
   8efc0:	681a      	ldr	r2, [r3, #0]
   8efc2:	4b5a      	ldr	r3, [pc, #360]	; (8f12c <Cl_SysStat_mean_status_update+0x53c>)
   8efc4:	4610      	mov	r0, r2
   8efc6:	4798      	blx	r3
   8efc8:	4603      	mov	r3, r0
   8efca:	b29b      	uxth	r3, r3
   8efcc:	877b      	strh	r3, [r7, #58]	; 0x3a
				data.fourbytedata = avg_conductivity;
   8efce:	4b56      	ldr	r3, [pc, #344]	; (8f128 <Cl_SysStat_mean_status_update+0x538>)
   8efd0:	681a      	ldr	r2, [r3, #0]
   8efd2:	4b57      	ldr	r3, [pc, #348]	; (8f130 <Cl_SysStat_mean_status_update+0x540>)
   8efd4:	4610      	mov	r0, r2
   8efd6:	4798      	blx	r3
   8efd8:	4603      	mov	r3, r0
   8efda:	62fb      	str	r3, [r7, #44]	; 0x2c
				dataarray[count++] = data.bytedata[0];
   8efdc:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
   8efe0:	1c5a      	adds	r2, r3, #1
   8efe2:	f887 2069 	strb.w	r2, [r7, #105]	; 0x69
   8efe6:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
   8efea:	f107 0178 	add.w	r1, r7, #120	; 0x78
   8efee:	440b      	add	r3, r1
   8eff0:	f803 2c70 	strb.w	r2, [r3, #-112]
				dataarray[count++] = data.bytedata[1];
   8eff4:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
   8eff8:	1c5a      	adds	r2, r3, #1
   8effa:	f887 2069 	strb.w	r2, [r7, #105]	; 0x69
   8effe:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
   8f002:	f107 0178 	add.w	r1, r7, #120	; 0x78
   8f006:	440b      	add	r3, r1
   8f008:	f803 2c70 	strb.w	r2, [r3, #-112]
				dataarray[count++] = data.bytedata[2];
   8f00c:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
   8f010:	1c5a      	adds	r2, r3, #1
   8f012:	f887 2069 	strb.w	r2, [r7, #105]	; 0x69
   8f016:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
   8f01a:	f107 0178 	add.w	r1, r7, #120	; 0x78
   8f01e:	440b      	add	r3, r1
   8f020:	f803 2c70 	strb.w	r2, [r3, #-112]
				dataarray[count++] = data.bytedata[3];
   8f024:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
   8f028:	1c5a      	adds	r2, r3, #1
   8f02a:	f887 2069 	strb.w	r2, [r7, #105]	; 0x69
   8f02e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
   8f032:	f107 0178 	add.w	r1, r7, #120	; 0x78
   8f036:	440b      	add	r3, r1
   8f038:	f803 2c70 	strb.w	r2, [r3, #-112]
		//		bulk_data[3] = cond1x100;                    //   chnaged on 01072017
		
//				bulk_data[3] = raw_cond;
***********************************************************************/	
		}
		Cl_SysStat_GetSensor_Status_Query(SENSOR_ACID_COND,&sensordata);
   8f03c:	f107 0354 	add.w	r3, r7, #84	; 0x54
   8f040:	2022      	movs	r0, #34	; 0x22
   8f042:	4619      	mov	r1, r3
   8f044:	4b32      	ldr	r3, [pc, #200]	; (8f110 <Cl_SysStat_mean_status_update+0x520>)
   8f046:	4798      	blx	r3
				
			}
			#endif
			//	bulk_data[0] = sensordata;
			
				if(avgcond == 0)
   8f048:	4b33      	ldr	r3, [pc, #204]	; (8f118 <Cl_SysStat_mean_status_update+0x528>)
   8f04a:	681a      	ldr	r2, [r3, #0]
   8f04c:	4b39      	ldr	r3, [pc, #228]	; (8f134 <Cl_SysStat_mean_status_update+0x544>)
   8f04e:	4610      	mov	r0, r2
   8f050:	f04f 0100 	mov.w	r1, #0
   8f054:	4798      	blx	r3
   8f056:	4603      	mov	r3, r0
   8f058:	2b00      	cmp	r3, #0
   8f05a:	d009      	beq.n	8f070 <Cl_SysStat_mean_status_update+0x480>
				{
					avgcond_acid = sensordata;
   8f05c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
   8f060:	b21a      	sxth	r2, r3
   8f062:	4b35      	ldr	r3, [pc, #212]	; (8f138 <Cl_SysStat_mean_status_update+0x548>)
   8f064:	4610      	mov	r0, r2
   8f066:	4798      	blx	r3
   8f068:	4602      	mov	r2, r0
   8f06a:	4b34      	ldr	r3, [pc, #208]	; (8f13c <Cl_SysStat_mean_status_update+0x54c>)
   8f06c:	601a      	str	r2, [r3, #0]
   8f06e:	e01c      	b.n	8f0aa <Cl_SysStat_mean_status_update+0x4ba>
				}
				else
				{
					avgcond_acid =(avgcond_acid*5 + sensordata)/6;
   8f070:	4b32      	ldr	r3, [pc, #200]	; (8f13c <Cl_SysStat_mean_status_update+0x54c>)
   8f072:	681a      	ldr	r2, [r3, #0]
   8f074:	4b32      	ldr	r3, [pc, #200]	; (8f140 <Cl_SysStat_mean_status_update+0x550>)
   8f076:	4610      	mov	r0, r2
   8f078:	4932      	ldr	r1, [pc, #200]	; (8f144 <Cl_SysStat_mean_status_update+0x554>)
   8f07a:	4798      	blx	r3
   8f07c:	4603      	mov	r3, r0
   8f07e:	461c      	mov	r4, r3
   8f080:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
   8f084:	b21a      	sxth	r2, r3
   8f086:	4b2c      	ldr	r3, [pc, #176]	; (8f138 <Cl_SysStat_mean_status_update+0x548>)
   8f088:	4610      	mov	r0, r2
   8f08a:	4798      	blx	r3
   8f08c:	4602      	mov	r2, r0
   8f08e:	4b23      	ldr	r3, [pc, #140]	; (8f11c <Cl_SysStat_mean_status_update+0x52c>)
   8f090:	4620      	mov	r0, r4
   8f092:	4611      	mov	r1, r2
   8f094:	4798      	blx	r3
   8f096:	4603      	mov	r3, r0
   8f098:	461a      	mov	r2, r3
   8f09a:	4b1b      	ldr	r3, [pc, #108]	; (8f108 <Cl_SysStat_mean_status_update+0x518>)
   8f09c:	4610      	mov	r0, r2
   8f09e:	492a      	ldr	r1, [pc, #168]	; (8f148 <Cl_SysStat_mean_status_update+0x558>)
   8f0a0:	4798      	blx	r3
   8f0a2:	4603      	mov	r3, r0
   8f0a4:	461a      	mov	r2, r3
   8f0a6:	4b25      	ldr	r3, [pc, #148]	; (8f13c <Cl_SysStat_mean_status_update+0x54c>)
   8f0a8:	601a      	str	r2, [r3, #0]
				
			//	bulk_data[3] = avgcond;
			
			
				cl_Datastreamtype cl_tdata;
				cl_tdata.word =0;
   8f0aa:	2300      	movs	r3, #0
   8f0ac:	607b      	str	r3, [r7, #4]
				cl_tdata.Twobyte = avgcond_acid;
   8f0ae:	4b23      	ldr	r3, [pc, #140]	; (8f13c <Cl_SysStat_mean_status_update+0x54c>)
   8f0b0:	681a      	ldr	r2, [r3, #0]
   8f0b2:	4b1f      	ldr	r3, [pc, #124]	; (8f130 <Cl_SysStat_mean_status_update+0x540>)
   8f0b4:	4610      	mov	r0, r2
   8f0b6:	4798      	blx	r3
   8f0b8:	4603      	mov	r3, r0
   8f0ba:	b29b      	uxth	r3, r3
   8f0bc:	80bb      	strh	r3, [r7, #4]
				cl_tdata.bytearray[2] = 4;
   8f0be:	2304      	movs	r3, #4
   8f0c0:	71bb      	strb	r3, [r7, #6]
				Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
   8f0c2:	1d3b      	adds	r3, r7, #4
   8f0c4:	2037      	movs	r0, #55	; 0x37
   8f0c6:	4619      	mov	r1, r3
   8f0c8:	2204      	movs	r2, #4
   8f0ca:	4b20      	ldr	r3, [pc, #128]	; (8f14c <Cl_SysStat_mean_status_update+0x55c>)
   8f0cc:	4798      	blx	r3
		}
		Cl_SysStat_GetSensor_Status_Query(SENSOR_BICARB_COND,&sensordata);
   8f0ce:	f107 0354 	add.w	r3, r7, #84	; 0x54
   8f0d2:	2023      	movs	r0, #35	; 0x23
   8f0d4:	4619      	mov	r1, r3
   8f0d6:	4b0e      	ldr	r3, [pc, #56]	; (8f110 <Cl_SysStat_mean_status_update+0x520>)
   8f0d8:	4798      	blx	r3
				
			}
			#endif
		//	bulk_data[1] = sensordata;
		
					if(avgcond == 0)
   8f0da:	4b0f      	ldr	r3, [pc, #60]	; (8f118 <Cl_SysStat_mean_status_update+0x528>)
   8f0dc:	681a      	ldr	r2, [r3, #0]
   8f0de:	4b15      	ldr	r3, [pc, #84]	; (8f134 <Cl_SysStat_mean_status_update+0x544>)
   8f0e0:	4610      	mov	r0, r2
   8f0e2:	f04f 0100 	mov.w	r1, #0
   8f0e6:	4798      	blx	r3
   8f0e8:	4603      	mov	r3, r0
   8f0ea:	2b00      	cmp	r3, #0
   8f0ec:	d032      	beq.n	8f154 <Cl_SysStat_mean_status_update+0x564>
				{
					avgcond_bicarb = sensordata;
   8f0ee:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
   8f0f2:	b21a      	sxth	r2, r3
   8f0f4:	4b10      	ldr	r3, [pc, #64]	; (8f138 <Cl_SysStat_mean_status_update+0x548>)
   8f0f6:	4610      	mov	r0, r2
   8f0f8:	4798      	blx	r3
   8f0fa:	4602      	mov	r2, r0
   8f0fc:	4b14      	ldr	r3, [pc, #80]	; (8f150 <Cl_SysStat_mean_status_update+0x560>)
   8f0fe:	601a      	str	r2, [r3, #0]
   8f100:	e045      	b.n	8f18e <Cl_SysStat_mean_status_update+0x59e>
   8f102:	bf00      	nop
   8f104:	200719fc 	.word	0x200719fc
   8f108:	000a6ac1 	.word	0x000a6ac1
   8f10c:	42c80000 	.word	0x42c80000
   8f110:	0008e7f9 	.word	0x0008e7f9
   8f114:	00093221 	.word	0x00093221
   8f118:	20071a08 	.word	0x20071a08
   8f11c:	000a6749 	.word	0x000a6749
   8f120:	20071a20 	.word	0x20071a20
   8f124:	41200000 	.word	0x41200000
   8f128:	20071a1c 	.word	0x20071a1c
   8f12c:	000a6ce5 	.word	0x000a6ce5
   8f130:	000a6d31 	.word	0x000a6d31
   8f134:	000a6c81 	.word	0x000a6c81
   8f138:	000a68b1 	.word	0x000a68b1
   8f13c:	20071a0c 	.word	0x20071a0c
   8f140:	000a6959 	.word	0x000a6959
   8f144:	40a00000 	.word	0x40a00000
   8f148:	40c00000 	.word	0x40c00000
   8f14c:	0009ba51 	.word	0x0009ba51
   8f150:	20071a10 	.word	0x20071a10
				}
				else
				{
					avgcond_bicarb =(avgcond_bicarb*5 + sensordata)/6;
   8f154:	4b42      	ldr	r3, [pc, #264]	; (8f260 <Cl_SysStat_mean_status_update+0x670>)
   8f156:	681a      	ldr	r2, [r3, #0]
   8f158:	4b42      	ldr	r3, [pc, #264]	; (8f264 <Cl_SysStat_mean_status_update+0x674>)
   8f15a:	4610      	mov	r0, r2
   8f15c:	4942      	ldr	r1, [pc, #264]	; (8f268 <Cl_SysStat_mean_status_update+0x678>)
   8f15e:	4798      	blx	r3
   8f160:	4603      	mov	r3, r0
   8f162:	461c      	mov	r4, r3
   8f164:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
   8f168:	b21a      	sxth	r2, r3
   8f16a:	4b40      	ldr	r3, [pc, #256]	; (8f26c <Cl_SysStat_mean_status_update+0x67c>)
   8f16c:	4610      	mov	r0, r2
   8f16e:	4798      	blx	r3
   8f170:	4602      	mov	r2, r0
   8f172:	4b3f      	ldr	r3, [pc, #252]	; (8f270 <Cl_SysStat_mean_status_update+0x680>)
   8f174:	4620      	mov	r0, r4
   8f176:	4611      	mov	r1, r2
   8f178:	4798      	blx	r3
   8f17a:	4603      	mov	r3, r0
   8f17c:	461a      	mov	r2, r3
   8f17e:	4b3d      	ldr	r3, [pc, #244]	; (8f274 <Cl_SysStat_mean_status_update+0x684>)
   8f180:	4610      	mov	r0, r2
   8f182:	493d      	ldr	r1, [pc, #244]	; (8f278 <Cl_SysStat_mean_status_update+0x688>)
   8f184:	4798      	blx	r3
   8f186:	4603      	mov	r3, r0
   8f188:	461a      	mov	r2, r3
   8f18a:	4b35      	ldr	r3, [pc, #212]	; (8f260 <Cl_SysStat_mean_status_update+0x670>)
   8f18c:	601a      	str	r2, [r3, #0]
				}
				
				 // remove comment after  removing heter data updates
				cl_Datastreamtype cl_tdata;
				cl_tdata.word =0;
   8f18e:	2300      	movs	r3, #0
   8f190:	603b      	str	r3, [r7, #0]
				cl_tdata.Twobyte = avgcond_bicarb;
   8f192:	4b33      	ldr	r3, [pc, #204]	; (8f260 <Cl_SysStat_mean_status_update+0x670>)
   8f194:	681a      	ldr	r2, [r3, #0]
   8f196:	4b39      	ldr	r3, [pc, #228]	; (8f27c <Cl_SysStat_mean_status_update+0x68c>)
   8f198:	4610      	mov	r0, r2
   8f19a:	4798      	blx	r3
   8f19c:	4603      	mov	r3, r0
   8f19e:	b29b      	uxth	r3, r3
   8f1a0:	803b      	strh	r3, [r7, #0]
				cl_tdata.bytearray[2] = 6;
   8f1a2:	2306      	movs	r3, #6
   8f1a4:	70bb      	strb	r3, [r7, #2]
				Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
   8f1a6:	463b      	mov	r3, r7
   8f1a8:	2037      	movs	r0, #55	; 0x37
   8f1aa:	4619      	mov	r1, r3
   8f1ac:	2204      	movs	r2, #4
   8f1ae:	4b34      	ldr	r3, [pc, #208]	; (8f280 <Cl_SysStat_mean_status_update+0x690>)
   8f1b0:	4798      	blx	r3
		}
			Cl_SysStat_GetSensor_Status_Query(SENSOR_FLOW_SWITCH,&sensordata);
   8f1b2:	f107 0354 	add.w	r3, r7, #84	; 0x54
   8f1b6:	2019      	movs	r0, #25
   8f1b8:	4619      	mov	r1, r3
   8f1ba:	4b32      	ldr	r3, [pc, #200]	; (8f284 <Cl_SysStat_mean_status_update+0x694>)
   8f1bc:	4798      	blx	r3
			{

				cl_tdata.word = 0;
   8f1be:	2300      	movs	r3, #0
   8f1c0:	653b      	str	r3, [r7, #80]	; 0x50
				cl_tdata.Twobyte = sensordata;
   8f1c2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
   8f1c6:	b29b      	uxth	r3, r3
   8f1c8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
				cl_tdata.bytearray[2] = 3;
   8f1cc:	2303      	movs	r3, #3
   8f1ce:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
				bulk_data[4] = sensordata; // manav changed
   8f1d2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
   8f1d6:	87bb      	strh	r3, [r7, #60]	; 0x3c
				
				data.fourbytedata = sensordata;
   8f1d8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
   8f1dc:	b21b      	sxth	r3, r3
   8f1de:	62fb      	str	r3, [r7, #44]	; 0x2c
				dataarray[count++] = data.bytedata[0];
   8f1e0:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
   8f1e4:	1c5a      	adds	r2, r3, #1
   8f1e6:	f887 2069 	strb.w	r2, [r7, #105]	; 0x69
   8f1ea:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
   8f1ee:	f107 0178 	add.w	r1, r7, #120	; 0x78
   8f1f2:	440b      	add	r3, r1
   8f1f4:	f803 2c70 	strb.w	r2, [r3, #-112]
				dataarray[count++] = data.bytedata[1];
   8f1f8:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
   8f1fc:	1c5a      	adds	r2, r3, #1
   8f1fe:	f887 2069 	strb.w	r2, [r7, #105]	; 0x69
   8f202:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
   8f206:	f107 0178 	add.w	r1, r7, #120	; 0x78
   8f20a:	440b      	add	r3, r1
   8f20c:	f803 2c70 	strb.w	r2, [r3, #-112]
				dataarray[count++] = data.bytedata[2];
   8f210:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
   8f214:	1c5a      	adds	r2, r3, #1
   8f216:	f887 2069 	strb.w	r2, [r7, #105]	; 0x69
   8f21a:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
   8f21e:	f107 0178 	add.w	r1, r7, #120	; 0x78
   8f222:	440b      	add	r3, r1
   8f224:	f803 2c70 	strb.w	r2, [r3, #-112]
				dataarray[count++] = data.bytedata[3];
   8f228:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
   8f22c:	1c5a      	adds	r2, r3, #1
   8f22e:	f887 2069 	strb.w	r2, [r7, #105]	; 0x69
   8f232:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
   8f236:	f107 0178 	add.w	r1, r7, #120	; 0x78
   8f23a:	440b      	add	r3, r1
   8f23c:	f803 2c70 	strb.w	r2, [r3, #-112]
				
				
				
				if(prev_flow_status == sensordata)
   8f240:	4b11      	ldr	r3, [pc, #68]	; (8f288 <Cl_SysStat_mean_status_update+0x698>)
   8f242:	881a      	ldrh	r2, [r3, #0]
   8f244:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
   8f248:	b212      	sxth	r2, r2
   8f24a:	b21b      	sxth	r3, r3
   8f24c:	429a      	cmp	r2, r3
   8f24e:	d11f      	bne.n	8f290 <Cl_SysStat_mean_status_update+0x6a0>
				{
					if(flow_counter++ > 10)
   8f250:	4b0e      	ldr	r3, [pc, #56]	; (8f28c <Cl_SysStat_mean_status_update+0x69c>)
   8f252:	781b      	ldrb	r3, [r3, #0]
   8f254:	3301      	adds	r3, #1
   8f256:	b2da      	uxtb	r2, r3
   8f258:	4b0c      	ldr	r3, [pc, #48]	; (8f28c <Cl_SysStat_mean_status_update+0x69c>)
   8f25a:	701a      	strb	r2, [r3, #0]
   8f25c:	e01b      	b.n	8f296 <Cl_SysStat_mean_status_update+0x6a6>
   8f25e:	bf00      	nop
   8f260:	20071a10 	.word	0x20071a10
   8f264:	000a6959 	.word	0x000a6959
   8f268:	40a00000 	.word	0x40a00000
   8f26c:	000a68b1 	.word	0x000a68b1
   8f270:	000a6749 	.word	0x000a6749
   8f274:	000a6ac1 	.word	0x000a6ac1
   8f278:	40c00000 	.word	0x40c00000
   8f27c:	000a6d31 	.word	0x000a6d31
   8f280:	0009ba51 	.word	0x0009ba51
   8f284:	0008e7f9 	.word	0x0008e7f9
   8f288:	20071a30 	.word	0x20071a30
   8f28c:	20071a32 	.word	0x20071a32
					}
					
				}
				else
				{
					flow_counter = 0;
   8f290:	4b83      	ldr	r3, [pc, #524]	; (8f4a0 <Cl_SysStat_mean_status_update+0x8b0>)
   8f292:	2200      	movs	r2, #0
   8f294:	701a      	strb	r2, [r3, #0]
				}
				prev_flow_status = sensordata;
   8f296:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
   8f29a:	4b82      	ldr	r3, [pc, #520]	; (8f4a4 <Cl_SysStat_mean_status_update+0x8b4>)
   8f29c:	801a      	strh	r2, [r3, #0]
			}

			
			//	cl_testgetsensordata(APTSTATUS_HIGH, &Atp);//0x0F
			
			Cl_SysStat_GetSensor_Status_Query(SENSOR_APTSTATUS, &Atp);
   8f29e:	f107 0358 	add.w	r3, r7, #88	; 0x58
   8f2a2:	200b      	movs	r0, #11
   8f2a4:	4619      	mov	r1, r3
   8f2a6:	4b80      	ldr	r3, [pc, #512]	; (8f4a8 <Cl_SysStat_mean_status_update+0x8b8>)
   8f2a8:	4798      	blx	r3
			

				calibration_apt(Atp);
   8f2aa:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
   8f2ae:	b29b      	uxth	r3, r3
   8f2b0:	b21b      	sxth	r3, r3
   8f2b2:	4618      	mov	r0, r3
   8f2b4:	4b7d      	ldr	r3, [pc, #500]	; (8f4ac <Cl_SysStat_mean_status_update+0x8bc>)
   8f2b6:	4798      	blx	r3
				aptavg = ((aptavg* 2) + pressure_final_apt)/3;
   8f2b8:	4b7d      	ldr	r3, [pc, #500]	; (8f4b0 <Cl_SysStat_mean_status_update+0x8c0>)
   8f2ba:	681a      	ldr	r2, [r3, #0]
   8f2bc:	4b7d      	ldr	r3, [pc, #500]	; (8f4b4 <Cl_SysStat_mean_status_update+0x8c4>)
   8f2be:	4610      	mov	r0, r2
   8f2c0:	4611      	mov	r1, r2
   8f2c2:	4798      	blx	r3
   8f2c4:	4603      	mov	r3, r0
   8f2c6:	4619      	mov	r1, r3
   8f2c8:	4b7b      	ldr	r3, [pc, #492]	; (8f4b8 <Cl_SysStat_mean_status_update+0x8c8>)
   8f2ca:	681a      	ldr	r2, [r3, #0]
   8f2cc:	4b79      	ldr	r3, [pc, #484]	; (8f4b4 <Cl_SysStat_mean_status_update+0x8c4>)
   8f2ce:	4608      	mov	r0, r1
   8f2d0:	4611      	mov	r1, r2
   8f2d2:	4798      	blx	r3
   8f2d4:	4603      	mov	r3, r0
   8f2d6:	461a      	mov	r2, r3
   8f2d8:	4b78      	ldr	r3, [pc, #480]	; (8f4bc <Cl_SysStat_mean_status_update+0x8cc>)
   8f2da:	4610      	mov	r0, r2
   8f2dc:	4978      	ldr	r1, [pc, #480]	; (8f4c0 <Cl_SysStat_mean_status_update+0x8d0>)
   8f2de:	4798      	blx	r3
   8f2e0:	4603      	mov	r3, r0
   8f2e2:	461a      	mov	r2, r3
   8f2e4:	4b72      	ldr	r3, [pc, #456]	; (8f4b0 <Cl_SysStat_mean_status_update+0x8c0>)
   8f2e6:	601a      	str	r2, [r3, #0]
				cl_tdata.word = 0;
   8f2e8:	2300      	movs	r3, #0
   8f2ea:	653b      	str	r3, [r7, #80]	; 0x50
				cl_tdata.Twobyte = aptavg + 1000;
   8f2ec:	4b70      	ldr	r3, [pc, #448]	; (8f4b0 <Cl_SysStat_mean_status_update+0x8c0>)
   8f2ee:	681a      	ldr	r2, [r3, #0]
   8f2f0:	4b70      	ldr	r3, [pc, #448]	; (8f4b4 <Cl_SysStat_mean_status_update+0x8c4>)
   8f2f2:	4610      	mov	r0, r2
   8f2f4:	4973      	ldr	r1, [pc, #460]	; (8f4c4 <Cl_SysStat_mean_status_update+0x8d4>)
   8f2f6:	4798      	blx	r3
   8f2f8:	4603      	mov	r3, r0
   8f2fa:	461a      	mov	r2, r3
   8f2fc:	4b72      	ldr	r3, [pc, #456]	; (8f4c8 <Cl_SysStat_mean_status_update+0x8d8>)
   8f2fe:	4610      	mov	r0, r2
   8f300:	4798      	blx	r3
   8f302:	4603      	mov	r3, r0
   8f304:	b29b      	uxth	r3, r3
   8f306:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
				cl_tdata.bytearray[2] = 14;
   8f30a:	230e      	movs	r3, #14
   8f30c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
				bulk_data[5] = cl_tdata.Twobyte; 
   8f310:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
   8f314:	b29b      	uxth	r3, r3
   8f316:	87fb      	strh	r3, [r7, #62]	; 0x3e
				
				data.fourbytedata = aptavg;
   8f318:	4b65      	ldr	r3, [pc, #404]	; (8f4b0 <Cl_SysStat_mean_status_update+0x8c0>)
   8f31a:	681a      	ldr	r2, [r3, #0]
   8f31c:	4b6a      	ldr	r3, [pc, #424]	; (8f4c8 <Cl_SysStat_mean_status_update+0x8d8>)
   8f31e:	4610      	mov	r0, r2
   8f320:	4798      	blx	r3
   8f322:	4603      	mov	r3, r0
   8f324:	62fb      	str	r3, [r7, #44]	; 0x2c
				dataarray[count++] = data.bytedata[0];
   8f326:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
   8f32a:	1c5a      	adds	r2, r3, #1
   8f32c:	f887 2069 	strb.w	r2, [r7, #105]	; 0x69
   8f330:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
   8f334:	f107 0178 	add.w	r1, r7, #120	; 0x78
   8f338:	440b      	add	r3, r1
   8f33a:	f803 2c70 	strb.w	r2, [r3, #-112]
				dataarray[count++] = data.bytedata[1];
   8f33e:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
   8f342:	1c5a      	adds	r2, r3, #1
   8f344:	f887 2069 	strb.w	r2, [r7, #105]	; 0x69
   8f348:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
   8f34c:	f107 0178 	add.w	r1, r7, #120	; 0x78
   8f350:	440b      	add	r3, r1
   8f352:	f803 2c70 	strb.w	r2, [r3, #-112]
				dataarray[count++] = data.bytedata[2];
   8f356:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
   8f35a:	1c5a      	adds	r2, r3, #1
   8f35c:	f887 2069 	strb.w	r2, [r7, #105]	; 0x69
   8f360:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
   8f364:	f107 0178 	add.w	r1, r7, #120	; 0x78
   8f368:	440b      	add	r3, r1
   8f36a:	f803 2c70 	strb.w	r2, [r3, #-112]
				dataarray[count++] = data.bytedata[3];
   8f36e:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
   8f372:	1c5a      	adds	r2, r3, #1
   8f374:	f887 2069 	strb.w	r2, [r7, #105]	; 0x69
   8f378:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
   8f37c:	f107 0178 	add.w	r1, r7, #120	; 0x78
   8f380:	440b      	add	r3, r1
   8f382:	f803 2c70 	strb.w	r2, [r3, #-112]
				
								
			Cl_SysStat_GetSensor_Status_Query(SENSOR_VPTSTATUS, &Vtp);
   8f386:	f107 0356 	add.w	r3, r7, #86	; 0x56
   8f38a:	200c      	movs	r0, #12
   8f38c:	4619      	mov	r1, r3
   8f38e:	4b46      	ldr	r3, [pc, #280]	; (8f4a8 <Cl_SysStat_mean_status_update+0x8b8>)
   8f390:	4798      	blx	r3
			
			calibration_vpt(Vtp);
   8f392:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
   8f396:	b29b      	uxth	r3, r3
   8f398:	b21b      	sxth	r3, r3
   8f39a:	4618      	mov	r0, r3
   8f39c:	4b4b      	ldr	r3, [pc, #300]	; (8f4cc <Cl_SysStat_mean_status_update+0x8dc>)
   8f39e:	4798      	blx	r3
			vptavg = ((vptavg* 2) + pressure_final_vpt)/3;
   8f3a0:	4b4b      	ldr	r3, [pc, #300]	; (8f4d0 <Cl_SysStat_mean_status_update+0x8e0>)
   8f3a2:	681a      	ldr	r2, [r3, #0]
   8f3a4:	4b43      	ldr	r3, [pc, #268]	; (8f4b4 <Cl_SysStat_mean_status_update+0x8c4>)
   8f3a6:	4610      	mov	r0, r2
   8f3a8:	4611      	mov	r1, r2
   8f3aa:	4798      	blx	r3
   8f3ac:	4603      	mov	r3, r0
   8f3ae:	4619      	mov	r1, r3
   8f3b0:	4b48      	ldr	r3, [pc, #288]	; (8f4d4 <Cl_SysStat_mean_status_update+0x8e4>)
   8f3b2:	681a      	ldr	r2, [r3, #0]
   8f3b4:	4b3f      	ldr	r3, [pc, #252]	; (8f4b4 <Cl_SysStat_mean_status_update+0x8c4>)
   8f3b6:	4608      	mov	r0, r1
   8f3b8:	4611      	mov	r1, r2
   8f3ba:	4798      	blx	r3
   8f3bc:	4603      	mov	r3, r0
   8f3be:	461a      	mov	r2, r3
   8f3c0:	4b3e      	ldr	r3, [pc, #248]	; (8f4bc <Cl_SysStat_mean_status_update+0x8cc>)
   8f3c2:	4610      	mov	r0, r2
   8f3c4:	493e      	ldr	r1, [pc, #248]	; (8f4c0 <Cl_SysStat_mean_status_update+0x8d0>)
   8f3c6:	4798      	blx	r3
   8f3c8:	4603      	mov	r3, r0
   8f3ca:	461a      	mov	r2, r3
   8f3cc:	4b40      	ldr	r3, [pc, #256]	; (8f4d0 <Cl_SysStat_mean_status_update+0x8e0>)
   8f3ce:	601a      	str	r2, [r3, #0]
			cl_tdata.word = 0;
   8f3d0:	2300      	movs	r3, #0
   8f3d2:	653b      	str	r3, [r7, #80]	; 0x50
			cl_tdata.Twobyte = vptavg + 1000;
   8f3d4:	4b3e      	ldr	r3, [pc, #248]	; (8f4d0 <Cl_SysStat_mean_status_update+0x8e0>)
   8f3d6:	681a      	ldr	r2, [r3, #0]
   8f3d8:	4b36      	ldr	r3, [pc, #216]	; (8f4b4 <Cl_SysStat_mean_status_update+0x8c4>)
   8f3da:	4610      	mov	r0, r2
   8f3dc:	4939      	ldr	r1, [pc, #228]	; (8f4c4 <Cl_SysStat_mean_status_update+0x8d4>)
   8f3de:	4798      	blx	r3
   8f3e0:	4603      	mov	r3, r0
   8f3e2:	461a      	mov	r2, r3
   8f3e4:	4b38      	ldr	r3, [pc, #224]	; (8f4c8 <Cl_SysStat_mean_status_update+0x8d8>)
   8f3e6:	4610      	mov	r0, r2
   8f3e8:	4798      	blx	r3
   8f3ea:	4603      	mov	r3, r0
   8f3ec:	b29b      	uxth	r3, r3
   8f3ee:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
			cl_tdata.bytearray[2] = 15;
   8f3f2:	230f      	movs	r3, #15
   8f3f4:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
			bulk_data[6] = cl_tdata.Twobyte;
   8f3f8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
   8f3fc:	b29b      	uxth	r3, r3
   8f3fe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
	
	data.fourbytedata = vptavg;
   8f402:	4b33      	ldr	r3, [pc, #204]	; (8f4d0 <Cl_SysStat_mean_status_update+0x8e0>)
   8f404:	681a      	ldr	r2, [r3, #0]
   8f406:	4b30      	ldr	r3, [pc, #192]	; (8f4c8 <Cl_SysStat_mean_status_update+0x8d8>)
   8f408:	4610      	mov	r0, r2
   8f40a:	4798      	blx	r3
   8f40c:	4603      	mov	r3, r0
   8f40e:	62fb      	str	r3, [r7, #44]	; 0x2c
	dataarray[count++] = data.bytedata[0];
   8f410:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
   8f414:	1c5a      	adds	r2, r3, #1
   8f416:	f887 2069 	strb.w	r2, [r7, #105]	; 0x69
   8f41a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
   8f41e:	f107 0178 	add.w	r1, r7, #120	; 0x78
   8f422:	440b      	add	r3, r1
   8f424:	f803 2c70 	strb.w	r2, [r3, #-112]
	dataarray[count++] = data.bytedata[1];
   8f428:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
   8f42c:	1c5a      	adds	r2, r3, #1
   8f42e:	f887 2069 	strb.w	r2, [r7, #105]	; 0x69
   8f432:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
   8f436:	f107 0178 	add.w	r1, r7, #120	; 0x78
   8f43a:	440b      	add	r3, r1
   8f43c:	f803 2c70 	strb.w	r2, [r3, #-112]
	dataarray[count++] = data.bytedata[2];
   8f440:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
   8f444:	1c5a      	adds	r2, r3, #1
   8f446:	f887 2069 	strb.w	r2, [r7, #105]	; 0x69
   8f44a:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
   8f44e:	f107 0178 	add.w	r1, r7, #120	; 0x78
   8f452:	440b      	add	r3, r1
   8f454:	f803 2c70 	strb.w	r2, [r3, #-112]
	dataarray[count++] = data.bytedata[3];
   8f458:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
   8f45c:	1c5a      	adds	r2, r3, #1
   8f45e:	f887 2069 	strb.w	r2, [r7, #105]	; 0x69
   8f462:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
   8f466:	f107 0178 	add.w	r1, r7, #120	; 0x78
   8f46a:	440b      	add	r3, r1
   8f46c:	f803 2c70 	strb.w	r2, [r3, #-112]
			
			Cl_SysStat_GetSensor_Status_Query(SENSOR_PS3STATUS,&Ps3);
   8f470:	f107 035a 	add.w	r3, r7, #90	; 0x5a
   8f474:	2010      	movs	r0, #16
   8f476:	4619      	mov	r1, r3
   8f478:	4b0b      	ldr	r3, [pc, #44]	; (8f4a8 <Cl_SysStat_mean_status_update+0x8b8>)
   8f47a:	4798      	blx	r3
	
			if (Ps3 >32268)                                                                    
   8f47c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
   8f480:	f647 620c 	movw	r2, #32268	; 0x7e0c
   8f484:	4293      	cmp	r3, r2
   8f486:	d92b      	bls.n	8f4e0 <Cl_SysStat_mean_status_update+0x8f0>
			{
				PS3_bar = (65536 - Ps3) *(-1);
   8f488:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
   8f48c:	f5a3 3280 	sub.w	r2, r3, #65536	; 0x10000
   8f490:	4b11      	ldr	r3, [pc, #68]	; (8f4d8 <Cl_SysStat_mean_status_update+0x8e8>)
   8f492:	4610      	mov	r0, r2
   8f494:	4798      	blx	r3
   8f496:	4602      	mov	r2, r0
   8f498:	4b10      	ldr	r3, [pc, #64]	; (8f4dc <Cl_SysStat_mean_status_update+0x8ec>)
   8f49a:	601a      	str	r2, [r3, #0]
   8f49c:	e028      	b.n	8f4f0 <Cl_SysStat_mean_status_update+0x900>
   8f49e:	bf00      	nop
   8f4a0:	20071a32 	.word	0x20071a32
   8f4a4:	20071a30 	.word	0x20071a30
   8f4a8:	0008e7f9 	.word	0x0008e7f9
   8f4ac:	000840d9 	.word	0x000840d9
   8f4b0:	200719f4 	.word	0x200719f4
   8f4b4:	000a6749 	.word	0x000a6749
   8f4b8:	20072170 	.word	0x20072170
   8f4bc:	000a6ac1 	.word	0x000a6ac1
   8f4c0:	40400000 	.word	0x40400000
   8f4c4:	447a0000 	.word	0x447a0000
   8f4c8:	000a6d31 	.word	0x000a6d31
   8f4cc:	00084271 	.word	0x00084271
   8f4d0:	200719f8 	.word	0x200719f8
   8f4d4:	20071784 	.word	0x20071784
   8f4d8:	000a68b1 	.word	0x000a68b1
   8f4dc:	20071a2c 	.word	0x20071a2c
			}
			else
				PS3_bar = (float)Ps3;
   8f4e0:	f8b7 205a 	ldrh.w	r2, [r7, #90]	; 0x5a
   8f4e4:	4b8e      	ldr	r3, [pc, #568]	; (8f720 <Cl_SysStat_mean_status_update+0xb30>)
   8f4e6:	4610      	mov	r0, r2
   8f4e8:	4798      	blx	r3
   8f4ea:	4602      	mov	r2, r0
   8f4ec:	4b8d      	ldr	r3, [pc, #564]	; (8f724 <Cl_SysStat_mean_status_update+0xb34>)
   8f4ee:	601a      	str	r2, [r3, #0]
				
				PS3_bar = (0.091009 * PS3_bar) + 491.794;
   8f4f0:	4b8c      	ldr	r3, [pc, #560]	; (8f724 <Cl_SysStat_mean_status_update+0xb34>)
   8f4f2:	681a      	ldr	r2, [r3, #0]
   8f4f4:	4b8c      	ldr	r3, [pc, #560]	; (8f728 <Cl_SysStat_mean_status_update+0xb38>)
   8f4f6:	4610      	mov	r0, r2
   8f4f8:	4798      	blx	r3
   8f4fa:	4602      	mov	r2, r0
   8f4fc:	460b      	mov	r3, r1
   8f4fe:	4c8b      	ldr	r4, [pc, #556]	; (8f72c <Cl_SysStat_mean_status_update+0xb3c>)
   8f500:	4610      	mov	r0, r2
   8f502:	4619      	mov	r1, r3
   8f504:	a382      	add	r3, pc, #520	; (adr r3, 8f710 <Cl_SysStat_mean_status_update+0xb20>)
   8f506:	e9d3 2300 	ldrd	r2, r3, [r3]
   8f50a:	47a0      	blx	r4
   8f50c:	4602      	mov	r2, r0
   8f50e:	460b      	mov	r3, r1
   8f510:	4c87      	ldr	r4, [pc, #540]	; (8f730 <Cl_SysStat_mean_status_update+0xb40>)
   8f512:	4610      	mov	r0, r2
   8f514:	4619      	mov	r1, r3
   8f516:	a380      	add	r3, pc, #512	; (adr r3, 8f718 <Cl_SysStat_mean_status_update+0xb28>)
   8f518:	e9d3 2300 	ldrd	r2, r3, [r3]
   8f51c:	47a0      	blx	r4
   8f51e:	4602      	mov	r2, r0
   8f520:	460b      	mov	r3, r1
   8f522:	4610      	mov	r0, r2
   8f524:	4619      	mov	r1, r3
   8f526:	4b83      	ldr	r3, [pc, #524]	; (8f734 <Cl_SysStat_mean_status_update+0xb44>)
   8f528:	4798      	blx	r3
   8f52a:	4602      	mov	r2, r0
   8f52c:	4b7d      	ldr	r3, [pc, #500]	; (8f724 <Cl_SysStat_mean_status_update+0xb34>)
   8f52e:	601a      	str	r2, [r3, #0]
// 			}			
// 			cl_tdata.word = 0;
// 			cl_tdata.Twobyte = 1000 + ps3avg;
// 			cl_tdata.bytearray[2] = 20;
// //			bulk_data[7] = cl_tdata.Twobyte;
			bulk_data[7] = PS3_bar+ 1000 ;
   8f530:	4b7c      	ldr	r3, [pc, #496]	; (8f724 <Cl_SysStat_mean_status_update+0xb34>)
   8f532:	681a      	ldr	r2, [r3, #0]
   8f534:	4b80      	ldr	r3, [pc, #512]	; (8f738 <Cl_SysStat_mean_status_update+0xb48>)
   8f536:	4610      	mov	r0, r2
   8f538:	4980      	ldr	r1, [pc, #512]	; (8f73c <Cl_SysStat_mean_status_update+0xb4c>)
   8f53a:	4798      	blx	r3
   8f53c:	4603      	mov	r3, r0
   8f53e:	461a      	mov	r2, r3
   8f540:	4b7f      	ldr	r3, [pc, #508]	; (8f740 <Cl_SysStat_mean_status_update+0xb50>)
   8f542:	4610      	mov	r0, r2
   8f544:	4798      	blx	r3
   8f546:	4603      	mov	r3, r0
   8f548:	b29b      	uxth	r3, r3
   8f54a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		data.fourbytedata = PS3_bar * 100;
   8f54e:	4b75      	ldr	r3, [pc, #468]	; (8f724 <Cl_SysStat_mean_status_update+0xb34>)
   8f550:	681a      	ldr	r2, [r3, #0]
   8f552:	4b7c      	ldr	r3, [pc, #496]	; (8f744 <Cl_SysStat_mean_status_update+0xb54>)
   8f554:	4610      	mov	r0, r2
   8f556:	497c      	ldr	r1, [pc, #496]	; (8f748 <Cl_SysStat_mean_status_update+0xb58>)
   8f558:	4798      	blx	r3
   8f55a:	4603      	mov	r3, r0
   8f55c:	461a      	mov	r2, r3
   8f55e:	4b7b      	ldr	r3, [pc, #492]	; (8f74c <Cl_SysStat_mean_status_update+0xb5c>)
   8f560:	4610      	mov	r0, r2
   8f562:	4798      	blx	r3
   8f564:	4603      	mov	r3, r0
   8f566:	62fb      	str	r3, [r7, #44]	; 0x2c
		dataarray[count++] = data.bytedata[0];
   8f568:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
   8f56c:	1c5a      	adds	r2, r3, #1
   8f56e:	f887 2069 	strb.w	r2, [r7, #105]	; 0x69
   8f572:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
   8f576:	f107 0178 	add.w	r1, r7, #120	; 0x78
   8f57a:	440b      	add	r3, r1
   8f57c:	f803 2c70 	strb.w	r2, [r3, #-112]
		dataarray[count++] = data.bytedata[1];
   8f580:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
   8f584:	1c5a      	adds	r2, r3, #1
   8f586:	f887 2069 	strb.w	r2, [r7, #105]	; 0x69
   8f58a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
   8f58e:	f107 0178 	add.w	r1, r7, #120	; 0x78
   8f592:	440b      	add	r3, r1
   8f594:	f803 2c70 	strb.w	r2, [r3, #-112]
		dataarray[count++] = data.bytedata[2];
   8f598:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
   8f59c:	1c5a      	adds	r2, r3, #1
   8f59e:	f887 2069 	strb.w	r2, [r7, #105]	; 0x69
   8f5a2:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
   8f5a6:	f107 0178 	add.w	r1, r7, #120	; 0x78
   8f5aa:	440b      	add	r3, r1
   8f5ac:	f803 2c70 	strb.w	r2, [r3, #-112]
		dataarray[count++] = data.bytedata[3];
   8f5b0:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
   8f5b4:	1c5a      	adds	r2, r3, #1
   8f5b6:	f887 2069 	strb.w	r2, [r7, #105]	; 0x69
   8f5ba:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
   8f5be:	f107 0178 	add.w	r1, r7, #120	; 0x78
   8f5c2:	440b      	add	r3, r1
   8f5c4:	f803 2c70 	strb.w	r2, [r3, #-112]
	
	//		cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
			/////////////////
			
			Cl_SysStat_GetSensor_Status_Query(SENSOR_PS2STATUS,&Ps2);
   8f5c8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
   8f5cc:	200f      	movs	r0, #15
   8f5ce:	4619      	mov	r1, r3
   8f5d0:	4b5f      	ldr	r3, [pc, #380]	; (8f750 <Cl_SysStat_mean_status_update+0xb60>)
   8f5d2:	4798      	blx	r3
// 			cl_tdata.word = 0;
// 			cl_tdata.Twobyte = 1000 + ps2avg;
// 			cl_tdata.bytearray[2] = 19;
// 	
// //			bulk_data[8] = cl_tdata.Twobyte;
			if (Ps2 >32268)
   8f5d4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
   8f5d8:	f647 620c 	movw	r2, #32268	; 0x7e0c
   8f5dc:	4293      	cmp	r3, r2
   8f5de:	d90a      	bls.n	8f5f6 <Cl_SysStat_mean_status_update+0xa06>
			{
				PS2_bar = (65536 - Ps2) *(-1);
   8f5e0:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
   8f5e4:	f5a3 3280 	sub.w	r2, r3, #65536	; 0x10000
   8f5e8:	4b5a      	ldr	r3, [pc, #360]	; (8f754 <Cl_SysStat_mean_status_update+0xb64>)
   8f5ea:	4610      	mov	r0, r2
   8f5ec:	4798      	blx	r3
   8f5ee:	4602      	mov	r2, r0
   8f5f0:	4b59      	ldr	r3, [pc, #356]	; (8f758 <Cl_SysStat_mean_status_update+0xb68>)
   8f5f2:	601a      	str	r2, [r3, #0]
   8f5f4:	e007      	b.n	8f606 <Cl_SysStat_mean_status_update+0xa16>
			}
			else
				PS2_bar = (float)Ps2;
   8f5f6:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
   8f5fa:	4b49      	ldr	r3, [pc, #292]	; (8f720 <Cl_SysStat_mean_status_update+0xb30>)
   8f5fc:	4610      	mov	r0, r2
   8f5fe:	4798      	blx	r3
   8f600:	4602      	mov	r2, r0
   8f602:	4b55      	ldr	r3, [pc, #340]	; (8f758 <Cl_SysStat_mean_status_update+0xb68>)
   8f604:	601a      	str	r2, [r3, #0]
				
				PS2_bar = (0.091009 * PS2_bar) + 491.794;
   8f606:	4b54      	ldr	r3, [pc, #336]	; (8f758 <Cl_SysStat_mean_status_update+0xb68>)
   8f608:	681a      	ldr	r2, [r3, #0]
   8f60a:	4b47      	ldr	r3, [pc, #284]	; (8f728 <Cl_SysStat_mean_status_update+0xb38>)
   8f60c:	4610      	mov	r0, r2
   8f60e:	4798      	blx	r3
   8f610:	4602      	mov	r2, r0
   8f612:	460b      	mov	r3, r1
   8f614:	4c45      	ldr	r4, [pc, #276]	; (8f72c <Cl_SysStat_mean_status_update+0xb3c>)
   8f616:	4610      	mov	r0, r2
   8f618:	4619      	mov	r1, r3
   8f61a:	a33d      	add	r3, pc, #244	; (adr r3, 8f710 <Cl_SysStat_mean_status_update+0xb20>)
   8f61c:	e9d3 2300 	ldrd	r2, r3, [r3]
   8f620:	47a0      	blx	r4
   8f622:	4602      	mov	r2, r0
   8f624:	460b      	mov	r3, r1
   8f626:	4c42      	ldr	r4, [pc, #264]	; (8f730 <Cl_SysStat_mean_status_update+0xb40>)
   8f628:	4610      	mov	r0, r2
   8f62a:	4619      	mov	r1, r3
   8f62c:	a33a      	add	r3, pc, #232	; (adr r3, 8f718 <Cl_SysStat_mean_status_update+0xb28>)
   8f62e:	e9d3 2300 	ldrd	r2, r3, [r3]
   8f632:	47a0      	blx	r4
   8f634:	4602      	mov	r2, r0
   8f636:	460b      	mov	r3, r1
   8f638:	4610      	mov	r0, r2
   8f63a:	4619      	mov	r1, r3
   8f63c:	4b3d      	ldr	r3, [pc, #244]	; (8f734 <Cl_SysStat_mean_status_update+0xb44>)
   8f63e:	4798      	blx	r3
   8f640:	4602      	mov	r2, r0
   8f642:	4b45      	ldr	r3, [pc, #276]	; (8f758 <Cl_SysStat_mean_status_update+0xb68>)
   8f644:	601a      	str	r2, [r3, #0]
			bulk_data[8] = PS2_bar + 1000  ;
   8f646:	4b44      	ldr	r3, [pc, #272]	; (8f758 <Cl_SysStat_mean_status_update+0xb68>)
   8f648:	681a      	ldr	r2, [r3, #0]
   8f64a:	4b3b      	ldr	r3, [pc, #236]	; (8f738 <Cl_SysStat_mean_status_update+0xb48>)
   8f64c:	4610      	mov	r0, r2
   8f64e:	493b      	ldr	r1, [pc, #236]	; (8f73c <Cl_SysStat_mean_status_update+0xb4c>)
   8f650:	4798      	blx	r3
   8f652:	4603      	mov	r3, r0
   8f654:	461a      	mov	r2, r3
   8f656:	4b3a      	ldr	r3, [pc, #232]	; (8f740 <Cl_SysStat_mean_status_update+0xb50>)
   8f658:	4610      	mov	r0, r2
   8f65a:	4798      	blx	r3
   8f65c:	4603      	mov	r3, r0
   8f65e:	b29b      	uxth	r3, r3
   8f660:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

			data.fourbytedata = PS2_bar * 100;
   8f664:	4b3c      	ldr	r3, [pc, #240]	; (8f758 <Cl_SysStat_mean_status_update+0xb68>)
   8f666:	681a      	ldr	r2, [r3, #0]
   8f668:	4b36      	ldr	r3, [pc, #216]	; (8f744 <Cl_SysStat_mean_status_update+0xb54>)
   8f66a:	4610      	mov	r0, r2
   8f66c:	4936      	ldr	r1, [pc, #216]	; (8f748 <Cl_SysStat_mean_status_update+0xb58>)
   8f66e:	4798      	blx	r3
   8f670:	4603      	mov	r3, r0
   8f672:	461a      	mov	r2, r3
   8f674:	4b35      	ldr	r3, [pc, #212]	; (8f74c <Cl_SysStat_mean_status_update+0xb5c>)
   8f676:	4610      	mov	r0, r2
   8f678:	4798      	blx	r3
   8f67a:	4603      	mov	r3, r0
   8f67c:	62fb      	str	r3, [r7, #44]	; 0x2c
			dataarray[count++] = data.bytedata[0];
   8f67e:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
   8f682:	1c5a      	adds	r2, r3, #1
   8f684:	f887 2069 	strb.w	r2, [r7, #105]	; 0x69
   8f688:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
   8f68c:	f107 0178 	add.w	r1, r7, #120	; 0x78
   8f690:	440b      	add	r3, r1
   8f692:	f803 2c70 	strb.w	r2, [r3, #-112]
			dataarray[count++] = data.bytedata[1];
   8f696:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
   8f69a:	1c5a      	adds	r2, r3, #1
   8f69c:	f887 2069 	strb.w	r2, [r7, #105]	; 0x69
   8f6a0:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
   8f6a4:	f107 0178 	add.w	r1, r7, #120	; 0x78
   8f6a8:	440b      	add	r3, r1
   8f6aa:	f803 2c70 	strb.w	r2, [r3, #-112]
			dataarray[count++] = data.bytedata[2];
   8f6ae:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
   8f6b2:	1c5a      	adds	r2, r3, #1
   8f6b4:	f887 2069 	strb.w	r2, [r7, #105]	; 0x69
   8f6b8:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
   8f6bc:	f107 0178 	add.w	r1, r7, #120	; 0x78
   8f6c0:	440b      	add	r3, r1
   8f6c2:	f803 2c70 	strb.w	r2, [r3, #-112]
			dataarray[count++] = data.bytedata[3];
   8f6c6:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
   8f6ca:	1c5a      	adds	r2, r3, #1
   8f6cc:	f887 2069 	strb.w	r2, [r7, #105]	; 0x69
   8f6d0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
   8f6d4:	f107 0178 	add.w	r1, r7, #120	; 0x78
   8f6d8:	440b      	add	r3, r1
   8f6da:	f803 2c70 	strb.w	r2, [r3, #-112]
		//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
			
			
			Cl_SysStat_GetSensor_Status_Query(SENSOR_PS1STATUS,&Ps1);
   8f6de:	f107 035e 	add.w	r3, r7, #94	; 0x5e
   8f6e2:	200e      	movs	r0, #14
   8f6e4:	4619      	mov	r1, r3
   8f6e6:	4b1a      	ldr	r3, [pc, #104]	; (8f750 <Cl_SysStat_mean_status_update+0xb60>)
   8f6e8:	4798      	blx	r3
// 			cl_tdata.word = 0;
// 			cl_tdata.Twobyte = 1000 + ps1avg;
// 			cl_tdata.bytearray[2] = 18;
// //			bulk_data[9] = cl_tdata.Twobyte;

			if (Ps1 >32268)
   8f6ea:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
   8f6ee:	f647 620c 	movw	r2, #32268	; 0x7e0c
   8f6f2:	4293      	cmp	r3, r2
   8f6f4:	d934      	bls.n	8f760 <Cl_SysStat_mean_status_update+0xb70>
			{
				PS1_bar = (65536 - Ps1) *(-1);
   8f6f6:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
   8f6fa:	f5a3 3280 	sub.w	r2, r3, #65536	; 0x10000
   8f6fe:	4b15      	ldr	r3, [pc, #84]	; (8f754 <Cl_SysStat_mean_status_update+0xb64>)
   8f700:	4610      	mov	r0, r2
   8f702:	4798      	blx	r3
   8f704:	4602      	mov	r2, r0
   8f706:	4b15      	ldr	r3, [pc, #84]	; (8f75c <Cl_SysStat_mean_status_update+0xb6c>)
   8f708:	601a      	str	r2, [r3, #0]
   8f70a:	e031      	b.n	8f770 <Cl_SysStat_mean_status_update+0xb80>
   8f70c:	f3af 8000 	nop.w
   8f710:	a6a44418 	.word	0xa6a44418
   8f714:	3fb74c5d 	.word	0x3fb74c5d
   8f718:	39581062 	.word	0x39581062
   8f71c:	407ebcb4 	.word	0x407ebcb4
   8f720:	000a68a9 	.word	0x000a68a9
   8f724:	20071a2c 	.word	0x20071a2c
   8f728:	000a6031 	.word	0x000a6031
   8f72c:	000a60d9 	.word	0x000a60d9
   8f730:	000a5d75 	.word	0x000a5d75
   8f734:	000a669d 	.word	0x000a669d
   8f738:	000a6749 	.word	0x000a6749
   8f73c:	447a0000 	.word	0x447a0000
   8f740:	000a6ce5 	.word	0x000a6ce5
   8f744:	000a6959 	.word	0x000a6959
   8f748:	42c80000 	.word	0x42c80000
   8f74c:	000a6d31 	.word	0x000a6d31
   8f750:	0008e7f9 	.word	0x0008e7f9
   8f754:	000a68b1 	.word	0x000a68b1
   8f758:	20071a28 	.word	0x20071a28
   8f75c:	20071a24 	.word	0x20071a24
			}
			else
				PS1_bar = (float)Ps1;
   8f760:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
   8f764:	4b52      	ldr	r3, [pc, #328]	; (8f8b0 <Cl_SysStat_mean_status_update+0xcc0>)
   8f766:	4610      	mov	r0, r2
   8f768:	4798      	blx	r3
   8f76a:	4602      	mov	r2, r0
   8f76c:	4b51      	ldr	r3, [pc, #324]	; (8f8b4 <Cl_SysStat_mean_status_update+0xcc4>)
   8f76e:	601a      	str	r2, [r3, #0]
				
				PS1_bar = (0.091009 * PS1_bar) + 491.794;
   8f770:	4b50      	ldr	r3, [pc, #320]	; (8f8b4 <Cl_SysStat_mean_status_update+0xcc4>)
   8f772:	681a      	ldr	r2, [r3, #0]
   8f774:	4b50      	ldr	r3, [pc, #320]	; (8f8b8 <Cl_SysStat_mean_status_update+0xcc8>)
   8f776:	4610      	mov	r0, r2
   8f778:	4798      	blx	r3
   8f77a:	4602      	mov	r2, r0
   8f77c:	460b      	mov	r3, r1
   8f77e:	4c4f      	ldr	r4, [pc, #316]	; (8f8bc <Cl_SysStat_mean_status_update+0xccc>)
   8f780:	4610      	mov	r0, r2
   8f782:	4619      	mov	r1, r3
   8f784:	a346      	add	r3, pc, #280	; (adr r3, 8f8a0 <Cl_SysStat_mean_status_update+0xcb0>)
   8f786:	e9d3 2300 	ldrd	r2, r3, [r3]
   8f78a:	47a0      	blx	r4
   8f78c:	4602      	mov	r2, r0
   8f78e:	460b      	mov	r3, r1
   8f790:	4c4b      	ldr	r4, [pc, #300]	; (8f8c0 <Cl_SysStat_mean_status_update+0xcd0>)
   8f792:	4610      	mov	r0, r2
   8f794:	4619      	mov	r1, r3
   8f796:	a344      	add	r3, pc, #272	; (adr r3, 8f8a8 <Cl_SysStat_mean_status_update+0xcb8>)
   8f798:	e9d3 2300 	ldrd	r2, r3, [r3]
   8f79c:	47a0      	blx	r4
   8f79e:	4602      	mov	r2, r0
   8f7a0:	460b      	mov	r3, r1
   8f7a2:	4610      	mov	r0, r2
   8f7a4:	4619      	mov	r1, r3
   8f7a6:	4b47      	ldr	r3, [pc, #284]	; (8f8c4 <Cl_SysStat_mean_status_update+0xcd4>)
   8f7a8:	4798      	blx	r3
   8f7aa:	4602      	mov	r2, r0
   8f7ac:	4b41      	ldr	r3, [pc, #260]	; (8f8b4 <Cl_SysStat_mean_status_update+0xcc4>)
   8f7ae:	601a      	str	r2, [r3, #0]
			
			//Cl_Uint16Type ps1temp =  (int)PS1_bar + 1000 ;//* 100;
			
			bulk_data[9] = PS1_bar + 1000;//PS1_bar * 100;
   8f7b0:	4b40      	ldr	r3, [pc, #256]	; (8f8b4 <Cl_SysStat_mean_status_update+0xcc4>)
   8f7b2:	681a      	ldr	r2, [r3, #0]
   8f7b4:	4b44      	ldr	r3, [pc, #272]	; (8f8c8 <Cl_SysStat_mean_status_update+0xcd8>)
   8f7b6:	4610      	mov	r0, r2
   8f7b8:	4944      	ldr	r1, [pc, #272]	; (8f8cc <Cl_SysStat_mean_status_update+0xcdc>)
   8f7ba:	4798      	blx	r3
   8f7bc:	4603      	mov	r3, r0
   8f7be:	461a      	mov	r2, r3
   8f7c0:	4b43      	ldr	r3, [pc, #268]	; (8f8d0 <Cl_SysStat_mean_status_update+0xce0>)
   8f7c2:	4610      	mov	r0, r2
   8f7c4:	4798      	blx	r3
   8f7c6:	4603      	mov	r3, r0
   8f7c8:	b29b      	uxth	r3, r3
   8f7ca:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
			
			data.fourbytedata = PS1_bar * 10;
   8f7ce:	4b39      	ldr	r3, [pc, #228]	; (8f8b4 <Cl_SysStat_mean_status_update+0xcc4>)
   8f7d0:	681a      	ldr	r2, [r3, #0]
   8f7d2:	4b40      	ldr	r3, [pc, #256]	; (8f8d4 <Cl_SysStat_mean_status_update+0xce4>)
   8f7d4:	4610      	mov	r0, r2
   8f7d6:	4940      	ldr	r1, [pc, #256]	; (8f8d8 <Cl_SysStat_mean_status_update+0xce8>)
   8f7d8:	4798      	blx	r3
   8f7da:	4603      	mov	r3, r0
   8f7dc:	461a      	mov	r2, r3
   8f7de:	4b3f      	ldr	r3, [pc, #252]	; (8f8dc <Cl_SysStat_mean_status_update+0xcec>)
   8f7e0:	4610      	mov	r0, r2
   8f7e2:	4798      	blx	r3
   8f7e4:	4603      	mov	r3, r0
   8f7e6:	62fb      	str	r3, [r7, #44]	; 0x2c
		dataarray[count++] = data.bytedata[0];
   8f7e8:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
   8f7ec:	1c5a      	adds	r2, r3, #1
   8f7ee:	f887 2069 	strb.w	r2, [r7, #105]	; 0x69
   8f7f2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
   8f7f6:	f107 0178 	add.w	r1, r7, #120	; 0x78
   8f7fa:	440b      	add	r3, r1
   8f7fc:	f803 2c70 	strb.w	r2, [r3, #-112]
		dataarray[count++] = data.bytedata[1];
   8f800:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
   8f804:	1c5a      	adds	r2, r3, #1
   8f806:	f887 2069 	strb.w	r2, [r7, #105]	; 0x69
   8f80a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
   8f80e:	f107 0178 	add.w	r1, r7, #120	; 0x78
   8f812:	440b      	add	r3, r1
   8f814:	f803 2c70 	strb.w	r2, [r3, #-112]
		dataarray[count++] = data.bytedata[2];
   8f818:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
   8f81c:	1c5a      	adds	r2, r3, #1
   8f81e:	f887 2069 	strb.w	r2, [r7, #105]	; 0x69
   8f822:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
   8f826:	f107 0178 	add.w	r1, r7, #120	; 0x78
   8f82a:	440b      	add	r3, r1
   8f82c:	f803 2c70 	strb.w	r2, [r3, #-112]
		dataarray[count++] = data.bytedata[3];
   8f830:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
   8f834:	1c5a      	adds	r2, r3, #1
   8f836:	f887 2069 	strb.w	r2, [r7, #105]	; 0x69
   8f83a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
   8f83e:	f107 0178 	add.w	r1, r7, #120	; 0x78
   8f842:	440b      	add	r3, r1
   8f844:	f803 2c70 	strb.w	r2, [r3, #-112]
	
			if(ps1avg > 300)
   8f848:	4b25      	ldr	r3, [pc, #148]	; (8f8e0 <Cl_SysStat_mean_status_update+0xcf0>)
   8f84a:	681a      	ldr	r2, [r3, #0]
   8f84c:	4b25      	ldr	r3, [pc, #148]	; (8f8e4 <Cl_SysStat_mean_status_update+0xcf4>)
   8f84e:	4610      	mov	r0, r2
   8f850:	4925      	ldr	r1, [pc, #148]	; (8f8e8 <Cl_SysStat_mean_status_update+0xcf8>)
   8f852:	4798      	blx	r3
   8f854:	4603      	mov	r3, r0
   8f856:	2b00      	cmp	r3, #0
   8f858:	d006      	beq.n	8f868 <Cl_SysStat_mean_status_update+0xc78>
			{
				//  sv_cntrl_activate_valve(VALVE_ID4 );
				  valve_4_count++;
   8f85a:	4b24      	ldr	r3, [pc, #144]	; (8f8ec <Cl_SysStat_mean_status_update+0xcfc>)
   8f85c:	881b      	ldrh	r3, [r3, #0]
   8f85e:	3301      	adds	r3, #1
   8f860:	b29a      	uxth	r2, r3
   8f862:	4b22      	ldr	r3, [pc, #136]	; (8f8ec <Cl_SysStat_mean_status_update+0xcfc>)
   8f864:	801a      	strh	r2, [r3, #0]
   8f866:	e00c      	b.n	8f882 <Cl_SysStat_mean_status_update+0xc92>
			}
			else
			{
				 valve_4_count++;
   8f868:	4b20      	ldr	r3, [pc, #128]	; (8f8ec <Cl_SysStat_mean_status_update+0xcfc>)
   8f86a:	881b      	ldrh	r3, [r3, #0]
   8f86c:	3301      	adds	r3, #1
   8f86e:	b29a      	uxth	r2, r3
   8f870:	4b1e      	ldr	r3, [pc, #120]	; (8f8ec <Cl_SysStat_mean_status_update+0xcfc>)
   8f872:	801a      	strh	r2, [r3, #0]
				if(valve_4_count >= 1)
   8f874:	4b1d      	ldr	r3, [pc, #116]	; (8f8ec <Cl_SysStat_mean_status_update+0xcfc>)
   8f876:	881b      	ldrh	r3, [r3, #0]
   8f878:	2b00      	cmp	r3, #0
   8f87a:	d002      	beq.n	8f882 <Cl_SysStat_mean_status_update+0xc92>
				{
				//  sv_cntrl_deactivate_valve(VALVE_ID4 );
				  valve_4_count = 0;
   8f87c:	4b1b      	ldr	r3, [pc, #108]	; (8f8ec <Cl_SysStat_mean_status_update+0xcfc>)
   8f87e:	2200      	movs	r2, #0
   8f880:	801a      	strh	r2, [r3, #0]
				}
			}
	
		cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_BULK_PRINT,&bulk_data,30);
   8f882:	f107 0334 	add.w	r3, r7, #52	; 0x34
   8f886:	203e      	movs	r0, #62	; 0x3e
   8f888:	4619      	mov	r1, r3
   8f88a:	221e      	movs	r2, #30
   8f88c:	4b18      	ldr	r3, [pc, #96]	; (8f8f0 <Cl_SysStat_mean_status_update+0xd00>)
   8f88e:	4798      	blx	r3
   8f890:	4603      	mov	r3, r0
   8f892:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_BULK_PRINT,&dataarray,36);
			}
		
	}
}
   8f896:	377c      	adds	r7, #124	; 0x7c
   8f898:	46bd      	mov	sp, r7
   8f89a:	bd90      	pop	{r4, r7, pc}
   8f89c:	f3af 8000 	nop.w
   8f8a0:	a6a44418 	.word	0xa6a44418
   8f8a4:	3fb74c5d 	.word	0x3fb74c5d
   8f8a8:	39581062 	.word	0x39581062
   8f8ac:	407ebcb4 	.word	0x407ebcb4
   8f8b0:	000a68a9 	.word	0x000a68a9
   8f8b4:	20071a24 	.word	0x20071a24
   8f8b8:	000a6031 	.word	0x000a6031
   8f8bc:	000a60d9 	.word	0x000a60d9
   8f8c0:	000a5d75 	.word	0x000a5d75
   8f8c4:	000a669d 	.word	0x000a669d
   8f8c8:	000a6749 	.word	0x000a6749
   8f8cc:	447a0000 	.word	0x447a0000
   8f8d0:	000a6ce5 	.word	0x000a6ce5
   8f8d4:	000a6959 	.word	0x000a6959
   8f8d8:	41200000 	.word	0x41200000
   8f8dc:	000a6d31 	.word	0x000a6d31
   8f8e0:	200719f0 	.word	0x200719f0
   8f8e4:	000a6cd1 	.word	0x000a6cd1
   8f8e8:	43960000 	.word	0x43960000
   8f8ec:	20071a14 	.word	0x20071a14
   8f8f0:	0009ba51 	.word	0x0009ba51
   8f8f4:	00000000 	.word	0x00000000

0008f8f8 <Cl_Conductivity_Sensor_Controller>:
Cl_CondSensor_StateType Cond_Sensor_State = COND_STATE_IDLE;

Cl_ReturnCodeType  Cl_Conductivity_Sensor_Controller(Cl_CondSensor_EventType Cl_cond_Event);

Cl_ReturnCodeType  Cl_Conductivity_Sensor_Controller(Cl_CondSensor_EventType Cl_cond_Event)
{
   8f8f8:	b590      	push	{r4, r7, lr}
   8f8fa:	b085      	sub	sp, #20
   8f8fc:	af00      	add	r7, sp, #0
   8f8fe:	4603      	mov	r3, r0
   8f900:	71fb      	strb	r3, [r7, #7]
		Cl_ReturnCodeType cl_retval = CL_OK;
   8f902:	2300      	movs	r3, #0
   8f904:	73fb      	strb	r3, [r7, #15]
		Cl_Uint16Type temp_val  = 0, cond_millivolts = 0;
   8f906:	2300      	movs	r3, #0
   8f908:	817b      	strh	r3, [r7, #10]
   8f90a:	2300      	movs	r3, #0
   8f90c:	81bb      	strh	r3, [r7, #12]
		static Cl_Uint16Type cond_pot_val_2volts = (7000 * 1024)/10000; 
		static Cl_Uint16Type cond_millivolts_avg = 0,cond_3sec_avg=0;
		
		switch(Cond_Sensor_State)
   8f90e:	4b72      	ldr	r3, [pc, #456]	; (8fad8 <Cl_Conductivity_Sensor_Controller+0x1e0>)
   8f910:	781b      	ldrb	r3, [r3, #0]
   8f912:	2b00      	cmp	r3, #0
   8f914:	d002      	beq.n	8f91c <Cl_Conductivity_Sensor_Controller+0x24>
   8f916:	2b02      	cmp	r3, #2
   8f918:	d062      	beq.n	8f9e0 <Cl_Conductivity_Sensor_Controller+0xe8>
					break;
					default:break;
				}
				
			break;
			default:break;
   8f91a:	e0d4      	b.n	8fac6 <Cl_Conductivity_Sensor_Controller+0x1ce>
		
		switch(Cond_Sensor_State)
		{
			
			case COND_STATE_IDLE:
				switch (Cl_cond_Event)
   8f91c:	79fb      	ldrb	r3, [r7, #7]
   8f91e:	2b00      	cmp	r3, #0
   8f920:	d003      	beq.n	8f92a <Cl_Conductivity_Sensor_Controller+0x32>
   8f922:	2b02      	cmp	r3, #2
   8f924:	d023      	beq.n	8f96e <Cl_Conductivity_Sensor_Controller+0x76>
							sv_cs_setcondpotvalue(cond_pot_val_2volts);
							return CL_OK;
						}
						
						break;
						default:break;
   8f926:	bf00      	nop
					}
			break;
   8f928:	e0cd      	b.n	8fac6 <Cl_Conductivity_Sensor_Controller+0x1ce>
			
			case COND_STATE_IDLE:
				switch (Cl_cond_Event)
					{
						case COND_EVENT_INIT:
						sv_cs_setcondpotvalue(cond_pot_val_2volts);
   8f92a:	4b6c      	ldr	r3, [pc, #432]	; (8fadc <Cl_Conductivity_Sensor_Controller+0x1e4>)
   8f92c:	881b      	ldrh	r3, [r3, #0]
   8f92e:	4618      	mov	r0, r3
   8f930:	4b6b      	ldr	r3, [pc, #428]	; (8fae0 <Cl_Conductivity_Sensor_Controller+0x1e8>)
   8f932:	4798      	blx	r3
						cl_wait(100);
   8f934:	2064      	movs	r0, #100	; 0x64
   8f936:	4b6b      	ldr	r3, [pc, #428]	; (8fae4 <Cl_Conductivity_Sensor_Controller+0x1ec>)
   8f938:	4798      	blx	r3
						Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_WIEN_STATUS,&temp_val);
   8f93a:	f107 030a 	add.w	r3, r7, #10
   8f93e:	2006      	movs	r0, #6
   8f940:	4619      	mov	r1, r3
   8f942:	4b69      	ldr	r3, [pc, #420]	; (8fae8 <Cl_Conductivity_Sensor_Controller+0x1f0>)
   8f944:	4798      	blx	r3
						cond_millivolts = 5 * temp_val;
   8f946:	897b      	ldrh	r3, [r7, #10]
   8f948:	461a      	mov	r2, r3
   8f94a:	0092      	lsls	r2, r2, #2
   8f94c:	4413      	add	r3, r2
   8f94e:	81bb      	strh	r3, [r7, #12]
						if((cond_millivolts_avg > 1800) && (cond_millivolts_avg < 2200))
   8f950:	4b66      	ldr	r3, [pc, #408]	; (8faec <Cl_Conductivity_Sensor_Controller+0x1f4>)
   8f952:	881b      	ldrh	r3, [r3, #0]
   8f954:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
   8f958:	d907      	bls.n	8f96a <Cl_Conductivity_Sensor_Controller+0x72>
   8f95a:	4b64      	ldr	r3, [pc, #400]	; (8faec <Cl_Conductivity_Sensor_Controller+0x1f4>)
   8f95c:	881b      	ldrh	r3, [r3, #0]
   8f95e:	f640 0297 	movw	r2, #2199	; 0x897
   8f962:	4293      	cmp	r3, r2
   8f964:	d801      	bhi.n	8f96a <Cl_Conductivity_Sensor_Controller+0x72>
						{
							return CL_OK;
   8f966:	2300      	movs	r3, #0
   8f968:	e0ae      	b.n	8fac8 <Cl_Conductivity_Sensor_Controller+0x1d0>
						}
						else
						{
							return CL_ERROR;
   8f96a:	2304      	movs	r3, #4
   8f96c:	e0ac      	b.n	8fac8 <Cl_Conductivity_Sensor_Controller+0x1d0>
						
						break;
		
						case COND_EVENT_1SEC:
		
						Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_WIEN_STATUS,&temp_val);
   8f96e:	f107 030a 	add.w	r3, r7, #10
   8f972:	2006      	movs	r0, #6
   8f974:	4619      	mov	r1, r3
   8f976:	4b5c      	ldr	r3, [pc, #368]	; (8fae8 <Cl_Conductivity_Sensor_Controller+0x1f0>)
   8f978:	4798      	blx	r3
						cond_millivolts = 0.8036 * temp_val;
   8f97a:	897b      	ldrh	r3, [r7, #10]
   8f97c:	461a      	mov	r2, r3
   8f97e:	4b5c      	ldr	r3, [pc, #368]	; (8faf0 <Cl_Conductivity_Sensor_Controller+0x1f8>)
   8f980:	4610      	mov	r0, r2
   8f982:	4798      	blx	r3
   8f984:	4602      	mov	r2, r0
   8f986:	460b      	mov	r3, r1
   8f988:	4c5a      	ldr	r4, [pc, #360]	; (8faf4 <Cl_Conductivity_Sensor_Controller+0x1fc>)
   8f98a:	4610      	mov	r0, r2
   8f98c:	4619      	mov	r1, r3
   8f98e:	a350      	add	r3, pc, #320	; (adr r3, 8fad0 <Cl_Conductivity_Sensor_Controller+0x1d8>)
   8f990:	e9d3 2300 	ldrd	r2, r3, [r3]
   8f994:	47a0      	blx	r4
   8f996:	4602      	mov	r2, r0
   8f998:	460b      	mov	r3, r1
   8f99a:	4610      	mov	r0, r2
   8f99c:	4619      	mov	r1, r3
   8f99e:	4b56      	ldr	r3, [pc, #344]	; (8faf8 <Cl_Conductivity_Sensor_Controller+0x200>)
   8f9a0:	4798      	blx	r3
   8f9a2:	4603      	mov	r3, r0
   8f9a4:	81bb      	strh	r3, [r7, #12]
						cond_millivolts_avg = cond_millivolts;
   8f9a6:	4a51      	ldr	r2, [pc, #324]	; (8faec <Cl_Conductivity_Sensor_Controller+0x1f4>)
   8f9a8:	89bb      	ldrh	r3, [r7, #12]
   8f9aa:	8013      	strh	r3, [r2, #0]
						cond_3sec_avg = cond_millivolts;
   8f9ac:	4a53      	ldr	r2, [pc, #332]	; (8fafc <Cl_Conductivity_Sensor_Controller+0x204>)
   8f9ae:	89bb      	ldrh	r3, [r7, #12]
   8f9b0:	8013      	strh	r3, [r2, #0]
						Cond_Sensor_State = COND_STATE_ACTIVE;
   8f9b2:	4b49      	ldr	r3, [pc, #292]	; (8fad8 <Cl_Conductivity_Sensor_Controller+0x1e0>)
   8f9b4:	2202      	movs	r2, #2
   8f9b6:	701a      	strb	r2, [r3, #0]
						if((cond_millivolts_avg > 1800) && (cond_millivolts_avg < 2200))
   8f9b8:	4b4c      	ldr	r3, [pc, #304]	; (8faec <Cl_Conductivity_Sensor_Controller+0x1f4>)
   8f9ba:	881b      	ldrh	r3, [r3, #0]
   8f9bc:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
   8f9c0:	d907      	bls.n	8f9d2 <Cl_Conductivity_Sensor_Controller+0xda>
   8f9c2:	4b4a      	ldr	r3, [pc, #296]	; (8faec <Cl_Conductivity_Sensor_Controller+0x1f4>)
   8f9c4:	881b      	ldrh	r3, [r3, #0]
   8f9c6:	f640 0297 	movw	r2, #2199	; 0x897
   8f9ca:	4293      	cmp	r3, r2
   8f9cc:	d801      	bhi.n	8f9d2 <Cl_Conductivity_Sensor_Controller+0xda>
						{
							return CL_OK;
   8f9ce:	2300      	movs	r3, #0
   8f9d0:	e07a      	b.n	8fac8 <Cl_Conductivity_Sensor_Controller+0x1d0>
						}
						else
						{
							sv_cs_setcondpotvalue(cond_pot_val_2volts);
   8f9d2:	4b42      	ldr	r3, [pc, #264]	; (8fadc <Cl_Conductivity_Sensor_Controller+0x1e4>)
   8f9d4:	881b      	ldrh	r3, [r3, #0]
   8f9d6:	4618      	mov	r0, r3
   8f9d8:	4b41      	ldr	r3, [pc, #260]	; (8fae0 <Cl_Conductivity_Sensor_Controller+0x1e8>)
   8f9da:	4798      	blx	r3
							return CL_OK;
   8f9dc:	2300      	movs	r3, #0
   8f9de:	e073      	b.n	8fac8 <Cl_Conductivity_Sensor_Controller+0x1d0>
						break;
						default:break;
					}
			break;
			case COND_STATE_ACTIVE:
				switch (Cl_cond_Event)
   8f9e0:	79fb      	ldrb	r3, [r7, #7]
   8f9e2:	2b02      	cmp	r3, #2
   8f9e4:	d000      	beq.n	8f9e8 <Cl_Conductivity_Sensor_Controller+0xf0>
					else
					{
						return CL_ERROR;
					}
					break;
					default:break;
   8f9e6:	e06d      	b.n	8fac4 <Cl_Conductivity_Sensor_Controller+0x1cc>
				switch (Cl_cond_Event)
				{

					case COND_EVENT_1SEC:
		
					Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_WIEN_STATUS,&temp_val);
   8f9e8:	f107 030a 	add.w	r3, r7, #10
   8f9ec:	2006      	movs	r0, #6
   8f9ee:	4619      	mov	r1, r3
   8f9f0:	4b3d      	ldr	r3, [pc, #244]	; (8fae8 <Cl_Conductivity_Sensor_Controller+0x1f0>)
   8f9f2:	4798      	blx	r3
					cond_millivolts = 0.8036 * temp_val;
   8f9f4:	897b      	ldrh	r3, [r7, #10]
   8f9f6:	461a      	mov	r2, r3
   8f9f8:	4b3d      	ldr	r3, [pc, #244]	; (8faf0 <Cl_Conductivity_Sensor_Controller+0x1f8>)
   8f9fa:	4610      	mov	r0, r2
   8f9fc:	4798      	blx	r3
   8f9fe:	4602      	mov	r2, r0
   8fa00:	460b      	mov	r3, r1
   8fa02:	4c3c      	ldr	r4, [pc, #240]	; (8faf4 <Cl_Conductivity_Sensor_Controller+0x1fc>)
   8fa04:	4610      	mov	r0, r2
   8fa06:	4619      	mov	r1, r3
   8fa08:	a331      	add	r3, pc, #196	; (adr r3, 8fad0 <Cl_Conductivity_Sensor_Controller+0x1d8>)
   8fa0a:	e9d3 2300 	ldrd	r2, r3, [r3]
   8fa0e:	47a0      	blx	r4
   8fa10:	4602      	mov	r2, r0
   8fa12:	460b      	mov	r3, r1
   8fa14:	4610      	mov	r0, r2
   8fa16:	4619      	mov	r1, r3
   8fa18:	4b37      	ldr	r3, [pc, #220]	; (8faf8 <Cl_Conductivity_Sensor_Controller+0x200>)
   8fa1a:	4798      	blx	r3
   8fa1c:	4603      	mov	r3, r0
   8fa1e:	81bb      	strh	r3, [r7, #12]
					
					if((cond_millivolts_avg > 1800) && (cond_millivolts_avg < 2200))
   8fa20:	4b32      	ldr	r3, [pc, #200]	; (8faec <Cl_Conductivity_Sensor_Controller+0x1f4>)
   8fa22:	881b      	ldrh	r3, [r3, #0]
   8fa24:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
   8fa28:	d94a      	bls.n	8fac0 <Cl_Conductivity_Sensor_Controller+0x1c8>
   8fa2a:	4b30      	ldr	r3, [pc, #192]	; (8faec <Cl_Conductivity_Sensor_Controller+0x1f4>)
   8fa2c:	881b      	ldrh	r3, [r3, #0]
   8fa2e:	f640 0297 	movw	r2, #2199	; 0x897
   8fa32:	4293      	cmp	r3, r2
   8fa34:	d844      	bhi.n	8fac0 <Cl_Conductivity_Sensor_Controller+0x1c8>
					{
							cond_millivolts_avg = (cond_millivolts_avg * 19 +cond_millivolts)/20;
   8fa36:	4b2d      	ldr	r3, [pc, #180]	; (8faec <Cl_Conductivity_Sensor_Controller+0x1f4>)
   8fa38:	881b      	ldrh	r3, [r3, #0]
   8fa3a:	461a      	mov	r2, r3
   8fa3c:	4613      	mov	r3, r2
   8fa3e:	00db      	lsls	r3, r3, #3
   8fa40:	4413      	add	r3, r2
   8fa42:	005b      	lsls	r3, r3, #1
   8fa44:	441a      	add	r2, r3
   8fa46:	89bb      	ldrh	r3, [r7, #12]
   8fa48:	4413      	add	r3, r2
   8fa4a:	4a2d      	ldr	r2, [pc, #180]	; (8fb00 <Cl_Conductivity_Sensor_Controller+0x208>)
   8fa4c:	fb82 1203 	smull	r1, r2, r2, r3
   8fa50:	10d2      	asrs	r2, r2, #3
   8fa52:	17db      	asrs	r3, r3, #31
   8fa54:	1ad3      	subs	r3, r2, r3
   8fa56:	b29a      	uxth	r2, r3
   8fa58:	4b24      	ldr	r3, [pc, #144]	; (8faec <Cl_Conductivity_Sensor_Controller+0x1f4>)
   8fa5a:	801a      	strh	r2, [r3, #0]
							cond_3sec_avg = (cond_millivolts_avg * 2 +cond_millivolts)/3;
   8fa5c:	4b23      	ldr	r3, [pc, #140]	; (8faec <Cl_Conductivity_Sensor_Controller+0x1f4>)
   8fa5e:	881b      	ldrh	r3, [r3, #0]
   8fa60:	005a      	lsls	r2, r3, #1
   8fa62:	89bb      	ldrh	r3, [r7, #12]
   8fa64:	4413      	add	r3, r2
   8fa66:	4a27      	ldr	r2, [pc, #156]	; (8fb04 <Cl_Conductivity_Sensor_Controller+0x20c>)
   8fa68:	fb82 1203 	smull	r1, r2, r2, r3
   8fa6c:	17db      	asrs	r3, r3, #31
   8fa6e:	1ad3      	subs	r3, r2, r3
   8fa70:	b29a      	uxth	r2, r3
   8fa72:	4b22      	ldr	r3, [pc, #136]	; (8fafc <Cl_Conductivity_Sensor_Controller+0x204>)
   8fa74:	801a      	strh	r2, [r3, #0]
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cond_3sec_avg,2);
							//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"AVG",3);
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cond_millivolts_avg,2);
						if (cond_3sec_avg > 2005 )
   8fa76:	4b21      	ldr	r3, [pc, #132]	; (8fafc <Cl_Conductivity_Sensor_Controller+0x204>)
   8fa78:	881b      	ldrh	r3, [r3, #0]
   8fa7a:	f240 72d5 	movw	r2, #2005	; 0x7d5
   8fa7e:	4293      	cmp	r3, r2
   8fa80:	d90b      	bls.n	8fa9a <Cl_Conductivity_Sensor_Controller+0x1a2>
						{
							//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"MORE",4);
							cond_pot_val_2volts = cond_pot_val_2volts -1;
   8fa82:	4b16      	ldr	r3, [pc, #88]	; (8fadc <Cl_Conductivity_Sensor_Controller+0x1e4>)
   8fa84:	881b      	ldrh	r3, [r3, #0]
   8fa86:	3b01      	subs	r3, #1
   8fa88:	b29a      	uxth	r2, r3
   8fa8a:	4b14      	ldr	r3, [pc, #80]	; (8fadc <Cl_Conductivity_Sensor_Controller+0x1e4>)
   8fa8c:	801a      	strh	r2, [r3, #0]
							sv_cs_setcondpotvalue(cond_pot_val_2volts );
   8fa8e:	4b13      	ldr	r3, [pc, #76]	; (8fadc <Cl_Conductivity_Sensor_Controller+0x1e4>)
   8fa90:	881b      	ldrh	r3, [r3, #0]
   8fa92:	4618      	mov	r0, r3
   8fa94:	4b12      	ldr	r3, [pc, #72]	; (8fae0 <Cl_Conductivity_Sensor_Controller+0x1e8>)
   8fa96:	4798      	blx	r3
   8fa98:	e010      	b.n	8fabc <Cl_Conductivity_Sensor_Controller+0x1c4>
						}
						else if (cond_3sec_avg < 1995 )
   8fa9a:	4b18      	ldr	r3, [pc, #96]	; (8fafc <Cl_Conductivity_Sensor_Controller+0x204>)
   8fa9c:	881b      	ldrh	r3, [r3, #0]
   8fa9e:	f240 72ca 	movw	r2, #1994	; 0x7ca
   8faa2:	4293      	cmp	r3, r2
   8faa4:	d80a      	bhi.n	8fabc <Cl_Conductivity_Sensor_Controller+0x1c4>
						{
							//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"LESS",4);
							cond_pot_val_2volts = cond_pot_val_2volts + 1;
   8faa6:	4b0d      	ldr	r3, [pc, #52]	; (8fadc <Cl_Conductivity_Sensor_Controller+0x1e4>)
   8faa8:	881b      	ldrh	r3, [r3, #0]
   8faaa:	3301      	adds	r3, #1
   8faac:	b29a      	uxth	r2, r3
   8faae:	4b0b      	ldr	r3, [pc, #44]	; (8fadc <Cl_Conductivity_Sensor_Controller+0x1e4>)
   8fab0:	801a      	strh	r2, [r3, #0]
							sv_cs_setcondpotvalue(cond_pot_val_2volts );
   8fab2:	4b0a      	ldr	r3, [pc, #40]	; (8fadc <Cl_Conductivity_Sensor_Controller+0x1e4>)
   8fab4:	881b      	ldrh	r3, [r3, #0]
   8fab6:	4618      	mov	r0, r3
   8fab8:	4b09      	ldr	r3, [pc, #36]	; (8fae0 <Cl_Conductivity_Sensor_Controller+0x1e8>)
   8faba:	4798      	blx	r3
							cond_millivolts_avg = (cond_millivolts_avg * 19 +cond_millivolts)/20;
							cond_3sec_avg = (cond_millivolts_avg * 2 +cond_millivolts)/3;
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cond_3sec_avg,2);
							//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"AVG",3);
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cond_millivolts_avg,2);
						if (cond_3sec_avg > 2005 )
   8fabc:	bf00      	nop
					}
					else
					{
						return CL_ERROR;
					}
					break;
   8fabe:	e001      	b.n	8fac4 <Cl_Conductivity_Sensor_Controller+0x1cc>
			
						}
					}
					else
					{
						return CL_ERROR;
   8fac0:	2304      	movs	r3, #4
   8fac2:	e001      	b.n	8fac8 <Cl_Conductivity_Sensor_Controller+0x1d0>
					}
					break;
					default:break;
				}
				
			break;
   8fac4:	bf00      	nop
			default:break;
		}
		
	return CL_OK;
   8fac6:	2300      	movs	r3, #0
   8fac8:	4618      	mov	r0, r3
   8faca:	3714      	adds	r7, #20
   8facc:	46bd      	mov	sp, r7
   8face:	bd90      	pop	{r4, r7, pc}
   8fad0:	58e21965 	.word	0x58e21965
   8fad4:	3fe9b717 	.word	0x3fe9b717
   8fad8:	20071a33 	.word	0x20071a33
   8fadc:	20070586 	.word	0x20070586
   8fae0:	0009a195 	.word	0x0009a195
   8fae4:	00093195 	.word	0x00093195
   8fae8:	0008e7f9 	.word	0x0008e7f9
   8faec:	20071a34 	.word	0x20071a34
   8faf0:	000a600d 	.word	0x000a600d
   8faf4:	000a60d9 	.word	0x000a60d9
   8faf8:	000a665d 	.word	0x000a665d
   8fafc:	20071a36 	.word	0x20071a36
   8fb00:	66666667 	.word	0x66666667
   8fb04:	55555556 	.word	0x55555556

0008fb08 <Cl_Pressure_Controller_Handler>:
static Cl_PressureSensor_StateType Cl_PressureSensor_State = PS_STATE_IDLE;
extern Cl_ReturnCodeType Cl_SysStat_GetSensor_Status_Query(Cl_SensorDeviceIdType, uint16_t*);
Cl_ReturnCodeType  Cl_Pressure_Controller_Handler(Cl_PressureSensor_EventType Cl_Ps_Event);

Cl_ReturnCodeType  Cl_Pressure_Controller_Handler(Cl_PressureSensor_EventType Cl_Ps_Event)
{
   8fb08:	b580      	push	{r7, lr}
   8fb0a:	b084      	sub	sp, #16
   8fb0c:	af00      	add	r7, sp, #0
   8fb0e:	4603      	mov	r3, r0
   8fb10:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType cl_retval = CL_OK;
   8fb12:	2300      	movs	r3, #0
   8fb14:	73fb      	strb	r3, [r7, #15]
	Cl_Uint16Type temp_val  = 0;
   8fb16:	2300      	movs	r3, #0
   8fb18:	81bb      	strh	r3, [r7, #12]
	
	if(Cl_PressureSensor_State == PS_STATE_INITIALISING)
   8fb1a:	4b90      	ldr	r3, [pc, #576]	; (8fd5c <Cl_Pressure_Controller_Handler+0x254>)
   8fb1c:	781b      	ldrb	r3, [r3, #0]
   8fb1e:	2b01      	cmp	r3, #1
   8fb20:	f040 8098 	bne.w	8fc54 <Cl_Pressure_Controller_Handler+0x14c>
	{
		switch(Cl_Ps_Event)
   8fb24:	79fb      	ldrb	r3, [r7, #7]
   8fb26:	2b00      	cmp	r3, #0
   8fb28:	f000 8092 	beq.w	8fc50 <Cl_Pressure_Controller_Handler+0x148>
   8fb2c:	2b01      	cmp	r3, #1
   8fb2e:	d000      	beq.n	8fb32 <Cl_Pressure_Controller_Handler+0x2a>
			{
				counter = 0;
				Cl_PressureSensor_State = PS_STATE_ACTIVE;
			}
			break;
			default:break;
   8fb30:	e08f      	b.n	8fc52 <Cl_Pressure_Controller_Handler+0x14a>
		{
			
			case PS_EVENT_50MS:
			break;
			case PS_EVENT_100MS:
			if ( counter == 0 )
   8fb32:	4b8b      	ldr	r3, [pc, #556]	; (8fd60 <Cl_Pressure_Controller_Handler+0x258>)
   8fb34:	881b      	ldrh	r3, [r3, #0]
   8fb36:	2b00      	cmp	r3, #0
   8fb38:	d114      	bne.n	8fb64 <Cl_Pressure_Controller_Handler+0x5c>
			{
				Cl_SysStat_GetSensor_Status_Query(SENSOR_PS1STATUS, &Ps1);
   8fb3a:	200e      	movs	r0, #14
   8fb3c:	4989      	ldr	r1, [pc, #548]	; (8fd64 <Cl_Pressure_Controller_Handler+0x25c>)
   8fb3e:	4b8a      	ldr	r3, [pc, #552]	; (8fd68 <Cl_Pressure_Controller_Handler+0x260>)
   8fb40:	4798      	blx	r3
				Cl_SysStat_GetSensor_Status_Query(SENSOR_PS2STATUS, &Ps2);
   8fb42:	200f      	movs	r0, #15
   8fb44:	4989      	ldr	r1, [pc, #548]	; (8fd6c <Cl_Pressure_Controller_Handler+0x264>)
   8fb46:	4b88      	ldr	r3, [pc, #544]	; (8fd68 <Cl_Pressure_Controller_Handler+0x260>)
   8fb48:	4798      	blx	r3
				Cl_SysStat_GetSensor_Status_Query(SENSOR_PS3STATUS, &Ps3);
   8fb4a:	2010      	movs	r0, #16
   8fb4c:	4988      	ldr	r1, [pc, #544]	; (8fd70 <Cl_Pressure_Controller_Handler+0x268>)
   8fb4e:	4b86      	ldr	r3, [pc, #536]	; (8fd68 <Cl_Pressure_Controller_Handler+0x260>)
   8fb50:	4798      	blx	r3
				Cl_SysStat_GetSensor_Status_Query(SENSOR_APTSTATUS, &apt);
   8fb52:	200b      	movs	r0, #11
   8fb54:	4987      	ldr	r1, [pc, #540]	; (8fd74 <Cl_Pressure_Controller_Handler+0x26c>)
   8fb56:	4b84      	ldr	r3, [pc, #528]	; (8fd68 <Cl_Pressure_Controller_Handler+0x260>)
   8fb58:	4798      	blx	r3
				Cl_SysStat_GetSensor_Status_Query(SENSOR_APTSTATUS, &vpt);
   8fb5a:	200b      	movs	r0, #11
   8fb5c:	4986      	ldr	r1, [pc, #536]	; (8fd78 <Cl_Pressure_Controller_Handler+0x270>)
   8fb5e:	4b82      	ldr	r3, [pc, #520]	; (8fd68 <Cl_Pressure_Controller_Handler+0x260>)
   8fb60:	4798      	blx	r3
   8fb62:	e063      	b.n	8fc2c <Cl_Pressure_Controller_Handler+0x124>
			}
			else
			{
				Cl_SysStat_GetSensor_Status_Query(SENSOR_PS1STATUS, &temp_val);
   8fb64:	f107 030c 	add.w	r3, r7, #12
   8fb68:	200e      	movs	r0, #14
   8fb6a:	4619      	mov	r1, r3
   8fb6c:	4b7e      	ldr	r3, [pc, #504]	; (8fd68 <Cl_Pressure_Controller_Handler+0x260>)
   8fb6e:	4798      	blx	r3
				Ps1 = ( Ps1 +temp_val)/counter+1 ;
   8fb70:	4b7c      	ldr	r3, [pc, #496]	; (8fd64 <Cl_Pressure_Controller_Handler+0x25c>)
   8fb72:	881b      	ldrh	r3, [r3, #0]
   8fb74:	461a      	mov	r2, r3
   8fb76:	89bb      	ldrh	r3, [r7, #12]
   8fb78:	4413      	add	r3, r2
   8fb7a:	4a79      	ldr	r2, [pc, #484]	; (8fd60 <Cl_Pressure_Controller_Handler+0x258>)
   8fb7c:	8812      	ldrh	r2, [r2, #0]
   8fb7e:	fb93 f3f2 	sdiv	r3, r3, r2
   8fb82:	b29b      	uxth	r3, r3
   8fb84:	3301      	adds	r3, #1
   8fb86:	b29a      	uxth	r2, r3
   8fb88:	4b76      	ldr	r3, [pc, #472]	; (8fd64 <Cl_Pressure_Controller_Handler+0x25c>)
   8fb8a:	801a      	strh	r2, [r3, #0]
				Cl_SysStat_GetSensor_Status_Query(SENSOR_PS2STATUS, &temp_val);
   8fb8c:	f107 030c 	add.w	r3, r7, #12
   8fb90:	200f      	movs	r0, #15
   8fb92:	4619      	mov	r1, r3
   8fb94:	4b74      	ldr	r3, [pc, #464]	; (8fd68 <Cl_Pressure_Controller_Handler+0x260>)
   8fb96:	4798      	blx	r3
				Ps2 = ( Ps2 +temp_val)/counter+1 ;
   8fb98:	4b74      	ldr	r3, [pc, #464]	; (8fd6c <Cl_Pressure_Controller_Handler+0x264>)
   8fb9a:	881b      	ldrh	r3, [r3, #0]
   8fb9c:	461a      	mov	r2, r3
   8fb9e:	89bb      	ldrh	r3, [r7, #12]
   8fba0:	4413      	add	r3, r2
   8fba2:	4a6f      	ldr	r2, [pc, #444]	; (8fd60 <Cl_Pressure_Controller_Handler+0x258>)
   8fba4:	8812      	ldrh	r2, [r2, #0]
   8fba6:	fb93 f3f2 	sdiv	r3, r3, r2
   8fbaa:	b29b      	uxth	r3, r3
   8fbac:	3301      	adds	r3, #1
   8fbae:	b29a      	uxth	r2, r3
   8fbb0:	4b6e      	ldr	r3, [pc, #440]	; (8fd6c <Cl_Pressure_Controller_Handler+0x264>)
   8fbb2:	801a      	strh	r2, [r3, #0]
				Cl_SysStat_GetSensor_Status_Query(SENSOR_PS3STATUS, &temp_val);
   8fbb4:	f107 030c 	add.w	r3, r7, #12
   8fbb8:	2010      	movs	r0, #16
   8fbba:	4619      	mov	r1, r3
   8fbbc:	4b6a      	ldr	r3, [pc, #424]	; (8fd68 <Cl_Pressure_Controller_Handler+0x260>)
   8fbbe:	4798      	blx	r3
				Ps3 = ( Ps3 +temp_val)/counter+1 ;
   8fbc0:	4b6b      	ldr	r3, [pc, #428]	; (8fd70 <Cl_Pressure_Controller_Handler+0x268>)
   8fbc2:	881b      	ldrh	r3, [r3, #0]
   8fbc4:	461a      	mov	r2, r3
   8fbc6:	89bb      	ldrh	r3, [r7, #12]
   8fbc8:	4413      	add	r3, r2
   8fbca:	4a65      	ldr	r2, [pc, #404]	; (8fd60 <Cl_Pressure_Controller_Handler+0x258>)
   8fbcc:	8812      	ldrh	r2, [r2, #0]
   8fbce:	fb93 f3f2 	sdiv	r3, r3, r2
   8fbd2:	b29b      	uxth	r3, r3
   8fbd4:	3301      	adds	r3, #1
   8fbd6:	b29a      	uxth	r2, r3
   8fbd8:	4b65      	ldr	r3, [pc, #404]	; (8fd70 <Cl_Pressure_Controller_Handler+0x268>)
   8fbda:	801a      	strh	r2, [r3, #0]
				Cl_SysStat_GetSensor_Status_Query(SENSOR_APTSTATUS, &temp_val);
   8fbdc:	f107 030c 	add.w	r3, r7, #12
   8fbe0:	200b      	movs	r0, #11
   8fbe2:	4619      	mov	r1, r3
   8fbe4:	4b60      	ldr	r3, [pc, #384]	; (8fd68 <Cl_Pressure_Controller_Handler+0x260>)
   8fbe6:	4798      	blx	r3
				apt = ( apt +temp_val)/counter+1 ;
   8fbe8:	4b62      	ldr	r3, [pc, #392]	; (8fd74 <Cl_Pressure_Controller_Handler+0x26c>)
   8fbea:	881b      	ldrh	r3, [r3, #0]
   8fbec:	461a      	mov	r2, r3
   8fbee:	89bb      	ldrh	r3, [r7, #12]
   8fbf0:	4413      	add	r3, r2
   8fbf2:	4a5b      	ldr	r2, [pc, #364]	; (8fd60 <Cl_Pressure_Controller_Handler+0x258>)
   8fbf4:	8812      	ldrh	r2, [r2, #0]
   8fbf6:	fb93 f3f2 	sdiv	r3, r3, r2
   8fbfa:	b29b      	uxth	r3, r3
   8fbfc:	3301      	adds	r3, #1
   8fbfe:	b29a      	uxth	r2, r3
   8fc00:	4b5c      	ldr	r3, [pc, #368]	; (8fd74 <Cl_Pressure_Controller_Handler+0x26c>)
   8fc02:	801a      	strh	r2, [r3, #0]
				Cl_SysStat_GetSensor_Status_Query(SENSOR_APTSTATUS, &temp_val);
   8fc04:	f107 030c 	add.w	r3, r7, #12
   8fc08:	200b      	movs	r0, #11
   8fc0a:	4619      	mov	r1, r3
   8fc0c:	4b56      	ldr	r3, [pc, #344]	; (8fd68 <Cl_Pressure_Controller_Handler+0x260>)
   8fc0e:	4798      	blx	r3
				vpt = ( vpt +temp_val)/counter+1 ;
   8fc10:	4b59      	ldr	r3, [pc, #356]	; (8fd78 <Cl_Pressure_Controller_Handler+0x270>)
   8fc12:	881b      	ldrh	r3, [r3, #0]
   8fc14:	461a      	mov	r2, r3
   8fc16:	89bb      	ldrh	r3, [r7, #12]
   8fc18:	4413      	add	r3, r2
   8fc1a:	4a51      	ldr	r2, [pc, #324]	; (8fd60 <Cl_Pressure_Controller_Handler+0x258>)
   8fc1c:	8812      	ldrh	r2, [r2, #0]
   8fc1e:	fb93 f3f2 	sdiv	r3, r3, r2
   8fc22:	b29b      	uxth	r3, r3
   8fc24:	3301      	adds	r3, #1
   8fc26:	b29a      	uxth	r2, r3
   8fc28:	4b53      	ldr	r3, [pc, #332]	; (8fd78 <Cl_Pressure_Controller_Handler+0x270>)
   8fc2a:	801a      	strh	r2, [r3, #0]
			}

			counter++;
   8fc2c:	4b4c      	ldr	r3, [pc, #304]	; (8fd60 <Cl_Pressure_Controller_Handler+0x258>)
   8fc2e:	881b      	ldrh	r3, [r3, #0]
   8fc30:	3301      	adds	r3, #1
   8fc32:	b29a      	uxth	r2, r3
   8fc34:	4b4a      	ldr	r3, [pc, #296]	; (8fd60 <Cl_Pressure_Controller_Handler+0x258>)
   8fc36:	801a      	strh	r2, [r3, #0]
			if(counter > 10)
   8fc38:	4b49      	ldr	r3, [pc, #292]	; (8fd60 <Cl_Pressure_Controller_Handler+0x258>)
   8fc3a:	881b      	ldrh	r3, [r3, #0]
   8fc3c:	2b0a      	cmp	r3, #10
   8fc3e:	d906      	bls.n	8fc4e <Cl_Pressure_Controller_Handler+0x146>
			{
				counter = 0;
   8fc40:	4b47      	ldr	r3, [pc, #284]	; (8fd60 <Cl_Pressure_Controller_Handler+0x258>)
   8fc42:	2200      	movs	r2, #0
   8fc44:	801a      	strh	r2, [r3, #0]
				Cl_PressureSensor_State = PS_STATE_ACTIVE;
   8fc46:	4b45      	ldr	r3, [pc, #276]	; (8fd5c <Cl_Pressure_Controller_Handler+0x254>)
   8fc48:	2202      	movs	r2, #2
   8fc4a:	701a      	strb	r2, [r3, #0]
			}
			break;
   8fc4c:	e001      	b.n	8fc52 <Cl_Pressure_Controller_Handler+0x14a>
   8fc4e:	e000      	b.n	8fc52 <Cl_Pressure_Controller_Handler+0x14a>
	{
		switch(Cl_Ps_Event)
		{
			
			case PS_EVENT_50MS:
			break;
   8fc50:	bf00      	nop
   8fc52:	e07e      	b.n	8fd52 <Cl_Pressure_Controller_Handler+0x24a>
			}
			break;
			default:break;
		}
	}
	else if(Cl_PressureSensor_State == PS_STATE_ACTIVE)
   8fc54:	4b41      	ldr	r3, [pc, #260]	; (8fd5c <Cl_Pressure_Controller_Handler+0x254>)
   8fc56:	781b      	ldrb	r3, [r3, #0]
   8fc58:	2b02      	cmp	r3, #2
   8fc5a:	d17a      	bne.n	8fd52 <Cl_Pressure_Controller_Handler+0x24a>
	{
		switch(Cl_Ps_Event)
   8fc5c:	79fb      	ldrb	r3, [r7, #7]
   8fc5e:	2b00      	cmp	r3, #0
   8fc60:	d076      	beq.n	8fd50 <Cl_Pressure_Controller_Handler+0x248>
   8fc62:	2b01      	cmp	r3, #1
   8fc64:	d000      	beq.n	8fc68 <Cl_Pressure_Controller_Handler+0x160>
				vpt = ( 9* vpt +temp_val)/10 ;

			
			
			break;
			default:break;
   8fc66:	e074      	b.n	8fd52 <Cl_Pressure_Controller_Handler+0x24a>
		{
			
			case PS_EVENT_50MS:
			break;
			case PS_EVENT_100MS:
				Cl_SysStat_GetSensor_Status_Query(SENSOR_PS1STATUS, &temp_val);
   8fc68:	f107 030c 	add.w	r3, r7, #12
   8fc6c:	200e      	movs	r0, #14
   8fc6e:	4619      	mov	r1, r3
   8fc70:	4b3d      	ldr	r3, [pc, #244]	; (8fd68 <Cl_Pressure_Controller_Handler+0x260>)
   8fc72:	4798      	blx	r3
				Ps1 = ( 9 *Ps1 +temp_val)/10 ;
   8fc74:	4b3b      	ldr	r3, [pc, #236]	; (8fd64 <Cl_Pressure_Controller_Handler+0x25c>)
   8fc76:	881b      	ldrh	r3, [r3, #0]
   8fc78:	461a      	mov	r2, r3
   8fc7a:	4613      	mov	r3, r2
   8fc7c:	00db      	lsls	r3, r3, #3
   8fc7e:	4413      	add	r3, r2
   8fc80:	89ba      	ldrh	r2, [r7, #12]
   8fc82:	4413      	add	r3, r2
   8fc84:	4a3d      	ldr	r2, [pc, #244]	; (8fd7c <Cl_Pressure_Controller_Handler+0x274>)
   8fc86:	fb82 1203 	smull	r1, r2, r2, r3
   8fc8a:	1092      	asrs	r2, r2, #2
   8fc8c:	17db      	asrs	r3, r3, #31
   8fc8e:	1ad3      	subs	r3, r2, r3
   8fc90:	b29a      	uxth	r2, r3
   8fc92:	4b34      	ldr	r3, [pc, #208]	; (8fd64 <Cl_Pressure_Controller_Handler+0x25c>)
   8fc94:	801a      	strh	r2, [r3, #0]
				Cl_SysStat_GetSensor_Status_Query(SENSOR_PS2STATUS, &temp_val);
   8fc96:	f107 030c 	add.w	r3, r7, #12
   8fc9a:	200f      	movs	r0, #15
   8fc9c:	4619      	mov	r1, r3
   8fc9e:	4b32      	ldr	r3, [pc, #200]	; (8fd68 <Cl_Pressure_Controller_Handler+0x260>)
   8fca0:	4798      	blx	r3
				Ps2 = ( 9 * Ps2 +temp_val)/10 ;
   8fca2:	4b32      	ldr	r3, [pc, #200]	; (8fd6c <Cl_Pressure_Controller_Handler+0x264>)
   8fca4:	881b      	ldrh	r3, [r3, #0]
   8fca6:	461a      	mov	r2, r3
   8fca8:	4613      	mov	r3, r2
   8fcaa:	00db      	lsls	r3, r3, #3
   8fcac:	4413      	add	r3, r2
   8fcae:	89ba      	ldrh	r2, [r7, #12]
   8fcb0:	4413      	add	r3, r2
   8fcb2:	4a32      	ldr	r2, [pc, #200]	; (8fd7c <Cl_Pressure_Controller_Handler+0x274>)
   8fcb4:	fb82 1203 	smull	r1, r2, r2, r3
   8fcb8:	1092      	asrs	r2, r2, #2
   8fcba:	17db      	asrs	r3, r3, #31
   8fcbc:	1ad3      	subs	r3, r2, r3
   8fcbe:	b29a      	uxth	r2, r3
   8fcc0:	4b2a      	ldr	r3, [pc, #168]	; (8fd6c <Cl_Pressure_Controller_Handler+0x264>)
   8fcc2:	801a      	strh	r2, [r3, #0]
				Cl_SysStat_GetSensor_Status_Query(SENSOR_PS3STATUS, &temp_val);
   8fcc4:	f107 030c 	add.w	r3, r7, #12
   8fcc8:	2010      	movs	r0, #16
   8fcca:	4619      	mov	r1, r3
   8fccc:	4b26      	ldr	r3, [pc, #152]	; (8fd68 <Cl_Pressure_Controller_Handler+0x260>)
   8fcce:	4798      	blx	r3
				Ps3 = ( 9*Ps3 +temp_val)/10 ;
   8fcd0:	4b27      	ldr	r3, [pc, #156]	; (8fd70 <Cl_Pressure_Controller_Handler+0x268>)
   8fcd2:	881b      	ldrh	r3, [r3, #0]
   8fcd4:	461a      	mov	r2, r3
   8fcd6:	4613      	mov	r3, r2
   8fcd8:	00db      	lsls	r3, r3, #3
   8fcda:	4413      	add	r3, r2
   8fcdc:	89ba      	ldrh	r2, [r7, #12]
   8fcde:	4413      	add	r3, r2
   8fce0:	4a26      	ldr	r2, [pc, #152]	; (8fd7c <Cl_Pressure_Controller_Handler+0x274>)
   8fce2:	fb82 1203 	smull	r1, r2, r2, r3
   8fce6:	1092      	asrs	r2, r2, #2
   8fce8:	17db      	asrs	r3, r3, #31
   8fcea:	1ad3      	subs	r3, r2, r3
   8fcec:	b29a      	uxth	r2, r3
   8fcee:	4b20      	ldr	r3, [pc, #128]	; (8fd70 <Cl_Pressure_Controller_Handler+0x268>)
   8fcf0:	801a      	strh	r2, [r3, #0]
				Cl_SysStat_GetSensor_Status_Query(SENSOR_APTSTATUS, &temp_val);
   8fcf2:	f107 030c 	add.w	r3, r7, #12
   8fcf6:	200b      	movs	r0, #11
   8fcf8:	4619      	mov	r1, r3
   8fcfa:	4b1b      	ldr	r3, [pc, #108]	; (8fd68 <Cl_Pressure_Controller_Handler+0x260>)
   8fcfc:	4798      	blx	r3
				apt = ( 9* apt +temp_val)/10 ;
   8fcfe:	4b1d      	ldr	r3, [pc, #116]	; (8fd74 <Cl_Pressure_Controller_Handler+0x26c>)
   8fd00:	881b      	ldrh	r3, [r3, #0]
   8fd02:	461a      	mov	r2, r3
   8fd04:	4613      	mov	r3, r2
   8fd06:	00db      	lsls	r3, r3, #3
   8fd08:	4413      	add	r3, r2
   8fd0a:	89ba      	ldrh	r2, [r7, #12]
   8fd0c:	4413      	add	r3, r2
   8fd0e:	4a1b      	ldr	r2, [pc, #108]	; (8fd7c <Cl_Pressure_Controller_Handler+0x274>)
   8fd10:	fb82 1203 	smull	r1, r2, r2, r3
   8fd14:	1092      	asrs	r2, r2, #2
   8fd16:	17db      	asrs	r3, r3, #31
   8fd18:	1ad3      	subs	r3, r2, r3
   8fd1a:	b29a      	uxth	r2, r3
   8fd1c:	4b15      	ldr	r3, [pc, #84]	; (8fd74 <Cl_Pressure_Controller_Handler+0x26c>)
   8fd1e:	801a      	strh	r2, [r3, #0]
				Cl_SysStat_GetSensor_Status_Query(SENSOR_VPTSTATUS, &temp_val);
   8fd20:	f107 030c 	add.w	r3, r7, #12
   8fd24:	200c      	movs	r0, #12
   8fd26:	4619      	mov	r1, r3
   8fd28:	4b0f      	ldr	r3, [pc, #60]	; (8fd68 <Cl_Pressure_Controller_Handler+0x260>)
   8fd2a:	4798      	blx	r3
				vpt = ( 9* vpt +temp_val)/10 ;
   8fd2c:	4b12      	ldr	r3, [pc, #72]	; (8fd78 <Cl_Pressure_Controller_Handler+0x270>)
   8fd2e:	881b      	ldrh	r3, [r3, #0]
   8fd30:	461a      	mov	r2, r3
   8fd32:	4613      	mov	r3, r2
   8fd34:	00db      	lsls	r3, r3, #3
   8fd36:	4413      	add	r3, r2
   8fd38:	89ba      	ldrh	r2, [r7, #12]
   8fd3a:	4413      	add	r3, r2
   8fd3c:	4a0f      	ldr	r2, [pc, #60]	; (8fd7c <Cl_Pressure_Controller_Handler+0x274>)
   8fd3e:	fb82 1203 	smull	r1, r2, r2, r3
   8fd42:	1092      	asrs	r2, r2, #2
   8fd44:	17db      	asrs	r3, r3, #31
   8fd46:	1ad3      	subs	r3, r2, r3
   8fd48:	b29a      	uxth	r2, r3
   8fd4a:	4b0b      	ldr	r3, [pc, #44]	; (8fd78 <Cl_Pressure_Controller_Handler+0x270>)
   8fd4c:	801a      	strh	r2, [r3, #0]

			
			
			break;
   8fd4e:	e000      	b.n	8fd52 <Cl_Pressure_Controller_Handler+0x24a>
	{
		switch(Cl_Ps_Event)
		{
			
			case PS_EVENT_50MS:
			break;
   8fd50:	bf00      	nop
		
	}

	
	
	return cl_retval;
   8fd52:	7bfb      	ldrb	r3, [r7, #15]
}
   8fd54:	4618      	mov	r0, r3
   8fd56:	3710      	adds	r7, #16
   8fd58:	46bd      	mov	sp, r7
   8fd5a:	bd80      	pop	{r7, pc}
   8fd5c:	20071a44 	.word	0x20071a44
   8fd60:	20071a42 	.word	0x20071a42
   8fd64:	20071a38 	.word	0x20071a38
   8fd68:	0008e7f9 	.word	0x0008e7f9
   8fd6c:	20071a3a 	.word	0x20071a3a
   8fd70:	20071a3c 	.word	0x20071a3c
   8fd74:	20071a3e 	.word	0x20071a3e
   8fd78:	20071a40 	.word	0x20071a40
   8fd7c:	66666667 	.word	0x66666667

0008fd80 <Cl_Pressure_Controller_Init>:

Cl_ReturnCodeType  Cl_Pressure_Controller_Init(void)
{
   8fd80:	b480      	push	{r7}
   8fd82:	b083      	sub	sp, #12
   8fd84:	af00      	add	r7, sp, #0

	Cl_ReturnCodeType cl_retval = CL_OK;
   8fd86:	2300      	movs	r3, #0
   8fd88:	71fb      	strb	r3, [r7, #7]
	 Ps1 = 0;
   8fd8a:	4b0c      	ldr	r3, [pc, #48]	; (8fdbc <Cl_Pressure_Controller_Init+0x3c>)
   8fd8c:	2200      	movs	r2, #0
   8fd8e:	801a      	strh	r2, [r3, #0]
	Ps2 = 0;
   8fd90:	4b0b      	ldr	r3, [pc, #44]	; (8fdc0 <Cl_Pressure_Controller_Init+0x40>)
   8fd92:	2200      	movs	r2, #0
   8fd94:	801a      	strh	r2, [r3, #0]
	Ps3 = 0;
   8fd96:	4b0b      	ldr	r3, [pc, #44]	; (8fdc4 <Cl_Pressure_Controller_Init+0x44>)
   8fd98:	2200      	movs	r2, #0
   8fd9a:	801a      	strh	r2, [r3, #0]
	apt =0 ;
   8fd9c:	4b0a      	ldr	r3, [pc, #40]	; (8fdc8 <Cl_Pressure_Controller_Init+0x48>)
   8fd9e:	2200      	movs	r2, #0
   8fda0:	801a      	strh	r2, [r3, #0]
	vpt = 0;
   8fda2:	4b0a      	ldr	r3, [pc, #40]	; (8fdcc <Cl_Pressure_Controller_Init+0x4c>)
   8fda4:	2200      	movs	r2, #0
   8fda6:	801a      	strh	r2, [r3, #0]
	Cl_PressureSensor_State = PS_STATE_INITIALISING;
   8fda8:	4b09      	ldr	r3, [pc, #36]	; (8fdd0 <Cl_Pressure_Controller_Init+0x50>)
   8fdaa:	2201      	movs	r2, #1
   8fdac:	701a      	strb	r2, [r3, #0]
	
	return cl_retval;
   8fdae:	79fb      	ldrb	r3, [r7, #7]
   8fdb0:	4618      	mov	r0, r3
   8fdb2:	370c      	adds	r7, #12
   8fdb4:	46bd      	mov	sp, r7
   8fdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
   8fdba:	4770      	bx	lr
   8fdbc:	20071a38 	.word	0x20071a38
   8fdc0:	20071a3a 	.word	0x20071a3a
   8fdc4:	20071a3c 	.word	0x20071a3c
   8fdc8:	20071a3e 	.word	0x20071a3e
   8fdcc:	20071a40 	.word	0x20071a40
   8fdd0:	20071a44 	.word	0x20071a44

0008fdd4 <res_temp_lookuptable>:
	{11708,4400},{11747,4500},{11785,4600},{11824,4700},{11862,4800},{11901,4900},{11940,5000},{11978,5100},{12016,5200},{12055,5300},{12093,5400},{12132,5500},{12170,5600},{12209,5700},{12247,5800},{12286,5900},{12324,6000},{12362,6100},{12401,6200},
	{12439,6300},{12477,6400},{12516,6500},{12554,6600},{12592,6700},{12631,6800},{12669,6900},{12707,7000},{12745,7100},{12784,7200},{12822,7300},{12860,7400},{12898,7500},{12937,7600},{12975,7700},{13013,7800},{13051,7900},{13089,8000},{13127,8100},
	{13166,8200},{13204,8300},{13242,8400},{13280,8500},{13318,8600},{13356,8700},{13394,8800},{13432,8900},{13470,9000},{13508,9100},{13546,9200}
};
void res_temp_lookuptable(Cl_Uint32Type res)
{
   8fdd4:	b590      	push	{r4, r7, lr}
   8fdd6:	b085      	sub	sp, #20
   8fdd8:	af00      	add	r7, sp, #0
   8fdda:	6078      	str	r0, [r7, #4]
	int i;
	float slope=0;
   8fddc:	f04f 0300 	mov.w	r3, #0
   8fde0:	60bb      	str	r3, [r7, #8]
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<150;i++)
   8fde2:	2300      	movs	r3, #0
   8fde4:	60fb      	str	r3, [r7, #12]
   8fde6:	e080      	b.n	8feea <res_temp_lookuptable+0x116>
	{
		if (res == res_temp[i].resistance)
   8fde8:	4b43      	ldr	r3, [pc, #268]	; (8fef8 <res_temp_lookuptable+0x124>)
   8fdea:	6878      	ldr	r0, [r7, #4]
   8fdec:	4798      	blx	r3
   8fdee:	4601      	mov	r1, r0
   8fdf0:	4a42      	ldr	r2, [pc, #264]	; (8fefc <res_temp_lookuptable+0x128>)
   8fdf2:	68fb      	ldr	r3, [r7, #12]
   8fdf4:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   8fdf8:	4b41      	ldr	r3, [pc, #260]	; (8ff00 <res_temp_lookuptable+0x12c>)
   8fdfa:	4608      	mov	r0, r1
   8fdfc:	4611      	mov	r1, r2
   8fdfe:	4798      	blx	r3
   8fe00:	4603      	mov	r3, r0
   8fe02:	2b00      	cmp	r3, #0
   8fe04:	d007      	beq.n	8fe16 <res_temp_lookuptable+0x42>
		{
			res_temp_value=res_temp[i].temperature;
   8fe06:	4a3d      	ldr	r2, [pc, #244]	; (8fefc <res_temp_lookuptable+0x128>)
   8fe08:	68fb      	ldr	r3, [r7, #12]
   8fe0a:	00db      	lsls	r3, r3, #3
   8fe0c:	4413      	add	r3, r2
   8fe0e:	685b      	ldr	r3, [r3, #4]
   8fe10:	4a3c      	ldr	r2, [pc, #240]	; (8ff04 <res_temp_lookuptable+0x130>)
   8fe12:	6013      	str	r3, [r2, #0]
			break;
   8fe14:	e06d      	b.n	8fef2 <res_temp_lookuptable+0x11e>
		}
		else if ((res > res_temp[i].resistance) && (res < res_temp[i+1].resistance))
   8fe16:	4b38      	ldr	r3, [pc, #224]	; (8fef8 <res_temp_lookuptable+0x124>)
   8fe18:	6878      	ldr	r0, [r7, #4]
   8fe1a:	4798      	blx	r3
   8fe1c:	4601      	mov	r1, r0
   8fe1e:	4a37      	ldr	r2, [pc, #220]	; (8fefc <res_temp_lookuptable+0x128>)
   8fe20:	68fb      	ldr	r3, [r7, #12]
   8fe22:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   8fe26:	4b38      	ldr	r3, [pc, #224]	; (8ff08 <res_temp_lookuptable+0x134>)
   8fe28:	4608      	mov	r0, r1
   8fe2a:	4611      	mov	r1, r2
   8fe2c:	4798      	blx	r3
   8fe2e:	4603      	mov	r3, r0
   8fe30:	2b00      	cmp	r3, #0
   8fe32:	d057      	beq.n	8fee4 <res_temp_lookuptable+0x110>
   8fe34:	4b30      	ldr	r3, [pc, #192]	; (8fef8 <res_temp_lookuptable+0x124>)
   8fe36:	6878      	ldr	r0, [r7, #4]
   8fe38:	4798      	blx	r3
   8fe3a:	4601      	mov	r1, r0
   8fe3c:	68fb      	ldr	r3, [r7, #12]
   8fe3e:	3301      	adds	r3, #1
   8fe40:	4a2e      	ldr	r2, [pc, #184]	; (8fefc <res_temp_lookuptable+0x128>)
   8fe42:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   8fe46:	4b31      	ldr	r3, [pc, #196]	; (8ff0c <res_temp_lookuptable+0x138>)
   8fe48:	4608      	mov	r0, r1
   8fe4a:	4611      	mov	r1, r2
   8fe4c:	4798      	blx	r3
   8fe4e:	4603      	mov	r3, r0
   8fe50:	2b00      	cmp	r3, #0
   8fe52:	d047      	beq.n	8fee4 <res_temp_lookuptable+0x110>
		{
			slope = ((res_temp[i+1].temperature-res_temp[i].temperature)/(res_temp[i+1].resistance-res_temp[i].resistance));
   8fe54:	68fb      	ldr	r3, [r7, #12]
   8fe56:	3301      	adds	r3, #1
   8fe58:	4a28      	ldr	r2, [pc, #160]	; (8fefc <res_temp_lookuptable+0x128>)
   8fe5a:	00db      	lsls	r3, r3, #3
   8fe5c:	4413      	add	r3, r2
   8fe5e:	6859      	ldr	r1, [r3, #4]
   8fe60:	4a26      	ldr	r2, [pc, #152]	; (8fefc <res_temp_lookuptable+0x128>)
   8fe62:	68fb      	ldr	r3, [r7, #12]
   8fe64:	00db      	lsls	r3, r3, #3
   8fe66:	4413      	add	r3, r2
   8fe68:	685a      	ldr	r2, [r3, #4]
   8fe6a:	4b29      	ldr	r3, [pc, #164]	; (8ff10 <res_temp_lookuptable+0x13c>)
   8fe6c:	4608      	mov	r0, r1
   8fe6e:	4611      	mov	r1, r2
   8fe70:	4798      	blx	r3
   8fe72:	4603      	mov	r3, r0
   8fe74:	461c      	mov	r4, r3
   8fe76:	68fb      	ldr	r3, [r7, #12]
   8fe78:	3301      	adds	r3, #1
   8fe7a:	4a20      	ldr	r2, [pc, #128]	; (8fefc <res_temp_lookuptable+0x128>)
   8fe7c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
   8fe80:	4a1e      	ldr	r2, [pc, #120]	; (8fefc <res_temp_lookuptable+0x128>)
   8fe82:	68fb      	ldr	r3, [r7, #12]
   8fe84:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   8fe88:	4b21      	ldr	r3, [pc, #132]	; (8ff10 <res_temp_lookuptable+0x13c>)
   8fe8a:	4608      	mov	r0, r1
   8fe8c:	4611      	mov	r1, r2
   8fe8e:	4798      	blx	r3
   8fe90:	4603      	mov	r3, r0
   8fe92:	461a      	mov	r2, r3
   8fe94:	4b1f      	ldr	r3, [pc, #124]	; (8ff14 <res_temp_lookuptable+0x140>)
   8fe96:	4620      	mov	r0, r4
   8fe98:	4611      	mov	r1, r2
   8fe9a:	4798      	blx	r3
   8fe9c:	4603      	mov	r3, r0
   8fe9e:	60bb      	str	r3, [r7, #8]
			res_temp_value = slope * (res-res_temp[i].resistance) + res_temp[i].temperature;
   8fea0:	4b15      	ldr	r3, [pc, #84]	; (8fef8 <res_temp_lookuptable+0x124>)
   8fea2:	6878      	ldr	r0, [r7, #4]
   8fea4:	4798      	blx	r3
   8fea6:	4601      	mov	r1, r0
   8fea8:	4a14      	ldr	r2, [pc, #80]	; (8fefc <res_temp_lookuptable+0x128>)
   8feaa:	68fb      	ldr	r3, [r7, #12]
   8feac:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   8feb0:	4b17      	ldr	r3, [pc, #92]	; (8ff10 <res_temp_lookuptable+0x13c>)
   8feb2:	4608      	mov	r0, r1
   8feb4:	4611      	mov	r1, r2
   8feb6:	4798      	blx	r3
   8feb8:	4603      	mov	r3, r0
   8feba:	461a      	mov	r2, r3
   8febc:	4b16      	ldr	r3, [pc, #88]	; (8ff18 <res_temp_lookuptable+0x144>)
   8febe:	4610      	mov	r0, r2
   8fec0:	68b9      	ldr	r1, [r7, #8]
   8fec2:	4798      	blx	r3
   8fec4:	4603      	mov	r3, r0
   8fec6:	4619      	mov	r1, r3
   8fec8:	4a0c      	ldr	r2, [pc, #48]	; (8fefc <res_temp_lookuptable+0x128>)
   8feca:	68fb      	ldr	r3, [r7, #12]
   8fecc:	00db      	lsls	r3, r3, #3
   8fece:	4413      	add	r3, r2
   8fed0:	685a      	ldr	r2, [r3, #4]
   8fed2:	4b12      	ldr	r3, [pc, #72]	; (8ff1c <res_temp_lookuptable+0x148>)
   8fed4:	4608      	mov	r0, r1
   8fed6:	4611      	mov	r1, r2
   8fed8:	4798      	blx	r3
   8feda:	4603      	mov	r3, r0
   8fedc:	461a      	mov	r2, r3
   8fede:	4b09      	ldr	r3, [pc, #36]	; (8ff04 <res_temp_lookuptable+0x130>)
   8fee0:	601a      	str	r2, [r3, #0]
			//sv_cntrl_setpumpspeed(HEPARINPUMP,hep_speed);
			break;
   8fee2:	e006      	b.n	8fef2 <res_temp_lookuptable+0x11e>
void res_temp_lookuptable(Cl_Uint32Type res)
{
	int i;
	float slope=0;
	//Cl_Uint16Type tempdata=sensordata;
	for (i=0;i<150;i++)
   8fee4:	68fb      	ldr	r3, [r7, #12]
   8fee6:	3301      	adds	r3, #1
   8fee8:	60fb      	str	r3, [r7, #12]
   8feea:	68fb      	ldr	r3, [r7, #12]
   8feec:	2b95      	cmp	r3, #149	; 0x95
   8feee:	f77f af7b 	ble.w	8fde8 <res_temp_lookuptable+0x14>
			//sv_cntrl_setpumpspeed(HEPARINPUMP,hep_speed);
			break;
		}
	}
	
}
   8fef2:	3714      	adds	r7, #20
   8fef4:	46bd      	mov	sp, r7
   8fef6:	bd90      	pop	{r4, r7, pc}
   8fef8:	000a68a9 	.word	0x000a68a9
   8fefc:	20070588 	.word	0x20070588
   8ff00:	000a6c81 	.word	0x000a6c81
   8ff04:	20071a58 	.word	0x20071a58
   8ff08:	000a6cd1 	.word	0x000a6cd1
   8ff0c:	000a6c95 	.word	0x000a6c95
   8ff10:	000a6745 	.word	0x000a6745
   8ff14:	000a6ac1 	.word	0x000a6ac1
   8ff18:	000a6959 	.word	0x000a6959
   8ff1c:	000a6749 	.word	0x000a6749

0008ff20 <Cl_Temperature_Controller_Handler>:
Cl_ReturnCodeType  Cl_Temperature_Controller_Handler(Cl_Temp_EventType Cl_Tc_Event)
{
   8ff20:	b590      	push	{r4, r7, lr}
   8ff22:	b08b      	sub	sp, #44	; 0x2c
   8ff24:	af00      	add	r7, sp, #0
   8ff26:	4603      	mov	r3, r0
   8ff28:	71fb      	strb	r3, [r7, #7]
float temp=0,cal_data=0;
   8ff2a:	f04f 0300 	mov.w	r3, #0
   8ff2e:	627b      	str	r3, [r7, #36]	; 0x24
   8ff30:	f04f 0300 	mov.w	r3, #0
   8ff34:	623b      	str	r3, [r7, #32]
	Cl_ReturnCodeType cl_retval = CL_OK;
   8ff36:	2300      	movs	r3, #0
   8ff38:	77fb      	strb	r3, [r7, #31]
	 Cl_Uint16Type temp_val  = 0;
   8ff3a:	2300      	movs	r3, #0
   8ff3c:	82bb      	strh	r3, [r7, #20]
	Cl_Uint16Type data=0;
   8ff3e:	2300      	movs	r3, #0
   8ff40:	827b      	strh	r3, [r7, #18]
	if(Cl_Temp_State == TS_STATE_INITIALISING)
   8ff42:	4b94      	ldr	r3, [pc, #592]	; (90194 <Cl_Temperature_Controller_Handler+0x274>)
   8ff44:	781b      	ldrb	r3, [r3, #0]
   8ff46:	2b01      	cmp	r3, #1
   8ff48:	f040 8096 	bne.w	90078 <Cl_Temperature_Controller_Handler+0x158>
	{
			switch(Cl_Tc_Event)
   8ff4c:	79fb      	ldrb	r3, [r7, #7]
   8ff4e:	2b01      	cmp	r3, #1
   8ff50:	d005      	beq.n	8ff5e <Cl_Temperature_Controller_Handler+0x3e>
   8ff52:	2b03      	cmp	r3, #3
   8ff54:	d078      	beq.n	90048 <Cl_Temperature_Controller_Handler+0x128>
   8ff56:	2b00      	cmp	r3, #0
   8ff58:	f000 808c 	beq.w	90074 <Cl_Temperature_Controller_Handler+0x154>
				case TS_EVENT_5SEC:
					
					sv_spi_blood_read_temp(&data);
					temp3_correcton = data - Temp3;
				break;
				default:break;
   8ff5c:	e08b      	b.n	90076 <Cl_Temperature_Controller_Handler+0x156>
			{
				
				case TS_EVENT_50MS:
				break;
				case TS_EVENT_100MS:
				if ( counter == 0 )
   8ff5e:	4b8e      	ldr	r3, [pc, #568]	; (90198 <Cl_Temperature_Controller_Handler+0x278>)
   8ff60:	881b      	ldrh	r3, [r3, #0]
   8ff62:	2b00      	cmp	r3, #0
   8ff64:	d10c      	bne.n	8ff80 <Cl_Temperature_Controller_Handler+0x60>
				{
					Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP1STATUS, &Temp1);
   8ff66:	2012      	movs	r0, #18
   8ff68:	498c      	ldr	r1, [pc, #560]	; (9019c <Cl_Temperature_Controller_Handler+0x27c>)
   8ff6a:	4b8d      	ldr	r3, [pc, #564]	; (901a0 <Cl_Temperature_Controller_Handler+0x280>)
   8ff6c:	4798      	blx	r3
					Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS, &Temp2);
   8ff6e:	2013      	movs	r0, #19
   8ff70:	498c      	ldr	r1, [pc, #560]	; (901a4 <Cl_Temperature_Controller_Handler+0x284>)
   8ff72:	4b8b      	ldr	r3, [pc, #556]	; (901a0 <Cl_Temperature_Controller_Handler+0x280>)
   8ff74:	4798      	blx	r3
					Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS, &Temp3);
   8ff76:	2014      	movs	r0, #20
   8ff78:	498b      	ldr	r1, [pc, #556]	; (901a8 <Cl_Temperature_Controller_Handler+0x288>)
   8ff7a:	4b89      	ldr	r3, [pc, #548]	; (901a0 <Cl_Temperature_Controller_Handler+0x280>)
   8ff7c:	4798      	blx	r3
   8ff7e:	e051      	b.n	90024 <Cl_Temperature_Controller_Handler+0x104>
				}
				else
				{
					Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP1STATUS, &temp_val);
   8ff80:	f107 0314 	add.w	r3, r7, #20
   8ff84:	2012      	movs	r0, #18
   8ff86:	4619      	mov	r1, r3
   8ff88:	4b85      	ldr	r3, [pc, #532]	; (901a0 <Cl_Temperature_Controller_Handler+0x280>)
   8ff8a:	4798      	blx	r3
					Temp1 = ( Temp1 +temp_val)/counter+1 ;
   8ff8c:	4b83      	ldr	r3, [pc, #524]	; (9019c <Cl_Temperature_Controller_Handler+0x27c>)
   8ff8e:	881b      	ldrh	r3, [r3, #0]
   8ff90:	461a      	mov	r2, r3
   8ff92:	8abb      	ldrh	r3, [r7, #20]
   8ff94:	4413      	add	r3, r2
   8ff96:	4a80      	ldr	r2, [pc, #512]	; (90198 <Cl_Temperature_Controller_Handler+0x278>)
   8ff98:	8812      	ldrh	r2, [r2, #0]
   8ff9a:	fb93 f3f2 	sdiv	r3, r3, r2
   8ff9e:	b29b      	uxth	r3, r3
   8ffa0:	3301      	adds	r3, #1
   8ffa2:	b29a      	uxth	r2, r3
   8ffa4:	4b7d      	ldr	r3, [pc, #500]	; (9019c <Cl_Temperature_Controller_Handler+0x27c>)
   8ffa6:	801a      	strh	r2, [r3, #0]
					Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS, &temp_val);
   8ffa8:	f107 0314 	add.w	r3, r7, #20
   8ffac:	2013      	movs	r0, #19
   8ffae:	4619      	mov	r1, r3
   8ffb0:	4b7b      	ldr	r3, [pc, #492]	; (901a0 <Cl_Temperature_Controller_Handler+0x280>)
   8ffb2:	4798      	blx	r3
					Temp2 = ( Temp2 +temp_val)/counter+1 ;
   8ffb4:	4b7b      	ldr	r3, [pc, #492]	; (901a4 <Cl_Temperature_Controller_Handler+0x284>)
   8ffb6:	881b      	ldrh	r3, [r3, #0]
   8ffb8:	461a      	mov	r2, r3
   8ffba:	8abb      	ldrh	r3, [r7, #20]
   8ffbc:	4413      	add	r3, r2
   8ffbe:	4a76      	ldr	r2, [pc, #472]	; (90198 <Cl_Temperature_Controller_Handler+0x278>)
   8ffc0:	8812      	ldrh	r2, [r2, #0]
   8ffc2:	fb93 f3f2 	sdiv	r3, r3, r2
   8ffc6:	b29b      	uxth	r3, r3
   8ffc8:	3301      	adds	r3, #1
   8ffca:	b29a      	uxth	r2, r3
   8ffcc:	4b75      	ldr	r3, [pc, #468]	; (901a4 <Cl_Temperature_Controller_Handler+0x284>)
   8ffce:	801a      	strh	r2, [r3, #0]
					Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS, &temp_val);
   8ffd0:	f107 0314 	add.w	r3, r7, #20
   8ffd4:	2014      	movs	r0, #20
   8ffd6:	4619      	mov	r1, r3
   8ffd8:	4b71      	ldr	r3, [pc, #452]	; (901a0 <Cl_Temperature_Controller_Handler+0x280>)
   8ffda:	4798      	blx	r3
					Temp3 = ( Temp3 +temp_val)/counter+1 ;
   8ffdc:	8abb      	ldrh	r3, [r7, #20]
   8ffde:	461a      	mov	r2, r3
   8ffe0:	4b72      	ldr	r3, [pc, #456]	; (901ac <Cl_Temperature_Controller_Handler+0x28c>)
   8ffe2:	4610      	mov	r0, r2
   8ffe4:	4798      	blx	r3
   8ffe6:	4601      	mov	r1, r0
   8ffe8:	4b6f      	ldr	r3, [pc, #444]	; (901a8 <Cl_Temperature_Controller_Handler+0x288>)
   8ffea:	681a      	ldr	r2, [r3, #0]
   8ffec:	4b70      	ldr	r3, [pc, #448]	; (901b0 <Cl_Temperature_Controller_Handler+0x290>)
   8ffee:	4608      	mov	r0, r1
   8fff0:	4611      	mov	r1, r2
   8fff2:	4798      	blx	r3
   8fff4:	4603      	mov	r3, r0
   8fff6:	461c      	mov	r4, r3
   8fff8:	4b67      	ldr	r3, [pc, #412]	; (90198 <Cl_Temperature_Controller_Handler+0x278>)
   8fffa:	881b      	ldrh	r3, [r3, #0]
   8fffc:	461a      	mov	r2, r3
   8fffe:	4b6b      	ldr	r3, [pc, #428]	; (901ac <Cl_Temperature_Controller_Handler+0x28c>)
   90000:	4610      	mov	r0, r2
   90002:	4798      	blx	r3
   90004:	4602      	mov	r2, r0
   90006:	4b6b      	ldr	r3, [pc, #428]	; (901b4 <Cl_Temperature_Controller_Handler+0x294>)
   90008:	4620      	mov	r0, r4
   9000a:	4611      	mov	r1, r2
   9000c:	4798      	blx	r3
   9000e:	4603      	mov	r3, r0
   90010:	461a      	mov	r2, r3
   90012:	4b67      	ldr	r3, [pc, #412]	; (901b0 <Cl_Temperature_Controller_Handler+0x290>)
   90014:	4610      	mov	r0, r2
   90016:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
   9001a:	4798      	blx	r3
   9001c:	4603      	mov	r3, r0
   9001e:	461a      	mov	r2, r3
   90020:	4b61      	ldr	r3, [pc, #388]	; (901a8 <Cl_Temperature_Controller_Handler+0x288>)
   90022:	601a      	str	r2, [r3, #0]
				}

				counter++;
   90024:	4b5c      	ldr	r3, [pc, #368]	; (90198 <Cl_Temperature_Controller_Handler+0x278>)
   90026:	881b      	ldrh	r3, [r3, #0]
   90028:	3301      	adds	r3, #1
   9002a:	b29a      	uxth	r2, r3
   9002c:	4b5a      	ldr	r3, [pc, #360]	; (90198 <Cl_Temperature_Controller_Handler+0x278>)
   9002e:	801a      	strh	r2, [r3, #0]
				if(counter > 10)
   90030:	4b59      	ldr	r3, [pc, #356]	; (90198 <Cl_Temperature_Controller_Handler+0x278>)
   90032:	881b      	ldrh	r3, [r3, #0]
   90034:	2b0a      	cmp	r3, #10
   90036:	d906      	bls.n	90046 <Cl_Temperature_Controller_Handler+0x126>
				{
					counter = 0;
   90038:	4b57      	ldr	r3, [pc, #348]	; (90198 <Cl_Temperature_Controller_Handler+0x278>)
   9003a:	2200      	movs	r2, #0
   9003c:	801a      	strh	r2, [r3, #0]
					Cl_Temp_State = TS_STATE_ACTIVE;
   9003e:	4b55      	ldr	r3, [pc, #340]	; (90194 <Cl_Temperature_Controller_Handler+0x274>)
   90040:	2202      	movs	r2, #2
   90042:	701a      	strb	r2, [r3, #0]
				}
				break;
   90044:	e017      	b.n	90076 <Cl_Temperature_Controller_Handler+0x156>
   90046:	e016      	b.n	90076 <Cl_Temperature_Controller_Handler+0x156>
				case TS_EVENT_5SEC:
					
					sv_spi_blood_read_temp(&data);
   90048:	f107 0312 	add.w	r3, r7, #18
   9004c:	4618      	mov	r0, r3
   9004e:	4b5a      	ldr	r3, [pc, #360]	; (901b8 <Cl_Temperature_Controller_Handler+0x298>)
   90050:	4798      	blx	r3
					temp3_correcton = data - Temp3;
   90052:	8a7b      	ldrh	r3, [r7, #18]
   90054:	461a      	mov	r2, r3
   90056:	4b55      	ldr	r3, [pc, #340]	; (901ac <Cl_Temperature_Controller_Handler+0x28c>)
   90058:	4610      	mov	r0, r2
   9005a:	4798      	blx	r3
   9005c:	4601      	mov	r1, r0
   9005e:	4b52      	ldr	r3, [pc, #328]	; (901a8 <Cl_Temperature_Controller_Handler+0x288>)
   90060:	681a      	ldr	r2, [r3, #0]
   90062:	4b56      	ldr	r3, [pc, #344]	; (901bc <Cl_Temperature_Controller_Handler+0x29c>)
   90064:	4608      	mov	r0, r1
   90066:	4611      	mov	r1, r2
   90068:	4798      	blx	r3
   9006a:	4603      	mov	r3, r0
   9006c:	461a      	mov	r2, r3
   9006e:	4b54      	ldr	r3, [pc, #336]	; (901c0 <Cl_Temperature_Controller_Handler+0x2a0>)
   90070:	601a      	str	r2, [r3, #0]
				break;
   90072:	e000      	b.n	90076 <Cl_Temperature_Controller_Handler+0x156>
	{
			switch(Cl_Tc_Event)
			{
				
				case TS_EVENT_50MS:
				break;
   90074:	bf00      	nop
   90076:	e0e0      	b.n	9023a <Cl_Temperature_Controller_Handler+0x31a>
					temp3_correcton = data - Temp3;
				break;
				default:break;
			}
	}
	else if(Cl_Temp_State == TS_STATE_ACTIVE)
   90078:	4b46      	ldr	r3, [pc, #280]	; (90194 <Cl_Temperature_Controller_Handler+0x274>)
   9007a:	781b      	ldrb	r3, [r3, #0]
   9007c:	2b02      	cmp	r3, #2
   9007e:	f040 80dc 	bne.w	9023a <Cl_Temperature_Controller_Handler+0x31a>
	{
			switch(Cl_Tc_Event)
   90082:	79fb      	ldrb	r3, [r7, #7]
   90084:	2b01      	cmp	r3, #1
   90086:	d006      	beq.n	90096 <Cl_Temperature_Controller_Handler+0x176>
   90088:	2b03      	cmp	r3, #3
   9008a:	f000 80ab 	beq.w	901e4 <Cl_Temperature_Controller_Handler+0x2c4>
   9008e:	2b00      	cmp	r3, #0
   90090:	f000 80d2 	beq.w	90238 <Cl_Temperature_Controller_Handler+0x318>
				Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
				
				}
				
				break;
				default:break;
   90094:	e0d1      	b.n	9023a <Cl_Temperature_Controller_Handler+0x31a>
			{
				
				case TS_EVENT_50MS:
				break;
				case TS_EVENT_100MS:
				Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP1STATUS, &temp_val);
   90096:	f107 0314 	add.w	r3, r7, #20
   9009a:	2012      	movs	r0, #18
   9009c:	4619      	mov	r1, r3
   9009e:	4b40      	ldr	r3, [pc, #256]	; (901a0 <Cl_Temperature_Controller_Handler+0x280>)
   900a0:	4798      	blx	r3
				
////				(402 *100* temp_val)/(2*32768);								// resistance of PT100
//				res_temp_lookuptable((402 *100* temp_val)/(2*32768));		// temperature from look up table in 4 digits
//				Temp1 = res_temp_value/100;									// Temp3 value in XX.yy format
//				Temp1 = Temp1 - 2.5 + 0.25;										// sensor offset 
				Temp1 = (float)temp_val /100;
   900a2:	8aba      	ldrh	r2, [r7, #20]
   900a4:	4b47      	ldr	r3, [pc, #284]	; (901c4 <Cl_Temperature_Controller_Handler+0x2a4>)
   900a6:	4610      	mov	r0, r2
   900a8:	4798      	blx	r3
   900aa:	4602      	mov	r2, r0
   900ac:	4b41      	ldr	r3, [pc, #260]	; (901b4 <Cl_Temperature_Controller_Handler+0x294>)
   900ae:	4610      	mov	r0, r2
   900b0:	4945      	ldr	r1, [pc, #276]	; (901c8 <Cl_Temperature_Controller_Handler+0x2a8>)
   900b2:	4798      	blx	r3
   900b4:	4603      	mov	r3, r0
   900b6:	461a      	mov	r2, r3
   900b8:	4b44      	ldr	r3, [pc, #272]	; (901cc <Cl_Temperature_Controller_Handler+0x2ac>)
   900ba:	4610      	mov	r0, r2
   900bc:	4798      	blx	r3
   900be:	4603      	mov	r3, r0
   900c0:	b29a      	uxth	r2, r3
   900c2:	4b36      	ldr	r3, [pc, #216]	; (9019c <Cl_Temperature_Controller_Handler+0x27c>)
   900c4:	801a      	strh	r2, [r3, #0]
				Temp1 = (Temp1 *9 + temp_val)/10;
   900c6:	4b35      	ldr	r3, [pc, #212]	; (9019c <Cl_Temperature_Controller_Handler+0x27c>)
   900c8:	881b      	ldrh	r3, [r3, #0]
   900ca:	461a      	mov	r2, r3
   900cc:	4613      	mov	r3, r2
   900ce:	00db      	lsls	r3, r3, #3
   900d0:	4413      	add	r3, r2
   900d2:	8aba      	ldrh	r2, [r7, #20]
   900d4:	4413      	add	r3, r2
   900d6:	4a3e      	ldr	r2, [pc, #248]	; (901d0 <Cl_Temperature_Controller_Handler+0x2b0>)
   900d8:	fb82 1203 	smull	r1, r2, r2, r3
   900dc:	1092      	asrs	r2, r2, #2
   900de:	17db      	asrs	r3, r3, #31
   900e0:	1ad3      	subs	r3, r2, r3
   900e2:	b29a      	uxth	r2, r3
   900e4:	4b2d      	ldr	r3, [pc, #180]	; (9019c <Cl_Temperature_Controller_Handler+0x27c>)
   900e6:	801a      	strh	r2, [r3, #0]
				
				Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS, &temp_val);
   900e8:	f107 0314 	add.w	r3, r7, #20
   900ec:	2013      	movs	r0, #19
   900ee:	4619      	mov	r1, r3
   900f0:	4b2b      	ldr	r3, [pc, #172]	; (901a0 <Cl_Temperature_Controller_Handler+0x280>)
   900f2:	4798      	blx	r3
// 				//				(402 *100* temp_val)/(2*32768);								// resistance of PT100
// 				res_temp_lookuptable((402 *100* temp_val)/(2*32768));		// temperature from look up table in 4 digits
// 				Temp2 = res_temp_value/100;									// Temp3 value in XX.yy format
// 				Temp2 = Temp2 - 0.4;                                            // sensor offset
				Temp2 = (float)temp_val /100;
   900f4:	8aba      	ldrh	r2, [r7, #20]
   900f6:	4b33      	ldr	r3, [pc, #204]	; (901c4 <Cl_Temperature_Controller_Handler+0x2a4>)
   900f8:	4610      	mov	r0, r2
   900fa:	4798      	blx	r3
   900fc:	4602      	mov	r2, r0
   900fe:	4b2d      	ldr	r3, [pc, #180]	; (901b4 <Cl_Temperature_Controller_Handler+0x294>)
   90100:	4610      	mov	r0, r2
   90102:	4931      	ldr	r1, [pc, #196]	; (901c8 <Cl_Temperature_Controller_Handler+0x2a8>)
   90104:	4798      	blx	r3
   90106:	4603      	mov	r3, r0
   90108:	461a      	mov	r2, r3
   9010a:	4b30      	ldr	r3, [pc, #192]	; (901cc <Cl_Temperature_Controller_Handler+0x2ac>)
   9010c:	4610      	mov	r0, r2
   9010e:	4798      	blx	r3
   90110:	4603      	mov	r3, r0
   90112:	b29a      	uxth	r2, r3
   90114:	4b23      	ldr	r3, [pc, #140]	; (901a4 <Cl_Temperature_Controller_Handler+0x284>)
   90116:	801a      	strh	r2, [r3, #0]
				Temp2 = (Temp2 *9 + temp_val)/10;
   90118:	4b22      	ldr	r3, [pc, #136]	; (901a4 <Cl_Temperature_Controller_Handler+0x284>)
   9011a:	881b      	ldrh	r3, [r3, #0]
   9011c:	461a      	mov	r2, r3
   9011e:	4613      	mov	r3, r2
   90120:	00db      	lsls	r3, r3, #3
   90122:	4413      	add	r3, r2
   90124:	8aba      	ldrh	r2, [r7, #20]
   90126:	4413      	add	r3, r2
   90128:	4a29      	ldr	r2, [pc, #164]	; (901d0 <Cl_Temperature_Controller_Handler+0x2b0>)
   9012a:	fb82 1203 	smull	r1, r2, r2, r3
   9012e:	1092      	asrs	r2, r2, #2
   90130:	17db      	asrs	r3, r3, #31
   90132:	1ad3      	subs	r3, r2, r3
   90134:	b29a      	uxth	r2, r3
   90136:	4b1b      	ldr	r3, [pc, #108]	; (901a4 <Cl_Temperature_Controller_Handler+0x284>)
   90138:	801a      	strh	r2, [r3, #0]
				
				Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS, &temp_val);
   9013a:	f107 0314 	add.w	r3, r7, #20
   9013e:	2014      	movs	r0, #20
   90140:	4619      	mov	r1, r3
   90142:	4b17      	ldr	r3, [pc, #92]	; (901a0 <Cl_Temperature_Controller_Handler+0x280>)
   90144:	4798      	blx	r3
// 				Temp3 = Temp3 - 0.4 ;										// sensor offset 
// 				
// 				
// // 				temp = temp_val * 0.8036;
// // 				calibration_tmp(temp,TS3);
				Temp3 = (float)temp_val /100;
   90146:	8aba      	ldrh	r2, [r7, #20]
   90148:	4b1e      	ldr	r3, [pc, #120]	; (901c4 <Cl_Temperature_Controller_Handler+0x2a4>)
   9014a:	4610      	mov	r0, r2
   9014c:	4798      	blx	r3
   9014e:	4602      	mov	r2, r0
   90150:	4b18      	ldr	r3, [pc, #96]	; (901b4 <Cl_Temperature_Controller_Handler+0x294>)
   90152:	4610      	mov	r0, r2
   90154:	491c      	ldr	r1, [pc, #112]	; (901c8 <Cl_Temperature_Controller_Handler+0x2a8>)
   90156:	4798      	blx	r3
   90158:	4603      	mov	r3, r0
   9015a:	461a      	mov	r2, r3
   9015c:	4b12      	ldr	r3, [pc, #72]	; (901a8 <Cl_Temperature_Controller_Handler+0x288>)
   9015e:	601a      	str	r2, [r3, #0]
				Temp3 =(Temp3*5 + temprature_final_value_3)/6;
   90160:	4b11      	ldr	r3, [pc, #68]	; (901a8 <Cl_Temperature_Controller_Handler+0x288>)
   90162:	681a      	ldr	r2, [r3, #0]
   90164:	4b1b      	ldr	r3, [pc, #108]	; (901d4 <Cl_Temperature_Controller_Handler+0x2b4>)
   90166:	4610      	mov	r0, r2
   90168:	491b      	ldr	r1, [pc, #108]	; (901d8 <Cl_Temperature_Controller_Handler+0x2b8>)
   9016a:	4798      	blx	r3
   9016c:	4603      	mov	r3, r0
   9016e:	4619      	mov	r1, r3
   90170:	4b1a      	ldr	r3, [pc, #104]	; (901dc <Cl_Temperature_Controller_Handler+0x2bc>)
   90172:	681a      	ldr	r2, [r3, #0]
   90174:	4b0e      	ldr	r3, [pc, #56]	; (901b0 <Cl_Temperature_Controller_Handler+0x290>)
   90176:	4608      	mov	r0, r1
   90178:	4611      	mov	r1, r2
   9017a:	4798      	blx	r3
   9017c:	4603      	mov	r3, r0
   9017e:	461a      	mov	r2, r3
   90180:	4b0c      	ldr	r3, [pc, #48]	; (901b4 <Cl_Temperature_Controller_Handler+0x294>)
   90182:	4610      	mov	r0, r2
   90184:	4916      	ldr	r1, [pc, #88]	; (901e0 <Cl_Temperature_Controller_Handler+0x2c0>)
   90186:	4798      	blx	r3
   90188:	4603      	mov	r3, r0
   9018a:	461a      	mov	r2, r3
   9018c:	4b06      	ldr	r3, [pc, #24]	; (901a8 <Cl_Temperature_Controller_Handler+0x288>)
   9018e:	601a      	str	r2, [r3, #0]
				break;
   90190:	e053      	b.n	9023a <Cl_Temperature_Controller_Handler+0x31a>
   90192:	bf00      	nop
   90194:	20071a54 	.word	0x20071a54
   90198:	20071a4a 	.word	0x20071a4a
   9019c:	20071a46 	.word	0x20071a46
   901a0:	0008e7f9 	.word	0x0008e7f9
   901a4:	20071a48 	.word	0x20071a48
   901a8:	20071a4c 	.word	0x20071a4c
   901ac:	000a68b1 	.word	0x000a68b1
   901b0:	000a6749 	.word	0x000a6749
   901b4:	000a6ac1 	.word	0x000a6ac1
   901b8:	00099d99 	.word	0x00099d99
   901bc:	000a6745 	.word	0x000a6745
   901c0:	20071a50 	.word	0x20071a50
   901c4:	000a68a9 	.word	0x000a68a9
   901c8:	42c80000 	.word	0x42c80000
   901cc:	000a6d31 	.word	0x000a6d31
   901d0:	66666667 	.word	0x66666667
   901d4:	000a6959 	.word	0x000a6959
   901d8:	40a00000 	.word	0x40a00000
   901dc:	20071798 	.word	0x20071798
   901e0:	40c00000 	.word	0x40c00000
				case TS_EVENT_5SEC:
				data = 0;
   901e4:	2300      	movs	r3, #0
   901e6:	827b      	strh	r3, [r7, #18]
				{
					float temp=0;
   901e8:	f04f 0300 	mov.w	r3, #0
   901ec:	61bb      	str	r3, [r7, #24]
					Cl_Uint16Type test_data =0 ;
   901ee:	2300      	movs	r3, #0
   901f0:	82fb      	strh	r3, [r7, #22]
					
				Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS, &data);
   901f2:	f107 0312 	add.w	r3, r7, #18
   901f6:	2014      	movs	r0, #20
   901f8:	4619      	mov	r1, r3
   901fa:	4b12      	ldr	r3, [pc, #72]	; (90244 <Cl_Temperature_Controller_Handler+0x324>)
   901fc:	4798      	blx	r3
// 				res_temp_lookuptable((402 *100* temp_val)/(2*32768));		// temperature from look up table in 4 digits
// 				temp = res_temp_value/100;									// Temp3 value in XX.yy format
// //				temp = temp - 31 + 14;										// sensor offset
// 				temp = temp - 0.4;										// sensor offset
				temp = (float)data /100;
   901fe:	8a7a      	ldrh	r2, [r7, #18]
   90200:	4b11      	ldr	r3, [pc, #68]	; (90248 <Cl_Temperature_Controller_Handler+0x328>)
   90202:	4610      	mov	r0, r2
   90204:	4798      	blx	r3
   90206:	4602      	mov	r2, r0
   90208:	4b10      	ldr	r3, [pc, #64]	; (9024c <Cl_Temperature_Controller_Handler+0x32c>)
   9020a:	4610      	mov	r0, r2
   9020c:	4910      	ldr	r1, [pc, #64]	; (90250 <Cl_Temperature_Controller_Handler+0x330>)
   9020e:	4798      	blx	r3
   90210:	4603      	mov	r3, r0
   90212:	61bb      	str	r3, [r7, #24]
				cl_Datastreamtype cl_tdata;
				cl_tdata.word =0;
   90214:	2300      	movs	r3, #0
   90216:	60fb      	str	r3, [r7, #12]
				cl_tdata.Twobyte = temp;
   90218:	4b0e      	ldr	r3, [pc, #56]	; (90254 <Cl_Temperature_Controller_Handler+0x334>)
   9021a:	69b8      	ldr	r0, [r7, #24]
   9021c:	4798      	blx	r3
   9021e:	4603      	mov	r3, r0
   90220:	b29b      	uxth	r3, r3
   90222:	81bb      	strh	r3, [r7, #12]
				cl_tdata.bytearray[2] = 31;
   90224:	231f      	movs	r3, #31
   90226:	73bb      	strb	r3, [r7, #14]
				Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
   90228:	f107 030c 	add.w	r3, r7, #12
   9022c:	2037      	movs	r0, #55	; 0x37
   9022e:	4619      	mov	r1, r3
   90230:	2204      	movs	r2, #4
   90232:	4b09      	ldr	r3, [pc, #36]	; (90258 <Cl_Temperature_Controller_Handler+0x338>)
   90234:	4798      	blx	r3
				
				}
				
				break;
   90236:	e000      	b.n	9023a <Cl_Temperature_Controller_Handler+0x31a>
	{
			switch(Cl_Tc_Event)
			{
				
				case TS_EVENT_50MS:
				break;
   90238:	bf00      	nop
			
	}

	
	
	return cl_retval;
   9023a:	7ffb      	ldrb	r3, [r7, #31]
}
   9023c:	4618      	mov	r0, r3
   9023e:	372c      	adds	r7, #44	; 0x2c
   90240:	46bd      	mov	sp, r7
   90242:	bd90      	pop	{r4, r7, pc}
   90244:	0008e7f9 	.word	0x0008e7f9
   90248:	000a68a9 	.word	0x000a68a9
   9024c:	000a6ac1 	.word	0x000a6ac1
   90250:	42c80000 	.word	0x42c80000
   90254:	000a6d31 	.word	0x000a6d31
   90258:	0009ba51 	.word	0x0009ba51

0009025c <Cl_Temperature_Controller_Init>:

Cl_ReturnCodeType  Cl_Temperature_Controller_Init(void)
{
   9025c:	b480      	push	{r7}
   9025e:	b083      	sub	sp, #12
   90260:	af00      	add	r7, sp, #0

	Cl_ReturnCodeType cl_retval = CL_OK;
   90262:	2300      	movs	r3, #0
   90264:	71fb      	strb	r3, [r7, #7]
		 Temp1 = 0;
   90266:	4b0a      	ldr	r3, [pc, #40]	; (90290 <Cl_Temperature_Controller_Init+0x34>)
   90268:	2200      	movs	r2, #0
   9026a:	801a      	strh	r2, [r3, #0]
		 Temp2 = 0;
   9026c:	4b09      	ldr	r3, [pc, #36]	; (90294 <Cl_Temperature_Controller_Init+0x38>)
   9026e:	2200      	movs	r2, #0
   90270:	801a      	strh	r2, [r3, #0]
		 Temp3 = 0;
   90272:	4b09      	ldr	r3, [pc, #36]	; (90298 <Cl_Temperature_Controller_Init+0x3c>)
   90274:	f04f 0200 	mov.w	r2, #0
   90278:	601a      	str	r2, [r3, #0]
		 Cl_Temp_State = TS_STATE_INITIALISING;
   9027a:	4b08      	ldr	r3, [pc, #32]	; (9029c <Cl_Temperature_Controller_Init+0x40>)
   9027c:	2201      	movs	r2, #1
   9027e:	701a      	strb	r2, [r3, #0]
		 
		 return cl_retval;
   90280:	79fb      	ldrb	r3, [r7, #7]
}
   90282:	4618      	mov	r0, r3
   90284:	370c      	adds	r7, #12
   90286:	46bd      	mov	sp, r7
   90288:	f85d 7b04 	ldr.w	r7, [sp], #4
   9028c:	4770      	bx	lr
   9028e:	bf00      	nop
   90290:	20071a46 	.word	0x20071a46
   90294:	20071a48 	.word	0x20071a48
   90298:	20071a4c 	.word	0x20071a4c
   9029c:	20071a54 	.word	0x20071a54

000902a0 <cl_testharnesscommandhandler>:
static int16_t avgtmp3   = 0;
//array_command_type cmd_backup;
Cl_testsensorType test_sensor_status[SENSOR_MAX_INPUT];

Cl_ReturnCodeType cl_testharnesscommandhandler(Cl_ConsoleMsgType* pCl_ConsoleMsg)
{
   902a0:	b590      	push	{r4, r7, lr}
   902a2:	b0c9      	sub	sp, #292	; 0x124
   902a4:	af00      	add	r7, sp, #0
   902a6:	1d3b      	adds	r3, r7, #4
   902a8:	6018      	str	r0, [r3, #0]
	Cl_ReturnCodeType cl_thretval = CL_ERROR;
   902aa:	2304      	movs	r3, #4
   902ac:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
	cl_Datastreamtype cl_indata  ;
	Cl_ConsoleMsgType TestMsg;
	Cl_Uint8Type datasize;
	Cl_Uint8Type version;
	int16_t sensordata=0;
   902b0:	2300      	movs	r3, #0
   902b2:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
	int16_t Pressuredata=0;
   902b6:	2300      	movs	r3, #0
   902b8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
	int16_t sensordatamillivolts =0;
   902bc:	2300      	movs	r3, #0
   902be:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
	int16_t tempdata =0;
   902c2:	2300      	movs	r3, #0
   902c4:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
	int16_t Pressuredatainmillibars =0;
   902c8:	2300      	movs	r3, #0
   902ca:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
	int16_t Ps1,Ps2,Atp,Vtp,TMP = 0;
   902ce:	2300      	movs	r3, #0
   902d0:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
	Cl_Uint8Type temp;
	Cl_Uint32Type rateval;
	Cl_Testcommandtype test;
	Cl_Uint32Type count1;
	
	cl_indata.bytearray[0] = 0;
   902d4:	2300      	movs	r3, #0
   902d6:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
	cl_indata.bytearray[1] = 0;
   902da:	2300      	movs	r3, #0
   902dc:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
	cl_indata.bytearray[2] = 0;
   902e0:	2300      	movs	r3, #0
   902e2:	f887 30b2 	strb.w	r3, [r7, #178]	; 0xb2
	cl_indata.bytearray[3] = 0;
   902e6:	2300      	movs	r3, #0
   902e8:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
	cl_indata.Twobyte = 0;
   902ec:	2300      	movs	r3, #0
   902ee:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
	cl_indata.word = 0;
   902f2:	2300      	movs	r3, #0
   902f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	
	
	for( temp =0; temp < MAX_DATA_SIZE ;temp++ )
   902f8:	2300      	movs	r3, #0
   902fa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
   902fe:	e01c      	b.n	9033a <cl_testharnesscommandhandler+0x9a>
	{
		TestMsg.data.byte[temp] = 0;
   90300:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   90304:	f507 7290 	add.w	r2, r7, #288	; 0x120
   90308:	4413      	add	r3, r2
   9030a:	2200      	movs	r2, #0
   9030c:	f803 2c88 	strb.w	r2, [r3, #-136]
		dataarray[temp]=0;
   90310:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   90314:	f507 7290 	add.w	r2, r7, #288	; 0x120
   90318:	4413      	add	r3, r2
   9031a:	2200      	movs	r2, #0
   9031c:	f803 2ca8 	strb.w	r2, [r3, #-168]
		datatxarray[temp]=0;
   90320:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   90324:	f507 7290 	add.w	r2, r7, #288	; 0x120
   90328:	4413      	add	r3, r2
   9032a:	2200      	movs	r2, #0
   9032c:	f803 2cbc 	strb.w	r2, [r3, #-188]
	cl_indata.bytearray[3] = 0;
	cl_indata.Twobyte = 0;
	cl_indata.word = 0;
	
	
	for( temp =0; temp < MAX_DATA_SIZE ;temp++ )
   90330:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   90334:	3301      	adds	r3, #1
   90336:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
   9033a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   9033e:	2b13      	cmp	r3, #19
   90340:	d9de      	bls.n	90300 <cl_testharnesscommandhandler+0x60>
		dataarray[temp]=0;
		datatxarray[temp]=0;
				
	}
	
	TestMsg.datasize = pCl_ConsoleMsg->datasize;
   90342:	1d3b      	adds	r3, r7, #4
   90344:	681b      	ldr	r3, [r3, #0]
   90346:	78db      	ldrb	r3, [r3, #3]
   90348:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	
	for( temp =0; temp <TestMsg.datasize ;temp++ )
   9034c:	2300      	movs	r3, #0
   9034e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
   90352:	e01e      	b.n	90392 <cl_testharnesscommandhandler+0xf2>
	{
		TestMsg.data.byte[temp] = pCl_ConsoleMsg->data.byte[temp];
   90354:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   90358:	f897 211f 	ldrb.w	r2, [r7, #287]	; 0x11f
   9035c:	1d39      	adds	r1, r7, #4
   9035e:	6809      	ldr	r1, [r1, #0]
   90360:	440a      	add	r2, r1
   90362:	7912      	ldrb	r2, [r2, #4]
   90364:	f507 7190 	add.w	r1, r7, #288	; 0x120
   90368:	440b      	add	r3, r1
   9036a:	f803 2c88 	strb.w	r2, [r3, #-136]
		dataarray[temp]= pCl_ConsoleMsg->data.byte[temp];
   9036e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   90372:	f897 211f 	ldrb.w	r2, [r7, #287]	; 0x11f
   90376:	1d39      	adds	r1, r7, #4
   90378:	6809      	ldr	r1, [r1, #0]
   9037a:	440a      	add	r2, r1
   9037c:	7912      	ldrb	r2, [r2, #4]
   9037e:	f507 7190 	add.w	r1, r7, #288	; 0x120
   90382:	440b      	add	r3, r1
   90384:	f803 2ca8 	strb.w	r2, [r3, #-168]
				
	}
	
	TestMsg.datasize = pCl_ConsoleMsg->datasize;
	
	for( temp =0; temp <TestMsg.datasize ;temp++ )
   90388:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   9038c:	3301      	adds	r3, #1
   9038e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
   90392:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   90396:	f897 211f 	ldrb.w	r2, [r7, #287]	; 0x11f
   9039a:	429a      	cmp	r2, r3
   9039c:	d3da      	bcc.n	90354 <cl_testharnesscommandhandler+0xb4>
	




	switch ((Cl_Testcommandtype)TestMsg.data.byte[0])
   9039e:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
   903a2:	2b6e      	cmp	r3, #110	; 0x6e
   903a4:	f202 83e7 	bhi.w	92b76 <cl_testharnesscommandhandler+0x28d6>
   903a8:	a201      	add	r2, pc, #4	; (adr r2, 903b0 <cl_testharnesscommandhandler+0x110>)
   903aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   903ae:	bf00      	nop
   903b0:	000906b7 	.word	0x000906b7
   903b4:	000906cb 	.word	0x000906cb
   903b8:	000906e1 	.word	0x000906e1
   903bc:	00092b77 	.word	0x00092b77
   903c0:	00092b77 	.word	0x00092b77
   903c4:	00092b77 	.word	0x00092b77
   903c8:	00092b77 	.word	0x00092b77
   903cc:	000906f7 	.word	0x000906f7
   903d0:	00090717 	.word	0x00090717
   903d4:	00090737 	.word	0x00090737
   903d8:	00090757 	.word	0x00090757
   903dc:	00090777 	.word	0x00090777
   903e0:	00090785 	.word	0x00090785
   903e4:	00090793 	.word	0x00090793
   903e8:	0009083f 	.word	0x0009083f
   903ec:	0009084d 	.word	0x0009084d
   903f0:	00090861 	.word	0x00090861
   903f4:	000908a9 	.word	0x000908a9
   903f8:	000908b7 	.word	0x000908b7
   903fc:	000907b5 	.word	0x000907b5
   90400:	000907eb 	.word	0x000907eb
   90404:	00090907 	.word	0x00090907
   90408:	00090955 	.word	0x00090955
   9040c:	00090b81 	.word	0x00090b81
   90410:	00090c85 	.word	0x00090c85
   90414:	00090ca7 	.word	0x00090ca7
   90418:	00090cc9 	.word	0x00090cc9
   9041c:	00090dcb 	.word	0x00090dcb
   90420:	00090e0f 	.word	0x00090e0f
   90424:	00090e31 	.word	0x00090e31
   90428:	00090e83 	.word	0x00090e83
   9042c:	00090edb 	.word	0x00090edb
   90430:	00090f5d 	.word	0x00090f5d
   90434:	00090f7f 	.word	0x00090f7f
   90438:	00091043 	.word	0x00091043
   9043c:	00091057 	.word	0x00091057
   90440:	00091071 	.word	0x00091071
   90444:	0009108b 	.word	0x0009108b
   90448:	000910a1 	.word	0x000910a1
   9044c:	00091189 	.word	0x00091189
   90450:	00092b77 	.word	0x00092b77
   90454:	00091145 	.word	0x00091145
   90458:	00091169 	.word	0x00091169
   9045c:	000911c9 	.word	0x000911c9
   90460:	000911eb 	.word	0x000911eb
   90464:	0009120d 	.word	0x0009120d
   90468:	000912c9 	.word	0x000912c9
   9046c:	00090c39 	.word	0x00090c39
   90470:	00090d1b 	.word	0x00090d1b
   90474:	00092b77 	.word	0x00092b77
   90478:	00092b77 	.word	0x00092b77
   9047c:	0009132d 	.word	0x0009132d
   90480:	00091367 	.word	0x00091367
   90484:	000914c5 	.word	0x000914c5
   90488:	000913a1 	.word	0x000913a1
   9048c:	000913e7 	.word	0x000913e7
   90490:	0009142d 	.word	0x0009142d
   90494:	00091479 	.word	0x00091479
   90498:	00091555 	.word	0x00091555
   9049c:	000915ad 	.word	0x000915ad
   904a0:	00091633 	.word	0x00091633
   904a4:	000915db 	.word	0x000915db
   904a8:	0009251d 	.word	0x0009251d
   904ac:	000908c5 	.word	0x000908c5
   904b0:	000908e1 	.word	0x000908e1
   904b4:	00091649 	.word	0x00091649
   904b8:	00091655 	.word	0x00091655
   904bc:	000916a7 	.word	0x000916a7
   904c0:	000916c9 	.word	0x000916c9
   904c4:	000916d7 	.word	0x000916d7
   904c8:	000916fd 	.word	0x000916fd
   904cc:	00091707 	.word	0x00091707
   904d0:	00090d67 	.word	0x00090d67
   904d4:	0009172f 	.word	0x0009172f
   904d8:	00092b77 	.word	0x00092b77
   904dc:	0009174b 	.word	0x0009174b
   904e0:	00091761 	.word	0x00091761
   904e4:	000907a1 	.word	0x000907a1
   904e8:	000907ab 	.word	0x000907ab
   904ec:	00091661 	.word	0x00091661
   904f0:	00091769 	.word	0x00091769
   904f4:	00090e97 	.word	0x00090e97
   904f8:	00090eb9 	.word	0x00090eb9
   904fc:	000912b1 	.word	0x000912b1
   90500:	00090929 	.word	0x00090929
   90504:	00090977 	.word	0x00090977
   90508:	00090fd3 	.word	0x00090fd3
   9050c:	0009100b 	.word	0x0009100b
   90510:	00092b77 	.word	0x00092b77
   90514:	00090629 	.word	0x00090629
   90518:	00090581 	.word	0x00090581
   9051c:	000905af 	.word	0x000905af
   90520:	000905dd 	.word	0x000905dd
   90524:	000917a9 	.word	0x000917a9
   90528:	000917bd 	.word	0x000917bd
   9052c:	00091791 	.word	0x00091791
   90530:	00091799 	.word	0x00091799
   90534:	0009056d 	.word	0x0009056d
   90538:	00090577 	.word	0x00090577
   9053c:	000910b7 	.word	0x000910b7
   90540:	000910d9 	.word	0x000910d9
   90544:	000917cb 	.word	0x000917cb
   90548:	000917d3 	.word	0x000917d3
   9054c:	000917db 	.word	0x000917db
   90550:	000917e7 	.word	0x000917e7
   90554:	000917f3 	.word	0x000917f3
   90558:	000909f3 	.word	0x000909f3
   9055c:	00090abf 	.word	0x00090abf
   90560:	00090a6f 	.word	0x00090a6f
   90564:	00092b77 	.word	0x00092b77
   90568:	00092b77 	.word	0x00092b77
	//switch (test)
	{
		case TEST_HEATER_UPDATE_DISABLE:
		heater_update_disble = true;
   9056c:	4bc0      	ldr	r3, [pc, #768]	; (90870 <cl_testharnesscommandhandler+0x5d0>)
   9056e:	2201      	movs	r2, #1
   90570:	701a      	strb	r2, [r3, #0]
		break;
   90572:	f002 bb01 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
		case TEST_HEATER_UPDATE_ENABLE:
		heater_update_disble = false;
   90576:	4bbe      	ldr	r3, [pc, #760]	; (90870 <cl_testharnesscommandhandler+0x5d0>)
   90578:	2200      	movs	r2, #0
   9057a:	701a      	strb	r2, [r3, #0]
		break;
   9057c:	f002 bafc 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
		case TEST_ENABLE_ALARM:
		prev_gate_status = TEST_STUB_ENABLEGATE;
   90580:	4bbc      	ldr	r3, [pc, #752]	; (90874 <cl_testharnesscommandhandler+0x5d4>)
   90582:	781a      	ldrb	r2, [r3, #0]
   90584:	4bbc      	ldr	r3, [pc, #752]	; (90878 <cl_testharnesscommandhandler+0x5d8>)
   90586:	701a      	strb	r2, [r3, #0]
		TEST_STUB_ENABLEGATE = 1;
   90588:	4bba      	ldr	r3, [pc, #744]	; (90874 <cl_testharnesscommandhandler+0x5d4>)
   9058a:	2201      	movs	r2, #1
   9058c:	701a      	strb	r2, [r3, #0]
		cl_testalarm_id = TestMsg.data.byte[1];
   9058e:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
   90592:	4bba      	ldr	r3, [pc, #744]	; (9087c <cl_testharnesscommandhandler+0x5dc>)
   90594:	701a      	strb	r2, [r3, #0]
		//Cl_AlarmActivateAlarms(alarmmap[cl_testalarm_id],true);
		Cl_AlarmActivateAlarms(cl_testalarm_id,true);
   90596:	4bb9      	ldr	r3, [pc, #740]	; (9087c <cl_testharnesscommandhandler+0x5dc>)
   90598:	781b      	ldrb	r3, [r3, #0]
   9059a:	4618      	mov	r0, r3
   9059c:	2101      	movs	r1, #1
   9059e:	4bb8      	ldr	r3, [pc, #736]	; (90880 <cl_testharnesscommandhandler+0x5e0>)
   905a0:	4798      	blx	r3
		TEST_STUB_ENABLEGATE = prev_gate_status;
   905a2:	4bb5      	ldr	r3, [pc, #724]	; (90878 <cl_testharnesscommandhandler+0x5d8>)
   905a4:	781a      	ldrb	r2, [r3, #0]
   905a6:	4bb3      	ldr	r3, [pc, #716]	; (90874 <cl_testharnesscommandhandler+0x5d4>)
   905a8:	701a      	strb	r2, [r3, #0]
		break;
   905aa:	f002 bae5 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
		case TEST_DISABLE_ALARM:
		prev_gate_status = TEST_STUB_ENABLEGATE;
   905ae:	4bb1      	ldr	r3, [pc, #708]	; (90874 <cl_testharnesscommandhandler+0x5d4>)
   905b0:	781a      	ldrb	r2, [r3, #0]
   905b2:	4bb1      	ldr	r3, [pc, #708]	; (90878 <cl_testharnesscommandhandler+0x5d8>)
   905b4:	701a      	strb	r2, [r3, #0]
		TEST_STUB_ENABLEGATE = 1;
   905b6:	4baf      	ldr	r3, [pc, #700]	; (90874 <cl_testharnesscommandhandler+0x5d4>)
   905b8:	2201      	movs	r2, #1
   905ba:	701a      	strb	r2, [r3, #0]
			cl_testalarm_id = TestMsg.data.byte[1];
   905bc:	f897 2099 	ldrb.w	r2, [r7, #153]	; 0x99
   905c0:	4bae      	ldr	r3, [pc, #696]	; (9087c <cl_testharnesscommandhandler+0x5dc>)
   905c2:	701a      	strb	r2, [r3, #0]
		Cl_AlarmActivateAlarms(cl_testalarm_id,false);
   905c4:	4bad      	ldr	r3, [pc, #692]	; (9087c <cl_testharnesscommandhandler+0x5dc>)
   905c6:	781b      	ldrb	r3, [r3, #0]
   905c8:	4618      	mov	r0, r3
   905ca:	2100      	movs	r1, #0
   905cc:	4bac      	ldr	r3, [pc, #688]	; (90880 <cl_testharnesscommandhandler+0x5e0>)
   905ce:	4798      	blx	r3
		TEST_STUB_ENABLEGATE = prev_gate_status;
   905d0:	4ba9      	ldr	r3, [pc, #676]	; (90878 <cl_testharnesscommandhandler+0x5d8>)
   905d2:	781a      	ldrb	r2, [r3, #0]
   905d4:	4ba7      	ldr	r3, [pc, #668]	; (90874 <cl_testharnesscommandhandler+0x5d4>)
   905d6:	701a      	strb	r2, [r3, #0]
		
		break;
   905d8:	f002 bace 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
		case TEST_DISABLE_ALL_ALARMS:
		prev_gate_status = TEST_STUB_ENABLEGATE;
   905dc:	4ba5      	ldr	r3, [pc, #660]	; (90874 <cl_testharnesscommandhandler+0x5d4>)
   905de:	781a      	ldrb	r2, [r3, #0]
   905e0:	4ba5      	ldr	r3, [pc, #660]	; (90878 <cl_testharnesscommandhandler+0x5d8>)
   905e2:	701a      	strb	r2, [r3, #0]
		TEST_STUB_ENABLEGATE = 1;
   905e4:	4ba3      	ldr	r3, [pc, #652]	; (90874 <cl_testharnesscommandhandler+0x5d4>)
   905e6:	2201      	movs	r2, #1
   905e8:	701a      	strb	r2, [r3, #0]
		temp = 0;
   905ea:	2300      	movs	r3, #0
   905ec:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
		while ( temp < _ALARM_MAX_ID )
   905f0:	e008      	b.n	90604 <cl_testharnesscommandhandler+0x364>
		Cl_AlarmActivateAlarms(temp++,false);
   905f2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   905f6:	1c5a      	adds	r2, r3, #1
   905f8:	f887 211f 	strb.w	r2, [r7, #287]	; 0x11f
   905fc:	4618      	mov	r0, r3
   905fe:	2100      	movs	r1, #0
   90600:	4b9f      	ldr	r3, [pc, #636]	; (90880 <cl_testharnesscommandhandler+0x5e0>)
   90602:	4798      	blx	r3
		break;
		case TEST_DISABLE_ALL_ALARMS:
		prev_gate_status = TEST_STUB_ENABLEGATE;
		TEST_STUB_ENABLEGATE = 1;
		temp = 0;
		while ( temp < _ALARM_MAX_ID )
   90604:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   90608:	2b3e      	cmp	r3, #62	; 0x3e
   9060a:	d9f2      	bls.n	905f2 <cl_testharnesscommandhandler+0x352>
		Cl_AlarmActivateAlarms(temp++,false);
		TEST_STUB_ENABLEGATE = 0;
   9060c:	4b99      	ldr	r3, [pc, #612]	; (90874 <cl_testharnesscommandhandler+0x5d4>)
   9060e:	2200      	movs	r2, #0
   90610:	701a      	strb	r2, [r3, #0]
			static int16_t ms_count = 0;
			cl_Datastreamtype cl_tdata;
			ms_count++;
   90612:	4b9c      	ldr	r3, [pc, #624]	; (90884 <cl_testharnesscommandhandler+0x5e4>)
   90614:	881b      	ldrh	r3, [r3, #0]
   90616:	b29b      	uxth	r3, r3
   90618:	b29b      	uxth	r3, r3
   9061a:	3301      	adds	r3, #1
   9061c:	b29b      	uxth	r3, r3
   9061e:	b29a      	uxth	r2, r3
   90620:	4b98      	ldr	r3, [pc, #608]	; (90884 <cl_testharnesscommandhandler+0x5e4>)
   90622:	801a      	strh	r2, [r3, #0]
			//	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
				
			//	ms_count = 0;
				
			
		break;
   90624:	f002 baa8 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
		
		case TEST_SET_BP_DC_DAC:
		cl_indata.bytearray[0] = TestMsg.data.byte[1];
   90628:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   9062c:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
		
		cl_indata.bytearray[0] = TestMsg.data.byte[1];
   90630:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   90634:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
		if(cl_indata.bytearray[0] & 0x01)
   90638:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
   9063c:	f003 0301 	and.w	r3, r3, #1
   90640:	2b00      	cmp	r3, #0
   90642:	d004      	beq.n	9064e <cl_testharnesscommandhandler+0x3ae>
		{
			PIOC->PIO_SODR = 1 <<28;
   90644:	4b90      	ldr	r3, [pc, #576]	; (90888 <cl_testharnesscommandhandler+0x5e8>)
   90646:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   9064a:	631a      	str	r2, [r3, #48]	; 0x30
   9064c:	e003      	b.n	90656 <cl_testharnesscommandhandler+0x3b6>
			
		}
		else
		{
			PIOC->PIO_CODR = 1 <<28;
   9064e:	4b8e      	ldr	r3, [pc, #568]	; (90888 <cl_testharnesscommandhandler+0x5e8>)
   90650:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   90654:	635a      	str	r2, [r3, #52]	; 0x34
		}
		if(cl_indata.bytearray[0] & 0x02)
   90656:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
   9065a:	f003 0302 	and.w	r3, r3, #2
   9065e:	2b00      	cmp	r3, #0
   90660:	d004      	beq.n	9066c <cl_testharnesscommandhandler+0x3cc>
		{
			PIOC->PIO_SODR = 1 <<26;
   90662:	4b89      	ldr	r3, [pc, #548]	; (90888 <cl_testharnesscommandhandler+0x5e8>)
   90664:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   90668:	631a      	str	r2, [r3, #48]	; 0x30
   9066a:	e003      	b.n	90674 <cl_testharnesscommandhandler+0x3d4>
			
		}
		else
		{
			PIOC->PIO_CODR = 1 <<26;
   9066c:	4b86      	ldr	r3, [pc, #536]	; (90888 <cl_testharnesscommandhandler+0x5e8>)
   9066e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   90672:	635a      	str	r2, [r3, #52]	; 0x34
		}
		if(cl_indata.bytearray[0] & 0x04)
   90674:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
   90678:	f003 0304 	and.w	r3, r3, #4
   9067c:	2b00      	cmp	r3, #0
   9067e:	d004      	beq.n	9068a <cl_testharnesscommandhandler+0x3ea>
		{
			PIOC->PIO_SODR = 1 <<25;
   90680:	4b81      	ldr	r3, [pc, #516]	; (90888 <cl_testharnesscommandhandler+0x5e8>)
   90682:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   90686:	631a      	str	r2, [r3, #48]	; 0x30
   90688:	e003      	b.n	90692 <cl_testharnesscommandhandler+0x3f2>
			
		}
		else
		{
			PIOC->PIO_CODR = 1 <<25;
   9068a:	4b7f      	ldr	r3, [pc, #508]	; (90888 <cl_testharnesscommandhandler+0x5e8>)
   9068c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   90690:	635a      	str	r2, [r3, #52]	; 0x34
		}
		if(cl_indata.bytearray[0] & 0x08)
   90692:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
   90696:	f003 0308 	and.w	r3, r3, #8
   9069a:	2b00      	cmp	r3, #0
   9069c:	d005      	beq.n	906aa <cl_testharnesscommandhandler+0x40a>
		{
			PIOC->PIO_SODR = 1 <<29;
   9069e:	4b7a      	ldr	r3, [pc, #488]	; (90888 <cl_testharnesscommandhandler+0x5e8>)
   906a0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   906a4:	631a      	str	r2, [r3, #48]	; 0x30
		}
		else
		{
			PIOC->PIO_CODR = 1 <<29;
		}
		break;
   906a6:	f002 ba67 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
		{
			PIOC->PIO_SODR = 1 <<29;
		}
		else
		{
			PIOC->PIO_CODR = 1 <<29;
   906aa:	4b77      	ldr	r3, [pc, #476]	; (90888 <cl_testharnesscommandhandler+0x5e8>)
   906ac:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   906b0:	635a      	str	r2, [r3, #52]	; 0x34
		}
		break;
   906b2:	f002 ba61 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_ALARM_COND:
		
		cl_sys_statbuffer.cond_status = TestMsg.data.byte[1];
   906b6:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   906ba:	b29a      	uxth	r2, r3
   906bc:	4b73      	ldr	r3, [pc, #460]	; (9088c <cl_testharnesscommandhandler+0x5ec>)
   906be:	861a      	strh	r2, [r3, #48]	; 0x30
		
		cl_thretval = CL_OK;
   906c0:	2300      	movs	r3, #0
   906c2:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		break;
   906c6:	f002 ba57 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_ALARM_CS1:
		
		cl_sys_statbuffer.cs1status = TestMsg.data.byte[1];
   906ca:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   906ce:	b29a      	uxth	r2, r3
   906d0:	4b6e      	ldr	r3, [pc, #440]	; (9088c <cl_testharnesscommandhandler+0x5ec>)
   906d2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
				cl_thretval = CL_OK;
   906d6:	2300      	movs	r3, #0
   906d8:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		break;
   906dc:	f002 ba4c 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_ALARM_CS2:
		cl_sys_statbuffer.cs2status = TestMsg.data.byte[1];
   906e0:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   906e4:	b29a      	uxth	r2, r3
   906e6:	4b69      	ldr	r3, [pc, #420]	; (9088c <cl_testharnesscommandhandler+0x5ec>)
   906e8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				cl_thretval = CL_OK;
   906ec:	2300      	movs	r3, #0
   906ee:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		break;
   906f2:	f002 ba41 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
		break;
		case TEST_SET_ALARM_PS3:
		break;
		case TEST_SET_ALARM_FL1:
		
		if(TestMsg.data.byte[1] == 0 )
   906f6:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   906fa:	2b00      	cmp	r3, #0
   906fc:	d105      	bne.n	9070a <cl_testharnesscommandhandler+0x46a>
		cl_sys_statbuffer.levelswitch1 = false;
   906fe:	4b63      	ldr	r3, [pc, #396]	; (9088c <cl_testharnesscommandhandler+0x5ec>)
   90700:	2200      	movs	r2, #0
   90702:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		else
		cl_sys_statbuffer.levelswitch1 = true;
		break;
   90706:	f002 ba37 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_ALARM_FL1:
		
		if(TestMsg.data.byte[1] == 0 )
		cl_sys_statbuffer.levelswitch1 = false;
		else
		cl_sys_statbuffer.levelswitch1 = true;
   9070a:	4b60      	ldr	r3, [pc, #384]	; (9088c <cl_testharnesscommandhandler+0x5ec>)
   9070c:	2201      	movs	r2, #1
   9070e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		break;
   90712:	f002 ba31 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
		
		break;

		case TEST_SET_ALARM_FL2:
		if(TestMsg.data.byte[1] == 0 )
   90716:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   9071a:	2b00      	cmp	r3, #0
   9071c:	d105      	bne.n	9072a <cl_testharnesscommandhandler+0x48a>
		cl_sys_statbuffer.levelswitch2 = false;
   9071e:	4b5b      	ldr	r3, [pc, #364]	; (9088c <cl_testharnesscommandhandler+0x5ec>)
   90720:	2200      	movs	r2, #0
   90722:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
		else
		cl_sys_statbuffer.levelswitch2 = true;
		break;
   90726:	f002 ba27 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>

		case TEST_SET_ALARM_FL2:
		if(TestMsg.data.byte[1] == 0 )
		cl_sys_statbuffer.levelswitch2 = false;
		else
		cl_sys_statbuffer.levelswitch2 = true;
   9072a:	4b58      	ldr	r3, [pc, #352]	; (9088c <cl_testharnesscommandhandler+0x5ec>)
   9072c:	2201      	movs	r2, #1
   9072e:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
		break;
   90732:	f002 ba21 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_ALARM_HOLD1:
		if(TestMsg.data.byte[1] == 0 )
   90736:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   9073a:	2b00      	cmp	r3, #0
   9073c:	d105      	bne.n	9074a <cl_testharnesscommandhandler+0x4aa>
		cl_sys_statbuffer.holder1status = false;
   9073e:	4b53      	ldr	r3, [pc, #332]	; (9088c <cl_testharnesscommandhandler+0x5ec>)
   90740:	2200      	movs	r2, #0
   90742:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		else 
		cl_sys_statbuffer.holder1status = true;
		break;
   90746:	f002 ba17 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
		break;
		case TEST_SET_ALARM_HOLD1:
		if(TestMsg.data.byte[1] == 0 )
		cl_sys_statbuffer.holder1status = false;
		else 
		cl_sys_statbuffer.holder1status = true;
   9074a:	4b50      	ldr	r3, [pc, #320]	; (9088c <cl_testharnesscommandhandler+0x5ec>)
   9074c:	2201      	movs	r2, #1
   9074e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		break;
   90752:	f002 ba11 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_ALARM_HOLD2:
		if(TestMsg.data.byte[1] == 0 )
   90756:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   9075a:	2b00      	cmp	r3, #0
   9075c:	d105      	bne.n	9076a <cl_testharnesscommandhandler+0x4ca>
		cl_sys_statbuffer.holder2status = false;
   9075e:	4b4b      	ldr	r3, [pc, #300]	; (9088c <cl_testharnesscommandhandler+0x5ec>)
   90760:	2200      	movs	r2, #0
   90762:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
		else
		cl_sys_statbuffer.holder2status = true;
		break;
   90766:	f002 ba07 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
		break;
		case TEST_SET_ALARM_HOLD2:
		if(TestMsg.data.byte[1] == 0 )
		cl_sys_statbuffer.holder2status = false;
		else
		cl_sys_statbuffer.holder2status = true;
   9076a:	4b48      	ldr	r3, [pc, #288]	; (9088c <cl_testharnesscommandhandler+0x5ec>)
   9076c:	2201      	movs	r2, #1
   9076e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
		break;
   90772:	f002 ba01 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_ALARM_TEMP1:
		cl_sys_statbuffer.Temp1status = TestMsg.data.byte[1];
   90776:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   9077a:	b29a      	uxth	r2, r3
   9077c:	4b43      	ldr	r3, [pc, #268]	; (9088c <cl_testharnesscommandhandler+0x5ec>)
   9077e:	851a      	strh	r2, [r3, #40]	; 0x28
		break;
   90780:	f002 b9fa 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_ALARM_TEMP2:
		cl_sys_statbuffer.Temp2status = TestMsg.data.byte[1];
   90784:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   90788:	b29a      	uxth	r2, r3
   9078a:	4b40      	ldr	r3, [pc, #256]	; (9088c <cl_testharnesscommandhandler+0x5ec>)
   9078c:	855a      	strh	r2, [r3, #42]	; 0x2a
		break;
   9078e:	f002 b9f3 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_ALARM_TEMP3:
		cl_sys_statbuffer.Temp3status = TestMsg.data.byte[1];
   90792:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   90796:	b29a      	uxth	r2, r3
   90798:	4b3c      	ldr	r3, [pc, #240]	; (9088c <cl_testharnesscommandhandler+0x5ec>)
   9079a:	859a      	strh	r2, [r3, #44]	; 0x2c
		break;
   9079c:	f002 b9ec 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_ALARM_CURRENT_SENSE_ON:
		dummy_currentsence = true;
   907a0:	4b3b      	ldr	r3, [pc, #236]	; (90890 <cl_testharnesscommandhandler+0x5f0>)
   907a2:	2201      	movs	r2, #1
   907a4:	701a      	strb	r2, [r3, #0]
		break;
   907a6:	f002 b9e7 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_ALARM_CURRENT_SENSE_OFF:
		dummy_currentsence = false;
   907aa:	4b39      	ldr	r3, [pc, #228]	; (90890 <cl_testharnesscommandhandler+0x5f0>)
   907ac:	2200      	movs	r2, #0
   907ae:	701a      	strb	r2, [r3, #0]
		break;
   907b0:	f002 b9e2 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SETDATA:
		cl_thretval = sv_nvmsetdata( TestMsg.data.byte[1], &(dataarray[2]),TestMsg.datasize);
   907b4:	f897 1099 	ldrb.w	r1, [r7, #153]	; 0x99
   907b8:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
   907bc:	f107 0378 	add.w	r3, r7, #120	; 0x78
   907c0:	3302      	adds	r3, #2
   907c2:	4608      	mov	r0, r1
   907c4:	4619      	mov	r1, r3
   907c6:	4b33      	ldr	r3, [pc, #204]	; (90894 <cl_testharnesscommandhandler+0x5f4>)
   907c8:	4798      	blx	r3
   907ca:	4603      	mov	r3, r0
   907cc:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
	//	cl_thretval = sv_nvmsetdata( dataarray[1], &dataarray[2],TestMsg.datasize);
		cl_thretval = sv_nvmgetdata( dataarray[1], &datatxarray[0]);
   907d0:	f897 2079 	ldrb.w	r2, [r7, #121]	; 0x79
   907d4:	f107 0364 	add.w	r3, r7, #100	; 0x64
   907d8:	4610      	mov	r0, r2
   907da:	4619      	mov	r1, r3
   907dc:	4b2e      	ldr	r3, [pc, #184]	; (90898 <cl_testharnesscommandhandler+0x5f8>)
   907de:	4798      	blx	r3
   907e0:	4603      	mov	r3, r0
   907e2:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"SET",3);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&datatxarray[0],2);
		break;
   907e6:	f002 b9c7 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
		case TEST_GETDATA:

	if( dataarray[1] == NV_DIALYSATE_TEMP || dataarray[1] == NV_APT_VALUE ||dataarray[1] == NV_VPT_VALUE ||  dataarray[1] == NV_CONDUCTIVITY   )
   907ea:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
   907ee:	2b06      	cmp	r3, #6
   907f0:	d00b      	beq.n	9080a <cl_testharnesscommandhandler+0x56a>
   907f2:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
   907f6:	2b07      	cmp	r3, #7
   907f8:	d007      	beq.n	9080a <cl_testharnesscommandhandler+0x56a>
   907fa:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
   907fe:	2b08      	cmp	r3, #8
   90800:	d003      	beq.n	9080a <cl_testharnesscommandhandler+0x56a>
   90802:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
   90806:	2b0a      	cmp	r3, #10
   90808:	d10c      	bne.n	90824 <cl_testharnesscommandhandler+0x584>
	{
		
		cl_thretval = cl_testgetsensordata( dataarray[1], &datatxarray[0]);
   9080a:	f897 2079 	ldrb.w	r2, [r7, #121]	; 0x79
   9080e:	f107 0364 	add.w	r3, r7, #100	; 0x64
   90812:	4610      	mov	r0, r2
   90814:	4619      	mov	r1, r3
   90816:	4b21      	ldr	r3, [pc, #132]	; (9089c <cl_testharnesscommandhandler+0x5fc>)
   90818:	4798      	blx	r3
   9081a:	4603      	mov	r3, r0
   9081c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_TEST_SYSDATA,&datatxarray,2);
		
	
	

		break;
   90820:	f002 b9aa 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"COND=",5);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&datatxarray[0],1);
	}
	else
	{
		cl_thretval = sv_nvmgetdata( dataarray[1], &datatxarray[0]);
   90824:	f897 2079 	ldrb.w	r2, [r7, #121]	; 0x79
   90828:	f107 0364 	add.w	r3, r7, #100	; 0x64
   9082c:	4610      	mov	r0, r2
   9082e:	4619      	mov	r1, r3
   90830:	4b19      	ldr	r3, [pc, #100]	; (90898 <cl_testharnesscommandhandler+0x5f8>)
   90832:	4798      	blx	r3
   90834:	4603      	mov	r3, r0
   90836:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_TEST_SYSDATA,&datatxarray,2);
		
	
	

		break;
   9083a:	f002 b99d 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_ALARM_ABDSTATUS://14
		cl_sys_statbuffer.abdstatus =  TestMsg.data.byte[1];
   9083e:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   90842:	b29a      	uxth	r2, r3
   90844:	4b11      	ldr	r3, [pc, #68]	; (9088c <cl_testharnesscommandhandler+0x5ec>)
   90846:	831a      	strh	r2, [r3, #24]
		break;
   90848:	f002 b996 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_ALARM_BDSTATUS://15
		test_enabled = false;
   9084c:	4b14      	ldr	r3, [pc, #80]	; (908a0 <cl_testharnesscommandhandler+0x600>)
   9084e:	2200      	movs	r2, #0
   90850:	701a      	strb	r2, [r3, #0]
		cl_sys_statbuffer_test.bdstatus =  TestMsg.data.byte[1];
   90852:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   90856:	b29a      	uxth	r2, r3
   90858:	4b12      	ldr	r3, [pc, #72]	; (908a4 <cl_testharnesscommandhandler+0x604>)
   9085a:	835a      	strh	r2, [r3, #26]
		break;
   9085c:	f002 b98c 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_ALARM_APTSTATUS://16
		cl_sys_statbuffer.aptstatus =  TestMsg.data.byte[1];
   90860:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   90864:	b29a      	uxth	r2, r3
   90866:	4b09      	ldr	r3, [pc, #36]	; (9088c <cl_testharnesscommandhandler+0x5ec>)
   90868:	821a      	strh	r2, [r3, #16]
		break;
   9086a:	f002 b985 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
   9086e:	bf00      	nop
   90870:	20071a5e 	.word	0x20071a5e
   90874:	20070a38 	.word	0x20070a38
   90878:	20070a39 	.word	0x20070a39
   9087c:	200725bc 	.word	0x200725bc
   90880:	00082e61 	.word	0x00082e61
   90884:	20071a76 	.word	0x20071a76
   90888:	400e1200 	.word	0x400e1200
   9088c:	20072224 	.word	0x20072224
   90890:	20071a68 	.word	0x20071a68
   90894:	0009a57d 	.word	0x0009a57d
   90898:	0009a545 	.word	0x0009a545
   9089c:	00092bd9 	.word	0x00092bd9
   908a0:	20071a5d 	.word	0x20071a5d
   908a4:	20072568 	.word	0x20072568
		case TEST_SET_ALARM_BPTSTATUS://17
		cl_sys_statbuffer.vptstatus =  TestMsg.data.byte[1];
   908a8:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   908ac:	b29a      	uxth	r2, r3
   908ae:	4bbc      	ldr	r3, [pc, #752]	; (90ba0 <cl_testharnesscommandhandler+0x900>)
   908b0:	825a      	strh	r2, [r3, #18]
		break;
   908b2:	f002 b961 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_ALARM_BLDSTATUS://18
		cl_sys_statbuffer.bldstatus =  TestMsg.data.byte[1];
   908b6:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   908ba:	b29a      	uxth	r2, r3
   908bc:	4bb8      	ldr	r3, [pc, #736]	; (90ba0 <cl_testharnesscommandhandler+0x900>)
   908be:	87da      	strh	r2, [r3, #62]	; 0x3e
		break;
   908c0:	f002 b95a 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_HEATERON://63 0x3F
		cl_wait(100);
   908c4:	2064      	movs	r0, #100	; 0x64
   908c6:	4bb7      	ldr	r3, [pc, #732]	; (90ba4 <cl_testharnesscommandhandler+0x904>)
   908c8:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"HE_ON";
   908ca:	4bb7      	ldr	r3, [pc, #732]	; (90ba8 <cl_testharnesscommandhandler+0x908>)
   908cc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//	cl_thretval = sv_cntrl_poweronheater();
		SetHeaterState(CL_HEATER_STATE_ON);
   908d0:	2001      	movs	r0, #1
   908d2:	4bb6      	ldr	r3, [pc, #728]	; (90bac <cl_testharnesscommandhandler+0x90c>)
   908d4:	4798      	blx	r3
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,5);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   908d6:	2064      	movs	r0, #100	; 0x64
   908d8:	4bb2      	ldr	r3, [pc, #712]	; (90ba4 <cl_testharnesscommandhandler+0x904>)
   908da:	4798      	blx	r3
		break;
   908dc:	f002 b94c 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_HEATEROFF://64 0x40
		cl_wait(100);
   908e0:	2064      	movs	r0, #100	; 0x64
   908e2:	4bb0      	ldr	r3, [pc, #704]	; (90ba4 <cl_testharnesscommandhandler+0x904>)
   908e4:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"HE_OFF";
   908e6:	4bb2      	ldr	r3, [pc, #712]	; (90bb0 <cl_testharnesscommandhandler+0x910>)
   908e8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		cl_thretval = sv_cntrl_poweroffheater();
   908ec:	4bb1      	ldr	r3, [pc, #708]	; (90bb4 <cl_testharnesscommandhandler+0x914>)
   908ee:	4798      	blx	r3
   908f0:	4603      	mov	r3, r0
   908f2:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		SetHeaterState(CL_HEATER_STATE_OFF);
   908f6:	2004      	movs	r0, #4
   908f8:	4bac      	ldr	r3, [pc, #688]	; (90bac <cl_testharnesscommandhandler+0x90c>)
   908fa:	4798      	blx	r3
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
		//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   908fc:	2064      	movs	r0, #100	; 0x64
   908fe:	4ba9      	ldr	r3, [pc, #676]	; (90ba4 <cl_testharnesscommandhandler+0x904>)
   90900:	4798      	blx	r3
		break;
   90902:	f002 b939 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_FLOW_PUMPON://21 0x15
		cl_wait(100);
   90906:	2064      	movs	r0, #100	; 0x64
   90908:	4ba6      	ldr	r3, [pc, #664]	; (90ba4 <cl_testharnesscommandhandler+0x904>)
   9090a:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"FP_ON";
   9090c:	4baa      	ldr	r3, [pc, #680]	; (90bb8 <cl_testharnesscommandhandler+0x918>)
   9090e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		cl_thretval = sv_cntrl_activatepump(DCMOTOR1);
   90912:	2001      	movs	r0, #1
   90914:	4ba9      	ldr	r3, [pc, #676]	; (90bbc <cl_testharnesscommandhandler+0x91c>)
   90916:	4798      	blx	r3
   90918:	4603      	mov	r3, r0
   9091a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		//cl_thretval =  sv_cntrl_activatepump(BLOODPUMP);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   9091e:	2064      	movs	r0, #100	; 0x64
   90920:	4ba0      	ldr	r3, [pc, #640]	; (90ba4 <cl_testharnesscommandhandler+0x904>)
   90922:	4798      	blx	r3
		break;
   90924:	f002 b928 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
	case TEST_SET_FLOW_PUMPON_ONESEC://21 0x15
	cl_wait(100);
   90928:	2064      	movs	r0, #100	; 0x64
   9092a:	4b9e      	ldr	r3, [pc, #632]	; (90ba4 <cl_testharnesscommandhandler+0x904>)
   9092c:	4798      	blx	r3
	pdataarray = (Cl_Uint8Type *)"FP_ON";
   9092e:	4ba2      	ldr	r3, [pc, #648]	; (90bb8 <cl_testharnesscommandhandler+0x918>)
   90930:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//cl_thretval = sv_cntrl_activatepump(DCMOTOR1);
	Cl_Uint32Type t = 300;
   90934:	f44f 7396 	mov.w	r3, #300	; 0x12c
   90938:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	//sv_cntrl_setpumpspeed(BLOODPUMP,t);
//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
	cl_wait(2000);
   9093c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   90940:	4b98      	ldr	r3, [pc, #608]	; (90ba4 <cl_testharnesscommandhandler+0x904>)
   90942:	4798      	blx	r3
	cl_thretval = sv_cntrl_deactivatepump(DCMOTOR1);
   90944:	2001      	movs	r0, #1
   90946:	4b9e      	ldr	r3, [pc, #632]	; (90bc0 <cl_testharnesscommandhandler+0x920>)
   90948:	4798      	blx	r3
   9094a:	4603      	mov	r3, r0
   9094c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
	break;
   90950:	f002 b912 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
	
	case TEST_SET_FLOW_PUMPOFF://22 0x16
	cl_wait(100);
   90954:	2064      	movs	r0, #100	; 0x64
   90956:	4b93      	ldr	r3, [pc, #588]	; (90ba4 <cl_testharnesscommandhandler+0x904>)
   90958:	4798      	blx	r3
	pdataarray = (Cl_Uint8Type *)"FP_OFF";
   9095a:	4b9a      	ldr	r3, [pc, #616]	; (90bc4 <cl_testharnesscommandhandler+0x924>)
   9095c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	cl_thretval =  sv_cntrl_deactivatepump(DCMOTOR1);
   90960:	2001      	movs	r0, #1
   90962:	4b97      	ldr	r3, [pc, #604]	; (90bc0 <cl_testharnesscommandhandler+0x920>)
   90964:	4798      	blx	r3
   90966:	4603      	mov	r3, r0
   90968:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
	//cl_thretval =  sv_cntrl_deactivatepump(BLOODPUMP);
	
//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
	cl_wait(100);
   9096c:	2064      	movs	r0, #100	; 0x64
   9096e:	4b8d      	ldr	r3, [pc, #564]	; (90ba4 <cl_testharnesscommandhandler+0x904>)
   90970:	4798      	blx	r3
	break;	
   90972:	f002 b901 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
	case TEST_SET_CS_POT_VALUE:
//while (1)
{
	cl_wait(10);
   90976:	200a      	movs	r0, #10
   90978:	4b8a      	ldr	r3, [pc, #552]	; (90ba4 <cl_testharnesscommandhandler+0x904>)
   9097a:	4798      	blx	r3
			if(iic_nack)
   9097c:	4b92      	ldr	r3, [pc, #584]	; (90bc8 <cl_testharnesscommandhandler+0x928>)
   9097e:	781b      	ldrb	r3, [r3, #0]
   90980:	2b00      	cmp	r3, #0
   90982:	d002      	beq.n	9098a <cl_testharnesscommandhandler+0x6ea>
			{
//				Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"NACK",4);
				iic_nack = false;
   90984:	4b90      	ldr	r3, [pc, #576]	; (90bc8 <cl_testharnesscommandhandler+0x928>)
   90986:	2200      	movs	r2, #0
   90988:	701a      	strb	r2, [r3, #0]
			}
	 if(TestMsg.datasize == 3)
   9098a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   9098e:	2b03      	cmp	r3, #3
   90990:	d104      	bne.n	9099c <cl_testharnesscommandhandler+0x6fc>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[2];
   90992:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   90996:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   9099a:	e00b      	b.n	909b4 <cl_testharnesscommandhandler+0x714>
		
			
		}
		else if(TestMsg.datasize == 4)
   9099c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   909a0:	2b04      	cmp	r3, #4
   909a2:	d107      	bne.n	909b4 <cl_testharnesscommandhandler+0x714>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[1] = TestMsg.data.byte[2];
   909a4:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   909a8:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
			cl_indata.bytearray[0] = TestMsg.data.byte[3];
   909ac:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   909b0:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
			
		}
		if(TestMsg.data.byte[1] == 2)
   909b4:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   909b8:	2b02      	cmp	r3, #2
   909ba:	d115      	bne.n	909e8 <cl_testharnesscommandhandler+0x748>
		{
			Cl_Uint16Type potvalue = 0;
   909bc:	2300      	movs	r3, #0
   909be:	f8a7 3102 	strh.w	r3, [r7, #258]	; 0x102
				pdataarray = (Cl_Uint8Type *)"CS_POT_SET";
   909c2:	4b82      	ldr	r3, [pc, #520]	; (90bcc <cl_testharnesscommandhandler+0x92c>)
   909c4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
				potvalue = (cl_indata.Twobyte * 1024)/10000;
   909c8:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   909cc:	029b      	lsls	r3, r3, #10
   909ce:	4a80      	ldr	r2, [pc, #512]	; (90bd0 <cl_testharnesscommandhandler+0x930>)
   909d0:	fb82 1203 	smull	r1, r2, r2, r3
   909d4:	1312      	asrs	r2, r2, #12
   909d6:	17db      	asrs	r3, r3, #31
   909d8:	1ad3      	subs	r3, r2, r3
   909da:	f8a7 3102 	strh.w	r3, [r7, #258]	; 0x102
			sv_cs_setpotvalue(potvalue);
   909de:	f8b7 3102 	ldrh.w	r3, [r7, #258]	; 0x102
   909e2:	4618      	mov	r0, r3
   909e4:	4b7b      	ldr	r3, [pc, #492]	; (90bd4 <cl_testharnesscommandhandler+0x934>)
   909e6:	4798      	blx	r3
		
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,10);
	//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cl_indata.Twobyte,2);
//	cl_wait(20);
	cl_indata.word = 0;
   909e8:	2300      	movs	r3, #0
   909ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
//	sv_cs_readpotvalue(&cl_indata.Twobyte);
}
	break;
   909ee:	f002 b8c3 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
	case TEST_SET_COND_POT_VALUE:
	//while (1)
	{
		cl_wait(10);
   909f2:	200a      	movs	r0, #10
   909f4:	4b6b      	ldr	r3, [pc, #428]	; (90ba4 <cl_testharnesscommandhandler+0x904>)
   909f6:	4798      	blx	r3
		if(iic_nack)
   909f8:	4b73      	ldr	r3, [pc, #460]	; (90bc8 <cl_testharnesscommandhandler+0x928>)
   909fa:	781b      	ldrb	r3, [r3, #0]
   909fc:	2b00      	cmp	r3, #0
   909fe:	d002      	beq.n	90a06 <cl_testharnesscommandhandler+0x766>
		{
			//				Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"NACK",4);
			iic_nack = false;
   90a00:	4b71      	ldr	r3, [pc, #452]	; (90bc8 <cl_testharnesscommandhandler+0x928>)
   90a02:	2200      	movs	r2, #0
   90a04:	701a      	strb	r2, [r3, #0]
		}
		if(TestMsg.datasize == 3)
   90a06:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   90a0a:	2b03      	cmp	r3, #3
   90a0c:	d104      	bne.n	90a18 <cl_testharnesscommandhandler+0x778>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[2];
   90a0e:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   90a12:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   90a16:	e00b      	b.n	90a30 <cl_testharnesscommandhandler+0x790>
			
			
		}
		else if(TestMsg.datasize == 4)
   90a18:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   90a1c:	2b04      	cmp	r3, #4
   90a1e:	d107      	bne.n	90a30 <cl_testharnesscommandhandler+0x790>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[1] = TestMsg.data.byte[2];
   90a20:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   90a24:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
			cl_indata.bytearray[0] = TestMsg.data.byte[3];
   90a28:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   90a2c:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
			
		}
		if(TestMsg.data.byte[1] == 2)
   90a30:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   90a34:	2b02      	cmp	r3, #2
   90a36:	d115      	bne.n	90a64 <cl_testharnesscommandhandler+0x7c4>
		{
			Cl_Uint16Type potvalue = 0;
   90a38:	2300      	movs	r3, #0
   90a3a:	f8a7 3100 	strh.w	r3, [r7, #256]	; 0x100
			pdataarray = (Cl_Uint8Type *)"CS_POT_SET";
   90a3e:	4b63      	ldr	r3, [pc, #396]	; (90bcc <cl_testharnesscommandhandler+0x92c>)
   90a40:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			potvalue = (cl_indata.Twobyte * 1024)/10000;
   90a44:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   90a48:	029b      	lsls	r3, r3, #10
   90a4a:	4a61      	ldr	r2, [pc, #388]	; (90bd0 <cl_testharnesscommandhandler+0x930>)
   90a4c:	fb82 1203 	smull	r1, r2, r2, r3
   90a50:	1312      	asrs	r2, r2, #12
   90a52:	17db      	asrs	r3, r3, #31
   90a54:	1ad3      	subs	r3, r2, r3
   90a56:	f8a7 3100 	strh.w	r3, [r7, #256]	; 0x100
			sv_cs_setcondpotvalue(potvalue);
   90a5a:	f8b7 3100 	ldrh.w	r3, [r7, #256]	; 0x100
   90a5e:	4618      	mov	r0, r3
   90a60:	4b5d      	ldr	r3, [pc, #372]	; (90bd8 <cl_testharnesscommandhandler+0x938>)
   90a62:	4798      	blx	r3
		
		
		//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,10);
		//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cl_indata.Twobyte,2);
		//	cl_wait(20);
		cl_indata.word = 0;
   90a64:	2300      	movs	r3, #0
   90a66:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		//	sv_cs_readpotvalue(&cl_indata.Twobyte);
	}
	break;
   90a6a:	f002 b885 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
	case TEST_GET_SYSTEM_STATE:
	{
		
	
	Cl_Uint8Type system_status[10];
	 system_status[0] = Cl_Mac_StateDummy;
   90a6e:	4b5b      	ldr	r3, [pc, #364]	; (90bdc <cl_testharnesscommandhandler+0x93c>)
   90a70:	781b      	ldrb	r3, [r3, #0]
   90a72:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	 system_status[1] =  Rinsestatedummy;
   90a76:	4b5a      	ldr	r3, [pc, #360]	; (90be0 <cl_testharnesscommandhandler+0x940>)
   90a78:	781b      	ldrb	r3, [r3, #0]
   90a7a:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	 system_status[2] =  cl_dprep_prime_stateDummy;
   90a7e:	4b59      	ldr	r3, [pc, #356]	; (90be4 <cl_testharnesscommandhandler+0x944>)
   90a80:	781b      	ldrb	r3, [r3, #0]
   90a82:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	 system_status[3] =  cl_dprepstatedummy;
   90a86:	4b58      	ldr	r3, [pc, #352]	; (90be8 <cl_testharnesscommandhandler+0x948>)
   90a88:	781b      	ldrb	r3, [r3, #0]
   90a8a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	 system_status[4] =  cl_dlsis_state_dummy;
   90a8e:	4b57      	ldr	r3, [pc, #348]	; (90bec <cl_testharnesscommandhandler+0x94c>)
   90a90:	781b      	ldrb	r3, [r3, #0]
   90a92:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
	 system_status[5] =  Loopbackstatus;
   90a96:	4b56      	ldr	r3, [pc, #344]	; (90bf0 <cl_testharnesscommandhandler+0x950>)
   90a98:	781b      	ldrb	r3, [r3, #0]
   90a9a:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
	 system_status[6] =  Bypassstatus;
   90a9e:	4b55      	ldr	r3, [pc, #340]	; (90bf4 <cl_testharnesscommandhandler+0x954>)
   90aa0:	781b      	ldrb	r3, [r3, #0]
   90aa2:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
	 
	 cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SYSTEM_STATUS,system_status,7);
   90aa6:	f107 0354 	add.w	r3, r7, #84	; 0x54
   90aaa:	2047      	movs	r0, #71	; 0x47
   90aac:	4619      	mov	r1, r3
   90aae:	2207      	movs	r2, #7
   90ab0:	4b51      	ldr	r3, [pc, #324]	; (90bf8 <cl_testharnesscommandhandler+0x958>)
   90ab2:	4798      	blx	r3
   90ab4:	4603      	mov	r3, r0
   90ab6:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
	}
	
	break;
   90aba:	f002 b85d 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
	case TEST_GET_ALARM_TABLE:
	{
		
	
		Cl_Uint8Type temparray[4];
		Cl_Uint8Type cntr = 0, cntr_1 =0;
   90abe:	2300      	movs	r3, #0
   90ac0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
   90ac4:	2300      	movs	r3, #0
   90ac6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
	
		for ( cntr =0; cntr <  _ALARM_MAX_ID ; cntr++)
   90aca:	2300      	movs	r3, #0
   90acc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
   90ad0:	e050      	b.n	90b74 <cl_testharnesscommandhandler+0x8d4>
		{
				temparray[cntr_1++] = cntr;
   90ad2:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
   90ad6:	1c5a      	adds	r2, r3, #1
   90ad8:	f887 2116 	strb.w	r2, [r7, #278]	; 0x116
   90adc:	f507 7290 	add.w	r2, r7, #288	; 0x120
   90ae0:	4413      	add	r3, r2
   90ae2:	f897 2117 	ldrb.w	r2, [r7, #279]	; 0x117
   90ae6:	f803 2cd0 	strb.w	r2, [r3, #-208]
				temparray[cntr_1++] = Cl_alarms_alarms[cntr].cl_is_enabled;
   90aea:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
   90aee:	1c5a      	adds	r2, r3, #1
   90af0:	f887 2116 	strb.w	r2, [r7, #278]	; 0x116
   90af4:	4619      	mov	r1, r3
   90af6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
   90afa:	4a40      	ldr	r2, [pc, #256]	; (90bfc <cl_testharnesscommandhandler+0x95c>)
   90afc:	011b      	lsls	r3, r3, #4
   90afe:	4413      	add	r3, r2
   90b00:	3308      	adds	r3, #8
   90b02:	799b      	ldrb	r3, [r3, #6]
   90b04:	461a      	mov	r2, r3
   90b06:	f507 7390 	add.w	r3, r7, #288	; 0x120
   90b0a:	440b      	add	r3, r1
   90b0c:	f803 2cd0 	strb.w	r2, [r3, #-208]
				temparray[cntr_1++] = Cl_alarms_alarms[cntr].cl_is_raised;
   90b10:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
   90b14:	1c5a      	adds	r2, r3, #1
   90b16:	f887 2116 	strb.w	r2, [r7, #278]	; 0x116
   90b1a:	4619      	mov	r1, r3
   90b1c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
   90b20:	4a36      	ldr	r2, [pc, #216]	; (90bfc <cl_testharnesscommandhandler+0x95c>)
   90b22:	011b      	lsls	r3, r3, #4
   90b24:	4413      	add	r3, r2
   90b26:	3308      	adds	r3, #8
   90b28:	79db      	ldrb	r3, [r3, #7]
   90b2a:	461a      	mov	r2, r3
   90b2c:	f507 7390 	add.w	r3, r7, #288	; 0x120
   90b30:	440b      	add	r3, r1
   90b32:	f803 2cd0 	strb.w	r2, [r3, #-208]
				temparray[cntr_1] = Cl_alarms_alarms[cntr].cl_alarmstate;
   90b36:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
   90b3a:	f897 2117 	ldrb.w	r2, [r7, #279]	; 0x117
   90b3e:	492f      	ldr	r1, [pc, #188]	; (90bfc <cl_testharnesscommandhandler+0x95c>)
   90b40:	0112      	lsls	r2, r2, #4
   90b42:	440a      	add	r2, r1
   90b44:	7892      	ldrb	r2, [r2, #2]
   90b46:	f507 7190 	add.w	r1, r7, #288	; 0x120
   90b4a:	440b      	add	r3, r1
   90b4c:	f803 2cd0 	strb.w	r2, [r3, #-208]
			
				cntr_1 = 0;
   90b50:	2300      	movs	r3, #0
   90b52:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
				cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_ALARM_STATUS,temparray,4);
   90b56:	f107 0350 	add.w	r3, r7, #80	; 0x50
   90b5a:	2048      	movs	r0, #72	; 0x48
   90b5c:	4619      	mov	r1, r3
   90b5e:	2204      	movs	r2, #4
   90b60:	4b25      	ldr	r3, [pc, #148]	; (90bf8 <cl_testharnesscommandhandler+0x958>)
   90b62:	4798      	blx	r3
   90b64:	4603      	mov	r3, r0
   90b66:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		
	
		Cl_Uint8Type temparray[4];
		Cl_Uint8Type cntr = 0, cntr_1 =0;
	
		for ( cntr =0; cntr <  _ALARM_MAX_ID ; cntr++)
   90b6a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
   90b6e:	3301      	adds	r3, #1
   90b70:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
   90b74:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
   90b78:	2b3e      	cmp	r3, #62	; 0x3e
   90b7a:	d9aa      	bls.n	90ad2 <cl_testharnesscommandhandler+0x832>
		
		}
			
	}
	
	break;
   90b7c:	f001 bffc 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
	
	break;
	
	
		case TEST_SET_FLOW_PUMPRATE ://23 0x17
		cl_wait(100);
   90b80:	2064      	movs	r0, #100	; 0x64
   90b82:	4b08      	ldr	r3, [pc, #32]	; (90ba4 <cl_testharnesscommandhandler+0x904>)
   90b84:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"FP_RATE";
   90b86:	4b1e      	ldr	r3, [pc, #120]	; (90c00 <cl_testharnesscommandhandler+0x960>)
   90b88:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		if(TestMsg.datasize == 2)
   90b8c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   90b90:	2b02      	cmp	r3, #2
   90b92:	d137      	bne.n	90c04 <cl_testharnesscommandhandler+0x964>
		{
			//rateval = TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[1];
   90b94:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   90b98:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   90b9c:	e03e      	b.n	90c1c <cl_testharnesscommandhandler+0x97c>
   90b9e:	bf00      	nop
   90ba0:	20072224 	.word	0x20072224
   90ba4:	00093195 	.word	0x00093195
   90ba8:	000a88f8 	.word	0x000a88f8
   90bac:	000894d9 	.word	0x000894d9
   90bb0:	000a8900 	.word	0x000a8900
   90bb4:	00099cb9 	.word	0x00099cb9
   90bb8:	000a8908 	.word	0x000a8908
   90bbc:	00099c2d 	.word	0x00099c2d
   90bc0:	00099c69 	.word	0x00099c69
   90bc4:	000a8910 	.word	0x000a8910
   90bc8:	20071a73 	.word	0x20071a73
   90bcc:	000a8918 	.word	0x000a8918
   90bd0:	68db8bad 	.word	0x68db8bad
   90bd4:	0009a175 	.word	0x0009a175
   90bd8:	0009a195 	.word	0x0009a195
   90bdc:	200725bf 	.word	0x200725bf
   90be0:	200725be 	.word	0x200725be
   90be4:	20072654 	.word	0x20072654
   90be8:	20072657 	.word	0x20072657
   90bec:	20072656 	.word	0x20072656
   90bf0:	200725bd 	.word	0x200725bd
   90bf4:	20072655 	.word	0x20072655
   90bf8:	0009ba51 	.word	0x0009ba51
   90bfc:	20071d0c 	.word	0x20071d0c
   90c00:	000a8924 	.word	0x000a8924
		}
		else if(TestMsg.datasize == 3)
   90c04:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   90c08:	2b03      	cmp	r3, #3
   90c0a:	d107      	bne.n	90c1c <cl_testharnesscommandhandler+0x97c>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[1] = TestMsg.data.byte[1];
   90c0c:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   90c10:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
			cl_indata.bytearray[0] = TestMsg.data.byte[2];
   90c14:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   90c18:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
			
		}
		
		cl_thretval = sv_cntrl_setpumpspeed(DCMOTOR1,cl_indata.word);
   90c1c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   90c20:	2001      	movs	r0, #1
   90c22:	4619      	mov	r1, r3
   90c24:	4bb6      	ldr	r3, [pc, #728]	; (90f00 <cl_testharnesscommandhandler+0xc60>)
   90c26:	4798      	blx	r3
   90c28:	4603      	mov	r3, r0
   90c2a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,7);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cl_indata.word,TestMsg.datasize-1);
		cl_wait(100);
   90c2e:	2064      	movs	r0, #100	; 0x64
   90c30:	4bb4      	ldr	r3, [pc, #720]	; (90f04 <cl_testharnesscommandhandler+0xc64>)
   90c32:	4798      	blx	r3
		break;
   90c34:	f001 bfa0 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_FLOW_PUMP_FREQ:
		cl_wait(100);
   90c38:	2064      	movs	r0, #100	; 0x64
   90c3a:	4bb2      	ldr	r3, [pc, #712]	; (90f04 <cl_testharnesscommandhandler+0xc64>)
   90c3c:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"FP_FRQ";
   90c3e:	4bb2      	ldr	r3, [pc, #712]	; (90f08 <cl_testharnesscommandhandler+0xc68>)
   90c40:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		if(TestMsg.datasize == 2)
   90c44:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   90c48:	2b02      	cmp	r3, #2
   90c4a:	d104      	bne.n	90c56 <cl_testharnesscommandhandler+0x9b6>
		{
			//rateval = TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[1];
   90c4c:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   90c50:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   90c54:	e00b      	b.n	90c6e <cl_testharnesscommandhandler+0x9ce>
		}
		else if(TestMsg.datasize == 3)
   90c56:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   90c5a:	2b03      	cmp	r3, #3
   90c5c:	d107      	bne.n	90c6e <cl_testharnesscommandhandler+0x9ce>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[1] = TestMsg.data.byte[1];
   90c5e:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   90c62:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
			cl_indata.bytearray[0] = TestMsg.data.byte[2];
   90c66:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   90c6a:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
			
		}
		
		//cl_thretval = sv_cntrl_setpumpspeed(DCMOTOR2,cl_indata.word);
		sv_cntrl_setpumpfreq(DCMOTOR1 , cl_indata.word);
   90c6e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   90c72:	2001      	movs	r0, #1
   90c74:	4619      	mov	r1, r3
   90c76:	4ba5      	ldr	r3, [pc, #660]	; (90f0c <cl_testharnesscommandhandler+0xc6c>)
   90c78:	4798      	blx	r3
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   90c7a:	2064      	movs	r0, #100	; 0x64
   90c7c:	4ba1      	ldr	r3, [pc, #644]	; (90f04 <cl_testharnesscommandhandler+0xc64>)
   90c7e:	4798      	blx	r3
		break;
   90c80:	f001 bf7a 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_DEGAS_PUMPON://24 0x18
		cl_wait(100);
   90c84:	2064      	movs	r0, #100	; 0x64
   90c86:	4b9f      	ldr	r3, [pc, #636]	; (90f04 <cl_testharnesscommandhandler+0xc64>)
   90c88:	4798      	blx	r3
		cl_thretval =  sv_cntrl_activatepump(DCMOTOR2);
   90c8a:	2002      	movs	r0, #2
   90c8c:	4ba0      	ldr	r3, [pc, #640]	; (90f10 <cl_testharnesscommandhandler+0xc70>)
   90c8e:	4798      	blx	r3
   90c90:	4603      	mov	r3, r0
   90c92:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
			
		//cl_thretval =  sv_cntrl_deactivatepump(DCMOTOR2);
		pdataarray = (Cl_Uint8Type *)"DGP_ON";
   90c96:	4b9f      	ldr	r3, [pc, #636]	; (90f14 <cl_testharnesscommandhandler+0xc74>)
   90c98:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   90c9c:	2064      	movs	r0, #100	; 0x64
   90c9e:	4b99      	ldr	r3, [pc, #612]	; (90f04 <cl_testharnesscommandhandler+0xc64>)
   90ca0:	4798      	blx	r3
		break;
   90ca2:	f001 bf69 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_DEGAS_PUMPOFF://25 0x19
		cl_wait(100);
   90ca6:	2064      	movs	r0, #100	; 0x64
   90ca8:	4b96      	ldr	r3, [pc, #600]	; (90f04 <cl_testharnesscommandhandler+0xc64>)
   90caa:	4798      	blx	r3
		cl_thretval =  sv_cntrl_deactivatepump(DCMOTOR2);
   90cac:	2002      	movs	r0, #2
   90cae:	4b9a      	ldr	r3, [pc, #616]	; (90f18 <cl_testharnesscommandhandler+0xc78>)
   90cb0:	4798      	blx	r3
   90cb2:	4603      	mov	r3, r0
   90cb4:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
	//	cl_thretval = sv_cntrl_setpumpspeed(DCMOTOR2,900);
		pdataarray = (Cl_Uint8Type *)"DGP_OFF";
   90cb8:	4b98      	ldr	r3, [pc, #608]	; (90f1c <cl_testharnesscommandhandler+0xc7c>)
   90cba:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
//		cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,7);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   90cbe:	2064      	movs	r0, #100	; 0x64
   90cc0:	4b90      	ldr	r3, [pc, #576]	; (90f04 <cl_testharnesscommandhandler+0xc64>)
   90cc2:	4798      	blx	r3
		break;
   90cc4:	f001 bf58 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_DEGAS_PUMPRATE://26 0x1A
		cl_wait(100);
   90cc8:	2064      	movs	r0, #100	; 0x64
   90cca:	4b8e      	ldr	r3, [pc, #568]	; (90f04 <cl_testharnesscommandhandler+0xc64>)
   90ccc:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"DGP_RATE";
   90cce:	4b94      	ldr	r3, [pc, #592]	; (90f20 <cl_testharnesscommandhandler+0xc80>)
   90cd0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		if(TestMsg.datasize == 2)
   90cd4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   90cd8:	2b02      	cmp	r3, #2
   90cda:	d104      	bne.n	90ce6 <cl_testharnesscommandhandler+0xa46>
		{
			//rateval = TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[1];
   90cdc:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   90ce0:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   90ce4:	e00b      	b.n	90cfe <cl_testharnesscommandhandler+0xa5e>
		}
		else if(TestMsg.datasize == 3)
   90ce6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   90cea:	2b03      	cmp	r3, #3
   90cec:	d107      	bne.n	90cfe <cl_testharnesscommandhandler+0xa5e>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[1] = TestMsg.data.byte[1];
   90cee:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   90cf2:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
			cl_indata.bytearray[0] = TestMsg.data.byte[2];
   90cf6:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   90cfa:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
			
		}
		
		cl_thretval = sv_cntrl_setpumpspeed(DCMOTOR2,cl_indata.word);
   90cfe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   90d02:	2002      	movs	r0, #2
   90d04:	4619      	mov	r1, r3
   90d06:	4b7e      	ldr	r3, [pc, #504]	; (90f00 <cl_testharnesscommandhandler+0xc60>)
   90d08:	4798      	blx	r3
   90d0a:	4603      	mov	r3, r0
   90d0c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,8);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cl_indata.word,TestMsg.datasize-1);
		cl_wait(100);
   90d10:	2064      	movs	r0, #100	; 0x64
   90d12:	4b7c      	ldr	r3, [pc, #496]	; (90f04 <cl_testharnesscommandhandler+0xc64>)
   90d14:	4798      	blx	r3
		break;
   90d16:	f001 bf2f 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_DG_PUMP_FREQ:
		cl_wait(100);
   90d1a:	2064      	movs	r0, #100	; 0x64
   90d1c:	4b79      	ldr	r3, [pc, #484]	; (90f04 <cl_testharnesscommandhandler+0xc64>)
   90d1e:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"DGP_FRQ";
   90d20:	4b80      	ldr	r3, [pc, #512]	; (90f24 <cl_testharnesscommandhandler+0xc84>)
   90d22:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		if(TestMsg.datasize == 2)
   90d26:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   90d2a:	2b02      	cmp	r3, #2
   90d2c:	d104      	bne.n	90d38 <cl_testharnesscommandhandler+0xa98>
		{
			//rateval = TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[1];
   90d2e:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   90d32:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   90d36:	e00b      	b.n	90d50 <cl_testharnesscommandhandler+0xab0>
		}
		else if(TestMsg.datasize == 3)
   90d38:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   90d3c:	2b03      	cmp	r3, #3
   90d3e:	d107      	bne.n	90d50 <cl_testharnesscommandhandler+0xab0>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[1] = TestMsg.data.byte[1];
   90d40:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   90d44:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
			cl_indata.bytearray[0] = TestMsg.data.byte[2];
   90d48:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   90d4c:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
			
		}
		
		//cl_thretval = sv_cntrl_setpumpspeed(DCMOTOR2,cl_indata.word);
		 sv_cntrl_setpumpfreq(DCMOTOR2 , cl_indata.word);
   90d50:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   90d54:	2002      	movs	r0, #2
   90d56:	4619      	mov	r1, r3
   90d58:	4b6c      	ldr	r3, [pc, #432]	; (90f0c <cl_testharnesscommandhandler+0xc6c>)
   90d5a:	4798      	blx	r3
	///	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,8);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   90d5c:	2064      	movs	r0, #100	; 0x64
   90d5e:	4b69      	ldr	r3, [pc, #420]	; (90f04 <cl_testharnesscommandhandler+0xc64>)
   90d60:	4798      	blx	r3
		break;
   90d62:	f001 bf09 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
		
		case 	TEST_SET_BC_PS_THRESHOLD:
		if(TestMsg.datasize == 2)
   90d66:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   90d6a:	2b02      	cmp	r3, #2
   90d6c:	d104      	bne.n	90d78 <cl_testharnesscommandhandler+0xad8>
		{
			//rateval = TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[1];
   90d6e:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   90d72:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   90d76:	e00b      	b.n	90d90 <cl_testharnesscommandhandler+0xaf0>
		}
		else if(TestMsg.datasize == 3)
   90d78:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   90d7c:	2b03      	cmp	r3, #3
   90d7e:	d107      	bne.n	90d90 <cl_testharnesscommandhandler+0xaf0>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[1] = TestMsg.data.byte[1];
   90d80:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   90d84:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
			cl_indata.bytearray[0] = TestMsg.data.byte[2];
   90d88:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   90d8c:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
			
		}
			ps3_threshold = cl_indata.word *  1.8432;
   90d90:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
   90d94:	4b64      	ldr	r3, [pc, #400]	; (90f28 <cl_testharnesscommandhandler+0xc88>)
   90d96:	4610      	mov	r0, r2
   90d98:	4798      	blx	r3
   90d9a:	4602      	mov	r2, r0
   90d9c:	460b      	mov	r3, r1
   90d9e:	4c63      	ldr	r4, [pc, #396]	; (90f2c <cl_testharnesscommandhandler+0xc8c>)
   90da0:	4610      	mov	r0, r2
   90da2:	4619      	mov	r1, r3
   90da4:	a354      	add	r3, pc, #336	; (adr r3, 90ef8 <cl_testharnesscommandhandler+0xc58>)
   90da6:	e9d3 2300 	ldrd	r2, r3, [r3]
   90daa:	47a0      	blx	r4
   90dac:	4602      	mov	r2, r0
   90dae:	460b      	mov	r3, r1
   90db0:	4610      	mov	r0, r2
   90db2:	4619      	mov	r1, r3
   90db4:	4b5e      	ldr	r3, [pc, #376]	; (90f30 <cl_testharnesscommandhandler+0xc90>)
   90db6:	4798      	blx	r3
   90db8:	4603      	mov	r3, r0
   90dba:	b29a      	uxth	r2, r3
   90dbc:	4b5d      	ldr	r3, [pc, #372]	; (90f34 <cl_testharnesscommandhandler+0xc94>)
   90dbe:	801a      	strh	r2, [r3, #0]
			pdataarray = (Cl_Uint8Type*) "PS_T";
   90dc0:	4b5d      	ldr	r3, [pc, #372]	; (90f38 <cl_testharnesscommandhandler+0xc98>)
   90dc2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			

			
		
		
		break;
   90dc6:	f001 bed7 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_UF_PUMPON://27 0x1B
		cl_wait(100);
   90dca:	2064      	movs	r0, #100	; 0x64
   90dcc:	4b4d      	ldr	r3, [pc, #308]	; (90f04 <cl_testharnesscommandhandler+0xc64>)
   90dce:	4798      	blx	r3
//		cl_thretval =  sv_cntrl_activatepump(UFPUMP);
//		sv_cntrl_setpumpspeed(UFPUMP,10000);
				cl_uf_controller(CL_UF_EVENT_START,0);
   90dd0:	2002      	movs	r0, #2
   90dd2:	2100      	movs	r1, #0
   90dd4:	4b59      	ldr	r3, [pc, #356]	; (90f3c <cl_testharnesscommandhandler+0xc9c>)
   90dd6:	4798      	blx	r3
				cl_ufpumpFeedback_start();
   90dd8:	4b59      	ldr	r3, [pc, #356]	; (90f40 <cl_testharnesscommandhandler+0xca0>)
   90dda:	4798      	blx	r3
				cl_wait(100);
   90ddc:	2064      	movs	r0, #100	; 0x64
   90dde:	4b49      	ldr	r3, [pc, #292]	; (90f04 <cl_testharnesscommandhandler+0xc64>)
   90de0:	4798      	blx	r3
				cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,2000);
   90de2:	2001      	movs	r0, #1
   90de4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   90de8:	4b54      	ldr	r3, [pc, #336]	; (90f3c <cl_testharnesscommandhandler+0xc9c>)
   90dea:	4798      	blx	r3
				cl_wait(100);
   90dec:	2064      	movs	r0, #100	; 0x64
   90dee:	4b45      	ldr	r3, [pc, #276]	; (90f04 <cl_testharnesscommandhandler+0xc64>)
   90df0:	4798      	blx	r3
				cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,1000);
   90df2:	2001      	movs	r0, #1
   90df4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   90df8:	4b50      	ldr	r3, [pc, #320]	; (90f3c <cl_testharnesscommandhandler+0xc9c>)
   90dfa:	4798      	blx	r3
				cl_wait(100);
   90dfc:	2064      	movs	r0, #100	; 0x64
   90dfe:	4b41      	ldr	r3, [pc, #260]	; (90f04 <cl_testharnesscommandhandler+0xc64>)
   90e00:	4798      	blx	r3
				cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,150);
   90e02:	2001      	movs	r0, #1
   90e04:	2196      	movs	r1, #150	; 0x96
   90e06:	4b4d      	ldr	r3, [pc, #308]	; (90f3c <cl_testharnesscommandhandler+0xc9c>)
   90e08:	4798      	blx	r3
				
		break;
   90e0a:	f001 beb5 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
		break;
		case TEST_SET_UF_PUMPOFF://28 0x1C
		cl_wait(100);
   90e0e:	2064      	movs	r0, #100	; 0x64
   90e10:	4b3c      	ldr	r3, [pc, #240]	; (90f04 <cl_testharnesscommandhandler+0xc64>)
   90e12:	4798      	blx	r3
		
		cl_thretval =  sv_cntrl_deactivatepump(UFPUMP);
   90e14:	2004      	movs	r0, #4
   90e16:	4b40      	ldr	r3, [pc, #256]	; (90f18 <cl_testharnesscommandhandler+0xc78>)
   90e18:	4798      	blx	r3
   90e1a:	4603      	mov	r3, r0
   90e1c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		pdataarray = (Cl_Uint8Type *)"UFP_OFF";
   90e20:	4b48      	ldr	r3, [pc, #288]	; (90f44 <cl_testharnesscommandhandler+0xca4>)
   90e22:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,7);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   90e26:	2064      	movs	r0, #100	; 0x64
   90e28:	4b36      	ldr	r3, [pc, #216]	; (90f04 <cl_testharnesscommandhandler+0xc64>)
   90e2a:	4798      	blx	r3
		break;
   90e2c:	f001 bea4 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_UF_PUMPRATE://29 0x1D
		cl_wait(100);
   90e30:	2064      	movs	r0, #100	; 0x64
   90e32:	4b34      	ldr	r3, [pc, #208]	; (90f04 <cl_testharnesscommandhandler+0xc64>)
   90e34:	4798      	blx	r3
		if(TestMsg.datasize == 2)
   90e36:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   90e3a:	2b02      	cmp	r3, #2
   90e3c:	d104      	bne.n	90e48 <cl_testharnesscommandhandler+0xba8>
		{
			//rateval = TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[1];
   90e3e:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   90e42:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   90e46:	e00b      	b.n	90e60 <cl_testharnesscommandhandler+0xbc0>
		}
		else if(TestMsg.datasize == 3)
   90e48:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   90e4c:	2b03      	cmp	r3, #3
   90e4e:	d107      	bne.n	90e60 <cl_testharnesscommandhandler+0xbc0>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[1] = TestMsg.data.byte[1];
   90e50:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   90e54:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
			cl_indata.bytearray[0] = TestMsg.data.byte[2];
   90e58:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   90e5c:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
			
		}
		
		sv_cntrl_setpumpspeed(UFPUMP,cl_indata.word);
   90e60:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   90e64:	2004      	movs	r0, #4
   90e66:	4619      	mov	r1, r3
   90e68:	4b25      	ldr	r3, [pc, #148]	; (90f00 <cl_testharnesscommandhandler+0xc60>)
   90e6a:	4798      	blx	r3
		uf_rotation_counter = 0;
   90e6c:	4b36      	ldr	r3, [pc, #216]	; (90f48 <cl_testharnesscommandhandler+0xca8>)
   90e6e:	2200      	movs	r2, #0
   90e70:	801a      	strh	r2, [r3, #0]
		pdataarray = (Cl_Uint8Type *)"UFP_RATE";
   90e72:	4b36      	ldr	r3, [pc, #216]	; (90f4c <cl_testharnesscommandhandler+0xcac>)
   90e74:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,8);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   90e78:	2064      	movs	r0, #100	; 0x64
   90e7a:	4b22      	ldr	r3, [pc, #136]	; (90f04 <cl_testharnesscommandhandler+0xc64>)
   90e7c:	4798      	blx	r3
		break;
   90e7e:	f001 be7b 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
				
		case TEST_SET_VCLAMP_ON://32 0x20
		cl_wait(100);
   90e82:	2064      	movs	r0, #100	; 0x64
   90e84:	4b1f      	ldr	r3, [pc, #124]	; (90f04 <cl_testharnesscommandhandler+0xc64>)
   90e86:	4798      	blx	r3
		sv_cntrl_activatevenousclamp();
   90e88:	4b31      	ldr	r3, [pc, #196]	; (90f50 <cl_testharnesscommandhandler+0xcb0>)
   90e8a:	4798      	blx	r3
					//sv_cntrl_deactivate_valve(VALVE_ID4);
					//cl_wait(50);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,5);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
	//flag_hotrinse_1 = 1;
		cl_wait(100);
   90e8c:	2064      	movs	r0, #100	; 0x64
   90e8e:	4b1d      	ldr	r3, [pc, #116]	; (90f04 <cl_testharnesscommandhandler+0xc64>)
   90e90:	4798      	blx	r3
		break;
   90e92:	f001 be71 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>

				
		case TEST_SET_VLA_PUMP_PUMPON://81 0x51
		cl_wait(100);
   90e96:	2064      	movs	r0, #100	; 0x64
   90e98:	4b1a      	ldr	r3, [pc, #104]	; (90f04 <cl_testharnesscommandhandler+0xc64>)
   90e9a:	4798      	blx	r3
				
		cl_thretval =  sv_cntrl_activatepump(VLA_PUMP);
   90e9c:	2006      	movs	r0, #6
   90e9e:	4b1c      	ldr	r3, [pc, #112]	; (90f10 <cl_testharnesscommandhandler+0xc70>)
   90ea0:	4798      	blx	r3
   90ea2:	4603      	mov	r3, r0
   90ea4:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
				
		pdataarray = (Cl_Uint8Type *)"VLA_PUMP_ON";
   90ea8:	4b2a      	ldr	r3, [pc, #168]	; (90f54 <cl_testharnesscommandhandler+0xcb4>)
   90eaa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
				
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,10);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   90eae:	2064      	movs	r0, #100	; 0x64
   90eb0:	4b14      	ldr	r3, [pc, #80]	; (90f04 <cl_testharnesscommandhandler+0xc64>)
   90eb2:	4798      	blx	r3
		break;
   90eb4:	f001 be60 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_VLA_PUMP_PUMPOFF://82 0x52
		cl_wait(100);
   90eb8:	2064      	movs	r0, #100	; 0x64
   90eba:	4b12      	ldr	r3, [pc, #72]	; (90f04 <cl_testharnesscommandhandler+0xc64>)
   90ebc:	4798      	blx	r3
				
		cl_thretval =  sv_cntrl_deactivatepump(VLA_PUMP);
   90ebe:	2006      	movs	r0, #6
   90ec0:	4b15      	ldr	r3, [pc, #84]	; (90f18 <cl_testharnesscommandhandler+0xc78>)
   90ec2:	4798      	blx	r3
   90ec4:	4603      	mov	r3, r0
   90ec6:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
				
		pdataarray = pdataarray = (Cl_Uint8Type *)"VLA_PUMP_OFF";
   90eca:	4b23      	ldr	r3, [pc, #140]	; (90f58 <cl_testharnesscommandhandler+0xcb8>)
   90ecc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
				
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,11);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   90ed0:	2064      	movs	r0, #100	; 0x64
   90ed2:	4b0c      	ldr	r3, [pc, #48]	; (90f04 <cl_testharnesscommandhandler+0xc64>)
   90ed4:	4798      	blx	r3
		break;
   90ed6:	f001 be4f 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
				
		case TEST_SET_BLOOD_PUMPON://33 0x21
		cl_wait(100);
   90eda:	2064      	movs	r0, #100	; 0x64
   90edc:	4b09      	ldr	r3, [pc, #36]	; (90f04 <cl_testharnesscommandhandler+0xc64>)
   90ede:	4798      	blx	r3
				

				
		//pdataarray = (Cl_Uint8Type *)"BP_ON";
		Cl_Uint16Type temp_10;
		Cl_Uint16Type potvalue1,read_data = 0;
   90ee0:	2300      	movs	r3, #0
   90ee2:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
		{
		// cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSER_PRIME_STARTED,0,0);
	//	for ( temp_10 = 0 ; temp_10 < 5000; temp_10++)
		{
		//	cl_wait(1);
		cl_thretval =  sv_cntrl_activatepump(BLOODPUMP);
   90ee6:	2003      	movs	r0, #3
   90ee8:	4b09      	ldr	r3, [pc, #36]	; (90f10 <cl_testharnesscommandhandler+0xc70>)
   90eea:	4798      	blx	r3
   90eec:	4603      	mov	r3, r0
   90eee:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
	//	if(!(temp_10 % 50 ))
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_10,2);
	//	cl_wait(1);
		}
		
		break;		
   90ef2:	f001 be41 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
   90ef6:	bf00      	nop
   90ef8:	487fcb92 	.word	0x487fcb92
   90efc:	3ffd7dbf 	.word	0x3ffd7dbf
   90f00:	00099d45 	.word	0x00099d45
   90f04:	00093195 	.word	0x00093195
   90f08:	000a892c 	.word	0x000a892c
   90f0c:	00099f01 	.word	0x00099f01
   90f10:	00099c2d 	.word	0x00099c2d
   90f14:	000a8934 	.word	0x000a8934
   90f18:	00099c69 	.word	0x00099c69
   90f1c:	000a893c 	.word	0x000a893c
   90f20:	000a8944 	.word	0x000a8944
   90f24:	000a8950 	.word	0x000a8950
   90f28:	000a5fed 	.word	0x000a5fed
   90f2c:	000a60d9 	.word	0x000a60d9
   90f30:	000a660d 	.word	0x000a660d
   90f34:	2007010a 	.word	0x2007010a
   90f38:	000a8958 	.word	0x000a8958
   90f3c:	00095df5 	.word	0x00095df5
   90f40:	00095da5 	.word	0x00095da5
   90f44:	000a8960 	.word	0x000a8960
   90f48:	20071a74 	.word	0x20071a74
   90f4c:	000a8968 	.word	0x000a8968
   90f50:	00099e19 	.word	0x00099e19
   90f54:	000a8974 	.word	0x000a8974
   90f58:	000a8980 	.word	0x000a8980

		case TEST_SET_BLOOD_PUMPOFF://34 0x22
		cl_wait(100);
   90f5c:	2064      	movs	r0, #100	; 0x64
   90f5e:	4bb1      	ldr	r3, [pc, #708]	; (91224 <cl_testharnesscommandhandler+0xf84>)
   90f60:	4798      	blx	r3
		Cl_Uint8Type data =0;
   90f62:	2300      	movs	r3, #0
   90f64:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
		cl_thretval =  sv_cntrl_deactivatepump(BLOODPUMP);
   90f68:	2003      	movs	r0, #3
   90f6a:	4baf      	ldr	r3, [pc, #700]	; (91228 <cl_testharnesscommandhandler+0xf88>)
   90f6c:	4798      	blx	r3
   90f6e:	4603      	mov	r3, r0
   90f70:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALISYS_PRIME_COMPLETED,&data,0);
	//	pdataarray = (Cl_Uint8Type *)"BP_OFF";
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   90f74:	2064      	movs	r0, #100	; 0x64
   90f76:	4bab      	ldr	r3, [pc, #684]	; (91224 <cl_testharnesscommandhandler+0xf84>)
   90f78:	4798      	blx	r3
		break;
   90f7a:	f001 bdfd 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_BLOOD_PUMPSRATE://35 0x23
		cl_wait(100);
   90f7e:	2064      	movs	r0, #100	; 0x64
   90f80:	4ba8      	ldr	r3, [pc, #672]	; (91224 <cl_testharnesscommandhandler+0xf84>)
   90f82:	4798      	blx	r3
				if(TestMsg.datasize == 2)
   90f84:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   90f88:	2b02      	cmp	r3, #2
   90f8a:	d104      	bne.n	90f96 <cl_testharnesscommandhandler+0xcf6>
		{
			//rateval = TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[1];
   90f8c:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   90f90:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   90f94:	e00b      	b.n	90fae <cl_testharnesscommandhandler+0xd0e>
		}
		else if(TestMsg.datasize == 3)
   90f96:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   90f9a:	2b03      	cmp	r3, #3
   90f9c:	d107      	bne.n	90fae <cl_testharnesscommandhandler+0xd0e>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[1] = TestMsg.data.byte[1];
   90f9e:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   90fa2:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
			cl_indata.bytearray[0] = TestMsg.data.byte[2];
   90fa6:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   90faa:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
			
		}
		Treatdata[ID_bloodratetreat] = cl_indata.word;
   90fae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   90fb2:	4a9e      	ldr	r2, [pc, #632]	; (9122c <cl_testharnesscommandhandler+0xf8c>)
   90fb4:	65d3      	str	r3, [r2, #92]	; 0x5c
		sv_cntrl_setpumpspeed(BLOODPUMP,cl_indata.word);
   90fb6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   90fba:	2003      	movs	r0, #3
   90fbc:	4619      	mov	r1, r3
   90fbe:	4b9c      	ldr	r3, [pc, #624]	; (91230 <cl_testharnesscommandhandler+0xf90>)
   90fc0:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"BP_RATE";
   90fc2:	4b9c      	ldr	r3, [pc, #624]	; (91234 <cl_testharnesscommandhandler+0xf94>)
   90fc4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,7);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   90fc8:	2064      	movs	r0, #100	; 0x64
   90fca:	4b96      	ldr	r3, [pc, #600]	; (91224 <cl_testharnesscommandhandler+0xf84>)
   90fcc:	4798      	blx	r3
		break;
   90fce:	f001 bdd3 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
		
		case TEST_SET_PIC_COUNT:
				cl_wait(100);
   90fd2:	2064      	movs	r0, #100	; 0x64
   90fd4:	4b93      	ldr	r3, [pc, #588]	; (91224 <cl_testharnesscommandhandler+0xf84>)
   90fd6:	4798      	blx	r3
		if(TestMsg.datasize == 2)
   90fd8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   90fdc:	2b02      	cmp	r3, #2
   90fde:	d104      	bne.n	90fea <cl_testharnesscommandhandler+0xd4a>
		{
			//rateval = TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[1];
   90fe0:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   90fe4:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   90fe8:	e00d      	b.n	91006 <cl_testharnesscommandhandler+0xd66>
		}
		else if(TestMsg.datasize == 3)
   90fea:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   90fee:	2b03      	cmp	r3, #3
   90ff0:	d109      	bne.n	91006 <cl_testharnesscommandhandler+0xd66>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[1] = TestMsg.data.byte[1];
   90ff2:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   90ff6:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
			cl_indata.bytearray[0] = TestMsg.data.byte[2];
   90ffa:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   90ffe:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0

			   //DD_IIC_SET_BLOODPUP( 0x0E,  &bloodpumpspeed , 0x03);

	
	
		break;
   91002:	f001 bdb9 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
   91006:	f001 bdb7 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_PIC_CURRENT:
			cl_wait(100);
   9100a:	2064      	movs	r0, #100	; 0x64
   9100c:	4b85      	ldr	r3, [pc, #532]	; (91224 <cl_testharnesscommandhandler+0xf84>)
   9100e:	4798      	blx	r3
		if(TestMsg.datasize == 2)
   91010:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   91014:	2b02      	cmp	r3, #2
   91016:	d104      	bne.n	91022 <cl_testharnesscommandhandler+0xd82>
		{
			//rateval = TestMsg.data[1];
			cl_indata.bytearray[0] = TestMsg.data.byte[1];
   91018:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   9101c:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   91020:	e00d      	b.n	9103e <cl_testharnesscommandhandler+0xd9e>
		}
		else if(TestMsg.datasize == 3)
   91022:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   91026:	2b03      	cmp	r3, #3
   91028:	d109      	bne.n	9103e <cl_testharnesscommandhandler+0xd9e>
		{
			//rateval = (uint16_t)TestMsg.data[1];
			cl_indata.bytearray[1] = TestMsg.data.byte[1];
   9102a:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   9102e:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
			cl_indata.bytearray[0] = TestMsg.data.byte[2];
   91032:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   91036:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
		



		//	   DD_IIC_SET_BLOODPUP( 0x0E,  &bloodpumpspeed1 , 0x03);
		break;
   9103a:	f001 bd9d 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
   9103e:	f001 bd9b 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>


			//	DD_IIC_SET_BLOODPUP( 0x0E,  &cpu2command , 0x01);
		break;
		case TEST_SET_VCLAMP_OFF://36 0x24
		cl_wait(100);
   91042:	2064      	movs	r0, #100	; 0x64
   91044:	4b77      	ldr	r3, [pc, #476]	; (91224 <cl_testharnesscommandhandler+0xf84>)
   91046:	4798      	blx	r3
		sv_cntrl_deactivatevenousclamp();
   91048:	4b7b      	ldr	r3, [pc, #492]	; (91238 <cl_testharnesscommandhandler+0xf98>)
   9104a:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"VC_OFF";
   9104c:	4b7b      	ldr	r3, [pc, #492]	; (9123c <cl_testharnesscommandhandler+0xf9c>)
   9104e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			//		cl_wait(50);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		//flag_hotrinse = 1;
		//cl_wait(100);
		break;
   91052:	f001 bd91 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_WATERINLET_ON://35 0x23
		cl_wait(100);
   91056:	2064      	movs	r0, #100	; 0x64
   91058:	4b72      	ldr	r3, [pc, #456]	; (91224 <cl_testharnesscommandhandler+0xf84>)
   9105a:	4798      	blx	r3
		sv_cntrl_setHepa_dir();
   9105c:	4b78      	ldr	r3, [pc, #480]	; (91240 <cl_testharnesscommandhandler+0xfa0>)
   9105e:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"WI_ON";
   91060:	4b78      	ldr	r3, [pc, #480]	; (91244 <cl_testharnesscommandhandler+0xfa4>)
   91062:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,5);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   91066:	2064      	movs	r0, #100	; 0x64
   91068:	4b6e      	ldr	r3, [pc, #440]	; (91224 <cl_testharnesscommandhandler+0xf84>)
   9106a:	4798      	blx	r3
		break;
   9106c:	f001 bd84 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_WATERINLET_OFF://36 0x24
		cl_wait(100);
   91070:	2064      	movs	r0, #100	; 0x64
   91072:	4b6c      	ldr	r3, [pc, #432]	; (91224 <cl_testharnesscommandhandler+0xf84>)
   91074:	4798      	blx	r3
		sv_cntrl_resetHepa_dir();
   91076:	4b74      	ldr	r3, [pc, #464]	; (91248 <cl_testharnesscommandhandler+0xfa8>)
   91078:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"WI_OFF";
   9107a:	4b74      	ldr	r3, [pc, #464]	; (9124c <cl_testharnesscommandhandler+0xfac>)
   9107c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   91080:	2064      	movs	r0, #100	; 0x64
   91082:	4b68      	ldr	r3, [pc, #416]	; (91224 <cl_testharnesscommandhandler+0xf84>)
   91084:	4798      	blx	r3
		break;
   91086:	f001 bd77 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_DRAIN_ON://39 0x27
		cl_wait(100);
   9108a:	2064      	movs	r0, #100	; 0x64
   9108c:	4b65      	ldr	r3, [pc, #404]	; (91224 <cl_testharnesscommandhandler+0xf84>)
   9108e:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"DRAIN_ON";
   91090:	4b6f      	ldr	r3, [pc, #444]	; (91250 <cl_testharnesscommandhandler+0xfb0>)
   91092:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,8);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   91096:	2064      	movs	r0, #100	; 0x64
   91098:	4b62      	ldr	r3, [pc, #392]	; (91224 <cl_testharnesscommandhandler+0xf84>)
   9109a:	4798      	blx	r3
		break;
   9109c:	f001 bd6c 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_DRAIN_OFF://40 0x28
		cl_wait(100);
   910a0:	2064      	movs	r0, #100	; 0x64
   910a2:	4b60      	ldr	r3, [pc, #384]	; (91224 <cl_testharnesscommandhandler+0xf84>)
   910a4:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"DRAIN_OFF";
   910a6:	4b6b      	ldr	r3, [pc, #428]	; (91254 <cl_testharnesscommandhandler+0xfb4>)
   910a8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,9);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   910ac:	2064      	movs	r0, #100	; 0x64
   910ae:	4b5d      	ldr	r3, [pc, #372]	; (91224 <cl_testharnesscommandhandler+0xf84>)
   910b0:	4798      	blx	r3
		break;
   910b2:	f001 bd61 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_DAC2_VALVE_OPEN: // 42 0x30
		//cl_wait(100);
		pdataarray = (Cl_Uint8Type *)"V_OPEN";
   910b6:	4b68      	ldr	r3, [pc, #416]	; (91258 <cl_testharnesscommandhandler+0xfb8>)
   910b8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		sv_cntrl_activate_valve( VALVE_ID4);
   910bc:	2004      	movs	r0, #4
   910be:	4b67      	ldr	r3, [pc, #412]	; (9125c <cl_testharnesscommandhandler+0xfbc>)
   910c0:	4798      	blx	r3
		//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,9);
		//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   910c2:	2064      	movs	r0, #100	; 0x64
   910c4:	4b57      	ldr	r3, [pc, #348]	; (91224 <cl_testharnesscommandhandler+0xf84>)
   910c6:	4798      	blx	r3
		sv_cntrl_deactivate_valve(VALVE_ID4);
   910c8:	2004      	movs	r0, #4
   910ca:	4b65      	ldr	r3, [pc, #404]	; (91260 <cl_testharnesscommandhandler+0xfc0>)
   910cc:	4798      	blx	r3
		cl_wait(100);
   910ce:	2064      	movs	r0, #100	; 0x64
   910d0:	4b54      	ldr	r3, [pc, #336]	; (91224 <cl_testharnesscommandhandler+0xf84>)
   910d2:	4798      	blx	r3
		break;
   910d4:	f001 bd50 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
		
		case TEST_SET_FLOWRATE:
		
		if(TestMsg.data.byte[1] == 0)
   910d8:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   910dc:	2b00      	cmp	r3, #0
   910de:	d10c      	bne.n	910fa <cl_testharnesscommandhandler+0xe5a>
		{
			sv_cs_setpotvalue(3800);
   910e0:	f640 60d8 	movw	r0, #3800	; 0xed8
   910e4:	4b5f      	ldr	r3, [pc, #380]	; (91264 <cl_testharnesscommandhandler+0xfc4>)
   910e6:	4798      	blx	r3
			cl_thretval = sv_cntrl_setpumpspeed(DCMOTOR1,1050);
   910e8:	2001      	movs	r0, #1
   910ea:	f240 411a 	movw	r1, #1050	; 0x41a
   910ee:	4b50      	ldr	r3, [pc, #320]	; (91230 <cl_testharnesscommandhandler+0xf90>)
   910f0:	4798      	blx	r3
   910f2:	4603      	mov	r3, r0
   910f4:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   910f8:	e022      	b.n	91140 <cl_testharnesscommandhandler+0xea0>
			
		}
		else if(TestMsg.data.byte[1] == 1)
   910fa:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   910fe:	2b01      	cmp	r3, #1
   91100:	d10c      	bne.n	9111c <cl_testharnesscommandhandler+0xe7c>
		{
						sv_cs_setpotvalue(2450);
   91102:	f640 1092 	movw	r0, #2450	; 0x992
   91106:	4b57      	ldr	r3, [pc, #348]	; (91264 <cl_testharnesscommandhandler+0xfc4>)
   91108:	4798      	blx	r3
			cl_thretval = sv_cntrl_setpumpspeed(DCMOTOR1,745);
   9110a:	2001      	movs	r0, #1
   9110c:	f240 21e9 	movw	r1, #745	; 0x2e9
   91110:	4b47      	ldr	r3, [pc, #284]	; (91230 <cl_testharnesscommandhandler+0xf90>)
   91112:	4798      	blx	r3
   91114:	4603      	mov	r3, r0
   91116:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   9111a:	e011      	b.n	91140 <cl_testharnesscommandhandler+0xea0>
		}
		else if(TestMsg.data.byte[1] == 2)
   9111c:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   91120:	2b02      	cmp	r3, #2
   91122:	d10d      	bne.n	91140 <cl_testharnesscommandhandler+0xea0>
		{
						sv_cs_setpotvalue(1090);
   91124:	f240 4042 	movw	r0, #1090	; 0x442
   91128:	4b4e      	ldr	r3, [pc, #312]	; (91264 <cl_testharnesscommandhandler+0xfc4>)
   9112a:	4798      	blx	r3
			cl_thretval = sv_cntrl_setpumpspeed(DCMOTOR1,370);
   9112c:	2001      	movs	r0, #1
   9112e:	f44f 71b9 	mov.w	r1, #370	; 0x172
   91132:	4b3f      	ldr	r3, [pc, #252]	; (91230 <cl_testharnesscommandhandler+0xf90>)
   91134:	4798      	blx	r3
   91136:	4603      	mov	r3, r0
   91138:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		}
		break;
   9113c:	f001 bd1c 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
   91140:	f001 bd1a 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_VALVE_OPEN: // 42 0x30	
		{
								cl_Datastreamtype cl_tdata;
								cl_tdata.word = 0;
   91144:	2300      	movs	r3, #0
   91146:	64fb      	str	r3, [r7, #76]	; 0x4c
		}



		{
					cl_wait(100);
   91148:	2064      	movs	r0, #100	; 0x64
   9114a:	4b36      	ldr	r3, [pc, #216]	; (91224 <cl_testharnesscommandhandler+0xf84>)
   9114c:	4798      	blx	r3
					pdataarray = (Cl_Uint8Type *)"V_OPEN";
   9114e:	4b42      	ldr	r3, [pc, #264]	; (91258 <cl_testharnesscommandhandler+0xfb8>)
   91150:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
					sv_cntrl_activate_valve((sv_valvetype)TestMsg.data.byte[1]);
   91154:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   91158:	4618      	mov	r0, r3
   9115a:	4b40      	ldr	r3, [pc, #256]	; (9125c <cl_testharnesscommandhandler+0xfbc>)
   9115c:	4798      	blx	r3
					//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,9);
					//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
					cl_wait(100);
   9115e:	2064      	movs	r0, #100	; 0x64
   91160:	4b30      	ldr	r3, [pc, #192]	; (91224 <cl_testharnesscommandhandler+0xf84>)
   91162:	4798      	blx	r3
					
		}
		}
		break;
   91164:	f001 bd08 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_VALVE_CLOSE: // 43 0c31
		cl_wait(100);
   91168:	2064      	movs	r0, #100	; 0x64
   9116a:	4b2e      	ldr	r3, [pc, #184]	; (91224 <cl_testharnesscommandhandler+0xf84>)
   9116c:	4798      	blx	r3
		sv_cntrl_deactivate_valve((sv_valvetype)TestMsg.data.byte[1]);
   9116e:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   91172:	4618      	mov	r0, r3
   91174:	4b3a      	ldr	r3, [pc, #232]	; (91260 <cl_testharnesscommandhandler+0xfc0>)
   91176:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"V_CLOSE";
   91178:	4b3b      	ldr	r3, [pc, #236]	; (91268 <cl_testharnesscommandhandler+0xfc8>)
   9117a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,9);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   9117e:	2064      	movs	r0, #100	; 0x64
   91180:	4b28      	ldr	r3, [pc, #160]	; (91224 <cl_testharnesscommandhandler+0xf84>)
   91182:	4798      	blx	r3
		break;
   91184:	f001 bcf8 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_ALL_VALVES_OPEN:
		cl_wait(100);
   91188:	2064      	movs	r0, #100	; 0x64
   9118a:	4b26      	ldr	r3, [pc, #152]	; (91224 <cl_testharnesscommandhandler+0xf84>)
   9118c:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"V_ALLOPEN";
   9118e:	4b37      	ldr	r3, [pc, #220]	; (9126c <cl_testharnesscommandhandler+0xfcc>)
   91190:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		 for(temp = 1;temp<=20; temp++)
   91194:	2301      	movs	r3, #1
   91196:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
   9119a:	e00c      	b.n	911b6 <cl_testharnesscommandhandler+0xf16>
		 {
				sv_cntrl_activate_valve((sv_valvetype)temp);
   9119c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   911a0:	4618      	mov	r0, r3
   911a2:	4b2e      	ldr	r3, [pc, #184]	; (9125c <cl_testharnesscommandhandler+0xfbc>)
   911a4:	4798      	blx	r3
				cl_wait(10);
   911a6:	200a      	movs	r0, #10
   911a8:	4b1e      	ldr	r3, [pc, #120]	; (91224 <cl_testharnesscommandhandler+0xf84>)
   911aa:	4798      	blx	r3
		cl_wait(100);
		break;
		case TEST_SET_ALL_VALVES_OPEN:
		cl_wait(100);
		pdataarray = (Cl_Uint8Type *)"V_ALLOPEN";
		 for(temp = 1;temp<=20; temp++)
   911ac:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   911b0:	3301      	adds	r3, #1
   911b2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
   911b6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
   911ba:	2b14      	cmp	r3, #20
   911bc:	d9ee      	bls.n	9119c <cl_testharnesscommandhandler+0xefc>
				sv_cntrl_activate_valve((sv_valvetype)temp);
				cl_wait(10);
		 }
				//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,9);
				
		cl_wait(100);
   911be:	2064      	movs	r0, #100	; 0x64
   911c0:	4b18      	ldr	r3, [pc, #96]	; (91224 <cl_testharnesscommandhandler+0xf84>)
   911c2:	4798      	blx	r3
		break;
   911c4:	f001 bcd8 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_HP_PUMPON:
		cl_wait(100);
   911c8:	2064      	movs	r0, #100	; 0x64
   911ca:	4b16      	ldr	r3, [pc, #88]	; (91224 <cl_testharnesscommandhandler+0xf84>)
   911cc:	4798      	blx	r3
		
		cl_thretval =  sv_cntrl_activatepump(HEPARINPUMP);
   911ce:	2005      	movs	r0, #5
   911d0:	4b27      	ldr	r3, [pc, #156]	; (91270 <cl_testharnesscommandhandler+0xfd0>)
   911d2:	4798      	blx	r3
   911d4:	4603      	mov	r3, r0
   911d6:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		
		pdataarray = (Cl_Uint8Type *)"HP_ON";
   911da:	4b26      	ldr	r3, [pc, #152]	; (91274 <cl_testharnesscommandhandler+0xfd4>)
   911dc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,5);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   911e0:	2064      	movs	r0, #100	; 0x64
   911e2:	4b10      	ldr	r3, [pc, #64]	; (91224 <cl_testharnesscommandhandler+0xf84>)
   911e4:	4798      	blx	r3
		break;
   911e6:	f001 bcc7 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_HP_PUMPOFF:
		cl_wait(100);
   911ea:	2064      	movs	r0, #100	; 0x64
   911ec:	4b0d      	ldr	r3, [pc, #52]	; (91224 <cl_testharnesscommandhandler+0xf84>)
   911ee:	4798      	blx	r3
		
		cl_thretval =  sv_cntrl_deactivatepump(HEPARINPUMP);
   911f0:	2005      	movs	r0, #5
   911f2:	4b0d      	ldr	r3, [pc, #52]	; (91228 <cl_testharnesscommandhandler+0xf88>)
   911f4:	4798      	blx	r3
   911f6:	4603      	mov	r3, r0
   911f8:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		
		pdataarray = (Cl_Uint8Type *)"HP_OFF";
   911fc:	4b1e      	ldr	r3, [pc, #120]	; (91278 <cl_testharnesscommandhandler+0xfd8>)
   911fe:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,5);
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   91202:	2064      	movs	r0, #100	; 0x64
   91204:	4b07      	ldr	r3, [pc, #28]	; (91224 <cl_testharnesscommandhandler+0xf84>)
   91206:	4798      	blx	r3
		break;
   91208:	f001 bcb6 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_HP_PUMPRATE:
		cl_wait(100);
   9120c:	2064      	movs	r0, #100	; 0x64
   9120e:	4b05      	ldr	r3, [pc, #20]	; (91224 <cl_testharnesscommandhandler+0xf84>)
   91210:	4798      	blx	r3
						if(TestMsg.datasize == 2)
   91212:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   91216:	2b02      	cmp	r3, #2
   91218:	d130      	bne.n	9127c <cl_testharnesscommandhandler+0xfdc>
						{
							//rateval = TestMsg.data[1];
							cl_indata.bytearray[0] = TestMsg.data.byte[1];
   9121a:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   9121e:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   91222:	e037      	b.n	91294 <cl_testharnesscommandhandler+0xff4>
   91224:	00093195 	.word	0x00093195
   91228:	00099c69 	.word	0x00099c69
   9122c:	2007265c 	.word	0x2007265c
   91230:	00099d45 	.word	0x00099d45
   91234:	000a8990 	.word	0x000a8990
   91238:	00099e2d 	.word	0x00099e2d
   9123c:	000a8998 	.word	0x000a8998
   91240:	00099d1d 	.word	0x00099d1d
   91244:	000a89a0 	.word	0x000a89a0
   91248:	00099d31 	.word	0x00099d31
   9124c:	000a89a8 	.word	0x000a89a8
   91250:	000a89b0 	.word	0x000a89b0
   91254:	000a89bc 	.word	0x000a89bc
   91258:	000a89c8 	.word	0x000a89c8
   9125c:	00099ccd 	.word	0x00099ccd
   91260:	00099ced 	.word	0x00099ced
   91264:	0009a175 	.word	0x0009a175
   91268:	000a89d0 	.word	0x000a89d0
   9126c:	000a89d8 	.word	0x000a89d8
   91270:	00099c2d 	.word	0x00099c2d
   91274:	000a89e4 	.word	0x000a89e4
   91278:	000a89ec 	.word	0x000a89ec
						}
						else if(TestMsg.datasize == 3)
   9127c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   91280:	2b03      	cmp	r3, #3
   91282:	d107      	bne.n	91294 <cl_testharnesscommandhandler+0xff4>
						{
							//rateval = (uint16_t)TestMsg.data[1];
							cl_indata.bytearray[1] = TestMsg.data.byte[1];
   91284:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   91288:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
							cl_indata.bytearray[0] = TestMsg.data.byte[2];
   9128c:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   91290:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
							
						}
						

						sv_cntrl_setpumpspeed(HEPARINPUMP,cl_indata.word);
   91294:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   91298:	2005      	movs	r0, #5
   9129a:	4619      	mov	r1, r3
   9129c:	4b9e      	ldr	r3, [pc, #632]	; (91518 <cl_testharnesscommandhandler+0x1278>)
   9129e:	4798      	blx	r3
						pdataarray = (Cl_Uint8Type *)"HP_RATE";
   912a0:	4b9e      	ldr	r3, [pc, #632]	; (9151c <cl_testharnesscommandhandler+0x127c>)
   912a2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			//			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,7);
			//			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
		cl_wait(100);
   912a6:	2064      	movs	r0, #100	; 0x64
   912a8:	4b9d      	ldr	r3, [pc, #628]	; (91520 <cl_testharnesscommandhandler+0x1280>)
   912aa:	4798      	blx	r3
		break;
   912ac:	f001 bc64 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_HP_PUMPDIR:
		if(TestMsg.data.byte[1])
   912b0:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   912b4:	2b00      	cmp	r3, #0
   912b6:	d003      	beq.n	912c0 <cl_testharnesscommandhandler+0x1020>
		{
			sv_cntrl_setHepa_dir();
   912b8:	4b9a      	ldr	r3, [pc, #616]	; (91524 <cl_testharnesscommandhandler+0x1284>)
   912ba:	4798      	blx	r3
		}
		else
		{
			sv_cntrl_resetHepa_dir();
		}
		break;
   912bc:	f001 bc5c 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
		{
			sv_cntrl_setHepa_dir();
		}
		else
		{
			sv_cntrl_resetHepa_dir();
   912c0:	4b99      	ldr	r3, [pc, #612]	; (91528 <cl_testharnesscommandhandler+0x1288>)
   912c2:	4798      	blx	r3
		}
		break;
   912c4:	f001 bc58 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_ALL_PUMPS_OFF:
		cl_wait(50);
   912c8:	2032      	movs	r0, #50	; 0x32
   912ca:	4b95      	ldr	r3, [pc, #596]	; (91520 <cl_testharnesscommandhandler+0x1280>)
   912cc:	4798      	blx	r3
		
		cl_thretval =  sv_cntrl_deactivatepump(DCMOTOR1);
   912ce:	2001      	movs	r0, #1
   912d0:	4b96      	ldr	r3, [pc, #600]	; (9152c <cl_testharnesscommandhandler+0x128c>)
   912d2:	4798      	blx	r3
   912d4:	4603      	mov	r3, r0
   912d6:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		cl_wait(10);
   912da:	200a      	movs	r0, #10
   912dc:	4b90      	ldr	r3, [pc, #576]	; (91520 <cl_testharnesscommandhandler+0x1280>)
   912de:	4798      	blx	r3
		cl_thretval =  sv_cntrl_deactivatepump(DCMOTOR2);
   912e0:	2002      	movs	r0, #2
   912e2:	4b92      	ldr	r3, [pc, #584]	; (9152c <cl_testharnesscommandhandler+0x128c>)
   912e4:	4798      	blx	r3
   912e6:	4603      	mov	r3, r0
   912e8:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		cl_wait(10);
   912ec:	200a      	movs	r0, #10
   912ee:	4b8c      	ldr	r3, [pc, #560]	; (91520 <cl_testharnesscommandhandler+0x1280>)
   912f0:	4798      	blx	r3
		cl_thretval =  sv_cntrl_deactivatepump(BLOODPUMP);
   912f2:	2003      	movs	r0, #3
   912f4:	4b8d      	ldr	r3, [pc, #564]	; (9152c <cl_testharnesscommandhandler+0x128c>)
   912f6:	4798      	blx	r3
   912f8:	4603      	mov	r3, r0
   912fa:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		cl_wait(10);
   912fe:	200a      	movs	r0, #10
   91300:	4b87      	ldr	r3, [pc, #540]	; (91520 <cl_testharnesscommandhandler+0x1280>)
   91302:	4798      	blx	r3
		cl_thretval =  sv_cntrl_deactivatepump(UFPUMP);
   91304:	2004      	movs	r0, #4
   91306:	4b89      	ldr	r3, [pc, #548]	; (9152c <cl_testharnesscommandhandler+0x128c>)
   91308:	4798      	blx	r3
   9130a:	4603      	mov	r3, r0
   9130c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		cl_wait(10);
   91310:	200a      	movs	r0, #10
   91312:	4b83      	ldr	r3, [pc, #524]	; (91520 <cl_testharnesscommandhandler+0x1280>)
   91314:	4798      	blx	r3
		cl_thretval =  sv_cntrl_deactivatepump(HEPARINPUMP);
   91316:	2005      	movs	r0, #5
   91318:	4b84      	ldr	r3, [pc, #528]	; (9152c <cl_testharnesscommandhandler+0x128c>)
   9131a:	4798      	blx	r3
   9131c:	4603      	mov	r3, r0
   9131e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		
				
		cl_wait(50);
   91322:	2032      	movs	r0, #50	; 0x32
   91324:	4b7e      	ldr	r3, [pc, #504]	; (91520 <cl_testharnesscommandhandler+0x1280>)
   91326:	4798      	blx	r3
		break;
   91328:	f001 bc26 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_BC_V1:
		sv_cntrl_activate_valve(6);
   9132c:	2006      	movs	r0, #6
   9132e:	4b80      	ldr	r3, [pc, #512]	; (91530 <cl_testharnesscommandhandler+0x1290>)
   91330:	4798      	blx	r3
		sv_cntrl_activate_valve(7);
   91332:	2007      	movs	r0, #7
   91334:	4b7e      	ldr	r3, [pc, #504]	; (91530 <cl_testharnesscommandhandler+0x1290>)
   91336:	4798      	blx	r3
		sv_cntrl_activate_valve(12);
   91338:	200c      	movs	r0, #12
   9133a:	4b7d      	ldr	r3, [pc, #500]	; (91530 <cl_testharnesscommandhandler+0x1290>)
   9133c:	4798      	blx	r3
		sv_cntrl_activate_valve(9);
   9133e:	2009      	movs	r0, #9
   91340:	4b7b      	ldr	r3, [pc, #492]	; (91530 <cl_testharnesscommandhandler+0x1290>)
   91342:	4798      	blx	r3
		
		sv_cntrl_deactivate_valve(5);
   91344:	2005      	movs	r0, #5
   91346:	4b7b      	ldr	r3, [pc, #492]	; (91534 <cl_testharnesscommandhandler+0x1294>)
   91348:	4798      	blx	r3
		sv_cntrl_deactivate_valve(8);
   9134a:	2008      	movs	r0, #8
   9134c:	4b79      	ldr	r3, [pc, #484]	; (91534 <cl_testharnesscommandhandler+0x1294>)
   9134e:	4798      	blx	r3
		sv_cntrl_deactivate_valve(10);
   91350:	200a      	movs	r0, #10
   91352:	4b78      	ldr	r3, [pc, #480]	; (91534 <cl_testharnesscommandhandler+0x1294>)
   91354:	4798      	blx	r3
		sv_cntrl_deactivate_valve(11);
   91356:	200b      	movs	r0, #11
   91358:	4b76      	ldr	r3, [pc, #472]	; (91534 <cl_testharnesscommandhandler+0x1294>)
   9135a:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"BC_V1 SET";
   9135c:	4b76      	ldr	r3, [pc, #472]	; (91538 <cl_testharnesscommandhandler+0x1298>)
   9135e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,9);
		break;
   91362:	f001 bc09 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_BC_V2:
		sv_cntrl_activate_valve(5);
   91366:	2005      	movs	r0, #5
   91368:	4b71      	ldr	r3, [pc, #452]	; (91530 <cl_testharnesscommandhandler+0x1290>)
   9136a:	4798      	blx	r3
		sv_cntrl_activate_valve(8);
   9136c:	2008      	movs	r0, #8
   9136e:	4b70      	ldr	r3, [pc, #448]	; (91530 <cl_testharnesscommandhandler+0x1290>)
   91370:	4798      	blx	r3
		sv_cntrl_activate_valve(10);
   91372:	200a      	movs	r0, #10
   91374:	4b6e      	ldr	r3, [pc, #440]	; (91530 <cl_testharnesscommandhandler+0x1290>)
   91376:	4798      	blx	r3
		sv_cntrl_activate_valve(11);
   91378:	200b      	movs	r0, #11
   9137a:	4b6d      	ldr	r3, [pc, #436]	; (91530 <cl_testharnesscommandhandler+0x1290>)
   9137c:	4798      	blx	r3
		
		sv_cntrl_deactivate_valve(12);
   9137e:	200c      	movs	r0, #12
   91380:	4b6c      	ldr	r3, [pc, #432]	; (91534 <cl_testharnesscommandhandler+0x1294>)
   91382:	4798      	blx	r3
		sv_cntrl_deactivate_valve(9);
   91384:	2009      	movs	r0, #9
   91386:	4b6b      	ldr	r3, [pc, #428]	; (91534 <cl_testharnesscommandhandler+0x1294>)
   91388:	4798      	blx	r3
		sv_cntrl_deactivate_valve(6);
   9138a:	2006      	movs	r0, #6
   9138c:	4b69      	ldr	r3, [pc, #420]	; (91534 <cl_testharnesscommandhandler+0x1294>)
   9138e:	4798      	blx	r3
		sv_cntrl_deactivate_valve(7);
   91390:	2007      	movs	r0, #7
   91392:	4b68      	ldr	r3, [pc, #416]	; (91534 <cl_testharnesscommandhandler+0x1294>)
   91394:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"BC_V2 SET";
   91396:	4b69      	ldr	r3, [pc, #420]	; (9153c <cl_testharnesscommandhandler+0x129c>)
   91398:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,9);
		break;
   9139c:	f001 bbec 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_BC_V1_1314:
		sv_cntrl_activate_valve(6);
   913a0:	2006      	movs	r0, #6
   913a2:	4b63      	ldr	r3, [pc, #396]	; (91530 <cl_testharnesscommandhandler+0x1290>)
   913a4:	4798      	blx	r3
		sv_cntrl_activate_valve(7);
   913a6:	2007      	movs	r0, #7
   913a8:	4b61      	ldr	r3, [pc, #388]	; (91530 <cl_testharnesscommandhandler+0x1290>)
   913aa:	4798      	blx	r3
		sv_cntrl_activate_valve(12);
   913ac:	200c      	movs	r0, #12
   913ae:	4b60      	ldr	r3, [pc, #384]	; (91530 <cl_testharnesscommandhandler+0x1290>)
   913b0:	4798      	blx	r3
		sv_cntrl_activate_valve(9);
   913b2:	2009      	movs	r0, #9
   913b4:	4b5e      	ldr	r3, [pc, #376]	; (91530 <cl_testharnesscommandhandler+0x1290>)
   913b6:	4798      	blx	r3
		
		sv_cntrl_deactivate_valve(5);
   913b8:	2005      	movs	r0, #5
   913ba:	4b5e      	ldr	r3, [pc, #376]	; (91534 <cl_testharnesscommandhandler+0x1294>)
   913bc:	4798      	blx	r3
		sv_cntrl_deactivate_valve(8);
   913be:	2008      	movs	r0, #8
   913c0:	4b5c      	ldr	r3, [pc, #368]	; (91534 <cl_testharnesscommandhandler+0x1294>)
   913c2:	4798      	blx	r3
		sv_cntrl_deactivate_valve(10);
   913c4:	200a      	movs	r0, #10
   913c6:	4b5b      	ldr	r3, [pc, #364]	; (91534 <cl_testharnesscommandhandler+0x1294>)
   913c8:	4798      	blx	r3
		sv_cntrl_deactivate_valve(11);
   913ca:	200b      	movs	r0, #11
   913cc:	4b59      	ldr	r3, [pc, #356]	; (91534 <cl_testharnesscommandhandler+0x1294>)
   913ce:	4798      	blx	r3
		sv_cntrl_activate_valve(13);
   913d0:	200d      	movs	r0, #13
   913d2:	4b57      	ldr	r3, [pc, #348]	; (91530 <cl_testharnesscommandhandler+0x1290>)
   913d4:	4798      	blx	r3
		sv_cntrl_activate_valve(14);
   913d6:	200e      	movs	r0, #14
   913d8:	4b55      	ldr	r3, [pc, #340]	; (91530 <cl_testharnesscommandhandler+0x1290>)
   913da:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"BC_V1_1314 SET";
   913dc:	4b58      	ldr	r3, [pc, #352]	; (91540 <cl_testharnesscommandhandler+0x12a0>)
   913de:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,14);
		break;
   913e2:	f001 bbc9 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_BC_V2_1314:
		sv_cntrl_activate_valve(5);
   913e6:	2005      	movs	r0, #5
   913e8:	4b51      	ldr	r3, [pc, #324]	; (91530 <cl_testharnesscommandhandler+0x1290>)
   913ea:	4798      	blx	r3
		sv_cntrl_activate_valve(8);
   913ec:	2008      	movs	r0, #8
   913ee:	4b50      	ldr	r3, [pc, #320]	; (91530 <cl_testharnesscommandhandler+0x1290>)
   913f0:	4798      	blx	r3
		sv_cntrl_activate_valve(10);
   913f2:	200a      	movs	r0, #10
   913f4:	4b4e      	ldr	r3, [pc, #312]	; (91530 <cl_testharnesscommandhandler+0x1290>)
   913f6:	4798      	blx	r3
		sv_cntrl_activate_valve(11);
   913f8:	200b      	movs	r0, #11
   913fa:	4b4d      	ldr	r3, [pc, #308]	; (91530 <cl_testharnesscommandhandler+0x1290>)
   913fc:	4798      	blx	r3
		
		sv_cntrl_deactivate_valve(12);
   913fe:	200c      	movs	r0, #12
   91400:	4b4c      	ldr	r3, [pc, #304]	; (91534 <cl_testharnesscommandhandler+0x1294>)
   91402:	4798      	blx	r3
		sv_cntrl_deactivate_valve(9);
   91404:	2009      	movs	r0, #9
   91406:	4b4b      	ldr	r3, [pc, #300]	; (91534 <cl_testharnesscommandhandler+0x1294>)
   91408:	4798      	blx	r3
		sv_cntrl_deactivate_valve(6);
   9140a:	2006      	movs	r0, #6
   9140c:	4b49      	ldr	r3, [pc, #292]	; (91534 <cl_testharnesscommandhandler+0x1294>)
   9140e:	4798      	blx	r3
		sv_cntrl_deactivate_valve(7);
   91410:	2007      	movs	r0, #7
   91412:	4b48      	ldr	r3, [pc, #288]	; (91534 <cl_testharnesscommandhandler+0x1294>)
   91414:	4798      	blx	r3
		sv_cntrl_activate_valve(13);
   91416:	200d      	movs	r0, #13
   91418:	4b45      	ldr	r3, [pc, #276]	; (91530 <cl_testharnesscommandhandler+0x1290>)
   9141a:	4798      	blx	r3
		sv_cntrl_activate_valve(14);
   9141c:	200e      	movs	r0, #14
   9141e:	4b44      	ldr	r3, [pc, #272]	; (91530 <cl_testharnesscommandhandler+0x1290>)
   91420:	4798      	blx	r3
		pdataarray = (Cl_Uint8Type *)"BC_V2_1314 SET";
   91422:	4b48      	ldr	r3, [pc, #288]	; (91544 <cl_testharnesscommandhandler+0x12a4>)
   91424:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,14);
		break;
   91428:	f001 bba6 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_BC_V1_4:
		sv_cntrl_activate_valve(6);
   9142c:	2006      	movs	r0, #6
   9142e:	4b40      	ldr	r3, [pc, #256]	; (91530 <cl_testharnesscommandhandler+0x1290>)
   91430:	4798      	blx	r3
		sv_cntrl_activate_valve(7);
   91432:	2007      	movs	r0, #7
   91434:	4b3e      	ldr	r3, [pc, #248]	; (91530 <cl_testharnesscommandhandler+0x1290>)
   91436:	4798      	blx	r3
		sv_cntrl_activate_valve(12);
   91438:	200c      	movs	r0, #12
   9143a:	4b3d      	ldr	r3, [pc, #244]	; (91530 <cl_testharnesscommandhandler+0x1290>)
   9143c:	4798      	blx	r3
		sv_cntrl_activate_valve(9);
   9143e:	2009      	movs	r0, #9
   91440:	4b3b      	ldr	r3, [pc, #236]	; (91530 <cl_testharnesscommandhandler+0x1290>)
   91442:	4798      	blx	r3
		
		sv_cntrl_deactivate_valve(5);
   91444:	2005      	movs	r0, #5
   91446:	4b3b      	ldr	r3, [pc, #236]	; (91534 <cl_testharnesscommandhandler+0x1294>)
   91448:	4798      	blx	r3
		sv_cntrl_deactivate_valve(8);
   9144a:	2008      	movs	r0, #8
   9144c:	4b39      	ldr	r3, [pc, #228]	; (91534 <cl_testharnesscommandhandler+0x1294>)
   9144e:	4798      	blx	r3
		sv_cntrl_deactivate_valve(10);
   91450:	200a      	movs	r0, #10
   91452:	4b38      	ldr	r3, [pc, #224]	; (91534 <cl_testharnesscommandhandler+0x1294>)
   91454:	4798      	blx	r3
		sv_cntrl_deactivate_valve(11);
   91456:	200b      	movs	r0, #11
   91458:	4b36      	ldr	r3, [pc, #216]	; (91534 <cl_testharnesscommandhandler+0x1294>)
   9145a:	4798      	blx	r3
		sv_cntrl_activate_valve(4);
   9145c:	2004      	movs	r0, #4
   9145e:	4b34      	ldr	r3, [pc, #208]	; (91530 <cl_testharnesscommandhandler+0x1290>)
   91460:	4798      	blx	r3
		sv_cntrl_deactivate_valve(13);
   91462:	200d      	movs	r0, #13
   91464:	4b33      	ldr	r3, [pc, #204]	; (91534 <cl_testharnesscommandhandler+0x1294>)
   91466:	4798      	blx	r3
		sv_cntrl_deactivate_valve(14);
   91468:	200e      	movs	r0, #14
   9146a:	4b32      	ldr	r3, [pc, #200]	; (91534 <cl_testharnesscommandhandler+0x1294>)
   9146c:	4798      	blx	r3
		
		pdataarray = (Cl_Uint8Type *)"BC_V1_4 SET";
   9146e:	4b36      	ldr	r3, [pc, #216]	; (91548 <cl_testharnesscommandhandler+0x12a8>)
   91470:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,11);
		break;
   91474:	f001 bb80 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_BC_V2_4:
		sv_cntrl_activate_valve(5);
   91478:	2005      	movs	r0, #5
   9147a:	4b2d      	ldr	r3, [pc, #180]	; (91530 <cl_testharnesscommandhandler+0x1290>)
   9147c:	4798      	blx	r3
		sv_cntrl_activate_valve(8);
   9147e:	2008      	movs	r0, #8
   91480:	4b2b      	ldr	r3, [pc, #172]	; (91530 <cl_testharnesscommandhandler+0x1290>)
   91482:	4798      	blx	r3
		sv_cntrl_activate_valve(10);
   91484:	200a      	movs	r0, #10
   91486:	4b2a      	ldr	r3, [pc, #168]	; (91530 <cl_testharnesscommandhandler+0x1290>)
   91488:	4798      	blx	r3
		sv_cntrl_activate_valve(11);
   9148a:	200b      	movs	r0, #11
   9148c:	4b28      	ldr	r3, [pc, #160]	; (91530 <cl_testharnesscommandhandler+0x1290>)
   9148e:	4798      	blx	r3
		
		sv_cntrl_deactivate_valve(12);
   91490:	200c      	movs	r0, #12
   91492:	4b28      	ldr	r3, [pc, #160]	; (91534 <cl_testharnesscommandhandler+0x1294>)
   91494:	4798      	blx	r3
		sv_cntrl_deactivate_valve(9);
   91496:	2009      	movs	r0, #9
   91498:	4b26      	ldr	r3, [pc, #152]	; (91534 <cl_testharnesscommandhandler+0x1294>)
   9149a:	4798      	blx	r3
		sv_cntrl_deactivate_valve(6);
   9149c:	2006      	movs	r0, #6
   9149e:	4b25      	ldr	r3, [pc, #148]	; (91534 <cl_testharnesscommandhandler+0x1294>)
   914a0:	4798      	blx	r3
		sv_cntrl_deactivate_valve(7);
   914a2:	2007      	movs	r0, #7
   914a4:	4b23      	ldr	r3, [pc, #140]	; (91534 <cl_testharnesscommandhandler+0x1294>)
   914a6:	4798      	blx	r3
		sv_cntrl_activate_valve(4);
   914a8:	2004      	movs	r0, #4
   914aa:	4b21      	ldr	r3, [pc, #132]	; (91530 <cl_testharnesscommandhandler+0x1290>)
   914ac:	4798      	blx	r3
		sv_cntrl_deactivate_valve(13);
   914ae:	200d      	movs	r0, #13
   914b0:	4b20      	ldr	r3, [pc, #128]	; (91534 <cl_testharnesscommandhandler+0x1294>)
   914b2:	4798      	blx	r3
		sv_cntrl_deactivate_valve(14);
   914b4:	200e      	movs	r0, #14
   914b6:	4b1f      	ldr	r3, [pc, #124]	; (91534 <cl_testharnesscommandhandler+0x1294>)
   914b8:	4798      	blx	r3
		
		pdataarray = (Cl_Uint8Type *)"BC_V2_4 SET";
   914ba:	4b24      	ldr	r3, [pc, #144]	; (9154c <cl_testharnesscommandhandler+0x12ac>)
   914bc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,11);
		break;
   914c0:	f001 bb5a 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
		case TEST_RESET_BC:
		sv_cntrl_deactivate_valve(5);
   914c4:	2005      	movs	r0, #5
   914c6:	4b1b      	ldr	r3, [pc, #108]	; (91534 <cl_testharnesscommandhandler+0x1294>)
   914c8:	4798      	blx	r3
		sv_cntrl_deactivate_valve(8);
   914ca:	2008      	movs	r0, #8
   914cc:	4b19      	ldr	r3, [pc, #100]	; (91534 <cl_testharnesscommandhandler+0x1294>)
   914ce:	4798      	blx	r3
		sv_cntrl_deactivate_valve(10);
   914d0:	200a      	movs	r0, #10
   914d2:	4b18      	ldr	r3, [pc, #96]	; (91534 <cl_testharnesscommandhandler+0x1294>)
   914d4:	4798      	blx	r3
		sv_cntrl_deactivate_valve(11);
   914d6:	200b      	movs	r0, #11
   914d8:	4b16      	ldr	r3, [pc, #88]	; (91534 <cl_testharnesscommandhandler+0x1294>)
   914da:	4798      	blx	r3
		
		sv_cntrl_deactivate_valve(12);
   914dc:	200c      	movs	r0, #12
   914de:	4b15      	ldr	r3, [pc, #84]	; (91534 <cl_testharnesscommandhandler+0x1294>)
   914e0:	4798      	blx	r3
		sv_cntrl_deactivate_valve(9);
   914e2:	2009      	movs	r0, #9
   914e4:	4b13      	ldr	r3, [pc, #76]	; (91534 <cl_testharnesscommandhandler+0x1294>)
   914e6:	4798      	blx	r3
		sv_cntrl_deactivate_valve(6);
   914e8:	2006      	movs	r0, #6
   914ea:	4b12      	ldr	r3, [pc, #72]	; (91534 <cl_testharnesscommandhandler+0x1294>)
   914ec:	4798      	blx	r3
		sv_cntrl_deactivate_valve(7);
   914ee:	2007      	movs	r0, #7
   914f0:	4b10      	ldr	r3, [pc, #64]	; (91534 <cl_testharnesscommandhandler+0x1294>)
   914f2:	4798      	blx	r3
		
		cl_thretval =  sv_cntrl_deactivatepump(DCMOTOR1);
   914f4:	2001      	movs	r0, #1
   914f6:	4b0d      	ldr	r3, [pc, #52]	; (9152c <cl_testharnesscommandhandler+0x128c>)
   914f8:	4798      	blx	r3
   914fa:	4603      	mov	r3, r0
   914fc:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115

		cl_thretval=  sv_cntrl_deactivatepump(DCMOTOR2);
   91500:	2002      	movs	r0, #2
   91502:	4b0a      	ldr	r3, [pc, #40]	; (9152c <cl_testharnesscommandhandler+0x128c>)
   91504:	4798      	blx	r3
   91506:	4603      	mov	r3, r0
   91508:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		
		pdataarray = (Cl_Uint8Type *)"BC_RESET";
   9150c:	4b10      	ldr	r3, [pc, #64]	; (91550 <cl_testharnesscommandhandler+0x12b0>)
   9150e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		
	//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,8);
		break;
   91512:	f001 bb31 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
   91516:	bf00      	nop
   91518:	00099d45 	.word	0x00099d45
   9151c:	000a89f4 	.word	0x000a89f4
   91520:	00093195 	.word	0x00093195
   91524:	00099d1d 	.word	0x00099d1d
   91528:	00099d31 	.word	0x00099d31
   9152c:	00099c69 	.word	0x00099c69
   91530:	00099ccd 	.word	0x00099ccd
   91534:	00099ced 	.word	0x00099ced
   91538:	000a89fc 	.word	0x000a89fc
   9153c:	000a8a08 	.word	0x000a8a08
   91540:	000a8a14 	.word	0x000a8a14
   91544:	000a8a24 	.word	0x000a8a24
   91548:	000a8a34 	.word	0x000a8a34
   9154c:	000a8a40 	.word	0x000a8a40
   91550:	000a8a4c 	.word	0x000a8a4c
		case TEST_SET_BC_FREEZE:
		g_testbcfreeze = true;
   91554:	4bb2      	ldr	r3, [pc, #712]	; (91820 <cl_testharnesscommandhandler+0x1580>)
   91556:	2201      	movs	r2, #1
   91558:	701a      	strb	r2, [r3, #0]
				sv_cntrl_deactivate_valve(5);
   9155a:	2005      	movs	r0, #5
   9155c:	4bb1      	ldr	r3, [pc, #708]	; (91824 <cl_testharnesscommandhandler+0x1584>)
   9155e:	4798      	blx	r3
				sv_cntrl_deactivate_valve(8);
   91560:	2008      	movs	r0, #8
   91562:	4bb0      	ldr	r3, [pc, #704]	; (91824 <cl_testharnesscommandhandler+0x1584>)
   91564:	4798      	blx	r3
				sv_cntrl_deactivate_valve(10);
   91566:	200a      	movs	r0, #10
   91568:	4bae      	ldr	r3, [pc, #696]	; (91824 <cl_testharnesscommandhandler+0x1584>)
   9156a:	4798      	blx	r3
				sv_cntrl_deactivate_valve(11);
   9156c:	200b      	movs	r0, #11
   9156e:	4bad      	ldr	r3, [pc, #692]	; (91824 <cl_testharnesscommandhandler+0x1584>)
   91570:	4798      	blx	r3
				
				sv_cntrl_deactivate_valve(12);
   91572:	200c      	movs	r0, #12
   91574:	4bab      	ldr	r3, [pc, #684]	; (91824 <cl_testharnesscommandhandler+0x1584>)
   91576:	4798      	blx	r3
				sv_cntrl_deactivate_valve(9);
   91578:	2009      	movs	r0, #9
   9157a:	4baa      	ldr	r3, [pc, #680]	; (91824 <cl_testharnesscommandhandler+0x1584>)
   9157c:	4798      	blx	r3
				sv_cntrl_deactivate_valve(6);
   9157e:	2006      	movs	r0, #6
   91580:	4ba8      	ldr	r3, [pc, #672]	; (91824 <cl_testharnesscommandhandler+0x1584>)
   91582:	4798      	blx	r3
				sv_cntrl_deactivate_valve(7);
   91584:	2007      	movs	r0, #7
   91586:	4ba7      	ldr	r3, [pc, #668]	; (91824 <cl_testharnesscommandhandler+0x1584>)
   91588:	4798      	blx	r3

				cl_thretval =  sv_cntrl_deactivatepump(DCMOTOR1);
   9158a:	2001      	movs	r0, #1
   9158c:	4ba6      	ldr	r3, [pc, #664]	; (91828 <cl_testharnesscommandhandler+0x1588>)
   9158e:	4798      	blx	r3
   91590:	4603      	mov	r3, r0
   91592:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115

				cl_thretval=  sv_cntrl_deactivatepump(DCMOTOR2);
   91596:	2002      	movs	r0, #2
   91598:	4ba3      	ldr	r3, [pc, #652]	; (91828 <cl_testharnesscommandhandler+0x1588>)
   9159a:	4798      	blx	r3
   9159c:	4603      	mov	r3, r0
   9159e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
				pdataarray = (Cl_Uint8Type *)"BC_FREEZE";
   915a2:	4ba2      	ldr	r3, [pc, #648]	; (9182c <cl_testharnesscommandhandler+0x158c>)
   915a4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,9);
		break;
   915a8:	f001 bae6 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_BC_UNFREEZE:
		
		g_testbcfreeze = false;
   915ac:	4b9c      	ldr	r3, [pc, #624]	; (91820 <cl_testharnesscommandhandler+0x1580>)
   915ae:	2200      	movs	r2, #0
   915b0:	701a      	strb	r2, [r3, #0]
				pdataarray = (Cl_Uint8Type *)"BC_UNFREEZE";
   915b2:	4b9f      	ldr	r3, [pc, #636]	; (91830 <cl_testharnesscommandhandler+0x1590>)
   915b4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

				cl_thretval =  sv_cntrl_activatepump(DCMOTOR1);
   915b8:	2001      	movs	r0, #1
   915ba:	4b9e      	ldr	r3, [pc, #632]	; (91834 <cl_testharnesscommandhandler+0x1594>)
   915bc:	4798      	blx	r3
   915be:	4603      	mov	r3, r0
   915c0:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
				
				cl_thretval=  sv_cntrl_activatepump(DCMOTOR2);
   915c4:	2002      	movs	r0, #2
   915c6:	4b9b      	ldr	r3, [pc, #620]	; (91834 <cl_testharnesscommandhandler+0x1594>)
   915c8:	4798      	blx	r3
   915ca:	4603      	mov	r3, r0
   915cc:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
										
	//			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,11);
		g_testbcfreeze = false;
   915d0:	4b93      	ldr	r3, [pc, #588]	; (91820 <cl_testharnesscommandhandler+0x1580>)
   915d2:	2200      	movs	r2, #0
   915d4:	701a      	strb	r2, [r3, #0]
		break;
   915d6:	f001 bacf 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
		
					case TEST_SET_OPENFILL:
					
					
					pdataarray = (Cl_Uint8Type *)"OPENFILL";
   915da:	4b97      	ldr	r3, [pc, #604]	; (91838 <cl_testharnesscommandhandler+0x1598>)
   915dc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

				sv_cntrl_activate_valve(5);
   915e0:	2005      	movs	r0, #5
   915e2:	4b96      	ldr	r3, [pc, #600]	; (9183c <cl_testharnesscommandhandler+0x159c>)
   915e4:	4798      	blx	r3
				sv_cntrl_activate_valve(8);
   915e6:	2008      	movs	r0, #8
   915e8:	4b94      	ldr	r3, [pc, #592]	; (9183c <cl_testharnesscommandhandler+0x159c>)
   915ea:	4798      	blx	r3
				sv_cntrl_activate_valve(10);
   915ec:	200a      	movs	r0, #10
   915ee:	4b93      	ldr	r3, [pc, #588]	; (9183c <cl_testharnesscommandhandler+0x159c>)
   915f0:	4798      	blx	r3
				sv_cntrl_activate_valve(11);
   915f2:	200b      	movs	r0, #11
   915f4:	4b91      	ldr	r3, [pc, #580]	; (9183c <cl_testharnesscommandhandler+0x159c>)
   915f6:	4798      	blx	r3
				
				sv_cntrl_activate_valve(12);
   915f8:	200c      	movs	r0, #12
   915fa:	4b90      	ldr	r3, [pc, #576]	; (9183c <cl_testharnesscommandhandler+0x159c>)
   915fc:	4798      	blx	r3
				sv_cntrl_activate_valve(9);
   915fe:	2009      	movs	r0, #9
   91600:	4b8e      	ldr	r3, [pc, #568]	; (9183c <cl_testharnesscommandhandler+0x159c>)
   91602:	4798      	blx	r3
				sv_cntrl_activate_valve(6);
   91604:	2006      	movs	r0, #6
   91606:	4b8d      	ldr	r3, [pc, #564]	; (9183c <cl_testharnesscommandhandler+0x159c>)
   91608:	4798      	blx	r3
				sv_cntrl_activate_valve(7);
   9160a:	2007      	movs	r0, #7
   9160c:	4b8b      	ldr	r3, [pc, #556]	; (9183c <cl_testharnesscommandhandler+0x159c>)
   9160e:	4798      	blx	r3
				cl_thretval =  sv_cntrl_activatepump(DCMOTOR1);
   91610:	2001      	movs	r0, #1
   91612:	4b88      	ldr	r3, [pc, #544]	; (91834 <cl_testharnesscommandhandler+0x1594>)
   91614:	4798      	blx	r3
   91616:	4603      	mov	r3, r0
   91618:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
				cl_thretval=  sv_cntrl_activatepump(DCMOTOR2);
   9161c:	2002      	movs	r0, #2
   9161e:	4b85      	ldr	r3, [pc, #532]	; (91834 <cl_testharnesscommandhandler+0x1594>)
   91620:	4798      	blx	r3
   91622:	4603      	mov	r3, r0
   91624:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
					
		//			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,8);
					g_testbcfreeze = false;
   91628:	4b7d      	ldr	r3, [pc, #500]	; (91820 <cl_testharnesscommandhandler+0x1580>)
   9162a:	2200      	movs	r2, #0
   9162c:	701a      	strb	r2, [r3, #0]
					break;
   9162e:	f001 baa3 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
				
			case TEST_SKIPOPENFILL:
			
			
			pdataarray = (Cl_Uint8Type *)"JTR";
   91632:	4b83      	ldr	r3, [pc, #524]	; (91840 <cl_testharnesscommandhandler+0x15a0>)
   91634:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

			Cl_RinseMinutescounter = CL_RINSE_OPENFILL_TIMEOUT;
   91638:	4b82      	ldr	r3, [pc, #520]	; (91844 <cl_testharnesscommandhandler+0x15a4>)
   9163a:	2205      	movs	r2, #5
   9163c:	601a      	str	r2, [r3, #0]
			
		//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,3);
			g_testbcfreeze = false;
   9163e:	4b78      	ldr	r3, [pc, #480]	; (91820 <cl_testharnesscommandhandler+0x1580>)
   91640:	2200      	movs	r2, #0
   91642:	701a      	strb	r2, [r3, #0]
			break;
   91644:	f001 ba98 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
			case TEST_HEATER_FAST:
			sv_cntrl_incheater(0x900);
   91648:	f44f 6010 	mov.w	r0, #2304	; 0x900
   9164c:	4b7e      	ldr	r3, [pc, #504]	; (91848 <cl_testharnesscommandhandler+0x15a8>)
   9164e:	4798      	blx	r3
			
			break;
   91650:	f001 ba92 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
			
			case TEST_HEATER_SLOW:
			sv_cntrl_incheater(0x600);
   91654:	f44f 60c0 	mov.w	r0, #1536	; 0x600
   91658:	4b7b      	ldr	r3, [pc, #492]	; (91848 <cl_testharnesscommandhandler+0x15a8>)
   9165a:	4798      	blx	r3
			break;
   9165c:	f001 ba8c 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
			case TEST_SET_HEATER_RATE:
			
				cl_wait(100);
   91660:	2064      	movs	r0, #100	; 0x64
   91662:	4b7a      	ldr	r3, [pc, #488]	; (9184c <cl_testharnesscommandhandler+0x15ac>)
   91664:	4798      	blx	r3
				if(TestMsg.datasize == 2)
   91666:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   9166a:	2b02      	cmp	r3, #2
   9166c:	d104      	bne.n	91678 <cl_testharnesscommandhandler+0x13d8>
				{
					//rateval = TestMsg.data[1];
					cl_indata.bytearray[0] = TestMsg.data.byte[1];
   9166e:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   91672:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   91676:	e00b      	b.n	91690 <cl_testharnesscommandhandler+0x13f0>
				}
				else if(TestMsg.datasize == 3)
   91678:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   9167c:	2b03      	cmp	r3, #3
   9167e:	d107      	bne.n	91690 <cl_testharnesscommandhandler+0x13f0>
				{
					//rateval = (uint16_t)TestMsg.data[1];
					cl_indata.bytearray[1] = TestMsg.data.byte[1];
   91680:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   91684:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
					cl_indata.bytearray[0] = TestMsg.data.byte[2];
   91688:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   9168c:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
					
				}
				heater_duty = cl_indata.word;
   91690:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
   91694:	4a6e      	ldr	r2, [pc, #440]	; (91850 <cl_testharnesscommandhandler+0x15b0>)
   91696:	6013      	str	r3, [r2, #0]
			
				//sv_cntrl_incheater(4096 * heater_duty/100);
				sv_cntrl_incheater( heater_duty);
   91698:	4b6d      	ldr	r3, [pc, #436]	; (91850 <cl_testharnesscommandhandler+0x15b0>)
   9169a:	681b      	ldr	r3, [r3, #0]
   9169c:	4618      	mov	r0, r3
   9169e:	4b6a      	ldr	r3, [pc, #424]	; (91848 <cl_testharnesscommandhandler+0x15a8>)
   916a0:	4798      	blx	r3
			break;
   916a2:	f001 ba69 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
			case TEST_VCLAMP_ON:
		//	sv_cntrl_activatevenousclamp();
			
			pdataarray = (Cl_Uint8Type *)"VC_ON";
   916a6:	4b6b      	ldr	r3, [pc, #428]	; (91854 <cl_testharnesscommandhandler+0x15b4>)
   916a8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//		cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,5);
	
						sv_cntrl_activate_valve( VALVE_ID4);
   916ac:	2004      	movs	r0, #4
   916ae:	4b63      	ldr	r3, [pc, #396]	; (9183c <cl_testharnesscommandhandler+0x159c>)
   916b0:	4798      	blx	r3
						//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,9);
						//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TestMsg.data.byte[1],TestMsg.datasize-1);
						cl_wait(50);
   916b2:	2032      	movs	r0, #50	; 0x32
   916b4:	4b65      	ldr	r3, [pc, #404]	; (9184c <cl_testharnesscommandhandler+0x15ac>)
   916b6:	4798      	blx	r3
						sv_cntrl_deactivate_valve(VALVE_ID4);
   916b8:	2004      	movs	r0, #4
   916ba:	4b5a      	ldr	r3, [pc, #360]	; (91824 <cl_testharnesscommandhandler+0x1584>)
   916bc:	4798      	blx	r3
						cl_wait(50);
   916be:	2032      	movs	r0, #50	; 0x32
   916c0:	4b62      	ldr	r3, [pc, #392]	; (9184c <cl_testharnesscommandhandler+0x15ac>)
   916c2:	4798      	blx	r3
			break;
   916c4:	f001 ba58 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
			case TEST_VCLAMP_OFF:
			sv_cntrl_deactivatevenousclamp();
   916c8:	4b63      	ldr	r3, [pc, #396]	; (91858 <cl_testharnesscommandhandler+0x15b8>)
   916ca:	4798      	blx	r3
			pdataarray = (Cl_Uint8Type *)"VC_OFF";
   916cc:	4b63      	ldr	r3, [pc, #396]	; (9185c <cl_testharnesscommandhandler+0x15bc>)
   916ce:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	//		cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,5);
			break;
   916d2:	f001 ba51 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
						
			case TEST_RAPIDFIRE:
			for ( count1 = 0 ; count1 < 16 ; count1++)
   916d6:	2300      	movs	r3, #0
   916d8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
   916dc:	e008      	b.n	916f0 <cl_testharnesscommandhandler+0x1450>
			{
							cl_indata.word = count1;
   916de:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
   916e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
			pdataarray = (Cl_Uint8Type *)"VC_OFF";
	//		cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,5);
			break;
						
			case TEST_RAPIDFIRE:
			for ( count1 = 0 ; count1 < 16 ; count1++)
   916e6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
   916ea:	3301      	adds	r3, #1
   916ec:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
   916f0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
   916f4:	2b0f      	cmp	r3, #15
   916f6:	d9f2      	bls.n	916de <cl_testharnesscommandhandler+0x143e>
			{
							cl_indata.word = count1;
		//					cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&cl_indata.word,4);
				
			}
			break;
   916f8:	f001 ba3e 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
			case TEST_SCAN_PRESSURE:
				start_pressurecapture = true;
   916fc:	4b58      	ldr	r3, [pc, #352]	; (91860 <cl_testharnesscommandhandler+0x15c0>)
   916fe:	2201      	movs	r2, #1
   91700:	701a      	strb	r2, [r3, #0]
			break;
   91702:	f001 ba39 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
			case TEST_BC_TRIGGER:
				 if(TestMsg.data.byte[1] == 1)
   91706:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   9170a:	2b01      	cmp	r3, #1
   9170c:	d107      	bne.n	9171e <cl_testharnesscommandhandler+0x147e>
				{
					Current_sense_trigger = true;
   9170e:	4b55      	ldr	r3, [pc, #340]	; (91864 <cl_testharnesscommandhandler+0x15c4>)
   91710:	2201      	movs	r2, #1
   91712:	701a      	strb	r2, [r3, #0]
					pdataarray = (Cl_Uint8Type*) "CS_TRIGGER";
   91714:	4b54      	ldr	r3, [pc, #336]	; (91868 <cl_testharnesscommandhandler+0x15c8>)
   91716:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
					 //Cl_AlarmActivateAlarms( PS3_HIGH_THRESHOLD,true );
		//			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,11);

				} 
					
				break;
   9171a:	f001 ba2d 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
					//Cl_AlarmActivateAlarms( FPCURRENTSTATUS,true );
	//				cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,11);
				}
				else
				{
					Current_sense_trigger = false;
   9171e:	4b51      	ldr	r3, [pc, #324]	; (91864 <cl_testharnesscommandhandler+0x15c4>)
   91720:	2200      	movs	r2, #0
   91722:	701a      	strb	r2, [r3, #0]
					pdataarray = (Cl_Uint8Type*) "PS_TRIGGER";
   91724:	4b51      	ldr	r3, [pc, #324]	; (9186c <cl_testharnesscommandhandler+0x15cc>)
   91726:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
					 //Cl_AlarmActivateAlarms( PS3_HIGH_THRESHOLD,true );
		//			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,11);

				} 
					
				break;
   9172a:	f001 ba25 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
				
			case TEST_SYS_VERSION:
					
			pdataarray = (Cl_Uint8Type *)"Ver:T.4";
   9172e:	4b50      	ldr	r3, [pc, #320]	; (91870 <cl_testharnesscommandhandler+0x15d0>)
   91730:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,7);
   91734:	2018      	movs	r0, #24
   91736:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
   9173a:	2207      	movs	r2, #7
   9173c:	4b4d      	ldr	r3, [pc, #308]	; (91874 <cl_testharnesscommandhandler+0x15d4>)
   9173e:	4798      	blx	r3
   91740:	4603      	mov	r3, r0
   91742:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
			//cl_testgetversion(&version);
			//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_SYS_VERSION,&version,1);
			//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_SYS_VERSION,"K",1);
			break;
   91746:	f001 ba17 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>

								//		cl_sys_statbuffer.levelswitch1 = true;
		
	
							#endif
							sv_cntrl_activate_valve(VALVE_ID4);
   9174a:	2004      	movs	r0, #4
   9174c:	4b3b      	ldr	r3, [pc, #236]	; (9183c <cl_testharnesscommandhandler+0x159c>)
   9174e:	4798      	blx	r3
							cl_wait(50);
   91750:	2032      	movs	r0, #50	; 0x32
   91752:	4b3e      	ldr	r3, [pc, #248]	; (9184c <cl_testharnesscommandhandler+0x15ac>)
   91754:	4798      	blx	r3
							sv_cntrl_deactivate_valve(VALVE_ID4);
   91756:	2004      	movs	r0, #4
   91758:	4b32      	ldr	r3, [pc, #200]	; (91824 <cl_testharnesscommandhandler+0x1584>)
   9175a:	4798      	blx	r3
						break;
   9175c:	f001 ba0c 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
			case TEST_SHORT_RINSE:
			sv_prop_startacidpump();
   91760:	4b45      	ldr	r3, [pc, #276]	; (91878 <cl_testharnesscommandhandler+0x15d8>)
   91762:	4798      	blx	r3
							cl_tdata.bytearray[2] = 23;
							Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&test_hstate,1);
						}
							
			#endif
			break;
   91764:	f001 ba08 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
			 case TEST_SET_FLOW_SENSE_ENABLE:
			 
			 	 if(TestMsg.data.byte[1] == 1)
   91768:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   9176c:	2b01      	cmp	r3, #1
   9176e:	d107      	bne.n	91780 <cl_testharnesscommandhandler+0x14e0>
				{
						gflow_en = true;
   91770:	4b42      	ldr	r3, [pc, #264]	; (9187c <cl_testharnesscommandhandler+0x15dc>)
   91772:	2201      	movs	r2, #1
   91774:	701a      	strb	r2, [r3, #0]
					pdataarray = (Cl_Uint8Type*) "FLOW_EN";
   91776:	4b42      	ldr	r3, [pc, #264]	; (91880 <cl_testharnesscommandhandler+0x15e0>)
   91778:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
					pdataarray = (Cl_Uint8Type*) "FLOW_DIS";

		//			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,11);

				} 
				break;
   9177c:	f001 b9fc 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
		//			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,8);
				}
				else
				{
				
					gflow_en = false;
   91780:	4b3e      	ldr	r3, [pc, #248]	; (9187c <cl_testharnesscommandhandler+0x15dc>)
   91782:	2200      	movs	r2, #0
   91784:	701a      	strb	r2, [r3, #0]
					pdataarray = (Cl_Uint8Type*) "FLOW_DIS";
   91786:	4b3f      	ldr	r3, [pc, #252]	; (91884 <cl_testharnesscommandhandler+0x15e4>)
   91788:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

		//			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,11);

				} 
				break;
   9178c:	f001 b9f4 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
		case TEST_START_PROPO:
		sv_prop_startmixing();
   91790:	4b3d      	ldr	r3, [pc, #244]	; (91888 <cl_testharnesscommandhandler+0x15e8>)
   91792:	4798      	blx	r3
		//sv_prop_startacidpump();
		//sv_prop_startbicarbpump();
		
				break;
   91794:	f001 b9f0 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
		
		case TEST_SET_PROPO_RC:
		 sv_prop_set_propo_ACIDrc( TestMsg.data.byte[1]);
   91798:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   9179c:	b29b      	uxth	r3, r3
   9179e:	4618      	mov	r0, r3
   917a0:	4b3a      	ldr	r3, [pc, #232]	; (9188c <cl_testharnesscommandhandler+0x15ec>)
   917a2:	4798      	blx	r3
		break;
   917a4:	f001 b9e8 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
		case TEST_START_PROPO_ALIGN:
		
		 mix_count = 0;
   917a8:	4b39      	ldr	r3, [pc, #228]	; (91890 <cl_testharnesscommandhandler+0x15f0>)
   917aa:	2200      	movs	r2, #0
   917ac:	801a      	strh	r2, [r3, #0]
		//	pdataarray = (Cl_Uint8Type *)"BP_ON";
		//	int16_t temp_10;
		//	int16_t potvalue1;
		//	for ( temp_10 = 0 ; temp_10 < 10; temp_10++)
			{
				Cl_Uint16Type read_data = 0;
   917ae:	2300      	movs	r3, #0
   917b0:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
				
				//  sv_prop_startmixing();
				
			//	sv_cs_setpotvalue(600);
			//for ( temp_10 = 0 ; temp_10 < 1000; temp_10++)
				sv_prop_startpropeo_aligning();
   917b4:	4b37      	ldr	r3, [pc, #220]	; (91894 <cl_testharnesscommandhandler+0x15f4>)
   917b6:	4798      	blx	r3
		
	//	cl_wait(2);
		//	DD_IIC_SEND_PROP( 0x61, 3);
		
			
		break;
   917b8:	f001 b9de 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
		case TEST_STOP_PROPO:
			cl_wait(100);
   917bc:	2064      	movs	r0, #100	; 0x64
   917be:	4b23      	ldr	r3, [pc, #140]	; (9184c <cl_testharnesscommandhandler+0x15ac>)
   917c0:	4798      	blx	r3
		//	int16_t temp_10;
		//	int16_t potvalue1;
			//for ( temp_10 = 0 ; temp_10 < 10000; temp_10++)
			{
				
				  sv_prop_stopmixing();
   917c2:	4b35      	ldr	r3, [pc, #212]	; (91898 <cl_testharnesscommandhandler+0x15f8>)
   917c4:	4798      	blx	r3
				//	cl_thretval =  	sv_cs_setpotvalue(potvalue1);
				//	if(!(temp_10 % 50 ))
				//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp_10,2);
				//	cl_wait(1);
			}
		break;
   917c6:	f001 b9d7 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_BYON:
		sv_cntrl_enable_bypass();
   917ca:	4b34      	ldr	r3, [pc, #208]	; (9189c <cl_testharnesscommandhandler+0x15fc>)
   917cc:	4798      	blx	r3
		break;
   917ce:	f001 b9d3 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_BYOFF:
		sv_cntrl_disable_bypass();
   917d2:	4b33      	ldr	r3, [pc, #204]	; (918a0 <cl_testharnesscommandhandler+0x1600>)
   917d4:	4798      	blx	r3
		break;
   917d6:	f001 b9cf 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_LON:
		sv_cntrl_enable_loopback();
   917da:	4b32      	ldr	r3, [pc, #200]	; (918a4 <cl_testharnesscommandhandler+0x1604>)
   917dc:	4798      	blx	r3
		 sv_prop_stopmixing();
   917de:	4b2e      	ldr	r3, [pc, #184]	; (91898 <cl_testharnesscommandhandler+0x15f8>)
   917e0:	4798      	blx	r3
		// DD_SET_VALVE (VALVE_ID2);
		// DD_SET_VALVE (VALVE_ID3);
		// sv_prop_startmixing();
		break;
   917e2:	f001 b9c9 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_LOFF:
		sv_cntrl_disable_loopback();
   917e6:	4b30      	ldr	r3, [pc, #192]	; (918a8 <cl_testharnesscommandhandler+0x1608>)
   917e8:	4798      	blx	r3
		 sv_prop_stopmixing();
   917ea:	4b2b      	ldr	r3, [pc, #172]	; (91898 <cl_testharnesscommandhandler+0x15f8>)
   917ec:	4798      	blx	r3
		break;
   917ee:	f001 b9c3 	b.w	92b78 <cl_testharnesscommandhandler+0x28d8>
		case TEST_SET_ALARM_LIMIT:
		
						if(TestMsg.datasize == 2)
   917f2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   917f6:	2b02      	cmp	r3, #2
   917f8:	d104      	bne.n	91804 <cl_testharnesscommandhandler+0x1564>
						{
							//rateval = TestMsg.data[1];
							cl_indata.bytearray[0] = TestMsg.data.byte[1];
   917fa:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   917fe:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   91802:	e078      	b.n	918f6 <cl_testharnesscommandhandler+0x1656>
						}
						else if(TestMsg.datasize == 3)
   91804:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   91808:	2b03      	cmp	r3, #3
   9180a:	d14f      	bne.n	918ac <cl_testharnesscommandhandler+0x160c>
						{
							//rateval = (uint16_t)TestMsg.data[1];
							cl_indata.bytearray[1] = TestMsg.data.byte[1];
   9180c:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   91810:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
							cl_indata.bytearray[0] = TestMsg.data.byte[2];
   91814:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   91818:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   9181c:	e06b      	b.n	918f6 <cl_testharnesscommandhandler+0x1656>
   9181e:	bf00      	nop
   91820:	20071a67 	.word	0x20071a67
   91824:	00099ced 	.word	0x00099ced
   91828:	00099c69 	.word	0x00099c69
   9182c:	000a8a58 	.word	0x000a8a58
   91830:	000a8a64 	.word	0x000a8a64
   91834:	00099c2d 	.word	0x00099c2d
   91838:	000a8a70 	.word	0x000a8a70
   9183c:	00099ccd 	.word	0x00099ccd
   91840:	000a8a7c 	.word	0x000a8a7c
   91844:	20071ca4 	.word	0x20071ca4
   91848:	00099dad 	.word	0x00099dad
   9184c:	00093195 	.word	0x00093195
   91850:	20070540 	.word	0x20070540
   91854:	000a8a80 	.word	0x000a8a80
   91858:	00099e2d 	.word	0x00099e2d
   9185c:	000a8998 	.word	0x000a8998
   91860:	20071a66 	.word	0x20071a66
   91864:	20070a3a 	.word	0x20070a3a
   91868:	000a8a88 	.word	0x000a8a88
   9186c:	000a8a94 	.word	0x000a8a94
   91870:	000a8aa0 	.word	0x000a8aa0
   91874:	0009ba51 	.word	0x0009ba51
   91878:	0009a091 	.word	0x0009a091
   9187c:	20071a69 	.word	0x20071a69
   91880:	000a8aa8 	.word	0x000a8aa8
   91884:	000a8ab0 	.word	0x000a8ab0
   91888:	0009a075 	.word	0x0009a075
   9188c:	0009a0a5 	.word	0x0009a0a5
   91890:	20071a64 	.word	0x20071a64
   91894:	0009a049 	.word	0x0009a049
   91898:	0009a0c9 	.word	0x0009a0c9
   9189c:	00099e79 	.word	0x00099e79
   918a0:	00099ea1 	.word	0x00099ea1
   918a4:	00099e41 	.word	0x00099e41
   918a8:	00099e5d 	.word	0x00099e5d
							
						}
							else if(TestMsg.datasize == 4)
   918ac:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   918b0:	2b04      	cmp	r3, #4
   918b2:	d10c      	bne.n	918ce <cl_testharnesscommandhandler+0x162e>
						{
							//rateval = (uint16_t)TestMsg.data[1];
							cl_indata.bytearray[2] = TestMsg.data.byte[1];
   918b4:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   918b8:	f887 30b2 	strb.w	r3, [r7, #178]	; 0xb2
							cl_indata.bytearray[1] = TestMsg.data.byte[2];
   918bc:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   918c0:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
							cl_indata.bytearray[0] = TestMsg.data.byte[3];
   918c4:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   918c8:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
   918cc:	e013      	b.n	918f6 <cl_testharnesscommandhandler+0x1656>
							
						}
							else if(TestMsg.datasize == 5)
   918ce:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
   918d2:	2b05      	cmp	r3, #5
   918d4:	d10f      	bne.n	918f6 <cl_testharnesscommandhandler+0x1656>
						{
							//rateval = (uint16_t)TestMsg.data[1];
							cl_indata.bytearray[3] = TestMsg.data.byte[1];
   918d6:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   918da:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
							cl_indata.bytearray[2] = TestMsg.data.byte[2];
   918de:	f897 309a 	ldrb.w	r3, [r7, #154]	; 0x9a
   918e2:	f887 30b2 	strb.w	r3, [r7, #178]	; 0xb2
							cl_indata.bytearray[1] = TestMsg.data.byte[3];
   918e6:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
   918ea:	f887 30b1 	strb.w	r3, [r7, #177]	; 0xb1
							cl_indata.bytearray[0] = TestMsg.data.byte[4];
   918ee:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
   918f2:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0
							
						}
						switch(cl_indata.bytearray[3])
   918f6:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
   918fa:	2b0c      	cmp	r3, #12
   918fc:	d028      	beq.n	91950 <cl_testharnesscommandhandler+0x16b0>
   918fe:	2b0c      	cmp	r3, #12
   91900:	dc11      	bgt.n	91926 <cl_testharnesscommandhandler+0x1686>
   91902:	2b05      	cmp	r3, #5
   91904:	f000 83f5 	beq.w	920f2 <cl_testharnesscommandhandler+0x1e52>
   91908:	2b05      	cmp	r3, #5
   9190a:	dc04      	bgt.n	91916 <cl_testharnesscommandhandler+0x1676>
   9190c:	2b01      	cmp	r3, #1
   9190e:	f000 835c 	beq.w	91fca <cl_testharnesscommandhandler+0x1d2a>
							}else
							{
								Cl_alarmThresholdTable.cond_low_threshold = cl_indata.Twobyte;
							}
							break;
							default:break;
   91912:	f000 be02 	b.w	9251a <cl_testharnesscommandhandler+0x227a>
							cl_indata.bytearray[2] = TestMsg.data.byte[2];
							cl_indata.bytearray[1] = TestMsg.data.byte[3];
							cl_indata.bytearray[0] = TestMsg.data.byte[4];
							
						}
						switch(cl_indata.bytearray[3])
   91916:	2b06      	cmp	r3, #6
   91918:	f000 848e 	beq.w	92238 <cl_testharnesscommandhandler+0x1f98>
   9191c:	2b07      	cmp	r3, #7
   9191e:	f000 8548 	beq.w	923b2 <cl_testharnesscommandhandler+0x2112>
							}else
							{
								Cl_alarmThresholdTable.cond_low_threshold = cl_indata.Twobyte;
							}
							break;
							default:break;
   91922:	f000 bdfa 	b.w	9251a <cl_testharnesscommandhandler+0x227a>
							cl_indata.bytearray[2] = TestMsg.data.byte[2];
							cl_indata.bytearray[1] = TestMsg.data.byte[3];
							cl_indata.bytearray[0] = TestMsg.data.byte[4];
							
						}
						switch(cl_indata.bytearray[3])
   91926:	2b11      	cmp	r3, #17
   91928:	f000 8203 	beq.w	91d32 <cl_testharnesscommandhandler+0x1a92>
   9192c:	2b11      	cmp	r3, #17
   9192e:	dc07      	bgt.n	91940 <cl_testharnesscommandhandler+0x16a0>
   91930:	2b0d      	cmp	r3, #13
   91932:	f000 80af 	beq.w	91a94 <cl_testharnesscommandhandler+0x17f4>
   91936:	2b0e      	cmp	r3, #14
   91938:	f000 814a 	beq.w	91bd0 <cl_testharnesscommandhandler+0x1930>
							}else
							{
								Cl_alarmThresholdTable.cond_low_threshold = cl_indata.Twobyte;
							}
							break;
							default:break;
   9193c:	f000 bded 	b.w	9251a <cl_testharnesscommandhandler+0x227a>
							cl_indata.bytearray[2] = TestMsg.data.byte[2];
							cl_indata.bytearray[1] = TestMsg.data.byte[3];
							cl_indata.bytearray[0] = TestMsg.data.byte[4];
							
						}
						switch(cl_indata.bytearray[3])
   91940:	2b12      	cmp	r3, #18
   91942:	f000 828f 	beq.w	91e64 <cl_testharnesscommandhandler+0x1bc4>
   91946:	2bff      	cmp	r3, #255	; 0xff
   91948:	f000 85d7 	beq.w	924fa <cl_testharnesscommandhandler+0x225a>
							}else
							{
								Cl_alarmThresholdTable.cond_low_threshold = cl_indata.Twobyte;
							}
							break;
							default:break;
   9194c:	f000 bde5 	b.w	9251a <cl_testharnesscommandhandler+0x227a>
							
						}
						switch(cl_indata.bytearray[3])
						{
							case TEST_SENSOR_TEMP1:
							if(cl_indata.bytearray[2]== 1)
   91950:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   91954:	2b01      	cmp	r3, #1
   91956:	d11e      	bne.n	91996 <cl_testharnesscommandhandler+0x16f6>
							{
								Cl_alarmThresholdTable.temp1_high_threshold = cl_indata.Twobyte;
   91958:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   9195c:	4bad      	ldr	r3, [pc, #692]	; (91c14 <cl_testharnesscommandhandler+0x1974>)
   9195e:	4610      	mov	r0, r2
   91960:	4798      	blx	r3
   91962:	4602      	mov	r2, r0
   91964:	4bac      	ldr	r3, [pc, #688]	; (91c18 <cl_testharnesscommandhandler+0x1978>)
   91966:	639a      	str	r2, [r3, #56]	; 0x38
								Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   91968:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   9196c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP1_HIGH",10);
   91970:	2018      	movs	r0, #24
   91972:	49aa      	ldr	r1, [pc, #680]	; (91c1c <cl_testharnesscommandhandler+0x197c>)
   91974:	220a      	movs	r2, #10
   91976:	4baa      	ldr	r3, [pc, #680]	; (91c20 <cl_testharnesscommandhandler+0x1980>)
   91978:	4798      	blx	r3
   9197a:	4603      	mov	r3, r0
   9197c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   91980:	f107 034a 	add.w	r3, r7, #74	; 0x4a
   91984:	2019      	movs	r0, #25
   91986:	4619      	mov	r1, r3
   91988:	2202      	movs	r2, #2
   9198a:	4ba5      	ldr	r3, [pc, #660]	; (91c20 <cl_testharnesscommandhandler+0x1980>)
   9198c:	4798      	blx	r3
   9198e:	4603      	mov	r3, r0
   91990:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   91994:	e07c      	b.n	91a90 <cl_testharnesscommandhandler+0x17f0>
							}
							else if(cl_indata.bytearray[2]== 0)
   91996:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   9199a:	2b00      	cmp	r3, #0
   9199c:	d125      	bne.n	919ea <cl_testharnesscommandhandler+0x174a>
							{
								int16_t temp=0,temp1=0;
   9199e:	2300      	movs	r3, #0
   919a0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
   919a4:	2300      	movs	r3, #0
   919a6:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
								//temp = cl_indata.Twobyte-1000;
								Cl_alarmThresholdTable.temp1_low_threshold =cl_indata.Twobyte;
   919aa:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   919ae:	4b99      	ldr	r3, [pc, #612]	; (91c14 <cl_testharnesscommandhandler+0x1974>)
   919b0:	4610      	mov	r0, r2
   919b2:	4798      	blx	r3
   919b4:	4602      	mov	r2, r0
   919b6:	4b98      	ldr	r3, [pc, #608]	; (91c18 <cl_testharnesscommandhandler+0x1978>)
   919b8:	63da      	str	r2, [r3, #60]	; 0x3c
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   919ba:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   919be:	b29b      	uxth	r3, r3
   919c0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP1_LOW",9);
   919c4:	2018      	movs	r0, #24
   919c6:	4997      	ldr	r1, [pc, #604]	; (91c24 <cl_testharnesscommandhandler+0x1984>)
   919c8:	2209      	movs	r2, #9
   919ca:	4b95      	ldr	r3, [pc, #596]	; (91c20 <cl_testharnesscommandhandler+0x1980>)
   919cc:	4798      	blx	r3
   919ce:	4603      	mov	r3, r0
   919d0:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   919d4:	f107 0348 	add.w	r3, r7, #72	; 0x48
   919d8:	2019      	movs	r0, #25
   919da:	4619      	mov	r1, r3
   919dc:	2202      	movs	r2, #2
   919de:	4b90      	ldr	r3, [pc, #576]	; (91c20 <cl_testharnesscommandhandler+0x1980>)
   919e0:	4798      	blx	r3
   919e2:	4603      	mov	r3, r0
   919e4:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   919e8:	e052      	b.n	91a90 <cl_testharnesscommandhandler+0x17f0>
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							else if(cl_indata.bytearray[2]== 2)
   919ea:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   919ee:	2b02      	cmp	r3, #2
   919f0:	d127      	bne.n	91a42 <cl_testharnesscommandhandler+0x17a2>
							{
								int16_t temp=0,temp1=0;
   919f2:	2300      	movs	r3, #0
   919f4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
   919f8:	2300      	movs	r3, #0
   919fa:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
								//temp = cl_indata.Twobyte-1000;
								test_sensor_status[SENSOR_TEMP1STATUS].test_sensord_data =cl_indata.Twobyte;
   919fe:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   91a02:	b29a      	uxth	r2, r3
   91a04:	4b88      	ldr	r3, [pc, #544]	; (91c28 <cl_testharnesscommandhandler+0x1988>)
   91a06:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
								test_sensor_status[SENSOR_TEMP1STATUS].test_flag = true;
   91a0a:	4b87      	ldr	r3, [pc, #540]	; (91c28 <cl_testharnesscommandhandler+0x1988>)
   91a0c:	2201      	movs	r2, #1
   91a0e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   91a12:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   91a16:	b29b      	uxth	r3, r3
   91a18:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP1_LOW",9);
   91a1c:	2018      	movs	r0, #24
   91a1e:	4981      	ldr	r1, [pc, #516]	; (91c24 <cl_testharnesscommandhandler+0x1984>)
   91a20:	2209      	movs	r2, #9
   91a22:	4b7f      	ldr	r3, [pc, #508]	; (91c20 <cl_testharnesscommandhandler+0x1980>)
   91a24:	4798      	blx	r3
   91a26:	4603      	mov	r3, r0
   91a28:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   91a2c:	f107 0346 	add.w	r3, r7, #70	; 0x46
   91a30:	2019      	movs	r0, #25
   91a32:	4619      	mov	r1, r3
   91a34:	2202      	movs	r2, #2
   91a36:	4b7a      	ldr	r3, [pc, #488]	; (91c20 <cl_testharnesscommandhandler+0x1980>)
   91a38:	4798      	blx	r3
   91a3a:	4603      	mov	r3, r0
   91a3c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   91a40:	e026      	b.n	91a90 <cl_testharnesscommandhandler+0x17f0>
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							else if(cl_indata.bytearray[2]== 3)
   91a42:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   91a46:	2b03      	cmp	r3, #3
   91a48:	d122      	bne.n	91a90 <cl_testharnesscommandhandler+0x17f0>
							{
								int16_t temp=0,temp1=0;
   91a4a:	2300      	movs	r3, #0
   91a4c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
   91a50:	2300      	movs	r3, #0
   91a52:	f8a7 30f4 	strh.w	r3, [r7, #244]	; 0xf4
								//temp = cl_indata.Twobyte-1000;
								//test_sensor_status[TEST_SENSOR_TEMP1].test_sensord_data =cl_indata.Twobyte;
								test_sensor_status[SENSOR_TEMP1STATUS].test_flag = false;
   91a56:	4b74      	ldr	r3, [pc, #464]	; (91c28 <cl_testharnesscommandhandler+0x1988>)
   91a58:	2200      	movs	r2, #0
   91a5a:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   91a5e:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   91a62:	b29b      	uxth	r3, r3
   91a64:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP1",5);
   91a68:	2018      	movs	r0, #24
   91a6a:	4970      	ldr	r1, [pc, #448]	; (91c2c <cl_testharnesscommandhandler+0x198c>)
   91a6c:	2205      	movs	r2, #5
   91a6e:	4b6c      	ldr	r3, [pc, #432]	; (91c20 <cl_testharnesscommandhandler+0x1980>)
   91a70:	4798      	blx	r3
   91a72:	4603      	mov	r3, r0
   91a74:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   91a78:	f107 0344 	add.w	r3, r7, #68	; 0x44
   91a7c:	2019      	movs	r0, #25
   91a7e:	4619      	mov	r1, r3
   91a80:	2202      	movs	r2, #2
   91a82:	4b67      	ldr	r3, [pc, #412]	; (91c20 <cl_testharnesscommandhandler+0x1980>)
   91a84:	4798      	blx	r3
   91a86:	4603      	mov	r3, r0
   91a88:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   91a8c:	f000 bd45 	b.w	9251a <cl_testharnesscommandhandler+0x227a>
   91a90:	f000 bd43 	b.w	9251a <cl_testharnesscommandhandler+0x227a>
							case TEST_SENSOR_TEMP2:
							if(cl_indata.bytearray[2]== 1)
   91a94:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   91a98:	2b01      	cmp	r3, #1
   91a9a:	d11e      	bne.n	91ada <cl_testharnesscommandhandler+0x183a>
							{
								Cl_alarmThresholdTable.temp2_high_threshold = cl_indata.Twobyte;
   91a9c:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   91aa0:	4b5c      	ldr	r3, [pc, #368]	; (91c14 <cl_testharnesscommandhandler+0x1974>)
   91aa2:	4610      	mov	r0, r2
   91aa4:	4798      	blx	r3
   91aa6:	4602      	mov	r2, r0
   91aa8:	4b5b      	ldr	r3, [pc, #364]	; (91c18 <cl_testharnesscommandhandler+0x1978>)
   91aaa:	641a      	str	r2, [r3, #64]	; 0x40
								Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   91aac:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   91ab0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP2_HIGH",10);
   91ab4:	2018      	movs	r0, #24
   91ab6:	495e      	ldr	r1, [pc, #376]	; (91c30 <cl_testharnesscommandhandler+0x1990>)
   91ab8:	220a      	movs	r2, #10
   91aba:	4b59      	ldr	r3, [pc, #356]	; (91c20 <cl_testharnesscommandhandler+0x1980>)
   91abc:	4798      	blx	r3
   91abe:	4603      	mov	r3, r0
   91ac0:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   91ac4:	f107 0342 	add.w	r3, r7, #66	; 0x42
   91ac8:	2019      	movs	r0, #25
   91aca:	4619      	mov	r1, r3
   91acc:	2202      	movs	r2, #2
   91ace:	4b54      	ldr	r3, [pc, #336]	; (91c20 <cl_testharnesscommandhandler+0x1980>)
   91ad0:	4798      	blx	r3
   91ad2:	4603      	mov	r3, r0
   91ad4:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   91ad8:	e078      	b.n	91bcc <cl_testharnesscommandhandler+0x192c>
							}
							else if (cl_indata.bytearray[2]== 0)
   91ada:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   91ade:	2b00      	cmp	r3, #0
   91ae0:	d125      	bne.n	91b2e <cl_testharnesscommandhandler+0x188e>
							{
								int16_t temp=0,temp1=0;
   91ae2:	2300      	movs	r3, #0
   91ae4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
   91ae8:	2300      	movs	r3, #0
   91aea:	f8a7 30f2 	strh.w	r3, [r7, #242]	; 0xf2
								//temp = cl_indata.Twobyte-1000;
								Cl_alarmThresholdTable.temp2_low_threshold =cl_indata.Twobyte;
   91aee:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   91af2:	4b48      	ldr	r3, [pc, #288]	; (91c14 <cl_testharnesscommandhandler+0x1974>)
   91af4:	4610      	mov	r0, r2
   91af6:	4798      	blx	r3
   91af8:	4602      	mov	r2, r0
   91afa:	4b47      	ldr	r3, [pc, #284]	; (91c18 <cl_testharnesscommandhandler+0x1978>)
   91afc:	645a      	str	r2, [r3, #68]	; 0x44
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   91afe:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   91b02:	b29b      	uxth	r3, r3
   91b04:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP2_LOW",9);
   91b08:	2018      	movs	r0, #24
   91b0a:	494a      	ldr	r1, [pc, #296]	; (91c34 <cl_testharnesscommandhandler+0x1994>)
   91b0c:	2209      	movs	r2, #9
   91b0e:	4b44      	ldr	r3, [pc, #272]	; (91c20 <cl_testharnesscommandhandler+0x1980>)
   91b10:	4798      	blx	r3
   91b12:	4603      	mov	r3, r0
   91b14:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   91b18:	f107 0340 	add.w	r3, r7, #64	; 0x40
   91b1c:	2019      	movs	r0, #25
   91b1e:	4619      	mov	r1, r3
   91b20:	2202      	movs	r2, #2
   91b22:	4b3f      	ldr	r3, [pc, #252]	; (91c20 <cl_testharnesscommandhandler+0x1980>)
   91b24:	4798      	blx	r3
   91b26:	4603      	mov	r3, r0
   91b28:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   91b2c:	e04e      	b.n	91bcc <cl_testharnesscommandhandler+0x192c>
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							else if(cl_indata.bytearray[2]== 2)
   91b2e:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   91b32:	2b02      	cmp	r3, #2
   91b34:	d125      	bne.n	91b82 <cl_testharnesscommandhandler+0x18e2>
							{
								int16_t temp=0,temp1=0;
   91b36:	2300      	movs	r3, #0
   91b38:	87fb      	strh	r3, [r7, #62]	; 0x3e
   91b3a:	2300      	movs	r3, #0
   91b3c:	f8a7 30f0 	strh.w	r3, [r7, #240]	; 0xf0
								//temp = cl_indata.Twobyte-1000;
								test_sensor_status[SENSOR_TEMP2STATUS].test_sensord_data =cl_indata.Twobyte;
   91b40:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   91b44:	b29a      	uxth	r2, r3
   91b46:	4b38      	ldr	r3, [pc, #224]	; (91c28 <cl_testharnesscommandhandler+0x1988>)
   91b48:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
								test_sensor_status[SENSOR_TEMP2STATUS].test_flag = true;
   91b4c:	4b36      	ldr	r3, [pc, #216]	; (91c28 <cl_testharnesscommandhandler+0x1988>)
   91b4e:	2201      	movs	r2, #1
   91b50:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   91b54:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   91b58:	b29b      	uxth	r3, r3
   91b5a:	87fb      	strh	r3, [r7, #62]	; 0x3e
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEST",9);
   91b5c:	2018      	movs	r0, #24
   91b5e:	4936      	ldr	r1, [pc, #216]	; (91c38 <cl_testharnesscommandhandler+0x1998>)
   91b60:	2209      	movs	r2, #9
   91b62:	4b2f      	ldr	r3, [pc, #188]	; (91c20 <cl_testharnesscommandhandler+0x1980>)
   91b64:	4798      	blx	r3
   91b66:	4603      	mov	r3, r0
   91b68:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   91b6c:	f107 033e 	add.w	r3, r7, #62	; 0x3e
   91b70:	2019      	movs	r0, #25
   91b72:	4619      	mov	r1, r3
   91b74:	2202      	movs	r2, #2
   91b76:	4b2a      	ldr	r3, [pc, #168]	; (91c20 <cl_testharnesscommandhandler+0x1980>)
   91b78:	4798      	blx	r3
   91b7a:	4603      	mov	r3, r0
   91b7c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   91b80:	e024      	b.n	91bcc <cl_testharnesscommandhandler+0x192c>
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							else if(cl_indata.bytearray[2]== 3)
   91b82:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   91b86:	2b03      	cmp	r3, #3
   91b88:	d120      	bne.n	91bcc <cl_testharnesscommandhandler+0x192c>
							{
								int16_t temp=0,temp1=0;
   91b8a:	2300      	movs	r3, #0
   91b8c:	87bb      	strh	r3, [r7, #60]	; 0x3c
   91b8e:	2300      	movs	r3, #0
   91b90:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
								//temp = cl_indata.Twobyte-1000;
								//test_sensor_status[TEST_SENSOR_TEMP1].test_sensord_data =cl_indata.Twobyte;
								test_sensor_status[SENSOR_TEMP2STATUS].test_flag = false;
   91b94:	4b24      	ldr	r3, [pc, #144]	; (91c28 <cl_testharnesscommandhandler+0x1988>)
   91b96:	2200      	movs	r2, #0
   91b98:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   91b9c:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   91ba0:	b29b      	uxth	r3, r3
   91ba2:	87bb      	strh	r3, [r7, #60]	; 0x3c
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP2",5);
   91ba4:	2018      	movs	r0, #24
   91ba6:	4925      	ldr	r1, [pc, #148]	; (91c3c <cl_testharnesscommandhandler+0x199c>)
   91ba8:	2205      	movs	r2, #5
   91baa:	4b1d      	ldr	r3, [pc, #116]	; (91c20 <cl_testharnesscommandhandler+0x1980>)
   91bac:	4798      	blx	r3
   91bae:	4603      	mov	r3, r0
   91bb0:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   91bb4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   91bb8:	2019      	movs	r0, #25
   91bba:	4619      	mov	r1, r3
   91bbc:	2202      	movs	r2, #2
   91bbe:	4b18      	ldr	r3, [pc, #96]	; (91c20 <cl_testharnesscommandhandler+0x1980>)
   91bc0:	4798      	blx	r3
   91bc2:	4603      	mov	r3, r0
   91bc4:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   91bc8:	f000 bca7 	b.w	9251a <cl_testharnesscommandhandler+0x227a>
   91bcc:	f000 bca5 	b.w	9251a <cl_testharnesscommandhandler+0x227a>
							
							
							case TEST_SENSOR_TEMP3:
							if(cl_indata.bytearray[2]== 1)
   91bd0:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   91bd4:	2b01      	cmp	r3, #1
   91bd6:	d135      	bne.n	91c44 <cl_testharnesscommandhandler+0x19a4>
							{
								Cl_alarmThresholdTable.temp3_high_threshold = cl_indata.Twobyte;
   91bd8:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   91bdc:	4b0d      	ldr	r3, [pc, #52]	; (91c14 <cl_testharnesscommandhandler+0x1974>)
   91bde:	4610      	mov	r0, r2
   91be0:	4798      	blx	r3
   91be2:	4602      	mov	r2, r0
   91be4:	4b0c      	ldr	r3, [pc, #48]	; (91c18 <cl_testharnesscommandhandler+0x1978>)
   91be6:	649a      	str	r2, [r3, #72]	; 0x48
								Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   91be8:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   91bec:	877b      	strh	r3, [r7, #58]	; 0x3a
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP_HIGH",8);
   91bee:	2018      	movs	r0, #24
   91bf0:	4913      	ldr	r1, [pc, #76]	; (91c40 <cl_testharnesscommandhandler+0x19a0>)
   91bf2:	2208      	movs	r2, #8
   91bf4:	4b0a      	ldr	r3, [pc, #40]	; (91c20 <cl_testharnesscommandhandler+0x1980>)
   91bf6:	4798      	blx	r3
   91bf8:	4603      	mov	r3, r0
   91bfa:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);								
   91bfe:	f107 033a 	add.w	r3, r7, #58	; 0x3a
   91c02:	2019      	movs	r0, #25
   91c04:	4619      	mov	r1, r3
   91c06:	2202      	movs	r2, #2
   91c08:	4b05      	ldr	r3, [pc, #20]	; (91c20 <cl_testharnesscommandhandler+0x1980>)
   91c0a:	4798      	blx	r3
   91c0c:	4603      	mov	r3, r0
   91c0e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   91c12:	e08d      	b.n	91d30 <cl_testharnesscommandhandler+0x1a90>
   91c14:	000a68a9 	.word	0x000a68a9
   91c18:	20072104 	.word	0x20072104
   91c1c:	000a8abc 	.word	0x000a8abc
   91c20:	0009ba51 	.word	0x0009ba51
   91c24:	000a8ac8 	.word	0x000a8ac8
   91c28:	200725c0 	.word	0x200725c0
   91c2c:	000a8ad4 	.word	0x000a8ad4
   91c30:	000a8adc 	.word	0x000a8adc
   91c34:	000a8ae8 	.word	0x000a8ae8
   91c38:	000a8af4 	.word	0x000a8af4
   91c3c:	000a8afc 	.word	0x000a8afc
   91c40:	000a8b04 	.word	0x000a8b04
							}
							else if (cl_indata.bytearray[2]== 0)
   91c44:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   91c48:	2b00      	cmp	r3, #0
   91c4a:	d123      	bne.n	91c94 <cl_testharnesscommandhandler+0x19f4>
							{
								int16_t temp=0,temp1=0;
   91c4c:	2300      	movs	r3, #0
   91c4e:	873b      	strh	r3, [r7, #56]	; 0x38
   91c50:	2300      	movs	r3, #0
   91c52:	f8a7 30ec 	strh.w	r3, [r7, #236]	; 0xec
								//temp = cl_indata.Twobyte-1000;
								Cl_alarmThresholdTable.temp3_low_threshold =cl_indata.Twobyte;
   91c56:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   91c5a:	4bbc      	ldr	r3, [pc, #752]	; (91f4c <cl_testharnesscommandhandler+0x1cac>)
   91c5c:	4610      	mov	r0, r2
   91c5e:	4798      	blx	r3
   91c60:	4602      	mov	r2, r0
   91c62:	4bbb      	ldr	r3, [pc, #748]	; (91f50 <cl_testharnesscommandhandler+0x1cb0>)
   91c64:	64da      	str	r2, [r3, #76]	; 0x4c
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   91c66:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   91c6a:	b29b      	uxth	r3, r3
   91c6c:	873b      	strh	r3, [r7, #56]	; 0x38
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP_LOW",7);
   91c6e:	2018      	movs	r0, #24
   91c70:	49b8      	ldr	r1, [pc, #736]	; (91f54 <cl_testharnesscommandhandler+0x1cb4>)
   91c72:	2207      	movs	r2, #7
   91c74:	4bb8      	ldr	r3, [pc, #736]	; (91f58 <cl_testharnesscommandhandler+0x1cb8>)
   91c76:	4798      	blx	r3
   91c78:	4603      	mov	r3, r0
   91c7a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   91c7e:	f107 0338 	add.w	r3, r7, #56	; 0x38
   91c82:	2019      	movs	r0, #25
   91c84:	4619      	mov	r1, r3
   91c86:	2202      	movs	r2, #2
   91c88:	4bb3      	ldr	r3, [pc, #716]	; (91f58 <cl_testharnesscommandhandler+0x1cb8>)
   91c8a:	4798      	blx	r3
   91c8c:	4603      	mov	r3, r0
   91c8e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   91c92:	e04d      	b.n	91d30 <cl_testharnesscommandhandler+0x1a90>
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							else if(cl_indata.bytearray[2]== 2)
   91c94:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   91c98:	2b02      	cmp	r3, #2
   91c9a:	d125      	bne.n	91ce8 <cl_testharnesscommandhandler+0x1a48>
							{
								int16_t temp=0,temp1=0;
   91c9c:	2300      	movs	r3, #0
   91c9e:	86fb      	strh	r3, [r7, #54]	; 0x36
   91ca0:	2300      	movs	r3, #0
   91ca2:	f8a7 30ea 	strh.w	r3, [r7, #234]	; 0xea
								//temp = cl_indata.Twobyte-1000;
								test_sensor_status[SENSOR_TEMP3STATUS].test_sensord_data =cl_indata.Twobyte;
   91ca6:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   91caa:	b29a      	uxth	r2, r3
   91cac:	4bab      	ldr	r3, [pc, #684]	; (91f5c <cl_testharnesscommandhandler+0x1cbc>)
   91cae:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
								test_sensor_status[SENSOR_TEMP3STATUS].test_flag = true;
   91cb2:	4baa      	ldr	r3, [pc, #680]	; (91f5c <cl_testharnesscommandhandler+0x1cbc>)
   91cb4:	2201      	movs	r2, #1
   91cb6:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   91cba:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   91cbe:	b29b      	uxth	r3, r3
   91cc0:	86fb      	strh	r3, [r7, #54]	; 0x36
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEST",9);
   91cc2:	2018      	movs	r0, #24
   91cc4:	49a6      	ldr	r1, [pc, #664]	; (91f60 <cl_testharnesscommandhandler+0x1cc0>)
   91cc6:	2209      	movs	r2, #9
   91cc8:	4ba3      	ldr	r3, [pc, #652]	; (91f58 <cl_testharnesscommandhandler+0x1cb8>)
   91cca:	4798      	blx	r3
   91ccc:	4603      	mov	r3, r0
   91cce:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   91cd2:	f107 0336 	add.w	r3, r7, #54	; 0x36
   91cd6:	2019      	movs	r0, #25
   91cd8:	4619      	mov	r1, r3
   91cda:	2202      	movs	r2, #2
   91cdc:	4b9e      	ldr	r3, [pc, #632]	; (91f58 <cl_testharnesscommandhandler+0x1cb8>)
   91cde:	4798      	blx	r3
   91ce0:	4603      	mov	r3, r0
   91ce2:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   91ce6:	e023      	b.n	91d30 <cl_testharnesscommandhandler+0x1a90>
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							else if(cl_indata.bytearray[2]== 3)
   91ce8:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   91cec:	2b03      	cmp	r3, #3
   91cee:	d11f      	bne.n	91d30 <cl_testharnesscommandhandler+0x1a90>
							{
								int16_t temp=0,temp1=0;
   91cf0:	2300      	movs	r3, #0
   91cf2:	86bb      	strh	r3, [r7, #52]	; 0x34
   91cf4:	2300      	movs	r3, #0
   91cf6:	f8a7 30e8 	strh.w	r3, [r7, #232]	; 0xe8
								//temp = cl_indata.Twobyte-1000;
								//test_sensor_status[TEST_SENSOR_TEMP1].test_sensord_data =cl_indata.Twobyte;
								test_sensor_status[SENSOR_TEMP3STATUS].test_flag = false;
   91cfa:	4b98      	ldr	r3, [pc, #608]	; (91f5c <cl_testharnesscommandhandler+0x1cbc>)
   91cfc:	2200      	movs	r2, #0
   91cfe:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   91d02:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   91d06:	b29b      	uxth	r3, r3
   91d08:	86bb      	strh	r3, [r7, #52]	; 0x34
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEMP3",5);
   91d0a:	2018      	movs	r0, #24
   91d0c:	4995      	ldr	r1, [pc, #596]	; (91f64 <cl_testharnesscommandhandler+0x1cc4>)
   91d0e:	2205      	movs	r2, #5
   91d10:	4b91      	ldr	r3, [pc, #580]	; (91f58 <cl_testharnesscommandhandler+0x1cb8>)
   91d12:	4798      	blx	r3
   91d14:	4603      	mov	r3, r0
   91d16:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   91d1a:	f107 0334 	add.w	r3, r7, #52	; 0x34
   91d1e:	2019      	movs	r0, #25
   91d20:	4619      	mov	r1, r3
   91d22:	2202      	movs	r2, #2
   91d24:	4b8c      	ldr	r3, [pc, #560]	; (91f58 <cl_testharnesscommandhandler+0x1cb8>)
   91d26:	4798      	blx	r3
   91d28:	4603      	mov	r3, r0
   91d2a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   91d2e:	e3f4      	b.n	9251a <cl_testharnesscommandhandler+0x227a>
   91d30:	e3f3      	b.n	9251a <cl_testharnesscommandhandler+0x227a>
							
							case TEST_SENSOR_APT:
							if(cl_indata.bytearray[2]== 1)
   91d32:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   91d36:	2b01      	cmp	r3, #1
   91d38:	d11d      	bne.n	91d76 <cl_testharnesscommandhandler+0x1ad6>
								{
								Cl_alarmThresholdTable.apt_high_threshold = cl_indata.Twobyte;
   91d3a:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   91d3e:	4b83      	ldr	r3, [pc, #524]	; (91f4c <cl_testharnesscommandhandler+0x1cac>)
   91d40:	4610      	mov	r0, r2
   91d42:	4798      	blx	r3
   91d44:	4602      	mov	r2, r0
   91d46:	4b82      	ldr	r3, [pc, #520]	; (91f50 <cl_testharnesscommandhandler+0x1cb0>)
   91d48:	609a      	str	r2, [r3, #8]
								Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   91d4a:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   91d4e:	867b      	strh	r3, [r7, #50]	; 0x32
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"APT_HIGH",8);
   91d50:	2018      	movs	r0, #24
   91d52:	4985      	ldr	r1, [pc, #532]	; (91f68 <cl_testharnesscommandhandler+0x1cc8>)
   91d54:	2208      	movs	r2, #8
   91d56:	4b80      	ldr	r3, [pc, #512]	; (91f58 <cl_testharnesscommandhandler+0x1cb8>)
   91d58:	4798      	blx	r3
   91d5a:	4603      	mov	r3, r0
   91d5c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   91d60:	f107 0332 	add.w	r3, r7, #50	; 0x32
   91d64:	2019      	movs	r0, #25
   91d66:	4619      	mov	r1, r3
   91d68:	2202      	movs	r2, #2
   91d6a:	4b7b      	ldr	r3, [pc, #492]	; (91f58 <cl_testharnesscommandhandler+0x1cb8>)
   91d6c:	4798      	blx	r3
   91d6e:	4603      	mov	r3, r0
   91d70:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   91d74:	e075      	b.n	91e62 <cl_testharnesscommandhandler+0x1bc2>
								}
								else if (cl_indata.bytearray[2]== 0)
   91d76:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   91d7a:	2b00      	cmp	r3, #0
   91d7c:	d124      	bne.n	91dc8 <cl_testharnesscommandhandler+0x1b28>
								{
									int16_t temp=0,temp1=0;
   91d7e:	2300      	movs	r3, #0
   91d80:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
   91d84:	2300      	movs	r3, #0
   91d86:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4
									temp = cl_indata.Twobyte-1000;
   91d8a:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   91d8e:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
   91d92:	b29b      	uxth	r3, r3
   91d94:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
									//temp = cl_indata.Twobyte;
									Cl_alarmThresholdTable.apt_low_threshold =temp;
   91d98:	f9b7 20e6 	ldrsh.w	r2, [r7, #230]	; 0xe6
   91d9c:	4b73      	ldr	r3, [pc, #460]	; (91f6c <cl_testharnesscommandhandler+0x1ccc>)
   91d9e:	4610      	mov	r0, r2
   91da0:	4798      	blx	r3
   91da2:	4602      	mov	r2, r0
   91da4:	4b6a      	ldr	r3, [pc, #424]	; (91f50 <cl_testharnesscommandhandler+0x1cb0>)
   91da6:	60da      	str	r2, [r3, #12]
									temp1=temp+1000;
   91da8:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
   91dac:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
   91db0:	b29b      	uxth	r3, r3
   91db2:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4
									cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"APT_LOW= (-)",12);
   91db6:	2018      	movs	r0, #24
   91db8:	496d      	ldr	r1, [pc, #436]	; (91f70 <cl_testharnesscommandhandler+0x1cd0>)
   91dba:	220c      	movs	r2, #12
   91dbc:	4b66      	ldr	r3, [pc, #408]	; (91f58 <cl_testharnesscommandhandler+0x1cb8>)
   91dbe:	4798      	blx	r3
   91dc0:	4603      	mov	r3, r0
   91dc2:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   91dc6:	e04c      	b.n	91e62 <cl_testharnesscommandhandler+0x1bc2>
									//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTNDATA,&temp1,2);
									//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTNDATA,&temp,2);
								}
								else if(cl_indata.bytearray[2]== 2)
   91dc8:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   91dcc:	2b02      	cmp	r3, #2
   91dce:	d124      	bne.n	91e1a <cl_testharnesscommandhandler+0x1b7a>
								{
									int16_t temp=0,temp1=0;
   91dd0:	2300      	movs	r3, #0
   91dd2:	863b      	strh	r3, [r7, #48]	; 0x30
   91dd4:	2300      	movs	r3, #0
   91dd6:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2
									//temp = cl_indata.Twobyte-1000;
									test_sensor_status[SENSOR_APTSTATUS].test_sensord_data =cl_indata.Twobyte;
   91dda:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   91dde:	b29a      	uxth	r2, r3
   91de0:	4b5e      	ldr	r3, [pc, #376]	; (91f5c <cl_testharnesscommandhandler+0x1cbc>)
   91de2:	859a      	strh	r2, [r3, #44]	; 0x2c
									test_sensor_status[SENSOR_APTSTATUS].test_flag = true;
   91de4:	4b5d      	ldr	r3, [pc, #372]	; (91f5c <cl_testharnesscommandhandler+0x1cbc>)
   91de6:	2201      	movs	r2, #1
   91de8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
									//temp1=temp+1000;
									//Cl_Uint16Type temp;
									temp = cl_indata.Twobyte;
   91dec:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   91df0:	b29b      	uxth	r3, r3
   91df2:	863b      	strh	r3, [r7, #48]	; 0x30
									cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEST",9);
   91df4:	2018      	movs	r0, #24
   91df6:	495a      	ldr	r1, [pc, #360]	; (91f60 <cl_testharnesscommandhandler+0x1cc0>)
   91df8:	2209      	movs	r2, #9
   91dfa:	4b57      	ldr	r3, [pc, #348]	; (91f58 <cl_testharnesscommandhandler+0x1cb8>)
   91dfc:	4798      	blx	r3
   91dfe:	4603      	mov	r3, r0
   91e00:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
									cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   91e04:	f107 0330 	add.w	r3, r7, #48	; 0x30
   91e08:	2019      	movs	r0, #25
   91e0a:	4619      	mov	r1, r3
   91e0c:	2202      	movs	r2, #2
   91e0e:	4b52      	ldr	r3, [pc, #328]	; (91f58 <cl_testharnesscommandhandler+0x1cb8>)
   91e10:	4798      	blx	r3
   91e12:	4603      	mov	r3, r0
   91e14:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   91e18:	e023      	b.n	91e62 <cl_testharnesscommandhandler+0x1bc2>
									//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
								}
								else if(cl_indata.bytearray[2]== 3)
   91e1a:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   91e1e:	2b03      	cmp	r3, #3
   91e20:	d11f      	bne.n	91e62 <cl_testharnesscommandhandler+0x1bc2>
								{
									int16_t temp=0,temp1=0;
   91e22:	2300      	movs	r3, #0
   91e24:	85fb      	strh	r3, [r7, #46]	; 0x2e
   91e26:	2300      	movs	r3, #0
   91e28:	f8a7 30e0 	strh.w	r3, [r7, #224]	; 0xe0
									//temp = cl_indata.Twobyte-1000;
									//test_sensor_status[TEST_SENSOR_TEMP1].test_sensord_data =cl_indata.Twobyte;
									test_sensor_status[SENSOR_APTSTATUS].test_flag = false;
   91e2c:	4b4b      	ldr	r3, [pc, #300]	; (91f5c <cl_testharnesscommandhandler+0x1cbc>)
   91e2e:	2200      	movs	r2, #0
   91e30:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
									//temp1=temp+1000;
									//Cl_Uint16Type temp;
									temp = cl_indata.Twobyte;
   91e34:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   91e38:	b29b      	uxth	r3, r3
   91e3a:	85fb      	strh	r3, [r7, #46]	; 0x2e
									cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"APT_LOW",9);
   91e3c:	2018      	movs	r0, #24
   91e3e:	494d      	ldr	r1, [pc, #308]	; (91f74 <cl_testharnesscommandhandler+0x1cd4>)
   91e40:	2209      	movs	r2, #9
   91e42:	4b45      	ldr	r3, [pc, #276]	; (91f58 <cl_testharnesscommandhandler+0x1cb8>)
   91e44:	4798      	blx	r3
   91e46:	4603      	mov	r3, r0
   91e48:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
									cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   91e4c:	f107 032e 	add.w	r3, r7, #46	; 0x2e
   91e50:	2019      	movs	r0, #25
   91e52:	4619      	mov	r1, r3
   91e54:	2202      	movs	r2, #2
   91e56:	4b40      	ldr	r3, [pc, #256]	; (91f58 <cl_testharnesscommandhandler+0x1cb8>)
   91e58:	4798      	blx	r3
   91e5a:	4603      	mov	r3, r0
   91e5c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
									//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
								}
								break;
   91e60:	e35b      	b.n	9251a <cl_testharnesscommandhandler+0x227a>
   91e62:	e35a      	b.n	9251a <cl_testharnesscommandhandler+0x227a>
							break;
							case TEST_SENSOR_VPT:
							if(cl_indata.bytearray[2]== 1)
   91e64:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   91e68:	2b01      	cmp	r3, #1
   91e6a:	d11d      	bne.n	91ea8 <cl_testharnesscommandhandler+0x1c08>
							{
								Cl_alarmThresholdTable.vpt_high_threshold = cl_indata.Twobyte;
   91e6c:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   91e70:	4b36      	ldr	r3, [pc, #216]	; (91f4c <cl_testharnesscommandhandler+0x1cac>)
   91e72:	4610      	mov	r0, r2
   91e74:	4798      	blx	r3
   91e76:	4602      	mov	r2, r0
   91e78:	4b35      	ldr	r3, [pc, #212]	; (91f50 <cl_testharnesscommandhandler+0x1cb0>)
   91e7a:	611a      	str	r2, [r3, #16]
								Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   91e7c:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   91e80:	85bb      	strh	r3, [r7, #44]	; 0x2c
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"VPT_HIGH",8);
   91e82:	2018      	movs	r0, #24
   91e84:	493c      	ldr	r1, [pc, #240]	; (91f78 <cl_testharnesscommandhandler+0x1cd8>)
   91e86:	2208      	movs	r2, #8
   91e88:	4b33      	ldr	r3, [pc, #204]	; (91f58 <cl_testharnesscommandhandler+0x1cb8>)
   91e8a:	4798      	blx	r3
   91e8c:	4603      	mov	r3, r0
   91e8e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   91e92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   91e96:	2019      	movs	r0, #25
   91e98:	4619      	mov	r1, r3
   91e9a:	2202      	movs	r2, #2
   91e9c:	4b2e      	ldr	r3, [pc, #184]	; (91f58 <cl_testharnesscommandhandler+0x1cb8>)
   91e9e:	4798      	blx	r3
   91ea0:	4603      	mov	r3, r0
   91ea2:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   91ea6:	e08f      	b.n	91fc8 <cl_testharnesscommandhandler+0x1d28>
							}
							else if (cl_indata.bytearray[2]== 0)
   91ea8:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   91eac:	2b00      	cmp	r3, #0
   91eae:	d124      	bne.n	91efa <cl_testharnesscommandhandler+0x1c5a>
							{
								int16_t temp=0,temp1=0;
   91eb0:	2300      	movs	r3, #0
   91eb2:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
   91eb6:	2300      	movs	r3, #0
   91eb8:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
								temp = cl_indata.Twobyte-1000;
   91ebc:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   91ec0:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
   91ec4:	b29b      	uxth	r3, r3
   91ec6:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
								//temp = cl_indata.Twobyte;
								Cl_alarmThresholdTable.vpt_low_threshold =temp;
   91eca:	f9b7 20de 	ldrsh.w	r2, [r7, #222]	; 0xde
   91ece:	4b27      	ldr	r3, [pc, #156]	; (91f6c <cl_testharnesscommandhandler+0x1ccc>)
   91ed0:	4610      	mov	r0, r2
   91ed2:	4798      	blx	r3
   91ed4:	4602      	mov	r2, r0
   91ed6:	4b1e      	ldr	r3, [pc, #120]	; (91f50 <cl_testharnesscommandhandler+0x1cb0>)
   91ed8:	615a      	str	r2, [r3, #20]
								temp1=temp+1000;
   91eda:	f8b7 30de 	ldrh.w	r3, [r7, #222]	; 0xde
   91ede:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
   91ee2:	b29b      	uxth	r3, r3
   91ee4:	f8a7 30dc 	strh.w	r3, [r7, #220]	; 0xdc
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"VPT_LOW= (-)",12);
   91ee8:	2018      	movs	r0, #24
   91eea:	4924      	ldr	r1, [pc, #144]	; (91f7c <cl_testharnesscommandhandler+0x1cdc>)
   91eec:	220c      	movs	r2, #12
   91eee:	4b1a      	ldr	r3, [pc, #104]	; (91f58 <cl_testharnesscommandhandler+0x1cb8>)
   91ef0:	4798      	blx	r3
   91ef2:	4603      	mov	r3, r0
   91ef4:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   91ef8:	e066      	b.n	91fc8 <cl_testharnesscommandhandler+0x1d28>
								//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTNDATA,&temp1,2);
								//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTNDATA,&temp,2);
							}
							else if(cl_indata.bytearray[2]== 2)
   91efa:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   91efe:	2b02      	cmp	r3, #2
   91f00:	d13e      	bne.n	91f80 <cl_testharnesscommandhandler+0x1ce0>
							{
								int16_t temp=0,temp1=0;
   91f02:	2300      	movs	r3, #0
   91f04:	857b      	strh	r3, [r7, #42]	; 0x2a
   91f06:	2300      	movs	r3, #0
   91f08:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda
								//temp = cl_indata.Twobyte-1000;
								test_sensor_status[SENSOR_VPTSTATUS].test_sensord_data =cl_indata.Twobyte;
   91f0c:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   91f10:	b29a      	uxth	r2, r3
   91f12:	4b12      	ldr	r3, [pc, #72]	; (91f5c <cl_testharnesscommandhandler+0x1cbc>)
   91f14:	861a      	strh	r2, [r3, #48]	; 0x30
								test_sensor_status[SENSOR_VPTSTATUS].test_flag = true;
   91f16:	4b11      	ldr	r3, [pc, #68]	; (91f5c <cl_testharnesscommandhandler+0x1cbc>)
   91f18:	2201      	movs	r2, #1
   91f1a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   91f1e:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   91f22:	b29b      	uxth	r3, r3
   91f24:	857b      	strh	r3, [r7, #42]	; 0x2a
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEST",9);
   91f26:	2018      	movs	r0, #24
   91f28:	490d      	ldr	r1, [pc, #52]	; (91f60 <cl_testharnesscommandhandler+0x1cc0>)
   91f2a:	2209      	movs	r2, #9
   91f2c:	4b0a      	ldr	r3, [pc, #40]	; (91f58 <cl_testharnesscommandhandler+0x1cb8>)
   91f2e:	4798      	blx	r3
   91f30:	4603      	mov	r3, r0
   91f32:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   91f36:	f107 032a 	add.w	r3, r7, #42	; 0x2a
   91f3a:	2019      	movs	r0, #25
   91f3c:	4619      	mov	r1, r3
   91f3e:	2202      	movs	r2, #2
   91f40:	4b05      	ldr	r3, [pc, #20]	; (91f58 <cl_testharnesscommandhandler+0x1cb8>)
   91f42:	4798      	blx	r3
   91f44:	4603      	mov	r3, r0
   91f46:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   91f4a:	e03d      	b.n	91fc8 <cl_testharnesscommandhandler+0x1d28>
   91f4c:	000a68a9 	.word	0x000a68a9
   91f50:	20072104 	.word	0x20072104
   91f54:	000a8b10 	.word	0x000a8b10
   91f58:	0009ba51 	.word	0x0009ba51
   91f5c:	200725c0 	.word	0x200725c0
   91f60:	000a8af4 	.word	0x000a8af4
   91f64:	000a8b1c 	.word	0x000a8b1c
   91f68:	000a8b24 	.word	0x000a8b24
   91f6c:	000a68b1 	.word	0x000a68b1
   91f70:	000a8b30 	.word	0x000a8b30
   91f74:	000a8b40 	.word	0x000a8b40
   91f78:	000a8b48 	.word	0x000a8b48
   91f7c:	000a8b54 	.word	0x000a8b54
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							else if(cl_indata.bytearray[2]== 3)
   91f80:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   91f84:	2b03      	cmp	r3, #3
   91f86:	d11f      	bne.n	91fc8 <cl_testharnesscommandhandler+0x1d28>
							{
								int16_t temp=0,temp1=0;
   91f88:	2300      	movs	r3, #0
   91f8a:	853b      	strh	r3, [r7, #40]	; 0x28
   91f8c:	2300      	movs	r3, #0
   91f8e:	f8a7 30d8 	strh.w	r3, [r7, #216]	; 0xd8
								//temp = cl_indata.Twobyte-1000;
								//test_sensor_status[TEST_SENSOR_TEMP1].test_sensord_data =cl_indata.Twobyte;
								test_sensor_status[SENSOR_VPTSTATUS].test_flag = false;
   91f92:	4bbb      	ldr	r3, [pc, #748]	; (92280 <cl_testharnesscommandhandler+0x1fe0>)
   91f94:	2200      	movs	r2, #0
   91f96:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   91f9a:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   91f9e:	b29b      	uxth	r3, r3
   91fa0:	853b      	strh	r3, [r7, #40]	; 0x28
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2_LOW",9);
   91fa2:	2018      	movs	r0, #24
   91fa4:	49b7      	ldr	r1, [pc, #732]	; (92284 <cl_testharnesscommandhandler+0x1fe4>)
   91fa6:	2209      	movs	r2, #9
   91fa8:	4bb7      	ldr	r3, [pc, #732]	; (92288 <cl_testharnesscommandhandler+0x1fe8>)
   91faa:	4798      	blx	r3
   91fac:	4603      	mov	r3, r0
   91fae:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   91fb2:	f107 0328 	add.w	r3, r7, #40	; 0x28
   91fb6:	2019      	movs	r0, #25
   91fb8:	4619      	mov	r1, r3
   91fba:	2202      	movs	r2, #2
   91fbc:	4bb2      	ldr	r3, [pc, #712]	; (92288 <cl_testharnesscommandhandler+0x1fe8>)
   91fbe:	4798      	blx	r3
   91fc0:	4603      	mov	r3, r0
   91fc2:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   91fc6:	e2a8      	b.n	9251a <cl_testharnesscommandhandler+0x227a>
   91fc8:	e2a7      	b.n	9251a <cl_testharnesscommandhandler+0x227a>
							break;
							case TEST_SENSOR_COND:
							if(cl_indata.bytearray[2]== 1)
   91fca:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   91fce:	2b01      	cmp	r3, #1
   91fd0:	d11a      	bne.n	92008 <cl_testharnesscommandhandler+0x1d68>
							{
								Cl_alarmThresholdTable.cond_high_threshold = cl_indata.Twobyte;
   91fd2:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   91fd6:	b29a      	uxth	r2, r3
   91fd8:	4bac      	ldr	r3, [pc, #688]	; (9228c <cl_testharnesscommandhandler+0x1fec>)
   91fda:	805a      	strh	r2, [r3, #2]
								Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   91fdc:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   91fe0:	84fb      	strh	r3, [r7, #38]	; 0x26
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"COND_HIGH",8);
   91fe2:	2018      	movs	r0, #24
   91fe4:	49aa      	ldr	r1, [pc, #680]	; (92290 <cl_testharnesscommandhandler+0x1ff0>)
   91fe6:	2208      	movs	r2, #8
   91fe8:	4ba7      	ldr	r3, [pc, #668]	; (92288 <cl_testharnesscommandhandler+0x1fe8>)
   91fea:	4798      	blx	r3
   91fec:	4603      	mov	r3, r0
   91fee:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   91ff2:	f107 0326 	add.w	r3, r7, #38	; 0x26
   91ff6:	2019      	movs	r0, #25
   91ff8:	4619      	mov	r1, r3
   91ffa:	2202      	movs	r2, #2
   91ffc:	4ba2      	ldr	r3, [pc, #648]	; (92288 <cl_testharnesscommandhandler+0x1fe8>)
   91ffe:	4798      	blx	r3
   92000:	4603      	mov	r3, r0
   92002:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   92006:	e073      	b.n	920f0 <cl_testharnesscommandhandler+0x1e50>
							}
							else if(cl_indata.bytearray[2]== 0)
   92008:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   9200c:	2b00      	cmp	r3, #0
   9200e:	d120      	bne.n	92052 <cl_testharnesscommandhandler+0x1db2>
							{
								
								int16_t temp=0,temp1=0;
   92010:	2300      	movs	r3, #0
   92012:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
   92016:	2300      	movs	r3, #0
   92018:	84bb      	strh	r3, [r7, #36]	; 0x24
								//temp = cl_indata.Twobyte-1000;
								Cl_alarmThresholdTable.cond_low_threshold = cl_indata.Twobyte;
   9201a:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   9201e:	b29a      	uxth	r2, r3
   92020:	4b9a      	ldr	r3, [pc, #616]	; (9228c <cl_testharnesscommandhandler+0x1fec>)
   92022:	801a      	strh	r2, [r3, #0]
								temp1=cl_indata.Twobyte;
   92024:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   92028:	b29b      	uxth	r3, r3
   9202a:	84bb      	strh	r3, [r7, #36]	; 0x24
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"COND_LOW",8);
   9202c:	2018      	movs	r0, #24
   9202e:	4999      	ldr	r1, [pc, #612]	; (92294 <cl_testharnesscommandhandler+0x1ff4>)
   92030:	2208      	movs	r2, #8
   92032:	4b95      	ldr	r3, [pc, #596]	; (92288 <cl_testharnesscommandhandler+0x1fe8>)
   92034:	4798      	blx	r3
   92036:	4603      	mov	r3, r0
   92038:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp1,2);
   9203c:	f107 0324 	add.w	r3, r7, #36	; 0x24
   92040:	2019      	movs	r0, #25
   92042:	4619      	mov	r1, r3
   92044:	2202      	movs	r2, #2
   92046:	4b90      	ldr	r3, [pc, #576]	; (92288 <cl_testharnesscommandhandler+0x1fe8>)
   92048:	4798      	blx	r3
   9204a:	4603      	mov	r3, r0
   9204c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   92050:	e04e      	b.n	920f0 <cl_testharnesscommandhandler+0x1e50>
							}
							else if(cl_indata.bytearray[2]== 2)
   92052:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   92056:	2b02      	cmp	r3, #2
   92058:	d123      	bne.n	920a2 <cl_testharnesscommandhandler+0x1e02>
							{
								int16_t temp=0,temp1=0;
   9205a:	2300      	movs	r3, #0
   9205c:	847b      	strh	r3, [r7, #34]	; 0x22
   9205e:	2300      	movs	r3, #0
   92060:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
								//temp = cl_indata.Twobyte-1000;
								test_sensor_status[SENSOR_COND_STATUS].test_sensord_data =cl_indata.Twobyte;
   92064:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   92068:	b29a      	uxth	r2, r3
   9206a:	4b85      	ldr	r3, [pc, #532]	; (92280 <cl_testharnesscommandhandler+0x1fe0>)
   9206c:	839a      	strh	r2, [r3, #28]
								test_sensor_status[SENSOR_COND_STATUS].test_flag = true;
   9206e:	4b84      	ldr	r3, [pc, #528]	; (92280 <cl_testharnesscommandhandler+0x1fe0>)
   92070:	2201      	movs	r2, #1
   92072:	779a      	strb	r2, [r3, #30]
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   92074:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   92078:	b29b      	uxth	r3, r3
   9207a:	847b      	strh	r3, [r7, #34]	; 0x22
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEST",9);
   9207c:	2018      	movs	r0, #24
   9207e:	4986      	ldr	r1, [pc, #536]	; (92298 <cl_testharnesscommandhandler+0x1ff8>)
   92080:	2209      	movs	r2, #9
   92082:	4b81      	ldr	r3, [pc, #516]	; (92288 <cl_testharnesscommandhandler+0x1fe8>)
   92084:	4798      	blx	r3
   92086:	4603      	mov	r3, r0
   92088:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   9208c:	f107 0322 	add.w	r3, r7, #34	; 0x22
   92090:	2019      	movs	r0, #25
   92092:	4619      	mov	r1, r3
   92094:	2202      	movs	r2, #2
   92096:	4b7c      	ldr	r3, [pc, #496]	; (92288 <cl_testharnesscommandhandler+0x1fe8>)
   92098:	4798      	blx	r3
   9209a:	4603      	mov	r3, r0
   9209c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   920a0:	e026      	b.n	920f0 <cl_testharnesscommandhandler+0x1e50>
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							else if(cl_indata.bytearray[2]== 3)
   920a2:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   920a6:	2b03      	cmp	r3, #3
   920a8:	d122      	bne.n	920f0 <cl_testharnesscommandhandler+0x1e50>
							{
								int16_t temp=0,temp1=0;
   920aa:	f107 0320 	add.w	r3, r7, #32
   920ae:	2200      	movs	r2, #0
   920b0:	801a      	strh	r2, [r3, #0]
   920b2:	2300      	movs	r3, #0
   920b4:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
								//temp = cl_indata.Twobyte-1000;
								//test_sensor_status[TEST_SENSOR_TEMP1].test_sensord_data =cl_indata.Twobyte;
								test_sensor_status[SENSOR_COND_STATUS].test_flag = false;
   920b8:	4b71      	ldr	r3, [pc, #452]	; (92280 <cl_testharnesscommandhandler+0x1fe0>)
   920ba:	2200      	movs	r2, #0
   920bc:	779a      	strb	r2, [r3, #30]
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   920be:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   920c2:	b29a      	uxth	r2, r3
   920c4:	f107 0320 	add.w	r3, r7, #32
   920c8:	801a      	strh	r2, [r3, #0]
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"CON_LOW",7);
   920ca:	2018      	movs	r0, #24
   920cc:	4973      	ldr	r1, [pc, #460]	; (9229c <cl_testharnesscommandhandler+0x1ffc>)
   920ce:	2207      	movs	r2, #7
   920d0:	4b6d      	ldr	r3, [pc, #436]	; (92288 <cl_testharnesscommandhandler+0x1fe8>)
   920d2:	4798      	blx	r3
   920d4:	4603      	mov	r3, r0
   920d6:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   920da:	f107 0320 	add.w	r3, r7, #32
   920de:	2019      	movs	r0, #25
   920e0:	4619      	mov	r1, r3
   920e2:	2202      	movs	r2, #2
   920e4:	4b68      	ldr	r3, [pc, #416]	; (92288 <cl_testharnesscommandhandler+0x1fe8>)
   920e6:	4798      	blx	r3
   920e8:	4603      	mov	r3, r0
   920ea:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   920ee:	e214      	b.n	9251a <cl_testharnesscommandhandler+0x227a>
   920f0:	e213      	b.n	9251a <cl_testharnesscommandhandler+0x227a>
							
							case TEST_SENSOR_PS1:
							if(cl_indata.bytearray[2]== 1)
   920f2:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   920f6:	2b01      	cmp	r3, #1
   920f8:	d11f      	bne.n	9213a <cl_testharnesscommandhandler+0x1e9a>
							{
								Cl_alarmThresholdTable.ps1_high_threshold = cl_indata.Twobyte;
   920fa:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   920fe:	4b68      	ldr	r3, [pc, #416]	; (922a0 <cl_testharnesscommandhandler+0x2000>)
   92100:	4610      	mov	r0, r2
   92102:	4798      	blx	r3
   92104:	4602      	mov	r2, r0
   92106:	4b61      	ldr	r3, [pc, #388]	; (9228c <cl_testharnesscommandhandler+0x1fec>)
   92108:	619a      	str	r2, [r3, #24]
								Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   9210a:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   9210e:	f107 031e 	add.w	r3, r7, #30
   92112:	801a      	strh	r2, [r3, #0]
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS1_HIGH",8);
   92114:	2018      	movs	r0, #24
   92116:	4963      	ldr	r1, [pc, #396]	; (922a4 <cl_testharnesscommandhandler+0x2004>)
   92118:	2208      	movs	r2, #8
   9211a:	4b5b      	ldr	r3, [pc, #364]	; (92288 <cl_testharnesscommandhandler+0x1fe8>)
   9211c:	4798      	blx	r3
   9211e:	4603      	mov	r3, r0
   92120:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   92124:	f107 031e 	add.w	r3, r7, #30
   92128:	2019      	movs	r0, #25
   9212a:	4619      	mov	r1, r3
   9212c:	2202      	movs	r2, #2
   9212e:	4b56      	ldr	r3, [pc, #344]	; (92288 <cl_testharnesscommandhandler+0x1fe8>)
   92130:	4798      	blx	r3
   92132:	4603      	mov	r3, r0
   92134:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   92138:	e07d      	b.n	92236 <cl_testharnesscommandhandler+0x1f96>
							}
							else if (cl_indata.bytearray[2]== 0)
   9213a:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   9213e:	2b00      	cmp	r3, #0
   92140:	d124      	bne.n	9218c <cl_testharnesscommandhandler+0x1eec>
							{
								int16_t temp=0,temp1=0;
   92142:	2300      	movs	r3, #0
   92144:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
   92148:	2300      	movs	r3, #0
   9214a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
								temp = cl_indata.Twobyte-1000;
   9214e:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   92152:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
   92156:	b29b      	uxth	r3, r3
   92158:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
								//temp = cl_indata.Twobyte;
								Cl_alarmThresholdTable.ps1_low_threshold =temp;
   9215c:	f9b7 20d0 	ldrsh.w	r2, [r7, #208]	; 0xd0
   92160:	4b51      	ldr	r3, [pc, #324]	; (922a8 <cl_testharnesscommandhandler+0x2008>)
   92162:	4610      	mov	r0, r2
   92164:	4798      	blx	r3
   92166:	4602      	mov	r2, r0
   92168:	4b48      	ldr	r3, [pc, #288]	; (9228c <cl_testharnesscommandhandler+0x1fec>)
   9216a:	61da      	str	r2, [r3, #28]
								temp1=temp+1000;
   9216c:	f8b7 30d0 	ldrh.w	r3, [r7, #208]	; 0xd0
   92170:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
   92174:	b29b      	uxth	r3, r3
   92176:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS1_LOW= (-)",12);
   9217a:	2018      	movs	r0, #24
   9217c:	494b      	ldr	r1, [pc, #300]	; (922ac <cl_testharnesscommandhandler+0x200c>)
   9217e:	220c      	movs	r2, #12
   92180:	4b41      	ldr	r3, [pc, #260]	; (92288 <cl_testharnesscommandhandler+0x1fe8>)
   92182:	4798      	blx	r3
   92184:	4603      	mov	r3, r0
   92186:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   9218a:	e054      	b.n	92236 <cl_testharnesscommandhandler+0x1f96>
								//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTNDATA,&temp1,2);
								//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTNDATA,&temp,2);
							}
							else if(cl_indata.bytearray[2]== 2)
   9218c:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   92190:	2b02      	cmp	r3, #2
   92192:	d128      	bne.n	921e6 <cl_testharnesscommandhandler+0x1f46>
							{
								int16_t temp=0,temp1=0;
   92194:	f107 031c 	add.w	r3, r7, #28
   92198:	2200      	movs	r2, #0
   9219a:	801a      	strh	r2, [r3, #0]
   9219c:	2300      	movs	r3, #0
   9219e:	f8a7 30cc 	strh.w	r3, [r7, #204]	; 0xcc
								//temp = cl_indata.Twobyte-1000;
								test_sensor_status[SENSOR_PS1STATUS].test_sensord_data =cl_indata.Twobyte;
   921a2:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   921a6:	b29a      	uxth	r2, r3
   921a8:	4b35      	ldr	r3, [pc, #212]	; (92280 <cl_testharnesscommandhandler+0x1fe0>)
   921aa:	871a      	strh	r2, [r3, #56]	; 0x38
								test_sensor_status[SENSOR_PS1STATUS].test_flag = true;
   921ac:	4b34      	ldr	r3, [pc, #208]	; (92280 <cl_testharnesscommandhandler+0x1fe0>)
   921ae:	2201      	movs	r2, #1
   921b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   921b4:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   921b8:	b29a      	uxth	r2, r3
   921ba:	f107 031c 	add.w	r3, r7, #28
   921be:	801a      	strh	r2, [r3, #0]
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEST",9);
   921c0:	2018      	movs	r0, #24
   921c2:	4935      	ldr	r1, [pc, #212]	; (92298 <cl_testharnesscommandhandler+0x1ff8>)
   921c4:	2209      	movs	r2, #9
   921c6:	4b30      	ldr	r3, [pc, #192]	; (92288 <cl_testharnesscommandhandler+0x1fe8>)
   921c8:	4798      	blx	r3
   921ca:	4603      	mov	r3, r0
   921cc:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   921d0:	f107 031c 	add.w	r3, r7, #28
   921d4:	2019      	movs	r0, #25
   921d6:	4619      	mov	r1, r3
   921d8:	2202      	movs	r2, #2
   921da:	4b2b      	ldr	r3, [pc, #172]	; (92288 <cl_testharnesscommandhandler+0x1fe8>)
   921dc:	4798      	blx	r3
   921de:	4603      	mov	r3, r0
   921e0:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   921e4:	e027      	b.n	92236 <cl_testharnesscommandhandler+0x1f96>
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							else if(cl_indata.bytearray[2]== 3)
   921e6:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   921ea:	2b03      	cmp	r3, #3
   921ec:	d123      	bne.n	92236 <cl_testharnesscommandhandler+0x1f96>
							{
								int16_t temp=0,temp1=0;
   921ee:	f107 031a 	add.w	r3, r7, #26
   921f2:	2200      	movs	r2, #0
   921f4:	801a      	strh	r2, [r3, #0]
   921f6:	2300      	movs	r3, #0
   921f8:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
								//temp = cl_indata.Twobyte-1000;
								//test_sensor_status[TEST_SENSOR_TEMP1].test_sensord_data =cl_indata.Twobyte;
								test_sensor_status[SENSOR_PS1STATUS].test_flag = false;
   921fc:	4b20      	ldr	r3, [pc, #128]	; (92280 <cl_testharnesscommandhandler+0x1fe0>)
   921fe:	2200      	movs	r2, #0
   92200:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   92204:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   92208:	b29a      	uxth	r2, r3
   9220a:	f107 031a 	add.w	r3, r7, #26
   9220e:	801a      	strh	r2, [r3, #0]
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2_LOW",9);
   92210:	2018      	movs	r0, #24
   92212:	491c      	ldr	r1, [pc, #112]	; (92284 <cl_testharnesscommandhandler+0x1fe4>)
   92214:	2209      	movs	r2, #9
   92216:	4b1c      	ldr	r3, [pc, #112]	; (92288 <cl_testharnesscommandhandler+0x1fe8>)
   92218:	4798      	blx	r3
   9221a:	4603      	mov	r3, r0
   9221c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   92220:	f107 031a 	add.w	r3, r7, #26
   92224:	2019      	movs	r0, #25
   92226:	4619      	mov	r1, r3
   92228:	2202      	movs	r2, #2
   9222a:	4b17      	ldr	r3, [pc, #92]	; (92288 <cl_testharnesscommandhandler+0x1fe8>)
   9222c:	4798      	blx	r3
   9222e:	4603      	mov	r3, r0
   92230:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   92234:	e171      	b.n	9251a <cl_testharnesscommandhandler+0x227a>
   92236:	e170      	b.n	9251a <cl_testharnesscommandhandler+0x227a>
							case TEST_SENSOR_PS2:
							if(cl_indata.bytearray[2]== 1)
   92238:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   9223c:	2b01      	cmp	r3, #1
   9223e:	d139      	bne.n	922b4 <cl_testharnesscommandhandler+0x2014>
							{
								Cl_alarmThresholdTable.ps2_high_threshold = cl_indata.Twobyte;
   92240:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   92244:	4b16      	ldr	r3, [pc, #88]	; (922a0 <cl_testharnesscommandhandler+0x2000>)
   92246:	4610      	mov	r0, r2
   92248:	4798      	blx	r3
   9224a:	4602      	mov	r2, r0
   9224c:	4b0f      	ldr	r3, [pc, #60]	; (9228c <cl_testharnesscommandhandler+0x1fec>)
   9224e:	621a      	str	r2, [r3, #32]
								Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   92250:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   92254:	f107 0318 	add.w	r3, r7, #24
   92258:	801a      	strh	r2, [r3, #0]
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2",3);
   9225a:	2018      	movs	r0, #24
   9225c:	4914      	ldr	r1, [pc, #80]	; (922b0 <cl_testharnesscommandhandler+0x2010>)
   9225e:	2203      	movs	r2, #3
   92260:	4b09      	ldr	r3, [pc, #36]	; (92288 <cl_testharnesscommandhandler+0x1fe8>)
   92262:	4798      	blx	r3
   92264:	4603      	mov	r3, r0
   92266:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   9226a:	f107 0318 	add.w	r3, r7, #24
   9226e:	2019      	movs	r0, #25
   92270:	4619      	mov	r1, r3
   92272:	2202      	movs	r2, #2
   92274:	4b04      	ldr	r3, [pc, #16]	; (92288 <cl_testharnesscommandhandler+0x1fe8>)
   92276:	4798      	blx	r3
   92278:	4603      	mov	r3, r0
   9227a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   9227e:	e097      	b.n	923b0 <cl_testharnesscommandhandler+0x2110>
   92280:	200725c0 	.word	0x200725c0
   92284:	000a8b64 	.word	0x000a8b64
   92288:	0009ba51 	.word	0x0009ba51
   9228c:	20072104 	.word	0x20072104
   92290:	000a8b6c 	.word	0x000a8b6c
   92294:	000a8b78 	.word	0x000a8b78
   92298:	000a8af4 	.word	0x000a8af4
   9229c:	000a8b84 	.word	0x000a8b84
   922a0:	000a68a9 	.word	0x000a68a9
   922a4:	000a8b8c 	.word	0x000a8b8c
   922a8:	000a68b1 	.word	0x000a68b1
   922ac:	000a8b98 	.word	0x000a8b98
   922b0:	000a8ba8 	.word	0x000a8ba8
							}
							else if (cl_indata.bytearray[2]== 0)
   922b4:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   922b8:	2b00      	cmp	r3, #0
   922ba:	d124      	bne.n	92306 <cl_testharnesscommandhandler+0x2066>
							{
								int16_t temp=0,temp1=0;
   922bc:	2300      	movs	r3, #0
   922be:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
   922c2:	2300      	movs	r3, #0
   922c4:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
								temp = cl_indata.Twobyte-1000;
   922c8:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   922cc:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
   922d0:	b29b      	uxth	r3, r3
   922d2:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
								Cl_alarmThresholdTable.ps2_low_threshold = temp;
   922d6:	f9b7 20c8 	ldrsh.w	r2, [r7, #200]	; 0xc8
   922da:	4bb1      	ldr	r3, [pc, #708]	; (925a0 <cl_testharnesscommandhandler+0x2300>)
   922dc:	4610      	mov	r0, r2
   922de:	4798      	blx	r3
   922e0:	4602      	mov	r2, r0
   922e2:	4bb0      	ldr	r3, [pc, #704]	; (925a4 <cl_testharnesscommandhandler+0x2304>)
   922e4:	625a      	str	r2, [r3, #36]	; 0x24
								temp1=temp+1000;
   922e6:	f8b7 30c8 	ldrh.w	r3, [r7, #200]	; 0xc8
   922ea:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
   922ee:	b29b      	uxth	r3, r3
   922f0:	f8a7 30c6 	strh.w	r3, [r7, #198]	; 0xc6
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2_LOW= (-)",12);
   922f4:	2018      	movs	r0, #24
   922f6:	49ac      	ldr	r1, [pc, #688]	; (925a8 <cl_testharnesscommandhandler+0x2308>)
   922f8:	220c      	movs	r2, #12
   922fa:	4bac      	ldr	r3, [pc, #688]	; (925ac <cl_testharnesscommandhandler+0x230c>)
   922fc:	4798      	blx	r3
   922fe:	4603      	mov	r3, r0
   92300:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   92304:	e054      	b.n	923b0 <cl_testharnesscommandhandler+0x2110>
								//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTNDATA,&temp1,2);
							}
							else if(cl_indata.bytearray[2]== 2)
   92306:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   9230a:	2b02      	cmp	r3, #2
   9230c:	d128      	bne.n	92360 <cl_testharnesscommandhandler+0x20c0>
							{
								int16_t temp=0,temp1=0;
   9230e:	f107 0316 	add.w	r3, r7, #22
   92312:	2200      	movs	r2, #0
   92314:	801a      	strh	r2, [r3, #0]
   92316:	2300      	movs	r3, #0
   92318:	f8a7 30c4 	strh.w	r3, [r7, #196]	; 0xc4
								//temp = cl_indata.Twobyte-1000;
								test_sensor_status[SENSOR_PS2STATUS].test_sensord_data =cl_indata.Twobyte;
   9231c:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   92320:	b29a      	uxth	r2, r3
   92322:	4ba3      	ldr	r3, [pc, #652]	; (925b0 <cl_testharnesscommandhandler+0x2310>)
   92324:	879a      	strh	r2, [r3, #60]	; 0x3c
								test_sensor_status[SENSOR_PS2STATUS].test_flag = true;
   92326:	4ba2      	ldr	r3, [pc, #648]	; (925b0 <cl_testharnesscommandhandler+0x2310>)
   92328:	2201      	movs	r2, #1
   9232a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   9232e:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   92332:	b29a      	uxth	r2, r3
   92334:	f107 0316 	add.w	r3, r7, #22
   92338:	801a      	strh	r2, [r3, #0]
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEST",9);
   9233a:	2018      	movs	r0, #24
   9233c:	499d      	ldr	r1, [pc, #628]	; (925b4 <cl_testharnesscommandhandler+0x2314>)
   9233e:	2209      	movs	r2, #9
   92340:	4b9a      	ldr	r3, [pc, #616]	; (925ac <cl_testharnesscommandhandler+0x230c>)
   92342:	4798      	blx	r3
   92344:	4603      	mov	r3, r0
   92346:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   9234a:	f107 0316 	add.w	r3, r7, #22
   9234e:	2019      	movs	r0, #25
   92350:	4619      	mov	r1, r3
   92352:	2202      	movs	r2, #2
   92354:	4b95      	ldr	r3, [pc, #596]	; (925ac <cl_testharnesscommandhandler+0x230c>)
   92356:	4798      	blx	r3
   92358:	4603      	mov	r3, r0
   9235a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   9235e:	e027      	b.n	923b0 <cl_testharnesscommandhandler+0x2110>
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							else if(cl_indata.bytearray[2]== 3)
   92360:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   92364:	2b03      	cmp	r3, #3
   92366:	d123      	bne.n	923b0 <cl_testharnesscommandhandler+0x2110>
							{
								int16_t temp=0,temp1=0;
   92368:	f107 0314 	add.w	r3, r7, #20
   9236c:	2200      	movs	r2, #0
   9236e:	801a      	strh	r2, [r3, #0]
   92370:	2300      	movs	r3, #0
   92372:	f8a7 30c2 	strh.w	r3, [r7, #194]	; 0xc2
								//temp = cl_indata.Twobyte-1000;
								//test_sensor_status[TEST_SENSOR_TEMP1].test_sensord_data =cl_indata.Twobyte;
								test_sensor_status[SENSOR_PS2STATUS].test_flag = false;
   92376:	4b8e      	ldr	r3, [pc, #568]	; (925b0 <cl_testharnesscommandhandler+0x2310>)
   92378:	2200      	movs	r2, #0
   9237a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   9237e:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   92382:	b29a      	uxth	r2, r3
   92384:	f107 0314 	add.w	r3, r7, #20
   92388:	801a      	strh	r2, [r3, #0]
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2_LOW",9);
   9238a:	2018      	movs	r0, #24
   9238c:	498a      	ldr	r1, [pc, #552]	; (925b8 <cl_testharnesscommandhandler+0x2318>)
   9238e:	2209      	movs	r2, #9
   92390:	4b86      	ldr	r3, [pc, #536]	; (925ac <cl_testharnesscommandhandler+0x230c>)
   92392:	4798      	blx	r3
   92394:	4603      	mov	r3, r0
   92396:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   9239a:	f107 0314 	add.w	r3, r7, #20
   9239e:	2019      	movs	r0, #25
   923a0:	4619      	mov	r1, r3
   923a2:	2202      	movs	r2, #2
   923a4:	4b81      	ldr	r3, [pc, #516]	; (925ac <cl_testharnesscommandhandler+0x230c>)
   923a6:	4798      	blx	r3
   923a8:	4603      	mov	r3, r0
   923aa:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   923ae:	e0b4      	b.n	9251a <cl_testharnesscommandhandler+0x227a>
   923b0:	e0b3      	b.n	9251a <cl_testharnesscommandhandler+0x227a>
							case TEST_SENSOR_PS3:
							if(cl_indata.bytearray[2]== 1)
   923b2:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   923b6:	2b01      	cmp	r3, #1
   923b8:	d11f      	bne.n	923fa <cl_testharnesscommandhandler+0x215a>
							{
								Cl_alarmThresholdTable.ps3_high_threshold = cl_indata.Twobyte;
   923ba:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   923be:	4b7f      	ldr	r3, [pc, #508]	; (925bc <cl_testharnesscommandhandler+0x231c>)
   923c0:	4610      	mov	r0, r2
   923c2:	4798      	blx	r3
   923c4:	4602      	mov	r2, r0
   923c6:	4b77      	ldr	r3, [pc, #476]	; (925a4 <cl_testharnesscommandhandler+0x2304>)
   923c8:	629a      	str	r2, [r3, #40]	; 0x28
								Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   923ca:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
   923ce:	f107 0312 	add.w	r3, r7, #18
   923d2:	801a      	strh	r2, [r3, #0]
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS3",3);
   923d4:	2018      	movs	r0, #24
   923d6:	497a      	ldr	r1, [pc, #488]	; (925c0 <cl_testharnesscommandhandler+0x2320>)
   923d8:	2203      	movs	r2, #3
   923da:	4b74      	ldr	r3, [pc, #464]	; (925ac <cl_testharnesscommandhandler+0x230c>)
   923dc:	4798      	blx	r3
   923de:	4603      	mov	r3, r0
   923e0:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   923e4:	f107 0312 	add.w	r3, r7, #18
   923e8:	2019      	movs	r0, #25
   923ea:	4619      	mov	r1, r3
   923ec:	2202      	movs	r2, #2
   923ee:	4b6f      	ldr	r3, [pc, #444]	; (925ac <cl_testharnesscommandhandler+0x230c>)
   923f0:	4798      	blx	r3
   923f2:	4603      	mov	r3, r0
   923f4:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   923f8:	e07e      	b.n	924f8 <cl_testharnesscommandhandler+0x2258>
							}
							else if(cl_indata.bytearray[2]== 0)
   923fa:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   923fe:	2b00      	cmp	r3, #0
   92400:	d124      	bne.n	9244c <cl_testharnesscommandhandler+0x21ac>
							{
								int16_t temp=0,temp1=0;
   92402:	2300      	movs	r3, #0
   92404:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
   92408:	2300      	movs	r3, #0
   9240a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
								temp = cl_indata.Twobyte-1000;
   9240e:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   92412:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
   92416:	b29b      	uxth	r3, r3
   92418:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0
								//temp = cl_indata.Twobyte;
								Cl_alarmThresholdTable.ps3_low_threshold = temp;
   9241c:	f9b7 20c0 	ldrsh.w	r2, [r7, #192]	; 0xc0
   92420:	4b5f      	ldr	r3, [pc, #380]	; (925a0 <cl_testharnesscommandhandler+0x2300>)
   92422:	4610      	mov	r0, r2
   92424:	4798      	blx	r3
   92426:	4602      	mov	r2, r0
   92428:	4b5e      	ldr	r3, [pc, #376]	; (925a4 <cl_testharnesscommandhandler+0x2304>)
   9242a:	62da      	str	r2, [r3, #44]	; 0x2c
								temp1=temp+1000;
   9242c:	f8b7 30c0 	ldrh.w	r3, [r7, #192]	; 0xc0
   92430:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
   92434:	b29b      	uxth	r3, r3
   92436:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS3_LOW= (-)",12);
   9243a:	2018      	movs	r0, #24
   9243c:	4961      	ldr	r1, [pc, #388]	; (925c4 <cl_testharnesscommandhandler+0x2324>)
   9243e:	220c      	movs	r2, #12
   92440:	4b5a      	ldr	r3, [pc, #360]	; (925ac <cl_testharnesscommandhandler+0x230c>)
   92442:	4798      	blx	r3
   92444:	4603      	mov	r3, r0
   92446:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   9244a:	e055      	b.n	924f8 <cl_testharnesscommandhandler+0x2258>
								//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTNDATA,&temp1,2);
								//cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
								//Cl_alarmThresholdTable.ps3_low_threshold = cl_indata.Twobyte;
							}
							else if(cl_indata.bytearray[2]== 2)
   9244c:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   92450:	2b02      	cmp	r3, #2
   92452:	d129      	bne.n	924a8 <cl_testharnesscommandhandler+0x2208>
							{
								int16_t temp=0,temp1=0;
   92454:	f107 0310 	add.w	r3, r7, #16
   92458:	2200      	movs	r2, #0
   9245a:	801a      	strh	r2, [r3, #0]
   9245c:	2300      	movs	r3, #0
   9245e:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
								//temp = cl_indata.Twobyte-1000;
								test_sensor_status[SENSOR_PS3STATUS].test_sensord_data =cl_indata.Twobyte;
   92462:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   92466:	b29a      	uxth	r2, r3
   92468:	4b51      	ldr	r3, [pc, #324]	; (925b0 <cl_testharnesscommandhandler+0x2310>)
   9246a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
								test_sensor_status[SENSOR_PS3STATUS].test_flag = true;
   9246e:	4b50      	ldr	r3, [pc, #320]	; (925b0 <cl_testharnesscommandhandler+0x2310>)
   92470:	2201      	movs	r2, #1
   92472:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   92476:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   9247a:	b29a      	uxth	r2, r3
   9247c:	f107 0310 	add.w	r3, r7, #16
   92480:	801a      	strh	r2, [r3, #0]
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"TEST",9);
   92482:	2018      	movs	r0, #24
   92484:	494b      	ldr	r1, [pc, #300]	; (925b4 <cl_testharnesscommandhandler+0x2314>)
   92486:	2209      	movs	r2, #9
   92488:	4b48      	ldr	r3, [pc, #288]	; (925ac <cl_testharnesscommandhandler+0x230c>)
   9248a:	4798      	blx	r3
   9248c:	4603      	mov	r3, r0
   9248e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   92492:	f107 0310 	add.w	r3, r7, #16
   92496:	2019      	movs	r0, #25
   92498:	4619      	mov	r1, r3
   9249a:	2202      	movs	r2, #2
   9249c:	4b43      	ldr	r3, [pc, #268]	; (925ac <cl_testharnesscommandhandler+0x230c>)
   9249e:	4798      	blx	r3
   924a0:	4603      	mov	r3, r0
   924a2:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
   924a6:	e027      	b.n	924f8 <cl_testharnesscommandhandler+0x2258>
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							else if(cl_indata.bytearray[2]== 3)
   924a8:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   924ac:	2b03      	cmp	r3, #3
   924ae:	d123      	bne.n	924f8 <cl_testharnesscommandhandler+0x2258>
							{
								int16_t temp=0,temp1=0;
   924b0:	f107 030e 	add.w	r3, r7, #14
   924b4:	2200      	movs	r2, #0
   924b6:	801a      	strh	r2, [r3, #0]
   924b8:	2300      	movs	r3, #0
   924ba:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
								//temp = cl_indata.Twobyte-1000;
								//test_sensor_status[TEST_SENSOR_TEMP1].test_sensord_data =cl_indata.Twobyte;
								test_sensor_status[SENSOR_PS3STATUS].test_flag = false;
   924be:	4b3c      	ldr	r3, [pc, #240]	; (925b0 <cl_testharnesscommandhandler+0x2310>)
   924c0:	2200      	movs	r2, #0
   924c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
								//temp1=temp+1000;
								//Cl_Uint16Type temp;
								temp = cl_indata.Twobyte;
   924c6:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   924ca:	b29a      	uxth	r2, r3
   924cc:	f107 030e 	add.w	r3, r7, #14
   924d0:	801a      	strh	r2, [r3, #0]
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS3_LOW",9);
   924d2:	2018      	movs	r0, #24
   924d4:	493c      	ldr	r1, [pc, #240]	; (925c8 <cl_testharnesscommandhandler+0x2328>)
   924d6:	2209      	movs	r2, #9
   924d8:	4b34      	ldr	r3, [pc, #208]	; (925ac <cl_testharnesscommandhandler+0x230c>)
   924da:	4798      	blx	r3
   924dc:	4603      	mov	r3, r0
   924de:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   924e2:	f107 030e 	add.w	r3, r7, #14
   924e6:	2019      	movs	r0, #25
   924e8:	4619      	mov	r1, r3
   924ea:	2202      	movs	r2, #2
   924ec:	4b2f      	ldr	r3, [pc, #188]	; (925ac <cl_testharnesscommandhandler+0x230c>)
   924ee:	4798      	blx	r3
   924f0:	4603      	mov	r3, r0
   924f2:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
								//Cl_alarmThresholdTable.temp3_low_threshold = cl_indata.Twobyte;
							}
							break;
   924f6:	e010      	b.n	9251a <cl_testharnesscommandhandler+0x227a>
   924f8:	e00f      	b.n	9251a <cl_testharnesscommandhandler+0x227a>
							
							case 255:
							if(cl_indata.bytearray[2]== 1)
   924fa:	f897 30b2 	ldrb.w	r3, [r7, #178]	; 0xb2
   924fe:	2b01      	cmp	r3, #1
   92500:	d105      	bne.n	9250e <cl_testharnesscommandhandler+0x226e>
							{
								Cl_alarmThresholdTable.cond_high_threshold = cl_indata.Twobyte;
   92502:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   92506:	b29a      	uxth	r2, r3
   92508:	4b26      	ldr	r3, [pc, #152]	; (925a4 <cl_testharnesscommandhandler+0x2304>)
   9250a:	805a      	strh	r2, [r3, #2]
							}else
							{
								Cl_alarmThresholdTable.cond_low_threshold = cl_indata.Twobyte;
							}
							break;
   9250c:	e004      	b.n	92518 <cl_testharnesscommandhandler+0x2278>
							if(cl_indata.bytearray[2]== 1)
							{
								Cl_alarmThresholdTable.cond_high_threshold = cl_indata.Twobyte;
							}else
							{
								Cl_alarmThresholdTable.cond_low_threshold = cl_indata.Twobyte;
   9250e:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
   92512:	b29a      	uxth	r2, r3
   92514:	4b23      	ldr	r3, [pc, #140]	; (925a4 <cl_testharnesscommandhandler+0x2304>)
   92516:	801a      	strh	r2, [r3, #0]
							}
							break;
   92518:	bf00      	nop
							default:break;
						}
		break;
   9251a:	e32d      	b.n	92b78 <cl_testharnesscommandhandler+0x28d8>
		
		case TEST_GET_SENSORDATA:
//		sensordata =0;
		switch(TestMsg.data.byte[1] )
   9251c:	f897 3099 	ldrb.w	r3, [r7, #153]	; 0x99
   92520:	3b05      	subs	r3, #5
   92522:	2b11      	cmp	r3, #17
   92524:	f200 8325 	bhi.w	92b72 <cl_testharnesscommandhandler+0x28d2>
   92528:	a201      	add	r2, pc, #4	; (adr r2, 92530 <cl_testharnesscommandhandler+0x2290>)
   9252a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9252e:	bf00      	nop
   92530:	000925d9 	.word	0x000925d9
   92534:	00092677 	.word	0x00092677
   92538:	00092715 	.word	0x00092715
   9253c:	00092b73 	.word	0x00092b73
   92540:	00092b73 	.word	0x00092b73
   92544:	00092b73 	.word	0x00092b73
   92548:	00092b73 	.word	0x00092b73
   9254c:	00092987 	.word	0x00092987
   92550:	00092a2b 	.word	0x00092a2b
   92554:	00092acf 	.word	0x00092acf
   92558:	00092b73 	.word	0x00092b73
   9255c:	00092b73 	.word	0x00092b73
   92560:	0009278d 	.word	0x0009278d
   92564:	000927f1 	.word	0x000927f1
   92568:	00092b73 	.word	0x00092b73
   9256c:	000928bd 	.word	0x000928bd
   92570:	00092579 	.word	0x00092579
   92574:	0009258d 	.word	0x0009258d
		{
			
			case TEST_SENSOR_HP_1:
			pdataarray = (Cl_Uint8Type *)"HP_START=";
   92578:	4b14      	ldr	r3, [pc, #80]	; (925cc <cl_testharnesscommandhandler+0x232c>)
   9257a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			//int16_t heparin_start;
			cl_testgetsensordata(SENSOR_HP_START,&sensordata);
   9257e:	f107 0392 	add.w	r3, r7, #146	; 0x92
   92582:	2017      	movs	r0, #23
   92584:	4619      	mov	r1, r3
   92586:	4b12      	ldr	r3, [pc, #72]	; (925d0 <cl_testharnesscommandhandler+0x2330>)
   92588:	4798      	blx	r3
	//		cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,9);
	//		cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&sensordata,2);
			
			break;
   9258a:	e2f3      	b.n	92b74 <cl_testharnesscommandhandler+0x28d4>
			case  TEST_SENSOR_HP_2:
			cl_testgetsensordata(SENSOR_HP_END,&sensordata);
   9258c:	f107 0392 	add.w	r3, r7, #146	; 0x92
   92590:	2018      	movs	r0, #24
   92592:	4619      	mov	r1, r3
   92594:	4b0e      	ldr	r3, [pc, #56]	; (925d0 <cl_testharnesscommandhandler+0x2330>)
   92596:	4798      	blx	r3
						pdataarray = (Cl_Uint8Type *)"HP_END=";
   92598:	4b0e      	ldr	r3, [pc, #56]	; (925d4 <cl_testharnesscommandhandler+0x2334>)
   9259a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			//int16_t heparin_start;
			
		//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,7);
		//	cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&sensordata,2);
			break;
   9259e:	e2e9      	b.n	92b74 <cl_testharnesscommandhandler+0x28d4>
   925a0:	000a68b1 	.word	0x000a68b1
   925a4:	20072104 	.word	0x20072104
   925a8:	000a8bac 	.word	0x000a8bac
   925ac:	0009ba51 	.word	0x0009ba51
   925b0:	200725c0 	.word	0x200725c0
   925b4:	000a8af4 	.word	0x000a8af4
   925b8:	000a8b64 	.word	0x000a8b64
   925bc:	000a68a9 	.word	0x000a68a9
   925c0:	000a8bbc 	.word	0x000a8bbc
   925c4:	000a8bc0 	.word	0x000a8bc0
   925c8:	000a8bd0 	.word	0x000a8bd0
   925cc:	000a8bd8 	.word	0x000a8bd8
   925d0:	00092bd9 	.word	0x00092bd9
   925d4:	000a8be4 	.word	0x000a8be4
			case TEST_SENSOR_PS1:
			
			cl_testgetsensordata(SENSOR_PS1STATUS,&sensordata);
   925d8:	f107 0392 	add.w	r3, r7, #146	; 0x92
   925dc:	200e      	movs	r0, #14
   925de:	4619      	mov	r1, r3
   925e0:	4bab      	ldr	r3, [pc, #684]	; (92890 <cl_testharnesscommandhandler+0x25f0>)
   925e2:	4798      	blx	r3
			pdataarray = (Cl_Uint8Type *)"PS1=";
   925e4:	4bab      	ldr	r3, [pc, #684]	; (92894 <cl_testharnesscommandhandler+0x25f4>)
   925e6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		//	sensordatamillivolts = ((sensordata* 3300 /4096) ) - 870;
			sensordatamillivolts = ((sensordata* 3300 /4096) ) ;
   925ea:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
   925ee:	b21b      	sxth	r3, r3
   925f0:	f640 42e4 	movw	r2, #3300	; 0xce4
   925f4:	fb02 f303 	mul.w	r3, r2, r3
   925f8:	2b00      	cmp	r3, #0
   925fa:	da01      	bge.n	92600 <cl_testharnesscommandhandler+0x2360>
   925fc:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   92600:	131b      	asrs	r3, r3, #12
   92602:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
			
				Pressuredatainmillibars =  ((sensordatamillivolts - 860)/0.78 ) ;
   92606:	f9b7 3110 	ldrsh.w	r3, [r7, #272]	; 0x110
   9260a:	f5a3 7257 	sub.w	r2, r3, #860	; 0x35c
   9260e:	4ba2      	ldr	r3, [pc, #648]	; (92898 <cl_testharnesscommandhandler+0x25f8>)
   92610:	4610      	mov	r0, r2
   92612:	4798      	blx	r3
   92614:	4602      	mov	r2, r0
   92616:	460b      	mov	r3, r1
   92618:	4ca0      	ldr	r4, [pc, #640]	; (9289c <cl_testharnesscommandhandler+0x25fc>)
   9261a:	4610      	mov	r0, r2
   9261c:	4619      	mov	r1, r3
   9261e:	a398      	add	r3, pc, #608	; (adr r3, 92880 <cl_testharnesscommandhandler+0x25e0>)
   92620:	e9d3 2300 	ldrd	r2, r3, [r3]
   92624:	47a0      	blx	r4
   92626:	4602      	mov	r2, r0
   92628:	460b      	mov	r3, r1
   9262a:	4610      	mov	r0, r2
   9262c:	4619      	mov	r1, r3
   9262e:	4b9c      	ldr	r3, [pc, #624]	; (928a0 <cl_testharnesscommandhandler+0x2600>)
   92630:	4798      	blx	r3
   92632:	4603      	mov	r3, r0
   92634:	b29b      	uxth	r3, r3
   92636:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
				if (  sensordatamillivolts < 1360 )
   9263a:	f9b7 3110 	ldrsh.w	r3, [r7, #272]	; 0x110
   9263e:	f5b3 6faa 	cmp.w	r3, #1360	; 0x550
   92642:	da08      	bge.n	92656 <cl_testharnesscommandhandler+0x23b6>
				{
					Pressuredatainmillibars = Pressuredatainmillibars- 50 ;
   92644:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
   92648:	b29b      	uxth	r3, r3
   9264a:	3b32      	subs	r3, #50	; 0x32
   9264c:	b29b      	uxth	r3, r3
   9264e:	b29b      	uxth	r3, r3
   92650:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
   92654:	e00e      	b.n	92674 <cl_testharnesscommandhandler+0x23d4>
				}
				else if(  sensordatamillivolts < 1650 )
   92656:	f9b7 3110 	ldrsh.w	r3, [r7, #272]	; 0x110
   9265a:	f240 6271 	movw	r2, #1649	; 0x671
   9265e:	4293      	cmp	r3, r2
   92660:	dc08      	bgt.n	92674 <cl_testharnesscommandhandler+0x23d4>
				{
					Pressuredatainmillibars = Pressuredatainmillibars- 25 ;
   92662:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
   92666:	b29b      	uxth	r3, r3
   92668:	3b19      	subs	r3, #25
   9266a:	b29b      	uxth	r3, r3
   9266c:	b29b      	uxth	r3, r3
   9266e:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
				
			}
			#endif

			
			break;
   92672:	e27f      	b.n	92b74 <cl_testharnesscommandhandler+0x28d4>
   92674:	e27e      	b.n	92b74 <cl_testharnesscommandhandler+0x28d4>
			case TEST_SENSOR_PS2:
			cl_testgetsensordata(SENSOR_PS2STATUS,&sensordata);
   92676:	f107 0392 	add.w	r3, r7, #146	; 0x92
   9267a:	200f      	movs	r0, #15
   9267c:	4619      	mov	r1, r3
   9267e:	4b84      	ldr	r3, [pc, #528]	; (92890 <cl_testharnesscommandhandler+0x25f0>)
   92680:	4798      	blx	r3
					pdataarray = (Cl_Uint8Type *)"PS2=";
   92682:	4b88      	ldr	r3, [pc, #544]	; (928a4 <cl_testharnesscommandhandler+0x2604>)
   92684:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			sensordatamillivolts = ((sensordata* 3300 /4096) ) ;
   92688:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
   9268c:	b21b      	sxth	r3, r3
   9268e:	f640 42e4 	movw	r2, #3300	; 0xce4
   92692:	fb02 f303 	mul.w	r3, r2, r3
   92696:	2b00      	cmp	r3, #0
   92698:	da01      	bge.n	9269e <cl_testharnesscommandhandler+0x23fe>
   9269a:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   9269e:	131b      	asrs	r3, r3, #12
   926a0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
			Pressuredatainmillibars =  ((sensordatamillivolts - 860)/0.78 ) ;
   926a4:	f9b7 3110 	ldrsh.w	r3, [r7, #272]	; 0x110
   926a8:	f5a3 7257 	sub.w	r2, r3, #860	; 0x35c
   926ac:	4b7a      	ldr	r3, [pc, #488]	; (92898 <cl_testharnesscommandhandler+0x25f8>)
   926ae:	4610      	mov	r0, r2
   926b0:	4798      	blx	r3
   926b2:	4602      	mov	r2, r0
   926b4:	460b      	mov	r3, r1
   926b6:	4c79      	ldr	r4, [pc, #484]	; (9289c <cl_testharnesscommandhandler+0x25fc>)
   926b8:	4610      	mov	r0, r2
   926ba:	4619      	mov	r1, r3
   926bc:	a370      	add	r3, pc, #448	; (adr r3, 92880 <cl_testharnesscommandhandler+0x25e0>)
   926be:	e9d3 2300 	ldrd	r2, r3, [r3]
   926c2:	47a0      	blx	r4
   926c4:	4602      	mov	r2, r0
   926c6:	460b      	mov	r3, r1
   926c8:	4610      	mov	r0, r2
   926ca:	4619      	mov	r1, r3
   926cc:	4b74      	ldr	r3, [pc, #464]	; (928a0 <cl_testharnesscommandhandler+0x2600>)
   926ce:	4798      	blx	r3
   926d0:	4603      	mov	r3, r0
   926d2:	b29b      	uxth	r3, r3
   926d4:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
			if (  sensordatamillivolts < 1360 )
   926d8:	f9b7 3110 	ldrsh.w	r3, [r7, #272]	; 0x110
   926dc:	f5b3 6faa 	cmp.w	r3, #1360	; 0x550
   926e0:	da08      	bge.n	926f4 <cl_testharnesscommandhandler+0x2454>
			{
				Pressuredatainmillibars = Pressuredatainmillibars- 50 ;
   926e2:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
   926e6:	b29b      	uxth	r3, r3
   926e8:	3b32      	subs	r3, #50	; 0x32
   926ea:	b29b      	uxth	r3, r3
   926ec:	b29b      	uxth	r3, r3
   926ee:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
   926f2:	e00e      	b.n	92712 <cl_testharnesscommandhandler+0x2472>
			}
			else if(  sensordatamillivolts < 1650 )
   926f4:	f9b7 3110 	ldrsh.w	r3, [r7, #272]	; 0x110
   926f8:	f240 6271 	movw	r2, #1649	; 0x671
   926fc:	4293      	cmp	r3, r2
   926fe:	dc08      	bgt.n	92712 <cl_testharnesscommandhandler+0x2472>
			{
				Pressuredatainmillibars = Pressuredatainmillibars- 25 ;
   92700:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
   92704:	b29b      	uxth	r3, r3
   92706:	3b19      	subs	r3, #25
   92708:	b29b      	uxth	r3, r3
   9270a:	b29b      	uxth	r3, r3
   9270c:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&Pressuredatainmillibars,2);
				
			}
			#endif

			break;
   92710:	e230      	b.n	92b74 <cl_testharnesscommandhandler+0x28d4>
   92712:	e22f      	b.n	92b74 <cl_testharnesscommandhandler+0x28d4>
			case TEST_SENSOR_PS3:
			cl_testgetsensordata(PS3_HIGH_THRESHOLD,&sensordata);
   92714:	f107 0392 	add.w	r3, r7, #146	; 0x92
   92718:	2027      	movs	r0, #39	; 0x27
   9271a:	4619      	mov	r1, r3
   9271c:	4b5c      	ldr	r3, [pc, #368]	; (92890 <cl_testharnesscommandhandler+0x25f0>)
   9271e:	4798      	blx	r3
					pdataarray = (Cl_Uint8Type *)"PS3=";
   92720:	4b61      	ldr	r3, [pc, #388]	; (928a8 <cl_testharnesscommandhandler+0x2608>)
   92722:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			sensordatamillivolts = ((sensordata* 3300 /4096) ) ;
   92726:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
   9272a:	b21b      	sxth	r3, r3
   9272c:	f640 42e4 	movw	r2, #3300	; 0xce4
   92730:	fb02 f303 	mul.w	r3, r2, r3
   92734:	2b00      	cmp	r3, #0
   92736:	da01      	bge.n	9273c <cl_testharnesscommandhandler+0x249c>
   92738:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   9273c:	131b      	asrs	r3, r3, #12
   9273e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
		//	Pressuredatainmillibars =  (sensordatamillivolts/1.485 ) ;
			Pressuredatainmillibars = 1000 * (sensordatamillivolts - 1100)/1100;
   92742:	f9b7 3110 	ldrsh.w	r3, [r7, #272]	; 0x110
   92746:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
   9274a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   9274e:	fb02 f303 	mul.w	r3, r2, r3
   92752:	4a56      	ldr	r2, [pc, #344]	; (928ac <cl_testharnesscommandhandler+0x260c>)
   92754:	fb82 1203 	smull	r1, r2, r2, r3
   92758:	1252      	asrs	r2, r2, #9
   9275a:	17db      	asrs	r3, r3, #31
   9275c:	1ad3      	subs	r3, r2, r3
   9275e:	b29b      	uxth	r3, r3
   92760:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
		
			// if(Pressuredatainmillibars> 0)
			{
						//	Pressuredatainmillibars = Pressuredatainmillibars - 1000;
							cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,4);
   92764:	2018      	movs	r0, #24
   92766:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
   9276a:	2204      	movs	r2, #4
   9276c:	4b50      	ldr	r3, [pc, #320]	; (928b0 <cl_testharnesscommandhandler+0x2610>)
   9276e:	4798      	blx	r3
   92770:	4603      	mov	r3, r0
   92772:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
							cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&Pressuredatainmillibars,2);
   92776:	f107 0390 	add.w	r3, r7, #144	; 0x90
   9277a:	2019      	movs	r0, #25
   9277c:	4619      	mov	r1, r3
   9277e:	2202      	movs	r2, #2
   92780:	4b4b      	ldr	r3, [pc, #300]	; (928b0 <cl_testharnesscommandhandler+0x2610>)
   92782:	4798      	blx	r3
   92784:	4603      	mov	r3, r0
   92786:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,8);
			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&Pressuredatainmillibars,2);
				
			}
			#endif
			break;
   9278a:	e1f3      	b.n	92b74 <cl_testharnesscommandhandler+0x28d4>
			case TEST_SENSOR_APT:
			cl_testgetsensordata(APTSTATUS_HIGH,&sensordata);
   9278c:	f107 0392 	add.w	r3, r7, #146	; 0x92
   92790:	2024      	movs	r0, #36	; 0x24
   92792:	4619      	mov	r1, r3
   92794:	4b3e      	ldr	r3, [pc, #248]	; (92890 <cl_testharnesscommandhandler+0x25f0>)
   92796:	4798      	blx	r3
					
			sensordatamillivolts = ((sensordata* 3300 /4096) ) ;
   92798:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
   9279c:	b21b      	sxth	r3, r3
   9279e:	f640 42e4 	movw	r2, #3300	; 0xce4
   927a2:	fb02 f303 	mul.w	r3, r2, r3
   927a6:	2b00      	cmp	r3, #0
   927a8:	da01      	bge.n	927ae <cl_testharnesscommandhandler+0x250e>
   927aa:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   927ae:	131b      	asrs	r3, r3, #12
   927b0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
			
			Pressuredatainmillibars = (sensordatamillivolts - 1640)/0.6;
   927b4:	f9b7 3110 	ldrsh.w	r3, [r7, #272]	; 0x110
   927b8:	f5a3 62cd 	sub.w	r2, r3, #1640	; 0x668
   927bc:	4b36      	ldr	r3, [pc, #216]	; (92898 <cl_testharnesscommandhandler+0x25f8>)
   927be:	4610      	mov	r0, r2
   927c0:	4798      	blx	r3
   927c2:	4602      	mov	r2, r0
   927c4:	460b      	mov	r3, r1
   927c6:	4c35      	ldr	r4, [pc, #212]	; (9289c <cl_testharnesscommandhandler+0x25fc>)
   927c8:	4610      	mov	r0, r2
   927ca:	4619      	mov	r1, r3
   927cc:	a32e      	add	r3, pc, #184	; (adr r3, 92888 <cl_testharnesscommandhandler+0x25e8>)
   927ce:	e9d3 2300 	ldrd	r2, r3, [r3]
   927d2:	47a0      	blx	r4
   927d4:	4602      	mov	r2, r0
   927d6:	460b      	mov	r3, r1
   927d8:	4610      	mov	r0, r2
   927da:	4619      	mov	r1, r3
   927dc:	4b30      	ldr	r3, [pc, #192]	; (928a0 <cl_testharnesscommandhandler+0x2600>)
   927de:	4798      	blx	r3
   927e0:	4603      	mov	r3, r0
   927e2:	b29b      	uxth	r3, r3
   927e4:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
			//if(sensordatamillivolts > 1600 )
			{
				pdataarray = (Cl_Uint8Type *)"APT=";
   927e8:	4b32      	ldr	r3, [pc, #200]	; (928b4 <cl_testharnesscommandhandler+0x2614>)
   927ea:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
								cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&Pressuredatainmillibars,2);
				
			}
			#endif

			break;
   927ee:	e1c1      	b.n	92b74 <cl_testharnesscommandhandler+0x28d4>
			case TEST_SENSOR_VPT:
			cl_testgetsensordata(VPTSTATUS_HIGH,&sensordata);
   927f0:	f107 0392 	add.w	r3, r7, #146	; 0x92
   927f4:	2026      	movs	r0, #38	; 0x26
   927f6:	4619      	mov	r1, r3
   927f8:	4b25      	ldr	r3, [pc, #148]	; (92890 <cl_testharnesscommandhandler+0x25f0>)
   927fa:	4798      	blx	r3
					pdataarray = (Cl_Uint8Type *)"VPT=";
   927fc:	4b2e      	ldr	r3, [pc, #184]	; (928b8 <cl_testharnesscommandhandler+0x2618>)
   927fe:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			sensordatamillivolts = ((sensordata* 3300 /4096) ) ;
   92802:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
   92806:	b21b      	sxth	r3, r3
   92808:	f640 42e4 	movw	r2, #3300	; 0xce4
   9280c:	fb02 f303 	mul.w	r3, r2, r3
   92810:	2b00      	cmp	r3, #0
   92812:	da01      	bge.n	92818 <cl_testharnesscommandhandler+0x2578>
   92814:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
   92818:	131b      	asrs	r3, r3, #12
   9281a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
			Pressuredatainmillibars = (sensordatamillivolts - 1640)/0.6;
   9281e:	f9b7 3110 	ldrsh.w	r3, [r7, #272]	; 0x110
   92822:	f5a3 62cd 	sub.w	r2, r3, #1640	; 0x668
   92826:	4b1c      	ldr	r3, [pc, #112]	; (92898 <cl_testharnesscommandhandler+0x25f8>)
   92828:	4610      	mov	r0, r2
   9282a:	4798      	blx	r3
   9282c:	4602      	mov	r2, r0
   9282e:	460b      	mov	r3, r1
   92830:	4c1a      	ldr	r4, [pc, #104]	; (9289c <cl_testharnesscommandhandler+0x25fc>)
   92832:	4610      	mov	r0, r2
   92834:	4619      	mov	r1, r3
   92836:	a314      	add	r3, pc, #80	; (adr r3, 92888 <cl_testharnesscommandhandler+0x25e8>)
   92838:	e9d3 2300 	ldrd	r2, r3, [r3]
   9283c:	47a0      	blx	r4
   9283e:	4602      	mov	r2, r0
   92840:	460b      	mov	r3, r1
   92842:	4610      	mov	r0, r2
   92844:	4619      	mov	r1, r3
   92846:	4b16      	ldr	r3, [pc, #88]	; (928a0 <cl_testharnesscommandhandler+0x2600>)
   92848:	4798      	blx	r3
   9284a:	4603      	mov	r3, r0
   9284c:	b29b      	uxth	r3, r3
   9284e:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
			//if(sensordatamillivolts > 1600 )
			{
				pdataarray = (Cl_Uint8Type *)"VPT=";
   92852:	4b19      	ldr	r3, [pc, #100]	; (928b8 <cl_testharnesscommandhandler+0x2618>)
   92854:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
				//Pressuredatainmillibars = (sensordatamillivolts - 1600)/0.578;
				cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,4);
   92858:	2018      	movs	r0, #24
   9285a:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
   9285e:	2204      	movs	r2, #4
   92860:	4b13      	ldr	r3, [pc, #76]	; (928b0 <cl_testharnesscommandhandler+0x2610>)
   92862:	4798      	blx	r3
   92864:	4603      	mov	r3, r0
   92866:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
				cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&Pressuredatainmillibars,2);
   9286a:	f107 0390 	add.w	r3, r7, #144	; 0x90
   9286e:	2019      	movs	r0, #25
   92870:	4619      	mov	r1, r3
   92872:	2202      	movs	r2, #2
   92874:	4b0e      	ldr	r3, [pc, #56]	; (928b0 <cl_testharnesscommandhandler+0x2610>)
   92876:	4798      	blx	r3
   92878:	4603      	mov	r3, r0
   9287a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
				cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,8);
				cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&Pressuredatainmillibars,2);
				
			}
			#endif
			break;
   9287e:	e179      	b.n	92b74 <cl_testharnesscommandhandler+0x28d4>
   92880:	8f5c28f6 	.word	0x8f5c28f6
   92884:	3fe8f5c2 	.word	0x3fe8f5c2
   92888:	33333333 	.word	0x33333333
   9288c:	3fe33333 	.word	0x3fe33333
   92890:	00092bd9 	.word	0x00092bd9
   92894:	000a8bec 	.word	0x000a8bec
   92898:	000a600d 	.word	0x000a600d
   9289c:	000a632d 	.word	0x000a632d
   928a0:	000a660d 	.word	0x000a660d
   928a4:	000a8bf4 	.word	0x000a8bf4
   928a8:	000a8bfc 	.word	0x000a8bfc
   928ac:	77280773 	.word	0x77280773
   928b0:	0009ba51 	.word	0x0009ba51
   928b4:	000a8c04 	.word	0x000a8c04
   928b8:	000a8c0c 	.word	0x000a8c0c
			
			pdataarray = (Cl_Uint8Type *)"TMP1=";
			TMP = Vtp - Ps1;
		#endif
		
					TMP = vptavg - ps1avg;
   928bc:	4bb6      	ldr	r3, [pc, #728]	; (92b98 <cl_testharnesscommandhandler+0x28f8>)
   928be:	881b      	ldrh	r3, [r3, #0]
   928c0:	b29a      	uxth	r2, r3
   928c2:	4bb6      	ldr	r3, [pc, #728]	; (92b9c <cl_testharnesscommandhandler+0x28fc>)
   928c4:	881b      	ldrh	r3, [r3, #0]
   928c6:	b29b      	uxth	r3, r3
   928c8:	1ad3      	subs	r3, r2, r3
   928ca:	b29b      	uxth	r3, r3
   928cc:	b29b      	uxth	r3, r3
   928ce:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
				//	if(TMP > 0)
					{
						Pressuredatainmillibars = Pressuredatainmillibars - 1000;
   928d2:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
   928d6:	b29b      	uxth	r3, r3
   928d8:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
   928dc:	b29b      	uxth	r3, r3
   928de:	b29b      	uxth	r3, r3
   928e0:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
						pdataarray = (Cl_Uint8Type *)"TMP1=";
   928e4:	4bae      	ldr	r3, [pc, #696]	; (92ba0 <cl_testharnesscommandhandler+0x2900>)
   928e6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
						cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,4);
   928ea:	2018      	movs	r0, #24
   928ec:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
   928f0:	2204      	movs	r2, #4
   928f2:	4bac      	ldr	r3, [pc, #688]	; (92ba4 <cl_testharnesscommandhandler+0x2904>)
   928f4:	4798      	blx	r3
   928f6:	4603      	mov	r3, r0
   928f8:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
						cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TMP,2);
   928fc:	f107 038e 	add.w	r3, r7, #142	; 0x8e
   92900:	2019      	movs	r0, #25
   92902:	4619      	mov	r1, r3
   92904:	2202      	movs	r2, #2
   92906:	4ba7      	ldr	r3, [pc, #668]	; (92ba4 <cl_testharnesscommandhandler+0x2904>)
   92908:	4798      	blx	r3
   9290a:	4603      	mov	r3, r0
   9290c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
						cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TMP,2);
						
					}
					
					#endif
					TMP = (vptavg + aptavg)/2 - (ps1avg+ps2avg)/2;
   92910:	4ba1      	ldr	r3, [pc, #644]	; (92b98 <cl_testharnesscommandhandler+0x28f8>)
   92912:	881b      	ldrh	r3, [r3, #0]
   92914:	b21a      	sxth	r2, r3
   92916:	4ba4      	ldr	r3, [pc, #656]	; (92ba8 <cl_testharnesscommandhandler+0x2908>)
   92918:	881b      	ldrh	r3, [r3, #0]
   9291a:	b21b      	sxth	r3, r3
   9291c:	4413      	add	r3, r2
   9291e:	0fda      	lsrs	r2, r3, #31
   92920:	4413      	add	r3, r2
   92922:	105b      	asrs	r3, r3, #1
   92924:	b29a      	uxth	r2, r3
   92926:	4b9d      	ldr	r3, [pc, #628]	; (92b9c <cl_testharnesscommandhandler+0x28fc>)
   92928:	881b      	ldrh	r3, [r3, #0]
   9292a:	b219      	sxth	r1, r3
   9292c:	4b9f      	ldr	r3, [pc, #636]	; (92bac <cl_testharnesscommandhandler+0x290c>)
   9292e:	881b      	ldrh	r3, [r3, #0]
   92930:	b21b      	sxth	r3, r3
   92932:	440b      	add	r3, r1
   92934:	0fd9      	lsrs	r1, r3, #31
   92936:	440b      	add	r3, r1
   92938:	105b      	asrs	r3, r3, #1
   9293a:	b29b      	uxth	r3, r3
   9293c:	1ad3      	subs	r3, r2, r3
   9293e:	b29b      	uxth	r3, r3
   92940:	b29b      	uxth	r3, r3
   92942:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
					// if(TMP > 0)
					{
						pdataarray = (Cl_Uint8Type *)"TMP2=";
   92946:	4b9a      	ldr	r3, [pc, #616]	; (92bb0 <cl_testharnesscommandhandler+0x2910>)
   92948:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
						Pressuredatainmillibars = Pressuredatainmillibars - 1000;
   9294c:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
   92950:	b29b      	uxth	r3, r3
   92952:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
   92956:	b29b      	uxth	r3, r3
   92958:	b29b      	uxth	r3, r3
   9295a:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
						cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,4);
   9295e:	2018      	movs	r0, #24
   92960:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
   92964:	2204      	movs	r2, #4
   92966:	4b8f      	ldr	r3, [pc, #572]	; (92ba4 <cl_testharnesscommandhandler+0x2904>)
   92968:	4798      	blx	r3
   9296a:	4603      	mov	r3, r0
   9296c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
						cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&TMP,2);
   92970:	f107 038e 	add.w	r3, r7, #142	; 0x8e
   92974:	2019      	movs	r0, #25
   92976:	4619      	mov	r1, r3
   92978:	2202      	movs	r2, #2
   9297a:	4b8a      	ldr	r3, [pc, #552]	; (92ba4 <cl_testharnesscommandhandler+0x2904>)
   9297c:	4798      	blx	r3
   9297e:	4603      	mov	r3, r0
   92980:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
					}
					
					#endif


			break;
   92984:	e0f6      	b.n	92b74 <cl_testharnesscommandhandler+0x28d4>
			case TEST_SENSOR_TEMP1:

			cl_testgetsensordata(SENSOR_TEMP1STATUS,&sensordata);
   92986:	f107 0392 	add.w	r3, r7, #146	; 0x92
   9298a:	2012      	movs	r0, #18
   9298c:	4619      	mov	r1, r3
   9298e:	4b89      	ldr	r3, [pc, #548]	; (92bb4 <cl_testharnesscommandhandler+0x2914>)
   92990:	4798      	blx	r3
			{
							int16_t temp,temp1;
							temp = (0.8056 * sensordata) - 1450 ;
   92992:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
   92996:	b21a      	sxth	r2, r3
   92998:	4b87      	ldr	r3, [pc, #540]	; (92bb8 <cl_testharnesscommandhandler+0x2918>)
   9299a:	4610      	mov	r0, r2
   9299c:	4798      	blx	r3
   9299e:	4602      	mov	r2, r0
   929a0:	460b      	mov	r3, r1
   929a2:	4c86      	ldr	r4, [pc, #536]	; (92bbc <cl_testharnesscommandhandler+0x291c>)
   929a4:	4610      	mov	r0, r2
   929a6:	4619      	mov	r1, r3
   929a8:	a377      	add	r3, pc, #476	; (adr r3, 92b88 <cl_testharnesscommandhandler+0x28e8>)
   929aa:	e9d3 2300 	ldrd	r2, r3, [r3]
   929ae:	47a0      	blx	r4
   929b0:	4602      	mov	r2, r0
   929b2:	460b      	mov	r3, r1
   929b4:	4c82      	ldr	r4, [pc, #520]	; (92bc0 <cl_testharnesscommandhandler+0x2920>)
   929b6:	4610      	mov	r0, r2
   929b8:	4619      	mov	r1, r3
   929ba:	a375      	add	r3, pc, #468	; (adr r3, 92b90 <cl_testharnesscommandhandler+0x28f0>)
   929bc:	e9d3 2300 	ldrd	r2, r3, [r3]
   929c0:	47a0      	blx	r4
   929c2:	4602      	mov	r2, r0
   929c4:	460b      	mov	r3, r1
   929c6:	4610      	mov	r0, r2
   929c8:	4619      	mov	r1, r3
   929ca:	4b7e      	ldr	r3, [pc, #504]	; (92bc4 <cl_testharnesscommandhandler+0x2924>)
   929cc:	4798      	blx	r3
   929ce:	4603      	mov	r3, r0
   929d0:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
							temp1 = 3700 + (temp * 1000)/340;
   929d4:	f9b7 30b8 	ldrsh.w	r3, [r7, #184]	; 0xb8
   929d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   929dc:	fb02 f303 	mul.w	r3, r2, r3
   929e0:	4a79      	ldr	r2, [pc, #484]	; (92bc8 <cl_testharnesscommandhandler+0x2928>)
   929e2:	fb82 1203 	smull	r1, r2, r2, r3
   929e6:	11d2      	asrs	r2, r2, #7
   929e8:	17db      	asrs	r3, r3, #31
   929ea:	1ad3      	subs	r3, r2, r3
   929ec:	b29b      	uxth	r3, r3
   929ee:	f603 6374 	addw	r3, r3, #3700	; 0xe74
   929f2:	b29b      	uxth	r3, r3
   929f4:	b29a      	uxth	r2, r3
   929f6:	f107 030c 	add.w	r3, r7, #12
   929fa:	801a      	strh	r2, [r3, #0]
							
							pdataarray = (Cl_Uint8Type *)"TEMP1=";
   929fc:	4b73      	ldr	r3, [pc, #460]	; (92bcc <cl_testharnesscommandhandler+0x292c>)
   929fe:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
							cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
   92a02:	2018      	movs	r0, #24
   92a04:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
   92a08:	2206      	movs	r2, #6
   92a0a:	4b66      	ldr	r3, [pc, #408]	; (92ba4 <cl_testharnesscommandhandler+0x2904>)
   92a0c:	4798      	blx	r3
   92a0e:	4603      	mov	r3, r0
   92a10:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
							cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp1,2);
   92a14:	f107 030c 	add.w	r3, r7, #12
   92a18:	2019      	movs	r0, #25
   92a1a:	4619      	mov	r1, r3
   92a1c:	2202      	movs	r2, #2
   92a1e:	4b61      	ldr	r3, [pc, #388]	; (92ba4 <cl_testharnesscommandhandler+0x2904>)
   92a20:	4798      	blx	r3
   92a22:	4603      	mov	r3, r0
   92a24:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
			}

			break;
   92a28:	e0a4      	b.n	92b74 <cl_testharnesscommandhandler+0x28d4>
			case TEST_SENSOR_TEMP2:
			{
				int16_t temp,temp1;
			cl_testgetsensordata(SENSOR_TEMP2STATUS,&sensordata);
   92a2a:	f107 0392 	add.w	r3, r7, #146	; 0x92
   92a2e:	2013      	movs	r0, #19
   92a30:	4619      	mov	r1, r3
   92a32:	4b60      	ldr	r3, [pc, #384]	; (92bb4 <cl_testharnesscommandhandler+0x2914>)
   92a34:	4798      	blx	r3
					
					temp = (0.8056 * sensordata) - 1450 ;
   92a36:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
   92a3a:	b21a      	sxth	r2, r3
   92a3c:	4b5e      	ldr	r3, [pc, #376]	; (92bb8 <cl_testharnesscommandhandler+0x2918>)
   92a3e:	4610      	mov	r0, r2
   92a40:	4798      	blx	r3
   92a42:	4602      	mov	r2, r0
   92a44:	460b      	mov	r3, r1
   92a46:	4c5d      	ldr	r4, [pc, #372]	; (92bbc <cl_testharnesscommandhandler+0x291c>)
   92a48:	4610      	mov	r0, r2
   92a4a:	4619      	mov	r1, r3
   92a4c:	a34e      	add	r3, pc, #312	; (adr r3, 92b88 <cl_testharnesscommandhandler+0x28e8>)
   92a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
   92a52:	47a0      	blx	r4
   92a54:	4602      	mov	r2, r0
   92a56:	460b      	mov	r3, r1
   92a58:	4c59      	ldr	r4, [pc, #356]	; (92bc0 <cl_testharnesscommandhandler+0x2920>)
   92a5a:	4610      	mov	r0, r2
   92a5c:	4619      	mov	r1, r3
   92a5e:	a34c      	add	r3, pc, #304	; (adr r3, 92b90 <cl_testharnesscommandhandler+0x28f0>)
   92a60:	e9d3 2300 	ldrd	r2, r3, [r3]
   92a64:	47a0      	blx	r4
   92a66:	4602      	mov	r2, r0
   92a68:	460b      	mov	r3, r1
   92a6a:	4610      	mov	r0, r2
   92a6c:	4619      	mov	r1, r3
   92a6e:	4b55      	ldr	r3, [pc, #340]	; (92bc4 <cl_testharnesscommandhandler+0x2924>)
   92a70:	4798      	blx	r3
   92a72:	4603      	mov	r3, r0
   92a74:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
					temp1 = 3700 + (temp * 1000)/340;
   92a78:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
   92a7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   92a80:	fb02 f303 	mul.w	r3, r2, r3
   92a84:	4a50      	ldr	r2, [pc, #320]	; (92bc8 <cl_testharnesscommandhandler+0x2928>)
   92a86:	fb82 1203 	smull	r1, r2, r2, r3
   92a8a:	11d2      	asrs	r2, r2, #7
   92a8c:	17db      	asrs	r3, r3, #31
   92a8e:	1ad3      	subs	r3, r2, r3
   92a90:	b29b      	uxth	r3, r3
   92a92:	f603 6374 	addw	r3, r3, #3700	; 0xe74
   92a96:	b29b      	uxth	r3, r3
   92a98:	b29a      	uxth	r2, r3
   92a9a:	f107 030a 	add.w	r3, r7, #10
   92a9e:	801a      	strh	r2, [r3, #0]
									
			pdataarray = (Cl_Uint8Type *)"TEMP2=";
   92aa0:	4b4b      	ldr	r3, [pc, #300]	; (92bd0 <cl_testharnesscommandhandler+0x2930>)
   92aa2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
   92aa6:	2018      	movs	r0, #24
   92aa8:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
   92aac:	2206      	movs	r2, #6
   92aae:	4b3d      	ldr	r3, [pc, #244]	; (92ba4 <cl_testharnesscommandhandler+0x2904>)
   92ab0:	4798      	blx	r3
   92ab2:	4603      	mov	r3, r0
   92ab4:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
			cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp1,2);
   92ab8:	f107 030a 	add.w	r3, r7, #10
   92abc:	2019      	movs	r0, #25
   92abe:	4619      	mov	r1, r3
   92ac0:	2202      	movs	r2, #2
   92ac2:	4b38      	ldr	r3, [pc, #224]	; (92ba4 <cl_testharnesscommandhandler+0x2904>)
   92ac4:	4798      	blx	r3
   92ac6:	4603      	mov	r3, r0
   92ac8:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
			}
			break;
   92acc:	e052      	b.n	92b74 <cl_testharnesscommandhandler+0x28d4>
			case TEST_SENSOR_TEMP3:
			{
				int16_t temp,temp1;
				cl_testgetsensordata(SENSOR_TEMP3STATUS,&sensordata);
   92ace:	f107 0392 	add.w	r3, r7, #146	; 0x92
   92ad2:	2014      	movs	r0, #20
   92ad4:	4619      	mov	r1, r3
   92ad6:	4b37      	ldr	r3, [pc, #220]	; (92bb4 <cl_testharnesscommandhandler+0x2914>)
   92ad8:	4798      	blx	r3
				
				
				temp = (0.8056 * sensordata) - 1450 ;
   92ada:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
   92ade:	b21a      	sxth	r2, r3
   92ae0:	4b35      	ldr	r3, [pc, #212]	; (92bb8 <cl_testharnesscommandhandler+0x2918>)
   92ae2:	4610      	mov	r0, r2
   92ae4:	4798      	blx	r3
   92ae6:	4602      	mov	r2, r0
   92ae8:	460b      	mov	r3, r1
   92aea:	4c34      	ldr	r4, [pc, #208]	; (92bbc <cl_testharnesscommandhandler+0x291c>)
   92aec:	4610      	mov	r0, r2
   92aee:	4619      	mov	r1, r3
   92af0:	a325      	add	r3, pc, #148	; (adr r3, 92b88 <cl_testharnesscommandhandler+0x28e8>)
   92af2:	e9d3 2300 	ldrd	r2, r3, [r3]
   92af6:	47a0      	blx	r4
   92af8:	4602      	mov	r2, r0
   92afa:	460b      	mov	r3, r1
   92afc:	4c30      	ldr	r4, [pc, #192]	; (92bc0 <cl_testharnesscommandhandler+0x2920>)
   92afe:	4610      	mov	r0, r2
   92b00:	4619      	mov	r1, r3
   92b02:	a323      	add	r3, pc, #140	; (adr r3, 92b90 <cl_testharnesscommandhandler+0x28f0>)
   92b04:	e9d3 2300 	ldrd	r2, r3, [r3]
   92b08:	47a0      	blx	r4
   92b0a:	4602      	mov	r2, r0
   92b0c:	460b      	mov	r3, r1
   92b0e:	4610      	mov	r0, r2
   92b10:	4619      	mov	r1, r3
   92b12:	4b2c      	ldr	r3, [pc, #176]	; (92bc4 <cl_testharnesscommandhandler+0x2924>)
   92b14:	4798      	blx	r3
   92b16:	4603      	mov	r3, r0
   92b18:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
				temp1 = 3700 + (temp * 1000)/340;
   92b1c:	f9b7 30b4 	ldrsh.w	r3, [r7, #180]	; 0xb4
   92b20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   92b24:	fb02 f303 	mul.w	r3, r2, r3
   92b28:	4a27      	ldr	r2, [pc, #156]	; (92bc8 <cl_testharnesscommandhandler+0x2928>)
   92b2a:	fb82 1203 	smull	r1, r2, r2, r3
   92b2e:	11d2      	asrs	r2, r2, #7
   92b30:	17db      	asrs	r3, r3, #31
   92b32:	1ad3      	subs	r3, r2, r3
   92b34:	b29b      	uxth	r3, r3
   92b36:	f603 6374 	addw	r3, r3, #3700	; 0xe74
   92b3a:	b29b      	uxth	r3, r3
   92b3c:	b29a      	uxth	r2, r3
   92b3e:	f107 0308 	add.w	r3, r7, #8
   92b42:	801a      	strh	r2, [r3, #0]
				
				pdataarray = (Cl_Uint8Type *)"TEMP3=";
   92b44:	4b23      	ldr	r3, [pc, #140]	; (92bd4 <cl_testharnesscommandhandler+0x2934>)
   92b46:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
				cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,pdataarray,6);
   92b4a:	2018      	movs	r0, #24
   92b4c:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
   92b50:	2206      	movs	r2, #6
   92b52:	4b14      	ldr	r3, [pc, #80]	; (92ba4 <cl_testharnesscommandhandler+0x2904>)
   92b54:	4798      	blx	r3
   92b56:	4603      	mov	r3, r0
   92b58:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
				cl_thretval = Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp1,2);
   92b5c:	f107 0308 	add.w	r3, r7, #8
   92b60:	2019      	movs	r0, #25
   92b62:	4619      	mov	r1, r3
   92b64:	2202      	movs	r2, #2
   92b66:	4b0f      	ldr	r3, [pc, #60]	; (92ba4 <cl_testharnesscommandhandler+0x2904>)
   92b68:	4798      	blx	r3
   92b6a:	4603      	mov	r3, r0
   92b6c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
				
			}

			break;
   92b70:	e000      	b.n	92b74 <cl_testharnesscommandhandler+0x28d4>


			
			default: break;
   92b72:	bf00      	nop
		}

		break;
   92b74:	e000      	b.n	92b78 <cl_testharnesscommandhandler+0x28d8>
		default:
		
		break;
   92b76:	bf00      	nop
	}
	
	
	
	return CL_OK;
   92b78:	2300      	movs	r3, #0
	
}
   92b7a:	4618      	mov	r0, r3
   92b7c:	f507 7792 	add.w	r7, r7, #292	; 0x124
   92b80:	46bd      	mov	sp, r7
   92b82:	bd90      	pop	{r4, r7, pc}
   92b84:	f3af 8000 	nop.w
   92b88:	a6b50b0f 	.word	0xa6b50b0f
   92b8c:	3fe9c779 	.word	0x3fe9c779
   92b90:	00000000 	.word	0x00000000
   92b94:	4096a800 	.word	0x4096a800
   92b98:	20071a70 	.word	0x20071a70
   92b9c:	20071a6a 	.word	0x20071a6a
   92ba0:	000a8c14 	.word	0x000a8c14
   92ba4:	0009ba51 	.word	0x0009ba51
   92ba8:	20071a6e 	.word	0x20071a6e
   92bac:	20071a6c 	.word	0x20071a6c
   92bb0:	000a8c1c 	.word	0x000a8c1c
   92bb4:	00092bd9 	.word	0x00092bd9
   92bb8:	000a600d 	.word	0x000a600d
   92bbc:	000a60d9 	.word	0x000a60d9
   92bc0:	000a5d71 	.word	0x000a5d71
   92bc4:	000a660d 	.word	0x000a660d
   92bc8:	60606061 	.word	0x60606061
   92bcc:	000a8c24 	.word	0x000a8c24
   92bd0:	000a8c2c 	.word	0x000a8c2c
   92bd4:	000a8c34 	.word	0x000a8c34

00092bd8 <cl_testgetsensordata>:


Cl_ReturnCodeType  cl_testgetsensordata(Cl_Uint8Type dataId, uint16_t* dataItem)
{
   92bd8:	b580      	push	{r7, lr}
   92bda:	b086      	sub	sp, #24
   92bdc:	af00      	add	r7, sp, #0
   92bde:	4603      	mov	r3, r0
   92be0:	6039      	str	r1, [r7, #0]
   92be2:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType cl_thretval = CL_ERROR;
   92be4:	2304      	movs	r3, #4
   92be6:	75fb      	strb	r3, [r7, #23]
	Cl_Uint8Type bytedata =0 ;
   92be8:	2300      	movs	r3, #0
   92bea:	73fb      	strb	r3, [r7, #15]
	Cl_Uint16Type twobytedatal=0;
   92bec:	2300      	movs	r3, #0
   92bee:	81bb      	strh	r3, [r7, #12]
	Cl_Uint32Type worddata=0;
   92bf0:	2300      	movs	r3, #0
   92bf2:	60bb      	str	r3, [r7, #8]
	
	Cl_Uint8Type pbytedata;
	Cl_Uint16Type p2bytedatal;
	Cl_Uint32Type pworddata;
	
	pbytedata = &bytedata;
   92bf4:	f107 030f 	add.w	r3, r7, #15
   92bf8:	75bb      	strb	r3, [r7, #22]
	p2bytedatal = &twobytedatal;
   92bfa:	f107 030c 	add.w	r3, r7, #12
   92bfe:	82bb      	strh	r3, [r7, #20]
	pworddata =  &worddata;
   92c00:	f107 0308 	add.w	r3, r7, #8
   92c04:	613b      	str	r3, [r7, #16]
	

		
	Cl_SysStat_GetSensor_Status_Query(dataId, dataItem);
   92c06:	79fb      	ldrb	r3, [r7, #7]
   92c08:	4618      	mov	r0, r3
   92c0a:	6839      	ldr	r1, [r7, #0]
   92c0c:	4b03      	ldr	r3, [pc, #12]	; (92c1c <cl_testgetsensordata+0x44>)
   92c0e:	4798      	blx	r3
	
return CL_OK;	
   92c10:	2300      	movs	r3, #0
}
   92c12:	4618      	mov	r0, r3
   92c14:	3718      	adds	r7, #24
   92c16:	46bd      	mov	sp, r7
   92c18:	bd80      	pop	{r7, pc}
   92c1a:	bf00      	nop
   92c1c:	0008e7f9 	.word	0x0008e7f9

00092c20 <pinclock>:
	#endif

}

void pinclock(void)
{
   92c20:	b480      	push	{r7}
   92c22:	af00      	add	r7, sp, #0
					// Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&hp_end_status,1);
					}
				}
#endif
	
}
   92c24:	46bd      	mov	sp, r7
   92c26:	f85d 7b04 	ldr.w	r7, [sp], #4
   92c2a:	4770      	bx	lr

00092c2c <testsectclock>:
	minute_count++;
}


void testsectclock(void)
{
   92c2c:	b580      	push	{r7, lr}
   92c2e:	b086      	sub	sp, #24
   92c30:	af00      	add	r7, sp, #0
	int16_t cond_status = 0,hold1_status=0,hold2_status=0; 
   92c32:	2300      	movs	r3, #0
   92c34:	82fb      	strh	r3, [r7, #22]
   92c36:	2300      	movs	r3, #0
   92c38:	82bb      	strh	r3, [r7, #20]
   92c3a:	2300      	movs	r3, #0
   92c3c:	827b      	strh	r3, [r7, #18]
	int16_t hold1 = 0, hold2=0,blood_door = 0;
   92c3e:	2300      	movs	r3, #0
   92c40:	823b      	strh	r3, [r7, #16]
   92c42:	2300      	movs	r3, #0
   92c44:	81fb      	strh	r3, [r7, #14]
   92c46:	2300      	movs	r3, #0
   92c48:	81bb      	strh	r3, [r7, #12]
	float temp = 0,temp1;
   92c4a:	f04f 0300 	mov.w	r3, #0
   92c4e:	60bb      	str	r3, [r7, #8]
	Cl_Uint16Type int_temp;

				Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS, &int_temp);
   92c50:	1dbb      	adds	r3, r7, #6
   92c52:	2013      	movs	r0, #19
   92c54:	4619      	mov	r1, r3
   92c56:	4b0e      	ldr	r3, [pc, #56]	; (92c90 <testsectclock+0x64>)
   92c58:	4798      	blx	r3
		//		temp = int_temp * 0.805;
		//		calibration_tmp(temp,TS2);

	if(temprature_final_value_2 > 40000)
   92c5a:	4b0e      	ldr	r3, [pc, #56]	; (92c94 <testsectclock+0x68>)
   92c5c:	681a      	ldr	r2, [r3, #0]
   92c5e:	4b0e      	ldr	r3, [pc, #56]	; (92c98 <testsectclock+0x6c>)
   92c60:	4610      	mov	r0, r2
   92c62:	490e      	ldr	r1, [pc, #56]	; (92c9c <testsectclock+0x70>)
   92c64:	4798      	blx	r3
   92c66:	4603      	mov	r3, r0
   92c68:	2b00      	cmp	r3, #0
   92c6a:	d00d      	beq.n	92c88 <testsectclock+0x5c>
	{
		if (flag_hotcitric == 1 || hotrinse_flag == 1)
   92c6c:	4b0c      	ldr	r3, [pc, #48]	; (92ca0 <testsectclock+0x74>)
   92c6e:	781b      	ldrb	r3, [r3, #0]
   92c70:	b2db      	uxtb	r3, r3
   92c72:	2b01      	cmp	r3, #1
   92c74:	d008      	beq.n	92c88 <testsectclock+0x5c>
   92c76:	4b0b      	ldr	r3, [pc, #44]	; (92ca4 <testsectclock+0x78>)
   92c78:	781b      	ldrb	r3, [r3, #0]
   92c7a:	2b01      	cmp	r3, #1
   92c7c:	d004      	beq.n	92c88 <testsectclock+0x5c>
		{
			
		}
		else
		{
		sv_cntrl_poweroffheater();
   92c7e:	4b0a      	ldr	r3, [pc, #40]	; (92ca8 <testsectclock+0x7c>)
   92c80:	4798      	blx	r3
		SetHeaterState(CL_HEATER_STATE_OFF);
   92c82:	2004      	movs	r0, #4
   92c84:	4b09      	ldr	r3, [pc, #36]	; (92cac <testsectclock+0x80>)
   92c86:	4798      	blx	r3
	}
		
	}
		
	
}
   92c88:	3718      	adds	r7, #24
   92c8a:	46bd      	mov	sp, r7
   92c8c:	bd80      	pop	{r7, pc}
   92c8e:	bf00      	nop
   92c90:	0008e7f9 	.word	0x0008e7f9
   92c94:	20071794 	.word	0x20071794
   92c98:	000a6cd1 	.word	0x000a6cd1
   92c9c:	471c4000 	.word	0x471c4000
   92ca0:	20071a5f 	.word	0x20071a5f
   92ca4:	20071cc1 	.word	0x20071cc1
   92ca8:	00099cb9 	.word	0x00099cb9
   92cac:	000894d9 	.word	0x000894d9

00092cb0 <Cl_TimerTickCallback>:

Cl_ReturnCodeType Cl_RetValue;
int gmstick = 0;
volatile int func_timer =0;
Cl_ReturnCodeType Cl_TimerTickCallback()
{
   92cb0:	b580      	push	{r7, lr}
   92cb2:	af00      	add	r7, sp, #0
	static int Cl_ticks =0 , Cl_Seconds =0 , Cl_Minutes = 0 , Cl_Hours = 0;
	
	Cl_ticks ++;
   92cb4:	4b1c      	ldr	r3, [pc, #112]	; (92d28 <Cl_TimerTickCallback+0x78>)
   92cb6:	681b      	ldr	r3, [r3, #0]
   92cb8:	3301      	adds	r3, #1
   92cba:	4a1b      	ldr	r2, [pc, #108]	; (92d28 <Cl_TimerTickCallback+0x78>)
   92cbc:	6013      	str	r3, [r2, #0]
	
	 if (Cl_ticks >= TICKS_PER_SEC)
   92cbe:	4b1a      	ldr	r3, [pc, #104]	; (92d28 <Cl_TimerTickCallback+0x78>)
   92cc0:	681b      	ldr	r3, [r3, #0]
   92cc2:	2b00      	cmp	r3, #0
   92cc4:	dd07      	ble.n	92cd6 <Cl_TimerTickCallback+0x26>
	 {
		 Cl_ticks = 0;
   92cc6:	4b18      	ldr	r3, [pc, #96]	; (92d28 <Cl_TimerTickCallback+0x78>)
   92cc8:	2200      	movs	r2, #0
   92cca:	601a      	str	r2, [r3, #0]
		 Cl_Seconds++;
   92ccc:	4b17      	ldr	r3, [pc, #92]	; (92d2c <Cl_TimerTickCallback+0x7c>)
   92cce:	681b      	ldr	r3, [r3, #0]
   92cd0:	3301      	adds	r3, #1
   92cd2:	4a16      	ldr	r2, [pc, #88]	; (92d2c <Cl_TimerTickCallback+0x7c>)
   92cd4:	6013      	str	r3, [r2, #0]
		// Cl_RetValue = Cl_Timer_Create_TickSec_Event();
	 }
	 
	// if(Cl_Seconds >= SIXTY)
	 if(Cl_Seconds >= SIXTY)
   92cd6:	4b15      	ldr	r3, [pc, #84]	; (92d2c <Cl_TimerTickCallback+0x7c>)
   92cd8:	681b      	ldr	r3, [r3, #0]
   92cda:	2b3b      	cmp	r3, #59	; 0x3b
   92cdc:	dd07      	ble.n	92cee <Cl_TimerTickCallback+0x3e>
	 {
		 Cl_Seconds = 0;
   92cde:	4b13      	ldr	r3, [pc, #76]	; (92d2c <Cl_TimerTickCallback+0x7c>)
   92ce0:	2200      	movs	r2, #0
   92ce2:	601a      	str	r2, [r3, #0]
		  Cl_Minutes++;
   92ce4:	4b12      	ldr	r3, [pc, #72]	; (92d30 <Cl_TimerTickCallback+0x80>)
   92ce6:	681b      	ldr	r3, [r3, #0]
   92ce8:	3301      	adds	r3, #1
   92cea:	4a11      	ldr	r2, [pc, #68]	; (92d30 <Cl_TimerTickCallback+0x80>)
   92cec:	6013      	str	r3, [r2, #0]
		// Cl_RetValue = Cl_Timer_Create_TickMin_Event();
	 }
	 
	if(Cl_Minutes >= SIXTY)
   92cee:	4b10      	ldr	r3, [pc, #64]	; (92d30 <Cl_TimerTickCallback+0x80>)
   92cf0:	681b      	ldr	r3, [r3, #0]
   92cf2:	2b3b      	cmp	r3, #59	; 0x3b
   92cf4:	dd0d      	ble.n	92d12 <Cl_TimerTickCallback+0x62>
//	if(Cl_Minutes >= 10)
	{
		Cl_Minutes = 0;
   92cf6:	4b0e      	ldr	r3, [pc, #56]	; (92d30 <Cl_TimerTickCallback+0x80>)
   92cf8:	2200      	movs	r2, #0
   92cfa:	601a      	str	r2, [r3, #0]
		Cl_Hours++;
   92cfc:	4b0d      	ldr	r3, [pc, #52]	; (92d34 <Cl_TimerTickCallback+0x84>)
   92cfe:	681b      	ldr	r3, [r3, #0]
   92d00:	3301      	adds	r3, #1
   92d02:	4a0c      	ldr	r2, [pc, #48]	; (92d34 <Cl_TimerTickCallback+0x84>)
   92d04:	6013      	str	r3, [r2, #0]
		Cl_RetValue = Cl_Timer_Create_TickHour_Event();
   92d06:	4b0c      	ldr	r3, [pc, #48]	; (92d38 <Cl_TimerTickCallback+0x88>)
   92d08:	4798      	blx	r3
   92d0a:	4603      	mov	r3, r0
   92d0c:	461a      	mov	r2, r3
   92d0e:	4b0b      	ldr	r3, [pc, #44]	; (92d3c <Cl_TimerTickCallback+0x8c>)
   92d10:	701a      	strb	r2, [r3, #0]
	}
	
	if(Cl_Hours >= 24)
   92d12:	4b08      	ldr	r3, [pc, #32]	; (92d34 <Cl_TimerTickCallback+0x84>)
   92d14:	681b      	ldr	r3, [r3, #0]
   92d16:	2b17      	cmp	r3, #23
   92d18:	dd02      	ble.n	92d20 <Cl_TimerTickCallback+0x70>
	{
		Cl_Hours =0;
   92d1a:	4b06      	ldr	r3, [pc, #24]	; (92d34 <Cl_TimerTickCallback+0x84>)
   92d1c:	2200      	movs	r2, #0
   92d1e:	601a      	str	r2, [r3, #0]
	}
	
	return CL_OK;
   92d20:	2300      	movs	r3, #0
}
   92d22:	4618      	mov	r0, r3
   92d24:	bd80      	pop	{r7, pc}
   92d26:	bf00      	nop
   92d28:	20071a80 	.word	0x20071a80
   92d2c:	20071a84 	.word	0x20071a84
   92d30:	20071a88 	.word	0x20071a88
   92d34:	20071a8c 	.word	0x20071a8c
   92d38:	0009312d 	.word	0x0009312d
   92d3c:	20072658 	.word	0x20072658

00092d40 <Cl_MilliTickcallBack>:




Cl_ReturnCodeType Cl_MilliTickcallBack(void)
{
   92d40:	b580      	push	{r7, lr}
   92d42:	b082      	sub	sp, #8
   92d44:	af00      	add	r7, sp, #0
	
//Cl_tg_prick_1ms();



if (FUNC_ENTRY == 1)
   92d46:	4b63      	ldr	r3, [pc, #396]	; (92ed4 <Cl_MilliTickcallBack+0x194>)
   92d48:	681b      	ldr	r3, [r3, #0]
   92d4a:	2b01      	cmp	r3, #1
   92d4c:	d10d      	bne.n	92d6a <Cl_MilliTickcallBack+0x2a>
{
	func_timer++;
   92d4e:	4b62      	ldr	r3, [pc, #392]	; (92ed8 <Cl_MilliTickcallBack+0x198>)
   92d50:	681b      	ldr	r3, [r3, #0]
   92d52:	3301      	adds	r3, #1
   92d54:	4a60      	ldr	r2, [pc, #384]	; (92ed8 <Cl_MilliTickcallBack+0x198>)
   92d56:	6013      	str	r3, [r2, #0]
	if(func_timer > 1000)
   92d58:	4b5f      	ldr	r3, [pc, #380]	; (92ed8 <Cl_MilliTickcallBack+0x198>)
   92d5a:	681b      	ldr	r3, [r3, #0]
   92d5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   92d60:	dd06      	ble.n	92d70 <Cl_MilliTickcallBack+0x30>
			
			if(syncdone)
			{
		//		Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_IIC_HANGUP,(void*)0,0);
			}
		func_timer = 0;
   92d62:	4b5d      	ldr	r3, [pc, #372]	; (92ed8 <Cl_MilliTickcallBack+0x198>)
   92d64:	2200      	movs	r2, #0
   92d66:	601a      	str	r2, [r3, #0]
   92d68:	e002      	b.n	92d70 <Cl_MilliTickcallBack+0x30>
	}
}else
{
	func_timer = 0;
   92d6a:	4b5b      	ldr	r3, [pc, #364]	; (92ed8 <Cl_MilliTickcallBack+0x198>)
   92d6c:	2200      	movs	r2, #0
   92d6e:	601a      	str	r2, [r3, #0]
}
			gmstick++;
   92d70:	4b5a      	ldr	r3, [pc, #360]	; (92edc <Cl_MilliTickcallBack+0x19c>)
   92d72:	681b      	ldr	r3, [r3, #0]
   92d74:	3301      	adds	r3, #1
   92d76:	4a59      	ldr	r2, [pc, #356]	; (92edc <Cl_MilliTickcallBack+0x19c>)
   92d78:	6013      	str	r3, [r2, #0]
			 if(gmstick > 50)
   92d7a:	4b58      	ldr	r3, [pc, #352]	; (92edc <Cl_MilliTickcallBack+0x19c>)
   92d7c:	681b      	ldr	r3, [r3, #0]
   92d7e:	2b32      	cmp	r3, #50	; 0x32
   92d80:	dd02      	ble.n	92d88 <Cl_MilliTickcallBack+0x48>
			 {
				 gmstick = 0;
   92d82:	4b56      	ldr	r3, [pc, #344]	; (92edc <Cl_MilliTickcallBack+0x19c>)
   92d84:	2200      	movs	r2, #0
   92d86:	601a      	str	r2, [r3, #0]
			 }
			 
		Cl_msticks++;
   92d88:	4b55      	ldr	r3, [pc, #340]	; (92ee0 <Cl_MilliTickcallBack+0x1a0>)
   92d8a:	681b      	ldr	r3, [r3, #0]
   92d8c:	3301      	adds	r3, #1
   92d8e:	4a54      	ldr	r2, [pc, #336]	; (92ee0 <Cl_MilliTickcallBack+0x1a0>)
   92d90:	6013      	str	r3, [r2, #0]
		if(!(Cl_msticks % 20))
   92d92:	4b53      	ldr	r3, [pc, #332]	; (92ee0 <Cl_MilliTickcallBack+0x1a0>)
   92d94:	6819      	ldr	r1, [r3, #0]
   92d96:	4b53      	ldr	r3, [pc, #332]	; (92ee4 <Cl_MilliTickcallBack+0x1a4>)
   92d98:	fb83 2301 	smull	r2, r3, r3, r1
   92d9c:	10da      	asrs	r2, r3, #3
   92d9e:	17cb      	asrs	r3, r1, #31
   92da0:	1ad2      	subs	r2, r2, r3
   92da2:	4613      	mov	r3, r2
   92da4:	009b      	lsls	r3, r3, #2
   92da6:	4413      	add	r3, r2
   92da8:	009b      	lsls	r3, r3, #2
   92daa:	1aca      	subs	r2, r1, r3
   92dac:	2a00      	cmp	r2, #0
   92dae:	d103      	bne.n	92db8 <Cl_MilliTickcallBack+0x78>
		{
		//	pinclock(); 
		Cl_TimerRetValue = Cl_Timer_Create_Tick20Ms_Event();
   92db0:	4b4d      	ldr	r3, [pc, #308]	; (92ee8 <Cl_MilliTickcallBack+0x1a8>)
   92db2:	4798      	blx	r3
   92db4:	4603      	mov	r3, r0
   92db6:	71fb      	strb	r3, [r7, #7]
		//Cl_tg_prick_100ms();
		


		}
		if(!(Cl_msticks % 2))
   92db8:	4b49      	ldr	r3, [pc, #292]	; (92ee0 <Cl_MilliTickcallBack+0x1a0>)
   92dba:	681b      	ldr	r3, [r3, #0]
   92dbc:	f003 0301 	and.w	r3, r3, #1
   92dc0:	2b00      	cmp	r3, #0
   92dc2:	d105      	bne.n	92dd0 <Cl_MilliTickcallBack+0x90>
		{
			pinclock(); 
   92dc4:	4b49      	ldr	r3, [pc, #292]	; (92eec <Cl_MilliTickcallBack+0x1ac>)
   92dc6:	4798      	blx	r3
			//pinclock();
			//pinclock1();
			Cl_TimerRetValue = Cl_Timer_Create_Tick2Ms_Event();
   92dc8:	4b49      	ldr	r3, [pc, #292]	; (92ef0 <Cl_MilliTickcallBack+0x1b0>)
   92dca:	4798      	blx	r3
   92dcc:	4603      	mov	r3, r0
   92dce:	71fb      	strb	r3, [r7, #7]
			
			//	cl_ufpumpFeedback_timer();
			//	cl_hep_pumpFeedback_timer();
		}
		if(!(Cl_msticks % 5))
   92dd0:	4b43      	ldr	r3, [pc, #268]	; (92ee0 <Cl_MilliTickcallBack+0x1a0>)
   92dd2:	6819      	ldr	r1, [r3, #0]
   92dd4:	4b43      	ldr	r3, [pc, #268]	; (92ee4 <Cl_MilliTickcallBack+0x1a4>)
   92dd6:	fb83 2301 	smull	r2, r3, r3, r1
   92dda:	105a      	asrs	r2, r3, #1
   92ddc:	17cb      	asrs	r3, r1, #31
   92dde:	1ad2      	subs	r2, r2, r3
   92de0:	4613      	mov	r3, r2
   92de2:	009b      	lsls	r3, r3, #2
   92de4:	4413      	add	r3, r2
   92de6:	1aca      	subs	r2, r1, r3
   92de8:	2a00      	cmp	r2, #0
   92dea:	d103      	bne.n	92df4 <Cl_MilliTickcallBack+0xb4>
		{
			
			//pinclock();
			//pinclock1(); 
			Cl_TimerRetValue = Cl_Timer_Create_Tick5Ms_Event();
   92dec:	4b41      	ldr	r3, [pc, #260]	; (92ef4 <Cl_MilliTickcallBack+0x1b4>)
   92dee:	4798      	blx	r3
   92df0:	4603      	mov	r3, r0
   92df2:	71fb      	strb	r3, [r7, #7]
	
		//	cl_ufpumpFeedback_timer();
		//	cl_hep_pumpFeedback_timer();
		}
		if(!(Cl_msticks % 10))
   92df4:	4b3a      	ldr	r3, [pc, #232]	; (92ee0 <Cl_MilliTickcallBack+0x1a0>)
   92df6:	6819      	ldr	r1, [r3, #0]
   92df8:	4b3a      	ldr	r3, [pc, #232]	; (92ee4 <Cl_MilliTickcallBack+0x1a4>)
   92dfa:	fb83 2301 	smull	r2, r3, r3, r1
   92dfe:	109a      	asrs	r2, r3, #2
   92e00:	17cb      	asrs	r3, r1, #31
   92e02:	1ad2      	subs	r2, r2, r3
   92e04:	4613      	mov	r3, r2
   92e06:	009b      	lsls	r3, r3, #2
   92e08:	4413      	add	r3, r2
   92e0a:	005b      	lsls	r3, r3, #1
   92e0c:	1aca      	subs	r2, r1, r3
   92e0e:	2a00      	cmp	r2, #0
   92e10:	d103      	bne.n	92e1a <Cl_MilliTickcallBack+0xda>
		{
			Cl_TimerRetValue = Cl_Timer_Create_Tick10Ms_Event();
   92e12:	4b39      	ldr	r3, [pc, #228]	; (92ef8 <Cl_MilliTickcallBack+0x1b8>)
   92e14:	4798      	blx	r3
   92e16:	4603      	mov	r3, r0
   92e18:	71fb      	strb	r3, [r7, #7]
			//pinclock1(); 
			
			

		}
		if(!(Cl_msticks % 50))
   92e1a:	4b31      	ldr	r3, [pc, #196]	; (92ee0 <Cl_MilliTickcallBack+0x1a0>)
   92e1c:	681a      	ldr	r2, [r3, #0]
   92e1e:	4b37      	ldr	r3, [pc, #220]	; (92efc <Cl_MilliTickcallBack+0x1bc>)
   92e20:	fb83 1302 	smull	r1, r3, r3, r2
   92e24:	1119      	asrs	r1, r3, #4
   92e26:	17d3      	asrs	r3, r2, #31
   92e28:	1acb      	subs	r3, r1, r3
   92e2a:	2132      	movs	r1, #50	; 0x32
   92e2c:	fb01 f303 	mul.w	r3, r1, r3
   92e30:	1ad3      	subs	r3, r2, r3
   92e32:	2b00      	cmp	r3, #0
   92e34:	d103      	bne.n	92e3e <Cl_MilliTickcallBack+0xfe>
		{
			Cl_TimerRetValue = Cl_Timer_Create_Tick50Ms_Event();
   92e36:	4b32      	ldr	r3, [pc, #200]	; (92f00 <Cl_MilliTickcallBack+0x1c0>)
   92e38:	4798      	blx	r3
   92e3a:	4603      	mov	r3, r0
   92e3c:	71fb      	strb	r3, [r7, #7]

		}

		
		
		if(Cl_msticks == 100)
   92e3e:	4b28      	ldr	r3, [pc, #160]	; (92ee0 <Cl_MilliTickcallBack+0x1a0>)
   92e40:	681b      	ldr	r3, [r3, #0]
   92e42:	2b64      	cmp	r3, #100	; 0x64
   92e44:	d108      	bne.n	92e58 <Cl_MilliTickcallBack+0x118>
		{
			//Cl_msticks = 0;
			Cl_ms100ticks++;
   92e46:	4b2f      	ldr	r3, [pc, #188]	; (92f04 <Cl_MilliTickcallBack+0x1c4>)
   92e48:	681b      	ldr	r3, [r3, #0]
   92e4a:	3301      	adds	r3, #1
   92e4c:	4a2d      	ldr	r2, [pc, #180]	; (92f04 <Cl_MilliTickcallBack+0x1c4>)
   92e4e:	6013      	str	r3, [r2, #0]
			Cl_TimerRetValue = Cl_Timer_Create_Tick100Ms_Event();
   92e50:	4b2d      	ldr	r3, [pc, #180]	; (92f08 <Cl_MilliTickcallBack+0x1c8>)
   92e52:	4798      	blx	r3
   92e54:	4603      	mov	r3, r0
   92e56:	71fb      	strb	r3, [r7, #7]
				//cl_hep_pump_enddetction_timer();


		}

if(Cl_msticks == 150)
   92e58:	4b21      	ldr	r3, [pc, #132]	; (92ee0 <Cl_MilliTickcallBack+0x1a0>)
   92e5a:	681b      	ldr	r3, [r3, #0]
   92e5c:	2b96      	cmp	r3, #150	; 0x96
   92e5e:	d10b      	bne.n	92e78 <Cl_MilliTickcallBack+0x138>
		{
			Cl_msticks = 0;
   92e60:	4b1f      	ldr	r3, [pc, #124]	; (92ee0 <Cl_MilliTickcallBack+0x1a0>)
   92e62:	2200      	movs	r2, #0
   92e64:	601a      	str	r2, [r3, #0]
			Cl_ms150ticks++;
   92e66:	4b29      	ldr	r3, [pc, #164]	; (92f0c <Cl_MilliTickcallBack+0x1cc>)
   92e68:	681b      	ldr	r3, [r3, #0]
   92e6a:	3301      	adds	r3, #1
   92e6c:	4a27      	ldr	r2, [pc, #156]	; (92f0c <Cl_MilliTickcallBack+0x1cc>)
   92e6e:	6013      	str	r3, [r2, #0]
			Cl_TimerRetValue = Cl_Timer_Create_Tick150Ms_Event();
   92e70:	4b27      	ldr	r3, [pc, #156]	; (92f10 <Cl_MilliTickcallBack+0x1d0>)
   92e72:	4798      	blx	r3
   92e74:	4603      	mov	r3, r0
   92e76:	71fb      	strb	r3, [r7, #7]


		}


		if(Cl_ms100ticks == 3 )
   92e78:	4b22      	ldr	r3, [pc, #136]	; (92f04 <Cl_MilliTickcallBack+0x1c4>)
   92e7a:	681b      	ldr	r3, [r3, #0]
   92e7c:	2b03      	cmp	r3, #3
   92e7e:	d11d      	bne.n	92ebc <Cl_MilliTickcallBack+0x17c>
		{
			Cl_ms100ticks = 0;
   92e80:	4b20      	ldr	r3, [pc, #128]	; (92f04 <Cl_MilliTickcallBack+0x1c4>)
   92e82:	2200      	movs	r2, #0
   92e84:	601a      	str	r2, [r3, #0]
			Cl_ms500ticks++;
   92e86:	4b23      	ldr	r3, [pc, #140]	; (92f14 <Cl_MilliTickcallBack+0x1d4>)
   92e88:	681b      	ldr	r3, [r3, #0]
   92e8a:	3301      	adds	r3, #1
   92e8c:	4a21      	ldr	r2, [pc, #132]	; (92f14 <Cl_MilliTickcallBack+0x1d4>)
   92e8e:	6013      	str	r3, [r2, #0]
			if(Cl_ms500ticks == 2 )
   92e90:	4b20      	ldr	r3, [pc, #128]	; (92f14 <Cl_MilliTickcallBack+0x1d4>)
   92e92:	681b      	ldr	r3, [r3, #0]
   92e94:	2b02      	cmp	r3, #2
   92e96:	d10d      	bne.n	92eb4 <Cl_MilliTickcallBack+0x174>
			{
				Cl_ms500ticks = 0;
   92e98:	4b1e      	ldr	r3, [pc, #120]	; (92f14 <Cl_MilliTickcallBack+0x1d4>)
   92e9a:	2200      	movs	r2, #0
   92e9c:	601a      	str	r2, [r3, #0]
				Cl_TimerRetValue  = Cl_Timer_Create_TickSec_Event();
   92e9e:	4b1e      	ldr	r3, [pc, #120]	; (92f18 <Cl_MilliTickcallBack+0x1d8>)
   92ea0:	4798      	blx	r3
   92ea2:	4603      	mov	r3, r0
   92ea4:	71fb      	strb	r3, [r7, #7]
				Cl_ms1000ticks++;
   92ea6:	4b1d      	ldr	r3, [pc, #116]	; (92f1c <Cl_MilliTickcallBack+0x1dc>)
   92ea8:	681b      	ldr	r3, [r3, #0]
   92eaa:	3301      	adds	r3, #1
   92eac:	4a1b      	ldr	r2, [pc, #108]	; (92f1c <Cl_MilliTickcallBack+0x1dc>)
   92eae:	6013      	str	r3, [r2, #0]
				testsectclock();
   92eb0:	4b1b      	ldr	r3, [pc, #108]	; (92f20 <Cl_MilliTickcallBack+0x1e0>)
   92eb2:	4798      	blx	r3
				
			}
			Cl_TimerRetValue = Cl_Timer_Create_Tick500Ms_Event();
   92eb4:	4b1b      	ldr	r3, [pc, #108]	; (92f24 <Cl_MilliTickcallBack+0x1e4>)
   92eb6:	4798      	blx	r3
   92eb8:	4603      	mov	r3, r0
   92eba:	71fb      	strb	r3, [r7, #7]
			
		}
		if(Cl_ms1000ticks == 2)
   92ebc:	4b17      	ldr	r3, [pc, #92]	; (92f1c <Cl_MilliTickcallBack+0x1dc>)
   92ebe:	681b      	ldr	r3, [r3, #0]
   92ec0:	2b02      	cmp	r3, #2
   92ec2:	d102      	bne.n	92eca <Cl_MilliTickcallBack+0x18a>
		{
			Cl_ms1000ticks =0;
   92ec4:	4b15      	ldr	r3, [pc, #84]	; (92f1c <Cl_MilliTickcallBack+0x1dc>)
   92ec6:	2200      	movs	r2, #0
   92ec8:	601a      	str	r2, [r3, #0]
		//	Cl_Alarm_TriggerAlarm(FPCURRENTSTATUS,1);
		}
		return CL_OK;
   92eca:	2300      	movs	r3, #0
}
   92ecc:	4618      	mov	r0, r3
   92ece:	3708      	adds	r7, #8
   92ed0:	46bd      	mov	sp, r7
   92ed2:	bd80      	pop	{r7, pc}
   92ed4:	20071b38 	.word	0x20071b38
   92ed8:	20071a7c 	.word	0x20071a7c
   92edc:	20071a78 	.word	0x20071a78
   92ee0:	20071a90 	.word	0x20071a90
   92ee4:	66666667 	.word	0x66666667
   92ee8:	00092f59 	.word	0x00092f59
   92eec:	00092c21 	.word	0x00092c21
   92ef0:	00092f29 	.word	0x00092f29
   92ef4:	00092f39 	.word	0x00092f39
   92ef8:	00092f49 	.word	0x00092f49
   92efc:	51eb851f 	.word	0x51eb851f
   92f00:	00092f95 	.word	0x00092f95
   92f04:	20071a94 	.word	0x20071a94
   92f08:	00092fd5 	.word	0x00092fd5
   92f0c:	20071a98 	.word	0x20071a98
   92f10:	00093011 	.word	0x00093011
   92f14:	20071a9c 	.word	0x20071a9c
   92f18:	00093089 	.word	0x00093089
   92f1c:	20071aa0 	.word	0x20071aa0
   92f20:	00092c2d 	.word	0x00092c2d
   92f24:	0009304d 	.word	0x0009304d

00092f28 <Cl_Timer_Create_Tick2Ms_Event>:


 Cl_ReturnCodeType  Cl_Timer_Create_Tick2Ms_Event(void)
 {
   92f28:	b480      	push	{r7}
   92f2a:	af00      	add	r7, sp, #0
	 {
	//	 Cl_MacEventQueue2.Cl_MacEvent[Cl_MacEventQueue2.Cl_MacNewEventcount] = EVT_TICK_2M;
	//	 Cl_MacEventQueue2.Cl_MacNewEvent = true;
	//	 Cl_MacEventQueue2.Cl_MacNewEventcount++;
	 }
	 return CL_OK;
   92f2c:	2300      	movs	r3, #0
	 
 }
   92f2e:	4618      	mov	r0, r3
   92f30:	46bd      	mov	sp, r7
   92f32:	f85d 7b04 	ldr.w	r7, [sp], #4
   92f36:	4770      	bx	lr

00092f38 <Cl_Timer_Create_Tick5Ms_Event>:

 Cl_ReturnCodeType  Cl_Timer_Create_Tick5Ms_Event(void)
 {
   92f38:	b480      	push	{r7}
   92f3a:	af00      	add	r7, sp, #0
	 {
	//	 Cl_MacEventQueue2.Cl_MacEvent[Cl_MacEventQueue2.Cl_MacNewEventcount] = EVT_TICK_5M;
	//	 Cl_MacEventQueue2.Cl_MacNewEvent = true;
	//	 Cl_MacEventQueue2.Cl_MacNewEventcount++;
	 }
	 return CL_OK;
   92f3c:	2300      	movs	r3, #0
	 
 }
   92f3e:	4618      	mov	r0, r3
   92f40:	46bd      	mov	sp, r7
   92f42:	f85d 7b04 	ldr.w	r7, [sp], #4
   92f46:	4770      	bx	lr

00092f48 <Cl_Timer_Create_Tick10Ms_Event>:

 Cl_ReturnCodeType  Cl_Timer_Create_Tick10Ms_Event(void)
 {
   92f48:	b480      	push	{r7}
   92f4a:	af00      	add	r7, sp, #0
	 {
	//	 Cl_MacEventQueue2.Cl_MacEvent[Cl_MacEventQueue2.Cl_MacNewEventcount] = EVT_TICK_10M;
	//	 Cl_MacEventQueue2.Cl_MacNewEvent = true;
	//	 Cl_MacEventQueue2.Cl_MacNewEventcount++;
	 }
	 return CL_OK;
   92f4c:	2300      	movs	r3, #0
	 
 }
   92f4e:	4618      	mov	r0, r3
   92f50:	46bd      	mov	sp, r7
   92f52:	f85d 7b04 	ldr.w	r7, [sp], #4
   92f56:	4770      	bx	lr

00092f58 <Cl_Timer_Create_Tick20Ms_Event>:

 Cl_ReturnCodeType  Cl_Timer_Create_Tick20Ms_Event(void)
 {
   92f58:	b480      	push	{r7}
   92f5a:	af00      	add	r7, sp, #0
	 	 if( Cl_MacEventQueue2.Cl_MacNewEventcount < MAC_EVENT_COUNT_MAX )
   92f5c:	4b0c      	ldr	r3, [pc, #48]	; (92f90 <Cl_Timer_Create_Tick20Ms_Event+0x38>)
   92f5e:	781b      	ldrb	r3, [r3, #0]
   92f60:	2b09      	cmp	r3, #9
   92f62:	d80f      	bhi.n	92f84 <Cl_Timer_Create_Tick20Ms_Event+0x2c>
// 				  
// 			  }
// 			  
// 			  testFPcurrentstatus_prev = cl_sys_statbuffer.FPcurrentstatus;
// 			  
		 	 Cl_MacEventQueue2.Cl_MacEvent[Cl_MacEventQueue2.Cl_MacNewEventcount] = EVT_TICK_20M;
   92f64:	4b0a      	ldr	r3, [pc, #40]	; (92f90 <Cl_Timer_Create_Tick20Ms_Event+0x38>)
   92f66:	781b      	ldrb	r3, [r3, #0]
   92f68:	461a      	mov	r2, r3
   92f6a:	4b09      	ldr	r3, [pc, #36]	; (92f90 <Cl_Timer_Create_Tick20Ms_Event+0x38>)
   92f6c:	4413      	add	r3, r2
   92f6e:	2237      	movs	r2, #55	; 0x37
   92f70:	709a      	strb	r2, [r3, #2]
		 	 Cl_MacEventQueue2.Cl_MacNewEvent = true;
   92f72:	4b07      	ldr	r3, [pc, #28]	; (92f90 <Cl_Timer_Create_Tick20Ms_Event+0x38>)
   92f74:	2201      	movs	r2, #1
   92f76:	705a      	strb	r2, [r3, #1]
		 	 Cl_MacEventQueue2.Cl_MacNewEventcount++;
   92f78:	4b05      	ldr	r3, [pc, #20]	; (92f90 <Cl_Timer_Create_Tick20Ms_Event+0x38>)
   92f7a:	781b      	ldrb	r3, [r3, #0]
   92f7c:	3301      	adds	r3, #1
   92f7e:	b2da      	uxtb	r2, r3
   92f80:	4b03      	ldr	r3, [pc, #12]	; (92f90 <Cl_Timer_Create_Tick20Ms_Event+0x38>)
   92f82:	701a      	strb	r2, [r3, #0]
	 	 }
		 else
		 {
//			 Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT ,"OF",2);       //12-04
		 }
	 	 return CL_OK;
   92f84:	2300      	movs	r3, #0
	 	 
 }
   92f86:	4618      	mov	r0, r3
   92f88:	46bd      	mov	sp, r7
   92f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
   92f8e:	4770      	bx	lr
   92f90:	20072198 	.word	0x20072198

00092f94 <Cl_Timer_Create_Tick50Ms_Event>:

 Cl_ReturnCodeType  Cl_Timer_Create_Tick50Ms_Event(void)
 {
   92f94:	b580      	push	{r7, lr}
   92f96:	af00      	add	r7, sp, #0
	 // Cl_MacEvent = EVT_TICK_SEC;
	 // Cl_MacNewEvent = true;
	 Cl_Alarm_timmer_50millisec();// testing
   92f98:	4b0c      	ldr	r3, [pc, #48]	; (92fcc <Cl_Timer_Create_Tick50Ms_Event+0x38>)
   92f9a:	4798      	blx	r3
	 if( Cl_MacEventQueue2.Cl_MacNewEventcount < MAC_EVENT_COUNT_MAX )
   92f9c:	4b0c      	ldr	r3, [pc, #48]	; (92fd0 <Cl_Timer_Create_Tick50Ms_Event+0x3c>)
   92f9e:	781b      	ldrb	r3, [r3, #0]
   92fa0:	2b09      	cmp	r3, #9
   92fa2:	d80f      	bhi.n	92fc4 <Cl_Timer_Create_Tick50Ms_Event+0x30>
	 
	 
	 {
		 Cl_MacEventQueue2.Cl_MacEvent[Cl_MacEventQueue2.Cl_MacNewEventcount] = EVT_TICK_50M;
   92fa4:	4b0a      	ldr	r3, [pc, #40]	; (92fd0 <Cl_Timer_Create_Tick50Ms_Event+0x3c>)
   92fa6:	781b      	ldrb	r3, [r3, #0]
   92fa8:	461a      	mov	r2, r3
   92faa:	4b09      	ldr	r3, [pc, #36]	; (92fd0 <Cl_Timer_Create_Tick50Ms_Event+0x3c>)
   92fac:	4413      	add	r3, r2
   92fae:	2238      	movs	r2, #56	; 0x38
   92fb0:	709a      	strb	r2, [r3, #2]
		 Cl_MacEventQueue2.Cl_MacNewEvent = true;
   92fb2:	4b07      	ldr	r3, [pc, #28]	; (92fd0 <Cl_Timer_Create_Tick50Ms_Event+0x3c>)
   92fb4:	2201      	movs	r2, #1
   92fb6:	705a      	strb	r2, [r3, #1]
		 Cl_MacEventQueue2.Cl_MacNewEventcount++;
   92fb8:	4b05      	ldr	r3, [pc, #20]	; (92fd0 <Cl_Timer_Create_Tick50Ms_Event+0x3c>)
   92fba:	781b      	ldrb	r3, [r3, #0]
   92fbc:	3301      	adds	r3, #1
   92fbe:	b2da      	uxtb	r2, r3
   92fc0:	4b03      	ldr	r3, [pc, #12]	; (92fd0 <Cl_Timer_Create_Tick50Ms_Event+0x3c>)
   92fc2:	701a      	strb	r2, [r3, #0]
	 }
		 else
		 {
//			 Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT ,"OF",2);   //12-04
		 }
	 return CL_OK;
   92fc4:	2300      	movs	r3, #0
	 
	 
 }
   92fc6:	4618      	mov	r0, r3
   92fc8:	bd80      	pop	{r7, pc}
   92fca:	bf00      	nop
   92fcc:	000831ad 	.word	0x000831ad
   92fd0:	20072198 	.word	0x20072198

00092fd4 <Cl_Timer_Create_Tick100Ms_Event>:
 

	 Cl_ReturnCodeType  Cl_Timer_Create_Tick100Ms_Event(void)
	 {
   92fd4:	b480      	push	{r7}
   92fd6:	af00      	add	r7, sp, #0
		 // Cl_MacEvent = EVT_TICK_SEC;
		 // Cl_MacNewEvent = true;
		 
		 if( Cl_MacEventQueue2.Cl_MacNewEventcount < MAC_EVENT_COUNT_MAX )
   92fd8:	4b0c      	ldr	r3, [pc, #48]	; (9300c <Cl_Timer_Create_Tick100Ms_Event+0x38>)
   92fda:	781b      	ldrb	r3, [r3, #0]
   92fdc:	2b09      	cmp	r3, #9
   92fde:	d80f      	bhi.n	93000 <Cl_Timer_Create_Tick100Ms_Event+0x2c>
		 		 
		 {	
			 Cl_MacEventQueue2.Cl_MacEvent[Cl_MacEventQueue2.Cl_MacNewEventcount] = EVT_TICK_100M ;
   92fe0:	4b0a      	ldr	r3, [pc, #40]	; (9300c <Cl_Timer_Create_Tick100Ms_Event+0x38>)
   92fe2:	781b      	ldrb	r3, [r3, #0]
   92fe4:	461a      	mov	r2, r3
   92fe6:	4b09      	ldr	r3, [pc, #36]	; (9300c <Cl_Timer_Create_Tick100Ms_Event+0x38>)
   92fe8:	4413      	add	r3, r2
   92fea:	2239      	movs	r2, #57	; 0x39
   92fec:	709a      	strb	r2, [r3, #2]
			 Cl_MacEventQueue2.Cl_MacNewEvent = true;
   92fee:	4b07      	ldr	r3, [pc, #28]	; (9300c <Cl_Timer_Create_Tick100Ms_Event+0x38>)
   92ff0:	2201      	movs	r2, #1
   92ff2:	705a      	strb	r2, [r3, #1]
			 Cl_MacEventQueue2.Cl_MacNewEventcount++;
   92ff4:	4b05      	ldr	r3, [pc, #20]	; (9300c <Cl_Timer_Create_Tick100Ms_Event+0x38>)
   92ff6:	781b      	ldrb	r3, [r3, #0]
   92ff8:	3301      	adds	r3, #1
   92ffa:	b2da      	uxtb	r2, r3
   92ffc:	4b03      	ldr	r3, [pc, #12]	; (9300c <Cl_Timer_Create_Tick100Ms_Event+0x38>)
   92ffe:	701a      	strb	r2, [r3, #0]
		 }
		 else
		 {
//			 Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT ,"OF",2);   ////12-04
		 }
		 return CL_OK;
   93000:	2300      	movs	r3, #0
		 
		 
	 }
   93002:	4618      	mov	r0, r3
   93004:	46bd      	mov	sp, r7
   93006:	f85d 7b04 	ldr.w	r7, [sp], #4
   9300a:	4770      	bx	lr
   9300c:	20072198 	.word	0x20072198

00093010 <Cl_Timer_Create_Tick150Ms_Event>:



	 Cl_ReturnCodeType  Cl_Timer_Create_Tick150Ms_Event(void)
	 {
   93010:	b480      	push	{r7}
   93012:	af00      	add	r7, sp, #0
		 // Cl_MacEvent = EVT_TICK_SEC;
		 // Cl_MacNewEvent = true;
		 
		 if( Cl_MacEventQueue2.Cl_MacNewEventcount < MAC_EVENT_COUNT_MAX )
   93014:	4b0c      	ldr	r3, [pc, #48]	; (93048 <Cl_Timer_Create_Tick150Ms_Event+0x38>)
   93016:	781b      	ldrb	r3, [r3, #0]
   93018:	2b09      	cmp	r3, #9
   9301a:	d80f      	bhi.n	9303c <Cl_Timer_Create_Tick150Ms_Event+0x2c>
		 		 
		 {	
			 Cl_MacEventQueue2.Cl_MacEvent[Cl_MacEventQueue2.Cl_MacNewEventcount] = EVT_TICK_150M ;
   9301c:	4b0a      	ldr	r3, [pc, #40]	; (93048 <Cl_Timer_Create_Tick150Ms_Event+0x38>)
   9301e:	781b      	ldrb	r3, [r3, #0]
   93020:	461a      	mov	r2, r3
   93022:	4b09      	ldr	r3, [pc, #36]	; (93048 <Cl_Timer_Create_Tick150Ms_Event+0x38>)
   93024:	4413      	add	r3, r2
   93026:	225d      	movs	r2, #93	; 0x5d
   93028:	709a      	strb	r2, [r3, #2]
			 Cl_MacEventQueue2.Cl_MacNewEvent = true;
   9302a:	4b07      	ldr	r3, [pc, #28]	; (93048 <Cl_Timer_Create_Tick150Ms_Event+0x38>)
   9302c:	2201      	movs	r2, #1
   9302e:	705a      	strb	r2, [r3, #1]
			 Cl_MacEventQueue2.Cl_MacNewEventcount++;
   93030:	4b05      	ldr	r3, [pc, #20]	; (93048 <Cl_Timer_Create_Tick150Ms_Event+0x38>)
   93032:	781b      	ldrb	r3, [r3, #0]
   93034:	3301      	adds	r3, #1
   93036:	b2da      	uxtb	r2, r3
   93038:	4b03      	ldr	r3, [pc, #12]	; (93048 <Cl_Timer_Create_Tick150Ms_Event+0x38>)
   9303a:	701a      	strb	r2, [r3, #0]
		 }
		 else
		 {
//			 Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT ,"OF",2);   ////12-04
		 }
		 return CL_OK;
   9303c:	2300      	movs	r3, #0
		 
		 
	 }
   9303e:	4618      	mov	r0, r3
   93040:	46bd      	mov	sp, r7
   93042:	f85d 7b04 	ldr.w	r7, [sp], #4
   93046:	4770      	bx	lr
   93048:	20072198 	.word	0x20072198

0009304c <Cl_Timer_Create_Tick500Ms_Event>:
	 
	 
	 Cl_ReturnCodeType  Cl_Timer_Create_Tick500Ms_Event(void)
	 {
   9304c:	b480      	push	{r7}
   9304e:	af00      	add	r7, sp, #0
		 // Cl_MacEvent = EVT_TICK_SEC;
		 // Cl_MacNewEvent = true;
		 
		 if( Cl_MacEventQueue2.Cl_MacNewEventcount < MAC_EVENT_COUNT_MAX )
   93050:	4b0c      	ldr	r3, [pc, #48]	; (93084 <Cl_Timer_Create_Tick500Ms_Event+0x38>)
   93052:	781b      	ldrb	r3, [r3, #0]
   93054:	2b09      	cmp	r3, #9
   93056:	d80f      	bhi.n	93078 <Cl_Timer_Create_Tick500Ms_Event+0x2c>
		 
		 
		 {
			 Cl_MacEventQueue2.Cl_MacEvent[Cl_MacEventQueue2.Cl_MacNewEventcount] = EVT_TICK_500M ;
   93058:	4b0a      	ldr	r3, [pc, #40]	; (93084 <Cl_Timer_Create_Tick500Ms_Event+0x38>)
   9305a:	781b      	ldrb	r3, [r3, #0]
   9305c:	461a      	mov	r2, r3
   9305e:	4b09      	ldr	r3, [pc, #36]	; (93084 <Cl_Timer_Create_Tick500Ms_Event+0x38>)
   93060:	4413      	add	r3, r2
   93062:	223a      	movs	r2, #58	; 0x3a
   93064:	709a      	strb	r2, [r3, #2]
			 Cl_MacEventQueue2.Cl_MacNewEvent = true;
   93066:	4b07      	ldr	r3, [pc, #28]	; (93084 <Cl_Timer_Create_Tick500Ms_Event+0x38>)
   93068:	2201      	movs	r2, #1
   9306a:	705a      	strb	r2, [r3, #1]
			 Cl_MacEventQueue2.Cl_MacNewEventcount++;
   9306c:	4b05      	ldr	r3, [pc, #20]	; (93084 <Cl_Timer_Create_Tick500Ms_Event+0x38>)
   9306e:	781b      	ldrb	r3, [r3, #0]
   93070:	3301      	adds	r3, #1
   93072:	b2da      	uxtb	r2, r3
   93074:	4b03      	ldr	r3, [pc, #12]	; (93084 <Cl_Timer_Create_Tick500Ms_Event+0x38>)
   93076:	701a      	strb	r2, [r3, #0]
		 }
		 else
		 {
//			 Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT ,"OF",2);   //12-04
		 }
		 return CL_OK;
   93078:	2300      	movs	r3, #0
		 
		 
	 }
   9307a:	4618      	mov	r0, r3
   9307c:	46bd      	mov	sp, r7
   9307e:	f85d 7b04 	ldr.w	r7, [sp], #4
   93082:	4770      	bx	lr
   93084:	20072198 	.word	0x20072198

00093088 <Cl_Timer_Create_TickSec_Event>:



	 Cl_ReturnCodeType  Cl_Timer_Create_TickSec_Event(void)
	 {
   93088:	b580      	push	{r7, lr}
   9308a:	af00      	add	r7, sp, #0
		// Cl_MacEvent = EVT_TICK_SEC;
		// Cl_MacNewEvent = true;
		static Cl_Uint8Type Cl_Secondscnt = 0;
		
		Cl_Secondscnt++;
   9308c:	4b14      	ldr	r3, [pc, #80]	; (930e0 <Cl_Timer_Create_TickSec_Event+0x58>)
   9308e:	781b      	ldrb	r3, [r3, #0]
   93090:	3301      	adds	r3, #1
   93092:	b2da      	uxtb	r2, r3
   93094:	4b12      	ldr	r3, [pc, #72]	; (930e0 <Cl_Timer_Create_TickSec_Event+0x58>)
   93096:	701a      	strb	r2, [r3, #0]
		// Cl_Mac_GetSystem_Status_Query();
		 if( Cl_MacEventQueue2.Cl_MacNewEventcount < MAC_EVENT_COUNT_MAX )
   93098:	4b12      	ldr	r3, [pc, #72]	; (930e4 <Cl_Timer_Create_TickSec_Event+0x5c>)
   9309a:	781b      	ldrb	r3, [r3, #0]
   9309c:	2b09      	cmp	r3, #9
   9309e:	d80f      	bhi.n	930c0 <Cl_Timer_Create_TickSec_Event+0x38>
		
		
		 {
			 Cl_MacEventQueue2.Cl_MacEvent[Cl_MacEventQueue2.Cl_MacNewEventcount] = EVT_TICK_SEC ;
   930a0:	4b10      	ldr	r3, [pc, #64]	; (930e4 <Cl_Timer_Create_TickSec_Event+0x5c>)
   930a2:	781b      	ldrb	r3, [r3, #0]
   930a4:	461a      	mov	r2, r3
   930a6:	4b0f      	ldr	r3, [pc, #60]	; (930e4 <Cl_Timer_Create_TickSec_Event+0x5c>)
   930a8:	4413      	add	r3, r2
   930aa:	223b      	movs	r2, #59	; 0x3b
   930ac:	709a      	strb	r2, [r3, #2]
			 Cl_MacEventQueue2.Cl_MacNewEvent = true;
   930ae:	4b0d      	ldr	r3, [pc, #52]	; (930e4 <Cl_Timer_Create_TickSec_Event+0x5c>)
   930b0:	2201      	movs	r2, #1
   930b2:	705a      	strb	r2, [r3, #1]
			 Cl_MacEventQueue2.Cl_MacNewEventcount++;
   930b4:	4b0b      	ldr	r3, [pc, #44]	; (930e4 <Cl_Timer_Create_TickSec_Event+0x5c>)
   930b6:	781b      	ldrb	r3, [r3, #0]
   930b8:	3301      	adds	r3, #1
   930ba:	b2da      	uxtb	r2, r3
   930bc:	4b09      	ldr	r3, [pc, #36]	; (930e4 <Cl_Timer_Create_TickSec_Event+0x5c>)
   930be:	701a      	strb	r2, [r3, #0]
		 }
		 else
		 {
//			 Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT ,"OF",2);            //12-04
		 }		 
		if(Cl_Secondscnt >= 60)
   930c0:	4b07      	ldr	r3, [pc, #28]	; (930e0 <Cl_Timer_Create_TickSec_Event+0x58>)
   930c2:	781b      	ldrb	r3, [r3, #0]
   930c4:	2b3b      	cmp	r3, #59	; 0x3b
   930c6:	d908      	bls.n	930da <Cl_Timer_Create_TickSec_Event+0x52>
		 {
			 Cl_Secondscnt = 0;
   930c8:	4b05      	ldr	r3, [pc, #20]	; (930e0 <Cl_Timer_Create_TickSec_Event+0x58>)
   930ca:	2200      	movs	r2, #0
   930cc:	701a      	strb	r2, [r3, #0]
			//  Cl_Minutes++;
			 Cl_RetValue = Cl_Timer_Create_TickMin_Event();
   930ce:	4b06      	ldr	r3, [pc, #24]	; (930e8 <Cl_Timer_Create_TickSec_Event+0x60>)
   930d0:	4798      	blx	r3
   930d2:	4603      	mov	r3, r0
   930d4:	461a      	mov	r2, r3
   930d6:	4b05      	ldr	r3, [pc, #20]	; (930ec <Cl_Timer_Create_TickSec_Event+0x64>)
   930d8:	701a      	strb	r2, [r3, #0]
			// tg_timer_minute();
		 }
			 return CL_OK;
   930da:	2300      	movs	r3, #0
		 
		
		 }
   930dc:	4618      	mov	r0, r3
   930de:	bd80      	pop	{r7, pc}
   930e0:	20071aa4 	.word	0x20071aa4
   930e4:	20072198 	.word	0x20072198
   930e8:	000930f1 	.word	0x000930f1
   930ec:	20072658 	.word	0x20072658

000930f0 <Cl_Timer_Create_TickMin_Event>:

	 Cl_ReturnCodeType  Cl_Timer_Create_TickMin_Event(void)
	 {
   930f0:	b480      	push	{r7}
   930f2:	af00      	add	r7, sp, #0
		 
		 if( Cl_MacEventQueue2.Cl_MacNewEventcount < MAC_EVENT_COUNT_MAX )	
   930f4:	4b0c      	ldr	r3, [pc, #48]	; (93128 <Cl_Timer_Create_TickMin_Event+0x38>)
   930f6:	781b      	ldrb	r3, [r3, #0]
   930f8:	2b09      	cmp	r3, #9
   930fa:	d80f      	bhi.n	9311c <Cl_Timer_Create_TickMin_Event+0x2c>
		 {
			 Cl_MacEventQueue2.Cl_MacEvent[Cl_MacEventQueue2.Cl_MacNewEventcount] = EVT_TICK_MIN ;
   930fc:	4b0a      	ldr	r3, [pc, #40]	; (93128 <Cl_Timer_Create_TickMin_Event+0x38>)
   930fe:	781b      	ldrb	r3, [r3, #0]
   93100:	461a      	mov	r2, r3
   93102:	4b09      	ldr	r3, [pc, #36]	; (93128 <Cl_Timer_Create_TickMin_Event+0x38>)
   93104:	4413      	add	r3, r2
   93106:	223c      	movs	r2, #60	; 0x3c
   93108:	709a      	strb	r2, [r3, #2]
			 Cl_MacEventQueue2.Cl_MacNewEvent = true;
   9310a:	4b07      	ldr	r3, [pc, #28]	; (93128 <Cl_Timer_Create_TickMin_Event+0x38>)
   9310c:	2201      	movs	r2, #1
   9310e:	705a      	strb	r2, [r3, #1]
			 Cl_MacEventQueue2.Cl_MacNewEventcount++;
   93110:	4b05      	ldr	r3, [pc, #20]	; (93128 <Cl_Timer_Create_TickMin_Event+0x38>)
   93112:	781b      	ldrb	r3, [r3, #0]
   93114:	3301      	adds	r3, #1
   93116:	b2da      	uxtb	r2, r3
   93118:	4b03      	ldr	r3, [pc, #12]	; (93128 <Cl_Timer_Create_TickMin_Event+0x38>)
   9311a:	701a      	strb	r2, [r3, #0]
		 }
		 else
		 {
//			 Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT ,"OF",2);             //12-04
		 }
		 return CL_OK;
   9311c:	2300      	movs	r3, #0
		 
		 // Cl_Console_ConvertTimeoutEvent_toMacEvent(Cl_ConsoleRxEventsType command ,Cl_Mac_EventsType* MacEvent)
	 }
   9311e:	4618      	mov	r0, r3
   93120:	46bd      	mov	sp, r7
   93122:	f85d 7b04 	ldr.w	r7, [sp], #4
   93126:	4770      	bx	lr
   93128:	20072198 	.word	0x20072198

0009312c <Cl_Timer_Create_TickHour_Event>:

	 Cl_ReturnCodeType  Cl_Timer_Create_TickHour_Event(void)
	 {
   9312c:	b480      	push	{r7}
   9312e:	af00      	add	r7, sp, #0

		 if( Cl_MacEventQueue2.Cl_MacNewEventcount <= MAC_EVENT_COUNT_MAX )	
   93130:	4b0c      	ldr	r3, [pc, #48]	; (93164 <Cl_Timer_Create_TickHour_Event+0x38>)
   93132:	781b      	ldrb	r3, [r3, #0]
   93134:	2b0a      	cmp	r3, #10
   93136:	d80f      	bhi.n	93158 <Cl_Timer_Create_TickHour_Event+0x2c>
		 {
			 Cl_MacEventQueue2.Cl_MacEvent[Cl_MacEventQueue2.Cl_MacNewEventcount] = EVT_TICK_HOUR ;
   93138:	4b0a      	ldr	r3, [pc, #40]	; (93164 <Cl_Timer_Create_TickHour_Event+0x38>)
   9313a:	781b      	ldrb	r3, [r3, #0]
   9313c:	461a      	mov	r2, r3
   9313e:	4b09      	ldr	r3, [pc, #36]	; (93164 <Cl_Timer_Create_TickHour_Event+0x38>)
   93140:	4413      	add	r3, r2
   93142:	223d      	movs	r2, #61	; 0x3d
   93144:	709a      	strb	r2, [r3, #2]
			 Cl_MacEventQueue2.Cl_MacNewEvent = true;
   93146:	4b07      	ldr	r3, [pc, #28]	; (93164 <Cl_Timer_Create_TickHour_Event+0x38>)
   93148:	2201      	movs	r2, #1
   9314a:	705a      	strb	r2, [r3, #1]
			 Cl_MacEventQueue2.Cl_MacNewEventcount++;
   9314c:	4b05      	ldr	r3, [pc, #20]	; (93164 <Cl_Timer_Create_TickHour_Event+0x38>)
   9314e:	781b      	ldrb	r3, [r3, #0]
   93150:	3301      	adds	r3, #1
   93152:	b2da      	uxtb	r2, r3
   93154:	4b03      	ldr	r3, [pc, #12]	; (93164 <Cl_Timer_Create_TickHour_Event+0x38>)
   93156:	701a      	strb	r2, [r3, #0]
			 
		 }
		 return CL_OK;
   93158:	2300      	movs	r3, #0
		 
		 // Cl_Console_ConvertTimeoutEvent_toMacEvent(Cl_ConsoleRxEventsType command ,Cl_Mac_EventsType* MacEvent)
	 }
   9315a:	4618      	mov	r0, r3
   9315c:	46bd      	mov	sp, r7
   9315e:	f85d 7b04 	ldr.w	r7, [sp], #4
   93162:	4770      	bx	lr
   93164:	20072198 	.word	0x20072198

00093168 <mdelay>:
Cl_ReturnCodeType cl_memset(Cl_Uint8Type* , Cl_Uint8Type );

volatile Cl_Uint32Type g_ul_ms_ticks = 0;

static void mdelay(Cl_Uint32Type ul_dly_ticks)
{
   93168:	b480      	push	{r7}
   9316a:	b085      	sub	sp, #20
   9316c:	af00      	add	r7, sp, #0
   9316e:	6078      	str	r0, [r7, #4]
	Cl_Uint32Type ul_cur_ticks;

	ul_cur_ticks = g_ul_ms_ticks;
   93170:	4b07      	ldr	r3, [pc, #28]	; (93190 <mdelay+0x28>)
   93172:	681b      	ldr	r3, [r3, #0]
   93174:	60fb      	str	r3, [r7, #12]
	while ((g_ul_ms_ticks - ul_cur_ticks) < ul_dly_ticks);
   93176:	bf00      	nop
   93178:	4b05      	ldr	r3, [pc, #20]	; (93190 <mdelay+0x28>)
   9317a:	681a      	ldr	r2, [r3, #0]
   9317c:	68fb      	ldr	r3, [r7, #12]
   9317e:	1ad2      	subs	r2, r2, r3
   93180:	687b      	ldr	r3, [r7, #4]
   93182:	429a      	cmp	r2, r3
   93184:	d3f8      	bcc.n	93178 <mdelay+0x10>
}
   93186:	3714      	adds	r7, #20
   93188:	46bd      	mov	sp, r7
   9318a:	f85d 7b04 	ldr.w	r7, [sp], #4
   9318e:	4770      	bx	lr
   93190:	20071aa8 	.word	0x20071aa8

00093194 <cl_wait>:

Cl_ReturnCodeType cl_wait(Cl_Uint32Type ul_dly_ticks)
{
   93194:	b580      	push	{r7, lr}
   93196:	b082      	sub	sp, #8
   93198:	af00      	add	r7, sp, #0
   9319a:	6078      	str	r0, [r7, #4]
	mdelay(ul_dly_ticks);
   9319c:	6878      	ldr	r0, [r7, #4]
   9319e:	4b03      	ldr	r3, [pc, #12]	; (931ac <cl_wait+0x18>)
   931a0:	4798      	blx	r3
	return CL_OK;
   931a2:	2300      	movs	r3, #0
}
   931a4:	4618      	mov	r0, r3
   931a6:	3708      	adds	r7, #8
   931a8:	46bd      	mov	sp, r7
   931aa:	bd80      	pop	{r7, pc}
   931ac:	00093169 	.word	0x00093169

000931b0 <cl_systemtickcallback>:

Cl_ReturnCodeType cl_systemtickcallback(void)
{
   931b0:	b580      	push	{r7, lr}
   931b2:	b082      	sub	sp, #8
   931b4:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType Cl_retVal;
	Cl_retVal = Cl_MilliTickcallBack();
   931b6:	4b07      	ldr	r3, [pc, #28]	; (931d4 <cl_systemtickcallback+0x24>)
   931b8:	4798      	blx	r3
   931ba:	4603      	mov	r3, r0
   931bc:	71fb      	strb	r3, [r7, #7]
	g_ul_ms_ticks++;
   931be:	4b06      	ldr	r3, [pc, #24]	; (931d8 <cl_systemtickcallback+0x28>)
   931c0:	681b      	ldr	r3, [r3, #0]
   931c2:	3301      	adds	r3, #1
   931c4:	4a04      	ldr	r2, [pc, #16]	; (931d8 <cl_systemtickcallback+0x28>)
   931c6:	6013      	str	r3, [r2, #0]
	return  CL_OK;
   931c8:	2300      	movs	r3, #0
}
   931ca:	4618      	mov	r0, r3
   931cc:	3708      	adds	r7, #8
   931ce:	46bd      	mov	sp, r7
   931d0:	bd80      	pop	{r7, pc}
   931d2:	bf00      	nop
   931d4:	00092d41 	.word	0x00092d41
   931d8:	20071aa8 	.word	0x20071aa8

000931dc <cl_memset>:


Cl_ReturnCodeType cl_memset(Cl_Uint8Type* pdata, Cl_Uint8Type datasize)
{
   931dc:	b480      	push	{r7}
   931de:	b085      	sub	sp, #20
   931e0:	af00      	add	r7, sp, #0
   931e2:	6078      	str	r0, [r7, #4]
   931e4:	460b      	mov	r3, r1
   931e6:	70fb      	strb	r3, [r7, #3]
	Cl_Uint8Type tempcnt = 0 ;
   931e8:	2300      	movs	r3, #0
   931ea:	73fb      	strb	r3, [r7, #15]
	Cl_Uint8Type* pdata1;
	
	pdata1 = (Cl_Uint8Type*)pdata;
   931ec:	687b      	ldr	r3, [r7, #4]
   931ee:	60bb      	str	r3, [r7, #8]
	
	for (tempcnt = 0 ; tempcnt < datasize ; tempcnt++)
   931f0:	2300      	movs	r3, #0
   931f2:	73fb      	strb	r3, [r7, #15]
   931f4:	e007      	b.n	93206 <cl_memset+0x2a>
	{
		pdata[tempcnt] = 0;
   931f6:	7bfb      	ldrb	r3, [r7, #15]
   931f8:	687a      	ldr	r2, [r7, #4]
   931fa:	4413      	add	r3, r2
   931fc:	2200      	movs	r2, #0
   931fe:	701a      	strb	r2, [r3, #0]
	Cl_Uint8Type tempcnt = 0 ;
	Cl_Uint8Type* pdata1;
	
	pdata1 = (Cl_Uint8Type*)pdata;
	
	for (tempcnt = 0 ; tempcnt < datasize ; tempcnt++)
   93200:	7bfb      	ldrb	r3, [r7, #15]
   93202:	3301      	adds	r3, #1
   93204:	73fb      	strb	r3, [r7, #15]
   93206:	7bfa      	ldrb	r2, [r7, #15]
   93208:	78fb      	ldrb	r3, [r7, #3]
   9320a:	429a      	cmp	r2, r3
   9320c:	d3f3      	bcc.n	931f6 <cl_memset+0x1a>
	//	*pdata = 1;
	//	pdata++;
	//	*pdata1 = (Cl_Uint8Type*)0;
	//	pdata1 =  pdata1 +1;
	}
	return CL_OK;
   9320e:	2300      	movs	r3, #0
}
   93210:	4618      	mov	r0, r3
   93212:	3714      	adds	r7, #20
   93214:	46bd      	mov	sp, r7
   93216:	f85d 7b04 	ldr.w	r7, [sp], #4
   9321a:	4770      	bx	lr
   9321c:	0000      	movs	r0, r0
	...

00093220 <cl_utilities_CalConductivity>:

float cl_utilities_CalConductivity(uint16_t raw_cond,float temperature)
{
   93220:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
   93224:	b085      	sub	sp, #20
   93226:	af00      	add	r7, sp, #0
   93228:	4603      	mov	r3, r0
   9322a:	6039      	str	r1, [r7, #0]
   9322c:	80fb      	strh	r3, [r7, #6]
			float conductivity, conductance;
			conductance = raw_cond;// /1000; 
   9322e:	88fa      	ldrh	r2, [r7, #6]
   93230:	4b2b      	ldr	r3, [pc, #172]	; (932e0 <cl_utilities_CalConductivity+0xc0>)
   93232:	4610      	mov	r0, r2
   93234:	4798      	blx	r3
   93236:	4603      	mov	r3, r0
   93238:	60fb      	str	r3, [r7, #12]
//			conductivity = (raw_cond -66.67)/100;                                 // raw conductance contains conductance of fixed 150 ohm resistance
	//		cond_final = 0.0001*cond1*cond1 + 0.032*cond1 +0.91 + 0.4;
			conductivity = conductance * 1.272;                             // Conductance * cell constant = conductivity
   9323a:	4b2a      	ldr	r3, [pc, #168]	; (932e4 <cl_utilities_CalConductivity+0xc4>)
   9323c:	68f8      	ldr	r0, [r7, #12]
   9323e:	4798      	blx	r3
   93240:	4602      	mov	r2, r0
   93242:	460b      	mov	r3, r1
   93244:	4c28      	ldr	r4, [pc, #160]	; (932e8 <cl_utilities_CalConductivity+0xc8>)
   93246:	4610      	mov	r0, r2
   93248:	4619      	mov	r1, r3
   9324a:	a321      	add	r3, pc, #132	; (adr r3, 932d0 <cl_utilities_CalConductivity+0xb0>)
   9324c:	e9d3 2300 	ldrd	r2, r3, [r3]
   93250:	47a0      	blx	r4
   93252:	4602      	mov	r2, r0
   93254:	460b      	mov	r3, r1
   93256:	4610      	mov	r0, r2
   93258:	4619      	mov	r1, r3
   9325a:	4b24      	ldr	r3, [pc, #144]	; (932ec <cl_utilities_CalConductivity+0xcc>)
   9325c:	4798      	blx	r3
   9325e:	4603      	mov	r3, r0
   93260:	60bb      	str	r3, [r7, #8]
	//		conductivity = (0.0001*conductivity*conductivity + 0.032*conductivity) * 100;                          // Gopal: Need to check for offset if required based on the observations in IBP 02082017
 			conductivity = (conductivity/(1+(temperature  -25.0)*0.021));                    // conductivity compensated at 25 degrees using win-situ formula
   93262:	4b20      	ldr	r3, [pc, #128]	; (932e4 <cl_utilities_CalConductivity+0xc4>)
   93264:	68b8      	ldr	r0, [r7, #8]
   93266:	4798      	blx	r3
   93268:	4680      	mov	r8, r0
   9326a:	4689      	mov	r9, r1
   9326c:	4b1d      	ldr	r3, [pc, #116]	; (932e4 <cl_utilities_CalConductivity+0xc4>)
   9326e:	6838      	ldr	r0, [r7, #0]
   93270:	4798      	blx	r3
   93272:	4602      	mov	r2, r0
   93274:	460b      	mov	r3, r1
   93276:	4c1e      	ldr	r4, [pc, #120]	; (932f0 <cl_utilities_CalConductivity+0xd0>)
   93278:	4610      	mov	r0, r2
   9327a:	4619      	mov	r1, r3
   9327c:	f04f 0200 	mov.w	r2, #0
   93280:	4b1c      	ldr	r3, [pc, #112]	; (932f4 <cl_utilities_CalConductivity+0xd4>)
   93282:	47a0      	blx	r4
   93284:	4602      	mov	r2, r0
   93286:	460b      	mov	r3, r1
   93288:	4c17      	ldr	r4, [pc, #92]	; (932e8 <cl_utilities_CalConductivity+0xc8>)
   9328a:	4610      	mov	r0, r2
   9328c:	4619      	mov	r1, r3
   9328e:	a312      	add	r3, pc, #72	; (adr r3, 932d8 <cl_utilities_CalConductivity+0xb8>)
   93290:	e9d3 2300 	ldrd	r2, r3, [r3]
   93294:	47a0      	blx	r4
   93296:	4602      	mov	r2, r0
   93298:	460b      	mov	r3, r1
   9329a:	4c17      	ldr	r4, [pc, #92]	; (932f8 <cl_utilities_CalConductivity+0xd8>)
   9329c:	4610      	mov	r0, r2
   9329e:	4619      	mov	r1, r3
   932a0:	f04f 0200 	mov.w	r2, #0
   932a4:	4b15      	ldr	r3, [pc, #84]	; (932fc <cl_utilities_CalConductivity+0xdc>)
   932a6:	47a0      	blx	r4
   932a8:	4602      	mov	r2, r0
   932aa:	460b      	mov	r3, r1
   932ac:	4c14      	ldr	r4, [pc, #80]	; (93300 <cl_utilities_CalConductivity+0xe0>)
   932ae:	4640      	mov	r0, r8
   932b0:	4649      	mov	r1, r9
   932b2:	47a0      	blx	r4
   932b4:	4602      	mov	r2, r0
   932b6:	460b      	mov	r3, r1
   932b8:	4610      	mov	r0, r2
   932ba:	4619      	mov	r1, r3
   932bc:	4b0b      	ldr	r3, [pc, #44]	; (932ec <cl_utilities_CalConductivity+0xcc>)
   932be:	4798      	blx	r3
   932c0:	4603      	mov	r3, r0
   932c2:	60bb      	str	r3, [r7, #8]
//			return conductivity;
			return conductivity; ///10;
   932c4:	68bb      	ldr	r3, [r7, #8]
   932c6:	4618      	mov	r0, r3
   932c8:	3714      	adds	r7, #20
   932ca:	46bd      	mov	sp, r7
   932cc:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}
   932d0:	ac083127 	.word	0xac083127
   932d4:	3ff45a1c 	.word	0x3ff45a1c
   932d8:	24dd2f1b 	.word	0x24dd2f1b
   932dc:	3f958106 	.word	0x3f958106
   932e0:	000a68a9 	.word	0x000a68a9
   932e4:	000a6031 	.word	0x000a6031
   932e8:	000a60d9 	.word	0x000a60d9
   932ec:	000a669d 	.word	0x000a669d
   932f0:	000a5d71 	.word	0x000a5d71
   932f4:	40390000 	.word	0x40390000
   932f8:	000a5d75 	.word	0x000a5d75
   932fc:	3ff00000 	.word	0x3ff00000
   93300:	000a632d 	.word	0x000a632d

00093304 <cl_bp_controller>:
	}
	return CL_OK;
}

Cl_ReturnCodeType cl_bp_controller(cl_bp_events bp_event , Cl_Uint32Type data)
{
   93304:	b580      	push	{r7, lr}
   93306:	b084      	sub	sp, #16
   93308:	af00      	add	r7, sp, #0
   9330a:	4603      	mov	r3, r0
   9330c:	6039      	str	r1, [r7, #0]
   9330e:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType cl_bp_retcode = CL_OK;
   93310:	2300      	movs	r3, #0
   93312:	73fb      	strb	r3, [r7, #15]
	cl_bp_pump_states bp_pumpstate = CL_BP_P_STATE_IDLE;
   93314:	2300      	movs	r3, #0
   93316:	73bb      	strb	r3, [r7, #14]
	Cl_Uint16Type bp_delta_value = 0 ;
   93318:	2300      	movs	r3, #0
   9331a:	81bb      	strh	r3, [r7, #12]
	
	
	switch(bp_state)
   9331c:	4b7e      	ldr	r3, [pc, #504]	; (93518 <cl_bp_controller+0x214>)
   9331e:	781b      	ldrb	r3, [r3, #0]
   93320:	2b04      	cmp	r3, #4
   93322:	f200 80f2 	bhi.w	9350a <cl_bp_controller+0x206>
   93326:	a201      	add	r2, pc, #4	; (adr r2, 9332c <cl_bp_controller+0x28>)
   93328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9332c:	00093341 	.word	0x00093341
   93330:	0009339d 	.word	0x0009339d
   93334:	00093447 	.word	0x00093447
   93338:	00093499 	.word	0x00093499
   9333c:	0009350b 	.word	0x0009350b
	{
		case CL_BP_STATE_IDLE:
		switch (bp_event)
   93340:	79fb      	ldrb	r3, [r7, #7]
   93342:	2b01      	cmp	r3, #1
   93344:	d002      	beq.n	9334c <cl_bp_controller+0x48>
   93346:	2b02      	cmp	r3, #2
   93348:	d00e      	beq.n	93368 <cl_bp_controller+0x64>
			cl_bp_pumpFeedback_start();
			cl_bp_retcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_BLOODPUMP_ON,&data,0);
			bp_state = CL_BP_STATE_STARTED;
			break;
			
			default:break;
   9334a:	e026      	b.n	9339a <cl_bp_controller+0x96>
	{
		case CL_BP_STATE_IDLE:
		switch (bp_event)
		{
			case CL_BP_EVENT_SET_BP_RATE:
			cl_bp_rate = data;
   9334c:	683b      	ldr	r3, [r7, #0]
   9334e:	4a73      	ldr	r2, [pc, #460]	; (9351c <cl_bp_controller+0x218>)
   93350:	6013      	str	r3, [r2, #0]
			pwm_period = cl_bp_rate ;
   93352:	4b72      	ldr	r3, [pc, #456]	; (9351c <cl_bp_controller+0x218>)
   93354:	681b      	ldr	r3, [r3, #0]
   93356:	4a72      	ldr	r2, [pc, #456]	; (93520 <cl_bp_controller+0x21c>)
   93358:	6013      	str	r3, [r2, #0]
			sv_cntrl_setpumpspeed(BLOODPUMP,pwm_period);
   9335a:	4b71      	ldr	r3, [pc, #452]	; (93520 <cl_bp_controller+0x21c>)
   9335c:	681b      	ldr	r3, [r3, #0]
   9335e:	2003      	movs	r0, #3
   93360:	4619      	mov	r1, r3
   93362:	4b70      	ldr	r3, [pc, #448]	; (93524 <cl_bp_controller+0x220>)
   93364:	4798      	blx	r3
			break;
   93366:	e018      	b.n	9339a <cl_bp_controller+0x96>
			case CL_BP_EVENT_START:
			cl_bp_retcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true );
   93368:	2001      	movs	r0, #1
   9336a:	2101      	movs	r1, #1
   9336c:	4b6e      	ldr	r3, [pc, #440]	; (93528 <cl_bp_controller+0x224>)
   9336e:	4798      	blx	r3
   93370:	4603      	mov	r3, r0
   93372:	73fb      	strb	r3, [r7, #15]
			cl_bp_retcode =  sv_cntrl_activatepump(BLOODPUMP);
   93374:	2003      	movs	r0, #3
   93376:	4b6d      	ldr	r3, [pc, #436]	; (9352c <cl_bp_controller+0x228>)
   93378:	4798      	blx	r3
   9337a:	4603      	mov	r3, r0
   9337c:	73fb      	strb	r3, [r7, #15]
			cl_bp_pumpFeedback_start();
   9337e:	4b6c      	ldr	r3, [pc, #432]	; (93530 <cl_bp_controller+0x22c>)
   93380:	4798      	blx	r3
			cl_bp_retcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_BLOODPUMP_ON,&data,0);
   93382:	463b      	mov	r3, r7
   93384:	2035      	movs	r0, #53	; 0x35
   93386:	4619      	mov	r1, r3
   93388:	2200      	movs	r2, #0
   9338a:	4b6a      	ldr	r3, [pc, #424]	; (93534 <cl_bp_controller+0x230>)
   9338c:	4798      	blx	r3
   9338e:	4603      	mov	r3, r0
   93390:	73fb      	strb	r3, [r7, #15]
			bp_state = CL_BP_STATE_STARTED;
   93392:	4b61      	ldr	r3, [pc, #388]	; (93518 <cl_bp_controller+0x214>)
   93394:	2201      	movs	r2, #1
   93396:	701a      	strb	r2, [r3, #0]
			break;
   93398:	bf00      	nop
			
			default:break;
			
		}
		break;
   9339a:	e0b7      	b.n	9350c <cl_bp_controller+0x208>
		case CL_BP_STATE_STARTED:
		switch (bp_event)
   9339c:	79fb      	ldrb	r3, [r7, #7]
   9339e:	3b01      	subs	r3, #1
   933a0:	2b06      	cmp	r3, #6
   933a2:	d84e      	bhi.n	93442 <cl_bp_controller+0x13e>
   933a4:	a201      	add	r2, pc, #4	; (adr r2, 933ac <cl_bp_controller+0xa8>)
   933a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   933aa:	bf00      	nop
   933ac:	000933fb 	.word	0x000933fb
   933b0:	000933c9 	.word	0x000933c9
   933b4:	00093443 	.word	0x00093443
   933b8:	0009340d 	.word	0x0009340d
   933bc:	0009343b 	.word	0x0009343b
   933c0:	00093443 	.word	0x00093443
   933c4:	00093443 	.word	0x00093443
		{
			case CL_BP_EVENT_START:
			
			cl_bp_retcode =  sv_cntrl_activatepump(BLOODPUMP);
   933c8:	2003      	movs	r0, #3
   933ca:	4b58      	ldr	r3, [pc, #352]	; (9352c <cl_bp_controller+0x228>)
   933cc:	4798      	blx	r3
   933ce:	4603      	mov	r3, r0
   933d0:	73fb      	strb	r3, [r7, #15]
			cl_bp_retcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true );
   933d2:	2001      	movs	r0, #1
   933d4:	2101      	movs	r1, #1
   933d6:	4b54      	ldr	r3, [pc, #336]	; (93528 <cl_bp_controller+0x224>)
   933d8:	4798      	blx	r3
   933da:	4603      	mov	r3, r0
   933dc:	73fb      	strb	r3, [r7, #15]
			cl_bp_pumpFeedback_start();
   933de:	4b54      	ldr	r3, [pc, #336]	; (93530 <cl_bp_controller+0x22c>)
   933e0:	4798      	blx	r3
			cl_bp_retcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_BLOODPUMP_ON,&data,0);
   933e2:	463b      	mov	r3, r7
   933e4:	2035      	movs	r0, #53	; 0x35
   933e6:	4619      	mov	r1, r3
   933e8:	2200      	movs	r2, #0
   933ea:	4b52      	ldr	r3, [pc, #328]	; (93534 <cl_bp_controller+0x230>)
   933ec:	4798      	blx	r3
   933ee:	4603      	mov	r3, r0
   933f0:	73fb      	strb	r3, [r7, #15]
			bp_state = CL_BP_STATE_STARTED;
   933f2:	4b49      	ldr	r3, [pc, #292]	; (93518 <cl_bp_controller+0x214>)
   933f4:	2201      	movs	r2, #1
   933f6:	701a      	strb	r2, [r3, #0]
			
			break;
   933f8:	e024      	b.n	93444 <cl_bp_controller+0x140>
			{
				
			}
			break;
			case CL_BP_EVENT_SET_BP_RATE:
			sv_cntrl_setpumpspeed(BLOODPUMP,data);
   933fa:	683b      	ldr	r3, [r7, #0]
   933fc:	2003      	movs	r0, #3
   933fe:	4619      	mov	r1, r3
   93400:	4b48      	ldr	r3, [pc, #288]	; (93524 <cl_bp_controller+0x220>)
   93402:	4798      	blx	r3
			bp_state =  CL_BP_STATE_STARTED;
   93404:	4b44      	ldr	r3, [pc, #272]	; (93518 <cl_bp_controller+0x214>)
   93406:	2201      	movs	r2, #1
   93408:	701a      	strb	r2, [r3, #0]
			break;
   9340a:	e01b      	b.n	93444 <cl_bp_controller+0x140>
			case CL_BP_EVENT_PAUSE:
			break;
			case CL_BP_EVENT_STOP:
		//	cl_wait(200);
			cl_bp_retcode =  sv_cntrl_deactivatepump(BLOODPUMP);
   9340c:	2003      	movs	r0, #3
   9340e:	4b4a      	ldr	r3, [pc, #296]	; (93538 <cl_bp_controller+0x234>)
   93410:	4798      	blx	r3
   93412:	4603      	mov	r3, r0
   93414:	73fb      	strb	r3, [r7, #15]
			cl_bp_pumpFeedback_start();
   93416:	4b46      	ldr	r3, [pc, #280]	; (93530 <cl_bp_controller+0x22c>)
   93418:	4798      	blx	r3
		//	cl_wait(20);
			cl_bp_retcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_BLOODPUMP_OFF,&data,0);
   9341a:	463b      	mov	r3, r7
   9341c:	2036      	movs	r0, #54	; 0x36
   9341e:	4619      	mov	r1, r3
   93420:	2200      	movs	r2, #0
   93422:	4b44      	ldr	r3, [pc, #272]	; (93534 <cl_bp_controller+0x230>)
   93424:	4798      	blx	r3
   93426:	4603      	mov	r3, r0
   93428:	73fb      	strb	r3, [r7, #15]
			cl_bp_retcode =  cl_bp_pumpFeedback_stop();
   9342a:	4b44      	ldr	r3, [pc, #272]	; (9353c <cl_bp_controller+0x238>)
   9342c:	4798      	blx	r3
   9342e:	4603      	mov	r3, r0
   93430:	73fb      	strb	r3, [r7, #15]
			bp_state = CL_BP_STATE_STOPPED;
   93432:	4b39      	ldr	r3, [pc, #228]	; (93518 <cl_bp_controller+0x214>)
   93434:	2202      	movs	r2, #2
   93436:	701a      	strb	r2, [r3, #0]
			break;
   93438:	e004      	b.n	93444 <cl_bp_controller+0x140>
			case CL_BP_EVENT_COMPLETED:
			bp_state = CL_BP_STATE_IDLE;
   9343a:	4b37      	ldr	r3, [pc, #220]	; (93518 <cl_bp_controller+0x214>)
   9343c:	2200      	movs	r2, #0
   9343e:	701a      	strb	r2, [r3, #0]
			break;
   93440:	e000      	b.n	93444 <cl_bp_controller+0x140>
			default:break;
   93442:	bf00      	nop
			
		}
		break;
   93444:	e062      	b.n	9350c <cl_bp_controller+0x208>
		case CL_BP_STATE_STOPPED:
		switch (bp_event)
   93446:	79fb      	ldrb	r3, [r7, #7]
   93448:	2b01      	cmp	r3, #1
   9344a:	d002      	beq.n	93452 <cl_bp_controller+0x14e>
   9344c:	2b02      	cmp	r3, #2
   9344e:	d009      	beq.n	93464 <cl_bp_controller+0x160>
			cl_bp_retcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true );
			cl_bp_pumpFeedback_start();
			cl_bp_retcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_BLOODPUMP_ON,&data,0);
			bp_state = CL_BP_STATE_STARTED;
			break;
			default:break;
   93450:	e021      	b.n	93496 <cl_bp_controller+0x192>
		break;
		case CL_BP_STATE_STOPPED:
		switch (bp_event)
		{
			case CL_BP_EVENT_SET_BP_RATE:
			cl_bp_rate = data;
   93452:	683b      	ldr	r3, [r7, #0]
   93454:	4a31      	ldr	r2, [pc, #196]	; (9351c <cl_bp_controller+0x218>)
   93456:	6013      	str	r3, [r2, #0]
			sv_cntrl_setpumpspeed(BLOODPUMP,data);
   93458:	683b      	ldr	r3, [r7, #0]
   9345a:	2003      	movs	r0, #3
   9345c:	4619      	mov	r1, r3
   9345e:	4b31      	ldr	r3, [pc, #196]	; (93524 <cl_bp_controller+0x220>)
   93460:	4798      	blx	r3
			break;
   93462:	e018      	b.n	93496 <cl_bp_controller+0x192>
			case CL_BP_EVENT_START:
			cl_bp_retcode =  sv_cntrl_activatepump(BLOODPUMP);
   93464:	2003      	movs	r0, #3
   93466:	4b31      	ldr	r3, [pc, #196]	; (9352c <cl_bp_controller+0x228>)
   93468:	4798      	blx	r3
   9346a:	4603      	mov	r3, r0
   9346c:	73fb      	strb	r3, [r7, #15]
			cl_bp_retcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true );
   9346e:	2001      	movs	r0, #1
   93470:	2101      	movs	r1, #1
   93472:	4b2d      	ldr	r3, [pc, #180]	; (93528 <cl_bp_controller+0x224>)
   93474:	4798      	blx	r3
   93476:	4603      	mov	r3, r0
   93478:	73fb      	strb	r3, [r7, #15]
			cl_bp_pumpFeedback_start();
   9347a:	4b2d      	ldr	r3, [pc, #180]	; (93530 <cl_bp_controller+0x22c>)
   9347c:	4798      	blx	r3
			cl_bp_retcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_BLOODPUMP_ON,&data,0);
   9347e:	463b      	mov	r3, r7
   93480:	2035      	movs	r0, #53	; 0x35
   93482:	4619      	mov	r1, r3
   93484:	2200      	movs	r2, #0
   93486:	4b2b      	ldr	r3, [pc, #172]	; (93534 <cl_bp_controller+0x230>)
   93488:	4798      	blx	r3
   9348a:	4603      	mov	r3, r0
   9348c:	73fb      	strb	r3, [r7, #15]
			bp_state = CL_BP_STATE_STARTED;
   9348e:	4b22      	ldr	r3, [pc, #136]	; (93518 <cl_bp_controller+0x214>)
   93490:	2201      	movs	r2, #1
   93492:	701a      	strb	r2, [r3, #0]
			break;
   93494:	bf00      	nop
			default:break;
			
		}
		break;
   93496:	e039      	b.n	9350c <cl_bp_controller+0x208>
		case CL_BP_STATE_PAUSED:
		switch (bp_event)
   93498:	79fb      	ldrb	r3, [r7, #7]
   9349a:	2b02      	cmp	r3, #2
   9349c:	d008      	beq.n	934b0 <cl_bp_controller+0x1ac>
   9349e:	2b04      	cmp	r3, #4
   934a0:	d01f      	beq.n	934e2 <cl_bp_controller+0x1de>
   934a2:	2b01      	cmp	r3, #1
   934a4:	d000      	beq.n	934a8 <cl_bp_controller+0x1a4>
			cl_bp_retcode =  sv_cntrl_deactivatepump(BLOODPUMP);
			cl_bp_pumpFeedback_start();
			bp_state = CL_BP_STATE_STOPPED;
			cl_bp_retcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_BLOODPUMP_OFF,&data,0);
			break;
			default:break;
   934a6:	e02f      	b.n	93508 <cl_bp_controller+0x204>
		break;
		case CL_BP_STATE_PAUSED:
		switch (bp_event)
		{
			case CL_BP_EVENT_SET_BP_RATE:
			cl_bp_rate = data;
   934a8:	683b      	ldr	r3, [r7, #0]
   934aa:	4a1c      	ldr	r2, [pc, #112]	; (9351c <cl_bp_controller+0x218>)
   934ac:	6013      	str	r3, [r2, #0]
	//		sv_cntrl_setpumpspeed(BLOODPUMP,data);
			break;
   934ae:	e02b      	b.n	93508 <cl_bp_controller+0x204>
			case CL_BP_EVENT_START:
			cl_bp_retcode =  sv_cntrl_activatepump(BLOODPUMP);
   934b0:	2003      	movs	r0, #3
   934b2:	4b1e      	ldr	r3, [pc, #120]	; (9352c <cl_bp_controller+0x228>)
   934b4:	4798      	blx	r3
   934b6:	4603      	mov	r3, r0
   934b8:	73fb      	strb	r3, [r7, #15]
			cl_bp_retcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true );
   934ba:	2001      	movs	r0, #1
   934bc:	2101      	movs	r1, #1
   934be:	4b1a      	ldr	r3, [pc, #104]	; (93528 <cl_bp_controller+0x224>)
   934c0:	4798      	blx	r3
   934c2:	4603      	mov	r3, r0
   934c4:	73fb      	strb	r3, [r7, #15]
			cl_bp_pumpFeedback_start();
   934c6:	4b1a      	ldr	r3, [pc, #104]	; (93530 <cl_bp_controller+0x22c>)
   934c8:	4798      	blx	r3
			cl_bp_retcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_BLOODPUMP_ON,&data,0);
   934ca:	463b      	mov	r3, r7
   934cc:	2035      	movs	r0, #53	; 0x35
   934ce:	4619      	mov	r1, r3
   934d0:	2200      	movs	r2, #0
   934d2:	4b18      	ldr	r3, [pc, #96]	; (93534 <cl_bp_controller+0x230>)
   934d4:	4798      	blx	r3
   934d6:	4603      	mov	r3, r0
   934d8:	73fb      	strb	r3, [r7, #15]
			bp_state = CL_BP_STATE_STARTED;
   934da:	4b0f      	ldr	r3, [pc, #60]	; (93518 <cl_bp_controller+0x214>)
   934dc:	2201      	movs	r2, #1
   934de:	701a      	strb	r2, [r3, #0]
			break;
   934e0:	e012      	b.n	93508 <cl_bp_controller+0x204>
			case CL_BP_EVENT_STOP:
			cl_bp_retcode =  sv_cntrl_deactivatepump(BLOODPUMP);
   934e2:	2003      	movs	r0, #3
   934e4:	4b14      	ldr	r3, [pc, #80]	; (93538 <cl_bp_controller+0x234>)
   934e6:	4798      	blx	r3
   934e8:	4603      	mov	r3, r0
   934ea:	73fb      	strb	r3, [r7, #15]
			cl_bp_pumpFeedback_start();
   934ec:	4b10      	ldr	r3, [pc, #64]	; (93530 <cl_bp_controller+0x22c>)
   934ee:	4798      	blx	r3
			bp_state = CL_BP_STATE_STOPPED;
   934f0:	4b09      	ldr	r3, [pc, #36]	; (93518 <cl_bp_controller+0x214>)
   934f2:	2202      	movs	r2, #2
   934f4:	701a      	strb	r2, [r3, #0]
			cl_bp_retcode = Cl_SendDatatoconsole(CONT_TX_COMMAND_BLOODPUMP_OFF,&data,0);
   934f6:	463b      	mov	r3, r7
   934f8:	2036      	movs	r0, #54	; 0x36
   934fa:	4619      	mov	r1, r3
   934fc:	2200      	movs	r2, #0
   934fe:	4b0d      	ldr	r3, [pc, #52]	; (93534 <cl_bp_controller+0x230>)
   93500:	4798      	blx	r3
   93502:	4603      	mov	r3, r0
   93504:	73fb      	strb	r3, [r7, #15]
			break;
   93506:	bf00      	nop
			default:break;
			
		}
		break;
   93508:	e000      	b.n	9350c <cl_bp_controller+0x208>
		case CL_BP_STATE_COMPLETED:
		break;
		default:break;
   9350a:	bf00      	nop
		
		
	}
	return CL_OK;
   9350c:	2300      	movs	r3, #0
   9350e:	4618      	mov	r0, r3
   93510:	3710      	adds	r7, #16
   93512:	46bd      	mov	sp, r7
   93514:	bd80      	pop	{r7, pc}
   93516:	bf00      	nop
   93518:	20071aac 	.word	0x20071aac
   9351c:	20071ab0 	.word	0x20071ab0
   93520:	20070a3c 	.word	0x20070a3c
   93524:	00099d45 	.word	0x00099d45
   93528:	00082e61 	.word	0x00082e61
   9352c:	00099c2d 	.word	0x00099c2d
   93530:	00093541 	.word	0x00093541
   93534:	0009ba51 	.word	0x0009ba51
   93538:	00099c69 	.word	0x00099c69
   9353c:	0009355d 	.word	0x0009355d

00093540 <cl_bp_pumpFeedback_start>:
static Cl_Uint16Type fivemscounter=0,bp_period = 0,bp_avg_period = 0, bp_freq_in_min = 0;
static Cl_Uint16Type bp_rotation_counter = 0;
static Cl_BoolType count_state = false;

Cl_ReturnCodeType cl_bp_pumpFeedback_start(void)
{
   93540:	b480      	push	{r7}
   93542:	af00      	add	r7, sp, #0
	cl_bp_pump_state = CL_BP_P_STATE_STARTED;
   93544:	4b04      	ldr	r3, [pc, #16]	; (93558 <cl_bp_pumpFeedback_start+0x18>)
   93546:	2201      	movs	r2, #1
   93548:	701a      	strb	r2, [r3, #0]
	return 0;
   9354a:	2300      	movs	r3, #0
}
   9354c:	4618      	mov	r0, r3
   9354e:	46bd      	mov	sp, r7
   93550:	f85d 7b04 	ldr.w	r7, [sp], #4
   93554:	4770      	bx	lr
   93556:	bf00      	nop
   93558:	20071ab6 	.word	0x20071ab6

0009355c <cl_bp_pumpFeedback_stop>:
Cl_ReturnCodeType cl_bp_pumpFeedback_stop(void)
{
   9355c:	b480      	push	{r7}
   9355e:	af00      	add	r7, sp, #0
	
	return 0;
   93560:	2300      	movs	r3, #0
}
   93562:	4618      	mov	r0, r3
   93564:	46bd      	mov	sp, r7
   93566:	f85d 7b04 	ldr.w	r7, [sp], #4
   9356a:	4770      	bx	lr
   9356c:	0000      	movs	r0, r0
	...

00093570 <cl_bp_pumpFeedback_timer>:
	bp_expected_period = period;
	return 0;
}

Cl_ReturnCodeType cl_bp_pumpFeedback_timer(void) // 5 ms clock
{
   93570:	e92d 4398 	stmdb	sp!, {r3, r4, r7, r8, r9, lr}
   93574:	af00      	add	r7, sp, #0
	//cl_Datastreamtype cl_data;
	//cl_testgetsensordata(BP_ROTATION_MARKER,&bp_rotataion_marker);

	if(cl_bp_pump_state != CL_BP_P_STATE_IDLE)
   93576:	4b68      	ldr	r3, [pc, #416]	; (93718 <cl_bp_pumpFeedback_timer+0x1a8>)
   93578:	781b      	ldrb	r3, [r3, #0]
   9357a:	2b00      	cmp	r3, #0
   9357c:	f000 80bd 	beq.w	936fa <cl_bp_pumpFeedback_timer+0x18a>
	{
	Cl_SysStat_GetSensor_Status_Query(SENSOR_BP_FB, &bp_rotataion_marker);
   93580:	201c      	movs	r0, #28
   93582:	4966      	ldr	r1, [pc, #408]	; (9371c <cl_bp_pumpFeedback_timer+0x1ac>)
   93584:	4b66      	ldr	r3, [pc, #408]	; (93720 <cl_bp_pumpFeedback_timer+0x1b0>)
   93586:	4798      	blx	r3

	fivemscounter++;
   93588:	4b66      	ldr	r3, [pc, #408]	; (93724 <cl_bp_pumpFeedback_timer+0x1b4>)
   9358a:	881b      	ldrh	r3, [r3, #0]
   9358c:	3301      	adds	r3, #1
   9358e:	b29a      	uxth	r2, r3
   93590:	4b64      	ldr	r3, [pc, #400]	; (93724 <cl_bp_pumpFeedback_timer+0x1b4>)
   93592:	801a      	strh	r2, [r3, #0]
			if(fivemscounter > 1000)
   93594:	4b63      	ldr	r3, [pc, #396]	; (93724 <cl_bp_pumpFeedback_timer+0x1b4>)
   93596:	881b      	ldrh	r3, [r3, #0]
   93598:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   9359c:	d903      	bls.n	935a6 <cl_bp_pumpFeedback_timer+0x36>
			{
				// raise BP alarm
				Cl_Alarm_TriggerAlarm(BP_UNDERRUN,1);
   9359e:	2037      	movs	r0, #55	; 0x37
   935a0:	2101      	movs	r1, #1
   935a2:	4b61      	ldr	r3, [pc, #388]	; (93728 <cl_bp_pumpFeedback_timer+0x1b8>)
   935a4:	4798      	blx	r3
			}
			if((cl_bp_pump_state ==  CL_BP_P_STATE_STARTED) && (bp_rotation_counter > 2))
   935a6:	4b5c      	ldr	r3, [pc, #368]	; (93718 <cl_bp_pumpFeedback_timer+0x1a8>)
   935a8:	781b      	ldrb	r3, [r3, #0]
   935aa:	2b01      	cmp	r3, #1
   935ac:	d106      	bne.n	935bc <cl_bp_pumpFeedback_timer+0x4c>
   935ae:	4b5f      	ldr	r3, [pc, #380]	; (9372c <cl_bp_pumpFeedback_timer+0x1bc>)
   935b0:	881b      	ldrh	r3, [r3, #0]
   935b2:	2b02      	cmp	r3, #2
   935b4:	d902      	bls.n	935bc <cl_bp_pumpFeedback_timer+0x4c>
			{
				cl_bp_pump_state = CL_BP_P_STATE_RUNNING;
   935b6:	4b58      	ldr	r3, [pc, #352]	; (93718 <cl_bp_pumpFeedback_timer+0x1a8>)
   935b8:	2202      	movs	r2, #2
   935ba:	701a      	strb	r2, [r3, #0]
			}
	
			//#if 0
			if(count_state == false)
   935bc:	4b5c      	ldr	r3, [pc, #368]	; (93730 <cl_bp_pumpFeedback_timer+0x1c0>)
   935be:	781b      	ldrb	r3, [r3, #0]
   935c0:	f083 0301 	eor.w	r3, r3, #1
   935c4:	b2db      	uxtb	r3, r3
   935c6:	2b00      	cmp	r3, #0
   935c8:	d012      	beq.n	935f0 <cl_bp_pumpFeedback_timer+0x80>
			{
				if(bp_rotataion_marker == 0 )
   935ca:	4b54      	ldr	r3, [pc, #336]	; (9371c <cl_bp_pumpFeedback_timer+0x1ac>)
   935cc:	881b      	ldrh	r3, [r3, #0]
   935ce:	2b00      	cmp	r3, #0
   935d0:	f040 808f 	bne.w	936f2 <cl_bp_pumpFeedback_timer+0x182>
				{
					if(prev_bp_rotataion_marker != bp_rotataion_marker)
   935d4:	4b57      	ldr	r3, [pc, #348]	; (93734 <cl_bp_pumpFeedback_timer+0x1c4>)
   935d6:	881a      	ldrh	r2, [r3, #0]
   935d8:	4b50      	ldr	r3, [pc, #320]	; (9371c <cl_bp_pumpFeedback_timer+0x1ac>)
   935da:	881b      	ldrh	r3, [r3, #0]
   935dc:	429a      	cmp	r2, r3
   935de:	f000 8088 	beq.w	936f2 <cl_bp_pumpFeedback_timer+0x182>
					{
						count_state = true;
   935e2:	4b53      	ldr	r3, [pc, #332]	; (93730 <cl_bp_pumpFeedback_timer+0x1c0>)
   935e4:	2201      	movs	r2, #1
   935e6:	701a      	strb	r2, [r3, #0]
						//bp_rotation_counter++;
						fivemscounter = 0;
   935e8:	4b4e      	ldr	r3, [pc, #312]	; (93724 <cl_bp_pumpFeedback_timer+0x1b4>)
   935ea:	2200      	movs	r2, #0
   935ec:	801a      	strh	r2, [r3, #0]
   935ee:	e080      	b.n	936f2 <cl_bp_pumpFeedback_timer+0x182>
					}
				}
			}
			else
			{
				if(bp_rotataion_marker == 0 )
   935f0:	4b4a      	ldr	r3, [pc, #296]	; (9371c <cl_bp_pumpFeedback_timer+0x1ac>)
   935f2:	881b      	ldrh	r3, [r3, #0]
   935f4:	2b00      	cmp	r3, #0
   935f6:	d17c      	bne.n	936f2 <cl_bp_pumpFeedback_timer+0x182>
				{
					if(prev_bp_rotataion_marker != bp_rotataion_marker)
   935f8:	4b4e      	ldr	r3, [pc, #312]	; (93734 <cl_bp_pumpFeedback_timer+0x1c4>)
   935fa:	881a      	ldrh	r2, [r3, #0]
   935fc:	4b47      	ldr	r3, [pc, #284]	; (9371c <cl_bp_pumpFeedback_timer+0x1ac>)
   935fe:	881b      	ldrh	r3, [r3, #0]
   93600:	429a      	cmp	r2, r3
   93602:	d076      	beq.n	936f2 <cl_bp_pumpFeedback_timer+0x182>
					{
						count_state = true;
   93604:	4b4a      	ldr	r3, [pc, #296]	; (93730 <cl_bp_pumpFeedback_timer+0x1c0>)
   93606:	2201      	movs	r2, #1
   93608:	701a      	strb	r2, [r3, #0]
						bp_rotation_counter++;
   9360a:	4b48      	ldr	r3, [pc, #288]	; (9372c <cl_bp_pumpFeedback_timer+0x1bc>)
   9360c:	881b      	ldrh	r3, [r3, #0]
   9360e:	3301      	adds	r3, #1
   93610:	b29a      	uxth	r2, r3
   93612:	4b46      	ldr	r3, [pc, #280]	; (9372c <cl_bp_pumpFeedback_timer+0x1bc>)
   93614:	801a      	strh	r2, [r3, #0]
						bp_period = fivemscounter*100;
   93616:	4b43      	ldr	r3, [pc, #268]	; (93724 <cl_bp_pumpFeedback_timer+0x1b4>)
   93618:	881b      	ldrh	r3, [r3, #0]
   9361a:	461a      	mov	r2, r3
   9361c:	0092      	lsls	r2, r2, #2
   9361e:	4413      	add	r3, r2
   93620:	461a      	mov	r2, r3
   93622:	0091      	lsls	r1, r2, #2
   93624:	461a      	mov	r2, r3
   93626:	460b      	mov	r3, r1
   93628:	4413      	add	r3, r2
   9362a:	009b      	lsls	r3, r3, #2
   9362c:	b29a      	uxth	r2, r3
   9362e:	4b42      	ldr	r3, [pc, #264]	; (93738 <cl_bp_pumpFeedback_timer+0x1c8>)
   93630:	801a      	strh	r2, [r3, #0]
				
						if(cl_bp_pump_state != CL_BP_P_STATE_STARTED)
   93632:	4b39      	ldr	r3, [pc, #228]	; (93718 <cl_bp_pumpFeedback_timer+0x1a8>)
   93634:	781b      	ldrb	r3, [r3, #0]
   93636:	2b01      	cmp	r3, #1
   93638:	d04e      	beq.n	936d8 <cl_bp_pumpFeedback_timer+0x168>
						{
							if((bp_period > (1.01 *bp_expected_period)) || bp_period > 3000 )
   9363a:	4b3f      	ldr	r3, [pc, #252]	; (93738 <cl_bp_pumpFeedback_timer+0x1c8>)
   9363c:	881b      	ldrh	r3, [r3, #0]
   9363e:	461a      	mov	r2, r3
   93640:	4b3e      	ldr	r3, [pc, #248]	; (9373c <cl_bp_pumpFeedback_timer+0x1cc>)
   93642:	4610      	mov	r0, r2
   93644:	4798      	blx	r3
   93646:	4680      	mov	r8, r0
   93648:	4689      	mov	r9, r1
   9364a:	4b3d      	ldr	r3, [pc, #244]	; (93740 <cl_bp_pumpFeedback_timer+0x1d0>)
   9364c:	881b      	ldrh	r3, [r3, #0]
   9364e:	461a      	mov	r2, r3
   93650:	4b3a      	ldr	r3, [pc, #232]	; (9373c <cl_bp_pumpFeedback_timer+0x1cc>)
   93652:	4610      	mov	r0, r2
   93654:	4798      	blx	r3
   93656:	4602      	mov	r2, r0
   93658:	460b      	mov	r3, r1
   9365a:	4c3a      	ldr	r4, [pc, #232]	; (93744 <cl_bp_pumpFeedback_timer+0x1d4>)
   9365c:	4610      	mov	r0, r2
   9365e:	4619      	mov	r1, r3
   93660:	a329      	add	r3, pc, #164	; (adr r3, 93708 <cl_bp_pumpFeedback_timer+0x198>)
   93662:	e9d3 2300 	ldrd	r2, r3, [r3]
   93666:	47a0      	blx	r4
   93668:	4602      	mov	r2, r0
   9366a:	460b      	mov	r3, r1
   9366c:	4c36      	ldr	r4, [pc, #216]	; (93748 <cl_bp_pumpFeedback_timer+0x1d8>)
   9366e:	4640      	mov	r0, r8
   93670:	4649      	mov	r1, r9
   93672:	47a0      	blx	r4
   93674:	4603      	mov	r3, r0
   93676:	2b00      	cmp	r3, #0
   93678:	d105      	bne.n	93686 <cl_bp_pumpFeedback_timer+0x116>
   9367a:	4b2f      	ldr	r3, [pc, #188]	; (93738 <cl_bp_pumpFeedback_timer+0x1c8>)
   9367c:	881b      	ldrh	r3, [r3, #0]
   9367e:	f640 32b8 	movw	r2, #3000	; 0xbb8
   93682:	4293      	cmp	r3, r2
   93684:	d904      	bls.n	93690 <cl_bp_pumpFeedback_timer+0x120>
							{
						//		cl_bp_pump_state = CL_BP_P_STATE_RUNNING_SLOW;
							Cl_Alarm_TriggerAlarm(BP_UNDERRUN,1);
   93686:	2037      	movs	r0, #55	; 0x37
   93688:	2101      	movs	r1, #1
   9368a:	4b27      	ldr	r3, [pc, #156]	; (93728 <cl_bp_pumpFeedback_timer+0x1b8>)
   9368c:	4798      	blx	r3
   9368e:	e023      	b.n	936d8 <cl_bp_pumpFeedback_timer+0x168>
							}
							else if(bp_period < (0.99 *bp_expected_period))
   93690:	4b29      	ldr	r3, [pc, #164]	; (93738 <cl_bp_pumpFeedback_timer+0x1c8>)
   93692:	881b      	ldrh	r3, [r3, #0]
   93694:	461a      	mov	r2, r3
   93696:	4b29      	ldr	r3, [pc, #164]	; (9373c <cl_bp_pumpFeedback_timer+0x1cc>)
   93698:	4610      	mov	r0, r2
   9369a:	4798      	blx	r3
   9369c:	4680      	mov	r8, r0
   9369e:	4689      	mov	r9, r1
   936a0:	4b27      	ldr	r3, [pc, #156]	; (93740 <cl_bp_pumpFeedback_timer+0x1d0>)
   936a2:	881b      	ldrh	r3, [r3, #0]
   936a4:	461a      	mov	r2, r3
   936a6:	4b25      	ldr	r3, [pc, #148]	; (9373c <cl_bp_pumpFeedback_timer+0x1cc>)
   936a8:	4610      	mov	r0, r2
   936aa:	4798      	blx	r3
   936ac:	4602      	mov	r2, r0
   936ae:	460b      	mov	r3, r1
   936b0:	4c24      	ldr	r4, [pc, #144]	; (93744 <cl_bp_pumpFeedback_timer+0x1d4>)
   936b2:	4610      	mov	r0, r2
   936b4:	4619      	mov	r1, r3
   936b6:	a316      	add	r3, pc, #88	; (adr r3, 93710 <cl_bp_pumpFeedback_timer+0x1a0>)
   936b8:	e9d3 2300 	ldrd	r2, r3, [r3]
   936bc:	47a0      	blx	r4
   936be:	4602      	mov	r2, r0
   936c0:	460b      	mov	r3, r1
   936c2:	4c22      	ldr	r4, [pc, #136]	; (9374c <cl_bp_pumpFeedback_timer+0x1dc>)
   936c4:	4640      	mov	r0, r8
   936c6:	4649      	mov	r1, r9
   936c8:	47a0      	blx	r4
   936ca:	4603      	mov	r3, r0
   936cc:	2b00      	cmp	r3, #0
   936ce:	d003      	beq.n	936d8 <cl_bp_pumpFeedback_timer+0x168>
							{
						//		cl_bp_pump_state = CL_BP_P_STATE_RUNNING_FAST;
							Cl_Alarm_TriggerAlarm(BP_OVERRUN,1);
   936d0:	2036      	movs	r0, #54	; 0x36
   936d2:	2101      	movs	r1, #1
   936d4:	4b14      	ldr	r3, [pc, #80]	; (93728 <cl_bp_pumpFeedback_timer+0x1b8>)
   936d6:	4798      	blx	r3
						//		cl_bp_pump_state = CL_BP_P_STATE_RUNNING_NORMAL;
							}
						}

				
						bp_freq_in_min  = ( 60000) / bp_period;
   936d8:	4b17      	ldr	r3, [pc, #92]	; (93738 <cl_bp_pumpFeedback_timer+0x1c8>)
   936da:	881b      	ldrh	r3, [r3, #0]
   936dc:	461a      	mov	r2, r3
   936de:	f64e 2360 	movw	r3, #60000	; 0xea60
   936e2:	fb93 f3f2 	sdiv	r3, r3, r2
   936e6:	b29a      	uxth	r2, r3
   936e8:	4b19      	ldr	r3, [pc, #100]	; (93750 <cl_bp_pumpFeedback_timer+0x1e0>)
   936ea:	801a      	strh	r2, [r3, #0]
						fivemscounter = 0;
   936ec:	4b0d      	ldr	r3, [pc, #52]	; (93724 <cl_bp_pumpFeedback_timer+0x1b4>)
   936ee:	2200      	movs	r2, #0
   936f0:	801a      	strh	r2, [r3, #0]
				
					}
				}
		
			}
			prev_bp_rotataion_marker = bp_rotataion_marker;
   936f2:	4b0a      	ldr	r3, [pc, #40]	; (9371c <cl_bp_pumpFeedback_timer+0x1ac>)
   936f4:	881a      	ldrh	r2, [r3, #0]
   936f6:	4b0f      	ldr	r3, [pc, #60]	; (93734 <cl_bp_pumpFeedback_timer+0x1c4>)
   936f8:	801a      	strh	r2, [r3, #0]
	
	}
	
	return 0;
   936fa:	2300      	movs	r3, #0
}
   936fc:	4618      	mov	r0, r3
   936fe:	e8bd 8398 	ldmia.w	sp!, {r3, r4, r7, r8, r9, pc}
   93702:	bf00      	nop
   93704:	f3af 8000 	nop.w
   93708:	c28f5c29 	.word	0xc28f5c29
   9370c:	3ff028f5 	.word	0x3ff028f5
   93710:	7ae147ae 	.word	0x7ae147ae
   93714:	3fefae14 	.word	0x3fefae14
   93718:	20071ab6 	.word	0x20071ab6
   9371c:	20070a40 	.word	0x20070a40
   93720:	0008e7f9 	.word	0x0008e7f9
   93724:	20071ab8 	.word	0x20071ab8
   93728:	000830a1 	.word	0x000830a1
   9372c:	20071abe 	.word	0x20071abe
   93730:	20071ac0 	.word	0x20071ac0
   93734:	20070a42 	.word	0x20070a42
   93738:	20071aba 	.word	0x20071aba
   9373c:	000a600d 	.word	0x000a600d
   93740:	20071ab4 	.word	0x20071ab4
   93744:	000a60d9 	.word	0x000a60d9
   93748:	000a65f9 	.word	0x000a65f9
   9374c:	000a65bd 	.word	0x000a65bd
   93750:	20071abc 	.word	0x20071abc

00093754 <cl_deaeration_controller>:
// extern Cl_Uint8Type sv_cntrl_deactivate_valve(sv_valvetype );

cl_deaeration_state_type cl_deaeration_state = CL_DEAER_STATE_IDLE;

Cl_ReturnCodeType cl_deaeration_controller(cl_deaeration_event_type cntrl_event)
{
   93754:	b580      	push	{r7, lr}
   93756:	b084      	sub	sp, #16
   93758:	af00      	add	r7, sp, #0
   9375a:	4603      	mov	r3, r0
   9375c:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType cl_ret_value = CL_OK;
   9375e:	2300      	movs	r3, #0
   93760:	73fb      	strb	r3, [r7, #15]
	Cl_Uint16Type dac2_status  ;
	
	switch (cl_deaeration_state)
   93762:	4b28      	ldr	r3, [pc, #160]	; (93804 <cl_deaeration_controller+0xb0>)
   93764:	781b      	ldrb	r3, [r3, #0]
   93766:	2b01      	cmp	r3, #1
   93768:	d00d      	beq.n	93786 <cl_deaeration_controller+0x32>
   9376a:	2b02      	cmp	r3, #2
   9376c:	d02a      	beq.n	937c4 <cl_deaeration_controller+0x70>
   9376e:	2b00      	cmp	r3, #0
   93770:	d000      	beq.n	93774 <cl_deaeration_controller+0x20>
						cl_deaeration_state = CL_DEAER_ACTIVE;
						}
					}
		
		break;
		default:break;
   93772:	e042      	b.n	937fa <cl_deaeration_controller+0xa6>
	Cl_Uint16Type dac2_status  ;
	
	switch (cl_deaeration_state)
	{
		case CL_DEAER_STATE_IDLE:
				switch(cntrl_event)
   93774:	79fb      	ldrb	r3, [r7, #7]
   93776:	2b00      	cmp	r3, #0
   93778:	d000      	beq.n	9377c <cl_deaeration_controller+0x28>
				{
					case CL_DEAER_EVENT_ACTIVATE:
					cl_deaeration_state = CL_DEAER_ACTIVE;
					break;
					default:break;
   9377a:	e003      	b.n	93784 <cl_deaeration_controller+0x30>
	{
		case CL_DEAER_STATE_IDLE:
				switch(cntrl_event)
				{
					case CL_DEAER_EVENT_ACTIVATE:
					cl_deaeration_state = CL_DEAER_ACTIVE;
   9377c:	4b21      	ldr	r3, [pc, #132]	; (93804 <cl_deaeration_controller+0xb0>)
   9377e:	2201      	movs	r2, #1
   93780:	701a      	strb	r2, [r3, #0]
					break;
   93782:	bf00      	nop
					default:break;
				}
		break;
   93784:	e039      	b.n	937fa <cl_deaeration_controller+0xa6>
		case CL_DEAER_ACTIVE:
			switch(cntrl_event)
   93786:	79fb      	ldrb	r3, [r7, #7]
   93788:	2b01      	cmp	r3, #1
   9378a:	d002      	beq.n	93792 <cl_deaeration_controller+0x3e>
   9378c:	2b02      	cmp	r3, #2
   9378e:	d004      	beq.n	9379a <cl_deaeration_controller+0x46>
				{
					sv_cntrl_deactivate_valve(VALVE_ID19);	
				}
				break;
				default:
				break;
   93790:	e017      	b.n	937c2 <cl_deaeration_controller+0x6e>
			switch(cntrl_event)
			{
				

				case CL_DEAER_EVENT_DEACTIVATE:
				cl_deaeration_state = CL_DEAER_STATE_IDLE;
   93792:	4b1c      	ldr	r3, [pc, #112]	; (93804 <cl_deaeration_controller+0xb0>)
   93794:	2200      	movs	r2, #0
   93796:	701a      	strb	r2, [r3, #0]
				break;
   93798:	e013      	b.n	937c2 <cl_deaeration_controller+0x6e>
				case CL_DEAER_EVENT_50MS:
				// check for deaeartion 
				Cl_SysStat_GetSensor_Status_Query(COND_DAC_RO,&dac2_status);
   9379a:	f107 030c 	add.w	r3, r7, #12
   9379e:	200a      	movs	r0, #10
   937a0:	4619      	mov	r1, r3
   937a2:	4b19      	ldr	r3, [pc, #100]	; (93808 <cl_deaeration_controller+0xb4>)
   937a4:	4798      	blx	r3
				if (dac2_status < 10)
   937a6:	89bb      	ldrh	r3, [r7, #12]
   937a8:	2b09      	cmp	r3, #9
   937aa:	d806      	bhi.n	937ba <cl_deaeration_controller+0x66>
				{
					sv_cntrl_activate_valve(VALVE_ID19);
   937ac:	2013      	movs	r0, #19
   937ae:	4b17      	ldr	r3, [pc, #92]	; (9380c <cl_deaeration_controller+0xb8>)
   937b0:	4798      	blx	r3
					cl_deaeration_state = CL_DEAER_ACTIVE_INPROGRESS;
   937b2:	4b14      	ldr	r3, [pc, #80]	; (93804 <cl_deaeration_controller+0xb0>)
   937b4:	2202      	movs	r2, #2
   937b6:	701a      	strb	r2, [r3, #0]
				}
				else
				{
					sv_cntrl_deactivate_valve(VALVE_ID19);	
				}
				break;
   937b8:	e002      	b.n	937c0 <cl_deaeration_controller+0x6c>
					sv_cntrl_activate_valve(VALVE_ID19);
					cl_deaeration_state = CL_DEAER_ACTIVE_INPROGRESS;
				}
				else
				{
					sv_cntrl_deactivate_valve(VALVE_ID19);	
   937ba:	2013      	movs	r0, #19
   937bc:	4b14      	ldr	r3, [pc, #80]	; (93810 <cl_deaeration_controller+0xbc>)
   937be:	4798      	blx	r3
				}
				break;
   937c0:	bf00      	nop
				default:
				break;
			}
		break;
   937c2:	e01a      	b.n	937fa <cl_deaeration_controller+0xa6>
		case CL_DEAER_ACTIVE_INPROGRESS:
					switch(cntrl_event)
   937c4:	79fb      	ldrb	r3, [r7, #7]
   937c6:	2b01      	cmp	r3, #1
   937c8:	d002      	beq.n	937d0 <cl_deaeration_controller+0x7c>
   937ca:	2b03      	cmp	r3, #3
   937cc:	d004      	beq.n	937d8 <cl_deaeration_controller+0x84>
						sv_cntrl_deactivate_valve(VALVE_ID19);
						cl_deaeration_state = CL_DEAER_ACTIVE;
						}
					}
		
		break;
   937ce:	e013      	b.n	937f8 <cl_deaeration_controller+0xa4>
		case CL_DEAER_ACTIVE_INPROGRESS:
					switch(cntrl_event)
					{
						
						case CL_DEAER_EVENT_DEACTIVATE:
						cl_deaeration_state = CL_DEAER_STATE_IDLE;
   937d0:	4b0c      	ldr	r3, [pc, #48]	; (93804 <cl_deaeration_controller+0xb0>)
   937d2:	2200      	movs	r2, #0
   937d4:	701a      	strb	r2, [r3, #0]
						break;
   937d6:	e00f      	b.n	937f8 <cl_deaeration_controller+0xa4>
						case CL_DEAER_EVENT_500MS:
						Cl_SysStat_GetSensor_Status_Query(COND_DAC_RO,&dac2_status);
   937d8:	f107 030c 	add.w	r3, r7, #12
   937dc:	200a      	movs	r0, #10
   937de:	4619      	mov	r1, r3
   937e0:	4b09      	ldr	r3, [pc, #36]	; (93808 <cl_deaeration_controller+0xb4>)
   937e2:	4798      	blx	r3
						if (dac2_status > 5)
   937e4:	89bb      	ldrh	r3, [r7, #12]
   937e6:	2b05      	cmp	r3, #5
   937e8:	d906      	bls.n	937f8 <cl_deaeration_controller+0xa4>
						{
						sv_cntrl_deactivate_valve(VALVE_ID19);
   937ea:	2013      	movs	r0, #19
   937ec:	4b08      	ldr	r3, [pc, #32]	; (93810 <cl_deaeration_controller+0xbc>)
   937ee:	4798      	blx	r3
						cl_deaeration_state = CL_DEAER_ACTIVE;
   937f0:	4b04      	ldr	r3, [pc, #16]	; (93804 <cl_deaeration_controller+0xb0>)
   937f2:	2201      	movs	r2, #1
   937f4:	701a      	strb	r2, [r3, #0]
						}
					}
		
		break;
   937f6:	e7ff      	b.n	937f8 <cl_deaeration_controller+0xa4>
   937f8:	bf00      	nop
		default:break;
	}

	return CL_OK;
   937fa:	2300      	movs	r3, #0
   937fc:	4618      	mov	r0, r3
   937fe:	3710      	adds	r7, #16
   93800:	46bd      	mov	sp, r7
   93802:	bd80      	pop	{r7, pc}
   93804:	20071ac1 	.word	0x20071ac1
   93808:	0008e7f9 	.word	0x0008e7f9
   9380c:	00099ccd 	.word	0x00099ccd
   93810:	00099ced 	.word	0x00099ced

00093814 <cl_flow_switchcontroller>:
flowswitchstate_type flow_switch_state = FLOW_SWITCH_UNDEFINED;
flowswitchcntrlstate_type  flowswitchcntrlstate  = FLOW_SWITCH_CNTRL_IDLE;
static Cl_Uint16Type toggle_count_flow = 0;
	
	Cl_ReturnCodeType cl_flow_switchcontroller(flowswitchcntrl_event_type cntrl_event)
	{
   93814:	b580      	push	{r7, lr}
   93816:	b084      	sub	sp, #16
   93818:	af00      	add	r7, sp, #0
   9381a:	4603      	mov	r3, r0
   9381c:	71fb      	strb	r3, [r7, #7]
		cl_Datastreamtype cl_tdata;
		static uint8_t three_sec_count = 0;
		
		switch(flowswitchcntrlstate)
   9381e:	4b73      	ldr	r3, [pc, #460]	; (939ec <cl_flow_switchcontroller+0x1d8>)
   93820:	781b      	ldrb	r3, [r3, #0]
   93822:	2b03      	cmp	r3, #3
   93824:	f200 80dd 	bhi.w	939e2 <cl_flow_switchcontroller+0x1ce>
   93828:	a201      	add	r2, pc, #4	; (adr r2, 93830 <cl_flow_switchcontroller+0x1c>)
   9382a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9382e:	bf00      	nop
   93830:	0009394f 	.word	0x0009394f
   93834:	00093963 	.word	0x00093963
   93838:	00093841 	.word	0x00093841
   9383c:	000939cf 	.word	0x000939cf
		{
			case FLOW_SWITCH_CNTRL_ACTIVE:
					switch(cntrl_event)
   93840:	79fb      	ldrb	r3, [r7, #7]
   93842:	3b01      	subs	r3, #1
   93844:	2b05      	cmp	r3, #5
   93846:	f200 8080 	bhi.w	9394a <cl_flow_switchcontroller+0x136>
   9384a:	a201      	add	r2, pc, #4	; (adr r2, 93850 <cl_flow_switchcontroller+0x3c>)
   9384c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   93850:	00093869 	.word	0x00093869
   93854:	00093871 	.word	0x00093871
   93858:	00093889 	.word	0x00093889
   9385c:	0009394b 	.word	0x0009394b
   93860:	000938f5 	.word	0x000938f5
   93864:	000938f5 	.word	0x000938f5
					{
						case FLOW_SWITCH_CNTRLER_EVENT_START:
						flowswitchcntrlstate  = FLOW_SWITCH_CNTRL_READY;
   93868:	4b60      	ldr	r3, [pc, #384]	; (939ec <cl_flow_switchcontroller+0x1d8>)
   9386a:	2201      	movs	r2, #1
   9386c:	701a      	strb	r2, [r3, #0]
			
						break;
   9386e:	e06d      	b.n	9394c <cl_flow_switchcontroller+0x138>
						case FLOW_SWITCH_CNTRLER_EVENT_STOP:
						Cl_Alarm_TriggerAlarm(FLOW_LOW_FLOWRATE,0);
   93870:	200d      	movs	r0, #13
   93872:	2100      	movs	r1, #0
   93874:	4b5e      	ldr	r3, [pc, #376]	; (939f0 <cl_flow_switchcontroller+0x1dc>)
   93876:	4798      	blx	r3
						Cl_Alarm_TriggerAlarm(FLOW_HIGH_FLOWRATE,0);
   93878:	200e      	movs	r0, #14
   9387a:	2100      	movs	r1, #0
   9387c:	4b5c      	ldr	r3, [pc, #368]	; (939f0 <cl_flow_switchcontroller+0x1dc>)
   9387e:	4798      	blx	r3
						flowswitchcntrlstate  = FLOW_SWITCH_CNTRL_IDLE;
   93880:	4b5a      	ldr	r3, [pc, #360]	; (939ec <cl_flow_switchcontroller+0x1d8>)
   93882:	2200      	movs	r2, #0
   93884:	701a      	strb	r2, [r3, #0]
						break;
   93886:	e061      	b.n	9394c <cl_flow_switchcontroller+0x138>
						case FLOW_SWITCH_CNTRLER_EVENT_SEC:
						three_sec_count++;
   93888:	4b5a      	ldr	r3, [pc, #360]	; (939f4 <cl_flow_switchcontroller+0x1e0>)
   9388a:	781b      	ldrb	r3, [r3, #0]
   9388c:	3301      	adds	r3, #1
   9388e:	b2da      	uxtb	r2, r3
   93890:	4b58      	ldr	r3, [pc, #352]	; (939f4 <cl_flow_switchcontroller+0x1e0>)
   93892:	701a      	strb	r2, [r3, #0]
						if(three_sec_count > 3)
   93894:	4b57      	ldr	r3, [pc, #348]	; (939f4 <cl_flow_switchcontroller+0x1e0>)
   93896:	781b      	ldrb	r3, [r3, #0]
   93898:	2b03      	cmp	r3, #3
   9389a:	d92a      	bls.n	938f2 <cl_flow_switchcontroller+0xde>
						{
							three_sec_count = 0;
   9389c:	4b55      	ldr	r3, [pc, #340]	; (939f4 <cl_flow_switchcontroller+0x1e0>)
   9389e:	2200      	movs	r2, #0
   938a0:	701a      	strb	r2, [r3, #0]
						
						Cl_AlarmResetAlarm(FLOW_NO_FLOW);
   938a2:	200c      	movs	r0, #12
   938a4:	4b54      	ldr	r3, [pc, #336]	; (939f8 <cl_flow_switchcontroller+0x1e4>)
   938a6:	4798      	blx	r3
						Cl_AlarmResetAlarm(FLOW_LOW_FLOWRATE);
   938a8:	200d      	movs	r0, #13
   938aa:	4b53      	ldr	r3, [pc, #332]	; (939f8 <cl_flow_switchcontroller+0x1e4>)
   938ac:	4798      	blx	r3
						
										cl_tdata.word = 0;
   938ae:	2300      	movs	r3, #0
   938b0:	60fb      	str	r3, [r7, #12]

										
										cl_tdata.Twobyte = toggle_count_flow;
   938b2:	4b52      	ldr	r3, [pc, #328]	; (939fc <cl_flow_switchcontroller+0x1e8>)
   938b4:	881b      	ldrh	r3, [r3, #0]
   938b6:	81bb      	strh	r3, [r7, #12]
										cl_tdata.bytearray[2] = 21;
   938b8:	2315      	movs	r3, #21
   938ba:	73bb      	strb	r3, [r7, #14]
										
										
										
									//	 Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
						if(toggle_count_flow < 2 )
   938bc:	4b4f      	ldr	r3, [pc, #316]	; (939fc <cl_flow_switchcontroller+0x1e8>)
   938be:	881b      	ldrh	r3, [r3, #0]
   938c0:	2b01      	cmp	r3, #1
   938c2:	d803      	bhi.n	938cc <cl_flow_switchcontroller+0xb8>
						{
							// low  flow alarm 
							Cl_Alarm_TriggerAlarm(FLOW_LOW_FLOWRATE,1);
   938c4:	200d      	movs	r0, #13
   938c6:	2101      	movs	r1, #1
   938c8:	4b49      	ldr	r3, [pc, #292]	; (939f0 <cl_flow_switchcontroller+0x1dc>)
   938ca:	4798      	blx	r3
						//	flowswitchcntrlstate  = FLOW_SWITCH_CNTRL_STOPPED;
							//flowswitchcntrlstate  = FLOW_SWITCH_CNTRL_IDLE;
						}
						if(toggle_count_flow > 5000 )
   938cc:	4b4b      	ldr	r3, [pc, #300]	; (939fc <cl_flow_switchcontroller+0x1e8>)
   938ce:	881b      	ldrh	r3, [r3, #0]
   938d0:	f241 3288 	movw	r2, #5000	; 0x1388
   938d4:	4293      	cmp	r3, r2
   938d6:	d903      	bls.n	938e0 <cl_flow_switchcontroller+0xcc>
						{
							//  high  flow alarm 
							Cl_Alarm_TriggerAlarm(FLOW_HIGH_FLOWRATE,1);
   938d8:	200e      	movs	r0, #14
   938da:	2101      	movs	r1, #1
   938dc:	4b44      	ldr	r3, [pc, #272]	; (939f0 <cl_flow_switchcontroller+0x1dc>)
   938de:	4798      	blx	r3
						//	flowswitchcntrlstate  = FLOW_SWITCH_CNTRL_STOPPED;
							//flowswitchcntrlstate  = FLOW_SWITCH_CNTRL_IDLE;
						}
						Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&toggle_count_flow,2);
   938e0:	2019      	movs	r0, #25
   938e2:	4946      	ldr	r1, [pc, #280]	; (939fc <cl_flow_switchcontroller+0x1e8>)
   938e4:	2202      	movs	r2, #2
   938e6:	4b46      	ldr	r3, [pc, #280]	; (93a00 <cl_flow_switchcontroller+0x1ec>)
   938e8:	4798      	blx	r3
						toggle_count_flow = 0;
   938ea:	4b44      	ldr	r3, [pc, #272]	; (939fc <cl_flow_switchcontroller+0x1e8>)
   938ec:	2200      	movs	r2, #0
   938ee:	801a      	strh	r2, [r3, #0]
						}
						
						break;
   938f0:	e02c      	b.n	9394c <cl_flow_switchcontroller+0x138>
   938f2:	e02b      	b.n	9394c <cl_flow_switchcontroller+0x138>
						break;
						case FLOW_SWITCH_CNTRLER_EVENT_10MS:
						//break;
						case FLOW_SWITCH_CNTRLER_EVENT_INSTANT:
			
							if(Flowswitch_msg.flowswitch_event == FLOW_SWITCH_EVENT_LEVEL_HIGH)
   938f4:	4b43      	ldr	r3, [pc, #268]	; (93a04 <cl_flow_switchcontroller+0x1f0>)
   938f6:	781b      	ldrb	r3, [r3, #0]
   938f8:	2b01      	cmp	r3, #1
   938fa:	d110      	bne.n	9391e <cl_flow_switchcontroller+0x10a>
							{
								Flowswitch_msg.flowswitch_event =  FLOW_SWITCH_EVENT_UNDEFINED;
   938fc:	4b41      	ldr	r3, [pc, #260]	; (93a04 <cl_flow_switchcontroller+0x1f0>)
   938fe:	2200      	movs	r2, #0
   93900:	701a      	strb	r2, [r3, #0]
				
								if(flow_switch_state != FLOW_SWITCH_LEVEL_HIGH )
   93902:	4b41      	ldr	r3, [pc, #260]	; (93a08 <cl_flow_switchcontroller+0x1f4>)
   93904:	781b      	ldrb	r3, [r3, #0]
   93906:	2b01      	cmp	r3, #1
   93908:	d01e      	beq.n	93948 <cl_flow_switchcontroller+0x134>
								{
									
									toggle_count_flow++;
   9390a:	4b3c      	ldr	r3, [pc, #240]	; (939fc <cl_flow_switchcontroller+0x1e8>)
   9390c:	881b      	ldrh	r3, [r3, #0]
   9390e:	3301      	adds	r3, #1
   93910:	b29a      	uxth	r2, r3
   93912:	4b3a      	ldr	r3, [pc, #232]	; (939fc <cl_flow_switchcontroller+0x1e8>)
   93914:	801a      	strh	r2, [r3, #0]
									flow_switch_state = FLOW_SWITCH_LEVEL_HIGH;
   93916:	4b3c      	ldr	r3, [pc, #240]	; (93a08 <cl_flow_switchcontroller+0x1f4>)
   93918:	2201      	movs	r2, #1
   9391a:	701a      	strb	r2, [r3, #0]
									flow_switch_state = FLOW_SWITCH_LEVEL_LOW;
								}

					
							}
						break;
   9391c:	e016      	b.n	9394c <cl_flow_switchcontroller+0x138>
									toggle_count_flow++;
									flow_switch_state = FLOW_SWITCH_LEVEL_HIGH;
								}

							}
							else if(Flowswitch_msg.flowswitch_event ==  FLOW_SWITCH_EVENT_LEVEL_LOW)
   9391e:	4b39      	ldr	r3, [pc, #228]	; (93a04 <cl_flow_switchcontroller+0x1f0>)
   93920:	781b      	ldrb	r3, [r3, #0]
   93922:	2b02      	cmp	r3, #2
   93924:	d110      	bne.n	93948 <cl_flow_switchcontroller+0x134>
							{

								Flowswitch_msg.flowswitch_event =  FLOW_SWITCH_EVENT_UNDEFINED;
   93926:	4b37      	ldr	r3, [pc, #220]	; (93a04 <cl_flow_switchcontroller+0x1f0>)
   93928:	2200      	movs	r2, #0
   9392a:	701a      	strb	r2, [r3, #0]

								if(flow_switch_state != FLOW_SWITCH_LEVEL_LOW )
   9392c:	4b36      	ldr	r3, [pc, #216]	; (93a08 <cl_flow_switchcontroller+0x1f4>)
   9392e:	781b      	ldrb	r3, [r3, #0]
   93930:	2b02      	cmp	r3, #2
   93932:	d009      	beq.n	93948 <cl_flow_switchcontroller+0x134>
								{
									toggle_count_flow++;
   93934:	4b31      	ldr	r3, [pc, #196]	; (939fc <cl_flow_switchcontroller+0x1e8>)
   93936:	881b      	ldrh	r3, [r3, #0]
   93938:	3301      	adds	r3, #1
   9393a:	b29a      	uxth	r2, r3
   9393c:	4b2f      	ldr	r3, [pc, #188]	; (939fc <cl_flow_switchcontroller+0x1e8>)
   9393e:	801a      	strh	r2, [r3, #0]
									flow_switch_state = FLOW_SWITCH_LEVEL_LOW;
   93940:	4b31      	ldr	r3, [pc, #196]	; (93a08 <cl_flow_switchcontroller+0x1f4>)
   93942:	2202      	movs	r2, #2
   93944:	701a      	strb	r2, [r3, #0]
								}

					
							}
						break;
   93946:	e001      	b.n	9394c <cl_flow_switchcontroller+0x138>
   93948:	e000      	b.n	9394c <cl_flow_switchcontroller+0x138>
						
						default:break;
   9394a:	bf00      	nop
					}
			break;
   9394c:	e049      	b.n	939e2 <cl_flow_switchcontroller+0x1ce>
			case FLOW_SWITCH_CNTRL_IDLE:
								switch(cntrl_event)
   9394e:	79fb      	ldrb	r3, [r7, #7]
   93950:	2b01      	cmp	r3, #1
   93952:	d001      	beq.n	93958 <cl_flow_switchcontroller+0x144>
   93954:	2b02      	cmp	r3, #2
								{
									case FLOW_SWITCH_CNTRLER_EVENT_START:
									flowswitchcntrlstate  = FLOW_SWITCH_CNTRL_READY;
									break;
									case FLOW_SWITCH_CNTRLER_EVENT_STOP:
									break;
   93956:	e003      	b.n	93960 <cl_flow_switchcontroller+0x14c>
			break;
			case FLOW_SWITCH_CNTRL_IDLE:
								switch(cntrl_event)
								{
									case FLOW_SWITCH_CNTRLER_EVENT_START:
									flowswitchcntrlstate  = FLOW_SWITCH_CNTRL_READY;
   93958:	4b24      	ldr	r3, [pc, #144]	; (939ec <cl_flow_switchcontroller+0x1d8>)
   9395a:	2201      	movs	r2, #1
   9395c:	701a      	strb	r2, [r3, #0]
									break;
   9395e:	bf00      	nop
									case FLOW_SWITCH_CNTRLER_EVENT_STOP:
									break;
								}
			break;
   93960:	e03f      	b.n	939e2 <cl_flow_switchcontroller+0x1ce>
			
			case FLOW_SWITCH_CNTRL_READY:
								switch(cntrl_event)
   93962:	79fb      	ldrb	r3, [r7, #7]
   93964:	2b03      	cmp	r3, #3
   93966:	d002      	beq.n	9396e <cl_flow_switchcontroller+0x15a>
   93968:	2b06      	cmp	r3, #6
   9396a:	d004      	beq.n	93976 <cl_flow_switchcontroller+0x162>
										}

					
									}
								break;
									default:break;
   9396c:	e02e      	b.n	939cc <cl_flow_switchcontroller+0x1b8>
			
			case FLOW_SWITCH_CNTRL_READY:
								switch(cntrl_event)
								{			
									case FLOW_SWITCH_CNTRLER_EVENT_SEC:
									flowswitchcntrlstate  = FLOW_SWITCH_CNTRL_ACTIVE;
   9396e:	4b1f      	ldr	r3, [pc, #124]	; (939ec <cl_flow_switchcontroller+0x1d8>)
   93970:	2202      	movs	r2, #2
   93972:	701a      	strb	r2, [r3, #0]
									break;
   93974:	e02a      	b.n	939cc <cl_flow_switchcontroller+0x1b8>
									case FLOW_SWITCH_CNTRLER_EVENT_INSTANT:
			
									if(Flowswitch_msg.flowswitch_event == FLOW_SWITCH_EVENT_LEVEL_HIGH)
   93976:	4b23      	ldr	r3, [pc, #140]	; (93a04 <cl_flow_switchcontroller+0x1f0>)
   93978:	781b      	ldrb	r3, [r3, #0]
   9397a:	2b01      	cmp	r3, #1
   9397c:	d110      	bne.n	939a0 <cl_flow_switchcontroller+0x18c>
									{
										Flowswitch_msg.flowswitch_event =  FLOW_SWITCH_EVENT_UNDEFINED;
   9397e:	4b21      	ldr	r3, [pc, #132]	; (93a04 <cl_flow_switchcontroller+0x1f0>)
   93980:	2200      	movs	r2, #0
   93982:	701a      	strb	r2, [r3, #0]
				
										if(flow_switch_state != FLOW_SWITCH_LEVEL_HIGH )
   93984:	4b20      	ldr	r3, [pc, #128]	; (93a08 <cl_flow_switchcontroller+0x1f4>)
   93986:	781b      	ldrb	r3, [r3, #0]
   93988:	2b01      	cmp	r3, #1
   9398a:	d01e      	beq.n	939ca <cl_flow_switchcontroller+0x1b6>
										{
									
											toggle_count_flow++;
   9398c:	4b1b      	ldr	r3, [pc, #108]	; (939fc <cl_flow_switchcontroller+0x1e8>)
   9398e:	881b      	ldrh	r3, [r3, #0]
   93990:	3301      	adds	r3, #1
   93992:	b29a      	uxth	r2, r3
   93994:	4b19      	ldr	r3, [pc, #100]	; (939fc <cl_flow_switchcontroller+0x1e8>)
   93996:	801a      	strh	r2, [r3, #0]
											flow_switch_state = FLOW_SWITCH_LEVEL_HIGH;
   93998:	4b1b      	ldr	r3, [pc, #108]	; (93a08 <cl_flow_switchcontroller+0x1f4>)
   9399a:	2201      	movs	r2, #1
   9399c:	701a      	strb	r2, [r3, #0]
											flow_switch_state = FLOW_SWITCH_LEVEL_LOW;
										}

					
									}
								break;
   9399e:	e014      	b.n	939ca <cl_flow_switchcontroller+0x1b6>
											toggle_count_flow++;
											flow_switch_state = FLOW_SWITCH_LEVEL_HIGH;
										}

									}
									else if(Flowswitch_msg.flowswitch_event ==  FLOW_SWITCH_EVENT_LEVEL_LOW)
   939a0:	4b18      	ldr	r3, [pc, #96]	; (93a04 <cl_flow_switchcontroller+0x1f0>)
   939a2:	781b      	ldrb	r3, [r3, #0]
   939a4:	2b02      	cmp	r3, #2
   939a6:	d110      	bne.n	939ca <cl_flow_switchcontroller+0x1b6>
									{

										Flowswitch_msg.flowswitch_event =  FLOW_SWITCH_EVENT_UNDEFINED;
   939a8:	4b16      	ldr	r3, [pc, #88]	; (93a04 <cl_flow_switchcontroller+0x1f0>)
   939aa:	2200      	movs	r2, #0
   939ac:	701a      	strb	r2, [r3, #0]

										if(flow_switch_state != FLOW_SWITCH_LEVEL_LOW )
   939ae:	4b16      	ldr	r3, [pc, #88]	; (93a08 <cl_flow_switchcontroller+0x1f4>)
   939b0:	781b      	ldrb	r3, [r3, #0]
   939b2:	2b02      	cmp	r3, #2
   939b4:	d009      	beq.n	939ca <cl_flow_switchcontroller+0x1b6>
										{
											toggle_count_flow++;
   939b6:	4b11      	ldr	r3, [pc, #68]	; (939fc <cl_flow_switchcontroller+0x1e8>)
   939b8:	881b      	ldrh	r3, [r3, #0]
   939ba:	3301      	adds	r3, #1
   939bc:	b29a      	uxth	r2, r3
   939be:	4b0f      	ldr	r3, [pc, #60]	; (939fc <cl_flow_switchcontroller+0x1e8>)
   939c0:	801a      	strh	r2, [r3, #0]
											flow_switch_state = FLOW_SWITCH_LEVEL_LOW;
   939c2:	4b11      	ldr	r3, [pc, #68]	; (93a08 <cl_flow_switchcontroller+0x1f4>)
   939c4:	2202      	movs	r2, #2
   939c6:	701a      	strb	r2, [r3, #0]
										}

					
									}
								break;
   939c8:	e7ff      	b.n	939ca <cl_flow_switchcontroller+0x1b6>
   939ca:	bf00      	nop
									default:break;
								}
			break;
   939cc:	e009      	b.n	939e2 <cl_flow_switchcontroller+0x1ce>
			case FLOW_SWITCH_CNTRL_STOPPED:
								switch(cntrl_event)
   939ce:	79fb      	ldrb	r3, [r7, #7]
   939d0:	2b01      	cmp	r3, #1
   939d2:	d001      	beq.n	939d8 <cl_flow_switchcontroller+0x1c4>
   939d4:	2b02      	cmp	r3, #2
									case FLOW_SWITCH_CNTRLER_EVENT_START:
									flowswitchcntrlstate  = FLOW_SWITCH_CNTRL_ACTIVE;
									
									break;
									case FLOW_SWITCH_CNTRLER_EVENT_STOP:
									break;
   939d6:	e003      	b.n	939e0 <cl_flow_switchcontroller+0x1cc>
			break;
			case FLOW_SWITCH_CNTRL_STOPPED:
								switch(cntrl_event)
								{
									case FLOW_SWITCH_CNTRLER_EVENT_START:
									flowswitchcntrlstate  = FLOW_SWITCH_CNTRL_ACTIVE;
   939d8:	4b04      	ldr	r3, [pc, #16]	; (939ec <cl_flow_switchcontroller+0x1d8>)
   939da:	2202      	movs	r2, #2
   939dc:	701a      	strb	r2, [r3, #0]
									
									break;
   939de:	bf00      	nop
									case FLOW_SWITCH_CNTRLER_EVENT_STOP:
									break;
								}
			break;
   939e0:	bf00      	nop
		}
		return CL_OK;
   939e2:	2300      	movs	r3, #0
   939e4:	4618      	mov	r0, r3
   939e6:	3710      	adds	r7, #16
   939e8:	46bd      	mov	sp, r7
   939ea:	bd80      	pop	{r7, pc}
   939ec:	20071ac7 	.word	0x20071ac7
   939f0:	000830a1 	.word	0x000830a1
   939f4:	20071aca 	.word	0x20071aca
   939f8:	00082f51 	.word	0x00082f51
   939fc:	20071ac8 	.word	0x20071ac8
   93a00:	0009ba51 	.word	0x0009ba51
   93a04:	20071ac4 	.word	0x20071ac4
   93a08:	20071ac6 	.word	0x20071ac6

00093a0c <cl_hep_controller>:
{
	return CL_OK;
}

Cl_ReturnCodeType cl_hep_controller(cl_hep_events hp_event , int32_t data)
{
   93a0c:	b580      	push	{r7, lr}
   93a0e:	b084      	sub	sp, #16
   93a10:	af00      	add	r7, sp, #0
   93a12:	4603      	mov	r3, r0
   93a14:	6039      	str	r1, [r7, #0]
   93a16:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType cl_hep_retcode = CL_OK;
   93a18:	2300      	movs	r3, #0
   93a1a:	73fb      	strb	r3, [r7, #15]
		cl_hep_pump_states hep_pumpstate = CL_HEP_STATE_IDLE;
   93a1c:	2300      	movs	r3, #0
   93a1e:	73bb      	strb	r3, [r7, #14]
		int16_t hep_delta_value = 0 ;
   93a20:	2300      	movs	r3, #0
   93a22:	81bb      	strh	r3, [r7, #12]
		static Cl_Uint32Type pwm_period = 0;
	    static Cl_Uint32Type pwm_count = 0;
	switch(hp_State)
   93a24:	4bb2      	ldr	r3, [pc, #712]	; (93cf0 <cl_hep_controller+0x2e4>)
   93a26:	781b      	ldrb	r3, [r3, #0]
   93a28:	2b10      	cmp	r3, #16
   93a2a:	f200 82dc 	bhi.w	93fe6 <cl_hep_controller+0x5da>
   93a2e:	a201      	add	r2, pc, #4	; (adr r2, 93a34 <cl_hep_controller+0x28>)
   93a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   93a34:	00093a79 	.word	0x00093a79
   93a38:	00093bc5 	.word	0x00093bc5
   93a3c:	00093c6b 	.word	0x00093c6b
   93a40:	00093dad 	.word	0x00093dad
   93a44:	00093d3f 	.word	0x00093d3f
   93a48:	00093e1d 	.word	0x00093e1d
   93a4c:	00093e85 	.word	0x00093e85
   93a50:	00093fe7 	.word	0x00093fe7
   93a54:	00093f1d 	.word	0x00093f1d
   93a58:	00093fe7 	.word	0x00093fe7
   93a5c:	00093fe7 	.word	0x00093fe7
   93a60:	00093fe7 	.word	0x00093fe7
   93a64:	00093fe7 	.word	0x00093fe7
   93a68:	00093fe7 	.word	0x00093fe7
   93a6c:	00093fe7 	.word	0x00093fe7
   93a70:	00093fe7 	.word	0x00093fe7
   93a74:	00093fe7 	.word	0x00093fe7
	{	
		case	CL_HEP_STATE_IDLE:
		switch(hp_event)
   93a78:	79fb      	ldrb	r3, [r7, #7]
   93a7a:	3b01      	subs	r3, #1
   93a7c:	2b10      	cmp	r3, #16
   93a7e:	f200 82b4 	bhi.w	93fea <cl_hep_controller+0x5de>
   93a82:	a201      	add	r2, pc, #4	; (adr r2, 93a88 <cl_hep_controller+0x7c>)
   93a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   93a88:	00093b51 	.word	0x00093b51
   93a8c:	00093ba5 	.word	0x00093ba5
   93a90:	00093bb3 	.word	0x00093bb3
   93a94:	00093b7b 	.word	0x00093b7b
   93a98:	00093feb 	.word	0x00093feb
   93a9c:	00093feb 	.word	0x00093feb
   93aa0:	00093acd 	.word	0x00093acd
   93aa4:	00093feb 	.word	0x00093feb
   93aa8:	00093aff 	.word	0x00093aff
   93aac:	00093b11 	.word	0x00093b11
   93ab0:	00093feb 	.word	0x00093feb
   93ab4:	00093b43 	.word	0x00093b43
   93ab8:	00093feb 	.word	0x00093feb
   93abc:	00093feb 	.word	0x00093feb
   93ac0:	00093feb 	.word	0x00093feb
   93ac4:	00093bc1 	.word	0x00093bc1
   93ac8:	00093bc1 	.word	0x00093bc1
			{
				
				case CL_HEP_EVENT_STARTBOLUS:
					pwm_period =  cl_hep_deliveryrate ;
   93acc:	4b89      	ldr	r3, [pc, #548]	; (93cf4 <cl_hep_controller+0x2e8>)
   93ace:	681b      	ldr	r3, [r3, #0]
   93ad0:	4a89      	ldr	r2, [pc, #548]	; (93cf8 <cl_hep_controller+0x2ec>)
   93ad2:	6013      	str	r3, [r2, #0]
					pwm_period = 2;
   93ad4:	4b88      	ldr	r3, [pc, #544]	; (93cf8 <cl_hep_controller+0x2ec>)
   93ad6:	2202      	movs	r2, #2
   93ad8:	601a      	str	r2, [r3, #0]
				//	cl_wait(100);
					
				//	cl_wait(100);
					sv_cntrl_activatepump(HEPARINPUMP);
   93ada:	2005      	movs	r0, #5
   93adc:	4b87      	ldr	r3, [pc, #540]	; (93cfc <cl_hep_controller+0x2f0>)
   93ade:	4798      	blx	r3
					sv_cntrl_setHepa_dir();
   93ae0:	4b87      	ldr	r3, [pc, #540]	; (93d00 <cl_hep_controller+0x2f4>)
   93ae2:	4798      	blx	r3
					cl_wait(100);
   93ae4:	2064      	movs	r0, #100	; 0x64
   93ae6:	4b87      	ldr	r3, [pc, #540]	; (93d04 <cl_hep_controller+0x2f8>)
   93ae8:	4798      	blx	r3
					sv_cntrl_setpumpspeed(HEPARINPUMP,pwm_period);
   93aea:	4b83      	ldr	r3, [pc, #524]	; (93cf8 <cl_hep_controller+0x2ec>)
   93aec:	681b      	ldr	r3, [r3, #0]
   93aee:	2005      	movs	r0, #5
   93af0:	4619      	mov	r1, r3
   93af2:	4b85      	ldr	r3, [pc, #532]	; (93d08 <cl_hep_controller+0x2fc>)
   93af4:	4798      	blx	r3
				//	cl_hep_pumpFeedback_start();
				hp_State = CL_HEP_STATE_BOLUS_ON;
   93af6:	4b7e      	ldr	r3, [pc, #504]	; (93cf0 <cl_hep_controller+0x2e4>)
   93af8:	2206      	movs	r2, #6
   93afa:	701a      	strb	r2, [r3, #0]
				break;
   93afc:	e061      	b.n	93bc2 <cl_hep_controller+0x1b6>
				case CL_HEP_EVENT_STOPBOLUS:
					cl_hep_retcode =  sv_cntrl_deactivatepump(HEPARINPUMP);
   93afe:	2005      	movs	r0, #5
   93b00:	4b82      	ldr	r3, [pc, #520]	; (93d0c <cl_hep_controller+0x300>)
   93b02:	4798      	blx	r3
   93b04:	4603      	mov	r3, r0
   93b06:	73fb      	strb	r3, [r7, #15]
					hp_State = CL_HEP_STATE_IDLE;
   93b08:	4b79      	ldr	r3, [pc, #484]	; (93cf0 <cl_hep_controller+0x2e4>)
   93b0a:	2200      	movs	r2, #0
   93b0c:	701a      	strb	r2, [r3, #0]
				break;
   93b0e:	e058      	b.n	93bc2 <cl_hep_controller+0x1b6>
				case CL_HEP_EVENT_START_NORMAL_DELIVERY:
						//pwm_period = Treatdata[ID_heprate] ;
							pwm_period = hep_calibration(data);
   93b10:	683b      	ldr	r3, [r7, #0]
   93b12:	4618      	mov	r0, r3
   93b14:	4b7e      	ldr	r3, [pc, #504]	; (93d10 <cl_hep_controller+0x304>)
   93b16:	4798      	blx	r3
   93b18:	4602      	mov	r2, r0
   93b1a:	4b77      	ldr	r3, [pc, #476]	; (93cf8 <cl_hep_controller+0x2ec>)
   93b1c:	601a      	str	r2, [r3, #0]
							
						//	cl_wait(100);
						//	pwm_count = rin_calibration(data);
						
						
						sv_cntrl_setHepa_dir();
   93b1e:	4b78      	ldr	r3, [pc, #480]	; (93d00 <cl_hep_controller+0x2f4>)
   93b20:	4798      	blx	r3
						sv_cntrl_activatepump(HEPARINPUMP);
   93b22:	2005      	movs	r0, #5
   93b24:	4b75      	ldr	r3, [pc, #468]	; (93cfc <cl_hep_controller+0x2f0>)
   93b26:	4798      	blx	r3
					//	pwm_period = 10 ;
						cl_wait(100);
   93b28:	2064      	movs	r0, #100	; 0x64
   93b2a:	4b76      	ldr	r3, [pc, #472]	; (93d04 <cl_hep_controller+0x2f8>)
   93b2c:	4798      	blx	r3
						sv_cntrl_setpumpspeed(HEPARINPUMP,pwm_period);
   93b2e:	4b72      	ldr	r3, [pc, #456]	; (93cf8 <cl_hep_controller+0x2ec>)
   93b30:	681b      	ldr	r3, [r3, #0]
   93b32:	2005      	movs	r0, #5
   93b34:	4619      	mov	r1, r3
   93b36:	4b74      	ldr	r3, [pc, #464]	; (93d08 <cl_hep_controller+0x2fc>)
   93b38:	4798      	blx	r3
					//	cl_wait(100);
						
					//	cl_hep_pumpFeedback_set_expected_period(cl_hep_deliveryrate);
					//	cl_hep_pumpFeedback_start();

				hp_State = CL_HEP_STATE_NORMAL_DELIVERY_ON;
   93b3a:	4b6d      	ldr	r3, [pc, #436]	; (93cf0 <cl_hep_controller+0x2e4>)
   93b3c:	2208      	movs	r2, #8
   93b3e:	701a      	strb	r2, [r3, #0]

				break;
   93b40:	e03f      	b.n	93bc2 <cl_hep_controller+0x1b6>
				
				case CL_HEP_EVENT_STOP_NORMAL_DELIVERY:
				sv_cntrl_deactivatepump(HEPARINPUMP);
   93b42:	2005      	movs	r0, #5
   93b44:	4b71      	ldr	r3, [pc, #452]	; (93d0c <cl_hep_controller+0x300>)
   93b46:	4798      	blx	r3
				hp_State =  CL_HEP_STATE_IDLE;
   93b48:	4b69      	ldr	r3, [pc, #420]	; (93cf0 <cl_hep_controller+0x2e4>)
   93b4a:	2200      	movs	r2, #0
   93b4c:	701a      	strb	r2, [r3, #0]
				break;
   93b4e:	e038      	b.n	93bc2 <cl_hep_controller+0x1b6>
				case CL_HEP_EVENT_GO_TO_LEFTEND:
				pwm_period = 2 ;
   93b50:	4b69      	ldr	r3, [pc, #420]	; (93cf8 <cl_hep_controller+0x2ec>)
   93b52:	2202      	movs	r2, #2
   93b54:	601a      	str	r2, [r3, #0]
				
				sv_cntrl_setHepa_dir();
   93b56:	4b6a      	ldr	r3, [pc, #424]	; (93d00 <cl_hep_controller+0x2f4>)
   93b58:	4798      	blx	r3
				sv_cntrl_activatepump(HEPARINPUMP);
   93b5a:	2005      	movs	r0, #5
   93b5c:	4b67      	ldr	r3, [pc, #412]	; (93cfc <cl_hep_controller+0x2f0>)
   93b5e:	4798      	blx	r3
				//cl_hep_pumpFeedback_start();
				cl_wait(100);
   93b60:	2064      	movs	r0, #100	; 0x64
   93b62:	4b68      	ldr	r3, [pc, #416]	; (93d04 <cl_hep_controller+0x2f8>)
   93b64:	4798      	blx	r3
				sv_cntrl_setpumpspeed(HEPARINPUMP,pwm_period);
   93b66:	4b64      	ldr	r3, [pc, #400]	; (93cf8 <cl_hep_controller+0x2ec>)
   93b68:	681b      	ldr	r3, [r3, #0]
   93b6a:	2005      	movs	r0, #5
   93b6c:	4619      	mov	r1, r3
   93b6e:	4b66      	ldr	r3, [pc, #408]	; (93d08 <cl_hep_controller+0x2fc>)
   93b70:	4798      	blx	r3
				hp_State = CL_HEP_STATE_MOVING_LEFT;
   93b72:	4b5f      	ldr	r3, [pc, #380]	; (93cf0 <cl_hep_controller+0x2e4>)
   93b74:	2203      	movs	r2, #3
   93b76:	701a      	strb	r2, [r3, #0]
				break;
   93b78:	e023      	b.n	93bc2 <cl_hep_controller+0x1b6>
				case CL_HEP_EVENT_GO_TO_RIGHTEND:
				pwm_period = 2 ;
   93b7a:	4b5f      	ldr	r3, [pc, #380]	; (93cf8 <cl_hep_controller+0x2ec>)
   93b7c:	2202      	movs	r2, #2
   93b7e:	601a      	str	r2, [r3, #0]
				
					sv_cntrl_resetHepa_dir();
   93b80:	4b64      	ldr	r3, [pc, #400]	; (93d14 <cl_hep_controller+0x308>)
   93b82:	4798      	blx	r3
					sv_cntrl_activatepump(HEPARINPUMP);
   93b84:	2005      	movs	r0, #5
   93b86:	4b5d      	ldr	r3, [pc, #372]	; (93cfc <cl_hep_controller+0x2f0>)
   93b88:	4798      	blx	r3
				//	cl_hep_pumpFeedback_start();
					cl_wait(100);
   93b8a:	2064      	movs	r0, #100	; 0x64
   93b8c:	4b5d      	ldr	r3, [pc, #372]	; (93d04 <cl_hep_controller+0x2f8>)
   93b8e:	4798      	blx	r3
					sv_cntrl_setpumpspeed(HEPARINPUMP,pwm_period);
   93b90:	4b59      	ldr	r3, [pc, #356]	; (93cf8 <cl_hep_controller+0x2ec>)
   93b92:	681b      	ldr	r3, [r3, #0]
   93b94:	2005      	movs	r0, #5
   93b96:	4619      	mov	r1, r3
   93b98:	4b5b      	ldr	r3, [pc, #364]	; (93d08 <cl_hep_controller+0x2fc>)
   93b9a:	4798      	blx	r3
				hp_State = CL_HEP_STATE_MOVING_RIGHT;
   93b9c:	4b54      	ldr	r3, [pc, #336]	; (93cf0 <cl_hep_controller+0x2e4>)
   93b9e:	2204      	movs	r2, #4
   93ba0:	701a      	strb	r2, [r3, #0]
				break;
   93ba2:	e00e      	b.n	93bc2 <cl_hep_controller+0x1b6>
				case CL_HEP_EVENT_LEFT_END_REACHED:
				sv_cntrl_deactivatepump(HEPARINPUMP);
   93ba4:	2005      	movs	r0, #5
   93ba6:	4b59      	ldr	r3, [pc, #356]	; (93d0c <cl_hep_controller+0x300>)
   93ba8:	4798      	blx	r3
				hp_State = CL_HEP_STATE_IDLE;
   93baa:	4b51      	ldr	r3, [pc, #324]	; (93cf0 <cl_hep_controller+0x2e4>)
   93bac:	2200      	movs	r2, #0
   93bae:	701a      	strb	r2, [r3, #0]
				break;
   93bb0:	e007      	b.n	93bc2 <cl_hep_controller+0x1b6>
				
			
				case CL_HEP_EVENT_RIGHT_END_REACHED:
				sv_cntrl_deactivatepump(HEPARINPUMP);
   93bb2:	2005      	movs	r0, #5
   93bb4:	4b55      	ldr	r3, [pc, #340]	; (93d0c <cl_hep_controller+0x300>)
   93bb6:	4798      	blx	r3
				hp_State = CL_HEP_STATE_IDLE;
   93bb8:	4b4d      	ldr	r3, [pc, #308]	; (93cf0 <cl_hep_controller+0x2e4>)
   93bba:	2200      	movs	r2, #0
   93bbc:	701a      	strb	r2, [r3, #0]
				break;
   93bbe:	e000      	b.n	93bc2 <cl_hep_controller+0x1b6>
					//sv_cntrl_setHepa_dir();
					//sv_cntrl_activatepump(HEPARINPUMP);
					
					
					
					break;
   93bc0:	bf00      	nop
					//	sv_cntrl_setHepa_dir();
					//	sv_cntrl_activatepump(HEPARINPUMP);
					
					break;
			}
		break;
   93bc2:	e212      	b.n	93fea <cl_hep_controller+0x5de>
		case	CL_HEP_STATE_REACHED_LEFTEND:
		switch(hp_event)
   93bc4:	79fb      	ldrb	r3, [r7, #7]
   93bc6:	3b02      	subs	r3, #2
   93bc8:	2b0e      	cmp	r3, #14
   93bca:	f200 8210 	bhi.w	93fee <cl_hep_controller+0x5e2>
   93bce:	a201      	add	r2, pc, #4	; (adr r2, 93bd4 <cl_hep_controller+0x1c8>)
   93bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   93bd4:	00093c3b 	.word	0x00093c3b
   93bd8:	00093c49 	.word	0x00093c49
   93bdc:	00093c11 	.word	0x00093c11
   93be0:	00093c57 	.word	0x00093c57
   93be4:	00093c61 	.word	0x00093c61
   93be8:	00093fef 	.word	0x00093fef
   93bec:	00093fef 	.word	0x00093fef
   93bf0:	00093fef 	.word	0x00093fef
   93bf4:	00093fef 	.word	0x00093fef
   93bf8:	00093fef 	.word	0x00093fef
   93bfc:	00093fef 	.word	0x00093fef
   93c00:	00093fef 	.word	0x00093fef
   93c04:	00093fef 	.word	0x00093fef
   93c08:	00093fef 	.word	0x00093fef
   93c0c:	00093c3b 	.word	0x00093c3b
		{
			
			
			case CL_HEP_EVENT_GO_TO_RIGHTEND:
			sv_cntrl_resetHepa_dir();   ///change direction 24 july
   93c10:	4b40      	ldr	r3, [pc, #256]	; (93d14 <cl_hep_controller+0x308>)
   93c12:	4798      	blx	r3
		//	sv_cntrl_setHepa_dir();
			pwm_period = 5;
   93c14:	4b38      	ldr	r3, [pc, #224]	; (93cf8 <cl_hep_controller+0x2ec>)
   93c16:	2205      	movs	r2, #5
   93c18:	601a      	str	r2, [r3, #0]
			sv_cntrl_activatepump(HEPARINPUMP);
   93c1a:	2005      	movs	r0, #5
   93c1c:	4b37      	ldr	r3, [pc, #220]	; (93cfc <cl_hep_controller+0x2f0>)
   93c1e:	4798      	blx	r3
		//	cl_hep_pumpFeedback_start();
			cl_wait(100);
   93c20:	2064      	movs	r0, #100	; 0x64
   93c22:	4b38      	ldr	r3, [pc, #224]	; (93d04 <cl_hep_controller+0x2f8>)
   93c24:	4798      	blx	r3
			sv_cntrl_setpumpspeed(HEPARINPUMP,pwm_period);
   93c26:	4b34      	ldr	r3, [pc, #208]	; (93cf8 <cl_hep_controller+0x2ec>)
   93c28:	681b      	ldr	r3, [r3, #0]
   93c2a:	2005      	movs	r0, #5
   93c2c:	4619      	mov	r1, r3
   93c2e:	4b36      	ldr	r3, [pc, #216]	; (93d08 <cl_hep_controller+0x2fc>)
   93c30:	4798      	blx	r3
			hp_State = CL_HEP_STATE_MOVING_RIGHT;
   93c32:	4b2f      	ldr	r3, [pc, #188]	; (93cf0 <cl_hep_controller+0x2e4>)
   93c34:	2204      	movs	r2, #4
   93c36:	701a      	strb	r2, [r3, #0]
			break;
   93c38:	e016      	b.n	93c68 <cl_hep_controller+0x25c>
			case CL_HEP_EVENT_AT_LEFT_END:
			case CL_HEP_EVENT_LEFT_END_REACHED:
		    sv_cntrl_deactivatepump(HEPARINPUMP);
   93c3a:	2005      	movs	r0, #5
   93c3c:	4b33      	ldr	r3, [pc, #204]	; (93d0c <cl_hep_controller+0x300>)
   93c3e:	4798      	blx	r3
		   hp_State = CL_HEP_STATE_IDLE;
   93c40:	4b2b      	ldr	r3, [pc, #172]	; (93cf0 <cl_hep_controller+0x2e4>)
   93c42:	2200      	movs	r2, #0
   93c44:	701a      	strb	r2, [r3, #0]
		    break;
   93c46:	e00f      	b.n	93c68 <cl_hep_controller+0x25c>
			case CL_HEP_EVENT_RIGHT_END_REACHED:
			sv_cntrl_deactivatepump(HEPARINPUMP);
   93c48:	2005      	movs	r0, #5
   93c4a:	4b30      	ldr	r3, [pc, #192]	; (93d0c <cl_hep_controller+0x300>)
   93c4c:	4798      	blx	r3
			hp_State = CL_HEP_STATE_REACHED_RIGHTEND;
   93c4e:	4b28      	ldr	r3, [pc, #160]	; (93cf0 <cl_hep_controller+0x2e4>)
   93c50:	2202      	movs	r2, #2
   93c52:	701a      	strb	r2, [r3, #0]
			break;
   93c54:	e008      	b.n	93c68 <cl_hep_controller+0x25c>
			
			case CL_HEP_EVENT_SET_BOLUS_RATE:
			cl_hep_bolusrate = data ;
   93c56:	683b      	ldr	r3, [r7, #0]
   93c58:	b29a      	uxth	r2, r3
   93c5a:	4b2f      	ldr	r3, [pc, #188]	; (93d18 <cl_hep_controller+0x30c>)
   93c5c:	801a      	strh	r2, [r3, #0]
			break;
   93c5e:	e003      	b.n	93c68 <cl_hep_controller+0x25c>
			case CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE:
			cl_hep_deliveryrate = data;
   93c60:	683b      	ldr	r3, [r7, #0]
   93c62:	4a24      	ldr	r2, [pc, #144]	; (93cf4 <cl_hep_controller+0x2e8>)
   93c64:	6013      	str	r3, [r2, #0]
			break;
   93c66:	bf00      	nop
		}
		break;
   93c68:	e1c1      	b.n	93fee <cl_hep_controller+0x5e2>
		case	CL_HEP_STATE_REACHED_RIGHTEND:
		switch(hp_event)
   93c6a:	79fb      	ldrb	r3, [r7, #7]
   93c6c:	3b01      	subs	r3, #1
   93c6e:	2b10      	cmp	r3, #16
   93c70:	f200 81bf 	bhi.w	93ff2 <cl_hep_controller+0x5e6>
   93c74:	a201      	add	r2, pc, #4	; (adr r2, 93c7c <cl_hep_controller+0x270>)
   93c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   93c7a:	bf00      	nop
   93c7c:	00093cc9 	.word	0x00093cc9
   93c80:	00093d21 	.word	0x00093d21
   93c84:	00093d2f 	.word	0x00093d2f
   93c88:	00093ff3 	.word	0x00093ff3
   93c8c:	00093ff3 	.word	0x00093ff3
   93c90:	00093ff3 	.word	0x00093ff3
   93c94:	00093ff3 	.word	0x00093ff3
   93c98:	00093ff3 	.word	0x00093ff3
   93c9c:	00093ff3 	.word	0x00093ff3
   93ca0:	00093cc1 	.word	0x00093cc1
   93ca4:	00093ff3 	.word	0x00093ff3
   93ca8:	00093ff3 	.word	0x00093ff3
   93cac:	00093ff3 	.word	0x00093ff3
   93cb0:	00093ff3 	.word	0x00093ff3
   93cb4:	00093ff3 	.word	0x00093ff3
   93cb8:	00093ff3 	.word	0x00093ff3
   93cbc:	00093d2f 	.word	0x00093d2f
// 			case CL_HEP_EVENT_STARTBOLUS:
// 			hp_State = CL_HEP_STATE_BOLUS_ON;
// 			break;

			case CL_HEP_EVENT_START_NORMAL_DELIVERY:
			hp_State =  CL_HEP_STATE_IDLE;
   93cc0:	4b0b      	ldr	r3, [pc, #44]	; (93cf0 <cl_hep_controller+0x2e4>)
   93cc2:	2200      	movs	r2, #0
   93cc4:	701a      	strb	r2, [r3, #0]
			//hp_State = CL_HEP_STATE_NORMAL_DELIVERY_ON;/24july
			break;
   93cc6:	e039      	b.n	93d3c <cl_hep_controller+0x330>
			case CL_HEP_EVENT_GO_TO_LEFTEND:
			sv_cntrl_setHepa_dir();     //change direction 24 july
   93cc8:	4b0d      	ldr	r3, [pc, #52]	; (93d00 <cl_hep_controller+0x2f4>)
   93cca:	4798      	blx	r3
		//	sv_cntrl_resetHepa_dir();
			sv_cntrl_activatepump(HEPARINPUMP);
   93ccc:	2005      	movs	r0, #5
   93cce:	4b0b      	ldr	r3, [pc, #44]	; (93cfc <cl_hep_controller+0x2f0>)
   93cd0:	4798      	blx	r3
			cl_hep_pumpFeedback_start();
   93cd2:	4b12      	ldr	r3, [pc, #72]	; (93d1c <cl_hep_controller+0x310>)
   93cd4:	4798      	blx	r3
			cl_wait(100);
   93cd6:	2064      	movs	r0, #100	; 0x64
   93cd8:	4b0a      	ldr	r3, [pc, #40]	; (93d04 <cl_hep_controller+0x2f8>)
   93cda:	4798      	blx	r3
			sv_cntrl_setpumpspeed(HEPARINPUMP,pwm_period);
   93cdc:	4b06      	ldr	r3, [pc, #24]	; (93cf8 <cl_hep_controller+0x2ec>)
   93cde:	681b      	ldr	r3, [r3, #0]
   93ce0:	2005      	movs	r0, #5
   93ce2:	4619      	mov	r1, r3
   93ce4:	4b08      	ldr	r3, [pc, #32]	; (93d08 <cl_hep_controller+0x2fc>)
   93ce6:	4798      	blx	r3
			hp_State = CL_HEP_STATE_MOVING_LEFT;
   93ce8:	4b01      	ldr	r3, [pc, #4]	; (93cf0 <cl_hep_controller+0x2e4>)
   93cea:	2203      	movs	r2, #3
   93cec:	701a      	strb	r2, [r3, #0]
			break;
   93cee:	e025      	b.n	93d3c <cl_hep_controller+0x330>
   93cf0:	20071acb 	.word	0x20071acb
   93cf4:	20070a44 	.word	0x20070a44
   93cf8:	20071ad0 	.word	0x20071ad0
   93cfc:	00099c2d 	.word	0x00099c2d
   93d00:	00099d1d 	.word	0x00099d1d
   93d04:	00093195 	.word	0x00093195
   93d08:	00099d45 	.word	0x00099d45
   93d0c:	00099c69 	.word	0x00099c69
   93d10:	00083fed 	.word	0x00083fed
   93d14:	00099d31 	.word	0x00099d31
   93d18:	20071acc 	.word	0x20071acc
   93d1c:	00094041 	.word	0x00094041
			case CL_HEP_EVENT_LEFT_END_REACHED:
				sv_cntrl_deactivatepump(HEPARINPUMP);
   93d20:	2005      	movs	r0, #5
   93d22:	4bba      	ldr	r3, [pc, #744]	; (9400c <cl_hep_controller+0x600>)
   93d24:	4798      	blx	r3
				hp_State = CL_HEP_STATE_REACHED_LEFTEND;
   93d26:	4bba      	ldr	r3, [pc, #744]	; (94010 <cl_hep_controller+0x604>)
   93d28:	2201      	movs	r2, #1
   93d2a:	701a      	strb	r2, [r3, #0]
				break;
   93d2c:	e006      	b.n	93d3c <cl_hep_controller+0x330>
				case CL_HEP_EVENT_AT_RIGHT_END:
			    case CL_HEP_EVENT_RIGHT_END_REACHED:
			    sv_cntrl_deactivatepump(HEPARINPUMP);
   93d2e:	2005      	movs	r0, #5
   93d30:	4bb6      	ldr	r3, [pc, #728]	; (9400c <cl_hep_controller+0x600>)
   93d32:	4798      	blx	r3
			    hp_State = CL_HEP_STATE_IDLE;
   93d34:	4bb6      	ldr	r3, [pc, #728]	; (94010 <cl_hep_controller+0x604>)
   93d36:	2200      	movs	r2, #0
   93d38:	701a      	strb	r2, [r3, #0]
			    break;
   93d3a:	bf00      	nop
// 			break;
// 			case CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE:
// 			cl_hep_deliveryrate = data;
// 			break;
		}
		break;
   93d3c:	e159      	b.n	93ff2 <cl_hep_controller+0x5e6>

		case CL_HEP_STATE_MOVING_RIGHT:
		switch(hp_event)
   93d3e:	79fb      	ldrb	r3, [r7, #7]
   93d40:	3b03      	subs	r3, #3
   93d42:	2b0e      	cmp	r3, #14
   93d44:	d830      	bhi.n	93da8 <cl_hep_controller+0x39c>
   93d46:	a201      	add	r2, pc, #4	; (adr r2, 93d4c <cl_hep_controller+0x340>)
   93d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   93d4c:	00093d89 	.word	0x00093d89
   93d50:	00093da9 	.word	0x00093da9
   93d54:	00093da9 	.word	0x00093da9
   93d58:	00093da9 	.word	0x00093da9
   93d5c:	00093da9 	.word	0x00093da9
   93d60:	00093da9 	.word	0x00093da9
   93d64:	00093d97 	.word	0x00093d97
   93d68:	00093da9 	.word	0x00093da9
   93d6c:	00093da9 	.word	0x00093da9
   93d70:	00093d97 	.word	0x00093d97
   93d74:	00093da9 	.word	0x00093da9
   93d78:	00093da9 	.word	0x00093da9
   93d7c:	00093da9 	.word	0x00093da9
   93d80:	00093da9 	.word	0x00093da9
   93d84:	00093d89 	.word	0x00093d89
		{
			case CL_HEP_EVENT_RIGHT_END_REACHED:
			case CL_HEP_EVENT_AT_RIGHT_END:
			sv_cntrl_deactivatepump(HEPARINPUMP);
   93d88:	2005      	movs	r0, #5
   93d8a:	4ba0      	ldr	r3, [pc, #640]	; (9400c <cl_hep_controller+0x600>)
   93d8c:	4798      	blx	r3
			hp_State = CL_HEP_STATE_IDLE;
   93d8e:	4ba0      	ldr	r3, [pc, #640]	; (94010 <cl_hep_controller+0x604>)
   93d90:	2200      	movs	r2, #0
   93d92:	701a      	strb	r2, [r3, #0]
			break;
   93d94:	e009      	b.n	93daa <cl_hep_controller+0x39e>

			case CL_HEP_EVENT_STOP_NORMAL_DELIVERY:
			case CL_HEP_EVENT_STOPBOLUS:
			cl_hep_retcode =  sv_cntrl_deactivatepump(HEPARINPUMP);
   93d96:	2005      	movs	r0, #5
   93d98:	4b9c      	ldr	r3, [pc, #624]	; (9400c <cl_hep_controller+0x600>)
   93d9a:	4798      	blx	r3
   93d9c:	4603      	mov	r3, r0
   93d9e:	73fb      	strb	r3, [r7, #15]
			hp_State = CL_HEP_STATE_IDLE;
   93da0:	4b9b      	ldr	r3, [pc, #620]	; (94010 <cl_hep_controller+0x604>)
   93da2:	2200      	movs	r2, #0
   93da4:	701a      	strb	r2, [r3, #0]
			break;
   93da6:	e000      	b.n	93daa <cl_hep_controller+0x39e>
			default:break;
   93da8:	bf00      	nop

		}
		break;
   93daa:	e129      	b.n	94000 <cl_hep_controller+0x5f4>
		case CL_HEP_STATE_MOVING_LEFT:
		switch(hp_event)
   93dac:	79fb      	ldrb	r3, [r7, #7]
   93dae:	3b02      	subs	r3, #2
   93db0:	2b0e      	cmp	r3, #14
   93db2:	d831      	bhi.n	93e18 <cl_hep_controller+0x40c>
   93db4:	a201      	add	r2, pc, #4	; (adr r2, 93dbc <cl_hep_controller+0x3b0>)
   93db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   93dba:	bf00      	nop
   93dbc:	00093df9 	.word	0x00093df9
   93dc0:	00093e19 	.word	0x00093e19
   93dc4:	00093e19 	.word	0x00093e19
   93dc8:	00093e19 	.word	0x00093e19
   93dcc:	00093e19 	.word	0x00093e19
   93dd0:	00093e19 	.word	0x00093e19
   93dd4:	00093e19 	.word	0x00093e19
   93dd8:	00093e07 	.word	0x00093e07
   93ddc:	00093e19 	.word	0x00093e19
   93de0:	00093e19 	.word	0x00093e19
   93de4:	00093e07 	.word	0x00093e07
   93de8:	00093e19 	.word	0x00093e19
   93dec:	00093e19 	.word	0x00093e19
   93df0:	00093e19 	.word	0x00093e19
   93df4:	00093df9 	.word	0x00093df9
// 				break;
// 			}
// 			break;
 			case CL_HEP_EVENT_LEFT_END_REACHED:
			case CL_HEP_EVENT_AT_LEFT_END:
			sv_cntrl_deactivatepump(HEPARINPUMP);
   93df8:	2005      	movs	r0, #5
   93dfa:	4b84      	ldr	r3, [pc, #528]	; (9400c <cl_hep_controller+0x600>)
   93dfc:	4798      	blx	r3
			hp_State = CL_HEP_STATE_IDLE;
   93dfe:	4b84      	ldr	r3, [pc, #528]	; (94010 <cl_hep_controller+0x604>)
   93e00:	2200      	movs	r2, #0
   93e02:	701a      	strb	r2, [r3, #0]
			break;
   93e04:	e009      	b.n	93e1a <cl_hep_controller+0x40e>
			case CL_HEP_EVENT_STOP_NORMAL_DELIVERY:
			case CL_HEP_EVENT_STOPBOLUS:
			cl_hep_retcode =  sv_cntrl_deactivatepump(HEPARINPUMP);
   93e06:	2005      	movs	r0, #5
   93e08:	4b80      	ldr	r3, [pc, #512]	; (9400c <cl_hep_controller+0x600>)
   93e0a:	4798      	blx	r3
   93e0c:	4603      	mov	r3, r0
   93e0e:	73fb      	strb	r3, [r7, #15]
			hp_State = CL_HEP_STATE_IDLE;
   93e10:	4b7f      	ldr	r3, [pc, #508]	; (94010 <cl_hep_controller+0x604>)
   93e12:	2200      	movs	r2, #0
   93e14:	701a      	strb	r2, [r3, #0]
			break;
   93e16:	e000      	b.n	93e1a <cl_hep_controller+0x40e>
			default:break;
   93e18:	bf00      	nop

		}
		break;
   93e1a:	e0f1      	b.n	94000 <cl_hep_controller+0x5f4>
		case	CL_HEP_STATE_READY_FORBOLUS:
		switch(hp_event)
   93e1c:	79fb      	ldrb	r3, [r7, #7]
   93e1e:	3b01      	subs	r3, #1
   93e20:	2b06      	cmp	r3, #6
   93e22:	f200 80e8 	bhi.w	93ff6 <cl_hep_controller+0x5ea>
   93e26:	a201      	add	r2, pc, #4	; (adr r2, 93e2c <cl_hep_controller+0x420>)
   93e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   93e2c:	00093e51 	.word	0x00093e51
   93e30:	00093e61 	.word	0x00093e61
   93e34:	00093e69 	.word	0x00093e69
   93e38:	00093e59 	.word	0x00093e59
   93e3c:	00093e71 	.word	0x00093e71
   93e40:	00093e7b 	.word	0x00093e7b
   93e44:	00093e49 	.word	0x00093e49
		{
			case CL_HEP_EVENT_STARTBOLUS:
			hp_State = CL_HEP_STATE_BOLUS_ON;
   93e48:	4b71      	ldr	r3, [pc, #452]	; (94010 <cl_hep_controller+0x604>)
   93e4a:	2206      	movs	r2, #6
   93e4c:	701a      	strb	r2, [r3, #0]
			break;
   93e4e:	e018      	b.n	93e82 <cl_hep_controller+0x476>
			case CL_HEP_EVENT_GO_TO_LEFTEND:
			hp_State = CL_HEP_STATE_MOVING_LEFT;
   93e50:	4b6f      	ldr	r3, [pc, #444]	; (94010 <cl_hep_controller+0x604>)
   93e52:	2203      	movs	r2, #3
   93e54:	701a      	strb	r2, [r3, #0]
			break;
   93e56:	e014      	b.n	93e82 <cl_hep_controller+0x476>
			case CL_HEP_EVENT_GO_TO_RIGHTEND:
			hp_State = CL_HEP_STATE_MOVING_RIGHT;
   93e58:	4b6d      	ldr	r3, [pc, #436]	; (94010 <cl_hep_controller+0x604>)
   93e5a:	2204      	movs	r2, #4
   93e5c:	701a      	strb	r2, [r3, #0]
			break;
   93e5e:	e010      	b.n	93e82 <cl_hep_controller+0x476>
			case CL_HEP_EVENT_LEFT_END_REACHED:
			hp_State = CL_HEP_STATE_REACHED_LEFTEND;
   93e60:	4b6b      	ldr	r3, [pc, #428]	; (94010 <cl_hep_controller+0x604>)
   93e62:	2201      	movs	r2, #1
   93e64:	701a      	strb	r2, [r3, #0]
			break;
   93e66:	e00c      	b.n	93e82 <cl_hep_controller+0x476>
			case CL_HEP_EVENT_RIGHT_END_REACHED:
			hp_State = CL_HEP_STATE_REACHED_RIGHTEND;
   93e68:	4b69      	ldr	r3, [pc, #420]	; (94010 <cl_hep_controller+0x604>)
   93e6a:	2202      	movs	r2, #2
   93e6c:	701a      	strb	r2, [r3, #0]
			break;
   93e6e:	e008      	b.n	93e82 <cl_hep_controller+0x476>
			case CL_HEP_EVENT_SET_BOLUS_RATE:
			cl_hep_bolusrate = data ;
   93e70:	683b      	ldr	r3, [r7, #0]
   93e72:	b29a      	uxth	r2, r3
   93e74:	4b67      	ldr	r3, [pc, #412]	; (94014 <cl_hep_controller+0x608>)
   93e76:	801a      	strh	r2, [r3, #0]
			break;
   93e78:	e003      	b.n	93e82 <cl_hep_controller+0x476>
			case CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE:
			cl_hep_deliveryrate = data;
   93e7a:	683b      	ldr	r3, [r7, #0]
   93e7c:	4a66      	ldr	r2, [pc, #408]	; (94018 <cl_hep_controller+0x60c>)
   93e7e:	6013      	str	r3, [r2, #0]
			break;
   93e80:	bf00      	nop
		}
		break;
   93e82:	e0b8      	b.n	93ff6 <cl_hep_controller+0x5ea>
		case	CL_HEP_STATE_BOLUS_ON:
		switch(hp_event)
   93e84:	79fb      	ldrb	r3, [r7, #7]
   93e86:	3b02      	subs	r3, #2
   93e88:	2b0b      	cmp	r3, #11
   93e8a:	f200 80b6 	bhi.w	93ffa <cl_hep_controller+0x5ee>
   93e8e:	a201      	add	r2, pc, #4	; (adr r2, 93e94 <cl_hep_controller+0x488>)
   93e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   93e94:	00093ef3 	.word	0x00093ef3
   93e98:	00093efb 	.word	0x00093efb
   93e9c:	00093ffb 	.word	0x00093ffb
   93ea0:	00093ffb 	.word	0x00093ffb
   93ea4:	00093ffb 	.word	0x00093ffb
   93ea8:	00093ffb 	.word	0x00093ffb
   93eac:	00093ffb 	.word	0x00093ffb
   93eb0:	00093f03 	.word	0x00093f03
   93eb4:	00093ffb 	.word	0x00093ffb
   93eb8:	00093ffb 	.word	0x00093ffb
   93ebc:	00093f03 	.word	0x00093f03
   93ec0:	00093ec5 	.word	0x00093ec5
		{
			case CL_HEP_EVENT_SEC_TICK:
			
			if(++cl_hep_seconds > 20)
   93ec4:	4b55      	ldr	r3, [pc, #340]	; (9401c <cl_hep_controller+0x610>)
   93ec6:	881b      	ldrh	r3, [r3, #0]
   93ec8:	3301      	adds	r3, #1
   93eca:	b29a      	uxth	r2, r3
   93ecc:	4b53      	ldr	r3, [pc, #332]	; (9401c <cl_hep_controller+0x610>)
   93ece:	801a      	strh	r2, [r3, #0]
   93ed0:	4b52      	ldr	r3, [pc, #328]	; (9401c <cl_hep_controller+0x610>)
   93ed2:	881b      	ldrh	r3, [r3, #0]
   93ed4:	2b14      	cmp	r3, #20
   93ed6:	d90b      	bls.n	93ef0 <cl_hep_controller+0x4e4>
			{
				//cl_hep_seconds = 0;
				//if(++cl_hep_minutes > HEPARIN_BOLUS_TIMEOUT)
			//	if(++cl_hep_seconds > HEPARIN_BOLUS_TIMEOUT)
//				{
					cl_hep_retcode =  sv_cntrl_deactivatepump(HEPARINPUMP);
   93ed8:	2005      	movs	r0, #5
   93eda:	4b4c      	ldr	r3, [pc, #304]	; (9400c <cl_hep_controller+0x600>)
   93edc:	4798      	blx	r3
   93ede:	4603      	mov	r3, r0
   93ee0:	73fb      	strb	r3, [r7, #15]
					hp_State = CL_HEP_STATE_IDLE;
   93ee2:	4b4b      	ldr	r3, [pc, #300]	; (94010 <cl_hep_controller+0x604>)
   93ee4:	2200      	movs	r2, #0
   93ee6:	701a      	strb	r2, [r3, #0]
					cl_hep_seconds = 0;
   93ee8:	4b4c      	ldr	r3, [pc, #304]	; (9401c <cl_hep_controller+0x610>)
   93eea:	2200      	movs	r2, #0
   93eec:	801a      	strh	r2, [r3, #0]
					//cl_hep_minutes = 0;
					//Cl_mac_apprequesthandler(MACREQ_HEPARIN_BOLUS_COMPLETED);
	//			}
			}

			break;
   93eee:	e014      	b.n	93f1a <cl_hep_controller+0x50e>
   93ef0:	e013      	b.n	93f1a <cl_hep_controller+0x50e>
			case CL_HEP_EVENT_LEFT_END_REACHED:
			hp_State = CL_HEP_STATE_REACHED_LEFTEND;
   93ef2:	4b47      	ldr	r3, [pc, #284]	; (94010 <cl_hep_controller+0x604>)
   93ef4:	2201      	movs	r2, #1
   93ef6:	701a      	strb	r2, [r3, #0]
			break;
   93ef8:	e00f      	b.n	93f1a <cl_hep_controller+0x50e>
			case CL_HEP_EVENT_RIGHT_END_REACHED:
			hp_State = CL_HEP_STATE_REACHED_RIGHTEND;
   93efa:	4b45      	ldr	r3, [pc, #276]	; (94010 <cl_hep_controller+0x604>)
   93efc:	2202      	movs	r2, #2
   93efe:	701a      	strb	r2, [r3, #0]
			break;
   93f00:	e00b      	b.n	93f1a <cl_hep_controller+0x50e>
// 			hp_State = CL_HEP_STATE_IDLE;
// 			break;
// 			
			case CL_HEP_EVENT_STOP_NORMAL_DELIVERY:
			case	CL_HEP_EVENT_STOPBOLUS:
			cl_hep_seconds = 0;
   93f02:	4b46      	ldr	r3, [pc, #280]	; (9401c <cl_hep_controller+0x610>)
   93f04:	2200      	movs	r2, #0
   93f06:	801a      	strh	r2, [r3, #0]
			cl_hep_retcode =  sv_cntrl_deactivatepump(HEPARINPUMP);
   93f08:	2005      	movs	r0, #5
   93f0a:	4b40      	ldr	r3, [pc, #256]	; (9400c <cl_hep_controller+0x600>)
   93f0c:	4798      	blx	r3
   93f0e:	4603      	mov	r3, r0
   93f10:	73fb      	strb	r3, [r7, #15]
			hp_State = CL_HEP_STATE_IDLE;
   93f12:	4b3f      	ldr	r3, [pc, #252]	; (94010 <cl_hep_controller+0x604>)
   93f14:	2200      	movs	r2, #0
   93f16:	701a      	strb	r2, [r3, #0]
			break;
   93f18:	bf00      	nop
		}
		break;
   93f1a:	e06e      	b.n	93ffa <cl_hep_controller+0x5ee>
		case	CL_HEP_STATE_READY_FOR_DELIVERY:
		break;
		case	CL_HEP_STATE_NORMAL_DELIVERY_ON:
			switch(hp_event)
   93f1c:	79fb      	ldrb	r3, [r7, #7]
   93f1e:	3b02      	subs	r3, #2
   93f20:	2b0b      	cmp	r3, #11
   93f22:	d86c      	bhi.n	93ffe <cl_hep_controller+0x5f2>
   93f24:	a201      	add	r2, pc, #4	; (adr r2, 93f2c <cl_hep_controller+0x520>)
   93f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   93f2a:	bf00      	nop
   93f2c:	00093f8d 	.word	0x00093f8d
   93f30:	00093f9f 	.word	0x00093f9f
   93f34:	00093fff 	.word	0x00093fff
   93f38:	00093fff 	.word	0x00093fff
   93f3c:	00093fb1 	.word	0x00093fb1
   93f40:	00093fff 	.word	0x00093fff
   93f44:	00093fff 	.word	0x00093fff
   93f48:	00093fdd 	.word	0x00093fdd
   93f4c:	00093fff 	.word	0x00093fff
   93f50:	00093fff 	.word	0x00093fff
   93f54:	00093fff 	.word	0x00093fff
   93f58:	00093f5d 	.word	0x00093f5d
			{
				case CL_HEP_EVENT_SEC_TICK:

					cl_hep_pumpFeedback_get_state(&hep_pumpstate);
   93f5c:	f107 030e 	add.w	r3, r7, #14
   93f60:	4618      	mov	r0, r3
   93f62:	4b2f      	ldr	r3, [pc, #188]	; (94020 <cl_hep_controller+0x614>)
   93f64:	4798      	blx	r3
					cl_hep_pumpFeedback_get_delta(&hep_delta_value);
   93f66:	f107 030c 	add.w	r3, r7, #12
   93f6a:	4618      	mov	r0, r3
   93f6c:	4b2d      	ldr	r3, [pc, #180]	; (94024 <cl_hep_controller+0x618>)
   93f6e:	4798      	blx	r3
			//		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"HP_RPM",6);
			//		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&hep_delta_value,2);
					switch(hep_pumpstate)
   93f70:	7bbb      	ldrb	r3, [r7, #14]
   93f72:	2b06      	cmp	r3, #6
   93f74:	d004      	beq.n	93f80 <cl_hep_controller+0x574>
   93f76:	2b07      	cmp	r3, #7
   93f78:	d004      	beq.n	93f84 <cl_hep_controller+0x578>
   93f7a:	2b02      	cmp	r3, #2
   93f7c:	d004      	beq.n	93f88 <cl_hep_controller+0x57c>
						case CL_HEP_P_STATE_STOPPED_AT_END:
							//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"HP_END",6);
							//sv_cntrl_deactivatepump(HEPARINPUMP);
							//hp_State = CL_HEP_STATE_REACHED_RIGHTEND;
						break;
						default:break;
   93f7e:	e004      	b.n	93f8a <cl_hep_controller+0x57e>
						case CL_HEP_P_STATE_RUNNING_SLOW:
							//apply correction
						//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"HP_SLOW",7);
						//	pwm_period = pwm_period - 5;
						//	sv_cntrl_setpumpspeed(HEPARINPUMP,pwm_period);
						break;
   93f80:	bf00      	nop
   93f82:	e02f      	b.n	93fe4 <cl_hep_controller+0x5d8>
						case CL_HEP_P_STATE_RUNNING_FAST:
							//apply correction
					//		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"HP_FAST",7);
						//	pwm_period = pwm_period + 5;
						//	sv_cntrl_setpumpspeed(HEPARINPUMP,pwm_period );
						break;
   93f84:	bf00      	nop
   93f86:	e02d      	b.n	93fe4 <cl_hep_controller+0x5d8>
						break;
						case CL_HEP_P_STATE_STOPPED_AT_END:
							//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"HP_END",6);
							//sv_cntrl_deactivatepump(HEPARINPUMP);
							//hp_State = CL_HEP_STATE_REACHED_RIGHTEND;
						break;
   93f88:	bf00      	nop
						default:break;
					}


				break;
   93f8a:	e02b      	b.n	93fe4 <cl_hep_controller+0x5d8>
				case CL_HEP_EVENT_LEFT_END_REACHED:
				cl_hep_retcode =  sv_cntrl_deactivatepump(HEPARINPUMP);
   93f8c:	2005      	movs	r0, #5
   93f8e:	4b1f      	ldr	r3, [pc, #124]	; (9400c <cl_hep_controller+0x600>)
   93f90:	4798      	blx	r3
   93f92:	4603      	mov	r3, r0
   93f94:	73fb      	strb	r3, [r7, #15]
				hp_State = CL_HEP_STATE_REACHED_LEFTEND;
   93f96:	4b1e      	ldr	r3, [pc, #120]	; (94010 <cl_hep_controller+0x604>)
   93f98:	2201      	movs	r2, #1
   93f9a:	701a      	strb	r2, [r3, #0]
				break;
   93f9c:	e022      	b.n	93fe4 <cl_hep_controller+0x5d8>
				case CL_HEP_EVENT_RIGHT_END_REACHED:
				cl_hep_retcode =  sv_cntrl_deactivatepump(HEPARINPUMP);
   93f9e:	2005      	movs	r0, #5
   93fa0:	4b1a      	ldr	r3, [pc, #104]	; (9400c <cl_hep_controller+0x600>)
   93fa2:	4798      	blx	r3
   93fa4:	4603      	mov	r3, r0
   93fa6:	73fb      	strb	r3, [r7, #15]
				hp_State = CL_HEP_STATE_REACHED_RIGHTEND;
   93fa8:	4b19      	ldr	r3, [pc, #100]	; (94010 <cl_hep_controller+0x604>)
   93faa:	2202      	movs	r2, #2
   93fac:	701a      	strb	r2, [r3, #0]
				break;
   93fae:	e019      	b.n	93fe4 <cl_hep_controller+0x5d8>
// 				case CL_HEP_EVENT_SET_BOLUS_RATE:
// 				cl_hep_bolusrate = data ;
// 				break;
 				case CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE:
 				
				 pwm_period = hep_calibration(data);
   93fb0:	683b      	ldr	r3, [r7, #0]
   93fb2:	4618      	mov	r0, r3
   93fb4:	4b1c      	ldr	r3, [pc, #112]	; (94028 <cl_hep_controller+0x61c>)
   93fb6:	4798      	blx	r3
   93fb8:	4602      	mov	r2, r0
   93fba:	4b1c      	ldr	r3, [pc, #112]	; (9402c <cl_hep_controller+0x620>)
   93fbc:	601a      	str	r2, [r3, #0]
				 sv_cntrl_setHepa_dir();
   93fbe:	4b1c      	ldr	r3, [pc, #112]	; (94030 <cl_hep_controller+0x624>)
   93fc0:	4798      	blx	r3
				 sv_cntrl_activatepump(HEPARINPUMP);
   93fc2:	2005      	movs	r0, #5
   93fc4:	4b1b      	ldr	r3, [pc, #108]	; (94034 <cl_hep_controller+0x628>)
   93fc6:	4798      	blx	r3
				 cl_wait(100);
   93fc8:	2064      	movs	r0, #100	; 0x64
   93fca:	4b1b      	ldr	r3, [pc, #108]	; (94038 <cl_hep_controller+0x62c>)
   93fcc:	4798      	blx	r3
				 sv_cntrl_setpumpspeed(HEPARINPUMP,pwm_period);
   93fce:	4b17      	ldr	r3, [pc, #92]	; (9402c <cl_hep_controller+0x620>)
   93fd0:	681b      	ldr	r3, [r3, #0]
   93fd2:	2005      	movs	r0, #5
   93fd4:	4619      	mov	r1, r3
   93fd6:	4b19      	ldr	r3, [pc, #100]	; (9403c <cl_hep_controller+0x630>)
   93fd8:	4798      	blx	r3
				 
 				break;
   93fda:	e003      	b.n	93fe4 <cl_hep_controller+0x5d8>
// 				case 	CL_HEP_EVENT_PAUSEBOLUS:
// 				hp_State = CL_HEP_STATE_PAUSED;
// 				break;
 				case	CL_HEP_EVENT_STOPBOLUS:
 				hp_State = CL_HEP_STATE_IDLE;
   93fdc:	4b0c      	ldr	r3, [pc, #48]	; (94010 <cl_hep_controller+0x604>)
   93fde:	2200      	movs	r2, #0
   93fe0:	701a      	strb	r2, [r3, #0]
 				break;
   93fe2:	bf00      	nop
			}
		
		break;
   93fe4:	e00b      	b.n	93ffe <cl_hep_controller+0x5f2>
		case	CL_HEP_STATE_STOPPED:
		break;

		case	CL_HEP_STATE_COMPLETED:
		break;
		default: break;
   93fe6:	bf00      	nop
   93fe8:	e00a      	b.n	94000 <cl_hep_controller+0x5f4>
					//	sv_cntrl_setHepa_dir();
					//	sv_cntrl_activatepump(HEPARINPUMP);
					
					break;
			}
		break;
   93fea:	bf00      	nop
   93fec:	e008      	b.n	94000 <cl_hep_controller+0x5f4>
			break;
			case CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE:
			cl_hep_deliveryrate = data;
			break;
		}
		break;
   93fee:	bf00      	nop
   93ff0:	e006      	b.n	94000 <cl_hep_controller+0x5f4>
// 			break;
// 			case CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE:
// 			cl_hep_deliveryrate = data;
// 			break;
		}
		break;
   93ff2:	bf00      	nop
   93ff4:	e004      	b.n	94000 <cl_hep_controller+0x5f4>
			break;
			case CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE:
			cl_hep_deliveryrate = data;
			break;
		}
		break;
   93ff6:	bf00      	nop
   93ff8:	e002      	b.n	94000 <cl_hep_controller+0x5f4>
			cl_hep_seconds = 0;
			cl_hep_retcode =  sv_cntrl_deactivatepump(HEPARINPUMP);
			hp_State = CL_HEP_STATE_IDLE;
			break;
		}
		break;
   93ffa:	bf00      	nop
   93ffc:	e000      	b.n	94000 <cl_hep_controller+0x5f4>
 				case	CL_HEP_EVENT_STOPBOLUS:
 				hp_State = CL_HEP_STATE_IDLE;
 				break;
			}
		
		break;
   93ffe:	bf00      	nop

		case	CL_HEP_STATE_COMPLETED:
		break;
		default: break;
	}
return CL_OK;	
   94000:	2300      	movs	r3, #0
   94002:	4618      	mov	r0, r3
   94004:	3710      	adds	r7, #16
   94006:	46bd      	mov	sp, r7
   94008:	bd80      	pop	{r7, pc}
   9400a:	bf00      	nop
   9400c:	00099c69 	.word	0x00099c69
   94010:	20071acb 	.word	0x20071acb
   94014:	20071acc 	.word	0x20071acc
   94018:	20070a44 	.word	0x20070a44
   9401c:	20071ace 	.word	0x20071ace
   94020:	0009405d 	.word	0x0009405d
   94024:	00094081 	.word	0x00094081
   94028:	00083fed 	.word	0x00083fed
   9402c:	20071ad0 	.word	0x20071ad0
   94030:	00099d1d 	.word	0x00099d1d
   94034:	00099c2d 	.word	0x00099c2d
   94038:	00093195 	.word	0x00093195
   9403c:	00099d45 	.word	0x00099d45

00094040 <cl_hep_pumpFeedback_start>:

static Cl_Uint16Type pin_status = 1,hp_start_status = 0,prev_hp_start_status = 0,hp_end_status = 0,prev_hp_end_status = 0;
//static Cl_Uint16Type counter = 0;

Cl_ReturnCodeType cl_hep_pumpFeedback_start(void)
{
   94040:	b480      	push	{r7}
   94042:	af00      	add	r7, sp, #0
	cl_hep_pump_state = CL_HEP_P_STATE_STARTED;
   94044:	4b04      	ldr	r3, [pc, #16]	; (94058 <cl_hep_pumpFeedback_start+0x18>)
   94046:	2203      	movs	r2, #3
   94048:	701a      	strb	r2, [r3, #0]
	return 0;
   9404a:	2300      	movs	r3, #0
}
   9404c:	4618      	mov	r0, r3
   9404e:	46bd      	mov	sp, r7
   94050:	f85d 7b04 	ldr.w	r7, [sp], #4
   94054:	4770      	bx	lr
   94056:	bf00      	nop
   94058:	20071ad6 	.word	0x20071ad6

0009405c <cl_hep_pumpFeedback_get_state>:
{
	
	return 0;
}
Cl_ReturnCodeType cl_hep_pumpFeedback_get_state(cl_hep_pump_states* pstate)
{
   9405c:	b480      	push	{r7}
   9405e:	b083      	sub	sp, #12
   94060:	af00      	add	r7, sp, #0
   94062:	6078      	str	r0, [r7, #4]
	*pstate = cl_hep_pump_state;
   94064:	4b05      	ldr	r3, [pc, #20]	; (9407c <cl_hep_pumpFeedback_get_state+0x20>)
   94066:	781a      	ldrb	r2, [r3, #0]
   94068:	687b      	ldr	r3, [r7, #4]
   9406a:	701a      	strb	r2, [r3, #0]
	return 0;
   9406c:	2300      	movs	r3, #0
}
   9406e:	4618      	mov	r0, r3
   94070:	370c      	adds	r7, #12
   94072:	46bd      	mov	sp, r7
   94074:	f85d 7b04 	ldr.w	r7, [sp], #4
   94078:	4770      	bx	lr
   9407a:	bf00      	nop
   9407c:	20071ad6 	.word	0x20071ad6

00094080 <cl_hep_pumpFeedback_get_delta>:
Cl_ReturnCodeType cl_hep_pumpFeedback_get_delta(int16_t* pdelta)
{
   94080:	b480      	push	{r7}
   94082:	b083      	sub	sp, #12
   94084:	af00      	add	r7, sp, #0
   94086:	6078      	str	r0, [r7, #4]
	*pdelta = hep_period - hep_expected_period;
   94088:	4b07      	ldr	r3, [pc, #28]	; (940a8 <cl_hep_pumpFeedback_get_delta+0x28>)
   9408a:	881a      	ldrh	r2, [r3, #0]
   9408c:	4b07      	ldr	r3, [pc, #28]	; (940ac <cl_hep_pumpFeedback_get_delta+0x2c>)
   9408e:	881b      	ldrh	r3, [r3, #0]
   94090:	1ad3      	subs	r3, r2, r3
   94092:	b29b      	uxth	r3, r3
   94094:	b29a      	uxth	r2, r3
   94096:	687b      	ldr	r3, [r7, #4]
   94098:	801a      	strh	r2, [r3, #0]
	return 0;
   9409a:	2300      	movs	r3, #0
}
   9409c:	4618      	mov	r0, r3
   9409e:	370c      	adds	r7, #12
   940a0:	46bd      	mov	sp, r7
   940a2:	f85d 7b04 	ldr.w	r7, [sp], #4
   940a6:	4770      	bx	lr
   940a8:	20071ada 	.word	0x20071ada
   940ac:	20071ad4 	.word	0x20071ad4

000940b0 <cl_hep_pumpFeedback_timer>:
	hep_expected_period = period;
	return 0;
}

Cl_ReturnCodeType cl_hep_pumpFeedback_timer(void) // 20 ms clock
{
   940b0:	e92d 4398 	stmdb	sp!, {r3, r4, r7, r8, r9, lr}
   940b4:	af00      	add	r7, sp, #0
	if(cl_hep_pump_state != CL_HEP_P_STATE_IDLE)
   940b6:	4b68      	ldr	r3, [pc, #416]	; (94258 <cl_hep_pumpFeedback_timer+0x1a8>)
   940b8:	781b      	ldrb	r3, [r3, #0]
   940ba:	2b00      	cmp	r3, #0
   940bc:	f000 80bd 	beq.w	9423a <cl_hep_pumpFeedback_timer+0x18a>
	{
		
	
		Cl_SysStat_GetSensor_Status_Query(SENSOR_HP_FB, &hep_rotataion_marker);
   940c0:	201b      	movs	r0, #27
   940c2:	4966      	ldr	r1, [pc, #408]	; (9425c <cl_hep_pumpFeedback_timer+0x1ac>)
   940c4:	4b66      	ldr	r3, [pc, #408]	; (94260 <cl_hep_pumpFeedback_timer+0x1b0>)
   940c6:	4798      	blx	r3

		twentymscounter++;
   940c8:	4b66      	ldr	r3, [pc, #408]	; (94264 <cl_hep_pumpFeedback_timer+0x1b4>)
   940ca:	881b      	ldrh	r3, [r3, #0]
   940cc:	3301      	adds	r3, #1
   940ce:	b29a      	uxth	r2, r3
   940d0:	4b64      	ldr	r3, [pc, #400]	; (94264 <cl_hep_pumpFeedback_timer+0x1b4>)
   940d2:	801a      	strh	r2, [r3, #0]
		if(twentymscounter > 10000)
   940d4:	4b63      	ldr	r3, [pc, #396]	; (94264 <cl_hep_pumpFeedback_timer+0x1b4>)
   940d6:	881b      	ldrh	r3, [r3, #0]
   940d8:	f242 7210 	movw	r2, #10000	; 0x2710
   940dc:	4293      	cmp	r3, r2
   940de:	d903      	bls.n	940e8 <cl_hep_pumpFeedback_timer+0x38>
		{
			Cl_Alarm_TriggerAlarm(HP_UNDERRUN,1);
   940e0:	2035      	movs	r0, #53	; 0x35
   940e2:	2101      	movs	r1, #1
   940e4:	4b60      	ldr	r3, [pc, #384]	; (94268 <cl_hep_pumpFeedback_timer+0x1b8>)
   940e6:	4798      	blx	r3
		}
		if((cl_hep_pump_state ==  CL_HEP_P_STATE_STARTED) && (hep_rotation_counter > 2))
   940e8:	4b5b      	ldr	r3, [pc, #364]	; (94258 <cl_hep_pumpFeedback_timer+0x1a8>)
   940ea:	781b      	ldrb	r3, [r3, #0]
   940ec:	2b03      	cmp	r3, #3
   940ee:	d106      	bne.n	940fe <cl_hep_pumpFeedback_timer+0x4e>
   940f0:	4b5e      	ldr	r3, [pc, #376]	; (9426c <cl_hep_pumpFeedback_timer+0x1bc>)
   940f2:	881b      	ldrh	r3, [r3, #0]
   940f4:	2b02      	cmp	r3, #2
   940f6:	d902      	bls.n	940fe <cl_hep_pumpFeedback_timer+0x4e>
		{
			cl_hep_pump_state = CL_HEP_P_STATE_RUNNING;
   940f8:	4b57      	ldr	r3, [pc, #348]	; (94258 <cl_hep_pumpFeedback_timer+0x1a8>)
   940fa:	2204      	movs	r2, #4
   940fc:	701a      	strb	r2, [r3, #0]
		}

		if(count_state == false)
   940fe:	4b5c      	ldr	r3, [pc, #368]	; (94270 <cl_hep_pumpFeedback_timer+0x1c0>)
   94100:	781b      	ldrb	r3, [r3, #0]
   94102:	f083 0301 	eor.w	r3, r3, #1
   94106:	b2db      	uxtb	r3, r3
   94108:	2b00      	cmp	r3, #0
   9410a:	d012      	beq.n	94132 <cl_hep_pumpFeedback_timer+0x82>
		{
			if(hep_rotataion_marker == 0 )
   9410c:	4b53      	ldr	r3, [pc, #332]	; (9425c <cl_hep_pumpFeedback_timer+0x1ac>)
   9410e:	881b      	ldrh	r3, [r3, #0]
   94110:	2b00      	cmp	r3, #0
   94112:	f040 808e 	bne.w	94232 <cl_hep_pumpFeedback_timer+0x182>
			{
				if(prev_hep_rotataion_marker != hep_rotataion_marker)
   94116:	4b57      	ldr	r3, [pc, #348]	; (94274 <cl_hep_pumpFeedback_timer+0x1c4>)
   94118:	881a      	ldrh	r2, [r3, #0]
   9411a:	4b50      	ldr	r3, [pc, #320]	; (9425c <cl_hep_pumpFeedback_timer+0x1ac>)
   9411c:	881b      	ldrh	r3, [r3, #0]
   9411e:	429a      	cmp	r2, r3
   94120:	f000 8087 	beq.w	94232 <cl_hep_pumpFeedback_timer+0x182>
				{
					count_state = true;
   94124:	4b52      	ldr	r3, [pc, #328]	; (94270 <cl_hep_pumpFeedback_timer+0x1c0>)
   94126:	2201      	movs	r2, #1
   94128:	701a      	strb	r2, [r3, #0]
					//hep_rotation_counter++;
					twentymscounter = 0;
   9412a:	4b4e      	ldr	r3, [pc, #312]	; (94264 <cl_hep_pumpFeedback_timer+0x1b4>)
   9412c:	2200      	movs	r2, #0
   9412e:	801a      	strh	r2, [r3, #0]
   94130:	e07f      	b.n	94232 <cl_hep_pumpFeedback_timer+0x182>
				}
			}
		}
		else
		{
			if(hep_rotataion_marker == 0 )
   94132:	4b4a      	ldr	r3, [pc, #296]	; (9425c <cl_hep_pumpFeedback_timer+0x1ac>)
   94134:	881b      	ldrh	r3, [r3, #0]
   94136:	2b00      	cmp	r3, #0
   94138:	d17b      	bne.n	94232 <cl_hep_pumpFeedback_timer+0x182>
			{
				if(prev_hep_rotataion_marker != hep_rotataion_marker)
   9413a:	4b4e      	ldr	r3, [pc, #312]	; (94274 <cl_hep_pumpFeedback_timer+0x1c4>)
   9413c:	881a      	ldrh	r2, [r3, #0]
   9413e:	4b47      	ldr	r3, [pc, #284]	; (9425c <cl_hep_pumpFeedback_timer+0x1ac>)
   94140:	881b      	ldrh	r3, [r3, #0]
   94142:	429a      	cmp	r2, r3
   94144:	d075      	beq.n	94232 <cl_hep_pumpFeedback_timer+0x182>
				{
					count_state = true;
   94146:	4b4a      	ldr	r3, [pc, #296]	; (94270 <cl_hep_pumpFeedback_timer+0x1c0>)
   94148:	2201      	movs	r2, #1
   9414a:	701a      	strb	r2, [r3, #0]
					hep_rotation_counter++;
   9414c:	4b47      	ldr	r3, [pc, #284]	; (9426c <cl_hep_pumpFeedback_timer+0x1bc>)
   9414e:	881b      	ldrh	r3, [r3, #0]
   94150:	3301      	adds	r3, #1
   94152:	b29a      	uxth	r2, r3
   94154:	4b45      	ldr	r3, [pc, #276]	; (9426c <cl_hep_pumpFeedback_timer+0x1bc>)
   94156:	801a      	strh	r2, [r3, #0]
					hep_period = twentymscounter*20;
   94158:	4b42      	ldr	r3, [pc, #264]	; (94264 <cl_hep_pumpFeedback_timer+0x1b4>)
   9415a:	881b      	ldrh	r3, [r3, #0]
   9415c:	461a      	mov	r2, r3
   9415e:	0092      	lsls	r2, r2, #2
   94160:	4413      	add	r3, r2
   94162:	009b      	lsls	r3, r3, #2
   94164:	b29a      	uxth	r2, r3
   94166:	4b44      	ldr	r3, [pc, #272]	; (94278 <cl_hep_pumpFeedback_timer+0x1c8>)
   94168:	801a      	strh	r2, [r3, #0]
				
					
						//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&hep_period,2);
						//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&hep_expected_period,2);
				
					if(cl_hep_pump_state != CL_HEP_P_STATE_STARTED)
   9416a:	4b3b      	ldr	r3, [pc, #236]	; (94258 <cl_hep_pumpFeedback_timer+0x1a8>)
   9416c:	781b      	ldrb	r3, [r3, #0]
   9416e:	2b03      	cmp	r3, #3
   94170:	d052      	beq.n	94218 <cl_hep_pumpFeedback_timer+0x168>
					{
						if(hep_period > (1.01 *hep_expected_period))
   94172:	4b41      	ldr	r3, [pc, #260]	; (94278 <cl_hep_pumpFeedback_timer+0x1c8>)
   94174:	881b      	ldrh	r3, [r3, #0]
   94176:	461a      	mov	r2, r3
   94178:	4b40      	ldr	r3, [pc, #256]	; (9427c <cl_hep_pumpFeedback_timer+0x1cc>)
   9417a:	4610      	mov	r0, r2
   9417c:	4798      	blx	r3
   9417e:	4680      	mov	r8, r0
   94180:	4689      	mov	r9, r1
   94182:	4b3f      	ldr	r3, [pc, #252]	; (94280 <cl_hep_pumpFeedback_timer+0x1d0>)
   94184:	881b      	ldrh	r3, [r3, #0]
   94186:	461a      	mov	r2, r3
   94188:	4b3c      	ldr	r3, [pc, #240]	; (9427c <cl_hep_pumpFeedback_timer+0x1cc>)
   9418a:	4610      	mov	r0, r2
   9418c:	4798      	blx	r3
   9418e:	4602      	mov	r2, r0
   94190:	460b      	mov	r3, r1
   94192:	4c3c      	ldr	r4, [pc, #240]	; (94284 <cl_hep_pumpFeedback_timer+0x1d4>)
   94194:	4610      	mov	r0, r2
   94196:	4619      	mov	r1, r3
   94198:	a32b      	add	r3, pc, #172	; (adr r3, 94248 <cl_hep_pumpFeedback_timer+0x198>)
   9419a:	e9d3 2300 	ldrd	r2, r3, [r3]
   9419e:	47a0      	blx	r4
   941a0:	4602      	mov	r2, r0
   941a2:	460b      	mov	r3, r1
   941a4:	4c38      	ldr	r4, [pc, #224]	; (94288 <cl_hep_pumpFeedback_timer+0x1d8>)
   941a6:	4640      	mov	r0, r8
   941a8:	4649      	mov	r1, r9
   941aa:	47a0      	blx	r4
   941ac:	4603      	mov	r3, r0
   941ae:	2b00      	cmp	r3, #0
   941b0:	d007      	beq.n	941c2 <cl_hep_pumpFeedback_timer+0x112>
						{
							cl_hep_pump_state = CL_HEP_P_STATE_RUNNING_SLOW;
   941b2:	4b29      	ldr	r3, [pc, #164]	; (94258 <cl_hep_pumpFeedback_timer+0x1a8>)
   941b4:	2206      	movs	r2, #6
   941b6:	701a      	strb	r2, [r3, #0]
							Cl_Alarm_TriggerAlarm(HP_UNDERRUN,1);
   941b8:	2035      	movs	r0, #53	; 0x35
   941ba:	2101      	movs	r1, #1
   941bc:	4b2a      	ldr	r3, [pc, #168]	; (94268 <cl_hep_pumpFeedback_timer+0x1b8>)
   941be:	4798      	blx	r3
   941c0:	e02a      	b.n	94218 <cl_hep_pumpFeedback_timer+0x168>
						}
						else if(hep_period < (0.99 *hep_expected_period))
   941c2:	4b2d      	ldr	r3, [pc, #180]	; (94278 <cl_hep_pumpFeedback_timer+0x1c8>)
   941c4:	881b      	ldrh	r3, [r3, #0]
   941c6:	461a      	mov	r2, r3
   941c8:	4b2c      	ldr	r3, [pc, #176]	; (9427c <cl_hep_pumpFeedback_timer+0x1cc>)
   941ca:	4610      	mov	r0, r2
   941cc:	4798      	blx	r3
   941ce:	4680      	mov	r8, r0
   941d0:	4689      	mov	r9, r1
   941d2:	4b2b      	ldr	r3, [pc, #172]	; (94280 <cl_hep_pumpFeedback_timer+0x1d0>)
   941d4:	881b      	ldrh	r3, [r3, #0]
   941d6:	461a      	mov	r2, r3
   941d8:	4b28      	ldr	r3, [pc, #160]	; (9427c <cl_hep_pumpFeedback_timer+0x1cc>)
   941da:	4610      	mov	r0, r2
   941dc:	4798      	blx	r3
   941de:	4602      	mov	r2, r0
   941e0:	460b      	mov	r3, r1
   941e2:	4c28      	ldr	r4, [pc, #160]	; (94284 <cl_hep_pumpFeedback_timer+0x1d4>)
   941e4:	4610      	mov	r0, r2
   941e6:	4619      	mov	r1, r3
   941e8:	a319      	add	r3, pc, #100	; (adr r3, 94250 <cl_hep_pumpFeedback_timer+0x1a0>)
   941ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   941ee:	47a0      	blx	r4
   941f0:	4602      	mov	r2, r0
   941f2:	460b      	mov	r3, r1
   941f4:	4c25      	ldr	r4, [pc, #148]	; (9428c <cl_hep_pumpFeedback_timer+0x1dc>)
   941f6:	4640      	mov	r0, r8
   941f8:	4649      	mov	r1, r9
   941fa:	47a0      	blx	r4
   941fc:	4603      	mov	r3, r0
   941fe:	2b00      	cmp	r3, #0
   94200:	d007      	beq.n	94212 <cl_hep_pumpFeedback_timer+0x162>
						{
							cl_hep_pump_state = CL_HEP_P_STATE_RUNNING_FAST;
   94202:	4b15      	ldr	r3, [pc, #84]	; (94258 <cl_hep_pumpFeedback_timer+0x1a8>)
   94204:	2207      	movs	r2, #7
   94206:	701a      	strb	r2, [r3, #0]
							Cl_Alarm_TriggerAlarm(HP_OVERRUN,1);
   94208:	2034      	movs	r0, #52	; 0x34
   9420a:	2101      	movs	r1, #1
   9420c:	4b16      	ldr	r3, [pc, #88]	; (94268 <cl_hep_pumpFeedback_timer+0x1b8>)
   9420e:	4798      	blx	r3
   94210:	e002      	b.n	94218 <cl_hep_pumpFeedback_timer+0x168>
						}
						else
						{
							cl_hep_pump_state = CL_HEP_P_STATE_RUNNING_NORMAL;
   94212:	4b11      	ldr	r3, [pc, #68]	; (94258 <cl_hep_pumpFeedback_timer+0x1a8>)
   94214:	2205      	movs	r2, #5
   94216:	701a      	strb	r2, [r3, #0]
						}
					}

				
					hep_freq_in_min  = ( 60000) / hep_period;
   94218:	4b17      	ldr	r3, [pc, #92]	; (94278 <cl_hep_pumpFeedback_timer+0x1c8>)
   9421a:	881b      	ldrh	r3, [r3, #0]
   9421c:	461a      	mov	r2, r3
   9421e:	f64e 2360 	movw	r3, #60000	; 0xea60
   94222:	fb93 f3f2 	sdiv	r3, r3, r2
   94226:	b29a      	uxth	r2, r3
   94228:	4b19      	ldr	r3, [pc, #100]	; (94290 <cl_hep_pumpFeedback_timer+0x1e0>)
   9422a:	801a      	strh	r2, [r3, #0]
					twentymscounter = 0;
   9422c:	4b0d      	ldr	r3, [pc, #52]	; (94264 <cl_hep_pumpFeedback_timer+0x1b4>)
   9422e:	2200      	movs	r2, #0
   94230:	801a      	strh	r2, [r3, #0]
				
				}
			}
		
		}
		prev_hep_rotataion_marker = hep_rotataion_marker;
   94232:	4b0a      	ldr	r3, [pc, #40]	; (9425c <cl_hep_pumpFeedback_timer+0x1ac>)
   94234:	881a      	ldrh	r2, [r3, #0]
   94236:	4b0f      	ldr	r3, [pc, #60]	; (94274 <cl_hep_pumpFeedback_timer+0x1c4>)
   94238:	801a      	strh	r2, [r3, #0]
	
	}
	
	return 0;
   9423a:	2300      	movs	r3, #0
}
   9423c:	4618      	mov	r0, r3
   9423e:	e8bd 8398 	ldmia.w	sp!, {r3, r4, r7, r8, r9, pc}
   94242:	bf00      	nop
   94244:	f3af 8000 	nop.w
   94248:	c28f5c29 	.word	0xc28f5c29
   9424c:	3ff028f5 	.word	0x3ff028f5
   94250:	7ae147ae 	.word	0x7ae147ae
   94254:	3fefae14 	.word	0x3fefae14
   94258:	20071ad6 	.word	0x20071ad6
   9425c:	20070a48 	.word	0x20070a48
   94260:	0008e7f9 	.word	0x0008e7f9
   94264:	20071ad8 	.word	0x20071ad8
   94268:	000830a1 	.word	0x000830a1
   9426c:	20071ade 	.word	0x20071ade
   94270:	20071ae0 	.word	0x20071ae0
   94274:	20070a4a 	.word	0x20070a4a
   94278:	20071ada 	.word	0x20071ada
   9427c:	000a600d 	.word	0x000a600d
   94280:	20071ad4 	.word	0x20071ad4
   94284:	000a60d9 	.word	0x000a60d9
   94288:	000a65f9 	.word	0x000a65f9
   9428c:	000a65bd 	.word	0x000a65bd
   94290:	20071adc 	.word	0x20071adc

00094294 <cl_hep_pump_enddetction_timer>:

//Cl_ReturnCodeType cl_hep_pump_enddetction_timer(void) // 20 ms clock
Cl_ReturnCodeType cl_hep_pump_enddetction_timer(void) // 100 ms clock
{
   94294:	b580      	push	{r7, lr}
   94296:	af00      	add	r7, sp, #0
		// START END  DETECTION
		{
			Cl_SysStat_GetSensor_Status_Query(SENSOR_HP_START,&hp_start_status);
   94298:	2017      	movs	r0, #23
   9429a:	4920      	ldr	r1, [pc, #128]	; (9431c <cl_hep_pump_enddetction_timer+0x88>)
   9429c:	4b20      	ldr	r3, [pc, #128]	; (94320 <cl_hep_pump_enddetction_timer+0x8c>)
   9429e:	4798      	blx	r3
			
			if(	prev_hp_start_status != hp_start_status)
   942a0:	4b20      	ldr	r3, [pc, #128]	; (94324 <cl_hep_pump_enddetction_timer+0x90>)
   942a2:	881a      	ldrh	r2, [r3, #0]
   942a4:	4b1d      	ldr	r3, [pc, #116]	; (9431c <cl_hep_pump_enddetction_timer+0x88>)
   942a6:	881b      	ldrh	r3, [r3, #0]
   942a8:	429a      	cmp	r2, r3
   942aa:	d00c      	beq.n	942c6 <cl_hep_pump_enddetction_timer+0x32>
			{
				prev_hp_start_status = hp_start_status;
   942ac:	4b1b      	ldr	r3, [pc, #108]	; (9431c <cl_hep_pump_enddetction_timer+0x88>)
   942ae:	881a      	ldrh	r2, [r3, #0]
   942b0:	4b1c      	ldr	r3, [pc, #112]	; (94324 <cl_hep_pump_enddetction_timer+0x90>)
   942b2:	801a      	strh	r2, [r3, #0]
				if(hp_start_status == 0)
   942b4:	4b19      	ldr	r3, [pc, #100]	; (9431c <cl_hep_pump_enddetction_timer+0x88>)
   942b6:	881b      	ldrh	r3, [r3, #0]
   942b8:	2b00      	cmp	r3, #0
   942ba:	d10c      	bne.n	942d6 <cl_hep_pump_enddetction_timer+0x42>
				{
						cl_hep_controller(CL_HEP_EVENT_RIGHT_END_REACHED , 0);
   942bc:	2003      	movs	r0, #3
   942be:	2100      	movs	r1, #0
   942c0:	4b19      	ldr	r3, [pc, #100]	; (94328 <cl_hep_pump_enddetction_timer+0x94>)
   942c2:	4798      	blx	r3
   942c4:	e007      	b.n	942d6 <cl_hep_pump_enddetction_timer+0x42>
						//sv_cntrl_resetHepa_dir();
						//	sv_cntrl_setHepa_dir();
					
				}
			}
				else if(hp_start_status == 0)
   942c6:	4b15      	ldr	r3, [pc, #84]	; (9431c <cl_hep_pump_enddetction_timer+0x88>)
   942c8:	881b      	ldrh	r3, [r3, #0]
   942ca:	2b00      	cmp	r3, #0
   942cc:	d103      	bne.n	942d6 <cl_hep_pump_enddetction_timer+0x42>
				{
					cl_hep_controller(CL_HEP_EVENT_AT_RIGHT_END , 0); // here the information that we are at right end is sent to the controller.
   942ce:	2011      	movs	r0, #17
   942d0:	2100      	movs	r1, #0
   942d2:	4b15      	ldr	r3, [pc, #84]	; (94328 <cl_hep_pump_enddetction_timer+0x94>)
   942d4:	4798      	blx	r3
				}
				



			Cl_SysStat_GetSensor_Status_Query(SENSOR_HP_END,&hp_end_status);
   942d6:	2018      	movs	r0, #24
   942d8:	4914      	ldr	r1, [pc, #80]	; (9432c <cl_hep_pump_enddetction_timer+0x98>)
   942da:	4b11      	ldr	r3, [pc, #68]	; (94320 <cl_hep_pump_enddetction_timer+0x8c>)
   942dc:	4798      	blx	r3
			
			
			if(	prev_hp_end_status != hp_end_status)
   942de:	4b14      	ldr	r3, [pc, #80]	; (94330 <cl_hep_pump_enddetction_timer+0x9c>)
   942e0:	881a      	ldrh	r2, [r3, #0]
   942e2:	4b12      	ldr	r3, [pc, #72]	; (9432c <cl_hep_pump_enddetction_timer+0x98>)
   942e4:	881b      	ldrh	r3, [r3, #0]
   942e6:	429a      	cmp	r2, r3
   942e8:	d00c      	beq.n	94304 <cl_hep_pump_enddetction_timer+0x70>
			{
				prev_hp_end_status = hp_end_status;
   942ea:	4b10      	ldr	r3, [pc, #64]	; (9432c <cl_hep_pump_enddetction_timer+0x98>)
   942ec:	881a      	ldrh	r2, [r3, #0]
   942ee:	4b10      	ldr	r3, [pc, #64]	; (94330 <cl_hep_pump_enddetction_timer+0x9c>)
   942f0:	801a      	strh	r2, [r3, #0]
				if(hp_end_status == 0)
   942f2:	4b0e      	ldr	r3, [pc, #56]	; (9432c <cl_hep_pump_enddetction_timer+0x98>)
   942f4:	881b      	ldrh	r3, [r3, #0]
   942f6:	2b00      	cmp	r3, #0
   942f8:	d10c      	bne.n	94314 <cl_hep_pump_enddetction_timer+0x80>
				{
					cl_hep_controller(CL_HEP_EVENT_LEFT_END_REACHED , 0);
   942fa:	2002      	movs	r0, #2
   942fc:	2100      	movs	r1, #0
   942fe:	4b0a      	ldr	r3, [pc, #40]	; (94328 <cl_hep_pump_enddetction_timer+0x94>)
   94300:	4798      	blx	r3
   94302:	e007      	b.n	94314 <cl_hep_pump_enddetction_timer+0x80>
					
					//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"HP_END",8);
					//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&hp_end_status,1);
				}
			}
			else if(hp_end_status == 0)
   94304:	4b09      	ldr	r3, [pc, #36]	; (9432c <cl_hep_pump_enddetction_timer+0x98>)
   94306:	881b      	ldrh	r3, [r3, #0]
   94308:	2b00      	cmp	r3, #0
   9430a:	d103      	bne.n	94314 <cl_hep_pump_enddetction_timer+0x80>
			{
				cl_hep_controller(CL_HEP_EVENT_AT_LEFT_END , 0);
   9430c:	2010      	movs	r0, #16
   9430e:	2100      	movs	r1, #0
   94310:	4b05      	ldr	r3, [pc, #20]	; (94328 <cl_hep_pump_enddetction_timer+0x94>)
   94312:	4798      	blx	r3
			
		}
			
		
		
		return 0;
   94314:	2300      	movs	r3, #0
   94316:	4618      	mov	r0, r3
   94318:	bd80      	pop	{r7, pc}
   9431a:	bf00      	nop
   9431c:	20071ae2 	.word	0x20071ae2
   94320:	0008e7f9 	.word	0x0008e7f9
   94324:	20071ae4 	.word	0x20071ae4
   94328:	00093a0d 	.word	0x00093a0d
   9432c:	20071ae6 	.word	0x20071ae6
   94330:	20071ae8 	.word	0x20071ae8

00094334 <cl_level_switchcontroller>:
static InletValvestate_type v1_status = V1_UNDEFINED;
// extern Cl_Uint8Type sv_cntrl_activate_valve(sv_valvetype );
// extern Cl_Uint8Type sv_cntrl_deactivate_valve(sv_valvetype );
extern Cl_BoolType IntakeReadyFlag;
Cl_ReturnCodeType cl_level_switchcontroller(levelswitchcntrl_event_type cntrl_event)
{
   94334:	b580      	push	{r7, lr}
   94336:	b084      	sub	sp, #16
   94338:	af00      	add	r7, sp, #0
   9433a:	4603      	mov	r3, r0
   9433c:	71fb      	strb	r3, [r7, #7]
	cl_Datastreamtype cl_tdata;
	switch(cntrl_event)
   9433e:	79fb      	ldrb	r3, [r7, #7]
   94340:	3b01      	subs	r3, #1
   94342:	2b03      	cmp	r3, #3
   94344:	d862      	bhi.n	9440c <cl_level_switchcontroller+0xd8>
   94346:	a201      	add	r2, pc, #4	; (adr r2, 9434c <cl_level_switchcontroller+0x18>)
   94348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9434c:	0009435d 	.word	0x0009435d
   94350:	0009440d 	.word	0x0009440d
   94354:	0009440d 	.word	0x0009440d
   94358:	0009438b 	.word	0x0009438b
	{
		case LEVEL_SWITCH_CNTRLER_EVENT_SEC:
		Cl_AlarmResetAlarm(LEVELSWITCH_ON_TO_OFF);
   9435c:	203e      	movs	r0, #62	; 0x3e
   9435e:	4b2e      	ldr	r3, [pc, #184]	; (94418 <cl_level_switchcontroller+0xe4>)
   94360:	4798      	blx	r3
		Cl_AlarmResetAlarm(LEVELSWITCH_OFF_TO_ON);
   94362:	203d      	movs	r0, #61	; 0x3d
   94364:	4b2c      	ldr	r3, [pc, #176]	; (94418 <cl_level_switchcontroller+0xe4>)
   94366:	4798      	blx	r3
		Cl_AlarmResetAlarm(LEVEL_SWITCH_LOW_TOGGLERATE);
   94368:	202d      	movs	r0, #45	; 0x2d
   9436a:	4b2b      	ldr	r3, [pc, #172]	; (94418 <cl_level_switchcontroller+0xe4>)
   9436c:	4798      	blx	r3
		
		toggle_count++;
   9436e:	4b2b      	ldr	r3, [pc, #172]	; (9441c <cl_level_switchcontroller+0xe8>)
   94370:	881b      	ldrh	r3, [r3, #0]
   94372:	3301      	adds	r3, #1
   94374:	b29a      	uxth	r2, r3
   94376:	4b29      	ldr	r3, [pc, #164]	; (9441c <cl_level_switchcontroller+0xe8>)
   94378:	801a      	strh	r2, [r3, #0]
												cl_tdata.word = 0;
   9437a:	2300      	movs	r3, #0
   9437c:	60fb      	str	r3, [r7, #12]

										
										cl_tdata.Twobyte = toggle_count;
   9437e:	4b27      	ldr	r3, [pc, #156]	; (9441c <cl_level_switchcontroller+0xe8>)
   94380:	881b      	ldrh	r3, [r3, #0]
   94382:	81bb      	strh	r3, [r7, #12]
										cl_tdata.bytearray[2] = 21;
   94384:	2315      	movs	r3, #21
   94386:	73bb      	strb	r3, [r7, #14]
			// low inlet flow alarm or level switch  malfunction
	//		Cl_Alarm_TriggerAlarm(LEVEL_SWITCH_LOW_TOGGLERATE,1);    commented
		}

	
		break;
   94388:	e041      	b.n	9440e <cl_level_switchcontroller+0xda>
		case LEVEL_SWITCH_CNTRLER_EVENT_100MS:
		break;
		case LEVEL_SWITCH_CNTRLER_EVENT_10MS:
		break;
		case LEVEL_SWITCH_CNTRLER_EVENT_INSTANT:
		if(Levelswitch_msg.levelswitch_event == LEVEL_SWITCH_EVENT_ON_TO_OFF)
   9438a:	4b25      	ldr	r3, [pc, #148]	; (94420 <cl_level_switchcontroller+0xec>)
   9438c:	781b      	ldrb	r3, [r3, #0]
   9438e:	2b01      	cmp	r3, #1
   94390:	d11b      	bne.n	943ca <cl_level_switchcontroller+0x96>
		{
			//stop flow
			if(IntakeReadyFlag){
   94392:	4b24      	ldr	r3, [pc, #144]	; (94424 <cl_level_switchcontroller+0xf0>)
   94394:	781b      	ldrb	r3, [r3, #0]
   94396:	2b00      	cmp	r3, #0
   94398:	d003      	beq.n	943a2 <cl_level_switchcontroller+0x6e>
				sv_cntrl_deactivate_valve(VALVE_ID1);
   9439a:	2001      	movs	r0, #1
   9439c:	4b22      	ldr	r3, [pc, #136]	; (94428 <cl_level_switchcontroller+0xf4>)
   9439e:	4798      	blx	r3
   943a0:	e033      	b.n	9440a <cl_level_switchcontroller+0xd6>
			}
			else{
				
			
			
			sv_cntrl_deactivate_valve(VALVE_ID1);
   943a2:	2001      	movs	r0, #1
   943a4:	4b20      	ldr	r3, [pc, #128]	; (94428 <cl_level_switchcontroller+0xf4>)
   943a6:	4798      	blx	r3
			Levelswitch_msg.levelswitch_event = LEVEL_SWITCH_EVENT_UNDEFINED;
   943a8:	4b1d      	ldr	r3, [pc, #116]	; (94420 <cl_level_switchcontroller+0xec>)
   943aa:	2200      	movs	r2, #0
   943ac:	701a      	strb	r2, [r3, #0]
			levelswitch_offtime = 0;
   943ae:	4b1f      	ldr	r3, [pc, #124]	; (9442c <cl_level_switchcontroller+0xf8>)
   943b0:	2200      	movs	r2, #0
   943b2:	801a      	strh	r2, [r3, #0]
			if(v1_status != V1_OFF )
   943b4:	4b1e      	ldr	r3, [pc, #120]	; (94430 <cl_level_switchcontroller+0xfc>)
   943b6:	781b      	ldrb	r3, [r3, #0]
   943b8:	2b02      	cmp	r3, #2
   943ba:	d026      	beq.n	9440a <cl_level_switchcontroller+0xd6>
			{
				toggle_count = 0;
   943bc:	4b17      	ldr	r3, [pc, #92]	; (9441c <cl_level_switchcontroller+0xe8>)
   943be:	2200      	movs	r2, #0
   943c0:	801a      	strh	r2, [r3, #0]
				v1_status = V1_OFF;
   943c2:	4b1b      	ldr	r3, [pc, #108]	; (94430 <cl_level_switchcontroller+0xfc>)
   943c4:	2202      	movs	r2, #2
   943c6:	701a      	strb	r2, [r3, #0]
				toggle_count = 0;
				v1_status = V1_ON;
			}
			}
		}
		break;
   943c8:	e021      	b.n	9440e <cl_level_switchcontroller+0xda>
				toggle_count = 0;
				v1_status = V1_OFF;
			}
			}
		}
		else if(Levelswitch_msg.levelswitch_event == LEVEL_SWITCH_EVENT_OFF_TO_ON)
   943ca:	4b15      	ldr	r3, [pc, #84]	; (94420 <cl_level_switchcontroller+0xec>)
   943cc:	781b      	ldrb	r3, [r3, #0]
   943ce:	2b02      	cmp	r3, #2
   943d0:	d11b      	bne.n	9440a <cl_level_switchcontroller+0xd6>
		{
			//start flow
			if(IntakeReadyFlag){
   943d2:	4b14      	ldr	r3, [pc, #80]	; (94424 <cl_level_switchcontroller+0xf0>)
   943d4:	781b      	ldrb	r3, [r3, #0]
   943d6:	2b00      	cmp	r3, #0
   943d8:	d003      	beq.n	943e2 <cl_level_switchcontroller+0xae>
				sv_cntrl_deactivate_valve(VALVE_ID1);
   943da:	2001      	movs	r0, #1
   943dc:	4b12      	ldr	r3, [pc, #72]	; (94428 <cl_level_switchcontroller+0xf4>)
   943de:	4798      	blx	r3
   943e0:	e013      	b.n	9440a <cl_level_switchcontroller+0xd6>
			}
			else{
			
			sv_cntrl_activate_valve(VALVE_ID1);
   943e2:	2001      	movs	r0, #1
   943e4:	4b13      	ldr	r3, [pc, #76]	; (94434 <cl_level_switchcontroller+0x100>)
   943e6:	4798      	blx	r3
			Levelswitch_msg.levelswitch_event = LEVEL_SWITCH_EVENT_UNDEFINED;
   943e8:	4b0d      	ldr	r3, [pc, #52]	; (94420 <cl_level_switchcontroller+0xec>)
   943ea:	2200      	movs	r2, #0
   943ec:	701a      	strb	r2, [r3, #0]
			levelswitch_ontime = 0;
   943ee:	4b12      	ldr	r3, [pc, #72]	; (94438 <cl_level_switchcontroller+0x104>)
   943f0:	2200      	movs	r2, #0
   943f2:	801a      	strh	r2, [r3, #0]
			if(v1_status != V1_ON )
   943f4:	4b0e      	ldr	r3, [pc, #56]	; (94430 <cl_level_switchcontroller+0xfc>)
   943f6:	781b      	ldrb	r3, [r3, #0]
   943f8:	2b01      	cmp	r3, #1
   943fa:	d006      	beq.n	9440a <cl_level_switchcontroller+0xd6>
			{
				toggle_count = 0;
   943fc:	4b07      	ldr	r3, [pc, #28]	; (9441c <cl_level_switchcontroller+0xe8>)
   943fe:	2200      	movs	r2, #0
   94400:	801a      	strh	r2, [r3, #0]
				v1_status = V1_ON;
   94402:	4b0b      	ldr	r3, [pc, #44]	; (94430 <cl_level_switchcontroller+0xfc>)
   94404:	2201      	movs	r2, #1
   94406:	701a      	strb	r2, [r3, #0]
			}
			}
		}
		break;
   94408:	e001      	b.n	9440e <cl_level_switchcontroller+0xda>
   9440a:	e000      	b.n	9440e <cl_level_switchcontroller+0xda>
		default:break;
   9440c:	bf00      	nop
		
	}
	return CL_OK;
   9440e:	2300      	movs	r3, #0
   94410:	4618      	mov	r0, r3
   94412:	3710      	adds	r7, #16
   94414:	46bd      	mov	sp, r7
   94416:	bd80      	pop	{r7, pc}
   94418:	00082f51 	.word	0x00082f51
   9441c:	20071af2 	.word	0x20071af2
   94420:	20071aec 	.word	0x20071aec
   94424:	20071c18 	.word	0x20071c18
   94428:	00099ced 	.word	0x00099ced
   9442c:	20071af0 	.word	0x20071af0
   94430:	20071af4 	.word	0x20071af4
   94434:	00099ccd 	.word	0x00099ccd
   94438:	20071aee 	.word	0x20071aee

0009443c <cl_isouf_controller>:
	{FPCURRENTSTATUS,false,false,false},
	*/
};

Cl_ReturnCodeType cl_isouf_controller(Cl_Mac_EventsType Cl_MacDlsisEvent)
{
   9443c:	b580      	push	{r7, lr}
   9443e:	b090      	sub	sp, #64	; 0x40
   94440:	af00      	add	r7, sp, #0
   94442:	4603      	mov	r3, r0
   94444:	71fb      	strb	r3, [r7, #7]
	
//	cl_ufpump_states uf_pumpstate = CL_UFP_STATE_IDLE;
	Cl_Uint16Type uf_delta_value = 0 ;
   94446:	2300      	movs	r3, #0
   94448:	87fb      	strh	r3, [r7, #62]	; 0x3e
	static Cl_Uint16Type pwm_period = 0;
	Cl_Uint32Type temp = 0;
   9444a:	2300      	movs	r3, #0
   9444c:	63bb      	str	r3, [r7, #56]	; 0x38
	Cl_Uint32Type temptime = 0;
   9444e:	2300      	movs	r3, #0
   94450:	637b      	str	r3, [r7, #52]	; 0x34
	
	StateDatatype abfdata;
	Cl_Uint8Type abfdataarray[5] =  {0,0,0,0,0};
   94452:	2300      	movs	r3, #0
   94454:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
   94458:	2300      	movs	r3, #0
   9445a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
   9445e:	2300      	movs	r3, #0
   94460:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
   94464:	2300      	movs	r3, #0
   94466:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   9446a:	2300      	movs	r3, #0
   9446c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   94470:	2351      	movs	r3, #81	; 0x51
   94472:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	Cl_Uint8Type data = 0;
   94476:	2300      	movs	r3, #0
   94478:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	Cl_Uint8Type datasize = 0;
   9447c:	2300      	movs	r3, #0
   9447e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	Cl_Uint8Type dataarray[4] =  {0,0,0,0};
   94482:	2300      	movs	r3, #0
   94484:	773b      	strb	r3, [r7, #28]
   94486:	2300      	movs	r3, #0
   94488:	777b      	strb	r3, [r7, #29]
   9448a:	2300      	movs	r3, #0
   9448c:	77bb      	strb	r3, [r7, #30]
   9448e:	2300      	movs	r3, #0
   94490:	77fb      	strb	r3, [r7, #31]
	
	cl_isouf_events cl_isouf_event = EVENT_ISOUF_NULL_EVENT;
   94492:	2300      	movs	r3, #0
   94494:	76fb      	strb	r3, [r7, #27]
	
	cl_isouf_retcode =  cl_isouf_translatemacevent( Cl_MacDlsisEvent, &cl_isouf_event);
   94496:	79fa      	ldrb	r2, [r7, #7]
   94498:	f107 031b 	add.w	r3, r7, #27
   9449c:	4610      	mov	r0, r2
   9449e:	4619      	mov	r1, r3
   944a0:	4baf      	ldr	r3, [pc, #700]	; (94760 <cl_isouf_controller+0x324>)
   944a2:	4798      	blx	r3
   944a4:	4603      	mov	r3, r0
   944a6:	461a      	mov	r2, r3
   944a8:	4bae      	ldr	r3, [pc, #696]	; (94764 <cl_isouf_controller+0x328>)
   944aa:	701a      	strb	r2, [r3, #0]
	
	
	switch(cl_isouf_event){
   944ac:	7efb      	ldrb	r3, [r7, #27]
   944ae:	3b10      	subs	r3, #16
   944b0:	2b4c      	cmp	r3, #76	; 0x4c
   944b2:	f200 8193 	bhi.w	947dc <cl_isouf_controller+0x3a0>
   944b6:	a201      	add	r2, pc, #4	; (adr r2, 944bc <cl_isouf_controller+0x80>)
   944b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   944bc:	000946cd 	.word	0x000946cd
   944c0:	00094699 	.word	0x00094699
   944c4:	000946b3 	.word	0x000946b3
   944c8:	000945fb 	.word	0x000945fb
   944cc:	00094633 	.word	0x00094633
   944d0:	0009468f 	.word	0x0009468f
   944d4:	000947dd 	.word	0x000947dd
   944d8:	000947dd 	.word	0x000947dd
   944dc:	000947dd 	.word	0x000947dd
   944e0:	000947dd 	.word	0x000947dd
   944e4:	000947dd 	.word	0x000947dd
   944e8:	000945f1 	.word	0x000945f1
   944ec:	000947dd 	.word	0x000947dd
   944f0:	000947dd 	.word	0x000947dd
   944f4:	000947dd 	.word	0x000947dd
   944f8:	000947dd 	.word	0x000947dd
   944fc:	000947dd 	.word	0x000947dd
   94500:	000947dd 	.word	0x000947dd
   94504:	000947dd 	.word	0x000947dd
   94508:	000947dd 	.word	0x000947dd
   9450c:	000947dd 	.word	0x000947dd
   94510:	000947dd 	.word	0x000947dd
   94514:	000947dd 	.word	0x000947dd
   94518:	000947dd 	.word	0x000947dd
   9451c:	000947dd 	.word	0x000947dd
   94520:	000947dd 	.word	0x000947dd
   94524:	000947dd 	.word	0x000947dd
   94528:	000947dd 	.word	0x000947dd
   9452c:	000947dd 	.word	0x000947dd
   94530:	000947dd 	.word	0x000947dd
   94534:	000947dd 	.word	0x000947dd
   94538:	000947dd 	.word	0x000947dd
   9453c:	000947dd 	.word	0x000947dd
   94540:	000947dd 	.word	0x000947dd
   94544:	000947dd 	.word	0x000947dd
   94548:	000947dd 	.word	0x000947dd
   9454c:	000947dd 	.word	0x000947dd
   94550:	000947dd 	.word	0x000947dd
   94554:	000947dd 	.word	0x000947dd
   94558:	000947dd 	.word	0x000947dd
   9455c:	000947dd 	.word	0x000947dd
   94560:	000947dd 	.word	0x000947dd
   94564:	000947dd 	.word	0x000947dd
   94568:	000947dd 	.word	0x000947dd
   9456c:	000947dd 	.word	0x000947dd
   94570:	000947dd 	.word	0x000947dd
   94574:	000947dd 	.word	0x000947dd
   94578:	000947dd 	.word	0x000947dd
   9457c:	000947dd 	.word	0x000947dd
   94580:	000947dd 	.word	0x000947dd
   94584:	000947dd 	.word	0x000947dd
   94588:	000947dd 	.word	0x000947dd
   9458c:	000947dd 	.word	0x000947dd
   94590:	000947dd 	.word	0x000947dd
   94594:	000947dd 	.word	0x000947dd
   94598:	000947dd 	.word	0x000947dd
   9459c:	000947dd 	.word	0x000947dd
   945a0:	000947dd 	.word	0x000947dd
   945a4:	000947dd 	.word	0x000947dd
   945a8:	000947dd 	.word	0x000947dd
   945ac:	000947dd 	.word	0x000947dd
   945b0:	000947dd 	.word	0x000947dd
   945b4:	000947dd 	.word	0x000947dd
   945b8:	000947dd 	.word	0x000947dd
   945bc:	000947dd 	.word	0x000947dd
   945c0:	000947dd 	.word	0x000947dd
   945c4:	000947dd 	.word	0x000947dd
   945c8:	000947dd 	.word	0x000947dd
   945cc:	000947dd 	.word	0x000947dd
   945d0:	000947dd 	.word	0x000947dd
   945d4:	000947dd 	.word	0x000947dd
   945d8:	000947dd 	.word	0x000947dd
   945dc:	000947dd 	.word	0x000947dd
   945e0:	000947dd 	.word	0x000947dd
   945e4:	000947dd 	.word	0x000947dd
   945e8:	00094703 	.word	0x00094703
   945ec:	00094781 	.word	0x00094781
		
		case EVENT_ISOUF_HEAPARIN_BOLUS:
		cl_hep_controller(CL_HEP_EVENT_STARTBOLUS,0);
   945f0:	2007      	movs	r0, #7
   945f2:	2100      	movs	r1, #0
   945f4:	4b5c      	ldr	r3, [pc, #368]	; (94768 <cl_isouf_controller+0x32c>)
   945f6:	4798      	blx	r3
		break;
   945f8:	e0f1      	b.n	947de <cl_isouf_controller+0x3a2>
		
		
		case EVENT_ISOUF_HEP_RATE:
		if(Cl_ConsoleRxMsg.msgready == true)
   945fa:	4b5c      	ldr	r3, [pc, #368]	; (9476c <cl_isouf_controller+0x330>)
   945fc:	7e1b      	ldrb	r3, [r3, #24]
   945fe:	2b00      	cmp	r3, #0
   94600:	d016      	beq.n	94630 <cl_isouf_controller+0x1f4>
		{
			
			cl_Datastreamtype cl_temp  ;
			cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   94602:	4b5a      	ldr	r3, [pc, #360]	; (9476c <cl_isouf_controller+0x330>)
   94604:	791b      	ldrb	r3, [r3, #4]
   94606:	753b      	strb	r3, [r7, #20]
			cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[1];
   94608:	4b58      	ldr	r3, [pc, #352]	; (9476c <cl_isouf_controller+0x330>)
   9460a:	795b      	ldrb	r3, [r3, #5]
   9460c:	757b      	strb	r3, [r7, #21]
			cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[2];
   9460e:	4b57      	ldr	r3, [pc, #348]	; (9476c <cl_isouf_controller+0x330>)
   94610:	799b      	ldrb	r3, [r3, #6]
   94612:	75bb      	strb	r3, [r7, #22]
			cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
   94614:	4b55      	ldr	r3, [pc, #340]	; (9476c <cl_isouf_controller+0x330>)
   94616:	79db      	ldrb	r3, [r3, #7]
   94618:	75fb      	strb	r3, [r7, #23]
			Treatdata[ID_heprate] = cl_temp.Twobyte;
   9461a:	8abb      	ldrh	r3, [r7, #20]
   9461c:	461a      	mov	r2, r3
   9461e:	4b54      	ldr	r3, [pc, #336]	; (94770 <cl_isouf_controller+0x334>)
   94620:	61da      	str	r2, [r3, #28]
			//	hep_calibration(Treatdata[ID_heprate]);
			cl_hep_controller(CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE,Treatdata[ID_heprate]);
   94622:	4b53      	ldr	r3, [pc, #332]	; (94770 <cl_isouf_controller+0x334>)
   94624:	69db      	ldr	r3, [r3, #28]
   94626:	2006      	movs	r0, #6
   94628:	4619      	mov	r1, r3
   9462a:	4b4f      	ldr	r3, [pc, #316]	; (94768 <cl_isouf_controller+0x32c>)
   9462c:	4798      	blx	r3
		}
		break;
   9462e:	e0d6      	b.n	947de <cl_isouf_controller+0x3a2>
   94630:	e0d5      	b.n	947de <cl_isouf_controller+0x3a2>
		case EVENT_ISOUF_HEP_ON:
		
		if(Cl_ConsoleRxMsg.msgready == true)
   94632:	4b4e      	ldr	r3, [pc, #312]	; (9476c <cl_isouf_controller+0x330>)
   94634:	7e1b      	ldrb	r3, [r3, #24]
   94636:	2b00      	cmp	r3, #0
   94638:	d028      	beq.n	9468c <cl_isouf_controller+0x250>
		
		{
			cl_Datastreamtype cl_temp  ;
			cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[1];
   9463a:	4b4c      	ldr	r3, [pc, #304]	; (9476c <cl_isouf_controller+0x330>)
   9463c:	795b      	ldrb	r3, [r3, #5]
   9463e:	743b      	strb	r3, [r7, #16]
			cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[2];
   94640:	4b4a      	ldr	r3, [pc, #296]	; (9476c <cl_isouf_controller+0x330>)
   94642:	799b      	ldrb	r3, [r3, #6]
   94644:	747b      	strb	r3, [r7, #17]
			cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[3];
   94646:	4b49      	ldr	r3, [pc, #292]	; (9476c <cl_isouf_controller+0x330>)
   94648:	79db      	ldrb	r3, [r3, #7]
   9464a:	74bb      	strb	r3, [r7, #18]
			cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[4];
   9464c:	4b47      	ldr	r3, [pc, #284]	; (9476c <cl_isouf_controller+0x330>)
   9464e:	7a1b      	ldrb	r3, [r3, #8]
   94650:	74fb      	strb	r3, [r7, #19]
			
			if(Cl_ConsoleRxMsg.data.byte[0] == 1)
   94652:	4b46      	ldr	r3, [pc, #280]	; (9476c <cl_isouf_controller+0x330>)
   94654:	791b      	ldrb	r3, [r3, #4]
   94656:	2b01      	cmp	r3, #1
   94658:	d104      	bne.n	94664 <cl_isouf_controller+0x228>
			{
				cl_hep_controller(CL_HEP_EVENT_GO_TO_LEFTEND,0);
   9465a:	2001      	movs	r0, #1
   9465c:	2100      	movs	r1, #0
   9465e:	4b42      	ldr	r3, [pc, #264]	; (94768 <cl_isouf_controller+0x32c>)
   94660:	4798      	blx	r3
   94662:	e013      	b.n	9468c <cl_isouf_controller+0x250>
				
			}
			else if(Cl_ConsoleRxMsg.data.byte[0] == 2)
   94664:	4b41      	ldr	r3, [pc, #260]	; (9476c <cl_isouf_controller+0x330>)
   94666:	791b      	ldrb	r3, [r3, #4]
   94668:	2b02      	cmp	r3, #2
   9466a:	d104      	bne.n	94676 <cl_isouf_controller+0x23a>
			{
				cl_hep_controller(CL_HEP_EVENT_GO_TO_RIGHTEND,0);
   9466c:	2004      	movs	r0, #4
   9466e:	2100      	movs	r1, #0
   94670:	4b3d      	ldr	r3, [pc, #244]	; (94768 <cl_isouf_controller+0x32c>)
   94672:	4798      	blx	r3
   94674:	e00a      	b.n	9468c <cl_isouf_controller+0x250>
			}
			else if(Cl_ConsoleRxMsg.data.byte[0] == 0)
   94676:	4b3d      	ldr	r3, [pc, #244]	; (9476c <cl_isouf_controller+0x330>)
   94678:	791b      	ldrb	r3, [r3, #4]
   9467a:	2b00      	cmp	r3, #0
   9467c:	d106      	bne.n	9468c <cl_isouf_controller+0x250>
			{
				cl_hep_controller(CL_HEP_EVENT_START_NORMAL_DELIVERY,Treatdata[ID_heprate]);
   9467e:	4b3c      	ldr	r3, [pc, #240]	; (94770 <cl_isouf_controller+0x334>)
   94680:	69db      	ldr	r3, [r3, #28]
   94682:	200a      	movs	r0, #10
   94684:	4619      	mov	r1, r3
   94686:	4b38      	ldr	r3, [pc, #224]	; (94768 <cl_isouf_controller+0x32c>)
   94688:	4798      	blx	r3
			}
			
		}
		
		
		break;
   9468a:	e0a8      	b.n	947de <cl_isouf_controller+0x3a2>
   9468c:	e0a7      	b.n	947de <cl_isouf_controller+0x3a2>
		case EVENT_ISOUF_HEP_OFF:
		cl_hep_controller(CL_HEP_EVENT_STOPBOLUS,0);
   9468e:	2009      	movs	r0, #9
   94690:	2100      	movs	r1, #0
   94692:	4b35      	ldr	r3, [pc, #212]	; (94768 <cl_isouf_controller+0x32c>)
   94694:	4798      	blx	r3
		break;
   94696:	e0a2      	b.n	947de <cl_isouf_controller+0x3a2>
		case EVENT_ISOUF_COMMAND_SET_BLDPMP_ON:
		cl_bp_controller(CL_BP_EVENT_START,0);
   94698:	2002      	movs	r0, #2
   9469a:	2100      	movs	r1, #0
   9469c:	4b35      	ldr	r3, [pc, #212]	; (94774 <cl_isouf_controller+0x338>)
   9469e:	4798      	blx	r3
		cl_isouf_retcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true);
   946a0:	2001      	movs	r0, #1
   946a2:	2101      	movs	r1, #1
   946a4:	4b34      	ldr	r3, [pc, #208]	; (94778 <cl_isouf_controller+0x33c>)
   946a6:	4798      	blx	r3
   946a8:	4603      	mov	r3, r0
   946aa:	461a      	mov	r2, r3
   946ac:	4b2d      	ldr	r3, [pc, #180]	; (94764 <cl_isouf_controller+0x328>)
   946ae:	701a      	strb	r2, [r3, #0]
		break;
   946b0:	e095      	b.n	947de <cl_isouf_controller+0x3a2>
		case EVENT_ISOUF_COMMAND_SET_BLDPMP_OFF:
		cl_bp_controller(CL_BP_EVENT_STOP,0);
   946b2:	2004      	movs	r0, #4
   946b4:	2100      	movs	r1, #0
   946b6:	4b2f      	ldr	r3, [pc, #188]	; (94774 <cl_isouf_controller+0x338>)
   946b8:	4798      	blx	r3
		cl_isouf_retcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,false);
   946ba:	2001      	movs	r0, #1
   946bc:	2100      	movs	r1, #0
   946be:	4b2e      	ldr	r3, [pc, #184]	; (94778 <cl_isouf_controller+0x33c>)
   946c0:	4798      	blx	r3
   946c2:	4603      	mov	r3, r0
   946c4:	461a      	mov	r2, r3
   946c6:	4b27      	ldr	r3, [pc, #156]	; (94764 <cl_isouf_controller+0x328>)
   946c8:	701a      	strb	r2, [r3, #0]
		break;
   946ca:	e088      	b.n	947de <cl_isouf_controller+0x3a2>
		case EVENT_ISOUF_COMMAND_SET_BLDPUMPRATE:
		if(Cl_ConsoleRxMsg.msgready == true)
   946cc:	4b27      	ldr	r3, [pc, #156]	; (9476c <cl_isouf_controller+0x330>)
   946ce:	7e1b      	ldrb	r3, [r3, #24]
   946d0:	2b00      	cmp	r3, #0
   946d2:	d015      	beq.n	94700 <cl_isouf_controller+0x2c4>
		{
			
			cl_Datastreamtype cl_temp  ;
			cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   946d4:	4b25      	ldr	r3, [pc, #148]	; (9476c <cl_isouf_controller+0x330>)
   946d6:	791b      	ldrb	r3, [r3, #4]
   946d8:	733b      	strb	r3, [r7, #12]
			cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[1];
   946da:	4b24      	ldr	r3, [pc, #144]	; (9476c <cl_isouf_controller+0x330>)
   946dc:	795b      	ldrb	r3, [r3, #5]
   946de:	737b      	strb	r3, [r7, #13]
			cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[2];
   946e0:	4b22      	ldr	r3, [pc, #136]	; (9476c <cl_isouf_controller+0x330>)
   946e2:	799b      	ldrb	r3, [r3, #6]
   946e4:	73bb      	strb	r3, [r7, #14]
			cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
   946e6:	4b21      	ldr	r3, [pc, #132]	; (9476c <cl_isouf_controller+0x330>)
   946e8:	79db      	ldrb	r3, [r3, #7]
   946ea:	73fb      	strb	r3, [r7, #15]
			cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,cl_temp.Twobyte);
   946ec:	89bb      	ldrh	r3, [r7, #12]
   946ee:	2001      	movs	r0, #1
   946f0:	4619      	mov	r1, r3
   946f2:	4b20      	ldr	r3, [pc, #128]	; (94774 <cl_isouf_controller+0x338>)
   946f4:	4798      	blx	r3
			Treatdata[ID_bloodratetreat] = cl_temp.Twobyte;
   946f6:	89bb      	ldrh	r3, [r7, #12]
   946f8:	461a      	mov	r2, r3
   946fa:	4b1d      	ldr	r3, [pc, #116]	; (94770 <cl_isouf_controller+0x334>)
   946fc:	65da      	str	r2, [r3, #92]	; 0x5c
		}
		break;
   946fe:	e06e      	b.n	947de <cl_isouf_controller+0x3a2>
   94700:	e06d      	b.n	947de <cl_isouf_controller+0x3a2>
		
		case EVT_CONSOLE_COMMAND_SET_BLDPUMPINC_MANUAL:
		
		if(Treatdata[ID_bloodrate] <= 450){
   94702:	4b1b      	ldr	r3, [pc, #108]	; (94770 <cl_isouf_controller+0x334>)
   94704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   94706:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
   9470a:	d828      	bhi.n	9475e <cl_isouf_controller+0x322>
			
			Treatdata[ID_bloodrate] = Treatdata[ID_bloodrate] + 10;
   9470c:	4b18      	ldr	r3, [pc, #96]	; (94770 <cl_isouf_controller+0x334>)
   9470e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   94710:	330a      	adds	r3, #10
   94712:	4a17      	ldr	r2, [pc, #92]	; (94770 <cl_isouf_controller+0x334>)
   94714:	63d3      	str	r3, [r2, #60]	; 0x3c
			cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,Treatdata[ID_bloodrate]);
   94716:	4b16      	ldr	r3, [pc, #88]	; (94770 <cl_isouf_controller+0x334>)
   94718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   9471a:	2001      	movs	r0, #1
   9471c:	4619      	mov	r1, r3
   9471e:	4b15      	ldr	r3, [pc, #84]	; (94774 <cl_isouf_controller+0x338>)
   94720:	4798      	blx	r3
			
			// send blood rate data to console
			
			
			abfdataarray[0] = CON_RX_PARAM_DATA_ABF_RATE;
   94722:	230f      	movs	r3, #15
   94724:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			abfdata.fourbytedata = Treatdata[ID_bloodrate];
   94728:	4b11      	ldr	r3, [pc, #68]	; (94770 <cl_isouf_controller+0x334>)
   9472a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   9472c:	62fb      	str	r3, [r7, #44]	; 0x2c
			abfdataarray[1] = abfdata.bytedata[0];
   9472e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   94732:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			abfdataarray[2] = abfdata.bytedata[1];
   94736:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
   9473a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			abfdataarray[3] = abfdata.bytedata[2];
   9473e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
   94742:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			abfdataarray[4] = abfdata.bytedata[3];
   94746:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   9474a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			
			Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&abfdataarray,5);
   9474e:	f107 0324 	add.w	r3, r7, #36	; 0x24
   94752:	202a      	movs	r0, #42	; 0x2a
   94754:	4619      	mov	r1, r3
   94756:	2205      	movs	r2, #5
   94758:	4b08      	ldr	r3, [pc, #32]	; (9477c <cl_isouf_controller+0x340>)
   9475a:	4798      	blx	r3
			
		}
		
		cl_isouf_event == EVENT_ISOUF_NULL_EVENT;
		break;
   9475c:	e03f      	b.n	947de <cl_isouf_controller+0x3a2>
   9475e:	e03e      	b.n	947de <cl_isouf_controller+0x3a2>
   94760:	00095ad5 	.word	0x00095ad5
   94764:	20071af6 	.word	0x20071af6
   94768:	00093a0d 	.word	0x00093a0d
   9476c:	200723f0 	.word	0x200723f0
   94770:	2007265c 	.word	0x2007265c
   94774:	00093305 	.word	0x00093305
   94778:	00082e61 	.word	0x00082e61
   9477c:	0009ba51 	.word	0x0009ba51
		
		case EVT_CONSOLE_COMMAND_SET_BLDPUMPDEC_MANUAL:
		
		if(Treatdata[ID_bloodrate] >= 100){
   94780:	4b8b      	ldr	r3, [pc, #556]	; (949b0 <cl_isouf_controller+0x574>)
   94782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   94784:	2b63      	cmp	r3, #99	; 0x63
   94786:	d928      	bls.n	947da <cl_isouf_controller+0x39e>
			
			Treatdata[ID_bloodrate] = Treatdata[ID_bloodrate] - 10;
   94788:	4b89      	ldr	r3, [pc, #548]	; (949b0 <cl_isouf_controller+0x574>)
   9478a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   9478c:	3b0a      	subs	r3, #10
   9478e:	4a88      	ldr	r2, [pc, #544]	; (949b0 <cl_isouf_controller+0x574>)
   94790:	63d3      	str	r3, [r2, #60]	; 0x3c
			cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,Treatdata[ID_bloodrate]);
   94792:	4b87      	ldr	r3, [pc, #540]	; (949b0 <cl_isouf_controller+0x574>)
   94794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   94796:	2001      	movs	r0, #1
   94798:	4619      	mov	r1, r3
   9479a:	4b86      	ldr	r3, [pc, #536]	; (949b4 <cl_isouf_controller+0x578>)
   9479c:	4798      	blx	r3
			
			
			abfdataarray[0] = CON_RX_PARAM_DATA_ABF_RATE;
   9479e:	230f      	movs	r3, #15
   947a0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			abfdata.fourbytedata = Treatdata[ID_bloodrate];
   947a4:	4b82      	ldr	r3, [pc, #520]	; (949b0 <cl_isouf_controller+0x574>)
   947a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   947a8:	62fb      	str	r3, [r7, #44]	; 0x2c
			abfdataarray[1] = abfdata.bytedata[0];
   947aa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   947ae:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			abfdataarray[2] = abfdata.bytedata[1];
   947b2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
   947b6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			abfdataarray[3] = abfdata.bytedata[2];
   947ba:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
   947be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			abfdataarray[4] = abfdata.bytedata[3];
   947c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   947c6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			
			Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&abfdataarray,5);
   947ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
   947ce:	202a      	movs	r0, #42	; 0x2a
   947d0:	4619      	mov	r1, r3
   947d2:	2205      	movs	r2, #5
   947d4:	4b78      	ldr	r3, [pc, #480]	; (949b8 <cl_isouf_controller+0x57c>)
   947d6:	4798      	blx	r3
		}
		
		cl_isouf_event == EVENT_ISOUF_NULL_EVENT;
		break;
   947d8:	e001      	b.n	947de <cl_isouf_controller+0x3a2>
   947da:	e000      	b.n	947de <cl_isouf_controller+0x3a2>
		
		
		default : break;
   947dc:	bf00      	nop
	}
	
	
	switch(cl_isouf_state)
   947de:	4b77      	ldr	r3, [pc, #476]	; (949bc <cl_isouf_controller+0x580>)
   947e0:	781b      	ldrb	r3, [r3, #0]
   947e2:	2b08      	cmp	r3, #8
   947e4:	f200 80de 	bhi.w	949a4 <cl_isouf_controller+0x568>
   947e8:	a201      	add	r2, pc, #4	; (adr r2, 947f0 <cl_isouf_controller+0x3b4>)
   947ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   947ee:	bf00      	nop
   947f0:	00094815 	.word	0x00094815
   947f4:	00094833 	.word	0x00094833
   947f8:	0009494f 	.word	0x0009494f
   947fc:	000949a5 	.word	0x000949a5
   94800:	0009496d 	.word	0x0009496d
   94804:	000949a5 	.word	0x000949a5
   94808:	000949a5 	.word	0x000949a5
   9480c:	00094991 	.word	0x00094991
   94810:	00094921 	.word	0x00094921
	{
			case CL_ISOUF_STATE_IDLE:
			switch (cl_isouf_event)
   94814:	7efb      	ldrb	r3, [r7, #27]
   94816:	2b16      	cmp	r3, #22
   94818:	d000      	beq.n	9481c <cl_isouf_controller+0x3e0>
					ufRemoved = 0;
					Cl_Isouf_start();
				
					cl_isouf_state = CL_ISOUF_STATE_STARTED;
					break;
					default: break;
   9481a:	e009      	b.n	94830 <cl_isouf_controller+0x3f4>
				
				{
					case EVENT_ISOUF_START:
					
					//cl_dialysate_ready_isouf();
					ufRemoved = 0;
   9481c:	4b68      	ldr	r3, [pc, #416]	; (949c0 <cl_isouf_controller+0x584>)
   9481e:	f04f 0200 	mov.w	r2, #0
   94822:	601a      	str	r2, [r3, #0]
					Cl_Isouf_start();
   94824:	4b67      	ldr	r3, [pc, #412]	; (949c4 <cl_isouf_controller+0x588>)
   94826:	4798      	blx	r3
				
					cl_isouf_state = CL_ISOUF_STATE_STARTED;
   94828:	4b64      	ldr	r3, [pc, #400]	; (949bc <cl_isouf_controller+0x580>)
   9482a:	2201      	movs	r2, #1
   9482c:	701a      	strb	r2, [r3, #0]
					break;
   9482e:	bf00      	nop
					default: break;
				}
				break;
   94830:	e0b9      	b.n	949a6 <cl_isouf_controller+0x56a>
				
					
			case CL_ISOUF_STATE_STARTED:
			
			switch(cl_isouf_event){
   94832:	7efb      	ldrb	r3, [r7, #27]
   94834:	3b08      	subs	r3, #8
   94836:	2b10      	cmp	r3, #16
   94838:	d870      	bhi.n	9491c <cl_isouf_controller+0x4e0>
   9483a:	a201      	add	r2, pc, #4	; (adr r2, 94840 <cl_isouf_controller+0x404>)
   9483c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   94840:	00094885 	.word	0x00094885
   94844:	000948a3 	.word	0x000948a3
   94848:	0009488b 	.word	0x0009488b
   9484c:	0009491d 	.word	0x0009491d
   94850:	00094895 	.word	0x00094895
   94854:	0009491d 	.word	0x0009491d
   94858:	0009491d 	.word	0x0009491d
   9485c:	0009491d 	.word	0x0009491d
   94860:	0009491d 	.word	0x0009491d
   94864:	0009491d 	.word	0x0009491d
   94868:	0009491d 	.word	0x0009491d
   9486c:	0009491d 	.word	0x0009491d
   94870:	0009491d 	.word	0x0009491d
   94874:	0009491d 	.word	0x0009491d
   94878:	0009491d 	.word	0x0009491d
   9487c:	0009491d 	.word	0x0009491d
   94880:	00094917 	.word	0x00094917
// 				cl_hep_controller(CL_HEP_EVENT_STOP_NORMAL_DELIVERY,0);
// 				break;
				
				case EVENT_ISOUF_TICK_500MS :
				
					cl_isouf_retcode == cl_checkforblooddetection();
   94884:	4b50      	ldr	r3, [pc, #320]	; (949c8 <cl_isouf_controller+0x58c>)
   94886:	4798      	blx	r3
				
				break;
   94888:	e049      	b.n	9491e <cl_isouf_controller+0x4e2>
				
				case EVENT_ISOUF_TICK_MINUTE:
				
				//isoufRemoved =  isoufRemoved + (Treatdata[ID_ufrate]/10);
				
				cl_uf_controller(CL_UF_EVENT_MINUTE,0);
   9488a:	200a      	movs	r0, #10
   9488c:	2100      	movs	r1, #0
   9488e:	4b4f      	ldr	r3, [pc, #316]	; (949cc <cl_isouf_controller+0x590>)
   94890:	4798      	blx	r3
			break;
   94892:	e044      	b.n	9491e <cl_isouf_controller+0x4e2>
			
			case EVENT_ISOUF_ALARM:
			cl_isouf_retcode = Cl_Isouf_ProcessAlarms();
   94894:	4b4e      	ldr	r3, [pc, #312]	; (949d0 <cl_isouf_controller+0x594>)
   94896:	4798      	blx	r3
   94898:	4603      	mov	r3, r0
   9489a:	461a      	mov	r2, r3
   9489c:	4b4d      	ldr	r3, [pc, #308]	; (949d4 <cl_isouf_controller+0x598>)
   9489e:	701a      	strb	r2, [r3, #0]
				break;
   948a0:	e03d      	b.n	9491e <cl_isouf_controller+0x4e2>
				case EVENT_ISOUF_TICK_SECOND :
				
					Cl_ISOufTotalSecondscounter ++ ;
   948a2:	4b4d      	ldr	r3, [pc, #308]	; (949d8 <cl_isouf_controller+0x59c>)
   948a4:	681b      	ldr	r3, [r3, #0]
   948a6:	3301      	adds	r3, #1
   948a8:	4a4b      	ldr	r2, [pc, #300]	; (949d8 <cl_isouf_controller+0x59c>)
   948aa:	6013      	str	r3, [r2, #0]
				
					if(cl_isouf_retcode == CL_OK){
   948ac:	4b49      	ldr	r3, [pc, #292]	; (949d4 <cl_isouf_controller+0x598>)
   948ae:	781b      	ldrb	r3, [r3, #0]
   948b0:	2b00      	cmp	r3, #0
   948b2:	d12f      	bne.n	94914 <cl_isouf_controller+0x4d8>
					
					// check for completion
					//cl_sendisoufdata();
					
						Cl_Iso_Senddata();
   948b4:	4b49      	ldr	r3, [pc, #292]	; (949dc <cl_isouf_controller+0x5a0>)
   948b6:	4798      	blx	r3
						if(Cl_ISOufTotalSecondscounter >= Treatdata[ID_treattime]){
   948b8:	4b47      	ldr	r3, [pc, #284]	; (949d8 <cl_isouf_controller+0x59c>)
   948ba:	681b      	ldr	r3, [r3, #0]
   948bc:	461a      	mov	r2, r3
   948be:	4b3c      	ldr	r3, [pc, #240]	; (949b0 <cl_isouf_controller+0x574>)
   948c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   948c2:	429a      	cmp	r2, r3
   948c4:	d326      	bcc.n	94914 <cl_isouf_controller+0x4d8>
						
						// complete
						cl_isouf_retcode == cl_isoufcompleted();
   948c6:	4b46      	ldr	r3, [pc, #280]	; (949e0 <cl_isouf_controller+0x5a4>)
   948c8:	4798      	blx	r3
						if(cl_isouf_retcode == CL_OK){
   948ca:	4b42      	ldr	r3, [pc, #264]	; (949d4 <cl_isouf_controller+0x598>)
   948cc:	781b      	ldrb	r3, [r3, #0]
   948ce:	2b00      	cmp	r3, #0
   948d0:	d120      	bne.n	94914 <cl_isouf_controller+0x4d8>
							
												
							cl_isouf_state = CL_ISOUF_STATE_COMPLETED;
   948d2:	4b3a      	ldr	r3, [pc, #232]	; (949bc <cl_isouf_controller+0x580>)
   948d4:	2204      	movs	r2, #4
   948d6:	701a      	strb	r2, [r3, #0]
							isouf = false;
   948d8:	4b42      	ldr	r3, [pc, #264]	; (949e4 <cl_isouf_controller+0x5a8>)
   948da:	2200      	movs	r2, #0
   948dc:	701a      	strb	r2, [r3, #0]
							command = CON_TX_COMMAND_COMMAND_ISOUF_COMPLETED;
   948de:	234a      	movs	r3, #74	; 0x4a
   948e0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
							data = (Cl_Uint8Type)COMMAND_RESULT_SUCCESS;
   948e4:	2301      	movs	r3, #1
   948e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
							cl_isouf_retcode = Cl_SendDatatoconsole(command,&data,1);
   948ea:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
   948ee:	f107 0323 	add.w	r3, r7, #35	; 0x23
   948f2:	4610      	mov	r0, r2
   948f4:	4619      	mov	r1, r3
   948f6:	2201      	movs	r2, #1
   948f8:	4b2f      	ldr	r3, [pc, #188]	; (949b8 <cl_isouf_controller+0x57c>)
   948fa:	4798      	blx	r3
   948fc:	4603      	mov	r3, r0
   948fe:	461a      	mov	r2, r3
   94900:	4b34      	ldr	r3, [pc, #208]	; (949d4 <cl_isouf_controller+0x598>)
   94902:	701a      	strb	r2, [r3, #0]
							cl_isouf_retcode = Cl_mac_apprequesthandler(MACREQ_ISOUF_COMPLETED);
   94904:	205a      	movs	r0, #90	; 0x5a
   94906:	4b38      	ldr	r3, [pc, #224]	; (949e8 <cl_isouf_controller+0x5ac>)
   94908:	4798      	blx	r3
   9490a:	4603      	mov	r3, r0
   9490c:	461a      	mov	r2, r3
   9490e:	4b31      	ldr	r3, [pc, #196]	; (949d4 <cl_isouf_controller+0x598>)
   94910:	701a      	strb	r2, [r3, #0]
				}	
				else{
					// raise alarm
				}
				
				break;
   94912:	e004      	b.n	9491e <cl_isouf_controller+0x4e2>
   94914:	e003      	b.n	9491e <cl_isouf_controller+0x4e2>
				
				
				case EVENT_ISOUF_STOP :
				
					Cl_Isouf_stop();
   94916:	4b35      	ldr	r3, [pc, #212]	; (949ec <cl_isouf_controller+0x5b0>)
   94918:	4798      	blx	r3
				// stop uf pump
					
				
				break;
   9491a:	e000      	b.n	9491e <cl_isouf_controller+0x4e2>
				// implement iso uf stop state
				// implement bp on event
				// implement bp off event  , iso uf should stop
				
				
				default: break;
   9491c:	bf00      	nop
				
			}
			
			break;
   9491e:	e042      	b.n	949a6 <cl_isouf_controller+0x56a>
			
			case CL_ISOUF_STATE_CRITICAL_ALARM:
			
			switch(cl_isouf_event){
   94920:	7efb      	ldrb	r3, [r7, #27]
   94922:	2b01      	cmp	r3, #1
   94924:	d008      	beq.n	94938 <cl_isouf_controller+0x4fc>
   94926:	2b16      	cmp	r3, #22
   94928:	d000      	beq.n	9492c <cl_isouf_controller+0x4f0>
				Cl_Isouf_start();
				cl_isouf_state = CL_ISOUF_STATE_STARTED;
				break;
				
				
				default: break;
   9492a:	e00f      	b.n	9494c <cl_isouf_controller+0x510>
				
				case EVENT_ISOUF_START:
				
				//Cl_ISOufTotalSecondscounter = 0;
				//	cl_dialysate_ready_isouf();
				Cl_Isouf_start();
   9492c:	4b25      	ldr	r3, [pc, #148]	; (949c4 <cl_isouf_controller+0x588>)
   9492e:	4798      	blx	r3
				cl_isouf_state = CL_ISOUF_STATE_STARTED;
   94930:	4b22      	ldr	r3, [pc, #136]	; (949bc <cl_isouf_controller+0x580>)
   94932:	2201      	movs	r2, #1
   94934:	701a      	strb	r2, [r3, #0]
				break;
   94936:	e009      	b.n	9494c <cl_isouf_controller+0x510>
				
				case EVENT_ISOUF_CLR_ALARM:
				
				//Cl_ISOufTotalSecondscounter = 0;
				//	cl_dialysate_ready_isouf();
				Cl_Isouf_ResetAlertsforReassertion();
   94938:	4b2d      	ldr	r3, [pc, #180]	; (949f0 <cl_isouf_controller+0x5b4>)
   9493a:	4798      	blx	r3
				sv_cntrl_activatevenousclamp();
   9493c:	4b2d      	ldr	r3, [pc, #180]	; (949f4 <cl_isouf_controller+0x5b8>)
   9493e:	4798      	blx	r3
				Cl_Isouf_start();
   94940:	4b20      	ldr	r3, [pc, #128]	; (949c4 <cl_isouf_controller+0x588>)
   94942:	4798      	blx	r3
				cl_isouf_state = CL_ISOUF_STATE_STARTED;
   94944:	4b1d      	ldr	r3, [pc, #116]	; (949bc <cl_isouf_controller+0x580>)
   94946:	2201      	movs	r2, #1
   94948:	701a      	strb	r2, [r3, #0]
				break;
   9494a:	bf00      	nop
				
				
				default: break;
			}
			
			break;
   9494c:	e02b      	b.n	949a6 <cl_isouf_controller+0x56a>
			
			case CL_ISOUF_STATE_STOPPED:
			
				switch(cl_isouf_event){
   9494e:	7efb      	ldrb	r3, [r7, #27]
   94950:	2b16      	cmp	r3, #22
   94952:	d000      	beq.n	94956 <cl_isouf_controller+0x51a>
				ufRemoved = 0;
					Cl_Isouf_start();
					cl_isouf_state = CL_ISOUF_STATE_STARTED;
				break;
					
				default: break;	
   94954:	e009      	b.n	9496a <cl_isouf_controller+0x52e>
					
					case EVENT_ISOUF_START:
				
				//Cl_ISOufTotalSecondscounter = 0;
				//	cl_dialysate_ready_isouf();
				ufRemoved = 0;
   94956:	4b1a      	ldr	r3, [pc, #104]	; (949c0 <cl_isouf_controller+0x584>)
   94958:	f04f 0200 	mov.w	r2, #0
   9495c:	601a      	str	r2, [r3, #0]
					Cl_Isouf_start();
   9495e:	4b19      	ldr	r3, [pc, #100]	; (949c4 <cl_isouf_controller+0x588>)
   94960:	4798      	blx	r3
					cl_isouf_state = CL_ISOUF_STATE_STARTED;
   94962:	4b16      	ldr	r3, [pc, #88]	; (949bc <cl_isouf_controller+0x580>)
   94964:	2201      	movs	r2, #1
   94966:	701a      	strb	r2, [r3, #0]
				break;
   94968:	bf00      	nop
				default: break;	
					
					
				}
			
			break;
   9496a:	e01c      	b.n	949a6 <cl_isouf_controller+0x56a>
			
			case CL_ISOUF_STATE_COMPLETED:
			switch(cl_isouf_event){
   9496c:	7efb      	ldrb	r3, [r7, #27]
   9496e:	2b09      	cmp	r3, #9
   94970:	d00c      	beq.n	9498c <cl_isouf_controller+0x550>
   94972:	2b16      	cmp	r3, #22
   94974:	d000      	beq.n	94978 <cl_isouf_controller+0x53c>
					ufRemoved = 0;
					Cl_Isouf_start();
					cl_isouf_state = CL_ISOUF_STATE_STARTED;
				break;
			
			default : break;	
   94976:	e00a      	b.n	9498e <cl_isouf_controller+0x552>
				
				case EVENT_ISOUF_START:
				
				//Cl_ISOufTotalSecondscounter = 0;
					//cl_dialysate_ready_isouf();
					ufRemoved = 0;
   94978:	4b11      	ldr	r3, [pc, #68]	; (949c0 <cl_isouf_controller+0x584>)
   9497a:	f04f 0200 	mov.w	r2, #0
   9497e:	601a      	str	r2, [r3, #0]
					Cl_Isouf_start();
   94980:	4b10      	ldr	r3, [pc, #64]	; (949c4 <cl_isouf_controller+0x588>)
   94982:	4798      	blx	r3
					cl_isouf_state = CL_ISOUF_STATE_STARTED;
   94984:	4b0d      	ldr	r3, [pc, #52]	; (949bc <cl_isouf_controller+0x580>)
   94986:	2201      	movs	r2, #1
   94988:	701a      	strb	r2, [r3, #0]
				break;
   9498a:	e000      	b.n	9498e <cl_isouf_controller+0x552>
			case CL_ISOUF_STATE_COMPLETED:
			switch(cl_isouf_event){
				
				case EVENT_ISOUF_TICK_SECOND :
				
				break;
   9498c:	bf00      	nop
				break;
			
			default : break;	
			
			}
			break;
   9498e:	e00a      	b.n	949a6 <cl_isouf_controller+0x56a>
			
			case CL_ISOUF_STATE_POST_COMPLETION:
			
			switch(cl_isouf_event){
   94990:	7efb      	ldrb	r3, [r7, #27]
   94992:	2b09      	cmp	r3, #9
   94994:	d002      	beq.n	9499c <cl_isouf_controller+0x560>
   94996:	2b0e      	cmp	r3, #14
   94998:	d002      	beq.n	949a0 <cl_isouf_controller+0x564>
				
				break;
				
				
				
				default:break;
   9499a:	e002      	b.n	949a2 <cl_isouf_controller+0x566>
			
			switch(cl_isouf_event){
				
				case EVENT_ISOUF_TICK_SECOND :
				
				break;
   9499c:	bf00      	nop
   9499e:	e002      	b.n	949a6 <cl_isouf_controller+0x56a>
				
				case EVENT_ISOUF_START_RETURN:
				
				break;
   949a0:	bf00      	nop
				
				
				default:break;
			}
			
			break;
   949a2:	e000      	b.n	949a6 <cl_isouf_controller+0x56a>
			
			default:break;
   949a4:	bf00      	nop
			
			
	}
	return CL_OK;
   949a6:	2300      	movs	r3, #0
	
	
}
   949a8:	4618      	mov	r0, r3
   949aa:	3740      	adds	r7, #64	; 0x40
   949ac:	46bd      	mov	sp, r7
   949ae:	bd80      	pop	{r7, pc}
   949b0:	2007265c 	.word	0x2007265c
   949b4:	00093305 	.word	0x00093305
   949b8:	0009ba51 	.word	0x0009ba51
   949bc:	20071af5 	.word	0x20071af5
   949c0:	20071b24 	.word	0x20071b24
   949c4:	00094f75 	.word	0x00094f75
   949c8:	00095aa9 	.word	0x00095aa9
   949cc:	00095df5 	.word	0x00095df5
   949d0:	000949f9 	.word	0x000949f9
   949d4:	20071af6 	.word	0x20071af6
   949d8:	20071af8 	.word	0x20071af8
   949dc:	00095241 	.word	0x00095241
   949e0:	00095d49 	.word	0x00095d49
   949e4:	20071afc 	.word	0x20071afc
   949e8:	0008bc51 	.word	0x0008bc51
   949ec:	00094ef5 	.word	0x00094ef5
   949f0:	00094d65 	.word	0x00094d65
   949f4:	00099e19 	.word	0x00099e19

000949f8 <Cl_Isouf_ProcessAlarms>:




Cl_ReturnCodeType Cl_Isouf_ProcessAlarms()
{
   949f8:	b580      	push	{r7, lr}
   949fa:	b082      	sub	sp, #8
   949fc:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType 	Cl_isoufretcode = CL_OK;
   949fe:	2300      	movs	r3, #0
   94a00:	71fb      	strb	r3, [r7, #7]
	ClIsoufAlarmIdType  ClIsoufAlarmId;
	Cl_Uint8Type data;
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   94a02:	2351      	movs	r3, #81	; 0x51
   94a04:	71bb      	strb	r3, [r7, #6]
	Cl_NewAlarmIdType cl_alarmid;
	
	cl_isouf_retcode = Cl_Isouf_UpdateAlarmTable(&ClIsoufAlarmId);
   94a06:	1d7b      	adds	r3, r7, #5
   94a08:	4618      	mov	r0, r3
   94a0a:	4b06      	ldr	r3, [pc, #24]	; (94a24 <Cl_Isouf_ProcessAlarms+0x2c>)
   94a0c:	4798      	blx	r3
   94a0e:	4603      	mov	r3, r0
   94a10:	461a      	mov	r2, r3
   94a12:	4b05      	ldr	r3, [pc, #20]	; (94a28 <Cl_Isouf_ProcessAlarms+0x30>)
   94a14:	701a      	strb	r2, [r3, #0]
	//   	Cl_rinseretcode =	Cl_Alarm_GetLastAlarm(&cl_rinsealarmid);
	//   	data = (Cl_Uint8Type)cl_rinsealarmid;
	//   	command = CON_TX_COMMAND_ALARM;
	//   	Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,0);
	
	return (cl_isouf_retcode );
   94a16:	4b04      	ldr	r3, [pc, #16]	; (94a28 <Cl_Isouf_ProcessAlarms+0x30>)
   94a18:	781b      	ldrb	r3, [r3, #0]
	
}
   94a1a:	4618      	mov	r0, r3
   94a1c:	3708      	adds	r7, #8
   94a1e:	46bd      	mov	sp, r7
   94a20:	bd80      	pop	{r7, pc}
   94a22:	bf00      	nop
   94a24:	00094a2d 	.word	0x00094a2d
   94a28:	20071af6 	.word	0x20071af6

00094a2c <Cl_Isouf_UpdateAlarmTable>:

Cl_ReturnCodeType Cl_Isouf_UpdateAlarmTable(ClIsoufAlarmIdType *ClIsoufAlarmId)
{
   94a2c:	b580      	push	{r7, lr}
   94a2e:	b084      	sub	sp, #16
   94a30:	af00      	add	r7, sp, #0
   94a32:	6078      	str	r0, [r7, #4]
	Cl_ReturnCodeType 	Cl_isoufretcode = CL_OK;
   94a34:	2300      	movs	r3, #0
   94a36:	73fb      	strb	r3, [r7, #15]
	Cl_NewAlarmIdType cl_alarmId;
	Cl_Uint8Type tempcount = 0;
   94a38:	2300      	movs	r3, #0
   94a3a:	73bb      	strb	r3, [r7, #14]
	Cl_Uint8Type data[2];
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   94a3c:	2351      	movs	r3, #81	; 0x51
   94a3e:	737b      	strb	r3, [r7, #13]
	
	for (tempcount = 0 ; tempcount < CL_ISOUF_ALRM_MAX ; tempcount++)
   94a40:	2300      	movs	r3, #0
   94a42:	73bb      	strb	r3, [r7, #14]
   94a44:	e065      	b.n	94b12 <Cl_Isouf_UpdateAlarmTable+0xe6>
	{
		
		Cl_Alarm_GetAlarmStatus(Cl_IsoufAlarmTable[tempcount].Cl_IsoufAlarmId,&Cl_IsoufAlarmTable[tempcount].IsActive);
   94a46:	7bba      	ldrb	r2, [r7, #14]
   94a48:	4936      	ldr	r1, [pc, #216]	; (94b24 <Cl_Isouf_UpdateAlarmTable+0xf8>)
   94a4a:	4613      	mov	r3, r2
   94a4c:	00db      	lsls	r3, r3, #3
   94a4e:	1a9b      	subs	r3, r3, r2
   94a50:	440b      	add	r3, r1
   94a52:	7819      	ldrb	r1, [r3, #0]
   94a54:	7bba      	ldrb	r2, [r7, #14]
   94a56:	4613      	mov	r3, r2
   94a58:	00db      	lsls	r3, r3, #3
   94a5a:	1a9b      	subs	r3, r3, r2
   94a5c:	4a31      	ldr	r2, [pc, #196]	; (94b24 <Cl_Isouf_UpdateAlarmTable+0xf8>)
   94a5e:	4413      	add	r3, r2
   94a60:	3302      	adds	r3, #2
   94a62:	4608      	mov	r0, r1
   94a64:	4619      	mov	r1, r3
   94a66:	4b30      	ldr	r3, [pc, #192]	; (94b28 <Cl_Isouf_UpdateAlarmTable+0xfc>)
   94a68:	4798      	blx	r3
		if (Cl_IsoufAlarmTable[tempcount].IsActive)
   94a6a:	7bba      	ldrb	r2, [r7, #14]
   94a6c:	492d      	ldr	r1, [pc, #180]	; (94b24 <Cl_Isouf_UpdateAlarmTable+0xf8>)
   94a6e:	4613      	mov	r3, r2
   94a70:	00db      	lsls	r3, r3, #3
   94a72:	1a9b      	subs	r3, r3, r2
   94a74:	440b      	add	r3, r1
   94a76:	789b      	ldrb	r3, [r3, #2]
   94a78:	2b00      	cmp	r3, #0
   94a7a:	d020      	beq.n	94abe <Cl_Isouf_UpdateAlarmTable+0x92>
		{
			if(!Cl_IsoufAlarmTable[tempcount].IsRaised)
   94a7c:	7bba      	ldrb	r2, [r7, #14]
   94a7e:	4929      	ldr	r1, [pc, #164]	; (94b24 <Cl_Isouf_UpdateAlarmTable+0xf8>)
   94a80:	4613      	mov	r3, r2
   94a82:	00db      	lsls	r3, r3, #3
   94a84:	1a9b      	subs	r3, r3, r2
   94a86:	440b      	add	r3, r1
   94a88:	78db      	ldrb	r3, [r3, #3]
   94a8a:	f083 0301 	eor.w	r3, r3, #1
   94a8e:	b2db      	uxtb	r3, r3
   94a90:	2b00      	cmp	r3, #0
   94a92:	d03b      	beq.n	94b0c <Cl_Isouf_UpdateAlarmTable+0xe0>
				//	data[0] = (Cl_Uint8Type)Cl_DlsisAlarmTable[tempcount].Cl_DlsisAlarmId;
				//	data[1] = (Cl_Uint8Type) CL_ALARM_TRIGGERED;
				//	data[1] = (Cl_Uint8Type) CRITICAL;
				//	command = CON_TX_COMMAND_ALARM;
				//	Cl_dlsisretcode = Cl_SendDatatoconsole(command,&data,3);
				Cl_IsoufAlarmTable[tempcount].IsRaised = true;
   94a94:	7bba      	ldrb	r2, [r7, #14]
   94a96:	4923      	ldr	r1, [pc, #140]	; (94b24 <Cl_Isouf_UpdateAlarmTable+0xf8>)
   94a98:	4613      	mov	r3, r2
   94a9a:	00db      	lsls	r3, r3, #3
   94a9c:	1a9b      	subs	r3, r3, r2
   94a9e:	440b      	add	r3, r1
   94aa0:	2201      	movs	r2, #1
   94aa2:	70da      	strb	r2, [r3, #3]
				Cl_isoufretcode = CL_IsoufAlarmActon(Cl_IsoufAlarmTable[tempcount].Cl_IsoufAlarmId);
   94aa4:	7bba      	ldrb	r2, [r7, #14]
   94aa6:	491f      	ldr	r1, [pc, #124]	; (94b24 <Cl_Isouf_UpdateAlarmTable+0xf8>)
   94aa8:	4613      	mov	r3, r2
   94aaa:	00db      	lsls	r3, r3, #3
   94aac:	1a9b      	subs	r3, r3, r2
   94aae:	440b      	add	r3, r1
   94ab0:	781b      	ldrb	r3, [r3, #0]
   94ab2:	4618      	mov	r0, r3
   94ab4:	4b1d      	ldr	r3, [pc, #116]	; (94b2c <Cl_Isouf_UpdateAlarmTable+0x100>)
   94ab6:	4798      	blx	r3
   94ab8:	4603      	mov	r3, r0
   94aba:	73fb      	strb	r3, [r7, #15]
   94abc:	e026      	b.n	94b0c <Cl_Isouf_UpdateAlarmTable+0xe0>
			
		}
		else
		{
			// alarm was present before , but not active now.
			if(Cl_IsoufAlarmTable[tempcount].IsRaised == true)
   94abe:	7bba      	ldrb	r2, [r7, #14]
   94ac0:	4918      	ldr	r1, [pc, #96]	; (94b24 <Cl_Isouf_UpdateAlarmTable+0xf8>)
   94ac2:	4613      	mov	r3, r2
   94ac4:	00db      	lsls	r3, r3, #3
   94ac6:	1a9b      	subs	r3, r3, r2
   94ac8:	440b      	add	r3, r1
   94aca:	78db      	ldrb	r3, [r3, #3]
   94acc:	2b00      	cmp	r3, #0
   94ace:	d01d      	beq.n	94b0c <Cl_Isouf_UpdateAlarmTable+0xe0>
			{
				Cl_IsoufAlarmTable[tempcount].IsRaised = false;
   94ad0:	7bba      	ldrb	r2, [r7, #14]
   94ad2:	4914      	ldr	r1, [pc, #80]	; (94b24 <Cl_Isouf_UpdateAlarmTable+0xf8>)
   94ad4:	4613      	mov	r3, r2
   94ad6:	00db      	lsls	r3, r3, #3
   94ad8:	1a9b      	subs	r3, r3, r2
   94ada:	440b      	add	r3, r1
   94adc:	2200      	movs	r2, #0
   94ade:	70da      	strb	r2, [r3, #3]
				command = CON_TX_COMMAND_ALARM;
   94ae0:	2307      	movs	r3, #7
   94ae2:	737b      	strb	r3, [r7, #13]
				data[0] = (Cl_Uint8Type)(Cl_IsoufAlarmTable[tempcount].Cl_IsoufAlarmId);
   94ae4:	7bba      	ldrb	r2, [r7, #14]
   94ae6:	490f      	ldr	r1, [pc, #60]	; (94b24 <Cl_Isouf_UpdateAlarmTable+0xf8>)
   94ae8:	4613      	mov	r3, r2
   94aea:	00db      	lsls	r3, r3, #3
   94aec:	1a9b      	subs	r3, r3, r2
   94aee:	440b      	add	r3, r1
   94af0:	781b      	ldrb	r3, [r3, #0]
   94af2:	723b      	strb	r3, [r7, #8]
				data[1] = (Cl_Uint8Type) 0;
   94af4:	2300      	movs	r3, #0
   94af6:	727b      	strb	r3, [r7, #9]
				Cl_isoufretcode = Cl_SendDatatoconsole(command,&data,2);
   94af8:	7b7a      	ldrb	r2, [r7, #13]
   94afa:	f107 0308 	add.w	r3, r7, #8
   94afe:	4610      	mov	r0, r2
   94b00:	4619      	mov	r1, r3
   94b02:	2202      	movs	r2, #2
   94b04:	4b0a      	ldr	r3, [pc, #40]	; (94b30 <Cl_Isouf_UpdateAlarmTable+0x104>)
   94b06:	4798      	blx	r3
   94b08:	4603      	mov	r3, r0
   94b0a:	73fb      	strb	r3, [r7, #15]
	Cl_NewAlarmIdType cl_alarmId;
	Cl_Uint8Type tempcount = 0;
	Cl_Uint8Type data[2];
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
	
	for (tempcount = 0 ; tempcount < CL_ISOUF_ALRM_MAX ; tempcount++)
   94b0c:	7bbb      	ldrb	r3, [r7, #14]
   94b0e:	3301      	adds	r3, #1
   94b10:	73bb      	strb	r3, [r7, #14]
   94b12:	7bbb      	ldrb	r3, [r7, #14]
   94b14:	2b1d      	cmp	r3, #29
   94b16:	d996      	bls.n	94a46 <Cl_Isouf_UpdateAlarmTable+0x1a>
	}
	

	

	return (Cl_isoufretcode );
   94b18:	7bfb      	ldrb	r3, [r7, #15]
}
   94b1a:	4618      	mov	r0, r3
   94b1c:	3710      	adds	r7, #16
   94b1e:	46bd      	mov	sp, r7
   94b20:	bd80      	pop	{r7, pc}
   94b22:	bf00      	nop
   94b24:	20070a4c 	.word	0x20070a4c
   94b28:	00083035 	.word	0x00083035
   94b2c:	00094b35 	.word	0x00094b35
   94b30:	0009ba51 	.word	0x0009ba51

00094b34 <CL_IsoufAlarmActon>:


Cl_ReturnCodeType  CL_IsoufAlarmActon(Cl_NewAlarmIdType cl_isoufalarmid)
{
   94b34:	b580      	push	{r7, lr}
   94b36:	b086      	sub	sp, #24
   94b38:	af00      	add	r7, sp, #0
   94b3a:	4603      	mov	r3, r0
   94b3c:	71fb      	strb	r3, [r7, #7]
		Cl_ReturnCodeType 	Cl_isoufretcode = CL_OK;
   94b3e:	2300      	movs	r3, #0
   94b40:	75fb      	strb	r3, [r7, #23]
			Cl_Uint8Type data[3] ={0, 0} ,*data1 = NULL;
   94b42:	2300      	movs	r3, #0
   94b44:	813b      	strh	r3, [r7, #8]
   94b46:	2300      	movs	r3, #0
   94b48:	72bb      	strb	r3, [r7, #10]
   94b4a:	2300      	movs	r3, #0
   94b4c:	613b      	str	r3, [r7, #16]
			Cl_Uint8Type data3;
			Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   94b4e:	2351      	movs	r3, #81	; 0x51
   94b50:	73fb      	strb	r3, [r7, #15]
			Cl_Uint16Type levelswitchstatus = 0;	
   94b52:	2300      	movs	r3, #0
   94b54:	81bb      	strh	r3, [r7, #12]
			static Cl_Uint8Type fillseccounter = 0;
			Cl_NewAlarmIdType NewAlarmId = _NO_ALARM;
   94b56:	2300      	movs	r3, #0
   94b58:	72fb      	strb	r3, [r7, #11]
		

			

							
		switch(cl_isoufalarmid)
   94b5a:	79fb      	ldrb	r3, [r7, #7]
   94b5c:	3b01      	subs	r3, #1
   94b5e:	2b3a      	cmp	r3, #58	; 0x3a
   94b60:	f200 80dd 	bhi.w	94d1e <CL_IsoufAlarmActon+0x1ea>
   94b64:	a201      	add	r2, pc, #4	; (adr r2, 94b6c <CL_IsoufAlarmActon+0x38>)
   94b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   94b6a:	bf00      	nop
   94b6c:	00094c59 	.word	0x00094c59
   94b70:	00094d1f 	.word	0x00094d1f
   94b74:	00094d1f 	.word	0x00094d1f
   94b78:	00094d1f 	.word	0x00094d1f
   94b7c:	00094ca7 	.word	0x00094ca7
   94b80:	00094ca7 	.word	0x00094ca7
   94b84:	00094ca7 	.word	0x00094ca7
   94b88:	00094ca7 	.word	0x00094ca7
   94b8c:	00094ca7 	.word	0x00094ca7
   94b90:	00094d1f 	.word	0x00094d1f
   94b94:	00094ca7 	.word	0x00094ca7
   94b98:	00094ca7 	.word	0x00094ca7
   94b9c:	00094ca7 	.word	0x00094ca7
   94ba0:	00094ca7 	.word	0x00094ca7
   94ba4:	00094ca7 	.word	0x00094ca7
   94ba8:	00094ca7 	.word	0x00094ca7
   94bac:	00094ca7 	.word	0x00094ca7
   94bb0:	00094ca7 	.word	0x00094ca7
   94bb4:	00094ca7 	.word	0x00094ca7
   94bb8:	00094ca7 	.word	0x00094ca7
   94bbc:	00094ca7 	.word	0x00094ca7
   94bc0:	00094ca7 	.word	0x00094ca7
   94bc4:	00094ca7 	.word	0x00094ca7
   94bc8:	00094ca7 	.word	0x00094ca7
   94bcc:	00094d1f 	.word	0x00094d1f
   94bd0:	00094ca7 	.word	0x00094ca7
   94bd4:	00094d1f 	.word	0x00094d1f
   94bd8:	00094d1f 	.word	0x00094d1f
   94bdc:	00094d1f 	.word	0x00094d1f
   94be0:	00094d1f 	.word	0x00094d1f
   94be4:	00094d1f 	.word	0x00094d1f
   94be8:	00094c59 	.word	0x00094c59
   94bec:	00094ca7 	.word	0x00094ca7
   94bf0:	00094c59 	.word	0x00094c59
   94bf4:	00094c59 	.word	0x00094c59
   94bf8:	00094c59 	.word	0x00094c59
   94bfc:	00094c59 	.word	0x00094c59
   94c00:	00094c59 	.word	0x00094c59
   94c04:	00094ca7 	.word	0x00094ca7
   94c08:	00094ca7 	.word	0x00094ca7
   94c0c:	00094d1f 	.word	0x00094d1f
   94c10:	00094ca7 	.word	0x00094ca7
   94c14:	00094d1f 	.word	0x00094d1f
   94c18:	00094ca7 	.word	0x00094ca7
   94c1c:	00094d1f 	.word	0x00094d1f
   94c20:	00094d1f 	.word	0x00094d1f
   94c24:	00094d1f 	.word	0x00094d1f
   94c28:	00094d1f 	.word	0x00094d1f
   94c2c:	00094d1f 	.word	0x00094d1f
   94c30:	00094ca7 	.word	0x00094ca7
   94c34:	00094ca7 	.word	0x00094ca7
   94c38:	00094d1f 	.word	0x00094d1f
   94c3c:	00094d1f 	.word	0x00094d1f
   94c40:	00094d1f 	.word	0x00094d1f
   94c44:	00094d1f 	.word	0x00094d1f
   94c48:	00094d1f 	.word	0x00094d1f
   94c4c:	00094ca7 	.word	0x00094ca7
   94c50:	00094ca7 	.word	0x00094ca7
   94c54:	00094ca7 	.word	0x00094ca7
			case VPTSTATUS_LOW:
			case VPTSTATUS_HIGH:
			case ABD_EVENT:
			case BLD_EVENT:
							
				sv_cntrl_setredalarm();
   94c58:	4b34      	ldr	r3, [pc, #208]	; (94d2c <CL_IsoufAlarmActon+0x1f8>)
   94c5a:	4798      	blx	r3
				sv_cntrl_buzzer();
   94c5c:	4b34      	ldr	r3, [pc, #208]	; (94d30 <CL_IsoufAlarmActon+0x1fc>)
   94c5e:	4798      	blx	r3
				Cl_Isouf_safesate();	
   94c60:	4b34      	ldr	r3, [pc, #208]	; (94d34 <CL_IsoufAlarmActon+0x200>)
   94c62:	4798      	blx	r3
				 if(cl_isoufalarmid != _NO_ALARM)
   94c64:	79fb      	ldrb	r3, [r7, #7]
   94c66:	2b00      	cmp	r3, #0
   94c68:	d01c      	beq.n	94ca4 <CL_IsoufAlarmActon+0x170>
				 {
					 isoufalarm = cl_isoufalarmid;
   94c6a:	4a33      	ldr	r2, [pc, #204]	; (94d38 <CL_IsoufAlarmActon+0x204>)
   94c6c:	79fb      	ldrb	r3, [r7, #7]
   94c6e:	7013      	strb	r3, [r2, #0]
					 isoufalarm1 = isoufalarm;
   94c70:	4b31      	ldr	r3, [pc, #196]	; (94d38 <CL_IsoufAlarmActon+0x204>)
   94c72:	781a      	ldrb	r2, [r3, #0]
   94c74:	4b31      	ldr	r3, [pc, #196]	; (94d3c <CL_IsoufAlarmActon+0x208>)
   94c76:	701a      	strb	r2, [r3, #0]
					 data[0] = (Cl_Uint8Type)cl_isoufalarmid;
   94c78:	79fb      	ldrb	r3, [r7, #7]
   94c7a:	723b      	strb	r3, [r7, #8]
					 data[1] = (Cl_Uint8Type) CL_ALARM_TRIGGERED;
   94c7c:	2301      	movs	r3, #1
   94c7e:	727b      	strb	r3, [r7, #9]
					 data[2] = (Cl_Uint8Type)CRITICAL;
   94c80:	2302      	movs	r3, #2
   94c82:	72bb      	strb	r3, [r7, #10]
					 command = CON_TX_COMMAND_ALARM;
   94c84:	2307      	movs	r3, #7
   94c86:	73fb      	strb	r3, [r7, #15]
					 cl_wait(10);
   94c88:	200a      	movs	r0, #10
   94c8a:	4b2d      	ldr	r3, [pc, #180]	; (94d40 <CL_IsoufAlarmActon+0x20c>)
   94c8c:	4798      	blx	r3
					 Cl_isoufretcode = Cl_SendDatatoconsole(command,&data,3);
   94c8e:	7bfa      	ldrb	r2, [r7, #15]
   94c90:	f107 0308 	add.w	r3, r7, #8
   94c94:	4610      	mov	r0, r2
   94c96:	4619      	mov	r1, r3
   94c98:	2203      	movs	r2, #3
   94c9a:	4b2a      	ldr	r3, [pc, #168]	; (94d44 <CL_IsoufAlarmActon+0x210>)
   94c9c:	4798      	blx	r3
   94c9e:	4603      	mov	r3, r0
   94ca0:	75fb      	strb	r3, [r7, #23]
					 // 			command = CON_TX_COMMAND_CL_SYS_STATE;
					 // 			data[0] = (Cl_Uint8Type)CLEANING;
					 // 			data[1] = (Cl_Uint8Type)CLEAN_CLEAN_ALARM_STOPPED;
					 // 			Cl_dlsisretcode = Cl_SendDatatoconsole(command,&data,2);
				 }
			break;
   94ca2:	e03d      	b.n	94d20 <CL_IsoufAlarmActon+0x1ec>
   94ca4:	e03c      	b.n	94d20 <CL_IsoufAlarmActon+0x1ec>
			case TEMP1_LOW_THRESHOLD:
			case COND_STATUS_LOW:
			case COND_STATUS_HIGH:	
				// do nothing as the alarm limits were increased
			
			sv_cntrl_setyellowalarm();
   94ca6:	4b28      	ldr	r3, [pc, #160]	; (94d48 <CL_IsoufAlarmActon+0x214>)
   94ca8:	4798      	blx	r3
			sv_cntrl_buzzer();
   94caa:	4b21      	ldr	r3, [pc, #132]	; (94d30 <CL_IsoufAlarmActon+0x1fc>)
   94cac:	4798      	blx	r3
			
				Cl_bc_controller(BC_EVENT_STOP);
   94cae:	2005      	movs	r0, #5
   94cb0:	4b26      	ldr	r3, [pc, #152]	; (94d4c <CL_IsoufAlarmActon+0x218>)
   94cb2:	4798      	blx	r3
				sv_cntrl_deactivate_valve(VALVE_ID15);
   94cb4:	200f      	movs	r0, #15
   94cb6:	4b26      	ldr	r3, [pc, #152]	; (94d50 <CL_IsoufAlarmActon+0x21c>)
   94cb8:	4798      	blx	r3
				sv_cntrl_deactivate_valve(VALVE_ID13);
   94cba:	200d      	movs	r0, #13
   94cbc:	4b24      	ldr	r3, [pc, #144]	; (94d50 <CL_IsoufAlarmActon+0x21c>)
   94cbe:	4798      	blx	r3
				sv_cntrl_activate_valve(VALVE_ID14);
   94cc0:	200e      	movs	r0, #14
   94cc2:	4b24      	ldr	r3, [pc, #144]	; (94d54 <CL_IsoufAlarmActon+0x220>)
   94cc4:	4798      	blx	r3
				//DD_SET_VALVE(VALVE_ID1);
				sv_cntrl_deactivatepump(DCMOTOR1);
   94cc6:	2001      	movs	r0, #1
   94cc8:	4b23      	ldr	r3, [pc, #140]	; (94d58 <CL_IsoufAlarmActon+0x224>)
   94cca:	4798      	blx	r3
				sv_cntrl_deactivatepump(DCMOTOR2);
   94ccc:	2002      	movs	r0, #2
   94cce:	4b22      	ldr	r3, [pc, #136]	; (94d58 <CL_IsoufAlarmActon+0x224>)
   94cd0:	4798      	blx	r3
				// send alert message
				Cl_isoufretcode = sv_cntrl_poweroffheater();
   94cd2:	4b22      	ldr	r3, [pc, #136]	; (94d5c <CL_IsoufAlarmActon+0x228>)
   94cd4:	4798      	blx	r3
   94cd6:	4603      	mov	r3, r0
   94cd8:	75fb      	strb	r3, [r7, #23]
				Cl_isoufretcode = SetHeaterState(CL_HEATER_STATE_OFF);
   94cda:	2004      	movs	r0, #4
   94cdc:	4b20      	ldr	r3, [pc, #128]	; (94d60 <CL_IsoufAlarmActon+0x22c>)
   94cde:	4798      	blx	r3
   94ce0:	4603      	mov	r3, r0
   94ce2:	75fb      	strb	r3, [r7, #23]
				 isoufalarm = cl_isoufalarmid;
   94ce4:	4a14      	ldr	r2, [pc, #80]	; (94d38 <CL_IsoufAlarmActon+0x204>)
   94ce6:	79fb      	ldrb	r3, [r7, #7]
   94ce8:	7013      	strb	r3, [r2, #0]
				 isoufalarm1 = isoufalarm;
   94cea:	4b13      	ldr	r3, [pc, #76]	; (94d38 <CL_IsoufAlarmActon+0x204>)
   94cec:	781a      	ldrb	r2, [r3, #0]
   94cee:	4b13      	ldr	r3, [pc, #76]	; (94d3c <CL_IsoufAlarmActon+0x208>)
   94cf0:	701a      	strb	r2, [r3, #0]
				 data[0] = (Cl_Uint8Type)cl_isoufalarmid;
   94cf2:	79fb      	ldrb	r3, [r7, #7]
   94cf4:	723b      	strb	r3, [r7, #8]
				 data[1] = (Cl_Uint8Type) CL_ALARM_TRIGGERED;
   94cf6:	2301      	movs	r3, #1
   94cf8:	727b      	strb	r3, [r7, #9]
				 data[2] = (Cl_Uint8Type)CRITICAL;
   94cfa:	2302      	movs	r3, #2
   94cfc:	72bb      	strb	r3, [r7, #10]
				 command = CON_TX_COMMAND_ALERT;
   94cfe:	234f      	movs	r3, #79	; 0x4f
   94d00:	73fb      	strb	r3, [r7, #15]
				 cl_wait(10);
   94d02:	200a      	movs	r0, #10
   94d04:	4b0e      	ldr	r3, [pc, #56]	; (94d40 <CL_IsoufAlarmActon+0x20c>)
   94d06:	4798      	blx	r3
				 Cl_isoufretcode = Cl_SendDatatoconsole(command,&data,3);
   94d08:	7bfa      	ldrb	r2, [r7, #15]
   94d0a:	f107 0308 	add.w	r3, r7, #8
   94d0e:	4610      	mov	r0, r2
   94d10:	4619      	mov	r1, r3
   94d12:	2203      	movs	r2, #3
   94d14:	4b0b      	ldr	r3, [pc, #44]	; (94d44 <CL_IsoufAlarmActon+0x210>)
   94d16:	4798      	blx	r3
   94d18:	4603      	mov	r3, r0
   94d1a:	75fb      	strb	r3, [r7, #23]
				
			break;
   94d1c:	e000      	b.n	94d20 <CL_IsoufAlarmActon+0x1ec>
			Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"COND",4);
			cl_dlsis_state = CL_DLSIS_STATE_CRITICAL_ALARM;
			break;*/
			
			default:
			break;
   94d1e:	bf00      	nop

		}
		
return CL_OK;			
   94d20:	2300      	movs	r3, #0
}
   94d22:	4618      	mov	r0, r3
   94d24:	3718      	adds	r7, #24
   94d26:	46bd      	mov	sp, r7
   94d28:	bd80      	pop	{r7, pc}
   94d2a:	bf00      	nop
   94d2c:	00099f25 	.word	0x00099f25
   94d30:	00099f61 	.word	0x00099f61
   94d34:	00094ed1 	.word	0x00094ed1
   94d38:	200727a4 	.word	0x200727a4
   94d3c:	200727a5 	.word	0x200727a5
   94d40:	00093195 	.word	0x00093195
   94d44:	0009ba51 	.word	0x0009ba51
   94d48:	00099f39 	.word	0x00099f39
   94d4c:	0008330d 	.word	0x0008330d
   94d50:	00099ced 	.word	0x00099ced
   94d54:	00099ccd 	.word	0x00099ccd
   94d58:	00099c69 	.word	0x00099c69
   94d5c:	00099cb9 	.word	0x00099cb9
   94d60:	000894d9 	.word	0x000894d9

00094d64 <Cl_Isouf_ResetAlertsforReassertion>:

Cl_ReturnCodeType Cl_Isouf_ResetAlertsforReassertion(void )
{
   94d64:	b580      	push	{r7, lr}
   94d66:	b082      	sub	sp, #8
   94d68:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType 	Cl_dlsisretcode = CL_OK;
   94d6a:	2300      	movs	r3, #0
   94d6c:	71fb      	strb	r3, [r7, #7]
	ClDlsisAlarmIdType ClDlsisAlarmId;
	Cl_Uint8Type data;
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   94d6e:	2351      	movs	r3, #81	; 0x51
   94d70:	71bb      	strb	r3, [r7, #6]
	Cl_NewAlarmIdType cl_dlsisalarmid;
	
	Cl_IsoufAlarmTable[CL_DLSIS_ALARM_HOLDER1STATUS_CLOSE].IsRaised = false;
   94d72:	4b55      	ldr	r3, [pc, #340]	; (94ec8 <Cl_Isouf_ResetAlertsforReassertion+0x164>)
   94d74:	2200      	movs	r2, #0
   94d76:	70da      	strb	r2, [r3, #3]
	Cl_IsoufAlarmTable[CL_DLSIS_ALARM_HOLDER2STATUS_CLOSE].IsRaised = false;
   94d78:	4b53      	ldr	r3, [pc, #332]	; (94ec8 <Cl_Isouf_ResetAlertsforReassertion+0x164>)
   94d7a:	2200      	movs	r2, #0
   94d7c:	729a      	strb	r2, [r3, #10]
	Cl_AlarmResetAlarm(HOLDER1STATUS_CLOSED);
   94d7e:	2005      	movs	r0, #5
   94d80:	4b52      	ldr	r3, [pc, #328]	; (94ecc <Cl_Isouf_ResetAlertsforReassertion+0x168>)
   94d82:	4798      	blx	r3
	Cl_AlarmResetAlarm(HOLDER2STATUS_CLOSED);
   94d84:	2006      	movs	r0, #6
   94d86:	4b51      	ldr	r3, [pc, #324]	; (94ecc <Cl_Isouf_ResetAlertsforReassertion+0x168>)
   94d88:	4798      	blx	r3
	Cl_IsoufAlarmTable[CL_DLSIS_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   94d8a:	4b4f      	ldr	r3, [pc, #316]	; (94ec8 <Cl_Isouf_ResetAlertsforReassertion+0x164>)
   94d8c:	2200      	movs	r2, #0
   94d8e:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	Cl_AlarmResetAlarm(BLOODDOOR_STATUS_OPEN);
   94d92:	2001      	movs	r0, #1
   94d94:	4b4d      	ldr	r3, [pc, #308]	; (94ecc <Cl_Isouf_ResetAlertsforReassertion+0x168>)
   94d96:	4798      	blx	r3
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_STATUS_HIGH].IsRaised = false;
	//Cl_AlarmResetAlarm(COND_STATUS_HIGH);
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_DAC_OPEN].IsRaised = false;
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_DAC_RO].IsRaised = false;
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_DAC_HIGH].IsRaised = false;
	Cl_IsoufAlarmTable[CL_Dlsis_ALARM_PS1_HIGH_THRESHOLD].IsRaised = false;
   94d98:	4b4b      	ldr	r3, [pc, #300]	; (94ec8 <Cl_Isouf_ResetAlertsforReassertion+0x164>)
   94d9a:	2200      	movs	r2, #0
   94d9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	Cl_IsoufAlarmTable[CL_Dlsis_ALARM_PS1_LOW_THRESHOLD].IsRaised = false;
   94da0:	4b49      	ldr	r3, [pc, #292]	; (94ec8 <Cl_Isouf_ResetAlertsforReassertion+0x164>)
   94da2:	2200      	movs	r2, #0
   94da4:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	Cl_AlarmResetAlarm(PS1_HIGH_THRESHOLD);
   94da8:	2015      	movs	r0, #21
   94daa:	4b48      	ldr	r3, [pc, #288]	; (94ecc <Cl_Isouf_ResetAlertsforReassertion+0x168>)
   94dac:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS1_LOW_THRESHOLD);
   94dae:	2016      	movs	r0, #22
   94db0:	4b46      	ldr	r3, [pc, #280]	; (94ecc <Cl_Isouf_ResetAlertsforReassertion+0x168>)
   94db2:	4798      	blx	r3
	Cl_IsoufAlarmTable[CL_Dlsis_ALARM_PS2_HIGH_THRESHOLD].IsRaised = false;
   94db4:	4b44      	ldr	r3, [pc, #272]	; (94ec8 <Cl_Isouf_ResetAlertsforReassertion+0x164>)
   94db6:	2200      	movs	r2, #0
   94db8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	Cl_IsoufAlarmTable[CL_Dlsis_ALARM_PS2_LOW_THRESHOLD].IsRaised = false;
   94dbc:	4b42      	ldr	r3, [pc, #264]	; (94ec8 <Cl_Isouf_ResetAlertsforReassertion+0x164>)
   94dbe:	2200      	movs	r2, #0
   94dc0:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	Cl_AlarmResetAlarm(PS2_HIGH_THRESHOLD);
   94dc4:	2017      	movs	r0, #23
   94dc6:	4b41      	ldr	r3, [pc, #260]	; (94ecc <Cl_Isouf_ResetAlertsforReassertion+0x168>)
   94dc8:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS2_LOW_THRESHOLD);
   94dca:	2018      	movs	r0, #24
   94dcc:	4b3f      	ldr	r3, [pc, #252]	; (94ecc <Cl_Isouf_ResetAlertsforReassertion+0x168>)
   94dce:	4798      	blx	r3
	Cl_IsoufAlarmTable[CL_Dlsis_ALARM_PS3_HIGH_THRESHOLD].IsRaised = false;
   94dd0:	4b3d      	ldr	r3, [pc, #244]	; (94ec8 <Cl_Isouf_ResetAlertsforReassertion+0x164>)
   94dd2:	2200      	movs	r2, #0
   94dd4:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	Cl_IsoufAlarmTable[CL_Dlsis_ALARM_PS3_LOW_THRESHOLD].IsRaised = false;
   94dd8:	4b3b      	ldr	r3, [pc, #236]	; (94ec8 <Cl_Isouf_ResetAlertsforReassertion+0x164>)
   94dda:	2200      	movs	r2, #0
   94ddc:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	Cl_AlarmResetAlarm(PS3_HIGH_THRESHOLD);
   94de0:	2027      	movs	r0, #39	; 0x27
   94de2:	4b3a      	ldr	r3, [pc, #232]	; (94ecc <Cl_Isouf_ResetAlertsforReassertion+0x168>)
   94de4:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS3_LOW_THRESHOLD);
   94de6:	2028      	movs	r0, #40	; 0x28
   94de8:	4b38      	ldr	r3, [pc, #224]	; (94ecc <Cl_Isouf_ResetAlertsforReassertion+0x168>)
   94dea:	4798      	blx	r3
	Cl_IsoufAlarmTable[CL_DLSIS_BDSTATUS].IsRaised = false;
   94dec:	4b36      	ldr	r3, [pc, #216]	; (94ec8 <Cl_Isouf_ResetAlertsforReassertion+0x164>)
   94dee:	2200      	movs	r2, #0
   94df0:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	Cl_AlarmResetAlarm(BD_EVENT);
   94df4:	2021      	movs	r0, #33	; 0x21
   94df6:	4b35      	ldr	r3, [pc, #212]	; (94ecc <Cl_Isouf_ResetAlertsforReassertion+0x168>)
   94df8:	4798      	blx	r3
	Cl_IsoufAlarmTable[CL_DLSIS_ABDSTATUS].IsRaised = false;
   94dfa:	4b33      	ldr	r3, [pc, #204]	; (94ec8 <Cl_Isouf_ResetAlertsforReassertion+0x164>)
   94dfc:	2200      	movs	r2, #0
   94dfe:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	Cl_AlarmResetAlarm(ABD_EVENT);
   94e02:	2020      	movs	r0, #32
   94e04:	4b31      	ldr	r3, [pc, #196]	; (94ecc <Cl_Isouf_ResetAlertsforReassertion+0x168>)
   94e06:	4798      	blx	r3
	Cl_IsoufAlarmTable[CL_DLSIS_BLDSTATUS].IsRaised = false;
   94e08:	4b2f      	ldr	r3, [pc, #188]	; (94ec8 <Cl_Isouf_ResetAlertsforReassertion+0x164>)
   94e0a:	2200      	movs	r2, #0
   94e0c:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	Cl_AlarmResetAlarm(BLD_EVENT);
   94e10:	2022      	movs	r0, #34	; 0x22
   94e12:	4b2e      	ldr	r3, [pc, #184]	; (94ecc <Cl_Isouf_ResetAlertsforReassertion+0x168>)
   94e14:	4798      	blx	r3
	Cl_IsoufAlarmTable[CL_DLSIS_APTSTATUS_HIGH].IsRaised = false;
   94e16:	4b2c      	ldr	r3, [pc, #176]	; (94ec8 <Cl_Isouf_ResetAlertsforReassertion+0x164>)
   94e18:	2200      	movs	r2, #0
   94e1a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	Cl_IsoufAlarmTable[CL_DLSIS_APTSTATUS_LOW].IsRaised = false;
   94e1e:	4b2a      	ldr	r3, [pc, #168]	; (94ec8 <Cl_Isouf_ResetAlertsforReassertion+0x164>)
   94e20:	2200      	movs	r2, #0
   94e22:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
	Cl_AlarmResetAlarm(APTSTATUS_HIGH);
   94e26:	2024      	movs	r0, #36	; 0x24
   94e28:	4b28      	ldr	r3, [pc, #160]	; (94ecc <Cl_Isouf_ResetAlertsforReassertion+0x168>)
   94e2a:	4798      	blx	r3
	Cl_AlarmResetAlarm(APTSTATUS_LOW);
   94e2c:	2023      	movs	r0, #35	; 0x23
   94e2e:	4b27      	ldr	r3, [pc, #156]	; (94ecc <Cl_Isouf_ResetAlertsforReassertion+0x168>)
   94e30:	4798      	blx	r3
	Cl_IsoufAlarmTable[CL_DLSIS_VPTSTATUS_HIGH].IsRaised = false;
   94e32:	4b25      	ldr	r3, [pc, #148]	; (94ec8 <Cl_Isouf_ResetAlertsforReassertion+0x164>)
   94e34:	2200      	movs	r2, #0
   94e36:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
	Cl_IsoufAlarmTable[CL_DLSIS_VPTSTATUS_LOW].IsRaised = false;
   94e3a:	4b23      	ldr	r3, [pc, #140]	; (94ec8 <Cl_Isouf_ResetAlertsforReassertion+0x164>)
   94e3c:	2200      	movs	r2, #0
   94e3e:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	Cl_AlarmResetAlarm(VPTSTATUS_HIGH);
   94e42:	2026      	movs	r0, #38	; 0x26
   94e44:	4b21      	ldr	r3, [pc, #132]	; (94ecc <Cl_Isouf_ResetAlertsforReassertion+0x168>)
   94e46:	4798      	blx	r3
	Cl_AlarmResetAlarm(VPTSTATUS_LOW);
   94e48:	2025      	movs	r0, #37	; 0x25
   94e4a:	4b20      	ldr	r3, [pc, #128]	; (94ecc <Cl_Isouf_ResetAlertsforReassertion+0x168>)
   94e4c:	4798      	blx	r3
	Cl_IsoufAlarmTable[CL_DLSIS_COND_STATUS_LOW].IsRaised = false;
   94e4e:	4b1e      	ldr	r3, [pc, #120]	; (94ec8 <Cl_Isouf_ResetAlertsforReassertion+0x164>)
   94e50:	2200      	movs	r2, #0
   94e52:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
	Cl_IsoufAlarmTable[CL_DLSIS_COND_STATUS_HIGH].IsRaised = false;
   94e56:	4b1c      	ldr	r3, [pc, #112]	; (94ec8 <Cl_Isouf_ResetAlertsforReassertion+0x164>)
   94e58:	2200      	movs	r2, #0
   94e5a:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	Cl_AlarmResetAlarm(COND_STATUS_LOW);
   94e5e:	2007      	movs	r0, #7
   94e60:	4b1a      	ldr	r3, [pc, #104]	; (94ecc <Cl_Isouf_ResetAlertsforReassertion+0x168>)
   94e62:	4798      	blx	r3
	Cl_AlarmResetAlarm(COND_STATUS_HIGH);
   94e64:	2008      	movs	r0, #8
   94e66:	4b19      	ldr	r3, [pc, #100]	; (94ecc <Cl_Isouf_ResetAlertsforReassertion+0x168>)
   94e68:	4798      	blx	r3
	Cl_IsoufAlarmTable[CL_Dlsis_ALARM_TEMP3_HIGH_THRESHOLD].IsRaised = false;
   94e6a:	4b17      	ldr	r3, [pc, #92]	; (94ec8 <Cl_Isouf_ResetAlertsforReassertion+0x164>)
   94e6c:	2200      	movs	r2, #0
   94e6e:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
	Cl_IsoufAlarmTable[CL_Dlsis_ALARM_TEMP3_LOW_THRESHOLD].IsRaised = false;
   94e72:	4b15      	ldr	r3, [pc, #84]	; (94ec8 <Cl_Isouf_ResetAlertsforReassertion+0x164>)
   94e74:	2200      	movs	r2, #0
   94e76:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
	Cl_AlarmResetAlarm(TEMP3_HIGH_THRESHOLD);
   94e7a:	2013      	movs	r0, #19
   94e7c:	4b13      	ldr	r3, [pc, #76]	; (94ecc <Cl_Isouf_ResetAlertsforReassertion+0x168>)
   94e7e:	4798      	blx	r3
	Cl_AlarmResetAlarm(TEMP3_LOW_THRESHOLD);
   94e80:	2014      	movs	r0, #20
   94e82:	4b12      	ldr	r3, [pc, #72]	; (94ecc <Cl_Isouf_ResetAlertsforReassertion+0x168>)
   94e84:	4798      	blx	r3
	Cl_IsoufAlarmTable[CL_Dlsis_ALARM_TEMP2_HIGH_THRESHOLD].IsRaised = false;
   94e86:	4b10      	ldr	r3, [pc, #64]	; (94ec8 <Cl_Isouf_ResetAlertsforReassertion+0x164>)
   94e88:	2200      	movs	r2, #0
   94e8a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
	Cl_IsoufAlarmTable[CL_Dlsis_ALARM_TEMP2_LOW_THRESHOLD].IsRaised = false;
   94e8e:	4b0e      	ldr	r3, [pc, #56]	; (94ec8 <Cl_Isouf_ResetAlertsforReassertion+0x164>)
   94e90:	2200      	movs	r2, #0
   94e92:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
	Cl_AlarmResetAlarm(TEMP2_HIGH_THRESHOLD);
   94e96:	2011      	movs	r0, #17
   94e98:	4b0c      	ldr	r3, [pc, #48]	; (94ecc <Cl_Isouf_ResetAlertsforReassertion+0x168>)
   94e9a:	4798      	blx	r3
	Cl_AlarmResetAlarm(TEMP2_LOW_THRESHOLD);
   94e9c:	2012      	movs	r0, #18
   94e9e:	4b0b      	ldr	r3, [pc, #44]	; (94ecc <Cl_Isouf_ResetAlertsforReassertion+0x168>)
   94ea0:	4798      	blx	r3
	Cl_IsoufAlarmTable[CL_Dlsis_ALARM_TEMP1_HIGH_THRESHOLD].IsRaised = false;
   94ea2:	4b09      	ldr	r3, [pc, #36]	; (94ec8 <Cl_Isouf_ResetAlertsforReassertion+0x164>)
   94ea4:	2200      	movs	r2, #0
   94ea6:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
	Cl_IsoufAlarmTable[CL_Dlsis_ALARM_TEMP1_LOW_THRESHOLD].IsRaised = false;
   94eaa:	4b07      	ldr	r3, [pc, #28]	; (94ec8 <Cl_Isouf_ResetAlertsforReassertion+0x164>)
   94eac:	2200      	movs	r2, #0
   94eae:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
	Cl_AlarmResetAlarm(TEMP1_HIGH_THRESHOLD);
   94eb2:	200f      	movs	r0, #15
   94eb4:	4b05      	ldr	r3, [pc, #20]	; (94ecc <Cl_Isouf_ResetAlertsforReassertion+0x168>)
   94eb6:	4798      	blx	r3
	Cl_AlarmResetAlarm(TEMP1_LOW_THRESHOLD);
   94eb8:	2010      	movs	r0, #16
   94eba:	4b04      	ldr	r3, [pc, #16]	; (94ecc <Cl_Isouf_ResetAlertsforReassertion+0x168>)
   94ebc:	4798      	blx	r3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_FLOW_LOW_FLOWRATE].IsRaised = false;
	Cl_RinseAlarmTable[CL_RINSE_ALARM_LEVEL_SWITCH_LOW_TOGGLERATE].IsRaised = false;*/
	
	
	
	return (Cl_dlsisretcode);
   94ebe:	79fb      	ldrb	r3, [r7, #7]
}
   94ec0:	4618      	mov	r0, r3
   94ec2:	3708      	adds	r7, #8
   94ec4:	46bd      	mov	sp, r7
   94ec6:	bd80      	pop	{r7, pc}
   94ec8:	20070a4c 	.word	0x20070a4c
   94ecc:	00082f51 	.word	0x00082f51

00094ed0 <Cl_Isouf_safesate>:


Cl_ReturnCodeType Cl_Isouf_safesate(){
   94ed0:	b580      	push	{r7, lr}
   94ed2:	af00      	add	r7, sp, #0
	
	Cl_Isouf_stop();
   94ed4:	4b04      	ldr	r3, [pc, #16]	; (94ee8 <Cl_Isouf_safesate+0x18>)
   94ed6:	4798      	blx	r3
	cl_wait(10);
   94ed8:	200a      	movs	r0, #10
   94eda:	4b04      	ldr	r3, [pc, #16]	; (94eec <Cl_Isouf_safesate+0x1c>)
   94edc:	4798      	blx	r3
	cl_isouf_state = CL_ISOUF_STATE_CRITICAL_ALARM;
   94ede:	4b04      	ldr	r3, [pc, #16]	; (94ef0 <Cl_Isouf_safesate+0x20>)
   94ee0:	2208      	movs	r2, #8
   94ee2:	701a      	strb	r2, [r3, #0]
}
   94ee4:	4618      	mov	r0, r3
   94ee6:	bd80      	pop	{r7, pc}
   94ee8:	00094ef5 	.word	0x00094ef5
   94eec:	00093195 	.word	0x00093195
   94ef0:	20071af5 	.word	0x20071af5

00094ef4 <Cl_Isouf_stop>:
	
}



Cl_ReturnCodeType Cl_Isouf_stop(){
   94ef4:	b580      	push	{r7, lr}
   94ef6:	b082      	sub	sp, #8
   94ef8:	af00      	add	r7, sp, #0
	
	Cl_Uint8Type data;
	
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,false);
   94efa:	2001      	movs	r0, #1
   94efc:	2100      	movs	r1, #0
   94efe:	4b14      	ldr	r3, [pc, #80]	; (94f50 <Cl_Isouf_stop+0x5c>)
   94f00:	4798      	blx	r3
   94f02:	4603      	mov	r3, r0
   94f04:	461a      	mov	r2, r3
   94f06:	4b13      	ldr	r3, [pc, #76]	; (94f54 <Cl_Isouf_stop+0x60>)
   94f08:	701a      	strb	r2, [r3, #0]
// 	sv_cntrl_deactivate_valve(VALVE_ID13);
// 	sv_cntrl_deactivate_valve(VALVE_ID14);
// 	sv_cntrl_activate_valve(VALVE_ID15);
	cl_bp_controller(CL_BP_EVENT_STOP,0);
   94f0a:	2004      	movs	r0, #4
   94f0c:	2100      	movs	r1, #0
   94f0e:	4b12      	ldr	r3, [pc, #72]	; (94f58 <Cl_Isouf_stop+0x64>)
   94f10:	4798      	blx	r3
	sv_cntrl_deactivatevenousclamp();
   94f12:	4b12      	ldr	r3, [pc, #72]	; (94f5c <Cl_Isouf_stop+0x68>)
   94f14:	4798      	blx	r3
	
	cl_uf_controller(CL_UF_EVENT_STOP,0);
   94f16:	2004      	movs	r0, #4
   94f18:	2100      	movs	r1, #0
   94f1a:	4b11      	ldr	r3, [pc, #68]	; (94f60 <Cl_Isouf_stop+0x6c>)
   94f1c:	4798      	blx	r3
	isouf = false;
   94f1e:	4b11      	ldr	r3, [pc, #68]	; (94f64 <Cl_Isouf_stop+0x70>)
   94f20:	2200      	movs	r2, #0
   94f22:	701a      	strb	r2, [r3, #0]
	sv_cntrl_enable_bypass();
   94f24:	4b10      	ldr	r3, [pc, #64]	; (94f68 <Cl_Isouf_stop+0x74>)
   94f26:	4798      	blx	r3
	cl_isouf_retcode = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_ISOUF_STOPPED,&data,0);
   94f28:	1dfb      	adds	r3, r7, #7
   94f2a:	204c      	movs	r0, #76	; 0x4c
   94f2c:	4619      	mov	r1, r3
   94f2e:	2200      	movs	r2, #0
   94f30:	4b0e      	ldr	r3, [pc, #56]	; (94f6c <Cl_Isouf_stop+0x78>)
   94f32:	4798      	blx	r3
   94f34:	4603      	mov	r3, r0
   94f36:	461a      	mov	r2, r3
   94f38:	4b06      	ldr	r3, [pc, #24]	; (94f54 <Cl_Isouf_stop+0x60>)
   94f3a:	701a      	strb	r2, [r3, #0]
	
	isouf = false;
   94f3c:	4b09      	ldr	r3, [pc, #36]	; (94f64 <Cl_Isouf_stop+0x70>)
   94f3e:	2200      	movs	r2, #0
   94f40:	701a      	strb	r2, [r3, #0]
	cl_isouf_state = CL_ISOUF_STATE_STOPPED;
   94f42:	4b0b      	ldr	r3, [pc, #44]	; (94f70 <Cl_Isouf_stop+0x7c>)
   94f44:	2202      	movs	r2, #2
   94f46:	701a      	strb	r2, [r3, #0]
	
}
   94f48:	4618      	mov	r0, r3
   94f4a:	3708      	adds	r7, #8
   94f4c:	46bd      	mov	sp, r7
   94f4e:	bd80      	pop	{r7, pc}
   94f50:	00082e61 	.word	0x00082e61
   94f54:	20071af6 	.word	0x20071af6
   94f58:	00093305 	.word	0x00093305
   94f5c:	00099e2d 	.word	0x00099e2d
   94f60:	00095df5 	.word	0x00095df5
   94f64:	20071afc 	.word	0x20071afc
   94f68:	00099e79 	.word	0x00099e79
   94f6c:	0009ba51 	.word	0x0009ba51
   94f70:	20071af5 	.word	0x20071af5

00094f74 <Cl_Isouf_start>:

Cl_ReturnCodeType Cl_Isouf_start(){
   94f74:	b590      	push	{r4, r7, lr}
   94f76:	b085      	sub	sp, #20
   94f78:	af02      	add	r7, sp, #8
	
	Cl_Uint8Type data;
	
	
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true);
   94f7a:	2001      	movs	r0, #1
   94f7c:	2101      	movs	r1, #1
   94f7e:	4ba3      	ldr	r3, [pc, #652]	; (9520c <Cl_Isouf_start+0x298>)
   94f80:	4798      	blx	r3
   94f82:	4603      	mov	r3, r0
   94f84:	461a      	mov	r2, r3
   94f86:	4ba2      	ldr	r3, [pc, #648]	; (95210 <Cl_Isouf_start+0x29c>)
   94f88:	701a      	strb	r2, [r3, #0]
	
	cl_isouf_retcode =  Cl_AlarmConfigureAlarmType(BLOODDOOR_STATUS_OPEN,LOGIC_HIGH,0,0,0);
   94f8a:	2300      	movs	r3, #0
   94f8c:	9300      	str	r3, [sp, #0]
   94f8e:	2001      	movs	r0, #1
   94f90:	2101      	movs	r1, #1
   94f92:	f04f 0200 	mov.w	r2, #0
   94f96:	f04f 0300 	mov.w	r3, #0
   94f9a:	4c9e      	ldr	r4, [pc, #632]	; (95214 <Cl_Isouf_start+0x2a0>)
   94f9c:	47a0      	blx	r4
   94f9e:	4603      	mov	r3, r0
   94fa0:	461a      	mov	r2, r3
   94fa2:	4b9b      	ldr	r3, [pc, #620]	; (95210 <Cl_Isouf_start+0x29c>)
   94fa4:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmConfigureAlarmType(ACID_IN_OPEN,LOGIC_LOW,0,0,0);
   94fa6:	2300      	movs	r3, #0
   94fa8:	9300      	str	r3, [sp, #0]
   94faa:	2029      	movs	r0, #41	; 0x29
   94fac:	2100      	movs	r1, #0
   94fae:	f04f 0200 	mov.w	r2, #0
   94fb2:	f04f 0300 	mov.w	r3, #0
   94fb6:	4c97      	ldr	r4, [pc, #604]	; (95214 <Cl_Isouf_start+0x2a0>)
   94fb8:	47a0      	blx	r4
   94fba:	4603      	mov	r3, r0
   94fbc:	461a      	mov	r2, r3
   94fbe:	4b94      	ldr	r3, [pc, #592]	; (95210 <Cl_Isouf_start+0x29c>)
   94fc0:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmConfigureAlarmType(BICARB_IN_OPEN,LOGIC_LOW,0,0,0);
   94fc2:	2300      	movs	r3, #0
   94fc4:	9300      	str	r3, [sp, #0]
   94fc6:	202b      	movs	r0, #43	; 0x2b
   94fc8:	2100      	movs	r1, #0
   94fca:	f04f 0200 	mov.w	r2, #0
   94fce:	f04f 0300 	mov.w	r3, #0
   94fd2:	4c90      	ldr	r4, [pc, #576]	; (95214 <Cl_Isouf_start+0x2a0>)
   94fd4:	47a0      	blx	r4
   94fd6:	4603      	mov	r3, r0
   94fd8:	461a      	mov	r2, r3
   94fda:	4b8d      	ldr	r3, [pc, #564]	; (95210 <Cl_Isouf_start+0x29c>)
   94fdc:	701a      	strb	r2, [r3, #0]
	
	
	//Cl_dlsisretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true );
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON,true );
   94fde:	203d      	movs	r0, #61	; 0x3d
   94fe0:	2101      	movs	r1, #1
   94fe2:	4b8a      	ldr	r3, [pc, #552]	; (9520c <Cl_Isouf_start+0x298>)
   94fe4:	4798      	blx	r3
   94fe6:	4603      	mov	r3, r0
   94fe8:	461a      	mov	r2, r3
   94fea:	4b89      	ldr	r3, [pc, #548]	; (95210 <Cl_Isouf_start+0x29c>)
   94fec:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_ON_TO_OFF ,true);
   94fee:	203e      	movs	r0, #62	; 0x3e
   94ff0:	2101      	movs	r1, #1
   94ff2:	4b86      	ldr	r3, [pc, #536]	; (9520c <Cl_Isouf_start+0x298>)
   94ff4:	4798      	blx	r3
   94ff6:	4603      	mov	r3, r0
   94ff8:	461a      	mov	r2, r3
   94ffa:	4b85      	ldr	r3, [pc, #532]	; (95210 <Cl_Isouf_start+0x29c>)
   94ffc:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms( HOLDER1STATUS_CLOSED,true );
   94ffe:	2005      	movs	r0, #5
   95000:	2101      	movs	r1, #1
   95002:	4b82      	ldr	r3, [pc, #520]	; (9520c <Cl_Isouf_start+0x298>)
   95004:	4798      	blx	r3
   95006:	4603      	mov	r3, r0
   95008:	461a      	mov	r2, r3
   9500a:	4b81      	ldr	r3, [pc, #516]	; (95210 <Cl_Isouf_start+0x29c>)
   9500c:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms( HOLDER2STATUS_CLOSED,true );
   9500e:	2006      	movs	r0, #6
   95010:	2101      	movs	r1, #1
   95012:	4b7e      	ldr	r3, [pc, #504]	; (9520c <Cl_Isouf_start+0x298>)
   95014:	4798      	blx	r3
   95016:	4603      	mov	r3, r0
   95018:	461a      	mov	r2, r3
   9501a:	4b7d      	ldr	r3, [pc, #500]	; (95210 <Cl_Isouf_start+0x29c>)
   9501c:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms( HOLDER1STATUS_OPEN,false );
   9501e:	2003      	movs	r0, #3
   95020:	2100      	movs	r1, #0
   95022:	4b7a      	ldr	r3, [pc, #488]	; (9520c <Cl_Isouf_start+0x298>)
   95024:	4798      	blx	r3
   95026:	4603      	mov	r3, r0
   95028:	461a      	mov	r2, r3
   9502a:	4b79      	ldr	r3, [pc, #484]	; (95210 <Cl_Isouf_start+0x29c>)
   9502c:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms( HOLDER2STATUS_OPEN,false );
   9502e:	2004      	movs	r0, #4
   95030:	2100      	movs	r1, #0
   95032:	4b76      	ldr	r3, [pc, #472]	; (9520c <Cl_Isouf_start+0x298>)
   95034:	4798      	blx	r3
   95036:	4603      	mov	r3, r0
   95038:	461a      	mov	r2, r3
   9503a:	4b75      	ldr	r3, [pc, #468]	; (95210 <Cl_Isouf_start+0x29c>)
   9503c:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(COND_STATUS_LOW,false );
   9503e:	2007      	movs	r0, #7
   95040:	2100      	movs	r1, #0
   95042:	4b72      	ldr	r3, [pc, #456]	; (9520c <Cl_Isouf_start+0x298>)
   95044:	4798      	blx	r3
   95046:	4603      	mov	r3, r0
   95048:	461a      	mov	r2, r3
   9504a:	4b71      	ldr	r3, [pc, #452]	; (95210 <Cl_Isouf_start+0x29c>)
   9504c:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(COND_STATUS_HIGH,false );
   9504e:	2008      	movs	r0, #8
   95050:	2100      	movs	r1, #0
   95052:	4b6e      	ldr	r3, [pc, #440]	; (9520c <Cl_Isouf_start+0x298>)
   95054:	4798      	blx	r3
   95056:	4603      	mov	r3, r0
   95058:	461a      	mov	r2, r3
   9505a:	4b6d      	ldr	r3, [pc, #436]	; (95210 <Cl_Isouf_start+0x29c>)
   9505c:	701a      	strb	r2, [r3, #0]
	//	Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_DAC_OPEN,true );
	//	Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_DAC_RO,true );
	//	Cl_dlsisretcode =  Cl_AlarmActivateAlarms(COND_DAC_HIGH,true );
	cl_isouf_retcode =  Cl_AlarmActivateAlarms( ABD_EVENT,true );
   9505e:	2020      	movs	r0, #32
   95060:	2101      	movs	r1, #1
   95062:	4b6a      	ldr	r3, [pc, #424]	; (9520c <Cl_Isouf_start+0x298>)
   95064:	4798      	blx	r3
   95066:	4603      	mov	r3, r0
   95068:	461a      	mov	r2, r3
   9506a:	4b69      	ldr	r3, [pc, #420]	; (95210 <Cl_Isouf_start+0x29c>)
   9506c:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms( BD_EVENT,false );
   9506e:	2021      	movs	r0, #33	; 0x21
   95070:	2100      	movs	r1, #0
   95072:	4b66      	ldr	r3, [pc, #408]	; (9520c <Cl_Isouf_start+0x298>)
   95074:	4798      	blx	r3
   95076:	4603      	mov	r3, r0
   95078:	461a      	mov	r2, r3
   9507a:	4b65      	ldr	r3, [pc, #404]	; (95210 <Cl_Isouf_start+0x29c>)
   9507c:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(APTSTATUS_HIGH,false );
   9507e:	2024      	movs	r0, #36	; 0x24
   95080:	2100      	movs	r1, #0
   95082:	4b62      	ldr	r3, [pc, #392]	; (9520c <Cl_Isouf_start+0x298>)
   95084:	4798      	blx	r3
   95086:	4603      	mov	r3, r0
   95088:	461a      	mov	r2, r3
   9508a:	4b61      	ldr	r3, [pc, #388]	; (95210 <Cl_Isouf_start+0x29c>)
   9508c:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(VPTSTATUS_HIGH ,false);
   9508e:	2026      	movs	r0, #38	; 0x26
   95090:	2100      	movs	r1, #0
   95092:	4b5e      	ldr	r3, [pc, #376]	; (9520c <Cl_Isouf_start+0x298>)
   95094:	4798      	blx	r3
   95096:	4603      	mov	r3, r0
   95098:	461a      	mov	r2, r3
   9509a:	4b5d      	ldr	r3, [pc, #372]	; (95210 <Cl_Isouf_start+0x29c>)
   9509c:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(APTSTATUS_LOW,false );
   9509e:	2023      	movs	r0, #35	; 0x23
   950a0:	2100      	movs	r1, #0
   950a2:	4b5a      	ldr	r3, [pc, #360]	; (9520c <Cl_Isouf_start+0x298>)
   950a4:	4798      	blx	r3
   950a6:	4603      	mov	r3, r0
   950a8:	461a      	mov	r2, r3
   950aa:	4b59      	ldr	r3, [pc, #356]	; (95210 <Cl_Isouf_start+0x29c>)
   950ac:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(VPTSTATUS_LOW,false);
   950ae:	2025      	movs	r0, #37	; 0x25
   950b0:	2100      	movs	r1, #0
   950b2:	4b56      	ldr	r3, [pc, #344]	; (9520c <Cl_Isouf_start+0x298>)
   950b4:	4798      	blx	r3
   950b6:	4603      	mov	r3, r0
   950b8:	461a      	mov	r2, r3
   950ba:	4b55      	ldr	r3, [pc, #340]	; (95210 <Cl_Isouf_start+0x29c>)
   950bc:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms( BLD_EVENT,true );
   950be:	2022      	movs	r0, #34	; 0x22
   950c0:	2101      	movs	r1, #1
   950c2:	4b52      	ldr	r3, [pc, #328]	; (9520c <Cl_Isouf_start+0x298>)
   950c4:	4798      	blx	r3
   950c6:	4603      	mov	r3, r0
   950c8:	461a      	mov	r2, r3
   950ca:	4b51      	ldr	r3, [pc, #324]	; (95210 <Cl_Isouf_start+0x29c>)
   950cc:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(PS2_HIGH_THRESHOLD,false );
   950ce:	2017      	movs	r0, #23
   950d0:	2100      	movs	r1, #0
   950d2:	4b4e      	ldr	r3, [pc, #312]	; (9520c <Cl_Isouf_start+0x298>)
   950d4:	4798      	blx	r3
   950d6:	4603      	mov	r3, r0
   950d8:	461a      	mov	r2, r3
   950da:	4b4d      	ldr	r3, [pc, #308]	; (95210 <Cl_Isouf_start+0x29c>)
   950dc:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(PS2_LOW_THRESHOLD,false );
   950de:	2018      	movs	r0, #24
   950e0:	2100      	movs	r1, #0
   950e2:	4b4a      	ldr	r3, [pc, #296]	; (9520c <Cl_Isouf_start+0x298>)
   950e4:	4798      	blx	r3
   950e6:	4603      	mov	r3, r0
   950e8:	461a      	mov	r2, r3
   950ea:	4b49      	ldr	r3, [pc, #292]	; (95210 <Cl_Isouf_start+0x29c>)
   950ec:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(PS1_HIGH_THRESHOLD,false );
   950ee:	2015      	movs	r0, #21
   950f0:	2100      	movs	r1, #0
   950f2:	4b46      	ldr	r3, [pc, #280]	; (9520c <Cl_Isouf_start+0x298>)
   950f4:	4798      	blx	r3
   950f6:	4603      	mov	r3, r0
   950f8:	461a      	mov	r2, r3
   950fa:	4b45      	ldr	r3, [pc, #276]	; (95210 <Cl_Isouf_start+0x29c>)
   950fc:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(PS1_LOW_THRESHOLD,false );
   950fe:	2016      	movs	r0, #22
   95100:	2100      	movs	r1, #0
   95102:	4b42      	ldr	r3, [pc, #264]	; (9520c <Cl_Isouf_start+0x298>)
   95104:	4798      	blx	r3
   95106:	4603      	mov	r3, r0
   95108:	461a      	mov	r2, r3
   9510a:	4b41      	ldr	r3, [pc, #260]	; (95210 <Cl_Isouf_start+0x29c>)
   9510c:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(PS3_HIGH_THRESHOLD ,false);
   9510e:	2027      	movs	r0, #39	; 0x27
   95110:	2100      	movs	r1, #0
   95112:	4b3e      	ldr	r3, [pc, #248]	; (9520c <Cl_Isouf_start+0x298>)
   95114:	4798      	blx	r3
   95116:	4603      	mov	r3, r0
   95118:	461a      	mov	r2, r3
   9511a:	4b3d      	ldr	r3, [pc, #244]	; (95210 <Cl_Isouf_start+0x29c>)
   9511c:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(PS3_LOW_THRESHOLD ,false);
   9511e:	2028      	movs	r0, #40	; 0x28
   95120:	2100      	movs	r1, #0
   95122:	4b3a      	ldr	r3, [pc, #232]	; (9520c <Cl_Isouf_start+0x298>)
   95124:	4798      	blx	r3
   95126:	4603      	mov	r3, r0
   95128:	461a      	mov	r2, r3
   9512a:	4b39      	ldr	r3, [pc, #228]	; (95210 <Cl_Isouf_start+0x29c>)
   9512c:	701a      	strb	r2, [r3, #0]
	
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(SENSOR_TEMP3STATUS,false );
   9512e:	2014      	movs	r0, #20
   95130:	2100      	movs	r1, #0
   95132:	4b36      	ldr	r3, [pc, #216]	; (9520c <Cl_Isouf_start+0x298>)
   95134:	4798      	blx	r3
   95136:	4603      	mov	r3, r0
   95138:	461a      	mov	r2, r3
   9513a:	4b35      	ldr	r3, [pc, #212]	; (95210 <Cl_Isouf_start+0x29c>)
   9513c:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(SENSOR_TEMP2STATUS,false );
   9513e:	2013      	movs	r0, #19
   95140:	2100      	movs	r1, #0
   95142:	4b32      	ldr	r3, [pc, #200]	; (9520c <Cl_Isouf_start+0x298>)
   95144:	4798      	blx	r3
   95146:	4603      	mov	r3, r0
   95148:	461a      	mov	r2, r3
   9514a:	4b31      	ldr	r3, [pc, #196]	; (95210 <Cl_Isouf_start+0x29c>)
   9514c:	701a      	strb	r2, [r3, #0]
	
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(TEMP1_HIGH_THRESHOLD,false );
   9514e:	200f      	movs	r0, #15
   95150:	2100      	movs	r1, #0
   95152:	4b2e      	ldr	r3, [pc, #184]	; (9520c <Cl_Isouf_start+0x298>)
   95154:	4798      	blx	r3
   95156:	4603      	mov	r3, r0
   95158:	461a      	mov	r2, r3
   9515a:	4b2d      	ldr	r3, [pc, #180]	; (95210 <Cl_Isouf_start+0x29c>)
   9515c:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(TEMP1_LOW_THRESHOLD,false );
   9515e:	2010      	movs	r0, #16
   95160:	2100      	movs	r1, #0
   95162:	4b2a      	ldr	r3, [pc, #168]	; (9520c <Cl_Isouf_start+0x298>)
   95164:	4798      	blx	r3
   95166:	4603      	mov	r3, r0
   95168:	461a      	mov	r2, r3
   9516a:	4b29      	ldr	r3, [pc, #164]	; (95210 <Cl_Isouf_start+0x29c>)
   9516c:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(TEMP2_HIGH_THRESHOLD,false );
   9516e:	2011      	movs	r0, #17
   95170:	2100      	movs	r1, #0
   95172:	4b26      	ldr	r3, [pc, #152]	; (9520c <Cl_Isouf_start+0x298>)
   95174:	4798      	blx	r3
   95176:	4603      	mov	r3, r0
   95178:	461a      	mov	r2, r3
   9517a:	4b25      	ldr	r3, [pc, #148]	; (95210 <Cl_Isouf_start+0x29c>)
   9517c:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(TEMP2_LOW_THRESHOLD,false );
   9517e:	2012      	movs	r0, #18
   95180:	2100      	movs	r1, #0
   95182:	4b22      	ldr	r3, [pc, #136]	; (9520c <Cl_Isouf_start+0x298>)
   95184:	4798      	blx	r3
   95186:	4603      	mov	r3, r0
   95188:	461a      	mov	r2, r3
   9518a:	4b21      	ldr	r3, [pc, #132]	; (95210 <Cl_Isouf_start+0x29c>)
   9518c:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(TEMP3_HIGH_THRESHOLD,false );
   9518e:	2013      	movs	r0, #19
   95190:	2100      	movs	r1, #0
   95192:	4b1e      	ldr	r3, [pc, #120]	; (9520c <Cl_Isouf_start+0x298>)
   95194:	4798      	blx	r3
   95196:	4603      	mov	r3, r0
   95198:	461a      	mov	r2, r3
   9519a:	4b1d      	ldr	r3, [pc, #116]	; (95210 <Cl_Isouf_start+0x29c>)
   9519c:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode =  Cl_AlarmActivateAlarms(TEMP3_LOW_THRESHOLD,false );
   9519e:	2014      	movs	r0, #20
   951a0:	2100      	movs	r1, #0
   951a2:	4b1a      	ldr	r3, [pc, #104]	; (9520c <Cl_Isouf_start+0x298>)
   951a4:	4798      	blx	r3
   951a6:	4603      	mov	r3, r0
   951a8:	461a      	mov	r2, r3
   951aa:	4b19      	ldr	r3, [pc, #100]	; (95210 <Cl_Isouf_start+0x29c>)
   951ac:	701a      	strb	r2, [r3, #0]
	
	Cl_ISOufTotalSecondscounter = 0;
   951ae:	4b1a      	ldr	r3, [pc, #104]	; (95218 <Cl_Isouf_start+0x2a4>)
   951b0:	2200      	movs	r2, #0
   951b2:	601a      	str	r2, [r3, #0]
	//	cl_dialysate_ready_isouf();
	sv_cntrl_deactivate_valve(VALVE_ID13);
   951b4:	200d      	movs	r0, #13
   951b6:	4b19      	ldr	r3, [pc, #100]	; (9521c <Cl_Isouf_start+0x2a8>)
   951b8:	4798      	blx	r3
	sv_cntrl_activate_valve(VALVE_ID14);
   951ba:	200e      	movs	r0, #14
   951bc:	4b18      	ldr	r3, [pc, #96]	; (95220 <Cl_Isouf_start+0x2ac>)
   951be:	4798      	blx	r3
	sv_cntrl_deactivate_valve(VALVE_ID15);
   951c0:	200f      	movs	r0, #15
   951c2:	4b16      	ldr	r3, [pc, #88]	; (9521c <Cl_Isouf_start+0x2a8>)
   951c4:	4798      	blx	r3
	cl_hep_controller(CL_HEP_EVENT_START_NORMAL_DELIVERY,0);
   951c6:	200a      	movs	r0, #10
   951c8:	2100      	movs	r1, #0
   951ca:	4b16      	ldr	r3, [pc, #88]	; (95224 <Cl_Isouf_start+0x2b0>)
   951cc:	4798      	blx	r3
	cl_bp_controller(CL_BP_EVENT_START,0);
   951ce:	2002      	movs	r0, #2
   951d0:	2100      	movs	r1, #0
   951d2:	4b15      	ldr	r3, [pc, #84]	; (95228 <Cl_Isouf_start+0x2b4>)
   951d4:	4798      	blx	r3
	cl_uf_controller(CL_UF_EVENT_START,0);
   951d6:	2002      	movs	r0, #2
   951d8:	2100      	movs	r1, #0
   951da:	4b14      	ldr	r3, [pc, #80]	; (9522c <Cl_Isouf_start+0x2b8>)
   951dc:	4798      	blx	r3
	
	
	isouf = true;
   951de:	4b14      	ldr	r3, [pc, #80]	; (95230 <Cl_Isouf_start+0x2bc>)
   951e0:	2201      	movs	r2, #1
   951e2:	701a      	strb	r2, [r3, #0]
	cl_isouf_retcode = Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_ISOUF_STARTED,&data,0);
   951e4:	1dfb      	adds	r3, r7, #7
   951e6:	204b      	movs	r0, #75	; 0x4b
   951e8:	4619      	mov	r1, r3
   951ea:	2200      	movs	r2, #0
   951ec:	4b11      	ldr	r3, [pc, #68]	; (95234 <Cl_Isouf_start+0x2c0>)
   951ee:	4798      	blx	r3
   951f0:	4603      	mov	r3, r0
   951f2:	461a      	mov	r2, r3
   951f4:	4b06      	ldr	r3, [pc, #24]	; (95210 <Cl_Isouf_start+0x29c>)
   951f6:	701a      	strb	r2, [r3, #0]
	cl_wait(10);
   951f8:	200a      	movs	r0, #10
   951fa:	4b0f      	ldr	r3, [pc, #60]	; (95238 <Cl_Isouf_start+0x2c4>)
   951fc:	4798      	blx	r3
		Cl_Iso_UpdateTimeInfo();
   951fe:	4b0f      	ldr	r3, [pc, #60]	; (9523c <Cl_Isouf_start+0x2c8>)
   95200:	4798      	blx	r3
}
   95202:	4618      	mov	r0, r3
   95204:	370c      	adds	r7, #12
   95206:	46bd      	mov	sp, r7
   95208:	bd90      	pop	{r4, r7, pc}
   9520a:	bf00      	nop
   9520c:	00082e61 	.word	0x00082e61
   95210:	20071af6 	.word	0x20071af6
   95214:	00082e09 	.word	0x00082e09
   95218:	20071af8 	.word	0x20071af8
   9521c:	00099ced 	.word	0x00099ced
   95220:	00099ccd 	.word	0x00099ccd
   95224:	00093a0d 	.word	0x00093a0d
   95228:	00093305 	.word	0x00093305
   9522c:	00095df5 	.word	0x00095df5
   95230:	20071afc 	.word	0x20071afc
   95234:	0009ba51 	.word	0x0009ba51
   95238:	00093195 	.word	0x00093195
   9523c:	00095a51 	.word	0x00095a51

00095240 <Cl_Iso_Senddata>:

Cl_ReturnCodeType Cl_Iso_Senddata(){
   95240:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
   95244:	b093      	sub	sp, #76	; 0x4c
   95246:	af00      	add	r7, sp, #0
	
	static float cond = 0;
	Cl_Uint8Type systemdataarray[44] =  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
   95248:	f107 030c 	add.w	r3, r7, #12
   9524c:	2200      	movs	r2, #0
   9524e:	601a      	str	r2, [r3, #0]
   95250:	3304      	adds	r3, #4
   95252:	2200      	movs	r2, #0
   95254:	601a      	str	r2, [r3, #0]
   95256:	3304      	adds	r3, #4
   95258:	2200      	movs	r2, #0
   9525a:	601a      	str	r2, [r3, #0]
   9525c:	3304      	adds	r3, #4
   9525e:	2200      	movs	r2, #0
   95260:	601a      	str	r2, [r3, #0]
   95262:	3304      	adds	r3, #4
   95264:	2200      	movs	r2, #0
   95266:	601a      	str	r2, [r3, #0]
   95268:	3304      	adds	r3, #4
   9526a:	2200      	movs	r2, #0
   9526c:	601a      	str	r2, [r3, #0]
   9526e:	3304      	adds	r3, #4
   95270:	2200      	movs	r2, #0
   95272:	601a      	str	r2, [r3, #0]
   95274:	3304      	adds	r3, #4
   95276:	2200      	movs	r2, #0
   95278:	601a      	str	r2, [r3, #0]
   9527a:	3304      	adds	r3, #4
   9527c:	2200      	movs	r2, #0
   9527e:	601a      	str	r2, [r3, #0]
   95280:	3304      	adds	r3, #4
   95282:	2200      	movs	r2, #0
   95284:	601a      	str	r2, [r3, #0]
   95286:	3304      	adds	r3, #4
   95288:	2200      	movs	r2, #0
   9528a:	601a      	str	r2, [r3, #0]
   9528c:	3304      	adds	r3, #4
	cl_IsoUfDatatype tempdata;
	Cl_Uint16Type temp=0, temp1=0;
   9528e:	2300      	movs	r3, #0
   95290:	807b      	strh	r3, [r7, #2]
   95292:	2300      	movs	r3, #0
   95294:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	static float avgtmp3=0,apt=0,vpt=0,ps1=0,ps2=0;
	static Cl_Uint32Type timecount = 0;
	Cl_ReturnCodeType Cl_dlsisretcode = CL_OK;
   95298:	2300      	movs	r3, #0
   9529a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	Cl_Uint8Type count = 0;
   9529e:	2300      	movs	r3, #0
   952a0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   952a4:	2351      	movs	r3, #81	; 0x51
   952a6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	Cl_Uint16Type sensordatamillivolts;
	command = CON_TX_COMMAND_CL_SYS_STATE_DATA ;
   952aa:	232a      	movs	r3, #42	; 0x2a
   952ac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	systemdataarray[0] = ISOUF_DATA;
   952b0:	230c      	movs	r3, #12
   952b2:	733b      	strb	r3, [r7, #12]
	count++;
   952b4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   952b8:	3301      	adds	r3, #1
   952ba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	APT,
	VPT,
	TMP,
	UF_REMOVED
	*/
		Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&temp);
   952be:	1cbb      	adds	r3, r7, #2
   952c0:	2014      	movs	r0, #20
   952c2:	4619      	mov	r1, r3
   952c4:	4b6e      	ldr	r3, [pc, #440]	; (95480 <Cl_Iso_Senddata+0x240>)
   952c6:	4798      	blx	r3
// 							//	tmp3 =	(tmp3*5 + res_temp_value)/6;
// //							temp1 = res_temp_value/10;
// //							temp1 = temp1 - 31 -20;
// //							avgtmp3 =(avgtmp3*5 + temp1)/6;
// 							avgtmp3 = (res_temp_value  - 0.4)/10;
							avgtmp3 = (float)temp/10;
   952c8:	887a      	ldrh	r2, [r7, #2]
   952ca:	4b6e      	ldr	r3, [pc, #440]	; (95484 <Cl_Iso_Senddata+0x244>)
   952cc:	4610      	mov	r0, r2
   952ce:	4798      	blx	r3
   952d0:	4602      	mov	r2, r0
   952d2:	4b6d      	ldr	r3, [pc, #436]	; (95488 <Cl_Iso_Senddata+0x248>)
   952d4:	4610      	mov	r0, r2
   952d6:	496d      	ldr	r1, [pc, #436]	; (9548c <Cl_Iso_Senddata+0x24c>)
   952d8:	4798      	blx	r3
   952da:	4603      	mov	r3, r0
   952dc:	461a      	mov	r2, r3
   952de:	4b6c      	ldr	r3, [pc, #432]	; (95490 <Cl_Iso_Senddata+0x250>)
   952e0:	601a      	str	r2, [r3, #0]
		}
		Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_STATUS,&temp);
   952e2:	1cbb      	adds	r3, r7, #2
   952e4:	2007      	movs	r0, #7
   952e6:	4619      	mov	r1, r3
   952e8:	4b65      	ldr	r3, [pc, #404]	; (95480 <Cl_Iso_Senddata+0x240>)
   952ea:	4798      	blx	r3
		{
			float cond_comp;
				float temp2;
				
				if (temp > 50)
   952ec:	887b      	ldrh	r3, [r7, #2]
   952ee:	2b32      	cmp	r3, #50	; 0x32
   952f0:	f240 80e6 	bls.w	954c0 <Cl_Iso_Senddata+0x280>
			{
				//	calibration_cond(temp);
					cond =  -0.0001 * temp* temp  + 0.36 * temp  - 38.39 ;
   952f4:	887b      	ldrh	r3, [r7, #2]
   952f6:	461a      	mov	r2, r3
   952f8:	4b66      	ldr	r3, [pc, #408]	; (95494 <Cl_Iso_Senddata+0x254>)
   952fa:	4610      	mov	r0, r2
   952fc:	4798      	blx	r3
   952fe:	4602      	mov	r2, r0
   95300:	460b      	mov	r3, r1
   95302:	4c65      	ldr	r4, [pc, #404]	; (95498 <Cl_Iso_Senddata+0x258>)
   95304:	4610      	mov	r0, r2
   95306:	4619      	mov	r1, r3
   95308:	a355      	add	r3, pc, #340	; (adr r3, 95460 <Cl_Iso_Senddata+0x220>)
   9530a:	e9d3 2300 	ldrd	r2, r3, [r3]
   9530e:	47a0      	blx	r4
   95310:	4602      	mov	r2, r0
   95312:	460b      	mov	r3, r1
   95314:	4690      	mov	r8, r2
   95316:	4699      	mov	r9, r3
   95318:	887b      	ldrh	r3, [r7, #2]
   9531a:	461a      	mov	r2, r3
   9531c:	4b5d      	ldr	r3, [pc, #372]	; (95494 <Cl_Iso_Senddata+0x254>)
   9531e:	4610      	mov	r0, r2
   95320:	4798      	blx	r3
   95322:	4602      	mov	r2, r0
   95324:	460b      	mov	r3, r1
   95326:	4c5c      	ldr	r4, [pc, #368]	; (95498 <Cl_Iso_Senddata+0x258>)
   95328:	4640      	mov	r0, r8
   9532a:	4649      	mov	r1, r9
   9532c:	47a0      	blx	r4
   9532e:	4602      	mov	r2, r0
   95330:	460b      	mov	r3, r1
   95332:	4690      	mov	r8, r2
   95334:	4699      	mov	r9, r3
   95336:	887b      	ldrh	r3, [r7, #2]
   95338:	461a      	mov	r2, r3
   9533a:	4b56      	ldr	r3, [pc, #344]	; (95494 <Cl_Iso_Senddata+0x254>)
   9533c:	4610      	mov	r0, r2
   9533e:	4798      	blx	r3
   95340:	4602      	mov	r2, r0
   95342:	460b      	mov	r3, r1
   95344:	4c54      	ldr	r4, [pc, #336]	; (95498 <Cl_Iso_Senddata+0x258>)
   95346:	4610      	mov	r0, r2
   95348:	4619      	mov	r1, r3
   9534a:	a347      	add	r3, pc, #284	; (adr r3, 95468 <Cl_Iso_Senddata+0x228>)
   9534c:	e9d3 2300 	ldrd	r2, r3, [r3]
   95350:	47a0      	blx	r4
   95352:	4602      	mov	r2, r0
   95354:	460b      	mov	r3, r1
   95356:	4c51      	ldr	r4, [pc, #324]	; (9549c <Cl_Iso_Senddata+0x25c>)
   95358:	4640      	mov	r0, r8
   9535a:	4649      	mov	r1, r9
   9535c:	47a0      	blx	r4
   9535e:	4602      	mov	r2, r0
   95360:	460b      	mov	r3, r1
   95362:	4c4f      	ldr	r4, [pc, #316]	; (954a0 <Cl_Iso_Senddata+0x260>)
   95364:	4610      	mov	r0, r2
   95366:	4619      	mov	r1, r3
   95368:	a341      	add	r3, pc, #260	; (adr r3, 95470 <Cl_Iso_Senddata+0x230>)
   9536a:	e9d3 2300 	ldrd	r2, r3, [r3]
   9536e:	47a0      	blx	r4
   95370:	4602      	mov	r2, r0
   95372:	460b      	mov	r3, r1
   95374:	4610      	mov	r0, r2
   95376:	4619      	mov	r1, r3
   95378:	4b4a      	ldr	r3, [pc, #296]	; (954a4 <Cl_Iso_Senddata+0x264>)
   9537a:	4798      	blx	r3
   9537c:	4602      	mov	r2, r0
   9537e:	4b4a      	ldr	r3, [pc, #296]	; (954a8 <Cl_Iso_Senddata+0x268>)
   95380:	601a      	str	r2, [r3, #0]
				//	cond =(cond*5 + cond_final_cs3)/6;
					cond_comp= cond/(1+(avgtmp3/10-25.0)*0.020);
   95382:	4b49      	ldr	r3, [pc, #292]	; (954a8 <Cl_Iso_Senddata+0x268>)
   95384:	681a      	ldr	r2, [r3, #0]
   95386:	4b49      	ldr	r3, [pc, #292]	; (954ac <Cl_Iso_Senddata+0x26c>)
   95388:	4610      	mov	r0, r2
   9538a:	4798      	blx	r3
   9538c:	4680      	mov	r8, r0
   9538e:	4689      	mov	r9, r1
   95390:	4b3f      	ldr	r3, [pc, #252]	; (95490 <Cl_Iso_Senddata+0x250>)
   95392:	681a      	ldr	r2, [r3, #0]
   95394:	4b3c      	ldr	r3, [pc, #240]	; (95488 <Cl_Iso_Senddata+0x248>)
   95396:	4610      	mov	r0, r2
   95398:	493c      	ldr	r1, [pc, #240]	; (9548c <Cl_Iso_Senddata+0x24c>)
   9539a:	4798      	blx	r3
   9539c:	4603      	mov	r3, r0
   9539e:	461a      	mov	r2, r3
   953a0:	4b42      	ldr	r3, [pc, #264]	; (954ac <Cl_Iso_Senddata+0x26c>)
   953a2:	4610      	mov	r0, r2
   953a4:	4798      	blx	r3
   953a6:	4602      	mov	r2, r0
   953a8:	460b      	mov	r3, r1
   953aa:	4c3d      	ldr	r4, [pc, #244]	; (954a0 <Cl_Iso_Senddata+0x260>)
   953ac:	4610      	mov	r0, r2
   953ae:	4619      	mov	r1, r3
   953b0:	f04f 0200 	mov.w	r2, #0
   953b4:	4b3e      	ldr	r3, [pc, #248]	; (954b0 <Cl_Iso_Senddata+0x270>)
   953b6:	47a0      	blx	r4
   953b8:	4602      	mov	r2, r0
   953ba:	460b      	mov	r3, r1
   953bc:	4c36      	ldr	r4, [pc, #216]	; (95498 <Cl_Iso_Senddata+0x258>)
   953be:	4610      	mov	r0, r2
   953c0:	4619      	mov	r1, r3
   953c2:	a32d      	add	r3, pc, #180	; (adr r3, 95478 <Cl_Iso_Senddata+0x238>)
   953c4:	e9d3 2300 	ldrd	r2, r3, [r3]
   953c8:	47a0      	blx	r4
   953ca:	4602      	mov	r2, r0
   953cc:	460b      	mov	r3, r1
   953ce:	4c33      	ldr	r4, [pc, #204]	; (9549c <Cl_Iso_Senddata+0x25c>)
   953d0:	4610      	mov	r0, r2
   953d2:	4619      	mov	r1, r3
   953d4:	f04f 0200 	mov.w	r2, #0
   953d8:	4b36      	ldr	r3, [pc, #216]	; (954b4 <Cl_Iso_Senddata+0x274>)
   953da:	47a0      	blx	r4
   953dc:	4602      	mov	r2, r0
   953de:	460b      	mov	r3, r1
   953e0:	4c35      	ldr	r4, [pc, #212]	; (954b8 <Cl_Iso_Senddata+0x278>)
   953e2:	4640      	mov	r0, r8
   953e4:	4649      	mov	r1, r9
   953e6:	47a0      	blx	r4
   953e8:	4602      	mov	r2, r0
   953ea:	460b      	mov	r3, r1
   953ec:	4610      	mov	r0, r2
   953ee:	4619      	mov	r1, r3
   953f0:	4b2c      	ldr	r3, [pc, #176]	; (954a4 <Cl_Iso_Senddata+0x264>)
   953f2:	4798      	blx	r3
   953f4:	4603      	mov	r3, r0
   953f6:	63fb      	str	r3, [r7, #60]	; 0x3c
				
					
					tempdata.word = (cond_comp);
   953f8:	4b30      	ldr	r3, [pc, #192]	; (954bc <Cl_Iso_Senddata+0x27c>)
   953fa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   953fc:	4798      	blx	r3
   953fe:	4603      	mov	r3, r0
   95400:	607b      	str	r3, [r7, #4]
					systemdataarray[count++] = tempdata.bytearray[0];
   95402:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   95406:	1c5a      	adds	r2, r3, #1
   95408:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   9540c:	793a      	ldrb	r2, [r7, #4]
   9540e:	f107 0148 	add.w	r1, r7, #72	; 0x48
   95412:	440b      	add	r3, r1
   95414:	f803 2c3c 	strb.w	r2, [r3, #-60]
					systemdataarray[count++] = tempdata.bytearray[1];
   95418:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   9541c:	1c5a      	adds	r2, r3, #1
   9541e:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   95422:	797a      	ldrb	r2, [r7, #5]
   95424:	f107 0148 	add.w	r1, r7, #72	; 0x48
   95428:	440b      	add	r3, r1
   9542a:	f803 2c3c 	strb.w	r2, [r3, #-60]
					systemdataarray[count++] = tempdata.bytearray[2];
   9542e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   95432:	1c5a      	adds	r2, r3, #1
   95434:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   95438:	79ba      	ldrb	r2, [r7, #6]
   9543a:	f107 0148 	add.w	r1, r7, #72	; 0x48
   9543e:	440b      	add	r3, r1
   95440:	f803 2c3c 	strb.w	r2, [r3, #-60]
					systemdataarray[count++] = tempdata.bytearray[3];
   95444:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   95448:	1c5a      	adds	r2, r3, #1
   9544a:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   9544e:	79fa      	ldrb	r2, [r7, #7]
   95450:	f107 0148 	add.w	r1, r7, #72	; 0x48
   95454:	440b      	add	r3, r1
   95456:	f803 2c3c 	strb.w	r2, [r3, #-60]
   9545a:	e05f      	b.n	9551c <Cl_Iso_Senddata+0x2dc>
   9545c:	f3af 8000 	nop.w
   95460:	eb1c432d 	.word	0xeb1c432d
   95464:	bf1a36e2 	.word	0xbf1a36e2
   95468:	70a3d70a 	.word	0x70a3d70a
   9546c:	3fd70a3d 	.word	0x3fd70a3d
   95470:	851eb852 	.word	0x851eb852
   95474:	404331eb 	.word	0x404331eb
   95478:	47ae147b 	.word	0x47ae147b
   9547c:	3f947ae1 	.word	0x3f947ae1
   95480:	0008e7f9 	.word	0x0008e7f9
   95484:	000a68a9 	.word	0x000a68a9
   95488:	000a6ac1 	.word	0x000a6ac1
   9548c:	41200000 	.word	0x41200000
   95490:	20071b00 	.word	0x20071b00
   95494:	000a600d 	.word	0x000a600d
   95498:	000a60d9 	.word	0x000a60d9
   9549c:	000a5d75 	.word	0x000a5d75
   954a0:	000a5d71 	.word	0x000a5d71
   954a4:	000a669d 	.word	0x000a669d
   954a8:	20071b04 	.word	0x20071b04
   954ac:	000a6031 	.word	0x000a6031
   954b0:	40390000 	.word	0x40390000
   954b4:	3ff00000 	.word	0x3ff00000
   954b8:	000a632d 	.word	0x000a632d
   954bc:	000a6d31 	.word	0x000a6d31
			}
				else
				{
					tempdata.word = 0;
   954c0:	2300      	movs	r3, #0
   954c2:	607b      	str	r3, [r7, #4]
			systemdataarray[count++] = tempdata.bytearray[0];
   954c4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   954c8:	1c5a      	adds	r2, r3, #1
   954ca:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   954ce:	793a      	ldrb	r2, [r7, #4]
   954d0:	f107 0148 	add.w	r1, r7, #72	; 0x48
   954d4:	440b      	add	r3, r1
   954d6:	f803 2c3c 	strb.w	r2, [r3, #-60]
			systemdataarray[count++] = tempdata.bytearray[1];
   954da:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   954de:	1c5a      	adds	r2, r3, #1
   954e0:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   954e4:	797a      	ldrb	r2, [r7, #5]
   954e6:	f107 0148 	add.w	r1, r7, #72	; 0x48
   954ea:	440b      	add	r3, r1
   954ec:	f803 2c3c 	strb.w	r2, [r3, #-60]
			systemdataarray[count++] = tempdata.bytearray[2];
   954f0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   954f4:	1c5a      	adds	r2, r3, #1
   954f6:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   954fa:	79ba      	ldrb	r2, [r7, #6]
   954fc:	f107 0148 	add.w	r1, r7, #72	; 0x48
   95500:	440b      	add	r3, r1
   95502:	f803 2c3c 	strb.w	r2, [r3, #-60]
			systemdataarray[count++] = tempdata.bytearray[3];
   95506:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   9550a:	1c5a      	adds	r2, r3, #1
   9550c:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   95510:	79fa      	ldrb	r2, [r7, #7]
   95512:	f107 0148 	add.w	r1, r7, #72	; 0x48
   95516:	440b      	add	r3, r1
   95518:	f803 2c3c 	strb.w	r2, [r3, #-60]
			
		//	float ftemp,ftemp1;
		//	ftemp = temp * 0.803;
		//	calibration_tmp(ftemp,TS3);
		//	avgtmp3 =(avgtmp3*5 + temprature_final_value_3)/6;
			tempdata.word = (avgtmp3);
   9551c:	4bae      	ldr	r3, [pc, #696]	; (957d8 <Cl_Iso_Senddata+0x598>)
   9551e:	681a      	ldr	r2, [r3, #0]
   95520:	4bae      	ldr	r3, [pc, #696]	; (957dc <Cl_Iso_Senddata+0x59c>)
   95522:	4610      	mov	r0, r2
   95524:	4798      	blx	r3
   95526:	4603      	mov	r3, r0
   95528:	607b      	str	r3, [r7, #4]
			systemdataarray[count++] = tempdata.bytearray[0];
   9552a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   9552e:	1c5a      	adds	r2, r3, #1
   95530:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   95534:	793a      	ldrb	r2, [r7, #4]
   95536:	f107 0148 	add.w	r1, r7, #72	; 0x48
   9553a:	440b      	add	r3, r1
   9553c:	f803 2c3c 	strb.w	r2, [r3, #-60]
			systemdataarray[count++] = tempdata.bytearray[1];
   95540:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   95544:	1c5a      	adds	r2, r3, #1
   95546:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   9554a:	797a      	ldrb	r2, [r7, #5]
   9554c:	f107 0148 	add.w	r1, r7, #72	; 0x48
   95550:	440b      	add	r3, r1
   95552:	f803 2c3c 	strb.w	r2, [r3, #-60]
			systemdataarray[count++] = tempdata.bytearray[2];
   95556:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   9555a:	1c5a      	adds	r2, r3, #1
   9555c:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   95560:	79ba      	ldrb	r2, [r7, #6]
   95562:	f107 0148 	add.w	r1, r7, #72	; 0x48
   95566:	440b      	add	r3, r1
   95568:	f803 2c3c 	strb.w	r2, [r3, #-60]
			systemdataarray[count++] = tempdata.bytearray[3];
   9556c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   95570:	1c5a      	adds	r2, r3, #1
   95572:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   95576:	79fa      	ldrb	r2, [r7, #7]
   95578:	f107 0148 	add.w	r1, r7, #72	; 0x48
   9557c:	440b      	add	r3, r1
   9557e:	f803 2c3c 	strb.w	r2, [r3, #-60]
		}
		Cl_SysStat_GetSensor_Status_Query(SENSOR_APTSTATUS,&tempdata.Twobyte);
   95582:	1d3b      	adds	r3, r7, #4
   95584:	200b      	movs	r0, #11
   95586:	4619      	mov	r1, r3
   95588:	4b95      	ldr	r3, [pc, #596]	; (957e0 <Cl_Iso_Senddata+0x5a0>)
   9558a:	4798      	blx	r3
		{
			
			sensordatamillivolts = (tempdata.Twobyte * 0.8036) ;
   9558c:	88bb      	ldrh	r3, [r7, #4]
   9558e:	461a      	mov	r2, r3
   95590:	4b94      	ldr	r3, [pc, #592]	; (957e4 <Cl_Iso_Senddata+0x5a4>)
   95592:	4610      	mov	r0, r2
   95594:	4798      	blx	r3
   95596:	4602      	mov	r2, r0
   95598:	460b      	mov	r3, r1
   9559a:	4c93      	ldr	r4, [pc, #588]	; (957e8 <Cl_Iso_Senddata+0x5a8>)
   9559c:	4610      	mov	r0, r2
   9559e:	4619      	mov	r1, r3
   955a0:	a38b      	add	r3, pc, #556	; (adr r3, 957d0 <Cl_Iso_Senddata+0x590>)
   955a2:	e9d3 2300 	ldrd	r2, r3, [r3]
   955a6:	47a0      	blx	r4
   955a8:	4602      	mov	r2, r0
   955aa:	460b      	mov	r3, r1
   955ac:	4610      	mov	r0, r2
   955ae:	4619      	mov	r1, r3
   955b0:	4b8e      	ldr	r3, [pc, #568]	; (957ec <Cl_Iso_Senddata+0x5ac>)
   955b2:	4798      	blx	r3
   955b4:	4603      	mov	r3, r0
   955b6:	877b      	strh	r3, [r7, #58]	; 0x3a
			calibration_apt(sensordatamillivolts);
   955b8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
   955ba:	b21b      	sxth	r3, r3
   955bc:	4618      	mov	r0, r3
   955be:	4b8c      	ldr	r3, [pc, #560]	; (957f0 <Cl_Iso_Senddata+0x5b0>)
   955c0:	4798      	blx	r3
			apt =(apt*5 + pressure_final_apt)/6;
   955c2:	4b8c      	ldr	r3, [pc, #560]	; (957f4 <Cl_Iso_Senddata+0x5b4>)
   955c4:	681a      	ldr	r2, [r3, #0]
   955c6:	4b8c      	ldr	r3, [pc, #560]	; (957f8 <Cl_Iso_Senddata+0x5b8>)
   955c8:	4610      	mov	r0, r2
   955ca:	498c      	ldr	r1, [pc, #560]	; (957fc <Cl_Iso_Senddata+0x5bc>)
   955cc:	4798      	blx	r3
   955ce:	4603      	mov	r3, r0
   955d0:	4619      	mov	r1, r3
   955d2:	4b8b      	ldr	r3, [pc, #556]	; (95800 <Cl_Iso_Senddata+0x5c0>)
   955d4:	681a      	ldr	r2, [r3, #0]
   955d6:	4b8b      	ldr	r3, [pc, #556]	; (95804 <Cl_Iso_Senddata+0x5c4>)
   955d8:	4608      	mov	r0, r1
   955da:	4611      	mov	r1, r2
   955dc:	4798      	blx	r3
   955de:	4603      	mov	r3, r0
   955e0:	461a      	mov	r2, r3
   955e2:	4b89      	ldr	r3, [pc, #548]	; (95808 <Cl_Iso_Senddata+0x5c8>)
   955e4:	4610      	mov	r0, r2
   955e6:	4989      	ldr	r1, [pc, #548]	; (9580c <Cl_Iso_Senddata+0x5cc>)
   955e8:	4798      	blx	r3
   955ea:	4603      	mov	r3, r0
   955ec:	461a      	mov	r2, r3
   955ee:	4b81      	ldr	r3, [pc, #516]	; (957f4 <Cl_Iso_Senddata+0x5b4>)
   955f0:	601a      	str	r2, [r3, #0]
			tempdata.word	= apt;
   955f2:	4b80      	ldr	r3, [pc, #512]	; (957f4 <Cl_Iso_Senddata+0x5b4>)
   955f4:	681a      	ldr	r2, [r3, #0]
   955f6:	4b79      	ldr	r3, [pc, #484]	; (957dc <Cl_Iso_Senddata+0x59c>)
   955f8:	4610      	mov	r0, r2
   955fa:	4798      	blx	r3
   955fc:	4603      	mov	r3, r0
   955fe:	607b      	str	r3, [r7, #4]
			systemdataarray[count++] = tempdata.bytearray[0] ;
   95600:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   95604:	1c5a      	adds	r2, r3, #1
   95606:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   9560a:	793a      	ldrb	r2, [r7, #4]
   9560c:	f107 0148 	add.w	r1, r7, #72	; 0x48
   95610:	440b      	add	r3, r1
   95612:	f803 2c3c 	strb.w	r2, [r3, #-60]
			systemdataarray[count++] = tempdata.bytearray[1] ;
   95616:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   9561a:	1c5a      	adds	r2, r3, #1
   9561c:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   95620:	797a      	ldrb	r2, [r7, #5]
   95622:	f107 0148 	add.w	r1, r7, #72	; 0x48
   95626:	440b      	add	r3, r1
   95628:	f803 2c3c 	strb.w	r2, [r3, #-60]
			systemdataarray[count++] = tempdata.bytearray[2] ;
   9562c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   95630:	1c5a      	adds	r2, r3, #1
   95632:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   95636:	79ba      	ldrb	r2, [r7, #6]
   95638:	f107 0148 	add.w	r1, r7, #72	; 0x48
   9563c:	440b      	add	r3, r1
   9563e:	f803 2c3c 	strb.w	r2, [r3, #-60]
			systemdataarray[count++] = tempdata.bytearray[3] ;
   95642:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   95646:	1c5a      	adds	r2, r3, #1
   95648:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   9564c:	79fa      	ldrb	r2, [r7, #7]
   9564e:	f107 0148 	add.w	r1, r7, #72	; 0x48
   95652:	440b      	add	r3, r1
   95654:	f803 2c3c 	strb.w	r2, [r3, #-60]
		}
		Cl_SysStat_GetSensor_Status_Query(SENSOR_VPTSTATUS,&tempdata.Twobyte);
   95658:	1d3b      	adds	r3, r7, #4
   9565a:	200c      	movs	r0, #12
   9565c:	4619      	mov	r1, r3
   9565e:	4b60      	ldr	r3, [pc, #384]	; (957e0 <Cl_Iso_Senddata+0x5a0>)
   95660:	4798      	blx	r3
		{
			sensordatamillivolts = (tempdata.Twobyte * 0.8036) ;
   95662:	88bb      	ldrh	r3, [r7, #4]
   95664:	461a      	mov	r2, r3
   95666:	4b5f      	ldr	r3, [pc, #380]	; (957e4 <Cl_Iso_Senddata+0x5a4>)
   95668:	4610      	mov	r0, r2
   9566a:	4798      	blx	r3
   9566c:	4602      	mov	r2, r0
   9566e:	460b      	mov	r3, r1
   95670:	4c5d      	ldr	r4, [pc, #372]	; (957e8 <Cl_Iso_Senddata+0x5a8>)
   95672:	4610      	mov	r0, r2
   95674:	4619      	mov	r1, r3
   95676:	a356      	add	r3, pc, #344	; (adr r3, 957d0 <Cl_Iso_Senddata+0x590>)
   95678:	e9d3 2300 	ldrd	r2, r3, [r3]
   9567c:	47a0      	blx	r4
   9567e:	4602      	mov	r2, r0
   95680:	460b      	mov	r3, r1
   95682:	4610      	mov	r0, r2
   95684:	4619      	mov	r1, r3
   95686:	4b59      	ldr	r3, [pc, #356]	; (957ec <Cl_Iso_Senddata+0x5ac>)
   95688:	4798      	blx	r3
   9568a:	4603      	mov	r3, r0
   9568c:	877b      	strh	r3, [r7, #58]	; 0x3a
			calibration_vpt(sensordatamillivolts);
   9568e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
   95690:	b21b      	sxth	r3, r3
   95692:	4618      	mov	r0, r3
   95694:	4b5e      	ldr	r3, [pc, #376]	; (95810 <Cl_Iso_Senddata+0x5d0>)
   95696:	4798      	blx	r3
			vpt =(vpt*5 + pressure_final_vpt)/6;
   95698:	4b5e      	ldr	r3, [pc, #376]	; (95814 <Cl_Iso_Senddata+0x5d4>)
   9569a:	681a      	ldr	r2, [r3, #0]
   9569c:	4b56      	ldr	r3, [pc, #344]	; (957f8 <Cl_Iso_Senddata+0x5b8>)
   9569e:	4610      	mov	r0, r2
   956a0:	4956      	ldr	r1, [pc, #344]	; (957fc <Cl_Iso_Senddata+0x5bc>)
   956a2:	4798      	blx	r3
   956a4:	4603      	mov	r3, r0
   956a6:	4619      	mov	r1, r3
   956a8:	4b5b      	ldr	r3, [pc, #364]	; (95818 <Cl_Iso_Senddata+0x5d8>)
   956aa:	681a      	ldr	r2, [r3, #0]
   956ac:	4b55      	ldr	r3, [pc, #340]	; (95804 <Cl_Iso_Senddata+0x5c4>)
   956ae:	4608      	mov	r0, r1
   956b0:	4611      	mov	r1, r2
   956b2:	4798      	blx	r3
   956b4:	4603      	mov	r3, r0
   956b6:	461a      	mov	r2, r3
   956b8:	4b53      	ldr	r3, [pc, #332]	; (95808 <Cl_Iso_Senddata+0x5c8>)
   956ba:	4610      	mov	r0, r2
   956bc:	4953      	ldr	r1, [pc, #332]	; (9580c <Cl_Iso_Senddata+0x5cc>)
   956be:	4798      	blx	r3
   956c0:	4603      	mov	r3, r0
   956c2:	461a      	mov	r2, r3
   956c4:	4b53      	ldr	r3, [pc, #332]	; (95814 <Cl_Iso_Senddata+0x5d4>)
   956c6:	601a      	str	r2, [r3, #0]
			tempdata.word	 = vpt;
   956c8:	4b52      	ldr	r3, [pc, #328]	; (95814 <Cl_Iso_Senddata+0x5d4>)
   956ca:	681a      	ldr	r2, [r3, #0]
   956cc:	4b43      	ldr	r3, [pc, #268]	; (957dc <Cl_Iso_Senddata+0x59c>)
   956ce:	4610      	mov	r0, r2
   956d0:	4798      	blx	r3
   956d2:	4603      	mov	r3, r0
   956d4:	607b      	str	r3, [r7, #4]
			systemdataarray[count++] = tempdata.bytearray[0] ;
   956d6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   956da:	1c5a      	adds	r2, r3, #1
   956dc:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   956e0:	793a      	ldrb	r2, [r7, #4]
   956e2:	f107 0148 	add.w	r1, r7, #72	; 0x48
   956e6:	440b      	add	r3, r1
   956e8:	f803 2c3c 	strb.w	r2, [r3, #-60]
			systemdataarray[count++] = tempdata.bytearray[1] ;
   956ec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   956f0:	1c5a      	adds	r2, r3, #1
   956f2:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   956f6:	797a      	ldrb	r2, [r7, #5]
   956f8:	f107 0148 	add.w	r1, r7, #72	; 0x48
   956fc:	440b      	add	r3, r1
   956fe:	f803 2c3c 	strb.w	r2, [r3, #-60]
			systemdataarray[count++] = tempdata.bytearray[2] ;
   95702:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   95706:	1c5a      	adds	r2, r3, #1
   95708:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   9570c:	79ba      	ldrb	r2, [r7, #6]
   9570e:	f107 0148 	add.w	r1, r7, #72	; 0x48
   95712:	440b      	add	r3, r1
   95714:	f803 2c3c 	strb.w	r2, [r3, #-60]
			systemdataarray[count++] = tempdata.bytearray[3] ;
   95718:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   9571c:	1c5a      	adds	r2, r3, #1
   9571e:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   95722:	79fa      	ldrb	r2, [r7, #7]
   95724:	f107 0148 	add.w	r1, r7, #72	; 0x48
   95728:	440b      	add	r3, r1
   9572a:	f803 2c3c 	strb.w	r2, [r3, #-60]
		}
			Cl_SysStat_GetSensor_Status_Query(SENSOR_PS1STATUS,&tempdata.Twobyte);
   9572e:	1d3b      	adds	r3, r7, #4
   95730:	200e      	movs	r0, #14
   95732:	4619      	mov	r1, r3
   95734:	4b2a      	ldr	r3, [pc, #168]	; (957e0 <Cl_Iso_Senddata+0x5a0>)
   95736:	4798      	blx	r3
			sensordatamillivolts = (tempdata.Twobyte * 0.8036) ;
   95738:	88bb      	ldrh	r3, [r7, #4]
   9573a:	461a      	mov	r2, r3
   9573c:	4b29      	ldr	r3, [pc, #164]	; (957e4 <Cl_Iso_Senddata+0x5a4>)
   9573e:	4610      	mov	r0, r2
   95740:	4798      	blx	r3
   95742:	4602      	mov	r2, r0
   95744:	460b      	mov	r3, r1
   95746:	4c28      	ldr	r4, [pc, #160]	; (957e8 <Cl_Iso_Senddata+0x5a8>)
   95748:	4610      	mov	r0, r2
   9574a:	4619      	mov	r1, r3
   9574c:	a320      	add	r3, pc, #128	; (adr r3, 957d0 <Cl_Iso_Senddata+0x590>)
   9574e:	e9d3 2300 	ldrd	r2, r3, [r3]
   95752:	47a0      	blx	r4
   95754:	4602      	mov	r2, r0
   95756:	460b      	mov	r3, r1
   95758:	4610      	mov	r0, r2
   9575a:	4619      	mov	r1, r3
   9575c:	4b23      	ldr	r3, [pc, #140]	; (957ec <Cl_Iso_Senddata+0x5ac>)
   9575e:	4798      	blx	r3
   95760:	4603      	mov	r3, r0
   95762:	877b      	strh	r3, [r7, #58]	; 0x3a
			calibration_ps1(sensordatamillivolts);
   95764:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
   95766:	b21b      	sxth	r3, r3
   95768:	4618      	mov	r0, r3
   9576a:	4b2c      	ldr	r3, [pc, #176]	; (9581c <Cl_Iso_Senddata+0x5dc>)
   9576c:	4798      	blx	r3
			ps1=(ps1*5 + pressure_final_ps1)/6;
   9576e:	4b2c      	ldr	r3, [pc, #176]	; (95820 <Cl_Iso_Senddata+0x5e0>)
   95770:	681a      	ldr	r2, [r3, #0]
   95772:	4b21      	ldr	r3, [pc, #132]	; (957f8 <Cl_Iso_Senddata+0x5b8>)
   95774:	4610      	mov	r0, r2
   95776:	4921      	ldr	r1, [pc, #132]	; (957fc <Cl_Iso_Senddata+0x5bc>)
   95778:	4798      	blx	r3
   9577a:	4603      	mov	r3, r0
   9577c:	4619      	mov	r1, r3
   9577e:	4b29      	ldr	r3, [pc, #164]	; (95824 <Cl_Iso_Senddata+0x5e4>)
   95780:	681a      	ldr	r2, [r3, #0]
   95782:	4b20      	ldr	r3, [pc, #128]	; (95804 <Cl_Iso_Senddata+0x5c4>)
   95784:	4608      	mov	r0, r1
   95786:	4611      	mov	r1, r2
   95788:	4798      	blx	r3
   9578a:	4603      	mov	r3, r0
   9578c:	461a      	mov	r2, r3
   9578e:	4b1e      	ldr	r3, [pc, #120]	; (95808 <Cl_Iso_Senddata+0x5c8>)
   95790:	4610      	mov	r0, r2
   95792:	491e      	ldr	r1, [pc, #120]	; (9580c <Cl_Iso_Senddata+0x5cc>)
   95794:	4798      	blx	r3
   95796:	4603      	mov	r3, r0
   95798:	461a      	mov	r2, r3
   9579a:	4b21      	ldr	r3, [pc, #132]	; (95820 <Cl_Iso_Senddata+0x5e0>)
   9579c:	601a      	str	r2, [r3, #0]
	
			Cl_SysStat_GetSensor_Status_Query(SENSOR_PS2STATUS,&tempdata.Twobyte);
   9579e:	1d3b      	adds	r3, r7, #4
   957a0:	200f      	movs	r0, #15
   957a2:	4619      	mov	r1, r3
   957a4:	4b0e      	ldr	r3, [pc, #56]	; (957e0 <Cl_Iso_Senddata+0x5a0>)
   957a6:	4798      	blx	r3
			sensordatamillivolts = (tempdata.Twobyte * 0.8036) ;
   957a8:	88bb      	ldrh	r3, [r7, #4]
   957aa:	461a      	mov	r2, r3
   957ac:	4b0d      	ldr	r3, [pc, #52]	; (957e4 <Cl_Iso_Senddata+0x5a4>)
   957ae:	4610      	mov	r0, r2
   957b0:	4798      	blx	r3
   957b2:	4602      	mov	r2, r0
   957b4:	460b      	mov	r3, r1
   957b6:	4c0c      	ldr	r4, [pc, #48]	; (957e8 <Cl_Iso_Senddata+0x5a8>)
   957b8:	4610      	mov	r0, r2
   957ba:	4619      	mov	r1, r3
   957bc:	a304      	add	r3, pc, #16	; (adr r3, 957d0 <Cl_Iso_Senddata+0x590>)
   957be:	e9d3 2300 	ldrd	r2, r3, [r3]
   957c2:	47a0      	blx	r4
   957c4:	4602      	mov	r2, r0
   957c6:	460b      	mov	r3, r1
   957c8:	4610      	mov	r0, r2
   957ca:	4619      	mov	r1, r3
   957cc:	e02c      	b.n	95828 <Cl_Iso_Senddata+0x5e8>
   957ce:	bf00      	nop
   957d0:	58e21965 	.word	0x58e21965
   957d4:	3fe9b717 	.word	0x3fe9b717
   957d8:	20071b00 	.word	0x20071b00
   957dc:	000a6d31 	.word	0x000a6d31
   957e0:	0008e7f9 	.word	0x0008e7f9
   957e4:	000a600d 	.word	0x000a600d
   957e8:	000a60d9 	.word	0x000a60d9
   957ec:	000a665d 	.word	0x000a665d
   957f0:	000840d9 	.word	0x000840d9
   957f4:	20071b08 	.word	0x20071b08
   957f8:	000a6959 	.word	0x000a6959
   957fc:	40a00000 	.word	0x40a00000
   95800:	20072170 	.word	0x20072170
   95804:	000a6749 	.word	0x000a6749
   95808:	000a6ac1 	.word	0x000a6ac1
   9580c:	40c00000 	.word	0x40c00000
   95810:	00084271 	.word	0x00084271
   95814:	20071b0c 	.word	0x20071b0c
   95818:	20071784 	.word	0x20071784
   9581c:	0008440d 	.word	0x0008440d
   95820:	20071b10 	.word	0x20071b10
   95824:	20071788 	.word	0x20071788
   95828:	4b76      	ldr	r3, [pc, #472]	; (95a04 <Cl_Iso_Senddata+0x7c4>)
   9582a:	4798      	blx	r3
   9582c:	4603      	mov	r3, r0
   9582e:	877b      	strh	r3, [r7, #58]	; 0x3a
			calibration_ps2(sensordatamillivolts);
   95830:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
   95832:	b21b      	sxth	r3, r3
   95834:	4618      	mov	r0, r3
   95836:	4b74      	ldr	r3, [pc, #464]	; (95a08 <Cl_Iso_Senddata+0x7c8>)
   95838:	4798      	blx	r3
			ps2=(ps2*5 + pressure_final_ps2)/6;
   9583a:	4b74      	ldr	r3, [pc, #464]	; (95a0c <Cl_Iso_Senddata+0x7cc>)
   9583c:	681a      	ldr	r2, [r3, #0]
   9583e:	4b74      	ldr	r3, [pc, #464]	; (95a10 <Cl_Iso_Senddata+0x7d0>)
   95840:	4610      	mov	r0, r2
   95842:	4974      	ldr	r1, [pc, #464]	; (95a14 <Cl_Iso_Senddata+0x7d4>)
   95844:	4798      	blx	r3
   95846:	4603      	mov	r3, r0
   95848:	4619      	mov	r1, r3
   9584a:	4b73      	ldr	r3, [pc, #460]	; (95a18 <Cl_Iso_Senddata+0x7d8>)
   9584c:	681a      	ldr	r2, [r3, #0]
   9584e:	4b73      	ldr	r3, [pc, #460]	; (95a1c <Cl_Iso_Senddata+0x7dc>)
   95850:	4608      	mov	r0, r1
   95852:	4611      	mov	r1, r2
   95854:	4798      	blx	r3
   95856:	4603      	mov	r3, r0
   95858:	461a      	mov	r2, r3
   9585a:	4b71      	ldr	r3, [pc, #452]	; (95a20 <Cl_Iso_Senddata+0x7e0>)
   9585c:	4610      	mov	r0, r2
   9585e:	4971      	ldr	r1, [pc, #452]	; (95a24 <Cl_Iso_Senddata+0x7e4>)
   95860:	4798      	blx	r3
   95862:	4603      	mov	r3, r0
   95864:	461a      	mov	r2, r3
   95866:	4b69      	ldr	r3, [pc, #420]	; (95a0c <Cl_Iso_Senddata+0x7cc>)
   95868:	601a      	str	r2, [r3, #0]
			
			tempdata.word	 = (((apt + vpt) - (ps1+ps2))/2)-25;
   9586a:	4b6f      	ldr	r3, [pc, #444]	; (95a28 <Cl_Iso_Senddata+0x7e8>)
   9586c:	6819      	ldr	r1, [r3, #0]
   9586e:	4b6f      	ldr	r3, [pc, #444]	; (95a2c <Cl_Iso_Senddata+0x7ec>)
   95870:	681a      	ldr	r2, [r3, #0]
   95872:	4b6a      	ldr	r3, [pc, #424]	; (95a1c <Cl_Iso_Senddata+0x7dc>)
   95874:	4608      	mov	r0, r1
   95876:	4611      	mov	r1, r2
   95878:	4798      	blx	r3
   9587a:	4603      	mov	r3, r0
   9587c:	461c      	mov	r4, r3
   9587e:	4b6c      	ldr	r3, [pc, #432]	; (95a30 <Cl_Iso_Senddata+0x7f0>)
   95880:	6819      	ldr	r1, [r3, #0]
   95882:	4b62      	ldr	r3, [pc, #392]	; (95a0c <Cl_Iso_Senddata+0x7cc>)
   95884:	681a      	ldr	r2, [r3, #0]
   95886:	4b65      	ldr	r3, [pc, #404]	; (95a1c <Cl_Iso_Senddata+0x7dc>)
   95888:	4608      	mov	r0, r1
   9588a:	4611      	mov	r1, r2
   9588c:	4798      	blx	r3
   9588e:	4603      	mov	r3, r0
   95890:	461a      	mov	r2, r3
   95892:	4b68      	ldr	r3, [pc, #416]	; (95a34 <Cl_Iso_Senddata+0x7f4>)
   95894:	4620      	mov	r0, r4
   95896:	4611      	mov	r1, r2
   95898:	4798      	blx	r3
   9589a:	4603      	mov	r3, r0
   9589c:	461a      	mov	r2, r3
   9589e:	4b60      	ldr	r3, [pc, #384]	; (95a20 <Cl_Iso_Senddata+0x7e0>)
   958a0:	4610      	mov	r0, r2
   958a2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   958a6:	4798      	blx	r3
   958a8:	4603      	mov	r3, r0
   958aa:	461a      	mov	r2, r3
   958ac:	4b61      	ldr	r3, [pc, #388]	; (95a34 <Cl_Iso_Senddata+0x7f4>)
   958ae:	4610      	mov	r0, r2
   958b0:	4961      	ldr	r1, [pc, #388]	; (95a38 <Cl_Iso_Senddata+0x7f8>)
   958b2:	4798      	blx	r3
   958b4:	4603      	mov	r3, r0
   958b6:	461a      	mov	r2, r3
   958b8:	4b60      	ldr	r3, [pc, #384]	; (95a3c <Cl_Iso_Senddata+0x7fc>)
   958ba:	4610      	mov	r0, r2
   958bc:	4798      	blx	r3
   958be:	4603      	mov	r3, r0
   958c0:	607b      	str	r3, [r7, #4]


			systemdataarray[count++] = tempdata.bytearray[0] ;
   958c2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   958c6:	1c5a      	adds	r2, r3, #1
   958c8:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   958cc:	793a      	ldrb	r2, [r7, #4]
   958ce:	f107 0148 	add.w	r1, r7, #72	; 0x48
   958d2:	440b      	add	r3, r1
   958d4:	f803 2c3c 	strb.w	r2, [r3, #-60]
			systemdataarray[count++] = tempdata.bytearray[1] ;
   958d8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   958dc:	1c5a      	adds	r2, r3, #1
   958de:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   958e2:	797a      	ldrb	r2, [r7, #5]
   958e4:	f107 0148 	add.w	r1, r7, #72	; 0x48
   958e8:	440b      	add	r3, r1
   958ea:	f803 2c3c 	strb.w	r2, [r3, #-60]
			systemdataarray[count++] = tempdata.bytearray[2] ;
   958ee:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   958f2:	1c5a      	adds	r2, r3, #1
   958f4:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   958f8:	79ba      	ldrb	r2, [r7, #6]
   958fa:	f107 0148 	add.w	r1, r7, #72	; 0x48
   958fe:	440b      	add	r3, r1
   95900:	f803 2c3c 	strb.w	r2, [r3, #-60]
			systemdataarray[count++] = tempdata.bytearray[3] ;
   95904:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   95908:	1c5a      	adds	r2, r3, #1
   9590a:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   9590e:	79fa      	ldrb	r2, [r7, #7]
   95910:	f107 0148 	add.w	r1, r7, #72	; 0x48
   95914:	440b      	add	r3, r1
   95916:	f803 2c3c 	strb.w	r2, [r3, #-60]
// 			systemdataarray[count++] = 0x0A; // tmp
// 			systemdataarray[count++] = 0x0A; // tmp
// 			systemdataarray[count++] = 0x00;
// 			systemdataarray[count++] = 0x00;
// 			
			tempdata.word = ufRemoved ;
   9591a:	4b49      	ldr	r3, [pc, #292]	; (95a40 <Cl_Iso_Senddata+0x800>)
   9591c:	681a      	ldr	r2, [r3, #0]
   9591e:	4b47      	ldr	r3, [pc, #284]	; (95a3c <Cl_Iso_Senddata+0x7fc>)
   95920:	4610      	mov	r0, r2
   95922:	4798      	blx	r3
   95924:	4603      	mov	r3, r0
   95926:	607b      	str	r3, [r7, #4]
			
			systemdataarray[count++] = tempdata.bytearray[0] ;
   95928:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   9592c:	1c5a      	adds	r2, r3, #1
   9592e:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   95932:	793a      	ldrb	r2, [r7, #4]
   95934:	f107 0148 	add.w	r1, r7, #72	; 0x48
   95938:	440b      	add	r3, r1
   9593a:	f803 2c3c 	strb.w	r2, [r3, #-60]
			systemdataarray[count++] = tempdata.bytearray[1] ;
   9593e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   95942:	1c5a      	adds	r2, r3, #1
   95944:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   95948:	797a      	ldrb	r2, [r7, #5]
   9594a:	f107 0148 	add.w	r1, r7, #72	; 0x48
   9594e:	440b      	add	r3, r1
   95950:	f803 2c3c 	strb.w	r2, [r3, #-60]
			systemdataarray[count++] = tempdata.bytearray[2] ;
   95954:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   95958:	1c5a      	adds	r2, r3, #1
   9595a:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   9595e:	79ba      	ldrb	r2, [r7, #6]
   95960:	f107 0148 	add.w	r1, r7, #72	; 0x48
   95964:	440b      	add	r3, r1
   95966:	f803 2c3c 	strb.w	r2, [r3, #-60]
			systemdataarray[count++] = tempdata.bytearray[3] ;
   9596a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   9596e:	1c5a      	adds	r2, r3, #1
   95970:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   95974:	79fa      	ldrb	r2, [r7, #7]
   95976:	f107 0148 	add.w	r1, r7, #72	; 0x48
   9597a:	440b      	add	r3, r1
   9597c:	f803 2c3c 	strb.w	r2, [r3, #-60]
			
			tempdata.word = Treatdata[ID_ufrate] ;
   95980:	4b30      	ldr	r3, [pc, #192]	; (95a44 <Cl_Iso_Senddata+0x804>)
   95982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   95984:	607b      	str	r3, [r7, #4]
			
			systemdataarray[count++] = tempdata.bytearray[0] ;
   95986:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   9598a:	1c5a      	adds	r2, r3, #1
   9598c:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   95990:	793a      	ldrb	r2, [r7, #4]
   95992:	f107 0148 	add.w	r1, r7, #72	; 0x48
   95996:	440b      	add	r3, r1
   95998:	f803 2c3c 	strb.w	r2, [r3, #-60]
			systemdataarray[count++] = tempdata.bytearray[1] ;
   9599c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   959a0:	1c5a      	adds	r2, r3, #1
   959a2:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   959a6:	797a      	ldrb	r2, [r7, #5]
   959a8:	f107 0148 	add.w	r1, r7, #72	; 0x48
   959ac:	440b      	add	r3, r1
   959ae:	f803 2c3c 	strb.w	r2, [r3, #-60]
			systemdataarray[count++] = tempdata.bytearray[2] ;
   959b2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   959b6:	1c5a      	adds	r2, r3, #1
   959b8:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   959bc:	79ba      	ldrb	r2, [r7, #6]
   959be:	f107 0148 	add.w	r1, r7, #72	; 0x48
   959c2:	440b      	add	r3, r1
   959c4:	f803 2c3c 	strb.w	r2, [r3, #-60]
			systemdataarray[count++] = tempdata.bytearray[3] ;
   959c8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   959cc:	1c5a      	adds	r2, r3, #1
   959ce:	f887 2047 	strb.w	r2, [r7, #71]	; 0x47
   959d2:	79fa      	ldrb	r2, [r7, #7]
   959d4:	f107 0148 	add.w	r1, r7, #72	; 0x48
   959d8:	440b      	add	r3, r1
   959da:	f803 2c3c 	strb.w	r2, [r3, #-60]
			
			cl_isouf_retcode = Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&systemdataarray,count);
   959de:	f107 020c 	add.w	r2, r7, #12
   959e2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   959e6:	202a      	movs	r0, #42	; 0x2a
   959e8:	4611      	mov	r1, r2
   959ea:	461a      	mov	r2, r3
   959ec:	4b16      	ldr	r3, [pc, #88]	; (95a48 <Cl_Iso_Senddata+0x808>)
   959ee:	4798      	blx	r3
   959f0:	4603      	mov	r3, r0
   959f2:	461a      	mov	r2, r3
   959f4:	4b15      	ldr	r3, [pc, #84]	; (95a4c <Cl_Iso_Senddata+0x80c>)
   959f6:	701a      	strb	r2, [r3, #0]
	//Cl_dlsisretcode = Cl_SendDatatoconsole(command,&systemdataarray,count);
	
	return CL_OK;
   959f8:	2300      	movs	r3, #0
	
	
}
   959fa:	4618      	mov	r0, r3
   959fc:	374c      	adds	r7, #76	; 0x4c
   959fe:	46bd      	mov	sp, r7
   95a00:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}
   95a04:	000a665d 	.word	0x000a665d
   95a08:	00084529 	.word	0x00084529
   95a0c:	20071b14 	.word	0x20071b14
   95a10:	000a6959 	.word	0x000a6959
   95a14:	40a00000 	.word	0x40a00000
   95a18:	2007178c 	.word	0x2007178c
   95a1c:	000a6749 	.word	0x000a6749
   95a20:	000a6ac1 	.word	0x000a6ac1
   95a24:	40c00000 	.word	0x40c00000
   95a28:	20071b08 	.word	0x20071b08
   95a2c:	20071b0c 	.word	0x20071b0c
   95a30:	20071b10 	.word	0x20071b10
   95a34:	000a6745 	.word	0x000a6745
   95a38:	41c80000 	.word	0x41c80000
   95a3c:	000a6d31 	.word	0x000a6d31
   95a40:	20071b24 	.word	0x20071b24
   95a44:	2007265c 	.word	0x2007265c
   95a48:	0009ba51 	.word	0x0009ba51
   95a4c:	20071af6 	.word	0x20071af6

00095a50 <Cl_Iso_UpdateTimeInfo>:

Cl_ReturnCodeType Cl_Iso_UpdateTimeInfo(void)
{
   95a50:	b580      	push	{r7, lr}
   95a52:	b084      	sub	sp, #16
   95a54:	af00      	add	r7, sp, #0
	
	Cl_ReturnCodeType Cl_rinseretcode = CL_ERROR;
   95a56:	2304      	movs	r3, #4
   95a58:	73fb      	strb	r3, [r7, #15]
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   95a5a:	2351      	movs	r3, #81	; 0x51
   95a5c:	73bb      	strb	r3, [r7, #14]
	Cl_Uint8Type data[7] = {0,0,0,0,0 ,0,0};
   95a5e:	2300      	movs	r3, #0
   95a60:	713b      	strb	r3, [r7, #4]
   95a62:	2300      	movs	r3, #0
   95a64:	717b      	strb	r3, [r7, #5]
   95a66:	2300      	movs	r3, #0
   95a68:	71bb      	strb	r3, [r7, #6]
   95a6a:	2300      	movs	r3, #0
   95a6c:	71fb      	strb	r3, [r7, #7]
   95a6e:	2300      	movs	r3, #0
   95a70:	723b      	strb	r3, [r7, #8]
   95a72:	2300      	movs	r3, #0
   95a74:	727b      	strb	r3, [r7, #9]
   95a76:	2300      	movs	r3, #0
   95a78:	72bb      	strb	r3, [r7, #10]
	
	command = CON_TX_COMMAND_REM_TIME;
   95a7a:	230a      	movs	r3, #10
   95a7c:	73bb      	strb	r3, [r7, #14]

	
	data[0]= (Cl_Uint8Type)ISOUF_DATA;
   95a7e:	230c      	movs	r3, #12
   95a80:	713b      	strb	r3, [r7, #4]
	data[1]= (Cl_Uint8Type)1;
   95a82:	2301      	movs	r3, #1
   95a84:	717b      	strb	r3, [r7, #5]

	
	Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,2);
   95a86:	7bba      	ldrb	r2, [r7, #14]
   95a88:	1d3b      	adds	r3, r7, #4
   95a8a:	4610      	mov	r0, r2
   95a8c:	4619      	mov	r1, r3
   95a8e:	2202      	movs	r2, #2
   95a90:	4b04      	ldr	r3, [pc, #16]	; (95aa4 <Cl_Iso_UpdateTimeInfo+0x54>)
   95a92:	4798      	blx	r3
   95a94:	4603      	mov	r3, r0
   95a96:	73fb      	strb	r3, [r7, #15]
	return CL_OK;
   95a98:	2300      	movs	r3, #0
	
}
   95a9a:	4618      	mov	r0, r3
   95a9c:	3710      	adds	r7, #16
   95a9e:	46bd      	mov	sp, r7
   95aa0:	bd80      	pop	{r7, pc}
   95aa2:	bf00      	nop
   95aa4:	0009ba51 	.word	0x0009ba51

00095aa8 <cl_checkforblooddetection>:

Cl_ReturnCodeType cl_checkforblooddetection(){
   95aa8:	b580      	push	{r7, lr}
   95aaa:	b082      	sub	sp, #8
   95aac:	af00      	add	r7, sp, #0
	
	Cl_Uint16Type bldtemp = 0;
   95aae:	2300      	movs	r3, #0
   95ab0:	80fb      	strh	r3, [r7, #6]
	
	Cl_SysStat_GetSensor_Status_Query(SENSOR_BDSTATUS , &bldtemp);
   95ab2:	1dbb      	adds	r3, r7, #6
   95ab4:	200a      	movs	r0, #10
   95ab6:	4619      	mov	r1, r3
   95ab8:	4b05      	ldr	r3, [pc, #20]	; (95ad0 <cl_checkforblooddetection+0x28>)
   95aba:	4798      	blx	r3
	
	if(bldtemp == 1){
   95abc:	88fb      	ldrh	r3, [r7, #6]
   95abe:	2b01      	cmp	r3, #1
   95ac0:	d101      	bne.n	95ac6 <cl_checkforblooddetection+0x1e>
		return CL_OK;
   95ac2:	2300      	movs	r3, #0
   95ac4:	e000      	b.n	95ac8 <cl_checkforblooddetection+0x20>
	}
	else{
		return CL_OK; // should be CL_REJECTED
   95ac6:	2300      	movs	r3, #0
	}
	
	
}
   95ac8:	4618      	mov	r0, r3
   95aca:	3708      	adds	r7, #8
   95acc:	46bd      	mov	sp, r7
   95ace:	bd80      	pop	{r7, pc}
   95ad0:	0008e7f9 	.word	0x0008e7f9

00095ad4 <cl_isouf_translatemacevent>:

Cl_ReturnCodeType  cl_isouf_translatemacevent(Cl_Mac_EventsType Cl_MacISOufEvt,cl_isouf_events* cl_isouf_event)
{
   95ad4:	b480      	push	{r7}
   95ad6:	b083      	sub	sp, #12
   95ad8:	af00      	add	r7, sp, #0
   95ada:	4603      	mov	r3, r0
   95adc:	6039      	str	r1, [r7, #0]
   95ade:	71fb      	strb	r3, [r7, #7]
	switch(Cl_MacISOufEvt)
   95ae0:	79fb      	ldrb	r3, [r7, #7]
   95ae2:	3b07      	subs	r3, #7
   95ae4:	2b57      	cmp	r3, #87	; 0x57
   95ae6:	f200 8127 	bhi.w	95d38 <cl_isouf_translatemacevent+0x264>
   95aea:	a201      	add	r2, pc, #4	; (adr r2, 95af0 <cl_isouf_translatemacevent+0x1c>)
   95aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   95af0:	00095c91 	.word	0x00095c91
   95af4:	00095d39 	.word	0x00095d39
   95af8:	00095d39 	.word	0x00095d39
   95afc:	00095c71 	.word	0x00095c71
   95b00:	00095c79 	.word	0x00095c79
   95b04:	00095c69 	.word	0x00095c69
   95b08:	00095c89 	.word	0x00095c89
   95b0c:	00095c81 	.word	0x00095c81
   95b10:	00095d39 	.word	0x00095d39
   95b14:	00095d39 	.word	0x00095d39
   95b18:	00095d39 	.word	0x00095d39
   95b1c:	00095d39 	.word	0x00095d39
   95b20:	00095d39 	.word	0x00095d39
   95b24:	00095d39 	.word	0x00095d39
   95b28:	00095ce9 	.word	0x00095ce9
   95b2c:	00095d39 	.word	0x00095d39
   95b30:	00095c99 	.word	0x00095c99
   95b34:	00095d39 	.word	0x00095d39
   95b38:	00095d39 	.word	0x00095d39
   95b3c:	00095d29 	.word	0x00095d29
   95b40:	00095d31 	.word	0x00095d31
   95b44:	00095d39 	.word	0x00095d39
   95b48:	00095d39 	.word	0x00095d39
   95b4c:	00095d39 	.word	0x00095d39
   95b50:	00095d39 	.word	0x00095d39
   95b54:	00095d39 	.word	0x00095d39
   95b58:	00095d39 	.word	0x00095d39
   95b5c:	00095cd9 	.word	0x00095cd9
   95b60:	00095ce1 	.word	0x00095ce1
   95b64:	00095d39 	.word	0x00095d39
   95b68:	00095d39 	.word	0x00095d39
   95b6c:	00095d11 	.word	0x00095d11
   95b70:	00095cf1 	.word	0x00095cf1
   95b74:	00095cf9 	.word	0x00095cf9
   95b78:	00095c61 	.word	0x00095c61
   95b7c:	00095d39 	.word	0x00095d39
   95b80:	00095d39 	.word	0x00095d39
   95b84:	00095d39 	.word	0x00095d39
   95b88:	00095cd1 	.word	0x00095cd1
   95b8c:	00095cc9 	.word	0x00095cc9
   95b90:	00095d39 	.word	0x00095d39
   95b94:	00095d39 	.word	0x00095d39
   95b98:	00095d39 	.word	0x00095d39
   95b9c:	00095d39 	.word	0x00095d39
   95ba0:	00095d39 	.word	0x00095d39
   95ba4:	00095d39 	.word	0x00095d39
   95ba8:	00095d39 	.word	0x00095d39
   95bac:	00095d39 	.word	0x00095d39
   95bb0:	00095d39 	.word	0x00095d39
   95bb4:	00095ca1 	.word	0x00095ca1
   95bb8:	00095d39 	.word	0x00095d39
   95bbc:	00095ca9 	.word	0x00095ca9
   95bc0:	00095cb1 	.word	0x00095cb1
   95bc4:	00095cb9 	.word	0x00095cb9
   95bc8:	00095cc1 	.word	0x00095cc1
   95bcc:	00095d39 	.word	0x00095d39
   95bd0:	00095d39 	.word	0x00095d39
   95bd4:	00095d39 	.word	0x00095d39
   95bd8:	00095d39 	.word	0x00095d39
   95bdc:	00095d39 	.word	0x00095d39
   95be0:	00095d39 	.word	0x00095d39
   95be4:	00095d39 	.word	0x00095d39
   95be8:	00095d39 	.word	0x00095d39
   95bec:	00095d39 	.word	0x00095d39
   95bf0:	00095d39 	.word	0x00095d39
   95bf4:	00095d39 	.word	0x00095d39
   95bf8:	00095d39 	.word	0x00095d39
   95bfc:	00095d39 	.word	0x00095d39
   95c00:	00095d39 	.word	0x00095d39
   95c04:	00095d39 	.word	0x00095d39
   95c08:	00095d39 	.word	0x00095d39
   95c0c:	00095d39 	.word	0x00095d39
   95c10:	00095d39 	.word	0x00095d39
   95c14:	00095d39 	.word	0x00095d39
   95c18:	00095d39 	.word	0x00095d39
   95c1c:	00095d39 	.word	0x00095d39
   95c20:	00095d39 	.word	0x00095d39
   95c24:	00095d39 	.word	0x00095d39
   95c28:	00095d39 	.word	0x00095d39
   95c2c:	00095d39 	.word	0x00095d39
   95c30:	00095d39 	.word	0x00095d39
   95c34:	00095c51 	.word	0x00095c51
   95c38:	00095c59 	.word	0x00095c59
   95c3c:	00095d01 	.word	0x00095d01
   95c40:	00095d19 	.word	0x00095d19
   95c44:	00095d21 	.word	0x00095d21
   95c48:	00095d39 	.word	0x00095d39
   95c4c:	00095d09 	.word	0x00095d09
	{
		
		case EVT_CONSOLE_COMMAND_ISOUF_START :
		*cl_isouf_event = EVENT_ISOUF_START;
   95c50:	683b      	ldr	r3, [r7, #0]
   95c52:	2216      	movs	r2, #22
   95c54:	701a      	strb	r2, [r3, #0]
		break;
   95c56:	e070      	b.n	95d3a <cl_isouf_translatemacevent+0x266>
		case EVT_CONSOLE_COMMAND_ISOUF_STOP :
		*cl_isouf_event = EVENT_ISOUF_STOP;
   95c58:	683b      	ldr	r3, [r7, #0]
   95c5a:	2218      	movs	r2, #24
   95c5c:	701a      	strb	r2, [r3, #0]
		break;
   95c5e:	e06c      	b.n	95d3a <cl_isouf_translatemacevent+0x266>
		
		case EVT_CONSOLE_COMMAND_CLR_ALARM:
		*cl_isouf_event = EVENT_ISOUF_CLR_ALARM;
   95c60:	683b      	ldr	r3, [r7, #0]
   95c62:	2201      	movs	r2, #1
   95c64:	701a      	strb	r2, [r3, #0]
		break;
   95c66:	e068      	b.n	95d3a <cl_isouf_translatemacevent+0x266>
		case 	EVT_CONSOLE_COMMAND_SET_BLDPUMPRATE:
		*cl_isouf_event = EVENT_ISOUF_COMMAND_SET_BLDPUMPRATE;
   95c68:	683b      	ldr	r3, [r7, #0]
   95c6a:	2210      	movs	r2, #16
   95c6c:	701a      	strb	r2, [r3, #0]
		break;
   95c6e:	e064      	b.n	95d3a <cl_isouf_translatemacevent+0x266>
		case EVT_CONSOLE_COMMAND_SET_BLDPMP_ON:
		*cl_isouf_event = EVENT_ISOUF_COMMAND_SET_BLDPMP_ON;
   95c70:	683b      	ldr	r3, [r7, #0]
   95c72:	2211      	movs	r2, #17
   95c74:	701a      	strb	r2, [r3, #0]
		break;
   95c76:	e060      	b.n	95d3a <cl_isouf_translatemacevent+0x266>
		case EVT_CONSOLE_COMMAND_SET_BLDPMP_OFF:
		*cl_isouf_event = EVENT_ISOUF_COMMAND_SET_BLDPMP_OFF;
   95c78:	683b      	ldr	r3, [r7, #0]
   95c7a:	2212      	movs	r2, #18
   95c7c:	701a      	strb	r2, [r3, #0]
		break;
   95c7e:	e05c      	b.n	95d3a <cl_isouf_translatemacevent+0x266>
		
		case EVT_CONSOLE_COMMAND_GET_DATA:
		*cl_isouf_event = EVENT_ISOUF_GET_DATA;
   95c80:	683b      	ldr	r3, [r7, #0]
   95c82:	2202      	movs	r2, #2
   95c84:	701a      	strb	r2, [r3, #0]
		break;
   95c86:	e058      	b.n	95d3a <cl_isouf_translatemacevent+0x266>
		case EVT_CONSOLE_COMMAND_SET_DATA:
		*cl_isouf_event = EVENT_ISOUF_SET_DATA;
   95c88:	683b      	ldr	r3, [r7, #0]
   95c8a:	2203      	movs	r2, #3
   95c8c:	701a      	strb	r2, [r3, #0]
		break;
   95c8e:	e054      	b.n	95d3a <cl_isouf_translatemacevent+0x266>
		case EVT_CONSOLE_COMMAND_RINSE_START:
		*cl_isouf_event= EVENT_ISOUF_START_RINSE;
   95c90:	683b      	ldr	r3, [r7, #0]
   95c92:	2204      	movs	r2, #4
   95c94:	701a      	strb	r2, [r3, #0]
		break;
   95c96:	e050      	b.n	95d3a <cl_isouf_translatemacevent+0x266>
		case  EVT_CONSOLE_COMMAND_DIALYSIS_START:
		*cl_isouf_event= EVENT_ISOUF_START_DIALYSIS;
   95c98:	683b      	ldr	r3, [r7, #0]
   95c9a:	2205      	movs	r2, #5
   95c9c:	701a      	strb	r2, [r3, #0]
		break;
   95c9e:	e04c      	b.n	95d3a <cl_isouf_translatemacevent+0x266>
		case  EVT_TIMER_EXPIRED:
		
		break;
		case EVT_TICK_50M:
		*cl_isouf_event =   EVENT_ISOUF_TICK_50MS;
   95ca0:	683b      	ldr	r3, [r7, #0]
   95ca2:	2207      	movs	r2, #7
   95ca4:	701a      	strb	r2, [r3, #0]
		break;
   95ca6:	e048      	b.n	95d3a <cl_isouf_translatemacevent+0x266>
		case EVT_TICK_500M:
		*cl_isouf_event = EVENT_ISOUF_TICK_500MS;
   95ca8:	683b      	ldr	r3, [r7, #0]
   95caa:	2208      	movs	r2, #8
   95cac:	701a      	strb	r2, [r3, #0]
		break;
   95cae:	e044      	b.n	95d3a <cl_isouf_translatemacevent+0x266>
		case EVT_TICK_SEC:
		*cl_isouf_event =   EVENT_ISOUF_TICK_SECOND;
   95cb0:	683b      	ldr	r3, [r7, #0]
   95cb2:	2209      	movs	r2, #9
   95cb4:	701a      	strb	r2, [r3, #0]
		break;
   95cb6:	e040      	b.n	95d3a <cl_isouf_translatemacevent+0x266>
		case EVT_TICK_MIN:
		*cl_isouf_event =   EVENT_ISOUF_TICK_MINUTE;
   95cb8:	683b      	ldr	r3, [r7, #0]
   95cba:	220a      	movs	r2, #10
   95cbc:	701a      	strb	r2, [r3, #0]
		break;
   95cbe:	e03c      	b.n	95d3a <cl_isouf_translatemacevent+0x266>
		case EVT_TICK_HOUR:
		*cl_isouf_event =   EVENT_ISOUF_TICK_HOUR;
   95cc0:	683b      	ldr	r3, [r7, #0]
   95cc2:	220b      	movs	r2, #11
   95cc4:	701a      	strb	r2, [r3, #0]
		break;
   95cc6:	e038      	b.n	95d3a <cl_isouf_translatemacevent+0x266>
		case EVT_ALARM_TRIGGERED:
		*cl_isouf_event =   EVENT_ISOUF_ALARM;
   95cc8:	683b      	ldr	r3, [r7, #0]
   95cca:	220c      	movs	r2, #12
   95ccc:	701a      	strb	r2, [r3, #0]
		break;
   95cce:	e034      	b.n	95d3a <cl_isouf_translatemacevent+0x266>
		case EVT_ALERT_TRIGGERED:
		*cl_isouf_event =   EVENT_ISOUF_ALERT;
   95cd0:	683b      	ldr	r3, [r7, #0]
   95cd2:	220d      	movs	r2, #13
   95cd4:	701a      	strb	r2, [r3, #0]
		break;
   95cd6:	e030      	b.n	95d3a <cl_isouf_translatemacevent+0x266>
		
		case EVT_CONSOLE_COMMAND_START_RETURN:
		*cl_isouf_event =   EVENT_ISOUF_STOP_RETURN;
   95cd8:	683b      	ldr	r3, [r7, #0]
   95cda:	220f      	movs	r2, #15
   95cdc:	701a      	strb	r2, [r3, #0]
		break;
   95cde:	e02c      	b.n	95d3a <cl_isouf_translatemacevent+0x266>
		case EVT_CONSOLE_COMMAND_STOP_RETURN:
		*cl_isouf_event =   EVENT_ISOUF_STOP_RETURN;
   95ce0:	683b      	ldr	r3, [r7, #0]
   95ce2:	220f      	movs	r2, #15
   95ce4:	701a      	strb	r2, [r3, #0]
		break;
   95ce6:	e028      	b.n	95d3a <cl_isouf_translatemacevent+0x266>
		
		case EVT_CONSOLE_COMMAND_HEP_PMP_RATE:
		*cl_isouf_event =   EVENT_ISOUF_HEP_RATE;
   95ce8:	683b      	ldr	r3, [r7, #0]
   95cea:	2213      	movs	r2, #19
   95cec:	701a      	strb	r2, [r3, #0]
		break;
   95cee:	e024      	b.n	95d3a <cl_isouf_translatemacevent+0x266>
		case EVT_CONSOLE_COMMAND_HEPARIN_START:
		*cl_isouf_event =   EVENT_ISOUF_HEP_ON;
   95cf0:	683b      	ldr	r3, [r7, #0]
   95cf2:	2214      	movs	r2, #20
   95cf4:	701a      	strb	r2, [r3, #0]
		break;
   95cf6:	e020      	b.n	95d3a <cl_isouf_translatemacevent+0x266>
		case EVT_CONSOLE_COMMAND_HEPARIN_STOP:
		*cl_isouf_event =   EVENT_ISOUF_HEP_OFF;
   95cf8:	683b      	ldr	r3, [r7, #0]
   95cfa:	2215      	movs	r2, #21
   95cfc:	701a      	strb	r2, [r3, #0]
		
		break;
   95cfe:	e01c      	b.n	95d3a <cl_isouf_translatemacevent+0x266>
		
		case MACREQ_ISOUF_COMPLETED:
		*cl_isouf_event =   CL_ISOUF_STATE_POST_COMPLETION;
   95d00:	683b      	ldr	r3, [r7, #0]
   95d02:	2207      	movs	r2, #7
   95d04:	701a      	strb	r2, [r3, #0]
		break;
   95d06:	e018      	b.n	95d3a <cl_isouf_translatemacevent+0x266>
		case MACREQ_POST_DIALYSIS_ISOUF_REQ:
		*cl_isouf_event =   EVENT_ISOUF_START;
   95d08:	683b      	ldr	r3, [r7, #0]
   95d0a:	2216      	movs	r2, #22
   95d0c:	701a      	strb	r2, [r3, #0]
		break;
   95d0e:	e014      	b.n	95d3a <cl_isouf_translatemacevent+0x266>
		case 	EVT_CONSOLE_COMMAND_HEPARIN_BOLUS:
		*cl_isouf_event = EVENT_ISOUF_HEAPARIN_BOLUS;
   95d10:	683b      	ldr	r3, [r7, #0]
   95d12:	221b      	movs	r2, #27
   95d14:	701a      	strb	r2, [r3, #0]
		break;
   95d16:	e010      	b.n	95d3a <cl_isouf_translatemacevent+0x266>
		
		case EVT_CONSOLE_COMMAND_SET_BLDPUMPINC_MANUAL:
		*cl_isouf_event = EVT_CONSOLE_COMMAND_SET_BLDPUMPINC_MANUAL;
   95d18:	683b      	ldr	r3, [r7, #0]
   95d1a:	225b      	movs	r2, #91	; 0x5b
   95d1c:	701a      	strb	r2, [r3, #0]
		break;
   95d1e:	e00c      	b.n	95d3a <cl_isouf_translatemacevent+0x266>
		case EVT_CONSOLE_COMMAND_SET_BLDPUMPDEC_MANUAL:
		*cl_isouf_event = EVT_CONSOLE_COMMAND_SET_BLDPUMPDEC_MANUAL;
   95d20:	683b      	ldr	r3, [r7, #0]
   95d22:	225c      	movs	r2, #92	; 0x5c
   95d24:	701a      	strb	r2, [r3, #0]
		break;
   95d26:	e008      	b.n	95d3a <cl_isouf_translatemacevent+0x266>
		
		case EVT_CONSOLE_COMMAND_BYPASS_ON:
		*cl_isouf_event = EVENT_ISOUF_BYPASS_ON;
   95d28:	683b      	ldr	r3, [r7, #0]
   95d2a:	221c      	movs	r2, #28
   95d2c:	701a      	strb	r2, [r3, #0]
		break;
   95d2e:	e004      	b.n	95d3a <cl_isouf_translatemacevent+0x266>
		case EVT_CONSOLE_COMMAND_BYPASS_OFF:
		*cl_isouf_event = EVENT_ISOUF_BYPASS_OFF;
   95d30:	683b      	ldr	r3, [r7, #0]
   95d32:	221d      	movs	r2, #29
   95d34:	701a      	strb	r2, [r3, #0]
		break;
   95d36:	e000      	b.n	95d3a <cl_isouf_translatemacevent+0x266>
		default:
		break;
   95d38:	bf00      	nop
	}
	return CL_OK;
   95d3a:	2300      	movs	r3, #0
}
   95d3c:	4618      	mov	r0, r3
   95d3e:	370c      	adds	r7, #12
   95d40:	46bd      	mov	sp, r7
   95d42:	f85d 7b04 	ldr.w	r7, [sp], #4
   95d46:	4770      	bx	lr

00095d48 <cl_isoufcompleted>:


Cl_ReturnCodeType cl_isoufcompleted(){
   95d48:	b580      	push	{r7, lr}
   95d4a:	af00      	add	r7, sp, #0
	
	// stop uf pump
	cl_uf_controller(CL_UF_EVENT_STOP,0);
   95d4c:	2004      	movs	r0, #4
   95d4e:	2100      	movs	r1, #0
   95d50:	4b07      	ldr	r3, [pc, #28]	; (95d70 <cl_isoufcompleted+0x28>)
   95d52:	4798      	blx	r3
	
	cl_isouf_retcode =  sv_cntrl_deactivatepump(UFPUMP);
   95d54:	2004      	movs	r0, #4
   95d56:	4b07      	ldr	r3, [pc, #28]	; (95d74 <cl_isoufcompleted+0x2c>)
   95d58:	4798      	blx	r3
   95d5a:	4603      	mov	r3, r0
   95d5c:	461a      	mov	r2, r3
   95d5e:	4b06      	ldr	r3, [pc, #24]	; (95d78 <cl_isoufcompleted+0x30>)
   95d60:	701a      	strb	r2, [r3, #0]
	isouf = false;
   95d62:	4b06      	ldr	r3, [pc, #24]	; (95d7c <cl_isoufcompleted+0x34>)
   95d64:	2200      	movs	r2, #0
   95d66:	701a      	strb	r2, [r3, #0]
	return CL_OK;
   95d68:	2300      	movs	r3, #0
}
   95d6a:	4618      	mov	r0, r3
   95d6c:	bd80      	pop	{r7, pc}
   95d6e:	bf00      	nop
   95d70:	00095df5 	.word	0x00095df5
   95d74:	00099c69 	.word	0x00099c69
   95d78:	20071af6 	.word	0x20071af6
   95d7c:	20071afc 	.word	0x20071afc

00095d80 <Cl_isouf_init>:
return CL_OK;

}

 Cl_ReturnCodeType Cl_isouf_init(void)
 {
   95d80:	b480      	push	{r7}
   95d82:	af00      	add	r7, sp, #0
	 
	 cl_isouf_state = CL_ISOUF_STATE_IDLE;
   95d84:	4b05      	ldr	r3, [pc, #20]	; (95d9c <Cl_isouf_init+0x1c>)
   95d86:	2200      	movs	r2, #0
   95d88:	701a      	strb	r2, [r3, #0]

	 //cl_isouf_event = EVENT_NULL_EVENT;
	 
	 Cl_ISOufTotalSecondscounter=0 ;
   95d8a:	4b05      	ldr	r3, [pc, #20]	; (95da0 <Cl_isouf_init+0x20>)
   95d8c:	2200      	movs	r2, #0
   95d8e:	601a      	str	r2, [r3, #0]
	 return CL_OK;
   95d90:	2300      	movs	r3, #0
 }
   95d92:	4618      	mov	r0, r3
   95d94:	46bd      	mov	sp, r7
   95d96:	f85d 7b04 	ldr.w	r7, [sp], #4
   95d9a:	4770      	bx	lr
   95d9c:	20071af5 	.word	0x20071af5
   95da0:	20071af8 	.word	0x20071af8

00095da4 <cl_ufpumpFeedback_start>:
static Cl_Uint16Type fivemscounter=0,uf_period = 0,uf_avg_period = 0, uf_freq_in_min = 0;
static Cl_Uint16Type uf_rotation_counter = 0;
static Cl_BoolType count_state = false;

Cl_ReturnCodeType cl_ufpumpFeedback_start(void) 
{
   95da4:	b480      	push	{r7}
   95da6:	af00      	add	r7, sp, #0
	cl_ufpump_state = CL_UFP_STATE_STARTED;
   95da8:	4b04      	ldr	r3, [pc, #16]	; (95dbc <cl_ufpumpFeedback_start+0x18>)
   95daa:	2201      	movs	r2, #1
   95dac:	701a      	strb	r2, [r3, #0]
	return 0;
   95dae:	2300      	movs	r3, #0
}
   95db0:	4618      	mov	r0, r3
   95db2:	46bd      	mov	sp, r7
   95db4:	f85d 7b04 	ldr.w	r7, [sp], #4
   95db8:	4770      	bx	lr
   95dba:	bf00      	nop
   95dbc:	20071b1a 	.word	0x20071b1a

00095dc0 <cl_ufpumpFeedback_stop>:
Cl_ReturnCodeType cl_ufpumpFeedback_stop(void)
{
   95dc0:	b480      	push	{r7}
   95dc2:	af00      	add	r7, sp, #0
	
	return 0;
   95dc4:	2300      	movs	r3, #0
}
   95dc6:	4618      	mov	r0, r3
   95dc8:	46bd      	mov	sp, r7
   95dca:	f85d 7b04 	ldr.w	r7, [sp], #4
   95dce:	4770      	bx	lr

00095dd0 <cl_ufpumpFeedback_set_expected_period>:
{
	*pdelta = uf_period - uf_expected_period;
	return 0;
}
Cl_ReturnCodeType cl_ufpumpFeedback_set_expected_period(int16_t period)
{
   95dd0:	b480      	push	{r7}
   95dd2:	b083      	sub	sp, #12
   95dd4:	af00      	add	r7, sp, #0
   95dd6:	4603      	mov	r3, r0
   95dd8:	80fb      	strh	r3, [r7, #6]
	uf_expected_period = period;
   95dda:	88fa      	ldrh	r2, [r7, #6]
   95ddc:	4b04      	ldr	r3, [pc, #16]	; (95df0 <cl_ufpumpFeedback_set_expected_period+0x20>)
   95dde:	801a      	strh	r2, [r3, #0]
	return 0;
   95de0:	2300      	movs	r3, #0
}
   95de2:	4618      	mov	r0, r3
   95de4:	370c      	adds	r7, #12
   95de6:	46bd      	mov	sp, r7
   95de8:	f85d 7b04 	ldr.w	r7, [sp], #4
   95dec:	4770      	bx	lr
   95dee:	bf00      	nop
   95df0:	20071b18 	.word	0x20071b18

00095df4 <cl_uf_controller>:
float ufRemoved =0;
int ufTimeElapsed = 0;
int minCounter = 0 ;
extern bool isouf;
Cl_ReturnCodeType cl_uf_controller(cl_uf_events uf_event , int32_t data )
{
   95df4:	b580      	push	{r7, lr}
   95df6:	b08e      	sub	sp, #56	; 0x38
   95df8:	af00      	add	r7, sp, #0
   95dfa:	4603      	mov	r3, r0
   95dfc:	6039      	str	r1, [r7, #0]
   95dfe:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType cl_uf_retcode = CL_OK;
   95e00:	2300      	movs	r3, #0
   95e02:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	cl_ufpump_states uf_pumpstate = CL_UFP_STATE_IDLE;
   95e06:	2300      	movs	r3, #0
   95e08:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	Cl_Uint16Type uf_delta_value = 0 ;
   95e0c:	2300      	movs	r3, #0
   95e0e:	86bb      	strh	r3, [r7, #52]	; 0x34
	static Cl_Uint16Type pwm_period = 0;
	Cl_Uint32Type temp = 0;
   95e10:	2300      	movs	r3, #0
   95e12:	633b      	str	r3, [r7, #48]	; 0x30
	Cl_Uint32Type temptime = 0;
   95e14:	2300      	movs	r3, #0
   95e16:	62fb      	str	r3, [r7, #44]	; 0x2c
	
	switch(uf_state)
   95e18:	4b9c      	ldr	r3, [pc, #624]	; (9608c <cl_uf_controller+0x298>)
   95e1a:	781b      	ldrb	r3, [r3, #0]
   95e1c:	2b04      	cmp	r3, #4
   95e1e:	f200 8277 	bhi.w	96310 <cl_uf_controller+0x51c>
   95e22:	a201      	add	r2, pc, #4	; (adr r2, 95e28 <cl_uf_controller+0x34>)
   95e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   95e28:	00095e3d 	.word	0x00095e3d
   95e2c:	00096009 	.word	0x00096009
   95e30:	000961d7 	.word	0x000961d7
   95e34:	000962c5 	.word	0x000962c5
   95e38:	00096311 	.word	0x00096311
	{
			case CL_UF_STATE_IDLE:
			switch (uf_event)
   95e3c:	79fb      	ldrb	r3, [r7, #7]
   95e3e:	2b02      	cmp	r3, #2
   95e40:	d014      	beq.n	95e6c <cl_uf_controller+0x78>
   95e42:	2b08      	cmp	r3, #8
   95e44:	f000 808f 	beq.w	95f66 <cl_uf_controller+0x172>
   95e48:	2b01      	cmp	r3, #1
   95e4a:	d000      	beq.n	95e4e <cl_uf_controller+0x5a>
					}
					
				
					break;
					
					default:break;
   95e4c:	e0db      	b.n	96006 <cl_uf_controller+0x212>
			case CL_UF_STATE_IDLE:
			switch (uf_event)
				{
					case CL_UF_EVENT_SET_UF_RATE:
					
					cl_uf_rate = data;
   95e4e:	683b      	ldr	r3, [r7, #0]
   95e50:	4a8f      	ldr	r2, [pc, #572]	; (96090 <cl_uf_controller+0x29c>)
   95e52:	6013      	str	r3, [r2, #0]
					pwm_period =  cl_uf_rate ;
   95e54:	4b8e      	ldr	r3, [pc, #568]	; (96090 <cl_uf_controller+0x29c>)
   95e56:	681b      	ldr	r3, [r3, #0]
   95e58:	b29a      	uxth	r2, r3
   95e5a:	4b8e      	ldr	r3, [pc, #568]	; (96094 <cl_uf_controller+0x2a0>)
   95e5c:	801a      	strh	r2, [r3, #0]
					sv_cntrl_setpumpspeed(UFPUMP,pwm_period);
   95e5e:	4b8d      	ldr	r3, [pc, #564]	; (96094 <cl_uf_controller+0x2a0>)
   95e60:	881b      	ldrh	r3, [r3, #0]
   95e62:	2004      	movs	r0, #4
   95e64:	4619      	mov	r1, r3
   95e66:	4b8c      	ldr	r3, [pc, #560]	; (96098 <cl_uf_controller+0x2a4>)
   95e68:	4798      	blx	r3
					break;
   95e6a:	e0cc      	b.n	96006 <cl_uf_controller+0x212>
					case CL_UF_EVENT_START:
				
				if(Cl_MacState == MAC_DIALYSIS)
   95e6c:	4b8b      	ldr	r3, [pc, #556]	; (9609c <cl_uf_controller+0x2a8>)
   95e6e:	781b      	ldrb	r3, [r3, #0]
   95e70:	2b0f      	cmp	r3, #15
   95e72:	d165      	bne.n	95f40 <cl_uf_controller+0x14c>
				{
					
					sv_cntrl_setpumpspeed(UFPUMP,12000);
   95e74:	2004      	movs	r0, #4
   95e76:	f642 61e0 	movw	r1, #12000	; 0x2ee0
   95e7a:	4b87      	ldr	r3, [pc, #540]	; (96098 <cl_uf_controller+0x2a4>)
   95e7c:	4798      	blx	r3
					cl_wait(100);
   95e7e:	2064      	movs	r0, #100	; 0x64
   95e80:	4b87      	ldr	r3, [pc, #540]	; (960a0 <cl_uf_controller+0x2ac>)
   95e82:	4798      	blx	r3
					sv_cntrl_setpumpspeed(UFPUMP,8000);
   95e84:	2004      	movs	r0, #4
   95e86:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
   95e8a:	4b83      	ldr	r3, [pc, #524]	; (96098 <cl_uf_controller+0x2a4>)
   95e8c:	4798      	blx	r3
					cl_wait(100);
   95e8e:	2064      	movs	r0, #100	; 0x64
   95e90:	4b83      	ldr	r3, [pc, #524]	; (960a0 <cl_uf_controller+0x2ac>)
   95e92:	4798      	blx	r3
					sv_cntrl_setpumpspeed(UFPUMP,6000);
   95e94:	2004      	movs	r0, #4
   95e96:	f241 7170 	movw	r1, #6000	; 0x1770
   95e9a:	4b7f      	ldr	r3, [pc, #508]	; (96098 <cl_uf_controller+0x2a4>)
   95e9c:	4798      	blx	r3
					cl_wait(100);
   95e9e:	2064      	movs	r0, #100	; 0x64
   95ea0:	4b7f      	ldr	r3, [pc, #508]	; (960a0 <cl_uf_controller+0x2ac>)
   95ea2:	4798      	blx	r3
					sv_cntrl_setpumpspeed(UFPUMP,200);
   95ea4:	2004      	movs	r0, #4
   95ea6:	21c8      	movs	r1, #200	; 0xc8
   95ea8:	4b7b      	ldr	r3, [pc, #492]	; (96098 <cl_uf_controller+0x2a4>)
   95eaa:	4798      	blx	r3
					cl_wait(100);
   95eac:	2064      	movs	r0, #100	; 0x64
   95eae:	4b7c      	ldr	r3, [pc, #496]	; (960a0 <cl_uf_controller+0x2ac>)
   95eb0:	4798      	blx	r3
					
					
					 temp = Treatdata[ID_ufgoal];
   95eb2:	4b7c      	ldr	r3, [pc, #496]	; (960a4 <cl_uf_controller+0x2b0>)
   95eb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   95eb6:	633b      	str	r3, [r7, #48]	; 0x30
					
					 temptime = Treatdata[ID_treattime]; // added to get the dialysis duration
   95eb8:	4b7a      	ldr	r3, [pc, #488]	; (960a4 <cl_uf_controller+0x2b0>)
   95eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   95ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
					
					float tempUfRate = temp/((temptime)/60);
   95ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   95ec0:	4a79      	ldr	r2, [pc, #484]	; (960a8 <cl_uf_controller+0x2b4>)
   95ec2:	fba2 2303 	umull	r2, r3, r2, r3
   95ec6:	095b      	lsrs	r3, r3, #5
   95ec8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   95eca:	fbb2 f2f3 	udiv	r2, r2, r3
   95ece:	4b77      	ldr	r3, [pc, #476]	; (960ac <cl_uf_controller+0x2b8>)
   95ed0:	4610      	mov	r0, r2
   95ed2:	4798      	blx	r3
   95ed4:	4603      	mov	r3, r0
   95ed6:	62bb      	str	r3, [r7, #40]	; 0x28
					int16_t intufrate =tempUfRate * 10;
   95ed8:	4b75      	ldr	r3, [pc, #468]	; (960b0 <cl_uf_controller+0x2bc>)
   95eda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   95edc:	4975      	ldr	r1, [pc, #468]	; (960b4 <cl_uf_controller+0x2c0>)
   95ede:	4798      	blx	r3
   95ee0:	4603      	mov	r3, r0
   95ee2:	461a      	mov	r2, r3
   95ee4:	4b74      	ldr	r3, [pc, #464]	; (960b8 <cl_uf_controller+0x2c4>)
   95ee6:	4610      	mov	r0, r2
   95ee8:	4798      	blx	r3
   95eea:	4603      	mov	r3, r0
   95eec:	84fb      	strh	r3, [r7, #38]	; 0x26
					
					Cl_Uint32Type calcufrate = tempUfRate * 10;
   95eee:	4b70      	ldr	r3, [pc, #448]	; (960b0 <cl_uf_controller+0x2bc>)
   95ef0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   95ef2:	4970      	ldr	r1, [pc, #448]	; (960b4 <cl_uf_controller+0x2c0>)
   95ef4:	4798      	blx	r3
   95ef6:	4603      	mov	r3, r0
   95ef8:	461a      	mov	r2, r3
   95efa:	4b70      	ldr	r3, [pc, #448]	; (960bc <cl_uf_controller+0x2c8>)
   95efc:	4610      	mov	r0, r2
   95efe:	4798      	blx	r3
   95f00:	4603      	mov	r3, r0
   95f02:	623b      	str	r3, [r7, #32]
					Treatdata[ID_ufrate] = calcufrate;
   95f04:	4a67      	ldr	r2, [pc, #412]	; (960a4 <cl_uf_controller+0x2b0>)
   95f06:	6a3b      	ldr	r3, [r7, #32]
   95f08:	6313      	str	r3, [r2, #48]	; 0x30
					calibrate_uf(intufrate);
   95f0a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
   95f0e:	4618      	mov	r0, r3
   95f10:	4b6b      	ldr	r3, [pc, #428]	; (960c0 <cl_uf_controller+0x2cc>)
   95f12:	4798      	blx	r3
					// based on this uf rate calculate the PWM
					// below logic needs to be changed lookup table needs to be implemented between uf rate and pwm

					if(temp > 0){
   95f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   95f16:	2b00      	cmp	r3, #0
   95f18:	d011      	beq.n	95f3e <cl_uf_controller+0x14a>
	
					
					sv_cntrl_setpumpspeed(UFPUMP,uf_final); // enter pwm data from the lookuop table
   95f1a:	4b6a      	ldr	r3, [pc, #424]	; (960c4 <cl_uf_controller+0x2d0>)
   95f1c:	681b      	ldr	r3, [r3, #0]
   95f1e:	2004      	movs	r0, #4
   95f20:	4619      	mov	r1, r3
   95f22:	4b5d      	ldr	r3, [pc, #372]	; (96098 <cl_uf_controller+0x2a4>)
   95f24:	4798      	blx	r3
				//	cl_ufpumpFeedback_set_expected_period(uf_final); // not required for now
					cl_uf_retcode =  sv_cntrl_activatepump(UFPUMP);
   95f26:	2004      	movs	r0, #4
   95f28:	4b67      	ldr	r3, [pc, #412]	; (960c8 <cl_uf_controller+0x2d4>)
   95f2a:	4798      	blx	r3
   95f2c:	4603      	mov	r3, r0
   95f2e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					cl_ufpumpFeedback_start();
   95f32:	4b66      	ldr	r3, [pc, #408]	; (960cc <cl_uf_controller+0x2d8>)
   95f34:	4798      	blx	r3
					uf_state = CL_UF_STATE_STARTED;
   95f36:	4b55      	ldr	r3, [pc, #340]	; (9608c <cl_uf_controller+0x298>)
   95f38:	2201      	movs	r2, #1
   95f3a:	701a      	strb	r2, [r3, #0]
   95f3c:	e012      	b.n	95f64 <cl_uf_controller+0x170>
   95f3e:	e011      	b.n	95f64 <cl_uf_controller+0x170>
					}
					
				}
					else{
				
					sv_cntrl_setpumpspeed(UFPUMP,pwm_period); // enter pwm data from the lookuop table
   95f40:	4b54      	ldr	r3, [pc, #336]	; (96094 <cl_uf_controller+0x2a0>)
   95f42:	881b      	ldrh	r3, [r3, #0]
   95f44:	2004      	movs	r0, #4
   95f46:	4619      	mov	r1, r3
   95f48:	4b53      	ldr	r3, [pc, #332]	; (96098 <cl_uf_controller+0x2a4>)
   95f4a:	4798      	blx	r3
					cl_uf_retcode =  sv_cntrl_activatepump(UFPUMP);
   95f4c:	2004      	movs	r0, #4
   95f4e:	4b5e      	ldr	r3, [pc, #376]	; (960c8 <cl_uf_controller+0x2d4>)
   95f50:	4798      	blx	r3
   95f52:	4603      	mov	r3, r0
   95f54:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					cl_ufpumpFeedback_start();
   95f58:	4b5c      	ldr	r3, [pc, #368]	; (960cc <cl_uf_controller+0x2d8>)
   95f5a:	4798      	blx	r3
					uf_state = CL_UF_STATE_STARTED;
   95f5c:	4b4b      	ldr	r3, [pc, #300]	; (9608c <cl_uf_controller+0x298>)
   95f5e:	2201      	movs	r2, #1
   95f60:	701a      	strb	r2, [r3, #0]
				
						
					}
					
					break;
   95f62:	e050      	b.n	96006 <cl_uf_controller+0x212>
   95f64:	e04f      	b.n	96006 <cl_uf_controller+0x212>
					
					case CL_UF_EVENT_RESET:
					
					
					 temp = Treatdata[ID_ufgoal];
   95f66:	4b4f      	ldr	r3, [pc, #316]	; (960a4 <cl_uf_controller+0x2b0>)
   95f68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   95f6a:	633b      	str	r3, [r7, #48]	; 0x30
					 temptime = CL_DLSIS_TIMEOUT_MIN;//Treatdata[ID_treattime]; // added to get the dialysis duration
   95f6c:	23f0      	movs	r3, #240	; 0xf0
   95f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
					
					float tempUfRate2 = temp/((temptime)/60);
   95f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   95f72:	4a4d      	ldr	r2, [pc, #308]	; (960a8 <cl_uf_controller+0x2b4>)
   95f74:	fba2 2303 	umull	r2, r3, r2, r3
   95f78:	095b      	lsrs	r3, r3, #5
   95f7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   95f7c:	fbb2 f2f3 	udiv	r2, r2, r3
   95f80:	4b4a      	ldr	r3, [pc, #296]	; (960ac <cl_uf_controller+0x2b8>)
   95f82:	4610      	mov	r0, r2
   95f84:	4798      	blx	r3
   95f86:	4603      	mov	r3, r0
   95f88:	61fb      	str	r3, [r7, #28]
					intufrate2 =tempUfRate2 * 10;
   95f8a:	4b49      	ldr	r3, [pc, #292]	; (960b0 <cl_uf_controller+0x2bc>)
   95f8c:	69f8      	ldr	r0, [r7, #28]
   95f8e:	4949      	ldr	r1, [pc, #292]	; (960b4 <cl_uf_controller+0x2c0>)
   95f90:	4798      	blx	r3
   95f92:	4603      	mov	r3, r0
   95f94:	461a      	mov	r2, r3
   95f96:	4b48      	ldr	r3, [pc, #288]	; (960b8 <cl_uf_controller+0x2c4>)
   95f98:	4610      	mov	r0, r2
   95f9a:	4798      	blx	r3
   95f9c:	4603      	mov	r3, r0
   95f9e:	b29a      	uxth	r2, r3
   95fa0:	4b4b      	ldr	r3, [pc, #300]	; (960d0 <cl_uf_controller+0x2dc>)
   95fa2:	801a      	strh	r2, [r3, #0]
					
					Cl_Uint32Type calcufrate = tempUfRate2 * 10;
   95fa4:	4b42      	ldr	r3, [pc, #264]	; (960b0 <cl_uf_controller+0x2bc>)
   95fa6:	69f8      	ldr	r0, [r7, #28]
   95fa8:	4942      	ldr	r1, [pc, #264]	; (960b4 <cl_uf_controller+0x2c0>)
   95faa:	4798      	blx	r3
   95fac:	4603      	mov	r3, r0
   95fae:	461a      	mov	r2, r3
   95fb0:	4b42      	ldr	r3, [pc, #264]	; (960bc <cl_uf_controller+0x2c8>)
   95fb2:	4610      	mov	r0, r2
   95fb4:	4798      	blx	r3
   95fb6:	4603      	mov	r3, r0
   95fb8:	61bb      	str	r3, [r7, #24]
					Treatdata[ID_ufrate] = calcufrate;
   95fba:	4a3a      	ldr	r2, [pc, #232]	; (960a4 <cl_uf_controller+0x2b0>)
   95fbc:	69bb      	ldr	r3, [r7, #24]
   95fbe:	6313      	str	r3, [r2, #48]	; 0x30
					
					calibrate_uf(intufrate2);
   95fc0:	4b43      	ldr	r3, [pc, #268]	; (960d0 <cl_uf_controller+0x2dc>)
   95fc2:	881b      	ldrh	r3, [r3, #0]
   95fc4:	b21b      	sxth	r3, r3
   95fc6:	4618      	mov	r0, r3
   95fc8:	4b3d      	ldr	r3, [pc, #244]	; (960c0 <cl_uf_controller+0x2cc>)
   95fca:	4798      	blx	r3
					// based on this uf rate calculate the PWM
					// below logic needs to be changed lookup table needs to be implemented between uf rate and pwm

					if(temp > 0){
   95fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   95fce:	2b00      	cmp	r3, #0
   95fd0:	d018      	beq.n	96004 <cl_uf_controller+0x210>
						
						
						sv_cntrl_setpumpspeed(UFPUMP,uf_final); // enter pwm data from the lookuop table
   95fd2:	4b3c      	ldr	r3, [pc, #240]	; (960c4 <cl_uf_controller+0x2d0>)
   95fd4:	681b      	ldr	r3, [r3, #0]
   95fd6:	2004      	movs	r0, #4
   95fd8:	4619      	mov	r1, r3
   95fda:	4b2f      	ldr	r3, [pc, #188]	; (96098 <cl_uf_controller+0x2a4>)
   95fdc:	4798      	blx	r3
						cl_ufpumpFeedback_set_expected_period(uf_final); // not required
   95fde:	4b39      	ldr	r3, [pc, #228]	; (960c4 <cl_uf_controller+0x2d0>)
   95fe0:	681b      	ldr	r3, [r3, #0]
   95fe2:	b29b      	uxth	r3, r3
   95fe4:	b21b      	sxth	r3, r3
   95fe6:	4618      	mov	r0, r3
   95fe8:	4b3a      	ldr	r3, [pc, #232]	; (960d4 <cl_uf_controller+0x2e0>)
   95fea:	4798      	blx	r3
						cl_uf_retcode =  sv_cntrl_activatepump(UFPUMP);
   95fec:	2004      	movs	r0, #4
   95fee:	4b36      	ldr	r3, [pc, #216]	; (960c8 <cl_uf_controller+0x2d4>)
   95ff0:	4798      	blx	r3
   95ff2:	4603      	mov	r3, r0
   95ff4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						cl_ufpumpFeedback_start();
   95ff8:	4b34      	ldr	r3, [pc, #208]	; (960cc <cl_uf_controller+0x2d8>)
   95ffa:	4798      	blx	r3
						uf_state = CL_UF_STATE_STARTED;
   95ffc:	4b23      	ldr	r3, [pc, #140]	; (9608c <cl_uf_controller+0x298>)
   95ffe:	2201      	movs	r2, #1
   96000:	701a      	strb	r2, [r3, #0]
					}
					
				
					break;
   96002:	e7ff      	b.n	96004 <cl_uf_controller+0x210>
   96004:	bf00      	nop
					
					default:break;
					
				}
			break;
   96006:	e184      	b.n	96312 <cl_uf_controller+0x51e>
			case CL_UF_STATE_STARTED:
			switch (uf_event)
   96008:	79fb      	ldrb	r3, [r7, #7]
   9600a:	3b01      	subs	r3, #1
   9600c:	2b09      	cmp	r3, #9
   9600e:	f200 80e0 	bhi.w	961d2 <cl_uf_controller+0x3de>
   96012:	a201      	add	r2, pc, #4	; (adr r2, 96018 <cl_uf_controller+0x224>)
   96014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   96018:	00096053 	.word	0x00096053
   9601c:	000961d3 	.word	0x000961d3
   96020:	000961d3 	.word	0x000961d3
   96024:	00096065 	.word	0x00096065
   96028:	00096083 	.word	0x00096083
   9602c:	00096047 	.word	0x00096047
   96030:	000961d3 	.word	0x000961d3
   96034:	000960e9 	.word	0x000960e9
   96038:	000961d3 	.word	0x000961d3
   9603c:	00096041 	.word	0x00096041
			{
				
				case CL_UF_EVENT_MINUTE:
				
				Cl_SendUfdata();
   96040:	4b25      	ldr	r3, [pc, #148]	; (960d8 <cl_uf_controller+0x2e4>)
   96042:	4798      	blx	r3
				break;
   96044:	e0c6      	b.n	961d4 <cl_uf_controller+0x3e0>
				case CL_UF_EVENT_SECOND:
				//cl_ufpumpFeedback_get_state(&uf_pumpstate);
				//cl_ufpumpFeedback_get_delta(&uf_delta_value);
			
				
					ufTimeElapsed++;
   96046:	4b25      	ldr	r3, [pc, #148]	; (960dc <cl_uf_controller+0x2e8>)
   96048:	681b      	ldr	r3, [r3, #0]
   9604a:	3301      	adds	r3, #1
   9604c:	4a23      	ldr	r2, [pc, #140]	; (960dc <cl_uf_controller+0x2e8>)
   9604e:	6013      	str	r3, [r2, #0]
// 				}
// 				else
// 				{
// 					
// 				}
				break;
   96050:	e0c0      	b.n	961d4 <cl_uf_controller+0x3e0>
				
				
				case CL_UF_EVENT_SET_UF_RATE:
					cl_uf_rate = data;
   96052:	683b      	ldr	r3, [r7, #0]
   96054:	4a0e      	ldr	r2, [pc, #56]	; (96090 <cl_uf_controller+0x29c>)
   96056:	6013      	str	r3, [r2, #0]
					sv_cntrl_setpumpspeed(UFPUMP,data);
   96058:	683b      	ldr	r3, [r7, #0]
   9605a:	2004      	movs	r0, #4
   9605c:	4619      	mov	r1, r3
   9605e:	4b0e      	ldr	r3, [pc, #56]	; (96098 <cl_uf_controller+0x2a4>)
   96060:	4798      	blx	r3
				break;
   96062:	e0b7      	b.n	961d4 <cl_uf_controller+0x3e0>
				case CL_UF_EVENT_PAUSE:
				break;
				case CL_UF_EVENT_STOP:
				cl_uf_retcode =  sv_cntrl_deactivatepump(UFPUMP);
   96064:	2004      	movs	r0, #4
   96066:	4b1e      	ldr	r3, [pc, #120]	; (960e0 <cl_uf_controller+0x2ec>)
   96068:	4798      	blx	r3
   9606a:	4603      	mov	r3, r0
   9606c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				cl_uf_retcode =  cl_ufpumpFeedback_stop();
   96070:	4b1c      	ldr	r3, [pc, #112]	; (960e4 <cl_uf_controller+0x2f0>)
   96072:	4798      	blx	r3
   96074:	4603      	mov	r3, r0
   96076:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				uf_state = CL_UF_STATE_STOPPED;
   9607a:	4b04      	ldr	r3, [pc, #16]	; (9608c <cl_uf_controller+0x298>)
   9607c:	2202      	movs	r2, #2
   9607e:	701a      	strb	r2, [r3, #0]
				break;
   96080:	e0a8      	b.n	961d4 <cl_uf_controller+0x3e0>
				case CL_UF_EVENT_COMPLETED:
				uf_state = CL_UF_STATE_IDLE;
   96082:	4b02      	ldr	r3, [pc, #8]	; (9608c <cl_uf_controller+0x298>)
   96084:	2200      	movs	r2, #0
   96086:	701a      	strb	r2, [r3, #0]
				break;
   96088:	e0a4      	b.n	961d4 <cl_uf_controller+0x3e0>
   9608a:	bf00      	nop
   9608c:	20071b1b 	.word	0x20071b1b
   96090:	20071b1c 	.word	0x20071b1c
   96094:	20071b2c 	.word	0x20071b2c
   96098:	00099d45 	.word	0x00099d45
   9609c:	20070584 	.word	0x20070584
   960a0:	00093195 	.word	0x00093195
   960a4:	2007265c 	.word	0x2007265c
   960a8:	88888889 	.word	0x88888889
   960ac:	000a68a9 	.word	0x000a68a9
   960b0:	000a6959 	.word	0x000a6959
   960b4:	41200000 	.word	0x41200000
   960b8:	000a6ce5 	.word	0x000a6ce5
   960bc:	000a6d31 	.word	0x000a6d31
   960c0:	000848d9 	.word	0x000848d9
   960c4:	200717a0 	.word	0x200717a0
   960c8:	00099c2d 	.word	0x00099c2d
   960cc:	00095da5 	.word	0x00095da5
   960d0:	20071b20 	.word	0x20071b20
   960d4:	00095dd1 	.word	0x00095dd1
   960d8:	00096371 	.word	0x00096371
   960dc:	20071b28 	.word	0x20071b28
   960e0:	00099c69 	.word	0x00099c69
   960e4:	00095dc1 	.word	0x00095dc1
				case CL_UF_EVENT_RESET:				
				
				sv_cntrl_setpumpspeed(UFPUMP,12000);
   960e8:	2004      	movs	r0, #4
   960ea:	f642 61e0 	movw	r1, #12000	; 0x2ee0
   960ee:	4b8b      	ldr	r3, [pc, #556]	; (9631c <cl_uf_controller+0x528>)
   960f0:	4798      	blx	r3
				cl_wait(100);
   960f2:	2064      	movs	r0, #100	; 0x64
   960f4:	4b8a      	ldr	r3, [pc, #552]	; (96320 <cl_uf_controller+0x52c>)
   960f6:	4798      	blx	r3
				sv_cntrl_setpumpspeed(UFPUMP,8000);
   960f8:	2004      	movs	r0, #4
   960fa:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
   960fe:	4b87      	ldr	r3, [pc, #540]	; (9631c <cl_uf_controller+0x528>)
   96100:	4798      	blx	r3
				cl_wait(100);
   96102:	2064      	movs	r0, #100	; 0x64
   96104:	4b86      	ldr	r3, [pc, #536]	; (96320 <cl_uf_controller+0x52c>)
   96106:	4798      	blx	r3
				sv_cntrl_setpumpspeed(UFPUMP,6000);
   96108:	2004      	movs	r0, #4
   9610a:	f241 7170 	movw	r1, #6000	; 0x1770
   9610e:	4b83      	ldr	r3, [pc, #524]	; (9631c <cl_uf_controller+0x528>)
   96110:	4798      	blx	r3
				cl_wait(100);
   96112:	2064      	movs	r0, #100	; 0x64
   96114:	4b82      	ldr	r3, [pc, #520]	; (96320 <cl_uf_controller+0x52c>)
   96116:	4798      	blx	r3
				sv_cntrl_setpumpspeed(UFPUMP,200);
   96118:	2004      	movs	r0, #4
   9611a:	21c8      	movs	r1, #200	; 0xc8
   9611c:	4b7f      	ldr	r3, [pc, #508]	; (9631c <cl_uf_controller+0x528>)
   9611e:	4798      	blx	r3
				cl_wait(100);
   96120:	2064      	movs	r0, #100	; 0x64
   96122:	4b7f      	ldr	r3, [pc, #508]	; (96320 <cl_uf_controller+0x52c>)
   96124:	4798      	blx	r3
				
										// added this event
				
					
					
					temptime = Treatdata[ID_treattime] - ufTimeElapsed;//Treatdata[ID_treattime]; // added to get the dialysis duration	
   96126:	4b7f      	ldr	r3, [pc, #508]	; (96324 <cl_uf_controller+0x530>)
   96128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   9612a:	4a7f      	ldr	r2, [pc, #508]	; (96328 <cl_uf_controller+0x534>)
   9612c:	6812      	ldr	r2, [r2, #0]
   9612e:	1a9b      	subs	r3, r3, r2
   96130:	62fb      	str	r3, [r7, #44]	; 0x2c
						temp = Treatdata[ID_ufgoal] - ufRemoved;
   96132:	4b7c      	ldr	r3, [pc, #496]	; (96324 <cl_uf_controller+0x530>)
   96134:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   96136:	4b7d      	ldr	r3, [pc, #500]	; (9632c <cl_uf_controller+0x538>)
   96138:	4610      	mov	r0, r2
   9613a:	4798      	blx	r3
   9613c:	4601      	mov	r1, r0
   9613e:	4b7c      	ldr	r3, [pc, #496]	; (96330 <cl_uf_controller+0x53c>)
   96140:	681a      	ldr	r2, [r3, #0]
   96142:	4b7c      	ldr	r3, [pc, #496]	; (96334 <cl_uf_controller+0x540>)
   96144:	4608      	mov	r0, r1
   96146:	4611      	mov	r1, r2
   96148:	4798      	blx	r3
   9614a:	4603      	mov	r3, r0
   9614c:	461a      	mov	r2, r3
   9614e:	4b7a      	ldr	r3, [pc, #488]	; (96338 <cl_uf_controller+0x544>)
   96150:	4610      	mov	r0, r2
   96152:	4798      	blx	r3
   96154:	4603      	mov	r3, r0
   96156:	633b      	str	r3, [r7, #48]	; 0x30
					
					
					
					float tempUfRate = temp/((temptime)/60);
   96158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   9615a:	4a78      	ldr	r2, [pc, #480]	; (9633c <cl_uf_controller+0x548>)
   9615c:	fba2 2303 	umull	r2, r3, r2, r3
   96160:	095b      	lsrs	r3, r3, #5
   96162:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   96164:	fbb2 f2f3 	udiv	r2, r2, r3
   96168:	4b70      	ldr	r3, [pc, #448]	; (9632c <cl_uf_controller+0x538>)
   9616a:	4610      	mov	r0, r2
   9616c:	4798      	blx	r3
   9616e:	4603      	mov	r3, r0
   96170:	617b      	str	r3, [r7, #20]
					intufrate2 =tempUfRate * 10;
   96172:	4b73      	ldr	r3, [pc, #460]	; (96340 <cl_uf_controller+0x54c>)
   96174:	6978      	ldr	r0, [r7, #20]
   96176:	4973      	ldr	r1, [pc, #460]	; (96344 <cl_uf_controller+0x550>)
   96178:	4798      	blx	r3
   9617a:	4603      	mov	r3, r0
   9617c:	461a      	mov	r2, r3
   9617e:	4b72      	ldr	r3, [pc, #456]	; (96348 <cl_uf_controller+0x554>)
   96180:	4610      	mov	r0, r2
   96182:	4798      	blx	r3
   96184:	4603      	mov	r3, r0
   96186:	b29a      	uxth	r2, r3
   96188:	4b70      	ldr	r3, [pc, #448]	; (9634c <cl_uf_controller+0x558>)
   9618a:	801a      	strh	r2, [r3, #0]
					
					calibrate_uf(intufrate2);
   9618c:	4b6f      	ldr	r3, [pc, #444]	; (9634c <cl_uf_controller+0x558>)
   9618e:	881b      	ldrh	r3, [r3, #0]
   96190:	b21b      	sxth	r3, r3
   96192:	4618      	mov	r0, r3
   96194:	4b6e      	ldr	r3, [pc, #440]	; (96350 <cl_uf_controller+0x55c>)
   96196:	4798      	blx	r3
					// based on this uf rate calculate the PWM
					// below logic needs to be changed lookup table needs to be implemented between uf rate and pwm

					if(temp > 0){
   96198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   9619a:	2b00      	cmp	r3, #0
   9619c:	d018      	beq.n	961d0 <cl_uf_controller+0x3dc>
						
						
						sv_cntrl_setpumpspeed(UFPUMP,uf_final); // enter pwm data from the lookuop table
   9619e:	4b6d      	ldr	r3, [pc, #436]	; (96354 <cl_uf_controller+0x560>)
   961a0:	681b      	ldr	r3, [r3, #0]
   961a2:	2004      	movs	r0, #4
   961a4:	4619      	mov	r1, r3
   961a6:	4b5d      	ldr	r3, [pc, #372]	; (9631c <cl_uf_controller+0x528>)
   961a8:	4798      	blx	r3
						cl_ufpumpFeedback_set_expected_period(uf_final); // not required
   961aa:	4b6a      	ldr	r3, [pc, #424]	; (96354 <cl_uf_controller+0x560>)
   961ac:	681b      	ldr	r3, [r3, #0]
   961ae:	b29b      	uxth	r3, r3
   961b0:	b21b      	sxth	r3, r3
   961b2:	4618      	mov	r0, r3
   961b4:	4b68      	ldr	r3, [pc, #416]	; (96358 <cl_uf_controller+0x564>)
   961b6:	4798      	blx	r3
						cl_uf_retcode =  sv_cntrl_activatepump(UFPUMP);
   961b8:	2004      	movs	r0, #4
   961ba:	4b68      	ldr	r3, [pc, #416]	; (9635c <cl_uf_controller+0x568>)
   961bc:	4798      	blx	r3
   961be:	4603      	mov	r3, r0
   961c0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
						cl_ufpumpFeedback_start();
   961c4:	4b66      	ldr	r3, [pc, #408]	; (96360 <cl_uf_controller+0x56c>)
   961c6:	4798      	blx	r3
						uf_state = CL_UF_STATE_STARTED;
   961c8:	4b66      	ldr	r3, [pc, #408]	; (96364 <cl_uf_controller+0x570>)
   961ca:	2201      	movs	r2, #1
   961cc:	701a      	strb	r2, [r3, #0]
					}
					
				break;
   961ce:	e001      	b.n	961d4 <cl_uf_controller+0x3e0>
   961d0:	e000      	b.n	961d4 <cl_uf_controller+0x3e0>
				default:break;
   961d2:	bf00      	nop
				
			}
			break;
   961d4:	e09d      	b.n	96312 <cl_uf_controller+0x51e>
			case CL_UF_STATE_STOPPED:
			switch (uf_event)
   961d6:	79fb      	ldrb	r3, [r7, #7]
   961d8:	2b01      	cmp	r3, #1
   961da:	d002      	beq.n	961e2 <cl_uf_controller+0x3ee>
   961dc:	2b02      	cmp	r3, #2
   961de:	d009      	beq.n	961f4 <cl_uf_controller+0x400>
					uf_state = CL_UF_STATE_STARTED;
				}
				
				
				break;
				default:break;
   961e0:	e06f      	b.n	962c2 <cl_uf_controller+0x4ce>
			break;
			case CL_UF_STATE_STOPPED:
			switch (uf_event)
			{
				case CL_UF_EVENT_SET_UF_RATE:
					cl_uf_rate = data;
   961e2:	683b      	ldr	r3, [r7, #0]
   961e4:	4a60      	ldr	r2, [pc, #384]	; (96368 <cl_uf_controller+0x574>)
   961e6:	6013      	str	r3, [r2, #0]
					sv_cntrl_setpumpspeed(UFPUMP,data);
   961e8:	683b      	ldr	r3, [r7, #0]
   961ea:	2004      	movs	r0, #4
   961ec:	4619      	mov	r1, r3
   961ee:	4b4b      	ldr	r3, [pc, #300]	; (9631c <cl_uf_controller+0x528>)
   961f0:	4798      	blx	r3
				break;
   961f2:	e066      	b.n	962c2 <cl_uf_controller+0x4ce>
				case CL_UF_EVENT_START:													// added this event
				//cl_uf_retcode =  sv_cntrl_activatepump(UFPUMP);
				//uf_state = CL_UF_STATE_STARTED;
				
				sv_cntrl_setpumpspeed(UFPUMP,12000);
   961f4:	2004      	movs	r0, #4
   961f6:	f642 61e0 	movw	r1, #12000	; 0x2ee0
   961fa:	4b48      	ldr	r3, [pc, #288]	; (9631c <cl_uf_controller+0x528>)
   961fc:	4798      	blx	r3
				cl_wait(100);
   961fe:	2064      	movs	r0, #100	; 0x64
   96200:	4b47      	ldr	r3, [pc, #284]	; (96320 <cl_uf_controller+0x52c>)
   96202:	4798      	blx	r3
				sv_cntrl_setpumpspeed(UFPUMP,8000);
   96204:	2004      	movs	r0, #4
   96206:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
   9620a:	4b44      	ldr	r3, [pc, #272]	; (9631c <cl_uf_controller+0x528>)
   9620c:	4798      	blx	r3
				cl_wait(100);
   9620e:	2064      	movs	r0, #100	; 0x64
   96210:	4b43      	ldr	r3, [pc, #268]	; (96320 <cl_uf_controller+0x52c>)
   96212:	4798      	blx	r3
				sv_cntrl_setpumpspeed(UFPUMP,6000);
   96214:	2004      	movs	r0, #4
   96216:	f241 7170 	movw	r1, #6000	; 0x1770
   9621a:	4b40      	ldr	r3, [pc, #256]	; (9631c <cl_uf_controller+0x528>)
   9621c:	4798      	blx	r3
				cl_wait(100);
   9621e:	2064      	movs	r0, #100	; 0x64
   96220:	4b3f      	ldr	r3, [pc, #252]	; (96320 <cl_uf_controller+0x52c>)
   96222:	4798      	blx	r3
				sv_cntrl_setpumpspeed(UFPUMP,200);
   96224:	2004      	movs	r0, #4
   96226:	21c8      	movs	r1, #200	; 0xc8
   96228:	4b3c      	ldr	r3, [pc, #240]	; (9631c <cl_uf_controller+0x528>)
   9622a:	4798      	blx	r3
				cl_wait(100);
   9622c:	2064      	movs	r0, #100	; 0x64
   9622e:	4b3c      	ldr	r3, [pc, #240]	; (96320 <cl_uf_controller+0x52c>)
   96230:	4798      	blx	r3
				
			
			temp = Treatdata[ID_ufgoal] ;//- ufRemoved;
   96232:	4b3c      	ldr	r3, [pc, #240]	; (96324 <cl_uf_controller+0x530>)
   96234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   96236:	633b      	str	r3, [r7, #48]	; 0x30
			temptime = Treatdata[ID_treattime]; //- ufTimeElapsed;//Treatdata[ID_treattime]; // added to get the dialysis duration
   96238:	4b3a      	ldr	r3, [pc, #232]	; (96324 <cl_uf_controller+0x530>)
   9623a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   9623c:	62fb      	str	r3, [r7, #44]	; 0x2c
						
				float tempUfRate = temp/((temptime)/60);
   9623e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   96240:	4a3e      	ldr	r2, [pc, #248]	; (9633c <cl_uf_controller+0x548>)
   96242:	fba2 2303 	umull	r2, r3, r2, r3
   96246:	095b      	lsrs	r3, r3, #5
   96248:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   9624a:	fbb2 f2f3 	udiv	r2, r2, r3
   9624e:	4b37      	ldr	r3, [pc, #220]	; (9632c <cl_uf_controller+0x538>)
   96250:	4610      	mov	r0, r2
   96252:	4798      	blx	r3
   96254:	4603      	mov	r3, r0
   96256:	613b      	str	r3, [r7, #16]
				intufrate2 =tempUfRate * 10;
   96258:	4b39      	ldr	r3, [pc, #228]	; (96340 <cl_uf_controller+0x54c>)
   9625a:	6938      	ldr	r0, [r7, #16]
   9625c:	4939      	ldr	r1, [pc, #228]	; (96344 <cl_uf_controller+0x550>)
   9625e:	4798      	blx	r3
   96260:	4603      	mov	r3, r0
   96262:	461a      	mov	r2, r3
   96264:	4b38      	ldr	r3, [pc, #224]	; (96348 <cl_uf_controller+0x554>)
   96266:	4610      	mov	r0, r2
   96268:	4798      	blx	r3
   9626a:	4603      	mov	r3, r0
   9626c:	b29a      	uxth	r2, r3
   9626e:	4b37      	ldr	r3, [pc, #220]	; (9634c <cl_uf_controller+0x558>)
   96270:	801a      	strh	r2, [r3, #0]
				Cl_Uint32Type calcufrate = tempUfRate * 10;
   96272:	4b33      	ldr	r3, [pc, #204]	; (96340 <cl_uf_controller+0x54c>)
   96274:	6938      	ldr	r0, [r7, #16]
   96276:	4933      	ldr	r1, [pc, #204]	; (96344 <cl_uf_controller+0x550>)
   96278:	4798      	blx	r3
   9627a:	4603      	mov	r3, r0
   9627c:	461a      	mov	r2, r3
   9627e:	4b2e      	ldr	r3, [pc, #184]	; (96338 <cl_uf_controller+0x544>)
   96280:	4610      	mov	r0, r2
   96282:	4798      	blx	r3
   96284:	4603      	mov	r3, r0
   96286:	60fb      	str	r3, [r7, #12]
					Treatdata[ID_ufrate] = calcufrate;
   96288:	4a26      	ldr	r2, [pc, #152]	; (96324 <cl_uf_controller+0x530>)
   9628a:	68fb      	ldr	r3, [r7, #12]
   9628c:	6313      	str	r3, [r2, #48]	; 0x30
				calibrate_uf(intufrate2);
   9628e:	4b2f      	ldr	r3, [pc, #188]	; (9634c <cl_uf_controller+0x558>)
   96290:	881b      	ldrh	r3, [r3, #0]
   96292:	b21b      	sxth	r3, r3
   96294:	4618      	mov	r0, r3
   96296:	4b2e      	ldr	r3, [pc, #184]	; (96350 <cl_uf_controller+0x55c>)
   96298:	4798      	blx	r3
				// based on this uf rate calculate the PWM
				// below logic needs to be changed lookup table needs to be implemented between uf rate and pwm

				if(temp > 0){
   9629a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   9629c:	2b00      	cmp	r3, #0
   9629e:	d00f      	beq.n	962c0 <cl_uf_controller+0x4cc>
					
					
		//			sv_cntrl_setpumpspeed(UFPUMP,uf_final); // enter pwm data from the lookuop table
//					cl_ufpumpFeedback_set_expected_period(uf_final); // not required
					cl_uf_retcode =  sv_cntrl_activatepump(UFPUMP);
   962a0:	2004      	movs	r0, #4
   962a2:	4b2e      	ldr	r3, [pc, #184]	; (9635c <cl_uf_controller+0x568>)
   962a4:	4798      	blx	r3
   962a6:	4603      	mov	r3, r0
   962a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					sv_cntrl_setpumpspeed(UFPUMP,uf_final);
   962ac:	4b29      	ldr	r3, [pc, #164]	; (96354 <cl_uf_controller+0x560>)
   962ae:	681b      	ldr	r3, [r3, #0]
   962b0:	2004      	movs	r0, #4
   962b2:	4619      	mov	r1, r3
   962b4:	4b19      	ldr	r3, [pc, #100]	; (9631c <cl_uf_controller+0x528>)
   962b6:	4798      	blx	r3
//					cl_ufpumpFeedback_start();
					uf_state = CL_UF_STATE_STARTED;
   962b8:	4b2a      	ldr	r3, [pc, #168]	; (96364 <cl_uf_controller+0x570>)
   962ba:	2201      	movs	r2, #1
   962bc:	701a      	strb	r2, [r3, #0]
				}
				
				
				break;
   962be:	e7ff      	b.n	962c0 <cl_uf_controller+0x4cc>
   962c0:	bf00      	nop
				default:break;
				
			}
			break;
   962c2:	e026      	b.n	96312 <cl_uf_controller+0x51e>
			case CL_UF_STATE_PAUSED:
			switch (uf_event)
   962c4:	79fb      	ldrb	r3, [r7, #7]
   962c6:	2b02      	cmp	r3, #2
   962c8:	d00d      	beq.n	962e6 <cl_uf_controller+0x4f2>
   962ca:	2b04      	cmp	r3, #4
   962cc:	d015      	beq.n	962fa <cl_uf_controller+0x506>
   962ce:	2b01      	cmp	r3, #1
   962d0:	d000      	beq.n	962d4 <cl_uf_controller+0x4e0>
				break;
				case CL_UF_EVENT_STOP:
				cl_uf_retcode =  sv_cntrl_deactivatepump(UFPUMP);
				uf_state = CL_UF_STATE_STOPPED;
				break;
				default:break;
   962d2:	e01c      	b.n	9630e <cl_uf_controller+0x51a>
			break;
			case CL_UF_STATE_PAUSED:
			switch (uf_event)
			{
				case CL_UF_EVENT_SET_UF_RATE:
					cl_uf_rate = data;
   962d4:	683b      	ldr	r3, [r7, #0]
   962d6:	4a24      	ldr	r2, [pc, #144]	; (96368 <cl_uf_controller+0x574>)
   962d8:	6013      	str	r3, [r2, #0]
					sv_cntrl_setpumpspeed(UFPUMP,data);
   962da:	683b      	ldr	r3, [r7, #0]
   962dc:	2004      	movs	r0, #4
   962de:	4619      	mov	r1, r3
   962e0:	4b0e      	ldr	r3, [pc, #56]	; (9631c <cl_uf_controller+0x528>)
   962e2:	4798      	blx	r3
				break;
   962e4:	e013      	b.n	9630e <cl_uf_controller+0x51a>
				case CL_UF_EVENT_START:
				cl_uf_retcode =  sv_cntrl_activatepump(UFPUMP);
   962e6:	2004      	movs	r0, #4
   962e8:	4b1c      	ldr	r3, [pc, #112]	; (9635c <cl_uf_controller+0x568>)
   962ea:	4798      	blx	r3
   962ec:	4603      	mov	r3, r0
   962ee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				uf_state = CL_UF_STATE_STARTED;
   962f2:	4b1c      	ldr	r3, [pc, #112]	; (96364 <cl_uf_controller+0x570>)
   962f4:	2201      	movs	r2, #1
   962f6:	701a      	strb	r2, [r3, #0]
				break;
   962f8:	e009      	b.n	9630e <cl_uf_controller+0x51a>
				case CL_UF_EVENT_STOP:
				cl_uf_retcode =  sv_cntrl_deactivatepump(UFPUMP);
   962fa:	2004      	movs	r0, #4
   962fc:	4b1b      	ldr	r3, [pc, #108]	; (9636c <cl_uf_controller+0x578>)
   962fe:	4798      	blx	r3
   96300:	4603      	mov	r3, r0
   96302:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				uf_state = CL_UF_STATE_STOPPED;
   96306:	4b17      	ldr	r3, [pc, #92]	; (96364 <cl_uf_controller+0x570>)
   96308:	2202      	movs	r2, #2
   9630a:	701a      	strb	r2, [r3, #0]
				break;
   9630c:	bf00      	nop
				default:break;
				
			}
			break;
   9630e:	e000      	b.n	96312 <cl_uf_controller+0x51e>
			case CL_UF_STATE_COMPLETED:
			break;
			
			default:break;
   96310:	bf00      	nop
			
			
	}
	return CL_OK;
   96312:	2300      	movs	r3, #0
	
	
}
   96314:	4618      	mov	r0, r3
   96316:	3738      	adds	r7, #56	; 0x38
   96318:	46bd      	mov	sp, r7
   9631a:	bd80      	pop	{r7, pc}
   9631c:	00099d45 	.word	0x00099d45
   96320:	00093195 	.word	0x00093195
   96324:	2007265c 	.word	0x2007265c
   96328:	20071b28 	.word	0x20071b28
   9632c:	000a68a9 	.word	0x000a68a9
   96330:	20071b24 	.word	0x20071b24
   96334:	000a6745 	.word	0x000a6745
   96338:	000a6d31 	.word	0x000a6d31
   9633c:	88888889 	.word	0x88888889
   96340:	000a6959 	.word	0x000a6959
   96344:	41200000 	.word	0x41200000
   96348:	000a6ce5 	.word	0x000a6ce5
   9634c:	20071b20 	.word	0x20071b20
   96350:	000848d9 	.word	0x000848d9
   96354:	200717a0 	.word	0x200717a0
   96358:	00095dd1 	.word	0x00095dd1
   9635c:	00099c2d 	.word	0x00099c2d
   96360:	00095da5 	.word	0x00095da5
   96364:	20071b1b 	.word	0x20071b1b
   96368:	20071b1c 	.word	0x20071b1c
   9636c:	00099c69 	.word	0x00099c69

00096370 <Cl_SendUfdata>:


Cl_ReturnCodeType Cl_SendUfdata(){
   96370:	b580      	push	{r7, lr}
   96372:	af00      	add	r7, sp, #0
	
	ufRemoved =  ufRemoved + (intufrate2/10);
   96374:	4b0d      	ldr	r3, [pc, #52]	; (963ac <Cl_SendUfdata+0x3c>)
   96376:	881b      	ldrh	r3, [r3, #0]
   96378:	b21b      	sxth	r3, r3
   9637a:	4a0d      	ldr	r2, [pc, #52]	; (963b0 <Cl_SendUfdata+0x40>)
   9637c:	fb82 1203 	smull	r1, r2, r2, r3
   96380:	1092      	asrs	r2, r2, #2
   96382:	17db      	asrs	r3, r3, #31
   96384:	1ad3      	subs	r3, r2, r3
   96386:	b29b      	uxth	r3, r3
   96388:	b21a      	sxth	r2, r3
   9638a:	4b0a      	ldr	r3, [pc, #40]	; (963b4 <Cl_SendUfdata+0x44>)
   9638c:	4610      	mov	r0, r2
   9638e:	4798      	blx	r3
   96390:	4601      	mov	r1, r0
   96392:	4b09      	ldr	r3, [pc, #36]	; (963b8 <Cl_SendUfdata+0x48>)
   96394:	681a      	ldr	r2, [r3, #0]
   96396:	4b09      	ldr	r3, [pc, #36]	; (963bc <Cl_SendUfdata+0x4c>)
   96398:	4608      	mov	r0, r1
   9639a:	4611      	mov	r1, r2
   9639c:	4798      	blx	r3
   9639e:	4603      	mov	r3, r0
   963a0:	461a      	mov	r2, r3
   963a2:	4b05      	ldr	r3, [pc, #20]	; (963b8 <Cl_SendUfdata+0x48>)
   963a4:	601a      	str	r2, [r3, #0]
	
	return CL_OK;
   963a6:	2300      	movs	r3, #0
	
}
   963a8:	4618      	mov	r0, r3
   963aa:	bd80      	pop	{r7, pc}
   963ac:	20071b20 	.word	0x20071b20
   963b0:	66666667 	.word	0x66666667
   963b4:	000a68b1 	.word	0x000a68b1
   963b8:	20071b24 	.word	0x20071b24
   963bc:	000a6749 	.word	0x000a6749

000963c0 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   963c0:	b480      	push	{r7}
   963c2:	b083      	sub	sp, #12
   963c4:	af00      	add	r7, sp, #0
   963c6:	4603      	mov	r3, r0
   963c8:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   963ca:	4908      	ldr	r1, [pc, #32]	; (963ec <NVIC_EnableIRQ+0x2c>)
   963cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
   963d0:	095b      	lsrs	r3, r3, #5
   963d2:	79fa      	ldrb	r2, [r7, #7]
   963d4:	f002 021f 	and.w	r2, r2, #31
   963d8:	2001      	movs	r0, #1
   963da:	fa00 f202 	lsl.w	r2, r0, r2
   963de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   963e2:	370c      	adds	r7, #12
   963e4:	46bd      	mov	sp, r7
   963e6:	f85d 7b04 	ldr.w	r7, [sp], #4
   963ea:	4770      	bx	lr
   963ec:	e000e100 	.word	0xe000e100

000963f0 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
   963f0:	b480      	push	{r7}
   963f2:	b08b      	sub	sp, #44	; 0x2c
   963f4:	af00      	add	r7, sp, #0
   963f6:	6078      	str	r0, [r7, #4]
   963f8:	460b      	mov	r3, r1
   963fa:	70fb      	strb	r3, [r7, #3]
   963fc:	687b      	ldr	r3, [r7, #4]
   963fe:	627b      	str	r3, [r7, #36]	; 0x24
   96400:	78fb      	ldrb	r3, [r7, #3]
   96402:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   96406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   96408:	61fb      	str	r3, [r7, #28]
   9640a:	69fb      	ldr	r3, [r7, #28]
   9640c:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
   9640e:	69bb      	ldr	r3, [r7, #24]
   96410:	095b      	lsrs	r3, r3, #5
   96412:	617b      	str	r3, [r7, #20]
}

__always_inline static Pio *arch_ioport_port_to_base(ioport_port_t port)
{
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   96414:	697b      	ldr	r3, [r7, #20]
   96416:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   9641a:	f203 7307 	addw	r3, r3, #1799	; 0x707
   9641e:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
   96420:	613b      	str	r3, [r7, #16]

	if (level) {
   96422:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   96426:	2b00      	cmp	r3, #0
   96428:	d009      	beq.n	9643e <ioport_set_pin_level+0x4e>
   9642a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   9642c:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   9642e:	68fb      	ldr	r3, [r7, #12]
   96430:	f003 031f 	and.w	r3, r3, #31
   96434:	2201      	movs	r2, #1
   96436:	409a      	lsls	r2, r3
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   96438:	693b      	ldr	r3, [r7, #16]
   9643a:	631a      	str	r2, [r3, #48]	; 0x30
   9643c:	e008      	b.n	96450 <ioport_set_pin_level+0x60>
   9643e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   96440:	60bb      	str	r3, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   96442:	68bb      	ldr	r3, [r7, #8]
   96444:	f003 031f 	and.w	r3, r3, #31
   96448:	2201      	movs	r2, #1
   9644a:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   9644c:	693b      	ldr	r3, [r7, #16]
   9644e:	635a      	str	r2, [r3, #52]	; 0x34
	arch_ioport_set_pin_level(pin, level);
}
   96450:	372c      	adds	r7, #44	; 0x2c
   96452:	46bd      	mov	sp, r7
   96454:	f85d 7b04 	ldr.w	r7, [sp], #4
   96458:	4770      	bx	lr
   9645a:	bf00      	nop

0009645c <sn65hvda540_set_en>:
extern	volatile  uint32_t delay_cnt ;
extern  volatile uint32_t delay ;
extern volatile uint32_t g_ul_ms_ticks ;

void sn65hvda540_set_en(sn65hvda540_ctrl_t *p_component, uint32_t pin_idx)
{
   9645c:	b480      	push	{r7}
   9645e:	b083      	sub	sp, #12
   96460:	af00      	add	r7, sp, #0
   96462:	6078      	str	r0, [r7, #4]
   96464:	6039      	str	r1, [r7, #0]
	p_component->pio_en_idx = pin_idx;
   96466:	687b      	ldr	r3, [r7, #4]
   96468:	683a      	ldr	r2, [r7, #0]
   9646a:	601a      	str	r2, [r3, #0]
}
   9646c:	370c      	adds	r7, #12
   9646e:	46bd      	mov	sp, r7
   96470:	f85d 7b04 	ldr.w	r7, [sp], #4
   96474:	4770      	bx	lr
   96476:	bf00      	nop

00096478 <sn65hvda540_normal_mode>:

void sn65hvda540_normal_mode(sn65hvda540_ctrl_t *p_component)
{
   96478:	b580      	push	{r7, lr}
   9647a:	b082      	sub	sp, #8
   9647c:	af00      	add	r7, sp, #0
   9647e:	6078      	str	r0, [r7, #4]
	/* Raise EN pin of SN65HVD234 to High Level (Vcc). */
	ioport_set_pin_level(p_component->pio_en_idx, CAN_NORMAL_MODE);
   96480:	687b      	ldr	r3, [r7, #4]
   96482:	681b      	ldr	r3, [r3, #0]
   96484:	4618      	mov	r0, r3
   96486:	2100      	movs	r1, #0
   96488:	4b02      	ldr	r3, [pc, #8]	; (96494 <sn65hvda540_normal_mode+0x1c>)
   9648a:	4798      	blx	r3
}
   9648c:	3708      	adds	r7, #8
   9648e:	46bd      	mov	sp, r7
   96490:	bd80      	pop	{r7, pc}
   96492:	bf00      	nop
   96494:	000963f1 	.word	0x000963f1

00096498 <CAN0_Handler>:
uint32_t can_flag=0;
volatile DD_Sensor_status_type DD_Sensor_status ;
volatile temp_struct_type temp_struct;
//can_structure_id_type can_structure_id;

void CAN0_Handler(void)   {
   96498:	b580      	push	{r7, lr}
   9649a:	b082      	sub	sp, #8
   9649c:	af00      	add	r7, sp, #0
	uint32_t ul_status;
	ul_status = (CAN0 -> CAN_SR);
   9649e:	4b13      	ldr	r3, [pc, #76]	; (964ec <CAN0_Handler+0x54>)
   964a0:	691b      	ldr	r3, [r3, #16]
   964a2:	607b      	str	r3, [r7, #4]
	if (ul_status & GLOBAL_MAILBOX_MASK) {
   964a4:	687b      	ldr	r3, [r7, #4]
   964a6:	b2db      	uxtb	r3, r3
   964a8:	2b00      	cmp	r3, #0
   964aa:	d01b      	beq.n	964e4 <CAN0_Handler+0x4c>
		ul_status = CAN0->CAN_MB[1].CAN_MSR ;
   964ac:	4b0f      	ldr	r3, [pc, #60]	; (964ec <CAN0_Handler+0x54>)
   964ae:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
   964b2:	607b      	str	r3, [r7, #4]
		if ((ul_status & CAN_MSR_MRDY) == CAN_MSR_MRDY) {
   964b4:	687b      	ldr	r3, [r7, #4]
   964b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   964ba:	2b00      	cmp	r3, #0
   964bc:	d012      	beq.n	964e4 <CAN0_Handler+0x4c>
			can0_mailbox.ul_mb_idx = 1;
   964be:	4b0c      	ldr	r3, [pc, #48]	; (964f0 <CAN0_Handler+0x58>)
   964c0:	2201      	movs	r2, #1
   964c2:	601a      	str	r2, [r3, #0]
			can0_mailbox.ul_status = ul_status;
   964c4:	4a0a      	ldr	r2, [pc, #40]	; (964f0 <CAN0_Handler+0x58>)
   964c6:	687b      	ldr	r3, [r7, #4]
   964c8:	6093      	str	r3, [r2, #8]
			dd_can_mailbox_read(&can0_mailbox);
   964ca:	4809      	ldr	r0, [pc, #36]	; (964f0 <CAN0_Handler+0x58>)
   964cc:	4b09      	ldr	r3, [pc, #36]	; (964f4 <CAN0_Handler+0x5c>)
   964ce:	4798      	blx	r3
			dd_can_dump_mailbox_data(&can0_mailbox);
   964d0:	4807      	ldr	r0, [pc, #28]	; (964f0 <CAN0_Handler+0x58>)
   964d2:	4b09      	ldr	r3, [pc, #36]	; (964f8 <CAN0_Handler+0x60>)
   964d4:	4798      	blx	r3
			g_ul_recv_status = 1;
   964d6:	4b09      	ldr	r3, [pc, #36]	; (964fc <CAN0_Handler+0x64>)
   964d8:	2201      	movs	r2, #1
   964da:	601a      	str	r2, [r3, #0]
			can_flag = g_ul_recv_status;
   964dc:	4b07      	ldr	r3, [pc, #28]	; (964fc <CAN0_Handler+0x64>)
   964de:	681b      	ldr	r3, [r3, #0]
   964e0:	4a07      	ldr	r2, [pc, #28]	; (96500 <CAN0_Handler+0x68>)
   964e2:	6013      	str	r3, [r2, #0]
		}
		
	}
}
   964e4:	3708      	adds	r7, #8
   964e6:	46bd      	mov	sp, r7
   964e8:	bd80      	pop	{r7, pc}
   964ea:	bf00      	nop
   964ec:	400b4000 	.word	0x400b4000
   964f0:	200727d8 	.word	0x200727d8
   964f4:	00096791 	.word	0x00096791
   964f8:	000965a9 	.word	0x000965a9
   964fc:	20071b30 	.word	0x20071b30
   96500:	20071b34 	.word	0x20071b34

00096504 <dd_master_command>:

 uint16_t dd_master_command(dd_cpu_id_type  cpu_id, MASTER_CMD_ID_TYPE command_id, uint16_t speed ) 
   {
   96504:	b580      	push	{r7, lr}
   96506:	b084      	sub	sp, #16
   96508:	af00      	add	r7, sp, #0
   9650a:	4603      	mov	r3, r0
   9650c:	71fb      	strb	r3, [r7, #7]
   9650e:	460b      	mov	r3, r1
   96510:	71bb      	strb	r3, [r7, #6]
   96512:	4613      	mov	r3, r2
   96514:	80bb      	strh	r3, [r7, #4]
	 dd_data_size_type dd_data_size;
	dd_data_size.bytes_array[0] =  MASTER_CPU_id;         //senders id;
   96516:	230a      	movs	r3, #10
   96518:	733b      	strb	r3, [r7, #12]
	dd_data_size.bytes_array[1] =  command_id;
   9651a:	79bb      	ldrb	r3, [r7, #6]
   9651c:	737b      	strb	r3, [r7, #13]
	can0_mailbox.ul_id = CAN_MID_MIDvA_dd(cpu_id); // receivers id
   9651e:	79fb      	ldrb	r3, [r7, #7]
   96520:	049b      	lsls	r3, r3, #18
   96522:	461a      	mov	r2, r3
   96524:	4b1b      	ldr	r3, [pc, #108]	; (96594 <dd_master_command+0x90>)
   96526:	4013      	ands	r3, r2
   96528:	4a1b      	ldr	r2, [pc, #108]	; (96598 <dd_master_command+0x94>)
   9652a:	6113      	str	r3, [r2, #16]
//	dd_data_size.bytes_array[2] =0;
	
//	dd_data_size.bytes_array[3] =0;
    dd_data_size.two_bytes[1] = speed;
   9652c:	88bb      	ldrh	r3, [r7, #4]
   9652e:	81fb      	strh	r3, [r7, #14]
	can0_mailbox.ul_datal =  dd_data_size.four_bytes;
   96530:	68fb      	ldr	r3, [r7, #12]
   96532:	4a19      	ldr	r2, [pc, #100]	; (96598 <dd_master_command+0x94>)
   96534:	6193      	str	r3, [r2, #24]
	can0_mailbox.ul_datah =0;
   96536:	4b18      	ldr	r3, [pc, #96]	; (96598 <dd_master_command+0x94>)
   96538:	2200      	movs	r2, #0
   9653a:	61da      	str	r2, [r3, #28]
	
	CAN0->CAN_IDR = 0xffffffff;
   9653c:	4b17      	ldr	r3, [pc, #92]	; (9659c <dd_master_command+0x98>)
   9653e:	f04f 32ff 	mov.w	r2, #4294967295
   96542:	609a      	str	r2, [r3, #8]
	NVIC_EnableIRQ(CAN0_IRQn);	
   96544:	202b      	movs	r0, #43	; 0x2b
   96546:	4b16      	ldr	r3, [pc, #88]	; (965a0 <dd_master_command+0x9c>)
   96548:	4798      	blx	r3
    can0_mailbox.ul_mb_idx =   MAILBOX_0;  // transmit for master
   9654a:	4b13      	ldr	r3, [pc, #76]	; (96598 <dd_master_command+0x94>)
   9654c:	2200      	movs	r2, #0
   9654e:	601a      	str	r2, [r3, #0]
    can0_mailbox.uc_obj_type = CAN_MB_TX_MODE ;  // message type , transmitting or receiving
   96550:	4b11      	ldr	r3, [pc, #68]	; (96598 <dd_master_command+0x94>)
   96552:	2203      	movs	r2, #3
   96554:	711a      	strb	r2, [r3, #4]
    can0_mailbox.uc_tx_prio = 0;                   // Message Priority
   96556:	4b10      	ldr	r3, [pc, #64]	; (96598 <dd_master_command+0x94>)
   96558:	2200      	movs	r2, #0
   9655a:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_length = 4;                    // Can Message Length Header+data
   9655c:	4b0e      	ldr	r3, [pc, #56]	; (96598 <dd_master_command+0x94>)
   9655e:	2204      	movs	r2, #4
   96560:	719a      	strb	r2, [r3, #6]
    can0_mailbox.uc_id_ver = 0;                   // Can standard Version
   96562:	4b0d      	ldr	r3, [pc, #52]	; (96598 <dd_master_command+0x94>)
   96564:	2200      	movs	r2, #0
   96566:	715a      	strb	r2, [r3, #5]
    can0_mailbox.ul_id_msk = 0x7fc;			      // 
   96568:	4b0b      	ldr	r3, [pc, #44]	; (96598 <dd_master_command+0x94>)
   9656a:	f240 72fc 	movw	r2, #2044	; 0x7fc
   9656e:	60da      	str	r2, [r3, #12]
	uint32_t ul_status;	
	uint32_t ul_reg;
	uint32_t can_retun_cal ;
	while (CAN_MAILBOX_NOT_READY == dd_can_mailbox_write(&can0_mailbox));	
   96570:	bf00      	nop
   96572:	4809      	ldr	r0, [pc, #36]	; (96598 <dd_master_command+0x94>)
   96574:	4b0b      	ldr	r3, [pc, #44]	; (965a4 <dd_master_command+0xa0>)
   96576:	4798      	blx	r3
   96578:	4603      	mov	r3, r0
   9657a:	2b01      	cmp	r3, #1
   9657c:	d0f9      	beq.n	96572 <dd_master_command+0x6e>
	
	NVIC_EnableIRQ(CAN0_IRQn);
   9657e:	202b      	movs	r0, #43	; 0x2b
   96580:	4b07      	ldr	r3, [pc, #28]	; (965a0 <dd_master_command+0x9c>)
   96582:	4798      	blx	r3
	CAN0->CAN_IER = CAN_IER_MB1;
   96584:	4b05      	ldr	r3, [pc, #20]	; (9659c <dd_master_command+0x98>)
   96586:	2202      	movs	r2, #2
   96588:	605a      	str	r2, [r3, #4]
	
	return CAN_MAILBOX_TRANSFER_OK;
   9658a:	2300      	movs	r3, #0
}
   9658c:	4618      	mov	r0, r3
   9658e:	3710      	adds	r7, #16
   96590:	46bd      	mov	sp, r7
   96592:	bd80      	pop	{r7, pc}
   96594:	1ffc0000 	.word	0x1ffc0000
   96598:	200727d8 	.word	0x200727d8
   9659c:	400b4000 	.word	0x400b4000
   965a0:	000963c1 	.word	0x000963c1
   965a4:	00096861 	.word	0x00096861

000965a8 <dd_can_dump_mailbox_data>:


static void dd_can_dump_mailbox_data(can_mb_conf_t *p_mailbox )   {
   965a8:	b480      	push	{r7}
   965aa:	b083      	sub	sp, #12
   965ac:	af00      	add	r7, sp, #0
   965ae:	6078      	str	r0, [r7, #4]
	temp_struct.temp_reg_32 = (p_mailbox->ul_datal);
   965b0:	687b      	ldr	r3, [r7, #4]
   965b2:	699b      	ldr	r3, [r3, #24]
   965b4:	4a70      	ldr	r2, [pc, #448]	; (96778 <dd_can_dump_mailbox_data+0x1d0>)
   965b6:	6013      	str	r3, [r2, #0]
	DD_Sensor_status.CPU_SENDER_type_reg =  temp_struct.temp_reg_8[0]  ;
   965b8:	4b6f      	ldr	r3, [pc, #444]	; (96778 <dd_can_dump_mailbox_data+0x1d0>)
   965ba:	781b      	ldrb	r3, [r3, #0]
   965bc:	b2da      	uxtb	r2, r3
   965be:	4b6f      	ldr	r3, [pc, #444]	; (9677c <dd_can_dump_mailbox_data+0x1d4>)
   965c0:	701a      	strb	r2, [r3, #0]
	DD_Sensor_status.SENSOR_GROUP_type_reg = temp_struct.temp_reg_8[1]  ;
   965c2:	4b6d      	ldr	r3, [pc, #436]	; (96778 <dd_can_dump_mailbox_data+0x1d0>)
   965c4:	785b      	ldrb	r3, [r3, #1]
   965c6:	b2da      	uxtb	r2, r3
   965c8:	4b6c      	ldr	r3, [pc, #432]	; (9677c <dd_can_dump_mailbox_data+0x1d4>)
   965ca:	705a      	strb	r2, [r3, #1]
	
	switch(DD_Sensor_status.CPU_SENDER_type_reg)   {
   965cc:	4b6b      	ldr	r3, [pc, #428]	; (9677c <dd_can_dump_mailbox_data+0x1d4>)
   965ce:	781b      	ldrb	r3, [r3, #0]
   965d0:	b2db      	uxtb	r3, r3
   965d2:	2b02      	cmp	r3, #2
   965d4:	f000 80c9 	beq.w	9676a <dd_can_dump_mailbox_data+0x1c2>
   965d8:	2b03      	cmp	r3, #3
   965da:	d01d      	beq.n	96618 <dd_can_dump_mailbox_data+0x70>
   965dc:	2b01      	cmp	r3, #1
   965de:	d000      	beq.n	965e2 <dd_can_dump_mailbox_data+0x3a>
		} //switch(DD_Sensor_status.SENSOR_GROUP_type_reg)  ends here
		
		break;
		
		default:
		break;
   965e0:	e0c4      	b.n	9676c <dd_can_dump_mailbox_data+0x1c4>
	
	switch(DD_Sensor_status.CPU_SENDER_type_reg)   {
		
		case HEMO_CPU_id :
		
		switch(DD_Sensor_status.SENSOR_GROUP_type_reg)   {
   965e2:	4b66      	ldr	r3, [pc, #408]	; (9677c <dd_can_dump_mailbox_data+0x1d4>)
   965e4:	785b      	ldrb	r3, [r3, #1]
   965e6:	b2db      	uxtb	r3, r3
   965e8:	2b07      	cmp	r3, #7
   965ea:	d000      	beq.n	965ee <dd_can_dump_mailbox_data+0x46>
			DD_Sensor_status.vptstatus  =  temp_struct.temp_reg_16[0] ;
			DD_Sensor_status.DUMMY =   temp_struct.temp_reg_16[1] ;
			break;
			
			default :
			break;
   965ec:	e013      	b.n	96616 <dd_can_dump_mailbox_data+0x6e>
		case HEMO_CPU_id :
		
		switch(DD_Sensor_status.SENSOR_GROUP_type_reg)   {
			
			case Sensor_group_7 :
			DD_Sensor_status.aptstatus = temp_struct.temp_reg_16[1] ;		
   965ee:	4b62      	ldr	r3, [pc, #392]	; (96778 <dd_can_dump_mailbox_data+0x1d0>)
   965f0:	885b      	ldrh	r3, [r3, #2]
   965f2:	b29a      	uxth	r2, r3
   965f4:	4b61      	ldr	r3, [pc, #388]	; (9677c <dd_can_dump_mailbox_data+0x1d4>)
   965f6:	84da      	strh	r2, [r3, #38]	; 0x26
			temp_struct.temp_reg_32 = (p_mailbox->ul_datah);			
   965f8:	687b      	ldr	r3, [r7, #4]
   965fa:	69db      	ldr	r3, [r3, #28]
   965fc:	4a5e      	ldr	r2, [pc, #376]	; (96778 <dd_can_dump_mailbox_data+0x1d0>)
   965fe:	6013      	str	r3, [r2, #0]
			DD_Sensor_status.vptstatus  =  temp_struct.temp_reg_16[0] ;
   96600:	4b5d      	ldr	r3, [pc, #372]	; (96778 <dd_can_dump_mailbox_data+0x1d0>)
   96602:	881b      	ldrh	r3, [r3, #0]
   96604:	b29a      	uxth	r2, r3
   96606:	4b5d      	ldr	r3, [pc, #372]	; (9677c <dd_can_dump_mailbox_data+0x1d4>)
   96608:	851a      	strh	r2, [r3, #40]	; 0x28
			DD_Sensor_status.DUMMY =   temp_struct.temp_reg_16[1] ;
   9660a:	4b5b      	ldr	r3, [pc, #364]	; (96778 <dd_can_dump_mailbox_data+0x1d0>)
   9660c:	885b      	ldrh	r3, [r3, #2]
   9660e:	b29a      	uxth	r2, r3
   96610:	4b5a      	ldr	r3, [pc, #360]	; (9677c <dd_can_dump_mailbox_data+0x1d4>)
   96612:	855a      	strh	r2, [r3, #42]	; 0x2a
			break;
   96614:	bf00      	nop
			
			default :
			break;
		}
		break;
   96616:	e0a9      	b.n	9676c <dd_can_dump_mailbox_data+0x1c4>
		case PROPORTIONING_CPU_id :
		break;
		
		case SENSOR_CPU_id:
		
		switch(DD_Sensor_status.SENSOR_GROUP_type_reg)   {
   96618:	4b58      	ldr	r3, [pc, #352]	; (9677c <dd_can_dump_mailbox_data+0x1d4>)
   9661a:	785b      	ldrb	r3, [r3, #1]
   9661c:	b2db      	uxtb	r3, r3
   9661e:	3b01      	subs	r3, #1
   96620:	2b05      	cmp	r3, #5
   96622:	f200 80a0 	bhi.w	96766 <dd_can_dump_mailbox_data+0x1be>
   96626:	a201      	add	r2, pc, #4	; (adr r2, 9662c <dd_can_dump_mailbox_data+0x84>)
   96628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9662c:	00096645 	.word	0x00096645
   96630:	00096681 	.word	0x00096681
   96634:	000966af 	.word	0x000966af
   96638:	000966dd 	.word	0x000966dd
   9663c:	0009670b 	.word	0x0009670b
   96640:	00096739 	.word	0x00096739
			
			case Sensor_group_1 :													// Pressure Sensors 1,2 and 3
			DD_Sensor_status.ps1status = temp_struct.temp_reg_16[1] ;			
   96644:	4b4c      	ldr	r3, [pc, #304]	; (96778 <dd_can_dump_mailbox_data+0x1d0>)
   96646:	885b      	ldrh	r3, [r3, #2]
   96648:	b29a      	uxth	r2, r3
   9664a:	4b4c      	ldr	r3, [pc, #304]	; (9677c <dd_can_dump_mailbox_data+0x1d4>)
   9664c:	805a      	strh	r2, [r3, #2]
			temp_struct.temp_reg_32 = (p_mailbox->ul_datah);			
   9664e:	687b      	ldr	r3, [r7, #4]
   96650:	69db      	ldr	r3, [r3, #28]
   96652:	4a49      	ldr	r2, [pc, #292]	; (96778 <dd_can_dump_mailbox_data+0x1d0>)
   96654:	6013      	str	r3, [r2, #0]
			DD_Sensor_status.ps2status  =  temp_struct.temp_reg_16[0] ;
   96656:	4b48      	ldr	r3, [pc, #288]	; (96778 <dd_can_dump_mailbox_data+0x1d0>)
   96658:	881b      	ldrh	r3, [r3, #0]
   9665a:	b29a      	uxth	r2, r3
   9665c:	4b47      	ldr	r3, [pc, #284]	; (9677c <dd_can_dump_mailbox_data+0x1d4>)
   9665e:	809a      	strh	r2, [r3, #4]
			DD_Sensor_status.ps3status =   temp_struct.temp_reg_16[1] ;		
   96660:	4b45      	ldr	r3, [pc, #276]	; (96778 <dd_can_dump_mailbox_data+0x1d0>)
   96662:	885b      	ldrh	r3, [r3, #2]
   96664:	b29a      	uxth	r2, r3
   96666:	4b45      	ldr	r3, [pc, #276]	; (9677c <dd_can_dump_mailbox_data+0x1d4>)
   96668:	80da      	strh	r2, [r3, #6]
			  array1[1]	= 1;
   9666a:	4b45      	ldr	r3, [pc, #276]	; (96780 <dd_can_dump_mailbox_data+0x1d8>)
   9666c:	2201      	movs	r2, #1
   9666e:	705a      	strb	r2, [r3, #1]
			delay = g_ul_ms_ticks -  delay_cnt ;
   96670:	4b44      	ldr	r3, [pc, #272]	; (96784 <dd_can_dump_mailbox_data+0x1dc>)
   96672:	681a      	ldr	r2, [r3, #0]
   96674:	4b44      	ldr	r3, [pc, #272]	; (96788 <dd_can_dump_mailbox_data+0x1e0>)
   96676:	681b      	ldr	r3, [r3, #0]
   96678:	1ad3      	subs	r3, r2, r3
   9667a:	4a44      	ldr	r2, [pc, #272]	; (9678c <dd_can_dump_mailbox_data+0x1e4>)
   9667c:	6013      	str	r3, [r2, #0]
			break;
   9667e:	e073      	b.n	96768 <dd_can_dump_mailbox_data+0x1c0>
			
			case Sensor_group_2 :													// Thermocouple, Temp1 and Temp2
			DD_Sensor_status.thermocouple_status = temp_struct.temp_reg_16[1] ;			
   96680:	4b3d      	ldr	r3, [pc, #244]	; (96778 <dd_can_dump_mailbox_data+0x1d0>)
   96682:	885b      	ldrh	r3, [r3, #2]
   96684:	b29a      	uxth	r2, r3
   96686:	4b3d      	ldr	r3, [pc, #244]	; (9677c <dd_can_dump_mailbox_data+0x1d4>)
   96688:	811a      	strh	r2, [r3, #8]
			temp_struct.temp_reg_32 = (p_mailbox->ul_datah);			
   9668a:	687b      	ldr	r3, [r7, #4]
   9668c:	69db      	ldr	r3, [r3, #28]
   9668e:	4a3a      	ldr	r2, [pc, #232]	; (96778 <dd_can_dump_mailbox_data+0x1d0>)
   96690:	6013      	str	r3, [r2, #0]
			DD_Sensor_status.Temp1status =  temp_struct.temp_reg_16[0] ;
   96692:	4b39      	ldr	r3, [pc, #228]	; (96778 <dd_can_dump_mailbox_data+0x1d0>)
   96694:	881b      	ldrh	r3, [r3, #0]
   96696:	b29a      	uxth	r2, r3
   96698:	4b38      	ldr	r3, [pc, #224]	; (9677c <dd_can_dump_mailbox_data+0x1d4>)
   9669a:	815a      	strh	r2, [r3, #10]
			DD_Sensor_status.Temp2status=   temp_struct.temp_reg_16[1] ;	
   9669c:	4b36      	ldr	r3, [pc, #216]	; (96778 <dd_can_dump_mailbox_data+0x1d0>)
   9669e:	885b      	ldrh	r3, [r3, #2]
   966a0:	b29a      	uxth	r2, r3
   966a2:	4b36      	ldr	r3, [pc, #216]	; (9677c <dd_can_dump_mailbox_data+0x1d4>)
   966a4:	819a      	strh	r2, [r3, #12]
			array1[2]	= 1;		
   966a6:	4b36      	ldr	r3, [pc, #216]	; (96780 <dd_can_dump_mailbox_data+0x1d8>)
   966a8:	2201      	movs	r2, #1
   966aa:	709a      	strb	r2, [r3, #2]
			break;
   966ac:	e05c      	b.n	96768 <dd_can_dump_mailbox_data+0x1c0>
			
			case Sensor_group_3 :													// Temp3, CS1-Temp and CS2-Temp
			DD_Sensor_status.Temp3status = temp_struct.temp_reg_16[1];			
   966ae:	4b32      	ldr	r3, [pc, #200]	; (96778 <dd_can_dump_mailbox_data+0x1d0>)
   966b0:	885b      	ldrh	r3, [r3, #2]
   966b2:	b29a      	uxth	r2, r3
   966b4:	4b31      	ldr	r3, [pc, #196]	; (9677c <dd_can_dump_mailbox_data+0x1d4>)
   966b6:	81da      	strh	r2, [r3, #14]
			temp_struct.temp_reg_32 = (p_mailbox->ul_datah);			
   966b8:	687b      	ldr	r3, [r7, #4]
   966ba:	69db      	ldr	r3, [r3, #28]
   966bc:	4a2e      	ldr	r2, [pc, #184]	; (96778 <dd_can_dump_mailbox_data+0x1d0>)
   966be:	6013      	str	r3, [r2, #0]
			DD_Sensor_status.CS1_Tempstatus =  temp_struct.temp_reg_16[0] ;
   966c0:	4b2d      	ldr	r3, [pc, #180]	; (96778 <dd_can_dump_mailbox_data+0x1d0>)
   966c2:	881b      	ldrh	r3, [r3, #0]
   966c4:	b29a      	uxth	r2, r3
   966c6:	4b2d      	ldr	r3, [pc, #180]	; (9677c <dd_can_dump_mailbox_data+0x1d4>)
   966c8:	821a      	strh	r2, [r3, #16]
			DD_Sensor_status.CS2_Tempstatus=   temp_struct.temp_reg_16[1] ;			
   966ca:	4b2b      	ldr	r3, [pc, #172]	; (96778 <dd_can_dump_mailbox_data+0x1d0>)
   966cc:	885b      	ldrh	r3, [r3, #2]
   966ce:	b29a      	uxth	r2, r3
   966d0:	4b2a      	ldr	r3, [pc, #168]	; (9677c <dd_can_dump_mailbox_data+0x1d4>)
   966d2:	825a      	strh	r2, [r3, #18]
			array1[3]	= 1;
   966d4:	4b2a      	ldr	r3, [pc, #168]	; (96780 <dd_can_dump_mailbox_data+0x1d8>)
   966d6:	2201      	movs	r2, #1
   966d8:	70da      	strb	r2, [r3, #3]
			break;
   966da:	e045      	b.n	96768 <dd_can_dump_mailbox_data+0x1c0>
			
			case Sensor_group_4 :													// CS3- Temp, CS1 and CS2
			DD_Sensor_status.CS3_Tempstatus = temp_struct.temp_reg_16[1];			
   966dc:	4b26      	ldr	r3, [pc, #152]	; (96778 <dd_can_dump_mailbox_data+0x1d0>)
   966de:	885b      	ldrh	r3, [r3, #2]
   966e0:	b29a      	uxth	r2, r3
   966e2:	4b26      	ldr	r3, [pc, #152]	; (9677c <dd_can_dump_mailbox_data+0x1d4>)
   966e4:	829a      	strh	r2, [r3, #20]
			temp_struct.temp_reg_32 = (p_mailbox->ul_datah);			
   966e6:	687b      	ldr	r3, [r7, #4]
   966e8:	69db      	ldr	r3, [r3, #28]
   966ea:	4a23      	ldr	r2, [pc, #140]	; (96778 <dd_can_dump_mailbox_data+0x1d0>)
   966ec:	6013      	str	r3, [r2, #0]
			DD_Sensor_status.CS1status =  temp_struct.temp_reg_16[0] ;
   966ee:	4b22      	ldr	r3, [pc, #136]	; (96778 <dd_can_dump_mailbox_data+0x1d0>)
   966f0:	881b      	ldrh	r3, [r3, #0]
   966f2:	b29a      	uxth	r2, r3
   966f4:	4b21      	ldr	r3, [pc, #132]	; (9677c <dd_can_dump_mailbox_data+0x1d4>)
   966f6:	82da      	strh	r2, [r3, #22]
			DD_Sensor_status.CS2status=   temp_struct.temp_reg_16[1] ;	
   966f8:	4b1f      	ldr	r3, [pc, #124]	; (96778 <dd_can_dump_mailbox_data+0x1d0>)
   966fa:	885b      	ldrh	r3, [r3, #2]
   966fc:	b29a      	uxth	r2, r3
   966fe:	4b1f      	ldr	r3, [pc, #124]	; (9677c <dd_can_dump_mailbox_data+0x1d4>)
   96700:	831a      	strh	r2, [r3, #24]
			array1[4]	= 1;		
   96702:	4b1f      	ldr	r3, [pc, #124]	; (96780 <dd_can_dump_mailbox_data+0x1d8>)
   96704:	2201      	movs	r2, #1
   96706:	711a      	strb	r2, [r3, #4]
			break;
   96708:	e02e      	b.n	96768 <dd_can_dump_mailbox_data+0x1c0>
			
			case Sensor_group_5 :													// CS3, DAC1 and DAA
			DD_Sensor_status.CS3status = temp_struct.temp_reg_16[1];			
   9670a:	4b1b      	ldr	r3, [pc, #108]	; (96778 <dd_can_dump_mailbox_data+0x1d0>)
   9670c:	885b      	ldrh	r3, [r3, #2]
   9670e:	b29a      	uxth	r2, r3
   96710:	4b1a      	ldr	r3, [pc, #104]	; (9677c <dd_can_dump_mailbox_data+0x1d4>)
   96712:	835a      	strh	r2, [r3, #26]
			temp_struct.temp_reg_32 = (p_mailbox->ul_datah);			
   96714:	687b      	ldr	r3, [r7, #4]
   96716:	69db      	ldr	r3, [r3, #28]
   96718:	4a17      	ldr	r2, [pc, #92]	; (96778 <dd_can_dump_mailbox_data+0x1d0>)
   9671a:	6013      	str	r3, [r2, #0]
			DD_Sensor_status.DAC1status =  temp_struct.temp_reg_16[0] ;
   9671c:	4b16      	ldr	r3, [pc, #88]	; (96778 <dd_can_dump_mailbox_data+0x1d0>)
   9671e:	881b      	ldrh	r3, [r3, #0]
   96720:	b29a      	uxth	r2, r3
   96722:	4b16      	ldr	r3, [pc, #88]	; (9677c <dd_can_dump_mailbox_data+0x1d4>)
   96724:	839a      	strh	r2, [r3, #28]
			DD_Sensor_status.DAAstatus=   temp_struct.temp_reg_16[1] ;		
   96726:	4b14      	ldr	r3, [pc, #80]	; (96778 <dd_can_dump_mailbox_data+0x1d0>)
   96728:	885b      	ldrh	r3, [r3, #2]
   9672a:	b29a      	uxth	r2, r3
   9672c:	4b13      	ldr	r3, [pc, #76]	; (9677c <dd_can_dump_mailbox_data+0x1d4>)
   9672e:	83da      	strh	r2, [r3, #30]
			array1[5]	= 1;	
   96730:	4b13      	ldr	r3, [pc, #76]	; (96780 <dd_can_dump_mailbox_data+0x1d8>)
   96732:	2201      	movs	r2, #1
   96734:	715a      	strb	r2, [r3, #5]
			break;
   96736:	e017      	b.n	96768 <dd_can_dump_mailbox_data+0x1c0>
			
			case Sensor_group_6 :													// DAB, DAC2 and flow Sensor
			DD_Sensor_status.DABstatus = temp_struct.temp_reg_16[1];			
   96738:	4b0f      	ldr	r3, [pc, #60]	; (96778 <dd_can_dump_mailbox_data+0x1d0>)
   9673a:	885b      	ldrh	r3, [r3, #2]
   9673c:	b29a      	uxth	r2, r3
   9673e:	4b0f      	ldr	r3, [pc, #60]	; (9677c <dd_can_dump_mailbox_data+0x1d4>)
   96740:	841a      	strh	r2, [r3, #32]
			temp_struct.temp_reg_32 = (p_mailbox->ul_datah);			
   96742:	687b      	ldr	r3, [r7, #4]
   96744:	69db      	ldr	r3, [r3, #28]
   96746:	4a0c      	ldr	r2, [pc, #48]	; (96778 <dd_can_dump_mailbox_data+0x1d0>)
   96748:	6013      	str	r3, [r2, #0]
			DD_Sensor_status.DAC2status =  temp_struct.temp_reg_16[0] ;
   9674a:	4b0b      	ldr	r3, [pc, #44]	; (96778 <dd_can_dump_mailbox_data+0x1d0>)
   9674c:	881b      	ldrh	r3, [r3, #0]
   9674e:	b29a      	uxth	r2, r3
   96750:	4b0a      	ldr	r3, [pc, #40]	; (9677c <dd_can_dump_mailbox_data+0x1d4>)
   96752:	845a      	strh	r2, [r3, #34]	; 0x22
			DD_Sensor_status.flow_sensor_status=   temp_struct.temp_reg_16[1] ;	
   96754:	4b08      	ldr	r3, [pc, #32]	; (96778 <dd_can_dump_mailbox_data+0x1d0>)
   96756:	885b      	ldrh	r3, [r3, #2]
   96758:	b29a      	uxth	r2, r3
   9675a:	4b08      	ldr	r3, [pc, #32]	; (9677c <dd_can_dump_mailbox_data+0x1d4>)
   9675c:	849a      	strh	r2, [r3, #36]	; 0x24
			array1[6]	= 1;	
   9675e:	4b08      	ldr	r3, [pc, #32]	; (96780 <dd_can_dump_mailbox_data+0x1d8>)
   96760:	2201      	movs	r2, #1
   96762:	719a      	strb	r2, [r3, #6]
			
			break;
   96764:	e000      	b.n	96768 <dd_can_dump_mailbox_data+0x1c0>
			
			default :
			break;
   96766:	bf00      	nop
		} //switch(DD_Sensor_status.SENSOR_GROUP_type_reg)  ends here
		
		break;
   96768:	e000      	b.n	9676c <dd_can_dump_mailbox_data+0x1c4>
			break;
		}
		break;
		
		case PROPORTIONING_CPU_id :
		break;
   9676a:	bf00      	nop
		break;
		
		default:
		break;
	}
}
   9676c:	370c      	adds	r7, #12
   9676e:	46bd      	mov	sp, r7
   96770:	f85d 7b04 	ldr.w	r7, [sp], #4
   96774:	4770      	bx	lr
   96776:	bf00      	nop
   96778:	200727a8 	.word	0x200727a8
   9677c:	200727ac 	.word	0x200727ac
   96780:	20071b4c 	.word	0x20071b4c
   96784:	20071aa8 	.word	0x20071aa8
   96788:	20071b58 	.word	0x20071b58
   9678c:	20071b5c 	.word	0x20071b5c

00096790 <dd_can_mailbox_read>:


static uint32_t dd_can_mailbox_read(can_mb_conf_t *p_mailbox)   {
   96790:	b480      	push	{r7}
   96792:	b087      	sub	sp, #28
   96794:	af00      	add	r7, sp, #0
   96796:	6078      	str	r0, [r7, #4]

	uint32_t ul_status;
	uint8_t uc_index;
	uint32_t ul_retval;

	ul_retval = 0;
   96798:	2300      	movs	r3, #0
   9679a:	617b      	str	r3, [r7, #20]
	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   9679c:	687b      	ldr	r3, [r7, #4]
   9679e:	681b      	ldr	r3, [r3, #0]
   967a0:	74fb      	strb	r3, [r7, #19]
	ul_status = p_mailbox->ul_status;
   967a2:	687b      	ldr	r3, [r7, #4]
   967a4:	689b      	ldr	r3, [r3, #8]
   967a6:	60fb      	str	r3, [r7, #12]
	 /* Check whether there is overwriting happening in Receive with * Overwrite mode,
	 * or there're messages lost in Receive mode. */
	 
	if ((ul_status & CAN_MSR_MRDY) && (ul_status & CAN_MSR_MMI)) {	ul_retval = CAN_MAILBOX_RX_OVER;	}
   967a8:	68fb      	ldr	r3, [r7, #12]
   967aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   967ae:	2b00      	cmp	r3, #0
   967b0:	d006      	beq.n	967c0 <dd_can_mailbox_read+0x30>
   967b2:	68fb      	ldr	r3, [r7, #12]
   967b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   967b8:	2b00      	cmp	r3, #0
   967ba:	d001      	beq.n	967c0 <dd_can_mailbox_read+0x30>
   967bc:	2302      	movs	r3, #2
   967be:	617b      	str	r3, [r7, #20]

	/* Read the message family ID. */
	p_mailbox->ul_fid =	CAN0->CAN_MB[uc_index].CAN_MFID & CAN_MFID_MFID_Msk;	
   967c0:	4a26      	ldr	r2, [pc, #152]	; (9685c <dd_can_mailbox_read+0xcc>)
   967c2:	7cfb      	ldrb	r3, [r7, #19]
   967c4:	015b      	lsls	r3, r3, #5
   967c6:	4413      	add	r3, r2
   967c8:	f503 7302 	add.w	r3, r3, #520	; 0x208
   967cc:	685b      	ldr	r3, [r3, #4]
   967ce:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   967d2:	687b      	ldr	r3, [r7, #4]
   967d4:	615a      	str	r2, [r3, #20]

	/* Read received data length. */
	p_mailbox->uc_length = (ul_status & CAN_MSR_MDLC_Msk) >> CAN_MSR_MDLC_Pos;
   967d6:	68fb      	ldr	r3, [r7, #12]
   967d8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
   967dc:	0c1b      	lsrs	r3, r3, #16
   967de:	b2da      	uxtb	r2, r3
   967e0:	687b      	ldr	r3, [r7, #4]
   967e2:	719a      	strb	r2, [r3, #6]
	
	/* Read received data. */
	p_mailbox->ul_datal = CAN0->CAN_MB[uc_index].CAN_MDL;
   967e4:	4a1d      	ldr	r2, [pc, #116]	; (9685c <dd_can_mailbox_read+0xcc>)
   967e6:	7cfb      	ldrb	r3, [r7, #19]
   967e8:	015b      	lsls	r3, r3, #5
   967ea:	4413      	add	r3, r2
   967ec:	f503 7304 	add.w	r3, r3, #528	; 0x210
   967f0:	685a      	ldr	r2, [r3, #4]
   967f2:	687b      	ldr	r3, [r7, #4]
   967f4:	619a      	str	r2, [r3, #24]
	p_mailbox->ul_datah = CAN0->CAN_MB[uc_index].CAN_MDH;
   967f6:	4a19      	ldr	r2, [pc, #100]	; (9685c <dd_can_mailbox_read+0xcc>)
   967f8:	7cfb      	ldrb	r3, [r7, #19]
   967fa:	015b      	lsls	r3, r3, #5
   967fc:	4413      	add	r3, r2
   967fe:	f503 7306 	add.w	r3, r3, #536	; 0x218
   96802:	681a      	ldr	r2, [r3, #0]
   96804:	687b      	ldr	r3, [r7, #4]
   96806:	61da      	str	r2, [r3, #28]
	
	
	/* Read the mailbox status again to check whether the software needs to
	 * re-read mailbox data register. */
	p_mailbox->ul_status = CAN0->CAN_MB[uc_index].CAN_MSR;
   96808:	4a14      	ldr	r2, [pc, #80]	; (9685c <dd_can_mailbox_read+0xcc>)
   9680a:	7cfb      	ldrb	r3, [r7, #19]
   9680c:	015b      	lsls	r3, r3, #5
   9680e:	4413      	add	r3, r2
   96810:	f503 7304 	add.w	r3, r3, #528	; 0x210
   96814:	681a      	ldr	r2, [r3, #0]
   96816:	687b      	ldr	r3, [r7, #4]
   96818:	609a      	str	r2, [r3, #8]
	ul_status = p_mailbox->ul_status;
   9681a:	687b      	ldr	r3, [r7, #4]
   9681c:	689b      	ldr	r3, [r3, #8]
   9681e:	60fb      	str	r3, [r7, #12]
	if (ul_status & CAN_MSR_MMI) {ul_retval |= CAN_MAILBOX_RX_NEED_RD_AGAIN;	}
   96820:	68fb      	ldr	r3, [r7, #12]
   96822:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   96826:	2b00      	cmp	r3, #0
   96828:	d003      	beq.n	96832 <dd_can_mailbox_read+0xa2>
   9682a:	697b      	ldr	r3, [r7, #20]
   9682c:	f043 0304 	orr.w	r3, r3, #4
   96830:	617b      	str	r3, [r7, #20]
	else { ul_retval |= CAN_MAILBOX_TRANSFER_OK; }		
		
	/* Enable next receive process. */	 // Allows the reception of the next message
	CAN0->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MTCR |CAN_MCR_MDLC(p_mailbox->uc_length);    
   96832:	490a      	ldr	r1, [pc, #40]	; (9685c <dd_can_mailbox_read+0xcc>)
   96834:	7cfb      	ldrb	r3, [r7, #19]
   96836:	687a      	ldr	r2, [r7, #4]
   96838:	7992      	ldrb	r2, [r2, #6]
   9683a:	0412      	lsls	r2, r2, #16
   9683c:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   96840:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
   96844:	015b      	lsls	r3, r3, #5
   96846:	440b      	add	r3, r1
   96848:	f503 7306 	add.w	r3, r3, #536	; 0x218
   9684c:	605a      	str	r2, [r3, #4]
	return ul_retval;
   9684e:	697b      	ldr	r3, [r7, #20]
}
   96850:	4618      	mov	r0, r3
   96852:	371c      	adds	r7, #28
   96854:	46bd      	mov	sp, r7
   96856:	f85d 7b04 	ldr.w	r7, [sp], #4
   9685a:	4770      	bx	lr
   9685c:	400b4000 	.word	0x400b4000

00096860 <dd_can_mailbox_write>:

		
static uint32_t dd_can_mailbox_write(can_mb_conf_t *p_mailbox)
{
   96860:	b480      	push	{r7}
   96862:	b085      	sub	sp, #20
   96864:	af00      	add	r7, sp, #0
   96866:	6078      	str	r0, [r7, #4]
	uint32_t ul_status;
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   96868:	687b      	ldr	r3, [r7, #4]
   9686a:	681b      	ldr	r3, [r3, #0]
   9686c:	73fb      	strb	r3, [r7, #15]
	/* Read the mailbox status firstly to check whether the mailbox is ready
	 *or not. */
	p_mailbox->ul_status = CAN0->CAN_MB[uc_index].CAN_MSR;
   9686e:	4a2a      	ldr	r2, [pc, #168]	; (96918 <dd_can_mailbox_write+0xb8>)
   96870:	7bfb      	ldrb	r3, [r7, #15]
   96872:	015b      	lsls	r3, r3, #5
   96874:	4413      	add	r3, r2
   96876:	f503 7304 	add.w	r3, r3, #528	; 0x210
   9687a:	681a      	ldr	r2, [r3, #0]
   9687c:	687b      	ldr	r3, [r7, #4]
   9687e:	609a      	str	r2, [r3, #8]
	ul_status = p_mailbox->ul_status;
   96880:	687b      	ldr	r3, [r7, #4]
   96882:	689b      	ldr	r3, [r3, #8]
   96884:	60bb      	str	r3, [r7, #8]
	if (!(ul_status & CAN_MSR_MRDY)) {
   96886:	68bb      	ldr	r3, [r7, #8]
   96888:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   9688c:	2b00      	cmp	r3, #0
   9688e:	d101      	bne.n	96894 <dd_can_mailbox_write+0x34>
		return CAN_MAILBOX_NOT_READY;
   96890:	2301      	movs	r3, #1
   96892:	e03b      	b.n	9690c <dd_can_mailbox_write+0xac>
	}

	/* Write transmit identifier. */
	if (p_mailbox->uc_id_ver) { 
   96894:	687b      	ldr	r3, [r7, #4]
   96896:	795b      	ldrb	r3, [r3, #5]
   96898:	2b00      	cmp	r3, #0
   9689a:	d00b      	beq.n	968b4 <dd_can_mailbox_write+0x54>
		CAN0->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id | CAN_MAM_MIDE;
   9689c:	491e      	ldr	r1, [pc, #120]	; (96918 <dd_can_mailbox_write+0xb8>)
   9689e:	7bfb      	ldrb	r3, [r7, #15]
   968a0:	687a      	ldr	r2, [r7, #4]
   968a2:	6912      	ldr	r2, [r2, #16]
   968a4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   968a8:	015b      	lsls	r3, r3, #5
   968aa:	440b      	add	r3, r1
   968ac:	f503 7302 	add.w	r3, r3, #520	; 0x208
   968b0:	601a      	str	r2, [r3, #0]
   968b2:	e008      	b.n	968c6 <dd_can_mailbox_write+0x66>
	} else {
		CAN0->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
   968b4:	4918      	ldr	r1, [pc, #96]	; (96918 <dd_can_mailbox_write+0xb8>)
   968b6:	7bfb      	ldrb	r3, [r7, #15]
   968b8:	687a      	ldr	r2, [r7, #4]
   968ba:	6912      	ldr	r2, [r2, #16]
   968bc:	015b      	lsls	r3, r3, #5
   968be:	440b      	add	r3, r1
   968c0:	f503 7302 	add.w	r3, r3, #520	; 0x208
   968c4:	601a      	str	r2, [r3, #0]
	}

	/* Write transmit data into mailbox data register. */
	CAN0->CAN_MB[uc_index].CAN_MDL = p_mailbox->ul_datal;
   968c6:	4914      	ldr	r1, [pc, #80]	; (96918 <dd_can_mailbox_write+0xb8>)
   968c8:	7bfb      	ldrb	r3, [r7, #15]
   968ca:	687a      	ldr	r2, [r7, #4]
   968cc:	6992      	ldr	r2, [r2, #24]
   968ce:	015b      	lsls	r3, r3, #5
   968d0:	440b      	add	r3, r1
   968d2:	f503 7304 	add.w	r3, r3, #528	; 0x210
   968d6:	605a      	str	r2, [r3, #4]
	if (p_mailbox->uc_length > 4) {  CAN0->CAN_MB[uc_index].CAN_MDH = p_mailbox->ul_datah;
   968d8:	687b      	ldr	r3, [r7, #4]
   968da:	799b      	ldrb	r3, [r3, #6]
   968dc:	2b04      	cmp	r3, #4
   968de:	d908      	bls.n	968f2 <dd_can_mailbox_write+0x92>
   968e0:	490d      	ldr	r1, [pc, #52]	; (96918 <dd_can_mailbox_write+0xb8>)
   968e2:	7bfb      	ldrb	r3, [r7, #15]
   968e4:	687a      	ldr	r2, [r7, #4]
   968e6:	69d2      	ldr	r2, [r2, #28]
   968e8:	015b      	lsls	r3, r3, #5
   968ea:	440b      	add	r3, r1
   968ec:	f503 7306 	add.w	r3, r3, #536	; 0x218
   968f0:	601a      	str	r2, [r3, #0]
	}

	/* Write transmit data length into mailbox control register. */
	CAN0->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MDLC(p_mailbox->uc_length);
   968f2:	4909      	ldr	r1, [pc, #36]	; (96918 <dd_can_mailbox_write+0xb8>)
   968f4:	7bfb      	ldrb	r3, [r7, #15]
   968f6:	687a      	ldr	r2, [r7, #4]
   968f8:	7992      	ldrb	r2, [r2, #6]
   968fa:	0412      	lsls	r2, r2, #16
   968fc:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   96900:	015b      	lsls	r3, r3, #5
   96902:	440b      	add	r3, r1
   96904:	f503 7306 	add.w	r3, r3, #536	; 0x218
   96908:	605a      	str	r2, [r3, #4]

	return CAN_MAILBOX_TRANSFER_OK;
   9690a:	2300      	movs	r3, #0
}
   9690c:	4618      	mov	r0, r3
   9690e:	3714      	adds	r7, #20
   96910:	46bd      	mov	sp, r7
   96912:	f85d 7b04 	ldr.w	r7, [sp], #4
   96916:	4770      	bx	lr
   96918:	400b4000 	.word	0x400b4000

0009691c <dd_can_global_send_transfer_cmd>:

void dd_can_global_send_transfer_cmd(uint8_t uc_mask)
{
   9691c:	b480      	push	{r7}
   9691e:	b085      	sub	sp, #20
   96920:	af00      	add	r7, sp, #0
   96922:	4603      	mov	r3, r0
   96924:	71fb      	strb	r3, [r7, #7]
	uint32_t ul_reg;

	ul_reg = CAN0->CAN_TCR & ((uint32_t) ~GLOBAL_MAILBOX_MASK);
   96926:	4b07      	ldr	r3, [pc, #28]	; (96944 <dd_can_global_send_transfer_cmd+0x28>)
   96928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   9692a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   9692e:	60fb      	str	r3, [r7, #12]
	CAN0->CAN_TCR = ul_reg | uc_mask;
   96930:	4904      	ldr	r1, [pc, #16]	; (96944 <dd_can_global_send_transfer_cmd+0x28>)
   96932:	79fa      	ldrb	r2, [r7, #7]
   96934:	68fb      	ldr	r3, [r7, #12]
   96936:	4313      	orrs	r3, r2
   96938:	624b      	str	r3, [r1, #36]	; 0x24
}
   9693a:	3714      	adds	r7, #20
   9693c:	46bd      	mov	sp, r7
   9693e:	f85d 7b04 	ldr.w	r7, [sp], #4
   96942:	4770      	bx	lr
   96944:	400b4000 	.word	0x400b4000

00096948 <dd_can_mailbox_conf>:



static void dd_can_mailbox_conf(can_mb_conf_t *p_mailbox)
{
   96948:	b480      	push	{r7}
   9694a:	b085      	sub	sp, #20
   9694c:	af00      	add	r7, sp, #0
   9694e:	6078      	str	r0, [r7, #4]
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   96950:	687b      	ldr	r3, [r7, #4]
   96952:	681b      	ldr	r3, [r3, #0]
   96954:	73fb      	strb	r3, [r7, #15]
	/* Check the object type of the mailbox. If it's used to disable the
	 * mailbox, reset the whole mailbox. */
	if (!p_mailbox->uc_obj_type) {
   96956:	687b      	ldr	r3, [r7, #4]
   96958:	791b      	ldrb	r3, [r3, #4]
   9695a:	2b00      	cmp	r3, #0
   9695c:	d12e      	bne.n	969bc <dd_can_mailbox_conf+0x74>
		CAN0->CAN_MB[uc_index].CAN_MMR = 0;
   9695e:	4a34      	ldr	r2, [pc, #208]	; (96a30 <dd_can_mailbox_conf+0xe8>)
   96960:	7bfb      	ldrb	r3, [r7, #15]
   96962:	3310      	adds	r3, #16
   96964:	015b      	lsls	r3, r3, #5
   96966:	4413      	add	r3, r2
   96968:	2200      	movs	r2, #0
   9696a:	601a      	str	r2, [r3, #0]
		CAN0->CAN_MB[uc_index].CAN_MAM = 0;
   9696c:	4a30      	ldr	r2, [pc, #192]	; (96a30 <dd_can_mailbox_conf+0xe8>)
   9696e:	7bfb      	ldrb	r3, [r7, #15]
   96970:	3310      	adds	r3, #16
   96972:	015b      	lsls	r3, r3, #5
   96974:	4413      	add	r3, r2
   96976:	2200      	movs	r2, #0
   96978:	605a      	str	r2, [r3, #4]
		CAN0->CAN_MB[uc_index].CAN_MID = 0;
   9697a:	4a2d      	ldr	r2, [pc, #180]	; (96a30 <dd_can_mailbox_conf+0xe8>)
   9697c:	7bfb      	ldrb	r3, [r7, #15]
   9697e:	015b      	lsls	r3, r3, #5
   96980:	4413      	add	r3, r2
   96982:	f503 7302 	add.w	r3, r3, #520	; 0x208
   96986:	2200      	movs	r2, #0
   96988:	601a      	str	r2, [r3, #0]
		CAN0->CAN_MB[uc_index].CAN_MDL = 0;
   9698a:	4a29      	ldr	r2, [pc, #164]	; (96a30 <dd_can_mailbox_conf+0xe8>)
   9698c:	7bfb      	ldrb	r3, [r7, #15]
   9698e:	015b      	lsls	r3, r3, #5
   96990:	4413      	add	r3, r2
   96992:	f503 7304 	add.w	r3, r3, #528	; 0x210
   96996:	2200      	movs	r2, #0
   96998:	605a      	str	r2, [r3, #4]
		CAN0->CAN_MB[uc_index].CAN_MDH = 0;
   9699a:	4a25      	ldr	r2, [pc, #148]	; (96a30 <dd_can_mailbox_conf+0xe8>)
   9699c:	7bfb      	ldrb	r3, [r7, #15]
   9699e:	015b      	lsls	r3, r3, #5
   969a0:	4413      	add	r3, r2
   969a2:	f503 7306 	add.w	r3, r3, #536	; 0x218
   969a6:	2200      	movs	r2, #0
   969a8:	601a      	str	r2, [r3, #0]
		CAN0->CAN_MB[uc_index].CAN_MCR = 0;
   969aa:	4a21      	ldr	r2, [pc, #132]	; (96a30 <dd_can_mailbox_conf+0xe8>)
   969ac:	7bfb      	ldrb	r3, [r7, #15]
   969ae:	015b      	lsls	r3, r3, #5
   969b0:	4413      	add	r3, r2
   969b2:	f503 7306 	add.w	r3, r3, #536	; 0x218
   969b6:	2200      	movs	r2, #0
   969b8:	605a      	str	r2, [r3, #4]
		return;
   969ba:	e034      	b.n	96a26 <dd_can_mailbox_conf+0xde>
	}
	
	/* Set the priority in Transmit mode. */                                                                   
	CAN0->CAN_MB[uc_index].CAN_MMR = (CAN0->CAN_MB[uc_index].CAN_MMR &  ~CAN_MMR_PRIOR_Msk) | (p_mailbox->uc_tx_prio << CAN_MMR_PRIOR_Pos);  
   969bc:	481c      	ldr	r0, [pc, #112]	; (96a30 <dd_can_mailbox_conf+0xe8>)
   969be:	7bfb      	ldrb	r3, [r7, #15]
   969c0:	491b      	ldr	r1, [pc, #108]	; (96a30 <dd_can_mailbox_conf+0xe8>)
   969c2:	7bfa      	ldrb	r2, [r7, #15]
   969c4:	3210      	adds	r2, #16
   969c6:	0152      	lsls	r2, r2, #5
   969c8:	440a      	add	r2, r1
   969ca:	6812      	ldr	r2, [r2, #0]
   969cc:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
   969d0:	6879      	ldr	r1, [r7, #4]
   969d2:	79c9      	ldrb	r1, [r1, #7]
   969d4:	0409      	lsls	r1, r1, #16
   969d6:	430a      	orrs	r2, r1
   969d8:	3310      	adds	r3, #16
   969da:	015b      	lsls	r3, r3, #5
   969dc:	4403      	add	r3, r0
   969de:	601a      	str	r2, [r3, #0]
	/* Set the message ID and message acceptance mask for the mailbox in * other modes. */	
		CAN0 ->CAN_MB[uc_index].CAN_MAM = p_mailbox->ul_id_msk;
   969e0:	4913      	ldr	r1, [pc, #76]	; (96a30 <dd_can_mailbox_conf+0xe8>)
   969e2:	7bfb      	ldrb	r3, [r7, #15]
   969e4:	687a      	ldr	r2, [r7, #4]
   969e6:	68d2      	ldr	r2, [r2, #12]
   969e8:	3310      	adds	r3, #16
   969ea:	015b      	lsls	r3, r3, #5
   969ec:	440b      	add	r3, r1
   969ee:	605a      	str	r2, [r3, #4]
		CAN0 ->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;	
   969f0:	490f      	ldr	r1, [pc, #60]	; (96a30 <dd_can_mailbox_conf+0xe8>)
   969f2:	7bfb      	ldrb	r3, [r7, #15]
   969f4:	687a      	ldr	r2, [r7, #4]
   969f6:	6912      	ldr	r2, [r2, #16]
   969f8:	015b      	lsls	r3, r3, #5
   969fa:	440b      	add	r3, r1
   969fc:	f503 7302 	add.w	r3, r3, #520	; 0x208
   96a00:	601a      	str	r2, [r3, #0]

	/* Set up mailbox in one of the five different modes. */                                                      
	CAN0 ->CAN_MB[uc_index].CAN_MMR = (CAN0 ->CAN_MB[uc_index].CAN_MMR & ~CAN_MMR_MOT_Msk) | (p_mailbox->uc_obj_type << CAN_MMR_MOT_Pos);		
   96a02:	480b      	ldr	r0, [pc, #44]	; (96a30 <dd_can_mailbox_conf+0xe8>)
   96a04:	7bfb      	ldrb	r3, [r7, #15]
   96a06:	490a      	ldr	r1, [pc, #40]	; (96a30 <dd_can_mailbox_conf+0xe8>)
   96a08:	7bfa      	ldrb	r2, [r7, #15]
   96a0a:	3210      	adds	r2, #16
   96a0c:	0152      	lsls	r2, r2, #5
   96a0e:	440a      	add	r2, r1
   96a10:	6812      	ldr	r2, [r2, #0]
   96a12:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
   96a16:	6879      	ldr	r1, [r7, #4]
   96a18:	7909      	ldrb	r1, [r1, #4]
   96a1a:	0609      	lsls	r1, r1, #24
   96a1c:	430a      	orrs	r2, r1
   96a1e:	3310      	adds	r3, #16
   96a20:	015b      	lsls	r3, r3, #5
   96a22:	4403      	add	r3, r0
   96a24:	601a      	str	r2, [r3, #0]
}
   96a26:	3714      	adds	r7, #20
   96a28:	46bd      	mov	sp, r7
   96a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
   96a2e:	4770      	bx	lr
   96a30:	400b4000 	.word	0x400b4000

00096a34 <DD_CAN_WRITE_PROPO>:
	p_mailbox->ul_datal = 0;
	p_mailbox->ul_datah = 0;
}

void DD_CAN_WRITE_PROPO(uint16_t data, uint16_t rc_count)
{
   96a34:	b580      	push	{r7, lr}
   96a36:	b084      	sub	sp, #16
   96a38:	af00      	add	r7, sp, #0
   96a3a:	4603      	mov	r3, r0
   96a3c:	460a      	mov	r2, r1
   96a3e:	80fb      	strh	r3, [r7, #6]
   96a40:	4613      	mov	r3, r2
   96a42:	80bb      	strh	r3, [r7, #4]
// 	 can0_mailbox.ul_datah = 0x55AAAA55;
// 	 can0_mailbox.uc_length = 8;
// 	 dd_can_mailbox_write(&can0_mailbox);
// 	 dd_can_global_send_transfer_cmd(CAN_TCR_MB0);
MASTER_CMD_ID_TYPE dd_propo_cmd;
dd_propo_cmd = data;
   96a44:	88fb      	ldrh	r3, [r7, #6]
   96a46:	73fb      	strb	r3, [r7, #15]
dd_master_command(PROPORTIONING_CPU_id, dd_propo_cmd,rc_count);
   96a48:	7bfa      	ldrb	r2, [r7, #15]
   96a4a:	88bb      	ldrh	r3, [r7, #4]
   96a4c:	2002      	movs	r0, #2
   96a4e:	4611      	mov	r1, r2
   96a50:	461a      	mov	r2, r3
   96a52:	4b04      	ldr	r3, [pc, #16]	; (96a64 <DD_CAN_WRITE_PROPO+0x30>)
   96a54:	4798      	blx	r3
dd_can_global_send_transfer_cmd(CAN_TCR_MB0);
   96a56:	2001      	movs	r0, #1
   96a58:	4b03      	ldr	r3, [pc, #12]	; (96a68 <DD_CAN_WRITE_PROPO+0x34>)
   96a5a:	4798      	blx	r3

}
   96a5c:	3710      	adds	r7, #16
   96a5e:	46bd      	mov	sp, r7
   96a60:	bd80      	pop	{r7, pc}
   96a62:	bf00      	nop
   96a64:	00096505 	.word	0x00096505
   96a68:	0009691d 	.word	0x0009691d

00096a6c <DD_CAN_WRITE_HEMO>:

void DD_CAN_WRITE_HEMO(uint16_t data, uint16_t speed)
{
   96a6c:	b580      	push	{r7, lr}
   96a6e:	b084      	sub	sp, #16
   96a70:	af00      	add	r7, sp, #0
   96a72:	4603      	mov	r3, r0
   96a74:	460a      	mov	r2, r1
   96a76:	80fb      	strh	r3, [r7, #6]
   96a78:	4613      	mov	r3, r2
   96a7a:	80bb      	strh	r3, [r7, #4]
	// 	 can0_mailbox.ul_datah = 0x55AAAA55;
	// 	 can0_mailbox.uc_length = 8;
	// 	 dd_can_mailbox_write(&can0_mailbox);
	// 	 dd_can_global_send_transfer_cmd(CAN_TCR_MB0);
	MASTER_CMD_ID_TYPE dd_hemo_cmd;
	dd_hemo_cmd = data;
   96a7c:	88fb      	ldrh	r3, [r7, #6]
   96a7e:	73fb      	strb	r3, [r7, #15]
	CAN0->CAN_IDR = 0xffffffff;
   96a80:	4b09      	ldr	r3, [pc, #36]	; (96aa8 <DD_CAN_WRITE_HEMO+0x3c>)
   96a82:	f04f 32ff 	mov.w	r2, #4294967295
   96a86:	609a      	str	r2, [r3, #8]
	dd_master_command(HEMO_CPU_id, dd_hemo_cmd, speed);
   96a88:	7bfa      	ldrb	r2, [r7, #15]
   96a8a:	88bb      	ldrh	r3, [r7, #4]
   96a8c:	2001      	movs	r0, #1
   96a8e:	4611      	mov	r1, r2
   96a90:	461a      	mov	r2, r3
   96a92:	4b06      	ldr	r3, [pc, #24]	; (96aac <DD_CAN_WRITE_HEMO+0x40>)
   96a94:	4798      	blx	r3
	dd_can_global_send_transfer_cmd(CAN_TCR_MB0);
   96a96:	2001      	movs	r0, #1
   96a98:	4b05      	ldr	r3, [pc, #20]	; (96ab0 <DD_CAN_WRITE_HEMO+0x44>)
   96a9a:	4798      	blx	r3
	CAN0->CAN_IER = CAN_IER_MB1;
   96a9c:	4b02      	ldr	r3, [pc, #8]	; (96aa8 <DD_CAN_WRITE_HEMO+0x3c>)
   96a9e:	2202      	movs	r2, #2
   96aa0:	605a      	str	r2, [r3, #4]
}
   96aa2:	3710      	adds	r7, #16
   96aa4:	46bd      	mov	sp, r7
   96aa6:	bd80      	pop	{r7, pc}
   96aa8:	400b4000 	.word	0x400b4000
   96aac:	00096505 	.word	0x00096505
   96ab0:	0009691d 	.word	0x0009691d

00096ab4 <DD_CAN_WRITE_SENSOR>:

void DD_CAN_WRITE_SENSOR(uint16_t data)
{
   96ab4:	b580      	push	{r7, lr}
   96ab6:	b084      	sub	sp, #16
   96ab8:	af00      	add	r7, sp, #0
   96aba:	4603      	mov	r3, r0
   96abc:	80fb      	strh	r3, [r7, #6]
	// 	 can0_mailbox.ul_datah = 0x55AAAA55;
	// 	 can0_mailbox.uc_length = 8;
	// 	 dd_can_mailbox_write(&can0_mailbox);
	// 	 dd_can_global_send_transfer_cmd(CAN_TCR_MB0);
	MASTER_CMD_ID_TYPE dd_sensor_cmd;
	dd_sensor_cmd = data;
   96abe:	88fb      	ldrh	r3, [r7, #6]
   96ac0:	73fb      	strb	r3, [r7, #15]
	CAN0->CAN_IDR = 0xffffffff;
   96ac2:	4b09      	ldr	r3, [pc, #36]	; (96ae8 <DD_CAN_WRITE_SENSOR+0x34>)
   96ac4:	f04f 32ff 	mov.w	r2, #4294967295
   96ac8:	609a      	str	r2, [r3, #8]
	dd_master_command(SENSOR_CPU_id, dd_sensor_cmd, 0);
   96aca:	7bfb      	ldrb	r3, [r7, #15]
   96acc:	2003      	movs	r0, #3
   96ace:	4619      	mov	r1, r3
   96ad0:	2200      	movs	r2, #0
   96ad2:	4b06      	ldr	r3, [pc, #24]	; (96aec <DD_CAN_WRITE_SENSOR+0x38>)
   96ad4:	4798      	blx	r3
	dd_can_global_send_transfer_cmd(CAN_TCR_MB0);
   96ad6:	2001      	movs	r0, #1
   96ad8:	4b05      	ldr	r3, [pc, #20]	; (96af0 <DD_CAN_WRITE_SENSOR+0x3c>)
   96ada:	4798      	blx	r3
	CAN0->CAN_IER = CAN_IER_MB1;
   96adc:	4b02      	ldr	r3, [pc, #8]	; (96ae8 <DD_CAN_WRITE_SENSOR+0x34>)
   96ade:	2202      	movs	r2, #2
   96ae0:	605a      	str	r2, [r3, #4]
}
   96ae2:	3710      	adds	r7, #16
   96ae4:	46bd      	mov	sp, r7
   96ae6:	bd80      	pop	{r7, pc}
   96ae8:	400b4000 	.word	0x400b4000
   96aec:	00096505 	.word	0x00096505
   96af0:	0009691d 	.word	0x0009691d

00096af4 <DD_CAN_READ_APTVPT>:


void DD_CAN_READ_APTVPT(void)
{
   96af4:	b580      	push	{r7, lr}
   96af6:	af00      	add	r7, sp, #0
	
	DD_CAN_WRITE_HEMO(BP_APT_VPT_SEND_TO_MASTER, 0);
   96af8:	2027      	movs	r0, #39	; 0x27
   96afa:	2100      	movs	r1, #0
   96afc:	4b01      	ldr	r3, [pc, #4]	; (96b04 <DD_CAN_READ_APTVPT+0x10>)
   96afe:	4798      	blx	r3
	
}
   96b00:	bd80      	pop	{r7, pc}
   96b02:	bf00      	nop
   96b04:	00096a6d 	.word	0x00096a6d

00096b08 <DD_INIT_CAN>:



void DD_INIT_CAN()    

	{
   96b08:	b580      	push	{r7, lr}
   96b0a:	b08e      	sub	sp, #56	; 0x38
   96b0c:	af00      	add	r7, sp, #0
				
	can_bit_timing_t  *p_bit_time ;
	p_bit_time = (can_bit_timing_t *)&can_bit_time[6];
   96b0e:	4b4f      	ldr	r3, [pc, #316]	; (96c4c <DD_INIT_CAN+0x144>)
   96b10:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t ul_flag;
	uint32_t ul_tick;
	uint8_t uc_prescale = 120;
   96b12:	2378      	movs	r3, #120	; 0x78
   96b14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t ul_sysclk;
	CAN0 ->CAN_WPMR = 0x43414E00;  //Can write protection disabled
   96b18:	4b4d      	ldr	r3, [pc, #308]	; (96c50 <DD_INIT_CAN+0x148>)
   96b1a:	4a4e      	ldr	r2, [pc, #312]	; (96c54 <DD_INIT_CAN+0x14c>)
   96b1c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	CAN0 ->CAN_MR &= ~CAN_MR_CANEN ;  //0xFFFFFFFE; // DISABLE CAN0
   96b20:	4a4b      	ldr	r2, [pc, #300]	; (96c50 <DD_INIT_CAN+0x148>)
   96b22:	4b4b      	ldr	r3, [pc, #300]	; (96c50 <DD_INIT_CAN+0x148>)
   96b24:	681b      	ldr	r3, [r3, #0]
   96b26:	f023 0301 	bic.w	r3, r3, #1
   96b2a:	6013      	str	r3, [r2, #0]
	CAN0->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) | CAN_BR_PROPAG(p_bit_time->uc_prog - 1) | CAN_BR_SJW(p_bit_time->uc_sjw - 1) |	CAN_BR_BRP(uc_prescale - 1);
   96b2c:	4948      	ldr	r1, [pc, #288]	; (96c50 <DD_INIT_CAN+0x148>)
   96b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   96b30:	78db      	ldrb	r3, [r3, #3]
   96b32:	3b01      	subs	r3, #1
   96b34:	f003 0207 	and.w	r2, r3, #7
   96b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
   96b3a:	789b      	ldrb	r3, [r3, #2]
   96b3c:	3b01      	subs	r3, #1
   96b3e:	011b      	lsls	r3, r3, #4
   96b40:	f003 0370 	and.w	r3, r3, #112	; 0x70
   96b44:	431a      	orrs	r2, r3
   96b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
   96b48:	785b      	ldrb	r3, [r3, #1]
   96b4a:	3b01      	subs	r3, #1
   96b4c:	021b      	lsls	r3, r3, #8
   96b4e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
   96b52:	431a      	orrs	r2, r3
   96b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
   96b56:	791b      	ldrb	r3, [r3, #4]
   96b58:	3b01      	subs	r3, #1
   96b5a:	031b      	lsls	r3, r3, #12
   96b5c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
   96b60:	431a      	orrs	r2, r3
   96b62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   96b66:	3b01      	subs	r3, #1
   96b68:	041b      	lsls	r3, r3, #16
   96b6a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
   96b6e:	4313      	orrs	r3, r2
   96b70:	614b      	str	r3, [r1, #20]
	can_mb_conf_t mb_config_t;
	
	//RESET ALL MAIL BOX
	//can_bit_timing_t *p_bit_time;
	/* Set the mailbox object type parameter to disable the mailbox. */
	mb_config_t.uc_obj_type = CAN_MB_DISABLE_MODE;
   96b72:	2300      	movs	r3, #0
   96b74:	723b      	strb	r3, [r7, #8]
	for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   96b76:	2300      	movs	r3, #0
   96b78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   96b7c:	e00b      	b.n	96b96 <DD_INIT_CAN+0x8e>
		mb_config_t.ul_mb_idx = i;
   96b7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   96b82:	607b      	str	r3, [r7, #4]
		dd_can_mailbox_conf(&mb_config_t);
   96b84:	1d3b      	adds	r3, r7, #4
   96b86:	4618      	mov	r0, r3
   96b88:	4b33      	ldr	r3, [pc, #204]	; (96c58 <DD_INIT_CAN+0x150>)
   96b8a:	4798      	blx	r3
	
	//RESET ALL MAIL BOX
	//can_bit_timing_t *p_bit_time;
	/* Set the mailbox object type parameter to disable the mailbox. */
	mb_config_t.uc_obj_type = CAN_MB_DISABLE_MODE;
	for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   96b8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   96b90:	3301      	adds	r3, #1
   96b92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   96b96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   96b9a:	2b07      	cmp	r3, #7
   96b9c:	d9ef      	bls.n	96b7e <DD_INIT_CAN+0x76>
		mb_config_t.ul_mb_idx = i;
		dd_can_mailbox_conf(&mb_config_t);
	}
	// ALL MAIL BOX HAS BEEN RESET
	CAN0->CAN_MR |= CAN_MR_CANEN ;  //0x00000001; // CAN IS ENABLED
   96b9e:	4a2c      	ldr	r2, [pc, #176]	; (96c50 <DD_INIT_CAN+0x148>)
   96ba0:	4b2b      	ldr	r3, [pc, #172]	; (96c50 <DD_INIT_CAN+0x148>)
   96ba2:	681b      	ldr	r3, [r3, #0]
   96ba4:	f043 0301 	orr.w	r3, r3, #1
   96ba8:	6013      	str	r3, [r2, #0]
	
	/* Wait until the CAN is synchronized with the bus activity. */
	ul_flag = 0;
   96baa:	2300      	movs	r3, #0
   96bac:	637b      	str	r3, [r7, #52]	; 0x34
	ul_tick = 0;
   96bae:	2300      	movs	r3, #0
   96bb0:	633b      	str	r3, [r7, #48]	; 0x30
	while  (!(ul_flag & CAN_SR_WAKEUP) && (ul_tick < CAN_TIMEOUT))    {//(!(ul_flag & 0x100000 ) && (ul_tick < CAN_TIMEOUT)) {  //check can_bus wakeup bit
   96bb2:	e005      	b.n	96bc0 <DD_INIT_CAN+0xb8>
		ul_flag = (CAN0->CAN_SR);
   96bb4:	4b26      	ldr	r3, [pc, #152]	; (96c50 <DD_INIT_CAN+0x148>)
   96bb6:	691b      	ldr	r3, [r3, #16]
   96bb8:	637b      	str	r3, [r7, #52]	; 0x34
		ul_tick++;
   96bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   96bbc:	3301      	adds	r3, #1
   96bbe:	633b      	str	r3, [r7, #48]	; 0x30
	CAN0->CAN_MR |= CAN_MR_CANEN ;  //0x00000001; // CAN IS ENABLED
	
	/* Wait until the CAN is synchronized with the bus activity. */
	ul_flag = 0;
	ul_tick = 0;
	while  (!(ul_flag & CAN_SR_WAKEUP) && (ul_tick < CAN_TIMEOUT))    {//(!(ul_flag & 0x100000 ) && (ul_tick < CAN_TIMEOUT)) {  //check can_bus wakeup bit
   96bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   96bc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
   96bc6:	2b00      	cmp	r3, #0
   96bc8:	d103      	bne.n	96bd2 <DD_INIT_CAN+0xca>
   96bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   96bcc:	4a23      	ldr	r2, [pc, #140]	; (96c5c <DD_INIT_CAN+0x154>)
   96bce:	4293      	cmp	r3, r2
   96bd0:	d9f0      	bls.n	96bb4 <DD_INIT_CAN+0xac>
	/* Timeout or the CAN module has been synchronized with the bus. */
/*	if (CAN_TIMEOUT == ul_tick) { puts("CAN initialization (sync) ERROR" STRING_EOL);	}
	else {	puts("CAN initialization is completed." STRING_EOL);
	}*/
	//NVIC-> ISER reset_mailbox_conf(&can0_mailbox);
	can0_mailbox.ul_mb_idx =   MAILBOX_1;
   96bd2:	4b23      	ldr	r3, [pc, #140]	; (96c60 <DD_INIT_CAN+0x158>)
   96bd4:	2201      	movs	r2, #1
   96bd6:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_RX_MODE ;
   96bd8:	4b21      	ldr	r3, [pc, #132]	; (96c60 <DD_INIT_CAN+0x158>)
   96bda:	2201      	movs	r2, #1
   96bdc:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = 0;
   96bde:	4b20      	ldr	r3, [pc, #128]	; (96c60 <DD_INIT_CAN+0x158>)
   96be0:	2200      	movs	r2, #0
   96be2:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   96be4:	4b1e      	ldr	r3, [pc, #120]	; (96c60 <DD_INIT_CAN+0x158>)
   96be6:	2200      	movs	r2, #0
   96be8:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk =  CAN_MFID_MFID_VA_dd(CAN_MASK);   // 0x7FC | CAN_MAM_MIDvA_Msk ;
   96bea:	4b1d      	ldr	r3, [pc, #116]	; (96c60 <DD_INIT_CAN+0x158>)
   96bec:	4a1d      	ldr	r2, [pc, #116]	; (96c64 <DD_INIT_CAN+0x15c>)
   96bee:	60da      	str	r2, [r3, #12]
	can0_mailbox.ul_id = CAN_MID_MIDvA_dd(MASTER_CPU_id) ;
   96bf0:	4b1b      	ldr	r3, [pc, #108]	; (96c60 <DD_INIT_CAN+0x158>)
   96bf2:	f44f 1220 	mov.w	r2, #2621440	; 0x280000
   96bf6:	611a      	str	r2, [r3, #16]
	dd_can_mailbox_conf(&can0_mailbox);	
   96bf8:	4819      	ldr	r0, [pc, #100]	; (96c60 <DD_INIT_CAN+0x158>)
   96bfa:	4b17      	ldr	r3, [pc, #92]	; (96c58 <DD_INIT_CAN+0x150>)
   96bfc:	4798      	blx	r3
	
	can0_mailbox.ul_mb_idx =   MAILBOX_0;
   96bfe:	4b18      	ldr	r3, [pc, #96]	; (96c60 <DD_INIT_CAN+0x158>)
   96c00:	2200      	movs	r2, #0
   96c02:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_TX_MODE ;
   96c04:	4b16      	ldr	r3, [pc, #88]	; (96c60 <DD_INIT_CAN+0x158>)
   96c06:	2203      	movs	r2, #3
   96c08:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = 1;
   96c0a:	4b15      	ldr	r3, [pc, #84]	; (96c60 <DD_INIT_CAN+0x158>)
   96c0c:	2201      	movs	r2, #1
   96c0e:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   96c10:	4b13      	ldr	r3, [pc, #76]	; (96c60 <DD_INIT_CAN+0x158>)
   96c12:	2200      	movs	r2, #0
   96c14:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk = CAN_MFID_MFID_VA_dd(CAN_MASK);// 0x7FC | CAN_MAM_MIDvA_Msk | CAN_MAM_MIDvB_Msk ;
   96c16:	4b12      	ldr	r3, [pc, #72]	; (96c60 <DD_INIT_CAN+0x158>)
   96c18:	4a12      	ldr	r2, [pc, #72]	; (96c64 <DD_INIT_CAN+0x15c>)
   96c1a:	60da      	str	r2, [r3, #12]
	can0_mailbox.ul_id = CAN_MID_MIDvA_dd(PROPORTIONING_CPU_id);
   96c1c:	4b10      	ldr	r3, [pc, #64]	; (96c60 <DD_INIT_CAN+0x158>)
   96c1e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   96c22:	611a      	str	r2, [r3, #16]
	dd_can_mailbox_conf(&can0_mailbox);	
   96c24:	480e      	ldr	r0, [pc, #56]	; (96c60 <DD_INIT_CAN+0x158>)
   96c26:	4b0c      	ldr	r3, [pc, #48]	; (96c58 <DD_INIT_CAN+0x150>)
   96c28:	4798      	blx	r3
		
		NVIC_EnableIRQ(CAN0_IRQn);
   96c2a:	202b      	movs	r0, #43	; 0x2b
   96c2c:	4b0e      	ldr	r3, [pc, #56]	; (96c68 <DD_INIT_CAN+0x160>)
   96c2e:	4798      	blx	r3
		CAN0->CAN_IER = CAN_IER_MB1;
   96c30:	4b07      	ldr	r3, [pc, #28]	; (96c50 <DD_INIT_CAN+0x148>)
   96c32:	2202      	movs	r2, #2
   96c34:	605a      	str	r2, [r3, #4]
// 					
	
	sn65hvda540_set_en(&can0_transceiver ,PIN_CAN0_STANDBY_IDX);
   96c36:	480d      	ldr	r0, [pc, #52]	; (96c6c <DD_INIT_CAN+0x164>)
   96c38:	2103      	movs	r1, #3
   96c3a:	4b0d      	ldr	r3, [pc, #52]	; (96c70 <DD_INIT_CAN+0x168>)
   96c3c:	4798      	blx	r3
	sn65hvda540_normal_mode(&can0_transceiver);
   96c3e:	480b      	ldr	r0, [pc, #44]	; (96c6c <DD_INIT_CAN+0x164>)
   96c40:	4b0c      	ldr	r3, [pc, #48]	; (96c74 <DD_INIT_CAN+0x16c>)
   96c42:	4798      	blx	r3
		
		
	}
   96c44:	3738      	adds	r7, #56	; 0x38
   96c46:	46bd      	mov	sp, r7
   96c48:	bd80      	pop	{r7, pc}
   96c4a:	bf00      	nop
   96c4c:	000a8c68 	.word	0x000a8c68
   96c50:	400b4000 	.word	0x400b4000
   96c54:	43414e00 	.word	0x43414e00
   96c58:	00096949 	.word	0x00096949
   96c5c:	0001869f 	.word	0x0001869f
   96c60:	200727d8 	.word	0x200727d8
   96c64:	1ffc0000 	.word	0x1ffc0000
   96c68:	000963c1 	.word	0x000963c1
   96c6c:	200727f8 	.word	0x200727f8
   96c70:	0009645d 	.word	0x0009645d
   96c74:	00096479 	.word	0x00096479

00096c78 <DD_CAN_READ_SENSORS>:
	
	
	

uint16_t DD_CAN_READ_SENSORS(DD_sensortype ID_SENSOR)
{
   96c78:	b480      	push	{r7}
   96c7a:	b085      	sub	sp, #20
   96c7c:	af00      	add	r7, sp, #0
   96c7e:	4603      	mov	r3, r0
   96c80:	71fb      	strb	r3, [r7, #7]
	uint16_t SENSOR_VAL;
	uint8_t channel = 0;
   96c82:	2300      	movs	r3, #0
   96c84:	737b      	strb	r3, [r7, #13]
	//adc_chnl channel = channel_0;
	switch(ID_SENSOR)
   96c86:	79fb      	ldrb	r3, [r7, #7]
   96c88:	3b01      	subs	r3, #1
   96c8a:	2b13      	cmp	r3, #19
   96c8c:	d87a      	bhi.n	96d84 <DD_CAN_READ_SENSORS+0x10c>
   96c8e:	a201      	add	r2, pc, #4	; (adr r2, 96c94 <DD_CAN_READ_SENSORS+0x1c>)
   96c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   96c94:	00096ce5 	.word	0x00096ce5
   96c98:	00096ced 	.word	0x00096ced
   96c9c:	00096cf5 	.word	0x00096cf5
   96ca0:	00096cfd 	.word	0x00096cfd
   96ca4:	00096d05 	.word	0x00096d05
   96ca8:	00096d0d 	.word	0x00096d0d
   96cac:	00096d15 	.word	0x00096d15
   96cb0:	00096d1d 	.word	0x00096d1d
   96cb4:	00096d25 	.word	0x00096d25
   96cb8:	00096d2d 	.word	0x00096d2d
   96cbc:	00096d35 	.word	0x00096d35
   96cc0:	00096d3d 	.word	0x00096d3d
   96cc4:	00096d45 	.word	0x00096d45
   96cc8:	00096d4d 	.word	0x00096d4d
   96ccc:	00096d55 	.word	0x00096d55
   96cd0:	00096d5d 	.word	0x00096d5d
   96cd4:	00096d65 	.word	0x00096d65
   96cd8:	00096d6d 	.word	0x00096d6d
   96cdc:	00096d75 	.word	0x00096d75
   96ce0:	00096d7d 	.word	0x00096d7d
	{
		case DD_CAN_SENSOR_ID1:
		
		SENSOR_VAL = DD_Sensor_status.ps1status;
   96ce4:	4b2b      	ldr	r3, [pc, #172]	; (96d94 <DD_CAN_READ_SENSORS+0x11c>)
   96ce6:	885b      	ldrh	r3, [r3, #2]
   96ce8:	81fb      	strh	r3, [r7, #14]
		break;
   96cea:	e04b      	b.n	96d84 <DD_CAN_READ_SENSORS+0x10c>
		
		case DD_CAN_SENSOR_ID2:
		SENSOR_VAL = DD_Sensor_status.ps2status;
   96cec:	4b29      	ldr	r3, [pc, #164]	; (96d94 <DD_CAN_READ_SENSORS+0x11c>)
   96cee:	889b      	ldrh	r3, [r3, #4]
   96cf0:	81fb      	strh	r3, [r7, #14]
		break;
   96cf2:	e047      	b.n	96d84 <DD_CAN_READ_SENSORS+0x10c>
		
		case DD_CAN_SENSOR_ID3:
		SENSOR_VAL = DD_Sensor_status.ps3status;
   96cf4:	4b27      	ldr	r3, [pc, #156]	; (96d94 <DD_CAN_READ_SENSORS+0x11c>)
   96cf6:	88db      	ldrh	r3, [r3, #6]
   96cf8:	81fb      	strh	r3, [r7, #14]
		break;
   96cfa:	e043      	b.n	96d84 <DD_CAN_READ_SENSORS+0x10c>
		
		case DD_CAN_SENSOR_ID4:
		SENSOR_VAL = DD_Sensor_status.thermocouple_status;
   96cfc:	4b25      	ldr	r3, [pc, #148]	; (96d94 <DD_CAN_READ_SENSORS+0x11c>)
   96cfe:	891b      	ldrh	r3, [r3, #8]
   96d00:	81fb      	strh	r3, [r7, #14]
		break;
   96d02:	e03f      	b.n	96d84 <DD_CAN_READ_SENSORS+0x10c>
		
		case DD_CAN_SENSOR_ID5:
		SENSOR_VAL = DD_Sensor_status.Temp1status;
   96d04:	4b23      	ldr	r3, [pc, #140]	; (96d94 <DD_CAN_READ_SENSORS+0x11c>)
   96d06:	895b      	ldrh	r3, [r3, #10]
   96d08:	81fb      	strh	r3, [r7, #14]
		
		break;
   96d0a:	e03b      	b.n	96d84 <DD_CAN_READ_SENSORS+0x10c>
		
		case DD_CAN_SENSOR_ID6:
		SENSOR_VAL = DD_Sensor_status.Temp2status;
   96d0c:	4b21      	ldr	r3, [pc, #132]	; (96d94 <DD_CAN_READ_SENSORS+0x11c>)
   96d0e:	899b      	ldrh	r3, [r3, #12]
   96d10:	81fb      	strh	r3, [r7, #14]
		break;
   96d12:	e037      	b.n	96d84 <DD_CAN_READ_SENSORS+0x10c>
		
		case DD_CAN_SENSOR_ID7:
		SENSOR_VAL = DD_Sensor_status.CS3_Tempstatus;
   96d14:	4b1f      	ldr	r3, [pc, #124]	; (96d94 <DD_CAN_READ_SENSORS+0x11c>)
   96d16:	8a9b      	ldrh	r3, [r3, #20]
   96d18:	81fb      	strh	r3, [r7, #14]
		break;
   96d1a:	e033      	b.n	96d84 <DD_CAN_READ_SENSORS+0x10c>
		
		case DD_CAN_SENSOR_ID8:
		SENSOR_VAL = DD_Sensor_status.CS1_Tempstatus;
   96d1c:	4b1d      	ldr	r3, [pc, #116]	; (96d94 <DD_CAN_READ_SENSORS+0x11c>)
   96d1e:	8a1b      	ldrh	r3, [r3, #16]
   96d20:	81fb      	strh	r3, [r7, #14]
		break;
   96d22:	e02f      	b.n	96d84 <DD_CAN_READ_SENSORS+0x10c>
		
		case DD_CAN_SENSOR_ID9:
		SENSOR_VAL = DD_Sensor_status.CS2_Tempstatus;
   96d24:	4b1b      	ldr	r3, [pc, #108]	; (96d94 <DD_CAN_READ_SENSORS+0x11c>)
   96d26:	8a5b      	ldrh	r3, [r3, #18]
   96d28:	81fb      	strh	r3, [r7, #14]
		break;
   96d2a:	e02b      	b.n	96d84 <DD_CAN_READ_SENSORS+0x10c>
		
		case DD_CAN_SENSOR_ID10:
		SENSOR_VAL = DD_Sensor_status.CS3_Tempstatus;
   96d2c:	4b19      	ldr	r3, [pc, #100]	; (96d94 <DD_CAN_READ_SENSORS+0x11c>)
   96d2e:	8a9b      	ldrh	r3, [r3, #20]
   96d30:	81fb      	strh	r3, [r7, #14]
		break;
   96d32:	e027      	b.n	96d84 <DD_CAN_READ_SENSORS+0x10c>
		
		case DD_CAN_SENSOR_ID11:
		SENSOR_VAL = DD_Sensor_status.CS1status;
   96d34:	4b17      	ldr	r3, [pc, #92]	; (96d94 <DD_CAN_READ_SENSORS+0x11c>)
   96d36:	8adb      	ldrh	r3, [r3, #22]
   96d38:	81fb      	strh	r3, [r7, #14]
		break;
   96d3a:	e023      	b.n	96d84 <DD_CAN_READ_SENSORS+0x10c>
		
		case DD_CAN_SENSOR_ID12:
		SENSOR_VAL = DD_Sensor_status.CS2status;
   96d3c:	4b15      	ldr	r3, [pc, #84]	; (96d94 <DD_CAN_READ_SENSORS+0x11c>)
   96d3e:	8b1b      	ldrh	r3, [r3, #24]
   96d40:	81fb      	strh	r3, [r7, #14]
		break;
   96d42:	e01f      	b.n	96d84 <DD_CAN_READ_SENSORS+0x10c>
		
		case DD_CAN_SENSOR_ID13:
		SENSOR_VAL = DD_Sensor_status.CS3status;
   96d44:	4b13      	ldr	r3, [pc, #76]	; (96d94 <DD_CAN_READ_SENSORS+0x11c>)
   96d46:	8b5b      	ldrh	r3, [r3, #26]
   96d48:	81fb      	strh	r3, [r7, #14]
		break;
   96d4a:	e01b      	b.n	96d84 <DD_CAN_READ_SENSORS+0x10c>
		
		case DD_CAN_SENSOR_ID14:
		SENSOR_VAL = DD_Sensor_status.DAC1status;
   96d4c:	4b11      	ldr	r3, [pc, #68]	; (96d94 <DD_CAN_READ_SENSORS+0x11c>)
   96d4e:	8b9b      	ldrh	r3, [r3, #28]
   96d50:	81fb      	strh	r3, [r7, #14]
		break;
   96d52:	e017      	b.n	96d84 <DD_CAN_READ_SENSORS+0x10c>
		
		case DD_CAN_SENSOR_ID15:
		SENSOR_VAL = DD_Sensor_status.DAAstatus;
   96d54:	4b0f      	ldr	r3, [pc, #60]	; (96d94 <DD_CAN_READ_SENSORS+0x11c>)
   96d56:	8bdb      	ldrh	r3, [r3, #30]
   96d58:	81fb      	strh	r3, [r7, #14]
		break;
   96d5a:	e013      	b.n	96d84 <DD_CAN_READ_SENSORS+0x10c>
		
		case DD_CAN_SENSOR_ID16:
		SENSOR_VAL = DD_Sensor_status.DABstatus;
   96d5c:	4b0d      	ldr	r3, [pc, #52]	; (96d94 <DD_CAN_READ_SENSORS+0x11c>)
   96d5e:	8c1b      	ldrh	r3, [r3, #32]
   96d60:	81fb      	strh	r3, [r7, #14]
		break;
   96d62:	e00f      	b.n	96d84 <DD_CAN_READ_SENSORS+0x10c>
		
		case DD_CAN_SENSOR_ID17:
		SENSOR_VAL = DD_Sensor_status.DAC2status;
   96d64:	4b0b      	ldr	r3, [pc, #44]	; (96d94 <DD_CAN_READ_SENSORS+0x11c>)
   96d66:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
   96d68:	81fb      	strh	r3, [r7, #14]
		break;
   96d6a:	e00b      	b.n	96d84 <DD_CAN_READ_SENSORS+0x10c>
		
		case DD_CAN_SENSOR_ID18:
		SENSOR_VAL = DD_Sensor_status.flow_sensor_status;
   96d6c:	4b09      	ldr	r3, [pc, #36]	; (96d94 <DD_CAN_READ_SENSORS+0x11c>)
   96d6e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
   96d70:	81fb      	strh	r3, [r7, #14]
		break;
   96d72:	e007      	b.n	96d84 <DD_CAN_READ_SENSORS+0x10c>
		
		case DD_CAN_SENSOR_ID19:
		SENSOR_VAL = DD_Sensor_status.aptstatus;
   96d74:	4b07      	ldr	r3, [pc, #28]	; (96d94 <DD_CAN_READ_SENSORS+0x11c>)
   96d76:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
   96d78:	81fb      	strh	r3, [r7, #14]
		break;
   96d7a:	e003      	b.n	96d84 <DD_CAN_READ_SENSORS+0x10c>
		
		case DD_CAN_SENSOR_ID20:
		SENSOR_VAL = DD_Sensor_status.vptstatus;
   96d7c:	4b05      	ldr	r3, [pc, #20]	; (96d94 <DD_CAN_READ_SENSORS+0x11c>)
   96d7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   96d80:	81fb      	strh	r3, [r7, #14]
		break;
   96d82:	bf00      	nop
 	}
	
		
	return SENSOR_VAL;
   96d84:	89fb      	ldrh	r3, [r7, #14]
	
}
   96d86:	4618      	mov	r0, r3
   96d88:	3714      	adds	r7, #20
   96d8a:	46bd      	mov	sp, r7
   96d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
   96d90:	4770      	bx	lr
   96d92:	bf00      	nop
   96d94:	200727ac 	.word	0x200727ac

00096d98 <DD_INIT_CLOCK>:
// void check_interrupt(void);
// extern uint8_t sv_cntrl_activate_valve(sv_valvetype sv_valve_id);
// extern uint8_t sv_cntrl_deactivate_valve(sv_valvetype sv_valve_id);
// static chk_flag_toggle =0;
void DD_INIT_CLOCK()
{
   96d98:	b580      	push	{r7, lr}
   96d9a:	af00      	add	r7, sp, #0
	
	sysclk_init();
   96d9c:	4b07      	ldr	r3, [pc, #28]	; (96dbc <DD_INIT_CLOCK+0x24>)
   96d9e:	4798      	blx	r3
	PMC->PMC_WPMR  = 0x504D4300;
   96da0:	4b07      	ldr	r3, [pc, #28]	; (96dc0 <DD_INIT_CLOCK+0x28>)
   96da2:	4a08      	ldr	r2, [pc, #32]	; (96dc4 <DD_INIT_CLOCK+0x2c>)
   96da4:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PMC->PMC_PCER0 = 0xF8007900;
   96da8:	4b05      	ldr	r3, [pc, #20]	; (96dc0 <DD_INIT_CLOCK+0x28>)
   96daa:	4a07      	ldr	r2, [pc, #28]	; (96dc8 <DD_INIT_CLOCK+0x30>)
   96dac:	611a      	str	r2, [r3, #16]
	PMC->PMC_PCER1 = 0x0000083F;
   96dae:	4b04      	ldr	r3, [pc, #16]	; (96dc0 <DD_INIT_CLOCK+0x28>)
   96db0:	f640 023f 	movw	r2, #2111	; 0x83f
   96db4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	
}
   96db8:	bd80      	pop	{r7, pc}
   96dba:	bf00      	nop
   96dbc:	0008043d 	.word	0x0008043d
   96dc0:	400e0600 	.word	0x400e0600
   96dc4:	504d4300 	.word	0x504d4300
   96dc8:	f8007900 	.word	0xf8007900

00096dcc <DD_INIT_PIO>:
#include "cl_consolecontroller.h"
extern Cl_ReturnCodeType  Cl_SendDatatoconsole(Cl_ConsoleTxCommandtype , uint8_t* ,uint8_t );


void DD_INIT_PIO()
{
   96dcc:	b580      	push	{r7, lr}
   96dce:	af00      	add	r7, sp, #0
	
	
PIOA->PIO_WPMR = 0x50494F00;			//PIOA->PIO_WPMR = 0x50494F00;
   96dd0:	4b3e      	ldr	r3, [pc, #248]	; (96ecc <DD_INIT_PIO+0x100>)
   96dd2:	4a3f      	ldr	r2, [pc, #252]	; (96ed0 <DD_INIT_PIO+0x104>)
   96dd4:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
//PIOA->PIO_PER =  0x21C9ECFC;			//PIOA->PIO_PER  = 0x01C9ECF0;
PIOA->PIO_PER =  0x21C9ECFC;
   96dd8:	4b3c      	ldr	r3, [pc, #240]	; (96ecc <DD_INIT_PIO+0x100>)
   96dda:	4a3e      	ldr	r2, [pc, #248]	; (96ed4 <DD_INIT_PIO+0x108>)
   96ddc:	601a      	str	r2, [r3, #0]
PIOA->PIO_OER =  0x20F0B86C;			//PIOA->PIO_OER  = 0x00C0AC70;
   96dde:	4b3b      	ldr	r3, [pc, #236]	; (96ecc <DD_INIT_PIO+0x100>)
   96de0:	4a3d      	ldr	r2, [pc, #244]	; (96ed8 <DD_INIT_PIO+0x10c>)
   96de2:	611a      	str	r2, [r3, #16]
PIOA->PIO_ODR =  0x01094494;			//PIOA->PIO_ODR  = 0x01094080;
   96de4:	4b39      	ldr	r3, [pc, #228]	; (96ecc <DD_INIT_PIO+0x100>)
   96de6:	4a3d      	ldr	r2, [pc, #244]	; (96edc <DD_INIT_PIO+0x110>)
   96de8:	615a      	str	r2, [r3, #20]
PIOA->PIO_PDR =  0x1E361303;			//PIOA->PIO_PDR =  0x00060000;
   96dea:	4b38      	ldr	r3, [pc, #224]	; (96ecc <DD_INIT_PIO+0x100>)
   96dec:	4a3c      	ldr	r2, [pc, #240]	; (96ee0 <DD_INIT_PIO+0x114>)
   96dee:	605a      	str	r2, [r3, #4]
PIOA->PIO_PUER = 0x00060000;
   96df0:	4b36      	ldr	r3, [pc, #216]	; (96ecc <DD_INIT_PIO+0x100>)
   96df2:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
   96df6:	665a      	str	r2, [r3, #100]	; 0x64
PIOA->PIO_ABSR = 0x00391000;
   96df8:	4b34      	ldr	r3, [pc, #208]	; (96ecc <DD_INIT_PIO+0x100>)
   96dfa:	4a3a      	ldr	r2, [pc, #232]	; (96ee4 <DD_INIT_PIO+0x118>)
   96dfc:	671a      	str	r2, [r3, #112]	; 0x70
PIOA->PIO_DIFSR =0x00004000;			 //Blood pump on off debouncing PA14 //PIOA->PIO_DIFSR = 0x08000001;
   96dfe:	4b33      	ldr	r3, [pc, #204]	; (96ecc <DD_INIT_PIO+0x100>)
   96e00:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   96e04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 PIOA->PIO_SODR = 1<<2;
   96e08:	4b30      	ldr	r3, [pc, #192]	; (96ecc <DD_INIT_PIO+0x100>)
   96e0a:	2204      	movs	r2, #4
   96e0c:	631a      	str	r2, [r3, #48]	; 0x30
 PIOA->PIO_PER = 1<<2;
   96e0e:	4b2f      	ldr	r3, [pc, #188]	; (96ecc <DD_INIT_PIO+0x100>)
   96e10:	2204      	movs	r2, #4
   96e12:	601a      	str	r2, [r3, #0]
 PIOA->PIO_OER = 1<<2;
   96e14:	4b2d      	ldr	r3, [pc, #180]	; (96ecc <DD_INIT_PIO+0x100>)
   96e16:	2204      	movs	r2, #4
   96e18:	611a      	str	r2, [r3, #16]

//PIOA->PIO_CODR = 0x0600A800;
//PIOA->PIO_SODR = 0x00004000;

PIOB->PIO_WPMR = 0x50494F00;			//PIOB->PIO_WPMR = 0x50494F00;
   96e1a:	4b33      	ldr	r3, [pc, #204]	; (96ee8 <DD_INIT_PIO+0x11c>)
   96e1c:	4a2c      	ldr	r2, [pc, #176]	; (96ed0 <DD_INIT_PIO+0x104>)
   96e1e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
PIOB->PIO_PER  = 0x0FE7F700;			//PIOB->PIO_PER  = 0x0B45D300;     PIO enable Register
   96e22:	4b31      	ldr	r3, [pc, #196]	; (96ee8 <DD_INIT_PIO+0x11c>)
   96e24:	4a31      	ldr	r2, [pc, #196]	; (96eec <DD_INIT_PIO+0x120>)
   96e26:	601a      	str	r2, [r3, #0]
PIOB->PIO_OER  = 0x00026400;			//PIOB->PIO_OER  = 0x00004000;     Output Enable Register
   96e28:	4b2f      	ldr	r3, [pc, #188]	; (96ee8 <DD_INIT_PIO+0x11c>)
   96e2a:	f44f 3219 	mov.w	r2, #156672	; 0x26400
   96e2e:	611a      	str	r2, [r3, #16]
PIOB->PIO_ODR  = 0x0FE59300; // 0x0FE59300			//PIOB->PIO_ODR  = 0x0B459300;     Output Disable Register
   96e30:	4b2d      	ldr	r3, [pc, #180]	; (96ee8 <DD_INIT_PIO+0x11c>)
   96e32:	4a2f      	ldr	r2, [pc, #188]	; (96ef0 <DD_INIT_PIO+0x124>)
   96e34:	615a      	str	r2, [r3, #20]
PIOB->PIO_PDR  = 0xF01800FF;			// Pio Disable Register
   96e36:	4b2c      	ldr	r3, [pc, #176]	; (96ee8 <DD_INIT_PIO+0x11c>)
   96e38:	4a2e      	ldr	r2, [pc, #184]	; (96ef4 <DD_INIT_PIO+0x128>)
   96e3a:	605a      	str	r2, [r3, #4]
//PIOB->PIO_SODR = 0x04004000;
//PIOB->PIO_CODR = 0x02000000;

PIOC->PIO_WPMR = 0x50494F00;			//PIOC->PIO_WPMR = 0x50494F00;
   96e3c:	4b2e      	ldr	r3, [pc, #184]	; (96ef8 <DD_INIT_PIO+0x12c>)
   96e3e:	4a24      	ldr	r2, [pc, #144]	; (96ed0 <DD_INIT_PIO+0x104>)
   96e40:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
PIOC->PIO_PER  = 0x7F9FFFFE;			//PIOC->PIO_PER  = 0x7F9FFFFE;
   96e44:	4b2c      	ldr	r3, [pc, #176]	; (96ef8 <DD_INIT_PIO+0x12c>)
   96e46:	4a2d      	ldr	r2, [pc, #180]	; (96efc <DD_INIT_PIO+0x130>)
   96e48:	601a      	str	r2, [r3, #0]
PIOC->PIO_OER  = 0x18E1FFFE;			//PIOC->PIO_OER  = 0x1881FFFE;
   96e4a:	4b2b      	ldr	r3, [pc, #172]	; (96ef8 <DD_INIT_PIO+0x12c>)
   96e4c:	4a2c      	ldr	r2, [pc, #176]	; (96f00 <DD_INIT_PIO+0x134>)
   96e4e:	611a      	str	r2, [r3, #16]
PIOC->PIO_ODR  = 0x671E0000;			//PIOC->PIO_ODR  = 0x671E0000;
   96e50:	4b29      	ldr	r3, [pc, #164]	; (96ef8 <DD_INIT_PIO+0x12c>)
   96e52:	4a2c      	ldr	r2, [pc, #176]	; (96f04 <DD_INIT_PIO+0x138>)
   96e54:	615a      	str	r2, [r3, #20]
PIOC->PIO_PDR  = 0x80600001;			//
   96e56:	4b28      	ldr	r3, [pc, #160]	; (96ef8 <DD_INIT_PIO+0x12c>)
   96e58:	4a2b      	ldr	r2, [pc, #172]	; (96f08 <DD_INIT_PIO+0x13c>)
   96e5a:	605a      	str	r2, [r3, #4]
PIOC->PIO_ABSR = 0x00600000;
   96e5c:	4b26      	ldr	r3, [pc, #152]	; (96ef8 <DD_INIT_PIO+0x12c>)
   96e5e:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
   96e62:	671a      	str	r2, [r3, #112]	; 0x70
//PIOC->PIO_CODR = 0x360830C4;
//PIOC->PIO_SODR = 0x00000002;

PIOD->PIO_WPMR = 0x50494F00;			//PIOD->PIO_WPMR = 0x50494F00;
   96e64:	4b29      	ldr	r3, [pc, #164]	; (96f0c <DD_INIT_PIO+0x140>)
   96e66:	4a1a      	ldr	r2, [pc, #104]	; (96ed0 <DD_INIT_PIO+0x104>)
   96e68:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
PIOD->PIO_PER  = 0x000007FF;			//PIOD->PIO_PER  = 0x000007FF;
   96e6c:	4b27      	ldr	r3, [pc, #156]	; (96f0c <DD_INIT_PIO+0x140>)
   96e6e:	f240 72ff 	movw	r2, #2047	; 0x7ff
   96e72:	601a      	str	r2, [r3, #0]
PIOD->PIO_OER  = 0x00000186;			//PIOD->PIO_OER  = 0x00000106;
   96e74:	4b25      	ldr	r3, [pc, #148]	; (96f0c <DD_INIT_PIO+0x140>)
   96e76:	f44f 72c3 	mov.w	r2, #390	; 0x186
   96e7a:	611a      	str	r2, [r3, #16]
PIOD->PIO_ODR  = 0X00000679;			//PIOD->PIO_ODR  = 0x000006F9;
   96e7c:	4b23      	ldr	r3, [pc, #140]	; (96f0c <DD_INIT_PIO+0x140>)
   96e7e:	f240 6279 	movw	r2, #1657	; 0x679
   96e82:	615a      	str	r2, [r3, #20]

//p_io = 21;
//peri = PC;
//DD_RESET_PIO(PC,21);
//PIOA->PIO_WPMR = 0<2;
 PIOC->PIO_CODR = 1<<21;               
   96e84:	4b1c      	ldr	r3, [pc, #112]	; (96ef8 <DD_INIT_PIO+0x12c>)
   96e86:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   96e8a:	635a      	str	r2, [r3, #52]	; 0x34
 PIOB->PIO_SODR = 1<<17;
   96e8c:	4b16      	ldr	r3, [pc, #88]	; (96ee8 <DD_INIT_PIO+0x11c>)
   96e8e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   96e92:	631a      	str	r2, [r3, #48]	; 0x30
 PIOD->PIO_SODR = 1<<2;
   96e94:	4b1d      	ldr	r3, [pc, #116]	; (96f0c <DD_INIT_PIO+0x140>)
   96e96:	2204      	movs	r2, #4
   96e98:	631a      	str	r2, [r3, #48]	; 0x30
gpio_configure_pin(PIN_PWM_LED0_GPIO,PIN_PWM_LED0_FLAGS);
   96e9a:	2055      	movs	r0, #85	; 0x55
   96e9c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   96ea0:	4b1b      	ldr	r3, [pc, #108]	; (96f10 <DD_INIT_PIO+0x144>)
   96ea2:	4798      	blx	r3
gpio_configure_pin(PIN_PWM_LED0_GPIO,PIN_PWM_LED0_FLAGS);
   96ea4:	2055      	movs	r0, #85	; 0x55
   96ea6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   96eaa:	4b19      	ldr	r3, [pc, #100]	; (96f10 <DD_INIT_PIO+0x144>)
   96eac:	4798      	blx	r3


gpio_configure_pin(PIN_CAN0_RX_IDX, PIN_CAN0_RX_FLAGS);
   96eae:	2001      	movs	r0, #1
   96eb0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   96eb4:	4b16      	ldr	r3, [pc, #88]	; (96f10 <DD_INIT_PIO+0x144>)
   96eb6:	4798      	blx	r3
gpio_configure_pin(PIN_CAN0_TX_IDX, PIN_CAN0_TX_FLAGS);
   96eb8:	2000      	movs	r0, #0
   96eba:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   96ebe:	4b14      	ldr	r3, [pc, #80]	; (96f10 <DD_INIT_PIO+0x144>)
   96ec0:	4798      	blx	r3
gpio_configure_pin(PIN_CAN0_STANDBY_IDX, PIN_CAN0_STANDBY_FLAGS);
   96ec2:	2003      	movs	r0, #3
   96ec4:	4913      	ldr	r1, [pc, #76]	; (96f14 <DD_INIT_PIO+0x148>)
   96ec6:	4b12      	ldr	r3, [pc, #72]	; (96f10 <DD_INIT_PIO+0x144>)
   96ec8:	4798      	blx	r3


}
   96eca:	bd80      	pop	{r7, pc}
   96ecc:	400e0e00 	.word	0x400e0e00
   96ed0:	50494f00 	.word	0x50494f00
   96ed4:	21c9ecfc 	.word	0x21c9ecfc
   96ed8:	20f0b86c 	.word	0x20f0b86c
   96edc:	01094494 	.word	0x01094494
   96ee0:	1e361303 	.word	0x1e361303
   96ee4:	00391000 	.word	0x00391000
   96ee8:	400e1000 	.word	0x400e1000
   96eec:	0fe7f700 	.word	0x0fe7f700
   96ef0:	0fe59300 	.word	0x0fe59300
   96ef4:	f01800ff 	.word	0xf01800ff
   96ef8:	400e1200 	.word	0x400e1200
   96efc:	7f9ffffe 	.word	0x7f9ffffe
   96f00:	18e1fffe 	.word	0x18e1fffe
   96f04:	671e0000 	.word	0x671e0000
   96f08:	80600001 	.word	0x80600001
   96f0c:	400e1400 	.word	0x400e1400
   96f10:	0009a869 	.word	0x0009a869
   96f14:	30000001 	.word	0x30000001

00096f18 <DD_DIS_PERI_AND_RESET_PIO>:

uint8_t DD_DIS_PERI_AND_RESET_PIO(pio_type peripheral,uint32_t pio)
{
   96f18:	b480      	push	{r7}
   96f1a:	b083      	sub	sp, #12
   96f1c:	af00      	add	r7, sp, #0
   96f1e:	6078      	str	r0, [r7, #4]
   96f20:	6039      	str	r1, [r7, #0]
				if((peripheral == PD) && ((pio == 7)||(pio == 8) ))
				{
				//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PD_7_8",6);
				}
	switch (peripheral)
   96f22:	687b      	ldr	r3, [r7, #4]
   96f24:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   96f28:	d01a      	beq.n	96f60 <DD_DIS_PERI_AND_RESET_PIO+0x48>
   96f2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   96f2e:	d803      	bhi.n	96f38 <DD_DIS_PERI_AND_RESET_PIO+0x20>
   96f30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   96f34:	d007      	beq.n	96f46 <DD_DIS_PERI_AND_RESET_PIO+0x2e>
   96f36:	e03a      	b.n	96fae <DD_DIS_PERI_AND_RESET_PIO+0x96>
   96f38:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
   96f3c:	d01d      	beq.n	96f7a <DD_DIS_PERI_AND_RESET_PIO+0x62>
   96f3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   96f42:	d027      	beq.n	96f94 <DD_DIS_PERI_AND_RESET_PIO+0x7c>
   96f44:	e033      	b.n	96fae <DD_DIS_PERI_AND_RESET_PIO+0x96>
	{
		case PA:
		PIOA->PIO_PER = 1<<pio;
   96f46:	4a1d      	ldr	r2, [pc, #116]	; (96fbc <DD_DIS_PERI_AND_RESET_PIO+0xa4>)
   96f48:	683b      	ldr	r3, [r7, #0]
   96f4a:	2101      	movs	r1, #1
   96f4c:	fa01 f303 	lsl.w	r3, r1, r3
   96f50:	6013      	str	r3, [r2, #0]
		PIOA->PIO_CODR = 1<<pio;
   96f52:	4a1a      	ldr	r2, [pc, #104]	; (96fbc <DD_DIS_PERI_AND_RESET_PIO+0xa4>)
   96f54:	683b      	ldr	r3, [r7, #0]
   96f56:	2101      	movs	r1, #1
   96f58:	fa01 f303 	lsl.w	r3, r1, r3
   96f5c:	6353      	str	r3, [r2, #52]	; 0x34
		break;
   96f5e:	e026      	b.n	96fae <DD_DIS_PERI_AND_RESET_PIO+0x96>
		case PB:
		PIOB->PIO_PER = 1<<pio;
   96f60:	4a17      	ldr	r2, [pc, #92]	; (96fc0 <DD_DIS_PERI_AND_RESET_PIO+0xa8>)
   96f62:	683b      	ldr	r3, [r7, #0]
   96f64:	2101      	movs	r1, #1
   96f66:	fa01 f303 	lsl.w	r3, r1, r3
   96f6a:	6013      	str	r3, [r2, #0]
		PIOB->PIO_CODR = 1<<pio;
   96f6c:	4a14      	ldr	r2, [pc, #80]	; (96fc0 <DD_DIS_PERI_AND_RESET_PIO+0xa8>)
   96f6e:	683b      	ldr	r3, [r7, #0]
   96f70:	2101      	movs	r1, #1
   96f72:	fa01 f303 	lsl.w	r3, r1, r3
   96f76:	6353      	str	r3, [r2, #52]	; 0x34
		break;
   96f78:	e019      	b.n	96fae <DD_DIS_PERI_AND_RESET_PIO+0x96>
		case PC:
		PIOC->PIO_PER = 1<<pio;
   96f7a:	4a12      	ldr	r2, [pc, #72]	; (96fc4 <DD_DIS_PERI_AND_RESET_PIO+0xac>)
   96f7c:	683b      	ldr	r3, [r7, #0]
   96f7e:	2101      	movs	r1, #1
   96f80:	fa01 f303 	lsl.w	r3, r1, r3
   96f84:	6013      	str	r3, [r2, #0]
		PIOC->PIO_CODR = 1<<pio;
   96f86:	4a0f      	ldr	r2, [pc, #60]	; (96fc4 <DD_DIS_PERI_AND_RESET_PIO+0xac>)
   96f88:	683b      	ldr	r3, [r7, #0]
   96f8a:	2101      	movs	r1, #1
   96f8c:	fa01 f303 	lsl.w	r3, r1, r3
   96f90:	6353      	str	r3, [r2, #52]	; 0x34
		break;
   96f92:	e00c      	b.n	96fae <DD_DIS_PERI_AND_RESET_PIO+0x96>
		case PD:
		PIOD->PIO_PER = 1<<pio;
   96f94:	4a0c      	ldr	r2, [pc, #48]	; (96fc8 <DD_DIS_PERI_AND_RESET_PIO+0xb0>)
   96f96:	683b      	ldr	r3, [r7, #0]
   96f98:	2101      	movs	r1, #1
   96f9a:	fa01 f303 	lsl.w	r3, r1, r3
   96f9e:	6013      	str	r3, [r2, #0]
		PIOD->PIO_CODR = 1<<pio;
   96fa0:	4a09      	ldr	r2, [pc, #36]	; (96fc8 <DD_DIS_PERI_AND_RESET_PIO+0xb0>)
   96fa2:	683b      	ldr	r3, [r7, #0]
   96fa4:	2101      	movs	r1, #1
   96fa6:	fa01 f303 	lsl.w	r3, r1, r3
   96faa:	6353      	str	r3, [r2, #52]	; 0x34
		break;
   96fac:	bf00      	nop
			
	}
}
   96fae:	4618      	mov	r0, r3
   96fb0:	370c      	adds	r7, #12
   96fb2:	46bd      	mov	sp, r7
   96fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
   96fb8:	4770      	bx	lr
   96fba:	bf00      	nop
   96fbc:	400e0e00 	.word	0x400e0e00
   96fc0:	400e1000 	.word	0x400e1000
   96fc4:	400e1200 	.word	0x400e1200
   96fc8:	400e1400 	.word	0x400e1400

00096fcc <DD_EN_PERI_AND_SET_PIO>:

uint8_t DD_EN_PERI_AND_SET_PIO(pio_type peripheral,uint32_t pio)
{
   96fcc:	b480      	push	{r7}
   96fce:	b083      	sub	sp, #12
   96fd0:	af00      	add	r7, sp, #0
   96fd2:	6078      	str	r0, [r7, #4]
   96fd4:	6039      	str	r1, [r7, #0]
			if((peripheral == PD) && ((pio == 7)||(pio == 8) ))
		{
		//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PD_7_8",6);
		}
	switch (peripheral)
   96fd6:	687b      	ldr	r3, [r7, #4]
   96fd8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   96fdc:	d014      	beq.n	97008 <DD_EN_PERI_AND_SET_PIO+0x3c>
   96fde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   96fe2:	d803      	bhi.n	96fec <DD_EN_PERI_AND_SET_PIO+0x20>
   96fe4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   96fe8:	d007      	beq.n	96ffa <DD_EN_PERI_AND_SET_PIO+0x2e>
   96fea:	e022      	b.n	97032 <DD_EN_PERI_AND_SET_PIO+0x66>
   96fec:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
   96ff0:	d011      	beq.n	97016 <DD_EN_PERI_AND_SET_PIO+0x4a>
   96ff2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   96ff6:	d015      	beq.n	97024 <DD_EN_PERI_AND_SET_PIO+0x58>
   96ff8:	e01b      	b.n	97032 <DD_EN_PERI_AND_SET_PIO+0x66>
	{
		case PA:
		PIOA->PIO_PDR = 1<<pio;
   96ffa:	4a11      	ldr	r2, [pc, #68]	; (97040 <DD_EN_PERI_AND_SET_PIO+0x74>)
   96ffc:	683b      	ldr	r3, [r7, #0]
   96ffe:	2101      	movs	r1, #1
   97000:	fa01 f303 	lsl.w	r3, r1, r3
   97004:	6053      	str	r3, [r2, #4]
	//	PIOA->PIO_SCDR = 1<<pio;
		break;
   97006:	e014      	b.n	97032 <DD_EN_PERI_AND_SET_PIO+0x66>
		case PB:
		PIOB->PIO_PDR = 1<<pio;
   97008:	4a0e      	ldr	r2, [pc, #56]	; (97044 <DD_EN_PERI_AND_SET_PIO+0x78>)
   9700a:	683b      	ldr	r3, [r7, #0]
   9700c:	2101      	movs	r1, #1
   9700e:	fa01 f303 	lsl.w	r3, r1, r3
   97012:	6053      	str	r3, [r2, #4]
	//	PIOB->PIO_SODR = 1<<pio;
		break;
   97014:	e00d      	b.n	97032 <DD_EN_PERI_AND_SET_PIO+0x66>
		case PC:
		PIOC->PIO_PDR = 1<<pio;
   97016:	4a0c      	ldr	r2, [pc, #48]	; (97048 <DD_EN_PERI_AND_SET_PIO+0x7c>)
   97018:	683b      	ldr	r3, [r7, #0]
   9701a:	2101      	movs	r1, #1
   9701c:	fa01 f303 	lsl.w	r3, r1, r3
   97020:	6053      	str	r3, [r2, #4]
	//	PIOC->PIO_CODR = 1<<pio;
		break;
   97022:	e006      	b.n	97032 <DD_EN_PERI_AND_SET_PIO+0x66>
		case PD:
		PIOD->PIO_PDR = 1<<pio;
   97024:	4a09      	ldr	r2, [pc, #36]	; (9704c <DD_EN_PERI_AND_SET_PIO+0x80>)
   97026:	683b      	ldr	r3, [r7, #0]
   97028:	2101      	movs	r1, #1
   9702a:	fa01 f303 	lsl.w	r3, r1, r3
   9702e:	6053      	str	r3, [r2, #4]
	//	PIOD->PIO_CODR = 1<<pio;
		break;
   97030:	bf00      	nop
		

		
	}
}
   97032:	4618      	mov	r0, r3
   97034:	370c      	adds	r7, #12
   97036:	46bd      	mov	sp, r7
   97038:	f85d 7b04 	ldr.w	r7, [sp], #4
   9703c:	4770      	bx	lr
   9703e:	bf00      	nop
   97040:	400e0e00 	.word	0x400e0e00
   97044:	400e1000 	.word	0x400e1000
   97048:	400e1200 	.word	0x400e1200
   9704c:	400e1400 	.word	0x400e1400

00097050 <DD_SET_PIO>:

uint8_t DD_SET_PIO(pio_type peripheral,uint32_t pio)
{
   97050:	b480      	push	{r7}
   97052:	b083      	sub	sp, #12
   97054:	af00      	add	r7, sp, #0
   97056:	6078      	str	r0, [r7, #4]
   97058:	6039      	str	r1, [r7, #0]
					if((peripheral == PD) && ((pio == 7)||(pio == 8) ))
				{
				//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PD_7_8",6);
				}
	switch (peripheral)
   9705a:	687b      	ldr	r3, [r7, #4]
   9705c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   97060:	d014      	beq.n	9708c <DD_SET_PIO+0x3c>
   97062:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   97066:	d803      	bhi.n	97070 <DD_SET_PIO+0x20>
   97068:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   9706c:	d007      	beq.n	9707e <DD_SET_PIO+0x2e>
   9706e:	e022      	b.n	970b6 <DD_SET_PIO+0x66>
   97070:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
   97074:	d011      	beq.n	9709a <DD_SET_PIO+0x4a>
   97076:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   9707a:	d015      	beq.n	970a8 <DD_SET_PIO+0x58>
   9707c:	e01b      	b.n	970b6 <DD_SET_PIO+0x66>
	{
		case PA:
		PIOA->PIO_SODR = 1<<pio;
   9707e:	4a11      	ldr	r2, [pc, #68]	; (970c4 <DD_SET_PIO+0x74>)
   97080:	683b      	ldr	r3, [r7, #0]
   97082:	2101      	movs	r1, #1
   97084:	fa01 f303 	lsl.w	r3, r1, r3
   97088:	6313      	str	r3, [r2, #48]	; 0x30
		break;
   9708a:	e014      	b.n	970b6 <DD_SET_PIO+0x66>
		case PB:
		PIOB->PIO_SODR = 1<<pio;
   9708c:	4a0e      	ldr	r2, [pc, #56]	; (970c8 <DD_SET_PIO+0x78>)
   9708e:	683b      	ldr	r3, [r7, #0]
   97090:	2101      	movs	r1, #1
   97092:	fa01 f303 	lsl.w	r3, r1, r3
   97096:	6313      	str	r3, [r2, #48]	; 0x30
		break;
   97098:	e00d      	b.n	970b6 <DD_SET_PIO+0x66>
		case PC:
		PIOC->PIO_SODR = 1<<pio;
   9709a:	4a0c      	ldr	r2, [pc, #48]	; (970cc <DD_SET_PIO+0x7c>)
   9709c:	683b      	ldr	r3, [r7, #0]
   9709e:	2101      	movs	r1, #1
   970a0:	fa01 f303 	lsl.w	r3, r1, r3
   970a4:	6313      	str	r3, [r2, #48]	; 0x30
		break;
   970a6:	e006      	b.n	970b6 <DD_SET_PIO+0x66>
		case PD:
		PIOD->PIO_SODR = 1<<pio;
   970a8:	4a09      	ldr	r2, [pc, #36]	; (970d0 <DD_SET_PIO+0x80>)
   970aa:	683b      	ldr	r3, [r7, #0]
   970ac:	2101      	movs	r1, #1
   970ae:	fa01 f303 	lsl.w	r3, r1, r3
   970b2:	6313      	str	r3, [r2, #48]	; 0x30
		break;
   970b4:	bf00      	nop
				

	}
	
	return 0;
   970b6:	2300      	movs	r3, #0
}
   970b8:	4618      	mov	r0, r3
   970ba:	370c      	adds	r7, #12
   970bc:	46bd      	mov	sp, r7
   970be:	f85d 7b04 	ldr.w	r7, [sp], #4
   970c2:	4770      	bx	lr
   970c4:	400e0e00 	.word	0x400e0e00
   970c8:	400e1000 	.word	0x400e1000
   970cc:	400e1200 	.word	0x400e1200
   970d0:	400e1400 	.word	0x400e1400

000970d4 <DD_RESET_PIO>:

uint8_t DD_RESET_PIO(const pio_type peripheral,uint32_t pio)
  {
   970d4:	b480      	push	{r7}
   970d6:	b083      	sub	sp, #12
   970d8:	af00      	add	r7, sp, #0
   970da:	6078      	str	r0, [r7, #4]
   970dc:	6039      	str	r1, [r7, #0]
	  		  		if((peripheral == PD) && ((pio == 7)||(pio == 8) ))
		  		{
			//  		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PD_7_8",6);
		  		}
	  switch (peripheral)
   970de:	687b      	ldr	r3, [r7, #4]
   970e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   970e4:	d014      	beq.n	97110 <DD_RESET_PIO+0x3c>
   970e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   970ea:	d803      	bhi.n	970f4 <DD_RESET_PIO+0x20>
   970ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   970f0:	d007      	beq.n	97102 <DD_RESET_PIO+0x2e>
   970f2:	e022      	b.n	9713a <DD_RESET_PIO+0x66>
   970f4:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
   970f8:	d011      	beq.n	9711e <DD_RESET_PIO+0x4a>
   970fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   970fe:	d015      	beq.n	9712c <DD_RESET_PIO+0x58>
   97100:	e01b      	b.n	9713a <DD_RESET_PIO+0x66>
	  {
		  case PA:
		  PIOA->PIO_CODR = 1<<pio;
   97102:	4a11      	ldr	r2, [pc, #68]	; (97148 <DD_RESET_PIO+0x74>)
   97104:	683b      	ldr	r3, [r7, #0]
   97106:	2101      	movs	r1, #1
   97108:	fa01 f303 	lsl.w	r3, r1, r3
   9710c:	6353      	str	r3, [r2, #52]	; 0x34
		  break;
   9710e:	e014      	b.n	9713a <DD_RESET_PIO+0x66>
		  case PB:
		  PIOB->PIO_CODR = 1<<pio;
   97110:	4a0e      	ldr	r2, [pc, #56]	; (9714c <DD_RESET_PIO+0x78>)
   97112:	683b      	ldr	r3, [r7, #0]
   97114:	2101      	movs	r1, #1
   97116:	fa01 f303 	lsl.w	r3, r1, r3
   9711a:	6353      	str	r3, [r2, #52]	; 0x34
		  break;
   9711c:	e00d      	b.n	9713a <DD_RESET_PIO+0x66>
		  case PC:
		  PIOC->PIO_CODR = 1<<pio;
   9711e:	4a0c      	ldr	r2, [pc, #48]	; (97150 <DD_RESET_PIO+0x7c>)
   97120:	683b      	ldr	r3, [r7, #0]
   97122:	2101      	movs	r1, #1
   97124:	fa01 f303 	lsl.w	r3, r1, r3
   97128:	6353      	str	r3, [r2, #52]	; 0x34
		  break;
   9712a:	e006      	b.n	9713a <DD_RESET_PIO+0x66>
		  case PD:
		  PIOD->PIO_CODR = 1<<pio;
   9712c:	4a09      	ldr	r2, [pc, #36]	; (97154 <DD_RESET_PIO+0x80>)
   9712e:	683b      	ldr	r3, [r7, #0]
   97130:	2101      	movs	r1, #1
   97132:	fa01 f303 	lsl.w	r3, r1, r3
   97136:	6353      	str	r3, [r2, #52]	; 0x34
		  break;
   97138:	bf00      	nop
		  		

	  }
	  
	  return 0;
   9713a:	2300      	movs	r3, #0
  }
   9713c:	4618      	mov	r0, r3
   9713e:	370c      	adds	r7, #12
   97140:	46bd      	mov	sp, r7
   97142:	f85d 7b04 	ldr.w	r7, [sp], #4
   97146:	4770      	bx	lr
   97148:	400e0e00 	.word	0x400e0e00
   9714c:	400e1000 	.word	0x400e1000
   97150:	400e1200 	.word	0x400e1200
   97154:	400e1400 	.word	0x400e1400

00097158 <DD_READ_PIO>:
  
  uint16_t DD_READ_PIO( pio_type peripheral,uint32_t pio)
  {
   97158:	b480      	push	{r7}
   9715a:	b085      	sub	sp, #20
   9715c:	af00      	add	r7, sp, #0
   9715e:	6078      	str	r0, [r7, #4]
   97160:	6039      	str	r1, [r7, #0]
	  uint32_t read = 0;
   97162:	2300      	movs	r3, #0
   97164:	60fb      	str	r3, [r7, #12]
	  uint16_t ret_val=0;
   97166:	2300      	movs	r3, #0
   97168:	817b      	strh	r3, [r7, #10]
	  /*read= PIOC->PIO_ODSR;
	  printf("%d",pio);
	  printf("%d", read);*/
	  switch (peripheral)
   9716a:	687b      	ldr	r3, [r7, #4]
   9716c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   97170:	d01a      	beq.n	971a8 <DD_READ_PIO+0x50>
   97172:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   97176:	d803      	bhi.n	97180 <DD_READ_PIO+0x28>
   97178:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   9717c:	d007      	beq.n	9718e <DD_READ_PIO+0x36>
   9717e:	e03c      	b.n	971fa <DD_READ_PIO+0xa2>
   97180:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
   97184:	d01d      	beq.n	971c2 <DD_READ_PIO+0x6a>
   97186:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   9718a:	d029      	beq.n	971e0 <DD_READ_PIO+0x88>
   9718c:	e035      	b.n	971fa <DD_READ_PIO+0xa2>
	  {
		  case PA:
		  
		  if( (PIOA->PIO_PDSR & (1<<pio)) == 0)
   9718e:	4b1e      	ldr	r3, [pc, #120]	; (97208 <DD_READ_PIO+0xb0>)
   97190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   97192:	683a      	ldr	r2, [r7, #0]
   97194:	2101      	movs	r1, #1
   97196:	fa01 f202 	lsl.w	r2, r1, r2
   9719a:	4013      	ands	r3, r2
   9719c:	2b00      	cmp	r3, #0
   9719e:	d101      	bne.n	971a4 <DD_READ_PIO+0x4c>
		  {
			//  printf("A0");
			  return 0;
   971a0:	2300      	movs	r3, #0
   971a2:	e02a      	b.n	971fa <DD_READ_PIO+0xa2>
		  }
		  else
		  {
		//	  printf("A1");
			  return 1;
   971a4:	2301      	movs	r3, #1
   971a6:	e028      	b.n	971fa <DD_READ_PIO+0xa2>
		  } 
		  break;
		  case PB:
		  if( (PIOB->PIO_PDSR & (1<<pio)) == 0)
   971a8:	4b18      	ldr	r3, [pc, #96]	; (9720c <DD_READ_PIO+0xb4>)
   971aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   971ac:	683a      	ldr	r2, [r7, #0]
   971ae:	2101      	movs	r1, #1
   971b0:	fa01 f202 	lsl.w	r2, r1, r2
   971b4:	4013      	ands	r3, r2
   971b6:	2b00      	cmp	r3, #0
   971b8:	d101      	bne.n	971be <DD_READ_PIO+0x66>
		  {
		//	  printf("B0");
			  return 0;
   971ba:	2300      	movs	r3, #0
   971bc:	e01d      	b.n	971fa <DD_READ_PIO+0xa2>
		  }
		  else
		  {
			//  printf("B1");
			  return 1;
   971be:	2301      	movs	r3, #1
   971c0:	e01b      	b.n	971fa <DD_READ_PIO+0xa2>
		//		{
			//	printf("c");
			//	}
		//	}
			
		  if( (PIOC->PIO_PDSR & (1<<pio)) == 0)
   971c2:	4b13      	ldr	r3, [pc, #76]	; (97210 <DD_READ_PIO+0xb8>)
   971c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   971c6:	683a      	ldr	r2, [r7, #0]
   971c8:	2101      	movs	r1, #1
   971ca:	fa01 f202 	lsl.w	r2, r1, r2
   971ce:	4013      	ands	r3, r2
   971d0:	2b00      	cmp	r3, #0
   971d2:	d101      	bne.n	971d8 <DD_READ_PIO+0x80>
		  {
			  
			
			//  printf("C0");
			  return 0;
   971d4:	2300      	movs	r3, #0
   971d6:	e010      	b.n	971fa <DD_READ_PIO+0xa2>
		  }
		  else
		  {
			//  printf("C1");
			 // return 1;
			 ret_val = 1;
   971d8:	2301      	movs	r3, #1
   971da:	817b      	strh	r3, [r7, #10]
		//	 				printf("%d",ret_val);
			 return(ret_val);
   971dc:	897b      	ldrh	r3, [r7, #10]
   971de:	e00c      	b.n	971fa <DD_READ_PIO+0xa2>
			 
		  }
		  break;
		  case PD:
		  if( (PIOD->PIO_PDSR & (1<<pio)) == 0)
   971e0:	4b0c      	ldr	r3, [pc, #48]	; (97214 <DD_READ_PIO+0xbc>)
   971e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   971e4:	683a      	ldr	r2, [r7, #0]
   971e6:	2101      	movs	r1, #1
   971e8:	fa01 f202 	lsl.w	r2, r1, r2
   971ec:	4013      	ands	r3, r2
   971ee:	2b00      	cmp	r3, #0
   971f0:	d101      	bne.n	971f6 <DD_READ_PIO+0x9e>
		  {
			//  printf("D0");
			  return 0;
   971f2:	2300      	movs	r3, #0
   971f4:	e001      	b.n	971fa <DD_READ_PIO+0xa2>
		  }
		  else
		  {
			//  printf("D1");
			  return 1;
   971f6:	2301      	movs	r3, #1
   971f8:	e7ff      	b.n	971fa <DD_READ_PIO+0xa2>
		  break;
		  
	  }
	  
	
  }
   971fa:	4618      	mov	r0, r3
   971fc:	3714      	adds	r7, #20
   971fe:	46bd      	mov	sp, r7
   97200:	f85d 7b04 	ldr.w	r7, [sp], #4
   97204:	4770      	bx	lr
   97206:	bf00      	nop
   97208:	400e0e00 	.word	0x400e0e00
   9720c:	400e1000 	.word	0x400e1000
   97210:	400e1200 	.word	0x400e1200
   97214:	400e1400 	.word	0x400e1400

00097218 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
   97218:	b480      	push	{r7}
   9721a:	b083      	sub	sp, #12
   9721c:	af00      	add	r7, sp, #0
   9721e:	4603      	mov	r3, r0
   97220:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   97222:	4909      	ldr	r1, [pc, #36]	; (97248 <NVIC_ClearPendingIRQ+0x30>)
   97224:	f997 3007 	ldrsb.w	r3, [r7, #7]
   97228:	095b      	lsrs	r3, r3, #5
   9722a:	79fa      	ldrb	r2, [r7, #7]
   9722c:	f002 021f 	and.w	r2, r2, #31
   97230:	2001      	movs	r0, #1
   97232:	fa00 f202 	lsl.w	r2, r0, r2
   97236:	3360      	adds	r3, #96	; 0x60
   97238:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   9723c:	370c      	adds	r7, #12
   9723e:	46bd      	mov	sp, r7
   97240:	f85d 7b04 	ldr.w	r7, [sp], #4
   97244:	4770      	bx	lr
   97246:	bf00      	nop
   97248:	e000e100 	.word	0xe000e100

0009724c <UART_Handler>:

extern Cl_ReturnCodeType Cl_TimerTickCallback(void);
extern Cl_ReturnCodeType cl_systemtickcallback(void);

void UART_Handler(void)
{
   9724c:	b580      	push	{r7, lr}
   9724e:	b084      	sub	sp, #16
   97250:	af00      	add	r7, sp, #0
	
	char rx_val ;
	uint32_t i,status;
	status= UART->UART_SR;
   97252:	4b0b      	ldr	r3, [pc, #44]	; (97280 <UART_Handler+0x34>)
   97254:	695b      	ldr	r3, [r3, #20]
   97256:	60bb      	str	r3, [r7, #8]
//	if(status & 0x01)
	{
		rx_val=UART->UART_RHR;
   97258:	4b09      	ldr	r3, [pc, #36]	; (97280 <UART_Handler+0x34>)
   9725a:	699b      	ldr	r3, [r3, #24]
   9725c:	71fb      	strb	r3, [r7, #7]
	
		DD_CONSOLE_RX(rx_val);
   9725e:	79fb      	ldrb	r3, [r7, #7]
   97260:	4618      	mov	r0, r3
   97262:	4b08      	ldr	r3, [pc, #32]	; (97284 <UART_Handler+0x38>)
   97264:	4798      	blx	r3
	
		for(i=0; i< 0xff;i++)
   97266:	2300      	movs	r3, #0
   97268:	60fb      	str	r3, [r7, #12]
   9726a:	e002      	b.n	97272 <UART_Handler+0x26>
   9726c:	68fb      	ldr	r3, [r7, #12]
   9726e:	3301      	adds	r3, #1
   97270:	60fb      	str	r3, [r7, #12]
   97272:	68fb      	ldr	r3, [r7, #12]
   97274:	2bfe      	cmp	r3, #254	; 0xfe
   97276:	d9f9      	bls.n	9726c <UART_Handler+0x20>
		{
			;
		}
	}

}
   97278:	3710      	adds	r7, #16
   9727a:	46bd      	mov	sp, r7
   9727c:	bd80      	pop	{r7, pc}
   9727e:	bf00      	nop
   97280:	400e0800 	.word	0x400e0800
   97284:	00098c99 	.word	0x00098c99

00097288 <TC0_Handler>:


void TC0_Handler()
{
   97288:	b580      	push	{r7, lr}
   9728a:	b082      	sub	sp, #8
   9728c:	af00      	add	r7, sp, #0
	if ((tc_get_status(TC0, 0) & TC_SR_CPCS) == TC_SR_CPCS)
   9728e:	4808      	ldr	r0, [pc, #32]	; (972b0 <TC0_Handler+0x28>)
   97290:	2100      	movs	r1, #0
   97292:	4b08      	ldr	r3, [pc, #32]	; (972b4 <TC0_Handler+0x2c>)
   97294:	4798      	blx	r3
   97296:	4603      	mov	r3, r0
   97298:	f003 0310 	and.w	r3, r3, #16
   9729c:	2b00      	cmp	r3, #0
   9729e:	d003      	beq.n	972a8 <TC0_Handler+0x20>
	{
		//printf("i m in handler tc0\n");
		
			Cl_ReturnCodeType RetVal;
			RetVal = Cl_TimerTickCallback();
   972a0:	4b05      	ldr	r3, [pc, #20]	; (972b8 <TC0_Handler+0x30>)
   972a2:	4798      	blx	r3
   972a4:	4603      	mov	r3, r0
   972a6:	71fb      	strb	r3, [r7, #7]
	}
}
   972a8:	3708      	adds	r7, #8
   972aa:	46bd      	mov	sp, r7
   972ac:	bd80      	pop	{r7, pc}
   972ae:	bf00      	nop
   972b0:	40080000 	.word	0x40080000
   972b4:	0009af1d 	.word	0x0009af1d
   972b8:	00092cb1 	.word	0x00092cb1

000972bc <TC6_Handler>:

void TC6_Handler()
{
   972bc:	b580      	push	{r7, lr}
   972be:	af00      	add	r7, sp, #0
	NVIC_ClearPendingIRQ(TC6_IRQn);
   972c0:	2021      	movs	r0, #33	; 0x21
   972c2:	4b03      	ldr	r3, [pc, #12]	; (972d0 <TC6_Handler+0x14>)
   972c4:	4798      	blx	r3
	if ((tc_get_status(TC2, 0) & TC_SR_CPCS) == TC_SR_CPCS)
   972c6:	4803      	ldr	r0, [pc, #12]	; (972d4 <TC6_Handler+0x18>)
   972c8:	2100      	movs	r1, #0
   972ca:	4b03      	ldr	r3, [pc, #12]	; (972d8 <TC6_Handler+0x1c>)
   972cc:	4798      	blx	r3
	{
		//printf("i m in handler tc6\n");
		
	}
}
   972ce:	bd80      	pop	{r7, pc}
   972d0:	00097219 	.word	0x00097219
   972d4:	40088000 	.word	0x40088000
   972d8:	0009af1d 	.word	0x0009af1d

000972dc <TC3_Handler>:
	//printf("inside tc6\n");



void TC3_Handler()
{
   972dc:	b580      	push	{r7, lr}
   972de:	af00      	add	r7, sp, #0
	NVIC_ClearPendingIRQ(TC3_IRQn);
   972e0:	201e      	movs	r0, #30
   972e2:	4b03      	ldr	r3, [pc, #12]	; (972f0 <TC3_Handler+0x14>)
   972e4:	4798      	blx	r3
	if ((tc_get_status(TC1, 0) & TC_SR_CPCS) == TC_SR_CPCS)
   972e6:	4803      	ldr	r0, [pc, #12]	; (972f4 <TC3_Handler+0x18>)
   972e8:	2100      	movs	r1, #0
   972ea:	4b03      	ldr	r3, [pc, #12]	; (972f8 <TC3_Handler+0x1c>)
   972ec:	4798      	blx	r3
	{
		//printf("i m in handler tc3\n");
		
	}
}
   972ee:	bd80      	pop	{r7, pc}
   972f0:	00097219 	.word	0x00097219
   972f4:	40084000 	.word	0x40084000
   972f8:	0009af1d 	.word	0x0009af1d

000972fc <SysTick_Handler>:

void SysTick_Handler(void)
{
   972fc:	b580      	push	{r7, lr}
   972fe:	b082      	sub	sp, #8
   97300:	af00      	add	r7, sp, #0
	
	Cl_ReturnCodeType RetVal;
	RetVal = cl_systemtickcallback();
   97302:	4b03      	ldr	r3, [pc, #12]	; (97310 <SysTick_Handler+0x14>)
   97304:	4798      	blx	r3
   97306:	4603      	mov	r3, r0
   97308:	71fb      	strb	r3, [r7, #7]
   9730a:	3708      	adds	r7, #8
   9730c:	46bd      	mov	sp, r7
   9730e:	bd80      	pop	{r7, pc}
   97310:	000931b1 	.word	0x000931b1

00097314 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   97314:	b480      	push	{r7}
   97316:	b083      	sub	sp, #12
   97318:	af00      	add	r7, sp, #0
   9731a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   9731c:	687b      	ldr	r3, [r7, #4]
   9731e:	2b07      	cmp	r3, #7
   97320:	d825      	bhi.n	9736e <osc_get_rate+0x5a>
   97322:	a201      	add	r2, pc, #4	; (adr r2, 97328 <osc_get_rate+0x14>)
   97324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   97328:	00097349 	.word	0x00097349
   9732c:	0009734f 	.word	0x0009734f
   97330:	00097355 	.word	0x00097355
   97334:	0009735b 	.word	0x0009735b
   97338:	0009735f 	.word	0x0009735f
   9733c:	00097363 	.word	0x00097363
   97340:	00097367 	.word	0x00097367
   97344:	0009736b 	.word	0x0009736b
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   97348:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   9734c:	e010      	b.n	97370 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   9734e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   97352:	e00d      	b.n	97370 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   97354:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   97358:	e00a      	b.n	97370 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   9735a:	4b08      	ldr	r3, [pc, #32]	; (9737c <osc_get_rate+0x68>)
   9735c:	e008      	b.n	97370 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   9735e:	4b08      	ldr	r3, [pc, #32]	; (97380 <osc_get_rate+0x6c>)
   97360:	e006      	b.n	97370 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   97362:	4b08      	ldr	r3, [pc, #32]	; (97384 <osc_get_rate+0x70>)
   97364:	e004      	b.n	97370 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   97366:	4b07      	ldr	r3, [pc, #28]	; (97384 <osc_get_rate+0x70>)
   97368:	e002      	b.n	97370 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   9736a:	4b06      	ldr	r3, [pc, #24]	; (97384 <osc_get_rate+0x70>)
   9736c:	e000      	b.n	97370 <osc_get_rate+0x5c>
#endif
	}

	return 0;
   9736e:	2300      	movs	r3, #0
}
   97370:	4618      	mov	r0, r3
   97372:	370c      	adds	r7, #12
   97374:	46bd      	mov	sp, r7
   97376:	f85d 7b04 	ldr.w	r7, [sp], #4
   9737a:	4770      	bx	lr
   9737c:	003d0900 	.word	0x003d0900
   97380:	007a1200 	.word	0x007a1200
   97384:	00b71b00 	.word	0x00b71b00

00097388 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   97388:	b580      	push	{r7, lr}
   9738a:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   9738c:	2006      	movs	r0, #6
   9738e:	4b04      	ldr	r3, [pc, #16]	; (973a0 <sysclk_get_main_hz+0x18>)
   97390:	4798      	blx	r3
   97392:	4602      	mov	r2, r0
   97394:	4613      	mov	r3, r2
   97396:	00db      	lsls	r3, r3, #3
   97398:	1a9b      	subs	r3, r3, r2
   9739a:	005b      	lsls	r3, r3, #1
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   9739c:	4618      	mov	r0, r3
   9739e:	bd80      	pop	{r7, pc}
   973a0:	00097315 	.word	0x00097315

000973a4 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   973a4:	b580      	push	{r7, lr}
   973a6:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   973a8:	4b02      	ldr	r3, [pc, #8]	; (973b4 <sysclk_get_cpu_hz+0x10>)
   973aa:	4798      	blx	r3
   973ac:	4603      	mov	r3, r0
   973ae:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   973b0:	4618      	mov	r0, r3
   973b2:	bd80      	pop	{r7, pc}
   973b4:	00097389 	.word	0x00097389

000973b8 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   973b8:	b580      	push	{r7, lr}
   973ba:	b082      	sub	sp, #8
   973bc:	af00      	add	r7, sp, #0
   973be:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   973c0:	6878      	ldr	r0, [r7, #4]
   973c2:	4b02      	ldr	r3, [pc, #8]	; (973cc <sysclk_enable_peripheral_clock+0x14>)
   973c4:	4798      	blx	r3
}
   973c6:	3708      	adds	r7, #8
   973c8:	46bd      	mov	sp, r7
   973ca:	bd80      	pop	{r7, pc}
   973cc:	0009adf5 	.word	0x0009adf5

000973d0 <twi_master_setup>:
typedef twi_options_t twi_master_options_t;
typedef twi_packet_t twi_package_t;

static inline uint32_t twi_master_setup(twi_master_t p_twi,
		twi_master_options_t *p_opt)
{
   973d0:	b580      	push	{r7, lr}
   973d2:	b082      	sub	sp, #8
   973d4:	af00      	add	r7, sp, #0
   973d6:	6078      	str	r0, [r7, #4]
   973d8:	6039      	str	r1, [r7, #0]
	p_opt->master_clk = sysclk_get_cpu_hz();
   973da:	4b10      	ldr	r3, [pc, #64]	; (9741c <twi_master_setup+0x4c>)
   973dc:	4798      	blx	r3
   973de:	4602      	mov	r2, r0
   973e0:	683b      	ldr	r3, [r7, #0]
   973e2:	601a      	str	r2, [r3, #0]
	p_opt->smbus      = 0;
   973e4:	683b      	ldr	r3, [r7, #0]
   973e6:	2200      	movs	r2, #0
   973e8:	725a      	strb	r2, [r3, #9]

	if (p_twi == TWI0) {
   973ea:	687b      	ldr	r3, [r7, #4]
   973ec:	4a0c      	ldr	r2, [pc, #48]	; (97420 <twi_master_setup+0x50>)
   973ee:	4293      	cmp	r3, r2
   973f0:	d103      	bne.n	973fa <twi_master_setup+0x2a>
		sysclk_enable_peripheral_clock(ID_TWI0);
   973f2:	2016      	movs	r0, #22
   973f4:	4b0b      	ldr	r3, [pc, #44]	; (97424 <twi_master_setup+0x54>)
   973f6:	4798      	blx	r3
   973f8:	e006      	b.n	97408 <twi_master_setup+0x38>
	} else if (p_twi == TWI1) {
   973fa:	687b      	ldr	r3, [r7, #4]
   973fc:	4a0a      	ldr	r2, [pc, #40]	; (97428 <twi_master_setup+0x58>)
   973fe:	4293      	cmp	r3, r2
   97400:	d102      	bne.n	97408 <twi_master_setup+0x38>
		sysclk_enable_peripheral_clock(ID_TWI1);
   97402:	2017      	movs	r0, #23
   97404:	4b07      	ldr	r3, [pc, #28]	; (97424 <twi_master_setup+0x54>)
   97406:	4798      	blx	r3
#endif
	} else {
		// Do Nothing
	}

	return (twi_master_init(p_twi, p_opt));
   97408:	6878      	ldr	r0, [r7, #4]
   9740a:	6839      	ldr	r1, [r7, #0]
   9740c:	4b07      	ldr	r3, [pc, #28]	; (9742c <twi_master_setup+0x5c>)
   9740e:	4798      	blx	r3
   97410:	4603      	mov	r3, r0
}
   97412:	4618      	mov	r0, r3
   97414:	3708      	adds	r7, #8
   97416:	46bd      	mov	sp, r7
   97418:	bd80      	pop	{r7, pc}
   9741a:	bf00      	nop
   9741c:	000973a5 	.word	0x000973a5
   97420:	4008c000 	.word	0x4008c000
   97424:	000973b9 	.word	0x000973b9
   97428:	40090000 	.word	0x40090000
   9742c:	00080615 	.word	0x00080615

00097430 <twi_master_write1>:

}

uint32_t twi_master_write1(Twi *p_twi, twi_packet_t *p_packet)

{
   97430:	b580      	push	{r7, lr}
   97432:	b086      	sub	sp, #24
   97434:	af00      	add	r7, sp, #0
   97436:	6078      	str	r0, [r7, #4]
   97438:	6039      	str	r1, [r7, #0]
	
 func_timer = 0;
   9743a:	4b64      	ldr	r3, [pc, #400]	; (975cc <twi_master_write1+0x19c>)
   9743c:	2200      	movs	r2, #0
   9743e:	601a      	str	r2, [r3, #0]
FUNC_ENTRY++;
   97440:	4b63      	ldr	r3, [pc, #396]	; (975d0 <twi_master_write1+0x1a0>)
   97442:	681b      	ldr	r3, [r3, #0]
   97444:	3301      	adds	r3, #1
   97446:	4a62      	ldr	r2, [pc, #392]	; (975d0 <twi_master_write1+0x1a0>)
   97448:	6013      	str	r3, [r2, #0]

if(FUNC_ENTRY > 1)
   9744a:	4b61      	ldr	r3, [pc, #388]	; (975d0 <twi_master_write1+0x1a0>)
   9744c:	681b      	ldr	r3, [r3, #0]
   9744e:	2b01      	cmp	r3, #1
   97450:	dd04      	ble.n	9745c <twi_master_write1+0x2c>
{
	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_IIC_HANGUP,(void*)0,0);
   97452:	203d      	movs	r0, #61	; 0x3d
   97454:	2100      	movs	r1, #0
   97456:	2200      	movs	r2, #0
   97458:	4b5e      	ldr	r3, [pc, #376]	; (975d4 <twi_master_write1+0x1a4>)
   9745a:	4798      	blx	r3
}

	twi_master_setup(TWI0, &opt);
   9745c:	485e      	ldr	r0, [pc, #376]	; (975d8 <twi_master_write1+0x1a8>)
   9745e:	495f      	ldr	r1, [pc, #380]	; (975dc <twi_master_write1+0x1ac>)
   97460:	4b5f      	ldr	r3, [pc, #380]	; (975e0 <twi_master_write1+0x1b0>)
   97462:	4798      	blx	r3
//cl_wait(10);
	uint32_t status, cnt = p_packet->length;
   97464:	683b      	ldr	r3, [r7, #0]
   97466:	68db      	ldr	r3, [r3, #12]
   97468:	617b      	str	r3, [r7, #20]
	uint8_t *buffer = (uint8_t*) p_packet->buffer;
   9746a:	683b      	ldr	r3, [r7, #0]
   9746c:	689b      	ldr	r3, [r3, #8]
   9746e:	613b      	str	r3, [r7, #16]
	iic_nack = false;
   97470:	4b5c      	ldr	r3, [pc, #368]	; (975e4 <twi_master_write1+0x1b4>)
   97472:	2200      	movs	r2, #0
   97474:	701a      	strb	r2, [r3, #0]
	/* Check argument */
	if (cnt == 0) {
   97476:	697b      	ldr	r3, [r7, #20]
   97478:	2b00      	cmp	r3, #0
   9747a:	d104      	bne.n	97486 <twi_master_write1+0x56>
		FUNC_ENTRY = 0;
   9747c:	4b54      	ldr	r3, [pc, #336]	; (975d0 <twi_master_write1+0x1a0>)
   9747e:	2200      	movs	r2, #0
   97480:	601a      	str	r2, [r3, #0]
		return TWI_INVALID_ARGUMENT;
   97482:	2301      	movs	r3, #1
   97484:	e09e      	b.n	975c4 <twi_master_write1+0x194>
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
   97486:	687b      	ldr	r3, [r7, #4]
   97488:	2200      	movs	r2, #0
   9748a:	605a      	str	r2, [r3, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
   9748c:	683b      	ldr	r3, [r7, #0]
   9748e:	7c1b      	ldrb	r3, [r3, #16]
   97490:	041b      	lsls	r3, r3, #16
   97492:	f403 02fe 	and.w	r2, r3, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
   97496:	683b      	ldr	r3, [r7, #0]
   97498:	685b      	ldr	r3, [r3, #4]
   9749a:	021b      	lsls	r3, r3, #8
   9749c:	f403 7340 	and.w	r3, r3, #768	; 0x300
		return TWI_INVALID_ARGUMENT;
	}

	/* Set write mode, slave address and 3 internal address byte lengths */
	p_twi->TWI_MMR = 0;
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
   974a0:	431a      	orrs	r2, r3
   974a2:	687b      	ldr	r3, [r7, #4]
   974a4:	605a      	str	r2, [r3, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
			TWI_MMR_IADRSZ_Msk);

	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
   974a6:	687b      	ldr	r3, [r7, #4]
   974a8:	2200      	movs	r2, #0
   974aa:	60da      	str	r2, [r3, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   974ac:	683a      	ldr	r2, [r7, #0]
   974ae:	683b      	ldr	r3, [r7, #0]
   974b0:	685b      	ldr	r3, [r3, #4]
   974b2:	4610      	mov	r0, r2
   974b4:	4619      	mov	r1, r3
   974b6:	4b4c      	ldr	r3, [pc, #304]	; (975e8 <twi_master_write1+0x1b8>)
   974b8:	4798      	blx	r3
   974ba:	4602      	mov	r2, r0
   974bc:	687b      	ldr	r3, [r7, #4]
   974be:	60da      	str	r2, [r3, #12]

	/* Send all bytes */
	while (cnt > 0) {
   974c0:	e034      	b.n	9752c <twi_master_write1+0xfc>
	//	cl_wait(1);
		status = p_twi->TWI_SR;
   974c2:	687b      	ldr	r3, [r7, #4]
   974c4:	6a1b      	ldr	r3, [r3, #32]
   974c6:	60fb      	str	r3, [r7, #12]
		if (status & TWI_SR_NACK) {
   974c8:	68fb      	ldr	r3, [r7, #12]
   974ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
   974ce:	2b00      	cmp	r3, #0
   974d0:	d007      	beq.n	974e2 <twi_master_write1+0xb2>
			iic_nack = true;
   974d2:	4b44      	ldr	r3, [pc, #272]	; (975e4 <twi_master_write1+0x1b4>)
   974d4:	2201      	movs	r2, #1
   974d6:	701a      	strb	r2, [r3, #0]
			FUNC_ENTRY = 0;
   974d8:	4b3d      	ldr	r3, [pc, #244]	; (975d0 <twi_master_write1+0x1a0>)
   974da:	2200      	movs	r2, #0
   974dc:	601a      	str	r2, [r3, #0]
			return TWI_RECEIVE_NACK;
   974de:	2305      	movs	r3, #5
   974e0:	e070      	b.n	975c4 <twi_master_write1+0x194>
		}
		
	

		if (!(status & TWI_SR_TXRDY)) {
   974e2:	68fb      	ldr	r3, [r7, #12]
   974e4:	f003 0304 	and.w	r3, r3, #4
   974e8:	2b00      	cmp	r3, #0
   974ea:	d115      	bne.n	97518 <twi_master_write1+0xe8>
			if(func_timer > 3)
   974ec:	4b37      	ldr	r3, [pc, #220]	; (975cc <twi_master_write1+0x19c>)
   974ee:	681b      	ldr	r3, [r3, #0]
   974f0:	2b03      	cmp	r3, #3
   974f2:	dd10      	ble.n	97516 <twi_master_write1+0xe6>
			{
		//		Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_IIC_HANGUP,(void*)0,0);
				
				func_timer = 0;
   974f4:	4b35      	ldr	r3, [pc, #212]	; (975cc <twi_master_write1+0x19c>)
   974f6:	2200      	movs	r2, #0
   974f8:	601a      	str	r2, [r3, #0]
			//	p_twi->TWI_CR = TWI_CR_STOP;
			//	p_twi->TWI_CR = TWI_CR_START;
			//	p_twi->TWI_CR = TWI_CR_SWRST;
		//	twi_master_setup(TWI0, &opt);
					p_twi->TWI_CR = TWI_CR_SWRST;
   974fa:	687b      	ldr	r3, [r7, #4]
   974fc:	2280      	movs	r2, #128	; 0x80
   974fe:	601a      	str	r2, [r3, #0]
				//	p_twi->TWI_RHR;

				
				clock_it();
   97500:	4b3a      	ldr	r3, [pc, #232]	; (975ec <twi_master_write1+0x1bc>)
   97502:	4798      	blx	r3
				twi_master_setup(TWI0, &opt);
   97504:	4834      	ldr	r0, [pc, #208]	; (975d8 <twi_master_write1+0x1a8>)
   97506:	4935      	ldr	r1, [pc, #212]	; (975dc <twi_master_write1+0x1ac>)
   97508:	4b35      	ldr	r3, [pc, #212]	; (975e0 <twi_master_write1+0x1b0>)
   9750a:	4798      	blx	r3
				
			FUNC_ENTRY = 0;
   9750c:	4b30      	ldr	r3, [pc, #192]	; (975d0 <twi_master_write1+0x1a0>)
   9750e:	2200      	movs	r2, #0
   97510:	601a      	str	r2, [r3, #0]
			return(TWI_BUSY);
   97512:	2308      	movs	r3, #8
   97514:	e056      	b.n	975c4 <twi_master_write1+0x194>
				break;
			}
			else
			{
				continue;
   97516:	e009      	b.n	9752c <twi_master_write1+0xfc>
			}
			
		}
		p_twi->TWI_THR = *buffer++;
   97518:	693b      	ldr	r3, [r7, #16]
   9751a:	1c5a      	adds	r2, r3, #1
   9751c:	613a      	str	r2, [r7, #16]
   9751e:	781b      	ldrb	r3, [r3, #0]
   97520:	461a      	mov	r2, r3
   97522:	687b      	ldr	r3, [r7, #4]
   97524:	635a      	str	r2, [r3, #52]	; 0x34

		cnt--;
   97526:	697b      	ldr	r3, [r7, #20]
   97528:	3b01      	subs	r3, #1
   9752a:	617b      	str	r3, [r7, #20]
	/* Set internal address for remote chip */
	p_twi->TWI_IADR = 0;
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);

	/* Send all bytes */
	while (cnt > 0) {
   9752c:	697b      	ldr	r3, [r7, #20]
   9752e:	2b00      	cmp	r3, #0
   97530:	d1c7      	bne.n	974c2 <twi_master_write1+0x92>
		cnt--;
	}

	while (1) {
	//	cl_wait(1);
		status = p_twi->TWI_SR;
   97532:	687b      	ldr	r3, [r7, #4]
   97534:	6a1b      	ldr	r3, [r3, #32]
   97536:	60fb      	str	r3, [r7, #12]
		if (status & TWI_SR_NACK) {
   97538:	68fb      	ldr	r3, [r7, #12]
   9753a:	f403 7380 	and.w	r3, r3, #256	; 0x100
   9753e:	2b00      	cmp	r3, #0
   97540:	d004      	beq.n	9754c <twi_master_write1+0x11c>
			FUNC_ENTRY = 0;
   97542:	4b23      	ldr	r3, [pc, #140]	; (975d0 <twi_master_write1+0x1a0>)
   97544:	2200      	movs	r2, #0
   97546:	601a      	str	r2, [r3, #0]
			return TWI_RECEIVE_NACK;
   97548:	2305      	movs	r3, #5
   9754a:	e03b      	b.n	975c4 <twi_master_write1+0x194>
		}

		if (status & TWI_SR_TXRDY) {
   9754c:	68fb      	ldr	r3, [r7, #12]
   9754e:	f003 0304 	and.w	r3, r3, #4
   97552:	2b00      	cmp	r3, #0
   97554:	d004      	beq.n	97560 <twi_master_write1+0x130>
			break;
   97556:	bf00      	nop

			break;
		}
	}

	p_twi->TWI_CR = TWI_CR_STOP;
   97558:	687b      	ldr	r3, [r7, #4]
   9755a:	2202      	movs	r2, #2
   9755c:	601a      	str	r2, [r3, #0]

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
   9755e:	e027      	b.n	975b0 <twi_master_write1+0x180>

		if (status & TWI_SR_TXRDY) {
			break;
		}
		
		if(func_timer > 3)
   97560:	4b1a      	ldr	r3, [pc, #104]	; (975cc <twi_master_write1+0x19c>)
   97562:	681b      	ldr	r3, [r3, #0]
   97564:	2b03      	cmp	r3, #3
   97566:	dd0d      	ble.n	97584 <twi_master_write1+0x154>
		//	Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_IIC_HANGUP,(void*)0,0);
			//	p_twi->TWI_CR = TWI_CR_STOP;
			//	p_twi->TWI_CR = TWI_CR_START;
			//	p_twi->TWI_CR = TWI_CR_SWRST;
			//twi_master_setup(TWI0, &opt);
				p_twi->TWI_CR = TWI_CR_SWRST;
   97568:	687b      	ldr	r3, [r7, #4]
   9756a:	2280      	movs	r2, #128	; 0x80
   9756c:	601a      	str	r2, [r3, #0]
				//p_twi->TWI_RHR;
			clock_it();
   9756e:	4b1f      	ldr	r3, [pc, #124]	; (975ec <twi_master_write1+0x1bc>)
   97570:	4798      	blx	r3
			FUNC_ENTRY = 0;
   97572:	4b17      	ldr	r3, [pc, #92]	; (975d0 <twi_master_write1+0x1a0>)
   97574:	2200      	movs	r2, #0
   97576:	601a      	str	r2, [r3, #0]
			twi_master_setup(TWI0, &opt);
   97578:	4817      	ldr	r0, [pc, #92]	; (975d8 <twi_master_write1+0x1a8>)
   9757a:	4918      	ldr	r1, [pc, #96]	; (975dc <twi_master_write1+0x1ac>)
   9757c:	4b18      	ldr	r3, [pc, #96]	; (975e0 <twi_master_write1+0x1b0>)
   9757e:	4798      	blx	r3
			return(TWI_BUSY);
   97580:	2308      	movs	r3, #8
   97582:	e01f      	b.n	975c4 <twi_master_write1+0x194>

			break;
		}
	}
   97584:	e7d5      	b.n	97532 <twi_master_write1+0x102>

	p_twi->TWI_CR = TWI_CR_STOP;

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
					if(func_timer > 3)
   97586:	4b11      	ldr	r3, [pc, #68]	; (975cc <twi_master_write1+0x19c>)
   97588:	681b      	ldr	r3, [r3, #0]
   9758a:	2b03      	cmp	r3, #3
   9758c:	dd10      	ble.n	975b0 <twi_master_write1+0x180>
					{
				//		Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_IIC_HANGUP,(void*)0,0);
						func_timer = 0;
   9758e:	4b0f      	ldr	r3, [pc, #60]	; (975cc <twi_master_write1+0x19c>)
   97590:	2200      	movs	r2, #0
   97592:	601a      	str	r2, [r3, #0]
			//	p_twi->TWI_CR = TWI_CR_STOP;
			//	p_twi->TWI_CR = TWI_CR_START;
			//	p_twi->TWI_CR = TWI_CR_SWRST;

				//p_twi->TWI_RHR;
			clock_it();
   97594:	4b15      	ldr	r3, [pc, #84]	; (975ec <twi_master_write1+0x1bc>)
   97596:	4798      	blx	r3
			FUNC_ENTRY = 0;
   97598:	4b0d      	ldr	r3, [pc, #52]	; (975d0 <twi_master_write1+0x1a0>)
   9759a:	2200      	movs	r2, #0
   9759c:	601a      	str	r2, [r3, #0]
					twi_master_setup(TWI0, &opt);
   9759e:	480e      	ldr	r0, [pc, #56]	; (975d8 <twi_master_write1+0x1a8>)
   975a0:	490e      	ldr	r1, [pc, #56]	; (975dc <twi_master_write1+0x1ac>)
   975a2:	4b0f      	ldr	r3, [pc, #60]	; (975e0 <twi_master_write1+0x1b0>)
   975a4:	4798      	blx	r3
				p_twi->TWI_CR = TWI_CR_SWRST;
   975a6:	687b      	ldr	r3, [r7, #4]
   975a8:	2280      	movs	r2, #128	; 0x80
   975aa:	601a      	str	r2, [r3, #0]
		//	twi_master_setup(TWI0, &opt);
			return(TWI_BUSY);
   975ac:	2308      	movs	r3, #8
   975ae:	e009      	b.n	975c4 <twi_master_write1+0x194>
		}
	}

	p_twi->TWI_CR = TWI_CR_STOP;

	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
   975b0:	687b      	ldr	r3, [r7, #4]
   975b2:	6a1b      	ldr	r3, [r3, #32]
   975b4:	f003 0301 	and.w	r3, r3, #1
   975b8:	2b00      	cmp	r3, #0
   975ba:	d0e4      	beq.n	97586 <twi_master_write1+0x156>
		//	twi_master_setup(TWI0, &opt);
			return(TWI_BUSY);
						break;
					}
	}
FUNC_ENTRY = 0;
   975bc:	4b04      	ldr	r3, [pc, #16]	; (975d0 <twi_master_write1+0x1a0>)
   975be:	2200      	movs	r2, #0
   975c0:	601a      	str	r2, [r3, #0]
//cl_wait(10);
	return TWI_SUCCESS;
   975c2:	2300      	movs	r3, #0
}
   975c4:	4618      	mov	r0, r3
   975c6:	3718      	adds	r7, #24
   975c8:	46bd      	mov	sp, r7
   975ca:	bd80      	pop	{r7, pc}
   975cc:	20071a7c 	.word	0x20071a7c
   975d0:	20071b38 	.word	0x20071b38
   975d4:	0009ba51 	.word	0x0009ba51
   975d8:	4008c000 	.word	0x4008c000
   975dc:	20070b20 	.word	0x20070b20
   975e0:	000973d1 	.word	0x000973d1
   975e4:	20071a73 	.word	0x20071a73
   975e8:	000975f1 	.word	0x000975f1
   975ec:	00097715 	.word	0x00097715

000975f0 <twi_mk_addr>:
	return TWI_SUCCESS;
}


static uint32_t twi_mk_addr(const uint8_t *addr, int len)
{
   975f0:	b480      	push	{r7}
   975f2:	b085      	sub	sp, #20
   975f4:	af00      	add	r7, sp, #0
   975f6:	6078      	str	r0, [r7, #4]
   975f8:	6039      	str	r1, [r7, #0]
	uint32_t val;

	if (len == 0)
   975fa:	683b      	ldr	r3, [r7, #0]
   975fc:	2b00      	cmp	r3, #0
   975fe:	d101      	bne.n	97604 <twi_mk_addr+0x14>
	return 0;
   97600:	2300      	movs	r3, #0
   97602:	e01d      	b.n	97640 <twi_mk_addr+0x50>

	val = addr[0];
   97604:	687b      	ldr	r3, [r7, #4]
   97606:	781b      	ldrb	r3, [r3, #0]
   97608:	60fb      	str	r3, [r7, #12]
	if (len > 1) {
   9760a:	683b      	ldr	r3, [r7, #0]
   9760c:	2b01      	cmp	r3, #1
   9760e:	dd09      	ble.n	97624 <twi_mk_addr+0x34>
		val <<= 8;
   97610:	68fb      	ldr	r3, [r7, #12]
   97612:	021b      	lsls	r3, r3, #8
   97614:	60fb      	str	r3, [r7, #12]
		val |= addr[1];
   97616:	687b      	ldr	r3, [r7, #4]
   97618:	3301      	adds	r3, #1
   9761a:	781b      	ldrb	r3, [r3, #0]
   9761c:	461a      	mov	r2, r3
   9761e:	68fb      	ldr	r3, [r7, #12]
   97620:	4313      	orrs	r3, r2
   97622:	60fb      	str	r3, [r7, #12]
	}
	if (len > 2) {
   97624:	683b      	ldr	r3, [r7, #0]
   97626:	2b02      	cmp	r3, #2
   97628:	dd09      	ble.n	9763e <twi_mk_addr+0x4e>
		val <<= 8;
   9762a:	68fb      	ldr	r3, [r7, #12]
   9762c:	021b      	lsls	r3, r3, #8
   9762e:	60fb      	str	r3, [r7, #12]
		val |= addr[2];
   97630:	687b      	ldr	r3, [r7, #4]
   97632:	3302      	adds	r3, #2
   97634:	781b      	ldrb	r3, [r3, #0]
   97636:	461a      	mov	r2, r3
   97638:	68fb      	ldr	r3, [r7, #12]
   9763a:	4313      	orrs	r3, r2
   9763c:	60fb      	str	r3, [r7, #12]
	}
	return val;
   9763e:	68fb      	ldr	r3, [r7, #12]
}
   97640:	4618      	mov	r0, r3
   97642:	3714      	adds	r7, #20
   97644:	46bd      	mov	sp, r7
   97646:	f85d 7b04 	ldr.w	r7, [sp], #4
   9764a:	4770      	bx	lr

0009764c <DD_INIT_IIC>:
 }
	


 void DD_INIT_IIC(void)
{
   9764c:	b580      	push	{r7, lr}
   9764e:	af00      	add	r7, sp, #0
	

		PIOA->PIO_WPMR = 0x50494F00;
   97650:	4b06      	ldr	r3, [pc, #24]	; (9766c <DD_INIT_IIC+0x20>)
   97652:	4a07      	ldr	r2, [pc, #28]	; (97670 <DD_INIT_IIC+0x24>)
   97654:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
		//PIOA->PIO_PUER = 0x00000300;
		PIOA->PIO_PDR =	 0x00060000;
   97658:	4b04      	ldr	r3, [pc, #16]	; (9766c <DD_INIT_IIC+0x20>)
   9765a:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
   9765e:	605a      	str	r2, [r3, #4]
	//	PIOA->PIO_PUER = 0x00040000;
	//	PIOA->PIO_PUDR = 0x00060000;
		
	//	PIOA->PIO_ABSR = 0x00090000;
		twi_master_setup(TWI0, &opt);
   97660:	4804      	ldr	r0, [pc, #16]	; (97674 <DD_INIT_IIC+0x28>)
   97662:	4905      	ldr	r1, [pc, #20]	; (97678 <DD_INIT_IIC+0x2c>)
   97664:	4b05      	ldr	r3, [pc, #20]	; (9767c <DD_INIT_IIC+0x30>)
   97666:	4798      	blx	r3
		
			
	
}
   97668:	bd80      	pop	{r7, pc}
   9766a:	bf00      	nop
   9766c:	400e0e00 	.word	0x400e0e00
   97670:	50494f00 	.word	0x50494f00
   97674:	4008c000 	.word	0x4008c000
   97678:	20070b20 	.word	0x20070b20
   9767c:	000973d1 	.word	0x000973d1

00097680 <DD_IIC_SET_POT>:

	}
	
}
void DD_IIC_SET_POT(uint8_t iic_address, uint16_t data)
{
   97680:	b580      	push	{r7, lr}
   97682:	b088      	sub	sp, #32
   97684:	af00      	add	r7, sp, #0
   97686:	4603      	mov	r3, r0
   97688:	460a      	mov	r2, r1
   9768a:	71fb      	strb	r3, [r7, #7]
   9768c:	4613      	mov	r3, r2
   9768e:	80bb      	strh	r3, [r7, #4]
	//DD_WRITE_IIC( iic_address,  *data , sizeof(uint16_t));
	
		 uint8_t test_pattern_inc[] =
   97690:	4a1d      	ldr	r2, [pc, #116]	; (97708 <DD_IIC_SET_POT+0x88>)
   97692:	f107 031c 	add.w	r3, r7, #28
   97696:	6810      	ldr	r0, [r2, #0]
   97698:	6018      	str	r0, [r3, #0]
			 0x1C,
			 0x02,
			 0x04,
			 0x00
		 };
		 twi_packet_t iic_packet = {
   9769a:	f107 0308 	add.w	r3, r7, #8
   9769e:	2200      	movs	r2, #0
   976a0:	601a      	str	r2, [r3, #0]
   976a2:	3304      	adds	r3, #4
   976a4:	2200      	movs	r2, #0
   976a6:	601a      	str	r2, [r3, #0]
   976a8:	3304      	adds	r3, #4
   976aa:	2200      	movs	r2, #0
   976ac:	601a      	str	r2, [r3, #0]
   976ae:	3304      	adds	r3, #4
   976b0:	2200      	movs	r2, #0
   976b2:	601a      	str	r2, [r3, #0]
   976b4:	3304      	adds	r3, #4
   976b6:	2200      	movs	r2, #0
   976b8:	601a      	str	r2, [r3, #0]
   976ba:	3304      	adds	r3, #4
   976bc:	f107 031c 	add.w	r3, r7, #28
   976c0:	613b      	str	r3, [r7, #16]
   976c2:	2304      	movs	r3, #4
   976c4:	617b      	str	r3, [r7, #20]
   976c6:	79fb      	ldrb	r3, [r7, #7]
   976c8:	763b      	strb	r3, [r7, #24]
			 .chip         = iic_address,
			 .buffer       = (void *)test_pattern_inc, // transfer data source buffer
			 .length       = 4   // transfer data size (bytes)
			// .length       = length   // transfer data size (bytes)
		 };
		 if ( data > 1024)
   976ca:	88bb      	ldrh	r3, [r7, #4]
   976cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   976d0:	d817      	bhi.n	97702 <DD_IIC_SET_POT+0x82>
			 
		 }
		 else
		 {

				 test_pattern_inc[3] = (Byte)(data & 0xFF);
   976d2:	88bb      	ldrh	r3, [r7, #4]
   976d4:	b2db      	uxtb	r3, r3
   976d6:	77fb      	strb	r3, [r7, #31]
				 test_pattern_inc[2] = 0x04 | (data >> 8 ) & 0x03;
   976d8:	88bb      	ldrh	r3, [r7, #4]
   976da:	0a1b      	lsrs	r3, r3, #8
   976dc:	b29b      	uxth	r3, r3
   976de:	b2db      	uxtb	r3, r3
   976e0:	f003 0303 	and.w	r3, r3, #3
   976e4:	b2db      	uxtb	r3, r3
   976e6:	f043 0304 	orr.w	r3, r3, #4
   976ea:	b2db      	uxtb	r3, r3
   976ec:	b2db      	uxtb	r3, r3
   976ee:	77bb      	strb	r3, [r7, #30]
	

			 iic_packet.buffer =  (void *)test_pattern_inc;
   976f0:	f107 031c 	add.w	r3, r7, #28
   976f4:	613b      	str	r3, [r7, #16]
			 twi_master_write1(TWI_EXAMPLE, &iic_packet)	;
   976f6:	f107 0308 	add.w	r3, r7, #8
   976fa:	4804      	ldr	r0, [pc, #16]	; (9770c <DD_IIC_SET_POT+0x8c>)
   976fc:	4619      	mov	r1, r3
   976fe:	4b04      	ldr	r3, [pc, #16]	; (97710 <DD_IIC_SET_POT+0x90>)
   97700:	4798      	blx	r3
		 }

}
   97702:	3720      	adds	r7, #32
   97704:	46bd      	mov	sp, r7
   97706:	bd80      	pop	{r7, pc}
   97708:	000a8cb4 	.word	0x000a8cb4
   9770c:	4008c000 	.word	0x4008c000
   97710:	00097431 	.word	0x00097431

00097714 <clock_it>:
			
}


void clock_it(void)
{
   97714:	b480      	push	{r7}
   97716:	af00      	add	r7, sp, #0
	return;
   97718:	bf00      	nop

						//PIOA->PIO_CODR = 0x0E002800;
						PIOA->PIO_CODR = 0x0E00A800;
						
						TWI0->TWI_CR = TWI_CR_STOP;
}					
   9771a:	46bd      	mov	sp, r7
   9771c:	f85d 7b04 	ldr.w	r7, [sp], #4
   97720:	4770      	bx	lr
   97722:	bf00      	nop

00097724 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   97724:	b480      	push	{r7}
   97726:	b083      	sub	sp, #12
   97728:	af00      	add	r7, sp, #0
   9772a:	4603      	mov	r3, r0
   9772c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   9772e:	4908      	ldr	r1, [pc, #32]	; (97750 <NVIC_EnableIRQ+0x2c>)
   97730:	f997 3007 	ldrsb.w	r3, [r7, #7]
   97734:	095b      	lsrs	r3, r3, #5
   97736:	79fa      	ldrb	r2, [r7, #7]
   97738:	f002 021f 	and.w	r2, r2, #31
   9773c:	2001      	movs	r0, #1
   9773e:	fa00 f202 	lsl.w	r2, r0, r2
   97742:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   97746:	370c      	adds	r7, #12
   97748:	46bd      	mov	sp, r7
   9774a:	f85d 7b04 	ldr.w	r7, [sp], #4
   9774e:	4770      	bx	lr
   97750:	e000e100 	.word	0xe000e100

00097754 <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
   97754:	b480      	push	{r7}
   97756:	b083      	sub	sp, #12
   97758:	af00      	add	r7, sp, #0
   9775a:	4603      	mov	r3, r0
   9775c:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   9775e:	4909      	ldr	r1, [pc, #36]	; (97784 <NVIC_DisableIRQ+0x30>)
   97760:	f997 3007 	ldrsb.w	r3, [r7, #7]
   97764:	095b      	lsrs	r3, r3, #5
   97766:	79fa      	ldrb	r2, [r7, #7]
   97768:	f002 021f 	and.w	r2, r2, #31
   9776c:	2001      	movs	r0, #1
   9776e:	fa00 f202 	lsl.w	r2, r0, r2
   97772:	3320      	adds	r3, #32
   97774:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   97778:	370c      	adds	r7, #12
   9777a:	46bd      	mov	sp, r7
   9777c:	f85d 7b04 	ldr.w	r7, [sp], #4
   97780:	4770      	bx	lr
   97782:	bf00      	nop
   97784:	e000e100 	.word	0xe000e100

00097788 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
   97788:	b480      	push	{r7}
   9778a:	b083      	sub	sp, #12
   9778c:	af00      	add	r7, sp, #0
   9778e:	4603      	mov	r3, r0
   97790:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   97792:	4909      	ldr	r1, [pc, #36]	; (977b8 <NVIC_ClearPendingIRQ+0x30>)
   97794:	f997 3007 	ldrsb.w	r3, [r7, #7]
   97798:	095b      	lsrs	r3, r3, #5
   9779a:	79fa      	ldrb	r2, [r7, #7]
   9779c:	f002 021f 	and.w	r2, r2, #31
   977a0:	2001      	movs	r0, #1
   977a2:	fa00 f202 	lsl.w	r2, r0, r2
   977a6:	3360      	adds	r3, #96	; 0x60
   977a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   977ac:	370c      	adds	r7, #12
   977ae:	46bd      	mov	sp, r7
   977b0:	f85d 7b04 	ldr.w	r7, [sp], #4
   977b4:	4770      	bx	lr
   977b6:	bf00      	nop
   977b8:	e000e100 	.word	0xe000e100

000977bc <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   977bc:	b480      	push	{r7}
   977be:	b083      	sub	sp, #12
   977c0:	af00      	add	r7, sp, #0
   977c2:	4603      	mov	r3, r0
   977c4:	6039      	str	r1, [r7, #0]
   977c6:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   977c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
   977cc:	2b00      	cmp	r3, #0
   977ce:	da0b      	bge.n	977e8 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   977d0:	490d      	ldr	r1, [pc, #52]	; (97808 <NVIC_SetPriority+0x4c>)
   977d2:	79fb      	ldrb	r3, [r7, #7]
   977d4:	f003 030f 	and.w	r3, r3, #15
   977d8:	3b04      	subs	r3, #4
   977da:	683a      	ldr	r2, [r7, #0]
   977dc:	b2d2      	uxtb	r2, r2
   977de:	0112      	lsls	r2, r2, #4
   977e0:	b2d2      	uxtb	r2, r2
   977e2:	440b      	add	r3, r1
   977e4:	761a      	strb	r2, [r3, #24]
   977e6:	e009      	b.n	977fc <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   977e8:	4908      	ldr	r1, [pc, #32]	; (9780c <NVIC_SetPriority+0x50>)
   977ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
   977ee:	683a      	ldr	r2, [r7, #0]
   977f0:	b2d2      	uxtb	r2, r2
   977f2:	0112      	lsls	r2, r2, #4
   977f4:	b2d2      	uxtb	r2, r2
   977f6:	440b      	add	r3, r1
   977f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   977fc:	370c      	adds	r7, #12
   977fe:	46bd      	mov	sp, r7
   97800:	f85d 7b04 	ldr.w	r7, [sp], #4
   97804:	4770      	bx	lr
   97806:	bf00      	nop
   97808:	e000ed00 	.word	0xe000ed00
   9780c:	e000e100 	.word	0xe000e100

00097810 <DD_INIT_INT>:

extern Cl_Mac_EventQueueType Cl_MacEventQueue1;


void DD_INIT_INT()
{
   97810:	b580      	push	{r7, lr}
   97812:	af00      	add	r7, sp, #0
	
	
	NVIC_DisableIRQ(UART_IRQn);
   97814:	2008      	movs	r0, #8
   97816:	4b2e      	ldr	r3, [pc, #184]	; (978d0 <DD_INIT_INT+0xc0>)
   97818:	4798      	blx	r3
	NVIC_ClearPendingIRQ(UART_IRQn);
   9781a:	2008      	movs	r0, #8
   9781c:	4b2d      	ldr	r3, [pc, #180]	; (978d4 <DD_INIT_INT+0xc4>)
   9781e:	4798      	blx	r3
	NVIC_SetPriority(UART_IRQn, 0);
   97820:	2008      	movs	r0, #8
   97822:	2100      	movs	r1, #0
   97824:	4b2c      	ldr	r3, [pc, #176]	; (978d8 <DD_INIT_INT+0xc8>)
   97826:	4798      	blx	r3
	NVIC_EnableIRQ(UART_IRQn);
   97828:	2008      	movs	r0, #8
   9782a:	4b2c      	ldr	r3, [pc, #176]	; (978dc <DD_INIT_INT+0xcc>)
   9782c:	4798      	blx	r3
	uart_enable_interrupt(UART,UART_SR_RXRDY);
   9782e:	482c      	ldr	r0, [pc, #176]	; (978e0 <DD_INIT_INT+0xd0>)
   97830:	2101      	movs	r1, #1
   97832:	4b2c      	ldr	r3, [pc, #176]	; (978e4 <DD_INIT_INT+0xd4>)
   97834:	4798      	blx	r3
		
	NVIC_DisableIRQ(TC0_IRQn);
   97836:	201b      	movs	r0, #27
   97838:	4b25      	ldr	r3, [pc, #148]	; (978d0 <DD_INIT_INT+0xc0>)
   9783a:	4798      	blx	r3
	NVIC_ClearPendingIRQ(TC0_IRQn);
   9783c:	201b      	movs	r0, #27
   9783e:	4b25      	ldr	r3, [pc, #148]	; (978d4 <DD_INIT_INT+0xc4>)
   97840:	4798      	blx	r3
	NVIC_SetPriority(TC0_IRQn, 0);
   97842:	201b      	movs	r0, #27
   97844:	2100      	movs	r1, #0
   97846:	4b24      	ldr	r3, [pc, #144]	; (978d8 <DD_INIT_INT+0xc8>)
   97848:	4798      	blx	r3
	NVIC_EnableIRQ(TC0_IRQn);
   9784a:	201b      	movs	r0, #27
   9784c:	4b23      	ldr	r3, [pc, #140]	; (978dc <DD_INIT_INT+0xcc>)
   9784e:	4798      	blx	r3
	
	NVIC_DisableIRQ(TC2_IRQn);
	NVIC_ClearPendingIRQ(TC2_IRQn);
	NVIC_SetPriority(TC2_IRQn, 0);*/
	
	NVIC_DisableIRQ(TC3_IRQn);
   97850:	201e      	movs	r0, #30
   97852:	4b1f      	ldr	r3, [pc, #124]	; (978d0 <DD_INIT_INT+0xc0>)
   97854:	4798      	blx	r3
	NVIC_ClearPendingIRQ(TC3_IRQn);
   97856:	201e      	movs	r0, #30
   97858:	4b1e      	ldr	r3, [pc, #120]	; (978d4 <DD_INIT_INT+0xc4>)
   9785a:	4798      	blx	r3
	NVIC_SetPriority(TC3_IRQn,0);
   9785c:	201e      	movs	r0, #30
   9785e:	2100      	movs	r1, #0
   97860:	4b1d      	ldr	r3, [pc, #116]	; (978d8 <DD_INIT_INT+0xc8>)
   97862:	4798      	blx	r3
	NVIC_EnableIRQ(TC3_IRQn);
   97864:	201e      	movs	r0, #30
   97866:	4b1d      	ldr	r3, [pc, #116]	; (978dc <DD_INIT_INT+0xcc>)
   97868:	4798      	blx	r3
	
	NVIC_DisableIRQ(TC5_IRQn);
	NVIC_ClearPendingIRQ(TC5_IRQn);
	NVIC_SetPriority(TC5_IRQn, 0);
	*/
	NVIC_DisableIRQ(TC6_IRQn);
   9786a:	2021      	movs	r0, #33	; 0x21
   9786c:	4b18      	ldr	r3, [pc, #96]	; (978d0 <DD_INIT_INT+0xc0>)
   9786e:	4798      	blx	r3
	NVIC_ClearPendingIRQ(TC6_IRQn);
   97870:	2021      	movs	r0, #33	; 0x21
   97872:	4b18      	ldr	r3, [pc, #96]	; (978d4 <DD_INIT_INT+0xc4>)
   97874:	4798      	blx	r3
	NVIC_SetPriority(TC6_IRQn, 0);
   97876:	2021      	movs	r0, #33	; 0x21
   97878:	2100      	movs	r1, #0
   9787a:	4b17      	ldr	r3, [pc, #92]	; (978d8 <DD_INIT_INT+0xc8>)
   9787c:	4798      	blx	r3
	NVIC_EnableIRQ(TC6_IRQn);
   9787e:	2021      	movs	r0, #33	; 0x21
   97880:	4b16      	ldr	r3, [pc, #88]	; (978dc <DD_INIT_INT+0xcc>)
   97882:	4798      	blx	r3
	NVIC_ClearPendingIRQ(TC8_IRQn);
	NVIC_SetPriority(TC8_IRQn, 0);
*/
	
	
	NVIC->ICER[6] = 0xFFFFFFFF;
   97884:	4b18      	ldr	r3, [pc, #96]	; (978e8 <DD_INIT_INT+0xd8>)
   97886:	f04f 32ff 	mov.w	r2, #4294967295
   9788a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	NVIC->ICPR[6] = 0XFFFFFFFF;
   9788e:	4b16      	ldr	r3, [pc, #88]	; (978e8 <DD_INIT_INT+0xd8>)
   97890:	f04f 32ff 	mov.w	r2, #4294967295
   97894:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
	NVIC_SetPriority(TC6_IRQn, 0);
   97898:	2021      	movs	r0, #33	; 0x21
   9789a:	2100      	movs	r1, #0
   9789c:	4b0e      	ldr	r3, [pc, #56]	; (978d8 <DD_INIT_INT+0xc8>)
   9789e:	4798      	blx	r3
	//NVIC_EnableIRQ(TC6_IRQn);
	NVIC->ISER[6] = 0xFFFFFFFF;
   978a0:	4b11      	ldr	r3, [pc, #68]	; (978e8 <DD_INIT_INT+0xd8>)
   978a2:	f04f 32ff 	mov.w	r2, #4294967295
   978a6:	619a      	str	r2, [r3, #24]
	
	
	// FOR TIMER2 OF 100ms MEANS 10HZ FREQUENCY
	NVIC->ICER[3] = 0xFFFFFFFF;
   978a8:	4b0f      	ldr	r3, [pc, #60]	; (978e8 <DD_INIT_INT+0xd8>)
   978aa:	f04f 32ff 	mov.w	r2, #4294967295
   978ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	NVIC->ICPR[3] = 0XFFFFFFFF;
   978b2:	4b0d      	ldr	r3, [pc, #52]	; (978e8 <DD_INIT_INT+0xd8>)
   978b4:	f04f 32ff 	mov.w	r2, #4294967295
   978b8:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	//NVIC_DisableIRQ(TC3_IRQn);
	//NVIC_ClearPendingIRQ(TC3_IRQn);
	NVIC_SetPriority(TC3_IRQn, 0);
   978bc:	201e      	movs	r0, #30
   978be:	2100      	movs	r1, #0
   978c0:	4b05      	ldr	r3, [pc, #20]	; (978d8 <DD_INIT_INT+0xc8>)
   978c2:	4798      	blx	r3
	//NVIC_EnableIRQ(TC3_IRQn);
	NVIC->ISER[3] = 0xFFFFFFFF;
   978c4:	4b08      	ldr	r3, [pc, #32]	; (978e8 <DD_INIT_INT+0xd8>)
   978c6:	f04f 32ff 	mov.w	r2, #4294967295
   978ca:	60da      	str	r2, [r3, #12]
// 		NVIC_SetPriority(PIOB_IRQn, 15);
//  		NVIC_EnableIRQ(PIOB_IRQn);
		
		

}
   978cc:	bd80      	pop	{r7, pc}
   978ce:	bf00      	nop
   978d0:	00097755 	.word	0x00097755
   978d4:	00097789 	.word	0x00097789
   978d8:	000977bd 	.word	0x000977bd
   978dc:	00097725 	.word	0x00097725
   978e0:	400e0800 	.word	0x400e0800
   978e4:	0009afed 	.word	0x0009afed
   978e8:	e000e100 	.word	0xe000e100

000978ec <DD_INIT_NVM>:
 */ 

#include "DD_NVM.h"

void DD_INIT_NVM()
{
   978ec:	b590      	push	{r4, r7, lr}
   978ee:	b0c7      	sub	sp, #284	; 0x11c
   978f0:	af00      	add	r7, sp, #0
	
	uint32_t ul_last_page_addr = LAST_PAGE_ADDRESS;
   978f2:	4b49      	ldr	r3, [pc, #292]	; (97a18 <DD_INIT_NVM+0x12c>)
   978f4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	uint32_t *pul_last_page = (uint32_t *) ul_last_page_addr;
   978f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
   978fc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	uint32_t ul_rc;
	uint32_t ul_idx;
	uint8_t uc_key, cnt = 0;
   97900:	2300      	movs	r3, #0
   97902:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
	
	uint32_t ul_page_buffer[IFLASH_PAGE_SIZE / sizeof(uint32_t)];
	
	
	ul_rc = flash_init(FLASH_ACCESS_MODE_128, 6);
   97906:	2000      	movs	r0, #0
   97908:	2106      	movs	r1, #6
   9790a:	4b44      	ldr	r3, [pc, #272]	; (97a1c <DD_INIT_NVM+0x130>)
   9790c:	4798      	blx	r3
   9790e:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
	if (ul_rc != FLASH_RC_OK)
   97912:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
   97916:	2b00      	cmp	r3, #0
   97918:	d000      	beq.n	9791c <DD_INIT_NVM+0x30>
	 {
	//	printf("-F- Initialization error %lu\n\r", (UL)ul_rc);
		return 0;
   9791a:	e079      	b.n	97a10 <DD_INIT_NVM+0x124>
		
	
	
	/* Unlock page */
	//printf("-I- Unlocking last page: 0x%08x\r\n", ul_last_page_addr);
	ul_rc = flash_unlock(ul_last_page_addr,
   9791c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
   97920:	33ff      	adds	r3, #255	; 0xff
   97922:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
   97926:	4619      	mov	r1, r3
   97928:	2200      	movs	r2, #0
   9792a:	2300      	movs	r3, #0
   9792c:	4c3c      	ldr	r4, [pc, #240]	; (97a20 <DD_INIT_NVM+0x134>)
   9792e:	47a0      	blx	r4
   97930:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
	ul_last_page_addr + IFLASH_PAGE_SIZE - 1, 0, 0);
	if (ul_rc != FLASH_RC_OK) {
   97934:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
   97938:	2b00      	cmp	r3, #0
   9793a:	d000      	beq.n	9793e <DD_INIT_NVM+0x52>
		//printf("-F- Unlock error %lu\n\r", (UL)ul_rc);
		return 0;
   9793c:	e068      	b.n	97a10 <DD_INIT_NVM+0x124>
	}
	
	/* Write page */
	//printf("-I- Writing last page with walking bit pattern\n\r");
	for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / 4); ul_idx++)
   9793e:	2300      	movs	r3, #0
   97940:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   97944:	e010      	b.n	97968 <DD_INIT_NVM+0x7c>
	 {
		ul_page_buffer[ul_idx] = cnt ;   //1 << (ul_idx % 32);
   97946:	f897 1113 	ldrb.w	r1, [r7, #275]	; 0x113
   9794a:	463b      	mov	r3, r7
   9794c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
   97950:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		cnt ++;
   97954:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
   97958:	3301      	adds	r3, #1
   9795a:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
		return 0;
	}
	
	/* Write page */
	//printf("-I- Writing last page with walking bit pattern\n\r");
	for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / 4); ul_idx++)
   9795e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
   97962:	3301      	adds	r3, #1
   97964:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   97968:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
   9796c:	2b3f      	cmp	r3, #63	; 0x3f
   9796e:	d9ea      	bls.n	97946 <DD_INIT_NVM+0x5a>
// 	}
	
	
	/* Validate page */
	//printf("-I- Checking page contents ");
	for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / 4); ul_idx++) {
   97970:	2300      	movs	r3, #0
   97972:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   97976:	e013      	b.n	979a0 <DD_INIT_NVM+0xb4>
		//printf(".");
		if (pul_last_page[ul_idx] != ul_page_buffer[ul_idx]) {
   97978:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
   9797c:	009b      	lsls	r3, r3, #2
   9797e:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
   97982:	4413      	add	r3, r2
   97984:	681a      	ldr	r2, [r3, #0]
   97986:	463b      	mov	r3, r7
   97988:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
   9798c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   97990:	429a      	cmp	r2, r3
   97992:	d000      	beq.n	97996 <DD_INIT_NVM+0xaa>
			//printf("\n\r-F- data error\n\r");
			return 0;
   97994:	e03c      	b.n	97a10 <DD_INIT_NVM+0x124>
// 	}
	
	
	/* Validate page */
	//printf("-I- Checking page contents ");
	for (ul_idx = 0; ul_idx < (IFLASH_PAGE_SIZE / 4); ul_idx++) {
   97996:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
   9799a:	3301      	adds	r3, #1
   9799c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   979a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
   979a4:	2b3f      	cmp	r3, #63	; 0x3f
   979a6:	d9e7      	bls.n	97978 <DD_INIT_NVM+0x8c>
	
	
	
		/* Lock page */
		//printf("-I- Locking last page\n\r");
		ul_rc = flash_lock(ul_last_page_addr,
   979a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
   979ac:	33ff      	adds	r3, #255	; 0xff
   979ae:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
   979b2:	4619      	mov	r1, r3
   979b4:	2200      	movs	r2, #0
   979b6:	2300      	movs	r3, #0
   979b8:	4c1a      	ldr	r4, [pc, #104]	; (97a24 <DD_INIT_NVM+0x138>)
   979ba:	47a0      	blx	r4
   979bc:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
		ul_last_page_addr + IFLASH_PAGE_SIZE - 1, 0, 0);
		if (ul_rc != FLASH_RC_OK) {
   979c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
   979c4:	2b00      	cmp	r3, #0
   979c6:	d000      	beq.n	979ca <DD_INIT_NVM+0xde>
			//printf("-F- Flash locking error %lu\n\r", (UL)ul_rc);
			return 0;
   979c8:	e022      	b.n	97a10 <DD_INIT_NVM+0x124>
		}

		/* Check if the associated region is locked. */
		//printf("-I- Try to program the locked page ...\n\r");
		ul_rc = flash_write(ul_last_page_addr, ul_page_buffer,
   979ca:	463b      	mov	r3, r7
   979cc:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
   979d0:	4619      	mov	r1, r3
   979d2:	f44f 7280 	mov.w	r2, #256	; 0x100
   979d6:	2301      	movs	r3, #1
   979d8:	4c13      	ldr	r4, [pc, #76]	; (97a28 <DD_INIT_NVM+0x13c>)
   979da:	47a0      	blx	r4
   979dc:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
		}

		//printf("-I- Please open Segger's JMem program \n\r");
		//printf("-I- Read memory at address 0x%08lx to check contents\n\r",		(UL)ul_last_page_addr);
		//printf("-I- Press any key to continue...\n\r");
		while (0 != uart_read(CONSOLE_UART, &uc_key));
   979e0:	bf00      	nop
   979e2:	f207 1303 	addw	r3, r7, #259	; 0x103
   979e6:	4811      	ldr	r0, [pc, #68]	; (97a2c <DD_INIT_NVM+0x140>)
   979e8:	4619      	mov	r1, r3
   979ea:	4b11      	ldr	r3, [pc, #68]	; (97a30 <DD_INIT_NVM+0x144>)
   979ec:	4798      	blx	r3
   979ee:	4603      	mov	r3, r0
   979f0:	2b00      	cmp	r3, #0
   979f2:	d1f6      	bne.n	979e2 <DD_INIT_NVM+0xf6>

		//printf("-I- Good job!\n\r""-I- Now set the security bit \n\r"		"-I- Press any key to continue to see what happened...\n\r");
		while (0 != uart_read(CONSOLE_UART, &uc_key));
   979f4:	bf00      	nop
   979f6:	f207 1303 	addw	r3, r7, #259	; 0x103
   979fa:	480c      	ldr	r0, [pc, #48]	; (97a2c <DD_INIT_NVM+0x140>)
   979fc:	4619      	mov	r1, r3
   979fe:	4b0c      	ldr	r3, [pc, #48]	; (97a30 <DD_INIT_NVM+0x144>)
   97a00:	4798      	blx	r3
   97a02:	4603      	mov	r3, r0
   97a04:	2b00      	cmp	r3, #0
   97a06:	d1f6      	bne.n	979f6 <DD_INIT_NVM+0x10a>
		
		
		/* Set security bit */
		//printf("-I- Setting security bit \n\r");
		ul_rc = flash_enable_security_bit();
   97a08:	4b0a      	ldr	r3, [pc, #40]	; (97a34 <DD_INIT_NVM+0x148>)
   97a0a:	4798      	blx	r3
   97a0c:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104

		//printf("-I- All tests done\n\r");



}
   97a10:	f507 778e 	add.w	r7, r7, #284	; 0x11c
   97a14:	46bd      	mov	sp, r7
   97a16:	bd90      	pop	{r4, r7, pc}
   97a18:	000fff00 	.word	0x000fff00
   97a1c:	00080831 	.word	0x00080831
   97a20:	00080a69 	.word	0x00080a69
   97a24:	000809c5 	.word	0x000809c5
   97a28:	00080865 	.word	0x00080865
   97a2c:	400e0800 	.word	0x400e0800
   97a30:	0009b051 	.word	0x0009b051
   97a34:	00080bb5 	.word	0x00080bb5

00097a38 <DD_INIT_PWM>:

#include "DD_PWM.h"
#include "Platform/Drivers/DD_SYS/DD_SYS.h"

void DD_INIT_PWM()
{
   97a38:	b480      	push	{r7}
   97a3a:	af00      	add	r7, sp, #0
	PWM->PWM_WPCR = 0x50574D00;
   97a3c:	4b2b      	ldr	r3, [pc, #172]	; (97aec <DD_INIT_PWM+0xb4>)
   97a3e:	4a2c      	ldr	r2, [pc, #176]	; (97af0 <DD_INIT_PWM+0xb8>)
   97a40:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PWM->PWM_CH_NUM[0].PWM_CMR = PWM_CMR_CPOL|PWM_CMR_CPRE_MCK_DIV_32|PWM_CMR_CES|PWM_CMR_DTE|PWM_CMR_DTHI|PWM_CMR_DTLI;
   97a44:	4b29      	ldr	r3, [pc, #164]	; (97aec <DD_INIT_PWM+0xb4>)
   97a46:	4a2b      	ldr	r2, [pc, #172]	; (97af4 <DD_INIT_PWM+0xbc>)
   97a48:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	PWM->PWM_CH_NUM[1].PWM_CMR = PWM_CMR_CPOL|PWM_CMR_CPRE_MCK_DIV_32|PWM_CMR_CES|PWM_CMR_DTE|PWM_CMR_DTHI|PWM_CMR_DTLI;
   97a4c:	4b27      	ldr	r3, [pc, #156]	; (97aec <DD_INIT_PWM+0xb4>)
   97a4e:	4a29      	ldr	r2, [pc, #164]	; (97af4 <DD_INIT_PWM+0xbc>)
   97a50:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	PWM->PWM_CH_NUM[2].PWM_CMR= PWM_CMR_CPOL|PWM_CMR_CPRE_MCK_DIV_32|PWM_CMR_CES|PWM_CMR_DTE|PWM_CMR_DTHI|PWM_CMR_DTLI;
   97a54:	4b25      	ldr	r3, [pc, #148]	; (97aec <DD_INIT_PWM+0xb4>)
   97a56:	4a27      	ldr	r2, [pc, #156]	; (97af4 <DD_INIT_PWM+0xbc>)
   97a58:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
	//PWM->PWM_CH_NUM[4].PWM_CMR = PWM_CMR_CPOL|PWM_CMR_CPRE_MCK_DIV_32|PWM_CMR_CES|PWM_CMR_DTE|PWM_CMR_DTHI|PWM_CMR_DTLI;
	PWM->PWM_CH_NUM[5].PWM_CMR = PWM_CMR_CPOL|PWM_CMR_CPRE_MCK_DIV_16|PWM_CMR_CES|PWM_CMR_DTE|PWM_CMR_DTHI|PWM_CMR_DTLI;
   97a5c:	4b23      	ldr	r3, [pc, #140]	; (97aec <DD_INIT_PWM+0xb4>)
   97a5e:	4a26      	ldr	r2, [pc, #152]	; (97af8 <DD_INIT_PWM+0xc0>)
   97a60:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0


	//PIOC->PIO_ABSR = 0x00E00054;


	PWM->PWM_DIS = 0x000000FF;
   97a64:	4b21      	ldr	r3, [pc, #132]	; (97aec <DD_INIT_PWM+0xb4>)
   97a66:	22ff      	movs	r2, #255	; 0xff
   97a68:	609a      	str	r2, [r3, #8]
	PWM->PWM_CLK = 0X00000A06;
   97a6a:	4b20      	ldr	r3, [pc, #128]	; (97aec <DD_INIT_PWM+0xb4>)
   97a6c:	f640 2206 	movw	r2, #2566	; 0xa06
   97a70:	601a      	str	r2, [r3, #0]
	PWM->PWM_CH_NUM[4].PWM_CMR = 0x0000000B; // selecting CLOCKA
   97a72:	4b1e      	ldr	r3, [pc, #120]	; (97aec <DD_INIT_PWM+0xb4>)
   97a74:	220b      	movs	r2, #11
   97a76:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
// 	PWM->PWM_CH_NUM[4].PWM_CPRD = 0x000001FA;
// 	PWM->PWM_CH_NUM[4].PWM_CDTY = 0x000000FD;
// 	PWM->PWM_CH_NUM[4].PWM_CPRD = 0x000000F8;
// 	PWM->PWM_CH_NUM[4].PWM_CDTY = 0x0000007C;
	PWM->PWM_CH_NUM[4].PWM_CPRD =1000;
   97a7a:	4b1c      	ldr	r3, [pc, #112]	; (97aec <DD_INIT_PWM+0xb4>)
   97a7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   97a80:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
	PWM->PWM_CH_NUM[4].PWM_CDTY = 500;
   97a84:	4b19      	ldr	r3, [pc, #100]	; (97aec <DD_INIT_PWM+0xb4>)
   97a86:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
   97a8a:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284


	
	//PWM->PWM_CH_NUM[5].PWM_CPRD = 0x000016b5;
	PWM->PWM_CH_NUM[5].PWM_CPRD = 28000;
   97a8e:	4b17      	ldr	r3, [pc, #92]	; (97aec <DD_INIT_PWM+0xb4>)
   97a90:	f646 5260 	movw	r2, #28000	; 0x6d60
   97a94:	f8c3 22ac 	str.w	r2, [r3, #684]	; 0x2ac
	PWM->PWM_CH_NUM[5].PWM_CDTY = 0x00000b5a;
   97a98:	4b14      	ldr	r3, [pc, #80]	; (97aec <DD_INIT_PWM+0xb4>)
   97a9a:	f640 325a 	movw	r2, #2906	; 0xb5a
   97a9e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
	
//	PWM->PWM_CH_NUM[6].PWM_CPRD = 0x00000600;
//	PWM->PWM_CH_NUM[6].PWM_CDTY = 0x00000200;

	PWM->PWM_CH_NUM[0].PWM_CPRD = 0x00000550;
   97aa2:	4b12      	ldr	r3, [pc, #72]	; (97aec <DD_INIT_PWM+0xb4>)
   97aa4:	f44f 62aa 	mov.w	r2, #1360	; 0x550
   97aa8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	//PWM->PWM_CH_NUM[0].PWM_CDTY = 0x00000000;		//0x00000514;     commented on 12-05-2017 to start with zero duty dc motor2
	PWM->PWM_CH_NUM[0].PWM_CDTY = 800;
   97aac:	4b0f      	ldr	r3, [pc, #60]	; (97aec <DD_INIT_PWM+0xb4>)
   97aae:	f44f 7248 	mov.w	r2, #800	; 0x320
   97ab2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
	
	
	
	PWM->PWM_CH_NUM[1].PWM_CPRD = 0x00001000;  // heater
   97ab6:	4b0d      	ldr	r3, [pc, #52]	; (97aec <DD_INIT_PWM+0xb4>)
   97ab8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   97abc:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	PWM->PWM_CH_NUM[1].PWM_CDTY = 0x00000800;
   97ac0:	4b0a      	ldr	r3, [pc, #40]	; (97aec <DD_INIT_PWM+0xb4>)
   97ac2:	f44f 6200 	mov.w	r2, #2048	; 0x800
   97ac6:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
	

	PWM->PWM_CH_NUM[2].PWM_CPRD = 0x00000550;
   97aca:	4b08      	ldr	r3, [pc, #32]	; (97aec <DD_INIT_PWM+0xb4>)
   97acc:	f44f 62aa 	mov.w	r2, #1360	; 0x550
   97ad0:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
	//PWM->PWM_CH_NUM[2].PWM_CDTY = 0x0000038E;
//	PWM->PWM_CH_NUM[2].PWM_CDTY = 0x00000000;		//0x000003B6;     commented on 12-05-2017 to start with zero duty   dc motor1
	PWM->PWM_CH_NUM[2].PWM_CDTY = 800;
   97ad4:	4b05      	ldr	r3, [pc, #20]	; (97aec <DD_INIT_PWM+0xb4>)
   97ad6:	f44f 7248 	mov.w	r2, #800	; 0x320
   97ada:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
//	PWM->PWM_ENA = 0x000000FF;
	PWM->PWM_ENA = 0x00000037;	                    
   97ade:	4b03      	ldr	r3, [pc, #12]	; (97aec <DD_INIT_PWM+0xb4>)
   97ae0:	2237      	movs	r2, #55	; 0x37
   97ae2:	605a      	str	r2, [r3, #4]


	
	
}
   97ae4:	46bd      	mov	sp, r7
   97ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
   97aea:	4770      	bx	lr
   97aec:	40094000 	.word	0x40094000
   97af0:	50574d00 	.word	0x50574d00
   97af4:	00070605 	.word	0x00070605
   97af8:	00070604 	.word	0x00070604

00097afc <DD_SET_DUTY>:


 uint32_t DD_SET_DUTY(const pwm_chnl CHANNEL_NUMBER,uint32_t DUTY)
 {
   97afc:	b480      	push	{r7}
   97afe:	b083      	sub	sp, #12
   97b00:	af00      	add	r7, sp, #0
   97b02:	4603      	mov	r3, r0
   97b04:	6039      	str	r1, [r7, #0]
   97b06:	71fb      	strb	r3, [r7, #7]
	// PWM->PWM_CH_NUM[CHANNEL_NUMBER].PWM_CDTYUPD = DUTY;
//	PWM->PWM_CH_NUM[CHANNEL_NUMBER].PWM_CPRD = 0x800;
	 PWM->PWM_CH_NUM[CHANNEL_NUMBER].PWM_CDTY = DUTY;
   97b08:	4a06      	ldr	r2, [pc, #24]	; (97b24 <DD_SET_DUTY+0x28>)
   97b0a:	79fb      	ldrb	r3, [r7, #7]
   97b0c:	3310      	adds	r3, #16
   97b0e:	015b      	lsls	r3, r3, #5
   97b10:	4413      	add	r3, r2
   97b12:	683a      	ldr	r2, [r7, #0]
   97b14:	605a      	str	r2, [r3, #4]
	 
	 return 0;
   97b16:	2300      	movs	r3, #0
 }
   97b18:	4618      	mov	r0, r3
   97b1a:	370c      	adds	r7, #12
   97b1c:	46bd      	mov	sp, r7
   97b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
   97b22:	4770      	bx	lr
   97b24:	40094000 	.word	0x40094000

00097b28 <DD_SET_PRDY>:
 
 uint32_t DD_SET_PRDY(const pwm_chnl CHANNEL_NUMBER,uint32_t PERIOD_VALUE)
 {
   97b28:	b480      	push	{r7}
   97b2a:	b083      	sub	sp, #12
   97b2c:	af00      	add	r7, sp, #0
   97b2e:	4603      	mov	r3, r0
   97b30:	6039      	str	r1, [r7, #0]
   97b32:	71fb      	strb	r3, [r7, #7]
	 PWM->PWM_CH_NUM[CHANNEL_NUMBER].PWM_CPRDUPD = PERIOD_VALUE;
   97b34:	4a07      	ldr	r2, [pc, #28]	; (97b54 <DD_SET_PRDY+0x2c>)
   97b36:	79fb      	ldrb	r3, [r7, #7]
   97b38:	015b      	lsls	r3, r3, #5
   97b3a:	4413      	add	r3, r2
   97b3c:	f503 7304 	add.w	r3, r3, #528	; 0x210
   97b40:	683a      	ldr	r2, [r7, #0]
   97b42:	601a      	str	r2, [r3, #0]
	// PWM->PWM_CH_NUM[CHANNEL_NUMBER].PWM_CPRD = PERIOD_VALUE;
	 
	 return 0;
   97b44:	2300      	movs	r3, #0
 }
   97b46:	4618      	mov	r0, r3
   97b48:	370c      	adds	r7, #12
   97b4a:	46bd      	mov	sp, r7
   97b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
   97b50:	4770      	bx	lr
   97b52:	bf00      	nop
   97b54:	40094000 	.word	0x40094000

00097b58 <dd_spi_set_transfer_delay>:
void dd_spi_set_delay_between_chip_select(uint32_t ul_delay) {
	SPI0->SPI_MR &= (~SPI_MR_DLYBCS_Msk);
	SPI0->SPI_MR |= SPI_MR_DLYBCS(ul_delay);
}

void dd_spi_set_transfer_delay(uint16_t ul_pcs_group_id, uint8_t uc_dlybs, uint8_t uc_dlybct)  {
   97b58:	b490      	push	{r4, r7}
   97b5a:	b082      	sub	sp, #8
   97b5c:	af00      	add	r7, sp, #0
   97b5e:	4603      	mov	r3, r0
   97b60:	80fb      	strh	r3, [r7, #6]
   97b62:	460b      	mov	r3, r1
   97b64:	717b      	strb	r3, [r7, #5]
   97b66:	4613      	mov	r3, r2
   97b68:	713b      	strb	r3, [r7, #4]
	SPI0->SPI_CSR[ul_pcs_group_id] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
   97b6a:	4910      	ldr	r1, [pc, #64]	; (97bac <dd_spi_set_transfer_delay+0x54>)
   97b6c:	88fb      	ldrh	r3, [r7, #6]
   97b6e:	480f      	ldr	r0, [pc, #60]	; (97bac <dd_spi_set_transfer_delay+0x54>)
   97b70:	88fa      	ldrh	r2, [r7, #6]
   97b72:	320c      	adds	r2, #12
   97b74:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   97b78:	b292      	uxth	r2, r2
   97b7a:	330c      	adds	r3, #12
   97b7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	SPI0->SPI_CSR[ul_pcs_group_id] |= SPI_CSR_DLYBS(uc_dlybs) | SPI_CSR_DLYBCT(uc_dlybct);
   97b80:	4c0a      	ldr	r4, [pc, #40]	; (97bac <dd_spi_set_transfer_delay+0x54>)
   97b82:	88fb      	ldrh	r3, [r7, #6]
   97b84:	4909      	ldr	r1, [pc, #36]	; (97bac <dd_spi_set_transfer_delay+0x54>)
   97b86:	88fa      	ldrh	r2, [r7, #6]
   97b88:	320c      	adds	r2, #12
   97b8a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   97b8e:	797a      	ldrb	r2, [r7, #5]
   97b90:	0412      	lsls	r2, r2, #16
   97b92:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
   97b96:	7938      	ldrb	r0, [r7, #4]
   97b98:	0600      	lsls	r0, r0, #24
   97b9a:	4302      	orrs	r2, r0
   97b9c:	430a      	orrs	r2, r1
   97b9e:	330c      	adds	r3, #12
   97ba0:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
}
   97ba4:	3708      	adds	r7, #8
   97ba6:	46bd      	mov	sp, r7
   97ba8:	bc90      	pop	{r4, r7}
   97baa:	4770      	bx	lr
   97bac:	40008000 	.word	0x40008000

00097bb0 <dd_spi_set_bits_per_transfer>:

void dd_spi_set_bits_per_transfer(uint16_t ul_pcs_group_id, uint32_t ul_bits)
{
   97bb0:	b480      	push	{r7}
   97bb2:	b083      	sub	sp, #12
   97bb4:	af00      	add	r7, sp, #0
   97bb6:	4603      	mov	r3, r0
   97bb8:	6039      	str	r1, [r7, #0]
   97bba:	80fb      	strh	r3, [r7, #6]
	SPI0->SPI_CSR[ul_pcs_group_id] &= (~SPI_CSR_BITS_Msk);
   97bbc:	490e      	ldr	r1, [pc, #56]	; (97bf8 <dd_spi_set_bits_per_transfer+0x48>)
   97bbe:	88fb      	ldrh	r3, [r7, #6]
   97bc0:	480d      	ldr	r0, [pc, #52]	; (97bf8 <dd_spi_set_bits_per_transfer+0x48>)
   97bc2:	88fa      	ldrh	r2, [r7, #6]
   97bc4:	320c      	adds	r2, #12
   97bc6:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   97bca:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
   97bce:	330c      	adds	r3, #12
   97bd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	SPI0->SPI_CSR[ul_pcs_group_id] |= ul_bits;
   97bd4:	4808      	ldr	r0, [pc, #32]	; (97bf8 <dd_spi_set_bits_per_transfer+0x48>)
   97bd6:	88fb      	ldrh	r3, [r7, #6]
   97bd8:	4907      	ldr	r1, [pc, #28]	; (97bf8 <dd_spi_set_bits_per_transfer+0x48>)
   97bda:	88fa      	ldrh	r2, [r7, #6]
   97bdc:	320c      	adds	r2, #12
   97bde:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   97be2:	683a      	ldr	r2, [r7, #0]
   97be4:	430a      	orrs	r2, r1
   97be6:	330c      	adds	r3, #12
   97be8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
   97bec:	370c      	adds	r7, #12
   97bee:	46bd      	mov	sp, r7
   97bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
   97bf4:	4770      	bx	lr
   97bf6:	bf00      	nop
   97bf8:	40008000 	.word	0x40008000

00097bfc <dd_spi_set_clock_polarity>:
		SPI0->SPI_WPMR =  (0x5350490u << 1);
	}
	
}

void dd_spi_set_clock_polarity(uint16_t ul_pcs_group_id, uint32_t ul_polarity)   {
   97bfc:	b480      	push	{r7}
   97bfe:	b083      	sub	sp, #12
   97c00:	af00      	add	r7, sp, #0
   97c02:	4603      	mov	r3, r0
   97c04:	6039      	str	r1, [r7, #0]
   97c06:	80fb      	strh	r3, [r7, #6]
	
	if (ul_polarity) {
   97c08:	683b      	ldr	r3, [r7, #0]
   97c0a:	2b00      	cmp	r3, #0
   97c0c:	d00c      	beq.n	97c28 <dd_spi_set_clock_polarity+0x2c>
		SPI0->SPI_CSR[ul_pcs_group_id] |= SPI_CSR_CPOL;
   97c0e:	490f      	ldr	r1, [pc, #60]	; (97c4c <dd_spi_set_clock_polarity+0x50>)
   97c10:	88fb      	ldrh	r3, [r7, #6]
   97c12:	480e      	ldr	r0, [pc, #56]	; (97c4c <dd_spi_set_clock_polarity+0x50>)
   97c14:	88fa      	ldrh	r2, [r7, #6]
   97c16:	320c      	adds	r2, #12
   97c18:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   97c1c:	f042 0201 	orr.w	r2, r2, #1
   97c20:	330c      	adds	r3, #12
   97c22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   97c26:	e00b      	b.n	97c40 <dd_spi_set_clock_polarity+0x44>
		} else {
		SPI0->SPI_CSR[ul_pcs_group_id] &= (~SPI_CSR_CPOL);
   97c28:	4908      	ldr	r1, [pc, #32]	; (97c4c <dd_spi_set_clock_polarity+0x50>)
   97c2a:	88fb      	ldrh	r3, [r7, #6]
   97c2c:	4807      	ldr	r0, [pc, #28]	; (97c4c <dd_spi_set_clock_polarity+0x50>)
   97c2e:	88fa      	ldrh	r2, [r7, #6]
   97c30:	320c      	adds	r2, #12
   97c32:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   97c36:	f022 0201 	bic.w	r2, r2, #1
   97c3a:	330c      	adds	r3, #12
   97c3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}	
}
   97c40:	370c      	adds	r7, #12
   97c42:	46bd      	mov	sp, r7
   97c44:	f85d 7b04 	ldr.w	r7, [sp], #4
   97c48:	4770      	bx	lr
   97c4a:	bf00      	nop
   97c4c:	40008000 	.word	0x40008000

00097c50 <dd_spi_set_clock_phase>:

void dd_spi_set_clock_phase(uint16_t ul_pcs_group_id, uint32_t ul_phase)
{
   97c50:	b480      	push	{r7}
   97c52:	b083      	sub	sp, #12
   97c54:	af00      	add	r7, sp, #0
   97c56:	4603      	mov	r3, r0
   97c58:	6039      	str	r1, [r7, #0]
   97c5a:	80fb      	strh	r3, [r7, #6]
	if (ul_phase) {
   97c5c:	683b      	ldr	r3, [r7, #0]
   97c5e:	2b00      	cmp	r3, #0
   97c60:	d00c      	beq.n	97c7c <dd_spi_set_clock_phase+0x2c>
		SPI0->SPI_CSR[ul_pcs_group_id] |= SPI_CSR_NCPHA;
   97c62:	490f      	ldr	r1, [pc, #60]	; (97ca0 <dd_spi_set_clock_phase+0x50>)
   97c64:	88fb      	ldrh	r3, [r7, #6]
   97c66:	480e      	ldr	r0, [pc, #56]	; (97ca0 <dd_spi_set_clock_phase+0x50>)
   97c68:	88fa      	ldrh	r2, [r7, #6]
   97c6a:	320c      	adds	r2, #12
   97c6c:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   97c70:	f042 0202 	orr.w	r2, r2, #2
   97c74:	330c      	adds	r3, #12
   97c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   97c7a:	e00b      	b.n	97c94 <dd_spi_set_clock_phase+0x44>
		} else {
		SPI0->SPI_CSR[ul_pcs_group_id] &= (~SPI_CSR_NCPHA);
   97c7c:	4908      	ldr	r1, [pc, #32]	; (97ca0 <dd_spi_set_clock_phase+0x50>)
   97c7e:	88fb      	ldrh	r3, [r7, #6]
   97c80:	4807      	ldr	r0, [pc, #28]	; (97ca0 <dd_spi_set_clock_phase+0x50>)
   97c82:	88fa      	ldrh	r2, [r7, #6]
   97c84:	320c      	adds	r2, #12
   97c86:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   97c8a:	f022 0202 	bic.w	r2, r2, #2
   97c8e:	330c      	adds	r3, #12
   97c90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}
}
   97c94:	370c      	adds	r7, #12
   97c96:	46bd      	mov	sp, r7
   97c98:	f85d 7b04 	ldr.w	r7, [sp], #4
   97c9c:	4770      	bx	lr
   97c9e:	bf00      	nop
   97ca0:	40008000 	.word	0x40008000

00097ca4 <dd_spi_set_baudrate_div>:

int16_t dd_spi_set_baudrate_div(uint16_t ul_pcs_group_id,uint8_t uc_baudrate_divider)
{
   97ca4:	b480      	push	{r7}
   97ca6:	b083      	sub	sp, #12
   97ca8:	af00      	add	r7, sp, #0
   97caa:	4603      	mov	r3, r0
   97cac:	460a      	mov	r2, r1
   97cae:	80fb      	strh	r3, [r7, #6]
   97cb0:	4613      	mov	r3, r2
   97cb2:	717b      	strb	r3, [r7, #5]
	/* Programming the SCBR field to 0 is forbidden */
	if (!uc_baudrate_divider)
   97cb4:	797b      	ldrb	r3, [r7, #5]
   97cb6:	2b00      	cmp	r3, #0
   97cb8:	d102      	bne.n	97cc0 <dd_spi_set_baudrate_div+0x1c>
	return -1;
   97cba:	f64f 73ff 	movw	r3, #65535	; 0xffff
   97cbe:	e01a      	b.n	97cf6 <dd_spi_set_baudrate_div+0x52>

	SPI0->SPI_CSR[ul_pcs_group_id] &= (~SPI_CSR_SCBR_Msk);
   97cc0:	4910      	ldr	r1, [pc, #64]	; (97d04 <dd_spi_set_baudrate_div+0x60>)
   97cc2:	88fb      	ldrh	r3, [r7, #6]
   97cc4:	480f      	ldr	r0, [pc, #60]	; (97d04 <dd_spi_set_baudrate_div+0x60>)
   97cc6:	88fa      	ldrh	r2, [r7, #6]
   97cc8:	320c      	adds	r2, #12
   97cca:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   97cce:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
   97cd2:	330c      	adds	r3, #12
   97cd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	SPI0->SPI_CSR[ul_pcs_group_id] |= SPI_CSR_SCBR(uc_baudrate_divider);
   97cd8:	480a      	ldr	r0, [pc, #40]	; (97d04 <dd_spi_set_baudrate_div+0x60>)
   97cda:	88fb      	ldrh	r3, [r7, #6]
   97cdc:	4909      	ldr	r1, [pc, #36]	; (97d04 <dd_spi_set_baudrate_div+0x60>)
   97cde:	88fa      	ldrh	r2, [r7, #6]
   97ce0:	320c      	adds	r2, #12
   97ce2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   97ce6:	797a      	ldrb	r2, [r7, #5]
   97ce8:	0212      	lsls	r2, r2, #8
   97cea:	b292      	uxth	r2, r2
   97cec:	430a      	orrs	r2, r1
   97cee:	330c      	adds	r3, #12
   97cf0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	return 0;
   97cf4:	2300      	movs	r3, #0
   97cf6:	b21b      	sxth	r3, r3
}
   97cf8:	4618      	mov	r0, r3
   97cfa:	370c      	adds	r7, #12
   97cfc:	46bd      	mov	sp, r7
   97cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
   97d02:	4770      	bx	lr
   97d04:	40008000 	.word	0x40008000

00097d08 <DD_SPI_SET_POT>:
{
	SPI0->SPI_MR &= (~SPI_MR_PCS_Msk);
	SPI0->SPI_MR |= ((SPI_MR_PCS_Msk & ((pcs_ul_value) << SPI_MR_PCS_Pos)));
}

void DD_SPI_SET_POT(void *p_buf, uint32_t size)  {
   97d08:	b580      	push	{r7, lr}
   97d0a:	b086      	sub	sp, #24
   97d0c:	af00      	add	r7, sp, #0
   97d0e:	6078      	str	r0, [r7, #4]
   97d10:	6039      	str	r1, [r7, #0]
	uint8_t uc_pcs;
	static uint16_t data;

	uint16_t *p_buffer;

	p_buffer = p_buf;
   97d12:	687b      	ldr	r3, [r7, #4]
   97d14:	60fb      	str	r3, [r7, #12]

	for (i = 0; i < size; i++) {
   97d16:	2300      	movs	r3, #0
   97d18:	617b      	str	r3, [r7, #20]
   97d1a:	e029      	b.n	97d70 <DD_SPI_SET_POT+0x68>
		dd_spi_write(p_buffer[i]);
   97d1c:	697b      	ldr	r3, [r7, #20]
   97d1e:	005b      	lsls	r3, r3, #1
   97d20:	68fa      	ldr	r2, [r7, #12]
   97d22:	4413      	add	r3, r2
   97d24:	881b      	ldrh	r3, [r3, #0]
   97d26:	4618      	mov	r0, r3
   97d28:	4b15      	ldr	r3, [pc, #84]	; (97d80 <DD_SPI_SET_POT+0x78>)
   97d2a:	4798      	blx	r3
		
		for (uint32_t  j=0;j<10000;j++)
   97d2c:	2300      	movs	r3, #0
   97d2e:	613b      	str	r3, [r7, #16]
   97d30:	e002      	b.n	97d38 <DD_SPI_SET_POT+0x30>
   97d32:	693b      	ldr	r3, [r7, #16]
   97d34:	3301      	adds	r3, #1
   97d36:	613b      	str	r3, [r7, #16]
   97d38:	693b      	ldr	r3, [r7, #16]
   97d3a:	f242 720f 	movw	r2, #9999	; 0x270f
   97d3e:	4293      	cmp	r3, r2
   97d40:	d9f7      	bls.n	97d32 <DD_SPI_SET_POT+0x2a>
		{
			;
		}
		/* Wait transfer done. */
		while  ( ((SPI0->SPI_SR) & SPI_SR_RDRF) == 0);
   97d42:	bf00      	nop
   97d44:	4b0f      	ldr	r3, [pc, #60]	; (97d84 <DD_SPI_SET_POT+0x7c>)
   97d46:	691b      	ldr	r3, [r3, #16]
   97d48:	f003 0301 	and.w	r3, r3, #1
   97d4c:	2b00      	cmp	r3, #0
   97d4e:	d0f9      	beq.n	97d44 <DD_SPI_SET_POT+0x3c>
		dd_spi_read(&data, &uc_pcs);
   97d50:	f107 030b 	add.w	r3, r7, #11
   97d54:	480c      	ldr	r0, [pc, #48]	; (97d88 <DD_SPI_SET_POT+0x80>)
   97d56:	4619      	mov	r1, r3
   97d58:	4b0c      	ldr	r3, [pc, #48]	; (97d8c <DD_SPI_SET_POT+0x84>)
   97d5a:	4798      	blx	r3
		p_buffer[i] = data;
   97d5c:	697b      	ldr	r3, [r7, #20]
   97d5e:	005b      	lsls	r3, r3, #1
   97d60:	68fa      	ldr	r2, [r7, #12]
   97d62:	4413      	add	r3, r2
   97d64:	4a08      	ldr	r2, [pc, #32]	; (97d88 <DD_SPI_SET_POT+0x80>)
   97d66:	8812      	ldrh	r2, [r2, #0]
   97d68:	801a      	strh	r2, [r3, #0]

	uint16_t *p_buffer;

	p_buffer = p_buf;

	for (i = 0; i < size; i++) {
   97d6a:	697b      	ldr	r3, [r7, #20]
   97d6c:	3301      	adds	r3, #1
   97d6e:	617b      	str	r3, [r7, #20]
   97d70:	697a      	ldr	r2, [r7, #20]
   97d72:	683b      	ldr	r3, [r7, #0]
   97d74:	429a      	cmp	r2, r3
   97d76:	d3d1      	bcc.n	97d1c <DD_SPI_SET_POT+0x14>
		/* Wait transfer done. */
		while  ( ((SPI0->SPI_SR) & SPI_SR_RDRF) == 0);
		dd_spi_read(&data, &uc_pcs);
		p_buffer[i] = data;
	}
}
   97d78:	3718      	adds	r7, #24
   97d7a:	46bd      	mov	sp, r7
   97d7c:	bd80      	pop	{r7, pc}
   97d7e:	bf00      	nop
   97d80:	00097e05 	.word	0x00097e05
   97d84:	40008000 	.word	0x40008000
   97d88:	20071b3e 	.word	0x20071b3e
   97d8c:	00097d91 	.word	0x00097d91

00097d90 <dd_spi_read>:

spi_status_t dd_spi_read(uint16_t *us_data, uint8_t *p_pcs) {
   97d90:	b480      	push	{r7}
   97d92:	b085      	sub	sp, #20
   97d94:	af00      	add	r7, sp, #0
   97d96:	6078      	str	r0, [r7, #4]
   97d98:	6039      	str	r1, [r7, #0]
	uint32_t timeout = SPI_TIMEOUT;
   97d9a:	f643 2398 	movw	r3, #15000	; 0x3a98
   97d9e:	60fb      	str	r3, [r7, #12]
	static uint32_t reg_value;

	while (!(SPI0->SPI_SR & SPI_SR_RDRF)) {
   97da0:	e006      	b.n	97db0 <dd_spi_read+0x20>
		if (!timeout--) {
   97da2:	68fb      	ldr	r3, [r7, #12]
   97da4:	1e5a      	subs	r2, r3, #1
   97da6:	60fa      	str	r2, [r7, #12]
   97da8:	2b00      	cmp	r3, #0
   97daa:	d101      	bne.n	97db0 <dd_spi_read+0x20>
			return SPI_ERROR_TIMEOUT;
   97dac:	2301      	movs	r3, #1
   97dae:	e01d      	b.n	97dec <dd_spi_read+0x5c>

spi_status_t dd_spi_read(uint16_t *us_data, uint8_t *p_pcs) {
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(SPI0->SPI_SR & SPI_SR_RDRF)) {
   97db0:	4b12      	ldr	r3, [pc, #72]	; (97dfc <dd_spi_read+0x6c>)
   97db2:	691b      	ldr	r3, [r3, #16]
   97db4:	f003 0301 	and.w	r3, r3, #1
   97db8:	2b00      	cmp	r3, #0
   97dba:	d0f2      	beq.n	97da2 <dd_spi_read+0x12>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	reg_value = SPI0->SPI_RDR;
   97dbc:	4b0f      	ldr	r3, [pc, #60]	; (97dfc <dd_spi_read+0x6c>)
   97dbe:	689b      	ldr	r3, [r3, #8]
   97dc0:	4a0f      	ldr	r2, [pc, #60]	; (97e00 <dd_spi_read+0x70>)
   97dc2:	6013      	str	r3, [r2, #0]
	if ((SPI0->SPI_MR & SPI_MR_PS)) {
   97dc4:	4b0d      	ldr	r3, [pc, #52]	; (97dfc <dd_spi_read+0x6c>)
   97dc6:	685b      	ldr	r3, [r3, #4]
   97dc8:	f003 0302 	and.w	r3, r3, #2
   97dcc:	2b00      	cmp	r3, #0
   97dce:	d007      	beq.n	97de0 <dd_spi_read+0x50>
		*p_pcs = (uint8_t) ((reg_value & SPI_RDR_PCS_Msk) >> SPI_RDR_PCS_Pos);
   97dd0:	4b0b      	ldr	r3, [pc, #44]	; (97e00 <dd_spi_read+0x70>)
   97dd2:	681b      	ldr	r3, [r3, #0]
   97dd4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
   97dd8:	0c1b      	lsrs	r3, r3, #16
   97dda:	b2da      	uxtb	r2, r3
   97ddc:	683b      	ldr	r3, [r7, #0]
   97dde:	701a      	strb	r2, [r3, #0]
	}
	*us_data = (uint16_t) (reg_value & SPI_RDR_RD_Msk);
   97de0:	4b07      	ldr	r3, [pc, #28]	; (97e00 <dd_spi_read+0x70>)
   97de2:	681b      	ldr	r3, [r3, #0]
   97de4:	b29a      	uxth	r2, r3
   97de6:	687b      	ldr	r3, [r7, #4]
   97de8:	801a      	strh	r2, [r3, #0]

	return SPI_OK;
   97dea:	2300      	movs	r3, #0
   97dec:	b25b      	sxtb	r3, r3
}
   97dee:	4618      	mov	r0, r3
   97df0:	3714      	adds	r7, #20
   97df2:	46bd      	mov	sp, r7
   97df4:	f85d 7b04 	ldr.w	r7, [sp], #4
   97df8:	4770      	bx	lr
   97dfa:	bf00      	nop
   97dfc:	40008000 	.word	0x40008000
   97e00:	20071b40 	.word	0x20071b40

00097e04 <dd_spi_write>:

spi_status_t dd_spi_write(uint16_t us_data)  {
   97e04:	b480      	push	{r7}
   97e06:	b085      	sub	sp, #20
   97e08:	af00      	add	r7, sp, #0
   97e0a:	4603      	mov	r3, r0
   97e0c:	80fb      	strh	r3, [r7, #6]
	uint32_t timeout = SPI_TIMEOUT;
   97e0e:	f643 2398 	movw	r3, #15000	; 0x3a98
   97e12:	60fb      	str	r3, [r7, #12]
	uint32_t value;

	while (!(SPI0->SPI_SR & SPI_SR_TDRE)) {
   97e14:	e006      	b.n	97e24 <dd_spi_write+0x20>
		if (!timeout--) {
   97e16:	68fb      	ldr	r3, [r7, #12]
   97e18:	1e5a      	subs	r2, r3, #1
   97e1a:	60fa      	str	r2, [r7, #12]
   97e1c:	2b00      	cmp	r3, #0
   97e1e:	d101      	bne.n	97e24 <dd_spi_write+0x20>
			return SPI_ERROR_TIMEOUT;
   97e20:	2301      	movs	r3, #1
   97e22:	e00b      	b.n	97e3c <dd_spi_write+0x38>

spi_status_t dd_spi_write(uint16_t us_data)  {
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(SPI0->SPI_SR & SPI_SR_TDRE)) {
   97e24:	4b09      	ldr	r3, [pc, #36]	; (97e4c <dd_spi_write+0x48>)
   97e26:	691b      	ldr	r3, [r3, #16]
   97e28:	f003 0302 	and.w	r3, r3, #2
   97e2c:	2b00      	cmp	r3, #0
   97e2e:	d0f2      	beq.n	97e16 <dd_spi_write+0x12>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}
	value = SPI_TDR_TD(us_data);
   97e30:	88fb      	ldrh	r3, [r7, #6]
   97e32:	60bb      	str	r3, [r7, #8]
	SPI0->SPI_TDR = value;
   97e34:	4a05      	ldr	r2, [pc, #20]	; (97e4c <dd_spi_write+0x48>)
   97e36:	68bb      	ldr	r3, [r7, #8]
   97e38:	60d3      	str	r3, [r2, #12]

	return SPI_OK;
   97e3a:	2300      	movs	r3, #0
   97e3c:	b25b      	sxtb	r3, r3
}
   97e3e:	4618      	mov	r0, r3
   97e40:	3714      	adds	r7, #20
   97e42:	46bd      	mov	sp, r7
   97e44:	f85d 7b04 	ldr.w	r7, [sp], #4
   97e48:	4770      	bx	lr
   97e4a:	bf00      	nop
   97e4c:	40008000 	.word	0x40008000

00097e50 <DD_INIT_SPI>:
}
}

//void dd_spi_master_initialize(void)
void DD_INIT_SPI()
{
   97e50:	b580      	push	{r7, lr}
   97e52:	af00      	add	r7, sp, #0
	PIOA->PIO_WPMR = 0x50494F00;
   97e54:	4b39      	ldr	r3, [pc, #228]	; (97f3c <DD_INIT_SPI+0xec>)
   97e56:	4a3a      	ldr	r2, [pc, #232]	; (97f40 <DD_INIT_SPI+0xf0>)
   97e58:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	//PIOA->PIO_PER  = 0x10000000;
	//PIOA->PIO_OER  = 0x10000000;         //CS0
	PIOA->PIO_PDR  = 0x1E000000;         //MISO,MOSI,SCK
   97e5c:	4b37      	ldr	r3, [pc, #220]	; (97f3c <DD_INIT_SPI+0xec>)
   97e5e:	f04f 52f0 	mov.w	r2, #503316480	; 0x1e000000
   97e62:	605a      	str	r2, [r3, #4]
//	PIOA->PIO_ABSR = 0x00000000;
	
	
	SPI0->SPI_WPMR = 0x53504900;         // SPI_WPMR_WPEN
   97e64:	4b37      	ldr	r3, [pc, #220]	; (97f44 <DD_INIT_SPI+0xf4>)
   97e66:	4a38      	ldr	r2, [pc, #224]	; (97f48 <DD_INIT_SPI+0xf8>)
   97e68:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	//puts("-I- Initialize SPI as master\r");
	//dd_spi_set_writeprotect(0);
	
	PMC->PMC_WPMR = 0x504D4300;
   97e6c:	4b37      	ldr	r3, [pc, #220]	; (97f4c <DD_INIT_SPI+0xfc>)
   97e6e:	4a38      	ldr	r2, [pc, #224]	; (97f50 <DD_INIT_SPI+0x100>)
   97e70:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	spi_enable_clock(SPI_MASTER_BASE);
   97e74:	4833      	ldr	r0, [pc, #204]	; (97f44 <DD_INIT_SPI+0xf4>)
   97e76:	4b37      	ldr	r3, [pc, #220]	; (97f54 <DD_INIT_SPI+0x104>)
   97e78:	4798      	blx	r3
	
	
	
	SPI0->SPI_CR = SPI_CR_SPIDIS;
   97e7a:	4b32      	ldr	r3, [pc, #200]	; (97f44 <DD_INIT_SPI+0xf4>)
   97e7c:	2202      	movs	r2, #2
   97e7e:	601a      	str	r2, [r3, #0]
	//spi_disable(SPI_MASTER_BASE);
	
	SPI0->SPI_CR = SPI_CR_SWRST;
   97e80:	4b30      	ldr	r3, [pc, #192]	; (97f44 <DD_INIT_SPI+0xf4>)
   97e82:	2280      	movs	r2, #128	; 0x80
   97e84:	601a      	str	r2, [r3, #0]
	//spi_reset(SPI_MASTER_BASE);
	
	SPI0->SPI_CR = SPI_CR_LASTXFER;
   97e86:	4b2f      	ldr	r3, [pc, #188]	; (97f44 <DD_INIT_SPI+0xf4>)
   97e88:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   97e8c:	601a      	str	r2, [r3, #0]
	//spi_set_lastxfer(SPI_MASTER_BASE);
	
	SPI0->SPI_MR |= SPI_MR_MSTR;
   97e8e:	4a2d      	ldr	r2, [pc, #180]	; (97f44 <DD_INIT_SPI+0xf4>)
   97e90:	4b2c      	ldr	r3, [pc, #176]	; (97f44 <DD_INIT_SPI+0xf4>)
   97e92:	685b      	ldr	r3, [r3, #4]
   97e94:	f043 0301 	orr.w	r3, r3, #1
   97e98:	6053      	str	r3, [r2, #4]
	//spi_set_master_mode(SPI_MASTER_BASE);
	
	SPI0->SPI_MR |= SPI_MR_MODFDIS;
   97e9a:	4a2a      	ldr	r2, [pc, #168]	; (97f44 <DD_INIT_SPI+0xf4>)
   97e9c:	4b29      	ldr	r3, [pc, #164]	; (97f44 <DD_INIT_SPI+0xf4>)
   97e9e:	685b      	ldr	r3, [r3, #4]
   97ea0:	f043 0310 	orr.w	r3, r3, #16
   97ea4:	6053      	str	r3, [r2, #4]
	
	
	
	
	//chip selection procedure done here
	SPI0->SPI_MR &= (~SPI_MR_PS); // SPI SET FIXED PERIPHERAL.	/ 	SPI0->SPI_MR &= (~SPI_MR_PCSDEC); // The chip selects are directly connected to a peripheral device.
   97ea6:	4a27      	ldr	r2, [pc, #156]	; (97f44 <DD_INIT_SPI+0xf4>)
   97ea8:	4b26      	ldr	r3, [pc, #152]	; (97f44 <DD_INIT_SPI+0xf4>)
   97eaa:	685b      	ldr	r3, [r3, #4]
   97eac:	f023 0302 	bic.w	r3, r3, #2
   97eb0:	6053      	str	r3, [r2, #4]
	SPI0->SPI_MR &= (~SPI_MR_PCS_Msk);
   97eb2:	4a24      	ldr	r2, [pc, #144]	; (97f44 <DD_INIT_SPI+0xf4>)
   97eb4:	4b23      	ldr	r3, [pc, #140]	; (97f44 <DD_INIT_SPI+0xf4>)
   97eb6:	685b      	ldr	r3, [r3, #4]
   97eb8:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
   97ebc:	6053      	str	r3, [r2, #4]
	SPI0->SPI_MR &= (~SPI_MR_PCSDEC);
   97ebe:	4a21      	ldr	r2, [pc, #132]	; (97f44 <DD_INIT_SPI+0xf4>)
   97ec0:	4b20      	ldr	r3, [pc, #128]	; (97f44 <DD_INIT_SPI+0xf4>)
   97ec2:	685b      	ldr	r3, [r3, #4]
   97ec4:	f023 0304 	bic.w	r3, r3, #4
   97ec8:	6053      	str	r3, [r2, #4]
	SPI0->SPI_MR |= SPI_MR_PCS(SPI_CHIP_PCS);
   97eca:	491e      	ldr	r1, [pc, #120]	; (97f44 <DD_INIT_SPI+0xf4>)
   97ecc:	4b1d      	ldr	r3, [pc, #116]	; (97f44 <DD_INIT_SPI+0xf4>)
   97ece:	685a      	ldr	r2, [r3, #4]
   97ed0:	4b21      	ldr	r3, [pc, #132]	; (97f58 <DD_INIT_SPI+0x108>)
   97ed2:	781b      	ldrb	r3, [r3, #0]
   97ed4:	4618      	mov	r0, r3
   97ed6:	2301      	movs	r3, #1
   97ed8:	4083      	lsls	r3, r0
   97eda:	43db      	mvns	r3, r3
   97edc:	f003 030f 	and.w	r3, r3, #15
   97ee0:	041b      	lsls	r3, r3, #16
   97ee2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
   97ee6:	4313      	orrs	r3, r2
   97ee8:	604b      	str	r3, [r1, #4]
	// 	SPI0->SPI_MR = 0x00000001;
	// 	SPI0->SPI_CSR = 0x10800080;
	
	
	//spi_set_peripheral_chip_select_value(SPI_MASTER_BASE, SPI_CHIP_PCS);
	dd_spi_set_clock_polarity(SPI_CHIP_SEL, SPI_CLK_POLARITY_0);
   97eea:	4b1b      	ldr	r3, [pc, #108]	; (97f58 <DD_INIT_SPI+0x108>)
   97eec:	781b      	ldrb	r3, [r3, #0]
   97eee:	b29b      	uxth	r3, r3
   97ef0:	4618      	mov	r0, r3
   97ef2:	2100      	movs	r1, #0
   97ef4:	4b19      	ldr	r3, [pc, #100]	; (97f5c <DD_INIT_SPI+0x10c>)
   97ef6:	4798      	blx	r3
	dd_spi_set_clock_phase(SPI_CHIP_SEL, SPI_CLK_PHASE_0);
   97ef8:	4b17      	ldr	r3, [pc, #92]	; (97f58 <DD_INIT_SPI+0x108>)
   97efa:	781b      	ldrb	r3, [r3, #0]
   97efc:	b29b      	uxth	r3, r3
   97efe:	4618      	mov	r0, r3
   97f00:	2100      	movs	r1, #0
   97f02:	4b17      	ldr	r3, [pc, #92]	; (97f60 <DD_INIT_SPI+0x110>)
   97f04:	4798      	blx	r3
	dd_spi_set_bits_per_transfer(SPI_CHIP_SEL,SPI_CSR_BITS_16_BIT);
   97f06:	4b14      	ldr	r3, [pc, #80]	; (97f58 <DD_INIT_SPI+0x108>)
   97f08:	781b      	ldrb	r3, [r3, #0]
   97f0a:	b29b      	uxth	r3, r3
   97f0c:	4618      	mov	r0, r3
   97f0e:	2180      	movs	r1, #128	; 0x80
   97f10:	4b14      	ldr	r3, [pc, #80]	; (97f64 <DD_INIT_SPI+0x114>)
   97f12:	4798      	blx	r3
	dd_spi_set_baudrate_div(SPI_CHIP_SEL, 0xff );	//(sysclk_get_peripheral_hz()/ gs_ul_spi_clock)
   97f14:	4b10      	ldr	r3, [pc, #64]	; (97f58 <DD_INIT_SPI+0x108>)
   97f16:	781b      	ldrb	r3, [r3, #0]
   97f18:	b29b      	uxth	r3, r3
   97f1a:	4618      	mov	r0, r3
   97f1c:	21ff      	movs	r1, #255	; 0xff
   97f1e:	4b12      	ldr	r3, [pc, #72]	; (97f68 <DD_INIT_SPI+0x118>)
   97f20:	4798      	blx	r3
	dd_spi_set_transfer_delay(SPI_CHIP_SEL, SPI_DLYBS,SPI_DLYBCT);
   97f22:	4b0d      	ldr	r3, [pc, #52]	; (97f58 <DD_INIT_SPI+0x108>)
   97f24:	781b      	ldrb	r3, [r3, #0]
   97f26:	b29b      	uxth	r3, r3
   97f28:	4618      	mov	r0, r3
   97f2a:	2180      	movs	r1, #128	; 0x80
   97f2c:	2210      	movs	r2, #16
   97f2e:	4b0f      	ldr	r3, [pc, #60]	; (97f6c <DD_INIT_SPI+0x11c>)
   97f30:	4798      	blx	r3
	SPI0->SPI_CR = SPI_CR_SPIEN;
   97f32:	4b04      	ldr	r3, [pc, #16]	; (97f44 <DD_INIT_SPI+0xf4>)
   97f34:	2201      	movs	r2, #1
   97f36:	601a      	str	r2, [r3, #0]
}
   97f38:	bd80      	pop	{r7, pc}
   97f3a:	bf00      	nop
   97f3c:	400e0e00 	.word	0x400e0e00
   97f40:	50494f00 	.word	0x50494f00
   97f44:	40008000 	.word	0x40008000
   97f48:	53504900 	.word	0x53504900
   97f4c:	400e0600 	.word	0x400e0600
   97f50:	504d4300 	.word	0x504d4300
   97f54:	000805cd 	.word	0x000805cd
   97f58:	20071b3c 	.word	0x20071b3c
   97f5c:	00097bfd 	.word	0x00097bfd
   97f60:	00097c51 	.word	0x00097c51
   97f64:	00097bb1 	.word	0x00097bb1
   97f68:	00097ca5 	.word	0x00097ca5
   97f6c:	00097b59 	.word	0x00097b59

00097f70 <DD_ENABLE_BYPASS>:
//void BC_Switch1(void);
//void BC_Switch2(void);


uint8_t DD_ENABLE_BYPASS()
{
   97f70:	b580      	push	{r7, lr}
   97f72:	af00      	add	r7, sp, #0
				DD_SET_VALVE (VALVE_ID15);
   97f74:	200f      	movs	r0, #15
   97f76:	4b07      	ldr	r3, [pc, #28]	; (97f94 <DD_ENABLE_BYPASS+0x24>)
   97f78:	4798      	blx	r3
				DD_RESET_VALVE (VALVE_ID13);
   97f7a:	200d      	movs	r0, #13
   97f7c:	4b06      	ldr	r3, [pc, #24]	; (97f98 <DD_ENABLE_BYPASS+0x28>)
   97f7e:	4798      	blx	r3
				DD_RESET_VALVE (VALVE_ID14);
   97f80:	200e      	movs	r0, #14
   97f82:	4b05      	ldr	r3, [pc, #20]	; (97f98 <DD_ENABLE_BYPASS+0x28>)
   97f84:	4798      	blx	r3
				ByPass = true;
   97f86:	4b05      	ldr	r3, [pc, #20]	; (97f9c <DD_ENABLE_BYPASS+0x2c>)
   97f88:	2201      	movs	r2, #1
   97f8a:	701a      	strb	r2, [r3, #0]
	
	return 0;
   97f8c:	2300      	movs	r3, #0
}
   97f8e:	4618      	mov	r0, r3
   97f90:	bd80      	pop	{r7, pc}
   97f92:	bf00      	nop
   97f94:	00098539 	.word	0x00098539
   97f98:	000985f9 	.word	0x000985f9
   97f9c:	20071b48 	.word	0x20071b48

00097fa0 <DD_DISABLE_BYPASS>:
uint8_t DD_DISABLE_BYPASS()
{
   97fa0:	b580      	push	{r7, lr}
   97fa2:	af00      	add	r7, sp, #0
				DD_RESET_VALVE (VALVE_ID15);
   97fa4:	200f      	movs	r0, #15
   97fa6:	4b07      	ldr	r3, [pc, #28]	; (97fc4 <DD_DISABLE_BYPASS+0x24>)
   97fa8:	4798      	blx	r3
				DD_SET_VALVE (VALVE_ID13);
   97faa:	200d      	movs	r0, #13
   97fac:	4b06      	ldr	r3, [pc, #24]	; (97fc8 <DD_DISABLE_BYPASS+0x28>)
   97fae:	4798      	blx	r3
				DD_SET_VALVE (VALVE_ID14);
   97fb0:	200e      	movs	r0, #14
   97fb2:	4b05      	ldr	r3, [pc, #20]	; (97fc8 <DD_DISABLE_BYPASS+0x28>)
   97fb4:	4798      	blx	r3
				ByPass = false;
   97fb6:	4b05      	ldr	r3, [pc, #20]	; (97fcc <DD_DISABLE_BYPASS+0x2c>)
   97fb8:	2200      	movs	r2, #0
   97fba:	701a      	strb	r2, [r3, #0]
	
	return 0;
   97fbc:	2300      	movs	r3, #0
}
   97fbe:	4618      	mov	r0, r3
   97fc0:	bd80      	pop	{r7, pc}
   97fc2:	bf00      	nop
   97fc4:	000985f9 	.word	0x000985f9
   97fc8:	00098539 	.word	0x00098539
   97fcc:	20071b48 	.word	0x20071b48

00097fd0 <DD_ENABLE_LOOPBACK>:


uint8_t DD_ENABLE_LOOPBACK()
{
   97fd0:	b580      	push	{r7, lr}
   97fd2:	af00      	add	r7, sp, #0
	
	LoopBack = true;
   97fd4:	4b05      	ldr	r3, [pc, #20]	; (97fec <DD_ENABLE_LOOPBACK+0x1c>)
   97fd6:	2201      	movs	r2, #1
   97fd8:	701a      	strb	r2, [r3, #0]
				DD_SET_VALVE (VALVE_ID16);
   97fda:	2010      	movs	r0, #16
   97fdc:	4b04      	ldr	r3, [pc, #16]	; (97ff0 <DD_ENABLE_LOOPBACK+0x20>)
   97fde:	4798      	blx	r3
				DD_RESET_VALVE (VALVE_ID18);
   97fe0:	2012      	movs	r0, #18
   97fe2:	4b04      	ldr	r3, [pc, #16]	; (97ff4 <DD_ENABLE_LOOPBACK+0x24>)
   97fe4:	4798      	blx	r3
				
	return 0;
   97fe6:	2300      	movs	r3, #0
}
   97fe8:	4618      	mov	r0, r3
   97fea:	bd80      	pop	{r7, pc}
   97fec:	20071b49 	.word	0x20071b49
   97ff0:	00098539 	.word	0x00098539
   97ff4:	000985f9 	.word	0x000985f9

00097ff8 <DD_DISABLE_LOOPBACK>:
uint8_t DD_DISABLE_LOOPBACK()
{
   97ff8:	b580      	push	{r7, lr}
   97ffa:	af00      	add	r7, sp, #0
	
	LoopBack = false;
   97ffc:	4b05      	ldr	r3, [pc, #20]	; (98014 <DD_DISABLE_LOOPBACK+0x1c>)
   97ffe:	2200      	movs	r2, #0
   98000:	701a      	strb	r2, [r3, #0]
				DD_RESET_VALVE (VALVE_ID16);
   98002:	2010      	movs	r0, #16
   98004:	4b04      	ldr	r3, [pc, #16]	; (98018 <DD_DISABLE_LOOPBACK+0x20>)
   98006:	4798      	blx	r3
				DD_SET_VALVE (VALVE_ID18);
   98008:	2012      	movs	r0, #18
   9800a:	4b04      	ldr	r3, [pc, #16]	; (9801c <DD_DISABLE_LOOPBACK+0x24>)
   9800c:	4798      	blx	r3
	return 0;
   9800e:	2300      	movs	r3, #0
}
   98010:	4618      	mov	r0, r3
   98012:	bd80      	pop	{r7, pc}
   98014:	20071b49 	.word	0x20071b49
   98018:	000985f9 	.word	0x000985f9
   9801c:	00098539 	.word	0x00098539

00098020 <DD_SET_PUMP>:
uint8_t DD_SET_PUMP(sv_pumptype id_pump)
{
   98020:	b580      	push	{r7, lr}
   98022:	b084      	sub	sp, #16
   98024:	af00      	add	r7, sp, #0
   98026:	4603      	mov	r3, r0
   98028:	71fb      	strb	r3, [r7, #7]
	
	uint32_t p_io,peri;
	

	switch (id_pump)
   9802a:	79fb      	ldrb	r3, [r7, #7]
   9802c:	3b01      	subs	r3, #1
   9802e:	2b04      	cmp	r3, #4
   98030:	d858      	bhi.n	980e4 <DD_SET_PUMP+0xc4>
   98032:	a201      	add	r2, pc, #4	; (adr r2, 98038 <DD_SET_PUMP+0x18>)
   98034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   98038:	0009804d 	.word	0x0009804d
   9803c:	00098071 	.word	0x00098071
   98040:	000980e5 	.word	0x000980e5
   98044:	00098095 	.word	0x00098095
   98048:	000980cb 	.word	0x000980cb
	{
		case DCMOTOR1:  // DC MOTOR 1
		p_io = 20;
   9804c:	2314      	movs	r3, #20
   9804e:	60fb      	str	r3, [r7, #12]
		peri = PA;
   98050:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   98054:	60bb      	str	r3, [r7, #8]
		PWM->PWM_ENA =0x00000004;
   98056:	4b26      	ldr	r3, [pc, #152]	; (980f0 <DD_SET_PUMP+0xd0>)
   98058:	2204      	movs	r2, #4
   9805a:	605a      	str	r2, [r3, #4]
		gpio_configure_pin(PIN_PWM_LED5_GPIO,PIN_PWM_LED5_FLAGS);
   9805c:	2014      	movs	r0, #20
   9805e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   98062:	4b24      	ldr	r3, [pc, #144]	; (980f4 <DD_SET_PUMP+0xd4>)
   98064:	4798      	blx	r3
		DD_EN_PERI_AND_SET_PIO(peri,p_io);
   98066:	68b8      	ldr	r0, [r7, #8]
   98068:	68f9      	ldr	r1, [r7, #12]
   9806a:	4b23      	ldr	r3, [pc, #140]	; (980f8 <DD_SET_PUMP+0xd8>)
   9806c:	4798      	blx	r3
		//DD_SET_PIO(peri,p_io);
		break;
   9806e:	e039      	b.n	980e4 <DD_SET_PUMP+0xc4>
		
		case DCMOTOR2: // DC MOTOR 2
		p_io = 21;
   98070:	2315      	movs	r3, #21
   98072:	60fb      	str	r3, [r7, #12]
		peri = PA;
   98074:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   98078:	60bb      	str	r3, [r7, #8]
		PWM->PWM_ENA =0x00000001;
   9807a:	4b1d      	ldr	r3, [pc, #116]	; (980f0 <DD_SET_PUMP+0xd0>)
   9807c:	2201      	movs	r2, #1
   9807e:	605a      	str	r2, [r3, #4]
		gpio_configure_pin(PIN_PWM_LED3_GPIO,PIN_PWM_LED3_FLAGS);
   98080:	2015      	movs	r0, #21
   98082:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   98086:	4b1b      	ldr	r3, [pc, #108]	; (980f4 <DD_SET_PUMP+0xd4>)
   98088:	4798      	blx	r3
		DD_EN_PERI_AND_SET_PIO(peri,p_io);
   9808a:	68b8      	ldr	r0, [r7, #8]
   9808c:	68f9      	ldr	r1, [r7, #12]
   9808e:	4b1a      	ldr	r3, [pc, #104]	; (980f8 <DD_SET_PUMP+0xd8>)
   98090:	4798      	blx	r3
		//DD_SET_PIO(peri,p_io);
		break;
   98092:	e027      	b.n	980e4 <DD_SET_PUMP+0xc4>
		case BLOODPUMP: //BLOOD PUMP
	
		break;
		
		case UFPUMP: // UF PUMP
		p_io = 22;
   98094:	2316      	movs	r3, #22
   98096:	60fb      	str	r3, [r7, #12]
		peri = PC;
   98098:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   9809c:	60bb      	str	r3, [r7, #8]
		DD_RESET_PIO(peri,p_io);
   9809e:	68b8      	ldr	r0, [r7, #8]
   980a0:	68f9      	ldr	r1, [r7, #12]
   980a2:	4b16      	ldr	r3, [pc, #88]	; (980fc <DD_SET_PUMP+0xdc>)
   980a4:	4798      	blx	r3
		PWM->PWM_ENA =0x00000020;
   980a6:	4b12      	ldr	r3, [pc, #72]	; (980f0 <DD_SET_PUMP+0xd0>)
   980a8:	2220      	movs	r2, #32
   980aa:	605a      	str	r2, [r3, #4]
		gpio_configure_pin(PIN_PWM_LED1_GPIO,PIN_PWM_LED1_FLAGS);
   980ac:	2056      	movs	r0, #86	; 0x56
   980ae:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   980b2:	4b10      	ldr	r3, [pc, #64]	; (980f4 <DD_SET_PUMP+0xd4>)
   980b4:	4798      	blx	r3
		
		p_io = 15;
   980b6:	230f      	movs	r3, #15
   980b8:	60fb      	str	r3, [r7, #12]
		peri = PA;
   980ba:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   980be:	60bb      	str	r3, [r7, #8]
		DD_RESET_PIO(peri,p_io);
   980c0:	68b8      	ldr	r0, [r7, #8]
   980c2:	68f9      	ldr	r1, [r7, #12]
   980c4:	4b0d      	ldr	r3, [pc, #52]	; (980fc <DD_SET_PUMP+0xdc>)
   980c6:	4798      	blx	r3
		break;
   980c8:	e00c      	b.n	980e4 <DD_SET_PUMP+0xc4>
		
		case HEPARINPUMP: // HEPARIN PUMP

		PWM->PWM_ENA =0x00000010;
   980ca:	4b09      	ldr	r3, [pc, #36]	; (980f0 <DD_SET_PUMP+0xd0>)
   980cc:	2210      	movs	r2, #16
   980ce:	605a      	str	r2, [r3, #4]
//		gpio_configure_pin(PIN_PWM_LED0_GPIO,PIN_PWM_LED0_FLAGS);
		p_io = 2;
   980d0:	2302      	movs	r3, #2
   980d2:	60fb      	str	r3, [r7, #12]
		peri = PD;
   980d4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   980d8:	60bb      	str	r3, [r7, #8]
		DD_RESET_PIO(peri,p_io);
   980da:	68b8      	ldr	r0, [r7, #8]
   980dc:	68f9      	ldr	r1, [r7, #12]
   980de:	4b07      	ldr	r3, [pc, #28]	; (980fc <DD_SET_PUMP+0xdc>)
   980e0:	4798      	blx	r3

		break;
   980e2:	bf00      	nop
				
	}
	
	
	
	return 0;
   980e4:	2300      	movs	r3, #0
}
   980e6:	4618      	mov	r0, r3
   980e8:	3710      	adds	r7, #16
   980ea:	46bd      	mov	sp, r7
   980ec:	bd80      	pop	{r7, pc}
   980ee:	bf00      	nop
   980f0:	40094000 	.word	0x40094000
   980f4:	0009a869 	.word	0x0009a869
   980f8:	00096fcd 	.word	0x00096fcd
   980fc:	000970d5 	.word	0x000970d5

00098100 <DD_SET_HEATER>:
uint8_t DD_SET_HEATER()
{
   98100:	b580      	push	{r7, lr}
   98102:	b082      	sub	sp, #8
   98104:	af00      	add	r7, sp, #0
	uint32_t p_io,peri;
	
	p_io = 28;
   98106:	231c      	movs	r3, #28
   98108:	607b      	str	r3, [r7, #4]
	peri = PC;                               // tURN ON SAFETY RELAY  WAIT FOR 100ms BEFORE TRIAC (pwm) ON 
   9810a:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   9810e:	603b      	str	r3, [r7, #0]
	DD_SET_PIO(peri,p_io);
   98110:	6838      	ldr	r0, [r7, #0]
   98112:	6879      	ldr	r1, [r7, #4]
   98114:	4b0d      	ldr	r3, [pc, #52]	; (9814c <DD_SET_HEATER+0x4c>)
   98116:	4798      	blx	r3
	cl_wait(100);
   98118:	2064      	movs	r0, #100	; 0x64
   9811a:	4b0d      	ldr	r3, [pc, #52]	; (98150 <DD_SET_HEATER+0x50>)
   9811c:	4798      	blx	r3
	
	PWM->PWM_ENA =0x00000002;
   9811e:	4b0d      	ldr	r3, [pc, #52]	; (98154 <DD_SET_HEATER+0x54>)
   98120:	2202      	movs	r2, #2
   98122:	605a      	str	r2, [r3, #4]
	p_io = 12;
   98124:	230c      	movs	r3, #12
   98126:	607b      	str	r3, [r7, #4]
	peri = PA;
   98128:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   9812c:	603b      	str	r3, [r7, #0]
	//PIOA->PIO_ABSR = 0x00390000;            // TURN ON pwm ( TRIAC) AFTER 100ms DELAY
	PIOA->PIO_PDR = 1<<p_io;
   9812e:	4a0a      	ldr	r2, [pc, #40]	; (98158 <DD_SET_HEATER+0x58>)
   98130:	687b      	ldr	r3, [r7, #4]
   98132:	2101      	movs	r1, #1
   98134:	fa01 f303 	lsl.w	r3, r1, r3
   98138:	6053      	str	r3, [r2, #4]
	DD_EN_PERI_AND_SET_PIO(peri,p_io);
   9813a:	6838      	ldr	r0, [r7, #0]
   9813c:	6879      	ldr	r1, [r7, #4]
   9813e:	4b07      	ldr	r3, [pc, #28]	; (9815c <DD_SET_HEATER+0x5c>)
   98140:	4798      	blx	r3
	
	
	
	//gpio_configure_pin(PIN_PWM_LED4_GPIO,PIN_PWM_LED4_FLAGS);
	
	return 0;
   98142:	2300      	movs	r3, #0
}
   98144:	4618      	mov	r0, r3
   98146:	3708      	adds	r7, #8
   98148:	46bd      	mov	sp, r7
   9814a:	bd80      	pop	{r7, pc}
   9814c:	00097051 	.word	0x00097051
   98150:	00093195 	.word	0x00093195
   98154:	40094000 	.word	0x40094000
   98158:	400e0e00 	.word	0x400e0e00
   9815c:	00096fcd 	.word	0x00096fcd

00098160 <DD_RESET_HEATER>:

uint8_t DD_RESET_HEATER()
{
   98160:	b580      	push	{r7, lr}
   98162:	b082      	sub	sp, #8
   98164:	af00      	add	r7, sp, #0
	uint32_t p_io,peri;
	
	PWM->PWM_DIS =0x00000002;
   98166:	4b11      	ldr	r3, [pc, #68]	; (981ac <DD_RESET_HEATER+0x4c>)
   98168:	2202      	movs	r2, #2
   9816a:	609a      	str	r2, [r3, #8]
	//gpio_configure_pin(PIN_PWM_LED4_GPIO,PIN_PWM_LED4_FLAGS);
	
	
	p_io = 12;
   9816c:	230c      	movs	r3, #12
   9816e:	607b      	str	r3, [r7, #4]
	peri = PA;                                        // TURN OFF pwm ( TRIAC) AFTER 100ms DELAY
   98170:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   98174:	603b      	str	r3, [r7, #0]
	//PIOA->PIO_ABSR = 0x00390000;
	PIOA->PIO_PDR = 1<<p_io;
   98176:	4a0e      	ldr	r2, [pc, #56]	; (981b0 <DD_RESET_HEATER+0x50>)
   98178:	687b      	ldr	r3, [r7, #4]
   9817a:	2101      	movs	r1, #1
   9817c:	fa01 f303 	lsl.w	r3, r1, r3
   98180:	6053      	str	r3, [r2, #4]
	DD_DIS_PERI_AND_RESET_PIO(peri,p_io);
   98182:	6838      	ldr	r0, [r7, #0]
   98184:	6879      	ldr	r1, [r7, #4]
   98186:	4b0b      	ldr	r3, [pc, #44]	; (981b4 <DD_RESET_HEATER+0x54>)
   98188:	4798      	blx	r3
	
	cl_wait(100);
   9818a:	2064      	movs	r0, #100	; 0x64
   9818c:	4b0a      	ldr	r3, [pc, #40]	; (981b8 <DD_RESET_HEATER+0x58>)
   9818e:	4798      	blx	r3
	p_io = 28;
   98190:	231c      	movs	r3, #28
   98192:	607b      	str	r3, [r7, #4]
	peri = PC;                                    // tURN OFF SAFETY RELAY  WAIT FOR 100ms BEFORE TRIAC (pwm) ON 
   98194:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   98198:	603b      	str	r3, [r7, #0]
	DD_RESET_PIO(peri,p_io);
   9819a:	6838      	ldr	r0, [r7, #0]
   9819c:	6879      	ldr	r1, [r7, #4]
   9819e:	4b07      	ldr	r3, [pc, #28]	; (981bc <DD_RESET_HEATER+0x5c>)
   981a0:	4798      	blx	r3
	return 0;
   981a2:	2300      	movs	r3, #0
}
   981a4:	4618      	mov	r0, r3
   981a6:	3708      	adds	r7, #8
   981a8:	46bd      	mov	sp, r7
   981aa:	bd80      	pop	{r7, pc}
   981ac:	40094000 	.word	0x40094000
   981b0:	400e0e00 	.word	0x400e0e00
   981b4:	00096f19 	.word	0x00096f19
   981b8:	00093195 	.word	0x00093195
   981bc:	000970d5 	.word	0x000970d5

000981c0 <DD_RESET_PUMP>:
}



uint8_t DD_RESET_PUMP(sv_pumptype id_pump)
{
   981c0:	b580      	push	{r7, lr}
   981c2:	b084      	sub	sp, #16
   981c4:	af00      	add	r7, sp, #0
   981c6:	4603      	mov	r3, r0
   981c8:	71fb      	strb	r3, [r7, #7]
	
	uint32_t p_io,peri;
	switch (id_pump)
   981ca:	79fb      	ldrb	r3, [r7, #7]
   981cc:	3b01      	subs	r3, #1
   981ce:	2b04      	cmp	r3, #4
   981d0:	d85b      	bhi.n	9828a <DD_RESET_PUMP+0xca>
   981d2:	a201      	add	r2, pc, #4	; (adr r2, 981d8 <DD_RESET_PUMP+0x18>)
   981d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   981d8:	000981ed 	.word	0x000981ed
   981dc:	00098219 	.word	0x00098219
   981e0:	0009828b 	.word	0x0009828b
   981e4:	00098245 	.word	0x00098245
   981e8:	00098271 	.word	0x00098271
	{
		case DCMOTOR1:  // DC MOTOR 1
		p_io = 20;
   981ec:	2314      	movs	r3, #20
   981ee:	60fb      	str	r3, [r7, #12]
		peri = PA;
   981f0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   981f4:	60bb      	str	r3, [r7, #8]
		//DD_SET_DUTY(2,0);
		
		
		PWM->PWM_DIS =0x00000004;
   981f6:	4b27      	ldr	r3, [pc, #156]	; (98294 <DD_RESET_PUMP+0xd4>)
   981f8:	2204      	movs	r2, #4
   981fa:	609a      	str	r2, [r3, #8]
		PIOA->PIO_ABSR = 0x00391000;
   981fc:	4b26      	ldr	r3, [pc, #152]	; (98298 <DD_RESET_PUMP+0xd8>)
   981fe:	4a27      	ldr	r2, [pc, #156]	; (9829c <DD_RESET_PUMP+0xdc>)
   98200:	671a      	str	r2, [r3, #112]	; 0x70
		PIOA->PIO_PDR = 1<<p_io;
   98202:	4a25      	ldr	r2, [pc, #148]	; (98298 <DD_RESET_PUMP+0xd8>)
   98204:	68fb      	ldr	r3, [r7, #12]
   98206:	2101      	movs	r1, #1
   98208:	fa01 f303 	lsl.w	r3, r1, r3
   9820c:	6053      	str	r3, [r2, #4]
		DD_DIS_PERI_AND_RESET_PIO(peri,p_io);
   9820e:	68b8      	ldr	r0, [r7, #8]
   98210:	68f9      	ldr	r1, [r7, #12]
   98212:	4b23      	ldr	r3, [pc, #140]	; (982a0 <DD_RESET_PUMP+0xe0>)
   98214:	4798      	blx	r3
		
		//DD_RESET_PIO(peri,p_io);
		
		break;
   98216:	e038      	b.n	9828a <DD_RESET_PUMP+0xca>
		
		case DCMOTOR2: // DC MOTOR 2
		p_io = 21;
   98218:	2315      	movs	r3, #21
   9821a:	60fb      	str	r3, [r7, #12]
		peri = PA;
   9821c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   98220:	60bb      	str	r3, [r7, #8]
	//	DD_SET_DUTY(0,0);
		
		PWM->PWM_DIS =0x00000001;
   98222:	4b1c      	ldr	r3, [pc, #112]	; (98294 <DD_RESET_PUMP+0xd4>)
   98224:	2201      	movs	r2, #1
   98226:	609a      	str	r2, [r3, #8]
		PIOA->PIO_ABSR = 0x00391000;
   98228:	4b1b      	ldr	r3, [pc, #108]	; (98298 <DD_RESET_PUMP+0xd8>)
   9822a:	4a1c      	ldr	r2, [pc, #112]	; (9829c <DD_RESET_PUMP+0xdc>)
   9822c:	671a      	str	r2, [r3, #112]	; 0x70
		PIOA->PIO_PDR = 1<<p_io;
   9822e:	4a1a      	ldr	r2, [pc, #104]	; (98298 <DD_RESET_PUMP+0xd8>)
   98230:	68fb      	ldr	r3, [r7, #12]
   98232:	2101      	movs	r1, #1
   98234:	fa01 f303 	lsl.w	r3, r1, r3
   98238:	6053      	str	r3, [r2, #4]
		DD_DIS_PERI_AND_RESET_PIO(peri,p_io);
   9823a:	68b8      	ldr	r0, [r7, #8]
   9823c:	68f9      	ldr	r1, [r7, #12]
   9823e:	4b18      	ldr	r3, [pc, #96]	; (982a0 <DD_RESET_PUMP+0xe0>)
   98240:	4798      	blx	r3
		
	//	DD_RESET_PIO(peri,p_io);
		
		break;
   98242:	e022      	b.n	9828a <DD_RESET_PUMP+0xca>
		case BLOODPUMP: //BLOOD PUMP

		break;
		
		case UFPUMP: // UF PUMP
		p_io = 22;
   98244:	2316      	movs	r3, #22
   98246:	60fb      	str	r3, [r7, #12]
		peri = PC;
   98248:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   9824c:	60bb      	str	r3, [r7, #8]
		DD_DIS_PERI_AND_RESET_PIO(peri,p_io);
   9824e:	68b8      	ldr	r0, [r7, #8]
   98250:	68f9      	ldr	r1, [r7, #12]
   98252:	4b13      	ldr	r3, [pc, #76]	; (982a0 <DD_RESET_PUMP+0xe0>)
   98254:	4798      	blx	r3
	//	DD_SET_PIO(peri,p_io);
		PWM->PWM_DIS =0x00000020;
   98256:	4b0f      	ldr	r3, [pc, #60]	; (98294 <DD_RESET_PUMP+0xd4>)
   98258:	2220      	movs	r2, #32
   9825a:	609a      	str	r2, [r3, #8]
		
		p_io = 15;
   9825c:	230f      	movs	r3, #15
   9825e:	60fb      	str	r3, [r7, #12]
		peri = PA;
   98260:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   98264:	60bb      	str	r3, [r7, #8]
		DD_SET_PIO(peri,p_io);
   98266:	68b8      	ldr	r0, [r7, #8]
   98268:	68f9      	ldr	r1, [r7, #12]
   9826a:	4b0e      	ldr	r3, [pc, #56]	; (982a4 <DD_RESET_PUMP+0xe4>)
   9826c:	4798      	blx	r3
		break;
   9826e:	e00c      	b.n	9828a <DD_RESET_PUMP+0xca>
		
		case HEPARINPUMP: // HEPARIN PUMP
	
		p_io = 2;
   98270:	2302      	movs	r3, #2
   98272:	60fb      	str	r3, [r7, #12]
		peri = PD;
   98274:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   98278:	60bb      	str	r3, [r7, #8]
		DD_SET_PIO(peri,p_io);
   9827a:	68b8      	ldr	r0, [r7, #8]
   9827c:	68f9      	ldr	r1, [r7, #12]
   9827e:	4b09      	ldr	r3, [pc, #36]	; (982a4 <DD_RESET_PUMP+0xe4>)
   98280:	4798      	blx	r3
		//DD_DIS_PERI_AND_RESET_PIO(peri,p_io);
		//DD_SET_DUTY(4,0);
		PWM->PWM_DIS =0x00000010;
   98282:	4b04      	ldr	r3, [pc, #16]	; (98294 <DD_RESET_PUMP+0xd4>)
   98284:	2210      	movs	r2, #16
   98286:	609a      	str	r2, [r3, #8]
		break;
   98288:	bf00      	nop
	
	}
	
	
	
	return 0;
   9828a:	2300      	movs	r3, #0
	
}
   9828c:	4618      	mov	r0, r3
   9828e:	3710      	adds	r7, #16
   98290:	46bd      	mov	sp, r7
   98292:	bd80      	pop	{r7, pc}
   98294:	40094000 	.word	0x40094000
   98298:	400e0e00 	.word	0x400e0e00
   9829c:	00391000 	.word	0x00391000
   982a0:	00096f19 	.word	0x00096f19
   982a4:	00097051 	.word	0x00097051

000982a8 <DD_SET_SPEED>:
	
	return 0;
}

uint8_t DD_SET_SPEED(sv_pumptype id_pump,uint32_t speed)
{
   982a8:	b580      	push	{r7, lr}
   982aa:	b086      	sub	sp, #24
   982ac:	af00      	add	r7, sp, #0
   982ae:	4603      	mov	r3, r0
   982b0:	6039      	str	r1, [r7, #0]
   982b2:	71fb      	strb	r3, [r7, #7]
	uint32_t prd_val, dty_val;
	uint8_t pwm_ch_no;
	

	switch (id_pump)
   982b4:	79fb      	ldrb	r3, [r7, #7]
   982b6:	3b01      	subs	r3, #1
   982b8:	2b04      	cmp	r3, #4
   982ba:	f200 8082 	bhi.w	983c2 <DD_SET_SPEED+0x11a>
   982be:	a201      	add	r2, pc, #4	; (adr r2, 982c4 <DD_SET_SPEED+0x1c>)
   982c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   982c4:	000982d9 	.word	0x000982d9
   982c8:	000982ed 	.word	0x000982ed
   982cc:	00098301 	.word	0x00098301
   982d0:	00098383 	.word	0x00098383
   982d4:	000983a3 	.word	0x000983a3
	{
		case DCMOTOR1:  // DC MOTOR 1
		pwm_ch_no = 2;
   982d8:	2302      	movs	r3, #2
   982da:	73fb      	strb	r3, [r7, #15]
		dty_val = speed;
   982dc:	683b      	ldr	r3, [r7, #0]
   982de:	613b      	str	r3, [r7, #16]
		// convert into duty count
		DD_SET_DUTY(pwm_ch_no,dty_val);
   982e0:	7bfb      	ldrb	r3, [r7, #15]
   982e2:	4618      	mov	r0, r3
   982e4:	6939      	ldr	r1, [r7, #16]
   982e6:	4b39      	ldr	r3, [pc, #228]	; (983cc <DD_SET_SPEED+0x124>)
   982e8:	4798      	blx	r3
		break;
   982ea:	e06a      	b.n	983c2 <DD_SET_SPEED+0x11a>
		
		case DCMOTOR2: // DC MOTOR 2
		pwm_ch_no = 0;
   982ec:	2300      	movs	r3, #0
   982ee:	73fb      	strb	r3, [r7, #15]
		dty_val = speed;
   982f0:	683b      	ldr	r3, [r7, #0]
   982f2:	613b      	str	r3, [r7, #16]
		// convert into duty count
		DD_SET_DUTY(pwm_ch_no,dty_val);
   982f4:	7bfb      	ldrb	r3, [r7, #15]
   982f6:	4618      	mov	r0, r3
   982f8:	6939      	ldr	r1, [r7, #16]
   982fa:	4b34      	ldr	r3, [pc, #208]	; (983cc <DD_SET_SPEED+0x124>)
   982fc:	4798      	blx	r3
		break;
   982fe:	e060      	b.n	983c2 <DD_SET_SPEED+0x11a>
		
		case BLOODPUMP: //BLOOD PUMP
	//	pwm_ch_no = 6;
		switch(speed)
   98300:	683b      	ldr	r3, [r7, #0]
   98302:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
   98306:	d01c      	beq.n	98342 <DD_SET_SPEED+0x9a>
   98308:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
   9830c:	d804      	bhi.n	98318 <DD_SET_SPEED+0x70>
   9830e:	2bc8      	cmp	r3, #200	; 0xc8
   98310:	d009      	beq.n	98326 <DD_SET_SPEED+0x7e>
   98312:	2bf0      	cmp	r3, #240	; 0xf0
   98314:	d00e      	beq.n	98334 <DD_SET_SPEED+0x8c>
			dty_val = 0x00000110;
			prd_val =  0x00000210;
			break;
			default:
			//dty_val = speed/2;
			break;
   98316:	e029      	b.n	9836c <DD_SET_SPEED+0xc4>
		DD_SET_DUTY(pwm_ch_no,dty_val);
		break;
		
		case BLOODPUMP: //BLOOD PUMP
	//	pwm_ch_no = 6;
		switch(speed)
   98318:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
   9831c:	d018      	beq.n	98350 <DD_SET_SPEED+0xa8>
   9831e:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
   98322:	d01c      	beq.n	9835e <DD_SET_SPEED+0xb6>
			dty_val = 0x00000110;
			prd_val =  0x00000210;
			break;
			default:
			//dty_val = speed/2;
			break;
   98324:	e022      	b.n	9836c <DD_SET_SPEED+0xc4>
		case BLOODPUMP: //BLOOD PUMP
	//	pwm_ch_no = 6;
		switch(speed)
		{
			case 200:
			dty_val = 0x00000170;
   98326:	f44f 73b8 	mov.w	r3, #368	; 0x170
   9832a:	613b      	str	r3, [r7, #16]
			prd_val =  0x00000375;
   9832c:	f240 3375 	movw	r3, #885	; 0x375
   98330:	617b      	str	r3, [r7, #20]
			break;
   98332:	e01b      	b.n	9836c <DD_SET_SPEED+0xc4>
			case 240:
			dty_val = 0x00000150;
   98334:	f44f 73a8 	mov.w	r3, #336	; 0x150
   98338:	613b      	str	r3, [r7, #16]
			prd_val =  0x00000300;
   9833a:	f44f 7340 	mov.w	r3, #768	; 0x300
   9833e:	617b      	str	r3, [r7, #20]
			break;
   98340:	e014      	b.n	9836c <DD_SET_SPEED+0xc4>
			case 280:
			dty_val = 0x00000130;
   98342:	f44f 7398 	mov.w	r3, #304	; 0x130
   98346:	613b      	str	r3, [r7, #16]
			prd_val =  0x0000280;
   98348:	f44f 7320 	mov.w	r3, #640	; 0x280
   9834c:	617b      	str	r3, [r7, #20]
			break;
   9834e:	e00d      	b.n	9836c <DD_SET_SPEED+0xc4>
			case 320:
			dty_val = 0x00000120;
   98350:	f44f 7390 	mov.w	r3, #288	; 0x120
   98354:	613b      	str	r3, [r7, #16]
			prd_val =  0x00000250;
   98356:	f44f 7314 	mov.w	r3, #592	; 0x250
   9835a:	617b      	str	r3, [r7, #20]
			break;
   9835c:	e006      	b.n	9836c <DD_SET_SPEED+0xc4>
			case 360:
			dty_val = 0x00000110;
   9835e:	f44f 7388 	mov.w	r3, #272	; 0x110
   98362:	613b      	str	r3, [r7, #16]
			prd_val =  0x00000210;
   98364:	f44f 7304 	mov.w	r3, #528	; 0x210
   98368:	617b      	str	r3, [r7, #20]
			break;
   9836a:	bf00      	nop
			//dty_val = speed/2;
			break;
		}
		
		// convert into duty count
		DD_SET_DUTY(pwm_ch_no,dty_val);
   9836c:	7bfb      	ldrb	r3, [r7, #15]
   9836e:	4618      	mov	r0, r3
   98370:	6939      	ldr	r1, [r7, #16]
   98372:	4b16      	ldr	r3, [pc, #88]	; (983cc <DD_SET_SPEED+0x124>)
   98374:	4798      	blx	r3
		DD_SET_PRDY(pwm_ch_no,prd_val);
   98376:	7bfb      	ldrb	r3, [r7, #15]
   98378:	4618      	mov	r0, r3
   9837a:	6979      	ldr	r1, [r7, #20]
   9837c:	4b14      	ldr	r3, [pc, #80]	; (983d0 <DD_SET_SPEED+0x128>)
   9837e:	4798      	blx	r3
		break;
   98380:	e01f      	b.n	983c2 <DD_SET_SPEED+0x11a>
		
		case UFPUMP: // UF PUMP
		pwm_ch_no = 5;
   98382:	2305      	movs	r3, #5
   98384:	73fb      	strb	r3, [r7, #15]
		dty_val = speed/2;
   98386:	683b      	ldr	r3, [r7, #0]
   98388:	085b      	lsrs	r3, r3, #1
   9838a:	613b      	str	r3, [r7, #16]
		// convert into duty count
	//	DD_SET_PRDY(pwm_ch_no,prd_val);
		DD_SET_DUTY(pwm_ch_no,dty_val);
   9838c:	7bfb      	ldrb	r3, [r7, #15]
   9838e:	4618      	mov	r0, r3
   98390:	6939      	ldr	r1, [r7, #16]
   98392:	4b0e      	ldr	r3, [pc, #56]	; (983cc <DD_SET_SPEED+0x124>)
   98394:	4798      	blx	r3
		DD_SET_PRDY(pwm_ch_no,speed);
   98396:	7bfb      	ldrb	r3, [r7, #15]
   98398:	4618      	mov	r0, r3
   9839a:	6839      	ldr	r1, [r7, #0]
   9839c:	4b0c      	ldr	r3, [pc, #48]	; (983d0 <DD_SET_SPEED+0x128>)
   9839e:	4798      	blx	r3
		break;
   983a0:	e00f      	b.n	983c2 <DD_SET_SPEED+0x11a>
		
		case HEPARINPUMP: // HEPARIN PUMP
		pwm_ch_no = 4;
   983a2:	2304      	movs	r3, #4
   983a4:	73fb      	strb	r3, [r7, #15]
		// convert into duty count
		dty_val = speed/2;
   983a6:	683b      	ldr	r3, [r7, #0]
   983a8:	085b      	lsrs	r3, r3, #1
   983aa:	613b      	str	r3, [r7, #16]
		
		DD_SET_DUTY(pwm_ch_no,dty_val);
   983ac:	7bfb      	ldrb	r3, [r7, #15]
   983ae:	4618      	mov	r0, r3
   983b0:	6939      	ldr	r1, [r7, #16]
   983b2:	4b06      	ldr	r3, [pc, #24]	; (983cc <DD_SET_SPEED+0x124>)
   983b4:	4798      	blx	r3
		DD_SET_PRDY(pwm_ch_no,speed);
   983b6:	7bfb      	ldrb	r3, [r7, #15]
   983b8:	4618      	mov	r0, r3
   983ba:	6839      	ldr	r1, [r7, #0]
   983bc:	4b04      	ldr	r3, [pc, #16]	; (983d0 <DD_SET_SPEED+0x128>)
   983be:	4798      	blx	r3
		//DD_SET_PRDY(pwm_ch_no,prd_val);
		break;
   983c0:	bf00      	nop
	}
	
	return 0;
   983c2:	2300      	movs	r3, #0
}
   983c4:	4618      	mov	r0, r3
   983c6:	3718      	adds	r7, #24
   983c8:	46bd      	mov	sp, r7
   983ca:	bd80      	pop	{r7, pc}
   983cc:	00097afd 	.word	0x00097afd
   983d0:	00097b29 	.word	0x00097b29

000983d4 <DD_SET_PUMPFREQ>:

uint8_t DD_SET_PUMPFREQ(sv_pumptype id_pump,uint32_t freq)
{
   983d4:	b580      	push	{r7, lr}
   983d6:	b084      	sub	sp, #16
   983d8:	af00      	add	r7, sp, #0
   983da:	4603      	mov	r3, r0
   983dc:	6039      	str	r1, [r7, #0]
   983de:	71fb      	strb	r3, [r7, #7]
		uint32_t prd_val =0x00001000;
   983e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   983e4:	60fb      	str	r3, [r7, #12]
		uint8_t pwm_ch_no;
		
			
			prd_val = freq;
   983e6:	683b      	ldr	r3, [r7, #0]
   983e8:	60fb      	str	r3, [r7, #12]
			
			switch (id_pump)
   983ea:	79fb      	ldrb	r3, [r7, #7]
   983ec:	2b01      	cmp	r3, #1
   983ee:	d002      	beq.n	983f6 <DD_SET_PUMPFREQ+0x22>
   983f0:	2b02      	cmp	r3, #2
   983f2:	d008      	beq.n	98406 <DD_SET_PUMPFREQ+0x32>
				DD_SET_PRDY(pwm_ch_no,prd_val);
							
				
				break;
				default:
				break;
   983f4:	e00f      	b.n	98416 <DD_SET_PUMPFREQ+0x42>
			prd_val = freq;
			
			switch (id_pump)
			{
				case DCMOTOR1:  // DC MOTOR 1
				pwm_ch_no = 2;
   983f6:	2302      	movs	r3, #2
   983f8:	72fb      	strb	r3, [r7, #11]
								
				DD_SET_PRDY(pwm_ch_no,prd_val);
   983fa:	7afb      	ldrb	r3, [r7, #11]
   983fc:	4618      	mov	r0, r3
   983fe:	68f9      	ldr	r1, [r7, #12]
   98400:	4b07      	ldr	r3, [pc, #28]	; (98420 <DD_SET_PUMPFREQ+0x4c>)
   98402:	4798      	blx	r3
								
				break;
   98404:	e007      	b.n	98416 <DD_SET_PUMPFREQ+0x42>
				
				case DCMOTOR2: // DC MOTOR 2
				pwm_ch_no = 0;
   98406:	2300      	movs	r3, #0
   98408:	72fb      	strb	r3, [r7, #11]
								
				DD_SET_PRDY(pwm_ch_no,prd_val);
   9840a:	7afb      	ldrb	r3, [r7, #11]
   9840c:	4618      	mov	r0, r3
   9840e:	68f9      	ldr	r1, [r7, #12]
   98410:	4b03      	ldr	r3, [pc, #12]	; (98420 <DD_SET_PUMPFREQ+0x4c>)
   98412:	4798      	blx	r3
							
				
				break;
   98414:	bf00      	nop
				default:
				break;
			}
	
		
	return 0;
   98416:	2300      	movs	r3, #0
}
   98418:	4618      	mov	r0, r3
   9841a:	3710      	adds	r7, #16
   9841c:	46bd      	mov	sp, r7
   9841e:	bd80      	pop	{r7, pc}
   98420:	00097b29 	.word	0x00097b29

00098424 <DD_CHNG_HTR>:


uint8_t DD_CHNG_HTR(uint32_t dty_val)
{
   98424:	b580      	push	{r7, lr}
   98426:	b084      	sub	sp, #16
   98428:	af00      	add	r7, sp, #0
   9842a:	6078      	str	r0, [r7, #4]
	;
	uint8_t pwm_ch_no = 1;
   9842c:	2301      	movs	r3, #1
   9842e:	73fb      	strb	r3, [r7, #15]
	
	DD_SET_DUTY(pwm_ch_no,dty_val);
   98430:	7bfb      	ldrb	r3, [r7, #15]
   98432:	4618      	mov	r0, r3
   98434:	6879      	ldr	r1, [r7, #4]
   98436:	4b03      	ldr	r3, [pc, #12]	; (98444 <DD_CHNG_HTR+0x20>)
   98438:	4798      	blx	r3
	
	return 0;
   9843a:	2300      	movs	r3, #0
}
   9843c:	4618      	mov	r0, r3
   9843e:	3710      	adds	r7, #16
   98440:	46bd      	mov	sp, r7
   98442:	bd80      	pop	{r7, pc}
   98444:	00097afd 	.word	0x00097afd

00098448 <DD_SET_DIR>:


uint8_t DD_SET_DIR()               // Heparin Direction
{
   98448:	b580      	push	{r7, lr}
   9844a:	b082      	sub	sp, #8
   9844c:	af00      	add	r7, sp, #0
	uint32_t p_io, peri;
	
	p_io=1;
   9844e:	2301      	movs	r3, #1
   98450:	607b      	str	r3, [r7, #4]
	peri = PD;
   98452:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   98456:	603b      	str	r3, [r7, #0]
	
	DD_SET_PIO(peri,p_io);
   98458:	6838      	ldr	r0, [r7, #0]
   9845a:	6879      	ldr	r1, [r7, #4]
   9845c:	4b03      	ldr	r3, [pc, #12]	; (9846c <DD_SET_DIR+0x24>)
   9845e:	4798      	blx	r3
	
	return 0;
   98460:	2300      	movs	r3, #0
}
   98462:	4618      	mov	r0, r3
   98464:	3708      	adds	r7, #8
   98466:	46bd      	mov	sp, r7
   98468:	bd80      	pop	{r7, pc}
   9846a:	bf00      	nop
   9846c:	00097051 	.word	0x00097051

00098470 <DD_RESET_DIR>:

uint8_t DD_RESET_DIR()   // Heparin Direction
{
   98470:	b580      	push	{r7, lr}
   98472:	b082      	sub	sp, #8
   98474:	af00      	add	r7, sp, #0
	uint32_t p_io, peri;
	
	p_io=1;
   98476:	2301      	movs	r3, #1
   98478:	607b      	str	r3, [r7, #4]
	peri = PD;
   9847a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   9847e:	603b      	str	r3, [r7, #0]
	
	DD_RESET_PIO(peri,p_io);
   98480:	6838      	ldr	r0, [r7, #0]
   98482:	6879      	ldr	r1, [r7, #4]
   98484:	4b03      	ldr	r3, [pc, #12]	; (98494 <DD_RESET_DIR+0x24>)
   98486:	4798      	blx	r3
	
	return 0;
   98488:	2300      	movs	r3, #0
}
   9848a:	4618      	mov	r0, r3
   9848c:	3708      	adds	r7, #8
   9848e:	46bd      	mov	sp, r7
   98490:	bd80      	pop	{r7, pc}
   98492:	bf00      	nop
   98494:	000970d5 	.word	0x000970d5

00098498 <DD_SET_RED>:
uint8_t DD_SET_RED()               // RED
{
   98498:	b580      	push	{r7, lr}
   9849a:	af00      	add	r7, sp, #0
	DD_SET_VALVE(ALARM_RED);
   9849c:	201e      	movs	r0, #30
   9849e:	4b02      	ldr	r3, [pc, #8]	; (984a8 <DD_SET_RED+0x10>)
   984a0:	4798      	blx	r3
	return 0;
   984a2:	2300      	movs	r3, #0
}
   984a4:	4618      	mov	r0, r3
   984a6:	bd80      	pop	{r7, pc}
   984a8:	00098539 	.word	0x00098539

000984ac <DD_SET_GREEN>:
uint8_t DD_SET_GREEN()               // GREEN
{
   984ac:	b580      	push	{r7, lr}
   984ae:	af00      	add	r7, sp, #0
	DD_SET_VALVE(ALARM_GREEN);
   984b0:	2020      	movs	r0, #32
   984b2:	4b02      	ldr	r3, [pc, #8]	; (984bc <DD_SET_GREEN+0x10>)
   984b4:	4798      	blx	r3
	return 0;
   984b6:	2300      	movs	r3, #0
}
   984b8:	4618      	mov	r0, r3
   984ba:	bd80      	pop	{r7, pc}
   984bc:	00098539 	.word	0x00098539

000984c0 <DD_SET_YELLOW>:
uint8_t DD_SET_YELLOW()               // YELLOW
{
   984c0:	b580      	push	{r7, lr}
   984c2:	af00      	add	r7, sp, #0
	DD_SET_VALVE(ALARM_AMBER);
   984c4:	201f      	movs	r0, #31
   984c6:	4b02      	ldr	r3, [pc, #8]	; (984d0 <DD_SET_YELLOW+0x10>)
   984c8:	4798      	blx	r3
	return 0;
   984ca:	2300      	movs	r3, #0
}
   984cc:	4618      	mov	r0, r3
   984ce:	bd80      	pop	{r7, pc}
   984d0:	00098539 	.word	0x00098539

000984d4 <DD_SET_BUZZER>:
uint8_t DD_SET_BUZZER()               // BUZZZER
{
   984d4:	b580      	push	{r7, lr}
   984d6:	af00      	add	r7, sp, #0
	DD_SET_VALVE(ALARM_BUZZER);
   984d8:	201d      	movs	r0, #29
   984da:	4b02      	ldr	r3, [pc, #8]	; (984e4 <DD_SET_BUZZER+0x10>)
   984dc:	4798      	blx	r3
	return 0;
   984de:	2300      	movs	r3, #0
}
   984e0:	4618      	mov	r0, r3
   984e2:	bd80      	pop	{r7, pc}
   984e4:	00098539 	.word	0x00098539

000984e8 <DD_RESET_RED>:
uint8_t DD_RESET_RED()               // RED
{
   984e8:	b580      	push	{r7, lr}
   984ea:	af00      	add	r7, sp, #0
	DD_RESET_VALVE(ALARM_RED);
   984ec:	201e      	movs	r0, #30
   984ee:	4b02      	ldr	r3, [pc, #8]	; (984f8 <DD_RESET_RED+0x10>)
   984f0:	4798      	blx	r3
	return 0;
   984f2:	2300      	movs	r3, #0
}
   984f4:	4618      	mov	r0, r3
   984f6:	bd80      	pop	{r7, pc}
   984f8:	000985f9 	.word	0x000985f9

000984fc <DD_RESET_GREEN>:
uint8_t DD_RESET_GREEN()               // GREEN
{
   984fc:	b580      	push	{r7, lr}
   984fe:	af00      	add	r7, sp, #0
	DD_RESET_VALVE(ALARM_GREEN);
   98500:	2020      	movs	r0, #32
   98502:	4b02      	ldr	r3, [pc, #8]	; (9850c <DD_RESET_GREEN+0x10>)
   98504:	4798      	blx	r3
	return 0;
   98506:	2300      	movs	r3, #0
}
   98508:	4618      	mov	r0, r3
   9850a:	bd80      	pop	{r7, pc}
   9850c:	000985f9 	.word	0x000985f9

00098510 <DD_RESET_YELLOW>:
uint8_t DD_RESET_YELLOW()               // YELLOW
{
   98510:	b580      	push	{r7, lr}
   98512:	af00      	add	r7, sp, #0
	DD_RESET_VALVE(ALARM_AMBER);
   98514:	201f      	movs	r0, #31
   98516:	4b02      	ldr	r3, [pc, #8]	; (98520 <DD_RESET_YELLOW+0x10>)
   98518:	4798      	blx	r3
	return 0;
   9851a:	2300      	movs	r3, #0
}
   9851c:	4618      	mov	r0, r3
   9851e:	bd80      	pop	{r7, pc}
   98520:	000985f9 	.word	0x000985f9

00098524 <DD_RESET_BUZZER>:
uint8_t DD_RESET_BUZZER()               // BUZZZER
{
   98524:	b580      	push	{r7, lr}
   98526:	af00      	add	r7, sp, #0
	DD_RESET_VALVE(ALARM_BUZZER);
   98528:	201d      	movs	r0, #29
   9852a:	4b02      	ldr	r3, [pc, #8]	; (98534 <DD_RESET_BUZZER+0x10>)
   9852c:	4798      	blx	r3
	return 0;
   9852e:	2300      	movs	r3, #0
}
   98530:	4618      	mov	r0, r3
   98532:	bd80      	pop	{r7, pc}
   98534:	000985f9 	.word	0x000985f9

00098538 <DD_SET_VALVE>:
uint8_t DD_SET_VALVE(sv_valvetype id_valve)
{
   98538:	b580      	push	{r7, lr}
   9853a:	b082      	sub	sp, #8
   9853c:	af00      	add	r7, sp, #0
   9853e:	4603      	mov	r3, r0
   98540:	71fb      	strb	r3, [r7, #7]
	uint32_t p_io, peri;

     if((id_valve >=1) && (id_valve <= 16))
   98542:	79fb      	ldrb	r3, [r7, #7]
   98544:	2b00      	cmp	r3, #0
   98546:	d015      	beq.n	98574 <DD_SET_VALVE+0x3c>
   98548:	79fb      	ldrb	r3, [r7, #7]
   9854a:	2b10      	cmp	r3, #16
   9854c:	d812      	bhi.n	98574 <DD_SET_VALVE+0x3c>
	
		{
	
		dd_valve_port_1_16 |= 1 << id_valve - 1;
   9854e:	79fb      	ldrb	r3, [r7, #7]
   98550:	3b01      	subs	r3, #1
   98552:	2201      	movs	r2, #1
   98554:	fa02 f303 	lsl.w	r3, r2, r3
   98558:	b29a      	uxth	r2, r3
   9855a:	4b21      	ldr	r3, [pc, #132]	; (985e0 <DD_SET_VALVE+0xa8>)
   9855c:	881b      	ldrh	r3, [r3, #0]
   9855e:	b29b      	uxth	r3, r3
   98560:	4313      	orrs	r3, r2
   98562:	b29b      	uxth	r3, r3
   98564:	b29a      	uxth	r2, r3
   98566:	4b1e      	ldr	r3, [pc, #120]	; (985e0 <DD_SET_VALVE+0xa8>)
   98568:	801a      	strh	r2, [r3, #0]

		DD_SET_VALVE_1_16_IO();
   9856a:	4b1e      	ldr	r3, [pc, #120]	; (985e4 <DD_SET_VALVE+0xac>)
   9856c:	4798      	blx	r3

		DD_LATCH_STROBE_X1_X16();
   9856e:	4b1e      	ldr	r3, [pc, #120]	; (985e8 <DD_SET_VALVE+0xb0>)
   98570:	4798      	blx	r3
   98572:	e030      	b.n	985d6 <DD_SET_VALVE+0x9e>
		
		}

	   else	if((id_valve >=17) && (id_valve <= VALVE_MAX))
   98574:	79fb      	ldrb	r3, [r7, #7]
   98576:	2b10      	cmp	r3, #16
   98578:	d915      	bls.n	985a6 <DD_SET_VALVE+0x6e>
   9857a:	79fb      	ldrb	r3, [r7, #7]
   9857c:	2b16      	cmp	r3, #22
   9857e:	d812      	bhi.n	985a6 <DD_SET_VALVE+0x6e>
		{

					dd_valve_port_17_20 |= 1 << id_valve - 17;         // Earlier 6
   98580:	79fb      	ldrb	r3, [r7, #7]
   98582:	3b11      	subs	r3, #17
   98584:	2201      	movs	r2, #1
   98586:	fa02 f303 	lsl.w	r3, r2, r3
   9858a:	b29a      	uxth	r2, r3
   9858c:	4b17      	ldr	r3, [pc, #92]	; (985ec <DD_SET_VALVE+0xb4>)
   9858e:	881b      	ldrh	r3, [r3, #0]
   98590:	b29b      	uxth	r3, r3
   98592:	4313      	orrs	r3, r2
   98594:	b29b      	uxth	r3, r3
   98596:	b29a      	uxth	r2, r3
   98598:	4b14      	ldr	r3, [pc, #80]	; (985ec <DD_SET_VALVE+0xb4>)
   9859a:	801a      	strh	r2, [r3, #0]

					DD_SET_VALVE_17_20_IO();
   9859c:	4b14      	ldr	r3, [pc, #80]	; (985f0 <DD_SET_VALVE+0xb8>)
   9859e:	4798      	blx	r3

			        DD_LATCH_STROBE_X17_X20();
   985a0:	4b14      	ldr	r3, [pc, #80]	; (985f4 <DD_SET_VALVE+0xbc>)
   985a2:	4798      	blx	r3
   985a4:	e017      	b.n	985d6 <DD_SET_VALVE+0x9e>
		}
		
		else if ((id_valve >=29) && (id_valve <= 32))                                  // for alarm indicators
   985a6:	79fb      	ldrb	r3, [r7, #7]
   985a8:	2b1c      	cmp	r3, #28
   985aa:	d914      	bls.n	985d6 <DD_SET_VALVE+0x9e>
   985ac:	79fb      	ldrb	r3, [r7, #7]
   985ae:	2b20      	cmp	r3, #32
   985b0:	d811      	bhi.n	985d6 <DD_SET_VALVE+0x9e>
		{
			dd_valve_port_17_20 |= 1 << id_valve - 17;
   985b2:	79fb      	ldrb	r3, [r7, #7]
   985b4:	3b11      	subs	r3, #17
   985b6:	2201      	movs	r2, #1
   985b8:	fa02 f303 	lsl.w	r3, r2, r3
   985bc:	b29a      	uxth	r2, r3
   985be:	4b0b      	ldr	r3, [pc, #44]	; (985ec <DD_SET_VALVE+0xb4>)
   985c0:	881b      	ldrh	r3, [r3, #0]
   985c2:	b29b      	uxth	r3, r3
   985c4:	4313      	orrs	r3, r2
   985c6:	b29b      	uxth	r3, r3
   985c8:	b29a      	uxth	r2, r3
   985ca:	4b08      	ldr	r3, [pc, #32]	; (985ec <DD_SET_VALVE+0xb4>)
   985cc:	801a      	strh	r2, [r3, #0]
//			DD_SET_VALVE_21_32_IO();
DD_SET_VALVE_17_20_IO();
   985ce:	4b08      	ldr	r3, [pc, #32]	; (985f0 <DD_SET_VALVE+0xb8>)
   985d0:	4798      	blx	r3
			DD_LATCH_STROBE_X17_X20();
   985d2:	4b08      	ldr	r3, [pc, #32]	; (985f4 <DD_SET_VALVE+0xbc>)
   985d4:	4798      	blx	r3
		}
				
	

	return 0;
   985d6:	2300      	movs	r3, #0
}
   985d8:	4618      	mov	r0, r3
   985da:	3708      	adds	r7, #8
   985dc:	46bd      	mov	sp, r7
   985de:	bd80      	pop	{r7, pc}
   985e0:	20071b44 	.word	0x20071b44
   985e4:	000986f5 	.word	0x000986f5
   985e8:	000993c9 	.word	0x000993c9
   985ec:	20071b46 	.word	0x20071b46
   985f0:	00098881 	.word	0x00098881
   985f4:	00099411 	.word	0x00099411

000985f8 <DD_RESET_VALVE>:

uint8_t DD_RESET_VALVE(sv_valvetype id_valve)
{
   985f8:	b580      	push	{r7, lr}
   985fa:	b082      	sub	sp, #8
   985fc:	af00      	add	r7, sp, #0
   985fe:	4603      	mov	r3, r0
   98600:	71fb      	strb	r3, [r7, #7]
	uint32_t p_io, peri;

	if(id_valve == VALVE_ID1)
   98602:	79fb      	ldrb	r3, [r7, #7]
   98604:	2b01      	cmp	r3, #1
   98606:	d104      	bne.n	98612 <DD_RESET_VALVE+0x1a>
	{
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"V17_0",6);
   98608:	2018      	movs	r0, #24
   9860a:	4932      	ldr	r1, [pc, #200]	; (986d4 <DD_RESET_VALVE+0xdc>)
   9860c:	2206      	movs	r2, #6
   9860e:	4b32      	ldr	r3, [pc, #200]	; (986d8 <DD_RESET_VALVE+0xe0>)
   98610:	4798      	blx	r3
	}
	
	if((id_valve >=1) && (id_valve <= 16))
   98612:	79fb      	ldrb	r3, [r7, #7]
   98614:	2b00      	cmp	r3, #0
   98616:	d01b      	beq.n	98650 <DD_RESET_VALVE+0x58>
   98618:	79fb      	ldrb	r3, [r7, #7]
   9861a:	2b10      	cmp	r3, #16
   9861c:	d818      	bhi.n	98650 <DD_RESET_VALVE+0x58>
	{
	
		dd_valve_port_1_16 = dd_valve_port_1_16 &= ~(1 << id_valve - 1);
   9861e:	79fb      	ldrb	r3, [r7, #7]
   98620:	3b01      	subs	r3, #1
   98622:	2201      	movs	r2, #1
   98624:	fa02 f303 	lsl.w	r3, r2, r3
   98628:	b29b      	uxth	r3, r3
   9862a:	43db      	mvns	r3, r3
   9862c:	b29a      	uxth	r2, r3
   9862e:	4b2b      	ldr	r3, [pc, #172]	; (986dc <DD_RESET_VALVE+0xe4>)
   98630:	881b      	ldrh	r3, [r3, #0]
   98632:	b29b      	uxth	r3, r3
   98634:	4013      	ands	r3, r2
   98636:	b29b      	uxth	r3, r3
   98638:	b29a      	uxth	r2, r3
   9863a:	4b28      	ldr	r3, [pc, #160]	; (986dc <DD_RESET_VALVE+0xe4>)
   9863c:	801a      	strh	r2, [r3, #0]
   9863e:	4b27      	ldr	r3, [pc, #156]	; (986dc <DD_RESET_VALVE+0xe4>)
   98640:	881a      	ldrh	r2, [r3, #0]
   98642:	4b26      	ldr	r3, [pc, #152]	; (986dc <DD_RESET_VALVE+0xe4>)
   98644:	801a      	strh	r2, [r3, #0]
		DD_SET_VALVE_1_16_IO();
   98646:	4b26      	ldr	r3, [pc, #152]	; (986e0 <DD_RESET_VALVE+0xe8>)
   98648:	4798      	blx	r3
		DD_LATCH_STROBE_X1_X16();
   9864a:	4b26      	ldr	r3, [pc, #152]	; (986e4 <DD_RESET_VALVE+0xec>)
   9864c:	4798      	blx	r3
   9864e:	e03c      	b.n	986ca <DD_RESET_VALVE+0xd2>
		
	}

	else if((id_valve >=17) && (id_valve <= VALVE_MAX))
   98650:	79fb      	ldrb	r3, [r7, #7]
   98652:	2b10      	cmp	r3, #16
   98654:	d91b      	bls.n	9868e <DD_RESET_VALVE+0x96>
   98656:	79fb      	ldrb	r3, [r7, #7]
   98658:	2b16      	cmp	r3, #22
   9865a:	d818      	bhi.n	9868e <DD_RESET_VALVE+0x96>
	{
		dd_valve_port_17_20 = dd_valve_port_17_20 &= ~(1 << id_valve - 17);
   9865c:	79fb      	ldrb	r3, [r7, #7]
   9865e:	3b11      	subs	r3, #17
   98660:	2201      	movs	r2, #1
   98662:	fa02 f303 	lsl.w	r3, r2, r3
   98666:	b29b      	uxth	r3, r3
   98668:	43db      	mvns	r3, r3
   9866a:	b29a      	uxth	r2, r3
   9866c:	4b1e      	ldr	r3, [pc, #120]	; (986e8 <DD_RESET_VALVE+0xf0>)
   9866e:	881b      	ldrh	r3, [r3, #0]
   98670:	b29b      	uxth	r3, r3
   98672:	4013      	ands	r3, r2
   98674:	b29b      	uxth	r3, r3
   98676:	b29a      	uxth	r2, r3
   98678:	4b1b      	ldr	r3, [pc, #108]	; (986e8 <DD_RESET_VALVE+0xf0>)
   9867a:	801a      	strh	r2, [r3, #0]
   9867c:	4b1a      	ldr	r3, [pc, #104]	; (986e8 <DD_RESET_VALVE+0xf0>)
   9867e:	881a      	ldrh	r2, [r3, #0]
   98680:	4b19      	ldr	r3, [pc, #100]	; (986e8 <DD_RESET_VALVE+0xf0>)
   98682:	801a      	strh	r2, [r3, #0]
		DD_SET_VALVE_17_20_IO();
   98684:	4b19      	ldr	r3, [pc, #100]	; (986ec <DD_RESET_VALVE+0xf4>)
   98686:	4798      	blx	r3
		DD_LATCH_STROBE_X17_X20();
   98688:	4b19      	ldr	r3, [pc, #100]	; (986f0 <DD_RESET_VALVE+0xf8>)
   9868a:	4798      	blx	r3
   9868c:	e01d      	b.n	986ca <DD_RESET_VALVE+0xd2>
		
	}
	
	else if ((id_valve >=29) && (id_valve <= 32))                                  // for alarm indicators
   9868e:	79fb      	ldrb	r3, [r7, #7]
   98690:	2b1c      	cmp	r3, #28
   98692:	d91a      	bls.n	986ca <DD_RESET_VALVE+0xd2>
   98694:	79fb      	ldrb	r3, [r7, #7]
   98696:	2b20      	cmp	r3, #32
   98698:	d817      	bhi.n	986ca <DD_RESET_VALVE+0xd2>
	{
		dd_valve_port_17_20 = dd_valve_port_17_20 &= ~(1 << id_valve - 17);
   9869a:	79fb      	ldrb	r3, [r7, #7]
   9869c:	3b11      	subs	r3, #17
   9869e:	2201      	movs	r2, #1
   986a0:	fa02 f303 	lsl.w	r3, r2, r3
   986a4:	b29b      	uxth	r3, r3
   986a6:	43db      	mvns	r3, r3
   986a8:	b29a      	uxth	r2, r3
   986aa:	4b0f      	ldr	r3, [pc, #60]	; (986e8 <DD_RESET_VALVE+0xf0>)
   986ac:	881b      	ldrh	r3, [r3, #0]
   986ae:	b29b      	uxth	r3, r3
   986b0:	4013      	ands	r3, r2
   986b2:	b29b      	uxth	r3, r3
   986b4:	b29a      	uxth	r2, r3
   986b6:	4b0c      	ldr	r3, [pc, #48]	; (986e8 <DD_RESET_VALVE+0xf0>)
   986b8:	801a      	strh	r2, [r3, #0]
   986ba:	4b0b      	ldr	r3, [pc, #44]	; (986e8 <DD_RESET_VALVE+0xf0>)
   986bc:	881a      	ldrh	r2, [r3, #0]
   986be:	4b0a      	ldr	r3, [pc, #40]	; (986e8 <DD_RESET_VALVE+0xf0>)
   986c0:	801a      	strh	r2, [r3, #0]
//		DD_SET_VALVE_21_32_IO();
DD_SET_VALVE_17_20_IO();
   986c2:	4b0a      	ldr	r3, [pc, #40]	; (986ec <DD_RESET_VALVE+0xf4>)
   986c4:	4798      	blx	r3
		DD_LATCH_STROBE_X17_X20();
   986c6:	4b0a      	ldr	r3, [pc, #40]	; (986f0 <DD_RESET_VALVE+0xf8>)
   986c8:	4798      	blx	r3
	}

	
	return 0;
   986ca:	2300      	movs	r3, #0
}
   986cc:	4618      	mov	r0, r3
   986ce:	3708      	adds	r7, #8
   986d0:	46bd      	mov	sp, r7
   986d2:	bd80      	pop	{r7, pc}
   986d4:	000a8cb8 	.word	0x000a8cb8
   986d8:	0009ba51 	.word	0x0009ba51
   986dc:	20071b44 	.word	0x20071b44
   986e0:	000986f5 	.word	0x000986f5
   986e4:	000993c9 	.word	0x000993c9
   986e8:	20071b46 	.word	0x20071b46
   986ec:	00098881 	.word	0x00098881
   986f0:	00099411 	.word	0x00099411

000986f4 <DD_SET_VALVE_1_16_IO>:

uint8_t DD_SET_VALVE_1_16_IO()

{
   986f4:	b580      	push	{r7, lr}
   986f6:	b084      	sub	sp, #16
   986f8:	af00      	add	r7, sp, #0
	uint8_t count = 1;
   986fa:	2301      	movs	r3, #1
   986fc:	73fb      	strb	r3, [r7, #15]
	uint32_t p_io, peri;
	 while (count <= 16)
   986fe:	e0af      	b.n	98860 <DD_SET_VALVE_1_16_IO+0x16c>
	 {
			switch (count)
   98700:	7bfb      	ldrb	r3, [r7, #15]
   98702:	3b01      	subs	r3, #1
   98704:	2b0f      	cmp	r3, #15
   98706:	f200 8083 	bhi.w	98810 <DD_SET_VALVE_1_16_IO+0x11c>
   9870a:	a201      	add	r2, pc, #4	; (adr r2, 98710 <DD_SET_VALVE_1_16_IO+0x1c>)
   9870c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   98710:	00098751 	.word	0x00098751
   98714:	0009875d 	.word	0x0009875d
   98718:	00098769 	.word	0x00098769
   9871c:	00098775 	.word	0x00098775
   98720:	00098781 	.word	0x00098781
   98724:	0009878d 	.word	0x0009878d
   98728:	00098799 	.word	0x00098799
   9872c:	000987a5 	.word	0x000987a5
   98730:	000987b1 	.word	0x000987b1
   98734:	000987bd 	.word	0x000987bd
   98738:	000987c9 	.word	0x000987c9
   9873c:	000987d5 	.word	0x000987d5
   98740:	000987e1 	.word	0x000987e1
   98744:	000987ed 	.word	0x000987ed
   98748:	000987f9 	.word	0x000987f9
   9874c:	00098805 	.word	0x00098805
			{	
			
			case VALVE_ID1:
			p_io = 10;
   98750:	230a      	movs	r3, #10
   98752:	60bb      	str	r3, [r7, #8]
			peri = PB;
   98754:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   98758:	607b      	str	r3, [r7, #4]
			break;
   9875a:	e05a      	b.n	98812 <DD_SET_VALVE_1_16_IO+0x11e>
			
			case VALVE_ID2:
			p_io = 2;
   9875c:	2302      	movs	r3, #2
   9875e:	60bb      	str	r3, [r7, #8]
			peri = PC;
   98760:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   98764:	607b      	str	r3, [r7, #4]
			break;
   98766:	e054      	b.n	98812 <DD_SET_VALVE_1_16_IO+0x11e>
			
			case VALVE_ID3:
			p_io = 3;
   98768:	2303      	movs	r3, #3
   9876a:	60bb      	str	r3, [r7, #8]
			peri = PC;
   9876c:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   98770:	607b      	str	r3, [r7, #4]
			break;
   98772:	e04e      	b.n	98812 <DD_SET_VALVE_1_16_IO+0x11e>
			
			case VALVE_ID4:
			p_io = 4;
   98774:	2304      	movs	r3, #4
   98776:	60bb      	str	r3, [r7, #8]
			peri = PC;
   98778:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   9877c:	607b      	str	r3, [r7, #4]
			break;
   9877e:	e048      	b.n	98812 <DD_SET_VALVE_1_16_IO+0x11e>
			
			case VALVE_ID5:
			p_io = 5;
   98780:	2305      	movs	r3, #5
   98782:	60bb      	str	r3, [r7, #8]
			peri = PC;
   98784:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   98788:	607b      	str	r3, [r7, #4]
			break;
   9878a:	e042      	b.n	98812 <DD_SET_VALVE_1_16_IO+0x11e>
	        case VALVE_ID6:
			p_io = 6;
   9878c:	2306      	movs	r3, #6
   9878e:	60bb      	str	r3, [r7, #8]
			peri = PC;
   98790:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   98794:	607b      	str	r3, [r7, #4]
			break;
   98796:	e03c      	b.n	98812 <DD_SET_VALVE_1_16_IO+0x11e>
						
			case VALVE_ID7:
			p_io = 7;
   98798:	2307      	movs	r3, #7
   9879a:	60bb      	str	r3, [r7, #8]
			peri = PC;
   9879c:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   987a0:	607b      	str	r3, [r7, #4]
			break;
   987a2:	e036      	b.n	98812 <DD_SET_VALVE_1_16_IO+0x11e>
			case VALVE_ID8:
			p_io = 8;
   987a4:	2308      	movs	r3, #8
   987a6:	60bb      	str	r3, [r7, #8]
			peri = PC;
   987a8:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   987ac:	607b      	str	r3, [r7, #4]
			break;
   987ae:	e030      	b.n	98812 <DD_SET_VALVE_1_16_IO+0x11e>
						
			case VALVE_ID9:
			p_io = 9;
   987b0:	2309      	movs	r3, #9
   987b2:	60bb      	str	r3, [r7, #8]
			peri = PC;
   987b4:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   987b8:	607b      	str	r3, [r7, #4]
			break;
   987ba:	e02a      	b.n	98812 <DD_SET_VALVE_1_16_IO+0x11e>
						
			case VALVE_ID10:
			p_io = 10;
   987bc:	230a      	movs	r3, #10
   987be:	60bb      	str	r3, [r7, #8]
			peri = PC;
   987c0:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   987c4:	607b      	str	r3, [r7, #4]
			break;
   987c6:	e024      	b.n	98812 <DD_SET_VALVE_1_16_IO+0x11e>
							
			case VALVE_ID11:
			p_io = 11;
   987c8:	230b      	movs	r3, #11
   987ca:	60bb      	str	r3, [r7, #8]
			peri = PC;
   987cc:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   987d0:	607b      	str	r3, [r7, #4]
			break;
   987d2:	e01e      	b.n	98812 <DD_SET_VALVE_1_16_IO+0x11e>
						
			case VALVE_ID12:
			p_io = 12;
   987d4:	230c      	movs	r3, #12
   987d6:	60bb      	str	r3, [r7, #8]
			peri = PC;
   987d8:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   987dc:	607b      	str	r3, [r7, #4]
			break;
   987de:	e018      	b.n	98812 <DD_SET_VALVE_1_16_IO+0x11e>
						
			case VALVE_ID13:
			p_io = 13;
   987e0:	230d      	movs	r3, #13
   987e2:	60bb      	str	r3, [r7, #8]
			peri = PC;
   987e4:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   987e8:	607b      	str	r3, [r7, #4]
			break;
   987ea:	e012      	b.n	98812 <DD_SET_VALVE_1_16_IO+0x11e>
						
			case VALVE_ID14:
			p_io = 14;
   987ec:	230e      	movs	r3, #14
   987ee:	60bb      	str	r3, [r7, #8]
			peri = PC;
   987f0:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   987f4:	607b      	str	r3, [r7, #4]
			break;
   987f6:	e00c      	b.n	98812 <DD_SET_VALVE_1_16_IO+0x11e>
						
			case VALVE_ID15:
			p_io = 15;
   987f8:	230f      	movs	r3, #15
   987fa:	60bb      	str	r3, [r7, #8]
			peri = PC;
   987fc:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   98800:	607b      	str	r3, [r7, #4]
			break;
   98802:	e006      	b.n	98812 <DD_SET_VALVE_1_16_IO+0x11e>
		
			case VALVE_ID16:
			p_io = 16;
   98804:	2310      	movs	r3, #16
   98806:	60bb      	str	r3, [r7, #8]
			peri = PC;
   98808:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   9880c:	607b      	str	r3, [r7, #4]
			break;
   9880e:	e000      	b.n	98812 <DD_SET_VALVE_1_16_IO+0x11e>
					
			default:
			break;
   98810:	bf00      	nop
				}
		if (dd_valve_port_1_16 & 1<< count-1 )
   98812:	4b18      	ldr	r3, [pc, #96]	; (98874 <DD_SET_VALVE_1_16_IO+0x180>)
   98814:	881b      	ldrh	r3, [r3, #0]
   98816:	461a      	mov	r2, r3
   98818:	7bfb      	ldrb	r3, [r7, #15]
   9881a:	3b01      	subs	r3, #1
   9881c:	fa42 f303 	asr.w	r3, r2, r3
   98820:	f003 0301 	and.w	r3, r3, #1
   98824:	2b00      	cmp	r3, #0
   98826:	d00c      	beq.n	98842 <DD_SET_VALVE_1_16_IO+0x14e>
						{
							if (count == VALVE_ID1 )
   98828:	7bfb      	ldrb	r3, [r7, #15]
   9882a:	2b01      	cmp	r3, #1
   9882c:	d104      	bne.n	98838 <DD_SET_VALVE_1_16_IO+0x144>
							{
								DD_SET_PIO(peri,p_io);
   9882e:	6878      	ldr	r0, [r7, #4]
   98830:	68b9      	ldr	r1, [r7, #8]
   98832:	4b11      	ldr	r3, [pc, #68]	; (98878 <DD_SET_VALVE_1_16_IO+0x184>)
   98834:	4798      	blx	r3
   98836:	e010      	b.n	9885a <DD_SET_VALVE_1_16_IO+0x166>
							}
							else
							DD_RESET_PIO(peri,p_io);
   98838:	6878      	ldr	r0, [r7, #4]
   9883a:	68b9      	ldr	r1, [r7, #8]
   9883c:	4b0f      	ldr	r3, [pc, #60]	; (9887c <DD_SET_VALVE_1_16_IO+0x188>)
   9883e:	4798      	blx	r3
   98840:	e00b      	b.n	9885a <DD_SET_VALVE_1_16_IO+0x166>
						}
						else
						{
							if (count == VALVE_ID1 )
   98842:	7bfb      	ldrb	r3, [r7, #15]
   98844:	2b01      	cmp	r3, #1
   98846:	d104      	bne.n	98852 <DD_SET_VALVE_1_16_IO+0x15e>
							{
								DD_RESET_PIO(peri,p_io);
   98848:	6878      	ldr	r0, [r7, #4]
   9884a:	68b9      	ldr	r1, [r7, #8]
   9884c:	4b0b      	ldr	r3, [pc, #44]	; (9887c <DD_SET_VALVE_1_16_IO+0x188>)
   9884e:	4798      	blx	r3
   98850:	e003      	b.n	9885a <DD_SET_VALVE_1_16_IO+0x166>
							}
							else
							DD_SET_PIO(peri,p_io);
   98852:	6878      	ldr	r0, [r7, #4]
   98854:	68b9      	ldr	r1, [r7, #8]
   98856:	4b08      	ldr	r3, [pc, #32]	; (98878 <DD_SET_VALVE_1_16_IO+0x184>)
   98858:	4798      	blx	r3
						}
			count++;
   9885a:	7bfb      	ldrb	r3, [r7, #15]
   9885c:	3301      	adds	r3, #1
   9885e:	73fb      	strb	r3, [r7, #15]
uint8_t DD_SET_VALVE_1_16_IO()

{
	uint8_t count = 1;
	uint32_t p_io, peri;
	 while (count <= 16)
   98860:	7bfb      	ldrb	r3, [r7, #15]
   98862:	2b10      	cmp	r3, #16
   98864:	f67f af4c 	bls.w	98700 <DD_SET_VALVE_1_16_IO+0xc>
							else
							DD_SET_PIO(peri,p_io);
						}
			count++;
		}
	return 0;
   98868:	2300      	movs	r3, #0
}
   9886a:	4618      	mov	r0, r3
   9886c:	3710      	adds	r7, #16
   9886e:	46bd      	mov	sp, r7
   98870:	bd80      	pop	{r7, pc}
   98872:	bf00      	nop
   98874:	20071b44 	.word	0x20071b44
   98878:	00097051 	.word	0x00097051
   9887c:	000970d5 	.word	0x000970d5

00098880 <DD_SET_VALVE_17_20_IO>:

uint8_t DD_SET_VALVE_17_20_IO()
{
   98880:	b580      	push	{r7, lr}
   98882:	b084      	sub	sp, #16
   98884:	af00      	add	r7, sp, #0
		uint8_t count = 17;
   98886:	2311      	movs	r3, #17
   98888:	73fb      	strb	r3, [r7, #15]
		uint32_t p_io, peri;
		while (count <= 32)  // 32
   9888a:	e074      	b.n	98976 <DD_SET_VALVE_17_20_IO+0xf6>
		{
			switch (count)
   9888c:	7bfb      	ldrb	r3, [r7, #15]
   9888e:	3b11      	subs	r3, #17
   98890:	2b0f      	cmp	r3, #15
   98892:	d853      	bhi.n	9893c <DD_SET_VALVE_17_20_IO+0xbc>
   98894:	a201      	add	r2, pc, #4	; (adr r2, 9889c <DD_SET_VALVE_17_20_IO+0x1c>)
   98896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9889a:	bf00      	nop
   9889c:	000988dd 	.word	0x000988dd
   988a0:	000988e9 	.word	0x000988e9
   988a4:	000988f5 	.word	0x000988f5
   988a8:	00098901 	.word	0x00098901
   988ac:	0009893d 	.word	0x0009893d
   988b0:	0009893d 	.word	0x0009893d
   988b4:	0009893d 	.word	0x0009893d
   988b8:	0009893d 	.word	0x0009893d
   988bc:	0009893d 	.word	0x0009893d
   988c0:	0009893d 	.word	0x0009893d
   988c4:	0009893d 	.word	0x0009893d
   988c8:	0009893d 	.word	0x0009893d
   988cc:	0009890d 	.word	0x0009890d
   988d0:	00098919 	.word	0x00098919
   988d4:	00098925 	.word	0x00098925
   988d8:	00098931 	.word	0x00098931
			{
				
					case VALVE_ID17:
					p_io = 1;
   988dc:	2301      	movs	r3, #1
   988de:	60bb      	str	r3, [r7, #8]
					peri = PC;
   988e0:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   988e4:	607b      	str	r3, [r7, #4]
					break;
   988e6:	e02a      	b.n	9893e <DD_SET_VALVE_17_20_IO+0xbe>
				
					case VALVE_ID18:
					p_io = 2;
   988e8:	2302      	movs	r3, #2
   988ea:	60bb      	str	r3, [r7, #8]
					peri = PC;
   988ec:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   988f0:	607b      	str	r3, [r7, #4]
					break;
   988f2:	e024      	b.n	9893e <DD_SET_VALVE_17_20_IO+0xbe>
				
					case VALVE_ID19:
					p_io = 3;
   988f4:	2303      	movs	r3, #3
   988f6:	60bb      	str	r3, [r7, #8]
					peri = PC;
   988f8:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   988fc:	607b      	str	r3, [r7, #4]
					break;
   988fe:	e01e      	b.n	9893e <DD_SET_VALVE_17_20_IO+0xbe>
				
					case VALVE_ID20:
					p_io = 4;
   98900:	2304      	movs	r3, #4
   98902:	60bb      	str	r3, [r7, #8]
					peri = PC;
   98904:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   98908:	607b      	str	r3, [r7, #4]
					break;
   9890a:	e018      	b.n	9893e <DD_SET_VALVE_17_20_IO+0xbe>
				
					case ALARM_BUZZER:
					p_io = 13;
   9890c:	230d      	movs	r3, #13
   9890e:	60bb      	str	r3, [r7, #8]
					peri = PC;
   98910:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   98914:	607b      	str	r3, [r7, #4]
					break;
   98916:	e012      	b.n	9893e <DD_SET_VALVE_17_20_IO+0xbe>
					case ALARM_RED:
					p_io = 14;
   98918:	230e      	movs	r3, #14
   9891a:	60bb      	str	r3, [r7, #8]
					peri = PC;
   9891c:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   98920:	607b      	str	r3, [r7, #4]
					break;
   98922:	e00c      	b.n	9893e <DD_SET_VALVE_17_20_IO+0xbe>
					case ALARM_AMBER:
					p_io = 15;
   98924:	230f      	movs	r3, #15
   98926:	60bb      	str	r3, [r7, #8]
					peri = PC;
   98928:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   9892c:	607b      	str	r3, [r7, #4]
					break;
   9892e:	e006      	b.n	9893e <DD_SET_VALVE_17_20_IO+0xbe>
				
					case ALARM_GREEN:
					p_io = 16;
   98930:	2310      	movs	r3, #16
   98932:	60bb      	str	r3, [r7, #8]
					peri = PC;
   98934:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   98938:	607b      	str	r3, [r7, #4]
					break;
   9893a:	e000      	b.n	9893e <DD_SET_VALVE_17_20_IO+0xbe>
				
					default:
					break;
   9893c:	bf00      	nop
			}
					if (dd_valve_port_17_20 & 1<< count-17 )
   9893e:	4b12      	ldr	r3, [pc, #72]	; (98988 <DD_SET_VALVE_17_20_IO+0x108>)
   98940:	881b      	ldrh	r3, [r3, #0]
   98942:	461a      	mov	r2, r3
   98944:	7bfb      	ldrb	r3, [r7, #15]
   98946:	3b11      	subs	r3, #17
   98948:	fa42 f303 	asr.w	r3, r2, r3
   9894c:	f003 0301 	and.w	r3, r3, #1
   98950:	2b00      	cmp	r3, #0
   98952:	d004      	beq.n	9895e <DD_SET_VALVE_17_20_IO+0xde>
	
					{

						DD_RESET_PIO(peri,p_io);
   98954:	6878      	ldr	r0, [r7, #4]
   98956:	68b9      	ldr	r1, [r7, #8]
   98958:	4b0c      	ldr	r3, [pc, #48]	; (9898c <DD_SET_VALVE_17_20_IO+0x10c>)
   9895a:	4798      	blx	r3
   9895c:	e003      	b.n	98966 <DD_SET_VALVE_17_20_IO+0xe6>
					}
			else
			{
			DD_SET_PIO(peri,p_io);
   9895e:	6878      	ldr	r0, [r7, #4]
   98960:	68b9      	ldr	r1, [r7, #8]
   98962:	4b0b      	ldr	r3, [pc, #44]	; (98990 <DD_SET_VALVE_17_20_IO+0x110>)
   98964:	4798      	blx	r3
			}
				
		count++;
   98966:	7bfb      	ldrb	r3, [r7, #15]
   98968:	3301      	adds	r3, #1
   9896a:	73fb      	strb	r3, [r7, #15]
		if (count == 21)
   9896c:	7bfb      	ldrb	r3, [r7, #15]
   9896e:	2b15      	cmp	r3, #21
   98970:	d101      	bne.n	98976 <DD_SET_VALVE_17_20_IO+0xf6>
		{
			count = 29;
   98972:	231d      	movs	r3, #29
   98974:	73fb      	strb	r3, [r7, #15]

uint8_t DD_SET_VALVE_17_20_IO()
{
		uint8_t count = 17;
		uint32_t p_io, peri;
		while (count <= 32)  // 32
   98976:	7bfb      	ldrb	r3, [r7, #15]
   98978:	2b20      	cmp	r3, #32
   9897a:	d987      	bls.n	9888c <DD_SET_VALVE_17_20_IO+0xc>
		{
			count = 29;
		}
	}
	
	return 0;
   9897c:	2300      	movs	r3, #0
}
   9897e:	4618      	mov	r0, r3
   98980:	3710      	adds	r7, #16
   98982:	46bd      	mov	sp, r7
   98984:	bd80      	pop	{r7, pc}
   98986:	bf00      	nop
   98988:	20071b46 	.word	0x20071b46
   9898c:	000970d5 	.word	0x000970d5
   98990:	00097051 	.word	0x00097051

00098994 <DD_SET_CLAMP>:




uint8_t DD_SET_CLAMP()		// Venous Clamp
{
   98994:	b580      	push	{r7, lr}
   98996:	b082      	sub	sp, #8
   98998:	af00      	add	r7, sp, #0
	uint32_t p_io, peri;
	
	p_io=27;
   9899a:	231b      	movs	r3, #27
   9899c:	607b      	str	r3, [r7, #4]
	peri = PC;
   9899e:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   989a2:	603b      	str	r3, [r7, #0]
	
	DD_SET_PIO(peri,p_io);
   989a4:	6838      	ldr	r0, [r7, #0]
   989a6:	6879      	ldr	r1, [r7, #4]
   989a8:	4b03      	ldr	r3, [pc, #12]	; (989b8 <DD_SET_CLAMP+0x24>)
   989aa:	4798      	blx	r3
	
	return 0;
   989ac:	2300      	movs	r3, #0
}
   989ae:	4618      	mov	r0, r3
   989b0:	3708      	adds	r7, #8
   989b2:	46bd      	mov	sp, r7
   989b4:	bd80      	pop	{r7, pc}
   989b6:	bf00      	nop
   989b8:	00097051 	.word	0x00097051

000989bc <DD_RESET_CLAMP>:

uint8_t DD_RESET_CLAMP()   // Venous Clamp
{
   989bc:	b580      	push	{r7, lr}
   989be:	b082      	sub	sp, #8
   989c0:	af00      	add	r7, sp, #0
	uint32_t p_io, peri;
	
	p_io=27;
   989c2:	231b      	movs	r3, #27
   989c4:	607b      	str	r3, [r7, #4]
	peri = PC;
   989c6:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   989ca:	603b      	str	r3, [r7, #0]
	
	DD_RESET_PIO(peri,p_io);
   989cc:	6838      	ldr	r0, [r7, #0]
   989ce:	6879      	ldr	r1, [r7, #4]
   989d0:	4b03      	ldr	r3, [pc, #12]	; (989e0 <DD_RESET_CLAMP+0x24>)
   989d2:	4798      	blx	r3
	
	return 0;
   989d4:	2300      	movs	r3, #0
}
   989d6:	4618      	mov	r0, r3
   989d8:	3708      	adds	r7, #8
   989da:	46bd      	mov	sp, r7
   989dc:	bd80      	pop	{r7, pc}
   989de:	bf00      	nop
   989e0:	000970d5 	.word	0x000970d5

000989e4 <DD_RD_SENSIN>:

uint8_t DD_RD_SENSIN(sv_sensintype id_sensein)
{
   989e4:	b580      	push	{r7, lr}
   989e6:	b086      	sub	sp, #24
   989e8:	af00      	add	r7, sp, #0
   989ea:	4603      	mov	r3, r0
   989ec:	71fb      	strb	r3, [r7, #7]
	uint32_t p_io, peri;
	uint8_t pio_val= 0;
   989ee:	2300      	movs	r3, #0
   989f0:	73fb      	strb	r3, [r7, #15]
	switch(id_sensein)
   989f2:	79fb      	ldrb	r3, [r7, #7]
   989f4:	3b01      	subs	r3, #1
   989f6:	2b24      	cmp	r3, #36	; 0x24
   989f8:	f200 812c 	bhi.w	98c54 <DD_RD_SENSIN+0x270>
   989fc:	a201      	add	r2, pc, #4	; (adr r2, 98a04 <DD_RD_SENSIN+0x20>)
   989fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   98a02:	bf00      	nop
   98a04:	00098a99 	.word	0x00098a99
   98a08:	00098aa5 	.word	0x00098aa5
   98a0c:	00098ab1 	.word	0x00098ab1
   98a10:	00098abd 	.word	0x00098abd
   98a14:	00098ac9 	.word	0x00098ac9
   98a18:	00098ad5 	.word	0x00098ad5
   98a1c:	00098ae1 	.word	0x00098ae1
   98a20:	00098aed 	.word	0x00098aed
   98a24:	00098af9 	.word	0x00098af9
   98a28:	00098b05 	.word	0x00098b05
   98a2c:	00098b11 	.word	0x00098b11
   98a30:	00098b1d 	.word	0x00098b1d
   98a34:	00098b29 	.word	0x00098b29
   98a38:	00098b35 	.word	0x00098b35
   98a3c:	00098b41 	.word	0x00098b41
   98a40:	00098b4d 	.word	0x00098b4d
   98a44:	00098b59 	.word	0x00098b59
   98a48:	00098b65 	.word	0x00098b65
   98a4c:	00098b71 	.word	0x00098b71
   98a50:	00098b7d 	.word	0x00098b7d
   98a54:	00098b89 	.word	0x00098b89
   98a58:	00098b95 	.word	0x00098b95
   98a5c:	00098ba1 	.word	0x00098ba1
   98a60:	00098bad 	.word	0x00098bad
   98a64:	00098bb9 	.word	0x00098bb9
   98a68:	00098bc5 	.word	0x00098bc5
   98a6c:	00098bd1 	.word	0x00098bd1
   98a70:	00098bdd 	.word	0x00098bdd
   98a74:	00098be9 	.word	0x00098be9
   98a78:	00098bf5 	.word	0x00098bf5
   98a7c:	00098c01 	.word	0x00098c01
   98a80:	00098c0d 	.word	0x00098c0d
   98a84:	00098c19 	.word	0x00098c19
   98a88:	00098c25 	.word	0x00098c25
   98a8c:	00098c31 	.word	0x00098c31
   98a90:	00098c3d 	.word	0x00098c3d
   98a94:	00098c49 	.word	0x00098c49
	{
		case SV_SENSIN_ID1:
	
		p_io = 7;               // lvl
   98a98:	2307      	movs	r3, #7
   98a9a:	617b      	str	r3, [r7, #20]
		peri = PA;
   98a9c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   98aa0:	613b      	str	r3, [r7, #16]
		break;
   98aa2:	e0d8      	b.n	98c56 <DD_RD_SENSIN+0x272>
		
		case SV_SENSIN_ID2:					// dgpfeedback
		p_io = 25;
   98aa4:	2319      	movs	r3, #25
   98aa6:	617b      	str	r3, [r7, #20]
		peri = PC;
   98aa8:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   98aac:	613b      	str	r3, [r7, #16]
		break;
   98aae:	e0d2      	b.n	98c56 <DD_RD_SENSIN+0x272>
		
		case SV_SENSIN_ID3:					// fpcurrentsens
		p_io = 12;
   98ab0:	230c      	movs	r3, #12
   98ab2:	617b      	str	r3, [r7, #20]
		peri = PB;
   98ab4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   98ab8:	613b      	str	r3, [r7, #16]
		break;
   98aba:	e0cc      	b.n	98c56 <DD_RD_SENSIN+0x272>
		
		case SV_SENSIN_ID4:					// uf_feeddback
		
		p_io = 0;
   98abc:	2300      	movs	r3, #0
   98abe:	617b      	str	r3, [r7, #20]
		peri = PD;
   98ac0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   98ac4:	613b      	str	r3, [r7, #16]
		break;
   98ac6:	e0c6      	b.n	98c56 <DD_RD_SENSIN+0x272>
		
		case SV_SENSIN_ID5:					// BP_feedback
		
		p_io = 30;
   98ac8:	231e      	movs	r3, #30
   98aca:	617b      	str	r3, [r7, #20]
		peri = PC;
   98acc:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   98ad0:	613b      	str	r3, [r7, #16]
		break;
   98ad2:	e0c0      	b.n	98c56 <DD_RD_SENSIN+0x272>
		
		case SV_SENSIN_ID6:					// HP_START
		
		p_io = 6;
   98ad4:	2306      	movs	r3, #6
   98ad6:	617b      	str	r3, [r7, #20]
		peri = PD;
   98ad8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   98adc:	613b      	str	r3, [r7, #16]
		break;
   98ade:	e0ba      	b.n	98c56 <DD_RD_SENSIN+0x272>
		
		case SV_SENSIN_ID7:					//HP_STOP
		p_io = 9;
   98ae0:	2309      	movs	r3, #9
   98ae2:	617b      	str	r3, [r7, #20]
		peri = PD;
   98ae4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   98ae8:	613b      	str	r3, [r7, #16]
		break;
   98aea:	e0b4      	b.n	98c56 <DD_RD_SENSIN+0x272>
		
		case SV_SENSIN_ID8:					//ABD
		p_io = 5;
   98aec:	2305      	movs	r3, #5
   98aee:	617b      	str	r3, [r7, #20]
		peri = PD;
   98af0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   98af4:	613b      	str	r3, [r7, #16]
		break;
   98af6:	e0ae      	b.n	98c56 <DD_RD_SENSIN+0x272>
		
		case SV_SENSIN_ID9:					// holder sense1
		p_io = 8;
   98af8:	2308      	movs	r3, #8
   98afa:	617b      	str	r3, [r7, #20]
		peri = PB;
   98afc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   98b00:	613b      	str	r3, [r7, #16]
		break;
   98b02:	e0a8      	b.n	98c56 <DD_RD_SENSIN+0x272>
		
		case SV_SENSIN_ID10:				// holder sense 2
		
		p_io = 18;
   98b04:	2312      	movs	r3, #18
   98b06:	617b      	str	r3, [r7, #20]
		peri = PB;
   98b08:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   98b0c:	613b      	str	r3, [r7, #16]
		break;
   98b0e:	e0a2      	b.n	98c56 <DD_RD_SENSIN+0x272>
		
		case SV_SENSIN_ID11:					//fpfeedback
		p_io = 26;
   98b10:	231a      	movs	r3, #26
   98b12:	617b      	str	r3, [r7, #20]
		peri = PC;
   98b14:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   98b18:	613b      	str	r3, [r7, #16]
		break;
   98b1a:	e09c      	b.n	98c56 <DD_RD_SENSIN+0x272>
		
		case SV_SENSIN_ID12:		//flow_switch
		p_io =19;
   98b1c:	2313      	movs	r3, #19
   98b1e:	617b      	str	r3, [r7, #20]
		peri =PA;
   98b20:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   98b24:	613b      	str	r3, [r7, #16]
		break;
   98b26:	e096      	b.n	98c56 <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID13: //heparin_feedback
		p_io =3;
   98b28:	2303      	movs	r3, #3
   98b2a:	617b      	str	r3, [r7, #20]
		peri =PD;
   98b2c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   98b30:	613b      	str	r3, [r7, #16]
		break;
   98b32:	e090      	b.n	98c56 <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID14: //bloodpump_door
		p_io =16;
   98b34:	2310      	movs	r3, #16
   98b36:	617b      	str	r3, [r7, #20]
		peri =PB;
   98b38:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   98b3c:	613b      	str	r3, [r7, #16]
		break;
   98b3e:	e08a      	b.n	98c56 <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID15: // bp_inc
		p_io =18;
   98b40:	2312      	movs	r3, #18
   98b42:	617b      	str	r3, [r7, #20]
		peri =PC;
   98b44:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   98b48:	613b      	str	r3, [r7, #16]
		break;
   98b4a:	e084      	b.n	98c56 <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID16: // bp_dec
		p_io =4;
   98b4c:	2304      	movs	r3, #4
   98b4e:	617b      	str	r3, [r7, #20]
		peri =PD;
   98b50:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   98b54:	613b      	str	r3, [r7, #16]
		break;
   98b56:	e07e      	b.n	98c56 <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID17: //venous_clamp_feedback
		p_io =22;
   98b58:	2316      	movs	r3, #22
   98b5a:	617b      	str	r3, [r7, #20]
		peri =PB;
   98b5c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   98b60:	613b      	str	r3, [r7, #16]
		break;
   98b62:	e078      	b.n	98c56 <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID18: //venous_clamp_door
		p_io =10;
   98b64:	230a      	movs	r3, #10
   98b66:	617b      	str	r3, [r7, #20]
		peri =PD;
   98b68:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
   98b6c:	613b      	str	r3, [r7, #16]
		break;
   98b6e:	e072      	b.n	98c56 <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID19:
 		p_io =23;					//B_PROPO_I/F3
   98b70:	2317      	movs	r3, #23
   98b72:	617b      	str	r3, [r7, #20]
 		peri =PB;
   98b74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   98b78:	613b      	str	r3, [r7, #16]
		break;
   98b7a:	e06c      	b.n	98c56 <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID20:  // acid in
		p_io =9;
   98b7c:	2309      	movs	r3, #9
   98b7e:	617b      	str	r3, [r7, #20]
		peri =PB;
   98b80:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   98b84:	613b      	str	r3, [r7, #16]
		
		break;
   98b86:	e066      	b.n	98c56 <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID21:				// bicarb in
		p_io =25;
   98b88:	2319      	movs	r3, #25
   98b8a:	617b      	str	r3, [r7, #20]
		peri =PB;
   98b8c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   98b90:	613b      	str	r3, [r7, #16]
		break;
   98b92:	e060      	b.n	98c56 <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID22:		//cpu2_interrupt
		p_io =24;
   98b94:	2318      	movs	r3, #24
   98b96:	617b      	str	r3, [r7, #20]
		peri =PB;
   98b98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   98b9c:	613b      	str	r3, [r7, #16]
		break;
   98b9e:	e05a      	b.n	98c56 <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID23:		//cpu3_interrupt
			p_io =27;
   98ba0:	231b      	movs	r3, #27
   98ba2:	617b      	str	r3, [r7, #20]
			peri =PB;
   98ba4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   98ba8:	613b      	str	r3, [r7, #16]
		break;
   98baa:	e054      	b.n	98c56 <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID24:		//redundancy_irq
			p_io =24;
   98bac:	2318      	movs	r3, #24
   98bae:	617b      	str	r3, [r7, #20]
			peri =PC;
   98bb0:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   98bb4:	613b      	str	r3, [r7, #16]
		break;
   98bb6:	e04e      	b.n	98c56 <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID25:			//Blood pump manual on off
		p_io =14;
   98bb8:	230e      	movs	r3, #14
   98bba:	617b      	str	r3, [r7, #20]
		peri =PA;
   98bbc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   98bc0:	613b      	str	r3, [r7, #16]
		break;
   98bc2:	e048      	b.n	98c56 <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID26:				//blood detector
			p_io =15;
   98bc4:	230f      	movs	r3, #15
   98bc6:	617b      	str	r3, [r7, #20]
			peri =PB;
   98bc8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   98bcc:	613b      	str	r3, [r7, #16]
		break;
   98bce:	e042      	b.n	98c56 <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID27:			//blood_leak_detector
		p_io =29;
   98bd0:	231d      	movs	r3, #29
   98bd2:	617b      	str	r3, [r7, #20]
		peri =PC;
   98bd4:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   98bd8:	613b      	str	r3, [r7, #16]
		break;
   98bda:	e03c      	b.n	98c56 <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID28:			//ufpump_ic_fault
		p_io =20;
   98bdc:	2314      	movs	r3, #20
   98bde:	617b      	str	r3, [r7, #20]
		peri =PC;
   98be0:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   98be4:	613b      	str	r3, [r7, #16]
		break;
   98be6:	e036      	b.n	98c56 <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID29:			//ufpump_home
		p_io =17;
   98be8:	2311      	movs	r3, #17
   98bea:	617b      	str	r3, [r7, #20]
		peri =PC;
   98bec:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   98bf0:	613b      	str	r3, [r7, #16]
		break;
   98bf2:	e030      	b.n	98c56 <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID30:			//disinfectant_fdbck
		p_io =19;
   98bf4:	2313      	movs	r3, #19
   98bf6:	617b      	str	r3, [r7, #20]
		peri =PC;
   98bf8:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   98bfc:	613b      	str	r3, [r7, #16]
		break;
   98bfe:	e02a      	b.n	98c56 <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID31:			//b_hemo_f4
		p_io =16;
   98c00:	2310      	movs	r3, #16
   98c02:	617b      	str	r3, [r7, #20]
		peri =PA;
   98c04:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   98c08:	613b      	str	r3, [r7, #16]
		break;
   98c0a:	e024      	b.n	98c56 <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID32:			//b_hemo_f3
		p_io =24;
   98c0c:	2318      	movs	r3, #24
   98c0e:	617b      	str	r3, [r7, #20]
		peri =PA;
   98c10:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   98c14:	613b      	str	r3, [r7, #16]
		break;
   98c16:	e01e      	b.n	98c56 <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID33:			//B_PROPO_I/F4
		p_io =21;
   98c18:	2315      	movs	r3, #21
   98c1a:	617b      	str	r3, [r7, #20]
		peri =PB;
   98c1c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   98c20:	613b      	str	r3, [r7, #16]
		break;
   98c22:	e018      	b.n	98c56 <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID34:			//Calibration
		p_io =10;
   98c24:	230a      	movs	r3, #10
   98c26:	617b      	str	r3, [r7, #20]
		peri =PA;
   98c28:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   98c2c:	613b      	str	r3, [r7, #16]
		break;
   98c2e:	e012      	b.n	98c56 <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID35:			//BATTERY_LOAD_CURRENT
		p_io =2;
   98c30:	2302      	movs	r3, #2
   98c32:	617b      	str	r3, [r7, #20]
		peri =PA;
   98c34:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   98c38:	613b      	str	r3, [r7, #16]
		break;
   98c3a:	e00c      	b.n	98c56 <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID36:			//POWER_FAILURE_INDICATION
		p_io =26;
   98c3c:	231a      	movs	r3, #26
   98c3e:	617b      	str	r3, [r7, #20]
		peri =PB;
   98c40:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   98c44:	613b      	str	r3, [r7, #16]
		break;
   98c46:	e006      	b.n	98c56 <DD_RD_SENSIN+0x272>
		case SV_SENSIN_ID37:			//SYSTEM_SHUT_DOWN
		p_io =4;
   98c48:	2304      	movs	r3, #4
   98c4a:	617b      	str	r3, [r7, #20]
			peri =PA;
   98c4c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   98c50:	613b      	str	r3, [r7, #16]
		break;
   98c52:	e000      	b.n	98c56 <DD_RD_SENSIN+0x272>
		default:
		break;
   98c54:	bf00      	nop
	}
	
	pio_val = DD_READ_PIO(peri, p_io);
   98c56:	6938      	ldr	r0, [r7, #16]
   98c58:	6979      	ldr	r1, [r7, #20]
   98c5a:	4b04      	ldr	r3, [pc, #16]	; (98c6c <DD_RD_SENSIN+0x288>)
   98c5c:	4798      	blx	r3
   98c5e:	4603      	mov	r3, r0
   98c60:	73fb      	strb	r3, [r7, #15]
	
	return pio_val;
   98c62:	7bfb      	ldrb	r3, [r7, #15]
	
}
   98c64:	4618      	mov	r0, r3
   98c66:	3718      	adds	r7, #24
   98c68:	46bd      	mov	sp, r7
   98c6a:	bd80      	pop	{r7, pc}
   98c6c:	00097159 	.word	0x00097159

00098c70 <DD_CONSOLE_TX>:



uint8_t DD_CONSOLE_TX(uint8_t sv_consoleTxdatabyte)
{
   98c70:	b580      	push	{r7, lr}
   98c72:	b084      	sub	sp, #16
   98c74:	af00      	add	r7, sp, #0
   98c76:	4603      	mov	r3, r0
   98c78:	71fb      	strb	r3, [r7, #7]
	uint8_t sv_retval = 1;
   98c7a:	2301      	movs	r3, #1
   98c7c:	73fb      	strb	r3, [r7, #15]
	sv_retval = (uint8_t) DD_TX_UART(sv_consoleTxdatabyte);
   98c7e:	79fb      	ldrb	r3, [r7, #7]
   98c80:	4618      	mov	r0, r3
   98c82:	4b04      	ldr	r3, [pc, #16]	; (98c94 <DD_CONSOLE_TX+0x24>)
   98c84:	4798      	blx	r3
   98c86:	4603      	mov	r3, r0
   98c88:	73fb      	strb	r3, [r7, #15]
	
	return sv_retval;
   98c8a:	7bfb      	ldrb	r3, [r7, #15]
}
   98c8c:	4618      	mov	r0, r3
   98c8e:	3710      	adds	r7, #16
   98c90:	46bd      	mov	sp, r7
   98c92:	bd80      	pop	{r7, pc}
   98c94:	00099afd 	.word	0x00099afd

00098c98 <DD_CONSOLE_RX>:

uint8_t DD_CONSOLE_RX(uint8_t dd_consoleRxdatabyte )
{
   98c98:	b580      	push	{r7, lr}
   98c9a:	b084      	sub	sp, #16
   98c9c:	af00      	add	r7, sp, #0
   98c9e:	4603      	mov	r3, r0
   98ca0:	71fb      	strb	r3, [r7, #7]
	uint8_t sv_consoleRxdatabyte = dd_consoleRxdatabyte;
   98ca2:	79fb      	ldrb	r3, [r7, #7]
   98ca4:	73fb      	strb	r3, [r7, #15]
	
	sv_console_receivedbyte(sv_consoleRxdatabyte);
   98ca6:	7bfb      	ldrb	r3, [r7, #15]
   98ca8:	4618      	mov	r0, r3
   98caa:	4b03      	ldr	r3, [pc, #12]	; (98cb8 <DD_CONSOLE_RX+0x20>)
   98cac:	4798      	blx	r3
	
	
	return 1;
   98cae:	2301      	movs	r3, #1
}
   98cb0:	4618      	mov	r0, r3
   98cb2:	3710      	adds	r7, #16
   98cb4:	46bd      	mov	sp, r7
   98cb6:	bd80      	pop	{r7, pc}
   98cb8:	0009a029 	.word	0x0009a029

00098cbc <DD_CONFIG_TIMER>:

uint8_t DD_CONFIG_TIMER(uint8_t timer_no, uint8_t timer_res)
{
   98cbc:	b590      	push	{r4, r7, lr}
   98cbe:	b089      	sub	sp, #36	; 0x24
   98cc0:	af00      	add	r7, sp, #0
   98cc2:	4603      	mov	r3, r0
   98cc4:	460a      	mov	r2, r1
   98cc6:	71fb      	strb	r3, [r7, #7]
   98cc8:	4613      	mov	r3, r2
   98cca:	71bb      	strb	r3, [r7, #6]
	uint32_t ch_no=0,rc;
   98ccc:	2300      	movs	r3, #0
   98cce:	61fb      	str	r3, [r7, #28]
	double rc_cal;
	rc_cal = ((84000000/(128 * (1/timer_res))) -1);
   98cd0:	79bb      	ldrb	r3, [r7, #6]
   98cd2:	2201      	movs	r2, #1
   98cd4:	fb92 f3f3 	sdiv	r3, r2, r3
   98cd8:	01db      	lsls	r3, r3, #7
   98cda:	4a1a      	ldr	r2, [pc, #104]	; (98d44 <DD_CONFIG_TIMER+0x88>)
   98cdc:	fb92 f3f3 	sdiv	r3, r2, r3
   98ce0:	1e5a      	subs	r2, r3, #1
   98ce2:	4b19      	ldr	r3, [pc, #100]	; (98d48 <DD_CONFIG_TIMER+0x8c>)
   98ce4:	4610      	mov	r0, r2
   98ce6:	4798      	blx	r3
   98ce8:	4602      	mov	r2, r0
   98cea:	460b      	mov	r3, r1
   98cec:	e9c7 2304 	strd	r2, r3, [r7, #16]
	rc = rc_cal;
   98cf0:	4b16      	ldr	r3, [pc, #88]	; (98d4c <DD_CONFIG_TIMER+0x90>)
   98cf2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   98cf6:	4798      	blx	r3
   98cf8:	4603      	mov	r3, r0
   98cfa:	60fb      	str	r3, [r7, #12]

	switch (timer_no)
   98cfc:	79fb      	ldrb	r3, [r7, #7]
   98cfe:	2b01      	cmp	r3, #1
   98d00:	d00a      	beq.n	98d18 <DD_CONFIG_TIMER+0x5c>
   98d02:	2b02      	cmp	r3, #2
   98d04:	d011      	beq.n	98d2a <DD_CONFIG_TIMER+0x6e>
   98d06:	2b00      	cmp	r3, #0
   98d08:	d118      	bne.n	98d3c <DD_CONFIG_TIMER+0x80>
	{
		case 0:
		
		DD_SET_TIMER( TC0, ch_no, TC0_IRQn, rc);
   98d0a:	4811      	ldr	r0, [pc, #68]	; (98d50 <DD_CONFIG_TIMER+0x94>)
   98d0c:	69f9      	ldr	r1, [r7, #28]
   98d0e:	221b      	movs	r2, #27
   98d10:	68fb      	ldr	r3, [r7, #12]
   98d12:	4c10      	ldr	r4, [pc, #64]	; (98d54 <DD_CONFIG_TIMER+0x98>)
   98d14:	47a0      	blx	r4
		break;
   98d16:	e011      	b.n	98d3c <DD_CONFIG_TIMER+0x80>
		
		case 1:
		rc=3281249; //value to get 5sec delay (mlk/128*interrupt frequency)-1 number counts to get 1sec
   98d18:	4b0f      	ldr	r3, [pc, #60]	; (98d58 <DD_CONFIG_TIMER+0x9c>)
   98d1a:	60fb      	str	r3, [r7, #12]
		DD_SET_TIMER( TC1, ch_no, TC3_IRQn, rc);
   98d1c:	480f      	ldr	r0, [pc, #60]	; (98d5c <DD_CONFIG_TIMER+0xa0>)
   98d1e:	69f9      	ldr	r1, [r7, #28]
   98d20:	221e      	movs	r2, #30
   98d22:	68fb      	ldr	r3, [r7, #12]
   98d24:	4c0b      	ldr	r4, [pc, #44]	; (98d54 <DD_CONFIG_TIMER+0x98>)
   98d26:	47a0      	blx	r4
		break;
   98d28:	e008      	b.n	98d3c <DD_CONFIG_TIMER+0x80>
		
		case 2:
		
		rc=1968749; //value to get 1sec delay (mlk/128*interrupt frequency)-1 number counts to get 1sec
   98d2a:	4b0d      	ldr	r3, [pc, #52]	; (98d60 <DD_CONFIG_TIMER+0xa4>)
   98d2c:	60fb      	str	r3, [r7, #12]
		DD_SET_TIMER(TC2, ch_no, TC6_IRQn, rc);
   98d2e:	480d      	ldr	r0, [pc, #52]	; (98d64 <DD_CONFIG_TIMER+0xa8>)
   98d30:	69f9      	ldr	r1, [r7, #28]
   98d32:	2221      	movs	r2, #33	; 0x21
   98d34:	68fb      	ldr	r3, [r7, #12]
   98d36:	4c07      	ldr	r4, [pc, #28]	; (98d54 <DD_CONFIG_TIMER+0x98>)
   98d38:	47a0      	blx	r4
		
		break;
   98d3a:	bf00      	nop
		
	}
}
   98d3c:	4618      	mov	r0, r3
   98d3e:	3724      	adds	r7, #36	; 0x24
   98d40:	46bd      	mov	sp, r7
   98d42:	bd90      	pop	{r4, r7, pc}
   98d44:	0501bd00 	.word	0x0501bd00
   98d48:	000a600d 	.word	0x000a600d
   98d4c:	000a665d 	.word	0x000a665d
   98d50:	40080000 	.word	0x40080000
   98d54:	00099609 	.word	0x00099609
   98d58:	00321161 	.word	0x00321161
   98d5c:	40084000 	.word	0x40084000
   98d60:	001e0a6d 	.word	0x001e0a6d
   98d64:	40088000 	.word	0x40088000

00098d68 <DD_SET_FLOW_PATH>:
	}
	
}

uint8_t DD_SET_FLOW_PATH(sv_flowpathtype sv_flowpath)
{
   98d68:	b580      	push	{r7, lr}
   98d6a:	b082      	sub	sp, #8
   98d6c:	af00      	add	r7, sp, #0
   98d6e:	4603      	mov	r3, r0
   98d70:	71fb      	strb	r3, [r7, #7]
	static  bool valve_status = 0;
	static bool alarm_on = false;
	
	
	switch(sv_flowpath)
   98d72:	79fb      	ldrb	r3, [r7, #7]
   98d74:	3b01      	subs	r3, #1
   98d76:	2b14      	cmp	r3, #20
   98d78:	f200 8317 	bhi.w	993aa <DD_SET_FLOW_PATH+0x642>
   98d7c:	a201      	add	r2, pc, #4	; (adr r2, 98d84 <DD_SET_FLOW_PATH+0x1c>)
   98d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   98d82:	bf00      	nop
   98d84:	00098e8b 	.word	0x00098e8b
   98d88:	00098f05 	.word	0x00098f05
   98d8c:	00098f7f 	.word	0x00098f7f
   98d90:	00098fdb 	.word	0x00098fdb
   98d94:	0009904d 	.word	0x0009904d
   98d98:	000990ff 	.word	0x000990ff
   98d9c:	000991b1 	.word	0x000991b1
   98da0:	000993ab 	.word	0x000993ab
   98da4:	000993ab 	.word	0x000993ab
   98da8:	00099295 	.word	0x00099295
   98dac:	000992df 	.word	0x000992df
   98db0:	000993ab 	.word	0x000993ab
   98db4:	000993ab 	.word	0x000993ab
   98db8:	000993ab 	.word	0x000993ab
   98dbc:	000993ab 	.word	0x000993ab
   98dc0:	000993ab 	.word	0x000993ab
   98dc4:	00098e0b 	.word	0x00098e0b
   98dc8:	00099329 	.word	0x00099329
   98dcc:	00098dd9 	.word	0x00098dd9
   98dd0:	000993ab 	.word	0x000993ab
   98dd4:	00099219 	.word	0x00099219
	{
			
		case FLOW_PATH_BC_ALARM:
			DD_RESET_VALVE (VALVE_ID5);
   98dd8:	2005      	movs	r0, #5
   98dda:	4b97      	ldr	r3, [pc, #604]	; (99038 <DD_SET_FLOW_PATH+0x2d0>)
   98ddc:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID6);
   98dde:	2006      	movs	r0, #6
   98de0:	4b95      	ldr	r3, [pc, #596]	; (99038 <DD_SET_FLOW_PATH+0x2d0>)
   98de2:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID7);
   98de4:	2007      	movs	r0, #7
   98de6:	4b94      	ldr	r3, [pc, #592]	; (99038 <DD_SET_FLOW_PATH+0x2d0>)
   98de8:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID8);
   98dea:	2008      	movs	r0, #8
   98dec:	4b92      	ldr	r3, [pc, #584]	; (99038 <DD_SET_FLOW_PATH+0x2d0>)
   98dee:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID9);
   98df0:	2009      	movs	r0, #9
   98df2:	4b91      	ldr	r3, [pc, #580]	; (99038 <DD_SET_FLOW_PATH+0x2d0>)
   98df4:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID10);
   98df6:	200a      	movs	r0, #10
   98df8:	4b8f      	ldr	r3, [pc, #572]	; (99038 <DD_SET_FLOW_PATH+0x2d0>)
   98dfa:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID11);
   98dfc:	200b      	movs	r0, #11
   98dfe:	4b8e      	ldr	r3, [pc, #568]	; (99038 <DD_SET_FLOW_PATH+0x2d0>)
   98e00:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID12);
   98e02:	200c      	movs	r0, #12
   98e04:	4b8c      	ldr	r3, [pc, #560]	; (99038 <DD_SET_FLOW_PATH+0x2d0>)
   98e06:	4798      	blx	r3
		break;
   98e08:	e2cf      	b.n	993aa <DD_SET_FLOW_PATH+0x642>
				
		case FLOW_PATH_IDLE_RINSE:
	
		DD_RESET_VALVE(VALVE_ID1);
   98e0a:	2001      	movs	r0, #1
   98e0c:	4b8a      	ldr	r3, [pc, #552]	; (99038 <DD_SET_FLOW_PATH+0x2d0>)
   98e0e:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID2);
   98e10:	2002      	movs	r0, #2
   98e12:	4b89      	ldr	r3, [pc, #548]	; (99038 <DD_SET_FLOW_PATH+0x2d0>)
   98e14:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID3);
   98e16:	2003      	movs	r0, #3
   98e18:	4b87      	ldr	r3, [pc, #540]	; (99038 <DD_SET_FLOW_PATH+0x2d0>)
   98e1a:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID4);
   98e1c:	2004      	movs	r0, #4
   98e1e:	4b86      	ldr	r3, [pc, #536]	; (99038 <DD_SET_FLOW_PATH+0x2d0>)
   98e20:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID5);
   98e22:	2005      	movs	r0, #5
   98e24:	4b84      	ldr	r3, [pc, #528]	; (99038 <DD_SET_FLOW_PATH+0x2d0>)
   98e26:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID6);
   98e28:	2006      	movs	r0, #6
   98e2a:	4b83      	ldr	r3, [pc, #524]	; (99038 <DD_SET_FLOW_PATH+0x2d0>)
   98e2c:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID7);
   98e2e:	2007      	movs	r0, #7
   98e30:	4b81      	ldr	r3, [pc, #516]	; (99038 <DD_SET_FLOW_PATH+0x2d0>)
   98e32:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID8);
   98e34:	2008      	movs	r0, #8
   98e36:	4b80      	ldr	r3, [pc, #512]	; (99038 <DD_SET_FLOW_PATH+0x2d0>)
   98e38:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID9);
   98e3a:	2009      	movs	r0, #9
   98e3c:	4b7e      	ldr	r3, [pc, #504]	; (99038 <DD_SET_FLOW_PATH+0x2d0>)
   98e3e:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID10);
   98e40:	200a      	movs	r0, #10
   98e42:	4b7d      	ldr	r3, [pc, #500]	; (99038 <DD_SET_FLOW_PATH+0x2d0>)
   98e44:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID11);
   98e46:	200b      	movs	r0, #11
   98e48:	4b7b      	ldr	r3, [pc, #492]	; (99038 <DD_SET_FLOW_PATH+0x2d0>)
   98e4a:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID12);
   98e4c:	200c      	movs	r0, #12
   98e4e:	4b7a      	ldr	r3, [pc, #488]	; (99038 <DD_SET_FLOW_PATH+0x2d0>)
   98e50:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID13);
   98e52:	200d      	movs	r0, #13
   98e54:	4b78      	ldr	r3, [pc, #480]	; (99038 <DD_SET_FLOW_PATH+0x2d0>)
   98e56:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID14);
   98e58:	200e      	movs	r0, #14
   98e5a:	4b77      	ldr	r3, [pc, #476]	; (99038 <DD_SET_FLOW_PATH+0x2d0>)
   98e5c:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID15);
   98e5e:	200f      	movs	r0, #15
   98e60:	4b75      	ldr	r3, [pc, #468]	; (99038 <DD_SET_FLOW_PATH+0x2d0>)
   98e62:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID16);
   98e64:	2010      	movs	r0, #16
   98e66:	4b74      	ldr	r3, [pc, #464]	; (99038 <DD_SET_FLOW_PATH+0x2d0>)
   98e68:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID17);
   98e6a:	2011      	movs	r0, #17
   98e6c:	4b72      	ldr	r3, [pc, #456]	; (99038 <DD_SET_FLOW_PATH+0x2d0>)
   98e6e:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID18);
   98e70:	2012      	movs	r0, #18
   98e72:	4b71      	ldr	r3, [pc, #452]	; (99038 <DD_SET_FLOW_PATH+0x2d0>)
   98e74:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID19);
   98e76:	2013      	movs	r0, #19
   98e78:	4b6f      	ldr	r3, [pc, #444]	; (99038 <DD_SET_FLOW_PATH+0x2d0>)
   98e7a:	4798      	blx	r3
	
		DD_RESET_PUMP(DCMOTOR2);
   98e7c:	2002      	movs	r0, #2
   98e7e:	4b6f      	ldr	r3, [pc, #444]	; (9903c <DD_SET_FLOW_PATH+0x2d4>)
   98e80:	4798      	blx	r3
		DD_RESET_PUMP(DCMOTOR1);
   98e82:	2001      	movs	r0, #1
   98e84:	4b6d      	ldr	r3, [pc, #436]	; (9903c <DD_SET_FLOW_PATH+0x2d4>)
   98e86:	4798      	blx	r3
				
				
		break;
   98e88:	e28f      	b.n	993aa <DD_SET_FLOW_PATH+0x642>
		case V15_FLUSH:
		
		DD_SET_VALVE(VALVE_ID1);
   98e8a:	2001      	movs	r0, #1
   98e8c:	4b6c      	ldr	r3, [pc, #432]	; (99040 <DD_SET_FLOW_PATH+0x2d8>)
   98e8e:	4798      	blx	r3
	//	DD_RESET_VALVE (VALVE_ID2);
		DD_RESET_VALVE (VALVE_ID3);
   98e90:	2003      	movs	r0, #3
   98e92:	4b69      	ldr	r3, [pc, #420]	; (99038 <DD_SET_FLOW_PATH+0x2d0>)
   98e94:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID4);
   98e96:	2004      	movs	r0, #4
   98e98:	4b67      	ldr	r3, [pc, #412]	; (99038 <DD_SET_FLOW_PATH+0x2d0>)
   98e9a:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID5);
   98e9c:	2005      	movs	r0, #5
   98e9e:	4b66      	ldr	r3, [pc, #408]	; (99038 <DD_SET_FLOW_PATH+0x2d0>)
   98ea0:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID6);
   98ea2:	2006      	movs	r0, #6
   98ea4:	4b64      	ldr	r3, [pc, #400]	; (99038 <DD_SET_FLOW_PATH+0x2d0>)
   98ea6:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID7);
   98ea8:	2007      	movs	r0, #7
   98eaa:	4b63      	ldr	r3, [pc, #396]	; (99038 <DD_SET_FLOW_PATH+0x2d0>)
   98eac:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID8);
   98eae:	2008      	movs	r0, #8
   98eb0:	4b61      	ldr	r3, [pc, #388]	; (99038 <DD_SET_FLOW_PATH+0x2d0>)
   98eb2:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID9);
   98eb4:	2009      	movs	r0, #9
   98eb6:	4b60      	ldr	r3, [pc, #384]	; (99038 <DD_SET_FLOW_PATH+0x2d0>)
   98eb8:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID10);
   98eba:	200a      	movs	r0, #10
   98ebc:	4b5e      	ldr	r3, [pc, #376]	; (99038 <DD_SET_FLOW_PATH+0x2d0>)
   98ebe:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID11);
   98ec0:	200b      	movs	r0, #11
   98ec2:	4b5d      	ldr	r3, [pc, #372]	; (99038 <DD_SET_FLOW_PATH+0x2d0>)
   98ec4:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID12);
   98ec6:	200c      	movs	r0, #12
   98ec8:	4b5b      	ldr	r3, [pc, #364]	; (99038 <DD_SET_FLOW_PATH+0x2d0>)
   98eca:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID13);
   98ecc:	200d      	movs	r0, #13
   98ece:	4b5a      	ldr	r3, [pc, #360]	; (99038 <DD_SET_FLOW_PATH+0x2d0>)
   98ed0:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID14);
   98ed2:	200e      	movs	r0, #14
   98ed4:	4b58      	ldr	r3, [pc, #352]	; (99038 <DD_SET_FLOW_PATH+0x2d0>)
   98ed6:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID15);
   98ed8:	200f      	movs	r0, #15
   98eda:	4b59      	ldr	r3, [pc, #356]	; (99040 <DD_SET_FLOW_PATH+0x2d8>)
   98edc:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID16); 
   98ede:	2010      	movs	r0, #16
   98ee0:	4b55      	ldr	r3, [pc, #340]	; (99038 <DD_SET_FLOW_PATH+0x2d0>)
   98ee2:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID17);
   98ee4:	2011      	movs	r0, #17
   98ee6:	4b54      	ldr	r3, [pc, #336]	; (99038 <DD_SET_FLOW_PATH+0x2d0>)
   98ee8:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID18);
   98eea:	2012      	movs	r0, #18
   98eec:	4b54      	ldr	r3, [pc, #336]	; (99040 <DD_SET_FLOW_PATH+0x2d8>)
   98eee:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID19);
   98ef0:	2013      	movs	r0, #19
   98ef2:	4b51      	ldr	r3, [pc, #324]	; (99038 <DD_SET_FLOW_PATH+0x2d0>)
   98ef4:	4798      	blx	r3
		
		DD_RESET_PUMP(DCMOTOR2);
   98ef6:	2002      	movs	r0, #2
   98ef8:	4b50      	ldr	r3, [pc, #320]	; (9903c <DD_SET_FLOW_PATH+0x2d4>)
   98efa:	4798      	blx	r3
		DD_RESET_PUMP(DCMOTOR1);
   98efc:	2001      	movs	r0, #1
   98efe:	4b4f      	ldr	r3, [pc, #316]	; (9903c <DD_SET_FLOW_PATH+0x2d4>)
   98f00:	4798      	blx	r3
		
		
		break;
   98f02:	e252      	b.n	993aa <DD_SET_FLOW_PATH+0x642>
		
		case V2_FLUSH:
		
		DD_SET_VALVE(VALVE_ID1);
   98f04:	2001      	movs	r0, #1
   98f06:	4b4e      	ldr	r3, [pc, #312]	; (99040 <DD_SET_FLOW_PATH+0x2d8>)
   98f08:	4798      	blx	r3
	//	DD_SET_VALVE (VALVE_ID2);
		DD_RESET_VALVE (VALVE_ID3);
   98f0a:	2003      	movs	r0, #3
   98f0c:	4b4a      	ldr	r3, [pc, #296]	; (99038 <DD_SET_FLOW_PATH+0x2d0>)
   98f0e:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID4);
   98f10:	2004      	movs	r0, #4
   98f12:	4b49      	ldr	r3, [pc, #292]	; (99038 <DD_SET_FLOW_PATH+0x2d0>)
   98f14:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID5);
   98f16:	2005      	movs	r0, #5
   98f18:	4b47      	ldr	r3, [pc, #284]	; (99038 <DD_SET_FLOW_PATH+0x2d0>)
   98f1a:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID6);
   98f1c:	2006      	movs	r0, #6
   98f1e:	4b46      	ldr	r3, [pc, #280]	; (99038 <DD_SET_FLOW_PATH+0x2d0>)
   98f20:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID7);
   98f22:	2007      	movs	r0, #7
   98f24:	4b44      	ldr	r3, [pc, #272]	; (99038 <DD_SET_FLOW_PATH+0x2d0>)
   98f26:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID8);
   98f28:	2008      	movs	r0, #8
   98f2a:	4b43      	ldr	r3, [pc, #268]	; (99038 <DD_SET_FLOW_PATH+0x2d0>)
   98f2c:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID9);
   98f2e:	2009      	movs	r0, #9
   98f30:	4b41      	ldr	r3, [pc, #260]	; (99038 <DD_SET_FLOW_PATH+0x2d0>)
   98f32:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID10);
   98f34:	200a      	movs	r0, #10
   98f36:	4b40      	ldr	r3, [pc, #256]	; (99038 <DD_SET_FLOW_PATH+0x2d0>)
   98f38:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID11);
   98f3a:	200b      	movs	r0, #11
   98f3c:	4b3e      	ldr	r3, [pc, #248]	; (99038 <DD_SET_FLOW_PATH+0x2d0>)
   98f3e:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID12);
   98f40:	200c      	movs	r0, #12
   98f42:	4b3d      	ldr	r3, [pc, #244]	; (99038 <DD_SET_FLOW_PATH+0x2d0>)
   98f44:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID13);
   98f46:	200d      	movs	r0, #13
   98f48:	4b3b      	ldr	r3, [pc, #236]	; (99038 <DD_SET_FLOW_PATH+0x2d0>)
   98f4a:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID14);
   98f4c:	200e      	movs	r0, #14
   98f4e:	4b3a      	ldr	r3, [pc, #232]	; (99038 <DD_SET_FLOW_PATH+0x2d0>)
   98f50:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID15);
   98f52:	200f      	movs	r0, #15
   98f54:	4b38      	ldr	r3, [pc, #224]	; (99038 <DD_SET_FLOW_PATH+0x2d0>)
   98f56:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID16);
   98f58:	2010      	movs	r0, #16
   98f5a:	4b37      	ldr	r3, [pc, #220]	; (99038 <DD_SET_FLOW_PATH+0x2d0>)
   98f5c:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID17);
   98f5e:	2011      	movs	r0, #17
   98f60:	4b35      	ldr	r3, [pc, #212]	; (99038 <DD_SET_FLOW_PATH+0x2d0>)
   98f62:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID18);
   98f64:	2012      	movs	r0, #18
   98f66:	4b36      	ldr	r3, [pc, #216]	; (99040 <DD_SET_FLOW_PATH+0x2d8>)
   98f68:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID19);
   98f6a:	2013      	movs	r0, #19
   98f6c:	4b32      	ldr	r3, [pc, #200]	; (99038 <DD_SET_FLOW_PATH+0x2d0>)
   98f6e:	4798      	blx	r3
		
		DD_SET_PUMP(DCMOTOR1);
   98f70:	2001      	movs	r0, #1
   98f72:	4b34      	ldr	r3, [pc, #208]	; (99044 <DD_SET_FLOW_PATH+0x2dc>)
   98f74:	4798      	blx	r3
		DD_RESET_PUMP(DCMOTOR2);
   98f76:	2002      	movs	r0, #2
   98f78:	4b30      	ldr	r3, [pc, #192]	; (9903c <DD_SET_FLOW_PATH+0x2d4>)
   98f7a:	4798      	blx	r3
		
		break;
   98f7c:	e215      	b.n	993aa <DD_SET_FLOW_PATH+0x642>

				//	DD_SET_VALVE(VALVE_ID1);
				//	DD_RESET_VALVE (VALVE_ID2);
			//	DD_RESET_VALVE (VALVE_ID3);
			//	DD_SET_VALVE (VALVE_ID4);
				DD_RESET_VALVE (VALVE_ID5);
   98f7e:	2005      	movs	r0, #5
   98f80:	4b2d      	ldr	r3, [pc, #180]	; (99038 <DD_SET_FLOW_PATH+0x2d0>)
   98f82:	4798      	blx	r3
				DD_RESET_VALVE (VALVE_ID8);
   98f84:	2008      	movs	r0, #8
   98f86:	4b2c      	ldr	r3, [pc, #176]	; (99038 <DD_SET_FLOW_PATH+0x2d0>)
   98f88:	4798      	blx	r3
				DD_RESET_VALVE (VALVE_ID10);
   98f8a:	200a      	movs	r0, #10
   98f8c:	4b2a      	ldr	r3, [pc, #168]	; (99038 <DD_SET_FLOW_PATH+0x2d0>)
   98f8e:	4798      	blx	r3
				DD_RESET_VALVE (VALVE_ID11);
   98f90:	200b      	movs	r0, #11
   98f92:	4b29      	ldr	r3, [pc, #164]	; (99038 <DD_SET_FLOW_PATH+0x2d0>)
   98f94:	4798      	blx	r3
				cl_wait(50);
   98f96:	2032      	movs	r0, #50	; 0x32
   98f98:	4b2b      	ldr	r3, [pc, #172]	; (99048 <DD_SET_FLOW_PATH+0x2e0>)
   98f9a:	4798      	blx	r3
				DD_SET_VALVE (VALVE_ID6);
   98f9c:	2006      	movs	r0, #6
   98f9e:	4b28      	ldr	r3, [pc, #160]	; (99040 <DD_SET_FLOW_PATH+0x2d8>)
   98fa0:	4798      	blx	r3
				DD_SET_VALVE (VALVE_ID7);			
   98fa2:	2007      	movs	r0, #7
   98fa4:	4b26      	ldr	r3, [pc, #152]	; (99040 <DD_SET_FLOW_PATH+0x2d8>)
   98fa6:	4798      	blx	r3
				DD_SET_VALVE (VALVE_ID9);
   98fa8:	2009      	movs	r0, #9
   98faa:	4b25      	ldr	r3, [pc, #148]	; (99040 <DD_SET_FLOW_PATH+0x2d8>)
   98fac:	4798      	blx	r3
				DD_SET_VALVE (VALVE_ID12);
   98fae:	200c      	movs	r0, #12
   98fb0:	4b23      	ldr	r3, [pc, #140]	; (99040 <DD_SET_FLOW_PATH+0x2d8>)
   98fb2:	4798      	blx	r3
				DD_RESET_VALVE (VALVE_ID13);
   98fb4:	200d      	movs	r0, #13
   98fb6:	4b20      	ldr	r3, [pc, #128]	; (99038 <DD_SET_FLOW_PATH+0x2d0>)
   98fb8:	4798      	blx	r3
				DD_RESET_VALVE (VALVE_ID14);
   98fba:	200e      	movs	r0, #14
   98fbc:	4b1e      	ldr	r3, [pc, #120]	; (99038 <DD_SET_FLOW_PATH+0x2d0>)
   98fbe:	4798      	blx	r3

				DD_SET_VALVE (VALVE_ID15);
   98fc0:	200f      	movs	r0, #15
   98fc2:	4b1f      	ldr	r3, [pc, #124]	; (99040 <DD_SET_FLOW_PATH+0x2d8>)
   98fc4:	4798      	blx	r3
				DD_RESET_VALVE (VALVE_ID16);
   98fc6:	2010      	movs	r0, #16
   98fc8:	4b1b      	ldr	r3, [pc, #108]	; (99038 <DD_SET_FLOW_PATH+0x2d0>)
   98fca:	4798      	blx	r3
				DD_SET_VALVE (VALVE_ID17);
   98fcc:	2011      	movs	r0, #17
   98fce:	4b1c      	ldr	r3, [pc, #112]	; (99040 <DD_SET_FLOW_PATH+0x2d8>)
   98fd0:	4798      	blx	r3
				DD_SET_VALVE (VALVE_ID18);
   98fd2:	2012      	movs	r0, #18
   98fd4:	4b1a      	ldr	r3, [pc, #104]	; (99040 <DD_SET_FLOW_PATH+0x2d8>)
   98fd6:	4798      	blx	r3
			//	DD_SET_PUMP(DCMOTOR1);
			//	DD_SET_PUMP(DCMOTOR2);
				
				
				
				break;
   98fd8:	e1e7      	b.n	993aa <DD_SET_FLOW_PATH+0x642>
		
	//	DD_SET_VALVE(VALVE_ID1);
	//	DD_RESET_VALVE (VALVE_ID2);
	//	DD_RESET_VALVE (VALVE_ID3);
	//	DD_SET_VALVE (VALVE_ID4);
		DD_RESET_VALVE (VALVE_ID6);
   98fda:	2006      	movs	r0, #6
   98fdc:	4b16      	ldr	r3, [pc, #88]	; (99038 <DD_SET_FLOW_PATH+0x2d0>)
   98fde:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID7);
   98fe0:	2007      	movs	r0, #7
   98fe2:	4b15      	ldr	r3, [pc, #84]	; (99038 <DD_SET_FLOW_PATH+0x2d0>)
   98fe4:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID9);
   98fe6:	2009      	movs	r0, #9
   98fe8:	4b13      	ldr	r3, [pc, #76]	; (99038 <DD_SET_FLOW_PATH+0x2d0>)
   98fea:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID12);
   98fec:	200c      	movs	r0, #12
   98fee:	4b12      	ldr	r3, [pc, #72]	; (99038 <DD_SET_FLOW_PATH+0x2d0>)
   98ff0:	4798      	blx	r3
		cl_wait(50);
   98ff2:	2032      	movs	r0, #50	; 0x32
   98ff4:	4b14      	ldr	r3, [pc, #80]	; (99048 <DD_SET_FLOW_PATH+0x2e0>)
   98ff6:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID5);
   98ff8:	2005      	movs	r0, #5
   98ffa:	4b11      	ldr	r3, [pc, #68]	; (99040 <DD_SET_FLOW_PATH+0x2d8>)
   98ffc:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID8);
   98ffe:	2008      	movs	r0, #8
   99000:	4b0f      	ldr	r3, [pc, #60]	; (99040 <DD_SET_FLOW_PATH+0x2d8>)
   99002:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID10);
   99004:	200a      	movs	r0, #10
   99006:	4b0e      	ldr	r3, [pc, #56]	; (99040 <DD_SET_FLOW_PATH+0x2d8>)
   99008:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID11);
   9900a:	200b      	movs	r0, #11
   9900c:	4b0c      	ldr	r3, [pc, #48]	; (99040 <DD_SET_FLOW_PATH+0x2d8>)
   9900e:	4798      	blx	r3
		
		DD_RESET_VALVE (VALVE_ID13);
   99010:	200d      	movs	r0, #13
   99012:	4b09      	ldr	r3, [pc, #36]	; (99038 <DD_SET_FLOW_PATH+0x2d0>)
   99014:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID14);
   99016:	200e      	movs	r0, #14
   99018:	4b07      	ldr	r3, [pc, #28]	; (99038 <DD_SET_FLOW_PATH+0x2d0>)
   9901a:	4798      	blx	r3

		DD_SET_VALVE (VALVE_ID15);
   9901c:	200f      	movs	r0, #15
   9901e:	4b08      	ldr	r3, [pc, #32]	; (99040 <DD_SET_FLOW_PATH+0x2d8>)
   99020:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID16);
   99022:	2010      	movs	r0, #16
   99024:	4b04      	ldr	r3, [pc, #16]	; (99038 <DD_SET_FLOW_PATH+0x2d0>)
   99026:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID17);
   99028:	2011      	movs	r0, #17
   9902a:	4b05      	ldr	r3, [pc, #20]	; (99040 <DD_SET_FLOW_PATH+0x2d8>)
   9902c:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID18);
   9902e:	2012      	movs	r0, #18
   99030:	4b03      	ldr	r3, [pc, #12]	; (99040 <DD_SET_FLOW_PATH+0x2d8>)
   99032:	4798      	blx	r3
		
	//	DD_SET_PUMP(DCMOTOR1);
	//	DD_SET_PUMP(DCMOTOR2);
		
		
		break;
   99034:	e1b9      	b.n	993aa <DD_SET_FLOW_PATH+0x642>
   99036:	bf00      	nop
   99038:	000985f9 	.word	0x000985f9
   9903c:	000981c1 	.word	0x000981c1
   99040:	00098539 	.word	0x00098539
   99044:	00098021 	.word	0x00098021
   99048:	00093195 	.word	0x00093195
		
	//	DD_SET_VALVE(VALVE_ID1);
	//	DD_RESET_VALVE (VALVE_ID2);
	//	DD_RESET_VALVE (VALVE_ID3);
	//	DD_RESET_VALVE (VALVE_ID4);
		DD_RESET_VALVE (VALVE_ID5);
   9904c:	2005      	movs	r0, #5
   9904e:	4b8b      	ldr	r3, [pc, #556]	; (9927c <DD_SET_FLOW_PATH+0x514>)
   99050:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID8);
   99052:	2008      	movs	r0, #8
   99054:	4b89      	ldr	r3, [pc, #548]	; (9927c <DD_SET_FLOW_PATH+0x514>)
   99056:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID10);
   99058:	200a      	movs	r0, #10
   9905a:	4b88      	ldr	r3, [pc, #544]	; (9927c <DD_SET_FLOW_PATH+0x514>)
   9905c:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID11);
   9905e:	200b      	movs	r0, #11
   99060:	4b86      	ldr	r3, [pc, #536]	; (9927c <DD_SET_FLOW_PATH+0x514>)
   99062:	4798      	blx	r3
		cl_wait(100);		
   99064:	2064      	movs	r0, #100	; 0x64
   99066:	4b86      	ldr	r3, [pc, #536]	; (99280 <DD_SET_FLOW_PATH+0x518>)
   99068:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID6);
   9906a:	2006      	movs	r0, #6
   9906c:	4b85      	ldr	r3, [pc, #532]	; (99284 <DD_SET_FLOW_PATH+0x51c>)
   9906e:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID7);
   99070:	2007      	movs	r0, #7
   99072:	4b84      	ldr	r3, [pc, #528]	; (99284 <DD_SET_FLOW_PATH+0x51c>)
   99074:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID9);
   99076:	2009      	movs	r0, #9
   99078:	4b82      	ldr	r3, [pc, #520]	; (99284 <DD_SET_FLOW_PATH+0x51c>)
   9907a:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID12);
   9907c:	200c      	movs	r0, #12
   9907e:	4b81      	ldr	r3, [pc, #516]	; (99284 <DD_SET_FLOW_PATH+0x51c>)
   99080:	4798      	blx	r3
	//	DD_SET_VALVE (VALVE_ID13);
	//	DD_SET_VALVE (VALVE_ID14);
		
	//	DD_RESET_VALVE (VALVE_ID16);
		if( ByPass && !isouf)
   99082:	4b81      	ldr	r3, [pc, #516]	; (99288 <DD_SET_FLOW_PATH+0x520>)
   99084:	781b      	ldrb	r3, [r3, #0]
   99086:	2b00      	cmp	r3, #0
   99088:	d010      	beq.n	990ac <DD_SET_FLOW_PATH+0x344>
   9908a:	4b80      	ldr	r3, [pc, #512]	; (9928c <DD_SET_FLOW_PATH+0x524>)
   9908c:	781b      	ldrb	r3, [r3, #0]
   9908e:	f083 0301 	eor.w	r3, r3, #1
   99092:	b2db      	uxtb	r3, r3
   99094:	2b00      	cmp	r3, #0
   99096:	d009      	beq.n	990ac <DD_SET_FLOW_PATH+0x344>
		{
			DD_SET_VALVE (VALVE_ID15);
   99098:	200f      	movs	r0, #15
   9909a:	4b7a      	ldr	r3, [pc, #488]	; (99284 <DD_SET_FLOW_PATH+0x51c>)
   9909c:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID13);
   9909e:	200d      	movs	r0, #13
   990a0:	4b76      	ldr	r3, [pc, #472]	; (9927c <DD_SET_FLOW_PATH+0x514>)
   990a2:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID14);
   990a4:	200e      	movs	r0, #14
   990a6:	4b75      	ldr	r3, [pc, #468]	; (9927c <DD_SET_FLOW_PATH+0x514>)
   990a8:	4798      	blx	r3
   990aa:	e016      	b.n	990da <DD_SET_FLOW_PATH+0x372>
		}
		else if (isouf)
   990ac:	4b77      	ldr	r3, [pc, #476]	; (9928c <DD_SET_FLOW_PATH+0x524>)
   990ae:	781b      	ldrb	r3, [r3, #0]
   990b0:	2b00      	cmp	r3, #0
   990b2:	d009      	beq.n	990c8 <DD_SET_FLOW_PATH+0x360>
		{
			DD_SET_VALVE (VALVE_ID15);
   990b4:	200f      	movs	r0, #15
   990b6:	4b73      	ldr	r3, [pc, #460]	; (99284 <DD_SET_FLOW_PATH+0x51c>)
   990b8:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID13);
   990ba:	200d      	movs	r0, #13
   990bc:	4b6f      	ldr	r3, [pc, #444]	; (9927c <DD_SET_FLOW_PATH+0x514>)
   990be:	4798      	blx	r3
			DD_SET_VALVE (VALVE_ID14);
   990c0:	200e      	movs	r0, #14
   990c2:	4b70      	ldr	r3, [pc, #448]	; (99284 <DD_SET_FLOW_PATH+0x51c>)
   990c4:	4798      	blx	r3
   990c6:	e008      	b.n	990da <DD_SET_FLOW_PATH+0x372>
		}
		else{
			DD_RESET_VALVE (VALVE_ID15);
   990c8:	200f      	movs	r0, #15
   990ca:	4b6c      	ldr	r3, [pc, #432]	; (9927c <DD_SET_FLOW_PATH+0x514>)
   990cc:	4798      	blx	r3
			DD_SET_VALVE (VALVE_ID13);
   990ce:	200d      	movs	r0, #13
   990d0:	4b6c      	ldr	r3, [pc, #432]	; (99284 <DD_SET_FLOW_PATH+0x51c>)
   990d2:	4798      	blx	r3
			DD_SET_VALVE (VALVE_ID14);
   990d4:	200e      	movs	r0, #14
   990d6:	4b6b      	ldr	r3, [pc, #428]	; (99284 <DD_SET_FLOW_PATH+0x51c>)
   990d8:	4798      	blx	r3
		}
		
		
		if( LoopBack)
   990da:	4b6d      	ldr	r3, [pc, #436]	; (99290 <DD_SET_FLOW_PATH+0x528>)
   990dc:	781b      	ldrb	r3, [r3, #0]
   990de:	2b00      	cmp	r3, #0
   990e0:	d006      	beq.n	990f0 <DD_SET_FLOW_PATH+0x388>
		{
			DD_SET_VALVE (VALVE_ID16);	
   990e2:	2010      	movs	r0, #16
   990e4:	4b67      	ldr	r3, [pc, #412]	; (99284 <DD_SET_FLOW_PATH+0x51c>)
   990e6:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID18);
   990e8:	2012      	movs	r0, #18
   990ea:	4b64      	ldr	r3, [pc, #400]	; (9927c <DD_SET_FLOW_PATH+0x514>)
   990ec:	4798      	blx	r3
	//	DD_RESET_VALVE (VALVE_ID19); // commented for testing
		
	//	DD_SET_PUMP(DCMOTOR1);
	//	DD_SET_PUMP(DCMOTOR2);
		
		break;
   990ee:	e15c      	b.n	993aa <DD_SET_FLOW_PATH+0x642>
			DD_SET_VALVE (VALVE_ID16);	
			DD_RESET_VALVE (VALVE_ID18);
		}
		else
		{
			DD_RESET_VALVE (VALVE_ID16);	
   990f0:	2010      	movs	r0, #16
   990f2:	4b62      	ldr	r3, [pc, #392]	; (9927c <DD_SET_FLOW_PATH+0x514>)
   990f4:	4798      	blx	r3
			DD_SET_VALVE (VALVE_ID18);
   990f6:	2012      	movs	r0, #18
   990f8:	4b62      	ldr	r3, [pc, #392]	; (99284 <DD_SET_FLOW_PATH+0x51c>)
   990fa:	4798      	blx	r3
	//	DD_RESET_VALVE (VALVE_ID19); // commented for testing
		
	//	DD_SET_PUMP(DCMOTOR1);
	//	DD_SET_PUMP(DCMOTOR2);
		
		break;
   990fc:	e155      	b.n	993aa <DD_SET_FLOW_PATH+0x642>
	//	DD_SET_VALVE(VALVE_ID1);
	//	DD_RESET_VALVE (VALVE_ID2);
	//	DD_RESET_VALVE (VALVE_ID3);
	//	DD_RESET_VALVE (VALVE_ID4);
	
		DD_RESET_VALVE (VALVE_ID6);
   990fe:	2006      	movs	r0, #6
   99100:	4b5e      	ldr	r3, [pc, #376]	; (9927c <DD_SET_FLOW_PATH+0x514>)
   99102:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID7);
   99104:	2007      	movs	r0, #7
   99106:	4b5d      	ldr	r3, [pc, #372]	; (9927c <DD_SET_FLOW_PATH+0x514>)
   99108:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID9);
   9910a:	2009      	movs	r0, #9
   9910c:	4b5b      	ldr	r3, [pc, #364]	; (9927c <DD_SET_FLOW_PATH+0x514>)
   9910e:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID12);
   99110:	200c      	movs	r0, #12
   99112:	4b5a      	ldr	r3, [pc, #360]	; (9927c <DD_SET_FLOW_PATH+0x514>)
   99114:	4798      	blx	r3
		cl_wait(100);				
   99116:	2064      	movs	r0, #100	; 0x64
   99118:	4b59      	ldr	r3, [pc, #356]	; (99280 <DD_SET_FLOW_PATH+0x518>)
   9911a:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID5);
   9911c:	2005      	movs	r0, #5
   9911e:	4b59      	ldr	r3, [pc, #356]	; (99284 <DD_SET_FLOW_PATH+0x51c>)
   99120:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID8);	
   99122:	2008      	movs	r0, #8
   99124:	4b57      	ldr	r3, [pc, #348]	; (99284 <DD_SET_FLOW_PATH+0x51c>)
   99126:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID10);
   99128:	200a      	movs	r0, #10
   9912a:	4b56      	ldr	r3, [pc, #344]	; (99284 <DD_SET_FLOW_PATH+0x51c>)
   9912c:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID11);
   9912e:	200b      	movs	r0, #11
   99130:	4b54      	ldr	r3, [pc, #336]	; (99284 <DD_SET_FLOW_PATH+0x51c>)
   99132:	4798      	blx	r3
		
	//	DD_SET_VALVE (VALVE_ID13);
	//	DD_SET_VALVE (VALVE_ID14);
	//	DD_SET_VALVE (VALVE_ID15);
	//	DD_RESET_VALVE (VALVE_ID16);
		if( ByPass && !isouf)
   99134:	4b54      	ldr	r3, [pc, #336]	; (99288 <DD_SET_FLOW_PATH+0x520>)
   99136:	781b      	ldrb	r3, [r3, #0]
   99138:	2b00      	cmp	r3, #0
   9913a:	d010      	beq.n	9915e <DD_SET_FLOW_PATH+0x3f6>
   9913c:	4b53      	ldr	r3, [pc, #332]	; (9928c <DD_SET_FLOW_PATH+0x524>)
   9913e:	781b      	ldrb	r3, [r3, #0]
   99140:	f083 0301 	eor.w	r3, r3, #1
   99144:	b2db      	uxtb	r3, r3
   99146:	2b00      	cmp	r3, #0
   99148:	d009      	beq.n	9915e <DD_SET_FLOW_PATH+0x3f6>
		{
			DD_SET_VALVE (VALVE_ID15);
   9914a:	200f      	movs	r0, #15
   9914c:	4b4d      	ldr	r3, [pc, #308]	; (99284 <DD_SET_FLOW_PATH+0x51c>)
   9914e:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID13);
   99150:	200d      	movs	r0, #13
   99152:	4b4a      	ldr	r3, [pc, #296]	; (9927c <DD_SET_FLOW_PATH+0x514>)
   99154:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID14);
   99156:	200e      	movs	r0, #14
   99158:	4b48      	ldr	r3, [pc, #288]	; (9927c <DD_SET_FLOW_PATH+0x514>)
   9915a:	4798      	blx	r3
   9915c:	e016      	b.n	9918c <DD_SET_FLOW_PATH+0x424>
		}
		else if (isouf)
   9915e:	4b4b      	ldr	r3, [pc, #300]	; (9928c <DD_SET_FLOW_PATH+0x524>)
   99160:	781b      	ldrb	r3, [r3, #0]
   99162:	2b00      	cmp	r3, #0
   99164:	d009      	beq.n	9917a <DD_SET_FLOW_PATH+0x412>
		{
			DD_SET_VALVE (VALVE_ID15);	
   99166:	200f      	movs	r0, #15
   99168:	4b46      	ldr	r3, [pc, #280]	; (99284 <DD_SET_FLOW_PATH+0x51c>)
   9916a:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID13);
   9916c:	200d      	movs	r0, #13
   9916e:	4b43      	ldr	r3, [pc, #268]	; (9927c <DD_SET_FLOW_PATH+0x514>)
   99170:	4798      	blx	r3
			DD_SET_VALVE (VALVE_ID14);
   99172:	200e      	movs	r0, #14
   99174:	4b43      	ldr	r3, [pc, #268]	; (99284 <DD_SET_FLOW_PATH+0x51c>)
   99176:	4798      	blx	r3
   99178:	e008      	b.n	9918c <DD_SET_FLOW_PATH+0x424>
		}
		else{
			DD_RESET_VALVE (VALVE_ID15);
   9917a:	200f      	movs	r0, #15
   9917c:	4b3f      	ldr	r3, [pc, #252]	; (9927c <DD_SET_FLOW_PATH+0x514>)
   9917e:	4798      	blx	r3
			DD_SET_VALVE (VALVE_ID13);
   99180:	200d      	movs	r0, #13
   99182:	4b40      	ldr	r3, [pc, #256]	; (99284 <DD_SET_FLOW_PATH+0x51c>)
   99184:	4798      	blx	r3
			DD_SET_VALVE (VALVE_ID14);
   99186:	200e      	movs	r0, #14
   99188:	4b3e      	ldr	r3, [pc, #248]	; (99284 <DD_SET_FLOW_PATH+0x51c>)
   9918a:	4798      	blx	r3
		}
		
		if( LoopBack)
   9918c:	4b40      	ldr	r3, [pc, #256]	; (99290 <DD_SET_FLOW_PATH+0x528>)
   9918e:	781b      	ldrb	r3, [r3, #0]
   99190:	2b00      	cmp	r3, #0
   99192:	d006      	beq.n	991a2 <DD_SET_FLOW_PATH+0x43a>
		{
			DD_SET_VALVE (VALVE_ID16);
   99194:	2010      	movs	r0, #16
   99196:	4b3b      	ldr	r3, [pc, #236]	; (99284 <DD_SET_FLOW_PATH+0x51c>)
   99198:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID18);	
   9919a:	2012      	movs	r0, #18
   9919c:	4b37      	ldr	r3, [pc, #220]	; (9927c <DD_SET_FLOW_PATH+0x514>)
   9919e:	4798      	blx	r3
	//	DD_RESET_VALVE (VALVE_ID19); //// commented for testing
		
	//	DD_SET_PUMP(DCMOTOR1);
	//	DD_SET_PUMP(DCMOTOR2);
		
		break;
   991a0:	e103      	b.n	993aa <DD_SET_FLOW_PATH+0x642>
			DD_RESET_VALVE (VALVE_ID18);	
		}
		else
		{
			
			DD_SET_VALVE (VALVE_ID18);
   991a2:	2012      	movs	r0, #18
   991a4:	4b37      	ldr	r3, [pc, #220]	; (99284 <DD_SET_FLOW_PATH+0x51c>)
   991a6:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID16);		
   991a8:	2010      	movs	r0, #16
   991aa:	4b34      	ldr	r3, [pc, #208]	; (9927c <DD_SET_FLOW_PATH+0x514>)
   991ac:	4798      	blx	r3
	//	DD_RESET_VALVE (VALVE_ID19); //// commented for testing
		
	//	DD_SET_PUMP(DCMOTOR1);
	//	DD_SET_PUMP(DCMOTOR2);
		
		break;
   991ae:	e0fc      	b.n	993aa <DD_SET_FLOW_PATH+0x642>
		case  BC_FLUSH_OPEN:
		
	//	DD_SET_VALVE(VALVE_ID1);
	//	DD_RESET_VALVE (VALVE_ID2);
	//	DD_RESET_VALVE (VALVE_ID3);
		DD_RESET_VALVE (VALVE_ID4);
   991b0:	2004      	movs	r0, #4
   991b2:	4b32      	ldr	r3, [pc, #200]	; (9927c <DD_SET_FLOW_PATH+0x514>)
   991b4:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID5);
   991b6:	2005      	movs	r0, #5
   991b8:	4b32      	ldr	r3, [pc, #200]	; (99284 <DD_SET_FLOW_PATH+0x51c>)
   991ba:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID6);
   991bc:	2006      	movs	r0, #6
   991be:	4b31      	ldr	r3, [pc, #196]	; (99284 <DD_SET_FLOW_PATH+0x51c>)
   991c0:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID7);
   991c2:	2007      	movs	r0, #7
   991c4:	4b2f      	ldr	r3, [pc, #188]	; (99284 <DD_SET_FLOW_PATH+0x51c>)
   991c6:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID8);
   991c8:	2008      	movs	r0, #8
   991ca:	4b2e      	ldr	r3, [pc, #184]	; (99284 <DD_SET_FLOW_PATH+0x51c>)
   991cc:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID9);
   991ce:	2009      	movs	r0, #9
   991d0:	4b2c      	ldr	r3, [pc, #176]	; (99284 <DD_SET_FLOW_PATH+0x51c>)
   991d2:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID10);
   991d4:	200a      	movs	r0, #10
   991d6:	4b2b      	ldr	r3, [pc, #172]	; (99284 <DD_SET_FLOW_PATH+0x51c>)
   991d8:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID11);
   991da:	200b      	movs	r0, #11
   991dc:	4b29      	ldr	r3, [pc, #164]	; (99284 <DD_SET_FLOW_PATH+0x51c>)
   991de:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID12);
   991e0:	200c      	movs	r0, #12
   991e2:	4b28      	ldr	r3, [pc, #160]	; (99284 <DD_SET_FLOW_PATH+0x51c>)
   991e4:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID13);
   991e6:	200d      	movs	r0, #13
   991e8:	4b26      	ldr	r3, [pc, #152]	; (99284 <DD_SET_FLOW_PATH+0x51c>)
   991ea:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID14);
   991ec:	200e      	movs	r0, #14
   991ee:	4b25      	ldr	r3, [pc, #148]	; (99284 <DD_SET_FLOW_PATH+0x51c>)
   991f0:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID15);
   991f2:	200f      	movs	r0, #15
   991f4:	4b23      	ldr	r3, [pc, #140]	; (99284 <DD_SET_FLOW_PATH+0x51c>)
   991f6:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID16);
   991f8:	2010      	movs	r0, #16
   991fa:	4b20      	ldr	r3, [pc, #128]	; (9927c <DD_SET_FLOW_PATH+0x514>)
   991fc:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID17);
   991fe:	2011      	movs	r0, #17
   99200:	4b20      	ldr	r3, [pc, #128]	; (99284 <DD_SET_FLOW_PATH+0x51c>)
   99202:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID18);
   99204:	2012      	movs	r0, #18
   99206:	4b1f      	ldr	r3, [pc, #124]	; (99284 <DD_SET_FLOW_PATH+0x51c>)
   99208:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID19);
   9920a:	2013      	movs	r0, #19
   9920c:	4b1d      	ldr	r3, [pc, #116]	; (99284 <DD_SET_FLOW_PATH+0x51c>)
   9920e:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID20);		
   99210:	2014      	movs	r0, #20
   99212:	4b1c      	ldr	r3, [pc, #112]	; (99284 <DD_SET_FLOW_PATH+0x51c>)
   99214:	4798      	blx	r3
	//	DD_SET_PUMP(DCMOTOR1);
	//	DD_SET_PUMP(DCMOTOR2);
		
		
		break;
   99216:	e0c8      	b.n	993aa <DD_SET_FLOW_PATH+0x642>
		case  BC_FLUSH_OPEN_DIS:
		
		//	DD_SET_VALVE(VALVE_ID1);
		//	DD_RESET_VALVE (VALVE_ID2);
		//	DD_RESET_VALVE (VALVE_ID3);
		DD_SET_VALVE (VALVE_ID4);
   99218:	2004      	movs	r0, #4
   9921a:	4b1a      	ldr	r3, [pc, #104]	; (99284 <DD_SET_FLOW_PATH+0x51c>)
   9921c:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID5);
   9921e:	2005      	movs	r0, #5
   99220:	4b18      	ldr	r3, [pc, #96]	; (99284 <DD_SET_FLOW_PATH+0x51c>)
   99222:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID6);
   99224:	2006      	movs	r0, #6
   99226:	4b17      	ldr	r3, [pc, #92]	; (99284 <DD_SET_FLOW_PATH+0x51c>)
   99228:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID7);
   9922a:	2007      	movs	r0, #7
   9922c:	4b15      	ldr	r3, [pc, #84]	; (99284 <DD_SET_FLOW_PATH+0x51c>)
   9922e:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID8);
   99230:	2008      	movs	r0, #8
   99232:	4b14      	ldr	r3, [pc, #80]	; (99284 <DD_SET_FLOW_PATH+0x51c>)
   99234:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID9);
   99236:	2009      	movs	r0, #9
   99238:	4b12      	ldr	r3, [pc, #72]	; (99284 <DD_SET_FLOW_PATH+0x51c>)
   9923a:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID10);
   9923c:	200a      	movs	r0, #10
   9923e:	4b11      	ldr	r3, [pc, #68]	; (99284 <DD_SET_FLOW_PATH+0x51c>)
   99240:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID11);
   99242:	200b      	movs	r0, #11
   99244:	4b0f      	ldr	r3, [pc, #60]	; (99284 <DD_SET_FLOW_PATH+0x51c>)
   99246:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID12);
   99248:	200c      	movs	r0, #12
   9924a:	4b0e      	ldr	r3, [pc, #56]	; (99284 <DD_SET_FLOW_PATH+0x51c>)
   9924c:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID13);
   9924e:	200d      	movs	r0, #13
   99250:	4b0c      	ldr	r3, [pc, #48]	; (99284 <DD_SET_FLOW_PATH+0x51c>)
   99252:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID14);
   99254:	200e      	movs	r0, #14
   99256:	4b0b      	ldr	r3, [pc, #44]	; (99284 <DD_SET_FLOW_PATH+0x51c>)
   99258:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID15);
   9925a:	200f      	movs	r0, #15
   9925c:	4b09      	ldr	r3, [pc, #36]	; (99284 <DD_SET_FLOW_PATH+0x51c>)
   9925e:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID16);
   99260:	2010      	movs	r0, #16
   99262:	4b08      	ldr	r3, [pc, #32]	; (99284 <DD_SET_FLOW_PATH+0x51c>)
   99264:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID17);
   99266:	2011      	movs	r0, #17
   99268:	4b06      	ldr	r3, [pc, #24]	; (99284 <DD_SET_FLOW_PATH+0x51c>)
   9926a:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID18);
   9926c:	2012      	movs	r0, #18
   9926e:	4b03      	ldr	r3, [pc, #12]	; (9927c <DD_SET_FLOW_PATH+0x514>)
   99270:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID19);
   99272:	2013      	movs	r0, #19
   99274:	4b03      	ldr	r3, [pc, #12]	; (99284 <DD_SET_FLOW_PATH+0x51c>)
   99276:	4798      	blx	r3
		//	DD_SET_PUMP(DCMOTOR1);
		//	DD_SET_PUMP(DCMOTOR2);
		
		
		break;
   99278:	e097      	b.n	993aa <DD_SET_FLOW_PATH+0x642>
   9927a:	bf00      	nop
   9927c:	000985f9 	.word	0x000985f9
   99280:	00093195 	.word	0x00093195
   99284:	00098539 	.word	0x00098539
   99288:	20071b48 	.word	0x20071b48
   9928c:	20071afc 	.word	0x20071afc
   99290:	20071b49 	.word	0x20071b49
		
	//	DD_SET_VALVE(VALVE_ID1);
	//	DD_RESET_VALVE (VALVE_ID2);
	//	DD_RESET_VALVE (VALVE_ID3);
	//	DD_RESET_VALVE (VALVE_ID4);
		DD_RESET_VALVE (VALVE_ID5);
   99294:	2005      	movs	r0, #5
   99296:	4b47      	ldr	r3, [pc, #284]	; (993b4 <DD_SET_FLOW_PATH+0x64c>)
   99298:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID8);
   9929a:	2008      	movs	r0, #8
   9929c:	4b45      	ldr	r3, [pc, #276]	; (993b4 <DD_SET_FLOW_PATH+0x64c>)
   9929e:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID10);
   992a0:	200a      	movs	r0, #10
   992a2:	4b44      	ldr	r3, [pc, #272]	; (993b4 <DD_SET_FLOW_PATH+0x64c>)
   992a4:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID11);
   992a6:	200b      	movs	r0, #11
   992a8:	4b42      	ldr	r3, [pc, #264]	; (993b4 <DD_SET_FLOW_PATH+0x64c>)
   992aa:	4798      	blx	r3
		cl_wait(100);		
   992ac:	2064      	movs	r0, #100	; 0x64
   992ae:	4b42      	ldr	r3, [pc, #264]	; (993b8 <DD_SET_FLOW_PATH+0x650>)
   992b0:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID6);
   992b2:	2006      	movs	r0, #6
   992b4:	4b41      	ldr	r3, [pc, #260]	; (993bc <DD_SET_FLOW_PATH+0x654>)
   992b6:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID7);
   992b8:	2007      	movs	r0, #7
   992ba:	4b40      	ldr	r3, [pc, #256]	; (993bc <DD_SET_FLOW_PATH+0x654>)
   992bc:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID9);
   992be:	2009      	movs	r0, #9
   992c0:	4b3e      	ldr	r3, [pc, #248]	; (993bc <DD_SET_FLOW_PATH+0x654>)
   992c2:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID12);
   992c4:	200c      	movs	r0, #12
   992c6:	4b3d      	ldr	r3, [pc, #244]	; (993bc <DD_SET_FLOW_PATH+0x654>)
   992c8:	4798      	blx	r3
	//	DD_SET_VALVE (VALVE_ID13);
	//	DD_SET_VALVE (VALVE_ID14);
		
		DD_SET_VALVE (VALVE_ID16);
   992ca:	2010      	movs	r0, #16
   992cc:	4b3b      	ldr	r3, [pc, #236]	; (993bc <DD_SET_FLOW_PATH+0x654>)
   992ce:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID15);
   992d0:	200f      	movs	r0, #15
   992d2:	4b38      	ldr	r3, [pc, #224]	; (993b4 <DD_SET_FLOW_PATH+0x64c>)
   992d4:	4798      	blx	r3
	
	//	DD_SET_VALVE (VALVE_ID17);
		DD_RESET_VALVE (VALVE_ID18);
   992d6:	2012      	movs	r0, #18
   992d8:	4b36      	ldr	r3, [pc, #216]	; (993b4 <DD_SET_FLOW_PATH+0x64c>)
   992da:	4798      	blx	r3
	//	DD_RESET_VALVE (VALVE_ID19); // commented for testing
		
	//	DD_SET_PUMP(DCMOTOR1);
	//	DD_SET_PUMP(DCMOTOR2);
		
		break;
   992dc:	e065      	b.n	993aa <DD_SET_FLOW_PATH+0x642>
	//	DD_SET_VALVE(VALVE_ID1);
	//	DD_RESET_VALVE (VALVE_ID2);
	//	DD_RESET_VALVE (VALVE_ID3);
	//	DD_RESET_VALVE (VALVE_ID4);
	
		DD_RESET_VALVE (VALVE_ID6);
   992de:	2006      	movs	r0, #6
   992e0:	4b34      	ldr	r3, [pc, #208]	; (993b4 <DD_SET_FLOW_PATH+0x64c>)
   992e2:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID7);
   992e4:	2007      	movs	r0, #7
   992e6:	4b33      	ldr	r3, [pc, #204]	; (993b4 <DD_SET_FLOW_PATH+0x64c>)
   992e8:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID9);
   992ea:	2009      	movs	r0, #9
   992ec:	4b31      	ldr	r3, [pc, #196]	; (993b4 <DD_SET_FLOW_PATH+0x64c>)
   992ee:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID12);
   992f0:	200c      	movs	r0, #12
   992f2:	4b30      	ldr	r3, [pc, #192]	; (993b4 <DD_SET_FLOW_PATH+0x64c>)
   992f4:	4798      	blx	r3
		cl_wait(100);				
   992f6:	2064      	movs	r0, #100	; 0x64
   992f8:	4b2f      	ldr	r3, [pc, #188]	; (993b8 <DD_SET_FLOW_PATH+0x650>)
   992fa:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID5);
   992fc:	2005      	movs	r0, #5
   992fe:	4b2f      	ldr	r3, [pc, #188]	; (993bc <DD_SET_FLOW_PATH+0x654>)
   99300:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID8);	
   99302:	2008      	movs	r0, #8
   99304:	4b2d      	ldr	r3, [pc, #180]	; (993bc <DD_SET_FLOW_PATH+0x654>)
   99306:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID10);
   99308:	200a      	movs	r0, #10
   9930a:	4b2c      	ldr	r3, [pc, #176]	; (993bc <DD_SET_FLOW_PATH+0x654>)
   9930c:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID11);
   9930e:	200b      	movs	r0, #11
   99310:	4b2a      	ldr	r3, [pc, #168]	; (993bc <DD_SET_FLOW_PATH+0x654>)
   99312:	4798      	blx	r3
		
	//	DD_SET_VALVE (VALVE_ID13);
	//	DD_SET_VALVE (VALVE_ID14);
	//	DD_SET_VALVE (VALVE_ID15);
	//	DD_RESET_VALVE (VALVE_ID16);
		DD_RESET_VALVE (VALVE_ID15);
   99314:	200f      	movs	r0, #15
   99316:	4b27      	ldr	r3, [pc, #156]	; (993b4 <DD_SET_FLOW_PATH+0x64c>)
   99318:	4798      	blx	r3
		DD_SET_VALVE (VALVE_ID16);
   9931a:	2010      	movs	r0, #16
   9931c:	4b27      	ldr	r3, [pc, #156]	; (993bc <DD_SET_FLOW_PATH+0x654>)
   9931e:	4798      	blx	r3
	//	DD_SET_VALVE (VALVE_ID17);
		DD_RESET_VALVE (VALVE_ID18);
   99320:	2012      	movs	r0, #18
   99322:	4b24      	ldr	r3, [pc, #144]	; (993b4 <DD_SET_FLOW_PATH+0x64c>)
   99324:	4798      	blx	r3
	//	DD_RESET_VALVE (VALVE_ID19); //// commented for testing
		
	//	DD_SET_PUMP(DCMOTOR1);
	//	DD_SET_PUMP(DCMOTOR2);
		
		break;
   99326:	e040      	b.n	993aa <DD_SET_FLOW_PATH+0x642>
		
		
		case FLOW_PATH_ISO_UF:
		

		DD_RESET_VALVE (VALVE_ID5);
   99328:	2005      	movs	r0, #5
   9932a:	4b22      	ldr	r3, [pc, #136]	; (993b4 <DD_SET_FLOW_PATH+0x64c>)
   9932c:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID6);
   9932e:	2006      	movs	r0, #6
   99330:	4b20      	ldr	r3, [pc, #128]	; (993b4 <DD_SET_FLOW_PATH+0x64c>)
   99332:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID7);
   99334:	2007      	movs	r0, #7
   99336:	4b1f      	ldr	r3, [pc, #124]	; (993b4 <DD_SET_FLOW_PATH+0x64c>)
   99338:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID8);
   9933a:	2008      	movs	r0, #8
   9933c:	4b1d      	ldr	r3, [pc, #116]	; (993b4 <DD_SET_FLOW_PATH+0x64c>)
   9933e:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID9);
   99340:	2009      	movs	r0, #9
   99342:	4b1c      	ldr	r3, [pc, #112]	; (993b4 <DD_SET_FLOW_PATH+0x64c>)
   99344:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID10);
   99346:	200a      	movs	r0, #10
   99348:	4b1a      	ldr	r3, [pc, #104]	; (993b4 <DD_SET_FLOW_PATH+0x64c>)
   9934a:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID11);
   9934c:	200b      	movs	r0, #11
   9934e:	4b19      	ldr	r3, [pc, #100]	; (993b4 <DD_SET_FLOW_PATH+0x64c>)
   99350:	4798      	blx	r3
		DD_RESET_VALVE (VALVE_ID12);
   99352:	200c      	movs	r0, #12
   99354:	4b17      	ldr	r3, [pc, #92]	; (993b4 <DD_SET_FLOW_PATH+0x64c>)
   99356:	4798      	blx	r3

		if( ByPass)
   99358:	4b19      	ldr	r3, [pc, #100]	; (993c0 <DD_SET_FLOW_PATH+0x658>)
   9935a:	781b      	ldrb	r3, [r3, #0]
   9935c:	2b00      	cmp	r3, #0
   9935e:	d009      	beq.n	99374 <DD_SET_FLOW_PATH+0x60c>
		{
			DD_SET_VALVE (VALVE_ID15);
   99360:	200f      	movs	r0, #15
   99362:	4b16      	ldr	r3, [pc, #88]	; (993bc <DD_SET_FLOW_PATH+0x654>)
   99364:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID13);
   99366:	200d      	movs	r0, #13
   99368:	4b12      	ldr	r3, [pc, #72]	; (993b4 <DD_SET_FLOW_PATH+0x64c>)
   9936a:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID14);
   9936c:	200e      	movs	r0, #14
   9936e:	4b11      	ldr	r3, [pc, #68]	; (993b4 <DD_SET_FLOW_PATH+0x64c>)
   99370:	4798      	blx	r3
   99372:	e008      	b.n	99386 <DD_SET_FLOW_PATH+0x61e>
		}
		else
		{
			DD_RESET_VALVE (VALVE_ID15);	
   99374:	200f      	movs	r0, #15
   99376:	4b0f      	ldr	r3, [pc, #60]	; (993b4 <DD_SET_FLOW_PATH+0x64c>)
   99378:	4798      	blx	r3
			DD_SET_VALVE (VALVE_ID13);
   9937a:	200d      	movs	r0, #13
   9937c:	4b0f      	ldr	r3, [pc, #60]	; (993bc <DD_SET_FLOW_PATH+0x654>)
   9937e:	4798      	blx	r3
			DD_SET_VALVE (VALVE_ID14);
   99380:	200e      	movs	r0, #14
   99382:	4b0e      	ldr	r3, [pc, #56]	; (993bc <DD_SET_FLOW_PATH+0x654>)
   99384:	4798      	blx	r3
		}
		if( LoopBack)
   99386:	4b0f      	ldr	r3, [pc, #60]	; (993c4 <DD_SET_FLOW_PATH+0x65c>)
   99388:	781b      	ldrb	r3, [r3, #0]
   9938a:	2b00      	cmp	r3, #0
   9938c:	d006      	beq.n	9939c <DD_SET_FLOW_PATH+0x634>
		{
			DD_SET_VALVE (VALVE_ID16);
   9938e:	2010      	movs	r0, #16
   99390:	4b0a      	ldr	r3, [pc, #40]	; (993bc <DD_SET_FLOW_PATH+0x654>)
   99392:	4798      	blx	r3
			DD_RESET_VALVE (VALVE_ID18);
   99394:	2012      	movs	r0, #18
   99396:	4b07      	ldr	r3, [pc, #28]	; (993b4 <DD_SET_FLOW_PATH+0x64c>)
   99398:	4798      	blx	r3
		else
		{
			DD_RESET_VALVE (VALVE_ID16);	
			DD_SET_VALVE (VALVE_ID18);
		}
		break;
   9939a:	e005      	b.n	993a8 <DD_SET_FLOW_PATH+0x640>
			DD_SET_VALVE (VALVE_ID16);
			DD_RESET_VALVE (VALVE_ID18);
		}
		else
		{
			DD_RESET_VALVE (VALVE_ID16);	
   9939c:	2010      	movs	r0, #16
   9939e:	4b05      	ldr	r3, [pc, #20]	; (993b4 <DD_SET_FLOW_PATH+0x64c>)
   993a0:	4798      	blx	r3
			DD_SET_VALVE (VALVE_ID18);
   993a2:	2012      	movs	r0, #18
   993a4:	4b05      	ldr	r3, [pc, #20]	; (993bc <DD_SET_FLOW_PATH+0x654>)
   993a6:	4798      	blx	r3
		}
		break;
   993a8:	bf00      	nop
	}
	
	return 0;
   993aa:	2300      	movs	r3, #0
	
}
   993ac:	4618      	mov	r0, r3
   993ae:	3708      	adds	r7, #8
   993b0:	46bd      	mov	sp, r7
   993b2:	bd80      	pop	{r7, pc}
   993b4:	000985f9 	.word	0x000985f9
   993b8:	00093195 	.word	0x00093195
   993bc:	00098539 	.word	0x00098539
   993c0:	20071b48 	.word	0x20071b48
   993c4:	20071b49 	.word	0x20071b49

000993c8 <DD_LATCH_STROBE_X1_X16>:

//uint8_t DD_LATCH_STROBE_X1_X5(void)
uint8_t DD_LATCH_STROBE_X1_X16(void)
{
   993c8:	b580      	push	{r7, lr}
   993ca:	af00      	add	r7, sp, #0
	
	DD_RESET_PIO (PA, 13);
   993cc:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   993d0:	210d      	movs	r1, #13
   993d2:	4b0c      	ldr	r3, [pc, #48]	; (99404 <DD_LATCH_STROBE_X1_X16+0x3c>)
   993d4:	4798      	blx	r3
	cl_wait(2);
   993d6:	2002      	movs	r0, #2
   993d8:	4b0b      	ldr	r3, [pc, #44]	; (99408 <DD_LATCH_STROBE_X1_X16+0x40>)
   993da:	4798      	blx	r3
	DD_SET_PIO (PA, 13);
   993dc:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   993e0:	210d      	movs	r1, #13
   993e2:	4b0a      	ldr	r3, [pc, #40]	; (9940c <DD_LATCH_STROBE_X1_X16+0x44>)
   993e4:	4798      	blx	r3
	cl_wait(2);
   993e6:	2002      	movs	r0, #2
   993e8:	4b07      	ldr	r3, [pc, #28]	; (99408 <DD_LATCH_STROBE_X1_X16+0x40>)
   993ea:	4798      	blx	r3
	DD_RESET_PIO (PA, 13);
   993ec:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   993f0:	210d      	movs	r1, #13
   993f2:	4b04      	ldr	r3, [pc, #16]	; (99404 <DD_LATCH_STROBE_X1_X16+0x3c>)
   993f4:	4798      	blx	r3
	cl_wait(2);
   993f6:	2002      	movs	r0, #2
   993f8:	4b03      	ldr	r3, [pc, #12]	; (99408 <DD_LATCH_STROBE_X1_X16+0x40>)
   993fa:	4798      	blx	r3
	
	return 0;
   993fc:	2300      	movs	r3, #0
}
   993fe:	4618      	mov	r0, r3
   99400:	bd80      	pop	{r7, pc}
   99402:	bf00      	nop
   99404:	000970d5 	.word	0x000970d5
   99408:	00093195 	.word	0x00093195
   9940c:	00097051 	.word	0x00097051

00099410 <DD_LATCH_STROBE_X17_X20>:

uint8_t DD_LATCH_STROBE_X17_X20(void)
{
   99410:	b580      	push	{r7, lr}
   99412:	af00      	add	r7, sp, #0
	
	DD_RESET_PIO (PA, 11);
   99414:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   99418:	210b      	movs	r1, #11
   9941a:	4b0c      	ldr	r3, [pc, #48]	; (9944c <DD_LATCH_STROBE_X17_X20+0x3c>)
   9941c:	4798      	blx	r3
	cl_wait(2);
   9941e:	2002      	movs	r0, #2
   99420:	4b0b      	ldr	r3, [pc, #44]	; (99450 <DD_LATCH_STROBE_X17_X20+0x40>)
   99422:	4798      	blx	r3
	DD_SET_PIO (PA, 11);
   99424:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   99428:	210b      	movs	r1, #11
   9942a:	4b0a      	ldr	r3, [pc, #40]	; (99454 <DD_LATCH_STROBE_X17_X20+0x44>)
   9942c:	4798      	blx	r3
	cl_wait(2);
   9942e:	2002      	movs	r0, #2
   99430:	4b07      	ldr	r3, [pc, #28]	; (99450 <DD_LATCH_STROBE_X17_X20+0x40>)
   99432:	4798      	blx	r3
	DD_RESET_PIO (PA, 11);
   99434:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   99438:	210b      	movs	r1, #11
   9943a:	4b04      	ldr	r3, [pc, #16]	; (9944c <DD_LATCH_STROBE_X17_X20+0x3c>)
   9943c:	4798      	blx	r3
	cl_wait(2);
   9943e:	2002      	movs	r0, #2
   99440:	4b03      	ldr	r3, [pc, #12]	; (99450 <DD_LATCH_STROBE_X17_X20+0x40>)
   99442:	4798      	blx	r3
	
	return 0;
   99444:	2300      	movs	r3, #0
}
   99446:	4618      	mov	r0, r3
   99448:	bd80      	pop	{r7, pc}
   9944a:	bf00      	nop
   9944c:	000970d5 	.word	0x000970d5
   99450:	00093195 	.word	0x00093195
   99454:	00097051 	.word	0x00097051

00099458 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   99458:	b480      	push	{r7}
   9945a:	b083      	sub	sp, #12
   9945c:	af00      	add	r7, sp, #0
   9945e:	4603      	mov	r3, r0
   99460:	6039      	str	r1, [r7, #0]
   99462:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   99464:	f997 3007 	ldrsb.w	r3, [r7, #7]
   99468:	2b00      	cmp	r3, #0
   9946a:	da0b      	bge.n	99484 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   9946c:	490d      	ldr	r1, [pc, #52]	; (994a4 <NVIC_SetPriority+0x4c>)
   9946e:	79fb      	ldrb	r3, [r7, #7]
   99470:	f003 030f 	and.w	r3, r3, #15
   99474:	3b04      	subs	r3, #4
   99476:	683a      	ldr	r2, [r7, #0]
   99478:	b2d2      	uxtb	r2, r2
   9947a:	0112      	lsls	r2, r2, #4
   9947c:	b2d2      	uxtb	r2, r2
   9947e:	440b      	add	r3, r1
   99480:	761a      	strb	r2, [r3, #24]
   99482:	e009      	b.n	99498 <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   99484:	4908      	ldr	r1, [pc, #32]	; (994a8 <NVIC_SetPriority+0x50>)
   99486:	f997 3007 	ldrsb.w	r3, [r7, #7]
   9948a:	683a      	ldr	r2, [r7, #0]
   9948c:	b2d2      	uxtb	r2, r2
   9948e:	0112      	lsls	r2, r2, #4
   99490:	b2d2      	uxtb	r2, r2
   99492:	440b      	add	r3, r1
   99494:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   99498:	370c      	adds	r7, #12
   9949a:	46bd      	mov	sp, r7
   9949c:	f85d 7b04 	ldr.w	r7, [sp], #4
   994a0:	4770      	bx	lr
   994a2:	bf00      	nop
   994a4:	e000ed00 	.word	0xe000ed00
   994a8:	e000e100 	.word	0xe000e100

000994ac <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b> 
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
   994ac:	b580      	push	{r7, lr}
   994ae:	b082      	sub	sp, #8
   994b0:	af00      	add	r7, sp, #0
   994b2:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
   994b4:	687b      	ldr	r3, [r7, #4]
   994b6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   994ba:	d301      	bcc.n	994c0 <SysTick_Config+0x14>
   994bc:	2301      	movs	r3, #1
   994be:	e011      	b.n	994e4 <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
   994c0:	4a0a      	ldr	r2, [pc, #40]	; (994ec <SysTick_Config+0x40>)
   994c2:	687b      	ldr	r3, [r7, #4]
   994c4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   994c8:	3b01      	subs	r3, #1
   994ca:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
   994cc:	f04f 30ff 	mov.w	r0, #4294967295
   994d0:	210f      	movs	r1, #15
   994d2:	4b07      	ldr	r3, [pc, #28]	; (994f0 <SysTick_Config+0x44>)
   994d4:	4798      	blx	r3
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
   994d6:	4b05      	ldr	r3, [pc, #20]	; (994ec <SysTick_Config+0x40>)
   994d8:	2200      	movs	r2, #0
   994da:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
   994dc:	4b03      	ldr	r3, [pc, #12]	; (994ec <SysTick_Config+0x40>)
   994de:	2207      	movs	r2, #7
   994e0:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
   994e2:	2300      	movs	r3, #0
}
   994e4:	4618      	mov	r0, r3
   994e6:	3708      	adds	r7, #8
   994e8:	46bd      	mov	sp, r7
   994ea:	bd80      	pop	{r7, pc}
   994ec:	e000e010 	.word	0xe000e010
   994f0:	00099459 	.word	0x00099459

000994f4 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   994f4:	b480      	push	{r7}
   994f6:	b083      	sub	sp, #12
   994f8:	af00      	add	r7, sp, #0
   994fa:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   994fc:	687b      	ldr	r3, [r7, #4]
   994fe:	2b07      	cmp	r3, #7
   99500:	d825      	bhi.n	9954e <osc_get_rate+0x5a>
   99502:	a201      	add	r2, pc, #4	; (adr r2, 99508 <osc_get_rate+0x14>)
   99504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   99508:	00099529 	.word	0x00099529
   9950c:	0009952f 	.word	0x0009952f
   99510:	00099535 	.word	0x00099535
   99514:	0009953b 	.word	0x0009953b
   99518:	0009953f 	.word	0x0009953f
   9951c:	00099543 	.word	0x00099543
   99520:	00099547 	.word	0x00099547
   99524:	0009954b 	.word	0x0009954b
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   99528:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   9952c:	e010      	b.n	99550 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   9952e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   99532:	e00d      	b.n	99550 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   99534:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   99538:	e00a      	b.n	99550 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   9953a:	4b08      	ldr	r3, [pc, #32]	; (9955c <osc_get_rate+0x68>)
   9953c:	e008      	b.n	99550 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   9953e:	4b08      	ldr	r3, [pc, #32]	; (99560 <osc_get_rate+0x6c>)
   99540:	e006      	b.n	99550 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   99542:	4b08      	ldr	r3, [pc, #32]	; (99564 <osc_get_rate+0x70>)
   99544:	e004      	b.n	99550 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   99546:	4b07      	ldr	r3, [pc, #28]	; (99564 <osc_get_rate+0x70>)
   99548:	e002      	b.n	99550 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   9954a:	4b06      	ldr	r3, [pc, #24]	; (99564 <osc_get_rate+0x70>)
   9954c:	e000      	b.n	99550 <osc_get_rate+0x5c>
#endif
	}

	return 0;
   9954e:	2300      	movs	r3, #0
}
   99550:	4618      	mov	r0, r3
   99552:	370c      	adds	r7, #12
   99554:	46bd      	mov	sp, r7
   99556:	f85d 7b04 	ldr.w	r7, [sp], #4
   9955a:	4770      	bx	lr
   9955c:	003d0900 	.word	0x003d0900
   99560:	007a1200 	.word	0x007a1200
   99564:	00b71b00 	.word	0x00b71b00

00099568 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   99568:	b580      	push	{r7, lr}
   9956a:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   9956c:	2006      	movs	r0, #6
   9956e:	4b04      	ldr	r3, [pc, #16]	; (99580 <sysclk_get_main_hz+0x18>)
   99570:	4798      	blx	r3
   99572:	4602      	mov	r2, r0
   99574:	4613      	mov	r3, r2
   99576:	00db      	lsls	r3, r3, #3
   99578:	1a9b      	subs	r3, r3, r2
   9957a:	005b      	lsls	r3, r3, #1
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   9957c:	4618      	mov	r0, r3
   9957e:	bd80      	pop	{r7, pc}
   99580:	000994f5 	.word	0x000994f5

00099584 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   99584:	b580      	push	{r7, lr}
   99586:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   99588:	4b02      	ldr	r3, [pc, #8]	; (99594 <sysclk_get_cpu_hz+0x10>)
   9958a:	4798      	blx	r3
   9958c:	4603      	mov	r3, r0
   9958e:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   99590:	4618      	mov	r0, r3
   99592:	bd80      	pop	{r7, pc}
   99594:	00099569 	.word	0x00099569

00099598 <DD_INIT_TIMER>:
 */ 
#include "DD_TIMER.h"


void DD_INIT_TIMER()
{
   99598:	b580      	push	{r7, lr}
   9959a:	af00      	add	r7, sp, #0
	TC0->TC_WPMR = 0x54494D00;
   9959c:	4b15      	ldr	r3, [pc, #84]	; (995f4 <DD_INIT_TIMER+0x5c>)
   9959e:	4a16      	ldr	r2, [pc, #88]	; (995f8 <DD_INIT_TIMER+0x60>)
   995a0:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	TC1->TC_WPMR = 0x54494D00;
   995a4:	4b15      	ldr	r3, [pc, #84]	; (995fc <DD_INIT_TIMER+0x64>)
   995a6:	4a14      	ldr	r2, [pc, #80]	; (995f8 <DD_INIT_TIMER+0x60>)
   995a8:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	TC2->TC_WPMR = 0x54494D00;
   995ac:	4b14      	ldr	r3, [pc, #80]	; (99600 <DD_INIT_TIMER+0x68>)
   995ae:	4a12      	ldr	r2, [pc, #72]	; (995f8 <DD_INIT_TIMER+0x60>)
   995b0:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	pmc_enable_periph_clk(ID_TC0);
   995b4:	201b      	movs	r0, #27
   995b6:	4b13      	ldr	r3, [pc, #76]	; (99604 <DD_INIT_TIMER+0x6c>)
   995b8:	4798      	blx	r3
	pmc_enable_periph_clk(ID_TC1);
   995ba:	201c      	movs	r0, #28
   995bc:	4b11      	ldr	r3, [pc, #68]	; (99604 <DD_INIT_TIMER+0x6c>)
   995be:	4798      	blx	r3
	pmc_enable_periph_clk(ID_TC2);
   995c0:	201d      	movs	r0, #29
   995c2:	4b10      	ldr	r3, [pc, #64]	; (99604 <DD_INIT_TIMER+0x6c>)
   995c4:	4798      	blx	r3
	TC0->TC_CHANNEL[0].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   995c6:	4b0b      	ldr	r3, [pc, #44]	; (995f4 <DD_INIT_TIMER+0x5c>)
   995c8:	f24c 0203 	movw	r2, #49155	; 0xc003
   995cc:	605a      	str	r2, [r3, #4]
	//TC0->TC_CHANNEL[1].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
	//TC0->TC_CHANNEL[2].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
	TC1->TC_CHANNEL[0].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   995ce:	4b0b      	ldr	r3, [pc, #44]	; (995fc <DD_INIT_TIMER+0x64>)
   995d0:	f24c 0203 	movw	r2, #49155	; 0xc003
   995d4:	605a      	str	r2, [r3, #4]
	//TC1->TC_CHANNEL[1].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
	//TC1->TC_CHANNEL[2].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
	TC2->TC_CHANNEL[0].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   995d6:	4b0a      	ldr	r3, [pc, #40]	; (99600 <DD_INIT_TIMER+0x68>)
   995d8:	f24c 0203 	movw	r2, #49155	; 0xc003
   995dc:	605a      	str	r2, [r3, #4]
	//TC2->TC_CHANNEL[1].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
	//TC2->TC_CHANNEL[2].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
	
	TC0->TC_CHANNEL[0].TC_IER = TC_IER_CPCS;
   995de:	4b05      	ldr	r3, [pc, #20]	; (995f4 <DD_INIT_TIMER+0x5c>)
   995e0:	2210      	movs	r2, #16
   995e2:	625a      	str	r2, [r3, #36]	; 0x24
	
	TC1->TC_CHANNEL[0].TC_IER = TC_IER_CPCS;
   995e4:	4b05      	ldr	r3, [pc, #20]	; (995fc <DD_INIT_TIMER+0x64>)
   995e6:	2210      	movs	r2, #16
   995e8:	625a      	str	r2, [r3, #36]	; 0x24
//	TC1->TC_CHANNEL[0].TC_IDR = 0xef;		//TC_IDR_COVFS|TC_IDR_CPAS|TC_IDR_ETRGS|TC_IDR_LDRAS|TC_IDR_CPBS|TC_IDR_LDRBS|TC_IDR_LOVRS;
//	TC1->TC_CHANNEL[0].TC_IMR = 0x10;//0x00 | TC_IMR_CPCS;
	
	TC2->TC_CHANNEL[0].TC_IER = TC_IER_CPCS;
   995ea:	4b05      	ldr	r3, [pc, #20]	; (99600 <DD_INIT_TIMER+0x68>)
   995ec:	2210      	movs	r2, #16
   995ee:	625a      	str	r2, [r3, #36]	; 0x24
//	TC2->TC_CHANNEL[0].TC_IDR = TC_IDR_COVFS|TC_IDR_CPAS|TC_IDR_ETRGS|TC_IDR_LDRAS|TC_IDR_CPBS|TC_IDR_LDRBS|TC_IDR_LOVRS;
//	TC2->TC_CHANNEL[0].TC_IMR = 0x00 | TC_IMR_CPCS;
	
}
   995f0:	bd80      	pop	{r7, pc}
   995f2:	bf00      	nop
   995f4:	40080000 	.word	0x40080000
   995f8:	54494d00 	.word	0x54494d00
   995fc:	40084000 	.word	0x40084000
   99600:	40088000 	.word	0x40088000
   99604:	0009adf5 	.word	0x0009adf5

00099608 <DD_SET_TIMER>:




uint8_t DD_SET_TIMER(Tc *tc, uint32_t channel, IRQn_Type irq, uint32_t rc)
{
   99608:	b580      	push	{r7, lr}
   9960a:	b084      	sub	sp, #16
   9960c:	af00      	add	r7, sp, #0
   9960e:	60f8      	str	r0, [r7, #12]
   99610:	60b9      	str	r1, [r7, #8]
   99612:	603b      	str	r3, [r7, #0]
   99614:	4613      	mov	r3, r2
   99616:	71fb      	strb	r3, [r7, #7]
	//printf("inside timer");
	//uint32_t rc = 0; 
	pmc_set_writeprotect(0);
   99618:	2000      	movs	r0, #0
   9961a:	4b15      	ldr	r3, [pc, #84]	; (99670 <DD_SET_TIMER+0x68>)
   9961c:	4798      	blx	r3
	channel=0;
   9961e:	2300      	movs	r3, #0
   99620:	60bb      	str	r3, [r7, #8]
//	pmc_enable_periph_clk(ID_TC6);
	//tc_init(tc, channel, TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4);
	TC2->TC_CHANNEL[0].TC_CMR = TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   99622:	4b14      	ldr	r3, [pc, #80]	; (99674 <DD_SET_TIMER+0x6c>)
   99624:	f24c 0203 	movw	r2, #49155	; 0xc003
   99628:	605a      	str	r2, [r3, #4]
//	rc=656249; //value to get 1sec delay (mlk/128*interrupt frequency)-1 number counts to get 1sec
	tc_write_rc(tc, channel, rc);
   9962a:	68f8      	ldr	r0, [r7, #12]
   9962c:	68b9      	ldr	r1, [r7, #8]
   9962e:	683a      	ldr	r2, [r7, #0]
   99630:	4b11      	ldr	r3, [pc, #68]	; (99678 <DD_SET_TIMER+0x70>)
   99632:	4798      	blx	r3
	tc_start(tc, channel);
   99634:	68f8      	ldr	r0, [r7, #12]
   99636:	68b9      	ldr	r1, [r7, #8]
   99638:	4b10      	ldr	r3, [pc, #64]	; (9967c <DD_SET_TIMER+0x74>)
   9963a:	4798      	blx	r3
	tc_enable_interrupt(tc, channel, TC_IER_CPCS);
   9963c:	68f8      	ldr	r0, [r7, #12]
   9963e:	68b9      	ldr	r1, [r7, #8]
   99640:	2210      	movs	r2, #16
   99642:	4b0f      	ldr	r3, [pc, #60]	; (99680 <DD_SET_TIMER+0x78>)
   99644:	4798      	blx	r3
//	tc_write_rc(TC2, channel, rc);
//	tc_start(TC2, channel);
	if (SysTick_Config(sysclk_get_cpu_hz() / 1000)) {
   99646:	4b0f      	ldr	r3, [pc, #60]	; (99684 <DD_SET_TIMER+0x7c>)
   99648:	4798      	blx	r3
   9964a:	4602      	mov	r2, r0
   9964c:	4b0e      	ldr	r3, [pc, #56]	; (99688 <DD_SET_TIMER+0x80>)
   9964e:	fba3 2302 	umull	r2, r3, r3, r2
   99652:	099b      	lsrs	r3, r3, #6
   99654:	4618      	mov	r0, r3
   99656:	4b0d      	ldr	r3, [pc, #52]	; (9968c <DD_SET_TIMER+0x84>)
   99658:	4798      	blx	r3
   9965a:	4603      	mov	r3, r0
   9965c:	2b00      	cmp	r3, #0
   9965e:	d003      	beq.n	99668 <DD_SET_TIMER+0x60>
		puts("-F- Systick configuration error\r");
   99660:	480b      	ldr	r0, [pc, #44]	; (99690 <DD_SET_TIMER+0x88>)
   99662:	4b0c      	ldr	r3, [pc, #48]	; (99694 <DD_SET_TIMER+0x8c>)
   99664:	4798      	blx	r3
		while (1);
   99666:	e7fe      	b.n	99666 <DD_SET_TIMER+0x5e>
	}
	
}
   99668:	4618      	mov	r0, r3
   9966a:	3710      	adds	r7, #16
   9966c:	46bd      	mov	sp, r7
   9966e:	bd80      	pop	{r7, pc}
   99670:	0009ae79 	.word	0x0009ae79
   99674:	40088000 	.word	0x40088000
   99678:	0009aed1 	.word	0x0009aed1
   9967c:	0009aeb1 	.word	0x0009aeb1
   99680:	0009aef5 	.word	0x0009aef5
   99684:	00099585 	.word	0x00099585
   99688:	10624dd3 	.word	0x10624dd3
   9968c:	000994ad 	.word	0x000994ad
   99690:	000a8cc0 	.word	0x000a8cc0
   99694:	000a6fa9 	.word	0x000a6fa9

00099698 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   99698:	b480      	push	{r7}
   9969a:	b083      	sub	sp, #12
   9969c:	af00      	add	r7, sp, #0
   9969e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   996a0:	687b      	ldr	r3, [r7, #4]
   996a2:	2b07      	cmp	r3, #7
   996a4:	d825      	bhi.n	996f2 <osc_get_rate+0x5a>
   996a6:	a201      	add	r2, pc, #4	; (adr r2, 996ac <osc_get_rate+0x14>)
   996a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   996ac:	000996cd 	.word	0x000996cd
   996b0:	000996d3 	.word	0x000996d3
   996b4:	000996d9 	.word	0x000996d9
   996b8:	000996df 	.word	0x000996df
   996bc:	000996e3 	.word	0x000996e3
   996c0:	000996e7 	.word	0x000996e7
   996c4:	000996eb 	.word	0x000996eb
   996c8:	000996ef 	.word	0x000996ef
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   996cc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   996d0:	e010      	b.n	996f4 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   996d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   996d6:	e00d      	b.n	996f4 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   996d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   996dc:	e00a      	b.n	996f4 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   996de:	4b08      	ldr	r3, [pc, #32]	; (99700 <osc_get_rate+0x68>)
   996e0:	e008      	b.n	996f4 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   996e2:	4b08      	ldr	r3, [pc, #32]	; (99704 <osc_get_rate+0x6c>)
   996e4:	e006      	b.n	996f4 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   996e6:	4b08      	ldr	r3, [pc, #32]	; (99708 <osc_get_rate+0x70>)
   996e8:	e004      	b.n	996f4 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   996ea:	4b07      	ldr	r3, [pc, #28]	; (99708 <osc_get_rate+0x70>)
   996ec:	e002      	b.n	996f4 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   996ee:	4b06      	ldr	r3, [pc, #24]	; (99708 <osc_get_rate+0x70>)
   996f0:	e000      	b.n	996f4 <osc_get_rate+0x5c>
#endif
	}

	return 0;
   996f2:	2300      	movs	r3, #0
}
   996f4:	4618      	mov	r0, r3
   996f6:	370c      	adds	r7, #12
   996f8:	46bd      	mov	sp, r7
   996fa:	f85d 7b04 	ldr.w	r7, [sp], #4
   996fe:	4770      	bx	lr
   99700:	003d0900 	.word	0x003d0900
   99704:	007a1200 	.word	0x007a1200
   99708:	00b71b00 	.word	0x00b71b00

0009970c <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   9970c:	b580      	push	{r7, lr}
   9970e:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   99710:	2006      	movs	r0, #6
   99712:	4b04      	ldr	r3, [pc, #16]	; (99724 <sysclk_get_main_hz+0x18>)
   99714:	4798      	blx	r3
   99716:	4602      	mov	r2, r0
   99718:	4613      	mov	r3, r2
   9971a:	00db      	lsls	r3, r3, #3
   9971c:	1a9b      	subs	r3, r3, r2
   9971e:	005b      	lsls	r3, r3, #1
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   99720:	4618      	mov	r0, r3
   99722:	bd80      	pop	{r7, pc}
   99724:	00099699 	.word	0x00099699

00099728 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
   99728:	b580      	push	{r7, lr}
   9972a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   9972c:	4b02      	ldr	r3, [pc, #8]	; (99738 <sysclk_get_peripheral_hz+0x10>)
   9972e:	4798      	blx	r3
   99730:	4603      	mov	r3, r0
   99732:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   99734:	4618      	mov	r0, r3
   99736:	bd80      	pop	{r7, pc}
   99738:	0009970d 	.word	0x0009970d

0009973c <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   9973c:	b580      	push	{r7, lr}
   9973e:	b082      	sub	sp, #8
   99740:	af00      	add	r7, sp, #0
   99742:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   99744:	6878      	ldr	r0, [r7, #4]
   99746:	4b02      	ldr	r3, [pc, #8]	; (99750 <sysclk_enable_peripheral_clock+0x14>)
   99748:	4798      	blx	r3
}
   9974a:	3708      	adds	r7, #8
   9974c:	46bd      	mov	sp, r7
   9974e:	bd80      	pop	{r7, pc}
   99750:	0009adf5 	.word	0x0009adf5

00099754 <usart_serial_init>:
 * \param opt      Options needed to set up RS232 communication (see
 * \ref usart_options_t).
 */
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
   99754:	b580      	push	{r7, lr}
   99756:	b08c      	sub	sp, #48	; 0x30
   99758:	af00      	add	r7, sp, #0
   9975a:	6078      	str	r0, [r7, #4]
   9975c:	6039      	str	r1, [r7, #0]
#if (!SAM4L)
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   9975e:	4b40      	ldr	r3, [pc, #256]	; (99860 <usart_serial_init+0x10c>)
   99760:	4798      	blx	r3
   99762:	4603      	mov	r3, r0
   99764:	623b      	str	r3, [r7, #32]
	uart_settings.ul_baudrate = opt->baudrate;
   99766:	683b      	ldr	r3, [r7, #0]
   99768:	681b      	ldr	r3, [r3, #0]
   9976a:	627b      	str	r3, [r7, #36]	; 0x24
	uart_settings.ul_mode = opt->paritytype;
   9976c:	683b      	ldr	r3, [r7, #0]
   9976e:	689b      	ldr	r3, [r3, #8]
   99770:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
   99772:	683b      	ldr	r3, [r7, #0]
   99774:	681b      	ldr	r3, [r3, #0]
   99776:	60bb      	str	r3, [r7, #8]
	usart_settings.char_length = opt->charlength;
   99778:	683b      	ldr	r3, [r7, #0]
   9977a:	685b      	ldr	r3, [r3, #4]
   9977c:	60fb      	str	r3, [r7, #12]
	usart_settings.parity_type = opt->paritytype;
   9977e:	683b      	ldr	r3, [r7, #0]
   99780:	689b      	ldr	r3, [r3, #8]
   99782:	613b      	str	r3, [r7, #16]
	usart_settings.stop_bits= opt->stopbits;
   99784:	683b      	ldr	r3, [r7, #0]
   99786:	7b1b      	ldrb	r3, [r3, #12]
   99788:	617b      	str	r3, [r7, #20]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
   9978a:	2300      	movs	r3, #0
   9978c:	61bb      	str	r3, [r7, #24]
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
   9978e:	687b      	ldr	r3, [r7, #4]
   99790:	4a34      	ldr	r2, [pc, #208]	; (99864 <usart_serial_init+0x110>)
   99792:	4293      	cmp	r3, r2
   99794:	d108      	bne.n	997a8 <usart_serial_init+0x54>
		sysclk_enable_peripheral_clock(ID_UART);
   99796:	2008      	movs	r0, #8
   99798:	4b33      	ldr	r3, [pc, #204]	; (99868 <usart_serial_init+0x114>)
   9979a:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   9979c:	f107 0320 	add.w	r3, r7, #32
   997a0:	6878      	ldr	r0, [r7, #4]
   997a2:	4619      	mov	r1, r3
   997a4:	4b31      	ldr	r3, [pc, #196]	; (9986c <usart_serial_init+0x118>)
   997a6:	4798      	blx	r3
		usart_enable_tx(p_usart);
		usart_enable_rx(p_usart);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   997a8:	687b      	ldr	r3, [r7, #4]
   997aa:	4a31      	ldr	r2, [pc, #196]	; (99870 <usart_serial_init+0x11c>)
   997ac:	4293      	cmp	r3, r2
   997ae:	d111      	bne.n	997d4 <usart_serial_init+0x80>
#if (!SAM4L)
		sysclk_enable_peripheral_clock(ID_USART0);
   997b0:	2011      	movs	r0, #17
   997b2:	4b2d      	ldr	r3, [pc, #180]	; (99868 <usart_serial_init+0x114>)
   997b4:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
   997b6:	4b2a      	ldr	r3, [pc, #168]	; (99860 <usart_serial_init+0x10c>)
   997b8:	4798      	blx	r3
   997ba:	4602      	mov	r2, r0
   997bc:	f107 0308 	add.w	r3, r7, #8
   997c0:	6878      	ldr	r0, [r7, #4]
   997c2:	4619      	mov	r1, r3
   997c4:	4b2b      	ldr	r3, [pc, #172]	; (99874 <usart_serial_init+0x120>)
   997c6:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
   997c8:	6878      	ldr	r0, [r7, #4]
   997ca:	4b2b      	ldr	r3, [pc, #172]	; (99878 <usart_serial_init+0x124>)
   997cc:	4798      	blx	r3
		usart_enable_rx(p_usart);
   997ce:	6878      	ldr	r0, [r7, #4]
   997d0:	4b2a      	ldr	r3, [pc, #168]	; (9987c <usart_serial_init+0x128>)
   997d2:	4798      	blx	r3
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   997d4:	687b      	ldr	r3, [r7, #4]
   997d6:	4a2a      	ldr	r2, [pc, #168]	; (99880 <usart_serial_init+0x12c>)
   997d8:	4293      	cmp	r3, r2
   997da:	d111      	bne.n	99800 <usart_serial_init+0xac>
#if (!SAM4L)
		sysclk_enable_peripheral_clock(ID_USART1);
   997dc:	2012      	movs	r0, #18
   997de:	4b22      	ldr	r3, [pc, #136]	; (99868 <usart_serial_init+0x114>)
   997e0:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
   997e2:	4b1f      	ldr	r3, [pc, #124]	; (99860 <usart_serial_init+0x10c>)
   997e4:	4798      	blx	r3
   997e6:	4602      	mov	r2, r0
   997e8:	f107 0308 	add.w	r3, r7, #8
   997ec:	6878      	ldr	r0, [r7, #4]
   997ee:	4619      	mov	r1, r3
   997f0:	4b20      	ldr	r3, [pc, #128]	; (99874 <usart_serial_init+0x120>)
   997f2:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
   997f4:	6878      	ldr	r0, [r7, #4]
   997f6:	4b20      	ldr	r3, [pc, #128]	; (99878 <usart_serial_init+0x124>)
   997f8:	4798      	blx	r3
		usart_enable_rx(p_usart);
   997fa:	6878      	ldr	r0, [r7, #4]
   997fc:	4b1f      	ldr	r3, [pc, #124]	; (9987c <usart_serial_init+0x128>)
   997fe:	4798      	blx	r3
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   99800:	687b      	ldr	r3, [r7, #4]
   99802:	4a20      	ldr	r2, [pc, #128]	; (99884 <usart_serial_init+0x130>)
   99804:	4293      	cmp	r3, r2
   99806:	d111      	bne.n	9982c <usart_serial_init+0xd8>
#if (!SAM4L)
		sysclk_enable_peripheral_clock(ID_USART2);
   99808:	2013      	movs	r0, #19
   9980a:	4b17      	ldr	r3, [pc, #92]	; (99868 <usart_serial_init+0x114>)
   9980c:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
   9980e:	4b14      	ldr	r3, [pc, #80]	; (99860 <usart_serial_init+0x10c>)
   99810:	4798      	blx	r3
   99812:	4602      	mov	r2, r0
   99814:	f107 0308 	add.w	r3, r7, #8
   99818:	6878      	ldr	r0, [r7, #4]
   9981a:	4619      	mov	r1, r3
   9981c:	4b15      	ldr	r3, [pc, #84]	; (99874 <usart_serial_init+0x120>)
   9981e:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
   99820:	6878      	ldr	r0, [r7, #4]
   99822:	4b15      	ldr	r3, [pc, #84]	; (99878 <usart_serial_init+0x124>)
   99824:	4798      	blx	r3
		usart_enable_rx(p_usart);
   99826:	6878      	ldr	r0, [r7, #4]
   99828:	4b14      	ldr	r3, [pc, #80]	; (9987c <usart_serial_init+0x128>)
   9982a:	4798      	blx	r3
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   9982c:	687b      	ldr	r3, [r7, #4]
   9982e:	4a16      	ldr	r2, [pc, #88]	; (99888 <usart_serial_init+0x134>)
   99830:	4293      	cmp	r3, r2
   99832:	d111      	bne.n	99858 <usart_serial_init+0x104>
#if (!SAM4L)
		sysclk_enable_peripheral_clock(ID_USART3);
   99834:	2014      	movs	r0, #20
   99836:	4b0c      	ldr	r3, [pc, #48]	; (99868 <usart_serial_init+0x114>)
   99838:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
   9983a:	4b09      	ldr	r3, [pc, #36]	; (99860 <usart_serial_init+0x10c>)
   9983c:	4798      	blx	r3
   9983e:	4602      	mov	r2, r0
   99840:	f107 0308 	add.w	r3, r7, #8
   99844:	6878      	ldr	r0, [r7, #4]
   99846:	4619      	mov	r1, r3
   99848:	4b0a      	ldr	r3, [pc, #40]	; (99874 <usart_serial_init+0x120>)
   9984a:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
   9984c:	6878      	ldr	r0, [r7, #4]
   9984e:	4b0a      	ldr	r3, [pc, #40]	; (99878 <usart_serial_init+0x124>)
   99850:	4798      	blx	r3
		usart_enable_rx(p_usart);
   99852:	6878      	ldr	r0, [r7, #4]
   99854:	4b09      	ldr	r3, [pc, #36]	; (9987c <usart_serial_init+0x128>)
   99856:	4798      	blx	r3
		usart_enable_rx(p_usart);
	}
# endif
#endif /* ifdef USART */

}
   99858:	3730      	adds	r7, #48	; 0x30
   9985a:	46bd      	mov	sp, r7
   9985c:	bd80      	pop	{r7, pc}
   9985e:	bf00      	nop
   99860:	00099729 	.word	0x00099729
   99864:	400e0800 	.word	0x400e0800
   99868:	0009973d 	.word	0x0009973d
   9986c:	0009af41 	.word	0x0009af41
   99870:	40098000 	.word	0x40098000
   99874:	0009b165 	.word	0x0009b165
   99878:	0009b1e9 	.word	0x0009b1e9
   9987c:	0009b219 	.word	0x0009b219
   99880:	4009c000 	.word	0x4009c000
   99884:	400a0000 	.word	0x400a0000
   99888:	400a4000 	.word	0x400a4000

0009988c <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   9988c:	b580      	push	{r7, lr}
   9988e:	b082      	sub	sp, #8
   99890:	af00      	add	r7, sp, #0
   99892:	6078      	str	r0, [r7, #4]
   99894:	460b      	mov	r3, r1
   99896:	70fb      	strb	r3, [r7, #3]
#ifdef UART
	if (UART == (Uart*)p_usart) {
   99898:	687b      	ldr	r3, [r7, #4]
   9989a:	4a27      	ldr	r2, [pc, #156]	; (99938 <usart_serial_putchar+0xac>)
   9989c:	4293      	cmp	r3, r2
   9989e:	d10a      	bne.n	998b6 <usart_serial_putchar+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
   998a0:	bf00      	nop
   998a2:	78fb      	ldrb	r3, [r7, #3]
   998a4:	6878      	ldr	r0, [r7, #4]
   998a6:	4619      	mov	r1, r3
   998a8:	4b24      	ldr	r3, [pc, #144]	; (9993c <usart_serial_putchar+0xb0>)
   998aa:	4798      	blx	r3
   998ac:	4603      	mov	r3, r0
   998ae:	2b00      	cmp	r3, #0
   998b0:	d1f7      	bne.n	998a2 <usart_serial_putchar+0x16>
		return 1;
   998b2:	2301      	movs	r3, #1
   998b4:	e03c      	b.n	99930 <usart_serial_putchar+0xa4>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   998b6:	687b      	ldr	r3, [r7, #4]
   998b8:	4a21      	ldr	r2, [pc, #132]	; (99940 <usart_serial_putchar+0xb4>)
   998ba:	4293      	cmp	r3, r2
   998bc:	d10a      	bne.n	998d4 <usart_serial_putchar+0x48>
		while (usart_write(p_usart, c)!=0);
   998be:	bf00      	nop
   998c0:	78fb      	ldrb	r3, [r7, #3]
   998c2:	6878      	ldr	r0, [r7, #4]
   998c4:	4619      	mov	r1, r3
   998c6:	4b1f      	ldr	r3, [pc, #124]	; (99944 <usart_serial_putchar+0xb8>)
   998c8:	4798      	blx	r3
   998ca:	4603      	mov	r3, r0
   998cc:	2b00      	cmp	r3, #0
   998ce:	d1f7      	bne.n	998c0 <usart_serial_putchar+0x34>
		return 1;
   998d0:	2301      	movs	r3, #1
   998d2:	e02d      	b.n	99930 <usart_serial_putchar+0xa4>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   998d4:	687b      	ldr	r3, [r7, #4]
   998d6:	4a1c      	ldr	r2, [pc, #112]	; (99948 <usart_serial_putchar+0xbc>)
   998d8:	4293      	cmp	r3, r2
   998da:	d10a      	bne.n	998f2 <usart_serial_putchar+0x66>
		while (usart_write(p_usart, c)!=0);
   998dc:	bf00      	nop
   998de:	78fb      	ldrb	r3, [r7, #3]
   998e0:	6878      	ldr	r0, [r7, #4]
   998e2:	4619      	mov	r1, r3
   998e4:	4b17      	ldr	r3, [pc, #92]	; (99944 <usart_serial_putchar+0xb8>)
   998e6:	4798      	blx	r3
   998e8:	4603      	mov	r3, r0
   998ea:	2b00      	cmp	r3, #0
   998ec:	d1f7      	bne.n	998de <usart_serial_putchar+0x52>
		return 1;
   998ee:	2301      	movs	r3, #1
   998f0:	e01e      	b.n	99930 <usart_serial_putchar+0xa4>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   998f2:	687b      	ldr	r3, [r7, #4]
   998f4:	4a15      	ldr	r2, [pc, #84]	; (9994c <usart_serial_putchar+0xc0>)
   998f6:	4293      	cmp	r3, r2
   998f8:	d10a      	bne.n	99910 <usart_serial_putchar+0x84>
		while (usart_write(p_usart, c)!=0);
   998fa:	bf00      	nop
   998fc:	78fb      	ldrb	r3, [r7, #3]
   998fe:	6878      	ldr	r0, [r7, #4]
   99900:	4619      	mov	r1, r3
   99902:	4b10      	ldr	r3, [pc, #64]	; (99944 <usart_serial_putchar+0xb8>)
   99904:	4798      	blx	r3
   99906:	4603      	mov	r3, r0
   99908:	2b00      	cmp	r3, #0
   9990a:	d1f7      	bne.n	998fc <usart_serial_putchar+0x70>
		return 1;
   9990c:	2301      	movs	r3, #1
   9990e:	e00f      	b.n	99930 <usart_serial_putchar+0xa4>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   99910:	687b      	ldr	r3, [r7, #4]
   99912:	4a0f      	ldr	r2, [pc, #60]	; (99950 <usart_serial_putchar+0xc4>)
   99914:	4293      	cmp	r3, r2
   99916:	d10a      	bne.n	9992e <usart_serial_putchar+0xa2>
		while (usart_write(p_usart, c)!=0);
   99918:	bf00      	nop
   9991a:	78fb      	ldrb	r3, [r7, #3]
   9991c:	6878      	ldr	r0, [r7, #4]
   9991e:	4619      	mov	r1, r3
   99920:	4b08      	ldr	r3, [pc, #32]	; (99944 <usart_serial_putchar+0xb8>)
   99922:	4798      	blx	r3
   99924:	4603      	mov	r3, r0
   99926:	2b00      	cmp	r3, #0
   99928:	d1f7      	bne.n	9991a <usart_serial_putchar+0x8e>
		return 1;
   9992a:	2301      	movs	r3, #1
   9992c:	e000      	b.n	99930 <usart_serial_putchar+0xa4>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   9992e:	2300      	movs	r3, #0
}
   99930:	4618      	mov	r0, r3
   99932:	3708      	adds	r7, #8
   99934:	46bd      	mov	sp, r7
   99936:	bd80      	pop	{r7, pc}
   99938:	400e0800 	.word	0x400e0800
   9993c:	0009b009 	.word	0x0009b009
   99940:	40098000 	.word	0x40098000
   99944:	0009b281 	.word	0x0009b281
   99948:	4009c000 	.word	0x4009c000
   9994c:	400a0000 	.word	0x400a0000
   99950:	400a4000 	.word	0x400a4000

00099954 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   99954:	b580      	push	{r7, lr}
   99956:	b084      	sub	sp, #16
   99958:	af00      	add	r7, sp, #0
   9995a:	6078      	str	r0, [r7, #4]
   9995c:	6039      	str	r1, [r7, #0]
	uint32_t val = 0;
   9995e:	2300      	movs	r3, #0
   99960:	60fb      	str	r3, [r7, #12]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   99962:	687b      	ldr	r3, [r7, #4]
   99964:	4a2a      	ldr	r2, [pc, #168]	; (99a10 <usart_serial_getchar+0xbc>)
   99966:	4293      	cmp	r3, r2
   99968:	d107      	bne.n	9997a <usart_serial_getchar+0x26>
		while (uart_read((Uart*)p_usart, data));
   9996a:	bf00      	nop
   9996c:	6878      	ldr	r0, [r7, #4]
   9996e:	6839      	ldr	r1, [r7, #0]
   99970:	4b28      	ldr	r3, [pc, #160]	; (99a14 <usart_serial_getchar+0xc0>)
   99972:	4798      	blx	r3
   99974:	4603      	mov	r3, r0
   99976:	2b00      	cmp	r3, #0
   99978:	d1f8      	bne.n	9996c <usart_serial_getchar+0x18>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   9997a:	687b      	ldr	r3, [r7, #4]
   9997c:	4a26      	ldr	r2, [pc, #152]	; (99a18 <usart_serial_getchar+0xc4>)
   9997e:	4293      	cmp	r3, r2
   99980:	d10d      	bne.n	9999e <usart_serial_getchar+0x4a>
		while (usart_read(p_usart, &val));
   99982:	bf00      	nop
   99984:	f107 030c 	add.w	r3, r7, #12
   99988:	6878      	ldr	r0, [r7, #4]
   9998a:	4619      	mov	r1, r3
   9998c:	4b23      	ldr	r3, [pc, #140]	; (99a1c <usart_serial_getchar+0xc8>)
   9998e:	4798      	blx	r3
   99990:	4603      	mov	r3, r0
   99992:	2b00      	cmp	r3, #0
   99994:	d1f6      	bne.n	99984 <usart_serial_getchar+0x30>
		*data = (uint8_t)(val & 0xFF);
   99996:	68fb      	ldr	r3, [r7, #12]
   99998:	b2da      	uxtb	r2, r3
   9999a:	683b      	ldr	r3, [r7, #0]
   9999c:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   9999e:	687b      	ldr	r3, [r7, #4]
   999a0:	4a1f      	ldr	r2, [pc, #124]	; (99a20 <usart_serial_getchar+0xcc>)
   999a2:	4293      	cmp	r3, r2
   999a4:	d10d      	bne.n	999c2 <usart_serial_getchar+0x6e>
		while (usart_read(p_usart, &val));
   999a6:	bf00      	nop
   999a8:	f107 030c 	add.w	r3, r7, #12
   999ac:	6878      	ldr	r0, [r7, #4]
   999ae:	4619      	mov	r1, r3
   999b0:	4b1a      	ldr	r3, [pc, #104]	; (99a1c <usart_serial_getchar+0xc8>)
   999b2:	4798      	blx	r3
   999b4:	4603      	mov	r3, r0
   999b6:	2b00      	cmp	r3, #0
   999b8:	d1f6      	bne.n	999a8 <usart_serial_getchar+0x54>
		*data = (uint8_t)(val & 0xFF);
   999ba:	68fb      	ldr	r3, [r7, #12]
   999bc:	b2da      	uxtb	r2, r3
   999be:	683b      	ldr	r3, [r7, #0]
   999c0:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   999c2:	687b      	ldr	r3, [r7, #4]
   999c4:	4a17      	ldr	r2, [pc, #92]	; (99a24 <usart_serial_getchar+0xd0>)
   999c6:	4293      	cmp	r3, r2
   999c8:	d10d      	bne.n	999e6 <usart_serial_getchar+0x92>
		while (usart_read(p_usart, &val));
   999ca:	bf00      	nop
   999cc:	f107 030c 	add.w	r3, r7, #12
   999d0:	6878      	ldr	r0, [r7, #4]
   999d2:	4619      	mov	r1, r3
   999d4:	4b11      	ldr	r3, [pc, #68]	; (99a1c <usart_serial_getchar+0xc8>)
   999d6:	4798      	blx	r3
   999d8:	4603      	mov	r3, r0
   999da:	2b00      	cmp	r3, #0
   999dc:	d1f6      	bne.n	999cc <usart_serial_getchar+0x78>
		*data = (uint8_t)(val & 0xFF);
   999de:	68fb      	ldr	r3, [r7, #12]
   999e0:	b2da      	uxtb	r2, r3
   999e2:	683b      	ldr	r3, [r7, #0]
   999e4:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   999e6:	687b      	ldr	r3, [r7, #4]
   999e8:	4a0f      	ldr	r2, [pc, #60]	; (99a28 <usart_serial_getchar+0xd4>)
   999ea:	4293      	cmp	r3, r2
   999ec:	d10d      	bne.n	99a0a <usart_serial_getchar+0xb6>
		while (usart_read(p_usart, &val));
   999ee:	bf00      	nop
   999f0:	f107 030c 	add.w	r3, r7, #12
   999f4:	6878      	ldr	r0, [r7, #4]
   999f6:	4619      	mov	r1, r3
   999f8:	4b08      	ldr	r3, [pc, #32]	; (99a1c <usart_serial_getchar+0xc8>)
   999fa:	4798      	blx	r3
   999fc:	4603      	mov	r3, r0
   999fe:	2b00      	cmp	r3, #0
   99a00:	d1f6      	bne.n	999f0 <usart_serial_getchar+0x9c>
		*data = (uint8_t)(val & 0xFF);
   99a02:	68fb      	ldr	r3, [r7, #12]
   99a04:	b2da      	uxtb	r2, r3
   99a06:	683b      	ldr	r3, [r7, #0]
   99a08:	701a      	strb	r2, [r3, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   99a0a:	3710      	adds	r7, #16
   99a0c:	46bd      	mov	sp, r7
   99a0e:	bd80      	pop	{r7, pc}
   99a10:	400e0800 	.word	0x400e0800
   99a14:	0009b051 	.word	0x0009b051
   99a18:	40098000 	.word	0x40098000
   99a1c:	0009b2b5 	.word	0x0009b2b5
   99a20:	4009c000 	.word	0x4009c000
   99a24:	400a0000 	.word	0x400a0000
   99a28:	400a4000 	.word	0x400a4000

00099a2c <stdio_serial_init>:
 * \param usart       Base address of the USART instance.
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
   99a2c:	b580      	push	{r7, lr}
   99a2e:	b082      	sub	sp, #8
   99a30:	af00      	add	r7, sp, #0
   99a32:	6078      	str	r0, [r7, #4]
   99a34:	6039      	str	r1, [r7, #0]
	stdio_base = (void *)usart;
   99a36:	4a0f      	ldr	r2, [pc, #60]	; (99a74 <stdio_serial_init+0x48>)
   99a38:	687b      	ldr	r3, [r7, #4]
   99a3a:	6013      	str	r3, [r2, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   99a3c:	4b0e      	ldr	r3, [pc, #56]	; (99a78 <stdio_serial_init+0x4c>)
   99a3e:	4a0f      	ldr	r2, [pc, #60]	; (99a7c <stdio_serial_init+0x50>)
   99a40:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   99a42:	4b0f      	ldr	r3, [pc, #60]	; (99a80 <stdio_serial_init+0x54>)
   99a44:	4a0f      	ldr	r2, [pc, #60]	; (99a84 <stdio_serial_init+0x58>)
   99a46:	601a      	str	r2, [r3, #0]
# if (XMEGA || MEGA_RF)
	usart_serial_init((USART_t *)usart,opt);
# elif UC3
	usart_serial_init(usart,(usart_serial_options_t *)opt);
# elif SAM
	usart_serial_init((Usart *)usart,(usart_serial_options_t *)opt);
   99a48:	6878      	ldr	r0, [r7, #4]
   99a4a:	6839      	ldr	r1, [r7, #0]
   99a4c:	4b0e      	ldr	r3, [pc, #56]	; (99a88 <stdio_serial_init+0x5c>)
   99a4e:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   99a50:	4b0e      	ldr	r3, [pc, #56]	; (99a8c <stdio_serial_init+0x60>)
   99a52:	681b      	ldr	r3, [r3, #0]
   99a54:	689b      	ldr	r3, [r3, #8]
   99a56:	4618      	mov	r0, r3
   99a58:	2100      	movs	r1, #0
   99a5a:	4b0d      	ldr	r3, [pc, #52]	; (99a90 <stdio_serial_init+0x64>)
   99a5c:	4798      	blx	r3
	setbuf(stdin, NULL);
   99a5e:	4b0b      	ldr	r3, [pc, #44]	; (99a8c <stdio_serial_init+0x60>)
   99a60:	681b      	ldr	r3, [r3, #0]
   99a62:	685b      	ldr	r3, [r3, #4]
   99a64:	4618      	mov	r0, r3
   99a66:	2100      	movs	r1, #0
   99a68:	4b09      	ldr	r3, [pc, #36]	; (99a90 <stdio_serial_init+0x64>)
   99a6a:	4798      	blx	r3
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
# endif
}
   99a6c:	3708      	adds	r7, #8
   99a6e:	46bd      	mov	sp, r7
   99a70:	bd80      	pop	{r7, pc}
   99a72:	bf00      	nop
   99a74:	20072810 	.word	0x20072810
   99a78:	2007280c 	.word	0x2007280c
   99a7c:	0009988d 	.word	0x0009988d
   99a80:	20072808 	.word	0x20072808
   99a84:	00099955 	.word	0x00099955
   99a88:	00099755 	.word	0x00099755
   99a8c:	200711f0 	.word	0x200711f0
   99a90:	000a6fb9 	.word	0x000a6fb9

00099a94 <DD_INIT_UART>:
	.paritytype = CONF_UART_PARITY,
	.stopbits = true
};

void DD_INIT_UART()
{
   99a94:	b580      	push	{r7, lr}
   99a96:	af00      	add	r7, sp, #0
	sysclk_enable_peripheral_clock(ID_UART);
   99a98:	2008      	movs	r0, #8
   99a9a:	4b10      	ldr	r3, [pc, #64]	; (99adc <DD_INIT_UART+0x48>)
   99a9c:	4798      	blx	r3
	UART->UART_CR	= 0x00000050;
   99a9e:	4b10      	ldr	r3, [pc, #64]	; (99ae0 <DD_INIT_UART+0x4c>)
   99aa0:	2250      	movs	r2, #80	; 0x50
   99aa2:	601a      	str	r2, [r3, #0]
	UART->UART_MR	= 0x00000800;
   99aa4:	4b0e      	ldr	r3, [pc, #56]	; (99ae0 <DD_INIT_UART+0x4c>)
   99aa6:	f44f 6200 	mov.w	r2, #2048	; 0x800
   99aaa:	605a      	str	r2, [r3, #4]
	UART->UART_BRGR = 0x00000046;
   99aac:	4b0c      	ldr	r3, [pc, #48]	; (99ae0 <DD_INIT_UART+0x4c>)
   99aae:	2246      	movs	r2, #70	; 0x46
   99ab0:	621a      	str	r2, [r3, #32]
		
	//uart_init(UART,&uart_options);
	stdio_serial_init(UART, &uart_serial_options);
   99ab2:	480b      	ldr	r0, [pc, #44]	; (99ae0 <DD_INIT_UART+0x4c>)
   99ab4:	490b      	ldr	r1, [pc, #44]	; (99ae4 <DD_INIT_UART+0x50>)
   99ab6:	4b0c      	ldr	r3, [pc, #48]	; (99ae8 <DD_INIT_UART+0x54>)
   99ab8:	4798      	blx	r3
	uart_enable(UART);
   99aba:	4809      	ldr	r0, [pc, #36]	; (99ae0 <DD_INIT_UART+0x4c>)
   99abc:	4b0b      	ldr	r3, [pc, #44]	; (99aec <DD_INIT_UART+0x58>)
   99abe:	4798      	blx	r3
	uart_enable_interrupt(UART, UART_SR_RXRDY);
   99ac0:	4807      	ldr	r0, [pc, #28]	; (99ae0 <DD_INIT_UART+0x4c>)
   99ac2:	2101      	movs	r1, #1
   99ac4:	4b0a      	ldr	r3, [pc, #40]	; (99af0 <DD_INIT_UART+0x5c>)
   99ac6:	4798      	blx	r3
	uart_enable(UART);
   99ac8:	4805      	ldr	r0, [pc, #20]	; (99ae0 <DD_INIT_UART+0x4c>)
   99aca:	4b08      	ldr	r3, [pc, #32]	; (99aec <DD_INIT_UART+0x58>)
   99acc:	4798      	blx	r3
	uart_enable_rx(UART);
   99ace:	4804      	ldr	r0, [pc, #16]	; (99ae0 <DD_INIT_UART+0x4c>)
   99ad0:	4b08      	ldr	r3, [pc, #32]	; (99af4 <DD_INIT_UART+0x60>)
   99ad2:	4798      	blx	r3
	uart_enable_tx(UART);
   99ad4:	4802      	ldr	r0, [pc, #8]	; (99ae0 <DD_INIT_UART+0x4c>)
   99ad6:	4b08      	ldr	r3, [pc, #32]	; (99af8 <DD_INIT_UART+0x64>)
   99ad8:	4798      	blx	r3
	
	
}
   99ada:	bd80      	pop	{r7, pc}
   99adc:	0009973d 	.word	0x0009973d
   99ae0:	400e0800 	.word	0x400e0800
   99ae4:	000a8ce4 	.word	0x000a8ce4
   99ae8:	00099a2d 	.word	0x00099a2d
   99aec:	0009afd5 	.word	0x0009afd5
   99af0:	0009afed 	.word	0x0009afed
   99af4:	0009afbd 	.word	0x0009afbd
   99af8:	0009afa5 	.word	0x0009afa5

00099afc <DD_TX_UART>:

uint32_t DD_TX_UART(uint8_t sv_consoleTxdatabyte)
{
   99afc:	b580      	push	{r7, lr}
   99afe:	b084      	sub	sp, #16
   99b00:	af00      	add	r7, sp, #0
   99b02:	4603      	mov	r3, r0
   99b04:	71fb      	strb	r3, [r7, #7]
	uint32_t uart_stat;
	uart_stat= uart_write(UART,sv_consoleTxdatabyte);
   99b06:	79fb      	ldrb	r3, [r7, #7]
   99b08:	4804      	ldr	r0, [pc, #16]	; (99b1c <DD_TX_UART+0x20>)
   99b0a:	4619      	mov	r1, r3
   99b0c:	4b04      	ldr	r3, [pc, #16]	; (99b20 <DD_TX_UART+0x24>)
   99b0e:	4798      	blx	r3
   99b10:	60f8      	str	r0, [r7, #12]
	
	return uart_stat;
   99b12:	68fb      	ldr	r3, [r7, #12]
}
   99b14:	4618      	mov	r0, r3
   99b16:	3710      	adds	r7, #16
   99b18:	46bd      	mov	sp, r7
   99b1a:	bd80      	pop	{r7, pc}
   99b1c:	400e0800 	.word	0x400e0800
   99b20:	0009b009 	.word	0x0009b009

00099b24 <SV_CAN_WRITE_PROPO>:
}


void SV_CAN_WRITE_PROPO(uint16_t propo_cmd, uint16_t data)

{
   99b24:	b580      	push	{r7, lr}
   99b26:	b082      	sub	sp, #8
   99b28:	af00      	add	r7, sp, #0
   99b2a:	4603      	mov	r3, r0
   99b2c:	460a      	mov	r2, r1
   99b2e:	80fb      	strh	r3, [r7, #6]
   99b30:	4613      	mov	r3, r2
   99b32:	80bb      	strh	r3, [r7, #4]
	 DD_CAN_WRITE_PROPO(propo_cmd, data);							// Gopal: command to send Acid Rc, Bicarb Rc and the user set Conductivity value
   99b34:	88fa      	ldrh	r2, [r7, #6]
   99b36:	88bb      	ldrh	r3, [r7, #4]
   99b38:	4610      	mov	r0, r2
   99b3a:	4619      	mov	r1, r3
   99b3c:	4b02      	ldr	r3, [pc, #8]	; (99b48 <SV_CAN_WRITE_PROPO+0x24>)
   99b3e:	4798      	blx	r3
	
}
   99b40:	3708      	adds	r7, #8
   99b42:	46bd      	mov	sp, r7
   99b44:	bd80      	pop	{r7, pc}
   99b46:	bf00      	nop
   99b48:	00096a35 	.word	0x00096a35

00099b4c <SV_CAN_READ_HEMO>:

uint32_t SV_CAN_READ_HEMO()

{
   99b4c:	b580      	push	{r7, lr}
   99b4e:	af00      	add	r7, sp, #0
	DD_CAN_READ_APTVPT();
   99b50:	4b02      	ldr	r3, [pc, #8]	; (99b5c <SV_CAN_READ_HEMO+0x10>)
   99b52:	4798      	blx	r3
	return 0;
   99b54:	2300      	movs	r3, #0
}
   99b56:	4618      	mov	r0, r3
   99b58:	bd80      	pop	{r7, pc}
   99b5a:	bf00      	nop
   99b5c:	00096af5 	.word	0x00096af5

00099b60 <SV_CAN_WRITE_SENSOR>:
}


void SV_CAN_WRITE_SENSOR(uint8_t SENSOR_CPU_id, uint16_t* data)

{
   99b60:	b580      	push	{r7, lr}
   99b62:	b082      	sub	sp, #8
   99b64:	af00      	add	r7, sp, #0
   99b66:	4603      	mov	r3, r0
   99b68:	6039      	str	r1, [r7, #0]
   99b6a:	71fb      	strb	r3, [r7, #7]
	DD_CAN_WRITE_SENSOR(data);
   99b6c:	683b      	ldr	r3, [r7, #0]
   99b6e:	b29b      	uxth	r3, r3
   99b70:	4618      	mov	r0, r3
   99b72:	4b02      	ldr	r3, [pc, #8]	; (99b7c <SV_CAN_WRITE_SENSOR+0x1c>)
   99b74:	4798      	blx	r3
	
}
   99b76:	3708      	adds	r7, #8
   99b78:	46bd      	mov	sp, r7
   99b7a:	bd80      	pop	{r7, pc}
   99b7c:	00096ab5 	.word	0x00096ab5

00099b80 <SV_CAN_REQUEST_SENSORDATA>:

void SV_CAN_REQUEST_SENSORDATA(void)
{
   99b80:	b580      	push	{r7, lr}
   99b82:	af00      	add	r7, sp, #0
	
		
	delay_cnt = g_ul_ms_ticks ;
   99b84:	4b23      	ldr	r3, [pc, #140]	; (99c14 <SV_CAN_REQUEST_SENSORDATA+0x94>)
   99b86:	681b      	ldr	r3, [r3, #0]
   99b88:	4a23      	ldr	r2, [pc, #140]	; (99c18 <SV_CAN_REQUEST_SENSORDATA+0x98>)
   99b8a:	6013      	str	r3, [r2, #0]
	delay = 0;	
   99b8c:	4b23      	ldr	r3, [pc, #140]	; (99c1c <SV_CAN_REQUEST_SENSORDATA+0x9c>)
   99b8e:	2200      	movs	r2, #0
   99b90:	601a      	str	r2, [r3, #0]
	cl_wait(10);
   99b92:	200a      	movs	r0, #10
   99b94:	4b22      	ldr	r3, [pc, #136]	; (99c20 <SV_CAN_REQUEST_SENSORDATA+0xa0>)
   99b96:	4798      	blx	r3
	SV_CAN_WRITE_SENSOR(SENSOR_CPU_id,SB_Sensor_status_query_group1);
   99b98:	2003      	movs	r0, #3
   99b9a:	2141      	movs	r1, #65	; 0x41
   99b9c:	4b21      	ldr	r3, [pc, #132]	; (99c24 <SV_CAN_REQUEST_SENSORDATA+0xa4>)
   99b9e:	4798      	blx	r3
// 	for(int i=0; i<100000; i++)
// 	{
// 		
// 	}
	array1[1]	= 0;
   99ba0:	4b21      	ldr	r3, [pc, #132]	; (99c28 <SV_CAN_REQUEST_SENSORDATA+0xa8>)
   99ba2:	2200      	movs	r2, #0
   99ba4:	705a      	strb	r2, [r3, #1]
	
//	while(	!array1[1]);
	cl_wait(10);
   99ba6:	200a      	movs	r0, #10
   99ba8:	4b1d      	ldr	r3, [pc, #116]	; (99c20 <SV_CAN_REQUEST_SENSORDATA+0xa0>)
   99baa:	4798      	blx	r3

	SV_CAN_WRITE_SENSOR(SENSOR_CPU_id,SB_Sensor_status_query_group2);
   99bac:	2003      	movs	r0, #3
   99bae:	2142      	movs	r1, #66	; 0x42
   99bb0:	4b1c      	ldr	r3, [pc, #112]	; (99c24 <SV_CAN_REQUEST_SENSORDATA+0xa4>)
   99bb2:	4798      	blx	r3
// 	for(int i=0; i<100000; i++)
// 	{
// 		
// 	}

	array1[2]	= 0;
   99bb4:	4b1c      	ldr	r3, [pc, #112]	; (99c28 <SV_CAN_REQUEST_SENSORDATA+0xa8>)
   99bb6:	2200      	movs	r2, #0
   99bb8:	709a      	strb	r2, [r3, #2]
//	while(	!array1[2]);
cl_wait(10);
   99bba:	200a      	movs	r0, #10
   99bbc:	4b18      	ldr	r3, [pc, #96]	; (99c20 <SV_CAN_REQUEST_SENSORDATA+0xa0>)
   99bbe:	4798      	blx	r3
	SV_CAN_WRITE_SENSOR(SENSOR_CPU_id,SB_Sensor_status_query_group3);
   99bc0:	2003      	movs	r0, #3
   99bc2:	2143      	movs	r1, #67	; 0x43
   99bc4:	4b17      	ldr	r3, [pc, #92]	; (99c24 <SV_CAN_REQUEST_SENSORDATA+0xa4>)
   99bc6:	4798      	blx	r3
// 	for(int i=0; i<100000; i++)
// 	{
// 		
// 	}
	array1[3]	= 0;
   99bc8:	4b17      	ldr	r3, [pc, #92]	; (99c28 <SV_CAN_REQUEST_SENSORDATA+0xa8>)
   99bca:	2200      	movs	r2, #0
   99bcc:	70da      	strb	r2, [r3, #3]
//	while(	!array1[3]);
cl_wait(10);
   99bce:	200a      	movs	r0, #10
   99bd0:	4b13      	ldr	r3, [pc, #76]	; (99c20 <SV_CAN_REQUEST_SENSORDATA+0xa0>)
   99bd2:	4798      	blx	r3
	SV_CAN_WRITE_SENSOR(SENSOR_CPU_id,SB_Sensor_status_query_group4);
   99bd4:	2003      	movs	r0, #3
   99bd6:	2144      	movs	r1, #68	; 0x44
   99bd8:	4b12      	ldr	r3, [pc, #72]	; (99c24 <SV_CAN_REQUEST_SENSORDATA+0xa4>)
   99bda:	4798      	blx	r3
// 	for(int i=0; i<100000; i++)
// 	{
// 		
// 	}
	array1[4]	= 0;
   99bdc:	4b12      	ldr	r3, [pc, #72]	; (99c28 <SV_CAN_REQUEST_SENSORDATA+0xa8>)
   99bde:	2200      	movs	r2, #0
   99be0:	711a      	strb	r2, [r3, #4]
//	while(	!array1[4]);
cl_wait(10);
   99be2:	200a      	movs	r0, #10
   99be4:	4b0e      	ldr	r3, [pc, #56]	; (99c20 <SV_CAN_REQUEST_SENSORDATA+0xa0>)
   99be6:	4798      	blx	r3
	SV_CAN_WRITE_SENSOR(SENSOR_CPU_id,SB_Sensor_status_query_group5);
   99be8:	2003      	movs	r0, #3
   99bea:	2145      	movs	r1, #69	; 0x45
   99bec:	4b0d      	ldr	r3, [pc, #52]	; (99c24 <SV_CAN_REQUEST_SENSORDATA+0xa4>)
   99bee:	4798      	blx	r3
// 	for(int i=0; i<100000; i++)
// 	{
// 		
// 	}
	array1[5]	= 0;
   99bf0:	4b0d      	ldr	r3, [pc, #52]	; (99c28 <SV_CAN_REQUEST_SENSORDATA+0xa8>)
   99bf2:	2200      	movs	r2, #0
   99bf4:	715a      	strb	r2, [r3, #5]
//	while(	!array1[5]);
cl_wait(10);
   99bf6:	200a      	movs	r0, #10
   99bf8:	4b09      	ldr	r3, [pc, #36]	; (99c20 <SV_CAN_REQUEST_SENSORDATA+0xa0>)
   99bfa:	4798      	blx	r3
	SV_CAN_WRITE_SENSOR(SENSOR_CPU_id,SB_Sensor_status_query_group6);
   99bfc:	2003      	movs	r0, #3
   99bfe:	2146      	movs	r1, #70	; 0x46
   99c00:	4b08      	ldr	r3, [pc, #32]	; (99c24 <SV_CAN_REQUEST_SENSORDATA+0xa4>)
   99c02:	4798      	blx	r3
// 	for(int i=0; i<100; i++)
// 	{
// 		
// 	}
// 	
cl_wait(10);
   99c04:	200a      	movs	r0, #10
   99c06:	4b06      	ldr	r3, [pc, #24]	; (99c20 <SV_CAN_REQUEST_SENSORDATA+0xa0>)
   99c08:	4798      	blx	r3
	array1[6]	= 0;
   99c0a:	4b07      	ldr	r3, [pc, #28]	; (99c28 <SV_CAN_REQUEST_SENSORDATA+0xa8>)
   99c0c:	2200      	movs	r2, #0
   99c0e:	719a      	strb	r2, [r3, #6]
//	while(	!array1[6]);
	
	
}
   99c10:	bd80      	pop	{r7, pc}
   99c12:	bf00      	nop
   99c14:	20071aa8 	.word	0x20071aa8
   99c18:	20071b58 	.word	0x20071b58
   99c1c:	20071b5c 	.word	0x20071b5c
   99c20:	00093195 	.word	0x00093195
   99c24:	00099b61 	.word	0x00099b61
   99c28:	20071b4c 	.word	0x20071b4c

00099c2c <sv_cntrl_activatepump>:
{
	uint8_t byte[4] ;
	uint32_t data;
	}bloodpumpcmdType;
uint8_t sv_cntrl_activatepump(sv_pumptype sv_pump_id)
{
   99c2c:	b580      	push	{r7, lr}
   99c2e:	b084      	sub	sp, #16
   99c30:	af00      	add	r7, sp, #0
   99c32:	4603      	mov	r3, r0
   99c34:	71fb      	strb	r3, [r7, #7]
	//uint8_t bloodpumpspeed[3];
	bloodpumpcmdType bloodpumpcmd;
	
	bloodpumpcmd.data =0;
   99c36:	2300      	movs	r3, #0
   99c38:	60fb      	str	r3, [r7, #12]
	
	if(sv_pump_id != BLOODPUMP)
   99c3a:	79fb      	ldrb	r3, [r7, #7]
   99c3c:	2b03      	cmp	r3, #3
   99c3e:	d004      	beq.n	99c4a <sv_cntrl_activatepump+0x1e>
	{
		DD_SET_PUMP(sv_pump_id);
   99c40:	79fb      	ldrb	r3, [r7, #7]
   99c42:	4618      	mov	r0, r3
   99c44:	4b06      	ldr	r3, [pc, #24]	; (99c60 <sv_cntrl_activatepump+0x34>)
   99c46:	4798      	blx	r3
   99c48:	e005      	b.n	99c56 <sv_cntrl_activatepump+0x2a>
	
	
	} 
	else	
	{
		bloodpumpcmd.byte[0] = 1;
   99c4a:	2301      	movs	r3, #1
   99c4c:	733b      	strb	r3, [r7, #12]
//		DD_IIC_SET_BLOODPUP(BLOODPUMP_IIC_ADR,bloodpumpcmd.data,1);
		DD_CAN_WRITE_HEMO(BP_START_BLOOD_PUMP,0);
   99c4e:	2020      	movs	r0, #32
   99c50:	2100      	movs	r1, #0
   99c52:	4b04      	ldr	r3, [pc, #16]	; (99c64 <sv_cntrl_activatepump+0x38>)
   99c54:	4798      	blx	r3
	}
	
	return 0;
   99c56:	2300      	movs	r3, #0
}
   99c58:	4618      	mov	r0, r3
   99c5a:	3710      	adds	r7, #16
   99c5c:	46bd      	mov	sp, r7
   99c5e:	bd80      	pop	{r7, pc}
   99c60:	00098021 	.word	0x00098021
   99c64:	00096a6d 	.word	0x00096a6d

00099c68 <sv_cntrl_deactivatepump>:

uint8_t sv_cntrl_deactivatepump(sv_pumptype sv_pump_id)
{
   99c68:	b580      	push	{r7, lr}
   99c6a:	b084      	sub	sp, #16
   99c6c:	af00      	add	r7, sp, #0
   99c6e:	4603      	mov	r3, r0
   99c70:	71fb      	strb	r3, [r7, #7]
	bloodpumpcmdType bloodpumpcmd;
	bloodpumpcmd.data =0;
   99c72:	2300      	movs	r3, #0
   99c74:	60fb      	str	r3, [r7, #12]
	//uint8_t bloodpumpspeed[3];
	if(sv_pump_id != BLOODPUMP)
   99c76:	79fb      	ldrb	r3, [r7, #7]
   99c78:	2b03      	cmp	r3, #3
   99c7a:	d004      	beq.n	99c86 <sv_cntrl_deactivatepump+0x1e>
	{
		DD_RESET_PUMP(sv_pump_id);
   99c7c:	79fb      	ldrb	r3, [r7, #7]
   99c7e:	4618      	mov	r0, r3
   99c80:	4b06      	ldr	r3, [pc, #24]	; (99c9c <sv_cntrl_deactivatepump+0x34>)
   99c82:	4798      	blx	r3
   99c84:	e005      	b.n	99c92 <sv_cntrl_deactivatepump+0x2a>

	} else
	
	
	{
		bloodpumpcmd.byte[0] = 2;
   99c86:	2302      	movs	r3, #2
   99c88:	733b      	strb	r3, [r7, #12]
	//	DD_IIC_SET_BLOODPUP(BLOODPUMP_IIC_ADR,bloodpumpcmd.data,1);
	DD_CAN_WRITE_HEMO(BP_STOP_PUMP,0);
   99c8a:	2021      	movs	r0, #33	; 0x21
   99c8c:	2100      	movs	r1, #0
   99c8e:	4b04      	ldr	r3, [pc, #16]	; (99ca0 <sv_cntrl_deactivatepump+0x38>)
   99c90:	4798      	blx	r3
	}
	
	
	return 0;
   99c92:	2300      	movs	r3, #0
}
   99c94:	4618      	mov	r0, r3
   99c96:	3710      	adds	r7, #16
   99c98:	46bd      	mov	sp, r7
   99c9a:	bd80      	pop	{r7, pc}
   99c9c:	000981c1 	.word	0x000981c1
   99ca0:	00096a6d 	.word	0x00096a6d

00099ca4 <sv_cntrl_poweronheater>:
uint8_t sv_cntrl_poweronheater(void)
{
   99ca4:	b580      	push	{r7, lr}
   99ca6:	af00      	add	r7, sp, #0
	 DD_SET_HEATER();
   99ca8:	4b02      	ldr	r3, [pc, #8]	; (99cb4 <sv_cntrl_poweronheater+0x10>)
   99caa:	4798      	blx	r3
	 return 0;
   99cac:	2300      	movs	r3, #0
}
   99cae:	4618      	mov	r0, r3
   99cb0:	bd80      	pop	{r7, pc}
   99cb2:	bf00      	nop
   99cb4:	00098101 	.word	0x00098101

00099cb8 <sv_cntrl_poweroffheater>:
uint8_t sv_cntrl_poweroffheater(void)
{
   99cb8:	b580      	push	{r7, lr}
   99cba:	af00      	add	r7, sp, #0
	//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,( uint8_t*)"HEAT_OFF",8);
	DD_RESET_HEATER();
   99cbc:	4b02      	ldr	r3, [pc, #8]	; (99cc8 <sv_cntrl_poweroffheater+0x10>)
   99cbe:	4798      	blx	r3
	return 0;
   99cc0:	2300      	movs	r3, #0
}
   99cc2:	4618      	mov	r0, r3
   99cc4:	bd80      	pop	{r7, pc}
   99cc6:	bf00      	nop
   99cc8:	00098161 	.word	0x00098161

00099ccc <sv_cntrl_activate_valve>:



uint8_t sv_cntrl_activate_valve(sv_valvetype sv_valve_id)
{
   99ccc:	b580      	push	{r7, lr}
   99cce:	b082      	sub	sp, #8
   99cd0:	af00      	add	r7, sp, #0
   99cd2:	4603      	mov	r3, r0
   99cd4:	71fb      	strb	r3, [r7, #7]
	//{
	//	DD_RESET_VALVE(sv_valve_id);
	//}
	//else
	{
		DD_SET_VALVE(sv_valve_id);
   99cd6:	79fb      	ldrb	r3, [r7, #7]
   99cd8:	4618      	mov	r0, r3
   99cda:	4b03      	ldr	r3, [pc, #12]	; (99ce8 <sv_cntrl_activate_valve+0x1c>)
   99cdc:	4798      	blx	r3
	}
	
	
	return 0;
   99cde:	2300      	movs	r3, #0
}
   99ce0:	4618      	mov	r0, r3
   99ce2:	3708      	adds	r7, #8
   99ce4:	46bd      	mov	sp, r7
   99ce6:	bd80      	pop	{r7, pc}
   99ce8:	00098539 	.word	0x00098539

00099cec <sv_cntrl_deactivate_valve>:

uint8_t sv_cntrl_deactivate_valve(sv_valvetype sv_valve_id)
{
   99cec:	b580      	push	{r7, lr}
   99cee:	b082      	sub	sp, #8
   99cf0:	af00      	add	r7, sp, #0
   99cf2:	4603      	mov	r3, r0
   99cf4:	71fb      	strb	r3, [r7, #7]
	
	if(sv_valve_id == VALVE_ID16)
   99cf6:	79fb      	ldrb	r3, [r7, #7]
   99cf8:	2b10      	cmp	r3, #16
   99cfa:	d101      	bne.n	99d00 <sv_cntrl_deactivate_valve+0x14>
	{
		DD_RESET_HEATER();
   99cfc:	4b05      	ldr	r3, [pc, #20]	; (99d14 <sv_cntrl_deactivate_valve+0x28>)
   99cfe:	4798      	blx	r3
	}
	DD_RESET_VALVE(sv_valve_id);
   99d00:	79fb      	ldrb	r3, [r7, #7]
   99d02:	4618      	mov	r0, r3
   99d04:	4b04      	ldr	r3, [pc, #16]	; (99d18 <sv_cntrl_deactivate_valve+0x2c>)
   99d06:	4798      	blx	r3
	
	return 0;
   99d08:	2300      	movs	r3, #0
}
   99d0a:	4618      	mov	r0, r3
   99d0c:	3708      	adds	r7, #8
   99d0e:	46bd      	mov	sp, r7
   99d10:	bd80      	pop	{r7, pc}
   99d12:	bf00      	nop
   99d14:	00098161 	.word	0x00098161
   99d18:	000985f9 	.word	0x000985f9

00099d1c <sv_cntrl_setHepa_dir>:


uint8_t sv_cntrl_setHepa_dir(void)
{
   99d1c:	b580      	push	{r7, lr}
   99d1e:	af00      	add	r7, sp, #0
	DD_SET_DIR();
   99d20:	4b02      	ldr	r3, [pc, #8]	; (99d2c <sv_cntrl_setHepa_dir+0x10>)
   99d22:	4798      	blx	r3
	
	return 0;
   99d24:	2300      	movs	r3, #0
}
   99d26:	4618      	mov	r0, r3
   99d28:	bd80      	pop	{r7, pc}
   99d2a:	bf00      	nop
   99d2c:	00098449 	.word	0x00098449

00099d30 <sv_cntrl_resetHepa_dir>:



uint8_t sv_cntrl_resetHepa_dir()
{
   99d30:	b580      	push	{r7, lr}
   99d32:	af00      	add	r7, sp, #0
	DD_RESET_DIR();
   99d34:	4b02      	ldr	r3, [pc, #8]	; (99d40 <sv_cntrl_resetHepa_dir+0x10>)
   99d36:	4798      	blx	r3
	
	return 0;	
   99d38:	2300      	movs	r3, #0
}
   99d3a:	4618      	mov	r0, r3
   99d3c:	bd80      	pop	{r7, pc}
   99d3e:	bf00      	nop
   99d40:	00098471 	.word	0x00098471

00099d44 <sv_cntrl_setpumpspeed>:
	}
	return 0;
}

uint8_t sv_cntrl_setpumpspeed(sv_pumptype sv_pump_id,uint32_t speed)
{
   99d44:	b580      	push	{r7, lr}
   99d46:	b084      	sub	sp, #16
   99d48:	af00      	add	r7, sp, #0
   99d4a:	4603      	mov	r3, r0
   99d4c:	6039      	str	r1, [r7, #0]
   99d4e:	71fb      	strb	r3, [r7, #7]
	bloodpumpcmdType bloodpumpspeed;
	bloodpumpspeed.data =0;
   99d50:	2300      	movs	r3, #0
   99d52:	60fb      	str	r3, [r7, #12]
		//bloodpumpspeed.data = speed;
		bloodpumpspeed.byte[0] = 0x04 ;
   99d54:	2304      	movs	r3, #4
   99d56:	733b      	strb	r3, [r7, #12]
		bloodpumpspeed.byte[1] = 0xff & speed ;
   99d58:	683b      	ldr	r3, [r7, #0]
   99d5a:	b2db      	uxtb	r3, r3
   99d5c:	737b      	strb	r3, [r7, #13]
		bloodpumpspeed.byte[2] = 0xff & speed >> 8 ;
   99d5e:	683b      	ldr	r3, [r7, #0]
   99d60:	0a1b      	lsrs	r3, r3, #8
   99d62:	b2db      	uxtb	r3, r3
   99d64:	73bb      	strb	r3, [r7, #14]
		
		if(sv_pump_id != BLOODPUMP)
   99d66:	79fb      	ldrb	r3, [r7, #7]
   99d68:	2b03      	cmp	r3, #3
   99d6a:	d005      	beq.n	99d78 <sv_cntrl_setpumpspeed+0x34>
		{
				DD_SET_SPEED(sv_pump_id,speed);
   99d6c:	79fb      	ldrb	r3, [r7, #7]
   99d6e:	4618      	mov	r0, r3
   99d70:	6839      	ldr	r1, [r7, #0]
   99d72:	4b07      	ldr	r3, [pc, #28]	; (99d90 <sv_cntrl_setpumpspeed+0x4c>)
   99d74:	4798      	blx	r3
   99d76:	e005      	b.n	99d84 <sv_cntrl_setpumpspeed+0x40>
		
		{
			

		//	   DD_IIC_SET_BLOODPUP( BLOODPUMP_IIC_ADR,  bloodpumpspeed.data , 0x03);
		DD_CAN_WRITE_HEMO(BP_SPEED_CHANGE, speed);
   99d78:	683b      	ldr	r3, [r7, #0]
   99d7a:	b29b      	uxth	r3, r3
   99d7c:	2023      	movs	r0, #35	; 0x23
   99d7e:	4619      	mov	r1, r3
   99d80:	4b04      	ldr	r3, [pc, #16]	; (99d94 <sv_cntrl_setpumpspeed+0x50>)
   99d82:	4798      	blx	r3
		}
		
	
	return 0;
   99d84:	2300      	movs	r3, #0
}
   99d86:	4618      	mov	r0, r3
   99d88:	3710      	adds	r7, #16
   99d8a:	46bd      	mov	sp, r7
   99d8c:	bd80      	pop	{r7, pc}
   99d8e:	bf00      	nop
   99d90:	000982a9 	.word	0x000982a9
   99d94:	00096a6d 	.word	0x00096a6d

00099d98 <sv_spi_blood_read_temp>:
void sv_spi_blood_read_temp(uint16_t* pdata)
{
   99d98:	b480      	push	{r7}
   99d9a:	b083      	sub	sp, #12
   99d9c:	af00      	add	r7, sp, #0
   99d9e:	6078      	str	r0, [r7, #4]
//	DD_IIC_READ_BLDPMP( BLOODPUMP_IIC_ADR,8,pdata);
	
}
   99da0:	370c      	adds	r7, #12
   99da2:	46bd      	mov	sp, r7
   99da4:	f85d 7b04 	ldr.w	r7, [sp], #4
   99da8:	4770      	bx	lr
   99daa:	bf00      	nop

00099dac <sv_cntrl_incheater>:

uint8_t sv_cntrl_incheater(int32_t dty_val)


{
   99dac:	b580      	push	{r7, lr}
   99dae:	b082      	sub	sp, #8
   99db0:	af00      	add	r7, sp, #0
   99db2:	6078      	str	r0, [r7, #4]
//	dty_val = 2900;
	
	dummy1 = dty_val; 
   99db4:	4b0c      	ldr	r3, [pc, #48]	; (99de8 <sv_cntrl_incheater+0x3c>)
   99db6:	6878      	ldr	r0, [r7, #4]
   99db8:	4798      	blx	r3
   99dba:	4602      	mov	r2, r0
   99dbc:	4b0b      	ldr	r3, [pc, #44]	; (99dec <sv_cntrl_incheater+0x40>)
   99dbe:	601a      	str	r2, [r3, #0]
	
	if(dty_val > 7500)
   99dc0:	687b      	ldr	r3, [r7, #4]
   99dc2:	f641 524c 	movw	r2, #7500	; 0x1d4c
   99dc6:	4293      	cmp	r3, r2
   99dc8:	dd02      	ble.n	99dd0 <sv_cntrl_incheater+0x24>
	{
		dty_val = 7500;
   99dca:	f641 534c 	movw	r3, #7500	; 0x1d4c
   99dce:	607b      	str	r3, [r7, #4]
	}
	// dty_val = dty_val * 0.66;
	 
	 if ( dty_val > 0)
   99dd0:	687b      	ldr	r3, [r7, #4]
   99dd2:	2b00      	cmp	r3, #0
   99dd4:	dd03      	ble.n	99dde <sv_cntrl_incheater+0x32>
	 {
		 DD_CHNG_HTR(dty_val);
   99dd6:	687b      	ldr	r3, [r7, #4]
   99dd8:	4618      	mov	r0, r3
   99dda:	4b05      	ldr	r3, [pc, #20]	; (99df0 <sv_cntrl_incheater+0x44>)
   99ddc:	4798      	blx	r3
	 }
	
	
	return 0;
   99dde:	2300      	movs	r3, #0
}
   99de0:	4618      	mov	r0, r3
   99de2:	3708      	adds	r7, #8
   99de4:	46bd      	mov	sp, r7
   99de6:	bd80      	pop	{r7, pc}
   99de8:	000a68b1 	.word	0x000a68b1
   99dec:	20072190 	.word	0x20072190
   99df0:	00098425 	.word	0x00098425

00099df4 <sv_cntrl_decheater>:


uint8_t sv_cntrl_decheater(int32_t dty_val)
{
   99df4:	b580      	push	{r7, lr}
   99df6:	b082      	sub	sp, #8
   99df8:	af00      	add	r7, sp, #0
   99dfa:	6078      	str	r0, [r7, #4]
		 if ( dty_val > 0)
   99dfc:	687b      	ldr	r3, [r7, #4]
   99dfe:	2b00      	cmp	r3, #0
   99e00:	dd03      	ble.n	99e0a <sv_cntrl_decheater+0x16>
	 {
		 DD_CHNG_HTR(dty_val);
   99e02:	687b      	ldr	r3, [r7, #4]
   99e04:	4618      	mov	r0, r3
   99e06:	4b03      	ldr	r3, [pc, #12]	; (99e14 <sv_cntrl_decheater+0x20>)
   99e08:	4798      	blx	r3
	 }
	
	
	return 0;
   99e0a:	2300      	movs	r3, #0
}
   99e0c:	4618      	mov	r0, r3
   99e0e:	3708      	adds	r7, #8
   99e10:	46bd      	mov	sp, r7
   99e12:	bd80      	pop	{r7, pc}
   99e14:	00098425 	.word	0x00098425

00099e18 <sv_cntrl_activatevenousclamp>:

uint8_t sv_cntrl_activatevenousclamp(void)
{
   99e18:	b580      	push	{r7, lr}
   99e1a:	af00      	add	r7, sp, #0
	DD_SET_CLAMP();
   99e1c:	4b02      	ldr	r3, [pc, #8]	; (99e28 <sv_cntrl_activatevenousclamp+0x10>)
   99e1e:	4798      	blx	r3
	
	return 0;
   99e20:	2300      	movs	r3, #0
}
   99e22:	4618      	mov	r0, r3
   99e24:	bd80      	pop	{r7, pc}
   99e26:	bf00      	nop
   99e28:	00098995 	.word	0x00098995

00099e2c <sv_cntrl_deactivatevenousclamp>:

uint8_t sv_cntrl_deactivatevenousclamp(void)
{
   99e2c:	b580      	push	{r7, lr}
   99e2e:	af00      	add	r7, sp, #0
	DD_RESET_CLAMP();
   99e30:	4b02      	ldr	r3, [pc, #8]	; (99e3c <sv_cntrl_deactivatevenousclamp+0x10>)
   99e32:	4798      	blx	r3
	
	return 0;
   99e34:	2300      	movs	r3, #0
}
   99e36:	4618      	mov	r0, r3
   99e38:	bd80      	pop	{r7, pc}
   99e3a:	bf00      	nop
   99e3c:	000989bd 	.word	0x000989bd

00099e40 <sv_cntrl_enable_loopback>:

uint8_t sv_cntrl_enable_loopback()
{
   99e40:	b580      	push	{r7, lr}
   99e42:	af00      	add	r7, sp, #0

	DD_ENABLE_LOOPBACK();	
   99e44:	4b03      	ldr	r3, [pc, #12]	; (99e54 <sv_cntrl_enable_loopback+0x14>)
   99e46:	4798      	blx	r3
	Loopbackstatus = true;
   99e48:	4b03      	ldr	r3, [pc, #12]	; (99e58 <sv_cntrl_enable_loopback+0x18>)
   99e4a:	2201      	movs	r2, #1
   99e4c:	701a      	strb	r2, [r3, #0]
	return 0;
   99e4e:	2300      	movs	r3, #0

}
   99e50:	4618      	mov	r0, r3
   99e52:	bd80      	pop	{r7, pc}
   99e54:	00097fd1 	.word	0x00097fd1
   99e58:	200725bd 	.word	0x200725bd

00099e5c <sv_cntrl_disable_loopback>:


uint8_t sv_cntrl_disable_loopback()
{
   99e5c:	b580      	push	{r7, lr}
   99e5e:	af00      	add	r7, sp, #0

	DD_DISABLE_LOOPBACK();
   99e60:	4b03      	ldr	r3, [pc, #12]	; (99e70 <sv_cntrl_disable_loopback+0x14>)
   99e62:	4798      	blx	r3
	Loopbackstatus = false;
   99e64:	4b03      	ldr	r3, [pc, #12]	; (99e74 <sv_cntrl_disable_loopback+0x18>)
   99e66:	2200      	movs	r2, #0
   99e68:	701a      	strb	r2, [r3, #0]
	return 0;
   99e6a:	2300      	movs	r3, #0

}
   99e6c:	4618      	mov	r0, r3
   99e6e:	bd80      	pop	{r7, pc}
   99e70:	00097ff9 	.word	0x00097ff9
   99e74:	200725bd 	.word	0x200725bd

00099e78 <sv_cntrl_enable_bypass>:


uint8_t sv_cntrl_enable_bypass()
{
   99e78:	b580      	push	{r7, lr}
   99e7a:	af00      	add	r7, sp, #0

	DD_ENABLE_BYPASS();
   99e7c:	4b05      	ldr	r3, [pc, #20]	; (99e94 <sv_cntrl_enable_bypass+0x1c>)
   99e7e:	4798      	blx	r3
	sv_cntrl_deactivatepump(UFPUMP);
   99e80:	2004      	movs	r0, #4
   99e82:	4b05      	ldr	r3, [pc, #20]	; (99e98 <sv_cntrl_enable_bypass+0x20>)
   99e84:	4798      	blx	r3
	Bypassstatus = true;
   99e86:	4b05      	ldr	r3, [pc, #20]	; (99e9c <sv_cntrl_enable_bypass+0x24>)
   99e88:	2201      	movs	r2, #1
   99e8a:	701a      	strb	r2, [r3, #0]
	return 0;
   99e8c:	2300      	movs	r3, #0

}
   99e8e:	4618      	mov	r0, r3
   99e90:	bd80      	pop	{r7, pc}
   99e92:	bf00      	nop
   99e94:	00097f71 	.word	0x00097f71
   99e98:	00099c69 	.word	0x00099c69
   99e9c:	20072655 	.word	0x20072655

00099ea0 <sv_cntrl_disable_bypass>:


uint8_t sv_cntrl_disable_bypass()
{
   99ea0:	b580      	push	{r7, lr}
   99ea2:	af00      	add	r7, sp, #0

	DD_DISABLE_BYPASS();
   99ea4:	4b03      	ldr	r3, [pc, #12]	; (99eb4 <sv_cntrl_disable_bypass+0x14>)
   99ea6:	4798      	blx	r3
	Bypassstatus = false;
   99ea8:	4b03      	ldr	r3, [pc, #12]	; (99eb8 <sv_cntrl_disable_bypass+0x18>)
   99eaa:	2200      	movs	r2, #0
   99eac:	701a      	strb	r2, [r3, #0]
	return 0;
   99eae:	2300      	movs	r3, #0

}
   99eb0:	4618      	mov	r0, r3
   99eb2:	bd80      	pop	{r7, pc}
   99eb4:	00097fa1 	.word	0x00097fa1
   99eb8:	20072655 	.word	0x20072655

00099ebc <sv_cntrl_setflowpath>:




uint8_t sv_cntrl_setflowpath(sv_flowpathtype sv_flowpath)
{
   99ebc:	b580      	push	{r7, lr}
   99ebe:	b082      	sub	sp, #8
   99ec0:	af00      	add	r7, sp, #0
   99ec2:	4603      	mov	r3, r0
   99ec4:	71fb      	strb	r3, [r7, #7]
		delayticks = g_ul_ms_ticks - ul_cur_ticks;
   99ec6:	4b0a      	ldr	r3, [pc, #40]	; (99ef0 <sv_cntrl_setflowpath+0x34>)
   99ec8:	681a      	ldr	r2, [r3, #0]
   99eca:	4b0a      	ldr	r3, [pc, #40]	; (99ef4 <sv_cntrl_setflowpath+0x38>)
   99ecc:	681b      	ldr	r3, [r3, #0]
   99ece:	1ad3      	subs	r3, r2, r3
   99ed0:	4a09      	ldr	r2, [pc, #36]	; (99ef8 <sv_cntrl_setflowpath+0x3c>)
   99ed2:	6013      	str	r3, [r2, #0]
		ul_cur_ticks = g_ul_ms_ticks;
   99ed4:	4b06      	ldr	r3, [pc, #24]	; (99ef0 <sv_cntrl_setflowpath+0x34>)
   99ed6:	681b      	ldr	r3, [r3, #0]
   99ed8:	4a06      	ldr	r2, [pc, #24]	; (99ef4 <sv_cntrl_setflowpath+0x38>)
   99eda:	6013      	str	r3, [r2, #0]
	DD_SET_FLOW_PATH(sv_flowpath);
   99edc:	79fb      	ldrb	r3, [r7, #7]
   99ede:	4618      	mov	r0, r3
   99ee0:	4b06      	ldr	r3, [pc, #24]	; (99efc <sv_cntrl_setflowpath+0x40>)
   99ee2:	4798      	blx	r3
	
	return 0;
   99ee4:	2300      	movs	r3, #0

}
   99ee6:	4618      	mov	r0, r3
   99ee8:	3708      	adds	r7, #8
   99eea:	46bd      	mov	sp, r7
   99eec:	bd80      	pop	{r7, pc}
   99eee:	bf00      	nop
   99ef0:	20071aa8 	.word	0x20071aa8
   99ef4:	20072378 	.word	0x20072378
   99ef8:	200724e0 	.word	0x200724e0
   99efc:	00098d69 	.word	0x00098d69

00099f00 <sv_cntrl_setpumpfreq>:


uint8_t sv_cntrl_setpumpfreq(sv_pumptype sv_pump_id,uint32_t freq)
{
   99f00:	b580      	push	{r7, lr}
   99f02:	b082      	sub	sp, #8
   99f04:	af00      	add	r7, sp, #0
   99f06:	4603      	mov	r3, r0
   99f08:	6039      	str	r1, [r7, #0]
   99f0a:	71fb      	strb	r3, [r7, #7]
	DD_SET_PUMPFREQ(sv_pump_id,freq);
   99f0c:	79fb      	ldrb	r3, [r7, #7]
   99f0e:	4618      	mov	r0, r3
   99f10:	6839      	ldr	r1, [r7, #0]
   99f12:	4b03      	ldr	r3, [pc, #12]	; (99f20 <sv_cntrl_setpumpfreq+0x20>)
   99f14:	4798      	blx	r3
	return 0;
   99f16:	2300      	movs	r3, #0
}
   99f18:	4618      	mov	r0, r3
   99f1a:	3708      	adds	r7, #8
   99f1c:	46bd      	mov	sp, r7
   99f1e:	bd80      	pop	{r7, pc}
   99f20:	000983d5 	.word	0x000983d5

00099f24 <sv_cntrl_setredalarm>:
uint8_t sv_cntrl_setredalarm()
{
   99f24:	b580      	push	{r7, lr}
   99f26:	af00      	add	r7, sp, #0
	DD_SET_RED();
   99f28:	4b02      	ldr	r3, [pc, #8]	; (99f34 <sv_cntrl_setredalarm+0x10>)
   99f2a:	4798      	blx	r3
	return 0;
   99f2c:	2300      	movs	r3, #0
}
   99f2e:	4618      	mov	r0, r3
   99f30:	bd80      	pop	{r7, pc}
   99f32:	bf00      	nop
   99f34:	00098499 	.word	0x00098499

00099f38 <sv_cntrl_setyellowalarm>:
uint8_t sv_cntrl_setyellowalarm()
{
   99f38:	b580      	push	{r7, lr}
   99f3a:	af00      	add	r7, sp, #0
	DD_SET_YELLOW();
   99f3c:	4b02      	ldr	r3, [pc, #8]	; (99f48 <sv_cntrl_setyellowalarm+0x10>)
   99f3e:	4798      	blx	r3
	return 0;
   99f40:	2300      	movs	r3, #0
}
   99f42:	4618      	mov	r0, r3
   99f44:	bd80      	pop	{r7, pc}
   99f46:	bf00      	nop
   99f48:	000984c1 	.word	0x000984c1

00099f4c <sv_cntrl_setgreenalarm>:
uint8_t sv_cntrl_setgreenalarm()
{
   99f4c:	b580      	push	{r7, lr}
   99f4e:	af00      	add	r7, sp, #0
	DD_SET_GREEN();
   99f50:	4b02      	ldr	r3, [pc, #8]	; (99f5c <sv_cntrl_setgreenalarm+0x10>)
   99f52:	4798      	blx	r3
	return 0;
   99f54:	2300      	movs	r3, #0
}
   99f56:	4618      	mov	r0, r3
   99f58:	bd80      	pop	{r7, pc}
   99f5a:	bf00      	nop
   99f5c:	000984ad 	.word	0x000984ad

00099f60 <sv_cntrl_buzzer>:
uint8_t sv_cntrl_buzzer()
{
   99f60:	b580      	push	{r7, lr}
   99f62:	af00      	add	r7, sp, #0
	DD_SET_BUZZER();
   99f64:	4b02      	ldr	r3, [pc, #8]	; (99f70 <sv_cntrl_buzzer+0x10>)
   99f66:	4798      	blx	r3
	return 0;
   99f68:	2300      	movs	r3, #0
}
   99f6a:	4618      	mov	r0, r3
   99f6c:	bd80      	pop	{r7, pc}
   99f6e:	bf00      	nop
   99f70:	000984d5 	.word	0x000984d5

00099f74 <sv_cntrl_resetredalarm>:
uint8_t sv_cntrl_resetredalarm()
{
   99f74:	b580      	push	{r7, lr}
   99f76:	af00      	add	r7, sp, #0
	DD_RESET_RED();
   99f78:	4b02      	ldr	r3, [pc, #8]	; (99f84 <sv_cntrl_resetredalarm+0x10>)
   99f7a:	4798      	blx	r3
	return 0;
   99f7c:	2300      	movs	r3, #0
}
   99f7e:	4618      	mov	r0, r3
   99f80:	bd80      	pop	{r7, pc}
   99f82:	bf00      	nop
   99f84:	000984e9 	.word	0x000984e9

00099f88 <sv_cntrl_resetyellowalarm>:
uint8_t sv_cntrl_resetyellowalarm()
{
   99f88:	b580      	push	{r7, lr}
   99f8a:	af00      	add	r7, sp, #0
	DD_RESET_YELLOW();
   99f8c:	4b02      	ldr	r3, [pc, #8]	; (99f98 <sv_cntrl_resetyellowalarm+0x10>)
   99f8e:	4798      	blx	r3
	return 0;
   99f90:	2300      	movs	r3, #0
}
   99f92:	4618      	mov	r0, r3
   99f94:	bd80      	pop	{r7, pc}
   99f96:	bf00      	nop
   99f98:	00098511 	.word	0x00098511

00099f9c <sv_cntrl_resetgreenalarm>:
uint8_t sv_cntrl_resetgreenalarm()
{
   99f9c:	b580      	push	{r7, lr}
   99f9e:	af00      	add	r7, sp, #0
	DD_RESET_GREEN();
   99fa0:	4b02      	ldr	r3, [pc, #8]	; (99fac <sv_cntrl_resetgreenalarm+0x10>)
   99fa2:	4798      	blx	r3
	return 0;
   99fa4:	2300      	movs	r3, #0
}
   99fa6:	4618      	mov	r0, r3
   99fa8:	bd80      	pop	{r7, pc}
   99faa:	bf00      	nop
   99fac:	000984fd 	.word	0x000984fd

00099fb0 <sv_cntrl_nobuzzer>:
uint8_t sv_cntrl_nobuzzer()
{
   99fb0:	b580      	push	{r7, lr}
   99fb2:	af00      	add	r7, sp, #0
	DD_RESET_BUZZER();
   99fb4:	4b02      	ldr	r3, [pc, #8]	; (99fc0 <sv_cntrl_nobuzzer+0x10>)
   99fb6:	4798      	blx	r3
	return 0;
   99fb8:	2300      	movs	r3, #0
}
   99fba:	4618      	mov	r0, r3
   99fbc:	bd80      	pop	{r7, pc}
   99fbe:	bf00      	nop
   99fc0:	00098525 	.word	0x00098525

00099fc4 <sv_cntrl_setoutput>:
uint8_t sv_cntrl_setoutput(uint32_t p_io, uint32_t peri)
{
   99fc4:	b580      	push	{r7, lr}
   99fc6:	b082      	sub	sp, #8
   99fc8:	af00      	add	r7, sp, #0
   99fca:	6078      	str	r0, [r7, #4]
   99fcc:	6039      	str	r1, [r7, #0]
	//uint32_t p_io, peri;
	DD_SET_PIO(peri,p_io);
   99fce:	6838      	ldr	r0, [r7, #0]
   99fd0:	6879      	ldr	r1, [r7, #4]
   99fd2:	4b03      	ldr	r3, [pc, #12]	; (99fe0 <sv_cntrl_setoutput+0x1c>)
   99fd4:	4798      	blx	r3
	return 0;
   99fd6:	2300      	movs	r3, #0
}
   99fd8:	4618      	mov	r0, r3
   99fda:	3708      	adds	r7, #8
   99fdc:	46bd      	mov	sp, r7
   99fde:	bd80      	pop	{r7, pc}
   99fe0:	00097051 	.word	0x00097051

00099fe4 <sv_cntrl_resetoutput>:

uint8_t sv_cntrl_resetoutput(uint32_t p_io, uint32_t peri)
{
   99fe4:	b580      	push	{r7, lr}
   99fe6:	b082      	sub	sp, #8
   99fe8:	af00      	add	r7, sp, #0
   99fea:	6078      	str	r0, [r7, #4]
   99fec:	6039      	str	r1, [r7, #0]
	//uint32_t p_io, peri;
	DD_RESET_PIO(peri,p_io);
   99fee:	6838      	ldr	r0, [r7, #0]
   99ff0:	6879      	ldr	r1, [r7, #4]
   99ff2:	4b03      	ldr	r3, [pc, #12]	; (9a000 <sv_cntrl_resetoutput+0x1c>)
   99ff4:	4798      	blx	r3
	
	return 0;
   99ff6:	2300      	movs	r3, #0
   99ff8:	4618      	mov	r0, r3
   99ffa:	3708      	adds	r7, #8
   99ffc:	46bd      	mov	sp, r7
   99ffe:	bd80      	pop	{r7, pc}
   9a000:	000970d5 	.word	0x000970d5

0009a004 <sv_console_bytedatawrite>:
	
}

*/
uint32_t sv_console_bytedatawrite(uint8_t sv_consoleTxdatabyte)
{
   9a004:	b580      	push	{r7, lr}
   9a006:	b084      	sub	sp, #16
   9a008:	af00      	add	r7, sp, #0
   9a00a:	4603      	mov	r3, r0
   9a00c:	71fb      	strb	r3, [r7, #7]
	uint32_t console_stat;
	console_stat = DD_CONSOLE_TX(sv_consoleTxdatabyte);
   9a00e:	79fb      	ldrb	r3, [r7, #7]
   9a010:	4618      	mov	r0, r3
   9a012:	4b04      	ldr	r3, [pc, #16]	; (9a024 <sv_console_bytedatawrite+0x20>)
   9a014:	4798      	blx	r3
   9a016:	4603      	mov	r3, r0
   9a018:	60fb      	str	r3, [r7, #12]
	
	return console_stat;
   9a01a:	68fb      	ldr	r3, [r7, #12]
	
}
   9a01c:	4618      	mov	r0, r3
   9a01e:	3710      	adds	r7, #16
   9a020:	46bd      	mov	sp, r7
   9a022:	bd80      	pop	{r7, pc}
   9a024:	00098c71 	.word	0x00098c71

0009a028 <sv_console_receivedbyte>:


uint8_t sv_console_receivedbyte(uint8_t sv_consoleRxdatabyte)
{
   9a028:	b580      	push	{r7, lr}
   9a02a:	b082      	sub	sp, #8
   9a02c:	af00      	add	r7, sp, #0
   9a02e:	4603      	mov	r3, r0
   9a030:	71fb      	strb	r3, [r7, #7]
	//uint8_t sv_consoleRxdatabyte;
	
	
	cl_console_receivedbyte(sv_consoleRxdatabyte);
   9a032:	79fb      	ldrb	r3, [r7, #7]
   9a034:	4618      	mov	r0, r3
   9a036:	4b03      	ldr	r3, [pc, #12]	; (9a044 <sv_console_receivedbyte+0x1c>)
   9a038:	4798      	blx	r3
	//sv_consoleRxdatabyte = DD_CONSOLE_RX();
	
	return 0;
   9a03a:	2300      	movs	r3, #0
	
}
   9a03c:	4618      	mov	r0, r3
   9a03e:	3708      	adds	r7, #8
   9a040:	46bd      	mov	sp, r7
   9a042:	bd80      	pop	{r7, pc}
   9a044:	0009bfd5 	.word	0x0009bfd5

0009a048 <sv_prop_startpropeo_aligning>:
uint16_t count = 0;

extern Cl_Uint32Type Treatdata[ID_MAX_TREAT_PARAM] ;

void sv_prop_startpropeo_aligning(void)
{
   9a048:	b590      	push	{r4, r7, lr}
   9a04a:	b085      	sub	sp, #20
   9a04c:	af00      	add	r7, sp, #0
uint8_t dataarray[16] = { 0xaa,0xcc,0xdd,1,2,3,4,5,6,7,8,9,0xA,0xB,0xee,0xbb};
   9a04e:	4b07      	ldr	r3, [pc, #28]	; (9a06c <sv_prop_startpropeo_aligning+0x24>)
   9a050:	463c      	mov	r4, r7
   9a052:	6818      	ldr	r0, [r3, #0]
   9a054:	6859      	ldr	r1, [r3, #4]
   9a056:	689a      	ldr	r2, [r3, #8]
   9a058:	68db      	ldr	r3, [r3, #12]
   9a05a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
	//	cl_wait(20);
		//DD_IIC_SEND_PROP( CPU_PROP_IIC_ADDR, 0);
		//DD_IIC_CONSOLE_SEND(0x77, &dataarray ,16);
		 SV_CAN_WRITE_PROPO( PROP_START_ALIGMENT,0);
   9a05c:	2001      	movs	r0, #1
   9a05e:	2100      	movs	r1, #0
   9a060:	4b03      	ldr	r3, [pc, #12]	; (9a070 <sv_prop_startpropeo_aligning+0x28>)
   9a062:	4798      	blx	r3

}
   9a064:	3714      	adds	r7, #20
   9a066:	46bd      	mov	sp, r7
   9a068:	bd90      	pop	{r4, r7, pc}
   9a06a:	bf00      	nop
   9a06c:	000a8cf4 	.word	0x000a8cf4
   9a070:	00099b25 	.word	0x00099b25

0009a074 <sv_prop_startmixing>:
void sv_prop_startmixing()
{
   9a074:	b580      	push	{r7, lr}
   9a076:	af00      	add	r7, sp, #0
	{
	//	cl_wait(20);
	//	DD_IIC_SEND_PROP( CPU_PROP_IIC_ADDR, 1);
	//	DD_IIC_SEND_PROP( CPU_PROP_IIC_ADDR, 0);
	
		SV_CAN_WRITE_PROPO( PROP_START_MIXING,Treatdata[ID_setcond]);
   9a078:	4b03      	ldr	r3, [pc, #12]	; (9a088 <sv_prop_startmixing+0x14>)
   9a07a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   9a07c:	b29b      	uxth	r3, r3
   9a07e:	2002      	movs	r0, #2
   9a080:	4619      	mov	r1, r3
   9a082:	4b02      	ldr	r3, [pc, #8]	; (9a08c <sv_prop_startmixing+0x18>)
   9a084:	4798      	blx	r3
	
	}
	
}
   9a086:	bd80      	pop	{r7, pc}
   9a088:	2007265c 	.word	0x2007265c
   9a08c:	00099b25 	.word	0x00099b25

0009a090 <sv_prop_startacidpump>:



void sv_prop_startacidpump()
{
   9a090:	b580      	push	{r7, lr}
   9a092:	af00      	add	r7, sp, #0
	SV_CAN_WRITE_PROPO( PROP_START_ACID_PUMP,0);
   9a094:	200c      	movs	r0, #12
   9a096:	2100      	movs	r1, #0
   9a098:	4b01      	ldr	r3, [pc, #4]	; (9a0a0 <sv_prop_startacidpump+0x10>)
   9a09a:	4798      	blx	r3
			
}
   9a09c:	bd80      	pop	{r7, pc}
   9a09e:	bf00      	nop
   9a0a0:	00099b25 	.word	0x00099b25

0009a0a4 <sv_prop_set_propo_ACIDrc>:
	
}


void sv_prop_set_propo_ACIDrc(uint16_t data)
{
   9a0a4:	b580      	push	{r7, lr}
   9a0a6:	b084      	sub	sp, #16
   9a0a8:	af00      	add	r7, sp, #0
   9a0aa:	4603      	mov	r3, r0
   9a0ac:	80fb      	strh	r3, [r7, #6]
	
	uint16_t rc_count = data;
   9a0ae:	88fb      	ldrh	r3, [r7, #6]
   9a0b0:	81fb      	strh	r3, [r7, #14]
	SV_CAN_WRITE_PROPO( PROP_UPDATE_ACID_RC,data);                 // Gopal: Send Acid RC (speed) to Propo CPU via Can
   9a0b2:	88fb      	ldrh	r3, [r7, #6]
   9a0b4:	200e      	movs	r0, #14
   9a0b6:	4619      	mov	r1, r3
   9a0b8:	4b02      	ldr	r3, [pc, #8]	; (9a0c4 <sv_prop_set_propo_ACIDrc+0x20>)
   9a0ba:	4798      	blx	r3
}
   9a0bc:	3710      	adds	r7, #16
   9a0be:	46bd      	mov	sp, r7
   9a0c0:	bd80      	pop	{r7, pc}
   9a0c2:	bf00      	nop
   9a0c4:	00099b25 	.word	0x00099b25

0009a0c8 <sv_prop_stopmixing>:
{
	uint16_t conductivity = data;
	SV_CAN_WRITE_PROPO( PROP_SET_CONDUCTIVITY,conductivity);      // Gopal: Send user set conducivity value to Propo CPU via Can
}
void sv_prop_stopmixing()
{
   9a0c8:	b580      	push	{r7, lr}
   9a0ca:	af00      	add	r7, sp, #0
	//DD_IIC_SEND_PROP( CPU_PROP_IIC_ADDR, 2);
	SV_CAN_WRITE_PROPO( PROP_STOP_MIXING,0);
   9a0cc:	2003      	movs	r0, #3
   9a0ce:	2100      	movs	r1, #0
   9a0d0:	4b01      	ldr	r3, [pc, #4]	; (9a0d8 <sv_prop_stopmixing+0x10>)
   9a0d2:	4798      	blx	r3
}
   9a0d4:	bd80      	pop	{r7, pc}
   9a0d6:	bf00      	nop
   9a0d8:	00099b25 	.word	0x00099b25

0009a0dc <sv_prop_start_disinfect_intake>:


void sv_prop_start_disinfect_intake(void)
{
   9a0dc:	b580      	push	{r7, lr}
   9a0de:	af00      	add	r7, sp, #0


	{
	//	cl_wait(20);
	//	DD_IIC_SEND_PROP( CPU_PROP_IIC_ADDR, 3);
		SV_CAN_WRITE_PROPO( PROP_START_DISINFECTION,0);
   9a0e0:	2004      	movs	r0, #4
   9a0e2:	2100      	movs	r1, #0
   9a0e4:	4b01      	ldr	r3, [pc, #4]	; (9a0ec <sv_prop_start_disinfect_intake+0x10>)
   9a0e6:	4798      	blx	r3

	}
	
}
   9a0e8:	bd80      	pop	{r7, pc}
   9a0ea:	bf00      	nop
   9a0ec:	00099b25 	.word	0x00099b25

0009a0f0 <sv_prop_stop_disinfect_intake>:
void sv_prop_stop_disinfect_intake(void)
{
   9a0f0:	b580      	push	{r7, lr}
   9a0f2:	af00      	add	r7, sp, #0


	{
	//	cl_wait(20);
	//	DD_IIC_SEND_PROP( CPU_PROP_IIC_ADDR, 4);
		SV_CAN_WRITE_PROPO( PROP_STOP_DISINFECTION,0);
   9a0f4:	2005      	movs	r0, #5
   9a0f6:	2100      	movs	r1, #0
   9a0f8:	4b01      	ldr	r3, [pc, #4]	; (9a100 <sv_prop_stop_disinfect_intake+0x10>)
   9a0fa:	4798      	blx	r3

	}
	
}
   9a0fc:	bd80      	pop	{r7, pc}
   9a0fe:	bf00      	nop
   9a100:	00099b25 	.word	0x00099b25

0009a104 <sv_prop_start_citricdisinfect_intake>:
void sv_prop_start_citricdisinfect_intake(void)
{
   9a104:	b580      	push	{r7, lr}
   9a106:	af00      	add	r7, sp, #0


	{
	//	cl_wait(20);
		//DD_IIC_SEND_PROP( CPU_PROP_IIC_ADDR, 8);
		SV_CAN_WRITE_PROPO( PROP_START_CITRIC_DISINFECTION,0);
   9a108:	2006      	movs	r0, #6
   9a10a:	2100      	movs	r1, #0
   9a10c:	4b01      	ldr	r3, [pc, #4]	; (9a114 <sv_prop_start_citricdisinfect_intake+0x10>)
   9a10e:	4798      	blx	r3


	}
	
}
   9a110:	bd80      	pop	{r7, pc}
   9a112:	bf00      	nop
   9a114:	00099b25 	.word	0x00099b25

0009a118 <sv_prop_stop_citricdisinfect_intake>:
void sv_prop_stop_citricdisinfect_intake(void)
{
   9a118:	b580      	push	{r7, lr}
   9a11a:	af00      	add	r7, sp, #0


	{
	//	cl_wait(20);
		//DD_IIC_SEND_PROP( CPU_PROP_IIC_ADDR, 9);
		SV_CAN_WRITE_PROPO( PROP_STOP_CITRIC_DISINFECTION,0);
   9a11c:	2007      	movs	r0, #7
   9a11e:	2100      	movs	r1, #0
   9a120:	4b01      	ldr	r3, [pc, #4]	; (9a128 <sv_prop_stop_citricdisinfect_intake+0x10>)
   9a122:	4798      	blx	r3


	}
	
}
   9a124:	bd80      	pop	{r7, pc}
   9a126:	bf00      	nop
   9a128:	00099b25 	.word	0x00099b25

0009a12c <sv_prop_startopenfill>:
void sv_prop_startopenfill()
{
   9a12c:	b580      	push	{r7, lr}
   9a12e:	af00      	add	r7, sp, #0
	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"OPENFIL",6);
   9a130:	2018      	movs	r0, #24
   9a132:	4904      	ldr	r1, [pc, #16]	; (9a144 <sv_prop_startopenfill+0x18>)
   9a134:	2206      	movs	r2, #6
   9a136:	4b04      	ldr	r3, [pc, #16]	; (9a148 <sv_prop_startopenfill+0x1c>)
   9a138:	4798      	blx	r3
//	DD_IIC_SEND_PROP( CPU_PROP_IIC_ADDR, 5);
	SV_CAN_WRITE_PROPO( PROP_START_OPENFILL,0);
   9a13a:	2008      	movs	r0, #8
   9a13c:	2100      	movs	r1, #0
   9a13e:	4b03      	ldr	r3, [pc, #12]	; (9a14c <sv_prop_startopenfill+0x20>)
   9a140:	4798      	blx	r3
}
   9a142:	bd80      	pop	{r7, pc}
   9a144:	000a8d04 	.word	0x000a8d04
   9a148:	0009ba51 	.word	0x0009ba51
   9a14c:	00099b25 	.word	0x00099b25

0009a150 <sv_prop_stopopenfill>:
void sv_prop_stopopenfill()
{
   9a150:	b580      	push	{r7, lr}
   9a152:	af00      	add	r7, sp, #0
	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"STOPFIL",6);
   9a154:	2018      	movs	r0, #24
   9a156:	4904      	ldr	r1, [pc, #16]	; (9a168 <sv_prop_stopopenfill+0x18>)
   9a158:	2206      	movs	r2, #6
   9a15a:	4b04      	ldr	r3, [pc, #16]	; (9a16c <sv_prop_stopopenfill+0x1c>)
   9a15c:	4798      	blx	r3
	//DD_IIC_SEND_PROP( CPU_PROP_IIC_ADDR, 6);
	SV_CAN_WRITE_PROPO( PROP_STOP_OPENFILL,0);
   9a15e:	2009      	movs	r0, #9
   9a160:	2100      	movs	r1, #0
   9a162:	4b03      	ldr	r3, [pc, #12]	; (9a170 <sv_prop_stopopenfill+0x20>)
   9a164:	4798      	blx	r3
}
   9a166:	bd80      	pop	{r7, pc}
   9a168:	000a8d0c 	.word	0x000a8d0c
   9a16c:	0009ba51 	.word	0x0009ba51
   9a170:	00099b25 	.word	0x00099b25

0009a174 <sv_cs_setpotvalue>:
uint8_t sv_cs_readpotvalue(uint16_t* resistance);
uint8_t sv_cs_setpotvalue(uint16_t resistance) ;
uint8_t sv_cs_setcondpotvalue(uint16_t resistance);

uint8_t sv_cs_setpotvalue(uint16_t resistance) 
{
   9a174:	b580      	push	{r7, lr}
   9a176:	b082      	sub	sp, #8
   9a178:	af00      	add	r7, sp, #0
   9a17a:	4603      	mov	r3, r0
   9a17c:	80fb      	strh	r3, [r7, #6]
	 uint8_t iic_address;
	 uint16_t data;
	//	DD_IIC_SET_POT( CS_POT_IIC_ADDR, resistance);
		
		SV_CS_SET_POT(resistance);
   9a17e:	88fb      	ldrh	r3, [r7, #6]
   9a180:	4618      	mov	r0, r3
   9a182:	4b03      	ldr	r3, [pc, #12]	; (9a190 <sv_cs_setpotvalue+0x1c>)
   9a184:	4798      	blx	r3
		
		}
   9a186:	4618      	mov	r0, r3
   9a188:	3708      	adds	r7, #8
   9a18a:	46bd      	mov	sp, r7
   9a18c:	bd80      	pop	{r7, pc}
   9a18e:	bf00      	nop
   9a190:	0009a1b5 	.word	0x0009a1b5

0009a194 <sv_cs_setcondpotvalue>:
uint8_t sv_cs_setcondpotvalue(uint16_t resistance)
{
   9a194:	b580      	push	{r7, lr}
   9a196:	b082      	sub	sp, #8
   9a198:	af00      	add	r7, sp, #0
   9a19a:	4603      	mov	r3, r0
   9a19c:	80fb      	strh	r3, [r7, #6]
	uint8_t iic_address;
	uint16_t data;

	
	DD_IIC_SET_POT( COND_POT_IIC_ADDR, resistance);
   9a19e:	88fb      	ldrh	r3, [r7, #6]
   9a1a0:	202f      	movs	r0, #47	; 0x2f
   9a1a2:	4619      	mov	r1, r3
   9a1a4:	4b02      	ldr	r3, [pc, #8]	; (9a1b0 <sv_cs_setcondpotvalue+0x1c>)
   9a1a6:	4798      	blx	r3
	
}
   9a1a8:	4618      	mov	r0, r3
   9a1aa:	3708      	adds	r7, #8
   9a1ac:	46bd      	mov	sp, r7
   9a1ae:	bd80      	pop	{r7, pc}
   9a1b0:	00097681 	.word	0x00097681

0009a1b4 <SV_CS_SET_POT>:
		*resistance = data;
	
}

void SV_CS_SET_POT(uint16_t* resistance)
{
   9a1b4:	b580      	push	{r7, lr}
   9a1b6:	b084      	sub	sp, #16
   9a1b8:	af00      	add	r7, sp, #0
   9a1ba:	6078      	str	r0, [r7, #4]
	uint16_t data = resistance;
   9a1bc:	687b      	ldr	r3, [r7, #4]
   9a1be:	81fb      	strh	r3, [r7, #14]
	data = data & 0x3ff;
   9a1c0:	89fb      	ldrh	r3, [r7, #14]
   9a1c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
   9a1c6:	81fb      	strh	r3, [r7, #14]
	command_data_array[0] = AD5174_COMMAND(AD5174_WRITE_SERIAL_REG_TO_CONTRL_REG) | 0x02; //tempreg.temp_8bit[1] ;
   9a1c8:	4b08      	ldr	r3, [pc, #32]	; (9a1ec <SV_CS_SET_POT+0x38>)
   9a1ca:	f641 4202 	movw	r2, #7170	; 0x1c02
   9a1ce:	801a      	strh	r2, [r3, #0]
	command_data_array[1]  = AD5174_COMMAND(AD5174_WRITE_SERIALREG_TO_RDAC) | data;
   9a1d0:	89fb      	ldrh	r3, [r7, #14]
   9a1d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   9a1d6:	b29a      	uxth	r2, r3
   9a1d8:	4b04      	ldr	r3, [pc, #16]	; (9a1ec <SV_CS_SET_POT+0x38>)
   9a1da:	805a      	strh	r2, [r3, #2]
//	command_data_array[1]  = AD5174_COMMAND(AD5174_WRITE_SERIALREG_TO_RDAC)|(0x3ff & *resistance);
	//command_data_array[1]  = 0x04c2;
	
	DD_SPI_SET_POT(&command_data_array, 2);
   9a1dc:	4803      	ldr	r0, [pc, #12]	; (9a1ec <SV_CS_SET_POT+0x38>)
   9a1de:	2102      	movs	r1, #2
   9a1e0:	4b03      	ldr	r3, [pc, #12]	; (9a1f0 <SV_CS_SET_POT+0x3c>)
   9a1e2:	4798      	blx	r3
   9a1e4:	3710      	adds	r7, #16
   9a1e6:	46bd      	mov	sp, r7
   9a1e8:	bd80      	pop	{r7, pc}
   9a1ea:	bf00      	nop
   9a1ec:	20072800 	.word	0x20072800
   9a1f0:	00097d09 	.word	0x00097d09

0009a1f4 <sv_status_getsystemstatus>:




uint16_t sv_status_getsystemstatus(Sys_statusType* sensor_struct)
{
   9a1f4:	b580      	push	{r7, lr}
   9a1f6:	b098      	sub	sp, #96	; 0x60
   9a1f8:	af00      	add	r7, sp, #0
   9a1fa:	6078      	str	r0, [r7, #4]
	//sv_sensortype sv_sensor = SV_SENSOR_NULL;
	
	Sys_statusType sensor_struct1;
	sensor_struct1.levelswitch1	= 0;
   9a1fc:	2300      	movs	r3, #0
   9a1fe:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	sensor_struct1.FPcurrentstatus	= 1;
   9a202:	2301      	movs	r3, #1
   9a204:	84bb      	strh	r3, [r7, #36]	; 0x24
	sensor_struct1.DGPstatus = 1;
   9a206:	2301      	movs	r3, #1
   9a208:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
	//sv_sensor = SV_SENSOR_ID1;
	
	sensor_struct1.ps1status			= DD_CAN_READ_SENSORS(DD_CAN_SENSOR_ID1);
   9a20c:	2001      	movs	r0, #1
   9a20e:	4b9f      	ldr	r3, [pc, #636]	; (9a48c <sv_status_getsystemstatus+0x298>)
   9a210:	4798      	blx	r3
   9a212:	4603      	mov	r3, r0
   9a214:	853b      	strh	r3, [r7, #40]	; 0x28
	sensor_struct1.ps2status			= DD_CAN_READ_SENSORS(DD_CAN_SENSOR_ID2);
   9a216:	2002      	movs	r0, #2
   9a218:	4b9c      	ldr	r3, [pc, #624]	; (9a48c <sv_status_getsystemstatus+0x298>)
   9a21a:	4798      	blx	r3
   9a21c:	4603      	mov	r3, r0
   9a21e:	857b      	strh	r3, [r7, #42]	; 0x2a
	sensor_struct1.ps3status			= DD_CAN_READ_SENSORS(DD_CAN_SENSOR_ID3);
   9a220:	2003      	movs	r0, #3
   9a222:	4b9a      	ldr	r3, [pc, #616]	; (9a48c <sv_status_getsystemstatus+0x298>)
   9a224:	4798      	blx	r3
   9a226:	4603      	mov	r3, r0
   9a228:	85bb      	strh	r3, [r7, #44]	; 0x2c

	
	sensor_struct1.Temp1status			= DD_CAN_READ_SENSORS(DD_CAN_SENSOR_ID5);
   9a22a:	2005      	movs	r0, #5
   9a22c:	4b97      	ldr	r3, [pc, #604]	; (9a48c <sv_status_getsystemstatus+0x298>)
   9a22e:	4798      	blx	r3
   9a230:	4603      	mov	r3, r0
   9a232:	85fb      	strh	r3, [r7, #46]	; 0x2e
	sensor_struct1.Temp2status			= DD_CAN_READ_SENSORS(DD_CAN_SENSOR_ID6);
   9a234:	2006      	movs	r0, #6
   9a236:	4b95      	ldr	r3, [pc, #596]	; (9a48c <sv_status_getsystemstatus+0x298>)
   9a238:	4798      	blx	r3
   9a23a:	4603      	mov	r3, r0
   9a23c:	863b      	strh	r3, [r7, #48]	; 0x30
	sensor_struct1.Temp3status			= DD_CAN_READ_SENSORS(DD_CAN_SENSOR_ID7);
   9a23e:	2007      	movs	r0, #7
   9a240:	4b92      	ldr	r3, [pc, #584]	; (9a48c <sv_status_getsystemstatus+0x298>)
   9a242:	4798      	blx	r3
   9a244:	4603      	mov	r3, r0
   9a246:	867b      	strh	r3, [r7, #50]	; 0x32
	
//	sensor_struct1.Temp4status			= DD_READ_SENSORS(SV_SENSOR_ID13);
	
	sensor_struct1.cond_status			= DD_CAN_READ_SENSORS(DD_CAN_SENSOR_ID13);
   9a248:	200d      	movs	r0, #13
   9a24a:	4b90      	ldr	r3, [pc, #576]	; (9a48c <sv_status_getsystemstatus+0x298>)
   9a24c:	4798      	blx	r3
   9a24e:	4603      	mov	r3, r0
   9a250:	86fb      	strh	r3, [r7, #54]	; 0x36
	sensor_struct1.cond_status_dac		= DD_CAN_READ_SENSORS(DD_CAN_SENSOR_ID14);
   9a252:	200e      	movs	r0, #14
   9a254:	4b8d      	ldr	r3, [pc, #564]	; (9a48c <sv_status_getsystemstatus+0x298>)
   9a256:	4798      	blx	r3
   9a258:	4603      	mov	r3, r0
   9a25a:	873b      	strh	r3, [r7, #56]	; 0x38
	sensor_struct1.cond_acid			= DD_CAN_READ_SENSORS(DD_CAN_SENSOR_ID11);
   9a25c:	200b      	movs	r0, #11
   9a25e:	4b8b      	ldr	r3, [pc, #556]	; (9a48c <sv_status_getsystemstatus+0x298>)
   9a260:	4798      	blx	r3
   9a262:	4603      	mov	r3, r0
   9a264:	87bb      	strh	r3, [r7, #60]	; 0x3c
	sensor_struct1.cond_bicarb			= DD_CAN_READ_SENSORS(DD_CAN_SENSOR_ID12);
   9a266:	200c      	movs	r0, #12
   9a268:	4b88      	ldr	r3, [pc, #544]	; (9a48c <sv_status_getsystemstatus+0x298>)
   9a26a:	4798      	blx	r3
   9a26c:	4603      	mov	r3, r0
   9a26e:	87fb      	strh	r3, [r7, #62]	; 0x3e
//	sensor_struct1.cond_wien_status		= DD_READ_SENSORS(SV_SENSOR_ID12);
	
	sensor_struct1.aptstatus			= DD_CAN_READ_SENSORS(DD_CAN_SENSOR_ID19);
   9a270:	2013      	movs	r0, #19
   9a272:	4b86      	ldr	r3, [pc, #536]	; (9a48c <sv_status_getsystemstatus+0x298>)
   9a274:	4798      	blx	r3
   9a276:	4603      	mov	r3, r0
   9a278:	833b      	strh	r3, [r7, #24]
	sensor_struct1.vptstatus			= DD_CAN_READ_SENSORS(DD_CAN_SENSOR_ID20);
   9a27a:	2014      	movs	r0, #20
   9a27c:	4b83      	ldr	r3, [pc, #524]	; (9a48c <sv_status_getsystemstatus+0x298>)
   9a27e:	4798      	blx	r3
   9a280:	4603      	mov	r3, r0
   9a282:	837b      	strh	r3, [r7, #26]
	
	sensor_struct1.bloodpumpdoor		= DD_RD_SENSIN(SV_SENSIN_ID14);
   9a284:	200e      	movs	r0, #14
   9a286:	4b82      	ldr	r3, [pc, #520]	; (9a490 <sv_status_getsystemstatus+0x29c>)
   9a288:	4798      	blx	r3
   9a28a:	4603      	mov	r3, r0
   9a28c:	723b      	strb	r3, [r7, #8]
	sensor_struct1.BPstatus				= DD_RD_SENSIN(SV_SENSIN_ID5);
   9a28e:	2005      	movs	r0, #5
   9a290:	4b7f      	ldr	r3, [pc, #508]	; (9a490 <sv_status_getsystemstatus+0x29c>)
   9a292:	4798      	blx	r3
   9a294:	4603      	mov	r3, r0
   9a296:	b29b      	uxth	r3, r3
   9a298:	817b      	strh	r3, [r7, #10]
	sensor_struct1.BP_INC				= DD_RD_SENSIN(SV_SENSIN_ID15);
   9a29a:	200f      	movs	r0, #15
   9a29c:	4b7c      	ldr	r3, [pc, #496]	; (9a490 <sv_status_getsystemstatus+0x29c>)
   9a29e:	4798      	blx	r3
   9a2a0:	4603      	mov	r3, r0
   9a2a2:	b29b      	uxth	r3, r3
   9a2a4:	81bb      	strh	r3, [r7, #12]
	sensor_struct1.BP_DEC				= DD_RD_SENSIN(SV_SENSIN_ID16);
   9a2a6:	2010      	movs	r0, #16
   9a2a8:	4b79      	ldr	r3, [pc, #484]	; (9a490 <sv_status_getsystemstatus+0x29c>)
   9a2aa:	4798      	blx	r3
   9a2ac:	4603      	mov	r3, r0
   9a2ae:	b29b      	uxth	r3, r3
   9a2b0:	81fb      	strh	r3, [r7, #14]
	sensor_struct1.Heparin_rotation_marker = DD_RD_SENSIN(SV_SENSIN_ID13);
   9a2b2:	200d      	movs	r0, #13
   9a2b4:	4b76      	ldr	r3, [pc, #472]	; (9a490 <sv_status_getsystemstatus+0x29c>)
   9a2b6:	4798      	blx	r3
   9a2b8:	4603      	mov	r3, r0
   9a2ba:	b29b      	uxth	r3, r3
   9a2bc:	827b      	strh	r3, [r7, #18]
	sensor_struct1.Heparin_full_marker	= DD_RD_SENSIN(SV_SENSIN_ID6);
   9a2be:	2006      	movs	r0, #6
   9a2c0:	4b73      	ldr	r3, [pc, #460]	; (9a490 <sv_status_getsystemstatus+0x29c>)
   9a2c2:	4798      	blx	r3
   9a2c4:	4603      	mov	r3, r0
   9a2c6:	b29b      	uxth	r3, r3
   9a2c8:	82bb      	strh	r3, [r7, #20]
	sensor_struct1.Heparin_empty_marker = DD_RD_SENSIN(SV_SENSIN_ID7);
   9a2ca:	2007      	movs	r0, #7
   9a2cc:	4b70      	ldr	r3, [pc, #448]	; (9a490 <sv_status_getsystemstatus+0x29c>)
   9a2ce:	4798      	blx	r3
   9a2d0:	4603      	mov	r3, r0
   9a2d2:	b29b      	uxth	r3, r3
   9a2d4:	82fb      	strh	r3, [r7, #22]

	
	//sensor_struct1.VC_status			= DD_READ_SENSORS(SV_SENSIN_ID17);
	//sensor_struct1.VC_door_status		= DD_READ_SENSORS(SV_SENSIN_ID18);

	sensor_struct1.bdstatus				= DD_RD_SENSIN(SV_SENSIN_ID26);
   9a2d6:	201a      	movs	r0, #26
   9a2d8:	4b6d      	ldr	r3, [pc, #436]	; (9a490 <sv_status_getsystemstatus+0x29c>)
   9a2da:	4798      	blx	r3
   9a2dc:	4603      	mov	r3, r0
   9a2de:	b29b      	uxth	r3, r3
   9a2e0:	843b      	strh	r3, [r7, #32]
	sensor_struct1.abdstatus			= DD_RD_SENSIN(SV_SENSIN_ID8);
   9a2e2:	2008      	movs	r0, #8
   9a2e4:	4b6a      	ldr	r3, [pc, #424]	; (9a490 <sv_status_getsystemstatus+0x29c>)
   9a2e6:	4798      	blx	r3
   9a2e8:	4603      	mov	r3, r0
   9a2ea:	b29b      	uxth	r3, r3
   9a2ec:	847b      	strh	r3, [r7, #34]	; 0x22
	sensor_struct1.FPcurrentstatus		= DD_RD_SENSIN(SV_SENSIN_ID3);
   9a2ee:	2003      	movs	r0, #3
   9a2f0:	4b67      	ldr	r3, [pc, #412]	; (9a490 <sv_status_getsystemstatus+0x29c>)
   9a2f2:	4798      	blx	r3
   9a2f4:	4603      	mov	r3, r0
   9a2f6:	b29b      	uxth	r3, r3
   9a2f8:	84bb      	strh	r3, [r7, #36]	; 0x24
	sensor_struct1.UFPstatus			= DD_RD_SENSIN(SV_SENSIN_ID4);
   9a2fa:	2004      	movs	r0, #4
   9a2fc:	4b64      	ldr	r3, [pc, #400]	; (9a490 <sv_status_getsystemstatus+0x29c>)
   9a2fe:	4798      	blx	r3
   9a300:	4603      	mov	r3, r0
   9a302:	b29b      	uxth	r3, r3
   9a304:	84fb      	strh	r3, [r7, #38]	; 0x26
	
	sensor_struct1.levelswitch1			= DD_RD_SENSIN(SV_SENSIN_ID1);
   9a306:	2001      	movs	r0, #1
   9a308:	4b61      	ldr	r3, [pc, #388]	; (9a490 <sv_status_getsystemstatus+0x29c>)
   9a30a:	4798      	blx	r3
   9a30c:	4603      	mov	r3, r0
   9a30e:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	sensor_struct1.Flowstatus			= DD_RD_SENSIN(SV_SENSIN_ID12);
   9a312:	200c      	movs	r0, #12
   9a314:	4b5e      	ldr	r3, [pc, #376]	; (9a490 <sv_status_getsystemstatus+0x29c>)
   9a316:	4798      	blx	r3
   9a318:	4603      	mov	r3, r0
   9a31a:	b29b      	uxth	r3, r3
   9a31c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	sensor_struct1.bldstatus			= DD_RD_SENSIN(SV_SENSIN_ID27);
   9a320:	201b      	movs	r0, #27
   9a322:	4b5b      	ldr	r3, [pc, #364]	; (9a490 <sv_status_getsystemstatus+0x29c>)
   9a324:	4798      	blx	r3
   9a326:	4603      	mov	r3, r0
   9a328:	b29b      	uxth	r3, r3
   9a32a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
	
	sensor_struct1.holderstatus1		= DD_RD_SENSIN(SV_SENSIN_ID9);
   9a32e:	2009      	movs	r0, #9
   9a330:	4b57      	ldr	r3, [pc, #348]	; (9a490 <sv_status_getsystemstatus+0x29c>)
   9a332:	4798      	blx	r3
   9a334:	4603      	mov	r3, r0
   9a336:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	sensor_struct1.holderstatus2		= DD_RD_SENSIN(SV_SENSIN_ID10);
   9a33a:	200a      	movs	r0, #10
   9a33c:	4b54      	ldr	r3, [pc, #336]	; (9a490 <sv_status_getsystemstatus+0x29c>)
   9a33e:	4798      	blx	r3
   9a340:	4603      	mov	r3, r0
   9a342:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	sensor_struct1.calibration			= DD_RD_SENSIN(SV_SENSIN_ID19);
   9a346:	2013      	movs	r0, #19
   9a348:	4b51      	ldr	r3, [pc, #324]	; (9a490 <sv_status_getsystemstatus+0x29c>)
   9a34a:	4798      	blx	r3
   9a34c:	4603      	mov	r3, r0
   9a34e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	
	sensor_struct1.bicarb_inlet_status	=  DD_RD_SENSIN(SV_SENSIN_ID20);
   9a352:	2014      	movs	r0, #20
   9a354:	4b4e      	ldr	r3, [pc, #312]	; (9a490 <sv_status_getsystemstatus+0x29c>)
   9a356:	4798      	blx	r3
   9a358:	4603      	mov	r3, r0
   9a35a:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	sensor_struct1.acid_inlet_status	=  DD_RD_SENSIN(SV_SENSIN_ID21);
   9a35e:	2015      	movs	r0, #21
   9a360:	4b4b      	ldr	r3, [pc, #300]	; (9a490 <sv_status_getsystemstatus+0x29c>)
   9a362:	4798      	blx	r3
   9a364:	4603      	mov	r3, r0
   9a366:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	sensor_struct1.CPU2_interupt		=  DD_RD_SENSIN(SV_SENSIN_ID22);
   9a36a:	2016      	movs	r0, #22
   9a36c:	4b48      	ldr	r3, [pc, #288]	; (9a490 <sv_status_getsystemstatus+0x29c>)
   9a36e:	4798      	blx	r3
   9a370:	4603      	mov	r3, r0
   9a372:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	sensor_struct1.CPU3_interrupt		=  DD_RD_SENSIN(SV_SENSIN_ID23);
   9a376:	2017      	movs	r0, #23
   9a378:	4b45      	ldr	r3, [pc, #276]	; (9a490 <sv_status_getsystemstatus+0x29c>)
   9a37a:	4798      	blx	r3
   9a37c:	4603      	mov	r3, r0
   9a37e:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	sensor_struct1.Redundancy_IRQ		=  DD_RD_SENSIN(SV_SENSIN_ID24);
   9a382:	2018      	movs	r0, #24
   9a384:	4b42      	ldr	r3, [pc, #264]	; (9a490 <sv_status_getsystemstatus+0x29c>)
   9a386:	4798      	blx	r3
   9a388:	4603      	mov	r3, r0
   9a38a:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
		
	sensor_struct1.DGPstatus		= DD_RD_SENSIN(SV_SENSIN_ID2);
   9a38e:	2002      	movs	r0, #2
   9a390:	4b3f      	ldr	r3, [pc, #252]	; (9a490 <sv_status_getsystemstatus+0x29c>)
   9a392:	4798      	blx	r3
   9a394:	4603      	mov	r3, r0
   9a396:	b29b      	uxth	r3, r3
   9a398:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
	sensor_struct1.PowerFailure		= DD_RD_SENSIN(SV_SENSIN_ID36);
   9a39c:	2024      	movs	r0, #36	; 0x24
   9a39e:	4b3c      	ldr	r3, [pc, #240]	; (9a490 <sv_status_getsystemstatus+0x29c>)
   9a3a0:	4798      	blx	r3
   9a3a2:	4603      	mov	r3, r0
   9a3a4:	b29b      	uxth	r3, r3
   9a3a6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	
	
	sensor_struct1.BP_ON_OFF = DD_RD_SENSIN(SV_SENSIN_ID25);
   9a3aa:	2019      	movs	r0, #25
   9a3ac:	4b38      	ldr	r3, [pc, #224]	; (9a490 <sv_status_getsystemstatus+0x29c>)
   9a3ae:	4798      	blx	r3
   9a3b0:	4603      	mov	r3, r0
   9a3b2:	b29b      	uxth	r3, r3
   9a3b4:	823b      	strh	r3, [r7, #16]
	
	sensor_struct->ps1status			= sensor_struct1.ps1status;
   9a3b6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
   9a3b8:	687b      	ldr	r3, [r7, #4]
   9a3ba:	841a      	strh	r2, [r3, #32]
	sensor_struct->ps2status			= sensor_struct1.ps2status;
   9a3bc:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
   9a3be:	687b      	ldr	r3, [r7, #4]
   9a3c0:	845a      	strh	r2, [r3, #34]	; 0x22
	sensor_struct->ps3status			= sensor_struct1.ps3status;
   9a3c2:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
   9a3c4:	687b      	ldr	r3, [r7, #4]
   9a3c6:	849a      	strh	r2, [r3, #36]	; 0x24
	sensor_struct->cond_status			= sensor_struct1.cond_status;
   9a3c8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
   9a3ca:	687b      	ldr	r3, [r7, #4]
   9a3cc:	85da      	strh	r2, [r3, #46]	; 0x2e
	sensor_struct->cond_status_dac		= sensor_struct1.cond_status_dac;
   9a3ce:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
   9a3d0:	687b      	ldr	r3, [r7, #4]
   9a3d2:	861a      	strh	r2, [r3, #48]	; 0x30
	sensor_struct->cond_wien_status		= sensor_struct1.cond_wien_status;
   9a3d4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
   9a3d6:	687b      	ldr	r3, [r7, #4]
   9a3d8:	865a      	strh	r2, [r3, #50]	; 0x32
	sensor_struct->cond_acid			= sensor_struct1.cond_acid;
   9a3da:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
   9a3dc:	687b      	ldr	r3, [r7, #4]
   9a3de:	869a      	strh	r2, [r3, #52]	; 0x34
	sensor_struct->cond_bicarb			= sensor_struct1.cond_bicarb;
   9a3e0:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
   9a3e2:	687b      	ldr	r3, [r7, #4]
   9a3e4:	86da      	strh	r2, [r3, #54]	; 0x36
	sensor_struct->Temp1status			= sensor_struct1.Temp1status;
   9a3e6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
   9a3e8:	687b      	ldr	r3, [r7, #4]
   9a3ea:	84da      	strh	r2, [r3, #38]	; 0x26
	sensor_struct->Temp2status			= sensor_struct1.Temp2status;
   9a3ec:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
   9a3ee:	687b      	ldr	r3, [r7, #4]
   9a3f0:	851a      	strh	r2, [r3, #40]	; 0x28
	sensor_struct->Temp3status			= sensor_struct1.Temp3status;
   9a3f2:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
   9a3f4:	687b      	ldr	r3, [r7, #4]
   9a3f6:	855a      	strh	r2, [r3, #42]	; 0x2a
	sensor_struct->aptstatus			= sensor_struct1.aptstatus;
   9a3f8:	8b3a      	ldrh	r2, [r7, #24]
   9a3fa:	687b      	ldr	r3, [r7, #4]
   9a3fc:	821a      	strh	r2, [r3, #16]
	sensor_struct->vptstatus			= sensor_struct1.vptstatus;
   9a3fe:	8b7a      	ldrh	r2, [r7, #26]
   9a400:	687b      	ldr	r3, [r7, #4]
   9a402:	825a      	strh	r2, [r3, #18]
		
	sensor_struct->levelswitch1			= sensor_struct1.levelswitch1;
   9a404:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
   9a408:	687b      	ldr	r3, [r7, #4]
   9a40a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	sensor_struct->FPcurrentstatus		= sensor_struct1.FPcurrentstatus;
   9a40e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
   9a410:	687b      	ldr	r3, [r7, #4]
   9a412:	839a      	strh	r2, [r3, #28]
	sensor_struct->DGPstatus		= sensor_struct1.DGPstatus;
   9a414:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
   9a418:	687b      	ldr	r3, [r7, #4]
   9a41a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	sensor_struct->UFPstatus			= sensor_struct1.UFPstatus;
   9a41e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
   9a420:	687b      	ldr	r3, [r7, #4]
   9a422:	83da      	strh	r2, [r3, #30]
	sensor_struct->BPstatus				= sensor_struct1.BPstatus;
   9a424:	897a      	ldrh	r2, [r7, #10]
   9a426:	687b      	ldr	r3, [r7, #4]
   9a428:	805a      	strh	r2, [r3, #2]
	sensor_struct->bldstatus			= sensor_struct1.bldstatus;
   9a42a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
   9a42e:	687b      	ldr	r3, [r7, #4]
   9a430:	879a      	strh	r2, [r3, #60]	; 0x3c
	sensor_struct->bdstatus				= sensor_struct1.bdstatus;
   9a432:	8c3a      	ldrh	r2, [r7, #32]
   9a434:	687b      	ldr	r3, [r7, #4]
   9a436:	831a      	strh	r2, [r3, #24]
	sensor_struct->abdstatus			= sensor_struct1.abdstatus;
   9a438:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
   9a43a:	687b      	ldr	r3, [r7, #4]
   9a43c:	835a      	strh	r2, [r3, #26]
	sensor_struct->holderstatus1		= sensor_struct1.holderstatus1;
   9a43e:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   9a442:	687b      	ldr	r3, [r7, #4]
   9a444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	sensor_struct->holderstatus2		= sensor_struct1.holderstatus2;
   9a448:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
   9a44c:	687b      	ldr	r3, [r7, #4]
   9a44e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	sensor_struct->bloodpumpdoor		= sensor_struct1.bloodpumpdoor;
   9a452:	7a3a      	ldrb	r2, [r7, #8]
   9a454:	687b      	ldr	r3, [r7, #4]
   9a456:	701a      	strb	r2, [r3, #0]
	sensor_struct->Flowstatus			= sensor_struct1.Flowstatus;
   9a458:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
   9a45c:	687b      	ldr	r3, [r7, #4]
   9a45e:	875a      	strh	r2, [r3, #58]	; 0x3a
	sensor_struct->Heparin_full_marker  = sensor_struct1.Heparin_full_marker;
   9a460:	8aba      	ldrh	r2, [r7, #20]
   9a462:	687b      	ldr	r3, [r7, #4]
   9a464:	819a      	strh	r2, [r3, #12]
	sensor_struct->Heparin_empty_marker = sensor_struct1.Heparin_empty_marker;
   9a466:	8afa      	ldrh	r2, [r7, #22]
   9a468:	687b      	ldr	r3, [r7, #4]
   9a46a:	81da      	strh	r2, [r3, #14]
	sensor_struct->Heparin_rotation_marker = sensor_struct1.Heparin_rotation_marker;
   9a46c:	8a7a      	ldrh	r2, [r7, #18]
   9a46e:	687b      	ldr	r3, [r7, #4]
   9a470:	815a      	strh	r2, [r3, #10]
	sensor_struct->acid_inlet_status = sensor_struct1.acid_inlet_status;
   9a472:	f897 2049 	ldrb.w	r2, [r7, #73]	; 0x49
   9a476:	687b      	ldr	r3, [r7, #4]
   9a478:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	sensor_struct->bicarb_inlet_status = sensor_struct1.bicarb_inlet_status;
   9a47c:	f897 204a 	ldrb.w	r2, [r7, #74]	; 0x4a
   9a480:	687b      	ldr	r3, [r7, #4]
   9a482:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	
	sensor_struct->BP_DEC =sensor_struct1.BP_DEC;
   9a486:	89fa      	ldrh	r2, [r7, #14]
   9a488:	687b      	ldr	r3, [r7, #4]
   9a48a:	e003      	b.n	9a494 <sv_status_getsystemstatus+0x2a0>
   9a48c:	00096c79 	.word	0x00096c79
   9a490:	000989e5 	.word	0x000989e5
   9a494:	80da      	strh	r2, [r3, #6]
	sensor_struct->BP_INC = sensor_struct1. BP_INC; 
   9a496:	89ba      	ldrh	r2, [r7, #12]
   9a498:	687b      	ldr	r3, [r7, #4]
   9a49a:	809a      	strh	r2, [r3, #4]
	sensor_struct->BP_ON_OFF = sensor_struct1. BP_ON_OFF; 
   9a49c:	8a3a      	ldrh	r2, [r7, #16]
   9a49e:	687b      	ldr	r3, [r7, #4]
   9a4a0:	811a      	strh	r2, [r3, #8]
	sensor_struct->PowerFailure = sensor_struct1.PowerFailure; 
   9a4a2:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
   9a4a6:	687b      	ldr	r3, [r7, #4]
   9a4a8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	
	return 0;
   9a4ac:	2300      	movs	r3, #0

}
   9a4ae:	4618      	mov	r0, r3
   9a4b0:	3760      	adds	r7, #96	; 0x60
   9a4b2:	46bd      	mov	sp, r7
   9a4b4:	bd80      	pop	{r7, pc}
   9a4b6:	bf00      	nop

0009a4b8 <SV_SYSTEM_INIT>:
extern void DD_INIT_IIC(void);
extern Cl_Uint8Type sum[11];
extern Cl_Uint8Type checksum_all[11];

void SV_SYSTEM_INIT()
{
   9a4b8:	b580      	push	{r7, lr}
   9a4ba:	af00      	add	r7, sp, #0
	//uint32_t prd_val=1000,dty_val = 100;
	DD_INIT_CLOCK();
   9a4bc:	4b0c      	ldr	r3, [pc, #48]	; (9a4f0 <SV_SYSTEM_INIT+0x38>)
   9a4be:	4798      	blx	r3
	DD_INIT_PIO();
   9a4c0:	4b0c      	ldr	r3, [pc, #48]	; (9a4f4 <SV_SYSTEM_INIT+0x3c>)
   9a4c2:	4798      	blx	r3
	DD_INIT_UART();
   9a4c4:	4b0c      	ldr	r3, [pc, #48]	; (9a4f8 <SV_SYSTEM_INIT+0x40>)
   9a4c6:	4798      	blx	r3
	DD_INIT_TIMER();
   9a4c8:	4b0c      	ldr	r3, [pc, #48]	; (9a4fc <SV_SYSTEM_INIT+0x44>)
   9a4ca:	4798      	blx	r3
//	DD_INIT_ADC();
	DD_INIT_PWM();
   9a4cc:	4b0c      	ldr	r3, [pc, #48]	; (9a500 <SV_SYSTEM_INIT+0x48>)
   9a4ce:	4798      	blx	r3
	DD_INIT_NVM();
   9a4d0:	4b0c      	ldr	r3, [pc, #48]	; (9a504 <SV_SYSTEM_INIT+0x4c>)
   9a4d2:	4798      	blx	r3
	DD_INIT_INT();
   9a4d4:	4b0c      	ldr	r3, [pc, #48]	; (9a508 <SV_SYSTEM_INIT+0x50>)
   9a4d6:	4798      	blx	r3
	DD_INIT_IIC();
   9a4d8:	4b0c      	ldr	r3, [pc, #48]	; (9a50c <SV_SYSTEM_INIT+0x54>)
   9a4da:	4798      	blx	r3
	DD_INIT_SPI();
   9a4dc:	4b0c      	ldr	r3, [pc, #48]	; (9a510 <SV_SYSTEM_INIT+0x58>)
   9a4de:	4798      	blx	r3

    DD_INIT_CAN();
   9a4e0:	4b0c      	ldr	r3, [pc, #48]	; (9a514 <SV_SYSTEM_INIT+0x5c>)
   9a4e2:	4798      	blx	r3
// 		{
// 			//printf("error\n");
// 		}
// 	}
	
	SV_START_TIMER(0,1);
   9a4e4:	2000      	movs	r0, #0
   9a4e6:	2101      	movs	r1, #1
   9a4e8:	4b0b      	ldr	r3, [pc, #44]	; (9a518 <SV_SYSTEM_INIT+0x60>)
   9a4ea:	4798      	blx	r3
	//printf("1");
	//DD_SET_PRDY(CH_0,prd_val);
	//DD_SET_DUTY(CH_1,dty_val);
   9a4ec:	bd80      	pop	{r7, pc}
   9a4ee:	bf00      	nop
   9a4f0:	00096d99 	.word	0x00096d99
   9a4f4:	00096dcd 	.word	0x00096dcd
   9a4f8:	00099a95 	.word	0x00099a95
   9a4fc:	00099599 	.word	0x00099599
   9a500:	00097a39 	.word	0x00097a39
   9a504:	000978ed 	.word	0x000978ed
   9a508:	00097811 	.word	0x00097811
   9a50c:	0009764d 	.word	0x0009764d
   9a510:	00097e51 	.word	0x00097e51
   9a514:	00096b09 	.word	0x00096b09
   9a518:	0009a51d 	.word	0x0009a51d

0009a51c <SV_START_TIMER>:
 */ 

#include "SV_TIMER.h"

uint8_t SV_START_TIMER(uint8_t timer_no, uint32_t timer_res)
{
   9a51c:	b580      	push	{r7, lr}
   9a51e:	b082      	sub	sp, #8
   9a520:	af00      	add	r7, sp, #0
   9a522:	4603      	mov	r3, r0
   9a524:	6039      	str	r1, [r7, #0]
   9a526:	71fb      	strb	r3, [r7, #7]
// 	timer_no = 2;
// 	timer_res = 100;
// 	printf("inside sv start");
	DD_CONFIG_TIMER(timer_no, timer_res);
   9a528:	683b      	ldr	r3, [r7, #0]
   9a52a:	b2db      	uxtb	r3, r3
   9a52c:	79fa      	ldrb	r2, [r7, #7]
   9a52e:	4610      	mov	r0, r2
   9a530:	4619      	mov	r1, r3
   9a532:	4b03      	ldr	r3, [pc, #12]	; (9a540 <SV_START_TIMER+0x24>)
   9a534:	4798      	blx	r3
	
	return 0;
   9a536:	2300      	movs	r3, #0
}
   9a538:	4618      	mov	r0, r3
   9a53a:	3708      	adds	r7, #8
   9a53c:	46bd      	mov	sp, r7
   9a53e:	bd80      	pop	{r7, pc}
   9a540:	00098cbd 	.word	0x00098cbd

0009a544 <sv_nvmgetdata>:
	uint8_t byte[2];
	uint16_t twobyte;
	}nvdatatype;
	
Sv_ReturnCodesType sv_nvmgetdata(uint8_t dataItemId, uint8_t* pdata)
{
   9a544:	b480      	push	{r7}
   9a546:	b085      	sub	sp, #20
   9a548:	af00      	add	r7, sp, #0
   9a54a:	4603      	mov	r3, r0
   9a54c:	6039      	str	r1, [r7, #0]
   9a54e:	71fb      	strb	r3, [r7, #7]
	{
		pdata[size] = nvmarray[(dataItemId-1) * 4 + size] ;
	}
#endif
	
			temp.twobyte = nvmarray[dataItemId-1]  ;
   9a550:	79fb      	ldrb	r3, [r7, #7]
   9a552:	3b01      	subs	r3, #1
   9a554:	4a08      	ldr	r2, [pc, #32]	; (9a578 <sv_nvmgetdata+0x34>)
   9a556:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
   9a55a:	81bb      	strh	r3, [r7, #12]
			pdata[0] = temp.byte[0]  ;
   9a55c:	7b3a      	ldrb	r2, [r7, #12]
   9a55e:	683b      	ldr	r3, [r7, #0]
   9a560:	701a      	strb	r2, [r3, #0]
			pdata[1] = temp.byte[1]  ;
   9a562:	683b      	ldr	r3, [r7, #0]
   9a564:	3301      	adds	r3, #1
   9a566:	7b7a      	ldrb	r2, [r7, #13]
   9a568:	701a      	strb	r2, [r3, #0]
		break;
		default:
		break;
	}
	#endif
		return SV_OK;
   9a56a:	2300      	movs	r3, #0
}
   9a56c:	4618      	mov	r0, r3
   9a56e:	3714      	adds	r7, #20
   9a570:	46bd      	mov	sp, r7
   9a572:	f85d 7b04 	ldr.w	r7, [sp], #4
   9a576:	4770      	bx	lr
   9a578:	20070b2c 	.word	0x20070b2c

0009a57c <sv_nvmsetdata>:


Sv_ReturnCodesType sv_nvmsetdata(uint8_t dataItemId,uint8_t* pdata,uint8_t datasize)
{
   9a57c:	b480      	push	{r7}
   9a57e:	b083      	sub	sp, #12
   9a580:	af00      	add	r7, sp, #0
   9a582:	4603      	mov	r3, r0
   9a584:	6039      	str	r1, [r7, #0]
   9a586:	71fb      	strb	r3, [r7, #7]
   9a588:	4613      	mov	r3, r2
   9a58a:	71bb      	strb	r3, [r7, #6]
// 	
// 			temp.byte[0] = pdata[0];
// 			temp.byte[1] = pdata[1];
// 			nvmarray[dataItemId-1] = temp.twobyte;
			
		return SV_OK;
   9a58c:	2300      	movs	r3, #0
   9a58e:	4618      	mov	r0, r3
   9a590:	370c      	adds	r7, #12
   9a592:	46bd      	mov	sp, r7
   9a594:	f85d 7b04 	ldr.w	r7, [sp], #4
   9a598:	4770      	bx	lr
   9a59a:	bf00      	nop

0009a59c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   9a59c:	b580      	push	{r7, lr}
   9a59e:	b086      	sub	sp, #24
   9a5a0:	af00      	add	r7, sp, #0
   9a5a2:	60f8      	str	r0, [r7, #12]
   9a5a4:	60b9      	str	r1, [r7, #8]
   9a5a6:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   9a5a8:	2300      	movs	r3, #0
   9a5aa:	617b      	str	r3, [r7, #20]

	if (file != 0) {
   9a5ac:	68fb      	ldr	r3, [r7, #12]
   9a5ae:	2b00      	cmp	r3, #0
   9a5b0:	d002      	beq.n	9a5b8 <_read+0x1c>
		return -1;
   9a5b2:	f04f 33ff 	mov.w	r3, #4294967295
   9a5b6:	e014      	b.n	9a5e2 <_read+0x46>
	}

	for (; len > 0; --len) {
   9a5b8:	e00f      	b.n	9a5da <_read+0x3e>
		ptr_get(stdio_base, ptr);
   9a5ba:	4b0c      	ldr	r3, [pc, #48]	; (9a5ec <_read+0x50>)
   9a5bc:	681b      	ldr	r3, [r3, #0]
   9a5be:	4a0c      	ldr	r2, [pc, #48]	; (9a5f0 <_read+0x54>)
   9a5c0:	6812      	ldr	r2, [r2, #0]
   9a5c2:	4610      	mov	r0, r2
   9a5c4:	68b9      	ldr	r1, [r7, #8]
   9a5c6:	4798      	blx	r3
		ptr++;
   9a5c8:	68bb      	ldr	r3, [r7, #8]
   9a5ca:	3301      	adds	r3, #1
   9a5cc:	60bb      	str	r3, [r7, #8]
		nChars++;
   9a5ce:	697b      	ldr	r3, [r7, #20]
   9a5d0:	3301      	adds	r3, #1
   9a5d2:	617b      	str	r3, [r7, #20]

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   9a5d4:	687b      	ldr	r3, [r7, #4]
   9a5d6:	3b01      	subs	r3, #1
   9a5d8:	607b      	str	r3, [r7, #4]
   9a5da:	687b      	ldr	r3, [r7, #4]
   9a5dc:	2b00      	cmp	r3, #0
   9a5de:	dcec      	bgt.n	9a5ba <_read+0x1e>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
   9a5e0:	697b      	ldr	r3, [r7, #20]
}
   9a5e2:	4618      	mov	r0, r3
   9a5e4:	3718      	adds	r7, #24
   9a5e6:	46bd      	mov	sp, r7
   9a5e8:	bd80      	pop	{r7, pc}
   9a5ea:	bf00      	nop
   9a5ec:	20072808 	.word	0x20072808
   9a5f0:	20072810 	.word	0x20072810

0009a5f4 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   9a5f4:	b580      	push	{r7, lr}
   9a5f6:	b086      	sub	sp, #24
   9a5f8:	af00      	add	r7, sp, #0
   9a5fa:	60f8      	str	r0, [r7, #12]
   9a5fc:	60b9      	str	r1, [r7, #8]
   9a5fe:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   9a600:	2300      	movs	r3, #0
   9a602:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
   9a604:	68fb      	ldr	r3, [r7, #12]
   9a606:	2b01      	cmp	r3, #1
   9a608:	d008      	beq.n	9a61c <_write+0x28>
   9a60a:	68fb      	ldr	r3, [r7, #12]
   9a60c:	2b02      	cmp	r3, #2
   9a60e:	d005      	beq.n	9a61c <_write+0x28>
   9a610:	68fb      	ldr	r3, [r7, #12]
   9a612:	2b03      	cmp	r3, #3
   9a614:	d002      	beq.n	9a61c <_write+0x28>
		return -1;
   9a616:	f04f 33ff 	mov.w	r3, #4294967295
   9a61a:	e01a      	b.n	9a652 <_write+0x5e>
	}

	for (; len != 0; --len) {
   9a61c:	e015      	b.n	9a64a <_write+0x56>
		if (ptr_put(stdio_base, *ptr++) < 0) {
   9a61e:	4b0f      	ldr	r3, [pc, #60]	; (9a65c <_write+0x68>)
   9a620:	681a      	ldr	r2, [r3, #0]
   9a622:	4b0f      	ldr	r3, [pc, #60]	; (9a660 <_write+0x6c>)
   9a624:	6818      	ldr	r0, [r3, #0]
   9a626:	68bb      	ldr	r3, [r7, #8]
   9a628:	1c59      	adds	r1, r3, #1
   9a62a:	60b9      	str	r1, [r7, #8]
   9a62c:	781b      	ldrb	r3, [r3, #0]
   9a62e:	4619      	mov	r1, r3
   9a630:	4790      	blx	r2
   9a632:	4603      	mov	r3, r0
   9a634:	2b00      	cmp	r3, #0
   9a636:	da02      	bge.n	9a63e <_write+0x4a>
			return -1;
   9a638:	f04f 33ff 	mov.w	r3, #4294967295
   9a63c:	e009      	b.n	9a652 <_write+0x5e>
		}
		++nChars;
   9a63e:	697b      	ldr	r3, [r7, #20]
   9a640:	3301      	adds	r3, #1
   9a642:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   9a644:	687b      	ldr	r3, [r7, #4]
   9a646:	3b01      	subs	r3, #1
   9a648:	607b      	str	r3, [r7, #4]
   9a64a:	687b      	ldr	r3, [r7, #4]
   9a64c:	2b00      	cmp	r3, #0
   9a64e:	d1e6      	bne.n	9a61e <_write+0x2a>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
   9a650:	697b      	ldr	r3, [r7, #20]
}
   9a652:	4618      	mov	r0, r3
   9a654:	3718      	adds	r7, #24
   9a656:	46bd      	mov	sp, r7
   9a658:	bd80      	pop	{r7, pc}
   9a65a:	bf00      	nop
   9a65c:	2007280c 	.word	0x2007280c
   9a660:	20072810 	.word	0x20072810

0009a664 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   9a664:	b580      	push	{r7, lr}
   9a666:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   9a668:	4b05      	ldr	r3, [pc, #20]	; (9a680 <board_init+0x1c>)
   9a66a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   9a66e:	605a      	str	r2, [r3, #4]
//hh	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
//hh	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   9a670:	4804      	ldr	r0, [pc, #16]	; (9a684 <board_init+0x20>)
   9a672:	f44f 7140 	mov.w	r1, #768	; 0x300
   9a676:	4a04      	ldr	r2, [pc, #16]	; (9a688 <board_init+0x24>)
   9a678:	4b04      	ldr	r3, [pc, #16]	; (9a68c <board_init+0x28>)
   9a67a:	4798      	blx	r3
	gpio_configure_pin(SPI0_MISO_GPIO, SPI0_MISO_FLAGS);
	gpio_configure_pin(SPI0_MOSI_GPIO, SPI0_MOSI_FLAGS);
	gpio_configure_pin(SPI0_SPCK_GPIO, SPI0_SPCK_FLAGS);
	gpio_configure_pin(SPI0_NPCS0_GPIO, SPI0_NPCS0_FLAGS);
#endif
}
   9a67c:	bd80      	pop	{r7, pc}
   9a67e:	bf00      	nop
   9a680:	400e1a50 	.word	0x400e1a50
   9a684:	400e0e00 	.word	0x400e0e00
   9a688:	08000001 	.word	0x08000001
   9a68c:	0009a9a9 	.word	0x0009a9a9

0009a690 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
   9a690:	b480      	push	{r7}
   9a692:	b085      	sub	sp, #20
   9a694:	af00      	add	r7, sp, #0
   9a696:	60f8      	str	r0, [r7, #12]
   9a698:	60b9      	str	r1, [r7, #8]
   9a69a:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   9a69c:	687b      	ldr	r3, [r7, #4]
   9a69e:	2b00      	cmp	r3, #0
   9a6a0:	d003      	beq.n	9a6aa <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
   9a6a2:	68fb      	ldr	r3, [r7, #12]
   9a6a4:	68ba      	ldr	r2, [r7, #8]
   9a6a6:	665a      	str	r2, [r3, #100]	; 0x64
   9a6a8:	e002      	b.n	9a6b0 <pio_pull_up+0x20>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   9a6aa:	68fb      	ldr	r3, [r7, #12]
   9a6ac:	68ba      	ldr	r2, [r7, #8]
   9a6ae:	661a      	str	r2, [r3, #96]	; 0x60
	}
}
   9a6b0:	3714      	adds	r7, #20
   9a6b2:	46bd      	mov	sp, r7
   9a6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
   9a6b8:	4770      	bx	lr
   9a6ba:	bf00      	nop

0009a6bc <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
   9a6bc:	b480      	push	{r7}
   9a6be:	b087      	sub	sp, #28
   9a6c0:	af00      	add	r7, sp, #0
   9a6c2:	60f8      	str	r0, [r7, #12]
   9a6c4:	60b9      	str	r1, [r7, #8]
   9a6c6:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   9a6c8:	68fb      	ldr	r3, [r7, #12]
   9a6ca:	687a      	ldr	r2, [r7, #4]
   9a6cc:	645a      	str	r2, [r3, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   9a6ce:	68bb      	ldr	r3, [r7, #8]
   9a6d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   9a6d4:	d01f      	beq.n	9a716 <pio_set_peripheral+0x5a>
   9a6d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   9a6da:	d805      	bhi.n	9a6e8 <pio_set_peripheral+0x2c>
   9a6dc:	2b00      	cmp	r3, #0
   9a6de:	d027      	beq.n	9a730 <pio_set_peripheral+0x74>
   9a6e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   9a6e4:	d00a      	beq.n	9a6fc <pio_set_peripheral+0x40>
   9a6e6:	e01f      	b.n	9a728 <pio_set_peripheral+0x6c>
   9a6e8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   9a6ec:	d020      	beq.n	9a730 <pio_set_peripheral+0x74>
   9a6ee:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   9a6f2:	d01d      	beq.n	9a730 <pio_set_peripheral+0x74>
   9a6f4:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   9a6f8:	d01a      	beq.n	9a730 <pio_set_peripheral+0x74>
   9a6fa:	e015      	b.n	9a728 <pio_set_peripheral+0x6c>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   9a6fc:	68fb      	ldr	r3, [r7, #12]
   9a6fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   9a700:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   9a702:	68fb      	ldr	r3, [r7, #12]
   9a704:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   9a706:	687b      	ldr	r3, [r7, #4]
   9a708:	43d9      	mvns	r1, r3
   9a70a:	697b      	ldr	r3, [r7, #20]
   9a70c:	400b      	ands	r3, r1
   9a70e:	401a      	ands	r2, r3
   9a710:	68fb      	ldr	r3, [r7, #12]
   9a712:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   9a714:	e008      	b.n	9a728 <pio_set_peripheral+0x6c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   9a716:	68fb      	ldr	r3, [r7, #12]
   9a718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   9a71a:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   9a71c:	687a      	ldr	r2, [r7, #4]
   9a71e:	697b      	ldr	r3, [r7, #20]
   9a720:	431a      	orrs	r2, r3
   9a722:	68fb      	ldr	r3, [r7, #12]
   9a724:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   9a726:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   9a728:	68fb      	ldr	r3, [r7, #12]
   9a72a:	687a      	ldr	r2, [r7, #4]
   9a72c:	605a      	str	r2, [r3, #4]
   9a72e:	e000      	b.n	9a732 <pio_set_peripheral+0x76>
		// other types are invalid in this function
	case PIO_INPUT:
	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
   9a730:	bf00      	nop
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
}
   9a732:	371c      	adds	r7, #28
   9a734:	46bd      	mov	sp, r7
   9a736:	f85d 7b04 	ldr.w	r7, [sp], #4
   9a73a:	4770      	bx	lr

0009a73c <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
   9a73c:	b580      	push	{r7, lr}
   9a73e:	b084      	sub	sp, #16
   9a740:	af00      	add	r7, sp, #0
   9a742:	60f8      	str	r0, [r7, #12]
   9a744:	60b9      	str	r1, [r7, #8]
   9a746:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
   9a748:	68f8      	ldr	r0, [r7, #12]
   9a74a:	68b9      	ldr	r1, [r7, #8]
   9a74c:	4b18      	ldr	r3, [pc, #96]	; (9a7b0 <pio_set_input+0x74>)
   9a74e:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
   9a750:	687b      	ldr	r3, [r7, #4]
   9a752:	f003 0301 	and.w	r3, r3, #1
   9a756:	68f8      	ldr	r0, [r7, #12]
   9a758:	68b9      	ldr	r1, [r7, #8]
   9a75a:	461a      	mov	r2, r3
   9a75c:	4b15      	ldr	r3, [pc, #84]	; (9a7b4 <pio_set_input+0x78>)
   9a75e:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   9a760:	687b      	ldr	r3, [r7, #4]
   9a762:	f003 030a 	and.w	r3, r3, #10
   9a766:	2b00      	cmp	r3, #0
   9a768:	d003      	beq.n	9a772 <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
   9a76a:	68fb      	ldr	r3, [r7, #12]
   9a76c:	68ba      	ldr	r2, [r7, #8]
   9a76e:	621a      	str	r2, [r3, #32]
   9a770:	e002      	b.n	9a778 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
   9a772:	68fb      	ldr	r3, [r7, #12]
   9a774:	68ba      	ldr	r2, [r7, #8]
   9a776:	625a      	str	r2, [r3, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   9a778:	687b      	ldr	r3, [r7, #4]
   9a77a:	f003 0302 	and.w	r3, r3, #2
   9a77e:	2b00      	cmp	r3, #0
   9a780:	d004      	beq.n	9a78c <pio_set_input+0x50>
		p_pio->PIO_SCIFSR = ul_mask;
   9a782:	68fb      	ldr	r3, [r7, #12]
   9a784:	68ba      	ldr	r2, [r7, #8]
   9a786:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   9a78a:	e008      	b.n	9a79e <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   9a78c:	687b      	ldr	r3, [r7, #4]
   9a78e:	f003 0308 	and.w	r3, r3, #8
   9a792:	2b00      	cmp	r3, #0
   9a794:	d003      	beq.n	9a79e <pio_set_input+0x62>
			p_pio->PIO_SCIFSR = ul_mask;
   9a796:	68fb      	ldr	r3, [r7, #12]
   9a798:	68ba      	ldr	r2, [r7, #8]
   9a79a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   9a79e:	68fb      	ldr	r3, [r7, #12]
   9a7a0:	68ba      	ldr	r2, [r7, #8]
   9a7a2:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
   9a7a4:	68fb      	ldr	r3, [r7, #12]
   9a7a6:	68ba      	ldr	r2, [r7, #8]
   9a7a8:	601a      	str	r2, [r3, #0]
}
   9a7aa:	3710      	adds	r7, #16
   9a7ac:	46bd      	mov	sp, r7
   9a7ae:	bd80      	pop	{r7, pc}
   9a7b0:	0009a81d 	.word	0x0009a81d
   9a7b4:	0009a691 	.word	0x0009a691

0009a7b8 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   9a7b8:	b580      	push	{r7, lr}
   9a7ba:	b084      	sub	sp, #16
   9a7bc:	af00      	add	r7, sp, #0
   9a7be:	60f8      	str	r0, [r7, #12]
   9a7c0:	60b9      	str	r1, [r7, #8]
   9a7c2:	607a      	str	r2, [r7, #4]
   9a7c4:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
   9a7c6:	68f8      	ldr	r0, [r7, #12]
   9a7c8:	68b9      	ldr	r1, [r7, #8]
   9a7ca:	4b12      	ldr	r3, [pc, #72]	; (9a814 <pio_set_output+0x5c>)
   9a7cc:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
   9a7ce:	68f8      	ldr	r0, [r7, #12]
   9a7d0:	68b9      	ldr	r1, [r7, #8]
   9a7d2:	69ba      	ldr	r2, [r7, #24]
   9a7d4:	4b10      	ldr	r3, [pc, #64]	; (9a818 <pio_set_output+0x60>)
   9a7d6:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   9a7d8:	683b      	ldr	r3, [r7, #0]
   9a7da:	2b00      	cmp	r3, #0
   9a7dc:	d003      	beq.n	9a7e6 <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
   9a7de:	68fb      	ldr	r3, [r7, #12]
   9a7e0:	68ba      	ldr	r2, [r7, #8]
   9a7e2:	651a      	str	r2, [r3, #80]	; 0x50
   9a7e4:	e002      	b.n	9a7ec <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   9a7e6:	68fb      	ldr	r3, [r7, #12]
   9a7e8:	68ba      	ldr	r2, [r7, #8]
   9a7ea:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   9a7ec:	687b      	ldr	r3, [r7, #4]
   9a7ee:	2b00      	cmp	r3, #0
   9a7f0:	d003      	beq.n	9a7fa <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
   9a7f2:	68fb      	ldr	r3, [r7, #12]
   9a7f4:	68ba      	ldr	r2, [r7, #8]
   9a7f6:	631a      	str	r2, [r3, #48]	; 0x30
   9a7f8:	e002      	b.n	9a800 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
   9a7fa:	68fb      	ldr	r3, [r7, #12]
   9a7fc:	68ba      	ldr	r2, [r7, #8]
   9a7fe:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   9a800:	68fb      	ldr	r3, [r7, #12]
   9a802:	68ba      	ldr	r2, [r7, #8]
   9a804:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
   9a806:	68fb      	ldr	r3, [r7, #12]
   9a808:	68ba      	ldr	r2, [r7, #8]
   9a80a:	601a      	str	r2, [r3, #0]
}
   9a80c:	3710      	adds	r7, #16
   9a80e:	46bd      	mov	sp, r7
   9a810:	bd80      	pop	{r7, pc}
   9a812:	bf00      	nop
   9a814:	0009a81d 	.word	0x0009a81d
   9a818:	0009a691 	.word	0x0009a691

0009a81c <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
   9a81c:	b480      	push	{r7}
   9a81e:	b083      	sub	sp, #12
   9a820:	af00      	add	r7, sp, #0
   9a822:	6078      	str	r0, [r7, #4]
   9a824:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
   9a826:	687b      	ldr	r3, [r7, #4]
   9a828:	683a      	ldr	r2, [r7, #0]
   9a82a:	645a      	str	r2, [r3, #68]	; 0x44
}
   9a82c:	370c      	adds	r7, #12
   9a82e:	46bd      	mov	sp, r7
   9a830:	f85d 7b04 	ldr.w	r7, [sp], #4
   9a834:	4770      	bx	lr
   9a836:	bf00      	nop

0009a838 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
   9a838:	b480      	push	{r7}
   9a83a:	b083      	sub	sp, #12
   9a83c:	af00      	add	r7, sp, #0
   9a83e:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
   9a840:	687b      	ldr	r3, [r7, #4]
   9a842:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
   9a844:	4618      	mov	r0, r3
   9a846:	370c      	adds	r7, #12
   9a848:	46bd      	mov	sp, r7
   9a84a:	f85d 7b04 	ldr.w	r7, [sp], #4
   9a84e:	4770      	bx	lr

0009a850 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
   9a850:	b480      	push	{r7}
   9a852:	b083      	sub	sp, #12
   9a854:	af00      	add	r7, sp, #0
   9a856:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
   9a858:	687b      	ldr	r3, [r7, #4]
   9a85a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
   9a85c:	4618      	mov	r0, r3
   9a85e:	370c      	adds	r7, #12
   9a860:	46bd      	mov	sp, r7
   9a862:	f85d 7b04 	ldr.w	r7, [sp], #4
   9a866:	4770      	bx	lr

0009a868 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   9a868:	b590      	push	{r4, r7, lr}
   9a86a:	b087      	sub	sp, #28
   9a86c:	af02      	add	r7, sp, #8
   9a86e:	6078      	str	r0, [r7, #4]
   9a870:	6039      	str	r1, [r7, #0]
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   9a872:	687b      	ldr	r3, [r7, #4]
   9a874:	095b      	lsrs	r3, r3, #5
   9a876:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   9a87a:	f203 7307 	addw	r3, r3, #1799	; 0x707
   9a87e:	025b      	lsls	r3, r3, #9
   9a880:	60fb      	str	r3, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   9a882:	683b      	ldr	r3, [r7, #0]
   9a884:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   9a888:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   9a88c:	d048      	beq.n	9a920 <pio_configure_pin+0xb8>
   9a88e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   9a892:	d806      	bhi.n	9a8a2 <pio_configure_pin+0x3a>
   9a894:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   9a898:	d00a      	beq.n	9a8b0 <pio_configure_pin+0x48>
   9a89a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   9a89e:	d023      	beq.n	9a8e8 <pio_configure_pin+0x80>
   9a8a0:	e072      	b.n	9a988 <pio_configure_pin+0x120>
   9a8a2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   9a8a6:	d047      	beq.n	9a938 <pio_configure_pin+0xd0>
   9a8a8:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   9a8ac:	d044      	beq.n	9a938 <pio_configure_pin+0xd0>
   9a8ae:	e06b      	b.n	9a988 <pio_configure_pin+0x120>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   9a8b0:	687b      	ldr	r3, [r7, #4]
   9a8b2:	f003 031f 	and.w	r3, r3, #31
   9a8b6:	2201      	movs	r2, #1
   9a8b8:	fa02 f303 	lsl.w	r3, r2, r3
   9a8bc:	68f8      	ldr	r0, [r7, #12]
   9a8be:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   9a8c2:	461a      	mov	r2, r3
   9a8c4:	4b34      	ldr	r3, [pc, #208]	; (9a998 <pio_configure_pin+0x130>)
   9a8c6:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   9a8c8:	687b      	ldr	r3, [r7, #4]
   9a8ca:	f003 031f 	and.w	r3, r3, #31
   9a8ce:	2201      	movs	r2, #1
   9a8d0:	fa02 f303 	lsl.w	r3, r2, r3
   9a8d4:	461a      	mov	r2, r3
   9a8d6:	683b      	ldr	r3, [r7, #0]
   9a8d8:	f003 0301 	and.w	r3, r3, #1
   9a8dc:	68f8      	ldr	r0, [r7, #12]
   9a8de:	4611      	mov	r1, r2
   9a8e0:	461a      	mov	r2, r3
   9a8e2:	4b2e      	ldr	r3, [pc, #184]	; (9a99c <pio_configure_pin+0x134>)
   9a8e4:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   9a8e6:	e051      	b.n	9a98c <pio_configure_pin+0x124>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   9a8e8:	687b      	ldr	r3, [r7, #4]
   9a8ea:	f003 031f 	and.w	r3, r3, #31
   9a8ee:	2201      	movs	r2, #1
   9a8f0:	fa02 f303 	lsl.w	r3, r2, r3
   9a8f4:	68f8      	ldr	r0, [r7, #12]
   9a8f6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   9a8fa:	461a      	mov	r2, r3
   9a8fc:	4b26      	ldr	r3, [pc, #152]	; (9a998 <pio_configure_pin+0x130>)
   9a8fe:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   9a900:	687b      	ldr	r3, [r7, #4]
   9a902:	f003 031f 	and.w	r3, r3, #31
   9a906:	2201      	movs	r2, #1
   9a908:	fa02 f303 	lsl.w	r3, r2, r3
   9a90c:	461a      	mov	r2, r3
   9a90e:	683b      	ldr	r3, [r7, #0]
   9a910:	f003 0301 	and.w	r3, r3, #1
   9a914:	68f8      	ldr	r0, [r7, #12]
   9a916:	4611      	mov	r1, r2
   9a918:	461a      	mov	r2, r3
   9a91a:	4b20      	ldr	r3, [pc, #128]	; (9a99c <pio_configure_pin+0x134>)
   9a91c:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   9a91e:	e035      	b.n	9a98c <pio_configure_pin+0x124>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   9a920:	687b      	ldr	r3, [r7, #4]
   9a922:	f003 031f 	and.w	r3, r3, #31
   9a926:	2201      	movs	r2, #1
   9a928:	fa02 f303 	lsl.w	r3, r2, r3
   9a92c:	68f8      	ldr	r0, [r7, #12]
   9a92e:	4619      	mov	r1, r3
   9a930:	683a      	ldr	r2, [r7, #0]
   9a932:	4b1b      	ldr	r3, [pc, #108]	; (9a9a0 <pio_configure_pin+0x138>)
   9a934:	4798      	blx	r3
		break;
   9a936:	e029      	b.n	9a98c <pio_configure_pin+0x124>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   9a938:	687b      	ldr	r3, [r7, #4]
   9a93a:	f003 031f 	and.w	r3, r3, #31
   9a93e:	2201      	movs	r2, #1
   9a940:	fa02 f303 	lsl.w	r3, r2, r3
   9a944:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   9a946:	683b      	ldr	r3, [r7, #0]
   9a948:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   9a94c:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   9a950:	bf0c      	ite	eq
   9a952:	2301      	moveq	r3, #1
   9a954:	2300      	movne	r3, #0
   9a956:	b2db      	uxtb	r3, r3
   9a958:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   9a95a:	683b      	ldr	r3, [r7, #0]
   9a95c:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   9a960:	2b00      	cmp	r3, #0
   9a962:	bf14      	ite	ne
   9a964:	2301      	movne	r3, #1
   9a966:	2300      	moveq	r3, #0
   9a968:	b2db      	uxtb	r3, r3
   9a96a:	461c      	mov	r4, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
   9a96c:	683b      	ldr	r3, [r7, #0]
   9a96e:	f003 0301 	and.w	r3, r3, #1
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   9a972:	2b00      	cmp	r3, #0
   9a974:	bf14      	ite	ne
   9a976:	2301      	movne	r3, #1
   9a978:	2300      	moveq	r3, #0
   9a97a:	b2db      	uxtb	r3, r3
   9a97c:	9300      	str	r3, [sp, #0]
   9a97e:	68f8      	ldr	r0, [r7, #12]
   9a980:	4623      	mov	r3, r4
   9a982:	4c08      	ldr	r4, [pc, #32]	; (9a9a4 <pio_configure_pin+0x13c>)
   9a984:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   9a986:	e001      	b.n	9a98c <pio_configure_pin+0x124>

	default:
		return 0;
   9a988:	2300      	movs	r3, #0
   9a98a:	e000      	b.n	9a98e <pio_configure_pin+0x126>
	}

	return 1;
   9a98c:	2301      	movs	r3, #1
}
   9a98e:	4618      	mov	r0, r3
   9a990:	3714      	adds	r7, #20
   9a992:	46bd      	mov	sp, r7
   9a994:	bd90      	pop	{r4, r7, pc}
   9a996:	bf00      	nop
   9a998:	0009a6bd 	.word	0x0009a6bd
   9a99c:	0009a691 	.word	0x0009a691
   9a9a0:	0009a73d 	.word	0x0009a73d
   9a9a4:	0009a7b9 	.word	0x0009a7b9

0009a9a8 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   9a9a8:	b590      	push	{r4, r7, lr}
   9a9aa:	b087      	sub	sp, #28
   9a9ac:	af02      	add	r7, sp, #8
   9a9ae:	60f8      	str	r0, [r7, #12]
   9a9b0:	60b9      	str	r1, [r7, #8]
   9a9b2:	607a      	str	r2, [r7, #4]
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   9a9b4:	687b      	ldr	r3, [r7, #4]
   9a9b6:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   9a9ba:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   9a9be:	d026      	beq.n	9aa0e <pio_configure_pin_group+0x66>
   9a9c0:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   9a9c4:	d806      	bhi.n	9a9d4 <pio_configure_pin_group+0x2c>
   9a9c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   9a9ca:	d00a      	beq.n	9a9e2 <pio_configure_pin_group+0x3a>
   9a9cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   9a9d0:	d00e      	beq.n	9a9f0 <pio_configure_pin_group+0x48>
   9a9d2:	e044      	b.n	9aa5e <pio_configure_pin_group+0xb6>
   9a9d4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   9a9d8:	d01f      	beq.n	9aa1a <pio_configure_pin_group+0x72>
   9a9da:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   9a9de:	d01c      	beq.n	9aa1a <pio_configure_pin_group+0x72>
   9a9e0:	e03d      	b.n	9aa5e <pio_configure_pin_group+0xb6>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   9a9e2:	68f8      	ldr	r0, [r7, #12]
   9a9e4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   9a9e8:	68ba      	ldr	r2, [r7, #8]
   9a9ea:	4b20      	ldr	r3, [pc, #128]	; (9aa6c <pio_configure_pin_group+0xc4>)
   9a9ec:	4798      	blx	r3
		//pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
   9a9ee:	e038      	b.n	9aa62 <pio_configure_pin_group+0xba>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   9a9f0:	68f8      	ldr	r0, [r7, #12]
   9a9f2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   9a9f6:	68ba      	ldr	r2, [r7, #8]
   9a9f8:	4b1c      	ldr	r3, [pc, #112]	; (9aa6c <pio_configure_pin_group+0xc4>)
   9a9fa:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   9a9fc:	687b      	ldr	r3, [r7, #4]
   9a9fe:	f003 0301 	and.w	r3, r3, #1
   9aa02:	68f8      	ldr	r0, [r7, #12]
   9aa04:	68b9      	ldr	r1, [r7, #8]
   9aa06:	461a      	mov	r2, r3
   9aa08:	4b19      	ldr	r3, [pc, #100]	; (9aa70 <pio_configure_pin_group+0xc8>)
   9aa0a:	4798      	blx	r3
		break;
   9aa0c:	e029      	b.n	9aa62 <pio_configure_pin_group+0xba>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   9aa0e:	68f8      	ldr	r0, [r7, #12]
   9aa10:	68b9      	ldr	r1, [r7, #8]
   9aa12:	687a      	ldr	r2, [r7, #4]
   9aa14:	4b17      	ldr	r3, [pc, #92]	; (9aa74 <pio_configure_pin_group+0xcc>)
   9aa16:	4798      	blx	r3
		break;
   9aa18:	e023      	b.n	9aa62 <pio_configure_pin_group+0xba>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   9aa1a:	687b      	ldr	r3, [r7, #4]
   9aa1c:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   9aa20:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   9aa24:	bf0c      	ite	eq
   9aa26:	2301      	moveq	r3, #1
   9aa28:	2300      	movne	r3, #0
   9aa2a:	b2db      	uxtb	r3, r3
   9aa2c:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   9aa2e:	687b      	ldr	r3, [r7, #4]
   9aa30:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   9aa34:	2b00      	cmp	r3, #0
   9aa36:	bf14      	ite	ne
   9aa38:	2301      	movne	r3, #1
   9aa3a:	2300      	moveq	r3, #0
   9aa3c:	b2db      	uxtb	r3, r3
   9aa3e:	461c      	mov	r4, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
   9aa40:	687b      	ldr	r3, [r7, #4]
   9aa42:	f003 0301 	and.w	r3, r3, #1
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   9aa46:	2b00      	cmp	r3, #0
   9aa48:	bf14      	ite	ne
   9aa4a:	2301      	movne	r3, #1
   9aa4c:	2300      	moveq	r3, #0
   9aa4e:	b2db      	uxtb	r3, r3
   9aa50:	9300      	str	r3, [sp, #0]
   9aa52:	68f8      	ldr	r0, [r7, #12]
   9aa54:	68b9      	ldr	r1, [r7, #8]
   9aa56:	4623      	mov	r3, r4
   9aa58:	4c07      	ldr	r4, [pc, #28]	; (9aa78 <pio_configure_pin_group+0xd0>)
   9aa5a:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   9aa5c:	e001      	b.n	9aa62 <pio_configure_pin_group+0xba>

	default:
		return 0;
   9aa5e:	2300      	movs	r3, #0
   9aa60:	e000      	b.n	9aa64 <pio_configure_pin_group+0xbc>
	}

	return 1;
   9aa62:	2301      	movs	r3, #1
}
   9aa64:	4618      	mov	r0, r3
   9aa66:	3714      	adds	r7, #20
   9aa68:	46bd      	mov	sp, r7
   9aa6a:	bd90      	pop	{r4, r7, pc}
   9aa6c:	0009a6bd 	.word	0x0009a6bd
   9aa70:	0009a691 	.word	0x0009a691
   9aa74:	0009a73d 	.word	0x0009a73d
   9aa78:	0009a7b9 	.word	0x0009a7b9

0009aa7c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   9aa7c:	b580      	push	{r7, lr}
   9aa7e:	b084      	sub	sp, #16
   9aa80:	af00      	add	r7, sp, #0
   9aa82:	6078      	str	r0, [r7, #4]
   9aa84:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   9aa86:	6878      	ldr	r0, [r7, #4]
   9aa88:	4b22      	ldr	r3, [pc, #136]	; (9ab14 <pio_handler_process+0x98>)
   9aa8a:	4798      	blx	r3
   9aa8c:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
   9aa8e:	6878      	ldr	r0, [r7, #4]
   9aa90:	4b21      	ldr	r3, [pc, #132]	; (9ab18 <pio_handler_process+0x9c>)
   9aa92:	4798      	blx	r3
   9aa94:	4602      	mov	r2, r0
   9aa96:	68fb      	ldr	r3, [r7, #12]
   9aa98:	4013      	ands	r3, r2
   9aa9a:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
   9aa9c:	68fb      	ldr	r3, [r7, #12]
   9aa9e:	2b00      	cmp	r3, #0
   9aaa0:	d034      	beq.n	9ab0c <pio_handler_process+0x90>
		/* Find triggering source */
		i = 0;
   9aaa2:	2300      	movs	r3, #0
   9aaa4:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
   9aaa6:	e02e      	b.n	9ab06 <pio_handler_process+0x8a>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   9aaa8:	4a1c      	ldr	r2, [pc, #112]	; (9ab1c <pio_handler_process+0xa0>)
   9aaaa:	68bb      	ldr	r3, [r7, #8]
   9aaac:	011b      	lsls	r3, r3, #4
   9aaae:	4413      	add	r3, r2
   9aab0:	681a      	ldr	r2, [r3, #0]
   9aab2:	683b      	ldr	r3, [r7, #0]
   9aab4:	429a      	cmp	r2, r3
   9aab6:	d123      	bne.n	9ab00 <pio_handler_process+0x84>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   9aab8:	4a18      	ldr	r2, [pc, #96]	; (9ab1c <pio_handler_process+0xa0>)
   9aaba:	68bb      	ldr	r3, [r7, #8]
   9aabc:	011b      	lsls	r3, r3, #4
   9aabe:	4413      	add	r3, r2
   9aac0:	685a      	ldr	r2, [r3, #4]
   9aac2:	68fb      	ldr	r3, [r7, #12]
   9aac4:	4013      	ands	r3, r2
   9aac6:	2b00      	cmp	r3, #0
   9aac8:	d01a      	beq.n	9ab00 <pio_handler_process+0x84>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   9aaca:	4a14      	ldr	r2, [pc, #80]	; (9ab1c <pio_handler_process+0xa0>)
   9aacc:	68bb      	ldr	r3, [r7, #8]
   9aace:	011b      	lsls	r3, r3, #4
   9aad0:	4413      	add	r3, r2
   9aad2:	3308      	adds	r3, #8
   9aad4:	685b      	ldr	r3, [r3, #4]
   9aad6:	4911      	ldr	r1, [pc, #68]	; (9ab1c <pio_handler_process+0xa0>)
   9aad8:	68ba      	ldr	r2, [r7, #8]
   9aada:	0112      	lsls	r2, r2, #4
   9aadc:	440a      	add	r2, r1
   9aade:	6810      	ldr	r0, [r2, #0]
   9aae0:	490e      	ldr	r1, [pc, #56]	; (9ab1c <pio_handler_process+0xa0>)
   9aae2:	68ba      	ldr	r2, [r7, #8]
   9aae4:	0112      	lsls	r2, r2, #4
   9aae6:	440a      	add	r2, r1
   9aae8:	6852      	ldr	r2, [r2, #4]
   9aaea:	4611      	mov	r1, r2
   9aaec:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   9aaee:	4a0b      	ldr	r2, [pc, #44]	; (9ab1c <pio_handler_process+0xa0>)
   9aaf0:	68bb      	ldr	r3, [r7, #8]
   9aaf2:	011b      	lsls	r3, r3, #4
   9aaf4:	4413      	add	r3, r2
   9aaf6:	685b      	ldr	r3, [r3, #4]
   9aaf8:	43db      	mvns	r3, r3
   9aafa:	68fa      	ldr	r2, [r7, #12]
   9aafc:	4013      	ands	r3, r2
   9aafe:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
   9ab00:	68bb      	ldr	r3, [r7, #8]
   9ab02:	3301      	adds	r3, #1
   9ab04:	60bb      	str	r3, [r7, #8]

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   9ab06:	68fb      	ldr	r3, [r7, #12]
   9ab08:	2b00      	cmp	r3, #0
   9ab0a:	d1cd      	bne.n	9aaa8 <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
   9ab0c:	3710      	adds	r7, #16
   9ab0e:	46bd      	mov	sp, r7
   9ab10:	bd80      	pop	{r7, pc}
   9ab12:	bf00      	nop
   9ab14:	0009a839 	.word	0x0009a839
   9ab18:	0009a851 	.word	0x0009a851
   9ab1c:	20071b60 	.word	0x20071b60

0009ab20 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   9ab20:	b580      	push	{r7, lr}
   9ab22:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
   9ab24:	4802      	ldr	r0, [pc, #8]	; (9ab30 <PIOA_Handler+0x10>)
   9ab26:	210b      	movs	r1, #11
   9ab28:	4b02      	ldr	r3, [pc, #8]	; (9ab34 <PIOA_Handler+0x14>)
   9ab2a:	4798      	blx	r3
}
   9ab2c:	bd80      	pop	{r7, pc}
   9ab2e:	bf00      	nop
   9ab30:	400e0e00 	.word	0x400e0e00
   9ab34:	0009aa7d 	.word	0x0009aa7d

0009ab38 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   9ab38:	b580      	push	{r7, lr}
   9ab3a:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
   9ab3c:	4802      	ldr	r0, [pc, #8]	; (9ab48 <PIOB_Handler+0x10>)
   9ab3e:	210c      	movs	r1, #12
   9ab40:	4b02      	ldr	r3, [pc, #8]	; (9ab4c <PIOB_Handler+0x14>)
   9ab42:	4798      	blx	r3
}
   9ab44:	bd80      	pop	{r7, pc}
   9ab46:	bf00      	nop
   9ab48:	400e1000 	.word	0x400e1000
   9ab4c:	0009aa7d 	.word	0x0009aa7d

0009ab50 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   9ab50:	b580      	push	{r7, lr}
   9ab52:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
   9ab54:	4802      	ldr	r0, [pc, #8]	; (9ab60 <PIOC_Handler+0x10>)
   9ab56:	210d      	movs	r1, #13
   9ab58:	4b02      	ldr	r3, [pc, #8]	; (9ab64 <PIOC_Handler+0x14>)
   9ab5a:	4798      	blx	r3
}
   9ab5c:	bd80      	pop	{r7, pc}
   9ab5e:	bf00      	nop
   9ab60:	400e1200 	.word	0x400e1200
   9ab64:	0009aa7d 	.word	0x0009aa7d

0009ab68 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   9ab68:	b580      	push	{r7, lr}
   9ab6a:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
   9ab6c:	4802      	ldr	r0, [pc, #8]	; (9ab78 <PIOD_Handler+0x10>)
   9ab6e:	210e      	movs	r1, #14
   9ab70:	4b02      	ldr	r3, [pc, #8]	; (9ab7c <PIOD_Handler+0x14>)
   9ab72:	4798      	blx	r3
}
   9ab74:	bd80      	pop	{r7, pc}
   9ab76:	bf00      	nop
   9ab78:	400e1400 	.word	0x400e1400
   9ab7c:	0009aa7d 	.word	0x0009aa7d

0009ab80 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
   9ab80:	b480      	push	{r7}
   9ab82:	b085      	sub	sp, #20
   9ab84:	af00      	add	r7, sp, #0
   9ab86:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   9ab88:	491d      	ldr	r1, [pc, #116]	; (9ac00 <pmc_switch_mck_to_pllack+0x80>)
   9ab8a:	4b1d      	ldr	r3, [pc, #116]	; (9ac00 <pmc_switch_mck_to_pllack+0x80>)
   9ab8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   9ab8e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
   9ab92:	687b      	ldr	r3, [r7, #4]
   9ab94:	4313      	orrs	r3, r2
   9ab96:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   9ab98:	f44f 6300 	mov.w	r3, #2048	; 0x800
   9ab9c:	60fb      	str	r3, [r7, #12]
   9ab9e:	e007      	b.n	9abb0 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
   9aba0:	68fb      	ldr	r3, [r7, #12]
   9aba2:	2b00      	cmp	r3, #0
   9aba4:	d101      	bne.n	9abaa <pmc_switch_mck_to_pllack+0x2a>
			return 1;
   9aba6:	2301      	movs	r3, #1
   9aba8:	e023      	b.n	9abf2 <pmc_switch_mck_to_pllack+0x72>
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
   9abaa:	68fb      	ldr	r3, [r7, #12]
   9abac:	3b01      	subs	r3, #1
   9abae:	60fb      	str	r3, [r7, #12]
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   9abb0:	4b13      	ldr	r3, [pc, #76]	; (9ac00 <pmc_switch_mck_to_pllack+0x80>)
   9abb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   9abb4:	f003 0308 	and.w	r3, r3, #8
   9abb8:	2b00      	cmp	r3, #0
   9abba:	d0f1      	beq.n	9aba0 <pmc_switch_mck_to_pllack+0x20>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   9abbc:	4a10      	ldr	r2, [pc, #64]	; (9ac00 <pmc_switch_mck_to_pllack+0x80>)
   9abbe:	4b10      	ldr	r3, [pc, #64]	; (9ac00 <pmc_switch_mck_to_pllack+0x80>)
   9abc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   9abc2:	f023 0303 	bic.w	r3, r3, #3
   9abc6:	f043 0302 	orr.w	r3, r3, #2
   9abca:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   9abcc:	f44f 6300 	mov.w	r3, #2048	; 0x800
   9abd0:	60fb      	str	r3, [r7, #12]
   9abd2:	e007      	b.n	9abe4 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
   9abd4:	68fb      	ldr	r3, [r7, #12]
   9abd6:	2b00      	cmp	r3, #0
   9abd8:	d101      	bne.n	9abde <pmc_switch_mck_to_pllack+0x5e>
			return 1;
   9abda:	2301      	movs	r3, #1
   9abdc:	e009      	b.n	9abf2 <pmc_switch_mck_to_pllack+0x72>

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
   9abde:	68fb      	ldr	r3, [r7, #12]
   9abe0:	3b01      	subs	r3, #1
   9abe2:	60fb      	str	r3, [r7, #12]
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   9abe4:	4b06      	ldr	r3, [pc, #24]	; (9ac00 <pmc_switch_mck_to_pllack+0x80>)
   9abe6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   9abe8:	f003 0308 	and.w	r3, r3, #8
   9abec:	2b00      	cmp	r3, #0
   9abee:	d0f1      	beq.n	9abd4 <pmc_switch_mck_to_pllack+0x54>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   9abf0:	2300      	movs	r3, #0
}
   9abf2:	4618      	mov	r0, r3
   9abf4:	3714      	adds	r7, #20
   9abf6:	46bd      	mov	sp, r7
   9abf8:	f85d 7b04 	ldr.w	r7, [sp], #4
   9abfc:	4770      	bx	lr
   9abfe:	bf00      	nop
   9ac00:	400e0600 	.word	0x400e0600

0009ac04 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
   9ac04:	b480      	push	{r7}
   9ac06:	b083      	sub	sp, #12
   9ac08:	af00      	add	r7, sp, #0
   9ac0a:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
   9ac0c:	687b      	ldr	r3, [r7, #4]
   9ac0e:	2b01      	cmp	r3, #1
   9ac10:	d107      	bne.n	9ac22 <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY(SUPC_KEY_VALUE) |
   9ac12:	4a08      	ldr	r2, [pc, #32]	; (9ac34 <pmc_switch_sclk_to_32kxtal+0x30>)
   9ac14:	4b07      	ldr	r3, [pc, #28]	; (9ac34 <pmc_switch_sclk_to_32kxtal+0x30>)
   9ac16:	689b      	ldr	r3, [r3, #8]
   9ac18:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   9ac1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   9ac20:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY(SUPC_KEY_VALUE) | SUPC_CR_XTALSEL;
   9ac22:	4b04      	ldr	r3, [pc, #16]	; (9ac34 <pmc_switch_sclk_to_32kxtal+0x30>)
   9ac24:	4a04      	ldr	r2, [pc, #16]	; (9ac38 <pmc_switch_sclk_to_32kxtal+0x34>)
   9ac26:	601a      	str	r2, [r3, #0]
}
   9ac28:	370c      	adds	r7, #12
   9ac2a:	46bd      	mov	sp, r7
   9ac2c:	f85d 7b04 	ldr.w	r7, [sp], #4
   9ac30:	4770      	bx	lr
   9ac32:	bf00      	nop
   9ac34:	400e1a10 	.word	0x400e1a10
   9ac38:	a5000008 	.word	0xa5000008

0009ac3c <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
   9ac3c:	b480      	push	{r7}
   9ac3e:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
   9ac40:	4b09      	ldr	r3, [pc, #36]	; (9ac68 <pmc_osc_is_ready_32kxtal+0x2c>)
   9ac42:	695b      	ldr	r3, [r3, #20]
   9ac44:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
   9ac48:	2b00      	cmp	r3, #0
   9ac4a:	d007      	beq.n	9ac5c <pmc_osc_is_ready_32kxtal+0x20>
   9ac4c:	4b07      	ldr	r3, [pc, #28]	; (9ac6c <pmc_osc_is_ready_32kxtal+0x30>)
   9ac4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   9ac50:	f003 0380 	and.w	r3, r3, #128	; 0x80
   9ac54:	2b00      	cmp	r3, #0
   9ac56:	d001      	beq.n	9ac5c <pmc_osc_is_ready_32kxtal+0x20>
   9ac58:	2301      	movs	r3, #1
   9ac5a:	e000      	b.n	9ac5e <pmc_osc_is_ready_32kxtal+0x22>
   9ac5c:	2300      	movs	r3, #0
}
   9ac5e:	4618      	mov	r0, r3
   9ac60:	46bd      	mov	sp, r7
   9ac62:	f85d 7b04 	ldr.w	r7, [sp], #4
   9ac66:	4770      	bx	lr
   9ac68:	400e1a10 	.word	0x400e1a10
   9ac6c:	400e0600 	.word	0x400e0600

0009ac70 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
   9ac70:	b480      	push	{r7}
   9ac72:	b085      	sub	sp, #20
   9ac74:	af00      	add	r7, sp, #0
   9ac76:	6078      	str	r0, [r7, #4]
	uint32_t ul_needXTEN = 0;
   9ac78:	2300      	movs	r3, #0
   9ac7a:	60fb      	str	r3, [r7, #12]

	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	if (PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN) {
   9ac7c:	4b21      	ldr	r3, [pc, #132]	; (9ad04 <pmc_switch_mainck_to_fastrc+0x94>)
   9ac7e:	6a1b      	ldr	r3, [r3, #32]
   9ac80:	f003 0301 	and.w	r3, r3, #1
   9ac84:	2b00      	cmp	r3, #0
   9ac86:	d00e      	beq.n	9aca6 <pmc_switch_mainck_to_fastrc+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   9ac88:	491e      	ldr	r1, [pc, #120]	; (9ad04 <pmc_switch_mainck_to_fastrc+0x94>)
   9ac8a:	4b1e      	ldr	r3, [pc, #120]	; (9ad04 <pmc_switch_mainck_to_fastrc+0x94>)
   9ac8c:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
   9ac8e:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   9ac92:	f023 0378 	bic.w	r3, r3, #120	; 0x78
   9ac96:	687a      	ldr	r2, [r7, #4]
   9ac98:	4313      	orrs	r3, r2
   9ac9a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   9ac9e:	f043 0308 	orr.w	r3, r3, #8
{
	uint32_t ul_needXTEN = 0;

	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	if (PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   9aca2:	620b      	str	r3, [r1, #32]
   9aca4:	e00b      	b.n	9acbe <pmc_switch_mainck_to_fastrc+0x4e>
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				ul_moscrcf;
	} else {
		ul_needXTEN = 1;
   9aca6:	2301      	movs	r3, #1
   9aca8:	60fb      	str	r3, [r7, #12]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   9acaa:	4916      	ldr	r1, [pc, #88]	; (9ad04 <pmc_switch_mainck_to_fastrc+0x94>)
   9acac:	4b15      	ldr	r3, [pc, #84]	; (9ad04 <pmc_switch_mainck_to_fastrc+0x94>)
   9acae:	6a1a      	ldr	r2, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST_Msk |
   9acb0:	4b15      	ldr	r3, [pc, #84]	; (9ad08 <pmc_switch_mainck_to_fastrc+0x98>)
   9acb2:	4013      	ands	r3, r2
   9acb4:	687a      	ldr	r2, [r7, #4]
   9acb6:	431a      	orrs	r2, r3
   9acb8:	4b14      	ldr	r3, [pc, #80]	; (9ad0c <pmc_switch_mainck_to_fastrc+0x9c>)
   9acba:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				ul_moscrcf;
	} else {
		ul_needXTEN = 1;
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   9acbc:	620b      	str	r3, [r1, #32]
				CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST_Msk |
				ul_moscrcf;
	}

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   9acbe:	bf00      	nop
   9acc0:	4b10      	ldr	r3, [pc, #64]	; (9ad04 <pmc_switch_mainck_to_fastrc+0x94>)
   9acc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   9acc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   9acc8:	2b00      	cmp	r3, #0
   9acca:	d0f9      	beq.n	9acc0 <pmc_switch_mainck_to_fastrc+0x50>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
   9accc:	4a0d      	ldr	r2, [pc, #52]	; (9ad04 <pmc_switch_mainck_to_fastrc+0x94>)
   9acce:	4b0d      	ldr	r3, [pc, #52]	; (9ad04 <pmc_switch_mainck_to_fastrc+0x94>)
   9acd0:	6a1b      	ldr	r3, [r3, #32]
   9acd2:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
   9acd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   9acda:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   9acde:	6213      	str	r3, [r2, #32]
			PMC_CKGR_MOR_KEY_VALUE;

	/* Disable xtal oscillator */
	if (ul_needXTEN) {
   9ace0:	68fb      	ldr	r3, [r7, #12]
   9ace2:	2b00      	cmp	r3, #0
   9ace4:	d009      	beq.n	9acfa <pmc_switch_mainck_to_fastrc+0x8a>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   9ace6:	4a07      	ldr	r2, [pc, #28]	; (9ad04 <pmc_switch_mainck_to_fastrc+0x94>)
   9ace8:	4b06      	ldr	r3, [pc, #24]	; (9ad04 <pmc_switch_mainck_to_fastrc+0x94>)
   9acea:	6a1b      	ldr	r3, [r3, #32]
   9acec:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   9acf0:	f023 0301 	bic.w	r3, r3, #1
   9acf4:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   9acf8:	6213      	str	r3, [r2, #32]
				PMC_CKGR_MOR_KEY_VALUE;
	}
}
   9acfa:	3714      	adds	r7, #20
   9acfc:	46bd      	mov	sp, r7
   9acfe:	f85d 7b04 	ldr.w	r7, [sp], #4
   9ad02:	4770      	bx	lr
   9ad04:	400e0600 	.word	0x400e0600
   9ad08:	ffc80086 	.word	0xffc80086
   9ad0c:	0037ff09 	.word	0x0037ff09

0009ad10 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
   9ad10:	b480      	push	{r7}
   9ad12:	b083      	sub	sp, #12
   9ad14:	af00      	add	r7, sp, #0
   9ad16:	6078      	str	r0, [r7, #4]
   9ad18:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   9ad1a:	687b      	ldr	r3, [r7, #4]
   9ad1c:	2b00      	cmp	r3, #0
   9ad1e:	d008      	beq.n	9ad32 <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   9ad20:	4916      	ldr	r1, [pc, #88]	; (9ad7c <pmc_switch_mainck_to_xtal+0x6c>)
   9ad22:	4b16      	ldr	r3, [pc, #88]	; (9ad7c <pmc_switch_mainck_to_xtal+0x6c>)
   9ad24:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
   9ad26:	4a16      	ldr	r2, [pc, #88]	; (9ad80 <pmc_switch_mainck_to_xtal+0x70>)
   9ad28:	401a      	ands	r2, r3
   9ad2a:	4b16      	ldr	r3, [pc, #88]	; (9ad84 <pmc_switch_mainck_to_xtal+0x74>)
   9ad2c:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   9ad2e:	620b      	str	r3, [r1, #32]
   9ad30:	e01e      	b.n	9ad70 <pmc_switch_mainck_to_xtal+0x60>
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   9ad32:	4912      	ldr	r1, [pc, #72]	; (9ad7c <pmc_switch_mainck_to_xtal+0x6c>)
   9ad34:	4b11      	ldr	r3, [pc, #68]	; (9ad7c <pmc_switch_mainck_to_xtal+0x6c>)
   9ad36:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   9ad38:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   9ad3c:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   9ad40:	683a      	ldr	r2, [r7, #0]
   9ad42:	0212      	lsls	r2, r2, #8
   9ad44:	b292      	uxth	r2, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   9ad46:	4313      	orrs	r3, r2
   9ad48:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   9ad4c:	f043 0301 	orr.w	r3, r3, #1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   9ad50:	620b      	str	r3, [r1, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   9ad52:	bf00      	nop
   9ad54:	4b09      	ldr	r3, [pc, #36]	; (9ad7c <pmc_switch_mainck_to_xtal+0x6c>)
   9ad56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   9ad58:	f003 0301 	and.w	r3, r3, #1
   9ad5c:	2b00      	cmp	r3, #0
   9ad5e:	d0f9      	beq.n	9ad54 <pmc_switch_mainck_to_xtal+0x44>

		PMC->CKGR_MOR |= PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCSEL;
   9ad60:	4a06      	ldr	r2, [pc, #24]	; (9ad7c <pmc_switch_mainck_to_xtal+0x6c>)
   9ad62:	4b06      	ldr	r3, [pc, #24]	; (9ad7c <pmc_switch_mainck_to_xtal+0x6c>)
   9ad64:	6a1b      	ldr	r3, [r3, #32]
   9ad66:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   9ad6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   9ad6e:	6213      	str	r3, [r2, #32]
	}
}
   9ad70:	370c      	adds	r7, #12
   9ad72:	46bd      	mov	sp, r7
   9ad74:	f85d 7b04 	ldr.w	r7, [sp], #4
   9ad78:	4770      	bx	lr
   9ad7a:	bf00      	nop
   9ad7c:	400e0600 	.word	0x400e0600
   9ad80:	fec8fffc 	.word	0xfec8fffc
   9ad84:	01370002 	.word	0x01370002

0009ad88 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
   9ad88:	b480      	push	{r7}
   9ad8a:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   9ad8c:	4b04      	ldr	r3, [pc, #16]	; (9ada0 <pmc_osc_is_ready_mainck+0x18>)
   9ad8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   9ad90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
   9ad94:	4618      	mov	r0, r3
   9ad96:	46bd      	mov	sp, r7
   9ad98:	f85d 7b04 	ldr.w	r7, [sp], #4
   9ad9c:	4770      	bx	lr
   9ad9e:	bf00      	nop
   9ada0:	400e0600 	.word	0x400e0600

0009ada4 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
   9ada4:	b480      	push	{r7}
   9ada6:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   9ada8:	4b03      	ldr	r3, [pc, #12]	; (9adb8 <pmc_disable_pllack+0x14>)
   9adaa:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   9adae:	629a      	str	r2, [r3, #40]	; 0x28
}
   9adb0:	46bd      	mov	sp, r7
   9adb2:	f85d 7b04 	ldr.w	r7, [sp], #4
   9adb6:	4770      	bx	lr
   9adb8:	400e0600 	.word	0x400e0600

0009adbc <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
   9adbc:	b480      	push	{r7}
   9adbe:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   9adc0:	4b04      	ldr	r3, [pc, #16]	; (9add4 <pmc_is_locked_pllack+0x18>)
   9adc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   9adc4:	f003 0302 	and.w	r3, r3, #2
}
   9adc8:	4618      	mov	r0, r3
   9adca:	46bd      	mov	sp, r7
   9adcc:	f85d 7b04 	ldr.w	r7, [sp], #4
   9add0:	4770      	bx	lr
   9add2:	bf00      	nop
   9add4:	400e0600 	.word	0x400e0600

0009add8 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
   9add8:	b480      	push	{r7}
   9adda:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   9addc:	4b04      	ldr	r3, [pc, #16]	; (9adf0 <pmc_is_locked_upll+0x18>)
   9adde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   9ade0:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
   9ade4:	4618      	mov	r0, r3
   9ade6:	46bd      	mov	sp, r7
   9ade8:	f85d 7b04 	ldr.w	r7, [sp], #4
   9adec:	4770      	bx	lr
   9adee:	bf00      	nop
   9adf0:	400e0600 	.word	0x400e0600

0009adf4 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
   9adf4:	b480      	push	{r7}
   9adf6:	b083      	sub	sp, #12
   9adf8:	af00      	add	r7, sp, #0
   9adfa:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
   9adfc:	687b      	ldr	r3, [r7, #4]
   9adfe:	2b2c      	cmp	r3, #44	; 0x2c
   9ae00:	d901      	bls.n	9ae06 <pmc_enable_periph_clk+0x12>
		return 1;
   9ae02:	2301      	movs	r3, #1
   9ae04:	e02f      	b.n	9ae66 <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
   9ae06:	687b      	ldr	r3, [r7, #4]
   9ae08:	2b1f      	cmp	r3, #31
   9ae0a:	d813      	bhi.n	9ae34 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   9ae0c:	4b19      	ldr	r3, [pc, #100]	; (9ae74 <pmc_enable_periph_clk+0x80>)
   9ae0e:	699a      	ldr	r2, [r3, #24]
   9ae10:	687b      	ldr	r3, [r7, #4]
   9ae12:	2101      	movs	r1, #1
   9ae14:	fa01 f303 	lsl.w	r3, r1, r3
   9ae18:	401a      	ands	r2, r3
   9ae1a:	687b      	ldr	r3, [r7, #4]
   9ae1c:	2101      	movs	r1, #1
   9ae1e:	fa01 f303 	lsl.w	r3, r1, r3
   9ae22:	429a      	cmp	r2, r3
   9ae24:	d01e      	beq.n	9ae64 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
   9ae26:	4a13      	ldr	r2, [pc, #76]	; (9ae74 <pmc_enable_periph_clk+0x80>)
   9ae28:	687b      	ldr	r3, [r7, #4]
   9ae2a:	2101      	movs	r1, #1
   9ae2c:	fa01 f303 	lsl.w	r3, r1, r3
   9ae30:	6113      	str	r3, [r2, #16]
   9ae32:	e017      	b.n	9ae64 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E)
	} else {
		ul_id -= 32;
   9ae34:	687b      	ldr	r3, [r7, #4]
   9ae36:	3b20      	subs	r3, #32
   9ae38:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   9ae3a:	4b0e      	ldr	r3, [pc, #56]	; (9ae74 <pmc_enable_periph_clk+0x80>)
   9ae3c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   9ae40:	687b      	ldr	r3, [r7, #4]
   9ae42:	2101      	movs	r1, #1
   9ae44:	fa01 f303 	lsl.w	r3, r1, r3
   9ae48:	401a      	ands	r2, r3
   9ae4a:	687b      	ldr	r3, [r7, #4]
   9ae4c:	2101      	movs	r1, #1
   9ae4e:	fa01 f303 	lsl.w	r3, r1, r3
   9ae52:	429a      	cmp	r2, r3
   9ae54:	d006      	beq.n	9ae64 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
   9ae56:	4a07      	ldr	r2, [pc, #28]	; (9ae74 <pmc_enable_periph_clk+0x80>)
   9ae58:	687b      	ldr	r3, [r7, #4]
   9ae5a:	2101      	movs	r1, #1
   9ae5c:	fa01 f303 	lsl.w	r3, r1, r3
   9ae60:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
   9ae64:	2300      	movs	r3, #0
}
   9ae66:	4618      	mov	r0, r3
   9ae68:	370c      	adds	r7, #12
   9ae6a:	46bd      	mov	sp, r7
   9ae6c:	f85d 7b04 	ldr.w	r7, [sp], #4
   9ae70:	4770      	bx	lr
   9ae72:	bf00      	nop
   9ae74:	400e0600 	.word	0x400e0600

0009ae78 <pmc_set_writeprotect>:
 * \brief Enable or disable write protect of PMC registers.
 *
 * \param ul_enable 1 to enable, 0 to disable.
 */
void pmc_set_writeprotect(uint32_t ul_enable)
{
   9ae78:	b480      	push	{r7}
   9ae7a:	b083      	sub	sp, #12
   9ae7c:	af00      	add	r7, sp, #0
   9ae7e:	6078      	str	r0, [r7, #4]
	if (ul_enable) {
   9ae80:	687b      	ldr	r3, [r7, #4]
   9ae82:	2b00      	cmp	r3, #0
   9ae84:	d004      	beq.n	9ae90 <pmc_set_writeprotect+0x18>
		PMC->PMC_WPMR = PMC_WPMR_WPKEY_VALUE | PMC_WPMR_WPEN;
   9ae86:	4b07      	ldr	r3, [pc, #28]	; (9aea4 <pmc_set_writeprotect+0x2c>)
   9ae88:	4a07      	ldr	r2, [pc, #28]	; (9aea8 <pmc_set_writeprotect+0x30>)
   9ae8a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
   9ae8e:	e003      	b.n	9ae98 <pmc_set_writeprotect+0x20>
	} else {
		PMC->PMC_WPMR = PMC_WPMR_WPKEY_VALUE;
   9ae90:	4b04      	ldr	r3, [pc, #16]	; (9aea4 <pmc_set_writeprotect+0x2c>)
   9ae92:	4a06      	ldr	r2, [pc, #24]	; (9aeac <pmc_set_writeprotect+0x34>)
   9ae94:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	}
}
   9ae98:	370c      	adds	r7, #12
   9ae9a:	46bd      	mov	sp, r7
   9ae9c:	f85d 7b04 	ldr.w	r7, [sp], #4
   9aea0:	4770      	bx	lr
   9aea2:	bf00      	nop
   9aea4:	400e0600 	.word	0x400e0600
   9aea8:	504d4301 	.word	0x504d4301
   9aeac:	504d4300 	.word	0x504d4300

0009aeb0 <tc_start>:
 *
 * \param p_tc Pointer to a TC instance.
 * \param ul_channel Channel to configure.
 */
void tc_start(Tc *p_tc, uint32_t ul_channel)
{
   9aeb0:	b480      	push	{r7}
   9aeb2:	b083      	sub	sp, #12
   9aeb4:	af00      	add	r7, sp, #0
   9aeb6:	6078      	str	r0, [r7, #4]
   9aeb8:	6039      	str	r1, [r7, #0]
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   9aeba:	687a      	ldr	r2, [r7, #4]
   9aebc:	683b      	ldr	r3, [r7, #0]
   9aebe:	019b      	lsls	r3, r3, #6
   9aec0:	4413      	add	r3, r2
   9aec2:	2205      	movs	r2, #5
   9aec4:	601a      	str	r2, [r3, #0]
}
   9aec6:	370c      	adds	r7, #12
   9aec8:	46bd      	mov	sp, r7
   9aeca:	f85d 7b04 	ldr.w	r7, [sp], #4
   9aece:	4770      	bx	lr

0009aed0 <tc_write_rc>:
 * \param ul_channel Channel to configure.
 * \param ul_value Value to set in register.
 */
void tc_write_rc(Tc *p_tc, uint32_t ul_channel,
		uint32_t ul_value)
{
   9aed0:	b480      	push	{r7}
   9aed2:	b085      	sub	sp, #20
   9aed4:	af00      	add	r7, sp, #0
   9aed6:	60f8      	str	r0, [r7, #12]
   9aed8:	60b9      	str	r1, [r7, #8]
   9aeda:	607a      	str	r2, [r7, #4]
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
   9aedc:	68fa      	ldr	r2, [r7, #12]
   9aede:	68bb      	ldr	r3, [r7, #8]
   9aee0:	019b      	lsls	r3, r3, #6
   9aee2:	4413      	add	r3, r2
   9aee4:	3318      	adds	r3, #24
   9aee6:	687a      	ldr	r2, [r7, #4]
   9aee8:	605a      	str	r2, [r3, #4]
}
   9aeea:	3714      	adds	r7, #20
   9aeec:	46bd      	mov	sp, r7
   9aeee:	f85d 7b04 	ldr.w	r7, [sp], #4
   9aef2:	4770      	bx	lr

0009aef4 <tc_enable_interrupt>:
 * \param ul_channel Channel to configure.
 * \param ul_sources Interrupt sources bit map.
 */
void tc_enable_interrupt(Tc *p_tc, uint32_t ul_channel,
		uint32_t ul_sources)
{
   9aef4:	b480      	push	{r7}
   9aef6:	b087      	sub	sp, #28
   9aef8:	af00      	add	r7, sp, #0
   9aefa:	60f8      	str	r0, [r7, #12]
   9aefc:	60b9      	str	r1, [r7, #8]
   9aefe:	607a      	str	r2, [r7, #4]
	TcChannel *tc_channel;

	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   9af00:	68bb      	ldr	r3, [r7, #8]
   9af02:	019b      	lsls	r3, r3, #6
   9af04:	68fa      	ldr	r2, [r7, #12]
   9af06:	4413      	add	r3, r2
   9af08:	617b      	str	r3, [r7, #20]
	tc_channel->TC_IER = ul_sources;
   9af0a:	697b      	ldr	r3, [r7, #20]
   9af0c:	687a      	ldr	r2, [r7, #4]
   9af0e:	625a      	str	r2, [r3, #36]	; 0x24
}
   9af10:	371c      	adds	r7, #28
   9af12:	46bd      	mov	sp, r7
   9af14:	f85d 7b04 	ldr.w	r7, [sp], #4
   9af18:	4770      	bx	lr
   9af1a:	bf00      	nop

0009af1c <tc_get_status>:
 * \param ul_channel Channel to configure.
 *
 * \return The current TC status.
 */
uint32_t tc_get_status(Tc *p_tc, uint32_t ul_channel)
{
   9af1c:	b480      	push	{r7}
   9af1e:	b085      	sub	sp, #20
   9af20:	af00      	add	r7, sp, #0
   9af22:	6078      	str	r0, [r7, #4]
   9af24:	6039      	str	r1, [r7, #0]
	TcChannel *tc_channel;

	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   9af26:	683b      	ldr	r3, [r7, #0]
   9af28:	019b      	lsls	r3, r3, #6
   9af2a:	687a      	ldr	r2, [r7, #4]
   9af2c:	4413      	add	r3, r2
   9af2e:	60fb      	str	r3, [r7, #12]
	return tc_channel->TC_SR;
   9af30:	68fb      	ldr	r3, [r7, #12]
   9af32:	6a1b      	ldr	r3, [r3, #32]
}
   9af34:	4618      	mov	r0, r3
   9af36:	3714      	adds	r7, #20
   9af38:	46bd      	mov	sp, r7
   9af3a:	f85d 7b04 	ldr.w	r7, [sp], #4
   9af3e:	4770      	bx	lr

0009af40 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   9af40:	b480      	push	{r7}
   9af42:	b085      	sub	sp, #20
   9af44:	af00      	add	r7, sp, #0
   9af46:	6078      	str	r0, [r7, #4]
   9af48:	6039      	str	r1, [r7, #0]
	uint32_t cd = 0;
   9af4a:	2300      	movs	r3, #0
   9af4c:	60fb      	str	r3, [r7, #12]

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   9af4e:	687b      	ldr	r3, [r7, #4]
   9af50:	22ac      	movs	r2, #172	; 0xac
   9af52:	601a      	str	r2, [r3, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   9af54:	683b      	ldr	r3, [r7, #0]
   9af56:	681a      	ldr	r2, [r3, #0]
   9af58:	683b      	ldr	r3, [r7, #0]
   9af5a:	685b      	ldr	r3, [r3, #4]
   9af5c:	fbb2 f3f3 	udiv	r3, r2, r3
   9af60:	091b      	lsrs	r3, r3, #4
   9af62:	60fb      	str	r3, [r7, #12]
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   9af64:	68fb      	ldr	r3, [r7, #12]
   9af66:	2b00      	cmp	r3, #0
   9af68:	d003      	beq.n	9af72 <uart_init+0x32>
   9af6a:	68fb      	ldr	r3, [r7, #12]
   9af6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   9af70:	d301      	bcc.n	9af76 <uart_init+0x36>
		return 1;
   9af72:	2301      	movs	r3, #1
   9af74:	e00f      	b.n	9af96 <uart_init+0x56>

	p_uart->UART_BRGR = cd;
   9af76:	687b      	ldr	r3, [r7, #4]
   9af78:	68fa      	ldr	r2, [r7, #12]
   9af7a:	621a      	str	r2, [r3, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   9af7c:	683b      	ldr	r3, [r7, #0]
   9af7e:	689a      	ldr	r2, [r3, #8]
   9af80:	687b      	ldr	r3, [r7, #4]
   9af82:	605a      	str	r2, [r3, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   9af84:	687b      	ldr	r3, [r7, #4]
   9af86:	f240 2202 	movw	r2, #514	; 0x202
   9af8a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   9af8e:	687b      	ldr	r3, [r7, #4]
   9af90:	2250      	movs	r2, #80	; 0x50
   9af92:	601a      	str	r2, [r3, #0]

	return 0;
   9af94:	2300      	movs	r3, #0
}
   9af96:	4618      	mov	r0, r3
   9af98:	3714      	adds	r7, #20
   9af9a:	46bd      	mov	sp, r7
   9af9c:	f85d 7b04 	ldr.w	r7, [sp], #4
   9afa0:	4770      	bx	lr
   9afa2:	bf00      	nop

0009afa4 <uart_enable_tx>:
 * \brief Enable UART transmitter.
 *
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable_tx(Uart *p_uart)
{
   9afa4:	b480      	push	{r7}
   9afa6:	b083      	sub	sp, #12
   9afa8:	af00      	add	r7, sp, #0
   9afaa:	6078      	str	r0, [r7, #4]
	/* Enable transmitter */
	p_uart->UART_CR = UART_CR_TXEN;
   9afac:	687b      	ldr	r3, [r7, #4]
   9afae:	2240      	movs	r2, #64	; 0x40
   9afb0:	601a      	str	r2, [r3, #0]
}
   9afb2:	370c      	adds	r7, #12
   9afb4:	46bd      	mov	sp, r7
   9afb6:	f85d 7b04 	ldr.w	r7, [sp], #4
   9afba:	4770      	bx	lr

0009afbc <uart_enable_rx>:
 * \brief Enable UART receiver.
 *
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable_rx(Uart *p_uart)
{
   9afbc:	b480      	push	{r7}
   9afbe:	b083      	sub	sp, #12
   9afc0:	af00      	add	r7, sp, #0
   9afc2:	6078      	str	r0, [r7, #4]
	/* Enable receiver */
	p_uart->UART_CR = UART_CR_RXEN;
   9afc4:	687b      	ldr	r3, [r7, #4]
   9afc6:	2210      	movs	r2, #16
   9afc8:	601a      	str	r2, [r3, #0]
}
   9afca:	370c      	adds	r7, #12
   9afcc:	46bd      	mov	sp, r7
   9afce:	f85d 7b04 	ldr.w	r7, [sp], #4
   9afd2:	4770      	bx	lr

0009afd4 <uart_enable>:
 * \brief Enable UART receiver and transmitter.
 *
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable(Uart *p_uart)
{
   9afd4:	b480      	push	{r7}
   9afd6:	b083      	sub	sp, #12
   9afd8:	af00      	add	r7, sp, #0
   9afda:	6078      	str	r0, [r7, #4]
	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   9afdc:	687b      	ldr	r3, [r7, #4]
   9afde:	2250      	movs	r2, #80	; 0x50
   9afe0:	601a      	str	r2, [r3, #0]
}
   9afe2:	370c      	adds	r7, #12
   9afe4:	46bd      	mov	sp, r7
   9afe6:	f85d 7b04 	ldr.w	r7, [sp], #4
   9afea:	4770      	bx	lr

0009afec <uart_enable_interrupt>:
 *
 * \param p_uart Pointer to a UART instance.
 *  \param ul_sources Interrupts to be enabled.
 */
void uart_enable_interrupt(Uart *p_uart, uint32_t ul_sources)
{
   9afec:	b480      	push	{r7}
   9afee:	b083      	sub	sp, #12
   9aff0:	af00      	add	r7, sp, #0
   9aff2:	6078      	str	r0, [r7, #4]
   9aff4:	6039      	str	r1, [r7, #0]
	p_uart->UART_IER = ul_sources;
   9aff6:	687b      	ldr	r3, [r7, #4]
   9aff8:	683a      	ldr	r2, [r7, #0]
   9affa:	609a      	str	r2, [r3, #8]
}
   9affc:	370c      	adds	r7, #12
   9affe:	46bd      	mov	sp, r7
   9b000:	f85d 7b04 	ldr.w	r7, [sp], #4
   9b004:	4770      	bx	lr
   9b006:	bf00      	nop

0009b008 <uart_write>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
   9b008:	b480      	push	{r7}
   9b00a:	b083      	sub	sp, #12
   9b00c:	af00      	add	r7, sp, #0
   9b00e:	6078      	str	r0, [r7, #4]
   9b010:	460b      	mov	r3, r1
   9b012:	70fb      	strb	r3, [r7, #3]
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   9b014:	687b      	ldr	r3, [r7, #4]
   9b016:	695b      	ldr	r3, [r3, #20]
   9b018:	f003 0302 	and.w	r3, r3, #2
   9b01c:	2b00      	cmp	r3, #0
   9b01e:	d101      	bne.n	9b024 <uart_write+0x1c>
		return 1;
   9b020:	2301      	movs	r3, #1
   9b022:	e00c      	b.n	9b03e <uart_write+0x36>
if(cl_console_sync != true)
   9b024:	4b09      	ldr	r3, [pc, #36]	; (9b04c <uart_write+0x44>)
   9b026:	781b      	ldrb	r3, [r3, #0]
   9b028:	f083 0301 	eor.w	r3, r3, #1
   9b02c:	b2db      	uxtb	r3, r3
   9b02e:	2b00      	cmp	r3, #0
   9b030:	d001      	beq.n	9b036 <uart_write+0x2e>
	return 1;
   9b032:	2301      	movs	r3, #1
   9b034:	e003      	b.n	9b03e <uart_write+0x36>
	/* Send character */
	
	p_uart->UART_THR = uc_data;
   9b036:	78fa      	ldrb	r2, [r7, #3]
   9b038:	687b      	ldr	r3, [r7, #4]
   9b03a:	61da      	str	r2, [r3, #28]
	return 0;
   9b03c:	2300      	movs	r3, #0
}
   9b03e:	4618      	mov	r0, r3
   9b040:	370c      	adds	r7, #12
   9b042:	46bd      	mov	sp, r7
   9b044:	f85d 7b04 	ldr.w	r7, [sp], #4
   9b048:	4770      	bx	lr
   9b04a:	bf00      	nop
   9b04c:	20071bdd 	.word	0x20071bdd

0009b050 <uart_read>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
   9b050:	b480      	push	{r7}
   9b052:	b083      	sub	sp, #12
   9b054:	af00      	add	r7, sp, #0
   9b056:	6078      	str	r0, [r7, #4]
   9b058:	6039      	str	r1, [r7, #0]
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   9b05a:	687b      	ldr	r3, [r7, #4]
   9b05c:	695b      	ldr	r3, [r3, #20]
   9b05e:	f003 0301 	and.w	r3, r3, #1
   9b062:	2b00      	cmp	r3, #0
   9b064:	d101      	bne.n	9b06a <uart_read+0x1a>
		return 1;
   9b066:	2301      	movs	r3, #1
   9b068:	e005      	b.n	9b076 <uart_read+0x26>

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   9b06a:	687b      	ldr	r3, [r7, #4]
   9b06c:	699b      	ldr	r3, [r3, #24]
   9b06e:	b2da      	uxtb	r2, r3
   9b070:	683b      	ldr	r3, [r7, #0]
   9b072:	701a      	strb	r2, [r3, #0]
	return 0;
   9b074:	2300      	movs	r3, #0
}
   9b076:	4618      	mov	r0, r3
   9b078:	370c      	adds	r7, #12
   9b07a:	46bd      	mov	sp, r7
   9b07c:	f85d 7b04 	ldr.w	r7, [sp], #4
   9b080:	4770      	bx	lr
   9b082:	bf00      	nop

0009b084 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
static uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   9b084:	b480      	push	{r7}
   9b086:	b089      	sub	sp, #36	; 0x24
   9b088:	af00      	add	r7, sp, #0
   9b08a:	60f8      	str	r0, [r7, #12]
   9b08c:	60b9      	str	r1, [r7, #8]
   9b08e:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
   9b090:	68bb      	ldr	r3, [r7, #8]
   9b092:	011a      	lsls	r2, r3, #4
   9b094:	687b      	ldr	r3, [r7, #4]
   9b096:	429a      	cmp	r2, r3
   9b098:	d802      	bhi.n	9b0a0 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
   9b09a:	2310      	movs	r3, #16
   9b09c:	61fb      	str	r3, [r7, #28]
   9b09e:	e001      	b.n	9b0a4 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
   9b0a0:	2308      	movs	r3, #8
   9b0a2:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   9b0a4:	687b      	ldr	r3, [r7, #4]
   9b0a6:	00da      	lsls	r2, r3, #3
   9b0a8:	69fb      	ldr	r3, [r7, #28]
   9b0aa:	68b9      	ldr	r1, [r7, #8]
   9b0ac:	fb01 f303 	mul.w	r3, r1, r3
   9b0b0:	085b      	lsrs	r3, r3, #1
   9b0b2:	441a      	add	r2, r3
   9b0b4:	69fb      	ldr	r3, [r7, #28]
   9b0b6:	68b9      	ldr	r1, [r7, #8]
   9b0b8:	fb01 f303 	mul.w	r3, r1, r3
   9b0bc:	fbb2 f3f3 	udiv	r3, r2, r3
   9b0c0:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
   9b0c2:	69bb      	ldr	r3, [r7, #24]
   9b0c4:	08db      	lsrs	r3, r3, #3
   9b0c6:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
   9b0c8:	69bb      	ldr	r3, [r7, #24]
   9b0ca:	f003 0307 	and.w	r3, r3, #7
   9b0ce:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   9b0d0:	697b      	ldr	r3, [r7, #20]
   9b0d2:	2b00      	cmp	r3, #0
   9b0d4:	d003      	beq.n	9b0de <usart_set_async_baudrate+0x5a>
   9b0d6:	697b      	ldr	r3, [r7, #20]
   9b0d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   9b0dc:	d301      	bcc.n	9b0e2 <usart_set_async_baudrate+0x5e>
		return 1;
   9b0de:	2301      	movs	r3, #1
   9b0e0:	e00f      	b.n	9b102 <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
   9b0e2:	69fb      	ldr	r3, [r7, #28]
   9b0e4:	2b08      	cmp	r3, #8
   9b0e6:	d105      	bne.n	9b0f4 <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
   9b0e8:	68fb      	ldr	r3, [r7, #12]
   9b0ea:	685b      	ldr	r3, [r3, #4]
   9b0ec:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
   9b0f0:	68fb      	ldr	r3, [r7, #12]
   9b0f2:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
   9b0f4:	693b      	ldr	r3, [r7, #16]
   9b0f6:	041a      	lsls	r2, r3, #16
   9b0f8:	697b      	ldr	r3, [r7, #20]
   9b0fa:	431a      	orrs	r2, r3
   9b0fc:	68fb      	ldr	r3, [r7, #12]
   9b0fe:	621a      	str	r2, [r3, #32]

	return 0;
   9b100:	2300      	movs	r3, #0
}
   9b102:	4618      	mov	r0, r3
   9b104:	3724      	adds	r7, #36	; 0x24
   9b106:	46bd      	mov	sp, r7
   9b108:	f85d 7b04 	ldr.w	r7, [sp], #4
   9b10c:	4770      	bx	lr
   9b10e:	bf00      	nop

0009b110 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
   9b110:	b580      	push	{r7, lr}
   9b112:	b082      	sub	sp, #8
   9b114:	af00      	add	r7, sp, #0
   9b116:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
   9b118:	6878      	ldr	r0, [r7, #4]
   9b11a:	4b0d      	ldr	r3, [pc, #52]	; (9b150 <usart_reset+0x40>)
   9b11c:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
   9b11e:	687b      	ldr	r3, [r7, #4]
   9b120:	2200      	movs	r2, #0
   9b122:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
   9b124:	687b      	ldr	r3, [r7, #4]
   9b126:	2200      	movs	r2, #0
   9b128:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
   9b12a:	687b      	ldr	r3, [r7, #4]
   9b12c:	2200      	movs	r2, #0
   9b12e:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
   9b130:	6878      	ldr	r0, [r7, #4]
   9b132:	4b08      	ldr	r3, [pc, #32]	; (9b154 <usart_reset+0x44>)
   9b134:	4798      	blx	r3
	usart_reset_rx(p_usart);
   9b136:	6878      	ldr	r0, [r7, #4]
   9b138:	4b07      	ldr	r3, [pc, #28]	; (9b158 <usart_reset+0x48>)
   9b13a:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
   9b13c:	6878      	ldr	r0, [r7, #4]
   9b13e:	4b07      	ldr	r3, [pc, #28]	; (9b15c <usart_reset+0x4c>)
   9b140:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
   9b142:	6878      	ldr	r0, [r7, #4]
   9b144:	4b06      	ldr	r3, [pc, #24]	; (9b160 <usart_reset+0x50>)
   9b146:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
#endif
}
   9b148:	3708      	adds	r7, #8
   9b14a:	46bd      	mov	sp, r7
   9b14c:	bd80      	pop	{r7, pc}
   9b14e:	bf00      	nop
   9b150:	0009b2e9 	.word	0x0009b2e9
   9b154:	0009b201 	.word	0x0009b201
   9b158:	0009b231 	.word	0x0009b231
   9b15c:	0009b249 	.word	0x0009b249
   9b160:	0009b265 	.word	0x0009b265

0009b164 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
   9b164:	b580      	push	{r7, lr}
   9b166:	b084      	sub	sp, #16
   9b168:	af00      	add	r7, sp, #0
   9b16a:	60f8      	str	r0, [r7, #12]
   9b16c:	60b9      	str	r1, [r7, #8]
   9b16e:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
   9b170:	68f8      	ldr	r0, [r7, #12]
   9b172:	4b1a      	ldr	r3, [pc, #104]	; (9b1dc <usart_init_rs232+0x78>)
   9b174:	4798      	blx	r3

	ul_reg_val = 0;
   9b176:	4b1a      	ldr	r3, [pc, #104]	; (9b1e0 <usart_init_rs232+0x7c>)
   9b178:	2200      	movs	r2, #0
   9b17a:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
   9b17c:	68bb      	ldr	r3, [r7, #8]
   9b17e:	2b00      	cmp	r3, #0
   9b180:	d009      	beq.n	9b196 <usart_init_rs232+0x32>
   9b182:	68bb      	ldr	r3, [r7, #8]
   9b184:	681b      	ldr	r3, [r3, #0]
   9b186:	68f8      	ldr	r0, [r7, #12]
   9b188:	4619      	mov	r1, r3
   9b18a:	687a      	ldr	r2, [r7, #4]
   9b18c:	4b15      	ldr	r3, [pc, #84]	; (9b1e4 <usart_init_rs232+0x80>)
   9b18e:	4798      	blx	r3
   9b190:	4603      	mov	r3, r0
   9b192:	2b00      	cmp	r3, #0
   9b194:	d001      	beq.n	9b19a <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
   9b196:	2301      	movs	r3, #1
   9b198:	e01b      	b.n	9b1d2 <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   9b19a:	68bb      	ldr	r3, [r7, #8]
   9b19c:	685a      	ldr	r2, [r3, #4]
   9b19e:	68bb      	ldr	r3, [r7, #8]
   9b1a0:	689b      	ldr	r3, [r3, #8]
   9b1a2:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   9b1a4:	68bb      	ldr	r3, [r7, #8]
   9b1a6:	691b      	ldr	r3, [r3, #16]
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   9b1a8:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   9b1aa:	68bb      	ldr	r3, [r7, #8]
   9b1ac:	68db      	ldr	r3, [r3, #12]
   9b1ae:	431a      	orrs	r2, r3
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   9b1b0:	4b0b      	ldr	r3, [pc, #44]	; (9b1e0 <usart_init_rs232+0x7c>)
   9b1b2:	681b      	ldr	r3, [r3, #0]
   9b1b4:	4313      	orrs	r3, r2
   9b1b6:	4a0a      	ldr	r2, [pc, #40]	; (9b1e0 <usart_init_rs232+0x7c>)
   9b1b8:	6013      	str	r3, [r2, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
   9b1ba:	4b09      	ldr	r3, [pc, #36]	; (9b1e0 <usart_init_rs232+0x7c>)
   9b1bc:	681b      	ldr	r3, [r3, #0]
   9b1be:	4a08      	ldr	r2, [pc, #32]	; (9b1e0 <usart_init_rs232+0x7c>)
   9b1c0:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
   9b1c2:	68fb      	ldr	r3, [r7, #12]
   9b1c4:	685a      	ldr	r2, [r3, #4]
   9b1c6:	4b06      	ldr	r3, [pc, #24]	; (9b1e0 <usart_init_rs232+0x7c>)
   9b1c8:	681b      	ldr	r3, [r3, #0]
   9b1ca:	431a      	orrs	r2, r3
   9b1cc:	68fb      	ldr	r3, [r7, #12]
   9b1ce:	605a      	str	r2, [r3, #4]

	return 0;
   9b1d0:	2300      	movs	r3, #0
}
   9b1d2:	4618      	mov	r0, r3
   9b1d4:	3710      	adds	r7, #16
   9b1d6:	46bd      	mov	sp, r7
   9b1d8:	bd80      	pop	{r7, pc}
   9b1da:	bf00      	nop
   9b1dc:	0009b111 	.word	0x0009b111
   9b1e0:	20071bd0 	.word	0x20071bd0
   9b1e4:	0009b085 	.word	0x0009b085

0009b1e8 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
   9b1e8:	b480      	push	{r7}
   9b1ea:	b083      	sub	sp, #12
   9b1ec:	af00      	add	r7, sp, #0
   9b1ee:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
   9b1f0:	687b      	ldr	r3, [r7, #4]
   9b1f2:	2240      	movs	r2, #64	; 0x40
   9b1f4:	601a      	str	r2, [r3, #0]
}
   9b1f6:	370c      	adds	r7, #12
   9b1f8:	46bd      	mov	sp, r7
   9b1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
   9b1fe:	4770      	bx	lr

0009b200 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
   9b200:	b480      	push	{r7}
   9b202:	b083      	sub	sp, #12
   9b204:	af00      	add	r7, sp, #0
   9b206:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   9b208:	687b      	ldr	r3, [r7, #4]
   9b20a:	2288      	movs	r2, #136	; 0x88
   9b20c:	601a      	str	r2, [r3, #0]
}
   9b20e:	370c      	adds	r7, #12
   9b210:	46bd      	mov	sp, r7
   9b212:	f85d 7b04 	ldr.w	r7, [sp], #4
   9b216:	4770      	bx	lr

0009b218 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
   9b218:	b480      	push	{r7}
   9b21a:	b083      	sub	sp, #12
   9b21c:	af00      	add	r7, sp, #0
   9b21e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
   9b220:	687b      	ldr	r3, [r7, #4]
   9b222:	2210      	movs	r2, #16
   9b224:	601a      	str	r2, [r3, #0]
}
   9b226:	370c      	adds	r7, #12
   9b228:	46bd      	mov	sp, r7
   9b22a:	f85d 7b04 	ldr.w	r7, [sp], #4
   9b22e:	4770      	bx	lr

0009b230 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
   9b230:	b480      	push	{r7}
   9b232:	b083      	sub	sp, #12
   9b234:	af00      	add	r7, sp, #0
   9b236:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   9b238:	687b      	ldr	r3, [r7, #4]
   9b23a:	2224      	movs	r2, #36	; 0x24
   9b23c:	601a      	str	r2, [r3, #0]
}
   9b23e:	370c      	adds	r7, #12
   9b240:	46bd      	mov	sp, r7
   9b242:	f85d 7b04 	ldr.w	r7, [sp], #4
   9b246:	4770      	bx	lr

0009b248 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
   9b248:	b480      	push	{r7}
   9b24a:	b083      	sub	sp, #12
   9b24c:	af00      	add	r7, sp, #0
   9b24e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
   9b250:	687b      	ldr	r3, [r7, #4]
   9b252:	f44f 7280 	mov.w	r2, #256	; 0x100
   9b256:	601a      	str	r2, [r3, #0]
}
   9b258:	370c      	adds	r7, #12
   9b25a:	46bd      	mov	sp, r7
   9b25c:	f85d 7b04 	ldr.w	r7, [sp], #4
   9b260:	4770      	bx	lr
   9b262:	bf00      	nop

0009b264 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
   9b264:	b480      	push	{r7}
   9b266:	b083      	sub	sp, #12
   9b268:	af00      	add	r7, sp, #0
   9b26a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
   9b26c:	687b      	ldr	r3, [r7, #4]
   9b26e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   9b272:	601a      	str	r2, [r3, #0]
}
   9b274:	370c      	adds	r7, #12
   9b276:	46bd      	mov	sp, r7
   9b278:	f85d 7b04 	ldr.w	r7, [sp], #4
   9b27c:	4770      	bx	lr
   9b27e:	bf00      	nop

0009b280 <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
   9b280:	b480      	push	{r7}
   9b282:	b083      	sub	sp, #12
   9b284:	af00      	add	r7, sp, #0
   9b286:	6078      	str	r0, [r7, #4]
   9b288:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   9b28a:	687b      	ldr	r3, [r7, #4]
   9b28c:	695b      	ldr	r3, [r3, #20]
   9b28e:	f003 0302 	and.w	r3, r3, #2
   9b292:	2b00      	cmp	r3, #0
   9b294:	d101      	bne.n	9b29a <usart_write+0x1a>
		return 1;
   9b296:	2301      	movs	r3, #1
   9b298:	e005      	b.n	9b2a6 <usart_write+0x26>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   9b29a:	683b      	ldr	r3, [r7, #0]
   9b29c:	f3c3 0208 	ubfx	r2, r3, #0, #9
   9b2a0:	687b      	ldr	r3, [r7, #4]
   9b2a2:	61da      	str	r2, [r3, #28]
	return 0;
   9b2a4:	2300      	movs	r3, #0
}
   9b2a6:	4618      	mov	r0, r3
   9b2a8:	370c      	adds	r7, #12
   9b2aa:	46bd      	mov	sp, r7
   9b2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
   9b2b0:	4770      	bx	lr
   9b2b2:	bf00      	nop

0009b2b4 <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
   9b2b4:	b480      	push	{r7}
   9b2b6:	b083      	sub	sp, #12
   9b2b8:	af00      	add	r7, sp, #0
   9b2ba:	6078      	str	r0, [r7, #4]
   9b2bc:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   9b2be:	687b      	ldr	r3, [r7, #4]
   9b2c0:	695b      	ldr	r3, [r3, #20]
   9b2c2:	f003 0301 	and.w	r3, r3, #1
   9b2c6:	2b00      	cmp	r3, #0
   9b2c8:	d101      	bne.n	9b2ce <usart_read+0x1a>
		return 1;
   9b2ca:	2301      	movs	r3, #1
   9b2cc:	e006      	b.n	9b2dc <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   9b2ce:	687b      	ldr	r3, [r7, #4]
   9b2d0:	699b      	ldr	r3, [r3, #24]
   9b2d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
   9b2d6:	683b      	ldr	r3, [r7, #0]
   9b2d8:	601a      	str	r2, [r3, #0]

	return 0;
   9b2da:	2300      	movs	r3, #0
}
   9b2dc:	4618      	mov	r0, r3
   9b2de:	370c      	adds	r7, #12
   9b2e0:	46bd      	mov	sp, r7
   9b2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
   9b2e6:	4770      	bx	lr

0009b2e8 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
   9b2e8:	b480      	push	{r7}
   9b2ea:	b083      	sub	sp, #12
   9b2ec:	af00      	add	r7, sp, #0
   9b2ee:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY(US_WPKEY_VALUE);
   9b2f0:	687b      	ldr	r3, [r7, #4]
   9b2f2:	4a04      	ldr	r2, [pc, #16]	; (9b304 <usart_disable_writeprotect+0x1c>)
   9b2f4:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
   9b2f8:	370c      	adds	r7, #12
   9b2fa:	46bd      	mov	sp, r7
   9b2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
   9b300:	4770      	bx	lr
   9b302:	bf00      	nop
   9b304:	55534100 	.word	0x55534100

0009b308 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   9b308:	b480      	push	{r7}
   9b30a:	af00      	add	r7, sp, #0
	while (1) {
	}
   9b30c:	e7fe      	b.n	9b30c <Dummy_Handler+0x4>
   9b30e:	bf00      	nop

0009b310 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   9b310:	b580      	push	{r7, lr}
   9b312:	b082      	sub	sp, #8
   9b314:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
   9b316:	4b1e      	ldr	r3, [pc, #120]	; (9b390 <Reset_Handler+0x80>)
   9b318:	607b      	str	r3, [r7, #4]
	pDest = &_srelocate;
   9b31a:	4b1e      	ldr	r3, [pc, #120]	; (9b394 <Reset_Handler+0x84>)
   9b31c:	603b      	str	r3, [r7, #0]

	if (pSrc != pDest) {
   9b31e:	687a      	ldr	r2, [r7, #4]
   9b320:	683b      	ldr	r3, [r7, #0]
   9b322:	429a      	cmp	r2, r3
   9b324:	d00c      	beq.n	9b340 <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
   9b326:	e007      	b.n	9b338 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
   9b328:	683b      	ldr	r3, [r7, #0]
   9b32a:	1d1a      	adds	r2, r3, #4
   9b32c:	603a      	str	r2, [r7, #0]
   9b32e:	687a      	ldr	r2, [r7, #4]
   9b330:	1d11      	adds	r1, r2, #4
   9b332:	6079      	str	r1, [r7, #4]
   9b334:	6812      	ldr	r2, [r2, #0]
   9b336:	601a      	str	r2, [r3, #0]
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   9b338:	683b      	ldr	r3, [r7, #0]
   9b33a:	4a17      	ldr	r2, [pc, #92]	; (9b398 <Reset_Handler+0x88>)
   9b33c:	4293      	cmp	r3, r2
   9b33e:	d3f3      	bcc.n	9b328 <Reset_Handler+0x18>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   9b340:	4b16      	ldr	r3, [pc, #88]	; (9b39c <Reset_Handler+0x8c>)
   9b342:	603b      	str	r3, [r7, #0]
   9b344:	e004      	b.n	9b350 <Reset_Handler+0x40>
		*pDest++ = 0;
   9b346:	683b      	ldr	r3, [r7, #0]
   9b348:	1d1a      	adds	r2, r3, #4
   9b34a:	603a      	str	r2, [r7, #0]
   9b34c:	2200      	movs	r2, #0
   9b34e:	601a      	str	r2, [r3, #0]
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   9b350:	683b      	ldr	r3, [r7, #0]
   9b352:	4a13      	ldr	r2, [pc, #76]	; (9b3a0 <Reset_Handler+0x90>)
   9b354:	4293      	cmp	r3, r2
   9b356:	d3f6      	bcc.n	9b346 <Reset_Handler+0x36>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
   9b358:	4b12      	ldr	r3, [pc, #72]	; (9b3a4 <Reset_Handler+0x94>)
   9b35a:	607b      	str	r3, [r7, #4]
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   9b35c:	4a12      	ldr	r2, [pc, #72]	; (9b3a8 <Reset_Handler+0x98>)
   9b35e:	687b      	ldr	r3, [r7, #4]
   9b360:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   9b364:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   9b368:	6093      	str	r3, [r2, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   9b36a:	687b      	ldr	r3, [r7, #4]
   9b36c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   9b370:	d309      	bcc.n	9b386 <Reset_Handler+0x76>
   9b372:	687b      	ldr	r3, [r7, #4]
   9b374:	4a0d      	ldr	r2, [pc, #52]	; (9b3ac <Reset_Handler+0x9c>)
   9b376:	4293      	cmp	r3, r2
   9b378:	d805      	bhi.n	9b386 <Reset_Handler+0x76>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   9b37a:	4a0b      	ldr	r2, [pc, #44]	; (9b3a8 <Reset_Handler+0x98>)
   9b37c:	4b0a      	ldr	r3, [pc, #40]	; (9b3a8 <Reset_Handler+0x98>)
   9b37e:	689b      	ldr	r3, [r3, #8]
   9b380:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   9b384:	6093      	str	r3, [r2, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   9b386:	4b0a      	ldr	r3, [pc, #40]	; (9b3b0 <Reset_Handler+0xa0>)
   9b388:	4798      	blx	r3

	/* Branch to main function */
	main();
   9b38a:	4b0a      	ldr	r3, [pc, #40]	; (9b3b4 <Reset_Handler+0xa4>)
   9b38c:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   9b38e:	e7fe      	b.n	9b38e <Reset_Handler+0x7e>
   9b390:	000a8ddc 	.word	0x000a8ddc
   9b394:	20070000 	.word	0x20070000
   9b398:	20071604 	.word	0x20071604
   9b39c:	20071604 	.word	0x20071604
   9b3a0:	20072834 	.word	0x20072834
   9b3a4:	00080000 	.word	0x00080000
   9b3a8:	e000ed00 	.word	0xe000ed00
   9b3ac:	200fffff 	.word	0x200fffff
   9b3b0:	000a6d71 	.word	0x000a6d71
   9b3b4:	0008bc99 	.word	0x0008bc99

0009b3b8 <SystemCoreClockUpdate>:

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate(void)
{
   9b3b8:	b480      	push	{r7}
   9b3ba:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   9b3bc:	4b56      	ldr	r3, [pc, #344]	; (9b518 <SystemCoreClockUpdate+0x160>)
   9b3be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   9b3c0:	f003 0303 	and.w	r3, r3, #3
   9b3c4:	2b03      	cmp	r3, #3
   9b3c6:	f200 808a 	bhi.w	9b4de <SystemCoreClockUpdate+0x126>
   9b3ca:	a201      	add	r2, pc, #4	; (adr r2, 9b3d0 <SystemCoreClockUpdate+0x18>)
   9b3cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9b3d0:	0009b3e1 	.word	0x0009b3e1
   9b3d4:	0009b401 	.word	0x0009b401
   9b3d8:	0009b451 	.word	0x0009b451
   9b3dc:	0009b451 	.word	0x0009b451
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   9b3e0:	4b4e      	ldr	r3, [pc, #312]	; (9b51c <SystemCoreClockUpdate+0x164>)
   9b3e2:	695b      	ldr	r3, [r3, #20]
   9b3e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
   9b3e8:	2b00      	cmp	r3, #0
   9b3ea:	d004      	beq.n	9b3f6 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   9b3ec:	4b4c      	ldr	r3, [pc, #304]	; (9b520 <SystemCoreClockUpdate+0x168>)
   9b3ee:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   9b3f2:	601a      	str	r2, [r3, #0]
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
		}
		break;
   9b3f4:	e073      	b.n	9b4de <SystemCoreClockUpdate+0x126>
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   9b3f6:	4b4a      	ldr	r3, [pc, #296]	; (9b520 <SystemCoreClockUpdate+0x168>)
   9b3f8:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
   9b3fc:	601a      	str	r2, [r3, #0]
		}
		break;
   9b3fe:	e06e      	b.n	9b4de <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   9b400:	4b45      	ldr	r3, [pc, #276]	; (9b518 <SystemCoreClockUpdate+0x160>)
   9b402:	6a1b      	ldr	r3, [r3, #32]
   9b404:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   9b408:	2b00      	cmp	r3, #0
   9b40a:	d003      	beq.n	9b414 <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   9b40c:	4b44      	ldr	r3, [pc, #272]	; (9b520 <SystemCoreClockUpdate+0x168>)
   9b40e:	4a45      	ldr	r2, [pc, #276]	; (9b524 <SystemCoreClockUpdate+0x16c>)
   9b410:	601a      	str	r2, [r3, #0]
   9b412:	e01c      	b.n	9b44e <SystemCoreClockUpdate+0x96>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   9b414:	4b42      	ldr	r3, [pc, #264]	; (9b520 <SystemCoreClockUpdate+0x168>)
   9b416:	4a44      	ldr	r2, [pc, #272]	; (9b528 <SystemCoreClockUpdate+0x170>)
   9b418:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   9b41a:	4b3f      	ldr	r3, [pc, #252]	; (9b518 <SystemCoreClockUpdate+0x160>)
   9b41c:	6a1b      	ldr	r3, [r3, #32]
   9b41e:	f003 0370 	and.w	r3, r3, #112	; 0x70
   9b422:	2b10      	cmp	r3, #16
   9b424:	d004      	beq.n	9b430 <SystemCoreClockUpdate+0x78>
   9b426:	2b20      	cmp	r3, #32
   9b428:	d008      	beq.n	9b43c <SystemCoreClockUpdate+0x84>
   9b42a:	2b00      	cmp	r3, #0
   9b42c:	d00e      	beq.n	9b44c <SystemCoreClockUpdate+0x94>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   9b42e:	e00e      	b.n	9b44e <SystemCoreClockUpdate+0x96>

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   9b430:	4b3b      	ldr	r3, [pc, #236]	; (9b520 <SystemCoreClockUpdate+0x168>)
   9b432:	681b      	ldr	r3, [r3, #0]
   9b434:	005b      	lsls	r3, r3, #1
   9b436:	4a3a      	ldr	r2, [pc, #232]	; (9b520 <SystemCoreClockUpdate+0x168>)
   9b438:	6013      	str	r3, [r2, #0]
				break;
   9b43a:	e008      	b.n	9b44e <SystemCoreClockUpdate+0x96>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   9b43c:	4b38      	ldr	r3, [pc, #224]	; (9b520 <SystemCoreClockUpdate+0x168>)
   9b43e:	681a      	ldr	r2, [r3, #0]
   9b440:	4613      	mov	r3, r2
   9b442:	005b      	lsls	r3, r3, #1
   9b444:	4413      	add	r3, r2
   9b446:	4a36      	ldr	r2, [pc, #216]	; (9b520 <SystemCoreClockUpdate+0x168>)
   9b448:	6013      	str	r3, [r2, #0]
				break;
   9b44a:	e000      	b.n	9b44e <SystemCoreClockUpdate+0x96>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
   9b44c:	bf00      	nop
				break;
			default:
				break;
			}
		}
		break;
   9b44e:	e046      	b.n	9b4de <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   9b450:	4b31      	ldr	r3, [pc, #196]	; (9b518 <SystemCoreClockUpdate+0x160>)
   9b452:	6a1b      	ldr	r3, [r3, #32]
   9b454:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   9b458:	2b00      	cmp	r3, #0
   9b45a:	d003      	beq.n	9b464 <SystemCoreClockUpdate+0xac>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   9b45c:	4b30      	ldr	r3, [pc, #192]	; (9b520 <SystemCoreClockUpdate+0x168>)
   9b45e:	4a31      	ldr	r2, [pc, #196]	; (9b524 <SystemCoreClockUpdate+0x16c>)
   9b460:	601a      	str	r2, [r3, #0]
   9b462:	e01c      	b.n	9b49e <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   9b464:	4b2e      	ldr	r3, [pc, #184]	; (9b520 <SystemCoreClockUpdate+0x168>)
   9b466:	4a30      	ldr	r2, [pc, #192]	; (9b528 <SystemCoreClockUpdate+0x170>)
   9b468:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   9b46a:	4b2b      	ldr	r3, [pc, #172]	; (9b518 <SystemCoreClockUpdate+0x160>)
   9b46c:	6a1b      	ldr	r3, [r3, #32]
   9b46e:	f003 0370 	and.w	r3, r3, #112	; 0x70
   9b472:	2b10      	cmp	r3, #16
   9b474:	d004      	beq.n	9b480 <SystemCoreClockUpdate+0xc8>
   9b476:	2b20      	cmp	r3, #32
   9b478:	d008      	beq.n	9b48c <SystemCoreClockUpdate+0xd4>
   9b47a:	2b00      	cmp	r3, #0
   9b47c:	d00e      	beq.n	9b49c <SystemCoreClockUpdate+0xe4>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   9b47e:	e00e      	b.n	9b49e <SystemCoreClockUpdate+0xe6>

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   9b480:	4b27      	ldr	r3, [pc, #156]	; (9b520 <SystemCoreClockUpdate+0x168>)
   9b482:	681b      	ldr	r3, [r3, #0]
   9b484:	005b      	lsls	r3, r3, #1
   9b486:	4a26      	ldr	r2, [pc, #152]	; (9b520 <SystemCoreClockUpdate+0x168>)
   9b488:	6013      	str	r3, [r2, #0]
				break;
   9b48a:	e008      	b.n	9b49e <SystemCoreClockUpdate+0xe6>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   9b48c:	4b24      	ldr	r3, [pc, #144]	; (9b520 <SystemCoreClockUpdate+0x168>)
   9b48e:	681a      	ldr	r2, [r3, #0]
   9b490:	4613      	mov	r3, r2
   9b492:	005b      	lsls	r3, r3, #1
   9b494:	4413      	add	r3, r2
   9b496:	4a22      	ldr	r2, [pc, #136]	; (9b520 <SystemCoreClockUpdate+0x168>)
   9b498:	6013      	str	r3, [r2, #0]
				break;
   9b49a:	e000      	b.n	9b49e <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
   9b49c:	bf00      	nop
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   9b49e:	4b1e      	ldr	r3, [pc, #120]	; (9b518 <SystemCoreClockUpdate+0x160>)
   9b4a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   9b4a2:	f003 0303 	and.w	r3, r3, #3
   9b4a6:	2b02      	cmp	r3, #2
   9b4a8:	d115      	bne.n	9b4d6 <SystemCoreClockUpdate+0x11e>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   9b4aa:	4b1b      	ldr	r3, [pc, #108]	; (9b518 <SystemCoreClockUpdate+0x160>)
   9b4ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   9b4ae:	4b1f      	ldr	r3, [pc, #124]	; (9b52c <SystemCoreClockUpdate+0x174>)
   9b4b0:	4013      	ands	r3, r2
   9b4b2:	0c1b      	lsrs	r3, r3, #16
				                            CKGR_PLLAR_MULA_Pos) + 1U);
   9b4b4:	3301      	adds	r3, #1
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   9b4b6:	4a1a      	ldr	r2, [pc, #104]	; (9b520 <SystemCoreClockUpdate+0x168>)
   9b4b8:	6812      	ldr	r2, [r2, #0]
   9b4ba:	fb02 f303 	mul.w	r3, r2, r3
   9b4be:	4a18      	ldr	r2, [pc, #96]	; (9b520 <SystemCoreClockUpdate+0x168>)
   9b4c0:	6013      	str	r3, [r2, #0]
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   9b4c2:	4b15      	ldr	r3, [pc, #84]	; (9b518 <SystemCoreClockUpdate+0x160>)
   9b4c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   9b4c6:	b2db      	uxtb	r3, r3
   9b4c8:	4a15      	ldr	r2, [pc, #84]	; (9b520 <SystemCoreClockUpdate+0x168>)
   9b4ca:	6812      	ldr	r2, [r2, #0]
   9b4cc:	fbb2 f3f3 	udiv	r3, r2, r3
   9b4d0:	4a13      	ldr	r2, [pc, #76]	; (9b520 <SystemCoreClockUpdate+0x168>)
   9b4d2:	6013      	str	r3, [r2, #0]
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
   9b4d4:	e002      	b.n	9b4dc <SystemCoreClockUpdate+0x124>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   9b4d6:	4b12      	ldr	r3, [pc, #72]	; (9b520 <SystemCoreClockUpdate+0x168>)
   9b4d8:	4a15      	ldr	r2, [pc, #84]	; (9b530 <SystemCoreClockUpdate+0x178>)
   9b4da:	601a      	str	r2, [r3, #0]
		}
		break;
   9b4dc:	bf00      	nop
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   9b4de:	4b0e      	ldr	r3, [pc, #56]	; (9b518 <SystemCoreClockUpdate+0x160>)
   9b4e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   9b4e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
   9b4e6:	2b70      	cmp	r3, #112	; 0x70
   9b4e8:	d108      	bne.n	9b4fc <SystemCoreClockUpdate+0x144>
		SystemCoreClock /= 3U;
   9b4ea:	4b0d      	ldr	r3, [pc, #52]	; (9b520 <SystemCoreClockUpdate+0x168>)
   9b4ec:	681b      	ldr	r3, [r3, #0]
   9b4ee:	4a11      	ldr	r2, [pc, #68]	; (9b534 <SystemCoreClockUpdate+0x17c>)
   9b4f0:	fba2 2303 	umull	r2, r3, r2, r3
   9b4f4:	085b      	lsrs	r3, r3, #1
   9b4f6:	4a0a      	ldr	r2, [pc, #40]	; (9b520 <SystemCoreClockUpdate+0x168>)
   9b4f8:	6013      	str	r3, [r2, #0]
   9b4fa:	e009      	b.n	9b510 <SystemCoreClockUpdate+0x158>
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   9b4fc:	4b06      	ldr	r3, [pc, #24]	; (9b518 <SystemCoreClockUpdate+0x160>)
   9b4fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   9b500:	f003 0370 	and.w	r3, r3, #112	; 0x70
   9b504:	091a      	lsrs	r2, r3, #4
   9b506:	4b06      	ldr	r3, [pc, #24]	; (9b520 <SystemCoreClockUpdate+0x168>)
   9b508:	681b      	ldr	r3, [r3, #0]
   9b50a:	40d3      	lsrs	r3, r2
   9b50c:	4a04      	ldr	r2, [pc, #16]	; (9b520 <SystemCoreClockUpdate+0x168>)
   9b50e:	6013      	str	r3, [r2, #0]
			                          PMC_MCKR_PRES_Pos);
	}
}
   9b510:	46bd      	mov	sp, r7
   9b512:	f85d 7b04 	ldr.w	r7, [sp], #4
   9b516:	4770      	bx	lr
   9b518:	400e0600 	.word	0x400e0600
   9b51c:	400e1a10 	.word	0x400e1a10
   9b520:	20070b80 	.word	0x20070b80
   9b524:	00b71b00 	.word	0x00b71b00
   9b528:	003d0900 	.word	0x003d0900
   9b52c:	07ff0000 	.word	0x07ff0000
   9b530:	0e4e1c00 	.word	0x0e4e1c00
   9b534:	aaaaaaab 	.word	0xaaaaaaab

0009b538 <system_init_flash>:

/** 
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
   9b538:	b480      	push	{r7}
   9b53a:	b083      	sub	sp, #12
   9b53c:	af00      	add	r7, sp, #0
   9b53e:	6078      	str	r0, [r7, #4]
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
   9b540:	687b      	ldr	r3, [r7, #4]
   9b542:	4a25      	ldr	r2, [pc, #148]	; (9b5d8 <system_init_flash+0xa0>)
   9b544:	4293      	cmp	r3, r2
   9b546:	d806      	bhi.n	9b556 <system_init_flash+0x1e>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
   9b548:	4b24      	ldr	r3, [pc, #144]	; (9b5dc <system_init_flash+0xa4>)
   9b54a:	2200      	movs	r2, #0
   9b54c:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
   9b54e:	4b24      	ldr	r3, [pc, #144]	; (9b5e0 <system_init_flash+0xa8>)
   9b550:	2200      	movs	r2, #0
   9b552:	601a      	str	r2, [r3, #0]
   9b554:	e03b      	b.n	9b5ce <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
   9b556:	687b      	ldr	r3, [r7, #4]
   9b558:	4a22      	ldr	r2, [pc, #136]	; (9b5e4 <system_init_flash+0xac>)
   9b55a:	4293      	cmp	r3, r2
   9b55c:	d808      	bhi.n	9b570 <system_init_flash+0x38>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
   9b55e:	4b1f      	ldr	r3, [pc, #124]	; (9b5dc <system_init_flash+0xa4>)
   9b560:	f44f 7280 	mov.w	r2, #256	; 0x100
   9b564:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
   9b566:	4b1e      	ldr	r3, [pc, #120]	; (9b5e0 <system_init_flash+0xa8>)
   9b568:	f44f 7280 	mov.w	r2, #256	; 0x100
   9b56c:	601a      	str	r2, [r3, #0]
   9b56e:	e02e      	b.n	9b5ce <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
   9b570:	687b      	ldr	r3, [r7, #4]
   9b572:	4a1d      	ldr	r2, [pc, #116]	; (9b5e8 <system_init_flash+0xb0>)
   9b574:	4293      	cmp	r3, r2
   9b576:	d808      	bhi.n	9b58a <system_init_flash+0x52>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
   9b578:	4b18      	ldr	r3, [pc, #96]	; (9b5dc <system_init_flash+0xa4>)
   9b57a:	f44f 7200 	mov.w	r2, #512	; 0x200
   9b57e:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
   9b580:	4b17      	ldr	r3, [pc, #92]	; (9b5e0 <system_init_flash+0xa8>)
   9b582:	f44f 7200 	mov.w	r2, #512	; 0x200
   9b586:	601a      	str	r2, [r3, #0]
   9b588:	e021      	b.n	9b5ce <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
   9b58a:	687b      	ldr	r3, [r7, #4]
   9b58c:	4a17      	ldr	r2, [pc, #92]	; (9b5ec <system_init_flash+0xb4>)
   9b58e:	4293      	cmp	r3, r2
   9b590:	d808      	bhi.n	9b5a4 <system_init_flash+0x6c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
   9b592:	4b12      	ldr	r3, [pc, #72]	; (9b5dc <system_init_flash+0xa4>)
   9b594:	f44f 7240 	mov.w	r2, #768	; 0x300
   9b598:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
   9b59a:	4b11      	ldr	r3, [pc, #68]	; (9b5e0 <system_init_flash+0xa8>)
   9b59c:	f44f 7240 	mov.w	r2, #768	; 0x300
   9b5a0:	601a      	str	r2, [r3, #0]
   9b5a2:	e014      	b.n	9b5ce <system_init_flash+0x96>
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
   9b5a4:	687b      	ldr	r3, [r7, #4]
   9b5a6:	4a12      	ldr	r2, [pc, #72]	; (9b5f0 <system_init_flash+0xb8>)
   9b5a8:	4293      	cmp	r3, r2
   9b5aa:	d808      	bhi.n	9b5be <system_init_flash+0x86>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   9b5ac:	4b0b      	ldr	r3, [pc, #44]	; (9b5dc <system_init_flash+0xa4>)
   9b5ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
   9b5b2:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
   9b5b4:	4b0a      	ldr	r3, [pc, #40]	; (9b5e0 <system_init_flash+0xa8>)
   9b5b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
   9b5ba:	601a      	str	r2, [r3, #0]
   9b5bc:	e007      	b.n	9b5ce <system_init_flash+0x96>
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
   9b5be:	4b07      	ldr	r3, [pc, #28]	; (9b5dc <system_init_flash+0xa4>)
   9b5c0:	f44f 62a0 	mov.w	r2, #1280	; 0x500
   9b5c4:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
   9b5c6:	4b06      	ldr	r3, [pc, #24]	; (9b5e0 <system_init_flash+0xa8>)
   9b5c8:	f44f 62a0 	mov.w	r2, #1280	; 0x500
   9b5cc:	601a      	str	r2, [r3, #0]
	}
}
   9b5ce:	370c      	adds	r7, #12
   9b5d0:	46bd      	mov	sp, r7
   9b5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
   9b5d6:	4770      	bx	lr
   9b5d8:	0121eabf 	.word	0x0121eabf
   9b5dc:	400e0a00 	.word	0x400e0a00
   9b5e0:	400e0c00 	.word	0x400e0c00
   9b5e4:	02faf07f 	.word	0x02faf07f
   9b5e8:	03d08fff 	.word	0x03d08fff
   9b5ec:	04c4b3ff 	.word	0x04c4b3ff
   9b5f0:	055d4a7f 	.word	0x055d4a7f

0009b5f4 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   9b5f4:	b480      	push	{r7}
   9b5f6:	b085      	sub	sp, #20
   9b5f8:	af00      	add	r7, sp, #0
   9b5fa:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   9b5fc:	4b0b      	ldr	r3, [pc, #44]	; (9b62c <_sbrk+0x38>)
   9b5fe:	681b      	ldr	r3, [r3, #0]
   9b600:	2b00      	cmp	r3, #0
   9b602:	d102      	bne.n	9b60a <_sbrk+0x16>
		heap = (unsigned char *)&_end;
   9b604:	4b09      	ldr	r3, [pc, #36]	; (9b62c <_sbrk+0x38>)
   9b606:	4a0a      	ldr	r2, [pc, #40]	; (9b630 <_sbrk+0x3c>)
   9b608:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   9b60a:	4b08      	ldr	r3, [pc, #32]	; (9b62c <_sbrk+0x38>)
   9b60c:	681b      	ldr	r3, [r3, #0]
   9b60e:	60fb      	str	r3, [r7, #12]

	heap += incr;
   9b610:	4b06      	ldr	r3, [pc, #24]	; (9b62c <_sbrk+0x38>)
   9b612:	681a      	ldr	r2, [r3, #0]
   9b614:	687b      	ldr	r3, [r7, #4]
   9b616:	4413      	add	r3, r2
   9b618:	4a04      	ldr	r2, [pc, #16]	; (9b62c <_sbrk+0x38>)
   9b61a:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
   9b61c:	68fb      	ldr	r3, [r7, #12]
}
   9b61e:	4618      	mov	r0, r3
   9b620:	3714      	adds	r7, #20
   9b622:	46bd      	mov	sp, r7
   9b624:	f85d 7b04 	ldr.w	r7, [sp], #4
   9b628:	4770      	bx	lr
   9b62a:	bf00      	nop
   9b62c:	20071bd4 	.word	0x20071bd4
   9b630:	20074838 	.word	0x20074838

0009b634 <_close>:
{
	return -1;
}

extern int _close(int file)
{
   9b634:	b480      	push	{r7}
   9b636:	b083      	sub	sp, #12
   9b638:	af00      	add	r7, sp, #0
   9b63a:	6078      	str	r0, [r7, #4]
	return -1;
   9b63c:	f04f 33ff 	mov.w	r3, #4294967295
}
   9b640:	4618      	mov	r0, r3
   9b642:	370c      	adds	r7, #12
   9b644:	46bd      	mov	sp, r7
   9b646:	f85d 7b04 	ldr.w	r7, [sp], #4
   9b64a:	4770      	bx	lr

0009b64c <_fstat>:

extern int _fstat(int file, struct stat *st)
{
   9b64c:	b480      	push	{r7}
   9b64e:	b083      	sub	sp, #12
   9b650:	af00      	add	r7, sp, #0
   9b652:	6078      	str	r0, [r7, #4]
   9b654:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
   9b656:	683b      	ldr	r3, [r7, #0]
   9b658:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   9b65c:	605a      	str	r2, [r3, #4]

	return 0;
   9b65e:	2300      	movs	r3, #0
}
   9b660:	4618      	mov	r0, r3
   9b662:	370c      	adds	r7, #12
   9b664:	46bd      	mov	sp, r7
   9b666:	f85d 7b04 	ldr.w	r7, [sp], #4
   9b66a:	4770      	bx	lr

0009b66c <_isatty>:

extern int _isatty(int file)
{
   9b66c:	b480      	push	{r7}
   9b66e:	b083      	sub	sp, #12
   9b670:	af00      	add	r7, sp, #0
   9b672:	6078      	str	r0, [r7, #4]
	return 1;
   9b674:	2301      	movs	r3, #1
}
   9b676:	4618      	mov	r0, r3
   9b678:	370c      	adds	r7, #12
   9b67a:	46bd      	mov	sp, r7
   9b67c:	f85d 7b04 	ldr.w	r7, [sp], #4
   9b680:	4770      	bx	lr
   9b682:	bf00      	nop

0009b684 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
   9b684:	b480      	push	{r7}
   9b686:	b085      	sub	sp, #20
   9b688:	af00      	add	r7, sp, #0
   9b68a:	60f8      	str	r0, [r7, #12]
   9b68c:	60b9      	str	r1, [r7, #8]
   9b68e:	607a      	str	r2, [r7, #4]
	return 0;
   9b690:	2300      	movs	r3, #0
}
   9b692:	4618      	mov	r0, r3
   9b694:	3714      	adds	r7, #20
   9b696:	46bd      	mov	sp, r7
   9b698:	f85d 7b04 	ldr.w	r7, [sp], #4
   9b69c:	4770      	bx	lr
   9b69e:	bf00      	nop

0009b6a0 <Cl_Console_Read_ConsoleMessage_Status>:
 * \return CL_OK on success. CL_WAIT if no message yet
 * \Globals used : Cl_Console_buffer1,Cl_Console_buffer2
 */

Cl_ReturnCodeType Cl_Console_Read_ConsoleMessage_Status(void)
{
   9b6a0:	b480      	push	{r7}
   9b6a2:	b083      	sub	sp, #12
   9b6a4:	af00      	add	r7, sp, #0
	
	//Cl_ReturnCodeType Cl_ConsoleRetval;
	Cl_ReturnCodeType Cl_ConsoleRetval;
	Cl_ConsoleRetval = CL_ERROR;
   9b6a6:	2304      	movs	r3, #4
   9b6a8:	71fb      	strb	r3, [r7, #7]
	
	

	if(Cl_Console_buffer1.ConsoleDatabufferReady)
   9b6aa:	4b0b      	ldr	r3, [pc, #44]	; (9b6d8 <Cl_Console_Read_ConsoleMessage_Status+0x38>)
   9b6ac:	7e1b      	ldrb	r3, [r3, #24]
   9b6ae:	2b00      	cmp	r3, #0
   9b6b0:	d002      	beq.n	9b6b8 <Cl_Console_Read_ConsoleMessage_Status+0x18>
	{
			Cl_ConsoleRetval = CL_OK;
   9b6b2:	2300      	movs	r3, #0
   9b6b4:	71fb      	strb	r3, [r7, #7]
   9b6b6:	e008      	b.n	9b6ca <Cl_Console_Read_ConsoleMessage_Status+0x2a>
	}
	else if(Cl_Console_buffer2.ConsoleDatabufferReady)
   9b6b8:	4b08      	ldr	r3, [pc, #32]	; (9b6dc <Cl_Console_Read_ConsoleMessage_Status+0x3c>)
   9b6ba:	7e1b      	ldrb	r3, [r3, #24]
   9b6bc:	2b00      	cmp	r3, #0
   9b6be:	d002      	beq.n	9b6c6 <Cl_Console_Read_ConsoleMessage_Status+0x26>
	{
		Cl_ConsoleRetval = CL_OK;
   9b6c0:	2300      	movs	r3, #0
   9b6c2:	71fb      	strb	r3, [r7, #7]
   9b6c4:	e001      	b.n	9b6ca <Cl_Console_Read_ConsoleMessage_Status+0x2a>
	}
	else
	{
			Cl_ConsoleRetval =  CL_WAIT;
   9b6c6:	2301      	movs	r3, #1
   9b6c8:	71fb      	strb	r3, [r7, #7]
			//Cl_ConsoleRetval =  10;
			
	}
	return Cl_ConsoleRetval;
   9b6ca:	79fb      	ldrb	r3, [r7, #7]
}
   9b6cc:	4618      	mov	r0, r3
   9b6ce:	370c      	adds	r7, #12
   9b6d0:	46bd      	mov	sp, r7
   9b6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
   9b6d6:	4770      	bx	lr
   9b6d8:	2007240c 	.word	0x2007240c
   9b6dc:	20072278 	.word	0x20072278

0009b6e0 <Cl_Console_Read_Message_Ready_Status>:
 * \void function 
 * \return CL_OK on success. CL_WAIT if no message yet
 * \Globals used : Cl_Console_msgbuffer
 */
Cl_ReturnCodeType  Cl_Console_Read_Message_Ready_Status(void)
{
   9b6e0:	b480      	push	{r7}
   9b6e2:	af00      	add	r7, sp, #0
	
	if(Cl_Console_msgbuffer.ConsoleNewMessageReady == true)
   9b6e4:	4b06      	ldr	r3, [pc, #24]	; (9b700 <Cl_Console_Read_Message_Ready_Status+0x20>)
   9b6e6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
   9b6ea:	2b00      	cmp	r3, #0
   9b6ec:	d001      	beq.n	9b6f2 <Cl_Console_Read_Message_Ready_Status+0x12>
	{

//printf("RDY\n");
	//for (tempcount=0;tempcount<Cl_Console_msgbuffer.Console_databuffer_write_idx;tempcount++)

		return CL_OK;
   9b6ee:	2300      	movs	r3, #0
   9b6f0:	e000      	b.n	9b6f4 <Cl_Console_Read_Message_Ready_Status+0x14>
	}
	else
	{
//		printf("WT\n");
		return CL_WAIT;
   9b6f2:	2301      	movs	r3, #1
	}
	
}
   9b6f4:	4618      	mov	r0, r3
   9b6f6:	46bd      	mov	sp, r7
   9b6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
   9b6fc:	4770      	bx	lr
   9b6fe:	bf00      	nop
   9b700:	200721f4 	.word	0x200721f4

0009b704 <Cl_Console_Read_Message_Console>:
 * \return CL_OK on success. 
 * \Globals used : Cl_Console_msgbuffer,Cl_Console_buffer1,Cl_Console_buffer2
 */

Cl_ReturnCodeType		Cl_Console_Read_Message_Console()
{
   9b704:	b480      	push	{r7}
   9b706:	b083      	sub	sp, #12
   9b708:	af00      	add	r7, sp, #0

	static Cl_Uint8Type tempcount=0;
	Cl_Uint8Type temp;

if((Cl_Console_buffer1.ConsoleDatabufferReady == true) && (Cl_Console_buffer1.ConsoleDatabufferprocessed == false))
   9b70a:	4b54      	ldr	r3, [pc, #336]	; (9b85c <Cl_Console_Read_Message_Console+0x158>)
   9b70c:	7e1b      	ldrb	r3, [r3, #24]
   9b70e:	2b00      	cmp	r3, #0
   9b710:	d03c      	beq.n	9b78c <Cl_Console_Read_Message_Console+0x88>
   9b712:	4b52      	ldr	r3, [pc, #328]	; (9b85c <Cl_Console_Read_Message_Console+0x158>)
   9b714:	7e5b      	ldrb	r3, [r3, #25]
   9b716:	f083 0301 	eor.w	r3, r3, #1
   9b71a:	b2db      	uxtb	r3, r3
   9b71c:	2b00      	cmp	r3, #0
   9b71e:	d035      	beq.n	9b78c <Cl_Console_Read_Message_Console+0x88>
{
						
	for( tempcount=0,temp=0;temp < Cl_Console_buffer1.Console_databuffer_write_idx;tempcount ++,temp++ )
   9b720:	4b4f      	ldr	r3, [pc, #316]	; (9b860 <Cl_Console_Read_Message_Console+0x15c>)
   9b722:	2200      	movs	r2, #0
   9b724:	701a      	strb	r2, [r3, #0]
   9b726:	2300      	movs	r3, #0
   9b728:	71fb      	strb	r3, [r7, #7]
   9b72a:	e010      	b.n	9b74e <Cl_Console_Read_Message_Console+0x4a>
	{
		Cl_Console_msgbuffer.Console_databuffer[tempcount]=Cl_Console_buffer1.Console_databuffer[temp];
   9b72c:	4b4c      	ldr	r3, [pc, #304]	; (9b860 <Cl_Console_Read_Message_Console+0x15c>)
   9b72e:	781b      	ldrb	r3, [r3, #0]
   9b730:	4619      	mov	r1, r3
   9b732:	79fb      	ldrb	r3, [r7, #7]
   9b734:	4a49      	ldr	r2, [pc, #292]	; (9b85c <Cl_Console_Read_Message_Console+0x158>)
   9b736:	5cd2      	ldrb	r2, [r2, r3]
   9b738:	4b4a      	ldr	r3, [pc, #296]	; (9b864 <Cl_Console_Read_Message_Console+0x160>)
   9b73a:	545a      	strb	r2, [r3, r1]
	Cl_Uint8Type temp;

if((Cl_Console_buffer1.ConsoleDatabufferReady == true) && (Cl_Console_buffer1.ConsoleDatabufferprocessed == false))
{
						
	for( tempcount=0,temp=0;temp < Cl_Console_buffer1.Console_databuffer_write_idx;tempcount ++,temp++ )
   9b73c:	4b48      	ldr	r3, [pc, #288]	; (9b860 <Cl_Console_Read_Message_Console+0x15c>)
   9b73e:	781b      	ldrb	r3, [r3, #0]
   9b740:	3301      	adds	r3, #1
   9b742:	b2da      	uxtb	r2, r3
   9b744:	4b46      	ldr	r3, [pc, #280]	; (9b860 <Cl_Console_Read_Message_Console+0x15c>)
   9b746:	701a      	strb	r2, [r3, #0]
   9b748:	79fb      	ldrb	r3, [r7, #7]
   9b74a:	3301      	adds	r3, #1
   9b74c:	71fb      	strb	r3, [r7, #7]
   9b74e:	4b43      	ldr	r3, [pc, #268]	; (9b85c <Cl_Console_Read_Message_Console+0x158>)
   9b750:	7d1b      	ldrb	r3, [r3, #20]
   9b752:	79fa      	ldrb	r2, [r7, #7]
   9b754:	429a      	cmp	r2, r3
   9b756:	d3e9      	bcc.n	9b72c <Cl_Console_Read_Message_Console+0x28>
	{
		Cl_Console_msgbuffer.Console_databuffer[tempcount]=Cl_Console_buffer1.Console_databuffer[temp];
							

	}
	if(!Cl_Console_buffer1.Data_incomplete)
   9b758:	4b40      	ldr	r3, [pc, #256]	; (9b85c <Cl_Console_Read_Message_Console+0x158>)
   9b75a:	7f5b      	ldrb	r3, [r3, #29]
   9b75c:	f083 0301 	eor.w	r3, r3, #1
   9b760:	b2db      	uxtb	r3, r3
   9b762:	2b00      	cmp	r3, #0
   9b764:	d003      	beq.n	9b76e <Cl_Console_Read_Message_Console+0x6a>
	{
			Cl_Console_msgbuffer.ConsoleNewMessageReady = true;
   9b766:	4b3f      	ldr	r3, [pc, #252]	; (9b864 <Cl_Console_Read_Message_Console+0x160>)
   9b768:	2201      	movs	r2, #1
   9b76a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	}
			
			Cl_Console_buffer1.ConsoleDatabufferprocessed = true;
   9b76e:	4b3b      	ldr	r3, [pc, #236]	; (9b85c <Cl_Console_Read_Message_Console+0x158>)
   9b770:	2201      	movs	r2, #1
   9b772:	765a      	strb	r2, [r3, #25]
			Cl_Console_buffer1.ConsoleDatabufferReady=false;
   9b774:	4b39      	ldr	r3, [pc, #228]	; (9b85c <Cl_Console_Read_Message_Console+0x158>)
   9b776:	2200      	movs	r2, #0
   9b778:	761a      	strb	r2, [r3, #24]
			Cl_Console_buffer1.StartSequenceDetected = false;
   9b77a:	4b38      	ldr	r3, [pc, #224]	; (9b85c <Cl_Console_Read_Message_Console+0x158>)
   9b77c:	2200      	movs	r2, #0
   9b77e:	76da      	strb	r2, [r3, #27]
			Cl_Console_buffer1.Console_databuffer_write_idx =0;
   9b780:	4b36      	ldr	r3, [pc, #216]	; (9b85c <Cl_Console_Read_Message_Console+0x158>)
   9b782:	2200      	movs	r2, #0
   9b784:	751a      	strb	r2, [r3, #20]
			Cl_Console_buffer1.BufferEmpty = true;
   9b786:	4b35      	ldr	r3, [pc, #212]	; (9b85c <Cl_Console_Read_Message_Console+0x158>)
   9b788:	2201      	movs	r2, #1
   9b78a:	771a      	strb	r2, [r3, #28]
	
}
if((Cl_Console_buffer2.ConsoleDatabufferReady == true) && (Cl_Console_buffer2.ConsoleDatabufferprocessed == false))
   9b78c:	4b36      	ldr	r3, [pc, #216]	; (9b868 <Cl_Console_Read_Message_Console+0x164>)
   9b78e:	7e1b      	ldrb	r3, [r3, #24]
   9b790:	2b00      	cmp	r3, #0
   9b792:	d05c      	beq.n	9b84e <Cl_Console_Read_Message_Console+0x14a>
   9b794:	4b34      	ldr	r3, [pc, #208]	; (9b868 <Cl_Console_Read_Message_Console+0x164>)
   9b796:	7e5b      	ldrb	r3, [r3, #25]
   9b798:	f083 0301 	eor.w	r3, r3, #1
   9b79c:	b2db      	uxtb	r3, r3
   9b79e:	2b00      	cmp	r3, #0
   9b7a0:	d055      	beq.n	9b84e <Cl_Console_Read_Message_Console+0x14a>
{
	if(!Cl_Console_buffer1.Data_incomplete)
   9b7a2:	4b2e      	ldr	r3, [pc, #184]	; (9b85c <Cl_Console_Read_Message_Console+0x158>)
   9b7a4:	7f5b      	ldrb	r3, [r3, #29]
   9b7a6:	f083 0301 	eor.w	r3, r3, #1
   9b7aa:	b2db      	uxtb	r3, r3
   9b7ac:	2b00      	cmp	r3, #0
   9b7ae:	d002      	beq.n	9b7b6 <Cl_Console_Read_Message_Console+0xb2>
	{
		tempcount=0;
   9b7b0:	4b2b      	ldr	r3, [pc, #172]	; (9b860 <Cl_Console_Read_Message_Console+0x15c>)
   9b7b2:	2200      	movs	r2, #0
   9b7b4:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		// carry on appending to prevdata.
	}
	for( temp=0;temp < Cl_Console_buffer2.Console_databuffer_write_idx;tempcount ++,temp++ )
   9b7b6:	2300      	movs	r3, #0
   9b7b8:	71fb      	strb	r3, [r7, #7]
   9b7ba:	e010      	b.n	9b7de <Cl_Console_Read_Message_Console+0xda>
	{
		Cl_Console_msgbuffer.Console_databuffer[tempcount]=Cl_Console_buffer2.Console_databuffer[temp];
   9b7bc:	4b28      	ldr	r3, [pc, #160]	; (9b860 <Cl_Console_Read_Message_Console+0x15c>)
   9b7be:	781b      	ldrb	r3, [r3, #0]
   9b7c0:	4619      	mov	r1, r3
   9b7c2:	79fb      	ldrb	r3, [r7, #7]
   9b7c4:	4a28      	ldr	r2, [pc, #160]	; (9b868 <Cl_Console_Read_Message_Console+0x164>)
   9b7c6:	5cd2      	ldrb	r2, [r2, r3]
   9b7c8:	4b26      	ldr	r3, [pc, #152]	; (9b864 <Cl_Console_Read_Message_Console+0x160>)
   9b7ca:	545a      	strb	r2, [r3, r1]
	}
	else
	{
		// carry on appending to prevdata.
	}
	for( temp=0;temp < Cl_Console_buffer2.Console_databuffer_write_idx;tempcount ++,temp++ )
   9b7cc:	4b24      	ldr	r3, [pc, #144]	; (9b860 <Cl_Console_Read_Message_Console+0x15c>)
   9b7ce:	781b      	ldrb	r3, [r3, #0]
   9b7d0:	3301      	adds	r3, #1
   9b7d2:	b2da      	uxtb	r2, r3
   9b7d4:	4b22      	ldr	r3, [pc, #136]	; (9b860 <Cl_Console_Read_Message_Console+0x15c>)
   9b7d6:	701a      	strb	r2, [r3, #0]
   9b7d8:	79fb      	ldrb	r3, [r7, #7]
   9b7da:	3301      	adds	r3, #1
   9b7dc:	71fb      	strb	r3, [r7, #7]
   9b7de:	4b22      	ldr	r3, [pc, #136]	; (9b868 <Cl_Console_Read_Message_Console+0x164>)
   9b7e0:	7d1b      	ldrb	r3, [r3, #20]
   9b7e2:	79fa      	ldrb	r2, [r7, #7]
   9b7e4:	429a      	cmp	r2, r3
   9b7e6:	d3e9      	bcc.n	9b7bc <Cl_Console_Read_Message_Console+0xb8>
	{
		Cl_Console_msgbuffer.Console_databuffer[tempcount]=Cl_Console_buffer2.Console_databuffer[temp];

	}
		if(!Cl_Console_buffer2.Data_incomplete)
   9b7e8:	4b1f      	ldr	r3, [pc, #124]	; (9b868 <Cl_Console_Read_Message_Console+0x164>)
   9b7ea:	7f5b      	ldrb	r3, [r3, #29]
   9b7ec:	f083 0301 	eor.w	r3, r3, #1
   9b7f0:	b2db      	uxtb	r3, r3
   9b7f2:	2b00      	cmp	r3, #0
   9b7f4:	d003      	beq.n	9b7fe <Cl_Console_Read_Message_Console+0xfa>
		{
			Cl_Console_msgbuffer.ConsoleNewMessageReady = true;
   9b7f6:	4b1b      	ldr	r3, [pc, #108]	; (9b864 <Cl_Console_Read_Message_Console+0x160>)
   9b7f8:	2201      	movs	r2, #1
   9b7fa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		}
	
		
			Cl_Console_buffer2.ConsoleDatabufferprocessed = true;
   9b7fe:	4b1a      	ldr	r3, [pc, #104]	; (9b868 <Cl_Console_Read_Message_Console+0x164>)
   9b800:	2201      	movs	r2, #1
   9b802:	765a      	strb	r2, [r3, #25]
			Cl_Console_buffer2.ConsoleDatabufferReady=false;
   9b804:	4b18      	ldr	r3, [pc, #96]	; (9b868 <Cl_Console_Read_Message_Console+0x164>)
   9b806:	2200      	movs	r2, #0
   9b808:	761a      	strb	r2, [r3, #24]
			Cl_Console_buffer2.Console_databuffer_write_idx =0;
   9b80a:	4b17      	ldr	r3, [pc, #92]	; (9b868 <Cl_Console_Read_Message_Console+0x164>)
   9b80c:	2200      	movs	r2, #0
   9b80e:	751a      	strb	r2, [r3, #20]
			Cl_Console_buffer2.StartSequenceDetected = false;
   9b810:	4b15      	ldr	r3, [pc, #84]	; (9b868 <Cl_Console_Read_Message_Console+0x164>)
   9b812:	2200      	movs	r2, #0
   9b814:	76da      	strb	r2, [r3, #27]
			Cl_Console_buffer2.BufferEmpty = true;
   9b816:	4b14      	ldr	r3, [pc, #80]	; (9b868 <Cl_Console_Read_Message_Console+0x164>)
   9b818:	2201      	movs	r2, #1
   9b81a:	771a      	strb	r2, [r3, #28]
			if(Cl_Console_buffer1.Data_incomplete)
   9b81c:	4b0f      	ldr	r3, [pc, #60]	; (9b85c <Cl_Console_Read_Message_Console+0x158>)
   9b81e:	7f5b      	ldrb	r3, [r3, #29]
   9b820:	2b00      	cmp	r3, #0
   9b822:	d014      	beq.n	9b84e <Cl_Console_Read_Message_Console+0x14a>
			{
				Cl_Console_buffer1.ConsoleDatabufferprocessed = true;
   9b824:	4b0d      	ldr	r3, [pc, #52]	; (9b85c <Cl_Console_Read_Message_Console+0x158>)
   9b826:	2201      	movs	r2, #1
   9b828:	765a      	strb	r2, [r3, #25]
				Cl_Console_buffer1.ConsoleDatabufferReady=false;
   9b82a:	4b0c      	ldr	r3, [pc, #48]	; (9b85c <Cl_Console_Read_Message_Console+0x158>)
   9b82c:	2200      	movs	r2, #0
   9b82e:	761a      	strb	r2, [r3, #24]
				Cl_Console_buffer1.StartSequenceDetected = false;
   9b830:	4b0a      	ldr	r3, [pc, #40]	; (9b85c <Cl_Console_Read_Message_Console+0x158>)
   9b832:	2200      	movs	r2, #0
   9b834:	76da      	strb	r2, [r3, #27]
				Cl_Console_buffer1.Data_incomplete = false;
   9b836:	4b09      	ldr	r3, [pc, #36]	; (9b85c <Cl_Console_Read_Message_Console+0x158>)
   9b838:	2200      	movs	r2, #0
   9b83a:	775a      	strb	r2, [r3, #29]
				Cl_Console_buffer2.Data_incomplete = false;
   9b83c:	4b0a      	ldr	r3, [pc, #40]	; (9b868 <Cl_Console_Read_Message_Console+0x164>)
   9b83e:	2200      	movs	r2, #0
   9b840:	775a      	strb	r2, [r3, #29]
				Cl_Console_buffer1.Console_databuffer_write_idx =0;
   9b842:	4b06      	ldr	r3, [pc, #24]	; (9b85c <Cl_Console_Read_Message_Console+0x158>)
   9b844:	2200      	movs	r2, #0
   9b846:	751a      	strb	r2, [r3, #20]
				Cl_Console_buffer1.BufferEmpty = true;
   9b848:	4b04      	ldr	r3, [pc, #16]	; (9b85c <Cl_Console_Read_Message_Console+0x158>)
   9b84a:	2201      	movs	r2, #1
   9b84c:	771a      	strb	r2, [r3, #28]
			}
}


	return CL_OK;
   9b84e:	2300      	movs	r3, #0
}
   9b850:	4618      	mov	r0, r3
   9b852:	370c      	adds	r7, #12
   9b854:	46bd      	mov	sp, r7
   9b856:	f85d 7b04 	ldr.w	r7, [sp], #4
   9b85a:	4770      	bx	lr
   9b85c:	2007240c 	.word	0x2007240c
   9b860:	20071bde 	.word	0x20071bde
   9b864:	200721f4 	.word	0x200721f4
   9b868:	20072278 	.word	0x20072278

0009b86c <Cl_Mac_Create_ConsoleEvent>:
 * \return CL_OK on success. 
 * \Globals used : Cl_Console_msgbuffer,Cl_Console_buffer1,Cl_Console_buffer2
 */

Cl_ReturnCodeType	 Cl_Mac_Create_ConsoleEvent(void)
{
   9b86c:	b580      	push	{r7, lr}
   9b86e:	b084      	sub	sp, #16
   9b870:	af00      	add	r7, sp, #0
//	Cl_Uint8Type start1,start2,command,datasize,data1,data2,end1,end2;
	//Cl_ConsoleMsgType Cl_ConsoleMsg;
	static Cl_Uint8Type* Cl_cmdptr;
	Cl_Uint8Type tempcount,packet_size =0, *dataptr= NULL, *msgdataptr = NULL;
   9b872:	2300      	movs	r3, #0
   9b874:	70fb      	strb	r3, [r7, #3]
   9b876:	2300      	movs	r3, #0
   9b878:	60bb      	str	r3, [r7, #8]
   9b87a:	2300      	movs	r3, #0
   9b87c:	607b      	str	r3, [r7, #4]
	Cl_Mac_EventsType MacEvent;
	//printf("#/n");
	
	
			
			Cl_cmdptr = (Cl_Uint8Type*)&Cl_Console_msgbuffer.Console_databuffer;
   9b87e:	4b46      	ldr	r3, [pc, #280]	; (9b998 <Cl_Mac_Create_ConsoleEvent+0x12c>)
   9b880:	4a46      	ldr	r2, [pc, #280]	; (9b99c <Cl_Mac_Create_ConsoleEvent+0x130>)
   9b882:	601a      	str	r2, [r3, #0]
				
			Cl_ConsoleRxMsg.command = Cl_Console_msgbuffer.Console_databuffer[0];
   9b884:	4b45      	ldr	r3, [pc, #276]	; (9b99c <Cl_Mac_Create_ConsoleEvent+0x130>)
   9b886:	781a      	ldrb	r2, [r3, #0]
   9b888:	4b45      	ldr	r3, [pc, #276]	; (9b9a0 <Cl_Mac_Create_ConsoleEvent+0x134>)
   9b88a:	709a      	strb	r2, [r3, #2]
			Cl_ConsoleRxMsg.datasize = Cl_Console_msgbuffer.Console_databuffer[1];
   9b88c:	4b43      	ldr	r3, [pc, #268]	; (9b99c <Cl_Mac_Create_ConsoleEvent+0x130>)
   9b88e:	785a      	ldrb	r2, [r3, #1]
   9b890:	4b43      	ldr	r3, [pc, #268]	; (9b9a0 <Cl_Mac_Create_ConsoleEvent+0x134>)
   9b892:	70da      	strb	r2, [r3, #3]
			msgdataptr = &Cl_Console_msgbuffer.Console_databuffer[2];
   9b894:	4b43      	ldr	r3, [pc, #268]	; (9b9a4 <Cl_Mac_Create_ConsoleEvent+0x138>)
   9b896:	607b      	str	r3, [r7, #4]
			dataptr = &Cl_ConsoleRxMsg.data.byte[0];
   9b898:	4b43      	ldr	r3, [pc, #268]	; (9b9a8 <Cl_Mac_Create_ConsoleEvent+0x13c>)
   9b89a:	60bb      	str	r3, [r7, #8]
			for(tempcount=0;tempcount<Cl_ConsoleRxMsg.datasize;tempcount++)
   9b89c:	2300      	movs	r3, #0
   9b89e:	73fb      	strb	r3, [r7, #15]
   9b8a0:	e00c      	b.n	9b8bc <Cl_Mac_Create_ConsoleEvent+0x50>
			{
				 *dataptr = *msgdataptr ;
   9b8a2:	687b      	ldr	r3, [r7, #4]
   9b8a4:	781a      	ldrb	r2, [r3, #0]
   9b8a6:	68bb      	ldr	r3, [r7, #8]
   9b8a8:	701a      	strb	r2, [r3, #0]
				 dataptr++;
   9b8aa:	68bb      	ldr	r3, [r7, #8]
   9b8ac:	3301      	adds	r3, #1
   9b8ae:	60bb      	str	r3, [r7, #8]
				 msgdataptr++;
   9b8b0:	687b      	ldr	r3, [r7, #4]
   9b8b2:	3301      	adds	r3, #1
   9b8b4:	607b      	str	r3, [r7, #4]
				
			Cl_ConsoleRxMsg.command = Cl_Console_msgbuffer.Console_databuffer[0];
			Cl_ConsoleRxMsg.datasize = Cl_Console_msgbuffer.Console_databuffer[1];
			msgdataptr = &Cl_Console_msgbuffer.Console_databuffer[2];
			dataptr = &Cl_ConsoleRxMsg.data.byte[0];
			for(tempcount=0;tempcount<Cl_ConsoleRxMsg.datasize;tempcount++)
   9b8b6:	7bfb      	ldrb	r3, [r7, #15]
   9b8b8:	3301      	adds	r3, #1
   9b8ba:	73fb      	strb	r3, [r7, #15]
   9b8bc:	4b38      	ldr	r3, [pc, #224]	; (9b9a0 <Cl_Mac_Create_ConsoleEvent+0x134>)
   9b8be:	78db      	ldrb	r3, [r3, #3]
   9b8c0:	7bfa      	ldrb	r2, [r7, #15]
   9b8c2:	429a      	cmp	r2, r3
   9b8c4:	d3ed      	bcc.n	9b8a2 <Cl_Mac_Create_ConsoleEvent+0x36>
			}
			

						

			if(Cl_ConsoleRxMsg.command != CON_RX_COMMAND_ACK)
   9b8c6:	4b36      	ldr	r3, [pc, #216]	; (9b9a0 <Cl_Mac_Create_ConsoleEvent+0x134>)
   9b8c8:	789b      	ldrb	r3, [r3, #2]
   9b8ca:	2b04      	cmp	r3, #4
   9b8cc:	d00f      	beq.n	9b8ee <Cl_Mac_Create_ConsoleEvent+0x82>
			//	test_count--;
			//	if(test_count  != 0)
			//	{
			//		PIOC->PIO_SODR = 1 << 28; //test
			//	}
				Cl_Cosnsole_MsgAcknlowledge();
   9b8ce:	4b37      	ldr	r3, [pc, #220]	; (9b9ac <Cl_Mac_Create_ConsoleEvent+0x140>)
   9b8d0:	4798      	blx	r3
				test_counter++;
   9b8d2:	4b37      	ldr	r3, [pc, #220]	; (9b9b0 <Cl_Mac_Create_ConsoleEvent+0x144>)
   9b8d4:	881b      	ldrh	r3, [r3, #0]
   9b8d6:	3301      	adds	r3, #1
   9b8d8:	b29a      	uxth	r2, r3
   9b8da:	4b35      	ldr	r3, [pc, #212]	; (9b9b0 <Cl_Mac_Create_ConsoleEvent+0x144>)
   9b8dc:	801a      	strh	r2, [r3, #0]
				if (test_counter >= 1000)
   9b8de:	4b34      	ldr	r3, [pc, #208]	; (9b9b0 <Cl_Mac_Create_ConsoleEvent+0x144>)
   9b8e0:	881b      	ldrh	r3, [r3, #0]
   9b8e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   9b8e6:	d302      	bcc.n	9b8ee <Cl_Mac_Create_ConsoleEvent+0x82>
				{

				//	DD_SET_PIO(PD,7); // test
				//	PIOB->PIO_SODR = 1 << 25; //test
				//	PIOC->PIO_CODR = 1 << 29; //test
					test_counter = 0;
   9b8e8:	4b31      	ldr	r3, [pc, #196]	; (9b9b0 <Cl_Mac_Create_ConsoleEvent+0x144>)
   9b8ea:	2200      	movs	r2, #0
   9b8ec:	801a      	strh	r2, [r3, #0]
			{
				// do nothing
				//	return CL_OK;
			}

			 if(Cl_ConsoleRxMsg.command == CON_RX_COMMAND_TEST_HARNESS)
   9b8ee:	4b2c      	ldr	r3, [pc, #176]	; (9b9a0 <Cl_Mac_Create_ConsoleEvent+0x134>)
   9b8f0:	789b      	ldrb	r3, [r3, #2]
   9b8f2:	2b17      	cmp	r3, #23
   9b8f4:	d103      	bne.n	9b8fe <Cl_Mac_Create_ConsoleEvent+0x92>
			 		{
					
					cl_testharnesscommandhandler(&Cl_ConsoleRxMsg);	 
   9b8f6:	482a      	ldr	r0, [pc, #168]	; (9b9a0 <Cl_Mac_Create_ConsoleEvent+0x134>)
   9b8f8:	4b2e      	ldr	r3, [pc, #184]	; (9b9b4 <Cl_Mac_Create_ConsoleEvent+0x148>)
   9b8fa:	4798      	blx	r3
   9b8fc:	e046      	b.n	9b98c <Cl_Mac_Create_ConsoleEvent+0x120>
					}
			else
			{
			
			Cl_ConsoleRxMsg.msgready = true;
   9b8fe:	4b28      	ldr	r3, [pc, #160]	; (9b9a0 <Cl_Mac_Create_ConsoleEvent+0x134>)
   9b900:	2201      	movs	r2, #1
   9b902:	761a      	strb	r2, [r3, #24]
			Cl_Console_msgbuffer.ConsoleNewMessageReady = false;
   9b904:	4b25      	ldr	r3, [pc, #148]	; (9b99c <Cl_Mac_Create_ConsoleEvent+0x130>)
   9b906:	2200      	movs	r2, #0
   9b908:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
		
			Cl_Console_ConvertConsoleEvent_toMacEvent(Cl_ConsoleRxMsg.command,&MacEvent);
   9b90c:	4b24      	ldr	r3, [pc, #144]	; (9b9a0 <Cl_Mac_Create_ConsoleEvent+0x134>)
   9b90e:	789a      	ldrb	r2, [r3, #2]
   9b910:	1cbb      	adds	r3, r7, #2
   9b912:	4610      	mov	r0, r2
   9b914:	4619      	mov	r1, r3
   9b916:	4b28      	ldr	r3, [pc, #160]	; (9b9b8 <Cl_Mac_Create_ConsoleEvent+0x14c>)
   9b918:	4798      	blx	r3
			Cl_MacEvent = MacEvent;
   9b91a:	78ba      	ldrb	r2, [r7, #2]
   9b91c:	4b27      	ldr	r3, [pc, #156]	; (9b9bc <Cl_Mac_Create_ConsoleEvent+0x150>)
   9b91e:	701a      	strb	r2, [r3, #0]
			Cl_MacNewEvent = true;
   9b920:	4b27      	ldr	r3, [pc, #156]	; (9b9c0 <Cl_Mac_Create_ConsoleEvent+0x154>)
   9b922:	2201      	movs	r2, #1
   9b924:	701a      	strb	r2, [r3, #0]
			if( Cl_MacEventQueue3.Cl_MacNewEventcount <= MAC_EVENT_COUNT_MAX )	
   9b926:	4b27      	ldr	r3, [pc, #156]	; (9b9c4 <Cl_Mac_Create_ConsoleEvent+0x158>)
   9b928:	781b      	ldrb	r3, [r3, #0]
   9b92a:	2b0a      	cmp	r3, #10
   9b92c:	d82e      	bhi.n	9b98c <Cl_Mac_Create_ConsoleEvent+0x120>
			 {
				 Cl_MacEventQueue3.Cl_MacEvent[Cl_MacEventQueue3.Cl_MacNewEventcount] = MacEvent ;
   9b92e:	4b25      	ldr	r3, [pc, #148]	; (9b9c4 <Cl_Mac_Create_ConsoleEvent+0x158>)
   9b930:	781b      	ldrb	r3, [r3, #0]
   9b932:	4619      	mov	r1, r3
   9b934:	78ba      	ldrb	r2, [r7, #2]
   9b936:	4b23      	ldr	r3, [pc, #140]	; (9b9c4 <Cl_Mac_Create_ConsoleEvent+0x158>)
   9b938:	440b      	add	r3, r1
   9b93a:	709a      	strb	r2, [r3, #2]
				 Cl_MacEventQueue3.Cl_MacNewEvent = true;
   9b93c:	4b21      	ldr	r3, [pc, #132]	; (9b9c4 <Cl_Mac_Create_ConsoleEvent+0x158>)
   9b93e:	2201      	movs	r2, #1
   9b940:	705a      	strb	r2, [r3, #1]
				 Cl_MacEventQueue3.Cl_MacNewEventcount++;
   9b942:	4b20      	ldr	r3, [pc, #128]	; (9b9c4 <Cl_Mac_Create_ConsoleEvent+0x158>)
   9b944:	781b      	ldrb	r3, [r3, #0]
   9b946:	3301      	adds	r3, #1
   9b948:	b2da      	uxtb	r2, r3
   9b94a:	4b1e      	ldr	r3, [pc, #120]	; (9b9c4 <Cl_Mac_Create_ConsoleEvent+0x158>)
   9b94c:	701a      	strb	r2, [r3, #0]
				 
				msgdataptr = &Cl_Console_msgbuffer.Console_databuffer[2];
   9b94e:	4b15      	ldr	r3, [pc, #84]	; (9b9a4 <Cl_Mac_Create_ConsoleEvent+0x138>)
   9b950:	607b      	str	r3, [r7, #4]
				dataptr = &Cl_MacEventQueue3.Cl_MacEventData[Cl_MacEventQueue3.Cl_MacNewEventcount][0];
   9b952:	4b1c      	ldr	r3, [pc, #112]	; (9b9c4 <Cl_Mac_Create_ConsoleEvent+0x158>)
   9b954:	781b      	ldrb	r3, [r3, #0]
   9b956:	3301      	adds	r3, #1
   9b958:	00db      	lsls	r3, r3, #3
   9b95a:	4a1a      	ldr	r2, [pc, #104]	; (9b9c4 <Cl_Mac_Create_ConsoleEvent+0x158>)
   9b95c:	4413      	add	r3, r2
   9b95e:	3304      	adds	r3, #4
   9b960:	60bb      	str	r3, [r7, #8]
				for(tempcount=0;tempcount<Cl_ConsoleRxMsg.datasize;tempcount++)
   9b962:	2300      	movs	r3, #0
   9b964:	73fb      	strb	r3, [r7, #15]
   9b966:	e00c      	b.n	9b982 <Cl_Mac_Create_ConsoleEvent+0x116>
				{
					*dataptr = *msgdataptr ;
   9b968:	687b      	ldr	r3, [r7, #4]
   9b96a:	781a      	ldrb	r2, [r3, #0]
   9b96c:	68bb      	ldr	r3, [r7, #8]
   9b96e:	701a      	strb	r2, [r3, #0]
					dataptr++;
   9b970:	68bb      	ldr	r3, [r7, #8]
   9b972:	3301      	adds	r3, #1
   9b974:	60bb      	str	r3, [r7, #8]
					msgdataptr++;
   9b976:	687b      	ldr	r3, [r7, #4]
   9b978:	3301      	adds	r3, #1
   9b97a:	607b      	str	r3, [r7, #4]
				 Cl_MacEventQueue3.Cl_MacNewEvent = true;
				 Cl_MacEventQueue3.Cl_MacNewEventcount++;
				 
				msgdataptr = &Cl_Console_msgbuffer.Console_databuffer[2];
				dataptr = &Cl_MacEventQueue3.Cl_MacEventData[Cl_MacEventQueue3.Cl_MacNewEventcount][0];
				for(tempcount=0;tempcount<Cl_ConsoleRxMsg.datasize;tempcount++)
   9b97c:	7bfb      	ldrb	r3, [r7, #15]
   9b97e:	3301      	adds	r3, #1
   9b980:	73fb      	strb	r3, [r7, #15]
   9b982:	4b07      	ldr	r3, [pc, #28]	; (9b9a0 <Cl_Mac_Create_ConsoleEvent+0x134>)
   9b984:	78db      	ldrb	r3, [r3, #3]
   9b986:	7bfa      	ldrb	r2, [r7, #15]
   9b988:	429a      	cmp	r2, r3
   9b98a:	d3ed      	bcc.n	9b968 <Cl_Mac_Create_ConsoleEvent+0xfc>
			}
	#endif
			 		
	}
		
		return CL_OK;
   9b98c:	2300      	movs	r3, #0
}
   9b98e:	4618      	mov	r0, r3
   9b990:	3710      	adds	r7, #16
   9b992:	46bd      	mov	sp, r7
   9b994:	bd80      	pop	{r7, pc}
   9b996:	bf00      	nop
   9b998:	20071be0 	.word	0x20071be0
   9b99c:	200721f4 	.word	0x200721f4
   9b9a0:	200723f0 	.word	0x200723f0
   9b9a4:	200721f6 	.word	0x200721f6
   9b9a8:	200723f4 	.word	0x200723f4
   9b9ac:	0009b9c9 	.word	0x0009b9c9
   9b9b0:	20071bda 	.word	0x20071bda
   9b9b4:	000902a1 	.word	0x000902a1
   9b9b8:	0009bbc5 	.word	0x0009bbc5
   9b9bc:	200719e6 	.word	0x200719e6
   9b9c0:	200719e8 	.word	0x200719e8
   9b9c4:	2007242c 	.word	0x2007242c

0009b9c8 <Cl_Cosnsole_MsgAcknlowledge>:



Cl_ReturnCodeType Cl_Cosnsole_MsgAcknlowledge()
   
	{
   9b9c8:	b580      	push	{r7, lr}
   9b9ca:	b082      	sub	sp, #8
   9b9cc:	af00      	add	r7, sp, #0
		Cl_Uint8Type temp;

		cl_wait(1);
   9b9ce:	2001      	movs	r0, #1
   9b9d0:	4b19      	ldr	r3, [pc, #100]	; (9ba38 <Cl_Cosnsole_MsgAcknlowledge+0x70>)
   9b9d2:	4798      	blx	r3
		Cl_ConsoleTxMsg[0] =	CL_CONSOLEMSG_STARTBYTE1;
   9b9d4:	4b19      	ldr	r3, [pc, #100]	; (9ba3c <Cl_Cosnsole_MsgAcknlowledge+0x74>)
   9b9d6:	22cc      	movs	r2, #204	; 0xcc
   9b9d8:	701a      	strb	r2, [r3, #0]
		Cl_ConsoleTxMsg[1] =	CL_CONSOLEMSG_STARTBYTE2;
   9b9da:	4b18      	ldr	r3, [pc, #96]	; (9ba3c <Cl_Cosnsole_MsgAcknlowledge+0x74>)
   9b9dc:	22dd      	movs	r2, #221	; 0xdd
   9b9de:	705a      	strb	r2, [r3, #1]
		Cl_ConsoleTxMsg[2]=		CON_TX_COMMAND_ACK;
   9b9e0:	4b16      	ldr	r3, [pc, #88]	; (9ba3c <Cl_Cosnsole_MsgAcknlowledge+0x74>)
   9b9e2:	2204      	movs	r2, #4
   9b9e4:	709a      	strb	r2, [r3, #2]
		Cl_ConsoleTxMsg[3] = 1; //size of data
   9b9e6:	4b15      	ldr	r3, [pc, #84]	; (9ba3c <Cl_Cosnsole_MsgAcknlowledge+0x74>)
   9b9e8:	2201      	movs	r2, #1
   9b9ea:	70da      	strb	r2, [r3, #3]
		Cl_ConsoleTxMsg[4]= Cl_ConsoleRxMsg.command;
   9b9ec:	4b14      	ldr	r3, [pc, #80]	; (9ba40 <Cl_Cosnsole_MsgAcknlowledge+0x78>)
   9b9ee:	789a      	ldrb	r2, [r3, #2]
   9b9f0:	4b12      	ldr	r3, [pc, #72]	; (9ba3c <Cl_Cosnsole_MsgAcknlowledge+0x74>)
   9b9f2:	711a      	strb	r2, [r3, #4]
		Cl_ConsoleTxMsg[5] =	CL_CONSOLEMSG_STOPBYTE1;
   9b9f4:	4b11      	ldr	r3, [pc, #68]	; (9ba3c <Cl_Cosnsole_MsgAcknlowledge+0x74>)
   9b9f6:	22ee      	movs	r2, #238	; 0xee
   9b9f8:	715a      	strb	r2, [r3, #5]
		Cl_ConsoleTxMsg[6] =	CL_CONSOLEMSG_STOPBYTE2;
   9b9fa:	4b10      	ldr	r3, [pc, #64]	; (9ba3c <Cl_Cosnsole_MsgAcknlowledge+0x74>)
   9b9fc:	22bb      	movs	r2, #187	; 0xbb
   9b9fe:	719a      	strb	r2, [r3, #6]
		for (temp=0;temp<7;)
   9ba00:	2300      	movs	r3, #0
   9ba02:	71fb      	strb	r3, [r7, #7]
   9ba04:	e00f      	b.n	9ba26 <Cl_Cosnsole_MsgAcknlowledge+0x5e>
		{
				cl_console_sync = 1;
   9ba06:	4b0f      	ldr	r3, [pc, #60]	; (9ba44 <Cl_Cosnsole_MsgAcknlowledge+0x7c>)
   9ba08:	2201      	movs	r2, #1
   9ba0a:	701a      	strb	r2, [r3, #0]
			if(! uart_write(CONF_UART,Cl_ConsoleTxMsg[temp]))
   9ba0c:	79fb      	ldrb	r3, [r7, #7]
   9ba0e:	4a0b      	ldr	r2, [pc, #44]	; (9ba3c <Cl_Cosnsole_MsgAcknlowledge+0x74>)
   9ba10:	5cd3      	ldrb	r3, [r2, r3]
   9ba12:	480d      	ldr	r0, [pc, #52]	; (9ba48 <Cl_Cosnsole_MsgAcknlowledge+0x80>)
   9ba14:	4619      	mov	r1, r3
   9ba16:	4b0d      	ldr	r3, [pc, #52]	; (9ba4c <Cl_Cosnsole_MsgAcknlowledge+0x84>)
   9ba18:	4798      	blx	r3
   9ba1a:	4603      	mov	r3, r0
   9ba1c:	2b00      	cmp	r3, #0
   9ba1e:	d102      	bne.n	9ba26 <Cl_Cosnsole_MsgAcknlowledge+0x5e>
			{
				temp++;				
   9ba20:	79fb      	ldrb	r3, [r7, #7]
   9ba22:	3301      	adds	r3, #1
   9ba24:	71fb      	strb	r3, [r7, #7]
		Cl_ConsoleTxMsg[2]=		CON_TX_COMMAND_ACK;
		Cl_ConsoleTxMsg[3] = 1; //size of data
		Cl_ConsoleTxMsg[4]= Cl_ConsoleRxMsg.command;
		Cl_ConsoleTxMsg[5] =	CL_CONSOLEMSG_STOPBYTE1;
		Cl_ConsoleTxMsg[6] =	CL_CONSOLEMSG_STOPBYTE2;
		for (temp=0;temp<7;)
   9ba26:	79fb      	ldrb	r3, [r7, #7]
   9ba28:	2b06      	cmp	r3, #6
   9ba2a:	d9ec      	bls.n	9ba06 <Cl_Cosnsole_MsgAcknlowledge+0x3e>
			if(! uart_write(CONF_UART,Cl_ConsoleTxMsg[temp]))
			{
				temp++;				
			}
		}
	return CL_OK;
   9ba2c:	2300      	movs	r3, #0
}
   9ba2e:	4618      	mov	r0, r3
   9ba30:	3708      	adds	r7, #8
   9ba32:	46bd      	mov	sp, r7
   9ba34:	bd80      	pop	{r7, pc}
   9ba36:	bf00      	nop
   9ba38:	00093195 	.word	0x00093195
   9ba3c:	20072298 	.word	0x20072298
   9ba40:	200723f0 	.word	0x200723f0
   9ba44:	20071bdd 	.word	0x20071bdd
   9ba48:	400e0800 	.word	0x400e0800
   9ba4c:	0009b009 	.word	0x0009b009

0009ba50 <Cl_SendDatatoconsole>:
 * \return CL_OK on success. 
 * \Globals used : 
 */

Cl_ReturnCodeType Cl_SendDatatoconsole(Cl_ConsoleTxCommandtype command, Cl_Uint8Type* data,Cl_Uint8Type datasize)
{
   9ba50:	b580      	push	{r7, lr}
   9ba52:	b086      	sub	sp, #24
   9ba54:	af00      	add	r7, sp, #0
   9ba56:	4603      	mov	r3, r0
   9ba58:	6039      	str	r1, [r7, #0]
   9ba5a:	71fb      	strb	r3, [r7, #7]
   9ba5c:	4613      	mov	r3, r2
   9ba5e:	71bb      	strb	r3, [r7, #6]
	Cl_Uint8Type tempcount=0 , temp =4 ;
   9ba60:	2300      	movs	r3, #0
   9ba62:	75fb      	strb	r3, [r7, #23]
   9ba64:	2304      	movs	r3, #4
   9ba66:	75bb      	strb	r3, [r7, #22]
	Cl_Uint8Type packet_size = 0;
   9ba68:	2300      	movs	r3, #0
   9ba6a:	757b      	strb	r3, [r7, #21]
	Cl_Uint8Type *dataptr=NULL, *msgdataptr =NULL;
   9ba6c:	2300      	movs	r3, #0
   9ba6e:	613b      	str	r3, [r7, #16]
   9ba70:	2300      	movs	r3, #0
   9ba72:	60fb      	str	r3, [r7, #12]
	static Cl_Uint8Type testcnt =0;
	


		
			if(( CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT == command)|| ( command == CON_TX_COMMAND_PRINTDATA) ||(command == CON_TX_COMMAND_PRINTTEXT)  || (command == CON_TX_COMMAND_COMMAND_SCRIPT_BULK_PRINT))
   9ba74:	79fb      	ldrb	r3, [r7, #7]
   9ba76:	2b37      	cmp	r3, #55	; 0x37
   9ba78:	d008      	beq.n	9ba8c <Cl_SendDatatoconsole+0x3c>
   9ba7a:	79fb      	ldrb	r3, [r7, #7]
   9ba7c:	2b19      	cmp	r3, #25
   9ba7e:	d005      	beq.n	9ba8c <Cl_SendDatatoconsole+0x3c>
   9ba80:	79fb      	ldrb	r3, [r7, #7]
   9ba82:	2b18      	cmp	r3, #24
   9ba84:	d002      	beq.n	9ba8c <Cl_SendDatatoconsole+0x3c>
   9ba86:	79fb      	ldrb	r3, [r7, #7]
   9ba88:	2b3e      	cmp	r3, #62	; 0x3e
   9ba8a:	d101      	bne.n	9ba90 <Cl_SendDatatoconsole+0x40>
		//	if(( CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT == command)|| ( command == CON_TX_COMMAND_PRINTDATA) ||(command == CON_TX_COMMAND_PRINTTEXT) ||(command == CON_TX_COMMAND_COMMAND_SYSTEM_STATE )  || (command == CON_TX_COMMAND_COMMAND_SCRIPT_BULK_PRINT) || (command == CON_TX_COMMAND_ALARM))
		
		//	if(( CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT == command)|| ( command == CON_TX_COMMAND_PRINTDATA) ||(command == CON_TX_COMMAND_PRINTTEXT) ) //|| (command == CON_TX_COMMAND_ALARM)
			{
				return;  /**************  To be returned for proper working with tablet ******/////  comment return to work with script
   9ba8c:	bf00      	nop
   9ba8e:	e07f      	b.n	9bb90 <Cl_SendDatatoconsole+0x140>
		}
		
		
	}
	
	cur_command = command;
   9ba90:	4a41      	ldr	r2, [pc, #260]	; (9bb98 <Cl_SendDatatoconsole+0x148>)
   9ba92:	79fb      	ldrb	r3, [r7, #7]
   9ba94:	7013      	strb	r3, [r2, #0]
	cur_data = data;
   9ba96:	683b      	ldr	r3, [r7, #0]
   9ba98:	b2da      	uxtb	r2, r3
   9ba9a:	4b40      	ldr	r3, [pc, #256]	; (9bb9c <Cl_SendDatatoconsole+0x14c>)
   9ba9c:	701a      	strb	r2, [r3, #0]
	cur_datasize = datasize;
   9ba9e:	4a40      	ldr	r2, [pc, #256]	; (9bba0 <Cl_SendDatatoconsole+0x150>)
   9baa0:	79bb      	ldrb	r3, [r7, #6]
   9baa2:	7013      	strb	r3, [r2, #0]
	
	
	if (CONT_TX_COMMAND_BLOODPUMP_OFF == command)
   9baa4:	79fb      	ldrb	r3, [r7, #7]
   9baa6:	2b36      	cmp	r3, #54	; 0x36
   9baa8:	d102      	bne.n	9bab0 <Cl_SendDatatoconsole+0x60>
	{
		syncdone = true;
   9baaa:	4b3e      	ldr	r3, [pc, #248]	; (9bba4 <Cl_SendDatatoconsole+0x154>)
   9baac:	2201      	movs	r2, #1
   9baae:	701a      	strb	r2, [r3, #0]
	}

	if(datasize>0)
   9bab0:	79bb      	ldrb	r3, [r7, #6]
   9bab2:	2b00      	cmp	r3, #0
   9bab4:	d004      	beq.n	9bac0 <Cl_SendDatatoconsole+0x70>
	{
		if(data != NULL)
   9bab6:	683b      	ldr	r3, [r7, #0]
   9bab8:	2b00      	cmp	r3, #0
   9baba:	d001      	beq.n	9bac0 <Cl_SendDatatoconsole+0x70>
		{
			dataptr = data;	
   9babc:	683b      	ldr	r3, [r7, #0]
   9babe:	613b      	str	r3, [r7, #16]
		}
			
	}
	
	packet_size = datasize + 6;
   9bac0:	79bb      	ldrb	r3, [r7, #6]
   9bac2:	3306      	adds	r3, #6
   9bac4:	757b      	strb	r3, [r7, #21]
	msgdataptr = &Cl_ConsoleTxMsg[4];
   9bac6:	4b38      	ldr	r3, [pc, #224]	; (9bba8 <Cl_SendDatatoconsole+0x158>)
   9bac8:	60fb      	str	r3, [r7, #12]
	Cl_ConsoleTxMsg[0] = CL_CONSOLEMSG_STARTBYTE1 ;//(Cl_Uint8Type) 'X';
   9baca:	4b38      	ldr	r3, [pc, #224]	; (9bbac <Cl_SendDatatoconsole+0x15c>)
   9bacc:	22cc      	movs	r2, #204	; 0xcc
   9bace:	701a      	strb	r2, [r3, #0]
	Cl_ConsoleTxMsg[1] = CL_CONSOLEMSG_STARTBYTE2 ;// (Cl_Uint8Type)'Q';
   9bad0:	4b36      	ldr	r3, [pc, #216]	; (9bbac <Cl_SendDatatoconsole+0x15c>)
   9bad2:	22dd      	movs	r2, #221	; 0xdd
   9bad4:	705a      	strb	r2, [r3, #1]
	Cl_ConsoleTxMsg[2]= command;// command
   9bad6:	4a35      	ldr	r2, [pc, #212]	; (9bbac <Cl_SendDatatoconsole+0x15c>)
   9bad8:	79fb      	ldrb	r3, [r7, #7]
   9bada:	7093      	strb	r3, [r2, #2]
	Cl_ConsoleTxMsg[3] = datasize; //size of data
   9badc:	4a33      	ldr	r2, [pc, #204]	; (9bbac <Cl_SendDatatoconsole+0x15c>)
   9bade:	79bb      	ldrb	r3, [r7, #6]
   9bae0:	70d3      	strb	r3, [r2, #3]
	for(tempcount = 0 ; tempcount< datasize;tempcount++)
   9bae2:	2300      	movs	r3, #0
   9bae4:	75fb      	strb	r3, [r7, #23]
   9bae6:	e00c      	b.n	9bb02 <Cl_SendDatatoconsole+0xb2>
	{
		Cl_ConsoleTxMsg[temp] = data[tempcount];
   9bae8:	7dbb      	ldrb	r3, [r7, #22]
   9baea:	7dfa      	ldrb	r2, [r7, #23]
   9baec:	6839      	ldr	r1, [r7, #0]
   9baee:	440a      	add	r2, r1
   9baf0:	7811      	ldrb	r1, [r2, #0]
   9baf2:	4a2e      	ldr	r2, [pc, #184]	; (9bbac <Cl_SendDatatoconsole+0x15c>)
   9baf4:	54d1      	strb	r1, [r2, r3]
		temp++;
   9baf6:	7dbb      	ldrb	r3, [r7, #22]
   9baf8:	3301      	adds	r3, #1
   9bafa:	75bb      	strb	r3, [r7, #22]
	msgdataptr = &Cl_ConsoleTxMsg[4];
	Cl_ConsoleTxMsg[0] = CL_CONSOLEMSG_STARTBYTE1 ;//(Cl_Uint8Type) 'X';
	Cl_ConsoleTxMsg[1] = CL_CONSOLEMSG_STARTBYTE2 ;// (Cl_Uint8Type)'Q';
	Cl_ConsoleTxMsg[2]= command;// command
	Cl_ConsoleTxMsg[3] = datasize; //size of data
	for(tempcount = 0 ; tempcount< datasize;tempcount++)
   9bafc:	7dfb      	ldrb	r3, [r7, #23]
   9bafe:	3301      	adds	r3, #1
   9bb00:	75fb      	strb	r3, [r7, #23]
   9bb02:	7dfa      	ldrb	r2, [r7, #23]
   9bb04:	79bb      	ldrb	r3, [r7, #6]
   9bb06:	429a      	cmp	r2, r3
   9bb08:	d3ee      	bcc.n	9bae8 <Cl_SendDatatoconsole+0x98>
	{
		Cl_ConsoleTxMsg[temp] = data[tempcount];
		temp++;
	}
	
	Cl_ConsoleTxMsg[temp++] = CL_CONSOLEMSG_STOPBYTE1; // (Cl_Uint8Type)'D';
   9bb0a:	7dbb      	ldrb	r3, [r7, #22]
   9bb0c:	1c5a      	adds	r2, r3, #1
   9bb0e:	75ba      	strb	r2, [r7, #22]
   9bb10:	461a      	mov	r2, r3
   9bb12:	4b26      	ldr	r3, [pc, #152]	; (9bbac <Cl_SendDatatoconsole+0x15c>)
   9bb14:	21ee      	movs	r1, #238	; 0xee
   9bb16:	5499      	strb	r1, [r3, r2]
	Cl_ConsoleTxMsg[temp++] = CL_CONSOLEMSG_STOPBYTE2 ;// (Cl_Uint8Type)'F';
   9bb18:	7dbb      	ldrb	r3, [r7, #22]
   9bb1a:	1c5a      	adds	r2, r3, #1
   9bb1c:	75ba      	strb	r2, [r7, #22]
   9bb1e:	461a      	mov	r2, r3
   9bb20:	4b22      	ldr	r3, [pc, #136]	; (9bbac <Cl_SendDatatoconsole+0x15c>)
   9bb22:	21bb      	movs	r1, #187	; 0xbb
   9bb24:	5499      	strb	r1, [r3, r2]
	
		if(syncdone)
   9bb26:	4b1f      	ldr	r3, [pc, #124]	; (9bba4 <Cl_SendDatatoconsole+0x154>)
   9bb28:	781b      	ldrb	r3, [r3, #0]
   9bb2a:	2b00      	cmp	r3, #0
   9bb2c:	d013      	beq.n	9bb56 <Cl_SendDatatoconsole+0x106>
		{
			
			
			Cl_IIC_ConsoleTxMsg[0] = 0xAA ;
   9bb2e:	4b20      	ldr	r3, [pc, #128]	; (9bbb0 <Cl_SendDatatoconsole+0x160>)
   9bb30:	22aa      	movs	r2, #170	; 0xaa
   9bb32:	701a      	strb	r2, [r3, #0]
			for(tempcount = 0 ; tempcount< packet_size;tempcount++)
   9bb34:	2300      	movs	r3, #0
   9bb36:	75fb      	strb	r3, [r7, #23]
   9bb38:	e009      	b.n	9bb4e <Cl_SendDatatoconsole+0xfe>
			{
				Cl_IIC_ConsoleTxMsg[tempcount+1] = Cl_ConsoleTxMsg[tempcount];
   9bb3a:	7dfb      	ldrb	r3, [r7, #23]
   9bb3c:	3301      	adds	r3, #1
   9bb3e:	7dfa      	ldrb	r2, [r7, #23]
   9bb40:	491a      	ldr	r1, [pc, #104]	; (9bbac <Cl_SendDatatoconsole+0x15c>)
   9bb42:	5c89      	ldrb	r1, [r1, r2]
   9bb44:	4a1a      	ldr	r2, [pc, #104]	; (9bbb0 <Cl_SendDatatoconsole+0x160>)
   9bb46:	54d1      	strb	r1, [r2, r3]
		if(syncdone)
		{
			
			
			Cl_IIC_ConsoleTxMsg[0] = 0xAA ;
			for(tempcount = 0 ; tempcount< packet_size;tempcount++)
   9bb48:	7dfb      	ldrb	r3, [r7, #23]
   9bb4a:	3301      	adds	r3, #1
   9bb4c:	75fb      	strb	r3, [r7, #23]
   9bb4e:	7dfa      	ldrb	r2, [r7, #23]
   9bb50:	7d7b      	ldrb	r3, [r7, #21]
   9bb52:	429a      	cmp	r2, r3
   9bb54:	d3f1      	bcc.n	9bb3a <Cl_SendDatatoconsole+0xea>
			
			
		}
		
		
	for (tempcount=0;tempcount<packet_size;)
   9bb56:	2300      	movs	r3, #0
   9bb58:	75fb      	strb	r3, [r7, #23]
   9bb5a:	e00e      	b.n	9bb7a <Cl_SendDatatoconsole+0x12a>
	//	else if (tempcount == ( packet_size - 1 ))
	//	{
	//			PIOC->PIO_CODR = 1 << 29; //test
	//	}
		
	cl_console_sync = 1;
   9bb5c:	4b15      	ldr	r3, [pc, #84]	; (9bbb4 <Cl_SendDatatoconsole+0x164>)
   9bb5e:	2201      	movs	r2, #1
   9bb60:	701a      	strb	r2, [r3, #0]
	//	if(! uart_write(CONF_UART,Cl_ConsoleTxMsg[tempcount]))
	if(! sv_console_bytedatawrite(Cl_ConsoleTxMsg[tempcount]))
   9bb62:	7dfb      	ldrb	r3, [r7, #23]
   9bb64:	4a11      	ldr	r2, [pc, #68]	; (9bbac <Cl_SendDatatoconsole+0x15c>)
   9bb66:	5cd3      	ldrb	r3, [r2, r3]
   9bb68:	4618      	mov	r0, r3
   9bb6a:	4b13      	ldr	r3, [pc, #76]	; (9bbb8 <Cl_SendDatatoconsole+0x168>)
   9bb6c:	4798      	blx	r3
   9bb6e:	4603      	mov	r3, r0
   9bb70:	2b00      	cmp	r3, #0
   9bb72:	d102      	bne.n	9bb7a <Cl_SendDatatoconsole+0x12a>
	
		{
			tempcount++;
   9bb74:	7dfb      	ldrb	r3, [r7, #23]
   9bb76:	3301      	adds	r3, #1
   9bb78:	75fb      	strb	r3, [r7, #23]
			
			
		}
		
		
	for (tempcount=0;tempcount<packet_size;)
   9bb7a:	7dfa      	ldrb	r2, [r7, #23]
   9bb7c:	7d7b      	ldrb	r3, [r7, #21]
   9bb7e:	429a      	cmp	r2, r3
   9bb80:	d3ec      	bcc.n	9bb5c <Cl_SendDatatoconsole+0x10c>
		//	printf("%s",Cl_ConsoleTxMsg);
		//printf("\n");
		
	}
	
ackCommand = command;	
   9bb82:	4a0e      	ldr	r2, [pc, #56]	; (9bbbc <Cl_SendDatatoconsole+0x16c>)
   9bb84:	79fb      	ldrb	r3, [r7, #7]
   9bb86:	7013      	strb	r3, [r2, #0]

//	printf("\n");
cl_wait(5);                     // check if needed 21082017
   9bb88:	2005      	movs	r0, #5
   9bb8a:	4b0d      	ldr	r3, [pc, #52]	; (9bbc0 <Cl_SendDatatoconsole+0x170>)
   9bb8c:	4798      	blx	r3
	return CL_OK;
   9bb8e:	2300      	movs	r3, #0
}
   9bb90:	4618      	mov	r0, r3
   9bb92:	3718      	adds	r7, #24
   9bb94:	46bd      	mov	sp, r7
   9bb96:	bd80      	pop	{r7, pc}
   9bb98:	20072815 	.word	0x20072815
   9bb9c:	20072816 	.word	0x20072816
   9bba0:	20072814 	.word	0x20072814
   9bba4:	20071bd8 	.word	0x20071bd8
   9bba8:	2007229c 	.word	0x2007229c
   9bbac:	20072298 	.word	0x20072298
   9bbb0:	20072540 	.word	0x20072540
   9bbb4:	20071bdd 	.word	0x20071bdd
   9bbb8:	0009a005 	.word	0x0009a005
   9bbbc:	20072817 	.word	0x20072817
   9bbc0:	00093195 	.word	0x00093195

0009bbc4 <Cl_Console_ConvertConsoleEvent_toMacEvent>:
 * \ 
 * \return CL_OK on success. 
 * \Globals used : 
 */
Cl_ReturnCodeType Cl_Console_ConvertConsoleEvent_toMacEvent(Cl_ConsoleRxEventsType command ,Cl_Mac_EventsType* MacEvent)
{
   9bbc4:	b480      	push	{r7}
   9bbc6:	b083      	sub	sp, #12
   9bbc8:	af00      	add	r7, sp, #0
   9bbca:	4603      	mov	r3, r0
   9bbcc:	6039      	str	r1, [r7, #0]
   9bbce:	71fb      	strb	r3, [r7, #7]

	switch(command)
   9bbd0:	79fb      	ldrb	r3, [r7, #7]
   9bbd2:	3b03      	subs	r3, #3
   9bbd4:	2b32      	cmp	r3, #50	; 0x32
   9bbd6:	f200 811d 	bhi.w	9be14 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x250>
   9bbda:	a201      	add	r2, pc, #4	; (adr r2, 9bbe0 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x1c>)
   9bbdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9bbe0:	0009bcad 	.word	0x0009bcad
   9bbe4:	0009bcbd 	.word	0x0009bcbd
   9bbe8:	0009bcc5 	.word	0x0009bcc5
   9bbec:	0009be15 	.word	0x0009be15
   9bbf0:	0009bd8d 	.word	0x0009bd8d
   9bbf4:	0009bd4d 	.word	0x0009bd4d
   9bbf8:	0009bcfd 	.word	0x0009bcfd
   9bbfc:	0009bd05 	.word	0x0009bd05
   9bc00:	0009bcdd 	.word	0x0009bcdd
   9bc04:	0009bce5 	.word	0x0009bce5
   9bc08:	0009bced 	.word	0x0009bced
   9bc0c:	0009bd0d 	.word	0x0009bd0d
   9bc10:	0009bd1d 	.word	0x0009bd1d
   9bc14:	0009bd2d 	.word	0x0009bd2d
   9bc18:	0009bd5d 	.word	0x0009bd5d
   9bc1c:	0009bd65 	.word	0x0009bd65
   9bc20:	0009bd6d 	.word	0x0009bd6d
   9bc24:	0009bd75 	.word	0x0009bd75
   9bc28:	0009bcb5 	.word	0x0009bcb5
   9bc2c:	0009be15 	.word	0x0009be15
   9bc30:	0009be15 	.word	0x0009be15
   9bc34:	0009bcf5 	.word	0x0009bcf5
   9bc38:	0009bd15 	.word	0x0009bd15
   9bc3c:	0009bd95 	.word	0x0009bd95
   9bc40:	0009bd9d 	.word	0x0009bd9d
   9bc44:	0009bda5 	.word	0x0009bda5
   9bc48:	0009bdad 	.word	0x0009bdad
   9bc4c:	0009bd55 	.word	0x0009bd55
   9bc50:	0009bdb5 	.word	0x0009bdb5
   9bc54:	0009bd25 	.word	0x0009bd25
   9bc58:	0009bdbd 	.word	0x0009bdbd
   9bc5c:	0009bdc5 	.word	0x0009bdc5
   9bc60:	0009bdcd 	.word	0x0009bdcd
   9bc64:	0009bdd5 	.word	0x0009bdd5
   9bc68:	0009bde5 	.word	0x0009bde5
   9bc6c:	0009bded 	.word	0x0009bded
   9bc70:	0009bd7d 	.word	0x0009bd7d
   9bc74:	0009bd85 	.word	0x0009bd85
   9bc78:	0009bdf5 	.word	0x0009bdf5
   9bc7c:	0009bdfd 	.word	0x0009bdfd
   9bc80:	0009bddd 	.word	0x0009bddd
   9bc84:	0009bccd 	.word	0x0009bccd
   9bc88:	0009be15 	.word	0x0009be15
   9bc8c:	0009be15 	.word	0x0009be15
   9bc90:	0009bcd5 	.word	0x0009bcd5
   9bc94:	0009be15 	.word	0x0009be15
   9bc98:	0009bd35 	.word	0x0009bd35
   9bc9c:	0009bd3d 	.word	0x0009bd3d
   9bca0:	0009bd45 	.word	0x0009bd45
   9bca4:	0009be05 	.word	0x0009be05
   9bca8:	0009be0d 	.word	0x0009be0d
	{
		case CON_RX_COMMAND_SYNC:
		//printf("J/n");
		    *MacEvent = EVT_CONSOLE_COMMAND_SYNC;
   9bcac:	683b      	ldr	r3, [r7, #0]
   9bcae:	2201      	movs	r2, #1
   9bcb0:	701a      	strb	r2, [r3, #0]
		break;
   9bcb2:	e0b0      	b.n	9be16 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case CON_RX_COMMAND_CLR_ALARM:
		*MacEvent = EVT_CONSOLE_COMMAND_CLR_ALARM;
   9bcb4:	683b      	ldr	r3, [r7, #0]
   9bcb6:	2229      	movs	r2, #41	; 0x29
   9bcb8:	701a      	strb	r2, [r3, #0]
		break;
   9bcba:	e0ac      	b.n	9be16 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case CON_RX_COMMAND_ACK:
		  *MacEvent = EVT_CONSOLE_COMMAND_ACK;
   9bcbc:	683b      	ldr	r3, [r7, #0]
   9bcbe:	2202      	movs	r2, #2
   9bcc0:	701a      	strb	r2, [r3, #0]
		break;
   9bcc2:	e0a8      	b.n	9be16 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case CON_RX_COMMAND_RINSE_START:
//		printf("J/n");
			*MacEvent = EVT_CONSOLE_COMMAND_RINSE_START;
   9bcc4:	683b      	ldr	r3, [r7, #0]
   9bcc6:	2207      	movs	r2, #7
   9bcc8:	701a      	strb	r2, [r3, #0]
		break;
   9bcca:	e0a4      	b.n	9be16 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case CON_RX_EVT_COMMAND_START_DISINF:
		
		*MacEvent = EVT_CONSOLE_COMMAND_DISINF_START;
   9bccc:	683b      	ldr	r3, [r7, #0]
   9bcce:	223f      	movs	r2, #63	; 0x3f
   9bcd0:	701a      	strb	r2, [r3, #0]
		break;
   9bcd2:	e0a0      	b.n	9be16 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case CON_RX_EVT_COMMAND_RESUME_DISINF_STAGE:
		*MacEvent = EVT_CONSOLE_RESUME_DISINF_STAGE;
   9bcd4:	683b      	ldr	r3, [r7, #0]
   9bcd6:	2240      	movs	r2, #64	; 0x40
   9bcd8:	701a      	strb	r2, [r3, #0]
		break;
   9bcda:	e09c      	b.n	9be16 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case CON_RX_COMMAND_SET_BLDPMP_ON:
		*MacEvent = EVT_CONSOLE_COMMAND_SET_BLDPMP_ON;
   9bcdc:	683b      	ldr	r3, [r7, #0]
   9bcde:	220a      	movs	r2, #10
   9bce0:	701a      	strb	r2, [r3, #0]
		break;
   9bce2:	e098      	b.n	9be16 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case CON_RX_COMMAND_SET_BLDPMP_OFF:
		*MacEvent = EVT_CONSOLE_COMMAND_SET_BLDPMP_OFF;
   9bce4:	683b      	ldr	r3, [r7, #0]
   9bce6:	220b      	movs	r2, #11
   9bce8:	701a      	strb	r2, [r3, #0]
		break;
   9bcea:	e094      	b.n	9be16 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case CON_RX_COMMAND_SET_BLDPUMPRATE:
		*MacEvent = EVT_CONSOLE_COMMAND_SET_BLDPUMPRATE;
   9bcec:	683b      	ldr	r3, [r7, #0]
   9bcee:	220c      	movs	r2, #12
   9bcf0:	701a      	strb	r2, [r3, #0]
		break;
   9bcf2:	e090      	b.n	9be16 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case CON_RX_COMMAND_START_DIALYSATE_FILL:
		*MacEvent = EVT_CONSOLE_COMMAND_START_DIALYSATE_FILLING;
   9bcf4:	683b      	ldr	r3, [r7, #0]
   9bcf6:	2211      	movs	r2, #17
   9bcf8:	701a      	strb	r2, [r3, #0]
		break;
   9bcfa:	e08c      	b.n	9be16 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case CON_RX_COMMAND_SET_DATA:
		*MacEvent = EVT_CONSOLE_COMMAND_SET_DATA;
   9bcfc:	683b      	ldr	r3, [r7, #0]
   9bcfe:	220d      	movs	r2, #13
   9bd00:	701a      	strb	r2, [r3, #0]
		break;
   9bd02:	e088      	b.n	9be16 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case CON_RX_COMMAND_GET_DATA:
		*MacEvent = EVT_CONSOLE_COMMAND_GET_DATA;
   9bd04:	683b      	ldr	r3, [r7, #0]
   9bd06:	220e      	movs	r2, #14
   9bd08:	701a      	strb	r2, [r3, #0]
		break;
   9bd0a:	e084      	b.n	9be16 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case CON_RX_COMMAND_START_PRIME:
		*MacEvent = EVT_CONSOLE_COMMAND_START_PRIME;
   9bd0c:	683b      	ldr	r3, [r7, #0]
   9bd0e:	220f      	movs	r2, #15
   9bd10:	701a      	strb	r2, [r3, #0]
		break;
   9bd12:	e080      	b.n	9be16 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		
		case CON_RX_COMMAND_STOP_PRIME:
		*MacEvent = EVT_CONSOLE_COMMAND_STOP_PRIME;
   9bd14:	683b      	ldr	r3, [r7, #0]
   9bd16:	2210      	movs	r2, #16
   9bd18:	701a      	strb	r2, [r3, #0]
		break;
   9bd1a:	e07c      	b.n	9be16 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		
		case CON_RX_COMMAND_START_DIALISER_PRIME:
		*MacEvent = EVT_CONSOLE_COMMAND_START_DIALISER_PRIME;
   9bd1c:	683b      	ldr	r3, [r7, #0]
   9bd1e:	2213      	movs	r2, #19
   9bd20:	701a      	strb	r2, [r3, #0]
		break;
   9bd22:	e078      	b.n	9be16 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		
		case CON_RX_EVT_COMMAND_STOP_DIALYSER_PRIME:
		*MacEvent = EVT_CONSOLE_COMMAND_STOP_DIALISER_PRIME;
   9bd24:	683b      	ldr	r3, [r7, #0]
   9bd26:	2214      	movs	r2, #20
   9bd28:	701a      	strb	r2, [r3, #0]
		break;
   9bd2a:	e074      	b.n	9be16 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case CON_RX_COMMAND_HEP_PMP_RATE:
		*MacEvent = EVT_CONSOLE_COMMAND_HEP_PMP_RATE;
   9bd2c:	683b      	ldr	r3, [r7, #0]
   9bd2e:	2215      	movs	r2, #21
   9bd30:	701a      	strb	r2, [r3, #0]
		break;
   9bd32:	e070      	b.n	9be16 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case CON_RX_COMMAND_HEPARIN_BOLUS:
		*MacEvent = EVT_CONSOLE_COMMAND_HEPARIN_BOLUS;
   9bd34:	683b      	ldr	r3, [r7, #0]
   9bd36:	2226      	movs	r2, #38	; 0x26
   9bd38:	701a      	strb	r2, [r3, #0]
		break;
   9bd3a:	e06c      	b.n	9be16 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case CON_RX_COMMAND_HEPARIN_ON:
		*MacEvent = EVT_CONSOLE_COMMAND_HEPARIN_START;
   9bd3c:	683b      	ldr	r3, [r7, #0]
   9bd3e:	2227      	movs	r2, #39	; 0x27
   9bd40:	701a      	strb	r2, [r3, #0]
		break;
   9bd42:	e068      	b.n	9be16 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case CON_RX_COMMAND_HEPARIN_OFF:
		*MacEvent = EVT_CONSOLE_COMMAND_HEPARIN_STOP;
   9bd44:	683b      	ldr	r3, [r7, #0]
   9bd46:	2228      	movs	r2, #40	; 0x28
   9bd48:	701a      	strb	r2, [r3, #0]
		break;
   9bd4a:	e064      	b.n	9be16 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case CON_RX_COMMAND_DIALYSIS_PREP:
			*MacEvent = EVT_CONSOLE_COMMAND_DIALYSIS_PREP;
   9bd4c:	683b      	ldr	r3, [r7, #0]
   9bd4e:	2209      	movs	r2, #9
   9bd50:	701a      	strb	r2, [r3, #0]
		break;
   9bd52:	e060      	b.n	9be16 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		
		case CON_RX_COMMAND_DIALYSER_CONNECTED:
		*MacEvent = EVT_CONSOLE_COMMAND_DILYSER_CONNECTED;
   9bd54:	683b      	ldr	r3, [r7, #0]
   9bd56:	2212      	movs	r2, #18
   9bd58:	701a      	strb	r2, [r3, #0]
		break;
   9bd5a:	e05c      	b.n	9be16 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case CON_RX_COMMAND_MAN_PREP_COMPLETED:
			*MacEvent = EVT_CONSOLE_COMMAND_MAN_PREP_COMPLETED;
   9bd5c:	683b      	ldr	r3, [r7, #0]
   9bd5e:	2216      	movs	r2, #22
   9bd60:	701a      	strb	r2, [r3, #0]
		break;
   9bd62:	e058      	b.n	9be16 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case CON_RX_COMMAND_DIALYSIS_START:
			*MacEvent = EVT_CONSOLE_COMMAND_DIALYSIS_START;
   9bd64:	683b      	ldr	r3, [r7, #0]
   9bd66:	2217      	movs	r2, #23
   9bd68:	701a      	strb	r2, [r3, #0]
		break;
   9bd6a:	e054      	b.n	9be16 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case CON_RX_COMMAND_DIALYSIS_STOP:
			*MacEvent = EVT_CONSOLE_COMMAND_DIALYSIS_STOP;
   9bd6c:	683b      	ldr	r3, [r7, #0]
   9bd6e:	2218      	movs	r2, #24
   9bd70:	701a      	strb	r2, [r3, #0]
		break;
   9bd72:	e050      	b.n	9be16 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case CON_RX_COMMAND_DIALYSIS_PAUSE:
			*MacEvent = EVT_CONSOLE_COMMAND_DIALYSIS_PAUSE;
   9bd74:	683b      	ldr	r3, [r7, #0]
   9bd76:	2219      	movs	r2, #25
   9bd78:	701a      	strb	r2, [r3, #0]
		break;
   9bd7a:	e04c      	b.n	9be16 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		
		case CON_RX_EVT_COMMAND_BYPASS_ON:
			*MacEvent = EVT_CONSOLE_COMMAND_BYPASS_ON;
   9bd7c:	683b      	ldr	r3, [r7, #0]
   9bd7e:	221a      	movs	r2, #26
   9bd80:	701a      	strb	r2, [r3, #0]
		break;
   9bd82:	e048      	b.n	9be16 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case CON_RX_EVT_COMMAND_BYPASS_OFF:
		*MacEvent = EVT_CONSOLE_COMMAND_BYPASS_OFF;
   9bd84:	683b      	ldr	r3, [r7, #0]
   9bd86:	221b      	movs	r2, #27
   9bd88:	701a      	strb	r2, [r3, #0]
		break;
   9bd8a:	e044      	b.n	9be16 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case CON_RX_COMMAND_RINSE_STOP:
			*MacEvent = EVT_CONSOLE_COMMAND_STOP_RINSE;
   9bd8c:	683b      	ldr	r3, [r7, #0]
   9bd8e:	2208      	movs	r2, #8
   9bd90:	701a      	strb	r2, [r3, #0]
		break;
   9bd92:	e040      	b.n	9be16 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		
		case		CON_RX_COMMAND_USER_MODE_ENTER://1A
					*MacEvent =  EVT_CONSOLE_COMMAND_USER_MODE_ENTER;
   9bd94:	683b      	ldr	r3, [r7, #0]
   9bd96:	2203      	movs	r2, #3
   9bd98:	701a      	strb	r2, [r3, #0]
		break;
   9bd9a:	e03c      	b.n	9be16 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case		CON_RX_COMMAND_USER_MODE_EXIT://1B
					*MacEvent =  EVT_CONSOLE_COMMAND_USER_MODE_EXIT;
   9bd9c:	683b      	ldr	r3, [r7, #0]
   9bd9e:	2204      	movs	r2, #4
   9bda0:	701a      	strb	r2, [r3, #0]
		break;
   9bda2:	e038      	b.n	9be16 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case		CON_RX_COMMAND_SERVICEMODE_ENTER://1C
					*MacEvent =  EVT_CONSOLE_COMMAND_SERVICEMODE_ENTER ;
   9bda4:	683b      	ldr	r3, [r7, #0]
   9bda6:	2205      	movs	r2, #5
   9bda8:	701a      	strb	r2, [r3, #0]
		break;
   9bdaa:	e034      	b.n	9be16 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case		CON_RX_COMMAND_SERVICEMODE_EXIT://1D
					*MacEvent = EVT_CONSOLE_COMMAND_SERVICEMODE_EXIT;
   9bdac:	683b      	ldr	r3, [r7, #0]
   9bdae:	2206      	movs	r2, #6
   9bdb0:	701a      	strb	r2, [r3, #0]
		break;
   9bdb2:	e030      	b.n	9be16 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
					
		case    CON_RX_EVT_COMMAND_PATIENT_CONNECTED: //1E
					*MacEvent = EVT_CONSOLE_COMMAND_PATIENT_CONNECTED;
   9bdb4:	683b      	ldr	r3, [r7, #0]
   9bdb6:	221c      	movs	r2, #28
   9bdb8:	701a      	strb	r2, [r3, #0]
		break;
   9bdba:	e02c      	b.n	9be16 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case 	CON_RX_EVT_COMMAND_MIXING_PREP_START://0x21
					*MacEvent = EVT_SEND_MIXING_PREP_START;
   9bdbc:	683b      	ldr	r3, [r7, #0]
   9bdbe:	221d      	movs	r2, #29
   9bdc0:	701a      	strb	r2, [r3, #0]
		break;
   9bdc2:	e028      	b.n	9be16 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case	CON_RX_EVT_COMMAND_MIXING_PREP_STOP://0x22
			*MacEvent = EVT_SEND_MIXING_PREP_STOP;
   9bdc4:	683b      	ldr	r3, [r7, #0]
   9bdc6:	221e      	movs	r2, #30
   9bdc8:	701a      	strb	r2, [r3, #0]
		break;
   9bdca:	e024      	b.n	9be16 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>

		case CON_RX_EVT_COMMAND_RCIRC_START: 
					*MacEvent = EVT_CONSOLE_COMMAND_RCIRC_START;
   9bdcc:	683b      	ldr	r3, [r7, #0]
   9bdce:	221f      	movs	r2, #31
   9bdd0:	701a      	strb	r2, [r3, #0]
		break;
   9bdd2:	e020      	b.n	9be16 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case CON_RX_EVT_COMMAND_RCIRC_STOP: 
					*MacEvent = EVT_CONSOLE_COMMAND_RCIRC_STOP;
   9bdd4:	683b      	ldr	r3, [r7, #0]
   9bdd6:	2220      	movs	r2, #32
   9bdd8:	701a      	strb	r2, [r3, #0]
		break;
   9bdda:	e01c      	b.n	9be16 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case CON_RX_EVT_COMMAND_PATIENT_READY:
		*MacEvent = EVT_CONSOLE_COMMAND_PATIENT_READY;
   9bddc:	683b      	ldr	r3, [r7, #0]
   9bdde:	2221      	movs	r2, #33	; 0x21
   9bde0:	701a      	strb	r2, [r3, #0]
		break;
   9bde2:	e018      	b.n	9be16 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		
		case CON_RX_EVT_COMMAND_START_RETURN:
		*MacEvent = EVT_CONSOLE_COMMAND_START_RETURN;
   9bde4:	683b      	ldr	r3, [r7, #0]
   9bde6:	2222      	movs	r2, #34	; 0x22
   9bde8:	701a      	strb	r2, [r3, #0]
		break;
   9bdea:	e014      	b.n	9be16 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		
		case CON_RX_EVT_COMMAND_STOP_RETURN:
		*MacEvent = EVT_CONSOLE_COMMAND_STOP_RETURN;
   9bdec:	683b      	ldr	r3, [r7, #0]
   9bdee:	2223      	movs	r2, #35	; 0x23
   9bdf0:	701a      	strb	r2, [r3, #0]
		break;			
   9bdf2:	e010      	b.n	9be16 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case CON_RX_EVT_COMMAND_MINUF_ON:
		*MacEvent = EVT_CONSOLE_COMMAND_MINUF_ON;
   9bdf4:	683b      	ldr	r3, [r7, #0]
   9bdf6:	2224      	movs	r2, #36	; 0x24
   9bdf8:	701a      	strb	r2, [r3, #0]
		break;
   9bdfa:	e00c      	b.n	9be16 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case CON_RX_EVT_COMMAND_MINUF_OFF:
		*MacEvent = EVT_CONSOLE_COMMAND_MINUF_OFF;
   9bdfc:	683b      	ldr	r3, [r7, #0]
   9bdfe:	2225      	movs	r2, #37	; 0x25
   9be00:	701a      	strb	r2, [r3, #0]
		break;
   9be02:	e008      	b.n	9be16 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case CON_RX_COMMAND_ISOUF_START:
		*MacEvent = EVT_CONSOLE_COMMAND_ISOUF_START;
   9be04:	683b      	ldr	r3, [r7, #0]
   9be06:	2258      	movs	r2, #88	; 0x58
   9be08:	701a      	strb	r2, [r3, #0]
		break;
   9be0a:	e004      	b.n	9be16 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		case CON_RX_COMMAND_ISOUF_STOP:
		*MacEvent = EVT_CONSOLE_COMMAND_ISOUF_STOP;
   9be0c:	683b      	ldr	r3, [r7, #0]
   9be0e:	2259      	movs	r2, #89	; 0x59
   9be10:	701a      	strb	r2, [r3, #0]
		break;
   9be12:	e000      	b.n	9be16 <Cl_Console_ConvertConsoleEvent_toMacEvent+0x252>
		default:
		break;
   9be14:	bf00      	nop
	}
	return CL_OK;
   9be16:	2300      	movs	r3, #0
}
   9be18:	4618      	mov	r0, r3
   9be1a:	370c      	adds	r7, #12
   9be1c:	46bd      	mov	sp, r7
   9be1e:	f85d 7b04 	ldr.w	r7, [sp], #4
   9be22:	4770      	bx	lr

0009be24 <Cl_Console_Console_Sync>:
 * \ 
 * \return CL_OK on success. 
 * \Globals used : 
 */
Cl_ReturnCodeType 	Cl_Console_Console_Sync(void)
{
   9be24:	b580      	push	{r7, lr}
   9be26:	b082      	sub	sp, #8
   9be28:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType Cl_MacRetval = CL_ERROR;
   9be2a:	2304      	movs	r3, #4
   9be2c:	71fb      	strb	r3, [r7, #7]
	Cl_ConsoleSyncStatesType Cl_SyncState = CON_SYNC_STATE_WAIT_FOR_SYNC;
   9be2e:	2300      	movs	r3, #0
   9be30:	71bb      	strb	r3, [r7, #6]
	
	Cl_Uint8Type CmdData =0;
   9be32:	2300      	movs	r3, #0
   9be34:	717b      	strb	r3, [r7, #5]
	

	while(	Cl_ConsoleState == CON_STATE_INIT )
   9be36:	e07f      	b.n	9bf38 <Cl_Console_Console_Sync+0x114>
	{
		switch(Cl_SyncState)
   9be38:	79bb      	ldrb	r3, [r7, #6]
   9be3a:	2b03      	cmp	r3, #3
   9be3c:	d87b      	bhi.n	9bf36 <Cl_Console_Console_Sync+0x112>
   9be3e:	a201      	add	r2, pc, #4	; (adr r2, 9be44 <Cl_Console_Console_Sync+0x20>)
   9be40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9be44:	0009be55 	.word	0x0009be55
   9be48:	0009be8f 	.word	0x0009be8f
   9be4c:	0009beab 	.word	0x0009beab
   9be50:	0009bf2b 	.word	0x0009bf2b
		{
			case CON_SYNC_STATE_WAIT_FOR_SYNC:
			
			Cl_MacRetval = Cl_Console_SyncGetMessage();
   9be54:	4b3d      	ldrcc	r3, [pc, #244]	; (9bf4c <Cl_Console_Console_Sync+0x128>)
   9be56:	4798      	blxcs	r3	; unpredictable branch in IT block

   9be58:	4603      	movcc	r3, r0
   9be5a:	71fb      	strb	r3, [r7, #7]

						if(Cl_MacRetval== CL_OK)
   9be5c:	79fb      	ldrb	r3, [r7, #7]
   9be5e:	2b00      	cmp	r3, #0
   9be60:	d112      	bne.n	9be88 <Cl_Console_Console_Sync+0x64>
						{							
							Cl_ConsoleRxMsg.command = Cl_Console_msgbuffer.Console_databuffer[0];
   9be62:	4b3b      	ldr	r3, [pc, #236]	; (9bf50 <Cl_Console_Console_Sync+0x12c>)
   9be64:	781a      	ldrb	r2, [r3, #0]
   9be66:	4b3b      	ldr	r3, [pc, #236]	; (9bf54 <Cl_Console_Console_Sync+0x130>)
   9be68:	709a      	strb	r2, [r3, #2]
							//Cl_ConsoleRxMsg.command = CON_HELLO;// for testing
							if(Cl_ConsoleRxMsg.command == CON_RX_COMMAND_SYNC )
   9be6a:	4b3a      	ldr	r3, [pc, #232]	; (9bf54 <Cl_Console_Console_Sync+0x130>)
   9be6c:	789b      	ldrb	r3, [r3, #2]
   9be6e:	2b03      	cmp	r3, #3
   9be70:	d10a      	bne.n	9be88 <Cl_Console_Console_Sync+0x64>
							{
								
									Cl_Cosnsole_MsgAcknlowledge();
   9be72:	4b39      	ldr	r3, [pc, #228]	; (9bf58 <Cl_Console_Console_Sync+0x134>)
   9be74:	4798      	blx	r3
							//		loopackflag = true;
								
								
							//	count = 0;

								Cl_ConsoleRxMsg.msgready = true;
   9be76:	4b37      	ldr	r3, [pc, #220]	; (9bf54 <Cl_Console_Console_Sync+0x130>)
   9be78:	2201      	movs	r2, #1
   9be7a:	761a      	strb	r2, [r3, #24]
								Cl_Console_msgbuffer.ConsoleNewMessageReady = false;
   9be7c:	4b34      	ldr	r3, [pc, #208]	; (9bf50 <Cl_Console_Console_Sync+0x12c>)
   9be7e:	2200      	movs	r2, #0
   9be80:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
								Cl_SyncState = CON_SYNC_STATE_SYNC_RECVD;
   9be84:	2301      	movs	r3, #1
   9be86:	71bb      	strb	r3, [r7, #6]
								//delay and send sync
								
							
							}
						}		
			Cl_MacRetval = CL_WAIT;
   9be88:	2301      	movs	r3, #1
   9be8a:	71fb      	strb	r3, [r7, #7]
								
			break;
   9be8c:	e054      	b.n	9bf38 <Cl_Console_Console_Sync+0x114>
			case CON_SYNC_STATE_SYNC_RECVD:
				cl_wait(10);
   9be8e:	200a      	movs	r0, #10
   9be90:	4b32      	ldr	r3, [pc, #200]	; (9bf5c <Cl_Console_Console_Sync+0x138>)
   9be92:	4798      	blx	r3
				Cl_SendDatatoconsole( CON_TX_COMMAND_SYNC,&CmdData ,0);
   9be94:	1d7b      	adds	r3, r7, #5
   9be96:	2003      	movs	r0, #3
   9be98:	4619      	mov	r1, r3
   9be9a:	2200      	movs	r2, #0
   9be9c:	4b30      	ldr	r3, [pc, #192]	; (9bf60 <Cl_Console_Console_Sync+0x13c>)
   9be9e:	4798      	blx	r3
				Cl_SyncState = CON_SYNC_STATE_WAIT_FOR_SYNC_ACK;
   9bea0:	2302      	movs	r3, #2
   9bea2:	71bb      	strb	r3, [r7, #6]
			Cl_MacRetval = CL_WAIT;
   9bea4:	2301      	movs	r3, #1
   9bea6:	71fb      	strb	r3, [r7, #7]
				break;
   9bea8:	e046      	b.n	9bf38 <Cl_Console_Console_Sync+0x114>
				
			case CON_SYNC_STATE_WAIT_FOR_SYNC_ACK:
			Cl_MacRetval = Cl_Console_SyncGetMessage();
   9beaa:	4b28      	ldr	r3, [pc, #160]	; (9bf4c <Cl_Console_Console_Sync+0x128>)
   9beac:	4798      	blx	r3
   9beae:	4603      	mov	r3, r0
   9beb0:	71fb      	strb	r3, [r7, #7]
				if(Cl_MacRetval== CL_OK)
   9beb2:	79fb      	ldrb	r3, [r7, #7]
   9beb4:	2b00      	cmp	r3, #0
   9beb6:	d137      	bne.n	9bf28 <Cl_Console_Console_Sync+0x104>
				{
					Cl_ConsoleRxMsg.command = Cl_Console_msgbuffer.Console_databuffer[0];
   9beb8:	4b25      	ldr	r3, [pc, #148]	; (9bf50 <Cl_Console_Console_Sync+0x12c>)
   9beba:	781a      	ldrb	r2, [r3, #0]
   9bebc:	4b25      	ldr	r3, [pc, #148]	; (9bf54 <Cl_Console_Console_Sync+0x130>)
   9bebe:	709a      	strb	r2, [r3, #2]
					Cl_ConsoleRxMsg.datasize = Cl_Console_msgbuffer.Console_databuffer[1];
   9bec0:	4b23      	ldr	r3, [pc, #140]	; (9bf50 <Cl_Console_Console_Sync+0x12c>)
   9bec2:	785a      	ldrb	r2, [r3, #1]
   9bec4:	4b23      	ldr	r3, [pc, #140]	; (9bf54 <Cl_Console_Console_Sync+0x130>)
   9bec6:	70da      	strb	r2, [r3, #3]
					Cl_ConsoleRxMsg.data.byte[0] = Cl_Console_msgbuffer.Console_databuffer[2];
   9bec8:	4b21      	ldr	r3, [pc, #132]	; (9bf50 <Cl_Console_Console_Sync+0x12c>)
   9beca:	789a      	ldrb	r2, [r3, #2]
   9becc:	4b21      	ldr	r3, [pc, #132]	; (9bf54 <Cl_Console_Console_Sync+0x130>)
   9bece:	711a      	strb	r2, [r3, #4]
					if(Cl_ConsoleRxMsg.command == CON_RX_COMMAND_ACK )
   9bed0:	4b20      	ldr	r3, [pc, #128]	; (9bf54 <Cl_Console_Console_Sync+0x130>)
   9bed2:	789b      	ldrb	r3, [r3, #2]
   9bed4:	2b04      	cmp	r3, #4
   9bed6:	d125      	bne.n	9bf24 <Cl_Console_Console_Sync+0x100>
					{
						if(Cl_ConsoleRxMsg.data.byte[0] == CON_TX_COMMAND_SYNC )
   9bed8:	4b1e      	ldr	r3, [pc, #120]	; (9bf54 <Cl_Console_Console_Sync+0x130>)
   9beda:	791b      	ldrb	r3, [r3, #4]
   9bedc:	2b03      	cmp	r3, #3
   9bede:	d123      	bne.n	9bf28 <Cl_Console_Console_Sync+0x104>
						{
							Cl_SyncState = CON_SYNC_STATE_SYNC_ACK_RECVD;
   9bee0:	2303      	movs	r3, #3
   9bee2:	71bb      	strb	r3, [r7, #6]

							if( Cl_MacEventQueue3.Cl_MacNewEventcount <= MAC_EVENT_COUNT_MAX )	
   9bee4:	4b1f      	ldr	r3, [pc, #124]	; (9bf64 <Cl_Console_Console_Sync+0x140>)
   9bee6:	781b      	ldrb	r3, [r3, #0]
   9bee8:	2b0a      	cmp	r3, #10
   9beea:	d80f      	bhi.n	9bf0c <Cl_Console_Console_Sync+0xe8>
							 {
								// Cl_MacEventQueue3.Cl_MacEvent[Cl_MacEventQueue3.Cl_MacNewEventcount] = EVT_COMMAND_ENTER_STANDBY ;
								Cl_MacEventQueue3.Cl_MacEvent[Cl_MacEventQueue3.Cl_MacNewEventcount] = EVT_COMMAND_ENTER_INIT ;
   9beec:	4b1d      	ldr	r3, [pc, #116]	; (9bf64 <Cl_Console_Console_Sync+0x140>)
   9beee:	781b      	ldrb	r3, [r3, #0]
   9bef0:	461a      	mov	r2, r3
   9bef2:	4b1c      	ldr	r3, [pc, #112]	; (9bf64 <Cl_Console_Console_Sync+0x140>)
   9bef4:	4413      	add	r3, r2
   9bef6:	222a      	movs	r2, #42	; 0x2a
   9bef8:	709a      	strb	r2, [r3, #2]
								
								 Cl_MacEventQueue3.Cl_MacNewEvent = true;
   9befa:	4b1a      	ldr	r3, [pc, #104]	; (9bf64 <Cl_Console_Console_Sync+0x140>)
   9befc:	2201      	movs	r2, #1
   9befe:	705a      	strb	r2, [r3, #1]
								 Cl_MacEventQueue3.Cl_MacNewEventcount++;
   9bf00:	4b18      	ldr	r3, [pc, #96]	; (9bf64 <Cl_Console_Console_Sync+0x140>)
   9bf02:	781b      	ldrb	r3, [r3, #0]
   9bf04:	3301      	adds	r3, #1
   9bf06:	b2da      	uxtb	r2, r3
   9bf08:	4b16      	ldr	r3, [pc, #88]	; (9bf64 <Cl_Console_Console_Sync+0x140>)
   9bf0a:	701a      	strb	r2, [r3, #0]
							 }
							 
							 syncdone = true; //testing
   9bf0c:	4b16      	ldr	r3, [pc, #88]	; (9bf68 <Cl_Console_Console_Sync+0x144>)
   9bf0e:	2201      	movs	r2, #1
   9bf10:	701a      	strb	r2, [r3, #0]
							Cl_ConsoleState = CON_STATE_ACTIVE;
   9bf12:	4b16      	ldr	r3, [pc, #88]	; (9bf6c <Cl_Console_Console_Sync+0x148>)
   9bf14:	2202      	movs	r2, #2
   9bf16:	701a      	strb	r2, [r3, #0]
							Cl_MacRetval = CL_OK;
   9bf18:	2300      	movs	r3, #0
   9bf1a:	71fb      	strb	r3, [r7, #7]
							
							test_count = 0; //test
   9bf1c:	4b14      	ldr	r3, [pc, #80]	; (9bf70 <Cl_Console_Console_Sync+0x14c>)
   9bf1e:	2200      	movs	r2, #0
   9bf20:	701a      	strb	r2, [r3, #0]
   9bf22:	e009      	b.n	9bf38 <Cl_Console_Console_Sync+0x114>
														
						}
					}
					else
					{
							Cl_MacRetval = CL_WAIT;
   9bf24:	2301      	movs	r3, #1
   9bf26:	71fb      	strb	r3, [r7, #7]
					}
				}
			break;
   9bf28:	e006      	b.n	9bf38 <Cl_Console_Console_Sync+0x114>
			case CON_SYNC_STATE_SYNC_ACK_RECVD:
			
				Cl_ConsoleState = CON_STATE_ACTIVE;
   9bf2a:	4b10      	ldr	r3, [pc, #64]	; (9bf6c <Cl_Console_Console_Sync+0x148>)
   9bf2c:	2202      	movs	r2, #2
   9bf2e:	701a      	strb	r2, [r3, #0]
				Cl_MacRetval = CL_OK;
   9bf30:	2300      	movs	r3, #0
   9bf32:	71fb      	strb	r3, [r7, #7]
			break;
   9bf34:	e000      	b.n	9bf38 <Cl_Console_Console_Sync+0x114>
			
			default:
			break;
   9bf36:	bf00      	nop
	Cl_ConsoleSyncStatesType Cl_SyncState = CON_SYNC_STATE_WAIT_FOR_SYNC;
	
	Cl_Uint8Type CmdData =0;
	

	while(	Cl_ConsoleState == CON_STATE_INIT )
   9bf38:	4b0c      	ldr	r3, [pc, #48]	; (9bf6c <Cl_Console_Console_Sync+0x148>)
   9bf3a:	781b      	ldrb	r3, [r3, #0]
   9bf3c:	2b01      	cmp	r3, #1
   9bf3e:	f43f af7b 	beq.w	9be38 <Cl_Console_Console_Sync+0x14>
			break;
		}
	}
	/******************************************************************/

	return Cl_MacRetval;
   9bf42:	79fb      	ldrb	r3, [r7, #7]
 }
   9bf44:	4618      	mov	r0, r3
   9bf46:	3708      	adds	r7, #8
   9bf48:	46bd      	mov	sp, r7
   9bf4a:	bd80      	pop	{r7, pc}
   9bf4c:	0009bf91 	.word	0x0009bf91
   9bf50:	200721f4 	.word	0x200721f4
   9bf54:	200723f0 	.word	0x200723f0
   9bf58:	0009b9c9 	.word	0x0009b9c9
   9bf5c:	00093195 	.word	0x00093195
   9bf60:	0009ba51 	.word	0x0009ba51
   9bf64:	2007242c 	.word	0x2007242c
   9bf68:	20071bd8 	.word	0x20071bd8
   9bf6c:	20070b84 	.word	0x20070b84
   9bf70:	20071bdc 	.word	0x20071bdc

0009bf74 <Cl_Console_init>:
 * \return CL_OK on success. 
 * \Globals used : 
 */
 
 Cl_ReturnCodeType Cl_Console_init(void)
 {
   9bf74:	b480      	push	{r7}
   9bf76:	af00      	add	r7, sp, #0
	 Cl_ConsoleState = CON_STATE_INIT;
   9bf78:	4b04      	ldr	r3, [pc, #16]	; (9bf8c <Cl_Console_init+0x18>)
   9bf7a:	2201      	movs	r2, #1
   9bf7c:	701a      	strb	r2, [r3, #0]
	 
	 return CL_OK;
   9bf7e:	2300      	movs	r3, #0
 }
   9bf80:	4618      	mov	r0, r3
   9bf82:	46bd      	mov	sp, r7
   9bf84:	f85d 7b04 	ldr.w	r7, [sp], #4
   9bf88:	4770      	bx	lr
   9bf8a:	bf00      	nop
   9bf8c:	20070b84 	.word	0x20070b84

0009bf90 <Cl_Console_SyncGetMessage>:
 * \ 
 * \return CL_OK on success. 
 * \Globals used : 
 */
  Cl_ReturnCodeType Cl_Console_SyncGetMessage()
  {
   9bf90:	b580      	push	{r7, lr}
   9bf92:	b082      	sub	sp, #8
   9bf94:	af00      	add	r7, sp, #0
	 Cl_ReturnCodeType  Cl_ConsoleRetval1 = CL_WAIT;
   9bf96:	2301      	movs	r3, #1
   9bf98:	71fb      	strb	r3, [r7, #7]
	 
 				Cl_ConsoleRetval1 = Cl_Console_Read_ConsoleMessage_Status(); // Reads the status of the data buffer populated by the timer console read interrupt.
   9bf9a:	4b0b      	ldr	r3, [pc, #44]	; (9bfc8 <Cl_Console_SyncGetMessage+0x38>)
   9bf9c:	4798      	blx	r3
   9bf9e:	4603      	mov	r3, r0
   9bfa0:	71fb      	strb	r3, [r7, #7]
 				if(Cl_ConsoleRetval1 == CL_OK)
   9bfa2:	79fb      	ldrb	r3, [r7, #7]
   9bfa4:	2b00      	cmp	r3, #0
   9bfa6:	d10a      	bne.n	9bfbe <Cl_Console_SyncGetMessage+0x2e>
 				{
	 				Cl_ConsoleRetval1 = Cl_Console_Read_Message_Console();
   9bfa8:	4b08      	ldr	r3, [pc, #32]	; (9bfcc <Cl_Console_SyncGetMessage+0x3c>)
   9bfaa:	4798      	blx	r3
   9bfac:	4603      	mov	r3, r0
   9bfae:	71fb      	strb	r3, [r7, #7]
	 				if(Cl_ConsoleRetval1 == CL_OK)
   9bfb0:	79fb      	ldrb	r3, [r7, #7]
   9bfb2:	2b00      	cmp	r3, #0
   9bfb4:	d103      	bne.n	9bfbe <Cl_Console_SyncGetMessage+0x2e>
	 				{
		 				Cl_ConsoleRetval1 = Cl_Console_Read_Message_Ready_Status(); // Reads the status of the data buffer populated by the timer console read interrupt.
   9bfb6:	4b06      	ldr	r3, [pc, #24]	; (9bfd0 <Cl_Console_SyncGetMessage+0x40>)
   9bfb8:	4798      	blx	r3
   9bfba:	4603      	mov	r3, r0
   9bfbc:	71fb      	strb	r3, [r7, #7]
					}
				 }
		return Cl_ConsoleRetval1;
   9bfbe:	79fb      	ldrb	r3, [r7, #7]
				 
  }
   9bfc0:	4618      	mov	r0, r3
   9bfc2:	3708      	adds	r7, #8
   9bfc4:	46bd      	mov	sp, r7
   9bfc6:	bd80      	pop	{r7, pc}
   9bfc8:	0009b6a1 	.word	0x0009b6a1
   9bfcc:	0009b705 	.word	0x0009b705
   9bfd0:	0009b6e1 	.word	0x0009b6e1

0009bfd4 <cl_console_receivedbyte>:
 * \ 
 * \return CL_OK on success. 
 * \Globals used : Cl_Console_buffer1,Cl_Console_buffer2
 */
Cl_ReturnCodeType  cl_console_receivedbyte(Cl_Uint8Type console_databyte)
{
   9bfd4:	b480      	push	{r7}
   9bfd6:	b083      	sub	sp, #12
   9bfd8:	af00      	add	r7, sp, #0
   9bfda:	4603      	mov	r3, r0
   9bfdc:	71fb      	strb	r3, [r7, #7]
	static Cl_Uint8Type prev_databyte =0 ;
	static unsigned int temp = 0;

	if(Cl_Console_buffer1.BufferEmpty)
   9bfde:	4b61      	ldr	r3, [pc, #388]	; (9c164 <cl_console_receivedbyte+0x190>)
   9bfe0:	7f1b      	ldrb	r3, [r3, #28]
   9bfe2:	2b00      	cmp	r3, #0
   9bfe4:	d009      	beq.n	9bffa <cl_console_receivedbyte+0x26>
	{
		if(Cl_Console_buffer2.BufferEmpty)
   9bfe6:	4b60      	ldr	r3, [pc, #384]	; (9c168 <cl_console_receivedbyte+0x194>)
   9bfe8:	7f1b      	ldrb	r3, [r3, #28]
   9bfea:	2b00      	cmp	r3, #0
   9bfec:	d005      	beq.n	9bffa <cl_console_receivedbyte+0x26>
			{
				Cl_Console_buffer1.CurreltyActive = true;
   9bfee:	4b5d      	ldr	r3, [pc, #372]	; (9c164 <cl_console_receivedbyte+0x190>)
   9bff0:	2201      	movs	r2, #1
   9bff2:	769a      	strb	r2, [r3, #26]
				Cl_Console_buffer2.CurreltyActive = false;					
   9bff4:	4b5c      	ldr	r3, [pc, #368]	; (9c168 <cl_console_receivedbyte+0x194>)
   9bff6:	2200      	movs	r2, #0
   9bff8:	769a      	strb	r2, [r3, #26]
			}
		
	}
	if(Cl_Console_buffer1.CurreltyActive == true )
   9bffa:	4b5a      	ldr	r3, [pc, #360]	; (9c164 <cl_console_receivedbyte+0x190>)
   9bffc:	7e9b      	ldrb	r3, [r3, #26]
   9bffe:	2b00      	cmp	r3, #0
   9c000:	d04e      	beq.n	9c0a0 <cl_console_receivedbyte+0xcc>
	{				
				if(Cl_Console_buffer1.StartSequenceDetected == false)
   9c002:	4b58      	ldr	r3, [pc, #352]	; (9c164 <cl_console_receivedbyte+0x190>)
   9c004:	7edb      	ldrb	r3, [r3, #27]
   9c006:	f083 0301 	eor.w	r3, r3, #1
   9c00a:	b2db      	uxtb	r3, r3
   9c00c:	2b00      	cmp	r3, #0
   9c00e:	d00a      	beq.n	9c026 <cl_console_receivedbyte+0x52>
				{
					if((prev_databyte == CL_CONSOLEMSG_STARTBYTE1) && (console_databyte == CL_CONSOLEMSG_STARTBYTE2))
   9c010:	4b56      	ldr	r3, [pc, #344]	; (9c16c <cl_console_receivedbyte+0x198>)
   9c012:	781b      	ldrb	r3, [r3, #0]
   9c014:	2bcc      	cmp	r3, #204	; 0xcc
   9c016:	d12e      	bne.n	9c076 <cl_console_receivedbyte+0xa2>
   9c018:	79fb      	ldrb	r3, [r7, #7]
   9c01a:	2bdd      	cmp	r3, #221	; 0xdd
   9c01c:	d12b      	bne.n	9c076 <cl_console_receivedbyte+0xa2>
						{
							Cl_Console_buffer1.StartSequenceDetected = true;
   9c01e:	4b51      	ldr	r3, [pc, #324]	; (9c164 <cl_console_receivedbyte+0x190>)
   9c020:	2201      	movs	r2, #1
   9c022:	76da      	strb	r2, [r3, #27]
   9c024:	e027      	b.n	9c076 <cl_console_receivedbyte+0xa2>
						}
				}
				else
				{
					Cl_Console_buffer1.Console_databuffer[Cl_Console_buffer1.Console_databuffer_write_idx] = console_databyte;
   9c026:	4b4f      	ldr	r3, [pc, #316]	; (9c164 <cl_console_receivedbyte+0x190>)
   9c028:	7d1b      	ldrb	r3, [r3, #20]
   9c02a:	4619      	mov	r1, r3
   9c02c:	4a4d      	ldr	r2, [pc, #308]	; (9c164 <cl_console_receivedbyte+0x190>)
   9c02e:	79fb      	ldrb	r3, [r7, #7]
   9c030:	5453      	strb	r3, [r2, r1]
					Cl_Console_buffer1.ConsoleNewData = true;
   9c032:	4b4c      	ldr	r3, [pc, #304]	; (9c164 <cl_console_receivedbyte+0x190>)
   9c034:	2201      	movs	r2, #1
   9c036:	75da      	strb	r2, [r3, #23]
					Cl_Console_buffer1.BufferEmpty = false;
   9c038:	4b4a      	ldr	r3, [pc, #296]	; (9c164 <cl_console_receivedbyte+0x190>)
   9c03a:	2200      	movs	r2, #0
   9c03c:	771a      	strb	r2, [r3, #28]
					if((prev_databyte == CL_CONSOLEMSG_STOPBYTE1) && (console_databyte == CL_CONSOLEMSG_STOPBYTE2))
   9c03e:	4b4b      	ldr	r3, [pc, #300]	; (9c16c <cl_console_receivedbyte+0x198>)
   9c040:	781b      	ldrb	r3, [r3, #0]
   9c042:	2bee      	cmp	r3, #238	; 0xee
   9c044:	d111      	bne.n	9c06a <cl_console_receivedbyte+0x96>
   9c046:	79fb      	ldrb	r3, [r7, #7]
   9c048:	2bbb      	cmp	r3, #187	; 0xbb
   9c04a:	d10e      	bne.n	9c06a <cl_console_receivedbyte+0x96>
						{
							Cl_Console_buffer1.ConsoleDatabufferReady = true;
   9c04c:	4b45      	ldr	r3, [pc, #276]	; (9c164 <cl_console_receivedbyte+0x190>)
   9c04e:	2201      	movs	r2, #1
   9c050:	761a      	strb	r2, [r3, #24]
							Cl_Console_buffer1.ConsoleDatabufferprocessed = false;
   9c052:	4b44      	ldr	r3, [pc, #272]	; (9c164 <cl_console_receivedbyte+0x190>)
   9c054:	2200      	movs	r2, #0
   9c056:	765a      	strb	r2, [r3, #25]
							Cl_Console_buffer1.Data_incomplete = false;
   9c058:	4b42      	ldr	r3, [pc, #264]	; (9c164 <cl_console_receivedbyte+0x190>)
   9c05a:	2200      	movs	r2, #0
   9c05c:	775a      	strb	r2, [r3, #29]
							Cl_Console_buffer1.CurreltyActive = false;
   9c05e:	4b41      	ldr	r3, [pc, #260]	; (9c164 <cl_console_receivedbyte+0x190>)
   9c060:	2200      	movs	r2, #0
   9c062:	769a      	strb	r2, [r3, #26]
							Cl_Console_buffer2.CurreltyActive =true;
   9c064:	4b40      	ldr	r3, [pc, #256]	; (9c168 <cl_console_receivedbyte+0x194>)
   9c066:	2201      	movs	r2, #1
   9c068:	769a      	strb	r2, [r3, #26]
						}
					
					Cl_Console_buffer1.Console_databuffer_write_idx++;
   9c06a:	4b3e      	ldr	r3, [pc, #248]	; (9c164 <cl_console_receivedbyte+0x190>)
   9c06c:	7d1b      	ldrb	r3, [r3, #20]
   9c06e:	3301      	adds	r3, #1
   9c070:	b2da      	uxtb	r2, r3
   9c072:	4b3c      	ldr	r3, [pc, #240]	; (9c164 <cl_console_receivedbyte+0x190>)
   9c074:	751a      	strb	r2, [r3, #20]
				}
				
				if(Cl_Console_buffer1.Console_databuffer_write_idx >= CONSOLE_BUFFER_SIZE)
   9c076:	4b3b      	ldr	r3, [pc, #236]	; (9c164 <cl_console_receivedbyte+0x190>)
   9c078:	7d1b      	ldrb	r3, [r3, #20]
   9c07a:	2b13      	cmp	r3, #19
   9c07c:	d90b      	bls.n	9c096 <cl_console_receivedbyte+0xc2>
					{
						Cl_Console_buffer1.ConsoleDatabufferReady = true ;
   9c07e:	4b39      	ldr	r3, [pc, #228]	; (9c164 <cl_console_receivedbyte+0x190>)
   9c080:	2201      	movs	r2, #1
   9c082:	761a      	strb	r2, [r3, #24]
						Cl_Console_buffer1.ConsoleDatabufferprocessed = false;
   9c084:	4b37      	ldr	r3, [pc, #220]	; (9c164 <cl_console_receivedbyte+0x190>)
   9c086:	2200      	movs	r2, #0
   9c088:	765a      	strb	r2, [r3, #25]
						Cl_Console_buffer1.CurreltyActive = false;
   9c08a:	4b36      	ldr	r3, [pc, #216]	; (9c164 <cl_console_receivedbyte+0x190>)
   9c08c:	2200      	movs	r2, #0
   9c08e:	769a      	strb	r2, [r3, #26]
						Cl_Console_buffer1.Data_incomplete = true;
   9c090:	4b34      	ldr	r3, [pc, #208]	; (9c164 <cl_console_receivedbyte+0x190>)
   9c092:	2201      	movs	r2, #1
   9c094:	775a      	strb	r2, [r3, #29]
						
					}

			prev_databyte = console_databyte; // we may have to compare start and stop sequences
   9c096:	4a35      	ldr	r2, [pc, #212]	; (9c16c <cl_console_receivedbyte+0x198>)
   9c098:	79fb      	ldrb	r3, [r7, #7]
   9c09a:	7013      	strb	r3, [r2, #0]
			
				return CL_ACCEPTED; // if we have just filled 
   9c09c:	2302      	movs	r3, #2
   9c09e:	e05b      	b.n	9c158 <cl_console_receivedbyte+0x184>
	}
	
	if(Cl_Console_buffer2.CurreltyActive == true )
   9c0a0:	4b31      	ldr	r3, [pc, #196]	; (9c168 <cl_console_receivedbyte+0x194>)
   9c0a2:	7e9b      	ldrb	r3, [r3, #26]
   9c0a4:	2b00      	cmp	r3, #0
   9c0a6:	d056      	beq.n	9c156 <cl_console_receivedbyte+0x182>
	{
		if(Cl_Console_buffer1.Data_incomplete == true)
   9c0a8:	4b2e      	ldr	r3, [pc, #184]	; (9c164 <cl_console_receivedbyte+0x190>)
   9c0aa:	7f5b      	ldrb	r3, [r3, #29]
   9c0ac:	2b00      	cmp	r3, #0
   9c0ae:	d002      	beq.n	9c0b6 <cl_console_receivedbyte+0xe2>
		{
			Cl_Console_buffer2.StartSequenceDetected = true;
   9c0b0:	4b2d      	ldr	r3, [pc, #180]	; (9c168 <cl_console_receivedbyte+0x194>)
   9c0b2:	2201      	movs	r2, #1
   9c0b4:	76da      	strb	r2, [r3, #27]
		}
				
		// Write to the buffer only when buffer is currently active and not full or packet ready
		
		if(Cl_Console_buffer2.StartSequenceDetected == false)
   9c0b6:	4b2c      	ldr	r3, [pc, #176]	; (9c168 <cl_console_receivedbyte+0x194>)
   9c0b8:	7edb      	ldrb	r3, [r3, #27]
   9c0ba:	f083 0301 	eor.w	r3, r3, #1
   9c0be:	b2db      	uxtb	r3, r3
   9c0c0:	2b00      	cmp	r3, #0
   9c0c2:	d00d      	beq.n	9c0e0 <cl_console_receivedbyte+0x10c>
		{
			
			if((prev_databyte == CL_CONSOLEMSG_STARTBYTE1) && (console_databyte == CL_CONSOLEMSG_STARTBYTE2))
   9c0c4:	4b29      	ldr	r3, [pc, #164]	; (9c16c <cl_console_receivedbyte+0x198>)
   9c0c6:	781b      	ldrb	r3, [r3, #0]
   9c0c8:	2bcc      	cmp	r3, #204	; 0xcc
   9c0ca:	d12e      	bne.n	9c12a <cl_console_receivedbyte+0x156>
   9c0cc:	79fb      	ldrb	r3, [r7, #7]
   9c0ce:	2bdd      	cmp	r3, #221	; 0xdd
   9c0d0:	d12b      	bne.n	9c12a <cl_console_receivedbyte+0x156>
			{
				Cl_Console_buffer2.StartSequenceDetected = true;
   9c0d2:	4b25      	ldr	r3, [pc, #148]	; (9c168 <cl_console_receivedbyte+0x194>)
   9c0d4:	2201      	movs	r2, #1
   9c0d6:	76da      	strb	r2, [r3, #27]
				Cl_Console_buffer2.Console_databuffer_write_idx = 0;
   9c0d8:	4b23      	ldr	r3, [pc, #140]	; (9c168 <cl_console_receivedbyte+0x194>)
   9c0da:	2200      	movs	r2, #0
   9c0dc:	751a      	strb	r2, [r3, #20]
   9c0de:	e024      	b.n	9c12a <cl_console_receivedbyte+0x156>
			}
		}
		else
		{
			Cl_Console_buffer2.Console_databuffer[Cl_Console_buffer2.Console_databuffer_write_idx] = console_databyte;
   9c0e0:	4b21      	ldr	r3, [pc, #132]	; (9c168 <cl_console_receivedbyte+0x194>)
   9c0e2:	7d1b      	ldrb	r3, [r3, #20]
   9c0e4:	4619      	mov	r1, r3
   9c0e6:	4a20      	ldr	r2, [pc, #128]	; (9c168 <cl_console_receivedbyte+0x194>)
   9c0e8:	79fb      	ldrb	r3, [r7, #7]
   9c0ea:	5453      	strb	r3, [r2, r1]
			Cl_Console_buffer2.ConsoleNewData = true;
   9c0ec:	4b1e      	ldr	r3, [pc, #120]	; (9c168 <cl_console_receivedbyte+0x194>)
   9c0ee:	2201      	movs	r2, #1
   9c0f0:	75da      	strb	r2, [r3, #23]
			Cl_Console_buffer2.BufferEmpty = false;
   9c0f2:	4b1d      	ldr	r3, [pc, #116]	; (9c168 <cl_console_receivedbyte+0x194>)
   9c0f4:	2200      	movs	r2, #0
   9c0f6:	771a      	strb	r2, [r3, #28]
		if((prev_databyte == CL_CONSOLEMSG_STOPBYTE1) && (console_databyte == CL_CONSOLEMSG_STOPBYTE2))
   9c0f8:	4b1c      	ldr	r3, [pc, #112]	; (9c16c <cl_console_receivedbyte+0x198>)
   9c0fa:	781b      	ldrb	r3, [r3, #0]
   9c0fc:	2bee      	cmp	r3, #238	; 0xee
   9c0fe:	d10e      	bne.n	9c11e <cl_console_receivedbyte+0x14a>
   9c100:	79fb      	ldrb	r3, [r7, #7]
   9c102:	2bbb      	cmp	r3, #187	; 0xbb
   9c104:	d10b      	bne.n	9c11e <cl_console_receivedbyte+0x14a>
			{
				Cl_Console_buffer2.ConsoleDatabufferReady = true;
   9c106:	4b18      	ldr	r3, [pc, #96]	; (9c168 <cl_console_receivedbyte+0x194>)
   9c108:	2201      	movs	r2, #1
   9c10a:	761a      	strb	r2, [r3, #24]
				Cl_Console_buffer2.ConsoleDatabufferprocessed = false;
   9c10c:	4b16      	ldr	r3, [pc, #88]	; (9c168 <cl_console_receivedbyte+0x194>)
   9c10e:	2200      	movs	r2, #0
   9c110:	765a      	strb	r2, [r3, #25]
				Cl_Console_buffer1.CurreltyActive = true;
   9c112:	4b14      	ldr	r3, [pc, #80]	; (9c164 <cl_console_receivedbyte+0x190>)
   9c114:	2201      	movs	r2, #1
   9c116:	769a      	strb	r2, [r3, #26]
				Cl_Console_buffer2.CurreltyActive = false;
   9c118:	4b13      	ldr	r3, [pc, #76]	; (9c168 <cl_console_receivedbyte+0x194>)
   9c11a:	2200      	movs	r2, #0
   9c11c:	769a      	strb	r2, [r3, #26]
			}
			Cl_Console_buffer2.Console_databuffer_write_idx++;
   9c11e:	4b12      	ldr	r3, [pc, #72]	; (9c168 <cl_console_receivedbyte+0x194>)
   9c120:	7d1b      	ldrb	r3, [r3, #20]
   9c122:	3301      	adds	r3, #1
   9c124:	b2da      	uxtb	r2, r3
   9c126:	4b10      	ldr	r3, [pc, #64]	; (9c168 <cl_console_receivedbyte+0x194>)
   9c128:	751a      	strb	r2, [r3, #20]
				
		}
					
		if(Cl_Console_buffer2.Console_databuffer_write_idx > CONSOLE_BUFFER_SIZE)
   9c12a:	4b0f      	ldr	r3, [pc, #60]	; (9c168 <cl_console_receivedbyte+0x194>)
   9c12c:	7d1b      	ldrb	r3, [r3, #20]
   9c12e:	2b14      	cmp	r3, #20
   9c130:	d90b      	bls.n	9c14a <cl_console_receivedbyte+0x176>
		{
			Cl_Console_buffer2.ConsoleDatabufferReady = true ;
   9c132:	4b0d      	ldr	r3, [pc, #52]	; (9c168 <cl_console_receivedbyte+0x194>)
   9c134:	2201      	movs	r2, #1
   9c136:	761a      	strb	r2, [r3, #24]
			Cl_Console_buffer2.CurreltyActive = false;
   9c138:	4b0b      	ldr	r3, [pc, #44]	; (9c168 <cl_console_receivedbyte+0x194>)
   9c13a:	2200      	movs	r2, #0
   9c13c:	769a      	strb	r2, [r3, #26]
			Cl_Console_buffer2.Data_incomplete = true;
   9c13e:	4b0a      	ldr	r3, [pc, #40]	; (9c168 <cl_console_receivedbyte+0x194>)
   9c140:	2201      	movs	r2, #1
   9c142:	775a      	strb	r2, [r3, #29]
			Cl_Console_buffer1.Data_incomplete = false;
   9c144:	4b07      	ldr	r3, [pc, #28]	; (9c164 <cl_console_receivedbyte+0x190>)
   9c146:	2200      	movs	r2, #0
   9c148:	775a      	strb	r2, [r3, #29]
		}

	if (Cl_Console_buffer2.Data_incomplete && Cl_Console_buffer1.Data_incomplete )
   9c14a:	4b07      	ldr	r3, [pc, #28]	; (9c168 <cl_console_receivedbyte+0x194>)
   9c14c:	7f5b      	ldrb	r3, [r3, #29]
   9c14e:	2b00      	cmp	r3, #0
	{
		//printf("buffer overflow\n");
	}

			prev_databyte = console_databyte; // we may have to compare start and stop sequences
   9c150:	4a06      	ldr	r2, [pc, #24]	; (9c16c <cl_console_receivedbyte+0x198>)
   9c152:	79fb      	ldrb	r3, [r7, #7]
   9c154:	7013      	strb	r3, [r2, #0]
	}
	
	return CL_ACCEPTED;
   9c156:	2302      	movs	r3, #2
}
   9c158:	4618      	mov	r0, r3
   9c15a:	370c      	adds	r7, #12
   9c15c:	46bd      	mov	sp, r7
   9c15e:	f85d 7b04 	ldr.w	r7, [sp], #4
   9c162:	4770      	bx	lr
   9c164:	2007240c 	.word	0x2007240c
   9c168:	20072278 	.word	0x20072278
   9c16c:	20071be4 	.word	0x20071be4

0009c170 <ioport_toggle_pin_level>:
 * an output.
 *
 * \param pin IOPORT pin to toggle
 */
static inline void ioport_toggle_pin_level(ioport_pin_t pin)
{
   9c170:	b480      	push	{r7}
   9c172:	b08b      	sub	sp, #44	; 0x2c
   9c174:	af00      	add	r7, sp, #0
   9c176:	6078      	str	r0, [r7, #4]
   9c178:	687b      	ldr	r3, [r7, #4]
   9c17a:	627b      	str	r3, [r7, #36]	; 0x24
   9c17c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   9c17e:	623b      	str	r3, [r7, #32]
   9c180:	6a3b      	ldr	r3, [r7, #32]
   9c182:	61fb      	str	r3, [r7, #28]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
   9c184:	69fb      	ldr	r3, [r7, #28]
   9c186:	095b      	lsrs	r3, r3, #5
   9c188:	61bb      	str	r3, [r7, #24]
}

__always_inline static Pio *arch_ioport_port_to_base(ioport_port_t port)
{
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   9c18a:	69bb      	ldr	r3, [r7, #24]
   9c18c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   9c190:	f203 7307 	addw	r3, r3, #1799	; 0x707
   9c194:	025b      	lsls	r3, r3, #9
	return arch_ioport_port_to_base(port)->PIO_PDSR & mask;
}

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
   9c196:	617b      	str	r3, [r7, #20]
   9c198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   9c19a:	613b      	str	r3, [r7, #16]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   9c19c:	693b      	ldr	r3, [r7, #16]
   9c19e:	f003 031f 	and.w	r3, r3, #31
   9c1a2:	2201      	movs	r2, #1
   9c1a4:	fa02 f303 	lsl.w	r3, r2, r3
}

__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);
   9c1a8:	60fb      	str	r3, [r7, #12]

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
   9c1aa:	697b      	ldr	r3, [r7, #20]
   9c1ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   9c1ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   9c1b0:	60bb      	str	r3, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   9c1b2:	68bb      	ldr	r3, [r7, #8]
   9c1b4:	f003 031f 	and.w	r3, r3, #31
   9c1b8:	2101      	movs	r1, #1
   9c1ba:	fa01 f303 	lsl.w	r3, r1, r3
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
   9c1be:	4013      	ands	r3, r2
   9c1c0:	2b00      	cmp	r3, #0
   9c1c2:	d003      	beq.n	9c1cc <ioport_toggle_pin_level+0x5c>
		port->PIO_CODR = mask;
   9c1c4:	697b      	ldr	r3, [r7, #20]
   9c1c6:	68fa      	ldr	r2, [r7, #12]
   9c1c8:	635a      	str	r2, [r3, #52]	; 0x34
   9c1ca:	e002      	b.n	9c1d2 <ioport_toggle_pin_level+0x62>
	} else {
		port->PIO_SODR = mask;
   9c1cc:	697b      	ldr	r3, [r7, #20]
   9c1ce:	68fa      	ldr	r2, [r7, #12]
   9c1d0:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_toggle_pin_level(pin);
}
   9c1d2:	372c      	adds	r7, #44	; 0x2c
   9c1d4:	46bd      	mov	sp, r7
   9c1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
   9c1da:	4770      	bx	lr

0009c1dc <TC1_Handler>:
			(IRQn_Type) PIN_PUSHBUTTON_2_ID, IRQ_PRIOR_PIO);
	pio_enable_interrupt(PIN_PUSHBUTTON_2_PIO, PIN_PUSHBUTTON_2_MASK);
#endif
}
void TC1_Handler(void)
{
   9c1dc:	b580      	push	{r7, lr}
   9c1de:	af00      	add	r7, sp, #0
			
//printf("TC1_Handler\n");
		
		#ifdef LED0_GPIO
		/** Toggle LED state. */
		if (g_b_led0_active) {
   9c1e0:	4b04      	ldr	r3, [pc, #16]	; (9c1f4 <TC1_Handler+0x18>)
   9c1e2:	781b      	ldrb	r3, [r3, #0]
   9c1e4:	b2db      	uxtb	r3, r3
   9c1e6:	2b00      	cmp	r3, #0
   9c1e8:	d002      	beq.n	9c1f0 <TC1_Handler+0x14>
		ioport_toggle_pin_level(LED0_GPIO);
   9c1ea:	203b      	movs	r0, #59	; 0x3b
   9c1ec:	4b02      	ldr	r3, [pc, #8]	; (9c1f8 <TC1_Handler+0x1c>)
   9c1ee:	4798      	blx	r3
		}
		#endif
}
   9c1f0:	bd80      	pop	{r7, pc}
   9c1f2:	bf00      	nop
   9c1f4:	20070b85 	.word	0x20070b85
   9c1f8:	0009c171 	.word	0x0009c171

0009c1fc <Cl_disinf_init>:
 * \return CL_OK on success. 
 * \Globals used : 
 */

 Cl_ReturnCodeType Cl_disinf_init(void)
 {
   9c1fc:	b480      	push	{r7}
   9c1fe:	af00      	add	r7, sp, #0
	 Cl_ReturnCodeType cl_disinf_retval;
	
	 return CL_OK;
   9c200:	2300      	movs	r3, #0
 }
   9c202:	4618      	mov	r0, r3
   9c204:	46bd      	mov	sp, r7
   9c206:	f85d 7b04 	ldr.w	r7, [sp], #4
   9c20a:	4770      	bx	lr
   9c20c:	0000      	movs	r0, r0
	...

0009c210 <Cl_disinf_controller>:
 * \ 
 * \return CL_OK on success. 
 * \Globals used : cl_disinfstate,Cl_ConsoleRxMsg
 */
Cl_ReturnCodeType Cl_disinf_controller(Cl_Mac_EventsType Cl_MacDisinfEvent)
{
   9c210:	b590      	push	{r4, r7, lr}
   9c212:	b08d      	sub	sp, #52	; 0x34
   9c214:	af02      	add	r7, sp, #8
   9c216:	4603      	mov	r3, r0
   9c218:	71fb      	strb	r3, [r7, #7]
		Cl_ReturnCodeType  Cl_disinfretcode = CL_OK;
   9c21a:	2300      	movs	r3, #0
   9c21c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		Cl_disinf_Eevents cl_disinfevent = EVENT_NULL_EVENT;
   9c220:	2300      	movs	r3, #0
   9c222:	76fb      	strb	r3, [r7, #27]
		Cl_NewAlarmIdType cl_disinfalarmid;
		CldisinfAlarmIdType CldisinfAlarmId;

		
		Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9c224:	2351      	movs	r3, #81	; 0x51
   9c226:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		Cl_Uint8Type dataarray[4] = {0,0,0,0};
   9c22a:	2300      	movs	r3, #0
   9c22c:	753b      	strb	r3, [r7, #20]
   9c22e:	2300      	movs	r3, #0
   9c230:	757b      	strb	r3, [r7, #21]
   9c232:	2300      	movs	r3, #0
   9c234:	75bb      	strb	r3, [r7, #22]
   9c236:	2300      	movs	r3, #0
   9c238:	75fb      	strb	r3, [r7, #23]
		Cl_Uint8Type data = 0;
   9c23a:	2300      	movs	r3, #0
   9c23c:	74fb      	strb	r3, [r7, #19]
		Cl_BoolType alarmstatus1 = false,alarmstatus2 = false,alarmstatus3 = false, flowstatus = false;
   9c23e:	2300      	movs	r3, #0
   9c240:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
   9c244:	2300      	movs	r3, #0
   9c246:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
   9c24a:	2300      	movs	r3, #0
   9c24c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   9c250:	2300      	movs	r3, #0
   9c252:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22


		Cl_disinfretcode = cl_disinf_translatemacevent(Cl_MacDisinfEvent,&cl_disinfevent);
   9c256:	79fa      	ldrb	r2, [r7, #7]
   9c258:	f107 031b 	add.w	r3, r7, #27
   9c25c:	4610      	mov	r0, r2
   9c25e:	4619      	mov	r1, r3
   9c260:	4bb8      	ldr	r3, [pc, #736]	; (9c544 <Cl_disinf_controller+0x334>)
   9c262:	4798      	blx	r3
   9c264:	4603      	mov	r3, r0
   9c266:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		
		
		
		switch(cl_disinfstate)
   9c26a:	4bb7      	ldr	r3, [pc, #732]	; (9c548 <Cl_disinf_controller+0x338>)
   9c26c:	781b      	ldrb	r3, [r3, #0]
   9c26e:	2b11      	cmp	r3, #17
   9c270:	f201 81eb 	bhi.w	9d64a <Cl_disinf_controller+0x143a>
   9c274:	a201      	add	r2, pc, #4	; (adr r2, 9c27c <Cl_disinf_controller+0x6c>)
   9c276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9c27a:	bf00      	nop
   9c27c:	0009c2c5 	.word	0x0009c2c5
   9c280:	0009d64b 	.word	0x0009d64b
   9c284:	0009d64b 	.word	0x0009d64b
   9c288:	0009c3e5 	.word	0x0009c3e5
   9c28c:	0009c4eb 	.word	0x0009c4eb
   9c290:	0009c8f5 	.word	0x0009c8f5
   9c294:	0009c9fd 	.word	0x0009c9fd
   9c298:	0009cc93 	.word	0x0009cc93
   9c29c:	0009cee9 	.word	0x0009cee9
   9c2a0:	0009d17d 	.word	0x0009d17d
   9c2a4:	0009d1c7 	.word	0x0009d1c7
   9c2a8:	0009d64b 	.word	0x0009d64b
   9c2ac:	0009d3f5 	.word	0x0009d3f5
   9c2b0:	0009d64b 	.word	0x0009d64b
   9c2b4:	0009d64b 	.word	0x0009d64b
   9c2b8:	0009d36d 	.word	0x0009d36d
   9c2bc:	0009c6c5 	.word	0x0009c6c5
   9c2c0:	0009cded 	.word	0x0009cded
		{

			case CL_DISINF_STATE_INIT:
			break;
			case CL_DISINF_STATE_IDLE:
			switch (cl_disinfevent)
   9c2c4:	7efb      	ldrb	r3, [r7, #27]
   9c2c6:	2b03      	cmp	r3, #3
   9c2c8:	d048      	beq.n	9c35c <Cl_disinf_controller+0x14c>
   9c2ca:	2b14      	cmp	r3, #20
   9c2cc:	d002      	beq.n	9c2d4 <Cl_disinf_controller+0xc4>
   9c2ce:	2b01      	cmp	r3, #1
   9c2d0:	d047      	beq.n	9c362 <Cl_disinf_controller+0x152>
				Cl_disinfretcode = Cl_mac_apprequesthandler(MACREQ_START_PRE_DISINF_RINSE);
				cl_disinfstate = CL_DISINF_STATE_FIRST_RO_RINSE;
				break;
				
				default:
				break;
   9c2d2:	e085      	b.n	9c3e0 <Cl_disinf_controller+0x1d0>
			break;
			case CL_DISINF_STATE_IDLE:
			switch (cl_disinfevent)
			{
				case EVT_DISINF_GET_DATA:
				if(Cl_ConsoleRxMsg.msgready == true)
   9c2d4:	4b9d      	ldr	r3, [pc, #628]	; (9c54c <Cl_disinf_controller+0x33c>)
   9c2d6:	7e1b      	ldrb	r3, [r3, #24]
   9c2d8:	2b00      	cmp	r3, #0
   9c2da:	d03e      	beq.n	9c35a <Cl_disinf_controller+0x14a>
				{
					
					switch(Cl_ConsoleRxMsg.data.byte[0])
   9c2dc:	4b9b      	ldr	r3, [pc, #620]	; (9c54c <Cl_disinf_controller+0x33c>)
   9c2de:	791b      	ldrb	r3, [r3, #4]
   9c2e0:	2b02      	cmp	r3, #2
   9c2e2:	d01e      	beq.n	9c322 <Cl_disinf_controller+0x112>
   9c2e4:	2b21      	cmp	r3, #33	; 0x21
   9c2e6:	d000      	beq.n	9c2ea <Cl_disinf_controller+0xda>
						command = CON_TX_COMMAND_SYSDATA;
						dataarray[0] = CON_TX_PARAM_DATA_PRIME_STATUS;
						Cl_disinfretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_PRIME_STATUS, &dataarray[1]);
						Cl_disinfretcode = Cl_SendDatatoconsole(command,&dataarray,2);
						default:
						break;
   9c2e8:	e036      	b.n	9c358 <Cl_disinf_controller+0x148>
				{
					
					switch(Cl_ConsoleRxMsg.data.byte[0])
					{
						case CON_RX_PARAM_DATA_DISINF_STATUS:
						command = CON_TX_COMMAND_SYSDATA;
   9c2ea:	2316      	movs	r3, #22
   9c2ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
						dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;
   9c2f0:	2323      	movs	r3, #35	; 0x23
   9c2f2:	753b      	strb	r3, [r7, #20]
						Cl_disinfretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DISINF_STATUS, &dataarray[1]);
   9c2f4:	f107 0314 	add.w	r3, r7, #20
   9c2f8:	3301      	adds	r3, #1
   9c2fa:	2028      	movs	r0, #40	; 0x28
   9c2fc:	4619      	mov	r1, r3
   9c2fe:	4b94      	ldr	r3, [pc, #592]	; (9c550 <Cl_disinf_controller+0x340>)
   9c300:	4798      	blx	r3
   9c302:	4603      	mov	r3, r0
   9c304:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						Cl_disinfretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   9c308:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   9c30c:	f107 0314 	add.w	r3, r7, #20
   9c310:	4610      	mov	r0, r2
   9c312:	4619      	mov	r1, r3
   9c314:	2202      	movs	r2, #2
   9c316:	4b8f      	ldr	r3, [pc, #572]	; (9c554 <Cl_disinf_controller+0x344>)
   9c318:	4798      	blx	r3
   9c31a:	4603      	mov	r3, r0
   9c31c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						
						break;
   9c320:	e01b      	b.n	9c35a <Cl_disinf_controller+0x14a>
						case CON_RX_PARAM_DATA_PRIME_STATUS:
						command = CON_TX_COMMAND_SYSDATA;
   9c322:	2316      	movs	r3, #22
   9c324:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
						dataarray[0] = CON_TX_PARAM_DATA_PRIME_STATUS;
   9c328:	2302      	movs	r3, #2
   9c32a:	753b      	strb	r3, [r7, #20]
						Cl_disinfretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_PRIME_STATUS, &dataarray[1]);
   9c32c:	f107 0314 	add.w	r3, r7, #20
   9c330:	3301      	adds	r3, #1
   9c332:	2002      	movs	r0, #2
   9c334:	4619      	mov	r1, r3
   9c336:	4b86      	ldr	r3, [pc, #536]	; (9c550 <Cl_disinf_controller+0x340>)
   9c338:	4798      	blx	r3
   9c33a:	4603      	mov	r3, r0
   9c33c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						Cl_disinfretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   9c340:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   9c344:	f107 0314 	add.w	r3, r7, #20
   9c348:	4610      	mov	r0, r2
   9c34a:	4619      	mov	r1, r3
   9c34c:	2202      	movs	r2, #2
   9c34e:	4b81      	ldr	r3, [pc, #516]	; (9c554 <Cl_disinf_controller+0x344>)
   9c350:	4798      	blx	r3
   9c352:	4603      	mov	r3, r0
   9c354:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						default:
						break;
   9c358:	bf00      	nop
					}
				}
				break;
   9c35a:	e041      	b.n	9c3e0 <Cl_disinf_controller+0x1d0>
				
				case EVENT_STOP_DISINF:
				Cl_Disinf_StopDisinf();
   9c35c:	4b7e      	ldr	r3, [pc, #504]	; (9c558 <Cl_disinf_controller+0x348>)
   9c35e:	4798      	blx	r3
				break;
   9c360:	e03e      	b.n	9c3e0 <Cl_disinf_controller+0x1d0>
				
				case EVENT_START_DISINF:
				
				cl_wait(20);
   9c362:	2014      	movs	r0, #20
   9c364:	4b7d      	ldr	r3, [pc, #500]	; (9c55c <Cl_disinf_controller+0x34c>)
   9c366:	4798      	blx	r3
				if(Cl_ConsoleRxMsg.msgready == true)
   9c368:	4b78      	ldr	r3, [pc, #480]	; (9c54c <Cl_disinf_controller+0x33c>)
   9c36a:	7e1b      	ldrb	r3, [r3, #24]
   9c36c:	2b00      	cmp	r3, #0
   9c36e:	d01a      	beq.n	9c3a6 <Cl_disinf_controller+0x196>
				{
					
 					cl_temp_diinftype.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   9c370:	4b76      	ldr	r3, [pc, #472]	; (9c54c <Cl_disinf_controller+0x33c>)
   9c372:	791a      	ldrb	r2, [r3, #4]
   9c374:	4b7a      	ldr	r3, [pc, #488]	; (9c560 <Cl_disinf_controller+0x350>)
   9c376:	701a      	strb	r2, [r3, #0]
 					if (cl_temp_diinftype.bytearray[0] == 4)
   9c378:	4b79      	ldr	r3, [pc, #484]	; (9c560 <Cl_disinf_controller+0x350>)
   9c37a:	781b      	ldrb	r3, [r3, #0]
   9c37c:	2b04      	cmp	r3, #4
   9c37e:	d103      	bne.n	9c388 <Cl_disinf_controller+0x178>
 					{
 						flag_hotcitric = 1;
   9c380:	4b78      	ldr	r3, [pc, #480]	; (9c564 <Cl_disinf_controller+0x354>)
   9c382:	2201      	movs	r2, #1
   9c384:	701a      	strb	r2, [r3, #0]
   9c386:	e00e      	b.n	9c3a6 <Cl_disinf_controller+0x196>
 					}
 					else if (cl_temp_diinftype.bytearray[0] == 3)
   9c388:	4b75      	ldr	r3, [pc, #468]	; (9c560 <Cl_disinf_controller+0x350>)
   9c38a:	781b      	ldrb	r3, [r3, #0]
   9c38c:	2b03      	cmp	r3, #3
   9c38e:	d103      	bne.n	9c398 <Cl_disinf_controller+0x188>
 					{
 						flag_na = 1;
   9c390:	4b75      	ldr	r3, [pc, #468]	; (9c568 <Cl_disinf_controller+0x358>)
   9c392:	2201      	movs	r2, #1
   9c394:	701a      	strb	r2, [r3, #0]
   9c396:	e006      	b.n	9c3a6 <Cl_disinf_controller+0x196>
 					}
 					else if(cl_temp_diinftype.bytearray[0] == 5){
   9c398:	4b71      	ldr	r3, [pc, #452]	; (9c560 <Cl_disinf_controller+0x350>)
   9c39a:	781b      	ldrb	r3, [r3, #0]
   9c39c:	2b05      	cmp	r3, #5
   9c39e:	d102      	bne.n	9c3a6 <Cl_disinf_controller+0x196>
 						
 						flag_citric = 1;
   9c3a0:	4b72      	ldr	r3, [pc, #456]	; (9c56c <Cl_disinf_controller+0x35c>)
   9c3a2:	2201      	movs	r2, #1
   9c3a4:	701a      	strb	r2, [r3, #0]
 					}
 					
				}
				
				command = CON_TX_COMMAND_DISINF_STARTED;
   9c3a6:	233c      	movs	r3, #60	; 0x3c
   9c3a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				data = (Cl_Uint8Type)COMMAND_RESULT_SUCCESS;
   9c3ac:	2301      	movs	r3, #1
   9c3ae:	74fb      	strb	r3, [r7, #19]
				Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,1);
   9c3b0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   9c3b4:	f107 0313 	add.w	r3, r7, #19
   9c3b8:	4610      	mov	r0, r2
   9c3ba:	4619      	mov	r1, r3
   9c3bc:	2201      	movs	r2, #1
   9c3be:	4b65      	ldr	r3, [pc, #404]	; (9c554 <Cl_disinf_controller+0x344>)
   9c3c0:	4798      	blx	r3
   9c3c2:	4603      	mov	r3, r0
   9c3c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				Cl_Disinf_UpdateTimeInfo();
   9c3c8:	4b69      	ldr	r3, [pc, #420]	; (9c570 <Cl_disinf_controller+0x360>)
   9c3ca:	4798      	blx	r3
				Cl_disinfretcode = Cl_mac_apprequesthandler(MACREQ_START_PRE_DISINF_RINSE);
   9c3cc:	2044      	movs	r0, #68	; 0x44
   9c3ce:	4b69      	ldr	r3, [pc, #420]	; (9c574 <Cl_disinf_controller+0x364>)
   9c3d0:	4798      	blx	r3
   9c3d2:	4603      	mov	r3, r0
   9c3d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				cl_disinfstate = CL_DISINF_STATE_FIRST_RO_RINSE;
   9c3d8:	4b5b      	ldr	r3, [pc, #364]	; (9c548 <Cl_disinf_controller+0x338>)
   9c3da:	2203      	movs	r2, #3
   9c3dc:	701a      	strb	r2, [r3, #0]
				break;
   9c3de:	bf00      	nop
				default:
				break;
				
				
			}
			break;
   9c3e0:	f001 b93a 	b.w	9d658 <Cl_disinf_controller+0x1448>
			case CL_DISINF_STATE_FIRST_RO_RINSE:
				switch ( cl_disinfevent)
   9c3e4:	7efb      	ldrb	r3, [r7, #27]
   9c3e6:	3b03      	subs	r3, #3
   9c3e8:	2b1f      	cmp	r3, #31
   9c3ea:	d87b      	bhi.n	9c4e4 <Cl_disinf_controller+0x2d4>
   9c3ec:	a201      	add	r2, pc, #4	; (adr r2, 9c3f4 <Cl_disinf_controller+0x1e4>)
   9c3ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9c3f2:	bf00      	nop
   9c3f4:	0009c475 	.word	0x0009c475
   9c3f8:	0009c4e5 	.word	0x0009c4e5
   9c3fc:	0009c4e5 	.word	0x0009c4e5
   9c400:	0009c4e5 	.word	0x0009c4e5
   9c404:	0009c4e5 	.word	0x0009c4e5
   9c408:	0009c4e5 	.word	0x0009c4e5
   9c40c:	0009c4e5 	.word	0x0009c4e5
   9c410:	0009c4e5 	.word	0x0009c4e5
   9c414:	0009c4e5 	.word	0x0009c4e5
   9c418:	0009c4e5 	.word	0x0009c4e5
   9c41c:	0009c4e5 	.word	0x0009c4e5
   9c420:	0009c4e5 	.word	0x0009c4e5
   9c424:	0009c4c7 	.word	0x0009c4c7
   9c428:	0009c4e5 	.word	0x0009c4e5
   9c42c:	0009c4e5 	.word	0x0009c4e5
   9c430:	0009c4e5 	.word	0x0009c4e5
   9c434:	0009c47b 	.word	0x0009c47b
   9c438:	0009c4e5 	.word	0x0009c4e5
   9c43c:	0009c4e5 	.word	0x0009c4e5
   9c440:	0009c4e5 	.word	0x0009c4e5
   9c444:	0009c4e5 	.word	0x0009c4e5
   9c448:	0009c4e5 	.word	0x0009c4e5
   9c44c:	0009c4e5 	.word	0x0009c4e5
   9c450:	0009c4e5 	.word	0x0009c4e5
   9c454:	0009c4e5 	.word	0x0009c4e5
   9c458:	0009c4e5 	.word	0x0009c4e5
   9c45c:	0009c4e5 	.word	0x0009c4e5
   9c460:	0009c4e5 	.word	0x0009c4e5
   9c464:	0009c4e5 	.word	0x0009c4e5
   9c468:	0009c4e5 	.word	0x0009c4e5
   9c46c:	0009c4e5 	.word	0x0009c4e5
   9c470:	0009c487 	.word	0x0009c487
				{
					
					case EVENT_STOP_DISINF:
					Cl_Disinf_StopDisinf();
   9c474:	4b38      	ldr	r3, [pc, #224]	; (9c558 <Cl_disinf_controller+0x348>)
   9c476:	4798      	blx	r3
					break;
   9c478:	e035      	b.n	9c4e6 <Cl_disinf_controller+0x2d6>
					
					
					case EVENT_DISINF_ALARM:
					
					Cl_disinfretcode =  Cl_disinf_ProcessAlarms();
   9c47a:	4b3f      	ldr	r3, [pc, #252]	; (9c578 <Cl_disinf_controller+0x368>)
   9c47c:	4798      	blx	r3
   9c47e:	4603      	mov	r3, r0
   9c480:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					break;
   9c484:	e02f      	b.n	9c4e6 <Cl_disinf_controller+0x2d6>
					
					
					
					
					//Send Pause
					CSeventcount = 0;
   9c486:	4b3d      	ldr	r3, [pc, #244]	; (9c57c <Cl_disinf_controller+0x36c>)
   9c488:	2200      	movs	r2, #0
   9c48a:	601a      	str	r2, [r3, #0]
					 IntakeReadyFlag = true;
   9c48c:	4b3c      	ldr	r3, [pc, #240]	; (9c580 <Cl_disinf_controller+0x370>)
   9c48e:	2201      	movs	r2, #1
   9c490:	701a      	strb	r2, [r3, #0]
					 sv_cntrl_deactivate_valve(VALVE_ID1);
   9c492:	2001      	movs	r0, #1
   9c494:	4b3b      	ldr	r3, [pc, #236]	; (9c584 <Cl_disinf_controller+0x374>)
   9c496:	4798      	blx	r3
					 sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   9c498:	2002      	movs	r0, #2
   9c49a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   9c49e:	4b3a      	ldr	r3, [pc, #232]	; (9c588 <Cl_disinf_controller+0x378>)
   9c4a0:	4798      	blx	r3
					 sv_cntrl_setpumpspeed(DCMOTOR1,1000);
   9c4a2:	2001      	movs	r0, #1
   9c4a4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   9c4a8:	4b37      	ldr	r3, [pc, #220]	; (9c588 <Cl_disinf_controller+0x378>)
   9c4aa:	4798      	blx	r3
					 sv_cntrl_activatepump(DCMOTOR1);
   9c4ac:	2001      	movs	r0, #1
   9c4ae:	4b37      	ldr	r3, [pc, #220]	; (9c58c <Cl_disinf_controller+0x37c>)
   9c4b0:	4798      	blx	r3
					 sv_cntrl_activatepump(DCMOTOR2);
   9c4b2:	2002      	movs	r0, #2
   9c4b4:	4b35      	ldr	r3, [pc, #212]	; (9c58c <Cl_disinf_controller+0x37c>)
   9c4b6:	4798      	blx	r3
					 
					 Cl_bc_controller(BC_EVENT_DISINF_INTAKE);
   9c4b8:	200f      	movs	r0, #15
   9c4ba:	4b35      	ldr	r3, [pc, #212]	; (9c590 <Cl_disinf_controller+0x380>)
   9c4bc:	4798      	blx	r3
					 
					cl_disinfstate = CL_DISINF_STATE_FIRST_RO_RINSCOMPLETED;
   9c4be:	4b22      	ldr	r3, [pc, #136]	; (9c548 <Cl_disinf_controller+0x338>)
   9c4c0:	2204      	movs	r2, #4
   9c4c2:	701a      	strb	r2, [r3, #0]
					
					break;
   9c4c4:	e00f      	b.n	9c4e6 <Cl_disinf_controller+0x2d6>
					case EVENT_DISINF_TICK_SECOND:
									
					Cl_disinfsecondscounter++;
   9c4c6:	4b33      	ldr	r3, [pc, #204]	; (9c594 <Cl_disinf_controller+0x384>)
   9c4c8:	681b      	ldr	r3, [r3, #0]
   9c4ca:	3301      	adds	r3, #1
   9c4cc:	4a31      	ldr	r2, [pc, #196]	; (9c594 <Cl_disinf_controller+0x384>)
   9c4ce:	6013      	str	r3, [r2, #0]
					Cl_Disinf_SendDisinfStateData();
   9c4d0:	4b31      	ldr	r3, [pc, #196]	; (9c598 <Cl_disinf_controller+0x388>)
   9c4d2:	4798      	blx	r3
					if(Cl_disinfsecondscounter == 60)
   9c4d4:	4b2f      	ldr	r3, [pc, #188]	; (9c594 <Cl_disinf_controller+0x384>)
   9c4d6:	681b      	ldr	r3, [r3, #0]
   9c4d8:	2b3c      	cmp	r3, #60	; 0x3c
   9c4da:	d102      	bne.n	9c4e2 <Cl_disinf_controller+0x2d2>
					{
	
						UpdateDisinfMinuteTick();
   9c4dc:	4b2f      	ldr	r3, [pc, #188]	; (9c59c <Cl_disinf_controller+0x38c>)
   9c4de:	4798      	blx	r3
						
							
					}

					break;
   9c4e0:	e001      	b.n	9c4e6 <Cl_disinf_controller+0x2d6>
   9c4e2:	e000      	b.n	9c4e6 <Cl_disinf_controller+0x2d6>
					
					default:break;
   9c4e4:	bf00      	nop
				}
				
			break;
   9c4e6:	f001 b8b7 	b.w	9d658 <Cl_disinf_controller+0x1448>
			
			case CL_DISINF_STATE_FIRST_RO_RINSCOMPLETED:
				switch ( cl_disinfevent)
   9c4ea:	7efb      	ldrb	r3, [r7, #27]
   9c4ec:	3b02      	subs	r3, #2
   9c4ee:	2b11      	cmp	r3, #17
   9c4f0:	f200 80e5 	bhi.w	9c6be <Cl_disinf_controller+0x4ae>
   9c4f4:	a201      	add	r2, pc, #4	; (adr r2, 9c4fc <Cl_disinf_controller+0x2ec>)
   9c4f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9c4fa:	bf00      	nop
   9c4fc:	0009c609 	.word	0x0009c609
   9c500:	0009c603 	.word	0x0009c603
   9c504:	0009c6bf 	.word	0x0009c6bf
   9c508:	0009c6bf 	.word	0x0009c6bf
   9c50c:	0009c6bf 	.word	0x0009c6bf
   9c510:	0009c6bf 	.word	0x0009c6bf
   9c514:	0009c6bf 	.word	0x0009c6bf
   9c518:	0009c6bf 	.word	0x0009c6bf
   9c51c:	0009c6bf 	.word	0x0009c6bf
   9c520:	0009c6bf 	.word	0x0009c6bf
   9c524:	0009c6bf 	.word	0x0009c6bf
   9c528:	0009c6bf 	.word	0x0009c6bf
   9c52c:	0009c5a1 	.word	0x0009c5a1
   9c530:	0009c6bf 	.word	0x0009c6bf
   9c534:	0009c6bf 	.word	0x0009c6bf
   9c538:	0009c6bf 	.word	0x0009c6bf
   9c53c:	0009c6bf 	.word	0x0009c6bf
   9c540:	0009c6b3 	.word	0x0009c6b3
   9c544:	0009d669 	.word	0x0009d669
   9c548:	20071be7 	.word	0x20071be7
   9c54c:	200723f0 	.word	0x200723f0
   9c550:	0009a545 	.word	0x0009a545
   9c554:	0009ba51 	.word	0x0009ba51
   9c558:	0009d9f9 	.word	0x0009d9f9
   9c55c:	00093195 	.word	0x00093195
   9c560:	20072818 	.word	0x20072818
   9c564:	20071a5f 	.word	0x20071a5f
   9c568:	20071a61 	.word	0x20071a61
   9c56c:	20071a62 	.word	0x20071a62
   9c570:	0009db4d 	.word	0x0009db4d
   9c574:	0008bc51 	.word	0x0008bc51
   9c578:	0009dca9 	.word	0x0009dca9
   9c57c:	20071774 	.word	0x20071774
   9c580:	20071c18 	.word	0x20071c18
   9c584:	00099ced 	.word	0x00099ced
   9c588:	00099d45 	.word	0x00099d45
   9c58c:	00099c2d 	.word	0x00099c2d
   9c590:	0008330d 	.word	0x0008330d
   9c594:	20071be8 	.word	0x20071be8
   9c598:	0009dfd1 	.word	0x0009dfd1
   9c59c:	0009e33d 	.word	0x0009e33d
				{ 
					case EVENT_DISINF_TICK_500MS :
					if(CSeventcount > 2){
   9c5a0:	4b9a      	ldr	r3, [pc, #616]	; (9c80c <Cl_disinf_controller+0x5fc>)
   9c5a2:	681b      	ldr	r3, [r3, #0]
   9c5a4:	2b02      	cmp	r3, #2
   9c5a6:	dd2b      	ble.n	9c600 <Cl_disinf_controller+0x3f0>
						
						Cl_bc_controller(BC_EVENT_STOP);
   9c5a8:	2005      	movs	r0, #5
   9c5aa:	4b99      	ldr	r3, [pc, #612]	; (9c810 <Cl_disinf_controller+0x600>)
   9c5ac:	4798      	blx	r3
						command = CON_TX_COMMAND_DISINF_STAGE_COMPLETED;
   9c5ae:	2339      	movs	r3, #57	; 0x39
   9c5b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
						data = (Cl_Uint8Type)1;
   9c5b4:	2301      	movs	r3, #1
   9c5b6:	74fb      	strb	r3, [r7, #19]
						Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,1);
   9c5b8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   9c5bc:	f107 0313 	add.w	r3, r7, #19
   9c5c0:	4610      	mov	r0, r2
   9c5c2:	4619      	mov	r1, r3
   9c5c4:	2201      	movs	r2, #1
   9c5c6:	4b93      	ldr	r3, [pc, #588]	; (9c814 <Cl_disinf_controller+0x604>)
   9c5c8:	4798      	blx	r3
   9c5ca:	4603      	mov	r3, r0
   9c5cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						
						cl_wait(10);
   9c5d0:	200a      	movs	r0, #10
   9c5d2:	4b91      	ldr	r3, [pc, #580]	; (9c818 <Cl_disinf_controller+0x608>)
   9c5d4:	4798      	blx	r3

						command = CON_TX_COMMAND_DISINF_PAUSED;
   9c5d6:	2338      	movs	r3, #56	; 0x38
   9c5d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
						data = (Cl_Uint8Type)0;
   9c5dc:	2300      	movs	r3, #0
   9c5de:	74fb      	strb	r3, [r7, #19]
						Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
   9c5e0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   9c5e4:	f107 0313 	add.w	r3, r7, #19
   9c5e8:	4610      	mov	r0, r2
   9c5ea:	4619      	mov	r1, r3
   9c5ec:	2200      	movs	r2, #0
   9c5ee:	4b89      	ldr	r3, [pc, #548]	; (9c814 <Cl_disinf_controller+0x604>)
   9c5f0:	4798      	blx	r3
   9c5f2:	4603      	mov	r3, r0
   9c5f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						
						//cl_disinfstate = CL_DISINF_STATE_FIRST_RO_RINSCOMPLETED;
						CSeventcount = 0;
   9c5f8:	4b84      	ldr	r3, [pc, #528]	; (9c80c <Cl_disinf_controller+0x5fc>)
   9c5fa:	2200      	movs	r2, #0
   9c5fc:	601a      	str	r2, [r3, #0]
						
					}
					
					break;
   9c5fe:	e05f      	b.n	9c6c0 <Cl_disinf_controller+0x4b0>
   9c600:	e05e      	b.n	9c6c0 <Cl_disinf_controller+0x4b0>
					
					case EVENT_STOP_DISINF:
					Cl_Disinf_StopDisinf();
   9c602:	4b86      	ldr	r3, [pc, #536]	; (9c81c <Cl_disinf_controller+0x60c>)
   9c604:	4798      	blx	r3
					break;
   9c606:	e05b      	b.n	9c6c0 <Cl_disinf_controller+0x4b0>
					
									
					case EVT_RESUME_DISINF_STAGE:
					 Cl_Disinf_StartDisinf();
   9c608:	4b85      	ldr	r3, [pc, #532]	; (9c820 <Cl_disinf_controller+0x610>)
   9c60a:	4798      	blx	r3
					 if (flag_hotcitric == 1 || flag_citric == 1)
   9c60c:	4b85      	ldr	r3, [pc, #532]	; (9c824 <Cl_disinf_controller+0x614>)
   9c60e:	781b      	ldrb	r3, [r3, #0]
   9c610:	2b01      	cmp	r3, #1
   9c612:	d003      	beq.n	9c61c <Cl_disinf_controller+0x40c>
   9c614:	4b84      	ldr	r3, [pc, #528]	; (9c828 <Cl_disinf_controller+0x618>)
   9c616:	781b      	ldrb	r3, [r3, #0]
   9c618:	2b01      	cmp	r3, #1
   9c61a:	d114      	bne.n	9c646 <Cl_disinf_controller+0x436>
					 {
						 Cl_disinfretcode =  Cl_AlarmConfigureAlarmType(BICARB_IN_OPEN,LOGIC_HIGH,0,0,0);
   9c61c:	2300      	movs	r3, #0
   9c61e:	9300      	str	r3, [sp, #0]
   9c620:	202b      	movs	r0, #43	; 0x2b
   9c622:	2101      	movs	r1, #1
   9c624:	f04f 0200 	mov.w	r2, #0
   9c628:	f04f 0300 	mov.w	r3, #0
   9c62c:	4c7f      	ldr	r4, [pc, #508]	; (9c82c <Cl_disinf_controller+0x61c>)
   9c62e:	47a0      	blx	r4
   9c630:	4603      	mov	r3, r0
   9c632:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						 Cl_disinfretcode =  Cl_AlarmActivateAlarms(BICARB_IN_OPEN,true );
   9c636:	202b      	movs	r0, #43	; 0x2b
   9c638:	2101      	movs	r1, #1
   9c63a:	4b7d      	ldr	r3, [pc, #500]	; (9c830 <Cl_disinf_controller+0x620>)
   9c63c:	4798      	blx	r3
   9c63e:	4603      	mov	r3, r0
   9c640:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   9c644:	e017      	b.n	9c676 <Cl_disinf_controller+0x466>
					 }
					 else if (flag_na == 1)
   9c646:	4b7b      	ldr	r3, [pc, #492]	; (9c834 <Cl_disinf_controller+0x624>)
   9c648:	781b      	ldrb	r3, [r3, #0]
   9c64a:	2b01      	cmp	r3, #1
   9c64c:	d113      	bne.n	9c676 <Cl_disinf_controller+0x466>
					 {
						 Cl_disinfretcode =  Cl_AlarmConfigureAlarmType(ACID_IN_OPEN,LOGIC_HIGH,0,0,0);
   9c64e:	2300      	movs	r3, #0
   9c650:	9300      	str	r3, [sp, #0]
   9c652:	2029      	movs	r0, #41	; 0x29
   9c654:	2101      	movs	r1, #1
   9c656:	f04f 0200 	mov.w	r2, #0
   9c65a:	f04f 0300 	mov.w	r3, #0
   9c65e:	4c73      	ldr	r4, [pc, #460]	; (9c82c <Cl_disinf_controller+0x61c>)
   9c660:	47a0      	blx	r4
   9c662:	4603      	mov	r3, r0
   9c664:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						  Cl_disinfretcode =  Cl_AlarmActivateAlarms(ACID_IN_OPEN,true );
   9c668:	2029      	movs	r0, #41	; 0x29
   9c66a:	2101      	movs	r1, #1
   9c66c:	4b70      	ldr	r3, [pc, #448]	; (9c830 <Cl_disinf_controller+0x620>)
   9c66e:	4798      	blx	r3
   9c670:	4603      	mov	r3, r0
   9c672:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					// cl_disinfstate = CL_DISINF_STATE_INTER;
			//		 command = CON_TX_COMMAND_DISINF_PAUSED;
			//		  data = (Cl_Uint8Type)0;
			//		  Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
					
 					 command = CON_TX_COMMAND_DISINF_RESUMED;
   9c676:	233b      	movs	r3, #59	; 0x3b
   9c678:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 					 data = (Cl_Uint8Type)0;
   9c67c:	2300      	movs	r3, #0
   9c67e:	74fb      	strb	r3, [r7, #19]
					 Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
   9c680:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   9c684:	f107 0313 	add.w	r3, r7, #19
   9c688:	4610      	mov	r0, r2
   9c68a:	4619      	mov	r1, r3
   9c68c:	2200      	movs	r2, #0
   9c68e:	4b61      	ldr	r3, [pc, #388]	; (9c814 <Cl_disinf_controller+0x604>)
   9c690:	4798      	blx	r3
   9c692:	4603      	mov	r3, r0
   9c694:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 					cl_disinfstate = CL_DISINF_STATE_DISINF_OPENFILL;
   9c698:	4b67      	ldr	r3, [pc, #412]	; (9c838 <Cl_disinf_controller+0x628>)
   9c69a:	2205      	movs	r2, #5
   9c69c:	701a      	strb	r2, [r3, #0]
 					sv_cntrl_activate_valve(VALVE_ID16);
   9c69e:	2010      	movs	r0, #16
   9c6a0:	4b66      	ldr	r3, [pc, #408]	; (9c83c <Cl_disinf_controller+0x62c>)
   9c6a2:	4798      	blx	r3
 					sv_cntrl_deactivate_valve(VALVE_ID18);
   9c6a4:	2012      	movs	r0, #18
   9c6a6:	4b66      	ldr	r3, [pc, #408]	; (9c840 <Cl_disinf_controller+0x630>)
   9c6a8:	4798      	blx	r3

					 cl_disinfstate = CL_DISINF_STATE_DISINF_OPENFILL;
   9c6aa:	4b63      	ldr	r3, [pc, #396]	; (9c838 <Cl_disinf_controller+0x628>)
   9c6ac:	2205      	movs	r2, #5
   9c6ae:	701a      	strb	r2, [r3, #0]
// 					 command = CON_TX_COMMAND_DISINF_RESUMED;
// 					 data = (Cl_Uint8Type)0;
// 					 Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
					break;
   9c6b0:	e006      	b.n	9c6c0 <Cl_disinf_controller+0x4b0>
					
					case EVENT_DISINF_ALARM:
					Cl_disinfretcode = Cl_disinf_ProcessAlarms();
   9c6b2:	4b64      	ldr	r3, [pc, #400]	; (9c844 <Cl_disinf_controller+0x634>)
   9c6b4:	4798      	blx	r3
   9c6b6:	4603      	mov	r3, r0
   9c6b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					break;
   9c6bc:	e000      	b.n	9c6c0 <Cl_disinf_controller+0x4b0>
					
					
					default:break;
   9c6be:	bf00      	nop
					
							
				}
			
			break;
   9c6c0:	f000 bfca 	b.w	9d658 <Cl_disinf_controller+0x1448>
			case CL_DISINF_STATE_INTER:
				switch (cl_disinfevent)
   9c6c4:	7efb      	ldrb	r3, [r7, #27]
   9c6c6:	3b03      	subs	r3, #3
   9c6c8:	2b22      	cmp	r3, #34	; 0x22
   9c6ca:	f200 87c0 	bhi.w	9d64e <Cl_disinf_controller+0x143e>
   9c6ce:	a201      	add	r2, pc, #4	; (adr r2, 9c6d4 <Cl_disinf_controller+0x4c4>)
   9c6d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9c6d4:	0009c761 	.word	0x0009c761
   9c6d8:	0009d64f 	.word	0x0009d64f
   9c6dc:	0009d64f 	.word	0x0009d64f
   9c6e0:	0009d64f 	.word	0x0009d64f
   9c6e4:	0009d64f 	.word	0x0009d64f
   9c6e8:	0009d64f 	.word	0x0009d64f
   9c6ec:	0009d64f 	.word	0x0009d64f
   9c6f0:	0009d64f 	.word	0x0009d64f
   9c6f4:	0009d64f 	.word	0x0009d64f
   9c6f8:	0009d64f 	.word	0x0009d64f
   9c6fc:	0009d64f 	.word	0x0009d64f
   9c700:	0009d64f 	.word	0x0009d64f
   9c704:	0009c799 	.word	0x0009c799
   9c708:	0009d64f 	.word	0x0009d64f
   9c70c:	0009d64f 	.word	0x0009d64f
   9c710:	0009d64f 	.word	0x0009d64f
   9c714:	0009c767 	.word	0x0009c767
   9c718:	0009d64f 	.word	0x0009d64f
   9c71c:	0009d64f 	.word	0x0009d64f
   9c720:	0009d64f 	.word	0x0009d64f
   9c724:	0009d64f 	.word	0x0009d64f
   9c728:	0009d64f 	.word	0x0009d64f
   9c72c:	0009d64f 	.word	0x0009d64f
   9c730:	0009d64f 	.word	0x0009d64f
   9c734:	0009d64f 	.word	0x0009d64f
   9c738:	0009d64f 	.word	0x0009d64f
   9c73c:	0009d64f 	.word	0x0009d64f
   9c740:	0009d64f 	.word	0x0009d64f
   9c744:	0009d64f 	.word	0x0009d64f
   9c748:	0009d64f 	.word	0x0009d64f
   9c74c:	0009d64f 	.word	0x0009d64f
   9c750:	0009d64f 	.word	0x0009d64f
   9c754:	0009d64f 	.word	0x0009d64f
   9c758:	0009d64f 	.word	0x0009d64f
   9c75c:	0009c773 	.word	0x0009c773
				{
					case EVENT_STOP_DISINF:
					Cl_Disinf_StopDisinf();
   9c760:	4b2e      	ldr	r3, [pc, #184]	; (9c81c <Cl_disinf_controller+0x60c>)
   9c762:	4798      	blx	r3
					break;
   9c764:	e0c4      	b.n	9c8f0 <Cl_disinf_controller+0x6e0>
					
					case EVENT_DISINF_ALARM:
					Cl_disinfretcode =  Cl_disinf_ProcessAlarms();
   9c766:	4b37      	ldr	r3, [pc, #220]	; (9c844 <Cl_disinf_controller+0x634>)
   9c768:	4798      	blx	r3
   9c76a:	4603      	mov	r3, r0
   9c76c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					break;
   9c770:	e0be      	b.n	9c8f0 <Cl_disinf_controller+0x6e0>
					
					case EVENT_DISINF_CLR_ALARM:
					sv_cntrl_resetredalarm();
   9c772:	4b35      	ldr	r3, [pc, #212]	; (9c848 <Cl_disinf_controller+0x638>)
   9c774:	4798      	blx	r3
					sv_cntrl_nobuzzer();
   9c776:	4b35      	ldr	r3, [pc, #212]	; (9c84c <Cl_disinf_controller+0x63c>)
   9c778:	4798      	blx	r3
					Cl_Disinf_resumeDisinf();
   9c77a:	4b35      	ldr	r3, [pc, #212]	; (9c850 <Cl_disinf_controller+0x640>)
   9c77c:	4798      	blx	r3
					if (alarm_flag == 1)
   9c77e:	4b35      	ldr	r3, [pc, #212]	; (9c854 <Cl_disinf_controller+0x644>)
   9c780:	781b      	ldrb	r3, [r3, #0]
   9c782:	b2db      	uxtb	r3, r3
   9c784:	2b01      	cmp	r3, #1
   9c786:	d106      	bne.n	9c796 <Cl_disinf_controller+0x586>
					{
					 cl_disinfstate = CL_DISINF_STATE_DISINF_OPENFILL;
   9c788:	4b2b      	ldr	r3, [pc, #172]	; (9c838 <Cl_disinf_controller+0x628>)
   9c78a:	2205      	movs	r2, #5
   9c78c:	701a      	strb	r2, [r3, #0]
						alarm_flag = 0;
   9c78e:	4b31      	ldr	r3, [pc, #196]	; (9c854 <Cl_disinf_controller+0x644>)
   9c790:	2200      	movs	r2, #0
   9c792:	701a      	strb	r2, [r3, #0]
					}
					break;
   9c794:	e0ac      	b.n	9c8f0 <Cl_disinf_controller+0x6e0>
   9c796:	e0ab      	b.n	9c8f0 <Cl_disinf_controller+0x6e0>
					
					case EVENT_DISINF_TICK_SECOND:
						for (tempcount = 0 ; tempcount < CL_DISINF_ALRM_MAX ; tempcount++)
   9c798:	4b2f      	ldr	r3, [pc, #188]	; (9c858 <Cl_disinf_controller+0x648>)
   9c79a:	2200      	movs	r2, #0
   9c79c:	801a      	strh	r2, [r3, #0]
   9c79e:	e0a1      	b.n	9c8e4 <Cl_disinf_controller+0x6d4>
						{
							//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER",8);
							Cl_Alarm_GetAlarmStatus(Cl_DisinfAlarmTable[tempcount].CldisinfAlarmId,&Cl_DisinfAlarmTable[tempcount].IsActive);
   9c7a0:	4b2d      	ldr	r3, [pc, #180]	; (9c858 <Cl_disinf_controller+0x648>)
   9c7a2:	881b      	ldrh	r3, [r3, #0]
   9c7a4:	4619      	mov	r1, r3
   9c7a6:	4a2d      	ldr	r2, [pc, #180]	; (9c85c <Cl_disinf_controller+0x64c>)
   9c7a8:	460b      	mov	r3, r1
   9c7aa:	00db      	lsls	r3, r3, #3
   9c7ac:	1a5b      	subs	r3, r3, r1
   9c7ae:	4413      	add	r3, r2
   9c7b0:	7819      	ldrb	r1, [r3, #0]
   9c7b2:	4b29      	ldr	r3, [pc, #164]	; (9c858 <Cl_disinf_controller+0x648>)
   9c7b4:	881b      	ldrh	r3, [r3, #0]
   9c7b6:	461a      	mov	r2, r3
   9c7b8:	4613      	mov	r3, r2
   9c7ba:	00db      	lsls	r3, r3, #3
   9c7bc:	1a9b      	subs	r3, r3, r2
   9c7be:	4a27      	ldr	r2, [pc, #156]	; (9c85c <Cl_disinf_controller+0x64c>)
   9c7c0:	4413      	add	r3, r2
   9c7c2:	3302      	adds	r3, #2
   9c7c4:	4608      	mov	r0, r1
   9c7c6:	4619      	mov	r1, r3
   9c7c8:	4b25      	ldr	r3, [pc, #148]	; (9c860 <Cl_disinf_controller+0x650>)
   9c7ca:	4798      	blx	r3
					 
							if (Cl_DisinfAlarmTable[tempcount].IsActive)
   9c7cc:	4b22      	ldr	r3, [pc, #136]	; (9c858 <Cl_disinf_controller+0x648>)
   9c7ce:	881b      	ldrh	r3, [r3, #0]
   9c7d0:	4619      	mov	r1, r3
   9c7d2:	4a22      	ldr	r2, [pc, #136]	; (9c85c <Cl_disinf_controller+0x64c>)
   9c7d4:	460b      	mov	r3, r1
   9c7d6:	00db      	lsls	r3, r3, #3
   9c7d8:	1a5b      	subs	r3, r3, r1
   9c7da:	4413      	add	r3, r2
   9c7dc:	789b      	ldrb	r3, [r3, #2]
   9c7de:	2b00      	cmp	r3, #0
   9c7e0:	d048      	beq.n	9c874 <Cl_disinf_controller+0x664>
							{
								sv_cntrl_setredalarm();
   9c7e2:	4b20      	ldr	r3, [pc, #128]	; (9c864 <Cl_disinf_controller+0x654>)
   9c7e4:	4798      	blx	r3
								sv_cntrl_buzzer();
   9c7e6:	4b20      	ldr	r3, [pc, #128]	; (9c868 <Cl_disinf_controller+0x658>)
   9c7e8:	4798      	blx	r3
								Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_1",8);
   9c7ea:	2018      	movs	r0, #24
   9c7ec:	491f      	ldr	r1, [pc, #124]	; (9c86c <Cl_disinf_controller+0x65c>)
   9c7ee:	2208      	movs	r2, #8
   9c7f0:	4b08      	ldr	r3, [pc, #32]	; (9c814 <Cl_disinf_controller+0x604>)
   9c7f2:	4798      	blx	r3
								Cl_Disinf_StopDisinf();
   9c7f4:	4b09      	ldr	r3, [pc, #36]	; (9c81c <Cl_disinf_controller+0x60c>)
   9c7f6:	4798      	blx	r3
								cl_disinfstate = CL_DISINF_STATE_INTER;
   9c7f8:	4b0f      	ldr	r3, [pc, #60]	; (9c838 <Cl_disinf_controller+0x628>)
   9c7fa:	2210      	movs	r2, #16
   9c7fc:	701a      	strb	r2, [r3, #0]
								alarm_flag1 = 1;
   9c7fe:	4b1c      	ldr	r3, [pc, #112]	; (9c870 <Cl_disinf_controller+0x660>)
   9c800:	2201      	movs	r2, #1
   9c802:	701a      	strb	r2, [r3, #0]
								tempcount=0;
   9c804:	4b14      	ldr	r3, [pc, #80]	; (9c858 <Cl_disinf_controller+0x648>)
   9c806:	2200      	movs	r2, #0
   9c808:	801a      	strh	r2, [r3, #0]
								break;
   9c80a:	e070      	b.n	9c8ee <Cl_disinf_controller+0x6de>
   9c80c:	20071774 	.word	0x20071774
   9c810:	0008330d 	.word	0x0008330d
   9c814:	0009ba51 	.word	0x0009ba51
   9c818:	00093195 	.word	0x00093195
   9c81c:	0009d9f9 	.word	0x0009d9f9
   9c820:	0009d89d 	.word	0x0009d89d
   9c824:	20071a5f 	.word	0x20071a5f
   9c828:	20071a62 	.word	0x20071a62
   9c82c:	00082e09 	.word	0x00082e09
   9c830:	00082e61 	.word	0x00082e61
   9c834:	20071a61 	.word	0x20071a61
   9c838:	20071be7 	.word	0x20071be7
   9c83c:	00099ccd 	.word	0x00099ccd
   9c840:	00099ced 	.word	0x00099ced
   9c844:	0009dca9 	.word	0x0009dca9
   9c848:	00099f75 	.word	0x00099f75
   9c84c:	00099fb1 	.word	0x00099fb1
   9c850:	0009daad 	.word	0x0009daad
   9c854:	20071be5 	.word	0x20071be5
   9c858:	2007281c 	.word	0x2007281c
   9c85c:	20070b88 	.word	0x20070b88
   9c860:	00083035 	.word	0x00083035
   9c864:	00099f25 	.word	0x00099f25
   9c868:	00099f61 	.word	0x00099f61
   9c86c:	000a8d14 	.word	0x000a8d14
   9c870:	20071be6 	.word	0x20071be6
							}
					 
							else if (tempcount == CL_DISINF_ALRM_MAX - 1)
   9c874:	4b78      	ldr	r3, [pc, #480]	; (9ca58 <Cl_disinf_controller+0x848>)
   9c876:	881b      	ldrh	r3, [r3, #0]
   9c878:	2b0b      	cmp	r3, #11
   9c87a:	d12d      	bne.n	9c8d8 <Cl_disinf_controller+0x6c8>
							{
								if(!Cl_DisinfAlarmTable[tempcount].IsActive)
   9c87c:	4b76      	ldr	r3, [pc, #472]	; (9ca58 <Cl_disinf_controller+0x848>)
   9c87e:	881b      	ldrh	r3, [r3, #0]
   9c880:	4619      	mov	r1, r3
   9c882:	4a76      	ldr	r2, [pc, #472]	; (9ca5c <Cl_disinf_controller+0x84c>)
   9c884:	460b      	mov	r3, r1
   9c886:	00db      	lsls	r3, r3, #3
   9c888:	1a5b      	subs	r3, r3, r1
   9c88a:	4413      	add	r3, r2
   9c88c:	789b      	ldrb	r3, [r3, #2]
   9c88e:	f083 0301 	eor.w	r3, r3, #1
   9c892:	b2db      	uxtb	r3, r3
   9c894:	2b00      	cmp	r3, #0
   9c896:	d01f      	beq.n	9c8d8 <Cl_disinf_controller+0x6c8>
								{
									sv_cntrl_resetredalarm();
   9c898:	4b71      	ldr	r3, [pc, #452]	; (9ca60 <Cl_disinf_controller+0x850>)
   9c89a:	4798      	blx	r3
									sv_cntrl_nobuzzer();
   9c89c:	4b71      	ldr	r3, [pc, #452]	; (9ca64 <Cl_disinf_controller+0x854>)
   9c89e:	4798      	blx	r3
									alarm_flag = 1;
   9c8a0:	4b71      	ldr	r3, [pc, #452]	; (9ca68 <Cl_disinf_controller+0x858>)
   9c8a2:	2201      	movs	r2, #1
   9c8a4:	701a      	strb	r2, [r3, #0]
									if (alarm_flag1 == 0)
   9c8a6:	4b71      	ldr	r3, [pc, #452]	; (9ca6c <Cl_disinf_controller+0x85c>)
   9c8a8:	781b      	ldrb	r3, [r3, #0]
   9c8aa:	b2db      	uxtb	r3, r3
   9c8ac:	2b00      	cmp	r3, #0
   9c8ae:	d113      	bne.n	9c8d8 <Cl_disinf_controller+0x6c8>
									{
					 command = CON_TX_COMMAND_DISINF_RESUMED;
   9c8b0:	233b      	movs	r3, #59	; 0x3b
   9c8b2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					 data = (Cl_Uint8Type)0;
   9c8b6:	2300      	movs	r3, #0
   9c8b8:	74fb      	strb	r3, [r7, #19]
					 Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
   9c8ba:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   9c8be:	f107 0313 	add.w	r3, r7, #19
   9c8c2:	4610      	mov	r0, r2
   9c8c4:	4619      	mov	r1, r3
   9c8c6:	2200      	movs	r2, #0
   9c8c8:	4b69      	ldr	r3, [pc, #420]	; (9ca70 <Cl_disinf_controller+0x860>)
   9c8ca:	4798      	blx	r3
   9c8cc:	4603      	mov	r3, r0
   9c8ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
										cl_disinfstate = CL_DISINF_STATE_DISINF_OPENFILL;
   9c8d2:	4b68      	ldr	r3, [pc, #416]	; (9ca74 <Cl_disinf_controller+0x864>)
   9c8d4:	2205      	movs	r2, #5
   9c8d6:	701a      	strb	r2, [r3, #0]
						alarm_flag = 0;
					}
					break;
					
					case EVENT_DISINF_TICK_SECOND:
						for (tempcount = 0 ; tempcount < CL_DISINF_ALRM_MAX ; tempcount++)
   9c8d8:	4b5f      	ldr	r3, [pc, #380]	; (9ca58 <Cl_disinf_controller+0x848>)
   9c8da:	881b      	ldrh	r3, [r3, #0]
   9c8dc:	3301      	adds	r3, #1
   9c8de:	b29a      	uxth	r2, r3
   9c8e0:	4b5d      	ldr	r3, [pc, #372]	; (9ca58 <Cl_disinf_controller+0x848>)
   9c8e2:	801a      	strh	r2, [r3, #0]
   9c8e4:	4b5c      	ldr	r3, [pc, #368]	; (9ca58 <Cl_disinf_controller+0x848>)
   9c8e6:	881b      	ldrh	r3, [r3, #0]
   9c8e8:	2b0b      	cmp	r3, #11
   9c8ea:	f67f af59 	bls.w	9c7a0 <Cl_disinf_controller+0x590>
									//Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
									//Cl_Disinf_UpdateTimeInfo();
								}
							}
						}
					break;
   9c8ee:	bf00      	nop
							
				}
			break;
   9c8f0:	f000 bead 	b.w	9d64e <Cl_disinf_controller+0x143e>
			case CL_DISINF_STATE_DISINF_OPENFILL:
					
						switch ( cl_disinfevent)
   9c8f4:	7efb      	ldrb	r3, [r7, #27]
   9c8f6:	3b03      	subs	r3, #3
   9c8f8:	2b10      	cmp	r3, #16
   9c8fa:	d87c      	bhi.n	9c9f6 <Cl_disinf_controller+0x7e6>
   9c8fc:	a201      	add	r2, pc, #4	; (adr r2, 9c904 <Cl_disinf_controller+0x6f4>)
   9c8fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9c902:	bf00      	nop
   9c904:	0009c949 	.word	0x0009c949
   9c908:	0009c9f7 	.word	0x0009c9f7
   9c90c:	0009c9f7 	.word	0x0009c9f7
   9c910:	0009c9f7 	.word	0x0009c9f7
   9c914:	0009c9f7 	.word	0x0009c9f7
   9c918:	0009c9f7 	.word	0x0009c9f7
   9c91c:	0009c9f7 	.word	0x0009c9f7
   9c920:	0009c9f7 	.word	0x0009c9f7
   9c924:	0009c9f7 	.word	0x0009c9f7
   9c928:	0009c9f7 	.word	0x0009c9f7
   9c92c:	0009c9f7 	.word	0x0009c9f7
   9c930:	0009c9f7 	.word	0x0009c9f7
   9c934:	0009c94f 	.word	0x0009c94f
   9c938:	0009c9f7 	.word	0x0009c9f7
   9c93c:	0009c9f7 	.word	0x0009c9f7
   9c940:	0009c9f7 	.word	0x0009c9f7
   9c944:	0009c9eb 	.word	0x0009c9eb
						{

							case EVENT_STOP_DISINF:
							Cl_Disinf_StopDisinf();
   9c948:	4b4b      	ldr	r3, [pc, #300]	; (9ca78 <Cl_disinf_controller+0x868>)
   9c94a:	4798      	blx	r3
							break;
   9c94c:	e054      	b.n	9c9f8 <Cl_disinf_controller+0x7e8>
							case EVENT_DISINF_TICK_100MS:
							break;
							case EVENT_DISINF_TICK_500MS:
							break;
							case EVENT_DISINF_TICK_SECOND:
							sec_count++;
   9c94e:	4b4b      	ldr	r3, [pc, #300]	; (9ca7c <Cl_disinf_controller+0x86c>)
   9c950:	881b      	ldrh	r3, [r3, #0]
   9c952:	3301      	adds	r3, #1
   9c954:	b29a      	uxth	r2, r3
   9c956:	4b49      	ldr	r3, [pc, #292]	; (9ca7c <Cl_disinf_controller+0x86c>)
   9c958:	801a      	strh	r2, [r3, #0]
							if(sec_count > 3)
   9c95a:	4b48      	ldr	r3, [pc, #288]	; (9ca7c <Cl_disinf_controller+0x86c>)
   9c95c:	881b      	ldrh	r3, [r3, #0]
   9c95e:	2b03      	cmp	r3, #3
   9c960:	d902      	bls.n	9c968 <Cl_disinf_controller+0x758>
							{
								Cl_disinfOpenFillTimeOut = true;
   9c962:	4b47      	ldr	r3, [pc, #284]	; (9ca80 <Cl_disinf_controller+0x870>)
   9c964:	2201      	movs	r2, #1
   9c966:	701a      	strb	r2, [r3, #0]
							}
							//wait for 1 min openfill before intake;
							if(Cl_disinfOpenFillTimeOut)
   9c968:	4b45      	ldr	r3, [pc, #276]	; (9ca80 <Cl_disinf_controller+0x870>)
   9c96a:	781b      	ldrb	r3, [r3, #0]
   9c96c:	2b00      	cmp	r3, #0
   9c96e:	d03b      	beq.n	9c9e8 <Cl_disinf_controller+0x7d8>
							{
								if (flag_hotcitric == 1 || flag_citric == 1 )
   9c970:	4b44      	ldr	r3, [pc, #272]	; (9ca84 <Cl_disinf_controller+0x874>)
   9c972:	781b      	ldrb	r3, [r3, #0]
   9c974:	2b01      	cmp	r3, #1
   9c976:	d003      	beq.n	9c980 <Cl_disinf_controller+0x770>
   9c978:	4b43      	ldr	r3, [pc, #268]	; (9ca88 <Cl_disinf_controller+0x878>)
   9c97a:	781b      	ldrb	r3, [r3, #0]
   9c97c:	2b01      	cmp	r3, #1
   9c97e:	d119      	bne.n	9c9b4 <Cl_disinf_controller+0x7a4>
								{
								Cl_disinfretcode =  sv_cntrl_deactivatepump(DCMOTOR1);
   9c980:	2001      	movs	r0, #1
   9c982:	4b42      	ldr	r3, [pc, #264]	; (9ca8c <Cl_disinf_controller+0x87c>)
   9c984:	4798      	blx	r3
   9c986:	4603      	mov	r3, r0
   9c988:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								Cl_disinfretcode =  sv_cntrl_deactivatepump(DCMOTOR2);
   9c98c:	2002      	movs	r0, #2
   9c98e:	4b3f      	ldr	r3, [pc, #252]	; (9ca8c <Cl_disinf_controller+0x87c>)
   9c990:	4798      	blx	r3
   9c992:	4603      	mov	r3, r0
   9c994:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								//Cl_bc_controller(BC_EVENT_STOP);
								Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"INT",3);
   9c998:	2018      	movs	r0, #24
   9c99a:	493d      	ldr	r1, [pc, #244]	; (9ca90 <Cl_disinf_controller+0x880>)
   9c99c:	2203      	movs	r2, #3
   9c99e:	4b34      	ldr	r3, [pc, #208]	; (9ca70 <Cl_disinf_controller+0x860>)
   9c9a0:	4798      	blx	r3
								sv_prop_start_citricdisinfect_intake();
   9c9a2:	4b3c      	ldr	r3, [pc, #240]	; (9ca94 <Cl_disinf_controller+0x884>)
   9c9a4:	4798      	blx	r3
								cl_disinfstate = CL_DISINF_STATE_DISINF_INTAKE;
   9c9a6:	4b33      	ldr	r3, [pc, #204]	; (9ca74 <Cl_disinf_controller+0x864>)
   9c9a8:	2206      	movs	r2, #6
   9c9aa:	701a      	strb	r2, [r3, #0]
								sec_count =0;
   9c9ac:	4b33      	ldr	r3, [pc, #204]	; (9ca7c <Cl_disinf_controller+0x86c>)
   9c9ae:	2200      	movs	r2, #0
   9c9b0:	801a      	strh	r2, [r3, #0]
   9c9b2:	e019      	b.n	9c9e8 <Cl_disinf_controller+0x7d8>
								}
								else
								{
								Cl_disinfretcode =  sv_cntrl_deactivatepump(DCMOTOR1);
   9c9b4:	2001      	movs	r0, #1
   9c9b6:	4b35      	ldr	r3, [pc, #212]	; (9ca8c <Cl_disinf_controller+0x87c>)
   9c9b8:	4798      	blx	r3
   9c9ba:	4603      	mov	r3, r0
   9c9bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								Cl_disinfretcode =  sv_cntrl_deactivatepump(DCMOTOR2);
   9c9c0:	2002      	movs	r0, #2
   9c9c2:	4b32      	ldr	r3, [pc, #200]	; (9ca8c <Cl_disinf_controller+0x87c>)
   9c9c4:	4798      	blx	r3
   9c9c6:	4603      	mov	r3, r0
   9c9c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								//Cl_bc_controller(BC_EVENT_STOP);
								Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"INT",3);
   9c9cc:	2018      	movs	r0, #24
   9c9ce:	4930      	ldr	r1, [pc, #192]	; (9ca90 <Cl_disinf_controller+0x880>)
   9c9d0:	2203      	movs	r2, #3
   9c9d2:	4b27      	ldr	r3, [pc, #156]	; (9ca70 <Cl_disinf_controller+0x860>)
   9c9d4:	4798      	blx	r3
								sv_prop_start_disinfect_intake();
   9c9d6:	4b30      	ldr	r3, [pc, #192]	; (9ca98 <Cl_disinf_controller+0x888>)
   9c9d8:	4798      	blx	r3
								cl_disinfstate = CL_DISINF_STATE_DISINF_INTAKE;
   9c9da:	4b26      	ldr	r3, [pc, #152]	; (9ca74 <Cl_disinf_controller+0x864>)
   9c9dc:	2206      	movs	r2, #6
   9c9de:	701a      	strb	r2, [r3, #0]
								sec_count =0;
   9c9e0:	4b26      	ldr	r3, [pc, #152]	; (9ca7c <Cl_disinf_controller+0x86c>)
   9c9e2:	2200      	movs	r2, #0
   9c9e4:	801a      	strh	r2, [r3, #0]
								
							}

					
							
							break;
   9c9e6:	e007      	b.n	9c9f8 <Cl_disinf_controller+0x7e8>
   9c9e8:	e006      	b.n	9c9f8 <Cl_disinf_controller+0x7e8>
							case EVENT_DISINF_ALARM:
							Cl_disinfretcode = Cl_disinf_ProcessAlarms();
   9c9ea:	4b2c      	ldr	r3, [pc, #176]	; (9ca9c <Cl_disinf_controller+0x88c>)
   9c9ec:	4798      	blx	r3
   9c9ee:	4603      	mov	r3, r0
   9c9f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
							break;
   9c9f4:	e000      	b.n	9c9f8 <Cl_disinf_controller+0x7e8>
							default:break;
   9c9f6:	bf00      	nop
						}
			break;
   9c9f8:	f000 be2e 	b.w	9d658 <Cl_disinf_controller+0x1448>
			
			case CL_DISINF_STATE_DISINF_INTAKE:
						switch ( cl_disinfevent)
   9c9fc:	7efb      	ldrb	r3, [r7, #27]
   9c9fe:	3b03      	subs	r3, #3
   9ca00:	2b10      	cmp	r3, #16
   9ca02:	f200 8143 	bhi.w	9cc8c <Cl_disinf_controller+0xa7c>
   9ca06:	a201      	add	r2, pc, #4	; (adr r2, 9ca0c <Cl_disinf_controller+0x7fc>)
   9ca08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9ca0c:	0009ca51 	.word	0x0009ca51
   9ca10:	0009cc8d 	.word	0x0009cc8d
   9ca14:	0009cc8d 	.word	0x0009cc8d
   9ca18:	0009cc8d 	.word	0x0009cc8d
   9ca1c:	0009cc8d 	.word	0x0009cc8d
   9ca20:	0009cc8d 	.word	0x0009cc8d
   9ca24:	0009cc8d 	.word	0x0009cc8d
   9ca28:	0009cc8d 	.word	0x0009cc8d
   9ca2c:	0009cc8d 	.word	0x0009cc8d
   9ca30:	0009cc8d 	.word	0x0009cc8d
   9ca34:	0009cc8d 	.word	0x0009cc8d
   9ca38:	0009cc8d 	.word	0x0009cc8d
   9ca3c:	0009caa1 	.word	0x0009caa1
   9ca40:	0009cc8d 	.word	0x0009cc8d
   9ca44:	0009cc8d 	.word	0x0009cc8d
   9ca48:	0009cc8d 	.word	0x0009cc8d
   9ca4c:	0009cc81 	.word	0x0009cc81
						{
							
							case EVENT_STOP_DISINF:
							Cl_Disinf_StopDisinf();
   9ca50:	4b09      	ldr	r3, [pc, #36]	; (9ca78 <Cl_disinf_controller+0x868>)
   9ca52:	4798      	blx	r3
							break;
   9ca54:	e11b      	b.n	9cc8e <Cl_disinf_controller+0xa7e>
   9ca56:	bf00      	nop
   9ca58:	2007281c 	.word	0x2007281c
   9ca5c:	20070b88 	.word	0x20070b88
   9ca60:	00099f75 	.word	0x00099f75
   9ca64:	00099fb1 	.word	0x00099fb1
   9ca68:	20071be5 	.word	0x20071be5
   9ca6c:	20071be6 	.word	0x20071be6
   9ca70:	0009ba51 	.word	0x0009ba51
   9ca74:	20071be7 	.word	0x20071be7
   9ca78:	0009d9f9 	.word	0x0009d9f9
   9ca7c:	20071c10 	.word	0x20071c10
   9ca80:	20070b86 	.word	0x20070b86
   9ca84:	20071a5f 	.word	0x20071a5f
   9ca88:	20071a62 	.word	0x20071a62
   9ca8c:	00099c69 	.word	0x00099c69
   9ca90:	000a8d1c 	.word	0x000a8d1c
   9ca94:	0009a105 	.word	0x0009a105
   9ca98:	0009a0dd 	.word	0x0009a0dd
   9ca9c:	0009dca9 	.word	0x0009dca9
							case EVENT_DISINF_TICK_100MS:
							break;
							case EVENT_DISINF_TICK_500MS:
							break;
							case EVENT_DISINF_TICK_SECOND:
							Cl_disinfsecondscounter++;
   9caa0:	4b82      	ldr	r3, [pc, #520]	; (9ccac <Cl_disinf_controller+0xa9c>)
   9caa2:	681b      	ldr	r3, [r3, #0]
   9caa4:	3301      	adds	r3, #1
   9caa6:	4a81      	ldr	r2, [pc, #516]	; (9ccac <Cl_disinf_controller+0xa9c>)
   9caa8:	6013      	str	r3, [r2, #0]
							Cl_Disinf_SendDisinfStateData();
   9caaa:	4b81      	ldr	r3, [pc, #516]	; (9ccb0 <Cl_disinf_controller+0xaa0>)
   9caac:	4798      	blx	r3
							if(Cl_disinfsecondscounter == 60)
   9caae:	4b7f      	ldr	r3, [pc, #508]	; (9ccac <Cl_disinf_controller+0xa9c>)
   9cab0:	681b      	ldr	r3, [r3, #0]
   9cab2:	2b3c      	cmp	r3, #60	; 0x3c
   9cab4:	d101      	bne.n	9caba <Cl_disinf_controller+0x8aa>
							{
						
								UpdateDisinfMinuteTick();
   9cab6:	4b7f      	ldr	r3, [pc, #508]	; (9ccb4 <Cl_disinf_controller+0xaa4>)
   9cab8:	4798      	blx	r3
						
						
							}
							sec_count ++;
   9caba:	4b7f      	ldr	r3, [pc, #508]	; (9ccb8 <Cl_disinf_controller+0xaa8>)
   9cabc:	881b      	ldrh	r3, [r3, #0]
   9cabe:	3301      	adds	r3, #1
   9cac0:	b29a      	uxth	r2, r3
   9cac2:	4b7d      	ldr	r3, [pc, #500]	; (9ccb8 <Cl_disinf_controller+0xaa8>)
   9cac4:	801a      	strh	r2, [r3, #0]
							if (flag_hotcitric == 1 )
   9cac6:	4b7d      	ldr	r3, [pc, #500]	; (9ccbc <Cl_disinf_controller+0xaac>)
   9cac8:	781b      	ldrb	r3, [r3, #0]
   9caca:	2b01      	cmp	r3, #1
   9cacc:	d144      	bne.n	9cb58 <Cl_disinf_controller+0x948>
							{
								if(sec_count > 90)
   9cace:	4b7a      	ldr	r3, [pc, #488]	; (9ccb8 <Cl_disinf_controller+0xaa8>)
   9cad0:	881b      	ldrh	r3, [r3, #0]
   9cad2:	2b5a      	cmp	r3, #90	; 0x5a
   9cad4:	d940      	bls.n	9cb58 <Cl_disinf_controller+0x948>
								{
									Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ove",3);
   9cad6:	2018      	movs	r0, #24
   9cad8:	4979      	ldr	r1, [pc, #484]	; (9ccc0 <Cl_disinf_controller+0xab0>)
   9cada:	2203      	movs	r2, #3
   9cadc:	4b79      	ldr	r3, [pc, #484]	; (9ccc4 <Cl_disinf_controller+0xab4>)
   9cade:	4798      	blx	r3
									sv_prop_stop_citricdisinfect_intake();
   9cae0:	4b79      	ldr	r3, [pc, #484]	; (9ccc8 <Cl_disinf_controller+0xab8>)
   9cae2:	4798      	blx	r3
									Cl_disinfretcode =  sv_cntrl_deactivatepump(DCMOTOR2);
   9cae4:	2002      	movs	r0, #2
   9cae6:	4b79      	ldr	r3, [pc, #484]	; (9cccc <Cl_disinf_controller+0xabc>)
   9cae8:	4798      	blx	r3
   9caea:	4603      	mov	r3, r0
   9caec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
									Cl_disinfretcode =  sv_cntrl_deactivatepump(DCMOTOR1);
   9caf0:	2001      	movs	r0, #1
   9caf2:	4b76      	ldr	r3, [pc, #472]	; (9cccc <Cl_disinf_controller+0xabc>)
   9caf4:	4798      	blx	r3
   9caf6:	4603      	mov	r3, r0
   9caf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
									Cl_bc_controller(BC_EVENT_STOP);
   9cafc:	2005      	movs	r0, #5
   9cafe:	4b74      	ldr	r3, [pc, #464]	; (9ccd0 <Cl_disinf_controller+0xac0>)
   9cb00:	4798      	blx	r3
									
									command = CON_TX_COMMAND_DISINF_STAGE_COMPLETED;
   9cb02:	2339      	movs	r3, #57	; 0x39
   9cb04:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
									data = (Cl_Uint8Type)2;
   9cb08:	2302      	movs	r3, #2
   9cb0a:	74fb      	strb	r3, [r7, #19]
									Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,1);
   9cb0c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   9cb10:	f107 0313 	add.w	r3, r7, #19
   9cb14:	4610      	mov	r0, r2
   9cb16:	4619      	mov	r1, r3
   9cb18:	2201      	movs	r2, #1
   9cb1a:	4b6a      	ldr	r3, [pc, #424]	; (9ccc4 <Cl_disinf_controller+0xab4>)
   9cb1c:	4798      	blx	r3
   9cb1e:	4603      	mov	r3, r0
   9cb20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
									
									IntakeReadyFlag = false;
   9cb24:	4b6b      	ldr	r3, [pc, #428]	; (9ccd4 <Cl_disinf_controller+0xac4>)
   9cb26:	2200      	movs	r2, #0
   9cb28:	701a      	strb	r2, [r3, #0]
									
									cl_wait(20);
   9cb2a:	2014      	movs	r0, #20
   9cb2c:	4b6a      	ldr	r3, [pc, #424]	; (9ccd8 <Cl_disinf_controller+0xac8>)
   9cb2e:	4798      	blx	r3

									command = CON_TX_COMMAND_DISINF_PAUSED;
   9cb30:	2338      	movs	r3, #56	; 0x38
   9cb32:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
									data = (Cl_Uint8Type)0;
   9cb36:	2300      	movs	r3, #0
   9cb38:	74fb      	strb	r3, [r7, #19]
						//			cl_disinfstate = CL_DISINF_STATE_DISINF_INTAKE_COMPLETED;
							
									Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
   9cb3a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   9cb3e:	f107 0313 	add.w	r3, r7, #19
   9cb42:	4610      	mov	r0, r2
   9cb44:	4619      	mov	r1, r3
   9cb46:	2200      	movs	r2, #0
   9cb48:	4b5e      	ldr	r3, [pc, #376]	; (9ccc4 <Cl_disinf_controller+0xab4>)
   9cb4a:	4798      	blx	r3
   9cb4c:	4603      	mov	r3, r0
   9cb4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
									cl_disinfstate = CL_DISINF_STATE_DISINF_INTAKE_COMPLETED;
   9cb52:	4b62      	ldr	r3, [pc, #392]	; (9ccdc <Cl_disinf_controller+0xacc>)
   9cb54:	2207      	movs	r2, #7
   9cb56:	701a      	strb	r2, [r3, #0]

								}
							}
							
							if (flag_citric == 1 )
   9cb58:	4b61      	ldr	r3, [pc, #388]	; (9cce0 <Cl_disinf_controller+0xad0>)
   9cb5a:	781b      	ldrb	r3, [r3, #0]
   9cb5c:	2b01      	cmp	r3, #1
   9cb5e:	d146      	bne.n	9cbee <Cl_disinf_controller+0x9de>
							{
								if(sec_count > 90)
   9cb60:	4b55      	ldr	r3, [pc, #340]	; (9ccb8 <Cl_disinf_controller+0xaa8>)
   9cb62:	881b      	ldrh	r3, [r3, #0]
   9cb64:	2b5a      	cmp	r3, #90	; 0x5a
   9cb66:	f240 808a 	bls.w	9cc7e <Cl_disinf_controller+0xa6e>
								{
									Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ove",3);
   9cb6a:	2018      	movs	r0, #24
   9cb6c:	4954      	ldr	r1, [pc, #336]	; (9ccc0 <Cl_disinf_controller+0xab0>)
   9cb6e:	2203      	movs	r2, #3
   9cb70:	4b54      	ldr	r3, [pc, #336]	; (9ccc4 <Cl_disinf_controller+0xab4>)
   9cb72:	4798      	blx	r3
									sv_prop_stop_citricdisinfect_intake();
   9cb74:	4b54      	ldr	r3, [pc, #336]	; (9ccc8 <Cl_disinf_controller+0xab8>)
   9cb76:	4798      	blx	r3
									Cl_disinfretcode =  sv_cntrl_deactivatepump(DCMOTOR2);
   9cb78:	2002      	movs	r0, #2
   9cb7a:	4b54      	ldr	r3, [pc, #336]	; (9cccc <Cl_disinf_controller+0xabc>)
   9cb7c:	4798      	blx	r3
   9cb7e:	4603      	mov	r3, r0
   9cb80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
									Cl_disinfretcode =  sv_cntrl_deactivatepump(DCMOTOR1);
   9cb84:	2001      	movs	r0, #1
   9cb86:	4b51      	ldr	r3, [pc, #324]	; (9cccc <Cl_disinf_controller+0xabc>)
   9cb88:	4798      	blx	r3
   9cb8a:	4603      	mov	r3, r0
   9cb8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
									Cl_bc_controller(BC_EVENT_STOP);
   9cb90:	2005      	movs	r0, #5
   9cb92:	4b4f      	ldr	r3, [pc, #316]	; (9ccd0 <Cl_disinf_controller+0xac0>)
   9cb94:	4798      	blx	r3
								
								IntakeReadyFlag = false;
   9cb96:	4b4f      	ldr	r3, [pc, #316]	; (9ccd4 <Cl_disinf_controller+0xac4>)
   9cb98:	2200      	movs	r2, #0
   9cb9a:	701a      	strb	r2, [r3, #0]
									
									command = CON_TX_COMMAND_DISINF_STAGE_COMPLETED;
   9cb9c:	2339      	movs	r3, #57	; 0x39
   9cb9e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
									data = (Cl_Uint8Type)2;
   9cba2:	2302      	movs	r3, #2
   9cba4:	74fb      	strb	r3, [r7, #19]
									Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,1);
   9cba6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   9cbaa:	f107 0313 	add.w	r3, r7, #19
   9cbae:	4610      	mov	r0, r2
   9cbb0:	4619      	mov	r1, r3
   9cbb2:	2201      	movs	r2, #1
   9cbb4:	4b43      	ldr	r3, [pc, #268]	; (9ccc4 <Cl_disinf_controller+0xab4>)
   9cbb6:	4798      	blx	r3
   9cbb8:	4603      	mov	r3, r0
   9cbba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
									
									cl_wait(20);
   9cbbe:	2014      	movs	r0, #20
   9cbc0:	4b45      	ldr	r3, [pc, #276]	; (9ccd8 <Cl_disinf_controller+0xac8>)
   9cbc2:	4798      	blx	r3

									command = CON_TX_COMMAND_DISINF_PAUSED;
   9cbc4:	2338      	movs	r3, #56	; 0x38
   9cbc6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
									data = (Cl_Uint8Type)0;
   9cbca:	2300      	movs	r3, #0
   9cbcc:	74fb      	strb	r3, [r7, #19]
									Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
   9cbce:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   9cbd2:	f107 0313 	add.w	r3, r7, #19
   9cbd6:	4610      	mov	r0, r2
   9cbd8:	4619      	mov	r1, r3
   9cbda:	2200      	movs	r2, #0
   9cbdc:	4b39      	ldr	r3, [pc, #228]	; (9ccc4 <Cl_disinf_controller+0xab4>)
   9cbde:	4798      	blx	r3
   9cbe0:	4603      	mov	r3, r0
   9cbe2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
									cl_disinfstate = CL_DISINF_STATE_DISINF_INTAKE_COMPLETED;
   9cbe6:	4b3d      	ldr	r3, [pc, #244]	; (9ccdc <Cl_disinf_controller+0xacc>)
   9cbe8:	2207      	movs	r2, #7
   9cbea:	701a      	strb	r2, [r3, #0]
								Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
								cl_disinfstate = CL_DISINF_STATE_DISINF_INTAKE_COMPLETED;

							}
				
							break;
   9cbec:	e04f      	b.n	9cc8e <Cl_disinf_controller+0xa7e>
								

								}
							}
							
							else if(sec_count > 80)
   9cbee:	4b32      	ldr	r3, [pc, #200]	; (9ccb8 <Cl_disinf_controller+0xaa8>)
   9cbf0:	881b      	ldrh	r3, [r3, #0]
   9cbf2:	2b50      	cmp	r3, #80	; 0x50
   9cbf4:	d943      	bls.n	9cc7e <Cl_disinf_controller+0xa6e>
							{
								Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ove",3);
   9cbf6:	2018      	movs	r0, #24
   9cbf8:	4931      	ldr	r1, [pc, #196]	; (9ccc0 <Cl_disinf_controller+0xab0>)
   9cbfa:	2203      	movs	r2, #3
   9cbfc:	4b31      	ldr	r3, [pc, #196]	; (9ccc4 <Cl_disinf_controller+0xab4>)
   9cbfe:	4798      	blx	r3
								sv_prop_stop_disinfect_intake();
   9cc00:	4b38      	ldr	r3, [pc, #224]	; (9cce4 <Cl_disinf_controller+0xad4>)
   9cc02:	4798      	blx	r3
								sv_prop_stop_citricdisinfect_intake();
   9cc04:	4b30      	ldr	r3, [pc, #192]	; (9ccc8 <Cl_disinf_controller+0xab8>)
   9cc06:	4798      	blx	r3
								Cl_disinfretcode =  sv_cntrl_deactivatepump(DCMOTOR2);
   9cc08:	2002      	movs	r0, #2
   9cc0a:	4b30      	ldr	r3, [pc, #192]	; (9cccc <Cl_disinf_controller+0xabc>)
   9cc0c:	4798      	blx	r3
   9cc0e:	4603      	mov	r3, r0
   9cc10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								Cl_disinfretcode =  sv_cntrl_deactivatepump(DCMOTOR1);
   9cc14:	2001      	movs	r0, #1
   9cc16:	4b2d      	ldr	r3, [pc, #180]	; (9cccc <Cl_disinf_controller+0xabc>)
   9cc18:	4798      	blx	r3
   9cc1a:	4603      	mov	r3, r0
   9cc1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								Cl_bc_controller(BC_EVENT_STOP);
   9cc20:	2005      	movs	r0, #5
   9cc22:	4b2b      	ldr	r3, [pc, #172]	; (9ccd0 <Cl_disinf_controller+0xac0>)
   9cc24:	4798      	blx	r3
								//flag_hotrinse = 0;
								//Cl_AlarmActivateAlarms(ACID_IN,false);
								//Cl_AlarmActivateAlarms(BICARB_IN,false);
								command = CON_TX_COMMAND_DISINF_STAGE_COMPLETED;
   9cc26:	2339      	movs	r3, #57	; 0x39
   9cc28:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
								data = (Cl_Uint8Type)2;
   9cc2c:	2302      	movs	r3, #2
   9cc2e:	74fb      	strb	r3, [r7, #19]
								Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,1);
   9cc30:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   9cc34:	f107 0313 	add.w	r3, r7, #19
   9cc38:	4610      	mov	r0, r2
   9cc3a:	4619      	mov	r1, r3
   9cc3c:	2201      	movs	r2, #1
   9cc3e:	4b21      	ldr	r3, [pc, #132]	; (9ccc4 <Cl_disinf_controller+0xab4>)
   9cc40:	4798      	blx	r3
   9cc42:	4603      	mov	r3, r0
   9cc44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								
								IntakeReadyFlag = false;
   9cc48:	4b22      	ldr	r3, [pc, #136]	; (9ccd4 <Cl_disinf_controller+0xac4>)
   9cc4a:	2200      	movs	r2, #0
   9cc4c:	701a      	strb	r2, [r3, #0]
								
								cl_wait(20);
   9cc4e:	2014      	movs	r0, #20
   9cc50:	4b21      	ldr	r3, [pc, #132]	; (9ccd8 <Cl_disinf_controller+0xac8>)
   9cc52:	4798      	blx	r3

								command = CON_TX_COMMAND_DISINF_PAUSED;
   9cc54:	2338      	movs	r3, #56	; 0x38
   9cc56:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
								data = (Cl_Uint8Type)0;
   9cc5a:	2300      	movs	r3, #0
   9cc5c:	74fb      	strb	r3, [r7, #19]
							//	cl_disinfstate = CL_DISINF_STATE_DISINF_INTAKE_COMPLETED;
								
								Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
   9cc5e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   9cc62:	f107 0313 	add.w	r3, r7, #19
   9cc66:	4610      	mov	r0, r2
   9cc68:	4619      	mov	r1, r3
   9cc6a:	2200      	movs	r2, #0
   9cc6c:	4b15      	ldr	r3, [pc, #84]	; (9ccc4 <Cl_disinf_controller+0xab4>)
   9cc6e:	4798      	blx	r3
   9cc70:	4603      	mov	r3, r0
   9cc72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								cl_disinfstate = CL_DISINF_STATE_DISINF_INTAKE_COMPLETED;
   9cc76:	4b19      	ldr	r3, [pc, #100]	; (9ccdc <Cl_disinf_controller+0xacc>)
   9cc78:	2207      	movs	r2, #7
   9cc7a:	701a      	strb	r2, [r3, #0]

							}
				
							break;
   9cc7c:	e007      	b.n	9cc8e <Cl_disinf_controller+0xa7e>
   9cc7e:	e006      	b.n	9cc8e <Cl_disinf_controller+0xa7e>
							case EVENT_DISINF_ALARM:
							Cl_disinfretcode = Cl_disinf_ProcessAlarms();
   9cc80:	4b19      	ldr	r3, [pc, #100]	; (9cce8 <Cl_disinf_controller+0xad8>)
   9cc82:	4798      	blx	r3
   9cc84:	4603      	mov	r3, r0
   9cc86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
							break;
   9cc8a:	e000      	b.n	9cc8e <Cl_disinf_controller+0xa7e>
							default:break;
   9cc8c:	bf00      	nop
						}
			
			break;
   9cc8e:	f000 bce3 	b.w	9d658 <Cl_disinf_controller+0x1448>
			case CL_DISINF_STATE_DISINF_INTAKE_COMPLETED:
			
						switch (cl_disinfevent)
   9cc92:	7efb      	ldrb	r3, [r7, #27]
   9cc94:	2b03      	cmp	r3, #3
   9cc96:	d005      	beq.n	9cca4 <Cl_disinf_controller+0xa94>
   9cc98:	2b13      	cmp	r3, #19
   9cc9a:	f000 809f 	beq.w	9cddc <Cl_disinf_controller+0xbcc>
   9cc9e:	2b02      	cmp	r3, #2
   9cca0:	d026      	beq.n	9ccf0 <Cl_disinf_controller+0xae0>

								break;
								case EVENT_DISINF_ALARM:
								Cl_disinfretcode = Cl_disinf_ProcessAlarms();
								break;
								default:break;
   9cca2:	e0a1      	b.n	9cde8 <Cl_disinf_controller+0xbd8>
			
						switch (cl_disinfevent)
						{
							
							case EVENT_STOP_DISINF:
							Cl_Disinf_StopDisinf();
   9cca4:	4b11      	ldr	r3, [pc, #68]	; (9ccec <Cl_disinf_controller+0xadc>)
   9cca6:	4798      	blx	r3
							break;
   9cca8:	e09e      	b.n	9cde8 <Cl_disinf_controller+0xbd8>
   9ccaa:	bf00      	nop
   9ccac:	20071be8 	.word	0x20071be8
   9ccb0:	0009dfd1 	.word	0x0009dfd1
   9ccb4:	0009e33d 	.word	0x0009e33d
   9ccb8:	20071c10 	.word	0x20071c10
   9ccbc:	20071a5f 	.word	0x20071a5f
   9ccc0:	000a8d20 	.word	0x000a8d20
   9ccc4:	0009ba51 	.word	0x0009ba51
   9ccc8:	0009a119 	.word	0x0009a119
   9cccc:	00099c69 	.word	0x00099c69
   9ccd0:	0008330d 	.word	0x0008330d
   9ccd4:	20071c18 	.word	0x20071c18
   9ccd8:	00093195 	.word	0x00093195
   9ccdc:	20071be7 	.word	0x20071be7
   9cce0:	20071a62 	.word	0x20071a62
   9cce4:	0009a0f1 	.word	0x0009a0f1
   9cce8:	0009dca9 	.word	0x0009dca9
   9ccec:	0009d9f9 	.word	0x0009d9f9
							
								case EVT_RESUME_DISINF_STAGE:
								
								 Cl_disinfretcode =  sv_cntrl_activatepump(DCMOTOR2);
   9ccf0:	2002      	movs	r0, #2
   9ccf2:	4b94      	ldr	r3, [pc, #592]	; (9cf44 <Cl_disinf_controller+0xd34>)
   9ccf4:	4798      	blx	r3
   9ccf6:	4603      	mov	r3, r0
   9ccf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								Cl_disinfretcode =  sv_cntrl_activatepump(DCMOTOR1);
   9ccfc:	2001      	movs	r0, #1
   9ccfe:	4b91      	ldr	r3, [pc, #580]	; (9cf44 <Cl_disinf_controller+0xd34>)
   9cd00:	4798      	blx	r3
   9cd02:	4603      	mov	r3, r0
   9cd04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								//Cl_disinfretcode =  sv_cntrl_activatepump(DCMOTOR2);
								Cl_disinfretcode = sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   9cd08:	2002      	movs	r0, #2
   9cd0a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   9cd0e:	4b8e      	ldr	r3, [pc, #568]	; (9cf48 <Cl_disinf_controller+0xd38>)
   9cd10:	4798      	blx	r3
   9cd12:	4603      	mov	r3, r0
   9cd14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								Cl_disinfretcode = sv_cntrl_setpumpspeed(DCMOTOR1,1000);
   9cd18:	2001      	movs	r0, #1
   9cd1a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   9cd1e:	4b8a      	ldr	r3, [pc, #552]	; (9cf48 <Cl_disinf_controller+0xd38>)
   9cd20:	4798      	blx	r3
   9cd22:	4603      	mov	r3, r0
   9cd24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								openfill_flag = 1;
   9cd28:	4b88      	ldr	r3, [pc, #544]	; (9cf4c <Cl_disinf_controller+0xd3c>)
   9cd2a:	2201      	movs	r2, #1
   9cd2c:	701a      	strb	r2, [r3, #0]
								Cl_Uint16Type potvalue = 0;
   9cd2e:	2300      	movs	r3, #0
   9cd30:	843b      	strh	r3, [r7, #32]
								potvalue = (850 * 1024)/10000;                                 // 600
   9cd32:	2357      	movs	r3, #87	; 0x57
   9cd34:	843b      	strh	r3, [r7, #32]
								sv_cs_setpotvalue(potvalue);
   9cd36:	8c3b      	ldrh	r3, [r7, #32]
   9cd38:	4618      	mov	r0, r3
   9cd3a:	4b85      	ldr	r3, [pc, #532]	; (9cf50 <Cl_disinf_controller+0xd40>)
   9cd3c:	4798      	blx	r3
								if (flag_hotcitric == 1)
   9cd3e:	4b85      	ldr	r3, [pc, #532]	; (9cf54 <Cl_disinf_controller+0xd44>)
   9cd40:	781b      	ldrb	r3, [r3, #0]
   9cd42:	2b01      	cmp	r3, #1
   9cd44:	d102      	bne.n	9cd4c <Cl_disinf_controller+0xb3c>
 								{
 								hotrinse_flag = 1;
   9cd46:	4b84      	ldr	r3, [pc, #528]	; (9cf58 <Cl_disinf_controller+0xd48>)
   9cd48:	2201      	movs	r2, #1
   9cd4a:	701a      	strb	r2, [r3, #0]
 								}
								
								Cl_bc_controller(BC_EVENT_START);
   9cd4c:	2004      	movs	r0, #4
   9cd4e:	4b83      	ldr	r3, [pc, #524]	; (9cf5c <Cl_disinf_controller+0xd4c>)
   9cd50:	4798      	blx	r3
								sv_cntrl_enable_loopback();
   9cd52:	4b83      	ldr	r3, [pc, #524]	; (9cf60 <Cl_disinf_controller+0xd50>)
   9cd54:	4798      	blx	r3
// 								if (flag_hotcitric == 1)
// 								{
// 									sv_cntrl_poweronheater();
// 									sv_cntrl_incheater(3500);
// 								}
								sv_cntrl_activate_valve(VALVE_ID2);
   9cd56:	2002      	movs	r0, #2
   9cd58:	4b82      	ldr	r3, [pc, #520]	; (9cf64 <Cl_disinf_controller+0xd54>)
   9cd5a:	4798      	blx	r3
								sv_cntrl_activate_valve(VALVE_ID3);
   9cd5c:	2003      	movs	r0, #3
   9cd5e:	4b81      	ldr	r3, [pc, #516]	; (9cf64 <Cl_disinf_controller+0xd54>)
   9cd60:	4798      	blx	r3
								sv_prop_startmixing();
   9cd62:	4b81      	ldr	r3, [pc, #516]	; (9cf68 <Cl_disinf_controller+0xd58>)
   9cd64:	4798      	blx	r3
								sv_cntrl_activatepump(UFPUMP);
   9cd66:	2004      	movs	r0, #4
   9cd68:	4b76      	ldr	r3, [pc, #472]	; (9cf44 <Cl_disinf_controller+0xd34>)
   9cd6a:	4798      	blx	r3
								sec_count =0;
   9cd6c:	4b7f      	ldr	r3, [pc, #508]	; (9cf6c <Cl_disinf_controller+0xd5c>)
   9cd6e:	2200      	movs	r2, #0
   9cd70:	801a      	strh	r2, [r3, #0]
								command = CON_TX_COMMAND_DISINF_RESUMED;
   9cd72:	233b      	movs	r3, #59	; 0x3b
   9cd74:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 									Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
   9cd78:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   9cd7c:	f107 0313 	add.w	r3, r7, #19
   9cd80:	4610      	mov	r0, r2
   9cd82:	4619      	mov	r1, r3
   9cd84:	2200      	movs	r2, #0
   9cd86:	4b7a      	ldr	r3, [pc, #488]	; (9cf70 <Cl_disinf_controller+0xd60>)
   9cd88:	4798      	blx	r3
   9cd8a:	4603      	mov	r3, r0
   9cd8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 									cl_disinfstate = CL_DISINF_STATE_DISINF_RINSING;
   9cd90:	4b78      	ldr	r3, [pc, #480]	; (9cf74 <Cl_disinf_controller+0xd64>)
   9cd92:	2208      	movs	r2, #8
   9cd94:	701a      	strb	r2, [r3, #0]
							//	cl_disinfstate = CL_DISINF_STATE_INTER_1;
								 Cl_disinfretcode =  Cl_AlarmConfigureAlarmType(ACID_IN_OPEN,LOGIC_LOW,0,0,0);
   9cd96:	2300      	movs	r3, #0
   9cd98:	9300      	str	r3, [sp, #0]
   9cd9a:	2029      	movs	r0, #41	; 0x29
   9cd9c:	2100      	movs	r1, #0
   9cd9e:	f04f 0200 	mov.w	r2, #0
   9cda2:	f04f 0300 	mov.w	r3, #0
   9cda6:	4c74      	ldr	r4, [pc, #464]	; (9cf78 <Cl_disinf_controller+0xd68>)
   9cda8:	47a0      	blx	r4
   9cdaa:	4603      	mov	r3, r0
   9cdac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								 Cl_disinfretcode =  Cl_AlarmConfigureAlarmType(BICARB_IN_OPEN,LOGIC_LOW,0,0,0);
   9cdb0:	2300      	movs	r3, #0
   9cdb2:	9300      	str	r3, [sp, #0]
   9cdb4:	202b      	movs	r0, #43	; 0x2b
   9cdb6:	2100      	movs	r1, #0
   9cdb8:	f04f 0200 	mov.w	r2, #0
   9cdbc:	f04f 0300 	mov.w	r3, #0
   9cdc0:	4c6d      	ldr	r4, [pc, #436]	; (9cf78 <Cl_disinf_controller+0xd68>)
   9cdc2:	47a0      	blx	r4
   9cdc4:	4603      	mov	r3, r0
   9cdc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								Cl_AlarmActivateAlarms(ACID_IN_OPEN,true);
   9cdca:	2029      	movs	r0, #41	; 0x29
   9cdcc:	2101      	movs	r1, #1
   9cdce:	4b6b      	ldr	r3, [pc, #428]	; (9cf7c <Cl_disinf_controller+0xd6c>)
   9cdd0:	4798      	blx	r3
								Cl_AlarmActivateAlarms(BICARB_IN_OPEN,true);
   9cdd2:	202b      	movs	r0, #43	; 0x2b
   9cdd4:	2101      	movs	r1, #1
   9cdd6:	4b69      	ldr	r3, [pc, #420]	; (9cf7c <Cl_disinf_controller+0xd6c>)
   9cdd8:	4798      	blx	r3
									data = (Cl_Uint8Type)3;
									Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
								}*/
								

								break;
   9cdda:	e005      	b.n	9cde8 <Cl_disinf_controller+0xbd8>
								case EVENT_DISINF_ALARM:
								Cl_disinfretcode = Cl_disinf_ProcessAlarms();
   9cddc:	4b68      	ldr	r3, [pc, #416]	; (9cf80 <Cl_disinf_controller+0xd70>)
   9cdde:	4798      	blx	r3
   9cde0:	4603      	mov	r3, r0
   9cde2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								break;
   9cde6:	bf00      	nop
								default:break;
						}
			
			break;
   9cde8:	f000 bc36 	b.w	9d658 <Cl_disinf_controller+0x1448>
			case CL_DISINF_STATE_INTER_1:
				switch (cl_disinfevent)
   9cdec:	7efb      	ldrb	r3, [r7, #27]
   9cdee:	3b03      	subs	r3, #3
   9cdf0:	2b22      	cmp	r3, #34	; 0x22
   9cdf2:	f200 842e 	bhi.w	9d652 <Cl_disinf_controller+0x1442>
   9cdf6:	a201      	add	r2, pc, #4	; (adr r2, 9cdfc <Cl_disinf_controller+0xbec>)
   9cdf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9cdfc:	0009ce89 	.word	0x0009ce89
   9ce00:	0009d653 	.word	0x0009d653
   9ce04:	0009d653 	.word	0x0009d653
   9ce08:	0009d653 	.word	0x0009d653
   9ce0c:	0009d653 	.word	0x0009d653
   9ce10:	0009d653 	.word	0x0009d653
   9ce14:	0009d653 	.word	0x0009d653
   9ce18:	0009d653 	.word	0x0009d653
   9ce1c:	0009d653 	.word	0x0009d653
   9ce20:	0009d653 	.word	0x0009d653
   9ce24:	0009d653 	.word	0x0009d653
   9ce28:	0009d653 	.word	0x0009d653
   9ce2c:	0009cec1 	.word	0x0009cec1
   9ce30:	0009d653 	.word	0x0009d653
   9ce34:	0009d653 	.word	0x0009d653
   9ce38:	0009d653 	.word	0x0009d653
   9ce3c:	0009ce8f 	.word	0x0009ce8f
   9ce40:	0009d653 	.word	0x0009d653
   9ce44:	0009d653 	.word	0x0009d653
   9ce48:	0009d653 	.word	0x0009d653
   9ce4c:	0009d653 	.word	0x0009d653
   9ce50:	0009d653 	.word	0x0009d653
   9ce54:	0009d653 	.word	0x0009d653
   9ce58:	0009d653 	.word	0x0009d653
   9ce5c:	0009d653 	.word	0x0009d653
   9ce60:	0009d653 	.word	0x0009d653
   9ce64:	0009d653 	.word	0x0009d653
   9ce68:	0009d653 	.word	0x0009d653
   9ce6c:	0009d653 	.word	0x0009d653
   9ce70:	0009d653 	.word	0x0009d653
   9ce74:	0009d653 	.word	0x0009d653
   9ce78:	0009d653 	.word	0x0009d653
   9ce7c:	0009d653 	.word	0x0009d653
   9ce80:	0009d653 	.word	0x0009d653
   9ce84:	0009ce9b 	.word	0x0009ce9b
				{
					
					case EVENT_STOP_DISINF:
					Cl_Disinf_StopDisinf();
   9ce88:	4b3e      	ldr	r3, [pc, #248]	; (9cf84 <Cl_disinf_controller+0xd74>)
   9ce8a:	4798      	blx	r3
					break;
   9ce8c:	e02b      	b.n	9cee6 <Cl_disinf_controller+0xcd6>
					
					
					case EVENT_DISINF_ALARM:
					Cl_disinfretcode =  Cl_disinf_ProcessAlarms();
   9ce8e:	4b3c      	ldr	r3, [pc, #240]	; (9cf80 <Cl_disinf_controller+0xd70>)
   9ce90:	4798      	blx	r3
   9ce92:	4603      	mov	r3, r0
   9ce94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					break;
   9ce98:	e025      	b.n	9cee6 <Cl_disinf_controller+0xcd6>
					
					case EVENT_DISINF_CLR_ALARM:
					sv_cntrl_resetredalarm();
   9ce9a:	4b3b      	ldr	r3, [pc, #236]	; (9cf88 <Cl_disinf_controller+0xd78>)
   9ce9c:	4798      	blx	r3
					sv_cntrl_nobuzzer();
   9ce9e:	4b3b      	ldr	r3, [pc, #236]	; (9cf8c <Cl_disinf_controller+0xd7c>)
   9cea0:	4798      	blx	r3
					Cl_Disinf_resumeDisinf();
   9cea2:	4b3b      	ldr	r3, [pc, #236]	; (9cf90 <Cl_disinf_controller+0xd80>)
   9cea4:	4798      	blx	r3
					if (alarm_flag == 1)
   9cea6:	4b3b      	ldr	r3, [pc, #236]	; (9cf94 <Cl_disinf_controller+0xd84>)
   9cea8:	781b      	ldrb	r3, [r3, #0]
   9ceaa:	b2db      	uxtb	r3, r3
   9ceac:	2b01      	cmp	r3, #1
   9ceae:	d106      	bne.n	9cebe <Cl_disinf_controller+0xcae>
					{
								cl_disinfstate = CL_DISINF_STATE_DISINF_RINSING;
   9ceb0:	4b30      	ldr	r3, [pc, #192]	; (9cf74 <Cl_disinf_controller+0xd64>)
   9ceb2:	2208      	movs	r2, #8
   9ceb4:	701a      	strb	r2, [r3, #0]
						alarm_flag = 0;
   9ceb6:	4b37      	ldr	r3, [pc, #220]	; (9cf94 <Cl_disinf_controller+0xd84>)
   9ceb8:	2200      	movs	r2, #0
   9ceba:	701a      	strb	r2, [r3, #0]
					}
					break;
   9cebc:	e013      	b.n	9cee6 <Cl_disinf_controller+0xcd6>
   9cebe:	e012      	b.n	9cee6 <Cl_disinf_controller+0xcd6>
								 
					case EVENT_DISINF_TICK_SECOND:
					
					 command = CON_TX_COMMAND_DISINF_RESUMED;
   9cec0:	233b      	movs	r3, #59	; 0x3b
   9cec2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 									Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
   9cec6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   9ceca:	f107 0313 	add.w	r3, r7, #19
   9cece:	4610      	mov	r0, r2
   9ced0:	4619      	mov	r1, r3
   9ced2:	2200      	movs	r2, #0
   9ced4:	4b26      	ldr	r3, [pc, #152]	; (9cf70 <Cl_disinf_controller+0xd60>)
   9ced6:	4798      	blx	r3
   9ced8:	4603      	mov	r3, r0
   9ceda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 									cl_disinfstate = CL_DISINF_STATE_DISINF_RINSING;
   9cede:	4b25      	ldr	r3, [pc, #148]	; (9cf74 <Cl_disinf_controller+0xd64>)
   9cee0:	2208      	movs	r2, #8
   9cee2:	701a      	strb	r2, [r3, #0]
// 								//Cl_Disinf_UpdateTimeInfo();
// 								
// 							}
// 						}
//					}
								break;
   9cee4:	bf00      	nop
					
						}
			break;
   9cee6:	e3b4      	b.n	9d652 <Cl_disinf_controller+0x1442>
			case CL_DISINF_STATE_DISINF_RINSING:
						switch ( cl_disinfevent)
   9cee8:	7efb      	ldrb	r3, [r7, #27]
   9ceea:	3b03      	subs	r3, #3
   9ceec:	2b10      	cmp	r3, #16
   9ceee:	f200 8143 	bhi.w	9d178 <Cl_disinf_controller+0xf68>
   9cef2:	a201      	add	r2, pc, #4	; (adr r2, 9cef8 <Cl_disinf_controller+0xce8>)
   9cef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9cef8:	0009cf3d 	.word	0x0009cf3d
   9cefc:	0009d179 	.word	0x0009d179
   9cf00:	0009d179 	.word	0x0009d179
   9cf04:	0009d179 	.word	0x0009d179
   9cf08:	0009d179 	.word	0x0009d179
   9cf0c:	0009d179 	.word	0x0009d179
   9cf10:	0009d179 	.word	0x0009d179
   9cf14:	0009d179 	.word	0x0009d179
   9cf18:	0009d179 	.word	0x0009d179
   9cf1c:	0009d179 	.word	0x0009d179
   9cf20:	0009d179 	.word	0x0009d179
   9cf24:	0009d179 	.word	0x0009d179
   9cf28:	0009cf99 	.word	0x0009cf99
   9cf2c:	0009d179 	.word	0x0009d179
   9cf30:	0009d179 	.word	0x0009d179
   9cf34:	0009d179 	.word	0x0009d179
   9cf38:	0009d16d 	.word	0x0009d16d
						{
							
							case EVENT_STOP_DISINF:
							Cl_Disinf_StopDisinf();
   9cf3c:	4b11      	ldr	r3, [pc, #68]	; (9cf84 <Cl_disinf_controller+0xd74>)
   9cf3e:	4798      	blx	r3
							break;
   9cf40:	e11b      	b.n	9d17a <Cl_disinf_controller+0xf6a>
   9cf42:	bf00      	nop
   9cf44:	00099c2d 	.word	0x00099c2d
   9cf48:	00099d45 	.word	0x00099d45
   9cf4c:	20071c12 	.word	0x20071c12
   9cf50:	0009a175 	.word	0x0009a175
   9cf54:	20071a5f 	.word	0x20071a5f
   9cf58:	20071cc1 	.word	0x20071cc1
   9cf5c:	0008330d 	.word	0x0008330d
   9cf60:	00099e41 	.word	0x00099e41
   9cf64:	00099ccd 	.word	0x00099ccd
   9cf68:	0009a075 	.word	0x0009a075
   9cf6c:	20071c10 	.word	0x20071c10
   9cf70:	0009ba51 	.word	0x0009ba51
   9cf74:	20071be7 	.word	0x20071be7
   9cf78:	00082e09 	.word	0x00082e09
   9cf7c:	00082e61 	.word	0x00082e61
   9cf80:	0009dca9 	.word	0x0009dca9
   9cf84:	0009d9f9 	.word	0x0009d9f9
   9cf88:	00099f75 	.word	0x00099f75
   9cf8c:	00099fb1 	.word	0x00099fb1
   9cf90:	0009daad 	.word	0x0009daad
   9cf94:	20071be5 	.word	0x20071be5
								{
				//					
								}
							break;
							case EVENT_DISINF_TICK_SECOND:
							Cl_disinf_ResetAlertsforReassertion();
   9cf98:	4bb7      	ldr	r3, [pc, #732]	; (9d278 <Cl_disinf_controller+0x1068>)
   9cf9a:	4798      	blx	r3
							Cl_Uint16Type temp;
							Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP2STATUS,&temp);
   9cf9c:	f107 0310 	add.w	r3, r7, #16
   9cfa0:	2013      	movs	r0, #19
   9cfa2:	4619      	mov	r1, r3
   9cfa4:	4bb5      	ldr	r3, [pc, #724]	; (9d27c <Cl_disinf_controller+0x106c>)
   9cfa6:	4798      	blx	r3
	
									{
		
											float ftemp,temp1;
										
											res_temp_lookuptable((402 *100* temp)/(2*32768));									// temperature from look up table in 4 digits
   9cfa8:	8a3b      	ldrh	r3, [r7, #16]
   9cfaa:	461a      	mov	r2, r3
   9cfac:	f649 5308 	movw	r3, #40200	; 0x9d08
   9cfb0:	fb03 f302 	mul.w	r3, r3, r2
   9cfb4:	2b00      	cmp	r3, #0
   9cfb6:	da02      	bge.n	9cfbe <Cl_disinf_controller+0xdae>
   9cfb8:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
   9cfbc:	33ff      	adds	r3, #255	; 0xff
   9cfbe:	141b      	asrs	r3, r3, #16
   9cfc0:	4618      	mov	r0, r3
   9cfc2:	4baf      	ldr	r3, [pc, #700]	; (9d280 <Cl_disinf_controller+0x1070>)
   9cfc4:	4798      	blx	r3
											temp1 = res_temp_value/100;									// Temp3 value in XX.yy format
   9cfc6:	4baf      	ldr	r3, [pc, #700]	; (9d284 <Cl_disinf_controller+0x1074>)
   9cfc8:	681a      	ldr	r2, [r3, #0]
   9cfca:	4baf      	ldr	r3, [pc, #700]	; (9d288 <Cl_disinf_controller+0x1078>)
   9cfcc:	4610      	mov	r0, r2
   9cfce:	49af      	ldr	r1, [pc, #700]	; (9d28c <Cl_disinf_controller+0x107c>)
   9cfd0:	4798      	blx	r3
   9cfd2:	4603      	mov	r3, r0
   9cfd4:	61fb      	str	r3, [r7, #28]
											temp1 = temp1 - 3.1 + 1.4 + 1.2;										// sensor offset
   9cfd6:	4bae      	ldr	r3, [pc, #696]	; (9d290 <Cl_disinf_controller+0x1080>)
   9cfd8:	69f8      	ldr	r0, [r7, #28]
   9cfda:	4798      	blx	r3
   9cfdc:	4602      	mov	r2, r0
   9cfde:	460b      	mov	r3, r1
   9cfe0:	4cac      	ldr	r4, [pc, #688]	; (9d294 <Cl_disinf_controller+0x1084>)
   9cfe2:	4610      	mov	r0, r2
   9cfe4:	4619      	mov	r1, r3
   9cfe6:	a3a0      	add	r3, pc, #640	; (adr r3, 9d268 <Cl_disinf_controller+0x1058>)
   9cfe8:	e9d3 2300 	ldrd	r2, r3, [r3]
   9cfec:	47a0      	blx	r4
   9cfee:	4602      	mov	r2, r0
   9cff0:	460b      	mov	r3, r1
   9cff2:	4ca9      	ldr	r4, [pc, #676]	; (9d298 <Cl_disinf_controller+0x1088>)
   9cff4:	4610      	mov	r0, r2
   9cff6:	4619      	mov	r1, r3
   9cff8:	a39d      	add	r3, pc, #628	; (adr r3, 9d270 <Cl_disinf_controller+0x1060>)
   9cffa:	e9d3 2300 	ldrd	r2, r3, [r3]
   9cffe:	47a0      	blx	r4
   9d000:	4602      	mov	r2, r0
   9d002:	460b      	mov	r3, r1
   9d004:	4ca4      	ldr	r4, [pc, #656]	; (9d298 <Cl_disinf_controller+0x1088>)
   9d006:	4610      	mov	r0, r2
   9d008:	4619      	mov	r1, r3
   9d00a:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   9d00e:	4ba3      	ldr	r3, [pc, #652]	; (9d29c <Cl_disinf_controller+0x108c>)
   9d010:	47a0      	blx	r4
   9d012:	4602      	mov	r2, r0
   9d014:	460b      	mov	r3, r1
   9d016:	4610      	mov	r0, r2
   9d018:	4619      	mov	r1, r3
   9d01a:	4ba1      	ldr	r3, [pc, #644]	; (9d2a0 <Cl_disinf_controller+0x1090>)
   9d01c:	4798      	blx	r3
   9d01e:	4603      	mov	r3, r0
   9d020:	61fb      	str	r3, [r7, #28]
											heatcutavgtmp2 =(heatcutavgtmp2*5 + temp1)/6;
   9d022:	4ba0      	ldr	r3, [pc, #640]	; (9d2a4 <Cl_disinf_controller+0x1094>)
   9d024:	681a      	ldr	r2, [r3, #0]
   9d026:	4ba0      	ldr	r3, [pc, #640]	; (9d2a8 <Cl_disinf_controller+0x1098>)
   9d028:	4610      	mov	r0, r2
   9d02a:	49a0      	ldr	r1, [pc, #640]	; (9d2ac <Cl_disinf_controller+0x109c>)
   9d02c:	4798      	blx	r3
   9d02e:	4603      	mov	r3, r0
   9d030:	461a      	mov	r2, r3
   9d032:	4b9f      	ldr	r3, [pc, #636]	; (9d2b0 <Cl_disinf_controller+0x10a0>)
   9d034:	4610      	mov	r0, r2
   9d036:	69f9      	ldr	r1, [r7, #28]
   9d038:	4798      	blx	r3
   9d03a:	4603      	mov	r3, r0
   9d03c:	461a      	mov	r2, r3
   9d03e:	4b92      	ldr	r3, [pc, #584]	; (9d288 <Cl_disinf_controller+0x1078>)
   9d040:	4610      	mov	r0, r2
   9d042:	499c      	ldr	r1, [pc, #624]	; (9d2b4 <Cl_disinf_controller+0x10a4>)
   9d044:	4798      	blx	r3
   9d046:	4603      	mov	r3, r0
   9d048:	461a      	mov	r2, r3
   9d04a:	4b96      	ldr	r3, [pc, #600]	; (9d2a4 <Cl_disinf_controller+0x1094>)
   9d04c:	601a      	str	r2, [r3, #0]
// 								sv_cntrl_poweroffheater();
// 								
// 								SetHeaterState(CL_HEATER_STATE_OFF);
// 							}
							
							Cl_disinfsecondscounter++;
   9d04e:	4b9a      	ldr	r3, [pc, #616]	; (9d2b8 <Cl_disinf_controller+0x10a8>)
   9d050:	681b      	ldr	r3, [r3, #0]
   9d052:	3301      	adds	r3, #1
   9d054:	4a98      	ldr	r2, [pc, #608]	; (9d2b8 <Cl_disinf_controller+0x10a8>)
   9d056:	6013      	str	r3, [r2, #0]
							Cl_Disinf_SendDisinfStateData();
   9d058:	4b98      	ldr	r3, [pc, #608]	; (9d2bc <Cl_disinf_controller+0x10ac>)
   9d05a:	4798      	blx	r3
							if(Cl_disinfsecondscounter == 60)
   9d05c:	4b96      	ldr	r3, [pc, #600]	; (9d2b8 <Cl_disinf_controller+0x10a8>)
   9d05e:	681b      	ldr	r3, [r3, #0]
   9d060:	2b3c      	cmp	r3, #60	; 0x3c
   9d062:	d101      	bne.n	9d068 <Cl_disinf_controller+0xe58>
							{
								UpdateDisinfMinuteTick();	
   9d064:	4b96      	ldr	r3, [pc, #600]	; (9d2c0 <Cl_disinf_controller+0x10b0>)
   9d066:	4798      	blx	r3
								//Cl_AlarmActivateAlarms(PS1_LOW_THRESHOLD,true);
								//Cl_AlarmActivateAlarms(PS1_HIGH_THRESHOLD,true);
								//Cl_AlarmActivateAlarms(PS2_LOW_THRESHOLD,true);
								//Cl_AlarmActivateAlarms(PS2_HIGH_THRESHOLD,true);
							}
							if(Cl_disinfMinutescounter > CL_DISINF_TIMEOUT )
   9d068:	4b96      	ldr	r3, [pc, #600]	; (9d2c4 <Cl_disinf_controller+0x10b4>)
   9d06a:	681b      	ldr	r3, [r3, #0]
   9d06c:	2b1e      	cmp	r3, #30
   9d06e:	dd7c      	ble.n	9d16a <Cl_disinf_controller+0xf5a>
							{
								sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   9d070:	2002      	movs	r0, #2
   9d072:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   9d076:	4b94      	ldr	r3, [pc, #592]	; (9d2c8 <Cl_disinf_controller+0x10b8>)
   9d078:	4798      	blx	r3
								Cl_Disinf_StopDisinf();
   9d07a:	4b94      	ldr	r3, [pc, #592]	; (9d2cc <Cl_disinf_controller+0x10bc>)
   9d07c:	4798      	blx	r3
								sv_cntrl_deactivate_valve(VALVE_ID2);
   9d07e:	2002      	movs	r0, #2
   9d080:	4b93      	ldr	r3, [pc, #588]	; (9d2d0 <Cl_disinf_controller+0x10c0>)
   9d082:	4798      	blx	r3
								sv_cntrl_deactivate_valve(VALVE_ID3);
   9d084:	2003      	movs	r0, #3
   9d086:	4b92      	ldr	r3, [pc, #584]	; (9d2d0 <Cl_disinf_controller+0x10c0>)
   9d088:	4798      	blx	r3
								sv_cntrl_poweroffheater();
   9d08a:	4b92      	ldr	r3, [pc, #584]	; (9d2d4 <Cl_disinf_controller+0x10c4>)
   9d08c:	4798      	blx	r3
								sv_prop_stopmixing();
   9d08e:	4b92      	ldr	r3, [pc, #584]	; (9d2d8 <Cl_disinf_controller+0x10c8>)
   9d090:	4798      	blx	r3
								sv_cntrl_deactivatepump(UFPUMP);
   9d092:	2004      	movs	r0, #4
   9d094:	4b91      	ldr	r3, [pc, #580]	; (9d2dc <Cl_disinf_controller+0x10cc>)
   9d096:	4798      	blx	r3
								flag_hotrinse = 0;
   9d098:	4b91      	ldr	r3, [pc, #580]	; (9d2e0 <Cl_disinf_controller+0x10d0>)
   9d09a:	2200      	movs	r2, #0
   9d09c:	701a      	strb	r2, [r3, #0]
								Cl_disinfretcode =  sv_cntrl_deactivatepump(DCMOTOR2);
   9d09e:	2002      	movs	r0, #2
   9d0a0:	4b8e      	ldr	r3, [pc, #568]	; (9d2dc <Cl_disinf_controller+0x10cc>)
   9d0a2:	4798      	blx	r3
   9d0a4:	4603      	mov	r3, r0
   9d0a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								Cl_disinfretcode =  sv_cntrl_deactivatepump(DCMOTOR1);
   9d0aa:	2001      	movs	r0, #1
   9d0ac:	4b8b      	ldr	r3, [pc, #556]	; (9d2dc <Cl_disinf_controller+0x10cc>)
   9d0ae:	4798      	blx	r3
   9d0b0:	4603      	mov	r3, r0
   9d0b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								Cl_bc_controller(BC_EVENT_STOP);
   9d0b6:	2005      	movs	r0, #5
   9d0b8:	4b8a      	ldr	r3, [pc, #552]	; (9d2e4 <Cl_disinf_controller+0x10d4>)
   9d0ba:	4798      	blx	r3
								if (flag_hotcitric == 1)
   9d0bc:	4b8a      	ldr	r3, [pc, #552]	; (9d2e8 <Cl_disinf_controller+0x10d8>)
   9d0be:	781b      	ldrb	r3, [r3, #0]
   9d0c0:	2b01      	cmp	r3, #1
   9d0c2:	d111      	bne.n	9d0e8 <Cl_disinf_controller+0xed8>
								{
								command = CON_TX_COMMAND_DISINF_STAGE_COMPLETED;
   9d0c4:	2339      	movs	r3, #57	; 0x39
   9d0c6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
								data = (Cl_Uint8Type)4;
   9d0ca:	2304      	movs	r3, #4
   9d0cc:	74fb      	strb	r3, [r7, #19]
								Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,1);
   9d0ce:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   9d0d2:	f107 0313 	add.w	r3, r7, #19
   9d0d6:	4610      	mov	r0, r2
   9d0d8:	4619      	mov	r1, r3
   9d0da:	2201      	movs	r2, #1
   9d0dc:	4b83      	ldr	r3, [pc, #524]	; (9d2ec <Cl_disinf_controller+0x10dc>)
   9d0de:	4798      	blx	r3
   9d0e0:	4603      	mov	r3, r0
   9d0e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   9d0e6:	e02a      	b.n	9d13e <Cl_disinf_controller+0xf2e>
								}
								else if (flag_citric == 1)
   9d0e8:	4b81      	ldr	r3, [pc, #516]	; (9d2f0 <Cl_disinf_controller+0x10e0>)
   9d0ea:	781b      	ldrb	r3, [r3, #0]
   9d0ec:	2b01      	cmp	r3, #1
   9d0ee:	d111      	bne.n	9d114 <Cl_disinf_controller+0xf04>
								{
									command = CON_TX_COMMAND_DISINF_STAGE_COMPLETED;
   9d0f0:	2339      	movs	r3, #57	; 0x39
   9d0f2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
									data = (Cl_Uint8Type)5;
   9d0f6:	2305      	movs	r3, #5
   9d0f8:	74fb      	strb	r3, [r7, #19]
									Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,1);
   9d0fa:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   9d0fe:	f107 0313 	add.w	r3, r7, #19
   9d102:	4610      	mov	r0, r2
   9d104:	4619      	mov	r1, r3
   9d106:	2201      	movs	r2, #1
   9d108:	4b78      	ldr	r3, [pc, #480]	; (9d2ec <Cl_disinf_controller+0x10dc>)
   9d10a:	4798      	blx	r3
   9d10c:	4603      	mov	r3, r0
   9d10e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   9d112:	e014      	b.n	9d13e <Cl_disinf_controller+0xf2e>
								}
								else if (flag_na == 1)
   9d114:	4b77      	ldr	r3, [pc, #476]	; (9d2f4 <Cl_disinf_controller+0x10e4>)
   9d116:	781b      	ldrb	r3, [r3, #0]
   9d118:	2b01      	cmp	r3, #1
   9d11a:	d110      	bne.n	9d13e <Cl_disinf_controller+0xf2e>
								{
									command = CON_TX_COMMAND_DISINF_STAGE_COMPLETED;
   9d11c:	2339      	movs	r3, #57	; 0x39
   9d11e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
									data = (Cl_Uint8Type)3;
   9d122:	2303      	movs	r3, #3
   9d124:	74fb      	strb	r3, [r7, #19]
									Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,1);
   9d126:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   9d12a:	f107 0313 	add.w	r3, r7, #19
   9d12e:	4610      	mov	r0, r2
   9d130:	4619      	mov	r1, r3
   9d132:	2201      	movs	r2, #1
   9d134:	4b6d      	ldr	r3, [pc, #436]	; (9d2ec <Cl_disinf_controller+0x10dc>)
   9d136:	4798      	blx	r3
   9d138:	4603      	mov	r3, r0
   9d13a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								}
								flag_hotcitric = 0;
   9d13e:	4b6a      	ldr	r3, [pc, #424]	; (9d2e8 <Cl_disinf_controller+0x10d8>)
   9d140:	2200      	movs	r2, #0
   9d142:	701a      	strb	r2, [r3, #0]
								flag_citric = 0;
   9d144:	4b6a      	ldr	r3, [pc, #424]	; (9d2f0 <Cl_disinf_controller+0x10e0>)
   9d146:	2200      	movs	r2, #0
   9d148:	701a      	strb	r2, [r3, #0]
								flag_na = 0;
   9d14a:	4b6a      	ldr	r3, [pc, #424]	; (9d2f4 <Cl_disinf_controller+0x10e4>)
   9d14c:	2200      	movs	r2, #0
   9d14e:	701a      	strb	r2, [r3, #0]
								openfill_flag = 0;
   9d150:	4b69      	ldr	r3, [pc, #420]	; (9d2f8 <Cl_disinf_controller+0x10e8>)
   9d152:	2200      	movs	r2, #0
   9d154:	701a      	strb	r2, [r3, #0]
	
							
							//	command = CON_TX_COMMAND_DISINF_RESUMED;
							//	data = (Cl_Uint8Type)0;
							//	Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
								 Cl_disinfretcode = Cl_mac_apprequesthandler(MACREQ_START_POST_DISINF_RINSE);
   9d156:	2045      	movs	r0, #69	; 0x45
   9d158:	4b68      	ldr	r3, [pc, #416]	; (9d2fc <Cl_disinf_controller+0x10ec>)
   9d15a:	4798      	blx	r3
   9d15c:	4603      	mov	r3, r0
   9d15e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
								 cl_disinfstate = CL_DISINF_STATE_SECOND_RO_RINSE;
   9d162:	4b67      	ldr	r3, [pc, #412]	; (9d300 <Cl_disinf_controller+0x10f0>)
   9d164:	220a      	movs	r2, #10
   9d166:	701a      	strb	r2, [r3, #0]
					 
							}
							break;
   9d168:	e007      	b.n	9d17a <Cl_disinf_controller+0xf6a>
   9d16a:	e006      	b.n	9d17a <Cl_disinf_controller+0xf6a>
							case EVENT_DISINF_TICK_MINUTE:
								//Cl_disinf_ResetAlertsforReassertion();
							break;
							case EVENT_DISINF_ALARM:
							
							Cl_disinfretcode =  Cl_disinf_ProcessAlarms();
   9d16c:	4b65      	ldr	r3, [pc, #404]	; (9d304 <Cl_disinf_controller+0x10f4>)
   9d16e:	4798      	blx	r3
   9d170:	4603      	mov	r3, r0
   9d172:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
							break;
   9d176:	e000      	b.n	9d17a <Cl_disinf_controller+0xf6a>
							command = CON_TX_COMMAND_DISINF_PAUSED;
							data = (Cl_Uint8Type)0;
							Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
							break;
							default:break;
   9d178:	bf00      	nop
						}
						
				break;
   9d17a:	e26d      	b.n	9d658 <Cl_disinf_controller+0x1448>
				case CL_DISINF_STATE_DISINF_RINSING_COMPLETED:
						switch ( cl_disinfevent)
   9d17c:	7efb      	ldrb	r3, [r7, #27]
   9d17e:	2b02      	cmp	r3, #2
   9d180:	d005      	beq.n	9d18e <Cl_disinf_controller+0xf7e>
   9d182:	2b03      	cmp	r3, #3
   9d184:	d000      	beq.n	9d188 <Cl_disinf_controller+0xf78>
					 
							 //Send resumed
					 

							break;
							default:break;
   9d186:	e01d      	b.n	9d1c4 <Cl_disinf_controller+0xfb4>
				case CL_DISINF_STATE_DISINF_RINSING_COMPLETED:
						switch ( cl_disinfevent)
						{ 
							
							case EVENT_STOP_DISINF:
							Cl_Disinf_StopDisinf();
   9d188:	4b50      	ldr	r3, [pc, #320]	; (9d2cc <Cl_disinf_controller+0x10bc>)
   9d18a:	4798      	blx	r3
							break;
   9d18c:	e01a      	b.n	9d1c4 <Cl_disinf_controller+0xfb4>
							
							
							case EVT_RESUME_DISINF_STAGE:
							// Cl_Disinf_StartDisinf();
							 Cl_disinfretcode = Cl_mac_apprequesthandler(MACREQ_START_POST_DISINF_RINSE);
   9d18e:	2045      	movs	r0, #69	; 0x45
   9d190:	4b5a      	ldr	r3, [pc, #360]	; (9d2fc <Cl_disinf_controller+0x10ec>)
   9d192:	4798      	blx	r3
   9d194:	4603      	mov	r3, r0
   9d196:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
							 
							command = CON_TX_COMMAND_DISINF_RESUMED;
   9d19a:	233b      	movs	r3, #59	; 0x3b
   9d19c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
							data = (Cl_Uint8Type)0;
   9d1a0:	2300      	movs	r3, #0
   9d1a2:	74fb      	strb	r3, [r7, #19]
							Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
   9d1a4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   9d1a8:	f107 0313 	add.w	r3, r7, #19
   9d1ac:	4610      	mov	r0, r2
   9d1ae:	4619      	mov	r1, r3
   9d1b0:	2200      	movs	r2, #0
   9d1b2:	4b4e      	ldr	r3, [pc, #312]	; (9d2ec <Cl_disinf_controller+0x10dc>)
   9d1b4:	4798      	blx	r3
   9d1b6:	4603      	mov	r3, r0
   9d1b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
							
							 cl_disinfstate = CL_DISINF_STATE_SECOND_RO_RINSE;
   9d1bc:	4b50      	ldr	r3, [pc, #320]	; (9d300 <Cl_disinf_controller+0x10f0>)
   9d1be:	220a      	movs	r2, #10
   9d1c0:	701a      	strb	r2, [r3, #0]
					 
							 //Send resumed
					 

							break;
   9d1c2:	bf00      	nop
							default:break;
			
							
						}
			
				break;		
   9d1c4:	e248      	b.n	9d658 <Cl_disinf_controller+0x1448>
				case CL_DISINF_STATE_SECOND_RO_RINSE:
								switch ( cl_disinfevent)
   9d1c6:	7efb      	ldrb	r3, [r7, #27]
   9d1c8:	3b03      	subs	r3, #3
   9d1ca:	2b20      	cmp	r3, #32
   9d1cc:	f200 80cc 	bhi.w	9d368 <Cl_disinf_controller+0x1158>
   9d1d0:	a201      	add	r2, pc, #4	; (adr r2, 9d1d8 <Cl_disinf_controller+0xfc8>)
   9d1d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9d1d6:	bf00      	nop
   9d1d8:	0009d25d 	.word	0x0009d25d
   9d1dc:	0009d369 	.word	0x0009d369
   9d1e0:	0009d369 	.word	0x0009d369
   9d1e4:	0009d369 	.word	0x0009d369
   9d1e8:	0009d369 	.word	0x0009d369
   9d1ec:	0009d369 	.word	0x0009d369
   9d1f0:	0009d369 	.word	0x0009d369
   9d1f4:	0009d369 	.word	0x0009d369
   9d1f8:	0009d369 	.word	0x0009d369
   9d1fc:	0009d369 	.word	0x0009d369
   9d200:	0009d369 	.word	0x0009d369
   9d204:	0009d369 	.word	0x0009d369
   9d208:	0009d33f 	.word	0x0009d33f
   9d20c:	0009d369 	.word	0x0009d369
   9d210:	0009d369 	.word	0x0009d369
   9d214:	0009d369 	.word	0x0009d369
   9d218:	0009d35d 	.word	0x0009d35d
   9d21c:	0009d369 	.word	0x0009d369
   9d220:	0009d369 	.word	0x0009d369
   9d224:	0009d369 	.word	0x0009d369
   9d228:	0009d369 	.word	0x0009d369
   9d22c:	0009d369 	.word	0x0009d369
   9d230:	0009d369 	.word	0x0009d369
   9d234:	0009d369 	.word	0x0009d369
   9d238:	0009d369 	.word	0x0009d369
   9d23c:	0009d369 	.word	0x0009d369
   9d240:	0009d369 	.word	0x0009d369
   9d244:	0009d369 	.word	0x0009d369
   9d248:	0009d369 	.word	0x0009d369
   9d24c:	0009d369 	.word	0x0009d369
   9d250:	0009d369 	.word	0x0009d369
   9d254:	0009d369 	.word	0x0009d369
   9d258:	0009d309 	.word	0x0009d309
								{
									
									case EVENT_STOP_DISINF:
									Cl_Disinf_StopDisinf();
   9d25c:	4b1b      	ldr	r3, [pc, #108]	; (9d2cc <Cl_disinf_controller+0x10bc>)
   9d25e:	4798      	blx	r3
									break;
   9d260:	e083      	b.n	9d36a <Cl_disinf_controller+0x115a>
   9d262:	bf00      	nop
   9d264:	f3af 8000 	nop.w
   9d268:	cccccccd 	.word	0xcccccccd
   9d26c:	4008cccc 	.word	0x4008cccc
   9d270:	66666666 	.word	0x66666666
   9d274:	3ff66666 	.word	0x3ff66666
   9d278:	0009df05 	.word	0x0009df05
   9d27c:	0008e7f9 	.word	0x0008e7f9
   9d280:	0008fdd5 	.word	0x0008fdd5
   9d284:	20071a58 	.word	0x20071a58
   9d288:	000a6ac1 	.word	0x000a6ac1
   9d28c:	42c80000 	.word	0x42c80000
   9d290:	000a6031 	.word	0x000a6031
   9d294:	000a5d71 	.word	0x000a5d71
   9d298:	000a5d75 	.word	0x000a5d75
   9d29c:	3ff33333 	.word	0x3ff33333
   9d2a0:	000a669d 	.word	0x000a669d
   9d2a4:	20071c14 	.word	0x20071c14
   9d2a8:	000a6959 	.word	0x000a6959
   9d2ac:	40a00000 	.word	0x40a00000
   9d2b0:	000a6749 	.word	0x000a6749
   9d2b4:	40c00000 	.word	0x40c00000
   9d2b8:	20071be8 	.word	0x20071be8
   9d2bc:	0009dfd1 	.word	0x0009dfd1
   9d2c0:	0009e33d 	.word	0x0009e33d
   9d2c4:	20071bec 	.word	0x20071bec
   9d2c8:	00099d45 	.word	0x00099d45
   9d2cc:	0009d9f9 	.word	0x0009d9f9
   9d2d0:	00099ced 	.word	0x00099ced
   9d2d4:	00099cb9 	.word	0x00099cb9
   9d2d8:	0009a0c9 	.word	0x0009a0c9
   9d2dc:	00099c69 	.word	0x00099c69
   9d2e0:	20071a60 	.word	0x20071a60
   9d2e4:	0008330d 	.word	0x0008330d
   9d2e8:	20071a5f 	.word	0x20071a5f
   9d2ec:	0009ba51 	.word	0x0009ba51
   9d2f0:	20071a62 	.word	0x20071a62
   9d2f4:	20071a61 	.word	0x20071a61
   9d2f8:	20071c12 	.word	0x20071c12
   9d2fc:	0008bc51 	.word	0x0008bc51
   9d300:	20071be7 	.word	0x20071be7
   9d304:	0009dca9 	.word	0x0009dca9
									
									
									case EVENT_POST_DISINFECT_RINSE_COMPLETED:
									
									//Send Complete
									 command = CON_TX_COMMAND_DISINF_COMPLETED;
   9d308:	233a      	movs	r3, #58	; 0x3a
   9d30a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
									 data = (Cl_Uint8Type)0;
   9d30e:	2300      	movs	r3, #0
   9d310:	74fb      	strb	r3, [r7, #19]
									 Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,0);
   9d312:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   9d316:	f107 0313 	add.w	r3, r7, #19
   9d31a:	4610      	mov	r0, r2
   9d31c:	4619      	mov	r1, r3
   9d31e:	2200      	movs	r2, #0
   9d320:	4bb0      	ldr	r3, [pc, #704]	; (9d5e4 <Cl_disinf_controller+0x13d4>)
   9d322:	4798      	blx	r3
   9d324:	4603      	mov	r3, r0
   9d326:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
									  Cl_disinfretcode = Cl_mac_apprequesthandler(MACREQ_DISINF_COMPLETED);
   9d32a:	2054      	movs	r0, #84	; 0x54
   9d32c:	4bae      	ldr	r3, [pc, #696]	; (9d5e8 <Cl_disinf_controller+0x13d8>)
   9d32e:	4798      	blx	r3
   9d330:	4603      	mov	r3, r0
   9d332:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
									 cl_disinfstate = CL_DISINF_STATE_POST_DISINF_STANDBY;
   9d336:	4bad      	ldr	r3, [pc, #692]	; (9d5ec <Cl_disinf_controller+0x13dc>)
   9d338:	220f      	movs	r2, #15
   9d33a:	701a      	strb	r2, [r3, #0]
									 
									break;
   9d33c:	e015      	b.n	9d36a <Cl_disinf_controller+0x115a>
									case EVENT_DISINF_TICK_SECOND:
									Cl_disinfsecondscounter++;
   9d33e:	4bac      	ldr	r3, [pc, #688]	; (9d5f0 <Cl_disinf_controller+0x13e0>)
   9d340:	681b      	ldr	r3, [r3, #0]
   9d342:	3301      	adds	r3, #1
   9d344:	4aaa      	ldr	r2, [pc, #680]	; (9d5f0 <Cl_disinf_controller+0x13e0>)
   9d346:	6013      	str	r3, [r2, #0]
									Cl_Disinf_SendDisinfStateData();
   9d348:	4baa      	ldr	r3, [pc, #680]	; (9d5f4 <Cl_disinf_controller+0x13e4>)
   9d34a:	4798      	blx	r3
									if(Cl_disinfsecondscounter == 60)
   9d34c:	4ba8      	ldr	r3, [pc, #672]	; (9d5f0 <Cl_disinf_controller+0x13e0>)
   9d34e:	681b      	ldr	r3, [r3, #0]
   9d350:	2b3c      	cmp	r3, #60	; 0x3c
   9d352:	d102      	bne.n	9d35a <Cl_disinf_controller+0x114a>
									{
										UpdateDisinfMinuteTick();
   9d354:	4ba8      	ldr	r3, [pc, #672]	; (9d5f8 <Cl_disinf_controller+0x13e8>)
   9d356:	4798      	blx	r3
									}
									break;
   9d358:	e007      	b.n	9d36a <Cl_disinf_controller+0x115a>
   9d35a:	e006      	b.n	9d36a <Cl_disinf_controller+0x115a>
									case EVENT_DISINF_ALARM:
									Cl_disinfretcode = Cl_disinf_ProcessAlarms();
   9d35c:	4ba7      	ldr	r3, [pc, #668]	; (9d5fc <Cl_disinf_controller+0x13ec>)
   9d35e:	4798      	blx	r3
   9d360:	4603      	mov	r3, r0
   9d362:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
									break;
   9d366:	e000      	b.n	9d36a <Cl_disinf_controller+0x115a>
									default:break;
   9d368:	bf00      	nop
								}
				
				
				break;
   9d36a:	e175      	b.n	9d658 <Cl_disinf_controller+0x1448>
				case CL_DISINF_STATE_POST_DISINF_STANDBY:
					switch ( cl_disinfevent)
   9d36c:	7efb      	ldrb	r3, [r7, #27]
   9d36e:	2b01      	cmp	r3, #1
   9d370:	d009      	beq.n	9d386 <Cl_disinf_controller+0x1176>
   9d372:	2b24      	cmp	r3, #36	; 0x24
   9d374:	d000      	beq.n	9d378 <Cl_disinf_controller+0x1168>
							data = (Cl_Uint8Type)COMMAND_RESULT_SUCCESS;
							Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,1);			
							cl_disinfstate = CL_DISINF_STATE_FIRST_RO_RINSE;
						break;
					}
				break;
   9d376:	e16f      	b.n	9d658 <Cl_disinf_controller+0x1448>
				break;
				case CL_DISINF_STATE_POST_DISINF_STANDBY:
					switch ( cl_disinfevent)
					{
						case EVENT_DISINF_START_RINSE:
							Cl_disinfretcode = Cl_mac_apprequesthandler(MACREQ_START_POST_DISINF_RINSE);
   9d378:	2045      	movs	r0, #69	; 0x45
   9d37a:	4b9b      	ldr	r3, [pc, #620]	; (9d5e8 <Cl_disinf_controller+0x13d8>)
   9d37c:	4798      	blx	r3
   9d37e:	4603      	mov	r3, r0
   9d380:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						break;
   9d384:	e035      	b.n	9d3f2 <Cl_disinf_controller+0x11e2>
						case EVENT_START_DISINF:
							Cl_disinfretcode = Cl_mac_apprequesthandler(MACREQ_START_PRE_DISINF_RINSE);
   9d386:	2044      	movs	r0, #68	; 0x44
   9d388:	4b97      	ldr	r3, [pc, #604]	; (9d5e8 <Cl_disinf_controller+0x13d8>)
   9d38a:	4798      	blx	r3
   9d38c:	4603      	mov	r3, r0
   9d38e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
							if(Cl_ConsoleRxMsg.msgready == true)
   9d392:	4b9b      	ldr	r3, [pc, #620]	; (9d600 <Cl_disinf_controller+0x13f0>)
   9d394:	7e1b      	ldrb	r3, [r3, #24]
   9d396:	2b00      	cmp	r3, #0
   9d398:	d016      	beq.n	9d3c8 <Cl_disinf_controller+0x11b8>
							{
								cl_Datastreamtype cl_temp  ;
								cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   9d39a:	4b99      	ldr	r3, [pc, #612]	; (9d600 <Cl_disinf_controller+0x13f0>)
   9d39c:	791b      	ldrb	r3, [r3, #4]
   9d39e:	733b      	strb	r3, [r7, #12]
								if (cl_temp.bytearray[0] == 4)
   9d3a0:	7b3b      	ldrb	r3, [r7, #12]
   9d3a2:	2b04      	cmp	r3, #4
   9d3a4:	d103      	bne.n	9d3ae <Cl_disinf_controller+0x119e>
								{
										flag_hotcitric = 1;
   9d3a6:	4b97      	ldr	r3, [pc, #604]	; (9d604 <Cl_disinf_controller+0x13f4>)
   9d3a8:	2201      	movs	r2, #1
   9d3aa:	701a      	strb	r2, [r3, #0]
   9d3ac:	e00c      	b.n	9d3c8 <Cl_disinf_controller+0x11b8>
								}
								else if (cl_temp.bytearray[0] == 3)
   9d3ae:	7b3b      	ldrb	r3, [r7, #12]
   9d3b0:	2b03      	cmp	r3, #3
   9d3b2:	d103      	bne.n	9d3bc <Cl_disinf_controller+0x11ac>
								{
										flag_na = 1;
   9d3b4:	4b94      	ldr	r3, [pc, #592]	; (9d608 <Cl_disinf_controller+0x13f8>)
   9d3b6:	2201      	movs	r2, #1
   9d3b8:	701a      	strb	r2, [r3, #0]
   9d3ba:	e005      	b.n	9d3c8 <Cl_disinf_controller+0x11b8>
								}
								else if (cl_temp.bytearray[0] == 5)
   9d3bc:	7b3b      	ldrb	r3, [r7, #12]
   9d3be:	2b05      	cmp	r3, #5
   9d3c0:	d102      	bne.n	9d3c8 <Cl_disinf_controller+0x11b8>
								{
									flag_citric = 1;
   9d3c2:	4b92      	ldr	r3, [pc, #584]	; (9d60c <Cl_disinf_controller+0x13fc>)
   9d3c4:	2201      	movs	r2, #1
   9d3c6:	701a      	strb	r2, [r3, #0]
								}
				
							}
							command = CON_TX_COMMAND_DISINF_STARTED;
   9d3c8:	233c      	movs	r3, #60	; 0x3c
   9d3ca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
							data = (Cl_Uint8Type)COMMAND_RESULT_SUCCESS;
   9d3ce:	2301      	movs	r3, #1
   9d3d0:	74fb      	strb	r3, [r7, #19]
							Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,1);			
   9d3d2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   9d3d6:	f107 0313 	add.w	r3, r7, #19
   9d3da:	4610      	mov	r0, r2
   9d3dc:	4619      	mov	r1, r3
   9d3de:	2201      	movs	r2, #1
   9d3e0:	4b80      	ldr	r3, [pc, #512]	; (9d5e4 <Cl_disinf_controller+0x13d4>)
   9d3e2:	4798      	blx	r3
   9d3e4:	4603      	mov	r3, r0
   9d3e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
							cl_disinfstate = CL_DISINF_STATE_FIRST_RO_RINSE;
   9d3ea:	4b80      	ldr	r3, [pc, #512]	; (9d5ec <Cl_disinf_controller+0x13dc>)
   9d3ec:	2203      	movs	r2, #3
   9d3ee:	701a      	strb	r2, [r3, #0]
						break;
   9d3f0:	bf00      	nop
					}
				break;
   9d3f2:	e131      	b.n	9d658 <Cl_disinf_controller+0x1448>
			break;
			case CL_DISINF_STATE_CRITICAL_ALARM:
			switch (cl_disinfevent)
   9d3f4:	7efb      	ldrb	r3, [r7, #27]
   9d3f6:	3b01      	subs	r3, #1
   9d3f8:	2b24      	cmp	r3, #36	; 0x24
   9d3fa:	f200 812c 	bhi.w	9d656 <Cl_disinf_controller+0x1446>
   9d3fe:	a201      	add	r2, pc, #4	; (adr r2, 9d404 <Cl_disinf_controller+0x11f4>)
   9d400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9d404:	0009d499 	.word	0x0009d499
   9d408:	0009d657 	.word	0x0009d657
   9d40c:	0009d657 	.word	0x0009d657
   9d410:	0009d657 	.word	0x0009d657
   9d414:	0009d657 	.word	0x0009d657
   9d418:	0009d657 	.word	0x0009d657
   9d41c:	0009d657 	.word	0x0009d657
   9d420:	0009d657 	.word	0x0009d657
   9d424:	0009d657 	.word	0x0009d657
   9d428:	0009d657 	.word	0x0009d657
   9d42c:	0009d657 	.word	0x0009d657
   9d430:	0009d657 	.word	0x0009d657
   9d434:	0009d657 	.word	0x0009d657
   9d438:	0009d657 	.word	0x0009d657
   9d43c:	0009d511 	.word	0x0009d511
   9d440:	0009d63d 	.word	0x0009d63d
   9d444:	0009d657 	.word	0x0009d657
   9d448:	0009d657 	.word	0x0009d657
   9d44c:	0009d505 	.word	0x0009d505
   9d450:	0009d657 	.word	0x0009d657
   9d454:	0009d657 	.word	0x0009d657
   9d458:	0009d657 	.word	0x0009d657
   9d45c:	0009d657 	.word	0x0009d657
   9d460:	0009d657 	.word	0x0009d657
   9d464:	0009d657 	.word	0x0009d657
   9d468:	0009d657 	.word	0x0009d657
   9d46c:	0009d657 	.word	0x0009d657
   9d470:	0009d657 	.word	0x0009d657
   9d474:	0009d657 	.word	0x0009d657
   9d478:	0009d657 	.word	0x0009d657
   9d47c:	0009d657 	.word	0x0009d657
   9d480:	0009d657 	.word	0x0009d657
   9d484:	0009d657 	.word	0x0009d657
   9d488:	0009d657 	.word	0x0009d657
   9d48c:	0009d657 	.word	0x0009d657
   9d490:	0009d657 	.word	0x0009d657
   9d494:	0009d5cb 	.word	0x0009d5cb
			{
				case EVENT_START_DISINF:
				Cl_disinfretcode = Cl_mac_apprequesthandler(MACREQ_START_PRE_DISINF_RINSE);
   9d498:	2044      	movs	r0, #68	; 0x44
   9d49a:	4b53      	ldr	r3, [pc, #332]	; (9d5e8 <Cl_disinf_controller+0x13d8>)
   9d49c:	4798      	blx	r3
   9d49e:	4603      	mov	r3, r0
   9d4a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if(Cl_ConsoleRxMsg.msgready == true)
   9d4a4:	4b56      	ldr	r3, [pc, #344]	; (9d600 <Cl_disinf_controller+0x13f0>)
   9d4a6:	7e1b      	ldrb	r3, [r3, #24]
   9d4a8:	2b00      	cmp	r3, #0
   9d4aa:	d016      	beq.n	9d4da <Cl_disinf_controller+0x12ca>
				{
					cl_Datastreamtype cl_temp  ;
					cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   9d4ac:	4b54      	ldr	r3, [pc, #336]	; (9d600 <Cl_disinf_controller+0x13f0>)
   9d4ae:	791b      	ldrb	r3, [r3, #4]
   9d4b0:	723b      	strb	r3, [r7, #8]
					if (cl_temp.bytearray[0] == 4)
   9d4b2:	7a3b      	ldrb	r3, [r7, #8]
   9d4b4:	2b04      	cmp	r3, #4
   9d4b6:	d103      	bne.n	9d4c0 <Cl_disinf_controller+0x12b0>
					{
						flag_hotcitric = 1;
   9d4b8:	4b52      	ldr	r3, [pc, #328]	; (9d604 <Cl_disinf_controller+0x13f4>)
   9d4ba:	2201      	movs	r2, #1
   9d4bc:	701a      	strb	r2, [r3, #0]
   9d4be:	e00c      	b.n	9d4da <Cl_disinf_controller+0x12ca>
					}
					else if (cl_temp.bytearray[0] == 3)
   9d4c0:	7a3b      	ldrb	r3, [r7, #8]
   9d4c2:	2b03      	cmp	r3, #3
   9d4c4:	d103      	bne.n	9d4ce <Cl_disinf_controller+0x12be>
					{
						flag_na = 1;
   9d4c6:	4b50      	ldr	r3, [pc, #320]	; (9d608 <Cl_disinf_controller+0x13f8>)
   9d4c8:	2201      	movs	r2, #1
   9d4ca:	701a      	strb	r2, [r3, #0]
   9d4cc:	e005      	b.n	9d4da <Cl_disinf_controller+0x12ca>
					}
					else if (cl_temp.bytearray[0] == 5)
   9d4ce:	7a3b      	ldrb	r3, [r7, #8]
   9d4d0:	2b05      	cmp	r3, #5
   9d4d2:	d102      	bne.n	9d4da <Cl_disinf_controller+0x12ca>
					{
						flag_citric = 1;
   9d4d4:	4b4d      	ldr	r3, [pc, #308]	; (9d60c <Cl_disinf_controller+0x13fc>)
   9d4d6:	2201      	movs	r2, #1
   9d4d8:	701a      	strb	r2, [r3, #0]
					}
				}
				command = CON_TX_COMMAND_DISINF_STARTED;
   9d4da:	233c      	movs	r3, #60	; 0x3c
   9d4dc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				data = (Cl_Uint8Type)COMMAND_RESULT_SUCCESS;
   9d4e0:	2301      	movs	r3, #1
   9d4e2:	74fb      	strb	r3, [r7, #19]
				Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,1);
   9d4e4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
   9d4e8:	f107 0313 	add.w	r3, r7, #19
   9d4ec:	4610      	mov	r0, r2
   9d4ee:	4619      	mov	r1, r3
   9d4f0:	2201      	movs	r2, #1
   9d4f2:	4b3c      	ldr	r3, [pc, #240]	; (9d5e4 <Cl_disinf_controller+0x13d4>)
   9d4f4:	4798      	blx	r3
   9d4f6:	4603      	mov	r3, r0
   9d4f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				cl_disinfstate = CL_DISINF_STATE_FIRST_RO_RINSE;
   9d4fc:	4b3b      	ldr	r3, [pc, #236]	; (9d5ec <Cl_disinf_controller+0x13dc>)
   9d4fe:	2203      	movs	r2, #3
   9d500:	701a      	strb	r2, [r3, #0]
				break;
   9d502:	e0a1      	b.n	9d648 <Cl_disinf_controller+0x1438>
				case EVENT_DISINF_ALARM:
				Cl_disinfretcode = Cl_disinf_ProcessAlarms();
   9d504:	4b3d      	ldr	r3, [pc, #244]	; (9d5fc <Cl_disinf_controller+0x13ec>)
   9d506:	4798      	blx	r3
   9d508:	4603      	mov	r3, r0
   9d50a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break; 
   9d50e:	e09b      	b.n	9d648 <Cl_disinf_controller+0x1438>
				case EVENT_DISINF_TICK_SECOND:
				
				for (tempcount = 0 ; tempcount < CL_DISINF_ALRM_MAX ; tempcount++)
   9d510:	4b3f      	ldr	r3, [pc, #252]	; (9d610 <Cl_disinf_controller+0x1400>)
   9d512:	2200      	movs	r2, #0
   9d514:	801a      	strh	r2, [r3, #0]
   9d516:	e053      	b.n	9d5c0 <Cl_disinf_controller+0x13b0>
				{
					//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER",8);
					Cl_Alarm_GetAlarmStatus(Cl_DisinfAlarmTable[tempcount].CldisinfAlarmId,&Cl_DisinfAlarmTable[tempcount].IsActive);
   9d518:	4b3d      	ldr	r3, [pc, #244]	; (9d610 <Cl_disinf_controller+0x1400>)
   9d51a:	881b      	ldrh	r3, [r3, #0]
   9d51c:	4619      	mov	r1, r3
   9d51e:	4a3d      	ldr	r2, [pc, #244]	; (9d614 <Cl_disinf_controller+0x1404>)
   9d520:	460b      	mov	r3, r1
   9d522:	00db      	lsls	r3, r3, #3
   9d524:	1a5b      	subs	r3, r3, r1
   9d526:	4413      	add	r3, r2
   9d528:	7819      	ldrb	r1, [r3, #0]
   9d52a:	4b39      	ldr	r3, [pc, #228]	; (9d610 <Cl_disinf_controller+0x1400>)
   9d52c:	881b      	ldrh	r3, [r3, #0]
   9d52e:	461a      	mov	r2, r3
   9d530:	4613      	mov	r3, r2
   9d532:	00db      	lsls	r3, r3, #3
   9d534:	1a9b      	subs	r3, r3, r2
   9d536:	4a37      	ldr	r2, [pc, #220]	; (9d614 <Cl_disinf_controller+0x1404>)
   9d538:	4413      	add	r3, r2
   9d53a:	3302      	adds	r3, #2
   9d53c:	4608      	mov	r0, r1
   9d53e:	4619      	mov	r1, r3
   9d540:	4b35      	ldr	r3, [pc, #212]	; (9d618 <Cl_disinf_controller+0x1408>)
   9d542:	4798      	blx	r3
					
					if (Cl_DisinfAlarmTable[tempcount].IsActive)
   9d544:	4b32      	ldr	r3, [pc, #200]	; (9d610 <Cl_disinf_controller+0x1400>)
   9d546:	881b      	ldrh	r3, [r3, #0]
   9d548:	4619      	mov	r1, r3
   9d54a:	4a32      	ldr	r2, [pc, #200]	; (9d614 <Cl_disinf_controller+0x1404>)
   9d54c:	460b      	mov	r3, r1
   9d54e:	00db      	lsls	r3, r3, #3
   9d550:	1a5b      	subs	r3, r3, r1
   9d552:	4413      	add	r3, r2
   9d554:	789b      	ldrb	r3, [r3, #2]
   9d556:	2b00      	cmp	r3, #0
   9d558:	d00d      	beq.n	9d576 <Cl_disinf_controller+0x1366>
					{
						Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_1",8);
   9d55a:	2018      	movs	r0, #24
   9d55c:	492f      	ldr	r1, [pc, #188]	; (9d61c <Cl_disinf_controller+0x140c>)
   9d55e:	2208      	movs	r2, #8
   9d560:	4b20      	ldr	r3, [pc, #128]	; (9d5e4 <Cl_disinf_controller+0x13d4>)
   9d562:	4798      	blx	r3
						Cl_Disinf_StopDisinf();
   9d564:	4b2e      	ldr	r3, [pc, #184]	; (9d620 <Cl_disinf_controller+0x1410>)
   9d566:	4798      	blx	r3
						
							
						
						cl_disinfstate = CL_DISINF_STATE_CRITICAL_ALARM;
   9d568:	4b20      	ldr	r3, [pc, #128]	; (9d5ec <Cl_disinf_controller+0x13dc>)
   9d56a:	220c      	movs	r2, #12
   9d56c:	701a      	strb	r2, [r3, #0]
						//alarm_flag = 1;
						tempcount=0;
   9d56e:	4b28      	ldr	r3, [pc, #160]	; (9d610 <Cl_disinf_controller+0x1400>)
   9d570:	2200      	movs	r2, #0
   9d572:	801a      	strh	r2, [r3, #0]
						break;
   9d574:	e028      	b.n	9d5c8 <Cl_disinf_controller+0x13b8>
					}
					
					else if (tempcount == CL_DISINF_ALRM_MAX - 1)
   9d576:	4b26      	ldr	r3, [pc, #152]	; (9d610 <Cl_disinf_controller+0x1400>)
   9d578:	881b      	ldrh	r3, [r3, #0]
   9d57a:	2b0b      	cmp	r3, #11
   9d57c:	d11a      	bne.n	9d5b4 <Cl_disinf_controller+0x13a4>
					{
						if(!Cl_DisinfAlarmTable[tempcount].IsActive)
   9d57e:	4b24      	ldr	r3, [pc, #144]	; (9d610 <Cl_disinf_controller+0x1400>)
   9d580:	881b      	ldrh	r3, [r3, #0]
   9d582:	4619      	mov	r1, r3
   9d584:	4a23      	ldr	r2, [pc, #140]	; (9d614 <Cl_disinf_controller+0x1404>)
   9d586:	460b      	mov	r3, r1
   9d588:	00db      	lsls	r3, r3, #3
   9d58a:	1a5b      	subs	r3, r3, r1
   9d58c:	4413      	add	r3, r2
   9d58e:	789b      	ldrb	r3, [r3, #2]
   9d590:	f083 0301 	eor.w	r3, r3, #1
   9d594:	b2db      	uxtb	r3, r3
   9d596:	2b00      	cmp	r3, #0
   9d598:	d00c      	beq.n	9d5b4 <Cl_disinf_controller+0x13a4>
						{
							sv_cntrl_resetredalarm();
   9d59a:	4b22      	ldr	r3, [pc, #136]	; (9d624 <Cl_disinf_controller+0x1414>)
   9d59c:	4798      	blx	r3
							sv_cntrl_resetyellowalarm();
   9d59e:	4b22      	ldr	r3, [pc, #136]	; (9d628 <Cl_disinf_controller+0x1418>)
   9d5a0:	4798      	blx	r3
							sv_cntrl_nobuzzer();
   9d5a2:	4b22      	ldr	r3, [pc, #136]	; (9d62c <Cl_disinf_controller+0x141c>)
   9d5a4:	4798      	blx	r3
							//Cl_Disinf_resumeDisinf();
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"SAFE",8);
   9d5a6:	2018      	movs	r0, #24
   9d5a8:	4921      	ldr	r1, [pc, #132]	; (9d630 <Cl_disinf_controller+0x1420>)
   9d5aa:	2208      	movs	r2, #8
   9d5ac:	4b0d      	ldr	r3, [pc, #52]	; (9d5e4 <Cl_disinf_controller+0x13d4>)
   9d5ae:	4798      	blx	r3
							Cl_disinf_ResetAlertsforReassertion();
   9d5b0:	4b20      	ldr	r3, [pc, #128]	; (9d634 <Cl_disinf_controller+0x1424>)
   9d5b2:	4798      	blx	r3
				case EVENT_DISINF_ALARM:
				Cl_disinfretcode = Cl_disinf_ProcessAlarms();
				break; 
				case EVENT_DISINF_TICK_SECOND:
				
				for (tempcount = 0 ; tempcount < CL_DISINF_ALRM_MAX ; tempcount++)
   9d5b4:	4b16      	ldr	r3, [pc, #88]	; (9d610 <Cl_disinf_controller+0x1400>)
   9d5b6:	881b      	ldrh	r3, [r3, #0]
   9d5b8:	3301      	adds	r3, #1
   9d5ba:	b29a      	uxth	r2, r3
   9d5bc:	4b14      	ldr	r3, [pc, #80]	; (9d610 <Cl_disinf_controller+0x1400>)
   9d5be:	801a      	strh	r2, [r3, #0]
   9d5c0:	4b13      	ldr	r3, [pc, #76]	; (9d610 <Cl_disinf_controller+0x1400>)
   9d5c2:	881b      	ldrh	r3, [r3, #0]
   9d5c4:	2b0b      	cmp	r3, #11
   9d5c6:	d9a7      	bls.n	9d518 <Cl_disinf_controller+0x1308>
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"SAFE",8);
							Cl_disinf_ResetAlertsforReassertion();
						}
					}
				}
				break;
   9d5c8:	e03e      	b.n	9d648 <Cl_disinf_controller+0x1438>
				
				
				case EVENT_DISINF_CLR_ALARM:
					sv_cntrl_resetredalarm();
   9d5ca:	4b16      	ldr	r3, [pc, #88]	; (9d624 <Cl_disinf_controller+0x1414>)
   9d5cc:	4798      	blx	r3
					sv_cntrl_resetyellowalarm();
   9d5ce:	4b16      	ldr	r3, [pc, #88]	; (9d628 <Cl_disinf_controller+0x1418>)
   9d5d0:	4798      	blx	r3
					sv_cntrl_nobuzzer();
   9d5d2:	4b16      	ldr	r3, [pc, #88]	; (9d62c <Cl_disinf_controller+0x141c>)
   9d5d4:	4798      	blx	r3
					Cl_Disinf_resumeDisinf();
   9d5d6:	4b18      	ldr	r3, [pc, #96]	; (9d638 <Cl_disinf_controller+0x1428>)
   9d5d8:	4798      	blx	r3
					cl_disinfstate = CL_DISINF_STATE_DISINF_RINSING;
   9d5da:	4b04      	ldr	r3, [pc, #16]	; (9d5ec <Cl_disinf_controller+0x13dc>)
   9d5dc:	2208      	movs	r2, #8
   9d5de:	701a      	strb	r2, [r3, #0]
				break;
   9d5e0:	e032      	b.n	9d648 <Cl_disinf_controller+0x1438>
   9d5e2:	bf00      	nop
   9d5e4:	0009ba51 	.word	0x0009ba51
   9d5e8:	0008bc51 	.word	0x0008bc51
   9d5ec:	20071be7 	.word	0x20071be7
   9d5f0:	20071be8 	.word	0x20071be8
   9d5f4:	0009dfd1 	.word	0x0009dfd1
   9d5f8:	0009e33d 	.word	0x0009e33d
   9d5fc:	0009dca9 	.word	0x0009dca9
   9d600:	200723f0 	.word	0x200723f0
   9d604:	20071a5f 	.word	0x20071a5f
   9d608:	20071a61 	.word	0x20071a61
   9d60c:	20071a62 	.word	0x20071a62
   9d610:	2007281c 	.word	0x2007281c
   9d614:	20070b88 	.word	0x20070b88
   9d618:	00083035 	.word	0x00083035
   9d61c:	000a8d14 	.word	0x000a8d14
   9d620:	0009d9f9 	.word	0x0009d9f9
   9d624:	00099f75 	.word	0x00099f75
   9d628:	00099f89 	.word	0x00099f89
   9d62c:	00099fb1 	.word	0x00099fb1
   9d630:	000a8d24 	.word	0x000a8d24
   9d634:	0009df05 	.word	0x0009df05
   9d638:	0009daad 	.word	0x0009daad
				case EVENT_DISINF_TICK_MINUTE:
				Cl_disinfretcode = Cl_disinf_ResetAlertsforReassertion();
   9d63c:	4b09      	ldr	r3, [pc, #36]	; (9d664 <Cl_disinf_controller+0x1454>)
   9d63e:	4798      	blx	r3
   9d640:	4603      	mov	r3, r0
   9d642:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				break;
   9d646:	bf00      	nop
				
			}
			break;
   9d648:	e005      	b.n	9d656 <Cl_disinf_controller+0x1446>
			default:break;
   9d64a:	bf00      	nop
   9d64c:	e004      	b.n	9d658 <Cl_disinf_controller+0x1448>
							}
						}
					break;
							
				}
			break;
   9d64e:	bf00      	nop
   9d650:	e002      	b.n	9d658 <Cl_disinf_controller+0x1448>
// 						}
//					}
								break;
					
						}
			break;
   9d652:	bf00      	nop
   9d654:	e000      	b.n	9d658 <Cl_disinf_controller+0x1448>
				case EVENT_DISINF_TICK_MINUTE:
				Cl_disinfretcode = Cl_disinf_ResetAlertsforReassertion();
				break;
				
			}
			break;
   9d656:	bf00      	nop
			default:break;
			
		}
		

	return CL_OK;
   9d658:	2300      	movs	r3, #0
}
   9d65a:	4618      	mov	r0, r3
   9d65c:	372c      	adds	r7, #44	; 0x2c
   9d65e:	46bd      	mov	sp, r7
   9d660:	bd90      	pop	{r4, r7, pc}
   9d662:	bf00      	nop
   9d664:	0009df05 	.word	0x0009df05

0009d668 <cl_disinf_translatemacevent>:
 * \return CL_OK on success. 
 * \Globals used :
 */   

Cl_ReturnCodeType  cl_disinf_translatemacevent(Cl_Mac_EventsType Cl_MacdisinfEvt,Cl_disinf_Eevents* cl_disinf_event)
{
   9d668:	b480      	push	{r7}
   9d66a:	b083      	sub	sp, #12
   9d66c:	af00      	add	r7, sp, #0
   9d66e:	4603      	mov	r3, r0
   9d670:	6039      	str	r1, [r7, #0]
   9d672:	71fb      	strb	r3, [r7, #7]
	switch(Cl_MacdisinfEvt)
   9d674:	79fb      	ldrb	r3, [r7, #7]
   9d676:	3b07      	subs	r3, #7
   9d678:	2b4d      	cmp	r3, #77	; 0x4d
   9d67a:	f200 8107 	bhi.w	9d88c <cl_disinf_translatemacevent+0x224>
   9d67e:	a201      	add	r2, pc, #4	; (adr r2, 9d684 <cl_disinf_translatemacevent+0x1c>)
   9d680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9d684:	0009d845 	.word	0x0009d845
   9d688:	0009d88d 	.word	0x0009d88d
   9d68c:	0009d88d 	.word	0x0009d88d
   9d690:	0009d875 	.word	0x0009d875
   9d694:	0009d87d 	.word	0x0009d87d
   9d698:	0009d885 	.word	0x0009d885
   9d69c:	0009d83d 	.word	0x0009d83d
   9d6a0:	0009d84d 	.word	0x0009d84d
   9d6a4:	0009d855 	.word	0x0009d855
   9d6a8:	0009d85d 	.word	0x0009d85d
   9d6ac:	0009d88d 	.word	0x0009d88d
   9d6b0:	0009d88d 	.word	0x0009d88d
   9d6b4:	0009d88d 	.word	0x0009d88d
   9d6b8:	0009d88d 	.word	0x0009d88d
   9d6bc:	0009d88d 	.word	0x0009d88d
   9d6c0:	0009d88d 	.word	0x0009d88d
   9d6c4:	0009d88d 	.word	0x0009d88d
   9d6c8:	0009d88d 	.word	0x0009d88d
   9d6cc:	0009d88d 	.word	0x0009d88d
   9d6d0:	0009d88d 	.word	0x0009d88d
   9d6d4:	0009d88d 	.word	0x0009d88d
   9d6d8:	0009d88d 	.word	0x0009d88d
   9d6dc:	0009d88d 	.word	0x0009d88d
   9d6e0:	0009d88d 	.word	0x0009d88d
   9d6e4:	0009d865 	.word	0x0009d865
   9d6e8:	0009d86d 	.word	0x0009d86d
   9d6ec:	0009d88d 	.word	0x0009d88d
   9d6f0:	0009d88d 	.word	0x0009d88d
   9d6f4:	0009d88d 	.word	0x0009d88d
   9d6f8:	0009d88d 	.word	0x0009d88d
   9d6fc:	0009d88d 	.word	0x0009d88d
   9d700:	0009d88d 	.word	0x0009d88d
   9d704:	0009d88d 	.word	0x0009d88d
   9d708:	0009d88d 	.word	0x0009d88d
   9d70c:	0009d7c5 	.word	0x0009d7c5
   9d710:	0009d88d 	.word	0x0009d88d
   9d714:	0009d88d 	.word	0x0009d88d
   9d718:	0009d88d 	.word	0x0009d88d
   9d71c:	0009d835 	.word	0x0009d835
   9d720:	0009d82d 	.word	0x0009d82d
   9d724:	0009d88d 	.word	0x0009d88d
   9d728:	0009d88d 	.word	0x0009d88d
   9d72c:	0009d88d 	.word	0x0009d88d
   9d730:	0009d88d 	.word	0x0009d88d
   9d734:	0009d88d 	.word	0x0009d88d
   9d738:	0009d88d 	.word	0x0009d88d
   9d73c:	0009d88d 	.word	0x0009d88d
   9d740:	0009d88d 	.word	0x0009d88d
   9d744:	0009d88d 	.word	0x0009d88d
   9d748:	0009d7fd 	.word	0x0009d7fd
   9d74c:	0009d805 	.word	0x0009d805
   9d750:	0009d80d 	.word	0x0009d80d
   9d754:	0009d815 	.word	0x0009d815
   9d758:	0009d81d 	.word	0x0009d81d
   9d75c:	0009d825 	.word	0x0009d825
   9d760:	0009d88d 	.word	0x0009d88d
   9d764:	0009d7bd 	.word	0x0009d7bd
   9d768:	0009d7cd 	.word	0x0009d7cd
   9d76c:	0009d7d5 	.word	0x0009d7d5
   9d770:	0009d88d 	.word	0x0009d88d
   9d774:	0009d88d 	.word	0x0009d88d
   9d778:	0009d88d 	.word	0x0009d88d
   9d77c:	0009d88d 	.word	0x0009d88d
   9d780:	0009d88d 	.word	0x0009d88d
   9d784:	0009d88d 	.word	0x0009d88d
   9d788:	0009d88d 	.word	0x0009d88d
   9d78c:	0009d88d 	.word	0x0009d88d
   9d790:	0009d88d 	.word	0x0009d88d
   9d794:	0009d88d 	.word	0x0009d88d
   9d798:	0009d88d 	.word	0x0009d88d
   9d79c:	0009d88d 	.word	0x0009d88d
   9d7a0:	0009d88d 	.word	0x0009d88d
   9d7a4:	0009d88d 	.word	0x0009d88d
   9d7a8:	0009d88d 	.word	0x0009d88d
   9d7ac:	0009d7f5 	.word	0x0009d7f5
   9d7b0:	0009d7dd 	.word	0x0009d7dd
   9d7b4:	0009d7e5 	.word	0x0009d7e5
   9d7b8:	0009d7ed 	.word	0x0009d7ed
	{

		
		case  EVT_CONSOLE_COMMAND_DISINF_START:
		*cl_disinf_event= EVENT_START_DISINF;
   9d7bc:	683b      	ldr	r3, [r7, #0]
   9d7be:	2201      	movs	r2, #1
   9d7c0:	701a      	strb	r2, [r3, #0]
		break;
   9d7c2:	e064      	b.n	9d88e <cl_disinf_translatemacevent+0x226>
		
		case EVT_CONSOLE_COMMAND_CLR_ALARM:
		*cl_disinf_event= EVENT_DISINF_CLR_ALARM;
   9d7c4:	683b      	ldr	r3, [r7, #0]
   9d7c6:	2225      	movs	r2, #37	; 0x25
   9d7c8:	701a      	strb	r2, [r3, #0]
		break;
   9d7ca:	e060      	b.n	9d88e <cl_disinf_translatemacevent+0x226>
		case EVT_CONSOLE_RESUME_DISINF_STAGE:
		*cl_disinf_event= EVT_RESUME_DISINF_STAGE;
   9d7cc:	683b      	ldr	r3, [r7, #0]
   9d7ce:	2202      	movs	r2, #2
   9d7d0:	701a      	strb	r2, [r3, #0]
		break;
   9d7d2:	e05c      	b.n	9d88e <cl_disinf_translatemacevent+0x226>
		case EVT_CONSOLE_COMMAND_STOP_DISINF:
		*cl_disinf_event= EVENT_STOP_DISINF;
   9d7d4:	683b      	ldr	r3, [r7, #0]
   9d7d6:	2203      	movs	r2, #3
   9d7d8:	701a      	strb	r2, [r3, #0]
		break;
   9d7da:	e058      	b.n	9d88e <cl_disinf_translatemacevent+0x226>

		case MACREQ_PRE_DISINFECT_RINSE_COMPLETED:
		*cl_disinf_event= EVENT_PRE_DISINFECT_RINSE_COMPLETED;
   9d7dc:	683b      	ldr	r3, [r7, #0]
   9d7de:	2222      	movs	r2, #34	; 0x22
   9d7e0:	701a      	strb	r2, [r3, #0]
		break;
   9d7e2:	e054      	b.n	9d88e <cl_disinf_translatemacevent+0x226>


		case MACREQ_POST_DISINFECT_RINSE_COMPLETED:
		*cl_disinf_event = EVENT_POST_DISINFECT_RINSE_COMPLETED ;
   9d7e4:	683b      	ldr	r3, [r7, #0]
   9d7e6:	2223      	movs	r2, #35	; 0x23
   9d7e8:	701a      	strb	r2, [r3, #0]
		break;
   9d7ea:	e050      	b.n	9d88e <cl_disinf_translatemacevent+0x226>
		case MACREQ_DISINF_COMPLETED:
		*cl_disinf_event = EVENT_MAC_DISINF_COMPLETED;
   9d7ec:	683b      	ldr	r3, [r7, #0]
   9d7ee:	2216      	movs	r2, #22
   9d7f0:	701a      	strb	r2, [r3, #0]
		break;
   9d7f2:	e04c      	b.n	9d88e <cl_disinf_translatemacevent+0x226>
		case MACREQ_BC_OPENFILL_COMPLETED:
		*cl_disinf_event = EVENT_DISINF_BC_OPENFILL_COMPLETED;
   9d7f4:	683b      	ldr	r3, [r7, #0]
   9d7f6:	2221      	movs	r2, #33	; 0x21
   9d7f8:	701a      	strb	r2, [r3, #0]
		break;
   9d7fa:	e048      	b.n	9d88e <cl_disinf_translatemacevent+0x226>

		
		case EVT_TICK_50M:
		*cl_disinf_event =   EVENT_DISINF_TICK_50MS;
   9d7fc:	683b      	ldr	r3, [r7, #0]
   9d7fe:	220c      	movs	r2, #12
   9d800:	701a      	strb	r2, [r3, #0]
		break;
   9d802:	e044      	b.n	9d88e <cl_disinf_translatemacevent+0x226>
		break;
		case EVT_TICK_100M:
		*cl_disinf_event =   EVENT_DISINF_TICK_100MS;
   9d804:	683b      	ldr	r3, [r7, #0]
   9d806:	220d      	movs	r2, #13
   9d808:	701a      	strb	r2, [r3, #0]
		break;
   9d80a:	e040      	b.n	9d88e <cl_disinf_translatemacevent+0x226>
		case EVT_TICK_500M:
		*cl_disinf_event =   EVENT_DISINF_TICK_500MS;
   9d80c:	683b      	ldr	r3, [r7, #0]
   9d80e:	220e      	movs	r2, #14
   9d810:	701a      	strb	r2, [r3, #0]
		break;
   9d812:	e03c      	b.n	9d88e <cl_disinf_translatemacevent+0x226>
		case EVT_TICK_SEC:
		*cl_disinf_event =   EVENT_DISINF_TICK_SECOND;
   9d814:	683b      	ldr	r3, [r7, #0]
   9d816:	220f      	movs	r2, #15
   9d818:	701a      	strb	r2, [r3, #0]
		break;
   9d81a:	e038      	b.n	9d88e <cl_disinf_translatemacevent+0x226>
		case EVT_TICK_MIN:
		*cl_disinf_event =   EVENT_DISINF_TICK_MINUTE;
   9d81c:	683b      	ldr	r3, [r7, #0]
   9d81e:	2210      	movs	r2, #16
   9d820:	701a      	strb	r2, [r3, #0]
		break;
   9d822:	e034      	b.n	9d88e <cl_disinf_translatemacevent+0x226>
		case EVT_TICK_HOUR:
		*cl_disinf_event =   EVENT_DISINF_TICK_HOUR;
   9d824:	683b      	ldr	r3, [r7, #0]
   9d826:	2211      	movs	r2, #17
   9d828:	701a      	strb	r2, [r3, #0]
		break;
   9d82a:	e030      	b.n	9d88e <cl_disinf_translatemacevent+0x226>
		case EVT_ALARM_TRIGGERED:
		*cl_disinf_event =  EVENT_DISINF_ALARM;
   9d82c:	683b      	ldr	r3, [r7, #0]
   9d82e:	2213      	movs	r2, #19
   9d830:	701a      	strb	r2, [r3, #0]
		break;
   9d832:	e02c      	b.n	9d88e <cl_disinf_translatemacevent+0x226>
		case  EVT_ALERT_TRIGGERED:
		*cl_disinf_event =  EVENT_DISINF_ALERT;
   9d834:	683b      	ldr	r3, [r7, #0]
   9d836:	2212      	movs	r2, #18
   9d838:	701a      	strb	r2, [r3, #0]
		break;
   9d83a:	e028      	b.n	9d88e <cl_disinf_translatemacevent+0x226>
		
		case EVT_CONSOLE_COMMAND_SET_DATA:
		*cl_disinf_event = EVT_DISINF_SET_DATA;
   9d83c:	683b      	ldr	r3, [r7, #0]
   9d83e:	2215      	movs	r2, #21
   9d840:	701a      	strb	r2, [r3, #0]
		break;
   9d842:	e024      	b.n	9d88e <cl_disinf_translatemacevent+0x226>
		
		case  EVT_CONSOLE_COMMAND_RINSE_START:
		*cl_disinf_event= EVENT_DISINF_START_RINSE;
   9d844:	683b      	ldr	r3, [r7, #0]
   9d846:	2224      	movs	r2, #36	; 0x24
   9d848:	701a      	strb	r2, [r3, #0]
		break;
   9d84a:	e020      	b.n	9d88e <cl_disinf_translatemacevent+0x226>
		
		case EVT_CONSOLE_COMMAND_GET_DATA:
		*cl_disinf_event =  EVT_DISINF_GET_DATA;
   9d84c:	683b      	ldr	r3, [r7, #0]
   9d84e:	2214      	movs	r2, #20
   9d850:	701a      	strb	r2, [r3, #0]
		break;
   9d852:	e01c      	b.n	9d88e <cl_disinf_translatemacevent+0x226>
		case EVT_CONSOLE_COMMAND_START_PRIME:
		*cl_disinf_event =  EVT_DISINF_START_PRIME;
   9d854:	683b      	ldr	r3, [r7, #0]
   9d856:	2217      	movs	r2, #23
   9d858:	701a      	strb	r2, [r3, #0]
		break;
   9d85a:	e018      	b.n	9d88e <cl_disinf_translatemacevent+0x226>
		case EVT_CONSOLE_COMMAND_STOP_PRIME:
		*cl_disinf_event =  EVT_DISINF_STOP_PRIME;
   9d85c:	683b      	ldr	r3, [r7, #0]
   9d85e:	2218      	movs	r2, #24
   9d860:	701a      	strb	r2, [r3, #0]
		break;
   9d862:	e014      	b.n	9d88e <cl_disinf_translatemacevent+0x226>
		case EVT_CONSOLE_COMMAND_RCIRC_START:
		*cl_disinf_event = EVT_DISINF_RCIRC_START;
   9d864:	683b      	ldr	r3, [r7, #0]
   9d866:	221c      	movs	r2, #28
   9d868:	701a      	strb	r2, [r3, #0]
		break;
   9d86a:	e010      	b.n	9d88e <cl_disinf_translatemacevent+0x226>
		case EVT_CONSOLE_COMMAND_RCIRC_STOP:
		*cl_disinf_event = EVT_DISINF_RCIRC_STOP;
   9d86c:	683b      	ldr	r3, [r7, #0]
   9d86e:	221d      	movs	r2, #29
   9d870:	701a      	strb	r2, [r3, #0]
		break;
   9d872:	e00c      	b.n	9d88e <cl_disinf_translatemacevent+0x226>
		case EVT_CONSOLE_COMMAND_SET_BLDPMP_ON:
		*cl_disinf_event = EVT_DISINF_COMMAND_SET_BLDPMP_ON;
   9d874:	683b      	ldr	r3, [r7, #0]
   9d876:	221e      	movs	r2, #30
   9d878:	701a      	strb	r2, [r3, #0]
		break;
   9d87a:	e008      	b.n	9d88e <cl_disinf_translatemacevent+0x226>
		case EVT_CONSOLE_COMMAND_SET_BLDPMP_OFF:
		*cl_disinf_event = EVT_DISINF_COMMAND_SET_BLDPMP_OFF;
   9d87c:	683b      	ldr	r3, [r7, #0]
   9d87e:	221f      	movs	r2, #31
   9d880:	701a      	strb	r2, [r3, #0]
		break;
   9d882:	e004      	b.n	9d88e <cl_disinf_translatemacevent+0x226>
		break;
		case EVT_CONSOLE_COMMAND_SET_BLDPUMPRATE:
		*cl_disinf_event = EVT_DISINF_COMMAND_SET_BLDPUMPRATE;
   9d884:	683b      	ldr	r3, [r7, #0]
   9d886:	2220      	movs	r2, #32
   9d888:	701a      	strb	r2, [r3, #0]
		break;
   9d88a:	e000      	b.n	9d88e <cl_disinf_translatemacevent+0x226>
		
		default:
		break;
   9d88c:	bf00      	nop
	}
	return CL_OK;
   9d88e:	2300      	movs	r3, #0
}
   9d890:	4618      	mov	r0, r3
   9d892:	370c      	adds	r7, #12
   9d894:	46bd      	mov	sp, r7
   9d896:	f85d 7b04 	ldr.w	r7, [sp], #4
   9d89a:	4770      	bx	lr

0009d89c <Cl_Disinf_StartDisinf>:
 * \return CL_OK on success. 
 * \Globals used :
 */   

Cl_ReturnCodeType Cl_Disinf_StartDisinf(void)
{
   9d89c:	b590      	push	{r4, r7, lr}
   9d89e:	b085      	sub	sp, #20
   9d8a0:	af02      	add	r7, sp, #8
	Cl_ReturnCodeType Cl_disinfretcode = CL_OK;
   9d8a2:	2300      	movs	r3, #0
   9d8a4:	71fb      	strb	r3, [r7, #7]
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9d8a6:	2351      	movs	r3, #81	; 0x51
   9d8a8:	71bb      	strb	r3, [r7, #6]
	Cl_Uint8Type dataarray[4] = {0,0,0,0};
   9d8aa:	2300      	movs	r3, #0
   9d8ac:	703b      	strb	r3, [r7, #0]
   9d8ae:	2300      	movs	r3, #0
   9d8b0:	707b      	strb	r3, [r7, #1]
   9d8b2:	2300      	movs	r3, #0
   9d8b4:	70bb      	strb	r3, [r7, #2]
   9d8b6:	2300      	movs	r3, #0
   9d8b8:	70fb      	strb	r3, [r7, #3]
	Cl_Uint8Type data = 0;
   9d8ba:	2300      	movs	r3, #0
   9d8bc:	717b      	strb	r3, [r7, #5]
	
	//Check for  rinse readiness and alarm status
	
	sv_cntrl_deactivate_valve(VALVE_ID1);
   9d8be:	2001      	movs	r0, #1
   9d8c0:	4b42      	ldr	r3, [pc, #264]	; (9d9cc <Cl_Disinf_StartDisinf+0x130>)
   9d8c2:	4798      	blx	r3
	sv_cs_setpotvalue(600);
   9d8c4:	f44f 7016 	mov.w	r0, #600	; 0x258
   9d8c8:	4b41      	ldr	r3, [pc, #260]	; (9d9d0 <Cl_Disinf_StartDisinf+0x134>)
   9d8ca:	4798      	blx	r3
	
	Cl_disinfretcode =  sv_cntrl_activatepump(DCMOTOR1);
   9d8cc:	2001      	movs	r0, #1
   9d8ce:	4b41      	ldr	r3, [pc, #260]	; (9d9d4 <Cl_Disinf_StartDisinf+0x138>)
   9d8d0:	4798      	blx	r3
   9d8d2:	4603      	mov	r3, r0
   9d8d4:	71fb      	strb	r3, [r7, #7]
	Cl_disinfretcode = sv_cntrl_setpumpspeed(DCMOTOR1,600);
   9d8d6:	2001      	movs	r0, #1
   9d8d8:	f44f 7116 	mov.w	r1, #600	; 0x258
   9d8dc:	4b3e      	ldr	r3, [pc, #248]	; (9d9d8 <Cl_Disinf_StartDisinf+0x13c>)
   9d8de:	4798      	blx	r3
   9d8e0:	4603      	mov	r3, r0
   9d8e2:	71fb      	strb	r3, [r7, #7]
	
	Cl_disinfretcode = Cl_bc_controller(BC_EVENT_START);
   9d8e4:	2004      	movs	r0, #4
   9d8e6:	4b3d      	ldr	r3, [pc, #244]	; (9d9dc <Cl_Disinf_StartDisinf+0x140>)
   9d8e8:	4798      	blx	r3
   9d8ea:	4603      	mov	r3, r0
   9d8ec:	71fb      	strb	r3, [r7, #7]
	
	if(Cl_disinfretcode == CL_OK)
   9d8ee:	79fb      	ldrb	r3, [r7, #7]
   9d8f0:	2b00      	cmp	r3, #0
   9d8f2:	d165      	bne.n	9d9c0 <Cl_Disinf_StartDisinf+0x124>
	{
		Cl_disinfOpenFillTimeOut = false;
   9d8f4:	4b3a      	ldr	r3, [pc, #232]	; (9d9e0 <Cl_Disinf_StartDisinf+0x144>)
   9d8f6:	2200      	movs	r2, #0
   9d8f8:	701a      	strb	r2, [r3, #0]
		Cl_disinfretcode = Cl_Disinf_UpdateTimeInfo();
   9d8fa:	4b3a      	ldr	r3, [pc, #232]	; (9d9e4 <Cl_Disinf_StartDisinf+0x148>)
   9d8fc:	4798      	blx	r3
   9d8fe:	4603      	mov	r3, r0
   9d900:	71fb      	strb	r3, [r7, #7]
		Cl_disinfretcode =  cl_flow_switchcontroller(FLOW_SWITCH_CNTRLER_EVENT_START);
   9d902:	2001      	movs	r0, #1
   9d904:	4b38      	ldr	r3, [pc, #224]	; (9d9e8 <Cl_Disinf_StartDisinf+0x14c>)
   9d906:	4798      	blx	r3
   9d908:	4603      	mov	r3, r0
   9d90a:	71fb      	strb	r3, [r7, #7]
		Cl_disinf_ResetAlertsforReassertion();
   9d90c:	4b37      	ldr	r3, [pc, #220]	; (9d9ec <Cl_Disinf_StartDisinf+0x150>)
   9d90e:	4798      	blx	r3
		Cl_disinfretcode =  Cl_AlarmConfigureAlarmType(ACID_IN_OPEN,LOGIC_LOW,0,0,0);
   9d910:	2300      	movs	r3, #0
   9d912:	9300      	str	r3, [sp, #0]
   9d914:	2029      	movs	r0, #41	; 0x29
   9d916:	2100      	movs	r1, #0
   9d918:	f04f 0200 	mov.w	r2, #0
   9d91c:	f04f 0300 	mov.w	r3, #0
   9d920:	4c33      	ldr	r4, [pc, #204]	; (9d9f0 <Cl_Disinf_StartDisinf+0x154>)
   9d922:	47a0      	blx	r4
   9d924:	4603      	mov	r3, r0
   9d926:	71fb      	strb	r3, [r7, #7]
		Cl_disinfretcode =  Cl_AlarmConfigureAlarmType(BICARB_IN_OPEN,LOGIC_LOW,0,0,0);
   9d928:	2300      	movs	r3, #0
   9d92a:	9300      	str	r3, [sp, #0]
   9d92c:	202b      	movs	r0, #43	; 0x2b
   9d92e:	2100      	movs	r1, #0
   9d930:	f04f 0200 	mov.w	r2, #0
   9d934:	f04f 0300 	mov.w	r3, #0
   9d938:	4c2d      	ldr	r4, [pc, #180]	; (9d9f0 <Cl_Disinf_StartDisinf+0x154>)
   9d93a:	47a0      	blx	r4
   9d93c:	4603      	mov	r3, r0
   9d93e:	71fb      	strb	r3, [r7, #7]
		Cl_disinfretcode =  Cl_AlarmConfigureAlarmType(HOLDER1STATUS_OPEN,LOGIC_HIGH,0,0,0);
   9d940:	2300      	movs	r3, #0
   9d942:	9300      	str	r3, [sp, #0]
   9d944:	2003      	movs	r0, #3
   9d946:	2101      	movs	r1, #1
   9d948:	f04f 0200 	mov.w	r2, #0
   9d94c:	f04f 0300 	mov.w	r3, #0
   9d950:	4c27      	ldr	r4, [pc, #156]	; (9d9f0 <Cl_Disinf_StartDisinf+0x154>)
   9d952:	47a0      	blx	r4
   9d954:	4603      	mov	r3, r0
   9d956:	71fb      	strb	r3, [r7, #7]
		Cl_disinfretcode =  Cl_AlarmConfigureAlarmType(HOLDER2STATUS_OPEN,LOGIC_HIGH,0,0,0);
   9d958:	2300      	movs	r3, #0
   9d95a:	9300      	str	r3, [sp, #0]
   9d95c:	2004      	movs	r0, #4
   9d95e:	2101      	movs	r1, #1
   9d960:	f04f 0200 	mov.w	r2, #0
   9d964:	f04f 0300 	mov.w	r3, #0
   9d968:	4c21      	ldr	r4, [pc, #132]	; (9d9f0 <Cl_Disinf_StartDisinf+0x154>)
   9d96a:	47a0      	blx	r4
   9d96c:	4603      	mov	r3, r0
   9d96e:	71fb      	strb	r3, [r7, #7]
		Cl_disinfretcode =  Cl_AlarmConfigureAlarmType(LEVELSWITCH_OFF_TO_ON,LOGIC_LOW,0,0,0);
   9d970:	2300      	movs	r3, #0
   9d972:	9300      	str	r3, [sp, #0]
   9d974:	203d      	movs	r0, #61	; 0x3d
   9d976:	2100      	movs	r1, #0
   9d978:	f04f 0200 	mov.w	r2, #0
   9d97c:	f04f 0300 	mov.w	r3, #0
   9d980:	4c1b      	ldr	r4, [pc, #108]	; (9d9f0 <Cl_Disinf_StartDisinf+0x154>)
   9d982:	47a0      	blx	r4
   9d984:	4603      	mov	r3, r0
   9d986:	71fb      	strb	r3, [r7, #7]
		Cl_disinfretcode =  Cl_AlarmConfigureAlarmType(LEVELSWITCH_ON_TO_OFF,LOGIC_HIGH,0,0,0);
   9d988:	2300      	movs	r3, #0
   9d98a:	9300      	str	r3, [sp, #0]
   9d98c:	203e      	movs	r0, #62	; 0x3e
   9d98e:	2101      	movs	r1, #1
   9d990:	f04f 0200 	mov.w	r2, #0
   9d994:	f04f 0300 	mov.w	r3, #0
   9d998:	4c15      	ldr	r4, [pc, #84]	; (9d9f0 <Cl_Disinf_StartDisinf+0x154>)
   9d99a:	47a0      	blx	r4
   9d99c:	4603      	mov	r3, r0
   9d99e:	71fb      	strb	r3, [r7, #7]
		
		/*Cl_disinfretcode =  Cl_AlarmActivateAlarms(ACID_IN,true );
		Cl_disinfretcode =  Cl_AlarmActivateAlarms(BICARB_IN,true );
		Cl_disinfretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_OPEN,true);
		Cl_disinfretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_OPEN,true);*/
		Cl_disinfretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON,true);
   9d9a0:	203d      	movs	r0, #61	; 0x3d
   9d9a2:	2101      	movs	r1, #1
   9d9a4:	4b13      	ldr	r3, [pc, #76]	; (9d9f4 <Cl_Disinf_StartDisinf+0x158>)
   9d9a6:	4798      	blx	r3
   9d9a8:	4603      	mov	r3, r0
   9d9aa:	71fb      	strb	r3, [r7, #7]
		Cl_disinfretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_ON_TO_OFF,true);
   9d9ac:	203e      	movs	r0, #62	; 0x3e
   9d9ae:	2101      	movs	r1, #1
   9d9b0:	4b10      	ldr	r3, [pc, #64]	; (9d9f4 <Cl_Disinf_StartDisinf+0x158>)
   9d9b2:	4798      	blx	r3
   9d9b4:	4603      	mov	r3, r0
   9d9b6:	71fb      	strb	r3, [r7, #7]
		/*Cl_disinfretcode =  Cl_AlarmActivateAlarms(COND_STATUS_HIGH,true);
		Cl_disinfretcode =  Cl_AlarmActivateAlarms(TEMP3_HIGH_THRESHOLD,true);*/
		
		Cl_disinfretcode = Cl_disinf_ResetAlertsforReassertion();	
   9d9b8:	4b0c      	ldr	r3, [pc, #48]	; (9d9ec <Cl_Disinf_StartDisinf+0x150>)
   9d9ba:	4798      	blx	r3
   9d9bc:	4603      	mov	r3, r0
   9d9be:	71fb      	strb	r3, [r7, #7]
	}
return CL_OK;
   9d9c0:	2300      	movs	r3, #0
}
   9d9c2:	4618      	mov	r0, r3
   9d9c4:	370c      	adds	r7, #12
   9d9c6:	46bd      	mov	sp, r7
   9d9c8:	bd90      	pop	{r4, r7, pc}
   9d9ca:	bf00      	nop
   9d9cc:	00099ced 	.word	0x00099ced
   9d9d0:	0009a175 	.word	0x0009a175
   9d9d4:	00099c2d 	.word	0x00099c2d
   9d9d8:	00099d45 	.word	0x00099d45
   9d9dc:	0008330d 	.word	0x0008330d
   9d9e0:	20070b86 	.word	0x20070b86
   9d9e4:	0009db4d 	.word	0x0009db4d
   9d9e8:	00093815 	.word	0x00093815
   9d9ec:	0009df05 	.word	0x0009df05
   9d9f0:	00082e09 	.word	0x00082e09
   9d9f4:	00082e61 	.word	0x00082e61

0009d9f8 <Cl_Disinf_StopDisinf>:

Cl_ReturnCodeType Cl_Disinf_StopDisinf(void)
{
   9d9f8:	b580      	push	{r7, lr}
   9d9fa:	b082      	sub	sp, #8
   9d9fc:	af00      	add	r7, sp, #0
	Cl_Uint8Type data;
	//Cl_ReturnCodeType Cl_disinf_retval = CL_OK;
	sv_cntrl_disable_loopback();
   9d9fe:	4b1c      	ldr	r3, [pc, #112]	; (9da70 <Cl_Disinf_StopDisinf+0x78>)
   9da00:	4798      	blx	r3
	sv_cntrl_poweroffheater();
   9da02:	4b1c      	ldr	r3, [pc, #112]	; (9da74 <Cl_Disinf_StopDisinf+0x7c>)
   9da04:	4798      	blx	r3
	cl_disinfstate = CL_DISINF_STATE_CRITICAL_ALARM;
   9da06:	4b1c      	ldr	r3, [pc, #112]	; (9da78 <Cl_Disinf_StopDisinf+0x80>)
   9da08:	220c      	movs	r2, #12
   9da0a:	701a      	strb	r2, [r3, #0]
	Cl_disinfsecondscounter_1 = Cl_disinfsecondscounter;
   9da0c:	4b1b      	ldr	r3, [pc, #108]	; (9da7c <Cl_Disinf_StopDisinf+0x84>)
   9da0e:	681b      	ldr	r3, [r3, #0]
   9da10:	4a1b      	ldr	r2, [pc, #108]	; (9da80 <Cl_Disinf_StopDisinf+0x88>)
   9da12:	6013      	str	r3, [r2, #0]
	Cl_disinfshourscounter_1 = Cl_disinfshourscounter;
   9da14:	4b1b      	ldr	r3, [pc, #108]	; (9da84 <Cl_Disinf_StopDisinf+0x8c>)
   9da16:	681b      	ldr	r3, [r3, #0]
   9da18:	4a1b      	ldr	r2, [pc, #108]	; (9da88 <Cl_Disinf_StopDisinf+0x90>)
   9da1a:	6013      	str	r3, [r2, #0]
	Cl_disinfMinutescounter_1 = Cl_disinfMinutescounter;
   9da1c:	4b1b      	ldr	r3, [pc, #108]	; (9da8c <Cl_Disinf_StopDisinf+0x94>)
   9da1e:	681b      	ldr	r3, [r3, #0]
   9da20:	4a1b      	ldr	r2, [pc, #108]	; (9da90 <Cl_Disinf_StopDisinf+0x98>)
   9da22:	6013      	str	r3, [r2, #0]
	Cl_disinfTotalMinutescounter_1 = Cl_disinfTotalMinutescounter;
   9da24:	4b1b      	ldr	r3, [pc, #108]	; (9da94 <Cl_Disinf_StopDisinf+0x9c>)
   9da26:	681b      	ldr	r3, [r3, #0]
   9da28:	4a1b      	ldr	r2, [pc, #108]	; (9da98 <Cl_Disinf_StopDisinf+0xa0>)
   9da2a:	6013      	str	r3, [r2, #0]
	Cl_disinfsTotalhourscounter_1 =Cl_disinfsTotalhourscounter;
   9da2c:	4b1b      	ldr	r3, [pc, #108]	; (9da9c <Cl_Disinf_StopDisinf+0xa4>)
   9da2e:	681b      	ldr	r3, [r3, #0]
   9da30:	4a1b      	ldr	r2, [pc, #108]	; (9daa0 <Cl_Disinf_StopDisinf+0xa8>)
   9da32:	6013      	str	r3, [r2, #0]
	Cl_disinfsecondscounter=0;
   9da34:	4b11      	ldr	r3, [pc, #68]	; (9da7c <Cl_Disinf_StopDisinf+0x84>)
   9da36:	2200      	movs	r2, #0
   9da38:	601a      	str	r2, [r3, #0]
	Cl_disinfshourscounter = 0;
   9da3a:	4b12      	ldr	r3, [pc, #72]	; (9da84 <Cl_Disinf_StopDisinf+0x8c>)
   9da3c:	2200      	movs	r2, #0
   9da3e:	601a      	str	r2, [r3, #0]
	Cl_disinfMinutescounter = 0;
   9da40:	4b12      	ldr	r3, [pc, #72]	; (9da8c <Cl_Disinf_StopDisinf+0x94>)
   9da42:	2200      	movs	r2, #0
   9da44:	601a      	str	r2, [r3, #0]
	Cl_disinfTotalMinutescounter = 0;
   9da46:	4b13      	ldr	r3, [pc, #76]	; (9da94 <Cl_Disinf_StopDisinf+0x9c>)
   9da48:	2200      	movs	r2, #0
   9da4a:	601a      	str	r2, [r3, #0]
	Cl_disinfsTotalhourscounter = 0;
   9da4c:	4b13      	ldr	r3, [pc, #76]	; (9da9c <Cl_Disinf_StopDisinf+0xa4>)
   9da4e:	2200      	movs	r2, #0
   9da50:	601a      	str	r2, [r3, #0]
	hotrinse_flag = 0;
   9da52:	4b14      	ldr	r3, [pc, #80]	; (9daa4 <Cl_Disinf_StopDisinf+0xac>)
   9da54:	2200      	movs	r2, #0
   9da56:	701a      	strb	r2, [r3, #0]
	Cl_SendDatatoconsole(CON_TX_COMMAND_DISINF_STOPPED,&data,0);
   9da58:	1dfb      	adds	r3, r7, #7
   9da5a:	2050      	movs	r0, #80	; 0x50
   9da5c:	4619      	mov	r1, r3
   9da5e:	2200      	movs	r2, #0
   9da60:	4b11      	ldr	r3, [pc, #68]	; (9daa8 <Cl_Disinf_StopDisinf+0xb0>)
   9da62:	4798      	blx	r3
	//Cl_disinf_retval = Cl_SendDatatoconsole(CON_TX_COMMAND_DISINF_PAUSED,&data,0);
	return CL_OK;
   9da64:	2300      	movs	r3, #0
}
   9da66:	4618      	mov	r0, r3
   9da68:	3708      	adds	r7, #8
   9da6a:	46bd      	mov	sp, r7
   9da6c:	bd80      	pop	{r7, pc}
   9da6e:	bf00      	nop
   9da70:	00099e5d 	.word	0x00099e5d
   9da74:	00099cb9 	.word	0x00099cb9
   9da78:	20071be7 	.word	0x20071be7
   9da7c:	20071be8 	.word	0x20071be8
   9da80:	20071bf4 	.word	0x20071bf4
   9da84:	20071bf0 	.word	0x20071bf0
   9da88:	20071bfc 	.word	0x20071bfc
   9da8c:	20071bec 	.word	0x20071bec
   9da90:	20071bf8 	.word	0x20071bf8
   9da94:	20071c00 	.word	0x20071c00
   9da98:	20071c08 	.word	0x20071c08
   9da9c:	20071c04 	.word	0x20071c04
   9daa0:	20071c0c 	.word	0x20071c0c
   9daa4:	20071cc1 	.word	0x20071cc1
   9daa8:	0009ba51 	.word	0x0009ba51

0009daac <Cl_Disinf_resumeDisinf>:

Cl_ReturnCodeType Cl_Disinf_resumeDisinf(void)
{
   9daac:	b580      	push	{r7, lr}
   9daae:	b082      	sub	sp, #8
   9dab0:	af00      	add	r7, sp, #0
	Cl_Uint8Type data;
	Cl_ReturnCodeType Cl_disinf_retval = CL_OK;
   9dab2:	2300      	movs	r3, #0
   9dab4:	71fb      	strb	r3, [r7, #7]
	sv_cntrl_enable_loopback();
   9dab6:	4b16      	ldr	r3, [pc, #88]	; (9db10 <Cl_Disinf_resumeDisinf+0x64>)
   9dab8:	4798      	blx	r3
	cl_disinfstate = CL_DISINF_STATE_DISINF_RINSING;
   9daba:	4b16      	ldr	r3, [pc, #88]	; (9db14 <Cl_Disinf_resumeDisinf+0x68>)
   9dabc:	2208      	movs	r2, #8
   9dabe:	701a      	strb	r2, [r3, #0]
	if (flag_hotcitric == 1)
   9dac0:	4b15      	ldr	r3, [pc, #84]	; (9db18 <Cl_Disinf_resumeDisinf+0x6c>)
   9dac2:	781b      	ldrb	r3, [r3, #0]
   9dac4:	2b01      	cmp	r3, #1
   9dac6:	d101      	bne.n	9dacc <Cl_Disinf_resumeDisinf+0x20>
	{
		sv_cntrl_poweronheater();
   9dac8:	4b14      	ldr	r3, [pc, #80]	; (9db1c <Cl_Disinf_resumeDisinf+0x70>)
   9daca:	4798      	blx	r3
	}
	Cl_disinf_retval = Cl_SendDatatoconsole(CON_TX_COMMAND_DISINF_RESUMED,&data,0);
   9dacc:	1dbb      	adds	r3, r7, #6
   9dace:	203b      	movs	r0, #59	; 0x3b
   9dad0:	4619      	mov	r1, r3
   9dad2:	2200      	movs	r2, #0
   9dad4:	4b12      	ldr	r3, [pc, #72]	; (9db20 <Cl_Disinf_resumeDisinf+0x74>)
   9dad6:	4798      	blx	r3
   9dad8:	4603      	mov	r3, r0
   9dada:	71fb      	strb	r3, [r7, #7]
	Cl_disinfsecondscounter = Cl_disinfsecondscounter_1;
   9dadc:	4b11      	ldr	r3, [pc, #68]	; (9db24 <Cl_Disinf_resumeDisinf+0x78>)
   9dade:	681b      	ldr	r3, [r3, #0]
   9dae0:	4a11      	ldr	r2, [pc, #68]	; (9db28 <Cl_Disinf_resumeDisinf+0x7c>)
   9dae2:	6013      	str	r3, [r2, #0]
	Cl_disinfshourscounter = Cl_disinfshourscounter_1;
   9dae4:	4b11      	ldr	r3, [pc, #68]	; (9db2c <Cl_Disinf_resumeDisinf+0x80>)
   9dae6:	681b      	ldr	r3, [r3, #0]
   9dae8:	4a11      	ldr	r2, [pc, #68]	; (9db30 <Cl_Disinf_resumeDisinf+0x84>)
   9daea:	6013      	str	r3, [r2, #0]
	Cl_disinfMinutescounter = Cl_disinfMinutescounter_1;
   9daec:	4b11      	ldr	r3, [pc, #68]	; (9db34 <Cl_Disinf_resumeDisinf+0x88>)
   9daee:	681b      	ldr	r3, [r3, #0]
   9daf0:	4a11      	ldr	r2, [pc, #68]	; (9db38 <Cl_Disinf_resumeDisinf+0x8c>)
   9daf2:	6013      	str	r3, [r2, #0]
	Cl_disinfTotalMinutescounter = Cl_disinfTotalMinutescounter_1;
   9daf4:	4b11      	ldr	r3, [pc, #68]	; (9db3c <Cl_Disinf_resumeDisinf+0x90>)
   9daf6:	681b      	ldr	r3, [r3, #0]
   9daf8:	4a11      	ldr	r2, [pc, #68]	; (9db40 <Cl_Disinf_resumeDisinf+0x94>)
   9dafa:	6013      	str	r3, [r2, #0]
	Cl_disinfsTotalhourscounter = Cl_disinfsTotalhourscounter_1;
   9dafc:	4b11      	ldr	r3, [pc, #68]	; (9db44 <Cl_Disinf_resumeDisinf+0x98>)
   9dafe:	681b      	ldr	r3, [r3, #0]
   9db00:	4a11      	ldr	r2, [pc, #68]	; (9db48 <Cl_Disinf_resumeDisinf+0x9c>)
   9db02:	6013      	str	r3, [r2, #0]
	//Cl_Disinf_UpdateTimeInfo();
	
	return CL_OK;
   9db04:	2300      	movs	r3, #0
}
   9db06:	4618      	mov	r0, r3
   9db08:	3708      	adds	r7, #8
   9db0a:	46bd      	mov	sp, r7
   9db0c:	bd80      	pop	{r7, pc}
   9db0e:	bf00      	nop
   9db10:	00099e41 	.word	0x00099e41
   9db14:	20071be7 	.word	0x20071be7
   9db18:	20071a5f 	.word	0x20071a5f
   9db1c:	00099ca5 	.word	0x00099ca5
   9db20:	0009ba51 	.word	0x0009ba51
   9db24:	20071bf4 	.word	0x20071bf4
   9db28:	20071be8 	.word	0x20071be8
   9db2c:	20071bfc 	.word	0x20071bfc
   9db30:	20071bf0 	.word	0x20071bf0
   9db34:	20071bf8 	.word	0x20071bf8
   9db38:	20071bec 	.word	0x20071bec
   9db3c:	20071c08 	.word	0x20071c08
   9db40:	20071c00 	.word	0x20071c00
   9db44:	20071c0c 	.word	0x20071c0c
   9db48:	20071c04 	.word	0x20071c04

0009db4c <Cl_Disinf_UpdateTimeInfo>:
 * \ 
 * \return CL_OK on success. 
 * \Globals used :
 */ 
Cl_ReturnCodeType Cl_Disinf_UpdateTimeInfo(void)
{
   9db4c:	b580      	push	{r7, lr}
   9db4e:	b084      	sub	sp, #16
   9db50:	af00      	add	r7, sp, #0
	
	Cl_ReturnCodeType Cl_disinfretcode = CL_ERROR;
   9db52:	2304      	movs	r3, #4
   9db54:	73fb      	strb	r3, [r7, #15]
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9db56:	2351      	movs	r3, #81	; 0x51
   9db58:	73bb      	strb	r3, [r7, #14]
	Cl_Uint8Type data[7] = {0,0,0,0,0 ,0,0};
   9db5a:	2300      	movs	r3, #0
   9db5c:	713b      	strb	r3, [r7, #4]
   9db5e:	2300      	movs	r3, #0
   9db60:	717b      	strb	r3, [r7, #5]
   9db62:	2300      	movs	r3, #0
   9db64:	71bb      	strb	r3, [r7, #6]
   9db66:	2300      	movs	r3, #0
   9db68:	71fb      	strb	r3, [r7, #7]
   9db6a:	2300      	movs	r3, #0
   9db6c:	723b      	strb	r3, [r7, #8]
   9db6e:	2300      	movs	r3, #0
   9db70:	727b      	strb	r3, [r7, #9]
   9db72:	2300      	movs	r3, #0
   9db74:	72bb      	strb	r3, [r7, #10]
	
	command = CON_TX_COMMAND_REM_TIME;
   9db76:	230a      	movs	r3, #10
   9db78:	73bb      	strb	r3, [r7, #14]

	
	data[0]= (Cl_Uint8Type)DISINF_STATE;
   9db7a:	230b      	movs	r3, #11
   9db7c:	713b      	strb	r3, [r7, #4]
	data[1]= (Cl_Uint8Type)Cl_disinfTotalMinutescounter;
   9db7e:	4b09      	ldr	r3, [pc, #36]	; (9dba4 <Cl_Disinf_UpdateTimeInfo+0x58>)
   9db80:	681b      	ldr	r3, [r3, #0]
   9db82:	b2db      	uxtb	r3, r3
   9db84:	717b      	strb	r3, [r7, #5]
	
	Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,2);
   9db86:	7bba      	ldrb	r2, [r7, #14]
   9db88:	1d3b      	adds	r3, r7, #4
   9db8a:	4610      	mov	r0, r2
   9db8c:	4619      	mov	r1, r3
   9db8e:	2202      	movs	r2, #2
   9db90:	4b05      	ldr	r3, [pc, #20]	; (9dba8 <Cl_Disinf_UpdateTimeInfo+0x5c>)
   9db92:	4798      	blx	r3
   9db94:	4603      	mov	r3, r0
   9db96:	73fb      	strb	r3, [r7, #15]
	
	return CL_OK;
   9db98:	2300      	movs	r3, #0
	
}
   9db9a:	4618      	mov	r0, r3
   9db9c:	3710      	adds	r7, #16
   9db9e:	46bd      	mov	sp, r7
   9dba0:	bd80      	pop	{r7, pc}
   9dba2:	bf00      	nop
   9dba4:	20071c00 	.word	0x20071c00
   9dba8:	0009ba51 	.word	0x0009ba51

0009dbac <Cl_Disinf_UpdateAlarmTable>:
Cl_ReturnCodeType Cl_Disinf_UpdateAlarmTable(CldisinfAlarmIdType* CldisinfAlarmId )
{
   9dbac:	b580      	push	{r7, lr}
   9dbae:	b086      	sub	sp, #24
   9dbb0:	af00      	add	r7, sp, #0
   9dbb2:	6078      	str	r0, [r7, #4]
	Cl_ReturnCodeType 	Cl_disinfretcode = CL_OK;
   9dbb4:	2300      	movs	r3, #0
   9dbb6:	75fb      	strb	r3, [r7, #23]
	Cl_Uint8Type tempcount = 0;
   9dbb8:	2300      	movs	r3, #0
   9dbba:	75bb      	strb	r3, [r7, #22]
	Cl_Uint8Type data[3] ={0, 0} ,*data1 = NULL;
   9dbbc:	2300      	movs	r3, #0
   9dbbe:	81bb      	strh	r3, [r7, #12]
   9dbc0:	2300      	movs	r3, #0
   9dbc2:	73bb      	strb	r3, [r7, #14]
   9dbc4:	2300      	movs	r3, #0
   9dbc6:	613b      	str	r3, [r7, #16]
	Cl_NewAlarmIdType cl_alarmId;
	
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9dbc8:	2351      	movs	r3, #81	; 0x51
   9dbca:	73fb      	strb	r3, [r7, #15]
	
	
	for (tempcount = 0 ; tempcount < CL_DISINF_ALRM_MAX ; tempcount++)
   9dbcc:	2300      	movs	r3, #0
   9dbce:	75bb      	strb	r3, [r7, #22]
   9dbd0:	e05b      	b.n	9dc8a <Cl_Disinf_UpdateAlarmTable+0xde>
	{
		
		Cl_Alarm_GetAlarmStatus(Cl_DisinfAlarmTable[tempcount].CldisinfAlarmId,&Cl_DisinfAlarmTable[tempcount].IsActive);
   9dbd2:	7dba      	ldrb	r2, [r7, #22]
   9dbd4:	4931      	ldr	r1, [pc, #196]	; (9dc9c <Cl_Disinf_UpdateAlarmTable+0xf0>)
   9dbd6:	4613      	mov	r3, r2
   9dbd8:	00db      	lsls	r3, r3, #3
   9dbda:	1a9b      	subs	r3, r3, r2
   9dbdc:	440b      	add	r3, r1
   9dbde:	7819      	ldrb	r1, [r3, #0]
   9dbe0:	7dba      	ldrb	r2, [r7, #22]
   9dbe2:	4613      	mov	r3, r2
   9dbe4:	00db      	lsls	r3, r3, #3
   9dbe6:	1a9b      	subs	r3, r3, r2
   9dbe8:	4a2c      	ldr	r2, [pc, #176]	; (9dc9c <Cl_Disinf_UpdateAlarmTable+0xf0>)
   9dbea:	4413      	add	r3, r2
   9dbec:	3302      	adds	r3, #2
   9dbee:	4608      	mov	r0, r1
   9dbf0:	4619      	mov	r1, r3
   9dbf2:	4b2b      	ldr	r3, [pc, #172]	; (9dca0 <Cl_Disinf_UpdateAlarmTable+0xf4>)
   9dbf4:	4798      	blx	r3

	
			if (Cl_DisinfAlarmTable[tempcount].IsActive)
   9dbf6:	7dba      	ldrb	r2, [r7, #22]
   9dbf8:	4928      	ldr	r1, [pc, #160]	; (9dc9c <Cl_Disinf_UpdateAlarmTable+0xf0>)
   9dbfa:	4613      	mov	r3, r2
   9dbfc:	00db      	lsls	r3, r3, #3
   9dbfe:	1a9b      	subs	r3, r3, r2
   9dc00:	440b      	add	r3, r1
   9dc02:	789b      	ldrb	r3, [r3, #2]
   9dc04:	2b00      	cmp	r3, #0
   9dc06:	d020      	beq.n	9dc4a <Cl_Disinf_UpdateAlarmTable+0x9e>
			{
				if(!Cl_DisinfAlarmTable[tempcount].IsRaised)
   9dc08:	7dba      	ldrb	r2, [r7, #22]
   9dc0a:	4924      	ldr	r1, [pc, #144]	; (9dc9c <Cl_Disinf_UpdateAlarmTable+0xf0>)
   9dc0c:	4613      	mov	r3, r2
   9dc0e:	00db      	lsls	r3, r3, #3
   9dc10:	1a9b      	subs	r3, r3, r2
   9dc12:	440b      	add	r3, r1
   9dc14:	78db      	ldrb	r3, [r3, #3]
   9dc16:	f083 0301 	eor.w	r3, r3, #1
   9dc1a:	b2db      	uxtb	r3, r3
   9dc1c:	2b00      	cmp	r3, #0
   9dc1e:	d031      	beq.n	9dc84 <Cl_Disinf_UpdateAlarmTable+0xd8>
					{
	
						Cl_DisinfAlarmTable[tempcount].IsRaised = true;
   9dc20:	7dba      	ldrb	r2, [r7, #22]
   9dc22:	491e      	ldr	r1, [pc, #120]	; (9dc9c <Cl_Disinf_UpdateAlarmTable+0xf0>)
   9dc24:	4613      	mov	r3, r2
   9dc26:	00db      	lsls	r3, r3, #3
   9dc28:	1a9b      	subs	r3, r3, r2
   9dc2a:	440b      	add	r3, r1
   9dc2c:	2201      	movs	r2, #1
   9dc2e:	70da      	strb	r2, [r3, #3]
	
						Cl_disinfretcode = CL_DisinfAlarmActon(Cl_DisinfAlarmTable[tempcount].CldisinfAlarmId);
   9dc30:	7dba      	ldrb	r2, [r7, #22]
   9dc32:	491a      	ldr	r1, [pc, #104]	; (9dc9c <Cl_Disinf_UpdateAlarmTable+0xf0>)
   9dc34:	4613      	mov	r3, r2
   9dc36:	00db      	lsls	r3, r3, #3
   9dc38:	1a9b      	subs	r3, r3, r2
   9dc3a:	440b      	add	r3, r1
   9dc3c:	781b      	ldrb	r3, [r3, #0]
   9dc3e:	4618      	mov	r0, r3
   9dc40:	4b18      	ldr	r3, [pc, #96]	; (9dca4 <Cl_Disinf_UpdateAlarmTable+0xf8>)
   9dc42:	4798      	blx	r3
   9dc44:	4603      	mov	r3, r0
   9dc46:	75fb      	strb	r3, [r7, #23]
   9dc48:	e01c      	b.n	9dc84 <Cl_Disinf_UpdateAlarmTable+0xd8>
	
			}
			else
			{
				// alarm was present before , but not active now.
				if(Cl_DisinfAlarmTable[tempcount].IsRaised == true)
   9dc4a:	7dba      	ldrb	r2, [r7, #22]
   9dc4c:	4913      	ldr	r1, [pc, #76]	; (9dc9c <Cl_Disinf_UpdateAlarmTable+0xf0>)
   9dc4e:	4613      	mov	r3, r2
   9dc50:	00db      	lsls	r3, r3, #3
   9dc52:	1a9b      	subs	r3, r3, r2
   9dc54:	440b      	add	r3, r1
   9dc56:	78db      	ldrb	r3, [r3, #3]
   9dc58:	2b00      	cmp	r3, #0
   9dc5a:	d013      	beq.n	9dc84 <Cl_Disinf_UpdateAlarmTable+0xd8>
				{
					Cl_DisinfAlarmTable[tempcount].IsRaised = false;
   9dc5c:	7dba      	ldrb	r2, [r7, #22]
   9dc5e:	490f      	ldr	r1, [pc, #60]	; (9dc9c <Cl_Disinf_UpdateAlarmTable+0xf0>)
   9dc60:	4613      	mov	r3, r2
   9dc62:	00db      	lsls	r3, r3, #3
   9dc64:	1a9b      	subs	r3, r3, r2
   9dc66:	440b      	add	r3, r1
   9dc68:	2200      	movs	r2, #0
   9dc6a:	70da      	strb	r2, [r3, #3]
					command = CON_TX_COMMAND_ALARM;
   9dc6c:	2307      	movs	r3, #7
   9dc6e:	73fb      	strb	r3, [r7, #15]
					data[0] = (Cl_Uint8Type)(Cl_DisinfAlarmTable[tempcount].CldisinfAlarmId);
   9dc70:	7dba      	ldrb	r2, [r7, #22]
   9dc72:	490a      	ldr	r1, [pc, #40]	; (9dc9c <Cl_Disinf_UpdateAlarmTable+0xf0>)
   9dc74:	4613      	mov	r3, r2
   9dc76:	00db      	lsls	r3, r3, #3
   9dc78:	1a9b      	subs	r3, r3, r2
   9dc7a:	440b      	add	r3, r1
   9dc7c:	781b      	ldrb	r3, [r3, #0]
   9dc7e:	733b      	strb	r3, [r7, #12]
					data[1] = (Cl_Uint8Type) CL_ALARM_CLEARED;
   9dc80:	2300      	movs	r3, #0
   9dc82:	737b      	strb	r3, [r7, #13]
	Cl_NewAlarmIdType cl_alarmId;
	
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
	
	
	for (tempcount = 0 ; tempcount < CL_DISINF_ALRM_MAX ; tempcount++)
   9dc84:	7dbb      	ldrb	r3, [r7, #22]
   9dc86:	3301      	adds	r3, #1
   9dc88:	75bb      	strb	r3, [r7, #22]
   9dc8a:	7dbb      	ldrb	r3, [r7, #22]
   9dc8c:	2b0b      	cmp	r3, #11
   9dc8e:	d9a0      	bls.n	9dbd2 <Cl_Disinf_UpdateAlarmTable+0x26>
			}
		//}

	}

return (Cl_disinfretcode );
   9dc90:	7dfb      	ldrb	r3, [r7, #23]
}
   9dc92:	4618      	mov	r0, r3
   9dc94:	3718      	adds	r7, #24
   9dc96:	46bd      	mov	sp, r7
   9dc98:	bd80      	pop	{r7, pc}
   9dc9a:	bf00      	nop
   9dc9c:	20070b88 	.word	0x20070b88
   9dca0:	00083035 	.word	0x00083035
   9dca4:	0009dcd1 	.word	0x0009dcd1

0009dca8 <Cl_disinf_ProcessAlarms>:
 * \ 
 * \return CL_OK on success. 
 * \Globals used :
 */ 
Cl_ReturnCodeType  Cl_disinf_ProcessAlarms(void)
{
   9dca8:	b580      	push	{r7, lr}
   9dcaa:	b082      	sub	sp, #8
   9dcac:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType 	Cl_disinfretcode = CL_OK;
   9dcae:	2300      	movs	r3, #0
   9dcb0:	71fb      	strb	r3, [r7, #7]
	CldisinfAlarmIdType CldisinfAlarmId;
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9dcb2:	2351      	movs	r3, #81	; 0x51
   9dcb4:	71bb      	strb	r3, [r7, #6]
	Cl_NewAlarmIdType cl_disinfalarmid;
	
	Cl_disinfretcode = Cl_Disinf_UpdateAlarmTable(&CldisinfAlarmId);
   9dcb6:	1d7b      	adds	r3, r7, #5
   9dcb8:	4618      	mov	r0, r3
   9dcba:	4b04      	ldr	r3, [pc, #16]	; (9dccc <Cl_disinf_ProcessAlarms+0x24>)
   9dcbc:	4798      	blx	r3
   9dcbe:	4603      	mov	r3, r0
   9dcc0:	71fb      	strb	r3, [r7, #7]
	return (Cl_disinfretcode);
   9dcc2:	79fb      	ldrb	r3, [r7, #7]
}
   9dcc4:	4618      	mov	r0, r3
   9dcc6:	3708      	adds	r7, #8
   9dcc8:	46bd      	mov	sp, r7
   9dcca:	bd80      	pop	{r7, pc}
   9dccc:	0009dbad 	.word	0x0009dbad

0009dcd0 <CL_DisinfAlarmActon>:

Cl_ReturnCodeType  CL_DisinfAlarmActon(Cl_NewAlarmIdType cl_disinfalarmid)
{
   9dcd0:	b580      	push	{r7, lr}
   9dcd2:	b086      	sub	sp, #24
   9dcd4:	af00      	add	r7, sp, #0
   9dcd6:	4603      	mov	r3, r0
   9dcd8:	71fb      	strb	r3, [r7, #7]
		Cl_ReturnCodeType 	Cl_disinfretcode = CL_OK;
   9dcda:	2300      	movs	r3, #0
   9dcdc:	75fb      	strb	r3, [r7, #23]
			Cl_Uint8Type data[3] ={0, 0} ,*data1 = NULL;
   9dcde:	2300      	movs	r3, #0
   9dce0:	813b      	strh	r3, [r7, #8]
   9dce2:	2300      	movs	r3, #0
   9dce4:	72bb      	strb	r3, [r7, #10]
   9dce6:	2300      	movs	r3, #0
   9dce8:	613b      	str	r3, [r7, #16]
			Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9dcea:	2351      	movs	r3, #81	; 0x51
   9dcec:	73fb      	strb	r3, [r7, #15]
			Cl_NewAlarmIdType NewAlarmId = _NO_ALARM;
   9dcee:	2300      	movs	r3, #0
   9dcf0:	73bb      	strb	r3, [r7, #14]
		float temp;
		//Cl_Uint16Type var=0
							
		switch(cl_disinfalarmid)
   9dcf2:	79fb      	ldrb	r3, [r7, #7]
   9dcf4:	3b03      	subs	r3, #3
   9dcf6:	2b28      	cmp	r3, #40	; 0x28
   9dcf8:	f200 80d7 	bhi.w	9deaa <CL_DisinfAlarmActon+0x1da>
   9dcfc:	a201      	add	r2, pc, #4	; (adr r2, 9dd04 <CL_DisinfAlarmActon+0x34>)
   9dcfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9dd02:	bf00      	nop
   9dd04:	0009de0b 	.word	0x0009de0b
   9dd08:	0009de1f 	.word	0x0009de1f
   9dd0c:	0009deab 	.word	0x0009deab
   9dd10:	0009deab 	.word	0x0009deab
   9dd14:	0009deab 	.word	0x0009deab
   9dd18:	0009de97 	.word	0x0009de97
   9dd1c:	0009deab 	.word	0x0009deab
   9dd20:	0009deab 	.word	0x0009deab
   9dd24:	0009deab 	.word	0x0009deab
   9dd28:	0009deab 	.word	0x0009deab
   9dd2c:	0009deab 	.word	0x0009deab
   9dd30:	0009deab 	.word	0x0009deab
   9dd34:	0009deab 	.word	0x0009deab
   9dd38:	0009deab 	.word	0x0009deab
   9dd3c:	0009deab 	.word	0x0009deab
   9dd40:	0009deab 	.word	0x0009deab
   9dd44:	0009de33 	.word	0x0009de33
   9dd48:	0009de47 	.word	0x0009de47
   9dd4c:	0009de5b 	.word	0x0009de5b
   9dd50:	0009de5b 	.word	0x0009de5b
   9dd54:	0009de6f 	.word	0x0009de6f
   9dd58:	0009de6f 	.word	0x0009de6f
   9dd5c:	0009deab 	.word	0x0009deab
   9dd60:	0009deab 	.word	0x0009deab
   9dd64:	0009deab 	.word	0x0009deab
   9dd68:	0009deab 	.word	0x0009deab
   9dd6c:	0009deab 	.word	0x0009deab
   9dd70:	0009deab 	.word	0x0009deab
   9dd74:	0009deab 	.word	0x0009deab
   9dd78:	0009deab 	.word	0x0009deab
   9dd7c:	0009deab 	.word	0x0009deab
   9dd80:	0009deab 	.word	0x0009deab
   9dd84:	0009deab 	.word	0x0009deab
   9dd88:	0009deab 	.word	0x0009deab
   9dd8c:	0009deab 	.word	0x0009deab
   9dd90:	0009deab 	.word	0x0009deab
   9dd94:	0009de83 	.word	0x0009de83
   9dd98:	0009de83 	.word	0x0009de83
   9dd9c:	0009dda9 	.word	0x0009dda9
   9dda0:	0009deab 	.word	0x0009deab
   9dda4:	0009ddf7 	.word	0x0009ddf7
		{
			case ACID_IN_OPEN:
			if ((cl_disinfstate == CL_DISINF_STATE_INTER))
   9dda8:	4b4f      	ldr	r3, [pc, #316]	; (9dee8 <CL_DisinfAlarmActon+0x218>)
   9ddaa:	781b      	ldrb	r3, [r3, #0]
   9ddac:	2b10      	cmp	r3, #16
   9ddae:	d10b      	bne.n	9ddc8 <CL_DisinfAlarmActon+0xf8>
			{
				sv_cntrl_setredalarm();
   9ddb0:	4b4e      	ldr	r3, [pc, #312]	; (9deec <CL_DisinfAlarmActon+0x21c>)
   9ddb2:	4798      	blx	r3
				sv_cntrl_buzzer();
   9ddb4:	4b4e      	ldr	r3, [pc, #312]	; (9def0 <CL_DisinfAlarmActon+0x220>)
   9ddb6:	4798      	blx	r3
				if (cl_disinfstate == CL_DISINF_STATE_INTER)
   9ddb8:	4b4b      	ldr	r3, [pc, #300]	; (9dee8 <CL_DisinfAlarmActon+0x218>)
   9ddba:	781b      	ldrb	r3, [r3, #0]
   9ddbc:	2b10      	cmp	r3, #16
   9ddbe:	d119      	bne.n	9ddf4 <CL_DisinfAlarmActon+0x124>
				{
					cl_disinfstate = CL_DISINF_STATE_INTER;
   9ddc0:	4b49      	ldr	r3, [pc, #292]	; (9dee8 <CL_DisinfAlarmActon+0x218>)
   9ddc2:	2210      	movs	r2, #16
   9ddc4:	701a      	strb	r2, [r3, #0]
				sv_cntrl_buzzer();
				Cl_Disinf_StopDisinf();
				cl_disinfstate = CL_DISINF_STATE_CRITICAL_ALARM;
			}
			
			break;
   9ddc6:	e071      	b.n	9deac <CL_DisinfAlarmActon+0x1dc>
				if (cl_disinfstate == CL_DISINF_STATE_INTER)
				{
					cl_disinfstate = CL_DISINF_STATE_INTER;
				}
			}
			else if ((cl_disinfstate == CL_DISINF_STATE_INTER_1))
   9ddc8:	4b47      	ldr	r3, [pc, #284]	; (9dee8 <CL_DisinfAlarmActon+0x218>)
   9ddca:	781b      	ldrb	r3, [r3, #0]
   9ddcc:	2b11      	cmp	r3, #17
   9ddce:	d107      	bne.n	9dde0 <CL_DisinfAlarmActon+0x110>
			{
				sv_cntrl_setredalarm();
   9ddd0:	4b46      	ldr	r3, [pc, #280]	; (9deec <CL_DisinfAlarmActon+0x21c>)
   9ddd2:	4798      	blx	r3
				sv_cntrl_buzzer();
   9ddd4:	4b46      	ldr	r3, [pc, #280]	; (9def0 <CL_DisinfAlarmActon+0x220>)
   9ddd6:	4798      	blx	r3
				cl_disinfstate = CL_DISINF_STATE_INTER_1;
   9ddd8:	4b43      	ldr	r3, [pc, #268]	; (9dee8 <CL_DisinfAlarmActon+0x218>)
   9ddda:	2211      	movs	r2, #17
   9dddc:	701a      	strb	r2, [r3, #0]
   9ddde:	e009      	b.n	9ddf4 <CL_DisinfAlarmActon+0x124>
			}
			else
			{
				sv_cntrl_setredalarm();
   9dde0:	4b42      	ldr	r3, [pc, #264]	; (9deec <CL_DisinfAlarmActon+0x21c>)
   9dde2:	4798      	blx	r3
				sv_cntrl_buzzer();
   9dde4:	4b42      	ldr	r3, [pc, #264]	; (9def0 <CL_DisinfAlarmActon+0x220>)
   9dde6:	4798      	blx	r3
				Cl_Disinf_StopDisinf();
   9dde8:	4b42      	ldr	r3, [pc, #264]	; (9def4 <CL_DisinfAlarmActon+0x224>)
   9ddea:	4798      	blx	r3
				cl_disinfstate = CL_DISINF_STATE_CRITICAL_ALARM;
   9ddec:	4b3e      	ldr	r3, [pc, #248]	; (9dee8 <CL_DisinfAlarmActon+0x218>)
   9ddee:	220c      	movs	r2, #12
   9ddf0:	701a      	strb	r2, [r3, #0]
			}
			
			break;
   9ddf2:	e05b      	b.n	9deac <CL_DisinfAlarmActon+0x1dc>
   9ddf4:	e05a      	b.n	9deac <CL_DisinfAlarmActon+0x1dc>
			
			case BICARB_IN_OPEN:
			sv_cntrl_setredalarm();
   9ddf6:	4b3d      	ldr	r3, [pc, #244]	; (9deec <CL_DisinfAlarmActon+0x21c>)
   9ddf8:	4798      	blx	r3
			sv_cntrl_buzzer();
   9ddfa:	4b3d      	ldr	r3, [pc, #244]	; (9def0 <CL_DisinfAlarmActon+0x220>)
   9ddfc:	4798      	blx	r3
			Cl_Disinf_StopDisinf();
   9ddfe:	4b3d      	ldr	r3, [pc, #244]	; (9def4 <CL_DisinfAlarmActon+0x224>)
   9de00:	4798      	blx	r3
			cl_disinfstate = CL_DISINF_STATE_CRITICAL_ALARM;
   9de02:	4b39      	ldr	r3, [pc, #228]	; (9dee8 <CL_DisinfAlarmActon+0x218>)
   9de04:	220c      	movs	r2, #12
   9de06:	701a      	strb	r2, [r3, #0]
			break;
   9de08:	e050      	b.n	9deac <CL_DisinfAlarmActon+0x1dc>
			
			case HOLDER1STATUS_OPEN:
				sv_cntrl_setredalarm();
   9de0a:	4b38      	ldr	r3, [pc, #224]	; (9deec <CL_DisinfAlarmActon+0x21c>)
   9de0c:	4798      	blx	r3
				sv_cntrl_buzzer();
   9de0e:	4b38      	ldr	r3, [pc, #224]	; (9def0 <CL_DisinfAlarmActon+0x220>)
   9de10:	4798      	blx	r3
				Cl_Disinf_StopDisinf();
   9de12:	4b38      	ldr	r3, [pc, #224]	; (9def4 <CL_DisinfAlarmActon+0x224>)
   9de14:	4798      	blx	r3
				cl_disinfstate = CL_DISINF_STATE_CRITICAL_ALARM;
   9de16:	4b34      	ldr	r3, [pc, #208]	; (9dee8 <CL_DisinfAlarmActon+0x218>)
   9de18:	220c      	movs	r2, #12
   9de1a:	701a      	strb	r2, [r3, #0]
			break;
   9de1c:	e046      	b.n	9deac <CL_DisinfAlarmActon+0x1dc>
			
			case HOLDER2STATUS_OPEN:
				sv_cntrl_setredalarm();
   9de1e:	4b33      	ldr	r3, [pc, #204]	; (9deec <CL_DisinfAlarmActon+0x21c>)
   9de20:	4798      	blx	r3
				sv_cntrl_buzzer();
   9de22:	4b33      	ldr	r3, [pc, #204]	; (9def0 <CL_DisinfAlarmActon+0x220>)
   9de24:	4798      	blx	r3
				Cl_Disinf_StopDisinf();
   9de26:	4b33      	ldr	r3, [pc, #204]	; (9def4 <CL_DisinfAlarmActon+0x224>)
   9de28:	4798      	blx	r3
				cl_disinfstate = CL_DISINF_STATE_CRITICAL_ALARM;
   9de2a:	4b2f      	ldr	r3, [pc, #188]	; (9dee8 <CL_DisinfAlarmActon+0x218>)
   9de2c:	220c      	movs	r2, #12
   9de2e:	701a      	strb	r2, [r3, #0]
			break;
   9de30:	e03c      	b.n	9deac <CL_DisinfAlarmActon+0x1dc>
			
			case TEMP3_HIGH_THRESHOLD:
					sv_cntrl_setyellowalarm();
   9de32:	4b31      	ldr	r3, [pc, #196]	; (9def8 <CL_DisinfAlarmActon+0x228>)
   9de34:	4798      	blx	r3
					sv_cntrl_buzzer();
   9de36:	4b2e      	ldr	r3, [pc, #184]	; (9def0 <CL_DisinfAlarmActon+0x220>)
   9de38:	4798      	blx	r3
					Cl_Disinf_StopDisinf();
   9de3a:	4b2e      	ldr	r3, [pc, #184]	; (9def4 <CL_DisinfAlarmActon+0x224>)
   9de3c:	4798      	blx	r3
					cl_disinfstate = CL_DISINF_STATE_CRITICAL_ALARM;
   9de3e:	4b2a      	ldr	r3, [pc, #168]	; (9dee8 <CL_DisinfAlarmActon+0x218>)
   9de40:	220c      	movs	r2, #12
   9de42:	701a      	strb	r2, [r3, #0]
			break;
   9de44:	e032      	b.n	9deac <CL_DisinfAlarmActon+0x1dc>
			case TEMP3_LOW_THRESHOLD:
			sv_cntrl_setyellowalarm();
   9de46:	4b2c      	ldr	r3, [pc, #176]	; (9def8 <CL_DisinfAlarmActon+0x228>)
   9de48:	4798      	blx	r3
			sv_cntrl_buzzer();
   9de4a:	4b29      	ldr	r3, [pc, #164]	; (9def0 <CL_DisinfAlarmActon+0x220>)
   9de4c:	4798      	blx	r3
			Cl_Disinf_StopDisinf();
   9de4e:	4b29      	ldr	r3, [pc, #164]	; (9def4 <CL_DisinfAlarmActon+0x224>)
   9de50:	4798      	blx	r3
			cl_disinfstate = CL_DISINF_STATE_CRITICAL_ALARM;
   9de52:	4b25      	ldr	r3, [pc, #148]	; (9dee8 <CL_DisinfAlarmActon+0x218>)
   9de54:	220c      	movs	r2, #12
   9de56:	701a      	strb	r2, [r3, #0]
			break;
   9de58:	e028      	b.n	9deac <CL_DisinfAlarmActon+0x1dc>
			
			case PS1_HIGH_THRESHOLD:
			case PS1_LOW_THRESHOLD:
				sv_cntrl_setyellowalarm();
   9de5a:	4b27      	ldr	r3, [pc, #156]	; (9def8 <CL_DisinfAlarmActon+0x228>)
   9de5c:	4798      	blx	r3
				sv_cntrl_buzzer();
   9de5e:	4b24      	ldr	r3, [pc, #144]	; (9def0 <CL_DisinfAlarmActon+0x220>)
   9de60:	4798      	blx	r3
				Cl_Disinf_StopDisinf();
   9de62:	4b24      	ldr	r3, [pc, #144]	; (9def4 <CL_DisinfAlarmActon+0x224>)
   9de64:	4798      	blx	r3
				cl_disinfstate = CL_DISINF_STATE_CRITICAL_ALARM;
   9de66:	4b20      	ldr	r3, [pc, #128]	; (9dee8 <CL_DisinfAlarmActon+0x218>)
   9de68:	220c      	movs	r2, #12
   9de6a:	701a      	strb	r2, [r3, #0]
			break;
   9de6c:	e01e      	b.n	9deac <CL_DisinfAlarmActon+0x1dc>
			
			case	PS2_HIGH_THRESHOLD:
			case    PS2_LOW_THRESHOLD:
				sv_cntrl_setyellowalarm();
   9de6e:	4b22      	ldr	r3, [pc, #136]	; (9def8 <CL_DisinfAlarmActon+0x228>)
   9de70:	4798      	blx	r3
				sv_cntrl_buzzer();
   9de72:	4b1f      	ldr	r3, [pc, #124]	; (9def0 <CL_DisinfAlarmActon+0x220>)
   9de74:	4798      	blx	r3
				Cl_Disinf_StopDisinf();
   9de76:	4b1f      	ldr	r3, [pc, #124]	; (9def4 <CL_DisinfAlarmActon+0x224>)
   9de78:	4798      	blx	r3
				cl_disinfstate = CL_DISINF_STATE_CRITICAL_ALARM;
   9de7a:	4b1b      	ldr	r3, [pc, #108]	; (9dee8 <CL_DisinfAlarmActon+0x218>)
   9de7c:	220c      	movs	r2, #12
   9de7e:	701a      	strb	r2, [r3, #0]
			break;
   9de80:	e014      	b.n	9deac <CL_DisinfAlarmActon+0x1dc>
			
			case	PS3_HIGH_THRESHOLD:
			case    PS3_LOW_THRESHOLD:
				sv_cntrl_setyellowalarm();
   9de82:	4b1d      	ldr	r3, [pc, #116]	; (9def8 <CL_DisinfAlarmActon+0x228>)
   9de84:	4798      	blx	r3
				sv_cntrl_buzzer();
   9de86:	4b1a      	ldr	r3, [pc, #104]	; (9def0 <CL_DisinfAlarmActon+0x220>)
   9de88:	4798      	blx	r3
				Cl_Disinf_StopDisinf();
   9de8a:	4b1a      	ldr	r3, [pc, #104]	; (9def4 <CL_DisinfAlarmActon+0x224>)
   9de8c:	4798      	blx	r3
				cl_disinfstate = CL_DISINF_STATE_CRITICAL_ALARM;
   9de8e:	4b16      	ldr	r3, [pc, #88]	; (9dee8 <CL_DisinfAlarmActon+0x218>)
   9de90:	220c      	movs	r2, #12
   9de92:	701a      	strb	r2, [r3, #0]
			break;
   9de94:	e00a      	b.n	9deac <CL_DisinfAlarmActon+0x1dc>
			
			case COND_STATUS_HIGH:
				sv_cntrl_setyellowalarm();
   9de96:	4b18      	ldr	r3, [pc, #96]	; (9def8 <CL_DisinfAlarmActon+0x228>)
   9de98:	4798      	blx	r3
				sv_cntrl_buzzer();
   9de9a:	4b15      	ldr	r3, [pc, #84]	; (9def0 <CL_DisinfAlarmActon+0x220>)
   9de9c:	4798      	blx	r3
				Cl_Disinf_StopDisinf();
   9de9e:	4b15      	ldr	r3, [pc, #84]	; (9def4 <CL_DisinfAlarmActon+0x224>)
   9dea0:	4798      	blx	r3
				cl_disinfstate = CL_DISINF_STATE_CRITICAL_ALARM;
   9dea2:	4b11      	ldr	r3, [pc, #68]	; (9dee8 <CL_DisinfAlarmActon+0x218>)
   9dea4:	220c      	movs	r2, #12
   9dea6:	701a      	strb	r2, [r3, #0]
			break;
   9dea8:	e000      	b.n	9deac <CL_DisinfAlarmActon+0x1dc>
			
			default:
			break;
   9deaa:	bf00      	nop

		}
		 if(cl_disinfalarmid != _NO_ALARM)
   9deac:	79fb      	ldrb	r3, [r7, #7]
   9deae:	2b00      	cmp	r3, #0
   9deb0:	d014      	beq.n	9dedc <CL_DisinfAlarmActon+0x20c>
		 {
 
				  data[0] = (Cl_Uint8Type)cl_disinfalarmid;
   9deb2:	79fb      	ldrb	r3, [r7, #7]
   9deb4:	723b      	strb	r3, [r7, #8]
				 data[1] = (Cl_Uint8Type) CL_ALARM_TRIGGERED;
   9deb6:	2301      	movs	r3, #1
   9deb8:	727b      	strb	r3, [r7, #9]
				 data[2] = (Cl_Uint8Type)CRITICAL;
   9deba:	2302      	movs	r3, #2
   9debc:	72bb      	strb	r3, [r7, #10]
				 command = CON_TX_COMMAND_ALARM;
   9debe:	2307      	movs	r3, #7
   9dec0:	73fb      	strb	r3, [r7, #15]
			 			
			Cl_disinfretcode = Cl_SendDatatoconsole(command,&data,3);
   9dec2:	7bfa      	ldrb	r2, [r7, #15]
   9dec4:	f107 0308 	add.w	r3, r7, #8
   9dec8:	4610      	mov	r0, r2
   9deca:	4619      	mov	r1, r3
   9decc:	2203      	movs	r2, #3
   9dece:	4b0b      	ldr	r3, [pc, #44]	; (9defc <CL_DisinfAlarmActon+0x22c>)
   9ded0:	4798      	blx	r3
   9ded2:	4603      	mov	r3, r0
   9ded4:	75fb      	strb	r3, [r7, #23]
			cl_wait(10);
   9ded6:	200a      	movs	r0, #10
   9ded8:	4b09      	ldr	r3, [pc, #36]	; (9df00 <CL_DisinfAlarmActon+0x230>)
   9deda:	4798      	blx	r3
		 }
	return CL_OK;		
   9dedc:	2300      	movs	r3, #0
}
   9dede:	4618      	mov	r0, r3
   9dee0:	3718      	adds	r7, #24
   9dee2:	46bd      	mov	sp, r7
   9dee4:	bd80      	pop	{r7, pc}
   9dee6:	bf00      	nop
   9dee8:	20071be7 	.word	0x20071be7
   9deec:	00099f25 	.word	0x00099f25
   9def0:	00099f61 	.word	0x00099f61
   9def4:	0009d9f9 	.word	0x0009d9f9
   9def8:	00099f39 	.word	0x00099f39
   9defc:	0009ba51 	.word	0x0009ba51
   9df00:	00093195 	.word	0x00093195

0009df04 <Cl_disinf_ResetAlertsforReassertion>:
Cl_ReturnCodeType Cl_disinf_ResetAlertsforReassertion(void )
{
   9df04:	b580      	push	{r7, lr}
   9df06:	b082      	sub	sp, #8
   9df08:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType 	Cl_disinfretcode = CL_OK;
   9df0a:	2300      	movs	r3, #0
   9df0c:	71fb      	strb	r3, [r7, #7]
	CldisinfAlarmIdType CldisinfAlarmId;
	Cl_Uint8Type data;
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9df0e:	2351      	movs	r3, #81	; 0x51
   9df10:	71bb      	strb	r3, [r7, #6]
	Cl_NewAlarmIdType cl_disinfalarmid;
	
	
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_ACIDIN].IsRaised = false;
   9df12:	4b2d      	ldr	r3, [pc, #180]	; (9dfc8 <Cl_disinf_ResetAlertsforReassertion+0xc4>)
   9df14:	2200      	movs	r2, #0
   9df16:	70da      	strb	r2, [r3, #3]
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_BICARBIN].IsRaised = false;
   9df18:	4b2b      	ldr	r3, [pc, #172]	; (9dfc8 <Cl_disinf_ResetAlertsforReassertion+0xc4>)
   9df1a:	2200      	movs	r2, #0
   9df1c:	729a      	strb	r2, [r3, #10]
	Cl_AlarmResetAlarm(ACID_IN_OPEN);
   9df1e:	2029      	movs	r0, #41	; 0x29
   9df20:	4b2a      	ldr	r3, [pc, #168]	; (9dfcc <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9df22:	4798      	blx	r3
	Cl_AlarmResetAlarm(BICARB_IN_OPEN);
   9df24:	202b      	movs	r0, #43	; 0x2b
   9df26:	4b29      	ldr	r3, [pc, #164]	; (9dfcc <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9df28:	4798      	blx	r3
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_COND_STATUS_HIGH].IsRaised = false;
   9df2a:	4b27      	ldr	r3, [pc, #156]	; (9dfc8 <Cl_disinf_ResetAlertsforReassertion+0xc4>)
   9df2c:	2200      	movs	r2, #0
   9df2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	Cl_AlarmResetAlarm(COND_STATUS_HIGH);
   9df32:	2008      	movs	r0, #8
   9df34:	4b25      	ldr	r3, [pc, #148]	; (9dfcc <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9df36:	4798      	blx	r3
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_PS1_HIGH_THRESHOLD].IsRaised = false;
   9df38:	4b23      	ldr	r3, [pc, #140]	; (9dfc8 <Cl_disinf_ResetAlertsforReassertion+0xc4>)
   9df3a:	2200      	movs	r2, #0
   9df3c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_PS1_LOW_THRESHOLD].IsRaised = false;
   9df40:	4b21      	ldr	r3, [pc, #132]	; (9dfc8 <Cl_disinf_ResetAlertsforReassertion+0xc4>)
   9df42:	2200      	movs	r2, #0
   9df44:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	Cl_AlarmResetAlarm(PS1_HIGH_THRESHOLD);
   9df48:	2015      	movs	r0, #21
   9df4a:	4b20      	ldr	r3, [pc, #128]	; (9dfcc <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9df4c:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS1_LOW_THRESHOLD);
   9df4e:	2016      	movs	r0, #22
   9df50:	4b1e      	ldr	r3, [pc, #120]	; (9dfcc <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9df52:	4798      	blx	r3
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_PS2_HIGH_THRESHOLD].IsRaised = false;
   9df54:	4b1c      	ldr	r3, [pc, #112]	; (9dfc8 <Cl_disinf_ResetAlertsforReassertion+0xc4>)
   9df56:	2200      	movs	r2, #0
   9df58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_PS2_LOW_THRESHOLD].IsRaised = false;
   9df5c:	4b1a      	ldr	r3, [pc, #104]	; (9dfc8 <Cl_disinf_ResetAlertsforReassertion+0xc4>)
   9df5e:	2200      	movs	r2, #0
   9df60:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	Cl_AlarmResetAlarm(PS2_HIGH_THRESHOLD);
   9df64:	2017      	movs	r0, #23
   9df66:	4b19      	ldr	r3, [pc, #100]	; (9dfcc <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9df68:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS2_LOW_THRESHOLD);
   9df6a:	2018      	movs	r0, #24
   9df6c:	4b17      	ldr	r3, [pc, #92]	; (9dfcc <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9df6e:	4798      	blx	r3
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_PS3_HIGH_THRESHOLD].IsRaised = false;
   9df70:	4b15      	ldr	r3, [pc, #84]	; (9dfc8 <Cl_disinf_ResetAlertsforReassertion+0xc4>)
   9df72:	2200      	movs	r2, #0
   9df74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_PS3_LOW_THRESHOLD].IsRaised = false;
   9df78:	4b13      	ldr	r3, [pc, #76]	; (9dfc8 <Cl_disinf_ResetAlertsforReassertion+0xc4>)
   9df7a:	2200      	movs	r2, #0
   9df7c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	Cl_AlarmResetAlarm(PS3_LOW_THRESHOLD);
   9df80:	2028      	movs	r0, #40	; 0x28
   9df82:	4b12      	ldr	r3, [pc, #72]	; (9dfcc <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9df84:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS3_HIGH_THRESHOLD);
   9df86:	2027      	movs	r0, #39	; 0x27
   9df88:	4b10      	ldr	r3, [pc, #64]	; (9dfcc <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9df8a:	4798      	blx	r3
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_TEMP3_HIGH_THRESHOLD].IsRaised = false;
   9df8c:	4b0e      	ldr	r3, [pc, #56]	; (9dfc8 <Cl_disinf_ResetAlertsforReassertion+0xc4>)
   9df8e:	2200      	movs	r2, #0
   9df90:	77da      	strb	r2, [r3, #31]
	Cl_AlarmResetAlarm(TEMP2_HIGH_THRESHOLD);
   9df92:	2011      	movs	r0, #17
   9df94:	4b0d      	ldr	r3, [pc, #52]	; (9dfcc <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9df96:	4798      	blx	r3
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_HOLDER1STATUS_OPEN].IsRaised = false;
   9df98:	4b0b      	ldr	r3, [pc, #44]	; (9dfc8 <Cl_disinf_ResetAlertsforReassertion+0xc4>)
   9df9a:	2200      	movs	r2, #0
   9df9c:	745a      	strb	r2, [r3, #17]
	Cl_AlarmResetAlarm(HOLDER1STATUS_OPEN);
   9df9e:	2003      	movs	r0, #3
   9dfa0:	4b0a      	ldr	r3, [pc, #40]	; (9dfcc <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9dfa2:	4798      	blx	r3
	Cl_AlarmResetAlarm(HOLDER1STATUS_CLOSED);
   9dfa4:	2005      	movs	r0, #5
   9dfa6:	4b09      	ldr	r3, [pc, #36]	; (9dfcc <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9dfa8:	4798      	blx	r3
	Cl_DisinfAlarmTable[CL_DISINF_ALARM_HOLDER2STATUS_OPEN].IsRaised = false;
   9dfaa:	4b07      	ldr	r3, [pc, #28]	; (9dfc8 <Cl_disinf_ResetAlertsforReassertion+0xc4>)
   9dfac:	2200      	movs	r2, #0
   9dfae:	761a      	strb	r2, [r3, #24]
	Cl_AlarmResetAlarm(HOLDER2STATUS_OPEN);
   9dfb0:	2004      	movs	r0, #4
   9dfb2:	4b06      	ldr	r3, [pc, #24]	; (9dfcc <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9dfb4:	4798      	blx	r3
	Cl_AlarmResetAlarm(HOLDER2STATUS_CLOSED);
   9dfb6:	2006      	movs	r0, #6
   9dfb8:	4b04      	ldr	r3, [pc, #16]	; (9dfcc <Cl_disinf_ResetAlertsforReassertion+0xc8>)
   9dfba:	4798      	blx	r3
	
	
	return (Cl_disinfretcode);
   9dfbc:	79fb      	ldrb	r3, [r7, #7]
}
   9dfbe:	4618      	mov	r0, r3
   9dfc0:	3708      	adds	r7, #8
   9dfc2:	46bd      	mov	sp, r7
   9dfc4:	bd80      	pop	{r7, pc}
   9dfc6:	bf00      	nop
   9dfc8:	20070b88 	.word	0x20070b88
   9dfcc:	00082f51 	.word	0x00082f51

0009dfd0 <Cl_Disinf_SendDisinfStateData>:
 * \ 
 * \return CL_OK on success. 
 * \Globals used :
 */ 
Cl_ReturnCodeType Cl_Disinf_SendDisinfStateData(void)
{
   9dfd0:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
   9dfd4:	b08b      	sub	sp, #44	; 0x2c
   9dfd6:	af00      	add	r7, sp, #0
	static float cond = 0;
	Cl_ReturnCodeType  Cl_disinfretcode = CL_OK;
   9dfd8:	2300      	movs	r3, #0
   9dfda:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	cl_DlsInfDatatype data;
	Cl_Uint8Type count=0;
   9dfde:	2300      	movs	r3, #0
   9dfe0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	Cl_Uint16Type ts2,temp,temp1;
	Cl_Uint8Type dataarray[12] =  {0,0,0,0,0,0,0,0,0,0,0,0};
   9dfe4:	2300      	movs	r3, #0
   9dfe6:	703b      	strb	r3, [r7, #0]
   9dfe8:	2300      	movs	r3, #0
   9dfea:	707b      	strb	r3, [r7, #1]
   9dfec:	2300      	movs	r3, #0
   9dfee:	70bb      	strb	r3, [r7, #2]
   9dff0:	2300      	movs	r3, #0
   9dff2:	70fb      	strb	r3, [r7, #3]
   9dff4:	2300      	movs	r3, #0
   9dff6:	713b      	strb	r3, [r7, #4]
   9dff8:	2300      	movs	r3, #0
   9dffa:	717b      	strb	r3, [r7, #5]
   9dffc:	2300      	movs	r3, #0
   9dffe:	71bb      	strb	r3, [r7, #6]
   9e000:	2300      	movs	r3, #0
   9e002:	71fb      	strb	r3, [r7, #7]
   9e004:	2300      	movs	r3, #0
   9e006:	723b      	strb	r3, [r7, #8]
   9e008:	2300      	movs	r3, #0
   9e00a:	727b      	strb	r3, [r7, #9]
   9e00c:	2300      	movs	r3, #0
   9e00e:	72bb      	strb	r3, [r7, #10]
   9e010:	2300      	movs	r3, #0
   9e012:	72fb      	strb	r3, [r7, #11]
	static Cl_Uint32Type timecount = 0;
	static float avgtmp3 = 0;
	
	//Cl_Console_bulkdatatype
	
	timecount++;
   9e014:	4bae      	ldr	r3, [pc, #696]	; (9e2d0 <Cl_Disinf_SendDisinfStateData+0x300>)
   9e016:	681b      	ldr	r3, [r3, #0]
   9e018:	3301      	adds	r3, #1
   9e01a:	4aad      	ldr	r2, [pc, #692]	; (9e2d0 <Cl_Disinf_SendDisinfStateData+0x300>)
   9e01c:	6013      	str	r3, [r2, #0]

	if (timecount < 5)
   9e01e:	4bac      	ldr	r3, [pc, #688]	; (9e2d0 <Cl_Disinf_SendDisinfStateData+0x300>)
   9e020:	681b      	ldr	r3, [r3, #0]
   9e022:	2b04      	cmp	r3, #4
   9e024:	f240 8146 	bls.w	9e2b4 <Cl_Disinf_SendDisinfStateData+0x2e4>
	{
		return;
	}
	else
	{
		timecount = 0;
   9e028:	4ba9      	ldr	r3, [pc, #676]	; (9e2d0 <Cl_Disinf_SendDisinfStateData+0x300>)
   9e02a:	2200      	movs	r2, #0
   9e02c:	601a      	str	r2, [r3, #0]
	}
	
	dataarray[0] = DISINF_STATE;
   9e02e:	230b      	movs	r3, #11
   9e030:	703b      	strb	r3, [r7, #0]
	count++;
   9e032:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9e036:	3301      	adds	r3, #1
   9e038:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	
	Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&temp);
   9e03c:	f107 030e 	add.w	r3, r7, #14
   9e040:	2014      	movs	r0, #20
   9e042:	4619      	mov	r1, r3
   9e044:	4ba3      	ldr	r3, [pc, #652]	; (9e2d4 <Cl_Disinf_SendDisinfStateData+0x304>)
   9e046:	4798      	blx	r3
	
	{
		
		float ftemp,temp1;
		data.word = 0;
   9e048:	2300      	movs	r3, #0
   9e04a:	613b      	str	r3, [r7, #16]
// 			temp1 = res_temp_value/100;									// Temp3 value in XX.yy format
// //			temp1 = temp1 - 3.1 + 1.4;										// sensor offset
// //			temp1 = temp1 - 3.1 -2 ;										// sensor offset
// //			avgtmp3 =(avgtmp3*5 + temp1)/6;
// 			avgtmp3 = (res_temp_value- 0.4)/10;
			temp1 = (float)temp/100;
   9e04c:	89fa      	ldrh	r2, [r7, #14]
   9e04e:	4ba2      	ldr	r3, [pc, #648]	; (9e2d8 <Cl_Disinf_SendDisinfStateData+0x308>)
   9e050:	4610      	mov	r0, r2
   9e052:	4798      	blx	r3
   9e054:	4602      	mov	r2, r0
   9e056:	4ba1      	ldr	r3, [pc, #644]	; (9e2dc <Cl_Disinf_SendDisinfStateData+0x30c>)
   9e058:	4610      	mov	r0, r2
   9e05a:	49a1      	ldr	r1, [pc, #644]	; (9e2e0 <Cl_Disinf_SendDisinfStateData+0x310>)
   9e05c:	4798      	blx	r3
   9e05e:	4603      	mov	r3, r0
   9e060:	623b      	str	r3, [r7, #32]
			avgtmp3 = temp1;
   9e062:	4aa0      	ldr	r2, [pc, #640]	; (9e2e4 <Cl_Disinf_SendDisinfStateData+0x314>)
   9e064:	6a3b      	ldr	r3, [r7, #32]
   9e066:	6013      	str	r3, [r2, #0]
	}
	
	Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_STATUS,&temp);
   9e068:	f107 030e 	add.w	r3, r7, #14
   9e06c:	2007      	movs	r0, #7
   9e06e:	4619      	mov	r1, r3
   9e070:	4b98      	ldr	r3, [pc, #608]	; (9e2d4 <Cl_Disinf_SendDisinfStateData+0x304>)
   9e072:	4798      	blx	r3
	{
		
		float cond_comp=0;
   9e074:	f04f 0300 	mov.w	r3, #0
   9e078:	61fb      	str	r3, [r7, #28]
		float temp2=0;
   9e07a:	f04f 0300 	mov.w	r3, #0
   9e07e:	61bb      	str	r3, [r7, #24]
		temp2 = temp * 0.8036;
   9e080:	89fb      	ldrh	r3, [r7, #14]
   9e082:	461a      	mov	r2, r3
   9e084:	4b98      	ldr	r3, [pc, #608]	; (9e2e8 <Cl_Disinf_SendDisinfStateData+0x318>)
   9e086:	4610      	mov	r0, r2
   9e088:	4798      	blx	r3
   9e08a:	4602      	mov	r2, r0
   9e08c:	460b      	mov	r3, r1
   9e08e:	4c97      	ldr	r4, [pc, #604]	; (9e2ec <Cl_Disinf_SendDisinfStateData+0x31c>)
   9e090:	4610      	mov	r0, r2
   9e092:	4619      	mov	r1, r3
   9e094:	a38a      	add	r3, pc, #552	; (adr r3, 9e2c0 <Cl_Disinf_SendDisinfStateData+0x2f0>)
   9e096:	e9d3 2300 	ldrd	r2, r3, [r3]
   9e09a:	47a0      	blx	r4
   9e09c:	4602      	mov	r2, r0
   9e09e:	460b      	mov	r3, r1
   9e0a0:	4610      	mov	r0, r2
   9e0a2:	4619      	mov	r1, r3
   9e0a4:	4b92      	ldr	r3, [pc, #584]	; (9e2f0 <Cl_Disinf_SendDisinfStateData+0x320>)
   9e0a6:	4798      	blx	r3
   9e0a8:	4603      	mov	r3, r0
   9e0aa:	61bb      	str	r3, [r7, #24]
		if (temp2 > 600)
   9e0ac:	4b91      	ldr	r3, [pc, #580]	; (9e2f4 <Cl_Disinf_SendDisinfStateData+0x324>)
   9e0ae:	69b8      	ldr	r0, [r7, #24]
   9e0b0:	4991      	ldr	r1, [pc, #580]	; (9e2f8 <Cl_Disinf_SendDisinfStateData+0x328>)
   9e0b2:	4798      	blx	r3
   9e0b4:	4603      	mov	r3, r0
   9e0b6:	2b00      	cmp	r3, #0
   9e0b8:	f000 8089 	beq.w	9e1ce <Cl_Disinf_SendDisinfStateData+0x1fe>
					{
			calibration_cond(temp2);
   9e0bc:	69b8      	ldr	r0, [r7, #24]
   9e0be:	4b8f      	ldr	r3, [pc, #572]	; (9e2fc <Cl_Disinf_SendDisinfStateData+0x32c>)
   9e0c0:	4798      	blx	r3
			cond =(cond*5 + cond_final_cs3)/6;
   9e0c2:	4b8f      	ldr	r3, [pc, #572]	; (9e300 <Cl_Disinf_SendDisinfStateData+0x330>)
   9e0c4:	681a      	ldr	r2, [r3, #0]
   9e0c6:	4b8f      	ldr	r3, [pc, #572]	; (9e304 <Cl_Disinf_SendDisinfStateData+0x334>)
   9e0c8:	4610      	mov	r0, r2
   9e0ca:	498f      	ldr	r1, [pc, #572]	; (9e308 <Cl_Disinf_SendDisinfStateData+0x338>)
   9e0cc:	4798      	blx	r3
   9e0ce:	4603      	mov	r3, r0
   9e0d0:	4619      	mov	r1, r3
   9e0d2:	4b8e      	ldr	r3, [pc, #568]	; (9e30c <Cl_Disinf_SendDisinfStateData+0x33c>)
   9e0d4:	681a      	ldr	r2, [r3, #0]
   9e0d6:	4b8e      	ldr	r3, [pc, #568]	; (9e310 <Cl_Disinf_SendDisinfStateData+0x340>)
   9e0d8:	4608      	mov	r0, r1
   9e0da:	4611      	mov	r1, r2
   9e0dc:	4798      	blx	r3
   9e0de:	4603      	mov	r3, r0
   9e0e0:	461a      	mov	r2, r3
   9e0e2:	4b7e      	ldr	r3, [pc, #504]	; (9e2dc <Cl_Disinf_SendDisinfStateData+0x30c>)
   9e0e4:	4610      	mov	r0, r2
   9e0e6:	498b      	ldr	r1, [pc, #556]	; (9e314 <Cl_Disinf_SendDisinfStateData+0x344>)
   9e0e8:	4798      	blx	r3
   9e0ea:	4603      	mov	r3, r0
   9e0ec:	461a      	mov	r2, r3
   9e0ee:	4b84      	ldr	r3, [pc, #528]	; (9e300 <Cl_Disinf_SendDisinfStateData+0x330>)
   9e0f0:	601a      	str	r2, [r3, #0]
			cond_comp= cond/(1+(avgtmp3-25.0)*0.020);
   9e0f2:	4b83      	ldr	r3, [pc, #524]	; (9e300 <Cl_Disinf_SendDisinfStateData+0x330>)
   9e0f4:	681a      	ldr	r2, [r3, #0]
   9e0f6:	4b88      	ldr	r3, [pc, #544]	; (9e318 <Cl_Disinf_SendDisinfStateData+0x348>)
   9e0f8:	4610      	mov	r0, r2
   9e0fa:	4798      	blx	r3
   9e0fc:	4680      	mov	r8, r0
   9e0fe:	4689      	mov	r9, r1
   9e100:	4b78      	ldr	r3, [pc, #480]	; (9e2e4 <Cl_Disinf_SendDisinfStateData+0x314>)
   9e102:	681a      	ldr	r2, [r3, #0]
   9e104:	4b84      	ldr	r3, [pc, #528]	; (9e318 <Cl_Disinf_SendDisinfStateData+0x348>)
   9e106:	4610      	mov	r0, r2
   9e108:	4798      	blx	r3
   9e10a:	4602      	mov	r2, r0
   9e10c:	460b      	mov	r3, r1
   9e10e:	4c83      	ldr	r4, [pc, #524]	; (9e31c <Cl_Disinf_SendDisinfStateData+0x34c>)
   9e110:	4610      	mov	r0, r2
   9e112:	4619      	mov	r1, r3
   9e114:	f04f 0200 	mov.w	r2, #0
   9e118:	4b81      	ldr	r3, [pc, #516]	; (9e320 <Cl_Disinf_SendDisinfStateData+0x350>)
   9e11a:	47a0      	blx	r4
   9e11c:	4602      	mov	r2, r0
   9e11e:	460b      	mov	r3, r1
   9e120:	4c72      	ldr	r4, [pc, #456]	; (9e2ec <Cl_Disinf_SendDisinfStateData+0x31c>)
   9e122:	4610      	mov	r0, r2
   9e124:	4619      	mov	r1, r3
   9e126:	a368      	add	r3, pc, #416	; (adr r3, 9e2c8 <Cl_Disinf_SendDisinfStateData+0x2f8>)
   9e128:	e9d3 2300 	ldrd	r2, r3, [r3]
   9e12c:	47a0      	blx	r4
   9e12e:	4602      	mov	r2, r0
   9e130:	460b      	mov	r3, r1
   9e132:	4c7c      	ldr	r4, [pc, #496]	; (9e324 <Cl_Disinf_SendDisinfStateData+0x354>)
   9e134:	4610      	mov	r0, r2
   9e136:	4619      	mov	r1, r3
   9e138:	f04f 0200 	mov.w	r2, #0
   9e13c:	4b7a      	ldr	r3, [pc, #488]	; (9e328 <Cl_Disinf_SendDisinfStateData+0x358>)
   9e13e:	47a0      	blx	r4
   9e140:	4602      	mov	r2, r0
   9e142:	460b      	mov	r3, r1
   9e144:	4c79      	ldr	r4, [pc, #484]	; (9e32c <Cl_Disinf_SendDisinfStateData+0x35c>)
   9e146:	4640      	mov	r0, r8
   9e148:	4649      	mov	r1, r9
   9e14a:	47a0      	blx	r4
   9e14c:	4602      	mov	r2, r0
   9e14e:	460b      	mov	r3, r1
   9e150:	4610      	mov	r0, r2
   9e152:	4619      	mov	r1, r3
   9e154:	4b66      	ldr	r3, [pc, #408]	; (9e2f0 <Cl_Disinf_SendDisinfStateData+0x320>)
   9e156:	4798      	blx	r3
   9e158:	4603      	mov	r3, r0
   9e15a:	61fb      	str	r3, [r7, #28]
			data.Twobyte = (cond_comp/10);
   9e15c:	4b5f      	ldr	r3, [pc, #380]	; (9e2dc <Cl_Disinf_SendDisinfStateData+0x30c>)
   9e15e:	69f8      	ldr	r0, [r7, #28]
   9e160:	4973      	ldr	r1, [pc, #460]	; (9e330 <Cl_Disinf_SendDisinfStateData+0x360>)
   9e162:	4798      	blx	r3
   9e164:	4603      	mov	r3, r0
   9e166:	461a      	mov	r2, r3
   9e168:	4b72      	ldr	r3, [pc, #456]	; (9e334 <Cl_Disinf_SendDisinfStateData+0x364>)
   9e16a:	4610      	mov	r0, r2
   9e16c:	4798      	blx	r3
   9e16e:	4603      	mov	r3, r0
   9e170:	b29b      	uxth	r3, r3
   9e172:	823b      	strh	r3, [r7, #16]
			dataarray[count++] = data.bytearray[0];
   9e174:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9e178:	1c5a      	adds	r2, r3, #1
   9e17a:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9e17e:	7c3a      	ldrb	r2, [r7, #16]
   9e180:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9e184:	440b      	add	r3, r1
   9e186:	f803 2c28 	strb.w	r2, [r3, #-40]
			dataarray[count++] = data.bytearray[1];
   9e18a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9e18e:	1c5a      	adds	r2, r3, #1
   9e190:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9e194:	7c7a      	ldrb	r2, [r7, #17]
   9e196:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9e19a:	440b      	add	r3, r1
   9e19c:	f803 2c28 	strb.w	r2, [r3, #-40]
			dataarray[count++] = data.bytearray[2];
   9e1a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9e1a4:	1c5a      	adds	r2, r3, #1
   9e1a6:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9e1aa:	7cba      	ldrb	r2, [r7, #18]
   9e1ac:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9e1b0:	440b      	add	r3, r1
   9e1b2:	f803 2c28 	strb.w	r2, [r3, #-40]
			dataarray[count++] = data.bytearray[3];
   9e1b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9e1ba:	1c5a      	adds	r2, r3, #1
   9e1bc:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9e1c0:	7cfa      	ldrb	r2, [r7, #19]
   9e1c2:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9e1c6:	440b      	add	r3, r1
   9e1c8:	f803 2c28 	strb.w	r2, [r3, #-40]
   9e1cc:	e02d      	b.n	9e22a <Cl_Disinf_SendDisinfStateData+0x25a>
					}
		else
					{
			data.Twobyte = 0;
   9e1ce:	2300      	movs	r3, #0
   9e1d0:	823b      	strh	r3, [r7, #16]
			dataarray[count++] = data.bytearray[0];
   9e1d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9e1d6:	1c5a      	adds	r2, r3, #1
   9e1d8:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9e1dc:	7c3a      	ldrb	r2, [r7, #16]
   9e1de:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9e1e2:	440b      	add	r3, r1
   9e1e4:	f803 2c28 	strb.w	r2, [r3, #-40]
			dataarray[count++] = data.bytearray[1];
   9e1e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9e1ec:	1c5a      	adds	r2, r3, #1
   9e1ee:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9e1f2:	7c7a      	ldrb	r2, [r7, #17]
   9e1f4:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9e1f8:	440b      	add	r3, r1
   9e1fa:	f803 2c28 	strb.w	r2, [r3, #-40]
			dataarray[count++] = data.bytearray[2];
   9e1fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9e202:	1c5a      	adds	r2, r3, #1
   9e204:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9e208:	7cba      	ldrb	r2, [r7, #18]
   9e20a:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9e20e:	440b      	add	r3, r1
   9e210:	f803 2c28 	strb.w	r2, [r3, #-40]
			dataarray[count++] = data.bytearray[3];
   9e214:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9e218:	1c5a      	adds	r2, r3, #1
   9e21a:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9e21e:	7cfa      	ldrb	r2, [r7, #19]
   9e220:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9e224:	440b      	add	r3, r1
   9e226:	f803 2c28 	strb.w	r2, [r3, #-40]
						}
						
		
					}
					{
		data.Twobyte = (uint16_t)(avgtmp3 * 10);
   9e22a:	4b2e      	ldr	r3, [pc, #184]	; (9e2e4 <Cl_Disinf_SendDisinfStateData+0x314>)
   9e22c:	681a      	ldr	r2, [r3, #0]
   9e22e:	4b35      	ldr	r3, [pc, #212]	; (9e304 <Cl_Disinf_SendDisinfStateData+0x334>)
   9e230:	4610      	mov	r0, r2
   9e232:	493f      	ldr	r1, [pc, #252]	; (9e330 <Cl_Disinf_SendDisinfStateData+0x360>)
   9e234:	4798      	blx	r3
   9e236:	4603      	mov	r3, r0
   9e238:	461a      	mov	r2, r3
   9e23a:	4b3e      	ldr	r3, [pc, #248]	; (9e334 <Cl_Disinf_SendDisinfStateData+0x364>)
   9e23c:	4610      	mov	r0, r2
   9e23e:	4798      	blx	r3
   9e240:	4603      	mov	r3, r0
   9e242:	b29b      	uxth	r3, r3
   9e244:	823b      	strh	r3, [r7, #16]
		dataarray[count++] = data.bytearray[0];
   9e246:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9e24a:	1c5a      	adds	r2, r3, #1
   9e24c:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9e250:	7c3a      	ldrb	r2, [r7, #16]
   9e252:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9e256:	440b      	add	r3, r1
   9e258:	f803 2c28 	strb.w	r2, [r3, #-40]
		dataarray[count++] = data.bytearray[1];
   9e25c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9e260:	1c5a      	adds	r2, r3, #1
   9e262:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9e266:	7c7a      	ldrb	r2, [r7, #17]
   9e268:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9e26c:	440b      	add	r3, r1
   9e26e:	f803 2c28 	strb.w	r2, [r3, #-40]
		dataarray[count++] = data.bytearray[2];
   9e272:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9e276:	1c5a      	adds	r2, r3, #1
   9e278:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9e27c:	7cba      	ldrb	r2, [r7, #18]
   9e27e:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9e282:	440b      	add	r3, r1
   9e284:	f803 2c28 	strb.w	r2, [r3, #-40]
		dataarray[count++] = data.bytearray[3];
   9e288:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9e28c:	1c5a      	adds	r2, r3, #1
   9e28e:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   9e292:	7cfa      	ldrb	r2, [r7, #19]
   9e294:	f107 0128 	add.w	r1, r7, #40	; 0x28
   9e298:	440b      	add	r3, r1
   9e29a:	f803 2c28 	strb.w	r2, [r3, #-40]
	}
	

	
	Cl_disinfretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&dataarray,count);
   9e29e:	463a      	mov	r2, r7
   9e2a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   9e2a4:	202a      	movs	r0, #42	; 0x2a
   9e2a6:	4611      	mov	r1, r2
   9e2a8:	461a      	mov	r2, r3
   9e2aa:	4b23      	ldr	r3, [pc, #140]	; (9e338 <Cl_Disinf_SendDisinfStateData+0x368>)
   9e2ac:	4798      	blx	r3
   9e2ae:	4603      	mov	r3, r0
   9e2b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	
	
	}
   9e2b4:	4618      	mov	r0, r3
   9e2b6:	372c      	adds	r7, #44	; 0x2c
   9e2b8:	46bd      	mov	sp, r7
   9e2ba:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}
   9e2be:	bf00      	nop
   9e2c0:	58e21965 	.word	0x58e21965
   9e2c4:	3fe9b717 	.word	0x3fe9b717
   9e2c8:	47ae147b 	.word	0x47ae147b
   9e2cc:	3f947ae1 	.word	0x3f947ae1
   9e2d0:	20071c1c 	.word	0x20071c1c
   9e2d4:	0008e7f9 	.word	0x0008e7f9
   9e2d8:	000a68a9 	.word	0x000a68a9
   9e2dc:	000a6ac1 	.word	0x000a6ac1
   9e2e0:	42c80000 	.word	0x42c80000
   9e2e4:	20071c20 	.word	0x20071c20
   9e2e8:	000a600d 	.word	0x000a600d
   9e2ec:	000a60d9 	.word	0x000a60d9
   9e2f0:	000a669d 	.word	0x000a669d
   9e2f4:	000a6cd1 	.word	0x000a6cd1
   9e2f8:	44160000 	.word	0x44160000
   9e2fc:	00084765 	.word	0x00084765
   9e300:	20071c24 	.word	0x20071c24
   9e304:	000a6959 	.word	0x000a6959
   9e308:	40a00000 	.word	0x40a00000
   9e30c:	2007179c 	.word	0x2007179c
   9e310:	000a6749 	.word	0x000a6749
   9e314:	40c00000 	.word	0x40c00000
   9e318:	000a6031 	.word	0x000a6031
   9e31c:	000a5d71 	.word	0x000a5d71
   9e320:	40390000 	.word	0x40390000
   9e324:	000a5d75 	.word	0x000a5d75
   9e328:	3ff00000 	.word	0x3ff00000
   9e32c:	000a632d 	.word	0x000a632d
   9e330:	41200000 	.word	0x41200000
   9e334:	000a6d31 	.word	0x000a6d31
   9e338:	0009ba51 	.word	0x0009ba51

0009e33c <UpdateDisinfMinuteTick>:
 * \return CL_OK on success. 
 * \Globals used :
 */ 
	  
	Cl_ReturnCodeType UpdateDisinfMinuteTick(void)
	{
   9e33c:	b580      	push	{r7, lr}
   9e33e:	b082      	sub	sp, #8
   9e340:	af00      	add	r7, sp, #0
		Cl_ReturnCodeType Cl_disinfretcode = CL_OK;
   9e342:	2300      	movs	r3, #0
   9e344:	71fb      	strb	r3, [r7, #7]
		Cl_disinfsecondscounter = 0;
   9e346:	4b0b      	ldr	r3, [pc, #44]	; (9e374 <UpdateDisinfMinuteTick+0x38>)
   9e348:	2200      	movs	r2, #0
   9e34a:	601a      	str	r2, [r3, #0]
		Cl_disinfMinutescounter++;
   9e34c:	4b0a      	ldr	r3, [pc, #40]	; (9e378 <UpdateDisinfMinuteTick+0x3c>)
   9e34e:	681b      	ldr	r3, [r3, #0]
   9e350:	3301      	adds	r3, #1
   9e352:	4a09      	ldr	r2, [pc, #36]	; (9e378 <UpdateDisinfMinuteTick+0x3c>)
   9e354:	6013      	str	r3, [r2, #0]
		Cl_disinfTotalMinutescounter++;
   9e356:	4b09      	ldr	r3, [pc, #36]	; (9e37c <UpdateDisinfMinuteTick+0x40>)
   9e358:	681b      	ldr	r3, [r3, #0]
   9e35a:	3301      	adds	r3, #1
   9e35c:	4a07      	ldr	r2, [pc, #28]	; (9e37c <UpdateDisinfMinuteTick+0x40>)
   9e35e:	6013      	str	r3, [r2, #0]
		Cl_disinfretcode = Cl_Disinf_UpdateTimeInfo();
   9e360:	4b07      	ldr	r3, [pc, #28]	; (9e380 <UpdateDisinfMinuteTick+0x44>)
   9e362:	4798      	blx	r3
   9e364:	4603      	mov	r3, r0
   9e366:	71fb      	strb	r3, [r7, #7]
		return Cl_disinfretcode;
   9e368:	79fb      	ldrb	r3, [r7, #7]
	}
   9e36a:	4618      	mov	r0, r3
   9e36c:	3708      	adds	r7, #8
   9e36e:	46bd      	mov	sp, r7
   9e370:	bd80      	pop	{r7, pc}
   9e372:	bf00      	nop
   9e374:	20071be8 	.word	0x20071be8
   9e378:	20071bec 	.word	0x20071bec
   9e37c:	20071c00 	.word	0x20071c00
   9e380:	0009db4d 	.word	0x0009db4d

0009e384 <Cl_dprep_init>:

 int Cl_dprepsecondscounter =0 ,Cl_dprepMinutescounter=0, Cl_dprephourscounter=0;
 int Cl_dprepTotalMinutescounter=0, Cl_dprepTotalhourscounter=0;

 Cl_ReturnCodeType Cl_dprep_init(void)
 {
   9e384:	b580      	push	{r7, lr}
   9e386:	af00      	add	r7, sp, #0
	 

 	Cl_Dprepsecondscounter = 0;
   9e388:	4b2f      	ldr	r3, [pc, #188]	; (9e448 <Cl_dprep_init+0xc4>)
   9e38a:	2200      	movs	r2, #0
   9e38c:	601a      	str	r2, [r3, #0]
 	Cl_DprepMinutescounter= 0;
   9e38e:	4b2f      	ldr	r3, [pc, #188]	; (9e44c <Cl_dprep_init+0xc8>)
   9e390:	2200      	movs	r2, #0
   9e392:	601a      	str	r2, [r3, #0]
 	Cl_Dprephourscounter= 0;
   9e394:	4b2e      	ldr	r3, [pc, #184]	; (9e450 <Cl_dprep_init+0xcc>)
   9e396:	2200      	movs	r2, #0
   9e398:	601a      	str	r2, [r3, #0]
 	Cl_DprepTotalMinutescounter= 0;
   9e39a:	4b2e      	ldr	r3, [pc, #184]	; (9e454 <Cl_dprep_init+0xd0>)
   9e39c:	2200      	movs	r2, #0
   9e39e:	601a      	str	r2, [r3, #0]
 	Cl_DprepTotalhourscounter=0;
   9e3a0:	4b2d      	ldr	r3, [pc, #180]	; (9e458 <Cl_dprep_init+0xd4>)
   9e3a2:	2200      	movs	r2, #0
   9e3a4:	601a      	str	r2, [r3, #0]
	Cl_Dprep_hepbolus_secondscounter=0;
   9e3a6:	4b2d      	ldr	r3, [pc, #180]	; (9e45c <Cl_dprep_init+0xd8>)
   9e3a8:	2200      	movs	r2, #0
   9e3aa:	801a      	strh	r2, [r3, #0]
	Cl_Dprep_filling_secondscounter = 0;
   9e3ac:	4b2c      	ldr	r3, [pc, #176]	; (9e460 <Cl_dprep_init+0xdc>)
   9e3ae:	2200      	movs	r2, #0
   9e3b0:	801a      	strh	r2, [r3, #0]
	Cl_Dprep_filling_Minutescounter = 0;
   9e3b2:	4b2c      	ldr	r3, [pc, #176]	; (9e464 <Cl_dprep_init+0xe0>)
   9e3b4:	2200      	movs	r2, #0
   9e3b6:	801a      	strh	r2, [r3, #0]
	Cl_Dprep_filling_TotalMinutescounter = 0;
   9e3b8:	4b2b      	ldr	r3, [pc, #172]	; (9e468 <Cl_dprep_init+0xe4>)
   9e3ba:	2200      	movs	r2, #0
   9e3bc:	801a      	strh	r2, [r3, #0]

	Cl_Dprep_Prime_secondscounter = 0;
   9e3be:	4b2b      	ldr	r3, [pc, #172]	; (9e46c <Cl_dprep_init+0xe8>)
   9e3c0:	2200      	movs	r2, #0
   9e3c2:	801a      	strh	r2, [r3, #0]
	Cl_Dprep_Prime_Minutescounter = 0;
   9e3c4:	4b2a      	ldr	r3, [pc, #168]	; (9e470 <Cl_dprep_init+0xec>)
   9e3c6:	2200      	movs	r2, #0
   9e3c8:	801a      	strh	r2, [r3, #0]
	Cl_Dprep_Prime_TotalMinutescounter = 0;
   9e3ca:	4b2a      	ldr	r3, [pc, #168]	; (9e474 <Cl_dprep_init+0xf0>)
   9e3cc:	2200      	movs	r2, #0
   9e3ce:	801a      	strh	r2, [r3, #0]
	Cl_Dprep_DialyserPrime_secondscounter = 0;
   9e3d0:	4b29      	ldr	r3, [pc, #164]	; (9e478 <Cl_dprep_init+0xf4>)
   9e3d2:	2200      	movs	r2, #0
   9e3d4:	801a      	strh	r2, [r3, #0]
	Cl_Dprep_DialyserPrime_Minutescounter = 0;
   9e3d6:	4b29      	ldr	r3, [pc, #164]	; (9e47c <Cl_dprep_init+0xf8>)
   9e3d8:	2200      	movs	r2, #0
   9e3da:	801a      	strh	r2, [r3, #0]
	Cl_Dprep_DialyserPrime_TotalMinutescounter = 0;
   9e3dc:	4b28      	ldr	r3, [pc, #160]	; (9e480 <Cl_dprep_init+0xfc>)
   9e3de:	2200      	movs	r2, #0
   9e3e0:	801a      	strh	r2, [r3, #0]
	hep_bolus_flag = 0;
   9e3e2:	4b28      	ldr	r3, [pc, #160]	; (9e484 <Cl_dprep_init+0x100>)
   9e3e4:	2200      	movs	r2, #0
   9e3e6:	801a      	strh	r2, [r3, #0]
	dprep_count=0;
   9e3e8:	4b27      	ldr	r3, [pc, #156]	; (9e488 <Cl_dprep_init+0x104>)
   9e3ea:	2200      	movs	r2, #0
   9e3ec:	801a      	strh	r2, [r3, #0]
	temp3_cel_backup=0;
   9e3ee:	4b27      	ldr	r3, [pc, #156]	; (9e48c <Cl_dprep_init+0x108>)
   9e3f0:	f04f 0200 	mov.w	r2, #0
   9e3f4:	601a      	str	r2, [r3, #0]
	cl_temp3_stable_confirm = false;
   9e3f6:	4b26      	ldr	r3, [pc, #152]	; (9e490 <Cl_dprep_init+0x10c>)
   9e3f8:	2200      	movs	r2, #0
   9e3fa:	701a      	strb	r2, [r3, #0]
	cl_temp3_stable= false;
   9e3fc:	4b25      	ldr	r3, [pc, #148]	; (9e494 <Cl_dprep_init+0x110>)
   9e3fe:	2200      	movs	r2, #0
   9e400:	701a      	strb	r2, [r3, #0]
	cl_temp3_range_stable= false;
   9e402:	4b25      	ldr	r3, [pc, #148]	; (9e498 <Cl_dprep_init+0x114>)
   9e404:	2200      	movs	r2, #0
   9e406:	701a      	strb	r2, [r3, #0]
	 cl_temp3_37stable = false;
   9e408:	4b24      	ldr	r3, [pc, #144]	; (9e49c <Cl_dprep_init+0x118>)
   9e40a:	2200      	movs	r2, #0
   9e40c:	701a      	strb	r2, [r3, #0]
	Cl_Prime_state ;
	 cl_50ms_timer = 0;
   9e40e:	4b24      	ldr	r3, [pc, #144]	; (9e4a0 <Cl_dprep_init+0x11c>)
   9e410:	2200      	movs	r2, #0
   9e412:	801a      	strh	r2, [r3, #0]
	 Cl_PatientState = CL_DPREP_PATIENT_STATE_NOT_CONNECTED;
   9e414:	4b23      	ldr	r3, [pc, #140]	; (9e4a4 <Cl_dprep_init+0x120>)
   9e416:	2200      	movs	r2, #0
   9e418:	701a      	strb	r2, [r3, #0]
	 cl_dprepstate = CL_DPREP_STATE_IDLE;
   9e41a:	4b23      	ldr	r3, [pc, #140]	; (9e4a8 <Cl_dprep_init+0x124>)
   9e41c:	2200      	movs	r2, #0
   9e41e:	701a      	strb	r2, [r3, #0]
	 cl_dprepfillingState = CL_DPREP_FILLING_IDLE;
   9e420:	4b22      	ldr	r3, [pc, #136]	; (9e4ac <Cl_dprep_init+0x128>)
   9e422:	2200      	movs	r2, #0
   9e424:	701a      	strb	r2, [r3, #0]
	dprep_heater_stable_status = false;
   9e426:	4b22      	ldr	r3, [pc, #136]	; (9e4b0 <Cl_dprep_init+0x12c>)
   9e428:	2200      	movs	r2, #0
   9e42a:	701a      	strb	r2, [r3, #0]
	 stability_counter = 0;
   9e42c:	4b21      	ldr	r3, [pc, #132]	; (9e4b4 <Cl_dprep_init+0x130>)
   9e42e:	2200      	movs	r2, #0
   9e430:	601a      	str	r2, [r3, #0]
	  wait_timeout_counter = 0;
   9e432:	4b21      	ldr	r3, [pc, #132]	; (9e4b8 <Cl_dprep_init+0x134>)
   9e434:	2200      	movs	r2, #0
   9e436:	601a      	str	r2, [r3, #0]
	  state_counter = 0;
   9e438:	4b20      	ldr	r3, [pc, #128]	; (9e4bc <Cl_dprep_init+0x138>)
   9e43a:	2200      	movs	r2, #0
   9e43c:	601a      	str	r2, [r3, #0]
	cl_dprep_primeInit();
   9e43e:	4b20      	ldr	r3, [pc, #128]	; (9e4c0 <Cl_dprep_init+0x13c>)
   9e440:	4798      	blx	r3

	 return CL_OK;
   9e442:	2300      	movs	r3, #0
 }
   9e444:	4618      	mov	r0, r3
   9e446:	bd80      	pop	{r7, pc}
   9e448:	20071c38 	.word	0x20071c38
   9e44c:	20071c3c 	.word	0x20071c3c
   9e450:	20071c40 	.word	0x20071c40
   9e454:	20071c44 	.word	0x20071c44
   9e458:	20071c48 	.word	0x20071c48
   9e45c:	20071c4c 	.word	0x20071c4c
   9e460:	20071c4e 	.word	0x20071c4e
   9e464:	20071c50 	.word	0x20071c50
   9e468:	20071c52 	.word	0x20071c52
   9e46c:	20071c54 	.word	0x20071c54
   9e470:	20071c56 	.word	0x20071c56
   9e474:	20071c58 	.word	0x20071c58
   9e478:	20071c5a 	.word	0x20071c5a
   9e47c:	20071c5c 	.word	0x20071c5c
   9e480:	20071c5e 	.word	0x20071c5e
   9e484:	20071c60 	.word	0x20071c60
   9e488:	20071c62 	.word	0x20071c62
   9e48c:	20071c64 	.word	0x20071c64
   9e490:	20071c68 	.word	0x20071c68
   9e494:	20071c69 	.word	0x20071c69
   9e498:	20071c6a 	.word	0x20071c6a
   9e49c:	20071c6b 	.word	0x20071c6b
   9e4a0:	20071c6c 	.word	0x20071c6c
   9e4a4:	20071c6e 	.word	0x20071c6e
   9e4a8:	20071c6f 	.word	0x20071c6f
   9e4ac:	20071c71 	.word	0x20071c71
   9e4b0:	20071c29 	.word	0x20071c29
   9e4b4:	20071c2c 	.word	0x20071c2c
   9e4b8:	20071c30 	.word	0x20071c30
   9e4bc:	20071c34 	.word	0x20071c34
   9e4c0:	000884c1 	.word	0x000884c1
   9e4c4:	00000000 	.word	0x00000000

0009e4c8 <Cl_dprep_controller>:
 

 
Cl_ReturnCodeType Cl_dprep_controller(Cl_Mac_EventsType Cl_MacDprepEvent)
{
   9e4c8:	b590      	push	{r4, r7, lr}
   9e4ca:	b0a9      	sub	sp, #164	; 0xa4
   9e4cc:	af00      	add	r7, sp, #0
   9e4ce:	4603      	mov	r3, r0
   9e4d0:	71fb      	strb	r3, [r7, #7]
	
	Cl_ReturnCodeType  Cl_dprepretcode = CL_OK;
   9e4d2:	2300      	movs	r3, #0
   9e4d4:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	Cl_Dprep_Events cl_dprepevent = EVENT_DPREP_EVENT_NULL;
   9e4d8:	2300      	movs	r3, #0
   9e4da:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   9e4de:	2351      	movs	r3, #81	; 0x51
   9e4e0:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
	Cl_Uint8Type data = 0;
   9e4e4:	2300      	movs	r3, #0
   9e4e6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	Cl_Uint8Type datasize = 0;
   9e4ea:	2300      	movs	r3, #0
   9e4ec:	f887 309a 	strb.w	r3, [r7, #154]	; 0x9a
	Cl_Uint8Type dataarray[4] =  {0,0,0,0};
   9e4f0:	2300      	movs	r3, #0
   9e4f2:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
   9e4f6:	2300      	movs	r3, #0
   9e4f8:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
   9e4fc:	2300      	movs	r3, #0
   9e4fe:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
   9e502:	2300      	movs	r3, #0
   9e504:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
	Cl_Uint8Type systemdataarray[40] =  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
   9e508:	f107 0348 	add.w	r3, r7, #72	; 0x48
   9e50c:	2200      	movs	r2, #0
   9e50e:	601a      	str	r2, [r3, #0]
   9e510:	3304      	adds	r3, #4
   9e512:	2200      	movs	r2, #0
   9e514:	601a      	str	r2, [r3, #0]
   9e516:	3304      	adds	r3, #4
   9e518:	2200      	movs	r2, #0
   9e51a:	601a      	str	r2, [r3, #0]
   9e51c:	3304      	adds	r3, #4
   9e51e:	2200      	movs	r2, #0
   9e520:	601a      	str	r2, [r3, #0]
   9e522:	3304      	adds	r3, #4
   9e524:	2200      	movs	r2, #0
   9e526:	601a      	str	r2, [r3, #0]
   9e528:	3304      	adds	r3, #4
   9e52a:	2200      	movs	r2, #0
   9e52c:	601a      	str	r2, [r3, #0]
   9e52e:	3304      	adds	r3, #4
   9e530:	2200      	movs	r2, #0
   9e532:	601a      	str	r2, [r3, #0]
   9e534:	3304      	adds	r3, #4
   9e536:	2200      	movs	r2, #0
   9e538:	601a      	str	r2, [r3, #0]
   9e53a:	3304      	adds	r3, #4
   9e53c:	2200      	movs	r2, #0
   9e53e:	601a      	str	r2, [r3, #0]
   9e540:	3304      	adds	r3, #4
   9e542:	2200      	movs	r2, #0
   9e544:	601a      	str	r2, [r3, #0]
   9e546:	3304      	adds	r3, #4
	cl_PrepDatatype tempdata;
	Cl_BoolType cl_status;
	cl_PrepDatatype cl_PrepData;															
	Cl_BoolType alarmstatus1 = false,alarmstatus2 = false,alarmstatus3 = false,flowstatus = false;
   9e548:	2300      	movs	r3, #0
   9e54a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
   9e54e:	2300      	movs	r3, #0
   9e550:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
   9e554:	2300      	movs	r3, #0
   9e556:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
   9e55a:	2300      	movs	r3, #0
   9e55c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	Cl_Uint16Type static cl_temp3;
	Cl_Uint16Type temp_temp3;
	float temp3_cel=0;
   9e560:	f04f 0300 	mov.w	r3, #0
   9e564:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	Cl_Uint16Type temp = 0;
   9e568:	2300      	movs	r3, #0
   9e56a:	863b      	strh	r3, [r7, #48]	; 0x30
	Cl_Uint16Type tempcount;
	StateDatatype abfdata;
	Cl_Uint8Type abfdataarray[5] =  {0,0,0,0,0};
   9e56c:	2300      	movs	r3, #0
   9e56e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
   9e572:	2300      	movs	r3, #0
   9e574:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
   9e578:	2300      	movs	r3, #0
   9e57a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
   9e57e:	2300      	movs	r3, #0
   9e580:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
   9e584:	2300      	movs	r3, #0
   9e586:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	cl_dprep_translatemacevent( Cl_MacDprepEvent, &cl_dprepevent);
   9e58a:	79fa      	ldrb	r2, [r7, #7]
   9e58c:	f107 0378 	add.w	r3, r7, #120	; 0x78
   9e590:	4610      	mov	r0, r2
   9e592:	4619      	mov	r1, r3
   9e594:	4bbd      	ldr	r3, [pc, #756]	; (9e88c <Cl_dprep_controller+0x3c4>)
   9e596:	4798      	blx	r3
	
	
	switch(cl_dprepevent)
   9e598:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
   9e59c:	3b05      	subs	r3, #5
   9e59e:	2b57      	cmp	r3, #87	; 0x57
   9e5a0:	f200 81b4 	bhi.w	9e90c <Cl_dprep_controller+0x444>
   9e5a4:	a201      	add	r2, pc, #4	; (adr r2, 9e5ac <Cl_dprep_controller+0xe4>)
   9e5a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9e5aa:	bf00      	nop
   9e5ac:	0009e717 	.word	0x0009e717
   9e5b0:	0009e72f 	.word	0x0009e72f
   9e5b4:	0009e747 	.word	0x0009e747
   9e5b8:	0009e90d 	.word	0x0009e90d
   9e5bc:	0009e90d 	.word	0x0009e90d
   9e5c0:	0009e90d 	.word	0x0009e90d
   9e5c4:	0009e90d 	.word	0x0009e90d
   9e5c8:	0009e90d 	.word	0x0009e90d
   9e5cc:	0009e90d 	.word	0x0009e90d
   9e5d0:	0009e90d 	.word	0x0009e90d
   9e5d4:	0009e7f5 	.word	0x0009e7f5
   9e5d8:	0009e90d 	.word	0x0009e90d
   9e5dc:	0009e90d 	.word	0x0009e90d
   9e5e0:	0009e90d 	.word	0x0009e90d
   9e5e4:	0009e90d 	.word	0x0009e90d
   9e5e8:	0009e90d 	.word	0x0009e90d
   9e5ec:	0009e90d 	.word	0x0009e90d
   9e5f0:	0009e70d 	.word	0x0009e70d
   9e5f4:	0009e90d 	.word	0x0009e90d
   9e5f8:	0009e90d 	.word	0x0009e90d
   9e5fc:	0009e90d 	.word	0x0009e90d
   9e600:	0009e90d 	.word	0x0009e90d
   9e604:	0009e90d 	.word	0x0009e90d
   9e608:	0009e90d 	.word	0x0009e90d
   9e60c:	0009e90d 	.word	0x0009e90d
   9e610:	0009e90d 	.word	0x0009e90d
   9e614:	0009e90d 	.word	0x0009e90d
   9e618:	0009e90d 	.word	0x0009e90d
   9e61c:	0009e7eb 	.word	0x0009e7eb
   9e620:	0009e785 	.word	0x0009e785
   9e624:	0009e7e1 	.word	0x0009e7e1
   9e628:	0009e90d 	.word	0x0009e90d
   9e62c:	0009e90d 	.word	0x0009e90d
   9e630:	0009e90d 	.word	0x0009e90d
   9e634:	0009e90d 	.word	0x0009e90d
   9e638:	0009e90d 	.word	0x0009e90d
   9e63c:	0009e90d 	.word	0x0009e90d
   9e640:	0009e90d 	.word	0x0009e90d
   9e644:	0009e90d 	.word	0x0009e90d
   9e648:	0009e90d 	.word	0x0009e90d
   9e64c:	0009e90d 	.word	0x0009e90d
   9e650:	0009e90d 	.word	0x0009e90d
   9e654:	0009e90d 	.word	0x0009e90d
   9e658:	0009e90d 	.word	0x0009e90d
   9e65c:	0009e90d 	.word	0x0009e90d
   9e660:	0009e90d 	.word	0x0009e90d
   9e664:	0009e90d 	.word	0x0009e90d
   9e668:	0009e90d 	.word	0x0009e90d
   9e66c:	0009e90d 	.word	0x0009e90d
   9e670:	0009e90d 	.word	0x0009e90d
   9e674:	0009e90d 	.word	0x0009e90d
   9e678:	0009e90d 	.word	0x0009e90d
   9e67c:	0009e90d 	.word	0x0009e90d
   9e680:	0009e90d 	.word	0x0009e90d
   9e684:	0009e90d 	.word	0x0009e90d
   9e688:	0009e90d 	.word	0x0009e90d
   9e68c:	0009e90d 	.word	0x0009e90d
   9e690:	0009e90d 	.word	0x0009e90d
   9e694:	0009e90d 	.word	0x0009e90d
   9e698:	0009e90d 	.word	0x0009e90d
   9e69c:	0009e90d 	.word	0x0009e90d
   9e6a0:	0009e90d 	.word	0x0009e90d
   9e6a4:	0009e90d 	.word	0x0009e90d
   9e6a8:	0009e90d 	.word	0x0009e90d
   9e6ac:	0009e90d 	.word	0x0009e90d
   9e6b0:	0009e90d 	.word	0x0009e90d
   9e6b4:	0009e90d 	.word	0x0009e90d
   9e6b8:	0009e90d 	.word	0x0009e90d
   9e6bc:	0009e90d 	.word	0x0009e90d
   9e6c0:	0009e90d 	.word	0x0009e90d
   9e6c4:	0009e90d 	.word	0x0009e90d
   9e6c8:	0009e90d 	.word	0x0009e90d
   9e6cc:	0009e90d 	.word	0x0009e90d
   9e6d0:	0009e90d 	.word	0x0009e90d
   9e6d4:	0009e90d 	.word	0x0009e90d
   9e6d8:	0009e90d 	.word	0x0009e90d
   9e6dc:	0009e90d 	.word	0x0009e90d
   9e6e0:	0009e90d 	.word	0x0009e90d
   9e6e4:	0009e90d 	.word	0x0009e90d
   9e6e8:	0009e90d 	.word	0x0009e90d
   9e6ec:	0009e90d 	.word	0x0009e90d
   9e6f0:	0009e90d 	.word	0x0009e90d
   9e6f4:	0009e90d 	.word	0x0009e90d
   9e6f8:	0009e90d 	.word	0x0009e90d
   9e6fc:	0009e90d 	.word	0x0009e90d
   9e700:	0009e90d 	.word	0x0009e90d
   9e704:	0009e82d 	.word	0x0009e82d
   9e708:	0009e8b1 	.word	0x0009e8b1
	{
		case EVENT_DPREP_TICK_SECOND:
		//Cl_dprepretcode = Cl_bc_controller(BC_EVENT_SECOND);
		//Cl_dprepretcode = cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_TICK_SEC,0);
		cl_dprepstatedummy = cl_dprepstate;
   9e70c:	4b60      	ldr	r3, [pc, #384]	; (9e890 <Cl_dprep_controller+0x3c8>)
   9e70e:	781a      	ldrb	r2, [r3, #0]
   9e710:	4b60      	ldr	r3, [pc, #384]	; (9e894 <Cl_dprep_controller+0x3cc>)
   9e712:	701a      	strb	r2, [r3, #0]
		break;
   9e714:	e0fb      	b.n	9e90e <Cl_dprep_controller+0x446>
		case EVENT_DPREP_TICK_50MS:
		//Cl_dprepretcode = Cl_bc_controller(BC_EVENT_50MS);
		break;
		case EVENT_DPREP_COMMAND_SET_BLDPMP_ON:
		Cl_dprepretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true);
   9e716:	2001      	movs	r0, #1
   9e718:	2101      	movs	r1, #1
   9e71a:	4b5f      	ldr	r3, [pc, #380]	; (9e898 <Cl_dprep_controller+0x3d0>)
   9e71c:	4798      	blx	r3
   9e71e:	4603      	mov	r3, r0
   9e720:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		cl_bp_controller(CL_BP_EVENT_START,1);
   9e724:	2002      	movs	r0, #2
   9e726:	2101      	movs	r1, #1
   9e728:	4b5c      	ldr	r3, [pc, #368]	; (9e89c <Cl_dprep_controller+0x3d4>)
   9e72a:	4798      	blx	r3
		break;
   9e72c:	e0ef      	b.n	9e90e <Cl_dprep_controller+0x446>
		case EVENT_DPREP_COMMAND_SET_BLDPMP_OFF:
		Cl_dprepretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,false);
   9e72e:	2001      	movs	r0, #1
   9e730:	2100      	movs	r1, #0
   9e732:	4b59      	ldr	r3, [pc, #356]	; (9e898 <Cl_dprep_controller+0x3d0>)
   9e734:	4798      	blx	r3
   9e736:	4603      	mov	r3, r0
   9e738:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		cl_bp_controller(CL_BP_EVENT_STOP,1);
   9e73c:	2004      	movs	r0, #4
   9e73e:	2101      	movs	r1, #1
   9e740:	4b56      	ldr	r3, [pc, #344]	; (9e89c <Cl_dprep_controller+0x3d4>)
   9e742:	4798      	blx	r3
		break;
   9e744:	e0e3      	b.n	9e90e <Cl_dprep_controller+0x446>
		case  EVENT_DPREP_COMMAND_SET_BLDPUMPRATE:
			if(Cl_ConsoleRxMsg.msgready == true)
   9e746:	4b56      	ldr	r3, [pc, #344]	; (9e8a0 <Cl_dprep_controller+0x3d8>)
   9e748:	7e1b      	ldrb	r3, [r3, #24]
   9e74a:	2b00      	cmp	r3, #0
   9e74c:	d019      	beq.n	9e782 <Cl_dprep_controller+0x2ba>
		{
			
			cl_Datastreamtype cl_temp  ;
			cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   9e74e:	4b54      	ldr	r3, [pc, #336]	; (9e8a0 <Cl_dprep_controller+0x3d8>)
   9e750:	791b      	ldrb	r3, [r3, #4]
   9e752:	f887 3020 	strb.w	r3, [r7, #32]
			cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[1];
   9e756:	4b52      	ldr	r3, [pc, #328]	; (9e8a0 <Cl_dprep_controller+0x3d8>)
   9e758:	795b      	ldrb	r3, [r3, #5]
   9e75a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[2];
   9e75e:	4b50      	ldr	r3, [pc, #320]	; (9e8a0 <Cl_dprep_controller+0x3d8>)
   9e760:	799b      	ldrb	r3, [r3, #6]
   9e762:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
   9e766:	4b4e      	ldr	r3, [pc, #312]	; (9e8a0 <Cl_dprep_controller+0x3d8>)
   9e768:	79db      	ldrb	r3, [r3, #7]
   9e76a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,cl_temp.Twobyte);
   9e76e:	8c3b      	ldrh	r3, [r7, #32]
   9e770:	2001      	movs	r0, #1
   9e772:	4619      	mov	r1, r3
   9e774:	4b49      	ldr	r3, [pc, #292]	; (9e89c <Cl_dprep_controller+0x3d4>)
   9e776:	4798      	blx	r3
			Treatdata[ID_bloodratetreat] = cl_temp.Twobyte;
   9e778:	8c3b      	ldrh	r3, [r7, #32]
   9e77a:	461a      	mov	r2, r3
   9e77c:	4b49      	ldr	r3, [pc, #292]	; (9e8a4 <Cl_dprep_controller+0x3dc>)
   9e77e:	65da      	str	r2, [r3, #92]	; 0x5c
		}
		
		break;
   9e780:	e0c5      	b.n	9e90e <Cl_dprep_controller+0x446>
   9e782:	e0c4      	b.n	9e90e <Cl_dprep_controller+0x446>
			case EVENT_DPREP_HEP_PMP_START:
			if(Cl_ConsoleRxMsg.msgready == true)
   9e784:	4b46      	ldr	r3, [pc, #280]	; (9e8a0 <Cl_dprep_controller+0x3d8>)
   9e786:	7e1b      	ldrb	r3, [r3, #24]
   9e788:	2b00      	cmp	r3, #0
   9e78a:	d028      	beq.n	9e7de <Cl_dprep_controller+0x316>
			
			{
				cl_Datastreamtype cl_temp  ;
				cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[1];
   9e78c:	4b44      	ldr	r3, [pc, #272]	; (9e8a0 <Cl_dprep_controller+0x3d8>)
   9e78e:	795b      	ldrb	r3, [r3, #5]
   9e790:	773b      	strb	r3, [r7, #28]
				cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[2];
   9e792:	4b43      	ldr	r3, [pc, #268]	; (9e8a0 <Cl_dprep_controller+0x3d8>)
   9e794:	799b      	ldrb	r3, [r3, #6]
   9e796:	777b      	strb	r3, [r7, #29]
				cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[3];
   9e798:	4b41      	ldr	r3, [pc, #260]	; (9e8a0 <Cl_dprep_controller+0x3d8>)
   9e79a:	79db      	ldrb	r3, [r3, #7]
   9e79c:	77bb      	strb	r3, [r7, #30]
				cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[4];
   9e79e:	4b40      	ldr	r3, [pc, #256]	; (9e8a0 <Cl_dprep_controller+0x3d8>)
   9e7a0:	7a1b      	ldrb	r3, [r3, #8]
   9e7a2:	77fb      	strb	r3, [r7, #31]
				
				if(Cl_ConsoleRxMsg.data.byte[0] == 1)
   9e7a4:	4b3e      	ldr	r3, [pc, #248]	; (9e8a0 <Cl_dprep_controller+0x3d8>)
   9e7a6:	791b      	ldrb	r3, [r3, #4]
   9e7a8:	2b01      	cmp	r3, #1
   9e7aa:	d104      	bne.n	9e7b6 <Cl_dprep_controller+0x2ee>
				{
					cl_hep_controller(CL_HEP_EVENT_GO_TO_LEFTEND,0);
   9e7ac:	2001      	movs	r0, #1
   9e7ae:	2100      	movs	r1, #0
   9e7b0:	4b3d      	ldr	r3, [pc, #244]	; (9e8a8 <Cl_dprep_controller+0x3e0>)
   9e7b2:	4798      	blx	r3
   9e7b4:	e013      	b.n	9e7de <Cl_dprep_controller+0x316>
					
				}
				else if(Cl_ConsoleRxMsg.data.byte[0] == 2)
   9e7b6:	4b3a      	ldr	r3, [pc, #232]	; (9e8a0 <Cl_dprep_controller+0x3d8>)
   9e7b8:	791b      	ldrb	r3, [r3, #4]
   9e7ba:	2b02      	cmp	r3, #2
   9e7bc:	d104      	bne.n	9e7c8 <Cl_dprep_controller+0x300>
				{
					cl_hep_controller(CL_HEP_EVENT_GO_TO_RIGHTEND,0);
   9e7be:	2004      	movs	r0, #4
   9e7c0:	2100      	movs	r1, #0
   9e7c2:	4b39      	ldr	r3, [pc, #228]	; (9e8a8 <Cl_dprep_controller+0x3e0>)
   9e7c4:	4798      	blx	r3
   9e7c6:	e00a      	b.n	9e7de <Cl_dprep_controller+0x316>
				}
				else if(Cl_ConsoleRxMsg.data.byte[0] == 0)
   9e7c8:	4b35      	ldr	r3, [pc, #212]	; (9e8a0 <Cl_dprep_controller+0x3d8>)
   9e7ca:	791b      	ldrb	r3, [r3, #4]
   9e7cc:	2b00      	cmp	r3, #0
   9e7ce:	d106      	bne.n	9e7de <Cl_dprep_controller+0x316>
				{
					cl_hep_controller(CL_HEP_EVENT_START_NORMAL_DELIVERY,Treatdata[ID_heprate]);
   9e7d0:	4b34      	ldr	r3, [pc, #208]	; (9e8a4 <Cl_dprep_controller+0x3dc>)
   9e7d2:	69db      	ldr	r3, [r3, #28]
   9e7d4:	200a      	movs	r0, #10
   9e7d6:	4619      	mov	r1, r3
   9e7d8:	4b33      	ldr	r3, [pc, #204]	; (9e8a8 <Cl_dprep_controller+0x3e0>)
   9e7da:	4798      	blx	r3
				}
				
			}
			
			
			break;
   9e7dc:	e097      	b.n	9e90e <Cl_dprep_controller+0x446>
   9e7de:	e096      	b.n	9e90e <Cl_dprep_controller+0x446>
			case EVENT_DPREP_HEP_PMP_STOP:
			cl_hep_controller(CL_HEP_EVENT_STOPBOLUS,0);
   9e7e0:	2009      	movs	r0, #9
   9e7e2:	2100      	movs	r1, #0
   9e7e4:	4b30      	ldr	r3, [pc, #192]	; (9e8a8 <Cl_dprep_controller+0x3e0>)
   9e7e6:	4798      	blx	r3
			break;
   9e7e8:	e091      	b.n	9e90e <Cl_dprep_controller+0x446>
			case EVENT_HEAPARIN_BOLUS:
			cl_hep_controller(CL_HEP_EVENT_STARTBOLUS,0);
   9e7ea:	2007      	movs	r0, #7
   9e7ec:	2100      	movs	r1, #0
   9e7ee:	4b2e      	ldr	r3, [pc, #184]	; (9e8a8 <Cl_dprep_controller+0x3e0>)
   9e7f0:	4798      	blx	r3
			break;
   9e7f2:	e08c      	b.n	9e90e <Cl_dprep_controller+0x446>
// 		break;
// 		case EVENT_HEAPARIN_BOLUS:
// 		break;
		case EVENT_DPREP_HEP_PMP_RATE:
		
		if(Cl_ConsoleRxMsg.msgready == true)
   9e7f4:	4b2a      	ldr	r3, [pc, #168]	; (9e8a0 <Cl_dprep_controller+0x3d8>)
   9e7f6:	7e1b      	ldrb	r3, [r3, #24]
   9e7f8:	2b00      	cmp	r3, #0
   9e7fa:	d016      	beq.n	9e82a <Cl_dprep_controller+0x362>
		{
			
			cl_Datastreamtype cl_temp  ;
			cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   9e7fc:	4b28      	ldr	r3, [pc, #160]	; (9e8a0 <Cl_dprep_controller+0x3d8>)
   9e7fe:	791b      	ldrb	r3, [r3, #4]
   9e800:	763b      	strb	r3, [r7, #24]
			cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[1];
   9e802:	4b27      	ldr	r3, [pc, #156]	; (9e8a0 <Cl_dprep_controller+0x3d8>)
   9e804:	795b      	ldrb	r3, [r3, #5]
   9e806:	767b      	strb	r3, [r7, #25]
			cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[2];
   9e808:	4b25      	ldr	r3, [pc, #148]	; (9e8a0 <Cl_dprep_controller+0x3d8>)
   9e80a:	799b      	ldrb	r3, [r3, #6]
   9e80c:	76bb      	strb	r3, [r7, #26]
			cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
   9e80e:	4b24      	ldr	r3, [pc, #144]	; (9e8a0 <Cl_dprep_controller+0x3d8>)
   9e810:	79db      	ldrb	r3, [r3, #7]
   9e812:	76fb      	strb	r3, [r7, #27]
			Treatdata[ID_heprate] = cl_temp.Twobyte;
   9e814:	8b3b      	ldrh	r3, [r7, #24]
   9e816:	461a      	mov	r2, r3
   9e818:	4b22      	ldr	r3, [pc, #136]	; (9e8a4 <Cl_dprep_controller+0x3dc>)
   9e81a:	61da      	str	r2, [r3, #28]
			//	hep_calibration(Treatdata[ID_heprate]);
			cl_hep_controller(CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE,Treatdata[ID_heprate]);
   9e81c:	4b21      	ldr	r3, [pc, #132]	; (9e8a4 <Cl_dprep_controller+0x3dc>)
   9e81e:	69db      	ldr	r3, [r3, #28]
   9e820:	2006      	movs	r0, #6
   9e822:	4619      	mov	r1, r3
   9e824:	4b20      	ldr	r3, [pc, #128]	; (9e8a8 <Cl_dprep_controller+0x3e0>)
   9e826:	4798      	blx	r3
		}
		
		break;
   9e828:	e071      	b.n	9e90e <Cl_dprep_controller+0x446>
   9e82a:	e070      	b.n	9e90e <Cl_dprep_controller+0x446>
		
		case EVT_CONSOLE_COMMAND_SET_BLDPUMPINC_MANUAL:
		
		if(Treatdata[ID_bloodrate] <= 450){
   9e82c:	4b1d      	ldr	r3, [pc, #116]	; (9e8a4 <Cl_dprep_controller+0x3dc>)
   9e82e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   9e830:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
   9e834:	d828      	bhi.n	9e888 <Cl_dprep_controller+0x3c0>
			
			Treatdata[ID_bloodrate] = Treatdata[ID_bloodrate] + 10;
   9e836:	4b1b      	ldr	r3, [pc, #108]	; (9e8a4 <Cl_dprep_controller+0x3dc>)
   9e838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   9e83a:	330a      	adds	r3, #10
   9e83c:	4a19      	ldr	r2, [pc, #100]	; (9e8a4 <Cl_dprep_controller+0x3dc>)
   9e83e:	63d3      	str	r3, [r2, #60]	; 0x3c
			cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,Treatdata[ID_bloodrate]);
   9e840:	4b18      	ldr	r3, [pc, #96]	; (9e8a4 <Cl_dprep_controller+0x3dc>)
   9e842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   9e844:	2001      	movs	r0, #1
   9e846:	4619      	mov	r1, r3
   9e848:	4b14      	ldr	r3, [pc, #80]	; (9e89c <Cl_dprep_controller+0x3d4>)
   9e84a:	4798      	blx	r3
			
			// send blood rate data to console
			
			
			abfdataarray[0] = CON_RX_PARAM_DATA_ABF_RATE;
   9e84c:	230f      	movs	r3, #15
   9e84e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			abfdata.fourbytedata = Treatdata[ID_bloodrate];
   9e852:	4b14      	ldr	r3, [pc, #80]	; (9e8a4 <Cl_dprep_controller+0x3dc>)
   9e854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   9e856:	62fb      	str	r3, [r7, #44]	; 0x2c
			abfdataarray[1] = abfdata.bytedata[0];
   9e858:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   9e85c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			abfdataarray[2] = abfdata.bytedata[1];
   9e860:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
   9e864:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			abfdataarray[3] = abfdata.bytedata[2];
   9e868:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
   9e86c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			abfdataarray[4] = abfdata.bytedata[3];
   9e870:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   9e874:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			
			Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&abfdataarray,5);
   9e878:	f107 0324 	add.w	r3, r7, #36	; 0x24
   9e87c:	202a      	movs	r0, #42	; 0x2a
   9e87e:	4619      	mov	r1, r3
   9e880:	2205      	movs	r2, #5
   9e882:	4b0a      	ldr	r3, [pc, #40]	; (9e8ac <Cl_dprep_controller+0x3e4>)
   9e884:	4798      	blx	r3
			
		}
		
		cl_dprepevent == EVENT_DPREP_EVENT_NULL;
		break;
   9e886:	e042      	b.n	9e90e <Cl_dprep_controller+0x446>
   9e888:	e041      	b.n	9e90e <Cl_dprep_controller+0x446>
   9e88a:	bf00      	nop
   9e88c:	0009fe31 	.word	0x0009fe31
   9e890:	20071c6f 	.word	0x20071c6f
   9e894:	20072657 	.word	0x20072657
   9e898:	00082e61 	.word	0x00082e61
   9e89c:	00093305 	.word	0x00093305
   9e8a0:	200723f0 	.word	0x200723f0
   9e8a4:	2007265c 	.word	0x2007265c
   9e8a8:	00093a0d 	.word	0x00093a0d
   9e8ac:	0009ba51 	.word	0x0009ba51
		
		case EVT_CONSOLE_COMMAND_SET_BLDPUMPDEC_MANUAL:
		
		if(Treatdata[ID_bloodrate] >= 100){
   9e8b0:	4bc4      	ldr	r3, [pc, #784]	; (9ebc4 <Cl_dprep_controller+0x6fc>)
   9e8b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   9e8b4:	2b63      	cmp	r3, #99	; 0x63
   9e8b6:	d928      	bls.n	9e90a <Cl_dprep_controller+0x442>
			
			Treatdata[ID_bloodrate] = Treatdata[ID_bloodrate] - 10;
   9e8b8:	4bc2      	ldr	r3, [pc, #776]	; (9ebc4 <Cl_dprep_controller+0x6fc>)
   9e8ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   9e8bc:	3b0a      	subs	r3, #10
   9e8be:	4ac1      	ldr	r2, [pc, #772]	; (9ebc4 <Cl_dprep_controller+0x6fc>)
   9e8c0:	63d3      	str	r3, [r2, #60]	; 0x3c
			cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,Treatdata[ID_bloodrate]);
   9e8c2:	4bc0      	ldr	r3, [pc, #768]	; (9ebc4 <Cl_dprep_controller+0x6fc>)
   9e8c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   9e8c6:	2001      	movs	r0, #1
   9e8c8:	4619      	mov	r1, r3
   9e8ca:	4bbf      	ldr	r3, [pc, #764]	; (9ebc8 <Cl_dprep_controller+0x700>)
   9e8cc:	4798      	blx	r3
			
			
			abfdataarray[0] = CON_RX_PARAM_DATA_ABF_RATE;
   9e8ce:	230f      	movs	r3, #15
   9e8d0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			abfdata.fourbytedata = Treatdata[ID_bloodrate];
   9e8d4:	4bbb      	ldr	r3, [pc, #748]	; (9ebc4 <Cl_dprep_controller+0x6fc>)
   9e8d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   9e8d8:	62fb      	str	r3, [r7, #44]	; 0x2c
			abfdataarray[1] = abfdata.bytedata[0];
   9e8da:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   9e8de:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			abfdataarray[2] = abfdata.bytedata[1];
   9e8e2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
   9e8e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			abfdataarray[3] = abfdata.bytedata[2];
   9e8ea:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
   9e8ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			abfdataarray[4] = abfdata.bytedata[3];
   9e8f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   9e8f6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			
			Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&abfdataarray,5);
   9e8fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
   9e8fe:	202a      	movs	r0, #42	; 0x2a
   9e900:	4619      	mov	r1, r3
   9e902:	2205      	movs	r2, #5
   9e904:	4bb1      	ldr	r3, [pc, #708]	; (9ebcc <Cl_dprep_controller+0x704>)
   9e906:	4798      	blx	r3
		}
		
		cl_dprepevent == EVENT_DPREP_EVENT_NULL;
		break;
   9e908:	e001      	b.n	9e90e <Cl_dprep_controller+0x446>
   9e90a:	e000      	b.n	9e90e <Cl_dprep_controller+0x446>
		

		default:break;
   9e90c:	bf00      	nop
		
	}
	if(cl_dprepevent == EVENT_DPREP_TICK_SECOND)
   9e90e:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
   9e912:	2b16      	cmp	r3, #22
   9e914:	d105      	bne.n	9e922 <Cl_dprep_controller+0x45a>
	{

		//Cl_dprepretcode =  Cl_AlarmResetAlarm( SENSOR_TEMP3STATUS );
		//Cl_dprepretcode =  Cl_AlarmResetAlarm( SENSOR_TEMP2STATUS );
		Cl_dprepretcode =  Cl_AlarmResetAlarm( FLOW_NO_FLOW );
   9e916:	200c      	movs	r0, #12
   9e918:	4bad      	ldr	r3, [pc, #692]	; (9ebd0 <Cl_dprep_controller+0x708>)
   9e91a:	4798      	blx	r3
   9e91c:	4603      	mov	r3, r0
   9e91e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		//	Cl_rinseretcode =  Cl_AlarmResetAlarm( FLOWSTATUS_FLOWOFF );
	}


 	switch(cl_dprepstate)
   9e922:	4bac      	ldr	r3, [pc, #688]	; (9ebd4 <Cl_dprep_controller+0x70c>)
   9e924:	781b      	ldrb	r3, [r3, #0]
   9e926:	2b0e      	cmp	r3, #14
   9e928:	f201 8267 	bhi.w	9fdfa <Cl_dprep_controller+0x1932>
   9e92c:	a201      	add	r2, pc, #4	; (adr r2, 9e934 <Cl_dprep_controller+0x46c>)
   9e92e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9e932:	bf00      	nop
   9e934:	0009e971 	.word	0x0009e971
   9e938:	0009fdfb 	.word	0x0009fdfb
   9e93c:	0009ecc7 	.word	0x0009ecc7
   9e940:	0009f2eb 	.word	0x0009f2eb
   9e944:	0009fdfb 	.word	0x0009fdfb
   9e948:	0009f62d 	.word	0x0009f62d
   9e94c:	0009f8c1 	.word	0x0009f8c1
   9e950:	0009fa5b 	.word	0x0009fa5b
   9e954:	0009fa75 	.word	0x0009fa75
   9e958:	0009fc4d 	.word	0x0009fc4d
   9e95c:	0009fdfb 	.word	0x0009fdfb
   9e960:	0009e971 	.word	0x0009e971
   9e964:	0009f211 	.word	0x0009f211
   9e968:	0009f12d 	.word	0x0009f12d
   9e96c:	0009f4a1 	.word	0x0009f4a1

		case CL_DPREP_STATE_INIT:
		break;
		case CL_DPREP_STATE_IDLE:
		case CL_DPREP_STATE_STOPPED:
		switch (cl_dprepevent)
   9e970:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
   9e974:	3b02      	subs	r3, #2
   9e976:	2b1d      	cmp	r3, #29
   9e978:	f200 81a2 	bhi.w	9ecc0 <Cl_dprep_controller+0x7f8>
   9e97c:	a201      	add	r2, pc, #4	; (adr r2, 9e984 <Cl_dprep_controller+0x4bc>)
   9e97e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9e982:	bf00      	nop
   9e984:	0009ec55 	.word	0x0009ec55
   9e988:	0009eabd 	.word	0x0009eabd
   9e98c:	0009ea31 	.word	0x0009ea31
   9e990:	0009ecc1 	.word	0x0009ecc1
   9e994:	0009ecc1 	.word	0x0009ecc1
   9e998:	0009ecc1 	.word	0x0009ecc1
   9e99c:	0009ecc1 	.word	0x0009ecc1
   9e9a0:	0009ecc1 	.word	0x0009ecc1
   9e9a4:	0009ec99 	.word	0x0009ec99
   9e9a8:	0009ecc1 	.word	0x0009ecc1
   9e9ac:	0009ecc1 	.word	0x0009ecc1
   9e9b0:	0009ecc1 	.word	0x0009ecc1
   9e9b4:	0009ecc1 	.word	0x0009ecc1
   9e9b8:	0009ecc1 	.word	0x0009ecc1
   9e9bc:	0009ecc1 	.word	0x0009ecc1
   9e9c0:	0009ecc1 	.word	0x0009ecc1
   9e9c4:	0009ecc1 	.word	0x0009ecc1
   9e9c8:	0009ecc1 	.word	0x0009ecc1
   9e9cc:	0009ecc1 	.word	0x0009ecc1
   9e9d0:	0009ecc1 	.word	0x0009ecc1
   9e9d4:	0009ecc1 	.word	0x0009ecc1
   9e9d8:	0009ecc1 	.word	0x0009ecc1
   9e9dc:	0009ecc1 	.word	0x0009ecc1
   9e9e0:	0009ec8d 	.word	0x0009ec8d
   9e9e4:	0009ecc1 	.word	0x0009ecc1
   9e9e8:	0009ecc1 	.word	0x0009ecc1
   9e9ec:	0009ecc1 	.word	0x0009ecc1
   9e9f0:	0009ec71 	.word	0x0009ec71
   9e9f4:	0009ecc1 	.word	0x0009ecc1
   9e9f8:	0009e9fd 	.word	0x0009e9fd
		{
			case EVENT_DPREP_START_RECIRC:
						if((cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIMING) || (cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIME_RCIRC_STARTED) || (cl_dprep_prime_state !=  CL_DPREP_PRIME_STATE_DIALYSER_PRIMING))
   9e9fc:	4b76      	ldr	r3, [pc, #472]	; (9ebd8 <Cl_dprep_controller+0x710>)
   9e9fe:	781b      	ldrb	r3, [r3, #0]
   9ea00:	2b01      	cmp	r3, #1
   9ea02:	d107      	bne.n	9ea14 <Cl_dprep_controller+0x54c>
   9ea04:	4b74      	ldr	r3, [pc, #464]	; (9ebd8 <Cl_dprep_controller+0x710>)
   9ea06:	781b      	ldrb	r3, [r3, #0]
   9ea08:	2b05      	cmp	r3, #5
   9ea0a:	d103      	bne.n	9ea14 <Cl_dprep_controller+0x54c>
   9ea0c:	4b72      	ldr	r3, [pc, #456]	; (9ebd8 <Cl_dprep_controller+0x710>)
   9ea0e:	781b      	ldrb	r3, [r3, #0]
   9ea10:	2b09      	cmp	r3, #9
   9ea12:	d00c      	beq.n	9ea2e <Cl_dprep_controller+0x566>
						{
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC",6);
   9ea14:	2018      	movs	r0, #24
   9ea16:	4971      	ldr	r1, [pc, #452]	; (9ebdc <Cl_dprep_controller+0x714>)
   9ea18:	2206      	movs	r2, #6
   9ea1a:	4b6c      	ldr	r3, [pc, #432]	; (9ebcc <Cl_dprep_controller+0x704>)
   9ea1c:	4798      	blx	r3
							cl_dprep_primecontroller(CL_DPREP_PRIME_RCIRC_START,0);
   9ea1e:	2005      	movs	r0, #5
   9ea20:	2100      	movs	r1, #0
   9ea22:	4b6f      	ldr	r3, [pc, #444]	; (9ebe0 <Cl_dprep_controller+0x718>)
   9ea24:	4798      	blx	r3
							Cl_DprepAlarmTable[CL_DPREP_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   9ea26:	4b6f      	ldr	r3, [pc, #444]	; (9ebe4 <Cl_dprep_controller+0x71c>)
   9ea28:	2200      	movs	r2, #0
   9ea2a:	70da      	strb	r2, [r3, #3]
						}
				break;
   9ea2c:	e149      	b.n	9ecc2 <Cl_dprep_controller+0x7fa>
   9ea2e:	e148      	b.n	9ecc2 <Cl_dprep_controller+0x7fa>
			case EVENT_DPREP_COMMAND_GET_DATA:

				if(Cl_ConsoleRxMsg.msgready == true)
   9ea30:	4b6d      	ldr	r3, [pc, #436]	; (9ebe8 <Cl_dprep_controller+0x720>)
   9ea32:	7e1b      	ldrb	r3, [r3, #24]
   9ea34:	2b00      	cmp	r3, #0
   9ea36:	d040      	beq.n	9eaba <Cl_dprep_controller+0x5f2>
				{
					switch(Cl_ConsoleRxMsg.data.byte[0])
   9ea38:	4b6b      	ldr	r3, [pc, #428]	; (9ebe8 <Cl_dprep_controller+0x720>)
   9ea3a:	791b      	ldrb	r3, [r3, #4]
   9ea3c:	2b02      	cmp	r3, #2
   9ea3e:	d002      	beq.n	9ea46 <Cl_dprep_controller+0x57e>
   9ea40:	2b04      	cmp	r3, #4
   9ea42:	d01d      	beq.n	9ea80 <Cl_dprep_controller+0x5b8>
						dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
						Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
						Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
						break;
						default:
						break;
   9ea44:	e039      	b.n	9eaba <Cl_dprep_controller+0x5f2>
				if(Cl_ConsoleRxMsg.msgready == true)
				{
					switch(Cl_ConsoleRxMsg.data.byte[0])
					{
						case	CON_RX_PARAM_DATA_PRIME_STATUS:
						command = CON_TX_COMMAND_SYSDATA;
   9ea46:	2316      	movs	r3, #22
   9ea48:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
						dataarray[0] = CON_TX_PARAM_DATA_PRIME_STATUS;
   9ea4c:	2302      	movs	r3, #2
   9ea4e:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
						Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_PRIME_STATUS, &dataarray[1]);
   9ea52:	f107 0370 	add.w	r3, r7, #112	; 0x70
   9ea56:	3301      	adds	r3, #1
   9ea58:	2002      	movs	r0, #2
   9ea5a:	4619      	mov	r1, r3
   9ea5c:	4b63      	ldr	r3, [pc, #396]	; (9ebec <Cl_dprep_controller+0x724>)
   9ea5e:	4798      	blx	r3
   9ea60:	4603      	mov	r3, r0
   9ea62:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   9ea66:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
   9ea6a:	f107 0370 	add.w	r3, r7, #112	; 0x70
   9ea6e:	4610      	mov	r0, r2
   9ea70:	4619      	mov	r1, r3
   9ea72:	2202      	movs	r2, #2
   9ea74:	4b55      	ldr	r3, [pc, #340]	; (9ebcc <Cl_dprep_controller+0x704>)
   9ea76:	4798      	blx	r3
   9ea78:	4603      	mov	r3, r0
   9ea7a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						break;
   9ea7e:	e01c      	b.n	9eaba <Cl_dprep_controller+0x5f2>
						case	CON_RX_PARAM_DATA_DIALYSIS_STATUS:
						command = CON_TX_COMMAND_SYSDATA;
   9ea80:	2316      	movs	r3, #22
   9ea82:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
						dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
   9ea86:	2304      	movs	r3, #4
   9ea88:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
						Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
   9ea8c:	f107 0370 	add.w	r3, r7, #112	; 0x70
   9ea90:	3301      	adds	r3, #1
   9ea92:	2004      	movs	r0, #4
   9ea94:	4619      	mov	r1, r3
   9ea96:	4b55      	ldr	r3, [pc, #340]	; (9ebec <Cl_dprep_controller+0x724>)
   9ea98:	4798      	blx	r3
   9ea9a:	4603      	mov	r3, r0
   9ea9c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   9eaa0:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
   9eaa4:	f107 0370 	add.w	r3, r7, #112	; 0x70
   9eaa8:	4610      	mov	r0, r2
   9eaaa:	4619      	mov	r1, r3
   9eaac:	2202      	movs	r2, #2
   9eaae:	4b47      	ldr	r3, [pc, #284]	; (9ebcc <Cl_dprep_controller+0x704>)
   9eab0:	4798      	blx	r3
   9eab2:	4603      	mov	r3, r0
   9eab4:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						break;
   9eab8:	bf00      	nop
						default:
						break;
					}
				}
			break;
   9eaba:	e102      	b.n	9ecc2 <Cl_dprep_controller+0x7fa>
			case EVENT_DPREP_COMMAND_SET_DATA:
					if(Cl_ConsoleRxMsg.msgready == true)
   9eabc:	4b4a      	ldr	r3, [pc, #296]	; (9ebe8 <Cl_dprep_controller+0x720>)
   9eabe:	7e1b      	ldrb	r3, [r3, #24]
   9eac0:	2b00      	cmp	r3, #0
   9eac2:	f000 80c6 	beq.w	9ec52 <Cl_dprep_controller+0x78a>
							{
										cl_Datastreamtype cl_temp  ;	
										cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[1];
   9eac6:	4b48      	ldr	r3, [pc, #288]	; (9ebe8 <Cl_dprep_controller+0x720>)
   9eac8:	795b      	ldrb	r3, [r3, #5]
   9eaca:	753b      	strb	r3, [r7, #20]
										cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[2];
   9eacc:	4b46      	ldr	r3, [pc, #280]	; (9ebe8 <Cl_dprep_controller+0x720>)
   9eace:	799b      	ldrb	r3, [r3, #6]
   9ead0:	757b      	strb	r3, [r7, #21]
										cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[3];
   9ead2:	4b45      	ldr	r3, [pc, #276]	; (9ebe8 <Cl_dprep_controller+0x720>)
   9ead4:	79db      	ldrb	r3, [r3, #7]
   9ead6:	75bb      	strb	r3, [r7, #22]
										cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[4];
   9ead8:	4b43      	ldr	r3, [pc, #268]	; (9ebe8 <Cl_dprep_controller+0x720>)
   9eada:	7a1b      	ldrb	r3, [r3, #8]
   9eadc:	75fb      	strb	r3, [r7, #23]
											
								switch(Cl_ConsoleRxMsg.data.byte[0])
   9eade:	4b42      	ldr	r3, [pc, #264]	; (9ebe8 <Cl_dprep_controller+0x720>)
   9eae0:	791b      	ldrb	r3, [r3, #4]
   9eae2:	3b05      	subs	r3, #5
   9eae4:	2b20      	cmp	r3, #32
   9eae6:	f200 80b3 	bhi.w	9ec50 <Cl_dprep_controller+0x788>
   9eaea:	a201      	add	r2, pc, #4	; (adr r2, 9eaf0 <Cl_dprep_controller+0x628>)
   9eaec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9eaf0:	0009ec51 	.word	0x0009ec51
   9eaf4:	0009ec51 	.word	0x0009ec51
   9eaf8:	0009ec51 	.word	0x0009ec51
   9eafc:	0009ec51 	.word	0x0009ec51
   9eb00:	0009ec51 	.word	0x0009ec51
   9eb04:	0009ec51 	.word	0x0009ec51
   9eb08:	0009ec51 	.word	0x0009ec51
   9eb0c:	0009ec51 	.word	0x0009ec51
   9eb10:	0009ec51 	.word	0x0009ec51
   9eb14:	0009ec51 	.word	0x0009ec51
   9eb18:	0009ec51 	.word	0x0009ec51
   9eb1c:	0009ec51 	.word	0x0009ec51
   9eb20:	0009ec51 	.word	0x0009ec51
   9eb24:	0009ec51 	.word	0x0009ec51
   9eb28:	0009ec51 	.word	0x0009ec51
   9eb2c:	0009ec51 	.word	0x0009ec51
   9eb30:	0009ec51 	.word	0x0009ec51
   9eb34:	0009ec51 	.word	0x0009ec51
   9eb38:	0009ec51 	.word	0x0009ec51
   9eb3c:	0009eb75 	.word	0x0009eb75
   9eb40:	0009eb8d 	.word	0x0009eb8d
   9eb44:	0009eba5 	.word	0x0009eba5
   9eb48:	0009ebb5 	.word	0x0009ebb5
   9eb4c:	0009ebfd 	.word	0x0009ebfd
   9eb50:	0009ec0d 	.word	0x0009ec0d
   9eb54:	0009ec51 	.word	0x0009ec51
   9eb58:	0009ec51 	.word	0x0009ec51
   9eb5c:	0009ec51 	.word	0x0009ec51
   9eb60:	0009ec51 	.word	0x0009ec51
   9eb64:	0009ec1d 	.word	0x0009ec1d
   9eb68:	0009ec27 	.word	0x0009ec27
   9eb6c:	0009ec31 	.word	0x0009ec31
   9eb70:	0009ec41 	.word	0x0009ec41
										case ID_bloodratereturn:
										break;
										case ID_bloodratetreat:
										break;
										case ID_tempulimit:
											Cl_alarmThresholdTable.temp3_high_threshold =  (cl_temp.word)/10;
   9eb74:	697b      	ldr	r3, [r7, #20]
   9eb76:	4a1e      	ldr	r2, [pc, #120]	; (9ebf0 <Cl_dprep_controller+0x728>)
   9eb78:	fba2 2303 	umull	r2, r3, r2, r3
   9eb7c:	08da      	lsrs	r2, r3, #3
   9eb7e:	4b1d      	ldr	r3, [pc, #116]	; (9ebf4 <Cl_dprep_controller+0x72c>)
   9eb80:	4610      	mov	r0, r2
   9eb82:	4798      	blx	r3
   9eb84:	4602      	mov	r2, r0
   9eb86:	4b1c      	ldr	r3, [pc, #112]	; (9ebf8 <Cl_dprep_controller+0x730>)
   9eb88:	649a      	str	r2, [r3, #72]	; 0x48
										break;
   9eb8a:	e062      	b.n	9ec52 <Cl_dprep_controller+0x78a>
										case ID_templlimit:
											Cl_alarmThresholdTable.temp3_low_threshold =  (cl_temp.word)/10;
   9eb8c:	697b      	ldr	r3, [r7, #20]
   9eb8e:	4a18      	ldr	r2, [pc, #96]	; (9ebf0 <Cl_dprep_controller+0x728>)
   9eb90:	fba2 2303 	umull	r2, r3, r2, r3
   9eb94:	08da      	lsrs	r2, r3, #3
   9eb96:	4b17      	ldr	r3, [pc, #92]	; (9ebf4 <Cl_dprep_controller+0x72c>)
   9eb98:	4610      	mov	r0, r2
   9eb9a:	4798      	blx	r3
   9eb9c:	4602      	mov	r2, r0
   9eb9e:	4b16      	ldr	r3, [pc, #88]	; (9ebf8 <Cl_dprep_controller+0x730>)
   9eba0:	64da      	str	r2, [r3, #76]	; 0x4c
										break;
   9eba2:	e056      	b.n	9ec52 <Cl_dprep_controller+0x78a>
										case ID_tmpllimit:
										Cl_alarmThresholdTable.tmp_low_threshold =  cl_temp.word;
   9eba4:	697a      	ldr	r2, [r7, #20]
   9eba6:	4b13      	ldr	r3, [pc, #76]	; (9ebf4 <Cl_dprep_controller+0x72c>)
   9eba8:	4610      	mov	r0, r2
   9ebaa:	4798      	blx	r3
   9ebac:	4602      	mov	r2, r0
   9ebae:	4b12      	ldr	r3, [pc, #72]	; (9ebf8 <Cl_dprep_controller+0x730>)
   9ebb0:	635a      	str	r2, [r3, #52]	; 0x34
										break;
   9ebb2:	e04e      	b.n	9ec52 <Cl_dprep_controller+0x78a>
										case ID_tmpulimit:
										Cl_alarmThresholdTable.tmp_high_threshold =  cl_temp.word;
   9ebb4:	697a      	ldr	r2, [r7, #20]
   9ebb6:	4b0f      	ldr	r3, [pc, #60]	; (9ebf4 <Cl_dprep_controller+0x72c>)
   9ebb8:	4610      	mov	r0, r2
   9ebba:	4798      	blx	r3
   9ebbc:	4602      	mov	r2, r0
   9ebbe:	4b0e      	ldr	r3, [pc, #56]	; (9ebf8 <Cl_dprep_controller+0x730>)
   9ebc0:	631a      	str	r2, [r3, #48]	; 0x30
										break;
   9ebc2:	e046      	b.n	9ec52 <Cl_dprep_controller+0x78a>
   9ebc4:	2007265c 	.word	0x2007265c
   9ebc8:	00093305 	.word	0x00093305
   9ebcc:	0009ba51 	.word	0x0009ba51
   9ebd0:	00082f51 	.word	0x00082f51
   9ebd4:	20071c6f 	.word	0x20071c6f
   9ebd8:	20071994 	.word	0x20071994
   9ebdc:	000a8d2c 	.word	0x000a8d2c
   9ebe0:	0008850d 	.word	0x0008850d
   9ebe4:	20070bdc 	.word	0x20070bdc
   9ebe8:	200723f0 	.word	0x200723f0
   9ebec:	0009a545 	.word	0x0009a545
   9ebf0:	cccccccd 	.word	0xcccccccd
   9ebf4:	000a68a9 	.word	0x000a68a9
   9ebf8:	20072104 	.word	0x20072104
										case ID_vptllimit:
											Cl_alarmThresholdTable.vpt_low_threshold =  cl_temp.word;
   9ebfc:	697a      	ldr	r2, [r7, #20]
   9ebfe:	4ba8      	ldr	r3, [pc, #672]	; (9eea0 <Cl_dprep_controller+0x9d8>)
   9ec00:	4610      	mov	r0, r2
   9ec02:	4798      	blx	r3
   9ec04:	4602      	mov	r2, r0
   9ec06:	4ba7      	ldr	r3, [pc, #668]	; (9eea4 <Cl_dprep_controller+0x9dc>)
   9ec08:	615a      	str	r2, [r3, #20]
										break;
   9ec0a:	e022      	b.n	9ec52 <Cl_dprep_controller+0x78a>
										case ID_vptulimit:
											Cl_alarmThresholdTable.vpt_high_threshold =  cl_temp.word;
   9ec0c:	697a      	ldr	r2, [r7, #20]
   9ec0e:	4ba4      	ldr	r3, [pc, #656]	; (9eea0 <Cl_dprep_controller+0x9d8>)
   9ec10:	4610      	mov	r0, r2
   9ec12:	4798      	blx	r3
   9ec14:	4602      	mov	r2, r0
   9ec16:	4ba3      	ldr	r3, [pc, #652]	; (9eea4 <Cl_dprep_controller+0x9dc>)
   9ec18:	611a      	str	r2, [r3, #16]
										break;
   9ec1a:	e01a      	b.n	9ec52 <Cl_dprep_controller+0x78a>
										case ID_dflowllimit:
										break;
										case ID_dflowulimit:
										break;
										case ID_condllimit:
										Cl_alarmThresholdTable.cond_low_threshold =  cl_temp.word;
   9ec1c:	697b      	ldr	r3, [r7, #20]
   9ec1e:	b29a      	uxth	r2, r3
   9ec20:	4ba0      	ldr	r3, [pc, #640]	; (9eea4 <Cl_dprep_controller+0x9dc>)
   9ec22:	801a      	strh	r2, [r3, #0]
										break;
   9ec24:	e015      	b.n	9ec52 <Cl_dprep_controller+0x78a>
										case ID_condulimit:
										Cl_alarmThresholdTable.cond_high_threshold =  cl_temp.word;
   9ec26:	697b      	ldr	r3, [r7, #20]
   9ec28:	b29a      	uxth	r2, r3
   9ec2a:	4b9e      	ldr	r3, [pc, #632]	; (9eea4 <Cl_dprep_controller+0x9dc>)
   9ec2c:	805a      	strh	r2, [r3, #2]
										break;
   9ec2e:	e010      	b.n	9ec52 <Cl_dprep_controller+0x78a>
										case ID_aptllimit:
											Cl_alarmThresholdTable.apt_low_threshold =  cl_temp.word;
   9ec30:	697a      	ldr	r2, [r7, #20]
   9ec32:	4b9b      	ldr	r3, [pc, #620]	; (9eea0 <Cl_dprep_controller+0x9d8>)
   9ec34:	4610      	mov	r0, r2
   9ec36:	4798      	blx	r3
   9ec38:	4602      	mov	r2, r0
   9ec3a:	4b9a      	ldr	r3, [pc, #616]	; (9eea4 <Cl_dprep_controller+0x9dc>)
   9ec3c:	60da      	str	r2, [r3, #12]
										break;
   9ec3e:	e008      	b.n	9ec52 <Cl_dprep_controller+0x78a>
										case ID_aptulimit:
										Cl_alarmThresholdTable.apt_high_threshold =  cl_temp.word;
   9ec40:	697a      	ldr	r2, [r7, #20]
   9ec42:	4b97      	ldr	r3, [pc, #604]	; (9eea0 <Cl_dprep_controller+0x9d8>)
   9ec44:	4610      	mov	r0, r2
   9ec46:	4798      	blx	r3
   9ec48:	4602      	mov	r2, r0
   9ec4a:	4b96      	ldr	r3, [pc, #600]	; (9eea4 <Cl_dprep_controller+0x9dc>)
   9ec4c:	609a      	str	r2, [r3, #8]
										break;
   9ec4e:	e000      	b.n	9ec52 <Cl_dprep_controller+0x78a>

									default:break;
   9ec50:	bf00      	nop
								}
							}
						
	
			break;
   9ec52:	e036      	b.n	9ecc2 <Cl_dprep_controller+0x7fa>
			case EVENT_DPREP_DIALYSIS_PREP:
			
			Cl_dprepretcode = Cl_Dprep_StartPreparation();
   9ec54:	4b94      	ldr	r3, [pc, #592]	; (9eea8 <Cl_dprep_controller+0x9e0>)
   9ec56:	4798      	blx	r3
   9ec58:	4603      	mov	r3, r0
   9ec5a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			if(Cl_dprepretcode == CL_REJECTED)
   9ec5e:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
   9ec62:	2b03      	cmp	r3, #3
   9ec64:	d103      	bne.n	9ec6e <Cl_dprep_controller+0x7a6>
			{
				return Cl_dprepretcode;
   9ec66:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
   9ec6a:	f001 b8c8 	b.w	9fdfe <Cl_dprep_controller+0x1936>
			}
			break;
   9ec6e:	e028      	b.n	9ecc2 <Cl_dprep_controller+0x7fa>
			case EVENT_DPREP_MIXING_PREP_START:
			Cl_dprepretcode = Cl_Dprep_StartPreparation();
   9ec70:	4b8d      	ldr	r3, [pc, #564]	; (9eea8 <Cl_dprep_controller+0x9e0>)
   9ec72:	4798      	blx	r3
   9ec74:	4603      	mov	r3, r0
   9ec76:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			if(Cl_dprepretcode == CL_REJECTED)
   9ec7a:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
   9ec7e:	2b03      	cmp	r3, #3
   9ec80:	d103      	bne.n	9ec8a <Cl_dprep_controller+0x7c2>
			{
				return Cl_dprepretcode;
   9ec82:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
   9ec86:	f001 b8ba 	b.w	9fdfe <Cl_dprep_controller+0x1936>
			}
			break;
   9ec8a:	e01a      	b.n	9ecc2 <Cl_dprep_controller+0x7fa>
			case EVENT_DPREP_ALARM:
			Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
   9ec8c:	4b87      	ldr	r3, [pc, #540]	; (9eeac <Cl_dprep_controller+0x9e4>)
   9ec8e:	4798      	blx	r3
   9ec90:	4603      	mov	r3, r0
   9ec92:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			break;
   9ec96:	e014      	b.n	9ecc2 <Cl_dprep_controller+0x7fa>
			case EVENT_DPREP_START_PRIME:
			if(cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIMING)
   9ec98:	4b85      	ldr	r3, [pc, #532]	; (9eeb0 <Cl_dprep_controller+0x9e8>)
   9ec9a:	781b      	ldrb	r3, [r3, #0]
   9ec9c:	2b01      	cmp	r3, #1
   9ec9e:	d00e      	beq.n	9ecbe <Cl_dprep_controller+0x7f6>
			{
				Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PRIME1",6);
   9eca0:	2018      	movs	r0, #24
   9eca2:	4984      	ldr	r1, [pc, #528]	; (9eeb4 <Cl_dprep_controller+0x9ec>)
   9eca4:	2206      	movs	r2, #6
   9eca6:	4b84      	ldr	r3, [pc, #528]	; (9eeb8 <Cl_dprep_controller+0x9f0>)
   9eca8:	4798      	blx	r3
				cl_dprep_activate_prime_related_alarms();
   9ecaa:	4b84      	ldr	r3, [pc, #528]	; (9eebc <Cl_dprep_controller+0x9f4>)
   9ecac:	4798      	blx	r3
				cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_START,0);
   9ecae:	2001      	movs	r0, #1
   9ecb0:	2100      	movs	r1, #0
   9ecb2:	4b83      	ldr	r3, [pc, #524]	; (9eec0 <Cl_dprep_controller+0x9f8>)
   9ecb4:	4798      	blx	r3
				Cl_DprepAlarmTable[CL_DPREP_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   9ecb6:	4b83      	ldr	r3, [pc, #524]	; (9eec4 <Cl_dprep_controller+0x9fc>)
   9ecb8:	2200      	movs	r2, #0
   9ecba:	70da      	strb	r2, [r3, #3]
			}
			
			break;
   9ecbc:	e001      	b.n	9ecc2 <Cl_dprep_controller+0x7fa>
   9ecbe:	e000      	b.n	9ecc2 <Cl_dprep_controller+0x7fa>
			default:
			break;
   9ecc0:	bf00      	nop
		}
		break;
   9ecc2:	f001 b89a 	b.w	9fdfa <Cl_dprep_controller+0x1932>
		case CL_DPREP_STATE_DPREP_FILLING:
		switch (cl_dprepevent)
   9ecc6:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
   9ecca:	3b03      	subs	r3, #3
   9eccc:	2b20      	cmp	r3, #32
   9ecce:	f201 808d 	bhi.w	9fdec <Cl_dprep_controller+0x1924>
   9ecd2:	a201      	add	r2, pc, #4	; (adr r2, 9ecd8 <Cl_dprep_controller+0x810>)
   9ecd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9ecd8:	0009ee89 	.word	0x0009ee89
   9ecdc:	0009edfd 	.word	0x0009edfd
   9ece0:	0009fded 	.word	0x0009fded
   9ece4:	0009fded 	.word	0x0009fded
   9ece8:	0009fded 	.word	0x0009fded
   9ecec:	0009fded 	.word	0x0009fded
   9ecf0:	0009f0b7 	.word	0x0009f0b7
   9ecf4:	0009f103 	.word	0x0009f103
   9ecf8:	0009fded 	.word	0x0009fded
   9ecfc:	0009fded 	.word	0x0009fded
   9ed00:	0009fded 	.word	0x0009fded
   9ed04:	0009fded 	.word	0x0009fded
   9ed08:	0009fded 	.word	0x0009fded
   9ed0c:	0009fded 	.word	0x0009fded
   9ed10:	0009fded 	.word	0x0009fded
   9ed14:	0009fded 	.word	0x0009fded
   9ed18:	0009ef25 	.word	0x0009ef25
   9ed1c:	0009fded 	.word	0x0009fded
   9ed20:	0009f127 	.word	0x0009f127
   9ed24:	0009efd9 	.word	0x0009efd9
   9ed28:	0009ef43 	.word	0x0009ef43
   9ed2c:	0009fded 	.word	0x0009fded
   9ed30:	0009f0c3 	.word	0x0009f0c3
   9ed34:	0009f0cf 	.word	0x0009f0cf
   9ed38:	0009fded 	.word	0x0009fded
   9ed3c:	0009fded 	.word	0x0009fded
   9ed40:	0009fded 	.word	0x0009fded
   9ed44:	0009f0b7 	.word	0x0009f0b7
   9ed48:	0009edc9 	.word	0x0009edc9
   9ed4c:	0009fded 	.word	0x0009fded
   9ed50:	0009edbf 	.word	0x0009edbf
   9ed54:	0009ed5d 	.word	0x0009ed5d
   9ed58:	0009edb5 	.word	0x0009edb5
		{
			
			case EVENT_DPREP_HEP_PMP_START:
				if(Cl_ConsoleRxMsg.msgready == true)
   9ed5c:	4b5a      	ldr	r3, [pc, #360]	; (9eec8 <Cl_dprep_controller+0xa00>)
   9ed5e:	7e1b      	ldrb	r3, [r3, #24]
   9ed60:	2b00      	cmp	r3, #0
   9ed62:	d026      	beq.n	9edb2 <Cl_dprep_controller+0x8ea>
							
						{
							cl_Datastreamtype cl_temp  ;	
							cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[1];
   9ed64:	4b58      	ldr	r3, [pc, #352]	; (9eec8 <Cl_dprep_controller+0xa00>)
   9ed66:	795b      	ldrb	r3, [r3, #5]
   9ed68:	743b      	strb	r3, [r7, #16]
							cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[2];
   9ed6a:	4b57      	ldr	r3, [pc, #348]	; (9eec8 <Cl_dprep_controller+0xa00>)
   9ed6c:	799b      	ldrb	r3, [r3, #6]
   9ed6e:	747b      	strb	r3, [r7, #17]
							cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[3];
   9ed70:	4b55      	ldr	r3, [pc, #340]	; (9eec8 <Cl_dprep_controller+0xa00>)
   9ed72:	79db      	ldrb	r3, [r3, #7]
   9ed74:	74bb      	strb	r3, [r7, #18]
							cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[4];
   9ed76:	4b54      	ldr	r3, [pc, #336]	; (9eec8 <Cl_dprep_controller+0xa00>)
   9ed78:	7a1b      	ldrb	r3, [r3, #8]
   9ed7a:	74fb      	strb	r3, [r7, #19]
											
							if(Cl_ConsoleRxMsg.data.byte[0] == 1)
   9ed7c:	4b52      	ldr	r3, [pc, #328]	; (9eec8 <Cl_dprep_controller+0xa00>)
   9ed7e:	791b      	ldrb	r3, [r3, #4]
   9ed80:	2b01      	cmp	r3, #1
   9ed82:	d104      	bne.n	9ed8e <Cl_dprep_controller+0x8c6>
							{
								cl_hep_controller(CL_HEP_EVENT_GO_TO_LEFTEND,0);
   9ed84:	2001      	movs	r0, #1
   9ed86:	2100      	movs	r1, #0
   9ed88:	4b50      	ldr	r3, [pc, #320]	; (9eecc <Cl_dprep_controller+0xa04>)
   9ed8a:	4798      	blx	r3
   9ed8c:	e011      	b.n	9edb2 <Cl_dprep_controller+0x8ea>
											
							}
							else if(Cl_ConsoleRxMsg.data.byte[0] == 2)
   9ed8e:	4b4e      	ldr	r3, [pc, #312]	; (9eec8 <Cl_dprep_controller+0xa00>)
   9ed90:	791b      	ldrb	r3, [r3, #4]
   9ed92:	2b02      	cmp	r3, #2
   9ed94:	d104      	bne.n	9eda0 <Cl_dprep_controller+0x8d8>
							{
								cl_hep_controller(CL_HEP_EVENT_GO_TO_RIGHTEND,0);			
   9ed96:	2004      	movs	r0, #4
   9ed98:	2100      	movs	r1, #0
   9ed9a:	4b4c      	ldr	r3, [pc, #304]	; (9eecc <Cl_dprep_controller+0xa04>)
   9ed9c:	4798      	blx	r3
   9ed9e:	e008      	b.n	9edb2 <Cl_dprep_controller+0x8ea>
							}
							else if(Cl_ConsoleRxMsg.data.byte[0] == 0)
   9eda0:	4b49      	ldr	r3, [pc, #292]	; (9eec8 <Cl_dprep_controller+0xa00>)
   9eda2:	791b      	ldrb	r3, [r3, #4]
   9eda4:	2b00      	cmp	r3, #0
   9eda6:	d104      	bne.n	9edb2 <Cl_dprep_controller+0x8ea>
							{
								cl_hep_controller(CL_HEP_EVENT_START_NORMAL_DELIVERY,0);					
   9eda8:	200a      	movs	r0, #10
   9edaa:	2100      	movs	r1, #0
   9edac:	4b47      	ldr	r3, [pc, #284]	; (9eecc <Cl_dprep_controller+0xa04>)
   9edae:	4798      	blx	r3
							}
								
						}
				
			
			break;
   9edb0:	e1ba      	b.n	9f128 <Cl_dprep_controller+0xc60>
   9edb2:	e1b9      	b.n	9f128 <Cl_dprep_controller+0xc60>
			case EVENT_DPREP_HEP_PMP_STOP:
			cl_hep_controller(CL_HEP_EVENT_STOP_NORMAL_DELIVERY,0);
   9edb4:	200c      	movs	r0, #12
   9edb6:	2100      	movs	r1, #0
   9edb8:	4b44      	ldr	r3, [pc, #272]	; (9eecc <Cl_dprep_controller+0xa04>)
   9edba:	4798      	blx	r3
			break;
   9edbc:	e1b4      	b.n	9f128 <Cl_dprep_controller+0xc60>
			case EVENT_HEAPARIN_BOLUS:		
			cl_hep_controller(CL_HEP_EVENT_STARTBOLUS,0);
   9edbe:	2007      	movs	r0, #7
   9edc0:	2100      	movs	r1, #0
   9edc2:	4b42      	ldr	r3, [pc, #264]	; (9eecc <Cl_dprep_controller+0xa04>)
   9edc4:	4798      	blx	r3
			break;
   9edc6:	e1af      	b.n	9f128 <Cl_dprep_controller+0xc60>

			case EVENT_DPREP_START_RECIRC:
						if((cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIMING) || (cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIME_RCIRC_STARTED) || (cl_dprep_prime_state !=  CL_DPREP_PRIME_STATE_DIALYSER_PRIMING))
   9edc8:	4b39      	ldr	r3, [pc, #228]	; (9eeb0 <Cl_dprep_controller+0x9e8>)
   9edca:	781b      	ldrb	r3, [r3, #0]
   9edcc:	2b01      	cmp	r3, #1
   9edce:	d107      	bne.n	9ede0 <Cl_dprep_controller+0x918>
   9edd0:	4b37      	ldr	r3, [pc, #220]	; (9eeb0 <Cl_dprep_controller+0x9e8>)
   9edd2:	781b      	ldrb	r3, [r3, #0]
   9edd4:	2b05      	cmp	r3, #5
   9edd6:	d103      	bne.n	9ede0 <Cl_dprep_controller+0x918>
   9edd8:	4b35      	ldr	r3, [pc, #212]	; (9eeb0 <Cl_dprep_controller+0x9e8>)
   9edda:	781b      	ldrb	r3, [r3, #0]
   9eddc:	2b09      	cmp	r3, #9
   9edde:	d00c      	beq.n	9edfa <Cl_dprep_controller+0x932>
						{
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC",6);
   9ede0:	2018      	movs	r0, #24
   9ede2:	493b      	ldr	r1, [pc, #236]	; (9eed0 <Cl_dprep_controller+0xa08>)
   9ede4:	2206      	movs	r2, #6
   9ede6:	4b34      	ldr	r3, [pc, #208]	; (9eeb8 <Cl_dprep_controller+0x9f0>)
   9ede8:	4798      	blx	r3
							cl_dprep_primecontroller(CL_DPREP_PRIME_RCIRC_START,0);
   9edea:	2005      	movs	r0, #5
   9edec:	2100      	movs	r1, #0
   9edee:	4b34      	ldr	r3, [pc, #208]	; (9eec0 <Cl_dprep_controller+0x9f8>)
   9edf0:	4798      	blx	r3
							Cl_DprepAlarmTable[CL_DPREP_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   9edf2:	4b34      	ldr	r3, [pc, #208]	; (9eec4 <Cl_dprep_controller+0x9fc>)
   9edf4:	2200      	movs	r2, #0
   9edf6:	70da      	strb	r2, [r3, #3]
						}
			break;
   9edf8:	e196      	b.n	9f128 <Cl_dprep_controller+0xc60>
   9edfa:	e195      	b.n	9f128 <Cl_dprep_controller+0xc60>
			case EVENT_DPREP_COMMAND_GET_DATA:

				if(Cl_ConsoleRxMsg.msgready == true)
   9edfc:	4b32      	ldr	r3, [pc, #200]	; (9eec8 <Cl_dprep_controller+0xa00>)
   9edfe:	7e1b      	ldrb	r3, [r3, #24]
   9ee00:	2b00      	cmp	r3, #0
   9ee02:	d040      	beq.n	9ee86 <Cl_dprep_controller+0x9be>
				{
					switch(Cl_ConsoleRxMsg.data.byte[0])
   9ee04:	4b30      	ldr	r3, [pc, #192]	; (9eec8 <Cl_dprep_controller+0xa00>)
   9ee06:	791b      	ldrb	r3, [r3, #4]
   9ee08:	2b02      	cmp	r3, #2
   9ee0a:	d002      	beq.n	9ee12 <Cl_dprep_controller+0x94a>
   9ee0c:	2b04      	cmp	r3, #4
   9ee0e:	d01d      	beq.n	9ee4c <Cl_dprep_controller+0x984>
						dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
						Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
						Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
						break;
						default:
						break;
   9ee10:	e039      	b.n	9ee86 <Cl_dprep_controller+0x9be>
				if(Cl_ConsoleRxMsg.msgready == true)
				{
					switch(Cl_ConsoleRxMsg.data.byte[0])
					{
						case	CON_RX_PARAM_DATA_PRIME_STATUS:
						command = CON_TX_COMMAND_SYSDATA;
   9ee12:	2316      	movs	r3, #22
   9ee14:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
						dataarray[0] = CON_TX_PARAM_DATA_PRIME_STATUS;
   9ee18:	2302      	movs	r3, #2
   9ee1a:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
						Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_PRIME_STATUS, &dataarray[1]);
   9ee1e:	f107 0370 	add.w	r3, r7, #112	; 0x70
   9ee22:	3301      	adds	r3, #1
   9ee24:	2002      	movs	r0, #2
   9ee26:	4619      	mov	r1, r3
   9ee28:	4b2a      	ldr	r3, [pc, #168]	; (9eed4 <Cl_dprep_controller+0xa0c>)
   9ee2a:	4798      	blx	r3
   9ee2c:	4603      	mov	r3, r0
   9ee2e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   9ee32:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
   9ee36:	f107 0370 	add.w	r3, r7, #112	; 0x70
   9ee3a:	4610      	mov	r0, r2
   9ee3c:	4619      	mov	r1, r3
   9ee3e:	2202      	movs	r2, #2
   9ee40:	4b1d      	ldr	r3, [pc, #116]	; (9eeb8 <Cl_dprep_controller+0x9f0>)
   9ee42:	4798      	blx	r3
   9ee44:	4603      	mov	r3, r0
   9ee46:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						break;
   9ee4a:	e01c      	b.n	9ee86 <Cl_dprep_controller+0x9be>
						case	CON_RX_PARAM_DATA_DIALYSIS_STATUS:
						command = CON_TX_COMMAND_SYSDATA;
   9ee4c:	2316      	movs	r3, #22
   9ee4e:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
						dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
   9ee52:	2304      	movs	r3, #4
   9ee54:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
						Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
   9ee58:	f107 0370 	add.w	r3, r7, #112	; 0x70
   9ee5c:	3301      	adds	r3, #1
   9ee5e:	2004      	movs	r0, #4
   9ee60:	4619      	mov	r1, r3
   9ee62:	4b1c      	ldr	r3, [pc, #112]	; (9eed4 <Cl_dprep_controller+0xa0c>)
   9ee64:	4798      	blx	r3
   9ee66:	4603      	mov	r3, r0
   9ee68:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   9ee6c:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
   9ee70:	f107 0370 	add.w	r3, r7, #112	; 0x70
   9ee74:	4610      	mov	r0, r2
   9ee76:	4619      	mov	r1, r3
   9ee78:	2202      	movs	r2, #2
   9ee7a:	4b0f      	ldr	r3, [pc, #60]	; (9eeb8 <Cl_dprep_controller+0x9f0>)
   9ee7c:	4798      	blx	r3
   9ee7e:	4603      	mov	r3, r0
   9ee80:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						break;
   9ee84:	bf00      	nop
						default:
						break;
					}
				}
			break;
   9ee86:	e14f      	b.n	9f128 <Cl_dprep_controller+0xc60>
			case EVENT_DPREP_COMMAND_SET_DATA:
					 if(Cl_ConsoleRxMsg.msgready == true)
   9ee88:	4b0f      	ldr	r3, [pc, #60]	; (9eec8 <Cl_dprep_controller+0xa00>)
   9ee8a:	7e1b      	ldrb	r3, [r3, #24]
   9ee8c:	2b00      	cmp	r3, #0
   9ee8e:	d048      	beq.n	9ef22 <Cl_dprep_controller+0xa5a>
					 {
						 
						 
						 Cl_ConsoleRxDataType dataId;
						 Cl_Uint8Type count;
						 dataId = Cl_ConsoleRxMsg.data.byte[0];
   9ee90:	4b0d      	ldr	r3, [pc, #52]	; (9eec8 <Cl_dprep_controller+0xa00>)
   9ee92:	791b      	ldrb	r3, [r3, #4]
   9ee94:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
						 for (count =0; count < Cl_ConsoleRxMsg.datasize;count++)
   9ee98:	2300      	movs	r3, #0
   9ee9a:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
   9ee9e:	e02d      	b.n	9eefc <Cl_dprep_controller+0xa34>
   9eea0:	000a68a9 	.word	0x000a68a9
   9eea4:	20072104 	.word	0x20072104
   9eea8:	000a1c69 	.word	0x000a1c69
   9eeac:	000a0149 	.word	0x000a0149
   9eeb0:	20071994 	.word	0x20071994
   9eeb4:	000a8d34 	.word	0x000a8d34
   9eeb8:	0009ba51 	.word	0x0009ba51
   9eebc:	00088fa9 	.word	0x00088fa9
   9eec0:	0008850d 	.word	0x0008850d
   9eec4:	20070bdc 	.word	0x20070bdc
   9eec8:	200723f0 	.word	0x200723f0
   9eecc:	00093a0d 	.word	0x00093a0d
   9eed0:	000a8d2c 	.word	0x000a8d2c
   9eed4:	0009a545 	.word	0x0009a545
						 {
							 cl_PrepData.bytearray[count] = Cl_ConsoleRxMsg.data.byte[count+1];
   9eed8:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
   9eedc:	f897 209e 	ldrb.w	r2, [r7, #158]	; 0x9e
   9eee0:	3201      	adds	r2, #1
   9eee2:	49a7      	ldr	r1, [pc, #668]	; (9f180 <Cl_dprep_controller+0xcb8>)
   9eee4:	440a      	add	r2, r1
   9eee6:	7912      	ldrb	r2, [r2, #4]
   9eee8:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
   9eeec:	440b      	add	r3, r1
   9eeee:	f803 2c68 	strb.w	r2, [r3, #-104]
						 
						 
						 Cl_ConsoleRxDataType dataId;
						 Cl_Uint8Type count;
						 dataId = Cl_ConsoleRxMsg.data.byte[0];
						 for (count =0; count < Cl_ConsoleRxMsg.datasize;count++)
   9eef2:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
   9eef6:	3301      	adds	r3, #1
   9eef8:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
   9eefc:	4ba0      	ldr	r3, [pc, #640]	; (9f180 <Cl_dprep_controller+0xcb8>)
   9eefe:	78db      	ldrb	r3, [r3, #3]
   9ef00:	f897 209e 	ldrb.w	r2, [r7, #158]	; 0x9e
   9ef04:	429a      	cmp	r2, r3
   9ef06:	d3e7      	bcc.n	9eed8 <Cl_dprep_controller+0xa10>
						 {
							 cl_PrepData.bytearray[count] = Cl_ConsoleRxMsg.data.byte[count+1];
							 
						 }
						 Cl_Dprep_setdata(dataId, cl_PrepData,count);
   9ef08:	f897 3093 	ldrb.w	r3, [r7, #147]	; 0x93
   9ef0c:	f897 409e 	ldrb.w	r4, [r7, #158]	; 0x9e
   9ef10:	4618      	mov	r0, r3
   9ef12:	f107 0338 	add.w	r3, r7, #56	; 0x38
   9ef16:	e893 0006 	ldmia.w	r3, {r1, r2}
   9ef1a:	4623      	mov	r3, r4
   9ef1c:	4c99      	ldr	r4, [pc, #612]	; (9f184 <Cl_dprep_controller+0xcbc>)
   9ef1e:	47a0      	blx	r4
						 
						 
						 
					 }
	
			break;
   9ef20:	e102      	b.n	9f128 <Cl_dprep_controller+0xc60>
   9ef22:	e101      	b.n	9f128 <Cl_dprep_controller+0xc60>
			case EVENT_DPREP_TICK_50MS:
			
			cl_50ms_timer++;
   9ef24:	4b98      	ldr	r3, [pc, #608]	; (9f188 <Cl_dprep_controller+0xcc0>)
   9ef26:	881b      	ldrh	r3, [r3, #0]
   9ef28:	3301      	adds	r3, #1
   9ef2a:	b29a      	uxth	r2, r3
   9ef2c:	4b96      	ldr	r3, [pc, #600]	; (9f188 <Cl_dprep_controller+0xcc0>)
   9ef2e:	801a      	strh	r2, [r3, #0]
			if(cl_50ms_timer == 2)
   9ef30:	4b95      	ldr	r3, [pc, #596]	; (9f188 <Cl_dprep_controller+0xcc0>)
   9ef32:	881b      	ldrh	r3, [r3, #0]
   9ef34:	2b02      	cmp	r3, #2
   9ef36:	d103      	bne.n	9ef40 <Cl_dprep_controller+0xa78>
			{
				cl_50ms_timer =0;
   9ef38:	4b93      	ldr	r3, [pc, #588]	; (9f188 <Cl_dprep_controller+0xcc0>)
   9ef3a:	2200      	movs	r2, #0
   9ef3c:	801a      	strh	r2, [r3, #0]
			//	sv_cntrl_deactivate_valve(VALVE_ID19);
			}
			
			break;
   9ef3e:	e0f3      	b.n	9f128 <Cl_dprep_controller+0xc60>
   9ef40:	e0f2      	b.n	9f128 <Cl_dprep_controller+0xc60>
			case EVENT_DPREP_TICK_500MS:
				//UpdateHeaterControls();
	
			break;
			case EVENT_DPREP_TICK_MINUTE:
				Cl_Dprep_ResetAlertsforReassertion();
   9ef42:	4b92      	ldr	r3, [pc, #584]	; (9f18c <Cl_dprep_controller+0xcc4>)
   9ef44:	4798      	blx	r3
				Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&temp_temp3);
   9ef46:	f107 0332 	add.w	r3, r7, #50	; 0x32
   9ef4a:	2014      	movs	r0, #20
   9ef4c:	4619      	mov	r1, r3
   9ef4e:	4b90      	ldr	r3, [pc, #576]	; (9f190 <Cl_dprep_controller+0xcc8>)
   9ef50:	4798      	blx	r3
// 				uint16_t cal_data  = (402 *100* sensordata)/(2*32768);			// resistance of PT100
// 				res_temp_lookuptable(cal_data);									// temperature from look up table in 4 digits
// 				temp_temp3 = res_temp_value/100;									// Temp3 value in XX.yy format
// //				temp_temp3 = temp_temp3 - 3.1 + 1.4;										// sensor offset
// 				temp_temp3 = temp_temp3- 0.4;										// sensor offset
				temp3_cel = (float)temp_temp3/100;
   9ef52:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
   9ef54:	4b8f      	ldr	r3, [pc, #572]	; (9f194 <Cl_dprep_controller+0xccc>)
   9ef56:	4610      	mov	r0, r2
   9ef58:	4798      	blx	r3
   9ef5a:	4602      	mov	r2, r0
   9ef5c:	4b8e      	ldr	r3, [pc, #568]	; (9f198 <Cl_dprep_controller+0xcd0>)
   9ef5e:	4610      	mov	r0, r2
   9ef60:	498e      	ldr	r1, [pc, #568]	; (9f19c <Cl_dprep_controller+0xcd4>)
   9ef62:	4798      	blx	r3
   9ef64:	4603      	mov	r3, r0
   9ef66:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
// 						temp3_cel = temp_temp3;
// 					}
// 					//calibration_tmp(temp_temp3,TS3);
// 					//temp3_cel = temprature_final_value_3;
// 					//temp3_cel = 0.0000116 * temp_temp3 *temp_temp3 + 0.0035 *temp_temp3 + 11.157;
				if((temp3_cel) > 36.8 && (temp3_cel < 37.2))
   9ef6a:	4b8d      	ldr	r3, [pc, #564]	; (9f1a0 <Cl_dprep_controller+0xcd8>)
   9ef6c:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
   9ef70:	4798      	blx	r3
   9ef72:	4602      	mov	r2, r0
   9ef74:	460b      	mov	r3, r1
   9ef76:	4c8b      	ldr	r4, [pc, #556]	; (9f1a4 <Cl_dprep_controller+0xcdc>)
   9ef78:	4610      	mov	r0, r2
   9ef7a:	4619      	mov	r1, r3
   9ef7c:	a37c      	add	r3, pc, #496	; (adr r3, 9f170 <Cl_dprep_controller+0xca8>)
   9ef7e:	e9d3 2300 	ldrd	r2, r3, [r3]
   9ef82:	47a0      	blx	r4
   9ef84:	4603      	mov	r3, r0
   9ef86:	2b00      	cmp	r3, #0
   9ef88:	d01e      	beq.n	9efc8 <Cl_dprep_controller+0xb00>
   9ef8a:	4b85      	ldr	r3, [pc, #532]	; (9f1a0 <Cl_dprep_controller+0xcd8>)
   9ef8c:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
   9ef90:	4798      	blx	r3
   9ef92:	4602      	mov	r2, r0
   9ef94:	460b      	mov	r3, r1
   9ef96:	4c84      	ldr	r4, [pc, #528]	; (9f1a8 <Cl_dprep_controller+0xce0>)
   9ef98:	4610      	mov	r0, r2
   9ef9a:	4619      	mov	r1, r3
   9ef9c:	a376      	add	r3, pc, #472	; (adr r3, 9f178 <Cl_dprep_controller+0xcb0>)
   9ef9e:	e9d3 2300 	ldrd	r2, r3, [r3]
   9efa2:	47a0      	blx	r4
   9efa4:	4603      	mov	r3, r0
   9efa6:	2b00      	cmp	r3, #0
   9efa8:	d00e      	beq.n	9efc8 <Cl_dprep_controller+0xb00>
				{
					if( cl_temp3_37stable == true) 
   9efaa:	4b80      	ldr	r3, [pc, #512]	; (9f1ac <Cl_dprep_controller+0xce4>)
   9efac:	781b      	ldrb	r3, [r3, #0]
   9efae:	2b00      	cmp	r3, #0
   9efb0:	d003      	beq.n	9efba <Cl_dprep_controller+0xaf2>
					{
					 cl_temp3_stable_confirm = true;	
   9efb2:	4b7f      	ldr	r3, [pc, #508]	; (9f1b0 <Cl_dprep_controller+0xce8>)
   9efb4:	2201      	movs	r2, #1
   9efb6:	701a      	strb	r2, [r3, #0]
// 					//calibration_tmp(temp_temp3,TS3);
// 					//temp3_cel = temprature_final_value_3;
// 					//temp3_cel = 0.0000116 * temp_temp3 *temp_temp3 + 0.0035 *temp_temp3 + 11.157;
				if((temp3_cel) > 36.8 && (temp3_cel < 37.2))
				{
					if( cl_temp3_37stable == true) 
   9efb8:	e00d      	b.n	9efd6 <Cl_dprep_controller+0xb0e>
					{
					 cl_temp3_stable_confirm = true;	
					}
					else
					{
					 cl_temp3_37stable = true;
   9efba:	4b7c      	ldr	r3, [pc, #496]	; (9f1ac <Cl_dprep_controller+0xce4>)
   9efbc:	2201      	movs	r2, #1
   9efbe:	701a      	strb	r2, [r3, #0]
					 cl_temp3_stable_confirm = false;
   9efc0:	4b7b      	ldr	r3, [pc, #492]	; (9f1b0 <Cl_dprep_controller+0xce8>)
   9efc2:	2200      	movs	r2, #0
   9efc4:	701a      	strb	r2, [r3, #0]
// 					//calibration_tmp(temp_temp3,TS3);
// 					//temp3_cel = temprature_final_value_3;
// 					//temp3_cel = 0.0000116 * temp_temp3 *temp_temp3 + 0.0035 *temp_temp3 + 11.157;
				if((temp3_cel) > 36.8 && (temp3_cel < 37.2))
				{
					if( cl_temp3_37stable == true) 
   9efc6:	e006      	b.n	9efd6 <Cl_dprep_controller+0xb0e>
					 cl_temp3_stable_confirm = false;
					}
				}
				else
				{
					cl_temp3_37stable = false;
   9efc8:	4b78      	ldr	r3, [pc, #480]	; (9f1ac <Cl_dprep_controller+0xce4>)
   9efca:	2200      	movs	r2, #0
   9efcc:	701a      	strb	r2, [r3, #0]
					cl_temp3_stable_confirm = false;
   9efce:	4b78      	ldr	r3, [pc, #480]	; (9f1b0 <Cl_dprep_controller+0xce8>)
   9efd0:	2200      	movs	r2, #0
   9efd2:	701a      	strb	r2, [r3, #0]
					
				}
			


			break;
   9efd4:	e0a8      	b.n	9f128 <Cl_dprep_controller+0xc60>
   9efd6:	e0a7      	b.n	9f128 <Cl_dprep_controller+0xc60>
										}
										
										temp3_cel_backup = temp3_cel;
					}
					#endif
					Cl_Dprep_filling_secondscounter++;
   9efd8:	4b76      	ldr	r3, [pc, #472]	; (9f1b4 <Cl_dprep_controller+0xcec>)
   9efda:	881b      	ldrh	r3, [r3, #0]
   9efdc:	b29b      	uxth	r3, r3
   9efde:	b29b      	uxth	r3, r3
   9efe0:	3301      	adds	r3, #1
   9efe2:	b29b      	uxth	r3, r3
   9efe4:	b29a      	uxth	r2, r3
   9efe6:	4b73      	ldr	r3, [pc, #460]	; (9f1b4 <Cl_dprep_controller+0xcec>)
   9efe8:	801a      	strh	r2, [r3, #0]
					if(Cl_Dprep_filling_secondscounter == 60)
   9efea:	4b72      	ldr	r3, [pc, #456]	; (9f1b4 <Cl_dprep_controller+0xcec>)
   9efec:	881b      	ldrh	r3, [r3, #0]
   9efee:	b21b      	sxth	r3, r3
   9eff0:	2b3c      	cmp	r3, #60	; 0x3c
   9eff2:	d101      	bne.n	9eff8 <Cl_dprep_controller+0xb30>
					{
						UpdateDprepFillingMinuteTick();
   9eff4:	4b70      	ldr	r3, [pc, #448]	; (9f1b8 <Cl_dprep_controller+0xcf0>)
   9eff6:	4798      	blx	r3
					}
					
					if(Cl_Dprep_filling_secondscounter == 30){ // activate flow alarms only after 30 seconds into rinse
   9eff8:	4b6e      	ldr	r3, [pc, #440]	; (9f1b4 <Cl_dprep_controller+0xcec>)
   9effa:	881b      	ldrh	r3, [r3, #0]
   9effc:	b21b      	sxth	r3, r3
   9effe:	2b1e      	cmp	r3, #30
   9f000:	d114      	bne.n	9f02c <Cl_dprep_controller+0xb64>
						
						
						Cl_dprepretcode =  Cl_AlarmActivateAlarms(FLOW_NO_FLOW,true );
   9f002:	200c      	movs	r0, #12
   9f004:	2101      	movs	r1, #1
   9f006:	4b6d      	ldr	r3, [pc, #436]	; (9f1bc <Cl_dprep_controller+0xcf4>)
   9f008:	4798      	blx	r3
   9f00a:	4603      	mov	r3, r0
   9f00c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						Cl_dprepretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,true );
   9f010:	200d      	movs	r0, #13
   9f012:	2101      	movs	r1, #1
   9f014:	4b69      	ldr	r3, [pc, #420]	; (9f1bc <Cl_dprep_controller+0xcf4>)
   9f016:	4798      	blx	r3
   9f018:	4603      	mov	r3, r0
   9f01a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						Cl_dprepretcode =  Cl_AlarmActivateAlarms(FLOW_HIGH_FLOWRATE,true );
   9f01e:	200e      	movs	r0, #14
   9f020:	2101      	movs	r1, #1
   9f022:	4b66      	ldr	r3, [pc, #408]	; (9f1bc <Cl_dprep_controller+0xcf4>)
   9f024:	4798      	blx	r3
   9f026:	4603      	mov	r3, r0
   9f028:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						
						
					}
					
					
					Cl_Dprep_SendPrepStateData(DIALYSIS_PREP_DATA);
   9f02c:	2004      	movs	r0, #4
   9f02e:	4b64      	ldr	r3, [pc, #400]	; (9f1c0 <Cl_dprep_controller+0xcf8>)
   9f030:	4798      	blx	r3
				//	Cl_Dprep_ResetAlertsforReassertion();
				//	Cl_dprepretcode = Cl_Dprep_ProcessAlarms();

					if(Cl_Dprep_CheckforfillingCompletion() == CL_OK )
   9f032:	4b64      	ldr	r3, [pc, #400]	; (9f1c4 <Cl_dprep_controller+0xcfc>)
   9f034:	4798      	blx	r3
   9f036:	4603      	mov	r3, r0
   9f038:	2b00      	cmp	r3, #0
   9f03a:	d13b      	bne.n	9f0b4 <Cl_dprep_controller+0xbec>
					{
						sv_cntrl_setgreenalarm();
   9f03c:	4b62      	ldr	r3, [pc, #392]	; (9f1c8 <Cl_dprep_controller+0xd00>)
   9f03e:	4798      	blx	r3
						Cl_Uint32Type temp = Treatdata[ID_dflow];
   9f040:	4b62      	ldr	r3, [pc, #392]	; (9f1cc <Cl_dprep_controller+0xd04>)
   9f042:	695b      	ldr	r3, [r3, #20]
   9f044:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
						Cl_Uint16Type potvalue = 0;
   9f048:	2300      	movs	r3, #0
   9f04a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
						//if(cl_dprep_prime_state == CL_DPREP_PRIME_STATE_PRIME_COMPLETED)
						if(cl_dprep_prime_state == CL_DPREP_PRIME_STATE_PRIME_RCIRC_COMPLETED)
   9f04e:	4b60      	ldr	r3, [pc, #384]	; (9f1d0 <Cl_dprep_controller+0xd08>)
   9f050:	781b      	ldrb	r3, [r3, #0]
   9f052:	2b08      	cmp	r3, #8
   9f054:	d108      	bne.n	9f068 <Cl_dprep_controller+0xba0>
// 								break;
// 								
// 								default:
// 								break;
// 							}
							 sv_cntrl_enable_bypass();
   9f056:	4b5f      	ldr	r3, [pc, #380]	; (9f1d4 <Cl_dprep_controller+0xd0c>)
   9f058:	4798      	blx	r3
							 cl_dprepbypassstate = CL_DPREP_BYPASS_ON;
   9f05a:	4b5f      	ldr	r3, [pc, #380]	; (9f1d8 <Cl_dprep_controller+0xd10>)
   9f05c:	2201      	movs	r2, #1
   9f05e:	701a      	strb	r2, [r3, #0]
							 
							cl_dprepstate = CL_DPREP_STATE_POST_PRIME_STANDBY;
   9f060:	4b5e      	ldr	r3, [pc, #376]	; (9f1dc <Cl_dprep_controller+0xd14>)
   9f062:	2205      	movs	r2, #5
   9f064:	701a      	strb	r2, [r3, #0]
   9f066:	e007      	b.n	9f078 <Cl_dprep_controller+0xbb0>
// 								break;
// 								
// 								default:
// 								break;
// 							}
							sv_cntrl_enable_bypass();
   9f068:	4b5a      	ldr	r3, [pc, #360]	; (9f1d4 <Cl_dprep_controller+0xd0c>)
   9f06a:	4798      	blx	r3
							cl_dprepbypassstate = CL_DPREP_BYPASS_ON;
   9f06c:	4b5a      	ldr	r3, [pc, #360]	; (9f1d8 <Cl_dprep_controller+0xd10>)
   9f06e:	2201      	movs	r2, #1
   9f070:	701a      	strb	r2, [r3, #0]

							cl_dprepstate = CL_DPREP_STATE_DPREP_FILLING_DONE;
   9f072:	4b5a      	ldr	r3, [pc, #360]	; (9f1dc <Cl_dprep_controller+0xd14>)
   9f074:	2203      	movs	r2, #3
   9f076:	701a      	strb	r2, [r3, #0]
						
						//	Cl_rinseretcode = (Cl_ReturnCodeType)sv_setflowpath(Default path ?);//set appropirate flow path configuration
					//	Cl_dprepretcode = sv_cntrl_poweroffheater();							
					//	Cl_dprepretcode =  sv_cntrl_deactivatepump(DCMOTOR1);
					//	Cl_dprepretcode =  sv_cntrl_deactivatepump(DCMOTOR2);
						command = CON_TX_COMMAND_DIALYSATE_FILLING_COMPLETED;
   9f078:	231f      	movs	r3, #31
   9f07a:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
						data = (Cl_Uint8Type)COMMAND_RESULT_SUCCESS;
   9f07e:	2301      	movs	r3, #1
   9f080:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						Cl_Dprep_filling_secondscounter = 0;
   9f084:	4b4b      	ldr	r3, [pc, #300]	; (9f1b4 <Cl_dprep_controller+0xcec>)
   9f086:	2200      	movs	r2, #0
   9f088:	801a      	strh	r2, [r3, #0]
						Cl_Dprep_filling_Minutescounter = 0;
   9f08a:	4b55      	ldr	r3, [pc, #340]	; (9f1e0 <Cl_dprep_controller+0xd18>)
   9f08c:	2200      	movs	r2, #0
   9f08e:	801a      	strh	r2, [r3, #0]
						Cl_Dprep_filling_TotalMinutescounter = 0;
   9f090:	4b54      	ldr	r3, [pc, #336]	; (9f1e4 <Cl_dprep_controller+0xd1c>)
   9f092:	2200      	movs	r2, #0
   9f094:	801a      	strh	r2, [r3, #0]

						Cl_deactivate_prep_alarms();
   9f096:	4b54      	ldr	r3, [pc, #336]	; (9f1e8 <Cl_dprep_controller+0xd20>)
   9f098:	4798      	blx	r3

					//	Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(COND_STATUS_LOW,BELOW,13.0,0,0);
						// Appy treatment cond alarm and temerature alarm  limits here
						// Cl_dprepretcode =  Cl_AlarmActivateAlarms(COND_STATUS_LOW,true );
							
						Cl_dprepretcode = Cl_SendDatatoconsole(command,&data,1);
   9f09a:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
   9f09e:	f107 0377 	add.w	r3, r7, #119	; 0x77
   9f0a2:	4610      	mov	r0, r2
   9f0a4:	4619      	mov	r1, r3
   9f0a6:	2201      	movs	r2, #1
   9f0a8:	4b50      	ldr	r3, [pc, #320]	; (9f1ec <Cl_dprep_controller+0xd24>)
   9f0aa:	4798      	blx	r3
   9f0ac:	4603      	mov	r3, r0
   9f0ae:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
					}
					
			break;
   9f0b2:	e039      	b.n	9f128 <Cl_dprep_controller+0xc60>
   9f0b4:	e038      	b.n	9f128 <Cl_dprep_controller+0xc60>
			case EVENT_DPREP_MIXING_PREP_STOP:
			case EVENT_DPREP_STOP_DIALYSATE_FILL:
					Cl_dprep_StopMixing();
   9f0b6:	4b4e      	ldr	r3, [pc, #312]	; (9f1f0 <Cl_dprep_controller+0xd28>)
   9f0b8:	4798      	blx	r3
					cl_dprepstate = CL_DPREP_STATE_STOPPED;
   9f0ba:	4b48      	ldr	r3, [pc, #288]	; (9f1dc <Cl_dprep_controller+0xd14>)
   9f0bc:	220b      	movs	r2, #11
   9f0be:	701a      	strb	r2, [r3, #0]
			break;
   9f0c0:	e032      	b.n	9f128 <Cl_dprep_controller+0xc60>
			break;
			case EVENT_DPREP_ALARM:
					Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
   9f0c2:	4b4c      	ldr	r3, [pc, #304]	; (9f1f4 <Cl_dprep_controller+0xd2c>)
   9f0c4:	4798      	blx	r3
   9f0c6:	4603      	mov	r3, r0
   9f0c8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			break;
   9f0cc:	e02c      	b.n	9f128 <Cl_dprep_controller+0xc60>
			case EVENT_DPREP_ALERT:
					Cl_Alarm_GetAlarmStatus(FPCURRENTSTATUS,&alarmstatus1);
   9f0ce:	f107 0337 	add.w	r3, r7, #55	; 0x37
   9f0d2:	203c      	movs	r0, #60	; 0x3c
   9f0d4:	4619      	mov	r1, r3
   9f0d6:	4b48      	ldr	r3, [pc, #288]	; (9f1f8 <Cl_dprep_controller+0xd30>)
   9f0d8:	4798      	blx	r3
					if(alarmstatus1)
   9f0da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
   9f0de:	2b00      	cmp	r3, #0
   9f0e0:	d002      	beq.n	9f0e8 <Cl_dprep_controller+0xc20>
					{
						//Cl_dprepretcode = Cl_bc_controller(BC_EVENT_CS);
					//	sv_cntrl_activate_valve(VALVE_ID19);
						cl_50ms_timer  = 1;
   9f0e2:	4b29      	ldr	r3, [pc, #164]	; (9f188 <Cl_dprep_controller+0xcc0>)
   9f0e4:	2201      	movs	r2, #1
   9f0e6:	801a      	strh	r2, [r3, #0]
					
					}
					Cl_Alarm_GetAlarmStatus(TEMP2_HIGH_THRESHOLD,&alarmstatus3);
   9f0e8:	f107 0336 	add.w	r3, r7, #54	; 0x36
   9f0ec:	2011      	movs	r0, #17
   9f0ee:	4619      	mov	r1, r3
   9f0f0:	4b41      	ldr	r3, [pc, #260]	; (9f1f8 <Cl_dprep_controller+0xd30>)
   9f0f2:	4798      	blx	r3
					if(alarmstatus3)
					{
						//	UpdateHeaterControls();
					}
			
					Cl_Alarm_GetAlarmStatus(FLOW_NO_FLOW,&flowstatus);
   9f0f4:	f107 0335 	add.w	r3, r7, #53	; 0x35
   9f0f8:	200c      	movs	r0, #12
   9f0fa:	4619      	mov	r1, r3
   9f0fc:	4b3e      	ldr	r3, [pc, #248]	; (9f1f8 <Cl_dprep_controller+0xd30>)
   9f0fe:	4798      	blx	r3
					//	if(flowstatus)
					//	{
					//		Cl_rinseretcode = sv_cntrl_poweroffheater();
					//		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"FLOW_OFF",8);
					//	}
			break;
   9f100:	e012      	b.n	9f128 <Cl_dprep_controller+0xc60>
			case EVENT_DPREP_START_PRIME:
			if(cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIMING)
   9f102:	4b33      	ldr	r3, [pc, #204]	; (9f1d0 <Cl_dprep_controller+0xd08>)
   9f104:	781b      	ldrb	r3, [r3, #0]
   9f106:	2b01      	cmp	r3, #1
   9f108:	d00c      	beq.n	9f124 <Cl_dprep_controller+0xc5c>
			{
				Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PRIME1",6);
   9f10a:	2018      	movs	r0, #24
   9f10c:	493b      	ldr	r1, [pc, #236]	; (9f1fc <Cl_dprep_controller+0xd34>)
   9f10e:	2206      	movs	r2, #6
   9f110:	4b36      	ldr	r3, [pc, #216]	; (9f1ec <Cl_dprep_controller+0xd24>)
   9f112:	4798      	blx	r3
				cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_START,0);
   9f114:	2001      	movs	r0, #1
   9f116:	2100      	movs	r1, #0
   9f118:	4b39      	ldr	r3, [pc, #228]	; (9f200 <Cl_dprep_controller+0xd38>)
   9f11a:	4798      	blx	r3
				Cl_DprepAlarmTable[CL_DPREP_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   9f11c:	4b39      	ldr	r3, [pc, #228]	; (9f204 <Cl_dprep_controller+0xd3c>)
   9f11e:	2200      	movs	r2, #0
   9f120:	70da      	strb	r2, [r3, #3]
			}
			
			break;
   9f122:	e001      	b.n	9f128 <Cl_dprep_controller+0xc60>
   9f124:	e000      	b.n	9f128 <Cl_dprep_controller+0xc60>
			
			break;
			case EVENT_DPREP_TICK_500MS:
				//UpdateHeaterControls();
	
			break;
   9f126:	bf00      	nop
			}
			
			break;

		}
		break;
   9f128:	f000 be60 	b.w	9fdec <Cl_dprep_controller+0x1924>
		case CL_DPREP_STATE_DREP_PRIME_ALARM_BYPASS:
					switch (cl_dprepevent)
   9f12c:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
   9f130:	2b17      	cmp	r3, #23
   9f132:	d00c      	beq.n	9f14e <Cl_dprep_controller+0xc86>
   9f134:	2b19      	cmp	r3, #25
   9f136:	d010      	beq.n	9f15a <Cl_dprep_controller+0xc92>
   9f138:	2b0d      	cmp	r3, #13
   9f13a:	d000      	beq.n	9f13e <Cl_dprep_controller+0xc76>
						Cl_dprepretcode = Cl_Dprep_ResetAlertsforReassertion();
						break;
						case EVENT_DPREP_ALARM:
						Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
						break;
						default:break;
   9f13c:	e013      	b.n	9f166 <Cl_dprep_controller+0xc9e>
					{
						case EVENT_DPREP_START_DIALISER_PRIME:
					
							//	if(cl_dprepbypassstate == CL_DPREP_BYPASS_ON)
								
								sv_cntrl_disable_loopback();
   9f13e:	4b32      	ldr	r3, [pc, #200]	; (9f208 <Cl_dprep_controller+0xd40>)
   9f140:	4798      	blx	r3
								sv_cntrl_disable_bypass();
   9f142:	4b32      	ldr	r3, [pc, #200]	; (9f20c <Cl_dprep_controller+0xd44>)
   9f144:	4798      	blx	r3
								cl_dprepstate = CL_DPREP_STATE_DIALISER_PRIME;
   9f146:	4b25      	ldr	r3, [pc, #148]	; (9f1dc <Cl_dprep_controller+0xd14>)
   9f148:	2206      	movs	r2, #6
   9f14a:	701a      	strb	r2, [r3, #0]
								 
						break;
   9f14c:	e00b      	b.n	9f166 <Cl_dprep_controller+0xc9e>
						case EVENT_DPREP_TICK_MINUTE:
						Cl_dprepretcode = Cl_Dprep_ResetAlertsforReassertion();
   9f14e:	4b0f      	ldr	r3, [pc, #60]	; (9f18c <Cl_dprep_controller+0xcc4>)
   9f150:	4798      	blx	r3
   9f152:	4603      	mov	r3, r0
   9f154:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						break;
   9f158:	e005      	b.n	9f166 <Cl_dprep_controller+0xc9e>
						case EVENT_DPREP_ALARM:
						Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
   9f15a:	4b26      	ldr	r3, [pc, #152]	; (9f1f4 <Cl_dprep_controller+0xd2c>)
   9f15c:	4798      	blx	r3
   9f15e:	4603      	mov	r3, r0
   9f160:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						break;
   9f164:	bf00      	nop
						default:break;
					}
		break;
   9f166:	f000 be48 	b.w	9fdfa <Cl_dprep_controller+0x1932>
   9f16a:	bf00      	nop
   9f16c:	f3af 8000 	nop.w
   9f170:	66666666 	.word	0x66666666
   9f174:	40426666 	.word	0x40426666
   9f178:	9999999a 	.word	0x9999999a
   9f17c:	40429999 	.word	0x40429999
   9f180:	200723f0 	.word	0x200723f0
   9f184:	000a123d 	.word	0x000a123d
   9f188:	20071c6c 	.word	0x20071c6c
   9f18c:	000a10a9 	.word	0x000a10a9
   9f190:	0008e7f9 	.word	0x0008e7f9
   9f194:	000a68a9 	.word	0x000a68a9
   9f198:	000a6ac1 	.word	0x000a6ac1
   9f19c:	42c80000 	.word	0x42c80000
   9f1a0:	000a6031 	.word	0x000a6031
   9f1a4:	000a65f9 	.word	0x000a65f9
   9f1a8:	000a65bd 	.word	0x000a65bd
   9f1ac:	20071c6b 	.word	0x20071c6b
   9f1b0:	20071c68 	.word	0x20071c68
   9f1b4:	20071c4e 	.word	0x20071c4e
   9f1b8:	000a0829 	.word	0x000a0829
   9f1bc:	00082e61 	.word	0x00082e61
   9f1c0:	000a08d1 	.word	0x000a08d1
   9f1c4:	000a05b9 	.word	0x000a05b9
   9f1c8:	00099f4d 	.word	0x00099f4d
   9f1cc:	2007265c 	.word	0x2007265c
   9f1d0:	20071994 	.word	0x20071994
   9f1d4:	00099e79 	.word	0x00099e79
   9f1d8:	20071c70 	.word	0x20071c70
   9f1dc:	20071c6f 	.word	0x20071c6f
   9f1e0:	20071c50 	.word	0x20071c50
   9f1e4:	20071c52 	.word	0x20071c52
   9f1e8:	000a24f1 	.word	0x000a24f1
   9f1ec:	0009ba51 	.word	0x0009ba51
   9f1f0:	000a2449 	.word	0x000a2449
   9f1f4:	000a0149 	.word	0x000a0149
   9f1f8:	00083035 	.word	0x00083035
   9f1fc:	000a8d34 	.word	0x000a8d34
   9f200:	0008850d 	.word	0x0008850d
   9f204:	20070bdc 	.word	0x20070bdc
   9f208:	00099e5d 	.word	0x00099e5d
   9f20c:	00099ea1 	.word	0x00099ea1
		
		case CL_DPREP_STATE_CRITICAL_ALARM:
					switch (cl_dprepevent)
   9f210:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
   9f214:	3b02      	subs	r3, #2
   9f216:	2b1b      	cmp	r3, #27
   9f218:	d864      	bhi.n	9f2e4 <Cl_dprep_controller+0xe1c>
   9f21a:	a201      	add	r2, pc, #4	; (adr r2, 9f220 <Cl_dprep_controller+0xd58>)
   9f21c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9f220:	0009f291 	.word	0x0009f291
   9f224:	0009f2e5 	.word	0x0009f2e5
   9f228:	0009f2e5 	.word	0x0009f2e5
   9f22c:	0009f2e5 	.word	0x0009f2e5
   9f230:	0009f2e5 	.word	0x0009f2e5
   9f234:	0009f2e5 	.word	0x0009f2e5
   9f238:	0009f2e5 	.word	0x0009f2e5
   9f23c:	0009f2e5 	.word	0x0009f2e5
   9f240:	0009f2e5 	.word	0x0009f2e5
   9f244:	0009f2e5 	.word	0x0009f2e5
   9f248:	0009f2e5 	.word	0x0009f2e5
   9f24c:	0009f2a3 	.word	0x0009f2a3
   9f250:	0009f2e5 	.word	0x0009f2e5
   9f254:	0009f2e5 	.word	0x0009f2e5
   9f258:	0009f2e5 	.word	0x0009f2e5
   9f25c:	0009f2e5 	.word	0x0009f2e5
   9f260:	0009f2e5 	.word	0x0009f2e5
   9f264:	0009f2e5 	.word	0x0009f2e5
   9f268:	0009f2e5 	.word	0x0009f2e5
   9f26c:	0009f2e5 	.word	0x0009f2e5
   9f270:	0009f2e5 	.word	0x0009f2e5
   9f274:	0009f2cd 	.word	0x0009f2cd
   9f278:	0009f2e5 	.word	0x0009f2e5
   9f27c:	0009f2d9 	.word	0x0009f2d9
   9f280:	0009f2e5 	.word	0x0009f2e5
   9f284:	0009f2e5 	.word	0x0009f2e5
   9f288:	0009f2e5 	.word	0x0009f2e5
   9f28c:	0009f2b1 	.word	0x0009f2b1
					{
						case EVENT_DPREP_DIALYSIS_PREP:
						//Cl_dprepretcode = Cl_Dprep_StartPreparation();
						if(Cl_dprepretcode == CL_REJECTED)
   9f290:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
   9f294:	2b03      	cmp	r3, #3
   9f296:	d103      	bne.n	9f2a0 <Cl_dprep_controller+0xdd8>
							{
								return Cl_dprepretcode;
   9f298:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
   9f29c:	f000 bdaf 	b.w	9fdfe <Cl_dprep_controller+0x1936>
							}
						break;
   9f2a0:	e021      	b.n	9f2e6 <Cl_dprep_controller+0xe1e>
						case EVENT_DPREP_START_DIALISER_PRIME:
							//	if(cl_dprepbypassstate == CL_DPREP_BYPASS_ON)
								Cl_Dprep_StartDialyserPrime();
   9f2a2:	4ba6      	ldr	r3, [pc, #664]	; (9f53c <Cl_dprep_controller+0x1074>)
   9f2a4:	4798      	blx	r3
								sv_cntrl_disable_loopback();
   9f2a6:	4ba6      	ldr	r3, [pc, #664]	; (9f540 <Cl_dprep_controller+0x1078>)
   9f2a8:	4798      	blx	r3
								 sv_prop_startmixing();
   9f2aa:	4ba6      	ldr	r3, [pc, #664]	; (9f544 <Cl_dprep_controller+0x107c>)
   9f2ac:	4798      	blx	r3
						break;
   9f2ae:	e01a      	b.n	9f2e6 <Cl_dprep_controller+0xe1e>
						case EVENT_DPREP_MIXING_PREP_START:
						Cl_dprepretcode = Cl_Dprep_StartPreparation();
   9f2b0:	4ba5      	ldr	r3, [pc, #660]	; (9f548 <Cl_dprep_controller+0x1080>)
   9f2b2:	4798      	blx	r3
   9f2b4:	4603      	mov	r3, r0
   9f2b6:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						if(Cl_dprepretcode == CL_REJECTED)
   9f2ba:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
   9f2be:	2b03      	cmp	r3, #3
   9f2c0:	d103      	bne.n	9f2ca <Cl_dprep_controller+0xe02>
							{
								return Cl_dprepretcode;
   9f2c2:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
   9f2c6:	f000 bd9a 	b.w	9fdfe <Cl_dprep_controller+0x1936>
							}
						break;
   9f2ca:	e00c      	b.n	9f2e6 <Cl_dprep_controller+0xe1e>
						case EVENT_DPREP_TICK_MINUTE:
						Cl_dprepretcode = Cl_Dprep_ResetAlertsforReassertion();
   9f2cc:	4b9f      	ldr	r3, [pc, #636]	; (9f54c <Cl_dprep_controller+0x1084>)
   9f2ce:	4798      	blx	r3
   9f2d0:	4603      	mov	r3, r0
   9f2d2:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						break;
   9f2d6:	e006      	b.n	9f2e6 <Cl_dprep_controller+0xe1e>
						case EVENT_DPREP_ALARM:
						Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
   9f2d8:	4b9d      	ldr	r3, [pc, #628]	; (9f550 <Cl_dprep_controller+0x1088>)
   9f2da:	4798      	blx	r3
   9f2dc:	4603      	mov	r3, r0
   9f2de:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						break;
   9f2e2:	e000      	b.n	9f2e6 <Cl_dprep_controller+0xe1e>
// 
// 								}
// 							}
// 						}
						break;
						default:break;
   9f2e4:	bf00      	nop
					}
		break;
   9f2e6:	f000 bd88 	b.w	9fdfa <Cl_dprep_controller+0x1932>
		case CL_DPREP_STATE_DPREP_FILLING_DONE:
					switch (cl_dprepevent)
   9f2ea:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
   9f2ee:	3b04      	subs	r3, #4
   9f2f0:	2b1b      	cmp	r3, #27
   9f2f2:	f200 80d2 	bhi.w	9f49a <Cl_dprep_controller+0xfd2>
   9f2f6:	a201      	add	r2, pc, #4	; (adr r2, 9f2fc <Cl_dprep_controller+0xe34>)
   9f2f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9f2fc:	0009f40f 	.word	0x0009f40f
   9f300:	0009f49b 	.word	0x0009f49b
   9f304:	0009f49b 	.word	0x0009f49b
   9f308:	0009f49b 	.word	0x0009f49b
   9f30c:	0009f49b 	.word	0x0009f49b
   9f310:	0009f49b 	.word	0x0009f49b
   9f314:	0009f3b1 	.word	0x0009f3b1
   9f318:	0009f49b 	.word	0x0009f49b
   9f31c:	0009f3f9 	.word	0x0009f3f9
   9f320:	0009f36d 	.word	0x0009f36d
   9f324:	0009f49b 	.word	0x0009f49b
   9f328:	0009f49b 	.word	0x0009f49b
   9f32c:	0009f49b 	.word	0x0009f49b
   9f330:	0009f49b 	.word	0x0009f49b
   9f334:	0009f49b 	.word	0x0009f49b
   9f338:	0009f49b 	.word	0x0009f49b
   9f33c:	0009f49b 	.word	0x0009f49b
   9f340:	0009f49b 	.word	0x0009f49b
   9f344:	0009f3db 	.word	0x0009f3db
   9f348:	0009f3d5 	.word	0x0009f3d5
   9f34c:	0009f49b 	.word	0x0009f49b
   9f350:	0009f3ed 	.word	0x0009f3ed
   9f354:	0009f49b 	.word	0x0009f49b
   9f358:	0009f49b 	.word	0x0009f49b
   9f35c:	0009f49b 	.word	0x0009f49b
   9f360:	0009f49b 	.word	0x0009f49b
   9f364:	0009f49b 	.word	0x0009f49b
   9f368:	0009f37d 	.word	0x0009f37d
					{
						case EVENT_DPREP_START_DIALISER_PRIME:
								Cl_Dprep_StartDialyserPrime();
   9f36c:	4b73      	ldr	r3, [pc, #460]	; (9f53c <Cl_dprep_controller+0x1074>)
   9f36e:	4798      	blx	r3
								sv_cntrl_disable_loopback();
   9f370:	4b73      	ldr	r3, [pc, #460]	; (9f540 <Cl_dprep_controller+0x1078>)
   9f372:	4798      	blx	r3
								cl_dprepstate = CL_DPREP_STATE_DIALISER_PRIME;
   9f374:	4b77      	ldr	r3, [pc, #476]	; (9f554 <Cl_dprep_controller+0x108c>)
   9f376:	2206      	movs	r2, #6
   9f378:	701a      	strb	r2, [r3, #0]
						break;
   9f37a:	e08f      	b.n	9f49c <Cl_dprep_controller+0xfd4>
						case EVENT_DPREP_START_RECIRC:
									if((cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIMING) || (cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIME_RCIRC_STARTED) || (cl_dprep_prime_state !=  CL_DPREP_PRIME_STATE_DIALYSER_PRIMING))
   9f37c:	4b76      	ldr	r3, [pc, #472]	; (9f558 <Cl_dprep_controller+0x1090>)
   9f37e:	781b      	ldrb	r3, [r3, #0]
   9f380:	2b01      	cmp	r3, #1
   9f382:	d107      	bne.n	9f394 <Cl_dprep_controller+0xecc>
   9f384:	4b74      	ldr	r3, [pc, #464]	; (9f558 <Cl_dprep_controller+0x1090>)
   9f386:	781b      	ldrb	r3, [r3, #0]
   9f388:	2b05      	cmp	r3, #5
   9f38a:	d103      	bne.n	9f394 <Cl_dprep_controller+0xecc>
   9f38c:	4b72      	ldr	r3, [pc, #456]	; (9f558 <Cl_dprep_controller+0x1090>)
   9f38e:	781b      	ldrb	r3, [r3, #0]
   9f390:	2b09      	cmp	r3, #9
   9f392:	d00c      	beq.n	9f3ae <Cl_dprep_controller+0xee6>
									{
										Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC",6);
   9f394:	2018      	movs	r0, #24
   9f396:	4971      	ldr	r1, [pc, #452]	; (9f55c <Cl_dprep_controller+0x1094>)
   9f398:	2206      	movs	r2, #6
   9f39a:	4b71      	ldr	r3, [pc, #452]	; (9f560 <Cl_dprep_controller+0x1098>)
   9f39c:	4798      	blx	r3
										cl_dprep_primecontroller(CL_DPREP_PRIME_RCIRC_START,0);
   9f39e:	2005      	movs	r0, #5
   9f3a0:	2100      	movs	r1, #0
   9f3a2:	4b70      	ldr	r3, [pc, #448]	; (9f564 <Cl_dprep_controller+0x109c>)
   9f3a4:	4798      	blx	r3
										Cl_DprepAlarmTable[CL_DPREP_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   9f3a6:	4b70      	ldr	r3, [pc, #448]	; (9f568 <Cl_dprep_controller+0x10a0>)
   9f3a8:	2200      	movs	r2, #0
   9f3aa:	70da      	strb	r2, [r3, #3]
									}
						break;
   9f3ac:	e076      	b.n	9f49c <Cl_dprep_controller+0xfd4>
   9f3ae:	e075      	b.n	9f49c <Cl_dprep_controller+0xfd4>
						case EVENT_DPREP_START_PRIME:
						if(cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIMING)
   9f3b0:	4b69      	ldr	r3, [pc, #420]	; (9f558 <Cl_dprep_controller+0x1090>)
   9f3b2:	781b      	ldrb	r3, [r3, #0]
   9f3b4:	2b01      	cmp	r3, #1
   9f3b6:	d00c      	beq.n	9f3d2 <Cl_dprep_controller+0xf0a>
						{
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PRIME1",6);
   9f3b8:	2018      	movs	r0, #24
   9f3ba:	496c      	ldr	r1, [pc, #432]	; (9f56c <Cl_dprep_controller+0x10a4>)
   9f3bc:	2206      	movs	r2, #6
   9f3be:	4b68      	ldr	r3, [pc, #416]	; (9f560 <Cl_dprep_controller+0x1098>)
   9f3c0:	4798      	blx	r3
							cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_START,0);
   9f3c2:	2001      	movs	r0, #1
   9f3c4:	2100      	movs	r1, #0
   9f3c6:	4b67      	ldr	r3, [pc, #412]	; (9f564 <Cl_dprep_controller+0x109c>)
   9f3c8:	4798      	blx	r3
							Cl_DprepAlarmTable[CL_DPREP_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   9f3ca:	4b67      	ldr	r3, [pc, #412]	; (9f568 <Cl_dprep_controller+0x10a0>)
   9f3cc:	2200      	movs	r2, #0
   9f3ce:	70da      	strb	r2, [r3, #3]
						}
						
						break;
   9f3d0:	e064      	b.n	9f49c <Cl_dprep_controller+0xfd4>
   9f3d2:	e063      	b.n	9f49c <Cl_dprep_controller+0xfd4>
						case EVENT_DPREP_MAC_PRIME_COMPLETED:
					//	cl_dprepstate = CL_DPREP_STATE_POST_PRIME_STANDBY;
						break;

						case EVENT_DPREP_TICK_MINUTE:
							Cl_Dprep_ResetAlertsforReassertion();
   9f3d4:	4b5d      	ldr	r3, [pc, #372]	; (9f54c <Cl_dprep_controller+0x1084>)
   9f3d6:	4798      	blx	r3
											
											temp3_cel_backup = temp3_cel
											
											#endif
										
						break;
   9f3d8:	e060      	b.n	9f49c <Cl_dprep_controller+0xfd4>
						
						case EVENT_DPREP_TICK_SECOND:
					//	if(cl_dprep_prime_state == CL_DPREP_PRIME_STATE_PRIME_COMPLETED)
						if(cl_dprep_prime_state == CL_DPREP_PRIME_STATE_PRIME_RCIRC_COMPLETED)
   9f3da:	4b5f      	ldr	r3, [pc, #380]	; (9f558 <Cl_dprep_controller+0x1090>)
   9f3dc:	781b      	ldrb	r3, [r3, #0]
   9f3de:	2b08      	cmp	r3, #8
   9f3e0:	d103      	bne.n	9f3ea <Cl_dprep_controller+0xf22>
					
						{
							cl_dprepstate = CL_DPREP_STATE_POST_PRIME_STANDBY;
   9f3e2:	4b5c      	ldr	r3, [pc, #368]	; (9f554 <Cl_dprep_controller+0x108c>)
   9f3e4:	2205      	movs	r2, #5
   9f3e6:	701a      	strb	r2, [r3, #0]
									 
						}
						break;
   9f3e8:	e058      	b.n	9f49c <Cl_dprep_controller+0xfd4>
   9f3ea:	e057      	b.n	9f49c <Cl_dprep_controller+0xfd4>


						case EVENT_DPREP_ALARM:
						Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
   9f3ec:	4b58      	ldr	r3, [pc, #352]	; (9f550 <Cl_dprep_controller+0x1088>)
   9f3ee:	4798      	blx	r3
   9f3f0:	4603      	mov	r3, r0
   9f3f2:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						break;
   9f3f6:	e051      	b.n	9f49c <Cl_dprep_controller+0xfd4>
						case EVENT_DPREP_DILYSER_CONNECTED:
		
						// check for micro switches
						Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSER_CONNECTED_CONFIRMED,&data,0);
   9f3f8:	f107 0377 	add.w	r3, r7, #119	; 0x77
   9f3fc:	2025      	movs	r0, #37	; 0x25
   9f3fe:	4619      	mov	r1, r3
   9f400:	2200      	movs	r2, #0
   9f402:	4b57      	ldr	r3, [pc, #348]	; (9f560 <Cl_dprep_controller+0x1098>)
   9f404:	4798      	blx	r3
   9f406:	4603      	mov	r3, r0
   9f408:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		
						break;
   9f40c:	e046      	b.n	9f49c <Cl_dprep_controller+0xfd4>
						case EVENT_DPREP_COMMAND_GET_DATA:

							if(Cl_ConsoleRxMsg.msgready == true)
   9f40e:	4b58      	ldr	r3, [pc, #352]	; (9f570 <Cl_dprep_controller+0x10a8>)
   9f410:	7e1b      	ldrb	r3, [r3, #24]
   9f412:	2b00      	cmp	r3, #0
   9f414:	d040      	beq.n	9f498 <Cl_dprep_controller+0xfd0>
							{
								switch(Cl_ConsoleRxMsg.data.byte[0])
   9f416:	4b56      	ldr	r3, [pc, #344]	; (9f570 <Cl_dprep_controller+0x10a8>)
   9f418:	791b      	ldrb	r3, [r3, #4]
   9f41a:	2b02      	cmp	r3, #2
   9f41c:	d002      	beq.n	9f424 <Cl_dprep_controller+0xf5c>
   9f41e:	2b04      	cmp	r3, #4
   9f420:	d01d      	beq.n	9f45e <Cl_dprep_controller+0xf96>
									dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
									Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
									break;
									default:
									break;
   9f422:	e039      	b.n	9f498 <Cl_dprep_controller+0xfd0>
							if(Cl_ConsoleRxMsg.msgready == true)
							{
								switch(Cl_ConsoleRxMsg.data.byte[0])
								{
									case	CON_RX_PARAM_DATA_PRIME_STATUS:
									command = CON_TX_COMMAND_SYSDATA;
   9f424:	2316      	movs	r3, #22
   9f426:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
									dataarray[0] = CON_TX_PARAM_DATA_PRIME_STATUS;
   9f42a:	2302      	movs	r3, #2
   9f42c:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_PRIME_STATUS, &dataarray[1]);
   9f430:	f107 0370 	add.w	r3, r7, #112	; 0x70
   9f434:	3301      	adds	r3, #1
   9f436:	2002      	movs	r0, #2
   9f438:	4619      	mov	r1, r3
   9f43a:	4b4e      	ldr	r3, [pc, #312]	; (9f574 <Cl_dprep_controller+0x10ac>)
   9f43c:	4798      	blx	r3
   9f43e:	4603      	mov	r3, r0
   9f440:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
									Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   9f444:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
   9f448:	f107 0370 	add.w	r3, r7, #112	; 0x70
   9f44c:	4610      	mov	r0, r2
   9f44e:	4619      	mov	r1, r3
   9f450:	2202      	movs	r2, #2
   9f452:	4b43      	ldr	r3, [pc, #268]	; (9f560 <Cl_dprep_controller+0x1098>)
   9f454:	4798      	blx	r3
   9f456:	4603      	mov	r3, r0
   9f458:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
									break;
   9f45c:	e01c      	b.n	9f498 <Cl_dprep_controller+0xfd0>
									case	CON_RX_PARAM_DATA_DIALYSIS_STATUS:
									command = CON_TX_COMMAND_SYSDATA;
   9f45e:	2316      	movs	r3, #22
   9f460:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
									dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
   9f464:	2304      	movs	r3, #4
   9f466:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
   9f46a:	f107 0370 	add.w	r3, r7, #112	; 0x70
   9f46e:	3301      	adds	r3, #1
   9f470:	2004      	movs	r0, #4
   9f472:	4619      	mov	r1, r3
   9f474:	4b3f      	ldr	r3, [pc, #252]	; (9f574 <Cl_dprep_controller+0x10ac>)
   9f476:	4798      	blx	r3
   9f478:	4603      	mov	r3, r0
   9f47a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
									Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   9f47e:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
   9f482:	f107 0370 	add.w	r3, r7, #112	; 0x70
   9f486:	4610      	mov	r0, r2
   9f488:	4619      	mov	r1, r3
   9f48a:	2202      	movs	r2, #2
   9f48c:	4b34      	ldr	r3, [pc, #208]	; (9f560 <Cl_dprep_controller+0x1098>)
   9f48e:	4798      	blx	r3
   9f490:	4603      	mov	r3, r0
   9f492:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
									break;
   9f496:	bf00      	nop
									default:
									break;
								}
							}
						break;
   9f498:	e000      	b.n	9f49c <Cl_dprep_controller+0xfd4>
						default:break;
   9f49a:	bf00      	nop
					}

		break;
   9f49c:	f000 bcad 	b.w	9fdfa <Cl_dprep_controller+0x1932>
		
		case CL_DPREP_STATE_DPRIME_WAIT_STABILITY:
		
		 
		 wait_timeout_counter = 0;
   9f4a0:	4b35      	ldr	r3, [pc, #212]	; (9f578 <Cl_dprep_controller+0x10b0>)
   9f4a2:	2200      	movs	r2, #0
   9f4a4:	601a      	str	r2, [r3, #0]
		 
		 if(state_counter > 3){
   9f4a6:	4b35      	ldr	r3, [pc, #212]	; (9f57c <Cl_dprep_controller+0x10b4>)
   9f4a8:	681b      	ldr	r3, [r3, #0]
   9f4aa:	2b03      	cmp	r3, #3
   9f4ac:	dd0b      	ble.n	9f4c6 <Cl_dprep_controller+0xffe>
// 			 sv_cntrl_enable_bypass();
// 			 cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP,0);
// 			 cl_dprepbypassstate = CL_DPREP_BYPASS_ON;
// 			 Cl_dprep_StopMixing();
// 			 cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP_DIALYSER_PRIMING,0);
			Cl_Dprep_Priming_Stop();
   9f4ae:	4b34      	ldr	r3, [pc, #208]	; (9f580 <Cl_dprep_controller+0x10b8>)
   9f4b0:	4798      	blx	r3
			 state_counter = 0;
   9f4b2:	4b32      	ldr	r3, [pc, #200]	; (9f57c <Cl_dprep_controller+0x10b4>)
   9f4b4:	2200      	movs	r2, #0
   9f4b6:	601a      	str	r2, [r3, #0]
			 stability_counter = 0;
   9f4b8:	4b32      	ldr	r3, [pc, #200]	; (9f584 <Cl_dprep_controller+0x10bc>)
   9f4ba:	2200      	movs	r2, #0
   9f4bc:	601a      	str	r2, [r3, #0]
			 wait_timeout_counter = 0;
   9f4be:	4b2e      	ldr	r3, [pc, #184]	; (9f578 <Cl_dprep_controller+0x10b0>)
   9f4c0:	2200      	movs	r2, #0
   9f4c2:	601a      	str	r2, [r3, #0]
   9f4c4:	e0b1      	b.n	9f62a <Cl_dprep_controller+0x1162>
		 }
		 else{
			 
		 
		switch(cl_dprepevent){
   9f4c6:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
   9f4ca:	3b01      	subs	r3, #1
   9f4cc:	2b18      	cmp	r3, #24
   9f4ce:	f200 848f 	bhi.w	9fdf0 <Cl_dprep_controller+0x1928>
   9f4d2:	a201      	add	r2, pc, #4	; (adr r2, 9f4d8 <Cl_dprep_controller+0x1010>)
   9f4d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9f4d8:	0009f619 	.word	0x0009f619
   9f4dc:	0009fdf1 	.word	0x0009fdf1
   9f4e0:	0009fdf1 	.word	0x0009fdf1
   9f4e4:	0009fdf1 	.word	0x0009fdf1
   9f4e8:	0009fdf1 	.word	0x0009fdf1
   9f4ec:	0009fdf1 	.word	0x0009fdf1
   9f4f0:	0009fdf1 	.word	0x0009fdf1
   9f4f4:	0009fdf1 	.word	0x0009fdf1
   9f4f8:	0009fdf1 	.word	0x0009fdf1
   9f4fc:	0009fdf1 	.word	0x0009fdf1
   9f500:	0009fdf1 	.word	0x0009fdf1
   9f504:	0009fdf1 	.word	0x0009fdf1
   9f508:	0009fdf1 	.word	0x0009fdf1
   9f50c:	0009f613 	.word	0x0009f613
   9f510:	0009fdf1 	.word	0x0009fdf1
   9f514:	0009fdf1 	.word	0x0009fdf1
   9f518:	0009fdf1 	.word	0x0009fdf1
   9f51c:	0009fdf1 	.word	0x0009fdf1
   9f520:	0009fdf1 	.word	0x0009fdf1
   9f524:	0009fdf1 	.word	0x0009fdf1
   9f528:	0009fdf1 	.word	0x0009fdf1
   9f52c:	0009f589 	.word	0x0009f589
   9f530:	0009fdf1 	.word	0x0009fdf1
   9f534:	0009fdf1 	.word	0x0009fdf1
   9f538:	0009f607 	.word	0x0009f607
   9f53c:	000a2079 	.word	0x000a2079
   9f540:	00099e5d 	.word	0x00099e5d
   9f544:	0009a075 	.word	0x0009a075
   9f548:	000a1c69 	.word	0x000a1c69
   9f54c:	000a10a9 	.word	0x000a10a9
   9f550:	000a0149 	.word	0x000a0149
   9f554:	20071c6f 	.word	0x20071c6f
   9f558:	20071994 	.word	0x20071994
   9f55c:	000a8d2c 	.word	0x000a8d2c
   9f560:	0009ba51 	.word	0x0009ba51
   9f564:	0008850d 	.word	0x0008850d
   9f568:	20070bdc 	.word	0x20070bdc
   9f56c:	000a8d34 	.word	0x000a8d34
   9f570:	200723f0 	.word	0x200723f0
   9f574:	0009a545 	.word	0x0009a545
   9f578:	20071c30 	.word	0x20071c30
   9f57c:	20071c34 	.word	0x20071c34
   9f580:	000a23f5 	.word	0x000a23f5
   9f584:	20071c2c 	.word	0x20071c2c
		
		case EVENT_DPREP_TICK_SECOND:
		
		wait_timeout_counter++;
   9f588:	4bb1      	ldr	r3, [pc, #708]	; (9f850 <Cl_dprep_controller+0x1388>)
   9f58a:	681b      	ldr	r3, [r3, #0]
   9f58c:	3301      	adds	r3, #1
   9f58e:	4ab0      	ldr	r2, [pc, #704]	; (9f850 <Cl_dprep_controller+0x1388>)
   9f590:	6013      	str	r3, [r2, #0]
		// disable cond and temp alarm
		// if 3 times it comes then stop the dialyzer priming
		// send data to console to wait for stability
		
		
		Cl_Dprep_SendPrepStateData(DIALYSER_PRIME_DATA);
   9f592:	2003      	movs	r0, #3
   9f594:	4baf      	ldr	r3, [pc, #700]	; (9f854 <Cl_dprep_controller+0x138c>)
   9f596:	4798      	blx	r3
		if(Cl_Check_Temp_Cond_Stability() == CL_OK){
   9f598:	4baf      	ldr	r3, [pc, #700]	; (9f858 <Cl_dprep_controller+0x1390>)
   9f59a:	4798      	blx	r3
   9f59c:	4603      	mov	r3, r0
   9f59e:	2b00      	cmp	r3, #0
   9f5a0:	d104      	bne.n	9f5ac <Cl_dprep_controller+0x10e4>
			
			stability_counter++ ;
   9f5a2:	4bae      	ldr	r3, [pc, #696]	; (9f85c <Cl_dprep_controller+0x1394>)
   9f5a4:	681b      	ldr	r3, [r3, #0]
   9f5a6:	3301      	adds	r3, #1
   9f5a8:	4aac      	ldr	r2, [pc, #688]	; (9f85c <Cl_dprep_controller+0x1394>)
   9f5aa:	6013      	str	r3, [r2, #0]
		}
		
		if(stability_counter == 10){
   9f5ac:	4bab      	ldr	r3, [pc, #684]	; (9f85c <Cl_dprep_controller+0x1394>)
   9f5ae:	681b      	ldr	r3, [r3, #0]
   9f5b0:	2b0a      	cmp	r3, #10
   9f5b2:	d120      	bne.n	9f5f6 <Cl_dprep_controller+0x112e>
		
		Cl_AlarmActivateAlarms(COND_STATUS_HIGH,false ); // true
   9f5b4:	2008      	movs	r0, #8
   9f5b6:	2100      	movs	r1, #0
   9f5b8:	4ba9      	ldr	r3, [pc, #676]	; (9f860 <Cl_dprep_controller+0x1398>)
   9f5ba:	4798      	blx	r3
		Cl_AlarmActivateAlarms(COND_STATUS_LOW,false ); // true
   9f5bc:	2007      	movs	r0, #7
   9f5be:	2100      	movs	r1, #0
   9f5c0:	4ba7      	ldr	r3, [pc, #668]	; (9f860 <Cl_dprep_controller+0x1398>)
   9f5c2:	4798      	blx	r3
		Cl_AlarmActivateAlarms(TEMP3_HIGH_THRESHOLD,false ); // true
   9f5c4:	2013      	movs	r0, #19
   9f5c6:	2100      	movs	r1, #0
   9f5c8:	4ba5      	ldr	r3, [pc, #660]	; (9f860 <Cl_dprep_controller+0x1398>)
   9f5ca:	4798      	blx	r3
		Cl_AlarmActivateAlarms(TEMP3_LOW_THRESHOLD,false ); //true
   9f5cc:	2014      	movs	r0, #20
   9f5ce:	2100      	movs	r1, #0
   9f5d0:	4ba3      	ldr	r3, [pc, #652]	; (9f860 <Cl_dprep_controller+0x1398>)
   9f5d2:	4798      	blx	r3
		
		stability_counter = 0;	
   9f5d4:	4ba1      	ldr	r3, [pc, #644]	; (9f85c <Cl_dprep_controller+0x1394>)
   9f5d6:	2200      	movs	r2, #0
   9f5d8:	601a      	str	r2, [r3, #0]
		wait_timeout_counter = 0;
   9f5da:	4b9d      	ldr	r3, [pc, #628]	; (9f850 <Cl_dprep_controller+0x1388>)
   9f5dc:	2200      	movs	r2, #0
   9f5de:	601a      	str	r2, [r3, #0]
				Cl_dprepretcode =  sv_cntrl_disable_bypass();
   9f5e0:	4ba0      	ldr	r3, [pc, #640]	; (9f864 <Cl_dprep_controller+0x139c>)
   9f5e2:	4798      	blx	r3
   9f5e4:	4603      	mov	r3, r0
   9f5e6:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
				cl_dprepbypassstate = CL_DPREP_BYPASS_OFF;
   9f5ea:	4b9f      	ldr	r3, [pc, #636]	; (9f868 <Cl_dprep_controller+0x13a0>)
   9f5ec:	2202      	movs	r2, #2
   9f5ee:	701a      	strb	r2, [r3, #0]
				cl_dprepstate = CL_DPREP_STATE_DIALISER_PRIME;
   9f5f0:	4b9e      	ldr	r3, [pc, #632]	; (9f86c <Cl_dprep_controller+0x13a4>)
   9f5f2:	2206      	movs	r2, #6
   9f5f4:	701a      	strb	r2, [r3, #0]
						
			}
		
		if(wait_timeout_counter > 15){
   9f5f6:	4b96      	ldr	r3, [pc, #600]	; (9f850 <Cl_dprep_controller+0x1388>)
   9f5f8:	681b      	ldr	r3, [r3, #0]
   9f5fa:	2b0f      	cmp	r3, #15
   9f5fc:	dd02      	ble.n	9f604 <Cl_dprep_controller+0x113c>
			
			// stop preparation
			Cl_Dprep_Priming_Stop();
   9f5fe:	4b9c      	ldr	r3, [pc, #624]	; (9f870 <Cl_dprep_controller+0x13a8>)
   9f600:	4798      	blx	r3
// 				//cl_dprepstate = CL_DPREP_STATE_DPRIME_WAIT_STABILITY;
		}
		
		 
		
		break;
   9f602:	e012      	b.n	9f62a <Cl_dprep_controller+0x1162>
   9f604:	e011      	b.n	9f62a <Cl_dprep_controller+0x1162>
		
		case EVENT_DPREP_ALARM:
		Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
   9f606:	4b9b      	ldr	r3, [pc, #620]	; (9f874 <Cl_dprep_controller+0x13ac>)
   9f608:	4798      	blx	r3
   9f60a:	4603      	mov	r3, r0
   9f60c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		break;
   9f610:	e00b      	b.n	9f62a <Cl_dprep_controller+0x1162>
		
		case EVENT_DPREP_STOP_DIALYSER_PRIME:
		
		Cl_Dprep_Priming_Stop();
   9f612:	4b97      	ldr	r3, [pc, #604]	; (9f870 <Cl_dprep_controller+0x13a8>)
   9f614:	4798      	blx	r3
// 		Cl_dprep_StopMixing();
// 		cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP_DIALYSER_PRIMING,0);
// 		cl_dprepstate = CL_DPREP_STATE_DIALISER_PRIME_STOPPED;
		break;
   9f616:	e008      	b.n	9f62a <Cl_dprep_controller+0x1162>
		
		case EVENT_DPREP_CLR_ALARM:
		sv_cntrl_resetyellowalarm();
   9f618:	4b97      	ldr	r3, [pc, #604]	; (9f878 <Cl_dprep_controller+0x13b0>)
   9f61a:	4798      	blx	r3
		sv_cntrl_resetredalarm();
   9f61c:	4b97      	ldr	r3, [pc, #604]	; (9f87c <Cl_dprep_controller+0x13b4>)
   9f61e:	4798      	blx	r3
		sv_cntrl_nobuzzer();
   9f620:	4b97      	ldr	r3, [pc, #604]	; (9f880 <Cl_dprep_controller+0x13b8>)
   9f622:	4798      	blx	r3
		Cl_Dprep_ResetAlertsforReassertion();
   9f624:	4b97      	ldr	r3, [pc, #604]	; (9f884 <Cl_dprep_controller+0x13bc>)
   9f626:	4798      	blx	r3
		//sv_cntrl_disable_bypass();
		break;
   9f628:	bf00      	nop
			
		
		}
		}
		
		break;
   9f62a:	e3e1      	b.n	9fdf0 <Cl_dprep_controller+0x1928>
		case CL_DPREP_STATE_POST_PRIME_STANDBY:
		switch(cl_dprepevent)
   9f62c:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
   9f630:	3b01      	subs	r3, #1
   9f632:	2b19      	cmp	r3, #25
   9f634:	f200 810a 	bhi.w	9f84c <Cl_dprep_controller+0x1384>
   9f638:	a201      	add	r2, pc, #4	; (adr r2, 9f640 <Cl_dprep_controller+0x1178>)
   9f63a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9f63e:	bf00      	nop
   9f640:	0009f7fb 	.word	0x0009f7fb
   9f644:	0009f84d 	.word	0x0009f84d
   9f648:	0009f727 	.word	0x0009f727
   9f64c:	0009f6a9 	.word	0x0009f6a9
   9f650:	0009f84d 	.word	0x0009f84d
   9f654:	0009f84d 	.word	0x0009f84d
   9f658:	0009f7c9 	.word	0x0009f7c9
   9f65c:	0009f84d 	.word	0x0009f84d
   9f660:	0009f84d 	.word	0x0009f84d
   9f664:	0009f84d 	.word	0x0009f84d
   9f668:	0009f84d 	.word	0x0009f84d
   9f66c:	0009f78b 	.word	0x0009f78b
   9f670:	0009f7a1 	.word	0x0009f7a1
   9f674:	0009f84d 	.word	0x0009f84d
   9f678:	0009f84d 	.word	0x0009f84d
   9f67c:	0009f84d 	.word	0x0009f84d
   9f680:	0009f84d 	.word	0x0009f84d
   9f684:	0009f84d 	.word	0x0009f84d
   9f688:	0009f84d 	.word	0x0009f84d
   9f68c:	0009f84d 	.word	0x0009f84d
   9f690:	0009f84d 	.word	0x0009f84d
   9f694:	0009f84d 	.word	0x0009f84d
   9f698:	0009f80d 	.word	0x0009f80d
   9f69c:	0009f84d 	.word	0x0009f84d
   9f6a0:	0009f7bd 	.word	0x0009f7bd
   9f6a4:	0009f7af 	.word	0x0009f7af
					{
						case EVENT_DPREP_COMMAND_GET_DATA:
							if(Cl_ConsoleRxMsg.msgready == true)
   9f6a8:	4b77      	ldr	r3, [pc, #476]	; (9f888 <Cl_dprep_controller+0x13c0>)
   9f6aa:	7e1b      	ldrb	r3, [r3, #24]
   9f6ac:	2b00      	cmp	r3, #0
   9f6ae:	d039      	beq.n	9f724 <Cl_dprep_controller+0x125c>
							{
								switch(Cl_ConsoleRxMsg.data.byte[0])
   9f6b0:	4b75      	ldr	r3, [pc, #468]	; (9f888 <Cl_dprep_controller+0x13c0>)
   9f6b2:	791b      	ldrb	r3, [r3, #4]
   9f6b4:	2b03      	cmp	r3, #3
   9f6b6:	d002      	beq.n	9f6be <Cl_dprep_controller+0x11f6>
   9f6b8:	2b04      	cmp	r3, #4
   9f6ba:	d016      	beq.n	9f6ea <Cl_dprep_controller+0x1222>
									command = CON_TX_COMMAND_SYSDATA;
									dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
									Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
									break;
									default:break;
   9f6bc:	e032      	b.n	9f724 <Cl_dprep_controller+0x125c>
							if(Cl_ConsoleRxMsg.msgready == true)
							{
								switch(Cl_ConsoleRxMsg.data.byte[0])
								{
									case CON_RX_PARAM_DATA_DIALYSER_PRIME_STATUS:
									command = CON_TX_COMMAND_SYSDATA;
   9f6be:	2316      	movs	r3, #22
   9f6c0:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
									dataarray[0] = CON_TX_PARAM_DATA_DIALYSER_PRIME_STATUS;
   9f6c4:	2303      	movs	r3, #3
   9f6c6:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
									dataarray[1] = 0;									
   9f6ca:	2300      	movs	r3, #0
   9f6cc:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
									Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   9f6d0:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
   9f6d4:	f107 0370 	add.w	r3, r7, #112	; 0x70
   9f6d8:	4610      	mov	r0, r2
   9f6da:	4619      	mov	r1, r3
   9f6dc:	2202      	movs	r2, #2
   9f6de:	4b6b      	ldr	r3, [pc, #428]	; (9f88c <Cl_dprep_controller+0x13c4>)
   9f6e0:	4798      	blx	r3
   9f6e2:	4603      	mov	r3, r0
   9f6e4:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
									break;
   9f6e8:	e01c      	b.n	9f724 <Cl_dprep_controller+0x125c>
									case	CON_RX_PARAM_DATA_DIALYSIS_STATUS:
									command = CON_TX_COMMAND_SYSDATA;
   9f6ea:	2316      	movs	r3, #22
   9f6ec:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
									dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
   9f6f0:	2304      	movs	r3, #4
   9f6f2:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
   9f6f6:	f107 0370 	add.w	r3, r7, #112	; 0x70
   9f6fa:	3301      	adds	r3, #1
   9f6fc:	2004      	movs	r0, #4
   9f6fe:	4619      	mov	r1, r3
   9f700:	4b63      	ldr	r3, [pc, #396]	; (9f890 <Cl_dprep_controller+0x13c8>)
   9f702:	4798      	blx	r3
   9f704:	4603      	mov	r3, r0
   9f706:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
									Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   9f70a:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
   9f70e:	f107 0370 	add.w	r3, r7, #112	; 0x70
   9f712:	4610      	mov	r0, r2
   9f714:	4619      	mov	r1, r3
   9f716:	2202      	movs	r2, #2
   9f718:	4b5c      	ldr	r3, [pc, #368]	; (9f88c <Cl_dprep_controller+0x13c4>)
   9f71a:	4798      	blx	r3
   9f71c:	4603      	mov	r3, r0
   9f71e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
									break;
   9f722:	bf00      	nop
									default:break;
								}
							}
						break;
   9f724:	e093      	b.n	9f84e <Cl_dprep_controller+0x1386>
						case EVENT_DPREP_COMMAND_SET_DATA:
								 if(Cl_ConsoleRxMsg.msgready == true)
   9f726:	4b58      	ldr	r3, [pc, #352]	; (9f888 <Cl_dprep_controller+0x13c0>)
   9f728:	7e1b      	ldrb	r3, [r3, #24]
   9f72a:	2b00      	cmp	r3, #0
   9f72c:	d02c      	beq.n	9f788 <Cl_dprep_controller+0x12c0>
								 {
						 
						 
									 Cl_ConsoleRxDataType dataId;
									 Cl_Uint8Type count;
									 dataId = Cl_ConsoleRxMsg.data.byte[0];
   9f72e:	4b56      	ldr	r3, [pc, #344]	; (9f888 <Cl_dprep_controller+0x13c0>)
   9f730:	791b      	ldrb	r3, [r3, #4]
   9f732:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
									 for (count =0; count < Cl_ConsoleRxMsg.datasize;count++)
   9f736:	2300      	movs	r3, #0
   9f738:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
   9f73c:	e011      	b.n	9f762 <Cl_dprep_controller+0x129a>
									 {
										 cl_PrepData.bytearray[count] = Cl_ConsoleRxMsg.data.byte[count+1];
   9f73e:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
   9f742:	f897 209d 	ldrb.w	r2, [r7, #157]	; 0x9d
   9f746:	3201      	adds	r2, #1
   9f748:	494f      	ldr	r1, [pc, #316]	; (9f888 <Cl_dprep_controller+0x13c0>)
   9f74a:	440a      	add	r2, r1
   9f74c:	7912      	ldrb	r2, [r2, #4]
   9f74e:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
   9f752:	440b      	add	r3, r1
   9f754:	f803 2c68 	strb.w	r2, [r3, #-104]
						 
						 
									 Cl_ConsoleRxDataType dataId;
									 Cl_Uint8Type count;
									 dataId = Cl_ConsoleRxMsg.data.byte[0];
									 for (count =0; count < Cl_ConsoleRxMsg.datasize;count++)
   9f758:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
   9f75c:	3301      	adds	r3, #1
   9f75e:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
   9f762:	4b49      	ldr	r3, [pc, #292]	; (9f888 <Cl_dprep_controller+0x13c0>)
   9f764:	78db      	ldrb	r3, [r3, #3]
   9f766:	f897 209d 	ldrb.w	r2, [r7, #157]	; 0x9d
   9f76a:	429a      	cmp	r2, r3
   9f76c:	d3e7      	bcc.n	9f73e <Cl_dprep_controller+0x1276>
									 {
										 cl_PrepData.bytearray[count] = Cl_ConsoleRxMsg.data.byte[count+1];
							 
									 }
									 Cl_Dprep_setdata(dataId, cl_PrepData,count);
   9f76e:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
   9f772:	f897 409d 	ldrb.w	r4, [r7, #157]	; 0x9d
   9f776:	4618      	mov	r0, r3
   9f778:	f107 0338 	add.w	r3, r7, #56	; 0x38
   9f77c:	e893 0006 	ldmia.w	r3, {r1, r2}
   9f780:	4623      	mov	r3, r4
   9f782:	4c44      	ldr	r4, [pc, #272]	; (9f894 <Cl_dprep_controller+0x13cc>)
   9f784:	47a0      	blx	r4
						 
						 
						 
								 }
	
						break;
   9f786:	e062      	b.n	9f84e <Cl_dprep_controller+0x1386>
   9f788:	e061      	b.n	9f84e <Cl_dprep_controller+0x1386>
						case EVENT_DPREP_DILYSER_CONNECTED:
		
						// check for micro switches
						Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSER_CONNECTED_CONFIRMED,&data,0);
   9f78a:	f107 0377 	add.w	r3, r7, #119	; 0x77
   9f78e:	2025      	movs	r0, #37	; 0x25
   9f790:	4619      	mov	r1, r3
   9f792:	2200      	movs	r2, #0
   9f794:	4b3d      	ldr	r3, [pc, #244]	; (9f88c <Cl_dprep_controller+0x13c4>)
   9f796:	4798      	blx	r3
   9f798:	4603      	mov	r3, r0
   9f79a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		
						break;
   9f79e:	e056      	b.n	9f84e <Cl_dprep_controller+0x1386>
						case EVENT_DPREP_START_DIALISER_PRIME:
								Cl_Dprep_StartDialyserPrime();
   9f7a0:	4b3d      	ldr	r3, [pc, #244]	; (9f898 <Cl_dprep_controller+0x13d0>)
   9f7a2:	4798      	blx	r3
								sv_cntrl_disable_loopback();
   9f7a4:	4b3d      	ldr	r3, [pc, #244]	; (9f89c <Cl_dprep_controller+0x13d4>)
   9f7a6:	4798      	blx	r3
								 sv_prop_startmixing();
   9f7a8:	4b3d      	ldr	r3, [pc, #244]	; (9f8a0 <Cl_dprep_controller+0x13d8>)
   9f7aa:	4798      	blx	r3
						break;
   9f7ac:	e04f      	b.n	9f84e <Cl_dprep_controller+0x1386>
						case EVENT_DPREP_ALERT:
						Cl_Alarm_GetAlarmStatus(FPCURRENTSTATUS,&alarmstatus1);
   9f7ae:	f107 0337 	add.w	r3, r7, #55	; 0x37
   9f7b2:	203c      	movs	r0, #60	; 0x3c
   9f7b4:	4619      	mov	r1, r3
   9f7b6:	4b3b      	ldr	r3, [pc, #236]	; (9f8a4 <Cl_dprep_controller+0x13dc>)
   9f7b8:	4798      	blx	r3
						{
							//Cl_dprepretcode = Cl_bc_controller(BC_EVENT_CS);		
				
						}

						break;
   9f7ba:	e048      	b.n	9f84e <Cl_dprep_controller+0x1386>
						case EVENT_DPREP_ALARM:
						Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
   9f7bc:	4b2d      	ldr	r3, [pc, #180]	; (9f874 <Cl_dprep_controller+0x13ac>)
   9f7be:	4798      	blx	r3
   9f7c0:	4603      	mov	r3, r0
   9f7c2:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						break;
   9f7c6:	e042      	b.n	9f84e <Cl_dprep_controller+0x1386>
						case EVENT_DPREP_COMMAND_SET_BLDPUMPRATE:
											if(Cl_ConsoleRxMsg.msgready == true)
   9f7c8:	4b2f      	ldr	r3, [pc, #188]	; (9f888 <Cl_dprep_controller+0x13c0>)
   9f7ca:	7e1b      	ldrb	r3, [r3, #24]
   9f7cc:	2b00      	cmp	r3, #0
   9f7ce:	d013      	beq.n	9f7f8 <Cl_dprep_controller+0x1330>
											{
												
												cl_Datastreamtype cl_temp  ;
												cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   9f7d0:	4b2d      	ldr	r3, [pc, #180]	; (9f888 <Cl_dprep_controller+0x13c0>)
   9f7d2:	791b      	ldrb	r3, [r3, #4]
   9f7d4:	733b      	strb	r3, [r7, #12]
												cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[0];
   9f7d6:	4b2c      	ldr	r3, [pc, #176]	; (9f888 <Cl_dprep_controller+0x13c0>)
   9f7d8:	791b      	ldrb	r3, [r3, #4]
   9f7da:	737b      	strb	r3, [r7, #13]
												cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[0];
   9f7dc:	4b2a      	ldr	r3, [pc, #168]	; (9f888 <Cl_dprep_controller+0x13c0>)
   9f7de:	791b      	ldrb	r3, [r3, #4]
   9f7e0:	73bb      	strb	r3, [r7, #14]
												cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[0];
   9f7e2:	4b29      	ldr	r3, [pc, #164]	; (9f888 <Cl_dprep_controller+0x13c0>)
   9f7e4:	791b      	ldrb	r3, [r3, #4]
   9f7e6:	73fb      	strb	r3, [r7, #15]
												cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_SETRATE,cl_temp.Twobyte);
   9f7e8:	89bb      	ldrh	r3, [r7, #12]
   9f7ea:	b29b      	uxth	r3, r3
   9f7ec:	b21b      	sxth	r3, r3
   9f7ee:	200e      	movs	r0, #14
   9f7f0:	4619      	mov	r1, r3
   9f7f2:	4b2d      	ldr	r3, [pc, #180]	; (9f8a8 <Cl_dprep_controller+0x13e0>)
   9f7f4:	4798      	blx	r3
											}
						break;
   9f7f6:	e02a      	b.n	9f84e <Cl_dprep_controller+0x1386>
   9f7f8:	e029      	b.n	9f84e <Cl_dprep_controller+0x1386>
						
						case EVENT_DPREP_CLR_ALARM:
						sv_cntrl_resetyellowalarm();
   9f7fa:	4b1f      	ldr	r3, [pc, #124]	; (9f878 <Cl_dprep_controller+0x13b0>)
   9f7fc:	4798      	blx	r3
						sv_cntrl_resetredalarm();
   9f7fe:	4b1f      	ldr	r3, [pc, #124]	; (9f87c <Cl_dprep_controller+0x13b4>)
   9f800:	4798      	blx	r3
						sv_cntrl_nobuzzer();
   9f802:	4b1f      	ldr	r3, [pc, #124]	; (9f880 <Cl_dprep_controller+0x13b8>)
   9f804:	4798      	blx	r3
						Cl_Dprep_ResetAlertsforReassertion();
   9f806:	4b1f      	ldr	r3, [pc, #124]	; (9f884 <Cl_dprep_controller+0x13bc>)
   9f808:	4798      	blx	r3
						//sv_cntrl_disable_bypass();
						break;
   9f80a:	e020      	b.n	9f84e <Cl_dprep_controller+0x1386>
						case EVENT_DPREP_TICK_500MS:
						//UpdateHeaterControls();
						break;
						case  EVENT_DPREP_TICK_MINUTE:
						{
							float temp1=0;
   9f80c:	f04f 0300 	mov.w	r3, #0
   9f810:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
							Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&temp_temp3);
   9f814:	f107 0332 	add.w	r3, r7, #50	; 0x32
   9f818:	2014      	movs	r0, #20
   9f81a:	4619      	mov	r1, r3
   9f81c:	4b23      	ldr	r3, [pc, #140]	; (9f8ac <Cl_dprep_controller+0x13e4>)
   9f81e:	4798      	blx	r3
// 							uint16_t cal_data  = (402 *100* temp_temp3)/(2*32768);			// resistance of PT100
// 							res_temp_lookuptable(cal_data);									// temperature from look up table in 4 digits
// 							temp_temp3 = res_temp_value/100;									// Temp3 value in XX.yy format
// 	//						temp_temp3 = temp_temp3 - 3.1 + 1.4;										// sensor offset
// 							temp_temp3 = temp_temp3 - 0.4;										// sensor offset
							temp3_cel = (float)temp_temp3 /100;
   9f820:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
   9f822:	4b23      	ldr	r3, [pc, #140]	; (9f8b0 <Cl_dprep_controller+0x13e8>)
   9f824:	4610      	mov	r0, r2
   9f826:	4798      	blx	r3
   9f828:	4602      	mov	r2, r0
   9f82a:	4b22      	ldr	r3, [pc, #136]	; (9f8b4 <Cl_dprep_controller+0x13ec>)
   9f82c:	4610      	mov	r0, r2
   9f82e:	4922      	ldr	r1, [pc, #136]	; (9f8b8 <Cl_dprep_controller+0x13f0>)
   9f830:	4798      	blx	r3
   9f832:	4603      	mov	r3, r0
   9f834:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
							Cl_Dprep_filling_secondscounter++;
   9f838:	4b20      	ldr	r3, [pc, #128]	; (9f8bc <Cl_dprep_controller+0x13f4>)
   9f83a:	881b      	ldrh	r3, [r3, #0]
   9f83c:	b29b      	uxth	r3, r3
   9f83e:	b29b      	uxth	r3, r3
   9f840:	3301      	adds	r3, #1
   9f842:	b29b      	uxth	r3, r3
   9f844:	b29a      	uxth	r2, r3
   9f846:	4b1d      	ldr	r3, [pc, #116]	; (9f8bc <Cl_dprep_controller+0x13f4>)
   9f848:	801a      	strh	r2, [r3, #0]
													}
										
													temp3_cel_backup = temp3_cel;
								}
					#endif
						break;
   9f84a:	e000      	b.n	9f84e <Cl_dprep_controller+0x1386>
						default:
						break;
   9f84c:	bf00      	nop
					}
		break;
   9f84e:	e2d4      	b.n	9fdfa <Cl_dprep_controller+0x1932>
   9f850:	20071c30 	.word	0x20071c30
   9f854:	000a08d1 	.word	0x000a08d1
   9f858:	000a2419 	.word	0x000a2419
   9f85c:	20071c2c 	.word	0x20071c2c
   9f860:	00082e61 	.word	0x00082e61
   9f864:	00099ea1 	.word	0x00099ea1
   9f868:	20071c70 	.word	0x20071c70
   9f86c:	20071c6f 	.word	0x20071c6f
   9f870:	000a23f5 	.word	0x000a23f5
   9f874:	000a0149 	.word	0x000a0149
   9f878:	00099f89 	.word	0x00099f89
   9f87c:	00099f75 	.word	0x00099f75
   9f880:	00099fb1 	.word	0x00099fb1
   9f884:	000a10a9 	.word	0x000a10a9
   9f888:	200723f0 	.word	0x200723f0
   9f88c:	0009ba51 	.word	0x0009ba51
   9f890:	0009a545 	.word	0x0009a545
   9f894:	000a123d 	.word	0x000a123d
   9f898:	000a2079 	.word	0x000a2079
   9f89c:	00099e5d 	.word	0x00099e5d
   9f8a0:	0009a075 	.word	0x0009a075
   9f8a4:	00083035 	.word	0x00083035
   9f8a8:	0008850d 	.word	0x0008850d
   9f8ac:	0008e7f9 	.word	0x0008e7f9
   9f8b0:	000a68a9 	.word	0x000a68a9
   9f8b4:	000a6ac1 	.word	0x000a6ac1
   9f8b8:	42c80000 	.word	0x42c80000
   9f8bc:	20071c4e 	.word	0x20071c4e

		case CL_DPREP_STATE_DIALISER_PRIME:
					switch(cl_dprepevent)
   9f8c0:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
   9f8c4:	3b01      	subs	r3, #1
   9f8c6:	2b19      	cmp	r3, #25
   9f8c8:	f200 8294 	bhi.w	9fdf4 <Cl_dprep_controller+0x192c>
   9f8cc:	a201      	add	r2, pc, #4	; (adr r2, 9f8d4 <Cl_dprep_controller+0x140c>)
   9f8ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9f8d2:	bf00      	nop
   9f8d4:	0009fa41 	.word	0x0009fa41
   9f8d8:	0009fdf5 	.word	0x0009fdf5
   9f8dc:	0009fdf5 	.word	0x0009fdf5
   9f8e0:	0009fdf5 	.word	0x0009fdf5
   9f8e4:	0009fdf5 	.word	0x0009fdf5
   9f8e8:	0009fdf5 	.word	0x0009fdf5
   9f8ec:	0009fdf5 	.word	0x0009fdf5
   9f8f0:	0009fdf5 	.word	0x0009fdf5
   9f8f4:	0009fdf5 	.word	0x0009fdf5
   9f8f8:	0009fdf5 	.word	0x0009fdf5
   9f8fc:	0009fdf5 	.word	0x0009fdf5
   9f900:	0009fdf5 	.word	0x0009fdf5
   9f904:	0009fdf5 	.word	0x0009fdf5
   9f908:	0009fa13 	.word	0x0009fa13
   9f90c:	0009fdf5 	.word	0x0009fdf5
   9f910:	0009fdf5 	.word	0x0009fdf5
   9f914:	0009fdf5 	.word	0x0009fdf5
   9f918:	0009fdf5 	.word	0x0009fdf5
   9f91c:	0009fa57 	.word	0x0009fa57
   9f920:	0009fdf5 	.word	0x0009fdf5
   9f924:	0009fa57 	.word	0x0009fa57
   9f928:	0009f943 	.word	0x0009f943
   9f92c:	0009f93d 	.word	0x0009f93d
   9f930:	0009fdf5 	.word	0x0009fdf5
   9f934:	0009fa27 	.word	0x0009fa27
   9f938:	0009fa33 	.word	0x0009fa33
						break;
						case EVENT_DPREP_TICK_500MS:
					//	UpdateHeaterControls();
						break;
						case EVENT_DPREP_TICK_MINUTE:
							Cl_Dprep_ResetAlertsforReassertion();
   9f93c:	4b9e      	ldr	r3, [pc, #632]	; (9fbb8 <Cl_dprep_controller+0x16f0>)
   9f93e:	4798      	blx	r3
						break;
   9f940:	e08a      	b.n	9fa58 <Cl_dprep_controller+0x1590>
						case EVENT_DPREP_TICK_SECOND:
						//	UpdateHeaterControls();
						{
							float temp1=0;
   9f942:	f04f 0300 	mov.w	r3, #0
   9f946:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
							Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&temp_temp3);
   9f94a:	f107 0332 	add.w	r3, r7, #50	; 0x32
   9f94e:	2014      	movs	r0, #20
   9f950:	4619      	mov	r1, r3
   9f952:	4b9a      	ldr	r3, [pc, #616]	; (9fbbc <Cl_dprep_controller+0x16f4>)
   9f954:	4798      	blx	r3
// 						uint16_t cal_data  = (402 *100* temp_temp3)/(2*32768);			// resistance of PT100
// 						res_temp_lookuptable(cal_data);									// temperature from look up table in 4 digits
// 						temp_temp3 = res_temp_value/100;									// Temp3 value in XX.yy format
// //						temp_temp3 = temp_temp3 - 3.1 + 1.4;										// sensor offset
// //						temp_temp3 = temp_temp3 - 3.1 - 2;										// sensor offset
						temp3_cel = (float)temp_temp3;
   9f956:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
   9f958:	4b99      	ldr	r3, [pc, #612]	; (9fbc0 <Cl_dprep_controller+0x16f8>)
   9f95a:	4610      	mov	r0, r2
   9f95c:	4798      	blx	r3
   9f95e:	4603      	mov	r3, r0
   9f960:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
						
							Cl_Dprep_filling_secondscounter++;
   9f964:	4b97      	ldr	r3, [pc, #604]	; (9fbc4 <Cl_dprep_controller+0x16fc>)
   9f966:	881b      	ldrh	r3, [r3, #0]
   9f968:	b29b      	uxth	r3, r3
   9f96a:	b29b      	uxth	r3, r3
   9f96c:	3301      	adds	r3, #1
   9f96e:	b29b      	uxth	r3, r3
   9f970:	b29a      	uxth	r2, r3
   9f972:	4b94      	ldr	r3, [pc, #592]	; (9fbc4 <Cl_dprep_controller+0x16fc>)
   9f974:	801a      	strh	r2, [r3, #0]
										temp3_cel_backup = temp3_cel;
					}
					
					#endif

							Cl_Dprep_DialyserPrime_secondscounter++;
   9f976:	4b94      	ldr	r3, [pc, #592]	; (9fbc8 <Cl_dprep_controller+0x1700>)
   9f978:	881b      	ldrh	r3, [r3, #0]
   9f97a:	b29b      	uxth	r3, r3
   9f97c:	b29b      	uxth	r3, r3
   9f97e:	3301      	adds	r3, #1
   9f980:	b29b      	uxth	r3, r3
   9f982:	b29a      	uxth	r2, r3
   9f984:	4b90      	ldr	r3, [pc, #576]	; (9fbc8 <Cl_dprep_controller+0x1700>)
   9f986:	801a      	strh	r2, [r3, #0]
							
							
							if(Cl_Dprep_DialyserPrime_secondscounter == 30){ // activate flow alarms only after 30 seconds into rinse
   9f988:	4b8f      	ldr	r3, [pc, #572]	; (9fbc8 <Cl_dprep_controller+0x1700>)
   9f98a:	881b      	ldrh	r3, [r3, #0]
   9f98c:	b21b      	sxth	r3, r3
   9f98e:	2b1e      	cmp	r3, #30
   9f990:	d114      	bne.n	9f9bc <Cl_dprep_controller+0x14f4>
								
								
								Cl_dprepretcode =  Cl_AlarmActivateAlarms(FLOW_NO_FLOW,true );
   9f992:	200c      	movs	r0, #12
   9f994:	2101      	movs	r1, #1
   9f996:	4b8d      	ldr	r3, [pc, #564]	; (9fbcc <Cl_dprep_controller+0x1704>)
   9f998:	4798      	blx	r3
   9f99a:	4603      	mov	r3, r0
   9f99c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
								Cl_dprepretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,true );
   9f9a0:	200d      	movs	r0, #13
   9f9a2:	2101      	movs	r1, #1
   9f9a4:	4b89      	ldr	r3, [pc, #548]	; (9fbcc <Cl_dprep_controller+0x1704>)
   9f9a6:	4798      	blx	r3
   9f9a8:	4603      	mov	r3, r0
   9f9aa:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
								Cl_dprepretcode =  Cl_AlarmActivateAlarms(FLOW_HIGH_FLOWRATE,true );
   9f9ae:	200e      	movs	r0, #14
   9f9b0:	2101      	movs	r1, #1
   9f9b2:	4b86      	ldr	r3, [pc, #536]	; (9fbcc <Cl_dprep_controller+0x1704>)
   9f9b4:	4798      	blx	r3
   9f9b6:	4603      	mov	r3, r0
   9f9b8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
								
								
							}
							
							if(Cl_Dprep_DialyserPrime_secondscounter == 60)
   9f9bc:	4b82      	ldr	r3, [pc, #520]	; (9fbc8 <Cl_dprep_controller+0x1700>)
   9f9be:	881b      	ldrh	r3, [r3, #0]
   9f9c0:	b21b      	sxth	r3, r3
   9f9c2:	2b3c      	cmp	r3, #60	; 0x3c
   9f9c4:	d101      	bne.n	9f9ca <Cl_dprep_controller+0x1502>
							{
								UpdateDprepDialyserPrimeMinuteTick();
   9f9c6:	4b82      	ldr	r3, [pc, #520]	; (9fbd0 <Cl_dprep_controller+0x1708>)
   9f9c8:	4798      	blx	r3
							
							}
							Cl_Dprep_SendPrepStateData(DIALYSER_PRIME_DATA);
   9f9ca:	2003      	movs	r0, #3
   9f9cc:	4b81      	ldr	r3, [pc, #516]	; (9fbd4 <Cl_dprep_controller+0x170c>)
   9f9ce:	4798      	blx	r3
						//	Cl_dprepretcode = Cl_Dprep_ProcessAlarms();

					// check for sub state time out and transition
					

							if( Cl_Dprep_DialyserPrime_Minutescounter >= CL_DPREP_DIALISER_PRIME_TIMEOUT_MIN)
   9f9d0:	4b81      	ldr	r3, [pc, #516]	; (9fbd8 <Cl_dprep_controller+0x1710>)
   9f9d2:	881b      	ldrh	r3, [r3, #0]
   9f9d4:	b21b      	sxth	r3, r3
   9f9d6:	2b04      	cmp	r3, #4
   9f9d8:	dd1a      	ble.n	9fa10 <Cl_dprep_controller+0x1548>
							{
								Cl_Dprep_DialyserPrime_Minutescounter = 0;
   9f9da:	4b7f      	ldr	r3, [pc, #508]	; (9fbd8 <Cl_dprep_controller+0x1710>)
   9f9dc:	2200      	movs	r2, #0
   9f9de:	801a      	strh	r2, [r3, #0]
							//	sv_cntrl_deactivatepump(BLOODPUMP);
							//	cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_STOP,0);
								cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP_DIALYSER_PRIMING, 1); //1 == STOPPED BECAUSE COMPLTED
   9f9e0:	2009      	movs	r0, #9
   9f9e2:	2101      	movs	r1, #1
   9f9e4:	4b7d      	ldr	r3, [pc, #500]	; (9fbdc <Cl_dprep_controller+0x1714>)
   9f9e6:	4798      	blx	r3
							//	Cl_dprepretcode = sv_cntrl_poweroffheater();
							//	Cl_dprepretcode =  sv_cntrl_deactivatepump(DCMOTOR1);
							//	Cl_dprepretcode =  sv_cntrl_deactivatepump(DCMOTOR2);
								//sv_cntrl_enable_loopback();
								 //sv_prop_stopmixing();
								 Cl_Uint32Type temp = Treatdata[ID_dflow];
   9f9e8:	4b7d      	ldr	r3, [pc, #500]	; (9fbe0 <Cl_dprep_controller+0x1718>)
   9f9ea:	695b      	ldr	r3, [r3, #20]
   9f9ec:	67fb      	str	r3, [r7, #124]	; 0x7c
								 Cl_Uint16Type potvalue=0;
   9f9ee:	2300      	movs	r3, #0
   9f9f0:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
// 									 break;
// 									 
// 									 default:
// 									 break;
// 								 }
								sv_cntrl_enable_bypass();
   9f9f4:	4b7b      	ldr	r3, [pc, #492]	; (9fbe4 <Cl_dprep_controller+0x171c>)
   9f9f6:	4798      	blx	r3
								Cl_dprepretcode =  	cl_dprep_notifydacandgotodpreptandby();	
   9f9f8:	4b7b      	ldr	r3, [pc, #492]	; (9fbe8 <Cl_dprep_controller+0x1720>)
   9f9fa:	4798      	blx	r3
   9f9fc:	4603      	mov	r3, r0
   9f9fe:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
								cl_dprepbypassstate = CL_DPREP_BYPASS_ON;
   9fa02:	4b7a      	ldr	r3, [pc, #488]	; (9fbec <Cl_dprep_controller+0x1724>)
   9fa04:	2201      	movs	r2, #1
   9fa06:	701a      	strb	r2, [r3, #0]
								cl_dprepstate = CL_DPREP_STATE_POST_DPREP_STANDBY;	
   9fa08:	4b79      	ldr	r3, [pc, #484]	; (9fbf0 <Cl_dprep_controller+0x1728>)
   9fa0a:	2208      	movs	r2, #8
   9fa0c:	701a      	strb	r2, [r3, #0]
							}
						break;
   9fa0e:	e023      	b.n	9fa58 <Cl_dprep_controller+0x1590>
   9fa10:	e022      	b.n	9fa58 <Cl_dprep_controller+0x1590>
						case EVENT_DPREP_STOP_DIALYSER_PRIME:
						//Cl_Stop_Dialyzer_Prime();
						Cl_dprep_StopMixing();
   9fa12:	4b78      	ldr	r3, [pc, #480]	; (9fbf4 <Cl_dprep_controller+0x172c>)
   9fa14:	4798      	blx	r3
						cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP_DIALYSER_PRIMING,0);
   9fa16:	2009      	movs	r0, #9
   9fa18:	2100      	movs	r1, #0
   9fa1a:	4b70      	ldr	r3, [pc, #448]	; (9fbdc <Cl_dprep_controller+0x1714>)
   9fa1c:	4798      	blx	r3
						cl_dprepstate = CL_DPREP_STATE_DIALISER_PRIME_STOPPED;
   9fa1e:	4b74      	ldr	r3, [pc, #464]	; (9fbf0 <Cl_dprep_controller+0x1728>)
   9fa20:	2207      	movs	r2, #7
   9fa22:	701a      	strb	r2, [r3, #0]
						break;
   9fa24:	e018      	b.n	9fa58 <Cl_dprep_controller+0x1590>
						break;
						case EVENT_DPREP_ALARM:
						Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
   9fa26:	4b74      	ldr	r3, [pc, #464]	; (9fbf8 <Cl_dprep_controller+0x1730>)
   9fa28:	4798      	blx	r3
   9fa2a:	4603      	mov	r3, r0
   9fa2c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						break;
   9fa30:	e012      	b.n	9fa58 <Cl_dprep_controller+0x1590>
						case EVENT_DPREP_ALERT:
						Cl_Alarm_GetAlarmStatus(FPCURRENTSTATUS,&alarmstatus1);
   9fa32:	f107 0337 	add.w	r3, r7, #55	; 0x37
   9fa36:	203c      	movs	r0, #60	; 0x3c
   9fa38:	4619      	mov	r1, r3
   9fa3a:	4b70      	ldr	r3, [pc, #448]	; (9fbfc <Cl_dprep_controller+0x1734>)
   9fa3c:	4798      	blx	r3
						if(alarmstatus1)
						{
							//Cl_dprepretcode = Cl_bc_controller(BC_EVENT_CS);
						}

						break;
   9fa3e:	e00b      	b.n	9fa58 <Cl_dprep_controller+0x1590>
						
						case EVENT_DPREP_CLR_ALARM:
						sv_cntrl_resetyellowalarm();
   9fa40:	4b6f      	ldr	r3, [pc, #444]	; (9fc00 <Cl_dprep_controller+0x1738>)
   9fa42:	4798      	blx	r3
						sv_cntrl_resetredalarm();
   9fa44:	4b6f      	ldr	r3, [pc, #444]	; (9fc04 <Cl_dprep_controller+0x173c>)
   9fa46:	4798      	blx	r3
						sv_cntrl_nobuzzer();
   9fa48:	4b6f      	ldr	r3, [pc, #444]	; (9fc08 <Cl_dprep_controller+0x1740>)
   9fa4a:	4798      	blx	r3
						Cl_Dprep_ResetAlertsforReassertion();
   9fa4c:	4b5a      	ldr	r3, [pc, #360]	; (9fbb8 <Cl_dprep_controller+0x16f0>)
   9fa4e:	4798      	blx	r3
						sv_cntrl_disable_bypass();
   9fa50:	4b6e      	ldr	r3, [pc, #440]	; (9fc0c <Cl_dprep_controller+0x1744>)
   9fa52:	4798      	blx	r3
						break;
   9fa54:	e000      	b.n	9fa58 <Cl_dprep_controller+0x1590>
					switch(cl_dprepevent)
					{
						
						case EVENT_DPREP_TICK_50MS:
									
						break;
   9fa56:	bf00      	nop
						Cl_Dprep_ResetAlertsforReassertion();
						sv_cntrl_disable_bypass();
						break;
						
					}
		break;
   9fa58:	e1cc      	b.n	9fdf4 <Cl_dprep_controller+0x192c>
		case CL_DPREP_STATE_DIALISER_PRIME_STOPPED:
						switch(cl_dprepevent)
   9fa5a:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
   9fa5e:	2b0d      	cmp	r3, #13
   9fa60:	d000      	beq.n	9fa64 <Cl_dprep_controller+0x159c>
								case EVENT_DPREP_START_DIALISER_PRIME:
								Cl_Dprep_StartDialyserPrime();
								sv_cntrl_disable_loopback();
								sv_prop_startmixing();
								 break;
								 default:break;
   9fa62:	e006      	b.n	9fa72 <Cl_dprep_controller+0x15aa>
		case CL_DPREP_STATE_DIALISER_PRIME_STOPPED:
						switch(cl_dprepevent)
							{
		
								case EVENT_DPREP_START_DIALISER_PRIME:
								Cl_Dprep_StartDialyserPrime();
   9fa64:	4b6a      	ldr	r3, [pc, #424]	; (9fc10 <Cl_dprep_controller+0x1748>)
   9fa66:	4798      	blx	r3
								sv_cntrl_disable_loopback();
   9fa68:	4b6a      	ldr	r3, [pc, #424]	; (9fc14 <Cl_dprep_controller+0x174c>)
   9fa6a:	4798      	blx	r3
								sv_prop_startmixing();
   9fa6c:	4b6a      	ldr	r3, [pc, #424]	; (9fc18 <Cl_dprep_controller+0x1750>)
   9fa6e:	4798      	blx	r3
								 break;
   9fa70:	bf00      	nop
								 default:break;
							}
		break;
   9fa72:	e1c2      	b.n	9fdfa <Cl_dprep_controller+0x1932>
		case CL_DPREP_STATE_POST_DPREP_STANDBY:
		
			switch(cl_dprepevent)
   9fa74:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
   9fa78:	3b16      	subs	r3, #22
   9fa7a:	2b06      	cmp	r3, #6
   9fa7c:	f200 81bc 	bhi.w	9fdf8 <Cl_dprep_controller+0x1930>
   9fa80:	a201      	add	r2, pc, #4	; (adr r2, 9fa88 <Cl_dprep_controller+0x15c0>)
   9fa82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9fa86:	bf00      	nop
   9fa88:	0009faf3 	.word	0x0009faf3
   9fa8c:	0009faed 	.word	0x0009faed
   9fa90:	0009fdf9 	.word	0x0009fdf9
   9fa94:	0009fab3 	.word	0x0009fab3
   9fa98:	0009faa5 	.word	0x0009faa5
   9fa9c:	0009facf 	.word	0x0009facf
   9faa0:	0009fabf 	.word	0x0009fabf
			{
				case EVENT_DPREP_ALERT:
				Cl_Alarm_GetAlarmStatus(FPCURRENTSTATUS,&alarmstatus1);
   9faa4:	f107 0337 	add.w	r3, r7, #55	; 0x37
   9faa8:	203c      	movs	r0, #60	; 0x3c
   9faaa:	4619      	mov	r1, r3
   9faac:	4b53      	ldr	r3, [pc, #332]	; (9fbfc <Cl_dprep_controller+0x1734>)
   9faae:	4798      	blx	r3
				if(alarmstatus1)
				{
				//	Cl_dprepretcode = Cl_bc_controller(BC_EVENT_CS);
				}

				break;
   9fab0:	e081      	b.n	9fbb6 <Cl_dprep_controller+0x16ee>
				case EVENT_DPREP_ALARM:
				Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
   9fab2:	4b51      	ldr	r3, [pc, #324]	; (9fbf8 <Cl_dprep_controller+0x1730>)
   9fab4:	4798      	blx	r3
   9fab6:	4603      	mov	r3, r0
   9fab8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
				break;
   9fabc:	e07b      	b.n	9fbb6 <Cl_dprep_controller+0x16ee>
				case EVENT_DPREP_PATIENT_READY:
				cl_bp_controller(CL_BP_EVENT_STOP,0);
   9fabe:	2004      	movs	r0, #4
   9fac0:	2100      	movs	r1, #0
   9fac2:	4b56      	ldr	r3, [pc, #344]	; (9fc1c <Cl_dprep_controller+0x1754>)
   9fac4:	4798      	blx	r3
				Cl_PatientState = CL_DPREP_PATIENT_STATE_WAITING_FOR_BD;
   9fac6:	4b56      	ldr	r3, [pc, #344]	; (9fc20 <Cl_dprep_controller+0x1758>)
   9fac8:	2201      	movs	r2, #1
   9faca:	701a      	strb	r2, [r3, #0]
				break;
   9facc:	e073      	b.n	9fbb6 <Cl_dprep_controller+0x16ee>
				case EVENT_DPREP_PATIENT_CONNECTED:
				if(Cl_PatientState == CL_DPREP_PATIENT_STATE_BLOOD_DETECTED )
   9face:	4b54      	ldr	r3, [pc, #336]	; (9fc20 <Cl_dprep_controller+0x1758>)
   9fad0:	781b      	ldrb	r3, [r3, #0]
   9fad2:	2b02      	cmp	r3, #2
   9fad4:	d109      	bne.n	9faea <Cl_dprep_controller+0x1622>
				{
					Cl_dprepretcode = Cl_mac_apprequesthandler(MACREQ_DIALYSER_PRIME_COMPLETED);
   9fad6:	204c      	movs	r0, #76	; 0x4c
   9fad8:	4b52      	ldr	r3, [pc, #328]	; (9fc24 <Cl_dprep_controller+0x175c>)
   9fada:	4798      	blx	r3
   9fadc:	4603      	mov	r3, r0
   9fade:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
					cl_dprepstate = CL_DPREP_STATE_READY_FOR_DALYSIS;
   9fae2:	4b43      	ldr	r3, [pc, #268]	; (9fbf0 <Cl_dprep_controller+0x1728>)
   9fae4:	2209      	movs	r2, #9
   9fae6:	701a      	strb	r2, [r3, #0]
				}
				
				break;
   9fae8:	e065      	b.n	9fbb6 <Cl_dprep_controller+0x16ee>
   9faea:	e064      	b.n	9fbb6 <Cl_dprep_controller+0x16ee>

				case EVENT_DPREP_TICK_MINUTE:
					Cl_Dprep_ResetAlertsforReassertion();
   9faec:	4b32      	ldr	r3, [pc, #200]	; (9fbb8 <Cl_dprep_controller+0x16f0>)
   9faee:	4798      	blx	r3
				break;
   9faf0:	e061      	b.n	9fbb6 <Cl_dprep_controller+0x16ee>
				case EVENT_DPREP_TICK_SECOND:
				
				
					if(Cl_PatientState == CL_DPREP_PATIENT_STATE_WAITING_FOR_BD )
   9faf2:	4b4b      	ldr	r3, [pc, #300]	; (9fc20 <Cl_dprep_controller+0x1758>)
   9faf4:	781b      	ldrb	r3, [r3, #0]
   9faf6:	2b01      	cmp	r3, #1
   9faf8:	d13d      	bne.n	9fb76 <Cl_dprep_controller+0x16ae>
					{
						Cl_SysStat_GetSensor_Status_Query(SENSOR_BDSTATUS , &temp);
   9fafa:	f107 0330 	add.w	r3, r7, #48	; 0x30
   9fafe:	200a      	movs	r0, #10
   9fb00:	4619      	mov	r1, r3
   9fb02:	4b2e      	ldr	r3, [pc, #184]	; (9fbbc <Cl_dprep_controller+0x16f4>)
   9fb04:	4798      	blx	r3
				
					if(temp == 0)
   9fb06:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
   9fb08:	2b00      	cmp	r3, #0
   9fb0a:	d134      	bne.n	9fb76 <Cl_dprep_controller+0x16ae>
					{
					Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"BLOOD",5);
   9fb0c:	2018      	movs	r0, #24
   9fb0e:	4946      	ldr	r1, [pc, #280]	; (9fc28 <Cl_dprep_controller+0x1760>)
   9fb10:	2205      	movs	r2, #5
   9fb12:	4b46      	ldr	r3, [pc, #280]	; (9fc2c <Cl_dprep_controller+0x1764>)
   9fb14:	4798      	blx	r3
					//	Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_READY_FOR_DIALYSIS,NULL,0);
					//	cl_dprepstate = CL_DPREP_STATE_READY_FOR_DALYSIS;
									Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_BLOOD_DETECTED,NULL,0);
   9fb16:	2027      	movs	r0, #39	; 0x27
   9fb18:	2100      	movs	r1, #0
   9fb1a:	2200      	movs	r2, #0
   9fb1c:	4b43      	ldr	r3, [pc, #268]	; (9fc2c <Cl_dprep_controller+0x1764>)
   9fb1e:	4798      	blx	r3
   9fb20:	4603      	mov	r3, r0
   9fb22:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
									Cl_PatientState = CL_DPREP_PATIENT_STATE_BLOOD_DETECTED;
   9fb26:	4b3e      	ldr	r3, [pc, #248]	; (9fc20 <Cl_dprep_controller+0x1758>)
   9fb28:	2202      	movs	r2, #2
   9fb2a:	701a      	strb	r2, [r3, #0]
									
							
										Cl_Uint32Type temp = Treatdata[ID_bolusvol];
   9fb2c:	4b2c      	ldr	r3, [pc, #176]	; (9fbe0 <Cl_dprep_controller+0x1718>)
   9fb2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   9fb30:	60bb      	str	r3, [r7, #8]
										hep_calibration(temp);
   9fb32:	68bb      	ldr	r3, [r7, #8]
   9fb34:	4618      	mov	r0, r3
   9fb36:	4b3e      	ldr	r3, [pc, #248]	; (9fc30 <Cl_dprep_controller+0x1768>)
   9fb38:	4798      	blx	r3
										Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&temp,2);
   9fb3a:	f107 0308 	add.w	r3, r7, #8
   9fb3e:	2019      	movs	r0, #25
   9fb40:	4619      	mov	r1, r3
   9fb42:	2202      	movs	r2, #2
   9fb44:	4b39      	ldr	r3, [pc, #228]	; (9fc2c <Cl_dprep_controller+0x1764>)
   9fb46:	4798      	blx	r3
										Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&hep_speed,2);
   9fb48:	2019      	movs	r0, #25
   9fb4a:	493a      	ldr	r1, [pc, #232]	; (9fc34 <Cl_dprep_controller+0x176c>)
   9fb4c:	2202      	movs	r2, #2
   9fb4e:	4b37      	ldr	r3, [pc, #220]	; (9fc2c <Cl_dprep_controller+0x1764>)
   9fb50:	4798      	blx	r3
										cl_hep_controller(CL_HEP_EVENT_SET_NORMAL_DELIVERY_RATE,hep_speed);
   9fb52:	4b38      	ldr	r3, [pc, #224]	; (9fc34 <Cl_dprep_controller+0x176c>)
   9fb54:	681b      	ldr	r3, [r3, #0]
   9fb56:	2006      	movs	r0, #6
   9fb58:	4619      	mov	r1, r3
   9fb5a:	4b37      	ldr	r3, [pc, #220]	; (9fc38 <Cl_dprep_controller+0x1770>)
   9fb5c:	4798      	blx	r3
										cl_wait(100);
   9fb5e:	2064      	movs	r0, #100	; 0x64
   9fb60:	4b36      	ldr	r3, [pc, #216]	; (9fc3c <Cl_dprep_controller+0x1774>)
   9fb62:	4798      	blx	r3
										cl_hep_controller(CL_HEP_EVENT_START_NORMAL_DELIVERY,0);
   9fb64:	200a      	movs	r0, #10
   9fb66:	2100      	movs	r1, #0
   9fb68:	4b33      	ldr	r3, [pc, #204]	; (9fc38 <Cl_dprep_controller+0x1770>)
   9fb6a:	4798      	blx	r3
										Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"HEPARIN",7);
   9fb6c:	2018      	movs	r0, #24
   9fb6e:	4934      	ldr	r1, [pc, #208]	; (9fc40 <Cl_dprep_controller+0x1778>)
   9fb70:	2207      	movs	r2, #7
   9fb72:	4b2e      	ldr	r3, [pc, #184]	; (9fc2c <Cl_dprep_controller+0x1764>)
   9fb74:	4798      	blx	r3
										
									
					}
				
					}
					if(Cl_PatientState == CL_DPREP_PATIENT_STATE_BLOOD_DETECTED )
   9fb76:	4b2a      	ldr	r3, [pc, #168]	; (9fc20 <Cl_dprep_controller+0x1758>)
   9fb78:	781b      	ldrb	r3, [r3, #0]
   9fb7a:	2b02      	cmp	r3, #2
   9fb7c:	d11a      	bne.n	9fbb4 <Cl_dprep_controller+0x16ec>
					{
					Cl_Dprep_hepbolus_secondscounter++;
   9fb7e:	4b31      	ldr	r3, [pc, #196]	; (9fc44 <Cl_dprep_controller+0x177c>)
   9fb80:	881b      	ldrh	r3, [r3, #0]
   9fb82:	b29b      	uxth	r3, r3
   9fb84:	b29b      	uxth	r3, r3
   9fb86:	3301      	adds	r3, #1
   9fb88:	b29b      	uxth	r3, r3
   9fb8a:	b29a      	uxth	r2, r3
   9fb8c:	4b2d      	ldr	r3, [pc, #180]	; (9fc44 <Cl_dprep_controller+0x177c>)
   9fb8e:	801a      	strh	r2, [r3, #0]
					if (Cl_Dprep_hepbolus_secondscounter == 60)
   9fb90:	4b2c      	ldr	r3, [pc, #176]	; (9fc44 <Cl_dprep_controller+0x177c>)
   9fb92:	881b      	ldrh	r3, [r3, #0]
   9fb94:	b21b      	sxth	r3, r3
   9fb96:	2b3c      	cmp	r3, #60	; 0x3c
   9fb98:	d10c      	bne.n	9fbb4 <Cl_dprep_controller+0x16ec>
					{
						Cl_Dprep_hepbolus_secondscounter = 0;
   9fb9a:	4b2a      	ldr	r3, [pc, #168]	; (9fc44 <Cl_dprep_controller+0x177c>)
   9fb9c:	2200      	movs	r2, #0
   9fb9e:	801a      	strh	r2, [r3, #0]
						Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DONE_HP",7);
   9fba0:	2018      	movs	r0, #24
   9fba2:	4929      	ldr	r1, [pc, #164]	; (9fc48 <Cl_dprep_controller+0x1780>)
   9fba4:	2207      	movs	r2, #7
   9fba6:	4b21      	ldr	r3, [pc, #132]	; (9fc2c <Cl_dprep_controller+0x1764>)
   9fba8:	4798      	blx	r3
						cl_hep_controller(CL_HEP_EVENT_STOPBOLUS,0);
   9fbaa:	2009      	movs	r0, #9
   9fbac:	2100      	movs	r1, #0
   9fbae:	4b22      	ldr	r3, [pc, #136]	; (9fc38 <Cl_dprep_controller+0x1770>)
   9fbb0:	4798      	blx	r3
					}
					}
				break;
   9fbb2:	e7ff      	b.n	9fbb4 <Cl_dprep_controller+0x16ec>
   9fbb4:	bf00      	nop
			}
		
		break;
   9fbb6:	e11f      	b.n	9fdf8 <Cl_dprep_controller+0x1930>
   9fbb8:	000a10a9 	.word	0x000a10a9
   9fbbc:	0008e7f9 	.word	0x0008e7f9
   9fbc0:	000a68a9 	.word	0x000a68a9
   9fbc4:	20071c4e 	.word	0x20071c4e
   9fbc8:	20071c5a 	.word	0x20071c5a
   9fbcc:	00082e61 	.word	0x00082e61
   9fbd0:	000a0879 	.word	0x000a0879
   9fbd4:	000a08d1 	.word	0x000a08d1
   9fbd8:	20071c5c 	.word	0x20071c5c
   9fbdc:	0008850d 	.word	0x0008850d
   9fbe0:	2007265c 	.word	0x2007265c
   9fbe4:	00099e79 	.word	0x00099e79
   9fbe8:	000a00c5 	.word	0x000a00c5
   9fbec:	20071c70 	.word	0x20071c70
   9fbf0:	20071c6f 	.word	0x20071c6f
   9fbf4:	000a2449 	.word	0x000a2449
   9fbf8:	000a0149 	.word	0x000a0149
   9fbfc:	00083035 	.word	0x00083035
   9fc00:	00099f89 	.word	0x00099f89
   9fc04:	00099f75 	.word	0x00099f75
   9fc08:	00099fb1 	.word	0x00099fb1
   9fc0c:	00099ea1 	.word	0x00099ea1
   9fc10:	000a2079 	.word	0x000a2079
   9fc14:	00099e5d 	.word	0x00099e5d
   9fc18:	0009a075 	.word	0x0009a075
   9fc1c:	00093305 	.word	0x00093305
   9fc20:	20071c6e 	.word	0x20071c6e
   9fc24:	0008bc51 	.word	0x0008bc51
   9fc28:	000a8d3c 	.word	0x000a8d3c
   9fc2c:	0009ba51 	.word	0x0009ba51
   9fc30:	00083fed 	.word	0x00083fed
   9fc34:	20072174 	.word	0x20072174
   9fc38:	00093a0d 	.word	0x00093a0d
   9fc3c:	00093195 	.word	0x00093195
   9fc40:	000a8d44 	.word	0x000a8d44
   9fc44:	20071c4c 	.word	0x20071c4c
   9fc48:	000a8d4c 	.word	0x000a8d4c
		case CL_DPREP_STATE_READY_FOR_DALYSIS:
				switch(cl_dprepevent)
   9fc4c:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
   9fc50:	3b03      	subs	r3, #3
   9fc52:	2b17      	cmp	r3, #23
   9fc54:	f200 80c8 	bhi.w	9fde8 <Cl_dprep_controller+0x1920>
   9fc58:	a201      	add	r2, pc, #4	; (adr r2, 9fc60 <Cl_dprep_controller+0x1798>)
   9fc5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9fc5e:	bf00      	nop
   9fc60:	0009fd79 	.word	0x0009fd79
   9fc64:	0009fcfb 	.word	0x0009fcfb
   9fc68:	0009fde9 	.word	0x0009fde9
   9fc6c:	0009fde9 	.word	0x0009fde9
   9fc70:	0009fde9 	.word	0x0009fde9
   9fc74:	0009fde9 	.word	0x0009fde9
   9fc78:	0009fde9 	.word	0x0009fde9
   9fc7c:	0009fde9 	.word	0x0009fde9
   9fc80:	0009fde9 	.word	0x0009fde9
   9fc84:	0009fde9 	.word	0x0009fde9
   9fc88:	0009fde9 	.word	0x0009fde9
   9fc8c:	0009fde9 	.word	0x0009fde9
   9fc90:	0009fde9 	.word	0x0009fde9
   9fc94:	0009fde9 	.word	0x0009fde9
   9fc98:	0009fde9 	.word	0x0009fde9
   9fc9c:	0009fde9 	.word	0x0009fde9
   9fca0:	0009fde9 	.word	0x0009fde9
   9fca4:	0009fde9 	.word	0x0009fde9
   9fca8:	0009fde9 	.word	0x0009fde9
   9fcac:	0009fcd5 	.word	0x0009fcd5
   9fcb0:	0009fccf 	.word	0x0009fccf
   9fcb4:	0009fde9 	.word	0x0009fde9
   9fcb8:	0009fddd 	.word	0x0009fddd
   9fcbc:	0009fcc1 	.word	0x0009fcc1
				{
					
					case EVENT_DPREP_ALERT:
					Cl_Alarm_GetAlarmStatus(FPCURRENTSTATUS,&alarmstatus1);
   9fcc0:	f107 0337 	add.w	r3, r7, #55	; 0x37
   9fcc4:	203c      	movs	r0, #60	; 0x3c
   9fcc6:	4619      	mov	r1, r3
   9fcc8:	4b4f      	ldr	r3, [pc, #316]	; (9fe08 <Cl_dprep_controller+0x1940>)
   9fcca:	4798      	blx	r3
					if(alarmstatus1)
					{
					//	Cl_dprepretcode = Cl_bc_controller(BC_EVENT_CS);
					}

					break;
   9fccc:	e08d      	b.n	9fdea <Cl_dprep_controller+0x1922>
					case EVENT_DPREP_TICK_MINUTE:
						Cl_Dprep_ResetAlertsforReassertion();
   9fcce:	4b4f      	ldr	r3, [pc, #316]	; (9fe0c <Cl_dprep_controller+0x1944>)
   9fcd0:	4798      	blx	r3
					break;
   9fcd2:	e08a      	b.n	9fdea <Cl_dprep_controller+0x1922>
					case EVENT_DPREP_TICK_SECOND:
									
					Cl_Dprep_SendPrepStateData(DIALYSIS_PREP_DATA);
   9fcd4:	2004      	movs	r0, #4
   9fcd6:	4b4e      	ldr	r3, [pc, #312]	; (9fe10 <Cl_dprep_controller+0x1948>)
   9fcd8:	4798      	blx	r3
					Cl_SysStat_GetSensor_Status_Query(SENSOR_BDSTATUS , &temp);
   9fcda:	f107 0330 	add.w	r3, r7, #48	; 0x30
   9fcde:	200a      	movs	r0, #10
   9fce0:	4619      	mov	r1, r3
   9fce2:	4b4c      	ldr	r3, [pc, #304]	; (9fe14 <Cl_dprep_controller+0x194c>)
   9fce4:	4798      	blx	r3
					if( temp == 0)
   9fce6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
   9fce8:	2b00      	cmp	r3, #0
   9fcea:	d105      	bne.n	9fcf8 <Cl_dprep_controller+0x1830>
					{
						
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"BLOOD",5);
   9fcec:	2018      	movs	r0, #24
   9fcee:	494a      	ldr	r1, [pc, #296]	; (9fe18 <Cl_dprep_controller+0x1950>)
   9fcf0:	2205      	movs	r2, #5
   9fcf2:	4b4a      	ldr	r3, [pc, #296]	; (9fe1c <Cl_dprep_controller+0x1954>)
   9fcf4:	4798      	blx	r3
					}
					break;
   9fcf6:	e078      	b.n	9fdea <Cl_dprep_controller+0x1922>
   9fcf8:	e077      	b.n	9fdea <Cl_dprep_controller+0x1922>
					case 	EVENT_DPREP_COMMAND_GET_DATA:
							if(Cl_ConsoleRxMsg.msgready == true)
   9fcfa:	4b49      	ldr	r3, [pc, #292]	; (9fe20 <Cl_dprep_controller+0x1958>)
   9fcfc:	7e1b      	ldrb	r3, [r3, #24]
   9fcfe:	2b00      	cmp	r3, #0
   9fd00:	d039      	beq.n	9fd76 <Cl_dprep_controller+0x18ae>
							{
								switch(Cl_ConsoleRxMsg.data.byte[0])
   9fd02:	4b47      	ldr	r3, [pc, #284]	; (9fe20 <Cl_dprep_controller+0x1958>)
   9fd04:	791b      	ldrb	r3, [r3, #4]
   9fd06:	2b03      	cmp	r3, #3
   9fd08:	d002      	beq.n	9fd10 <Cl_dprep_controller+0x1848>
   9fd0a:	2b04      	cmp	r3, #4
   9fd0c:	d016      	beq.n	9fd3c <Cl_dprep_controller+0x1874>
									command = CON_TX_COMMAND_SYSDATA;
									dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
									Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
									break;
									default:break;
   9fd0e:	e032      	b.n	9fd76 <Cl_dprep_controller+0x18ae>
							if(Cl_ConsoleRxMsg.msgready == true)
							{
								switch(Cl_ConsoleRxMsg.data.byte[0])
								{
									case CON_RX_PARAM_DATA_DIALYSER_PRIME_STATUS:
									command = CON_TX_COMMAND_SYSDATA;
   9fd10:	2316      	movs	r3, #22
   9fd12:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
									dataarray[0] = CON_TX_PARAM_DATA_DIALYSER_PRIME_STATUS;
   9fd16:	2303      	movs	r3, #3
   9fd18:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
									dataarray[1] = 0;
   9fd1c:	2300      	movs	r3, #0
   9fd1e:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
									Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   9fd22:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
   9fd26:	f107 0370 	add.w	r3, r7, #112	; 0x70
   9fd2a:	4610      	mov	r0, r2
   9fd2c:	4619      	mov	r1, r3
   9fd2e:	2202      	movs	r2, #2
   9fd30:	4b3a      	ldr	r3, [pc, #232]	; (9fe1c <Cl_dprep_controller+0x1954>)
   9fd32:	4798      	blx	r3
   9fd34:	4603      	mov	r3, r0
   9fd36:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
									break;
   9fd3a:	e01c      	b.n	9fd76 <Cl_dprep_controller+0x18ae>
									case	CON_RX_PARAM_DATA_DIALYSIS_STATUS:
									command = CON_TX_COMMAND_SYSDATA;
   9fd3c:	2316      	movs	r3, #22
   9fd3e:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
									dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_STATUS;
   9fd42:	2304      	movs	r3, #4
   9fd44:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DIALYSIS_STATUS, &dataarray[1]);
   9fd48:	f107 0370 	add.w	r3, r7, #112	; 0x70
   9fd4c:	3301      	adds	r3, #1
   9fd4e:	2004      	movs	r0, #4
   9fd50:	4619      	mov	r1, r3
   9fd52:	4b34      	ldr	r3, [pc, #208]	; (9fe24 <Cl_dprep_controller+0x195c>)
   9fd54:	4798      	blx	r3
   9fd56:	4603      	mov	r3, r0
   9fd58:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
									Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   9fd5c:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
   9fd60:	f107 0370 	add.w	r3, r7, #112	; 0x70
   9fd64:	4610      	mov	r0, r2
   9fd66:	4619      	mov	r1, r3
   9fd68:	2202      	movs	r2, #2
   9fd6a:	4b2c      	ldr	r3, [pc, #176]	; (9fe1c <Cl_dprep_controller+0x1954>)
   9fd6c:	4798      	blx	r3
   9fd6e:	4603      	mov	r3, r0
   9fd70:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
									break;
   9fd74:	bf00      	nop
									default:break;
								}
							}
				
						break;
   9fd76:	e038      	b.n	9fdea <Cl_dprep_controller+0x1922>
						case EVENT_DPREP_COMMAND_SET_DATA:
								 if(Cl_ConsoleRxMsg.msgready == true)
   9fd78:	4b29      	ldr	r3, [pc, #164]	; (9fe20 <Cl_dprep_controller+0x1958>)
   9fd7a:	7e1b      	ldrb	r3, [r3, #24]
   9fd7c:	2b00      	cmp	r3, #0
   9fd7e:	d02c      	beq.n	9fdda <Cl_dprep_controller+0x1912>
								 {
						 
						 
									 Cl_ConsoleRxDataType dataId;
									 Cl_Uint8Type count;
									 dataId = Cl_ConsoleRxMsg.data.byte[0];
   9fd80:	4b27      	ldr	r3, [pc, #156]	; (9fe20 <Cl_dprep_controller+0x1958>)
   9fd82:	791b      	ldrb	r3, [r3, #4]
   9fd84:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
									 for (count =0; count < Cl_ConsoleRxMsg.datasize;count++)
   9fd88:	2300      	movs	r3, #0
   9fd8a:	f887 309c 	strb.w	r3, [r7, #156]	; 0x9c
   9fd8e:	e011      	b.n	9fdb4 <Cl_dprep_controller+0x18ec>
									 {
										 cl_PrepData.bytearray[count] = Cl_ConsoleRxMsg.data.byte[count+1];
   9fd90:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
   9fd94:	f897 209c 	ldrb.w	r2, [r7, #156]	; 0x9c
   9fd98:	3201      	adds	r2, #1
   9fd9a:	4921      	ldr	r1, [pc, #132]	; (9fe20 <Cl_dprep_controller+0x1958>)
   9fd9c:	440a      	add	r2, r1
   9fd9e:	7912      	ldrb	r2, [r2, #4]
   9fda0:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
   9fda4:	440b      	add	r3, r1
   9fda6:	f803 2c68 	strb.w	r2, [r3, #-104]
						 
						 
									 Cl_ConsoleRxDataType dataId;
									 Cl_Uint8Type count;
									 dataId = Cl_ConsoleRxMsg.data.byte[0];
									 for (count =0; count < Cl_ConsoleRxMsg.datasize;count++)
   9fdaa:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
   9fdae:	3301      	adds	r3, #1
   9fdb0:	f887 309c 	strb.w	r3, [r7, #156]	; 0x9c
   9fdb4:	4b1a      	ldr	r3, [pc, #104]	; (9fe20 <Cl_dprep_controller+0x1958>)
   9fdb6:	78db      	ldrb	r3, [r3, #3]
   9fdb8:	f897 209c 	ldrb.w	r2, [r7, #156]	; 0x9c
   9fdbc:	429a      	cmp	r2, r3
   9fdbe:	d3e7      	bcc.n	9fd90 <Cl_dprep_controller+0x18c8>
									 {
										 cl_PrepData.bytearray[count] = Cl_ConsoleRxMsg.data.byte[count+1];
							 
									 }
									 Cl_Dprep_setdata(dataId, cl_PrepData,count);
   9fdc0:	f897 3079 	ldrb.w	r3, [r7, #121]	; 0x79
   9fdc4:	f897 409c 	ldrb.w	r4, [r7, #156]	; 0x9c
   9fdc8:	4618      	mov	r0, r3
   9fdca:	f107 0338 	add.w	r3, r7, #56	; 0x38
   9fdce:	e893 0006 	ldmia.w	r3, {r1, r2}
   9fdd2:	4623      	mov	r3, r4
   9fdd4:	4c14      	ldr	r4, [pc, #80]	; (9fe28 <Cl_dprep_controller+0x1960>)
   9fdd6:	47a0      	blx	r4
						 
						 
						 
								 }
	
						break;
   9fdd8:	e007      	b.n	9fdea <Cl_dprep_controller+0x1922>
   9fdda:	e006      	b.n	9fdea <Cl_dprep_controller+0x1922>
			
						case EVENT_DPREP_ALARM:
						Cl_dprepretcode = Cl_Dprep_ProcessAlarms();
   9fddc:	4b13      	ldr	r3, [pc, #76]	; (9fe2c <Cl_dprep_controller+0x1964>)
   9fdde:	4798      	blx	r3
   9fde0:	4603      	mov	r3, r0
   9fde2:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						break;
   9fde6:	e000      	b.n	9fdea <Cl_dprep_controller+0x1922>
					default:
					break;
   9fde8:	bf00      	nop
				}
		break;
   9fdea:	e006      	b.n	9fdfa <Cl_dprep_controller+0x1932>
			}
			
			break;

		}
		break;
   9fdec:	bf00      	nop
   9fdee:	e004      	b.n	9fdfa <Cl_dprep_controller+0x1932>
			
		
		}
		}
		
		break;
   9fdf0:	bf00      	nop
   9fdf2:	e002      	b.n	9fdfa <Cl_dprep_controller+0x1932>
						Cl_Dprep_ResetAlertsforReassertion();
						sv_cntrl_disable_bypass();
						break;
						
					}
		break;
   9fdf4:	bf00      	nop
   9fdf6:	e000      	b.n	9fdfa <Cl_dprep_controller+0x1932>
					}
					}
				break;
			}
		
		break;
   9fdf8:	bf00      	nop
				}
		break;

		}

	return Cl_dprepretcode;
   9fdfa:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
}
   9fdfe:	4618      	mov	r0, r3
   9fe00:	37a4      	adds	r7, #164	; 0xa4
   9fe02:	46bd      	mov	sp, r7
   9fe04:	bd90      	pop	{r4, r7, pc}
   9fe06:	bf00      	nop
   9fe08:	00083035 	.word	0x00083035
   9fe0c:	000a10a9 	.word	0x000a10a9
   9fe10:	000a08d1 	.word	0x000a08d1
   9fe14:	0008e7f9 	.word	0x0008e7f9
   9fe18:	000a8d3c 	.word	0x000a8d3c
   9fe1c:	0009ba51 	.word	0x0009ba51
   9fe20:	200723f0 	.word	0x200723f0
   9fe24:	0009a545 	.word	0x0009a545
   9fe28:	000a123d 	.word	0x000a123d
   9fe2c:	000a0149 	.word	0x000a0149

0009fe30 <cl_dprep_translatemacevent>:
 
 
Cl_ReturnCodeType  cl_dprep_translatemacevent(Cl_Mac_EventsType Cl_MacDprepEvt,Cl_Dprep_Events* cl_dprepevent)
{
   9fe30:	b480      	push	{r7}
   9fe32:	b083      	sub	sp, #12
   9fe34:	af00      	add	r7, sp, #0
   9fe36:	4603      	mov	r3, r0
   9fe38:	6039      	str	r1, [r7, #0]
   9fe3a:	71fb      	strb	r3, [r7, #7]
	switch(Cl_MacDprepEvt)
   9fe3c:	79fb      	ldrb	r3, [r7, #7]
   9fe3e:	3b09      	subs	r3, #9
   9fe40:	2b53      	cmp	r3, #83	; 0x53
   9fe42:	f200 8137 	bhi.w	a00b4 <cl_dprep_translatemacevent+0x284>
   9fe46:	a201      	add	r2, pc, #4	; (adr r2, 9fe4c <cl_dprep_translatemacevent+0x1c>)
   9fe48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   9fe4c:	0009ffa5 	.word	0x0009ffa5
   9fe50:	0009ffad 	.word	0x0009ffad
   9fe54:	0009ffb5 	.word	0x0009ffb5
   9fe58:	0009ffbd 	.word	0x0009ffbd
   9fe5c:	0009ffc5 	.word	0x0009ffc5
   9fe60:	0009ffcd 	.word	0x0009ffcd
   9fe64:	0009ffdd 	.word	0x0009ffdd
   9fe68:	0009ffe5 	.word	0x0009ffe5
   9fe6c:	0009ffd5 	.word	0x0009ffd5
   9fe70:	0009ffed 	.word	0x0009ffed
   9fe74:	0009fff5 	.word	0x0009fff5
   9fe78:	0009fffd 	.word	0x0009fffd
   9fe7c:	000a009d 	.word	0x000a009d
   9fe80:	000a0005 	.word	0x000a0005
   9fe84:	000a00b5 	.word	0x000a00b5
   9fe88:	000a00b5 	.word	0x000a00b5
   9fe8c:	000a00b5 	.word	0x000a00b5
   9fe90:	000a00b5 	.word	0x000a00b5
   9fe94:	000a00b5 	.word	0x000a00b5
   9fe98:	000a005d 	.word	0x000a005d
   9fe9c:	000a006d 	.word	0x000a006d
   9fea0:	000a0075 	.word	0x000a0075
   9fea4:	000a007d 	.word	0x000a007d
   9fea8:	000a00b5 	.word	0x000a00b5
   9feac:	000a0065 	.word	0x000a0065
   9feb0:	000a00b5 	.word	0x000a00b5
   9feb4:	000a00b5 	.word	0x000a00b5
   9feb8:	000a00b5 	.word	0x000a00b5
   9febc:	000a00b5 	.word	0x000a00b5
   9fec0:	000a0085 	.word	0x000a0085
   9fec4:	000a008d 	.word	0x000a008d
   9fec8:	000a0095 	.word	0x000a0095
   9fecc:	0009ff9d 	.word	0x0009ff9d
   9fed0:	000a00b5 	.word	0x000a00b5
   9fed4:	000a00b5 	.word	0x000a00b5
   9fed8:	000a00b5 	.word	0x000a00b5
   9fedc:	000a0055 	.word	0x000a0055
   9fee0:	000a004d 	.word	0x000a004d
   9fee4:	000a00b5 	.word	0x000a00b5
   9fee8:	000a00b5 	.word	0x000a00b5
   9feec:	000a00b5 	.word	0x000a00b5
   9fef0:	000a00b5 	.word	0x000a00b5
   9fef4:	000a00b5 	.word	0x000a00b5
   9fef8:	000a00b5 	.word	0x000a00b5
   9fefc:	000a00b5 	.word	0x000a00b5
   9ff00:	000a00b5 	.word	0x000a00b5
   9ff04:	000a00b5 	.word	0x000a00b5
   9ff08:	000a000d 	.word	0x000a000d
   9ff0c:	000a0015 	.word	0x000a0015
   9ff10:	000a001d 	.word	0x000a001d
   9ff14:	000a0025 	.word	0x000a0025
   9ff18:	000a002d 	.word	0x000a002d
   9ff1c:	000a0035 	.word	0x000a0035
   9ff20:	000a00b5 	.word	0x000a00b5
   9ff24:	000a00b5 	.word	0x000a00b5
   9ff28:	000a00b5 	.word	0x000a00b5
   9ff2c:	000a00b5 	.word	0x000a00b5
   9ff30:	000a00b5 	.word	0x000a00b5
   9ff34:	000a00b5 	.word	0x000a00b5
   9ff38:	000a00b5 	.word	0x000a00b5
   9ff3c:	000a00b5 	.word	0x000a00b5
   9ff40:	000a00b5 	.word	0x000a00b5
   9ff44:	000a00b5 	.word	0x000a00b5
   9ff48:	000a00b5 	.word	0x000a00b5
   9ff4c:	000a003d 	.word	0x000a003d
   9ff50:	000a00b5 	.word	0x000a00b5
   9ff54:	000a00b5 	.word	0x000a00b5
   9ff58:	000a0045 	.word	0x000a0045
   9ff5c:	000a00b5 	.word	0x000a00b5
   9ff60:	000a00b5 	.word	0x000a00b5
   9ff64:	000a00b5 	.word	0x000a00b5
   9ff68:	000a00b5 	.word	0x000a00b5
   9ff6c:	000a00b5 	.word	0x000a00b5
   9ff70:	000a00b5 	.word	0x000a00b5
   9ff74:	000a00b5 	.word	0x000a00b5
   9ff78:	000a00b5 	.word	0x000a00b5
   9ff7c:	000a00b5 	.word	0x000a00b5
   9ff80:	000a00b5 	.word	0x000a00b5
   9ff84:	000a00b5 	.word	0x000a00b5
   9ff88:	000a00b5 	.word	0x000a00b5
   9ff8c:	000a00b5 	.word	0x000a00b5
   9ff90:	000a00b5 	.word	0x000a00b5
   9ff94:	000a00a5 	.word	0x000a00a5
   9ff98:	000a00ad 	.word	0x000a00ad
	{
	
		case EVT_CONSOLE_COMMAND_CLR_ALARM:
		*cl_dprepevent =EVENT_DPREP_CLR_ALARM;
   9ff9c:	683b      	ldr	r3, [r7, #0]
   9ff9e:	2201      	movs	r2, #1
   9ffa0:	701a      	strb	r2, [r3, #0]
		break;
   9ffa2:	e088      	b.n	a00b6 <cl_dprep_translatemacevent+0x286>
		
		case EVT_CONSOLE_COMMAND_DIALYSIS_PREP:
		*cl_dprepevent = EVENT_DPREP_DIALYSIS_PREP;
   9ffa4:	683b      	ldr	r3, [r7, #0]
   9ffa6:	2202      	movs	r2, #2
   9ffa8:	701a      	strb	r2, [r3, #0]
		break;
   9ffaa:	e084      	b.n	a00b6 <cl_dprep_translatemacevent+0x286>

		case EVT_CONSOLE_COMMAND_SET_BLDPMP_ON:
		*cl_dprepevent = EVENT_DPREP_COMMAND_SET_BLDPMP_ON;
   9ffac:	683b      	ldr	r3, [r7, #0]
   9ffae:	2205      	movs	r2, #5
   9ffb0:	701a      	strb	r2, [r3, #0]
		break;
   9ffb2:	e080      	b.n	a00b6 <cl_dprep_translatemacevent+0x286>
		case EVT_CONSOLE_COMMAND_SET_BLDPMP_OFF:
		*cl_dprepevent = EVENT_DPREP_COMMAND_SET_BLDPMP_OFF;
   9ffb4:	683b      	ldr	r3, [r7, #0]
   9ffb6:	2206      	movs	r2, #6
   9ffb8:	701a      	strb	r2, [r3, #0]
		break;
   9ffba:	e07c      	b.n	a00b6 <cl_dprep_translatemacevent+0x286>
		case 	EVT_CONSOLE_COMMAND_SET_BLDPUMPRATE:
		*cl_dprepevent = EVENT_DPREP_COMMAND_SET_BLDPUMPRATE;
   9ffbc:	683b      	ldr	r3, [r7, #0]
   9ffbe:	2207      	movs	r2, #7
   9ffc0:	701a      	strb	r2, [r3, #0]
		break;
   9ffc2:	e078      	b.n	a00b6 <cl_dprep_translatemacevent+0x286>
		case EVT_CONSOLE_COMMAND_SET_DATA:
		*cl_dprepevent =  EVENT_DPREP_COMMAND_SET_DATA;
   9ffc4:	683b      	ldr	r3, [r7, #0]
   9ffc6:	2203      	movs	r2, #3
   9ffc8:	701a      	strb	r2, [r3, #0]
		break;
   9ffca:	e074      	b.n	a00b6 <cl_dprep_translatemacevent+0x286>
		case EVT_CONSOLE_COMMAND_GET_DATA:
		*cl_dprepevent = EVENT_DPREP_COMMAND_GET_DATA;
   9ffcc:	683b      	ldr	r3, [r7, #0]
   9ffce:	2204      	movs	r2, #4
   9ffd0:	701a      	strb	r2, [r3, #0]
		break;
   9ffd2:	e070      	b.n	a00b6 <cl_dprep_translatemacevent+0x286>
		
		case EVT_CONSOLE_COMMAND_START_DIALYSATE_FILLING:
				*cl_dprepevent = EVENT_DPREP_START_DIALYSATE_FILL;
   9ffd4:	683b      	ldr	r3, [r7, #0]
   9ffd6:	2208      	movs	r2, #8
   9ffd8:	701a      	strb	r2, [r3, #0]
				break;
   9ffda:	e06c      	b.n	a00b6 <cl_dprep_translatemacevent+0x286>
		case EVT_CONSOLE_COMMAND_START_PRIME:
		*cl_dprepevent = EVENT_DPREP_START_PRIME;
   9ffdc:	683b      	ldr	r3, [r7, #0]
   9ffde:	220a      	movs	r2, #10
   9ffe0:	701a      	strb	r2, [r3, #0]
		break;
   9ffe2:	e068      	b.n	a00b6 <cl_dprep_translatemacevent+0x286>
		
		case EVT_CONSOLE_COMMAND_STOP_PRIME:
		*cl_dprepevent = EVENT_DPREP_STOP_PRIME;
   9ffe4:	683b      	ldr	r3, [r7, #0]
   9ffe6:	220b      	movs	r2, #11
   9ffe8:	701a      	strb	r2, [r3, #0]
		break;
   9ffea:	e064      	b.n	a00b6 <cl_dprep_translatemacevent+0x286>
		case EVT_CONSOLE_COMMAND_DILYSER_CONNECTED:
		*cl_dprepevent = EVENT_DPREP_DILYSER_CONNECTED;
   9ffec:	683b      	ldr	r3, [r7, #0]
   9ffee:	220c      	movs	r2, #12
   9fff0:	701a      	strb	r2, [r3, #0]
		break;
   9fff2:	e060      	b.n	a00b6 <cl_dprep_translatemacevent+0x286>
		case EVT_CONSOLE_COMMAND_START_DIALISER_PRIME:
		*cl_dprepevent = EVENT_DPREP_START_DIALISER_PRIME;
   9fff4:	683b      	ldr	r3, [r7, #0]
   9fff6:	220d      	movs	r2, #13
   9fff8:	701a      	strb	r2, [r3, #0]
		break;
   9fffa:	e05c      	b.n	a00b6 <cl_dprep_translatemacevent+0x286>
		case EVT_CONSOLE_COMMAND_STOP_DIALISER_PRIME:
		*cl_dprepevent = EVENT_DPREP_STOP_DIALYSER_PRIME;
   9fffc:	683b      	ldr	r3, [r7, #0]
   9fffe:	220e      	movs	r2, #14
   a0000:	701a      	strb	r2, [r3, #0]
		break;	
   a0002:	e058      	b.n	a00b6 <cl_dprep_translatemacevent+0x286>
		

		case EVT_CONSOLE_COMMAND_MAN_PREP_COMPLETED:
		*cl_dprepevent =   EVENT_DPREP_MAN_PREP_COMPLETED;
   a0004:	683b      	ldr	r3, [r7, #0]
   a0006:	2212      	movs	r2, #18
   a0008:	701a      	strb	r2, [r3, #0]
		break;
   a000a:	e054      	b.n	a00b6 <cl_dprep_translatemacevent+0x286>
		
		case EVT_TICK_50M:
		*cl_dprepevent =   EVENT_DPREP_TICK_50MS;
   a000c:	683b      	ldr	r3, [r7, #0]
   a000e:	2213      	movs	r2, #19
   a0010:	701a      	strb	r2, [r3, #0]
		break;
   a0012:	e050      	b.n	a00b6 <cl_dprep_translatemacevent+0x286>
		case  EVT_TICK_100M:
		*cl_dprepevent =   EVENT_DPREP_TICK_100MS;
   a0014:	683b      	ldr	r3, [r7, #0]
   a0016:	2214      	movs	r2, #20
   a0018:	701a      	strb	r2, [r3, #0]
		break;
   a001a:	e04c      	b.n	a00b6 <cl_dprep_translatemacevent+0x286>
		
		case EVT_TICK_500M:
		*cl_dprepevent =   EVENT_DPREP_TICK_500MS;
   a001c:	683b      	ldr	r3, [r7, #0]
   a001e:	2215      	movs	r2, #21
   a0020:	701a      	strb	r2, [r3, #0]
		break;
   a0022:	e048      	b.n	a00b6 <cl_dprep_translatemacevent+0x286>
		case EVT_TICK_SEC:
		*cl_dprepevent =   EVENT_DPREP_TICK_SECOND;
   a0024:	683b      	ldr	r3, [r7, #0]
   a0026:	2216      	movs	r2, #22
   a0028:	701a      	strb	r2, [r3, #0]
		break;
   a002a:	e044      	b.n	a00b6 <cl_dprep_translatemacevent+0x286>
		case EVT_TICK_MIN:
		*cl_dprepevent =   EVENT_DPREP_TICK_MINUTE;
   a002c:	683b      	ldr	r3, [r7, #0]
   a002e:	2217      	movs	r2, #23
   a0030:	701a      	strb	r2, [r3, #0]
		break;			 
   a0032:	e040      	b.n	a00b6 <cl_dprep_translatemacevent+0x286>
		case EVT_TICK_HOUR:
		*cl_dprepevent =   EVENT_DPREP_TICK_HOUR;
   a0034:	683b      	ldr	r3, [r7, #0]
   a0036:	2218      	movs	r2, #24
   a0038:	701a      	strb	r2, [r3, #0]
		break;
   a003a:	e03c      	b.n	a00b6 <cl_dprep_translatemacevent+0x286>
		
		case MACREQ_PRIME_COMPLETED:
		*cl_dprepevent = EVENT_DPREP_MAC_PRIME_COMPLETED;
   a003c:	683b      	ldr	r3, [r7, #0]
   a003e:	2210      	movs	r2, #16
   a0040:	701a      	strb	r2, [r3, #0]
		break;
   a0042:	e038      	b.n	a00b6 <cl_dprep_translatemacevent+0x286>
		case MACREQ_DIALYSER_PRIME_COMPLETED:
			*cl_dprepevent = EVENT_DPREP_MAC_DIALYSER_PRIME_COMPLETED;
   a0044:	683b      	ldr	r3, [r7, #0]
   a0046:	2211      	movs	r2, #17
   a0048:	701a      	strb	r2, [r3, #0]
		break;
   a004a:	e034      	b.n	a00b6 <cl_dprep_translatemacevent+0x286>
		case EVT_ALARM_TRIGGERED:
		*cl_dprepevent =  EVENT_DPREP_ALARM;
   a004c:	683b      	ldr	r3, [r7, #0]
   a004e:	2219      	movs	r2, #25
   a0050:	701a      	strb	r2, [r3, #0]
		break;
   a0052:	e030      	b.n	a00b6 <cl_dprep_translatemacevent+0x286>
		case EVT_ALERT_TRIGGERED:
		*cl_dprepevent =  EVENT_DPREP_ALERT;
   a0054:	683b      	ldr	r3, [r7, #0]
   a0056:	221a      	movs	r2, #26
   a0058:	701a      	strb	r2, [r3, #0]
		break;
   a005a:	e02c      	b.n	a00b6 <cl_dprep_translatemacevent+0x286>
		case EVT_CONSOLE_COMMAND_PATIENT_CONNECTED:
		*cl_dprepevent =  EVENT_DPREP_PATIENT_CONNECTED;
   a005c:	683b      	ldr	r3, [r7, #0]
   a005e:	221b      	movs	r2, #27
   a0060:	701a      	strb	r2, [r3, #0]
		break;
   a0062:	e028      	b.n	a00b6 <cl_dprep_translatemacevent+0x286>
		case EVT_CONSOLE_COMMAND_PATIENT_READY:
		*cl_dprepevent = EVENT_DPREP_PATIENT_READY;
   a0064:	683b      	ldr	r3, [r7, #0]
   a0066:	221c      	movs	r2, #28
   a0068:	701a      	strb	r2, [r3, #0]
		break;
   a006a:	e024      	b.n	a00b6 <cl_dprep_translatemacevent+0x286>
		case EVT_SEND_MIXING_PREP_START:
		*cl_dprepevent =  EVENT_DPREP_MIXING_PREP_START;
   a006c:	683b      	ldr	r3, [r7, #0]
   a006e:	221d      	movs	r2, #29
   a0070:	701a      	strb	r2, [r3, #0]
		break;
   a0072:	e020      	b.n	a00b6 <cl_dprep_translatemacevent+0x286>
		case EVT_SEND_MIXING_PREP_STOP:
		*cl_dprepevent = EVENT_DPREP_MIXING_PREP_STOP;
   a0074:	683b      	ldr	r3, [r7, #0]
   a0076:	221e      	movs	r2, #30
   a0078:	701a      	strb	r2, [r3, #0]
		break;
   a007a:	e01c      	b.n	a00b6 <cl_dprep_translatemacevent+0x286>
		case EVT_CONSOLE_COMMAND_RCIRC_START:
		*cl_dprepevent = EVENT_DPREP_START_RECIRC;
   a007c:	683b      	ldr	r3, [r7, #0]
   a007e:	221f      	movs	r2, #31
   a0080:	701a      	strb	r2, [r3, #0]
		break;
   a0082:	e018      	b.n	a00b6 <cl_dprep_translatemacevent+0x286>
		case 	EVT_CONSOLE_COMMAND_HEPARIN_BOLUS:
		*cl_dprepevent = EVENT_HEAPARIN_BOLUS;
   a0084:	683b      	ldr	r3, [r7, #0]
   a0086:	2221      	movs	r2, #33	; 0x21
   a0088:	701a      	strb	r2, [r3, #0]
		break;
   a008a:	e014      	b.n	a00b6 <cl_dprep_translatemacevent+0x286>
		case EVT_CONSOLE_COMMAND_HEPARIN_START:
		*cl_dprepevent = EVENT_DPREP_HEP_PMP_START;
   a008c:	683b      	ldr	r3, [r7, #0]
   a008e:	2222      	movs	r2, #34	; 0x22
   a0090:	701a      	strb	r2, [r3, #0]
		break;
   a0092:	e010      	b.n	a00b6 <cl_dprep_translatemacevent+0x286>
		case EVT_CONSOLE_COMMAND_HEPARIN_STOP:
		*cl_dprepevent = EVENT_DPREP_HEP_PMP_STOP;
   a0094:	683b      	ldr	r3, [r7, #0]
   a0096:	2223      	movs	r2, #35	; 0x23
   a0098:	701a      	strb	r2, [r3, #0]
		break;
   a009a:	e00c      	b.n	a00b6 <cl_dprep_translatemacevent+0x286>
		case EVT_CONSOLE_COMMAND_HEP_PMP_RATE:
		*cl_dprepevent = EVENT_DPREP_HEP_PMP_RATE;
   a009c:	683b      	ldr	r3, [r7, #0]
   a009e:	220f      	movs	r2, #15
   a00a0:	701a      	strb	r2, [r3, #0]
		break;
   a00a2:	e008      	b.n	a00b6 <cl_dprep_translatemacevent+0x286>
		case EVT_CONSOLE_COMMAND_SET_BLDPUMPINC_MANUAL:
		*cl_dprepevent = EVT_CONSOLE_COMMAND_SET_BLDPUMPINC_MANUAL;
   a00a4:	683b      	ldr	r3, [r7, #0]
   a00a6:	225b      	movs	r2, #91	; 0x5b
   a00a8:	701a      	strb	r2, [r3, #0]
		break;
   a00aa:	e004      	b.n	a00b6 <cl_dprep_translatemacevent+0x286>
		case EVT_CONSOLE_COMMAND_SET_BLDPUMPDEC_MANUAL:
		*cl_dprepevent = EVT_CONSOLE_COMMAND_SET_BLDPUMPDEC_MANUAL;
   a00ac:	683b      	ldr	r3, [r7, #0]
   a00ae:	225c      	movs	r2, #92	; 0x5c
   a00b0:	701a      	strb	r2, [r3, #0]
		break;
   a00b2:	e000      	b.n	a00b6 <cl_dprep_translatemacevent+0x286>
		default:
		break;
   a00b4:	bf00      	nop
	}
		 return CL_OK;
   a00b6:	2300      	movs	r3, #0
}
   a00b8:	4618      	mov	r0, r3
   a00ba:	370c      	adds	r7, #12
   a00bc:	46bd      	mov	sp, r7
   a00be:	f85d 7b04 	ldr.w	r7, [sp], #4
   a00c2:	4770      	bx	lr

000a00c4 <cl_dprep_notifydacandgotodpreptandby>:
		
		return Cl_dprepretcode;
		
	}
	Cl_ReturnCodeType cl_dprep_notifydacandgotodpreptandby(void)
	{
   a00c4:	b580      	push	{r7, lr}
   a00c6:	b082      	sub	sp, #8
   a00c8:	af00      	add	r7, sp, #0
		Cl_ReturnCodeType 	Cl_dprepretcode = CL_OK;
   a00ca:	2300      	movs	r3, #0
   a00cc:	71fb      	strb	r3, [r7, #7]
		
		Cl_Uint8Type data =0;
   a00ce:	2300      	movs	r3, #0
   a00d0:	71bb      	strb	r3, [r7, #6]
		//inform DAC about rinse completed state.
		Cl_dprepsecondscounter = 0;
   a00d2:	4b15      	ldr	r3, [pc, #84]	; (a0128 <cl_dprep_notifydacandgotodpreptandby+0x64>)
   a00d4:	2200      	movs	r2, #0
   a00d6:	601a      	str	r2, [r3, #0]
		Cl_dprepMinutescounter= 0;
   a00d8:	4b14      	ldr	r3, [pc, #80]	; (a012c <cl_dprep_notifydacandgotodpreptandby+0x68>)
   a00da:	2200      	movs	r2, #0
   a00dc:	601a      	str	r2, [r3, #0]
		Cl_dprephourscounter= 0;
   a00de:	4b14      	ldr	r3, [pc, #80]	; (a0130 <cl_dprep_notifydacandgotodpreptandby+0x6c>)
   a00e0:	2200      	movs	r2, #0
   a00e2:	601a      	str	r2, [r3, #0]
		Cl_dprepTotalMinutescounter= 0;
   a00e4:	4b13      	ldr	r3, [pc, #76]	; (a0134 <cl_dprep_notifydacandgotodpreptandby+0x70>)
   a00e6:	2200      	movs	r2, #0
   a00e8:	601a      	str	r2, [r3, #0]
		Cl_dprepTotalhourscounter=0;
   a00ea:	4b13      	ldr	r3, [pc, #76]	; (a0138 <cl_dprep_notifydacandgotodpreptandby+0x74>)
   a00ec:	2200      	movs	r2, #0
   a00ee:	601a      	str	r2, [r3, #0]
		data = 1;
   a00f0:	2301      	movs	r3, #1
   a00f2:	71bb      	strb	r3, [r7, #6]
		Cl_dprepretcode = sv_nvmsetdata(NV_NVM_PRIME_STATUS,&data,1);
   a00f4:	1dbb      	adds	r3, r7, #6
   a00f6:	2002      	movs	r0, #2
   a00f8:	4619      	mov	r1, r3
   a00fa:	2201      	movs	r2, #1
   a00fc:	4b0f      	ldr	r3, [pc, #60]	; (a013c <cl_dprep_notifydacandgotodpreptandby+0x78>)
   a00fe:	4798      	blx	r3
   a0100:	4603      	mov	r3, r0
   a0102:	71fb      	strb	r3, [r7, #7]
		
		Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALISYS_PRIME_COMPLETED,&data,0);
   a0104:	1dbb      	adds	r3, r7, #6
   a0106:	2010      	movs	r0, #16
   a0108:	4619      	mov	r1, r3
   a010a:	2200      	movs	r2, #0
   a010c:	4b0c      	ldr	r3, [pc, #48]	; (a0140 <cl_dprep_notifydacandgotodpreptandby+0x7c>)
   a010e:	4798      	blx	r3
   a0110:	4603      	mov	r3, r0
   a0112:	71fb      	strb	r3, [r7, #7]
		Cl_dprepretcode = Cl_mac_apprequesthandler(MACREQ_DIALYSER_PRIME_COMPLETED);
   a0114:	204c      	movs	r0, #76	; 0x4c
   a0116:	4b0b      	ldr	r3, [pc, #44]	; (a0144 <cl_dprep_notifydacandgotodpreptandby+0x80>)
   a0118:	4798      	blx	r3
   a011a:	4603      	mov	r3, r0
   a011c:	71fb      	strb	r3, [r7, #7]
		
		
		return Cl_dprepretcode;
   a011e:	79fb      	ldrb	r3, [r7, #7]
	}
   a0120:	4618      	mov	r0, r3
   a0122:	3708      	adds	r7, #8
   a0124:	46bd      	mov	sp, r7
   a0126:	bd80      	pop	{r7, pc}
   a0128:	20071c74 	.word	0x20071c74
   a012c:	20071c78 	.word	0x20071c78
   a0130:	20071c7c 	.word	0x20071c7c
   a0134:	20071c80 	.word	0x20071c80
   a0138:	20071c84 	.word	0x20071c84
   a013c:	0009a57d 	.word	0x0009a57d
   a0140:	0009ba51 	.word	0x0009ba51
   a0144:	0008bc51 	.word	0x0008bc51

000a0148 <Cl_Dprep_ProcessAlarms>:
		return CL_OK;								
	}
	
	
	Cl_ReturnCodeType Cl_Dprep_ProcessAlarms(void )
	{
   a0148:	b580      	push	{r7, lr}
   a014a:	b082      	sub	sp, #8
   a014c:	af00      	add	r7, sp, #0
		Cl_ReturnCodeType 	Cl_dprepretcode = CL_OK;
   a014e:	2300      	movs	r3, #0
   a0150:	71fb      	strb	r3, [r7, #7]
		ClDprepAlarmIdType CldprepAlarmId;
		Cl_Uint8Type data;
		Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a0152:	2351      	movs	r3, #81	; 0x51
   a0154:	71bb      	strb	r3, [r7, #6]
		Cl_NewAlarmIdType cl_dprepalarmid;
		//	cl_wait(200);
		Cl_dprepretcode = Cl_Dprep_UpdateAlarmTable();
   a0156:	4b04      	ldr	r3, [pc, #16]	; (a0168 <Cl_Dprep_ProcessAlarms+0x20>)
   a0158:	4798      	blx	r3
   a015a:	4603      	mov	r3, r0
   a015c:	71fb      	strb	r3, [r7, #7]
		//   	data = (Cl_Uint8Type)cl_rinsealarmid;
		//   	command = CON_TX_COMMAND_ALARM;
		//   	Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,0);
		
		
		return (Cl_dprepretcode);
   a015e:	79fb      	ldrb	r3, [r7, #7]
	}
   a0160:	4618      	mov	r0, r3
   a0162:	3708      	adds	r7, #8
   a0164:	46bd      	mov	sp, r7
   a0166:	bd80      	pop	{r7, pc}
   a0168:	000a016d 	.word	0x000a016d

000a016c <Cl_Dprep_UpdateAlarmTable>:
	
	
	Cl_ReturnCodeType Cl_Dprep_UpdateAlarmTable( void)
	{
   a016c:	b580      	push	{r7, lr}
   a016e:	b084      	sub	sp, #16
   a0170:	af00      	add	r7, sp, #0
		Cl_ReturnCodeType 	Cl_dprepretcode = CL_OK;
   a0172:	2300      	movs	r3, #0
   a0174:	73fb      	strb	r3, [r7, #15]
		Cl_Uint8Type tempcount = 0;
   a0176:	2300      	movs	r3, #0
   a0178:	73bb      	strb	r3, [r7, #14]
		Cl_Uint8Type data[2] ={0, 0} ,*data1 = NULL;
   a017a:	2300      	movs	r3, #0
   a017c:	713b      	strb	r3, [r7, #4]
   a017e:	2300      	movs	r3, #0
   a0180:	717b      	strb	r3, [r7, #5]
   a0182:	2300      	movs	r3, #0
   a0184:	60bb      	str	r3, [r7, #8]
		Cl_Uint8Type data3;
		Cl_NewAlarmIdType cl_alarmId;
		
		Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a0186:	2351      	movs	r3, #81	; 0x51
   a0188:	71fb      	strb	r3, [r7, #7]
		
		
		for (tempcount = 0 ; tempcount < CL_DPREP_ALRM_MAX ; tempcount++)
   a018a:	2300      	movs	r3, #0
   a018c:	73bb      	strb	r3, [r7, #14]
   a018e:	e063      	b.n	a0258 <Cl_Dprep_UpdateAlarmTable+0xec>
		{
			
			Cl_Alarm_GetAlarmStatus(Cl_DprepAlarmTable[tempcount].Cl_DprepAlarmId,&Cl_DprepAlarmTable[tempcount].IsActive);
   a0190:	7bba      	ldrb	r2, [r7, #14]
   a0192:	4935      	ldr	r1, [pc, #212]	; (a0268 <Cl_Dprep_UpdateAlarmTable+0xfc>)
   a0194:	4613      	mov	r3, r2
   a0196:	00db      	lsls	r3, r3, #3
   a0198:	1a9b      	subs	r3, r3, r2
   a019a:	440b      	add	r3, r1
   a019c:	7819      	ldrb	r1, [r3, #0]
   a019e:	7bba      	ldrb	r2, [r7, #14]
   a01a0:	4613      	mov	r3, r2
   a01a2:	00db      	lsls	r3, r3, #3
   a01a4:	1a9b      	subs	r3, r3, r2
   a01a6:	4a30      	ldr	r2, [pc, #192]	; (a0268 <Cl_Dprep_UpdateAlarmTable+0xfc>)
   a01a8:	4413      	add	r3, r2
   a01aa:	3302      	adds	r3, #2
   a01ac:	4608      	mov	r0, r1
   a01ae:	4619      	mov	r1, r3
   a01b0:	4b2e      	ldr	r3, [pc, #184]	; (a026c <Cl_Dprep_UpdateAlarmTable+0x100>)
   a01b2:	4798      	blx	r3
			//	if(Cl_RinseAlarmTable[tempcount].Cl_RinseAlarmType == CL_ALARM_ALARM)
			//	{
			
			
			if (Cl_DprepAlarmTable[tempcount].IsActive)
   a01b4:	7bba      	ldrb	r2, [r7, #14]
   a01b6:	492c      	ldr	r1, [pc, #176]	; (a0268 <Cl_Dprep_UpdateAlarmTable+0xfc>)
   a01b8:	4613      	mov	r3, r2
   a01ba:	00db      	lsls	r3, r3, #3
   a01bc:	1a9b      	subs	r3, r3, r2
   a01be:	440b      	add	r3, r1
   a01c0:	789b      	ldrb	r3, [r3, #2]
   a01c2:	2b00      	cmp	r3, #0
   a01c4:	d020      	beq.n	a0208 <Cl_Dprep_UpdateAlarmTable+0x9c>
			{
				if(!Cl_DprepAlarmTable[tempcount].IsRaised)
   a01c6:	7bba      	ldrb	r2, [r7, #14]
   a01c8:	4927      	ldr	r1, [pc, #156]	; (a0268 <Cl_Dprep_UpdateAlarmTable+0xfc>)
   a01ca:	4613      	mov	r3, r2
   a01cc:	00db      	lsls	r3, r3, #3
   a01ce:	1a9b      	subs	r3, r3, r2
   a01d0:	440b      	add	r3, r1
   a01d2:	78db      	ldrb	r3, [r3, #3]
   a01d4:	f083 0301 	eor.w	r3, r3, #1
   a01d8:	b2db      	uxtb	r3, r3
   a01da:	2b00      	cmp	r3, #0
   a01dc:	d039      	beq.n	a0252 <Cl_Dprep_UpdateAlarmTable+0xe6>
					//	data1 = (Cl_Uint8Type) cl_alarmId;

				//	command = CON_TX_COMMAND_ALARM;

				//	Cl_dprepretcode = Cl_SendDatatoconsole(command,&data,3);
					Cl_DprepAlarmTable[tempcount].IsRaised = true;
   a01de:	7bba      	ldrb	r2, [r7, #14]
   a01e0:	4921      	ldr	r1, [pc, #132]	; (a0268 <Cl_Dprep_UpdateAlarmTable+0xfc>)
   a01e2:	4613      	mov	r3, r2
   a01e4:	00db      	lsls	r3, r3, #3
   a01e6:	1a9b      	subs	r3, r3, r2
   a01e8:	440b      	add	r3, r1
   a01ea:	2201      	movs	r2, #1
   a01ec:	70da      	strb	r2, [r3, #3]
					
					Cl_dprepretcode = CL_DrepAlarmActon(Cl_DprepAlarmTable[tempcount].Cl_DprepAlarmId);
   a01ee:	7bba      	ldrb	r2, [r7, #14]
   a01f0:	491d      	ldr	r1, [pc, #116]	; (a0268 <Cl_Dprep_UpdateAlarmTable+0xfc>)
   a01f2:	4613      	mov	r3, r2
   a01f4:	00db      	lsls	r3, r3, #3
   a01f6:	1a9b      	subs	r3, r3, r2
   a01f8:	440b      	add	r3, r1
   a01fa:	781b      	ldrb	r3, [r3, #0]
   a01fc:	4618      	mov	r0, r3
   a01fe:	4b1c      	ldr	r3, [pc, #112]	; (a0270 <Cl_Dprep_UpdateAlarmTable+0x104>)
   a0200:	4798      	blx	r3
   a0202:	4603      	mov	r3, r0
   a0204:	73fb      	strb	r3, [r7, #15]
   a0206:	e024      	b.n	a0252 <Cl_Dprep_UpdateAlarmTable+0xe6>
				
			}
			else
			{
				// alarm was present before , but not active now.
				if(Cl_DprepAlarmTable[tempcount].IsRaised == true)
   a0208:	7bba      	ldrb	r2, [r7, #14]
   a020a:	4917      	ldr	r1, [pc, #92]	; (a0268 <Cl_Dprep_UpdateAlarmTable+0xfc>)
   a020c:	4613      	mov	r3, r2
   a020e:	00db      	lsls	r3, r3, #3
   a0210:	1a9b      	subs	r3, r3, r2
   a0212:	440b      	add	r3, r1
   a0214:	78db      	ldrb	r3, [r3, #3]
   a0216:	2b00      	cmp	r3, #0
   a0218:	d013      	beq.n	a0242 <Cl_Dprep_UpdateAlarmTable+0xd6>
				{
					Cl_DprepAlarmTable[tempcount].IsRaised = false;
   a021a:	7bba      	ldrb	r2, [r7, #14]
   a021c:	4912      	ldr	r1, [pc, #72]	; (a0268 <Cl_Dprep_UpdateAlarmTable+0xfc>)
   a021e:	4613      	mov	r3, r2
   a0220:	00db      	lsls	r3, r3, #3
   a0222:	1a9b      	subs	r3, r3, r2
   a0224:	440b      	add	r3, r1
   a0226:	2200      	movs	r2, #0
   a0228:	70da      	strb	r2, [r3, #3]
					command = CON_TX_COMMAND_ALARM;
   a022a:	2307      	movs	r3, #7
   a022c:	71fb      	strb	r3, [r7, #7]
					data[0] = (Cl_Uint8Type)(Cl_DprepAlarmTable[tempcount].Cl_DprepAlarmId);
   a022e:	7bba      	ldrb	r2, [r7, #14]
   a0230:	490d      	ldr	r1, [pc, #52]	; (a0268 <Cl_Dprep_UpdateAlarmTable+0xfc>)
   a0232:	4613      	mov	r3, r2
   a0234:	00db      	lsls	r3, r3, #3
   a0236:	1a9b      	subs	r3, r3, r2
   a0238:	440b      	add	r3, r1
   a023a:	781b      	ldrb	r3, [r3, #0]
   a023c:	713b      	strb	r3, [r7, #4]
					data[1] = (Cl_Uint8Type) 0;
   a023e:	2300      	movs	r3, #0
   a0240:	717b      	strb	r3, [r7, #5]
				//	Cl_dprepretcode = Cl_SendDatatoconsole(command,&data,2);
				}
				Cl_DprepAlarmTable[tempcount].IsActive = true;
   a0242:	7bba      	ldrb	r2, [r7, #14]
   a0244:	4908      	ldr	r1, [pc, #32]	; (a0268 <Cl_Dprep_UpdateAlarmTable+0xfc>)
   a0246:	4613      	mov	r3, r2
   a0248:	00db      	lsls	r3, r3, #3
   a024a:	1a9b      	subs	r3, r3, r2
   a024c:	440b      	add	r3, r1
   a024e:	2201      	movs	r2, #1
   a0250:	709a      	strb	r2, [r3, #2]
		Cl_NewAlarmIdType cl_alarmId;
		
		Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
		
		
		for (tempcount = 0 ; tempcount < CL_DPREP_ALRM_MAX ; tempcount++)
   a0252:	7bbb      	ldrb	r3, [r7, #14]
   a0254:	3301      	adds	r3, #1
   a0256:	73bb      	strb	r3, [r7, #14]
   a0258:	7bbb      	ldrb	r3, [r7, #14]
   a025a:	2b21      	cmp	r3, #33	; 0x21
   a025c:	d998      	bls.n	a0190 <Cl_Dprep_UpdateAlarmTable+0x24>
			}
			//}

		}

		return (Cl_dprepretcode );
   a025e:	7bfb      	ldrb	r3, [r7, #15]
	}
   a0260:	4618      	mov	r0, r3
   a0262:	3710      	adds	r7, #16
   a0264:	46bd      	mov	sp, r7
   a0266:	bd80      	pop	{r7, pc}
   a0268:	20070bdc 	.word	0x20070bdc
   a026c:	00083035 	.word	0x00083035
   a0270:	000a0275 	.word	0x000a0275

000a0274 <CL_DrepAlarmActon>:

Cl_ReturnCodeType  CL_DrepAlarmActon(Cl_NewAlarmIdType cl_dprepalarmid)
{
   a0274:	b580      	push	{r7, lr}
   a0276:	b086      	sub	sp, #24
   a0278:	af00      	add	r7, sp, #0
   a027a:	4603      	mov	r3, r0
   a027c:	71fb      	strb	r3, [r7, #7]
	Cl_ReturnCodeType 	Cl_dprepretcode = CL_OK;
   a027e:	2300      	movs	r3, #0
   a0280:	75fb      	strb	r3, [r7, #23]
	Cl_Uint16Type levelswitchstatus = 0;
   a0282:	2300      	movs	r3, #0
   a0284:	82bb      	strh	r3, [r7, #20]
	Cl_Uint16Type wait_cnt = 0,TmpVal=0;
   a0286:	2300      	movs	r3, #0
   a0288:	827b      	strh	r3, [r7, #18]
   a028a:	2300      	movs	r3, #0
   a028c:	823b      	strh	r3, [r7, #16]
	static Cl_Uint8Type fillseccounter=0;
	Cl_Uint8Type data[3] ={0, 0};
   a028e:	2300      	movs	r3, #0
   a0290:	813b      	strh	r3, [r7, #8]
   a0292:	2300      	movs	r3, #0
   a0294:	72bb      	strb	r3, [r7, #10]
	Cl_NewAlarmIdType NewAlarmId = _NO_ALARM;
   a0296:	2300      	movs	r3, #0
   a0298:	73fb      	strb	r3, [r7, #15]
				Cl_Uint8Type data3;
				Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a029a:	2351      	movs	r3, #81	; 0x51
   a029c:	73bb      	strb	r3, [r7, #14]
	
	switch(cl_dprepalarmid)
   a029e:	79fb      	ldrb	r3, [r7, #7]
   a02a0:	3b01      	subs	r3, #1
   a02a2:	2b3d      	cmp	r3, #61	; 0x3d
   a02a4:	f200 8110 	bhi.w	a04c8 <CL_DrepAlarmActon+0x254>
   a02a8:	a201      	add	r2, pc, #4	; (adr r2, a02b0 <CL_DrepAlarmActon+0x3c>)
   a02aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a02ae:	bf00      	nop
   a02b0:	000a03d7 	.word	0x000a03d7
   a02b4:	000a04c9 	.word	0x000a04c9
   a02b8:	000a03e9 	.word	0x000a03e9
   a02bc:	000a03e9 	.word	0x000a03e9
   a02c0:	000a0429 	.word	0x000a0429
   a02c4:	000a0429 	.word	0x000a0429
   a02c8:	000a0461 	.word	0x000a0461
   a02cc:	000a0461 	.word	0x000a0461
   a02d0:	000a04c9 	.word	0x000a04c9
   a02d4:	000a04c9 	.word	0x000a04c9
   a02d8:	000a04c9 	.word	0x000a04c9
   a02dc:	000a03a9 	.word	0x000a03a9
   a02e0:	000a03a9 	.word	0x000a03a9
   a02e4:	000a03a9 	.word	0x000a03a9
   a02e8:	000a03a9 	.word	0x000a03a9
   a02ec:	000a03a9 	.word	0x000a03a9
   a02f0:	000a03a9 	.word	0x000a03a9
   a02f4:	000a03a9 	.word	0x000a03a9
   a02f8:	000a0461 	.word	0x000a0461
   a02fc:	000a0461 	.word	0x000a0461
   a0300:	000a03a9 	.word	0x000a03a9
   a0304:	000a03a9 	.word	0x000a03a9
   a0308:	000a03a9 	.word	0x000a03a9
   a030c:	000a03a9 	.word	0x000a03a9
   a0310:	000a04c9 	.word	0x000a04c9
   a0314:	000a03a9 	.word	0x000a03a9
   a0318:	000a04c9 	.word	0x000a04c9
   a031c:	000a04c9 	.word	0x000a04c9
   a0320:	000a04c9 	.word	0x000a04c9
   a0324:	000a04c9 	.word	0x000a04c9
   a0328:	000a04c9 	.word	0x000a04c9
   a032c:	000a04c9 	.word	0x000a04c9
   a0330:	000a04c9 	.word	0x000a04c9
   a0334:	000a04c9 	.word	0x000a04c9
   a0338:	000a04c9 	.word	0x000a04c9
   a033c:	000a04c9 	.word	0x000a04c9
   a0340:	000a04c9 	.word	0x000a04c9
   a0344:	000a04c9 	.word	0x000a04c9
   a0348:	000a03a9 	.word	0x000a03a9
   a034c:	000a03a9 	.word	0x000a03a9
   a0350:	000a04c9 	.word	0x000a04c9
   a0354:	000a0429 	.word	0x000a0429
   a0358:	000a04c9 	.word	0x000a04c9
   a035c:	000a0429 	.word	0x000a0429
   a0360:	000a04c9 	.word	0x000a04c9
   a0364:	000a04c9 	.word	0x000a04c9
   a0368:	000a04c9 	.word	0x000a04c9
   a036c:	000a04c9 	.word	0x000a04c9
   a0370:	000a04c9 	.word	0x000a04c9
   a0374:	000a04c9 	.word	0x000a04c9
   a0378:	000a04c9 	.word	0x000a04c9
   a037c:	000a04c9 	.word	0x000a04c9
   a0380:	000a04c9 	.word	0x000a04c9
   a0384:	000a04c9 	.word	0x000a04c9
   a0388:	000a04c9 	.word	0x000a04c9
   a038c:	000a04c9 	.word	0x000a04c9
   a0390:	000a04c9 	.word	0x000a04c9
   a0394:	000a04c9 	.word	0x000a04c9
   a0398:	000a04c9 	.word	0x000a04c9
   a039c:	000a04c9 	.word	0x000a04c9
   a03a0:	000a04cf 	.word	0x000a04cf
   a03a4:	000a04cf 	.word	0x000a04cf
			case	PS2_LOW_THRESHOLD:
			case 	PS3_HIGH_THRESHOLD:
			case	PS3_LOW_THRESHOLD:
				
				//sv_cntrl_setredalarm();
	        	sv_cntrl_buzzer();	
   a03a8:	4b5e      	ldr	r3, [pc, #376]	; (a0524 <CL_DrepAlarmActon+0x2b0>)
   a03aa:	4798      	blx	r3
				
				if((cl_dprepstate == CL_DPREP_STATE_DIALISER_PRIME) ||(cl_dprepstate == CL_DPREP_STATE_DPRIME_WAIT_STABILITY) || (cl_dprepstate == CL_DPREP_STATE_DREP_PRIME_ALARM_BYPASS))
   a03ac:	4b5e      	ldr	r3, [pc, #376]	; (a0528 <CL_DrepAlarmActon+0x2b4>)
   a03ae:	781b      	ldrb	r3, [r3, #0]
   a03b0:	2b06      	cmp	r3, #6
   a03b2:	d007      	beq.n	a03c4 <CL_DrepAlarmActon+0x150>
   a03b4:	4b5c      	ldr	r3, [pc, #368]	; (a0528 <CL_DrepAlarmActon+0x2b4>)
   a03b6:	781b      	ldrb	r3, [r3, #0]
   a03b8:	2b0e      	cmp	r3, #14
   a03ba:	d003      	beq.n	a03c4 <CL_DrepAlarmActon+0x150>
   a03bc:	4b5a      	ldr	r3, [pc, #360]	; (a0528 <CL_DrepAlarmActon+0x2b4>)
   a03be:	781b      	ldrb	r3, [r3, #0]
   a03c0:	2b0d      	cmp	r3, #13
   a03c2:	d102      	bne.n	a03ca <CL_DrepAlarmActon+0x156>
				{
					//Cl_Dprep_Stoppreparation();
					Cl_Dprep_Priming_Stop();
   a03c4:	4b59      	ldr	r3, [pc, #356]	; (a052c <CL_DrepAlarmActon+0x2b8>)
   a03c6:	4798      	blx	r3
					Cl_Dprep_Stoppreparation();
					cl_dprepstate = CL_DPREP_STATE_CRITICAL_ALARM;
				}
				
			
			break;
   a03c8:	e082      	b.n	a04d0 <CL_DrepAlarmActon+0x25c>
					//Cl_Dprep_Stoppreparation();
					Cl_Dprep_Priming_Stop();
				}
				else{
					
					Cl_Dprep_Stoppreparation();
   a03ca:	4b59      	ldr	r3, [pc, #356]	; (a0530 <CL_DrepAlarmActon+0x2bc>)
   a03cc:	4798      	blx	r3
					cl_dprepstate = CL_DPREP_STATE_CRITICAL_ALARM;
   a03ce:	4b56      	ldr	r3, [pc, #344]	; (a0528 <CL_DrepAlarmActon+0x2b4>)
   a03d0:	220c      	movs	r2, #12
   a03d2:	701a      	strb	r2, [r3, #0]
				}
				
			
			break;
   a03d4:	e07c      	b.n	a04d0 <CL_DrepAlarmActon+0x25c>
			
			case BLOODDOOR_STATUS_OPEN:
				sv_cntrl_setyellowalarm();
   a03d6:	4b57      	ldr	r3, [pc, #348]	; (a0534 <CL_DrepAlarmActon+0x2c0>)
   a03d8:	4798      	blx	r3
				sv_cntrl_buzzer();
   a03da:	4b52      	ldr	r3, [pc, #328]	; (a0524 <CL_DrepAlarmActon+0x2b0>)
   a03dc:	4798      	blx	r3
				//Cl_Dprep_Stoppreparation();
				cl_bp_controller(CL_BP_EVENT_STOP,0);
   a03de:	2004      	movs	r0, #4
   a03e0:	2100      	movs	r1, #0
   a03e2:	4b55      	ldr	r3, [pc, #340]	; (a0538 <CL_DrepAlarmActon+0x2c4>)
   a03e4:	4798      	blx	r3
// 				{	
// 				
// 					cl_dprepstate = CL_DPREP_STATE_DREP_PRIME_ALARM_BYPASS;
// 				}
				// 
			break;
   a03e6:	e073      	b.n	a04d0 <CL_DrepAlarmActon+0x25c>

			case HOLDER1STATUS_OPEN:
			case HOLDER2STATUS_OPEN:
				
				sv_cntrl_buzzer();
   a03e8:	4b4e      	ldr	r3, [pc, #312]	; (a0524 <CL_DrepAlarmActon+0x2b0>)
   a03ea:	4798      	blx	r3
				
				if((cl_dprepstate == CL_DPREP_STATE_DIALISER_PRIME) ||(cl_dprepstate == CL_DPREP_STATE_DPRIME_WAIT_STABILITY) || (cl_dprepstate == CL_DPREP_STATE_DREP_PRIME_ALARM_BYPASS))
   a03ec:	4b4e      	ldr	r3, [pc, #312]	; (a0528 <CL_DrepAlarmActon+0x2b4>)
   a03ee:	781b      	ldrb	r3, [r3, #0]
   a03f0:	2b06      	cmp	r3, #6
   a03f2:	d007      	beq.n	a0404 <CL_DrepAlarmActon+0x190>
   a03f4:	4b4c      	ldr	r3, [pc, #304]	; (a0528 <CL_DrepAlarmActon+0x2b4>)
   a03f6:	781b      	ldrb	r3, [r3, #0]
   a03f8:	2b0e      	cmp	r3, #14
   a03fa:	d003      	beq.n	a0404 <CL_DrepAlarmActon+0x190>
   a03fc:	4b4a      	ldr	r3, [pc, #296]	; (a0528 <CL_DrepAlarmActon+0x2b4>)
   a03fe:	781b      	ldrb	r3, [r3, #0]
   a0400:	2b0d      	cmp	r3, #13
   a0402:	d10b      	bne.n	a041c <CL_DrepAlarmActon+0x1a8>
				{
				sv_cntrl_setyellowalarm();
   a0404:	4b4b      	ldr	r3, [pc, #300]	; (a0534 <CL_DrepAlarmActon+0x2c0>)
   a0406:	4798      	blx	r3
				sv_cntrl_enable_bypass();
   a0408:	4b4c      	ldr	r3, [pc, #304]	; (a053c <CL_DrepAlarmActon+0x2c8>)
   a040a:	4798      	blx	r3
				cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP,0);
   a040c:	2002      	movs	r0, #2
   a040e:	2100      	movs	r1, #0
   a0410:	4b4b      	ldr	r3, [pc, #300]	; (a0540 <CL_DrepAlarmActon+0x2cc>)
   a0412:	4798      	blx	r3
				cl_dprepbypassstate = CL_DPREP_BYPASS_ON;	
   a0414:	4b4b      	ldr	r3, [pc, #300]	; (a0544 <CL_DrepAlarmActon+0x2d0>)
   a0416:	2201      	movs	r2, #1
   a0418:	701a      	strb	r2, [r3, #0]
				//sv_cntrl_setredalarm();
				Cl_Dprep_Stoppreparation();
				cl_dprepstate = CL_DPREP_STATE_CRITICAL_ALARM;	
				}
				
			break;
   a041a:	e059      	b.n	a04d0 <CL_DrepAlarmActon+0x25c>
				//	cl_dprepstate = CL_DPREP_STATE_DPRIME_WAIT_STABILITY;
				}
				else{
					
				//sv_cntrl_setredalarm();
				Cl_Dprep_Stoppreparation();
   a041c:	4b44      	ldr	r3, [pc, #272]	; (a0530 <CL_DrepAlarmActon+0x2bc>)
   a041e:	4798      	blx	r3
				cl_dprepstate = CL_DPREP_STATE_CRITICAL_ALARM;	
   a0420:	4b41      	ldr	r3, [pc, #260]	; (a0528 <CL_DrepAlarmActon+0x2b4>)
   a0422:	220c      	movs	r2, #12
   a0424:	701a      	strb	r2, [r3, #0]
				}
				
			break;
   a0426:	e053      	b.n	a04d0 <CL_DrepAlarmActon+0x25c>
			case HOLDER2STATUS_CLOSED:
			case ACID_IN_CLOSED:
			case BICARB_IN_CLOSED:
				
		//	sv_cntrl_setyellowalarm();
			sv_cntrl_buzzer();
   a0428:	4b3e      	ldr	r3, [pc, #248]	; (a0524 <CL_DrepAlarmActon+0x2b0>)
   a042a:	4798      	blx	r3
			if((cl_dprepstate == CL_DPREP_STATE_DIALISER_PRIME)||(cl_dprepstate == CL_DPREP_STATE_DPRIME_WAIT_STABILITY) || (cl_dprepstate == CL_DPREP_STATE_DREP_PRIME_ALARM_BYPASS))
   a042c:	4b3e      	ldr	r3, [pc, #248]	; (a0528 <CL_DrepAlarmActon+0x2b4>)
   a042e:	781b      	ldrb	r3, [r3, #0]
   a0430:	2b06      	cmp	r3, #6
   a0432:	d007      	beq.n	a0444 <CL_DrepAlarmActon+0x1d0>
   a0434:	4b3c      	ldr	r3, [pc, #240]	; (a0528 <CL_DrepAlarmActon+0x2b4>)
   a0436:	781b      	ldrb	r3, [r3, #0]
   a0438:	2b0e      	cmp	r3, #14
   a043a:	d003      	beq.n	a0444 <CL_DrepAlarmActon+0x1d0>
   a043c:	4b3a      	ldr	r3, [pc, #232]	; (a0528 <CL_DrepAlarmActon+0x2b4>)
   a043e:	781b      	ldrb	r3, [r3, #0]
   a0440:	2b0d      	cmp	r3, #13
   a0442:	d107      	bne.n	a0454 <CL_DrepAlarmActon+0x1e0>
			{
				sv_cntrl_setyellowalarm();
   a0444:	4b3b      	ldr	r3, [pc, #236]	; (a0534 <CL_DrepAlarmActon+0x2c0>)
   a0446:	4798      	blx	r3
				sv_cntrl_enable_bypass();
   a0448:	4b3c      	ldr	r3, [pc, #240]	; (a053c <CL_DrepAlarmActon+0x2c8>)
   a044a:	4798      	blx	r3
				cl_dprepbypassstate = CL_DPREP_BYPASS_ON;
   a044c:	4b3d      	ldr	r3, [pc, #244]	; (a0544 <CL_DrepAlarmActon+0x2d0>)
   a044e:	2201      	movs	r2, #1
   a0450:	701a      	strb	r2, [r3, #0]
				
				Cl_Dprep_Stoppreparation();
				cl_dprepstate = CL_DPREP_STATE_CRITICAL_ALARM;
			}
			
			break;
   a0452:	e03d      	b.n	a04d0 <CL_DrepAlarmActon+0x25c>
			//	cl_dprepstate = CL_DPREP_STATE_DREP_PRIME_ALARM_BYPASS;
				
			}
			else{
				
				Cl_Dprep_Stoppreparation();
   a0454:	4b36      	ldr	r3, [pc, #216]	; (a0530 <CL_DrepAlarmActon+0x2bc>)
   a0456:	4798      	blx	r3
				cl_dprepstate = CL_DPREP_STATE_CRITICAL_ALARM;
   a0458:	4b33      	ldr	r3, [pc, #204]	; (a0528 <CL_DrepAlarmActon+0x2b4>)
   a045a:	220c      	movs	r2, #12
   a045c:	701a      	strb	r2, [r3, #0]
			}
			
			break;
   a045e:	e037      	b.n	a04d0 <CL_DrepAlarmActon+0x25c>
			case TEMP3_LOW_THRESHOLD:
			case 	COND_STATUS_HIGH:
			case	COND_STATUS_LOW:
			
				
				sv_cntrl_buzzer();
   a0460:	4b30      	ldr	r3, [pc, #192]	; (a0524 <CL_DrepAlarmActon+0x2b0>)
   a0462:	4798      	blx	r3
			
			if((cl_dprepstate == CL_DPREP_STATE_DIALISER_PRIME) ||(cl_dprepstate == CL_DPREP_STATE_DPRIME_WAIT_STABILITY) || (cl_dprepstate == CL_DPREP_STATE_DREP_PRIME_ALARM_BYPASS))
   a0464:	4b30      	ldr	r3, [pc, #192]	; (a0528 <CL_DrepAlarmActon+0x2b4>)
   a0466:	781b      	ldrb	r3, [r3, #0]
   a0468:	2b06      	cmp	r3, #6
   a046a:	d007      	beq.n	a047c <CL_DrepAlarmActon+0x208>
   a046c:	4b2e      	ldr	r3, [pc, #184]	; (a0528 <CL_DrepAlarmActon+0x2b4>)
   a046e:	781b      	ldrb	r3, [r3, #0]
   a0470:	2b0e      	cmp	r3, #14
   a0472:	d003      	beq.n	a047c <CL_DrepAlarmActon+0x208>
   a0474:	4b2c      	ldr	r3, [pc, #176]	; (a0528 <CL_DrepAlarmActon+0x2b4>)
   a0476:	781b      	ldrb	r3, [r3, #0]
   a0478:	2b0d      	cmp	r3, #13
   a047a:	d11f      	bne.n	a04bc <CL_DrepAlarmActon+0x248>
			{
				//Cl_Dprep_Stoppreparation();
				sv_cntrl_setyellowalarm();
   a047c:	4b2d      	ldr	r3, [pc, #180]	; (a0534 <CL_DrepAlarmActon+0x2c0>)
   a047e:	4798      	blx	r3
				sv_cntrl_enable_bypass();
   a0480:	4b2e      	ldr	r3, [pc, #184]	; (a053c <CL_DrepAlarmActon+0x2c8>)
   a0482:	4798      	blx	r3
				cl_dprepbypassstate = CL_DPREP_BYPASS_ON;
   a0484:	4b2f      	ldr	r3, [pc, #188]	; (a0544 <CL_DrepAlarmActon+0x2d0>)
   a0486:	2201      	movs	r2, #1
   a0488:	701a      	strb	r2, [r3, #0]
				//cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP,0);
				state_counter++;
   a048a:	4b2f      	ldr	r3, [pc, #188]	; (a0548 <CL_DrepAlarmActon+0x2d4>)
   a048c:	681b      	ldr	r3, [r3, #0]
   a048e:	3301      	adds	r3, #1
   a0490:	4a2d      	ldr	r2, [pc, #180]	; (a0548 <CL_DrepAlarmActon+0x2d4>)
   a0492:	6013      	str	r3, [r2, #0]
				Cl_AlarmActivateAlarms(COND_STATUS_HIGH,false );
   a0494:	2008      	movs	r0, #8
   a0496:	2100      	movs	r1, #0
   a0498:	4b2c      	ldr	r3, [pc, #176]	; (a054c <CL_DrepAlarmActon+0x2d8>)
   a049a:	4798      	blx	r3
				Cl_AlarmActivateAlarms(COND_STATUS_LOW,false );
   a049c:	2007      	movs	r0, #7
   a049e:	2100      	movs	r1, #0
   a04a0:	4b2a      	ldr	r3, [pc, #168]	; (a054c <CL_DrepAlarmActon+0x2d8>)
   a04a2:	4798      	blx	r3
				Cl_AlarmActivateAlarms(TEMP3_HIGH_THRESHOLD,false );
   a04a4:	2013      	movs	r0, #19
   a04a6:	2100      	movs	r1, #0
   a04a8:	4b28      	ldr	r3, [pc, #160]	; (a054c <CL_DrepAlarmActon+0x2d8>)
   a04aa:	4798      	blx	r3
				Cl_AlarmActivateAlarms(TEMP3_LOW_THRESHOLD,false );
   a04ac:	2014      	movs	r0, #20
   a04ae:	2100      	movs	r1, #0
   a04b0:	4b26      	ldr	r3, [pc, #152]	; (a054c <CL_DrepAlarmActon+0x2d8>)
   a04b2:	4798      	blx	r3
				
				cl_dprepstate = CL_DPREP_STATE_DPRIME_WAIT_STABILITY;
   a04b4:	4b1c      	ldr	r3, [pc, #112]	; (a0528 <CL_DrepAlarmActon+0x2b4>)
   a04b6:	220e      	movs	r2, #14
   a04b8:	701a      	strb	r2, [r3, #0]
			else{
				//sv_cntrl_setredalarm();
				Cl_Dprep_Stoppreparation();
				cl_dprepstate = CL_DPREP_STATE_CRITICAL_ALARM;
			}
			break;
   a04ba:	e009      	b.n	a04d0 <CL_DrepAlarmActon+0x25c>
				
				cl_dprepstate = CL_DPREP_STATE_DPRIME_WAIT_STABILITY;
			}
			else{
				//sv_cntrl_setredalarm();
				Cl_Dprep_Stoppreparation();
   a04bc:	4b1c      	ldr	r3, [pc, #112]	; (a0530 <CL_DrepAlarmActon+0x2bc>)
   a04be:	4798      	blx	r3
				cl_dprepstate = CL_DPREP_STATE_CRITICAL_ALARM;
   a04c0:	4b19      	ldr	r3, [pc, #100]	; (a0528 <CL_DrepAlarmActon+0x2b4>)
   a04c2:	220c      	movs	r2, #12
   a04c4:	701a      	strb	r2, [r3, #0]
			}
			break;
   a04c6:	e003      	b.n	a04d0 <CL_DrepAlarmActon+0x25c>
			
		
			default:
			cl_dprepalarmid = _NO_ALARM;
   a04c8:	2300      	movs	r3, #0
   a04ca:	71fb      	strb	r3, [r7, #7]
			break;
   a04cc:	e000      	b.n	a04d0 <CL_DrepAlarmActon+0x25c>
			//		Cl_DprepFlowOff();
					//cl_gfillinprogress = false;		
					
				}
			}
			break;
   a04ce:	bf00      	nop
		
			default:
			cl_dprepalarmid = _NO_ALARM;
			break;
	}
		 if(cl_dprepalarmid != _NO_ALARM)
   a04d0:	79fb      	ldrb	r3, [r7, #7]
   a04d2:	2b00      	cmp	r3, #0
   a04d4:	d021      	beq.n	a051a <CL_DrepAlarmActon+0x2a6>
		 {
			data[0] = (Cl_Uint8Type)cl_dprepalarmid;
   a04d6:	79fb      	ldrb	r3, [r7, #7]
   a04d8:	723b      	strb	r3, [r7, #8]
			data[1] = (Cl_Uint8Type) CL_ALARM_TRIGGERED;
   a04da:	2301      	movs	r3, #1
   a04dc:	727b      	strb	r3, [r7, #9]
			data[2] = (Cl_Uint8Type)CRITICAL;
   a04de:	2302      	movs	r3, #2
   a04e0:	72bb      	strb	r3, [r7, #10]
			command = CON_TX_COMMAND_ALARM;
   a04e2:	2307      	movs	r3, #7
   a04e4:	73bb      	strb	r3, [r7, #14]

			Cl_dprepretcode = Cl_SendDatatoconsole(command,&data,3);
   a04e6:	7bba      	ldrb	r2, [r7, #14]
   a04e8:	f107 0308 	add.w	r3, r7, #8
   a04ec:	4610      	mov	r0, r2
   a04ee:	4619      	mov	r1, r3
   a04f0:	2203      	movs	r2, #3
   a04f2:	4b17      	ldr	r3, [pc, #92]	; (a0550 <CL_DrepAlarmActon+0x2dc>)
   a04f4:	4798      	blx	r3
   a04f6:	4603      	mov	r3, r0
   a04f8:	75fb      	strb	r3, [r7, #23]
			
					
			command = CON_TX_COMMAND_CL_SYS_STATE;
   a04fa:	232b      	movs	r3, #43	; 0x2b
   a04fc:	73bb      	strb	r3, [r7, #14]
			data[0] = (Cl_Uint8Type)POST_CLEAN_STANDBY;
   a04fe:	2302      	movs	r3, #2
   a0500:	723b      	strb	r3, [r7, #8]
			data[1] = (Cl_Uint8Type)PRIME_IDLE;
   a0502:	2300      	movs	r3, #0
   a0504:	727b      	strb	r3, [r7, #9]
			Cl_dprepretcode = Cl_SendDatatoconsole(command,&data,2);
   a0506:	7bba      	ldrb	r2, [r7, #14]
   a0508:	f107 0308 	add.w	r3, r7, #8
   a050c:	4610      	mov	r0, r2
   a050e:	4619      	mov	r1, r3
   a0510:	2202      	movs	r2, #2
   a0512:	4b0f      	ldr	r3, [pc, #60]	; (a0550 <CL_DrepAlarmActon+0x2dc>)
   a0514:	4798      	blx	r3
   a0516:	4603      	mov	r3, r0
   a0518:	75fb      	strb	r3, [r7, #23]
		 }
			
	return CL_OK;	
   a051a:	2300      	movs	r3, #0
}
   a051c:	4618      	mov	r0, r3
   a051e:	3718      	adds	r7, #24
   a0520:	46bd      	mov	sp, r7
   a0522:	bd80      	pop	{r7, pc}
   a0524:	00099f61 	.word	0x00099f61
   a0528:	20071c6f 	.word	0x20071c6f
   a052c:	000a23f5 	.word	0x000a23f5
   a0530:	000a0f49 	.word	0x000a0f49
   a0534:	00099f39 	.word	0x00099f39
   a0538:	00093305 	.word	0x00093305
   a053c:	00099e79 	.word	0x00099e79
   a0540:	0008850d 	.word	0x0008850d
   a0544:	20071c70 	.word	0x20071c70
   a0548:	20071c34 	.word	0x20071c34
   a054c:	00082e61 	.word	0x00082e61
   a0550:	0009ba51 	.word	0x0009ba51

000a0554 <Cl_dprepSendAlarm>:
	
	

Cl_ReturnCodeType  Cl_dprepSendAlarm(Cl_NewAlarmIdType cl_dprepalarmId )
{
   a0554:	b580      	push	{r7, lr}
   a0556:	b086      	sub	sp, #24
   a0558:	af00      	add	r7, sp, #0
   a055a:	4603      	mov	r3, r0
   a055c:	71fb      	strb	r3, [r7, #7]
	
			Cl_ReturnCodeType Cl_RetVal = CL_OK;
   a055e:	2300      	movs	r3, #0
   a0560:	75fb      	strb	r3, [r7, #23]
			 
			 
			Cl_Uint8Type data[3] ={0, 0} ,*data1 = NULL;
   a0562:	2300      	movs	r3, #0
   a0564:	81bb      	strh	r3, [r7, #12]
   a0566:	2300      	movs	r3, #0
   a0568:	73bb      	strb	r3, [r7, #14]
   a056a:	2300      	movs	r3, #0
   a056c:	613b      	str	r3, [r7, #16]
			Cl_Uint8Type data3;
			Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a056e:	2351      	movs	r3, #81	; 0x51
   a0570:	73fb      	strb	r3, [r7, #15]
			if(cl_dprepalarmId != _NO_ALARM)
   a0572:	79fb      	ldrb	r3, [r7, #7]
   a0574:	2b00      	cmp	r3, #0
   a0576:	d014      	beq.n	a05a2 <Cl_dprepSendAlarm+0x4e>
			 {
				data[0] = (Cl_Uint8Type)cl_dprepalarmId;
   a0578:	79fb      	ldrb	r3, [r7, #7]
   a057a:	733b      	strb	r3, [r7, #12]
				data[1] = (Cl_Uint8Type) CL_ALARM_TRIGGERED;
   a057c:	2301      	movs	r3, #1
   a057e:	737b      	strb	r3, [r7, #13]
				data[2] = (Cl_Uint8Type)CRITICAL;
   a0580:	2302      	movs	r3, #2
   a0582:	73bb      	strb	r3, [r7, #14]
				command = CON_TX_COMMAND_ALARM;
   a0584:	2307      	movs	r3, #7
   a0586:	73fb      	strb	r3, [r7, #15]
			
				Cl_RetVal = Cl_SendDatatoconsole(command,&data,3);
   a0588:	7bfa      	ldrb	r2, [r7, #15]
   a058a:	f107 030c 	add.w	r3, r7, #12
   a058e:	4610      	mov	r0, r2
   a0590:	4619      	mov	r1, r3
   a0592:	2203      	movs	r2, #3
   a0594:	4b05      	ldr	r3, [pc, #20]	; (a05ac <Cl_dprepSendAlarm+0x58>)
   a0596:	4798      	blx	r3
   a0598:	4603      	mov	r3, r0
   a059a:	75fb      	strb	r3, [r7, #23]
				cl_wait(10);
   a059c:	200a      	movs	r0, #10
   a059e:	4b04      	ldr	r3, [pc, #16]	; (a05b0 <Cl_dprepSendAlarm+0x5c>)
   a05a0:	4798      	blx	r3

			 }
}	
   a05a2:	4618      	mov	r0, r3
   a05a4:	3718      	adds	r7, #24
   a05a6:	46bd      	mov	sp, r7
   a05a8:	bd80      	pop	{r7, pc}
   a05aa:	bf00      	nop
   a05ac:	0009ba51 	.word	0x0009ba51
   a05b0:	00093195 	.word	0x00093195
   a05b4:	00000000 	.word	0x00000000

000a05b8 <Cl_Dprep_CheckforfillingCompletion>:
	Cl_ReturnCodeType Cl_Dprep_CheckforfillingCompletion(void)
	{
   a05b8:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
   a05bc:	b087      	sub	sp, #28
   a05be:	af00      	add	r7, sp, #0
		Cl_ReturnCodeType Cl_dprepretcode = CL_ERROR;
   a05c0:	2304      	movs	r3, #4
   a05c2:	75fb      	strb	r3, [r7, #23]
		Cl_Int16Type cl_cond,cl_temp3;
		float cond,cond_comp,temp;
		float cl_cond_ms,cl_temp3_cel;
		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTDATA,&Cl_Dprep_filling_TotalMinutescounter,2);
   a05c4:	2019      	movs	r0, #25
   a05c6:	497a      	ldr	r1, [pc, #488]	; (a07b0 <Cl_Dprep_CheckforfillingCompletion+0x1f8>)
   a05c8:	2202      	movs	r2, #2
   a05ca:	4b7a      	ldr	r3, [pc, #488]	; (a07b4 <Cl_Dprep_CheckforfillingCompletion+0x1fc>)
   a05cc:	4798      	blx	r3
		if(Cl_Dprep_filling_TotalMinutescounter > CL_DPREP_FILLING_TIMEOUT_MIN )
   a05ce:	4b78      	ldr	r3, [pc, #480]	; (a07b0 <Cl_Dprep_CheckforfillingCompletion+0x1f8>)
   a05d0:	881b      	ldrh	r3, [r3, #0]
   a05d2:	b21b      	sxth	r3, r3
   a05d4:	2b0a      	cmp	r3, #10
   a05d6:	dd02      	ble.n	a05de <Cl_Dprep_CheckforfillingCompletion+0x26>
		{
			
			//Cl_dprepretcode = CL_REJECTED;
			// Rise alarm
			Cl_dprepretcode = CL_OK;
   a05d8:	2300      	movs	r3, #0
   a05da:	75fb      	strb	r3, [r7, #23]
   a05dc:	e0ca      	b.n	a0774 <Cl_Dprep_CheckforfillingCompletion+0x1bc>
		}
		else
		{
			Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&cl_temp3);
   a05de:	1d3b      	adds	r3, r7, #4
   a05e0:	2014      	movs	r0, #20
   a05e2:	4619      	mov	r1, r3
   a05e4:	4b74      	ldr	r3, [pc, #464]	; (a07b8 <Cl_Dprep_CheckforfillingCompletion+0x200>)
   a05e6:	4798      	blx	r3
			Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_STATUS,&cl_cond);
   a05e8:	1dbb      	adds	r3, r7, #6
   a05ea:	2007      	movs	r0, #7
   a05ec:	4619      	mov	r1, r3
   a05ee:	4b72      	ldr	r3, [pc, #456]	; (a07b8 <Cl_Dprep_CheckforfillingCompletion+0x200>)
   a05f0:	4798      	blx	r3
// 			//temp3 = ((temp3* 4) +temp)/5;
// 			
// 							
// 			//cl_temp3_cel = 0.0000116 * temp *temp + 0.0035 *temp + 11.157;

		cl_temp3_cel = cl_temp3 /100;
   a05f2:	88bb      	ldrh	r3, [r7, #4]
   a05f4:	b21b      	sxth	r3, r3
   a05f6:	4a71      	ldr	r2, [pc, #452]	; (a07bc <Cl_Dprep_CheckforfillingCompletion+0x204>)
   a05f8:	fb82 1203 	smull	r1, r2, r2, r3
   a05fc:	1152      	asrs	r2, r2, #5
   a05fe:	17db      	asrs	r3, r3, #31
   a0600:	1ad3      	subs	r3, r2, r3
   a0602:	b29b      	uxth	r3, r3
   a0604:	b21a      	sxth	r2, r3
   a0606:	4b6e      	ldr	r3, [pc, #440]	; (a07c0 <Cl_Dprep_CheckforfillingCompletion+0x208>)
   a0608:	4610      	mov	r0, r2
   a060a:	4798      	blx	r3
   a060c:	4603      	mov	r3, r0
   a060e:	613b      	str	r3, [r7, #16]
			
									//	cond =(cond*5 + cond_final_cs3)/6;
			cond =  -0.0001 * cl_cond* cl_cond  + 0.36 * cl_cond  - 38.39 ;
   a0610:	88fb      	ldrh	r3, [r7, #6]
   a0612:	b21a      	sxth	r2, r3
   a0614:	4b6b      	ldr	r3, [pc, #428]	; (a07c4 <Cl_Dprep_CheckforfillingCompletion+0x20c>)
   a0616:	4610      	mov	r0, r2
   a0618:	4798      	blx	r3
   a061a:	4602      	mov	r2, r0
   a061c:	460b      	mov	r3, r1
   a061e:	4c6a      	ldr	r4, [pc, #424]	; (a07c8 <Cl_Dprep_CheckforfillingCompletion+0x210>)
   a0620:	4610      	mov	r0, r2
   a0622:	4619      	mov	r1, r3
   a0624:	a356      	add	r3, pc, #344	; (adr r3, a0780 <Cl_Dprep_CheckforfillingCompletion+0x1c8>)
   a0626:	e9d3 2300 	ldrd	r2, r3, [r3]
   a062a:	47a0      	blx	r4
   a062c:	4602      	mov	r2, r0
   a062e:	460b      	mov	r3, r1
   a0630:	4690      	mov	r8, r2
   a0632:	4699      	mov	r9, r3
   a0634:	88fb      	ldrh	r3, [r7, #6]
   a0636:	b21a      	sxth	r2, r3
   a0638:	4b62      	ldr	r3, [pc, #392]	; (a07c4 <Cl_Dprep_CheckforfillingCompletion+0x20c>)
   a063a:	4610      	mov	r0, r2
   a063c:	4798      	blx	r3
   a063e:	4602      	mov	r2, r0
   a0640:	460b      	mov	r3, r1
   a0642:	4c61      	ldr	r4, [pc, #388]	; (a07c8 <Cl_Dprep_CheckforfillingCompletion+0x210>)
   a0644:	4640      	mov	r0, r8
   a0646:	4649      	mov	r1, r9
   a0648:	47a0      	blx	r4
   a064a:	4602      	mov	r2, r0
   a064c:	460b      	mov	r3, r1
   a064e:	4690      	mov	r8, r2
   a0650:	4699      	mov	r9, r3
   a0652:	88fb      	ldrh	r3, [r7, #6]
   a0654:	b21a      	sxth	r2, r3
   a0656:	4b5b      	ldr	r3, [pc, #364]	; (a07c4 <Cl_Dprep_CheckforfillingCompletion+0x20c>)
   a0658:	4610      	mov	r0, r2
   a065a:	4798      	blx	r3
   a065c:	4602      	mov	r2, r0
   a065e:	460b      	mov	r3, r1
   a0660:	4c59      	ldr	r4, [pc, #356]	; (a07c8 <Cl_Dprep_CheckforfillingCompletion+0x210>)
   a0662:	4610      	mov	r0, r2
   a0664:	4619      	mov	r1, r3
   a0666:	a348      	add	r3, pc, #288	; (adr r3, a0788 <Cl_Dprep_CheckforfillingCompletion+0x1d0>)
   a0668:	e9d3 2300 	ldrd	r2, r3, [r3]
   a066c:	47a0      	blx	r4
   a066e:	4602      	mov	r2, r0
   a0670:	460b      	mov	r3, r1
   a0672:	4c56      	ldr	r4, [pc, #344]	; (a07cc <Cl_Dprep_CheckforfillingCompletion+0x214>)
   a0674:	4640      	mov	r0, r8
   a0676:	4649      	mov	r1, r9
   a0678:	47a0      	blx	r4
   a067a:	4602      	mov	r2, r0
   a067c:	460b      	mov	r3, r1
   a067e:	4c54      	ldr	r4, [pc, #336]	; (a07d0 <Cl_Dprep_CheckforfillingCompletion+0x218>)
   a0680:	4610      	mov	r0, r2
   a0682:	4619      	mov	r1, r3
   a0684:	a342      	add	r3, pc, #264	; (adr r3, a0790 <Cl_Dprep_CheckforfillingCompletion+0x1d8>)
   a0686:	e9d3 2300 	ldrd	r2, r3, [r3]
   a068a:	47a0      	blx	r4
   a068c:	4602      	mov	r2, r0
   a068e:	460b      	mov	r3, r1
   a0690:	4610      	mov	r0, r2
   a0692:	4619      	mov	r1, r3
   a0694:	4b4f      	ldr	r3, [pc, #316]	; (a07d4 <Cl_Dprep_CheckforfillingCompletion+0x21c>)
   a0696:	4798      	blx	r3
   a0698:	4603      	mov	r3, r0
   a069a:	60fb      	str	r3, [r7, #12]
			cond_comp= (cond/(1+(cl_temp3_cel-25.0)*0.020))/10;
   a069c:	4b4e      	ldr	r3, [pc, #312]	; (a07d8 <Cl_Dprep_CheckforfillingCompletion+0x220>)
   a069e:	68f8      	ldr	r0, [r7, #12]
   a06a0:	4798      	blx	r3
   a06a2:	4680      	mov	r8, r0
   a06a4:	4689      	mov	r9, r1
   a06a6:	4b4c      	ldr	r3, [pc, #304]	; (a07d8 <Cl_Dprep_CheckforfillingCompletion+0x220>)
   a06a8:	6938      	ldr	r0, [r7, #16]
   a06aa:	4798      	blx	r3
   a06ac:	4602      	mov	r2, r0
   a06ae:	460b      	mov	r3, r1
   a06b0:	4c47      	ldr	r4, [pc, #284]	; (a07d0 <Cl_Dprep_CheckforfillingCompletion+0x218>)
   a06b2:	4610      	mov	r0, r2
   a06b4:	4619      	mov	r1, r3
   a06b6:	f04f 0200 	mov.w	r2, #0
   a06ba:	4b48      	ldr	r3, [pc, #288]	; (a07dc <Cl_Dprep_CheckforfillingCompletion+0x224>)
   a06bc:	47a0      	blx	r4
   a06be:	4602      	mov	r2, r0
   a06c0:	460b      	mov	r3, r1
   a06c2:	4c41      	ldr	r4, [pc, #260]	; (a07c8 <Cl_Dprep_CheckforfillingCompletion+0x210>)
   a06c4:	4610      	mov	r0, r2
   a06c6:	4619      	mov	r1, r3
   a06c8:	a333      	add	r3, pc, #204	; (adr r3, a0798 <Cl_Dprep_CheckforfillingCompletion+0x1e0>)
   a06ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   a06ce:	47a0      	blx	r4
   a06d0:	4602      	mov	r2, r0
   a06d2:	460b      	mov	r3, r1
   a06d4:	4c3d      	ldr	r4, [pc, #244]	; (a07cc <Cl_Dprep_CheckforfillingCompletion+0x214>)
   a06d6:	4610      	mov	r0, r2
   a06d8:	4619      	mov	r1, r3
   a06da:	f04f 0200 	mov.w	r2, #0
   a06de:	4b40      	ldr	r3, [pc, #256]	; (a07e0 <Cl_Dprep_CheckforfillingCompletion+0x228>)
   a06e0:	47a0      	blx	r4
   a06e2:	4602      	mov	r2, r0
   a06e4:	460b      	mov	r3, r1
   a06e6:	4c3f      	ldr	r4, [pc, #252]	; (a07e4 <Cl_Dprep_CheckforfillingCompletion+0x22c>)
   a06e8:	4640      	mov	r0, r8
   a06ea:	4649      	mov	r1, r9
   a06ec:	47a0      	blx	r4
   a06ee:	4602      	mov	r2, r0
   a06f0:	460b      	mov	r3, r1
   a06f2:	4c3c      	ldr	r4, [pc, #240]	; (a07e4 <Cl_Dprep_CheckforfillingCompletion+0x22c>)
   a06f4:	4610      	mov	r0, r2
   a06f6:	4619      	mov	r1, r3
   a06f8:	f04f 0200 	mov.w	r2, #0
   a06fc:	4b3a      	ldr	r3, [pc, #232]	; (a07e8 <Cl_Dprep_CheckforfillingCompletion+0x230>)
   a06fe:	47a0      	blx	r4
   a0700:	4602      	mov	r2, r0
   a0702:	460b      	mov	r3, r1
   a0704:	4610      	mov	r0, r2
   a0706:	4619      	mov	r1, r3
   a0708:	4b32      	ldr	r3, [pc, #200]	; (a07d4 <Cl_Dprep_CheckforfillingCompletion+0x21c>)
   a070a:	4798      	blx	r3
   a070c:	4603      	mov	r3, r0
   a070e:	60bb      	str	r3, [r7, #8]
			//tempdata.word = (cond_comp);
			  
			if((cond_comp > 13.3) && (cond_comp < 13.8))
   a0710:	4b31      	ldr	r3, [pc, #196]	; (a07d8 <Cl_Dprep_CheckforfillingCompletion+0x220>)
   a0712:	68b8      	ldr	r0, [r7, #8]
   a0714:	4798      	blx	r3
   a0716:	4602      	mov	r2, r0
   a0718:	460b      	mov	r3, r1
   a071a:	4c34      	ldr	r4, [pc, #208]	; (a07ec <Cl_Dprep_CheckforfillingCompletion+0x234>)
   a071c:	4610      	mov	r0, r2
   a071e:	4619      	mov	r1, r3
   a0720:	a31f      	add	r3, pc, #124	; (adr r3, a07a0 <Cl_Dprep_CheckforfillingCompletion+0x1e8>)
   a0722:	e9d3 2300 	ldrd	r2, r3, [r3]
   a0726:	47a0      	blx	r4
   a0728:	4603      	mov	r3, r0
   a072a:	2b00      	cmp	r3, #0
   a072c:	d022      	beq.n	a0774 <Cl_Dprep_CheckforfillingCompletion+0x1bc>
   a072e:	4b2a      	ldr	r3, [pc, #168]	; (a07d8 <Cl_Dprep_CheckforfillingCompletion+0x220>)
   a0730:	68b8      	ldr	r0, [r7, #8]
   a0732:	4798      	blx	r3
   a0734:	4602      	mov	r2, r0
   a0736:	460b      	mov	r3, r1
   a0738:	4c2d      	ldr	r4, [pc, #180]	; (a07f0 <Cl_Dprep_CheckforfillingCompletion+0x238>)
   a073a:	4610      	mov	r0, r2
   a073c:	4619      	mov	r1, r3
   a073e:	a31a      	add	r3, pc, #104	; (adr r3, a07a8 <Cl_Dprep_CheckforfillingCompletion+0x1f0>)
   a0740:	e9d3 2300 	ldrd	r2, r3, [r3]
   a0744:	47a0      	blx	r4
   a0746:	4603      	mov	r3, r0
   a0748:	2b00      	cmp	r3, #0
   a074a:	d013      	beq.n	a0774 <Cl_Dprep_CheckforfillingCompletion+0x1bc>
			{
				if ( cl_temp3_cel > 36.5 && cl_temp3_cel < 37.5)
   a074c:	4b29      	ldr	r3, [pc, #164]	; (a07f4 <Cl_Dprep_CheckforfillingCompletion+0x23c>)
   a074e:	6938      	ldr	r0, [r7, #16]
   a0750:	4929      	ldr	r1, [pc, #164]	; (a07f8 <Cl_Dprep_CheckforfillingCompletion+0x240>)
   a0752:	4798      	blx	r3
   a0754:	4603      	mov	r3, r0
   a0756:	2b00      	cmp	r3, #0
   a0758:	d00c      	beq.n	a0774 <Cl_Dprep_CheckforfillingCompletion+0x1bc>
   a075a:	4b28      	ldr	r3, [pc, #160]	; (a07fc <Cl_Dprep_CheckforfillingCompletion+0x244>)
   a075c:	6938      	ldr	r0, [r7, #16]
   a075e:	4928      	ldr	r1, [pc, #160]	; (a0800 <Cl_Dprep_CheckforfillingCompletion+0x248>)
   a0760:	4798      	blx	r3
   a0762:	4603      	mov	r3, r0
   a0764:	2b00      	cmp	r3, #0
   a0766:	d005      	beq.n	a0774 <Cl_Dprep_CheckforfillingCompletion+0x1bc>
				{
					if(cl_temp3_stable_confirm == true)
   a0768:	4b26      	ldr	r3, [pc, #152]	; (a0804 <Cl_Dprep_CheckforfillingCompletion+0x24c>)
   a076a:	781b      	ldrb	r3, [r3, #0]
   a076c:	2b00      	cmp	r3, #0
   a076e:	d001      	beq.n	a0774 <Cl_Dprep_CheckforfillingCompletion+0x1bc>
							Cl_dprepretcode = CL_OK;
   a0770:	2300      	movs	r3, #0
   a0772:	75fb      	strb	r3, [r7, #23]
			}

			
		}
		
		return Cl_dprepretcode;
   a0774:	7dfb      	ldrb	r3, [r7, #23]
		
	}
   a0776:	4618      	mov	r0, r3
   a0778:	371c      	adds	r7, #28
   a077a:	46bd      	mov	sp, r7
   a077c:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}
   a0780:	eb1c432d 	.word	0xeb1c432d
   a0784:	bf1a36e2 	.word	0xbf1a36e2
   a0788:	70a3d70a 	.word	0x70a3d70a
   a078c:	3fd70a3d 	.word	0x3fd70a3d
   a0790:	851eb852 	.word	0x851eb852
   a0794:	404331eb 	.word	0x404331eb
   a0798:	47ae147b 	.word	0x47ae147b
   a079c:	3f947ae1 	.word	0x3f947ae1
   a07a0:	9999999a 	.word	0x9999999a
   a07a4:	402a9999 	.word	0x402a9999
   a07a8:	9999999a 	.word	0x9999999a
   a07ac:	402b9999 	.word	0x402b9999
   a07b0:	20071c52 	.word	0x20071c52
   a07b4:	0009ba51 	.word	0x0009ba51
   a07b8:	0008e7f9 	.word	0x0008e7f9
   a07bc:	51eb851f 	.word	0x51eb851f
   a07c0:	000a68b1 	.word	0x000a68b1
   a07c4:	000a600d 	.word	0x000a600d
   a07c8:	000a60d9 	.word	0x000a60d9
   a07cc:	000a5d75 	.word	0x000a5d75
   a07d0:	000a5d71 	.word	0x000a5d71
   a07d4:	000a669d 	.word	0x000a669d
   a07d8:	000a6031 	.word	0x000a6031
   a07dc:	40390000 	.word	0x40390000
   a07e0:	3ff00000 	.word	0x3ff00000
   a07e4:	000a632d 	.word	0x000a632d
   a07e8:	40240000 	.word	0x40240000
   a07ec:	000a65f9 	.word	0x000a65f9
   a07f0:	000a65bd 	.word	0x000a65bd
   a07f4:	000a6cd1 	.word	0x000a6cd1
   a07f8:	42120000 	.word	0x42120000
   a07fc:	000a6c95 	.word	0x000a6c95
   a0800:	42160000 	.word	0x42160000
   a0804:	20071c68 	.word	0x20071c68

000a0808 <Cl_DprepSelectDialysateInlet>:
		
	}
	
	
	Cl_ReturnCodeType  Cl_DprepSelectDialysateInlet(void)
	{
   a0808:	b580      	push	{r7, lr}
   a080a:	b082      	sub	sp, #8
   a080c:	af00      	add	r7, sp, #0
		Cl_ReturnCodeType Cl_RetVal = CL_OK;
   a080e:	2300      	movs	r3, #0
   a0810:	71fb      	strb	r3, [r7, #7]
		//sv_cntrl_deactivate_valve(VALVE_ID18);
		//sv_cntrl_activate_valve(VALVE_ID19);
		sv_cntrl_activate_valve(VALVE_ID18);
   a0812:	2012      	movs	r0, #18
   a0814:	4b03      	ldr	r3, [pc, #12]	; (a0824 <Cl_DprepSelectDialysateInlet+0x1c>)
   a0816:	4798      	blx	r3
		return Cl_RetVal;
   a0818:	79fb      	ldrb	r3, [r7, #7]
	}
   a081a:	4618      	mov	r0, r3
   a081c:	3708      	adds	r7, #8
   a081e:	46bd      	mov	sp, r7
   a0820:	bd80      	pop	{r7, pc}
   a0822:	bf00      	nop
   a0824:	00099ccd 	.word	0x00099ccd

000a0828 <UpdateDprepFillingMinuteTick>:
					Cl_dpreptcode = Cl_Dprep_UpdateTimeInfo();
					return Cl_dpreptcode;
}

Cl_ReturnCodeType UpdateDprepFillingMinuteTick(void)
{
   a0828:	b480      	push	{r7}
   a082a:	b083      	sub	sp, #12
   a082c:	af00      	add	r7, sp, #0
					Cl_ReturnCodeType Cl_dpreptcode = CL_OK;
   a082e:	2300      	movs	r3, #0
   a0830:	71fb      	strb	r3, [r7, #7]

					Cl_Dprep_filling_secondscounter = 0;
   a0832:	4b0e      	ldr	r3, [pc, #56]	; (a086c <UpdateDprepFillingMinuteTick+0x44>)
   a0834:	2200      	movs	r2, #0
   a0836:	801a      	strh	r2, [r3, #0]
					Cl_Dprep_filling_Minutescounter++;
   a0838:	4b0d      	ldr	r3, [pc, #52]	; (a0870 <UpdateDprepFillingMinuteTick+0x48>)
   a083a:	881b      	ldrh	r3, [r3, #0]
   a083c:	b29b      	uxth	r3, r3
   a083e:	b29b      	uxth	r3, r3
   a0840:	3301      	adds	r3, #1
   a0842:	b29b      	uxth	r3, r3
   a0844:	b29a      	uxth	r2, r3
   a0846:	4b0a      	ldr	r3, [pc, #40]	; (a0870 <UpdateDprepFillingMinuteTick+0x48>)
   a0848:	801a      	strh	r2, [r3, #0]
					Cl_Dprep_filling_TotalMinutescounter++;
   a084a:	4b0a      	ldr	r3, [pc, #40]	; (a0874 <UpdateDprepFillingMinuteTick+0x4c>)
   a084c:	881b      	ldrh	r3, [r3, #0]
   a084e:	b29b      	uxth	r3, r3
   a0850:	b29b      	uxth	r3, r3
   a0852:	3301      	adds	r3, #1
   a0854:	b29b      	uxth	r3, r3
   a0856:	b29a      	uxth	r2, r3
   a0858:	4b06      	ldr	r3, [pc, #24]	; (a0874 <UpdateDprepFillingMinuteTick+0x4c>)
   a085a:	801a      	strh	r2, [r3, #0]

			//		Cl_dpreptcode = Cl_Dprep_UpdateFillingTimeInfo();
					return Cl_dpreptcode;
   a085c:	79fb      	ldrb	r3, [r7, #7]
					

}
   a085e:	4618      	mov	r0, r3
   a0860:	370c      	adds	r7, #12
   a0862:	46bd      	mov	sp, r7
   a0864:	f85d 7b04 	ldr.w	r7, [sp], #4
   a0868:	4770      	bx	lr
   a086a:	bf00      	nop
   a086c:	20071c4e 	.word	0x20071c4e
   a0870:	20071c50 	.word	0x20071c50
   a0874:	20071c52 	.word	0x20071c52

000a0878 <UpdateDprepDialyserPrimeMinuteTick>:
	

}

Cl_ReturnCodeType UpdateDprepDialyserPrimeMinuteTick(void)
{
   a0878:	b580      	push	{r7, lr}
   a087a:	b082      	sub	sp, #8
   a087c:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType Cl_dpreptcode = CL_OK;
   a087e:	2300      	movs	r3, #0
   a0880:	71fb      	strb	r3, [r7, #7]

	Cl_Dprep_DialyserPrime_secondscounter = 0;
   a0882:	4b0f      	ldr	r3, [pc, #60]	; (a08c0 <UpdateDprepDialyserPrimeMinuteTick+0x48>)
   a0884:	2200      	movs	r2, #0
   a0886:	801a      	strh	r2, [r3, #0]
	Cl_Dprep_DialyserPrime_Minutescounter++;
   a0888:	4b0e      	ldr	r3, [pc, #56]	; (a08c4 <UpdateDprepDialyserPrimeMinuteTick+0x4c>)
   a088a:	881b      	ldrh	r3, [r3, #0]
   a088c:	b29b      	uxth	r3, r3
   a088e:	b29b      	uxth	r3, r3
   a0890:	3301      	adds	r3, #1
   a0892:	b29b      	uxth	r3, r3
   a0894:	b29a      	uxth	r2, r3
   a0896:	4b0b      	ldr	r3, [pc, #44]	; (a08c4 <UpdateDprepDialyserPrimeMinuteTick+0x4c>)
   a0898:	801a      	strh	r2, [r3, #0]
	Cl_Dprep_DialyserPrime_TotalMinutescounter++;
   a089a:	4b0b      	ldr	r3, [pc, #44]	; (a08c8 <UpdateDprepDialyserPrimeMinuteTick+0x50>)
   a089c:	881b      	ldrh	r3, [r3, #0]
   a089e:	b29b      	uxth	r3, r3
   a08a0:	b29b      	uxth	r3, r3
   a08a2:	3301      	adds	r3, #1
   a08a4:	b29b      	uxth	r3, r3
   a08a6:	b29a      	uxth	r2, r3
   a08a8:	4b07      	ldr	r3, [pc, #28]	; (a08c8 <UpdateDprepDialyserPrimeMinuteTick+0x50>)
   a08aa:	801a      	strh	r2, [r3, #0]

	Cl_dpreptcode = Cl_Dprep_UpdateDialyserPrimeTimeInfo();
   a08ac:	4b07      	ldr	r3, [pc, #28]	; (a08cc <UpdateDprepDialyserPrimeMinuteTick+0x54>)
   a08ae:	4798      	blx	r3
   a08b0:	4603      	mov	r3, r0
   a08b2:	71fb      	strb	r3, [r7, #7]
	return Cl_dpreptcode;
   a08b4:	79fb      	ldrb	r3, [r7, #7]
	

}
   a08b6:	4618      	mov	r0, r3
   a08b8:	3708      	adds	r7, #8
   a08ba:	46bd      	mov	sp, r7
   a08bc:	bd80      	pop	{r7, pc}
   a08be:	bf00      	nop
   a08c0:	20071c5a 	.word	0x20071c5a
   a08c4:	20071c5c 	.word	0x20071c5c
   a08c8:	20071c5e 	.word	0x20071c5e
   a08cc:	00088f21 	.word	0x00088f21

000a08d0 <Cl_Dprep_SendPrepStateData>:
//	Cl_dprepretcode = Cl_SendDatatoconsole(command,&systemdataarray,count);
return CL_OK;	
	
}
Cl_ReturnCodeType Cl_Dprep_SendPrepStateData(Cl_Console_bulkdatatype datatype)
{
   a08d0:	e92d 4390 	stmdb	sp!, {r4, r7, r8, r9, lr}
   a08d4:	b099      	sub	sp, #100	; 0x64
   a08d6:	af00      	add	r7, sp, #0
   a08d8:	4603      	mov	r3, r0
   a08da:	71fb      	strb	r3, [r7, #7]
	static float cond = 0;
	Cl_Uint8Type systemdataarray[40] =  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
   a08dc:	f107 0314 	add.w	r3, r7, #20
   a08e0:	2200      	movs	r2, #0
   a08e2:	601a      	str	r2, [r3, #0]
   a08e4:	3304      	adds	r3, #4
   a08e6:	2200      	movs	r2, #0
   a08e8:	601a      	str	r2, [r3, #0]
   a08ea:	3304      	adds	r3, #4
   a08ec:	2200      	movs	r2, #0
   a08ee:	601a      	str	r2, [r3, #0]
   a08f0:	3304      	adds	r3, #4
   a08f2:	2200      	movs	r2, #0
   a08f4:	601a      	str	r2, [r3, #0]
   a08f6:	3304      	adds	r3, #4
   a08f8:	2200      	movs	r2, #0
   a08fa:	601a      	str	r2, [r3, #0]
   a08fc:	3304      	adds	r3, #4
   a08fe:	2200      	movs	r2, #0
   a0900:	601a      	str	r2, [r3, #0]
   a0902:	3304      	adds	r3, #4
   a0904:	2200      	movs	r2, #0
   a0906:	601a      	str	r2, [r3, #0]
   a0908:	3304      	adds	r3, #4
   a090a:	2200      	movs	r2, #0
   a090c:	601a      	str	r2, [r3, #0]
   a090e:	3304      	adds	r3, #4
   a0910:	2200      	movs	r2, #0
   a0912:	601a      	str	r2, [r3, #0]
   a0914:	3304      	adds	r3, #4
   a0916:	2200      	movs	r2, #0
   a0918:	601a      	str	r2, [r3, #0]
   a091a:	3304      	adds	r3, #4
	cl_PrepDatatype tempdata;
	Cl_Uint16Type temp=0, temp1=0, sensordata = 0;
   a091c:	2300      	movs	r3, #0
   a091e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
   a0922:	2300      	movs	r3, #0
   a0924:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
   a0928:	2300      	movs	r3, #0
   a092a:	817b      	strh	r3, [r7, #10]
	static Cl_Uint32Type timecount = 0;
	static float tmp3=0,apt=0,vpt=0,TMP =0;
	Cl_ReturnCodeType Cl_dprepretcode = CL_OK;
   a092c:	2300      	movs	r3, #0
   a092e:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
	Cl_Uint8Type count = 0;
   a0932:	2300      	movs	r3, #0
   a0934:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a0938:	2351      	movs	r3, #81	; 0x51
   a093a:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
	TMP,
	*/
	
	

					command = CON_TX_COMMAND_CL_SYS_STATE_DATA ;
   a093e:	232a      	movs	r3, #42	; 0x2a
   a0940:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
					systemdataarray[0] = datatype;
   a0944:	79fb      	ldrb	r3, [r7, #7]
   a0946:	753b      	strb	r3, [r7, #20]
					count++;
   a0948:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   a094c:	3301      	adds	r3, #1
   a094e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					
						Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&sensordata);
   a0952:	f107 030a 	add.w	r3, r7, #10
   a0956:	2014      	movs	r0, #20
   a0958:	4619      	mov	r1, r3
   a095a:	4b8f      	ldr	r3, [pc, #572]	; (a0b98 <Cl_Dprep_SendPrepStateData+0x2c8>)
   a095c:	4798      	blx	r3
// 							uint16_t temp = res_temp_value/10;
// //							temp = temp - 3.1 + 1.4;										// sensor offset 
// //							temp = temp - 3.1 -2;										// sensor offset 
// //							tmp3 =(tmp3*5 + temp)/6;
// 							tmp3 = temp - 0.4;
							tmp3 = (float)sensordata/10;
   a095e:	897a      	ldrh	r2, [r7, #10]
   a0960:	4b8e      	ldr	r3, [pc, #568]	; (a0b9c <Cl_Dprep_SendPrepStateData+0x2cc>)
   a0962:	4610      	mov	r0, r2
   a0964:	4798      	blx	r3
   a0966:	4602      	mov	r2, r0
   a0968:	4b8d      	ldr	r3, [pc, #564]	; (a0ba0 <Cl_Dprep_SendPrepStateData+0x2d0>)
   a096a:	4610      	mov	r0, r2
   a096c:	498d      	ldr	r1, [pc, #564]	; (a0ba4 <Cl_Dprep_SendPrepStateData+0x2d4>)
   a096e:	4798      	blx	r3
   a0970:	4603      	mov	r3, r0
   a0972:	461a      	mov	r2, r3
   a0974:	4b8c      	ldr	r3, [pc, #560]	; (a0ba8 <Cl_Dprep_SendPrepStateData+0x2d8>)
   a0976:	601a      	str	r2, [r3, #0]

							
						}
						
					
					Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_STATUS,&sensordata);
   a0978:	f107 030a 	add.w	r3, r7, #10
   a097c:	2007      	movs	r0, #7
   a097e:	4619      	mov	r1, r3
   a0980:	4b85      	ldr	r3, [pc, #532]	; (a0b98 <Cl_Dprep_SendPrepStateData+0x2c8>)
   a0982:	4798      	blx	r3
					{
					
						float cond_comp=0;
   a0984:	f04f 0300 	mov.w	r3, #0
   a0988:	657b      	str	r3, [r7, #84]	; 0x54
						float temp2=0;
   a098a:	f04f 0300 	mov.w	r3, #0
   a098e:	653b      	str	r3, [r7, #80]	; 0x50
						float	 cond1,	cond_final, cond1x100, cond_final_X10000;
					//	temp2 = temp * 0.8036;
					sensordata = sensordata/10;
   a0990:	897b      	ldrh	r3, [r7, #10]
   a0992:	4a86      	ldr	r2, [pc, #536]	; (a0bac <Cl_Dprep_SendPrepStateData+0x2dc>)
   a0994:	fba2 2303 	umull	r2, r3, r2, r3
   a0998:	08db      	lsrs	r3, r3, #3
   a099a:	b29b      	uxth	r3, r3
   a099c:	817b      	strh	r3, [r7, #10]
						if (sensordata > 50)
   a099e:	897b      	ldrh	r3, [r7, #10]
   a09a0:	2b32      	cmp	r3, #50	; 0x32
   a09a2:	f240 811f 	bls.w	a0be4 <Cl_Dprep_SendPrepStateData+0x314>
						//	cond =(cond*5 + cond_final_cs3)/6;
						
								
								//	sensordata  = 25600;
								
								cond1 = sensordata/100;
   a09a6:	897b      	ldrh	r3, [r7, #10]
   a09a8:	4a81      	ldr	r2, [pc, #516]	; (a0bb0 <Cl_Dprep_SendPrepStateData+0x2e0>)
   a09aa:	fba2 2303 	umull	r2, r3, r2, r3
   a09ae:	095b      	lsrs	r3, r3, #5
   a09b0:	b29b      	uxth	r3, r3
   a09b2:	461a      	mov	r2, r3
   a09b4:	4b7f      	ldr	r3, [pc, #508]	; (a0bb4 <Cl_Dprep_SendPrepStateData+0x2e4>)
   a09b6:	4610      	mov	r0, r2
   a09b8:	4798      	blx	r3
   a09ba:	4603      	mov	r3, r0
   a09bc:	64fb      	str	r3, [r7, #76]	; 0x4c
								cond_final = 0.0001*cond1*cond1 + 0.032*cond1 +0.91 + 0.4;
   a09be:	4b7e      	ldr	r3, [pc, #504]	; (a0bb8 <Cl_Dprep_SendPrepStateData+0x2e8>)
   a09c0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
   a09c2:	4798      	blx	r3
   a09c4:	4602      	mov	r2, r0
   a09c6:	460b      	mov	r3, r1
   a09c8:	4c7c      	ldr	r4, [pc, #496]	; (a0bbc <Cl_Dprep_SendPrepStateData+0x2ec>)
   a09ca:	4610      	mov	r0, r2
   a09cc:	4619      	mov	r1, r3
   a09ce:	a366      	add	r3, pc, #408	; (adr r3, a0b68 <Cl_Dprep_SendPrepStateData+0x298>)
   a09d0:	e9d3 2300 	ldrd	r2, r3, [r3]
   a09d4:	47a0      	blx	r4
   a09d6:	4602      	mov	r2, r0
   a09d8:	460b      	mov	r3, r1
   a09da:	4690      	mov	r8, r2
   a09dc:	4699      	mov	r9, r3
   a09de:	4b76      	ldr	r3, [pc, #472]	; (a0bb8 <Cl_Dprep_SendPrepStateData+0x2e8>)
   a09e0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
   a09e2:	4798      	blx	r3
   a09e4:	4602      	mov	r2, r0
   a09e6:	460b      	mov	r3, r1
   a09e8:	4c74      	ldr	r4, [pc, #464]	; (a0bbc <Cl_Dprep_SendPrepStateData+0x2ec>)
   a09ea:	4640      	mov	r0, r8
   a09ec:	4649      	mov	r1, r9
   a09ee:	47a0      	blx	r4
   a09f0:	4602      	mov	r2, r0
   a09f2:	460b      	mov	r3, r1
   a09f4:	4690      	mov	r8, r2
   a09f6:	4699      	mov	r9, r3
   a09f8:	4b6f      	ldr	r3, [pc, #444]	; (a0bb8 <Cl_Dprep_SendPrepStateData+0x2e8>)
   a09fa:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
   a09fc:	4798      	blx	r3
   a09fe:	4602      	mov	r2, r0
   a0a00:	460b      	mov	r3, r1
   a0a02:	4c6e      	ldr	r4, [pc, #440]	; (a0bbc <Cl_Dprep_SendPrepStateData+0x2ec>)
   a0a04:	4610      	mov	r0, r2
   a0a06:	4619      	mov	r1, r3
   a0a08:	a359      	add	r3, pc, #356	; (adr r3, a0b70 <Cl_Dprep_SendPrepStateData+0x2a0>)
   a0a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
   a0a0e:	47a0      	blx	r4
   a0a10:	4602      	mov	r2, r0
   a0a12:	460b      	mov	r3, r1
   a0a14:	4c6a      	ldr	r4, [pc, #424]	; (a0bc0 <Cl_Dprep_SendPrepStateData+0x2f0>)
   a0a16:	4640      	mov	r0, r8
   a0a18:	4649      	mov	r1, r9
   a0a1a:	47a0      	blx	r4
   a0a1c:	4602      	mov	r2, r0
   a0a1e:	460b      	mov	r3, r1
   a0a20:	4c67      	ldr	r4, [pc, #412]	; (a0bc0 <Cl_Dprep_SendPrepStateData+0x2f0>)
   a0a22:	4610      	mov	r0, r2
   a0a24:	4619      	mov	r1, r3
   a0a26:	a354      	add	r3, pc, #336	; (adr r3, a0b78 <Cl_Dprep_SendPrepStateData+0x2a8>)
   a0a28:	e9d3 2300 	ldrd	r2, r3, [r3]
   a0a2c:	47a0      	blx	r4
   a0a2e:	4602      	mov	r2, r0
   a0a30:	460b      	mov	r3, r1
   a0a32:	4c63      	ldr	r4, [pc, #396]	; (a0bc0 <Cl_Dprep_SendPrepStateData+0x2f0>)
   a0a34:	4610      	mov	r0, r2
   a0a36:	4619      	mov	r1, r3
   a0a38:	a351      	add	r3, pc, #324	; (adr r3, a0b80 <Cl_Dprep_SendPrepStateData+0x2b0>)
   a0a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
   a0a3e:	47a0      	blx	r4
   a0a40:	4602      	mov	r2, r0
   a0a42:	460b      	mov	r3, r1
   a0a44:	4610      	mov	r0, r2
   a0a46:	4619      	mov	r1, r3
   a0a48:	4b5e      	ldr	r3, [pc, #376]	; (a0bc4 <Cl_Dprep_SendPrepStateData+0x2f4>)
   a0a4a:	4798      	blx	r3
   a0a4c:	4603      	mov	r3, r0
   a0a4e:	64bb      	str	r3, [r7, #72]	; 0x48
								cond1x100 = cond_final*100; ;
   a0a50:	4b5d      	ldr	r3, [pc, #372]	; (a0bc8 <Cl_Dprep_SendPrepStateData+0x2f8>)
   a0a52:	6cb8      	ldr	r0, [r7, #72]	; 0x48
   a0a54:	495d      	ldr	r1, [pc, #372]	; (a0bcc <Cl_Dprep_SendPrepStateData+0x2fc>)
   a0a56:	4798      	blx	r3
   a0a58:	4603      	mov	r3, r0
   a0a5a:	647b      	str	r3, [r7, #68]	; 0x44
								cond_final_X10000= (cond1x100/(1+(tmp3/10  -25.0)*0.021));
   a0a5c:	4b56      	ldr	r3, [pc, #344]	; (a0bb8 <Cl_Dprep_SendPrepStateData+0x2e8>)
   a0a5e:	6c78      	ldr	r0, [r7, #68]	; 0x44
   a0a60:	4798      	blx	r3
   a0a62:	4680      	mov	r8, r0
   a0a64:	4689      	mov	r9, r1
   a0a66:	4b50      	ldr	r3, [pc, #320]	; (a0ba8 <Cl_Dprep_SendPrepStateData+0x2d8>)
   a0a68:	681a      	ldr	r2, [r3, #0]
   a0a6a:	4b4d      	ldr	r3, [pc, #308]	; (a0ba0 <Cl_Dprep_SendPrepStateData+0x2d0>)
   a0a6c:	4610      	mov	r0, r2
   a0a6e:	494d      	ldr	r1, [pc, #308]	; (a0ba4 <Cl_Dprep_SendPrepStateData+0x2d4>)
   a0a70:	4798      	blx	r3
   a0a72:	4603      	mov	r3, r0
   a0a74:	461a      	mov	r2, r3
   a0a76:	4b50      	ldr	r3, [pc, #320]	; (a0bb8 <Cl_Dprep_SendPrepStateData+0x2e8>)
   a0a78:	4610      	mov	r0, r2
   a0a7a:	4798      	blx	r3
   a0a7c:	4602      	mov	r2, r0
   a0a7e:	460b      	mov	r3, r1
   a0a80:	4c53      	ldr	r4, [pc, #332]	; (a0bd0 <Cl_Dprep_SendPrepStateData+0x300>)
   a0a82:	4610      	mov	r0, r2
   a0a84:	4619      	mov	r1, r3
   a0a86:	f04f 0200 	mov.w	r2, #0
   a0a8a:	4b52      	ldr	r3, [pc, #328]	; (a0bd4 <Cl_Dprep_SendPrepStateData+0x304>)
   a0a8c:	47a0      	blx	r4
   a0a8e:	4602      	mov	r2, r0
   a0a90:	460b      	mov	r3, r1
   a0a92:	4c4a      	ldr	r4, [pc, #296]	; (a0bbc <Cl_Dprep_SendPrepStateData+0x2ec>)
   a0a94:	4610      	mov	r0, r2
   a0a96:	4619      	mov	r1, r3
   a0a98:	a33b      	add	r3, pc, #236	; (adr r3, a0b88 <Cl_Dprep_SendPrepStateData+0x2b8>)
   a0a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
   a0a9e:	47a0      	blx	r4
   a0aa0:	4602      	mov	r2, r0
   a0aa2:	460b      	mov	r3, r1
   a0aa4:	4c46      	ldr	r4, [pc, #280]	; (a0bc0 <Cl_Dprep_SendPrepStateData+0x2f0>)
   a0aa6:	4610      	mov	r0, r2
   a0aa8:	4619      	mov	r1, r3
   a0aaa:	f04f 0200 	mov.w	r2, #0
   a0aae:	4b4a      	ldr	r3, [pc, #296]	; (a0bd8 <Cl_Dprep_SendPrepStateData+0x308>)
   a0ab0:	47a0      	blx	r4
   a0ab2:	4602      	mov	r2, r0
   a0ab4:	460b      	mov	r3, r1
   a0ab6:	4c49      	ldr	r4, [pc, #292]	; (a0bdc <Cl_Dprep_SendPrepStateData+0x30c>)
   a0ab8:	4640      	mov	r0, r8
   a0aba:	4649      	mov	r1, r9
   a0abc:	47a0      	blx	r4
   a0abe:	4602      	mov	r2, r0
   a0ac0:	460b      	mov	r3, r1
   a0ac2:	4610      	mov	r0, r2
   a0ac4:	4619      	mov	r1, r3
   a0ac6:	4b3f      	ldr	r3, [pc, #252]	; (a0bc4 <Cl_Dprep_SendPrepStateData+0x2f4>)
   a0ac8:	4798      	blx	r3
   a0aca:	4603      	mov	r3, r0
   a0acc:	643b      	str	r3, [r7, #64]	; 0x40
								cond_final_X10000 =	cond_final_X10000 * 5.3 ;
   a0ace:	4b3a      	ldr	r3, [pc, #232]	; (a0bb8 <Cl_Dprep_SendPrepStateData+0x2e8>)
   a0ad0:	6c38      	ldr	r0, [r7, #64]	; 0x40
   a0ad2:	4798      	blx	r3
   a0ad4:	4602      	mov	r2, r0
   a0ad6:	460b      	mov	r3, r1
   a0ad8:	4c38      	ldr	r4, [pc, #224]	; (a0bbc <Cl_Dprep_SendPrepStateData+0x2ec>)
   a0ada:	4610      	mov	r0, r2
   a0adc:	4619      	mov	r1, r3
   a0ade:	a32c      	add	r3, pc, #176	; (adr r3, a0b90 <Cl_Dprep_SendPrepStateData+0x2c0>)
   a0ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
   a0ae4:	47a0      	blx	r4
   a0ae6:	4602      	mov	r2, r0
   a0ae8:	460b      	mov	r3, r1
   a0aea:	4610      	mov	r0, r2
   a0aec:	4619      	mov	r1, r3
   a0aee:	4b35      	ldr	r3, [pc, #212]	; (a0bc4 <Cl_Dprep_SendPrepStateData+0x2f4>)
   a0af0:	4798      	blx	r3
   a0af2:	4603      	mov	r3, r0
   a0af4:	643b      	str	r3, [r7, #64]	; 0x40
								
								
							//	cond =  -0.0001 * temp* temp  + 0.36 * temp  - 38.39 ;
							//	cond_comp= cond/(1+(tmp3/100-25.0)*0.020);
								tempdata.word = (cond_final_X10000/10);
   a0af6:	4b2a      	ldr	r3, [pc, #168]	; (a0ba0 <Cl_Dprep_SendPrepStateData+0x2d0>)
   a0af8:	6c38      	ldr	r0, [r7, #64]	; 0x40
   a0afa:	492a      	ldr	r1, [pc, #168]	; (a0ba4 <Cl_Dprep_SendPrepStateData+0x2d4>)
   a0afc:	4798      	blx	r3
   a0afe:	4603      	mov	r3, r0
   a0b00:	461a      	mov	r2, r3
   a0b02:	4b37      	ldr	r3, [pc, #220]	; (a0be0 <Cl_Dprep_SendPrepStateData+0x310>)
   a0b04:	4610      	mov	r0, r2
   a0b06:	4798      	blx	r3
   a0b08:	4603      	mov	r3, r0
   a0b0a:	60fb      	str	r3, [r7, #12]
								
								systemdataarray[count++] = tempdata.bytearray[0];
   a0b0c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   a0b10:	1c5a      	adds	r2, r3, #1
   a0b12:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   a0b16:	7b3a      	ldrb	r2, [r7, #12]
   a0b18:	f107 0160 	add.w	r1, r7, #96	; 0x60
   a0b1c:	440b      	add	r3, r1
   a0b1e:	f803 2c4c 	strb.w	r2, [r3, #-76]
								systemdataarray[count++] = tempdata.bytearray[1];
   a0b22:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   a0b26:	1c5a      	adds	r2, r3, #1
   a0b28:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   a0b2c:	7b7a      	ldrb	r2, [r7, #13]
   a0b2e:	f107 0160 	add.w	r1, r7, #96	; 0x60
   a0b32:	440b      	add	r3, r1
   a0b34:	f803 2c4c 	strb.w	r2, [r3, #-76]
								systemdataarray[count++] = tempdata.bytearray[2];
   a0b38:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   a0b3c:	1c5a      	adds	r2, r3, #1
   a0b3e:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   a0b42:	7bba      	ldrb	r2, [r7, #14]
   a0b44:	f107 0160 	add.w	r1, r7, #96	; 0x60
   a0b48:	440b      	add	r3, r1
   a0b4a:	f803 2c4c 	strb.w	r2, [r3, #-76]
								systemdataarray[count++] = tempdata.bytearray[3];
   a0b4e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   a0b52:	1c5a      	adds	r2, r3, #1
   a0b54:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   a0b58:	7bfa      	ldrb	r2, [r7, #15]
   a0b5a:	f107 0160 	add.w	r1, r7, #96	; 0x60
   a0b5e:	440b      	add	r3, r1
   a0b60:	f803 2c4c 	strb.w	r2, [r3, #-76]
   a0b64:	e06c      	b.n	a0c40 <Cl_Dprep_SendPrepStateData+0x370>
   a0b66:	bf00      	nop
   a0b68:	eb1c432d 	.word	0xeb1c432d
   a0b6c:	3f1a36e2 	.word	0x3f1a36e2
   a0b70:	d2f1a9fc 	.word	0xd2f1a9fc
   a0b74:	3fa0624d 	.word	0x3fa0624d
   a0b78:	51eb851f 	.word	0x51eb851f
   a0b7c:	3fed1eb8 	.word	0x3fed1eb8
   a0b80:	9999999a 	.word	0x9999999a
   a0b84:	3fd99999 	.word	0x3fd99999
   a0b88:	24dd2f1b 	.word	0x24dd2f1b
   a0b8c:	3f958106 	.word	0x3f958106
   a0b90:	33333333 	.word	0x33333333
   a0b94:	40153333 	.word	0x40153333
   a0b98:	0008e7f9 	.word	0x0008e7f9
   a0b9c:	000a68a9 	.word	0x000a68a9
   a0ba0:	000a6ac1 	.word	0x000a6ac1
   a0ba4:	41200000 	.word	0x41200000
   a0ba8:	20071c88 	.word	0x20071c88
   a0bac:	cccccccd 	.word	0xcccccccd
   a0bb0:	51eb851f 	.word	0x51eb851f
   a0bb4:	000a68b1 	.word	0x000a68b1
   a0bb8:	000a6031 	.word	0x000a6031
   a0bbc:	000a60d9 	.word	0x000a60d9
   a0bc0:	000a5d75 	.word	0x000a5d75
   a0bc4:	000a669d 	.word	0x000a669d
   a0bc8:	000a6959 	.word	0x000a6959
   a0bcc:	42c80000 	.word	0x42c80000
   a0bd0:	000a5d71 	.word	0x000a5d71
   a0bd4:	40390000 	.word	0x40390000
   a0bd8:	3ff00000 	.word	0x3ff00000
   a0bdc:	000a632d 	.word	0x000a632d
   a0be0:	000a6d31 	.word	0x000a6d31
							}
							else
							{
								tempdata.word = 0;
   a0be4:	2300      	movs	r3, #0
   a0be6:	60fb      	str	r3, [r7, #12]
							systemdataarray[count++] = tempdata.bytearray[0];
   a0be8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   a0bec:	1c5a      	adds	r2, r3, #1
   a0bee:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   a0bf2:	7b3a      	ldrb	r2, [r7, #12]
   a0bf4:	f107 0160 	add.w	r1, r7, #96	; 0x60
   a0bf8:	440b      	add	r3, r1
   a0bfa:	f803 2c4c 	strb.w	r2, [r3, #-76]
							systemdataarray[count++] = tempdata.bytearray[1];
   a0bfe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   a0c02:	1c5a      	adds	r2, r3, #1
   a0c04:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   a0c08:	7b7a      	ldrb	r2, [r7, #13]
   a0c0a:	f107 0160 	add.w	r1, r7, #96	; 0x60
   a0c0e:	440b      	add	r3, r1
   a0c10:	f803 2c4c 	strb.w	r2, [r3, #-76]
							systemdataarray[count++] = tempdata.bytearray[2];
   a0c14:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   a0c18:	1c5a      	adds	r2, r3, #1
   a0c1a:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   a0c1e:	7bba      	ldrb	r2, [r7, #14]
   a0c20:	f107 0160 	add.w	r1, r7, #96	; 0x60
   a0c24:	440b      	add	r3, r1
   a0c26:	f803 2c4c 	strb.w	r2, [r3, #-76]
							systemdataarray[count++] = tempdata.bytearray[3];
   a0c2a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   a0c2e:	1c5a      	adds	r2, r3, #1
   a0c30:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   a0c34:	7bfa      	ldrb	r2, [r7, #15]
   a0c36:	f107 0160 	add.w	r1, r7, #96	; 0x60
   a0c3a:	440b      	add	r3, r1
   a0c3c:	f803 2c4c 	strb.w	r2, [r3, #-76]
		
					}
					// temperature is already calculated and now store into system data
					{

						tempdata.word = tmp3;
   a0c40:	4bad      	ldr	r3, [pc, #692]	; (a0ef8 <Cl_Dprep_SendPrepStateData+0x628>)
   a0c42:	681a      	ldr	r2, [r3, #0]
   a0c44:	4bad      	ldr	r3, [pc, #692]	; (a0efc <Cl_Dprep_SendPrepStateData+0x62c>)
   a0c46:	4610      	mov	r0, r2
   a0c48:	4798      	blx	r3
   a0c4a:	4603      	mov	r3, r0
   a0c4c:	60fb      	str	r3, [r7, #12]
				//		tempdata.word = (tmp3 * 10);
				//		tempdata.word = (tmp3/10 - 25 ); // sanjeer : 25 is offset work around for intergation testing
						systemdataarray[count++] = tempdata.bytearray[0];
   a0c4e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   a0c52:	1c5a      	adds	r2, r3, #1
   a0c54:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   a0c58:	7b3a      	ldrb	r2, [r7, #12]
   a0c5a:	f107 0160 	add.w	r1, r7, #96	; 0x60
   a0c5e:	440b      	add	r3, r1
   a0c60:	f803 2c4c 	strb.w	r2, [r3, #-76]
						systemdataarray[count++] = tempdata.bytearray[1];
   a0c64:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   a0c68:	1c5a      	adds	r2, r3, #1
   a0c6a:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   a0c6e:	7b7a      	ldrb	r2, [r7, #13]
   a0c70:	f107 0160 	add.w	r1, r7, #96	; 0x60
   a0c74:	440b      	add	r3, r1
   a0c76:	f803 2c4c 	strb.w	r2, [r3, #-76]
						systemdataarray[count++] = tempdata.bytearray[2];
   a0c7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   a0c7e:	1c5a      	adds	r2, r3, #1
   a0c80:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   a0c84:	7bba      	ldrb	r2, [r7, #14]
   a0c86:	f107 0160 	add.w	r1, r7, #96	; 0x60
   a0c8a:	440b      	add	r3, r1
   a0c8c:	f803 2c4c 	strb.w	r2, [r3, #-76]
						systemdataarray[count++] = tempdata.bytearray[3];
   a0c90:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   a0c94:	1c5a      	adds	r2, r3, #1
   a0c96:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   a0c9a:	7bfa      	ldrb	r2, [r7, #15]
   a0c9c:	f107 0160 	add.w	r1, r7, #96	; 0x60
   a0ca0:	440b      	add	r3, r1
   a0ca2:	f803 2c4c 	strb.w	r2, [r3, #-76]
					}
					Cl_SysStat_GetSensor_Status_Query(SENSOR_APTSTATUS,&tempdata.Twobyte);
   a0ca6:	f107 030c 	add.w	r3, r7, #12
   a0caa:	200b      	movs	r0, #11
   a0cac:	4619      	mov	r1, r3
   a0cae:	4b94      	ldr	r3, [pc, #592]	; (a0f00 <Cl_Dprep_SendPrepStateData+0x630>)
   a0cb0:	4798      	blx	r3
					{
						sensordatamillivolts = (tempdata.Twobyte * 0.8036) ;
   a0cb2:	89bb      	ldrh	r3, [r7, #12]
   a0cb4:	461a      	mov	r2, r3
   a0cb6:	4b93      	ldr	r3, [pc, #588]	; (a0f04 <Cl_Dprep_SendPrepStateData+0x634>)
   a0cb8:	4610      	mov	r0, r2
   a0cba:	4798      	blx	r3
   a0cbc:	4602      	mov	r2, r0
   a0cbe:	460b      	mov	r3, r1
   a0cc0:	4c91      	ldr	r4, [pc, #580]	; (a0f08 <Cl_Dprep_SendPrepStateData+0x638>)
   a0cc2:	4610      	mov	r0, r2
   a0cc4:	4619      	mov	r1, r3
   a0cc6:	a38a      	add	r3, pc, #552	; (adr r3, a0ef0 <Cl_Dprep_SendPrepStateData+0x620>)
   a0cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
   a0ccc:	47a0      	blx	r4
   a0cce:	4602      	mov	r2, r0
   a0cd0:	460b      	mov	r3, r1
   a0cd2:	4610      	mov	r0, r2
   a0cd4:	4619      	mov	r1, r3
   a0cd6:	4b8d      	ldr	r3, [pc, #564]	; (a0f0c <Cl_Dprep_SendPrepStateData+0x63c>)
   a0cd8:	4798      	blx	r3
   a0cda:	4603      	mov	r3, r0
   a0cdc:	87fb      	strh	r3, [r7, #62]	; 0x3e
						calibration_apt(sensordatamillivolts);
   a0cde:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
   a0ce0:	b21b      	sxth	r3, r3
   a0ce2:	4618      	mov	r0, r3
   a0ce4:	4b8a      	ldr	r3, [pc, #552]	; (a0f10 <Cl_Dprep_SendPrepStateData+0x640>)
   a0ce6:	4798      	blx	r3
						apt =(apt*5 + pressure_final_apt)/6;
   a0ce8:	4b8a      	ldr	r3, [pc, #552]	; (a0f14 <Cl_Dprep_SendPrepStateData+0x644>)
   a0cea:	681a      	ldr	r2, [r3, #0]
   a0cec:	4b8a      	ldr	r3, [pc, #552]	; (a0f18 <Cl_Dprep_SendPrepStateData+0x648>)
   a0cee:	4610      	mov	r0, r2
   a0cf0:	498a      	ldr	r1, [pc, #552]	; (a0f1c <Cl_Dprep_SendPrepStateData+0x64c>)
   a0cf2:	4798      	blx	r3
   a0cf4:	4603      	mov	r3, r0
   a0cf6:	4619      	mov	r1, r3
   a0cf8:	4b89      	ldr	r3, [pc, #548]	; (a0f20 <Cl_Dprep_SendPrepStateData+0x650>)
   a0cfa:	681a      	ldr	r2, [r3, #0]
   a0cfc:	4b89      	ldr	r3, [pc, #548]	; (a0f24 <Cl_Dprep_SendPrepStateData+0x654>)
   a0cfe:	4608      	mov	r0, r1
   a0d00:	4611      	mov	r1, r2
   a0d02:	4798      	blx	r3
   a0d04:	4603      	mov	r3, r0
   a0d06:	461a      	mov	r2, r3
   a0d08:	4b87      	ldr	r3, [pc, #540]	; (a0f28 <Cl_Dprep_SendPrepStateData+0x658>)
   a0d0a:	4610      	mov	r0, r2
   a0d0c:	4987      	ldr	r1, [pc, #540]	; (a0f2c <Cl_Dprep_SendPrepStateData+0x65c>)
   a0d0e:	4798      	blx	r3
   a0d10:	4603      	mov	r3, r0
   a0d12:	461a      	mov	r2, r3
   a0d14:	4b7f      	ldr	r3, [pc, #508]	; (a0f14 <Cl_Dprep_SendPrepStateData+0x644>)
   a0d16:	601a      	str	r2, [r3, #0]
						tempdata.word	 = apt;
   a0d18:	4b7e      	ldr	r3, [pc, #504]	; (a0f14 <Cl_Dprep_SendPrepStateData+0x644>)
   a0d1a:	681a      	ldr	r2, [r3, #0]
   a0d1c:	4b77      	ldr	r3, [pc, #476]	; (a0efc <Cl_Dprep_SendPrepStateData+0x62c>)
   a0d1e:	4610      	mov	r0, r2
   a0d20:	4798      	blx	r3
   a0d22:	4603      	mov	r3, r0
   a0d24:	60fb      	str	r3, [r7, #12]
						systemdataarray[count++] = tempdata.bytearray[0] ;
   a0d26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   a0d2a:	1c5a      	adds	r2, r3, #1
   a0d2c:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   a0d30:	7b3a      	ldrb	r2, [r7, #12]
   a0d32:	f107 0160 	add.w	r1, r7, #96	; 0x60
   a0d36:	440b      	add	r3, r1
   a0d38:	f803 2c4c 	strb.w	r2, [r3, #-76]
						systemdataarray[count++] = tempdata.bytearray[1] ;
   a0d3c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   a0d40:	1c5a      	adds	r2, r3, #1
   a0d42:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   a0d46:	7b7a      	ldrb	r2, [r7, #13]
   a0d48:	f107 0160 	add.w	r1, r7, #96	; 0x60
   a0d4c:	440b      	add	r3, r1
   a0d4e:	f803 2c4c 	strb.w	r2, [r3, #-76]
						systemdataarray[count++] = tempdata.bytearray[2] ;
   a0d52:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   a0d56:	1c5a      	adds	r2, r3, #1
   a0d58:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   a0d5c:	7bba      	ldrb	r2, [r7, #14]
   a0d5e:	f107 0160 	add.w	r1, r7, #96	; 0x60
   a0d62:	440b      	add	r3, r1
   a0d64:	f803 2c4c 	strb.w	r2, [r3, #-76]
						systemdataarray[count++] = tempdata.bytearray[3] ;
   a0d68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   a0d6c:	1c5a      	adds	r2, r3, #1
   a0d6e:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   a0d72:	7bfa      	ldrb	r2, [r7, #15]
   a0d74:	f107 0160 	add.w	r1, r7, #96	; 0x60
   a0d78:	440b      	add	r3, r1
   a0d7a:	f803 2c4c 	strb.w	r2, [r3, #-76]
					}
					Cl_SysStat_GetSensor_Status_Query(SENSOR_VPTSTATUS,&tempdata.Twobyte);
   a0d7e:	f107 030c 	add.w	r3, r7, #12
   a0d82:	200c      	movs	r0, #12
   a0d84:	4619      	mov	r1, r3
   a0d86:	4b5e      	ldr	r3, [pc, #376]	; (a0f00 <Cl_Dprep_SendPrepStateData+0x630>)
   a0d88:	4798      	blx	r3
					{
						sensordatamillivolts = (tempdata.Twobyte * 0.8036) ;
   a0d8a:	89bb      	ldrh	r3, [r7, #12]
   a0d8c:	461a      	mov	r2, r3
   a0d8e:	4b5d      	ldr	r3, [pc, #372]	; (a0f04 <Cl_Dprep_SendPrepStateData+0x634>)
   a0d90:	4610      	mov	r0, r2
   a0d92:	4798      	blx	r3
   a0d94:	4602      	mov	r2, r0
   a0d96:	460b      	mov	r3, r1
   a0d98:	4c5b      	ldr	r4, [pc, #364]	; (a0f08 <Cl_Dprep_SendPrepStateData+0x638>)
   a0d9a:	4610      	mov	r0, r2
   a0d9c:	4619      	mov	r1, r3
   a0d9e:	a354      	add	r3, pc, #336	; (adr r3, a0ef0 <Cl_Dprep_SendPrepStateData+0x620>)
   a0da0:	e9d3 2300 	ldrd	r2, r3, [r3]
   a0da4:	47a0      	blx	r4
   a0da6:	4602      	mov	r2, r0
   a0da8:	460b      	mov	r3, r1
   a0daa:	4610      	mov	r0, r2
   a0dac:	4619      	mov	r1, r3
   a0dae:	4b57      	ldr	r3, [pc, #348]	; (a0f0c <Cl_Dprep_SendPrepStateData+0x63c>)
   a0db0:	4798      	blx	r3
   a0db2:	4603      	mov	r3, r0
   a0db4:	87fb      	strh	r3, [r7, #62]	; 0x3e
						calibration_vpt(sensordatamillivolts);
   a0db6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
   a0db8:	b21b      	sxth	r3, r3
   a0dba:	4618      	mov	r0, r3
   a0dbc:	4b5c      	ldr	r3, [pc, #368]	; (a0f30 <Cl_Dprep_SendPrepStateData+0x660>)
   a0dbe:	4798      	blx	r3
						vpt =(vpt*5 + pressure_final_vpt)/6;
   a0dc0:	4b5c      	ldr	r3, [pc, #368]	; (a0f34 <Cl_Dprep_SendPrepStateData+0x664>)
   a0dc2:	681a      	ldr	r2, [r3, #0]
   a0dc4:	4b54      	ldr	r3, [pc, #336]	; (a0f18 <Cl_Dprep_SendPrepStateData+0x648>)
   a0dc6:	4610      	mov	r0, r2
   a0dc8:	4954      	ldr	r1, [pc, #336]	; (a0f1c <Cl_Dprep_SendPrepStateData+0x64c>)
   a0dca:	4798      	blx	r3
   a0dcc:	4603      	mov	r3, r0
   a0dce:	4619      	mov	r1, r3
   a0dd0:	4b59      	ldr	r3, [pc, #356]	; (a0f38 <Cl_Dprep_SendPrepStateData+0x668>)
   a0dd2:	681a      	ldr	r2, [r3, #0]
   a0dd4:	4b53      	ldr	r3, [pc, #332]	; (a0f24 <Cl_Dprep_SendPrepStateData+0x654>)
   a0dd6:	4608      	mov	r0, r1
   a0dd8:	4611      	mov	r1, r2
   a0dda:	4798      	blx	r3
   a0ddc:	4603      	mov	r3, r0
   a0dde:	461a      	mov	r2, r3
   a0de0:	4b51      	ldr	r3, [pc, #324]	; (a0f28 <Cl_Dprep_SendPrepStateData+0x658>)
   a0de2:	4610      	mov	r0, r2
   a0de4:	4951      	ldr	r1, [pc, #324]	; (a0f2c <Cl_Dprep_SendPrepStateData+0x65c>)
   a0de6:	4798      	blx	r3
   a0de8:	4603      	mov	r3, r0
   a0dea:	461a      	mov	r2, r3
   a0dec:	4b51      	ldr	r3, [pc, #324]	; (a0f34 <Cl_Dprep_SendPrepStateData+0x664>)
   a0dee:	601a      	str	r2, [r3, #0]
						tempdata.word	 = (vpt);
   a0df0:	4b50      	ldr	r3, [pc, #320]	; (a0f34 <Cl_Dprep_SendPrepStateData+0x664>)
   a0df2:	681a      	ldr	r2, [r3, #0]
   a0df4:	4b41      	ldr	r3, [pc, #260]	; (a0efc <Cl_Dprep_SendPrepStateData+0x62c>)
   a0df6:	4610      	mov	r0, r2
   a0df8:	4798      	blx	r3
   a0dfa:	4603      	mov	r3, r0
   a0dfc:	60fb      	str	r3, [r7, #12]
						systemdataarray[count++] = tempdata.bytearray[0] ;
   a0dfe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   a0e02:	1c5a      	adds	r2, r3, #1
   a0e04:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   a0e08:	7b3a      	ldrb	r2, [r7, #12]
   a0e0a:	f107 0160 	add.w	r1, r7, #96	; 0x60
   a0e0e:	440b      	add	r3, r1
   a0e10:	f803 2c4c 	strb.w	r2, [r3, #-76]
						systemdataarray[count++] = tempdata.bytearray[1] ;
   a0e14:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   a0e18:	1c5a      	adds	r2, r3, #1
   a0e1a:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   a0e1e:	7b7a      	ldrb	r2, [r7, #13]
   a0e20:	f107 0160 	add.w	r1, r7, #96	; 0x60
   a0e24:	440b      	add	r3, r1
   a0e26:	f803 2c4c 	strb.w	r2, [r3, #-76]
						systemdataarray[count++] = tempdata.bytearray[2] ;
   a0e2a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   a0e2e:	1c5a      	adds	r2, r3, #1
   a0e30:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   a0e34:	7bba      	ldrb	r2, [r7, #14]
   a0e36:	f107 0160 	add.w	r1, r7, #96	; 0x60
   a0e3a:	440b      	add	r3, r1
   a0e3c:	f803 2c4c 	strb.w	r2, [r3, #-76]
						systemdataarray[count++] = tempdata.bytearray[3] ;
   a0e40:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   a0e44:	1c5a      	adds	r2, r3, #1
   a0e46:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   a0e4a:	7bfa      	ldrb	r2, [r7, #15]
   a0e4c:	f107 0160 	add.w	r1, r7, #96	; 0x60
   a0e50:	440b      	add	r3, r1
   a0e52:	f803 2c4c 	strb.w	r2, [r3, #-76]
					}


					if( datatype == DIALYSIS_PREP_DATA)
   a0e56:	79fb      	ldrb	r3, [r7, #7]
   a0e58:	2b04      	cmp	r3, #4
   a0e5a:	d135      	bne.n	a0ec8 <Cl_Dprep_SendPrepStateData+0x5f8>
					{
						TMP = 5000;
   a0e5c:	4b37      	ldr	r3, [pc, #220]	; (a0f3c <Cl_Dprep_SendPrepStateData+0x66c>)
   a0e5e:	4a38      	ldr	r2, [pc, #224]	; (a0f40 <Cl_Dprep_SendPrepStateData+0x670>)
   a0e60:	601a      	str	r2, [r3, #0]
						tempdata.word	 = (TMP);
   a0e62:	4b36      	ldr	r3, [pc, #216]	; (a0f3c <Cl_Dprep_SendPrepStateData+0x66c>)
   a0e64:	681a      	ldr	r2, [r3, #0]
   a0e66:	4b25      	ldr	r3, [pc, #148]	; (a0efc <Cl_Dprep_SendPrepStateData+0x62c>)
   a0e68:	4610      	mov	r0, r2
   a0e6a:	4798      	blx	r3
   a0e6c:	4603      	mov	r3, r0
   a0e6e:	60fb      	str	r3, [r7, #12]
						systemdataarray[count++] = tempdata.bytearray[0] ;
   a0e70:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   a0e74:	1c5a      	adds	r2, r3, #1
   a0e76:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   a0e7a:	7b3a      	ldrb	r2, [r7, #12]
   a0e7c:	f107 0160 	add.w	r1, r7, #96	; 0x60
   a0e80:	440b      	add	r3, r1
   a0e82:	f803 2c4c 	strb.w	r2, [r3, #-76]
						systemdataarray[count++] = tempdata.bytearray[1] ;
   a0e86:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   a0e8a:	1c5a      	adds	r2, r3, #1
   a0e8c:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   a0e90:	7b7a      	ldrb	r2, [r7, #13]
   a0e92:	f107 0160 	add.w	r1, r7, #96	; 0x60
   a0e96:	440b      	add	r3, r1
   a0e98:	f803 2c4c 	strb.w	r2, [r3, #-76]
						systemdataarray[count++] = tempdata.bytearray[2] ;
   a0e9c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   a0ea0:	1c5a      	adds	r2, r3, #1
   a0ea2:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   a0ea6:	7bba      	ldrb	r2, [r7, #14]
   a0ea8:	f107 0160 	add.w	r1, r7, #96	; 0x60
   a0eac:	440b      	add	r3, r1
   a0eae:	f803 2c4c 	strb.w	r2, [r3, #-76]
						systemdataarray[count++] = tempdata.bytearray[3] ;
   a0eb2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   a0eb6:	1c5a      	adds	r2, r3, #1
   a0eb8:	f887 205f 	strb.w	r2, [r7, #95]	; 0x5f
   a0ebc:	7bfa      	ldrb	r2, [r7, #15]
   a0ebe:	f107 0160 	add.w	r1, r7, #96	; 0x60
   a0ec2:	440b      	add	r3, r1
   a0ec4:	f803 2c4c 	strb.w	r2, [r3, #-76]
					}
		
					Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&systemdataarray,count);
   a0ec8:	f107 0214 	add.w	r2, r7, #20
   a0ecc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
   a0ed0:	202a      	movs	r0, #42	; 0x2a
   a0ed2:	4611      	mov	r1, r2
   a0ed4:	461a      	mov	r2, r3
   a0ed6:	4b1b      	ldr	r3, [pc, #108]	; (a0f44 <Cl_Dprep_SendPrepStateData+0x674>)
   a0ed8:	4798      	blx	r3
   a0eda:	4603      	mov	r3, r0
   a0edc:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
					//Cl_Dlsis_SenddlsisData();
	return CL_OK;
   a0ee0:	2300      	movs	r3, #0
}
   a0ee2:	4618      	mov	r0, r3
   a0ee4:	3764      	adds	r7, #100	; 0x64
   a0ee6:	46bd      	mov	sp, r7
   a0ee8:	e8bd 8390 	ldmia.w	sp!, {r4, r7, r8, r9, pc}
   a0eec:	f3af 8000 	nop.w
   a0ef0:	58e21965 	.word	0x58e21965
   a0ef4:	3fe9b717 	.word	0x3fe9b717
   a0ef8:	20071c88 	.word	0x20071c88
   a0efc:	000a6d31 	.word	0x000a6d31
   a0f00:	0008e7f9 	.word	0x0008e7f9
   a0f04:	000a600d 	.word	0x000a600d
   a0f08:	000a60d9 	.word	0x000a60d9
   a0f0c:	000a665d 	.word	0x000a665d
   a0f10:	000840d9 	.word	0x000840d9
   a0f14:	20071c8c 	.word	0x20071c8c
   a0f18:	000a6959 	.word	0x000a6959
   a0f1c:	40a00000 	.word	0x40a00000
   a0f20:	20072170 	.word	0x20072170
   a0f24:	000a6749 	.word	0x000a6749
   a0f28:	000a6ac1 	.word	0x000a6ac1
   a0f2c:	40c00000 	.word	0x40c00000
   a0f30:	00084271 	.word	0x00084271
   a0f34:	20071c90 	.word	0x20071c90
   a0f38:	20071784 	.word	0x20071784
   a0f3c:	20071c94 	.word	0x20071c94
   a0f40:	459c4000 	.word	0x459c4000
   a0f44:	0009ba51 	.word	0x0009ba51

000a0f48 <Cl_Dprep_Stoppreparation>:


Cl_ReturnCodeType Cl_Dprep_Stoppreparation(void)
{
   a0f48:	b580      	push	{r7, lr}
   a0f4a:	b082      	sub	sp, #8
   a0f4c:	af00      	add	r7, sp, #0
	
	Cl_ReturnCodeType Cl_dprepretcode = CL_OK;
   a0f4e:	2300      	movs	r3, #0
   a0f50:	71fb      	strb	r3, [r7, #7]
	Cl_Uint8Type data;
	
	sv_cntrl_setredalarm();
   a0f52:	4b3a      	ldr	r3, [pc, #232]	; (a103c <Cl_Dprep_Stoppreparation+0xf4>)
   a0f54:	4798      	blx	r3
	// deactivate all alarms
				if(!((cl_dprepstate == CL_DPREP_STATE_IDLE ) || (cl_dprepstate == CL_DPREP_STATE_STOPPED ) ||(cl_dprepstate == CL_DPREP_STATE_CRITICAL_ALARM )  ))
   a0f56:	4b3a      	ldr	r3, [pc, #232]	; (a1040 <Cl_Dprep_Stoppreparation+0xf8>)
   a0f58:	781b      	ldrb	r3, [r3, #0]
   a0f5a:	2b00      	cmp	r3, #0
   a0f5c:	d068      	beq.n	a1030 <Cl_Dprep_Stoppreparation+0xe8>
   a0f5e:	4b38      	ldr	r3, [pc, #224]	; (a1040 <Cl_Dprep_Stoppreparation+0xf8>)
   a0f60:	781b      	ldrb	r3, [r3, #0]
   a0f62:	2b0b      	cmp	r3, #11
   a0f64:	d064      	beq.n	a1030 <Cl_Dprep_Stoppreparation+0xe8>
   a0f66:	4b36      	ldr	r3, [pc, #216]	; (a1040 <Cl_Dprep_Stoppreparation+0xf8>)
   a0f68:	781b      	ldrb	r3, [r3, #0]
   a0f6a:	2b0c      	cmp	r3, #12
   a0f6c:	d060      	beq.n	a1030 <Cl_Dprep_Stoppreparation+0xe8>
				{
					
					stability_counter = 0;
   a0f6e:	4b35      	ldr	r3, [pc, #212]	; (a1044 <Cl_Dprep_Stoppreparation+0xfc>)
   a0f70:	2200      	movs	r2, #0
   a0f72:	601a      	str	r2, [r3, #0]
					wait_timeout_counter = 0;
   a0f74:	4b34      	ldr	r3, [pc, #208]	; (a1048 <Cl_Dprep_Stoppreparation+0x100>)
   a0f76:	2200      	movs	r2, #0
   a0f78:	601a      	str	r2, [r3, #0]
					state_counter = 0;
   a0f7a:	4b34      	ldr	r3, [pc, #208]	; (a104c <Cl_Dprep_Stoppreparation+0x104>)
   a0f7c:	2200      	movs	r2, #0
   a0f7e:	601a      	str	r2, [r3, #0]
					 	Cl_Dprepsecondscounter = 0;
   a0f80:	4b33      	ldr	r3, [pc, #204]	; (a1050 <Cl_Dprep_Stoppreparation+0x108>)
   a0f82:	2200      	movs	r2, #0
   a0f84:	601a      	str	r2, [r3, #0]
					 	Cl_DprepMinutescounter= 0;
   a0f86:	4b33      	ldr	r3, [pc, #204]	; (a1054 <Cl_Dprep_Stoppreparation+0x10c>)
   a0f88:	2200      	movs	r2, #0
   a0f8a:	601a      	str	r2, [r3, #0]
					 	Cl_Dprephourscounter= 0;
   a0f8c:	4b32      	ldr	r3, [pc, #200]	; (a1058 <Cl_Dprep_Stoppreparation+0x110>)
   a0f8e:	2200      	movs	r2, #0
   a0f90:	601a      	str	r2, [r3, #0]
					 	Cl_DprepTotalMinutescounter= 0;
   a0f92:	4b32      	ldr	r3, [pc, #200]	; (a105c <Cl_Dprep_Stoppreparation+0x114>)
   a0f94:	2200      	movs	r2, #0
   a0f96:	601a      	str	r2, [r3, #0]
					 	Cl_DprepTotalhourscounter=0;
   a0f98:	4b31      	ldr	r3, [pc, #196]	; (a1060 <Cl_Dprep_Stoppreparation+0x118>)
   a0f9a:	2200      	movs	r2, #0
   a0f9c:	601a      	str	r2, [r3, #0]
							Cl_Dprep_filling_secondscounter = 0;
   a0f9e:	4b31      	ldr	r3, [pc, #196]	; (a1064 <Cl_Dprep_Stoppreparation+0x11c>)
   a0fa0:	2200      	movs	r2, #0
   a0fa2:	801a      	strh	r2, [r3, #0]
							Cl_Dprep_filling_Minutescounter = 0;
   a0fa4:	4b30      	ldr	r3, [pc, #192]	; (a1068 <Cl_Dprep_Stoppreparation+0x120>)
   a0fa6:	2200      	movs	r2, #0
   a0fa8:	801a      	strh	r2, [r3, #0]
							Cl_Dprep_filling_TotalMinutescounter = 0;
   a0faa:	4b30      	ldr	r3, [pc, #192]	; (a106c <Cl_Dprep_Stoppreparation+0x124>)
   a0fac:	2200      	movs	r2, #0
   a0fae:	801a      	strh	r2, [r3, #0]
					
							Cl_Dprep_Prime_secondscounter = 0;
   a0fb0:	4b2f      	ldr	r3, [pc, #188]	; (a1070 <Cl_Dprep_Stoppreparation+0x128>)
   a0fb2:	2200      	movs	r2, #0
   a0fb4:	801a      	strh	r2, [r3, #0]
							Cl_Dprep_Prime_Minutescounter = 0;
   a0fb6:	4b2f      	ldr	r3, [pc, #188]	; (a1074 <Cl_Dprep_Stoppreparation+0x12c>)
   a0fb8:	2200      	movs	r2, #0
   a0fba:	801a      	strh	r2, [r3, #0]
							Cl_Dprep_Prime_TotalMinutescounter = 0;
   a0fbc:	4b2e      	ldr	r3, [pc, #184]	; (a1078 <Cl_Dprep_Stoppreparation+0x130>)
   a0fbe:	2200      	movs	r2, #0
   a0fc0:	801a      	strh	r2, [r3, #0]
					
							Cl_Dprep_DialyserPrime_secondscounter = 0;
   a0fc2:	4b2e      	ldr	r3, [pc, #184]	; (a107c <Cl_Dprep_Stoppreparation+0x134>)
   a0fc4:	2200      	movs	r2, #0
   a0fc6:	801a      	strh	r2, [r3, #0]
							Cl_Dprep_DialyserPrime_Minutescounter = 0;
   a0fc8:	4b2d      	ldr	r3, [pc, #180]	; (a1080 <Cl_Dprep_Stoppreparation+0x138>)
   a0fca:	2200      	movs	r2, #0
   a0fcc:	801a      	strh	r2, [r3, #0]
							Cl_Dprep_DialyserPrime_TotalMinutescounter = 0;
   a0fce:	4b2d      	ldr	r3, [pc, #180]	; (a1084 <Cl_Dprep_Stoppreparation+0x13c>)
   a0fd0:	2200      	movs	r2, #0
   a0fd2:	801a      	strh	r2, [r3, #0]
						
					Cl_deactivate_prep_alarms();							
   a0fd4:	4b2c      	ldr	r3, [pc, #176]	; (a1088 <Cl_Dprep_Stoppreparation+0x140>)
   a0fd6:	4798      	blx	r3
							
							
							
				Cl_dprepretcode =  sv_cntrl_deactivatevenousclamp();
   a0fd8:	4b2c      	ldr	r3, [pc, #176]	; (a108c <Cl_Dprep_Stoppreparation+0x144>)
   a0fda:	4798      	blx	r3
   a0fdc:	4603      	mov	r3, r0
   a0fde:	71fb      	strb	r3, [r7, #7]
				Cl_dprepretcode = sv_cntrl_setflowpath(FLOW_PATH_IDLE_RINSE);
   a0fe0:	2011      	movs	r0, #17
   a0fe2:	4b2b      	ldr	r3, [pc, #172]	; (a1090 <Cl_Dprep_Stoppreparation+0x148>)
   a0fe4:	4798      	blx	r3
   a0fe6:	4603      	mov	r3, r0
   a0fe8:	71fb      	strb	r3, [r7, #7]
				Cl_dprepretcode = sv_cntrl_poweroffheater();
   a0fea:	4b2a      	ldr	r3, [pc, #168]	; (a1094 <Cl_Dprep_Stoppreparation+0x14c>)
   a0fec:	4798      	blx	r3
   a0fee:	4603      	mov	r3, r0
   a0ff0:	71fb      	strb	r3, [r7, #7]
				Cl_dprepretcode = SetHeaterState(CL_HEATER_STATE_OFF);
   a0ff2:	2004      	movs	r0, #4
   a0ff4:	4b28      	ldr	r3, [pc, #160]	; (a1098 <Cl_Dprep_Stoppreparation+0x150>)
   a0ff6:	4798      	blx	r3
   a0ff8:	4603      	mov	r3, r0
   a0ffa:	71fb      	strb	r3, [r7, #7]
				cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP,0);
   a0ffc:	2002      	movs	r0, #2
   a0ffe:	2100      	movs	r1, #0
   a1000:	4b26      	ldr	r3, [pc, #152]	; (a109c <Cl_Dprep_Stoppreparation+0x154>)
   a1002:	4798      	blx	r3
//Cl_dprepretcode = Cl_bc_controller(BC_EVENT_PAUSE);
	Cl_dprep_StopMixing();			
   a1004:	4b26      	ldr	r3, [pc, #152]	; (a10a0 <Cl_Dprep_Stoppreparation+0x158>)
   a1006:	4798      	blx	r3
				if(cl_dprepstate == CL_DPREP_STATE_DIALISER_PRIME){
   a1008:	4b0d      	ldr	r3, [pc, #52]	; (a1040 <Cl_Dprep_Stoppreparation+0xf8>)
   a100a:	781b      	ldrb	r3, [r3, #0]
   a100c:	2b06      	cmp	r3, #6
   a100e:	d104      	bne.n	a101a <Cl_Dprep_Stoppreparation+0xd2>
					cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP_DIALYSER_PRIMING,0);
   a1010:	2009      	movs	r0, #9
   a1012:	2100      	movs	r1, #0
   a1014:	4b21      	ldr	r3, [pc, #132]	; (a109c <Cl_Dprep_Stoppreparation+0x154>)
   a1016:	4798      	blx	r3
   a1018:	e007      	b.n	a102a <Cl_Dprep_Stoppreparation+0xe2>
				}
				else{
					Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSATE_FILLING_STOPPED,&data,0);
   a101a:	1dbb      	adds	r3, r7, #6
   a101c:	202d      	movs	r0, #45	; 0x2d
   a101e:	4619      	mov	r1, r3
   a1020:	2200      	movs	r2, #0
   a1022:	4b20      	ldr	r3, [pc, #128]	; (a10a4 <Cl_Dprep_Stoppreparation+0x15c>)
   a1024:	4798      	blx	r3
   a1026:	4603      	mov	r3, r0
   a1028:	71fb      	strb	r3, [r7, #7]
				}
			//	cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP_DIALYSER_PRIMING,0);
				
			
				cl_dprepstate = CL_DPREP_STATE_IDLE;
   a102a:	4b05      	ldr	r3, [pc, #20]	; (a1040 <Cl_Dprep_Stoppreparation+0xf8>)
   a102c:	2200      	movs	r2, #0
   a102e:	701a      	strb	r2, [r3, #0]
				//Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSATE_FILLING_STOPPED,&data,0);
				
					
				}
		return CL_OK;
   a1030:	2300      	movs	r3, #0
}
   a1032:	4618      	mov	r0, r3
   a1034:	3708      	adds	r7, #8
   a1036:	46bd      	mov	sp, r7
   a1038:	bd80      	pop	{r7, pc}
   a103a:	bf00      	nop
   a103c:	00099f25 	.word	0x00099f25
   a1040:	20071c6f 	.word	0x20071c6f
   a1044:	20071c2c 	.word	0x20071c2c
   a1048:	20071c30 	.word	0x20071c30
   a104c:	20071c34 	.word	0x20071c34
   a1050:	20071c38 	.word	0x20071c38
   a1054:	20071c3c 	.word	0x20071c3c
   a1058:	20071c40 	.word	0x20071c40
   a105c:	20071c44 	.word	0x20071c44
   a1060:	20071c48 	.word	0x20071c48
   a1064:	20071c4e 	.word	0x20071c4e
   a1068:	20071c50 	.word	0x20071c50
   a106c:	20071c52 	.word	0x20071c52
   a1070:	20071c54 	.word	0x20071c54
   a1074:	20071c56 	.word	0x20071c56
   a1078:	20071c58 	.word	0x20071c58
   a107c:	20071c5a 	.word	0x20071c5a
   a1080:	20071c5c 	.word	0x20071c5c
   a1084:	20071c5e 	.word	0x20071c5e
   a1088:	000a24f1 	.word	0x000a24f1
   a108c:	00099e2d 	.word	0x00099e2d
   a1090:	00099ebd 	.word	0x00099ebd
   a1094:	00099cb9 	.word	0x00099cb9
   a1098:	000894d9 	.word	0x000894d9
   a109c:	0008850d 	.word	0x0008850d
   a10a0:	000a2449 	.word	0x000a2449
   a10a4:	0009ba51 	.word	0x0009ba51

000a10a8 <Cl_Dprep_ResetAlertsforReassertion>:


Cl_ReturnCodeType Cl_Dprep_ResetAlertsforReassertion(void )
{
   a10a8:	b580      	push	{r7, lr}
   a10aa:	b082      	sub	sp, #8
   a10ac:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType 	Cl_dprepretcode = CL_OK;
   a10ae:	2300      	movs	r3, #0
   a10b0:	71fb      	strb	r3, [r7, #7]
	ClDprepAlarmIdType CldprepAlarmId;
	Cl_Uint8Type data;
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a10b2:	2351      	movs	r3, #81	; 0x51
   a10b4:	71bb      	strb	r3, [r7, #6]
	Cl_NewAlarmIdType cl_dprepalarmid;
	
	Cl_DprepAlarmTable[CL_DPREP_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   a10b6:	4b5f      	ldr	r3, [pc, #380]	; (a1234 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   a10b8:	2200      	movs	r2, #0
   a10ba:	70da      	strb	r2, [r3, #3]
	Cl_AlarmResetAlarm(BLOODDOOR_STATUS_OPEN);
   a10bc:	2001      	movs	r0, #1
   a10be:	4b5e      	ldr	r3, [pc, #376]	; (a1238 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   a10c0:	4798      	blx	r3
	Cl_DprepAlarmTable[CL_DPREP_ALARM_HOLDER1STATUS_CLOSED].IsRaised = false;
   a10c2:	4b5c      	ldr	r3, [pc, #368]	; (a1234 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   a10c4:	2200      	movs	r2, #0
   a10c6:	729a      	strb	r2, [r3, #10]
	Cl_DprepAlarmTable[CL_DPREP_ALARM_HOLDER2STATUS_CLOSED].IsRaised = false;
   a10c8:	4b5a      	ldr	r3, [pc, #360]	; (a1234 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   a10ca:	2200      	movs	r2, #0
   a10cc:	745a      	strb	r2, [r3, #17]
	Cl_AlarmResetAlarm(HOLDER1STATUS_CLOSED);
   a10ce:	2005      	movs	r0, #5
   a10d0:	4b59      	ldr	r3, [pc, #356]	; (a1238 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   a10d2:	4798      	blx	r3
	Cl_AlarmResetAlarm(HOLDER2STATUS_CLOSED);
   a10d4:	2006      	movs	r0, #6
   a10d6:	4b58      	ldr	r3, [pc, #352]	; (a1238 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   a10d8:	4798      	blx	r3
	Cl_DprepAlarmTable[CL_DPREP_ALARM_HOLDER1STATUS_OPEN].IsRaised = false;
   a10da:	4b56      	ldr	r3, [pc, #344]	; (a1234 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   a10dc:	2200      	movs	r2, #0
   a10de:	761a      	strb	r2, [r3, #24]
	Cl_DprepAlarmTable[CL_DPREP_ALARM_HOLDER2STATUS_OPEN].IsRaised = false;
   a10e0:	4b54      	ldr	r3, [pc, #336]	; (a1234 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   a10e2:	2200      	movs	r2, #0
   a10e4:	77da      	strb	r2, [r3, #31]
	Cl_AlarmResetAlarm(HOLDER1STATUS_OPEN);
   a10e6:	2003      	movs	r0, #3
   a10e8:	4b53      	ldr	r3, [pc, #332]	; (a1238 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   a10ea:	4798      	blx	r3
	Cl_AlarmResetAlarm(HOLDER2STATUS_OPEN);
   a10ec:	2004      	movs	r0, #4
   a10ee:	4b52      	ldr	r3, [pc, #328]	; (a1238 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   a10f0:	4798      	blx	r3
	Cl_DprepAlarmTable[CL_DPREP_ALARM_ACID_IN].IsRaised = false;
   a10f2:	4b50      	ldr	r3, [pc, #320]	; (a1234 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   a10f4:	2200      	movs	r2, #0
   a10f6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	Cl_AlarmResetAlarm(ACID_IN_CLOSED);
   a10fa:	202a      	movs	r0, #42	; 0x2a
   a10fc:	4b4e      	ldr	r3, [pc, #312]	; (a1238 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   a10fe:	4798      	blx	r3
	Cl_DprepAlarmTable[CL_DPREP_ALARM_BICAR_IN].IsRaised = false;
   a1100:	4b4c      	ldr	r3, [pc, #304]	; (a1234 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   a1102:	2200      	movs	r2, #0
   a1104:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	Cl_AlarmResetAlarm(BICARB_IN_CLOSED);
   a1108:	202c      	movs	r0, #44	; 0x2c
   a110a:	4b4b      	ldr	r3, [pc, #300]	; (a1238 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   a110c:	4798      	blx	r3
	Cl_DprepAlarmTable[CL_DPREP_ALARM_COND_STATUS_LOW].IsRaised = false;
   a110e:	4b49      	ldr	r3, [pc, #292]	; (a1234 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   a1110:	2200      	movs	r2, #0
   a1112:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	Cl_DprepAlarmTable[CL_DPREP_ALARM_COND_STATUS_HIGH].IsRaised = false;
   a1116:	4b47      	ldr	r3, [pc, #284]	; (a1234 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   a1118:	2200      	movs	r2, #0
   a111a:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	Cl_AlarmResetAlarm(COND_STATUS_HIGH);
   a111e:	2008      	movs	r0, #8
   a1120:	4b45      	ldr	r3, [pc, #276]	; (a1238 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   a1122:	4798      	blx	r3
	Cl_AlarmResetAlarm(COND_STATUS_LOW);
   a1124:	2007      	movs	r0, #7
   a1126:	4b44      	ldr	r3, [pc, #272]	; (a1238 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   a1128:	4798      	blx	r3
	Cl_DprepAlarmTable[CL_DPREP_ALARM_COND_DAC_OPEN].IsRaised = false;
   a112a:	4b42      	ldr	r3, [pc, #264]	; (a1234 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   a112c:	2200      	movs	r2, #0
   a112e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	Cl_DprepAlarmTable[CL_DPREP_ALARM_COND_DAC_RO].IsRaised = false;
   a1132:	4b40      	ldr	r3, [pc, #256]	; (a1234 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   a1134:	2200      	movs	r2, #0
   a1136:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	Cl_DprepAlarmTable[CL_DPREP_ALARM_COND_DAC_HIGH].IsRaised = false;
   a113a:	4b3e      	ldr	r3, [pc, #248]	; (a1234 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   a113c:	2200      	movs	r2, #0
   a113e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	Cl_DprepAlarmTable[CL_DPREP_ALARM_FLOW_NO_FLOW].IsRaised = false;
   a1142:	4b3c      	ldr	r3, [pc, #240]	; (a1234 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   a1144:	2200      	movs	r2, #0
   a1146:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
	Cl_DprepAlarmTable[CL_DPREP_ALARM_FLOW_LOW_FLOWRATE].IsRaised = false;
   a114a:	4b3a      	ldr	r3, [pc, #232]	; (a1234 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   a114c:	2200      	movs	r2, #0
   a114e:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	Cl_DprepAlarmTable[CL_DPREP_ALARM_ABD_EVENT].IsRaised = false;
   a1152:	4b38      	ldr	r3, [pc, #224]	; (a1234 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   a1154:	2200      	movs	r2, #0
   a1156:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
	Cl_DprepAlarmTable[CL_DPREP_ALARM_BD_EVENT].IsRaised = false;
   a115a:	4b36      	ldr	r3, [pc, #216]	; (a1234 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   a115c:	2200      	movs	r2, #0
   a115e:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	Cl_DprepAlarmTable[CL_DPREP_ALARM_BLD_EVENT].IsRaised = false;
   a1162:	4b34      	ldr	r3, [pc, #208]	; (a1234 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   a1164:	2200      	movs	r2, #0
   a1166:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	Cl_DprepAlarmTable[CL_DPREP_ALARM_APTSTATUS_HIGH].IsRaised = false;
   a116a:	4b32      	ldr	r3, [pc, #200]	; (a1234 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   a116c:	2200      	movs	r2, #0
   a116e:	f883 207a 	strb.w	r2, [r3, #122]	; 0x7a
	Cl_DprepAlarmTable[CL_DPREP_ALARM_VPTSTATUS_HIGH].IsRaised = false;
   a1172:	4b30      	ldr	r3, [pc, #192]	; (a1234 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   a1174:	2200      	movs	r2, #0
   a1176:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	Cl_DprepAlarmTable[CL_DPREP_ALARM_PS1_HIGH_THRESHOLD].IsRaised = false;
   a117a:	4b2e      	ldr	r3, [pc, #184]	; (a1234 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   a117c:	2200      	movs	r2, #0
   a117e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
	Cl_DprepAlarmTable[CL_DPREP_ALARM_PS1_LOW_THRESHOLD].IsRaised = false;
   a1182:	4b2c      	ldr	r3, [pc, #176]	; (a1234 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   a1184:	2200      	movs	r2, #0
   a1186:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
	Cl_AlarmResetAlarm(PS1_HIGH_THRESHOLD);
   a118a:	2015      	movs	r0, #21
   a118c:	4b2a      	ldr	r3, [pc, #168]	; (a1238 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   a118e:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS1_LOW_THRESHOLD);
   a1190:	2016      	movs	r0, #22
   a1192:	4b29      	ldr	r3, [pc, #164]	; (a1238 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   a1194:	4798      	blx	r3
	Cl_DprepAlarmTable[CL_DPREP_ALARM_PS2_HIGH_THRESHOLD].IsRaised = false;
   a1196:	4b27      	ldr	r3, [pc, #156]	; (a1234 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   a1198:	2200      	movs	r2, #0
   a119a:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
	Cl_DprepAlarmTable[CL_DPREP_ALARM_PS2_LOW_THRESHOLD].IsRaised = false;
   a119e:	4b25      	ldr	r3, [pc, #148]	; (a1234 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   a11a0:	2200      	movs	r2, #0
   a11a2:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
	Cl_AlarmResetAlarm(PS2_HIGH_THRESHOLD);
   a11a6:	2017      	movs	r0, #23
   a11a8:	4b23      	ldr	r3, [pc, #140]	; (a1238 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   a11aa:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS2_LOW_THRESHOLD);
   a11ac:	2018      	movs	r0, #24
   a11ae:	4b22      	ldr	r3, [pc, #136]	; (a1238 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   a11b0:	4798      	blx	r3
	Cl_DprepAlarmTable[CL_DPREP_ALARM_PS3_HIGH_THRESHOLD].IsRaised = false;
   a11b2:	4b20      	ldr	r3, [pc, #128]	; (a1234 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   a11b4:	2200      	movs	r2, #0
   a11b6:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	Cl_DprepAlarmTable[CL_DPREP_ALARM_PS3_LOW_THRESHOLD].IsRaised = false;
   a11ba:	4b1e      	ldr	r3, [pc, #120]	; (a1234 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   a11bc:	2200      	movs	r2, #0
   a11be:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
	Cl_AlarmResetAlarm(PS3_HIGH_THRESHOLD);
   a11c2:	2027      	movs	r0, #39	; 0x27
   a11c4:	4b1c      	ldr	r3, [pc, #112]	; (a1238 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   a11c6:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS3_LOW_THRESHOLD);
   a11c8:	2028      	movs	r0, #40	; 0x28
   a11ca:	4b1b      	ldr	r3, [pc, #108]	; (a1238 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   a11cc:	4798      	blx	r3
	Cl_DprepAlarmTable[CL_DPREP_ALARM_FLOW_LOW_FLOWRATE].IsRaised = false;
   a11ce:	4b19      	ldr	r3, [pc, #100]	; (a1234 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   a11d0:	2200      	movs	r2, #0
   a11d2:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	Cl_DprepAlarmTable[CL_DPREP_ALARM_TEMP1_HIGH_THRESHOLD].IsRaised = false;
   a11d6:	4b17      	ldr	r3, [pc, #92]	; (a1234 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   a11d8:	2200      	movs	r2, #0
   a11da:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
	Cl_DprepAlarmTable[CL_DPREP_ALARM_TEMP1_LOW_THRESHOLD].IsRaised = false;
   a11de:	4b15      	ldr	r3, [pc, #84]	; (a1234 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   a11e0:	2200      	movs	r2, #0
   a11e2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
	Cl_AlarmResetAlarm(TEMP1_HIGH_THRESHOLD);
   a11e6:	200f      	movs	r0, #15
   a11e8:	4b13      	ldr	r3, [pc, #76]	; (a1238 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   a11ea:	4798      	blx	r3
	Cl_AlarmResetAlarm(TEMP1_LOW_THRESHOLD);
   a11ec:	2010      	movs	r0, #16
   a11ee:	4b12      	ldr	r3, [pc, #72]	; (a1238 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   a11f0:	4798      	blx	r3
	Cl_DprepAlarmTable[CL_DPREP_ALARM_TEMP2_HIGH_THRESHOLD].IsRaised = false;
   a11f2:	4b10      	ldr	r3, [pc, #64]	; (a1234 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   a11f4:	2200      	movs	r2, #0
   a11f6:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
	Cl_DprepAlarmTable[CL_DPREP_ALARM_TEMP2_LOW_THRESHOLD].IsRaised = false;
   a11fa:	4b0e      	ldr	r3, [pc, #56]	; (a1234 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   a11fc:	2200      	movs	r2, #0
   a11fe:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
	Cl_AlarmResetAlarm(TEMP2_HIGH_THRESHOLD);
   a1202:	2011      	movs	r0, #17
   a1204:	4b0c      	ldr	r3, [pc, #48]	; (a1238 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   a1206:	4798      	blx	r3
	Cl_AlarmResetAlarm(TEMP2_LOW_THRESHOLD);
   a1208:	2012      	movs	r0, #18
   a120a:	4b0b      	ldr	r3, [pc, #44]	; (a1238 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   a120c:	4798      	blx	r3
	Cl_DprepAlarmTable[CL_DPREP_ALARM_TEMP3_HIGH_THRESHOLD].IsRaised = false;
   a120e:	4b09      	ldr	r3, [pc, #36]	; (a1234 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   a1210:	2200      	movs	r2, #0
   a1212:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
	Cl_DprepAlarmTable[CL_DPREP_ALARM_TEMP3_LOW_THRESHOLD].IsRaised = false;
   a1216:	4b07      	ldr	r3, [pc, #28]	; (a1234 <Cl_Dprep_ResetAlertsforReassertion+0x18c>)
   a1218:	2200      	movs	r2, #0
   a121a:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
	Cl_AlarmResetAlarm(TEMP3_HIGH_THRESHOLD);
   a121e:	2013      	movs	r0, #19
   a1220:	4b05      	ldr	r3, [pc, #20]	; (a1238 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   a1222:	4798      	blx	r3
	Cl_AlarmResetAlarm(TEMP3_LOW_THRESHOLD);
   a1224:	2014      	movs	r0, #20
   a1226:	4b04      	ldr	r3, [pc, #16]	; (a1238 <Cl_Dprep_ResetAlertsforReassertion+0x190>)
   a1228:	4798      	blx	r3

	return (Cl_dprepretcode);
   a122a:	79fb      	ldrb	r3, [r7, #7]
	
}
   a122c:	4618      	mov	r0, r3
   a122e:	3708      	adds	r7, #8
   a1230:	46bd      	mov	sp, r7
   a1232:	bd80      	pop	{r7, pc}
   a1234:	20070bdc 	.word	0x20070bdc
   a1238:	00082f51 	.word	0x00082f51

000a123c <Cl_Dprep_setdata>:
		
	}
return CL_OK;
}
Cl_ReturnCodeType Cl_Dprep_setdata(Cl_ConsoleRxDataType DataId,cl_PrepDatatype cl_PrepData , Cl_Uint8Type size)
{
   a123c:	b590      	push	{r4, r7, lr}
   a123e:	b089      	sub	sp, #36	; 0x24
   a1240:	af00      	add	r7, sp, #0
   a1242:	4604      	mov	r4, r0
   a1244:	1d38      	adds	r0, r7, #4
   a1246:	e880 0006 	stmia.w	r0, {r1, r2}
   a124a:	461a      	mov	r2, r3
   a124c:	4623      	mov	r3, r4
   a124e:	73fb      	strb	r3, [r7, #15]
   a1250:	4613      	mov	r3, r2
   a1252:	73bb      	strb	r3, [r7, #14]
	Cl_ReturnCodeType Cl_dprepretcode = CL_OK;
   a1254:	2300      	movs	r3, #0
   a1256:	77fb      	strb	r3, [r7, #31]
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a1258:	2351      	movs	r3, #81	; 0x51
   a125a:	77bb      	strb	r3, [r7, #30]
	Cl_Uint8Type dataarray[8] =  {0,0,0,0};
   a125c:	2300      	movs	r3, #0
   a125e:	617b      	str	r3, [r7, #20]
   a1260:	2300      	movs	r3, #0
   a1262:	61bb      	str	r3, [r7, #24]
	Cl_Uint8Type  databytecnt = 0;
   a1264:	2300      	movs	r3, #0
   a1266:	777b      	strb	r3, [r7, #29]

				switch(DataId)
   a1268:	7bfb      	ldrb	r3, [r7, #15]
   a126a:	3b05      	subs	r3, #5
   a126c:	2b18      	cmp	r3, #24
   a126e:	f200 8385 	bhi.w	a197c <Cl_Dprep_setdata+0x740>
   a1272:	a201      	add	r2, pc, #4	; (adr r2, a1278 <Cl_Dprep_setdata+0x3c>)
   a1274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a1278:	000a12dd 	.word	0x000a12dd
   a127c:	000a1309 	.word	0x000a1309
   a1280:	000a1335 	.word	0x000a1335
   a1284:	000a138d 	.word	0x000a138d
   a1288:	000a13b9 	.word	0x000a13b9
   a128c:	000a197d 	.word	0x000a197d
   a1290:	000a13e5 	.word	0x000a13e5
   a1294:	000a1411 	.word	0x000a1411
   a1298:	000a143d 	.word	0x000a143d
   a129c:	000a1361 	.word	0x000a1361
   a12a0:	000a1469 	.word	0x000a1469
   a12a4:	000a197d 	.word	0x000a197d
   a12a8:	000a197d 	.word	0x000a197d
   a12ac:	000a197d 	.word	0x000a197d
   a12b0:	000a1499 	.word	0x000a1499
   a12b4:	000a1509 	.word	0x000a1509
   a12b8:	000a1579 	.word	0x000a1579
   a12bc:	000a15f5 	.word	0x000a15f5
   a12c0:	000a1665 	.word	0x000a1665
   a12c4:	000a16d5 	.word	0x000a16d5
   a12c8:	000a1743 	.word	0x000a1743
   a12cc:	000a17b3 	.word	0x000a17b3
   a12d0:	000a1823 	.word	0x000a1823
   a12d4:	000a1893 	.word	0x000a1893
   a12d8:	000a190d 	.word	0x000a190d
				{
	 
					 case	CON_RX_PARAM_DATA_DIALYSIS_FLOW:
					 Cl_dprepretcode =sv_nvmsetdata(NV_DIALYSATE_FLOW,&cl_PrepData.bytearray[0],Cl_ConsoleRxMsg.datasize);					 
   a12dc:	4bc2      	ldr	r3, [pc, #776]	; (a15e8 <Cl_Dprep_setdata+0x3ac>)
   a12de:	78db      	ldrb	r3, [r3, #3]
   a12e0:	1d3a      	adds	r2, r7, #4
   a12e2:	2005      	movs	r0, #5
   a12e4:	4611      	mov	r1, r2
   a12e6:	461a      	mov	r2, r3
   a12e8:	4bc0      	ldr	r3, [pc, #768]	; (a15ec <Cl_Dprep_setdata+0x3b0>)
   a12ea:	4798      	blx	r3
   a12ec:	4603      	mov	r3, r0
   a12ee:	77fb      	strb	r3, [r7, #31]
					 dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_FLOW;
   a12f0:	2305      	movs	r3, #5
   a12f2:	753b      	strb	r3, [r7, #20]
					 Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_DIALYSATE_FLOW, &dataarray[1]);
   a12f4:	f107 0314 	add.w	r3, r7, #20
   a12f8:	3301      	adds	r3, #1
   a12fa:	2005      	movs	r0, #5
   a12fc:	4619      	mov	r1, r3
   a12fe:	4bbc      	ldr	r3, [pc, #752]	; (a15f0 <Cl_Dprep_setdata+0x3b4>)
   a1300:	4798      	blx	r3
   a1302:	4603      	mov	r3, r0
   a1304:	77fb      	strb	r3, [r7, #31]
					
					 break;
   a1306:	e33a      	b.n	a197e <Cl_Dprep_setdata+0x742>
					 case	CON_RX_PARAM_DATA_DIALYSIS_TEMP:
					 Cl_dprepretcode =sv_nvmsetdata(NV_DIALYSATE_TEMP,&cl_PrepData.bytearray[0],Cl_ConsoleRxMsg.datasize);
   a1308:	4bb7      	ldr	r3, [pc, #732]	; (a15e8 <Cl_Dprep_setdata+0x3ac>)
   a130a:	78db      	ldrb	r3, [r3, #3]
   a130c:	1d3a      	adds	r2, r7, #4
   a130e:	2006      	movs	r0, #6
   a1310:	4611      	mov	r1, r2
   a1312:	461a      	mov	r2, r3
   a1314:	4bb5      	ldr	r3, [pc, #724]	; (a15ec <Cl_Dprep_setdata+0x3b0>)
   a1316:	4798      	blx	r3
   a1318:	4603      	mov	r3, r0
   a131a:	77fb      	strb	r3, [r7, #31]
					 dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_TEMP; 
   a131c:	2306      	movs	r3, #6
   a131e:	753b      	strb	r3, [r7, #20]
					 Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_DIALYSATE_TEMP, &dataarray[1]);
   a1320:	f107 0314 	add.w	r3, r7, #20
   a1324:	3301      	adds	r3, #1
   a1326:	2006      	movs	r0, #6
   a1328:	4619      	mov	r1, r3
   a132a:	4bb1      	ldr	r3, [pc, #708]	; (a15f0 <Cl_Dprep_setdata+0x3b4>)
   a132c:	4798      	blx	r3
   a132e:	4603      	mov	r3, r0
   a1330:	77fb      	strb	r3, [r7, #31]

					 break;
   a1332:	e324      	b.n	a197e <Cl_Dprep_setdata+0x742>
	 
					 case	CON_RX_PARAM_DATA_HEPARIN_RATE:
					 Cl_dprepretcode =sv_nvmsetdata(NV_HEPARIN_FLOW_RATE,&cl_PrepData.bytearray[0],Cl_ConsoleRxMsg.datasize);
   a1334:	4bac      	ldr	r3, [pc, #688]	; (a15e8 <Cl_Dprep_setdata+0x3ac>)
   a1336:	78db      	ldrb	r3, [r3, #3]
   a1338:	1d3a      	adds	r2, r7, #4
   a133a:	200e      	movs	r0, #14
   a133c:	4611      	mov	r1, r2
   a133e:	461a      	mov	r2, r3
   a1340:	4baa      	ldr	r3, [pc, #680]	; (a15ec <Cl_Dprep_setdata+0x3b0>)
   a1342:	4798      	blx	r3
   a1344:	4603      	mov	r3, r0
   a1346:	77fb      	strb	r3, [r7, #31]
					 dataarray[0] = CON_TX_PARAM_DATA_HEPARIN_RATE;
   a1348:	2307      	movs	r3, #7
   a134a:	753b      	strb	r3, [r7, #20]
					 Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_HEPARIN_FLOW_RATE, &dataarray[1]);
   a134c:	f107 0314 	add.w	r3, r7, #20
   a1350:	3301      	adds	r3, #1
   a1352:	200e      	movs	r0, #14
   a1354:	4619      	mov	r1, r3
   a1356:	4ba6      	ldr	r3, [pc, #664]	; (a15f0 <Cl_Dprep_setdata+0x3b4>)
   a1358:	4798      	blx	r3
   a135a:	4603      	mov	r3, r0
   a135c:	77fb      	strb	r3, [r7, #31]
					 break;
   a135e:	e30e      	b.n	a197e <Cl_Dprep_setdata+0x742>
					 
					case CON_RX_PARAM_DATA_BOLUS_VOLUME:

					 Cl_dprepretcode =sv_nvmsetdata(NV_HEPARIN_BOLUS,&cl_PrepData.bytearray[0],Cl_ConsoleRxMsg.datasize);
   a1360:	4ba1      	ldr	r3, [pc, #644]	; (a15e8 <Cl_Dprep_setdata+0x3ac>)
   a1362:	78db      	ldrb	r3, [r3, #3]
   a1364:	1d3a      	adds	r2, r7, #4
   a1366:	200f      	movs	r0, #15
   a1368:	4611      	mov	r1, r2
   a136a:	461a      	mov	r2, r3
   a136c:	4b9f      	ldr	r3, [pc, #636]	; (a15ec <Cl_Dprep_setdata+0x3b0>)
   a136e:	4798      	blx	r3
   a1370:	4603      	mov	r3, r0
   a1372:	77fb      	strb	r3, [r7, #31]
					 dataarray[0] = CON_TX_PARAM_DATA_BOLUS_VOLUME;
   a1374:	230e      	movs	r3, #14
   a1376:	753b      	strb	r3, [r7, #20]
					 Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_HEPARIN_BOLUS, &dataarray[1]);
   a1378:	f107 0314 	add.w	r3, r7, #20
   a137c:	3301      	adds	r3, #1
   a137e:	200f      	movs	r0, #15
   a1380:	4619      	mov	r1, r3
   a1382:	4b9b      	ldr	r3, [pc, #620]	; (a15f0 <Cl_Dprep_setdata+0x3b4>)
   a1384:	4798      	blx	r3
   a1386:	4603      	mov	r3, r0
   a1388:	77fb      	strb	r3, [r7, #31]

					break;
   a138a:	e2f8      	b.n	a197e <Cl_Dprep_setdata+0x742>
					 case	CON_RX_PARAM_DATA_APT_VALUE:
					 Cl_dprepretcode =sv_nvmsetdata(NV_APT_VALUE,&cl_PrepData.bytearray[0],Cl_ConsoleRxMsg.datasize);
   a138c:	4b96      	ldr	r3, [pc, #600]	; (a15e8 <Cl_Dprep_setdata+0x3ac>)
   a138e:	78db      	ldrb	r3, [r3, #3]
   a1390:	1d3a      	adds	r2, r7, #4
   a1392:	2007      	movs	r0, #7
   a1394:	4611      	mov	r1, r2
   a1396:	461a      	mov	r2, r3
   a1398:	4b94      	ldr	r3, [pc, #592]	; (a15ec <Cl_Dprep_setdata+0x3b0>)
   a139a:	4798      	blx	r3
   a139c:	4603      	mov	r3, r0
   a139e:	77fb      	strb	r3, [r7, #31]
					 dataarray[0] = CON_TX_PARAM_DATA_APT_VALUE;	 
   a13a0:	2308      	movs	r3, #8
   a13a2:	753b      	strb	r3, [r7, #20]
					 Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_APT_VALUE, &dataarray[1]);
   a13a4:	f107 0314 	add.w	r3, r7, #20
   a13a8:	3301      	adds	r3, #1
   a13aa:	2007      	movs	r0, #7
   a13ac:	4619      	mov	r1, r3
   a13ae:	4b90      	ldr	r3, [pc, #576]	; (a15f0 <Cl_Dprep_setdata+0x3b4>)
   a13b0:	4798      	blx	r3
   a13b2:	4603      	mov	r3, r0
   a13b4:	77fb      	strb	r3, [r7, #31]

					 break;
   a13b6:	e2e2      	b.n	a197e <Cl_Dprep_setdata+0x742>
					 case	CON_RX_PARAM_DATA_VPT_VALUE:
					 Cl_dprepretcode =sv_nvmsetdata(NV_VPT_VALUE,&cl_PrepData.bytearray[0],Cl_ConsoleRxMsg.datasize);
   a13b8:	4b8b      	ldr	r3, [pc, #556]	; (a15e8 <Cl_Dprep_setdata+0x3ac>)
   a13ba:	78db      	ldrb	r3, [r3, #3]
   a13bc:	1d3a      	adds	r2, r7, #4
   a13be:	2008      	movs	r0, #8
   a13c0:	4611      	mov	r1, r2
   a13c2:	461a      	mov	r2, r3
   a13c4:	4b89      	ldr	r3, [pc, #548]	; (a15ec <Cl_Dprep_setdata+0x3b0>)
   a13c6:	4798      	blx	r3
   a13c8:	4603      	mov	r3, r0
   a13ca:	77fb      	strb	r3, [r7, #31]
					 dataarray[0] = CON_TX_PARAM_DATA_VPT_VALUE;	 
   a13cc:	2309      	movs	r3, #9
   a13ce:	753b      	strb	r3, [r7, #20]
					 Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_VPT_VALUE, &dataarray[1]);
   a13d0:	f107 0314 	add.w	r3, r7, #20
   a13d4:	3301      	adds	r3, #1
   a13d6:	2008      	movs	r0, #8
   a13d8:	4619      	mov	r1, r3
   a13da:	4b85      	ldr	r3, [pc, #532]	; (a15f0 <Cl_Dprep_setdata+0x3b4>)
   a13dc:	4798      	blx	r3
   a13de:	4603      	mov	r3, r0
   a13e0:	77fb      	strb	r3, [r7, #31]

					 break;
   a13e2:	e2cc      	b.n	a197e <Cl_Dprep_setdata+0x742>
					 case	CON_RX_PARAM_DATA_TMP_VALUE:

					 break;
					 case	CON_RX_PARAM_DATA_COND_VALUE:
					 Cl_dprepretcode =sv_nvmsetdata(NV_CONDUCTIVITY,&cl_PrepData.bytearray[0],Cl_ConsoleRxMsg.datasize);
   a13e4:	4b80      	ldr	r3, [pc, #512]	; (a15e8 <Cl_Dprep_setdata+0x3ac>)
   a13e6:	78db      	ldrb	r3, [r3, #3]
   a13e8:	1d3a      	adds	r2, r7, #4
   a13ea:	200a      	movs	r0, #10
   a13ec:	4611      	mov	r1, r2
   a13ee:	461a      	mov	r2, r3
   a13f0:	4b7e      	ldr	r3, [pc, #504]	; (a15ec <Cl_Dprep_setdata+0x3b0>)
   a13f2:	4798      	blx	r3
   a13f4:	4603      	mov	r3, r0
   a13f6:	77fb      	strb	r3, [r7, #31]
					 dataarray[0] = CON_TX_PARAM_DATA_COND_VALUE;
   a13f8:	230b      	movs	r3, #11
   a13fa:	753b      	strb	r3, [r7, #20]
					 Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_CONDUCTIVITY, &dataarray[1]);
   a13fc:	f107 0314 	add.w	r3, r7, #20
   a1400:	3301      	adds	r3, #1
   a1402:	200a      	movs	r0, #10
   a1404:	4619      	mov	r1, r3
   a1406:	4b7a      	ldr	r3, [pc, #488]	; (a15f0 <Cl_Dprep_setdata+0x3b4>)
   a1408:	4798      	blx	r3
   a140a:	4603      	mov	r3, r0
   a140c:	77fb      	strb	r3, [r7, #31]

					 break;
   a140e:	e2b6      	b.n	a197e <Cl_Dprep_setdata+0x742>

					 case	CON_RX_PARAM_DATA_UF_RATE:
					 Cl_dprepretcode =sv_nvmsetdata(NV_UF_REMOVAL_RATE,&cl_PrepData.bytearray[0],Cl_ConsoleRxMsg.datasize);
   a1410:	4b75      	ldr	r3, [pc, #468]	; (a15e8 <Cl_Dprep_setdata+0x3ac>)
   a1412:	78db      	ldrb	r3, [r3, #3]
   a1414:	1d3a      	adds	r2, r7, #4
   a1416:	200b      	movs	r0, #11
   a1418:	4611      	mov	r1, r2
   a141a:	461a      	mov	r2, r3
   a141c:	4b73      	ldr	r3, [pc, #460]	; (a15ec <Cl_Dprep_setdata+0x3b0>)
   a141e:	4798      	blx	r3
   a1420:	4603      	mov	r3, r0
   a1422:	77fb      	strb	r3, [r7, #31]
					 dataarray[0] = CON_TX_PARAM_DATA_UF_RATE;
   a1424:	230c      	movs	r3, #12
   a1426:	753b      	strb	r3, [r7, #20]
					 Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_UF_REMOVAL_RATE, &dataarray[1]);
   a1428:	f107 0314 	add.w	r3, r7, #20
   a142c:	3301      	adds	r3, #1
   a142e:	200b      	movs	r0, #11
   a1430:	4619      	mov	r1, r3
   a1432:	4b6f      	ldr	r3, [pc, #444]	; (a15f0 <Cl_Dprep_setdata+0x3b4>)
   a1434:	4798      	blx	r3
   a1436:	4603      	mov	r3, r0
   a1438:	77fb      	strb	r3, [r7, #31]

					 break;
   a143a:	e2a0      	b.n	a197e <Cl_Dprep_setdata+0x742>
					 case CON_RX_PARAM_DATA_UF_GOAL:
					 Cl_dprepretcode =sv_nvmsetdata(NV_UF_GOAL,&cl_PrepData.bytearray[0],Cl_ConsoleRxMsg.datasize);
   a143c:	4b6a      	ldr	r3, [pc, #424]	; (a15e8 <Cl_Dprep_setdata+0x3ac>)
   a143e:	78db      	ldrb	r3, [r3, #3]
   a1440:	1d3a      	adds	r2, r7, #4
   a1442:	200c      	movs	r0, #12
   a1444:	4611      	mov	r1, r2
   a1446:	461a      	mov	r2, r3
   a1448:	4b68      	ldr	r3, [pc, #416]	; (a15ec <Cl_Dprep_setdata+0x3b0>)
   a144a:	4798      	blx	r3
   a144c:	4603      	mov	r3, r0
   a144e:	77fb      	strb	r3, [r7, #31]
					 dataarray[0] = CON_TX_PARAM_DATA_UF_GOAL;
   a1450:	230d      	movs	r3, #13
   a1452:	753b      	strb	r3, [r7, #20]
					 Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_UF_GOAL, &dataarray[1]);
   a1454:	f107 0314 	add.w	r3, r7, #20
   a1458:	3301      	adds	r3, #1
   a145a:	200c      	movs	r0, #12
   a145c:	4619      	mov	r1, r3
   a145e:	4b64      	ldr	r3, [pc, #400]	; (a15f0 <Cl_Dprep_setdata+0x3b4>)
   a1460:	4798      	blx	r3
   a1462:	4603      	mov	r3, r0
   a1464:	77fb      	strb	r3, [r7, #31]

					 break;
   a1466:	e28a      	b.n	a197e <Cl_Dprep_setdata+0x742>
					 case	CON_RX_PARAM_DATA_ABF_RATE:
					 Cl_dprepretcode =sv_nvmsetdata(NV_HEPARIN_FLOW_RATE,&cl_PrepData.bytearray[0],Cl_ConsoleRxMsg.datasize);					 
   a1468:	4b5f      	ldr	r3, [pc, #380]	; (a15e8 <Cl_Dprep_setdata+0x3ac>)
   a146a:	78db      	ldrb	r3, [r3, #3]
   a146c:	1d3a      	adds	r2, r7, #4
   a146e:	200e      	movs	r0, #14
   a1470:	4611      	mov	r1, r2
   a1472:	461a      	mov	r2, r3
   a1474:	4b5d      	ldr	r3, [pc, #372]	; (a15ec <Cl_Dprep_setdata+0x3b0>)
   a1476:	4798      	blx	r3
   a1478:	4603      	mov	r3, r0
   a147a:	77fb      	strb	r3, [r7, #31]
					 command = CON_TX_COMMAND_SYSDATA;					 
   a147c:	2316      	movs	r3, #22
   a147e:	77bb      	strb	r3, [r7, #30]
					 dataarray[0] = CON_TX_PARAM_DATA_ABF_RATE;
   a1480:	230f      	movs	r3, #15
   a1482:	753b      	strb	r3, [r7, #20]
					 Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_ARTERIAL_BLOODFLOW_RATE, &dataarray[1]);					 
   a1484:	f107 0314 	add.w	r3, r7, #20
   a1488:	3301      	adds	r3, #1
   a148a:	200d      	movs	r0, #13
   a148c:	4619      	mov	r1, r3
   a148e:	4b58      	ldr	r3, [pc, #352]	; (a15f0 <Cl_Dprep_setdata+0x3b4>)
   a1490:	4798      	blx	r3
   a1492:	4603      	mov	r3, r0
   a1494:	77fb      	strb	r3, [r7, #31]
					 break;
   a1496:	e272      	b.n	a197e <Cl_Dprep_setdata+0x742>
					#endif
					case CON_RX_PARAM_DATA_DIALYSIS_FLOW_CONFIG: //0x13
						
						
						
						Cl_dprepretcode =sv_nvmsetdata(NV_DIALYSATE_FLOW,&cl_PrepData.bytearray[0],2);
   a1498:	1d3b      	adds	r3, r7, #4
   a149a:	2005      	movs	r0, #5
   a149c:	4619      	mov	r1, r3
   a149e:	2202      	movs	r2, #2
   a14a0:	4b52      	ldr	r3, [pc, #328]	; (a15ec <Cl_Dprep_setdata+0x3b0>)
   a14a2:	4798      	blx	r3
   a14a4:	4603      	mov	r3, r0
   a14a6:	77fb      	strb	r3, [r7, #31]
						Cl_dprepretcode =sv_nvmsetdata(NV_DIALYSIS_FLOW_CONFIG_UPPER,&cl_PrepData.bytearray[2],2);
   a14a8:	1d3b      	adds	r3, r7, #4
   a14aa:	3302      	adds	r3, #2
   a14ac:	2012      	movs	r0, #18
   a14ae:	4619      	mov	r1, r3
   a14b0:	2202      	movs	r2, #2
   a14b2:	4b4e      	ldr	r3, [pc, #312]	; (a15ec <Cl_Dprep_setdata+0x3b0>)
   a14b4:	4798      	blx	r3
   a14b6:	4603      	mov	r3, r0
   a14b8:	77fb      	strb	r3, [r7, #31]
						Cl_dprepretcode =sv_nvmsetdata(NV_DIALYSIS_FLOW_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   a14ba:	1d3b      	adds	r3, r7, #4
   a14bc:	3304      	adds	r3, #4
   a14be:	2013      	movs	r0, #19
   a14c0:	4619      	mov	r1, r3
   a14c2:	2202      	movs	r2, #2
   a14c4:	4b49      	ldr	r3, [pc, #292]	; (a15ec <Cl_Dprep_setdata+0x3b0>)
   a14c6:	4798      	blx	r3
   a14c8:	4603      	mov	r3, r0
   a14ca:	77fb      	strb	r3, [r7, #31]
						
						dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_FLOW_CONFIG;
   a14cc:	2313      	movs	r3, #19
   a14ce:	753b      	strb	r3, [r7, #20]
						Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_DIALYSATE_FLOW, &dataarray[1]);	
   a14d0:	f107 0314 	add.w	r3, r7, #20
   a14d4:	3301      	adds	r3, #1
   a14d6:	2005      	movs	r0, #5
   a14d8:	4619      	mov	r1, r3
   a14da:	4b45      	ldr	r3, [pc, #276]	; (a15f0 <Cl_Dprep_setdata+0x3b4>)
   a14dc:	4798      	blx	r3
   a14de:	4603      	mov	r3, r0
   a14e0:	77fb      	strb	r3, [r7, #31]
						Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_DIALYSIS_FLOW_CONFIG_UPPER, &dataarray[3]);
   a14e2:	f107 0314 	add.w	r3, r7, #20
   a14e6:	3303      	adds	r3, #3
   a14e8:	2012      	movs	r0, #18
   a14ea:	4619      	mov	r1, r3
   a14ec:	4b40      	ldr	r3, [pc, #256]	; (a15f0 <Cl_Dprep_setdata+0x3b4>)
   a14ee:	4798      	blx	r3
   a14f0:	4603      	mov	r3, r0
   a14f2:	77fb      	strb	r3, [r7, #31]
						Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_DIALYSIS_FLOW_CONFIG_LOWER, &dataarray[5]);		
   a14f4:	f107 0314 	add.w	r3, r7, #20
   a14f8:	3305      	adds	r3, #5
   a14fa:	2013      	movs	r0, #19
   a14fc:	4619      	mov	r1, r3
   a14fe:	4b3c      	ldr	r3, [pc, #240]	; (a15f0 <Cl_Dprep_setdata+0x3b4>)
   a1500:	4798      	blx	r3
   a1502:	4603      	mov	r3, r0
   a1504:	77fb      	strb	r3, [r7, #31]
							
					break;
   a1506:	e23a      	b.n	a197e <Cl_Dprep_setdata+0x742>
					case CON_RX_PARAM_DATA_DIALYSIS_TEMP_CONFIG://0x14
											
											Cl_dprepretcode =sv_nvmsetdata(NV_DIALYSATE_TEMP,&cl_PrepData.bytearray[0],2);
   a1508:	1d3b      	adds	r3, r7, #4
   a150a:	2006      	movs	r0, #6
   a150c:	4619      	mov	r1, r3
   a150e:	2202      	movs	r2, #2
   a1510:	4b36      	ldr	r3, [pc, #216]	; (a15ec <Cl_Dprep_setdata+0x3b0>)
   a1512:	4798      	blx	r3
   a1514:	4603      	mov	r3, r0
   a1516:	77fb      	strb	r3, [r7, #31]
											Cl_dprepretcode =sv_nvmsetdata(NV_DIALYSIS_TEMP_CONFIG_UPPER,&cl_PrepData.bytearray[2],2);
   a1518:	1d3b      	adds	r3, r7, #4
   a151a:	3302      	adds	r3, #2
   a151c:	2014      	movs	r0, #20
   a151e:	4619      	mov	r1, r3
   a1520:	2202      	movs	r2, #2
   a1522:	4b32      	ldr	r3, [pc, #200]	; (a15ec <Cl_Dprep_setdata+0x3b0>)
   a1524:	4798      	blx	r3
   a1526:	4603      	mov	r3, r0
   a1528:	77fb      	strb	r3, [r7, #31]
											Cl_dprepretcode =sv_nvmsetdata(NV_DIALYSIS_TEMP_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   a152a:	1d3b      	adds	r3, r7, #4
   a152c:	3304      	adds	r3, #4
   a152e:	2015      	movs	r0, #21
   a1530:	4619      	mov	r1, r3
   a1532:	2202      	movs	r2, #2
   a1534:	4b2d      	ldr	r3, [pc, #180]	; (a15ec <Cl_Dprep_setdata+0x3b0>)
   a1536:	4798      	blx	r3
   a1538:	4603      	mov	r3, r0
   a153a:	77fb      	strb	r3, [r7, #31]
											
											dataarray[0] = CON_TX_PARAM_DATA_DIALYSIS_TEMP_CONFIG;
   a153c:	2314      	movs	r3, #20
   a153e:	753b      	strb	r3, [r7, #20]
											Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_DIALYSATE_TEMP, &dataarray[1]);
   a1540:	f107 0314 	add.w	r3, r7, #20
   a1544:	3301      	adds	r3, #1
   a1546:	2006      	movs	r0, #6
   a1548:	4619      	mov	r1, r3
   a154a:	4b29      	ldr	r3, [pc, #164]	; (a15f0 <Cl_Dprep_setdata+0x3b4>)
   a154c:	4798      	blx	r3
   a154e:	4603      	mov	r3, r0
   a1550:	77fb      	strb	r3, [r7, #31]
											Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_DIALYSIS_TEMP_CONFIG_UPPER, &dataarray[3]);
   a1552:	f107 0314 	add.w	r3, r7, #20
   a1556:	3303      	adds	r3, #3
   a1558:	2014      	movs	r0, #20
   a155a:	4619      	mov	r1, r3
   a155c:	4b24      	ldr	r3, [pc, #144]	; (a15f0 <Cl_Dprep_setdata+0x3b4>)
   a155e:	4798      	blx	r3
   a1560:	4603      	mov	r3, r0
   a1562:	77fb      	strb	r3, [r7, #31]
											Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_DIALYSIS_TEMP_CONFIG_LOWER, &dataarray[5]);
   a1564:	f107 0314 	add.w	r3, r7, #20
   a1568:	3305      	adds	r3, #5
   a156a:	2015      	movs	r0, #21
   a156c:	4619      	mov	r1, r3
   a156e:	4b20      	ldr	r3, [pc, #128]	; (a15f0 <Cl_Dprep_setdata+0x3b4>)
   a1570:	4798      	blx	r3
   a1572:	4603      	mov	r3, r0
   a1574:	77fb      	strb	r3, [r7, #31]
					break;
   a1576:	e202      	b.n	a197e <Cl_Dprep_setdata+0x742>
					case CON_RX_PARAM_DATA_HEPARIN_RATE_CONFIG://0x15
									Cl_dprepretcode =sv_nvmsetdata(NV_HEPARIN_FLOW_RATE,&cl_PrepData.bytearray[0],2);
   a1578:	1d3b      	adds	r3, r7, #4
   a157a:	200e      	movs	r0, #14
   a157c:	4619      	mov	r1, r3
   a157e:	2202      	movs	r2, #2
   a1580:	4b1a      	ldr	r3, [pc, #104]	; (a15ec <Cl_Dprep_setdata+0x3b0>)
   a1582:	4798      	blx	r3
   a1584:	4603      	mov	r3, r0
   a1586:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_HEPARIN_RATE_CONFIG_UPPER,&cl_PrepData.bytearray[2],2);
   a1588:	1d3b      	adds	r3, r7, #4
   a158a:	3302      	adds	r3, #2
   a158c:	2016      	movs	r0, #22
   a158e:	4619      	mov	r1, r3
   a1590:	2202      	movs	r2, #2
   a1592:	4b16      	ldr	r3, [pc, #88]	; (a15ec <Cl_Dprep_setdata+0x3b0>)
   a1594:	4798      	blx	r3
   a1596:	4603      	mov	r3, r0
   a1598:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_HEPARIN_RATE_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   a159a:	1d3b      	adds	r3, r7, #4
   a159c:	3304      	adds	r3, #4
   a159e:	2017      	movs	r0, #23
   a15a0:	4619      	mov	r1, r3
   a15a2:	2202      	movs	r2, #2
   a15a4:	4b11      	ldr	r3, [pc, #68]	; (a15ec <Cl_Dprep_setdata+0x3b0>)
   a15a6:	4798      	blx	r3
   a15a8:	4603      	mov	r3, r0
   a15aa:	77fb      	strb	r3, [r7, #31]
									
									dataarray[0] = CON_TX_PARAM_DATA_HEPARIN_RATE_CONFIG;
   a15ac:	2315      	movs	r3, #21
   a15ae:	753b      	strb	r3, [r7, #20]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_HEPARIN_FLOW_RATE, &dataarray[1]);
   a15b0:	f107 0314 	add.w	r3, r7, #20
   a15b4:	3301      	adds	r3, #1
   a15b6:	200e      	movs	r0, #14
   a15b8:	4619      	mov	r1, r3
   a15ba:	4b0d      	ldr	r3, [pc, #52]	; (a15f0 <Cl_Dprep_setdata+0x3b4>)
   a15bc:	4798      	blx	r3
   a15be:	4603      	mov	r3, r0
   a15c0:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_HEPARIN_RATE_CONFIG_UPPER, &dataarray[3]);
   a15c2:	f107 0314 	add.w	r3, r7, #20
   a15c6:	3303      	adds	r3, #3
   a15c8:	2016      	movs	r0, #22
   a15ca:	4619      	mov	r1, r3
   a15cc:	4b08      	ldr	r3, [pc, #32]	; (a15f0 <Cl_Dprep_setdata+0x3b4>)
   a15ce:	4798      	blx	r3
   a15d0:	4603      	mov	r3, r0
   a15d2:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_HEPARIN_RATE_CONFIG_LOWER, &dataarray[5]);
   a15d4:	f107 0314 	add.w	r3, r7, #20
   a15d8:	3305      	adds	r3, #5
   a15da:	2017      	movs	r0, #23
   a15dc:	4619      	mov	r1, r3
   a15de:	4b04      	ldr	r3, [pc, #16]	; (a15f0 <Cl_Dprep_setdata+0x3b4>)
   a15e0:	4798      	blx	r3
   a15e2:	4603      	mov	r3, r0
   a15e4:	77fb      	strb	r3, [r7, #31]
					break;
   a15e6:	e1ca      	b.n	a197e <Cl_Dprep_setdata+0x742>
   a15e8:	200723f0 	.word	0x200723f0
   a15ec:	0009a57d 	.word	0x0009a57d
   a15f0:	0009a545 	.word	0x0009a545
					case CON_RX_PARAM_DATA_APT_VALUE_CONFIG://0x16
									Cl_dprepretcode =sv_nvmsetdata(NV_APT_VALUE,&cl_PrepData.bytearray[0],2);
   a15f4:	1d3b      	adds	r3, r7, #4
   a15f6:	2007      	movs	r0, #7
   a15f8:	4619      	mov	r1, r3
   a15fa:	2202      	movs	r2, #2
   a15fc:	4bc1      	ldr	r3, [pc, #772]	; (a1904 <Cl_Dprep_setdata+0x6c8>)
   a15fe:	4798      	blx	r3
   a1600:	4603      	mov	r3, r0
   a1602:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_APT_VALUE_CONFIG_UPPER,&cl_PrepData.bytearray[2],2);
   a1604:	1d3b      	adds	r3, r7, #4
   a1606:	3302      	adds	r3, #2
   a1608:	2018      	movs	r0, #24
   a160a:	4619      	mov	r1, r3
   a160c:	2202      	movs	r2, #2
   a160e:	4bbd      	ldr	r3, [pc, #756]	; (a1904 <Cl_Dprep_setdata+0x6c8>)
   a1610:	4798      	blx	r3
   a1612:	4603      	mov	r3, r0
   a1614:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_APT_VALUE_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   a1616:	1d3b      	adds	r3, r7, #4
   a1618:	3304      	adds	r3, #4
   a161a:	2019      	movs	r0, #25
   a161c:	4619      	mov	r1, r3
   a161e:	2202      	movs	r2, #2
   a1620:	4bb8      	ldr	r3, [pc, #736]	; (a1904 <Cl_Dprep_setdata+0x6c8>)
   a1622:	4798      	blx	r3
   a1624:	4603      	mov	r3, r0
   a1626:	77fb      	strb	r3, [r7, #31]
																
									dataarray[0] = CON_TX_PARAM_DATA_APT_VALUE_CONFIG;
   a1628:	2316      	movs	r3, #22
   a162a:	753b      	strb	r3, [r7, #20]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_APT_VALUE, &dataarray[1]);
   a162c:	f107 0314 	add.w	r3, r7, #20
   a1630:	3301      	adds	r3, #1
   a1632:	2007      	movs	r0, #7
   a1634:	4619      	mov	r1, r3
   a1636:	4bb4      	ldr	r3, [pc, #720]	; (a1908 <Cl_Dprep_setdata+0x6cc>)
   a1638:	4798      	blx	r3
   a163a:	4603      	mov	r3, r0
   a163c:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_APT_VALUE_CONFIG_UPPER, &dataarray[3]);
   a163e:	f107 0314 	add.w	r3, r7, #20
   a1642:	3303      	adds	r3, #3
   a1644:	2018      	movs	r0, #24
   a1646:	4619      	mov	r1, r3
   a1648:	4baf      	ldr	r3, [pc, #700]	; (a1908 <Cl_Dprep_setdata+0x6cc>)
   a164a:	4798      	blx	r3
   a164c:	4603      	mov	r3, r0
   a164e:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_APT_VALUE_CONFIG_LOWER, &dataarray[5]);
   a1650:	f107 0314 	add.w	r3, r7, #20
   a1654:	3305      	adds	r3, #5
   a1656:	2019      	movs	r0, #25
   a1658:	4619      	mov	r1, r3
   a165a:	4bab      	ldr	r3, [pc, #684]	; (a1908 <Cl_Dprep_setdata+0x6cc>)
   a165c:	4798      	blx	r3
   a165e:	4603      	mov	r3, r0
   a1660:	77fb      	strb	r3, [r7, #31]
					break;
   a1662:	e18c      	b.n	a197e <Cl_Dprep_setdata+0x742>
					case CON_RX_PARAM_DATA_VPT_VALUE_CONFIG://0x17
									Cl_dprepretcode =sv_nvmsetdata(NV_VPT_VALUE,&cl_PrepData.bytearray[0],2);
   a1664:	1d3b      	adds	r3, r7, #4
   a1666:	2008      	movs	r0, #8
   a1668:	4619      	mov	r1, r3
   a166a:	2202      	movs	r2, #2
   a166c:	4ba5      	ldr	r3, [pc, #660]	; (a1904 <Cl_Dprep_setdata+0x6c8>)
   a166e:	4798      	blx	r3
   a1670:	4603      	mov	r3, r0
   a1672:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_VPT_VALUE_CONFIG_UPPER,&cl_PrepData.bytearray[2],2);
   a1674:	1d3b      	adds	r3, r7, #4
   a1676:	3302      	adds	r3, #2
   a1678:	201a      	movs	r0, #26
   a167a:	4619      	mov	r1, r3
   a167c:	2202      	movs	r2, #2
   a167e:	4ba1      	ldr	r3, [pc, #644]	; (a1904 <Cl_Dprep_setdata+0x6c8>)
   a1680:	4798      	blx	r3
   a1682:	4603      	mov	r3, r0
   a1684:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_VPT_VALUE_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   a1686:	1d3b      	adds	r3, r7, #4
   a1688:	3304      	adds	r3, #4
   a168a:	201b      	movs	r0, #27
   a168c:	4619      	mov	r1, r3
   a168e:	2202      	movs	r2, #2
   a1690:	4b9c      	ldr	r3, [pc, #624]	; (a1904 <Cl_Dprep_setdata+0x6c8>)
   a1692:	4798      	blx	r3
   a1694:	4603      	mov	r3, r0
   a1696:	77fb      	strb	r3, [r7, #31]
									
									dataarray[0] = CON_TX_PARAM_DATA_VPT_VALUE_CONFIG;
   a1698:	2317      	movs	r3, #23
   a169a:	753b      	strb	r3, [r7, #20]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_VPT_VALUE, &dataarray[1]);
   a169c:	f107 0314 	add.w	r3, r7, #20
   a16a0:	3301      	adds	r3, #1
   a16a2:	2008      	movs	r0, #8
   a16a4:	4619      	mov	r1, r3
   a16a6:	4b98      	ldr	r3, [pc, #608]	; (a1908 <Cl_Dprep_setdata+0x6cc>)
   a16a8:	4798      	blx	r3
   a16aa:	4603      	mov	r3, r0
   a16ac:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_VPT_VALUE_CONFIG_UPPER, &dataarray[3]);
   a16ae:	f107 0314 	add.w	r3, r7, #20
   a16b2:	3303      	adds	r3, #3
   a16b4:	201a      	movs	r0, #26
   a16b6:	4619      	mov	r1, r3
   a16b8:	4b93      	ldr	r3, [pc, #588]	; (a1908 <Cl_Dprep_setdata+0x6cc>)
   a16ba:	4798      	blx	r3
   a16bc:	4603      	mov	r3, r0
   a16be:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_VPT_VALUE_CONFIG_LOWER, &dataarray[5]);
   a16c0:	f107 0314 	add.w	r3, r7, #20
   a16c4:	3305      	adds	r3, #5
   a16c6:	201b      	movs	r0, #27
   a16c8:	4619      	mov	r1, r3
   a16ca:	4b8f      	ldr	r3, [pc, #572]	; (a1908 <Cl_Dprep_setdata+0x6cc>)
   a16cc:	4798      	blx	r3
   a16ce:	4603      	mov	r3, r0
   a16d0:	77fb      	strb	r3, [r7, #31]
					break;
   a16d2:	e154      	b.n	a197e <Cl_Dprep_setdata+0x742>
					case CON_RX_PARAM_DATA_TMP_VALUE_CONFIG://0x18
									Cl_dprepretcode =sv_nvmsetdata(NV_TMP,&cl_PrepData.bytearray[0],2);
   a16d4:	1d3b      	adds	r3, r7, #4
   a16d6:	2009      	movs	r0, #9
   a16d8:	4619      	mov	r1, r3
   a16da:	2202      	movs	r2, #2
   a16dc:	4b89      	ldr	r3, [pc, #548]	; (a1904 <Cl_Dprep_setdata+0x6c8>)
   a16de:	4798      	blx	r3
   a16e0:	4603      	mov	r3, r0
   a16e2:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_TMP_VALUE_CONFIG_UPPER,&cl_PrepData.bytearray[0],2);
   a16e4:	1d3b      	adds	r3, r7, #4
   a16e6:	201c      	movs	r0, #28
   a16e8:	4619      	mov	r1, r3
   a16ea:	2202      	movs	r2, #2
   a16ec:	4b85      	ldr	r3, [pc, #532]	; (a1904 <Cl_Dprep_setdata+0x6c8>)
   a16ee:	4798      	blx	r3
   a16f0:	4603      	mov	r3, r0
   a16f2:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_TMP_VALUE_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   a16f4:	1d3b      	adds	r3, r7, #4
   a16f6:	3304      	adds	r3, #4
   a16f8:	201d      	movs	r0, #29
   a16fa:	4619      	mov	r1, r3
   a16fc:	2202      	movs	r2, #2
   a16fe:	4b81      	ldr	r3, [pc, #516]	; (a1904 <Cl_Dprep_setdata+0x6c8>)
   a1700:	4798      	blx	r3
   a1702:	4603      	mov	r3, r0
   a1704:	77fb      	strb	r3, [r7, #31]
									
									dataarray[0] = CON_TX_PARAM_DATA_TMP_VALUE_CONFIG;
   a1706:	2318      	movs	r3, #24
   a1708:	753b      	strb	r3, [r7, #20]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_TMP, &dataarray[1]);
   a170a:	f107 0314 	add.w	r3, r7, #20
   a170e:	3301      	adds	r3, #1
   a1710:	2009      	movs	r0, #9
   a1712:	4619      	mov	r1, r3
   a1714:	4b7c      	ldr	r3, [pc, #496]	; (a1908 <Cl_Dprep_setdata+0x6cc>)
   a1716:	4798      	blx	r3
   a1718:	4603      	mov	r3, r0
   a171a:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_TMP_VALUE_CONFIG_UPPER, &dataarray[3]);
   a171c:	f107 0314 	add.w	r3, r7, #20
   a1720:	3303      	adds	r3, #3
   a1722:	201c      	movs	r0, #28
   a1724:	4619      	mov	r1, r3
   a1726:	4b78      	ldr	r3, [pc, #480]	; (a1908 <Cl_Dprep_setdata+0x6cc>)
   a1728:	4798      	blx	r3
   a172a:	4603      	mov	r3, r0
   a172c:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_TMP_VALUE_CONFIG_LOWER, &dataarray[5]);
   a172e:	f107 0314 	add.w	r3, r7, #20
   a1732:	3305      	adds	r3, #5
   a1734:	201d      	movs	r0, #29
   a1736:	4619      	mov	r1, r3
   a1738:	4b73      	ldr	r3, [pc, #460]	; (a1908 <Cl_Dprep_setdata+0x6cc>)
   a173a:	4798      	blx	r3
   a173c:	4603      	mov	r3, r0
   a173e:	77fb      	strb	r3, [r7, #31]
					break;
   a1740:	e11d      	b.n	a197e <Cl_Dprep_setdata+0x742>
					case CON_RX_PARAM_DATA_COND_VALUE_CONFIG://0x19
									Cl_dprepretcode =sv_nvmsetdata(NV_CONDUCTIVITY,&cl_PrepData.bytearray[0],2);
   a1742:	1d3b      	adds	r3, r7, #4
   a1744:	200a      	movs	r0, #10
   a1746:	4619      	mov	r1, r3
   a1748:	2202      	movs	r2, #2
   a174a:	4b6e      	ldr	r3, [pc, #440]	; (a1904 <Cl_Dprep_setdata+0x6c8>)
   a174c:	4798      	blx	r3
   a174e:	4603      	mov	r3, r0
   a1750:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_COND_VALUE_CONFIG_UPPER,&cl_PrepData.bytearray[2],2);
   a1752:	1d3b      	adds	r3, r7, #4
   a1754:	3302      	adds	r3, #2
   a1756:	201e      	movs	r0, #30
   a1758:	4619      	mov	r1, r3
   a175a:	2202      	movs	r2, #2
   a175c:	4b69      	ldr	r3, [pc, #420]	; (a1904 <Cl_Dprep_setdata+0x6c8>)
   a175e:	4798      	blx	r3
   a1760:	4603      	mov	r3, r0
   a1762:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_COND_VALUE_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   a1764:	1d3b      	adds	r3, r7, #4
   a1766:	3304      	adds	r3, #4
   a1768:	201f      	movs	r0, #31
   a176a:	4619      	mov	r1, r3
   a176c:	2202      	movs	r2, #2
   a176e:	4b65      	ldr	r3, [pc, #404]	; (a1904 <Cl_Dprep_setdata+0x6c8>)
   a1770:	4798      	blx	r3
   a1772:	4603      	mov	r3, r0
   a1774:	77fb      	strb	r3, [r7, #31]
									
									dataarray[0] = CON_TX_PARAM_DATA_COND_VALUE_CONFIG;
   a1776:	2319      	movs	r3, #25
   a1778:	753b      	strb	r3, [r7, #20]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_CONDUCTIVITY, &dataarray[1]);
   a177a:	f107 0314 	add.w	r3, r7, #20
   a177e:	3301      	adds	r3, #1
   a1780:	200a      	movs	r0, #10
   a1782:	4619      	mov	r1, r3
   a1784:	4b60      	ldr	r3, [pc, #384]	; (a1908 <Cl_Dprep_setdata+0x6cc>)
   a1786:	4798      	blx	r3
   a1788:	4603      	mov	r3, r0
   a178a:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_COND_VALUE_CONFIG_UPPER, &dataarray[3]);
   a178c:	f107 0314 	add.w	r3, r7, #20
   a1790:	3303      	adds	r3, #3
   a1792:	201e      	movs	r0, #30
   a1794:	4619      	mov	r1, r3
   a1796:	4b5c      	ldr	r3, [pc, #368]	; (a1908 <Cl_Dprep_setdata+0x6cc>)
   a1798:	4798      	blx	r3
   a179a:	4603      	mov	r3, r0
   a179c:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_COND_VALUE_CONFIG_LOWER, &dataarray[5]);
   a179e:	f107 0314 	add.w	r3, r7, #20
   a17a2:	3305      	adds	r3, #5
   a17a4:	201f      	movs	r0, #31
   a17a6:	4619      	mov	r1, r3
   a17a8:	4b57      	ldr	r3, [pc, #348]	; (a1908 <Cl_Dprep_setdata+0x6cc>)
   a17aa:	4798      	blx	r3
   a17ac:	4603      	mov	r3, r0
   a17ae:	77fb      	strb	r3, [r7, #31]
					break;
   a17b0:	e0e5      	b.n	a197e <Cl_Dprep_setdata+0x742>
					case CON_RX_PARAM_DATA_UF_RATE_CONFIG://0x1A
									Cl_dprepretcode =sv_nvmsetdata(NV_UF_REMOVAL_RATE,&cl_PrepData.bytearray[0],2);
   a17b2:	1d3b      	adds	r3, r7, #4
   a17b4:	200b      	movs	r0, #11
   a17b6:	4619      	mov	r1, r3
   a17b8:	2202      	movs	r2, #2
   a17ba:	4b52      	ldr	r3, [pc, #328]	; (a1904 <Cl_Dprep_setdata+0x6c8>)
   a17bc:	4798      	blx	r3
   a17be:	4603      	mov	r3, r0
   a17c0:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_UF_RATE_CONFIG_UPPER,&cl_PrepData.bytearray[2],2);
   a17c2:	1d3b      	adds	r3, r7, #4
   a17c4:	3302      	adds	r3, #2
   a17c6:	2020      	movs	r0, #32
   a17c8:	4619      	mov	r1, r3
   a17ca:	2202      	movs	r2, #2
   a17cc:	4b4d      	ldr	r3, [pc, #308]	; (a1904 <Cl_Dprep_setdata+0x6c8>)
   a17ce:	4798      	blx	r3
   a17d0:	4603      	mov	r3, r0
   a17d2:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_UF_RATE_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   a17d4:	1d3b      	adds	r3, r7, #4
   a17d6:	3304      	adds	r3, #4
   a17d8:	2021      	movs	r0, #33	; 0x21
   a17da:	4619      	mov	r1, r3
   a17dc:	2202      	movs	r2, #2
   a17de:	4b49      	ldr	r3, [pc, #292]	; (a1904 <Cl_Dprep_setdata+0x6c8>)
   a17e0:	4798      	blx	r3
   a17e2:	4603      	mov	r3, r0
   a17e4:	77fb      	strb	r3, [r7, #31]
									
									dataarray[0] = CON_TX_PARAM_DATA_UF_RATE_CONFIG;
   a17e6:	231a      	movs	r3, #26
   a17e8:	753b      	strb	r3, [r7, #20]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_UF_REMOVAL_RATE, &dataarray[1]);
   a17ea:	f107 0314 	add.w	r3, r7, #20
   a17ee:	3301      	adds	r3, #1
   a17f0:	200b      	movs	r0, #11
   a17f2:	4619      	mov	r1, r3
   a17f4:	4b44      	ldr	r3, [pc, #272]	; (a1908 <Cl_Dprep_setdata+0x6cc>)
   a17f6:	4798      	blx	r3
   a17f8:	4603      	mov	r3, r0
   a17fa:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_UF_RATE_CONFIG_UPPER, &dataarray[3]);
   a17fc:	f107 0314 	add.w	r3, r7, #20
   a1800:	3303      	adds	r3, #3
   a1802:	2020      	movs	r0, #32
   a1804:	4619      	mov	r1, r3
   a1806:	4b40      	ldr	r3, [pc, #256]	; (a1908 <Cl_Dprep_setdata+0x6cc>)
   a1808:	4798      	blx	r3
   a180a:	4603      	mov	r3, r0
   a180c:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_UF_RATE_CONFIG_LOWER, &dataarray[5]);
   a180e:	f107 0314 	add.w	r3, r7, #20
   a1812:	3305      	adds	r3, #5
   a1814:	2021      	movs	r0, #33	; 0x21
   a1816:	4619      	mov	r1, r3
   a1818:	4b3b      	ldr	r3, [pc, #236]	; (a1908 <Cl_Dprep_setdata+0x6cc>)
   a181a:	4798      	blx	r3
   a181c:	4603      	mov	r3, r0
   a181e:	77fb      	strb	r3, [r7, #31]
					break;
   a1820:	e0ad      	b.n	a197e <Cl_Dprep_setdata+0x742>
					case CON_RX_PARAM_DATA_UF_GOAL_CONFIG://0x1B,
									Cl_dprepretcode =sv_nvmsetdata(NV_UF_GOAL,&cl_PrepData.bytearray[0],2);
   a1822:	1d3b      	adds	r3, r7, #4
   a1824:	200c      	movs	r0, #12
   a1826:	4619      	mov	r1, r3
   a1828:	2202      	movs	r2, #2
   a182a:	4b36      	ldr	r3, [pc, #216]	; (a1904 <Cl_Dprep_setdata+0x6c8>)
   a182c:	4798      	blx	r3
   a182e:	4603      	mov	r3, r0
   a1830:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_UF_GOAL_CONFIG_UPPER,&cl_PrepData.bytearray[2],2);
   a1832:	1d3b      	adds	r3, r7, #4
   a1834:	3302      	adds	r3, #2
   a1836:	2022      	movs	r0, #34	; 0x22
   a1838:	4619      	mov	r1, r3
   a183a:	2202      	movs	r2, #2
   a183c:	4b31      	ldr	r3, [pc, #196]	; (a1904 <Cl_Dprep_setdata+0x6c8>)
   a183e:	4798      	blx	r3
   a1840:	4603      	mov	r3, r0
   a1842:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_UF_GOAL_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   a1844:	1d3b      	adds	r3, r7, #4
   a1846:	3304      	adds	r3, #4
   a1848:	2023      	movs	r0, #35	; 0x23
   a184a:	4619      	mov	r1, r3
   a184c:	2202      	movs	r2, #2
   a184e:	4b2d      	ldr	r3, [pc, #180]	; (a1904 <Cl_Dprep_setdata+0x6c8>)
   a1850:	4798      	blx	r3
   a1852:	4603      	mov	r3, r0
   a1854:	77fb      	strb	r3, [r7, #31]
									
									dataarray[0] = CON_TX_PARAM_DATA_UF_GOAL_CONFIG;
   a1856:	231b      	movs	r3, #27
   a1858:	753b      	strb	r3, [r7, #20]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_UF_GOAL, &dataarray[1]);
   a185a:	f107 0314 	add.w	r3, r7, #20
   a185e:	3301      	adds	r3, #1
   a1860:	200c      	movs	r0, #12
   a1862:	4619      	mov	r1, r3
   a1864:	4b28      	ldr	r3, [pc, #160]	; (a1908 <Cl_Dprep_setdata+0x6cc>)
   a1866:	4798      	blx	r3
   a1868:	4603      	mov	r3, r0
   a186a:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_UF_GOAL_CONFIG_UPPER, &dataarray[3]);
   a186c:	f107 0314 	add.w	r3, r7, #20
   a1870:	3303      	adds	r3, #3
   a1872:	2022      	movs	r0, #34	; 0x22
   a1874:	4619      	mov	r1, r3
   a1876:	4b24      	ldr	r3, [pc, #144]	; (a1908 <Cl_Dprep_setdata+0x6cc>)
   a1878:	4798      	blx	r3
   a187a:	4603      	mov	r3, r0
   a187c:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_UF_GOAL_CONFIG_LOWER, &dataarray[5]);
   a187e:	f107 0314 	add.w	r3, r7, #20
   a1882:	3305      	adds	r3, #5
   a1884:	2023      	movs	r0, #35	; 0x23
   a1886:	4619      	mov	r1, r3
   a1888:	4b1f      	ldr	r3, [pc, #124]	; (a1908 <Cl_Dprep_setdata+0x6cc>)
   a188a:	4798      	blx	r3
   a188c:	4603      	mov	r3, r0
   a188e:	77fb      	strb	r3, [r7, #31]
					break;
   a1890:	e075      	b.n	a197e <Cl_Dprep_setdata+0x742>
					case CON_RX_PARAM_DATA_BOLUS_VOLUME_CONFIG://1C
									Cl_dprepretcode =sv_nvmsetdata(NV_HEPARIN_BOLUS,&cl_PrepData.bytearray[0],2);
   a1892:	1d3b      	adds	r3, r7, #4
   a1894:	200f      	movs	r0, #15
   a1896:	4619      	mov	r1, r3
   a1898:	2202      	movs	r2, #2
   a189a:	4b1a      	ldr	r3, [pc, #104]	; (a1904 <Cl_Dprep_setdata+0x6c8>)
   a189c:	4798      	blx	r3
   a189e:	4603      	mov	r3, r0
   a18a0:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_BOLUS_VOLUME_CONFIG_UPPER,&cl_PrepData.bytearray[2],2);
   a18a2:	1d3b      	adds	r3, r7, #4
   a18a4:	3302      	adds	r3, #2
   a18a6:	2024      	movs	r0, #36	; 0x24
   a18a8:	4619      	mov	r1, r3
   a18aa:	2202      	movs	r2, #2
   a18ac:	4b15      	ldr	r3, [pc, #84]	; (a1904 <Cl_Dprep_setdata+0x6c8>)
   a18ae:	4798      	blx	r3
   a18b0:	4603      	mov	r3, r0
   a18b2:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_BOLUS_VOLUME_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   a18b4:	1d3b      	adds	r3, r7, #4
   a18b6:	3304      	adds	r3, #4
   a18b8:	2025      	movs	r0, #37	; 0x25
   a18ba:	4619      	mov	r1, r3
   a18bc:	2202      	movs	r2, #2
   a18be:	4b11      	ldr	r3, [pc, #68]	; (a1904 <Cl_Dprep_setdata+0x6c8>)
   a18c0:	4798      	blx	r3
   a18c2:	4603      	mov	r3, r0
   a18c4:	77fb      	strb	r3, [r7, #31]
									
									dataarray[0] = CON_TX_PARAM_DATA_BOLUS_VOLUME_CONFIG;
   a18c6:	231c      	movs	r3, #28
   a18c8:	753b      	strb	r3, [r7, #20]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_HEPARIN_BOLUS, &dataarray[1]);
   a18ca:	f107 0314 	add.w	r3, r7, #20
   a18ce:	3301      	adds	r3, #1
   a18d0:	200f      	movs	r0, #15
   a18d2:	4619      	mov	r1, r3
   a18d4:	4b0c      	ldr	r3, [pc, #48]	; (a1908 <Cl_Dprep_setdata+0x6cc>)
   a18d6:	4798      	blx	r3
   a18d8:	4603      	mov	r3, r0
   a18da:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_BOLUS_VOLUME_CONFIG_UPPER, &dataarray[3]);
   a18dc:	f107 0314 	add.w	r3, r7, #20
   a18e0:	3303      	adds	r3, #3
   a18e2:	2024      	movs	r0, #36	; 0x24
   a18e4:	4619      	mov	r1, r3
   a18e6:	4b08      	ldr	r3, [pc, #32]	; (a1908 <Cl_Dprep_setdata+0x6cc>)
   a18e8:	4798      	blx	r3
   a18ea:	4603      	mov	r3, r0
   a18ec:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_BOLUS_VOLUME_CONFIG_LOWER, &dataarray[5]);
   a18ee:	f107 0314 	add.w	r3, r7, #20
   a18f2:	3305      	adds	r3, #5
   a18f4:	2025      	movs	r0, #37	; 0x25
   a18f6:	4619      	mov	r1, r3
   a18f8:	4b03      	ldr	r3, [pc, #12]	; (a1908 <Cl_Dprep_setdata+0x6cc>)
   a18fa:	4798      	blx	r3
   a18fc:	4603      	mov	r3, r0
   a18fe:	77fb      	strb	r3, [r7, #31]
					break;
   a1900:	e03d      	b.n	a197e <Cl_Dprep_setdata+0x742>
   a1902:	bf00      	nop
   a1904:	0009a57d 	.word	0x0009a57d
   a1908:	0009a545 	.word	0x0009a545
					case CON_RX_PARAM_DATA_ABF_RATE_CONFIG://0X1D
									Cl_dprepretcode =sv_nvmsetdata(NV_ARTERIAL_BLOODFLOW_RATE,&cl_PrepData.bytearray[0],2);
   a190c:	1d3b      	adds	r3, r7, #4
   a190e:	200d      	movs	r0, #13
   a1910:	4619      	mov	r1, r3
   a1912:	2202      	movs	r2, #2
   a1914:	4b23      	ldr	r3, [pc, #140]	; (a19a4 <Cl_Dprep_setdata+0x768>)
   a1916:	4798      	blx	r3
   a1918:	4603      	mov	r3, r0
   a191a:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_ABF_RATE_CONFIG_UPPER,&cl_PrepData.bytearray[2],2);
   a191c:	1d3b      	adds	r3, r7, #4
   a191e:	3302      	adds	r3, #2
   a1920:	2026      	movs	r0, #38	; 0x26
   a1922:	4619      	mov	r1, r3
   a1924:	2202      	movs	r2, #2
   a1926:	4b1f      	ldr	r3, [pc, #124]	; (a19a4 <Cl_Dprep_setdata+0x768>)
   a1928:	4798      	blx	r3
   a192a:	4603      	mov	r3, r0
   a192c:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode =sv_nvmsetdata(NV_ABF_RATE_CONFIG_LOWER,&cl_PrepData.bytearray[4],2);
   a192e:	1d3b      	adds	r3, r7, #4
   a1930:	3304      	adds	r3, #4
   a1932:	2027      	movs	r0, #39	; 0x27
   a1934:	4619      	mov	r1, r3
   a1936:	2202      	movs	r2, #2
   a1938:	4b1a      	ldr	r3, [pc, #104]	; (a19a4 <Cl_Dprep_setdata+0x768>)
   a193a:	4798      	blx	r3
   a193c:	4603      	mov	r3, r0
   a193e:	77fb      	strb	r3, [r7, #31]
									
									dataarray[0] = CON_TX_PARAM_DATA_ABF_RATE_CONFIG;
   a1940:	231d      	movs	r3, #29
   a1942:	753b      	strb	r3, [r7, #20]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_ARTERIAL_BLOODFLOW_RATE, &dataarray[1]);
   a1944:	f107 0314 	add.w	r3, r7, #20
   a1948:	3301      	adds	r3, #1
   a194a:	200d      	movs	r0, #13
   a194c:	4619      	mov	r1, r3
   a194e:	4b16      	ldr	r3, [pc, #88]	; (a19a8 <Cl_Dprep_setdata+0x76c>)
   a1950:	4798      	blx	r3
   a1952:	4603      	mov	r3, r0
   a1954:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_ABF_RATE_CONFIG_UPPER, &dataarray[3]);
   a1956:	f107 0314 	add.w	r3, r7, #20
   a195a:	3303      	adds	r3, #3
   a195c:	2026      	movs	r0, #38	; 0x26
   a195e:	4619      	mov	r1, r3
   a1960:	4b11      	ldr	r3, [pc, #68]	; (a19a8 <Cl_Dprep_setdata+0x76c>)
   a1962:	4798      	blx	r3
   a1964:	4603      	mov	r3, r0
   a1966:	77fb      	strb	r3, [r7, #31]
									Cl_dprepretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_ABF_RATE_CONFIG_LOWER, &dataarray[5]);
   a1968:	f107 0314 	add.w	r3, r7, #20
   a196c:	3305      	adds	r3, #5
   a196e:	2027      	movs	r0, #39	; 0x27
   a1970:	4619      	mov	r1, r3
   a1972:	4b0d      	ldr	r3, [pc, #52]	; (a19a8 <Cl_Dprep_setdata+0x76c>)
   a1974:	4798      	blx	r3
   a1976:	4603      	mov	r3, r0
   a1978:	77fb      	strb	r3, [r7, #31]
					break;
   a197a:	e000      	b.n	a197e <Cl_Dprep_setdata+0x742>
					
					 default:
					 break;
   a197c:	bf00      	nop
				}
					command = CON_TX_COMMAND_SYSDATA;
   a197e:	2316      	movs	r3, #22
   a1980:	77bb      	strb	r3, [r7, #30]
					Cl_dprepretcode = Cl_SendDatatoconsole(command,&dataarray,size);
   a1982:	7fb9      	ldrb	r1, [r7, #30]
   a1984:	f107 0214 	add.w	r2, r7, #20
   a1988:	7bbb      	ldrb	r3, [r7, #14]
   a198a:	4608      	mov	r0, r1
   a198c:	4611      	mov	r1, r2
   a198e:	461a      	mov	r2, r3
   a1990:	4b06      	ldr	r3, [pc, #24]	; (a19ac <Cl_Dprep_setdata+0x770>)
   a1992:	4798      	blx	r3
   a1994:	4603      	mov	r3, r0
   a1996:	77fb      	strb	r3, [r7, #31]
	return CL_OK;
   a1998:	2300      	movs	r3, #0
}
   a199a:	4618      	mov	r0, r3
   a199c:	3724      	adds	r7, #36	; 0x24
   a199e:	46bd      	mov	sp, r7
   a19a0:	bd90      	pop	{r4, r7, pc}
   a19a2:	bf00      	nop
   a19a4:	0009a57d 	.word	0x0009a57d
   a19a8:	0009a545 	.word	0x0009a545
   a19ac:	0009ba51 	.word	0x0009ba51

000a19b0 <conf_activate_pressure_alarms>:

conf_activate_pressure_alarms(int dflow){
   a19b0:	b590      	push	{r4, r7, lr}
   a19b2:	b085      	sub	sp, #20
   a19b4:	af02      	add	r7, sp, #8
   a19b6:	6078      	str	r0, [r7, #4]
	
	switch(dflow){
   a19b8:	687b      	ldr	r3, [r7, #4]
   a19ba:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   a19be:	f000 80ab 	beq.w	a1b18 <conf_activate_pressure_alarms+0x168>
   a19c2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   a19c6:	dc04      	bgt.n	a19d2 <conf_activate_pressure_alarms+0x22>
   a19c8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   a19cc:	f000 80f2 	beq.w	a1bb4 <conf_activate_pressure_alarms+0x204>
   a19d0:	e13e      	b.n	a1c50 <conf_activate_pressure_alarms+0x2a0>
   a19d2:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
   a19d6:	d051      	beq.n	a1a7c <conf_activate_pressure_alarms+0xcc>
   a19d8:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   a19dc:	f040 8138 	bne.w	a1c50 <conf_activate_pressure_alarms+0x2a0>
		
		case 800 :
					Cl_AlarmConfigureAlarmType(PS1_HIGH_THRESHOLD,ABOVE,400,0,0);
   a19e0:	2300      	movs	r3, #0
   a19e2:	9300      	str	r3, [sp, #0]
   a19e4:	2015      	movs	r0, #21
   a19e6:	2102      	movs	r1, #2
   a19e8:	4a9b      	ldr	r2, [pc, #620]	; (a1c58 <conf_activate_pressure_alarms+0x2a8>)
   a19ea:	f04f 0300 	mov.w	r3, #0
   a19ee:	4c9b      	ldr	r4, [pc, #620]	; (a1c5c <conf_activate_pressure_alarms+0x2ac>)
   a19f0:	47a0      	blx	r4
					Cl_AlarmConfigureAlarmType(PS2_HIGH_THRESHOLD,ABOVE,400,0,0);
   a19f2:	2300      	movs	r3, #0
   a19f4:	9300      	str	r3, [sp, #0]
   a19f6:	2017      	movs	r0, #23
   a19f8:	2102      	movs	r1, #2
   a19fa:	4a97      	ldr	r2, [pc, #604]	; (a1c58 <conf_activate_pressure_alarms+0x2a8>)
   a19fc:	f04f 0300 	mov.w	r3, #0
   a1a00:	4c96      	ldr	r4, [pc, #600]	; (a1c5c <conf_activate_pressure_alarms+0x2ac>)
   a1a02:	47a0      	blx	r4
					Cl_AlarmConfigureAlarmType(PS3_HIGH_THRESHOLD,ABOVE,2000,0,0);
   a1a04:	2300      	movs	r3, #0
   a1a06:	9300      	str	r3, [sp, #0]
   a1a08:	2027      	movs	r0, #39	; 0x27
   a1a0a:	2102      	movs	r1, #2
   a1a0c:	4a94      	ldr	r2, [pc, #592]	; (a1c60 <conf_activate_pressure_alarms+0x2b0>)
   a1a0e:	f04f 0300 	mov.w	r3, #0
   a1a12:	4c92      	ldr	r4, [pc, #584]	; (a1c5c <conf_activate_pressure_alarms+0x2ac>)
   a1a14:	47a0      	blx	r4
					Cl_AlarmConfigureAlarmType(PS1_LOW_THRESHOLD,BELOW,0,0,0);
   a1a16:	2300      	movs	r3, #0
   a1a18:	9300      	str	r3, [sp, #0]
   a1a1a:	2016      	movs	r0, #22
   a1a1c:	2103      	movs	r1, #3
   a1a1e:	f04f 0200 	mov.w	r2, #0
   a1a22:	f04f 0300 	mov.w	r3, #0
   a1a26:	4c8d      	ldr	r4, [pc, #564]	; (a1c5c <conf_activate_pressure_alarms+0x2ac>)
   a1a28:	47a0      	blx	r4
					Cl_AlarmConfigureAlarmType(PS2_LOW_THRESHOLD,BELOW,0,0,0);
   a1a2a:	2300      	movs	r3, #0
   a1a2c:	9300      	str	r3, [sp, #0]
   a1a2e:	2018      	movs	r0, #24
   a1a30:	2103      	movs	r1, #3
   a1a32:	f04f 0200 	mov.w	r2, #0
   a1a36:	f04f 0300 	mov.w	r3, #0
   a1a3a:	4c88      	ldr	r4, [pc, #544]	; (a1c5c <conf_activate_pressure_alarms+0x2ac>)
   a1a3c:	47a0      	blx	r4
					Cl_AlarmConfigureAlarmType(PS3_LOW_THRESHOLD,BELOW,0,0,0);
   a1a3e:	2300      	movs	r3, #0
   a1a40:	9300      	str	r3, [sp, #0]
   a1a42:	2028      	movs	r0, #40	; 0x28
   a1a44:	2103      	movs	r1, #3
   a1a46:	f04f 0200 	mov.w	r2, #0
   a1a4a:	f04f 0300 	mov.w	r3, #0
   a1a4e:	4c83      	ldr	r4, [pc, #524]	; (a1c5c <conf_activate_pressure_alarms+0x2ac>)
   a1a50:	47a0      	blx	r4
					
					Cl_AlarmActivateAlarms(PS1_HIGH_THRESHOLD,true );
   a1a52:	2015      	movs	r0, #21
   a1a54:	2101      	movs	r1, #1
   a1a56:	4b83      	ldr	r3, [pc, #524]	; (a1c64 <conf_activate_pressure_alarms+0x2b4>)
   a1a58:	4798      	blx	r3
					Cl_AlarmActivateAlarms(PS1_LOW_THRESHOLD,true );
   a1a5a:	2016      	movs	r0, #22
   a1a5c:	2101      	movs	r1, #1
   a1a5e:	4b81      	ldr	r3, [pc, #516]	; (a1c64 <conf_activate_pressure_alarms+0x2b4>)
   a1a60:	4798      	blx	r3
					Cl_AlarmActivateAlarms(PS2_HIGH_THRESHOLD,true );
   a1a62:	2017      	movs	r0, #23
   a1a64:	2101      	movs	r1, #1
   a1a66:	4b7f      	ldr	r3, [pc, #508]	; (a1c64 <conf_activate_pressure_alarms+0x2b4>)
   a1a68:	4798      	blx	r3
					Cl_AlarmActivateAlarms(PS2_LOW_THRESHOLD,true );
   a1a6a:	2018      	movs	r0, #24
   a1a6c:	2101      	movs	r1, #1
   a1a6e:	4b7d      	ldr	r3, [pc, #500]	; (a1c64 <conf_activate_pressure_alarms+0x2b4>)
   a1a70:	4798      	blx	r3
					Cl_AlarmActivateAlarms(PS3_HIGH_THRESHOLD,true );	
   a1a72:	2027      	movs	r0, #39	; 0x27
   a1a74:	2101      	movs	r1, #1
   a1a76:	4b7b      	ldr	r3, [pc, #492]	; (a1c64 <conf_activate_pressure_alarms+0x2b4>)
   a1a78:	4798      	blx	r3
					
					break;
   a1a7a:	e0e9      	b.n	a1c50 <conf_activate_pressure_alarms+0x2a0>
		case 700 :
		Cl_AlarmConfigureAlarmType(PS1_HIGH_THRESHOLD,ABOVE,400,0,0);
   a1a7c:	2300      	movs	r3, #0
   a1a7e:	9300      	str	r3, [sp, #0]
   a1a80:	2015      	movs	r0, #21
   a1a82:	2102      	movs	r1, #2
   a1a84:	4a74      	ldr	r2, [pc, #464]	; (a1c58 <conf_activate_pressure_alarms+0x2a8>)
   a1a86:	f04f 0300 	mov.w	r3, #0
   a1a8a:	4c74      	ldr	r4, [pc, #464]	; (a1c5c <conf_activate_pressure_alarms+0x2ac>)
   a1a8c:	47a0      	blx	r4
		Cl_AlarmConfigureAlarmType(PS2_HIGH_THRESHOLD,ABOVE,400,0,0);
   a1a8e:	2300      	movs	r3, #0
   a1a90:	9300      	str	r3, [sp, #0]
   a1a92:	2017      	movs	r0, #23
   a1a94:	2102      	movs	r1, #2
   a1a96:	4a70      	ldr	r2, [pc, #448]	; (a1c58 <conf_activate_pressure_alarms+0x2a8>)
   a1a98:	f04f 0300 	mov.w	r3, #0
   a1a9c:	4c6f      	ldr	r4, [pc, #444]	; (a1c5c <conf_activate_pressure_alarms+0x2ac>)
   a1a9e:	47a0      	blx	r4
		Cl_AlarmConfigureAlarmType(PS3_HIGH_THRESHOLD,ABOVE,2000,0,0);
   a1aa0:	2300      	movs	r3, #0
   a1aa2:	9300      	str	r3, [sp, #0]
   a1aa4:	2027      	movs	r0, #39	; 0x27
   a1aa6:	2102      	movs	r1, #2
   a1aa8:	4a6d      	ldr	r2, [pc, #436]	; (a1c60 <conf_activate_pressure_alarms+0x2b0>)
   a1aaa:	f04f 0300 	mov.w	r3, #0
   a1aae:	4c6b      	ldr	r4, [pc, #428]	; (a1c5c <conf_activate_pressure_alarms+0x2ac>)
   a1ab0:	47a0      	blx	r4
		Cl_AlarmConfigureAlarmType(PS1_LOW_THRESHOLD,BELOW,0,0,0);
   a1ab2:	2300      	movs	r3, #0
   a1ab4:	9300      	str	r3, [sp, #0]
   a1ab6:	2016      	movs	r0, #22
   a1ab8:	2103      	movs	r1, #3
   a1aba:	f04f 0200 	mov.w	r2, #0
   a1abe:	f04f 0300 	mov.w	r3, #0
   a1ac2:	4c66      	ldr	r4, [pc, #408]	; (a1c5c <conf_activate_pressure_alarms+0x2ac>)
   a1ac4:	47a0      	blx	r4
		Cl_AlarmConfigureAlarmType(PS2_LOW_THRESHOLD,BELOW,0,0,0);
   a1ac6:	2300      	movs	r3, #0
   a1ac8:	9300      	str	r3, [sp, #0]
   a1aca:	2018      	movs	r0, #24
   a1acc:	2103      	movs	r1, #3
   a1ace:	f04f 0200 	mov.w	r2, #0
   a1ad2:	f04f 0300 	mov.w	r3, #0
   a1ad6:	4c61      	ldr	r4, [pc, #388]	; (a1c5c <conf_activate_pressure_alarms+0x2ac>)
   a1ad8:	47a0      	blx	r4
		Cl_AlarmConfigureAlarmType(PS3_LOW_THRESHOLD,BELOW,0,0,0);
   a1ada:	2300      	movs	r3, #0
   a1adc:	9300      	str	r3, [sp, #0]
   a1ade:	2028      	movs	r0, #40	; 0x28
   a1ae0:	2103      	movs	r1, #3
   a1ae2:	f04f 0200 	mov.w	r2, #0
   a1ae6:	f04f 0300 	mov.w	r3, #0
   a1aea:	4c5c      	ldr	r4, [pc, #368]	; (a1c5c <conf_activate_pressure_alarms+0x2ac>)
   a1aec:	47a0      	blx	r4
		
		Cl_AlarmActivateAlarms(PS1_HIGH_THRESHOLD,true );
   a1aee:	2015      	movs	r0, #21
   a1af0:	2101      	movs	r1, #1
   a1af2:	4b5c      	ldr	r3, [pc, #368]	; (a1c64 <conf_activate_pressure_alarms+0x2b4>)
   a1af4:	4798      	blx	r3
		Cl_AlarmActivateAlarms(PS1_LOW_THRESHOLD,true );
   a1af6:	2016      	movs	r0, #22
   a1af8:	2101      	movs	r1, #1
   a1afa:	4b5a      	ldr	r3, [pc, #360]	; (a1c64 <conf_activate_pressure_alarms+0x2b4>)
   a1afc:	4798      	blx	r3
		Cl_AlarmActivateAlarms(PS2_HIGH_THRESHOLD,true );
   a1afe:	2017      	movs	r0, #23
   a1b00:	2101      	movs	r1, #1
   a1b02:	4b58      	ldr	r3, [pc, #352]	; (a1c64 <conf_activate_pressure_alarms+0x2b4>)
   a1b04:	4798      	blx	r3
		Cl_AlarmActivateAlarms(PS2_LOW_THRESHOLD,true );
   a1b06:	2018      	movs	r0, #24
   a1b08:	2101      	movs	r1, #1
   a1b0a:	4b56      	ldr	r3, [pc, #344]	; (a1c64 <conf_activate_pressure_alarms+0x2b4>)
   a1b0c:	4798      	blx	r3
		Cl_AlarmActivateAlarms(PS3_HIGH_THRESHOLD,true );
   a1b0e:	2027      	movs	r0, #39	; 0x27
   a1b10:	2101      	movs	r1, #1
   a1b12:	4b54      	ldr	r3, [pc, #336]	; (a1c64 <conf_activate_pressure_alarms+0x2b4>)
   a1b14:	4798      	blx	r3
		
		break;
   a1b16:	e09b      	b.n	a1c50 <conf_activate_pressure_alarms+0x2a0>
		
		case 500 :
					Cl_AlarmConfigureAlarmType(PS1_HIGH_THRESHOLD,ABOVE,400,0,0);
   a1b18:	2300      	movs	r3, #0
   a1b1a:	9300      	str	r3, [sp, #0]
   a1b1c:	2015      	movs	r0, #21
   a1b1e:	2102      	movs	r1, #2
   a1b20:	4a4d      	ldr	r2, [pc, #308]	; (a1c58 <conf_activate_pressure_alarms+0x2a8>)
   a1b22:	f04f 0300 	mov.w	r3, #0
   a1b26:	4c4d      	ldr	r4, [pc, #308]	; (a1c5c <conf_activate_pressure_alarms+0x2ac>)
   a1b28:	47a0      	blx	r4
					Cl_AlarmConfigureAlarmType(PS2_HIGH_THRESHOLD,ABOVE,400,0,0);
   a1b2a:	2300      	movs	r3, #0
   a1b2c:	9300      	str	r3, [sp, #0]
   a1b2e:	2017      	movs	r0, #23
   a1b30:	2102      	movs	r1, #2
   a1b32:	4a49      	ldr	r2, [pc, #292]	; (a1c58 <conf_activate_pressure_alarms+0x2a8>)
   a1b34:	f04f 0300 	mov.w	r3, #0
   a1b38:	4c48      	ldr	r4, [pc, #288]	; (a1c5c <conf_activate_pressure_alarms+0x2ac>)
   a1b3a:	47a0      	blx	r4
					Cl_AlarmConfigureAlarmType(PS3_HIGH_THRESHOLD,ABOVE,2000,0,0);
   a1b3c:	2300      	movs	r3, #0
   a1b3e:	9300      	str	r3, [sp, #0]
   a1b40:	2027      	movs	r0, #39	; 0x27
   a1b42:	2102      	movs	r1, #2
   a1b44:	4a46      	ldr	r2, [pc, #280]	; (a1c60 <conf_activate_pressure_alarms+0x2b0>)
   a1b46:	f04f 0300 	mov.w	r3, #0
   a1b4a:	4c44      	ldr	r4, [pc, #272]	; (a1c5c <conf_activate_pressure_alarms+0x2ac>)
   a1b4c:	47a0      	blx	r4
					Cl_AlarmConfigureAlarmType(PS1_LOW_THRESHOLD,BELOW,0,0,0);
   a1b4e:	2300      	movs	r3, #0
   a1b50:	9300      	str	r3, [sp, #0]
   a1b52:	2016      	movs	r0, #22
   a1b54:	2103      	movs	r1, #3
   a1b56:	f04f 0200 	mov.w	r2, #0
   a1b5a:	f04f 0300 	mov.w	r3, #0
   a1b5e:	4c3f      	ldr	r4, [pc, #252]	; (a1c5c <conf_activate_pressure_alarms+0x2ac>)
   a1b60:	47a0      	blx	r4
					Cl_AlarmConfigureAlarmType(PS2_LOW_THRESHOLD,BELOW,0,0,0);
   a1b62:	2300      	movs	r3, #0
   a1b64:	9300      	str	r3, [sp, #0]
   a1b66:	2018      	movs	r0, #24
   a1b68:	2103      	movs	r1, #3
   a1b6a:	f04f 0200 	mov.w	r2, #0
   a1b6e:	f04f 0300 	mov.w	r3, #0
   a1b72:	4c3a      	ldr	r4, [pc, #232]	; (a1c5c <conf_activate_pressure_alarms+0x2ac>)
   a1b74:	47a0      	blx	r4
					Cl_AlarmConfigureAlarmType(PS3_LOW_THRESHOLD,BELOW,0,0,0);
   a1b76:	2300      	movs	r3, #0
   a1b78:	9300      	str	r3, [sp, #0]
   a1b7a:	2028      	movs	r0, #40	; 0x28
   a1b7c:	2103      	movs	r1, #3
   a1b7e:	f04f 0200 	mov.w	r2, #0
   a1b82:	f04f 0300 	mov.w	r3, #0
   a1b86:	4c35      	ldr	r4, [pc, #212]	; (a1c5c <conf_activate_pressure_alarms+0x2ac>)
   a1b88:	47a0      	blx	r4
					
					Cl_AlarmActivateAlarms(PS1_HIGH_THRESHOLD,false );
   a1b8a:	2015      	movs	r0, #21
   a1b8c:	2100      	movs	r1, #0
   a1b8e:	4b35      	ldr	r3, [pc, #212]	; (a1c64 <conf_activate_pressure_alarms+0x2b4>)
   a1b90:	4798      	blx	r3
					Cl_AlarmActivateAlarms(PS1_LOW_THRESHOLD,false );
   a1b92:	2016      	movs	r0, #22
   a1b94:	2100      	movs	r1, #0
   a1b96:	4b33      	ldr	r3, [pc, #204]	; (a1c64 <conf_activate_pressure_alarms+0x2b4>)
   a1b98:	4798      	blx	r3
					Cl_AlarmActivateAlarms(PS2_HIGH_THRESHOLD,false );
   a1b9a:	2017      	movs	r0, #23
   a1b9c:	2100      	movs	r1, #0
   a1b9e:	4b31      	ldr	r3, [pc, #196]	; (a1c64 <conf_activate_pressure_alarms+0x2b4>)
   a1ba0:	4798      	blx	r3
					Cl_AlarmActivateAlarms(PS2_LOW_THRESHOLD,false );
   a1ba2:	2018      	movs	r0, #24
   a1ba4:	2100      	movs	r1, #0
   a1ba6:	4b2f      	ldr	r3, [pc, #188]	; (a1c64 <conf_activate_pressure_alarms+0x2b4>)
   a1ba8:	4798      	blx	r3
					Cl_AlarmActivateAlarms(PS3_HIGH_THRESHOLD,false );
   a1baa:	2027      	movs	r0, #39	; 0x27
   a1bac:	2100      	movs	r1, #0
   a1bae:	4b2d      	ldr	r3, [pc, #180]	; (a1c64 <conf_activate_pressure_alarms+0x2b4>)
   a1bb0:	4798      	blx	r3
					break;
   a1bb2:	e04d      	b.n	a1c50 <conf_activate_pressure_alarms+0x2a0>
		case 300 :
					Cl_AlarmConfigureAlarmType(PS1_HIGH_THRESHOLD,ABOVE,400,0,0);
   a1bb4:	2300      	movs	r3, #0
   a1bb6:	9300      	str	r3, [sp, #0]
   a1bb8:	2015      	movs	r0, #21
   a1bba:	2102      	movs	r1, #2
   a1bbc:	4a26      	ldr	r2, [pc, #152]	; (a1c58 <conf_activate_pressure_alarms+0x2a8>)
   a1bbe:	f04f 0300 	mov.w	r3, #0
   a1bc2:	4c26      	ldr	r4, [pc, #152]	; (a1c5c <conf_activate_pressure_alarms+0x2ac>)
   a1bc4:	47a0      	blx	r4
					Cl_AlarmConfigureAlarmType(PS2_HIGH_THRESHOLD,ABOVE,400,0,0);
   a1bc6:	2300      	movs	r3, #0
   a1bc8:	9300      	str	r3, [sp, #0]
   a1bca:	2017      	movs	r0, #23
   a1bcc:	2102      	movs	r1, #2
   a1bce:	4a22      	ldr	r2, [pc, #136]	; (a1c58 <conf_activate_pressure_alarms+0x2a8>)
   a1bd0:	f04f 0300 	mov.w	r3, #0
   a1bd4:	4c21      	ldr	r4, [pc, #132]	; (a1c5c <conf_activate_pressure_alarms+0x2ac>)
   a1bd6:	47a0      	blx	r4
					Cl_AlarmConfigureAlarmType(PS3_HIGH_THRESHOLD,ABOVE,2000,0,0);
   a1bd8:	2300      	movs	r3, #0
   a1bda:	9300      	str	r3, [sp, #0]
   a1bdc:	2027      	movs	r0, #39	; 0x27
   a1bde:	2102      	movs	r1, #2
   a1be0:	4a1f      	ldr	r2, [pc, #124]	; (a1c60 <conf_activate_pressure_alarms+0x2b0>)
   a1be2:	f04f 0300 	mov.w	r3, #0
   a1be6:	4c1d      	ldr	r4, [pc, #116]	; (a1c5c <conf_activate_pressure_alarms+0x2ac>)
   a1be8:	47a0      	blx	r4
					Cl_AlarmConfigureAlarmType(PS1_LOW_THRESHOLD,BELOW,0,0,0);
   a1bea:	2300      	movs	r3, #0
   a1bec:	9300      	str	r3, [sp, #0]
   a1bee:	2016      	movs	r0, #22
   a1bf0:	2103      	movs	r1, #3
   a1bf2:	f04f 0200 	mov.w	r2, #0
   a1bf6:	f04f 0300 	mov.w	r3, #0
   a1bfa:	4c18      	ldr	r4, [pc, #96]	; (a1c5c <conf_activate_pressure_alarms+0x2ac>)
   a1bfc:	47a0      	blx	r4
					Cl_AlarmConfigureAlarmType(PS2_LOW_THRESHOLD,BELOW,0,0,0);
   a1bfe:	2300      	movs	r3, #0
   a1c00:	9300      	str	r3, [sp, #0]
   a1c02:	2018      	movs	r0, #24
   a1c04:	2103      	movs	r1, #3
   a1c06:	f04f 0200 	mov.w	r2, #0
   a1c0a:	f04f 0300 	mov.w	r3, #0
   a1c0e:	4c13      	ldr	r4, [pc, #76]	; (a1c5c <conf_activate_pressure_alarms+0x2ac>)
   a1c10:	47a0      	blx	r4
					Cl_AlarmConfigureAlarmType(PS3_LOW_THRESHOLD,BELOW,0,0,0);
   a1c12:	2300      	movs	r3, #0
   a1c14:	9300      	str	r3, [sp, #0]
   a1c16:	2028      	movs	r0, #40	; 0x28
   a1c18:	2103      	movs	r1, #3
   a1c1a:	f04f 0200 	mov.w	r2, #0
   a1c1e:	f04f 0300 	mov.w	r3, #0
   a1c22:	4c0e      	ldr	r4, [pc, #56]	; (a1c5c <conf_activate_pressure_alarms+0x2ac>)
   a1c24:	47a0      	blx	r4
					
					Cl_AlarmActivateAlarms(PS1_HIGH_THRESHOLD,true );
   a1c26:	2015      	movs	r0, #21
   a1c28:	2101      	movs	r1, #1
   a1c2a:	4b0e      	ldr	r3, [pc, #56]	; (a1c64 <conf_activate_pressure_alarms+0x2b4>)
   a1c2c:	4798      	blx	r3
					Cl_AlarmActivateAlarms(PS1_LOW_THRESHOLD,true );
   a1c2e:	2016      	movs	r0, #22
   a1c30:	2101      	movs	r1, #1
   a1c32:	4b0c      	ldr	r3, [pc, #48]	; (a1c64 <conf_activate_pressure_alarms+0x2b4>)
   a1c34:	4798      	blx	r3
					Cl_AlarmActivateAlarms(PS2_HIGH_THRESHOLD,true );
   a1c36:	2017      	movs	r0, #23
   a1c38:	2101      	movs	r1, #1
   a1c3a:	4b0a      	ldr	r3, [pc, #40]	; (a1c64 <conf_activate_pressure_alarms+0x2b4>)
   a1c3c:	4798      	blx	r3
					Cl_AlarmActivateAlarms(PS2_LOW_THRESHOLD,true );
   a1c3e:	2018      	movs	r0, #24
   a1c40:	2101      	movs	r1, #1
   a1c42:	4b08      	ldr	r3, [pc, #32]	; (a1c64 <conf_activate_pressure_alarms+0x2b4>)
   a1c44:	4798      	blx	r3
					Cl_AlarmActivateAlarms(PS3_HIGH_THRESHOLD,true );
   a1c46:	2027      	movs	r0, #39	; 0x27
   a1c48:	2101      	movs	r1, #1
   a1c4a:	4b06      	ldr	r3, [pc, #24]	; (a1c64 <conf_activate_pressure_alarms+0x2b4>)
   a1c4c:	4798      	blx	r3
					break;
   a1c4e:	bf00      	nop
		
		
		
	}
	
}
   a1c50:	4618      	mov	r0, r3
   a1c52:	370c      	adds	r7, #12
   a1c54:	46bd      	mov	sp, r7
   a1c56:	bd90      	pop	{r4, r7, pc}
   a1c58:	43c80000 	.word	0x43c80000
   a1c5c:	00082e09 	.word	0x00082e09
   a1c60:	44fa0000 	.word	0x44fa0000
   a1c64:	00082e61 	.word	0x00082e61

000a1c68 <Cl_Dprep_StartPreparation>:



Cl_ReturnCodeType	Cl_Dprep_StartPreparation(void)
	{
   a1c68:	b590      	push	{r4, r7, lr}
   a1c6a:	b089      	sub	sp, #36	; 0x24
   a1c6c:	af02      	add	r7, sp, #8
		
			Cl_ReturnCodeType Cl_dprepretcode = CL_OK;
   a1c6e:	2300      	movs	r3, #0
   a1c70:	75bb      	strb	r3, [r7, #22]
			Cl_Uint8Type data =0;
   a1c72:	2300      	movs	r3, #0
   a1c74:	737b      	strb	r3, [r7, #13]
			Cl_Uint16Type cl_dprep_acidstatus = 0, cl_dprep_bicarbstatus =0 , cl_dprep_holder1status = 0 , cl_dprep_holder2status = 0;
   a1c76:	2300      	movs	r3, #0
   a1c78:	817b      	strh	r3, [r7, #10]
   a1c7a:	2300      	movs	r3, #0
   a1c7c:	813b      	strh	r3, [r7, #8]
   a1c7e:	2300      	movs	r3, #0
   a1c80:	80fb      	strh	r3, [r7, #6]
   a1c82:	2300      	movs	r3, #0
   a1c84:	80bb      	strh	r3, [r7, #4]
			Cl_BoolType Cl_dprepreaduinessflag = true;
   a1c86:	2301      	movs	r3, #1
   a1c88:	75fb      	strb	r3, [r7, #23]
					
				//Check for  dprep readiness and alarm status
				
				//Cl_checkdprepReadyness();
 				Cl_SysStat_GetSensor_Status_Query(SENSOR_ACID_INLET,&cl_dprep_acidstatus);
   a1c8a:	f107 030a 	add.w	r3, r7, #10
   a1c8e:	2020      	movs	r0, #32
   a1c90:	4619      	mov	r1, r3
   a1c92:	4bb4      	ldr	r3, [pc, #720]	; (a1f64 <Cl_Dprep_StartPreparation+0x2fc>)
   a1c94:	4798      	blx	r3
 				Cl_SysStat_GetSensor_Status_Query(SENSOR_BICARB_INLET,&cl_dprep_bicarbstatus);
   a1c96:	f107 0308 	add.w	r3, r7, #8
   a1c9a:	2021      	movs	r0, #33	; 0x21
   a1c9c:	4619      	mov	r1, r3
   a1c9e:	4bb1      	ldr	r3, [pc, #708]	; (a1f64 <Cl_Dprep_StartPreparation+0x2fc>)
   a1ca0:	4798      	blx	r3
 				Cl_SysStat_GetSensor_Status_Query(SENSOR_HOLDER1STATUS,&cl_dprep_holder1status);
   a1ca2:	1dbb      	adds	r3, r7, #6
   a1ca4:	2003      	movs	r0, #3
   a1ca6:	4619      	mov	r1, r3
   a1ca8:	4bae      	ldr	r3, [pc, #696]	; (a1f64 <Cl_Dprep_StartPreparation+0x2fc>)
   a1caa:	4798      	blx	r3
 				Cl_SysStat_GetSensor_Status_Query(SENSOR_HOLDER2STATUS,&cl_dprep_holder2status);
   a1cac:	1d3b      	adds	r3, r7, #4
   a1cae:	2004      	movs	r0, #4
   a1cb0:	4619      	mov	r1, r3
   a1cb2:	4bac      	ldr	r3, [pc, #688]	; (a1f64 <Cl_Dprep_StartPreparation+0x2fc>)
   a1cb4:	4798      	blx	r3
 				 if(cl_dprep_acidstatus == ACID_INLET_CLOSED )
   a1cb6:	897b      	ldrh	r3, [r7, #10]
   a1cb8:	2b01      	cmp	r3, #1
   a1cba:	d104      	bne.n	a1cc6 <Cl_Dprep_StartPreparation+0x5e>
 				 {
 					 Cl_dprepSendAlarm(ACID_IN_CLOSED);
   a1cbc:	202a      	movs	r0, #42	; 0x2a
   a1cbe:	4baa      	ldr	r3, [pc, #680]	; (a1f68 <Cl_Dprep_StartPreparation+0x300>)
   a1cc0:	4798      	blx	r3
 					 Cl_dprepreaduinessflag = false;
   a1cc2:	2300      	movs	r3, #0
   a1cc4:	75fb      	strb	r3, [r7, #23]
 				 }
 				 if(cl_dprep_bicarbstatus == BICARB_INLET_CLOSED )
   a1cc6:	893b      	ldrh	r3, [r7, #8]
   a1cc8:	2b01      	cmp	r3, #1
   a1cca:	d104      	bne.n	a1cd6 <Cl_Dprep_StartPreparation+0x6e>
 				 {
 					  Cl_dprepSendAlarm(BICARB_IN_CLOSED);
   a1ccc:	202c      	movs	r0, #44	; 0x2c
   a1cce:	4ba6      	ldr	r3, [pc, #664]	; (a1f68 <Cl_Dprep_StartPreparation+0x300>)
   a1cd0:	4798      	blx	r3
 					 Cl_dprepreaduinessflag = false;
   a1cd2:	2300      	movs	r3, #0
   a1cd4:	75fb      	strb	r3, [r7, #23]
 				 }	
			//	 #if 0
				 if(cl_dprep_holder1status == CL_HOLDER1OPEN )
   a1cd6:	88fb      	ldrh	r3, [r7, #6]
   a1cd8:	2b01      	cmp	r3, #1
   a1cda:	d104      	bne.n	a1ce6 <Cl_Dprep_StartPreparation+0x7e>
				 {
					 Cl_dprepSendAlarm(HOLDER1STATUS_OPEN);
   a1cdc:	2003      	movs	r0, #3
   a1cde:	4ba2      	ldr	r3, [pc, #648]	; (a1f68 <Cl_Dprep_StartPreparation+0x300>)
   a1ce0:	4798      	blx	r3
					 Cl_dprepreaduinessflag = false;
   a1ce2:	2300      	movs	r3, #0
   a1ce4:	75fb      	strb	r3, [r7, #23]
				 }
				 if(cl_dprep_holder2status == CL_HOLDER1OPEN )
   a1ce6:	88bb      	ldrh	r3, [r7, #4]
   a1ce8:	2b01      	cmp	r3, #1
   a1cea:	d104      	bne.n	a1cf6 <Cl_Dprep_StartPreparation+0x8e>
				 {
					 Cl_dprepSendAlarm(HOLDER2STATUS_OPEN);
   a1cec:	2004      	movs	r0, #4
   a1cee:	4b9e      	ldr	r3, [pc, #632]	; (a1f68 <Cl_Dprep_StartPreparation+0x300>)
   a1cf0:	4798      	blx	r3
					 Cl_dprepreaduinessflag = false;
   a1cf2:	2300      	movs	r3, #0
   a1cf4:	75fb      	strb	r3, [r7, #23]
				 }		
			//	 #endif		 
				 if(Cl_dprepreaduinessflag == false)
   a1cf6:	7dfb      	ldrb	r3, [r7, #23]
   a1cf8:	f083 0301 	eor.w	r3, r3, #1
   a1cfc:	b2db      	uxtb	r3, r3
   a1cfe:	2b00      	cmp	r3, #0
   a1d00:	d001      	beq.n	a1d06 <Cl_Dprep_StartPreparation+0x9e>
				 {
					 return CL_REJECTED;
   a1d02:	2303      	movs	r3, #3
   a1d04:	e1a3      	b.n	a204e <Cl_Dprep_StartPreparation+0x3e6>
				 }
				 	
							sv_cntrl_resetgreenalarm();					
   a1d06:	4b99      	ldr	r3, [pc, #612]	; (a1f6c <Cl_Dprep_StartPreparation+0x304>)
   a1d08:	4798      	blx	r3
							Cl_dprepretcode = Cl_DprepSelectDialysateInlet();
   a1d0a:	4b99      	ldr	r3, [pc, #612]	; (a1f70 <Cl_Dprep_StartPreparation+0x308>)
   a1d0c:	4798      	blx	r3
   a1d0e:	4603      	mov	r3, r0
   a1d10:	75bb      	strb	r3, [r7, #22]
							//Cl_DprepFlowOn();
							Cl_Dprep_ResetAlertsforReassertion();
   a1d12:	4b98      	ldr	r3, [pc, #608]	; (a1f74 <Cl_Dprep_StartPreparation+0x30c>)
   a1d14:	4798      	blx	r3
							data = 1;
   a1d16:	2301      	movs	r3, #1
   a1d18:	737b      	strb	r3, [r7, #13]
							Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DLSIS_PREP_CNFRM,&data,0);	
   a1d1a:	f107 030d 	add.w	r3, r7, #13
   a1d1e:	200c      	movs	r0, #12
   a1d20:	4619      	mov	r1, r3
   a1d22:	2200      	movs	r2, #0
   a1d24:	4b94      	ldr	r3, [pc, #592]	; (a1f78 <Cl_Dprep_StartPreparation+0x310>)
   a1d26:	4798      	blx	r3
   a1d28:	4603      	mov	r3, r0
   a1d2a:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSATE_FILLING_STARTED,&data,0);																			
   a1d2c:	f107 030d 	add.w	r3, r7, #13
   a1d30:	201e      	movs	r0, #30
   a1d32:	4619      	mov	r1, r3
   a1d34:	2200      	movs	r2, #0
   a1d36:	4b90      	ldr	r3, [pc, #576]	; (a1f78 <Cl_Dprep_StartPreparation+0x310>)
   a1d38:	4798      	blx	r3
   a1d3a:	4603      	mov	r3, r0
   a1d3c:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode = cl_flow_switchcontroller(FLOW_SWITCH_CNTRLER_EVENT_START);
   a1d3e:	2001      	movs	r0, #1
   a1d40:	4b8e      	ldr	r3, [pc, #568]	; (a1f7c <Cl_Dprep_StartPreparation+0x314>)
   a1d42:	4798      	blx	r3
   a1d44:	4603      	mov	r3, r0
   a1d46:	75bb      	strb	r3, [r7, #22]
				
				
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(ACID_IN_CLOSED,LOGIC_HIGH,0,0,0);
   a1d48:	2300      	movs	r3, #0
   a1d4a:	9300      	str	r3, [sp, #0]
   a1d4c:	202a      	movs	r0, #42	; 0x2a
   a1d4e:	2101      	movs	r1, #1
   a1d50:	f04f 0200 	mov.w	r2, #0
   a1d54:	f04f 0300 	mov.w	r3, #0
   a1d58:	4c89      	ldr	r4, [pc, #548]	; (a1f80 <Cl_Dprep_StartPreparation+0x318>)
   a1d5a:	47a0      	blx	r4
   a1d5c:	4603      	mov	r3, r0
   a1d5e:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(BICARB_IN_CLOSED,LOGIC_HIGH,0,0,0);
   a1d60:	2300      	movs	r3, #0
   a1d62:	9300      	str	r3, [sp, #0]
   a1d64:	202c      	movs	r0, #44	; 0x2c
   a1d66:	2101      	movs	r1, #1
   a1d68:	f04f 0200 	mov.w	r2, #0
   a1d6c:	f04f 0300 	mov.w	r3, #0
   a1d70:	4c83      	ldr	r4, [pc, #524]	; (a1f80 <Cl_Dprep_StartPreparation+0x318>)
   a1d72:	47a0      	blx	r4
   a1d74:	4603      	mov	r3, r0
   a1d76:	75bb      	strb	r3, [r7, #22]
							//Cl_dprepretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true );
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(HOLDER2STATUS_OPEN,LOGIC_HIGH,0,0,0);
   a1d78:	2300      	movs	r3, #0
   a1d7a:	9300      	str	r3, [sp, #0]
   a1d7c:	2004      	movs	r0, #4
   a1d7e:	2101      	movs	r1, #1
   a1d80:	f04f 0200 	mov.w	r2, #0
   a1d84:	f04f 0300 	mov.w	r3, #0
   a1d88:	4c7d      	ldr	r4, [pc, #500]	; (a1f80 <Cl_Dprep_StartPreparation+0x318>)
   a1d8a:	47a0      	blx	r4
   a1d8c:	4603      	mov	r3, r0
   a1d8e:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(HOLDER1STATUS_OPEN,LOGIC_HIGH,0,0,0);
   a1d90:	2300      	movs	r3, #0
   a1d92:	9300      	str	r3, [sp, #0]
   a1d94:	2003      	movs	r0, #3
   a1d96:	2101      	movs	r1, #1
   a1d98:	f04f 0200 	mov.w	r2, #0
   a1d9c:	f04f 0300 	mov.w	r3, #0
   a1da0:	4c77      	ldr	r4, [pc, #476]	; (a1f80 <Cl_Dprep_StartPreparation+0x318>)
   a1da2:	47a0      	blx	r4
   a1da4:	4603      	mov	r3, r0
   a1da6:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(COND_STATUS_HIGH,ABOVE,17,0,0);
   a1da8:	2300      	movs	r3, #0
   a1daa:	9300      	str	r3, [sp, #0]
   a1dac:	2008      	movs	r0, #8
   a1dae:	2102      	movs	r1, #2
   a1db0:	4a74      	ldr	r2, [pc, #464]	; (a1f84 <Cl_Dprep_StartPreparation+0x31c>)
   a1db2:	f04f 0300 	mov.w	r3, #0
   a1db6:	4c72      	ldr	r4, [pc, #456]	; (a1f80 <Cl_Dprep_StartPreparation+0x318>)
   a1db8:	47a0      	blx	r4
   a1dba:	4603      	mov	r3, r0
   a1dbc:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(COND_STATUS_LOW,BELOW,0,0,0);
   a1dbe:	2300      	movs	r3, #0
   a1dc0:	9300      	str	r3, [sp, #0]
   a1dc2:	2007      	movs	r0, #7
   a1dc4:	2103      	movs	r1, #3
   a1dc6:	f04f 0200 	mov.w	r2, #0
   a1dca:	f04f 0300 	mov.w	r3, #0
   a1dce:	4c6c      	ldr	r4, [pc, #432]	; (a1f80 <Cl_Dprep_StartPreparation+0x318>)
   a1dd0:	47a0      	blx	r4
   a1dd2:	4603      	mov	r3, r0
   a1dd4:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(TEMP1_HIGH_THRESHOLD,ABOVE,40,0,0);
   a1dd6:	2300      	movs	r3, #0
   a1dd8:	9300      	str	r3, [sp, #0]
   a1dda:	200f      	movs	r0, #15
   a1ddc:	2102      	movs	r1, #2
   a1dde:	4a6a      	ldr	r2, [pc, #424]	; (a1f88 <Cl_Dprep_StartPreparation+0x320>)
   a1de0:	f04f 0300 	mov.w	r3, #0
   a1de4:	4c66      	ldr	r4, [pc, #408]	; (a1f80 <Cl_Dprep_StartPreparation+0x318>)
   a1de6:	47a0      	blx	r4
   a1de8:	4603      	mov	r3, r0
   a1dea:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(TEMP2_HIGH_THRESHOLD,ABOVE,40,0,0);
   a1dec:	2300      	movs	r3, #0
   a1dee:	9300      	str	r3, [sp, #0]
   a1df0:	2011      	movs	r0, #17
   a1df2:	2102      	movs	r1, #2
   a1df4:	4a64      	ldr	r2, [pc, #400]	; (a1f88 <Cl_Dprep_StartPreparation+0x320>)
   a1df6:	f04f 0300 	mov.w	r3, #0
   a1dfa:	4c61      	ldr	r4, [pc, #388]	; (a1f80 <Cl_Dprep_StartPreparation+0x318>)
   a1dfc:	47a0      	blx	r4
   a1dfe:	4603      	mov	r3, r0
   a1e00:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(TEMP3_HIGH_THRESHOLD,ABOVE,40,0,0);
   a1e02:	2300      	movs	r3, #0
   a1e04:	9300      	str	r3, [sp, #0]
   a1e06:	2013      	movs	r0, #19
   a1e08:	2102      	movs	r1, #2
   a1e0a:	4a5f      	ldr	r2, [pc, #380]	; (a1f88 <Cl_Dprep_StartPreparation+0x320>)
   a1e0c:	f04f 0300 	mov.w	r3, #0
   a1e10:	4c5b      	ldr	r4, [pc, #364]	; (a1f80 <Cl_Dprep_StartPreparation+0x318>)
   a1e12:	47a0      	blx	r4
   a1e14:	4603      	mov	r3, r0
   a1e16:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(TEMP1_LOW_THRESHOLD,BELOW,0,0,0);
   a1e18:	2300      	movs	r3, #0
   a1e1a:	9300      	str	r3, [sp, #0]
   a1e1c:	2010      	movs	r0, #16
   a1e1e:	2103      	movs	r1, #3
   a1e20:	f04f 0200 	mov.w	r2, #0
   a1e24:	f04f 0300 	mov.w	r3, #0
   a1e28:	4c55      	ldr	r4, [pc, #340]	; (a1f80 <Cl_Dprep_StartPreparation+0x318>)
   a1e2a:	47a0      	blx	r4
   a1e2c:	4603      	mov	r3, r0
   a1e2e:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(TEMP2_LOW_THRESHOLD,BELOW,0,0,0);
   a1e30:	2300      	movs	r3, #0
   a1e32:	9300      	str	r3, [sp, #0]
   a1e34:	2012      	movs	r0, #18
   a1e36:	2103      	movs	r1, #3
   a1e38:	f04f 0200 	mov.w	r2, #0
   a1e3c:	f04f 0300 	mov.w	r3, #0
   a1e40:	4c4f      	ldr	r4, [pc, #316]	; (a1f80 <Cl_Dprep_StartPreparation+0x318>)
   a1e42:	47a0      	blx	r4
   a1e44:	4603      	mov	r3, r0
   a1e46:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(TEMP3_LOW_THRESHOLD,BELOW,0,0,0);
   a1e48:	2300      	movs	r3, #0
   a1e4a:	9300      	str	r3, [sp, #0]
   a1e4c:	2014      	movs	r0, #20
   a1e4e:	2103      	movs	r1, #3
   a1e50:	f04f 0200 	mov.w	r2, #0
   a1e54:	f04f 0300 	mov.w	r3, #0
   a1e58:	4c49      	ldr	r4, [pc, #292]	; (a1f80 <Cl_Dprep_StartPreparation+0x318>)
   a1e5a:	47a0      	blx	r4
   a1e5c:	4603      	mov	r3, r0
   a1e5e:	75bb      	strb	r3, [r7, #22]
						
							
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(FLOW_LOW_FLOWRATE,0,0,0,0);
   a1e60:	2300      	movs	r3, #0
   a1e62:	9300      	str	r3, [sp, #0]
   a1e64:	200d      	movs	r0, #13
   a1e66:	2100      	movs	r1, #0
   a1e68:	f04f 0200 	mov.w	r2, #0
   a1e6c:	f04f 0300 	mov.w	r3, #0
   a1e70:	4c43      	ldr	r4, [pc, #268]	; (a1f80 <Cl_Dprep_StartPreparation+0x318>)
   a1e72:	47a0      	blx	r4
   a1e74:	4603      	mov	r3, r0
   a1e76:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(FLOW_NO_FLOW,0,0,0,0);
   a1e78:	2300      	movs	r3, #0
   a1e7a:	9300      	str	r3, [sp, #0]
   a1e7c:	200c      	movs	r0, #12
   a1e7e:	2100      	movs	r1, #0
   a1e80:	f04f 0200 	mov.w	r2, #0
   a1e84:	f04f 0300 	mov.w	r3, #0
   a1e88:	4c3d      	ldr	r4, [pc, #244]	; (a1f80 <Cl_Dprep_StartPreparation+0x318>)
   a1e8a:	47a0      	blx	r4
   a1e8c:	4603      	mov	r3, r0
   a1e8e:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(FLOW_HIGH_FLOWRATE,0,1500,0,0);
   a1e90:	2300      	movs	r3, #0
   a1e92:	9300      	str	r3, [sp, #0]
   a1e94:	200e      	movs	r0, #14
   a1e96:	2100      	movs	r1, #0
   a1e98:	4a3c      	ldr	r2, [pc, #240]	; (a1f8c <Cl_Dprep_StartPreparation+0x324>)
   a1e9a:	f04f 0300 	mov.w	r3, #0
   a1e9e:	4c38      	ldr	r4, [pc, #224]	; (a1f80 <Cl_Dprep_StartPreparation+0x318>)
   a1ea0:	47a0      	blx	r4
   a1ea2:	4603      	mov	r3, r0
   a1ea4:	75bb      	strb	r3, [r7, #22]
							
						//	Cl_dprepretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON,true );
						//	Cl_dprepretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_ON_TO_OFF,true );
							//Cl_dprepretcode =  sv_cntrl_activatevenousclamp(); // manav : ???
							Cl_dprepretcode =  Cl_AlarmActivateAlarms(ACID_IN_CLOSED,true );
   a1ea6:	202a      	movs	r0, #42	; 0x2a
   a1ea8:	2101      	movs	r1, #1
   a1eaa:	4b39      	ldr	r3, [pc, #228]	; (a1f90 <Cl_Dprep_StartPreparation+0x328>)
   a1eac:	4798      	blx	r3
   a1eae:	4603      	mov	r3, r0
   a1eb0:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode =  Cl_AlarmActivateAlarms(BICARB_IN_CLOSED,true );
   a1eb2:	202c      	movs	r0, #44	; 0x2c
   a1eb4:	2101      	movs	r1, #1
   a1eb6:	4b36      	ldr	r3, [pc, #216]	; (a1f90 <Cl_Dprep_StartPreparation+0x328>)
   a1eb8:	4798      	blx	r3
   a1eba:	4603      	mov	r3, r0
   a1ebc:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_OPEN,true );
   a1ebe:	2003      	movs	r0, #3
   a1ec0:	2101      	movs	r1, #1
   a1ec2:	4b33      	ldr	r3, [pc, #204]	; (a1f90 <Cl_Dprep_StartPreparation+0x328>)
   a1ec4:	4798      	blx	r3
   a1ec6:	4603      	mov	r3, r0
   a1ec8:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_OPEN,true );
   a1eca:	2004      	movs	r0, #4
   a1ecc:	2101      	movs	r1, #1
   a1ece:	4b30      	ldr	r3, [pc, #192]	; (a1f90 <Cl_Dprep_StartPreparation+0x328>)
   a1ed0:	4798      	blx	r3
   a1ed2:	4603      	mov	r3, r0
   a1ed4:	75bb      	strb	r3, [r7, #22]
// 							Cl_dprepretcode =  Cl_AlarmActivateAlarms(TEMP1_HIGH_THRESHOLD,true );
// 							Cl_dprepretcode =  Cl_AlarmActivateAlarms(TEMP2_HIGH_THRESHOLD,true );
// 							Cl_dprepretcode =  Cl_AlarmActivateAlarms(TEMP3_HIGH_THRESHOLD,true );
// 							
						
							if(Current_sense_trigger)
   a1ed6:	4b2f      	ldr	r3, [pc, #188]	; (a1f94 <Cl_Dprep_StartPreparation+0x32c>)
   a1ed8:	781b      	ldrb	r3, [r3, #0]
   a1eda:	2b00      	cmp	r3, #0
   a1edc:	d005      	beq.n	a1eea <Cl_Dprep_StartPreparation+0x282>
							{
									Cl_dprepretcode =  Cl_AlarmActivateAlarms( FPCURRENTSTATUS,true );
   a1ede:	203c      	movs	r0, #60	; 0x3c
   a1ee0:	2101      	movs	r1, #1
   a1ee2:	4b2b      	ldr	r3, [pc, #172]	; (a1f90 <Cl_Dprep_StartPreparation+0x328>)
   a1ee4:	4798      	blx	r3
   a1ee6:	4603      	mov	r3, r0
   a1ee8:	75bb      	strb	r3, [r7, #22]
							}
							else
							{
								//			Cl_rinseretcode =  Cl_AlarmActivateAlarms( PS3STATUS_HIGH,true );
							}
							Cl_dprepretcode =  sv_cntrl_activatepump(DCMOTOR1);
   a1eea:	2001      	movs	r0, #1
   a1eec:	4b2a      	ldr	r3, [pc, #168]	; (a1f98 <Cl_Dprep_StartPreparation+0x330>)
   a1eee:	4798      	blx	r3
   a1ef0:	4603      	mov	r3, r0
   a1ef2:	75bb      	strb	r3, [r7, #22]
							Cl_dprepretcode =  sv_cntrl_activatepump(DCMOTOR2);
   a1ef4:	2002      	movs	r0, #2
   a1ef6:	4b28      	ldr	r3, [pc, #160]	; (a1f98 <Cl_Dprep_StartPreparation+0x330>)
   a1ef8:	4798      	blx	r3
   a1efa:	4603      	mov	r3, r0
   a1efc:	75bb      	strb	r3, [r7, #22]
							sv_cntrl_enable_bypass();
   a1efe:	4b27      	ldr	r3, [pc, #156]	; (a1f9c <Cl_Dprep_StartPreparation+0x334>)
   a1f00:	4798      	blx	r3
							cl_dprepbypassstate = CL_DPREP_BYPASS_ON;
   a1f02:	4b27      	ldr	r3, [pc, #156]	; (a1fa0 <Cl_Dprep_StartPreparation+0x338>)
   a1f04:	2201      	movs	r2, #1
   a1f06:	701a      	strb	r2, [r3, #0]
						//	sv_cntrl_disable_bypass();
						//	cl_dprepbypassstate = CL_DPREP_BYPASS_OFF;
							Cl_dprepretcode = Cl_bc_controller(BC_EVENT_RESUME);
   a1f08:	200b      	movs	r0, #11
   a1f0a:	4b26      	ldr	r3, [pc, #152]	; (a1fa4 <Cl_Dprep_StartPreparation+0x33c>)
   a1f0c:	4798      	blx	r3
   a1f0e:	4603      	mov	r3, r0
   a1f10:	75bb      	strb	r3, [r7, #22]
							//sv_cntrl_enable_bypass();
							sv_prop_startmixing();
   a1f12:	4b25      	ldr	r3, [pc, #148]	; (a1fa8 <Cl_Dprep_StartPreparation+0x340>)
   a1f14:	4798      	blx	r3
							Cl_Uint32Type temp = Treatdata[ID_dflow];
   a1f16:	4b25      	ldr	r3, [pc, #148]	; (a1fac <Cl_Dprep_StartPreparation+0x344>)
   a1f18:	695b      	ldr	r3, [r3, #20]
   a1f1a:	613b      	str	r3, [r7, #16]
							Cl_Uint16Type potvalue = 0;
   a1f1c:	2300      	movs	r3, #0
   a1f1e:	81fb      	strh	r3, [r7, #14]
							switch (temp)
   a1f20:	693b      	ldr	r3, [r7, #16]
   a1f22:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   a1f26:	d049      	beq.n	a1fbc <Cl_Dprep_StartPreparation+0x354>
   a1f28:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   a1f2c:	d003      	beq.n	a1f36 <Cl_Dprep_StartPreparation+0x2ce>
   a1f2e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   a1f32:	d05d      	beq.n	a1ff0 <Cl_Dprep_StartPreparation+0x388>
   a1f34:	e071      	b.n	a201a <Cl_Dprep_StartPreparation+0x3b2>
							{
								case 800:
								sv_cntrl_setpumpspeed(DCMOTOR2,900);
   a1f36:	2002      	movs	r0, #2
   a1f38:	f44f 7161 	mov.w	r1, #900	; 0x384
   a1f3c:	4b1c      	ldr	r3, [pc, #112]	; (a1fb0 <Cl_Dprep_StartPreparation+0x348>)
   a1f3e:	4798      	blx	r3
								sv_cntrl_setpumpspeed(DCMOTOR1,800);   //960
   a1f40:	2001      	movs	r0, #1
   a1f42:	f44f 7148 	mov.w	r1, #800	; 0x320
   a1f46:	4b1a      	ldr	r3, [pc, #104]	; (a1fb0 <Cl_Dprep_StartPreparation+0x348>)
   a1f48:	4798      	blx	r3
								potvalue = (2600 * 1024)/10000;
   a1f4a:	f44f 7385 	mov.w	r3, #266	; 0x10a
   a1f4e:	81fb      	strh	r3, [r7, #14]
								sv_cs_setpotvalue(potvalue);
   a1f50:	89fb      	ldrh	r3, [r7, #14]
   a1f52:	4618      	mov	r0, r3
   a1f54:	4b17      	ldr	r3, [pc, #92]	; (a1fb4 <Cl_Dprep_StartPreparation+0x34c>)
   a1f56:	4798      	blx	r3
								
								conf_activate_pressure_alarms(800);
   a1f58:	f44f 7048 	mov.w	r0, #800	; 0x320
   a1f5c:	4b16      	ldr	r3, [pc, #88]	; (a1fb8 <Cl_Dprep_StartPreparation+0x350>)
   a1f5e:	4798      	blx	r3
								
							
								
								break;
   a1f60:	e06c      	b.n	a203c <Cl_Dprep_StartPreparation+0x3d4>
   a1f62:	bf00      	nop
   a1f64:	0008e7f9 	.word	0x0008e7f9
   a1f68:	000a0555 	.word	0x000a0555
   a1f6c:	00099f9d 	.word	0x00099f9d
   a1f70:	000a0809 	.word	0x000a0809
   a1f74:	000a10a9 	.word	0x000a10a9
   a1f78:	0009ba51 	.word	0x0009ba51
   a1f7c:	00093815 	.word	0x00093815
   a1f80:	00082e09 	.word	0x00082e09
   a1f84:	41880000 	.word	0x41880000
   a1f88:	42200000 	.word	0x42200000
   a1f8c:	44bb8000 	.word	0x44bb8000
   a1f90:	00082e61 	.word	0x00082e61
   a1f94:	20070a3a 	.word	0x20070a3a
   a1f98:	00099c2d 	.word	0x00099c2d
   a1f9c:	00099e79 	.word	0x00099e79
   a1fa0:	20071c70 	.word	0x20071c70
   a1fa4:	0008330d 	.word	0x0008330d
   a1fa8:	0009a075 	.word	0x0009a075
   a1fac:	2007265c 	.word	0x2007265c
   a1fb0:	00099d45 	.word	0x00099d45
   a1fb4:	0009a175 	.word	0x0009a175
   a1fb8:	000a19b1 	.word	0x000a19b1
								
								case 500:
								Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"500",3);
   a1fbc:	2018      	movs	r0, #24
   a1fbe:	4926      	ldr	r1, [pc, #152]	; (a2058 <Cl_Dprep_StartPreparation+0x3f0>)
   a1fc0:	2203      	movs	r2, #3
   a1fc2:	4b26      	ldr	r3, [pc, #152]	; (a205c <Cl_Dprep_StartPreparation+0x3f4>)
   a1fc4:	4798      	blx	r3
								sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   a1fc6:	2002      	movs	r0, #2
   a1fc8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   a1fcc:	4b24      	ldr	r3, [pc, #144]	; (a2060 <Cl_Dprep_StartPreparation+0x3f8>)
   a1fce:	4798      	blx	r3
								sv_cntrl_setpumpspeed(DCMOTOR1,1000);   //960
   a1fd0:	2001      	movs	r0, #1
   a1fd2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   a1fd6:	4b22      	ldr	r3, [pc, #136]	; (a2060 <Cl_Dprep_StartPreparation+0x3f8>)
   a1fd8:	4798      	blx	r3
								potvalue = (690 * 1024)/10000;
   a1fda:	2346      	movs	r3, #70	; 0x46
   a1fdc:	81fb      	strh	r3, [r7, #14]
								sv_cs_setpotvalue(potvalue);
   a1fde:	89fb      	ldrh	r3, [r7, #14]
   a1fe0:	4618      	mov	r0, r3
   a1fe2:	4b20      	ldr	r3, [pc, #128]	; (a2064 <Cl_Dprep_StartPreparation+0x3fc>)
   a1fe4:	4798      	blx	r3
								conf_activate_pressure_alarms(500);
   a1fe6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   a1fea:	4b1f      	ldr	r3, [pc, #124]	; (a2068 <Cl_Dprep_StartPreparation+0x400>)
   a1fec:	4798      	blx	r3
								
								break;
   a1fee:	e025      	b.n	a203c <Cl_Dprep_StartPreparation+0x3d4>

								case 300:
								sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   a1ff0:	2002      	movs	r0, #2
   a1ff2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   a1ff6:	4b1a      	ldr	r3, [pc, #104]	; (a2060 <Cl_Dprep_StartPreparation+0x3f8>)
   a1ff8:	4798      	blx	r3
								sv_cntrl_setpumpspeed(DCMOTOR1,600);
   a1ffa:	2001      	movs	r0, #1
   a1ffc:	f44f 7116 	mov.w	r1, #600	; 0x258
   a2000:	4b17      	ldr	r3, [pc, #92]	; (a2060 <Cl_Dprep_StartPreparation+0x3f8>)
   a2002:	4798      	blx	r3
								potvalue = (650 * 1024)/10000;
   a2004:	2342      	movs	r3, #66	; 0x42
   a2006:	81fb      	strh	r3, [r7, #14]
								sv_cs_setpotvalue(potvalue);
   a2008:	89fb      	ldrh	r3, [r7, #14]
   a200a:	4618      	mov	r0, r3
   a200c:	4b15      	ldr	r3, [pc, #84]	; (a2064 <Cl_Dprep_StartPreparation+0x3fc>)
   a200e:	4798      	blx	r3
								conf_activate_pressure_alarms(300);
   a2010:	f44f 7096 	mov.w	r0, #300	; 0x12c
   a2014:	4b14      	ldr	r3, [pc, #80]	; (a2068 <Cl_Dprep_StartPreparation+0x400>)
   a2016:	4798      	blx	r3
										
								break;
   a2018:	e010      	b.n	a203c <Cl_Dprep_StartPreparation+0x3d4>
								
								
								default:
								sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   a201a:	2002      	movs	r0, #2
   a201c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   a2020:	4b0f      	ldr	r3, [pc, #60]	; (a2060 <Cl_Dprep_StartPreparation+0x3f8>)
   a2022:	4798      	blx	r3
								sv_cntrl_setpumpspeed(DCMOTOR1,1100);   //960
   a2024:	2001      	movs	r0, #1
   a2026:	f240 414c 	movw	r1, #1100	; 0x44c
   a202a:	4b0d      	ldr	r3, [pc, #52]	; (a2060 <Cl_Dprep_StartPreparation+0x3f8>)
   a202c:	4798      	blx	r3
								potvalue = (670 * 1024)/10000;
   a202e:	2344      	movs	r3, #68	; 0x44
   a2030:	81fb      	strh	r3, [r7, #14]
								sv_cs_setpotvalue(potvalue);
   a2032:	89fb      	ldrh	r3, [r7, #14]
   a2034:	4618      	mov	r0, r3
   a2036:	4b0b      	ldr	r3, [pc, #44]	; (a2064 <Cl_Dprep_StartPreparation+0x3fc>)
   a2038:	4798      	blx	r3
								
								break;
   a203a:	bf00      	nop
							}
						//	#if 0
							Cl_dprepretcode = SetHeaterState(CL_HEATER_STATE_ON);
   a203c:	2001      	movs	r0, #1
   a203e:	4b0b      	ldr	r3, [pc, #44]	; (a206c <Cl_Dprep_StartPreparation+0x404>)
   a2040:	4798      	blx	r3
   a2042:	4603      	mov	r3, r0
   a2044:	75bb      	strb	r3, [r7, #22]
						//	#endif
							cl_dprepstate = CL_DPREP_STATE_DPREP_FILLING;
   a2046:	4b0a      	ldr	r3, [pc, #40]	; (a2070 <Cl_Dprep_StartPreparation+0x408>)
   a2048:	2202      	movs	r2, #2
   a204a:	701a      	strb	r2, [r3, #0]
							
							return 0;
   a204c:	2300      	movs	r3, #0
				
	}
   a204e:	4618      	mov	r0, r3
   a2050:	371c      	adds	r7, #28
   a2052:	46bd      	mov	sp, r7
   a2054:	bd90      	pop	{r4, r7, pc}
   a2056:	bf00      	nop
   a2058:	000a8d54 	.word	0x000a8d54
   a205c:	0009ba51 	.word	0x0009ba51
   a2060:	00099d45 	.word	0x00099d45
   a2064:	0009a175 	.word	0x0009a175
   a2068:	000a19b1 	.word	0x000a19b1
   a206c:	000894d9 	.word	0x000894d9
   a2070:	20071c6f 	.word	0x20071c6f
   a2074:	00000000 	.word	0x00000000

000a2078 <Cl_Dprep_StartDialyserPrime>:
	
	
	Cl_ReturnCodeType	Cl_Dprep_StartDialyserPrime(void)
	{
   a2078:	b590      	push	{r4, r7, lr}
   a207a:	b087      	sub	sp, #28
   a207c:	af02      	add	r7, sp, #8
			sv_cntrl_resetgreenalarm();
   a207e:	4ba0      	ldr	r3, [pc, #640]	; (a2300 <Cl_Dprep_StartDialyserPrime+0x288>)
   a2080:	4798      	blx	r3
			dialyzerprime_flag =1;
   a2082:	4ba0      	ldr	r3, [pc, #640]	; (a2304 <Cl_Dprep_StartDialyserPrime+0x28c>)
   a2084:	2201      	movs	r2, #1
   a2086:	701a      	strb	r2, [r3, #0]
			Cl_ReturnCodeType Cl_dprepretcode = CL_OK;
   a2088:	2300      	movs	r3, #0
   a208a:	73fb      	strb	r3, [r7, #15]
			Cl_Uint8Type data =0;
   a208c:	2300      	movs	r3, #0
   a208e:	73bb      	strb	r3, [r7, #14]
				
			Cl_dprepMinutescounter = 0;
   a2090:	4b9d      	ldr	r3, [pc, #628]	; (a2308 <Cl_Dprep_StartDialyserPrime+0x290>)
   a2092:	2200      	movs	r2, #0
   a2094:	601a      	str	r2, [r3, #0]
			Cl_dprepsecondscounter = 0;
   a2096:	4b9d      	ldr	r3, [pc, #628]	; (a230c <Cl_Dprep_StartDialyserPrime+0x294>)
   a2098:	2200      	movs	r2, #0
   a209a:	601a      	str	r2, [r3, #0]
			Cl_Dprep_ResetAlertsforReassertion();
   a209c:	4b9c      	ldr	r3, [pc, #624]	; (a2310 <Cl_Dprep_StartDialyserPrime+0x298>)
   a209e:	4798      	blx	r3
			//cl_dprepstate = CL_DPREP_STATE_DIALISER_PRIME;
			//Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_START_DIALISER_PRIME_CNFRM,&data,0);
			
			//check bypass switches
		//	cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_START,0);
			Cl_dprepretcode = Cl_DprepSelectDialysateInlet();
   a20a0:	4b9c      	ldr	r3, [pc, #624]	; (a2314 <Cl_Dprep_StartDialyserPrime+0x29c>)
   a20a2:	4798      	blx	r3
   a20a4:	4603      	mov	r3, r0
   a20a6:	73fb      	strb	r3, [r7, #15]
			//Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(BLOODDOOR_STATUS_OPEN,LOGIC_HIGH,0,0,0);
			Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(HOLDER1STATUS_CLOSED,LOGIC_LOW,0,0,0);
   a20a8:	2300      	movs	r3, #0
   a20aa:	9300      	str	r3, [sp, #0]
   a20ac:	2005      	movs	r0, #5
   a20ae:	2100      	movs	r1, #0
   a20b0:	f04f 0200 	mov.w	r2, #0
   a20b4:	f04f 0300 	mov.w	r3, #0
   a20b8:	4c97      	ldr	r4, [pc, #604]	; (a2318 <Cl_Dprep_StartDialyserPrime+0x2a0>)
   a20ba:	47a0      	blx	r4
   a20bc:	4603      	mov	r3, r0
   a20be:	73fb      	strb	r3, [r7, #15]
			Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(HOLDER2STATUS_CLOSED,LOGIC_LOW,0,0,0);
   a20c0:	2300      	movs	r3, #0
   a20c2:	9300      	str	r3, [sp, #0]
   a20c4:	2006      	movs	r0, #6
   a20c6:	2100      	movs	r1, #0
   a20c8:	f04f 0200 	mov.w	r2, #0
   a20cc:	f04f 0300 	mov.w	r3, #0
   a20d0:	4c91      	ldr	r4, [pc, #580]	; (a2318 <Cl_Dprep_StartDialyserPrime+0x2a0>)
   a20d2:	47a0      	blx	r4
   a20d4:	4603      	mov	r3, r0
   a20d6:	73fb      	strb	r3, [r7, #15]
			Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(ACID_IN_CLOSED,LOGIC_HIGH,0,0,0);
   a20d8:	2300      	movs	r3, #0
   a20da:	9300      	str	r3, [sp, #0]
   a20dc:	202a      	movs	r0, #42	; 0x2a
   a20de:	2101      	movs	r1, #1
   a20e0:	f04f 0200 	mov.w	r2, #0
   a20e4:	f04f 0300 	mov.w	r3, #0
   a20e8:	4c8b      	ldr	r4, [pc, #556]	; (a2318 <Cl_Dprep_StartDialyserPrime+0x2a0>)
   a20ea:	47a0      	blx	r4
   a20ec:	4603      	mov	r3, r0
   a20ee:	73fb      	strb	r3, [r7, #15]
			Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(BICARB_IN_CLOSED,LOGIC_HIGH,0,0,0);
   a20f0:	2300      	movs	r3, #0
   a20f2:	9300      	str	r3, [sp, #0]
   a20f4:	202c      	movs	r0, #44	; 0x2c
   a20f6:	2101      	movs	r1, #1
   a20f8:	f04f 0200 	mov.w	r2, #0
   a20fc:	f04f 0300 	mov.w	r3, #0
   a2100:	4c85      	ldr	r4, [pc, #532]	; (a2318 <Cl_Dprep_StartDialyserPrime+0x2a0>)
   a2102:	47a0      	blx	r4
   a2104:	4603      	mov	r3, r0
   a2106:	73fb      	strb	r3, [r7, #15]
			Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(COND_STATUS_LOW,BELOW,(Treatdata[ID_setcond] - 0.2),0,0);
   a2108:	4b84      	ldr	r3, [pc, #528]	; (a231c <Cl_Dprep_StartDialyserPrime+0x2a4>)
   a210a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   a210c:	4b84      	ldr	r3, [pc, #528]	; (a2320 <Cl_Dprep_StartDialyserPrime+0x2a8>)
   a210e:	4610      	mov	r0, r2
   a2110:	4798      	blx	r3
   a2112:	4602      	mov	r2, r0
   a2114:	460b      	mov	r3, r1
   a2116:	4c83      	ldr	r4, [pc, #524]	; (a2324 <Cl_Dprep_StartDialyserPrime+0x2ac>)
   a2118:	4610      	mov	r0, r2
   a211a:	4619      	mov	r1, r3
   a211c:	a376      	add	r3, pc, #472	; (adr r3, a22f8 <Cl_Dprep_StartDialyserPrime+0x280>)
   a211e:	e9d3 2300 	ldrd	r2, r3, [r3]
   a2122:	47a0      	blx	r4
   a2124:	4602      	mov	r2, r0
   a2126:	460b      	mov	r3, r1
   a2128:	4610      	mov	r0, r2
   a212a:	4619      	mov	r1, r3
   a212c:	4b7e      	ldr	r3, [pc, #504]	; (a2328 <Cl_Dprep_StartDialyserPrime+0x2b0>)
   a212e:	4798      	blx	r3
   a2130:	4602      	mov	r2, r0
   a2132:	2300      	movs	r3, #0
   a2134:	9300      	str	r3, [sp, #0]
   a2136:	2007      	movs	r0, #7
   a2138:	2103      	movs	r1, #3
   a213a:	f04f 0300 	mov.w	r3, #0
   a213e:	4c76      	ldr	r4, [pc, #472]	; (a2318 <Cl_Dprep_StartDialyserPrime+0x2a0>)
   a2140:	47a0      	blx	r4
   a2142:	4603      	mov	r3, r0
   a2144:	73fb      	strb	r3, [r7, #15]
			Cl_dprepretcode =  Cl_AlarmConfigureAlarmType(COND_STATUS_HIGH,BELOW,(Treatdata[ID_setcond] + 0.2),0,0);
   a2146:	4b75      	ldr	r3, [pc, #468]	; (a231c <Cl_Dprep_StartDialyserPrime+0x2a4>)
   a2148:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   a214a:	4b75      	ldr	r3, [pc, #468]	; (a2320 <Cl_Dprep_StartDialyserPrime+0x2a8>)
   a214c:	4610      	mov	r0, r2
   a214e:	4798      	blx	r3
   a2150:	4602      	mov	r2, r0
   a2152:	460b      	mov	r3, r1
   a2154:	4c75      	ldr	r4, [pc, #468]	; (a232c <Cl_Dprep_StartDialyserPrime+0x2b4>)
   a2156:	4610      	mov	r0, r2
   a2158:	4619      	mov	r1, r3
   a215a:	a367      	add	r3, pc, #412	; (adr r3, a22f8 <Cl_Dprep_StartDialyserPrime+0x280>)
   a215c:	e9d3 2300 	ldrd	r2, r3, [r3]
   a2160:	47a0      	blx	r4
   a2162:	4602      	mov	r2, r0
   a2164:	460b      	mov	r3, r1
   a2166:	4610      	mov	r0, r2
   a2168:	4619      	mov	r1, r3
   a216a:	4b6f      	ldr	r3, [pc, #444]	; (a2328 <Cl_Dprep_StartDialyserPrime+0x2b0>)
   a216c:	4798      	blx	r3
   a216e:	4602      	mov	r2, r0
   a2170:	2300      	movs	r3, #0
   a2172:	9300      	str	r3, [sp, #0]
   a2174:	2008      	movs	r0, #8
   a2176:	2103      	movs	r1, #3
   a2178:	f04f 0300 	mov.w	r3, #0
   a217c:	4c66      	ldr	r4, [pc, #408]	; (a2318 <Cl_Dprep_StartDialyserPrime+0x2a0>)
   a217e:	47a0      	blx	r4
   a2180:	4603      	mov	r3, r0
   a2182:	73fb      	strb	r3, [r7, #15]
// 			Cl_dprepretcode = Cl_AlarmActivateAlarms(PS2_HIGH_THRESHOLD,false );
// 			Cl_dprepretcode = Cl_AlarmActivateAlarms(PS2_LOW_THRESHOLD,false );
// 			Cl_dprepretcode = Cl_AlarmActivateAlarms(PS3_HIGH_THRESHOLD,false );
// 	        Cl_dprepretcode = Cl_AlarmActivateAlarms(PS3_LOW_THRESHOLD,false );
			
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(ACID_IN_OPEN,false );
   a2184:	2029      	movs	r0, #41	; 0x29
   a2186:	2100      	movs	r1, #0
   a2188:	4b69      	ldr	r3, [pc, #420]	; (a2330 <Cl_Dprep_StartDialyserPrime+0x2b8>)
   a218a:	4798      	blx	r3
   a218c:	4603      	mov	r3, r0
   a218e:	73fb      	strb	r3, [r7, #15]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(BICARB_IN_OPEN,false );
   a2190:	202b      	movs	r0, #43	; 0x2b
   a2192:	2100      	movs	r1, #0
   a2194:	4b66      	ldr	r3, [pc, #408]	; (a2330 <Cl_Dprep_StartDialyserPrime+0x2b8>)
   a2196:	4798      	blx	r3
   a2198:	4603      	mov	r3, r0
   a219a:	73fb      	strb	r3, [r7, #15]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_OPEN,false );
   a219c:	2003      	movs	r0, #3
   a219e:	2100      	movs	r1, #0
   a21a0:	4b63      	ldr	r3, [pc, #396]	; (a2330 <Cl_Dprep_StartDialyserPrime+0x2b8>)
   a21a2:	4798      	blx	r3
   a21a4:	4603      	mov	r3, r0
   a21a6:	73fb      	strb	r3, [r7, #15]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_OPEN,false );
   a21a8:	2004      	movs	r0, #4
   a21aa:	2100      	movs	r1, #0
   a21ac:	4b60      	ldr	r3, [pc, #384]	; (a2330 <Cl_Dprep_StartDialyserPrime+0x2b8>)
   a21ae:	4798      	blx	r3
   a21b0:	4603      	mov	r3, r0
   a21b2:	73fb      	strb	r3, [r7, #15]
			
			
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(ACID_IN_CLOSED,true );
   a21b4:	202a      	movs	r0, #42	; 0x2a
   a21b6:	2101      	movs	r1, #1
   a21b8:	4b5d      	ldr	r3, [pc, #372]	; (a2330 <Cl_Dprep_StartDialyserPrime+0x2b8>)
   a21ba:	4798      	blx	r3
   a21bc:	4603      	mov	r3, r0
   a21be:	73fb      	strb	r3, [r7, #15]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(BICARB_IN_CLOSED,true );
   a21c0:	202c      	movs	r0, #44	; 0x2c
   a21c2:	2101      	movs	r1, #1
   a21c4:	4b5a      	ldr	r3, [pc, #360]	; (a2330 <Cl_Dprep_StartDialyserPrime+0x2b8>)
   a21c6:	4798      	blx	r3
   a21c8:	4603      	mov	r3, r0
   a21ca:	73fb      	strb	r3, [r7, #15]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_CLOSED,true );
   a21cc:	2005      	movs	r0, #5
   a21ce:	2101      	movs	r1, #1
   a21d0:	4b57      	ldr	r3, [pc, #348]	; (a2330 <Cl_Dprep_StartDialyserPrime+0x2b8>)
   a21d2:	4798      	blx	r3
   a21d4:	4603      	mov	r3, r0
   a21d6:	73fb      	strb	r3, [r7, #15]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_CLOSED,true );
   a21d8:	2006      	movs	r0, #6
   a21da:	2101      	movs	r1, #1
   a21dc:	4b54      	ldr	r3, [pc, #336]	; (a2330 <Cl_Dprep_StartDialyserPrime+0x2b8>)
   a21de:	4798      	blx	r3
   a21e0:	4603      	mov	r3, r0
   a21e2:	73fb      	strb	r3, [r7, #15]
// 			Cl_dprepretcode =  Cl_AlarmActivateAlarms(TEMP3_HIGH_THRESHOLD,true );
// 			Cl_dprepretcode =  Cl_AlarmActivateAlarms(TEMP3_LOW_THRESHOLD,true );
// 			Cl_dprepretcode =  Cl_AlarmActivateAlarms(COND_STATUS_HIGH,true );
// 			Cl_dprepretcode =  Cl_AlarmActivateAlarms(COND_STATUS_LOW,true );
// 		
			if(Current_sense_trigger)
   a21e4:	4b53      	ldr	r3, [pc, #332]	; (a2334 <Cl_Dprep_StartDialyserPrime+0x2bc>)
   a21e6:	781b      	ldrb	r3, [r3, #0]
   a21e8:	2b00      	cmp	r3, #0
   a21ea:	d005      	beq.n	a21f8 <Cl_Dprep_StartDialyserPrime+0x180>
			{
				Cl_dprepretcode =  Cl_AlarmActivateAlarms( FPCURRENTSTATUS,true );
   a21ec:	203c      	movs	r0, #60	; 0x3c
   a21ee:	2101      	movs	r1, #1
   a21f0:	4b4f      	ldr	r3, [pc, #316]	; (a2330 <Cl_Dprep_StartDialyserPrime+0x2b8>)
   a21f2:	4798      	blx	r3
   a21f4:	4603      	mov	r3, r0
   a21f6:	73fb      	strb	r3, [r7, #15]
			else
			{
				//			Cl_rinseretcode =  Cl_AlarmActivateAlarms( PS3STATUS_HIGH,true );
			}
			
			Cl_dprepretcode =  sv_cntrl_activatepump(DCMOTOR1);
   a21f8:	2001      	movs	r0, #1
   a21fa:	4b4f      	ldr	r3, [pc, #316]	; (a2338 <Cl_Dprep_StartDialyserPrime+0x2c0>)
   a21fc:	4798      	blx	r3
   a21fe:	4603      	mov	r3, r0
   a2200:	73fb      	strb	r3, [r7, #15]
			Cl_dprepretcode =  sv_cntrl_activatepump(DCMOTOR2);
   a2202:	2002      	movs	r0, #2
   a2204:	4b4c      	ldr	r3, [pc, #304]	; (a2338 <Cl_Dprep_StartDialyserPrime+0x2c0>)
   a2206:	4798      	blx	r3
   a2208:	4603      	mov	r3, r0
   a220a:	73fb      	strb	r3, [r7, #15]
			
			// wait for the cond and temperature to be stable then disable bypass and run it for 2 mins
		//	Cl_dprepretcode =  sv_cntrl_disable_bypass();
		//	cl_dprepbypassstate = CL_DPREP_BYPASS_OFF;
			Cl_Uint32Type temp = Treatdata[ID_dflow];
   a220c:	4b43      	ldr	r3, [pc, #268]	; (a231c <Cl_Dprep_StartDialyserPrime+0x2a4>)
   a220e:	695b      	ldr	r3, [r3, #20]
   a2210:	60bb      	str	r3, [r7, #8]
				flow_rate = temp;
   a2212:	4a4a      	ldr	r2, [pc, #296]	; (a233c <Cl_Dprep_StartDialyserPrime+0x2c4>)
   a2214:	68bb      	ldr	r3, [r7, #8]
   a2216:	6013      	str	r3, [r2, #0]
			Cl_Uint16Type potvalue = 0;
   a2218:	2300      	movs	r3, #0
   a221a:	80fb      	strh	r3, [r7, #6]
			switch (temp)
   a221c:	68bb      	ldr	r3, [r7, #8]
   a221e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   a2222:	d038      	beq.n	a2296 <Cl_Dprep_StartDialyserPrime+0x21e>
   a2224:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   a2228:	d803      	bhi.n	a2232 <Cl_Dprep_StartDialyserPrime+0x1ba>
   a222a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   a222e:	d04c      	beq.n	a22ca <Cl_Dprep_StartDialyserPrime+0x252>
   a2230:	e090      	b.n	a2354 <Cl_Dprep_StartDialyserPrime+0x2dc>
   a2232:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
   a2236:	d018      	beq.n	a226a <Cl_Dprep_StartDialyserPrime+0x1f2>
   a2238:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
   a223c:	f040 808a 	bne.w	a2354 <Cl_Dprep_StartDialyserPrime+0x2dc>
			{
				case 800:
				sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   a2240:	2002      	movs	r0, #2
   a2242:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   a2246:	4b3e      	ldr	r3, [pc, #248]	; (a2340 <Cl_Dprep_StartDialyserPrime+0x2c8>)
   a2248:	4798      	blx	r3
				sv_cntrl_setpumpspeed(DCMOTOR1,1395);
   a224a:	2001      	movs	r0, #1
   a224c:	f240 5173 	movw	r1, #1395	; 0x573
   a2250:	4b3b      	ldr	r3, [pc, #236]	; (a2340 <Cl_Dprep_StartDialyserPrime+0x2c8>)
   a2252:	4798      	blx	r3
				potvalue = (612 * 1024)/10000;
   a2254:	233e      	movs	r3, #62	; 0x3e
   a2256:	80fb      	strh	r3, [r7, #6]
				sv_cs_setpotvalue(potvalue);
   a2258:	88fb      	ldrh	r3, [r7, #6]
   a225a:	4618      	mov	r0, r3
   a225c:	4b39      	ldr	r3, [pc, #228]	; (a2344 <Cl_Dprep_StartDialyserPrime+0x2cc>)
   a225e:	4798      	blx	r3
				
				conf_activate_pressure_alarms(800);
   a2260:	f44f 7048 	mov.w	r0, #800	; 0x320
   a2264:	4b38      	ldr	r3, [pc, #224]	; (a2348 <Cl_Dprep_StartDialyserPrime+0x2d0>)
   a2266:	4798      	blx	r3
				break;
   a2268:	e08a      	b.n	a2380 <Cl_Dprep_StartDialyserPrime+0x308>
				
				case 700:
				sv_cntrl_setpumpspeed(DCMOTOR2,900);
   a226a:	2002      	movs	r0, #2
   a226c:	f44f 7161 	mov.w	r1, #900	; 0x384
   a2270:	4b33      	ldr	r3, [pc, #204]	; (a2340 <Cl_Dprep_StartDialyserPrime+0x2c8>)
   a2272:	4798      	blx	r3
				sv_cntrl_setpumpspeed(DCMOTOR1,960);
   a2274:	2001      	movs	r0, #1
   a2276:	f44f 7170 	mov.w	r1, #960	; 0x3c0
   a227a:	4b31      	ldr	r3, [pc, #196]	; (a2340 <Cl_Dprep_StartDialyserPrime+0x2c8>)
   a227c:	4798      	blx	r3
				potvalue = (2600 * 1024)/10000;
   a227e:	f44f 7385 	mov.w	r3, #266	; 0x10a
   a2282:	80fb      	strh	r3, [r7, #6]
				sv_cs_setpotvalue(potvalue);
   a2284:	88fb      	ldrh	r3, [r7, #6]
   a2286:	4618      	mov	r0, r3
   a2288:	4b2e      	ldr	r3, [pc, #184]	; (a2344 <Cl_Dprep_StartDialyserPrime+0x2cc>)
   a228a:	4798      	blx	r3
				
				conf_activate_pressure_alarms(700);
   a228c:	f44f 702f 	mov.w	r0, #700	; 0x2bc
   a2290:	4b2d      	ldr	r3, [pc, #180]	; (a2348 <Cl_Dprep_StartDialyserPrime+0x2d0>)
   a2292:	4798      	blx	r3
				break;
   a2294:	e074      	b.n	a2380 <Cl_Dprep_StartDialyserPrime+0x308>
				
				
				case 500:
				Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"500",3);
   a2296:	2018      	movs	r0, #24
   a2298:	492c      	ldr	r1, [pc, #176]	; (a234c <Cl_Dprep_StartDialyserPrime+0x2d4>)
   a229a:	2203      	movs	r2, #3
   a229c:	4b2c      	ldr	r3, [pc, #176]	; (a2350 <Cl_Dprep_StartDialyserPrime+0x2d8>)
   a229e:	4798      	blx	r3
				sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   a22a0:	2002      	movs	r0, #2
   a22a2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   a22a6:	4b26      	ldr	r3, [pc, #152]	; (a2340 <Cl_Dprep_StartDialyserPrime+0x2c8>)
   a22a8:	4798      	blx	r3
				sv_cntrl_setpumpspeed(DCMOTOR1,1000);   //960
   a22aa:	2001      	movs	r0, #1
   a22ac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   a22b0:	4b23      	ldr	r3, [pc, #140]	; (a2340 <Cl_Dprep_StartDialyserPrime+0x2c8>)
   a22b2:	4798      	blx	r3
				potvalue = (690 * 1024)/10000;
   a22b4:	2346      	movs	r3, #70	; 0x46
   a22b6:	80fb      	strh	r3, [r7, #6]
				sv_cs_setpotvalue(potvalue);
   a22b8:	88fb      	ldrh	r3, [r7, #6]
   a22ba:	4618      	mov	r0, r3
   a22bc:	4b21      	ldr	r3, [pc, #132]	; (a2344 <Cl_Dprep_StartDialyserPrime+0x2cc>)
   a22be:	4798      	blx	r3
				
				conf_activate_pressure_alarms(500);
   a22c0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   a22c4:	4b20      	ldr	r3, [pc, #128]	; (a2348 <Cl_Dprep_StartDialyserPrime+0x2d0>)
   a22c6:	4798      	blx	r3
				break;
   a22c8:	e05a      	b.n	a2380 <Cl_Dprep_StartDialyserPrime+0x308>

				case 300:
				sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   a22ca:	2002      	movs	r0, #2
   a22cc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   a22d0:	4b1b      	ldr	r3, [pc, #108]	; (a2340 <Cl_Dprep_StartDialyserPrime+0x2c8>)
   a22d2:	4798      	blx	r3
				sv_cntrl_setpumpspeed(DCMOTOR1,600);
   a22d4:	2001      	movs	r0, #1
   a22d6:	f44f 7116 	mov.w	r1, #600	; 0x258
   a22da:	4b19      	ldr	r3, [pc, #100]	; (a2340 <Cl_Dprep_StartDialyserPrime+0x2c8>)
   a22dc:	4798      	blx	r3
				potvalue = (650 * 1024)/10000;
   a22de:	2342      	movs	r3, #66	; 0x42
   a22e0:	80fb      	strh	r3, [r7, #6]
				sv_cs_setpotvalue(potvalue);
   a22e2:	88fb      	ldrh	r3, [r7, #6]
   a22e4:	4618      	mov	r0, r3
   a22e6:	4b17      	ldr	r3, [pc, #92]	; (a2344 <Cl_Dprep_StartDialyserPrime+0x2cc>)
   a22e8:	4798      	blx	r3
				
				conf_activate_pressure_alarms(300);
   a22ea:	f44f 7096 	mov.w	r0, #300	; 0x12c
   a22ee:	4b16      	ldr	r3, [pc, #88]	; (a2348 <Cl_Dprep_StartDialyserPrime+0x2d0>)
   a22f0:	4798      	blx	r3
				
				break;
   a22f2:	e045      	b.n	a2380 <Cl_Dprep_StartDialyserPrime+0x308>
   a22f4:	f3af 8000 	nop.w
   a22f8:	9999999a 	.word	0x9999999a
   a22fc:	3fc99999 	.word	0x3fc99999
   a2300:	00099f9d 	.word	0x00099f9d
   a2304:	20071c28 	.word	0x20071c28
   a2308:	20071c78 	.word	0x20071c78
   a230c:	20071c74 	.word	0x20071c74
   a2310:	000a10a9 	.word	0x000a10a9
   a2314:	000a0809 	.word	0x000a0809
   a2318:	00082e09 	.word	0x00082e09
   a231c:	2007265c 	.word	0x2007265c
   a2320:	000a5fed 	.word	0x000a5fed
   a2324:	000a5d71 	.word	0x000a5d71
   a2328:	000a669d 	.word	0x000a669d
   a232c:	000a5d75 	.word	0x000a5d75
   a2330:	00082e61 	.word	0x00082e61
   a2334:	20070a3a 	.word	0x20070a3a
   a2338:	00099c2d 	.word	0x00099c2d
   a233c:	20071954 	.word	0x20071954
   a2340:	00099d45 	.word	0x00099d45
   a2344:	0009a175 	.word	0x0009a175
   a2348:	000a19b1 	.word	0x000a19b1
   a234c:	000a8d54 	.word	0x000a8d54
   a2350:	0009ba51 	.word	0x0009ba51
				
				
				default:
				Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"500",3);
   a2354:	2018      	movs	r0, #24
   a2356:	491b      	ldr	r1, [pc, #108]	; (a23c4 <Cl_Dprep_StartDialyserPrime+0x34c>)
   a2358:	2203      	movs	r2, #3
   a235a:	4b1b      	ldr	r3, [pc, #108]	; (a23c8 <Cl_Dprep_StartDialyserPrime+0x350>)
   a235c:	4798      	blx	r3
				sv_cntrl_setpumpspeed(DCMOTOR2,1000);
   a235e:	2002      	movs	r0, #2
   a2360:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   a2364:	4b19      	ldr	r3, [pc, #100]	; (a23cc <Cl_Dprep_StartDialyserPrime+0x354>)
   a2366:	4798      	blx	r3
				sv_cntrl_setpumpspeed(DCMOTOR1,1100);                           // 420
   a2368:	2001      	movs	r0, #1
   a236a:	f240 414c 	movw	r1, #1100	; 0x44c
   a236e:	4b17      	ldr	r3, [pc, #92]	; (a23cc <Cl_Dprep_StartDialyserPrime+0x354>)
   a2370:	4798      	blx	r3
				potvalue = (670 * 1024)/10000;
   a2372:	2344      	movs	r3, #68	; 0x44
   a2374:	80fb      	strh	r3, [r7, #6]
				sv_cs_setpotvalue(potvalue);
   a2376:	88fb      	ldrh	r3, [r7, #6]
   a2378:	4618      	mov	r0, r3
   a237a:	4b15      	ldr	r3, [pc, #84]	; (a23d0 <Cl_Dprep_StartDialyserPrime+0x358>)
   a237c:	4798      	blx	r3
				break;
   a237e:	bf00      	nop
			}
			
		//	if(cl_dprep_prime_state != CL_DPREP_PRIME_STATE_DIALYSER_PRIMING)
		//	{
				
				cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_START_DIALYSER_PRIMING,0);
   a2380:	2008      	movs	r0, #8
   a2382:	2100      	movs	r1, #0
   a2384:	4b13      	ldr	r3, [pc, #76]	; (a23d4 <Cl_Dprep_StartDialyserPrime+0x35c>)
   a2386:	4798      	blx	r3
				Cl_DprepAlarmTable[CL_DPREP_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   a2388:	4b13      	ldr	r3, [pc, #76]	; (a23d8 <Cl_Dprep_StartDialyserPrime+0x360>)
   a238a:	2200      	movs	r2, #0
   a238c:	70da      	strb	r2, [r3, #3]
		//	}
			
			
			Cl_dprepretcode = sv_cntrl_disable_loopback(); 
   a238e:	4b13      	ldr	r3, [pc, #76]	; (a23dc <Cl_Dprep_StartDialyserPrime+0x364>)
   a2390:	4798      	blx	r3
   a2392:	4603      	mov	r3, r0
   a2394:	73fb      	strb	r3, [r7, #15]
			sv_prop_startmixing();
   a2396:	4b12      	ldr	r3, [pc, #72]	; (a23e0 <Cl_Dprep_StartDialyserPrime+0x368>)
   a2398:	4798      	blx	r3
			Cl_dprepretcode = Cl_bc_controller(BC_EVENT_RESUME);
   a239a:	200b      	movs	r0, #11
   a239c:	4b11      	ldr	r3, [pc, #68]	; (a23e4 <Cl_Dprep_StartDialyserPrime+0x36c>)
   a239e:	4798      	blx	r3
   a23a0:	4603      	mov	r3, r0
   a23a2:	73fb      	strb	r3, [r7, #15]
			Cl_dprepretcode = SetHeaterState(CL_HEATER_STATE_DIALYSER_PRIME_ON);
   a23a4:	2002      	movs	r0, #2
   a23a6:	4b10      	ldr	r3, [pc, #64]	; (a23e8 <Cl_Dprep_StartDialyserPrime+0x370>)
   a23a8:	4798      	blx	r3
   a23aa:	4603      	mov	r3, r0
   a23ac:	73fb      	strb	r3, [r7, #15]
			
			UpdateDprepFillingMinuteTick();
   a23ae:	4b0f      	ldr	r3, [pc, #60]	; (a23ec <Cl_Dprep_StartDialyserPrime+0x374>)
   a23b0:	4798      	blx	r3
	
			// change state to wait for stability to check for temp and cond stability if yes then change state to dializer prime and diable bypass
		//	Cl_Check_Temp_Cond_Stability();
			
			cl_dprepstate = CL_DPREP_STATE_DPRIME_WAIT_STABILITY;
   a23b2:	4b0f      	ldr	r3, [pc, #60]	; (a23f0 <Cl_Dprep_StartDialyserPrime+0x378>)
   a23b4:	220e      	movs	r2, #14
   a23b6:	701a      	strb	r2, [r3, #0]
			
		//	cl_dprepstate = CL_DPREP_STATE_DIALISER_PRIME;
		//
	//	Cl_dprepretcode =  sv_cntrl_disable_bypass();
	//	cl_dprepbypassstate = CL_DPREP_BYPASS_OFF;					
			return 0;
   a23b8:	2300      	movs	r3, #0
	}
   a23ba:	4618      	mov	r0, r3
   a23bc:	3714      	adds	r7, #20
   a23be:	46bd      	mov	sp, r7
   a23c0:	bd90      	pop	{r4, r7, pc}
   a23c2:	bf00      	nop
   a23c4:	000a8d54 	.word	0x000a8d54
   a23c8:	0009ba51 	.word	0x0009ba51
   a23cc:	00099d45 	.word	0x00099d45
   a23d0:	0009a175 	.word	0x0009a175
   a23d4:	0008850d 	.word	0x0008850d
   a23d8:	20070bdc 	.word	0x20070bdc
   a23dc:	00099e5d 	.word	0x00099e5d
   a23e0:	0009a075 	.word	0x0009a075
   a23e4:	0008330d 	.word	0x0008330d
   a23e8:	000894d9 	.word	0x000894d9
   a23ec:	000a0829 	.word	0x000a0829
   a23f0:	20071c6f 	.word	0x20071c6f

000a23f4 <Cl_Dprep_Priming_Stop>:

Cl_ReturnCodeType Cl_Dprep_Priming_Stop(){
   a23f4:	b580      	push	{r7, lr}
   a23f6:	af00      	add	r7, sp, #0
	
	sv_cntrl_setredalarm();
   a23f8:	4b04      	ldr	r3, [pc, #16]	; (a240c <Cl_Dprep_Priming_Stop+0x18>)
   a23fa:	4798      	blx	r3
	 Cl_mac_apprequesthandler(EVT_CONSOLE_COMMAND_STOP_DIALISER_PRIME);
   a23fc:	2014      	movs	r0, #20
   a23fe:	4b04      	ldr	r3, [pc, #16]	; (a2410 <Cl_Dprep_Priming_Stop+0x1c>)
   a2400:	4798      	blx	r3

Cl_deactivate_prep_alarms();
   a2402:	4b04      	ldr	r3, [pc, #16]	; (a2414 <Cl_Dprep_Priming_Stop+0x20>)
   a2404:	4798      	blx	r3
// 		
// 		
// 		Cl_dprep_StopMixing();
// 		cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP_DIALYSER_PRIMING,0);
// 	
}
   a2406:	4618      	mov	r0, r3
   a2408:	bd80      	pop	{r7, pc}
   a240a:	bf00      	nop
   a240c:	00099f25 	.word	0x00099f25
   a2410:	0008bc51 	.word	0x0008bc51
   a2414:	000a24f1 	.word	0x000a24f1

000a2418 <Cl_Check_Temp_Cond_Stability>:
	
	
	
Cl_ReturnCodeType Cl_Check_Temp_Cond_Stability(){
   a2418:	b580      	push	{r7, lr}
   a241a:	b082      	sub	sp, #8
   a241c:	af00      	add	r7, sp, #0
	
	
	
	Cl_Heater_GetHeaterStableStatus(&dprep_heater_stable_status);
   a241e:	4807      	ldr	r0, [pc, #28]	; (a243c <Cl_Check_Temp_Cond_Stability+0x24>)
   a2420:	4b07      	ldr	r3, [pc, #28]	; (a2440 <Cl_Check_Temp_Cond_Stability+0x28>)
   a2422:	4798      	blx	r3
	Cl_Uint16Type temp = 0;
   a2424:	2300      	movs	r3, #0
   a2426:	80fb      	strh	r3, [r7, #6]
	Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_STATUS , &temp);
   a2428:	1dbb      	adds	r3, r7, #6
   a242a:	2007      	movs	r0, #7
   a242c:	4619      	mov	r1, r3
   a242e:	4b05      	ldr	r3, [pc, #20]	; (a2444 <Cl_Check_Temp_Cond_Stability+0x2c>)
   a2430:	4798      	blx	r3
// 		}
// 		else{
// 			return CL_REJECTED;
// 		}

return CL_OK;	
   a2432:	2300      	movs	r3, #0
}
   a2434:	4618      	mov	r0, r3
   a2436:	3708      	adds	r7, #8
   a2438:	46bd      	mov	sp, r7
   a243a:	bd80      	pop	{r7, pc}
   a243c:	20071c29 	.word	0x20071c29
   a2440:	00089389 	.word	0x00089389
   a2444:	0008e7f9 	.word	0x0008e7f9

000a2448 <Cl_dprep_StopMixing>:
	
	
	
Cl_ReturnCodeType Cl_dprep_StopMixing(void)
{
   a2448:	b580      	push	{r7, lr}
   a244a:	b082      	sub	sp, #8
   a244c:	af00      	add	r7, sp, #0
				Cl_ReturnCodeType Cl_dprepretcode = CL_OK;
   a244e:	2300      	movs	r3, #0
   a2450:	71fb      	strb	r3, [r7, #7]
				Cl_Uint8Type data;
				if(cl_dprepstate == CL_DPREP_STATE_DPREP_FILLING)
   a2452:	4b1f      	ldr	r3, [pc, #124]	; (a24d0 <Cl_dprep_StopMixing+0x88>)
   a2454:	781b      	ldrb	r3, [r3, #0]
   a2456:	2b02      	cmp	r3, #2
   a2458:	d11c      	bne.n	a2494 <Cl_dprep_StopMixing+0x4c>
				{
					
				Cl_dprepMinutescounter = 0;
   a245a:	4b1e      	ldr	r3, [pc, #120]	; (a24d4 <Cl_dprep_StopMixing+0x8c>)
   a245c:	2200      	movs	r2, #0
   a245e:	601a      	str	r2, [r3, #0]
				Cl_dprepsecondscounter = 0;
   a2460:	4b1d      	ldr	r3, [pc, #116]	; (a24d8 <Cl_dprep_StopMixing+0x90>)
   a2462:	2200      	movs	r2, #0
   a2464:	601a      	str	r2, [r3, #0]

				Cl_dprepretcode = sv_cntrl_poweroffheater();
   a2466:	4b1d      	ldr	r3, [pc, #116]	; (a24dc <Cl_dprep_StopMixing+0x94>)
   a2468:	4798      	blx	r3
   a246a:	4603      	mov	r3, r0
   a246c:	71fb      	strb	r3, [r7, #7]
				Cl_dprepretcode = SetHeaterState(CL_HEATER_STATE_OFF);
   a246e:	2004      	movs	r0, #4
   a2470:	4b1b      	ldr	r3, [pc, #108]	; (a24e0 <Cl_dprep_StopMixing+0x98>)
   a2472:	4798      	blx	r3
   a2474:	4603      	mov	r3, r0
   a2476:	71fb      	strb	r3, [r7, #7]
				Cl_bc_controller(BC_EVENT_STOP);
   a2478:	2005      	movs	r0, #5
   a247a:	4b1a      	ldr	r3, [pc, #104]	; (a24e4 <Cl_dprep_StopMixing+0x9c>)
   a247c:	4798      	blx	r3
				//Cl_rinseretcode = sv_cntrl_setflowpath(FLOW_PATH_IDLE_RINSE);
				cl_dprepstate = CL_DPREP_STATE_STOPPED;
   a247e:	4b14      	ldr	r3, [pc, #80]	; (a24d0 <Cl_dprep_StopMixing+0x88>)
   a2480:	220b      	movs	r2, #11
   a2482:	701a      	strb	r2, [r3, #0]
				Cl_dprepretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_DIALYSATE_FILLING_STOPPED,&data,0);
   a2484:	1dbb      	adds	r3, r7, #6
   a2486:	202d      	movs	r0, #45	; 0x2d
   a2488:	4619      	mov	r1, r3
   a248a:	2200      	movs	r2, #0
   a248c:	4b16      	ldr	r3, [pc, #88]	; (a24e8 <Cl_dprep_StopMixing+0xa0>)
   a248e:	4798      	blx	r3
   a2490:	4603      	mov	r3, r0
   a2492:	71fb      	strb	r3, [r7, #7]
				
					
				}
				if(cl_dprepstate == CL_DPREP_STATE_DIALISER_PRIME){
   a2494:	4b0e      	ldr	r3, [pc, #56]	; (a24d0 <Cl_dprep_StopMixing+0x88>)
   a2496:	781b      	ldrb	r3, [r3, #0]
   a2498:	2b06      	cmp	r3, #6
   a249a:	d111      	bne.n	a24c0 <Cl_dprep_StopMixing+0x78>
					
					Cl_dprepMinutescounter = 0;
   a249c:	4b0d      	ldr	r3, [pc, #52]	; (a24d4 <Cl_dprep_StopMixing+0x8c>)
   a249e:	2200      	movs	r2, #0
   a24a0:	601a      	str	r2, [r3, #0]
					Cl_dprepsecondscounter = 0;
   a24a2:	4b0d      	ldr	r3, [pc, #52]	; (a24d8 <Cl_dprep_StopMixing+0x90>)
   a24a4:	2200      	movs	r2, #0
   a24a6:	601a      	str	r2, [r3, #0]
					
					Cl_dprepretcode = sv_cntrl_poweroffheater();
   a24a8:	4b0c      	ldr	r3, [pc, #48]	; (a24dc <Cl_dprep_StopMixing+0x94>)
   a24aa:	4798      	blx	r3
   a24ac:	4603      	mov	r3, r0
   a24ae:	71fb      	strb	r3, [r7, #7]
					Cl_dprepretcode = SetHeaterState(CL_HEATER_STATE_OFF);
   a24b0:	2004      	movs	r0, #4
   a24b2:	4b0b      	ldr	r3, [pc, #44]	; (a24e0 <Cl_dprep_StopMixing+0x98>)
   a24b4:	4798      	blx	r3
   a24b6:	4603      	mov	r3, r0
   a24b8:	71fb      	strb	r3, [r7, #7]
					Cl_bc_controller(BC_EVENT_STOP);
   a24ba:	2005      	movs	r0, #5
   a24bc:	4b09      	ldr	r3, [pc, #36]	; (a24e4 <Cl_dprep_StopMixing+0x9c>)
   a24be:	4798      	blx	r3
					
					
				}

Cl_deactivate_prep_alarms();
   a24c0:	4b0a      	ldr	r3, [pc, #40]	; (a24ec <Cl_dprep_StopMixing+0xa4>)
   a24c2:	4798      	blx	r3
				return Cl_dprepretcode;
   a24c4:	79fb      	ldrb	r3, [r7, #7]
}
   a24c6:	4618      	mov	r0, r3
   a24c8:	3708      	adds	r7, #8
   a24ca:	46bd      	mov	sp, r7
   a24cc:	bd80      	pop	{r7, pc}
   a24ce:	bf00      	nop
   a24d0:	20071c6f 	.word	0x20071c6f
   a24d4:	20071c78 	.word	0x20071c78
   a24d8:	20071c74 	.word	0x20071c74
   a24dc:	00099cb9 	.word	0x00099cb9
   a24e0:	000894d9 	.word	0x000894d9
   a24e4:	0008330d 	.word	0x0008330d
   a24e8:	0009ba51 	.word	0x0009ba51
   a24ec:	000a24f1 	.word	0x000a24f1

000a24f0 <Cl_deactivate_prep_alarms>:

Cl_ReturnCodeType Cl_deactivate_prep_alarms(){
   a24f0:	b580      	push	{r7, lr}
   a24f2:	b082      	sub	sp, #8
   a24f4:	af00      	add	r7, sp, #0
	
	
	Cl_ReturnCodeType Cl_dprepretcode = CL_OK;
   a24f6:	2300      	movs	r3, #0
   a24f8:	71fb      	strb	r3, [r7, #7]
		
		
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(ACID_IN_CLOSED,false );
   a24fa:	202a      	movs	r0, #42	; 0x2a
   a24fc:	2100      	movs	r1, #0
   a24fe:	4b4f      	ldr	r3, [pc, #316]	; (a263c <Cl_deactivate_prep_alarms+0x14c>)
   a2500:	4798      	blx	r3
   a2502:	4603      	mov	r3, r0
   a2504:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(BICARB_IN_CLOSED,false );
   a2506:	202c      	movs	r0, #44	; 0x2c
   a2508:	2100      	movs	r1, #0
   a250a:	4b4c      	ldr	r3, [pc, #304]	; (a263c <Cl_deactivate_prep_alarms+0x14c>)
   a250c:	4798      	blx	r3
   a250e:	4603      	mov	r3, r0
   a2510:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_CLOSED,false );
   a2512:	2005      	movs	r0, #5
   a2514:	2100      	movs	r1, #0
   a2516:	4b49      	ldr	r3, [pc, #292]	; (a263c <Cl_deactivate_prep_alarms+0x14c>)
   a2518:	4798      	blx	r3
   a251a:	4603      	mov	r3, r0
   a251c:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_CLOSED,false );
   a251e:	2006      	movs	r0, #6
   a2520:	2100      	movs	r1, #0
   a2522:	4b46      	ldr	r3, [pc, #280]	; (a263c <Cl_deactivate_prep_alarms+0x14c>)
   a2524:	4798      	blx	r3
   a2526:	4603      	mov	r3, r0
   a2528:	71fb      	strb	r3, [r7, #7]
		
		
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(ACID_IN_OPEN,false );
   a252a:	2029      	movs	r0, #41	; 0x29
   a252c:	2100      	movs	r1, #0
   a252e:	4b43      	ldr	r3, [pc, #268]	; (a263c <Cl_deactivate_prep_alarms+0x14c>)
   a2530:	4798      	blx	r3
   a2532:	4603      	mov	r3, r0
   a2534:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(BICARB_IN_OPEN,false );
   a2536:	202b      	movs	r0, #43	; 0x2b
   a2538:	2100      	movs	r1, #0
   a253a:	4b40      	ldr	r3, [pc, #256]	; (a263c <Cl_deactivate_prep_alarms+0x14c>)
   a253c:	4798      	blx	r3
   a253e:	4603      	mov	r3, r0
   a2540:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_OPEN,false );
   a2542:	2003      	movs	r0, #3
   a2544:	2100      	movs	r1, #0
   a2546:	4b3d      	ldr	r3, [pc, #244]	; (a263c <Cl_deactivate_prep_alarms+0x14c>)
   a2548:	4798      	blx	r3
   a254a:	4603      	mov	r3, r0
   a254c:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_OPEN,false );
   a254e:	2004      	movs	r0, #4
   a2550:	2100      	movs	r1, #0
   a2552:	4b3a      	ldr	r3, [pc, #232]	; (a263c <Cl_deactivate_prep_alarms+0x14c>)
   a2554:	4798      	blx	r3
   a2556:	4603      	mov	r3, r0
   a2558:	71fb      	strb	r3, [r7, #7]
			
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(PS1_HIGH_THRESHOLD,false );
   a255a:	2015      	movs	r0, #21
   a255c:	2100      	movs	r1, #0
   a255e:	4b37      	ldr	r3, [pc, #220]	; (a263c <Cl_deactivate_prep_alarms+0x14c>)
   a2560:	4798      	blx	r3
   a2562:	4603      	mov	r3, r0
   a2564:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(PS1_LOW_THRESHOLD,false );
   a2566:	2016      	movs	r0, #22
   a2568:	2100      	movs	r1, #0
   a256a:	4b34      	ldr	r3, [pc, #208]	; (a263c <Cl_deactivate_prep_alarms+0x14c>)
   a256c:	4798      	blx	r3
   a256e:	4603      	mov	r3, r0
   a2570:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(PS2_HIGH_THRESHOLD,false );
   a2572:	2017      	movs	r0, #23
   a2574:	2100      	movs	r1, #0
   a2576:	4b31      	ldr	r3, [pc, #196]	; (a263c <Cl_deactivate_prep_alarms+0x14c>)
   a2578:	4798      	blx	r3
   a257a:	4603      	mov	r3, r0
   a257c:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(PS2_LOW_THRESHOLD,false );
   a257e:	2018      	movs	r0, #24
   a2580:	2100      	movs	r1, #0
   a2582:	4b2e      	ldr	r3, [pc, #184]	; (a263c <Cl_deactivate_prep_alarms+0x14c>)
   a2584:	4798      	blx	r3
   a2586:	4603      	mov	r3, r0
   a2588:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(PS3_HIGH_THRESHOLD,false );
   a258a:	2027      	movs	r0, #39	; 0x27
   a258c:	2100      	movs	r1, #0
   a258e:	4b2b      	ldr	r3, [pc, #172]	; (a263c <Cl_deactivate_prep_alarms+0x14c>)
   a2590:	4798      	blx	r3
   a2592:	4603      	mov	r3, r0
   a2594:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(PS3_LOW_THRESHOLD,false );
   a2596:	2028      	movs	r0, #40	; 0x28
   a2598:	2100      	movs	r1, #0
   a259a:	4b28      	ldr	r3, [pc, #160]	; (a263c <Cl_deactivate_prep_alarms+0x14c>)
   a259c:	4798      	blx	r3
   a259e:	4603      	mov	r3, r0
   a25a0:	71fb      	strb	r3, [r7, #7]
			
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(TEMP1_HIGH_THRESHOLD,false );
   a25a2:	200f      	movs	r0, #15
   a25a4:	2100      	movs	r1, #0
   a25a6:	4b25      	ldr	r3, [pc, #148]	; (a263c <Cl_deactivate_prep_alarms+0x14c>)
   a25a8:	4798      	blx	r3
   a25aa:	4603      	mov	r3, r0
   a25ac:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(TEMP1_LOW_THRESHOLD,false );
   a25ae:	2010      	movs	r0, #16
   a25b0:	2100      	movs	r1, #0
   a25b2:	4b22      	ldr	r3, [pc, #136]	; (a263c <Cl_deactivate_prep_alarms+0x14c>)
   a25b4:	4798      	blx	r3
   a25b6:	4603      	mov	r3, r0
   a25b8:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(TEMP2_HIGH_THRESHOLD,false );
   a25ba:	2011      	movs	r0, #17
   a25bc:	2100      	movs	r1, #0
   a25be:	4b1f      	ldr	r3, [pc, #124]	; (a263c <Cl_deactivate_prep_alarms+0x14c>)
   a25c0:	4798      	blx	r3
   a25c2:	4603      	mov	r3, r0
   a25c4:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(TEMP2_LOW_THRESHOLD,false );
   a25c6:	2012      	movs	r0, #18
   a25c8:	2100      	movs	r1, #0
   a25ca:	4b1c      	ldr	r3, [pc, #112]	; (a263c <Cl_deactivate_prep_alarms+0x14c>)
   a25cc:	4798      	blx	r3
   a25ce:	4603      	mov	r3, r0
   a25d0:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(TEMP3_HIGH_THRESHOLD,false );
   a25d2:	2013      	movs	r0, #19
   a25d4:	2100      	movs	r1, #0
   a25d6:	4b19      	ldr	r3, [pc, #100]	; (a263c <Cl_deactivate_prep_alarms+0x14c>)
   a25d8:	4798      	blx	r3
   a25da:	4603      	mov	r3, r0
   a25dc:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(TEMP3_LOW_THRESHOLD,false );
   a25de:	2014      	movs	r0, #20
   a25e0:	2100      	movs	r1, #0
   a25e2:	4b16      	ldr	r3, [pc, #88]	; (a263c <Cl_deactivate_prep_alarms+0x14c>)
   a25e4:	4798      	blx	r3
   a25e6:	4603      	mov	r3, r0
   a25e8:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(COND_STATUS_HIGH,false );
   a25ea:	2008      	movs	r0, #8
   a25ec:	2100      	movs	r1, #0
   a25ee:	4b13      	ldr	r3, [pc, #76]	; (a263c <Cl_deactivate_prep_alarms+0x14c>)
   a25f0:	4798      	blx	r3
   a25f2:	4603      	mov	r3, r0
   a25f4:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(COND_STATUS_LOW,false );
   a25f6:	2007      	movs	r0, #7
   a25f8:	2100      	movs	r1, #0
   a25fa:	4b10      	ldr	r3, [pc, #64]	; (a263c <Cl_deactivate_prep_alarms+0x14c>)
   a25fc:	4798      	blx	r3
   a25fe:	4603      	mov	r3, r0
   a2600:	71fb      	strb	r3, [r7, #7]
			
			
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(FLOW_HIGH_FLOWRATE,false );
   a2602:	200e      	movs	r0, #14
   a2604:	2100      	movs	r1, #0
   a2606:	4b0d      	ldr	r3, [pc, #52]	; (a263c <Cl_deactivate_prep_alarms+0x14c>)
   a2608:	4798      	blx	r3
   a260a:	4603      	mov	r3, r0
   a260c:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(FLOW_NO_FLOW,false );
   a260e:	200c      	movs	r0, #12
   a2610:	2100      	movs	r1, #0
   a2612:	4b0a      	ldr	r3, [pc, #40]	; (a263c <Cl_deactivate_prep_alarms+0x14c>)
   a2614:	4798      	blx	r3
   a2616:	4603      	mov	r3, r0
   a2618:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,false );
   a261a:	200d      	movs	r0, #13
   a261c:	2100      	movs	r1, #0
   a261e:	4b07      	ldr	r3, [pc, #28]	; (a263c <Cl_deactivate_prep_alarms+0x14c>)
   a2620:	4798      	blx	r3
   a2622:	4603      	mov	r3, r0
   a2624:	71fb      	strb	r3, [r7, #7]
			Cl_dprepretcode =  Cl_AlarmActivateAlarms(FLOW_HIGH_FLOWRATE,false );
   a2626:	200e      	movs	r0, #14
   a2628:	2100      	movs	r1, #0
   a262a:	4b04      	ldr	r3, [pc, #16]	; (a263c <Cl_deactivate_prep_alarms+0x14c>)
   a262c:	4798      	blx	r3
   a262e:	4603      	mov	r3, r0
   a2630:	71fb      	strb	r3, [r7, #7]
	
	
	
}
   a2632:	4618      	mov	r0, r3
   a2634:	3708      	adds	r7, #8
   a2636:	46bd      	mov	sp, r7
   a2638:	bd80      	pop	{r7, pc}
   a263a:	bf00      	nop
   a263c:	00082e61 	.word	0x00082e61

000a2640 <Cl_Rinse_Controller>:
	{CONSOLE_SYNC_LOST,CL_ALARM_ALERT,false,false,false}                        // added on 18.03.17
			
};

Cl_ReturnCodeType Cl_Rinse_Controller(Cl_Mac_EventsType Cl_MacRinseEvent   )
{
   a2640:	b580      	push	{r7, lr}
   a2642:	b092      	sub	sp, #72	; 0x48
   a2644:	af00      	add	r7, sp, #0
   a2646:	4603      	mov	r3, r0
   a2648:	71fb      	strb	r3, [r7, #7]
	
	Cl_ReturnCodeType  Cl_rinseretcode = CL_OK;
   a264a:	2300      	movs	r3, #0
   a264c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	Cl_Rinse_Eevents cl_rinseevent = EVENT_NULL;
   a2650:	2300      	movs	r3, #0
   a2652:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
	Cl_NewAlarmIdType cl_rinsealarmid;
	ClRinseAlarmIdType ClRinseAlarmId;

	
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a2656:	2351      	movs	r3, #81	; 0x51
   a2658:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	Cl_Uint8Type dataarray[4] = {0,0,0,0};
   a265c:	2300      	movs	r3, #0
   a265e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
   a2662:	2300      	movs	r3, #0
   a2664:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
   a2668:	2300      	movs	r3, #0
   a266a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
   a266e:	2300      	movs	r3, #0
   a2670:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	Cl_Uint8Type data = 0;
   a2674:	2300      	movs	r3, #0
   a2676:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	Cl_BoolType alarmstatus1 = false,alarmstatus2 = false,alarmstatus3 = false, flowstatus = false;
   a267a:	2300      	movs	r3, #0
   a267c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
   a2680:	2300      	movs	r3, #0
   a2682:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
   a2686:	2300      	movs	r3, #0
   a2688:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
   a268c:	2300      	movs	r3, #0
   a268e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38

StateDatatype abfdata;
Cl_Uint8Type abfdataarray[5] =  {0,0,0,0,0};
   a2692:	2300      	movs	r3, #0
   a2694:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
   a2698:	2300      	movs	r3, #0
   a269a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
   a269e:	2300      	movs	r3, #0
   a26a0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
   a26a4:	2300      	movs	r3, #0
   a26a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   a26aa:	2300      	movs	r3, #0
   a26ac:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30


cl_rinse_translatemacevent( Cl_MacRinseEvent, &cl_rinseevent);
   a26b0:	79fa      	ldrb	r2, [r7, #7]
   a26b2:	f107 0341 	add.w	r3, r7, #65	; 0x41
   a26b6:	4610      	mov	r0, r2
   a26b8:	4619      	mov	r1, r3
   a26ba:	4bc1      	ldr	r3, [pc, #772]	; (a29c0 <Cl_Rinse_Controller+0x380>)
   a26bc:	4798      	blx	r3

switch(cl_rinseevent)
   a26be:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   a26c2:	3b21      	subs	r3, #33	; 0x21
   a26c4:	2b3b      	cmp	r3, #59	; 0x3b
   a26c6:	f200 8149 	bhi.w	a295c <Cl_Rinse_Controller+0x31c>
   a26ca:	a201      	add	r2, pc, #4	; (adr r2, a26d0 <Cl_Rinse_Controller+0x90>)
   a26cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a26d0:	000a27c1 	.word	0x000a27c1
   a26d4:	000a27d9 	.word	0x000a27d9
   a26d8:	000a27f1 	.word	0x000a27f1
   a26dc:	000a282f 	.word	0x000a282f
   a26e0:	000a288f 	.word	0x000a288f
   a26e4:	000a2899 	.word	0x000a2899
   a26e8:	000a295d 	.word	0x000a295d
   a26ec:	000a295d 	.word	0x000a295d
   a26f0:	000a295d 	.word	0x000a295d
   a26f4:	000a295d 	.word	0x000a295d
   a26f8:	000a295d 	.word	0x000a295d
   a26fc:	000a295d 	.word	0x000a295d
   a2700:	000a295d 	.word	0x000a295d
   a2704:	000a295d 	.word	0x000a295d
   a2708:	000a295d 	.word	0x000a295d
   a270c:	000a295d 	.word	0x000a295d
   a2710:	000a295d 	.word	0x000a295d
   a2714:	000a295d 	.word	0x000a295d
   a2718:	000a295d 	.word	0x000a295d
   a271c:	000a295d 	.word	0x000a295d
   a2720:	000a295d 	.word	0x000a295d
   a2724:	000a295d 	.word	0x000a295d
   a2728:	000a295d 	.word	0x000a295d
   a272c:	000a295d 	.word	0x000a295d
   a2730:	000a295d 	.word	0x000a295d
   a2734:	000a295d 	.word	0x000a295d
   a2738:	000a295d 	.word	0x000a295d
   a273c:	000a295d 	.word	0x000a295d
   a2740:	000a295d 	.word	0x000a295d
   a2744:	000a295d 	.word	0x000a295d
   a2748:	000a295d 	.word	0x000a295d
   a274c:	000a295d 	.word	0x000a295d
   a2750:	000a295d 	.word	0x000a295d
   a2754:	000a295d 	.word	0x000a295d
   a2758:	000a295d 	.word	0x000a295d
   a275c:	000a295d 	.word	0x000a295d
   a2760:	000a295d 	.word	0x000a295d
   a2764:	000a295d 	.word	0x000a295d
   a2768:	000a295d 	.word	0x000a295d
   a276c:	000a295d 	.word	0x000a295d
   a2770:	000a295d 	.word	0x000a295d
   a2774:	000a295d 	.word	0x000a295d
   a2778:	000a295d 	.word	0x000a295d
   a277c:	000a295d 	.word	0x000a295d
   a2780:	000a295d 	.word	0x000a295d
   a2784:	000a295d 	.word	0x000a295d
   a2788:	000a295d 	.word	0x000a295d
   a278c:	000a295d 	.word	0x000a295d
   a2790:	000a295d 	.word	0x000a295d
   a2794:	000a295d 	.word	0x000a295d
   a2798:	000a295d 	.word	0x000a295d
   a279c:	000a295d 	.word	0x000a295d
   a27a0:	000a295d 	.word	0x000a295d
   a27a4:	000a295d 	.word	0x000a295d
   a27a8:	000a295d 	.word	0x000a295d
   a27ac:	000a295d 	.word	0x000a295d
   a27b0:	000a295d 	.word	0x000a295d
   a27b4:	000a295d 	.word	0x000a295d
   a27b8:	000a28a3 	.word	0x000a28a3
   a27bc:	000a2901 	.word	0x000a2901
{
	
	case EVT_RINSE_COMMAND_SET_BLDPMP_ON:
	Cl_rinseretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true);
   a27c0:	2001      	movs	r0, #1
   a27c2:	2101      	movs	r1, #1
   a27c4:	4b7f      	ldr	r3, [pc, #508]	; (a29c4 <Cl_Rinse_Controller+0x384>)
   a27c6:	4798      	blx	r3
   a27c8:	4603      	mov	r3, r0
   a27ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
	cl_bp_controller(CL_BP_EVENT_START,0);
   a27ce:	2002      	movs	r0, #2
   a27d0:	2100      	movs	r1, #0
   a27d2:	4b7d      	ldr	r3, [pc, #500]	; (a29c8 <Cl_Rinse_Controller+0x388>)
   a27d4:	4798      	blx	r3
	break;
   a27d6:	e0c2      	b.n	a295e <Cl_Rinse_Controller+0x31e>
	case EVT_RINSE_COMMAND_SET_BLDPMP_OFF:
	Cl_rinseretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,false);
   a27d8:	2001      	movs	r0, #1
   a27da:	2100      	movs	r1, #0
   a27dc:	4b79      	ldr	r3, [pc, #484]	; (a29c4 <Cl_Rinse_Controller+0x384>)
   a27de:	4798      	blx	r3
   a27e0:	4603      	mov	r3, r0
   a27e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	cl_bp_controller(CL_BP_EVENT_STOP,0);
   a27e6:	2004      	movs	r0, #4
   a27e8:	2100      	movs	r1, #0
   a27ea:	4b77      	ldr	r3, [pc, #476]	; (a29c8 <Cl_Rinse_Controller+0x388>)
   a27ec:	4798      	blx	r3
//	Cl_RinseAlarmTable[CL_RINSE_ALARM_BLOODDOOR_STATUS_OPEN].IsActive = false;
	break;
   a27ee:	e0b6      	b.n	a295e <Cl_Rinse_Controller+0x31e>
	case EVT_RINSE_COMMAND_SET_BLDPUMPRATE:
	if(Cl_ConsoleRxMsg.msgready == true)
   a27f0:	4b76      	ldr	r3, [pc, #472]	; (a29cc <Cl_Rinse_Controller+0x38c>)
   a27f2:	7e1b      	ldrb	r3, [r3, #24]
   a27f4:	2b00      	cmp	r3, #0
   a27f6:	d019      	beq.n	a282c <Cl_Rinse_Controller+0x1ec>
	{
		
		cl_Datastreamtype cl_temp  ;
		cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   a27f8:	4b74      	ldr	r3, [pc, #464]	; (a29cc <Cl_Rinse_Controller+0x38c>)
   a27fa:	791b      	ldrb	r3, [r3, #4]
   a27fc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
		cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[1];
   a2800:	4b72      	ldr	r3, [pc, #456]	; (a29cc <Cl_Rinse_Controller+0x38c>)
   a2802:	795b      	ldrb	r3, [r3, #5]
   a2804:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[2];
   a2808:	4b70      	ldr	r3, [pc, #448]	; (a29cc <Cl_Rinse_Controller+0x38c>)
   a280a:	799b      	ldrb	r3, [r3, #6]
   a280c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
		cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
   a2810:	4b6e      	ldr	r3, [pc, #440]	; (a29cc <Cl_Rinse_Controller+0x38c>)
   a2812:	79db      	ldrb	r3, [r3, #7]
   a2814:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,cl_temp.Twobyte);
   a2818:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
   a281a:	2001      	movs	r0, #1
   a281c:	4619      	mov	r1, r3
   a281e:	4b6a      	ldr	r3, [pc, #424]	; (a29c8 <Cl_Rinse_Controller+0x388>)
   a2820:	4798      	blx	r3
		Treatdata[ID_bloodrate] = cl_temp.Twobyte;
   a2822:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
   a2824:	461a      	mov	r2, r3
   a2826:	4b6a      	ldr	r3, [pc, #424]	; (a29d0 <Cl_Rinse_Controller+0x390>)
   a2828:	63da      	str	r2, [r3, #60]	; 0x3c
	}
	break;
   a282a:	e098      	b.n	a295e <Cl_Rinse_Controller+0x31e>
   a282c:	e097      	b.n	a295e <Cl_Rinse_Controller+0x31e>
	
	case EVENT_RINSE_HEP_PMP_START:
	if(Cl_ConsoleRxMsg.msgready == true)
   a282e:	4b67      	ldr	r3, [pc, #412]	; (a29cc <Cl_Rinse_Controller+0x38c>)
   a2830:	7e1b      	ldrb	r3, [r3, #24]
   a2832:	2b00      	cmp	r3, #0
   a2834:	d02a      	beq.n	a288c <Cl_Rinse_Controller+0x24c>
			
	{
		cl_Datastreamtype cl_temp  ;
		cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[1];
   a2836:	4b65      	ldr	r3, [pc, #404]	; (a29cc <Cl_Rinse_Controller+0x38c>)
   a2838:	795b      	ldrb	r3, [r3, #5]
   a283a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[2];
   a283e:	4b63      	ldr	r3, [pc, #396]	; (a29cc <Cl_Rinse_Controller+0x38c>)
   a2840:	799b      	ldrb	r3, [r3, #6]
   a2842:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[3];
   a2846:	4b61      	ldr	r3, [pc, #388]	; (a29cc <Cl_Rinse_Controller+0x38c>)
   a2848:	79db      	ldrb	r3, [r3, #7]
   a284a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[4];
   a284e:	4b5f      	ldr	r3, [pc, #380]	; (a29cc <Cl_Rinse_Controller+0x38c>)
   a2850:	7a1b      	ldrb	r3, [r3, #8]
   a2852:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				
		if(Cl_ConsoleRxMsg.data.byte[0] == 1)
   a2856:	4b5d      	ldr	r3, [pc, #372]	; (a29cc <Cl_Rinse_Controller+0x38c>)
   a2858:	791b      	ldrb	r3, [r3, #4]
   a285a:	2b01      	cmp	r3, #1
   a285c:	d104      	bne.n	a2868 <Cl_Rinse_Controller+0x228>
		{
			cl_hep_controller(CL_HEP_EVENT_GO_TO_LEFTEND,0);
   a285e:	2001      	movs	r0, #1
   a2860:	2100      	movs	r1, #0
   a2862:	4b5c      	ldr	r3, [pc, #368]	; (a29d4 <Cl_Rinse_Controller+0x394>)
   a2864:	4798      	blx	r3
   a2866:	e011      	b.n	a288c <Cl_Rinse_Controller+0x24c>
					
		}
		else if(Cl_ConsoleRxMsg.data.byte[0] == 2)
   a2868:	4b58      	ldr	r3, [pc, #352]	; (a29cc <Cl_Rinse_Controller+0x38c>)
   a286a:	791b      	ldrb	r3, [r3, #4]
   a286c:	2b02      	cmp	r3, #2
   a286e:	d104      	bne.n	a287a <Cl_Rinse_Controller+0x23a>
		{
			cl_hep_controller(CL_HEP_EVENT_GO_TO_RIGHTEND,0);
   a2870:	2004      	movs	r0, #4
   a2872:	2100      	movs	r1, #0
   a2874:	4b57      	ldr	r3, [pc, #348]	; (a29d4 <Cl_Rinse_Controller+0x394>)
   a2876:	4798      	blx	r3
   a2878:	e008      	b.n	a288c <Cl_Rinse_Controller+0x24c>
		}
		else if(Cl_ConsoleRxMsg.data.byte[0] == 0)
   a287a:	4b54      	ldr	r3, [pc, #336]	; (a29cc <Cl_Rinse_Controller+0x38c>)
   a287c:	791b      	ldrb	r3, [r3, #4]
   a287e:	2b00      	cmp	r3, #0
   a2880:	d104      	bne.n	a288c <Cl_Rinse_Controller+0x24c>
		{
			cl_hep_controller(CL_HEP_EVENT_START_NORMAL_DELIVERY,0);
   a2882:	200a      	movs	r0, #10
   a2884:	2100      	movs	r1, #0
   a2886:	4b53      	ldr	r3, [pc, #332]	; (a29d4 <Cl_Rinse_Controller+0x394>)
   a2888:	4798      	blx	r3
		}
				
	}
			
			
	break;
   a288a:	e068      	b.n	a295e <Cl_Rinse_Controller+0x31e>
   a288c:	e067      	b.n	a295e <Cl_Rinse_Controller+0x31e>
	case EVENT_RINSE_HEP_PMP_STOP:
	cl_hep_controller(CL_HEP_EVENT_STOP_NORMAL_DELIVERY,0);
   a288e:	200c      	movs	r0, #12
   a2890:	2100      	movs	r1, #0
   a2892:	4b50      	ldr	r3, [pc, #320]	; (a29d4 <Cl_Rinse_Controller+0x394>)
   a2894:	4798      	blx	r3
	break;
   a2896:	e062      	b.n	a295e <Cl_Rinse_Controller+0x31e>
	case EVENT_RINSE_HEP_PMP_BLOUS:
	cl_hep_controller(CL_HEP_EVENT_STARTBOLUS,0);
   a2898:	2007      	movs	r0, #7
   a289a:	2100      	movs	r1, #0
   a289c:	4b4d      	ldr	r3, [pc, #308]	; (a29d4 <Cl_Rinse_Controller+0x394>)
   a289e:	4798      	blx	r3
	break;
   a28a0:	e05d      	b.n	a295e <Cl_Rinse_Controller+0x31e>
	
		case EVT_CONSOLE_COMMAND_SET_BLDPUMPINC_MANUAL:
		
		if(Treatdata[ID_bloodrate] <= 450){
   a28a2:	4b4b      	ldr	r3, [pc, #300]	; (a29d0 <Cl_Rinse_Controller+0x390>)
   a28a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   a28a6:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
   a28aa:	d828      	bhi.n	a28fe <Cl_Rinse_Controller+0x2be>
			
			Treatdata[ID_bloodrate] = Treatdata[ID_bloodrate] + 10;
   a28ac:	4b48      	ldr	r3, [pc, #288]	; (a29d0 <Cl_Rinse_Controller+0x390>)
   a28ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   a28b0:	330a      	adds	r3, #10
   a28b2:	4a47      	ldr	r2, [pc, #284]	; (a29d0 <Cl_Rinse_Controller+0x390>)
   a28b4:	63d3      	str	r3, [r2, #60]	; 0x3c
			cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,Treatdata[ID_bloodrate]);
   a28b6:	4b46      	ldr	r3, [pc, #280]	; (a29d0 <Cl_Rinse_Controller+0x390>)
   a28b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   a28ba:	2001      	movs	r0, #1
   a28bc:	4619      	mov	r1, r3
   a28be:	4b42      	ldr	r3, [pc, #264]	; (a29c8 <Cl_Rinse_Controller+0x388>)
   a28c0:	4798      	blx	r3
			
			// send blood rate data to console
			
			
			abfdataarray[0] = CON_RX_PARAM_DATA_ABF_RATE;
   a28c2:	230f      	movs	r3, #15
   a28c4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			abfdata.fourbytedata = Treatdata[ID_bloodrate];
   a28c8:	4b41      	ldr	r3, [pc, #260]	; (a29d0 <Cl_Rinse_Controller+0x390>)
   a28ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   a28cc:	637b      	str	r3, [r7, #52]	; 0x34
			abfdataarray[1] = abfdata.bytedata[0];
   a28ce:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
   a28d2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			abfdataarray[2] = abfdata.bytedata[1];
   a28d6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
   a28da:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			abfdataarray[3] = abfdata.bytedata[2];
   a28de:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
   a28e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			abfdataarray[4] = abfdata.bytedata[3];
   a28e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
   a28ea:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
			
			Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&abfdataarray,5);
   a28ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   a28f2:	202a      	movs	r0, #42	; 0x2a
   a28f4:	4619      	mov	r1, r3
   a28f6:	2205      	movs	r2, #5
   a28f8:	4b37      	ldr	r3, [pc, #220]	; (a29d8 <Cl_Rinse_Controller+0x398>)
   a28fa:	4798      	blx	r3
			
		}
		
		cl_rinseevent == EVENT_NULL;
		break;
   a28fc:	e02f      	b.n	a295e <Cl_Rinse_Controller+0x31e>
   a28fe:	e02e      	b.n	a295e <Cl_Rinse_Controller+0x31e>
		
		case EVT_CONSOLE_COMMAND_SET_BLDPUMPDEC_MANUAL:
		
		if(Treatdata[ID_bloodrate] >= 100){
   a2900:	4b33      	ldr	r3, [pc, #204]	; (a29d0 <Cl_Rinse_Controller+0x390>)
   a2902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   a2904:	2b63      	cmp	r3, #99	; 0x63
   a2906:	d928      	bls.n	a295a <Cl_Rinse_Controller+0x31a>
			
			Treatdata[ID_bloodrate] = Treatdata[ID_bloodrate] - 10;
   a2908:	4b31      	ldr	r3, [pc, #196]	; (a29d0 <Cl_Rinse_Controller+0x390>)
   a290a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   a290c:	3b0a      	subs	r3, #10
   a290e:	4a30      	ldr	r2, [pc, #192]	; (a29d0 <Cl_Rinse_Controller+0x390>)
   a2910:	63d3      	str	r3, [r2, #60]	; 0x3c
			cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,Treatdata[ID_bloodrate]);
   a2912:	4b2f      	ldr	r3, [pc, #188]	; (a29d0 <Cl_Rinse_Controller+0x390>)
   a2914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   a2916:	2001      	movs	r0, #1
   a2918:	4619      	mov	r1, r3
   a291a:	4b2b      	ldr	r3, [pc, #172]	; (a29c8 <Cl_Rinse_Controller+0x388>)
   a291c:	4798      	blx	r3
			
			
			abfdataarray[0] = CON_RX_PARAM_DATA_ABF_RATE;
   a291e:	230f      	movs	r3, #15
   a2920:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			abfdata.fourbytedata = Treatdata[ID_bloodrate];
   a2924:	4b2a      	ldr	r3, [pc, #168]	; (a29d0 <Cl_Rinse_Controller+0x390>)
   a2926:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   a2928:	637b      	str	r3, [r7, #52]	; 0x34
			abfdataarray[1] = abfdata.bytedata[0];
   a292a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
   a292e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			abfdataarray[2] = abfdata.bytedata[1];
   a2932:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
   a2936:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			abfdataarray[3] = abfdata.bytedata[2];
   a293a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
   a293e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			abfdataarray[4] = abfdata.bytedata[3];
   a2942:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
   a2946:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
			
			Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&abfdataarray,5);
   a294a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
   a294e:	202a      	movs	r0, #42	; 0x2a
   a2950:	4619      	mov	r1, r3
   a2952:	2205      	movs	r2, #5
   a2954:	4b20      	ldr	r3, [pc, #128]	; (a29d8 <Cl_Rinse_Controller+0x398>)
   a2956:	4798      	blx	r3
		}
		
		cl_rinseevent == EVENT_NULL;
		break;
   a2958:	e001      	b.n	a295e <Cl_Rinse_Controller+0x31e>
   a295a:	e000      	b.n	a295e <Cl_Rinse_Controller+0x31e>
		
	
	
	default:break;	
   a295c:	bf00      	nop
}

if(cl_rinseevent == EVENT_RINSE_TICK_SECOND)
   a295e:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   a2962:	2b12      	cmp	r3, #18
   a2964:	d10f      	bne.n	a2986 <Cl_Rinse_Controller+0x346>
{
	Rinsestatedummy = cl_rinsestate;
   a2966:	4b1d      	ldr	r3, [pc, #116]	; (a29dc <Cl_Rinse_Controller+0x39c>)
   a2968:	781a      	ldrb	r2, [r3, #0]
   a296a:	4b1d      	ldr	r3, [pc, #116]	; (a29e0 <Cl_Rinse_Controller+0x3a0>)
   a296c:	701a      	strb	r2, [r3, #0]
	//Cl_rinseretcode =  Cl_AlarmResetAlarm( SENSOR_TEMP3STATUS );
	Cl_rinseretcode =  Cl_AlarmResetAlarm( LEVELSWITCH_OFF_TO_ON );
   a296e:	203d      	movs	r0, #61	; 0x3d
   a2970:	4b1c      	ldr	r3, [pc, #112]	; (a29e4 <Cl_Rinse_Controller+0x3a4>)
   a2972:	4798      	blx	r3
   a2974:	4603      	mov	r3, r0
   a2976:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	Cl_rinseretcode =  Cl_AlarmResetAlarm( LEVELSWITCH_ON_TO_OFF );
   a297a:	203e      	movs	r0, #62	; 0x3e
   a297c:	4b19      	ldr	r3, [pc, #100]	; (a29e4 <Cl_Rinse_Controller+0x3a4>)
   a297e:	4798      	blx	r3
   a2980:	4603      	mov	r3, r0
   a2982:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47


}


switch(cl_rinsestate)
   a2986:	4b15      	ldr	r3, [pc, #84]	; (a29dc <Cl_Rinse_Controller+0x39c>)
   a2988:	781b      	ldrb	r3, [r3, #0]
   a298a:	2b09      	cmp	r3, #9
   a298c:	f201 800c 	bhi.w	a39a8 <Cl_Rinse_Controller+0x1368>
   a2990:	a201      	add	r2, pc, #4	; (adr r2, a2998 <Cl_Rinse_Controller+0x358>)
   a2992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a2996:	bf00      	nop
   a2998:	000a29e9 	.word	0x000a29e9
   a299c:	000a3ab5 	.word	0x000a3ab5
   a29a0:	000a39a9 	.word	0x000a39a9
   a29a4:	000a2be5 	.word	0x000a2be5
   a29a8:	000a2be5 	.word	0x000a2be5
   a29ac:	000a2be5 	.word	0x000a2be5
   a29b0:	000a32a1 	.word	0x000a32a1
   a29b4:	000a39a9 	.word	0x000a39a9
   a29b8:	000a39a9 	.word	0x000a39a9
   a29bc:	000a357d 	.word	0x000a357d
   a29c0:	000a3ad9 	.word	0x000a3ad9
   a29c4:	00082e61 	.word	0x00082e61
   a29c8:	00093305 	.word	0x00093305
   a29cc:	200723f0 	.word	0x200723f0
   a29d0:	2007265c 	.word	0x2007265c
   a29d4:	00093a0d 	.word	0x00093a0d
   a29d8:	0009ba51 	.word	0x0009ba51
   a29dc:	20071c9e 	.word	0x20071c9e
   a29e0:	200725be 	.word	0x200725be
   a29e4:	00082f51 	.word	0x00082f51
{

		case CL_RINSE_STATE_INIT:
		break;
		case CL_RINSE_STATE_IDLE:
		switch (cl_rinseevent)
   a29e8:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   a29ec:	3b02      	subs	r3, #2
   a29ee:	2b15      	cmp	r3, #21
   a29f0:	f200 80f5 	bhi.w	a2bde <Cl_Rinse_Controller+0x59e>
   a29f4:	a201      	add	r2, pc, #4	; (adr r2, a29fc <Cl_Rinse_Controller+0x3bc>)
   a29f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a29fa:	bf00      	nop
   a29fc:	000a2b1f 	.word	0x000a2b1f
   a2a00:	000a2bdf 	.word	0x000a2bdf
   a2a04:	000a2baf 	.word	0x000a2baf
   a2a08:	000a2bc1 	.word	0x000a2bc1
   a2a0c:	000a2bdf 	.word	0x000a2bdf
   a2a10:	000a2bdf 	.word	0x000a2bdf
   a2a14:	000a2bdf 	.word	0x000a2bdf
   a2a18:	000a2bdf 	.word	0x000a2bdf
   a2a1c:	000a2bdf 	.word	0x000a2bdf
   a2a20:	000a2bdf 	.word	0x000a2bdf
   a2a24:	000a2bdf 	.word	0x000a2bdf
   a2a28:	000a2bdf 	.word	0x000a2bdf
   a2a2c:	000a2bdf 	.word	0x000a2bdf
   a2a30:	000a2bdf 	.word	0x000a2bdf
   a2a34:	000a2bdf 	.word	0x000a2bdf
   a2a38:	000a2bdf 	.word	0x000a2bdf
   a2a3c:	000a2bdf 	.word	0x000a2bdf
   a2a40:	000a2bdf 	.word	0x000a2bdf
   a2a44:	000a2bdf 	.word	0x000a2bdf
   a2a48:	000a2bdf 	.word	0x000a2bdf
   a2a4c:	000a2bd3 	.word	0x000a2bd3
   a2a50:	000a2a55 	.word	0x000a2a55
			{
				case EVT_RINSE_GET_DATA:
						if(Cl_ConsoleRxMsg.msgready == true)
   a2a54:	4bb3      	ldr	r3, [pc, #716]	; (a2d24 <Cl_Rinse_Controller+0x6e4>)
   a2a56:	7e1b      	ldrb	r3, [r3, #24]
   a2a58:	2b00      	cmp	r3, #0
   a2a5a:	d05f      	beq.n	a2b1c <Cl_Rinse_Controller+0x4dc>
						{
							
							switch(Cl_ConsoleRxMsg.data.byte[0])
   a2a5c:	4bb1      	ldr	r3, [pc, #708]	; (a2d24 <Cl_Rinse_Controller+0x6e4>)
   a2a5e:	791b      	ldrb	r3, [r3, #4]
   a2a60:	2b02      	cmp	r3, #2
   a2a62:	d021      	beq.n	a2aa8 <Cl_Rinse_Controller+0x468>
   a2a64:	2b21      	cmp	r3, #33	; 0x21
   a2a66:	d03c      	beq.n	a2ae2 <Cl_Rinse_Controller+0x4a2>
   a2a68:	2b01      	cmp	r3, #1
   a2a6a:	d000      	beq.n	a2a6e <Cl_Rinse_Controller+0x42e>
								dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;
								Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DISINF_STATUS, &dataarray[1]);
								Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);	
								break;							
								default:
								break;
   a2a6c:	e056      	b.n	a2b1c <Cl_Rinse_Controller+0x4dc>
						{
							
							switch(Cl_ConsoleRxMsg.data.byte[0])
							{
								case CON_RX_PARAM_DATA_RINSE_STATUS:
								command = CON_TX_COMMAND_SYSDATA;
   a2a6e:	2316      	movs	r3, #22
   a2a70:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
								dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   a2a74:	2301      	movs	r3, #1
   a2a76:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
								Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a2a7a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   a2a7e:	3301      	adds	r3, #1
   a2a80:	2001      	movs	r0, #1
   a2a82:	4619      	mov	r1, r3
   a2a84:	4ba8      	ldr	r3, [pc, #672]	; (a2d28 <Cl_Rinse_Controller+0x6e8>)
   a2a86:	4798      	blx	r3
   a2a88:	4603      	mov	r3, r0
   a2a8a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   a2a8e:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   a2a92:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   a2a96:	4610      	mov	r0, r2
   a2a98:	4619      	mov	r1, r3
   a2a9a:	2202      	movs	r2, #2
   a2a9c:	4ba3      	ldr	r3, [pc, #652]	; (a2d2c <Cl_Rinse_Controller+0x6ec>)
   a2a9e:	4798      	blx	r3
   a2aa0:	4603      	mov	r3, r0
   a2aa2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								
								break;
   a2aa6:	e039      	b.n	a2b1c <Cl_Rinse_Controller+0x4dc>
								case CON_RX_PARAM_DATA_PRIME_STATUS:
								command = CON_TX_COMMAND_SYSDATA;
   a2aa8:	2316      	movs	r3, #22
   a2aaa:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
								dataarray[0] = CON_TX_PARAM_DATA_PRIME_STATUS;
   a2aae:	2302      	movs	r3, #2
   a2ab0:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
								Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_PRIME_STATUS, &dataarray[1]);
   a2ab4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   a2ab8:	3301      	adds	r3, #1
   a2aba:	2002      	movs	r0, #2
   a2abc:	4619      	mov	r1, r3
   a2abe:	4b9a      	ldr	r3, [pc, #616]	; (a2d28 <Cl_Rinse_Controller+0x6e8>)
   a2ac0:	4798      	blx	r3
   a2ac2:	4603      	mov	r3, r0
   a2ac4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);	
   a2ac8:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   a2acc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   a2ad0:	4610      	mov	r0, r2
   a2ad2:	4619      	mov	r1, r3
   a2ad4:	2202      	movs	r2, #2
   a2ad6:	4b95      	ldr	r3, [pc, #596]	; (a2d2c <Cl_Rinse_Controller+0x6ec>)
   a2ad8:	4798      	blx	r3
   a2ada:	4603      	mov	r3, r0
   a2adc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								break;
   a2ae0:	e01c      	b.n	a2b1c <Cl_Rinse_Controller+0x4dc>
								case CON_RX_PARAM_DATA_DISINF_STATUS:
								command = CON_TX_COMMAND_SYSDATA;
   a2ae2:	2316      	movs	r3, #22
   a2ae4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
								dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;
   a2ae8:	2323      	movs	r3, #35	; 0x23
   a2aea:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
								Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DISINF_STATUS, &dataarray[1]);
   a2aee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   a2af2:	3301      	adds	r3, #1
   a2af4:	2028      	movs	r0, #40	; 0x28
   a2af6:	4619      	mov	r1, r3
   a2af8:	4b8b      	ldr	r3, [pc, #556]	; (a2d28 <Cl_Rinse_Controller+0x6e8>)
   a2afa:	4798      	blx	r3
   a2afc:	4603      	mov	r3, r0
   a2afe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);	
   a2b02:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   a2b06:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   a2b0a:	4610      	mov	r0, r2
   a2b0c:	4619      	mov	r1, r3
   a2b0e:	2202      	movs	r2, #2
   a2b10:	4b86      	ldr	r3, [pc, #536]	; (a2d2c <Cl_Rinse_Controller+0x6ec>)
   a2b12:	4798      	blx	r3
   a2b14:	4603      	mov	r3, r0
   a2b16:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								break;							
   a2b1a:	bf00      	nop
								default:
								break;
							}
						}
				break;
   a2b1c:	e060      	b.n	a2be0 <Cl_Rinse_Controller+0x5a0>
				case EVENT_START_RINSE:
					if(Cl_ConsoleRxMsg.msgready == true)
   a2b1e:	4b81      	ldr	r3, [pc, #516]	; (a2d24 <Cl_Rinse_Controller+0x6e4>)
   a2b20:	7e1b      	ldrb	r3, [r3, #24]
   a2b22:	2b00      	cmp	r3, #0
   a2b24:	d00e      	beq.n	a2b44 <Cl_Rinse_Controller+0x504>
					{
//						cl_Datastreamtype cl_temp  ;

						cl_local.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   a2b26:	4b7f      	ldr	r3, [pc, #508]	; (a2d24 <Cl_Rinse_Controller+0x6e4>)
   a2b28:	791a      	ldrb	r2, [r3, #4]
   a2b2a:	4b81      	ldr	r3, [pc, #516]	; (a2d30 <Cl_Rinse_Controller+0x6f0>)
   a2b2c:	701a      	strb	r2, [r3, #0]
						if (cl_local.bytearray[0] == 1)
   a2b2e:	4b80      	ldr	r3, [pc, #512]	; (a2d30 <Cl_Rinse_Controller+0x6f0>)
   a2b30:	781b      	ldrb	r3, [r3, #0]
   a2b32:	2b01      	cmp	r3, #1
   a2b34:	d006      	beq.n	a2b44 <Cl_Rinse_Controller+0x504>
						{
						
						}
						else if (cl_local.bytearray[0] == 2)
   a2b36:	4b7e      	ldr	r3, [pc, #504]	; (a2d30 <Cl_Rinse_Controller+0x6f0>)
   a2b38:	781b      	ldrb	r3, [r3, #0]
   a2b3a:	2b02      	cmp	r3, #2
   a2b3c:	d102      	bne.n	a2b44 <Cl_Rinse_Controller+0x504>
						{
							hotrinse_flag = 1;
   a2b3e:	4b7d      	ldr	r3, [pc, #500]	; (a2d34 <Cl_Rinse_Controller+0x6f4>)
   a2b40:	2201      	movs	r2, #1
   a2b42:	701a      	strb	r2, [r3, #0]
						}
					
					}
					if( CL_OK == Cl_Rinse_StartRinse())
   a2b44:	4b7c      	ldr	r3, [pc, #496]	; (a2d38 <Cl_Rinse_Controller+0x6f8>)
   a2b46:	4798      	blx	r3
   a2b48:	4603      	mov	r3, r0
   a2b4a:	2b00      	cmp	r3, #0
   a2b4c:	d12c      	bne.n	a2ba8 <Cl_Rinse_Controller+0x568>
					{
											
						command = CON_TX_COMMAND_RINSE_CONFIRM;
   a2b4e:	2308      	movs	r3, #8
   a2b50:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
						data = (Cl_Uint8Type)COMMAND_RESULT_SUCCESS;
   a2b54:	2301      	movs	r3, #1
   a2b56:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
						Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,1);					
   a2b5a:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   a2b5e:	f107 033b 	add.w	r3, r7, #59	; 0x3b
   a2b62:	4610      	mov	r0, r2
   a2b64:	4619      	mov	r1, r3
   a2b66:	2201      	movs	r2, #1
   a2b68:	4b70      	ldr	r3, [pc, #448]	; (a2d2c <Cl_Rinse_Controller+0x6ec>)
   a2b6a:	4798      	blx	r3
   a2b6c:	4603      	mov	r3, r0
   a2b6e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						command = CON_TX_COMMAND_RINSE_STARTED;
   a2b72:	2309      	movs	r3, #9
   a2b74:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
						Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,0);
   a2b78:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   a2b7c:	f107 033b 	add.w	r3, r7, #59	; 0x3b
   a2b80:	4610      	mov	r0, r2
   a2b82:	4619      	mov	r1, r3
   a2b84:	2200      	movs	r2, #0
   a2b86:	4b69      	ldr	r3, [pc, #420]	; (a2d2c <Cl_Rinse_Controller+0x6ec>)
   a2b88:	4798      	blx	r3
   a2b8a:	4603      	mov	r3, r0
   a2b8c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						Cl_rinseretcode = Cl_Rinse_UpdateTimeInfo();
   a2b90:	4b6a      	ldr	r3, [pc, #424]	; (a2d3c <Cl_Rinse_Controller+0x6fc>)
   a2b92:	4798      	blx	r3
   a2b94:	4603      	mov	r3, r0
   a2b96:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						cl_rinsestate = CL_RINSE_STATE_RINSING;
   a2b9a:	4b69      	ldr	r3, [pc, #420]	; (a2d40 <Cl_Rinse_Controller+0x700>)
   a2b9c:	2203      	movs	r2, #3
   a2b9e:	701a      	strb	r2, [r3, #0]
						cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
   a2ba0:	4b68      	ldr	r3, [pc, #416]	; (a2d44 <Cl_Rinse_Controller+0x704>)
   a2ba2:	2201      	movs	r2, #1
   a2ba4:	701a      	strb	r2, [r3, #0]
					}
					else
					{
						return CL_REJECTED;
					}
				break;
   a2ba6:	e01b      	b.n	a2be0 <Cl_Rinse_Controller+0x5a0>
						cl_rinsestate = CL_RINSE_STATE_RINSING;
						cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
					}
					else
					{
						return CL_REJECTED;
   a2ba8:	2303      	movs	r3, #3
   a2baa:	f000 bf88 	b.w	a3abe <Cl_Rinse_Controller+0x147e>
					}
				break;
				case EVENT_START_PRE_DISINF_RINSE:
					Cl_Rinse_StartRinse();
   a2bae:	4b62      	ldr	r3, [pc, #392]	; (a2d38 <Cl_Rinse_Controller+0x6f8>)
   a2bb0:	4798      	blx	r3
					
					cl_rinsestate = CL_RINSE_STATE_PRE_DISINFECT_RINSING;
   a2bb2:	4b63      	ldr	r3, [pc, #396]	; (a2d40 <Cl_Rinse_Controller+0x700>)
   a2bb4:	2204      	movs	r2, #4
   a2bb6:	701a      	strb	r2, [r3, #0]
					cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
   a2bb8:	4b62      	ldr	r3, [pc, #392]	; (a2d44 <Cl_Rinse_Controller+0x704>)
   a2bba:	2201      	movs	r2, #1
   a2bbc:	701a      	strb	r2, [r3, #0]
				break;
   a2bbe:	e00f      	b.n	a2be0 <Cl_Rinse_Controller+0x5a0>
				case EVENT_START_POST_DISINF_RINSE:
						Cl_Rinse_StartRinse();
   a2bc0:	4b5d      	ldr	r3, [pc, #372]	; (a2d38 <Cl_Rinse_Controller+0x6f8>)
   a2bc2:	4798      	blx	r3
						cl_rinsestate = CL_RINSE_STATE_POST_DISINFECT_RINSING;
   a2bc4:	4b5e      	ldr	r3, [pc, #376]	; (a2d40 <Cl_Rinse_Controller+0x700>)
   a2bc6:	2205      	movs	r2, #5
   a2bc8:	701a      	strb	r2, [r3, #0]
						cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
   a2bca:	4b5e      	ldr	r3, [pc, #376]	; (a2d44 <Cl_Rinse_Controller+0x704>)
   a2bcc:	2201      	movs	r2, #1
   a2bce:	701a      	strb	r2, [r3, #0]
				break;
   a2bd0:	e006      	b.n	a2be0 <Cl_Rinse_Controller+0x5a0>
				case EVENT_RINSE_ALARM:
				// check for rinse alarms and update rinse alarm table
					Cl_rinseretcode = Cl_Rinse_ProcessAlarms();
   a2bd2:	4b5d      	ldr	r3, [pc, #372]	; (a2d48 <Cl_Rinse_Controller+0x708>)
   a2bd4:	4798      	blx	r3
   a2bd6:	4603      	mov	r3, r0
   a2bd8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				break;
   a2bdc:	e000      	b.n	a2be0 <Cl_Rinse_Controller+0x5a0>
				default:
				break;
   a2bde:	bf00      	nop
			}                                 	
		break;
   a2be0:	f000 bf6b 	b.w	a3aba <Cl_Rinse_Controller+0x147a>
		
		case CL_RINSE_STATE_RINSING:
		case CL_RINSE_STATE_PRE_DISINFECT_RINSING:
		case CL_RINSE_STATE_POST_DISINFECT_RINSING:
				switch (cl_rinseevent)
   a2be4:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   a2be8:	3b06      	subs	r3, #6
   a2bea:	2b21      	cmp	r3, #33	; 0x21
   a2bec:	f200 8764 	bhi.w	a3ab8 <Cl_Rinse_Controller+0x1478>
   a2bf0:	a201      	add	r2, pc, #4	; (adr r2, a2bf8 <Cl_Rinse_Controller+0x5b8>)
   a2bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a2bf6:	bf00      	nop
   a2bf8:	000a3099 	.word	0x000a3099
   a2bfc:	000a3ab9 	.word	0x000a3ab9
   a2c00:	000a3ab9 	.word	0x000a3ab9
   a2c04:	000a3ab9 	.word	0x000a3ab9
   a2c08:	000a3ab9 	.word	0x000a3ab9
   a2c0c:	000a3ab9 	.word	0x000a3ab9
   a2c10:	000a3ab9 	.word	0x000a3ab9
   a2c14:	000a3ab9 	.word	0x000a3ab9
   a2c18:	000a3ab9 	.word	0x000a3ab9
   a2c1c:	000a2c81 	.word	0x000a2c81
   a2c20:	000a3ab9 	.word	0x000a3ab9
   a2c24:	000a2ca7 	.word	0x000a2ca7
   a2c28:	000a2d6d 	.word	0x000a2d6d
   a2c2c:	000a2f95 	.word	0x000a2f95
   a2c30:	000a3083 	.word	0x000a3083
   a2c34:	000a30ab 	.word	0x000a30ab
   a2c38:	000a309f 	.word	0x000a309f
   a2c3c:	000a3ab9 	.word	0x000a3ab9
   a2c40:	000a3ab9 	.word	0x000a3ab9
   a2c44:	000a3161 	.word	0x000a3161
   a2c48:	000a30df 	.word	0x000a30df
   a2c4c:	000a30f9 	.word	0x000a30f9
   a2c50:	000a31d5 	.word	0x000a31d5
   a2c54:	000a31df 	.word	0x000a31df
   a2c58:	000a31e9 	.word	0x000a31e9
   a2c5c:	000a3109 	.word	0x000a3109
   a2c60:	000a312d 	.word	0x000a312d
   a2c64:	000a3141 	.word	0x000a3141
   a2c68:	000a3151 	.word	0x000a3151
   a2c6c:	000a3ab9 	.word	0x000a3ab9
   a2c70:	000a3ab9 	.word	0x000a3ab9
   a2c74:	000a3ab9 	.word	0x000a3ab9
   a2c78:	000a3ab9 	.word	0x000a3ab9
   a2c7c:	000a321b 	.word	0x000a321b
// 										break;
// 									}
// 								}
// 						break;
						case EVENT_RINSE_TICK_50MS:
						if(cl_rinsing_substate == CL_RINSE_RINSING_BC_SWITCHING)
   a2c80:	4b30      	ldr	r3, [pc, #192]	; (a2d44 <Cl_Rinse_Controller+0x704>)
   a2c82:	781b      	ldrb	r3, [r3, #0]
   a2c84:	2b02      	cmp	r3, #2
   a2c86:	d10d      	bne.n	a2ca4 <Cl_Rinse_Controller+0x664>
						{
									cl_50ms_timer++;
   a2c88:	4b30      	ldr	r3, [pc, #192]	; (a2d4c <Cl_Rinse_Controller+0x70c>)
   a2c8a:	881b      	ldrh	r3, [r3, #0]
   a2c8c:	3301      	adds	r3, #1
   a2c8e:	b29a      	uxth	r2, r3
   a2c90:	4b2e      	ldr	r3, [pc, #184]	; (a2d4c <Cl_Rinse_Controller+0x70c>)
   a2c92:	801a      	strh	r2, [r3, #0]
									if(cl_50ms_timer == 2)
   a2c94:	4b2d      	ldr	r3, [pc, #180]	; (a2d4c <Cl_Rinse_Controller+0x70c>)
   a2c96:	881b      	ldrh	r3, [r3, #0]
   a2c98:	2b02      	cmp	r3, #2
   a2c9a:	d103      	bne.n	a2ca4 <Cl_Rinse_Controller+0x664>
									{
										cl_50ms_timer =0;
   a2c9c:	4b2b      	ldr	r3, [pc, #172]	; (a2d4c <Cl_Rinse_Controller+0x70c>)
   a2c9e:	2200      	movs	r2, #0
   a2ca0:	801a      	strh	r2, [r3, #0]
									//	sv_cntrl_deactivate_valve(VALVE_ID19);
									}
						} 
																	
						break;
   a2ca2:	e2be      	b.n	a3222 <Cl_Rinse_Controller+0xbe2>
   a2ca4:	e2bd      	b.n	a3222 <Cl_Rinse_Controller+0xbe2>
						case EVENT_RINSE_TICK_500MS:
							if ((avgtemp2_dummy > 75) && (avgtemp2_dummy < 76))
   a2ca6:	4b2a      	ldr	r3, [pc, #168]	; (a2d50 <Cl_Rinse_Controller+0x710>)
   a2ca8:	681a      	ldr	r2, [r3, #0]
   a2caa:	4b2a      	ldr	r3, [pc, #168]	; (a2d54 <Cl_Rinse_Controller+0x714>)
   a2cac:	4610      	mov	r0, r2
   a2cae:	492a      	ldr	r1, [pc, #168]	; (a2d58 <Cl_Rinse_Controller+0x718>)
   a2cb0:	4798      	blx	r3
   a2cb2:	4603      	mov	r3, r0
   a2cb4:	2b00      	cmp	r3, #0
   a2cb6:	d00d      	beq.n	a2cd4 <Cl_Rinse_Controller+0x694>
   a2cb8:	4b25      	ldr	r3, [pc, #148]	; (a2d50 <Cl_Rinse_Controller+0x710>)
   a2cba:	681a      	ldr	r2, [r3, #0]
   a2cbc:	4b27      	ldr	r3, [pc, #156]	; (a2d5c <Cl_Rinse_Controller+0x71c>)
   a2cbe:	4610      	mov	r0, r2
   a2cc0:	4927      	ldr	r1, [pc, #156]	; (a2d60 <Cl_Rinse_Controller+0x720>)
   a2cc2:	4798      	blx	r3
   a2cc4:	4603      	mov	r3, r0
   a2cc6:	2b00      	cmp	r3, #0
   a2cc8:	d004      	beq.n	a2cd4 <Cl_Rinse_Controller+0x694>
							{
								sv_cntrl_decheater(2200);
   a2cca:	f640 0098 	movw	r0, #2200	; 0x898
   a2cce:	4b25      	ldr	r3, [pc, #148]	; (a2d64 <Cl_Rinse_Controller+0x724>)
   a2cd0:	4798      	blx	r3
   a2cd2:	e025      	b.n	a2d20 <Cl_Rinse_Controller+0x6e0>
							}
							else if ((avgtemp2_dummy > 76) && (avgtemp2_dummy < 77))
   a2cd4:	4b1e      	ldr	r3, [pc, #120]	; (a2d50 <Cl_Rinse_Controller+0x710>)
   a2cd6:	681a      	ldr	r2, [r3, #0]
   a2cd8:	4b1e      	ldr	r3, [pc, #120]	; (a2d54 <Cl_Rinse_Controller+0x714>)
   a2cda:	4610      	mov	r0, r2
   a2cdc:	4920      	ldr	r1, [pc, #128]	; (a2d60 <Cl_Rinse_Controller+0x720>)
   a2cde:	4798      	blx	r3
   a2ce0:	4603      	mov	r3, r0
   a2ce2:	2b00      	cmp	r3, #0
   a2ce4:	d00d      	beq.n	a2d02 <Cl_Rinse_Controller+0x6c2>
   a2ce6:	4b1a      	ldr	r3, [pc, #104]	; (a2d50 <Cl_Rinse_Controller+0x710>)
   a2ce8:	681a      	ldr	r2, [r3, #0]
   a2cea:	4b1c      	ldr	r3, [pc, #112]	; (a2d5c <Cl_Rinse_Controller+0x71c>)
   a2cec:	4610      	mov	r0, r2
   a2cee:	491e      	ldr	r1, [pc, #120]	; (a2d68 <Cl_Rinse_Controller+0x728>)
   a2cf0:	4798      	blx	r3
   a2cf2:	4603      	mov	r3, r0
   a2cf4:	2b00      	cmp	r3, #0
   a2cf6:	d004      	beq.n	a2d02 <Cl_Rinse_Controller+0x6c2>
							{
								sv_cntrl_decheater(2000);
   a2cf8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   a2cfc:	4b19      	ldr	r3, [pc, #100]	; (a2d64 <Cl_Rinse_Controller+0x724>)
   a2cfe:	4798      	blx	r3
   a2d00:	e00e      	b.n	a2d20 <Cl_Rinse_Controller+0x6e0>
							}
							else if (avgtemp2_dummy > 77)
   a2d02:	4b13      	ldr	r3, [pc, #76]	; (a2d50 <Cl_Rinse_Controller+0x710>)
   a2d04:	681a      	ldr	r2, [r3, #0]
   a2d06:	4b13      	ldr	r3, [pc, #76]	; (a2d54 <Cl_Rinse_Controller+0x714>)
   a2d08:	4610      	mov	r0, r2
   a2d0a:	4917      	ldr	r1, [pc, #92]	; (a2d68 <Cl_Rinse_Controller+0x728>)
   a2d0c:	4798      	blx	r3
   a2d0e:	4603      	mov	r3, r0
   a2d10:	2b00      	cmp	r3, #0
   a2d12:	d100      	bne.n	a2d16 <Cl_Rinse_Controller+0x6d6>
							{
								sv_cntrl_decheater(1800);
							}
						//UpdateHeaterControls();
						break;
   a2d14:	e285      	b.n	a3222 <Cl_Rinse_Controller+0xbe2>
							{
								sv_cntrl_decheater(2000);
							}
							else if (avgtemp2_dummy > 77)
							{
								sv_cntrl_decheater(1800);
   a2d16:	f44f 60e1 	mov.w	r0, #1800	; 0x708
   a2d1a:	4b12      	ldr	r3, [pc, #72]	; (a2d64 <Cl_Rinse_Controller+0x724>)
   a2d1c:	4798      	blx	r3
							}
						//UpdateHeaterControls();
						break;
   a2d1e:	e280      	b.n	a3222 <Cl_Rinse_Controller+0xbe2>
   a2d20:	e27f      	b.n	a3222 <Cl_Rinse_Controller+0xbe2>
   a2d22:	bf00      	nop
   a2d24:	200723f0 	.word	0x200723f0
   a2d28:	0009a545 	.word	0x0009a545
   a2d2c:	0009ba51 	.word	0x0009ba51
   a2d30:	20072828 	.word	0x20072828
   a2d34:	20071cc1 	.word	0x20071cc1
   a2d38:	000a48c1 	.word	0x000a48c1
   a2d3c:	000a3e4d 	.word	0x000a3e4d
   a2d40:	20071c9e 	.word	0x20071c9e
   a2d44:	20071c9f 	.word	0x20071c9f
   a2d48:	000a40f1 	.word	0x000a40f1
   a2d4c:	20071cbe 	.word	0x20071cbe
   a2d50:	20071a18 	.word	0x20071a18
   a2d54:	000a6cd1 	.word	0x000a6cd1
   a2d58:	42960000 	.word	0x42960000
   a2d5c:	000a6c95 	.word	0x000a6c95
   a2d60:	42980000 	.word	0x42980000
   a2d64:	00099df5 	.word	0x00099df5
   a2d68:	429a0000 	.word	0x429a0000
						case EVENT_RINSE_TICK_SECOND:
						
						if(cl_rinsestate == CL_RINSE_STATE_RINSING)
   a2d6c:	4b72      	ldr	r3, [pc, #456]	; (a2f38 <Cl_Rinse_Controller+0x8f8>)
   a2d6e:	781b      	ldrb	r3, [r3, #0]
   a2d70:	2b03      	cmp	r3, #3
   a2d72:	d101      	bne.n	a2d78 <Cl_Rinse_Controller+0x738>
						{
							Cl_Rinse_SendRinseStateData();	
   a2d74:	4b71      	ldr	r3, [pc, #452]	; (a2f3c <Cl_Rinse_Controller+0x8fc>)
   a2d76:	4798      	blx	r3
						}
						
						

					//	UpdateHeaterControls();
						Cl_Rinsesecondscounter++;
   a2d78:	4b71      	ldr	r3, [pc, #452]	; (a2f40 <Cl_Rinse_Controller+0x900>)
   a2d7a:	681b      	ldr	r3, [r3, #0]
   a2d7c:	3301      	adds	r3, #1
   a2d7e:	4a70      	ldr	r2, [pc, #448]	; (a2f40 <Cl_Rinse_Controller+0x900>)
   a2d80:	6013      	str	r3, [r2, #0]
						
						
						if(Cl_Rinsesecondscounter == 40){ // activate flow alarms only after 30 seconds into rinse
   a2d82:	4b6f      	ldr	r3, [pc, #444]	; (a2f40 <Cl_Rinse_Controller+0x900>)
   a2d84:	681b      	ldr	r3, [r3, #0]
   a2d86:	2b28      	cmp	r3, #40	; 0x28
   a2d88:	d114      	bne.n	a2db4 <Cl_Rinse_Controller+0x774>
							
							
							Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_NO_FLOW,true );
   a2d8a:	200c      	movs	r0, #12
   a2d8c:	2101      	movs	r1, #1
   a2d8e:	4b6d      	ldr	r3, [pc, #436]	; (a2f44 <Cl_Rinse_Controller+0x904>)
   a2d90:	4798      	blx	r3
   a2d92:	4603      	mov	r3, r0
   a2d94:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,true );
   a2d98:	200d      	movs	r0, #13
   a2d9a:	2101      	movs	r1, #1
   a2d9c:	4b69      	ldr	r3, [pc, #420]	; (a2f44 <Cl_Rinse_Controller+0x904>)
   a2d9e:	4798      	blx	r3
   a2da0:	4603      	mov	r3, r0
   a2da2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_HIGH_FLOWRATE,true );
   a2da6:	200e      	movs	r0, #14
   a2da8:	2101      	movs	r1, #1
   a2daa:	4b66      	ldr	r3, [pc, #408]	; (a2f44 <Cl_Rinse_Controller+0x904>)
   a2dac:	4798      	blx	r3
   a2dae:	4603      	mov	r3, r0
   a2db0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							
							
						}
						
						if ((Cl_Rinsesecondscounter == 10) && (rinse1 == 1))
   a2db4:	4b62      	ldr	r3, [pc, #392]	; (a2f40 <Cl_Rinse_Controller+0x900>)
   a2db6:	681b      	ldr	r3, [r3, #0]
   a2db8:	2b0a      	cmp	r3, #10
   a2dba:	d118      	bne.n	a2dee <Cl_Rinse_Controller+0x7ae>
   a2dbc:	4b62      	ldr	r3, [pc, #392]	; (a2f48 <Cl_Rinse_Controller+0x908>)
   a2dbe:	781b      	ldrb	r3, [r3, #0]
   a2dc0:	b2db      	uxtb	r3, r3
   a2dc2:	2b01      	cmp	r3, #1
   a2dc4:	d113      	bne.n	a2dee <Cl_Rinse_Controller+0x7ae>
						{
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RINSE2",6);
   a2dc6:	2018      	movs	r0, #24
   a2dc8:	4960      	ldr	r1, [pc, #384]	; (a2f4c <Cl_Rinse_Controller+0x90c>)
   a2dca:	2206      	movs	r2, #6
   a2dcc:	4b60      	ldr	r3, [pc, #384]	; (a2f50 <Cl_Rinse_Controller+0x910>)
   a2dce:	4798      	blx	r3
							sv_cntrl_deactivate_valve(VALVE_ID4);
   a2dd0:	2004      	movs	r0, #4
   a2dd2:	4b60      	ldr	r3, [pc, #384]	; (a2f54 <Cl_Rinse_Controller+0x914>)
   a2dd4:	4798      	blx	r3
							sv_cntrl_deactivatepump(DCMOTOR1);
   a2dd6:	2001      	movs	r0, #1
   a2dd8:	4b5f      	ldr	r3, [pc, #380]	; (a2f58 <Cl_Rinse_Controller+0x918>)
   a2dda:	4798      	blx	r3
						//	sv_cntrl_deactivate_valve(VALVE_ID6);
						//	sv_cntrl_deactivate_valve(VALVE_ID8);
							sv_cntrl_activate_valve(VALVE_ID19);
   a2ddc:	2013      	movs	r0, #19
   a2dde:	4b5f      	ldr	r3, [pc, #380]	; (a2f5c <Cl_Rinse_Controller+0x91c>)
   a2de0:	4798      	blx	r3
							sv_cntrl_activate_valve(VALVE_ID20);
   a2de2:	2014      	movs	r0, #20
   a2de4:	4b5d      	ldr	r3, [pc, #372]	; (a2f5c <Cl_Rinse_Controller+0x91c>)
   a2de6:	4798      	blx	r3
							rinse2=1;
   a2de8:	4b5d      	ldr	r3, [pc, #372]	; (a2f60 <Cl_Rinse_Controller+0x920>)
   a2dea:	2201      	movs	r2, #1
   a2dec:	701a      	strb	r2, [r3, #0]
						}
						if ((Cl_Rinsesecondscounter == 30) && (rinse1 == 1) && (rinse2== 1))
   a2dee:	4b54      	ldr	r3, [pc, #336]	; (a2f40 <Cl_Rinse_Controller+0x900>)
   a2df0:	681b      	ldr	r3, [r3, #0]
   a2df2:	2b1e      	cmp	r3, #30
   a2df4:	d123      	bne.n	a2e3e <Cl_Rinse_Controller+0x7fe>
   a2df6:	4b54      	ldr	r3, [pc, #336]	; (a2f48 <Cl_Rinse_Controller+0x908>)
   a2df8:	781b      	ldrb	r3, [r3, #0]
   a2dfa:	b2db      	uxtb	r3, r3
   a2dfc:	2b01      	cmp	r3, #1
   a2dfe:	d11e      	bne.n	a2e3e <Cl_Rinse_Controller+0x7fe>
   a2e00:	4b57      	ldr	r3, [pc, #348]	; (a2f60 <Cl_Rinse_Controller+0x920>)
   a2e02:	781b      	ldrb	r3, [r3, #0]
   a2e04:	b2db      	uxtb	r3, r3
   a2e06:	2b01      	cmp	r3, #1
   a2e08:	d119      	bne.n	a2e3e <Cl_Rinse_Controller+0x7fe>
						{
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RINSE3",6);
   a2e0a:	2018      	movs	r0, #24
   a2e0c:	4955      	ldr	r1, [pc, #340]	; (a2f64 <Cl_Rinse_Controller+0x924>)
   a2e0e:	2206      	movs	r2, #6
   a2e10:	4b4f      	ldr	r3, [pc, #316]	; (a2f50 <Cl_Rinse_Controller+0x910>)
   a2e12:	4798      	blx	r3
							sv_cntrl_deactivatepump(DCMOTOR2);
   a2e14:	2002      	movs	r0, #2
   a2e16:	4b50      	ldr	r3, [pc, #320]	; (a2f58 <Cl_Rinse_Controller+0x918>)
   a2e18:	4798      	blx	r3
						//	sv_cntrl_deactivate_valve(VALVE_ID19);
						//	sv_cntrl_deactivate_valve(VALVE_ID20);
							sv_cntrl_activatepump(DCMOTOR1);
   a2e1a:	2001      	movs	r0, #1
   a2e1c:	4b52      	ldr	r3, [pc, #328]	; (a2f68 <Cl_Rinse_Controller+0x928>)
   a2e1e:	4798      	blx	r3
							sv_cntrl_activatepump(DCMOTOR2);
   a2e20:	2002      	movs	r0, #2
   a2e22:	4b51      	ldr	r3, [pc, #324]	; (a2f68 <Cl_Rinse_Controller+0x928>)
   a2e24:	4798      	blx	r3
							sv_cntrl_activate_valve(VALVE_ID6);
   a2e26:	2006      	movs	r0, #6
   a2e28:	4b4c      	ldr	r3, [pc, #304]	; (a2f5c <Cl_Rinse_Controller+0x91c>)
   a2e2a:	4798      	blx	r3
							sv_cntrl_activate_valve(VALVE_ID8);
   a2e2c:	2008      	movs	r0, #8
   a2e2e:	4b4b      	ldr	r3, [pc, #300]	; (a2f5c <Cl_Rinse_Controller+0x91c>)
   a2e30:	4798      	blx	r3
							sv_cntrl_activate_valve(VALVE_ID17);
   a2e32:	2011      	movs	r0, #17
   a2e34:	4b49      	ldr	r3, [pc, #292]	; (a2f5c <Cl_Rinse_Controller+0x91c>)
   a2e36:	4798      	blx	r3
							rinse3=1;
   a2e38:	4b4c      	ldr	r3, [pc, #304]	; (a2f6c <Cl_Rinse_Controller+0x92c>)
   a2e3a:	2201      	movs	r2, #1
   a2e3c:	701a      	strb	r2, [r3, #0]
						}
						if ((Cl_Rinsesecondscounter == 55) && (rinse1 == 1) && (rinse2 == 1)&& (rinse3 == 1))
   a2e3e:	4b40      	ldr	r3, [pc, #256]	; (a2f40 <Cl_Rinse_Controller+0x900>)
   a2e40:	681b      	ldr	r3, [r3, #0]
   a2e42:	2b37      	cmp	r3, #55	; 0x37
   a2e44:	d11c      	bne.n	a2e80 <Cl_Rinse_Controller+0x840>
   a2e46:	4b40      	ldr	r3, [pc, #256]	; (a2f48 <Cl_Rinse_Controller+0x908>)
   a2e48:	781b      	ldrb	r3, [r3, #0]
   a2e4a:	b2db      	uxtb	r3, r3
   a2e4c:	2b01      	cmp	r3, #1
   a2e4e:	d117      	bne.n	a2e80 <Cl_Rinse_Controller+0x840>
   a2e50:	4b43      	ldr	r3, [pc, #268]	; (a2f60 <Cl_Rinse_Controller+0x920>)
   a2e52:	781b      	ldrb	r3, [r3, #0]
   a2e54:	b2db      	uxtb	r3, r3
   a2e56:	2b01      	cmp	r3, #1
   a2e58:	d112      	bne.n	a2e80 <Cl_Rinse_Controller+0x840>
   a2e5a:	4b44      	ldr	r3, [pc, #272]	; (a2f6c <Cl_Rinse_Controller+0x92c>)
   a2e5c:	781b      	ldrb	r3, [r3, #0]
   a2e5e:	b2db      	uxtb	r3, r3
   a2e60:	2b01      	cmp	r3, #1
   a2e62:	d10d      	bne.n	a2e80 <Cl_Rinse_Controller+0x840>
						{
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RINSE4",6);
   a2e64:	2018      	movs	r0, #24
   a2e66:	4942      	ldr	r1, [pc, #264]	; (a2f70 <Cl_Rinse_Controller+0x930>)
   a2e68:	2206      	movs	r2, #6
   a2e6a:	4b39      	ldr	r3, [pc, #228]	; (a2f50 <Cl_Rinse_Controller+0x910>)
   a2e6c:	4798      	blx	r3
							sv_cntrl_activate_valve(VALVE_ID4);
   a2e6e:	2004      	movs	r0, #4
   a2e70:	4b3a      	ldr	r3, [pc, #232]	; (a2f5c <Cl_Rinse_Controller+0x91c>)
   a2e72:	4798      	blx	r3
							sv_cntrl_deactivate_valve(VALVE_ID17);
   a2e74:	2011      	movs	r0, #17
   a2e76:	4b37      	ldr	r3, [pc, #220]	; (a2f54 <Cl_Rinse_Controller+0x914>)
   a2e78:	4798      	blx	r3
							rinse4=1;
   a2e7a:	4b3e      	ldr	r3, [pc, #248]	; (a2f74 <Cl_Rinse_Controller+0x934>)
   a2e7c:	2201      	movs	r2, #1
   a2e7e:	701a      	strb	r2, [r3, #0]
						}
						if(Cl_Rinsesecondscounter == 60)
   a2e80:	4b2f      	ldr	r3, [pc, #188]	; (a2f40 <Cl_Rinse_Controller+0x900>)
   a2e82:	681b      	ldr	r3, [r3, #0]
   a2e84:	2b3c      	cmp	r3, #60	; 0x3c
   a2e86:	d155      	bne.n	a2f34 <Cl_Rinse_Controller+0x8f4>
						{
								cl_uf_controller(CL_UF_EVENT_STOP,0);
   a2e88:	2004      	movs	r0, #4
   a2e8a:	2100      	movs	r1, #0
   a2e8c:	4b3a      	ldr	r3, [pc, #232]	; (a2f78 <Cl_Rinse_Controller+0x938>)
   a2e8e:	4798      	blx	r3
											
							Cl_Rinsesecondscounter = 0;
   a2e90:	4b2b      	ldr	r3, [pc, #172]	; (a2f40 <Cl_Rinse_Controller+0x900>)
   a2e92:	2200      	movs	r2, #0
   a2e94:	601a      	str	r2, [r3, #0]
							Cl_RinseMinutescounter++;
   a2e96:	4b39      	ldr	r3, [pc, #228]	; (a2f7c <Cl_Rinse_Controller+0x93c>)
   a2e98:	681b      	ldr	r3, [r3, #0]
   a2e9a:	3301      	adds	r3, #1
   a2e9c:	4a37      	ldr	r2, [pc, #220]	; (a2f7c <Cl_Rinse_Controller+0x93c>)
   a2e9e:	6013      	str	r3, [r2, #0]
							if (Cl_RinseMinutescounter == 1)
   a2ea0:	4b36      	ldr	r3, [pc, #216]	; (a2f7c <Cl_Rinse_Controller+0x93c>)
   a2ea2:	681b      	ldr	r3, [r3, #0]
   a2ea4:	2b01      	cmp	r3, #1
   a2ea6:	d10d      	bne.n	a2ec4 <Cl_Rinse_Controller+0x884>
							{
								Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RINSE1",6);
   a2ea8:	2018      	movs	r0, #24
   a2eaa:	4935      	ldr	r1, [pc, #212]	; (a2f80 <Cl_Rinse_Controller+0x940>)
   a2eac:	2206      	movs	r2, #6
   a2eae:	4b28      	ldr	r3, [pc, #160]	; (a2f50 <Cl_Rinse_Controller+0x910>)
   a2eb0:	4798      	blx	r3
								sv_cntrl_activate_valve(VALVE_ID4);
   a2eb2:	2004      	movs	r0, #4
   a2eb4:	4b29      	ldr	r3, [pc, #164]	; (a2f5c <Cl_Rinse_Controller+0x91c>)
   a2eb6:	4798      	blx	r3
								sv_cntrl_deactivate_valve(VALVE_ID17);
   a2eb8:	2011      	movs	r0, #17
   a2eba:	4b26      	ldr	r3, [pc, #152]	; (a2f54 <Cl_Rinse_Controller+0x914>)
   a2ebc:	4798      	blx	r3
								rinse1=1;
   a2ebe:	4b22      	ldr	r3, [pc, #136]	; (a2f48 <Cl_Rinse_Controller+0x908>)
   a2ec0:	2201      	movs	r2, #1
   a2ec2:	701a      	strb	r2, [r3, #0]
							}
							if (Cl_RinseMinutescounter == CL_BC_OPENFILL_TIMEOUT )  // earlier 2 min
   a2ec4:	4b2d      	ldr	r3, [pc, #180]	; (a2f7c <Cl_Rinse_Controller+0x93c>)
   a2ec6:	681b      	ldr	r3, [r3, #0]
   a2ec8:	2b05      	cmp	r3, #5
   a2eca:	d124      	bne.n	a2f16 <Cl_Rinse_Controller+0x8d6>
							{
								Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DONE",6);
   a2ecc:	2018      	movs	r0, #24
   a2ece:	492d      	ldr	r1, [pc, #180]	; (a2f84 <Cl_Rinse_Controller+0x944>)
   a2ed0:	2206      	movs	r2, #6
   a2ed2:	4b1f      	ldr	r3, [pc, #124]	; (a2f50 <Cl_Rinse_Controller+0x910>)
   a2ed4:	4798      	blx	r3
								sv_cntrl_deactivate_valve(VALVE_ID4);
   a2ed6:	2004      	movs	r0, #4
   a2ed8:	4b1e      	ldr	r3, [pc, #120]	; (a2f54 <Cl_Rinse_Controller+0x914>)
   a2eda:	4798      	blx	r3
								sv_cntrl_activate_valve(VALVE_ID17);
   a2edc:	2011      	movs	r0, #17
   a2ede:	4b1f      	ldr	r3, [pc, #124]	; (a2f5c <Cl_Rinse_Controller+0x91c>)
   a2ee0:	4798      	blx	r3
								sv_prop_stopopenfill();
   a2ee2:	4b29      	ldr	r3, [pc, #164]	; (a2f88 <Cl_Rinse_Controller+0x948>)
   a2ee4:	4798      	blx	r3
								sv_cntrl_deactivate_valve(VALVE_ID2);
   a2ee6:	2002      	movs	r0, #2
   a2ee8:	4b1a      	ldr	r3, [pc, #104]	; (a2f54 <Cl_Rinse_Controller+0x914>)
   a2eea:	4798      	blx	r3
								sv_cntrl_deactivate_valve(VALVE_ID3);
   a2eec:	2003      	movs	r0, #3
   a2eee:	4b19      	ldr	r3, [pc, #100]	; (a2f54 <Cl_Rinse_Controller+0x914>)
   a2ef0:	4798      	blx	r3
								sv_cntrl_deactivate_valve(VALVE_ID19);
   a2ef2:	2013      	movs	r0, #19
   a2ef4:	4b17      	ldr	r3, [pc, #92]	; (a2f54 <Cl_Rinse_Controller+0x914>)
   a2ef6:	4798      	blx	r3
								sv_cntrl_deactivate_valve(VALVE_ID20);
   a2ef8:	2014      	movs	r0, #20
   a2efa:	4b16      	ldr	r3, [pc, #88]	; (a2f54 <Cl_Rinse_Controller+0x914>)
   a2efc:	4798      	blx	r3
								rinse1=0;
   a2efe:	4b12      	ldr	r3, [pc, #72]	; (a2f48 <Cl_Rinse_Controller+0x908>)
   a2f00:	2200      	movs	r2, #0
   a2f02:	701a      	strb	r2, [r3, #0]
								rinse2=0;
   a2f04:	4b16      	ldr	r3, [pc, #88]	; (a2f60 <Cl_Rinse_Controller+0x920>)
   a2f06:	2200      	movs	r2, #0
   a2f08:	701a      	strb	r2, [r3, #0]
								rinse3=0;
   a2f0a:	4b18      	ldr	r3, [pc, #96]	; (a2f6c <Cl_Rinse_Controller+0x92c>)
   a2f0c:	2200      	movs	r2, #0
   a2f0e:	701a      	strb	r2, [r3, #0]
								rinse4=0;
   a2f10:	4b18      	ldr	r3, [pc, #96]	; (a2f74 <Cl_Rinse_Controller+0x934>)
   a2f12:	2200      	movs	r2, #0
   a2f14:	701a      	strb	r2, [r3, #0]
							}
							
							Cl_RinseTotalMinutescounter++;
   a2f16:	4b1d      	ldr	r3, [pc, #116]	; (a2f8c <Cl_Rinse_Controller+0x94c>)
   a2f18:	681b      	ldr	r3, [r3, #0]
   a2f1a:	3301      	adds	r3, #1
   a2f1c:	4a1b      	ldr	r2, [pc, #108]	; (a2f8c <Cl_Rinse_Controller+0x94c>)
   a2f1e:	6013      	str	r3, [r2, #0]
							if(cl_rinsestate == CL_RINSE_STATE_RINSING)
   a2f20:	4b05      	ldr	r3, [pc, #20]	; (a2f38 <Cl_Rinse_Controller+0x8f8>)
   a2f22:	781b      	ldrb	r3, [r3, #0]
   a2f24:	2b03      	cmp	r3, #3
   a2f26:	d105      	bne.n	a2f34 <Cl_Rinse_Controller+0x8f4>
							{
								Cl_rinseretcode = Cl_Rinse_UpdateTimeInfo();
   a2f28:	4b19      	ldr	r3, [pc, #100]	; (a2f90 <Cl_Rinse_Controller+0x950>)
   a2f2a:	4798      	blx	r3
   a2f2c:	4603      	mov	r3, r0
   a2f2e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	
						}
						//	Cl_Rinse_ResetAlertsforReassertion();
							//Cl_rinseretcode = Cl_Rinse_ProcessAlarms();
					
						break;
   a2f32:	e176      	b.n	a3222 <Cl_Rinse_Controller+0xbe2>
   a2f34:	e175      	b.n	a3222 <Cl_Rinse_Controller+0xbe2>
   a2f36:	bf00      	nop
   a2f38:	20071c9e 	.word	0x20071c9e
   a2f3c:	000a45f5 	.word	0x000a45f5
   a2f40:	20071ca0 	.word	0x20071ca0
   a2f44:	00082e61 	.word	0x00082e61
   a2f48:	20071c9a 	.word	0x20071c9a
   a2f4c:	000a8d58 	.word	0x000a8d58
   a2f50:	0009ba51 	.word	0x0009ba51
   a2f54:	00099ced 	.word	0x00099ced
   a2f58:	00099c69 	.word	0x00099c69
   a2f5c:	00099ccd 	.word	0x00099ccd
   a2f60:	20071c9b 	.word	0x20071c9b
   a2f64:	000a8d60 	.word	0x000a8d60
   a2f68:	00099c2d 	.word	0x00099c2d
   a2f6c:	20071c9c 	.word	0x20071c9c
   a2f70:	000a8d68 	.word	0x000a8d68
   a2f74:	20071c9d 	.word	0x20071c9d
   a2f78:	00095df5 	.word	0x00095df5
   a2f7c:	20071ca4 	.word	0x20071ca4
   a2f80:	000a8d70 	.word	0x000a8d70
   a2f84:	000a8d78 	.word	0x000a8d78
   a2f88:	0009a151 	.word	0x0009a151
   a2f8c:	20071cb0 	.word	0x20071cb0
   a2f90:	000a3e4d 	.word	0x000a3e4d
						case EVENT_RINSE_TICK_MINUTE:
						//	Cl_Rinsesecondscounter = 0;
							minute++;
   a2f94:	4ba4      	ldr	r3, [pc, #656]	; (a3228 <Cl_Rinse_Controller+0xbe8>)
   a2f96:	781b      	ldrb	r3, [r3, #0]
   a2f98:	b2db      	uxtb	r3, r3
   a2f9a:	3301      	adds	r3, #1
   a2f9c:	b2da      	uxtb	r2, r3
   a2f9e:	4ba2      	ldr	r3, [pc, #648]	; (a3228 <Cl_Rinse_Controller+0xbe8>)
   a2fa0:	701a      	strb	r2, [r3, #0]
							if (minute > 30)
   a2fa2:	4ba1      	ldr	r3, [pc, #644]	; (a3228 <Cl_Rinse_Controller+0xbe8>)
   a2fa4:	781b      	ldrb	r3, [r3, #0]
   a2fa6:	b2db      	uxtb	r3, r3
   a2fa8:	2b1e      	cmp	r3, #30
   a2faa:	d905      	bls.n	a2fb8 <Cl_Rinse_Controller+0x978>
							{
								sv_cntrl_poweroffheater();
   a2fac:	4b9f      	ldr	r3, [pc, #636]	; (a322c <Cl_Rinse_Controller+0xbec>)
   a2fae:	4798      	blx	r3
								sv_cntrl_disable_loopback();
   a2fb0:	4b9f      	ldr	r3, [pc, #636]	; (a3230 <Cl_Rinse_Controller+0xbf0>)
   a2fb2:	4798      	blx	r3
								sv_cntrl_enable_bypass();
   a2fb4:	4b9f      	ldr	r3, [pc, #636]	; (a3234 <Cl_Rinse_Controller+0xbf4>)
   a2fb6:	4798      	blx	r3
							}
						//	Cl_RinseTotalMinutescounter++;
							Cl_Rinse_ResetAlertsforReassertion();
   a2fb8:	4b9f      	ldr	r3, [pc, #636]	; (a3238 <Cl_Rinse_Controller+0xbf8>)
   a2fba:	4798      	blx	r3
														
							if(Cl_Rinse_CheckforRinseCompletion() == CL_OK)
   a2fbc:	4b9f      	ldr	r3, [pc, #636]	; (a323c <Cl_Rinse_Controller+0xbfc>)
   a2fbe:	4798      	blx	r3
   a2fc0:	4603      	mov	r3, r0
   a2fc2:	2b00      	cmp	r3, #0
   a2fc4:	d15c      	bne.n	a3080 <Cl_Rinse_Controller+0xa40>
							{
								sv_cntrl_setgreenalarm();
   a2fc6:	4b9e      	ldr	r3, [pc, #632]	; (a3240 <Cl_Rinse_Controller+0xc00>)
   a2fc8:	4798      	blx	r3
								//Cl_rinseretcode = sv_cntrl_poweroffheater();
// 								sv_cntrl_activatepump(DCMOTOR1 );
// 								sv_cntrl_activatepump(DCMOTOR2 );
								sv_cntrl_deactivatepump(DCMOTOR1 );
   a2fca:	2001      	movs	r0, #1
   a2fcc:	4b9d      	ldr	r3, [pc, #628]	; (a3244 <Cl_Rinse_Controller+0xc04>)
   a2fce:	4798      	blx	r3
								sv_cntrl_deactivatepump(DCMOTOR2 );
   a2fd0:	2002      	movs	r0, #2
   a2fd2:	4b9c      	ldr	r3, [pc, #624]	; (a3244 <Cl_Rinse_Controller+0xc04>)
   a2fd4:	4798      	blx	r3
							//	sv_prop_stopopenfill();
							//	sv_prop_startpropeo_aligning();
							//	sv_cntrl_deactivate_valve(VALVE_ID2);
							//	sv_cntrl_deactivate_valve(VALVE_ID3);
								Cl_rinseretcode = cl_rinse_notifydacandgotorinsestandby();
   a2fd6:	4b9c      	ldr	r3, [pc, #624]	; (a3248 <Cl_Rinse_Controller+0xc08>)
   a2fd8:	4798      	blx	r3
   a2fda:	4603      	mov	r3, r0
   a2fdc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

								
								
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_NO_FLOW,false );					
   a2fe0:	200c      	movs	r0, #12
   a2fe2:	2100      	movs	r1, #0
   a2fe4:	4b99      	ldr	r3, [pc, #612]	; (a324c <Cl_Rinse_Controller+0xc0c>)
   a2fe6:	4798      	blx	r3
   a2fe8:	4603      	mov	r3, r0
   a2fea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,false );
   a2fee:	200d      	movs	r0, #13
   a2ff0:	2100      	movs	r1, #0
   a2ff2:	4b96      	ldr	r3, [pc, #600]	; (a324c <Cl_Rinse_Controller+0xc0c>)
   a2ff4:	4798      	blx	r3
   a2ff6:	4603      	mov	r3, r0
   a2ff8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_HIGH_FLOWRATE,false );
   a2ffc:	200e      	movs	r0, #14
   a2ffe:	2100      	movs	r1, #0
   a3000:	4b92      	ldr	r3, [pc, #584]	; (a324c <Cl_Rinse_Controller+0xc0c>)
   a3002:	4798      	blx	r3
   a3004:	4603      	mov	r3, r0
   a3006:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(ACID_IN_OPEN,false );
   a300a:	2029      	movs	r0, #41	; 0x29
   a300c:	2100      	movs	r1, #0
   a300e:	4b8f      	ldr	r3, [pc, #572]	; (a324c <Cl_Rinse_Controller+0xc0c>)
   a3010:	4798      	blx	r3
   a3012:	4603      	mov	r3, r0
   a3014:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(BICARB_IN_OPEN,false );
   a3018:	202b      	movs	r0, #43	; 0x2b
   a301a:	2100      	movs	r1, #0
   a301c:	4b8b      	ldr	r3, [pc, #556]	; (a324c <Cl_Rinse_Controller+0xc0c>)
   a301e:	4798      	blx	r3
   a3020:	4603      	mov	r3, r0
   a3022:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_OPEN,false );
   a3026:	2003      	movs	r0, #3
   a3028:	2100      	movs	r1, #0
   a302a:	4b88      	ldr	r3, [pc, #544]	; (a324c <Cl_Rinse_Controller+0xc0c>)
   a302c:	4798      	blx	r3
   a302e:	4603      	mov	r3, r0
   a3030:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_OPEN,false );
   a3034:	2004      	movs	r0, #4
   a3036:	2100      	movs	r1, #0
   a3038:	4b84      	ldr	r3, [pc, #528]	; (a324c <Cl_Rinse_Controller+0xc0c>)
   a303a:	4798      	blx	r3
   a303c:	4603      	mov	r3, r0
   a303e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								cl_rinsestate = CL_RINSE_STATE_POST_RINSE_STANDBY;
   a3042:	4b83      	ldr	r3, [pc, #524]	; (a3250 <Cl_Rinse_Controller+0xc10>)
   a3044:	2209      	movs	r2, #9
   a3046:	701a      	strb	r2, [r3, #0]
								
								Cl_Uint16Type sensordata;
								Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP1STATUS, &sensordata);
   a3048:	f107 0322 	add.w	r3, r7, #34	; 0x22
   a304c:	2012      	movs	r0, #18
   a304e:	4619      	mov	r1, r3
   a3050:	4b80      	ldr	r3, [pc, #512]	; (a3254 <Cl_Rinse_Controller+0xc14>)
   a3052:	4798      	blx	r3
// 												uint16_t cal_data  = (402 *100* sensordata)/(2*32768); 
// 												res_temp_lookuptable(cal_data);
// 												 uint16_t temp = res_temp_value /10;
// 												
// 					//							temp = temp - 25 +12 + 2.5;
										uint16_t temp = sensordata /10;
   a3054:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
   a3056:	4a80      	ldr	r2, [pc, #512]	; (a3258 <Cl_Rinse_Controller+0xc18>)
   a3058:	fba2 2303 	umull	r2, r3, r2, r3
   a305c:	08db      	lsrs	r3, r3, #3
   a305e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
												
										cl_Datastreamtype  cl_tdata;
										cl_tdata.word = 0;
   a3062:	2300      	movs	r3, #0
   a3064:	61fb      	str	r3, [r7, #28]
										cl_tdata.Twobyte = temp;
   a3066:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
   a306a:	83bb      	strh	r3, [r7, #28]
										cl_tdata.bytearray[2] = 11;
   a306c:	230b      	movs	r3, #11
   a306e:	77bb      	strb	r3, [r7, #30]
										Cl_SendDatatoconsole(CON_TX_COMMAND_COMMAND_SCRIPT_PRNIT,&cl_tdata,4);
   a3070:	f107 031c 	add.w	r3, r7, #28
   a3074:	2037      	movs	r0, #55	; 0x37
   a3076:	4619      	mov	r1, r3
   a3078:	2204      	movs	r2, #4
   a307a:	4b78      	ldr	r3, [pc, #480]	; (a325c <Cl_Rinse_Controller+0xc1c>)
   a307c:	4798      	blx	r3
								//	Cl_rinseretcode = (Cl_ReturnCodeType)sv_setflowpath(Default path ?);//set appropirate flow path configuration
	
							}
						break;
   a307e:	e0d0      	b.n	a3222 <Cl_Rinse_Controller+0xbe2>
   a3080:	e0cf      	b.n	a3222 <Cl_Rinse_Controller+0xbe2>
						case EVENT_RINSE_TICK_HOUR:
							Cl_Rinseshourscounter++;
   a3082:	4b77      	ldr	r3, [pc, #476]	; (a3260 <Cl_Rinse_Controller+0xc20>)
   a3084:	681b      	ldr	r3, [r3, #0]
   a3086:	3301      	adds	r3, #1
   a3088:	4a75      	ldr	r2, [pc, #468]	; (a3260 <Cl_Rinse_Controller+0xc20>)
   a308a:	6013      	str	r3, [r2, #0]
							Cl_RinsesTotalhourscounter++;
   a308c:	4b75      	ldr	r3, [pc, #468]	; (a3264 <Cl_Rinse_Controller+0xc24>)
   a308e:	681b      	ldr	r3, [r3, #0]
   a3090:	3301      	adds	r3, #1
   a3092:	4a74      	ldr	r2, [pc, #464]	; (a3264 <Cl_Rinse_Controller+0xc24>)
   a3094:	6013      	str	r3, [r2, #0]
						break;
   a3096:	e0c4      	b.n	a3222 <Cl_Rinse_Controller+0xbe2>
						case EVENT_STOP_RINSE:
							Cl_Rinse_StopRinse();
   a3098:	4b73      	ldr	r3, [pc, #460]	; (a3268 <Cl_Rinse_Controller+0xc28>)
   a309a:	4798      	blx	r3
						break;
   a309c:	e0c1      	b.n	a3222 <Cl_Rinse_Controller+0xbe2>
						break;
						case EVENT_RINSE_ALARM:
							Cl_rinseretcode = Cl_Rinse_ProcessAlarms();
   a309e:	4b73      	ldr	r3, [pc, #460]	; (a326c <Cl_Rinse_Controller+0xc2c>)
   a30a0:	4798      	blx	r3
   a30a2:	4603      	mov	r3, r0
   a30a4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						break;
   a30a8:	e0bb      	b.n	a3222 <Cl_Rinse_Controller+0xbe2>
						case EVENT_RINSE_ALERT:
							Cl_Alarm_GetAlarmStatus(FPCURRENTSTATUS,&alarmstatus1);
   a30aa:	f107 033a 	add.w	r3, r7, #58	; 0x3a
   a30ae:	203c      	movs	r0, #60	; 0x3c
   a30b0:	4619      	mov	r1, r3
   a30b2:	4b6f      	ldr	r3, [pc, #444]	; (a3270 <Cl_Rinse_Controller+0xc30>)
   a30b4:	4798      	blx	r3
							if(alarmstatus1)
   a30b6:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
   a30ba:	2b00      	cmp	r3, #0
   a30bc:	d002      	beq.n	a30c4 <Cl_Rinse_Controller+0xa84>
							{
							//	Cl_rinseretcode = Cl_bc_controller(BC_EVENT_CS);
							//	sv_cntrl_activate_valve(VALVE_ID19);
								cl_50ms_timer  = 1;
   a30be:	4b6d      	ldr	r3, [pc, #436]	; (a3274 <Cl_Rinse_Controller+0xc34>)
   a30c0:	2201      	movs	r2, #1
   a30c2:	801a      	strh	r2, [r3, #0]
							}
							Cl_Alarm_GetAlarmStatus(SENSOR_TEMP2STATUS,&alarmstatus3);
   a30c4:	f107 0339 	add.w	r3, r7, #57	; 0x39
   a30c8:	2013      	movs	r0, #19
   a30ca:	4619      	mov	r1, r3
   a30cc:	4b68      	ldr	r3, [pc, #416]	; (a3270 <Cl_Rinse_Controller+0xc30>)
   a30ce:	4798      	blx	r3
							if(alarmstatus3)
							{
								//	UpdateHeaterControls();
							}
					
							Cl_Alarm_GetAlarmStatus(FLOW_NO_FLOW,&flowstatus);
   a30d0:	f107 0338 	add.w	r3, r7, #56	; 0x38
   a30d4:	200c      	movs	r0, #12
   a30d6:	4619      	mov	r1, r3
   a30d8:	4b65      	ldr	r3, [pc, #404]	; (a3270 <Cl_Rinse_Controller+0xc30>)
   a30da:	4798      	blx	r3
							//	if(flowstatus)
							//	{
							//		Cl_rinseretcode = sv_cntrl_poweroffheater();
							//		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"FLOW_OFF",8);
							//	}
						break;
   a30dc:	e0a1      	b.n	a3222 <Cl_Rinse_Controller+0xbe2>
						case EVT_RINSE_START_PRIME:
								blood_flag = 1;
   a30de:	4b66      	ldr	r3, [pc, #408]	; (a3278 <Cl_Rinse_Controller+0xc38>)
   a30e0:	2201      	movs	r2, #1
   a30e2:	701a      	strb	r2, [r3, #0]
					//	if(cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIMING)
						{
					//		Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PRIME1",6);
							cl_dprep_activate_prime_related_alarms();
   a30e4:	4b65      	ldr	r3, [pc, #404]	; (a327c <Cl_Rinse_Controller+0xc3c>)
   a30e6:	4798      	blx	r3
							Cl_RinseAlarmTable[CL_RINSE_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   a30e8:	4b65      	ldr	r3, [pc, #404]	; (a3280 <Cl_Rinse_Controller+0xc40>)
   a30ea:	2200      	movs	r2, #0
   a30ec:	70da      	strb	r2, [r3, #3]
							cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_START,0);
   a30ee:	2001      	movs	r0, #1
   a30f0:	2100      	movs	r1, #0
   a30f2:	4b64      	ldr	r3, [pc, #400]	; (a3284 <Cl_Rinse_Controller+0xc44>)
   a30f4:	4798      	blx	r3
						}
						
						break;
   a30f6:	e094      	b.n	a3222 <Cl_Rinse_Controller+0xbe2>
						case EVT_RINSE_STOP_PRIME:
							blood_flag = 0;
   a30f8:	4b5f      	ldr	r3, [pc, #380]	; (a3278 <Cl_Rinse_Controller+0xc38>)
   a30fa:	2200      	movs	r2, #0
   a30fc:	701a      	strb	r2, [r3, #0]
						cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP,0);
   a30fe:	2002      	movs	r0, #2
   a3100:	2100      	movs	r1, #0
   a3102:	4b60      	ldr	r3, [pc, #384]	; (a3284 <Cl_Rinse_Controller+0xc44>)
   a3104:	4798      	blx	r3
						break;
   a3106:	e08c      	b.n	a3222 <Cl_Rinse_Controller+0xbe2>
						case EVT_RINSE_RCIRC_START:
						if(cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIMING)
   a3108:	4b5f      	ldr	r3, [pc, #380]	; (a3288 <Cl_Rinse_Controller+0xc48>)
   a310a:	781b      	ldrb	r3, [r3, #0]
   a310c:	2b01      	cmp	r3, #1
   a310e:	d00c      	beq.n	a312a <Cl_Rinse_Controller+0xaea>
						{
							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC",6);
   a3110:	2018      	movs	r0, #24
   a3112:	495e      	ldr	r1, [pc, #376]	; (a328c <Cl_Rinse_Controller+0xc4c>)
   a3114:	2206      	movs	r2, #6
   a3116:	4b51      	ldr	r3, [pc, #324]	; (a325c <Cl_Rinse_Controller+0xc1c>)
   a3118:	4798      	blx	r3
							cl_dprep_primecontroller(CL_DPREP_PRIME_RCIRC_START,0);
   a311a:	2005      	movs	r0, #5
   a311c:	2100      	movs	r1, #0
   a311e:	4b59      	ldr	r3, [pc, #356]	; (a3284 <Cl_Rinse_Controller+0xc44>)
   a3120:	4798      	blx	r3
							Cl_RinseAlarmTable[CL_RINSE_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   a3122:	4b57      	ldr	r3, [pc, #348]	; (a3280 <Cl_Rinse_Controller+0xc40>)
   a3124:	2200      	movs	r2, #0
   a3126:	70da      	strb	r2, [r3, #3]
						}
						
						break;
   a3128:	e07b      	b.n	a3222 <Cl_Rinse_Controller+0xbe2>
   a312a:	e07a      	b.n	a3222 <Cl_Rinse_Controller+0xbe2>
						case EVT_RINSE_RCIRC_STOP:

							Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC_STOP",6);
   a312c:	2018      	movs	r0, #24
   a312e:	4958      	ldr	r1, [pc, #352]	; (a3290 <Cl_Rinse_Controller+0xc50>)
   a3130:	2206      	movs	r2, #6
   a3132:	4b4a      	ldr	r3, [pc, #296]	; (a325c <Cl_Rinse_Controller+0xc1c>)
   a3134:	4798      	blx	r3
							cl_dprep_primecontroller(CL_DPREP_PRIME_RCIRC_STOP,0);
   a3136:	2006      	movs	r0, #6
   a3138:	2100      	movs	r1, #0
   a313a:	4b52      	ldr	r3, [pc, #328]	; (a3284 <Cl_Rinse_Controller+0xc44>)
   a313c:	4798      	blx	r3

						
						break;
   a313e:	e070      	b.n	a3222 <Cl_Rinse_Controller+0xbe2>
						case EVT_RINSE_COMMAND_SET_BLDPMP_ON:
						cl_bp_controller(CL_BP_EVENT_START,0);
   a3140:	2002      	movs	r0, #2
   a3142:	2100      	movs	r1, #0
   a3144:	4b53      	ldr	r3, [pc, #332]	; (a3294 <Cl_Rinse_Controller+0xc54>)
   a3146:	4798      	blx	r3
						Cl_RinseAlarmTable[CL_RINSE_ALARM_BLOODDOOR_STATUS_OPEN].IsActive = true;
   a3148:	4b4d      	ldr	r3, [pc, #308]	; (a3280 <Cl_Rinse_Controller+0xc40>)
   a314a:	2201      	movs	r2, #1
   a314c:	709a      	strb	r2, [r3, #2]
						break;
   a314e:	e068      	b.n	a3222 <Cl_Rinse_Controller+0xbe2>
						case EVT_RINSE_COMMAND_SET_BLDPMP_OFF:
						cl_bp_controller(CL_BP_EVENT_STOP,0);
   a3150:	2004      	movs	r0, #4
   a3152:	2100      	movs	r1, #0
   a3154:	4b4f      	ldr	r3, [pc, #316]	; (a3294 <Cl_Rinse_Controller+0xc54>)
   a3156:	4798      	blx	r3
							Cl_RinseAlarmTable[CL_RINSE_ALARM_BLOODDOOR_STATUS_OPEN].IsActive = false;
   a3158:	4b49      	ldr	r3, [pc, #292]	; (a3280 <Cl_Rinse_Controller+0xc40>)
   a315a:	2200      	movs	r2, #0
   a315c:	709a      	strb	r2, [r3, #2]
						break;
   a315e:	e060      	b.n	a3222 <Cl_Rinse_Controller+0xbe2>
						case EVENT_MAC_RINSE_COMPLETED:
						if(cl_rinsestate != CL_RINSE_STATE_POST_RINSE_STANDBY)
   a3160:	4b3b      	ldr	r3, [pc, #236]	; (a3250 <Cl_Rinse_Controller+0xc10>)
   a3162:	781b      	ldrb	r3, [r3, #0]
   a3164:	2b09      	cmp	r3, #9
   a3166:	d034      	beq.n	a31d2 <Cl_Rinse_Controller+0xb92>
						{
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_NO_FLOW,false );					
   a3168:	200c      	movs	r0, #12
   a316a:	2100      	movs	r1, #0
   a316c:	4b37      	ldr	r3, [pc, #220]	; (a324c <Cl_Rinse_Controller+0xc0c>)
   a316e:	4798      	blx	r3
   a3170:	4603      	mov	r3, r0
   a3172:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,false );
   a3176:	200d      	movs	r0, #13
   a3178:	2100      	movs	r1, #0
   a317a:	4b34      	ldr	r3, [pc, #208]	; (a324c <Cl_Rinse_Controller+0xc0c>)
   a317c:	4798      	blx	r3
   a317e:	4603      	mov	r3, r0
   a3180:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_HIGH_FLOWRATE,false );
   a3184:	200e      	movs	r0, #14
   a3186:	2100      	movs	r1, #0
   a3188:	4b30      	ldr	r3, [pc, #192]	; (a324c <Cl_Rinse_Controller+0xc0c>)
   a318a:	4798      	blx	r3
   a318c:	4603      	mov	r3, r0
   a318e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(ACID_IN_OPEN,false );
   a3192:	2029      	movs	r0, #41	; 0x29
   a3194:	2100      	movs	r1, #0
   a3196:	4b2d      	ldr	r3, [pc, #180]	; (a324c <Cl_Rinse_Controller+0xc0c>)
   a3198:	4798      	blx	r3
   a319a:	4603      	mov	r3, r0
   a319c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(BICARB_IN_OPEN,false );
   a31a0:	202b      	movs	r0, #43	; 0x2b
   a31a2:	2100      	movs	r1, #0
   a31a4:	4b29      	ldr	r3, [pc, #164]	; (a324c <Cl_Rinse_Controller+0xc0c>)
   a31a6:	4798      	blx	r3
   a31a8:	4603      	mov	r3, r0
   a31aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_OPEN,false );
   a31ae:	2003      	movs	r0, #3
   a31b0:	2100      	movs	r1, #0
   a31b2:	4b26      	ldr	r3, [pc, #152]	; (a324c <Cl_Rinse_Controller+0xc0c>)
   a31b4:	4798      	blx	r3
   a31b6:	4603      	mov	r3, r0
   a31b8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_OPEN,false );
   a31bc:	2004      	movs	r0, #4
   a31be:	2100      	movs	r1, #0
   a31c0:	4b22      	ldr	r3, [pc, #136]	; (a324c <Cl_Rinse_Controller+0xc0c>)
   a31c2:	4798      	blx	r3
   a31c4:	4603      	mov	r3, r0
   a31c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							cl_rinsestate = CL_RINSE_STATE_POST_RINSE_STANDBY;
   a31ca:	4b21      	ldr	r3, [pc, #132]	; (a3250 <Cl_Rinse_Controller+0xc10>)
   a31cc:	2209      	movs	r2, #9
   a31ce:	701a      	strb	r2, [r3, #0]
						}
						break;
   a31d0:	e027      	b.n	a3222 <Cl_Rinse_Controller+0xbe2>
   a31d2:	e026      	b.n	a3222 <Cl_Rinse_Controller+0xbe2>
						case EVENT_RINSE_SET_BLDPMP_ON:
						cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_START,0);
   a31d4:	200c      	movs	r0, #12
   a31d6:	2100      	movs	r1, #0
   a31d8:	4b2a      	ldr	r3, [pc, #168]	; (a3284 <Cl_Rinse_Controller+0xc44>)
   a31da:	4798      	blx	r3
						break;
   a31dc:	e021      	b.n	a3222 <Cl_Rinse_Controller+0xbe2>
						case EVENT_RINSE_SET_BLDPMP_OFF:
						cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_STOP,0);
   a31de:	200d      	movs	r0, #13
   a31e0:	2100      	movs	r1, #0
   a31e2:	4b28      	ldr	r3, [pc, #160]	; (a3284 <Cl_Rinse_Controller+0xc44>)
   a31e4:	4798      	blx	r3
						break;
   a31e6:	e01c      	b.n	a3222 <Cl_Rinse_Controller+0xbe2>
						case EVENT_RINSE_SET_BLDPUMPRATE:
						if(Cl_ConsoleRxMsg.msgready == true)
   a31e8:	4b2b      	ldr	r3, [pc, #172]	; (a3298 <Cl_Rinse_Controller+0xc58>)
   a31ea:	7e1b      	ldrb	r3, [r3, #24]
   a31ec:	2b00      	cmp	r3, #0
   a31ee:	d013      	beq.n	a3218 <Cl_Rinse_Controller+0xbd8>
						{
							
						cl_Datastreamtype cl_temp  ;
						cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   a31f0:	4b29      	ldr	r3, [pc, #164]	; (a3298 <Cl_Rinse_Controller+0xc58>)
   a31f2:	791b      	ldrb	r3, [r3, #4]
   a31f4:	763b      	strb	r3, [r7, #24]
						cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[0];
   a31f6:	4b28      	ldr	r3, [pc, #160]	; (a3298 <Cl_Rinse_Controller+0xc58>)
   a31f8:	791b      	ldrb	r3, [r3, #4]
   a31fa:	767b      	strb	r3, [r7, #25]
						cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[0];
   a31fc:	4b26      	ldr	r3, [pc, #152]	; (a3298 <Cl_Rinse_Controller+0xc58>)
   a31fe:	791b      	ldrb	r3, [r3, #4]
   a3200:	76bb      	strb	r3, [r7, #26]
						cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[0];
   a3202:	4b25      	ldr	r3, [pc, #148]	; (a3298 <Cl_Rinse_Controller+0xc58>)
   a3204:	791b      	ldrb	r3, [r3, #4]
   a3206:	76fb      	strb	r3, [r7, #27]
						cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_SETRATE,cl_temp.Twobyte);
   a3208:	8b3b      	ldrh	r3, [r7, #24]
   a320a:	b29b      	uxth	r3, r3
   a320c:	b21b      	sxth	r3, r3
   a320e:	200e      	movs	r0, #14
   a3210:	4619      	mov	r1, r3
   a3212:	4b1c      	ldr	r3, [pc, #112]	; (a3284 <Cl_Rinse_Controller+0xc44>)
   a3214:	4798      	blx	r3
						}
						break;
   a3216:	e004      	b.n	a3222 <Cl_Rinse_Controller+0xbe2>
   a3218:	e003      	b.n	a3222 <Cl_Rinse_Controller+0xbe2>
						
						case EVENT_RINSE_BC_OPENFILL_COMPLETED:
						//sv_prop_stopopenfill();
						cl_rinsing_substate = CL_RINSE_RINSING_BC_SWITCHING;
   a321a:	4b20      	ldr	r3, [pc, #128]	; (a329c <Cl_Rinse_Controller+0xc5c>)
   a321c:	2202      	movs	r2, #2
   a321e:	701a      	strb	r2, [r3, #0]
						break;
   a3220:	bf00      	nop
				}
		break;
   a3222:	f000 bc49 	b.w	a3ab8 <Cl_Rinse_Controller+0x1478>
   a3226:	bf00      	nop
   a3228:	20071cc2 	.word	0x20071cc2
   a322c:	00099cb9 	.word	0x00099cb9
   a3230:	00099e5d 	.word	0x00099e5d
   a3234:	00099e79 	.word	0x00099e79
   a3238:	000a4119 	.word	0x000a4119
   a323c:	000a3ead 	.word	0x000a3ead
   a3240:	00099f4d 	.word	0x00099f4d
   a3244:	00099c69 	.word	0x00099c69
   a3248:	000a3f45 	.word	0x000a3f45
   a324c:	00082e61 	.word	0x00082e61
   a3250:	20071c9e 	.word	0x20071c9e
   a3254:	0008e7f9 	.word	0x0008e7f9
   a3258:	cccccccd 	.word	0xcccccccd
   a325c:	0009ba51 	.word	0x0009ba51
   a3260:	20071ca8 	.word	0x20071ca8
   a3264:	20071cb4 	.word	0x20071cb4
   a3268:	000a4d61 	.word	0x000a4d61
   a326c:	000a40f1 	.word	0x000a40f1
   a3270:	00083035 	.word	0x00083035
   a3274:	20071cbe 	.word	0x20071cbe
   a3278:	20071c98 	.word	0x20071c98
   a327c:	00088fa9 	.word	0x00088fa9
   a3280:	20070ccc 	.word	0x20070ccc
   a3284:	0008850d 	.word	0x0008850d
   a3288:	20071994 	.word	0x20071994
   a328c:	000a8d80 	.word	0x000a8d80
   a3290:	000a8d88 	.word	0x000a8d88
   a3294:	00093305 	.word	0x00093305
   a3298:	200723f0 	.word	0x200723f0
   a329c:	20071c9f 	.word	0x20071c9f
		case CL_RINSE_STATE_CRITICAL_ALARM:
				switch (cl_rinseevent)
   a32a0:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   a32a4:	3b01      	subs	r3, #1
   a32a6:	2b1d      	cmp	r3, #29
   a32a8:	f200 8166 	bhi.w	a3578 <Cl_Rinse_Controller+0xf38>
   a32ac:	a201      	add	r2, pc, #4	; (adr r2, a32b4 <Cl_Rinse_Controller+0xc74>)
   a32ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a32b2:	bf00      	nop
   a32b4:	000a34d9 	.word	0x000a34d9
   a32b8:	000a332d 	.word	0x000a332d
   a32bc:	000a3579 	.word	0x000a3579
   a32c0:	000a3381 	.word	0x000a3381
   a32c4:	000a3393 	.word	0x000a3393
   a32c8:	000a33a5 	.word	0x000a33a5
   a32cc:	000a3579 	.word	0x000a3579
   a32d0:	000a3579 	.word	0x000a3579
   a32d4:	000a3579 	.word	0x000a3579
   a32d8:	000a3579 	.word	0x000a3579
   a32dc:	000a3579 	.word	0x000a3579
   a32e0:	000a3579 	.word	0x000a3579
   a32e4:	000a3579 	.word	0x000a3579
   a32e8:	000a3579 	.word	0x000a3579
   a32ec:	000a3579 	.word	0x000a3579
   a32f0:	000a3579 	.word	0x000a3579
   a32f4:	000a3579 	.word	0x000a3579
   a32f8:	000a3443 	.word	0x000a3443
   a32fc:	000a3579 	.word	0x000a3579
   a3300:	000a3579 	.word	0x000a3579
   a3304:	000a3579 	.word	0x000a3579
   a3308:	000a3437 	.word	0x000a3437
   a330c:	000a33ab 	.word	0x000a33ab
   a3310:	000a3579 	.word	0x000a3579
   a3314:	000a3579 	.word	0x000a3579
   a3318:	000a3579 	.word	0x000a3579
   a331c:	000a3579 	.word	0x000a3579
   a3320:	000a3579 	.word	0x000a3579
   a3324:	000a3579 	.word	0x000a3579
   a3328:	000a3547 	.word	0x000a3547
				{
					case EVENT_START_RINSE:
					Cl_Rinse_StartRinse();
   a332c:	4bba      	ldr	r3, [pc, #744]	; (a3618 <Cl_Rinse_Controller+0xfd8>)
   a332e:	4798      	blx	r3
					command = CON_TX_COMMAND_RINSE_CONFIRM;
   a3330:	2308      	movs	r3, #8
   a3332:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
					data = (Cl_Uint8Type)COMMAND_RESULT_SUCCESS;
   a3336:	2301      	movs	r3, #1
   a3338:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,1);					
   a333c:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   a3340:	f107 033b 	add.w	r3, r7, #59	; 0x3b
   a3344:	4610      	mov	r0, r2
   a3346:	4619      	mov	r1, r3
   a3348:	2201      	movs	r2, #1
   a334a:	4bb4      	ldr	r3, [pc, #720]	; (a361c <Cl_Rinse_Controller+0xfdc>)
   a334c:	4798      	blx	r3
   a334e:	4603      	mov	r3, r0
   a3350:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					command = CON_TX_COMMAND_RINSE_STARTED;
   a3354:	2309      	movs	r3, #9
   a3356:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
					Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,0);
   a335a:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   a335e:	f107 033b 	add.w	r3, r7, #59	; 0x3b
   a3362:	4610      	mov	r0, r2
   a3364:	4619      	mov	r1, r3
   a3366:	2200      	movs	r2, #0
   a3368:	4bac      	ldr	r3, [pc, #688]	; (a361c <Cl_Rinse_Controller+0xfdc>)
   a336a:	4798      	blx	r3
   a336c:	4603      	mov	r3, r0
   a336e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						cl_rinsestate = CL_RINSE_STATE_RINSING;
   a3372:	4bab      	ldr	r3, [pc, #684]	; (a3620 <Cl_Rinse_Controller+0xfe0>)
   a3374:	2203      	movs	r2, #3
   a3376:	701a      	strb	r2, [r3, #0]
						cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
   a3378:	4baa      	ldr	r3, [pc, #680]	; (a3624 <Cl_Rinse_Controller+0xfe4>)
   a337a:	2201      	movs	r2, #1
   a337c:	701a      	strb	r2, [r3, #0]
					break;
   a337e:	e0fc      	b.n	a357a <Cl_Rinse_Controller+0xf3a>
					case EVENT_START_PRE_DISINF_RINSE:
						Cl_Rinse_StartRinse();
   a3380:	4ba5      	ldr	r3, [pc, #660]	; (a3618 <Cl_Rinse_Controller+0xfd8>)
   a3382:	4798      	blx	r3
					
						cl_rinsestate = CL_RINSE_STATE_PRE_DISINFECT_RINSING;
   a3384:	4ba6      	ldr	r3, [pc, #664]	; (a3620 <Cl_Rinse_Controller+0xfe0>)
   a3386:	2204      	movs	r2, #4
   a3388:	701a      	strb	r2, [r3, #0]
						cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
   a338a:	4ba6      	ldr	r3, [pc, #664]	; (a3624 <Cl_Rinse_Controller+0xfe4>)
   a338c:	2201      	movs	r2, #1
   a338e:	701a      	strb	r2, [r3, #0]
					break;
   a3390:	e0f3      	b.n	a357a <Cl_Rinse_Controller+0xf3a>
					case EVENT_START_POST_DISINF_RINSE:
							Cl_Rinse_StartRinse();
   a3392:	4ba1      	ldr	r3, [pc, #644]	; (a3618 <Cl_Rinse_Controller+0xfd8>)
   a3394:	4798      	blx	r3
							cl_rinsestate = CL_RINSE_STATE_POST_DISINFECT_RINSING;
   a3396:	4ba2      	ldr	r3, [pc, #648]	; (a3620 <Cl_Rinse_Controller+0xfe0>)
   a3398:	2205      	movs	r2, #5
   a339a:	701a      	strb	r2, [r3, #0]
							cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
   a339c:	4ba1      	ldr	r3, [pc, #644]	; (a3624 <Cl_Rinse_Controller+0xfe4>)
   a339e:	2201      	movs	r2, #1
   a33a0:	701a      	strb	r2, [r3, #0]
					break;
   a33a2:	e0ea      	b.n	a357a <Cl_Rinse_Controller+0xf3a>
					case EVENT_STOP_RINSE:
					Cl_Rinse_StopRinse();
   a33a4:	4ba0      	ldr	r3, [pc, #640]	; (a3628 <Cl_Rinse_Controller+0xfe8>)
   a33a6:	4798      	blx	r3
					break;
   a33a8:	e0e7      	b.n	a357a <Cl_Rinse_Controller+0xf3a>
					case EVT_RINSE_GET_DATA:
					if(Cl_ConsoleRxMsg.msgready == true)
   a33aa:	4ba0      	ldr	r3, [pc, #640]	; (a362c <Cl_Rinse_Controller+0xfec>)
   a33ac:	7e1b      	ldrb	r3, [r3, #24]
   a33ae:	2b00      	cmp	r3, #0
   a33b0:	d040      	beq.n	a3434 <Cl_Rinse_Controller+0xdf4>
					{
					
						switch(Cl_ConsoleRxMsg.data.byte[0])
   a33b2:	4b9e      	ldr	r3, [pc, #632]	; (a362c <Cl_Rinse_Controller+0xfec>)
   a33b4:	791b      	ldrb	r3, [r3, #4]
   a33b6:	2b01      	cmp	r3, #1
   a33b8:	d002      	beq.n	a33c0 <Cl_Rinse_Controller+0xd80>
   a33ba:	2b21      	cmp	r3, #33	; 0x21
   a33bc:	d01d      	beq.n	a33fa <Cl_Rinse_Controller+0xdba>
							dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;
							Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DISINF_STATUS, &dataarray[1]);
							Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);	
							break;
							default:
							break;
   a33be:	e039      	b.n	a3434 <Cl_Rinse_Controller+0xdf4>
					{
					
						switch(Cl_ConsoleRxMsg.data.byte[0])
						{
							case CON_RX_PARAM_DATA_RINSE_STATUS:
							command = CON_TX_COMMAND_SYSDATA;
   a33c0:	2316      	movs	r3, #22
   a33c2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
							dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   a33c6:	2301      	movs	r3, #1
   a33c8:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
							Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a33cc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   a33d0:	3301      	adds	r3, #1
   a33d2:	2001      	movs	r0, #1
   a33d4:	4619      	mov	r1, r3
   a33d6:	4b96      	ldr	r3, [pc, #600]	; (a3630 <Cl_Rinse_Controller+0xff0>)
   a33d8:	4798      	blx	r3
   a33da:	4603      	mov	r3, r0
   a33dc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   a33e0:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   a33e4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   a33e8:	4610      	mov	r0, r2
   a33ea:	4619      	mov	r1, r3
   a33ec:	2202      	movs	r2, #2
   a33ee:	4b8b      	ldr	r3, [pc, #556]	; (a361c <Cl_Rinse_Controller+0xfdc>)
   a33f0:	4798      	blx	r3
   a33f2:	4603      	mov	r3, r0
   a33f4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						
							break;
   a33f8:	e01c      	b.n	a3434 <Cl_Rinse_Controller+0xdf4>
							case CON_RX_PARAM_DATA_DISINF_STATUS:
							command = CON_TX_COMMAND_SYSDATA;
   a33fa:	2316      	movs	r3, #22
   a33fc:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
							dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;
   a3400:	2323      	movs	r3, #35	; 0x23
   a3402:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
							Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DISINF_STATUS, &dataarray[1]);
   a3406:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   a340a:	3301      	adds	r3, #1
   a340c:	2028      	movs	r0, #40	; 0x28
   a340e:	4619      	mov	r1, r3
   a3410:	4b87      	ldr	r3, [pc, #540]	; (a3630 <Cl_Rinse_Controller+0xff0>)
   a3412:	4798      	blx	r3
   a3414:	4603      	mov	r3, r0
   a3416:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);	
   a341a:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   a341e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   a3422:	4610      	mov	r0, r2
   a3424:	4619      	mov	r1, r3
   a3426:	2202      	movs	r2, #2
   a3428:	4b7c      	ldr	r3, [pc, #496]	; (a361c <Cl_Rinse_Controller+0xfdc>)
   a342a:	4798      	blx	r3
   a342c:	4603      	mov	r3, r0
   a342e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							break;
   a3432:	bf00      	nop
							default:
							break;
						}
					}
					break;
   a3434:	e0a1      	b.n	a357a <Cl_Rinse_Controller+0xf3a>
					case EVENT_RINSE_ALARM:
					Cl_rinseretcode = Cl_Rinse_ProcessAlarms();
   a3436:	4b7f      	ldr	r3, [pc, #508]	; (a3634 <Cl_Rinse_Controller+0xff4>)
   a3438:	4798      	blx	r3
   a343a:	4603      	mov	r3, r0
   a343c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					break;
   a3440:	e09b      	b.n	a357a <Cl_Rinse_Controller+0xf3a>
					
					case EVENT_RINSE_TICK_SECOND:
						
							for (tempcount = 0 ; tempcount < CL_RINSE_ALRM_MAX ; tempcount++)
   a3442:	4b7d      	ldr	r3, [pc, #500]	; (a3638 <Cl_Rinse_Controller+0xff8>)
   a3444:	2200      	movs	r2, #0
   a3446:	801a      	strh	r2, [r3, #0]
   a3448:	e041      	b.n	a34ce <Cl_Rinse_Controller+0xe8e>
							{
								//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER",8);
								Cl_Alarm_GetAlarmStatus(Cl_RinseAlarmTable[tempcount].Cl_RinseAlarmId,&Cl_RinseAlarmTable[tempcount].IsActive);
   a344a:	4b7b      	ldr	r3, [pc, #492]	; (a3638 <Cl_Rinse_Controller+0xff8>)
   a344c:	881b      	ldrh	r3, [r3, #0]
   a344e:	461a      	mov	r2, r3
   a3450:	4b7a      	ldr	r3, [pc, #488]	; (a363c <Cl_Rinse_Controller+0xffc>)
   a3452:	f813 1032 	ldrb.w	r1, [r3, r2, lsl #3]
   a3456:	4b78      	ldr	r3, [pc, #480]	; (a3638 <Cl_Rinse_Controller+0xff8>)
   a3458:	881b      	ldrh	r3, [r3, #0]
   a345a:	00db      	lsls	r3, r3, #3
   a345c:	4a77      	ldr	r2, [pc, #476]	; (a363c <Cl_Rinse_Controller+0xffc>)
   a345e:	4413      	add	r3, r2
   a3460:	3302      	adds	r3, #2
   a3462:	4608      	mov	r0, r1
   a3464:	4619      	mov	r1, r3
   a3466:	4b76      	ldr	r3, [pc, #472]	; (a3640 <Cl_Rinse_Controller+0x1000>)
   a3468:	4798      	blx	r3
								if (Cl_RinseAlarmTable[tempcount].IsActive)
   a346a:	4b73      	ldr	r3, [pc, #460]	; (a3638 <Cl_Rinse_Controller+0xff8>)
   a346c:	881b      	ldrh	r3, [r3, #0]
   a346e:	4a73      	ldr	r2, [pc, #460]	; (a363c <Cl_Rinse_Controller+0xffc>)
   a3470:	00db      	lsls	r3, r3, #3
   a3472:	4413      	add	r3, r2
   a3474:	789b      	ldrb	r3, [r3, #2]
   a3476:	2b00      	cmp	r3, #0
   a3478:	d00d      	beq.n	a3496 <Cl_Rinse_Controller+0xe56>
								{
										Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"ENTER_1",8);
   a347a:	2018      	movs	r0, #24
   a347c:	4971      	ldr	r1, [pc, #452]	; (a3644 <Cl_Rinse_Controller+0x1004>)
   a347e:	2208      	movs	r2, #8
   a3480:	4b66      	ldr	r3, [pc, #408]	; (a361c <Cl_Rinse_Controller+0xfdc>)
   a3482:	4798      	blx	r3
										Cl_Rinse_StopRinse();
   a3484:	4b68      	ldr	r3, [pc, #416]	; (a3628 <Cl_Rinse_Controller+0xfe8>)
   a3486:	4798      	blx	r3
										cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a3488:	4b65      	ldr	r3, [pc, #404]	; (a3620 <Cl_Rinse_Controller+0xfe0>)
   a348a:	2206      	movs	r2, #6
   a348c:	701a      	strb	r2, [r3, #0]
										tempcount=0;
   a348e:	4b6a      	ldr	r3, [pc, #424]	; (a3638 <Cl_Rinse_Controller+0xff8>)
   a3490:	2200      	movs	r2, #0
   a3492:	801a      	strh	r2, [r3, #0]
										break;	
   a3494:	e01f      	b.n	a34d6 <Cl_Rinse_Controller+0xe96>
								}
								else if (tempcount == CL_RINSE_ALRM_MAX - 1)
   a3496:	4b68      	ldr	r3, [pc, #416]	; (a3638 <Cl_Rinse_Controller+0xff8>)
   a3498:	881b      	ldrh	r3, [r3, #0]
   a349a:	2b19      	cmp	r3, #25
   a349c:	d111      	bne.n	a34c2 <Cl_Rinse_Controller+0xe82>
								{
									if(!Cl_RinseAlarmTable[tempcount].IsActive)
   a349e:	4b66      	ldr	r3, [pc, #408]	; (a3638 <Cl_Rinse_Controller+0xff8>)
   a34a0:	881b      	ldrh	r3, [r3, #0]
   a34a2:	4a66      	ldr	r2, [pc, #408]	; (a363c <Cl_Rinse_Controller+0xffc>)
   a34a4:	00db      	lsls	r3, r3, #3
   a34a6:	4413      	add	r3, r2
   a34a8:	789b      	ldrb	r3, [r3, #2]
   a34aa:	f083 0301 	eor.w	r3, r3, #1
   a34ae:	b2db      	uxtb	r3, r3
   a34b0:	2b00      	cmp	r3, #0
   a34b2:	d006      	beq.n	a34c2 <Cl_Rinse_Controller+0xe82>
									{
										Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"SAFE",8);
   a34b4:	2018      	movs	r0, #24
   a34b6:	4964      	ldr	r1, [pc, #400]	; (a3648 <Cl_Rinse_Controller+0x1008>)
   a34b8:	2208      	movs	r2, #8
   a34ba:	4b58      	ldr	r3, [pc, #352]	; (a361c <Cl_Rinse_Controller+0xfdc>)
   a34bc:	4798      	blx	r3
										
										//alarm_flag = 0;
										Cl_Rinse_ResetAlertsforReassertion();
   a34be:	4b63      	ldr	r3, [pc, #396]	; (a364c <Cl_Rinse_Controller+0x100c>)
   a34c0:	4798      	blx	r3
					Cl_rinseretcode = Cl_Rinse_ProcessAlarms();
					break;
					
					case EVENT_RINSE_TICK_SECOND:
						
							for (tempcount = 0 ; tempcount < CL_RINSE_ALRM_MAX ; tempcount++)
   a34c2:	4b5d      	ldr	r3, [pc, #372]	; (a3638 <Cl_Rinse_Controller+0xff8>)
   a34c4:	881b      	ldrh	r3, [r3, #0]
   a34c6:	3301      	adds	r3, #1
   a34c8:	b29a      	uxth	r2, r3
   a34ca:	4b5b      	ldr	r3, [pc, #364]	; (a3638 <Cl_Rinse_Controller+0xff8>)
   a34cc:	801a      	strh	r2, [r3, #0]
   a34ce:	4b5a      	ldr	r3, [pc, #360]	; (a3638 <Cl_Rinse_Controller+0xff8>)
   a34d0:	881b      	ldrh	r3, [r3, #0]
   a34d2:	2b19      	cmp	r3, #25
   a34d4:	d9b9      	bls.n	a344a <Cl_Rinse_Controller+0xe0a>
										//Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,0);
									//	cl_rinsestate = CL_RINSE_STATE_RINSING;
									}
								}
							}
						break;
   a34d6:	e050      	b.n	a357a <Cl_Rinse_Controller+0xf3a>
					case EVENT_RINSE_CLR_ALARM:
										sv_cntrl_resetyellowalarm();
   a34d8:	4b5d      	ldr	r3, [pc, #372]	; (a3650 <Cl_Rinse_Controller+0x1010>)
   a34da:	4798      	blx	r3
										sv_cntrl_resetredalarm();
   a34dc:	4b5d      	ldr	r3, [pc, #372]	; (a3654 <Cl_Rinse_Controller+0x1014>)
   a34de:	4798      	blx	r3
										sv_cntrl_nobuzzer();
   a34e0:	4b5d      	ldr	r3, [pc, #372]	; (a3658 <Cl_Rinse_Controller+0x1018>)
   a34e2:	4798      	blx	r3
										Cl_Rinse_ResetAlertsforReassertion();
   a34e4:	4b59      	ldr	r3, [pc, #356]	; (a364c <Cl_Rinse_Controller+0x100c>)
   a34e6:	4798      	blx	r3
										Cl_Rinse_StartRinse();
   a34e8:	4b4b      	ldr	r3, [pc, #300]	; (a3618 <Cl_Rinse_Controller+0xfd8>)
   a34ea:	4798      	blx	r3
							command = CON_TX_COMMAND_RINSE_CONFIRM;
   a34ec:	2308      	movs	r3, #8
   a34ee:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
							data = (Cl_Uint8Type)COMMAND_RESULT_SUCCESS;
   a34f2:	2301      	movs	r3, #1
   a34f4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
							Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,1);
   a34f8:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   a34fc:	f107 033b 	add.w	r3, r7, #59	; 0x3b
   a3500:	4610      	mov	r0, r2
   a3502:	4619      	mov	r1, r3
   a3504:	2201      	movs	r2, #1
   a3506:	4b45      	ldr	r3, [pc, #276]	; (a361c <Cl_Rinse_Controller+0xfdc>)
   a3508:	4798      	blx	r3
   a350a:	4603      	mov	r3, r0
   a350c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							command = CON_TX_COMMAND_RINSE_STARTED;
   a3510:	2309      	movs	r3, #9
   a3512:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
							Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,0);
   a3516:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   a351a:	f107 033b 	add.w	r3, r7, #59	; 0x3b
   a351e:	4610      	mov	r0, r2
   a3520:	4619      	mov	r1, r3
   a3522:	2200      	movs	r2, #0
   a3524:	4b3d      	ldr	r3, [pc, #244]	; (a361c <Cl_Rinse_Controller+0xfdc>)
   a3526:	4798      	blx	r3
   a3528:	4603      	mov	r3, r0
   a352a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							Cl_rinseretcode = Cl_Rinse_UpdateTimeInfo();
   a352e:	4b4b      	ldr	r3, [pc, #300]	; (a365c <Cl_Rinse_Controller+0x101c>)
   a3530:	4798      	blx	r3
   a3532:	4603      	mov	r3, r0
   a3534:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
										cl_rinsestate = CL_RINSE_STATE_RINSING;
   a3538:	4b39      	ldr	r3, [pc, #228]	; (a3620 <Cl_Rinse_Controller+0xfe0>)
   a353a:	2203      	movs	r2, #3
   a353c:	701a      	strb	r2, [r3, #0]
							cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
   a353e:	4b39      	ldr	r3, [pc, #228]	; (a3624 <Cl_Rinse_Controller+0xfe4>)
   a3540:	2201      	movs	r2, #1
   a3542:	701a      	strb	r2, [r3, #0]
						
						
						//alarm_flag = 1;
						break;
   a3544:	e019      	b.n	a357a <Cl_Rinse_Controller+0xf3a>
					case EVENT_RINSE_TICK_MINUTE:
					//Cl_rinseretcode = Cl_Rinse_ResetAlertsforReassertion();
					//Cl_rinseretcode = Cl_Rinse_repeatalrm();
					break;
					case EVENT_RINSE_SET_BLDPUMPRATE:
						if(Cl_ConsoleRxMsg.msgready == true)
   a3546:	4b39      	ldr	r3, [pc, #228]	; (a362c <Cl_Rinse_Controller+0xfec>)
   a3548:	7e1b      	ldrb	r3, [r3, #24]
   a354a:	2b00      	cmp	r3, #0
   a354c:	d013      	beq.n	a3576 <Cl_Rinse_Controller+0xf36>
						{
							
							cl_Datastreamtype cl_temp  ;
							cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   a354e:	4b37      	ldr	r3, [pc, #220]	; (a362c <Cl_Rinse_Controller+0xfec>)
   a3550:	791b      	ldrb	r3, [r3, #4]
   a3552:	753b      	strb	r3, [r7, #20]
							cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[0];
   a3554:	4b35      	ldr	r3, [pc, #212]	; (a362c <Cl_Rinse_Controller+0xfec>)
   a3556:	791b      	ldrb	r3, [r3, #4]
   a3558:	757b      	strb	r3, [r7, #21]
							cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[0];
   a355a:	4b34      	ldr	r3, [pc, #208]	; (a362c <Cl_Rinse_Controller+0xfec>)
   a355c:	791b      	ldrb	r3, [r3, #4]
   a355e:	75bb      	strb	r3, [r7, #22]
							cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[0];
   a3560:	4b32      	ldr	r3, [pc, #200]	; (a362c <Cl_Rinse_Controller+0xfec>)
   a3562:	791b      	ldrb	r3, [r3, #4]
   a3564:	75fb      	strb	r3, [r7, #23]
							cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_SETRATE,cl_temp.Twobyte);
   a3566:	8abb      	ldrh	r3, [r7, #20]
   a3568:	b29b      	uxth	r3, r3
   a356a:	b21b      	sxth	r3, r3
   a356c:	200e      	movs	r0, #14
   a356e:	4619      	mov	r1, r3
   a3570:	4b3b      	ldr	r3, [pc, #236]	; (a3660 <Cl_Rinse_Controller+0x1020>)
   a3572:	4798      	blx	r3
						}
					break;
   a3574:	e001      	b.n	a357a <Cl_Rinse_Controller+0xf3a>
   a3576:	e000      	b.n	a357a <Cl_Rinse_Controller+0xf3a>
					default:break;
   a3578:	bf00      	nop
				}
		break;
   a357a:	e29e      	b.n	a3aba <Cl_Rinse_Controller+0x147a>
		case CL_RINSE_STATE_POST_RINSE_STANDBY:
				switch (cl_rinseevent)
   a357c:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   a3580:	3b02      	subs	r3, #2
   a3582:	2b1e      	cmp	r3, #30
   a3584:	f200 81ef 	bhi.w	a3966 <Cl_Rinse_Controller+0x1326>
   a3588:	a201      	add	r2, pc, #4	; (adr r2, a3590 <Cl_Rinse_Controller+0xf50>)
   a358a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a358e:	bf00      	nop
   a3590:	000a3665 	.word	0x000a3665
   a3594:	000a3967 	.word	0x000a3967
   a3598:	000a36e3 	.word	0x000a36e3
   a359c:	000a36ff 	.word	0x000a36ff
   a35a0:	000a3967 	.word	0x000a3967
   a35a4:	000a3967 	.word	0x000a3967
   a35a8:	000a3967 	.word	0x000a3967
   a35ac:	000a3967 	.word	0x000a3967
   a35b0:	000a3967 	.word	0x000a3967
   a35b4:	000a3967 	.word	0x000a3967
   a35b8:	000a3967 	.word	0x000a3967
   a35bc:	000a3967 	.word	0x000a3967
   a35c0:	000a3967 	.word	0x000a3967
   a35c4:	000a3967 	.word	0x000a3967
   a35c8:	000a3967 	.word	0x000a3967
   a35cc:	000a3967 	.word	0x000a3967
   a35d0:	000a3967 	.word	0x000a3967
   a35d4:	000a3967 	.word	0x000a3967
   a35d8:	000a3967 	.word	0x000a3967
   a35dc:	000a3967 	.word	0x000a3967
   a35e0:	000a360d 	.word	0x000a360d
   a35e4:	000a371b 	.word	0x000a371b
   a35e8:	000a3967 	.word	0x000a3967
   a35ec:	000a3931 	.word	0x000a3931
   a35f0:	000a38c7 	.word	0x000a38c7
   a35f4:	000a38ef 	.word	0x000a38ef
   a35f8:	000a3967 	.word	0x000a3967
   a35fc:	000a3967 	.word	0x000a3967
   a3600:	000a3935 	.word	0x000a3935
   a3604:	000a38f9 	.word	0x000a38f9
   a3608:	000a391d 	.word	0x000a391d
				{
					case EVENT_RINSE_ALARM:
					Cl_rinseretcode = Cl_Rinse_ProcessAlarms();
   a360c:	4b09      	ldr	r3, [pc, #36]	; (a3634 <Cl_Rinse_Controller+0xff4>)
   a360e:	4798      	blx	r3
   a3610:	4603      	mov	r3, r0
   a3612:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					break;
   a3616:	e1a8      	b.n	a396a <Cl_Rinse_Controller+0x132a>
   a3618:	000a48c1 	.word	0x000a48c1
   a361c:	0009ba51 	.word	0x0009ba51
   a3620:	20071c9e 	.word	0x20071c9e
   a3624:	20071c9f 	.word	0x20071c9f
   a3628:	000a4d61 	.word	0x000a4d61
   a362c:	200723f0 	.word	0x200723f0
   a3630:	0009a545 	.word	0x0009a545
   a3634:	000a40f1 	.word	0x000a40f1
   a3638:	2007281c 	.word	0x2007281c
   a363c:	20070ccc 	.word	0x20070ccc
   a3640:	00083035 	.word	0x00083035
   a3644:	000a8d94 	.word	0x000a8d94
   a3648:	000a8d9c 	.word	0x000a8d9c
   a364c:	000a4119 	.word	0x000a4119
   a3650:	00099f89 	.word	0x00099f89
   a3654:	00099f75 	.word	0x00099f75
   a3658:	00099fb1 	.word	0x00099fb1
   a365c:	000a3e4d 	.word	0x000a3e4d
   a3660:	0008850d 	.word	0x0008850d
					
					case EVENT_START_RINSE:
					
					if(Cl_ConsoleRxMsg.msgready == true)
   a3664:	4bc1      	ldr	r3, [pc, #772]	; (a396c <Cl_Rinse_Controller+0x132c>)
   a3666:	7e1b      	ldrb	r3, [r3, #24]
   a3668:	2b00      	cmp	r3, #0
   a366a:	d00b      	beq.n	a3684 <Cl_Rinse_Controller+0x1044>
					{
					cl_Datastreamtype cl_temp  ;
					cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   a366c:	4bbf      	ldr	r3, [pc, #764]	; (a396c <Cl_Rinse_Controller+0x132c>)
   a366e:	791b      	ldrb	r3, [r3, #4]
   a3670:	743b      	strb	r3, [r7, #16]
					if (cl_temp.bytearray[0] == 1)
   a3672:	7c3b      	ldrb	r3, [r7, #16]
   a3674:	2b01      	cmp	r3, #1
   a3676:	d005      	beq.n	a3684 <Cl_Rinse_Controller+0x1044>
					{
						
					}
					else if (cl_temp.bytearray[0] == 2)
   a3678:	7c3b      	ldrb	r3, [r7, #16]
   a367a:	2b02      	cmp	r3, #2
   a367c:	d102      	bne.n	a3684 <Cl_Rinse_Controller+0x1044>
					{
						hotrinse_flag = 1;
   a367e:	4bbc      	ldr	r3, [pc, #752]	; (a3970 <Cl_Rinse_Controller+0x1330>)
   a3680:	2201      	movs	r2, #1
   a3682:	701a      	strb	r2, [r3, #0]
					}
					
					}
					Cl_Rinse_StartRinse();
   a3684:	4bbb      	ldr	r3, [pc, #748]	; (a3974 <Cl_Rinse_Controller+0x1334>)
   a3686:	4798      	blx	r3
					command = CON_TX_COMMAND_RINSE_CONFIRM;
   a3688:	2308      	movs	r3, #8
   a368a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
					data = (Cl_Uint8Type)COMMAND_RESULT_SUCCESS;
   a368e:	2301      	movs	r3, #1
   a3690:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,1);					
   a3694:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   a3698:	f107 033b 	add.w	r3, r7, #59	; 0x3b
   a369c:	4610      	mov	r0, r2
   a369e:	4619      	mov	r1, r3
   a36a0:	2201      	movs	r2, #1
   a36a2:	4bb5      	ldr	r3, [pc, #724]	; (a3978 <Cl_Rinse_Controller+0x1338>)
   a36a4:	4798      	blx	r3
   a36a6:	4603      	mov	r3, r0
   a36a8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					command = CON_TX_COMMAND_RINSE_STARTED;
   a36ac:	2309      	movs	r3, #9
   a36ae:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
					Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,0);
   a36b2:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   a36b6:	f107 033b 	add.w	r3, r7, #59	; 0x3b
   a36ba:	4610      	mov	r0, r2
   a36bc:	4619      	mov	r1, r3
   a36be:	2200      	movs	r2, #0
   a36c0:	4bad      	ldr	r3, [pc, #692]	; (a3978 <Cl_Rinse_Controller+0x1338>)
   a36c2:	4798      	blx	r3
   a36c4:	4603      	mov	r3, r0
   a36c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					Cl_rinseretcode = Cl_Rinse_UpdateTimeInfo();
   a36ca:	4bac      	ldr	r3, [pc, #688]	; (a397c <Cl_Rinse_Controller+0x133c>)
   a36cc:	4798      	blx	r3
   a36ce:	4603      	mov	r3, r0
   a36d0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						cl_rinsestate = CL_RINSE_STATE_RINSING;
   a36d4:	4baa      	ldr	r3, [pc, #680]	; (a3980 <Cl_Rinse_Controller+0x1340>)
   a36d6:	2203      	movs	r2, #3
   a36d8:	701a      	strb	r2, [r3, #0]
						cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
   a36da:	4baa      	ldr	r3, [pc, #680]	; (a3984 <Cl_Rinse_Controller+0x1344>)
   a36dc:	2201      	movs	r2, #1
   a36de:	701a      	strb	r2, [r3, #0]
					break;
   a36e0:	e143      	b.n	a396a <Cl_Rinse_Controller+0x132a>
					case EVENT_START_PRE_DISINF_RINSE:
						Cl_Rinse_StartRinse();
   a36e2:	4ba4      	ldr	r3, [pc, #656]	; (a3974 <Cl_Rinse_Controller+0x1334>)
   a36e4:	4798      	blx	r3
						Cl_rinseretcode = Cl_Rinse_UpdateTimeInfo();
   a36e6:	4ba5      	ldr	r3, [pc, #660]	; (a397c <Cl_Rinse_Controller+0x133c>)
   a36e8:	4798      	blx	r3
   a36ea:	4603      	mov	r3, r0
   a36ec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						cl_rinsestate = CL_RINSE_STATE_PRE_DISINFECT_RINSING;
   a36f0:	4ba3      	ldr	r3, [pc, #652]	; (a3980 <Cl_Rinse_Controller+0x1340>)
   a36f2:	2204      	movs	r2, #4
   a36f4:	701a      	strb	r2, [r3, #0]
						cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
   a36f6:	4ba3      	ldr	r3, [pc, #652]	; (a3984 <Cl_Rinse_Controller+0x1344>)
   a36f8:	2201      	movs	r2, #1
   a36fa:	701a      	strb	r2, [r3, #0]
					break;
   a36fc:	e135      	b.n	a396a <Cl_Rinse_Controller+0x132a>
					case EVENT_START_POST_DISINF_RINSE:
							Cl_Rinse_StartRinse();
   a36fe:	4b9d      	ldr	r3, [pc, #628]	; (a3974 <Cl_Rinse_Controller+0x1334>)
   a3700:	4798      	blx	r3
							Cl_rinseretcode = Cl_Rinse_UpdateTimeInfo();
   a3702:	4b9e      	ldr	r3, [pc, #632]	; (a397c <Cl_Rinse_Controller+0x133c>)
   a3704:	4798      	blx	r3
   a3706:	4603      	mov	r3, r0
   a3708:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							cl_rinsestate = CL_RINSE_STATE_POST_DISINFECT_RINSING;
   a370c:	4b9c      	ldr	r3, [pc, #624]	; (a3980 <Cl_Rinse_Controller+0x1340>)
   a370e:	2205      	movs	r2, #5
   a3710:	701a      	strb	r2, [r3, #0]
							cl_rinsing_substate = CL_RINSE_RINSING_OPENFILL;
   a3712:	4b9c      	ldr	r3, [pc, #624]	; (a3984 <Cl_Rinse_Controller+0x1344>)
   a3714:	2201      	movs	r2, #1
   a3716:	701a      	strb	r2, [r3, #0]
					break;
   a3718:	e127      	b.n	a396a <Cl_Rinse_Controller+0x132a>
					case EVT_RINSE_GET_DATA:
					if(Cl_ConsoleRxMsg.msgready == true)
   a371a:	4b94      	ldr	r3, [pc, #592]	; (a396c <Cl_Rinse_Controller+0x132c>)
   a371c:	7e1b      	ldrb	r3, [r3, #24]
   a371e:	2b00      	cmp	r3, #0
   a3720:	f000 80d0 	beq.w	a38c4 <Cl_Rinse_Controller+0x1284>
					{
						switch(Cl_ConsoleRxMsg.data.byte[0])
   a3724:	4b91      	ldr	r3, [pc, #580]	; (a396c <Cl_Rinse_Controller+0x132c>)
   a3726:	791b      	ldrb	r3, [r3, #4]
   a3728:	3b01      	subs	r3, #1
   a372a:	2b20      	cmp	r3, #32
   a372c:	f200 80c9 	bhi.w	a38c2 <Cl_Rinse_Controller+0x1282>
   a3730:	a201      	add	r2, pc, #4	; (adr r2, a3738 <Cl_Rinse_Controller+0x10f8>)
   a3732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a3736:	bf00      	nop
   a3738:	000a37bd 	.word	0x000a37bd
   a373c:	000a37f7 	.word	0x000a37f7
   a3740:	000a38c3 	.word	0x000a38c3
   a3744:	000a38c3 	.word	0x000a38c3
   a3748:	000a38c3 	.word	0x000a38c3
   a374c:	000a38c3 	.word	0x000a38c3
   a3750:	000a38c3 	.word	0x000a38c3
   a3754:	000a38c3 	.word	0x000a38c3
   a3758:	000a38c3 	.word	0x000a38c3
   a375c:	000a38c3 	.word	0x000a38c3
   a3760:	000a38c3 	.word	0x000a38c3
   a3764:	000a38c3 	.word	0x000a38c3
   a3768:	000a38c3 	.word	0x000a38c3
   a376c:	000a38c3 	.word	0x000a38c3
   a3770:	000a38c3 	.word	0x000a38c3
   a3774:	000a38c3 	.word	0x000a38c3
   a3778:	000a38c3 	.word	0x000a38c3
   a377c:	000a38c3 	.word	0x000a38c3
   a3780:	000a38c3 	.word	0x000a38c3
   a3784:	000a38c3 	.word	0x000a38c3
   a3788:	000a38c3 	.word	0x000a38c3
   a378c:	000a38c3 	.word	0x000a38c3
   a3790:	000a38c3 	.word	0x000a38c3
   a3794:	000a38c3 	.word	0x000a38c3
   a3798:	000a38c3 	.word	0x000a38c3
   a379c:	000a38c3 	.word	0x000a38c3
   a37a0:	000a38c3 	.word	0x000a38c3
   a37a4:	000a38c3 	.word	0x000a38c3
   a37a8:	000a38c3 	.word	0x000a38c3
   a37ac:	000a3831 	.word	0x000a3831
   a37b0:	000a38c3 	.word	0x000a38c3
   a37b4:	000a385d 	.word	0x000a385d
   a37b8:	000a3889 	.word	0x000a3889
						{
							case CON_RX_PARAM_DATA_RINSE_STATUS:
							command = CON_TX_COMMAND_SYSDATA;
   a37bc:	2316      	movs	r3, #22
   a37be:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
							dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   a37c2:	2301      	movs	r3, #1
   a37c4:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
							Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a37c8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   a37cc:	3301      	adds	r3, #1
   a37ce:	2001      	movs	r0, #1
   a37d0:	4619      	mov	r1, r3
   a37d2:	4b6d      	ldr	r3, [pc, #436]	; (a3988 <Cl_Rinse_Controller+0x1348>)
   a37d4:	4798      	blx	r3
   a37d6:	4603      	mov	r3, r0
   a37d8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   a37dc:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   a37e0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   a37e4:	4610      	mov	r0, r2
   a37e6:	4619      	mov	r1, r3
   a37e8:	2202      	movs	r2, #2
   a37ea:	4b63      	ldr	r3, [pc, #396]	; (a3978 <Cl_Rinse_Controller+0x1338>)
   a37ec:	4798      	blx	r3
   a37ee:	4603      	mov	r3, r0
   a37f0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							break;
   a37f4:	e066      	b.n	a38c4 <Cl_Rinse_Controller+0x1284>
							case CON_RX_PARAM_DATA_PRIME_STATUS:
							command = CON_TX_COMMAND_SYSDATA;
   a37f6:	2316      	movs	r3, #22
   a37f8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
							dataarray[0] = CON_TX_PARAM_DATA_PRIME_STATUS;
   a37fc:	2302      	movs	r3, #2
   a37fe:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
							Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_PRIME_STATUS, &dataarray[1]);
   a3802:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   a3806:	3301      	adds	r3, #1
   a3808:	2002      	movs	r0, #2
   a380a:	4619      	mov	r1, r3
   a380c:	4b5e      	ldr	r3, [pc, #376]	; (a3988 <Cl_Rinse_Controller+0x1348>)
   a380e:	4798      	blx	r3
   a3810:	4603      	mov	r3, r0
   a3812:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   a3816:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   a381a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   a381e:	4610      	mov	r0, r2
   a3820:	4619      	mov	r1, r3
   a3822:	2202      	movs	r2, #2
   a3824:	4b54      	ldr	r3, [pc, #336]	; (a3978 <Cl_Rinse_Controller+0x1338>)
   a3826:	4798      	blx	r3
   a3828:	4603      	mov	r3, r0
   a382a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							break;
   a382e:	e049      	b.n	a38c4 <Cl_Rinse_Controller+0x1284>
							case CON_RX_PARAM_DATA_MIXING_STATUS:
							command = CON_TX_COMMAND_SYSDATA;
   a3830:	2316      	movs	r3, #22
   a3832:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
							dataarray[0] = CON_TX_PARAM_DATA_MIXING;
   a3836:	2320      	movs	r3, #32
   a3838:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
							//Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
							dataarray[1] = 0;
   a383c:	2300      	movs	r3, #0
   a383e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
							Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   a3842:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   a3846:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   a384a:	4610      	mov	r0, r2
   a384c:	4619      	mov	r1, r3
   a384e:	2202      	movs	r2, #2
   a3850:	4b49      	ldr	r3, [pc, #292]	; (a3978 <Cl_Rinse_Controller+0x1338>)
   a3852:	4798      	blx	r3
   a3854:	4603      	mov	r3, r0
   a3856:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							break;
   a385a:	e033      	b.n	a38c4 <Cl_Rinse_Controller+0x1284>
							case CON_RX_PARAM_DATA_RECIRC_STATUS:
							command = CON_TX_COMMAND_SYSDATA;
   a385c:	2316      	movs	r3, #22
   a385e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
							dataarray[0] = CON_TX_PARAM_DATA_RCIRC;
   a3862:	2321      	movs	r3, #33	; 0x21
   a3864:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
							//Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
							dataarray[1] = 0;
   a3868:	2300      	movs	r3, #0
   a386a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
							Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);
   a386e:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   a3872:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   a3876:	4610      	mov	r0, r2
   a3878:	4619      	mov	r1, r3
   a387a:	2202      	movs	r2, #2
   a387c:	4b3e      	ldr	r3, [pc, #248]	; (a3978 <Cl_Rinse_Controller+0x1338>)
   a387e:	4798      	blx	r3
   a3880:	4603      	mov	r3, r0
   a3882:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							break;
   a3886:	e01d      	b.n	a38c4 <Cl_Rinse_Controller+0x1284>
							case CON_RX_PARAM_DATA_DISINF_STATUS:
							command = CON_TX_COMMAND_SYSDATA;
   a3888:	2316      	movs	r3, #22
   a388a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
							dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;
   a388e:	2323      	movs	r3, #35	; 0x23
   a3890:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
							Cl_rinseretcode = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DISINF_STATUS, &dataarray[1]);
   a3894:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   a3898:	3301      	adds	r3, #1
   a389a:	2028      	movs	r0, #40	; 0x28
   a389c:	4619      	mov	r1, r3
   a389e:	4b3a      	ldr	r3, [pc, #232]	; (a3988 <Cl_Rinse_Controller+0x1348>)
   a38a0:	4798      	blx	r3
   a38a2:	4603      	mov	r3, r0
   a38a4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							Cl_rinseretcode = Cl_SendDatatoconsole(command,&dataarray,2);	
   a38a8:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
   a38ac:	f107 033c 	add.w	r3, r7, #60	; 0x3c
   a38b0:	4610      	mov	r0, r2
   a38b2:	4619      	mov	r1, r3
   a38b4:	2202      	movs	r2, #2
   a38b6:	4b30      	ldr	r3, [pc, #192]	; (a3978 <Cl_Rinse_Controller+0x1338>)
   a38b8:	4798      	blx	r3
   a38ba:	4603      	mov	r3, r0
   a38bc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							break;
   a38c0:	e000      	b.n	a38c4 <Cl_Rinse_Controller+0x1284>
							
							default:
							break;
   a38c2:	bf00      	nop
						}
					}
					break;
   a38c4:	e051      	b.n	a396a <Cl_Rinse_Controller+0x132a>
					case EVT_RINSE_START_PRIME:
						
					if(cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIMING)
   a38c6:	4b31      	ldr	r3, [pc, #196]	; (a398c <Cl_Rinse_Controller+0x134c>)
   a38c8:	781b      	ldrb	r3, [r3, #0]
   a38ca:	2b01      	cmp	r3, #1
   a38cc:	d00e      	beq.n	a38ec <Cl_Rinse_Controller+0x12ac>
					{
						Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PRIME1",6);
   a38ce:	2018      	movs	r0, #24
   a38d0:	492f      	ldr	r1, [pc, #188]	; (a3990 <Cl_Rinse_Controller+0x1350>)
   a38d2:	2206      	movs	r2, #6
   a38d4:	4b28      	ldr	r3, [pc, #160]	; (a3978 <Cl_Rinse_Controller+0x1338>)
   a38d6:	4798      	blx	r3
						cl_dprep_activate_prime_related_alarms();
   a38d8:	4b2e      	ldr	r3, [pc, #184]	; (a3994 <Cl_Rinse_Controller+0x1354>)
   a38da:	4798      	blx	r3
						Cl_RinseAlarmTable[CL_RINSE_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   a38dc:	4b2e      	ldr	r3, [pc, #184]	; (a3998 <Cl_Rinse_Controller+0x1358>)
   a38de:	2200      	movs	r2, #0
   a38e0:	70da      	strb	r2, [r3, #3]
						cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_START,0);
   a38e2:	2001      	movs	r0, #1
   a38e4:	2100      	movs	r1, #0
   a38e6:	4b2d      	ldr	r3, [pc, #180]	; (a399c <Cl_Rinse_Controller+0x135c>)
   a38e8:	4798      	blx	r3
					}
						
					break;
   a38ea:	e03e      	b.n	a396a <Cl_Rinse_Controller+0x132a>
   a38ec:	e03d      	b.n	a396a <Cl_Rinse_Controller+0x132a>
					case EVT_RINSE_STOP_PRIME:
					cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_STOP,0);
   a38ee:	2002      	movs	r0, #2
   a38f0:	2100      	movs	r1, #0
   a38f2:	4b2a      	ldr	r3, [pc, #168]	; (a399c <Cl_Rinse_Controller+0x135c>)
   a38f4:	4798      	blx	r3
					break;
   a38f6:	e038      	b.n	a396a <Cl_Rinse_Controller+0x132a>
					case EVT_RINSE_RCIRC_START:
					if(cl_dprep_prime_state != CL_DPREP_PRIME_STATE_PRIMING)
   a38f8:	4b24      	ldr	r3, [pc, #144]	; (a398c <Cl_Rinse_Controller+0x134c>)
   a38fa:	781b      	ldrb	r3, [r3, #0]
   a38fc:	2b01      	cmp	r3, #1
   a38fe:	d00c      	beq.n	a391a <Cl_Rinse_Controller+0x12da>
					{
						Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC",6);
   a3900:	2018      	movs	r0, #24
   a3902:	4927      	ldr	r1, [pc, #156]	; (a39a0 <Cl_Rinse_Controller+0x1360>)
   a3904:	2206      	movs	r2, #6
   a3906:	4b1c      	ldr	r3, [pc, #112]	; (a3978 <Cl_Rinse_Controller+0x1338>)
   a3908:	4798      	blx	r3
						cl_dprep_primecontroller(CL_DPREP_PRIME_RCIRC_START,0);
   a390a:	2005      	movs	r0, #5
   a390c:	2100      	movs	r1, #0
   a390e:	4b23      	ldr	r3, [pc, #140]	; (a399c <Cl_Rinse_Controller+0x135c>)
   a3910:	4798      	blx	r3
						Cl_RinseAlarmTable[CL_RINSE_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   a3912:	4b21      	ldr	r3, [pc, #132]	; (a3998 <Cl_Rinse_Controller+0x1358>)
   a3914:	2200      	movs	r2, #0
   a3916:	70da      	strb	r2, [r3, #3]
					}
						
					break;
   a3918:	e027      	b.n	a396a <Cl_Rinse_Controller+0x132a>
   a391a:	e026      	b.n	a396a <Cl_Rinse_Controller+0x132a>
					case EVT_RINSE_RCIRC_STOP:

						Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"RCIRC_STOP",6);
   a391c:	2018      	movs	r0, #24
   a391e:	4921      	ldr	r1, [pc, #132]	; (a39a4 <Cl_Rinse_Controller+0x1364>)
   a3920:	2206      	movs	r2, #6
   a3922:	4b15      	ldr	r3, [pc, #84]	; (a3978 <Cl_Rinse_Controller+0x1338>)
   a3924:	4798      	blx	r3
						cl_dprep_primecontroller(CL_DPREP_PRIME_RCIRC_STOP,0);
   a3926:	2006      	movs	r0, #6
   a3928:	2100      	movs	r1, #0
   a392a:	4b1c      	ldr	r3, [pc, #112]	; (a399c <Cl_Rinse_Controller+0x135c>)
   a392c:	4798      	blx	r3

						
					break;
   a392e:	e01c      	b.n	a396a <Cl_Rinse_Controller+0x132a>
					case EVENT_MAC_RINSE_COMPLETED:
					return(CL_OK);
   a3930:	2300      	movs	r3, #0
   a3932:	e0c4      	b.n	a3abe <Cl_Rinse_Controller+0x147e>
					break;
					case EVENT_RINSE_SET_BLDPUMPRATE:
					if(Cl_ConsoleRxMsg.msgready == true)
   a3934:	4b0d      	ldr	r3, [pc, #52]	; (a396c <Cl_Rinse_Controller+0x132c>)
   a3936:	7e1b      	ldrb	r3, [r3, #24]
   a3938:	2b00      	cmp	r3, #0
   a393a:	d013      	beq.n	a3964 <Cl_Rinse_Controller+0x1324>
					{
						
						cl_Datastreamtype cl_temp  ;
						cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   a393c:	4b0b      	ldr	r3, [pc, #44]	; (a396c <Cl_Rinse_Controller+0x132c>)
   a393e:	791b      	ldrb	r3, [r3, #4]
   a3940:	733b      	strb	r3, [r7, #12]
						cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[0];
   a3942:	4b0a      	ldr	r3, [pc, #40]	; (a396c <Cl_Rinse_Controller+0x132c>)
   a3944:	791b      	ldrb	r3, [r3, #4]
   a3946:	737b      	strb	r3, [r7, #13]
						cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[0];
   a3948:	4b08      	ldr	r3, [pc, #32]	; (a396c <Cl_Rinse_Controller+0x132c>)
   a394a:	791b      	ldrb	r3, [r3, #4]
   a394c:	73bb      	strb	r3, [r7, #14]
						cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[0];
   a394e:	4b07      	ldr	r3, [pc, #28]	; (a396c <Cl_Rinse_Controller+0x132c>)
   a3950:	791b      	ldrb	r3, [r3, #4]
   a3952:	73fb      	strb	r3, [r7, #15]
						cl_dprep_primecontroller(CL_DPREP_PRIME_BLOODPUMP_SETRATE,cl_temp.Twobyte);
   a3954:	89bb      	ldrh	r3, [r7, #12]
   a3956:	b29b      	uxth	r3, r3
   a3958:	b21b      	sxth	r3, r3
   a395a:	200e      	movs	r0, #14
   a395c:	4619      	mov	r1, r3
   a395e:	4b0f      	ldr	r3, [pc, #60]	; (a399c <Cl_Rinse_Controller+0x135c>)
   a3960:	4798      	blx	r3
					}
					break;
   a3962:	e002      	b.n	a396a <Cl_Rinse_Controller+0x132a>
   a3964:	e001      	b.n	a396a <Cl_Rinse_Controller+0x132a>
					default: 
					
					return(CL_REJECTED);
   a3966:	2303      	movs	r3, #3
   a3968:	e0a9      	b.n	a3abe <Cl_Rinse_Controller+0x147e>
					break;
				}
					
		break;
   a396a:	e0a6      	b.n	a3aba <Cl_Rinse_Controller+0x147a>
   a396c:	200723f0 	.word	0x200723f0
   a3970:	20071cc1 	.word	0x20071cc1
   a3974:	000a48c1 	.word	0x000a48c1
   a3978:	0009ba51 	.word	0x0009ba51
   a397c:	000a3e4d 	.word	0x000a3e4d
   a3980:	20071c9e 	.word	0x20071c9e
   a3984:	20071c9f 	.word	0x20071c9f
   a3988:	0009a545 	.word	0x0009a545
   a398c:	20071994 	.word	0x20071994
   a3990:	000a8da4 	.word	0x000a8da4
   a3994:	00088fa9 	.word	0x00088fa9
   a3998:	20070ccc 	.word	0x20070ccc
   a399c:	0008850d 	.word	0x0008850d
   a39a0:	000a8d80 	.word	0x000a8d80
   a39a4:	000a8d88 	.word	0x000a8d88

	
	default:
			switch(cl_rinseevent)
   a39a8:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
   a39ac:	3b02      	subs	r3, #2
   a39ae:	2b17      	cmp	r3, #23
   a39b0:	d87e      	bhi.n	a3ab0 <Cl_Rinse_Controller+0x1470>
   a39b2:	a201      	add	r2, pc, #4	; (adr r2, a39b8 <Cl_Rinse_Controller+0x1378>)
   a39b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a39b8:	000a3ab1 	.word	0x000a3ab1
   a39bc:	000a3ab1 	.word	0x000a3ab1
   a39c0:	000a3ab1 	.word	0x000a3ab1
   a39c4:	000a3ab1 	.word	0x000a3ab1
   a39c8:	000a3a19 	.word	0x000a3a19
   a39cc:	000a3ab1 	.word	0x000a3ab1
   a39d0:	000a3ab1 	.word	0x000a3ab1
   a39d4:	000a3ab1 	.word	0x000a3ab1
   a39d8:	000a3ab1 	.word	0x000a3ab1
   a39dc:	000a3ab1 	.word	0x000a3ab1
   a39e0:	000a3ab1 	.word	0x000a3ab1
   a39e4:	000a3ab1 	.word	0x000a3ab1
   a39e8:	000a3a9f 	.word	0x000a3a9f
   a39ec:	000a3ab1 	.word	0x000a3ab1
   a39f0:	000a3ab1 	.word	0x000a3ab1
   a39f4:	000a3ab1 	.word	0x000a3ab1
   a39f8:	000a3ab1 	.word	0x000a3ab1
   a39fc:	000a3ab1 	.word	0x000a3ab1
   a3a00:	000a3ab1 	.word	0x000a3ab1
   a3a04:	000a3ab1 	.word	0x000a3ab1
   a3a08:	000a3a1f 	.word	0x000a3a1f
   a3a0c:	000a3ab1 	.word	0x000a3ab1
   a3a10:	000a3ab1 	.word	0x000a3ab1
   a3a14:	000a3a2b 	.word	0x000a3a2b
			{
				case EVENT_START_RINSE:
				break;
				case EVENT_STOP_RINSE:
				Cl_Rinse_StopRinse();
   a3a18:	4b2b      	ldr	r3, [pc, #172]	; (a3ac8 <Cl_Rinse_Controller+0x1488>)
   a3a1a:	4798      	blx	r3
				break;
   a3a1c:	e049      	b.n	a3ab2 <Cl_Rinse_Controller+0x1472>
				//printf("RTO\n");
				break;
				case EVENT_RINSE_ALARM:
				// update console 
				
					Cl_rinseretcode = Cl_Rinse_ProcessAlarms();
   a3a1e:	4b2b      	ldr	r3, [pc, #172]	; (a3acc <Cl_Rinse_Controller+0x148c>)
   a3a20:	4798      	blx	r3
   a3a22:	4603      	mov	r3, r0
   a3a24:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				
				break;
   a3a28:	e043      	b.n	a3ab2 <Cl_Rinse_Controller+0x1472>
				case EVENT_MAC_RINSE_COMPLETED:
				if(cl_rinsestate != CL_RINSE_STATE_POST_RINSE_STANDBY)
   a3a2a:	4b29      	ldr	r3, [pc, #164]	; (a3ad0 <Cl_Rinse_Controller+0x1490>)
   a3a2c:	781b      	ldrb	r3, [r3, #0]
   a3a2e:	2b09      	cmp	r3, #9
   a3a30:	d034      	beq.n	a3a9c <Cl_Rinse_Controller+0x145c>
				{
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_NO_FLOW,false );					
   a3a32:	200c      	movs	r0, #12
   a3a34:	2100      	movs	r1, #0
   a3a36:	4b27      	ldr	r3, [pc, #156]	; (a3ad4 <Cl_Rinse_Controller+0x1494>)
   a3a38:	4798      	blx	r3
   a3a3a:	4603      	mov	r3, r0
   a3a3c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,false );
   a3a40:	200d      	movs	r0, #13
   a3a42:	2100      	movs	r1, #0
   a3a44:	4b23      	ldr	r3, [pc, #140]	; (a3ad4 <Cl_Rinse_Controller+0x1494>)
   a3a46:	4798      	blx	r3
   a3a48:	4603      	mov	r3, r0
   a3a4a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_HIGH_FLOWRATE,false );
   a3a4e:	200e      	movs	r0, #14
   a3a50:	2100      	movs	r1, #0
   a3a52:	4b20      	ldr	r3, [pc, #128]	; (a3ad4 <Cl_Rinse_Controller+0x1494>)
   a3a54:	4798      	blx	r3
   a3a56:	4603      	mov	r3, r0
   a3a58:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(ACID_IN_OPEN,false );
   a3a5c:	2029      	movs	r0, #41	; 0x29
   a3a5e:	2100      	movs	r1, #0
   a3a60:	4b1c      	ldr	r3, [pc, #112]	; (a3ad4 <Cl_Rinse_Controller+0x1494>)
   a3a62:	4798      	blx	r3
   a3a64:	4603      	mov	r3, r0
   a3a66:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(BICARB_IN_OPEN,false );
   a3a6a:	202b      	movs	r0, #43	; 0x2b
   a3a6c:	2100      	movs	r1, #0
   a3a6e:	4b19      	ldr	r3, [pc, #100]	; (a3ad4 <Cl_Rinse_Controller+0x1494>)
   a3a70:	4798      	blx	r3
   a3a72:	4603      	mov	r3, r0
   a3a74:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_OPEN,false );
   a3a78:	2003      	movs	r0, #3
   a3a7a:	2100      	movs	r1, #0
   a3a7c:	4b15      	ldr	r3, [pc, #84]	; (a3ad4 <Cl_Rinse_Controller+0x1494>)
   a3a7e:	4798      	blx	r3
   a3a80:	4603      	mov	r3, r0
   a3a82:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
								Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_OPEN,false );
   a3a86:	2004      	movs	r0, #4
   a3a88:	2100      	movs	r1, #0
   a3a8a:	4b12      	ldr	r3, [pc, #72]	; (a3ad4 <Cl_Rinse_Controller+0x1494>)
   a3a8c:	4798      	blx	r3
   a3a8e:	4603      	mov	r3, r0
   a3a90:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					cl_rinsestate = CL_RINSE_STATE_POST_RINSE_STANDBY;
   a3a94:	4b0e      	ldr	r3, [pc, #56]	; (a3ad0 <Cl_Rinse_Controller+0x1490>)
   a3a96:	2209      	movs	r2, #9
   a3a98:	701a      	strb	r2, [r3, #0]
				}
				break;
   a3a9a:	e00a      	b.n	a3ab2 <Cl_Rinse_Controller+0x1472>
   a3a9c:	e009      	b.n	a3ab2 <Cl_Rinse_Controller+0x1472>
				case EVENT_RINSE_DIALYSIS_PREP:
				if (cl_rinsestate != CL_RINSE_STATE_POST_RINSE_STANDBY )
   a3a9e:	4b0c      	ldr	r3, [pc, #48]	; (a3ad0 <Cl_Rinse_Controller+0x1490>)
   a3aa0:	781b      	ldrb	r3, [r3, #0]
   a3aa2:	2b09      	cmp	r3, #9
   a3aa4:	d003      	beq.n	a3aae <Cl_Rinse_Controller+0x146e>
				{
					Cl_rinseretcode = CL_ERROR;
   a3aa6:	2304      	movs	r3, #4
   a3aa8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				}
				break;
   a3aac:	e001      	b.n	a3ab2 <Cl_Rinse_Controller+0x1472>
   a3aae:	e000      	b.n	a3ab2 <Cl_Rinse_Controller+0x1472>
				default:
				break;
   a3ab0:	bf00      	nop
			}
	break;
   a3ab2:	e002      	b.n	a3aba <Cl_Rinse_Controller+0x147a>

switch(cl_rinsestate)
{

		case CL_RINSE_STATE_INIT:
		break;
   a3ab4:	bf00      	nop
   a3ab6:	e000      	b.n	a3aba <Cl_Rinse_Controller+0x147a>
						case EVENT_RINSE_BC_OPENFILL_COMPLETED:
						//sv_prop_stopopenfill();
						cl_rinsing_substate = CL_RINSE_RINSING_BC_SWITCHING;
						break;
				}
		break;
   a3ab8:	bf00      	nop
			}
	break;
}


return Cl_rinseretcode;
   a3aba:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
   a3abe:	4618      	mov	r0, r3
   a3ac0:	3748      	adds	r7, #72	; 0x48
   a3ac2:	46bd      	mov	sp, r7
   a3ac4:	bd80      	pop	{r7, pc}
   a3ac6:	bf00      	nop
   a3ac8:	000a4d61 	.word	0x000a4d61
   a3acc:	000a40f1 	.word	0x000a40f1
   a3ad0:	20071c9e 	.word	0x20071c9e
   a3ad4:	00082e61 	.word	0x00082e61

000a3ad8 <cl_rinse_translatemacevent>:

Cl_ReturnCodeType  cl_rinse_translatemacevent(Cl_Mac_EventsType Cl_MacRinseEvt,Cl_Rinse_Eevents* cl_rinse_event)
{
   a3ad8:	b480      	push	{r7}
   a3ada:	b083      	sub	sp, #12
   a3adc:	af00      	add	r7, sp, #0
   a3ade:	4603      	mov	r3, r0
   a3ae0:	6039      	str	r1, [r7, #0]
   a3ae2:	71fb      	strb	r3, [r7, #7]
	switch(Cl_MacRinseEvt)
   a3ae4:	79fb      	ldrb	r3, [r7, #7]
   a3ae6:	3b07      	subs	r3, #7
   a3ae8:	2b55      	cmp	r3, #85	; 0x55
   a3aea:	f200 8127 	bhi.w	a3d3c <cl_rinse_translatemacevent+0x264>
   a3aee:	a201      	add	r2, pc, #4	; (adr r2, a3af4 <cl_rinse_translatemacevent+0x1c>)
   a3af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a3af4:	000a3c6d 	.word	0x000a3c6d
   a3af8:	000a3c85 	.word	0x000a3c85
   a3afc:	000a3c9d 	.word	0x000a3c9d
   a3b00:	000a3d15 	.word	0x000a3d15
   a3b04:	000a3d1d 	.word	0x000a3d1d
   a3b08:	000a3d25 	.word	0x000a3d25
   a3b0c:	000a3ce5 	.word	0x000a3ce5
   a3b10:	000a3ced 	.word	0x000a3ced
   a3b14:	000a3cf5 	.word	0x000a3cf5
   a3b18:	000a3cfd 	.word	0x000a3cfd
   a3b1c:	000a3d3d 	.word	0x000a3d3d
   a3b20:	000a3d3d 	.word	0x000a3d3d
   a3b24:	000a3d3d 	.word	0x000a3d3d
   a3b28:	000a3d3d 	.word	0x000a3d3d
   a3b2c:	000a3d3d 	.word	0x000a3d3d
   a3b30:	000a3d3d 	.word	0x000a3d3d
   a3b34:	000a3d3d 	.word	0x000a3d3d
   a3b38:	000a3d3d 	.word	0x000a3d3d
   a3b3c:	000a3d3d 	.word	0x000a3d3d
   a3b40:	000a3d3d 	.word	0x000a3d3d
   a3b44:	000a3d3d 	.word	0x000a3d3d
   a3b48:	000a3d3d 	.word	0x000a3d3d
   a3b4c:	000a3d3d 	.word	0x000a3d3d
   a3b50:	000a3d3d 	.word	0x000a3d3d
   a3b54:	000a3d05 	.word	0x000a3d05
   a3b58:	000a3d0d 	.word	0x000a3d0d
   a3b5c:	000a3d3d 	.word	0x000a3d3d
   a3b60:	000a3d3d 	.word	0x000a3d3d
   a3b64:	000a3d3d 	.word	0x000a3d3d
   a3b68:	000a3d3d 	.word	0x000a3d3d
   a3b6c:	000a3d3d 	.word	0x000a3d3d
   a3b70:	000a3c5d 	.word	0x000a3c5d
   a3b74:	000a3c4d 	.word	0x000a3c4d
   a3b78:	000a3c55 	.word	0x000a3c55
   a3b7c:	000a3c65 	.word	0x000a3c65
   a3b80:	000a3d3d 	.word	0x000a3d3d
   a3b84:	000a3d3d 	.word	0x000a3d3d
   a3b88:	000a3d3d 	.word	0x000a3d3d
   a3b8c:	000a3cdd 	.word	0x000a3cdd
   a3b90:	000a3cd5 	.word	0x000a3cd5
   a3b94:	000a3d3d 	.word	0x000a3d3d
   a3b98:	000a3d3d 	.word	0x000a3d3d
   a3b9c:	000a3d3d 	.word	0x000a3d3d
   a3ba0:	000a3d3d 	.word	0x000a3d3d
   a3ba4:	000a3d3d 	.word	0x000a3d3d
   a3ba8:	000a3d3d 	.word	0x000a3d3d
   a3bac:	000a3d3d 	.word	0x000a3d3d
   a3bb0:	000a3d3d 	.word	0x000a3d3d
   a3bb4:	000a3d3d 	.word	0x000a3d3d
   a3bb8:	000a3ca5 	.word	0x000a3ca5
   a3bbc:	000a3cad 	.word	0x000a3cad
   a3bc0:	000a3cb5 	.word	0x000a3cb5
   a3bc4:	000a3cbd 	.word	0x000a3cbd
   a3bc8:	000a3cc5 	.word	0x000a3cc5
   a3bcc:	000a3ccd 	.word	0x000a3ccd
   a3bd0:	000a3d3d 	.word	0x000a3d3d
   a3bd4:	000a3d3d 	.word	0x000a3d3d
   a3bd8:	000a3d3d 	.word	0x000a3d3d
   a3bdc:	000a3d3d 	.word	0x000a3d3d
   a3be0:	000a3d3d 	.word	0x000a3d3d
   a3be4:	000a3d3d 	.word	0x000a3d3d
   a3be8:	000a3c75 	.word	0x000a3c75
   a3bec:	000a3c7d 	.word	0x000a3c7d
   a3bf0:	000a3d3d 	.word	0x000a3d3d
   a3bf4:	000a3d3d 	.word	0x000a3d3d
   a3bf8:	000a3c8d 	.word	0x000a3c8d
   a3bfc:	000a3d3d 	.word	0x000a3d3d
   a3c00:	000a3d3d 	.word	0x000a3d3d
   a3c04:	000a3d3d 	.word	0x000a3d3d
   a3c08:	000a3d3d 	.word	0x000a3d3d
   a3c0c:	000a3d3d 	.word	0x000a3d3d
   a3c10:	000a3d3d 	.word	0x000a3d3d
   a3c14:	000a3d3d 	.word	0x000a3d3d
   a3c18:	000a3d3d 	.word	0x000a3d3d
   a3c1c:	000a3c95 	.word	0x000a3c95
   a3c20:	000a3d3d 	.word	0x000a3d3d
   a3c24:	000a3d3d 	.word	0x000a3d3d
   a3c28:	000a3d3d 	.word	0x000a3d3d
   a3c2c:	000a3d3d 	.word	0x000a3d3d
   a3c30:	000a3d3d 	.word	0x000a3d3d
   a3c34:	000a3d3d 	.word	0x000a3d3d
   a3c38:	000a3d3d 	.word	0x000a3d3d
   a3c3c:	000a3d3d 	.word	0x000a3d3d
   a3c40:	000a3d3d 	.word	0x000a3d3d
   a3c44:	000a3d2d 	.word	0x000a3d2d
   a3c48:	000a3d35 	.word	0x000a3d35
	{
		case EVT_CONSOLE_COMMAND_HEPARIN_START:
		*cl_rinse_event= EVENT_RINSE_HEP_PMP_START;
   a3c4c:	683b      	ldr	r3, [r7, #0]
   a3c4e:	2224      	movs	r2, #36	; 0x24
   a3c50:	701a      	strb	r2, [r3, #0]
		break;
   a3c52:	e074      	b.n	a3d3e <cl_rinse_translatemacevent+0x266>
		case EVT_CONSOLE_COMMAND_HEPARIN_STOP:
		*cl_rinse_event= EVENT_RINSE_HEP_PMP_STOP;
   a3c54:	683b      	ldr	r3, [r7, #0]
   a3c56:	2225      	movs	r2, #37	; 0x25
   a3c58:	701a      	strb	r2, [r3, #0]
		break;
   a3c5a:	e070      	b.n	a3d3e <cl_rinse_translatemacevent+0x266>
		case EVT_CONSOLE_COMMAND_HEPARIN_BOLUS:
		*cl_rinse_event= EVENT_RINSE_HEP_PMP_BLOUS;
   a3c5c:	683b      	ldr	r3, [r7, #0]
   a3c5e:	2226      	movs	r2, #38	; 0x26
   a3c60:	701a      	strb	r2, [r3, #0]
		break;
   a3c62:	e06c      	b.n	a3d3e <cl_rinse_translatemacevent+0x266>
		

		case EVT_CONSOLE_COMMAND_CLR_ALARM:
		*cl_rinse_event= EVENT_RINSE_CLR_ALARM;
   a3c64:	683b      	ldr	r3, [r7, #0]
   a3c66:	2201      	movs	r2, #1
   a3c68:	701a      	strb	r2, [r3, #0]
		break;
   a3c6a:	e068      	b.n	a3d3e <cl_rinse_translatemacevent+0x266>
		case  EVT_CONSOLE_COMMAND_RINSE_START:
		*cl_rinse_event= EVENT_START_RINSE;
   a3c6c:	683b      	ldr	r3, [r7, #0]
   a3c6e:	2202      	movs	r2, #2
   a3c70:	701a      	strb	r2, [r3, #0]
		break;
   a3c72:	e064      	b.n	a3d3e <cl_rinse_translatemacevent+0x266>
		case  MACREQ_START_PRE_DISINF_RINSE:
		*cl_rinse_event= EVENT_START_PRE_DISINF_RINSE;
   a3c74:	683b      	ldr	r3, [r7, #0]
   a3c76:	2204      	movs	r2, #4
   a3c78:	701a      	strb	r2, [r3, #0]
		break;
   a3c7a:	e060      	b.n	a3d3e <cl_rinse_translatemacevent+0x266>
		case  MACREQ_START_POST_DISINF_RINSE:
		*cl_rinse_event= EVENT_START_POST_DISINF_RINSE;
   a3c7c:	683b      	ldr	r3, [r7, #0]
   a3c7e:	2205      	movs	r2, #5
   a3c80:	701a      	strb	r2, [r3, #0]
		break;
   a3c82:	e05c      	b.n	a3d3e <cl_rinse_translatemacevent+0x266>
		case EVT_CONSOLE_COMMAND_STOP_RINSE:
		*cl_rinse_event= EVENT_STOP_RINSE;
   a3c84:	683b      	ldr	r3, [r7, #0]
   a3c86:	2206      	movs	r2, #6
   a3c88:	701a      	strb	r2, [r3, #0]
		break;
   a3c8a:	e058      	b.n	a3d3e <cl_rinse_translatemacevent+0x266>
	
		case MACREQ_RINSE_COMPLETED:
		*cl_rinse_event = EVENT_MAC_RINSE_COMPLETED;
   a3c8c:	683b      	ldr	r3, [r7, #0]
   a3c8e:	2219      	movs	r2, #25
   a3c90:	701a      	strb	r2, [r3, #0]
		break;
   a3c92:	e054      	b.n	a3d3e <cl_rinse_translatemacevent+0x266>
		case MACREQ_BC_OPENFILL_COMPLETED:
		*cl_rinse_event = EVENT_RINSE_BC_OPENFILL_COMPLETED;
   a3c94:	683b      	ldr	r3, [r7, #0]
   a3c96:	2227      	movs	r2, #39	; 0x27
   a3c98:	701a      	strb	r2, [r3, #0]
		break;
   a3c9a:	e050      	b.n	a3d3e <cl_rinse_translatemacevent+0x266>
		case EVT_CONSOLE_COMMAND_DIALYSIS_PREP:
		*cl_rinse_event = EVENT_RINSE_DIALYSIS_PREP;
   a3c9c:	683b      	ldr	r3, [r7, #0]
   a3c9e:	220e      	movs	r2, #14
   a3ca0:	701a      	strb	r2, [r3, #0]
		break; 
   a3ca2:	e04c      	b.n	a3d3e <cl_rinse_translatemacevent+0x266>
		
		case EVT_TICK_50M:
		*cl_rinse_event =   EVENT_RINSE_TICK_50MS;
   a3ca4:	683b      	ldr	r3, [r7, #0]
   a3ca6:	220f      	movs	r2, #15
   a3ca8:	701a      	strb	r2, [r3, #0]
		break;
   a3caa:	e048      	b.n	a3d3e <cl_rinse_translatemacevent+0x266>
 		break;
		case EVT_TICK_100M:
		*cl_rinse_event =   EVENT_RINSE_TICK_100MS;
   a3cac:	683b      	ldr	r3, [r7, #0]
   a3cae:	2210      	movs	r2, #16
   a3cb0:	701a      	strb	r2, [r3, #0]
		break;
   a3cb2:	e044      	b.n	a3d3e <cl_rinse_translatemacevent+0x266>
		case EVT_TICK_500M:
		  		*cl_rinse_event =   EVENT_RINSE_TICK_500MS;
   a3cb4:	683b      	ldr	r3, [r7, #0]
   a3cb6:	2211      	movs	r2, #17
   a3cb8:	701a      	strb	r2, [r3, #0]
		break;
   a3cba:	e040      	b.n	a3d3e <cl_rinse_translatemacevent+0x266>
		case EVT_TICK_SEC:
		*cl_rinse_event =   EVENT_RINSE_TICK_SECOND;
   a3cbc:	683b      	ldr	r3, [r7, #0]
   a3cbe:	2212      	movs	r2, #18
   a3cc0:	701a      	strb	r2, [r3, #0]
		break;
   a3cc2:	e03c      	b.n	a3d3e <cl_rinse_translatemacevent+0x266>
		case EVT_TICK_MIN:
		*cl_rinse_event =   EVENT_RINSE_TICK_MINUTE;
   a3cc4:	683b      	ldr	r3, [r7, #0]
   a3cc6:	2213      	movs	r2, #19
   a3cc8:	701a      	strb	r2, [r3, #0]
		break;			 
   a3cca:	e038      	b.n	a3d3e <cl_rinse_translatemacevent+0x266>
		case EVT_TICK_HOUR:
		*cl_rinse_event =   EVENT_RINSE_TICK_HOUR;
   a3ccc:	683b      	ldr	r3, [r7, #0]
   a3cce:	2214      	movs	r2, #20
   a3cd0:	701a      	strb	r2, [r3, #0]
		break;
   a3cd2:	e034      	b.n	a3d3e <cl_rinse_translatemacevent+0x266>
		case EVT_ALARM_TRIGGERED:
		*cl_rinse_event =  EVENT_RINSE_ALARM;
   a3cd4:	683b      	ldr	r3, [r7, #0]
   a3cd6:	2216      	movs	r2, #22
   a3cd8:	701a      	strb	r2, [r3, #0]
		break;
   a3cda:	e030      	b.n	a3d3e <cl_rinse_translatemacevent+0x266>
		case  EVT_ALERT_TRIGGERED:
		*cl_rinse_event =  EVENT_RINSE_ALERT;
   a3cdc:	683b      	ldr	r3, [r7, #0]
   a3cde:	2215      	movs	r2, #21
   a3ce0:	701a      	strb	r2, [r3, #0]
		break;
   a3ce2:	e02c      	b.n	a3d3e <cl_rinse_translatemacevent+0x266>
		
		case EVT_CONSOLE_COMMAND_SET_DATA:
		*cl_rinse_event = EVT_RINSE_SET_DATA;
   a3ce4:	683b      	ldr	r3, [r7, #0]
   a3ce6:	2218      	movs	r2, #24
   a3ce8:	701a      	strb	r2, [r3, #0]
		break;
   a3cea:	e028      	b.n	a3d3e <cl_rinse_translatemacevent+0x266>
		
		case EVT_CONSOLE_COMMAND_GET_DATA:
		*cl_rinse_event =  EVT_RINSE_GET_DATA;
   a3cec:	683b      	ldr	r3, [r7, #0]
   a3cee:	2217      	movs	r2, #23
   a3cf0:	701a      	strb	r2, [r3, #0]
		break;
   a3cf2:	e024      	b.n	a3d3e <cl_rinse_translatemacevent+0x266>
		case EVT_CONSOLE_COMMAND_START_PRIME:
		*cl_rinse_event =  EVT_RINSE_START_PRIME;
   a3cf4:	683b      	ldr	r3, [r7, #0]
   a3cf6:	221a      	movs	r2, #26
   a3cf8:	701a      	strb	r2, [r3, #0]
		break;
   a3cfa:	e020      	b.n	a3d3e <cl_rinse_translatemacevent+0x266>
		case EVT_CONSOLE_COMMAND_STOP_PRIME:
		*cl_rinse_event =  EVT_RINSE_STOP_PRIME;
   a3cfc:	683b      	ldr	r3, [r7, #0]
   a3cfe:	221b      	movs	r2, #27
   a3d00:	701a      	strb	r2, [r3, #0]
		break;
   a3d02:	e01c      	b.n	a3d3e <cl_rinse_translatemacevent+0x266>
		case EVT_CONSOLE_COMMAND_RCIRC_START:
		*cl_rinse_event = EVT_RINSE_RCIRC_START;
   a3d04:	683b      	ldr	r3, [r7, #0]
   a3d06:	221f      	movs	r2, #31
   a3d08:	701a      	strb	r2, [r3, #0]
		break;
   a3d0a:	e018      	b.n	a3d3e <cl_rinse_translatemacevent+0x266>
		case EVT_CONSOLE_COMMAND_RCIRC_STOP:
		*cl_rinse_event = EVT_RINSE_RCIRC_STOP;
   a3d0c:	683b      	ldr	r3, [r7, #0]
   a3d0e:	2220      	movs	r2, #32
   a3d10:	701a      	strb	r2, [r3, #0]
		break;
   a3d12:	e014      	b.n	a3d3e <cl_rinse_translatemacevent+0x266>
		case EVT_CONSOLE_COMMAND_SET_BLDPMP_ON:
		*cl_rinse_event = EVT_RINSE_COMMAND_SET_BLDPMP_ON;
   a3d14:	683b      	ldr	r3, [r7, #0]
   a3d16:	2221      	movs	r2, #33	; 0x21
   a3d18:	701a      	strb	r2, [r3, #0]
		break;
   a3d1a:	e010      	b.n	a3d3e <cl_rinse_translatemacevent+0x266>
		case EVT_CONSOLE_COMMAND_SET_BLDPMP_OFF:
		*cl_rinse_event = EVT_RINSE_COMMAND_SET_BLDPMP_OFF;
   a3d1c:	683b      	ldr	r3, [r7, #0]
   a3d1e:	2222      	movs	r2, #34	; 0x22
   a3d20:	701a      	strb	r2, [r3, #0]
		break;
   a3d22:	e00c      	b.n	a3d3e <cl_rinse_translatemacevent+0x266>
		break;
		case EVT_CONSOLE_COMMAND_SET_BLDPUMPRATE:
		*cl_rinse_event = EVT_RINSE_COMMAND_SET_BLDPUMPRATE;
   a3d24:	683b      	ldr	r3, [r7, #0]
   a3d26:	2223      	movs	r2, #35	; 0x23
   a3d28:	701a      	strb	r2, [r3, #0]
		break;
   a3d2a:	e008      	b.n	a3d3e <cl_rinse_translatemacevent+0x266>
		case EVT_CONSOLE_COMMAND_SET_BLDPUMPINC_MANUAL:
		*cl_rinse_event = EVT_CONSOLE_COMMAND_SET_BLDPUMPINC_MANUAL;
   a3d2c:	683b      	ldr	r3, [r7, #0]
   a3d2e:	225b      	movs	r2, #91	; 0x5b
   a3d30:	701a      	strb	r2, [r3, #0]
		break;
   a3d32:	e004      	b.n	a3d3e <cl_rinse_translatemacevent+0x266>
		case EVT_CONSOLE_COMMAND_SET_BLDPUMPDEC_MANUAL:
		*cl_rinse_event = EVT_CONSOLE_COMMAND_SET_BLDPUMPDEC_MANUAL;
   a3d34:	683b      	ldr	r3, [r7, #0]
   a3d36:	225c      	movs	r2, #92	; 0x5c
   a3d38:	701a      	strb	r2, [r3, #0]
		break;
   a3d3a:	e000      	b.n	a3d3e <cl_rinse_translatemacevent+0x266>
		default:
		break;
   a3d3c:	bf00      	nop
	}
		 return CL_OK;
   a3d3e:	2300      	movs	r3, #0
}
   a3d40:	4618      	mov	r0, r3
   a3d42:	370c      	adds	r7, #12
   a3d44:	46bd      	mov	sp, r7
   a3d46:	f85d 7b04 	ldr.w	r7, [sp], #4
   a3d4a:	4770      	bx	lr

000a3d4c <Cl_rinse_init>:
 Cl_ReturnCodeType Cl_rinse_init(void)
 {
   a3d4c:	b480      	push	{r7}
   a3d4e:	af00      	add	r7, sp, #0
		tempcount = 0;
   a3d50:	4b26      	ldr	r3, [pc, #152]	; (a3dec <Cl_rinse_init+0xa0>)
   a3d52:	2200      	movs	r2, #0
   a3d54:	801a      	strh	r2, [r3, #0]
	   blood_flag=0;
   a3d56:	4b26      	ldr	r3, [pc, #152]	; (a3df0 <Cl_rinse_init+0xa4>)
   a3d58:	2200      	movs	r2, #0
   a3d5a:	701a      	strb	r2, [r3, #0]
	   var1=0;
   a3d5c:	4b25      	ldr	r3, [pc, #148]	; (a3df4 <Cl_rinse_init+0xa8>)
   a3d5e:	2200      	movs	r2, #0
   a3d60:	701a      	strb	r2, [r3, #0]
	   rinse1=0;
   a3d62:	4b25      	ldr	r3, [pc, #148]	; (a3df8 <Cl_rinse_init+0xac>)
   a3d64:	2200      	movs	r2, #0
   a3d66:	701a      	strb	r2, [r3, #0]
	   rinse2=0;
   a3d68:	4b24      	ldr	r3, [pc, #144]	; (a3dfc <Cl_rinse_init+0xb0>)
   a3d6a:	2200      	movs	r2, #0
   a3d6c:	701a      	strb	r2, [r3, #0]
	   rinse3=0;
   a3d6e:	4b24      	ldr	r3, [pc, #144]	; (a3e00 <Cl_rinse_init+0xb4>)
   a3d70:	2200      	movs	r2, #0
   a3d72:	701a      	strb	r2, [r3, #0]
	   rinse4=0;
   a3d74:	4b23      	ldr	r3, [pc, #140]	; (a3e04 <Cl_rinse_init+0xb8>)
   a3d76:	2200      	movs	r2, #0
   a3d78:	701a      	strb	r2, [r3, #0]
	 
	  cl_rinsestate = CL_RINSE_STATE_IDLE;
   a3d7a:	4b23      	ldr	r3, [pc, #140]	; (a3e08 <Cl_rinse_init+0xbc>)
   a3d7c:	2200      	movs	r2, #0
   a3d7e:	701a      	strb	r2, [r3, #0]
	  cl_rinsing_substate = CL_RINSE_RINSING_IDLE;
   a3d80:	4b22      	ldr	r3, [pc, #136]	; (a3e0c <Cl_rinse_init+0xc0>)
   a3d82:	2200      	movs	r2, #0
   a3d84:	701a      	strb	r2, [r3, #0]
	   Cl_Rinsesecondscounter =0 ;Cl_RinseMinutescounter=0; Cl_Rinseshourscounter=0;Cl_RinseOpenFillsecondscounter=0;
   a3d86:	4b22      	ldr	r3, [pc, #136]	; (a3e10 <Cl_rinse_init+0xc4>)
   a3d88:	2200      	movs	r2, #0
   a3d8a:	601a      	str	r2, [r3, #0]
   a3d8c:	4b21      	ldr	r3, [pc, #132]	; (a3e14 <Cl_rinse_init+0xc8>)
   a3d8e:	2200      	movs	r2, #0
   a3d90:	601a      	str	r2, [r3, #0]
   a3d92:	4b21      	ldr	r3, [pc, #132]	; (a3e18 <Cl_rinse_init+0xcc>)
   a3d94:	2200      	movs	r2, #0
   a3d96:	601a      	str	r2, [r3, #0]
   a3d98:	4b20      	ldr	r3, [pc, #128]	; (a3e1c <Cl_rinse_init+0xd0>)
   a3d9a:	2200      	movs	r2, #0
   a3d9c:	601a      	str	r2, [r3, #0]
	   Cl_RinseTotalMinutescounter=0; Cl_RinsesTotalhourscounter=0;
   a3d9e:	4b20      	ldr	r3, [pc, #128]	; (a3e20 <Cl_rinse_init+0xd4>)
   a3da0:	2200      	movs	r2, #0
   a3da2:	601a      	str	r2, [r3, #0]
   a3da4:	4b1f      	ldr	r3, [pc, #124]	; (a3e24 <Cl_rinse_init+0xd8>)
   a3da6:	2200      	movs	r2, #0
   a3da8:	601a      	str	r2, [r3, #0]
	   Cl_RinseOpenFillTimeOut = false;
   a3daa:	4b1f      	ldr	r3, [pc, #124]	; (a3e28 <Cl_rinse_init+0xdc>)
   a3dac:	2200      	movs	r2, #0
   a3dae:	701a      	strb	r2, [r3, #0]
	   cl_gfillinprogress = false;
   a3db0:	4b1e      	ldr	r3, [pc, #120]	; (a3e2c <Cl_rinse_init+0xe0>)
   a3db2:	2200      	movs	r2, #0
   a3db4:	701a      	strb	r2, [r3, #0]
	   wait_cnt = 0;TmpVal=0;
   a3db6:	4b1e      	ldr	r3, [pc, #120]	; (a3e30 <Cl_rinse_init+0xe4>)
   a3db8:	2200      	movs	r2, #0
   a3dba:	801a      	strh	r2, [r3, #0]
   a3dbc:	4b1d      	ldr	r3, [pc, #116]	; (a3e34 <Cl_rinse_init+0xe8>)
   a3dbe:	2200      	movs	r2, #0
   a3dc0:	801a      	strh	r2, [r3, #0]
	   temp1;temp2;
	    cl_50ms_timer = 0;
   a3dc2:	4b1d      	ldr	r3, [pc, #116]	; (a3e38 <Cl_rinse_init+0xec>)
   a3dc4:	2200      	movs	r2, #0
   a3dc6:	801a      	strh	r2, [r3, #0]
	   prevrinsealarm_id =_NO_ALARM;
   a3dc8:	4b1c      	ldr	r3, [pc, #112]	; (a3e3c <Cl_rinse_init+0xf0>)
   a3dca:	2200      	movs	r2, #0
   a3dcc:	701a      	strb	r2, [r3, #0]
	   rinsealarm =0;
   a3dce:	4b1c      	ldr	r3, [pc, #112]	; (a3e40 <Cl_rinse_init+0xf4>)
   a3dd0:	2200      	movs	r2, #0
   a3dd2:	701a      	strb	r2, [r3, #0]
	  
	    hotrinse_flag=0;minute=0;
   a3dd4:	4b1b      	ldr	r3, [pc, #108]	; (a3e44 <Cl_rinse_init+0xf8>)
   a3dd6:	2200      	movs	r2, #0
   a3dd8:	701a      	strb	r2, [r3, #0]
   a3dda:	4b1b      	ldr	r3, [pc, #108]	; (a3e48 <Cl_rinse_init+0xfc>)
   a3ddc:	2200      	movs	r2, #0
   a3dde:	701a      	strb	r2, [r3, #0]
	
	 return CL_OK;
   a3de0:	2300      	movs	r3, #0
 }
   a3de2:	4618      	mov	r0, r3
   a3de4:	46bd      	mov	sp, r7
   a3de6:	f85d 7b04 	ldr.w	r7, [sp], #4
   a3dea:	4770      	bx	lr
   a3dec:	2007281c 	.word	0x2007281c
   a3df0:	20071c98 	.word	0x20071c98
   a3df4:	20071c99 	.word	0x20071c99
   a3df8:	20071c9a 	.word	0x20071c9a
   a3dfc:	20071c9b 	.word	0x20071c9b
   a3e00:	20071c9c 	.word	0x20071c9c
   a3e04:	20071c9d 	.word	0x20071c9d
   a3e08:	20071c9e 	.word	0x20071c9e
   a3e0c:	20071c9f 	.word	0x20071c9f
   a3e10:	20071ca0 	.word	0x20071ca0
   a3e14:	20071ca4 	.word	0x20071ca4
   a3e18:	20071ca8 	.word	0x20071ca8
   a3e1c:	20071cac 	.word	0x20071cac
   a3e20:	20071cb0 	.word	0x20071cb0
   a3e24:	20071cb4 	.word	0x20071cb4
   a3e28:	20071cb8 	.word	0x20071cb8
   a3e2c:	20071cb9 	.word	0x20071cb9
   a3e30:	20071cba 	.word	0x20071cba
   a3e34:	20071cbc 	.word	0x20071cbc
   a3e38:	20071cbe 	.word	0x20071cbe
   a3e3c:	20071cc0 	.word	0x20071cc0
   a3e40:	2007282d 	.word	0x2007282d
   a3e44:	20071cc1 	.word	0x20071cc1
   a3e48:	20071cc2 	.word	0x20071cc2

000a3e4c <Cl_Rinse_UpdateTimeInfo>:
	 return CL_OK;
 }
 
 
 Cl_ReturnCodeType Cl_Rinse_UpdateTimeInfo(void)
 {
   a3e4c:	b580      	push	{r7, lr}
   a3e4e:	b084      	sub	sp, #16
   a3e50:	af00      	add	r7, sp, #0
	 
	 Cl_ReturnCodeType Cl_rinseretcode = CL_ERROR;
   a3e52:	2304      	movs	r3, #4
   a3e54:	73fb      	strb	r3, [r7, #15]
	 Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a3e56:	2351      	movs	r3, #81	; 0x51
   a3e58:	73bb      	strb	r3, [r7, #14]
	 Cl_Uint8Type data[7] = {0,0,0,0,0 ,0,0};
   a3e5a:	2300      	movs	r3, #0
   a3e5c:	713b      	strb	r3, [r7, #4]
   a3e5e:	2300      	movs	r3, #0
   a3e60:	717b      	strb	r3, [r7, #5]
   a3e62:	2300      	movs	r3, #0
   a3e64:	71bb      	strb	r3, [r7, #6]
   a3e66:	2300      	movs	r3, #0
   a3e68:	71fb      	strb	r3, [r7, #7]
   a3e6a:	2300      	movs	r3, #0
   a3e6c:	723b      	strb	r3, [r7, #8]
   a3e6e:	2300      	movs	r3, #0
   a3e70:	727b      	strb	r3, [r7, #9]
   a3e72:	2300      	movs	r3, #0
   a3e74:	72bb      	strb	r3, [r7, #10]
	 
	command = CON_TX_COMMAND_REM_TIME;
   a3e76:	230a      	movs	r3, #10
   a3e78:	73bb      	strb	r3, [r7, #14]

	
		data[0]= (Cl_Uint8Type)CLEAN_DATA;
   a3e7a:	2301      	movs	r3, #1
   a3e7c:	713b      	strb	r3, [r7, #4]
		data[1]= (Cl_Uint8Type)Cl_RinseTotalMinutescounter;
   a3e7e:	4b09      	ldr	r3, [pc, #36]	; (a3ea4 <Cl_Rinse_UpdateTimeInfo+0x58>)
   a3e80:	681b      	ldr	r3, [r3, #0]
   a3e82:	b2db      	uxtb	r3, r3
   a3e84:	717b      	strb	r3, [r7, #5]

		
		Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,2);
   a3e86:	7bba      	ldrb	r2, [r7, #14]
   a3e88:	1d3b      	adds	r3, r7, #4
   a3e8a:	4610      	mov	r0, r2
   a3e8c:	4619      	mov	r1, r3
   a3e8e:	2202      	movs	r2, #2
   a3e90:	4b05      	ldr	r3, [pc, #20]	; (a3ea8 <Cl_Rinse_UpdateTimeInfo+0x5c>)
   a3e92:	4798      	blx	r3
   a3e94:	4603      	mov	r3, r0
   a3e96:	73fb      	strb	r3, [r7, #15]
		
		
//	Cl_Rinse_SendRinseStateData();                                                          commented on 28.05.2014
	return CL_OK;
   a3e98:	2300      	movs	r3, #0
	
 }
   a3e9a:	4618      	mov	r0, r3
   a3e9c:	3710      	adds	r7, #16
   a3e9e:	46bd      	mov	sp, r7
   a3ea0:	bd80      	pop	{r7, pc}
   a3ea2:	bf00      	nop
   a3ea4:	20071cb0 	.word	0x20071cb0
   a3ea8:	0009ba51 	.word	0x0009ba51

000a3eac <Cl_Rinse_CheckforRinseCompletion>:
	  
  }
 
 
 Cl_ReturnCodeType Cl_Rinse_CheckforRinseCompletion(void)
 {
   a3eac:	b580      	push	{r7, lr}
   a3eae:	b082      	sub	sp, #8
   a3eb0:	af00      	add	r7, sp, #0
	 Cl_ReturnCodeType Cl_rinseretcode = CL_ERROR;
   a3eb2:	2304      	movs	r3, #4
   a3eb4:	71fb      	strb	r3, [r7, #7]
	 if(gtest_short_rinse)
   a3eb6:	4b1b      	ldr	r3, [pc, #108]	; (a3f24 <Cl_Rinse_CheckforRinseCompletion+0x78>)
   a3eb8:	781b      	ldrb	r3, [r3, #0]
   a3eba:	2b00      	cmp	r3, #0
   a3ebc:	d007      	beq.n	a3ece <Cl_Rinse_CheckforRinseCompletion+0x22>
	 {
		if(Cl_RinseTotalMinutescounter > 5 ) 
   a3ebe:	4b1a      	ldr	r3, [pc, #104]	; (a3f28 <Cl_Rinse_CheckforRinseCompletion+0x7c>)
   a3ec0:	681b      	ldr	r3, [r3, #0]
   a3ec2:	2b05      	cmp	r3, #5
   a3ec4:	dd01      	ble.n	a3eca <Cl_Rinse_CheckforRinseCompletion+0x1e>
		Cl_rinseretcode = CL_OK;
   a3ec6:	2300      	movs	r3, #0
   a3ec8:	71fb      	strb	r3, [r7, #7]
		return Cl_rinseretcode;
   a3eca:	79fb      	ldrb	r3, [r7, #7]
   a3ecc:	e025      	b.n	a3f1a <Cl_Rinse_CheckforRinseCompletion+0x6e>
	 }
	if (hotrinse_flag == 1)
   a3ece:	4b17      	ldr	r3, [pc, #92]	; (a3f2c <Cl_Rinse_CheckforRinseCompletion+0x80>)
   a3ed0:	781b      	ldrb	r3, [r3, #0]
   a3ed2:	b2db      	uxtb	r3, r3
   a3ed4:	2b01      	cmp	r3, #1
   a3ed6:	d117      	bne.n	a3f08 <Cl_Rinse_CheckforRinseCompletion+0x5c>
	{
		if (Cl_RinseTotalMinutescounter >= (CL_HOTRINSE_TIMEOUT_MIN ) )
   a3ed8:	4b13      	ldr	r3, [pc, #76]	; (a3f28 <Cl_Rinse_CheckforRinseCompletion+0x7c>)
   a3eda:	681b      	ldr	r3, [r3, #0]
   a3edc:	2b18      	cmp	r3, #24
   a3ede:	dd1b      	ble.n	a3f18 <Cl_Rinse_CheckforRinseCompletion+0x6c>
		{
			sv_cntrl_poweroffheater();
   a3ee0:	4b13      	ldr	r3, [pc, #76]	; (a3f30 <Cl_Rinse_CheckforRinseCompletion+0x84>)
   a3ee2:	4798      	blx	r3
			sv_cntrl_disable_loopback();											// added on 30.06.2017
   a3ee4:	4b13      	ldr	r3, [pc, #76]	; (a3f34 <Cl_Rinse_CheckforRinseCompletion+0x88>)
   a3ee6:	4798      	blx	r3
			
			SetHeaterState(CL_HEATER_STATE_OFF);
   a3ee8:	2004      	movs	r0, #4
   a3eea:	4b13      	ldr	r3, [pc, #76]	; (a3f38 <Cl_Rinse_CheckforRinseCompletion+0x8c>)
   a3eec:	4798      	blx	r3
			Cl_bc_controller(BC_EVENT_STOP);
   a3eee:	2005      	movs	r0, #5
   a3ef0:	4b12      	ldr	r3, [pc, #72]	; (a3f3c <Cl_Rinse_CheckforRinseCompletion+0x90>)
   a3ef2:	4798      	blx	r3
			Cl_bc_controller(BC_EVENT_START);
   a3ef4:	2004      	movs	r0, #4
   a3ef6:	4b11      	ldr	r3, [pc, #68]	; (a3f3c <Cl_Rinse_CheckforRinseCompletion+0x90>)
   a3ef8:	4798      	blx	r3
			Cl_RinseTotalMinutescounter = 0;	
   a3efa:	4b0b      	ldr	r3, [pc, #44]	; (a3f28 <Cl_Rinse_CheckforRinseCompletion+0x7c>)
   a3efc:	2200      	movs	r2, #0
   a3efe:	601a      	str	r2, [r3, #0]
			//Cl_rinseretcode = CL_OK;
			hotrinse_flag = 0;
   a3f00:	4b0a      	ldr	r3, [pc, #40]	; (a3f2c <Cl_Rinse_CheckforRinseCompletion+0x80>)
   a3f02:	2200      	movs	r2, #0
   a3f04:	701a      	strb	r2, [r3, #0]
   a3f06:	e007      	b.n	a3f18 <Cl_Rinse_CheckforRinseCompletion+0x6c>
// 			Cl_rinseretcode = CL_OK;
// 			hotrinse_flag = 0;
// 			return Cl_rinseretcode;
// 		}
	}
	else if (Cl_RinseTotalMinutescounter >= CL_RINSE_TIMEOUT_MIN)
   a3f08:	4b07      	ldr	r3, [pc, #28]	; (a3f28 <Cl_Rinse_CheckforRinseCompletion+0x7c>)
   a3f0a:	681b      	ldr	r3, [r3, #0]
   a3f0c:	2b09      	cmp	r3, #9
   a3f0e:	dd03      	ble.n	a3f18 <Cl_Rinse_CheckforRinseCompletion+0x6c>
	{
		sv_cntrl_setgreenalarm();
   a3f10:	4b0b      	ldr	r3, [pc, #44]	; (a3f40 <Cl_Rinse_CheckforRinseCompletion+0x94>)
   a3f12:	4798      	blx	r3
	//	sv_cntrl_buzzer();	
		Cl_rinseretcode = CL_OK;
   a3f14:	2300      	movs	r3, #0
   a3f16:	71fb      	strb	r3, [r7, #7]
	}

	return Cl_rinseretcode;
   a3f18:	79fb      	ldrb	r3, [r7, #7]
	 
 }
   a3f1a:	4618      	mov	r0, r3
   a3f1c:	3708      	adds	r7, #8
   a3f1e:	46bd      	mov	sp, r7
   a3f20:	bd80      	pop	{r7, pc}
   a3f22:	bf00      	nop
   a3f24:	20071a72 	.word	0x20071a72
   a3f28:	20071cb0 	.word	0x20071cb0
   a3f2c:	20071cc1 	.word	0x20071cc1
   a3f30:	00099cb9 	.word	0x00099cb9
   a3f34:	00099e5d 	.word	0x00099e5d
   a3f38:	000894d9 	.word	0x000894d9
   a3f3c:	0008330d 	.word	0x0008330d
   a3f40:	00099f4d 	.word	0x00099f4d

000a3f44 <cl_rinse_notifydacandgotorinsestandby>:
 
Cl_ReturnCodeType cl_rinse_notifydacandgotorinsestandby(void)
{
   a3f44:	b580      	push	{r7, lr}
   a3f46:	b082      	sub	sp, #8
   a3f48:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType 	Cl_rinseretcode2 = CL_OK;
   a3f4a:	2300      	movs	r3, #0
   a3f4c:	71fb      	strb	r3, [r7, #7]
	
	Cl_Uint8Type data =0;
   a3f4e:	2300      	movs	r3, #0
   a3f50:	71bb      	strb	r3, [r7, #6]
	Cl_RinseStop();
   a3f52:	4b26      	ldr	r3, [pc, #152]	; (a3fec <cl_rinse_notifydacandgotorinsestandby+0xa8>)
   a3f54:	4798      	blx	r3
	Cl_RinseFlowOff();
   a3f56:	4b26      	ldr	r3, [pc, #152]	; (a3ff0 <cl_rinse_notifydacandgotorinsestandby+0xac>)
   a3f58:	4798      	blx	r3
//	Cl_rinseretcode2 = sv_cntrl_poweroffheater();
	//inform DAC about rinse completed state.
	Cl_Rinsesecondscounter = 0;
   a3f5a:	4b26      	ldr	r3, [pc, #152]	; (a3ff4 <cl_rinse_notifydacandgotorinsestandby+0xb0>)
   a3f5c:	2200      	movs	r2, #0
   a3f5e:	601a      	str	r2, [r3, #0]
	Cl_RinseMinutescounter= 0;
   a3f60:	4b25      	ldr	r3, [pc, #148]	; (a3ff8 <cl_rinse_notifydacandgotorinsestandby+0xb4>)
   a3f62:	2200      	movs	r2, #0
   a3f64:	601a      	str	r2, [r3, #0]
	Cl_Rinseshourscounter= 0;
   a3f66:	4b25      	ldr	r3, [pc, #148]	; (a3ffc <cl_rinse_notifydacandgotorinsestandby+0xb8>)
   a3f68:	2200      	movs	r2, #0
   a3f6a:	601a      	str	r2, [r3, #0]
	Cl_RinseTotalMinutescounter= 0;
   a3f6c:	4b24      	ldr	r3, [pc, #144]	; (a4000 <cl_rinse_notifydacandgotorinsestandby+0xbc>)
   a3f6e:	2200      	movs	r2, #0
   a3f70:	601a      	str	r2, [r3, #0]
	Cl_RinsesTotalhourscounter=0;
   a3f72:	4b24      	ldr	r3, [pc, #144]	; (a4004 <cl_rinse_notifydacandgotorinsestandby+0xc0>)
   a3f74:	2200      	movs	r2, #0
   a3f76:	601a      	str	r2, [r3, #0]
	
	data = 1;
   a3f78:	2301      	movs	r3, #1
   a3f7a:	71bb      	strb	r3, [r7, #6]
	cl_wait(5);
   a3f7c:	2005      	movs	r0, #5
   a3f7e:	4b22      	ldr	r3, [pc, #136]	; (a4008 <cl_rinse_notifydacandgotorinsestandby+0xc4>)
   a3f80:	4798      	blx	r3
	if((cl_rinsestate == CL_RINSE_STATE_RINSING)  )
   a3f82:	4b22      	ldr	r3, [pc, #136]	; (a400c <cl_rinse_notifydacandgotorinsestandby+0xc8>)
   a3f84:	781b      	ldrb	r3, [r3, #0]
   a3f86:	2b03      	cmp	r3, #3
   a3f88:	d114      	bne.n	a3fb4 <cl_rinse_notifydacandgotorinsestandby+0x70>
	{
		Cl_rinseretcode2 = sv_nvmsetdata(NV_NVM_RINSE_STATUS,&data,1);
   a3f8a:	1dbb      	adds	r3, r7, #6
   a3f8c:	2001      	movs	r0, #1
   a3f8e:	4619      	mov	r1, r3
   a3f90:	2201      	movs	r2, #1
   a3f92:	4b1f      	ldr	r3, [pc, #124]	; (a4010 <cl_rinse_notifydacandgotorinsestandby+0xcc>)
   a3f94:	4798      	blx	r3
   a3f96:	4603      	mov	r3, r0
   a3f98:	71fb      	strb	r3, [r7, #7]
		Cl_rinseretcode2 = Cl_SendDatatoconsole(CON_TX_COMMAND_RINSE_COMPLETED,&data,0);
   a3f9a:	1dbb      	adds	r3, r7, #6
   a3f9c:	200b      	movs	r0, #11
   a3f9e:	4619      	mov	r1, r3
   a3fa0:	2200      	movs	r2, #0
   a3fa2:	4b1c      	ldr	r3, [pc, #112]	; (a4014 <cl_rinse_notifydacandgotorinsestandby+0xd0>)
   a3fa4:	4798      	blx	r3
   a3fa6:	4603      	mov	r3, r0
   a3fa8:	71fb      	strb	r3, [r7, #7]
		Cl_rinseretcode2 = Cl_mac_apprequesthandler(MACREQ_RINSE_COMPLETED);
   a3faa:	2048      	movs	r0, #72	; 0x48
   a3fac:	4b1a      	ldr	r3, [pc, #104]	; (a4018 <cl_rinse_notifydacandgotorinsestandby+0xd4>)
   a3fae:	4798      	blx	r3
   a3fb0:	4603      	mov	r3, r0
   a3fb2:	71fb      	strb	r3, [r7, #7]
		
	}
	if(cl_rinsestate == CL_RINSE_STATE_PRE_DISINFECT_RINSING)
   a3fb4:	4b15      	ldr	r3, [pc, #84]	; (a400c <cl_rinse_notifydacandgotorinsestandby+0xc8>)
   a3fb6:	781b      	ldrb	r3, [r3, #0]
   a3fb8:	2b04      	cmp	r3, #4
   a3fba:	d105      	bne.n	a3fc8 <cl_rinse_notifydacandgotorinsestandby+0x84>
	{
		Cl_rinseretcode2 = Cl_mac_apprequesthandler(MACREQ_PRE_DISINFECT_RINSE_COMPLETED);
   a3fbc:	2052      	movs	r0, #82	; 0x52
   a3fbe:	4b16      	ldr	r3, [pc, #88]	; (a4018 <cl_rinse_notifydacandgotorinsestandby+0xd4>)
   a3fc0:	4798      	blx	r3
   a3fc2:	4603      	mov	r3, r0
   a3fc4:	71fb      	strb	r3, [r7, #7]
   a3fc6:	e008      	b.n	a3fda <cl_rinse_notifydacandgotorinsestandby+0x96>
	}
	else if(cl_rinsestate == CL_RINSE_STATE_POST_DISINFECT_RINSING)
   a3fc8:	4b10      	ldr	r3, [pc, #64]	; (a400c <cl_rinse_notifydacandgotorinsestandby+0xc8>)
   a3fca:	781b      	ldrb	r3, [r3, #0]
   a3fcc:	2b05      	cmp	r3, #5
   a3fce:	d104      	bne.n	a3fda <cl_rinse_notifydacandgotorinsestandby+0x96>
	{
		Cl_rinseretcode2 = Cl_mac_apprequesthandler(MACREQ_POST_DISINFECT_RINSE_COMPLETED);
   a3fd0:	2053      	movs	r0, #83	; 0x53
   a3fd2:	4b11      	ldr	r3, [pc, #68]	; (a4018 <cl_rinse_notifydacandgotorinsestandby+0xd4>)
   a3fd4:	4798      	blx	r3
   a3fd6:	4603      	mov	r3, r0
   a3fd8:	71fb      	strb	r3, [r7, #7]
	}
	
	cl_flow_switchcontroller(FLOW_SWITCH_CNTRLER_EVENT_STOP);
   a3fda:	2002      	movs	r0, #2
   a3fdc:	4b0f      	ldr	r3, [pc, #60]	; (a401c <cl_rinse_notifydacandgotorinsestandby+0xd8>)
   a3fde:	4798      	blx	r3

						
	return Cl_rinseretcode2;
   a3fe0:	79fb      	ldrb	r3, [r7, #7]
}
   a3fe2:	4618      	mov	r0, r3
   a3fe4:	3708      	adds	r7, #8
   a3fe6:	46bd      	mov	sp, r7
   a3fe8:	bd80      	pop	{r7, pc}
   a3fea:	bf00      	nop
   a3fec:	000a45cd 	.word	0x000a45cd
   a3ff0:	000a45a5 	.word	0x000a45a5
   a3ff4:	20071ca0 	.word	0x20071ca0
   a3ff8:	20071ca4 	.word	0x20071ca4
   a3ffc:	20071ca8 	.word	0x20071ca8
   a4000:	20071cb0 	.word	0x20071cb0
   a4004:	20071cb4 	.word	0x20071cb4
   a4008:	00093195 	.word	0x00093195
   a400c:	20071c9e 	.word	0x20071c9e
   a4010:	0009a57d 	.word	0x0009a57d
   a4014:	0009ba51 	.word	0x0009ba51
   a4018:	0008bc51 	.word	0x0008bc51
   a401c:	00093815 	.word	0x00093815

000a4020 <Cl_Rinse_UpdateAlarmTable>:

Cl_ReturnCodeType Cl_Rinse_UpdateAlarmTable(ClRinseAlarmIdType* ClRinseAlarmId )
{
   a4020:	b580      	push	{r7, lr}
   a4022:	b086      	sub	sp, #24
   a4024:	af00      	add	r7, sp, #0
   a4026:	6078      	str	r0, [r7, #4]
	Cl_ReturnCodeType 	Cl_rinseretcode = CL_OK;
   a4028:	2300      	movs	r3, #0
   a402a:	75fb      	strb	r3, [r7, #23]
	Cl_Uint8Type tempcount = 0;
   a402c:	2300      	movs	r3, #0
   a402e:	75bb      	strb	r3, [r7, #22]
	Cl_Uint8Type data[3] ={0, 0} ,*data1 = NULL;
   a4030:	2300      	movs	r3, #0
   a4032:	81bb      	strh	r3, [r7, #12]
   a4034:	2300      	movs	r3, #0
   a4036:	73bb      	strb	r3, [r7, #14]
   a4038:	2300      	movs	r3, #0
   a403a:	613b      	str	r3, [r7, #16]
	Cl_Uint8Type data3;
	Cl_NewAlarmIdType cl_alarmId;
	
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a403c:	2351      	movs	r3, #81	; 0x51
   a403e:	73fb      	strb	r3, [r7, #15]
	
	
	for (tempcount = 0 ; tempcount < CL_RINSE_ALRM_MAX ; tempcount++)
   a4040:	2300      	movs	r3, #0
   a4042:	75bb      	strb	r3, [r7, #22]
   a4044:	e046      	b.n	a40d4 <Cl_Rinse_UpdateAlarmTable+0xb4>
	{
		
		Cl_Alarm_GetAlarmStatus(Cl_RinseAlarmTable[tempcount].Cl_RinseAlarmId,&Cl_RinseAlarmTable[tempcount].IsActive);
   a4046:	7dbb      	ldrb	r3, [r7, #22]
   a4048:	4a26      	ldr	r2, [pc, #152]	; (a40e4 <Cl_Rinse_UpdateAlarmTable+0xc4>)
   a404a:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   a404e:	7dbb      	ldrb	r3, [r7, #22]
   a4050:	00db      	lsls	r3, r3, #3
   a4052:	4a24      	ldr	r2, [pc, #144]	; (a40e4 <Cl_Rinse_UpdateAlarmTable+0xc4>)
   a4054:	4413      	add	r3, r2
   a4056:	3302      	adds	r3, #2
   a4058:	4608      	mov	r0, r1
   a405a:	4619      	mov	r1, r3
   a405c:	4b22      	ldr	r3, [pc, #136]	; (a40e8 <Cl_Rinse_UpdateAlarmTable+0xc8>)
   a405e:	4798      	blx	r3

		
			if (Cl_RinseAlarmTable[tempcount].IsActive)
   a4060:	7dbb      	ldrb	r3, [r7, #22]
   a4062:	4a20      	ldr	r2, [pc, #128]	; (a40e4 <Cl_Rinse_UpdateAlarmTable+0xc4>)
   a4064:	00db      	lsls	r3, r3, #3
   a4066:	4413      	add	r3, r2
   a4068:	789b      	ldrb	r3, [r3, #2]
   a406a:	2b00      	cmp	r3, #0
   a406c:	d019      	beq.n	a40a2 <Cl_Rinse_UpdateAlarmTable+0x82>
			{
				if(!Cl_RinseAlarmTable[tempcount].IsRaised)
   a406e:	7dbb      	ldrb	r3, [r7, #22]
   a4070:	4a1c      	ldr	r2, [pc, #112]	; (a40e4 <Cl_Rinse_UpdateAlarmTable+0xc4>)
   a4072:	00db      	lsls	r3, r3, #3
   a4074:	4413      	add	r3, r2
   a4076:	78db      	ldrb	r3, [r3, #3]
   a4078:	f083 0301 	eor.w	r3, r3, #1
   a407c:	b2db      	uxtb	r3, r3
   a407e:	2b00      	cmp	r3, #0
   a4080:	d025      	beq.n	a40ce <Cl_Rinse_UpdateAlarmTable+0xae>
					{
	
						Cl_RinseAlarmTable[tempcount].IsRaised = true;
   a4082:	7dbb      	ldrb	r3, [r7, #22]
   a4084:	4a17      	ldr	r2, [pc, #92]	; (a40e4 <Cl_Rinse_UpdateAlarmTable+0xc4>)
   a4086:	00db      	lsls	r3, r3, #3
   a4088:	4413      	add	r3, r2
   a408a:	2201      	movs	r2, #1
   a408c:	70da      	strb	r2, [r3, #3]
					
						Cl_rinseretcode = CL_RinseAlarmActon(Cl_RinseAlarmTable[tempcount].Cl_RinseAlarmId);
   a408e:	7dbb      	ldrb	r3, [r7, #22]
   a4090:	4a14      	ldr	r2, [pc, #80]	; (a40e4 <Cl_Rinse_UpdateAlarmTable+0xc4>)
   a4092:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
   a4096:	4618      	mov	r0, r3
   a4098:	4b14      	ldr	r3, [pc, #80]	; (a40ec <Cl_Rinse_UpdateAlarmTable+0xcc>)
   a409a:	4798      	blx	r3
   a409c:	4603      	mov	r3, r0
   a409e:	75fb      	strb	r3, [r7, #23]
   a40a0:	e015      	b.n	a40ce <Cl_Rinse_UpdateAlarmTable+0xae>
			
			}
			else
			{
				// alarm was present before , but not active now.
				if(Cl_RinseAlarmTable[tempcount].IsRaised == true)
   a40a2:	7dbb      	ldrb	r3, [r7, #22]
   a40a4:	4a0f      	ldr	r2, [pc, #60]	; (a40e4 <Cl_Rinse_UpdateAlarmTable+0xc4>)
   a40a6:	00db      	lsls	r3, r3, #3
   a40a8:	4413      	add	r3, r2
   a40aa:	78db      	ldrb	r3, [r3, #3]
   a40ac:	2b00      	cmp	r3, #0
   a40ae:	d00e      	beq.n	a40ce <Cl_Rinse_UpdateAlarmTable+0xae>
				{
					Cl_RinseAlarmTable[tempcount].IsRaised = false;
   a40b0:	7dbb      	ldrb	r3, [r7, #22]
   a40b2:	4a0c      	ldr	r2, [pc, #48]	; (a40e4 <Cl_Rinse_UpdateAlarmTable+0xc4>)
   a40b4:	00db      	lsls	r3, r3, #3
   a40b6:	4413      	add	r3, r2
   a40b8:	2200      	movs	r2, #0
   a40ba:	70da      	strb	r2, [r3, #3]
					command = CON_TX_COMMAND_ALARM;
   a40bc:	2307      	movs	r3, #7
   a40be:	73fb      	strb	r3, [r7, #15]
					data[0] = (Cl_Uint8Type)(Cl_RinseAlarmTable[tempcount].Cl_RinseAlarmId);
   a40c0:	7dbb      	ldrb	r3, [r7, #22]
   a40c2:	4a08      	ldr	r2, [pc, #32]	; (a40e4 <Cl_Rinse_UpdateAlarmTable+0xc4>)
   a40c4:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
   a40c8:	733b      	strb	r3, [r7, #12]
					data[1] = (Cl_Uint8Type) CL_ALARM_CLEARED;
   a40ca:	2300      	movs	r3, #0
   a40cc:	737b      	strb	r3, [r7, #13]
	Cl_NewAlarmIdType cl_alarmId;
	
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
	
	
	for (tempcount = 0 ; tempcount < CL_RINSE_ALRM_MAX ; tempcount++)
   a40ce:	7dbb      	ldrb	r3, [r7, #22]
   a40d0:	3301      	adds	r3, #1
   a40d2:	75bb      	strb	r3, [r7, #22]
   a40d4:	7dbb      	ldrb	r3, [r7, #22]
   a40d6:	2b19      	cmp	r3, #25
   a40d8:	d9b5      	bls.n	a4046 <Cl_Rinse_UpdateAlarmTable+0x26>
			}
		//}

	}

return (Cl_rinseretcode );
   a40da:	7dfb      	ldrb	r3, [r7, #23]
}
   a40dc:	4618      	mov	r0, r3
   a40de:	3718      	adds	r7, #24
   a40e0:	46bd      	mov	sp, r7
   a40e2:	bd80      	pop	{r7, pc}
   a40e4:	20070ccc 	.word	0x20070ccc
   a40e8:	00083035 	.word	0x00083035
   a40ec:	000a4251 	.word	0x000a4251

000a40f0 <Cl_Rinse_ProcessAlarms>:

Cl_ReturnCodeType Cl_Rinse_ProcessAlarms(void )
{
   a40f0:	b580      	push	{r7, lr}
   a40f2:	b082      	sub	sp, #8
   a40f4:	af00      	add	r7, sp, #0
		Cl_ReturnCodeType 	Cl_rinseretcode = CL_OK;
   a40f6:	2300      	movs	r3, #0
   a40f8:	71fb      	strb	r3, [r7, #7]
		ClRinseAlarmIdType ClRinseAlarmId;
		Cl_Uint8Type data;
		Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a40fa:	2351      	movs	r3, #81	; 0x51
   a40fc:	71bb      	strb	r3, [r7, #6]
		Cl_NewAlarmIdType cl_rinsealarmid;
	
	   Cl_rinseretcode = Cl_Rinse_UpdateAlarmTable(&ClRinseAlarmId);
   a40fe:	1d7b      	adds	r3, r7, #5
   a4100:	4618      	mov	r0, r3
   a4102:	4b04      	ldr	r3, [pc, #16]	; (a4114 <Cl_Rinse_ProcessAlarms+0x24>)
   a4104:	4798      	blx	r3
   a4106:	4603      	mov	r3, r0
   a4108:	71fb      	strb	r3, [r7, #7]

		   
		  
	   	return (Cl_rinseretcode);
   a410a:	79fb      	ldrb	r3, [r7, #7]
}
   a410c:	4618      	mov	r0, r3
   a410e:	3708      	adds	r7, #8
   a4110:	46bd      	mov	sp, r7
   a4112:	bd80      	pop	{r7, pc}
   a4114:	000a4021 	.word	0x000a4021

000a4118 <Cl_Rinse_ResetAlertsforReassertion>:

Cl_ReturnCodeType Cl_Rinse_ResetAlertsforReassertion(void )
{
   a4118:	b580      	push	{r7, lr}
   a411a:	b082      	sub	sp, #8
   a411c:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType 	Cl_rinseretcode = CL_OK;
   a411e:	2300      	movs	r3, #0
   a4120:	71fb      	strb	r3, [r7, #7]
	ClRinseAlarmIdType ClRinseAlarmId;
	Cl_Uint8Type data;
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a4122:	2351      	movs	r3, #81	; 0x51
   a4124:	71bb      	strb	r3, [r7, #6]
	Cl_NewAlarmIdType cl_rinsealarmid;
	
		
	Cl_RinseAlarmTable[CL_RINSE_ALARM_BLOODDOOR_STATUS_OPEN].IsRaised = false;
   a4126:	4b48      	ldr	r3, [pc, #288]	; (a4248 <Cl_Rinse_ResetAlertsforReassertion+0x130>)
   a4128:	2200      	movs	r2, #0
   a412a:	70da      	strb	r2, [r3, #3]
	//Cl_AlarmResetAlarm(BLOODDOOR_STATUS_OPEN);
	Cl_AlarmResetAlarm(Cl_RinseAlarmTable[CL_RINSE_ALARM_BLOODDOOR_STATUS_OPEN].Cl_RinseAlarmId);
   a412c:	4b46      	ldr	r3, [pc, #280]	; (a4248 <Cl_Rinse_ResetAlertsforReassertion+0x130>)
   a412e:	781b      	ldrb	r3, [r3, #0]
   a4130:	4618      	mov	r0, r3
   a4132:	4b46      	ldr	r3, [pc, #280]	; (a424c <Cl_Rinse_ResetAlertsforReassertion+0x134>)
   a4134:	4798      	blx	r3
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_BYPASSDOOR_STATUS_OPEN].IsRaised = false;
	//Cl_AlarmResetAlarm(BYPASSDOOR_STATUS_OPEN);

	//Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_STATUS_LOW].IsRaised = false;
	//Cl_AlarmResetAlarm(COND_STATUS_LOW);
	Cl_RinseAlarmTable[CL_RINSE_ALARM_ACID_IN].IsRaised = false;
   a4136:	4b44      	ldr	r3, [pc, #272]	; (a4248 <Cl_Rinse_ResetAlertsforReassertion+0x130>)
   a4138:	2200      	movs	r2, #0
   a413a:	72da      	strb	r2, [r3, #11]
	Cl_AlarmResetAlarm(ACID_IN_OPEN);
   a413c:	2029      	movs	r0, #41	; 0x29
   a413e:	4b43      	ldr	r3, [pc, #268]	; (a424c <Cl_Rinse_ResetAlertsforReassertion+0x134>)
   a4140:	4798      	blx	r3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_BICARB_IN].IsRaised = false;
   a4142:	4b41      	ldr	r3, [pc, #260]	; (a4248 <Cl_Rinse_ResetAlertsforReassertion+0x130>)
   a4144:	2200      	movs	r2, #0
   a4146:	74da      	strb	r2, [r3, #19]
	Cl_AlarmResetAlarm(BICARB_IN_OPEN);
   a4148:	202b      	movs	r0, #43	; 0x2b
   a414a:	4b40      	ldr	r3, [pc, #256]	; (a424c <Cl_Rinse_ResetAlertsforReassertion+0x134>)
   a414c:	4798      	blx	r3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_STATUS_HIGH].IsRaised = false;
   a414e:	4b3e      	ldr	r3, [pc, #248]	; (a4248 <Cl_Rinse_ResetAlertsforReassertion+0x130>)
   a4150:	2200      	movs	r2, #0
   a4152:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
	Cl_AlarmResetAlarm(COND_STATUS_HIGH);
   a4156:	2008      	movs	r0, #8
   a4158:	4b3c      	ldr	r3, [pc, #240]	; (a424c <Cl_Rinse_ResetAlertsforReassertion+0x134>)
   a415a:	4798      	blx	r3
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_DAC_OPEN].IsRaised = false;
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_DAC_RO].IsRaised = false;
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_COND_DAC_HIGH].IsRaised = false;
	Cl_RinseAlarmTable[CL_RINSE_ALARM_PS1_HIGH_THRESHOLD].IsRaised = false;
   a415c:	4b3a      	ldr	r3, [pc, #232]	; (a4248 <Cl_Rinse_ResetAlertsforReassertion+0x130>)
   a415e:	2200      	movs	r2, #0
   a4160:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
	Cl_RinseAlarmTable[CL_RINSE_ALARM_PS1_LOW_THRESHOLD].IsRaised = false;
   a4164:	4b38      	ldr	r3, [pc, #224]	; (a4248 <Cl_Rinse_ResetAlertsforReassertion+0x130>)
   a4166:	2200      	movs	r2, #0
   a4168:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
	Cl_AlarmResetAlarm(PS1_HIGH_THRESHOLD);
   a416c:	2015      	movs	r0, #21
   a416e:	4b37      	ldr	r3, [pc, #220]	; (a424c <Cl_Rinse_ResetAlertsforReassertion+0x134>)
   a4170:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS1_LOW_THRESHOLD);
   a4172:	2016      	movs	r0, #22
   a4174:	4b35      	ldr	r3, [pc, #212]	; (a424c <Cl_Rinse_ResetAlertsforReassertion+0x134>)
   a4176:	4798      	blx	r3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_PS2_HIGH_THRESHOLD].IsRaised = false;
   a4178:	4b33      	ldr	r3, [pc, #204]	; (a4248 <Cl_Rinse_ResetAlertsforReassertion+0x130>)
   a417a:	2200      	movs	r2, #0
   a417c:	f883 207b 	strb.w	r2, [r3, #123]	; 0x7b
	Cl_RinseAlarmTable[CL_RINSE_ALARM_PS2_LOW_THRESHOLD].IsRaised = false;
   a4180:	4b31      	ldr	r3, [pc, #196]	; (a4248 <Cl_Rinse_ResetAlertsforReassertion+0x130>)
   a4182:	2200      	movs	r2, #0
   a4184:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
	Cl_AlarmResetAlarm(PS2_HIGH_THRESHOLD);
   a4188:	2017      	movs	r0, #23
   a418a:	4b30      	ldr	r3, [pc, #192]	; (a424c <Cl_Rinse_ResetAlertsforReassertion+0x134>)
   a418c:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS2_LOW_THRESHOLD);
   a418e:	2018      	movs	r0, #24
   a4190:	4b2e      	ldr	r3, [pc, #184]	; (a424c <Cl_Rinse_ResetAlertsforReassertion+0x134>)
   a4192:	4798      	blx	r3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_PS3_HIGH_THRESHOLD].IsRaised = false;
   a4194:	4b2c      	ldr	r3, [pc, #176]	; (a4248 <Cl_Rinse_ResetAlertsforReassertion+0x130>)
   a4196:	2200      	movs	r2, #0
   a4198:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
	Cl_RinseAlarmTable[CL_RINSE_ALARM_PS3_LOW_THRESHOLD].IsRaised = false;
   a419c:	4b2a      	ldr	r3, [pc, #168]	; (a4248 <Cl_Rinse_ResetAlertsforReassertion+0x130>)
   a419e:	2200      	movs	r2, #0
   a41a0:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
	Cl_AlarmResetAlarm(PS3_LOW_THRESHOLD);
   a41a4:	2028      	movs	r0, #40	; 0x28
   a41a6:	4b29      	ldr	r3, [pc, #164]	; (a424c <Cl_Rinse_ResetAlertsforReassertion+0x134>)
   a41a8:	4798      	blx	r3
	Cl_AlarmResetAlarm(PS3_HIGH_THRESHOLD);
   a41aa:	2027      	movs	r0, #39	; 0x27
   a41ac:	4b27      	ldr	r3, [pc, #156]	; (a424c <Cl_Rinse_ResetAlertsforReassertion+0x134>)
   a41ae:	4798      	blx	r3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_TEMP2_HIGH_THRESHOLD].IsRaised = false;
   a41b0:	4b25      	ldr	r3, [pc, #148]	; (a4248 <Cl_Rinse_ResetAlertsforReassertion+0x130>)
   a41b2:	2200      	movs	r2, #0
   a41b4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	Cl_AlarmResetAlarm(TEMP2_LOW_THRESHOLD);
   a41b8:	2012      	movs	r0, #18
   a41ba:	4b24      	ldr	r3, [pc, #144]	; (a424c <Cl_Rinse_ResetAlertsforReassertion+0x134>)
   a41bc:	4798      	blx	r3
	Cl_AlarmResetAlarm(TEMP2_HIGH_THRESHOLD);
   a41be:	2011      	movs	r0, #17
   a41c0:	4b22      	ldr	r3, [pc, #136]	; (a424c <Cl_Rinse_ResetAlertsforReassertion+0x134>)
   a41c2:	4798      	blx	r3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_TEMP3_HIGH_THRESHOLD].IsRaised = false;
   a41c4:	4b20      	ldr	r3, [pc, #128]	; (a4248 <Cl_Rinse_ResetAlertsforReassertion+0x130>)
   a41c6:	2200      	movs	r2, #0
   a41c8:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
	Cl_RinseAlarmTable[CL_RINSE_ALARM_TEMP3_LOW_THRESHOLD].IsRaised = false;
   a41cc:	4b1e      	ldr	r3, [pc, #120]	; (a4248 <Cl_Rinse_ResetAlertsforReassertion+0x130>)
   a41ce:	2200      	movs	r2, #0
   a41d0:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
	Cl_AlarmResetAlarm(TEMP3_HIGH_THRESHOLD);
   a41d4:	2013      	movs	r0, #19
   a41d6:	4b1d      	ldr	r3, [pc, #116]	; (a424c <Cl_Rinse_ResetAlertsforReassertion+0x134>)
   a41d8:	4798      	blx	r3
	Cl_AlarmResetAlarm(TEMP3_LOW_THRESHOLD);
   a41da:	2014      	movs	r0, #20
   a41dc:	4b1b      	ldr	r3, [pc, #108]	; (a424c <Cl_Rinse_ResetAlertsforReassertion+0x134>)
   a41de:	4798      	blx	r3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_HOLDER1STATUS_OPEN].IsRaised = false;
   a41e0:	4b19      	ldr	r3, [pc, #100]	; (a4248 <Cl_Rinse_ResetAlertsforReassertion+0x130>)
   a41e2:	2200      	movs	r2, #0
   a41e4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	Cl_AlarmResetAlarm(HOLDER1STATUS_OPEN);
   a41e8:	2003      	movs	r0, #3
   a41ea:	4b18      	ldr	r3, [pc, #96]	; (a424c <Cl_Rinse_ResetAlertsforReassertion+0x134>)
   a41ec:	4798      	blx	r3
	//Cl_AlarmResetAlarm(HOLDER1STATUS_CLOSED);
	Cl_RinseAlarmTable[CL_RINSE_ALARM_HOLDER2STATUS_OPEN].IsRaised = false;
   a41ee:	4b16      	ldr	r3, [pc, #88]	; (a4248 <Cl_Rinse_ResetAlertsforReassertion+0x130>)
   a41f0:	2200      	movs	r2, #0
   a41f2:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	Cl_AlarmResetAlarm(HOLDER2STATUS_OPEN);
   a41f6:	2004      	movs	r0, #4
   a41f8:	4b14      	ldr	r3, [pc, #80]	; (a424c <Cl_Rinse_ResetAlertsforReassertion+0x134>)
   a41fa:	4798      	blx	r3
	//Cl_AlarmResetAlarm(HOLDER2STATUS_CLOSED);
	Cl_RinseAlarmTable[CL_RINSE_ALARM_POWER_FAILURE].IsRaised = false;
   a41fc:	4b12      	ldr	r3, [pc, #72]	; (a4248 <Cl_Rinse_ResetAlertsforReassertion+0x130>)
   a41fe:	2200      	movs	r2, #0
   a4200:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
	Cl_AlarmResetAlarm(POWER_FAILURE);
   a4204:	201d      	movs	r0, #29
   a4206:	4b11      	ldr	r3, [pc, #68]	; (a424c <Cl_Rinse_ResetAlertsforReassertion+0x134>)
   a4208:	4798      	blx	r3
	
	Cl_RinseAlarmTable[CL_RINSE_ALARM_FLOW_NO_FLOW].IsRaised = false;
   a420a:	4b0f      	ldr	r3, [pc, #60]	; (a4248 <Cl_Rinse_ResetAlertsforReassertion+0x130>)
   a420c:	2200      	movs	r2, #0
   a420e:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_FLOW_HIGH_FLOWRATE].IsRaised = false;
   a4212:	4b0d      	ldr	r3, [pc, #52]	; (a4248 <Cl_Rinse_ResetAlertsforReassertion+0x130>)
   a4214:	2200      	movs	r2, #0
   a4216:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_FLOW_LOW_FLOWRATE].IsRaised = false;
   a421a:	4b0b      	ldr	r3, [pc, #44]	; (a4248 <Cl_Rinse_ResetAlertsforReassertion+0x130>)
   a421c:	2200      	movs	r2, #0
   a421e:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
	//Cl_RinseAlarmTable[CL_RINSE_ALARM_LEVEL_SWITCH_LOW_TOGGLERATE].IsRaised = false;
	Cl_RinseAlarmTable[CL_RINSE_ALARM_TEMP1_LOW_THRESHOLD].IsRaised = false;
   a4222:	4b09      	ldr	r3, [pc, #36]	; (a4248 <Cl_Rinse_ResetAlertsforReassertion+0x130>)
   a4224:	2200      	movs	r2, #0
   a4226:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	Cl_AlarmResetAlarm(TEMP1_LOW_THRESHOLD);
   a422a:	2010      	movs	r0, #16
   a422c:	4b07      	ldr	r3, [pc, #28]	; (a424c <Cl_Rinse_ResetAlertsforReassertion+0x134>)
   a422e:	4798      	blx	r3
	Cl_RinseAlarmTable[CL_RINSE_ALARM_TEMP1_HIGH_THRESHOLD].IsRaised = false;
   a4230:	4b05      	ldr	r3, [pc, #20]	; (a4248 <Cl_Rinse_ResetAlertsforReassertion+0x130>)
   a4232:	2200      	movs	r2, #0
   a4234:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	Cl_AlarmResetAlarm(TEMP1_HIGH_THRESHOLD);
   a4238:	200f      	movs	r0, #15
   a423a:	4b04      	ldr	r3, [pc, #16]	; (a424c <Cl_Rinse_ResetAlertsforReassertion+0x134>)
   a423c:	4798      	blx	r3
	//Cl_AlarmResetAlarm(TEMP2_HIGH_THRESHOLD);
	
	
	return (Cl_rinseretcode);
   a423e:	79fb      	ldrb	r3, [r7, #7]
}
   a4240:	4618      	mov	r0, r3
   a4242:	3708      	adds	r7, #8
   a4244:	46bd      	mov	sp, r7
   a4246:	bd80      	pop	{r7, pc}
   a4248:	20070ccc 	.word	0x20070ccc
   a424c:	00082f51 	.word	0x00082f51

000a4250 <CL_RinseAlarmActon>:


Cl_ReturnCodeType  CL_RinseAlarmActon(Cl_NewAlarmIdType cl_rinsealarmid)
{
   a4250:	b580      	push	{r7, lr}
   a4252:	b086      	sub	sp, #24
   a4254:	af00      	add	r7, sp, #0
   a4256:	4603      	mov	r3, r0
   a4258:	71fb      	strb	r3, [r7, #7]
		Cl_ReturnCodeType 	Cl_rinseretcode = CL_OK;
   a425a:	2300      	movs	r3, #0
   a425c:	75fb      	strb	r3, [r7, #23]
			Cl_Uint8Type data[3] ={0, 0} ,*data1 = NULL;
   a425e:	2300      	movs	r3, #0
   a4260:	813b      	strh	r3, [r7, #8]
   a4262:	2300      	movs	r3, #0
   a4264:	72bb      	strb	r3, [r7, #10]
   a4266:	2300      	movs	r3, #0
   a4268:	613b      	str	r3, [r7, #16]
			Cl_Uint8Type data3;
			Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a426a:	2351      	movs	r3, #81	; 0x51
   a426c:	73fb      	strb	r3, [r7, #15]
			Cl_Uint16Type levelswitchstatus = 0;	
   a426e:	2300      	movs	r3, #0
   a4270:	81bb      	strh	r3, [r7, #12]
			static Cl_Uint8Type fillseccounter=0;
			Cl_NewAlarmIdType NewAlarmId = _NO_ALARM;
   a4272:	2300      	movs	r3, #0
   a4274:	72fb      	strb	r3, [r7, #11]
		//Cl_Uint16Type var=0;

			

							
		switch(cl_rinsealarmid)
   a4276:	79fb      	ldrb	r3, [r7, #7]
   a4278:	3b01      	subs	r3, #1
   a427a:	2b3a      	cmp	r3, #58	; 0x3a
   a427c:	f200 810f 	bhi.w	a449e <CL_RinseAlarmActon+0x24e>
   a4280:	a201      	add	r2, pc, #4	; (adr r2, a4288 <CL_RinseAlarmActon+0x38>)
   a4282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a4286:	bf00      	nop
   a4288:	000a4385 	.word	0x000a4385
   a428c:	000a449f 	.word	0x000a449f
   a4290:	000a43b3 	.word	0x000a43b3
   a4294:	000a43c3 	.word	0x000a43c3
   a4298:	000a449f 	.word	0x000a449f
   a429c:	000a449f 	.word	0x000a449f
   a42a0:	000a449f 	.word	0x000a449f
   a42a4:	000a4447 	.word	0x000a4447
   a42a8:	000a449f 	.word	0x000a449f
   a42ac:	000a449f 	.word	0x000a449f
   a42b0:	000a449f 	.word	0x000a449f
   a42b4:	000a4457 	.word	0x000a4457
   a42b8:	000a4463 	.word	0x000a4463
   a42bc:	000a446f 	.word	0x000a446f
   a42c0:	000a43d3 	.word	0x000a43d3
   a42c4:	000a43d3 	.word	0x000a43d3
   a42c8:	000a43e3 	.word	0x000a43e3
   a42cc:	000a43e3 	.word	0x000a43e3
   a42d0:	000a43f3 	.word	0x000a43f3
   a42d4:	000a4407 	.word	0x000a4407
   a42d8:	000a4417 	.word	0x000a4417
   a42dc:	000a4417 	.word	0x000a4417
   a42e0:	000a4427 	.word	0x000a4427
   a42e4:	000a4427 	.word	0x000a4427
   a42e8:	000a449f 	.word	0x000a449f
   a42ec:	000a4493 	.word	0x000a4493
   a42f0:	000a44a5 	.word	0x000a44a5
   a42f4:	000a44a5 	.word	0x000a44a5
   a42f8:	000a4375 	.word	0x000a4375
   a42fc:	000a449f 	.word	0x000a449f
   a4300:	000a44a5 	.word	0x000a44a5
   a4304:	000a449f 	.word	0x000a449f
   a4308:	000a449f 	.word	0x000a449f
   a430c:	000a449f 	.word	0x000a449f
   a4310:	000a449f 	.word	0x000a449f
   a4314:	000a449f 	.word	0x000a449f
   a4318:	000a449f 	.word	0x000a449f
   a431c:	000a449f 	.word	0x000a449f
   a4320:	000a4437 	.word	0x000a4437
   a4324:	000a4437 	.word	0x000a4437
   a4328:	000a4393 	.word	0x000a4393
   a432c:	000a449f 	.word	0x000a449f
   a4330:	000a43a3 	.word	0x000a43a3
   a4334:	000a449f 	.word	0x000a449f
   a4338:	000a44a5 	.word	0x000a44a5
   a433c:	000a44a5 	.word	0x000a44a5
   a4340:	000a449f 	.word	0x000a449f
   a4344:	000a449f 	.word	0x000a449f
   a4348:	000a449f 	.word	0x000a449f
   a434c:	000a447b 	.word	0x000a447b
   a4350:	000a447b 	.word	0x000a447b
   a4354:	000a449f 	.word	0x000a449f
   a4358:	000a449f 	.word	0x000a449f
   a435c:	000a449f 	.word	0x000a449f
   a4360:	000a449f 	.word	0x000a449f
   a4364:	000a449f 	.word	0x000a449f
   a4368:	000a4487 	.word	0x000a4487
   a436c:	000a4487 	.word	0x000a4487
   a4370:	000a4487 	.word	0x000a4487
		{
			
			case POWER_FAILURE:
			
		//	sv_cntrl_setredalarm();
			sv_cntrl_buzzer();
   a4374:	4b5c      	ldr	r3, [pc, #368]	; (a44e8 <CL_RinseAlarmActon+0x298>)
   a4376:	4798      	blx	r3
			Cl_Rinse_StopRinse();
   a4378:	4b5c      	ldr	r3, [pc, #368]	; (a44ec <CL_RinseAlarmActon+0x29c>)
   a437a:	4798      	blx	r3
			cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a437c:	4b5c      	ldr	r3, [pc, #368]	; (a44f0 <CL_RinseAlarmActon+0x2a0>)
   a437e:	2206      	movs	r2, #6
   a4380:	701a      	strb	r2, [r3, #0]
			break;
   a4382:	e090      	b.n	a44a6 <CL_RinseAlarmActon+0x256>
			
			case BLOODDOOR_STATUS_OPEN:
				//	sv_cntrl_setredalarm();
					sv_cntrl_buzzer();
   a4384:	4b58      	ldr	r3, [pc, #352]	; (a44e8 <CL_RinseAlarmActon+0x298>)
   a4386:	4798      	blx	r3
					cl_bp_controller(CL_BP_EVENT_STOP,0);
   a4388:	2004      	movs	r0, #4
   a438a:	2100      	movs	r1, #0
   a438c:	4b59      	ldr	r3, [pc, #356]	; (a44f4 <CL_RinseAlarmActon+0x2a4>)
   a438e:	4798      	blx	r3
				//	cl_dprep_primecontroller(CL_DPREP_PRIME_PRIME_ALARM,0);
			//		Cl_Rinse_StopRinse();
			//		cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
				
			break;
   a4390:	e089      	b.n	a44a6 <CL_RinseAlarmActon+0x256>
			
			case ACID_IN_OPEN:
	//		sv_cntrl_setyellowalarm();
			sv_cntrl_buzzer();
   a4392:	4b55      	ldr	r3, [pc, #340]	; (a44e8 <CL_RinseAlarmActon+0x298>)
   a4394:	4798      	blx	r3
			Cl_Rinse_StopRinse();
   a4396:	4b55      	ldr	r3, [pc, #340]	; (a44ec <CL_RinseAlarmActon+0x29c>)
   a4398:	4798      	blx	r3
			cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a439a:	4b55      	ldr	r3, [pc, #340]	; (a44f0 <CL_RinseAlarmActon+0x2a0>)
   a439c:	2206      	movs	r2, #6
   a439e:	701a      	strb	r2, [r3, #0]
			break;
   a43a0:	e081      	b.n	a44a6 <CL_RinseAlarmActon+0x256>
			
			case BICARB_IN_OPEN:
		//	sv_cntrl_setyellowalarm();
			sv_cntrl_buzzer();
   a43a2:	4b51      	ldr	r3, [pc, #324]	; (a44e8 <CL_RinseAlarmActon+0x298>)
   a43a4:	4798      	blx	r3
			Cl_Rinse_StopRinse();
   a43a6:	4b51      	ldr	r3, [pc, #324]	; (a44ec <CL_RinseAlarmActon+0x29c>)
   a43a8:	4798      	blx	r3
			cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a43aa:	4b51      	ldr	r3, [pc, #324]	; (a44f0 <CL_RinseAlarmActon+0x2a0>)
   a43ac:	2206      	movs	r2, #6
   a43ae:	701a      	strb	r2, [r3, #0]
			break;
   a43b0:	e079      	b.n	a44a6 <CL_RinseAlarmActon+0x256>
			
			case HOLDER1STATUS_OPEN:
			//	sv_cntrl_setyellowalarm();
				sv_cntrl_buzzer();
   a43b2:	4b4d      	ldr	r3, [pc, #308]	; (a44e8 <CL_RinseAlarmActon+0x298>)
   a43b4:	4798      	blx	r3
				Cl_Rinse_StopRinse();
   a43b6:	4b4d      	ldr	r3, [pc, #308]	; (a44ec <CL_RinseAlarmActon+0x29c>)
   a43b8:	4798      	blx	r3
				cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a43ba:	4b4d      	ldr	r3, [pc, #308]	; (a44f0 <CL_RinseAlarmActon+0x2a0>)
   a43bc:	2206      	movs	r2, #6
   a43be:	701a      	strb	r2, [r3, #0]
			break;
   a43c0:	e071      	b.n	a44a6 <CL_RinseAlarmActon+0x256>
			
			case HOLDER2STATUS_OPEN:
			//	sv_cntrl_setyellowalarm();
				sv_cntrl_buzzer();
   a43c2:	4b49      	ldr	r3, [pc, #292]	; (a44e8 <CL_RinseAlarmActon+0x298>)
   a43c4:	4798      	blx	r3
				Cl_Rinse_StopRinse();
   a43c6:	4b49      	ldr	r3, [pc, #292]	; (a44ec <CL_RinseAlarmActon+0x29c>)
   a43c8:	4798      	blx	r3
				cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a43ca:	4b49      	ldr	r3, [pc, #292]	; (a44f0 <CL_RinseAlarmActon+0x2a0>)
   a43cc:	2206      	movs	r2, #6
   a43ce:	701a      	strb	r2, [r3, #0]
			break;
   a43d0:	e069      	b.n	a44a6 <CL_RinseAlarmActon+0x256>
			
			
			case TEMP1_HIGH_THRESHOLD:
			case TEMP1_LOW_THRESHOLD:
			//	sv_cntrl_setyellowalarm();
				sv_cntrl_buzzer();
   a43d2:	4b45      	ldr	r3, [pc, #276]	; (a44e8 <CL_RinseAlarmActon+0x298>)
   a43d4:	4798      	blx	r3
				Cl_Rinse_StopRinse();
   a43d6:	4b45      	ldr	r3, [pc, #276]	; (a44ec <CL_RinseAlarmActon+0x29c>)
   a43d8:	4798      	blx	r3
			//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS1",3);
				cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a43da:	4b45      	ldr	r3, [pc, #276]	; (a44f0 <CL_RinseAlarmActon+0x2a0>)
   a43dc:	2206      	movs	r2, #6
   a43de:	701a      	strb	r2, [r3, #0]
			break;
   a43e0:	e061      	b.n	a44a6 <CL_RinseAlarmActon+0x256>
		//	cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
		//	break;
			
			case TEMP2_LOW_THRESHOLD:
		//	sv_cntrl_setyellowalarm();
			sv_cntrl_buzzer();
   a43e2:	4b41      	ldr	r3, [pc, #260]	; (a44e8 <CL_RinseAlarmActon+0x298>)
   a43e4:	4798      	blx	r3
			Cl_Rinse_StopRinse();
   a43e6:	4b41      	ldr	r3, [pc, #260]	; (a44ec <CL_RinseAlarmActon+0x29c>)
   a43e8:	4798      	blx	r3
			cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a43ea:	4b41      	ldr	r3, [pc, #260]	; (a44f0 <CL_RinseAlarmActon+0x2a0>)
   a43ec:	2206      	movs	r2, #6
   a43ee:	701a      	strb	r2, [r3, #0]
			break;
   a43f0:	e059      	b.n	a44a6 <CL_RinseAlarmActon+0x256>
			
			case TEMP3_HIGH_THRESHOLD:
			//		sv_cntrl_setyellowalarm();
					sv_cntrl_buzzer();
   a43f2:	4b3d      	ldr	r3, [pc, #244]	; (a44e8 <CL_RinseAlarmActon+0x298>)
   a43f4:	4798      	blx	r3
					Cl_Rinse_StopRinse();
   a43f6:	4b3d      	ldr	r3, [pc, #244]	; (a44ec <CL_RinseAlarmActon+0x29c>)
   a43f8:	4798      	blx	r3
					Cl_Rinse_StopRinse();
   a43fa:	4b3c      	ldr	r3, [pc, #240]	; (a44ec <CL_RinseAlarmActon+0x29c>)
   a43fc:	4798      	blx	r3
					cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a43fe:	4b3c      	ldr	r3, [pc, #240]	; (a44f0 <CL_RinseAlarmActon+0x2a0>)
   a4400:	2206      	movs	r2, #6
   a4402:	701a      	strb	r2, [r3, #0]
			break;
   a4404:	e04f      	b.n	a44a6 <CL_RinseAlarmActon+0x256>
			case TEMP3_LOW_THRESHOLD:
		//	sv_cntrl_setyellowalarm();
			sv_cntrl_buzzer();
   a4406:	4b38      	ldr	r3, [pc, #224]	; (a44e8 <CL_RinseAlarmActon+0x298>)
   a4408:	4798      	blx	r3
			Cl_Rinse_StopRinse();
   a440a:	4b38      	ldr	r3, [pc, #224]	; (a44ec <CL_RinseAlarmActon+0x29c>)
   a440c:	4798      	blx	r3
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"PS2",3);
			cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a440e:	4b38      	ldr	r3, [pc, #224]	; (a44f0 <CL_RinseAlarmActon+0x2a0>)
   a4410:	2206      	movs	r2, #6
   a4412:	701a      	strb	r2, [r3, #0]
			break;
   a4414:	e047      	b.n	a44a6 <CL_RinseAlarmActon+0x256>
			
			case PS1_HIGH_THRESHOLD:
			case PS1_LOW_THRESHOLD:
			//	sv_cntrl_setyellowalarm();
				sv_cntrl_buzzer();
   a4416:	4b34      	ldr	r3, [pc, #208]	; (a44e8 <CL_RinseAlarmActon+0x298>)
   a4418:	4798      	blx	r3
				Cl_Rinse_StopRinse();
   a441a:	4b34      	ldr	r3, [pc, #208]	; (a44ec <CL_RinseAlarmActon+0x29c>)
   a441c:	4798      	blx	r3
				cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a441e:	4b34      	ldr	r3, [pc, #208]	; (a44f0 <CL_RinseAlarmActon+0x2a0>)
   a4420:	2206      	movs	r2, #6
   a4422:	701a      	strb	r2, [r3, #0]
			break;
   a4424:	e03f      	b.n	a44a6 <CL_RinseAlarmActon+0x256>
			
			case	PS2_HIGH_THRESHOLD:
			case    PS2_LOW_THRESHOLD:
			//	sv_cntrl_setyellowalarm();
				sv_cntrl_buzzer();
   a4426:	4b30      	ldr	r3, [pc, #192]	; (a44e8 <CL_RinseAlarmActon+0x298>)
   a4428:	4798      	blx	r3
				Cl_Rinse_StopRinse();
   a442a:	4b30      	ldr	r3, [pc, #192]	; (a44ec <CL_RinseAlarmActon+0x29c>)
   a442c:	4798      	blx	r3
				cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a442e:	4b30      	ldr	r3, [pc, #192]	; (a44f0 <CL_RinseAlarmActon+0x2a0>)
   a4430:	2206      	movs	r2, #6
   a4432:	701a      	strb	r2, [r3, #0]
			break;
   a4434:	e037      	b.n	a44a6 <CL_RinseAlarmActon+0x256>
			
			case	PS3_HIGH_THRESHOLD:
			case    PS3_LOW_THRESHOLD:
			//	sv_cntrl_setyellowalarm();
				sv_cntrl_buzzer();
   a4436:	4b2c      	ldr	r3, [pc, #176]	; (a44e8 <CL_RinseAlarmActon+0x298>)
   a4438:	4798      	blx	r3
				Cl_Rinse_StopRinse();
   a443a:	4b2c      	ldr	r3, [pc, #176]	; (a44ec <CL_RinseAlarmActon+0x29c>)
   a443c:	4798      	blx	r3
				cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a443e:	4b2c      	ldr	r3, [pc, #176]	; (a44f0 <CL_RinseAlarmActon+0x2a0>)
   a4440:	2206      	movs	r2, #6
   a4442:	701a      	strb	r2, [r3, #0]
			break;
   a4444:	e02f      	b.n	a44a6 <CL_RinseAlarmActon+0x256>
			
			case COND_STATUS_HIGH:
			//	sv_cntrl_setyellowalarm();
				sv_cntrl_buzzer();
   a4446:	4b28      	ldr	r3, [pc, #160]	; (a44e8 <CL_RinseAlarmActon+0x298>)
   a4448:	4798      	blx	r3
				Cl_Rinse_StopRinse();
   a444a:	4b28      	ldr	r3, [pc, #160]	; (a44ec <CL_RinseAlarmActon+0x29c>)
   a444c:	4798      	blx	r3
				cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a444e:	4b28      	ldr	r3, [pc, #160]	; (a44f0 <CL_RinseAlarmActon+0x2a0>)
   a4450:	2206      	movs	r2, #6
   a4452:	701a      	strb	r2, [r3, #0]
			break;
   a4454:	e027      	b.n	a44a6 <CL_RinseAlarmActon+0x256>
			
			case FLOW_NO_FLOW:
			
			Cl_Rinse_StopRinse();
   a4456:	4b25      	ldr	r3, [pc, #148]	; (a44ec <CL_RinseAlarmActon+0x29c>)
   a4458:	4798      	blx	r3
		//	NewAlarmId = _FLOW_NO_FLOW;
			cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a445a:	4b25      	ldr	r3, [pc, #148]	; (a44f0 <CL_RinseAlarmActon+0x2a0>)
   a445c:	2206      	movs	r2, #6
   a445e:	701a      	strb	r2, [r3, #0]
			break;
   a4460:	e021      	b.n	a44a6 <CL_RinseAlarmActon+0x256>
			case FLOW_LOW_FLOWRATE:
			//Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"FLW",3);
		//	NewAlarmId = _FLOW_LOW_FLOWRATE;
			Cl_Rinse_StopRinse();
   a4462:	4b22      	ldr	r3, [pc, #136]	; (a44ec <CL_RinseAlarmActon+0x29c>)
   a4464:	4798      	blx	r3
			cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a4466:	4b22      	ldr	r3, [pc, #136]	; (a44f0 <CL_RinseAlarmActon+0x2a0>)
   a4468:	2206      	movs	r2, #6
   a446a:	701a      	strb	r2, [r3, #0]
			break;
   a446c:	e01b      	b.n	a44a6 <CL_RinseAlarmActon+0x256>
			
			case FLOW_HIGH_FLOWRATE:
		//	NewAlarmId = _FLOW_HIGH_FLOWRATE;
			Cl_Rinse_StopRinse();
   a446e:	4b1f      	ldr	r3, [pc, #124]	; (a44ec <CL_RinseAlarmActon+0x29c>)
   a4470:	4798      	blx	r3
			cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a4472:	4b1f      	ldr	r3, [pc, #124]	; (a44f0 <CL_RinseAlarmActon+0x2a0>)
   a4474:	2206      	movs	r2, #6
   a4476:	701a      	strb	r2, [r3, #0]
			break;
   a4478:	e015      	b.n	a44a6 <CL_RinseAlarmActon+0x256>
		
			case 	UFP_OVERRUN:
			case	UFP_UNDERRUN:
				//	NewAlarmId = _UF_ALARM_FOR_RINSE;
					Cl_Rinse_StopRinse();
   a447a:	4b1c      	ldr	r3, [pc, #112]	; (a44ec <CL_RinseAlarmActon+0x29c>)
   a447c:	4798      	blx	r3
					cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a447e:	4b1c      	ldr	r3, [pc, #112]	; (a44f0 <CL_RinseAlarmActon+0x2a0>)
   a4480:	2206      	movs	r2, #6
   a4482:	701a      	strb	r2, [r3, #0]
			break;
   a4484:	e00f      	b.n	a44a6 <CL_RinseAlarmActon+0x256>
			case 	BC_OVERRUN:
			case	BC_UNDERRUN:
			case	BC_FAILED:
				//	NewAlarmId = _BC_ALARM;
			//	sv_cntrl_setyellowalarm();                              // updated on 17.03.17
					Cl_Rinse_StopRinse();
   a4486:	4b19      	ldr	r3, [pc, #100]	; (a44ec <CL_RinseAlarmActon+0x29c>)
   a4488:	4798      	blx	r3
					cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a448a:	4b19      	ldr	r3, [pc, #100]	; (a44f0 <CL_RinseAlarmActon+0x2a0>)
   a448c:	2206      	movs	r2, #6
   a448e:	701a      	strb	r2, [r3, #0]
			break;
   a4490:	e009      	b.n	a44a6 <CL_RinseAlarmActon+0x256>
			break;

			case BC_ALARM:
			
		//	sv_cntrl_setyellowalarm();                             
			Cl_Rinse_StopRinse();
   a4492:	4b16      	ldr	r3, [pc, #88]	; (a44ec <CL_RinseAlarmActon+0x29c>)
   a4494:	4798      	blx	r3
			cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a4496:	4b16      	ldr	r3, [pc, #88]	; (a44f0 <CL_RinseAlarmActon+0x2a0>)
   a4498:	2206      	movs	r2, #6
   a449a:	701a      	strb	r2, [r3, #0]
			
			break;
   a449c:	e003      	b.n	a44a6 <CL_RinseAlarmActon+0x256>
			case WATCHDOG_TIMER: //27
		//		NewAlarmId = _WATCHDOG_TIMER;
			break;
			default:
			cl_rinsealarmid = _NO_ALARM;
   a449e:	2300      	movs	r3, #0
   a44a0:	71fb      	strb	r3, [r7, #7]
			break;
   a44a2:	e000      	b.n	a44a6 <CL_RinseAlarmActon+0x256>
// 					Cl_Rinse_StopRinse();
// 					cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
// 			break;

			case DE_CHAMBER_LOW: //23
			break;
   a44a4:	bf00      	nop
			cl_rinsealarmid = _NO_ALARM;
			break;

		}
		
		 if(cl_rinsealarmid != _NO_ALARM)
   a44a6:	79fb      	ldrb	r3, [r7, #7]
   a44a8:	2b00      	cmp	r3, #0
   a44aa:	d014      	beq.n	a44d6 <CL_RinseAlarmActon+0x286>
		 {
			 

			
			data[0] = (Cl_Uint8Type)cl_rinsealarmid;
   a44ac:	79fb      	ldrb	r3, [r7, #7]
   a44ae:	723b      	strb	r3, [r7, #8]
			data[1] = (Cl_Uint8Type) CL_ALARM_TRIGGERED;
   a44b0:	2301      	movs	r3, #1
   a44b2:	727b      	strb	r3, [r7, #9]
			data[2] = (Cl_Uint8Type)CRITICAL;
   a44b4:	2302      	movs	r3, #2
   a44b6:	72bb      	strb	r3, [r7, #10]
			command = CON_TX_COMMAND_ALARM;
   a44b8:	2307      	movs	r3, #7
   a44ba:	73fb      	strb	r3, [r7, #15]
			
			Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,3);
   a44bc:	7bfa      	ldrb	r2, [r7, #15]
   a44be:	f107 0308 	add.w	r3, r7, #8
   a44c2:	4610      	mov	r0, r2
   a44c4:	4619      	mov	r1, r3
   a44c6:	2203      	movs	r2, #3
   a44c8:	4b0b      	ldr	r3, [pc, #44]	; (a44f8 <CL_RinseAlarmActon+0x2a8>)
   a44ca:	4798      	blx	r3
   a44cc:	4603      	mov	r3, r0
   a44ce:	75fb      	strb	r3, [r7, #23]
			cl_wait(10);
   a44d0:	200a      	movs	r0, #10
   a44d2:	4b0a      	ldr	r3, [pc, #40]	; (a44fc <CL_RinseAlarmActon+0x2ac>)
   a44d4:	4798      	blx	r3
					

		 }
		 prevrinsealarm_id = cl_rinsealarmid;
   a44d6:	4a0a      	ldr	r2, [pc, #40]	; (a4500 <CL_RinseAlarmActon+0x2b0>)
   a44d8:	79fb      	ldrb	r3, [r7, #7]
   a44da:	7013      	strb	r3, [r2, #0]
		return CL_OK;	
   a44dc:	2300      	movs	r3, #0
}
   a44de:	4618      	mov	r0, r3
   a44e0:	3718      	adds	r7, #24
   a44e2:	46bd      	mov	sp, r7
   a44e4:	bd80      	pop	{r7, pc}
   a44e6:	bf00      	nop
   a44e8:	00099f61 	.word	0x00099f61
   a44ec:	000a4d61 	.word	0x000a4d61
   a44f0:	20071c9e 	.word	0x20071c9e
   a44f4:	00093305 	.word	0x00093305
   a44f8:	0009ba51 	.word	0x0009ba51
   a44fc:	00093195 	.word	0x00093195
   a4500:	20071cc0 	.word	0x20071cc0

000a4504 <Cl_RinseSendAlarm>:
Cl_ReturnCodeType  Cl_RinseSendAlarm(Cl_NewAlarmIdType cl_rinsealarmId )
{
   a4504:	b580      	push	{r7, lr}
   a4506:	b086      	sub	sp, #24
   a4508:	af00      	add	r7, sp, #0
   a450a:	4603      	mov	r3, r0
   a450c:	71fb      	strb	r3, [r7, #7]
	
			Cl_ReturnCodeType Cl_RetVal = CL_OK;
   a450e:	2300      	movs	r3, #0
   a4510:	75fb      	strb	r3, [r7, #23]
			 
			 
			Cl_Uint8Type data[3] ={0, 0} ,*data1 = NULL;
   a4512:	2300      	movs	r3, #0
   a4514:	81bb      	strh	r3, [r7, #12]
   a4516:	2300      	movs	r3, #0
   a4518:	73bb      	strb	r3, [r7, #14]
   a451a:	2300      	movs	r3, #0
   a451c:	613b      	str	r3, [r7, #16]
			Cl_Uint8Type data3;
			Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a451e:	2351      	movs	r3, #81	; 0x51
   a4520:	73fb      	strb	r3, [r7, #15]
			cl_rinsestate = CL_RINSE_STATE_CRITICAL_ALARM;
   a4522:	4b11      	ldr	r3, [pc, #68]	; (a4568 <Cl_RinseSendAlarm+0x64>)
   a4524:	2206      	movs	r2, #6
   a4526:	701a      	strb	r2, [r3, #0]
			sv_cntrl_setredalarm();
   a4528:	4b10      	ldr	r3, [pc, #64]	; (a456c <Cl_RinseSendAlarm+0x68>)
   a452a:	4798      	blx	r3
			sv_cntrl_buzzer();
   a452c:	4b10      	ldr	r3, [pc, #64]	; (a4570 <Cl_RinseSendAlarm+0x6c>)
   a452e:	4798      	blx	r3
			if(cl_rinsealarmId != _NO_ALARM)
   a4530:	79fb      	ldrb	r3, [r7, #7]
   a4532:	2b00      	cmp	r3, #0
   a4534:	d014      	beq.n	a4560 <Cl_RinseSendAlarm+0x5c>
			 {
				data[0] = (Cl_Uint8Type)cl_rinsealarmId;
   a4536:	79fb      	ldrb	r3, [r7, #7]
   a4538:	733b      	strb	r3, [r7, #12]
				data[1] = (Cl_Uint8Type) CL_ALARM_TRIGGERED;
   a453a:	2301      	movs	r3, #1
   a453c:	737b      	strb	r3, [r7, #13]
				data[2] = (Cl_Uint8Type)CRITICAL;
   a453e:	2302      	movs	r3, #2
   a4540:	73bb      	strb	r3, [r7, #14]
				command = CON_TX_COMMAND_ALARM;
   a4542:	2307      	movs	r3, #7
   a4544:	73fb      	strb	r3, [r7, #15]
			
				Cl_RetVal = Cl_SendDatatoconsole(command,&data,3);
   a4546:	7bfa      	ldrb	r2, [r7, #15]
   a4548:	f107 030c 	add.w	r3, r7, #12
   a454c:	4610      	mov	r0, r2
   a454e:	4619      	mov	r1, r3
   a4550:	2203      	movs	r2, #3
   a4552:	4b08      	ldr	r3, [pc, #32]	; (a4574 <Cl_RinseSendAlarm+0x70>)
   a4554:	4798      	blx	r3
   a4556:	4603      	mov	r3, r0
   a4558:	75fb      	strb	r3, [r7, #23]
				cl_wait(10);
   a455a:	200a      	movs	r0, #10
   a455c:	4b06      	ldr	r3, [pc, #24]	; (a4578 <Cl_RinseSendAlarm+0x74>)
   a455e:	4798      	blx	r3

			 }
}
   a4560:	4618      	mov	r0, r3
   a4562:	3718      	adds	r7, #24
   a4564:	46bd      	mov	sp, r7
   a4566:	bd80      	pop	{r7, pc}
   a4568:	20071c9e 	.word	0x20071c9e
   a456c:	00099f25 	.word	0x00099f25
   a4570:	00099f61 	.word	0x00099f61
   a4574:	0009ba51 	.word	0x0009ba51
   a4578:	00093195 	.word	0x00093195

000a457c <Cl_RinseFlowOn>:
Cl_ReturnCodeType  Cl_RinseFlowOn(void )
{
   a457c:	b580      	push	{r7, lr}
   a457e:	b082      	sub	sp, #8
   a4580:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType Cl_RetVal = CL_OK;
   a4582:	2300      	movs	r3, #0
   a4584:	71fb      	strb	r3, [r7, #7]
	sv_cntrl_activate_valve(VALVE_ID1);
   a4586:	2001      	movs	r0, #1
   a4588:	4b04      	ldr	r3, [pc, #16]	; (a459c <Cl_RinseFlowOn+0x20>)
   a458a:	4798      	blx	r3
	cl_gfillinprogress = true;
   a458c:	4b04      	ldr	r3, [pc, #16]	; (a45a0 <Cl_RinseFlowOn+0x24>)
   a458e:	2201      	movs	r2, #1
   a4590:	701a      	strb	r2, [r3, #0]
	return Cl_RetVal;
   a4592:	79fb      	ldrb	r3, [r7, #7]
	
}
   a4594:	4618      	mov	r0, r3
   a4596:	3708      	adds	r7, #8
   a4598:	46bd      	mov	sp, r7
   a459a:	bd80      	pop	{r7, pc}
   a459c:	00099ccd 	.word	0x00099ccd
   a45a0:	20071cb9 	.word	0x20071cb9

000a45a4 <Cl_RinseFlowOff>:

Cl_ReturnCodeType  Cl_RinseFlowOff(void )
{
   a45a4:	b580      	push	{r7, lr}
   a45a6:	b082      	sub	sp, #8
   a45a8:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType Cl_RetVal = CL_OK;
   a45aa:	2300      	movs	r3, #0
   a45ac:	71fb      	strb	r3, [r7, #7]
	sv_cntrl_deactivate_valve(VALVE_ID1);
   a45ae:	2001      	movs	r0, #1
   a45b0:	4b04      	ldr	r3, [pc, #16]	; (a45c4 <Cl_RinseFlowOff+0x20>)
   a45b2:	4798      	blx	r3
	cl_gfillinprogress = false;
   a45b4:	4b04      	ldr	r3, [pc, #16]	; (a45c8 <Cl_RinseFlowOff+0x24>)
   a45b6:	2200      	movs	r2, #0
   a45b8:	701a      	strb	r2, [r3, #0]
	return Cl_RetVal;
   a45ba:	79fb      	ldrb	r3, [r7, #7]
	
}
   a45bc:	4618      	mov	r0, r3
   a45be:	3708      	adds	r7, #8
   a45c0:	46bd      	mov	sp, r7
   a45c2:	bd80      	pop	{r7, pc}
   a45c4:	00099ced 	.word	0x00099ced
   a45c8:	20071cb9 	.word	0x20071cb9

000a45cc <Cl_RinseStop>:

Cl_ReturnCodeType  Cl_RinseStop(void)
{
   a45cc:	b580      	push	{r7, lr}
   a45ce:	b082      	sub	sp, #8
   a45d0:	af00      	add	r7, sp, #0
	Cl_ReturnCodeType Cl_RetVal = CL_OK;
   a45d2:	2300      	movs	r3, #0
   a45d4:	71fb      	strb	r3, [r7, #7]
	//sv_cntrl_setflowpath(FLOW_PATH_IDLE_RINSE);
	Cl_bc_controller(BC_EVENT_STOP);
   a45d6:	2005      	movs	r0, #5
   a45d8:	4b04      	ldr	r3, [pc, #16]	; (a45ec <Cl_RinseStop+0x20>)
   a45da:	4798      	blx	r3
	
	sv_cntrl_poweroffheater();
   a45dc:	4b04      	ldr	r3, [pc, #16]	; (a45f0 <Cl_RinseStop+0x24>)
   a45de:	4798      	blx	r3
	return Cl_RetVal;
   a45e0:	79fb      	ldrb	r3, [r7, #7]
	
}
   a45e2:	4618      	mov	r0, r3
   a45e4:	3708      	adds	r7, #8
   a45e6:	46bd      	mov	sp, r7
   a45e8:	bd80      	pop	{r7, pc}
   a45ea:	bf00      	nop
   a45ec:	0008330d 	.word	0x0008330d
   a45f0:	00099cb9 	.word	0x00099cb9

000a45f4 <Cl_Rinse_SendRinseStateData>:
Cl_ReturnCodeType Cl_Rinse_SendRinseStateData(void)
{
   a45f4:	b580      	push	{r7, lr}
   a45f6:	b08a      	sub	sp, #40	; 0x28
   a45f8:	af00      	add	r7, sp, #0
	static float cond = 0;
	Cl_ReturnCodeType  Cl_rinseretcode = CL_OK;
   a45fa:	2300      	movs	r3, #0
   a45fc:	77fb      	strb	r3, [r7, #31]
	StateDatatype data;
	Cl_Uint8Type count=0;
   a45fe:	2300      	movs	r3, #0
   a4600:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	Cl_Uint16Type ts2,temp=0,temp1=0,sensordata =0;
   a4604:	2300      	movs	r3, #0
   a4606:	81fb      	strh	r3, [r7, #14]
   a4608:	2300      	movs	r3, #0
   a460a:	83bb      	strh	r3, [r7, #28]
   a460c:	2300      	movs	r3, #0
   a460e:	81bb      	strh	r3, [r7, #12]
	Cl_Uint8Type dataarray[12] =  {0,0,0,0,0,0,0,0,0,0,0,0};
   a4610:	2300      	movs	r3, #0
   a4612:	703b      	strb	r3, [r7, #0]
   a4614:	2300      	movs	r3, #0
   a4616:	707b      	strb	r3, [r7, #1]
   a4618:	2300      	movs	r3, #0
   a461a:	70bb      	strb	r3, [r7, #2]
   a461c:	2300      	movs	r3, #0
   a461e:	70fb      	strb	r3, [r7, #3]
   a4620:	2300      	movs	r3, #0
   a4622:	713b      	strb	r3, [r7, #4]
   a4624:	2300      	movs	r3, #0
   a4626:	717b      	strb	r3, [r7, #5]
   a4628:	2300      	movs	r3, #0
   a462a:	71bb      	strb	r3, [r7, #6]
   a462c:	2300      	movs	r3, #0
   a462e:	71fb      	strb	r3, [r7, #7]
   a4630:	2300      	movs	r3, #0
   a4632:	723b      	strb	r3, [r7, #8]
   a4634:	2300      	movs	r3, #0
   a4636:	727b      	strb	r3, [r7, #9]
   a4638:	2300      	movs	r3, #0
   a463a:	72bb      	strb	r3, [r7, #10]
   a463c:	2300      	movs	r3, #0
   a463e:	72fb      	strb	r3, [r7, #11]
	static timecount = 0;
	static float tmp3 = 0, tmp2 = 0;
	
	//Cl_Console_bulkdatatype 
	
	timecount++;
   a4640:	4b8f      	ldr	r3, [pc, #572]	; (a4880 <Cl_Rinse_SendRinseStateData+0x28c>)
   a4642:	681b      	ldr	r3, [r3, #0]
   a4644:	3301      	adds	r3, #1
   a4646:	4a8e      	ldr	r2, [pc, #568]	; (a4880 <Cl_Rinse_SendRinseStateData+0x28c>)
   a4648:	6013      	str	r3, [r2, #0]

	if (timecount < 5)
   a464a:	4b8d      	ldr	r3, [pc, #564]	; (a4880 <Cl_Rinse_SendRinseStateData+0x28c>)
   a464c:	681b      	ldr	r3, [r3, #0]
   a464e:	2b04      	cmp	r3, #4
   a4650:	f340 8112 	ble.w	a4878 <Cl_Rinse_SendRinseStateData+0x284>
	{
		return;
	}
	else
	{
		timecount = 0;
   a4654:	4b8a      	ldr	r3, [pc, #552]	; (a4880 <Cl_Rinse_SendRinseStateData+0x28c>)
   a4656:	2200      	movs	r2, #0
   a4658:	601a      	str	r2, [r3, #0]
	}
	
	dataarray[0] = CLEAN_DATA;
   a465a:	2301      	movs	r3, #1
   a465c:	703b      	strb	r3, [r7, #0]
	count++;
   a465e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   a4662:	3301      	adds	r3, #1
   a4664:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	//Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&temp);


		Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&sensordata);
   a4668:	f107 030c 	add.w	r3, r7, #12
   a466c:	2014      	movs	r0, #20
   a466e:	4619      	mov	r1, r3
   a4670:	4b84      	ldr	r3, [pc, #528]	; (a4884 <Cl_Rinse_SendRinseStateData+0x290>)
   a4672:	4798      	blx	r3
		{
			tmp3 = (float)sensordata /10;
   a4674:	89ba      	ldrh	r2, [r7, #12]
   a4676:	4b84      	ldr	r3, [pc, #528]	; (a4888 <Cl_Rinse_SendRinseStateData+0x294>)
   a4678:	4610      	mov	r0, r2
   a467a:	4798      	blx	r3
   a467c:	4602      	mov	r2, r0
   a467e:	4b83      	ldr	r3, [pc, #524]	; (a488c <Cl_Rinse_SendRinseStateData+0x298>)
   a4680:	4610      	mov	r0, r2
   a4682:	4983      	ldr	r1, [pc, #524]	; (a4890 <Cl_Rinse_SendRinseStateData+0x29c>)
   a4684:	4798      	blx	r3
   a4686:	4603      	mov	r3, r0
   a4688:	461a      	mov	r2, r3
   a468a:	4b82      	ldr	r3, [pc, #520]	; (a4894 <Cl_Rinse_SendRinseStateData+0x2a0>)
   a468c:	601a      	str	r2, [r3, #0]
		}

		Cl_SysStat_GetSensor_Status_Query(SENSOR_COND_STATUS,&temp);
   a468e:	f107 030e 	add.w	r3, r7, #14
   a4692:	2007      	movs	r0, #7
   a4694:	4619      	mov	r1, r3
   a4696:	4b7b      	ldr	r3, [pc, #492]	; (a4884 <Cl_Rinse_SendRinseStateData+0x290>)
   a4698:	4798      	blx	r3
		{
 			
			float conductivity_CS3, avg_conductivity,avgcond;
			conductivity_CS3 = cl_utilities_CalConductivity(temp,tmp3);
   a469a:	89fa      	ldrh	r2, [r7, #14]
   a469c:	4b7d      	ldr	r3, [pc, #500]	; (a4894 <Cl_Rinse_SendRinseStateData+0x2a0>)
   a469e:	681b      	ldr	r3, [r3, #0]
   a46a0:	4610      	mov	r0, r2
   a46a2:	4619      	mov	r1, r3
   a46a4:	4b7c      	ldr	r3, [pc, #496]	; (a4898 <Cl_Rinse_SendRinseStateData+0x2a4>)
   a46a6:	4798      	blx	r3
   a46a8:	61b8      	str	r0, [r7, #24]
			avg_conductivity = (avg_conductivity *9 + conductivity_CS3)/10;
   a46aa:	4b7c      	ldr	r3, [pc, #496]	; (a489c <Cl_Rinse_SendRinseStateData+0x2a8>)
   a46ac:	6a38      	ldr	r0, [r7, #32]
   a46ae:	497c      	ldr	r1, [pc, #496]	; (a48a0 <Cl_Rinse_SendRinseStateData+0x2ac>)
   a46b0:	4798      	blx	r3
   a46b2:	4603      	mov	r3, r0
   a46b4:	461a      	mov	r2, r3
   a46b6:	4b7b      	ldr	r3, [pc, #492]	; (a48a4 <Cl_Rinse_SendRinseStateData+0x2b0>)
   a46b8:	4610      	mov	r0, r2
   a46ba:	69b9      	ldr	r1, [r7, #24]
   a46bc:	4798      	blx	r3
   a46be:	4603      	mov	r3, r0
   a46c0:	461a      	mov	r2, r3
   a46c2:	4b72      	ldr	r3, [pc, #456]	; (a488c <Cl_Rinse_SendRinseStateData+0x298>)
   a46c4:	4610      	mov	r0, r2
   a46c6:	4972      	ldr	r1, [pc, #456]	; (a4890 <Cl_Rinse_SendRinseStateData+0x29c>)
   a46c8:	4798      	blx	r3
   a46ca:	4603      	mov	r3, r0
   a46cc:	623b      	str	r3, [r7, #32]
			avgcond = avgcond + conductivity_CS3;
   a46ce:	4b75      	ldr	r3, [pc, #468]	; (a48a4 <Cl_Rinse_SendRinseStateData+0x2b0>)
   a46d0:	6978      	ldr	r0, [r7, #20]
   a46d2:	69b9      	ldr	r1, [r7, #24]
   a46d4:	4798      	blx	r3
   a46d6:	4603      	mov	r3, r0
   a46d8:	617b      	str	r3, [r7, #20]
			
			if (count % 20)
   a46da:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   a46de:	4b72      	ldr	r3, [pc, #456]	; (a48a8 <Cl_Rinse_SendRinseStateData+0x2b4>)
   a46e0:	fba3 1302 	umull	r1, r3, r3, r2
   a46e4:	0919      	lsrs	r1, r3, #4
   a46e6:	460b      	mov	r3, r1
   a46e8:	009b      	lsls	r3, r3, #2
   a46ea:	440b      	add	r3, r1
   a46ec:	009b      	lsls	r3, r3, #2
   a46ee:	1ad3      	subs	r3, r2, r3
   a46f0:	b2db      	uxtb	r3, r3
   a46f2:	2b00      	cmp	r3, #0
   a46f4:	d007      	beq.n	a4706 <Cl_Rinse_SendRinseStateData+0x112>
			{
				avgcond = avgcond/20;
   a46f6:	4b65      	ldr	r3, [pc, #404]	; (a488c <Cl_Rinse_SendRinseStateData+0x298>)
   a46f8:	6978      	ldr	r0, [r7, #20]
   a46fa:	496c      	ldr	r1, [pc, #432]	; (a48ac <Cl_Rinse_SendRinseStateData+0x2b8>)
   a46fc:	4798      	blx	r3
   a46fe:	4603      	mov	r3, r0
   a4700:	617b      	str	r3, [r7, #20]
				
				avg_conductivity = avgcond;
   a4702:	697b      	ldr	r3, [r7, #20]
   a4704:	623b      	str	r3, [r7, #32]

			}
			if (avg_conductivity >0)
   a4706:	4b6a      	ldr	r3, [pc, #424]	; (a48b0 <Cl_Rinse_SendRinseStateData+0x2bc>)
   a4708:	6a38      	ldr	r0, [r7, #32]
   a470a:	f04f 0100 	mov.w	r1, #0
   a470e:	4798      	blx	r3
   a4710:	4603      	mov	r3, r0
   a4712:	2b00      	cmp	r3, #0
   a4714:	d031      	beq.n	a477a <Cl_Rinse_SendRinseStateData+0x186>
			{
				data.fourbytedata = avg_conductivity;
   a4716:	4b67      	ldr	r3, [pc, #412]	; (a48b4 <Cl_Rinse_SendRinseStateData+0x2c0>)
   a4718:	6a38      	ldr	r0, [r7, #32]
   a471a:	4798      	blx	r3
   a471c:	4603      	mov	r3, r0
   a471e:	613b      	str	r3, [r7, #16]
				dataarray[count++] = data.bytedata[0];
   a4720:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   a4724:	1c5a      	adds	r2, r3, #1
   a4726:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   a472a:	7c3a      	ldrb	r2, [r7, #16]
   a472c:	f107 0128 	add.w	r1, r7, #40	; 0x28
   a4730:	440b      	add	r3, r1
   a4732:	f803 2c28 	strb.w	r2, [r3, #-40]
				dataarray[count++] = data.bytedata[1];
   a4736:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   a473a:	1c5a      	adds	r2, r3, #1
   a473c:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   a4740:	7c7a      	ldrb	r2, [r7, #17]
   a4742:	f107 0128 	add.w	r1, r7, #40	; 0x28
   a4746:	440b      	add	r3, r1
   a4748:	f803 2c28 	strb.w	r2, [r3, #-40]
				dataarray[count++] = data.bytedata[2];
   a474c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   a4750:	1c5a      	adds	r2, r3, #1
   a4752:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   a4756:	7cba      	ldrb	r2, [r7, #18]
   a4758:	f107 0128 	add.w	r1, r7, #40	; 0x28
   a475c:	440b      	add	r3, r1
   a475e:	f803 2c28 	strb.w	r2, [r3, #-40]
				dataarray[count++] = data.bytedata[3];
   a4762:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   a4766:	1c5a      	adds	r2, r3, #1
   a4768:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   a476c:	7cfa      	ldrb	r2, [r7, #19]
   a476e:	f107 0128 	add.w	r1, r7, #40	; 0x28
   a4772:	440b      	add	r3, r1
   a4774:	f803 2c28 	strb.w	r2, [r3, #-40]
   a4778:	e02d      	b.n	a47d6 <Cl_Rinse_SendRinseStateData+0x1e2>
				}
			else
			{
				data.fourbytedata = 0;
   a477a:	2300      	movs	r3, #0
   a477c:	613b      	str	r3, [r7, #16]
				dataarray[count++] = data.bytedata[0];
   a477e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   a4782:	1c5a      	adds	r2, r3, #1
   a4784:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   a4788:	7c3a      	ldrb	r2, [r7, #16]
   a478a:	f107 0128 	add.w	r1, r7, #40	; 0x28
   a478e:	440b      	add	r3, r1
   a4790:	f803 2c28 	strb.w	r2, [r3, #-40]
				dataarray[count++] = data.bytedata[1];
   a4794:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   a4798:	1c5a      	adds	r2, r3, #1
   a479a:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   a479e:	7c7a      	ldrb	r2, [r7, #17]
   a47a0:	f107 0128 	add.w	r1, r7, #40	; 0x28
   a47a4:	440b      	add	r3, r1
   a47a6:	f803 2c28 	strb.w	r2, [r3, #-40]
				dataarray[count++] = data.bytedata[2];
   a47aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   a47ae:	1c5a      	adds	r2, r3, #1
   a47b0:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   a47b4:	7cba      	ldrb	r2, [r7, #18]
   a47b6:	f107 0128 	add.w	r1, r7, #40	; 0x28
   a47ba:	440b      	add	r3, r1
   a47bc:	f803 2c28 	strb.w	r2, [r3, #-40]
				dataarray[count++] = data.bytedata[3];
   a47c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   a47c4:	1c5a      	adds	r2, r3, #1
   a47c6:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   a47ca:	7cfa      	ldrb	r2, [r7, #19]
   a47cc:	f107 0128 	add.w	r1, r7, #40	; 0x28
   a47d0:	440b      	add	r3, r1
   a47d2:	f803 2c28 	strb.w	r2, [r3, #-40]
			}
			
		}
			Cl_SysStat_GetSensor_Status_Query(SENSOR_TEMP3STATUS,&sensordata);
   a47d6:	f107 030c 	add.w	r3, r7, #12
   a47da:	2014      	movs	r0, #20
   a47dc:	4619      	mov	r1, r3
   a47de:	4b29      	ldr	r3, [pc, #164]	; (a4884 <Cl_Rinse_SendRinseStateData+0x290>)
   a47e0:	4798      	blx	r3
			{
				float ftemp,ftemp1,temp1;
				tmp3 = sensordata /10;
   a47e2:	89bb      	ldrh	r3, [r7, #12]
   a47e4:	4a30      	ldr	r2, [pc, #192]	; (a48a8 <Cl_Rinse_SendRinseStateData+0x2b4>)
   a47e6:	fba2 2303 	umull	r2, r3, r2, r3
   a47ea:	08db      	lsrs	r3, r3, #3
   a47ec:	b29b      	uxth	r3, r3
   a47ee:	461a      	mov	r2, r3
   a47f0:	4b31      	ldr	r3, [pc, #196]	; (a48b8 <Cl_Rinse_SendRinseStateData+0x2c4>)
   a47f2:	4610      	mov	r0, r2
   a47f4:	4798      	blx	r3
   a47f6:	4602      	mov	r2, r0
   a47f8:	4b26      	ldr	r3, [pc, #152]	; (a4894 <Cl_Rinse_SendRinseStateData+0x2a0>)
   a47fa:	601a      	str	r2, [r3, #0]
				data.fourbytedata = (uint16_t)(tmp3 );
   a47fc:	4b25      	ldr	r3, [pc, #148]	; (a4894 <Cl_Rinse_SendRinseStateData+0x2a0>)
   a47fe:	681a      	ldr	r2, [r3, #0]
   a4800:	4b2c      	ldr	r3, [pc, #176]	; (a48b4 <Cl_Rinse_SendRinseStateData+0x2c0>)
   a4802:	4610      	mov	r0, r2
   a4804:	4798      	blx	r3
   a4806:	4603      	mov	r3, r0
   a4808:	b29b      	uxth	r3, r3
   a480a:	613b      	str	r3, [r7, #16]
				dataarray[count++] = data.bytedata[0];
   a480c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   a4810:	1c5a      	adds	r2, r3, #1
   a4812:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   a4816:	7c3a      	ldrb	r2, [r7, #16]
   a4818:	f107 0128 	add.w	r1, r7, #40	; 0x28
   a481c:	440b      	add	r3, r1
   a481e:	f803 2c28 	strb.w	r2, [r3, #-40]
				dataarray[count++] = data.bytedata[1];
   a4822:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   a4826:	1c5a      	adds	r2, r3, #1
   a4828:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   a482c:	7c7a      	ldrb	r2, [r7, #17]
   a482e:	f107 0128 	add.w	r1, r7, #40	; 0x28
   a4832:	440b      	add	r3, r1
   a4834:	f803 2c28 	strb.w	r2, [r3, #-40]
				dataarray[count++] = data.bytedata[2];
   a4838:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   a483c:	1c5a      	adds	r2, r3, #1
   a483e:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   a4842:	7cba      	ldrb	r2, [r7, #18]
   a4844:	f107 0128 	add.w	r1, r7, #40	; 0x28
   a4848:	440b      	add	r3, r1
   a484a:	f803 2c28 	strb.w	r2, [r3, #-40]
				dataarray[count++] = data.bytedata[3];
   a484e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   a4852:	1c5a      	adds	r2, r3, #1
   a4854:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
   a4858:	7cfa      	ldrb	r2, [r7, #19]
   a485a:	f107 0128 	add.w	r1, r7, #40	; 0x28
   a485e:	440b      	add	r3, r1
   a4860:	f803 2c28 	strb.w	r2, [r3, #-40]
			}
		
		Cl_rinseretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&dataarray,count);
   a4864:	463a      	mov	r2, r7
   a4866:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   a486a:	202a      	movs	r0, #42	; 0x2a
   a486c:	4611      	mov	r1, r2
   a486e:	461a      	mov	r2, r3
   a4870:	4b12      	ldr	r3, [pc, #72]	; (a48bc <Cl_Rinse_SendRinseStateData+0x2c8>)
   a4872:	4798      	blx	r3
   a4874:	4603      	mov	r3, r0
   a4876:	77fb      	strb	r3, [r7, #31]
		

}
   a4878:	4618      	mov	r0, r3
   a487a:	3728      	adds	r7, #40	; 0x28
   a487c:	46bd      	mov	sp, r7
   a487e:	bd80      	pop	{r7, pc}
   a4880:	20071cc4 	.word	0x20071cc4
   a4884:	0008e7f9 	.word	0x0008e7f9
   a4888:	000a68a9 	.word	0x000a68a9
   a488c:	000a6ac1 	.word	0x000a6ac1
   a4890:	41200000 	.word	0x41200000
   a4894:	20071cc8 	.word	0x20071cc8
   a4898:	00093221 	.word	0x00093221
   a489c:	000a6959 	.word	0x000a6959
   a48a0:	41100000 	.word	0x41100000
   a48a4:	000a6749 	.word	0x000a6749
   a48a8:	cccccccd 	.word	0xcccccccd
   a48ac:	41a00000 	.word	0x41a00000
   a48b0:	000a6cd1 	.word	0x000a6cd1
   a48b4:	000a6d31 	.word	0x000a6d31
   a48b8:	000a68b1 	.word	0x000a68b1
   a48bc:	0009ba51 	.word	0x0009ba51

000a48c0 <Cl_Rinse_StartRinse>:
	

	
}
Cl_ReturnCodeType Cl_Rinse_StartRinse(void)
{
   a48c0:	b590      	push	{r4, r7, lr}
   a48c2:	b089      	sub	sp, #36	; 0x24
   a48c4:	af02      	add	r7, sp, #8
				Cl_ReturnCodeType Cl_rinseretcode = CL_OK;
   a48c6:	2300      	movs	r3, #0
   a48c8:	75bb      	strb	r3, [r7, #22]
				Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a48ca:	2351      	movs	r3, #81	; 0x51
   a48cc:	757b      	strb	r3, [r7, #21]
				Cl_Uint8Type dataarray[4] = {0,0,0,0};
   a48ce:	2300      	movs	r3, #0
   a48d0:	723b      	strb	r3, [r7, #8]
   a48d2:	2300      	movs	r3, #0
   a48d4:	727b      	strb	r3, [r7, #9]
   a48d6:	2300      	movs	r3, #0
   a48d8:	72bb      	strb	r3, [r7, #10]
   a48da:	2300      	movs	r3, #0
   a48dc:	72fb      	strb	r3, [r7, #11]
				
				Cl_Uint8Type data = 0;
   a48de:	2300      	movs	r3, #0
   a48e0:	753b      	strb	r3, [r7, #20]
				Cl_Uint16Type cl_rinse_acidstatus = 0, cl_rinse_bicarbstatus =0 , cl_rinse_holder1status = 0 , cl_rinse_holder2status = 0;
   a48e2:	2300      	movs	r3, #0
   a48e4:	80fb      	strh	r3, [r7, #6]
   a48e6:	2300      	movs	r3, #0
   a48e8:	80bb      	strh	r3, [r7, #4]
   a48ea:	2300      	movs	r3, #0
   a48ec:	807b      	strh	r3, [r7, #2]
   a48ee:	2300      	movs	r3, #0
   a48f0:	803b      	strh	r3, [r7, #0]
				Cl_BoolType Cl_Rinsereaduinessflag = true;
   a48f2:	2301      	movs	r3, #1
   a48f4:	75fb      	strb	r3, [r7, #23]
					
				//Check for  rinse readiness and alarm status
				
				//Cl_checkRinseReadyness();

Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,false );
   a48f6:	200d      	movs	r0, #13
   a48f8:	2100      	movs	r1, #0
   a48fa:	4b29      	ldr	r3, [pc, #164]	; (a49a0 <Cl_Rinse_StartRinse+0xe0>)
   a48fc:	4798      	blx	r3
   a48fe:	4603      	mov	r3, r0
   a4900:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_NO_FLOW,false );					
   a4902:	200c      	movs	r0, #12
   a4904:	2100      	movs	r1, #0
   a4906:	4b26      	ldr	r3, [pc, #152]	; (a49a0 <Cl_Rinse_StartRinse+0xe0>)
   a4908:	4798      	blx	r3
   a490a:	4603      	mov	r3, r0
   a490c:	75bb      	strb	r3, [r7, #22]
 					Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,false );
   a490e:	200d      	movs	r0, #13
   a4910:	2100      	movs	r1, #0
   a4912:	4b23      	ldr	r3, [pc, #140]	; (a49a0 <Cl_Rinse_StartRinse+0xe0>)
   a4914:	4798      	blx	r3
   a4916:	4603      	mov	r3, r0
   a4918:	75bb      	strb	r3, [r7, #22]


				SetHeaterState(CL_HEATER_STATE_OFF);
   a491a:	2004      	movs	r0, #4
   a491c:	4b21      	ldr	r3, [pc, #132]	; (a49a4 <Cl_Rinse_StartRinse+0xe4>)
   a491e:	4798      	blx	r3
				cl_flow_switchcontroller(FLOW_SWITCH_CNTRLER_EVENT_START);
   a4920:	2001      	movs	r0, #1
   a4922:	4b21      	ldr	r3, [pc, #132]	; (a49a8 <Cl_Rinse_StartRinse+0xe8>)
   a4924:	4798      	blx	r3
				
				Cl_SysStat_GetSensor_Status_Query(SENSOR_ACID_INLET,&cl_rinse_acidstatus);
   a4926:	1dbb      	adds	r3, r7, #6
   a4928:	2020      	movs	r0, #32
   a492a:	4619      	mov	r1, r3
   a492c:	4b1f      	ldr	r3, [pc, #124]	; (a49ac <Cl_Rinse_StartRinse+0xec>)
   a492e:	4798      	blx	r3
				Cl_SysStat_GetSensor_Status_Query(SENSOR_BICARB_INLET,&cl_rinse_bicarbstatus);
   a4930:	1d3b      	adds	r3, r7, #4
   a4932:	2021      	movs	r0, #33	; 0x21
   a4934:	4619      	mov	r1, r3
   a4936:	4b1d      	ldr	r3, [pc, #116]	; (a49ac <Cl_Rinse_StartRinse+0xec>)
   a4938:	4798      	blx	r3
				Cl_SysStat_GetSensor_Status_Query(SENSOR_HOLDER1STATUS,&cl_rinse_holder1status);
   a493a:	1cbb      	adds	r3, r7, #2
   a493c:	2003      	movs	r0, #3
   a493e:	4619      	mov	r1, r3
   a4940:	4b1a      	ldr	r3, [pc, #104]	; (a49ac <Cl_Rinse_StartRinse+0xec>)
   a4942:	4798      	blx	r3
				Cl_SysStat_GetSensor_Status_Query(SENSOR_HOLDER2STATUS,&cl_rinse_holder2status);
   a4944:	463b      	mov	r3, r7
   a4946:	2004      	movs	r0, #4
   a4948:	4619      	mov	r1, r3
   a494a:	4b18      	ldr	r3, [pc, #96]	; (a49ac <Cl_Rinse_StartRinse+0xec>)
   a494c:	4798      	blx	r3
				
				//DD_CAN_WRITE_HEMO(HEMO_START_BD_CALIBRATION, 0);
				
				// below commented for tuv testing holder alarms were present even after hoolders were connected
				 if(cl_rinse_acidstatus == ACID_INLET_OPEN )
   a494e:	88fb      	ldrh	r3, [r7, #6]
   a4950:	2b00      	cmp	r3, #0
   a4952:	d104      	bne.n	a495e <Cl_Rinse_StartRinse+0x9e>
				 {
					 Cl_RinseSendAlarm(ACID_IN_OPEN);
   a4954:	2029      	movs	r0, #41	; 0x29
   a4956:	4b16      	ldr	r3, [pc, #88]	; (a49b0 <Cl_Rinse_StartRinse+0xf0>)
   a4958:	4798      	blx	r3
					 Cl_Rinsereaduinessflag = false;
   a495a:	2300      	movs	r3, #0
   a495c:	75fb      	strb	r3, [r7, #23]
				 }
				 if(cl_rinse_bicarbstatus == BICARB_INLET_OPEN )
   a495e:	88bb      	ldrh	r3, [r7, #4]
   a4960:	2b00      	cmp	r3, #0
   a4962:	d104      	bne.n	a496e <Cl_Rinse_StartRinse+0xae>
				 {
					  Cl_RinseSendAlarm(BICARB_IN_OPEN);
   a4964:	202b      	movs	r0, #43	; 0x2b
   a4966:	4b12      	ldr	r3, [pc, #72]	; (a49b0 <Cl_Rinse_StartRinse+0xf0>)
   a4968:	4798      	blx	r3
					 Cl_Rinsereaduinessflag = false;
   a496a:	2300      	movs	r3, #0
   a496c:	75fb      	strb	r3, [r7, #23]
				 }	
				 if(cl_rinse_holder1status == CL_HOLDER1OPEN )  //CL_HOLDER1OPEN
   a496e:	887b      	ldrh	r3, [r7, #2]
   a4970:	2b01      	cmp	r3, #1
   a4972:	d104      	bne.n	a497e <Cl_Rinse_StartRinse+0xbe>
				 {
					 Cl_RinseSendAlarm(HOLDER1STATUS_OPEN);
   a4974:	2003      	movs	r0, #3
   a4976:	4b0e      	ldr	r3, [pc, #56]	; (a49b0 <Cl_Rinse_StartRinse+0xf0>)
   a4978:	4798      	blx	r3
					 Cl_Rinsereaduinessflag = false;
   a497a:	2300      	movs	r3, #0
   a497c:	75fb      	strb	r3, [r7, #23]
				 }
				 if(cl_rinse_holder2status == CL_HOLDER2OPEN )// CL_HOLDER1OPEN
   a497e:	883b      	ldrh	r3, [r7, #0]
   a4980:	2b01      	cmp	r3, #1
   a4982:	d104      	bne.n	a498e <Cl_Rinse_StartRinse+0xce>
				 {
					 Cl_RinseSendAlarm(HOLDER2STATUS_OPEN);
   a4984:	2004      	movs	r0, #4
   a4986:	4b0a      	ldr	r3, [pc, #40]	; (a49b0 <Cl_Rinse_StartRinse+0xf0>)
   a4988:	4798      	blx	r3
					 Cl_Rinsereaduinessflag = false;
   a498a:	2300      	movs	r3, #0
   a498c:	75fb      	strb	r3, [r7, #23]
				 }				 
				 if(Cl_Rinsereaduinessflag == false)
   a498e:	7dfb      	ldrb	r3, [r7, #23]
   a4990:	f083 0301 	eor.w	r3, r3, #1
   a4994:	b2db      	uxtb	r3, r3
   a4996:	2b00      	cmp	r3, #0
   a4998:	d00c      	beq.n	a49b4 <Cl_Rinse_StartRinse+0xf4>
				 {
					 return CL_REJECTED;
   a499a:	2303      	movs	r3, #3
   a499c:	e1d6      	b.n	a4d4c <Cl_Rinse_StartRinse+0x48c>
   a499e:	bf00      	nop
   a49a0:	00082e61 	.word	0x00082e61
   a49a4:	000894d9 	.word	0x000894d9
   a49a8:	00093815 	.word	0x00093815
   a49ac:	0008e7f9 	.word	0x0008e7f9
   a49b0:	000a4505 	.word	0x000a4505
				 }
				 
				sv_cntrl_resetgreenalarm();
   a49b4:	4bb6      	ldr	r3, [pc, #728]	; (a4c90 <Cl_Rinse_StartRinse+0x3d0>)
   a49b6:	4798      	blx	r3
// 				sv_cntrl_resetyellowalarm();
// 				sv_cntrl_resetredalarm();
 				sv_cntrl_nobuzzer();
   a49b8:	4bb6      	ldr	r3, [pc, #728]	; (a4c94 <Cl_Rinse_StartRinse+0x3d4>)
   a49ba:	4798      	blx	r3
// 				

	sv_cntrl_resetredalarm();
   a49bc:	4bb6      	ldr	r3, [pc, #728]	; (a4c98 <Cl_Rinse_StartRinse+0x3d8>)
   a49be:	4798      	blx	r3
//	sv_cntrl_setgreenalarm();
				Cl_RinseFlowOn();
   a49c0:	4bb6      	ldr	r3, [pc, #728]	; (a4c9c <Cl_Rinse_StartRinse+0x3dc>)
   a49c2:	4798      	blx	r3
				//sv_prop_startpropeo_aligning();
				sv_cntrl_activate_valve(VALVE_ID2);
   a49c4:	2002      	movs	r0, #2
   a49c6:	4bb6      	ldr	r3, [pc, #728]	; (a4ca0 <Cl_Rinse_StartRinse+0x3e0>)
   a49c8:	4798      	blx	r3
				sv_cntrl_activate_valve(VALVE_ID3);
   a49ca:	2003      	movs	r0, #3
   a49cc:	4bb4      	ldr	r3, [pc, #720]	; (a4ca0 <Cl_Rinse_StartRinse+0x3e0>)
   a49ce:	4798      	blx	r3
				//	Cl_rinseretcode = sv_cntrl_setflowpath(BC_FLUSH_OPEN); // sanjeer BC_NEW
				
				Cl_rinseretcode = sv_cntrl_setpumpspeed(DCMOTOR2,1000);   // 900
   a49d0:	2002      	movs	r0, #2
   a49d2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   a49d6:	4bb3      	ldr	r3, [pc, #716]	; (a4ca4 <Cl_Rinse_StartRinse+0x3e4>)
   a49d8:	4798      	blx	r3
   a49da:	4603      	mov	r3, r0
   a49dc:	75bb      	strb	r3, [r7, #22]
				Cl_rinseretcode = sv_cntrl_setpumpspeed(DCMOTOR1,1100);
   a49de:	2001      	movs	r0, #1
   a49e0:	f240 414c 	movw	r1, #1100	; 0x44c
   a49e4:	4baf      	ldr	r3, [pc, #700]	; (a4ca4 <Cl_Rinse_StartRinse+0x3e4>)
   a49e6:	4798      	blx	r3
   a49e8:	4603      	mov	r3, r0
   a49ea:	75bb      	strb	r3, [r7, #22]
				Cl_rinseretcode =  sv_cntrl_activatepump(DCMOTOR1);
   a49ec:	2001      	movs	r0, #1
   a49ee:	4bae      	ldr	r3, [pc, #696]	; (a4ca8 <Cl_Rinse_StartRinse+0x3e8>)
   a49f0:	4798      	blx	r3
   a49f2:	4603      	mov	r3, r0
   a49f4:	75bb      	strb	r3, [r7, #22]
				Cl_rinseretcode =  sv_cntrl_activatepump(DCMOTOR2);
   a49f6:	2002      	movs	r0, #2
   a49f8:	4bab      	ldr	r3, [pc, #684]	; (a4ca8 <Cl_Rinse_StartRinse+0x3e8>)
   a49fa:	4798      	blx	r3
   a49fc:	4603      	mov	r3, r0
   a49fe:	75bb      	strb	r3, [r7, #22]

				Cl_Uint16Type potvalue = 0;
   a4a00:	2300      	movs	r3, #0
   a4a02:	827b      	strh	r3, [r7, #18]
				potvalue = (900* 1024)/10000;                                 // 600
   a4a04:	235c      	movs	r3, #92	; 0x5c
   a4a06:	827b      	strh	r3, [r7, #18]
				sv_cs_setpotvalue(potvalue);
   a4a08:	8a7b      	ldrh	r3, [r7, #18]
   a4a0a:	4618      	mov	r0, r3
   a4a0c:	4ba7      	ldr	r3, [pc, #668]	; (a4cac <Cl_Rinse_StartRinse+0x3ec>)
   a4a0e:	4798      	blx	r3
				
				Cl_Uint32Type temp = Treatdata[ID_dflow];
   a4a10:	4ba7      	ldr	r3, [pc, #668]	; (a4cb0 <Cl_Rinse_StartRinse+0x3f0>)
   a4a12:	695b      	ldr	r3, [r3, #20]
   a4a14:	60fb      	str	r3, [r7, #12]
				flow_rate = temp;
   a4a16:	4aa7      	ldr	r2, [pc, #668]	; (a4cb4 <Cl_Rinse_StartRinse+0x3f4>)
   a4a18:	68fb      	ldr	r3, [r7, #12]
   a4a1a:	6013      	str	r3, [r2, #0]
				
				cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,16000);
   a4a1c:	2001      	movs	r0, #1
   a4a1e:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
   a4a22:	4ba5      	ldr	r3, [pc, #660]	; (a4cb8 <Cl_Rinse_StartRinse+0x3f8>)
   a4a24:	4798      	blx	r3
					cl_wait(100);
   a4a26:	2064      	movs	r0, #100	; 0x64
   a4a28:	4ba4      	ldr	r3, [pc, #656]	; (a4cbc <Cl_Rinse_StartRinse+0x3fc>)
   a4a2a:	4798      	blx	r3
					cl_uf_controller(CL_UF_EVENT_START,0);
   a4a2c:	2002      	movs	r0, #2
   a4a2e:	2100      	movs	r1, #0
   a4a30:	4ba1      	ldr	r3, [pc, #644]	; (a4cb8 <Cl_Rinse_StartRinse+0x3f8>)
   a4a32:	4798      	blx	r3
					cl_ufpumpFeedback_start();
   a4a34:	4ba2      	ldr	r3, [pc, #648]	; (a4cc0 <Cl_Rinse_StartRinse+0x400>)
   a4a36:	4798      	blx	r3
					cl_wait(100);
   a4a38:	2064      	movs	r0, #100	; 0x64
   a4a3a:	4ba0      	ldr	r3, [pc, #640]	; (a4cbc <Cl_Rinse_StartRinse+0x3fc>)
   a4a3c:	4798      	blx	r3
					cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,12000);
   a4a3e:	2001      	movs	r0, #1
   a4a40:	f642 61e0 	movw	r1, #12000	; 0x2ee0
   a4a44:	4b9c      	ldr	r3, [pc, #624]	; (a4cb8 <Cl_Rinse_StartRinse+0x3f8>)
   a4a46:	4798      	blx	r3
					cl_wait(100);
   a4a48:	2064      	movs	r0, #100	; 0x64
   a4a4a:	4b9c      	ldr	r3, [pc, #624]	; (a4cbc <Cl_Rinse_StartRinse+0x3fc>)
   a4a4c:	4798      	blx	r3
					cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,8000);
   a4a4e:	2001      	movs	r0, #1
   a4a50:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
   a4a54:	4b98      	ldr	r3, [pc, #608]	; (a4cb8 <Cl_Rinse_StartRinse+0x3f8>)
   a4a56:	4798      	blx	r3
					cl_wait(100);
   a4a58:	2064      	movs	r0, #100	; 0x64
   a4a5a:	4b98      	ldr	r3, [pc, #608]	; (a4cbc <Cl_Rinse_StartRinse+0x3fc>)
   a4a5c:	4798      	blx	r3
					cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,6000);
   a4a5e:	2001      	movs	r0, #1
   a4a60:	f241 7170 	movw	r1, #6000	; 0x1770
   a4a64:	4b94      	ldr	r3, [pc, #592]	; (a4cb8 <Cl_Rinse_StartRinse+0x3f8>)
   a4a66:	4798      	blx	r3
					cl_wait(100);
   a4a68:	2064      	movs	r0, #100	; 0x64
   a4a6a:	4b94      	ldr	r3, [pc, #592]	; (a4cbc <Cl_Rinse_StartRinse+0x3fc>)
   a4a6c:	4798      	blx	r3
					cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,2000);
   a4a6e:	2001      	movs	r0, #1
   a4a70:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   a4a74:	4b90      	ldr	r3, [pc, #576]	; (a4cb8 <Cl_Rinse_StartRinse+0x3f8>)
   a4a76:	4798      	blx	r3
					cl_wait(100);
   a4a78:	2064      	movs	r0, #100	; 0x64
   a4a7a:	4b90      	ldr	r3, [pc, #576]	; (a4cbc <Cl_Rinse_StartRinse+0x3fc>)
   a4a7c:	4798      	blx	r3
					cl_uf_controller(CL_UF_EVENT_SET_UF_RATE,500);
   a4a7e:	2001      	movs	r0, #1
   a4a80:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   a4a84:	4b8c      	ldr	r3, [pc, #560]	; (a4cb8 <Cl_Rinse_StartRinse+0x3f8>)
   a4a86:	4798      	blx	r3
// 				cl_wait(100);
// 				sv_cntrl_setpumpspeed(UFPUMP,150);
// 				cl_wait(100);
// 				
				
				Cl_rinseretcode =  cl_deaeration_controller(CL_DEAER_EVENT_ACTIVATE);
   a4a88:	2000      	movs	r0, #0
   a4a8a:	4b8e      	ldr	r3, [pc, #568]	; (a4cc4 <Cl_Rinse_StartRinse+0x404>)
   a4a8c:	4798      	blx	r3
   a4a8e:	4603      	mov	r3, r0
   a4a90:	75bb      	strb	r3, [r7, #22]
				
				Cl_rinseretcode = Cl_bc_controller(BC_EVENT_START);
   a4a92:	2004      	movs	r0, #4
   a4a94:	4b8c      	ldr	r3, [pc, #560]	; (a4cc8 <Cl_Rinse_StartRinse+0x408>)
   a4a96:	4798      	blx	r3
   a4a98:	4603      	mov	r3, r0
   a4a9a:	75bb      	strb	r3, [r7, #22]
		
				sv_prop_startopenfill(); 
   a4a9c:	4b8b      	ldr	r3, [pc, #556]	; (a4ccc <Cl_Rinse_StartRinse+0x40c>)
   a4a9e:	4798      	blx	r3
							//	sv_cntrl_deactivatepump(DCMOTOR1 );
							//	sv_cntrl_deactivatepump(DCMOTOR2 );
				if(Cl_rinseretcode == CL_OK)
   a4aa0:	7dbb      	ldrb	r3, [r7, #22]
   a4aa2:	2b00      	cmp	r3, #0
   a4aa4:	f040 8151 	bne.w	a4d4a <Cl_Rinse_StartRinse+0x48a>
				{
					

					//Reset the  OPENFILL time count
					Cl_RinseMinutescounter = 0;
   a4aa8:	4b89      	ldr	r3, [pc, #548]	; (a4cd0 <Cl_Rinse_StartRinse+0x410>)
   a4aaa:	2200      	movs	r2, #0
   a4aac:	601a      	str	r2, [r3, #0]
					Cl_RinseTotalMinutescounter = 0;
   a4aae:	4b89      	ldr	r3, [pc, #548]	; (a4cd4 <Cl_Rinse_StartRinse+0x414>)
   a4ab0:	2200      	movs	r2, #0
   a4ab2:	601a      	str	r2, [r3, #0]
					Cl_RinseOpenFillTimeOut = false;
   a4ab4:	4b88      	ldr	r3, [pc, #544]	; (a4cd8 <Cl_Rinse_StartRinse+0x418>)
   a4ab6:	2200      	movs	r2, #0
   a4ab8:	701a      	strb	r2, [r3, #0]

					

					sv_cntrl_activatevenousclamp();
   a4aba:	4b88      	ldr	r3, [pc, #544]	; (a4cdc <Cl_Rinse_StartRinse+0x41c>)
   a4abc:	4798      	blx	r3
					Cl_rinseretcode =  cl_flow_switchcontroller(FLOW_SWITCH_CNTRLER_EVENT_START);
   a4abe:	2001      	movs	r0, #1
   a4ac0:	4b87      	ldr	r3, [pc, #540]	; (a4ce0 <Cl_Rinse_StartRinse+0x420>)
   a4ac2:	4798      	blx	r3
   a4ac4:	4603      	mov	r3, r0
   a4ac6:	75bb      	strb	r3, [r7, #22]
					//Cl_Rinse_ResetAlertsforReassertion();
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(BLOODDOOR_STATUS_OPEN,LOGIC_HIGH,0,0,0);	
   a4ac8:	2300      	movs	r3, #0
   a4aca:	9300      	str	r3, [sp, #0]
   a4acc:	2001      	movs	r0, #1
   a4ace:	2101      	movs	r1, #1
   a4ad0:	f04f 0200 	mov.w	r2, #0
   a4ad4:	f04f 0300 	mov.w	r3, #0
   a4ad8:	4c82      	ldr	r4, [pc, #520]	; (a4ce4 <Cl_Rinse_StartRinse+0x424>)
   a4ada:	47a0      	blx	r4
   a4adc:	4603      	mov	r3, r0
   a4ade:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(ACID_IN_OPEN,LOGIC_LOW,0,0,0);	
   a4ae0:	2300      	movs	r3, #0
   a4ae2:	9300      	str	r3, [sp, #0]
   a4ae4:	2029      	movs	r0, #41	; 0x29
   a4ae6:	2100      	movs	r1, #0
   a4ae8:	f04f 0200 	mov.w	r2, #0
   a4aec:	f04f 0300 	mov.w	r3, #0
   a4af0:	4c7c      	ldr	r4, [pc, #496]	; (a4ce4 <Cl_Rinse_StartRinse+0x424>)
   a4af2:	47a0      	blx	r4
   a4af4:	4603      	mov	r3, r0
   a4af6:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(BICARB_IN_OPEN,LOGIC_LOW,0,0,0);			
   a4af8:	2300      	movs	r3, #0
   a4afa:	9300      	str	r3, [sp, #0]
   a4afc:	202b      	movs	r0, #43	; 0x2b
   a4afe:	2100      	movs	r1, #0
   a4b00:	f04f 0200 	mov.w	r2, #0
   a4b04:	f04f 0300 	mov.w	r3, #0
   a4b08:	4c76      	ldr	r4, [pc, #472]	; (a4ce4 <Cl_Rinse_StartRinse+0x424>)
   a4b0a:	47a0      	blx	r4
   a4b0c:	4603      	mov	r3, r0
   a4b0e:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(HOLDER1STATUS_OPEN,LOGIC_HIGH,0,0,0);
   a4b10:	2300      	movs	r3, #0
   a4b12:	9300      	str	r3, [sp, #0]
   a4b14:	2003      	movs	r0, #3
   a4b16:	2101      	movs	r1, #1
   a4b18:	f04f 0200 	mov.w	r2, #0
   a4b1c:	f04f 0300 	mov.w	r3, #0
   a4b20:	4c70      	ldr	r4, [pc, #448]	; (a4ce4 <Cl_Rinse_StartRinse+0x424>)
   a4b22:	47a0      	blx	r4
   a4b24:	4603      	mov	r3, r0
   a4b26:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(HOLDER2STATUS_OPEN,LOGIC_HIGH,0,0,0);
   a4b28:	2300      	movs	r3, #0
   a4b2a:	9300      	str	r3, [sp, #0]
   a4b2c:	2004      	movs	r0, #4
   a4b2e:	2101      	movs	r1, #1
   a4b30:	f04f 0200 	mov.w	r2, #0
   a4b34:	f04f 0300 	mov.w	r3, #0
   a4b38:	4c6a      	ldr	r4, [pc, #424]	; (a4ce4 <Cl_Rinse_StartRinse+0x424>)
   a4b3a:	47a0      	blx	r4
   a4b3c:	4603      	mov	r3, r0
   a4b3e:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(LEVELSWITCH_OFF_TO_ON,LOGIC_LOW,0,0,0);
   a4b40:	2300      	movs	r3, #0
   a4b42:	9300      	str	r3, [sp, #0]
   a4b44:	203d      	movs	r0, #61	; 0x3d
   a4b46:	2100      	movs	r1, #0
   a4b48:	f04f 0200 	mov.w	r2, #0
   a4b4c:	f04f 0300 	mov.w	r3, #0
   a4b50:	4c64      	ldr	r4, [pc, #400]	; (a4ce4 <Cl_Rinse_StartRinse+0x424>)
   a4b52:	47a0      	blx	r4
   a4b54:	4603      	mov	r3, r0
   a4b56:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(LEVELSWITCH_ON_TO_OFF,LOGIC_HIGH,0,0,0);
   a4b58:	2300      	movs	r3, #0
   a4b5a:	9300      	str	r3, [sp, #0]
   a4b5c:	203e      	movs	r0, #62	; 0x3e
   a4b5e:	2101      	movs	r1, #1
   a4b60:	f04f 0200 	mov.w	r2, #0
   a4b64:	f04f 0300 	mov.w	r3, #0
   a4b68:	4c5e      	ldr	r4, [pc, #376]	; (a4ce4 <Cl_Rinse_StartRinse+0x424>)
   a4b6a:	47a0      	blx	r4
   a4b6c:	4603      	mov	r3, r0
   a4b6e:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(BC_ALARM,0,0,0,0);
   a4b70:	2300      	movs	r3, #0
   a4b72:	9300      	str	r3, [sp, #0]
   a4b74:	201a      	movs	r0, #26
   a4b76:	2100      	movs	r1, #0
   a4b78:	f04f 0200 	mov.w	r2, #0
   a4b7c:	f04f 0300 	mov.w	r3, #0
   a4b80:	4c58      	ldr	r4, [pc, #352]	; (a4ce4 <Cl_Rinse_StartRinse+0x424>)
   a4b82:	47a0      	blx	r4
   a4b84:	4603      	mov	r3, r0
   a4b86:	75bb      	strb	r3, [r7, #22]
					
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(POWER_FAILURE,LOGIC_HIGH,0,0,0);
   a4b88:	2300      	movs	r3, #0
   a4b8a:	9300      	str	r3, [sp, #0]
   a4b8c:	201d      	movs	r0, #29
   a4b8e:	2101      	movs	r1, #1
   a4b90:	f04f 0200 	mov.w	r2, #0
   a4b94:	f04f 0300 	mov.w	r3, #0
   a4b98:	4c52      	ldr	r4, [pc, #328]	; (a4ce4 <Cl_Rinse_StartRinse+0x424>)
   a4b9a:	47a0      	blx	r4
   a4b9c:	4603      	mov	r3, r0
   a4b9e:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(FLOW_LOW_FLOWRATE,0,0,0,0);
   a4ba0:	2300      	movs	r3, #0
   a4ba2:	9300      	str	r3, [sp, #0]
   a4ba4:	200d      	movs	r0, #13
   a4ba6:	2100      	movs	r1, #0
   a4ba8:	f04f 0200 	mov.w	r2, #0
   a4bac:	f04f 0300 	mov.w	r3, #0
   a4bb0:	4c4c      	ldr	r4, [pc, #304]	; (a4ce4 <Cl_Rinse_StartRinse+0x424>)
   a4bb2:	47a0      	blx	r4
   a4bb4:	4603      	mov	r3, r0
   a4bb6:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(FLOW_NO_FLOW,0,0,0,0);
   a4bb8:	2300      	movs	r3, #0
   a4bba:	9300      	str	r3, [sp, #0]
   a4bbc:	200c      	movs	r0, #12
   a4bbe:	2100      	movs	r1, #0
   a4bc0:	f04f 0200 	mov.w	r2, #0
   a4bc4:	f04f 0300 	mov.w	r3, #0
   a4bc8:	4c46      	ldr	r4, [pc, #280]	; (a4ce4 <Cl_Rinse_StartRinse+0x424>)
   a4bca:	47a0      	blx	r4
   a4bcc:	4603      	mov	r3, r0
   a4bce:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(FLOW_HIGH_FLOWRATE,0,1500,0,0);
   a4bd0:	2300      	movs	r3, #0
   a4bd2:	9300      	str	r3, [sp, #0]
   a4bd4:	200e      	movs	r0, #14
   a4bd6:	2100      	movs	r1, #0
   a4bd8:	4a43      	ldr	r2, [pc, #268]	; (a4ce8 <Cl_Rinse_StartRinse+0x428>)
   a4bda:	f04f 0300 	mov.w	r3, #0
   a4bde:	4c41      	ldr	r4, [pc, #260]	; (a4ce4 <Cl_Rinse_StartRinse+0x424>)
   a4be0:	47a0      	blx	r4
   a4be2:	4603      	mov	r3, r0
   a4be4:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(TEMP1_HIGH_THRESHOLD,0,450,150,0);
   a4be6:	2300      	movs	r3, #0
   a4be8:	9300      	str	r3, [sp, #0]
   a4bea:	200f      	movs	r0, #15
   a4bec:	2100      	movs	r1, #0
   a4bee:	4a3f      	ldr	r2, [pc, #252]	; (a4cec <Cl_Rinse_StartRinse+0x42c>)
   a4bf0:	4b3f      	ldr	r3, [pc, #252]	; (a4cf0 <Cl_Rinse_StartRinse+0x430>)
   a4bf2:	4c3c      	ldr	r4, [pc, #240]	; (a4ce4 <Cl_Rinse_StartRinse+0x424>)
   a4bf4:	47a0      	blx	r4
   a4bf6:	4603      	mov	r3, r0
   a4bf8:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(TEMP1_LOW_THRESHOLD,0,150,0,0);
   a4bfa:	2300      	movs	r3, #0
   a4bfc:	9300      	str	r3, [sp, #0]
   a4bfe:	2010      	movs	r0, #16
   a4c00:	2100      	movs	r1, #0
   a4c02:	4a3b      	ldr	r2, [pc, #236]	; (a4cf0 <Cl_Rinse_StartRinse+0x430>)
   a4c04:	f04f 0300 	mov.w	r3, #0
   a4c08:	4c36      	ldr	r4, [pc, #216]	; (a4ce4 <Cl_Rinse_StartRinse+0x424>)
   a4c0a:	47a0      	blx	r4
   a4c0c:	4603      	mov	r3, r0
   a4c0e:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(TEMP2_HIGH_THRESHOLD,0,850,150,0);
   a4c10:	2300      	movs	r3, #0
   a4c12:	9300      	str	r3, [sp, #0]
   a4c14:	2011      	movs	r0, #17
   a4c16:	2100      	movs	r1, #0
   a4c18:	4a36      	ldr	r2, [pc, #216]	; (a4cf4 <Cl_Rinse_StartRinse+0x434>)
   a4c1a:	4b35      	ldr	r3, [pc, #212]	; (a4cf0 <Cl_Rinse_StartRinse+0x430>)
   a4c1c:	4c31      	ldr	r4, [pc, #196]	; (a4ce4 <Cl_Rinse_StartRinse+0x424>)
   a4c1e:	47a0      	blx	r4
   a4c20:	4603      	mov	r3, r0
   a4c22:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmConfigureAlarmType(TEMP2_LOW_THRESHOLD,0,150,0,0);
   a4c24:	2300      	movs	r3, #0
   a4c26:	9300      	str	r3, [sp, #0]
   a4c28:	2012      	movs	r0, #18
   a4c2a:	2100      	movs	r1, #0
   a4c2c:	4a30      	ldr	r2, [pc, #192]	; (a4cf0 <Cl_Rinse_StartRinse+0x430>)
   a4c2e:	f04f 0300 	mov.w	r3, #0
   a4c32:	4c2c      	ldr	r4, [pc, #176]	; (a4ce4 <Cl_Rinse_StartRinse+0x424>)
   a4c34:	47a0      	blx	r4
   a4c36:	4603      	mov	r3, r0
   a4c38:	75bb      	strb	r3, [r7, #22]
					//Cl_rinseretcode =  Cl_AlarmActivateAlarms(BICARB_IN,true );
					//Cl_rinseretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,true);
					//Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_OPEN,true );
					//Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_OPEN,true );
				
				   Cl_rinseretcode =  Cl_AlarmActivateAlarms(POWER_FAILURE,true);
   a4c3a:	201d      	movs	r0, #29
   a4c3c:	2101      	movs	r1, #1
   a4c3e:	4b2e      	ldr	r3, [pc, #184]	; (a4cf8 <Cl_Rinse_StartRinse+0x438>)
   a4c40:	4798      	blx	r3
   a4c42:	4603      	mov	r3, r0
   a4c44:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON,true );
   a4c46:	203d      	movs	r0, #61	; 0x3d
   a4c48:	2101      	movs	r1, #1
   a4c4a:	4b2b      	ldr	r3, [pc, #172]	; (a4cf8 <Cl_Rinse_StartRinse+0x438>)
   a4c4c:	4798      	blx	r3
   a4c4e:	4603      	mov	r3, r0
   a4c50:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_ON_TO_OFF,true );					
   a4c52:	203e      	movs	r0, #62	; 0x3e
   a4c54:	2101      	movs	r1, #1
   a4c56:	4b28      	ldr	r3, [pc, #160]	; (a4cf8 <Cl_Rinse_StartRinse+0x438>)
   a4c58:	4798      	blx	r3
   a4c5a:	4603      	mov	r3, r0
   a4c5c:	75bb      	strb	r3, [r7, #22]
				//	Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,true );
// 					Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_NO_FLOW,true );					
// 					Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,true );
// 					Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_HIGH_FLOWRATE,true );
 					Cl_rinseretcode =  Cl_AlarmActivateAlarms(ACID_IN_OPEN,true );
   a4c5e:	2029      	movs	r0, #41	; 0x29
   a4c60:	2101      	movs	r1, #1
   a4c62:	4b25      	ldr	r3, [pc, #148]	; (a4cf8 <Cl_Rinse_StartRinse+0x438>)
   a4c64:	4798      	blx	r3
   a4c66:	4603      	mov	r3, r0
   a4c68:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(BICARB_IN_OPEN,true );
   a4c6a:	202b      	movs	r0, #43	; 0x2b
   a4c6c:	2101      	movs	r1, #1
   a4c6e:	4b22      	ldr	r3, [pc, #136]	; (a4cf8 <Cl_Rinse_StartRinse+0x438>)
   a4c70:	4798      	blx	r3
   a4c72:	4603      	mov	r3, r0
   a4c74:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_OPEN,true );
   a4c76:	2003      	movs	r0, #3
   a4c78:	2101      	movs	r1, #1
   a4c7a:	4b1f      	ldr	r3, [pc, #124]	; (a4cf8 <Cl_Rinse_StartRinse+0x438>)
   a4c7c:	4798      	blx	r3
   a4c7e:	4603      	mov	r3, r0
   a4c80:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_OPEN,true );
   a4c82:	2004      	movs	r0, #4
   a4c84:	2101      	movs	r1, #1
   a4c86:	4b1c      	ldr	r3, [pc, #112]	; (a4cf8 <Cl_Rinse_StartRinse+0x438>)
   a4c88:	4798      	blx	r3
   a4c8a:	4603      	mov	r3, r0
   a4c8c:	e036      	b.n	a4cfc <Cl_Rinse_StartRinse+0x43c>
   a4c8e:	bf00      	nop
   a4c90:	00099f9d 	.word	0x00099f9d
   a4c94:	00099fb1 	.word	0x00099fb1
   a4c98:	00099f75 	.word	0x00099f75
   a4c9c:	000a457d 	.word	0x000a457d
   a4ca0:	00099ccd 	.word	0x00099ccd
   a4ca4:	00099d45 	.word	0x00099d45
   a4ca8:	00099c2d 	.word	0x00099c2d
   a4cac:	0009a175 	.word	0x0009a175
   a4cb0:	2007265c 	.word	0x2007265c
   a4cb4:	20071954 	.word	0x20071954
   a4cb8:	00095df5 	.word	0x00095df5
   a4cbc:	00093195 	.word	0x00093195
   a4cc0:	00095da5 	.word	0x00095da5
   a4cc4:	00093755 	.word	0x00093755
   a4cc8:	0008330d 	.word	0x0008330d
   a4ccc:	0009a12d 	.word	0x0009a12d
   a4cd0:	20071ca4 	.word	0x20071ca4
   a4cd4:	20071cb0 	.word	0x20071cb0
   a4cd8:	20071cb8 	.word	0x20071cb8
   a4cdc:	00099e19 	.word	0x00099e19
   a4ce0:	00093815 	.word	0x00093815
   a4ce4:	00082e09 	.word	0x00082e09
   a4ce8:	44bb8000 	.word	0x44bb8000
   a4cec:	43e10000 	.word	0x43e10000
   a4cf0:	43160000 	.word	0x43160000
   a4cf4:	44548000 	.word	0x44548000
   a4cf8:	00082e61 	.word	0x00082e61
   a4cfc:	75bb      	strb	r3, [r7, #22]
					//Cl_rinseretcode =  Cl_AlarmActivateAlarms(COND_STATUS_LOW,true );
					//Cl_rinseretcode =  Cl_AlarmActivateAlarms(PS2_HIGH_THRESHOLD,true );
					//Cl_rinseretcode =  Cl_AlarmActivateAlarms(PS1_HIGH_THRESHOLD,true );
					//Cl_rinseretcode =  Cl_AlarmActivateAlarms(TEMP3_HIGH_THRESHOLD,true );
					//Cl_rinseretcode =  Cl_AlarmActivateAlarms(TEMP3_LOW_THRESHOLD,true );
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(TEMP2_HIGH_THRESHOLD,true );
   a4cfe:	2011      	movs	r0, #17
   a4d00:	2101      	movs	r1, #1
   a4d02:	4b14      	ldr	r3, [pc, #80]	; (a4d54 <Cl_Rinse_StartRinse+0x494>)
   a4d04:	4798      	blx	r3
   a4d06:	4603      	mov	r3, r0
   a4d08:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(TEMP2_LOW_THRESHOLD,true );
   a4d0a:	2012      	movs	r0, #18
   a4d0c:	2101      	movs	r1, #1
   a4d0e:	4b11      	ldr	r3, [pc, #68]	; (a4d54 <Cl_Rinse_StartRinse+0x494>)
   a4d10:	4798      	blx	r3
   a4d12:	4603      	mov	r3, r0
   a4d14:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(TEMP1_LOW_THRESHOLD,true );
   a4d16:	2010      	movs	r0, #16
   a4d18:	2101      	movs	r1, #1
   a4d1a:	4b0e      	ldr	r3, [pc, #56]	; (a4d54 <Cl_Rinse_StartRinse+0x494>)
   a4d1c:	4798      	blx	r3
   a4d1e:	4603      	mov	r3, r0
   a4d20:	75bb      	strb	r3, [r7, #22]
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(TEMP1_HIGH_THRESHOLD,true );
   a4d22:	200f      	movs	r0, #15
   a4d24:	2101      	movs	r1, #1
   a4d26:	4b0b      	ldr	r3, [pc, #44]	; (a4d54 <Cl_Rinse_StartRinse+0x494>)
   a4d28:	4798      	blx	r3
   a4d2a:	4603      	mov	r3, r0
   a4d2c:	75bb      	strb	r3, [r7, #22]
					//Cl_rinseretcode =  Cl_AlarmActivateAlarms(COND_DAC_RO,true );
					//Cl_rinseretcode =  Cl_AlarmActivateAlarms(COND_DAC_HIGH,true );
					

					
					if(Current_sense_trigger)
   a4d2e:	4b0a      	ldr	r3, [pc, #40]	; (a4d58 <Cl_Rinse_StartRinse+0x498>)
   a4d30:	781b      	ldrb	r3, [r3, #0]
   a4d32:	2b00      	cmp	r3, #0
   a4d34:	d005      	beq.n	a4d42 <Cl_Rinse_StartRinse+0x482>
					{
						Cl_rinseretcode =  Cl_AlarmActivateAlarms( FPCURRENTSTATUS,true );
   a4d36:	203c      	movs	r0, #60	; 0x3c
   a4d38:	2101      	movs	r1, #1
   a4d3a:	4b06      	ldr	r3, [pc, #24]	; (a4d54 <Cl_Rinse_StartRinse+0x494>)
   a4d3c:	4798      	blx	r3
   a4d3e:	4603      	mov	r3, r0
   a4d40:	75bb      	strb	r3, [r7, #22]
					else
					{
						//			Cl_rinseretcode =  Cl_AlarmActivateAlarms( PS3STATUS_HIGH,true );
					}
											
					Cl_rinseretcode = Cl_Rinse_ResetAlertsforReassertion();
   a4d42:	4b06      	ldr	r3, [pc, #24]	; (a4d5c <Cl_Rinse_StartRinse+0x49c>)
   a4d44:	4798      	blx	r3
   a4d46:	4603      	mov	r3, r0
   a4d48:	75bb      	strb	r3, [r7, #22]
					//Cl_rinseretcode = SetHeaterState(CL_HEATER_STATE_START);
					

					
				}
					return CL_OK;
   a4d4a:	2300      	movs	r3, #0
}
   a4d4c:	4618      	mov	r0, r3
   a4d4e:	371c      	adds	r7, #28
   a4d50:	46bd      	mov	sp, r7
   a4d52:	bd90      	pop	{r4, r7, pc}
   a4d54:	00082e61 	.word	0x00082e61
   a4d58:	20070a3a 	.word	0x20070a3a
   a4d5c:	000a4119 	.word	0x000a4119

000a4d60 <Cl_Rinse_StopRinse>:
Cl_ReturnCodeType Cl_Rinse_StopRinse(void)
{
   a4d60:	b580      	push	{r7, lr}
   a4d62:	b082      	sub	sp, #8
   a4d64:	af00      	add	r7, sp, #0
				Cl_ReturnCodeType Cl_rinseretcode = CL_OK;
   a4d66:	2300      	movs	r3, #0
   a4d68:	71fb      	strb	r3, [r7, #7]
				Cl_Uint8Type data;
				
				sv_cntrl_setredalarm();
   a4d6a:	4b3e      	ldr	r3, [pc, #248]	; (a4e64 <Cl_Rinse_StopRinse+0x104>)
   a4d6c:	4798      	blx	r3
				
				Cl_rinseretcode =  Cl_AlarmActivateAlarms(BLOODDOOR_STATUS_OPEN,false );
   a4d6e:	2001      	movs	r0, #1
   a4d70:	2100      	movs	r1, #0
   a4d72:	4b3d      	ldr	r3, [pc, #244]	; (a4e68 <Cl_Rinse_StopRinse+0x108>)
   a4d74:	4798      	blx	r3
   a4d76:	4603      	mov	r3, r0
   a4d78:	71fb      	strb	r3, [r7, #7]
				//Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_OPEN,true );
				//Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_OPEN,true );
				Cl_rinseretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON,false );
   a4d7a:	203d      	movs	r0, #61	; 0x3d
   a4d7c:	2100      	movs	r1, #0
   a4d7e:	4b3a      	ldr	r3, [pc, #232]	; (a4e68 <Cl_Rinse_StopRinse+0x108>)
   a4d80:	4798      	blx	r3
   a4d82:	4603      	mov	r3, r0
   a4d84:	71fb      	strb	r3, [r7, #7]
				Cl_rinseretcode =  Cl_AlarmActivateAlarms(LEVELSWITCH_ON_TO_OFF,false );
   a4d86:	203e      	movs	r0, #62	; 0x3e
   a4d88:	2100      	movs	r1, #0
   a4d8a:	4b37      	ldr	r3, [pc, #220]	; (a4e68 <Cl_Rinse_StopRinse+0x108>)
   a4d8c:	4798      	blx	r3
   a4d8e:	4603      	mov	r3, r0
   a4d90:	71fb      	strb	r3, [r7, #7]
					Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,false );
   a4d92:	200d      	movs	r0, #13
   a4d94:	2100      	movs	r1, #0
   a4d96:	4b34      	ldr	r3, [pc, #208]	; (a4e68 <Cl_Rinse_StopRinse+0x108>)
   a4d98:	4798      	blx	r3
   a4d9a:	4603      	mov	r3, r0
   a4d9c:	71fb      	strb	r3, [r7, #7]
				 					Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_NO_FLOW,false );
   a4d9e:	200c      	movs	r0, #12
   a4da0:	2100      	movs	r1, #0
   a4da2:	4b31      	ldr	r3, [pc, #196]	; (a4e68 <Cl_Rinse_StopRinse+0x108>)
   a4da4:	4798      	blx	r3
   a4da6:	4603      	mov	r3, r0
   a4da8:	71fb      	strb	r3, [r7, #7]
				 					Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_LOW_FLOWRATE,false );
   a4daa:	200d      	movs	r0, #13
   a4dac:	2100      	movs	r1, #0
   a4dae:	4b2e      	ldr	r3, [pc, #184]	; (a4e68 <Cl_Rinse_StopRinse+0x108>)
   a4db0:	4798      	blx	r3
   a4db2:	4603      	mov	r3, r0
   a4db4:	71fb      	strb	r3, [r7, #7]
				// 					Cl_rinseretcode =  Cl_AlarmActivateAlarms(FLOW_HIGH_FLOWRATE,true );
				Cl_rinseretcode =  Cl_AlarmActivateAlarms(ACID_IN_OPEN,false );
   a4db6:	2029      	movs	r0, #41	; 0x29
   a4db8:	2100      	movs	r1, #0
   a4dba:	4b2b      	ldr	r3, [pc, #172]	; (a4e68 <Cl_Rinse_StopRinse+0x108>)
   a4dbc:	4798      	blx	r3
   a4dbe:	4603      	mov	r3, r0
   a4dc0:	71fb      	strb	r3, [r7, #7]
				Cl_rinseretcode =  Cl_AlarmActivateAlarms(BICARB_IN_OPEN,false );
   a4dc2:	202b      	movs	r0, #43	; 0x2b
   a4dc4:	2100      	movs	r1, #0
   a4dc6:	4b28      	ldr	r3, [pc, #160]	; (a4e68 <Cl_Rinse_StopRinse+0x108>)
   a4dc8:	4798      	blx	r3
   a4dca:	4603      	mov	r3, r0
   a4dcc:	71fb      	strb	r3, [r7, #7]
				Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER1STATUS_OPEN,false );
   a4dce:	2003      	movs	r0, #3
   a4dd0:	2100      	movs	r1, #0
   a4dd2:	4b25      	ldr	r3, [pc, #148]	; (a4e68 <Cl_Rinse_StopRinse+0x108>)
   a4dd4:	4798      	blx	r3
   a4dd6:	4603      	mov	r3, r0
   a4dd8:	71fb      	strb	r3, [r7, #7]
				Cl_rinseretcode =  Cl_AlarmActivateAlarms(HOLDER2STATUS_OPEN,false );
   a4dda:	2004      	movs	r0, #4
   a4ddc:	2100      	movs	r1, #0
   a4dde:	4b22      	ldr	r3, [pc, #136]	; (a4e68 <Cl_Rinse_StopRinse+0x108>)
   a4de0:	4798      	blx	r3
   a4de2:	4603      	mov	r3, r0
   a4de4:	71fb      	strb	r3, [r7, #7]
				Cl_rinseretcode =  Cl_AlarmActivateAlarms(BC_ALARM,false);
   a4de6:	201a      	movs	r0, #26
   a4de8:	2100      	movs	r1, #0
   a4dea:	4b1f      	ldr	r3, [pc, #124]	; (a4e68 <Cl_Rinse_StopRinse+0x108>)
   a4dec:	4798      	blx	r3
   a4dee:	4603      	mov	r3, r0
   a4df0:	71fb      	strb	r3, [r7, #7]
				
				Cl_Rinse_ResetAlertsforReassertion();
   a4df2:	4b1e      	ldr	r3, [pc, #120]	; (a4e6c <Cl_Rinse_StopRinse+0x10c>)
   a4df4:	4798      	blx	r3
				
				if(!((cl_rinsestate == CL_RINSE_STATE_IDLE ) || (cl_rinsestate == CL_RINSE_STATE_STOPPED ) ||(cl_rinsestate == CL_RINSE_STATE_CRITICAL_ALARM )  ))
   a4df6:	4b1e      	ldr	r3, [pc, #120]	; (a4e70 <Cl_Rinse_StopRinse+0x110>)
   a4df8:	781b      	ldrb	r3, [r3, #0]
   a4dfa:	2b00      	cmp	r3, #0
   a4dfc:	d02c      	beq.n	a4e58 <Cl_Rinse_StopRinse+0xf8>
   a4dfe:	4b1c      	ldr	r3, [pc, #112]	; (a4e70 <Cl_Rinse_StopRinse+0x110>)
   a4e00:	781b      	ldrb	r3, [r3, #0]
   a4e02:	2b08      	cmp	r3, #8
   a4e04:	d028      	beq.n	a4e58 <Cl_Rinse_StopRinse+0xf8>
   a4e06:	4b1a      	ldr	r3, [pc, #104]	; (a4e70 <Cl_Rinse_StopRinse+0x110>)
   a4e08:	781b      	ldrb	r3, [r3, #0]
   a4e0a:	2b06      	cmp	r3, #6
   a4e0c:	d024      	beq.n	a4e58 <Cl_Rinse_StopRinse+0xf8>
// 					}
// 					else{
// 						
					
				//	Cl_SendDatatoconsole(CON_TX_COMMAND_PRINTTEXT,"DOOR",4);
				sv_cntrl_activatevenousclamp();
   a4e0e:	4b19      	ldr	r3, [pc, #100]	; (a4e74 <Cl_Rinse_StopRinse+0x114>)
   a4e10:	4798      	blx	r3
				Cl_Rinsesecondscounter = 0;
   a4e12:	4b19      	ldr	r3, [pc, #100]	; (a4e78 <Cl_Rinse_StopRinse+0x118>)
   a4e14:	2200      	movs	r2, #0
   a4e16:	601a      	str	r2, [r3, #0]
				Cl_RinseMinutescounter = 0;
   a4e18:	4b18      	ldr	r3, [pc, #96]	; (a4e7c <Cl_Rinse_StopRinse+0x11c>)
   a4e1a:	2200      	movs	r2, #0
   a4e1c:	601a      	str	r2, [r3, #0]
				Cl_RinseTotalMinutescounter = 0;
   a4e1e:	4b18      	ldr	r3, [pc, #96]	; (a4e80 <Cl_Rinse_StopRinse+0x120>)
   a4e20:	2200      	movs	r2, #0
   a4e22:	601a      	str	r2, [r3, #0]
				Cl_RinsesTotalhourscounter = 0 ;
   a4e24:	4b17      	ldr	r3, [pc, #92]	; (a4e84 <Cl_Rinse_StopRinse+0x124>)
   a4e26:	2200      	movs	r2, #0
   a4e28:	601a      	str	r2, [r3, #0]
				//Cl_rinseretcode = sv_cntrl_poweroffheater();
				Cl_bc_controller(BC_EVENT_STOP);
   a4e2a:	2005      	movs	r0, #5
   a4e2c:	4b16      	ldr	r3, [pc, #88]	; (a4e88 <Cl_Rinse_StopRinse+0x128>)
   a4e2e:	4798      	blx	r3
				Cl_bc_controller(BC_EVENT_STOP_RINSE);
   a4e30:	200d      	movs	r0, #13
   a4e32:	4b15      	ldr	r3, [pc, #84]	; (a4e88 <Cl_Rinse_StopRinse+0x128>)
   a4e34:	4798      	blx	r3
				cl_uf_controller(CL_UF_EVENT_STOP,0);
   a4e36:	2004      	movs	r0, #4
   a4e38:	2100      	movs	r1, #0
   a4e3a:	4b14      	ldr	r3, [pc, #80]	; (a4e8c <Cl_Rinse_StopRinse+0x12c>)
   a4e3c:	4798      	blx	r3
				sv_prop_stopmixing();
   a4e3e:	4b14      	ldr	r3, [pc, #80]	; (a4e90 <Cl_Rinse_StopRinse+0x130>)
   a4e40:	4798      	blx	r3
				//Cl_rinseretcode = sv_cntrl_setflowpath(FLOW_PATH_IDLE_RINSE);
				cl_rinsestate = CL_RINSE_STATE_IDLE;
   a4e42:	4b0b      	ldr	r3, [pc, #44]	; (a4e70 <Cl_Rinse_StopRinse+0x110>)
   a4e44:	2200      	movs	r2, #0
   a4e46:	701a      	strb	r2, [r3, #0]
				Cl_rinseretcode = Cl_SendDatatoconsole(CON_TX_COMMAND_RINSE_STOPPED,&data,0);
   a4e48:	1dbb      	adds	r3, r7, #6
   a4e4a:	2022      	movs	r0, #34	; 0x22
   a4e4c:	4619      	mov	r1, r3
   a4e4e:	2200      	movs	r2, #0
   a4e50:	4b10      	ldr	r3, [pc, #64]	; (a4e94 <Cl_Rinse_StopRinse+0x134>)
   a4e52:	4798      	blx	r3
   a4e54:	4603      	mov	r3, r0
   a4e56:	71fb      	strb	r3, [r7, #7]
//					}
					
				}
			
				return Cl_rinseretcode;
   a4e58:	79fb      	ldrb	r3, [r7, #7]
}
   a4e5a:	4618      	mov	r0, r3
   a4e5c:	3708      	adds	r7, #8
   a4e5e:	46bd      	mov	sp, r7
   a4e60:	bd80      	pop	{r7, pc}
   a4e62:	bf00      	nop
   a4e64:	00099f25 	.word	0x00099f25
   a4e68:	00082e61 	.word	0x00082e61
   a4e6c:	000a4119 	.word	0x000a4119
   a4e70:	20071c9e 	.word	0x20071c9e
   a4e74:	00099e19 	.word	0x00099e19
   a4e78:	20071ca0 	.word	0x20071ca0
   a4e7c:	20071ca4 	.word	0x20071ca4
   a4e80:	20071cb0 	.word	0x20071cb0
   a4e84:	20071cb4 	.word	0x20071cb4
   a4e88:	0008330d 	.word	0x0008330d
   a4e8c:	00095df5 	.word	0x00095df5
   a4e90:	0009a0c9 	.word	0x0009a0c9
   a4e94:	0009ba51 	.word	0x0009ba51

000a4e98 <Cl_Standby_Controller>:
 
 extern Cl_AlarmThresholdType  Cl_alarmThresholdTable;
extern Cl_Uint32Type Treatdata[ID_MAX_TREAT_PARAM] ;

Cl_ReturnCodeType Cl_Standby_Controller(Cl_Mac_EventsType Cl_MacStandbyEvent)
{
   a4e98:	b580      	push	{r7, lr}
   a4e9a:	b08a      	sub	sp, #40	; 0x28
   a4e9c:	af00      	add	r7, sp, #0
   a4e9e:	4603      	mov	r3, r0
   a4ea0:	71fb      	strb	r3, [r7, #7]
		Cl_ReturnCodeType cl_stby_retval;
		Cl_Stby_Events cl_stdby_event;
		Cl_ConsoleTxCommandtype con_command = CON_TX_COMMAND_COMMAND_MAX;
   a4ea2:	2351      	movs	r3, #81	; 0x51
   a4ea4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		Cl_Uint8Type data =0;
   a4ea8:	2300      	movs	r3, #0
   a4eaa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		Cl_Uint8Type dataarray[4];
		ClStbyAlarmIdType ClstbyAlarmId;
						STBStateDatatype abfdata;
						Cl_Uint8Type abfdataarray[5] =  {0,0,0,0,0};
   a4eae:	2300      	movs	r3, #0
   a4eb0:	743b      	strb	r3, [r7, #16]
   a4eb2:	2300      	movs	r3, #0
   a4eb4:	747b      	strb	r3, [r7, #17]
   a4eb6:	2300      	movs	r3, #0
   a4eb8:	74bb      	strb	r3, [r7, #18]
   a4eba:	2300      	movs	r3, #0
   a4ebc:	74fb      	strb	r3, [r7, #19]
   a4ebe:	2300      	movs	r3, #0
   a4ec0:	753b      	strb	r3, [r7, #20]

		// dummy = Cl_MacStandbyEvent;

	//	cl_stby_translatemacevent( dummy, &cl_stdby_event);
		cl_stby_retval = cl_stby_translatemacevent( Cl_MacStandbyEvent, &cl_stdby_event);
   a4ec2:	79fa      	ldrb	r2, [r7, #7]
   a4ec4:	f107 0325 	add.w	r3, r7, #37	; 0x25
   a4ec8:	4610      	mov	r0, r2
   a4eca:	4619      	mov	r1, r3
   a4ecc:	4b9c      	ldr	r3, [pc, #624]	; (a5140 <Cl_Standby_Controller+0x2a8>)
   a4ece:	4798      	blx	r3
   a4ed0:	4603      	mov	r3, r0
   a4ed2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		switch(cl_stbystate)
   a4ed6:	4b9b      	ldr	r3, [pc, #620]	; (a5144 <Cl_Standby_Controller+0x2ac>)
   a4ed8:	781b      	ldrb	r3, [r3, #0]
   a4eda:	2b0a      	cmp	r3, #10
   a4edc:	f200 8496 	bhi.w	a580c <Cl_Standby_Controller+0x974>
   a4ee0:	a201      	add	r2, pc, #4	; (adr r2, a4ee8 <Cl_Standby_Controller+0x50>)
   a4ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a4ee6:	bf00      	nop
   a4ee8:	000a580d 	.word	0x000a580d
   a4eec:	000a4f15 	.word	0x000a4f15
   a4ef0:	000a5053 	.word	0x000a5053
   a4ef4:	000a5311 	.word	0x000a5311
   a4ef8:	000a5481 	.word	0x000a5481
   a4efc:	000a557f 	.word	0x000a557f
   a4f00:	000a561d 	.word	0x000a561d
   a4f04:	000a56b9 	.word	0x000a56b9
   a4f08:	000a5757 	.word	0x000a5757
   a4f0c:	000a580d 	.word	0x000a580d
   a4f10:	000a580d 	.word	0x000a580d
		{
			case CL_STBY_STATE_INIT:
		//	printf("K\n");
			break;
			case CL_STBY_STATE_IDLE:
				switch (cl_stdby_event)
   a4f14:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
   a4f18:	2b0f      	cmp	r3, #15
   a4f1a:	d02b      	beq.n	a4f74 <Cl_Standby_Controller+0xdc>
   a4f1c:	2b0f      	cmp	r3, #15
   a4f1e:	dc04      	bgt.n	a4f2a <Cl_Standby_Controller+0x92>
   a4f20:	2b01      	cmp	r3, #1
   a4f22:	d009      	beq.n	a4f38 <Cl_Standby_Controller+0xa0>
   a4f24:	2b0e      	cmp	r3, #14
   a4f26:	d01d      	beq.n	a4f64 <Cl_Standby_Controller+0xcc>
				
				cl_stdby_event == EVENT_STBY_NULL;
				break;
				
				default:
				break;	
   a4f28:	e092      	b.n	a5050 <Cl_Standby_Controller+0x1b8>
		{
			case CL_STBY_STATE_INIT:
		//	printf("K\n");
			break;
			case CL_STBY_STATE_IDLE:
				switch (cl_stdby_event)
   a4f2a:	2b5b      	cmp	r3, #91	; 0x5b
   a4f2c:	d045      	beq.n	a4fba <Cl_Standby_Controller+0x122>
   a4f2e:	2b5c      	cmp	r3, #92	; 0x5c
   a4f30:	d069      	beq.n	a5006 <Cl_Standby_Controller+0x16e>
   a4f32:	2b10      	cmp	r3, #16
   a4f34:	d026      	beq.n	a4f84 <Cl_Standby_Controller+0xec>
				
				cl_stdby_event == EVENT_STBY_NULL;
				break;
				
				default:
				break;	
   a4f36:	e08b      	b.n	a5050 <Cl_Standby_Controller+0x1b8>
				case EVENT_STBY_ENTER_STANDBY:
				
			//	cl_stby_retval =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON , true );
			//	cl_stby_retval =  Cl_AlarmActivateAlarms(LEVELSWITCH2 , true );
												
				con_command = CON_TX_COMMAND_SYSDATA;
   a4f38:	2316      	movs	r3, #22
   a4f3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				//cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
				dataarray[0] = CON_TX_PARAM_SYS_SOFT_VERSION;
   a4f3e:	2311      	movs	r3, #17
   a4f40:	f887 3020 	strb.w	r3, [r7, #32]
			//	cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &dataarray[1]);
			//	cl_stby_retval = cl_testgetversion(&dataarray[1]);								
				//Reset the  OPENFILL time count
				
				dataarray[1] = SYS_VER;
   a4f44:	230e      	movs	r3, #14
   a4f46:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
				cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   a4f4a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   a4f4e:	f107 0320 	add.w	r3, r7, #32
   a4f52:	4610      	mov	r0, r2
   a4f54:	4619      	mov	r1, r3
   a4f56:	2202      	movs	r2, #2
   a4f58:	4b7b      	ldr	r3, [pc, #492]	; (a5148 <Cl_Standby_Controller+0x2b0>)
   a4f5a:	4798      	blx	r3
   a4f5c:	4603      	mov	r3, r0
   a4f5e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				
		//		cl_stbystate = CL_STBY_STATE_V1;
				break;
   a4f62:	e075      	b.n	a5050 <Cl_Standby_Controller+0x1b8>
				case EVENT_STBY_SET_BLDPMP_ON:
				prev_bpstate = 1;
   a4f64:	4b79      	ldr	r3, [pc, #484]	; (a514c <Cl_Standby_Controller+0x2b4>)
   a4f66:	2201      	movs	r2, #1
   a4f68:	801a      	strh	r2, [r3, #0]
					cl_bp_controller(CL_BP_EVENT_START,0);
   a4f6a:	2002      	movs	r0, #2
   a4f6c:	2100      	movs	r1, #0
   a4f6e:	4b78      	ldr	r3, [pc, #480]	; (a5150 <Cl_Standby_Controller+0x2b8>)
   a4f70:	4798      	blx	r3
				break;
   a4f72:	e06d      	b.n	a5050 <Cl_Standby_Controller+0x1b8>
				case EVENT_STBY_SET_BLDPMP_OFF:
				prev_bpstate = 0;
   a4f74:	4b75      	ldr	r3, [pc, #468]	; (a514c <Cl_Standby_Controller+0x2b4>)
   a4f76:	2200      	movs	r2, #0
   a4f78:	801a      	strh	r2, [r3, #0]
					cl_bp_controller(CL_BP_EVENT_STOP,0);
   a4f7a:	2004      	movs	r0, #4
   a4f7c:	2100      	movs	r1, #0
   a4f7e:	4b74      	ldr	r3, [pc, #464]	; (a5150 <Cl_Standby_Controller+0x2b8>)
   a4f80:	4798      	blx	r3
				break;
   a4f82:	e065      	b.n	a5050 <Cl_Standby_Controller+0x1b8>
				case EVENT_STBY__SET_BP_RATE:
					if(Cl_ConsoleRxMsg.msgready == true)
   a4f84:	4b73      	ldr	r3, [pc, #460]	; (a5154 <Cl_Standby_Controller+0x2bc>)
   a4f86:	7e1b      	ldrb	r3, [r3, #24]
   a4f88:	2b00      	cmp	r3, #0
   a4f8a:	d015      	beq.n	a4fb8 <Cl_Standby_Controller+0x120>
					{
						
						
			
						cl_Datastreamtype cl_temp  ;
						cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[0];
   a4f8c:	4b71      	ldr	r3, [pc, #452]	; (a5154 <Cl_Standby_Controller+0x2bc>)
   a4f8e:	791b      	ldrb	r3, [r3, #4]
   a4f90:	733b      	strb	r3, [r7, #12]
						cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[1];
   a4f92:	4b70      	ldr	r3, [pc, #448]	; (a5154 <Cl_Standby_Controller+0x2bc>)
   a4f94:	795b      	ldrb	r3, [r3, #5]
   a4f96:	737b      	strb	r3, [r7, #13]
						cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[2];
   a4f98:	4b6e      	ldr	r3, [pc, #440]	; (a5154 <Cl_Standby_Controller+0x2bc>)
   a4f9a:	799b      	ldrb	r3, [r3, #6]
   a4f9c:	73bb      	strb	r3, [r7, #14]
						cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[3];
   a4f9e:	4b6d      	ldr	r3, [pc, #436]	; (a5154 <Cl_Standby_Controller+0x2bc>)
   a4fa0:	79db      	ldrb	r3, [r3, #7]
   a4fa2:	73fb      	strb	r3, [r7, #15]
						
						Treatdata[ID_bloodrate] = cl_temp.Twobyte;
   a4fa4:	89bb      	ldrh	r3, [r7, #12]
   a4fa6:	461a      	mov	r2, r3
   a4fa8:	4b6b      	ldr	r3, [pc, #428]	; (a5158 <Cl_Standby_Controller+0x2c0>)
   a4faa:	63da      	str	r2, [r3, #60]	; 0x3c
						
						cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,cl_temp.Twobyte);
   a4fac:	89bb      	ldrh	r3, [r7, #12]
   a4fae:	2001      	movs	r0, #1
   a4fb0:	4619      	mov	r1, r3
   a4fb2:	4b67      	ldr	r3, [pc, #412]	; (a5150 <Cl_Standby_Controller+0x2b8>)
   a4fb4:	4798      	blx	r3
						
						
					}
					cl_stdby_event == EVENT_STBY_NULL;
				break;
   a4fb6:	e04b      	b.n	a5050 <Cl_Standby_Controller+0x1b8>
   a4fb8:	e04a      	b.n	a5050 <Cl_Standby_Controller+0x1b8>
				
				case EVT_CONSOLE_COMMAND_SET_BLDPUMPINC_MANUAL:
				
				if(Treatdata[ID_bloodrate] <= 450){
   a4fba:	4b67      	ldr	r3, [pc, #412]	; (a5158 <Cl_Standby_Controller+0x2c0>)
   a4fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   a4fbe:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
   a4fc2:	d81f      	bhi.n	a5004 <Cl_Standby_Controller+0x16c>
				
				Treatdata[ID_bloodrate] = Treatdata[ID_bloodrate] + 10;
   a4fc4:	4b64      	ldr	r3, [pc, #400]	; (a5158 <Cl_Standby_Controller+0x2c0>)
   a4fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   a4fc8:	330a      	adds	r3, #10
   a4fca:	4a63      	ldr	r2, [pc, #396]	; (a5158 <Cl_Standby_Controller+0x2c0>)
   a4fcc:	63d3      	str	r3, [r2, #60]	; 0x3c
				cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,Treatdata[ID_bloodrate]);
   a4fce:	4b62      	ldr	r3, [pc, #392]	; (a5158 <Cl_Standby_Controller+0x2c0>)
   a4fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   a4fd2:	2001      	movs	r0, #1
   a4fd4:	4619      	mov	r1, r3
   a4fd6:	4b5e      	ldr	r3, [pc, #376]	; (a5150 <Cl_Standby_Controller+0x2b8>)
   a4fd8:	4798      	blx	r3
				
				// send blood rate data to console
				
				
				abfdataarray[0] = CON_RX_PARAM_DATA_ABF_RATE;
   a4fda:	230f      	movs	r3, #15
   a4fdc:	743b      	strb	r3, [r7, #16]
				abfdata.fourbytedata = Treatdata[ID_bloodrate];
   a4fde:	4b5e      	ldr	r3, [pc, #376]	; (a5158 <Cl_Standby_Controller+0x2c0>)
   a4fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   a4fe2:	61bb      	str	r3, [r7, #24]
				abfdataarray[1] = abfdata.bytedata[0];
   a4fe4:	7e3b      	ldrb	r3, [r7, #24]
   a4fe6:	747b      	strb	r3, [r7, #17]
				abfdataarray[2] = abfdata.bytedata[1];
   a4fe8:	7e7b      	ldrb	r3, [r7, #25]
   a4fea:	74bb      	strb	r3, [r7, #18]
				abfdataarray[3] = abfdata.bytedata[2];
   a4fec:	7ebb      	ldrb	r3, [r7, #26]
   a4fee:	74fb      	strb	r3, [r7, #19]
				abfdataarray[4] = abfdata.bytedata[3];
   a4ff0:	7efb      	ldrb	r3, [r7, #27]
   a4ff2:	753b      	strb	r3, [r7, #20]
				
				Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&abfdataarray,5);
   a4ff4:	f107 0310 	add.w	r3, r7, #16
   a4ff8:	202a      	movs	r0, #42	; 0x2a
   a4ffa:	4619      	mov	r1, r3
   a4ffc:	2205      	movs	r2, #5
   a4ffe:	4b52      	ldr	r3, [pc, #328]	; (a5148 <Cl_Standby_Controller+0x2b0>)
   a5000:	4798      	blx	r3
				
				}
				
				cl_stdby_event == EVENT_STBY_NULL;
				break;
   a5002:	e025      	b.n	a5050 <Cl_Standby_Controller+0x1b8>
   a5004:	e024      	b.n	a5050 <Cl_Standby_Controller+0x1b8>
				
				case EVT_CONSOLE_COMMAND_SET_BLDPUMPDEC_MANUAL:
				
				if(Treatdata[ID_bloodrate] >= 100){
   a5006:	4b54      	ldr	r3, [pc, #336]	; (a5158 <Cl_Standby_Controller+0x2c0>)
   a5008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   a500a:	2b63      	cmp	r3, #99	; 0x63
   a500c:	d91f      	bls.n	a504e <Cl_Standby_Controller+0x1b6>
				
				Treatdata[ID_bloodrate] = Treatdata[ID_bloodrate] - 10;
   a500e:	4b52      	ldr	r3, [pc, #328]	; (a5158 <Cl_Standby_Controller+0x2c0>)
   a5010:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   a5012:	3b0a      	subs	r3, #10
   a5014:	4a50      	ldr	r2, [pc, #320]	; (a5158 <Cl_Standby_Controller+0x2c0>)
   a5016:	63d3      	str	r3, [r2, #60]	; 0x3c
				cl_bp_controller(CL_BP_EVENT_SET_BP_RATE,Treatdata[ID_bloodrate]);
   a5018:	4b4f      	ldr	r3, [pc, #316]	; (a5158 <Cl_Standby_Controller+0x2c0>)
   a501a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   a501c:	2001      	movs	r0, #1
   a501e:	4619      	mov	r1, r3
   a5020:	4b4b      	ldr	r3, [pc, #300]	; (a5150 <Cl_Standby_Controller+0x2b8>)
   a5022:	4798      	blx	r3
				
				
				abfdataarray[0] = CON_RX_PARAM_DATA_ABF_RATE;
   a5024:	230f      	movs	r3, #15
   a5026:	743b      	strb	r3, [r7, #16]
				abfdata.fourbytedata = Treatdata[ID_bloodrate];
   a5028:	4b4b      	ldr	r3, [pc, #300]	; (a5158 <Cl_Standby_Controller+0x2c0>)
   a502a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   a502c:	61bb      	str	r3, [r7, #24]
				abfdataarray[1] = abfdata.bytedata[0];
   a502e:	7e3b      	ldrb	r3, [r7, #24]
   a5030:	747b      	strb	r3, [r7, #17]
				abfdataarray[2] = abfdata.bytedata[1];
   a5032:	7e7b      	ldrb	r3, [r7, #25]
   a5034:	74bb      	strb	r3, [r7, #18]
				abfdataarray[3] = abfdata.bytedata[2];
   a5036:	7ebb      	ldrb	r3, [r7, #26]
   a5038:	74fb      	strb	r3, [r7, #19]
				abfdataarray[4] = abfdata.bytedata[3];
   a503a:	7efb      	ldrb	r3, [r7, #27]
   a503c:	753b      	strb	r3, [r7, #20]
				
				Cl_SendDatatoconsole(CON_TX_COMMAND_CL_SYS_STATE_DATA,&abfdataarray,5);
   a503e:	f107 0310 	add.w	r3, r7, #16
   a5042:	202a      	movs	r0, #42	; 0x2a
   a5044:	4619      	mov	r1, r3
   a5046:	2205      	movs	r2, #5
   a5048:	4b3f      	ldr	r3, [pc, #252]	; (a5148 <Cl_Standby_Controller+0x2b0>)
   a504a:	4798      	blx	r3
				}
				
				cl_stdby_event == EVENT_STBY_NULL;
				break;
   a504c:	e7ff      	b.n	a504e <Cl_Standby_Controller+0x1b6>
   a504e:	bf00      	nop
				default:
				break;	
				}


				break;
   a5050:	e3dd      	b.n	a580e <Cl_Standby_Controller+0x976>
			break;
			case CL_STBY_STATE_STANDBY_RINSE:
			//printf("J\n");
			switch (cl_stdby_event)
   a5052:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
   a5056:	3b01      	subs	r3, #1
   a5058:	2b0c      	cmp	r3, #12
   a505a:	f200 8157 	bhi.w	a530c <Cl_Standby_Controller+0x474>
   a505e:	a201      	add	r2, pc, #4	; (adr r2, a5064 <Cl_Standby_Controller+0x1cc>)
   a5060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a5064:	000a52c1 	.word	0x000a52c1
   a5068:	000a530d 	.word	0x000a530d
   a506c:	000a530d 	.word	0x000a530d
   a5070:	000a530d 	.word	0x000a530d
   a5074:	000a530d 	.word	0x000a530d
   a5078:	000a52e9 	.word	0x000a52e9
   a507c:	000a52ff 	.word	0x000a52ff
   a5080:	000a530d 	.word	0x000a530d
   a5084:	000a52c9 	.word	0x000a52c9
   a5088:	000a50a1 	.word	0x000a50a1
   a508c:	000a5161 	.word	0x000a5161
   a5090:	000a5099 	.word	0x000a5099
   a5094:	000a530d 	.word	0x000a530d
			{
					case EVENT_STBY_START_RINSE:
					//check for alarms and then notify if needed
						cl_stbystate = CL_STBY_STATE_IDLE;
   a5098:	4b2a      	ldr	r3, [pc, #168]	; (a5144 <Cl_Standby_Controller+0x2ac>)
   a509a:	2201      	movs	r2, #1
   a509c:	701a      	strb	r2, [r3, #0]
					break;
   a509e:	e136      	b.n	a530e <Cl_Standby_Controller+0x476>
					case EVENT_STBY_DIALYSIS_PREP:
					// check for alarms and change hardware status as required before going to dialysis prepration
					break;
					case EVENT_STBY_GET_DATA:
					if(Cl_ConsoleRxMsg.msgready == true)
   a50a0:	4b2c      	ldr	r3, [pc, #176]	; (a5154 <Cl_Standby_Controller+0x2bc>)
   a50a2:	7e1b      	ldrb	r3, [r3, #24]
   a50a4:	2b00      	cmp	r3, #0
   a50a6:	d04a      	beq.n	a513e <Cl_Standby_Controller+0x2a6>
					{
					
						switch(Cl_ConsoleRxMsg.data.byte[0])
   a50a8:	4b2a      	ldr	r3, [pc, #168]	; (a5154 <Cl_Standby_Controller+0x2bc>)
   a50aa:	791b      	ldrb	r3, [r3, #4]
   a50ac:	2b01      	cmp	r3, #1
   a50ae:	d002      	beq.n	a50b6 <Cl_Standby_Controller+0x21e>
   a50b0:	2b21      	cmp	r3, #33	; 0x21
   a50b2:	d01d      	beq.n	a50f0 <Cl_Standby_Controller+0x258>
									cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DISINF_STATUS, &dataarray[1]);
									cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);

							break;
							default:
							break;
   a50b4:	e043      	b.n	a513e <Cl_Standby_Controller+0x2a6>
						switch(Cl_ConsoleRxMsg.data.byte[0])
						{
							case CON_RX_PARAM_DATA_RINSE_STATUS:
								//	cl_wait(10);
													
									con_command = CON_TX_COMMAND_SYSDATA;
   a50b6:	2316      	movs	r3, #22
   a50b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
									//cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
									dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   a50bc:	2301      	movs	r3, #1
   a50be:	f887 3020 	strb.w	r3, [r7, #32]
									cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a50c2:	f107 0320 	add.w	r3, r7, #32
   a50c6:	3301      	adds	r3, #1
   a50c8:	2001      	movs	r0, #1
   a50ca:	4619      	mov	r1, r3
   a50cc:	4b23      	ldr	r3, [pc, #140]	; (a515c <Cl_Standby_Controller+0x2c4>)
   a50ce:	4798      	blx	r3
   a50d0:	4603      	mov	r3, r0
   a50d2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
									cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   a50d6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   a50da:	f107 0320 	add.w	r3, r7, #32
   a50de:	4610      	mov	r0, r2
   a50e0:	4619      	mov	r1, r3
   a50e2:	2202      	movs	r2, #2
   a50e4:	4b18      	ldr	r3, [pc, #96]	; (a5148 <Cl_Standby_Controller+0x2b0>)
   a50e6:	4798      	blx	r3
   a50e8:	4603      	mov	r3, r0
   a50ea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
									//cl_wait(100);
							break;
   a50ee:	e026      	b.n	a513e <Cl_Standby_Controller+0x2a6>
						{
							case CON_RX_PARAM_DATA_DISINF_STATUS:
								//	cl_wait(10);
													
									con_command = CON_TX_COMMAND_SYSDATA;									
   a50f0:	2316      	movs	r3, #22
   a50f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
									dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;	
   a50f6:	2323      	movs	r3, #35	; 0x23
   a50f8:	f887 3020 	strb.w	r3, [r7, #32]
									cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);																		
   a50fc:	f107 0320 	add.w	r3, r7, #32
   a5100:	3301      	adds	r3, #1
   a5102:	2001      	movs	r0, #1
   a5104:	4619      	mov	r1, r3
   a5106:	4b15      	ldr	r3, [pc, #84]	; (a515c <Cl_Standby_Controller+0x2c4>)
   a5108:	4798      	blx	r3
   a510a:	4603      	mov	r3, r0
   a510c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
									cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_DISINF_STATUS, &dataarray[1]);
   a5110:	f107 0320 	add.w	r3, r7, #32
   a5114:	3301      	adds	r3, #1
   a5116:	2028      	movs	r0, #40	; 0x28
   a5118:	4619      	mov	r1, r3
   a511a:	4b10      	ldr	r3, [pc, #64]	; (a515c <Cl_Standby_Controller+0x2c4>)
   a511c:	4798      	blx	r3
   a511e:	4603      	mov	r3, r0
   a5120:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
									cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   a5124:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   a5128:	f107 0320 	add.w	r3, r7, #32
   a512c:	4610      	mov	r0, r2
   a512e:	4619      	mov	r1, r3
   a5130:	2202      	movs	r2, #2
   a5132:	4b05      	ldr	r3, [pc, #20]	; (a5148 <Cl_Standby_Controller+0x2b0>)
   a5134:	4798      	blx	r3
   a5136:	4603      	mov	r3, r0
   a5138:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

							break;
   a513c:	bf00      	nop
							break;
						}

					}
				}
				break;
   a513e:	e0e6      	b.n	a530e <Cl_Standby_Controller+0x476>
   a5140:	000a5825 	.word	0x000a5825
   a5144:	20070dc0 	.word	0x20070dc0
   a5148:	0009ba51 	.word	0x0009ba51
   a514c:	200719a0 	.word	0x200719a0
   a5150:	00093305 	.word	0x00093305
   a5154:	200723f0 	.word	0x200723f0
   a5158:	2007265c 	.word	0x2007265c
   a515c:	0009a545 	.word	0x0009a545
				
				case EVENT_STBY_SET_DATA:
				if(Cl_ConsoleRxMsg.msgready == true)
   a5160:	4bb3      	ldr	r3, [pc, #716]	; (a5430 <Cl_Standby_Controller+0x598>)
   a5162:	7e1b      	ldrb	r3, [r3, #24]
   a5164:	2b00      	cmp	r3, #0
   a5166:	f000 80aa 	beq.w	a52be <Cl_Standby_Controller+0x426>
				{
					cl_Datastreamtype cl_temp  ;
					cl_temp.bytearray[0] = Cl_ConsoleRxMsg.data.byte[1];
   a516a:	4bb1      	ldr	r3, [pc, #708]	; (a5430 <Cl_Standby_Controller+0x598>)
   a516c:	795b      	ldrb	r3, [r3, #5]
   a516e:	723b      	strb	r3, [r7, #8]
					cl_temp.bytearray[1] = Cl_ConsoleRxMsg.data.byte[2];
   a5170:	4baf      	ldr	r3, [pc, #700]	; (a5430 <Cl_Standby_Controller+0x598>)
   a5172:	799b      	ldrb	r3, [r3, #6]
   a5174:	727b      	strb	r3, [r7, #9]
					cl_temp.bytearray[2] = Cl_ConsoleRxMsg.data.byte[3];
   a5176:	4bae      	ldr	r3, [pc, #696]	; (a5430 <Cl_Standby_Controller+0x598>)
   a5178:	79db      	ldrb	r3, [r3, #7]
   a517a:	72bb      	strb	r3, [r7, #10]
					cl_temp.bytearray[3] = Cl_ConsoleRxMsg.data.byte[4];
   a517c:	4bac      	ldr	r3, [pc, #688]	; (a5430 <Cl_Standby_Controller+0x598>)
   a517e:	7a1b      	ldrb	r3, [r3, #8]
   a5180:	72fb      	strb	r3, [r7, #11]
					
					switch(Cl_ConsoleRxMsg.data.byte[0])
   a5182:	4bab      	ldr	r3, [pc, #684]	; (a5430 <Cl_Standby_Controller+0x598>)
   a5184:	791b      	ldrb	r3, [r3, #4]
   a5186:	3b05      	subs	r3, #5
   a5188:	2b20      	cmp	r3, #32
   a518a:	f200 8097 	bhi.w	a52bc <Cl_Standby_Controller+0x424>
   a518e:	a201      	add	r2, pc, #4	; (adr r2, a5194 <Cl_Standby_Controller+0x2fc>)
   a5190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a5194:	000a52bd 	.word	0x000a52bd
   a5198:	000a52bd 	.word	0x000a52bd
   a519c:	000a52bd 	.word	0x000a52bd
   a51a0:	000a52bd 	.word	0x000a52bd
   a51a4:	000a52bd 	.word	0x000a52bd
   a51a8:	000a52bd 	.word	0x000a52bd
   a51ac:	000a52bd 	.word	0x000a52bd
   a51b0:	000a52bd 	.word	0x000a52bd
   a51b4:	000a52bd 	.word	0x000a52bd
   a51b8:	000a52bd 	.word	0x000a52bd
   a51bc:	000a52bd 	.word	0x000a52bd
   a51c0:	000a52bd 	.word	0x000a52bd
   a51c4:	000a52bd 	.word	0x000a52bd
   a51c8:	000a52bd 	.word	0x000a52bd
   a51cc:	000a52bd 	.word	0x000a52bd
   a51d0:	000a52bd 	.word	0x000a52bd
   a51d4:	000a52bd 	.word	0x000a52bd
   a51d8:	000a52bd 	.word	0x000a52bd
   a51dc:	000a52bd 	.word	0x000a52bd
   a51e0:	000a5219 	.word	0x000a5219
   a51e4:	000a5231 	.word	0x000a5231
   a51e8:	000a5249 	.word	0x000a5249
   a51ec:	000a5259 	.word	0x000a5259
   a51f0:	000a5269 	.word	0x000a5269
   a51f4:	000a5279 	.word	0x000a5279
   a51f8:	000a52bd 	.word	0x000a52bd
   a51fc:	000a52bd 	.word	0x000a52bd
   a5200:	000a52bd 	.word	0x000a52bd
   a5204:	000a52bd 	.word	0x000a52bd
   a5208:	000a5289 	.word	0x000a5289
   a520c:	000a5293 	.word	0x000a5293
   a5210:	000a529d 	.word	0x000a529d
   a5214:	000a52ad 	.word	0x000a52ad
						case ID_bloodratereturn:
						break;
						case ID_bloodratetreat:
						break;
						case ID_tempulimit:
						Cl_alarmThresholdTable.temp3_high_threshold =  (cl_temp.word)/10;
   a5218:	68bb      	ldr	r3, [r7, #8]
   a521a:	4a86      	ldr	r2, [pc, #536]	; (a5434 <Cl_Standby_Controller+0x59c>)
   a521c:	fba2 2303 	umull	r2, r3, r2, r3
   a5220:	08da      	lsrs	r2, r3, #3
   a5222:	4b85      	ldr	r3, [pc, #532]	; (a5438 <Cl_Standby_Controller+0x5a0>)
   a5224:	4610      	mov	r0, r2
   a5226:	4798      	blx	r3
   a5228:	4602      	mov	r2, r0
   a522a:	4b84      	ldr	r3, [pc, #528]	; (a543c <Cl_Standby_Controller+0x5a4>)
   a522c:	649a      	str	r2, [r3, #72]	; 0x48
						break;
   a522e:	e046      	b.n	a52be <Cl_Standby_Controller+0x426>
						case ID_templlimit:
						Cl_alarmThresholdTable.temp3_low_threshold =  (cl_temp.word)/10;
   a5230:	68bb      	ldr	r3, [r7, #8]
   a5232:	4a80      	ldr	r2, [pc, #512]	; (a5434 <Cl_Standby_Controller+0x59c>)
   a5234:	fba2 2303 	umull	r2, r3, r2, r3
   a5238:	08da      	lsrs	r2, r3, #3
   a523a:	4b7f      	ldr	r3, [pc, #508]	; (a5438 <Cl_Standby_Controller+0x5a0>)
   a523c:	4610      	mov	r0, r2
   a523e:	4798      	blx	r3
   a5240:	4602      	mov	r2, r0
   a5242:	4b7e      	ldr	r3, [pc, #504]	; (a543c <Cl_Standby_Controller+0x5a4>)
   a5244:	64da      	str	r2, [r3, #76]	; 0x4c
						break;
   a5246:	e03a      	b.n	a52be <Cl_Standby_Controller+0x426>
						case ID_tmpllimit:
						Cl_alarmThresholdTable.tmp_low_threshold =  cl_temp.word;
   a5248:	68ba      	ldr	r2, [r7, #8]
   a524a:	4b7b      	ldr	r3, [pc, #492]	; (a5438 <Cl_Standby_Controller+0x5a0>)
   a524c:	4610      	mov	r0, r2
   a524e:	4798      	blx	r3
   a5250:	4602      	mov	r2, r0
   a5252:	4b7a      	ldr	r3, [pc, #488]	; (a543c <Cl_Standby_Controller+0x5a4>)
   a5254:	635a      	str	r2, [r3, #52]	; 0x34
						break;
   a5256:	e032      	b.n	a52be <Cl_Standby_Controller+0x426>
						case ID_tmpulimit:
						Cl_alarmThresholdTable.tmp_high_threshold =  cl_temp.word;
   a5258:	68ba      	ldr	r2, [r7, #8]
   a525a:	4b77      	ldr	r3, [pc, #476]	; (a5438 <Cl_Standby_Controller+0x5a0>)
   a525c:	4610      	mov	r0, r2
   a525e:	4798      	blx	r3
   a5260:	4602      	mov	r2, r0
   a5262:	4b76      	ldr	r3, [pc, #472]	; (a543c <Cl_Standby_Controller+0x5a4>)
   a5264:	631a      	str	r2, [r3, #48]	; 0x30
						break;
   a5266:	e02a      	b.n	a52be <Cl_Standby_Controller+0x426>
						case ID_vptllimit:
						Cl_alarmThresholdTable.vpt_low_threshold =  cl_temp.word;
   a5268:	68ba      	ldr	r2, [r7, #8]
   a526a:	4b73      	ldr	r3, [pc, #460]	; (a5438 <Cl_Standby_Controller+0x5a0>)
   a526c:	4610      	mov	r0, r2
   a526e:	4798      	blx	r3
   a5270:	4602      	mov	r2, r0
   a5272:	4b72      	ldr	r3, [pc, #456]	; (a543c <Cl_Standby_Controller+0x5a4>)
   a5274:	615a      	str	r2, [r3, #20]
						break;
   a5276:	e022      	b.n	a52be <Cl_Standby_Controller+0x426>
						case ID_vptulimit:
						Cl_alarmThresholdTable.vpt_high_threshold =  cl_temp.word;
   a5278:	68ba      	ldr	r2, [r7, #8]
   a527a:	4b6f      	ldr	r3, [pc, #444]	; (a5438 <Cl_Standby_Controller+0x5a0>)
   a527c:	4610      	mov	r0, r2
   a527e:	4798      	blx	r3
   a5280:	4602      	mov	r2, r0
   a5282:	4b6e      	ldr	r3, [pc, #440]	; (a543c <Cl_Standby_Controller+0x5a4>)
   a5284:	611a      	str	r2, [r3, #16]
						break;
   a5286:	e01a      	b.n	a52be <Cl_Standby_Controller+0x426>
						break;
						case ID_dflowllimit:
						case ID_dflowulimit:
						break;
						case ID_condllimit:
						Cl_alarmThresholdTable.cond_low_threshold =  cl_temp.word;
   a5288:	68bb      	ldr	r3, [r7, #8]
   a528a:	b29a      	uxth	r2, r3
   a528c:	4b6b      	ldr	r3, [pc, #428]	; (a543c <Cl_Standby_Controller+0x5a4>)
   a528e:	801a      	strh	r2, [r3, #0]
						break;
   a5290:	e015      	b.n	a52be <Cl_Standby_Controller+0x426>
						case ID_condulimit:
						Cl_alarmThresholdTable.cond_high_threshold =  cl_temp.word;
   a5292:	68bb      	ldr	r3, [r7, #8]
   a5294:	b29a      	uxth	r2, r3
   a5296:	4b69      	ldr	r3, [pc, #420]	; (a543c <Cl_Standby_Controller+0x5a4>)
   a5298:	805a      	strh	r2, [r3, #2]
						break;
   a529a:	e010      	b.n	a52be <Cl_Standby_Controller+0x426>
						case ID_aptllimit:
						Cl_alarmThresholdTable.apt_low_threshold =  cl_temp.word;
   a529c:	68ba      	ldr	r2, [r7, #8]
   a529e:	4b66      	ldr	r3, [pc, #408]	; (a5438 <Cl_Standby_Controller+0x5a0>)
   a52a0:	4610      	mov	r0, r2
   a52a2:	4798      	blx	r3
   a52a4:	4602      	mov	r2, r0
   a52a6:	4b65      	ldr	r3, [pc, #404]	; (a543c <Cl_Standby_Controller+0x5a4>)
   a52a8:	60da      	str	r2, [r3, #12]
						break;
   a52aa:	e008      	b.n	a52be <Cl_Standby_Controller+0x426>
						case ID_aptulimit:
						Cl_alarmThresholdTable.apt_high_threshold =  cl_temp.word;
   a52ac:	68ba      	ldr	r2, [r7, #8]
   a52ae:	4b62      	ldr	r3, [pc, #392]	; (a5438 <Cl_Standby_Controller+0x5a0>)
   a52b0:	4610      	mov	r0, r2
   a52b2:	4798      	blx	r3
   a52b4:	4602      	mov	r2, r0
   a52b6:	4b61      	ldr	r3, [pc, #388]	; (a543c <Cl_Standby_Controller+0x5a4>)
   a52b8:	609a      	str	r2, [r3, #8]
						break;
   a52ba:	e000      	b.n	a52be <Cl_Standby_Controller+0x426>

						default:break;
   a52bc:	bf00      	nop
					}
				}
				break;
   a52be:	e026      	b.n	a530e <Cl_Standby_Controller+0x476>
				case EVENT_STBY_ENTER_STANDBY:
				
				//cl_stby_retval =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON , true );
				//cl_stby_retval =  Cl_AlarmActivateAlarms(LEVELSWITCH2 , true );
				
				cl_stbystate = CL_STBY_STATE_IDLE;
   a52c0:	4b5f      	ldr	r3, [pc, #380]	; (a5440 <Cl_Standby_Controller+0x5a8>)
   a52c2:	2201      	movs	r2, #1
   a52c4:	701a      	strb	r2, [r3, #0]

				break;
   a52c6:	e022      	b.n	a530e <Cl_Standby_Controller+0x476>
				//Activate V1 time count
				//change state to V1
				// send update to console
				//Cl_SendDatatoconsole();
				//command = CON_TX_HELLO;
				con_command = CON_TX_COMMAND_ALARM;
   a52c8:	2307      	movs	r3, #7
   a52ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				//cl_stby_retval =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON , false );
				//cl_stby_retval =  Cl_AlarmActivateAlarms(LEVELSWITCH2 , false );
				cl_stby_retval = Cl_SendDatatoconsole(con_command,&data,0);
   a52ce:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   a52d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
   a52d6:	4610      	mov	r0, r2
   a52d8:	4619      	mov	r1, r3
   a52da:	2200      	movs	r2, #0
   a52dc:	4b59      	ldr	r3, [pc, #356]	; (a5444 <Cl_Standby_Controller+0x5ac>)
   a52de:	4798      	blx	r3
   a52e0:	4603      	mov	r3, r0
   a52e2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

				break;
   a52e6:	e012      	b.n	a530e <Cl_Standby_Controller+0x476>
				case	EVENT_STBY_TICK_SECOND:
				Cl_StbRinsesecondscounter++;
   a52e8:	4b57      	ldr	r3, [pc, #348]	; (a5448 <Cl_Standby_Controller+0x5b0>)
   a52ea:	681b      	ldr	r3, [r3, #0]
   a52ec:	3301      	adds	r3, #1
   a52ee:	4a56      	ldr	r2, [pc, #344]	; (a5448 <Cl_Standby_Controller+0x5b0>)
   a52f0:	6013      	str	r3, [r2, #0]
				cl_stby_retval = Cl_StabyRinse_UpdateTimeInfo();
   a52f2:	4b56      	ldr	r3, [pc, #344]	; (a544c <Cl_Standby_Controller+0x5b4>)
   a52f4:	4798      	blx	r3
   a52f6:	4603      	mov	r3, r0
   a52f8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				break;
   a52fc:	e007      	b.n	a530e <Cl_Standby_Controller+0x476>
				case EVENT_STBY_TICK_MINUTES:
				Cl_StbRinsesecondscounter =0;
   a52fe:	4b52      	ldr	r3, [pc, #328]	; (a5448 <Cl_Standby_Controller+0x5b0>)
   a5300:	2200      	movs	r2, #0
   a5302:	601a      	str	r2, [r3, #0]
				cl_stbystate = CL_STBY_STATE_IDLE;
   a5304:	4b4e      	ldr	r3, [pc, #312]	; (a5440 <Cl_Standby_Controller+0x5a8>)
   a5306:	2201      	movs	r2, #1
   a5308:	701a      	strb	r2, [r3, #0]
			//	printf("M");
				break;
   a530a:	e000      	b.n	a530e <Cl_Standby_Controller+0x476>
			//	printf("H");
				break;

				
				default:
				break;
   a530c:	bf00      	nop
			}
			break;
   a530e:	e27e      	b.n	a580e <Cl_Standby_Controller+0x976>

			case CL_STBY_STATE_V1:
			
			switch (cl_stdby_event)
   a5310:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
   a5314:	3b06      	subs	r3, #6
   a5316:	2b07      	cmp	r3, #7
   a5318:	f200 80b0 	bhi.w	a547c <Cl_Standby_Controller+0x5e4>
   a531c:	a201      	add	r2, pc, #4	; (adr r2, a5324 <Cl_Standby_Controller+0x48c>)
   a531e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a5322:	bf00      	nop
   a5324:	000a5459 	.word	0x000a5459
   a5328:	000a5475 	.word	0x000a5475
   a532c:	000a547d 	.word	0x000a547d
   a5330:	000a541f 	.word	0x000a541f
   a5334:	000a5345 	.word	0x000a5345
   a5338:	000a53d1 	.word	0x000a53d1
   a533c:	000a547d 	.word	0x000a547d
   a5340:	000a547d 	.word	0x000a547d
				case EVENT_STBY_DIALYSIS_PREP:
				// check for alarms and change hardware status as required before going to dialysis prepration
				break;
				case EVENT_STBY_GET_DATA:
				
								if(Cl_ConsoleRxMsg.msgready == true)
   a5344:	4b3a      	ldr	r3, [pc, #232]	; (a5430 <Cl_Standby_Controller+0x598>)
   a5346:	7e1b      	ldrb	r3, [r3, #24]
   a5348:	2b00      	cmp	r3, #0
   a534a:	d040      	beq.n	a53ce <Cl_Standby_Controller+0x536>
								{
									
									switch(Cl_ConsoleRxMsg.data.byte[0])
   a534c:	4b38      	ldr	r3, [pc, #224]	; (a5430 <Cl_Standby_Controller+0x598>)
   a534e:	791b      	ldrb	r3, [r3, #4]
   a5350:	2b01      	cmp	r3, #1
   a5352:	d002      	beq.n	a535a <Cl_Standby_Controller+0x4c2>
   a5354:	2b21      	cmp	r3, #33	; 0x21
   a5356:	d01d      	beq.n	a5394 <Cl_Standby_Controller+0x4fc>
												cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
												cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
												//cl_wait(100);
						break;
										default:
										break;
   a5358:	e039      	b.n	a53ce <Cl_Standby_Controller+0x536>
									switch(Cl_ConsoleRxMsg.data.byte[0])
									{
										case CON_RX_PARAM_DATA_RINSE_STATUS:
									//	cl_wait(10);
										
										con_command = CON_TX_COMMAND_SYSDATA;
   a535a:	2316      	movs	r3, #22
   a535c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
										//cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
										dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   a5360:	2301      	movs	r3, #1
   a5362:	f887 3020 	strb.w	r3, [r7, #32]
										cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a5366:	f107 0320 	add.w	r3, r7, #32
   a536a:	3301      	adds	r3, #1
   a536c:	2001      	movs	r0, #1
   a536e:	4619      	mov	r1, r3
   a5370:	4b37      	ldr	r3, [pc, #220]	; (a5450 <Cl_Standby_Controller+0x5b8>)
   a5372:	4798      	blx	r3
   a5374:	4603      	mov	r3, r0
   a5376:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
										
										//Reset the  OPENFILL time count
										cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,(Cl_Uint8Type)2);
   a537a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   a537e:	f107 0320 	add.w	r3, r7, #32
   a5382:	4610      	mov	r0, r2
   a5384:	4619      	mov	r1, r3
   a5386:	2202      	movs	r2, #2
   a5388:	4b2e      	ldr	r3, [pc, #184]	; (a5444 <Cl_Standby_Controller+0x5ac>)
   a538a:	4798      	blx	r3
   a538c:	4603      	mov	r3, r0
   a538e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
									//	cl_wait(
										break;
   a5392:	e01c      	b.n	a53ce <Cl_Standby_Controller+0x536>
										case CON_RX_PARAM_DATA_DISINF_STATUS:
											//	cl_wait(10);
													
												con_command = CON_TX_COMMAND_SYSDATA;
   a5394:	2316      	movs	r3, #22
   a5396:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
												//cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
												dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;	
   a539a:	2323      	movs	r3, #35	; 0x23
   a539c:	f887 3020 	strb.w	r3, [r7, #32]
												cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a53a0:	f107 0320 	add.w	r3, r7, #32
   a53a4:	3301      	adds	r3, #1
   a53a6:	2001      	movs	r0, #1
   a53a8:	4619      	mov	r1, r3
   a53aa:	4b29      	ldr	r3, [pc, #164]	; (a5450 <Cl_Standby_Controller+0x5b8>)
   a53ac:	4798      	blx	r3
   a53ae:	4603      	mov	r3, r0
   a53b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
												cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   a53b4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   a53b8:	f107 0320 	add.w	r3, r7, #32
   a53bc:	4610      	mov	r0, r2
   a53be:	4619      	mov	r1, r3
   a53c0:	2202      	movs	r2, #2
   a53c2:	4b20      	ldr	r3, [pc, #128]	; (a5444 <Cl_Standby_Controller+0x5ac>)
   a53c4:	4798      	blx	r3
   a53c6:	4603      	mov	r3, r0
   a53c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
												//cl_wait(100);
						break;
   a53cc:	bf00      	nop
										default:
										break;
									}
								}

				break;
   a53ce:	e056      	b.n	a547e <Cl_Standby_Controller+0x5e6>
				case EVENT_STBY_SET_DATA:
				if(Cl_ConsoleRxMsg.msgready == true)
   a53d0:	4b17      	ldr	r3, [pc, #92]	; (a5430 <Cl_Standby_Controller+0x598>)
   a53d2:	7e1b      	ldrb	r3, [r3, #24]
   a53d4:	2b00      	cmp	r3, #0
   a53d6:	d021      	beq.n	a541c <Cl_Standby_Controller+0x584>
				{
					
					switch(Cl_ConsoleRxMsg.data.byte[0])
   a53d8:	4b15      	ldr	r3, [pc, #84]	; (a5430 <Cl_Standby_Controller+0x598>)
   a53da:	791b      	ldrb	r3, [r3, #4]
   a53dc:	2b01      	cmp	r3, #1
   a53de:	d000      	beq.n	a53e2 <Cl_Standby_Controller+0x54a>
						//Reset the  OPENFILL time count
						cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
						//cl_wait(10);
						break;
						default:
						break;
   a53e0:	e01c      	b.n	a541c <Cl_Standby_Controller+0x584>
					switch(Cl_ConsoleRxMsg.data.byte[0])
					{
						case CON_RX_PARAM_DATA_RINSE_STATUS:
					//	cl_wait(10);
						
						con_command = CON_TX_COMMAND_SYSDATA;
   a53e2:	2316      	movs	r3, #22
   a53e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						//cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
						dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   a53e8:	2301      	movs	r3, #1
   a53ea:	f887 3020 	strb.w	r3, [r7, #32]
					//	cl_stby_retval =sv_nvmsetdata(Cl_ConsoleRxMsg.data.byte[0],&Cl_ConsoleRxMsg.data.byte[1]);
						cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a53ee:	f107 0320 	add.w	r3, r7, #32
   a53f2:	3301      	adds	r3, #1
   a53f4:	2001      	movs	r0, #1
   a53f6:	4619      	mov	r1, r3
   a53f8:	4b15      	ldr	r3, [pc, #84]	; (a5450 <Cl_Standby_Controller+0x5b8>)
   a53fa:	4798      	blx	r3
   a53fc:	4603      	mov	r3, r0
   a53fe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
						
						//Reset the  OPENFILL time count
						cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   a5402:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   a5406:	f107 0320 	add.w	r3, r7, #32
   a540a:	4610      	mov	r0, r2
   a540c:	4619      	mov	r1, r3
   a540e:	2202      	movs	r2, #2
   a5410:	4b0c      	ldr	r3, [pc, #48]	; (a5444 <Cl_Standby_Controller+0x5ac>)
   a5412:	4798      	blx	r3
   a5414:	4603      	mov	r3, r0
   a5416:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
						//cl_wait(10);
						break;
   a541a:	bf00      	nop
						default:
						break;
					}
					
				}
				break;
   a541c:	e02f      	b.n	a547e <Cl_Standby_Controller+0x5e6>
				//Activate V1 time count
				//change state to V1
				// send update to console
				//Cl_SendDatatoconsole();
				//command = CON_TX_HELLO;
				con_command = CON_TX_COMMAND_ALARM;
   a541e:	2307      	movs	r3, #7
   a5420:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				//cl_stby_retval =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON , false );
				//cl_stby_retval =  Cl_AlarmActivateAlarms(LEVELSWITCH2 , false );
				//cl_stby_retval = Cl_SendDatatoconsole(con_command,&data,0);
				cl_stby_retval = Cl_standby_ProcessAlarms();
   a5424:	4b0b      	ldr	r3, [pc, #44]	; (a5454 <Cl_Standby_Controller+0x5bc>)
   a5426:	4798      	blx	r3
   a5428:	4603      	mov	r3, r0
   a542a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

				break;
   a542e:	e026      	b.n	a547e <Cl_Standby_Controller+0x5e6>
   a5430:	200723f0 	.word	0x200723f0
   a5434:	cccccccd 	.word	0xcccccccd
   a5438:	000a68a9 	.word	0x000a68a9
   a543c:	20072104 	.word	0x20072104
   a5440:	20070dc0 	.word	0x20070dc0
   a5444:	0009ba51 	.word	0x0009ba51
   a5448:	20071ccc 	.word	0x20071ccc
   a544c:	000a5abd 	.word	0x000a5abd
   a5450:	0009a545 	.word	0x0009a545
   a5454:	000a5b5d 	.word	0x000a5b5d
				case	EVENT_STBY_TICK_SECOND:
				Cl_StbRinsesecondscounter++;
   a5458:	4bc2      	ldr	r3, [pc, #776]	; (a5764 <Cl_Standby_Controller+0x8cc>)
   a545a:	681b      	ldr	r3, [r3, #0]
   a545c:	3301      	adds	r3, #1
   a545e:	4ac1      	ldr	r2, [pc, #772]	; (a5764 <Cl_Standby_Controller+0x8cc>)
   a5460:	6013      	str	r3, [r2, #0]
				//cl_stby_retval = Cl_StabyRinse_UpdateTimeInfo();
				//cl_stby_retval = Cl_standby_ProcessAlarms();
				cl_stby_retval = Cl_standby_UpdateAlarmTable(&ClstbyAlarmId );
   a5462:	f107 031f 	add.w	r3, r7, #31
   a5466:	4618      	mov	r0, r3
   a5468:	4bbf      	ldr	r3, [pc, #764]	; (a5768 <Cl_Standby_Controller+0x8d0>)
   a546a:	4798      	blx	r3
   a546c:	4603      	mov	r3, r0
   a546e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				
				
				break;
   a5472:	e004      	b.n	a547e <Cl_Standby_Controller+0x5e6>
				case EVENT_STBY_TICK_MINUTES:
				Cl_StbRinsesecondscounter =0;
   a5474:	4bbb      	ldr	r3, [pc, #748]	; (a5764 <Cl_Standby_Controller+0x8cc>)
   a5476:	2200      	movs	r2, #0
   a5478:	601a      	str	r2, [r3, #0]
			//	printf("M");
				break;
   a547a:	e000      	b.n	a547e <Cl_Standby_Controller+0x5e6>
			//	printf("H");
				break;

				
				default:
				break;
   a547c:	bf00      	nop
			}
			break;
   a547e:	e1c6      	b.n	a580e <Cl_Standby_Controller+0x976>
			case CL_STBY_STATE_V2:
			switch (cl_stdby_event)
   a5480:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
   a5484:	3b06      	subs	r3, #6
   a5486:	2b07      	cmp	r3, #7
   a5488:	d877      	bhi.n	a557a <Cl_Standby_Controller+0x6e2>
   a548a:	a201      	add	r2, pc, #4	; (adr r2, a5490 <Cl_Standby_Controller+0x5f8>)
   a548c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a5490:	000a555d 	.word	0x000a555d
   a5494:	000a5573 	.word	0x000a5573
   a5498:	000a557b 	.word	0x000a557b
   a549c:	000a553d 	.word	0x000a553d
   a54a0:	000a54b1 	.word	0x000a54b1
   a54a4:	000a557b 	.word	0x000a557b
   a54a8:	000a557b 	.word	0x000a557b
   a54ac:	000a557b 	.word	0x000a557b
			{
				case EVENT_STBY_DIALYSIS_PREP:
				// check for alarms and change hardware status as required before going to dialysis prepration
				break;
				case EVENT_STBY_GET_DATA:
								if(Cl_ConsoleRxMsg.msgready == true)
   a54b0:	4bae      	ldr	r3, [pc, #696]	; (a576c <Cl_Standby_Controller+0x8d4>)
   a54b2:	7e1b      	ldrb	r3, [r3, #24]
   a54b4:	2b00      	cmp	r3, #0
   a54b6:	d040      	beq.n	a553a <Cl_Standby_Controller+0x6a2>
								{
									
									switch(Cl_ConsoleRxMsg.data.byte[0])
   a54b8:	4bac      	ldr	r3, [pc, #688]	; (a576c <Cl_Standby_Controller+0x8d4>)
   a54ba:	791b      	ldrb	r3, [r3, #4]
   a54bc:	2b01      	cmp	r3, #1
   a54be:	d002      	beq.n	a54c6 <Cl_Standby_Controller+0x62e>
   a54c0:	2b21      	cmp	r3, #33	; 0x21
   a54c2:	d01d      	beq.n	a5500 <Cl_Standby_Controller+0x668>
												//Reset the  OPENFILL time count
												cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
												//cl_wait(100);
										break;
										default:
										break;
   a54c4:	e039      	b.n	a553a <Cl_Standby_Controller+0x6a2>
									switch(Cl_ConsoleRxMsg.data.byte[0])
									{
										case CON_RX_PARAM_DATA_RINSE_STATUS:
										//	cl_wait(10);
										
										con_command = CON_TX_COMMAND_SYSDATA;
   a54c6:	2316      	movs	r3, #22
   a54c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
										//cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
										dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   a54cc:	2301      	movs	r3, #1
   a54ce:	f887 3020 	strb.w	r3, [r7, #32]
										cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a54d2:	f107 0320 	add.w	r3, r7, #32
   a54d6:	3301      	adds	r3, #1
   a54d8:	2001      	movs	r0, #1
   a54da:	4619      	mov	r1, r3
   a54dc:	4ba4      	ldr	r3, [pc, #656]	; (a5770 <Cl_Standby_Controller+0x8d8>)
   a54de:	4798      	blx	r3
   a54e0:	4603      	mov	r3, r0
   a54e2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
										
										//Reset the  OPENFILL time count
										cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   a54e6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   a54ea:	f107 0320 	add.w	r3, r7, #32
   a54ee:	4610      	mov	r0, r2
   a54f0:	4619      	mov	r1, r3
   a54f2:	2202      	movs	r2, #2
   a54f4:	4b9f      	ldr	r3, [pc, #636]	; (a5774 <Cl_Standby_Controller+0x8dc>)
   a54f6:	4798      	blx	r3
   a54f8:	4603      	mov	r3, r0
   a54fa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
										//cl_wait(10);
										break;
   a54fe:	e01c      	b.n	a553a <Cl_Standby_Controller+0x6a2>
										case CON_RX_PARAM_DATA_DISINF_STATUS:
											//	cl_wait(10);
													
												con_command = CON_TX_COMMAND_SYSDATA;
   a5500:	2316      	movs	r3, #22
   a5502:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
												//cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
												dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;								
   a5506:	2323      	movs	r3, #35	; 0x23
   a5508:	f887 3020 	strb.w	r3, [r7, #32]
												cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a550c:	f107 0320 	add.w	r3, r7, #32
   a5510:	3301      	adds	r3, #1
   a5512:	2001      	movs	r0, #1
   a5514:	4619      	mov	r1, r3
   a5516:	4b96      	ldr	r3, [pc, #600]	; (a5770 <Cl_Standby_Controller+0x8d8>)
   a5518:	4798      	blx	r3
   a551a:	4603      	mov	r3, r0
   a551c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
													
												//Reset the  OPENFILL time count
												cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   a5520:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   a5524:	f107 0320 	add.w	r3, r7, #32
   a5528:	4610      	mov	r0, r2
   a552a:	4619      	mov	r1, r3
   a552c:	2202      	movs	r2, #2
   a552e:	4b91      	ldr	r3, [pc, #580]	; (a5774 <Cl_Standby_Controller+0x8dc>)
   a5530:	4798      	blx	r3
   a5532:	4603      	mov	r3, r0
   a5534:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
												//cl_wait(100);
										break;
   a5538:	bf00      	nop
										default:
										break;
									}
								}
				break;
   a553a:	e01f      	b.n	a557c <Cl_Standby_Controller+0x6e4>
				//Activate V1 time count
				//change state to V1
				// send update to console
				//Cl_SendDatatoconsole();
				//command = CON_TX_HELLO;
				con_command = CON_TX_COMMAND_ALARM;
   a553c:	2307      	movs	r3, #7
   a553e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				//cl_stby_retval =  Cl_AlarmActivateAlarms(LEVELSWITCH_OFF_TO_ON , false );
				//cl_stby_retval =  Cl_AlarmActivateAlarms(LEVELSWITCH2 , false );
				cl_stby_retval = Cl_SendDatatoconsole(con_command,&data,0);
   a5542:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   a5546:	f107 0324 	add.w	r3, r7, #36	; 0x24
   a554a:	4610      	mov	r0, r2
   a554c:	4619      	mov	r1, r3
   a554e:	2200      	movs	r2, #0
   a5550:	4b88      	ldr	r3, [pc, #544]	; (a5774 <Cl_Standby_Controller+0x8dc>)
   a5552:	4798      	blx	r3
   a5554:	4603      	mov	r3, r0
   a5556:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

				break;
   a555a:	e00f      	b.n	a557c <Cl_Standby_Controller+0x6e4>
				case	EVENT_STBY_TICK_SECOND:
				Cl_StbRinsesecondscounter++;
   a555c:	4b81      	ldr	r3, [pc, #516]	; (a5764 <Cl_Standby_Controller+0x8cc>)
   a555e:	681b      	ldr	r3, [r3, #0]
   a5560:	3301      	adds	r3, #1
   a5562:	4a80      	ldr	r2, [pc, #512]	; (a5764 <Cl_Standby_Controller+0x8cc>)
   a5564:	6013      	str	r3, [r2, #0]
				cl_stby_retval = Cl_StabyRinse_UpdateTimeInfo();
   a5566:	4b84      	ldr	r3, [pc, #528]	; (a5778 <Cl_Standby_Controller+0x8e0>)
   a5568:	4798      	blx	r3
   a556a:	4603      	mov	r3, r0
   a556c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
				break;
   a5570:	e004      	b.n	a557c <Cl_Standby_Controller+0x6e4>
				case EVENT_STBY_TICK_MINUTES:
				Cl_StbRinsesecondscounter =0;
   a5572:	4b7c      	ldr	r3, [pc, #496]	; (a5764 <Cl_Standby_Controller+0x8cc>)
   a5574:	2200      	movs	r2, #0
   a5576:	601a      	str	r2, [r3, #0]
			//	printf("M");
				break;
   a5578:	e000      	b.n	a557c <Cl_Standby_Controller+0x6e4>
			//	printf("H");
				break;

				
				default:
				break;
   a557a:	bf00      	nop
			}
			break;
   a557c:	e147      	b.n	a580e <Cl_Standby_Controller+0x976>
			case CL_STBY_STATE_BO1_V4:
						switch (cl_stdby_event)
   a557e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
   a5582:	2b0a      	cmp	r3, #10
   a5584:	d002      	beq.n	a558c <Cl_Standby_Controller+0x6f4>
   a5586:	2b0d      	cmp	r3, #13
   a5588:	d046      	beq.n	a5618 <Cl_Standby_Controller+0x780>

							case EVENT_STBY_DIALYSIS_PREP:
							// check for alarms and change hardware status as required before going to dialysis prepration
							break;
							default:
							break;
   a558a:	e046      	b.n	a561a <Cl_Standby_Controller+0x782>
			break;
			case CL_STBY_STATE_BO1_V4:
						switch (cl_stdby_event)
						{
							case EVENT_STBY_GET_DATA:
										if(Cl_ConsoleRxMsg.msgready == true)
   a558c:	4b77      	ldr	r3, [pc, #476]	; (a576c <Cl_Standby_Controller+0x8d4>)
   a558e:	7e1b      	ldrb	r3, [r3, #24]
   a5590:	2b00      	cmp	r3, #0
   a5592:	d040      	beq.n	a5616 <Cl_Standby_Controller+0x77e>
										{
											
											switch(Cl_ConsoleRxMsg.data.byte[0])
   a5594:	4b75      	ldr	r3, [pc, #468]	; (a576c <Cl_Standby_Controller+0x8d4>)
   a5596:	791b      	ldrb	r3, [r3, #4]
   a5598:	2b01      	cmp	r3, #1
   a559a:	d002      	beq.n	a55a2 <Cl_Standby_Controller+0x70a>
   a559c:	2b21      	cmp	r3, #33	; 0x21
   a559e:	d01d      	beq.n	a55dc <Cl_Standby_Controller+0x744>
														//Reset the  OPENFILL time count
														cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
														//cl_wait(100);
												break;
												default:
												break;
   a55a0:	e039      	b.n	a5616 <Cl_Standby_Controller+0x77e>
											switch(Cl_ConsoleRxMsg.data.byte[0])
											{
												case CON_RX_PARAM_DATA_RINSE_STATUS:
												//	cl_wait(10);
												
												con_command = CON_TX_COMMAND_SYSDATA;
   a55a2:	2316      	movs	r3, #22
   a55a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
												//cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
												dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   a55a8:	2301      	movs	r3, #1
   a55aa:	f887 3020 	strb.w	r3, [r7, #32]
												cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a55ae:	f107 0320 	add.w	r3, r7, #32
   a55b2:	3301      	adds	r3, #1
   a55b4:	2001      	movs	r0, #1
   a55b6:	4619      	mov	r1, r3
   a55b8:	4b6d      	ldr	r3, [pc, #436]	; (a5770 <Cl_Standby_Controller+0x8d8>)
   a55ba:	4798      	blx	r3
   a55bc:	4603      	mov	r3, r0
   a55be:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	
												cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   a55c2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   a55c6:	f107 0320 	add.w	r3, r7, #32
   a55ca:	4610      	mov	r0, r2
   a55cc:	4619      	mov	r1, r3
   a55ce:	2202      	movs	r2, #2
   a55d0:	4b68      	ldr	r3, [pc, #416]	; (a5774 <Cl_Standby_Controller+0x8dc>)
   a55d2:	4798      	blx	r3
   a55d4:	4603      	mov	r3, r0
   a55d6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
												//cl_wait(10);
												break;
   a55da:	e01c      	b.n	a5616 <Cl_Standby_Controller+0x77e>
												case CON_RX_PARAM_DATA_DISINF_STATUS:
													//	cl_wait(10);
													
														con_command = CON_TX_COMMAND_SYSDATA;
   a55dc:	2316      	movs	r3, #22
   a55de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
														//cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
														dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;								
   a55e2:	2323      	movs	r3, #35	; 0x23
   a55e4:	f887 3020 	strb.w	r3, [r7, #32]
														cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a55e8:	f107 0320 	add.w	r3, r7, #32
   a55ec:	3301      	adds	r3, #1
   a55ee:	2001      	movs	r0, #1
   a55f0:	4619      	mov	r1, r3
   a55f2:	4b5f      	ldr	r3, [pc, #380]	; (a5770 <Cl_Standby_Controller+0x8d8>)
   a55f4:	4798      	blx	r3
   a55f6:	4603      	mov	r3, r0
   a55f8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
													
														//Reset the  OPENFILL time count
														cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   a55fc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   a5600:	f107 0320 	add.w	r3, r7, #32
   a5604:	4610      	mov	r0, r2
   a5606:	4619      	mov	r1, r3
   a5608:	2202      	movs	r2, #2
   a560a:	4b5a      	ldr	r3, [pc, #360]	; (a5774 <Cl_Standby_Controller+0x8dc>)
   a560c:	4798      	blx	r3
   a560e:	4603      	mov	r3, r0
   a5610:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
														//cl_wait(100);
												break;
   a5614:	bf00      	nop
												default:
												break;
											}
										}
							break;
   a5616:	e000      	b.n	a561a <Cl_Standby_Controller+0x782>

							case EVENT_STBY_DIALYSIS_PREP:
							// check for alarms and change hardware status as required before going to dialysis prepration
							break;
   a5618:	bf00      	nop
							default:
							break;
						}
			break;
   a561a:	e0f8      	b.n	a580e <Cl_Standby_Controller+0x976>
			case CL_STBY_STATE_BO2_V4:
						switch (cl_stdby_event)
   a561c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
   a5620:	2b0a      	cmp	r3, #10
   a5622:	d002      	beq.n	a562a <Cl_Standby_Controller+0x792>
   a5624:	2b0d      	cmp	r3, #13
   a5626:	d046      	beq.n	a56b6 <Cl_Standby_Controller+0x81e>

							case EVENT_STBY_DIALYSIS_PREP:
							// check for alarms and change hardware status as required before going to dialysis prepration
							break;
							default:
							break;
   a5628:	e046      	b.n	a56b8 <Cl_Standby_Controller+0x820>
			break;
			case CL_STBY_STATE_BO2_V4:
						switch (cl_stdby_event)
						{
							case EVENT_STBY_GET_DATA:
								if(Cl_ConsoleRxMsg.msgready == true)
   a562a:	4b50      	ldr	r3, [pc, #320]	; (a576c <Cl_Standby_Controller+0x8d4>)
   a562c:	7e1b      	ldrb	r3, [r3, #24]
   a562e:	2b00      	cmp	r3, #0
   a5630:	d040      	beq.n	a56b4 <Cl_Standby_Controller+0x81c>
								{
									
									switch(Cl_ConsoleRxMsg.data.byte[0])
   a5632:	4b4e      	ldr	r3, [pc, #312]	; (a576c <Cl_Standby_Controller+0x8d4>)
   a5634:	791b      	ldrb	r3, [r3, #4]
   a5636:	2b01      	cmp	r3, #1
   a5638:	d002      	beq.n	a5640 <Cl_Standby_Controller+0x7a8>
   a563a:	2b21      	cmp	r3, #33	; 0x21
   a563c:	d01d      	beq.n	a567a <Cl_Standby_Controller+0x7e2>
												//Reset the  OPENFILL time count
												cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
												//cl_wait(100);
										break;
										default:
										break;
   a563e:	e039      	b.n	a56b4 <Cl_Standby_Controller+0x81c>
									switch(Cl_ConsoleRxMsg.data.byte[0])
									{
										case CON_RX_PARAM_DATA_RINSE_STATUS:
										//	cl_wait(10);
										
										con_command = CON_TX_COMMAND_SYSDATA;
   a5640:	2316      	movs	r3, #22
   a5642:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
										//cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
										dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   a5646:	2301      	movs	r3, #1
   a5648:	f887 3020 	strb.w	r3, [r7, #32]
										cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a564c:	f107 0320 	add.w	r3, r7, #32
   a5650:	3301      	adds	r3, #1
   a5652:	2001      	movs	r0, #1
   a5654:	4619      	mov	r1, r3
   a5656:	4b46      	ldr	r3, [pc, #280]	; (a5770 <Cl_Standby_Controller+0x8d8>)
   a5658:	4798      	blx	r3
   a565a:	4603      	mov	r3, r0
   a565c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
										
										//Reset the  OPENFILL time count
										cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   a5660:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   a5664:	f107 0320 	add.w	r3, r7, #32
   a5668:	4610      	mov	r0, r2
   a566a:	4619      	mov	r1, r3
   a566c:	2202      	movs	r2, #2
   a566e:	4b41      	ldr	r3, [pc, #260]	; (a5774 <Cl_Standby_Controller+0x8dc>)
   a5670:	4798      	blx	r3
   a5672:	4603      	mov	r3, r0
   a5674:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
										//cl_wait(10);
										break;
   a5678:	e01c      	b.n	a56b4 <Cl_Standby_Controller+0x81c>
										case CON_RX_PARAM_DATA_DISINF_STATUS:
											//	cl_wait(10);
													
												con_command = CON_TX_COMMAND_SYSDATA;
   a567a:	2316      	movs	r3, #22
   a567c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
												//cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
												dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;								
   a5680:	2323      	movs	r3, #35	; 0x23
   a5682:	f887 3020 	strb.w	r3, [r7, #32]
												cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a5686:	f107 0320 	add.w	r3, r7, #32
   a568a:	3301      	adds	r3, #1
   a568c:	2001      	movs	r0, #1
   a568e:	4619      	mov	r1, r3
   a5690:	4b37      	ldr	r3, [pc, #220]	; (a5770 <Cl_Standby_Controller+0x8d8>)
   a5692:	4798      	blx	r3
   a5694:	4603      	mov	r3, r0
   a5696:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
													
												//Reset the  OPENFILL time count
												cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   a569a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   a569e:	f107 0320 	add.w	r3, r7, #32
   a56a2:	4610      	mov	r0, r2
   a56a4:	4619      	mov	r1, r3
   a56a6:	2202      	movs	r2, #2
   a56a8:	4b32      	ldr	r3, [pc, #200]	; (a5774 <Cl_Standby_Controller+0x8dc>)
   a56aa:	4798      	blx	r3
   a56ac:	4603      	mov	r3, r0
   a56ae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
												//cl_wait(100);
										break;
   a56b2:	bf00      	nop
										default:
										break;
									}
								}
							break;
   a56b4:	e000      	b.n	a56b8 <Cl_Standby_Controller+0x820>

							case EVENT_STBY_DIALYSIS_PREP:
							// check for alarms and change hardware status as required before going to dialysis prepration
							break;
   a56b6:	bf00      	nop
							default:
							break;
						}
			case CL_STBY_STATE_BO1_V13V14:
						switch (cl_stdby_event)
   a56b8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
   a56bc:	2b0a      	cmp	r3, #10
   a56be:	d002      	beq.n	a56c6 <Cl_Standby_Controller+0x82e>
   a56c0:	2b0d      	cmp	r3, #13
   a56c2:	d046      	beq.n	a5752 <Cl_Standby_Controller+0x8ba>

							case EVENT_STBY_DIALYSIS_PREP:
							// check for alarms and change hardware status as required before going to dialysis prepration
							break;
							default:
							break;
   a56c4:	e046      	b.n	a5754 <Cl_Standby_Controller+0x8bc>
						}
			case CL_STBY_STATE_BO1_V13V14:
						switch (cl_stdby_event)
						{
							case EVENT_STBY_GET_DATA:
								if(Cl_ConsoleRxMsg.msgready == true)
   a56c6:	4b29      	ldr	r3, [pc, #164]	; (a576c <Cl_Standby_Controller+0x8d4>)
   a56c8:	7e1b      	ldrb	r3, [r3, #24]
   a56ca:	2b00      	cmp	r3, #0
   a56cc:	d040      	beq.n	a5750 <Cl_Standby_Controller+0x8b8>
								{
									
									switch(Cl_ConsoleRxMsg.data.byte[0])
   a56ce:	4b27      	ldr	r3, [pc, #156]	; (a576c <Cl_Standby_Controller+0x8d4>)
   a56d0:	791b      	ldrb	r3, [r3, #4]
   a56d2:	2b01      	cmp	r3, #1
   a56d4:	d002      	beq.n	a56dc <Cl_Standby_Controller+0x844>
   a56d6:	2b21      	cmp	r3, #33	; 0x21
   a56d8:	d01d      	beq.n	a5716 <Cl_Standby_Controller+0x87e>
												//Reset the  OPENFILL time count
												cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
												//cl_wait(100);
										break;
										default:
										break;
   a56da:	e039      	b.n	a5750 <Cl_Standby_Controller+0x8b8>
									switch(Cl_ConsoleRxMsg.data.byte[0])
									{
										case CON_RX_PARAM_DATA_RINSE_STATUS:
										//	cl_wait(10);
										
										con_command = CON_TX_COMMAND_SYSDATA;
   a56dc:	2316      	movs	r3, #22
   a56de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
										//cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
										dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   a56e2:	2301      	movs	r3, #1
   a56e4:	f887 3020 	strb.w	r3, [r7, #32]
										cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a56e8:	f107 0320 	add.w	r3, r7, #32
   a56ec:	3301      	adds	r3, #1
   a56ee:	2001      	movs	r0, #1
   a56f0:	4619      	mov	r1, r3
   a56f2:	4b1f      	ldr	r3, [pc, #124]	; (a5770 <Cl_Standby_Controller+0x8d8>)
   a56f4:	4798      	blx	r3
   a56f6:	4603      	mov	r3, r0
   a56f8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
										
										//Reset the  OPENFILL time count
										cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   a56fc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   a5700:	f107 0320 	add.w	r3, r7, #32
   a5704:	4610      	mov	r0, r2
   a5706:	4619      	mov	r1, r3
   a5708:	2202      	movs	r2, #2
   a570a:	4b1a      	ldr	r3, [pc, #104]	; (a5774 <Cl_Standby_Controller+0x8dc>)
   a570c:	4798      	blx	r3
   a570e:	4603      	mov	r3, r0
   a5710:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
										//cl_wait(10);
										break;
   a5714:	e01c      	b.n	a5750 <Cl_Standby_Controller+0x8b8>
										case CON_RX_PARAM_DATA_DISINF_STATUS:
											//	cl_wait(10);
													
												con_command = CON_TX_COMMAND_SYSDATA;
   a5716:	2316      	movs	r3, #22
   a5718:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
												//cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
												dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;								
   a571c:	2323      	movs	r3, #35	; 0x23
   a571e:	f887 3020 	strb.w	r3, [r7, #32]
												cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a5722:	f107 0320 	add.w	r3, r7, #32
   a5726:	3301      	adds	r3, #1
   a5728:	2001      	movs	r0, #1
   a572a:	4619      	mov	r1, r3
   a572c:	4b10      	ldr	r3, [pc, #64]	; (a5770 <Cl_Standby_Controller+0x8d8>)
   a572e:	4798      	blx	r3
   a5730:	4603      	mov	r3, r0
   a5732:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
													
												//Reset the  OPENFILL time count
												cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   a5736:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   a573a:	f107 0320 	add.w	r3, r7, #32
   a573e:	4610      	mov	r0, r2
   a5740:	4619      	mov	r1, r3
   a5742:	2202      	movs	r2, #2
   a5744:	4b0b      	ldr	r3, [pc, #44]	; (a5774 <Cl_Standby_Controller+0x8dc>)
   a5746:	4798      	blx	r3
   a5748:	4603      	mov	r3, r0
   a574a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
												//cl_wait(100);
										break;
   a574e:	bf00      	nop
										default:
										break;
									}
								}
							break;
   a5750:	e000      	b.n	a5754 <Cl_Standby_Controller+0x8bc>

							case EVENT_STBY_DIALYSIS_PREP:
							// check for alarms and change hardware status as required before going to dialysis prepration
							break;
   a5752:	bf00      	nop
							default:
							break;
						}
			break;
   a5754:	e05b      	b.n	a580e <Cl_Standby_Controller+0x976>
			case CL_STBY_STATE_BO2_V13V14:
						switch (cl_stdby_event)
   a5756:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
   a575a:	2b0a      	cmp	r3, #10
   a575c:	d00e      	beq.n	a577c <Cl_Standby_Controller+0x8e4>
   a575e:	2b0d      	cmp	r3, #13
   a5760:	d052      	beq.n	a5808 <Cl_Standby_Controller+0x970>

							case EVENT_STBY_DIALYSIS_PREP:
							// check for alarms and change hardware status as required before going to dialysis prepration
							break;
							default:
							break;
   a5762:	e052      	b.n	a580a <Cl_Standby_Controller+0x972>
   a5764:	20071ccc 	.word	0x20071ccc
   a5768:	000a5bc9 	.word	0x000a5bc9
   a576c:	200723f0 	.word	0x200723f0
   a5770:	0009a545 	.word	0x0009a545
   a5774:	0009ba51 	.word	0x0009ba51
   a5778:	000a5abd 	.word	0x000a5abd
			break;
			case CL_STBY_STATE_BO2_V13V14:
						switch (cl_stdby_event)
						{
							case EVENT_STBY_GET_DATA:
								if(Cl_ConsoleRxMsg.msgready == true)
   a577c:	4b26      	ldr	r3, [pc, #152]	; (a5818 <Cl_Standby_Controller+0x980>)
   a577e:	7e1b      	ldrb	r3, [r3, #24]
   a5780:	2b00      	cmp	r3, #0
   a5782:	d040      	beq.n	a5806 <Cl_Standby_Controller+0x96e>
								{
									
									switch(Cl_ConsoleRxMsg.data.byte[0])
   a5784:	4b24      	ldr	r3, [pc, #144]	; (a5818 <Cl_Standby_Controller+0x980>)
   a5786:	791b      	ldrb	r3, [r3, #4]
   a5788:	2b01      	cmp	r3, #1
   a578a:	d002      	beq.n	a5792 <Cl_Standby_Controller+0x8fa>
   a578c:	2b21      	cmp	r3, #33	; 0x21
   a578e:	d01d      	beq.n	a57cc <Cl_Standby_Controller+0x934>
												//Reset the  OPENFILL time count
												cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
												//cl_wait(100);
										break;
										default:
										break;
   a5790:	e039      	b.n	a5806 <Cl_Standby_Controller+0x96e>
									switch(Cl_ConsoleRxMsg.data.byte[0])
									{
										case CON_RX_PARAM_DATA_RINSE_STATUS:
										//	cl_wait(10);
										
										con_command = CON_TX_COMMAND_SYSDATA;
   a5792:	2316      	movs	r3, #22
   a5794:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
										//cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
										dataarray[0] = CON_TX_PARAM_DATA_RINSE_STATUS;
   a5798:	2301      	movs	r3, #1
   a579a:	f887 3020 	strb.w	r3, [r7, #32]
										cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a579e:	f107 0320 	add.w	r3, r7, #32
   a57a2:	3301      	adds	r3, #1
   a57a4:	2001      	movs	r0, #1
   a57a6:	4619      	mov	r1, r3
   a57a8:	4b1c      	ldr	r3, [pc, #112]	; (a581c <Cl_Standby_Controller+0x984>)
   a57aa:	4798      	blx	r3
   a57ac:	4603      	mov	r3, r0
   a57ae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
										
										//Reset the  OPENFILL time count
										cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   a57b2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   a57b6:	f107 0320 	add.w	r3, r7, #32
   a57ba:	4610      	mov	r0, r2
   a57bc:	4619      	mov	r1, r3
   a57be:	2202      	movs	r2, #2
   a57c0:	4b17      	ldr	r3, [pc, #92]	; (a5820 <Cl_Standby_Controller+0x988>)
   a57c2:	4798      	blx	r3
   a57c4:	4603      	mov	r3, r0
   a57c6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
										//cl_wait(10);
										break;
   a57ca:	e01c      	b.n	a5806 <Cl_Standby_Controller+0x96e>
										case CON_RX_PARAM_DATA_DISINF_STATUS:
											//	cl_wait(10);
													
												con_command = CON_TX_COMMAND_SYSDATA;
   a57cc:	2316      	movs	r3, #22
   a57ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
												//cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_RINSE_NVM_RINSE_STATUS, &data);
												dataarray[0] = CON_TX_PARAM_DATA_DISINF_STATUS;								
   a57d2:	2323      	movs	r3, #35	; 0x23
   a57d4:	f887 3020 	strb.w	r3, [r7, #32]
												cl_stby_retval = (Cl_Uint8Type)sv_nvmgetdata(NV_NVM_RINSE_STATUS, &dataarray[1]);
   a57d8:	f107 0320 	add.w	r3, r7, #32
   a57dc:	3301      	adds	r3, #1
   a57de:	2001      	movs	r0, #1
   a57e0:	4619      	mov	r1, r3
   a57e2:	4b0e      	ldr	r3, [pc, #56]	; (a581c <Cl_Standby_Controller+0x984>)
   a57e4:	4798      	blx	r3
   a57e6:	4603      	mov	r3, r0
   a57e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
													
												//Reset the  OPENFILL time count
												cl_stby_retval = Cl_SendDatatoconsole(con_command,&dataarray,2);
   a57ec:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
   a57f0:	f107 0320 	add.w	r3, r7, #32
   a57f4:	4610      	mov	r0, r2
   a57f6:	4619      	mov	r1, r3
   a57f8:	2202      	movs	r2, #2
   a57fa:	4b09      	ldr	r3, [pc, #36]	; (a5820 <Cl_Standby_Controller+0x988>)
   a57fc:	4798      	blx	r3
   a57fe:	4603      	mov	r3, r0
   a5800:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
												//cl_wait(100);
										break;
   a5804:	bf00      	nop
										default:
										break;
									}
								}
							break;
   a5806:	e000      	b.n	a580a <Cl_Standby_Controller+0x972>

							case EVENT_STBY_DIALYSIS_PREP:
							// check for alarms and change hardware status as required before going to dialysis prepration
							break;
   a5808:	bf00      	nop
							default:
							break;
						}
			break;
   a580a:	e000      	b.n	a580e <Cl_Standby_Controller+0x976>
			break;
			case CL_STBY_STATE_STOP:
			break;

			default:
			break;
   a580c:	bf00      	nop
		}

	
return CL_OK;
   a580e:	2300      	movs	r3, #0
}
   a5810:	4618      	mov	r0, r3
   a5812:	3728      	adds	r7, #40	; 0x28
   a5814:	46bd      	mov	sp, r7
   a5816:	bd80      	pop	{r7, pc}
   a5818:	200723f0 	.word	0x200723f0
   a581c:	0009a545 	.word	0x0009a545
   a5820:	0009ba51 	.word	0x0009ba51

000a5824 <cl_stby_translatemacevent>:



Cl_ReturnCodeType  cl_stby_translatemacevent(Cl_Mac_EventsType Cl_MacStbyEvent,Cl_Stby_Events* cl_stdby_event)
{
   a5824:	b480      	push	{r7}
   a5826:	b083      	sub	sp, #12
   a5828:	af00      	add	r7, sp, #0
   a582a:	4603      	mov	r3, r0
   a582c:	6039      	str	r1, [r7, #0]
   a582e:	71fb      	strb	r3, [r7, #7]
	//dummy1  =  Cl_MacStbyEvent;
	
	//switch(dummy1)
	
		*cl_stdby_event =	EVENT_STBY_NULL;
   a5830:	683b      	ldr	r3, [r7, #0]
   a5832:	2200      	movs	r2, #0
   a5834:	701a      	strb	r2, [r3, #0]
		
	switch(Cl_MacStbyEvent)
   a5836:	79fb      	ldrb	r3, [r7, #7]
   a5838:	3b07      	subs	r3, #7
   a583a:	2b55      	cmp	r3, #85	; 0x55
   a583c:	f200 80e8 	bhi.w	a5a10 <cl_stby_translatemacevent+0x1ec>
   a5840:	a201      	add	r2, pc, #4	; (adr r2, a5848 <cl_stby_translatemacevent+0x24>)
   a5842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   a5846:	bf00      	nop
   a5848:	000a59d1 	.word	0x000a59d1
   a584c:	000a5a11 	.word	0x000a5a11
   a5850:	000a59d9 	.word	0x000a59d9
   a5854:	000a59e1 	.word	0x000a59e1
   a5858:	000a59e9 	.word	0x000a59e9
   a585c:	000a59f1 	.word	0x000a59f1
   a5860:	000a5a11 	.word	0x000a5a11
   a5864:	000a59c9 	.word	0x000a59c9
   a5868:	000a5a11 	.word	0x000a5a11
   a586c:	000a59f9 	.word	0x000a59f9
   a5870:	000a5a11 	.word	0x000a5a11
   a5874:	000a5a11 	.word	0x000a5a11
   a5878:	000a5a11 	.word	0x000a5a11
   a587c:	000a5a11 	.word	0x000a5a11
   a5880:	000a5a11 	.word	0x000a5a11
   a5884:	000a5a11 	.word	0x000a5a11
   a5888:	000a5a11 	.word	0x000a5a11
   a588c:	000a5a11 	.word	0x000a5a11
   a5890:	000a5a11 	.word	0x000a5a11
   a5894:	000a5a11 	.word	0x000a5a11
   a5898:	000a5a11 	.word	0x000a5a11
   a589c:	000a5a11 	.word	0x000a5a11
   a58a0:	000a5a11 	.word	0x000a5a11
   a58a4:	000a5a11 	.word	0x000a5a11
   a58a8:	000a5a11 	.word	0x000a5a11
   a58ac:	000a5a11 	.word	0x000a5a11
   a58b0:	000a5a11 	.word	0x000a5a11
   a58b4:	000a5a11 	.word	0x000a5a11
   a58b8:	000a5a11 	.word	0x000a5a11
   a58bc:	000a5a11 	.word	0x000a5a11
   a58c0:	000a5a11 	.word	0x000a5a11
   a58c4:	000a5a11 	.word	0x000a5a11
   a58c8:	000a5a11 	.word	0x000a5a11
   a58cc:	000a5a11 	.word	0x000a5a11
   a58d0:	000a5a11 	.word	0x000a5a11
   a58d4:	000a5a11 	.word	0x000a5a11
   a58d8:	000a59a1 	.word	0x000a59a1
   a58dc:	000a5a11 	.word	0x000a5a11
   a58e0:	000a5a11 	.word	0x000a5a11
   a58e4:	000a59c1 	.word	0x000a59c1
   a58e8:	000a5a11 	.word	0x000a5a11
   a58ec:	000a5a11 	.word	0x000a5a11
   a58f0:	000a5a11 	.word	0x000a5a11
   a58f4:	000a5a11 	.word	0x000a5a11
   a58f8:	000a5a11 	.word	0x000a5a11
   a58fc:	000a5a11 	.word	0x000a5a11
   a5900:	000a5a11 	.word	0x000a5a11
   a5904:	000a5a11 	.word	0x000a5a11
   a5908:	000a5a11 	.word	0x000a5a11
   a590c:	000a5a11 	.word	0x000a5a11
   a5910:	000a59a9 	.word	0x000a59a9
   a5914:	000a5a11 	.word	0x000a5a11
   a5918:	000a59b1 	.word	0x000a59b1
   a591c:	000a59b9 	.word	0x000a59b9
   a5920:	000a5a11 	.word	0x000a5a11
   a5924:	000a5a11 	.word	0x000a5a11
   a5928:	000a5a11 	.word	0x000a5a11
   a592c:	000a5a11 	.word	0x000a5a11
   a5930:	000a5a11 	.word	0x000a5a11
   a5934:	000a5a11 	.word	0x000a5a11
   a5938:	000a5a11 	.word	0x000a5a11
   a593c:	000a5a11 	.word	0x000a5a11
   a5940:	000a5a11 	.word	0x000a5a11
   a5944:	000a5a11 	.word	0x000a5a11
   a5948:	000a5a11 	.word	0x000a5a11
   a594c:	000a5a11 	.word	0x000a5a11
   a5950:	000a5a11 	.word	0x000a5a11
   a5954:	000a5a11 	.word	0x000a5a11
   a5958:	000a5a11 	.word	0x000a5a11
   a595c:	000a5a11 	.word	0x000a5a11
   a5960:	000a5a11 	.word	0x000a5a11
   a5964:	000a5a11 	.word	0x000a5a11
   a5968:	000a5a11 	.word	0x000a5a11
   a596c:	000a5a11 	.word	0x000a5a11
   a5970:	000a5a11 	.word	0x000a5a11
   a5974:	000a5a11 	.word	0x000a5a11
   a5978:	000a5a11 	.word	0x000a5a11
   a597c:	000a5a11 	.word	0x000a5a11
   a5980:	000a5a11 	.word	0x000a5a11
   a5984:	000a5a11 	.word	0x000a5a11
   a5988:	000a5a11 	.word	0x000a5a11
   a598c:	000a5a11 	.word	0x000a5a11
   a5990:	000a5a11 	.word	0x000a5a11
   a5994:	000a5a11 	.word	0x000a5a11
   a5998:	000a5a01 	.word	0x000a5a01
   a599c:	000a5a09 	.word	0x000a5a09
	{
		case  EVT_COMMAND_ENTER_STANDBY:
		*cl_stdby_event = EVENT_STBY_ENTER_STANDBY;
   a59a0:	683b      	ldr	r3, [r7, #0]
   a59a2:	2201      	movs	r2, #1
   a59a4:	701a      	strb	r2, [r3, #0]
		break;
   a59a6:	e034      	b.n	a5a12 <cl_stby_translatemacevent+0x1ee>
		case EVT_TICK_100M:
		*cl_stdby_event = EVENT_STBY_TICK_100MS;
   a59a8:	683b      	ldr	r3, [r7, #0]
   a59aa:	2204      	movs	r2, #4
   a59ac:	701a      	strb	r2, [r3, #0]
		break;
   a59ae:	e030      	b.n	a5a12 <cl_stby_translatemacevent+0x1ee>
		case EVT_TICK_SEC:
		*cl_stdby_event = EVENT_STBY_TICK_SECOND;
   a59b0:	683b      	ldr	r3, [r7, #0]
   a59b2:	2206      	movs	r2, #6
   a59b4:	701a      	strb	r2, [r3, #0]
		break;
   a59b6:	e02c      	b.n	a5a12 <cl_stby_translatemacevent+0x1ee>
		case EVT_TICK_MIN:
		*cl_stdby_event = EVENT_STBY_TICK_MINUTES;
   a59b8:	683b      	ldr	r3, [r7, #0]
   a59ba:	2207      	movs	r2, #7
   a59bc:	701a      	strb	r2, [r3, #0]
		break;
   a59be:	e028      	b.n	a5a12 <cl_stby_translatemacevent+0x1ee>
		case EVT_TICK_HOUR:
		break;
		case  EVT_ALARM_TRIGGERED:
		*cl_stdby_event = EVENT_STBY_ALARM;
   a59c0:	683b      	ldr	r3, [r7, #0]
   a59c2:	2209      	movs	r2, #9
   a59c4:	701a      	strb	r2, [r3, #0]
		break;
   a59c6:	e024      	b.n	a5a12 <cl_stby_translatemacevent+0x1ee>
		case EVT_CONSOLE_COMMAND_GET_DATA:
		*cl_stdby_event = EVENT_STBY_GET_DATA;
   a59c8:	683b      	ldr	r3, [r7, #0]
   a59ca:	220a      	movs	r2, #10
   a59cc:	701a      	strb	r2, [r3, #0]
		break;
   a59ce:	e020      	b.n	a5a12 <cl_stby_translatemacevent+0x1ee>
		case  EVT_CONSOLE_COMMAND_RINSE_START:
		*cl_stdby_event= EVENT_STBY_START_RINSE;
   a59d0:	683b      	ldr	r3, [r7, #0]
   a59d2:	220c      	movs	r2, #12
   a59d4:	701a      	strb	r2, [r3, #0]
		break;
   a59d6:	e01c      	b.n	a5a12 <cl_stby_translatemacevent+0x1ee>
		case EVT_CONSOLE_COMMAND_DIALYSIS_PREP:
		*cl_stdby_event = EVENT_STBY_DIALYSIS_PREP;
   a59d8:	683b      	ldr	r3, [r7, #0]
   a59da:	220d      	movs	r2, #13
   a59dc:	701a      	strb	r2, [r3, #0]
		break; 
   a59de:	e018      	b.n	a5a12 <cl_stby_translatemacevent+0x1ee>
		case EVT_CONSOLE_COMMAND_SET_BLDPMP_ON:
			*cl_stdby_event = EVENT_STBY_SET_BLDPMP_ON;
   a59e0:	683b      	ldr	r3, [r7, #0]
   a59e2:	220e      	movs	r2, #14
   a59e4:	701a      	strb	r2, [r3, #0]
		break;
   a59e6:	e014      	b.n	a5a12 <cl_stby_translatemacevent+0x1ee>
		case EVT_CONSOLE_COMMAND_SET_BLDPMP_OFF:
			*cl_stdby_event = EVENT_STBY_SET_BLDPMP_OFF;
   a59e8:	683b      	ldr	r3, [r7, #0]
   a59ea:	220f      	movs	r2, #15
   a59ec:	701a      	strb	r2, [r3, #0]
		break;
   a59ee:	e010      	b.n	a5a12 <cl_stby_translatemacevent+0x1ee>
		case EVT_CONSOLE_COMMAND_SET_BLDPUMPRATE:
		*cl_stdby_event = EVENT_STBY__SET_BP_RATE;
   a59f0:	683b      	ldr	r3, [r7, #0]
   a59f2:	2210      	movs	r2, #16
   a59f4:	701a      	strb	r2, [r3, #0]
		break;
   a59f6:	e00c      	b.n	a5a12 <cl_stby_translatemacevent+0x1ee>
		
		case EVENT_STBY__SET_BP_RATE:
			*cl_stdby_event = EVENT_STBY__SET_BP_RATE;
   a59f8:	683b      	ldr	r3, [r7, #0]
   a59fa:	2210      	movs	r2, #16
   a59fc:	701a      	strb	r2, [r3, #0]
		break;
   a59fe:	e008      	b.n	a5a12 <cl_stby_translatemacevent+0x1ee>
		case EVT_CONSOLE_COMMAND_SET_BLDPUMPINC_MANUAL:
		*cl_stdby_event = EVT_CONSOLE_COMMAND_SET_BLDPUMPINC_MANUAL;
   a5a00:	683b      	ldr	r3, [r7, #0]
   a5a02:	225b      	movs	r2, #91	; 0x5b
   a5a04:	701a      	strb	r2, [r3, #0]
		break;
   a5a06:	e004      	b.n	a5a12 <cl_stby_translatemacevent+0x1ee>
		case EVT_CONSOLE_COMMAND_SET_BLDPUMPDEC_MANUAL:
		*cl_stdby_event = EVT_CONSOLE_COMMAND_SET_BLDPUMPDEC_MANUAL;
   a5a08:	683b      	ldr	r3, [r7, #0]
   a5a0a:	225c      	movs	r2, #92	; 0x5c
   a5a0c:	701a      	strb	r2, [r3, #0]
		break;
   a5a0e:	e000      	b.n	a5a12 <cl_stby_translatemacevent+0x1ee>
		default:
		break;
   a5a10:	bf00      	nop
	}
	return CL_OK;
   a5a12:	2300      	movs	r3, #0
}
   a5a14:	4618      	mov	r0, r3
   a5a16:	370c      	adds	r7, #12
   a5a18:	46bd      	mov	sp, r7
   a5a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
   a5a1e:	4770      	bx	lr

000a5a20 <Cl_stby_init>:

 Cl_ReturnCodeType Cl_stby_init(void)
 {
   a5a20:	b580      	push	{r7, lr}
   a5a22:	b082      	sub	sp, #8
   a5a24:	af00      	add	r7, sp, #0
	 Cl_Uint16Type temp;
	 	 Cl_ReturnCodeType cl_stby_retval = CL_ERROR;
   a5a26:	2304      	movs	r3, #4
   a5a28:	717b      	strb	r3, [r7, #5]
		  
		 
		  	 for(temp = 1;temp<=20; temp++)
   a5a2a:	2301      	movs	r3, #1
   a5a2c:	80fb      	strh	r3, [r7, #6]
   a5a2e:	e00a      	b.n	a5a46 <Cl_stby_init+0x26>
		 {
				sv_cntrl_deactivate_valve((sv_valvetype)temp);
   a5a30:	88fb      	ldrh	r3, [r7, #6]
   a5a32:	b2db      	uxtb	r3, r3
   a5a34:	4618      	mov	r0, r3
   a5a36:	4b1b      	ldr	r3, [pc, #108]	; (a5aa4 <Cl_stby_init+0x84>)
   a5a38:	4798      	blx	r3
				cl_wait(10);
   a5a3a:	200a      	movs	r0, #10
   a5a3c:	4b1a      	ldr	r3, [pc, #104]	; (a5aa8 <Cl_stby_init+0x88>)
   a5a3e:	4798      	blx	r3
 {
	 Cl_Uint16Type temp;
	 	 Cl_ReturnCodeType cl_stby_retval = CL_ERROR;
		  
		 
		  	 for(temp = 1;temp<=20; temp++)
   a5a40:	88fb      	ldrh	r3, [r7, #6]
   a5a42:	3301      	adds	r3, #1
   a5a44:	80fb      	strh	r3, [r7, #6]
   a5a46:	88fb      	ldrh	r3, [r7, #6]
   a5a48:	2b14      	cmp	r3, #20
   a5a4a:	d9f1      	bls.n	a5a30 <Cl_stby_init+0x10>
		 {
				sv_cntrl_deactivate_valve((sv_valvetype)temp);
				cl_wait(10);
		 }
		  
	 	cl_stby_retval =  sv_cntrl_deactivatepump(DCMOTOR1);
   a5a4c:	2001      	movs	r0, #1
   a5a4e:	4b17      	ldr	r3, [pc, #92]	; (a5aac <Cl_stby_init+0x8c>)
   a5a50:	4798      	blx	r3
   a5a52:	4603      	mov	r3, r0
   a5a54:	717b      	strb	r3, [r7, #5]
	 	cl_stby_retval =  sv_cntrl_deactivatepump(DCMOTOR2);
   a5a56:	2002      	movs	r0, #2
   a5a58:	4b14      	ldr	r3, [pc, #80]	; (a5aac <Cl_stby_init+0x8c>)
   a5a5a:	4798      	blx	r3
   a5a5c:	4603      	mov	r3, r0
   a5a5e:	717b      	strb	r3, [r7, #5]
	 //	cl_stby_retval =  sv_cntrl_deactivatepump(BLOODPUMP);
	 	cl_stby_retval =  sv_cntrl_deactivatepump(UFPUMP);
   a5a60:	2004      	movs	r0, #4
   a5a62:	4b12      	ldr	r3, [pc, #72]	; (a5aac <Cl_stby_init+0x8c>)
   a5a64:	4798      	blx	r3
   a5a66:	4603      	mov	r3, r0
   a5a68:	717b      	strb	r3, [r7, #5]
	 	cl_stby_retval =  sv_cntrl_deactivatepump(HEPARINPUMP);
   a5a6a:	2005      	movs	r0, #5
   a5a6c:	4b0f      	ldr	r3, [pc, #60]	; (a5aac <Cl_stby_init+0x8c>)
   a5a6e:	4798      	blx	r3
   a5a70:	4603      	mov	r3, r0
   a5a72:	717b      	strb	r3, [r7, #5]
		cl_stby_retval =  sv_cntrl_deactivatepump(VLA_PUMP);
   a5a74:	2006      	movs	r0, #6
   a5a76:	4b0d      	ldr	r3, [pc, #52]	; (a5aac <Cl_stby_init+0x8c>)
   a5a78:	4798      	blx	r3
   a5a7a:	4603      	mov	r3, r0
   a5a7c:	717b      	strb	r3, [r7, #5]
		cl_stby_retval =  sv_cntrl_poweroffheater();
   a5a7e:	4b0c      	ldr	r3, [pc, #48]	; (a5ab0 <Cl_stby_init+0x90>)
   a5a80:	4798      	blx	r3
   a5a82:	4603      	mov	r3, r0
   a5a84:	717b      	strb	r3, [r7, #5]

		
	
			cl_stby_retval =  sv_cs_setpotvalue((2200 * 1024)/10000);	
   a5a86:	20e1      	movs	r0, #225	; 0xe1
   a5a88:	4b0a      	ldr	r3, [pc, #40]	; (a5ab4 <Cl_stby_init+0x94>)
   a5a8a:	4798      	blx	r3
   a5a8c:	4603      	mov	r3, r0
   a5a8e:	717b      	strb	r3, [r7, #5]
			//cl_stby_retval =  sv_cs_setcondpotvalue((3200 * 1024)/10000);
			cl_stby_retval =  Cl_Conductivity_Sensor_Controller(COND_EVENT_INIT);
   a5a90:	2000      	movs	r0, #0
   a5a92:	4b09      	ldr	r3, [pc, #36]	; (a5ab8 <Cl_stby_init+0x98>)
   a5a94:	4798      	blx	r3
   a5a96:	4603      	mov	r3, r0
   a5a98:	717b      	strb	r3, [r7, #5]
		
		

				
	 return CL_OK;
   a5a9a:	2300      	movs	r3, #0
 }
   a5a9c:	4618      	mov	r0, r3
   a5a9e:	3708      	adds	r7, #8
   a5aa0:	46bd      	mov	sp, r7
   a5aa2:	bd80      	pop	{r7, pc}
   a5aa4:	00099ced 	.word	0x00099ced
   a5aa8:	00093195 	.word	0x00093195
   a5aac:	00099c69 	.word	0x00099c69
   a5ab0:	00099cb9 	.word	0x00099cb9
   a5ab4:	0009a175 	.word	0x0009a175
   a5ab8:	0008f8f9 	.word	0x0008f8f9

000a5abc <Cl_StabyRinse_UpdateTimeInfo>:
 
 Cl_ReturnCodeType Cl_StabyRinse_UpdateTimeInfo(void)
 {
   a5abc:	b580      	push	{r7, lr}
   a5abe:	b084      	sub	sp, #16
   a5ac0:	af00      	add	r7, sp, #0
	 
	 Cl_ReturnCodeType cl_stby_retval = CL_ERROR;
   a5ac2:	2304      	movs	r3, #4
   a5ac4:	73fb      	strb	r3, [r7, #15]
	 Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a5ac6:	2351      	movs	r3, #81	; 0x51
   a5ac8:	73bb      	strb	r3, [r7, #14]
	 Cl_Uint8Type data[7] = {0,0,0,0,0 ,0,0};
   a5aca:	2300      	movs	r3, #0
   a5acc:	713b      	strb	r3, [r7, #4]
   a5ace:	2300      	movs	r3, #0
   a5ad0:	717b      	strb	r3, [r7, #5]
   a5ad2:	2300      	movs	r3, #0
   a5ad4:	71bb      	strb	r3, [r7, #6]
   a5ad6:	2300      	movs	r3, #0
   a5ad8:	71fb      	strb	r3, [r7, #7]
   a5ada:	2300      	movs	r3, #0
   a5adc:	723b      	strb	r3, [r7, #8]
   a5ade:	2300      	movs	r3, #0
   a5ae0:	727b      	strb	r3, [r7, #9]
   a5ae2:	2300      	movs	r3, #0
   a5ae4:	72bb      	strb	r3, [r7, #10]
	 
	command = CON_TX_COMMAND_REM_TIME;
   a5ae6:	230a      	movs	r3, #10
   a5ae8:	73bb      	strb	r3, [r7, #14]
	
	data[0]= (Cl_Uint8Type)STANDBY_DATA;
   a5aea:	2300      	movs	r3, #0
   a5aec:	713b      	strb	r3, [r7, #4]
	data[1]= (Cl_Uint8Type)Cl_StbRinseTotalhourscounter; 
   a5aee:	4b17      	ldr	r3, [pc, #92]	; (a5b4c <Cl_StabyRinse_UpdateTimeInfo+0x90>)
   a5af0:	681b      	ldr	r3, [r3, #0]
   a5af2:	b2db      	uxtb	r3, r3
   a5af4:	717b      	strb	r3, [r7, #5]
	data[2]= (Cl_Uint8Type)Cl_StbRinseTotalMinutescounter;
   a5af6:	4b16      	ldr	r3, [pc, #88]	; (a5b50 <Cl_StabyRinse_UpdateTimeInfo+0x94>)
   a5af8:	681b      	ldr	r3, [r3, #0]
   a5afa:	b2db      	uxtb	r3, r3
   a5afc:	71bb      	strb	r3, [r7, #6]
	data[3]= (Cl_Uint8Type)Cl_StbRinsesecondscounter;
   a5afe:	4b15      	ldr	r3, [pc, #84]	; (a5b54 <Cl_StabyRinse_UpdateTimeInfo+0x98>)
   a5b00:	681b      	ldr	r3, [r3, #0]
   a5b02:	b2db      	uxtb	r3, r3
   a5b04:	71fb      	strb	r3, [r7, #7]
	data[4]= (Cl_Uint8Type) (CL_STBYRINSE_TIMEOUT_HRS - Cl_StbRinseTotalhourscounter );
   a5b06:	4b11      	ldr	r3, [pc, #68]	; (a5b4c <Cl_StabyRinse_UpdateTimeInfo+0x90>)
   a5b08:	681b      	ldr	r3, [r3, #0]
   a5b0a:	b2db      	uxtb	r3, r3
   a5b0c:	425b      	negs	r3, r3
   a5b0e:	b2db      	uxtb	r3, r3
   a5b10:	723b      	strb	r3, [r7, #8]
	data[5]= (Cl_Uint8Type) (CL_STBYRINSE_TIMEOUT_MIN - Cl_StbRinseTotalMinutescounter );
   a5b12:	4b0f      	ldr	r3, [pc, #60]	; (a5b50 <Cl_StabyRinse_UpdateTimeInfo+0x94>)
   a5b14:	681b      	ldr	r3, [r3, #0]
   a5b16:	b2db      	uxtb	r3, r3
   a5b18:	f1c3 0308 	rsb	r3, r3, #8
   a5b1c:	b2db      	uxtb	r3, r3
   a5b1e:	727b      	strb	r3, [r7, #9]
	data[6]= (Cl_Uint8Type) (60 - Cl_StbRinsesecondscounter );
   a5b20:	4b0c      	ldr	r3, [pc, #48]	; (a5b54 <Cl_StabyRinse_UpdateTimeInfo+0x98>)
   a5b22:	681b      	ldr	r3, [r3, #0]
   a5b24:	b2db      	uxtb	r3, r3
   a5b26:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
   a5b2a:	b2db      	uxtb	r3, r3
   a5b2c:	72bb      	strb	r3, [r7, #10]
	
	cl_stby_retval = Cl_SendDatatoconsole(command,&data,7);
   a5b2e:	7bba      	ldrb	r2, [r7, #14]
   a5b30:	1d3b      	adds	r3, r7, #4
   a5b32:	4610      	mov	r0, r2
   a5b34:	4619      	mov	r1, r3
   a5b36:	2207      	movs	r2, #7
   a5b38:	4b07      	ldr	r3, [pc, #28]	; (a5b58 <Cl_StabyRinse_UpdateTimeInfo+0x9c>)
   a5b3a:	4798      	blx	r3
   a5b3c:	4603      	mov	r3, r0
   a5b3e:	73fb      	strb	r3, [r7, #15]
	//Cl_rinseretcode = Cl_SendDatatoconsole(command,&data,1);
	
	return CL_OK;
   a5b40:	2300      	movs	r3, #0
	
 }
   a5b42:	4618      	mov	r0, r3
   a5b44:	3710      	adds	r7, #16
   a5b46:	46bd      	mov	sp, r7
   a5b48:	bd80      	pop	{r7, pc}
   a5b4a:	bf00      	nop
   a5b4c:	20071cd4 	.word	0x20071cd4
   a5b50:	20071cd0 	.word	0x20071cd0
   a5b54:	20071ccc 	.word	0x20071ccc
   a5b58:	0009ba51 	.word	0x0009ba51

000a5b5c <Cl_standby_ProcessAlarms>:
 
 Cl_ReturnCodeType Cl_standby_ProcessAlarms( void)
{
   a5b5c:	b580      	push	{r7, lr}
   a5b5e:	b082      	sub	sp, #8
   a5b60:	af00      	add	r7, sp, #0

	Cl_ReturnCodeType 	cl_stby_retval = CL_OK;
   a5b62:	2300      	movs	r3, #0
   a5b64:	71bb      	strb	r3, [r7, #6]
	Cl_Uint8Type tempcount = 0;
   a5b66:	2300      	movs	r3, #0
   a5b68:	71fb      	strb	r3, [r7, #7]
	Cl_Uint8Type data[2];
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a5b6a:	2351      	movs	r3, #81	; 0x51
   a5b6c:	717b      	strb	r3, [r7, #5]
	
	//cl_wait(10);
	
	for (tempcount = 0 ; tempcount < CL_STBY_ALRM_MAX ; tempcount++)
   a5b6e:	2300      	movs	r3, #0
   a5b70:	71fb      	strb	r3, [r7, #7]
   a5b72:	e01c      	b.n	a5bae <Cl_standby_ProcessAlarms+0x52>
	{
		
		Cl_Alarm_GetAlarmStatus(Cl_StandbyAlarmTable[tempcount].Cl_RinseAlarmId,&Cl_StandbyAlarmTable[tempcount].IsActive);
   a5b74:	79fa      	ldrb	r2, [r7, #7]
   a5b76:	4912      	ldr	r1, [pc, #72]	; (a5bc0 <Cl_standby_ProcessAlarms+0x64>)
   a5b78:	4613      	mov	r3, r2
   a5b7a:	00db      	lsls	r3, r3, #3
   a5b7c:	4413      	add	r3, r2
   a5b7e:	440b      	add	r3, r1
   a5b80:	7819      	ldrb	r1, [r3, #0]
   a5b82:	79fa      	ldrb	r2, [r7, #7]
   a5b84:	4613      	mov	r3, r2
   a5b86:	00db      	lsls	r3, r3, #3
   a5b88:	4413      	add	r3, r2
   a5b8a:	4a0d      	ldr	r2, [pc, #52]	; (a5bc0 <Cl_standby_ProcessAlarms+0x64>)
   a5b8c:	4413      	add	r3, r2
   a5b8e:	3304      	adds	r3, #4
   a5b90:	4608      	mov	r0, r1
   a5b92:	4619      	mov	r1, r3
   a5b94:	4b0b      	ldr	r3, [pc, #44]	; (a5bc4 <Cl_standby_ProcessAlarms+0x68>)
   a5b96:	4798      	blx	r3
		if (Cl_StandbyAlarmTable[tempcount].IsActive)
   a5b98:	79fa      	ldrb	r2, [r7, #7]
   a5b9a:	4909      	ldr	r1, [pc, #36]	; (a5bc0 <Cl_standby_ProcessAlarms+0x64>)
   a5b9c:	4613      	mov	r3, r2
   a5b9e:	00db      	lsls	r3, r3, #3
   a5ba0:	4413      	add	r3, r2
   a5ba2:	440b      	add	r3, r1
   a5ba4:	791b      	ldrb	r3, [r3, #4]
   a5ba6:	2b00      	cmp	r3, #0
	Cl_Uint8Type data[2];
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
	
	//cl_wait(10);
	
	for (tempcount = 0 ; tempcount < CL_STBY_ALRM_MAX ; tempcount++)
   a5ba8:	79fb      	ldrb	r3, [r7, #7]
   a5baa:	3301      	adds	r3, #1
   a5bac:	71fb      	strb	r3, [r7, #7]
   a5bae:	79fb      	ldrb	r3, [r7, #7]
   a5bb0:	2b03      	cmp	r3, #3
   a5bb2:	d9df      	bls.n	a5b74 <Cl_standby_ProcessAlarms+0x18>
			
		}

	}

return (cl_stby_retval );
   a5bb4:	79bb      	ldrb	r3, [r7, #6]
	   	
}
   a5bb6:	4618      	mov	r0, r3
   a5bb8:	3708      	adds	r7, #8
   a5bba:	46bd      	mov	sp, r7
   a5bbc:	bd80      	pop	{r7, pc}
   a5bbe:	bf00      	nop
   a5bc0:	20070d9c 	.word	0x20070d9c
   a5bc4:	00083035 	.word	0x00083035

000a5bc8 <Cl_standby_UpdateAlarmTable>:

Cl_ReturnCodeType Cl_standby_UpdateAlarmTable(ClStbyAlarmIdType* ClstbyAlarmId )
{
   a5bc8:	b580      	push	{r7, lr}
   a5bca:	b084      	sub	sp, #16
   a5bcc:	af00      	add	r7, sp, #0
   a5bce:	6078      	str	r0, [r7, #4]
	Cl_ReturnCodeType 	cl_stby_retval = CL_OK;
   a5bd0:	2300      	movs	r3, #0
   a5bd2:	73fb      	strb	r3, [r7, #15]
	Cl_Uint8Type tempcount = 0;
   a5bd4:	2300      	movs	r3, #0
   a5bd6:	73bb      	strb	r3, [r7, #14]
	Cl_Uint8Type data[2];
	
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
   a5bd8:	2351      	movs	r3, #81	; 0x51
   a5bda:	737b      	strb	r3, [r7, #13]
	
	for (tempcount = 0 ; tempcount < CL_STBY_ALRM_MAX ; tempcount++)
   a5bdc:	2300      	movs	r3, #0
   a5bde:	73bb      	strb	r3, [r7, #14]
   a5be0:	e0b2      	b.n	a5d48 <Cl_standby_UpdateAlarmTable+0x180>
	{
		
		Cl_Alarm_GetAlarmStatus(Cl_StandbyAlarmTable[tempcount].Cl_RinseAlarmId,&Cl_StandbyAlarmTable[tempcount].IsActive);
   a5be2:	7bba      	ldrb	r2, [r7, #14]
   a5be4:	495d      	ldr	r1, [pc, #372]	; (a5d5c <Cl_standby_UpdateAlarmTable+0x194>)
   a5be6:	4613      	mov	r3, r2
   a5be8:	00db      	lsls	r3, r3, #3
   a5bea:	4413      	add	r3, r2
   a5bec:	440b      	add	r3, r1
   a5bee:	7819      	ldrb	r1, [r3, #0]
   a5bf0:	7bba      	ldrb	r2, [r7, #14]
   a5bf2:	4613      	mov	r3, r2
   a5bf4:	00db      	lsls	r3, r3, #3
   a5bf6:	4413      	add	r3, r2
   a5bf8:	4a58      	ldr	r2, [pc, #352]	; (a5d5c <Cl_standby_UpdateAlarmTable+0x194>)
   a5bfa:	4413      	add	r3, r2
   a5bfc:	3304      	adds	r3, #4
   a5bfe:	4608      	mov	r0, r1
   a5c00:	4619      	mov	r1, r3
   a5c02:	4b57      	ldr	r3, [pc, #348]	; (a5d60 <Cl_standby_UpdateAlarmTable+0x198>)
   a5c04:	4798      	blx	r3
		if (Cl_StandbyAlarmTable[tempcount].IsActive)
   a5c06:	7bba      	ldrb	r2, [r7, #14]
   a5c08:	4954      	ldr	r1, [pc, #336]	; (a5d5c <Cl_standby_UpdateAlarmTable+0x194>)
   a5c0a:	4613      	mov	r3, r2
   a5c0c:	00db      	lsls	r3, r3, #3
   a5c0e:	4413      	add	r3, r2
   a5c10:	440b      	add	r3, r1
   a5c12:	791b      	ldrb	r3, [r3, #4]
   a5c14:	2b00      	cmp	r3, #0
   a5c16:	d06d      	beq.n	a5cf4 <Cl_standby_UpdateAlarmTable+0x12c>
		{
			if(!Cl_StandbyAlarmTable[tempcount].IsRaised)
   a5c18:	7bba      	ldrb	r2, [r7, #14]
   a5c1a:	4950      	ldr	r1, [pc, #320]	; (a5d5c <Cl_standby_UpdateAlarmTable+0x194>)
   a5c1c:	4613      	mov	r3, r2
   a5c1e:	00db      	lsls	r3, r3, #3
   a5c20:	4413      	add	r3, r2
   a5c22:	440b      	add	r3, r1
   a5c24:	795b      	ldrb	r3, [r3, #5]
   a5c26:	f083 0301 	eor.w	r3, r3, #1
   a5c2a:	b2db      	uxtb	r3, r3
   a5c2c:	2b00      	cmp	r3, #0
   a5c2e:	d01e      	beq.n	a5c6e <Cl_standby_UpdateAlarmTable+0xa6>
				{
					data[0] = (Cl_Uint8Type)Cl_StandbyAlarmTable[tempcount].Cl_RinseAlarmId;
   a5c30:	7bba      	ldrb	r2, [r7, #14]
   a5c32:	494a      	ldr	r1, [pc, #296]	; (a5d5c <Cl_standby_UpdateAlarmTable+0x194>)
   a5c34:	4613      	mov	r3, r2
   a5c36:	00db      	lsls	r3, r3, #3
   a5c38:	4413      	add	r3, r2
   a5c3a:	440b      	add	r3, r1
   a5c3c:	781b      	ldrb	r3, [r3, #0]
   a5c3e:	723b      	strb	r3, [r7, #8]
					data[1] = 1;
   a5c40:	2301      	movs	r3, #1
   a5c42:	727b      	strb	r3, [r7, #9]
					command = CON_TX_COMMAND_ALARM;
   a5c44:	2307      	movs	r3, #7
   a5c46:	737b      	strb	r3, [r7, #13]
					cl_stby_retval = Cl_SendDatatoconsole(command,&data,2);
   a5c48:	7b7a      	ldrb	r2, [r7, #13]
   a5c4a:	f107 0308 	add.w	r3, r7, #8
   a5c4e:	4610      	mov	r0, r2
   a5c50:	4619      	mov	r1, r3
   a5c52:	2202      	movs	r2, #2
   a5c54:	4b43      	ldr	r3, [pc, #268]	; (a5d64 <Cl_standby_UpdateAlarmTable+0x19c>)
   a5c56:	4798      	blx	r3
   a5c58:	4603      	mov	r3, r0
   a5c5a:	73fb      	strb	r3, [r7, #15]
					Cl_StandbyAlarmTable[tempcount].IsRaised = true;
   a5c5c:	7bba      	ldrb	r2, [r7, #14]
   a5c5e:	493f      	ldr	r1, [pc, #252]	; (a5d5c <Cl_standby_UpdateAlarmTable+0x194>)
   a5c60:	4613      	mov	r3, r2
   a5c62:	00db      	lsls	r3, r3, #3
   a5c64:	4413      	add	r3, r2
   a5c66:	440b      	add	r3, r1
   a5c68:	2201      	movs	r2, #1
   a5c6a:	715a      	strb	r2, [r3, #5]
   a5c6c:	e069      	b.n	a5d42 <Cl_standby_UpdateAlarmTable+0x17a>
					
			
				}
				else
				{
					Cl_StandbyAlarmTable[tempcount].alarmseccount++;
   a5c6e:	7bba      	ldrb	r2, [r7, #14]
   a5c70:	493a      	ldr	r1, [pc, #232]	; (a5d5c <Cl_standby_UpdateAlarmTable+0x194>)
   a5c72:	4613      	mov	r3, r2
   a5c74:	00db      	lsls	r3, r3, #3
   a5c76:	4413      	add	r3, r2
   a5c78:	440b      	add	r3, r1
   a5c7a:	785b      	ldrb	r3, [r3, #1]
   a5c7c:	3301      	adds	r3, #1
   a5c7e:	b2d8      	uxtb	r0, r3
   a5c80:	4936      	ldr	r1, [pc, #216]	; (a5d5c <Cl_standby_UpdateAlarmTable+0x194>)
   a5c82:	4613      	mov	r3, r2
   a5c84:	00db      	lsls	r3, r3, #3
   a5c86:	4413      	add	r3, r2
   a5c88:	440b      	add	r3, r1
   a5c8a:	4602      	mov	r2, r0
   a5c8c:	705a      	strb	r2, [r3, #1]
					Cl_StandbyAlarmTable[tempcount].alarm5seccount++;
   a5c8e:	7bba      	ldrb	r2, [r7, #14]
   a5c90:	4932      	ldr	r1, [pc, #200]	; (a5d5c <Cl_standby_UpdateAlarmTable+0x194>)
   a5c92:	4613      	mov	r3, r2
   a5c94:	00db      	lsls	r3, r3, #3
   a5c96:	4413      	add	r3, r2
   a5c98:	440b      	add	r3, r1
   a5c9a:	78db      	ldrb	r3, [r3, #3]
   a5c9c:	3301      	adds	r3, #1
   a5c9e:	b2d8      	uxtb	r0, r3
   a5ca0:	492e      	ldr	r1, [pc, #184]	; (a5d5c <Cl_standby_UpdateAlarmTable+0x194>)
   a5ca2:	4613      	mov	r3, r2
   a5ca4:	00db      	lsls	r3, r3, #3
   a5ca6:	4413      	add	r3, r2
   a5ca8:	440b      	add	r3, r1
   a5caa:	4602      	mov	r2, r0
   a5cac:	70da      	strb	r2, [r3, #3]
					
					if (Cl_StandbyAlarmTable[tempcount].alarmseccount > 5 )
   a5cae:	7bba      	ldrb	r2, [r7, #14]
   a5cb0:	492a      	ldr	r1, [pc, #168]	; (a5d5c <Cl_standby_UpdateAlarmTable+0x194>)
   a5cb2:	4613      	mov	r3, r2
   a5cb4:	00db      	lsls	r3, r3, #3
   a5cb6:	4413      	add	r3, r2
   a5cb8:	440b      	add	r3, r1
   a5cba:	785b      	ldrb	r3, [r3, #1]
   a5cbc:	2b05      	cmp	r3, #5
   a5cbe:	d907      	bls.n	a5cd0 <Cl_standby_UpdateAlarmTable+0x108>
					{
						// do  5 sec action
						Cl_StandbyAlarmTable[tempcount].alarm5seccount = 0;
   a5cc0:	7bba      	ldrb	r2, [r7, #14]
   a5cc2:	4926      	ldr	r1, [pc, #152]	; (a5d5c <Cl_standby_UpdateAlarmTable+0x194>)
   a5cc4:	4613      	mov	r3, r2
   a5cc6:	00db      	lsls	r3, r3, #3
   a5cc8:	4413      	add	r3, r2
   a5cca:	440b      	add	r3, r1
   a5ccc:	2200      	movs	r2, #0
   a5cce:	70da      	strb	r2, [r3, #3]
					}
					if (Cl_StandbyAlarmTable[tempcount].alarmseccount >= 60 )
   a5cd0:	7bba      	ldrb	r2, [r7, #14]
   a5cd2:	4922      	ldr	r1, [pc, #136]	; (a5d5c <Cl_standby_UpdateAlarmTable+0x194>)
   a5cd4:	4613      	mov	r3, r2
   a5cd6:	00db      	lsls	r3, r3, #3
   a5cd8:	4413      	add	r3, r2
   a5cda:	440b      	add	r3, r1
   a5cdc:	785b      	ldrb	r3, [r3, #1]
   a5cde:	2b3b      	cmp	r3, #59	; 0x3b
   a5ce0:	d92f      	bls.n	a5d42 <Cl_standby_UpdateAlarmTable+0x17a>
					{
						// do 1 min action
						Cl_StandbyAlarmTable[tempcount].alarmseccount = 0;
   a5ce2:	7bba      	ldrb	r2, [r7, #14]
   a5ce4:	491d      	ldr	r1, [pc, #116]	; (a5d5c <Cl_standby_UpdateAlarmTable+0x194>)
   a5ce6:	4613      	mov	r3, r2
   a5ce8:	00db      	lsls	r3, r3, #3
   a5cea:	4413      	add	r3, r2
   a5cec:	440b      	add	r3, r1
   a5cee:	2200      	movs	r2, #0
   a5cf0:	705a      	strb	r2, [r3, #1]
   a5cf2:	e026      	b.n	a5d42 <Cl_standby_UpdateAlarmTable+0x17a>
			
		}
		else
		{
			// alarm was present before , but not active now.
			if(Cl_StandbyAlarmTable[tempcount].IsRaised)
   a5cf4:	7bba      	ldrb	r2, [r7, #14]
   a5cf6:	4919      	ldr	r1, [pc, #100]	; (a5d5c <Cl_standby_UpdateAlarmTable+0x194>)
   a5cf8:	4613      	mov	r3, r2
   a5cfa:	00db      	lsls	r3, r3, #3
   a5cfc:	4413      	add	r3, r2
   a5cfe:	440b      	add	r3, r1
   a5d00:	795b      	ldrb	r3, [r3, #5]
   a5d02:	2b00      	cmp	r3, #0
   a5d04:	d01d      	beq.n	a5d42 <Cl_standby_UpdateAlarmTable+0x17a>
			{
				
				Cl_StandbyAlarmTable[tempcount].IsRaised = false;
   a5d06:	7bba      	ldrb	r2, [r7, #14]
   a5d08:	4914      	ldr	r1, [pc, #80]	; (a5d5c <Cl_standby_UpdateAlarmTable+0x194>)
   a5d0a:	4613      	mov	r3, r2
   a5d0c:	00db      	lsls	r3, r3, #3
   a5d0e:	4413      	add	r3, r2
   a5d10:	440b      	add	r3, r1
   a5d12:	2200      	movs	r2, #0
   a5d14:	715a      	strb	r2, [r3, #5]
				command = CON_TX_COMMAND_ALARM;
   a5d16:	2307      	movs	r3, #7
   a5d18:	737b      	strb	r3, [r7, #13]
				data[0] = (Cl_Uint8Type)(Cl_StandbyAlarmTable[tempcount].Cl_RinseAlarmId);
   a5d1a:	7bba      	ldrb	r2, [r7, #14]
   a5d1c:	490f      	ldr	r1, [pc, #60]	; (a5d5c <Cl_standby_UpdateAlarmTable+0x194>)
   a5d1e:	4613      	mov	r3, r2
   a5d20:	00db      	lsls	r3, r3, #3
   a5d22:	4413      	add	r3, r2
   a5d24:	440b      	add	r3, r1
   a5d26:	781b      	ldrb	r3, [r3, #0]
   a5d28:	723b      	strb	r3, [r7, #8]
				data[1] = (Cl_Uint8Type) 0;
   a5d2a:	2300      	movs	r3, #0
   a5d2c:	727b      	strb	r3, [r7, #9]
				cl_stby_retval = Cl_SendDatatoconsole(command,&data,2);
   a5d2e:	7b7a      	ldrb	r2, [r7, #13]
   a5d30:	f107 0308 	add.w	r3, r7, #8
   a5d34:	4610      	mov	r0, r2
   a5d36:	4619      	mov	r1, r3
   a5d38:	2202      	movs	r2, #2
   a5d3a:	4b0a      	ldr	r3, [pc, #40]	; (a5d64 <Cl_standby_UpdateAlarmTable+0x19c>)
   a5d3c:	4798      	blx	r3
   a5d3e:	4603      	mov	r3, r0
   a5d40:	73fb      	strb	r3, [r7, #15]
	Cl_Uint8Type tempcount = 0;
	Cl_Uint8Type data[2];
	
	Cl_ConsoleTxCommandtype command = CON_TX_COMMAND_COMMAND_MAX;
	
	for (tempcount = 0 ; tempcount < CL_STBY_ALRM_MAX ; tempcount++)
   a5d42:	7bbb      	ldrb	r3, [r7, #14]
   a5d44:	3301      	adds	r3, #1
   a5d46:	73bb      	strb	r3, [r7, #14]
   a5d48:	7bbb      	ldrb	r3, [r7, #14]
   a5d4a:	2b03      	cmp	r3, #3
   a5d4c:	f67f af49 	bls.w	a5be2 <Cl_standby_UpdateAlarmTable+0x1a>

		}	

	}

return (cl_stby_retval );
   a5d50:	7bfb      	ldrb	r3, [r7, #15]
}
   a5d52:	4618      	mov	r0, r3
   a5d54:	3710      	adds	r7, #16
   a5d56:	46bd      	mov	sp, r7
   a5d58:	bd80      	pop	{r7, pc}
   a5d5a:	bf00      	nop
   a5d5c:	20070d9c 	.word	0x20070d9c
   a5d60:	00083035 	.word	0x00083035
   a5d64:	0009ba51 	.word	0x0009ba51

000a5d68 <__aeabi_drsub>:
   a5d68:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   a5d6c:	e002      	b.n	a5d74 <__adddf3>
   a5d6e:	bf00      	nop

000a5d70 <__aeabi_dsub>:
   a5d70:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000a5d74 <__adddf3>:
   a5d74:	b530      	push	{r4, r5, lr}
   a5d76:	ea4f 0441 	mov.w	r4, r1, lsl #1
   a5d7a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   a5d7e:	ea94 0f05 	teq	r4, r5
   a5d82:	bf08      	it	eq
   a5d84:	ea90 0f02 	teqeq	r0, r2
   a5d88:	bf1f      	itttt	ne
   a5d8a:	ea54 0c00 	orrsne.w	ip, r4, r0
   a5d8e:	ea55 0c02 	orrsne.w	ip, r5, r2
   a5d92:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   a5d96:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   a5d9a:	f000 80e2 	beq.w	a5f62 <__adddf3+0x1ee>
   a5d9e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   a5da2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   a5da6:	bfb8      	it	lt
   a5da8:	426d      	neglt	r5, r5
   a5daa:	dd0c      	ble.n	a5dc6 <__adddf3+0x52>
   a5dac:	442c      	add	r4, r5
   a5dae:	ea80 0202 	eor.w	r2, r0, r2
   a5db2:	ea81 0303 	eor.w	r3, r1, r3
   a5db6:	ea82 0000 	eor.w	r0, r2, r0
   a5dba:	ea83 0101 	eor.w	r1, r3, r1
   a5dbe:	ea80 0202 	eor.w	r2, r0, r2
   a5dc2:	ea81 0303 	eor.w	r3, r1, r3
   a5dc6:	2d36      	cmp	r5, #54	; 0x36
   a5dc8:	bf88      	it	hi
   a5dca:	bd30      	pophi	{r4, r5, pc}
   a5dcc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   a5dd0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   a5dd4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   a5dd8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   a5ddc:	d002      	beq.n	a5de4 <__adddf3+0x70>
   a5dde:	4240      	negs	r0, r0
   a5de0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   a5de4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   a5de8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   a5dec:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   a5df0:	d002      	beq.n	a5df8 <__adddf3+0x84>
   a5df2:	4252      	negs	r2, r2
   a5df4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   a5df8:	ea94 0f05 	teq	r4, r5
   a5dfc:	f000 80a7 	beq.w	a5f4e <__adddf3+0x1da>
   a5e00:	f1a4 0401 	sub.w	r4, r4, #1
   a5e04:	f1d5 0e20 	rsbs	lr, r5, #32
   a5e08:	db0d      	blt.n	a5e26 <__adddf3+0xb2>
   a5e0a:	fa02 fc0e 	lsl.w	ip, r2, lr
   a5e0e:	fa22 f205 	lsr.w	r2, r2, r5
   a5e12:	1880      	adds	r0, r0, r2
   a5e14:	f141 0100 	adc.w	r1, r1, #0
   a5e18:	fa03 f20e 	lsl.w	r2, r3, lr
   a5e1c:	1880      	adds	r0, r0, r2
   a5e1e:	fa43 f305 	asr.w	r3, r3, r5
   a5e22:	4159      	adcs	r1, r3
   a5e24:	e00e      	b.n	a5e44 <__adddf3+0xd0>
   a5e26:	f1a5 0520 	sub.w	r5, r5, #32
   a5e2a:	f10e 0e20 	add.w	lr, lr, #32
   a5e2e:	2a01      	cmp	r2, #1
   a5e30:	fa03 fc0e 	lsl.w	ip, r3, lr
   a5e34:	bf28      	it	cs
   a5e36:	f04c 0c02 	orrcs.w	ip, ip, #2
   a5e3a:	fa43 f305 	asr.w	r3, r3, r5
   a5e3e:	18c0      	adds	r0, r0, r3
   a5e40:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   a5e44:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   a5e48:	d507      	bpl.n	a5e5a <__adddf3+0xe6>
   a5e4a:	f04f 0e00 	mov.w	lr, #0
   a5e4e:	f1dc 0c00 	rsbs	ip, ip, #0
   a5e52:	eb7e 0000 	sbcs.w	r0, lr, r0
   a5e56:	eb6e 0101 	sbc.w	r1, lr, r1
   a5e5a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   a5e5e:	d31b      	bcc.n	a5e98 <__adddf3+0x124>
   a5e60:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   a5e64:	d30c      	bcc.n	a5e80 <__adddf3+0x10c>
   a5e66:	0849      	lsrs	r1, r1, #1
   a5e68:	ea5f 0030 	movs.w	r0, r0, rrx
   a5e6c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   a5e70:	f104 0401 	add.w	r4, r4, #1
   a5e74:	ea4f 5244 	mov.w	r2, r4, lsl #21
   a5e78:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   a5e7c:	f080 809a 	bcs.w	a5fb4 <__adddf3+0x240>
   a5e80:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   a5e84:	bf08      	it	eq
   a5e86:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   a5e8a:	f150 0000 	adcs.w	r0, r0, #0
   a5e8e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   a5e92:	ea41 0105 	orr.w	r1, r1, r5
   a5e96:	bd30      	pop	{r4, r5, pc}
   a5e98:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   a5e9c:	4140      	adcs	r0, r0
   a5e9e:	eb41 0101 	adc.w	r1, r1, r1
   a5ea2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   a5ea6:	f1a4 0401 	sub.w	r4, r4, #1
   a5eaa:	d1e9      	bne.n	a5e80 <__adddf3+0x10c>
   a5eac:	f091 0f00 	teq	r1, #0
   a5eb0:	bf04      	itt	eq
   a5eb2:	4601      	moveq	r1, r0
   a5eb4:	2000      	moveq	r0, #0
   a5eb6:	fab1 f381 	clz	r3, r1
   a5eba:	bf08      	it	eq
   a5ebc:	3320      	addeq	r3, #32
   a5ebe:	f1a3 030b 	sub.w	r3, r3, #11
   a5ec2:	f1b3 0220 	subs.w	r2, r3, #32
   a5ec6:	da0c      	bge.n	a5ee2 <__adddf3+0x16e>
   a5ec8:	320c      	adds	r2, #12
   a5eca:	dd08      	ble.n	a5ede <__adddf3+0x16a>
   a5ecc:	f102 0c14 	add.w	ip, r2, #20
   a5ed0:	f1c2 020c 	rsb	r2, r2, #12
   a5ed4:	fa01 f00c 	lsl.w	r0, r1, ip
   a5ed8:	fa21 f102 	lsr.w	r1, r1, r2
   a5edc:	e00c      	b.n	a5ef8 <__adddf3+0x184>
   a5ede:	f102 0214 	add.w	r2, r2, #20
   a5ee2:	bfd8      	it	le
   a5ee4:	f1c2 0c20 	rsble	ip, r2, #32
   a5ee8:	fa01 f102 	lsl.w	r1, r1, r2
   a5eec:	fa20 fc0c 	lsr.w	ip, r0, ip
   a5ef0:	bfdc      	itt	le
   a5ef2:	ea41 010c 	orrle.w	r1, r1, ip
   a5ef6:	4090      	lslle	r0, r2
   a5ef8:	1ae4      	subs	r4, r4, r3
   a5efa:	bfa2      	ittt	ge
   a5efc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   a5f00:	4329      	orrge	r1, r5
   a5f02:	bd30      	popge	{r4, r5, pc}
   a5f04:	ea6f 0404 	mvn.w	r4, r4
   a5f08:	3c1f      	subs	r4, #31
   a5f0a:	da1c      	bge.n	a5f46 <__adddf3+0x1d2>
   a5f0c:	340c      	adds	r4, #12
   a5f0e:	dc0e      	bgt.n	a5f2e <__adddf3+0x1ba>
   a5f10:	f104 0414 	add.w	r4, r4, #20
   a5f14:	f1c4 0220 	rsb	r2, r4, #32
   a5f18:	fa20 f004 	lsr.w	r0, r0, r4
   a5f1c:	fa01 f302 	lsl.w	r3, r1, r2
   a5f20:	ea40 0003 	orr.w	r0, r0, r3
   a5f24:	fa21 f304 	lsr.w	r3, r1, r4
   a5f28:	ea45 0103 	orr.w	r1, r5, r3
   a5f2c:	bd30      	pop	{r4, r5, pc}
   a5f2e:	f1c4 040c 	rsb	r4, r4, #12
   a5f32:	f1c4 0220 	rsb	r2, r4, #32
   a5f36:	fa20 f002 	lsr.w	r0, r0, r2
   a5f3a:	fa01 f304 	lsl.w	r3, r1, r4
   a5f3e:	ea40 0003 	orr.w	r0, r0, r3
   a5f42:	4629      	mov	r1, r5
   a5f44:	bd30      	pop	{r4, r5, pc}
   a5f46:	fa21 f004 	lsr.w	r0, r1, r4
   a5f4a:	4629      	mov	r1, r5
   a5f4c:	bd30      	pop	{r4, r5, pc}
   a5f4e:	f094 0f00 	teq	r4, #0
   a5f52:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   a5f56:	bf06      	itte	eq
   a5f58:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   a5f5c:	3401      	addeq	r4, #1
   a5f5e:	3d01      	subne	r5, #1
   a5f60:	e74e      	b.n	a5e00 <__adddf3+0x8c>
   a5f62:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   a5f66:	bf18      	it	ne
   a5f68:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   a5f6c:	d029      	beq.n	a5fc2 <__adddf3+0x24e>
   a5f6e:	ea94 0f05 	teq	r4, r5
   a5f72:	bf08      	it	eq
   a5f74:	ea90 0f02 	teqeq	r0, r2
   a5f78:	d005      	beq.n	a5f86 <__adddf3+0x212>
   a5f7a:	ea54 0c00 	orrs.w	ip, r4, r0
   a5f7e:	bf04      	itt	eq
   a5f80:	4619      	moveq	r1, r3
   a5f82:	4610      	moveq	r0, r2
   a5f84:	bd30      	pop	{r4, r5, pc}
   a5f86:	ea91 0f03 	teq	r1, r3
   a5f8a:	bf1e      	ittt	ne
   a5f8c:	2100      	movne	r1, #0
   a5f8e:	2000      	movne	r0, #0
   a5f90:	bd30      	popne	{r4, r5, pc}
   a5f92:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   a5f96:	d105      	bne.n	a5fa4 <__adddf3+0x230>
   a5f98:	0040      	lsls	r0, r0, #1
   a5f9a:	4149      	adcs	r1, r1
   a5f9c:	bf28      	it	cs
   a5f9e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   a5fa2:	bd30      	pop	{r4, r5, pc}
   a5fa4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   a5fa8:	bf3c      	itt	cc
   a5faa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   a5fae:	bd30      	popcc	{r4, r5, pc}
   a5fb0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   a5fb4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   a5fb8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   a5fbc:	f04f 0000 	mov.w	r0, #0
   a5fc0:	bd30      	pop	{r4, r5, pc}
   a5fc2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   a5fc6:	bf1a      	itte	ne
   a5fc8:	4619      	movne	r1, r3
   a5fca:	4610      	movne	r0, r2
   a5fcc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   a5fd0:	bf1c      	itt	ne
   a5fd2:	460b      	movne	r3, r1
   a5fd4:	4602      	movne	r2, r0
   a5fd6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   a5fda:	bf06      	itte	eq
   a5fdc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   a5fe0:	ea91 0f03 	teqeq	r1, r3
   a5fe4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   a5fe8:	bd30      	pop	{r4, r5, pc}
   a5fea:	bf00      	nop

000a5fec <__aeabi_ui2d>:
   a5fec:	f090 0f00 	teq	r0, #0
   a5ff0:	bf04      	itt	eq
   a5ff2:	2100      	moveq	r1, #0
   a5ff4:	4770      	bxeq	lr
   a5ff6:	b530      	push	{r4, r5, lr}
   a5ff8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   a5ffc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   a6000:	f04f 0500 	mov.w	r5, #0
   a6004:	f04f 0100 	mov.w	r1, #0
   a6008:	e750      	b.n	a5eac <__adddf3+0x138>
   a600a:	bf00      	nop

000a600c <__aeabi_i2d>:
   a600c:	f090 0f00 	teq	r0, #0
   a6010:	bf04      	itt	eq
   a6012:	2100      	moveq	r1, #0
   a6014:	4770      	bxeq	lr
   a6016:	b530      	push	{r4, r5, lr}
   a6018:	f44f 6480 	mov.w	r4, #1024	; 0x400
   a601c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   a6020:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   a6024:	bf48      	it	mi
   a6026:	4240      	negmi	r0, r0
   a6028:	f04f 0100 	mov.w	r1, #0
   a602c:	e73e      	b.n	a5eac <__adddf3+0x138>
   a602e:	bf00      	nop

000a6030 <__aeabi_f2d>:
   a6030:	0042      	lsls	r2, r0, #1
   a6032:	ea4f 01e2 	mov.w	r1, r2, asr #3
   a6036:	ea4f 0131 	mov.w	r1, r1, rrx
   a603a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   a603e:	bf1f      	itttt	ne
   a6040:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   a6044:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   a6048:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   a604c:	4770      	bxne	lr
   a604e:	f092 0f00 	teq	r2, #0
   a6052:	bf14      	ite	ne
   a6054:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   a6058:	4770      	bxeq	lr
   a605a:	b530      	push	{r4, r5, lr}
   a605c:	f44f 7460 	mov.w	r4, #896	; 0x380
   a6060:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   a6064:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   a6068:	e720      	b.n	a5eac <__adddf3+0x138>
   a606a:	bf00      	nop

000a606c <__aeabi_ul2d>:
   a606c:	ea50 0201 	orrs.w	r2, r0, r1
   a6070:	bf08      	it	eq
   a6072:	4770      	bxeq	lr
   a6074:	b530      	push	{r4, r5, lr}
   a6076:	f04f 0500 	mov.w	r5, #0
   a607a:	e00a      	b.n	a6092 <__aeabi_l2d+0x16>

000a607c <__aeabi_l2d>:
   a607c:	ea50 0201 	orrs.w	r2, r0, r1
   a6080:	bf08      	it	eq
   a6082:	4770      	bxeq	lr
   a6084:	b530      	push	{r4, r5, lr}
   a6086:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   a608a:	d502      	bpl.n	a6092 <__aeabi_l2d+0x16>
   a608c:	4240      	negs	r0, r0
   a608e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   a6092:	f44f 6480 	mov.w	r4, #1024	; 0x400
   a6096:	f104 0432 	add.w	r4, r4, #50	; 0x32
   a609a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   a609e:	f43f aedc 	beq.w	a5e5a <__adddf3+0xe6>
   a60a2:	f04f 0203 	mov.w	r2, #3
   a60a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   a60aa:	bf18      	it	ne
   a60ac:	3203      	addne	r2, #3
   a60ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   a60b2:	bf18      	it	ne
   a60b4:	3203      	addne	r2, #3
   a60b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   a60ba:	f1c2 0320 	rsb	r3, r2, #32
   a60be:	fa00 fc03 	lsl.w	ip, r0, r3
   a60c2:	fa20 f002 	lsr.w	r0, r0, r2
   a60c6:	fa01 fe03 	lsl.w	lr, r1, r3
   a60ca:	ea40 000e 	orr.w	r0, r0, lr
   a60ce:	fa21 f102 	lsr.w	r1, r1, r2
   a60d2:	4414      	add	r4, r2
   a60d4:	e6c1      	b.n	a5e5a <__adddf3+0xe6>
   a60d6:	bf00      	nop

000a60d8 <__aeabi_dmul>:
   a60d8:	b570      	push	{r4, r5, r6, lr}
   a60da:	f04f 0cff 	mov.w	ip, #255	; 0xff
   a60de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   a60e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   a60e6:	bf1d      	ittte	ne
   a60e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   a60ec:	ea94 0f0c 	teqne	r4, ip
   a60f0:	ea95 0f0c 	teqne	r5, ip
   a60f4:	f000 f8de 	bleq	a62b4 <__aeabi_dmul+0x1dc>
   a60f8:	442c      	add	r4, r5
   a60fa:	ea81 0603 	eor.w	r6, r1, r3
   a60fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   a6102:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   a6106:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   a610a:	bf18      	it	ne
   a610c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   a6110:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   a6114:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   a6118:	d038      	beq.n	a618c <__aeabi_dmul+0xb4>
   a611a:	fba0 ce02 	umull	ip, lr, r0, r2
   a611e:	f04f 0500 	mov.w	r5, #0
   a6122:	fbe1 e502 	umlal	lr, r5, r1, r2
   a6126:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   a612a:	fbe0 e503 	umlal	lr, r5, r0, r3
   a612e:	f04f 0600 	mov.w	r6, #0
   a6132:	fbe1 5603 	umlal	r5, r6, r1, r3
   a6136:	f09c 0f00 	teq	ip, #0
   a613a:	bf18      	it	ne
   a613c:	f04e 0e01 	orrne.w	lr, lr, #1
   a6140:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   a6144:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   a6148:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   a614c:	d204      	bcs.n	a6158 <__aeabi_dmul+0x80>
   a614e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   a6152:	416d      	adcs	r5, r5
   a6154:	eb46 0606 	adc.w	r6, r6, r6
   a6158:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   a615c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   a6160:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   a6164:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   a6168:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   a616c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   a6170:	bf88      	it	hi
   a6172:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   a6176:	d81e      	bhi.n	a61b6 <__aeabi_dmul+0xde>
   a6178:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   a617c:	bf08      	it	eq
   a617e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   a6182:	f150 0000 	adcs.w	r0, r0, #0
   a6186:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   a618a:	bd70      	pop	{r4, r5, r6, pc}
   a618c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   a6190:	ea46 0101 	orr.w	r1, r6, r1
   a6194:	ea40 0002 	orr.w	r0, r0, r2
   a6198:	ea81 0103 	eor.w	r1, r1, r3
   a619c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   a61a0:	bfc2      	ittt	gt
   a61a2:	ebd4 050c 	rsbsgt	r5, r4, ip
   a61a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   a61aa:	bd70      	popgt	{r4, r5, r6, pc}
   a61ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   a61b0:	f04f 0e00 	mov.w	lr, #0
   a61b4:	3c01      	subs	r4, #1
   a61b6:	f300 80ab 	bgt.w	a6310 <__aeabi_dmul+0x238>
   a61ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
   a61be:	bfde      	ittt	le
   a61c0:	2000      	movle	r0, #0
   a61c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   a61c6:	bd70      	pople	{r4, r5, r6, pc}
   a61c8:	f1c4 0400 	rsb	r4, r4, #0
   a61cc:	3c20      	subs	r4, #32
   a61ce:	da35      	bge.n	a623c <__aeabi_dmul+0x164>
   a61d0:	340c      	adds	r4, #12
   a61d2:	dc1b      	bgt.n	a620c <__aeabi_dmul+0x134>
   a61d4:	f104 0414 	add.w	r4, r4, #20
   a61d8:	f1c4 0520 	rsb	r5, r4, #32
   a61dc:	fa00 f305 	lsl.w	r3, r0, r5
   a61e0:	fa20 f004 	lsr.w	r0, r0, r4
   a61e4:	fa01 f205 	lsl.w	r2, r1, r5
   a61e8:	ea40 0002 	orr.w	r0, r0, r2
   a61ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   a61f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   a61f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   a61f8:	fa21 f604 	lsr.w	r6, r1, r4
   a61fc:	eb42 0106 	adc.w	r1, r2, r6
   a6200:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   a6204:	bf08      	it	eq
   a6206:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   a620a:	bd70      	pop	{r4, r5, r6, pc}
   a620c:	f1c4 040c 	rsb	r4, r4, #12
   a6210:	f1c4 0520 	rsb	r5, r4, #32
   a6214:	fa00 f304 	lsl.w	r3, r0, r4
   a6218:	fa20 f005 	lsr.w	r0, r0, r5
   a621c:	fa01 f204 	lsl.w	r2, r1, r4
   a6220:	ea40 0002 	orr.w	r0, r0, r2
   a6224:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   a6228:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   a622c:	f141 0100 	adc.w	r1, r1, #0
   a6230:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   a6234:	bf08      	it	eq
   a6236:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   a623a:	bd70      	pop	{r4, r5, r6, pc}
   a623c:	f1c4 0520 	rsb	r5, r4, #32
   a6240:	fa00 f205 	lsl.w	r2, r0, r5
   a6244:	ea4e 0e02 	orr.w	lr, lr, r2
   a6248:	fa20 f304 	lsr.w	r3, r0, r4
   a624c:	fa01 f205 	lsl.w	r2, r1, r5
   a6250:	ea43 0302 	orr.w	r3, r3, r2
   a6254:	fa21 f004 	lsr.w	r0, r1, r4
   a6258:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   a625c:	fa21 f204 	lsr.w	r2, r1, r4
   a6260:	ea20 0002 	bic.w	r0, r0, r2
   a6264:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   a6268:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   a626c:	bf08      	it	eq
   a626e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   a6272:	bd70      	pop	{r4, r5, r6, pc}
   a6274:	f094 0f00 	teq	r4, #0
   a6278:	d10f      	bne.n	a629a <__aeabi_dmul+0x1c2>
   a627a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   a627e:	0040      	lsls	r0, r0, #1
   a6280:	eb41 0101 	adc.w	r1, r1, r1
   a6284:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   a6288:	bf08      	it	eq
   a628a:	3c01      	subeq	r4, #1
   a628c:	d0f7      	beq.n	a627e <__aeabi_dmul+0x1a6>
   a628e:	ea41 0106 	orr.w	r1, r1, r6
   a6292:	f095 0f00 	teq	r5, #0
   a6296:	bf18      	it	ne
   a6298:	4770      	bxne	lr
   a629a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   a629e:	0052      	lsls	r2, r2, #1
   a62a0:	eb43 0303 	adc.w	r3, r3, r3
   a62a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   a62a8:	bf08      	it	eq
   a62aa:	3d01      	subeq	r5, #1
   a62ac:	d0f7      	beq.n	a629e <__aeabi_dmul+0x1c6>
   a62ae:	ea43 0306 	orr.w	r3, r3, r6
   a62b2:	4770      	bx	lr
   a62b4:	ea94 0f0c 	teq	r4, ip
   a62b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   a62bc:	bf18      	it	ne
   a62be:	ea95 0f0c 	teqne	r5, ip
   a62c2:	d00c      	beq.n	a62de <__aeabi_dmul+0x206>
   a62c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   a62c8:	bf18      	it	ne
   a62ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   a62ce:	d1d1      	bne.n	a6274 <__aeabi_dmul+0x19c>
   a62d0:	ea81 0103 	eor.w	r1, r1, r3
   a62d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   a62d8:	f04f 0000 	mov.w	r0, #0
   a62dc:	bd70      	pop	{r4, r5, r6, pc}
   a62de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   a62e2:	bf06      	itte	eq
   a62e4:	4610      	moveq	r0, r2
   a62e6:	4619      	moveq	r1, r3
   a62e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   a62ec:	d019      	beq.n	a6322 <__aeabi_dmul+0x24a>
   a62ee:	ea94 0f0c 	teq	r4, ip
   a62f2:	d102      	bne.n	a62fa <__aeabi_dmul+0x222>
   a62f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   a62f8:	d113      	bne.n	a6322 <__aeabi_dmul+0x24a>
   a62fa:	ea95 0f0c 	teq	r5, ip
   a62fe:	d105      	bne.n	a630c <__aeabi_dmul+0x234>
   a6300:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   a6304:	bf1c      	itt	ne
   a6306:	4610      	movne	r0, r2
   a6308:	4619      	movne	r1, r3
   a630a:	d10a      	bne.n	a6322 <__aeabi_dmul+0x24a>
   a630c:	ea81 0103 	eor.w	r1, r1, r3
   a6310:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   a6314:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   a6318:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   a631c:	f04f 0000 	mov.w	r0, #0
   a6320:	bd70      	pop	{r4, r5, r6, pc}
   a6322:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   a6326:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   a632a:	bd70      	pop	{r4, r5, r6, pc}

000a632c <__aeabi_ddiv>:
   a632c:	b570      	push	{r4, r5, r6, lr}
   a632e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   a6332:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   a6336:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   a633a:	bf1d      	ittte	ne
   a633c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   a6340:	ea94 0f0c 	teqne	r4, ip
   a6344:	ea95 0f0c 	teqne	r5, ip
   a6348:	f000 f8a7 	bleq	a649a <__aeabi_ddiv+0x16e>
   a634c:	eba4 0405 	sub.w	r4, r4, r5
   a6350:	ea81 0e03 	eor.w	lr, r1, r3
   a6354:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   a6358:	ea4f 3101 	mov.w	r1, r1, lsl #12
   a635c:	f000 8088 	beq.w	a6470 <__aeabi_ddiv+0x144>
   a6360:	ea4f 3303 	mov.w	r3, r3, lsl #12
   a6364:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   a6368:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   a636c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   a6370:	ea4f 2202 	mov.w	r2, r2, lsl #8
   a6374:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   a6378:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   a637c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   a6380:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   a6384:	429d      	cmp	r5, r3
   a6386:	bf08      	it	eq
   a6388:	4296      	cmpeq	r6, r2
   a638a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   a638e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   a6392:	d202      	bcs.n	a639a <__aeabi_ddiv+0x6e>
   a6394:	085b      	lsrs	r3, r3, #1
   a6396:	ea4f 0232 	mov.w	r2, r2, rrx
   a639a:	1ab6      	subs	r6, r6, r2
   a639c:	eb65 0503 	sbc.w	r5, r5, r3
   a63a0:	085b      	lsrs	r3, r3, #1
   a63a2:	ea4f 0232 	mov.w	r2, r2, rrx
   a63a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   a63aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   a63ae:	ebb6 0e02 	subs.w	lr, r6, r2
   a63b2:	eb75 0e03 	sbcs.w	lr, r5, r3
   a63b6:	bf22      	ittt	cs
   a63b8:	1ab6      	subcs	r6, r6, r2
   a63ba:	4675      	movcs	r5, lr
   a63bc:	ea40 000c 	orrcs.w	r0, r0, ip
   a63c0:	085b      	lsrs	r3, r3, #1
   a63c2:	ea4f 0232 	mov.w	r2, r2, rrx
   a63c6:	ebb6 0e02 	subs.w	lr, r6, r2
   a63ca:	eb75 0e03 	sbcs.w	lr, r5, r3
   a63ce:	bf22      	ittt	cs
   a63d0:	1ab6      	subcs	r6, r6, r2
   a63d2:	4675      	movcs	r5, lr
   a63d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   a63d8:	085b      	lsrs	r3, r3, #1
   a63da:	ea4f 0232 	mov.w	r2, r2, rrx
   a63de:	ebb6 0e02 	subs.w	lr, r6, r2
   a63e2:	eb75 0e03 	sbcs.w	lr, r5, r3
   a63e6:	bf22      	ittt	cs
   a63e8:	1ab6      	subcs	r6, r6, r2
   a63ea:	4675      	movcs	r5, lr
   a63ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   a63f0:	085b      	lsrs	r3, r3, #1
   a63f2:	ea4f 0232 	mov.w	r2, r2, rrx
   a63f6:	ebb6 0e02 	subs.w	lr, r6, r2
   a63fa:	eb75 0e03 	sbcs.w	lr, r5, r3
   a63fe:	bf22      	ittt	cs
   a6400:	1ab6      	subcs	r6, r6, r2
   a6402:	4675      	movcs	r5, lr
   a6404:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   a6408:	ea55 0e06 	orrs.w	lr, r5, r6
   a640c:	d018      	beq.n	a6440 <__aeabi_ddiv+0x114>
   a640e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   a6412:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   a6416:	ea4f 1606 	mov.w	r6, r6, lsl #4
   a641a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   a641e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   a6422:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   a6426:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   a642a:	d1c0      	bne.n	a63ae <__aeabi_ddiv+0x82>
   a642c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   a6430:	d10b      	bne.n	a644a <__aeabi_ddiv+0x11e>
   a6432:	ea41 0100 	orr.w	r1, r1, r0
   a6436:	f04f 0000 	mov.w	r0, #0
   a643a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   a643e:	e7b6      	b.n	a63ae <__aeabi_ddiv+0x82>
   a6440:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   a6444:	bf04      	itt	eq
   a6446:	4301      	orreq	r1, r0
   a6448:	2000      	moveq	r0, #0
   a644a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   a644e:	bf88      	it	hi
   a6450:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   a6454:	f63f aeaf 	bhi.w	a61b6 <__aeabi_dmul+0xde>
   a6458:	ebb5 0c03 	subs.w	ip, r5, r3
   a645c:	bf04      	itt	eq
   a645e:	ebb6 0c02 	subseq.w	ip, r6, r2
   a6462:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   a6466:	f150 0000 	adcs.w	r0, r0, #0
   a646a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   a646e:	bd70      	pop	{r4, r5, r6, pc}
   a6470:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   a6474:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   a6478:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   a647c:	bfc2      	ittt	gt
   a647e:	ebd4 050c 	rsbsgt	r5, r4, ip
   a6482:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   a6486:	bd70      	popgt	{r4, r5, r6, pc}
   a6488:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   a648c:	f04f 0e00 	mov.w	lr, #0
   a6490:	3c01      	subs	r4, #1
   a6492:	e690      	b.n	a61b6 <__aeabi_dmul+0xde>
   a6494:	ea45 0e06 	orr.w	lr, r5, r6
   a6498:	e68d      	b.n	a61b6 <__aeabi_dmul+0xde>
   a649a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   a649e:	ea94 0f0c 	teq	r4, ip
   a64a2:	bf08      	it	eq
   a64a4:	ea95 0f0c 	teqeq	r5, ip
   a64a8:	f43f af3b 	beq.w	a6322 <__aeabi_dmul+0x24a>
   a64ac:	ea94 0f0c 	teq	r4, ip
   a64b0:	d10a      	bne.n	a64c8 <__aeabi_ddiv+0x19c>
   a64b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   a64b6:	f47f af34 	bne.w	a6322 <__aeabi_dmul+0x24a>
   a64ba:	ea95 0f0c 	teq	r5, ip
   a64be:	f47f af25 	bne.w	a630c <__aeabi_dmul+0x234>
   a64c2:	4610      	mov	r0, r2
   a64c4:	4619      	mov	r1, r3
   a64c6:	e72c      	b.n	a6322 <__aeabi_dmul+0x24a>
   a64c8:	ea95 0f0c 	teq	r5, ip
   a64cc:	d106      	bne.n	a64dc <__aeabi_ddiv+0x1b0>
   a64ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   a64d2:	f43f aefd 	beq.w	a62d0 <__aeabi_dmul+0x1f8>
   a64d6:	4610      	mov	r0, r2
   a64d8:	4619      	mov	r1, r3
   a64da:	e722      	b.n	a6322 <__aeabi_dmul+0x24a>
   a64dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   a64e0:	bf18      	it	ne
   a64e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   a64e6:	f47f aec5 	bne.w	a6274 <__aeabi_dmul+0x19c>
   a64ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   a64ee:	f47f af0d 	bne.w	a630c <__aeabi_dmul+0x234>
   a64f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   a64f6:	f47f aeeb 	bne.w	a62d0 <__aeabi_dmul+0x1f8>
   a64fa:	e712      	b.n	a6322 <__aeabi_dmul+0x24a>

000a64fc <__gedf2>:
   a64fc:	f04f 3cff 	mov.w	ip, #4294967295
   a6500:	e006      	b.n	a6510 <__cmpdf2+0x4>
   a6502:	bf00      	nop

000a6504 <__ledf2>:
   a6504:	f04f 0c01 	mov.w	ip, #1
   a6508:	e002      	b.n	a6510 <__cmpdf2+0x4>
   a650a:	bf00      	nop

000a650c <__cmpdf2>:
   a650c:	f04f 0c01 	mov.w	ip, #1
   a6510:	f84d cd04 	str.w	ip, [sp, #-4]!
   a6514:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   a6518:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   a651c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   a6520:	bf18      	it	ne
   a6522:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   a6526:	d01b      	beq.n	a6560 <__cmpdf2+0x54>
   a6528:	b001      	add	sp, #4
   a652a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   a652e:	bf0c      	ite	eq
   a6530:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   a6534:	ea91 0f03 	teqne	r1, r3
   a6538:	bf02      	ittt	eq
   a653a:	ea90 0f02 	teqeq	r0, r2
   a653e:	2000      	moveq	r0, #0
   a6540:	4770      	bxeq	lr
   a6542:	f110 0f00 	cmn.w	r0, #0
   a6546:	ea91 0f03 	teq	r1, r3
   a654a:	bf58      	it	pl
   a654c:	4299      	cmppl	r1, r3
   a654e:	bf08      	it	eq
   a6550:	4290      	cmpeq	r0, r2
   a6552:	bf2c      	ite	cs
   a6554:	17d8      	asrcs	r0, r3, #31
   a6556:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   a655a:	f040 0001 	orr.w	r0, r0, #1
   a655e:	4770      	bx	lr
   a6560:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   a6564:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   a6568:	d102      	bne.n	a6570 <__cmpdf2+0x64>
   a656a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   a656e:	d107      	bne.n	a6580 <__cmpdf2+0x74>
   a6570:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   a6574:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   a6578:	d1d6      	bne.n	a6528 <__cmpdf2+0x1c>
   a657a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   a657e:	d0d3      	beq.n	a6528 <__cmpdf2+0x1c>
   a6580:	f85d 0b04 	ldr.w	r0, [sp], #4
   a6584:	4770      	bx	lr
   a6586:	bf00      	nop

000a6588 <__aeabi_cdrcmple>:
   a6588:	4684      	mov	ip, r0
   a658a:	4610      	mov	r0, r2
   a658c:	4662      	mov	r2, ip
   a658e:	468c      	mov	ip, r1
   a6590:	4619      	mov	r1, r3
   a6592:	4663      	mov	r3, ip
   a6594:	e000      	b.n	a6598 <__aeabi_cdcmpeq>
   a6596:	bf00      	nop

000a6598 <__aeabi_cdcmpeq>:
   a6598:	b501      	push	{r0, lr}
   a659a:	f7ff ffb7 	bl	a650c <__cmpdf2>
   a659e:	2800      	cmp	r0, #0
   a65a0:	bf48      	it	mi
   a65a2:	f110 0f00 	cmnmi.w	r0, #0
   a65a6:	bd01      	pop	{r0, pc}

000a65a8 <__aeabi_dcmpeq>:
   a65a8:	f84d ed08 	str.w	lr, [sp, #-8]!
   a65ac:	f7ff fff4 	bl	a6598 <__aeabi_cdcmpeq>
   a65b0:	bf0c      	ite	eq
   a65b2:	2001      	moveq	r0, #1
   a65b4:	2000      	movne	r0, #0
   a65b6:	f85d fb08 	ldr.w	pc, [sp], #8
   a65ba:	bf00      	nop

000a65bc <__aeabi_dcmplt>:
   a65bc:	f84d ed08 	str.w	lr, [sp, #-8]!
   a65c0:	f7ff ffea 	bl	a6598 <__aeabi_cdcmpeq>
   a65c4:	bf34      	ite	cc
   a65c6:	2001      	movcc	r0, #1
   a65c8:	2000      	movcs	r0, #0
   a65ca:	f85d fb08 	ldr.w	pc, [sp], #8
   a65ce:	bf00      	nop

000a65d0 <__aeabi_dcmple>:
   a65d0:	f84d ed08 	str.w	lr, [sp, #-8]!
   a65d4:	f7ff ffe0 	bl	a6598 <__aeabi_cdcmpeq>
   a65d8:	bf94      	ite	ls
   a65da:	2001      	movls	r0, #1
   a65dc:	2000      	movhi	r0, #0
   a65de:	f85d fb08 	ldr.w	pc, [sp], #8
   a65e2:	bf00      	nop

000a65e4 <__aeabi_dcmpge>:
   a65e4:	f84d ed08 	str.w	lr, [sp, #-8]!
   a65e8:	f7ff ffce 	bl	a6588 <__aeabi_cdrcmple>
   a65ec:	bf94      	ite	ls
   a65ee:	2001      	movls	r0, #1
   a65f0:	2000      	movhi	r0, #0
   a65f2:	f85d fb08 	ldr.w	pc, [sp], #8
   a65f6:	bf00      	nop

000a65f8 <__aeabi_dcmpgt>:
   a65f8:	f84d ed08 	str.w	lr, [sp, #-8]!
   a65fc:	f7ff ffc4 	bl	a6588 <__aeabi_cdrcmple>
   a6600:	bf34      	ite	cc
   a6602:	2001      	movcc	r0, #1
   a6604:	2000      	movcs	r0, #0
   a6606:	f85d fb08 	ldr.w	pc, [sp], #8
   a660a:	bf00      	nop

000a660c <__aeabi_d2iz>:
   a660c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   a6610:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   a6614:	d215      	bcs.n	a6642 <__aeabi_d2iz+0x36>
   a6616:	d511      	bpl.n	a663c <__aeabi_d2iz+0x30>
   a6618:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   a661c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   a6620:	d912      	bls.n	a6648 <__aeabi_d2iz+0x3c>
   a6622:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   a6626:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   a662a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   a662e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   a6632:	fa23 f002 	lsr.w	r0, r3, r2
   a6636:	bf18      	it	ne
   a6638:	4240      	negne	r0, r0
   a663a:	4770      	bx	lr
   a663c:	f04f 0000 	mov.w	r0, #0
   a6640:	4770      	bx	lr
   a6642:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   a6646:	d105      	bne.n	a6654 <__aeabi_d2iz+0x48>
   a6648:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   a664c:	bf08      	it	eq
   a664e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   a6652:	4770      	bx	lr
   a6654:	f04f 0000 	mov.w	r0, #0
   a6658:	4770      	bx	lr
   a665a:	bf00      	nop

000a665c <__aeabi_d2uiz>:
   a665c:	004a      	lsls	r2, r1, #1
   a665e:	d211      	bcs.n	a6684 <__aeabi_d2uiz+0x28>
   a6660:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   a6664:	d211      	bcs.n	a668a <__aeabi_d2uiz+0x2e>
   a6666:	d50d      	bpl.n	a6684 <__aeabi_d2uiz+0x28>
   a6668:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   a666c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   a6670:	d40e      	bmi.n	a6690 <__aeabi_d2uiz+0x34>
   a6672:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   a6676:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   a667a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   a667e:	fa23 f002 	lsr.w	r0, r3, r2
   a6682:	4770      	bx	lr
   a6684:	f04f 0000 	mov.w	r0, #0
   a6688:	4770      	bx	lr
   a668a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   a668e:	d102      	bne.n	a6696 <__aeabi_d2uiz+0x3a>
   a6690:	f04f 30ff 	mov.w	r0, #4294967295
   a6694:	4770      	bx	lr
   a6696:	f04f 0000 	mov.w	r0, #0
   a669a:	4770      	bx	lr

000a669c <__aeabi_d2f>:
   a669c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   a66a0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   a66a4:	bf24      	itt	cs
   a66a6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   a66aa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   a66ae:	d90d      	bls.n	a66cc <__aeabi_d2f+0x30>
   a66b0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   a66b4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   a66b8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   a66bc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   a66c0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   a66c4:	bf08      	it	eq
   a66c6:	f020 0001 	biceq.w	r0, r0, #1
   a66ca:	4770      	bx	lr
   a66cc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   a66d0:	d121      	bne.n	a6716 <__aeabi_d2f+0x7a>
   a66d2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   a66d6:	bfbc      	itt	lt
   a66d8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   a66dc:	4770      	bxlt	lr
   a66de:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   a66e2:	ea4f 5252 	mov.w	r2, r2, lsr #21
   a66e6:	f1c2 0218 	rsb	r2, r2, #24
   a66ea:	f1c2 0c20 	rsb	ip, r2, #32
   a66ee:	fa10 f30c 	lsls.w	r3, r0, ip
   a66f2:	fa20 f002 	lsr.w	r0, r0, r2
   a66f6:	bf18      	it	ne
   a66f8:	f040 0001 	orrne.w	r0, r0, #1
   a66fc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   a6700:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   a6704:	fa03 fc0c 	lsl.w	ip, r3, ip
   a6708:	ea40 000c 	orr.w	r0, r0, ip
   a670c:	fa23 f302 	lsr.w	r3, r3, r2
   a6710:	ea4f 0343 	mov.w	r3, r3, lsl #1
   a6714:	e7cc      	b.n	a66b0 <__aeabi_d2f+0x14>
   a6716:	ea7f 5362 	mvns.w	r3, r2, asr #21
   a671a:	d107      	bne.n	a672c <__aeabi_d2f+0x90>
   a671c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   a6720:	bf1e      	ittt	ne
   a6722:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   a6726:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   a672a:	4770      	bxne	lr
   a672c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   a6730:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   a6734:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   a6738:	4770      	bx	lr
   a673a:	bf00      	nop

000a673c <__aeabi_frsub>:
   a673c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   a6740:	e002      	b.n	a6748 <__addsf3>
   a6742:	bf00      	nop

000a6744 <__aeabi_fsub>:
   a6744:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000a6748 <__addsf3>:
   a6748:	0042      	lsls	r2, r0, #1
   a674a:	bf1f      	itttt	ne
   a674c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   a6750:	ea92 0f03 	teqne	r2, r3
   a6754:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   a6758:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   a675c:	d06a      	beq.n	a6834 <__addsf3+0xec>
   a675e:	ea4f 6212 	mov.w	r2, r2, lsr #24
   a6762:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   a6766:	bfc1      	itttt	gt
   a6768:	18d2      	addgt	r2, r2, r3
   a676a:	4041      	eorgt	r1, r0
   a676c:	4048      	eorgt	r0, r1
   a676e:	4041      	eorgt	r1, r0
   a6770:	bfb8      	it	lt
   a6772:	425b      	neglt	r3, r3
   a6774:	2b19      	cmp	r3, #25
   a6776:	bf88      	it	hi
   a6778:	4770      	bxhi	lr
   a677a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   a677e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   a6782:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   a6786:	bf18      	it	ne
   a6788:	4240      	negne	r0, r0
   a678a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   a678e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   a6792:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   a6796:	bf18      	it	ne
   a6798:	4249      	negne	r1, r1
   a679a:	ea92 0f03 	teq	r2, r3
   a679e:	d03f      	beq.n	a6820 <__addsf3+0xd8>
   a67a0:	f1a2 0201 	sub.w	r2, r2, #1
   a67a4:	fa41 fc03 	asr.w	ip, r1, r3
   a67a8:	eb10 000c 	adds.w	r0, r0, ip
   a67ac:	f1c3 0320 	rsb	r3, r3, #32
   a67b0:	fa01 f103 	lsl.w	r1, r1, r3
   a67b4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   a67b8:	d502      	bpl.n	a67c0 <__addsf3+0x78>
   a67ba:	4249      	negs	r1, r1
   a67bc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   a67c0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   a67c4:	d313      	bcc.n	a67ee <__addsf3+0xa6>
   a67c6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   a67ca:	d306      	bcc.n	a67da <__addsf3+0x92>
   a67cc:	0840      	lsrs	r0, r0, #1
   a67ce:	ea4f 0131 	mov.w	r1, r1, rrx
   a67d2:	f102 0201 	add.w	r2, r2, #1
   a67d6:	2afe      	cmp	r2, #254	; 0xfe
   a67d8:	d251      	bcs.n	a687e <__addsf3+0x136>
   a67da:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   a67de:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   a67e2:	bf08      	it	eq
   a67e4:	f020 0001 	biceq.w	r0, r0, #1
   a67e8:	ea40 0003 	orr.w	r0, r0, r3
   a67ec:	4770      	bx	lr
   a67ee:	0049      	lsls	r1, r1, #1
   a67f0:	eb40 0000 	adc.w	r0, r0, r0
   a67f4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   a67f8:	f1a2 0201 	sub.w	r2, r2, #1
   a67fc:	d1ed      	bne.n	a67da <__addsf3+0x92>
   a67fe:	fab0 fc80 	clz	ip, r0
   a6802:	f1ac 0c08 	sub.w	ip, ip, #8
   a6806:	ebb2 020c 	subs.w	r2, r2, ip
   a680a:	fa00 f00c 	lsl.w	r0, r0, ip
   a680e:	bfaa      	itet	ge
   a6810:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   a6814:	4252      	neglt	r2, r2
   a6816:	4318      	orrge	r0, r3
   a6818:	bfbc      	itt	lt
   a681a:	40d0      	lsrlt	r0, r2
   a681c:	4318      	orrlt	r0, r3
   a681e:	4770      	bx	lr
   a6820:	f092 0f00 	teq	r2, #0
   a6824:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   a6828:	bf06      	itte	eq
   a682a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   a682e:	3201      	addeq	r2, #1
   a6830:	3b01      	subne	r3, #1
   a6832:	e7b5      	b.n	a67a0 <__addsf3+0x58>
   a6834:	ea4f 0341 	mov.w	r3, r1, lsl #1
   a6838:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   a683c:	bf18      	it	ne
   a683e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   a6842:	d021      	beq.n	a6888 <__addsf3+0x140>
   a6844:	ea92 0f03 	teq	r2, r3
   a6848:	d004      	beq.n	a6854 <__addsf3+0x10c>
   a684a:	f092 0f00 	teq	r2, #0
   a684e:	bf08      	it	eq
   a6850:	4608      	moveq	r0, r1
   a6852:	4770      	bx	lr
   a6854:	ea90 0f01 	teq	r0, r1
   a6858:	bf1c      	itt	ne
   a685a:	2000      	movne	r0, #0
   a685c:	4770      	bxne	lr
   a685e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   a6862:	d104      	bne.n	a686e <__addsf3+0x126>
   a6864:	0040      	lsls	r0, r0, #1
   a6866:	bf28      	it	cs
   a6868:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   a686c:	4770      	bx	lr
   a686e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   a6872:	bf3c      	itt	cc
   a6874:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   a6878:	4770      	bxcc	lr
   a687a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   a687e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   a6882:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   a6886:	4770      	bx	lr
   a6888:	ea7f 6222 	mvns.w	r2, r2, asr #24
   a688c:	bf16      	itet	ne
   a688e:	4608      	movne	r0, r1
   a6890:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   a6894:	4601      	movne	r1, r0
   a6896:	0242      	lsls	r2, r0, #9
   a6898:	bf06      	itte	eq
   a689a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   a689e:	ea90 0f01 	teqeq	r0, r1
   a68a2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   a68a6:	4770      	bx	lr

000a68a8 <__aeabi_ui2f>:
   a68a8:	f04f 0300 	mov.w	r3, #0
   a68ac:	e004      	b.n	a68b8 <__aeabi_i2f+0x8>
   a68ae:	bf00      	nop

000a68b0 <__aeabi_i2f>:
   a68b0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   a68b4:	bf48      	it	mi
   a68b6:	4240      	negmi	r0, r0
   a68b8:	ea5f 0c00 	movs.w	ip, r0
   a68bc:	bf08      	it	eq
   a68be:	4770      	bxeq	lr
   a68c0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   a68c4:	4601      	mov	r1, r0
   a68c6:	f04f 0000 	mov.w	r0, #0
   a68ca:	e01c      	b.n	a6906 <__aeabi_l2f+0x2a>

000a68cc <__aeabi_ul2f>:
   a68cc:	ea50 0201 	orrs.w	r2, r0, r1
   a68d0:	bf08      	it	eq
   a68d2:	4770      	bxeq	lr
   a68d4:	f04f 0300 	mov.w	r3, #0
   a68d8:	e00a      	b.n	a68f0 <__aeabi_l2f+0x14>
   a68da:	bf00      	nop

000a68dc <__aeabi_l2f>:
   a68dc:	ea50 0201 	orrs.w	r2, r0, r1
   a68e0:	bf08      	it	eq
   a68e2:	4770      	bxeq	lr
   a68e4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   a68e8:	d502      	bpl.n	a68f0 <__aeabi_l2f+0x14>
   a68ea:	4240      	negs	r0, r0
   a68ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   a68f0:	ea5f 0c01 	movs.w	ip, r1
   a68f4:	bf02      	ittt	eq
   a68f6:	4684      	moveq	ip, r0
   a68f8:	4601      	moveq	r1, r0
   a68fa:	2000      	moveq	r0, #0
   a68fc:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   a6900:	bf08      	it	eq
   a6902:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   a6906:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   a690a:	fabc f28c 	clz	r2, ip
   a690e:	3a08      	subs	r2, #8
   a6910:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   a6914:	db10      	blt.n	a6938 <__aeabi_l2f+0x5c>
   a6916:	fa01 fc02 	lsl.w	ip, r1, r2
   a691a:	4463      	add	r3, ip
   a691c:	fa00 fc02 	lsl.w	ip, r0, r2
   a6920:	f1c2 0220 	rsb	r2, r2, #32
   a6924:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   a6928:	fa20 f202 	lsr.w	r2, r0, r2
   a692c:	eb43 0002 	adc.w	r0, r3, r2
   a6930:	bf08      	it	eq
   a6932:	f020 0001 	biceq.w	r0, r0, #1
   a6936:	4770      	bx	lr
   a6938:	f102 0220 	add.w	r2, r2, #32
   a693c:	fa01 fc02 	lsl.w	ip, r1, r2
   a6940:	f1c2 0220 	rsb	r2, r2, #32
   a6944:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   a6948:	fa21 f202 	lsr.w	r2, r1, r2
   a694c:	eb43 0002 	adc.w	r0, r3, r2
   a6950:	bf08      	it	eq
   a6952:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   a6956:	4770      	bx	lr

000a6958 <__aeabi_fmul>:
   a6958:	f04f 0cff 	mov.w	ip, #255	; 0xff
   a695c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   a6960:	bf1e      	ittt	ne
   a6962:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   a6966:	ea92 0f0c 	teqne	r2, ip
   a696a:	ea93 0f0c 	teqne	r3, ip
   a696e:	d06f      	beq.n	a6a50 <__aeabi_fmul+0xf8>
   a6970:	441a      	add	r2, r3
   a6972:	ea80 0c01 	eor.w	ip, r0, r1
   a6976:	0240      	lsls	r0, r0, #9
   a6978:	bf18      	it	ne
   a697a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   a697e:	d01e      	beq.n	a69be <__aeabi_fmul+0x66>
   a6980:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   a6984:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   a6988:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   a698c:	fba0 3101 	umull	r3, r1, r0, r1
   a6990:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   a6994:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   a6998:	bf3e      	ittt	cc
   a699a:	0049      	lslcc	r1, r1, #1
   a699c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   a69a0:	005b      	lslcc	r3, r3, #1
   a69a2:	ea40 0001 	orr.w	r0, r0, r1
   a69a6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   a69aa:	2afd      	cmp	r2, #253	; 0xfd
   a69ac:	d81d      	bhi.n	a69ea <__aeabi_fmul+0x92>
   a69ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   a69b2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   a69b6:	bf08      	it	eq
   a69b8:	f020 0001 	biceq.w	r0, r0, #1
   a69bc:	4770      	bx	lr
   a69be:	f090 0f00 	teq	r0, #0
   a69c2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   a69c6:	bf08      	it	eq
   a69c8:	0249      	lsleq	r1, r1, #9
   a69ca:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   a69ce:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   a69d2:	3a7f      	subs	r2, #127	; 0x7f
   a69d4:	bfc2      	ittt	gt
   a69d6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   a69da:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   a69de:	4770      	bxgt	lr
   a69e0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   a69e4:	f04f 0300 	mov.w	r3, #0
   a69e8:	3a01      	subs	r2, #1
   a69ea:	dc5d      	bgt.n	a6aa8 <__aeabi_fmul+0x150>
   a69ec:	f112 0f19 	cmn.w	r2, #25
   a69f0:	bfdc      	itt	le
   a69f2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   a69f6:	4770      	bxle	lr
   a69f8:	f1c2 0200 	rsb	r2, r2, #0
   a69fc:	0041      	lsls	r1, r0, #1
   a69fe:	fa21 f102 	lsr.w	r1, r1, r2
   a6a02:	f1c2 0220 	rsb	r2, r2, #32
   a6a06:	fa00 fc02 	lsl.w	ip, r0, r2
   a6a0a:	ea5f 0031 	movs.w	r0, r1, rrx
   a6a0e:	f140 0000 	adc.w	r0, r0, #0
   a6a12:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   a6a16:	bf08      	it	eq
   a6a18:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   a6a1c:	4770      	bx	lr
   a6a1e:	f092 0f00 	teq	r2, #0
   a6a22:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   a6a26:	bf02      	ittt	eq
   a6a28:	0040      	lsleq	r0, r0, #1
   a6a2a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   a6a2e:	3a01      	subeq	r2, #1
   a6a30:	d0f9      	beq.n	a6a26 <__aeabi_fmul+0xce>
   a6a32:	ea40 000c 	orr.w	r0, r0, ip
   a6a36:	f093 0f00 	teq	r3, #0
   a6a3a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   a6a3e:	bf02      	ittt	eq
   a6a40:	0049      	lsleq	r1, r1, #1
   a6a42:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   a6a46:	3b01      	subeq	r3, #1
   a6a48:	d0f9      	beq.n	a6a3e <__aeabi_fmul+0xe6>
   a6a4a:	ea41 010c 	orr.w	r1, r1, ip
   a6a4e:	e78f      	b.n	a6970 <__aeabi_fmul+0x18>
   a6a50:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   a6a54:	ea92 0f0c 	teq	r2, ip
   a6a58:	bf18      	it	ne
   a6a5a:	ea93 0f0c 	teqne	r3, ip
   a6a5e:	d00a      	beq.n	a6a76 <__aeabi_fmul+0x11e>
   a6a60:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   a6a64:	bf18      	it	ne
   a6a66:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   a6a6a:	d1d8      	bne.n	a6a1e <__aeabi_fmul+0xc6>
   a6a6c:	ea80 0001 	eor.w	r0, r0, r1
   a6a70:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   a6a74:	4770      	bx	lr
   a6a76:	f090 0f00 	teq	r0, #0
   a6a7a:	bf17      	itett	ne
   a6a7c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   a6a80:	4608      	moveq	r0, r1
   a6a82:	f091 0f00 	teqne	r1, #0
   a6a86:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   a6a8a:	d014      	beq.n	a6ab6 <__aeabi_fmul+0x15e>
   a6a8c:	ea92 0f0c 	teq	r2, ip
   a6a90:	d101      	bne.n	a6a96 <__aeabi_fmul+0x13e>
   a6a92:	0242      	lsls	r2, r0, #9
   a6a94:	d10f      	bne.n	a6ab6 <__aeabi_fmul+0x15e>
   a6a96:	ea93 0f0c 	teq	r3, ip
   a6a9a:	d103      	bne.n	a6aa4 <__aeabi_fmul+0x14c>
   a6a9c:	024b      	lsls	r3, r1, #9
   a6a9e:	bf18      	it	ne
   a6aa0:	4608      	movne	r0, r1
   a6aa2:	d108      	bne.n	a6ab6 <__aeabi_fmul+0x15e>
   a6aa4:	ea80 0001 	eor.w	r0, r0, r1
   a6aa8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   a6aac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   a6ab0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   a6ab4:	4770      	bx	lr
   a6ab6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   a6aba:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   a6abe:	4770      	bx	lr

000a6ac0 <__aeabi_fdiv>:
   a6ac0:	f04f 0cff 	mov.w	ip, #255	; 0xff
   a6ac4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   a6ac8:	bf1e      	ittt	ne
   a6aca:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   a6ace:	ea92 0f0c 	teqne	r2, ip
   a6ad2:	ea93 0f0c 	teqne	r3, ip
   a6ad6:	d069      	beq.n	a6bac <__aeabi_fdiv+0xec>
   a6ad8:	eba2 0203 	sub.w	r2, r2, r3
   a6adc:	ea80 0c01 	eor.w	ip, r0, r1
   a6ae0:	0249      	lsls	r1, r1, #9
   a6ae2:	ea4f 2040 	mov.w	r0, r0, lsl #9
   a6ae6:	d037      	beq.n	a6b58 <__aeabi_fdiv+0x98>
   a6ae8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   a6aec:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   a6af0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   a6af4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   a6af8:	428b      	cmp	r3, r1
   a6afa:	bf38      	it	cc
   a6afc:	005b      	lslcc	r3, r3, #1
   a6afe:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   a6b02:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   a6b06:	428b      	cmp	r3, r1
   a6b08:	bf24      	itt	cs
   a6b0a:	1a5b      	subcs	r3, r3, r1
   a6b0c:	ea40 000c 	orrcs.w	r0, r0, ip
   a6b10:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   a6b14:	bf24      	itt	cs
   a6b16:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   a6b1a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   a6b1e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   a6b22:	bf24      	itt	cs
   a6b24:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   a6b28:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   a6b2c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   a6b30:	bf24      	itt	cs
   a6b32:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   a6b36:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   a6b3a:	011b      	lsls	r3, r3, #4
   a6b3c:	bf18      	it	ne
   a6b3e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   a6b42:	d1e0      	bne.n	a6b06 <__aeabi_fdiv+0x46>
   a6b44:	2afd      	cmp	r2, #253	; 0xfd
   a6b46:	f63f af50 	bhi.w	a69ea <__aeabi_fmul+0x92>
   a6b4a:	428b      	cmp	r3, r1
   a6b4c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   a6b50:	bf08      	it	eq
   a6b52:	f020 0001 	biceq.w	r0, r0, #1
   a6b56:	4770      	bx	lr
   a6b58:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   a6b5c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   a6b60:	327f      	adds	r2, #127	; 0x7f
   a6b62:	bfc2      	ittt	gt
   a6b64:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   a6b68:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   a6b6c:	4770      	bxgt	lr
   a6b6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   a6b72:	f04f 0300 	mov.w	r3, #0
   a6b76:	3a01      	subs	r2, #1
   a6b78:	e737      	b.n	a69ea <__aeabi_fmul+0x92>
   a6b7a:	f092 0f00 	teq	r2, #0
   a6b7e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   a6b82:	bf02      	ittt	eq
   a6b84:	0040      	lsleq	r0, r0, #1
   a6b86:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   a6b8a:	3a01      	subeq	r2, #1
   a6b8c:	d0f9      	beq.n	a6b82 <__aeabi_fdiv+0xc2>
   a6b8e:	ea40 000c 	orr.w	r0, r0, ip
   a6b92:	f093 0f00 	teq	r3, #0
   a6b96:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   a6b9a:	bf02      	ittt	eq
   a6b9c:	0049      	lsleq	r1, r1, #1
   a6b9e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   a6ba2:	3b01      	subeq	r3, #1
   a6ba4:	d0f9      	beq.n	a6b9a <__aeabi_fdiv+0xda>
   a6ba6:	ea41 010c 	orr.w	r1, r1, ip
   a6baa:	e795      	b.n	a6ad8 <__aeabi_fdiv+0x18>
   a6bac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   a6bb0:	ea92 0f0c 	teq	r2, ip
   a6bb4:	d108      	bne.n	a6bc8 <__aeabi_fdiv+0x108>
   a6bb6:	0242      	lsls	r2, r0, #9
   a6bb8:	f47f af7d 	bne.w	a6ab6 <__aeabi_fmul+0x15e>
   a6bbc:	ea93 0f0c 	teq	r3, ip
   a6bc0:	f47f af70 	bne.w	a6aa4 <__aeabi_fmul+0x14c>
   a6bc4:	4608      	mov	r0, r1
   a6bc6:	e776      	b.n	a6ab6 <__aeabi_fmul+0x15e>
   a6bc8:	ea93 0f0c 	teq	r3, ip
   a6bcc:	d104      	bne.n	a6bd8 <__aeabi_fdiv+0x118>
   a6bce:	024b      	lsls	r3, r1, #9
   a6bd0:	f43f af4c 	beq.w	a6a6c <__aeabi_fmul+0x114>
   a6bd4:	4608      	mov	r0, r1
   a6bd6:	e76e      	b.n	a6ab6 <__aeabi_fmul+0x15e>
   a6bd8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   a6bdc:	bf18      	it	ne
   a6bde:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   a6be2:	d1ca      	bne.n	a6b7a <__aeabi_fdiv+0xba>
   a6be4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   a6be8:	f47f af5c 	bne.w	a6aa4 <__aeabi_fmul+0x14c>
   a6bec:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   a6bf0:	f47f af3c 	bne.w	a6a6c <__aeabi_fmul+0x114>
   a6bf4:	e75f      	b.n	a6ab6 <__aeabi_fmul+0x15e>
   a6bf6:	bf00      	nop

000a6bf8 <__gesf2>:
   a6bf8:	f04f 3cff 	mov.w	ip, #4294967295
   a6bfc:	e006      	b.n	a6c0c <__cmpsf2+0x4>
   a6bfe:	bf00      	nop

000a6c00 <__lesf2>:
   a6c00:	f04f 0c01 	mov.w	ip, #1
   a6c04:	e002      	b.n	a6c0c <__cmpsf2+0x4>
   a6c06:	bf00      	nop

000a6c08 <__cmpsf2>:
   a6c08:	f04f 0c01 	mov.w	ip, #1
   a6c0c:	f84d cd04 	str.w	ip, [sp, #-4]!
   a6c10:	ea4f 0240 	mov.w	r2, r0, lsl #1
   a6c14:	ea4f 0341 	mov.w	r3, r1, lsl #1
   a6c18:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   a6c1c:	bf18      	it	ne
   a6c1e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   a6c22:	d011      	beq.n	a6c48 <__cmpsf2+0x40>
   a6c24:	b001      	add	sp, #4
   a6c26:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
   a6c2a:	bf18      	it	ne
   a6c2c:	ea90 0f01 	teqne	r0, r1
   a6c30:	bf58      	it	pl
   a6c32:	ebb2 0003 	subspl.w	r0, r2, r3
   a6c36:	bf88      	it	hi
   a6c38:	17c8      	asrhi	r0, r1, #31
   a6c3a:	bf38      	it	cc
   a6c3c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
   a6c40:	bf18      	it	ne
   a6c42:	f040 0001 	orrne.w	r0, r0, #1
   a6c46:	4770      	bx	lr
   a6c48:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   a6c4c:	d102      	bne.n	a6c54 <__cmpsf2+0x4c>
   a6c4e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
   a6c52:	d105      	bne.n	a6c60 <__cmpsf2+0x58>
   a6c54:	ea7f 6c23 	mvns.w	ip, r3, asr #24
   a6c58:	d1e4      	bne.n	a6c24 <__cmpsf2+0x1c>
   a6c5a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
   a6c5e:	d0e1      	beq.n	a6c24 <__cmpsf2+0x1c>
   a6c60:	f85d 0b04 	ldr.w	r0, [sp], #4
   a6c64:	4770      	bx	lr
   a6c66:	bf00      	nop

000a6c68 <__aeabi_cfrcmple>:
   a6c68:	4684      	mov	ip, r0
   a6c6a:	4608      	mov	r0, r1
   a6c6c:	4661      	mov	r1, ip
   a6c6e:	e7ff      	b.n	a6c70 <__aeabi_cfcmpeq>

000a6c70 <__aeabi_cfcmpeq>:
   a6c70:	b50f      	push	{r0, r1, r2, r3, lr}
   a6c72:	f7ff ffc9 	bl	a6c08 <__cmpsf2>
   a6c76:	2800      	cmp	r0, #0
   a6c78:	bf48      	it	mi
   a6c7a:	f110 0f00 	cmnmi.w	r0, #0
   a6c7e:	bd0f      	pop	{r0, r1, r2, r3, pc}

000a6c80 <__aeabi_fcmpeq>:
   a6c80:	f84d ed08 	str.w	lr, [sp, #-8]!
   a6c84:	f7ff fff4 	bl	a6c70 <__aeabi_cfcmpeq>
   a6c88:	bf0c      	ite	eq
   a6c8a:	2001      	moveq	r0, #1
   a6c8c:	2000      	movne	r0, #0
   a6c8e:	f85d fb08 	ldr.w	pc, [sp], #8
   a6c92:	bf00      	nop

000a6c94 <__aeabi_fcmplt>:
   a6c94:	f84d ed08 	str.w	lr, [sp, #-8]!
   a6c98:	f7ff ffea 	bl	a6c70 <__aeabi_cfcmpeq>
   a6c9c:	bf34      	ite	cc
   a6c9e:	2001      	movcc	r0, #1
   a6ca0:	2000      	movcs	r0, #0
   a6ca2:	f85d fb08 	ldr.w	pc, [sp], #8
   a6ca6:	bf00      	nop

000a6ca8 <__aeabi_fcmple>:
   a6ca8:	f84d ed08 	str.w	lr, [sp, #-8]!
   a6cac:	f7ff ffe0 	bl	a6c70 <__aeabi_cfcmpeq>
   a6cb0:	bf94      	ite	ls
   a6cb2:	2001      	movls	r0, #1
   a6cb4:	2000      	movhi	r0, #0
   a6cb6:	f85d fb08 	ldr.w	pc, [sp], #8
   a6cba:	bf00      	nop

000a6cbc <__aeabi_fcmpge>:
   a6cbc:	f84d ed08 	str.w	lr, [sp, #-8]!
   a6cc0:	f7ff ffd2 	bl	a6c68 <__aeabi_cfrcmple>
   a6cc4:	bf94      	ite	ls
   a6cc6:	2001      	movls	r0, #1
   a6cc8:	2000      	movhi	r0, #0
   a6cca:	f85d fb08 	ldr.w	pc, [sp], #8
   a6cce:	bf00      	nop

000a6cd0 <__aeabi_fcmpgt>:
   a6cd0:	f84d ed08 	str.w	lr, [sp, #-8]!
   a6cd4:	f7ff ffc8 	bl	a6c68 <__aeabi_cfrcmple>
   a6cd8:	bf34      	ite	cc
   a6cda:	2001      	movcc	r0, #1
   a6cdc:	2000      	movcs	r0, #0
   a6cde:	f85d fb08 	ldr.w	pc, [sp], #8
   a6ce2:	bf00      	nop

000a6ce4 <__aeabi_f2iz>:
   a6ce4:	ea4f 0240 	mov.w	r2, r0, lsl #1
   a6ce8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   a6cec:	d30f      	bcc.n	a6d0e <__aeabi_f2iz+0x2a>
   a6cee:	f04f 039e 	mov.w	r3, #158	; 0x9e
   a6cf2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   a6cf6:	d90d      	bls.n	a6d14 <__aeabi_f2iz+0x30>
   a6cf8:	ea4f 2300 	mov.w	r3, r0, lsl #8
   a6cfc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   a6d00:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   a6d04:	fa23 f002 	lsr.w	r0, r3, r2
   a6d08:	bf18      	it	ne
   a6d0a:	4240      	negne	r0, r0
   a6d0c:	4770      	bx	lr
   a6d0e:	f04f 0000 	mov.w	r0, #0
   a6d12:	4770      	bx	lr
   a6d14:	f112 0f61 	cmn.w	r2, #97	; 0x61
   a6d18:	d101      	bne.n	a6d1e <__aeabi_f2iz+0x3a>
   a6d1a:	0242      	lsls	r2, r0, #9
   a6d1c:	d105      	bne.n	a6d2a <__aeabi_f2iz+0x46>
   a6d1e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
   a6d22:	bf08      	it	eq
   a6d24:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   a6d28:	4770      	bx	lr
   a6d2a:	f04f 0000 	mov.w	r0, #0
   a6d2e:	4770      	bx	lr

000a6d30 <__aeabi_f2uiz>:
   a6d30:	0042      	lsls	r2, r0, #1
   a6d32:	d20e      	bcs.n	a6d52 <__aeabi_f2uiz+0x22>
   a6d34:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   a6d38:	d30b      	bcc.n	a6d52 <__aeabi_f2uiz+0x22>
   a6d3a:	f04f 039e 	mov.w	r3, #158	; 0x9e
   a6d3e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   a6d42:	d409      	bmi.n	a6d58 <__aeabi_f2uiz+0x28>
   a6d44:	ea4f 2300 	mov.w	r3, r0, lsl #8
   a6d48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   a6d4c:	fa23 f002 	lsr.w	r0, r3, r2
   a6d50:	4770      	bx	lr
   a6d52:	f04f 0000 	mov.w	r0, #0
   a6d56:	4770      	bx	lr
   a6d58:	f112 0f61 	cmn.w	r2, #97	; 0x61
   a6d5c:	d101      	bne.n	a6d62 <__aeabi_f2uiz+0x32>
   a6d5e:	0242      	lsls	r2, r0, #9
   a6d60:	d102      	bne.n	a6d68 <__aeabi_f2uiz+0x38>
   a6d62:	f04f 30ff 	mov.w	r0, #4294967295
   a6d66:	4770      	bx	lr
   a6d68:	f04f 0000 	mov.w	r0, #0
   a6d6c:	4770      	bx	lr
   a6d6e:	bf00      	nop

000a6d70 <__libc_init_array>:
   a6d70:	b570      	push	{r4, r5, r6, lr}
   a6d72:	4e0f      	ldr	r6, [pc, #60]	; (a6db0 <__libc_init_array+0x40>)
   a6d74:	4d0f      	ldr	r5, [pc, #60]	; (a6db4 <__libc_init_array+0x44>)
   a6d76:	1b76      	subs	r6, r6, r5
   a6d78:	10b6      	asrs	r6, r6, #2
   a6d7a:	bf18      	it	ne
   a6d7c:	2400      	movne	r4, #0
   a6d7e:	d005      	beq.n	a6d8c <__libc_init_array+0x1c>
   a6d80:	3401      	adds	r4, #1
   a6d82:	f855 3b04 	ldr.w	r3, [r5], #4
   a6d86:	4798      	blx	r3
   a6d88:	42a6      	cmp	r6, r4
   a6d8a:	d1f9      	bne.n	a6d80 <__libc_init_array+0x10>
   a6d8c:	4e0a      	ldr	r6, [pc, #40]	; (a6db8 <__libc_init_array+0x48>)
   a6d8e:	4d0b      	ldr	r5, [pc, #44]	; (a6dbc <__libc_init_array+0x4c>)
   a6d90:	f002 f812 	bl	a8db8 <_init>
   a6d94:	1b76      	subs	r6, r6, r5
   a6d96:	10b6      	asrs	r6, r6, #2
   a6d98:	bf18      	it	ne
   a6d9a:	2400      	movne	r4, #0
   a6d9c:	d006      	beq.n	a6dac <__libc_init_array+0x3c>
   a6d9e:	3401      	adds	r4, #1
   a6da0:	f855 3b04 	ldr.w	r3, [r5], #4
   a6da4:	4798      	blx	r3
   a6da6:	42a6      	cmp	r6, r4
   a6da8:	d1f9      	bne.n	a6d9e <__libc_init_array+0x2e>
   a6daa:	bd70      	pop	{r4, r5, r6, pc}
   a6dac:	bd70      	pop	{r4, r5, r6, pc}
   a6dae:	bf00      	nop
   a6db0:	000a8dc4 	.word	0x000a8dc4
   a6db4:	000a8dc4 	.word	0x000a8dc4
   a6db8:	000a8dcc 	.word	0x000a8dcc
   a6dbc:	000a8dc4 	.word	0x000a8dc4

000a6dc0 <memcpy>:
   a6dc0:	4684      	mov	ip, r0
   a6dc2:	ea41 0300 	orr.w	r3, r1, r0
   a6dc6:	f013 0303 	ands.w	r3, r3, #3
   a6dca:	d149      	bne.n	a6e60 <memcpy+0xa0>
   a6dcc:	3a40      	subs	r2, #64	; 0x40
   a6dce:	d323      	bcc.n	a6e18 <memcpy+0x58>
   a6dd0:	680b      	ldr	r3, [r1, #0]
   a6dd2:	6003      	str	r3, [r0, #0]
   a6dd4:	684b      	ldr	r3, [r1, #4]
   a6dd6:	6043      	str	r3, [r0, #4]
   a6dd8:	688b      	ldr	r3, [r1, #8]
   a6dda:	6083      	str	r3, [r0, #8]
   a6ddc:	68cb      	ldr	r3, [r1, #12]
   a6dde:	60c3      	str	r3, [r0, #12]
   a6de0:	690b      	ldr	r3, [r1, #16]
   a6de2:	6103      	str	r3, [r0, #16]
   a6de4:	694b      	ldr	r3, [r1, #20]
   a6de6:	6143      	str	r3, [r0, #20]
   a6de8:	698b      	ldr	r3, [r1, #24]
   a6dea:	6183      	str	r3, [r0, #24]
   a6dec:	69cb      	ldr	r3, [r1, #28]
   a6dee:	61c3      	str	r3, [r0, #28]
   a6df0:	6a0b      	ldr	r3, [r1, #32]
   a6df2:	6203      	str	r3, [r0, #32]
   a6df4:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   a6df6:	6243      	str	r3, [r0, #36]	; 0x24
   a6df8:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   a6dfa:	6283      	str	r3, [r0, #40]	; 0x28
   a6dfc:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   a6dfe:	62c3      	str	r3, [r0, #44]	; 0x2c
   a6e00:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   a6e02:	6303      	str	r3, [r0, #48]	; 0x30
   a6e04:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   a6e06:	6343      	str	r3, [r0, #52]	; 0x34
   a6e08:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   a6e0a:	6383      	str	r3, [r0, #56]	; 0x38
   a6e0c:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   a6e0e:	63c3      	str	r3, [r0, #60]	; 0x3c
   a6e10:	3040      	adds	r0, #64	; 0x40
   a6e12:	3140      	adds	r1, #64	; 0x40
   a6e14:	3a40      	subs	r2, #64	; 0x40
   a6e16:	d2db      	bcs.n	a6dd0 <memcpy+0x10>
   a6e18:	3230      	adds	r2, #48	; 0x30
   a6e1a:	d30b      	bcc.n	a6e34 <memcpy+0x74>
   a6e1c:	680b      	ldr	r3, [r1, #0]
   a6e1e:	6003      	str	r3, [r0, #0]
   a6e20:	684b      	ldr	r3, [r1, #4]
   a6e22:	6043      	str	r3, [r0, #4]
   a6e24:	688b      	ldr	r3, [r1, #8]
   a6e26:	6083      	str	r3, [r0, #8]
   a6e28:	68cb      	ldr	r3, [r1, #12]
   a6e2a:	60c3      	str	r3, [r0, #12]
   a6e2c:	3010      	adds	r0, #16
   a6e2e:	3110      	adds	r1, #16
   a6e30:	3a10      	subs	r2, #16
   a6e32:	d2f3      	bcs.n	a6e1c <memcpy+0x5c>
   a6e34:	320c      	adds	r2, #12
   a6e36:	d305      	bcc.n	a6e44 <memcpy+0x84>
   a6e38:	f851 3b04 	ldr.w	r3, [r1], #4
   a6e3c:	f840 3b04 	str.w	r3, [r0], #4
   a6e40:	3a04      	subs	r2, #4
   a6e42:	d2f9      	bcs.n	a6e38 <memcpy+0x78>
   a6e44:	3204      	adds	r2, #4
   a6e46:	d008      	beq.n	a6e5a <memcpy+0x9a>
   a6e48:	07d2      	lsls	r2, r2, #31
   a6e4a:	bf1c      	itt	ne
   a6e4c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   a6e50:	f800 3b01 	strbne.w	r3, [r0], #1
   a6e54:	d301      	bcc.n	a6e5a <memcpy+0x9a>
   a6e56:	880b      	ldrh	r3, [r1, #0]
   a6e58:	8003      	strh	r3, [r0, #0]
   a6e5a:	4660      	mov	r0, ip
   a6e5c:	4770      	bx	lr
   a6e5e:	bf00      	nop
   a6e60:	2a08      	cmp	r2, #8
   a6e62:	d313      	bcc.n	a6e8c <memcpy+0xcc>
   a6e64:	078b      	lsls	r3, r1, #30
   a6e66:	d0b1      	beq.n	a6dcc <memcpy+0xc>
   a6e68:	f010 0303 	ands.w	r3, r0, #3
   a6e6c:	d0ae      	beq.n	a6dcc <memcpy+0xc>
   a6e6e:	f1c3 0304 	rsb	r3, r3, #4
   a6e72:	1ad2      	subs	r2, r2, r3
   a6e74:	07db      	lsls	r3, r3, #31
   a6e76:	bf1c      	itt	ne
   a6e78:	f811 3b01 	ldrbne.w	r3, [r1], #1
   a6e7c:	f800 3b01 	strbne.w	r3, [r0], #1
   a6e80:	d3a4      	bcc.n	a6dcc <memcpy+0xc>
   a6e82:	f831 3b02 	ldrh.w	r3, [r1], #2
   a6e86:	f820 3b02 	strh.w	r3, [r0], #2
   a6e8a:	e79f      	b.n	a6dcc <memcpy+0xc>
   a6e8c:	3a04      	subs	r2, #4
   a6e8e:	d3d9      	bcc.n	a6e44 <memcpy+0x84>
   a6e90:	3a01      	subs	r2, #1
   a6e92:	f811 3b01 	ldrb.w	r3, [r1], #1
   a6e96:	f800 3b01 	strb.w	r3, [r0], #1
   a6e9a:	d2f9      	bcs.n	a6e90 <memcpy+0xd0>
   a6e9c:	780b      	ldrb	r3, [r1, #0]
   a6e9e:	7003      	strb	r3, [r0, #0]
   a6ea0:	784b      	ldrb	r3, [r1, #1]
   a6ea2:	7043      	strb	r3, [r0, #1]
   a6ea4:	788b      	ldrb	r3, [r1, #2]
   a6ea6:	7083      	strb	r3, [r0, #2]
   a6ea8:	4660      	mov	r0, ip
   a6eaa:	4770      	bx	lr

000a6eac <memset>:
   a6eac:	b470      	push	{r4, r5, r6}
   a6eae:	0784      	lsls	r4, r0, #30
   a6eb0:	d046      	beq.n	a6f40 <memset+0x94>
   a6eb2:	1e54      	subs	r4, r2, #1
   a6eb4:	2a00      	cmp	r2, #0
   a6eb6:	d041      	beq.n	a6f3c <memset+0x90>
   a6eb8:	b2cd      	uxtb	r5, r1
   a6eba:	4603      	mov	r3, r0
   a6ebc:	e002      	b.n	a6ec4 <memset+0x18>
   a6ebe:	1e62      	subs	r2, r4, #1
   a6ec0:	b3e4      	cbz	r4, a6f3c <memset+0x90>
   a6ec2:	4614      	mov	r4, r2
   a6ec4:	f803 5b01 	strb.w	r5, [r3], #1
   a6ec8:	079a      	lsls	r2, r3, #30
   a6eca:	d1f8      	bne.n	a6ebe <memset+0x12>
   a6ecc:	2c03      	cmp	r4, #3
   a6ece:	d92e      	bls.n	a6f2e <memset+0x82>
   a6ed0:	b2cd      	uxtb	r5, r1
   a6ed2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   a6ed6:	2c0f      	cmp	r4, #15
   a6ed8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   a6edc:	d919      	bls.n	a6f12 <memset+0x66>
   a6ede:	4626      	mov	r6, r4
   a6ee0:	f103 0210 	add.w	r2, r3, #16
   a6ee4:	3e10      	subs	r6, #16
   a6ee6:	2e0f      	cmp	r6, #15
   a6ee8:	f842 5c10 	str.w	r5, [r2, #-16]
   a6eec:	f842 5c0c 	str.w	r5, [r2, #-12]
   a6ef0:	f842 5c08 	str.w	r5, [r2, #-8]
   a6ef4:	f842 5c04 	str.w	r5, [r2, #-4]
   a6ef8:	f102 0210 	add.w	r2, r2, #16
   a6efc:	d8f2      	bhi.n	a6ee4 <memset+0x38>
   a6efe:	f1a4 0210 	sub.w	r2, r4, #16
   a6f02:	f022 020f 	bic.w	r2, r2, #15
   a6f06:	f004 040f 	and.w	r4, r4, #15
   a6f0a:	3210      	adds	r2, #16
   a6f0c:	2c03      	cmp	r4, #3
   a6f0e:	4413      	add	r3, r2
   a6f10:	d90d      	bls.n	a6f2e <memset+0x82>
   a6f12:	461e      	mov	r6, r3
   a6f14:	4622      	mov	r2, r4
   a6f16:	3a04      	subs	r2, #4
   a6f18:	2a03      	cmp	r2, #3
   a6f1a:	f846 5b04 	str.w	r5, [r6], #4
   a6f1e:	d8fa      	bhi.n	a6f16 <memset+0x6a>
   a6f20:	1f22      	subs	r2, r4, #4
   a6f22:	f022 0203 	bic.w	r2, r2, #3
   a6f26:	3204      	adds	r2, #4
   a6f28:	4413      	add	r3, r2
   a6f2a:	f004 0403 	and.w	r4, r4, #3
   a6f2e:	b12c      	cbz	r4, a6f3c <memset+0x90>
   a6f30:	b2c9      	uxtb	r1, r1
   a6f32:	441c      	add	r4, r3
   a6f34:	f803 1b01 	strb.w	r1, [r3], #1
   a6f38:	42a3      	cmp	r3, r4
   a6f3a:	d1fb      	bne.n	a6f34 <memset+0x88>
   a6f3c:	bc70      	pop	{r4, r5, r6}
   a6f3e:	4770      	bx	lr
   a6f40:	4614      	mov	r4, r2
   a6f42:	4603      	mov	r3, r0
   a6f44:	e7c2      	b.n	a6ecc <memset+0x20>
   a6f46:	bf00      	nop

000a6f48 <_puts_r>:
   a6f48:	b5f0      	push	{r4, r5, r6, r7, lr}
   a6f4a:	4604      	mov	r4, r0
   a6f4c:	b089      	sub	sp, #36	; 0x24
   a6f4e:	4608      	mov	r0, r1
   a6f50:	460d      	mov	r5, r1
   a6f52:	f000 f8b5 	bl	a70c0 <strlen>
   a6f56:	68a3      	ldr	r3, [r4, #8]
   a6f58:	2102      	movs	r1, #2
   a6f5a:	899a      	ldrh	r2, [r3, #12]
   a6f5c:	f8df e044 	ldr.w	lr, [pc, #68]	; a6fa4 <_puts_r+0x5c>
   a6f60:	f100 0c01 	add.w	ip, r0, #1
   a6f64:	2701      	movs	r7, #1
   a6f66:	ae04      	add	r6, sp, #16
   a6f68:	9102      	str	r1, [sp, #8]
   a6f6a:	0491      	lsls	r1, r2, #18
   a6f6c:	9504      	str	r5, [sp, #16]
   a6f6e:	9005      	str	r0, [sp, #20]
   a6f70:	f8cd c00c 	str.w	ip, [sp, #12]
   a6f74:	f8cd e018 	str.w	lr, [sp, #24]
   a6f78:	9707      	str	r7, [sp, #28]
   a6f7a:	9601      	str	r6, [sp, #4]
   a6f7c:	d406      	bmi.n	a6f8c <_puts_r+0x44>
   a6f7e:	6e59      	ldr	r1, [r3, #100]	; 0x64
   a6f80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   a6f84:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   a6f88:	819a      	strh	r2, [r3, #12]
   a6f8a:	6659      	str	r1, [r3, #100]	; 0x64
   a6f8c:	4620      	mov	r0, r4
   a6f8e:	4619      	mov	r1, r3
   a6f90:	aa01      	add	r2, sp, #4
   a6f92:	f000 fbb3 	bl	a76fc <__sfvwrite_r>
   a6f96:	2800      	cmp	r0, #0
   a6f98:	bf14      	ite	ne
   a6f9a:	f04f 30ff 	movne.w	r0, #4294967295
   a6f9e:	200a      	moveq	r0, #10
   a6fa0:	b009      	add	sp, #36	; 0x24
   a6fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   a6fa4:	000a8db4 	.word	0x000a8db4

000a6fa8 <puts>:
   a6fa8:	4b02      	ldr	r3, [pc, #8]	; (a6fb4 <puts+0xc>)
   a6faa:	4601      	mov	r1, r0
   a6fac:	6818      	ldr	r0, [r3, #0]
   a6fae:	f7ff bfcb 	b.w	a6f48 <_puts_r>
   a6fb2:	bf00      	nop
   a6fb4:	200711f0 	.word	0x200711f0

000a6fb8 <setbuf>:
   a6fb8:	2900      	cmp	r1, #0
   a6fba:	bf0c      	ite	eq
   a6fbc:	2202      	moveq	r2, #2
   a6fbe:	2200      	movne	r2, #0
   a6fc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
   a6fc4:	f000 b800 	b.w	a6fc8 <setvbuf>

000a6fc8 <setvbuf>:
   a6fc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   a6fcc:	4d3a      	ldr	r5, [pc, #232]	; (a70b8 <setvbuf+0xf0>)
   a6fce:	4604      	mov	r4, r0
   a6fd0:	682e      	ldr	r6, [r5, #0]
   a6fd2:	4690      	mov	r8, r2
   a6fd4:	460d      	mov	r5, r1
   a6fd6:	461f      	mov	r7, r3
   a6fd8:	b116      	cbz	r6, a6fe0 <setvbuf+0x18>
   a6fda:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   a6fdc:	2b00      	cmp	r3, #0
   a6fde:	d03c      	beq.n	a705a <setvbuf+0x92>
   a6fe0:	f1b8 0f02 	cmp.w	r8, #2
   a6fe4:	d82f      	bhi.n	a7046 <setvbuf+0x7e>
   a6fe6:	2f00      	cmp	r7, #0
   a6fe8:	db2d      	blt.n	a7046 <setvbuf+0x7e>
   a6fea:	4621      	mov	r1, r4
   a6fec:	4630      	mov	r0, r6
   a6fee:	f000 f9ab 	bl	a7348 <_fflush_r>
   a6ff2:	89a1      	ldrh	r1, [r4, #12]
   a6ff4:	2300      	movs	r3, #0
   a6ff6:	6063      	str	r3, [r4, #4]
   a6ff8:	61a3      	str	r3, [r4, #24]
   a6ffa:	060b      	lsls	r3, r1, #24
   a6ffc:	d427      	bmi.n	a704e <setvbuf+0x86>
   a6ffe:	f021 0183 	bic.w	r1, r1, #131	; 0x83
   a7002:	b289      	uxth	r1, r1
   a7004:	f1b8 0f02 	cmp.w	r8, #2
   a7008:	81a1      	strh	r1, [r4, #12]
   a700a:	d02a      	beq.n	a7062 <setvbuf+0x9a>
   a700c:	2d00      	cmp	r5, #0
   a700e:	d036      	beq.n	a707e <setvbuf+0xb6>
   a7010:	f1b8 0f01 	cmp.w	r8, #1
   a7014:	d011      	beq.n	a703a <setvbuf+0x72>
   a7016:	b289      	uxth	r1, r1
   a7018:	f001 0008 	and.w	r0, r1, #8
   a701c:	4b27      	ldr	r3, [pc, #156]	; (a70bc <setvbuf+0xf4>)
   a701e:	b280      	uxth	r0, r0
   a7020:	63f3      	str	r3, [r6, #60]	; 0x3c
   a7022:	6025      	str	r5, [r4, #0]
   a7024:	6125      	str	r5, [r4, #16]
   a7026:	6167      	str	r7, [r4, #20]
   a7028:	b178      	cbz	r0, a704a <setvbuf+0x82>
   a702a:	f011 0f03 	tst.w	r1, #3
   a702e:	bf18      	it	ne
   a7030:	2700      	movne	r7, #0
   a7032:	2000      	movs	r0, #0
   a7034:	60a7      	str	r7, [r4, #8]
   a7036:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   a703a:	f041 0101 	orr.w	r1, r1, #1
   a703e:	427b      	negs	r3, r7
   a7040:	81a1      	strh	r1, [r4, #12]
   a7042:	61a3      	str	r3, [r4, #24]
   a7044:	e7e7      	b.n	a7016 <setvbuf+0x4e>
   a7046:	f04f 30ff 	mov.w	r0, #4294967295
   a704a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   a704e:	6921      	ldr	r1, [r4, #16]
   a7050:	4630      	mov	r0, r6
   a7052:	f000 fa7b 	bl	a754c <_free_r>
   a7056:	89a1      	ldrh	r1, [r4, #12]
   a7058:	e7d1      	b.n	a6ffe <setvbuf+0x36>
   a705a:	4630      	mov	r0, r6
   a705c:	f000 fa08 	bl	a7470 <__sinit>
   a7060:	e7be      	b.n	a6fe0 <setvbuf+0x18>
   a7062:	2000      	movs	r0, #0
   a7064:	f104 0343 	add.w	r3, r4, #67	; 0x43
   a7068:	f041 0102 	orr.w	r1, r1, #2
   a706c:	2500      	movs	r5, #0
   a706e:	2201      	movs	r2, #1
   a7070:	81a1      	strh	r1, [r4, #12]
   a7072:	60a5      	str	r5, [r4, #8]
   a7074:	6023      	str	r3, [r4, #0]
   a7076:	6123      	str	r3, [r4, #16]
   a7078:	6162      	str	r2, [r4, #20]
   a707a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   a707e:	2f00      	cmp	r7, #0
   a7080:	bf08      	it	eq
   a7082:	f44f 6780 	moveq.w	r7, #1024	; 0x400
   a7086:	4638      	mov	r0, r7
   a7088:	f000 fd60 	bl	a7b4c <malloc>
   a708c:	4605      	mov	r5, r0
   a708e:	b128      	cbz	r0, a709c <setvbuf+0xd4>
   a7090:	89a1      	ldrh	r1, [r4, #12]
   a7092:	f041 0180 	orr.w	r1, r1, #128	; 0x80
   a7096:	b289      	uxth	r1, r1
   a7098:	81a1      	strh	r1, [r4, #12]
   a709a:	e7b9      	b.n	a7010 <setvbuf+0x48>
   a709c:	f44f 6080 	mov.w	r0, #1024	; 0x400
   a70a0:	f000 fd54 	bl	a7b4c <malloc>
   a70a4:	4605      	mov	r5, r0
   a70a6:	b918      	cbnz	r0, a70b0 <setvbuf+0xe8>
   a70a8:	89a1      	ldrh	r1, [r4, #12]
   a70aa:	f04f 30ff 	mov.w	r0, #4294967295
   a70ae:	e7d9      	b.n	a7064 <setvbuf+0x9c>
   a70b0:	f44f 6780 	mov.w	r7, #1024	; 0x400
   a70b4:	e7ec      	b.n	a7090 <setvbuf+0xc8>
   a70b6:	bf00      	nop
   a70b8:	200711f0 	.word	0x200711f0
   a70bc:	000a7375 	.word	0x000a7375

000a70c0 <strlen>:
   a70c0:	f020 0103 	bic.w	r1, r0, #3
   a70c4:	f010 0003 	ands.w	r0, r0, #3
   a70c8:	f1c0 0000 	rsb	r0, r0, #0
   a70cc:	f851 3b04 	ldr.w	r3, [r1], #4
   a70d0:	f100 0c04 	add.w	ip, r0, #4
   a70d4:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   a70d8:	f06f 0200 	mvn.w	r2, #0
   a70dc:	bf1c      	itt	ne
   a70de:	fa22 f20c 	lsrne.w	r2, r2, ip
   a70e2:	4313      	orrne	r3, r2
   a70e4:	f04f 0c01 	mov.w	ip, #1
   a70e8:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   a70ec:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   a70f0:	eba3 020c 	sub.w	r2, r3, ip
   a70f4:	ea22 0203 	bic.w	r2, r2, r3
   a70f8:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   a70fc:	bf04      	itt	eq
   a70fe:	f851 3b04 	ldreq.w	r3, [r1], #4
   a7102:	3004      	addeq	r0, #4
   a7104:	d0f4      	beq.n	a70f0 <strlen+0x30>
   a7106:	f1c2 0100 	rsb	r1, r2, #0
   a710a:	ea02 0201 	and.w	r2, r2, r1
   a710e:	fab2 f282 	clz	r2, r2
   a7112:	f1c2 021f 	rsb	r2, r2, #31
   a7116:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   a711a:	4770      	bx	lr

000a711c <__swsetup_r>:
   a711c:	b538      	push	{r3, r4, r5, lr}
   a711e:	4b2f      	ldr	r3, [pc, #188]	; (a71dc <__swsetup_r+0xc0>)
   a7120:	4605      	mov	r5, r0
   a7122:	6818      	ldr	r0, [r3, #0]
   a7124:	460c      	mov	r4, r1
   a7126:	b110      	cbz	r0, a712e <__swsetup_r+0x12>
   a7128:	6b83      	ldr	r3, [r0, #56]	; 0x38
   a712a:	2b00      	cmp	r3, #0
   a712c:	d036      	beq.n	a719c <__swsetup_r+0x80>
   a712e:	89a2      	ldrh	r2, [r4, #12]
   a7130:	b293      	uxth	r3, r2
   a7132:	0718      	lsls	r0, r3, #28
   a7134:	d50c      	bpl.n	a7150 <__swsetup_r+0x34>
   a7136:	6920      	ldr	r0, [r4, #16]
   a7138:	b1a8      	cbz	r0, a7166 <__swsetup_r+0x4a>
   a713a:	f013 0201 	ands.w	r2, r3, #1
   a713e:	d01e      	beq.n	a717e <__swsetup_r+0x62>
   a7140:	6963      	ldr	r3, [r4, #20]
   a7142:	2200      	movs	r2, #0
   a7144:	425b      	negs	r3, r3
   a7146:	61a3      	str	r3, [r4, #24]
   a7148:	60a2      	str	r2, [r4, #8]
   a714a:	b1f0      	cbz	r0, a718a <__swsetup_r+0x6e>
   a714c:	2000      	movs	r0, #0
   a714e:	bd38      	pop	{r3, r4, r5, pc}
   a7150:	06d9      	lsls	r1, r3, #27
   a7152:	d53a      	bpl.n	a71ca <__swsetup_r+0xae>
   a7154:	0758      	lsls	r0, r3, #29
   a7156:	d424      	bmi.n	a71a2 <__swsetup_r+0x86>
   a7158:	6920      	ldr	r0, [r4, #16]
   a715a:	f042 0308 	orr.w	r3, r2, #8
   a715e:	81a3      	strh	r3, [r4, #12]
   a7160:	b29b      	uxth	r3, r3
   a7162:	2800      	cmp	r0, #0
   a7164:	d1e9      	bne.n	a713a <__swsetup_r+0x1e>
   a7166:	f403 7220 	and.w	r2, r3, #640	; 0x280
   a716a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   a716e:	d0e4      	beq.n	a713a <__swsetup_r+0x1e>
   a7170:	4628      	mov	r0, r5
   a7172:	4621      	mov	r1, r4
   a7174:	f000 fc7a 	bl	a7a6c <__smakebuf_r>
   a7178:	89a3      	ldrh	r3, [r4, #12]
   a717a:	6920      	ldr	r0, [r4, #16]
   a717c:	e7dd      	b.n	a713a <__swsetup_r+0x1e>
   a717e:	0799      	lsls	r1, r3, #30
   a7180:	bf58      	it	pl
   a7182:	6962      	ldrpl	r2, [r4, #20]
   a7184:	60a2      	str	r2, [r4, #8]
   a7186:	2800      	cmp	r0, #0
   a7188:	d1e0      	bne.n	a714c <__swsetup_r+0x30>
   a718a:	89a3      	ldrh	r3, [r4, #12]
   a718c:	061a      	lsls	r2, r3, #24
   a718e:	d5de      	bpl.n	a714e <__swsetup_r+0x32>
   a7190:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   a7194:	81a3      	strh	r3, [r4, #12]
   a7196:	f04f 30ff 	mov.w	r0, #4294967295
   a719a:	bd38      	pop	{r3, r4, r5, pc}
   a719c:	f000 f968 	bl	a7470 <__sinit>
   a71a0:	e7c5      	b.n	a712e <__swsetup_r+0x12>
   a71a2:	6b21      	ldr	r1, [r4, #48]	; 0x30
   a71a4:	b149      	cbz	r1, a71ba <__swsetup_r+0x9e>
   a71a6:	f104 0340 	add.w	r3, r4, #64	; 0x40
   a71aa:	4299      	cmp	r1, r3
   a71ac:	d003      	beq.n	a71b6 <__swsetup_r+0x9a>
   a71ae:	4628      	mov	r0, r5
   a71b0:	f000 f9cc 	bl	a754c <_free_r>
   a71b4:	89a2      	ldrh	r2, [r4, #12]
   a71b6:	2300      	movs	r3, #0
   a71b8:	6323      	str	r3, [r4, #48]	; 0x30
   a71ba:	6920      	ldr	r0, [r4, #16]
   a71bc:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   a71c0:	2300      	movs	r3, #0
   a71c2:	b292      	uxth	r2, r2
   a71c4:	e884 0009 	stmia.w	r4, {r0, r3}
   a71c8:	e7c7      	b.n	a715a <__swsetup_r+0x3e>
   a71ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   a71ce:	2309      	movs	r3, #9
   a71d0:	602b      	str	r3, [r5, #0]
   a71d2:	f04f 30ff 	mov.w	r0, #4294967295
   a71d6:	81a2      	strh	r2, [r4, #12]
   a71d8:	bd38      	pop	{r3, r4, r5, pc}
   a71da:	bf00      	nop
   a71dc:	200711f0 	.word	0x200711f0

000a71e0 <register_fini>:
   a71e0:	4b02      	ldr	r3, [pc, #8]	; (a71ec <register_fini+0xc>)
   a71e2:	b113      	cbz	r3, a71ea <register_fini+0xa>
   a71e4:	4802      	ldr	r0, [pc, #8]	; (a71f0 <register_fini+0x10>)
   a71e6:	f000 b805 	b.w	a71f4 <atexit>
   a71ea:	4770      	bx	lr
   a71ec:	00000000 	.word	0x00000000
   a71f0:	000a7485 	.word	0x000a7485

000a71f4 <atexit>:
   a71f4:	4601      	mov	r1, r0
   a71f6:	2000      	movs	r0, #0
   a71f8:	4602      	mov	r2, r0
   a71fa:	4603      	mov	r3, r0
   a71fc:	f001 ba3e 	b.w	a867c <__register_exitproc>

000a7200 <__sflush_r>:
   a7200:	898b      	ldrh	r3, [r1, #12]
   a7202:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   a7206:	b29a      	uxth	r2, r3
   a7208:	460d      	mov	r5, r1
   a720a:	0711      	lsls	r1, r2, #28
   a720c:	4680      	mov	r8, r0
   a720e:	d43c      	bmi.n	a728a <__sflush_r+0x8a>
   a7210:	686a      	ldr	r2, [r5, #4]
   a7212:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   a7216:	2a00      	cmp	r2, #0
   a7218:	81ab      	strh	r3, [r5, #12]
   a721a:	dd65      	ble.n	a72e8 <__sflush_r+0xe8>
   a721c:	6aae      	ldr	r6, [r5, #40]	; 0x28
   a721e:	2e00      	cmp	r6, #0
   a7220:	d04b      	beq.n	a72ba <__sflush_r+0xba>
   a7222:	b29b      	uxth	r3, r3
   a7224:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   a7228:	2100      	movs	r1, #0
   a722a:	b292      	uxth	r2, r2
   a722c:	f8d8 4000 	ldr.w	r4, [r8]
   a7230:	f8c8 1000 	str.w	r1, [r8]
   a7234:	2a00      	cmp	r2, #0
   a7236:	d05b      	beq.n	a72f0 <__sflush_r+0xf0>
   a7238:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   a723a:	075f      	lsls	r7, r3, #29
   a723c:	d505      	bpl.n	a724a <__sflush_r+0x4a>
   a723e:	6869      	ldr	r1, [r5, #4]
   a7240:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   a7242:	1a52      	subs	r2, r2, r1
   a7244:	b10b      	cbz	r3, a724a <__sflush_r+0x4a>
   a7246:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   a7248:	1ad2      	subs	r2, r2, r3
   a724a:	4640      	mov	r0, r8
   a724c:	69e9      	ldr	r1, [r5, #28]
   a724e:	2300      	movs	r3, #0
   a7250:	47b0      	blx	r6
   a7252:	1c46      	adds	r6, r0, #1
   a7254:	d056      	beq.n	a7304 <__sflush_r+0x104>
   a7256:	89ab      	ldrh	r3, [r5, #12]
   a7258:	692a      	ldr	r2, [r5, #16]
   a725a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   a725e:	b29b      	uxth	r3, r3
   a7260:	2100      	movs	r1, #0
   a7262:	602a      	str	r2, [r5, #0]
   a7264:	04da      	lsls	r2, r3, #19
   a7266:	81ab      	strh	r3, [r5, #12]
   a7268:	6069      	str	r1, [r5, #4]
   a726a:	d43b      	bmi.n	a72e4 <__sflush_r+0xe4>
   a726c:	6b29      	ldr	r1, [r5, #48]	; 0x30
   a726e:	f8c8 4000 	str.w	r4, [r8]
   a7272:	b311      	cbz	r1, a72ba <__sflush_r+0xba>
   a7274:	f105 0340 	add.w	r3, r5, #64	; 0x40
   a7278:	4299      	cmp	r1, r3
   a727a:	d002      	beq.n	a7282 <__sflush_r+0x82>
   a727c:	4640      	mov	r0, r8
   a727e:	f000 f965 	bl	a754c <_free_r>
   a7282:	2000      	movs	r0, #0
   a7284:	6328      	str	r0, [r5, #48]	; 0x30
   a7286:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   a728a:	692e      	ldr	r6, [r5, #16]
   a728c:	b1ae      	cbz	r6, a72ba <__sflush_r+0xba>
   a728e:	0791      	lsls	r1, r2, #30
   a7290:	682c      	ldr	r4, [r5, #0]
   a7292:	bf0c      	ite	eq
   a7294:	696b      	ldreq	r3, [r5, #20]
   a7296:	2300      	movne	r3, #0
   a7298:	602e      	str	r6, [r5, #0]
   a729a:	1ba4      	subs	r4, r4, r6
   a729c:	60ab      	str	r3, [r5, #8]
   a729e:	e00a      	b.n	a72b6 <__sflush_r+0xb6>
   a72a0:	4632      	mov	r2, r6
   a72a2:	4623      	mov	r3, r4
   a72a4:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   a72a6:	4640      	mov	r0, r8
   a72a8:	69e9      	ldr	r1, [r5, #28]
   a72aa:	47b8      	blx	r7
   a72ac:	2800      	cmp	r0, #0
   a72ae:	eba4 0400 	sub.w	r4, r4, r0
   a72b2:	4406      	add	r6, r0
   a72b4:	dd04      	ble.n	a72c0 <__sflush_r+0xc0>
   a72b6:	2c00      	cmp	r4, #0
   a72b8:	dcf2      	bgt.n	a72a0 <__sflush_r+0xa0>
   a72ba:	2000      	movs	r0, #0
   a72bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   a72c0:	89ab      	ldrh	r3, [r5, #12]
   a72c2:	f04f 30ff 	mov.w	r0, #4294967295
   a72c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   a72ca:	81ab      	strh	r3, [r5, #12]
   a72cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   a72d0:	89ab      	ldrh	r3, [r5, #12]
   a72d2:	692a      	ldr	r2, [r5, #16]
   a72d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   a72d8:	b29b      	uxth	r3, r3
   a72da:	81ab      	strh	r3, [r5, #12]
   a72dc:	04db      	lsls	r3, r3, #19
   a72de:	6069      	str	r1, [r5, #4]
   a72e0:	602a      	str	r2, [r5, #0]
   a72e2:	d5c3      	bpl.n	a726c <__sflush_r+0x6c>
   a72e4:	6528      	str	r0, [r5, #80]	; 0x50
   a72e6:	e7c1      	b.n	a726c <__sflush_r+0x6c>
   a72e8:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   a72ea:	2a00      	cmp	r2, #0
   a72ec:	dc96      	bgt.n	a721c <__sflush_r+0x1c>
   a72ee:	e7e4      	b.n	a72ba <__sflush_r+0xba>
   a72f0:	2301      	movs	r3, #1
   a72f2:	4640      	mov	r0, r8
   a72f4:	69e9      	ldr	r1, [r5, #28]
   a72f6:	47b0      	blx	r6
   a72f8:	1c43      	adds	r3, r0, #1
   a72fa:	4602      	mov	r2, r0
   a72fc:	d019      	beq.n	a7332 <__sflush_r+0x132>
   a72fe:	89ab      	ldrh	r3, [r5, #12]
   a7300:	6aae      	ldr	r6, [r5, #40]	; 0x28
   a7302:	e79a      	b.n	a723a <__sflush_r+0x3a>
   a7304:	f8d8 1000 	ldr.w	r1, [r8]
   a7308:	2900      	cmp	r1, #0
   a730a:	d0e1      	beq.n	a72d0 <__sflush_r+0xd0>
   a730c:	291d      	cmp	r1, #29
   a730e:	d007      	beq.n	a7320 <__sflush_r+0x120>
   a7310:	2916      	cmp	r1, #22
   a7312:	d005      	beq.n	a7320 <__sflush_r+0x120>
   a7314:	89ab      	ldrh	r3, [r5, #12]
   a7316:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   a731a:	81ab      	strh	r3, [r5, #12]
   a731c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   a7320:	89ab      	ldrh	r3, [r5, #12]
   a7322:	6929      	ldr	r1, [r5, #16]
   a7324:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   a7328:	2200      	movs	r2, #0
   a732a:	81ab      	strh	r3, [r5, #12]
   a732c:	e885 0006 	stmia.w	r5, {r1, r2}
   a7330:	e79c      	b.n	a726c <__sflush_r+0x6c>
   a7332:	f8d8 3000 	ldr.w	r3, [r8]
   a7336:	2b00      	cmp	r3, #0
   a7338:	d0e1      	beq.n	a72fe <__sflush_r+0xfe>
   a733a:	2b1d      	cmp	r3, #29
   a733c:	d001      	beq.n	a7342 <__sflush_r+0x142>
   a733e:	2b16      	cmp	r3, #22
   a7340:	d1be      	bne.n	a72c0 <__sflush_r+0xc0>
   a7342:	f8c8 4000 	str.w	r4, [r8]
   a7346:	e7b8      	b.n	a72ba <__sflush_r+0xba>

000a7348 <_fflush_r>:
   a7348:	b510      	push	{r4, lr}
   a734a:	4604      	mov	r4, r0
   a734c:	b082      	sub	sp, #8
   a734e:	b108      	cbz	r0, a7354 <_fflush_r+0xc>
   a7350:	6b83      	ldr	r3, [r0, #56]	; 0x38
   a7352:	b153      	cbz	r3, a736a <_fflush_r+0x22>
   a7354:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   a7358:	b908      	cbnz	r0, a735e <_fflush_r+0x16>
   a735a:	b002      	add	sp, #8
   a735c:	bd10      	pop	{r4, pc}
   a735e:	4620      	mov	r0, r4
   a7360:	b002      	add	sp, #8
   a7362:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   a7366:	f7ff bf4b 	b.w	a7200 <__sflush_r>
   a736a:	9101      	str	r1, [sp, #4]
   a736c:	f000 f880 	bl	a7470 <__sinit>
   a7370:	9901      	ldr	r1, [sp, #4]
   a7372:	e7ef      	b.n	a7354 <_fflush_r+0xc>

000a7374 <_cleanup_r>:
   a7374:	4901      	ldr	r1, [pc, #4]	; (a737c <_cleanup_r+0x8>)
   a7376:	f000 bb51 	b.w	a7a1c <_fwalk_reent>
   a737a:	bf00      	nop
   a737c:	000a8745 	.word	0x000a8745

000a7380 <__sinit.part.1>:
   a7380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   a7384:	4607      	mov	r7, r0
   a7386:	4835      	ldr	r0, [pc, #212]	; (a745c <__sinit.part.1+0xdc>)
   a7388:	687d      	ldr	r5, [r7, #4]
   a738a:	2400      	movs	r4, #0
   a738c:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   a7390:	2304      	movs	r3, #4
   a7392:	2103      	movs	r1, #3
   a7394:	63f8      	str	r0, [r7, #60]	; 0x3c
   a7396:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   a739a:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   a739e:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   a73a2:	b083      	sub	sp, #12
   a73a4:	602c      	str	r4, [r5, #0]
   a73a6:	606c      	str	r4, [r5, #4]
   a73a8:	60ac      	str	r4, [r5, #8]
   a73aa:	666c      	str	r4, [r5, #100]	; 0x64
   a73ac:	81ec      	strh	r4, [r5, #14]
   a73ae:	612c      	str	r4, [r5, #16]
   a73b0:	616c      	str	r4, [r5, #20]
   a73b2:	61ac      	str	r4, [r5, #24]
   a73b4:	81ab      	strh	r3, [r5, #12]
   a73b6:	4621      	mov	r1, r4
   a73b8:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   a73bc:	2208      	movs	r2, #8
   a73be:	f7ff fd75 	bl	a6eac <memset>
   a73c2:	f8df b09c 	ldr.w	fp, [pc, #156]	; a7460 <__sinit.part.1+0xe0>
   a73c6:	68be      	ldr	r6, [r7, #8]
   a73c8:	f8df a098 	ldr.w	sl, [pc, #152]	; a7464 <__sinit.part.1+0xe4>
   a73cc:	f8df 9098 	ldr.w	r9, [pc, #152]	; a7468 <__sinit.part.1+0xe8>
   a73d0:	f8df 8098 	ldr.w	r8, [pc, #152]	; a746c <__sinit.part.1+0xec>
   a73d4:	2301      	movs	r3, #1
   a73d6:	2209      	movs	r2, #9
   a73d8:	f8c5 b020 	str.w	fp, [r5, #32]
   a73dc:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   a73e0:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   a73e4:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   a73e8:	61ed      	str	r5, [r5, #28]
   a73ea:	4621      	mov	r1, r4
   a73ec:	81f3      	strh	r3, [r6, #14]
   a73ee:	81b2      	strh	r2, [r6, #12]
   a73f0:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   a73f4:	6034      	str	r4, [r6, #0]
   a73f6:	6074      	str	r4, [r6, #4]
   a73f8:	60b4      	str	r4, [r6, #8]
   a73fa:	6674      	str	r4, [r6, #100]	; 0x64
   a73fc:	6134      	str	r4, [r6, #16]
   a73fe:	6174      	str	r4, [r6, #20]
   a7400:	61b4      	str	r4, [r6, #24]
   a7402:	2208      	movs	r2, #8
   a7404:	9301      	str	r3, [sp, #4]
   a7406:	f7ff fd51 	bl	a6eac <memset>
   a740a:	68fd      	ldr	r5, [r7, #12]
   a740c:	2012      	movs	r0, #18
   a740e:	2202      	movs	r2, #2
   a7410:	61f6      	str	r6, [r6, #28]
   a7412:	f8c6 b020 	str.w	fp, [r6, #32]
   a7416:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   a741a:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   a741e:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   a7422:	4621      	mov	r1, r4
   a7424:	81a8      	strh	r0, [r5, #12]
   a7426:	81ea      	strh	r2, [r5, #14]
   a7428:	602c      	str	r4, [r5, #0]
   a742a:	606c      	str	r4, [r5, #4]
   a742c:	60ac      	str	r4, [r5, #8]
   a742e:	666c      	str	r4, [r5, #100]	; 0x64
   a7430:	612c      	str	r4, [r5, #16]
   a7432:	616c      	str	r4, [r5, #20]
   a7434:	61ac      	str	r4, [r5, #24]
   a7436:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   a743a:	2208      	movs	r2, #8
   a743c:	f7ff fd36 	bl	a6eac <memset>
   a7440:	9b01      	ldr	r3, [sp, #4]
   a7442:	61ed      	str	r5, [r5, #28]
   a7444:	f8c5 b020 	str.w	fp, [r5, #32]
   a7448:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   a744c:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   a7450:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   a7454:	63bb      	str	r3, [r7, #56]	; 0x38
   a7456:	b003      	add	sp, #12
   a7458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   a745c:	000a7375 	.word	0x000a7375
   a7460:	000a85d1 	.word	0x000a85d1
   a7464:	000a85f5 	.word	0x000a85f5
   a7468:	000a862d 	.word	0x000a862d
   a746c:	000a864d 	.word	0x000a864d

000a7470 <__sinit>:
   a7470:	6b83      	ldr	r3, [r0, #56]	; 0x38
   a7472:	b103      	cbz	r3, a7476 <__sinit+0x6>
   a7474:	4770      	bx	lr
   a7476:	f7ff bf83 	b.w	a7380 <__sinit.part.1>
   a747a:	bf00      	nop

000a747c <__sfp_lock_acquire>:
   a747c:	4770      	bx	lr
   a747e:	bf00      	nop

000a7480 <__sfp_lock_release>:
   a7480:	4770      	bx	lr
   a7482:	bf00      	nop

000a7484 <__libc_fini_array>:
   a7484:	b538      	push	{r3, r4, r5, lr}
   a7486:	4b08      	ldr	r3, [pc, #32]	; (a74a8 <__libc_fini_array+0x24>)
   a7488:	4d08      	ldr	r5, [pc, #32]	; (a74ac <__libc_fini_array+0x28>)
   a748a:	1aed      	subs	r5, r5, r3
   a748c:	10ac      	asrs	r4, r5, #2
   a748e:	bf18      	it	ne
   a7490:	18ed      	addne	r5, r5, r3
   a7492:	d005      	beq.n	a74a0 <__libc_fini_array+0x1c>
   a7494:	3c01      	subs	r4, #1
   a7496:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   a749a:	4798      	blx	r3
   a749c:	2c00      	cmp	r4, #0
   a749e:	d1f9      	bne.n	a7494 <__libc_fini_array+0x10>
   a74a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   a74a4:	f001 bc92 	b.w	a8dcc <_fini>
   a74a8:	000a8dd8 	.word	0x000a8dd8
   a74ac:	000a8ddc 	.word	0x000a8ddc

000a74b0 <_malloc_trim_r>:
   a74b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   a74b2:	460c      	mov	r4, r1
   a74b4:	4f22      	ldr	r7, [pc, #136]	; (a7540 <_malloc_trim_r+0x90>)
   a74b6:	4606      	mov	r6, r0
   a74b8:	f000 fe84 	bl	a81c4 <__malloc_lock>
   a74bc:	68bb      	ldr	r3, [r7, #8]
   a74be:	685d      	ldr	r5, [r3, #4]
   a74c0:	f025 0503 	bic.w	r5, r5, #3
   a74c4:	1b29      	subs	r1, r5, r4
   a74c6:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   a74ca:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   a74ce:	f021 010f 	bic.w	r1, r1, #15
   a74d2:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   a74d6:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   a74da:	db07      	blt.n	a74ec <_malloc_trim_r+0x3c>
   a74dc:	4630      	mov	r0, r6
   a74de:	2100      	movs	r1, #0
   a74e0:	f001 f864 	bl	a85ac <_sbrk_r>
   a74e4:	68bb      	ldr	r3, [r7, #8]
   a74e6:	442b      	add	r3, r5
   a74e8:	4298      	cmp	r0, r3
   a74ea:	d004      	beq.n	a74f6 <_malloc_trim_r+0x46>
   a74ec:	4630      	mov	r0, r6
   a74ee:	f000 fe6b 	bl	a81c8 <__malloc_unlock>
   a74f2:	2000      	movs	r0, #0
   a74f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   a74f6:	4630      	mov	r0, r6
   a74f8:	4261      	negs	r1, r4
   a74fa:	f001 f857 	bl	a85ac <_sbrk_r>
   a74fe:	3001      	adds	r0, #1
   a7500:	d00d      	beq.n	a751e <_malloc_trim_r+0x6e>
   a7502:	4b10      	ldr	r3, [pc, #64]	; (a7544 <_malloc_trim_r+0x94>)
   a7504:	68ba      	ldr	r2, [r7, #8]
   a7506:	6819      	ldr	r1, [r3, #0]
   a7508:	1b2d      	subs	r5, r5, r4
   a750a:	f045 0501 	orr.w	r5, r5, #1
   a750e:	4630      	mov	r0, r6
   a7510:	1b09      	subs	r1, r1, r4
   a7512:	6055      	str	r5, [r2, #4]
   a7514:	6019      	str	r1, [r3, #0]
   a7516:	f000 fe57 	bl	a81c8 <__malloc_unlock>
   a751a:	2001      	movs	r0, #1
   a751c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   a751e:	4630      	mov	r0, r6
   a7520:	2100      	movs	r1, #0
   a7522:	f001 f843 	bl	a85ac <_sbrk_r>
   a7526:	68ba      	ldr	r2, [r7, #8]
   a7528:	1a83      	subs	r3, r0, r2
   a752a:	2b0f      	cmp	r3, #15
   a752c:	ddde      	ble.n	a74ec <_malloc_trim_r+0x3c>
   a752e:	4c06      	ldr	r4, [pc, #24]	; (a7548 <_malloc_trim_r+0x98>)
   a7530:	4904      	ldr	r1, [pc, #16]	; (a7544 <_malloc_trim_r+0x94>)
   a7532:	6824      	ldr	r4, [r4, #0]
   a7534:	f043 0301 	orr.w	r3, r3, #1
   a7538:	1b00      	subs	r0, r0, r4
   a753a:	6053      	str	r3, [r2, #4]
   a753c:	6008      	str	r0, [r1, #0]
   a753e:	e7d5      	b.n	a74ec <_malloc_trim_r+0x3c>
   a7540:	200711f4 	.word	0x200711f4
   a7544:	20071ce4 	.word	0x20071ce4
   a7548:	20071600 	.word	0x20071600

000a754c <_free_r>:
   a754c:	2900      	cmp	r1, #0
   a754e:	d04e      	beq.n	a75ee <_free_r+0xa2>
   a7550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   a7554:	460c      	mov	r4, r1
   a7556:	4680      	mov	r8, r0
   a7558:	f000 fe34 	bl	a81c4 <__malloc_lock>
   a755c:	f854 7c04 	ldr.w	r7, [r4, #-4]
   a7560:	4962      	ldr	r1, [pc, #392]	; (a76ec <_free_r+0x1a0>)
   a7562:	f1a4 0508 	sub.w	r5, r4, #8
   a7566:	f027 0201 	bic.w	r2, r7, #1
   a756a:	18ab      	adds	r3, r5, r2
   a756c:	688e      	ldr	r6, [r1, #8]
   a756e:	6858      	ldr	r0, [r3, #4]
   a7570:	429e      	cmp	r6, r3
   a7572:	f020 0003 	bic.w	r0, r0, #3
   a7576:	d05a      	beq.n	a762e <_free_r+0xe2>
   a7578:	07fe      	lsls	r6, r7, #31
   a757a:	6058      	str	r0, [r3, #4]
   a757c:	d40b      	bmi.n	a7596 <_free_r+0x4a>
   a757e:	f854 7c08 	ldr.w	r7, [r4, #-8]
   a7582:	f101 0e08 	add.w	lr, r1, #8
   a7586:	1bed      	subs	r5, r5, r7
   a7588:	68ac      	ldr	r4, [r5, #8]
   a758a:	443a      	add	r2, r7
   a758c:	4574      	cmp	r4, lr
   a758e:	d067      	beq.n	a7660 <_free_r+0x114>
   a7590:	68ef      	ldr	r7, [r5, #12]
   a7592:	60e7      	str	r7, [r4, #12]
   a7594:	60bc      	str	r4, [r7, #8]
   a7596:	181c      	adds	r4, r3, r0
   a7598:	6864      	ldr	r4, [r4, #4]
   a759a:	07e4      	lsls	r4, r4, #31
   a759c:	d40c      	bmi.n	a75b8 <_free_r+0x6c>
   a759e:	4f54      	ldr	r7, [pc, #336]	; (a76f0 <_free_r+0x1a4>)
   a75a0:	689c      	ldr	r4, [r3, #8]
   a75a2:	4402      	add	r2, r0
   a75a4:	42bc      	cmp	r4, r7
   a75a6:	d07c      	beq.n	a76a2 <_free_r+0x156>
   a75a8:	68d8      	ldr	r0, [r3, #12]
   a75aa:	f042 0301 	orr.w	r3, r2, #1
   a75ae:	60e0      	str	r0, [r4, #12]
   a75b0:	6084      	str	r4, [r0, #8]
   a75b2:	606b      	str	r3, [r5, #4]
   a75b4:	50aa      	str	r2, [r5, r2]
   a75b6:	e003      	b.n	a75c0 <_free_r+0x74>
   a75b8:	f042 0301 	orr.w	r3, r2, #1
   a75bc:	606b      	str	r3, [r5, #4]
   a75be:	50aa      	str	r2, [r5, r2]
   a75c0:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   a75c4:	d214      	bcs.n	a75f0 <_free_r+0xa4>
   a75c6:	08d2      	lsrs	r2, r2, #3
   a75c8:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
   a75cc:	2401      	movs	r4, #1
   a75ce:	6848      	ldr	r0, [r1, #4]
   a75d0:	1092      	asrs	r2, r2, #2
   a75d2:	fa04 f202 	lsl.w	r2, r4, r2
   a75d6:	689c      	ldr	r4, [r3, #8]
   a75d8:	4310      	orrs	r0, r2
   a75da:	60ac      	str	r4, [r5, #8]
   a75dc:	60eb      	str	r3, [r5, #12]
   a75de:	6048      	str	r0, [r1, #4]
   a75e0:	609d      	str	r5, [r3, #8]
   a75e2:	60e5      	str	r5, [r4, #12]
   a75e4:	4640      	mov	r0, r8
   a75e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   a75ea:	f000 bded 	b.w	a81c8 <__malloc_unlock>
   a75ee:	4770      	bx	lr
   a75f0:	0a53      	lsrs	r3, r2, #9
   a75f2:	2b04      	cmp	r3, #4
   a75f4:	d847      	bhi.n	a7686 <_free_r+0x13a>
   a75f6:	0993      	lsrs	r3, r2, #6
   a75f8:	f103 0438 	add.w	r4, r3, #56	; 0x38
   a75fc:	0060      	lsls	r0, r4, #1
   a75fe:	eb01 0080 	add.w	r0, r1, r0, lsl #2
   a7602:	6883      	ldr	r3, [r0, #8]
   a7604:	4939      	ldr	r1, [pc, #228]	; (a76ec <_free_r+0x1a0>)
   a7606:	4283      	cmp	r3, r0
   a7608:	d043      	beq.n	a7692 <_free_r+0x146>
   a760a:	6859      	ldr	r1, [r3, #4]
   a760c:	f021 0103 	bic.w	r1, r1, #3
   a7610:	4291      	cmp	r1, r2
   a7612:	d902      	bls.n	a761a <_free_r+0xce>
   a7614:	689b      	ldr	r3, [r3, #8]
   a7616:	4298      	cmp	r0, r3
   a7618:	d1f7      	bne.n	a760a <_free_r+0xbe>
   a761a:	68da      	ldr	r2, [r3, #12]
   a761c:	60ea      	str	r2, [r5, #12]
   a761e:	60ab      	str	r3, [r5, #8]
   a7620:	4640      	mov	r0, r8
   a7622:	6095      	str	r5, [r2, #8]
   a7624:	60dd      	str	r5, [r3, #12]
   a7626:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   a762a:	f000 bdcd 	b.w	a81c8 <__malloc_unlock>
   a762e:	07ff      	lsls	r7, r7, #31
   a7630:	4402      	add	r2, r0
   a7632:	d407      	bmi.n	a7644 <_free_r+0xf8>
   a7634:	f854 4c08 	ldr.w	r4, [r4, #-8]
   a7638:	1b2d      	subs	r5, r5, r4
   a763a:	68eb      	ldr	r3, [r5, #12]
   a763c:	68a8      	ldr	r0, [r5, #8]
   a763e:	4422      	add	r2, r4
   a7640:	60c3      	str	r3, [r0, #12]
   a7642:	6098      	str	r0, [r3, #8]
   a7644:	4b2b      	ldr	r3, [pc, #172]	; (a76f4 <_free_r+0x1a8>)
   a7646:	f042 0001 	orr.w	r0, r2, #1
   a764a:	681b      	ldr	r3, [r3, #0]
   a764c:	6068      	str	r0, [r5, #4]
   a764e:	429a      	cmp	r2, r3
   a7650:	608d      	str	r5, [r1, #8]
   a7652:	d3c7      	bcc.n	a75e4 <_free_r+0x98>
   a7654:	4b28      	ldr	r3, [pc, #160]	; (a76f8 <_free_r+0x1ac>)
   a7656:	4640      	mov	r0, r8
   a7658:	6819      	ldr	r1, [r3, #0]
   a765a:	f7ff ff29 	bl	a74b0 <_malloc_trim_r>
   a765e:	e7c1      	b.n	a75e4 <_free_r+0x98>
   a7660:	1819      	adds	r1, r3, r0
   a7662:	6849      	ldr	r1, [r1, #4]
   a7664:	07c9      	lsls	r1, r1, #31
   a7666:	d409      	bmi.n	a767c <_free_r+0x130>
   a7668:	68d9      	ldr	r1, [r3, #12]
   a766a:	4402      	add	r2, r0
   a766c:	689b      	ldr	r3, [r3, #8]
   a766e:	f042 0001 	orr.w	r0, r2, #1
   a7672:	60d9      	str	r1, [r3, #12]
   a7674:	608b      	str	r3, [r1, #8]
   a7676:	6068      	str	r0, [r5, #4]
   a7678:	50aa      	str	r2, [r5, r2]
   a767a:	e7b3      	b.n	a75e4 <_free_r+0x98>
   a767c:	f042 0301 	orr.w	r3, r2, #1
   a7680:	606b      	str	r3, [r5, #4]
   a7682:	50aa      	str	r2, [r5, r2]
   a7684:	e7ae      	b.n	a75e4 <_free_r+0x98>
   a7686:	2b14      	cmp	r3, #20
   a7688:	d814      	bhi.n	a76b4 <_free_r+0x168>
   a768a:	f103 045b 	add.w	r4, r3, #91	; 0x5b
   a768e:	0060      	lsls	r0, r4, #1
   a7690:	e7b5      	b.n	a75fe <_free_r+0xb2>
   a7692:	684a      	ldr	r2, [r1, #4]
   a7694:	10a4      	asrs	r4, r4, #2
   a7696:	2001      	movs	r0, #1
   a7698:	40a0      	lsls	r0, r4
   a769a:	4302      	orrs	r2, r0
   a769c:	604a      	str	r2, [r1, #4]
   a769e:	461a      	mov	r2, r3
   a76a0:	e7bc      	b.n	a761c <_free_r+0xd0>
   a76a2:	f042 0301 	orr.w	r3, r2, #1
   a76a6:	614d      	str	r5, [r1, #20]
   a76a8:	610d      	str	r5, [r1, #16]
   a76aa:	60ec      	str	r4, [r5, #12]
   a76ac:	60ac      	str	r4, [r5, #8]
   a76ae:	606b      	str	r3, [r5, #4]
   a76b0:	50aa      	str	r2, [r5, r2]
   a76b2:	e797      	b.n	a75e4 <_free_r+0x98>
   a76b4:	2b54      	cmp	r3, #84	; 0x54
   a76b6:	d804      	bhi.n	a76c2 <_free_r+0x176>
   a76b8:	0b13      	lsrs	r3, r2, #12
   a76ba:	f103 046e 	add.w	r4, r3, #110	; 0x6e
   a76be:	0060      	lsls	r0, r4, #1
   a76c0:	e79d      	b.n	a75fe <_free_r+0xb2>
   a76c2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   a76c6:	d804      	bhi.n	a76d2 <_free_r+0x186>
   a76c8:	0bd3      	lsrs	r3, r2, #15
   a76ca:	f103 0477 	add.w	r4, r3, #119	; 0x77
   a76ce:	0060      	lsls	r0, r4, #1
   a76d0:	e795      	b.n	a75fe <_free_r+0xb2>
   a76d2:	f240 5054 	movw	r0, #1364	; 0x554
   a76d6:	4283      	cmp	r3, r0
   a76d8:	d804      	bhi.n	a76e4 <_free_r+0x198>
   a76da:	0c93      	lsrs	r3, r2, #18
   a76dc:	f103 047c 	add.w	r4, r3, #124	; 0x7c
   a76e0:	0060      	lsls	r0, r4, #1
   a76e2:	e78c      	b.n	a75fe <_free_r+0xb2>
   a76e4:	20fc      	movs	r0, #252	; 0xfc
   a76e6:	247e      	movs	r4, #126	; 0x7e
   a76e8:	e789      	b.n	a75fe <_free_r+0xb2>
   a76ea:	bf00      	nop
   a76ec:	200711f4 	.word	0x200711f4
   a76f0:	200711fc 	.word	0x200711fc
   a76f4:	200715fc 	.word	0x200715fc
   a76f8:	20071ce0 	.word	0x20071ce0

000a76fc <__sfvwrite_r>:
   a76fc:	6893      	ldr	r3, [r2, #8]
   a76fe:	2b00      	cmp	r3, #0
   a7700:	f000 80b1 	beq.w	a7866 <__sfvwrite_r+0x16a>
   a7704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   a7708:	f8b1 e00c 	ldrh.w	lr, [r1, #12]
   a770c:	b083      	sub	sp, #12
   a770e:	f01e 0f08 	tst.w	lr, #8
   a7712:	460c      	mov	r4, r1
   a7714:	4681      	mov	r9, r0
   a7716:	4616      	mov	r6, r2
   a7718:	d028      	beq.n	a776c <__sfvwrite_r+0x70>
   a771a:	690b      	ldr	r3, [r1, #16]
   a771c:	b333      	cbz	r3, a776c <__sfvwrite_r+0x70>
   a771e:	f00e 0802 	and.w	r8, lr, #2
   a7722:	fa1f f088 	uxth.w	r0, r8
   a7726:	6835      	ldr	r5, [r6, #0]
   a7728:	b380      	cbz	r0, a778c <__sfvwrite_r+0x90>
   a772a:	f04f 0b00 	mov.w	fp, #0
   a772e:	46d8      	mov	r8, fp
   a7730:	f8df a2e4 	ldr.w	sl, [pc, #740]	; a7a18 <__sfvwrite_r+0x31c>
   a7734:	f1b8 0f00 	cmp.w	r8, #0
   a7738:	f000 808f 	beq.w	a785a <__sfvwrite_r+0x15e>
   a773c:	45d0      	cmp	r8, sl
   a773e:	4643      	mov	r3, r8
   a7740:	4648      	mov	r0, r9
   a7742:	bf28      	it	cs
   a7744:	4653      	movcs	r3, sl
   a7746:	69e1      	ldr	r1, [r4, #28]
   a7748:	465a      	mov	r2, fp
   a774a:	6a67      	ldr	r7, [r4, #36]	; 0x24
   a774c:	47b8      	blx	r7
   a774e:	2800      	cmp	r0, #0
   a7750:	f340 80a8 	ble.w	a78a4 <__sfvwrite_r+0x1a8>
   a7754:	68b3      	ldr	r3, [r6, #8]
   a7756:	4483      	add	fp, r0
   a7758:	1a1b      	subs	r3, r3, r0
   a775a:	ebc0 0808 	rsb	r8, r0, r8
   a775e:	60b3      	str	r3, [r6, #8]
   a7760:	2b00      	cmp	r3, #0
   a7762:	d1e7      	bne.n	a7734 <__sfvwrite_r+0x38>
   a7764:	2000      	movs	r0, #0
   a7766:	b003      	add	sp, #12
   a7768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   a776c:	4648      	mov	r0, r9
   a776e:	4621      	mov	r1, r4
   a7770:	f7ff fcd4 	bl	a711c <__swsetup_r>
   a7774:	2800      	cmp	r0, #0
   a7776:	f040 8146 	bne.w	a7a06 <__sfvwrite_r+0x30a>
   a777a:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
   a777e:	6835      	ldr	r5, [r6, #0]
   a7780:	f00e 0802 	and.w	r8, lr, #2
   a7784:	fa1f f088 	uxth.w	r0, r8
   a7788:	2800      	cmp	r0, #0
   a778a:	d1ce      	bne.n	a772a <__sfvwrite_r+0x2e>
   a778c:	f01e 0b01 	ands.w	fp, lr, #1
   a7790:	f040 8091 	bne.w	a78b6 <__sfvwrite_r+0x1ba>
   a7794:	46d8      	mov	r8, fp
   a7796:	f1b8 0f00 	cmp.w	r8, #0
   a779a:	d058      	beq.n	a784e <__sfvwrite_r+0x152>
   a779c:	f41e 7f00 	tst.w	lr, #512	; 0x200
   a77a0:	68a7      	ldr	r7, [r4, #8]
   a77a2:	d062      	beq.n	a786a <__sfvwrite_r+0x16e>
   a77a4:	45b8      	cmp	r8, r7
   a77a6:	46ba      	mov	sl, r7
   a77a8:	f0c0 80c2 	bcc.w	a7930 <__sfvwrite_r+0x234>
   a77ac:	f41e 6f90 	tst.w	lr, #1152	; 0x480
   a77b0:	f000 80c0 	beq.w	a7934 <__sfvwrite_r+0x238>
   a77b4:	6967      	ldr	r7, [r4, #20]
   a77b6:	6921      	ldr	r1, [r4, #16]
   a77b8:	6823      	ldr	r3, [r4, #0]
   a77ba:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   a77be:	1a5b      	subs	r3, r3, r1
   a77c0:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   a77c4:	1c58      	adds	r0, r3, #1
   a77c6:	107f      	asrs	r7, r7, #1
   a77c8:	4440      	add	r0, r8
   a77ca:	4287      	cmp	r7, r0
   a77cc:	463a      	mov	r2, r7
   a77ce:	bf3c      	itt	cc
   a77d0:	4607      	movcc	r7, r0
   a77d2:	463a      	movcc	r2, r7
   a77d4:	f41e 6f80 	tst.w	lr, #1024	; 0x400
   a77d8:	9300      	str	r3, [sp, #0]
   a77da:	f000 80fb 	beq.w	a79d4 <__sfvwrite_r+0x2d8>
   a77de:	4611      	mov	r1, r2
   a77e0:	4648      	mov	r0, r9
   a77e2:	f000 f9bb 	bl	a7b5c <_malloc_r>
   a77e6:	9b00      	ldr	r3, [sp, #0]
   a77e8:	4682      	mov	sl, r0
   a77ea:	2800      	cmp	r0, #0
   a77ec:	f000 810e 	beq.w	a7a0c <__sfvwrite_r+0x310>
   a77f0:	461a      	mov	r2, r3
   a77f2:	6921      	ldr	r1, [r4, #16]
   a77f4:	9300      	str	r3, [sp, #0]
   a77f6:	f7ff fae3 	bl	a6dc0 <memcpy>
   a77fa:	89a2      	ldrh	r2, [r4, #12]
   a77fc:	9b00      	ldr	r3, [sp, #0]
   a77fe:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   a7802:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   a7806:	81a2      	strh	r2, [r4, #12]
   a7808:	eb0a 0003 	add.w	r0, sl, r3
   a780c:	f8c4 a010 	str.w	sl, [r4, #16]
   a7810:	1afb      	subs	r3, r7, r3
   a7812:	6167      	str	r7, [r4, #20]
   a7814:	46c2      	mov	sl, r8
   a7816:	4647      	mov	r7, r8
   a7818:	6020      	str	r0, [r4, #0]
   a781a:	60a3      	str	r3, [r4, #8]
   a781c:	4652      	mov	r2, sl
   a781e:	4659      	mov	r1, fp
   a7820:	f000 fc6c 	bl	a80fc <memmove>
   a7824:	68a0      	ldr	r0, [r4, #8]
   a7826:	6822      	ldr	r2, [r4, #0]
   a7828:	1bc0      	subs	r0, r0, r7
   a782a:	60a0      	str	r0, [r4, #8]
   a782c:	4640      	mov	r0, r8
   a782e:	eb02 030a 	add.w	r3, r2, sl
   a7832:	6023      	str	r3, [r4, #0]
   a7834:	68b3      	ldr	r3, [r6, #8]
   a7836:	4483      	add	fp, r0
   a7838:	1a1b      	subs	r3, r3, r0
   a783a:	ebc0 0808 	rsb	r8, r0, r8
   a783e:	60b3      	str	r3, [r6, #8]
   a7840:	2b00      	cmp	r3, #0
   a7842:	d08f      	beq.n	a7764 <__sfvwrite_r+0x68>
   a7844:	f8b4 e00c 	ldrh.w	lr, [r4, #12]
   a7848:	f1b8 0f00 	cmp.w	r8, #0
   a784c:	d1a6      	bne.n	a779c <__sfvwrite_r+0xa0>
   a784e:	f8d5 b000 	ldr.w	fp, [r5]
   a7852:	f8d5 8004 	ldr.w	r8, [r5, #4]
   a7856:	3508      	adds	r5, #8
   a7858:	e79d      	b.n	a7796 <__sfvwrite_r+0x9a>
   a785a:	f8d5 b000 	ldr.w	fp, [r5]
   a785e:	f8d5 8004 	ldr.w	r8, [r5, #4]
   a7862:	3508      	adds	r5, #8
   a7864:	e766      	b.n	a7734 <__sfvwrite_r+0x38>
   a7866:	2000      	movs	r0, #0
   a7868:	4770      	bx	lr
   a786a:	6820      	ldr	r0, [r4, #0]
   a786c:	6923      	ldr	r3, [r4, #16]
   a786e:	4298      	cmp	r0, r3
   a7870:	d803      	bhi.n	a787a <__sfvwrite_r+0x17e>
   a7872:	6962      	ldr	r2, [r4, #20]
   a7874:	4590      	cmp	r8, r2
   a7876:	f080 8085 	bcs.w	a7984 <__sfvwrite_r+0x288>
   a787a:	4547      	cmp	r7, r8
   a787c:	bf28      	it	cs
   a787e:	4647      	movcs	r7, r8
   a7880:	4659      	mov	r1, fp
   a7882:	463a      	mov	r2, r7
   a7884:	f000 fc3a 	bl	a80fc <memmove>
   a7888:	68a3      	ldr	r3, [r4, #8]
   a788a:	6822      	ldr	r2, [r4, #0]
   a788c:	1bdb      	subs	r3, r3, r7
   a788e:	443a      	add	r2, r7
   a7890:	60a3      	str	r3, [r4, #8]
   a7892:	6022      	str	r2, [r4, #0]
   a7894:	2b00      	cmp	r3, #0
   a7896:	d149      	bne.n	a792c <__sfvwrite_r+0x230>
   a7898:	4648      	mov	r0, r9
   a789a:	4621      	mov	r1, r4
   a789c:	f7ff fd54 	bl	a7348 <_fflush_r>
   a78a0:	2800      	cmp	r0, #0
   a78a2:	d043      	beq.n	a792c <__sfvwrite_r+0x230>
   a78a4:	89a3      	ldrh	r3, [r4, #12]
   a78a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   a78aa:	f04f 30ff 	mov.w	r0, #4294967295
   a78ae:	81a3      	strh	r3, [r4, #12]
   a78b0:	b003      	add	sp, #12
   a78b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   a78b6:	4680      	mov	r8, r0
   a78b8:	4683      	mov	fp, r0
   a78ba:	4682      	mov	sl, r0
   a78bc:	9000      	str	r0, [sp, #0]
   a78be:	f1ba 0f00 	cmp.w	sl, #0
   a78c2:	d02b      	beq.n	a791c <__sfvwrite_r+0x220>
   a78c4:	9b00      	ldr	r3, [sp, #0]
   a78c6:	2b00      	cmp	r3, #0
   a78c8:	d04f      	beq.n	a796a <__sfvwrite_r+0x26e>
   a78ca:	45d0      	cmp	r8, sl
   a78cc:	4643      	mov	r3, r8
   a78ce:	bf28      	it	cs
   a78d0:	4653      	movcs	r3, sl
   a78d2:	6820      	ldr	r0, [r4, #0]
   a78d4:	6921      	ldr	r1, [r4, #16]
   a78d6:	461f      	mov	r7, r3
   a78d8:	4288      	cmp	r0, r1
   a78da:	f8d4 e008 	ldr.w	lr, [r4, #8]
   a78de:	6962      	ldr	r2, [r4, #20]
   a78e0:	d903      	bls.n	a78ea <__sfvwrite_r+0x1ee>
   a78e2:	eb0e 0c02 	add.w	ip, lr, r2
   a78e6:	4563      	cmp	r3, ip
   a78e8:	dc5e      	bgt.n	a79a8 <__sfvwrite_r+0x2ac>
   a78ea:	4293      	cmp	r3, r2
   a78ec:	db24      	blt.n	a7938 <__sfvwrite_r+0x23c>
   a78ee:	4613      	mov	r3, r2
   a78f0:	6a67      	ldr	r7, [r4, #36]	; 0x24
   a78f2:	4648      	mov	r0, r9
   a78f4:	69e1      	ldr	r1, [r4, #28]
   a78f6:	465a      	mov	r2, fp
   a78f8:	47b8      	blx	r7
   a78fa:	1e07      	subs	r7, r0, #0
   a78fc:	ddd2      	ble.n	a78a4 <__sfvwrite_r+0x1a8>
   a78fe:	ebb8 0807 	subs.w	r8, r8, r7
   a7902:	d029      	beq.n	a7958 <__sfvwrite_r+0x25c>
   a7904:	68b3      	ldr	r3, [r6, #8]
   a7906:	44bb      	add	fp, r7
   a7908:	1bdb      	subs	r3, r3, r7
   a790a:	ebc7 0a0a 	rsb	sl, r7, sl
   a790e:	60b3      	str	r3, [r6, #8]
   a7910:	2b00      	cmp	r3, #0
   a7912:	f43f af27 	beq.w	a7764 <__sfvwrite_r+0x68>
   a7916:	f1ba 0f00 	cmp.w	sl, #0
   a791a:	d1d3      	bne.n	a78c4 <__sfvwrite_r+0x1c8>
   a791c:	2300      	movs	r3, #0
   a791e:	f8d5 b000 	ldr.w	fp, [r5]
   a7922:	f8d5 a004 	ldr.w	sl, [r5, #4]
   a7926:	9300      	str	r3, [sp, #0]
   a7928:	3508      	adds	r5, #8
   a792a:	e7c8      	b.n	a78be <__sfvwrite_r+0x1c2>
   a792c:	4638      	mov	r0, r7
   a792e:	e781      	b.n	a7834 <__sfvwrite_r+0x138>
   a7930:	4647      	mov	r7, r8
   a7932:	46c2      	mov	sl, r8
   a7934:	6820      	ldr	r0, [r4, #0]
   a7936:	e771      	b.n	a781c <__sfvwrite_r+0x120>
   a7938:	461a      	mov	r2, r3
   a793a:	4659      	mov	r1, fp
   a793c:	9301      	str	r3, [sp, #4]
   a793e:	f000 fbdd 	bl	a80fc <memmove>
   a7942:	68a2      	ldr	r2, [r4, #8]
   a7944:	6821      	ldr	r1, [r4, #0]
   a7946:	9b01      	ldr	r3, [sp, #4]
   a7948:	ebb8 0807 	subs.w	r8, r8, r7
   a794c:	eba2 0203 	sub.w	r2, r2, r3
   a7950:	440b      	add	r3, r1
   a7952:	60a2      	str	r2, [r4, #8]
   a7954:	6023      	str	r3, [r4, #0]
   a7956:	d1d5      	bne.n	a7904 <__sfvwrite_r+0x208>
   a7958:	4648      	mov	r0, r9
   a795a:	4621      	mov	r1, r4
   a795c:	f7ff fcf4 	bl	a7348 <_fflush_r>
   a7960:	2800      	cmp	r0, #0
   a7962:	d19f      	bne.n	a78a4 <__sfvwrite_r+0x1a8>
   a7964:	f8cd 8000 	str.w	r8, [sp]
   a7968:	e7cc      	b.n	a7904 <__sfvwrite_r+0x208>
   a796a:	4658      	mov	r0, fp
   a796c:	210a      	movs	r1, #10
   a796e:	4652      	mov	r2, sl
   a7970:	f000 fb7a 	bl	a8068 <memchr>
   a7974:	2800      	cmp	r0, #0
   a7976:	d041      	beq.n	a79fc <__sfvwrite_r+0x300>
   a7978:	3001      	adds	r0, #1
   a797a:	2301      	movs	r3, #1
   a797c:	ebcb 0800 	rsb	r8, fp, r0
   a7980:	9300      	str	r3, [sp, #0]
   a7982:	e7a2      	b.n	a78ca <__sfvwrite_r+0x1ce>
   a7984:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   a7988:	4543      	cmp	r3, r8
   a798a:	bf28      	it	cs
   a798c:	4643      	movcs	r3, r8
   a798e:	fb93 f3f2 	sdiv	r3, r3, r2
   a7992:	6a67      	ldr	r7, [r4, #36]	; 0x24
   a7994:	fb03 f302 	mul.w	r3, r3, r2
   a7998:	4648      	mov	r0, r9
   a799a:	69e1      	ldr	r1, [r4, #28]
   a799c:	465a      	mov	r2, fp
   a799e:	47b8      	blx	r7
   a79a0:	2800      	cmp	r0, #0
   a79a2:	f73f af47 	bgt.w	a7834 <__sfvwrite_r+0x138>
   a79a6:	e77d      	b.n	a78a4 <__sfvwrite_r+0x1a8>
   a79a8:	4662      	mov	r2, ip
   a79aa:	4659      	mov	r1, fp
   a79ac:	f8cd c004 	str.w	ip, [sp, #4]
   a79b0:	f000 fba4 	bl	a80fc <memmove>
   a79b4:	6823      	ldr	r3, [r4, #0]
   a79b6:	f8dd c004 	ldr.w	ip, [sp, #4]
   a79ba:	4648      	mov	r0, r9
   a79bc:	4463      	add	r3, ip
   a79be:	6023      	str	r3, [r4, #0]
   a79c0:	4621      	mov	r1, r4
   a79c2:	f7ff fcc1 	bl	a7348 <_fflush_r>
   a79c6:	f8dd c004 	ldr.w	ip, [sp, #4]
   a79ca:	2800      	cmp	r0, #0
   a79cc:	f47f af6a 	bne.w	a78a4 <__sfvwrite_r+0x1a8>
   a79d0:	4667      	mov	r7, ip
   a79d2:	e794      	b.n	a78fe <__sfvwrite_r+0x202>
   a79d4:	4648      	mov	r0, r9
   a79d6:	f000 fbf9 	bl	a81cc <_realloc_r>
   a79da:	9b00      	ldr	r3, [sp, #0]
   a79dc:	4682      	mov	sl, r0
   a79de:	2800      	cmp	r0, #0
   a79e0:	f47f af12 	bne.w	a7808 <__sfvwrite_r+0x10c>
   a79e4:	4648      	mov	r0, r9
   a79e6:	6921      	ldr	r1, [r4, #16]
   a79e8:	f7ff fdb0 	bl	a754c <_free_r>
   a79ec:	89a3      	ldrh	r3, [r4, #12]
   a79ee:	220c      	movs	r2, #12
   a79f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   a79f4:	b29b      	uxth	r3, r3
   a79f6:	f8c9 2000 	str.w	r2, [r9]
   a79fa:	e754      	b.n	a78a6 <__sfvwrite_r+0x1aa>
   a79fc:	2301      	movs	r3, #1
   a79fe:	f10a 0801 	add.w	r8, sl, #1
   a7a02:	9300      	str	r3, [sp, #0]
   a7a04:	e761      	b.n	a78ca <__sfvwrite_r+0x1ce>
   a7a06:	f04f 30ff 	mov.w	r0, #4294967295
   a7a0a:	e6ac      	b.n	a7766 <__sfvwrite_r+0x6a>
   a7a0c:	230c      	movs	r3, #12
   a7a0e:	f8c9 3000 	str.w	r3, [r9]
   a7a12:	89a3      	ldrh	r3, [r4, #12]
   a7a14:	e747      	b.n	a78a6 <__sfvwrite_r+0x1aa>
   a7a16:	bf00      	nop
   a7a18:	7ffffc00 	.word	0x7ffffc00

000a7a1c <_fwalk_reent>:
   a7a1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   a7a20:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   a7a24:	d01e      	beq.n	a7a64 <_fwalk_reent+0x48>
   a7a26:	4688      	mov	r8, r1
   a7a28:	4607      	mov	r7, r0
   a7a2a:	f04f 0900 	mov.w	r9, #0
   a7a2e:	6875      	ldr	r5, [r6, #4]
   a7a30:	68b4      	ldr	r4, [r6, #8]
   a7a32:	3d01      	subs	r5, #1
   a7a34:	d410      	bmi.n	a7a58 <_fwalk_reent+0x3c>
   a7a36:	89a3      	ldrh	r3, [r4, #12]
   a7a38:	3d01      	subs	r5, #1
   a7a3a:	2b01      	cmp	r3, #1
   a7a3c:	d908      	bls.n	a7a50 <_fwalk_reent+0x34>
   a7a3e:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   a7a42:	3301      	adds	r3, #1
   a7a44:	d004      	beq.n	a7a50 <_fwalk_reent+0x34>
   a7a46:	4638      	mov	r0, r7
   a7a48:	4621      	mov	r1, r4
   a7a4a:	47c0      	blx	r8
   a7a4c:	ea49 0900 	orr.w	r9, r9, r0
   a7a50:	1c6b      	adds	r3, r5, #1
   a7a52:	f104 0468 	add.w	r4, r4, #104	; 0x68
   a7a56:	d1ee      	bne.n	a7a36 <_fwalk_reent+0x1a>
   a7a58:	6836      	ldr	r6, [r6, #0]
   a7a5a:	2e00      	cmp	r6, #0
   a7a5c:	d1e7      	bne.n	a7a2e <_fwalk_reent+0x12>
   a7a5e:	4648      	mov	r0, r9
   a7a60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   a7a64:	46b1      	mov	r9, r6
   a7a66:	4648      	mov	r0, r9
   a7a68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000a7a6c <__smakebuf_r>:
   a7a6c:	898b      	ldrh	r3, [r1, #12]
   a7a6e:	b29a      	uxth	r2, r3
   a7a70:	f012 0f02 	tst.w	r2, #2
   a7a74:	d13c      	bne.n	a7af0 <__smakebuf_r+0x84>
   a7a76:	b5f0      	push	{r4, r5, r6, r7, lr}
   a7a78:	460c      	mov	r4, r1
   a7a7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   a7a7e:	b091      	sub	sp, #68	; 0x44
   a7a80:	2900      	cmp	r1, #0
   a7a82:	4605      	mov	r5, r0
   a7a84:	db19      	blt.n	a7aba <__smakebuf_r+0x4e>
   a7a86:	aa01      	add	r2, sp, #4
   a7a88:	f000 fe9e 	bl	a87c8 <_fstat_r>
   a7a8c:	2800      	cmp	r0, #0
   a7a8e:	db12      	blt.n	a7ab6 <__smakebuf_r+0x4a>
   a7a90:	9b02      	ldr	r3, [sp, #8]
   a7a92:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   a7a96:	f5a3 5700 	sub.w	r7, r3, #8192	; 0x2000
   a7a9a:	fab7 f787 	clz	r7, r7
   a7a9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   a7aa2:	ea4f 1757 	mov.w	r7, r7, lsr #5
   a7aa6:	d02a      	beq.n	a7afe <__smakebuf_r+0x92>
   a7aa8:	89a3      	ldrh	r3, [r4, #12]
   a7aaa:	f44f 6680 	mov.w	r6, #1024	; 0x400
   a7aae:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   a7ab2:	81a3      	strh	r3, [r4, #12]
   a7ab4:	e00b      	b.n	a7ace <__smakebuf_r+0x62>
   a7ab6:	89a3      	ldrh	r3, [r4, #12]
   a7ab8:	b29a      	uxth	r2, r3
   a7aba:	f012 0f80 	tst.w	r2, #128	; 0x80
   a7abe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   a7ac2:	81a3      	strh	r3, [r4, #12]
   a7ac4:	bf0c      	ite	eq
   a7ac6:	f44f 6680 	moveq.w	r6, #1024	; 0x400
   a7aca:	2640      	movne	r6, #64	; 0x40
   a7acc:	2700      	movs	r7, #0
   a7ace:	4628      	mov	r0, r5
   a7ad0:	4631      	mov	r1, r6
   a7ad2:	f000 f843 	bl	a7b5c <_malloc_r>
   a7ad6:	89a3      	ldrh	r3, [r4, #12]
   a7ad8:	b340      	cbz	r0, a7b2c <__smakebuf_r+0xc0>
   a7ada:	4a1a      	ldr	r2, [pc, #104]	; (a7b44 <__smakebuf_r+0xd8>)
   a7adc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   a7ae0:	63ea      	str	r2, [r5, #60]	; 0x3c
   a7ae2:	81a3      	strh	r3, [r4, #12]
   a7ae4:	6020      	str	r0, [r4, #0]
   a7ae6:	6120      	str	r0, [r4, #16]
   a7ae8:	6166      	str	r6, [r4, #20]
   a7aea:	b99f      	cbnz	r7, a7b14 <__smakebuf_r+0xa8>
   a7aec:	b011      	add	sp, #68	; 0x44
   a7aee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   a7af0:	f101 0343 	add.w	r3, r1, #67	; 0x43
   a7af4:	2201      	movs	r2, #1
   a7af6:	600b      	str	r3, [r1, #0]
   a7af8:	610b      	str	r3, [r1, #16]
   a7afa:	614a      	str	r2, [r1, #20]
   a7afc:	4770      	bx	lr
   a7afe:	4b12      	ldr	r3, [pc, #72]	; (a7b48 <__smakebuf_r+0xdc>)
   a7b00:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   a7b02:	429a      	cmp	r2, r3
   a7b04:	d1d0      	bne.n	a7aa8 <__smakebuf_r+0x3c>
   a7b06:	89a3      	ldrh	r3, [r4, #12]
   a7b08:	f44f 6680 	mov.w	r6, #1024	; 0x400
   a7b0c:	4333      	orrs	r3, r6
   a7b0e:	81a3      	strh	r3, [r4, #12]
   a7b10:	64e6      	str	r6, [r4, #76]	; 0x4c
   a7b12:	e7dc      	b.n	a7ace <__smakebuf_r+0x62>
   a7b14:	4628      	mov	r0, r5
   a7b16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   a7b1a:	f000 fe69 	bl	a87f0 <_isatty_r>
   a7b1e:	2800      	cmp	r0, #0
   a7b20:	d0e4      	beq.n	a7aec <__smakebuf_r+0x80>
   a7b22:	89a3      	ldrh	r3, [r4, #12]
   a7b24:	f043 0301 	orr.w	r3, r3, #1
   a7b28:	81a3      	strh	r3, [r4, #12]
   a7b2a:	e7df      	b.n	a7aec <__smakebuf_r+0x80>
   a7b2c:	059a      	lsls	r2, r3, #22
   a7b2e:	d4dd      	bmi.n	a7aec <__smakebuf_r+0x80>
   a7b30:	f104 0243 	add.w	r2, r4, #67	; 0x43
   a7b34:	f043 0302 	orr.w	r3, r3, #2
   a7b38:	2101      	movs	r1, #1
   a7b3a:	81a3      	strh	r3, [r4, #12]
   a7b3c:	6022      	str	r2, [r4, #0]
   a7b3e:	6122      	str	r2, [r4, #16]
   a7b40:	6161      	str	r1, [r4, #20]
   a7b42:	e7d3      	b.n	a7aec <__smakebuf_r+0x80>
   a7b44:	000a7375 	.word	0x000a7375
   a7b48:	000a862d 	.word	0x000a862d

000a7b4c <malloc>:
   a7b4c:	4b02      	ldr	r3, [pc, #8]	; (a7b58 <malloc+0xc>)
   a7b4e:	4601      	mov	r1, r0
   a7b50:	6818      	ldr	r0, [r3, #0]
   a7b52:	f000 b803 	b.w	a7b5c <_malloc_r>
   a7b56:	bf00      	nop
   a7b58:	200711f0 	.word	0x200711f0

000a7b5c <_malloc_r>:
   a7b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   a7b60:	f101 050b 	add.w	r5, r1, #11
   a7b64:	2d16      	cmp	r5, #22
   a7b66:	b083      	sub	sp, #12
   a7b68:	4606      	mov	r6, r0
   a7b6a:	d927      	bls.n	a7bbc <_malloc_r+0x60>
   a7b6c:	f035 0507 	bics.w	r5, r5, #7
   a7b70:	f100 80b6 	bmi.w	a7ce0 <_malloc_r+0x184>
   a7b74:	42a9      	cmp	r1, r5
   a7b76:	f200 80b3 	bhi.w	a7ce0 <_malloc_r+0x184>
   a7b7a:	f000 fb23 	bl	a81c4 <__malloc_lock>
   a7b7e:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   a7b82:	d222      	bcs.n	a7bca <_malloc_r+0x6e>
   a7b84:	4fbc      	ldr	r7, [pc, #752]	; (a7e78 <_malloc_r+0x31c>)
   a7b86:	08e8      	lsrs	r0, r5, #3
   a7b88:	eb07 03c0 	add.w	r3, r7, r0, lsl #3
   a7b8c:	68dc      	ldr	r4, [r3, #12]
   a7b8e:	429c      	cmp	r4, r3
   a7b90:	f000 81bc 	beq.w	a7f0c <_malloc_r+0x3b0>
   a7b94:	6863      	ldr	r3, [r4, #4]
   a7b96:	68e1      	ldr	r1, [r4, #12]
   a7b98:	f023 0303 	bic.w	r3, r3, #3
   a7b9c:	4423      	add	r3, r4
   a7b9e:	685a      	ldr	r2, [r3, #4]
   a7ba0:	68a5      	ldr	r5, [r4, #8]
   a7ba2:	f042 0201 	orr.w	r2, r2, #1
   a7ba6:	60e9      	str	r1, [r5, #12]
   a7ba8:	4630      	mov	r0, r6
   a7baa:	608d      	str	r5, [r1, #8]
   a7bac:	605a      	str	r2, [r3, #4]
   a7bae:	f000 fb0b 	bl	a81c8 <__malloc_unlock>
   a7bb2:	3408      	adds	r4, #8
   a7bb4:	4620      	mov	r0, r4
   a7bb6:	b003      	add	sp, #12
   a7bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   a7bbc:	2910      	cmp	r1, #16
   a7bbe:	f200 808f 	bhi.w	a7ce0 <_malloc_r+0x184>
   a7bc2:	f000 faff 	bl	a81c4 <__malloc_lock>
   a7bc6:	2510      	movs	r5, #16
   a7bc8:	e7dc      	b.n	a7b84 <_malloc_r+0x28>
   a7bca:	0a68      	lsrs	r0, r5, #9
   a7bcc:	f000 808f 	beq.w	a7cee <_malloc_r+0x192>
   a7bd0:	2804      	cmp	r0, #4
   a7bd2:	f200 8147 	bhi.w	a7e64 <_malloc_r+0x308>
   a7bd6:	09a8      	lsrs	r0, r5, #6
   a7bd8:	3038      	adds	r0, #56	; 0x38
   a7bda:	0041      	lsls	r1, r0, #1
   a7bdc:	4fa6      	ldr	r7, [pc, #664]	; (a7e78 <_malloc_r+0x31c>)
   a7bde:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   a7be2:	68cc      	ldr	r4, [r1, #12]
   a7be4:	42a1      	cmp	r1, r4
   a7be6:	d106      	bne.n	a7bf6 <_malloc_r+0x9a>
   a7be8:	e00c      	b.n	a7c04 <_malloc_r+0xa8>
   a7bea:	2a00      	cmp	r2, #0
   a7bec:	f280 8082 	bge.w	a7cf4 <_malloc_r+0x198>
   a7bf0:	68e4      	ldr	r4, [r4, #12]
   a7bf2:	42a1      	cmp	r1, r4
   a7bf4:	d006      	beq.n	a7c04 <_malloc_r+0xa8>
   a7bf6:	6863      	ldr	r3, [r4, #4]
   a7bf8:	f023 0303 	bic.w	r3, r3, #3
   a7bfc:	1b5a      	subs	r2, r3, r5
   a7bfe:	2a0f      	cmp	r2, #15
   a7c00:	ddf3      	ble.n	a7bea <_malloc_r+0x8e>
   a7c02:	3801      	subs	r0, #1
   a7c04:	3001      	adds	r0, #1
   a7c06:	499c      	ldr	r1, [pc, #624]	; (a7e78 <_malloc_r+0x31c>)
   a7c08:	693c      	ldr	r4, [r7, #16]
   a7c0a:	f101 0e08 	add.w	lr, r1, #8
   a7c0e:	4574      	cmp	r4, lr
   a7c10:	f000 8171 	beq.w	a7ef6 <_malloc_r+0x39a>
   a7c14:	6863      	ldr	r3, [r4, #4]
   a7c16:	f023 0303 	bic.w	r3, r3, #3
   a7c1a:	1b5a      	subs	r2, r3, r5
   a7c1c:	2a0f      	cmp	r2, #15
   a7c1e:	f300 8157 	bgt.w	a7ed0 <_malloc_r+0x374>
   a7c22:	2a00      	cmp	r2, #0
   a7c24:	f8c1 e014 	str.w	lr, [r1, #20]
   a7c28:	f8c1 e010 	str.w	lr, [r1, #16]
   a7c2c:	da66      	bge.n	a7cfc <_malloc_r+0x1a0>
   a7c2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   a7c32:	f080 812d 	bcs.w	a7e90 <_malloc_r+0x334>
   a7c36:	08db      	lsrs	r3, r3, #3
   a7c38:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
   a7c3c:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   a7c40:	684a      	ldr	r2, [r1, #4]
   a7c42:	2301      	movs	r3, #1
   a7c44:	fa03 f30c 	lsl.w	r3, r3, ip
   a7c48:	f8d8 c008 	ldr.w	ip, [r8, #8]
   a7c4c:	4313      	orrs	r3, r2
   a7c4e:	f8c4 c008 	str.w	ip, [r4, #8]
   a7c52:	f8c4 800c 	str.w	r8, [r4, #12]
   a7c56:	604b      	str	r3, [r1, #4]
   a7c58:	f8c8 4008 	str.w	r4, [r8, #8]
   a7c5c:	f8cc 400c 	str.w	r4, [ip, #12]
   a7c60:	1082      	asrs	r2, r0, #2
   a7c62:	2401      	movs	r4, #1
   a7c64:	4094      	lsls	r4, r2
   a7c66:	429c      	cmp	r4, r3
   a7c68:	d855      	bhi.n	a7d16 <_malloc_r+0x1ba>
   a7c6a:	4223      	tst	r3, r4
   a7c6c:	d106      	bne.n	a7c7c <_malloc_r+0x120>
   a7c6e:	f020 0003 	bic.w	r0, r0, #3
   a7c72:	0064      	lsls	r4, r4, #1
   a7c74:	4223      	tst	r3, r4
   a7c76:	f100 0004 	add.w	r0, r0, #4
   a7c7a:	d0fa      	beq.n	a7c72 <_malloc_r+0x116>
   a7c7c:	eb07 08c0 	add.w	r8, r7, r0, lsl #3
   a7c80:	46c4      	mov	ip, r8
   a7c82:	4681      	mov	r9, r0
   a7c84:	f8dc 300c 	ldr.w	r3, [ip, #12]
   a7c88:	459c      	cmp	ip, r3
   a7c8a:	d107      	bne.n	a7c9c <_malloc_r+0x140>
   a7c8c:	e135      	b.n	a7efa <_malloc_r+0x39e>
   a7c8e:	2900      	cmp	r1, #0
   a7c90:	f280 8145 	bge.w	a7f1e <_malloc_r+0x3c2>
   a7c94:	68db      	ldr	r3, [r3, #12]
   a7c96:	459c      	cmp	ip, r3
   a7c98:	f000 812f 	beq.w	a7efa <_malloc_r+0x39e>
   a7c9c:	685a      	ldr	r2, [r3, #4]
   a7c9e:	f022 0203 	bic.w	r2, r2, #3
   a7ca2:	1b51      	subs	r1, r2, r5
   a7ca4:	290f      	cmp	r1, #15
   a7ca6:	ddf2      	ble.n	a7c8e <_malloc_r+0x132>
   a7ca8:	461c      	mov	r4, r3
   a7caa:	68da      	ldr	r2, [r3, #12]
   a7cac:	f854 cf08 	ldr.w	ip, [r4, #8]!
   a7cb0:	f045 0901 	orr.w	r9, r5, #1
   a7cb4:	f041 0801 	orr.w	r8, r1, #1
   a7cb8:	441d      	add	r5, r3
   a7cba:	f8c3 9004 	str.w	r9, [r3, #4]
   a7cbe:	4630      	mov	r0, r6
   a7cc0:	f8cc 200c 	str.w	r2, [ip, #12]
   a7cc4:	f8c2 c008 	str.w	ip, [r2, #8]
   a7cc8:	617d      	str	r5, [r7, #20]
   a7cca:	613d      	str	r5, [r7, #16]
   a7ccc:	f8c5 e00c 	str.w	lr, [r5, #12]
   a7cd0:	f8c5 e008 	str.w	lr, [r5, #8]
   a7cd4:	f8c5 8004 	str.w	r8, [r5, #4]
   a7cd8:	5069      	str	r1, [r5, r1]
   a7cda:	f000 fa75 	bl	a81c8 <__malloc_unlock>
   a7cde:	e769      	b.n	a7bb4 <_malloc_r+0x58>
   a7ce0:	2400      	movs	r4, #0
   a7ce2:	4620      	mov	r0, r4
   a7ce4:	230c      	movs	r3, #12
   a7ce6:	6033      	str	r3, [r6, #0]
   a7ce8:	b003      	add	sp, #12
   a7cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   a7cee:	217e      	movs	r1, #126	; 0x7e
   a7cf0:	203f      	movs	r0, #63	; 0x3f
   a7cf2:	e773      	b.n	a7bdc <_malloc_r+0x80>
   a7cf4:	4423      	add	r3, r4
   a7cf6:	685a      	ldr	r2, [r3, #4]
   a7cf8:	68e1      	ldr	r1, [r4, #12]
   a7cfa:	e751      	b.n	a7ba0 <_malloc_r+0x44>
   a7cfc:	4423      	add	r3, r4
   a7cfe:	685a      	ldr	r2, [r3, #4]
   a7d00:	4630      	mov	r0, r6
   a7d02:	f042 0201 	orr.w	r2, r2, #1
   a7d06:	605a      	str	r2, [r3, #4]
   a7d08:	3408      	adds	r4, #8
   a7d0a:	f000 fa5d 	bl	a81c8 <__malloc_unlock>
   a7d0e:	4620      	mov	r0, r4
   a7d10:	b003      	add	sp, #12
   a7d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   a7d16:	68bc      	ldr	r4, [r7, #8]
   a7d18:	6863      	ldr	r3, [r4, #4]
   a7d1a:	f023 0803 	bic.w	r8, r3, #3
   a7d1e:	4545      	cmp	r5, r8
   a7d20:	d804      	bhi.n	a7d2c <_malloc_r+0x1d0>
   a7d22:	ebc5 0308 	rsb	r3, r5, r8
   a7d26:	2b0f      	cmp	r3, #15
   a7d28:	f300 808c 	bgt.w	a7e44 <_malloc_r+0x2e8>
   a7d2c:	4b53      	ldr	r3, [pc, #332]	; (a7e7c <_malloc_r+0x320>)
   a7d2e:	f8df a15c 	ldr.w	sl, [pc, #348]	; a7e8c <_malloc_r+0x330>
   a7d32:	681a      	ldr	r2, [r3, #0]
   a7d34:	f8da 3000 	ldr.w	r3, [sl]
   a7d38:	442a      	add	r2, r5
   a7d3a:	3301      	adds	r3, #1
   a7d3c:	eb04 0b08 	add.w	fp, r4, r8
   a7d40:	f000 8151 	beq.w	a7fe6 <_malloc_r+0x48a>
   a7d44:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   a7d48:	320f      	adds	r2, #15
   a7d4a:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
   a7d4e:	f022 020f 	bic.w	r2, r2, #15
   a7d52:	4611      	mov	r1, r2
   a7d54:	4630      	mov	r0, r6
   a7d56:	9201      	str	r2, [sp, #4]
   a7d58:	f000 fc28 	bl	a85ac <_sbrk_r>
   a7d5c:	f1b0 3fff 	cmp.w	r0, #4294967295
   a7d60:	4681      	mov	r9, r0
   a7d62:	9a01      	ldr	r2, [sp, #4]
   a7d64:	f000 8148 	beq.w	a7ff8 <_malloc_r+0x49c>
   a7d68:	4583      	cmp	fp, r0
   a7d6a:	f200 80ef 	bhi.w	a7f4c <_malloc_r+0x3f0>
   a7d6e:	4b44      	ldr	r3, [pc, #272]	; (a7e80 <_malloc_r+0x324>)
   a7d70:	45cb      	cmp	fp, r9
   a7d72:	6819      	ldr	r1, [r3, #0]
   a7d74:	4411      	add	r1, r2
   a7d76:	6019      	str	r1, [r3, #0]
   a7d78:	f000 8143 	beq.w	a8002 <_malloc_r+0x4a6>
   a7d7c:	f8da 0000 	ldr.w	r0, [sl]
   a7d80:	f8df e108 	ldr.w	lr, [pc, #264]	; a7e8c <_malloc_r+0x330>
   a7d84:	3001      	adds	r0, #1
   a7d86:	bf1b      	ittet	ne
   a7d88:	ebcb 0b09 	rsbne	fp, fp, r9
   a7d8c:	4459      	addne	r1, fp
   a7d8e:	f8ce 9000 	streq.w	r9, [lr]
   a7d92:	6019      	strne	r1, [r3, #0]
   a7d94:	f019 0107 	ands.w	r1, r9, #7
   a7d98:	f000 8108 	beq.w	a7fac <_malloc_r+0x450>
   a7d9c:	f1c1 0008 	rsb	r0, r1, #8
   a7da0:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   a7da4:	4481      	add	r9, r0
   a7da6:	3108      	adds	r1, #8
   a7da8:	444a      	add	r2, r9
   a7daa:	f3c2 020b 	ubfx	r2, r2, #0, #12
   a7dae:	ebc2 0a01 	rsb	sl, r2, r1
   a7db2:	4651      	mov	r1, sl
   a7db4:	4630      	mov	r0, r6
   a7db6:	9301      	str	r3, [sp, #4]
   a7db8:	f000 fbf8 	bl	a85ac <_sbrk_r>
   a7dbc:	1c43      	adds	r3, r0, #1
   a7dbe:	9b01      	ldr	r3, [sp, #4]
   a7dc0:	f000 812d 	beq.w	a801e <_malloc_r+0x4c2>
   a7dc4:	ebc9 0200 	rsb	r2, r9, r0
   a7dc8:	4452      	add	r2, sl
   a7dca:	f042 0201 	orr.w	r2, r2, #1
   a7dce:	6819      	ldr	r1, [r3, #0]
   a7dd0:	42bc      	cmp	r4, r7
   a7dd2:	4451      	add	r1, sl
   a7dd4:	f8c7 9008 	str.w	r9, [r7, #8]
   a7dd8:	6019      	str	r1, [r3, #0]
   a7dda:	f8c9 2004 	str.w	r2, [r9, #4]
   a7dde:	f8df a0a0 	ldr.w	sl, [pc, #160]	; a7e80 <_malloc_r+0x324>
   a7de2:	d016      	beq.n	a7e12 <_malloc_r+0x2b6>
   a7de4:	f1b8 0f0f 	cmp.w	r8, #15
   a7de8:	f240 80ef 	bls.w	a7fca <_malloc_r+0x46e>
   a7dec:	6862      	ldr	r2, [r4, #4]
   a7dee:	f1a8 030c 	sub.w	r3, r8, #12
   a7df2:	f023 0307 	bic.w	r3, r3, #7
   a7df6:	f002 0201 	and.w	r2, r2, #1
   a7dfa:	18e0      	adds	r0, r4, r3
   a7dfc:	f04f 0e05 	mov.w	lr, #5
   a7e00:	431a      	orrs	r2, r3
   a7e02:	2b0f      	cmp	r3, #15
   a7e04:	6062      	str	r2, [r4, #4]
   a7e06:	f8c0 e004 	str.w	lr, [r0, #4]
   a7e0a:	f8c0 e008 	str.w	lr, [r0, #8]
   a7e0e:	f200 810a 	bhi.w	a8026 <_malloc_r+0x4ca>
   a7e12:	4b1c      	ldr	r3, [pc, #112]	; (a7e84 <_malloc_r+0x328>)
   a7e14:	68bc      	ldr	r4, [r7, #8]
   a7e16:	681a      	ldr	r2, [r3, #0]
   a7e18:	4291      	cmp	r1, r2
   a7e1a:	bf88      	it	hi
   a7e1c:	6019      	strhi	r1, [r3, #0]
   a7e1e:	4b1a      	ldr	r3, [pc, #104]	; (a7e88 <_malloc_r+0x32c>)
   a7e20:	681a      	ldr	r2, [r3, #0]
   a7e22:	4291      	cmp	r1, r2
   a7e24:	6862      	ldr	r2, [r4, #4]
   a7e26:	bf88      	it	hi
   a7e28:	6019      	strhi	r1, [r3, #0]
   a7e2a:	f022 0203 	bic.w	r2, r2, #3
   a7e2e:	4295      	cmp	r5, r2
   a7e30:	eba2 0305 	sub.w	r3, r2, r5
   a7e34:	d801      	bhi.n	a7e3a <_malloc_r+0x2de>
   a7e36:	2b0f      	cmp	r3, #15
   a7e38:	dc04      	bgt.n	a7e44 <_malloc_r+0x2e8>
   a7e3a:	4630      	mov	r0, r6
   a7e3c:	f000 f9c4 	bl	a81c8 <__malloc_unlock>
   a7e40:	2400      	movs	r4, #0
   a7e42:	e6b7      	b.n	a7bb4 <_malloc_r+0x58>
   a7e44:	f045 0201 	orr.w	r2, r5, #1
   a7e48:	f043 0301 	orr.w	r3, r3, #1
   a7e4c:	4425      	add	r5, r4
   a7e4e:	6062      	str	r2, [r4, #4]
   a7e50:	4630      	mov	r0, r6
   a7e52:	60bd      	str	r5, [r7, #8]
   a7e54:	3408      	adds	r4, #8
   a7e56:	606b      	str	r3, [r5, #4]
   a7e58:	f000 f9b6 	bl	a81c8 <__malloc_unlock>
   a7e5c:	4620      	mov	r0, r4
   a7e5e:	b003      	add	sp, #12
   a7e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   a7e64:	2814      	cmp	r0, #20
   a7e66:	d969      	bls.n	a7f3c <_malloc_r+0x3e0>
   a7e68:	2854      	cmp	r0, #84	; 0x54
   a7e6a:	f200 8098 	bhi.w	a7f9e <_malloc_r+0x442>
   a7e6e:	0b28      	lsrs	r0, r5, #12
   a7e70:	306e      	adds	r0, #110	; 0x6e
   a7e72:	0041      	lsls	r1, r0, #1
   a7e74:	e6b2      	b.n	a7bdc <_malloc_r+0x80>
   a7e76:	bf00      	nop
   a7e78:	200711f4 	.word	0x200711f4
   a7e7c:	20071ce0 	.word	0x20071ce0
   a7e80:	20071ce4 	.word	0x20071ce4
   a7e84:	20071cdc 	.word	0x20071cdc
   a7e88:	20071cd8 	.word	0x20071cd8
   a7e8c:	20071600 	.word	0x20071600
   a7e90:	0a5a      	lsrs	r2, r3, #9
   a7e92:	2a04      	cmp	r2, #4
   a7e94:	d955      	bls.n	a7f42 <_malloc_r+0x3e6>
   a7e96:	2a14      	cmp	r2, #20
   a7e98:	f200 80a7 	bhi.w	a7fea <_malloc_r+0x48e>
   a7e9c:	325b      	adds	r2, #91	; 0x5b
   a7e9e:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   a7ea2:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
   a7ea6:	f8dc 1008 	ldr.w	r1, [ip, #8]
   a7eaa:	f8df 81b8 	ldr.w	r8, [pc, #440]	; a8064 <_malloc_r+0x508>
   a7eae:	4561      	cmp	r1, ip
   a7eb0:	d07f      	beq.n	a7fb2 <_malloc_r+0x456>
   a7eb2:	684a      	ldr	r2, [r1, #4]
   a7eb4:	f022 0203 	bic.w	r2, r2, #3
   a7eb8:	4293      	cmp	r3, r2
   a7eba:	d202      	bcs.n	a7ec2 <_malloc_r+0x366>
   a7ebc:	6889      	ldr	r1, [r1, #8]
   a7ebe:	458c      	cmp	ip, r1
   a7ec0:	d1f7      	bne.n	a7eb2 <_malloc_r+0x356>
   a7ec2:	68ca      	ldr	r2, [r1, #12]
   a7ec4:	687b      	ldr	r3, [r7, #4]
   a7ec6:	60e2      	str	r2, [r4, #12]
   a7ec8:	60a1      	str	r1, [r4, #8]
   a7eca:	6094      	str	r4, [r2, #8]
   a7ecc:	60cc      	str	r4, [r1, #12]
   a7ece:	e6c7      	b.n	a7c60 <_malloc_r+0x104>
   a7ed0:	f045 0701 	orr.w	r7, r5, #1
   a7ed4:	f042 0301 	orr.w	r3, r2, #1
   a7ed8:	4425      	add	r5, r4
   a7eda:	6067      	str	r7, [r4, #4]
   a7edc:	4630      	mov	r0, r6
   a7ede:	614d      	str	r5, [r1, #20]
   a7ee0:	610d      	str	r5, [r1, #16]
   a7ee2:	f8c5 e00c 	str.w	lr, [r5, #12]
   a7ee6:	f8c5 e008 	str.w	lr, [r5, #8]
   a7eea:	606b      	str	r3, [r5, #4]
   a7eec:	50aa      	str	r2, [r5, r2]
   a7eee:	3408      	adds	r4, #8
   a7ef0:	f000 f96a 	bl	a81c8 <__malloc_unlock>
   a7ef4:	e65e      	b.n	a7bb4 <_malloc_r+0x58>
   a7ef6:	684b      	ldr	r3, [r1, #4]
   a7ef8:	e6b2      	b.n	a7c60 <_malloc_r+0x104>
   a7efa:	f109 0901 	add.w	r9, r9, #1
   a7efe:	f019 0f03 	tst.w	r9, #3
   a7f02:	f10c 0c08 	add.w	ip, ip, #8
   a7f06:	f47f aebd 	bne.w	a7c84 <_malloc_r+0x128>
   a7f0a:	e02c      	b.n	a7f66 <_malloc_r+0x40a>
   a7f0c:	f104 0308 	add.w	r3, r4, #8
   a7f10:	6964      	ldr	r4, [r4, #20]
   a7f12:	42a3      	cmp	r3, r4
   a7f14:	bf08      	it	eq
   a7f16:	3002      	addeq	r0, #2
   a7f18:	f43f ae75 	beq.w	a7c06 <_malloc_r+0xaa>
   a7f1c:	e63a      	b.n	a7b94 <_malloc_r+0x38>
   a7f1e:	461c      	mov	r4, r3
   a7f20:	441a      	add	r2, r3
   a7f22:	6851      	ldr	r1, [r2, #4]
   a7f24:	68db      	ldr	r3, [r3, #12]
   a7f26:	f854 5f08 	ldr.w	r5, [r4, #8]!
   a7f2a:	f041 0101 	orr.w	r1, r1, #1
   a7f2e:	6051      	str	r1, [r2, #4]
   a7f30:	4630      	mov	r0, r6
   a7f32:	60eb      	str	r3, [r5, #12]
   a7f34:	609d      	str	r5, [r3, #8]
   a7f36:	f000 f947 	bl	a81c8 <__malloc_unlock>
   a7f3a:	e63b      	b.n	a7bb4 <_malloc_r+0x58>
   a7f3c:	305b      	adds	r0, #91	; 0x5b
   a7f3e:	0041      	lsls	r1, r0, #1
   a7f40:	e64c      	b.n	a7bdc <_malloc_r+0x80>
   a7f42:	099a      	lsrs	r2, r3, #6
   a7f44:	3238      	adds	r2, #56	; 0x38
   a7f46:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   a7f4a:	e7aa      	b.n	a7ea2 <_malloc_r+0x346>
   a7f4c:	42bc      	cmp	r4, r7
   a7f4e:	4b45      	ldr	r3, [pc, #276]	; (a8064 <_malloc_r+0x508>)
   a7f50:	f43f af0d 	beq.w	a7d6e <_malloc_r+0x212>
   a7f54:	689c      	ldr	r4, [r3, #8]
   a7f56:	6862      	ldr	r2, [r4, #4]
   a7f58:	f022 0203 	bic.w	r2, r2, #3
   a7f5c:	e767      	b.n	a7e2e <_malloc_r+0x2d2>
   a7f5e:	f8d8 8000 	ldr.w	r8, [r8]
   a7f62:	4598      	cmp	r8, r3
   a7f64:	d17c      	bne.n	a8060 <_malloc_r+0x504>
   a7f66:	f010 0f03 	tst.w	r0, #3
   a7f6a:	f1a8 0308 	sub.w	r3, r8, #8
   a7f6e:	f100 30ff 	add.w	r0, r0, #4294967295
   a7f72:	d1f4      	bne.n	a7f5e <_malloc_r+0x402>
   a7f74:	687b      	ldr	r3, [r7, #4]
   a7f76:	ea23 0304 	bic.w	r3, r3, r4
   a7f7a:	607b      	str	r3, [r7, #4]
   a7f7c:	0064      	lsls	r4, r4, #1
   a7f7e:	429c      	cmp	r4, r3
   a7f80:	f63f aec9 	bhi.w	a7d16 <_malloc_r+0x1ba>
   a7f84:	2c00      	cmp	r4, #0
   a7f86:	f43f aec6 	beq.w	a7d16 <_malloc_r+0x1ba>
   a7f8a:	4223      	tst	r3, r4
   a7f8c:	4648      	mov	r0, r9
   a7f8e:	f47f ae75 	bne.w	a7c7c <_malloc_r+0x120>
   a7f92:	0064      	lsls	r4, r4, #1
   a7f94:	4223      	tst	r3, r4
   a7f96:	f100 0004 	add.w	r0, r0, #4
   a7f9a:	d0fa      	beq.n	a7f92 <_malloc_r+0x436>
   a7f9c:	e66e      	b.n	a7c7c <_malloc_r+0x120>
   a7f9e:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
   a7fa2:	d818      	bhi.n	a7fd6 <_malloc_r+0x47a>
   a7fa4:	0be8      	lsrs	r0, r5, #15
   a7fa6:	3077      	adds	r0, #119	; 0x77
   a7fa8:	0041      	lsls	r1, r0, #1
   a7faa:	e617      	b.n	a7bdc <_malloc_r+0x80>
   a7fac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   a7fb0:	e6fa      	b.n	a7da8 <_malloc_r+0x24c>
   a7fb2:	f8d8 3004 	ldr.w	r3, [r8, #4]
   a7fb6:	1092      	asrs	r2, r2, #2
   a7fb8:	f04f 0c01 	mov.w	ip, #1
   a7fbc:	fa0c f202 	lsl.w	r2, ip, r2
   a7fc0:	4313      	orrs	r3, r2
   a7fc2:	f8c8 3004 	str.w	r3, [r8, #4]
   a7fc6:	460a      	mov	r2, r1
   a7fc8:	e77d      	b.n	a7ec6 <_malloc_r+0x36a>
   a7fca:	2301      	movs	r3, #1
   a7fcc:	f8c9 3004 	str.w	r3, [r9, #4]
   a7fd0:	464c      	mov	r4, r9
   a7fd2:	2200      	movs	r2, #0
   a7fd4:	e72b      	b.n	a7e2e <_malloc_r+0x2d2>
   a7fd6:	f240 5354 	movw	r3, #1364	; 0x554
   a7fda:	4298      	cmp	r0, r3
   a7fdc:	d81c      	bhi.n	a8018 <_malloc_r+0x4bc>
   a7fde:	0ca8      	lsrs	r0, r5, #18
   a7fe0:	307c      	adds	r0, #124	; 0x7c
   a7fe2:	0041      	lsls	r1, r0, #1
   a7fe4:	e5fa      	b.n	a7bdc <_malloc_r+0x80>
   a7fe6:	3210      	adds	r2, #16
   a7fe8:	e6b3      	b.n	a7d52 <_malloc_r+0x1f6>
   a7fea:	2a54      	cmp	r2, #84	; 0x54
   a7fec:	d823      	bhi.n	a8036 <_malloc_r+0x4da>
   a7fee:	0b1a      	lsrs	r2, r3, #12
   a7ff0:	326e      	adds	r2, #110	; 0x6e
   a7ff2:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   a7ff6:	e754      	b.n	a7ea2 <_malloc_r+0x346>
   a7ff8:	68bc      	ldr	r4, [r7, #8]
   a7ffa:	6862      	ldr	r2, [r4, #4]
   a7ffc:	f022 0203 	bic.w	r2, r2, #3
   a8000:	e715      	b.n	a7e2e <_malloc_r+0x2d2>
   a8002:	f3cb 000b 	ubfx	r0, fp, #0, #12
   a8006:	2800      	cmp	r0, #0
   a8008:	f47f aeb8 	bne.w	a7d7c <_malloc_r+0x220>
   a800c:	4442      	add	r2, r8
   a800e:	68bb      	ldr	r3, [r7, #8]
   a8010:	f042 0201 	orr.w	r2, r2, #1
   a8014:	605a      	str	r2, [r3, #4]
   a8016:	e6fc      	b.n	a7e12 <_malloc_r+0x2b6>
   a8018:	21fc      	movs	r1, #252	; 0xfc
   a801a:	207e      	movs	r0, #126	; 0x7e
   a801c:	e5de      	b.n	a7bdc <_malloc_r+0x80>
   a801e:	2201      	movs	r2, #1
   a8020:	f04f 0a00 	mov.w	sl, #0
   a8024:	e6d3      	b.n	a7dce <_malloc_r+0x272>
   a8026:	f104 0108 	add.w	r1, r4, #8
   a802a:	4630      	mov	r0, r6
   a802c:	f7ff fa8e 	bl	a754c <_free_r>
   a8030:	f8da 1000 	ldr.w	r1, [sl]
   a8034:	e6ed      	b.n	a7e12 <_malloc_r+0x2b6>
   a8036:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   a803a:	d804      	bhi.n	a8046 <_malloc_r+0x4ea>
   a803c:	0bda      	lsrs	r2, r3, #15
   a803e:	3277      	adds	r2, #119	; 0x77
   a8040:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   a8044:	e72d      	b.n	a7ea2 <_malloc_r+0x346>
   a8046:	f240 5154 	movw	r1, #1364	; 0x554
   a804a:	428a      	cmp	r2, r1
   a804c:	d804      	bhi.n	a8058 <_malloc_r+0x4fc>
   a804e:	0c9a      	lsrs	r2, r3, #18
   a8050:	327c      	adds	r2, #124	; 0x7c
   a8052:	ea4f 0c42 	mov.w	ip, r2, lsl #1
   a8056:	e724      	b.n	a7ea2 <_malloc_r+0x346>
   a8058:	f04f 0cfc 	mov.w	ip, #252	; 0xfc
   a805c:	227e      	movs	r2, #126	; 0x7e
   a805e:	e720      	b.n	a7ea2 <_malloc_r+0x346>
   a8060:	687b      	ldr	r3, [r7, #4]
   a8062:	e78b      	b.n	a7f7c <_malloc_r+0x420>
   a8064:	200711f4 	.word	0x200711f4

000a8068 <memchr>:
   a8068:	0783      	lsls	r3, r0, #30
   a806a:	b470      	push	{r4, r5, r6}
   a806c:	b2c9      	uxtb	r1, r1
   a806e:	d040      	beq.n	a80f2 <memchr+0x8a>
   a8070:	1e54      	subs	r4, r2, #1
   a8072:	2a00      	cmp	r2, #0
   a8074:	d03f      	beq.n	a80f6 <memchr+0x8e>
   a8076:	7803      	ldrb	r3, [r0, #0]
   a8078:	428b      	cmp	r3, r1
   a807a:	bf18      	it	ne
   a807c:	1c43      	addne	r3, r0, #1
   a807e:	d105      	bne.n	a808c <memchr+0x24>
   a8080:	e01c      	b.n	a80bc <memchr+0x54>
   a8082:	b1ec      	cbz	r4, a80c0 <memchr+0x58>
   a8084:	7802      	ldrb	r2, [r0, #0]
   a8086:	3c01      	subs	r4, #1
   a8088:	428a      	cmp	r2, r1
   a808a:	d017      	beq.n	a80bc <memchr+0x54>
   a808c:	f013 0f03 	tst.w	r3, #3
   a8090:	4618      	mov	r0, r3
   a8092:	f103 0301 	add.w	r3, r3, #1
   a8096:	d1f4      	bne.n	a8082 <memchr+0x1a>
   a8098:	2c03      	cmp	r4, #3
   a809a:	d814      	bhi.n	a80c6 <memchr+0x5e>
   a809c:	b184      	cbz	r4, a80c0 <memchr+0x58>
   a809e:	7803      	ldrb	r3, [r0, #0]
   a80a0:	428b      	cmp	r3, r1
   a80a2:	d00b      	beq.n	a80bc <memchr+0x54>
   a80a4:	1905      	adds	r5, r0, r4
   a80a6:	1c43      	adds	r3, r0, #1
   a80a8:	e002      	b.n	a80b0 <memchr+0x48>
   a80aa:	7802      	ldrb	r2, [r0, #0]
   a80ac:	428a      	cmp	r2, r1
   a80ae:	d005      	beq.n	a80bc <memchr+0x54>
   a80b0:	42ab      	cmp	r3, r5
   a80b2:	4618      	mov	r0, r3
   a80b4:	f103 0301 	add.w	r3, r3, #1
   a80b8:	d1f7      	bne.n	a80aa <memchr+0x42>
   a80ba:	2000      	movs	r0, #0
   a80bc:	bc70      	pop	{r4, r5, r6}
   a80be:	4770      	bx	lr
   a80c0:	4620      	mov	r0, r4
   a80c2:	bc70      	pop	{r4, r5, r6}
   a80c4:	4770      	bx	lr
   a80c6:	4602      	mov	r2, r0
   a80c8:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
   a80cc:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   a80d0:	6813      	ldr	r3, [r2, #0]
   a80d2:	4610      	mov	r0, r2
   a80d4:	4073      	eors	r3, r6
   a80d6:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
   a80da:	ea25 0303 	bic.w	r3, r5, r3
   a80de:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   a80e2:	f102 0204 	add.w	r2, r2, #4
   a80e6:	d1d9      	bne.n	a809c <memchr+0x34>
   a80e8:	3c04      	subs	r4, #4
   a80ea:	2c03      	cmp	r4, #3
   a80ec:	4610      	mov	r0, r2
   a80ee:	d8ef      	bhi.n	a80d0 <memchr+0x68>
   a80f0:	e7d4      	b.n	a809c <memchr+0x34>
   a80f2:	4614      	mov	r4, r2
   a80f4:	e7d0      	b.n	a8098 <memchr+0x30>
   a80f6:	4610      	mov	r0, r2
   a80f8:	e7e0      	b.n	a80bc <memchr+0x54>
   a80fa:	bf00      	nop

000a80fc <memmove>:
   a80fc:	4288      	cmp	r0, r1
   a80fe:	b5f0      	push	{r4, r5, r6, r7, lr}
   a8100:	d90d      	bls.n	a811e <memmove+0x22>
   a8102:	188b      	adds	r3, r1, r2
   a8104:	4298      	cmp	r0, r3
   a8106:	d20a      	bcs.n	a811e <memmove+0x22>
   a8108:	1881      	adds	r1, r0, r2
   a810a:	2a00      	cmp	r2, #0
   a810c:	d054      	beq.n	a81b8 <memmove+0xbc>
   a810e:	1a9a      	subs	r2, r3, r2
   a8110:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   a8114:	4293      	cmp	r3, r2
   a8116:	f801 4d01 	strb.w	r4, [r1, #-1]!
   a811a:	d1f9      	bne.n	a8110 <memmove+0x14>
   a811c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   a811e:	2a0f      	cmp	r2, #15
   a8120:	d948      	bls.n	a81b4 <memmove+0xb8>
   a8122:	ea40 0301 	orr.w	r3, r0, r1
   a8126:	079b      	lsls	r3, r3, #30
   a8128:	d147      	bne.n	a81ba <memmove+0xbe>
   a812a:	4615      	mov	r5, r2
   a812c:	f100 0410 	add.w	r4, r0, #16
   a8130:	f101 0310 	add.w	r3, r1, #16
   a8134:	f853 6c10 	ldr.w	r6, [r3, #-16]
   a8138:	3d10      	subs	r5, #16
   a813a:	f844 6c10 	str.w	r6, [r4, #-16]
   a813e:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   a8142:	2d0f      	cmp	r5, #15
   a8144:	f844 6c0c 	str.w	r6, [r4, #-12]
   a8148:	f853 6c08 	ldr.w	r6, [r3, #-8]
   a814c:	f104 0410 	add.w	r4, r4, #16
   a8150:	f844 6c18 	str.w	r6, [r4, #-24]
   a8154:	f853 6c04 	ldr.w	r6, [r3, #-4]
   a8158:	f103 0310 	add.w	r3, r3, #16
   a815c:	f844 6c14 	str.w	r6, [r4, #-20]
   a8160:	d8e8      	bhi.n	a8134 <memmove+0x38>
   a8162:	f1a2 0310 	sub.w	r3, r2, #16
   a8166:	f023 030f 	bic.w	r3, r3, #15
   a816a:	f002 0e0f 	and.w	lr, r2, #15
   a816e:	3310      	adds	r3, #16
   a8170:	f1be 0f03 	cmp.w	lr, #3
   a8174:	4419      	add	r1, r3
   a8176:	4403      	add	r3, r0
   a8178:	d921      	bls.n	a81be <memmove+0xc2>
   a817a:	460e      	mov	r6, r1
   a817c:	4674      	mov	r4, lr
   a817e:	1f1d      	subs	r5, r3, #4
   a8180:	f856 7b04 	ldr.w	r7, [r6], #4
   a8184:	3c04      	subs	r4, #4
   a8186:	2c03      	cmp	r4, #3
   a8188:	f845 7f04 	str.w	r7, [r5, #4]!
   a818c:	d8f8      	bhi.n	a8180 <memmove+0x84>
   a818e:	f1ae 0404 	sub.w	r4, lr, #4
   a8192:	f024 0403 	bic.w	r4, r4, #3
   a8196:	3404      	adds	r4, #4
   a8198:	4423      	add	r3, r4
   a819a:	4421      	add	r1, r4
   a819c:	f002 0203 	and.w	r2, r2, #3
   a81a0:	b152      	cbz	r2, a81b8 <memmove+0xbc>
   a81a2:	3b01      	subs	r3, #1
   a81a4:	440a      	add	r2, r1
   a81a6:	f811 4b01 	ldrb.w	r4, [r1], #1
   a81aa:	4291      	cmp	r1, r2
   a81ac:	f803 4f01 	strb.w	r4, [r3, #1]!
   a81b0:	d1f9      	bne.n	a81a6 <memmove+0xaa>
   a81b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   a81b4:	4603      	mov	r3, r0
   a81b6:	e7f3      	b.n	a81a0 <memmove+0xa4>
   a81b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   a81ba:	4603      	mov	r3, r0
   a81bc:	e7f1      	b.n	a81a2 <memmove+0xa6>
   a81be:	4672      	mov	r2, lr
   a81c0:	e7ee      	b.n	a81a0 <memmove+0xa4>
   a81c2:	bf00      	nop

000a81c4 <__malloc_lock>:
   a81c4:	4770      	bx	lr
   a81c6:	bf00      	nop

000a81c8 <__malloc_unlock>:
   a81c8:	4770      	bx	lr
   a81ca:	bf00      	nop

000a81cc <_realloc_r>:
   a81cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   a81d0:	4617      	mov	r7, r2
   a81d2:	b083      	sub	sp, #12
   a81d4:	460d      	mov	r5, r1
   a81d6:	2900      	cmp	r1, #0
   a81d8:	f000 80e2 	beq.w	a83a0 <_realloc_r+0x1d4>
   a81dc:	4681      	mov	r9, r0
   a81de:	f107 040b 	add.w	r4, r7, #11
   a81e2:	f7ff ffef 	bl	a81c4 <__malloc_lock>
   a81e6:	f855 3c04 	ldr.w	r3, [r5, #-4]
   a81ea:	2c16      	cmp	r4, #22
   a81ec:	f023 0603 	bic.w	r6, r3, #3
   a81f0:	f1a5 0808 	sub.w	r8, r5, #8
   a81f4:	d84b      	bhi.n	a828e <_realloc_r+0xc2>
   a81f6:	2210      	movs	r2, #16
   a81f8:	4614      	mov	r4, r2
   a81fa:	42a7      	cmp	r7, r4
   a81fc:	d84c      	bhi.n	a8298 <_realloc_r+0xcc>
   a81fe:	4296      	cmp	r6, r2
   a8200:	da51      	bge.n	a82a6 <_realloc_r+0xda>
   a8202:	f8df b3a4 	ldr.w	fp, [pc, #932]	; a85a8 <_realloc_r+0x3dc>
   a8206:	eb08 0106 	add.w	r1, r8, r6
   a820a:	f8db 0008 	ldr.w	r0, [fp, #8]
   a820e:	4288      	cmp	r0, r1
   a8210:	f000 80d3 	beq.w	a83ba <_realloc_r+0x1ee>
   a8214:	6848      	ldr	r0, [r1, #4]
   a8216:	f020 0e01 	bic.w	lr, r0, #1
   a821a:	448e      	add	lr, r1
   a821c:	f8de e004 	ldr.w	lr, [lr, #4]
   a8220:	f01e 0f01 	tst.w	lr, #1
   a8224:	d154      	bne.n	a82d0 <_realloc_r+0x104>
   a8226:	f020 0003 	bic.w	r0, r0, #3
   a822a:	4430      	add	r0, r6
   a822c:	4290      	cmp	r0, r2
   a822e:	f280 80bd 	bge.w	a83ac <_realloc_r+0x1e0>
   a8232:	07db      	lsls	r3, r3, #31
   a8234:	f100 8090 	bmi.w	a8358 <_realloc_r+0x18c>
   a8238:	f855 3c08 	ldr.w	r3, [r5, #-8]
   a823c:	ebc3 0a08 	rsb	sl, r3, r8
   a8240:	f8da 3004 	ldr.w	r3, [sl, #4]
   a8244:	f023 0303 	bic.w	r3, r3, #3
   a8248:	eb00 0e03 	add.w	lr, r0, r3
   a824c:	4596      	cmp	lr, r2
   a824e:	db49      	blt.n	a82e4 <_realloc_r+0x118>
   a8250:	4657      	mov	r7, sl
   a8252:	68cb      	ldr	r3, [r1, #12]
   a8254:	6889      	ldr	r1, [r1, #8]
   a8256:	1f32      	subs	r2, r6, #4
   a8258:	60cb      	str	r3, [r1, #12]
   a825a:	6099      	str	r1, [r3, #8]
   a825c:	f857 1f08 	ldr.w	r1, [r7, #8]!
   a8260:	f8da 300c 	ldr.w	r3, [sl, #12]
   a8264:	2a24      	cmp	r2, #36	; 0x24
   a8266:	60cb      	str	r3, [r1, #12]
   a8268:	6099      	str	r1, [r3, #8]
   a826a:	f200 8133 	bhi.w	a84d4 <_realloc_r+0x308>
   a826e:	2a13      	cmp	r2, #19
   a8270:	f240 80fa 	bls.w	a8468 <_realloc_r+0x29c>
   a8274:	682b      	ldr	r3, [r5, #0]
   a8276:	2a1b      	cmp	r2, #27
   a8278:	f8ca 3008 	str.w	r3, [sl, #8]
   a827c:	686b      	ldr	r3, [r5, #4]
   a827e:	f8ca 300c 	str.w	r3, [sl, #12]
   a8282:	f200 813b 	bhi.w	a84fc <_realloc_r+0x330>
   a8286:	3508      	adds	r5, #8
   a8288:	f10a 0310 	add.w	r3, sl, #16
   a828c:	e0ed      	b.n	a846a <_realloc_r+0x29e>
   a828e:	f024 0407 	bic.w	r4, r4, #7
   a8292:	2c00      	cmp	r4, #0
   a8294:	4622      	mov	r2, r4
   a8296:	dab0      	bge.n	a81fa <_realloc_r+0x2e>
   a8298:	230c      	movs	r3, #12
   a829a:	2000      	movs	r0, #0
   a829c:	f8c9 3000 	str.w	r3, [r9]
   a82a0:	b003      	add	sp, #12
   a82a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   a82a6:	462f      	mov	r7, r5
   a82a8:	1b32      	subs	r2, r6, r4
   a82aa:	2a0f      	cmp	r2, #15
   a82ac:	f003 0301 	and.w	r3, r3, #1
   a82b0:	d840      	bhi.n	a8334 <_realloc_r+0x168>
   a82b2:	4333      	orrs	r3, r6
   a82b4:	f8c8 3004 	str.w	r3, [r8, #4]
   a82b8:	4446      	add	r6, r8
   a82ba:	6873      	ldr	r3, [r6, #4]
   a82bc:	f043 0301 	orr.w	r3, r3, #1
   a82c0:	6073      	str	r3, [r6, #4]
   a82c2:	4648      	mov	r0, r9
   a82c4:	f7ff ff80 	bl	a81c8 <__malloc_unlock>
   a82c8:	4638      	mov	r0, r7
   a82ca:	b003      	add	sp, #12
   a82cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   a82d0:	07d9      	lsls	r1, r3, #31
   a82d2:	d441      	bmi.n	a8358 <_realloc_r+0x18c>
   a82d4:	f855 3c08 	ldr.w	r3, [r5, #-8]
   a82d8:	ebc3 0a08 	rsb	sl, r3, r8
   a82dc:	f8da 3004 	ldr.w	r3, [sl, #4]
   a82e0:	f023 0303 	bic.w	r3, r3, #3
   a82e4:	4433      	add	r3, r6
   a82e6:	4293      	cmp	r3, r2
   a82e8:	db36      	blt.n	a8358 <_realloc_r+0x18c>
   a82ea:	4657      	mov	r7, sl
   a82ec:	f8da 100c 	ldr.w	r1, [sl, #12]
   a82f0:	f857 0f08 	ldr.w	r0, [r7, #8]!
   a82f4:	1f32      	subs	r2, r6, #4
   a82f6:	2a24      	cmp	r2, #36	; 0x24
   a82f8:	60c1      	str	r1, [r0, #12]
   a82fa:	6088      	str	r0, [r1, #8]
   a82fc:	f200 80f5 	bhi.w	a84ea <_realloc_r+0x31e>
   a8300:	2a13      	cmp	r2, #19
   a8302:	f240 80f0 	bls.w	a84e6 <_realloc_r+0x31a>
   a8306:	6829      	ldr	r1, [r5, #0]
   a8308:	2a1b      	cmp	r2, #27
   a830a:	f8ca 1008 	str.w	r1, [sl, #8]
   a830e:	6869      	ldr	r1, [r5, #4]
   a8310:	f8ca 100c 	str.w	r1, [sl, #12]
   a8314:	f200 8107 	bhi.w	a8526 <_realloc_r+0x35a>
   a8318:	3508      	adds	r5, #8
   a831a:	f10a 0210 	add.w	r2, sl, #16
   a831e:	6829      	ldr	r1, [r5, #0]
   a8320:	461e      	mov	r6, r3
   a8322:	6011      	str	r1, [r2, #0]
   a8324:	6869      	ldr	r1, [r5, #4]
   a8326:	46d0      	mov	r8, sl
   a8328:	6051      	str	r1, [r2, #4]
   a832a:	68ab      	ldr	r3, [r5, #8]
   a832c:	6093      	str	r3, [r2, #8]
   a832e:	f8da 3004 	ldr.w	r3, [sl, #4]
   a8332:	e7b9      	b.n	a82a8 <_realloc_r+0xdc>
   a8334:	eb08 0104 	add.w	r1, r8, r4
   a8338:	4323      	orrs	r3, r4
   a833a:	f042 0001 	orr.w	r0, r2, #1
   a833e:	f8c8 3004 	str.w	r3, [r8, #4]
   a8342:	440a      	add	r2, r1
   a8344:	6048      	str	r0, [r1, #4]
   a8346:	6853      	ldr	r3, [r2, #4]
   a8348:	3108      	adds	r1, #8
   a834a:	f043 0301 	orr.w	r3, r3, #1
   a834e:	6053      	str	r3, [r2, #4]
   a8350:	4648      	mov	r0, r9
   a8352:	f7ff f8fb 	bl	a754c <_free_r>
   a8356:	e7b4      	b.n	a82c2 <_realloc_r+0xf6>
   a8358:	4639      	mov	r1, r7
   a835a:	4648      	mov	r0, r9
   a835c:	f7ff fbfe 	bl	a7b5c <_malloc_r>
   a8360:	4607      	mov	r7, r0
   a8362:	2800      	cmp	r0, #0
   a8364:	d0ad      	beq.n	a82c2 <_realloc_r+0xf6>
   a8366:	f855 3c04 	ldr.w	r3, [r5, #-4]
   a836a:	f1a0 0108 	sub.w	r1, r0, #8
   a836e:	f023 0201 	bic.w	r2, r3, #1
   a8372:	4442      	add	r2, r8
   a8374:	4291      	cmp	r1, r2
   a8376:	f000 80a6 	beq.w	a84c6 <_realloc_r+0x2fa>
   a837a:	1f32      	subs	r2, r6, #4
   a837c:	2a24      	cmp	r2, #36	; 0x24
   a837e:	f200 8093 	bhi.w	a84a8 <_realloc_r+0x2dc>
   a8382:	2a13      	cmp	r2, #19
   a8384:	d865      	bhi.n	a8452 <_realloc_r+0x286>
   a8386:	4603      	mov	r3, r0
   a8388:	462a      	mov	r2, r5
   a838a:	6811      	ldr	r1, [r2, #0]
   a838c:	6019      	str	r1, [r3, #0]
   a838e:	6851      	ldr	r1, [r2, #4]
   a8390:	6059      	str	r1, [r3, #4]
   a8392:	6892      	ldr	r2, [r2, #8]
   a8394:	609a      	str	r2, [r3, #8]
   a8396:	4629      	mov	r1, r5
   a8398:	4648      	mov	r0, r9
   a839a:	f7ff f8d7 	bl	a754c <_free_r>
   a839e:	e790      	b.n	a82c2 <_realloc_r+0xf6>
   a83a0:	4611      	mov	r1, r2
   a83a2:	b003      	add	sp, #12
   a83a4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   a83a8:	f7ff bbd8 	b.w	a7b5c <_malloc_r>
   a83ac:	68ca      	ldr	r2, [r1, #12]
   a83ae:	6889      	ldr	r1, [r1, #8]
   a83b0:	462f      	mov	r7, r5
   a83b2:	60ca      	str	r2, [r1, #12]
   a83b4:	4606      	mov	r6, r0
   a83b6:	6091      	str	r1, [r2, #8]
   a83b8:	e776      	b.n	a82a8 <_realloc_r+0xdc>
   a83ba:	6841      	ldr	r1, [r0, #4]
   a83bc:	f104 0010 	add.w	r0, r4, #16
   a83c0:	f021 0103 	bic.w	r1, r1, #3
   a83c4:	4431      	add	r1, r6
   a83c6:	4281      	cmp	r1, r0
   a83c8:	da5a      	bge.n	a8480 <_realloc_r+0x2b4>
   a83ca:	07db      	lsls	r3, r3, #31
   a83cc:	d4c4      	bmi.n	a8358 <_realloc_r+0x18c>
   a83ce:	f855 3c08 	ldr.w	r3, [r5, #-8]
   a83d2:	ebc3 0a08 	rsb	sl, r3, r8
   a83d6:	f8da 3004 	ldr.w	r3, [sl, #4]
   a83da:	f023 0303 	bic.w	r3, r3, #3
   a83de:	eb01 0c03 	add.w	ip, r1, r3
   a83e2:	4560      	cmp	r0, ip
   a83e4:	f73f af7e 	bgt.w	a82e4 <_realloc_r+0x118>
   a83e8:	4657      	mov	r7, sl
   a83ea:	f8da 300c 	ldr.w	r3, [sl, #12]
   a83ee:	f857 1f08 	ldr.w	r1, [r7, #8]!
   a83f2:	1f32      	subs	r2, r6, #4
   a83f4:	2a24      	cmp	r2, #36	; 0x24
   a83f6:	60cb      	str	r3, [r1, #12]
   a83f8:	6099      	str	r1, [r3, #8]
   a83fa:	f200 80b6 	bhi.w	a856a <_realloc_r+0x39e>
   a83fe:	2a13      	cmp	r2, #19
   a8400:	f240 80a7 	bls.w	a8552 <_realloc_r+0x386>
   a8404:	682b      	ldr	r3, [r5, #0]
   a8406:	2a1b      	cmp	r2, #27
   a8408:	f8ca 3008 	str.w	r3, [sl, #8]
   a840c:	686b      	ldr	r3, [r5, #4]
   a840e:	f8ca 300c 	str.w	r3, [sl, #12]
   a8412:	f200 80b3 	bhi.w	a857c <_realloc_r+0x3b0>
   a8416:	3508      	adds	r5, #8
   a8418:	f10a 0310 	add.w	r3, sl, #16
   a841c:	682a      	ldr	r2, [r5, #0]
   a841e:	601a      	str	r2, [r3, #0]
   a8420:	686a      	ldr	r2, [r5, #4]
   a8422:	605a      	str	r2, [r3, #4]
   a8424:	68aa      	ldr	r2, [r5, #8]
   a8426:	609a      	str	r2, [r3, #8]
   a8428:	ebc4 030c 	rsb	r3, r4, ip
   a842c:	eb0a 0204 	add.w	r2, sl, r4
   a8430:	f043 0301 	orr.w	r3, r3, #1
   a8434:	f8cb 2008 	str.w	r2, [fp, #8]
   a8438:	6053      	str	r3, [r2, #4]
   a843a:	f8da 3004 	ldr.w	r3, [sl, #4]
   a843e:	4648      	mov	r0, r9
   a8440:	f003 0301 	and.w	r3, r3, #1
   a8444:	431c      	orrs	r4, r3
   a8446:	f8ca 4004 	str.w	r4, [sl, #4]
   a844a:	f7ff febd 	bl	a81c8 <__malloc_unlock>
   a844e:	4638      	mov	r0, r7
   a8450:	e73b      	b.n	a82ca <_realloc_r+0xfe>
   a8452:	682b      	ldr	r3, [r5, #0]
   a8454:	2a1b      	cmp	r2, #27
   a8456:	6003      	str	r3, [r0, #0]
   a8458:	686b      	ldr	r3, [r5, #4]
   a845a:	6043      	str	r3, [r0, #4]
   a845c:	d828      	bhi.n	a84b0 <_realloc_r+0x2e4>
   a845e:	f100 0308 	add.w	r3, r0, #8
   a8462:	f105 0208 	add.w	r2, r5, #8
   a8466:	e790      	b.n	a838a <_realloc_r+0x1be>
   a8468:	463b      	mov	r3, r7
   a846a:	682a      	ldr	r2, [r5, #0]
   a846c:	4676      	mov	r6, lr
   a846e:	601a      	str	r2, [r3, #0]
   a8470:	686a      	ldr	r2, [r5, #4]
   a8472:	46d0      	mov	r8, sl
   a8474:	605a      	str	r2, [r3, #4]
   a8476:	68aa      	ldr	r2, [r5, #8]
   a8478:	609a      	str	r2, [r3, #8]
   a847a:	f8da 3004 	ldr.w	r3, [sl, #4]
   a847e:	e713      	b.n	a82a8 <_realloc_r+0xdc>
   a8480:	1b0b      	subs	r3, r1, r4
   a8482:	eb08 0204 	add.w	r2, r8, r4
   a8486:	f043 0301 	orr.w	r3, r3, #1
   a848a:	f8cb 2008 	str.w	r2, [fp, #8]
   a848e:	6053      	str	r3, [r2, #4]
   a8490:	f855 3c04 	ldr.w	r3, [r5, #-4]
   a8494:	4648      	mov	r0, r9
   a8496:	f003 0301 	and.w	r3, r3, #1
   a849a:	431c      	orrs	r4, r3
   a849c:	f845 4c04 	str.w	r4, [r5, #-4]
   a84a0:	f7ff fe92 	bl	a81c8 <__malloc_unlock>
   a84a4:	4628      	mov	r0, r5
   a84a6:	e710      	b.n	a82ca <_realloc_r+0xfe>
   a84a8:	4629      	mov	r1, r5
   a84aa:	f7ff fe27 	bl	a80fc <memmove>
   a84ae:	e772      	b.n	a8396 <_realloc_r+0x1ca>
   a84b0:	68ab      	ldr	r3, [r5, #8]
   a84b2:	2a24      	cmp	r2, #36	; 0x24
   a84b4:	6083      	str	r3, [r0, #8]
   a84b6:	68eb      	ldr	r3, [r5, #12]
   a84b8:	60c3      	str	r3, [r0, #12]
   a84ba:	d02b      	beq.n	a8514 <_realloc_r+0x348>
   a84bc:	f100 0310 	add.w	r3, r0, #16
   a84c0:	f105 0210 	add.w	r2, r5, #16
   a84c4:	e761      	b.n	a838a <_realloc_r+0x1be>
   a84c6:	f850 2c04 	ldr.w	r2, [r0, #-4]
   a84ca:	462f      	mov	r7, r5
   a84cc:	f022 0203 	bic.w	r2, r2, #3
   a84d0:	4416      	add	r6, r2
   a84d2:	e6e9      	b.n	a82a8 <_realloc_r+0xdc>
   a84d4:	4629      	mov	r1, r5
   a84d6:	4638      	mov	r0, r7
   a84d8:	4676      	mov	r6, lr
   a84da:	46d0      	mov	r8, sl
   a84dc:	f7ff fe0e 	bl	a80fc <memmove>
   a84e0:	f8da 3004 	ldr.w	r3, [sl, #4]
   a84e4:	e6e0      	b.n	a82a8 <_realloc_r+0xdc>
   a84e6:	463a      	mov	r2, r7
   a84e8:	e719      	b.n	a831e <_realloc_r+0x152>
   a84ea:	4629      	mov	r1, r5
   a84ec:	4638      	mov	r0, r7
   a84ee:	461e      	mov	r6, r3
   a84f0:	46d0      	mov	r8, sl
   a84f2:	f7ff fe03 	bl	a80fc <memmove>
   a84f6:	f8da 3004 	ldr.w	r3, [sl, #4]
   a84fa:	e6d5      	b.n	a82a8 <_realloc_r+0xdc>
   a84fc:	68ab      	ldr	r3, [r5, #8]
   a84fe:	2a24      	cmp	r2, #36	; 0x24
   a8500:	f8ca 3010 	str.w	r3, [sl, #16]
   a8504:	68eb      	ldr	r3, [r5, #12]
   a8506:	f8ca 3014 	str.w	r3, [sl, #20]
   a850a:	d018      	beq.n	a853e <_realloc_r+0x372>
   a850c:	3510      	adds	r5, #16
   a850e:	f10a 0318 	add.w	r3, sl, #24
   a8512:	e7aa      	b.n	a846a <_realloc_r+0x29e>
   a8514:	692a      	ldr	r2, [r5, #16]
   a8516:	f100 0318 	add.w	r3, r0, #24
   a851a:	6102      	str	r2, [r0, #16]
   a851c:	6969      	ldr	r1, [r5, #20]
   a851e:	f105 0218 	add.w	r2, r5, #24
   a8522:	6141      	str	r1, [r0, #20]
   a8524:	e731      	b.n	a838a <_realloc_r+0x1be>
   a8526:	68a9      	ldr	r1, [r5, #8]
   a8528:	2a24      	cmp	r2, #36	; 0x24
   a852a:	f8ca 1010 	str.w	r1, [sl, #16]
   a852e:	68e9      	ldr	r1, [r5, #12]
   a8530:	f8ca 1014 	str.w	r1, [sl, #20]
   a8534:	d00f      	beq.n	a8556 <_realloc_r+0x38a>
   a8536:	3510      	adds	r5, #16
   a8538:	f10a 0218 	add.w	r2, sl, #24
   a853c:	e6ef      	b.n	a831e <_realloc_r+0x152>
   a853e:	692a      	ldr	r2, [r5, #16]
   a8540:	f10a 0320 	add.w	r3, sl, #32
   a8544:	f8ca 2018 	str.w	r2, [sl, #24]
   a8548:	696a      	ldr	r2, [r5, #20]
   a854a:	3518      	adds	r5, #24
   a854c:	f8ca 201c 	str.w	r2, [sl, #28]
   a8550:	e78b      	b.n	a846a <_realloc_r+0x29e>
   a8552:	463b      	mov	r3, r7
   a8554:	e762      	b.n	a841c <_realloc_r+0x250>
   a8556:	6929      	ldr	r1, [r5, #16]
   a8558:	f10a 0220 	add.w	r2, sl, #32
   a855c:	f8ca 1018 	str.w	r1, [sl, #24]
   a8560:	6969      	ldr	r1, [r5, #20]
   a8562:	3518      	adds	r5, #24
   a8564:	f8ca 101c 	str.w	r1, [sl, #28]
   a8568:	e6d9      	b.n	a831e <_realloc_r+0x152>
   a856a:	4629      	mov	r1, r5
   a856c:	4638      	mov	r0, r7
   a856e:	f8cd c004 	str.w	ip, [sp, #4]
   a8572:	f7ff fdc3 	bl	a80fc <memmove>
   a8576:	f8dd c004 	ldr.w	ip, [sp, #4]
   a857a:	e755      	b.n	a8428 <_realloc_r+0x25c>
   a857c:	68ab      	ldr	r3, [r5, #8]
   a857e:	2a24      	cmp	r2, #36	; 0x24
   a8580:	f8ca 3010 	str.w	r3, [sl, #16]
   a8584:	68eb      	ldr	r3, [r5, #12]
   a8586:	f8ca 3014 	str.w	r3, [sl, #20]
   a858a:	d003      	beq.n	a8594 <_realloc_r+0x3c8>
   a858c:	3510      	adds	r5, #16
   a858e:	f10a 0318 	add.w	r3, sl, #24
   a8592:	e743      	b.n	a841c <_realloc_r+0x250>
   a8594:	692a      	ldr	r2, [r5, #16]
   a8596:	f10a 0320 	add.w	r3, sl, #32
   a859a:	f8ca 2018 	str.w	r2, [sl, #24]
   a859e:	696a      	ldr	r2, [r5, #20]
   a85a0:	3518      	adds	r5, #24
   a85a2:	f8ca 201c 	str.w	r2, [sl, #28]
   a85a6:	e739      	b.n	a841c <_realloc_r+0x250>
   a85a8:	200711f4 	.word	0x200711f4

000a85ac <_sbrk_r>:
   a85ac:	b538      	push	{r3, r4, r5, lr}
   a85ae:	4c07      	ldr	r4, [pc, #28]	; (a85cc <_sbrk_r+0x20>)
   a85b0:	2300      	movs	r3, #0
   a85b2:	4605      	mov	r5, r0
   a85b4:	4608      	mov	r0, r1
   a85b6:	6023      	str	r3, [r4, #0]
   a85b8:	f7f3 f81c 	bl	9b5f4 <_sbrk>
   a85bc:	1c43      	adds	r3, r0, #1
   a85be:	d000      	beq.n	a85c2 <_sbrk_r+0x16>
   a85c0:	bd38      	pop	{r3, r4, r5, pc}
   a85c2:	6823      	ldr	r3, [r4, #0]
   a85c4:	2b00      	cmp	r3, #0
   a85c6:	d0fb      	beq.n	a85c0 <_sbrk_r+0x14>
   a85c8:	602b      	str	r3, [r5, #0]
   a85ca:	bd38      	pop	{r3, r4, r5, pc}
   a85cc:	20072830 	.word	0x20072830

000a85d0 <__sread>:
   a85d0:	b510      	push	{r4, lr}
   a85d2:	460c      	mov	r4, r1
   a85d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   a85d8:	f000 f930 	bl	a883c <_read_r>
   a85dc:	2800      	cmp	r0, #0
   a85de:	db03      	blt.n	a85e8 <__sread+0x18>
   a85e0:	6d23      	ldr	r3, [r4, #80]	; 0x50
   a85e2:	4403      	add	r3, r0
   a85e4:	6523      	str	r3, [r4, #80]	; 0x50
   a85e6:	bd10      	pop	{r4, pc}
   a85e8:	89a3      	ldrh	r3, [r4, #12]
   a85ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   a85ee:	81a3      	strh	r3, [r4, #12]
   a85f0:	bd10      	pop	{r4, pc}
   a85f2:	bf00      	nop

000a85f4 <__swrite>:
   a85f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   a85f8:	460c      	mov	r4, r1
   a85fa:	8989      	ldrh	r1, [r1, #12]
   a85fc:	461d      	mov	r5, r3
   a85fe:	05cb      	lsls	r3, r1, #23
   a8600:	4616      	mov	r6, r2
   a8602:	4607      	mov	r7, r0
   a8604:	d506      	bpl.n	a8614 <__swrite+0x20>
   a8606:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   a860a:	2200      	movs	r2, #0
   a860c:	2302      	movs	r3, #2
   a860e:	f000 f901 	bl	a8814 <_lseek_r>
   a8612:	89a1      	ldrh	r1, [r4, #12]
   a8614:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   a8618:	81a1      	strh	r1, [r4, #12]
   a861a:	4638      	mov	r0, r7
   a861c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   a8620:	4632      	mov	r2, r6
   a8622:	462b      	mov	r3, r5
   a8624:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   a8628:	f000 b814 	b.w	a8654 <_write_r>

000a862c <__sseek>:
   a862c:	b510      	push	{r4, lr}
   a862e:	460c      	mov	r4, r1
   a8630:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   a8634:	f000 f8ee 	bl	a8814 <_lseek_r>
   a8638:	89a3      	ldrh	r3, [r4, #12]
   a863a:	1c42      	adds	r2, r0, #1
   a863c:	bf0e      	itee	eq
   a863e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   a8642:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   a8646:	6520      	strne	r0, [r4, #80]	; 0x50
   a8648:	81a3      	strh	r3, [r4, #12]
   a864a:	bd10      	pop	{r4, pc}

000a864c <__sclose>:
   a864c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   a8650:	f000 b866 	b.w	a8720 <_close_r>

000a8654 <_write_r>:
   a8654:	b570      	push	{r4, r5, r6, lr}
   a8656:	4c08      	ldr	r4, [pc, #32]	; (a8678 <_write_r+0x24>)
   a8658:	4606      	mov	r6, r0
   a865a:	2500      	movs	r5, #0
   a865c:	4608      	mov	r0, r1
   a865e:	4611      	mov	r1, r2
   a8660:	461a      	mov	r2, r3
   a8662:	6025      	str	r5, [r4, #0]
   a8664:	f7f1 ffc6 	bl	9a5f4 <_write>
   a8668:	1c43      	adds	r3, r0, #1
   a866a:	d000      	beq.n	a866e <_write_r+0x1a>
   a866c:	bd70      	pop	{r4, r5, r6, pc}
   a866e:	6823      	ldr	r3, [r4, #0]
   a8670:	2b00      	cmp	r3, #0
   a8672:	d0fb      	beq.n	a866c <_write_r+0x18>
   a8674:	6033      	str	r3, [r6, #0]
   a8676:	bd70      	pop	{r4, r5, r6, pc}
   a8678:	20072830 	.word	0x20072830

000a867c <__register_exitproc>:
   a867c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   a8680:	4c25      	ldr	r4, [pc, #148]	; (a8718 <__register_exitproc+0x9c>)
   a8682:	4606      	mov	r6, r0
   a8684:	6825      	ldr	r5, [r4, #0]
   a8686:	4688      	mov	r8, r1
   a8688:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
   a868c:	4692      	mov	sl, r2
   a868e:	4699      	mov	r9, r3
   a8690:	b3c4      	cbz	r4, a8704 <__register_exitproc+0x88>
   a8692:	6860      	ldr	r0, [r4, #4]
   a8694:	281f      	cmp	r0, #31
   a8696:	dc17      	bgt.n	a86c8 <__register_exitproc+0x4c>
   a8698:	1c41      	adds	r1, r0, #1
   a869a:	b176      	cbz	r6, a86ba <__register_exitproc+0x3e>
   a869c:	eb04 0380 	add.w	r3, r4, r0, lsl #2
   a86a0:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
   a86a4:	f8d4 5188 	ldr.w	r5, [r4, #392]	; 0x188
   a86a8:	2201      	movs	r2, #1
   a86aa:	4082      	lsls	r2, r0
   a86ac:	4315      	orrs	r5, r2
   a86ae:	2e02      	cmp	r6, #2
   a86b0:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
   a86b4:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
   a86b8:	d01e      	beq.n	a86f8 <__register_exitproc+0x7c>
   a86ba:	1c83      	adds	r3, r0, #2
   a86bc:	6061      	str	r1, [r4, #4]
   a86be:	2000      	movs	r0, #0
   a86c0:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
   a86c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   a86c8:	4b14      	ldr	r3, [pc, #80]	; (a871c <__register_exitproc+0xa0>)
   a86ca:	b303      	cbz	r3, a870e <__register_exitproc+0x92>
   a86cc:	f44f 70c8 	mov.w	r0, #400	; 0x190
   a86d0:	f7ff fa3c 	bl	a7b4c <malloc>
   a86d4:	4604      	mov	r4, r0
   a86d6:	b1d0      	cbz	r0, a870e <__register_exitproc+0x92>
   a86d8:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
   a86dc:	2700      	movs	r7, #0
   a86de:	e884 0088 	stmia.w	r4, {r3, r7}
   a86e2:	4638      	mov	r0, r7
   a86e4:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   a86e8:	2101      	movs	r1, #1
   a86ea:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
   a86ee:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
   a86f2:	2e00      	cmp	r6, #0
   a86f4:	d0e1      	beq.n	a86ba <__register_exitproc+0x3e>
   a86f6:	e7d1      	b.n	a869c <__register_exitproc+0x20>
   a86f8:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   a86fc:	431a      	orrs	r2, r3
   a86fe:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   a8702:	e7da      	b.n	a86ba <__register_exitproc+0x3e>
   a8704:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
   a8708:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   a870c:	e7c1      	b.n	a8692 <__register_exitproc+0x16>
   a870e:	f04f 30ff 	mov.w	r0, #4294967295
   a8712:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   a8716:	bf00      	nop
   a8718:	000a8db0 	.word	0x000a8db0
   a871c:	000a7b4d 	.word	0x000a7b4d

000a8720 <_close_r>:
   a8720:	b538      	push	{r3, r4, r5, lr}
   a8722:	4c07      	ldr	r4, [pc, #28]	; (a8740 <_close_r+0x20>)
   a8724:	2300      	movs	r3, #0
   a8726:	4605      	mov	r5, r0
   a8728:	4608      	mov	r0, r1
   a872a:	6023      	str	r3, [r4, #0]
   a872c:	f7f2 ff82 	bl	9b634 <_close>
   a8730:	1c43      	adds	r3, r0, #1
   a8732:	d000      	beq.n	a8736 <_close_r+0x16>
   a8734:	bd38      	pop	{r3, r4, r5, pc}
   a8736:	6823      	ldr	r3, [r4, #0]
   a8738:	2b00      	cmp	r3, #0
   a873a:	d0fb      	beq.n	a8734 <_close_r+0x14>
   a873c:	602b      	str	r3, [r5, #0]
   a873e:	bd38      	pop	{r3, r4, r5, pc}
   a8740:	20072830 	.word	0x20072830

000a8744 <_fclose_r>:
   a8744:	2900      	cmp	r1, #0
   a8746:	d03d      	beq.n	a87c4 <_fclose_r+0x80>
   a8748:	b570      	push	{r4, r5, r6, lr}
   a874a:	4605      	mov	r5, r0
   a874c:	460c      	mov	r4, r1
   a874e:	b108      	cbz	r0, a8754 <_fclose_r+0x10>
   a8750:	6b83      	ldr	r3, [r0, #56]	; 0x38
   a8752:	b37b      	cbz	r3, a87b4 <_fclose_r+0x70>
   a8754:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   a8758:	b90b      	cbnz	r3, a875e <_fclose_r+0x1a>
   a875a:	2000      	movs	r0, #0
   a875c:	bd70      	pop	{r4, r5, r6, pc}
   a875e:	4628      	mov	r0, r5
   a8760:	4621      	mov	r1, r4
   a8762:	f7fe fd4d 	bl	a7200 <__sflush_r>
   a8766:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   a8768:	4606      	mov	r6, r0
   a876a:	b133      	cbz	r3, a877a <_fclose_r+0x36>
   a876c:	4628      	mov	r0, r5
   a876e:	69e1      	ldr	r1, [r4, #28]
   a8770:	4798      	blx	r3
   a8772:	2800      	cmp	r0, #0
   a8774:	bfb8      	it	lt
   a8776:	f04f 36ff 	movlt.w	r6, #4294967295
   a877a:	89a3      	ldrh	r3, [r4, #12]
   a877c:	061b      	lsls	r3, r3, #24
   a877e:	d41c      	bmi.n	a87ba <_fclose_r+0x76>
   a8780:	6b21      	ldr	r1, [r4, #48]	; 0x30
   a8782:	b141      	cbz	r1, a8796 <_fclose_r+0x52>
   a8784:	f104 0340 	add.w	r3, r4, #64	; 0x40
   a8788:	4299      	cmp	r1, r3
   a878a:	d002      	beq.n	a8792 <_fclose_r+0x4e>
   a878c:	4628      	mov	r0, r5
   a878e:	f7fe fedd 	bl	a754c <_free_r>
   a8792:	2300      	movs	r3, #0
   a8794:	6323      	str	r3, [r4, #48]	; 0x30
   a8796:	6c61      	ldr	r1, [r4, #68]	; 0x44
   a8798:	b121      	cbz	r1, a87a4 <_fclose_r+0x60>
   a879a:	4628      	mov	r0, r5
   a879c:	f7fe fed6 	bl	a754c <_free_r>
   a87a0:	2300      	movs	r3, #0
   a87a2:	6463      	str	r3, [r4, #68]	; 0x44
   a87a4:	f7fe fe6a 	bl	a747c <__sfp_lock_acquire>
   a87a8:	2300      	movs	r3, #0
   a87aa:	81a3      	strh	r3, [r4, #12]
   a87ac:	f7fe fe68 	bl	a7480 <__sfp_lock_release>
   a87b0:	4630      	mov	r0, r6
   a87b2:	bd70      	pop	{r4, r5, r6, pc}
   a87b4:	f7fe fe5c 	bl	a7470 <__sinit>
   a87b8:	e7cc      	b.n	a8754 <_fclose_r+0x10>
   a87ba:	4628      	mov	r0, r5
   a87bc:	6921      	ldr	r1, [r4, #16]
   a87be:	f7fe fec5 	bl	a754c <_free_r>
   a87c2:	e7dd      	b.n	a8780 <_fclose_r+0x3c>
   a87c4:	2000      	movs	r0, #0
   a87c6:	4770      	bx	lr

000a87c8 <_fstat_r>:
   a87c8:	b538      	push	{r3, r4, r5, lr}
   a87ca:	4c08      	ldr	r4, [pc, #32]	; (a87ec <_fstat_r+0x24>)
   a87cc:	2300      	movs	r3, #0
   a87ce:	4605      	mov	r5, r0
   a87d0:	4608      	mov	r0, r1
   a87d2:	4611      	mov	r1, r2
   a87d4:	6023      	str	r3, [r4, #0]
   a87d6:	f7f2 ff39 	bl	9b64c <_fstat>
   a87da:	1c43      	adds	r3, r0, #1
   a87dc:	d000      	beq.n	a87e0 <_fstat_r+0x18>
   a87de:	bd38      	pop	{r3, r4, r5, pc}
   a87e0:	6823      	ldr	r3, [r4, #0]
   a87e2:	2b00      	cmp	r3, #0
   a87e4:	d0fb      	beq.n	a87de <_fstat_r+0x16>
   a87e6:	602b      	str	r3, [r5, #0]
   a87e8:	bd38      	pop	{r3, r4, r5, pc}
   a87ea:	bf00      	nop
   a87ec:	20072830 	.word	0x20072830

000a87f0 <_isatty_r>:
   a87f0:	b538      	push	{r3, r4, r5, lr}
   a87f2:	4c07      	ldr	r4, [pc, #28]	; (a8810 <_isatty_r+0x20>)
   a87f4:	2300      	movs	r3, #0
   a87f6:	4605      	mov	r5, r0
   a87f8:	4608      	mov	r0, r1
   a87fa:	6023      	str	r3, [r4, #0]
   a87fc:	f7f2 ff36 	bl	9b66c <_isatty>
   a8800:	1c43      	adds	r3, r0, #1
   a8802:	d000      	beq.n	a8806 <_isatty_r+0x16>
   a8804:	bd38      	pop	{r3, r4, r5, pc}
   a8806:	6823      	ldr	r3, [r4, #0]
   a8808:	2b00      	cmp	r3, #0
   a880a:	d0fb      	beq.n	a8804 <_isatty_r+0x14>
   a880c:	602b      	str	r3, [r5, #0]
   a880e:	bd38      	pop	{r3, r4, r5, pc}
   a8810:	20072830 	.word	0x20072830

000a8814 <_lseek_r>:
   a8814:	b570      	push	{r4, r5, r6, lr}
   a8816:	4c08      	ldr	r4, [pc, #32]	; (a8838 <_lseek_r+0x24>)
   a8818:	4606      	mov	r6, r0
   a881a:	2500      	movs	r5, #0
   a881c:	4608      	mov	r0, r1
   a881e:	4611      	mov	r1, r2
   a8820:	461a      	mov	r2, r3
   a8822:	6025      	str	r5, [r4, #0]
   a8824:	f7f2 ff2e 	bl	9b684 <_lseek>
   a8828:	1c43      	adds	r3, r0, #1
   a882a:	d000      	beq.n	a882e <_lseek_r+0x1a>
   a882c:	bd70      	pop	{r4, r5, r6, pc}
   a882e:	6823      	ldr	r3, [r4, #0]
   a8830:	2b00      	cmp	r3, #0
   a8832:	d0fb      	beq.n	a882c <_lseek_r+0x18>
   a8834:	6033      	str	r3, [r6, #0]
   a8836:	bd70      	pop	{r4, r5, r6, pc}
   a8838:	20072830 	.word	0x20072830

000a883c <_read_r>:
   a883c:	b570      	push	{r4, r5, r6, lr}
   a883e:	4c08      	ldr	r4, [pc, #32]	; (a8860 <_read_r+0x24>)
   a8840:	4606      	mov	r6, r0
   a8842:	2500      	movs	r5, #0
   a8844:	4608      	mov	r0, r1
   a8846:	4611      	mov	r1, r2
   a8848:	461a      	mov	r2, r3
   a884a:	6025      	str	r5, [r4, #0]
   a884c:	f7f1 fea6 	bl	9a59c <_read>
   a8850:	1c43      	adds	r3, r0, #1
   a8852:	d000      	beq.n	a8856 <_read_r+0x1a>
   a8854:	bd70      	pop	{r4, r5, r6, pc}
   a8856:	6823      	ldr	r3, [r4, #0]
   a8858:	2b00      	cmp	r3, #0
   a885a:	d0fb      	beq.n	a8854 <_read_r+0x18>
   a885c:	6033      	str	r3, [r6, #0]
   a885e:	bd70      	pop	{r4, r5, r6, pc}
   a8860:	20072830 	.word	0x20072830
   a8864:	54534554 	.word	0x54534554
   a8868:	00315350 	.word	0x00315350
   a886c:	54534554 	.word	0x54534554
   a8870:	00325350 	.word	0x00325350
   a8874:	54534554 	.word	0x54534554
   a8878:	00335350 	.word	0x00335350
   a887c:	54534554 	.word	0x54534554
   a8880:	00545041 	.word	0x00545041
   a8884:	54534554 	.word	0x54534554
   a8888:	00003154 	.word	0x00003154
   a888c:	54534554 	.word	0x54534554
   a8890:	00003254 	.word	0x00003254
   a8894:	54534554 	.word	0x54534554
   a8898:	444e4f43 	.word	0x444e4f43
   a889c:	00000000 	.word	0x00000000
   a88a0:	45544544 	.word	0x45544544
   a88a4:	4c5f5443 	.word	0x4c5f5443
   a88a8:	0000574f 	.word	0x0000574f
   a88ac:	48545056 	.word	0x48545056
   a88b0:	00484749 	.word	0x00484749
   a88b4:	4f4f4c42 	.word	0x4f4f4c42
   a88b8:	4c445f44 	.word	0x4c445f44
   a88bc:	00000000 	.word	0x00000000
   a88c0:	00545041 	.word	0x00545041
   a88c4:	45544e45 	.word	0x45544e45
   a88c8:	00325f52 	.word	0x00325f52
   a88cc:	45544e45 	.word	0x45544e45
   a88d0:	00335f52 	.word	0x00335f52
   a88d4:	45544e45 	.word	0x45544e45
   a88d8:	00345f52 	.word	0x00345f52
   a88dc:	00303035 	.word	0x00303035
   a88e0:	41505942 	.word	0x41505942
   a88e4:	00005353 	.word	0x00005353
   a88e8:	4d495250 	.word	0x4d495250
   a88ec:	00003245 	.word	0x00003245
   a88f0:	52494352 	.word	0x52494352
   a88f4:	00003243 	.word	0x00003243
   a88f8:	4f5f4548 	.word	0x4f5f4548
   a88fc:	0000004e 	.word	0x0000004e
   a8900:	4f5f4548 	.word	0x4f5f4548
   a8904:	00004646 	.word	0x00004646
   a8908:	4f5f5046 	.word	0x4f5f5046
   a890c:	0000004e 	.word	0x0000004e
   a8910:	4f5f5046 	.word	0x4f5f5046
   a8914:	00004646 	.word	0x00004646
   a8918:	505f5343 	.word	0x505f5343
   a891c:	535f544f 	.word	0x535f544f
   a8920:	00005445 	.word	0x00005445
   a8924:	525f5046 	.word	0x525f5046
   a8928:	00455441 	.word	0x00455441
   a892c:	465f5046 	.word	0x465f5046
   a8930:	00005152 	.word	0x00005152
   a8934:	5f504744 	.word	0x5f504744
   a8938:	00004e4f 	.word	0x00004e4f
   a893c:	5f504744 	.word	0x5f504744
   a8940:	0046464f 	.word	0x0046464f
   a8944:	5f504744 	.word	0x5f504744
   a8948:	45544152 	.word	0x45544152
   a894c:	00000000 	.word	0x00000000
   a8950:	5f504744 	.word	0x5f504744
   a8954:	00515246 	.word	0x00515246
   a8958:	545f5350 	.word	0x545f5350
   a895c:	00000000 	.word	0x00000000
   a8960:	5f504655 	.word	0x5f504655
   a8964:	0046464f 	.word	0x0046464f
   a8968:	5f504655 	.word	0x5f504655
   a896c:	45544152 	.word	0x45544152
   a8970:	00000000 	.word	0x00000000
   a8974:	5f414c56 	.word	0x5f414c56
   a8978:	504d5550 	.word	0x504d5550
   a897c:	004e4f5f 	.word	0x004e4f5f
   a8980:	5f414c56 	.word	0x5f414c56
   a8984:	504d5550 	.word	0x504d5550
   a8988:	46464f5f 	.word	0x46464f5f
   a898c:	00000000 	.word	0x00000000
   a8990:	525f5042 	.word	0x525f5042
   a8994:	00455441 	.word	0x00455441
   a8998:	4f5f4356 	.word	0x4f5f4356
   a899c:	00004646 	.word	0x00004646
   a89a0:	4f5f4957 	.word	0x4f5f4957
   a89a4:	0000004e 	.word	0x0000004e
   a89a8:	4f5f4957 	.word	0x4f5f4957
   a89ac:	00004646 	.word	0x00004646
   a89b0:	49415244 	.word	0x49415244
   a89b4:	4e4f5f4e 	.word	0x4e4f5f4e
   a89b8:	00000000 	.word	0x00000000
   a89bc:	49415244 	.word	0x49415244
   a89c0:	464f5f4e 	.word	0x464f5f4e
   a89c4:	00000046 	.word	0x00000046
   a89c8:	504f5f56 	.word	0x504f5f56
   a89cc:	00004e45 	.word	0x00004e45
   a89d0:	4c435f56 	.word	0x4c435f56
   a89d4:	0045534f 	.word	0x0045534f
   a89d8:	4c415f56 	.word	0x4c415f56
   a89dc:	45504f4c 	.word	0x45504f4c
   a89e0:	0000004e 	.word	0x0000004e
   a89e4:	4f5f5048 	.word	0x4f5f5048
   a89e8:	0000004e 	.word	0x0000004e
   a89ec:	4f5f5048 	.word	0x4f5f5048
   a89f0:	00004646 	.word	0x00004646
   a89f4:	525f5048 	.word	0x525f5048
   a89f8:	00455441 	.word	0x00455441
   a89fc:	565f4342 	.word	0x565f4342
   a8a00:	45532031 	.word	0x45532031
   a8a04:	00000054 	.word	0x00000054
   a8a08:	565f4342 	.word	0x565f4342
   a8a0c:	45532032 	.word	0x45532032
   a8a10:	00000054 	.word	0x00000054
   a8a14:	565f4342 	.word	0x565f4342
   a8a18:	33315f31 	.word	0x33315f31
   a8a1c:	53203431 	.word	0x53203431
   a8a20:	00005445 	.word	0x00005445
   a8a24:	565f4342 	.word	0x565f4342
   a8a28:	33315f32 	.word	0x33315f32
   a8a2c:	53203431 	.word	0x53203431
   a8a30:	00005445 	.word	0x00005445
   a8a34:	565f4342 	.word	0x565f4342
   a8a38:	20345f31 	.word	0x20345f31
   a8a3c:	00544553 	.word	0x00544553
   a8a40:	565f4342 	.word	0x565f4342
   a8a44:	20345f32 	.word	0x20345f32
   a8a48:	00544553 	.word	0x00544553
   a8a4c:	525f4342 	.word	0x525f4342
   a8a50:	54455345 	.word	0x54455345
   a8a54:	00000000 	.word	0x00000000
   a8a58:	465f4342 	.word	0x465f4342
   a8a5c:	5a454552 	.word	0x5a454552
   a8a60:	00000045 	.word	0x00000045
   a8a64:	555f4342 	.word	0x555f4342
   a8a68:	4552464e 	.word	0x4552464e
   a8a6c:	00455a45 	.word	0x00455a45
   a8a70:	4e45504f 	.word	0x4e45504f
   a8a74:	4c4c4946 	.word	0x4c4c4946
   a8a78:	00000000 	.word	0x00000000
   a8a7c:	0052544a 	.word	0x0052544a
   a8a80:	4f5f4356 	.word	0x4f5f4356
   a8a84:	0000004e 	.word	0x0000004e
   a8a88:	545f5343 	.word	0x545f5343
   a8a8c:	47474952 	.word	0x47474952
   a8a90:	00005245 	.word	0x00005245
   a8a94:	545f5350 	.word	0x545f5350
   a8a98:	47474952 	.word	0x47474952
   a8a9c:	00005245 	.word	0x00005245
   a8aa0:	3a726556 	.word	0x3a726556
   a8aa4:	00342e54 	.word	0x00342e54
   a8aa8:	574f4c46 	.word	0x574f4c46
   a8aac:	004e455f 	.word	0x004e455f
   a8ab0:	574f4c46 	.word	0x574f4c46
   a8ab4:	5349445f 	.word	0x5349445f
   a8ab8:	00000000 	.word	0x00000000
   a8abc:	504d4554 	.word	0x504d4554
   a8ac0:	49485f31 	.word	0x49485f31
   a8ac4:	00004847 	.word	0x00004847
   a8ac8:	504d4554 	.word	0x504d4554
   a8acc:	4f4c5f31 	.word	0x4f4c5f31
   a8ad0:	00000057 	.word	0x00000057
   a8ad4:	504d4554 	.word	0x504d4554
   a8ad8:	00000031 	.word	0x00000031
   a8adc:	504d4554 	.word	0x504d4554
   a8ae0:	49485f32 	.word	0x49485f32
   a8ae4:	00004847 	.word	0x00004847
   a8ae8:	504d4554 	.word	0x504d4554
   a8aec:	4f4c5f32 	.word	0x4f4c5f32
   a8af0:	00000057 	.word	0x00000057
   a8af4:	54534554 	.word	0x54534554
   a8af8:	00000000 	.word	0x00000000
   a8afc:	504d4554 	.word	0x504d4554
   a8b00:	00000032 	.word	0x00000032
   a8b04:	504d4554 	.word	0x504d4554
   a8b08:	4749485f 	.word	0x4749485f
   a8b0c:	00000048 	.word	0x00000048
   a8b10:	504d4554 	.word	0x504d4554
   a8b14:	574f4c5f 	.word	0x574f4c5f
   a8b18:	00000000 	.word	0x00000000
   a8b1c:	504d4554 	.word	0x504d4554
   a8b20:	00000033 	.word	0x00000033
   a8b24:	5f545041 	.word	0x5f545041
   a8b28:	48474948 	.word	0x48474948
   a8b2c:	00000000 	.word	0x00000000
   a8b30:	5f545041 	.word	0x5f545041
   a8b34:	3d574f4c 	.word	0x3d574f4c
   a8b38:	292d2820 	.word	0x292d2820
   a8b3c:	00000000 	.word	0x00000000
   a8b40:	5f545041 	.word	0x5f545041
   a8b44:	00574f4c 	.word	0x00574f4c
   a8b48:	5f545056 	.word	0x5f545056
   a8b4c:	48474948 	.word	0x48474948
   a8b50:	00000000 	.word	0x00000000
   a8b54:	5f545056 	.word	0x5f545056
   a8b58:	3d574f4c 	.word	0x3d574f4c
   a8b5c:	292d2820 	.word	0x292d2820
   a8b60:	00000000 	.word	0x00000000
   a8b64:	5f325350 	.word	0x5f325350
   a8b68:	00574f4c 	.word	0x00574f4c
   a8b6c:	444e4f43 	.word	0x444e4f43
   a8b70:	4749485f 	.word	0x4749485f
   a8b74:	00000048 	.word	0x00000048
   a8b78:	444e4f43 	.word	0x444e4f43
   a8b7c:	574f4c5f 	.word	0x574f4c5f
   a8b80:	00000000 	.word	0x00000000
   a8b84:	5f4e4f43 	.word	0x5f4e4f43
   a8b88:	00574f4c 	.word	0x00574f4c
   a8b8c:	5f315350 	.word	0x5f315350
   a8b90:	48474948 	.word	0x48474948
   a8b94:	00000000 	.word	0x00000000
   a8b98:	5f315350 	.word	0x5f315350
   a8b9c:	3d574f4c 	.word	0x3d574f4c
   a8ba0:	292d2820 	.word	0x292d2820
   a8ba4:	00000000 	.word	0x00000000
   a8ba8:	00325350 	.word	0x00325350
   a8bac:	5f325350 	.word	0x5f325350
   a8bb0:	3d574f4c 	.word	0x3d574f4c
   a8bb4:	292d2820 	.word	0x292d2820
   a8bb8:	00000000 	.word	0x00000000
   a8bbc:	00335350 	.word	0x00335350
   a8bc0:	5f335350 	.word	0x5f335350
   a8bc4:	3d574f4c 	.word	0x3d574f4c
   a8bc8:	292d2820 	.word	0x292d2820
   a8bcc:	00000000 	.word	0x00000000
   a8bd0:	5f335350 	.word	0x5f335350
   a8bd4:	00574f4c 	.word	0x00574f4c
   a8bd8:	535f5048 	.word	0x535f5048
   a8bdc:	54524154 	.word	0x54524154
   a8be0:	0000003d 	.word	0x0000003d
   a8be4:	455f5048 	.word	0x455f5048
   a8be8:	003d444e 	.word	0x003d444e
   a8bec:	3d315350 	.word	0x3d315350
   a8bf0:	00000000 	.word	0x00000000
   a8bf4:	3d325350 	.word	0x3d325350
   a8bf8:	00000000 	.word	0x00000000
   a8bfc:	3d335350 	.word	0x3d335350
   a8c00:	00000000 	.word	0x00000000
   a8c04:	3d545041 	.word	0x3d545041
   a8c08:	00000000 	.word	0x00000000
   a8c0c:	3d545056 	.word	0x3d545056
   a8c10:	00000000 	.word	0x00000000
   a8c14:	31504d54 	.word	0x31504d54
   a8c18:	0000003d 	.word	0x0000003d
   a8c1c:	32504d54 	.word	0x32504d54
   a8c20:	0000003d 	.word	0x0000003d
   a8c24:	504d4554 	.word	0x504d4554
   a8c28:	00003d31 	.word	0x00003d31
   a8c2c:	504d4554 	.word	0x504d4554
   a8c30:	00003d32 	.word	0x00003d32
   a8c34:	504d4554 	.word	0x504d4554
   a8c38:	00003d33 	.word	0x00003d33
   a8c3c:	544e4328 	.word	0x544e4328
   a8c40:	00000029 	.word	0x00000029

000a8c44 <can_bit_time>:
   a8c44:	02020308 02094b03 43020303 0303030a     .....K.....C....
   a8c54:	040b4603 48040303 0404030c 040d4304     .F.....H.....C..
   a8c64:	4d040404 0504040e 040f4004 43040505     ...M.....@.....C
   a8c74:	05050510 06114504 47040505 06060512     .....E.....G....
   a8c84:	06134304 44040606 06060714 08154604     .C.....D.....F..
   a8c94:	47040606 07070716 08174404 46040708     ...G.....D.....F
   a8ca4:	08080718 08194304 44040808 00006325     .....C.....D%c..
   a8cb4:	0004021c 5f373156 00000030 202d462d     ....V17_0...-F- 
   a8cc4:	74737953 206b6369 666e6f63 72756769     Systick configur
   a8cd4:	6f697461 7265206e 0d726f72 00000000     ation error.....

000a8ce4 <uart_serial_options>:
   a8ce4:	0001c200 00000000 00000800 00000001     ................
   a8cf4:	01ddccaa 05040302 09080706 bbee0b0a     ................
   a8d04:	4e45504f 004c4946 504f5453 004c4946     OPENFIL.STOPFIL.
   a8d14:	45544e45 00315f52 00544e49 0065766f     ENTER_1.INT.ove.
   a8d24:	45464153 00000000 52494352 00000043     SAFE....RCIRC...
   a8d34:	4d495250 00003145 4f4f4c42 00000044     PRIME1..BLOOD...
   a8d44:	41504548 004e4952 454e4f44 0050485f     HEPARIN.DONE_HP.
   a8d54:	00303035 534e4952 00003245 534e4952     500.RINSE2..RINS
   a8d64:	00003345 534e4952 00003445 534e4952     E3..RINSE4..RINS
   a8d74:	00003145 454e4f44 00000000 52494352     E1..DONE....RCIR
   a8d84:	00000043 52494352 54535f43 0000504f     C...RCIRC_STOP..
   a8d94:	45544e45 00315f52 45464153 00000000     ENTER_1.SAFE....
   a8da4:	4d495250 00003145 00000043              PRIME1..C...

000a8db0 <_global_impure_ptr>:
   a8db0:	20070dc8 0000000a                       ... ....

000a8db8 <_init>:
   a8db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   a8dba:	bf00      	nop
   a8dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
   a8dbe:	bc08      	pop	{r3}
   a8dc0:	469e      	mov	lr, r3
   a8dc2:	4770      	bx	lr

000a8dc4 <__init_array_start>:
   a8dc4:	000a71e1 	.word	0x000a71e1

000a8dc8 <__frame_dummy_init_array_entry>:
   a8dc8:	00080119                                ....

000a8dcc <_fini>:
   a8dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   a8dce:	bf00      	nop
   a8dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   a8dd2:	bc08      	pop	{r3}
   a8dd4:	469e      	mov	lr, r3
   a8dd6:	4770      	bx	lr

000a8dd8 <__fini_array_start>:
   a8dd8:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <efc_perform_read_sequence>:
 */
RAMFUNC
uint32_t efc_perform_read_sequence(Efc *p_efc,
		uint32_t ul_cmd_st, uint32_t ul_cmd_sp,
		uint32_t *p_ul_buf, uint32_t ul_size)
{
20070000:	b480      	push	{r7}
20070002:	b089      	sub	sp, #36	; 0x24
20070004:	af00      	add	r7, sp, #0
20070006:	60f8      	str	r0, [r7, #12]
20070008:	60b9      	str	r1, [r7, #8]
2007000a:	607a      	str	r2, [r7, #4]
2007000c:	603b      	str	r3, [r7, #0]
	volatile uint32_t ul_status;
	uint32_t ul_cnt;

#if (SAM3U4 || SAM3XA || SAM4SD16 || SAM4SD32)
	uint32_t *p_ul_data =
			(uint32_t *) ((p_efc == EFC0) ?
2007000e:	68fb      	ldr	r3, [r7, #12]
20070010:	4a28      	ldr	r2, [pc, #160]	; (200700b4 <efc_perform_read_sequence+0xb4>)
20070012:	4293      	cmp	r3, r2
20070014:	d102      	bne.n	2007001c <efc_perform_read_sequence+0x1c>
20070016:	f44f 2300 	mov.w	r3, #524288	; 0x80000
2007001a:	e001      	b.n	20070020 <efc_perform_read_sequence+0x20>
2007001c:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
{
	volatile uint32_t ul_status;
	uint32_t ul_cnt;

#if (SAM3U4 || SAM3XA || SAM4SD16 || SAM4SD32)
	uint32_t *p_ul_data =
20070020:	61bb      	str	r3, [r7, #24]
	uint32_t *p_ul_data = (uint32_t *) READ_BUFF_ADDR;
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
20070022:	683b      	ldr	r3, [r7, #0]
20070024:	2b00      	cmp	r3, #0
20070026:	d101      	bne.n	2007002c <efc_perform_read_sequence+0x2c>
		return EFC_RC_INVALID;
20070028:	2302      	movs	r3, #2
2007002a:	e03c      	b.n	200700a6 <efc_perform_read_sequence+0xa6>
	}

	p_efc->EEFC_FMR |= (0x1u << 16);
2007002c:	68fb      	ldr	r3, [r7, #12]
2007002e:	681b      	ldr	r3, [r3, #0]
20070030:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
20070034:	68fb      	ldr	r3, [r7, #12]
20070036:	601a      	str	r2, [r3, #0]
#if (SAM4S || SAM4E || SAM4N)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
#else
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
20070038:	68bb      	ldr	r3, [r7, #8]
2007003a:	b2db      	uxtb	r3, r3
2007003c:	f043 42b4 	orr.w	r2, r3, #1509949440	; 0x5a000000
	/* Send the Start Read command */
#if (SAM4S || SAM4E || SAM4N)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
#else
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
20070040:	68fb      	ldr	r3, [r7, #12]
20070042:	605a      	str	r2, [r3, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register
	 * (EEFC_FSR) falls.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20070044:	68fb      	ldr	r3, [r7, #12]
20070046:	689b      	ldr	r3, [r3, #8]
20070048:	617b      	str	r3, [r7, #20]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);
2007004a:	697b      	ldr	r3, [r7, #20]
2007004c:	f003 0301 	and.w	r3, r3, #1
20070050:	2b00      	cmp	r3, #0
20070052:	d1f7      	bne.n	20070044 <efc_perform_read_sequence+0x44>

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20070054:	2300      	movs	r3, #0
20070056:	61fb      	str	r3, [r7, #28]
20070058:	e00c      	b.n	20070074 <efc_perform_read_sequence+0x74>
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
2007005a:	69fb      	ldr	r3, [r7, #28]
2007005c:	009b      	lsls	r3, r3, #2
2007005e:	683a      	ldr	r2, [r7, #0]
20070060:	4413      	add	r3, r2
20070062:	69fa      	ldr	r2, [r7, #28]
20070064:	0092      	lsls	r2, r2, #2
20070066:	69b9      	ldr	r1, [r7, #24]
20070068:	440a      	add	r2, r1
2007006a:	6812      	ldr	r2, [r2, #0]
2007006c:	601a      	str	r2, [r3, #0]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
2007006e:	69fb      	ldr	r3, [r7, #28]
20070070:	3301      	adds	r3, #1
20070072:	61fb      	str	r3, [r7, #28]
20070074:	69fa      	ldr	r2, [r7, #28]
20070076:	6abb      	ldr	r3, [r7, #40]	; 0x28
20070078:	429a      	cmp	r2, r3
2007007a:	d3ee      	bcc.n	2007005a <efc_perform_read_sequence+0x5a>
#if (SAM4S || SAM4E || SAM4N)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
#else
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
2007007c:	687b      	ldr	r3, [r7, #4]
2007007e:	b2db      	uxtb	r3, r3
	p_efc->EEFC_FCR =
#if (SAM4S || SAM4E || SAM4N)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
#else
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
20070080:	f043 42b4 	orr.w	r2, r3, #1509949440	; 0x5a000000
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
	}

	/* To stop the read mode */
	p_efc->EEFC_FCR =
20070084:	68fb      	ldr	r3, [r7, #12]
20070086:	605a      	str	r2, [r3, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register (EEFC_FSR)
	 * rises.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20070088:	68fb      	ldr	r3, [r7, #12]
2007008a:	689b      	ldr	r3, [r3, #8]
2007008c:	617b      	str	r3, [r7, #20]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
2007008e:	697b      	ldr	r3, [r7, #20]
20070090:	f003 0301 	and.w	r3, r3, #1
20070094:	2b00      	cmp	r3, #0
20070096:	d0f7      	beq.n	20070088 <efc_perform_read_sequence+0x88>

	p_efc->EEFC_FMR &= ~(0x1u << 16);
20070098:	68fb      	ldr	r3, [r7, #12]
2007009a:	681b      	ldr	r3, [r3, #0]
2007009c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
200700a0:	68fb      	ldr	r3, [r7, #12]
200700a2:	601a      	str	r2, [r3, #0]

	return EFC_RC_OK;
200700a4:	2300      	movs	r3, #0
}
200700a6:	4618      	mov	r0, r3
200700a8:	3724      	adds	r7, #36	; 0x24
200700aa:	46bd      	mov	sp, r7
200700ac:	f85d 7b04 	ldr.w	r7, [sp], #4
200700b0:	4770      	bx	lr
200700b2:	bf00      	nop
200700b4:	400e0a00 	.word	0x400e0a00

200700b8 <efc_write_fmr>:
 * \param p_efc Pointer to an EFC instance.
 * \param ul_fmr Value of mode register
 */
RAMFUNC
void efc_write_fmr(Efc *p_efc, uint32_t ul_fmr)
{
200700b8:	b480      	push	{r7}
200700ba:	b083      	sub	sp, #12
200700bc:	af00      	add	r7, sp, #0
200700be:	6078      	str	r0, [r7, #4]
200700c0:	6039      	str	r1, [r7, #0]
	p_efc->EEFC_FMR = ul_fmr;
200700c2:	687b      	ldr	r3, [r7, #4]
200700c4:	683a      	ldr	r2, [r7, #0]
200700c6:	601a      	str	r2, [r3, #0]
}
200700c8:	370c      	adds	r7, #12
200700ca:	46bd      	mov	sp, r7
200700cc:	f85d 7b04 	ldr.w	r7, [sp], #4
200700d0:	4770      	bx	lr
200700d2:	bf00      	nop

200700d4 <efc_perform_fcr>:
 *
 * \return The current status.
 */
RAMFUNC
uint32_t efc_perform_fcr(Efc *p_efc, uint32_t ul_fcr)
{
200700d4:	b480      	push	{r7}
200700d6:	b085      	sub	sp, #20
200700d8:	af00      	add	r7, sp, #0
200700da:	6078      	str	r0, [r7, #4]
200700dc:	6039      	str	r1, [r7, #0]
	volatile uint32_t ul_status;

	p_efc->EEFC_FCR = ul_fcr;
200700de:	687b      	ldr	r3, [r7, #4]
200700e0:	683a      	ldr	r2, [r7, #0]
200700e2:	605a      	str	r2, [r3, #4]
	do {
		ul_status = p_efc->EEFC_FSR;
200700e4:	687b      	ldr	r3, [r7, #4]
200700e6:	689b      	ldr	r3, [r3, #8]
200700e8:	60fb      	str	r3, [r7, #12]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
200700ea:	68fb      	ldr	r3, [r7, #12]
200700ec:	f003 0301 	and.w	r3, r3, #1
200700f0:	2b00      	cmp	r3, #0
200700f2:	d0f7      	beq.n	200700e4 <efc_perform_fcr+0x10>

	return (ul_status & EEFC_ERROR_FLAGS);
200700f4:	68fb      	ldr	r3, [r7, #12]
200700f6:	f003 0306 	and.w	r3, r3, #6
}
200700fa:	4618      	mov	r0, r3
200700fc:	3714      	adds	r7, #20
200700fe:	46bd      	mov	sp, r7
20070100:	f85d 7b04 	ldr.w	r7, [sp], #4
20070104:	4770      	bx	lr
20070106:	bf00      	nop

20070108 <levelswitchprevstatus>:
20070108:	0001                                        ..

2007010a <ps3_threshold>:
2007010a:	1000                                        ..

2007010c <cl_flowpathtable>:
2007010c:	0000 0707 0101 0202 0303 0404 0505 0606     ................
	...

20070124 <hp>:
20070124:	000a 006a 0009 0023 0008 002d 0007 0037     ..j...#...-...7.
20070134:	0006 0041 0005 0050 0004 0064 0002 0212     ..A...P...d.....
20070144:	0001 0424 0032 0bb8 001e 157c 0000 0000     ..$.2.....|.....
	...

200701ec <apt2>:
200701ec:	ffd8 fd08 ffe2 fdda ffec fe52 fff6 fee8     ..........R.....
200701fc:	0000 ff2e 000a 0005 0014 008c 001e 0118     ................
2007020c:	0028 0150 0032 0226 003c 02b4 0046 0348     (.P.2.&.<...F.H.
2007021c:	0050 03d4 005a 045b 0064 04ec 006e 0574     P...Z.[.d...n.t.
2007022c:	0078 05e9 008c 06d3 00a0 07ee 00b4 094d     x.............M.
2007023c:	00c8 0ab6 00f0 0c76 0118 0e3e 0140 10cc     ......v...>.@...
2007024c:	0168 12e1 01a4 1630                         h.....0.

20070254 <vpt2>:
20070254:	ffd8 fd08 ffe2 fdda ffec fe52 fff6 fee8     ..........R.....
20070264:	0000 ff2e 000a 0005 0014 008c 001e 0118     ................
20070274:	0028 0150 0032 0226 003c 02b4 0046 0348     (.P.2.&.<...F.H.
20070284:	0050 03d4 005a 045b 0064 04ec 006e 0574     P...Z.[.d...n.t.
20070294:	0078 05e9 008c 06d3 00a0 07ee 00b4 094d     x.............M.
200702a4:	00c8 0ab6 00f0 0c76 0118 0e3e 0140 10cc     ......v...>.@...
200702b4:	0168 12e1 01a4 1630                         h.....0.

200702bc <ufp>:
200702bc:	0028 05dc 003c 041a 0046 02bc 0050 028a     (...<...F...P...
200702cc:	005a 0258 0064 0226 006e 01f4 0078 01c2     Z.X.d.&.n...x...
200702dc:	0082 0190 0096 015e 00aa 012c 00c8 00fa     ......^...,.....
200702ec:	00fa 00c8 0154 0096                         ....T...

200702f4 <ps_1_2>:
200702f4:	fe70 d41d fea2 d611 fed4 da25 ff06 dbbd     p.........%.....
20070304:	ff38 df71 ff6a e16e ff9c e565 ffce e769     8.q.j.n...e...i.
20070314:	0000 eb1c 0032 ed4c 0064 f0a0 0096 f414     ....2.L.d.......
20070324:	00c8 f708 00fa f972 012c fc35 015e ff10     ......r.,.5.^...
20070334:	0190 026c 01c2 0559 01da 06a4 01f4 0719     ..l...Y.........
20070344:	0226 0ace 0258 0e10 028a 1004 02bc 13ec     &...X...........
20070354:	02ee 1676 0320 1964 0000 0000               ..v. .d.....

20070360 <ps_2_2>:
20070360:	fe70 d3b9 fea2 d5ad fed4 d998 ff06 db4a     p.............J.
20070370:	ff38 def9 ff6a e0f9 ff9c e522 ffce e694     8...j.....".....
20070380:	0000 ea9a 0032 ec67 0064 f01d 0096 f326     ....2.g.d.....&.
20070390:	00c8 f61a 00fa f85d 012c fb57 015e fe3e     ......].,.W.^.>.
200703a0:	0190 0190 01c2 044c 01da 05be 01f4 062c     ......L.......,.
200703b0:	0226 09e8 0258 0d20 028a 0f3c 02bc 1388     &...X. ...<.....
200703c0:	02ee 1612 0320 1900 0000 0000               .... .......

200703cc <ps_3_2>:
200703cc:	fe70 d41d fea2 d611 fed4 da25 ff06 dbbd     p.........%.....
200703dc:	ff38 df0d ff6a e172 ff9c e563 ffce e769     8...j.r...c...i.
200703ec:	0000 eb06 0032 ed32 0064 f08a 0096 f3fb     ....2.2.d.......
200703fc:	00c8 f6ce 00fa f941 012c fc1b 015e ff10     ......A.,...^...
2007040c:	0190 026c 01c2 053f 01da 06a4 01f4 0708     ..l...?.........
2007041c:	0226 0ab7 0258 0e10 028a 1004 02bc 13ec     &...X...........
2007042c:	02ee 1676 0320 1964 0352 1c6d 0384 1f40     ..v. .d.R.m...@.
2007043c:	03b6 2260 03e8 25e4 041a 29cc 044c 2db4     ..`"...%...)L..-
2007044c:	047e 3200 04b0 36b0 04e2 3b60 0514 4074     ~..2...6..`;..t@
2007045c:	0546 4588 0578 4b00 05aa 50dc 05dc 571c     F..Ex..K...P...W

2007046c <Cl_DlsisAlarmTable>:
2007046c:	0105 0000 0000 0600 0001 0000 0000 012a     ..............*.
2007047c:	0000 0000 2c00 0001 0000 0000 010c 0000     .....,..........
2007048c:	0000 0d00 0001 0000 0000 0101 0000 0000     ................
2007049c:	1500 0001 0000 0000 0116 0000 0000 1700     ................
200704ac:	0001 0000 0000 0118 0000 0000 2700 0001     .............'..
200704bc:	0000 0000 0128 0000 0000 2100 0001 0000     ....(......!....
200704cc:	0000 0120 0000 0000 2200 0001 0000 0000     .. ......"......
200704dc:	0124 0000 0000 2300 0001 0000 0000 0126     $......#......&.
200704ec:	0000 0000 2500 0001 0000 0000 0107 0000     .....%..........
200704fc:	0001 0800 0001 0100 0000 0113 0000 0000     ................
2007050c:	1400 0001 0000 0000 0111 0000 0000 1200     ................
2007051c:	0001 0000 0000 010f 0000 0000 1000 0001     ................
	...

20070540 <heater_duty>:
20070540:	0555 0000                                   U...

20070544 <prescribed_temp>:
20070544:	0000 4214                                   ...B

20070548 <wait_4_TS2Stability>:
20070548:	00b4                                        ..

2007054a <wait_4_stability>:
2007054a:	00f0                                        ..

2007054c <wait_4_TS3NeuStability>:
2007054c:	0078                                        x.

2007054e <Neupost_stability_count>:
2007054e:	0078                                        x.

20070550 <Prescribed_T2>:
20070550:	0000 4214                                   ...B

20070554 <Prescribed_T3>:
20070554:	0000 4214                                   ...B

20070558 <SYSTEM_FLOW>:
20070558:	012c 0000                                   ,...

2007055c <gram_test_buffer.9487>:
2007055c:	aaaa 0000 5555 0000 aaaa 0000 5555 0000     ....UU......UU..
2007056c:	aaaa 0000 5555 0000 aaaa 0000 5555 0000     ....UU......UU..
2007057c:	aaaa 0000 0000 0000                         ........

20070584 <Cl_MacState>:
20070584:	0101                                             .

20070585 <ConsoleSync>:
20070585:	cc01                                             .

20070586 <cond_pot_val_2volts.9505>:
20070586:	02cc                                        ..

20070588 <res_temp>:
20070588:	6c00 4628 0000 44fa 0800 4629 4000 4503     .l(F...D..)F.@.E
20070598:	a400 4629 8000 4509 4000 462a c000 450f     ..)F...E.@*F...E
200705a8:	dc00 462a 0000 4516 7400 462b 4000 451c     ..*F...E.t+F.@.E
200705b8:	1000 462c 8000 4522 ac00 462c c000 4528     ..,F.."E..,F..(E
200705c8:	4800 462d 0000 452f e000 462d 4000 4535     .H-F../E..-F.@5E
200705d8:	7c00 462e 8000 453b 1800 462f c000 4541     .|.F..;E../F..AE
200705e8:	b400 462f 0000 4548 4c00 4630 4000 454e     ../F..HE.L0F.@NE
200705f8:	e800 4630 8000 4554 8400 4631 c000 455a     ..0F..TE..1F..ZE
20070608:	1c00 4632 0000 4561 b800 4632 4000 4567     ..2F..aE..2F.@gE
20070618:	5400 4633 8000 456d ec00 4633 c000 4573     .T3F..mE..3F..sE
20070628:	8800 4634 0000 457a 2400 4635 2000 4580     ..4F..zE.$5F. .E
20070638:	bc00 4635 4000 4583 5800 4636 6000 4586     ..5F.@.E.X6F.`.E
20070648:	f000 4636 8000 4589 8c00 4637 a000 458c     ..6F...E..7F...E
20070658:	2400 4638 c000 458f c000 4638 e000 4592     .$8F...E..8F...E
20070668:	5800 4639 0000 4596 f400 4639 2000 4599     .X9F...E..9F. .E
20070678:	9000 463a 4000 459c 2800 463b 6000 459f     ..:F.@.E.(;F.`.E
20070688:	c000 463b 8000 45a2 5c00 463c a000 45a5     ..;F...E.\<F...E
20070698:	f400 463c c000 45a8 9000 463d e000 45ab     ..<F...E..=F...E
200706a8:	2800 463e 0000 45af c400 463e 2000 45b2     .(>F...E..>F. .E
200706b8:	5c00 463f 4000 45b5 f800 463f 6000 45b8     .\?F.@.E..?F.`.E
200706c8:	9000 4640 8000 45bb 2800 4641 a000 45be     ..@F...E.(AF...E
200706d8:	c400 4641 c000 45c1 5c00 4642 e000 45c4     ..AF...E.\BF...E
200706e8:	f400 4642 0000 45c8 9000 4643 2000 45cb     ..BF...E..CF. .E
200706f8:	2800 4644 4000 45ce c000 4644 6000 45d1     .(DF.@.E..DF.`.E
20070708:	5c00 4645 8000 45d4 f400 4645 a000 45d7     .\EF...E..EF...E
20070718:	8c00 4646 c000 45da 2400 4647 e000 45dd     ..FF...E.$GF...E
20070728:	c000 4647 0000 45e1 5800 4648 2000 45e4     ..GF...E.XHF. .E
20070738:	f000 4648 4000 45e7 8800 4649 6000 45ea     ..HF.@.E..IF.`.E
20070748:	2400 464a 8000 45ed bc00 464a a000 45f0     .$JF...E..JF...E
20070758:	5400 464b c000 45f3 ec00 464b e000 45f6     .TKF...E..KF...E
20070768:	8400 464c 0000 45fa 1c00 464d 2000 45fd     ..LF...E..MF. .E
20070778:	b800 464d 2000 4600 5000 464e b000 4601     ..MF. .F.PNF...F
20070788:	e800 464e 4000 4603 8000 464f d000 4604     ..NF.@.F..OF...F
20070798:	1800 4650 6000 4606 b000 4650 f000 4607     ..PF.`.F..PF...F
200707a8:	4800 4651 8000 4609 e000 4651 1000 460b     .HQF...F..QF...F
200707b8:	7800 4652 a000 460c 1000 4653 3000 460e     .xRF...F..SF.0.F
200707c8:	a800 4653 c000 460f 0000 0000 0000 0000     ..SF...F........
	...

20070a38 <TEST_STUB_ENABLEGATE>:
20070a38:	0101                                             .

20070a39 <prev_gate_status>:
20070a39:	0101                                             .

20070a3a <Current_sense_trigger>:
20070a3a:	0001                                        ..

20070a3c <pwm_period>:
20070a3c:	00c8 0000                                   ....

20070a40 <bp_rotataion_marker>:
20070a40:	0001                                        ..

20070a42 <prev_bp_rotataion_marker>:
20070a42:	0001                                        ..

20070a44 <cl_hep_deliveryrate>:
20070a44:	0064 0000                                   d...

20070a48 <hep_rotataion_marker>:
20070a48:	0001                                        ..

20070a4a <prev_hep_rotataion_marker>:
20070a4a:	0001                                        ..

20070a4c <Cl_IsoufAlarmTable>:
20070a4c:	0105 0000 0000 0600 0001 0000 0000 012a     ..............*.
20070a5c:	0000 0000 2c00 0001 0000 0000 010c 0000     .....,..........
20070a6c:	0000 0d00 0001 0000 0000 0101 0000 0000     ................
20070a7c:	1500 0001 0000 0000 0116 0000 0000 1700     ................
20070a8c:	0001 0000 0000 0118 0000 0000 2700 0001     .............'..
20070a9c:	0000 0000 0128 0000 0000 2100 0001 0000     ....(......!....
20070aac:	0000 0120 0000 0000 2200 0001 0000 0000     .. ......"......
20070abc:	0124 0000 0000 2300 0001 0000 0000 0126     $......#......&.
20070acc:	0000 0000 2500 0001 0000 0000 0107 0000     .....%..........
20070adc:	0001 0800 0001 0100 0000 0113 0000 0000     ................
20070aec:	1400 0001 0000 0000 0111 0000 0000 1200     ................
20070afc:	0001 0000 0000 010f 0000 0000 1000 0001     ................
	...

20070b20 <opt>:
20070b20:	0000 0000 86a0 0001 002c 0000               ........,...

20070b2c <nvmarray>:
	...
20070b34:	fffe 0000 0000 0000 0000 0000 0000 0000     ................
20070b44:	fffc 0000 0000 0000 0000 0000 0000 0000     ................
	...

20070b80 <SystemCoreClock>:
20070b80:	0900 003d                                   ..=.

20070b84 <Cl_ConsoleState>:
20070b84:	0101                                             .

20070b85 <g_b_led0_active>:
20070b85:	0101                                             .

20070b86 <Cl_disinfOpenFillTimeOut>:
20070b86:	0001                                        ..

20070b88 <Cl_DisinfAlarmTable>:
20070b88:	012a 0000 0000 2c00 0001 0000 0000 0103     *......,........
20070b98:	0000 0000 0400 0001 0000 0000 0113 0000     ................
20070ba8:	0000 1500 0001 0000 0000 0116 0000 0000     ................
20070bb8:	1700 0001 0000 0000 0118 0000 0000 2700     ...............'
20070bc8:	0001 0000 0000 0128 0000 0000 0800 0001     ......(.........
20070bd8:	0000 0000                                   ....

20070bdc <Cl_DprepAlarmTable>:
20070bdc:	0101 0000 0000 0500 0001 0000 0000 0106     ................
20070bec:	0000 0000 0300 0001 0000 0000 0104 0000     ................
20070bfc:	0000 2a00 0001 0000 0000 012c 0000 0000     ...*......,.....
20070c0c:	0700 0001 0000 0000 0108 0000 0000 0900     ................
20070c1c:	0001 0000 0000 010a 0000 0000 0b00 0001     ................
20070c2c:	0000 0000 010c 0000 0000 0d00 0001 0000     ................
20070c3c:	0000 0120 0000 0000 2100 0001 0000 0000     .. ......!......
20070c4c:	0122 0000 0000 2400 0001 0000 0000 0126     "......$......&.
20070c5c:	0000 0000 1500 0001 0000 0000 0116 0000     ................
20070c6c:	0000 1700 0001 0000 0000 0118 0000 0000     ................
20070c7c:	2700 0001 0000 0000 0128 0000 0000 0f00     .'......(.......
20070c8c:	0001 0000 0000 0110 0000 0000 1100 0001     ................
20070c9c:	0000 0000 0112 0000 0000 1300 0001 0000     ................
20070cac:	0000 0114 0000 0000 3c00 0001 0000 0000     .........<......
	...

20070ccc <Cl_RinseAlarmTable>:
20070ccc:	0101 0000 0000 0000 0129 0000 0100 0000     ........).......
20070cdc:	012b 0000 0100 0000 013d 0000 0100 0000     +.......=.......
20070cec:	013e 0000 0100 0000 0103 0000 0100 0000     >...............
20070cfc:	0104 0000 0100 0000 0110 0000 0000 0000     ................
20070d0c:	010f 0000 0000 0000 0112 0000 0000 0000     ................
20070d1c:	0111 0000 0000 0000 0114 0000 0000 0000     ................
20070d2c:	0113 0000 0000 0000 0115 0000 0000 0000     ................
20070d3c:	0116 0000 0000 0000 0117 0000 0000 0000     ................
20070d4c:	0118 0000 0000 0000 0127 0000 0000 0000     ........'.......
20070d5c:	0128 0000 0000 0000 0108 0000 0000 0000     (...............
20070d6c:	011d 0000 0000 0000 010c 0000 0000 0000     ................
20070d7c:	010d 0000 0000 0000 010e 0000 0000 0000     ................
20070d8c:	0121 0000 0000 0000 011a 0000 0000 0000     !...............

20070d9c <Cl_StandbyAlarmTable>:
20070d9c:	003d 0000 0000 0000 3e00 0000 0000 0000     =........>......
20070dac:	0000 0003 0000 0000 0000 0400 0000 0000     ................
20070dbc:	0000 0000                                   ....

20070dc0 <cl_stbystate>:
20070dc0:	0001 0000 0000 0000                         ........

20070dc8 <impure_data>:
20070dc8:	0000 0000 10b4 2007 111c 2007 1184 2007     ....... ... ... 
	...
20070dfc:	8dac 000a 0000 0000 0000 0000 0000 0000     ................
	...
20070e70:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20070e80:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

200711f0 <_impure_ptr>:
200711f0:	0dc8 2007                                   ... 

200711f4 <__malloc_av_>:
	...
200711fc:	11f4 2007 11f4 2007 11fc 2007 11fc 2007     ... ... ... ... 
2007120c:	1204 2007 1204 2007 120c 2007 120c 2007     ... ... ... ... 
2007121c:	1214 2007 1214 2007 121c 2007 121c 2007     ... ... ... ... 
2007122c:	1224 2007 1224 2007 122c 2007 122c 2007     $.. $.. ,.. ,.. 
2007123c:	1234 2007 1234 2007 123c 2007 123c 2007     4.. 4.. <.. <.. 
2007124c:	1244 2007 1244 2007 124c 2007 124c 2007     D.. D.. L.. L.. 
2007125c:	1254 2007 1254 2007 125c 2007 125c 2007     T.. T.. \.. \.. 
2007126c:	1264 2007 1264 2007 126c 2007 126c 2007     d.. d.. l.. l.. 
2007127c:	1274 2007 1274 2007 127c 2007 127c 2007     t.. t.. |.. |.. 
2007128c:	1284 2007 1284 2007 128c 2007 128c 2007     ... ... ... ... 
2007129c:	1294 2007 1294 2007 129c 2007 129c 2007     ... ... ... ... 
200712ac:	12a4 2007 12a4 2007 12ac 2007 12ac 2007     ... ... ... ... 
200712bc:	12b4 2007 12b4 2007 12bc 2007 12bc 2007     ... ... ... ... 
200712cc:	12c4 2007 12c4 2007 12cc 2007 12cc 2007     ... ... ... ... 
200712dc:	12d4 2007 12d4 2007 12dc 2007 12dc 2007     ... ... ... ... 
200712ec:	12e4 2007 12e4 2007 12ec 2007 12ec 2007     ... ... ... ... 
200712fc:	12f4 2007 12f4 2007 12fc 2007 12fc 2007     ... ... ... ... 
2007130c:	1304 2007 1304 2007 130c 2007 130c 2007     ... ... ... ... 
2007131c:	1314 2007 1314 2007 131c 2007 131c 2007     ... ... ... ... 
2007132c:	1324 2007 1324 2007 132c 2007 132c 2007     $.. $.. ,.. ,.. 
2007133c:	1334 2007 1334 2007 133c 2007 133c 2007     4.. 4.. <.. <.. 
2007134c:	1344 2007 1344 2007 134c 2007 134c 2007     D.. D.. L.. L.. 
2007135c:	1354 2007 1354 2007 135c 2007 135c 2007     T.. T.. \.. \.. 
2007136c:	1364 2007 1364 2007 136c 2007 136c 2007     d.. d.. l.. l.. 
2007137c:	1374 2007 1374 2007 137c 2007 137c 2007     t.. t.. |.. |.. 
2007138c:	1384 2007 1384 2007 138c 2007 138c 2007     ... ... ... ... 
2007139c:	1394 2007 1394 2007 139c 2007 139c 2007     ... ... ... ... 
200713ac:	13a4 2007 13a4 2007 13ac 2007 13ac 2007     ... ... ... ... 
200713bc:	13b4 2007 13b4 2007 13bc 2007 13bc 2007     ... ... ... ... 
200713cc:	13c4 2007 13c4 2007 13cc 2007 13cc 2007     ... ... ... ... 
200713dc:	13d4 2007 13d4 2007 13dc 2007 13dc 2007     ... ... ... ... 
200713ec:	13e4 2007 13e4 2007 13ec 2007 13ec 2007     ... ... ... ... 
200713fc:	13f4 2007 13f4 2007 13fc 2007 13fc 2007     ... ... ... ... 
2007140c:	1404 2007 1404 2007 140c 2007 140c 2007     ... ... ... ... 
2007141c:	1414 2007 1414 2007 141c 2007 141c 2007     ... ... ... ... 
2007142c:	1424 2007 1424 2007 142c 2007 142c 2007     $.. $.. ,.. ,.. 
2007143c:	1434 2007 1434 2007 143c 2007 143c 2007     4.. 4.. <.. <.. 
2007144c:	1444 2007 1444 2007 144c 2007 144c 2007     D.. D.. L.. L.. 
2007145c:	1454 2007 1454 2007 145c 2007 145c 2007     T.. T.. \.. \.. 
2007146c:	1464 2007 1464 2007 146c 2007 146c 2007     d.. d.. l.. l.. 
2007147c:	1474 2007 1474 2007 147c 2007 147c 2007     t.. t.. |.. |.. 
2007148c:	1484 2007 1484 2007 148c 2007 148c 2007     ... ... ... ... 
2007149c:	1494 2007 1494 2007 149c 2007 149c 2007     ... ... ... ... 
200714ac:	14a4 2007 14a4 2007 14ac 2007 14ac 2007     ... ... ... ... 
200714bc:	14b4 2007 14b4 2007 14bc 2007 14bc 2007     ... ... ... ... 
200714cc:	14c4 2007 14c4 2007 14cc 2007 14cc 2007     ... ... ... ... 
200714dc:	14d4 2007 14d4 2007 14dc 2007 14dc 2007     ... ... ... ... 
200714ec:	14e4 2007 14e4 2007 14ec 2007 14ec 2007     ... ... ... ... 
200714fc:	14f4 2007 14f4 2007 14fc 2007 14fc 2007     ... ... ... ... 
2007150c:	1504 2007 1504 2007 150c 2007 150c 2007     ... ... ... ... 
2007151c:	1514 2007 1514 2007 151c 2007 151c 2007     ... ... ... ... 
2007152c:	1524 2007 1524 2007 152c 2007 152c 2007     $.. $.. ,.. ,.. 
2007153c:	1534 2007 1534 2007 153c 2007 153c 2007     4.. 4.. <.. <.. 
2007154c:	1544 2007 1544 2007 154c 2007 154c 2007     D.. D.. L.. L.. 
2007155c:	1554 2007 1554 2007 155c 2007 155c 2007     T.. T.. \.. \.. 
2007156c:	1564 2007 1564 2007 156c 2007 156c 2007     d.. d.. l.. l.. 
2007157c:	1574 2007 1574 2007 157c 2007 157c 2007     t.. t.. |.. |.. 
2007158c:	1584 2007 1584 2007 158c 2007 158c 2007     ... ... ... ... 
2007159c:	1594 2007 1594 2007 159c 2007 159c 2007     ... ... ... ... 
200715ac:	15a4 2007 15a4 2007 15ac 2007 15ac 2007     ... ... ... ... 
200715bc:	15b4 2007 15b4 2007 15bc 2007 15bc 2007     ... ... ... ... 
200715cc:	15c4 2007 15c4 2007 15cc 2007 15cc 2007     ... ... ... ... 
200715dc:	15d4 2007 15d4 2007 15dc 2007 15dc 2007     ... ... ... ... 
200715ec:	15e4 2007 15e4 2007 15ec 2007 15ec 2007     ... ... ... ... 

200715fc <__malloc_trim_threshold>:
200715fc:	0000 0002                                   ....

20071600 <__malloc_sbrk_base>:
20071600:	ffff ffff                                   ....
