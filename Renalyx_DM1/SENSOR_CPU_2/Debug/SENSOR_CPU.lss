
SENSOR_CPU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006890  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     000009d4  20070000  00086890  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          00000184  200709d4  00087264  000209d4  2**2
                  ALLOC
  3 .stack        00002000  20070b58  000873e8  000209d4  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  000209d4  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  000209fd  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001690c  00000000  00000000  00020a56  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000036f6  00000000  00000000  00037362  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000073aa  00000000  00000000  0003aa58  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000e10  00000000  00000000  00041e02  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000c20  00000000  00000000  00042c12  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001f93a  00000000  00000000  00043832  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001f6bd  00000000  00000000  0006316c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000685b2  00000000  00000000  00082829  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00003f38  00000000  00000000  000eaddc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20072b58 	.word	0x20072b58
   80004:	000842e9 	.word	0x000842e9
   80008:	000842e1 	.word	0x000842e1
   8000c:	000842e1 	.word	0x000842e1
   80010:	000842e1 	.word	0x000842e1
   80014:	000842e1 	.word	0x000842e1
   80018:	000842e1 	.word	0x000842e1
	...
   8002c:	000842e1 	.word	0x000842e1
   80030:	000842e1 	.word	0x000842e1
   80034:	00000000 	.word	0x00000000
   80038:	000842e1 	.word	0x000842e1
   8003c:	000842e1 	.word	0x000842e1
   80040:	000842e1 	.word	0x000842e1
   80044:	000842e1 	.word	0x000842e1
   80048:	000842e1 	.word	0x000842e1
   8004c:	000842e1 	.word	0x000842e1
   80050:	000842e1 	.word	0x000842e1
   80054:	000842e1 	.word	0x000842e1
   80058:	000842e1 	.word	0x000842e1
   8005c:	000842e1 	.word	0x000842e1
   80060:	000842e1 	.word	0x000842e1
   80064:	000842e1 	.word	0x000842e1
   80068:	00000000 	.word	0x00000000
   8006c:	00083fcd 	.word	0x00083fcd
   80070:	00083fe5 	.word	0x00083fe5
   80074:	00083ffd 	.word	0x00083ffd
   80078:	00084015 	.word	0x00084015
	...
   80084:	000842e1 	.word	0x000842e1
   80088:	000842e1 	.word	0x000842e1
   8008c:	000842e1 	.word	0x000842e1
   80090:	000842e1 	.word	0x000842e1
   80094:	000842e1 	.word	0x000842e1
   80098:	000842e1 	.word	0x000842e1
   8009c:	000842e1 	.word	0x000842e1
   800a0:	000842e1 	.word	0x000842e1
   800a4:	00000000 	.word	0x00000000
   800a8:	000842e1 	.word	0x000842e1
   800ac:	000842e1 	.word	0x000842e1
   800b0:	000842e1 	.word	0x000842e1
   800b4:	000842e1 	.word	0x000842e1
   800b8:	000842e1 	.word	0x000842e1
   800bc:	000842e1 	.word	0x000842e1
   800c0:	000842e1 	.word	0x000842e1
   800c4:	000842e1 	.word	0x000842e1
   800c8:	000842e1 	.word	0x000842e1
   800cc:	000842e1 	.word	0x000842e1
   800d0:	000842e1 	.word	0x000842e1
   800d4:	000842e1 	.word	0x000842e1
   800d8:	000842e1 	.word	0x000842e1
   800dc:	000842e1 	.word	0x000842e1
   800e0:	000842e1 	.word	0x000842e1
   800e4:	000842e1 	.word	0x000842e1
   800e8:	000842e1 	.word	0x000842e1
   800ec:	000801d5 	.word	0x000801d5
   800f0:	000842e1 	.word	0x000842e1

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	200709d4 	.word	0x200709d4
   80110:	00000000 	.word	0x00000000
   80114:	00086890 	.word	0x00086890

00080118 <frame_dummy>:
   80118:	4b08      	ldr	r3, [pc, #32]	; (8013c <frame_dummy+0x24>)
   8011a:	b510      	push	{r4, lr}
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4908      	ldr	r1, [pc, #32]	; (80140 <frame_dummy+0x28>)
   80120:	4808      	ldr	r0, [pc, #32]	; (80144 <frame_dummy+0x2c>)
   80122:	f3af 8000 	nop.w
   80126:	4808      	ldr	r0, [pc, #32]	; (80148 <frame_dummy+0x30>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b903      	cbnz	r3, 8012e <frame_dummy+0x16>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	4b07      	ldr	r3, [pc, #28]	; (8014c <frame_dummy+0x34>)
   80130:	2b00      	cmp	r3, #0
   80132:	d0fb      	beq.n	8012c <frame_dummy+0x14>
   80134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80138:	4718      	bx	r3
   8013a:	bf00      	nop
   8013c:	00000000 	.word	0x00000000
   80140:	200709d8 	.word	0x200709d8
   80144:	00086890 	.word	0x00086890
   80148:	00086890 	.word	0x00086890
   8014c:	00000000 	.word	0x00000000

00080150 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   80150:	b580      	push	{r7, lr}
   80152:	b086      	sub	sp, #24
   80154:	af00      	add	r7, sp, #0
   80156:	60f8      	str	r0, [r7, #12]
   80158:	60b9      	str	r1, [r7, #8]
   8015a:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   8015c:	2300      	movs	r3, #0
   8015e:	617b      	str	r3, [r7, #20]

	if (file != 0) {
   80160:	68fb      	ldr	r3, [r7, #12]
   80162:	2b00      	cmp	r3, #0
   80164:	d012      	beq.n	8018c <_read+0x3c>
		return -1;
   80166:	f04f 33ff 	mov.w	r3, #4294967295
   8016a:	e013      	b.n	80194 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   8016c:	4b0b      	ldr	r3, [pc, #44]	; (8019c <_read+0x4c>)
   8016e:	681b      	ldr	r3, [r3, #0]
   80170:	4a0b      	ldr	r2, [pc, #44]	; (801a0 <_read+0x50>)
   80172:	6812      	ldr	r2, [r2, #0]
   80174:	68b9      	ldr	r1, [r7, #8]
   80176:	4610      	mov	r0, r2
   80178:	4798      	blx	r3
		ptr++;
   8017a:	68bb      	ldr	r3, [r7, #8]
   8017c:	3301      	adds	r3, #1
   8017e:	60bb      	str	r3, [r7, #8]
		nChars++;
   80180:	697b      	ldr	r3, [r7, #20]
   80182:	3301      	adds	r3, #1
   80184:	617b      	str	r3, [r7, #20]

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   80186:	687b      	ldr	r3, [r7, #4]
   80188:	3b01      	subs	r3, #1
   8018a:	607b      	str	r3, [r7, #4]
   8018c:	687b      	ldr	r3, [r7, #4]
   8018e:	2b00      	cmp	r3, #0
   80190:	dcec      	bgt.n	8016c <_read+0x1c>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
   80192:	697b      	ldr	r3, [r7, #20]
}
   80194:	4618      	mov	r0, r3
   80196:	3718      	adds	r7, #24
   80198:	46bd      	mov	sp, r7
   8019a:	bd80      	pop	{r7, pc}
   8019c:	20070ab4 	.word	0x20070ab4
   801a0:	20070b08 	.word	0x20070b08

000801a4 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   801a4:	b480      	push	{r7}
   801a6:	b083      	sub	sp, #12
   801a8:	af00      	add	r7, sp, #0
   801aa:	4603      	mov	r3, r0
   801ac:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   801ae:	4908      	ldr	r1, [pc, #32]	; (801d0 <NVIC_EnableIRQ+0x2c>)
   801b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
   801b4:	095b      	lsrs	r3, r3, #5
   801b6:	79fa      	ldrb	r2, [r7, #7]
   801b8:	f002 021f 	and.w	r2, r2, #31
   801bc:	2001      	movs	r0, #1
   801be:	fa00 f202 	lsl.w	r2, r0, r2
   801c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   801c6:	bf00      	nop
   801c8:	370c      	adds	r7, #12
   801ca:	46bd      	mov	sp, r7
   801cc:	bc80      	pop	{r7}
   801ce:	4770      	bx	lr
   801d0:	e000e100 	.word	0xe000e100

000801d4 <CAN0_Handler>:
	{23, (7 + 1), (7 + 1), (6 + 1), (3 + 1), 70},
	{24, (6 + 1), (7 + 1), (7 + 1), (3 + 1), 67},
	{25, (7 + 1), (7 + 1), (7 + 1), (3 + 1), 68}
};

void CAN0_Handler(void)   {
   801d4:	b580      	push	{r7, lr}
   801d6:	b082      	sub	sp, #8
   801d8:	af00      	add	r7, sp, #0
	uint32_t ul_status;
	
	
	ul_status = (CAN0 -> CAN_SR);
   801da:	4b11      	ldr	r3, [pc, #68]	; (80220 <CAN0_Handler+0x4c>)
   801dc:	691b      	ldr	r3, [r3, #16]
   801de:	607b      	str	r3, [r7, #4]
	if (ul_status & GLOBAL_MAILBOX_MASK) {
   801e0:	687b      	ldr	r3, [r7, #4]
   801e2:	b2db      	uxtb	r3, r3
   801e4:	2b00      	cmp	r3, #0
   801e6:	d017      	beq.n	80218 <CAN0_Handler+0x44>
		ul_status = CAN0->CAN_MB[1].CAN_MSR ;
   801e8:	4b0d      	ldr	r3, [pc, #52]	; (80220 <CAN0_Handler+0x4c>)
   801ea:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
   801ee:	607b      	str	r3, [r7, #4]
		if ((ul_status & CAN_MSR_MRDY) == CAN_MSR_MRDY) {
   801f0:	687b      	ldr	r3, [r7, #4]
   801f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   801f6:	2b00      	cmp	r3, #0
   801f8:	d00e      	beq.n	80218 <CAN0_Handler+0x44>
			can0_mailbox.ul_mb_idx = 1;
   801fa:	4b0a      	ldr	r3, [pc, #40]	; (80224 <CAN0_Handler+0x50>)
   801fc:	2201      	movs	r2, #1
   801fe:	601a      	str	r2, [r3, #0]
			can0_mailbox.ul_status = ul_status;
   80200:	4a08      	ldr	r2, [pc, #32]	; (80224 <CAN0_Handler+0x50>)
   80202:	687b      	ldr	r3, [r7, #4]
   80204:	6093      	str	r3, [r2, #8]
			dd_can_mailbox_read(&can0_mailbox);
   80206:	4807      	ldr	r0, [pc, #28]	; (80224 <CAN0_Handler+0x50>)
   80208:	4b07      	ldr	r3, [pc, #28]	; (80228 <CAN0_Handler+0x54>)
   8020a:	4798      	blx	r3
			dd_can_extract_mailbox_data(&can0_mailbox);				
   8020c:	4805      	ldr	r0, [pc, #20]	; (80224 <CAN0_Handler+0x50>)
   8020e:	4b07      	ldr	r3, [pc, #28]	; (8022c <CAN0_Handler+0x58>)
   80210:	4798      	blx	r3
			g_ul_recv_status = 1;
   80212:	4b07      	ldr	r3, [pc, #28]	; (80230 <CAN0_Handler+0x5c>)
   80214:	2201      	movs	r2, #1
   80216:	601a      	str	r2, [r3, #0]
		}
		
	}
}
   80218:	bf00      	nop
   8021a:	3708      	adds	r7, #8
   8021c:	46bd      	mov	sp, r7
   8021e:	bd80      	pop	{r7, pc}
   80220:	400b4000 	.word	0x400b4000
   80224:	20070abc 	.word	0x20070abc
   80228:	00080301 	.word	0x00080301
   8022c:	00080235 	.word	0x00080235
   80230:	200709f0 	.word	0x200709f0

00080234 <dd_can_extract_mailbox_data>:

static void dd_can_extract_mailbox_data(can_mb_conf_t *p_mailbox )   {
   80234:	b480      	push	{r7}
   80236:	b085      	sub	sp, #20
   80238:	af00      	add	r7, sp, #0
   8023a:	6078      	str	r0, [r7, #4]
	dd_data_size_type dd_data_size;	
	dd_data_size.four_bytes = (p_mailbox->ul_datal);
   8023c:	687b      	ldr	r3, [r7, #4]
   8023e:	699b      	ldr	r3, [r3, #24]
   80240:	60fb      	str	r3, [r7, #12]
	
	DD_CPU_COMMAND.CPU_SENDER_reg =  dd_data_size.bytes_array[0]  ;
   80242:	7b3a      	ldrb	r2, [r7, #12]
   80244:	4b2b      	ldr	r3, [pc, #172]	; (802f4 <dd_can_extract_mailbox_data+0xc0>)
   80246:	701a      	strb	r2, [r3, #0]
	DD_CPU_COMMAND.CPU_COMMAND_reg = dd_data_size.bytes_array[1]  ;
   80248:	7b7a      	ldrb	r2, [r7, #13]
   8024a:	4b2a      	ldr	r3, [pc, #168]	; (802f4 <dd_can_extract_mailbox_data+0xc0>)
   8024c:	705a      	strb	r2, [r3, #1]
	
	switch(DD_CPU_COMMAND.CPU_SENDER_reg)   {		
   8024e:	4b29      	ldr	r3, [pc, #164]	; (802f4 <dd_can_extract_mailbox_data+0xc0>)
   80250:	781b      	ldrb	r3, [r3, #0]
   80252:	2b0a      	cmp	r3, #10
   80254:	d000      	beq.n	80258 <dd_can_extract_mailbox_data+0x24>
	          			
	          default:
	          break;			
	       }  
	   default:
	   break;
   80256:	e047      	b.n	802e8 <dd_can_extract_mailbox_data+0xb4>
	DD_CPU_COMMAND.CPU_SENDER_reg =  dd_data_size.bytes_array[0]  ;
	DD_CPU_COMMAND.CPU_COMMAND_reg = dd_data_size.bytes_array[1]  ;
	
	switch(DD_CPU_COMMAND.CPU_SENDER_reg)   {		
	   case MASTER_CPU_id :
	       switch(DD_CPU_COMMAND.CPU_COMMAND_reg)    {
   80258:	4b26      	ldr	r3, [pc, #152]	; (802f4 <dd_can_extract_mailbox_data+0xc0>)
   8025a:	785b      	ldrb	r3, [r3, #1]
   8025c:	3b40      	subs	r3, #64	; 0x40
   8025e:	2b06      	cmp	r3, #6
   80260:	d841      	bhi.n	802e6 <dd_can_extract_mailbox_data+0xb2>
   80262:	a201      	add	r2, pc, #4	; (adr r2, 80268 <dd_can_extract_mailbox_data+0x34>)
   80264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80268:	00080285 	.word	0x00080285
   8026c:	00080293 	.word	0x00080293
   80270:	000802a1 	.word	0x000802a1
   80274:	000802af 	.word	0x000802af
   80278:	000802bd 	.word	0x000802bd
   8027c:	000802cb 	.word	0x000802cb
   80280:	000802d9 	.word	0x000802d9
		      case Sensor_status_query :
			     master_requested_sensor_data =1;
   80284:	4b1c      	ldr	r3, [pc, #112]	; (802f8 <dd_can_extract_mailbox_data+0xc4>)
   80286:	2201      	movs	r2, #1
   80288:	701a      	strb	r2, [r3, #0]
				 group_id_reg = 0;	
   8028a:	4b1c      	ldr	r3, [pc, #112]	; (802fc <dd_can_extract_mailbox_data+0xc8>)
   8028c:	2200      	movs	r2, #0
   8028e:	701a      	strb	r2, [r3, #0]
			  break;
   80290:	e02a      	b.n	802e8 <dd_can_extract_mailbox_data+0xb4>
			    
		      case Sensor_status_group_id_1: 
					group_id_reg = SENSOR_GROUP_ID_1;					
   80292:	4b1a      	ldr	r3, [pc, #104]	; (802fc <dd_can_extract_mailbox_data+0xc8>)
   80294:	2201      	movs	r2, #1
   80296:	701a      	strb	r2, [r3, #0]
		            master_requested_sensor_data =1; 
   80298:	4b17      	ldr	r3, [pc, #92]	; (802f8 <dd_can_extract_mailbox_data+0xc4>)
   8029a:	2201      	movs	r2, #1
   8029c:	701a      	strb	r2, [r3, #0]
			  break; 
   8029e:	e023      	b.n	802e8 <dd_can_extract_mailbox_data+0xb4>
			  case Sensor_status_group_id_2: 
			     group_id_reg =SENSOR_GROUP_ID_2;					
   802a0:	4b16      	ldr	r3, [pc, #88]	; (802fc <dd_can_extract_mailbox_data+0xc8>)
   802a2:	2202      	movs	r2, #2
   802a4:	701a      	strb	r2, [r3, #0]
		         master_requested_sensor_data =1; 
   802a6:	4b14      	ldr	r3, [pc, #80]	; (802f8 <dd_can_extract_mailbox_data+0xc4>)
   802a8:	2201      	movs	r2, #1
   802aa:	701a      	strb	r2, [r3, #0]
			  break;     
   802ac:	e01c      	b.n	802e8 <dd_can_extract_mailbox_data+0xb4>
			  case Sensor_status_group_id_3: 
				group_id_reg = SENSOR_GROUP_ID_3;					
   802ae:	4b13      	ldr	r3, [pc, #76]	; (802fc <dd_can_extract_mailbox_data+0xc8>)
   802b0:	2203      	movs	r2, #3
   802b2:	701a      	strb	r2, [r3, #0]
		        master_requested_sensor_data =1; 
   802b4:	4b10      	ldr	r3, [pc, #64]	; (802f8 <dd_can_extract_mailbox_data+0xc4>)
   802b6:	2201      	movs	r2, #1
   802b8:	701a      	strb	r2, [r3, #0]
			  break;  
   802ba:	e015      	b.n	802e8 <dd_can_extract_mailbox_data+0xb4>
			  case Sensor_status_group_id_4: 
				 group_id_reg = SENSOR_GROUP_ID_4;					
   802bc:	4b0f      	ldr	r3, [pc, #60]	; (802fc <dd_can_extract_mailbox_data+0xc8>)
   802be:	2204      	movs	r2, #4
   802c0:	701a      	strb	r2, [r3, #0]
		         master_requested_sensor_data =1; 
   802c2:	4b0d      	ldr	r3, [pc, #52]	; (802f8 <dd_can_extract_mailbox_data+0xc4>)
   802c4:	2201      	movs	r2, #1
   802c6:	701a      	strb	r2, [r3, #0]
			  break;    
   802c8:	e00e      	b.n	802e8 <dd_can_extract_mailbox_data+0xb4>
			  case Sensor_status_group_id_5: 
			     group_id_reg = SENSOR_GROUP_ID_5;					
   802ca:	4b0c      	ldr	r3, [pc, #48]	; (802fc <dd_can_extract_mailbox_data+0xc8>)
   802cc:	2205      	movs	r2, #5
   802ce:	701a      	strb	r2, [r3, #0]
		         master_requested_sensor_data =1; 
   802d0:	4b09      	ldr	r3, [pc, #36]	; (802f8 <dd_can_extract_mailbox_data+0xc4>)
   802d2:	2201      	movs	r2, #1
   802d4:	701a      	strb	r2, [r3, #0]
			  break;   
   802d6:	e007      	b.n	802e8 <dd_can_extract_mailbox_data+0xb4>
			  case Sensor_status_group_id_6: 
			     group_id_reg =SENSOR_GROUP_ID_6;					
   802d8:	4b08      	ldr	r3, [pc, #32]	; (802fc <dd_can_extract_mailbox_data+0xc8>)
   802da:	2206      	movs	r2, #6
   802dc:	701a      	strb	r2, [r3, #0]
		         master_requested_sensor_data =1; 
   802de:	4b06      	ldr	r3, [pc, #24]	; (802f8 <dd_can_extract_mailbox_data+0xc4>)
   802e0:	2201      	movs	r2, #1
   802e2:	701a      	strb	r2, [r3, #0]
			  break;   
   802e4:	e000      	b.n	802e8 <dd_can_extract_mailbox_data+0xb4>
	          			
	          default:
	          break;			
   802e6:	bf00      	nop
	       }  
	   default:
	   break;
   802e8:	bf00      	nop
	}	
}
   802ea:	bf00      	nop
   802ec:	3714      	adds	r7, #20
   802ee:	46bd      	mov	sp, r7
   802f0:	bc80      	pop	{r7}
   802f2:	4770      	bx	lr
   802f4:	20070ab8 	.word	0x20070ab8
   802f8:	200709f4 	.word	0x200709f4
   802fc:	20070adc 	.word	0x20070adc

00080300 <dd_can_mailbox_read>:


static uint32_t dd_can_mailbox_read(can_mb_conf_t *p_mailbox)   {
   80300:	b480      	push	{r7}
   80302:	b087      	sub	sp, #28
   80304:	af00      	add	r7, sp, #0
   80306:	6078      	str	r0, [r7, #4]

	uint32_t ul_status;
	uint8_t uc_index;
	uint32_t ul_retval;

	ul_retval = 0;
   80308:	2300      	movs	r3, #0
   8030a:	617b      	str	r3, [r7, #20]
	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   8030c:	687b      	ldr	r3, [r7, #4]
   8030e:	681b      	ldr	r3, [r3, #0]
   80310:	74fb      	strb	r3, [r7, #19]
	ul_status = p_mailbox->ul_status;
   80312:	687b      	ldr	r3, [r7, #4]
   80314:	689b      	ldr	r3, [r3, #8]
   80316:	60fb      	str	r3, [r7, #12]
	 /* Check whether there is overwriting happening in Receive with * Overwrite mode,
	 * or there're messages lost in Receive mode. */
	 
	if ((ul_status & CAN_MSR_MRDY) && (ul_status & CAN_MSR_MMI)) {	ul_retval = CAN_MAILBOX_RX_OVER;	}
   80318:	68fb      	ldr	r3, [r7, #12]
   8031a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   8031e:	2b00      	cmp	r3, #0
   80320:	d006      	beq.n	80330 <dd_can_mailbox_read+0x30>
   80322:	68fb      	ldr	r3, [r7, #12]
   80324:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   80328:	2b00      	cmp	r3, #0
   8032a:	d001      	beq.n	80330 <dd_can_mailbox_read+0x30>
   8032c:	2302      	movs	r3, #2
   8032e:	617b      	str	r3, [r7, #20]

	/* Read the message family ID. */
	p_mailbox->ul_fid =	CAN0->CAN_MB[uc_index].CAN_MFID & CAN_MFID_MFID_Msk;	
   80330:	4a26      	ldr	r2, [pc, #152]	; (803cc <dd_can_mailbox_read+0xcc>)
   80332:	7cfb      	ldrb	r3, [r7, #19]
   80334:	015b      	lsls	r3, r3, #5
   80336:	4413      	add	r3, r2
   80338:	f503 7303 	add.w	r3, r3, #524	; 0x20c
   8033c:	681b      	ldr	r3, [r3, #0]
   8033e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   80342:	687b      	ldr	r3, [r7, #4]
   80344:	615a      	str	r2, [r3, #20]

	/* Read received data length. */
	p_mailbox->uc_length = (ul_status & CAN_MSR_MDLC_Msk) >> CAN_MSR_MDLC_Pos;
   80346:	68fb      	ldr	r3, [r7, #12]
   80348:	0c1b      	lsrs	r3, r3, #16
   8034a:	b2db      	uxtb	r3, r3
   8034c:	f003 030f 	and.w	r3, r3, #15
   80350:	b2da      	uxtb	r2, r3
   80352:	687b      	ldr	r3, [r7, #4]
   80354:	719a      	strb	r2, [r3, #6]
	
	/* Read received data. */
	p_mailbox->ul_datal = CAN0->CAN_MB[uc_index].CAN_MDL;
   80356:	4a1d      	ldr	r2, [pc, #116]	; (803cc <dd_can_mailbox_read+0xcc>)
   80358:	7cfb      	ldrb	r3, [r7, #19]
   8035a:	015b      	lsls	r3, r3, #5
   8035c:	4413      	add	r3, r2
   8035e:	f503 7305 	add.w	r3, r3, #532	; 0x214
   80362:	681a      	ldr	r2, [r3, #0]
   80364:	687b      	ldr	r3, [r7, #4]
   80366:	619a      	str	r2, [r3, #24]
	p_mailbox->ul_datah = CAN0->CAN_MB[uc_index].CAN_MDH;
   80368:	4a18      	ldr	r2, [pc, #96]	; (803cc <dd_can_mailbox_read+0xcc>)
   8036a:	7cfb      	ldrb	r3, [r7, #19]
   8036c:	015b      	lsls	r3, r3, #5
   8036e:	4413      	add	r3, r2
   80370:	f503 7306 	add.w	r3, r3, #536	; 0x218
   80374:	681a      	ldr	r2, [r3, #0]
   80376:	687b      	ldr	r3, [r7, #4]
   80378:	61da      	str	r2, [r3, #28]
	
	
	/* Read the mailbox status again to check whether the software needs to
	 * re-read mailbox data register. */
	p_mailbox->ul_status = CAN0->CAN_MB[uc_index].CAN_MSR;
   8037a:	4a14      	ldr	r2, [pc, #80]	; (803cc <dd_can_mailbox_read+0xcc>)
   8037c:	7cfb      	ldrb	r3, [r7, #19]
   8037e:	015b      	lsls	r3, r3, #5
   80380:	4413      	add	r3, r2
   80382:	f503 7304 	add.w	r3, r3, #528	; 0x210
   80386:	681a      	ldr	r2, [r3, #0]
   80388:	687b      	ldr	r3, [r7, #4]
   8038a:	609a      	str	r2, [r3, #8]
	ul_status = p_mailbox->ul_status;
   8038c:	687b      	ldr	r3, [r7, #4]
   8038e:	689b      	ldr	r3, [r3, #8]
   80390:	60fb      	str	r3, [r7, #12]
	if (ul_status & CAN_MSR_MMI) {ul_retval |= CAN_MAILBOX_RX_NEED_RD_AGAIN;	}
   80392:	68fb      	ldr	r3, [r7, #12]
   80394:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   80398:	2b00      	cmp	r3, #0
   8039a:	d003      	beq.n	803a4 <dd_can_mailbox_read+0xa4>
   8039c:	697b      	ldr	r3, [r7, #20]
   8039e:	f043 0304 	orr.w	r3, r3, #4
   803a2:	617b      	str	r3, [r7, #20]
	else { ul_retval |= CAN_MAILBOX_TRANSFER_OK; }		
		
	/* Enable next receive process. */	 // Allows the reception of the next message
	CAN0->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MTCR |CAN_MCR_MDLC(p_mailbox->uc_length);    
   803a4:	4909      	ldr	r1, [pc, #36]	; (803cc <dd_can_mailbox_read+0xcc>)
   803a6:	7cfb      	ldrb	r3, [r7, #19]
   803a8:	687a      	ldr	r2, [r7, #4]
   803aa:	7992      	ldrb	r2, [r2, #6]
   803ac:	0412      	lsls	r2, r2, #16
   803ae:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   803b2:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
   803b6:	015b      	lsls	r3, r3, #5
   803b8:	440b      	add	r3, r1
   803ba:	f503 7307 	add.w	r3, r3, #540	; 0x21c
   803be:	601a      	str	r2, [r3, #0]
	return ul_retval;
   803c0:	697b      	ldr	r3, [r7, #20]
}
   803c2:	4618      	mov	r0, r3
   803c4:	371c      	adds	r7, #28
   803c6:	46bd      	mov	sp, r7
   803c8:	bc80      	pop	{r7}
   803ca:	4770      	bx	lr
   803cc:	400b4000 	.word	0x400b4000

000803d0 <dd_can_mailbox_write>:

		
uint32_t dd_can_mailbox_write(can_mb_conf_t *p_mailbox)
{
   803d0:	b480      	push	{r7}
   803d2:	b085      	sub	sp, #20
   803d4:	af00      	add	r7, sp, #0
   803d6:	6078      	str	r0, [r7, #4]
	uint32_t ul_status;
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   803d8:	687b      	ldr	r3, [r7, #4]
   803da:	681b      	ldr	r3, [r3, #0]
   803dc:	73fb      	strb	r3, [r7, #15]
	/* Read the mailbox status firstly to check whether the mailbox is ready
	 *or not. */
	p_mailbox->ul_status = CAN0->CAN_MB[uc_index].CAN_MSR;
   803de:	4a2a      	ldr	r2, [pc, #168]	; (80488 <dd_can_mailbox_write+0xb8>)
   803e0:	7bfb      	ldrb	r3, [r7, #15]
   803e2:	015b      	lsls	r3, r3, #5
   803e4:	4413      	add	r3, r2
   803e6:	f503 7304 	add.w	r3, r3, #528	; 0x210
   803ea:	681a      	ldr	r2, [r3, #0]
   803ec:	687b      	ldr	r3, [r7, #4]
   803ee:	609a      	str	r2, [r3, #8]
	ul_status = p_mailbox->ul_status;
   803f0:	687b      	ldr	r3, [r7, #4]
   803f2:	689b      	ldr	r3, [r3, #8]
   803f4:	60bb      	str	r3, [r7, #8]
	if (!(ul_status & CAN_MSR_MRDY)) {
   803f6:	68bb      	ldr	r3, [r7, #8]
   803f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   803fc:	2b00      	cmp	r3, #0
   803fe:	d101      	bne.n	80404 <dd_can_mailbox_write+0x34>
		return CAN_MAILBOX_NOT_READY;
   80400:	2301      	movs	r3, #1
   80402:	e03b      	b.n	8047c <dd_can_mailbox_write+0xac>
	}

	/* Write transmit identifier. */
	if (p_mailbox->uc_id_ver) { CAN0->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id | CAN_MAM_MIDE;	}
   80404:	687b      	ldr	r3, [r7, #4]
   80406:	795b      	ldrb	r3, [r3, #5]
   80408:	2b00      	cmp	r3, #0
   8040a:	d00b      	beq.n	80424 <dd_can_mailbox_write+0x54>
   8040c:	491e      	ldr	r1, [pc, #120]	; (80488 <dd_can_mailbox_write+0xb8>)
   8040e:	7bfb      	ldrb	r3, [r7, #15]
   80410:	687a      	ldr	r2, [r7, #4]
   80412:	6912      	ldr	r2, [r2, #16]
   80414:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   80418:	015b      	lsls	r3, r3, #5
   8041a:	440b      	add	r3, r1
   8041c:	f503 7302 	add.w	r3, r3, #520	; 0x208
   80420:	601a      	str	r2, [r3, #0]
   80422:	e008      	b.n	80436 <dd_can_mailbox_write+0x66>
                         else {	CAN0->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;}
   80424:	4918      	ldr	r1, [pc, #96]	; (80488 <dd_can_mailbox_write+0xb8>)
   80426:	7bfb      	ldrb	r3, [r7, #15]
   80428:	687a      	ldr	r2, [r7, #4]
   8042a:	6912      	ldr	r2, [r2, #16]
   8042c:	015b      	lsls	r3, r3, #5
   8042e:	440b      	add	r3, r1
   80430:	f503 7302 	add.w	r3, r3, #520	; 0x208
   80434:	601a      	str	r2, [r3, #0]

	/* Write transmit data into mailbox data register. */
	CAN0->CAN_MB[uc_index].CAN_MDL = p_mailbox->ul_datal;
   80436:	4914      	ldr	r1, [pc, #80]	; (80488 <dd_can_mailbox_write+0xb8>)
   80438:	7bfb      	ldrb	r3, [r7, #15]
   8043a:	687a      	ldr	r2, [r7, #4]
   8043c:	6992      	ldr	r2, [r2, #24]
   8043e:	015b      	lsls	r3, r3, #5
   80440:	440b      	add	r3, r1
   80442:	f503 7305 	add.w	r3, r3, #532	; 0x214
   80446:	601a      	str	r2, [r3, #0]
	if (p_mailbox->uc_length > 4) {  CAN0->CAN_MB[uc_index].CAN_MDH = p_mailbox->ul_datah;	}
   80448:	687b      	ldr	r3, [r7, #4]
   8044a:	799b      	ldrb	r3, [r3, #6]
   8044c:	2b04      	cmp	r3, #4
   8044e:	d908      	bls.n	80462 <dd_can_mailbox_write+0x92>
   80450:	490d      	ldr	r1, [pc, #52]	; (80488 <dd_can_mailbox_write+0xb8>)
   80452:	7bfb      	ldrb	r3, [r7, #15]
   80454:	687a      	ldr	r2, [r7, #4]
   80456:	69d2      	ldr	r2, [r2, #28]
   80458:	015b      	lsls	r3, r3, #5
   8045a:	440b      	add	r3, r1
   8045c:	f503 7306 	add.w	r3, r3, #536	; 0x218
   80460:	601a      	str	r2, [r3, #0]

	/* Write transmit data length into mailbox control register. */
	CAN0->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MDLC(p_mailbox->uc_length);
   80462:	4909      	ldr	r1, [pc, #36]	; (80488 <dd_can_mailbox_write+0xb8>)
   80464:	7bfb      	ldrb	r3, [r7, #15]
   80466:	687a      	ldr	r2, [r7, #4]
   80468:	7992      	ldrb	r2, [r2, #6]
   8046a:	0412      	lsls	r2, r2, #16
   8046c:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   80470:	015b      	lsls	r3, r3, #5
   80472:	440b      	add	r3, r1
   80474:	f503 7307 	add.w	r3, r3, #540	; 0x21c
   80478:	601a      	str	r2, [r3, #0]

	return CAN_MAILBOX_TRANSFER_OK;
   8047a:	2300      	movs	r3, #0
}
   8047c:	4618      	mov	r0, r3
   8047e:	3714      	adds	r7, #20
   80480:	46bd      	mov	sp, r7
   80482:	bc80      	pop	{r7}
   80484:	4770      	bx	lr
   80486:	bf00      	nop
   80488:	400b4000 	.word	0x400b4000

0008048c <dd_can_global_send_transfer_cmd>:

void dd_can_global_send_transfer_cmd(uint8_t uc_mask)
{
   8048c:	b480      	push	{r7}
   8048e:	b085      	sub	sp, #20
   80490:	af00      	add	r7, sp, #0
   80492:	4603      	mov	r3, r0
   80494:	71fb      	strb	r3, [r7, #7]
	uint32_t ul_reg;

	ul_reg = CAN0->CAN_TCR & ((uint32_t) ~GLOBAL_MAILBOX_MASK);
   80496:	4b07      	ldr	r3, [pc, #28]	; (804b4 <dd_can_global_send_transfer_cmd+0x28>)
   80498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   8049a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   8049e:	60fb      	str	r3, [r7, #12]
	CAN0->CAN_TCR = ul_reg | uc_mask;
   804a0:	4904      	ldr	r1, [pc, #16]	; (804b4 <dd_can_global_send_transfer_cmd+0x28>)
   804a2:	79fa      	ldrb	r2, [r7, #7]
   804a4:	68fb      	ldr	r3, [r7, #12]
   804a6:	4313      	orrs	r3, r2
   804a8:	624b      	str	r3, [r1, #36]	; 0x24
}
   804aa:	bf00      	nop
   804ac:	3714      	adds	r7, #20
   804ae:	46bd      	mov	sp, r7
   804b0:	bc80      	pop	{r7}
   804b2:	4770      	bx	lr
   804b4:	400b4000 	.word	0x400b4000

000804b8 <dd_can_mailbox_conf>:


 void dd_can_mailbox_conf(can_mb_conf_t *p_mailbox)
{
   804b8:	b480      	push	{r7}
   804ba:	b085      	sub	sp, #20
   804bc:	af00      	add	r7, sp, #0
   804be:	6078      	str	r0, [r7, #4]
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   804c0:	687b      	ldr	r3, [r7, #4]
   804c2:	681b      	ldr	r3, [r3, #0]
   804c4:	73fb      	strb	r3, [r7, #15]
	/* Check the object type of the mailbox. If it's used to disable the
	 * mailbox, reset the whole mailbox. */
	if (!p_mailbox->uc_obj_type) {
   804c6:	687b      	ldr	r3, [r7, #4]
   804c8:	791b      	ldrb	r3, [r3, #4]
   804ca:	2b00      	cmp	r3, #0
   804cc:	d12f      	bne.n	8052e <dd_can_mailbox_conf+0x76>
		CAN0->CAN_MB[uc_index].CAN_MMR = 0;
   804ce:	4a35      	ldr	r2, [pc, #212]	; (805a4 <dd_can_mailbox_conf+0xec>)
   804d0:	7bfb      	ldrb	r3, [r7, #15]
   804d2:	3310      	adds	r3, #16
   804d4:	015b      	lsls	r3, r3, #5
   804d6:	4413      	add	r3, r2
   804d8:	2200      	movs	r2, #0
   804da:	601a      	str	r2, [r3, #0]
		CAN0->CAN_MB[uc_index].CAN_MAM = 0;
   804dc:	4a31      	ldr	r2, [pc, #196]	; (805a4 <dd_can_mailbox_conf+0xec>)
   804de:	7bfb      	ldrb	r3, [r7, #15]
   804e0:	3310      	adds	r3, #16
   804e2:	015b      	lsls	r3, r3, #5
   804e4:	4413      	add	r3, r2
   804e6:	3304      	adds	r3, #4
   804e8:	2200      	movs	r2, #0
   804ea:	601a      	str	r2, [r3, #0]
		CAN0->CAN_MB[uc_index].CAN_MID = 0;
   804ec:	4a2d      	ldr	r2, [pc, #180]	; (805a4 <dd_can_mailbox_conf+0xec>)
   804ee:	7bfb      	ldrb	r3, [r7, #15]
   804f0:	015b      	lsls	r3, r3, #5
   804f2:	4413      	add	r3, r2
   804f4:	f503 7302 	add.w	r3, r3, #520	; 0x208
   804f8:	2200      	movs	r2, #0
   804fa:	601a      	str	r2, [r3, #0]
		CAN0->CAN_MB[uc_index].CAN_MDL = 0;
   804fc:	4a29      	ldr	r2, [pc, #164]	; (805a4 <dd_can_mailbox_conf+0xec>)
   804fe:	7bfb      	ldrb	r3, [r7, #15]
   80500:	015b      	lsls	r3, r3, #5
   80502:	4413      	add	r3, r2
   80504:	f503 7305 	add.w	r3, r3, #532	; 0x214
   80508:	2200      	movs	r2, #0
   8050a:	601a      	str	r2, [r3, #0]
		CAN0->CAN_MB[uc_index].CAN_MDH = 0;
   8050c:	4a25      	ldr	r2, [pc, #148]	; (805a4 <dd_can_mailbox_conf+0xec>)
   8050e:	7bfb      	ldrb	r3, [r7, #15]
   80510:	015b      	lsls	r3, r3, #5
   80512:	4413      	add	r3, r2
   80514:	f503 7306 	add.w	r3, r3, #536	; 0x218
   80518:	2200      	movs	r2, #0
   8051a:	601a      	str	r2, [r3, #0]
		CAN0->CAN_MB[uc_index].CAN_MCR = 0;
   8051c:	4a21      	ldr	r2, [pc, #132]	; (805a4 <dd_can_mailbox_conf+0xec>)
   8051e:	7bfb      	ldrb	r3, [r7, #15]
   80520:	015b      	lsls	r3, r3, #5
   80522:	4413      	add	r3, r2
   80524:	f503 7307 	add.w	r3, r3, #540	; 0x21c
   80528:	2200      	movs	r2, #0
   8052a:	601a      	str	r2, [r3, #0]
		return;
   8052c:	e035      	b.n	8059a <dd_can_mailbox_conf+0xe2>
	}
	
	/* Set the priority in Transmit mode. */                                                                   
	CAN0->CAN_MB[uc_index].CAN_MMR = (CAN0->CAN_MB[uc_index].CAN_MMR &  ~CAN_MMR_PRIOR_Msk) | (p_mailbox->uc_tx_prio << CAN_MMR_PRIOR_Pos);  
   8052e:	481d      	ldr	r0, [pc, #116]	; (805a4 <dd_can_mailbox_conf+0xec>)
   80530:	7bfb      	ldrb	r3, [r7, #15]
   80532:	491c      	ldr	r1, [pc, #112]	; (805a4 <dd_can_mailbox_conf+0xec>)
   80534:	7bfa      	ldrb	r2, [r7, #15]
   80536:	3210      	adds	r2, #16
   80538:	0152      	lsls	r2, r2, #5
   8053a:	440a      	add	r2, r1
   8053c:	6812      	ldr	r2, [r2, #0]
   8053e:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
   80542:	6879      	ldr	r1, [r7, #4]
   80544:	79c9      	ldrb	r1, [r1, #7]
   80546:	0409      	lsls	r1, r1, #16
   80548:	430a      	orrs	r2, r1
   8054a:	3310      	adds	r3, #16
   8054c:	015b      	lsls	r3, r3, #5
   8054e:	4403      	add	r3, r0
   80550:	601a      	str	r2, [r3, #0]
	/* Set the message ID and message acceptance mask for the mailbox in * other modes. */	
		CAN0 ->CAN_MB[uc_index].CAN_MAM = p_mailbox->ul_id_msk;
   80552:	4914      	ldr	r1, [pc, #80]	; (805a4 <dd_can_mailbox_conf+0xec>)
   80554:	7bfb      	ldrb	r3, [r7, #15]
   80556:	687a      	ldr	r2, [r7, #4]
   80558:	68d2      	ldr	r2, [r2, #12]
   8055a:	3310      	adds	r3, #16
   8055c:	015b      	lsls	r3, r3, #5
   8055e:	440b      	add	r3, r1
   80560:	3304      	adds	r3, #4
   80562:	601a      	str	r2, [r3, #0]
		CAN0 ->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;	
   80564:	490f      	ldr	r1, [pc, #60]	; (805a4 <dd_can_mailbox_conf+0xec>)
   80566:	7bfb      	ldrb	r3, [r7, #15]
   80568:	687a      	ldr	r2, [r7, #4]
   8056a:	6912      	ldr	r2, [r2, #16]
   8056c:	015b      	lsls	r3, r3, #5
   8056e:	440b      	add	r3, r1
   80570:	f503 7302 	add.w	r3, r3, #520	; 0x208
   80574:	601a      	str	r2, [r3, #0]

	/* Set up mailbox in one of the five different modes. */                                                      
	CAN0 ->CAN_MB[uc_index].CAN_MMR = (CAN0 ->CAN_MB[uc_index].CAN_MMR & ~CAN_MMR_MOT_Msk) | (p_mailbox->uc_obj_type << CAN_MMR_MOT_Pos);		
   80576:	480b      	ldr	r0, [pc, #44]	; (805a4 <dd_can_mailbox_conf+0xec>)
   80578:	7bfb      	ldrb	r3, [r7, #15]
   8057a:	490a      	ldr	r1, [pc, #40]	; (805a4 <dd_can_mailbox_conf+0xec>)
   8057c:	7bfa      	ldrb	r2, [r7, #15]
   8057e:	3210      	adds	r2, #16
   80580:	0152      	lsls	r2, r2, #5
   80582:	440a      	add	r2, r1
   80584:	6812      	ldr	r2, [r2, #0]
   80586:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
   8058a:	6879      	ldr	r1, [r7, #4]
   8058c:	7909      	ldrb	r1, [r1, #4]
   8058e:	0609      	lsls	r1, r1, #24
   80590:	430a      	orrs	r2, r1
   80592:	3310      	adds	r3, #16
   80594:	015b      	lsls	r3, r3, #5
   80596:	4403      	add	r3, r0
   80598:	601a      	str	r2, [r3, #0]
}
   8059a:	3714      	adds	r7, #20
   8059c:	46bd      	mov	sp, r7
   8059e:	bc80      	pop	{r7}
   805a0:	4770      	bx	lr
   805a2:	bf00      	nop
   805a4:	400b4000 	.word	0x400b4000

000805a8 <SENSOR_DD_INIT_CAN>:
	p_mailbox->ul_datal = 0;
	p_mailbox->ul_datah = 0;
}


void SENSOR_DD_INIT_CAN()     {
   805a8:	b580      	push	{r7, lr}
   805aa:	b08e      	sub	sp, #56	; 0x38
   805ac:	af00      	add	r7, sp, #0
	can_bit_timing_t  *p_bit_time ;	
	p_bit_time = (can_bit_timing_t *)&can_bit_time[6];
   805ae:	4b53      	ldr	r3, [pc, #332]	; (806fc <SENSOR_DD_INIT_CAN+0x154>)
   805b0:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t ul_flag;
	uint32_t ul_tick;
	uint8_t uc_prescale = 120;	
   805b2:	2378      	movs	r3, #120	; 0x78
   805b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t ul_sysclk;	
	CAN0 ->CAN_WPMR = 0x43414E00;  //Can write protection disabled
   805b8:	4b51      	ldr	r3, [pc, #324]	; (80700 <SENSOR_DD_INIT_CAN+0x158>)
   805ba:	4a52      	ldr	r2, [pc, #328]	; (80704 <SENSOR_DD_INIT_CAN+0x15c>)
   805bc:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	CAN0 ->CAN_MR &= ~CAN_MR_CANEN ;  //0xFFFFFFFE; // DISABLE CAN0	
   805c0:	4a4f      	ldr	r2, [pc, #316]	; (80700 <SENSOR_DD_INIT_CAN+0x158>)
   805c2:	4b4f      	ldr	r3, [pc, #316]	; (80700 <SENSOR_DD_INIT_CAN+0x158>)
   805c4:	681b      	ldr	r3, [r3, #0]
   805c6:	f023 0301 	bic.w	r3, r3, #1
   805ca:	6013      	str	r3, [r2, #0]
	CAN0->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) | CAN_BR_PROPAG(p_bit_time->uc_prog - 1) | CAN_BR_SJW(p_bit_time->uc_sjw - 1) |	CAN_BR_BRP(uc_prescale - 1);
   805cc:	494c      	ldr	r1, [pc, #304]	; (80700 <SENSOR_DD_INIT_CAN+0x158>)
   805ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
   805d0:	78db      	ldrb	r3, [r3, #3]
   805d2:	3b01      	subs	r3, #1
   805d4:	f003 0207 	and.w	r2, r3, #7
   805d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   805da:	789b      	ldrb	r3, [r3, #2]
   805dc:	3b01      	subs	r3, #1
   805de:	011b      	lsls	r3, r3, #4
   805e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
   805e4:	431a      	orrs	r2, r3
   805e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   805e8:	785b      	ldrb	r3, [r3, #1]
   805ea:	3b01      	subs	r3, #1
   805ec:	021b      	lsls	r3, r3, #8
   805ee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
   805f2:	431a      	orrs	r2, r3
   805f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   805f6:	791b      	ldrb	r3, [r3, #4]
   805f8:	3b01      	subs	r3, #1
   805fa:	031b      	lsls	r3, r3, #12
   805fc:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
   80600:	431a      	orrs	r2, r3
   80602:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   80606:	3b01      	subs	r3, #1
   80608:	041b      	lsls	r3, r3, #16
   8060a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
   8060e:	4313      	orrs	r3, r2
   80610:	614b      	str	r3, [r1, #20]
	can_mb_conf_t mb_config_t;
	
	//RESET ALL MAIL BOX 	
	//can_bit_timing_t *p_bit_time;
	/* Set the mailbox object type parameter to disable the mailbox. */	
	mb_config_t.uc_obj_type = CAN_MB_DISABLE_MODE;
   80612:	2300      	movs	r3, #0
   80614:	723b      	strb	r3, [r7, #8]
	for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   80616:	2300      	movs	r3, #0
   80618:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   8061c:	e00b      	b.n	80636 <SENSOR_DD_INIT_CAN+0x8e>
		mb_config_t.ul_mb_idx = i;
   8061e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   80622:	607b      	str	r3, [r7, #4]
		dd_can_mailbox_conf(&mb_config_t);
   80624:	1d3b      	adds	r3, r7, #4
   80626:	4618      	mov	r0, r3
   80628:	4b37      	ldr	r3, [pc, #220]	; (80708 <SENSOR_DD_INIT_CAN+0x160>)
   8062a:	4798      	blx	r3
	
	//RESET ALL MAIL BOX 	
	//can_bit_timing_t *p_bit_time;
	/* Set the mailbox object type parameter to disable the mailbox. */	
	mb_config_t.uc_obj_type = CAN_MB_DISABLE_MODE;
	for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   8062c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   80630:	3301      	adds	r3, #1
   80632:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   80636:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   8063a:	2b07      	cmp	r3, #7
   8063c:	d9ef      	bls.n	8061e <SENSOR_DD_INIT_CAN+0x76>
		mb_config_t.ul_mb_idx = i;
		dd_can_mailbox_conf(&mb_config_t);
	}
	// ALL MAIL BOX HAS BEEN RESET		
	CAN0->CAN_MR |= CAN_MR_CANEN ;  //0x00000001; // CAN IS ENABLED
   8063e:	4a30      	ldr	r2, [pc, #192]	; (80700 <SENSOR_DD_INIT_CAN+0x158>)
   80640:	4b2f      	ldr	r3, [pc, #188]	; (80700 <SENSOR_DD_INIT_CAN+0x158>)
   80642:	681b      	ldr	r3, [r3, #0]
   80644:	f043 0301 	orr.w	r3, r3, #1
   80648:	6013      	str	r3, [r2, #0]
	
	/* Wait until the CAN is synchronized with the bus activity. */
	ul_flag = 0;
   8064a:	2300      	movs	r3, #0
   8064c:	637b      	str	r3, [r7, #52]	; 0x34
	ul_tick = 0;
   8064e:	2300      	movs	r3, #0
   80650:	633b      	str	r3, [r7, #48]	; 0x30
	while  (!(ul_flag & CAN_SR_WAKEUP) && (ul_tick < CAN_TIMEOUT))    {//(!(ul_flag & 0x100000 ) && (ul_tick < CAN_TIMEOUT)) {  //check can_bus wakeup bit
   80652:	e005      	b.n	80660 <SENSOR_DD_INIT_CAN+0xb8>
		ul_flag = (CAN0->CAN_SR);		
   80654:	4b2a      	ldr	r3, [pc, #168]	; (80700 <SENSOR_DD_INIT_CAN+0x158>)
   80656:	691b      	ldr	r3, [r3, #16]
   80658:	637b      	str	r3, [r7, #52]	; 0x34
		ul_tick++;
   8065a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   8065c:	3301      	adds	r3, #1
   8065e:	633b      	str	r3, [r7, #48]	; 0x30
	CAN0->CAN_MR |= CAN_MR_CANEN ;  //0x00000001; // CAN IS ENABLED
	
	/* Wait until the CAN is synchronized with the bus activity. */
	ul_flag = 0;
	ul_tick = 0;
	while  (!(ul_flag & CAN_SR_WAKEUP) && (ul_tick < CAN_TIMEOUT))    {//(!(ul_flag & 0x100000 ) && (ul_tick < CAN_TIMEOUT)) {  //check can_bus wakeup bit
   80660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   80662:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
   80666:	2b00      	cmp	r3, #0
   80668:	d103      	bne.n	80672 <SENSOR_DD_INIT_CAN+0xca>
   8066a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   8066c:	4a27      	ldr	r2, [pc, #156]	; (8070c <SENSOR_DD_INIT_CAN+0x164>)
   8066e:	4293      	cmp	r3, r2
   80670:	d9f0      	bls.n	80654 <SENSOR_DD_INIT_CAN+0xac>
		ul_flag = (CAN0->CAN_SR);		
		ul_tick++;
	}

	/* Timeout or the CAN module has been synchronized with the bus. */
	if (CAN_TIMEOUT == ul_tick) { puts("CAN initialization (sync) ERROR" STRING_EOL);	} 
   80672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   80674:	4a26      	ldr	r2, [pc, #152]	; (80710 <SENSOR_DD_INIT_CAN+0x168>)
   80676:	4293      	cmp	r3, r2
   80678:	d103      	bne.n	80682 <SENSOR_DD_INIT_CAN+0xda>
   8067a:	4826      	ldr	r0, [pc, #152]	; (80714 <SENSOR_DD_INIT_CAN+0x16c>)
   8067c:	4b26      	ldr	r3, [pc, #152]	; (80718 <SENSOR_DD_INIT_CAN+0x170>)
   8067e:	4798      	blx	r3
   80680:	e002      	b.n	80688 <SENSOR_DD_INIT_CAN+0xe0>
	else {	puts("CAN initialization is completed." STRING_EOL);
   80682:	4826      	ldr	r0, [pc, #152]	; (8071c <SENSOR_DD_INIT_CAN+0x174>)
   80684:	4b24      	ldr	r3, [pc, #144]	; (80718 <SENSOR_DD_INIT_CAN+0x170>)
   80686:	4798      	blx	r3
	}	
	//NVIC-> ISER reset_mailbox_conf(&can0_mailbox);
	can0_mailbox.ul_mb_idx =   MAILBOX_1;
   80688:	4b25      	ldr	r3, [pc, #148]	; (80720 <SENSOR_DD_INIT_CAN+0x178>)
   8068a:	2201      	movs	r2, #1
   8068c:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_RX_MODE ;
   8068e:	4b24      	ldr	r3, [pc, #144]	; (80720 <SENSOR_DD_INIT_CAN+0x178>)
   80690:	2201      	movs	r2, #1
   80692:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = 0;
   80694:	4b22      	ldr	r3, [pc, #136]	; (80720 <SENSOR_DD_INIT_CAN+0x178>)
   80696:	2200      	movs	r2, #0
   80698:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   8069a:	4b21      	ldr	r3, [pc, #132]	; (80720 <SENSOR_DD_INIT_CAN+0x178>)
   8069c:	2200      	movs	r2, #0
   8069e:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk =  CAN_MFID_MFID_VA_dd(CAN_MASK);
   806a0:	4b1f      	ldr	r3, [pc, #124]	; (80720 <SENSOR_DD_INIT_CAN+0x178>)
   806a2:	4a20      	ldr	r2, [pc, #128]	; (80724 <SENSOR_DD_INIT_CAN+0x17c>)
   806a4:	60da      	str	r2, [r3, #12]
	can0_mailbox.ul_id = CAN_MID_MIDvA_dd(SENSOR_CPU_id) ;
   806a6:	4b1e      	ldr	r3, [pc, #120]	; (80720 <SENSOR_DD_INIT_CAN+0x178>)
   806a8:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
   806ac:	611a      	str	r2, [r3, #16]
	dd_can_mailbox_conf(&can0_mailbox);
   806ae:	481c      	ldr	r0, [pc, #112]	; (80720 <SENSOR_DD_INIT_CAN+0x178>)
   806b0:	4b15      	ldr	r3, [pc, #84]	; (80708 <SENSOR_DD_INIT_CAN+0x160>)
   806b2:	4798      	blx	r3
	NVIC_EnableIRQ(CAN0_IRQn);
   806b4:	202b      	movs	r0, #43	; 0x2b
   806b6:	4b1c      	ldr	r3, [pc, #112]	; (80728 <SENSOR_DD_INIT_CAN+0x180>)
   806b8:	4798      	blx	r3
	CAN0->CAN_IER = CAN_IER_MB1;
   806ba:	4b11      	ldr	r3, [pc, #68]	; (80700 <SENSOR_DD_INIT_CAN+0x158>)
   806bc:	2202      	movs	r2, #2
   806be:	605a      	str	r2, [r3, #4]
	
	can0_mailbox.ul_mb_idx =   MAILBOX_0;
   806c0:	4b17      	ldr	r3, [pc, #92]	; (80720 <SENSOR_DD_INIT_CAN+0x178>)
   806c2:	2200      	movs	r2, #0
   806c4:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_TX_MODE ;
   806c6:	4b16      	ldr	r3, [pc, #88]	; (80720 <SENSOR_DD_INIT_CAN+0x178>)
   806c8:	2203      	movs	r2, #3
   806ca:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = 1;
   806cc:	4b14      	ldr	r3, [pc, #80]	; (80720 <SENSOR_DD_INIT_CAN+0x178>)
   806ce:	2201      	movs	r2, #1
   806d0:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   806d2:	4b13      	ldr	r3, [pc, #76]	; (80720 <SENSOR_DD_INIT_CAN+0x178>)
   806d4:	2200      	movs	r2, #0
   806d6:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk =CAN_MFID_MFID_VA_dd(CAN_MASK) ;
   806d8:	4b11      	ldr	r3, [pc, #68]	; (80720 <SENSOR_DD_INIT_CAN+0x178>)
   806da:	4a12      	ldr	r2, [pc, #72]	; (80724 <SENSOR_DD_INIT_CAN+0x17c>)
   806dc:	60da      	str	r2, [r3, #12]
	can0_mailbox.ul_id = CAN_MID_MIDvA_dd(MASTER_CPU_id);
   806de:	4b10      	ldr	r3, [pc, #64]	; (80720 <SENSOR_DD_INIT_CAN+0x178>)
   806e0:	f44f 1220 	mov.w	r2, #2621440	; 0x280000
   806e4:	611a      	str	r2, [r3, #16]
	dd_can_mailbox_conf(&can0_mailbox);	
   806e6:	480e      	ldr	r0, [pc, #56]	; (80720 <SENSOR_DD_INIT_CAN+0x178>)
   806e8:	4b07      	ldr	r3, [pc, #28]	; (80708 <SENSOR_DD_INIT_CAN+0x160>)
   806ea:	4798      	blx	r3
	
	dd_CLEAR_OUTPUT_DATA(PIOA, CAN_STB_PIN);
   806ec:	2102      	movs	r1, #2
   806ee:	480f      	ldr	r0, [pc, #60]	; (8072c <SENSOR_DD_INIT_CAN+0x184>)
   806f0:	4b0f      	ldr	r3, [pc, #60]	; (80730 <SENSOR_DD_INIT_CAN+0x188>)
   806f2:	4798      	blx	r3
	
}
   806f4:	bf00      	nop
   806f6:	3738      	adds	r7, #56	; 0x38
   806f8:	46bd      	mov	sp, r7
   806fa:	bd80      	pop	{r7, pc}
   806fc:	00086730 	.word	0x00086730
   80700:	400b4000 	.word	0x400b4000
   80704:	43414e00 	.word	0x43414e00
   80708:	000804b9 	.word	0x000804b9
   8070c:	0001869f 	.word	0x0001869f
   80710:	000186a0 	.word	0x000186a0
   80714:	00086778 	.word	0x00086778
   80718:	00084cb5 	.word	0x00084cb5
   8071c:	0008679c 	.word	0x0008679c
   80720:	20070abc 	.word	0x20070abc
   80724:	1ff00000 	.word	0x1ff00000
   80728:	000801a5 	.word	0x000801a5
   8072c:	400e0e00 	.word	0x400e0e00
   80730:	00081131 	.word	0x00081131

00080734 <SENSOR_D_INIT_CLOCK>:
 *  Author: Electrical
 */ 
#include "DD_CLOCK.h"


void SENSOR_D_INIT_CLOCK() {
   80734:	b580      	push	{r7, lr}
   80736:	af00      	add	r7, sp, #0
	sysclk_init();
   80738:	4b14      	ldr	r3, [pc, #80]	; (8078c <SENSOR_D_INIT_CLOCK+0x58>)
   8073a:	4798      	blx	r3
	PMC->PMC_WPMR  = 0x504D4300;	
   8073c:	4b14      	ldr	r3, [pc, #80]	; (80790 <SENSOR_D_INIT_CLOCK+0x5c>)
   8073e:	4a15      	ldr	r2, [pc, #84]	; (80794 <SENSOR_D_INIT_CLOCK+0x60>)
   80740:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	
	dd_pmc_enable_periph_clk(ID_PIOA);
   80744:	200b      	movs	r0, #11
   80746:	4b14      	ldr	r3, [pc, #80]	; (80798 <SENSOR_D_INIT_CLOCK+0x64>)
   80748:	4798      	blx	r3
	dd_pmc_enable_periph_clk(ID_PIOB);
   8074a:	200c      	movs	r0, #12
   8074c:	4b12      	ldr	r3, [pc, #72]	; (80798 <SENSOR_D_INIT_CLOCK+0x64>)
   8074e:	4798      	blx	r3
	dd_pmc_enable_periph_clk(ID_PIOC);
   80750:	200d      	movs	r0, #13
   80752:	4b11      	ldr	r3, [pc, #68]	; (80798 <SENSOR_D_INIT_CLOCK+0x64>)
   80754:	4798      	blx	r3
    dd_pmc_enable_periph_clk(ID_PIOD);
   80756:	200e      	movs	r0, #14
   80758:	4b0f      	ldr	r3, [pc, #60]	; (80798 <SENSOR_D_INIT_CLOCK+0x64>)
   8075a:	4798      	blx	r3
    dd_pmc_enable_periph_clk(ID_SPI0);
   8075c:	2018      	movs	r0, #24
   8075e:	4b0e      	ldr	r3, [pc, #56]	; (80798 <SENSOR_D_INIT_CLOCK+0x64>)
   80760:	4798      	blx	r3
	dd_pmc_enable_periph_clk(ID_CAN0);
   80762:	202b      	movs	r0, #43	; 0x2b
   80764:	4b0c      	ldr	r3, [pc, #48]	; (80798 <SENSOR_D_INIT_CLOCK+0x64>)
   80766:	4798      	blx	r3
	
	 dd_pmc_enable_periph_clk(ID_PMC);
   80768:	2005      	movs	r0, #5
   8076a:	4b0b      	ldr	r3, [pc, #44]	; (80798 <SENSOR_D_INIT_CLOCK+0x64>)
   8076c:	4798      	blx	r3
	 dd_pmc_enable_periph_clk(ID_UART);
   8076e:	2008      	movs	r0, #8
   80770:	4b09      	ldr	r3, [pc, #36]	; (80798 <SENSOR_D_INIT_CLOCK+0x64>)
   80772:	4798      	blx	r3
	 
	 dd_pmc_enable_periph_clk(ID_TC0); 
   80774:	201b      	movs	r0, #27
   80776:	4b08      	ldr	r3, [pc, #32]	; (80798 <SENSOR_D_INIT_CLOCK+0x64>)
   80778:	4798      	blx	r3
	 dd_pmc_enable_periph_clk(ID_TC6);		
   8077a:	2021      	movs	r0, #33	; 0x21
   8077c:	4b06      	ldr	r3, [pc, #24]	; (80798 <SENSOR_D_INIT_CLOCK+0x64>)
   8077e:	4798      	blx	r3
	 
    PMC->PMC_WPMR  = 0x504D4301;
   80780:	4b03      	ldr	r3, [pc, #12]	; (80790 <SENSOR_D_INIT_CLOCK+0x5c>)
   80782:	4a06      	ldr	r2, [pc, #24]	; (8079c <SENSOR_D_INIT_CLOCK+0x68>)
   80784:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
   80788:	bf00      	nop
   8078a:	bd80      	pop	{r7, pc}
   8078c:	00083add 	.word	0x00083add
   80790:	400e0600 	.word	0x400e0600
   80794:	504d4300 	.word	0x504d4300
   80798:	000807a1 	.word	0x000807a1
   8079c:	504d4301 	.word	0x504d4301

000807a0 <dd_pmc_enable_periph_clk>:
	
	
	
uint32_t dd_pmc_enable_periph_clk(uint32_t ul_id)	{
   807a0:	b480      	push	{r7}
   807a2:	b083      	sub	sp, #12
   807a4:	af00      	add	r7, sp, #0
   807a6:	6078      	str	r0, [r7, #4]
		if (ul_id > MAX_PERIPH_ID) {
   807a8:	687b      	ldr	r3, [r7, #4]
   807aa:	2b2c      	cmp	r3, #44	; 0x2c
   807ac:	d901      	bls.n	807b2 <dd_pmc_enable_periph_clk+0x12>
			return 1;
   807ae:	2301      	movs	r3, #1
   807b0:	e02f      	b.n	80812 <dd_pmc_enable_periph_clk+0x72>
		}
		if (ul_id < 32) {
   807b2:	687b      	ldr	r3, [r7, #4]
   807b4:	2b1f      	cmp	r3, #31
   807b6:	d813      	bhi.n	807e0 <dd_pmc_enable_periph_clk+0x40>
			if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   807b8:	4b18      	ldr	r3, [pc, #96]	; (8081c <dd_pmc_enable_periph_clk+0x7c>)
   807ba:	699a      	ldr	r2, [r3, #24]
   807bc:	2101      	movs	r1, #1
   807be:	687b      	ldr	r3, [r7, #4]
   807c0:	fa01 f303 	lsl.w	r3, r1, r3
   807c4:	401a      	ands	r2, r3
   807c6:	2101      	movs	r1, #1
   807c8:	687b      	ldr	r3, [r7, #4]
   807ca:	fa01 f303 	lsl.w	r3, r1, r3
   807ce:	429a      	cmp	r2, r3
   807d0:	d01e      	beq.n	80810 <dd_pmc_enable_periph_clk+0x70>
				PMC->PMC_PCER0 = 1 << ul_id;
   807d2:	4a12      	ldr	r2, [pc, #72]	; (8081c <dd_pmc_enable_periph_clk+0x7c>)
   807d4:	2101      	movs	r1, #1
   807d6:	687b      	ldr	r3, [r7, #4]
   807d8:	fa01 f303 	lsl.w	r3, r1, r3
   807dc:	6113      	str	r3, [r2, #16]
   807de:	e017      	b.n	80810 <dd_pmc_enable_periph_clk+0x70>
			}			
		} else {
			ul_id -= 32;
   807e0:	687b      	ldr	r3, [r7, #4]
   807e2:	3b20      	subs	r3, #32
   807e4:	607b      	str	r3, [r7, #4]
			if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   807e6:	4b0d      	ldr	r3, [pc, #52]	; (8081c <dd_pmc_enable_periph_clk+0x7c>)
   807e8:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   807ec:	2101      	movs	r1, #1
   807ee:	687b      	ldr	r3, [r7, #4]
   807f0:	fa01 f303 	lsl.w	r3, r1, r3
   807f4:	401a      	ands	r2, r3
   807f6:	2101      	movs	r1, #1
   807f8:	687b      	ldr	r3, [r7, #4]
   807fa:	fa01 f303 	lsl.w	r3, r1, r3
   807fe:	429a      	cmp	r2, r3
   80800:	d006      	beq.n	80810 <dd_pmc_enable_periph_clk+0x70>
				PMC->PMC_PCER1 = 1 << ul_id;
   80802:	4a06      	ldr	r2, [pc, #24]	; (8081c <dd_pmc_enable_periph_clk+0x7c>)
   80804:	2101      	movs	r1, #1
   80806:	687b      	ldr	r3, [r7, #4]
   80808:	fa01 f303 	lsl.w	r3, r1, r3
   8080c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
			}			
		}
		return 0;
   80810:	2300      	movs	r3, #0
}
   80812:	4618      	mov	r0, r3
   80814:	370c      	adds	r7, #12
   80816:	46bd      	mov	sp, r7
   80818:	bc80      	pop	{r7}
   8081a:	4770      	bx	lr
   8081c:	400e0600 	.word	0x400e0600

00080820 <DD_CS1_TS_INIT>:
 */ 
 #include "DD_CS1_TS.h"
 extern uint8_t command_data_array[20];
 
 
 void DD_CS1_TS_INIT() {
   80820:	b580      	push	{r7, lr}
   80822:	b082      	sub	sp, #8
   80824:	af00      	add	r7, sp, #0
	 dd_spi_set_clock_polarity(0, SPI_CLK_POLARITY_1);
   80826:	2101      	movs	r1, #1
   80828:	2000      	movs	r0, #0
   8082a:	4b13      	ldr	r3, [pc, #76]	; (80878 <DD_CS1_TS_INIT+0x58>)
   8082c:	4798      	blx	r3
	 dd_spi_set_clock_phase(0, SPI_CLK_PHASE_0);
   8082e:	2100      	movs	r1, #0
   80830:	2000      	movs	r0, #0
   80832:	4b12      	ldr	r3, [pc, #72]	; (8087c <DD_CS1_TS_INIT+0x5c>)
   80834:	4798      	blx	r3
	 
	 command_data_array[0] = MAX31865_WRITE_CONFIGURATION; //0b00000110;
   80836:	4b12      	ldr	r3, [pc, #72]	; (80880 <DD_CS1_TS_INIT+0x60>)
   80838:	2280      	movs	r2, #128	; 0x80
   8083a:	701a      	strb	r2, [r3, #0]
	 command_data_array[1] = MAXIM31865_CONFIGURATION_VBIAS | MAXIM31865_CONFIGURATION_AUTO_CONVERTION | MAXIM31865_CONFIGURATION_FAULT_STATUS_CLEAR | MAXIM31865_CONFIGURATION_50HZ_FILTER ;
   8083c:	4b10      	ldr	r3, [pc, #64]	; (80880 <DD_CS1_TS_INIT+0x60>)
   8083e:	22c3      	movs	r2, #195	; 0xc3
   80840:	705a      	strb	r2, [r3, #1]
	 
	 DD_SPI_PCS_DECODER_ACTIVE();
   80842:	4b10      	ldr	r3, [pc, #64]	; (80884 <DD_CS1_TS_INIT+0x64>)
   80844:	4798      	blx	r3
	 DD_CS1_TS_CHIP_SELECT();
   80846:	4b10      	ldr	r3, [pc, #64]	; (80888 <DD_CS1_TS_INIT+0x68>)
   80848:	4798      	blx	r3
	 dd_spi_set_peripheral_chip_select_value(ISOLTR_1_CS_ID); //(ISOLTR_1_CS_ID);
   8084a:	2001      	movs	r0, #1
   8084c:	4b0f      	ldr	r3, [pc, #60]	; (8088c <DD_CS1_TS_INIT+0x6c>)
   8084e:	4798      	blx	r3
	 dd_spi_master_transfer(&command_data_array, 2,0 ); //ISOLTR_1_CS_ID
   80850:	2200      	movs	r2, #0
   80852:	2102      	movs	r1, #2
   80854:	480a      	ldr	r0, [pc, #40]	; (80880 <DD_CS1_TS_INIT+0x60>)
   80856:	4b0e      	ldr	r3, [pc, #56]	; (80890 <DD_CS1_TS_INIT+0x70>)
   80858:	4798      	blx	r3
	 
	 for(unsigned int count=0; count<1000; count++ )   {
   8085a:	2300      	movs	r3, #0
   8085c:	607b      	str	r3, [r7, #4]
   8085e:	e002      	b.n	80866 <DD_CS1_TS_INIT+0x46>
   80860:	687b      	ldr	r3, [r7, #4]
   80862:	3301      	adds	r3, #1
   80864:	607b      	str	r3, [r7, #4]
   80866:	687b      	ldr	r3, [r7, #4]
   80868:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   8086c:	d3f8      	bcc.n	80860 <DD_CS1_TS_INIT+0x40>
		 ;
	 }
   8086e:	bf00      	nop
   80870:	3708      	adds	r7, #8
   80872:	46bd      	mov	sp, r7
   80874:	bd80      	pop	{r7, pc}
   80876:	bf00      	nop
   80878:	000815ad 	.word	0x000815ad
   8087c:	00081601 	.word	0x00081601
   80880:	20070aec 	.word	0x20070aec
   80884:	00081b01 	.word	0x00081b01
   80888:	00081a5d 	.word	0x00081a5d
   8088c:	000816b5 	.word	0x000816b5
   80890:	000816ed 	.word	0x000816ed

00080894 <DD_CS2_TS_INIT>:
 */ 
 #include "DD_CS2_TS.h"
 extern uint8_t command_data_array[20];
 
 
 void DD_CS2_TS_INIT() {
   80894:	b580      	push	{r7, lr}
   80896:	b082      	sub	sp, #8
   80898:	af00      	add	r7, sp, #0
	 dd_spi_set_clock_polarity(0, SPI_CLK_POLARITY_1);
   8089a:	2101      	movs	r1, #1
   8089c:	2000      	movs	r0, #0
   8089e:	4b13      	ldr	r3, [pc, #76]	; (808ec <DD_CS2_TS_INIT+0x58>)
   808a0:	4798      	blx	r3
	 dd_spi_set_clock_phase(0, SPI_CLK_PHASE_0);
   808a2:	2100      	movs	r1, #0
   808a4:	2000      	movs	r0, #0
   808a6:	4b12      	ldr	r3, [pc, #72]	; (808f0 <DD_CS2_TS_INIT+0x5c>)
   808a8:	4798      	blx	r3
	 
	 command_data_array[0] = MAX31865_WRITE_CONFIGURATION; //0b00000110;
   808aa:	4b12      	ldr	r3, [pc, #72]	; (808f4 <DD_CS2_TS_INIT+0x60>)
   808ac:	2280      	movs	r2, #128	; 0x80
   808ae:	701a      	strb	r2, [r3, #0]
	 command_data_array[1] = MAXIM31865_CONFIGURATION_VBIAS | MAXIM31865_CONFIGURATION_AUTO_CONVERTION | MAXIM31865_CONFIGURATION_FAULT_STATUS_CLEAR | MAXIM31865_CONFIGURATION_50HZ_FILTER ;
   808b0:	4b10      	ldr	r3, [pc, #64]	; (808f4 <DD_CS2_TS_INIT+0x60>)
   808b2:	22c3      	movs	r2, #195	; 0xc3
   808b4:	705a      	strb	r2, [r3, #1]
	 
	 DD_SPI_PCS_DECODER_ACTIVE();
   808b6:	4b10      	ldr	r3, [pc, #64]	; (808f8 <DD_CS2_TS_INIT+0x64>)
   808b8:	4798      	blx	r3
	 DD_CS2_TS_CHIP_SELECT();
   808ba:	4b10      	ldr	r3, [pc, #64]	; (808fc <DD_CS2_TS_INIT+0x68>)
   808bc:	4798      	blx	r3
	 dd_spi_set_peripheral_chip_select_value(ISOLTR_1_CS_ID); //(ISOLTR_1_CS_ID);
   808be:	2001      	movs	r0, #1
   808c0:	4b0f      	ldr	r3, [pc, #60]	; (80900 <DD_CS2_TS_INIT+0x6c>)
   808c2:	4798      	blx	r3
	 dd_spi_master_transfer(&command_data_array, 2,0 ); //ISOLTR_1_CS_ID
   808c4:	2200      	movs	r2, #0
   808c6:	2102      	movs	r1, #2
   808c8:	480a      	ldr	r0, [pc, #40]	; (808f4 <DD_CS2_TS_INIT+0x60>)
   808ca:	4b0e      	ldr	r3, [pc, #56]	; (80904 <DD_CS2_TS_INIT+0x70>)
   808cc:	4798      	blx	r3
	 
	 for(unsigned int count=0; count<1000; count++ )   {
   808ce:	2300      	movs	r3, #0
   808d0:	607b      	str	r3, [r7, #4]
   808d2:	e002      	b.n	808da <DD_CS2_TS_INIT+0x46>
   808d4:	687b      	ldr	r3, [r7, #4]
   808d6:	3301      	adds	r3, #1
   808d8:	607b      	str	r3, [r7, #4]
   808da:	687b      	ldr	r3, [r7, #4]
   808dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   808e0:	d3f8      	bcc.n	808d4 <DD_CS2_TS_INIT+0x40>
		 ;
	 }
   808e2:	bf00      	nop
   808e4:	3708      	adds	r7, #8
   808e6:	46bd      	mov	sp, r7
   808e8:	bd80      	pop	{r7, pc}
   808ea:	bf00      	nop
   808ec:	000815ad 	.word	0x000815ad
   808f0:	00081601 	.word	0x00081601
   808f4:	20070aec 	.word	0x20070aec
   808f8:	00081b01 	.word	0x00081b01
   808fc:	00081a79 	.word	0x00081a79
   80900:	000816b5 	.word	0x000816b5
   80904:	000816ed 	.word	0x000816ed

00080908 <DD_CS3_TS_INIT>:

 #include "DD_CS3_TS.h"
 extern uint8_t command_data_array[20];
 
 
 void DD_CS3_TS_INIT() {
   80908:	b580      	push	{r7, lr}
   8090a:	b082      	sub	sp, #8
   8090c:	af00      	add	r7, sp, #0
	 dd_spi_set_clock_polarity(1, SPI_CLK_POLARITY_1);
   8090e:	2101      	movs	r1, #1
   80910:	2001      	movs	r0, #1
   80912:	4b13      	ldr	r3, [pc, #76]	; (80960 <DD_CS3_TS_INIT+0x58>)
   80914:	4798      	blx	r3
	 dd_spi_set_clock_phase(1, SPI_CLK_PHASE_0);
   80916:	2100      	movs	r1, #0
   80918:	2001      	movs	r0, #1
   8091a:	4b12      	ldr	r3, [pc, #72]	; (80964 <DD_CS3_TS_INIT+0x5c>)
   8091c:	4798      	blx	r3
	 
	 command_data_array[0] = MAX31865_WRITE_CONFIGURATION; //0b00000110;
   8091e:	4b12      	ldr	r3, [pc, #72]	; (80968 <DD_CS3_TS_INIT+0x60>)
   80920:	2280      	movs	r2, #128	; 0x80
   80922:	701a      	strb	r2, [r3, #0]
	 command_data_array[1] = MAXIM31865_CONFIGURATION_VBIAS | MAXIM31865_CONFIGURATION_AUTO_CONVERTION | MAXIM31865_CONFIGURATION_FAULT_STATUS_CLEAR | MAXIM31865_CONFIGURATION_50HZ_FILTER ;
   80924:	4b10      	ldr	r3, [pc, #64]	; (80968 <DD_CS3_TS_INIT+0x60>)
   80926:	22c3      	movs	r2, #195	; 0xc3
   80928:	705a      	strb	r2, [r3, #1]
	 
	 DD_SPI_PCS_DECODER_ACTIVE();
   8092a:	4b10      	ldr	r3, [pc, #64]	; (8096c <DD_CS3_TS_INIT+0x64>)
   8092c:	4798      	blx	r3
	 DD_CS3_TS_CHIP_SELECT();
   8092e:	4b10      	ldr	r3, [pc, #64]	; (80970 <DD_CS3_TS_INIT+0x68>)
   80930:	4798      	blx	r3
	 dd_spi_set_peripheral_chip_select_value(ISOLTR_2_CS_ID); //(ISOLTR_1_CS_ID);
   80932:	2002      	movs	r0, #2
   80934:	4b0f      	ldr	r3, [pc, #60]	; (80974 <DD_CS3_TS_INIT+0x6c>)
   80936:	4798      	blx	r3
	 dd_spi_master_transfer(&command_data_array, 2,0 ); //ISOLTR_1_CS_ID
   80938:	2200      	movs	r2, #0
   8093a:	2102      	movs	r1, #2
   8093c:	480a      	ldr	r0, [pc, #40]	; (80968 <DD_CS3_TS_INIT+0x60>)
   8093e:	4b0e      	ldr	r3, [pc, #56]	; (80978 <DD_CS3_TS_INIT+0x70>)
   80940:	4798      	blx	r3
	 
	 for(unsigned int count=0; count<1000; count++ )   {
   80942:	2300      	movs	r3, #0
   80944:	607b      	str	r3, [r7, #4]
   80946:	e002      	b.n	8094e <DD_CS3_TS_INIT+0x46>
   80948:	687b      	ldr	r3, [r7, #4]
   8094a:	3301      	adds	r3, #1
   8094c:	607b      	str	r3, [r7, #4]
   8094e:	687b      	ldr	r3, [r7, #4]
   80950:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   80954:	d3f8      	bcc.n	80948 <DD_CS3_TS_INIT+0x40>
		 ;
	 }
   80956:	bf00      	nop
   80958:	3708      	adds	r7, #8
   8095a:	46bd      	mov	sp, r7
   8095c:	bd80      	pop	{r7, pc}
   8095e:	bf00      	nop
   80960:	000815ad 	.word	0x000815ad
   80964:	00081601 	.word	0x00081601
   80968:	20070aec 	.word	0x20070aec
   8096c:	00081b01 	.word	0x00081b01
   80970:	00081a91 	.word	0x00081a91
   80974:	000816b5 	.word	0x000816b5
   80978:	000816ed 	.word	0x000816ed

0008097c <SENSOR_D_INIT_PIO>:
 * Created: 3/7/2017 11:31:50 AM
 *  Author: Electrical
 */ 
#include "DD_GPIO.h"

void SENSOR_D_INIT_PIO()	{	
   8097c:	b580      	push	{r7, lr}
   8097e:	af00      	add	r7, sp, #0
	
	PIOA->PIO_WPMR = 0x50494F00;
   80980:	4b11      	ldr	r3, [pc, #68]	; (809c8 <SENSOR_D_INIT_PIO+0x4c>)
   80982:	4a12      	ldr	r2, [pc, #72]	; (809cc <SENSOR_D_INIT_PIO+0x50>)
   80984:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOB->PIO_WPMR = 0x50494F00;
   80988:	4b11      	ldr	r3, [pc, #68]	; (809d0 <SENSOR_D_INIT_PIO+0x54>)
   8098a:	4a10      	ldr	r2, [pc, #64]	; (809cc <SENSOR_D_INIT_PIO+0x50>)
   8098c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOC->PIO_WPMR = 0x50494F00;
   80990:	4b10      	ldr	r3, [pc, #64]	; (809d4 <SENSOR_D_INIT_PIO+0x58>)
   80992:	4a0e      	ldr	r2, [pc, #56]	; (809cc <SENSOR_D_INIT_PIO+0x50>)
   80994:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOD->PIO_WPMR = 0x50494F00;
   80998:	4b0f      	ldr	r3, [pc, #60]	; (809d8 <SENSOR_D_INIT_PIO+0x5c>)
   8099a:	4a0c      	ldr	r2, [pc, #48]	; (809cc <SENSOR_D_INIT_PIO+0x50>)
   8099c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	dd_SPI_pins_INIT();
   809a0:	4b0e      	ldr	r3, [pc, #56]	; (809dc <SENSOR_D_INIT_PIO+0x60>)
   809a2:	4798      	blx	r3
	dd_CAN_pins_INIT();
   809a4:	4b0e      	ldr	r3, [pc, #56]	; (809e0 <SENSOR_D_INIT_PIO+0x64>)
   809a6:	4798      	blx	r3
	dd_UART_pins_init() ;
   809a8:	4b0e      	ldr	r3, [pc, #56]	; (809e4 <SENSOR_D_INIT_PIO+0x68>)
   809aa:	4798      	blx	r3
	dd_TEMP_SENSOR_PINS_INIT();
   809ac:	4b0e      	ldr	r3, [pc, #56]	; (809e8 <SENSOR_D_INIT_PIO+0x6c>)
   809ae:	4798      	blx	r3
	dd_PRESSURE_SENSOR_GPIO_PINS();
   809b0:	4b0e      	ldr	r3, [pc, #56]	; (809ec <SENSOR_D_INIT_PIO+0x70>)
   809b2:	4798      	blx	r3
	PIOA->PIO_ABSR  = 0x0;
   809b4:	4b04      	ldr	r3, [pc, #16]	; (809c8 <SENSOR_D_INIT_PIO+0x4c>)
   809b6:	2200      	movs	r2, #0
   809b8:	671a      	str	r2, [r3, #112]	; 0x70
	PIOB->PIO_ABSR = 0x00200000;
   809ba:	4b05      	ldr	r3, [pc, #20]	; (809d0 <SENSOR_D_INIT_PIO+0x54>)
   809bc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   809c0:	671a      	str	r2, [r3, #112]	; 0x70
}
   809c2:	bf00      	nop
   809c4:	bd80      	pop	{r7, pc}
   809c6:	bf00      	nop
   809c8:	400e0e00 	.word	0x400e0e00
   809cc:	50494f00 	.word	0x50494f00
   809d0:	400e1000 	.word	0x400e1000
   809d4:	400e1200 	.word	0x400e1200
   809d8:	400e1400 	.word	0x400e1400
   809dc:	00080c4d 	.word	0x00080c4d
   809e0:	00080f25 	.word	0x00080f25
   809e4:	00080fcd 	.word	0x00080fcd
   809e8:	00080b15 	.word	0x00080b15
   809ec:	000809f1 	.word	0x000809f1

000809f0 <dd_PRESSURE_SENSOR_GPIO_PINS>:

void dd_PRESSURE_SENSOR_GPIO_PINS()   {
   809f0:	b580      	push	{r7, lr}
   809f2:	af00      	add	r7, sp, #0
	dd_enable_PIO(PIOC, PD_PS1_SEN_PIN);
   809f4:	2108      	movs	r1, #8
   809f6:	483c      	ldr	r0, [pc, #240]	; (80ae8 <dd_PRESSURE_SENSOR_GPIO_PINS+0xf8>)
   809f8:	4b3c      	ldr	r3, [pc, #240]	; (80aec <dd_PRESSURE_SENSOR_GPIO_PINS+0xfc>)
   809fa:	4798      	blx	r3
	dd_enable_OUTPUT(PIOC, PD_PS1_SEN_PIN);
   809fc:	2108      	movs	r1, #8
   809fe:	483a      	ldr	r0, [pc, #232]	; (80ae8 <dd_PRESSURE_SENSOR_GPIO_PINS+0xf8>)
   80a00:	4b3b      	ldr	r3, [pc, #236]	; (80af0 <dd_PRESSURE_SENSOR_GPIO_PINS+0x100>)
   80a02:	4798      	blx	r3
	dd_enable_PULLUP(PIOC, PD_PS1_SEN_PIN);
   80a04:	2108      	movs	r1, #8
   80a06:	4838      	ldr	r0, [pc, #224]	; (80ae8 <dd_PRESSURE_SENSOR_GPIO_PINS+0xf8>)
   80a08:	4b3a      	ldr	r3, [pc, #232]	; (80af4 <dd_PRESSURE_SENSOR_GPIO_PINS+0x104>)
   80a0a:	4798      	blx	r3
	dd_SET_OUTPUT_DATA(PIOC, PD_PS1_SEN_PIN);
   80a0c:	2108      	movs	r1, #8
   80a0e:	4836      	ldr	r0, [pc, #216]	; (80ae8 <dd_PRESSURE_SENSOR_GPIO_PINS+0xf8>)
   80a10:	4b39      	ldr	r3, [pc, #228]	; (80af8 <dd_PRESSURE_SENSOR_GPIO_PINS+0x108>)
   80a12:	4798      	blx	r3
	dd_enable_OUTPUT_WRITE(PIOC, PD_PS1_SEN_PIN);
   80a14:	2108      	movs	r1, #8
   80a16:	4834      	ldr	r0, [pc, #208]	; (80ae8 <dd_PRESSURE_SENSOR_GPIO_PINS+0xf8>)
   80a18:	4b38      	ldr	r3, [pc, #224]	; (80afc <dd_PRESSURE_SENSOR_GPIO_PINS+0x10c>)
   80a1a:	4798      	blx	r3
	
	
	dd_enable_PIO(PIOC, PD_PS2_SEN_PIN);
   80a1c:	2107      	movs	r1, #7
   80a1e:	4832      	ldr	r0, [pc, #200]	; (80ae8 <dd_PRESSURE_SENSOR_GPIO_PINS+0xf8>)
   80a20:	4b32      	ldr	r3, [pc, #200]	; (80aec <dd_PRESSURE_SENSOR_GPIO_PINS+0xfc>)
   80a22:	4798      	blx	r3
	dd_enable_OUTPUT(PIOC, PD_PS2_SEN_PIN);
   80a24:	2107      	movs	r1, #7
   80a26:	4830      	ldr	r0, [pc, #192]	; (80ae8 <dd_PRESSURE_SENSOR_GPIO_PINS+0xf8>)
   80a28:	4b31      	ldr	r3, [pc, #196]	; (80af0 <dd_PRESSURE_SENSOR_GPIO_PINS+0x100>)
   80a2a:	4798      	blx	r3
	dd_enable_PULLUP(PIOC, PD_PS2_SEN_PIN);
   80a2c:	2107      	movs	r1, #7
   80a2e:	482e      	ldr	r0, [pc, #184]	; (80ae8 <dd_PRESSURE_SENSOR_GPIO_PINS+0xf8>)
   80a30:	4b30      	ldr	r3, [pc, #192]	; (80af4 <dd_PRESSURE_SENSOR_GPIO_PINS+0x104>)
   80a32:	4798      	blx	r3
	dd_SET_OUTPUT_DATA(PIOC, PD_PS2_SEN_PIN);
   80a34:	2107      	movs	r1, #7
   80a36:	482c      	ldr	r0, [pc, #176]	; (80ae8 <dd_PRESSURE_SENSOR_GPIO_PINS+0xf8>)
   80a38:	4b2f      	ldr	r3, [pc, #188]	; (80af8 <dd_PRESSURE_SENSOR_GPIO_PINS+0x108>)
   80a3a:	4798      	blx	r3
	dd_enable_OUTPUT_WRITE(PIOC, PD_PS2_SEN_PIN);
   80a3c:	2107      	movs	r1, #7
   80a3e:	482a      	ldr	r0, [pc, #168]	; (80ae8 <dd_PRESSURE_SENSOR_GPIO_PINS+0xf8>)
   80a40:	4b2e      	ldr	r3, [pc, #184]	; (80afc <dd_PRESSURE_SENSOR_GPIO_PINS+0x10c>)
   80a42:	4798      	blx	r3
	
	
	dd_enable_PIO(PIOC, PD_PS3_SEN_PIN);
   80a44:	2106      	movs	r1, #6
   80a46:	4828      	ldr	r0, [pc, #160]	; (80ae8 <dd_PRESSURE_SENSOR_GPIO_PINS+0xf8>)
   80a48:	4b28      	ldr	r3, [pc, #160]	; (80aec <dd_PRESSURE_SENSOR_GPIO_PINS+0xfc>)
   80a4a:	4798      	blx	r3
	dd_enable_OUTPUT(PIOC, PD_PS3_SEN_PIN);
   80a4c:	2106      	movs	r1, #6
   80a4e:	4826      	ldr	r0, [pc, #152]	; (80ae8 <dd_PRESSURE_SENSOR_GPIO_PINS+0xf8>)
   80a50:	4b27      	ldr	r3, [pc, #156]	; (80af0 <dd_PRESSURE_SENSOR_GPIO_PINS+0x100>)
   80a52:	4798      	blx	r3
	dd_enable_PULLUP(PIOC, PD_PS3_SEN_PIN);
   80a54:	2106      	movs	r1, #6
   80a56:	4824      	ldr	r0, [pc, #144]	; (80ae8 <dd_PRESSURE_SENSOR_GPIO_PINS+0xf8>)
   80a58:	4b26      	ldr	r3, [pc, #152]	; (80af4 <dd_PRESSURE_SENSOR_GPIO_PINS+0x104>)
   80a5a:	4798      	blx	r3
	dd_SET_OUTPUT_DATA(PIOC, PD_PS3_SEN_PIN);
   80a5c:	2106      	movs	r1, #6
   80a5e:	4822      	ldr	r0, [pc, #136]	; (80ae8 <dd_PRESSURE_SENSOR_GPIO_PINS+0xf8>)
   80a60:	4b25      	ldr	r3, [pc, #148]	; (80af8 <dd_PRESSURE_SENSOR_GPIO_PINS+0x108>)
   80a62:	4798      	blx	r3
	dd_enable_OUTPUT_WRITE(PIOC, PD_PS3_SEN_PIN);
   80a64:	2106      	movs	r1, #6
   80a66:	4820      	ldr	r0, [pc, #128]	; (80ae8 <dd_PRESSURE_SENSOR_GPIO_PINS+0xf8>)
   80a68:	4b24      	ldr	r3, [pc, #144]	; (80afc <dd_PRESSURE_SENSOR_GPIO_PINS+0x10c>)
   80a6a:	4798      	blx	r3
	
	dd_enable_PIO(PIOD, PS1_DRDY_N_PIN);
   80a6c:	2102      	movs	r1, #2
   80a6e:	4824      	ldr	r0, [pc, #144]	; (80b00 <dd_PRESSURE_SENSOR_GPIO_PINS+0x110>)
   80a70:	4b1e      	ldr	r3, [pc, #120]	; (80aec <dd_PRESSURE_SENSOR_GPIO_PINS+0xfc>)
   80a72:	4798      	blx	r3
	dd_disable_OUTPUT(PIOD,PS1_DRDY_N_PIN );
   80a74:	2102      	movs	r1, #2
   80a76:	4822      	ldr	r0, [pc, #136]	; (80b00 <dd_PRESSURE_SENSOR_GPIO_PINS+0x110>)
   80a78:	4b22      	ldr	r3, [pc, #136]	; (80b04 <dd_PRESSURE_SENSOR_GPIO_PINS+0x114>)
   80a7a:	4798      	blx	r3
	dd_CLEAR_OUTPUT_DATA(PIOD,PS1_DRDY_N_PIN );
   80a7c:	2102      	movs	r1, #2
   80a7e:	4820      	ldr	r0, [pc, #128]	; (80b00 <dd_PRESSURE_SENSOR_GPIO_PINS+0x110>)
   80a80:	4b21      	ldr	r3, [pc, #132]	; (80b08 <dd_PRESSURE_SENSOR_GPIO_PINS+0x118>)
   80a82:	4798      	blx	r3
	dd_PIO_INTERRUPT_DISABLE(PIOD,PS1_DRDY_N_PIN );
   80a84:	2102      	movs	r1, #2
   80a86:	481e      	ldr	r0, [pc, #120]	; (80b00 <dd_PRESSURE_SENSOR_GPIO_PINS+0x110>)
   80a88:	4b20      	ldr	r3, [pc, #128]	; (80b0c <dd_PRESSURE_SENSOR_GPIO_PINS+0x11c>)
   80a8a:	4798      	blx	r3
	dd_disable_OUTPUT_WRITE(PIOD,PS1_DRDY_N_PIN );
   80a8c:	2102      	movs	r1, #2
   80a8e:	481c      	ldr	r0, [pc, #112]	; (80b00 <dd_PRESSURE_SENSOR_GPIO_PINS+0x110>)
   80a90:	4b1f      	ldr	r3, [pc, #124]	; (80b10 <dd_PRESSURE_SENSOR_GPIO_PINS+0x120>)
   80a92:	4798      	blx	r3
	
	dd_enable_PIO(PIOD, PS2_DRDY_N_PIN);
   80a94:	2101      	movs	r1, #1
   80a96:	481a      	ldr	r0, [pc, #104]	; (80b00 <dd_PRESSURE_SENSOR_GPIO_PINS+0x110>)
   80a98:	4b14      	ldr	r3, [pc, #80]	; (80aec <dd_PRESSURE_SENSOR_GPIO_PINS+0xfc>)
   80a9a:	4798      	blx	r3
	dd_disable_OUTPUT(PIOD,PS2_DRDY_N_PIN );
   80a9c:	2101      	movs	r1, #1
   80a9e:	4818      	ldr	r0, [pc, #96]	; (80b00 <dd_PRESSURE_SENSOR_GPIO_PINS+0x110>)
   80aa0:	4b18      	ldr	r3, [pc, #96]	; (80b04 <dd_PRESSURE_SENSOR_GPIO_PINS+0x114>)
   80aa2:	4798      	blx	r3
	dd_CLEAR_OUTPUT_DATA(PIOD,PS2_DRDY_N_PIN );
   80aa4:	2101      	movs	r1, #1
   80aa6:	4816      	ldr	r0, [pc, #88]	; (80b00 <dd_PRESSURE_SENSOR_GPIO_PINS+0x110>)
   80aa8:	4b17      	ldr	r3, [pc, #92]	; (80b08 <dd_PRESSURE_SENSOR_GPIO_PINS+0x118>)
   80aaa:	4798      	blx	r3
	dd_PIO_INTERRUPT_DISABLE(PIOD,PS2_DRDY_N_PIN );
   80aac:	2101      	movs	r1, #1
   80aae:	4814      	ldr	r0, [pc, #80]	; (80b00 <dd_PRESSURE_SENSOR_GPIO_PINS+0x110>)
   80ab0:	4b16      	ldr	r3, [pc, #88]	; (80b0c <dd_PRESSURE_SENSOR_GPIO_PINS+0x11c>)
   80ab2:	4798      	blx	r3
	dd_disable_OUTPUT_WRITE(PIOD,PS2_DRDY_N_PIN );
   80ab4:	2101      	movs	r1, #1
   80ab6:	4812      	ldr	r0, [pc, #72]	; (80b00 <dd_PRESSURE_SENSOR_GPIO_PINS+0x110>)
   80ab8:	4b15      	ldr	r3, [pc, #84]	; (80b10 <dd_PRESSURE_SENSOR_GPIO_PINS+0x120>)
   80aba:	4798      	blx	r3
	
	dd_enable_PIO(PIOD, PS3_DRDY_N_PIN);
   80abc:	2100      	movs	r1, #0
   80abe:	4810      	ldr	r0, [pc, #64]	; (80b00 <dd_PRESSURE_SENSOR_GPIO_PINS+0x110>)
   80ac0:	4b0a      	ldr	r3, [pc, #40]	; (80aec <dd_PRESSURE_SENSOR_GPIO_PINS+0xfc>)
   80ac2:	4798      	blx	r3
	dd_disable_OUTPUT(PIOD,PS3_DRDY_N_PIN );
   80ac4:	2100      	movs	r1, #0
   80ac6:	480e      	ldr	r0, [pc, #56]	; (80b00 <dd_PRESSURE_SENSOR_GPIO_PINS+0x110>)
   80ac8:	4b0e      	ldr	r3, [pc, #56]	; (80b04 <dd_PRESSURE_SENSOR_GPIO_PINS+0x114>)
   80aca:	4798      	blx	r3
	dd_CLEAR_OUTPUT_DATA(PIOD,PS3_DRDY_N_PIN );
   80acc:	2100      	movs	r1, #0
   80ace:	480c      	ldr	r0, [pc, #48]	; (80b00 <dd_PRESSURE_SENSOR_GPIO_PINS+0x110>)
   80ad0:	4b0d      	ldr	r3, [pc, #52]	; (80b08 <dd_PRESSURE_SENSOR_GPIO_PINS+0x118>)
   80ad2:	4798      	blx	r3
	dd_PIO_INTERRUPT_DISABLE(PIOD,PS3_DRDY_N_PIN );
   80ad4:	2100      	movs	r1, #0
   80ad6:	480a      	ldr	r0, [pc, #40]	; (80b00 <dd_PRESSURE_SENSOR_GPIO_PINS+0x110>)
   80ad8:	4b0c      	ldr	r3, [pc, #48]	; (80b0c <dd_PRESSURE_SENSOR_GPIO_PINS+0x11c>)
   80ada:	4798      	blx	r3
	dd_disable_OUTPUT_WRITE(PIOD,PS3_DRDY_N_PIN );	
   80adc:	2100      	movs	r1, #0
   80ade:	4808      	ldr	r0, [pc, #32]	; (80b00 <dd_PRESSURE_SENSOR_GPIO_PINS+0x110>)
   80ae0:	4b0b      	ldr	r3, [pc, #44]	; (80b10 <dd_PRESSURE_SENSOR_GPIO_PINS+0x120>)
   80ae2:	4798      	blx	r3
}
   80ae4:	bf00      	nop
   80ae6:	bd80      	pop	{r7, pc}
   80ae8:	400e1200 	.word	0x400e1200
   80aec:	0008107d 	.word	0x0008107d
   80af0:	000810c5 	.word	0x000810c5
   80af4:	00081155 	.word	0x00081155
   80af8:	0008110d 	.word	0x0008110d
   80afc:	0008119d 	.word	0x0008119d
   80b00:	400e1400 	.word	0x400e1400
   80b04:	000810e9 	.word	0x000810e9
   80b08:	00081131 	.word	0x00081131
   80b0c:	0008103d 	.word	0x0008103d
   80b10:	000811c5 	.word	0x000811c5

00080b14 <dd_TEMP_SENSOR_PINS_INIT>:

void dd_TEMP_SENSOR_PINS_INIT()   {
   80b14:	b580      	push	{r7, lr}
   80b16:	af00      	add	r7, sp, #0
	
	dd_enable_PIO(PIOA, DRDY_TS1_PIN);
   80b18:	210f      	movs	r1, #15
   80b1a:	4846      	ldr	r0, [pc, #280]	; (80c34 <dd_TEMP_SENSOR_PINS_INIT+0x120>)
   80b1c:	4b46      	ldr	r3, [pc, #280]	; (80c38 <dd_TEMP_SENSOR_PINS_INIT+0x124>)
   80b1e:	4798      	blx	r3
	dd_enable_PIO(PIOA, DRDY_TS2_PIN);
   80b20:	2110      	movs	r1, #16
   80b22:	4844      	ldr	r0, [pc, #272]	; (80c34 <dd_TEMP_SENSOR_PINS_INIT+0x120>)
   80b24:	4b44      	ldr	r3, [pc, #272]	; (80c38 <dd_TEMP_SENSOR_PINS_INIT+0x124>)
   80b26:	4798      	blx	r3
	dd_enable_PIO(PIOA, DRDY_TS3_PIN);
   80b28:	2114      	movs	r1, #20
   80b2a:	4842      	ldr	r0, [pc, #264]	; (80c34 <dd_TEMP_SENSOR_PINS_INIT+0x120>)
   80b2c:	4b42      	ldr	r3, [pc, #264]	; (80c38 <dd_TEMP_SENSOR_PINS_INIT+0x124>)
   80b2e:	4798      	blx	r3
	dd_enable_PIO(PIOA, DRDY_CS1_TS_PIN);
   80b30:	2111      	movs	r1, #17
   80b32:	4840      	ldr	r0, [pc, #256]	; (80c34 <dd_TEMP_SENSOR_PINS_INIT+0x120>)
   80b34:	4b40      	ldr	r3, [pc, #256]	; (80c38 <dd_TEMP_SENSOR_PINS_INIT+0x124>)
   80b36:	4798      	blx	r3
	dd_enable_PIO(PIOA, DRDY_CS2_TS_PIN);
   80b38:	2112      	movs	r1, #18
   80b3a:	483e      	ldr	r0, [pc, #248]	; (80c34 <dd_TEMP_SENSOR_PINS_INIT+0x120>)
   80b3c:	4b3e      	ldr	r3, [pc, #248]	; (80c38 <dd_TEMP_SENSOR_PINS_INIT+0x124>)
   80b3e:	4798      	blx	r3
	dd_enable_PIO(PIOA, DRDY_CS3_TS_PIN);
   80b40:	2113      	movs	r1, #19
   80b42:	483c      	ldr	r0, [pc, #240]	; (80c34 <dd_TEMP_SENSOR_PINS_INIT+0x120>)
   80b44:	4b3c      	ldr	r3, [pc, #240]	; (80c38 <dd_TEMP_SENSOR_PINS_INIT+0x124>)
   80b46:	4798      	blx	r3
	dd_enable_PIO(PIOA, THERMOCOUPLE_DRDY_PIN);	
   80b48:	210e      	movs	r1, #14
   80b4a:	483a      	ldr	r0, [pc, #232]	; (80c34 <dd_TEMP_SENSOR_PINS_INIT+0x120>)
   80b4c:	4b3a      	ldr	r3, [pc, #232]	; (80c38 <dd_TEMP_SENSOR_PINS_INIT+0x124>)
   80b4e:	4798      	blx	r3
 	
	dd_disable_OUTPUT(PIOA,DRDY_TS1_PIN );
   80b50:	210f      	movs	r1, #15
   80b52:	4838      	ldr	r0, [pc, #224]	; (80c34 <dd_TEMP_SENSOR_PINS_INIT+0x120>)
   80b54:	4b39      	ldr	r3, [pc, #228]	; (80c3c <dd_TEMP_SENSOR_PINS_INIT+0x128>)
   80b56:	4798      	blx	r3
	dd_disable_OUTPUT(PIOA,DRDY_TS2_PIN );
   80b58:	2110      	movs	r1, #16
   80b5a:	4836      	ldr	r0, [pc, #216]	; (80c34 <dd_TEMP_SENSOR_PINS_INIT+0x120>)
   80b5c:	4b37      	ldr	r3, [pc, #220]	; (80c3c <dd_TEMP_SENSOR_PINS_INIT+0x128>)
   80b5e:	4798      	blx	r3
	dd_disable_OUTPUT(PIOA,DRDY_TS3_PIN );
   80b60:	2114      	movs	r1, #20
   80b62:	4834      	ldr	r0, [pc, #208]	; (80c34 <dd_TEMP_SENSOR_PINS_INIT+0x120>)
   80b64:	4b35      	ldr	r3, [pc, #212]	; (80c3c <dd_TEMP_SENSOR_PINS_INIT+0x128>)
   80b66:	4798      	blx	r3
	dd_disable_OUTPUT(PIOA,DRDY_CS1_TS_PIN );
   80b68:	2111      	movs	r1, #17
   80b6a:	4832      	ldr	r0, [pc, #200]	; (80c34 <dd_TEMP_SENSOR_PINS_INIT+0x120>)
   80b6c:	4b33      	ldr	r3, [pc, #204]	; (80c3c <dd_TEMP_SENSOR_PINS_INIT+0x128>)
   80b6e:	4798      	blx	r3
	dd_disable_OUTPUT(PIOA,DRDY_CS2_TS_PIN );
   80b70:	2112      	movs	r1, #18
   80b72:	4830      	ldr	r0, [pc, #192]	; (80c34 <dd_TEMP_SENSOR_PINS_INIT+0x120>)
   80b74:	4b31      	ldr	r3, [pc, #196]	; (80c3c <dd_TEMP_SENSOR_PINS_INIT+0x128>)
   80b76:	4798      	blx	r3
	dd_disable_OUTPUT(PIOA,DRDY_CS3_TS_PIN );
   80b78:	2113      	movs	r1, #19
   80b7a:	482e      	ldr	r0, [pc, #184]	; (80c34 <dd_TEMP_SENSOR_PINS_INIT+0x120>)
   80b7c:	4b2f      	ldr	r3, [pc, #188]	; (80c3c <dd_TEMP_SENSOR_PINS_INIT+0x128>)
   80b7e:	4798      	blx	r3
	dd_disable_OUTPUT(PIOA,THERMOCOUPLE_DRDY_PIN );
   80b80:	210e      	movs	r1, #14
   80b82:	482c      	ldr	r0, [pc, #176]	; (80c34 <dd_TEMP_SENSOR_PINS_INIT+0x120>)
   80b84:	4b2d      	ldr	r3, [pc, #180]	; (80c3c <dd_TEMP_SENSOR_PINS_INIT+0x128>)
   80b86:	4798      	blx	r3
	
	dd_CLEAR_OUTPUT_DATA(PIOA,DRDY_TS1_PIN );
   80b88:	210f      	movs	r1, #15
   80b8a:	482a      	ldr	r0, [pc, #168]	; (80c34 <dd_TEMP_SENSOR_PINS_INIT+0x120>)
   80b8c:	4b2c      	ldr	r3, [pc, #176]	; (80c40 <dd_TEMP_SENSOR_PINS_INIT+0x12c>)
   80b8e:	4798      	blx	r3
	dd_CLEAR_OUTPUT_DATA(PIOA,DRDY_TS2_PIN );
   80b90:	2110      	movs	r1, #16
   80b92:	4828      	ldr	r0, [pc, #160]	; (80c34 <dd_TEMP_SENSOR_PINS_INIT+0x120>)
   80b94:	4b2a      	ldr	r3, [pc, #168]	; (80c40 <dd_TEMP_SENSOR_PINS_INIT+0x12c>)
   80b96:	4798      	blx	r3
	dd_CLEAR_OUTPUT_DATA(PIOA,DRDY_TS3_PIN );
   80b98:	2114      	movs	r1, #20
   80b9a:	4826      	ldr	r0, [pc, #152]	; (80c34 <dd_TEMP_SENSOR_PINS_INIT+0x120>)
   80b9c:	4b28      	ldr	r3, [pc, #160]	; (80c40 <dd_TEMP_SENSOR_PINS_INIT+0x12c>)
   80b9e:	4798      	blx	r3
	dd_CLEAR_OUTPUT_DATA(PIOA,DRDY_CS1_TS_PIN );
   80ba0:	2111      	movs	r1, #17
   80ba2:	4824      	ldr	r0, [pc, #144]	; (80c34 <dd_TEMP_SENSOR_PINS_INIT+0x120>)
   80ba4:	4b26      	ldr	r3, [pc, #152]	; (80c40 <dd_TEMP_SENSOR_PINS_INIT+0x12c>)
   80ba6:	4798      	blx	r3
	dd_CLEAR_OUTPUT_DATA(PIOA,DRDY_CS2_TS_PIN );
   80ba8:	2112      	movs	r1, #18
   80baa:	4822      	ldr	r0, [pc, #136]	; (80c34 <dd_TEMP_SENSOR_PINS_INIT+0x120>)
   80bac:	4b24      	ldr	r3, [pc, #144]	; (80c40 <dd_TEMP_SENSOR_PINS_INIT+0x12c>)
   80bae:	4798      	blx	r3
	dd_CLEAR_OUTPUT_DATA(PIOA,DRDY_CS3_TS_PIN );
   80bb0:	2113      	movs	r1, #19
   80bb2:	4820      	ldr	r0, [pc, #128]	; (80c34 <dd_TEMP_SENSOR_PINS_INIT+0x120>)
   80bb4:	4b22      	ldr	r3, [pc, #136]	; (80c40 <dd_TEMP_SENSOR_PINS_INIT+0x12c>)
   80bb6:	4798      	blx	r3
	dd_CLEAR_OUTPUT_DATA(PIOA,THERMOCOUPLE_DRDY_PIN );
   80bb8:	210e      	movs	r1, #14
   80bba:	481e      	ldr	r0, [pc, #120]	; (80c34 <dd_TEMP_SENSOR_PINS_INIT+0x120>)
   80bbc:	4b20      	ldr	r3, [pc, #128]	; (80c40 <dd_TEMP_SENSOR_PINS_INIT+0x12c>)
   80bbe:	4798      	blx	r3
	
	dd_PIO_INTERRUPT_DISABLE(PIOA,DRDY_TS1_PIN );
   80bc0:	210f      	movs	r1, #15
   80bc2:	481c      	ldr	r0, [pc, #112]	; (80c34 <dd_TEMP_SENSOR_PINS_INIT+0x120>)
   80bc4:	4b1f      	ldr	r3, [pc, #124]	; (80c44 <dd_TEMP_SENSOR_PINS_INIT+0x130>)
   80bc6:	4798      	blx	r3
	dd_PIO_INTERRUPT_DISABLE(PIOA,DRDY_TS2_PIN );
   80bc8:	2110      	movs	r1, #16
   80bca:	481a      	ldr	r0, [pc, #104]	; (80c34 <dd_TEMP_SENSOR_PINS_INIT+0x120>)
   80bcc:	4b1d      	ldr	r3, [pc, #116]	; (80c44 <dd_TEMP_SENSOR_PINS_INIT+0x130>)
   80bce:	4798      	blx	r3
	dd_PIO_INTERRUPT_DISABLE(PIOA,DRDY_TS3_PIN );
   80bd0:	2114      	movs	r1, #20
   80bd2:	4818      	ldr	r0, [pc, #96]	; (80c34 <dd_TEMP_SENSOR_PINS_INIT+0x120>)
   80bd4:	4b1b      	ldr	r3, [pc, #108]	; (80c44 <dd_TEMP_SENSOR_PINS_INIT+0x130>)
   80bd6:	4798      	blx	r3
	dd_PIO_INTERRUPT_DISABLE(PIOA,DRDY_CS1_TS_PIN );
   80bd8:	2111      	movs	r1, #17
   80bda:	4816      	ldr	r0, [pc, #88]	; (80c34 <dd_TEMP_SENSOR_PINS_INIT+0x120>)
   80bdc:	4b19      	ldr	r3, [pc, #100]	; (80c44 <dd_TEMP_SENSOR_PINS_INIT+0x130>)
   80bde:	4798      	blx	r3
	dd_PIO_INTERRUPT_DISABLE(PIOA,DRDY_CS2_TS_PIN );
   80be0:	2112      	movs	r1, #18
   80be2:	4814      	ldr	r0, [pc, #80]	; (80c34 <dd_TEMP_SENSOR_PINS_INIT+0x120>)
   80be4:	4b17      	ldr	r3, [pc, #92]	; (80c44 <dd_TEMP_SENSOR_PINS_INIT+0x130>)
   80be6:	4798      	blx	r3
	dd_PIO_INTERRUPT_DISABLE(PIOA,DRDY_CS3_TS_PIN );
   80be8:	2113      	movs	r1, #19
   80bea:	4812      	ldr	r0, [pc, #72]	; (80c34 <dd_TEMP_SENSOR_PINS_INIT+0x120>)
   80bec:	4b15      	ldr	r3, [pc, #84]	; (80c44 <dd_TEMP_SENSOR_PINS_INIT+0x130>)
   80bee:	4798      	blx	r3
	dd_PIO_INTERRUPT_DISABLE(PIOA,THERMOCOUPLE_DRDY_PIN );
   80bf0:	210e      	movs	r1, #14
   80bf2:	4810      	ldr	r0, [pc, #64]	; (80c34 <dd_TEMP_SENSOR_PINS_INIT+0x120>)
   80bf4:	4b13      	ldr	r3, [pc, #76]	; (80c44 <dd_TEMP_SENSOR_PINS_INIT+0x130>)
   80bf6:	4798      	blx	r3
	
	dd_disable_OUTPUT_WRITE(PIOA,DRDY_TS1_PIN );
   80bf8:	210f      	movs	r1, #15
   80bfa:	480e      	ldr	r0, [pc, #56]	; (80c34 <dd_TEMP_SENSOR_PINS_INIT+0x120>)
   80bfc:	4b12      	ldr	r3, [pc, #72]	; (80c48 <dd_TEMP_SENSOR_PINS_INIT+0x134>)
   80bfe:	4798      	blx	r3
	dd_disable_OUTPUT_WRITE(PIOA,DRDY_TS2_PIN );
   80c00:	2110      	movs	r1, #16
   80c02:	480c      	ldr	r0, [pc, #48]	; (80c34 <dd_TEMP_SENSOR_PINS_INIT+0x120>)
   80c04:	4b10      	ldr	r3, [pc, #64]	; (80c48 <dd_TEMP_SENSOR_PINS_INIT+0x134>)
   80c06:	4798      	blx	r3
	dd_disable_OUTPUT_WRITE(PIOA,DRDY_TS3_PIN );
   80c08:	2114      	movs	r1, #20
   80c0a:	480a      	ldr	r0, [pc, #40]	; (80c34 <dd_TEMP_SENSOR_PINS_INIT+0x120>)
   80c0c:	4b0e      	ldr	r3, [pc, #56]	; (80c48 <dd_TEMP_SENSOR_PINS_INIT+0x134>)
   80c0e:	4798      	blx	r3
	dd_disable_OUTPUT_WRITE(PIOA,DRDY_CS1_TS_PIN );
   80c10:	2111      	movs	r1, #17
   80c12:	4808      	ldr	r0, [pc, #32]	; (80c34 <dd_TEMP_SENSOR_PINS_INIT+0x120>)
   80c14:	4b0c      	ldr	r3, [pc, #48]	; (80c48 <dd_TEMP_SENSOR_PINS_INIT+0x134>)
   80c16:	4798      	blx	r3
	dd_disable_OUTPUT_WRITE(PIOA,DRDY_CS2_TS_PIN );
   80c18:	2112      	movs	r1, #18
   80c1a:	4806      	ldr	r0, [pc, #24]	; (80c34 <dd_TEMP_SENSOR_PINS_INIT+0x120>)
   80c1c:	4b0a      	ldr	r3, [pc, #40]	; (80c48 <dd_TEMP_SENSOR_PINS_INIT+0x134>)
   80c1e:	4798      	blx	r3
	dd_disable_OUTPUT_WRITE(PIOA,DRDY_CS3_TS_PIN );
   80c20:	2113      	movs	r1, #19
   80c22:	4804      	ldr	r0, [pc, #16]	; (80c34 <dd_TEMP_SENSOR_PINS_INIT+0x120>)
   80c24:	4b08      	ldr	r3, [pc, #32]	; (80c48 <dd_TEMP_SENSOR_PINS_INIT+0x134>)
   80c26:	4798      	blx	r3
	dd_disable_OUTPUT_WRITE(PIOA,THERMOCOUPLE_DRDY_PIN );	
   80c28:	210e      	movs	r1, #14
   80c2a:	4802      	ldr	r0, [pc, #8]	; (80c34 <dd_TEMP_SENSOR_PINS_INIT+0x120>)
   80c2c:	4b06      	ldr	r3, [pc, #24]	; (80c48 <dd_TEMP_SENSOR_PINS_INIT+0x134>)
   80c2e:	4798      	blx	r3
}
   80c30:	bf00      	nop
   80c32:	bd80      	pop	{r7, pc}
   80c34:	400e0e00 	.word	0x400e0e00
   80c38:	0008107d 	.word	0x0008107d
   80c3c:	000810e9 	.word	0x000810e9
   80c40:	00081131 	.word	0x00081131
   80c44:	0008103d 	.word	0x0008103d
   80c48:	000811c5 	.word	0x000811c5

00080c4c <dd_SPI_pins_INIT>:
	
	
	
void dd_SPI_pins_INIT()  {
   80c4c:	b580      	push	{r7, lr}
   80c4e:	af00      	add	r7, sp, #0
		
		dd_disable_PIO(PIOA, SPI0_MOSI_PIN);
   80c50:	211a      	movs	r1, #26
   80c52:	4891      	ldr	r0, [pc, #580]	; (80e98 <dd_SPI_pins_INIT+0x24c>)
   80c54:	4b91      	ldr	r3, [pc, #580]	; (80e9c <dd_SPI_pins_INIT+0x250>)
   80c56:	4798      	blx	r3
		dd_disable_PIO(PIOA, SPI0_MISO_PIN);
   80c58:	2119      	movs	r1, #25
   80c5a:	488f      	ldr	r0, [pc, #572]	; (80e98 <dd_SPI_pins_INIT+0x24c>)
   80c5c:	4b8f      	ldr	r3, [pc, #572]	; (80e9c <dd_SPI_pins_INIT+0x250>)
   80c5e:	4798      	blx	r3
		dd_disable_PIO(PIOA, SPI0_SCLK_PIN);
   80c60:	211b      	movs	r1, #27
   80c62:	488d      	ldr	r0, [pc, #564]	; (80e98 <dd_SPI_pins_INIT+0x24c>)
   80c64:	4b8d      	ldr	r3, [pc, #564]	; (80e9c <dd_SPI_pins_INIT+0x250>)
   80c66:	4798      	blx	r3
		dd_disable_PIO(PIOA, SPI0_NPCS0_PIN);
   80c68:	211c      	movs	r1, #28
   80c6a:	488b      	ldr	r0, [pc, #556]	; (80e98 <dd_SPI_pins_INIT+0x24c>)
   80c6c:	4b8b      	ldr	r3, [pc, #556]	; (80e9c <dd_SPI_pins_INIT+0x250>)
   80c6e:	4798      	blx	r3
		dd_disable_PIO(PIOA, SPI0_NPCS1_PIN);
   80c70:	211d      	movs	r1, #29
   80c72:	4889      	ldr	r0, [pc, #548]	; (80e98 <dd_SPI_pins_INIT+0x24c>)
   80c74:	4b89      	ldr	r3, [pc, #548]	; (80e9c <dd_SPI_pins_INIT+0x250>)
   80c76:	4798      	blx	r3
		
		dd_disable_PIO(PIOB, SPI0_NPCS2_PIN);
   80c78:	2115      	movs	r1, #21
   80c7a:	4889      	ldr	r0, [pc, #548]	; (80ea0 <dd_SPI_pins_INIT+0x254>)
   80c7c:	4b87      	ldr	r3, [pc, #540]	; (80e9c <dd_SPI_pins_INIT+0x250>)
   80c7e:	4798      	blx	r3
		dd_disable_PIO(PIOB, SPI0_NPCS3_PIN);
   80c80:	2117      	movs	r1, #23
   80c82:	4887      	ldr	r0, [pc, #540]	; (80ea0 <dd_SPI_pins_INIT+0x254>)
   80c84:	4b85      	ldr	r3, [pc, #532]	; (80e9c <dd_SPI_pins_INIT+0x250>)
   80c86:	4798      	blx	r3
// 		dd_enable_PULLUP(PIOB, SPI0_NPCS2_PIN);
// 		dd_enable_PULLUP(PIOB, SPI0_NPCS3_PIN);		
		
		
		
		dd_enable_PIO(PIOA, SPI0_MISO_ISOLATER_1_DISABLE_PIN);
   80c88:	2106      	movs	r1, #6
   80c8a:	4883      	ldr	r0, [pc, #524]	; (80e98 <dd_SPI_pins_INIT+0x24c>)
   80c8c:	4b85      	ldr	r3, [pc, #532]	; (80ea4 <dd_SPI_pins_INIT+0x258>)
   80c8e:	4798      	blx	r3
		dd_enable_OUTPUT(PIOA, SPI0_MISO_ISOLATER_1_DISABLE_PIN);
   80c90:	2106      	movs	r1, #6
   80c92:	4881      	ldr	r0, [pc, #516]	; (80e98 <dd_SPI_pins_INIT+0x24c>)
   80c94:	4b84      	ldr	r3, [pc, #528]	; (80ea8 <dd_SPI_pins_INIT+0x25c>)
   80c96:	4798      	blx	r3
		dd_enable_PULLUP(PIOA, SPI0_MISO_ISOLATER_1_DISABLE_PIN);
   80c98:	2106      	movs	r1, #6
   80c9a:	487f      	ldr	r0, [pc, #508]	; (80e98 <dd_SPI_pins_INIT+0x24c>)
   80c9c:	4b83      	ldr	r3, [pc, #524]	; (80eac <dd_SPI_pins_INIT+0x260>)
   80c9e:	4798      	blx	r3
		dd_SET_OUTPUT_DATA(PIOA, SPI0_MISO_ISOLATER_1_DISABLE_PIN);
   80ca0:	2106      	movs	r1, #6
   80ca2:	487d      	ldr	r0, [pc, #500]	; (80e98 <dd_SPI_pins_INIT+0x24c>)
   80ca4:	4b82      	ldr	r3, [pc, #520]	; (80eb0 <dd_SPI_pins_INIT+0x264>)
   80ca6:	4798      	blx	r3
		dd_enable_OUTPUT_WRITE(PIOA, SPI0_MISO_ISOLATER_1_DISABLE_PIN);
   80ca8:	2106      	movs	r1, #6
   80caa:	487b      	ldr	r0, [pc, #492]	; (80e98 <dd_SPI_pins_INIT+0x24c>)
   80cac:	4b81      	ldr	r3, [pc, #516]	; (80eb4 <dd_SPI_pins_INIT+0x268>)
   80cae:	4798      	blx	r3
		
		dd_enable_PIO(PIOA, SPI0_MISO_ISOLATER_2_DISABLE_PIN);
   80cb0:	2105      	movs	r1, #5
   80cb2:	4879      	ldr	r0, [pc, #484]	; (80e98 <dd_SPI_pins_INIT+0x24c>)
   80cb4:	4b7b      	ldr	r3, [pc, #492]	; (80ea4 <dd_SPI_pins_INIT+0x258>)
   80cb6:	4798      	blx	r3
		dd_enable_OUTPUT(PIOA, SPI0_MISO_ISOLATER_2_DISABLE_PIN);
   80cb8:	2105      	movs	r1, #5
   80cba:	4877      	ldr	r0, [pc, #476]	; (80e98 <dd_SPI_pins_INIT+0x24c>)
   80cbc:	4b7a      	ldr	r3, [pc, #488]	; (80ea8 <dd_SPI_pins_INIT+0x25c>)
   80cbe:	4798      	blx	r3
		dd_enable_PULLUP(PIOA, SPI0_MISO_ISOLATER_2_DISABLE_PIN);
   80cc0:	2105      	movs	r1, #5
   80cc2:	4875      	ldr	r0, [pc, #468]	; (80e98 <dd_SPI_pins_INIT+0x24c>)
   80cc4:	4b79      	ldr	r3, [pc, #484]	; (80eac <dd_SPI_pins_INIT+0x260>)
   80cc6:	4798      	blx	r3
		dd_SET_OUTPUT_DATA(PIOA, SPI0_MISO_ISOLATER_2_DISABLE_PIN);
   80cc8:	2105      	movs	r1, #5
   80cca:	4873      	ldr	r0, [pc, #460]	; (80e98 <dd_SPI_pins_INIT+0x24c>)
   80ccc:	4b78      	ldr	r3, [pc, #480]	; (80eb0 <dd_SPI_pins_INIT+0x264>)
   80cce:	4798      	blx	r3
		dd_enable_OUTPUT_WRITE(PIOA, SPI0_MISO_ISOLATER_2_DISABLE_PIN);
   80cd0:	2105      	movs	r1, #5
   80cd2:	4871      	ldr	r0, [pc, #452]	; (80e98 <dd_SPI_pins_INIT+0x24c>)
   80cd4:	4b77      	ldr	r3, [pc, #476]	; (80eb4 <dd_SPI_pins_INIT+0x268>)
   80cd6:	4798      	blx	r3
		
		dd_enable_PIO(PIOA, SPI0_MISO_ISOLATER_3_DISABLE_PIN);
   80cd8:	2104      	movs	r1, #4
   80cda:	486f      	ldr	r0, [pc, #444]	; (80e98 <dd_SPI_pins_INIT+0x24c>)
   80cdc:	4b71      	ldr	r3, [pc, #452]	; (80ea4 <dd_SPI_pins_INIT+0x258>)
   80cde:	4798      	blx	r3
		dd_enable_OUTPUT(PIOA, SPI0_MISO_ISOLATER_3_DISABLE_PIN);
   80ce0:	2104      	movs	r1, #4
   80ce2:	486d      	ldr	r0, [pc, #436]	; (80e98 <dd_SPI_pins_INIT+0x24c>)
   80ce4:	4b70      	ldr	r3, [pc, #448]	; (80ea8 <dd_SPI_pins_INIT+0x25c>)
   80ce6:	4798      	blx	r3
		dd_enable_PULLUP(PIOA, SPI0_MISO_ISOLATER_3_DISABLE_PIN);
   80ce8:	2104      	movs	r1, #4
   80cea:	486b      	ldr	r0, [pc, #428]	; (80e98 <dd_SPI_pins_INIT+0x24c>)
   80cec:	4b6f      	ldr	r3, [pc, #444]	; (80eac <dd_SPI_pins_INIT+0x260>)
   80cee:	4798      	blx	r3
		dd_SET_OUTPUT_DATA(PIOA, SPI0_MISO_ISOLATER_3_DISABLE_PIN);
   80cf0:	2104      	movs	r1, #4
   80cf2:	4869      	ldr	r0, [pc, #420]	; (80e98 <dd_SPI_pins_INIT+0x24c>)
   80cf4:	4b6e      	ldr	r3, [pc, #440]	; (80eb0 <dd_SPI_pins_INIT+0x264>)
   80cf6:	4798      	blx	r3
		dd_enable_OUTPUT_WRITE(PIOA, SPI0_MISO_ISOLATER_3_DISABLE_PIN);
   80cf8:	2104      	movs	r1, #4
   80cfa:	4867      	ldr	r0, [pc, #412]	; (80e98 <dd_SPI_pins_INIT+0x24c>)
   80cfc:	4b6d      	ldr	r3, [pc, #436]	; (80eb4 <dd_SPI_pins_INIT+0x268>)
   80cfe:	4798      	blx	r3
		
		dd_enable_PIO(PIOA, SPI0_MISO_ISOLATER_4_DISABLE_PIN);
   80d00:	2103      	movs	r1, #3
   80d02:	4865      	ldr	r0, [pc, #404]	; (80e98 <dd_SPI_pins_INIT+0x24c>)
   80d04:	4b67      	ldr	r3, [pc, #412]	; (80ea4 <dd_SPI_pins_INIT+0x258>)
   80d06:	4798      	blx	r3
		dd_enable_OUTPUT(PIOA, SPI0_MISO_ISOLATER_4_DISABLE_PIN);
   80d08:	2103      	movs	r1, #3
   80d0a:	4863      	ldr	r0, [pc, #396]	; (80e98 <dd_SPI_pins_INIT+0x24c>)
   80d0c:	4b66      	ldr	r3, [pc, #408]	; (80ea8 <dd_SPI_pins_INIT+0x25c>)
   80d0e:	4798      	blx	r3
		dd_enable_PULLUP(PIOA, SPI0_MISO_ISOLATER_4_DISABLE_PIN);
   80d10:	2103      	movs	r1, #3
   80d12:	4861      	ldr	r0, [pc, #388]	; (80e98 <dd_SPI_pins_INIT+0x24c>)
   80d14:	4b65      	ldr	r3, [pc, #404]	; (80eac <dd_SPI_pins_INIT+0x260>)
   80d16:	4798      	blx	r3
		dd_SET_OUTPUT_DATA(PIOA, SPI0_MISO_ISOLATER_4_DISABLE_PIN);
   80d18:	2103      	movs	r1, #3
   80d1a:	485f      	ldr	r0, [pc, #380]	; (80e98 <dd_SPI_pins_INIT+0x24c>)
   80d1c:	4b64      	ldr	r3, [pc, #400]	; (80eb0 <dd_SPI_pins_INIT+0x264>)
   80d1e:	4798      	blx	r3
		dd_enable_OUTPUT_WRITE(PIOA, SPI0_MISO_ISOLATER_4_DISABLE_PIN);
   80d20:	2103      	movs	r1, #3
   80d22:	485d      	ldr	r0, [pc, #372]	; (80e98 <dd_SPI_pins_INIT+0x24c>)
   80d24:	4b63      	ldr	r3, [pc, #396]	; (80eb4 <dd_SPI_pins_INIT+0x268>)
   80d26:	4798      	blx	r3
		
		dd_enable_PIO(PIOB, SPIO_NPCS_G2A_PIN);
   80d28:	2100      	movs	r1, #0
   80d2a:	485d      	ldr	r0, [pc, #372]	; (80ea0 <dd_SPI_pins_INIT+0x254>)
   80d2c:	4b5d      	ldr	r3, [pc, #372]	; (80ea4 <dd_SPI_pins_INIT+0x258>)
   80d2e:	4798      	blx	r3
		dd_enable_OUTPUT(PIOB, SPIO_NPCS_G2A_PIN);
   80d30:	2100      	movs	r1, #0
   80d32:	485b      	ldr	r0, [pc, #364]	; (80ea0 <dd_SPI_pins_INIT+0x254>)
   80d34:	4b5c      	ldr	r3, [pc, #368]	; (80ea8 <dd_SPI_pins_INIT+0x25c>)
   80d36:	4798      	blx	r3
		dd_enable_PULLUP(PIOB, SPIO_NPCS_G2A_PIN);
   80d38:	2100      	movs	r1, #0
   80d3a:	4859      	ldr	r0, [pc, #356]	; (80ea0 <dd_SPI_pins_INIT+0x254>)
   80d3c:	4b5b      	ldr	r3, [pc, #364]	; (80eac <dd_SPI_pins_INIT+0x260>)
   80d3e:	4798      	blx	r3
		dd_CLEAR_OUTPUT_DATA(PIOB, SPIO_NPCS_G2A_PIN);
   80d40:	2100      	movs	r1, #0
   80d42:	4857      	ldr	r0, [pc, #348]	; (80ea0 <dd_SPI_pins_INIT+0x254>)
   80d44:	4b5c      	ldr	r3, [pc, #368]	; (80eb8 <dd_SPI_pins_INIT+0x26c>)
   80d46:	4798      	blx	r3
		dd_enable_OUTPUT_WRITE(PIOB, SPIO_NPCS_G2A_PIN);
   80d48:	2100      	movs	r1, #0
   80d4a:	4855      	ldr	r0, [pc, #340]	; (80ea0 <dd_SPI_pins_INIT+0x254>)
   80d4c:	4b59      	ldr	r3, [pc, #356]	; (80eb4 <dd_SPI_pins_INIT+0x268>)
   80d4e:	4798      	blx	r3
		
		dd_enable_PIO(PIOB, SPIO_NPCS_G2B_PIN);
   80d50:	2101      	movs	r1, #1
   80d52:	4853      	ldr	r0, [pc, #332]	; (80ea0 <dd_SPI_pins_INIT+0x254>)
   80d54:	4b53      	ldr	r3, [pc, #332]	; (80ea4 <dd_SPI_pins_INIT+0x258>)
   80d56:	4798      	blx	r3
		dd_enable_OUTPUT(PIOB, SPIO_NPCS_G2B_PIN);
   80d58:	2101      	movs	r1, #1
   80d5a:	4851      	ldr	r0, [pc, #324]	; (80ea0 <dd_SPI_pins_INIT+0x254>)
   80d5c:	4b52      	ldr	r3, [pc, #328]	; (80ea8 <dd_SPI_pins_INIT+0x25c>)
   80d5e:	4798      	blx	r3
		dd_enable_PULLUP(PIOB, SPIO_NPCS_G2B_PIN);
   80d60:	2101      	movs	r1, #1
   80d62:	484f      	ldr	r0, [pc, #316]	; (80ea0 <dd_SPI_pins_INIT+0x254>)
   80d64:	4b51      	ldr	r3, [pc, #324]	; (80eac <dd_SPI_pins_INIT+0x260>)
   80d66:	4798      	blx	r3
		dd_CLEAR_OUTPUT_DATA(PIOB, SPIO_NPCS_G2B_PIN);
   80d68:	2101      	movs	r1, #1
   80d6a:	484d      	ldr	r0, [pc, #308]	; (80ea0 <dd_SPI_pins_INIT+0x254>)
   80d6c:	4b52      	ldr	r3, [pc, #328]	; (80eb8 <dd_SPI_pins_INIT+0x26c>)
   80d6e:	4798      	blx	r3
		dd_enable_OUTPUT_WRITE(PIOB, SPIO_NPCS_G2B_PIN);
   80d70:	2101      	movs	r1, #1
   80d72:	484b      	ldr	r0, [pc, #300]	; (80ea0 <dd_SPI_pins_INIT+0x254>)
   80d74:	4b4f      	ldr	r3, [pc, #316]	; (80eb4 <dd_SPI_pins_INIT+0x268>)
   80d76:	4798      	blx	r3
		
		dd_enable_PIO(PIOB, SPIO_NPCS_G1_PIN);
   80d78:	2102      	movs	r1, #2
   80d7a:	4849      	ldr	r0, [pc, #292]	; (80ea0 <dd_SPI_pins_INIT+0x254>)
   80d7c:	4b49      	ldr	r3, [pc, #292]	; (80ea4 <dd_SPI_pins_INIT+0x258>)
   80d7e:	4798      	blx	r3
		dd_enable_OUTPUT(PIOB, SPIO_NPCS_G1_PIN);
   80d80:	2102      	movs	r1, #2
   80d82:	4847      	ldr	r0, [pc, #284]	; (80ea0 <dd_SPI_pins_INIT+0x254>)
   80d84:	4b48      	ldr	r3, [pc, #288]	; (80ea8 <dd_SPI_pins_INIT+0x25c>)
   80d86:	4798      	blx	r3
		dd_enable_PULLUP(PIOB, SPIO_NPCS_G1_PIN);
   80d88:	2102      	movs	r1, #2
   80d8a:	4845      	ldr	r0, [pc, #276]	; (80ea0 <dd_SPI_pins_INIT+0x254>)
   80d8c:	4b47      	ldr	r3, [pc, #284]	; (80eac <dd_SPI_pins_INIT+0x260>)
   80d8e:	4798      	blx	r3
		dd_CLEAR_OUTPUT_DATA(PIOB, SPIO_NPCS_G1_PIN);		
   80d90:	2102      	movs	r1, #2
   80d92:	4843      	ldr	r0, [pc, #268]	; (80ea0 <dd_SPI_pins_INIT+0x254>)
   80d94:	4b48      	ldr	r3, [pc, #288]	; (80eb8 <dd_SPI_pins_INIT+0x26c>)
   80d96:	4798      	blx	r3
		dd_enable_OUTPUT_WRITE(PIOB, SPIO_NPCS_G1_PIN);	
   80d98:	2102      	movs	r1, #2
   80d9a:	4841      	ldr	r0, [pc, #260]	; (80ea0 <dd_SPI_pins_INIT+0x254>)
   80d9c:	4b45      	ldr	r3, [pc, #276]	; (80eb4 <dd_SPI_pins_INIT+0x268>)
   80d9e:	4798      	blx	r3
		
		
		dd_enable_PIO(PIOB, ISOLTR_1_SSA0_PIN);
   80da0:	2103      	movs	r1, #3
   80da2:	483f      	ldr	r0, [pc, #252]	; (80ea0 <dd_SPI_pins_INIT+0x254>)
   80da4:	4b3f      	ldr	r3, [pc, #252]	; (80ea4 <dd_SPI_pins_INIT+0x258>)
   80da6:	4798      	blx	r3
		dd_enable_OUTPUT(PIOB, ISOLTR_1_SSA0_PIN);
   80da8:	2103      	movs	r1, #3
   80daa:	483d      	ldr	r0, [pc, #244]	; (80ea0 <dd_SPI_pins_INIT+0x254>)
   80dac:	4b3e      	ldr	r3, [pc, #248]	; (80ea8 <dd_SPI_pins_INIT+0x25c>)
   80dae:	4798      	blx	r3
		dd_enable_PULLUP(PIOB, ISOLTR_1_SSA0_PIN);
   80db0:	2103      	movs	r1, #3
   80db2:	483b      	ldr	r0, [pc, #236]	; (80ea0 <dd_SPI_pins_INIT+0x254>)
   80db4:	4b3d      	ldr	r3, [pc, #244]	; (80eac <dd_SPI_pins_INIT+0x260>)
   80db6:	4798      	blx	r3
		dd_enable_OUTPUT_WRITE(PIOB, ISOLTR_1_SSA0_PIN);
   80db8:	2103      	movs	r1, #3
   80dba:	4839      	ldr	r0, [pc, #228]	; (80ea0 <dd_SPI_pins_INIT+0x254>)
   80dbc:	4b3d      	ldr	r3, [pc, #244]	; (80eb4 <dd_SPI_pins_INIT+0x268>)
   80dbe:	4798      	blx	r3
		dd_CLEAR_OUTPUT_DATA(PIOB, ISOLTR_1_SSA0_PIN);
   80dc0:	2103      	movs	r1, #3
   80dc2:	4837      	ldr	r0, [pc, #220]	; (80ea0 <dd_SPI_pins_INIT+0x254>)
   80dc4:	4b3c      	ldr	r3, [pc, #240]	; (80eb8 <dd_SPI_pins_INIT+0x26c>)
   80dc6:	4798      	blx	r3
		
		dd_enable_PIO(PIOB, ISOLTR_1_SSA1_PIN);
   80dc8:	2104      	movs	r1, #4
   80dca:	4835      	ldr	r0, [pc, #212]	; (80ea0 <dd_SPI_pins_INIT+0x254>)
   80dcc:	4b35      	ldr	r3, [pc, #212]	; (80ea4 <dd_SPI_pins_INIT+0x258>)
   80dce:	4798      	blx	r3
		dd_enable_OUTPUT(PIOB, ISOLTR_1_SSA1_PIN);
   80dd0:	2104      	movs	r1, #4
   80dd2:	4833      	ldr	r0, [pc, #204]	; (80ea0 <dd_SPI_pins_INIT+0x254>)
   80dd4:	4b34      	ldr	r3, [pc, #208]	; (80ea8 <dd_SPI_pins_INIT+0x25c>)
   80dd6:	4798      	blx	r3
		dd_enable_PULLUP(PIOB, ISOLTR_1_SSA1_PIN);
   80dd8:	2104      	movs	r1, #4
   80dda:	4831      	ldr	r0, [pc, #196]	; (80ea0 <dd_SPI_pins_INIT+0x254>)
   80ddc:	4b33      	ldr	r3, [pc, #204]	; (80eac <dd_SPI_pins_INIT+0x260>)
   80dde:	4798      	blx	r3
		dd_enable_OUTPUT_WRITE(PIOB, ISOLTR_1_SSA1_PIN);
   80de0:	2104      	movs	r1, #4
   80de2:	482f      	ldr	r0, [pc, #188]	; (80ea0 <dd_SPI_pins_INIT+0x254>)
   80de4:	4b33      	ldr	r3, [pc, #204]	; (80eb4 <dd_SPI_pins_INIT+0x268>)
   80de6:	4798      	blx	r3
		dd_CLEAR_OUTPUT_DATA(PIOB, ISOLTR_1_SSA1_PIN);
   80de8:	2104      	movs	r1, #4
   80dea:	482d      	ldr	r0, [pc, #180]	; (80ea0 <dd_SPI_pins_INIT+0x254>)
   80dec:	4b32      	ldr	r3, [pc, #200]	; (80eb8 <dd_SPI_pins_INIT+0x26c>)
   80dee:	4798      	blx	r3
		
		dd_enable_PIO(PIOB, ISOLTR_2_SSA0_PIN);
   80df0:	2105      	movs	r1, #5
   80df2:	482b      	ldr	r0, [pc, #172]	; (80ea0 <dd_SPI_pins_INIT+0x254>)
   80df4:	4b2b      	ldr	r3, [pc, #172]	; (80ea4 <dd_SPI_pins_INIT+0x258>)
   80df6:	4798      	blx	r3
		dd_enable_OUTPUT(PIOB, ISOLTR_2_SSA0_PIN);
   80df8:	2105      	movs	r1, #5
   80dfa:	4829      	ldr	r0, [pc, #164]	; (80ea0 <dd_SPI_pins_INIT+0x254>)
   80dfc:	4b2a      	ldr	r3, [pc, #168]	; (80ea8 <dd_SPI_pins_INIT+0x25c>)
   80dfe:	4798      	blx	r3
		dd_enable_PULLUP(PIOB, ISOLTR_2_SSA0_PIN);
   80e00:	2105      	movs	r1, #5
   80e02:	4827      	ldr	r0, [pc, #156]	; (80ea0 <dd_SPI_pins_INIT+0x254>)
   80e04:	4b29      	ldr	r3, [pc, #164]	; (80eac <dd_SPI_pins_INIT+0x260>)
   80e06:	4798      	blx	r3
		dd_enable_OUTPUT_WRITE(PIOB, ISOLTR_2_SSA0_PIN);
   80e08:	2105      	movs	r1, #5
   80e0a:	4825      	ldr	r0, [pc, #148]	; (80ea0 <dd_SPI_pins_INIT+0x254>)
   80e0c:	4b29      	ldr	r3, [pc, #164]	; (80eb4 <dd_SPI_pins_INIT+0x268>)
   80e0e:	4798      	blx	r3
		dd_CLEAR_OUTPUT_DATA(PIOB, ISOLTR_2_SSA0_PIN);
   80e10:	2105      	movs	r1, #5
   80e12:	4823      	ldr	r0, [pc, #140]	; (80ea0 <dd_SPI_pins_INIT+0x254>)
   80e14:	4b28      	ldr	r3, [pc, #160]	; (80eb8 <dd_SPI_pins_INIT+0x26c>)
   80e16:	4798      	blx	r3
		
		dd_enable_PIO(PIOB, ISOLTR_2_SSA1_PIN);
   80e18:	2106      	movs	r1, #6
   80e1a:	4821      	ldr	r0, [pc, #132]	; (80ea0 <dd_SPI_pins_INIT+0x254>)
   80e1c:	4b21      	ldr	r3, [pc, #132]	; (80ea4 <dd_SPI_pins_INIT+0x258>)
   80e1e:	4798      	blx	r3
		dd_enable_OUTPUT(PIOB, ISOLTR_2_SSA1_PIN);
   80e20:	2106      	movs	r1, #6
   80e22:	481f      	ldr	r0, [pc, #124]	; (80ea0 <dd_SPI_pins_INIT+0x254>)
   80e24:	4b20      	ldr	r3, [pc, #128]	; (80ea8 <dd_SPI_pins_INIT+0x25c>)
   80e26:	4798      	blx	r3
		dd_enable_PULLUP(PIOB, ISOLTR_2_SSA1_PIN);
   80e28:	2106      	movs	r1, #6
   80e2a:	481d      	ldr	r0, [pc, #116]	; (80ea0 <dd_SPI_pins_INIT+0x254>)
   80e2c:	4b1f      	ldr	r3, [pc, #124]	; (80eac <dd_SPI_pins_INIT+0x260>)
   80e2e:	4798      	blx	r3
		dd_enable_OUTPUT_WRITE(PIOB, ISOLTR_2_SSA1_PIN);
   80e30:	2106      	movs	r1, #6
   80e32:	481b      	ldr	r0, [pc, #108]	; (80ea0 <dd_SPI_pins_INIT+0x254>)
   80e34:	4b1f      	ldr	r3, [pc, #124]	; (80eb4 <dd_SPI_pins_INIT+0x268>)
   80e36:	4798      	blx	r3
		dd_CLEAR_OUTPUT_DATA(PIOB, ISOLTR_2_SSA1_PIN);
   80e38:	2106      	movs	r1, #6
   80e3a:	4819      	ldr	r0, [pc, #100]	; (80ea0 <dd_SPI_pins_INIT+0x254>)
   80e3c:	4b1e      	ldr	r3, [pc, #120]	; (80eb8 <dd_SPI_pins_INIT+0x26c>)
   80e3e:	4798      	blx	r3
		
		dd_enable_PIO(PIOB, ISOLTR_3_SSA0_PIN);
   80e40:	2107      	movs	r1, #7
   80e42:	4817      	ldr	r0, [pc, #92]	; (80ea0 <dd_SPI_pins_INIT+0x254>)
   80e44:	4b17      	ldr	r3, [pc, #92]	; (80ea4 <dd_SPI_pins_INIT+0x258>)
   80e46:	4798      	blx	r3
		dd_enable_OUTPUT(PIOB, ISOLTR_3_SSA0_PIN);
   80e48:	2107      	movs	r1, #7
   80e4a:	4815      	ldr	r0, [pc, #84]	; (80ea0 <dd_SPI_pins_INIT+0x254>)
   80e4c:	4b16      	ldr	r3, [pc, #88]	; (80ea8 <dd_SPI_pins_INIT+0x25c>)
   80e4e:	4798      	blx	r3
		dd_enable_PULLUP(PIOB, ISOLTR_3_SSA0_PIN);
   80e50:	2107      	movs	r1, #7
   80e52:	4813      	ldr	r0, [pc, #76]	; (80ea0 <dd_SPI_pins_INIT+0x254>)
   80e54:	4b15      	ldr	r3, [pc, #84]	; (80eac <dd_SPI_pins_INIT+0x260>)
   80e56:	4798      	blx	r3
		dd_enable_OUTPUT_WRITE(PIOB, ISOLTR_3_SSA0_PIN);
   80e58:	2107      	movs	r1, #7
   80e5a:	4811      	ldr	r0, [pc, #68]	; (80ea0 <dd_SPI_pins_INIT+0x254>)
   80e5c:	4b15      	ldr	r3, [pc, #84]	; (80eb4 <dd_SPI_pins_INIT+0x268>)
   80e5e:	4798      	blx	r3
		dd_CLEAR_OUTPUT_DATA(PIOB, ISOLTR_3_SSA0_PIN);
   80e60:	2107      	movs	r1, #7
   80e62:	480f      	ldr	r0, [pc, #60]	; (80ea0 <dd_SPI_pins_INIT+0x254>)
   80e64:	4b14      	ldr	r3, [pc, #80]	; (80eb8 <dd_SPI_pins_INIT+0x26c>)
   80e66:	4798      	blx	r3
		
		dd_enable_PIO(PIOB, ISOLTR_3_SSA1_PIN);
   80e68:	2108      	movs	r1, #8
   80e6a:	480d      	ldr	r0, [pc, #52]	; (80ea0 <dd_SPI_pins_INIT+0x254>)
   80e6c:	4b0d      	ldr	r3, [pc, #52]	; (80ea4 <dd_SPI_pins_INIT+0x258>)
   80e6e:	4798      	blx	r3
		dd_enable_OUTPUT(PIOB, ISOLTR_3_SSA1_PIN);
   80e70:	2108      	movs	r1, #8
   80e72:	480b      	ldr	r0, [pc, #44]	; (80ea0 <dd_SPI_pins_INIT+0x254>)
   80e74:	4b0c      	ldr	r3, [pc, #48]	; (80ea8 <dd_SPI_pins_INIT+0x25c>)
   80e76:	4798      	blx	r3
		dd_enable_PULLUP(PIOB, ISOLTR_3_SSA1_PIN);
   80e78:	2108      	movs	r1, #8
   80e7a:	4809      	ldr	r0, [pc, #36]	; (80ea0 <dd_SPI_pins_INIT+0x254>)
   80e7c:	4b0b      	ldr	r3, [pc, #44]	; (80eac <dd_SPI_pins_INIT+0x260>)
   80e7e:	4798      	blx	r3
		dd_enable_OUTPUT_WRITE(PIOB, ISOLTR_3_SSA1_PIN);
   80e80:	2108      	movs	r1, #8
   80e82:	4807      	ldr	r0, [pc, #28]	; (80ea0 <dd_SPI_pins_INIT+0x254>)
   80e84:	4b0b      	ldr	r3, [pc, #44]	; (80eb4 <dd_SPI_pins_INIT+0x268>)
   80e86:	4798      	blx	r3
		dd_CLEAR_OUTPUT_DATA(PIOB, ISOLTR_3_SSA1_PIN);
   80e88:	2108      	movs	r1, #8
   80e8a:	4805      	ldr	r0, [pc, #20]	; (80ea0 <dd_SPI_pins_INIT+0x254>)
   80e8c:	4b0a      	ldr	r3, [pc, #40]	; (80eb8 <dd_SPI_pins_INIT+0x26c>)
   80e8e:	4798      	blx	r3
		
		dd_enable_PIO(PIOB, ISOLTR_4_SSA0_PIN);
   80e90:	210e      	movs	r1, #14
   80e92:	4803      	ldr	r0, [pc, #12]	; (80ea0 <dd_SPI_pins_INIT+0x254>)
   80e94:	e012      	b.n	80ebc <dd_SPI_pins_INIT+0x270>
   80e96:	bf00      	nop
   80e98:	400e0e00 	.word	0x400e0e00
   80e9c:	000810a1 	.word	0x000810a1
   80ea0:	400e1000 	.word	0x400e1000
   80ea4:	0008107d 	.word	0x0008107d
   80ea8:	000810c5 	.word	0x000810c5
   80eac:	00081155 	.word	0x00081155
   80eb0:	0008110d 	.word	0x0008110d
   80eb4:	0008119d 	.word	0x0008119d
   80eb8:	00081131 	.word	0x00081131
   80ebc:	4b13      	ldr	r3, [pc, #76]	; (80f0c <dd_SPI_pins_INIT+0x2c0>)
   80ebe:	4798      	blx	r3
		dd_enable_OUTPUT(PIOB, ISOLTR_4_SSA0_PIN);
   80ec0:	210e      	movs	r1, #14
   80ec2:	4813      	ldr	r0, [pc, #76]	; (80f10 <dd_SPI_pins_INIT+0x2c4>)
   80ec4:	4b13      	ldr	r3, [pc, #76]	; (80f14 <dd_SPI_pins_INIT+0x2c8>)
   80ec6:	4798      	blx	r3
		dd_enable_PULLUP(PIOB, ISOLTR_4_SSA0_PIN);
   80ec8:	210e      	movs	r1, #14
   80eca:	4811      	ldr	r0, [pc, #68]	; (80f10 <dd_SPI_pins_INIT+0x2c4>)
   80ecc:	4b12      	ldr	r3, [pc, #72]	; (80f18 <dd_SPI_pins_INIT+0x2cc>)
   80ece:	4798      	blx	r3
		dd_enable_OUTPUT_WRITE(PIOB, ISOLTR_4_SSA0_PIN);
   80ed0:	210e      	movs	r1, #14
   80ed2:	480f      	ldr	r0, [pc, #60]	; (80f10 <dd_SPI_pins_INIT+0x2c4>)
   80ed4:	4b11      	ldr	r3, [pc, #68]	; (80f1c <dd_SPI_pins_INIT+0x2d0>)
   80ed6:	4798      	blx	r3
		dd_CLEAR_OUTPUT_DATA(PIOB, ISOLTR_4_SSA0_PIN);
   80ed8:	210e      	movs	r1, #14
   80eda:	480d      	ldr	r0, [pc, #52]	; (80f10 <dd_SPI_pins_INIT+0x2c4>)
   80edc:	4b10      	ldr	r3, [pc, #64]	; (80f20 <dd_SPI_pins_INIT+0x2d4>)
   80ede:	4798      	blx	r3
		
		dd_enable_PIO(PIOB, ISOLTR_4_SSA1_PIN);
   80ee0:	210f      	movs	r1, #15
   80ee2:	480b      	ldr	r0, [pc, #44]	; (80f10 <dd_SPI_pins_INIT+0x2c4>)
   80ee4:	4b09      	ldr	r3, [pc, #36]	; (80f0c <dd_SPI_pins_INIT+0x2c0>)
   80ee6:	4798      	blx	r3
		dd_enable_OUTPUT(PIOB, ISOLTR_4_SSA1_PIN);
   80ee8:	210f      	movs	r1, #15
   80eea:	4809      	ldr	r0, [pc, #36]	; (80f10 <dd_SPI_pins_INIT+0x2c4>)
   80eec:	4b09      	ldr	r3, [pc, #36]	; (80f14 <dd_SPI_pins_INIT+0x2c8>)
   80eee:	4798      	blx	r3
		dd_enable_PULLUP(PIOB, ISOLTR_4_SSA1_PIN);
   80ef0:	210f      	movs	r1, #15
   80ef2:	4807      	ldr	r0, [pc, #28]	; (80f10 <dd_SPI_pins_INIT+0x2c4>)
   80ef4:	4b08      	ldr	r3, [pc, #32]	; (80f18 <dd_SPI_pins_INIT+0x2cc>)
   80ef6:	4798      	blx	r3
		dd_enable_OUTPUT_WRITE(PIOB, ISOLTR_4_SSA1_PIN);
   80ef8:	210f      	movs	r1, #15
   80efa:	4805      	ldr	r0, [pc, #20]	; (80f10 <dd_SPI_pins_INIT+0x2c4>)
   80efc:	4b07      	ldr	r3, [pc, #28]	; (80f1c <dd_SPI_pins_INIT+0x2d0>)
   80efe:	4798      	blx	r3
		dd_CLEAR_OUTPUT_DATA(PIOB, ISOLTR_4_SSA1_PIN);		
   80f00:	210f      	movs	r1, #15
   80f02:	4803      	ldr	r0, [pc, #12]	; (80f10 <dd_SPI_pins_INIT+0x2c4>)
   80f04:	4b06      	ldr	r3, [pc, #24]	; (80f20 <dd_SPI_pins_INIT+0x2d4>)
   80f06:	4798      	blx	r3
	}
   80f08:	bf00      	nop
   80f0a:	bd80      	pop	{r7, pc}
   80f0c:	0008107d 	.word	0x0008107d
   80f10:	400e1000 	.word	0x400e1000
   80f14:	000810c5 	.word	0x000810c5
   80f18:	00081155 	.word	0x00081155
   80f1c:	0008119d 	.word	0x0008119d
   80f20:	00081131 	.word	0x00081131

00080f24 <dd_CAN_pins_INIT>:
	
void dd_CAN_pins_INIT()  {
   80f24:	b580      	push	{r7, lr}
   80f26:	af00      	add	r7, sp, #0
	dd_disable_PIO(PIOA, CAN_RX_PIN);
   80f28:	2101      	movs	r1, #1
   80f2a:	481e      	ldr	r0, [pc, #120]	; (80fa4 <dd_CAN_pins_INIT+0x80>)
   80f2c:	4b1e      	ldr	r3, [pc, #120]	; (80fa8 <dd_CAN_pins_INIT+0x84>)
   80f2e:	4798      	blx	r3
	dd_disable_OUTPUT(PIOA, CAN_RX_PIN);
   80f30:	2101      	movs	r1, #1
   80f32:	481c      	ldr	r0, [pc, #112]	; (80fa4 <dd_CAN_pins_INIT+0x80>)
   80f34:	4b1d      	ldr	r3, [pc, #116]	; (80fac <dd_CAN_pins_INIT+0x88>)
   80f36:	4798      	blx	r3
	dd_CLEAR_OUTPUT_DATA(PIOA, CAN_RX_PIN);
   80f38:	2101      	movs	r1, #1
   80f3a:	481a      	ldr	r0, [pc, #104]	; (80fa4 <dd_CAN_pins_INIT+0x80>)
   80f3c:	4b1c      	ldr	r3, [pc, #112]	; (80fb0 <dd_CAN_pins_INIT+0x8c>)
   80f3e:	4798      	blx	r3
	dd_disable_OUTPUT_WRITE(PIOA, CAN_RX_PIN);
   80f40:	2101      	movs	r1, #1
   80f42:	4818      	ldr	r0, [pc, #96]	; (80fa4 <dd_CAN_pins_INIT+0x80>)
   80f44:	4b1b      	ldr	r3, [pc, #108]	; (80fb4 <dd_CAN_pins_INIT+0x90>)
   80f46:	4798      	blx	r3
	dd_disable_PULLUP(PIOA, CAN_RX_PIN);
   80f48:	2101      	movs	r1, #1
   80f4a:	4816      	ldr	r0, [pc, #88]	; (80fa4 <dd_CAN_pins_INIT+0x80>)
   80f4c:	4b1a      	ldr	r3, [pc, #104]	; (80fb8 <dd_CAN_pins_INIT+0x94>)
   80f4e:	4798      	blx	r3
	
	
	dd_disable_PIO(PIOA, CAN_TX_PIN);	
   80f50:	2100      	movs	r1, #0
   80f52:	4814      	ldr	r0, [pc, #80]	; (80fa4 <dd_CAN_pins_INIT+0x80>)
   80f54:	4b14      	ldr	r3, [pc, #80]	; (80fa8 <dd_CAN_pins_INIT+0x84>)
   80f56:	4798      	blx	r3
	dd_disable_OUTPUT(PIOA, CAN_TX_PIN);	
   80f58:	2100      	movs	r1, #0
   80f5a:	4812      	ldr	r0, [pc, #72]	; (80fa4 <dd_CAN_pins_INIT+0x80>)
   80f5c:	4b13      	ldr	r3, [pc, #76]	; (80fac <dd_CAN_pins_INIT+0x88>)
   80f5e:	4798      	blx	r3
	dd_CLEAR_OUTPUT_DATA(PIOA, CAN_TX_PIN);	
   80f60:	2100      	movs	r1, #0
   80f62:	4810      	ldr	r0, [pc, #64]	; (80fa4 <dd_CAN_pins_INIT+0x80>)
   80f64:	4b12      	ldr	r3, [pc, #72]	; (80fb0 <dd_CAN_pins_INIT+0x8c>)
   80f66:	4798      	blx	r3
	dd_disable_OUTPUT_WRITE(PIOA, CAN_TX_PIN);	
   80f68:	2100      	movs	r1, #0
   80f6a:	480e      	ldr	r0, [pc, #56]	; (80fa4 <dd_CAN_pins_INIT+0x80>)
   80f6c:	4b11      	ldr	r3, [pc, #68]	; (80fb4 <dd_CAN_pins_INIT+0x90>)
   80f6e:	4798      	blx	r3
	dd_disable_PULLUP(PIOA, CAN_TX_PIN);
   80f70:	2100      	movs	r1, #0
   80f72:	480c      	ldr	r0, [pc, #48]	; (80fa4 <dd_CAN_pins_INIT+0x80>)
   80f74:	4b10      	ldr	r3, [pc, #64]	; (80fb8 <dd_CAN_pins_INIT+0x94>)
   80f76:	4798      	blx	r3
	
	dd_enable_PIO(PIOA, CAN_STB_PIN);
   80f78:	2102      	movs	r1, #2
   80f7a:	480a      	ldr	r0, [pc, #40]	; (80fa4 <dd_CAN_pins_INIT+0x80>)
   80f7c:	4b0f      	ldr	r3, [pc, #60]	; (80fbc <dd_CAN_pins_INIT+0x98>)
   80f7e:	4798      	blx	r3
	dd_enable_OUTPUT(PIOA, CAN_STB_PIN);
   80f80:	2102      	movs	r1, #2
   80f82:	4808      	ldr	r0, [pc, #32]	; (80fa4 <dd_CAN_pins_INIT+0x80>)
   80f84:	4b0e      	ldr	r3, [pc, #56]	; (80fc0 <dd_CAN_pins_INIT+0x9c>)
   80f86:	4798      	blx	r3
	dd_CLEAR_OUTPUT_DATA(PIOA, CAN_STB_PIN);
   80f88:	2102      	movs	r1, #2
   80f8a:	4806      	ldr	r0, [pc, #24]	; (80fa4 <dd_CAN_pins_INIT+0x80>)
   80f8c:	4b08      	ldr	r3, [pc, #32]	; (80fb0 <dd_CAN_pins_INIT+0x8c>)
   80f8e:	4798      	blx	r3
	dd_enable_OUTPUT_WRITE(PIOA, CAN_STB_PIN);
   80f90:	2102      	movs	r1, #2
   80f92:	4804      	ldr	r0, [pc, #16]	; (80fa4 <dd_CAN_pins_INIT+0x80>)
   80f94:	4b0b      	ldr	r3, [pc, #44]	; (80fc4 <dd_CAN_pins_INIT+0xa0>)
   80f96:	4798      	blx	r3
	dd_enable_PULLUP(PIOA, CAN_STB_PIN);	
   80f98:	2102      	movs	r1, #2
   80f9a:	4802      	ldr	r0, [pc, #8]	; (80fa4 <dd_CAN_pins_INIT+0x80>)
   80f9c:	4b0a      	ldr	r3, [pc, #40]	; (80fc8 <dd_CAN_pins_INIT+0xa4>)
   80f9e:	4798      	blx	r3
}
   80fa0:	bf00      	nop
   80fa2:	bd80      	pop	{r7, pc}
   80fa4:	400e0e00 	.word	0x400e0e00
   80fa8:	000810a1 	.word	0x000810a1
   80fac:	000810e9 	.word	0x000810e9
   80fb0:	00081131 	.word	0x00081131
   80fb4:	000811c5 	.word	0x000811c5
   80fb8:	00081179 	.word	0x00081179
   80fbc:	0008107d 	.word	0x0008107d
   80fc0:	000810c5 	.word	0x000810c5
   80fc4:	0008119d 	.word	0x0008119d
   80fc8:	00081155 	.word	0x00081155

00080fcc <dd_UART_pins_init>:
	
void dd_UART_pins_init()  {
   80fcc:	b580      	push	{r7, lr}
   80fce:	af00      	add	r7, sp, #0
	dd_disable_PIO(PIOA, UART_RX_PIN);
   80fd0:	2108      	movs	r1, #8
   80fd2:	4814      	ldr	r0, [pc, #80]	; (81024 <dd_UART_pins_init+0x58>)
   80fd4:	4b14      	ldr	r3, [pc, #80]	; (81028 <dd_UART_pins_init+0x5c>)
   80fd6:	4798      	blx	r3
	dd_disable_OUTPUT(PIOA, UART_RX_PIN);
   80fd8:	2108      	movs	r1, #8
   80fda:	4812      	ldr	r0, [pc, #72]	; (81024 <dd_UART_pins_init+0x58>)
   80fdc:	4b13      	ldr	r3, [pc, #76]	; (8102c <dd_UART_pins_init+0x60>)
   80fde:	4798      	blx	r3
	dd_CLEAR_OUTPUT_DATA(PIOA, UART_RX_PIN);
   80fe0:	2108      	movs	r1, #8
   80fe2:	4810      	ldr	r0, [pc, #64]	; (81024 <dd_UART_pins_init+0x58>)
   80fe4:	4b12      	ldr	r3, [pc, #72]	; (81030 <dd_UART_pins_init+0x64>)
   80fe6:	4798      	blx	r3
	dd_disable_OUTPUT_WRITE(PIOA, UART_RX_PIN);
   80fe8:	2108      	movs	r1, #8
   80fea:	480e      	ldr	r0, [pc, #56]	; (81024 <dd_UART_pins_init+0x58>)
   80fec:	4b11      	ldr	r3, [pc, #68]	; (81034 <dd_UART_pins_init+0x68>)
   80fee:	4798      	blx	r3
	dd_disable_PULLUP(PIOA, UART_RX_PIN);
   80ff0:	2108      	movs	r1, #8
   80ff2:	480c      	ldr	r0, [pc, #48]	; (81024 <dd_UART_pins_init+0x58>)
   80ff4:	4b10      	ldr	r3, [pc, #64]	; (81038 <dd_UART_pins_init+0x6c>)
   80ff6:	4798      	blx	r3
	
	dd_disable_PIO(PIOA, UART_TX_PIN);	
   80ff8:	2109      	movs	r1, #9
   80ffa:	480a      	ldr	r0, [pc, #40]	; (81024 <dd_UART_pins_init+0x58>)
   80ffc:	4b0a      	ldr	r3, [pc, #40]	; (81028 <dd_UART_pins_init+0x5c>)
   80ffe:	4798      	blx	r3
	dd_disable_OUTPUT(PIOA, UART_TX_PIN);	
   81000:	2109      	movs	r1, #9
   81002:	4808      	ldr	r0, [pc, #32]	; (81024 <dd_UART_pins_init+0x58>)
   81004:	4b09      	ldr	r3, [pc, #36]	; (8102c <dd_UART_pins_init+0x60>)
   81006:	4798      	blx	r3
	dd_CLEAR_OUTPUT_DATA(PIOA, UART_TX_PIN);	
   81008:	2109      	movs	r1, #9
   8100a:	4806      	ldr	r0, [pc, #24]	; (81024 <dd_UART_pins_init+0x58>)
   8100c:	4b08      	ldr	r3, [pc, #32]	; (81030 <dd_UART_pins_init+0x64>)
   8100e:	4798      	blx	r3
	dd_disable_OUTPUT_WRITE(PIOA, UART_TX_PIN);	
   81010:	2109      	movs	r1, #9
   81012:	4804      	ldr	r0, [pc, #16]	; (81024 <dd_UART_pins_init+0x58>)
   81014:	4b07      	ldr	r3, [pc, #28]	; (81034 <dd_UART_pins_init+0x68>)
   81016:	4798      	blx	r3
	dd_disable_PULLUP(PIOA, UART_TX_PIN);	
   81018:	2109      	movs	r1, #9
   8101a:	4802      	ldr	r0, [pc, #8]	; (81024 <dd_UART_pins_init+0x58>)
   8101c:	4b06      	ldr	r3, [pc, #24]	; (81038 <dd_UART_pins_init+0x6c>)
   8101e:	4798      	blx	r3
}
   81020:	bf00      	nop
   81022:	bd80      	pop	{r7, pc}
   81024:	400e0e00 	.word	0x400e0e00
   81028:	000810a1 	.word	0x000810a1
   8102c:	000810e9 	.word	0x000810e9
   81030:	00081131 	.word	0x00081131
   81034:	000811c5 	.word	0x000811c5
   81038:	00081179 	.word	0x00081179

0008103c <dd_PIO_INTERRUPT_DISABLE>:
//	PIOC->PIO_PUER  =0X000001C6;
	*/



uint32_t dd_PIO_INTERRUPT_DISABLE(Pio *p_pio, uint32_t pin_no)	{
   8103c:	b480      	push	{r7}
   8103e:	b083      	sub	sp, #12
   81040:	af00      	add	r7, sp, #0
   81042:	6078      	str	r0, [r7, #4]
   81044:	6039      	str	r1, [r7, #0]
	
	if ((p_pio->PIO_ISR & (1u << pin_no)) == (1u << pin_no)) {
   81046:	687b      	ldr	r3, [r7, #4]
   81048:	6cda      	ldr	r2, [r3, #76]	; 0x4c
   8104a:	2101      	movs	r1, #1
   8104c:	683b      	ldr	r3, [r7, #0]
   8104e:	fa01 f303 	lsl.w	r3, r1, r3
   81052:	401a      	ands	r2, r3
   81054:	2101      	movs	r1, #1
   81056:	683b      	ldr	r3, [r7, #0]
   81058:	fa01 f303 	lsl.w	r3, r1, r3
   8105c:	429a      	cmp	r2, r3
   8105e:	d106      	bne.n	8106e <dd_PIO_INTERRUPT_DISABLE+0x32>
		p_pio->PIO_IDR = 1 << pin_no;
   81060:	2201      	movs	r2, #1
   81062:	683b      	ldr	r3, [r7, #0]
   81064:	fa02 f303 	lsl.w	r3, r2, r3
   81068:	461a      	mov	r2, r3
   8106a:	687b      	ldr	r3, [r7, #4]
   8106c:	645a      	str	r2, [r3, #68]	; 0x44
	}
	return 0;
   8106e:	2300      	movs	r3, #0
}
   81070:	4618      	mov	r0, r3
   81072:	370c      	adds	r7, #12
   81074:	46bd      	mov	sp, r7
   81076:	bc80      	pop	{r7}
   81078:	4770      	bx	lr
   8107a:	bf00      	nop

0008107c <dd_enable_PIO>:
		p_pio->PIO_IER = 1 << pin_no;
	}
	return 0;
}

uint32_t dd_enable_PIO(Pio *p_pio, uint32_t pin_no)	{
   8107c:	b480      	push	{r7}
   8107e:	b083      	sub	sp, #12
   81080:	af00      	add	r7, sp, #0
   81082:	6078      	str	r0, [r7, #4]
   81084:	6039      	str	r1, [r7, #0]
	
		//if ((p_pio->PIO_PSR & (1u << pin_no)) != (1u << pin_no)) {
			p_pio->PIO_PER = 1 << pin_no;
   81086:	2201      	movs	r2, #1
   81088:	683b      	ldr	r3, [r7, #0]
   8108a:	fa02 f303 	lsl.w	r3, r2, r3
   8108e:	461a      	mov	r2, r3
   81090:	687b      	ldr	r3, [r7, #4]
   81092:	601a      	str	r2, [r3, #0]
	//	}		
	return 0;
   81094:	2300      	movs	r3, #0
}
   81096:	4618      	mov	r0, r3
   81098:	370c      	adds	r7, #12
   8109a:	46bd      	mov	sp, r7
   8109c:	bc80      	pop	{r7}
   8109e:	4770      	bx	lr

000810a0 <dd_disable_PIO>:

uint32_t dd_disable_PIO(Pio *p_pio, uint32_t pin_no)	{
   810a0:	b480      	push	{r7}
   810a2:	b083      	sub	sp, #12
   810a4:	af00      	add	r7, sp, #0
   810a6:	6078      	str	r0, [r7, #4]
   810a8:	6039      	str	r1, [r7, #0]
	
	//if ((p_pio->PIO_PSR & (1u << pin_no)) == (1u << pin_no)) {
		p_pio->PIO_PDR = 1 << pin_no;
   810aa:	2201      	movs	r2, #1
   810ac:	683b      	ldr	r3, [r7, #0]
   810ae:	fa02 f303 	lsl.w	r3, r2, r3
   810b2:	461a      	mov	r2, r3
   810b4:	687b      	ldr	r3, [r7, #4]
   810b6:	605a      	str	r2, [r3, #4]
	//}
	return 0;
   810b8:	2300      	movs	r3, #0
}
   810ba:	4618      	mov	r0, r3
   810bc:	370c      	adds	r7, #12
   810be:	46bd      	mov	sp, r7
   810c0:	bc80      	pop	{r7}
   810c2:	4770      	bx	lr

000810c4 <dd_enable_OUTPUT>:

uint32_t dd_enable_OUTPUT(Pio *p_pio, uint32_t pin_no)	{
   810c4:	b480      	push	{r7}
   810c6:	b083      	sub	sp, #12
   810c8:	af00      	add	r7, sp, #0
   810ca:	6078      	str	r0, [r7, #4]
   810cc:	6039      	str	r1, [r7, #0]
	
	//if ((p_pio->PIO_OSR & (1u << pin_no)) != (1u << pin_no)) {
		p_pio->PIO_OER = 1 << pin_no;
   810ce:	2201      	movs	r2, #1
   810d0:	683b      	ldr	r3, [r7, #0]
   810d2:	fa02 f303 	lsl.w	r3, r2, r3
   810d6:	461a      	mov	r2, r3
   810d8:	687b      	ldr	r3, [r7, #4]
   810da:	611a      	str	r2, [r3, #16]
	//}
	return 0;
   810dc:	2300      	movs	r3, #0
}
   810de:	4618      	mov	r0, r3
   810e0:	370c      	adds	r7, #12
   810e2:	46bd      	mov	sp, r7
   810e4:	bc80      	pop	{r7}
   810e6:	4770      	bx	lr

000810e8 <dd_disable_OUTPUT>:

uint32_t dd_disable_OUTPUT(Pio *p_pio, uint32_t pin_no)	{
   810e8:	b480      	push	{r7}
   810ea:	b083      	sub	sp, #12
   810ec:	af00      	add	r7, sp, #0
   810ee:	6078      	str	r0, [r7, #4]
   810f0:	6039      	str	r1, [r7, #0]
	
	//if ((p_pio->PIO_OSR & (1u << pin_no)) == (1u << pin_no)) {
		p_pio->PIO_ODR = 1 << pin_no;
   810f2:	2201      	movs	r2, #1
   810f4:	683b      	ldr	r3, [r7, #0]
   810f6:	fa02 f303 	lsl.w	r3, r2, r3
   810fa:	461a      	mov	r2, r3
   810fc:	687b      	ldr	r3, [r7, #4]
   810fe:	615a      	str	r2, [r3, #20]
	//}
	return 0;
   81100:	2300      	movs	r3, #0
}
   81102:	4618      	mov	r0, r3
   81104:	370c      	adds	r7, #12
   81106:	46bd      	mov	sp, r7
   81108:	bc80      	pop	{r7}
   8110a:	4770      	bx	lr

0008110c <dd_SET_OUTPUT_DATA>:
	return 0;
}



uint32_t dd_SET_OUTPUT_DATA(Pio *p_pio, uint32_t pin_no)	{
   8110c:	b480      	push	{r7}
   8110e:	b083      	sub	sp, #12
   81110:	af00      	add	r7, sp, #0
   81112:	6078      	str	r0, [r7, #4]
   81114:	6039      	str	r1, [r7, #0]
	
	//if ((p_pio->PIO_ODSR & (1u << pin_no)) != (1u << pin_no)) {
		p_pio->PIO_SODR = 1 << pin_no;
   81116:	2201      	movs	r2, #1
   81118:	683b      	ldr	r3, [r7, #0]
   8111a:	fa02 f303 	lsl.w	r3, r2, r3
   8111e:	461a      	mov	r2, r3
   81120:	687b      	ldr	r3, [r7, #4]
   81122:	631a      	str	r2, [r3, #48]	; 0x30
//	}
	return 0;
   81124:	2300      	movs	r3, #0
}
   81126:	4618      	mov	r0, r3
   81128:	370c      	adds	r7, #12
   8112a:	46bd      	mov	sp, r7
   8112c:	bc80      	pop	{r7}
   8112e:	4770      	bx	lr

00081130 <dd_CLEAR_OUTPUT_DATA>:

uint32_t dd_CLEAR_OUTPUT_DATA(Pio *p_pio, uint32_t pin_no)	{
   81130:	b480      	push	{r7}
   81132:	b083      	sub	sp, #12
   81134:	af00      	add	r7, sp, #0
   81136:	6078      	str	r0, [r7, #4]
   81138:	6039      	str	r1, [r7, #0]
	
	//if ((p_pio->PIO_ODSR & (1u << pin_no)) == (1u << pin_no)) {
		p_pio->PIO_CODR = 1 << pin_no;
   8113a:	2201      	movs	r2, #1
   8113c:	683b      	ldr	r3, [r7, #0]
   8113e:	fa02 f303 	lsl.w	r3, r2, r3
   81142:	461a      	mov	r2, r3
   81144:	687b      	ldr	r3, [r7, #4]
   81146:	635a      	str	r2, [r3, #52]	; 0x34
	//}
	return 0;
   81148:	2300      	movs	r3, #0
}
   8114a:	4618      	mov	r0, r3
   8114c:	370c      	adds	r7, #12
   8114e:	46bd      	mov	sp, r7
   81150:	bc80      	pop	{r7}
   81152:	4770      	bx	lr

00081154 <dd_enable_PULLUP>:

uint32_t dd_enable_PULLUP(Pio *p_pio, uint32_t pin_no)	{
   81154:	b480      	push	{r7}
   81156:	b083      	sub	sp, #12
   81158:	af00      	add	r7, sp, #0
   8115a:	6078      	str	r0, [r7, #4]
   8115c:	6039      	str	r1, [r7, #0]
	
	//if ((p_pio->PIO_PUSR & (1u << pin_no)) != (1u << pin_no)) {
		p_pio->PIO_PUER = 1 << pin_no;
   8115e:	2201      	movs	r2, #1
   81160:	683b      	ldr	r3, [r7, #0]
   81162:	fa02 f303 	lsl.w	r3, r2, r3
   81166:	461a      	mov	r2, r3
   81168:	687b      	ldr	r3, [r7, #4]
   8116a:	665a      	str	r2, [r3, #100]	; 0x64
//	}
	return 0;
   8116c:	2300      	movs	r3, #0
}
   8116e:	4618      	mov	r0, r3
   81170:	370c      	adds	r7, #12
   81172:	46bd      	mov	sp, r7
   81174:	bc80      	pop	{r7}
   81176:	4770      	bx	lr

00081178 <dd_disable_PULLUP>:

uint32_t dd_disable_PULLUP(Pio *p_pio, uint32_t pin_no)	{	
   81178:	b480      	push	{r7}
   8117a:	b083      	sub	sp, #12
   8117c:	af00      	add	r7, sp, #0
   8117e:	6078      	str	r0, [r7, #4]
   81180:	6039      	str	r1, [r7, #0]
	
	//if ((p_pio->PIO_PUSR & (1u << pin_no)) == (1u << pin_no)) {
		p_pio->PIO_PUDR = 1 << pin_no;
   81182:	2201      	movs	r2, #1
   81184:	683b      	ldr	r3, [r7, #0]
   81186:	fa02 f303 	lsl.w	r3, r2, r3
   8118a:	461a      	mov	r2, r3
   8118c:	687b      	ldr	r3, [r7, #4]
   8118e:	661a      	str	r2, [r3, #96]	; 0x60
	
	return 0;
   81190:	2300      	movs	r3, #0
}
   81192:	4618      	mov	r0, r3
   81194:	370c      	adds	r7, #12
   81196:	46bd      	mov	sp, r7
   81198:	bc80      	pop	{r7}
   8119a:	4770      	bx	lr

0008119c <dd_enable_OUTPUT_WRITE>:

uint32_t dd_enable_OUTPUT_WRITE(Pio *p_pio, uint32_t pin_no)	{	
   8119c:	b480      	push	{r7}
   8119e:	b083      	sub	sp, #12
   811a0:	af00      	add	r7, sp, #0
   811a2:	6078      	str	r0, [r7, #4]
   811a4:	6039      	str	r1, [r7, #0]
	
//	if ((p_pio->PIO_OWSR & (1u << pin_no)) != (1u << pin_no)) {
		p_pio->PIO_OWER = 1 << pin_no;
   811a6:	2201      	movs	r2, #1
   811a8:	683b      	ldr	r3, [r7, #0]
   811aa:	fa02 f303 	lsl.w	r3, r2, r3
   811ae:	461a      	mov	r2, r3
   811b0:	687b      	ldr	r3, [r7, #4]
   811b2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
//	}
	return 0;
   811b6:	2300      	movs	r3, #0
}
   811b8:	4618      	mov	r0, r3
   811ba:	370c      	adds	r7, #12
   811bc:	46bd      	mov	sp, r7
   811be:	bc80      	pop	{r7}
   811c0:	4770      	bx	lr
   811c2:	bf00      	nop

000811c4 <dd_disable_OUTPUT_WRITE>:

uint32_t dd_disable_OUTPUT_WRITE(Pio *p_pio, uint32_t pin_no)	{	
   811c4:	b480      	push	{r7}
   811c6:	b083      	sub	sp, #12
   811c8:	af00      	add	r7, sp, #0
   811ca:	6078      	str	r0, [r7, #4]
   811cc:	6039      	str	r1, [r7, #0]
	
	//if ((p_pio->PIO_OWSR & (1u << pin_no)) == (1u << pin_no)) {
		p_pio->PIO_OWDR = 1 << pin_no;
   811ce:	2201      	movs	r2, #1
   811d0:	683b      	ldr	r3, [r7, #0]
   811d2:	fa02 f303 	lsl.w	r3, r2, r3
   811d6:	461a      	mov	r2, r3
   811d8:	687b      	ldr	r3, [r7, #4]
   811da:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	//}
	return 0;
   811de:	2300      	movs	r3, #0
}
   811e0:	4618      	mov	r0, r3
   811e2:	370c      	adds	r7, #12
   811e4:	46bd      	mov	sp, r7
   811e6:	bc80      	pop	{r7}
   811e8:	4770      	bx	lr
   811ea:	bf00      	nop

000811ec <DD_PS1_INIT>:
 *  Author: Electrical
 */ 
#include "DD_PS1.h"

extern uint8_t command_data_array[20];
void DD_PS1_INIT()   {
   811ec:	b580      	push	{r7, lr}
   811ee:	b084      	sub	sp, #16
   811f0:	af00      	add	r7, sp, #0
	 DD_SPI_PCS_DECODER_DEACTIVE();
   811f2:	4b2a      	ldr	r3, [pc, #168]	; (8129c <DD_PS1_INIT+0xb0>)
   811f4:	4798      	blx	r3
	 DD_DISABLE_ISOLATORS_MISO_PIN();
   811f6:	4b2a      	ldr	r3, [pc, #168]	; (812a0 <DD_PS1_INIT+0xb4>)
   811f8:	4798      	blx	r3
	
	 DD_SPI_PCS_DECODER_ACTIVE();
   811fa:	4b2a      	ldr	r3, [pc, #168]	; (812a4 <DD_PS1_INIT+0xb8>)
   811fc:	4798      	blx	r3
	 command_data_array[0] = ADS1120_RESET;		
   811fe:	4b2a      	ldr	r3, [pc, #168]	; (812a8 <DD_PS1_INIT+0xbc>)
   81200:	2206      	movs	r2, #6
   81202:	701a      	strb	r2, [r3, #0]
 	 dd_spi_set_peripheral_chip_select_value(PS1_CS_N_ID); 	  
   81204:	2005      	movs	r0, #5
   81206:	4b29      	ldr	r3, [pc, #164]	; (812ac <DD_PS1_INIT+0xc0>)
   81208:	4798      	blx	r3
 	 dd_spi_master_transfer(&command_data_array, 1, PS1_CS_N_ID);
   8120a:	2205      	movs	r2, #5
   8120c:	2101      	movs	r1, #1
   8120e:	4826      	ldr	r0, [pc, #152]	; (812a8 <DD_PS1_INIT+0xbc>)
   81210:	4b27      	ldr	r3, [pc, #156]	; (812b0 <DD_PS1_INIT+0xc4>)
   81212:	4798      	blx	r3
	  
	   for(unsigned int count=0; count<1000; count++ )   {
   81214:	2300      	movs	r3, #0
   81216:	60fb      	str	r3, [r7, #12]
   81218:	e002      	b.n	81220 <DD_PS1_INIT+0x34>
   8121a:	68fb      	ldr	r3, [r7, #12]
   8121c:	3301      	adds	r3, #1
   8121e:	60fb      	str	r3, [r7, #12]
   81220:	68fb      	ldr	r3, [r7, #12]
   81222:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   81226:	d3f8      	bcc.n	8121a <DD_PS1_INIT+0x2e>
		   ;
	   }	  
	
	  
	  
	  command_data_array[0] = ADS1120_WREG_COMMAND | ADS1120_WREG_START_REG_ADR(0) | ADS1120_WREG_NO_OF_BYTES(3) ; //0x43;
   81228:	4b1f      	ldr	r3, [pc, #124]	; (812a8 <DD_PS1_INIT+0xbc>)
   8122a:	2243      	movs	r2, #67	; 0x43
   8122c:	701a      	strb	r2, [r3, #0]
	  command_data_array[1] = ADS1120_CONFIG_REG0_MUX(ADS1120_MUX_AIN1_AIN2) |  ADS1120_CONFIG_REG0_GAIN(ADS1120_DEVICE_GAIN_1) | ADS1120_CONFIG_REG0_PGA_BYPASS ;                                          //0b00110001;
   8122e:	4b1e      	ldr	r3, [pc, #120]	; (812a8 <DD_PS1_INIT+0xbc>)
   81230:	2231      	movs	r2, #49	; 0x31
   81232:	705a      	strb	r2, [r3, #1]
	  command_data_array[2] = ADS1120_CONFIG_REG1_CM | ADS1120_CONFIG_REG1_MODE(ADS1120_MODE_MORMAL) | ADS1120_CONFIG_REG1_DR(ADS1120_DR_20_SPS);//0b00000100;
   81234:	4b1c      	ldr	r3, [pc, #112]	; (812a8 <DD_PS1_INIT+0xbc>)
   81236:	2204      	movs	r2, #4
   81238:	709a      	strb	r2, [r3, #2]
	  command_data_array[3] = ADS1120_CONFIG_REG2_50_60(ADS1120_50_REJECTION) | ADS1120_CONFIG_REG2_VREF(ADS1120_AVDD_AVSS); //0b11100000;
   8123a:	4b1b      	ldr	r3, [pc, #108]	; (812a8 <DD_PS1_INIT+0xbc>)
   8123c:	22e0      	movs	r2, #224	; 0xe0
   8123e:	70da      	strb	r2, [r3, #3]
	  command_data_array[4] = 0;                       //0b00000000;
   81240:	4b19      	ldr	r3, [pc, #100]	; (812a8 <DD_PS1_INIT+0xbc>)
   81242:	2200      	movs	r2, #0
   81244:	711a      	strb	r2, [r3, #4]
	  dd_spi_set_peripheral_chip_select_value(PS1_CS_N_ID); 
   81246:	2005      	movs	r0, #5
   81248:	4b18      	ldr	r3, [pc, #96]	; (812ac <DD_PS1_INIT+0xc0>)
   8124a:	4798      	blx	r3
	  dd_spi_master_transfer(&command_data_array, 5, PS1_CS_N_ID);
   8124c:	2205      	movs	r2, #5
   8124e:	2105      	movs	r1, #5
   81250:	4815      	ldr	r0, [pc, #84]	; (812a8 <DD_PS1_INIT+0xbc>)
   81252:	4b17      	ldr	r3, [pc, #92]	; (812b0 <DD_PS1_INIT+0xc4>)
   81254:	4798      	blx	r3
	  
	  for(unsigned int count=0; count<1000; count++ )   {
   81256:	2300      	movs	r3, #0
   81258:	60bb      	str	r3, [r7, #8]
   8125a:	e002      	b.n	81262 <DD_PS1_INIT+0x76>
   8125c:	68bb      	ldr	r3, [r7, #8]
   8125e:	3301      	adds	r3, #1
   81260:	60bb      	str	r3, [r7, #8]
   81262:	68bb      	ldr	r3, [r7, #8]
   81264:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   81268:	d3f8      	bcc.n	8125c <DD_PS1_INIT+0x70>
		  ;
	  }
	  
	  command_data_array[0] = ADS1120_START_OR_SYNC;
   8126a:	4b0f      	ldr	r3, [pc, #60]	; (812a8 <DD_PS1_INIT+0xbc>)
   8126c:	2208      	movs	r2, #8
   8126e:	701a      	strb	r2, [r3, #0]
	  dd_spi_set_peripheral_chip_select_value(PS1_CS_N_ID); 
   81270:	2005      	movs	r0, #5
   81272:	4b0e      	ldr	r3, [pc, #56]	; (812ac <DD_PS1_INIT+0xc0>)
   81274:	4798      	blx	r3
	  dd_spi_master_transfer(&command_data_array, 1, PS1_CS_N_ID);	
   81276:	2205      	movs	r2, #5
   81278:	2101      	movs	r1, #1
   8127a:	480b      	ldr	r0, [pc, #44]	; (812a8 <DD_PS1_INIT+0xbc>)
   8127c:	4b0c      	ldr	r3, [pc, #48]	; (812b0 <DD_PS1_INIT+0xc4>)
   8127e:	4798      	blx	r3
	   for(unsigned int count=0; count<1000; count++ )   {
   81280:	2300      	movs	r3, #0
   81282:	607b      	str	r3, [r7, #4]
   81284:	e002      	b.n	8128c <DD_PS1_INIT+0xa0>
   81286:	687b      	ldr	r3, [r7, #4]
   81288:	3301      	adds	r3, #1
   8128a:	607b      	str	r3, [r7, #4]
   8128c:	687b      	ldr	r3, [r7, #4]
   8128e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   81292:	d3f8      	bcc.n	81286 <DD_PS1_INIT+0x9a>
		   ;
	   }
   81294:	bf00      	nop
   81296:	3710      	adds	r7, #16
   81298:	46bd      	mov	sp, r7
   8129a:	bd80      	pop	{r7, pc}
   8129c:	00081b1d 	.word	0x00081b1d
   812a0:	00081b39 	.word	0x00081b39
   812a4:	00081b01 	.word	0x00081b01
   812a8:	20070aec 	.word	0x20070aec
   812ac:	000816b5 	.word	0x000816b5
   812b0:	000816ed 	.word	0x000816ed

000812b4 <DD_PS2_INIT>:
 *  Author: Electrical
 */ 
#include "DD_PS2.h"

extern uint8_t command_data_array[20];
void DD_PS2_INIT()   {
   812b4:	b580      	push	{r7, lr}
   812b6:	b084      	sub	sp, #16
   812b8:	af00      	add	r7, sp, #0
	 DD_SPI_PCS_DECODER_DEACTIVE();
   812ba:	4b2a      	ldr	r3, [pc, #168]	; (81364 <DD_PS2_INIT+0xb0>)
   812bc:	4798      	blx	r3
	 DD_DISABLE_ISOLATORS_MISO_PIN();
   812be:	4b2a      	ldr	r3, [pc, #168]	; (81368 <DD_PS2_INIT+0xb4>)
   812c0:	4798      	blx	r3
	
	DD_SPI_PCS_DECODER_ACTIVE();
   812c2:	4b2a      	ldr	r3, [pc, #168]	; (8136c <DD_PS2_INIT+0xb8>)
   812c4:	4798      	blx	r3
	command_data_array[0] = ADS1120_RESET;
   812c6:	4b2a      	ldr	r3, [pc, #168]	; (81370 <DD_PS2_INIT+0xbc>)
   812c8:	2206      	movs	r2, #6
   812ca:	701a      	strb	r2, [r3, #0]
	dd_spi_set_peripheral_chip_select_value(PS2_CS_N_ID);
   812cc:	2006      	movs	r0, #6
   812ce:	4b29      	ldr	r3, [pc, #164]	; (81374 <DD_PS2_INIT+0xc0>)
   812d0:	4798      	blx	r3
	dd_spi_master_transfer(&command_data_array, 1, PS2_CS_N_ID);
   812d2:	2206      	movs	r2, #6
   812d4:	2101      	movs	r1, #1
   812d6:	4826      	ldr	r0, [pc, #152]	; (81370 <DD_PS2_INIT+0xbc>)
   812d8:	4b27      	ldr	r3, [pc, #156]	; (81378 <DD_PS2_INIT+0xc4>)
   812da:	4798      	blx	r3
	
	for(unsigned int count=0; count<1000; count++ )   {
   812dc:	2300      	movs	r3, #0
   812de:	60fb      	str	r3, [r7, #12]
   812e0:	e002      	b.n	812e8 <DD_PS2_INIT+0x34>
   812e2:	68fb      	ldr	r3, [r7, #12]
   812e4:	3301      	adds	r3, #1
   812e6:	60fb      	str	r3, [r7, #12]
   812e8:	68fb      	ldr	r3, [r7, #12]
   812ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   812ee:	d3f8      	bcc.n	812e2 <DD_PS2_INIT+0x2e>
		;
	}
	
	
	
	command_data_array[0] = ADS1120_WREG_COMMAND | ADS1120_WREG_START_REG_ADR(0) | ADS1120_WREG_NO_OF_BYTES(3) ; //0x43;
   812f0:	4b1f      	ldr	r3, [pc, #124]	; (81370 <DD_PS2_INIT+0xbc>)
   812f2:	2243      	movs	r2, #67	; 0x43
   812f4:	701a      	strb	r2, [r3, #0]
	command_data_array[1] = ADS1120_CONFIG_REG0_MUX(ADS1120_MUX_AIN1_AIN2) |  ADS1120_CONFIG_REG0_GAIN(ADS1120_DEVICE_GAIN_1) | ADS1120_CONFIG_REG0_PGA_BYPASS ;                                          //0b00110001;
   812f6:	4b1e      	ldr	r3, [pc, #120]	; (81370 <DD_PS2_INIT+0xbc>)
   812f8:	2231      	movs	r2, #49	; 0x31
   812fa:	705a      	strb	r2, [r3, #1]
	command_data_array[2] = ADS1120_CONFIG_REG1_CM | ADS1120_CONFIG_REG1_MODE(ADS1120_MODE_MORMAL) | ADS1120_CONFIG_REG1_DR(ADS1120_DR_20_SPS);//0b00000100;
   812fc:	4b1c      	ldr	r3, [pc, #112]	; (81370 <DD_PS2_INIT+0xbc>)
   812fe:	2204      	movs	r2, #4
   81300:	709a      	strb	r2, [r3, #2]
	command_data_array[3] = ADS1120_CONFIG_REG2_50_60(ADS1120_50_REJECTION) | ADS1120_CONFIG_REG2_VREF(ADS1120_AVDD_AVSS); //0b11100000;
   81302:	4b1b      	ldr	r3, [pc, #108]	; (81370 <DD_PS2_INIT+0xbc>)
   81304:	22e0      	movs	r2, #224	; 0xe0
   81306:	70da      	strb	r2, [r3, #3]
	command_data_array[4] = 0;                       //0b00000000;
   81308:	4b19      	ldr	r3, [pc, #100]	; (81370 <DD_PS2_INIT+0xbc>)
   8130a:	2200      	movs	r2, #0
   8130c:	711a      	strb	r2, [r3, #4]
	dd_spi_set_peripheral_chip_select_value(PS2_CS_N_ID);
   8130e:	2006      	movs	r0, #6
   81310:	4b18      	ldr	r3, [pc, #96]	; (81374 <DD_PS2_INIT+0xc0>)
   81312:	4798      	blx	r3
	dd_spi_master_transfer(&command_data_array, 5, PS2_CS_N_ID);
   81314:	2206      	movs	r2, #6
   81316:	2105      	movs	r1, #5
   81318:	4815      	ldr	r0, [pc, #84]	; (81370 <DD_PS2_INIT+0xbc>)
   8131a:	4b17      	ldr	r3, [pc, #92]	; (81378 <DD_PS2_INIT+0xc4>)
   8131c:	4798      	blx	r3
	
	for(unsigned int count=0; count<1000; count++ )   {
   8131e:	2300      	movs	r3, #0
   81320:	60bb      	str	r3, [r7, #8]
   81322:	e002      	b.n	8132a <DD_PS2_INIT+0x76>
   81324:	68bb      	ldr	r3, [r7, #8]
   81326:	3301      	adds	r3, #1
   81328:	60bb      	str	r3, [r7, #8]
   8132a:	68bb      	ldr	r3, [r7, #8]
   8132c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   81330:	d3f8      	bcc.n	81324 <DD_PS2_INIT+0x70>
		;
	}
	
	command_data_array[0] = ADS1120_START_OR_SYNC;
   81332:	4b0f      	ldr	r3, [pc, #60]	; (81370 <DD_PS2_INIT+0xbc>)
   81334:	2208      	movs	r2, #8
   81336:	701a      	strb	r2, [r3, #0]
	dd_spi_set_peripheral_chip_select_value(PS2_CS_N_ID);
   81338:	2006      	movs	r0, #6
   8133a:	4b0e      	ldr	r3, [pc, #56]	; (81374 <DD_PS2_INIT+0xc0>)
   8133c:	4798      	blx	r3
	dd_spi_master_transfer(&command_data_array, 1, PS2_CS_N_ID);
   8133e:	2206      	movs	r2, #6
   81340:	2101      	movs	r1, #1
   81342:	480b      	ldr	r0, [pc, #44]	; (81370 <DD_PS2_INIT+0xbc>)
   81344:	4b0c      	ldr	r3, [pc, #48]	; (81378 <DD_PS2_INIT+0xc4>)
   81346:	4798      	blx	r3
	for(unsigned int count=0; count<1000; count++ )   {
   81348:	2300      	movs	r3, #0
   8134a:	607b      	str	r3, [r7, #4]
   8134c:	e002      	b.n	81354 <DD_PS2_INIT+0xa0>
   8134e:	687b      	ldr	r3, [r7, #4]
   81350:	3301      	adds	r3, #1
   81352:	607b      	str	r3, [r7, #4]
   81354:	687b      	ldr	r3, [r7, #4]
   81356:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   8135a:	d3f8      	bcc.n	8134e <DD_PS2_INIT+0x9a>
		;
	}
   8135c:	bf00      	nop
   8135e:	3710      	adds	r7, #16
   81360:	46bd      	mov	sp, r7
   81362:	bd80      	pop	{r7, pc}
   81364:	00081b1d 	.word	0x00081b1d
   81368:	00081b39 	.word	0x00081b39
   8136c:	00081b01 	.word	0x00081b01
   81370:	20070aec 	.word	0x20070aec
   81374:	000816b5 	.word	0x000816b5
   81378:	000816ed 	.word	0x000816ed

0008137c <DD_PS3_INIT>:
 */ 

#include "DD_PS3.h"

extern uint8_t command_data_array[20];
void DD_PS3_INIT()   {
   8137c:	b580      	push	{r7, lr}
   8137e:	b084      	sub	sp, #16
   81380:	af00      	add	r7, sp, #0
	 DD_SPI_PCS_DECODER_DEACTIVE();
   81382:	4b2a      	ldr	r3, [pc, #168]	; (8142c <DD_PS3_INIT+0xb0>)
   81384:	4798      	blx	r3
	 DD_DISABLE_ISOLATORS_MISO_PIN();
   81386:	4b2a      	ldr	r3, [pc, #168]	; (81430 <DD_PS3_INIT+0xb4>)
   81388:	4798      	blx	r3
	
	DD_SPI_PCS_DECODER_ACTIVE();
   8138a:	4b2a      	ldr	r3, [pc, #168]	; (81434 <DD_PS3_INIT+0xb8>)
   8138c:	4798      	blx	r3
	command_data_array[0] = ADS1120_RESET;
   8138e:	4b2a      	ldr	r3, [pc, #168]	; (81438 <DD_PS3_INIT+0xbc>)
   81390:	2206      	movs	r2, #6
   81392:	701a      	strb	r2, [r3, #0]
	dd_spi_set_peripheral_chip_select_value(PS3_CS_N_ID);
   81394:	2007      	movs	r0, #7
   81396:	4b29      	ldr	r3, [pc, #164]	; (8143c <DD_PS3_INIT+0xc0>)
   81398:	4798      	blx	r3
	dd_spi_master_transfer(&command_data_array, 1, PS3_CS_N_ID);
   8139a:	2207      	movs	r2, #7
   8139c:	2101      	movs	r1, #1
   8139e:	4826      	ldr	r0, [pc, #152]	; (81438 <DD_PS3_INIT+0xbc>)
   813a0:	4b27      	ldr	r3, [pc, #156]	; (81440 <DD_PS3_INIT+0xc4>)
   813a2:	4798      	blx	r3
	
	for(unsigned int count=0; count<1000; count++ )   {
   813a4:	2300      	movs	r3, #0
   813a6:	60fb      	str	r3, [r7, #12]
   813a8:	e002      	b.n	813b0 <DD_PS3_INIT+0x34>
   813aa:	68fb      	ldr	r3, [r7, #12]
   813ac:	3301      	adds	r3, #1
   813ae:	60fb      	str	r3, [r7, #12]
   813b0:	68fb      	ldr	r3, [r7, #12]
   813b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   813b6:	d3f8      	bcc.n	813aa <DD_PS3_INIT+0x2e>
		;
	}
	
	
	
	command_data_array[0] = ADS1120_WREG_COMMAND | ADS1120_WREG_START_REG_ADR(0) | ADS1120_WREG_NO_OF_BYTES(3) ; //0x43;
   813b8:	4b1f      	ldr	r3, [pc, #124]	; (81438 <DD_PS3_INIT+0xbc>)
   813ba:	2243      	movs	r2, #67	; 0x43
   813bc:	701a      	strb	r2, [r3, #0]
	command_data_array[1] = ADS1120_CONFIG_REG0_MUX(ADS1120_MUX_AIN1_AIN2) |  ADS1120_CONFIG_REG0_GAIN(ADS1120_DEVICE_GAIN_1) | ADS1120_CONFIG_REG0_PGA_BYPASS ;                                          //0b00110001;
   813be:	4b1e      	ldr	r3, [pc, #120]	; (81438 <DD_PS3_INIT+0xbc>)
   813c0:	2231      	movs	r2, #49	; 0x31
   813c2:	705a      	strb	r2, [r3, #1]
	command_data_array[2] = ADS1120_CONFIG_REG1_CM | ADS1120_CONFIG_REG1_MODE(ADS1120_MODE_MORMAL) | ADS1120_CONFIG_REG1_DR(ADS1120_DR_20_SPS);//0b00000100;
   813c4:	4b1c      	ldr	r3, [pc, #112]	; (81438 <DD_PS3_INIT+0xbc>)
   813c6:	2204      	movs	r2, #4
   813c8:	709a      	strb	r2, [r3, #2]
	command_data_array[3] = ADS1120_CONFIG_REG2_50_60(ADS1120_50_REJECTION) | ADS1120_CONFIG_REG2_VREF(ADS1120_AVDD_AVSS); //0b11100000;
   813ca:	4b1b      	ldr	r3, [pc, #108]	; (81438 <DD_PS3_INIT+0xbc>)
   813cc:	22e0      	movs	r2, #224	; 0xe0
   813ce:	70da      	strb	r2, [r3, #3]
	command_data_array[4] = 0;                       //0b00000000;
   813d0:	4b19      	ldr	r3, [pc, #100]	; (81438 <DD_PS3_INIT+0xbc>)
   813d2:	2200      	movs	r2, #0
   813d4:	711a      	strb	r2, [r3, #4]
	dd_spi_set_peripheral_chip_select_value(PS3_CS_N_ID);
   813d6:	2007      	movs	r0, #7
   813d8:	4b18      	ldr	r3, [pc, #96]	; (8143c <DD_PS3_INIT+0xc0>)
   813da:	4798      	blx	r3
	dd_spi_master_transfer(&command_data_array, 5, PS3_CS_N_ID);
   813dc:	2207      	movs	r2, #7
   813de:	2105      	movs	r1, #5
   813e0:	4815      	ldr	r0, [pc, #84]	; (81438 <DD_PS3_INIT+0xbc>)
   813e2:	4b17      	ldr	r3, [pc, #92]	; (81440 <DD_PS3_INIT+0xc4>)
   813e4:	4798      	blx	r3
	
	for(unsigned int count=0; count<1000; count++ )   {
   813e6:	2300      	movs	r3, #0
   813e8:	60bb      	str	r3, [r7, #8]
   813ea:	e002      	b.n	813f2 <DD_PS3_INIT+0x76>
   813ec:	68bb      	ldr	r3, [r7, #8]
   813ee:	3301      	adds	r3, #1
   813f0:	60bb      	str	r3, [r7, #8]
   813f2:	68bb      	ldr	r3, [r7, #8]
   813f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   813f8:	d3f8      	bcc.n	813ec <DD_PS3_INIT+0x70>
		;
	}
	
	command_data_array[0] = ADS1120_START_OR_SYNC;
   813fa:	4b0f      	ldr	r3, [pc, #60]	; (81438 <DD_PS3_INIT+0xbc>)
   813fc:	2208      	movs	r2, #8
   813fe:	701a      	strb	r2, [r3, #0]
	dd_spi_set_peripheral_chip_select_value(PS3_CS_N_ID);
   81400:	2007      	movs	r0, #7
   81402:	4b0e      	ldr	r3, [pc, #56]	; (8143c <DD_PS3_INIT+0xc0>)
   81404:	4798      	blx	r3
	dd_spi_master_transfer(&command_data_array, 1, PS3_CS_N_ID);
   81406:	2207      	movs	r2, #7
   81408:	2101      	movs	r1, #1
   8140a:	480b      	ldr	r0, [pc, #44]	; (81438 <DD_PS3_INIT+0xbc>)
   8140c:	4b0c      	ldr	r3, [pc, #48]	; (81440 <DD_PS3_INIT+0xc4>)
   8140e:	4798      	blx	r3
	for(unsigned int count=0; count<1000; count++ )   {
   81410:	2300      	movs	r3, #0
   81412:	607b      	str	r3, [r7, #4]
   81414:	e002      	b.n	8141c <DD_PS3_INIT+0xa0>
   81416:	687b      	ldr	r3, [r7, #4]
   81418:	3301      	adds	r3, #1
   8141a:	607b      	str	r3, [r7, #4]
   8141c:	687b      	ldr	r3, [r7, #4]
   8141e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   81422:	d3f8      	bcc.n	81416 <DD_PS3_INIT+0x9a>
		;
	}
   81424:	bf00      	nop
   81426:	3710      	adds	r7, #16
   81428:	46bd      	mov	sp, r7
   8142a:	bd80      	pop	{r7, pc}
   8142c:	00081b1d 	.word	0x00081b1d
   81430:	00081b39 	.word	0x00081b39
   81434:	00081b01 	.word	0x00081b01
   81438:	20070aec 	.word	0x20070aec
   8143c:	000816b5 	.word	0x000816b5
   81440:	000816ed 	.word	0x000816ed

00081444 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   81444:	b480      	push	{r7}
   81446:	b083      	sub	sp, #12
   81448:	af00      	add	r7, sp, #0
   8144a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   8144c:	687b      	ldr	r3, [r7, #4]
   8144e:	2b07      	cmp	r3, #7
   81450:	d825      	bhi.n	8149e <osc_get_rate+0x5a>
   81452:	a201      	add	r2, pc, #4	; (adr r2, 81458 <osc_get_rate+0x14>)
   81454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81458:	00081479 	.word	0x00081479
   8145c:	0008147f 	.word	0x0008147f
   81460:	00081485 	.word	0x00081485
   81464:	0008148b 	.word	0x0008148b
   81468:	0008148f 	.word	0x0008148f
   8146c:	00081493 	.word	0x00081493
   81470:	00081497 	.word	0x00081497
   81474:	0008149b 	.word	0x0008149b
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   81478:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   8147c:	e010      	b.n	814a0 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   8147e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   81482:	e00d      	b.n	814a0 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   81484:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   81488:	e00a      	b.n	814a0 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   8148a:	4b08      	ldr	r3, [pc, #32]	; (814ac <osc_get_rate+0x68>)
   8148c:	e008      	b.n	814a0 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   8148e:	4b08      	ldr	r3, [pc, #32]	; (814b0 <osc_get_rate+0x6c>)
   81490:	e006      	b.n	814a0 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   81492:	4b08      	ldr	r3, [pc, #32]	; (814b4 <osc_get_rate+0x70>)
   81494:	e004      	b.n	814a0 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   81496:	4b07      	ldr	r3, [pc, #28]	; (814b4 <osc_get_rate+0x70>)
   81498:	e002      	b.n	814a0 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   8149a:	4b06      	ldr	r3, [pc, #24]	; (814b4 <osc_get_rate+0x70>)
   8149c:	e000      	b.n	814a0 <osc_get_rate+0x5c>
	}

	return 0;
   8149e:	2300      	movs	r3, #0
}
   814a0:	4618      	mov	r0, r3
   814a2:	370c      	adds	r7, #12
   814a4:	46bd      	mov	sp, r7
   814a6:	bc80      	pop	{r7}
   814a8:	4770      	bx	lr
   814aa:	bf00      	nop
   814ac:	003d0900 	.word	0x003d0900
   814b0:	007a1200 	.word	0x007a1200
   814b4:	00b71b00 	.word	0x00b71b00

000814b8 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   814b8:	b580      	push	{r7, lr}
   814ba:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   814bc:	2006      	movs	r0, #6
   814be:	4b04      	ldr	r3, [pc, #16]	; (814d0 <sysclk_get_main_hz+0x18>)
   814c0:	4798      	blx	r3
   814c2:	4602      	mov	r2, r0
   814c4:	4613      	mov	r3, r2
   814c6:	00db      	lsls	r3, r3, #3
   814c8:	1a9b      	subs	r3, r3, r2
   814ca:	005b      	lsls	r3, r3, #1
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   814cc:	4618      	mov	r0, r3
   814ce:	bd80      	pop	{r7, pc}
   814d0:	00081445 	.word	0x00081445

000814d4 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
   814d4:	b580      	push	{r7, lr}
   814d6:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   814d8:	4b02      	ldr	r3, [pc, #8]	; (814e4 <sysclk_get_peripheral_hz+0x10>)
   814da:	4798      	blx	r3
   814dc:	4603      	mov	r3, r0
   814de:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   814e0:	4618      	mov	r0, r3
   814e2:	bd80      	pop	{r7, pc}
   814e4:	000814b9 	.word	0x000814b9

000814e8 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   814e8:	b580      	push	{r7, lr}
   814ea:	b082      	sub	sp, #8
   814ec:	af00      	add	r7, sp, #0
   814ee:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   814f0:	6878      	ldr	r0, [r7, #4]
   814f2:	4b03      	ldr	r3, [pc, #12]	; (81500 <sysclk_enable_peripheral_clock+0x18>)
   814f4:	4798      	blx	r3
}
   814f6:	bf00      	nop
   814f8:	3708      	adds	r7, #8
   814fa:	46bd      	mov	sp, r7
   814fc:	bd80      	pop	{r7, pc}
   814fe:	bf00      	nop
   81500:	00084261 	.word	0x00084261

00081504 <dd_spi_set_transfer_delay>:
void dd_spi_set_delay_between_chip_select(uint32_t ul_delay) {
	SPI0->SPI_MR &= (~SPI_MR_DLYBCS_Msk);
	SPI0->SPI_MR |= SPI_MR_DLYBCS(ul_delay);
}

void dd_spi_set_transfer_delay(CHIP_SEL_GROUP_TYPE ul_pcs_group_id, uint8_t uc_dlybs, uint8_t uc_dlybct)  {
   81504:	b490      	push	{r4, r7}
   81506:	b082      	sub	sp, #8
   81508:	af00      	add	r7, sp, #0
   8150a:	4603      	mov	r3, r0
   8150c:	71fb      	strb	r3, [r7, #7]
   8150e:	460b      	mov	r3, r1
   81510:	71bb      	strb	r3, [r7, #6]
   81512:	4613      	mov	r3, r2
   81514:	717b      	strb	r3, [r7, #5]
	SPI0->SPI_CSR[ul_pcs_group_id] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
   81516:	4911      	ldr	r1, [pc, #68]	; (8155c <dd_spi_set_transfer_delay+0x58>)
   81518:	79fb      	ldrb	r3, [r7, #7]
   8151a:	4810      	ldr	r0, [pc, #64]	; (8155c <dd_spi_set_transfer_delay+0x58>)
   8151c:	79fa      	ldrb	r2, [r7, #7]
   8151e:	320c      	adds	r2, #12
   81520:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   81524:	b292      	uxth	r2, r2
   81526:	330c      	adds	r3, #12
   81528:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	SPI0->SPI_CSR[ul_pcs_group_id] |= SPI_CSR_DLYBS(uc_dlybs) | SPI_CSR_DLYBCT(uc_dlybct);
   8152c:	4c0b      	ldr	r4, [pc, #44]	; (8155c <dd_spi_set_transfer_delay+0x58>)
   8152e:	79fb      	ldrb	r3, [r7, #7]
   81530:	490a      	ldr	r1, [pc, #40]	; (8155c <dd_spi_set_transfer_delay+0x58>)
   81532:	79fa      	ldrb	r2, [r7, #7]
   81534:	320c      	adds	r2, #12
   81536:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   8153a:	79ba      	ldrb	r2, [r7, #6]
   8153c:	0412      	lsls	r2, r2, #16
   8153e:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
   81542:	7978      	ldrb	r0, [r7, #5]
   81544:	0600      	lsls	r0, r0, #24
   81546:	4302      	orrs	r2, r0
   81548:	430a      	orrs	r2, r1
   8154a:	330c      	adds	r3, #12
   8154c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
}
   81550:	bf00      	nop
   81552:	3708      	adds	r7, #8
   81554:	46bd      	mov	sp, r7
   81556:	bc90      	pop	{r4, r7}
   81558:	4770      	bx	lr
   8155a:	bf00      	nop
   8155c:	40008000 	.word	0x40008000

00081560 <dd_spi_set_bits_per_transfer>:

void dd_spi_set_bits_per_transfer(CHIP_SEL_GROUP_TYPE ul_pcs_group_id, uint32_t ul_bits)
{
   81560:	b480      	push	{r7}
   81562:	b083      	sub	sp, #12
   81564:	af00      	add	r7, sp, #0
   81566:	4603      	mov	r3, r0
   81568:	6039      	str	r1, [r7, #0]
   8156a:	71fb      	strb	r3, [r7, #7]
	SPI0->SPI_CSR[ul_pcs_group_id] &= (~SPI_CSR_BITS_Msk);
   8156c:	490e      	ldr	r1, [pc, #56]	; (815a8 <dd_spi_set_bits_per_transfer+0x48>)
   8156e:	79fb      	ldrb	r3, [r7, #7]
   81570:	480d      	ldr	r0, [pc, #52]	; (815a8 <dd_spi_set_bits_per_transfer+0x48>)
   81572:	79fa      	ldrb	r2, [r7, #7]
   81574:	320c      	adds	r2, #12
   81576:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   8157a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
   8157e:	330c      	adds	r3, #12
   81580:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	SPI0->SPI_CSR[ul_pcs_group_id] |= ul_bits;
   81584:	4808      	ldr	r0, [pc, #32]	; (815a8 <dd_spi_set_bits_per_transfer+0x48>)
   81586:	79fb      	ldrb	r3, [r7, #7]
   81588:	4907      	ldr	r1, [pc, #28]	; (815a8 <dd_spi_set_bits_per_transfer+0x48>)
   8158a:	79fa      	ldrb	r2, [r7, #7]
   8158c:	320c      	adds	r2, #12
   8158e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   81592:	683a      	ldr	r2, [r7, #0]
   81594:	430a      	orrs	r2, r1
   81596:	330c      	adds	r3, #12
   81598:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
   8159c:	bf00      	nop
   8159e:	370c      	adds	r7, #12
   815a0:	46bd      	mov	sp, r7
   815a2:	bc80      	pop	{r7}
   815a4:	4770      	bx	lr
   815a6:	bf00      	nop
   815a8:	40008000 	.word	0x40008000

000815ac <dd_spi_set_clock_polarity>:
		SPI0->SPI_WPMR =  (0x53504900);
	}
	
}

void dd_spi_set_clock_polarity(CHIP_SEL_GROUP_TYPE ul_pcs_group_id, uint32_t ul_polarity)   {
   815ac:	b480      	push	{r7}
   815ae:	b083      	sub	sp, #12
   815b0:	af00      	add	r7, sp, #0
   815b2:	4603      	mov	r3, r0
   815b4:	6039      	str	r1, [r7, #0]
   815b6:	71fb      	strb	r3, [r7, #7]
	
	if (ul_polarity) {
   815b8:	683b      	ldr	r3, [r7, #0]
   815ba:	2b00      	cmp	r3, #0
   815bc:	d00c      	beq.n	815d8 <dd_spi_set_clock_polarity+0x2c>
		SPI0->SPI_CSR[ul_pcs_group_id] |= SPI_CSR_CPOL;
   815be:	490f      	ldr	r1, [pc, #60]	; (815fc <dd_spi_set_clock_polarity+0x50>)
   815c0:	79fb      	ldrb	r3, [r7, #7]
   815c2:	480e      	ldr	r0, [pc, #56]	; (815fc <dd_spi_set_clock_polarity+0x50>)
   815c4:	79fa      	ldrb	r2, [r7, #7]
   815c6:	320c      	adds	r2, #12
   815c8:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   815cc:	f042 0201 	orr.w	r2, r2, #1
   815d0:	330c      	adds	r3, #12
   815d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		} else {
		SPI0->SPI_CSR[ul_pcs_group_id] &= (~SPI_CSR_CPOL);
	}	
}
   815d6:	e00b      	b.n	815f0 <dd_spi_set_clock_polarity+0x44>
void dd_spi_set_clock_polarity(CHIP_SEL_GROUP_TYPE ul_pcs_group_id, uint32_t ul_polarity)   {
	
	if (ul_polarity) {
		SPI0->SPI_CSR[ul_pcs_group_id] |= SPI_CSR_CPOL;
		} else {
		SPI0->SPI_CSR[ul_pcs_group_id] &= (~SPI_CSR_CPOL);
   815d8:	4908      	ldr	r1, [pc, #32]	; (815fc <dd_spi_set_clock_polarity+0x50>)
   815da:	79fb      	ldrb	r3, [r7, #7]
   815dc:	4807      	ldr	r0, [pc, #28]	; (815fc <dd_spi_set_clock_polarity+0x50>)
   815de:	79fa      	ldrb	r2, [r7, #7]
   815e0:	320c      	adds	r2, #12
   815e2:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   815e6:	f022 0201 	bic.w	r2, r2, #1
   815ea:	330c      	adds	r3, #12
   815ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}	
}
   815f0:	bf00      	nop
   815f2:	370c      	adds	r7, #12
   815f4:	46bd      	mov	sp, r7
   815f6:	bc80      	pop	{r7}
   815f8:	4770      	bx	lr
   815fa:	bf00      	nop
   815fc:	40008000 	.word	0x40008000

00081600 <dd_spi_set_clock_phase>:

void dd_spi_set_clock_phase(CHIP_SEL_GROUP_TYPE ul_pcs_group_id, uint32_t ul_phase)
{
   81600:	b480      	push	{r7}
   81602:	b083      	sub	sp, #12
   81604:	af00      	add	r7, sp, #0
   81606:	4603      	mov	r3, r0
   81608:	6039      	str	r1, [r7, #0]
   8160a:	71fb      	strb	r3, [r7, #7]
	if (ul_phase) {
   8160c:	683b      	ldr	r3, [r7, #0]
   8160e:	2b00      	cmp	r3, #0
   81610:	d00c      	beq.n	8162c <dd_spi_set_clock_phase+0x2c>
		SPI0->SPI_CSR[ul_pcs_group_id] |= SPI_CSR_NCPHA;
   81612:	490f      	ldr	r1, [pc, #60]	; (81650 <dd_spi_set_clock_phase+0x50>)
   81614:	79fb      	ldrb	r3, [r7, #7]
   81616:	480e      	ldr	r0, [pc, #56]	; (81650 <dd_spi_set_clock_phase+0x50>)
   81618:	79fa      	ldrb	r2, [r7, #7]
   8161a:	320c      	adds	r2, #12
   8161c:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   81620:	f042 0202 	orr.w	r2, r2, #2
   81624:	330c      	adds	r3, #12
   81626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		} else {
		SPI0->SPI_CSR[ul_pcs_group_id] &= (~SPI_CSR_NCPHA);
	}
}
   8162a:	e00b      	b.n	81644 <dd_spi_set_clock_phase+0x44>
void dd_spi_set_clock_phase(CHIP_SEL_GROUP_TYPE ul_pcs_group_id, uint32_t ul_phase)
{
	if (ul_phase) {
		SPI0->SPI_CSR[ul_pcs_group_id] |= SPI_CSR_NCPHA;
		} else {
		SPI0->SPI_CSR[ul_pcs_group_id] &= (~SPI_CSR_NCPHA);
   8162c:	4908      	ldr	r1, [pc, #32]	; (81650 <dd_spi_set_clock_phase+0x50>)
   8162e:	79fb      	ldrb	r3, [r7, #7]
   81630:	4807      	ldr	r0, [pc, #28]	; (81650 <dd_spi_set_clock_phase+0x50>)
   81632:	79fa      	ldrb	r2, [r7, #7]
   81634:	320c      	adds	r2, #12
   81636:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   8163a:	f022 0202 	bic.w	r2, r2, #2
   8163e:	330c      	adds	r3, #12
   81640:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}
}
   81644:	bf00      	nop
   81646:	370c      	adds	r7, #12
   81648:	46bd      	mov	sp, r7
   8164a:	bc80      	pop	{r7}
   8164c:	4770      	bx	lr
   8164e:	bf00      	nop
   81650:	40008000 	.word	0x40008000

00081654 <dd_spi_set_baudrate_div>:

int16_t dd_spi_set_baudrate_div(CHIP_SEL_GROUP_TYPE ul_pcs_group_id,uint8_t uc_baudrate_divider)
{
   81654:	b480      	push	{r7}
   81656:	b083      	sub	sp, #12
   81658:	af00      	add	r7, sp, #0
   8165a:	4603      	mov	r3, r0
   8165c:	460a      	mov	r2, r1
   8165e:	71fb      	strb	r3, [r7, #7]
   81660:	4613      	mov	r3, r2
   81662:	71bb      	strb	r3, [r7, #6]
	/* Programming the SCBR field to 0 is forbidden */
	if (!uc_baudrate_divider)
   81664:	79bb      	ldrb	r3, [r7, #6]
   81666:	2b00      	cmp	r3, #0
   81668:	d102      	bne.n	81670 <dd_spi_set_baudrate_div+0x1c>
	return -1;
   8166a:	f04f 33ff 	mov.w	r3, #4294967295
   8166e:	e01a      	b.n	816a6 <dd_spi_set_baudrate_div+0x52>

	SPI0->SPI_CSR[ul_pcs_group_id] &= (~SPI_CSR_SCBR_Msk);
   81670:	490f      	ldr	r1, [pc, #60]	; (816b0 <dd_spi_set_baudrate_div+0x5c>)
   81672:	79fb      	ldrb	r3, [r7, #7]
   81674:	480e      	ldr	r0, [pc, #56]	; (816b0 <dd_spi_set_baudrate_div+0x5c>)
   81676:	79fa      	ldrb	r2, [r7, #7]
   81678:	320c      	adds	r2, #12
   8167a:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   8167e:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
   81682:	330c      	adds	r3, #12
   81684:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	SPI0->SPI_CSR[ul_pcs_group_id] |= SPI_CSR_SCBR(uc_baudrate_divider);
   81688:	4809      	ldr	r0, [pc, #36]	; (816b0 <dd_spi_set_baudrate_div+0x5c>)
   8168a:	79fb      	ldrb	r3, [r7, #7]
   8168c:	4908      	ldr	r1, [pc, #32]	; (816b0 <dd_spi_set_baudrate_div+0x5c>)
   8168e:	79fa      	ldrb	r2, [r7, #7]
   81690:	320c      	adds	r2, #12
   81692:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   81696:	79ba      	ldrb	r2, [r7, #6]
   81698:	0212      	lsls	r2, r2, #8
   8169a:	b292      	uxth	r2, r2
   8169c:	430a      	orrs	r2, r1
   8169e:	330c      	adds	r3, #12
   816a0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	return 0;
   816a4:	2300      	movs	r3, #0
}
   816a6:	4618      	mov	r0, r3
   816a8:	370c      	adds	r7, #12
   816aa:	46bd      	mov	sp, r7
   816ac:	bc80      	pop	{r7}
   816ae:	4770      	bx	lr
   816b0:	40008000 	.word	0x40008000

000816b4 <dd_spi_set_peripheral_chip_select_value>:

void dd_spi_set_peripheral_chip_select_value(SPI_DECODER_MUX_ID_TYPE pcs_ul_value)
{
   816b4:	b480      	push	{r7}
   816b6:	b083      	sub	sp, #12
   816b8:	af00      	add	r7, sp, #0
   816ba:	4603      	mov	r3, r0
   816bc:	71fb      	strb	r3, [r7, #7]
	SPI0->SPI_MR &= (~SPI_MR_PCS_Msk);
   816be:	4a0a      	ldr	r2, [pc, #40]	; (816e8 <dd_spi_set_peripheral_chip_select_value+0x34>)
   816c0:	4b09      	ldr	r3, [pc, #36]	; (816e8 <dd_spi_set_peripheral_chip_select_value+0x34>)
   816c2:	685b      	ldr	r3, [r3, #4]
   816c4:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
   816c8:	6053      	str	r3, [r2, #4]
	SPI0->SPI_MR |= ((SPI_MR_PCS_Msk & ((pcs_ul_value) << SPI_MR_PCS_Pos)));
   816ca:	4907      	ldr	r1, [pc, #28]	; (816e8 <dd_spi_set_peripheral_chip_select_value+0x34>)
   816cc:	4b06      	ldr	r3, [pc, #24]	; (816e8 <dd_spi_set_peripheral_chip_select_value+0x34>)
   816ce:	685a      	ldr	r2, [r3, #4]
   816d0:	79fb      	ldrb	r3, [r7, #7]
   816d2:	041b      	lsls	r3, r3, #16
   816d4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
   816d8:	4313      	orrs	r3, r2
   816da:	604b      	str	r3, [r1, #4]
}
   816dc:	bf00      	nop
   816de:	370c      	adds	r7, #12
   816e0:	46bd      	mov	sp, r7
   816e2:	bc80      	pop	{r7}
   816e4:	4770      	bx	lr
   816e6:	bf00      	nop
   816e8:	40008000 	.word	0x40008000

000816ec <dd_spi_master_transfer>:


void dd_spi_master_transfer(void *p_buf, uint32_t size, SPI_DECODER_MUX_ID_TYPE uc_pcs)  {
   816ec:	b580      	push	{r7, lr}
   816ee:	b086      	sub	sp, #24
   816f0:	af00      	add	r7, sp, #0
   816f2:	60f8      	str	r0, [r7, #12]
   816f4:	60b9      	str	r1, [r7, #8]
   816f6:	4613      	mov	r3, r2
   816f8:	71fb      	strb	r3, [r7, #7]
	uint8_t uc__temp_pcs;
	static uint8_t data;

	uint8_t *p_buffer;

	p_buffer = p_buf;
   816fa:	68fb      	ldr	r3, [r7, #12]
   816fc:	613b      	str	r3, [r7, #16]

	for (i = 0; i < size; i++) {		
   816fe:	2300      	movs	r3, #0
   81700:	617b      	str	r3, [r7, #20]
   81702:	e01b      	b.n	8173c <dd_spi_master_transfer+0x50>
			dd_spi_write(p_buffer[i], uc_pcs,0); 	
   81704:	693a      	ldr	r2, [r7, #16]
   81706:	697b      	ldr	r3, [r7, #20]
   81708:	4413      	add	r3, r2
   8170a:	781b      	ldrb	r3, [r3, #0]
   8170c:	79f9      	ldrb	r1, [r7, #7]
   8170e:	2200      	movs	r2, #0
   81710:	4618      	mov	r0, r3
   81712:	4b0e      	ldr	r3, [pc, #56]	; (8174c <dd_spi_master_transfer+0x60>)
   81714:	4798      	blx	r3
		/* Wait transfer done. */
		while  ( ((SPI0->SPI_SR) & SPI_SR_RDRF) == 0);		  
   81716:	bf00      	nop
   81718:	4b0d      	ldr	r3, [pc, #52]	; (81750 <dd_spi_master_transfer+0x64>)
   8171a:	691b      	ldr	r3, [r3, #16]
   8171c:	f003 0301 	and.w	r3, r3, #1
   81720:	2b00      	cmp	r3, #0
   81722:	d0f9      	beq.n	81718 <dd_spi_master_transfer+0x2c>
		dd_spi_read(&data);
   81724:	480b      	ldr	r0, [pc, #44]	; (81754 <dd_spi_master_transfer+0x68>)
   81726:	4b0c      	ldr	r3, [pc, #48]	; (81758 <dd_spi_master_transfer+0x6c>)
   81728:	4798      	blx	r3
		p_buffer[i] = data;
   8172a:	693a      	ldr	r2, [r7, #16]
   8172c:	697b      	ldr	r3, [r7, #20]
   8172e:	4413      	add	r3, r2
   81730:	4a08      	ldr	r2, [pc, #32]	; (81754 <dd_spi_master_transfer+0x68>)
   81732:	7812      	ldrb	r2, [r2, #0]
   81734:	701a      	strb	r2, [r3, #0]

	uint8_t *p_buffer;

	p_buffer = p_buf;

	for (i = 0; i < size; i++) {		
   81736:	697b      	ldr	r3, [r7, #20]
   81738:	3301      	adds	r3, #1
   8173a:	617b      	str	r3, [r7, #20]
   8173c:	697a      	ldr	r2, [r7, #20]
   8173e:	68bb      	ldr	r3, [r7, #8]
   81740:	429a      	cmp	r2, r3
   81742:	d3df      	bcc.n	81704 <dd_spi_master_transfer+0x18>
		/* Wait transfer done. */
		while  ( ((SPI0->SPI_SR) & SPI_SR_RDRF) == 0);		  
		dd_spi_read(&data);
		p_buffer[i] = data;
	}
}
   81744:	bf00      	nop
   81746:	3718      	adds	r7, #24
   81748:	46bd      	mov	sp, r7
   8174a:	bd80      	pop	{r7, pc}
   8174c:	000817c9 	.word	0x000817c9
   81750:	40008000 	.word	0x40008000
   81754:	200709f6 	.word	0x200709f6
   81758:	00081839 	.word	0x00081839

0008175c <dd_spi_master_read>:

void dd_spi_master_read(void *p_buf, uint32_t size, SPI_DECODER_MUX_ID_TYPE uc_pcs )   {
   8175c:	b580      	push	{r7, lr}
   8175e:	b088      	sub	sp, #32
   81760:	af00      	add	r7, sp, #0
   81762:	60f8      	str	r0, [r7, #12]
   81764:	60b9      	str	r1, [r7, #8]
   81766:	4613      	mov	r3, r2
   81768:	71fb      	strb	r3, [r7, #7]
	//uint8_t uc_pcs;
	uint8_t data;

	uint8_t *p_buffer;

	p_buffer = p_buf;
   8176a:	68fb      	ldr	r3, [r7, #12]
   8176c:	61bb      	str	r3, [r7, #24]
	
	for (i = 0; i < size ; i++) {  
   8176e:	2300      	movs	r3, #0
   81770:	61fb      	str	r3, [r7, #28]
   81772:	e01a      	b.n	817aa <dd_spi_master_read+0x4e>
		  
		dd_spi_write(p_buffer[0], uc_pcs, 0);
   81774:	69bb      	ldr	r3, [r7, #24]
   81776:	781b      	ldrb	r3, [r3, #0]
   81778:	79f9      	ldrb	r1, [r7, #7]
   8177a:	2200      	movs	r2, #0
   8177c:	4618      	mov	r0, r3
   8177e:	4b0f      	ldr	r3, [pc, #60]	; (817bc <dd_spi_master_read+0x60>)
   81780:	4798      	blx	r3
		/* Wait transfer done. */
		while ( ((SPI0->SPI_SR) & SPI_SR_RDRF) == 0);
   81782:	bf00      	nop
   81784:	4b0e      	ldr	r3, [pc, #56]	; (817c0 <dd_spi_master_read+0x64>)
   81786:	691b      	ldr	r3, [r3, #16]
   81788:	f003 0301 	and.w	r3, r3, #1
   8178c:	2b00      	cmp	r3, #0
   8178e:	d0f9      	beq.n	81784 <dd_spi_master_read+0x28>

		  
		dd_spi_read(&data);
   81790:	f107 0317 	add.w	r3, r7, #23
   81794:	4618      	mov	r0, r3
   81796:	4b0b      	ldr	r3, [pc, #44]	; (817c4 <dd_spi_master_read+0x68>)
   81798:	4798      	blx	r3

		

		p_buffer[i] = data;
   8179a:	69ba      	ldr	r2, [r7, #24]
   8179c:	69fb      	ldr	r3, [r7, #28]
   8179e:	4413      	add	r3, r2
   817a0:	7dfa      	ldrb	r2, [r7, #23]
   817a2:	701a      	strb	r2, [r3, #0]

	uint8_t *p_buffer;

	p_buffer = p_buf;
	
	for (i = 0; i < size ; i++) {  
   817a4:	69fb      	ldr	r3, [r7, #28]
   817a6:	3301      	adds	r3, #1
   817a8:	61fb      	str	r3, [r7, #28]
   817aa:	69fa      	ldr	r2, [r7, #28]
   817ac:	68bb      	ldr	r3, [r7, #8]
   817ae:	429a      	cmp	r2, r3
   817b0:	d3e0      	bcc.n	81774 <dd_spi_master_read+0x18>
		

		p_buffer[i] = data;
		
	}
}
   817b2:	bf00      	nop
   817b4:	3720      	adds	r7, #32
   817b6:	46bd      	mov	sp, r7
   817b8:	bd80      	pop	{r7, pc}
   817ba:	bf00      	nop
   817bc:	000817c9 	.word	0x000817c9
   817c0:	40008000 	.word	0x40008000
   817c4:	00081839 	.word	0x00081839

000817c8 <dd_spi_write>:





spi_status_t  dd_spi_write(uint8_t us_data, SPI_DECODER_MUX_ID_TYPE uc_pcs, uint8_t uc_last) {
   817c8:	b480      	push	{r7}
   817ca:	b085      	sub	sp, #20
   817cc:	af00      	add	r7, sp, #0
   817ce:	4603      	mov	r3, r0
   817d0:	71fb      	strb	r3, [r7, #7]
   817d2:	460b      	mov	r3, r1
   817d4:	71bb      	strb	r3, [r7, #6]
   817d6:	4613      	mov	r3, r2
   817d8:	717b      	strb	r3, [r7, #5]
	uint32_t timeout = SPI_TIMEOUT;
   817da:	f643 2398 	movw	r3, #15000	; 0x3a98
   817de:	60fb      	str	r3, [r7, #12]
	uint32_t value;
	uint8_t cs_reg;
	while (!(SPI0->SPI_SR & SPI_SR_TDRE)) {
   817e0:	e006      	b.n	817f0 <dd_spi_write+0x28>
		if (!timeout--) {
   817e2:	68fb      	ldr	r3, [r7, #12]
   817e4:	1e5a      	subs	r2, r3, #1
   817e6:	60fa      	str	r2, [r7, #12]
   817e8:	2b00      	cmp	r3, #0
   817ea:	d101      	bne.n	817f0 <dd_spi_write+0x28>
			return SPI_ERROR_TIMEOUT;
   817ec:	2301      	movs	r3, #1
   817ee:	e01b      	b.n	81828 <dd_spi_write+0x60>

spi_status_t  dd_spi_write(uint8_t us_data, SPI_DECODER_MUX_ID_TYPE uc_pcs, uint8_t uc_last) {
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;
	uint8_t cs_reg;
	while (!(SPI0->SPI_SR & SPI_SR_TDRE)) {
   817f0:	4b10      	ldr	r3, [pc, #64]	; (81834 <dd_spi_write+0x6c>)
   817f2:	691b      	ldr	r3, [r3, #16]
   817f4:	f003 0302 	and.w	r3, r3, #2
   817f8:	2b00      	cmp	r3, #0
   817fa:	d0f2      	beq.n	817e2 <dd_spi_write+0x1a>
	}
	//cs_reg = ((~(1u<<(uc_pcs)))& 0xF)                
	//value = SPI_MR_PCS(uc_pcs);
	//(SPI0->SPI_MR)|= value;
	
	if (uc_last) {(SPI0->SPI_CR) |= SPI_CR_LASTXFER; }
   817fc:	797b      	ldrb	r3, [r7, #5]
   817fe:	2b00      	cmp	r3, #0
   81800:	d006      	beq.n	81810 <dd_spi_write+0x48>
   81802:	4a0c      	ldr	r2, [pc, #48]	; (81834 <dd_spi_write+0x6c>)
   81804:	4b0b      	ldr	r3, [pc, #44]	; (81834 <dd_spi_write+0x6c>)
   81806:	681b      	ldr	r3, [r3, #0]
   81808:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   8180c:	6013      	str	r3, [r2, #0]
   8180e:	e005      	b.n	8181c <dd_spi_write+0x54>
	else {  (SPI0->SPI_CR) &= (~SPI_CR_LASTXFER);   }
   81810:	4a08      	ldr	r2, [pc, #32]	; (81834 <dd_spi_write+0x6c>)
   81812:	4b08      	ldr	r3, [pc, #32]	; (81834 <dd_spi_write+0x6c>)
   81814:	681b      	ldr	r3, [r3, #0]
   81816:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   8181a:	6013      	str	r3, [r2, #0]
	
	value = SPI_TDR_TD(us_data);
   8181c:	79fb      	ldrb	r3, [r7, #7]
   8181e:	60bb      	str	r3, [r7, #8]
	SPI0->SPI_TDR = value;
   81820:	4a04      	ldr	r2, [pc, #16]	; (81834 <dd_spi_write+0x6c>)
   81822:	68bb      	ldr	r3, [r7, #8]
   81824:	60d3      	str	r3, [r2, #12]
	return SPI_OK;
   81826:	2300      	movs	r3, #0
}
   81828:	4618      	mov	r0, r3
   8182a:	3714      	adds	r7, #20
   8182c:	46bd      	mov	sp, r7
   8182e:	bc80      	pop	{r7}
   81830:	4770      	bx	lr
   81832:	bf00      	nop
   81834:	40008000 	.word	0x40008000

00081838 <dd_spi_read>:


spi_status_t dd_spi_read(uint8_t *us_data) {
   81838:	b480      	push	{r7}
   8183a:	b085      	sub	sp, #20
   8183c:	af00      	add	r7, sp, #0
   8183e:	6078      	str	r0, [r7, #4]
	uint32_t timeout = SPI_TIMEOUT;
   81840:	f643 2398 	movw	r3, #15000	; 0x3a98
   81844:	60fb      	str	r3, [r7, #12]
	static uint32_t reg_value;

	while (!(SPI0->SPI_SR & SPI_SR_RDRF)) {
   81846:	e006      	b.n	81856 <dd_spi_read+0x1e>
		if (!timeout--) {
   81848:	68fb      	ldr	r3, [r7, #12]
   8184a:	1e5a      	subs	r2, r3, #1
   8184c:	60fa      	str	r2, [r7, #12]
   8184e:	2b00      	cmp	r3, #0
   81850:	d101      	bne.n	81856 <dd_spi_read+0x1e>
			return SPI_ERROR_TIMEOUT;
   81852:	2301      	movs	r3, #1
   81854:	e00f      	b.n	81876 <dd_spi_read+0x3e>

spi_status_t dd_spi_read(uint8_t *us_data) {
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(SPI0->SPI_SR & SPI_SR_RDRF)) {
   81856:	4b0a      	ldr	r3, [pc, #40]	; (81880 <dd_spi_read+0x48>)
   81858:	691b      	ldr	r3, [r3, #16]
   8185a:	f003 0301 	and.w	r3, r3, #1
   8185e:	2b00      	cmp	r3, #0
   81860:	d0f2      	beq.n	81848 <dd_spi_read+0x10>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	reg_value = SPI0->SPI_RDR;	
   81862:	4b07      	ldr	r3, [pc, #28]	; (81880 <dd_spi_read+0x48>)
   81864:	689b      	ldr	r3, [r3, #8]
   81866:	4a07      	ldr	r2, [pc, #28]	; (81884 <dd_spi_read+0x4c>)
   81868:	6013      	str	r3, [r2, #0]
	*us_data =  (reg_value & SPI_RDR_RD_Msk);
   8186a:	4b06      	ldr	r3, [pc, #24]	; (81884 <dd_spi_read+0x4c>)
   8186c:	681b      	ldr	r3, [r3, #0]
   8186e:	b2da      	uxtb	r2, r3
   81870:	687b      	ldr	r3, [r7, #4]
   81872:	701a      	strb	r2, [r3, #0]
// 		}
// 		else
// 		{
// 			return SPI_OK;
// 		}
	return SPI_OK;
   81874:	2300      	movs	r3, #0
}
   81876:	4618      	mov	r0, r3
   81878:	3714      	adds	r7, #20
   8187a:	46bd      	mov	sp, r7
   8187c:	bc80      	pop	{r7}
   8187e:	4770      	bx	lr
   81880:	40008000 	.word	0x40008000
   81884:	200709f8 	.word	0x200709f8

00081888 <SENSOR_DD_INIT_SPI>:

void SENSOR_DD_INIT_SPI(void)   {
   81888:	b580      	push	{r7, lr}
   8188a:	af00      	add	r7, sp, #0
	
	//dd_spi_set_writeprotect(0);	
	SPI0->SPI_WPMR =  0x53504900;
   8188c:	4b59      	ldr	r3, [pc, #356]	; (819f4 <SENSOR_DD_INIT_SPI+0x16c>)
   8188e:	4a5a      	ldr	r2, [pc, #360]	; (819f8 <SENSOR_DD_INIT_SPI+0x170>)
   81890:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	
	 
	 puts(STRING_HEADER);	
   81894:	4859      	ldr	r0, [pc, #356]	; (819fc <SENSOR_DD_INIT_SPI+0x174>)
   81896:	4b5a      	ldr	r3, [pc, #360]	; (81a00 <SENSOR_DD_INIT_SPI+0x178>)
   81898:	4798      	blx	r3
	 
	 sysclk_enable_peripheral_clock(ID_SPI0);
   8189a:	2018      	movs	r0, #24
   8189c:	4b59      	ldr	r3, [pc, #356]	; (81a04 <SENSOR_DD_INIT_SPI+0x17c>)
   8189e:	4798      	blx	r3
	 		
	SPI0->SPI_CR = SPI_CR_SPIDIS;
   818a0:	4b54      	ldr	r3, [pc, #336]	; (819f4 <SENSOR_DD_INIT_SPI+0x16c>)
   818a2:	2202      	movs	r2, #2
   818a4:	601a      	str	r2, [r3, #0]
	SPI0->SPI_CR = SPI_CR_SWRST;		
   818a6:	4b53      	ldr	r3, [pc, #332]	; (819f4 <SENSOR_DD_INIT_SPI+0x16c>)
   818a8:	2280      	movs	r2, #128	; 0x80
   818aa:	601a      	str	r2, [r3, #0]
	SPI0->SPI_CR = SPI_CR_LASTXFER;	
   818ac:	4b51      	ldr	r3, [pc, #324]	; (819f4 <SENSOR_DD_INIT_SPI+0x16c>)
   818ae:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   818b2:	601a      	str	r2, [r3, #0]
	
	
	SPI0->SPI_MR |= SPI_MR_MSTR;	
   818b4:	4a4f      	ldr	r2, [pc, #316]	; (819f4 <SENSOR_DD_INIT_SPI+0x16c>)
   818b6:	4b4f      	ldr	r3, [pc, #316]	; (819f4 <SENSOR_DD_INIT_SPI+0x16c>)
   818b8:	685b      	ldr	r3, [r3, #4]
   818ba:	f043 0301 	orr.w	r3, r3, #1
   818be:	6053      	str	r3, [r2, #4]
	SPI0->SPI_MR |= SPI_MR_MODFDIS ;	
   818c0:	4a4c      	ldr	r2, [pc, #304]	; (819f4 <SENSOR_DD_INIT_SPI+0x16c>)
   818c2:	4b4c      	ldr	r3, [pc, #304]	; (819f4 <SENSOR_DD_INIT_SPI+0x16c>)
   818c4:	685b      	ldr	r3, [r3, #4]
   818c6:	f043 0310 	orr.w	r3, r3, #16
   818ca:	6053      	str	r3, [r2, #4]
	SPI0->SPI_MR |= SPI_MR_PCSDEC;
   818cc:	4a49      	ldr	r2, [pc, #292]	; (819f4 <SENSOR_DD_INIT_SPI+0x16c>)
   818ce:	4b49      	ldr	r3, [pc, #292]	; (819f4 <SENSOR_DD_INIT_SPI+0x16c>)
   818d0:	685b      	ldr	r3, [r3, #4]
   818d2:	f043 0304 	orr.w	r3, r3, #4
   818d6:	6053      	str	r3, [r2, #4]
	
	//chip selection procedure done here
	//SPI0->SPI_MR &= ~SPI_MR_PS; // SPI SET FIXED PERIPHERAL.	
	//SPI0->SPI_MR &= (~SPI_MR_PCSDEC); // The chip selects are directly connected to a peripheral device.	
	SPI0->SPI_MR &= (~SPI_MR_PCS_Msk);
   818d8:	4a46      	ldr	r2, [pc, #280]	; (819f4 <SENSOR_DD_INIT_SPI+0x16c>)
   818da:	4b46      	ldr	r3, [pc, #280]	; (819f4 <SENSOR_DD_INIT_SPI+0x16c>)
   818dc:	685b      	ldr	r3, [r3, #4]
   818de:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
   818e2:	6053      	str	r3, [r2, #4]
	SPI0->SPI_MR |= SPI_MR_PCS(SPI_CHIP_PCS);	
   818e4:	4943      	ldr	r1, [pc, #268]	; (819f4 <SENSOR_DD_INIT_SPI+0x16c>)
   818e6:	4b43      	ldr	r3, [pc, #268]	; (819f4 <SENSOR_DD_INIT_SPI+0x16c>)
   818e8:	685a      	ldr	r2, [r3, #4]
   818ea:	4b47      	ldr	r3, [pc, #284]	; (81a08 <SENSOR_DD_INIT_SPI+0x180>)
   818ec:	781b      	ldrb	r3, [r3, #0]
   818ee:	4618      	mov	r0, r3
   818f0:	2301      	movs	r3, #1
   818f2:	4083      	lsls	r3, r0
   818f4:	43db      	mvns	r3, r3
   818f6:	041b      	lsls	r3, r3, #16
   818f8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
   818fc:	4313      	orrs	r3, r2
   818fe:	604b      	str	r3, [r1, #4]
	
	//spi_set_peripheral_chip_select_value(SPI_MASTER_BASE, SPI_CHIP_PCS);	
	dd_spi_set_clock_polarity(0, SPI_CLK_POLARITY_0);
   81900:	2100      	movs	r1, #0
   81902:	2000      	movs	r0, #0
   81904:	4b41      	ldr	r3, [pc, #260]	; (81a0c <SENSOR_DD_INIT_SPI+0x184>)
   81906:	4798      	blx	r3
	dd_spi_set_clock_phase(0, SPI_CLK_PHASE_1);	
   81908:	2101      	movs	r1, #1
   8190a:	2000      	movs	r0, #0
   8190c:	4b40      	ldr	r3, [pc, #256]	; (81a10 <SENSOR_DD_INIT_SPI+0x188>)
   8190e:	4798      	blx	r3
	dd_spi_set_bits_per_transfer(0,SPI_CSR_BITS_8_BIT);	
   81910:	2100      	movs	r1, #0
   81912:	2000      	movs	r0, #0
   81914:	4b3f      	ldr	r3, [pc, #252]	; (81a14 <SENSOR_DD_INIT_SPI+0x18c>)
   81916:	4798      	blx	r3
	dd_spi_set_baudrate_div(0, (sysclk_get_peripheral_hz()/ gs_ul_spi_clock));	
   81918:	4b3f      	ldr	r3, [pc, #252]	; (81a18 <SENSOR_DD_INIT_SPI+0x190>)
   8191a:	4798      	blx	r3
   8191c:	4602      	mov	r2, r0
   8191e:	4b3f      	ldr	r3, [pc, #252]	; (81a1c <SENSOR_DD_INIT_SPI+0x194>)
   81920:	681b      	ldr	r3, [r3, #0]
   81922:	fbb2 f3f3 	udiv	r3, r2, r3
   81926:	b2db      	uxtb	r3, r3
   81928:	4619      	mov	r1, r3
   8192a:	2000      	movs	r0, #0
   8192c:	4b3c      	ldr	r3, [pc, #240]	; (81a20 <SENSOR_DD_INIT_SPI+0x198>)
   8192e:	4798      	blx	r3
	dd_spi_set_transfer_delay(0, SPI_DLYBS,SPI_DLYBCT);
   81930:	2240      	movs	r2, #64	; 0x40
   81932:	2100      	movs	r1, #0
   81934:	2000      	movs	r0, #0
   81936:	4b3b      	ldr	r3, [pc, #236]	; (81a24 <SENSOR_DD_INIT_SPI+0x19c>)
   81938:	4798      	blx	r3
	
	dd_spi_set_clock_polarity(1, SPI_CLK_POLARITY_0);
   8193a:	2100      	movs	r1, #0
   8193c:	2001      	movs	r0, #1
   8193e:	4b33      	ldr	r3, [pc, #204]	; (81a0c <SENSOR_DD_INIT_SPI+0x184>)
   81940:	4798      	blx	r3
	dd_spi_set_clock_phase(1, SPI_CLK_PHASE_1);
   81942:	2101      	movs	r1, #1
   81944:	2001      	movs	r0, #1
   81946:	4b32      	ldr	r3, [pc, #200]	; (81a10 <SENSOR_DD_INIT_SPI+0x188>)
   81948:	4798      	blx	r3
	dd_spi_set_bits_per_transfer(1,SPI_CSR_BITS_8_BIT);
   8194a:	2100      	movs	r1, #0
   8194c:	2001      	movs	r0, #1
   8194e:	4b31      	ldr	r3, [pc, #196]	; (81a14 <SENSOR_DD_INIT_SPI+0x18c>)
   81950:	4798      	blx	r3
	dd_spi_set_baudrate_div(1, (sysclk_get_peripheral_hz()/ gs_ul_spi_clock));
   81952:	4b31      	ldr	r3, [pc, #196]	; (81a18 <SENSOR_DD_INIT_SPI+0x190>)
   81954:	4798      	blx	r3
   81956:	4602      	mov	r2, r0
   81958:	4b30      	ldr	r3, [pc, #192]	; (81a1c <SENSOR_DD_INIT_SPI+0x194>)
   8195a:	681b      	ldr	r3, [r3, #0]
   8195c:	fbb2 f3f3 	udiv	r3, r2, r3
   81960:	b2db      	uxtb	r3, r3
   81962:	4619      	mov	r1, r3
   81964:	2001      	movs	r0, #1
   81966:	4b2e      	ldr	r3, [pc, #184]	; (81a20 <SENSOR_DD_INIT_SPI+0x198>)
   81968:	4798      	blx	r3
	dd_spi_set_transfer_delay(1, SPI_DLYBS,SPI_DLYBCT);
   8196a:	2240      	movs	r2, #64	; 0x40
   8196c:	2100      	movs	r1, #0
   8196e:	2001      	movs	r0, #1
   81970:	4b2c      	ldr	r3, [pc, #176]	; (81a24 <SENSOR_DD_INIT_SPI+0x19c>)
   81972:	4798      	blx	r3
	
	dd_spi_set_clock_polarity(2, SPI_CLK_POLARITY_0);
   81974:	2100      	movs	r1, #0
   81976:	2002      	movs	r0, #2
   81978:	4b24      	ldr	r3, [pc, #144]	; (81a0c <SENSOR_DD_INIT_SPI+0x184>)
   8197a:	4798      	blx	r3
	dd_spi_set_clock_phase(2, SPI_CLK_PHASE_1);
   8197c:	2101      	movs	r1, #1
   8197e:	2002      	movs	r0, #2
   81980:	4b23      	ldr	r3, [pc, #140]	; (81a10 <SENSOR_DD_INIT_SPI+0x188>)
   81982:	4798      	blx	r3
	dd_spi_set_bits_per_transfer(2,SPI_CSR_BITS_8_BIT);
   81984:	2100      	movs	r1, #0
   81986:	2002      	movs	r0, #2
   81988:	4b22      	ldr	r3, [pc, #136]	; (81a14 <SENSOR_DD_INIT_SPI+0x18c>)
   8198a:	4798      	blx	r3
	dd_spi_set_baudrate_div(2, (sysclk_get_peripheral_hz()/ gs_ul_spi_clock));
   8198c:	4b22      	ldr	r3, [pc, #136]	; (81a18 <SENSOR_DD_INIT_SPI+0x190>)
   8198e:	4798      	blx	r3
   81990:	4602      	mov	r2, r0
   81992:	4b22      	ldr	r3, [pc, #136]	; (81a1c <SENSOR_DD_INIT_SPI+0x194>)
   81994:	681b      	ldr	r3, [r3, #0]
   81996:	fbb2 f3f3 	udiv	r3, r2, r3
   8199a:	b2db      	uxtb	r3, r3
   8199c:	4619      	mov	r1, r3
   8199e:	2002      	movs	r0, #2
   819a0:	4b1f      	ldr	r3, [pc, #124]	; (81a20 <SENSOR_DD_INIT_SPI+0x198>)
   819a2:	4798      	blx	r3
	dd_spi_set_transfer_delay(2, SPI_DLYBS,SPI_DLYBCT);
   819a4:	2240      	movs	r2, #64	; 0x40
   819a6:	2100      	movs	r1, #0
   819a8:	2002      	movs	r0, #2
   819aa:	4b1e      	ldr	r3, [pc, #120]	; (81a24 <SENSOR_DD_INIT_SPI+0x19c>)
   819ac:	4798      	blx	r3
	
	dd_spi_set_clock_polarity(3, SPI_CLK_POLARITY_0);
   819ae:	2100      	movs	r1, #0
   819b0:	2003      	movs	r0, #3
   819b2:	4b16      	ldr	r3, [pc, #88]	; (81a0c <SENSOR_DD_INIT_SPI+0x184>)
   819b4:	4798      	blx	r3
	dd_spi_set_clock_phase(3, SPI_CLK_PHASE_1);
   819b6:	2101      	movs	r1, #1
   819b8:	2003      	movs	r0, #3
   819ba:	4b15      	ldr	r3, [pc, #84]	; (81a10 <SENSOR_DD_INIT_SPI+0x188>)
   819bc:	4798      	blx	r3
	dd_spi_set_bits_per_transfer(3,SPI_CSR_BITS_8_BIT);
   819be:	2100      	movs	r1, #0
   819c0:	2003      	movs	r0, #3
   819c2:	4b14      	ldr	r3, [pc, #80]	; (81a14 <SENSOR_DD_INIT_SPI+0x18c>)
   819c4:	4798      	blx	r3
	dd_spi_set_baudrate_div(3, (sysclk_get_peripheral_hz()/ gs_ul_spi_clock));
   819c6:	4b14      	ldr	r3, [pc, #80]	; (81a18 <SENSOR_DD_INIT_SPI+0x190>)
   819c8:	4798      	blx	r3
   819ca:	4602      	mov	r2, r0
   819cc:	4b13      	ldr	r3, [pc, #76]	; (81a1c <SENSOR_DD_INIT_SPI+0x194>)
   819ce:	681b      	ldr	r3, [r3, #0]
   819d0:	fbb2 f3f3 	udiv	r3, r2, r3
   819d4:	b2db      	uxtb	r3, r3
   819d6:	4619      	mov	r1, r3
   819d8:	2003      	movs	r0, #3
   819da:	4b11      	ldr	r3, [pc, #68]	; (81a20 <SENSOR_DD_INIT_SPI+0x198>)
   819dc:	4798      	blx	r3
	dd_spi_set_transfer_delay(3, SPI_DLYBS,SPI_DLYBCT);
   819de:	2240      	movs	r2, #64	; 0x40
   819e0:	2100      	movs	r1, #0
   819e2:	2003      	movs	r0, #3
   819e4:	4b0f      	ldr	r3, [pc, #60]	; (81a24 <SENSOR_DD_INIT_SPI+0x19c>)
   819e6:	4798      	blx	r3
	
	
	
	SPI0->SPI_CR = SPI_CR_SPIEN;		
   819e8:	4b02      	ldr	r3, [pc, #8]	; (819f4 <SENSOR_DD_INIT_SPI+0x16c>)
   819ea:	2201      	movs	r2, #1
   819ec:	601a      	str	r2, [r3, #0]
}
   819ee:	bf00      	nop
   819f0:	bd80      	pop	{r7, pc}
   819f2:	bf00      	nop
   819f4:	40008000 	.word	0x40008000
   819f8:	53504900 	.word	0x53504900
   819fc:	000867c0 	.word	0x000867c0
   81a00:	00084cb5 	.word	0x00084cb5
   81a04:	000814e9 	.word	0x000814e9
   81a08:	200709f5 	.word	0x200709f5
   81a0c:	000815ad 	.word	0x000815ad
   81a10:	00081601 	.word	0x00081601
   81a14:	00081561 	.word	0x00081561
   81a18:	000814d5 	.word	0x000814d5
   81a1c:	2007018c 	.word	0x2007018c
   81a20:	00081655 	.word	0x00081655
   81a24:	00081505 	.word	0x00081505

00081a28 <DD_TS1_CHIP_SELECT>:


/************************************************************************/
/* ISOLATER 1 CHIP MULTIPLEXER PB3, PB4 PINS                                                                     */
/************************************************************************/
void DD_TS1_CHIP_SELECT()   {
   81a28:	b480      	push	{r7}
   81a2a:	af00      	add	r7, sp, #0
	(PIOB->PIO_CODR) = ((0x1u << 3) | (0x1u << 4)); 
   81a2c:	4b03      	ldr	r3, [pc, #12]	; (81a3c <DD_TS1_CHIP_SELECT+0x14>)
   81a2e:	2218      	movs	r2, #24
   81a30:	635a      	str	r2, [r3, #52]	; 0x34
}
   81a32:	bf00      	nop
   81a34:	46bd      	mov	sp, r7
   81a36:	bc80      	pop	{r7}
   81a38:	4770      	bx	lr
   81a3a:	bf00      	nop
   81a3c:	400e1000 	.word	0x400e1000

00081a40 <DD_TS2_CHIP_SELECT>:

void DD_TS2_CHIP_SELECT()   {
   81a40:	b480      	push	{r7}
   81a42:	af00      	add	r7, sp, #0
	    PIOB->PIO_SODR = (0x1u << 3) ;
   81a44:	4b04      	ldr	r3, [pc, #16]	; (81a58 <DD_TS2_CHIP_SELECT+0x18>)
   81a46:	2208      	movs	r2, #8
   81a48:	631a      	str	r2, [r3, #48]	; 0x30
	    PIOB->PIO_CODR = (0x1u << 4) ;
   81a4a:	4b03      	ldr	r3, [pc, #12]	; (81a58 <DD_TS2_CHIP_SELECT+0x18>)
   81a4c:	2210      	movs	r2, #16
   81a4e:	635a      	str	r2, [r3, #52]	; 0x34
}
   81a50:	bf00      	nop
   81a52:	46bd      	mov	sp, r7
   81a54:	bc80      	pop	{r7}
   81a56:	4770      	bx	lr
   81a58:	400e1000 	.word	0x400e1000

00081a5c <DD_CS1_TS_CHIP_SELECT>:



void DD_CS1_TS_CHIP_SELECT()   {
   81a5c:	b480      	push	{r7}
   81a5e:	af00      	add	r7, sp, #0
	
	  (PIOB->PIO_CODR) = (0x1u << 3); 
   81a60:	4b04      	ldr	r3, [pc, #16]	; (81a74 <DD_CS1_TS_CHIP_SELECT+0x18>)
   81a62:	2208      	movs	r2, #8
   81a64:	635a      	str	r2, [r3, #52]	; 0x34
	  (PIOB->PIO_SODR) = (0x1u << 4);
   81a66:	4b03      	ldr	r3, [pc, #12]	; (81a74 <DD_CS1_TS_CHIP_SELECT+0x18>)
   81a68:	2210      	movs	r2, #16
   81a6a:	631a      	str	r2, [r3, #48]	; 0x30
}
   81a6c:	bf00      	nop
   81a6e:	46bd      	mov	sp, r7
   81a70:	bc80      	pop	{r7}
   81a72:	4770      	bx	lr
   81a74:	400e1000 	.word	0x400e1000

00081a78 <DD_CS2_TS_CHIP_SELECT>:

void DD_CS2_TS_CHIP_SELECT ()   {	
   81a78:	b480      	push	{r7}
   81a7a:	af00      	add	r7, sp, #0

	 (PIOB->PIO_SODR) = ((0x1u << 3) | (0x1u << 4));
   81a7c:	4b03      	ldr	r3, [pc, #12]	; (81a8c <DD_CS2_TS_CHIP_SELECT+0x14>)
   81a7e:	2218      	movs	r2, #24
   81a80:	631a      	str	r2, [r3, #48]	; 0x30

}
   81a82:	bf00      	nop
   81a84:	46bd      	mov	sp, r7
   81a86:	bc80      	pop	{r7}
   81a88:	4770      	bx	lr
   81a8a:	bf00      	nop
   81a8c:	400e1000 	.word	0x400e1000

00081a90 <DD_CS3_TS_CHIP_SELECT>:

/************************************************************************/
/* ISOLATER 2 CHIP MULTIPLEXER PB5, PB6 PINS                                                                     */
/************************************************************************/

void DD_CS3_TS_CHIP_SELECT()   {
   81a90:	b480      	push	{r7}
   81a92:	af00      	add	r7, sp, #0
	(PIOB->PIO_CODR) = ((0x1u << 5) | (0x1u << 6));
   81a94:	4b03      	ldr	r3, [pc, #12]	; (81aa4 <DD_CS3_TS_CHIP_SELECT+0x14>)
   81a96:	2260      	movs	r2, #96	; 0x60
   81a98:	635a      	str	r2, [r3, #52]	; 0x34
}
   81a9a:	bf00      	nop
   81a9c:	46bd      	mov	sp, r7
   81a9e:	bc80      	pop	{r7}
   81aa0:	4770      	bx	lr
   81aa2:	bf00      	nop
   81aa4:	400e1000 	.word	0x400e1000

00081aa8 <DD_TS3_CHIP_SELECT>:

void DD_TS3_CHIP_SELECT()   {
   81aa8:	b480      	push	{r7}
   81aaa:	af00      	add	r7, sp, #0
	PIOB->PIO_SODR = (0x1u << 5) ;
   81aac:	4b04      	ldr	r3, [pc, #16]	; (81ac0 <DD_TS3_CHIP_SELECT+0x18>)
   81aae:	2220      	movs	r2, #32
   81ab0:	631a      	str	r2, [r3, #48]	; 0x30
PIOB->PIO_CODR = (0x1u << 6) ;
   81ab2:	4b03      	ldr	r3, [pc, #12]	; (81ac0 <DD_TS3_CHIP_SELECT+0x18>)
   81ab4:	2240      	movs	r2, #64	; 0x40
   81ab6:	635a      	str	r2, [r3, #52]	; 0x34
}
   81ab8:	bf00      	nop
   81aba:	46bd      	mov	sp, r7
   81abc:	bc80      	pop	{r7}
   81abe:	4770      	bx	lr
   81ac0:	400e1000 	.word	0x400e1000

00081ac4 <DD_TS_MUX_CHIP_SELECT>:

void  DD_TS_MUX_CHIP_SELECT()   {
   81ac4:	b480      	push	{r7}
   81ac6:	af00      	add	r7, sp, #0
		
	PIOB->PIO_CODR = (0x1u << 5);
   81ac8:	4b04      	ldr	r3, [pc, #16]	; (81adc <DD_TS_MUX_CHIP_SELECT+0x18>)
   81aca:	2220      	movs	r2, #32
   81acc:	635a      	str	r2, [r3, #52]	; 0x34
    PIOB->PIO_SODR = (0x1u << 6);	
   81ace:	4b03      	ldr	r3, [pc, #12]	; (81adc <DD_TS_MUX_CHIP_SELECT+0x18>)
   81ad0:	2240      	movs	r2, #64	; 0x40
   81ad2:	631a      	str	r2, [r3, #48]	; 0x30
}
   81ad4:	bf00      	nop
   81ad6:	46bd      	mov	sp, r7
   81ad8:	bc80      	pop	{r7}
   81ada:	4770      	bx	lr
   81adc:	400e1000 	.word	0x400e1000

00081ae0 <DD_CON_ADC_CHIP_SELECT>:
void DD_CONDUCTIVITY_DIGITAL_POT_CS()   {
	
	PIOB->PIO_CODR = ((0x1u << 7) | (0x1u << 8));	
}

void DD_CON_ADC_CHIP_SELECT()   {	
   81ae0:	b480      	push	{r7}
   81ae2:	af00      	add	r7, sp, #0
	 PIOB->PIO_SODR = (0x1u << 7) ;
   81ae4:	4b05      	ldr	r3, [pc, #20]	; (81afc <DD_CON_ADC_CHIP_SELECT+0x1c>)
   81ae6:	2280      	movs	r2, #128	; 0x80
   81ae8:	631a      	str	r2, [r3, #48]	; 0x30
	 PIOB->PIO_CODR = (0x1u << 8);	
   81aea:	4b04      	ldr	r3, [pc, #16]	; (81afc <DD_CON_ADC_CHIP_SELECT+0x1c>)
   81aec:	f44f 7280 	mov.w	r2, #256	; 0x100
   81af0:	635a      	str	r2, [r3, #52]	; 0x34
}
   81af2:	bf00      	nop
   81af4:	46bd      	mov	sp, r7
   81af6:	bc80      	pop	{r7}
   81af8:	4770      	bx	lr
   81afa:	bf00      	nop
   81afc:	400e1000 	.word	0x400e1000

00081b00 <DD_SPI_PCS_DECODER_ACTIVE>:

/************************************************************************/
/*                                                                      */
/************************************************************************/

void DD_SPI_PCS_DECODER_ACTIVE()   {
   81b00:	b480      	push	{r7}
   81b02:	af00      	add	r7, sp, #0
	PIOB->PIO_CODR =( (0x1u << 0) | (0x1u << 1) );
   81b04:	4b04      	ldr	r3, [pc, #16]	; (81b18 <DD_SPI_PCS_DECODER_ACTIVE+0x18>)
   81b06:	2203      	movs	r2, #3
   81b08:	635a      	str	r2, [r3, #52]	; 0x34
	PIOB->PIO_SODR = (0x1u << 2) ;	
   81b0a:	4b03      	ldr	r3, [pc, #12]	; (81b18 <DD_SPI_PCS_DECODER_ACTIVE+0x18>)
   81b0c:	2204      	movs	r2, #4
   81b0e:	631a      	str	r2, [r3, #48]	; 0x30
}
   81b10:	bf00      	nop
   81b12:	46bd      	mov	sp, r7
   81b14:	bc80      	pop	{r7}
   81b16:	4770      	bx	lr
   81b18:	400e1000 	.word	0x400e1000

00081b1c <DD_SPI_PCS_DECODER_DEACTIVE>:

void DD_SPI_PCS_DECODER_DEACTIVE()   {
   81b1c:	b480      	push	{r7}
   81b1e:	af00      	add	r7, sp, #0
	PIOB->PIO_SODR =( (0x1u << 0) | (0x1u << 1) );
   81b20:	4b04      	ldr	r3, [pc, #16]	; (81b34 <DD_SPI_PCS_DECODER_DEACTIVE+0x18>)
   81b22:	2203      	movs	r2, #3
   81b24:	631a      	str	r2, [r3, #48]	; 0x30
	PIOB->PIO_CODR = (0x1u << 2) ;
   81b26:	4b03      	ldr	r3, [pc, #12]	; (81b34 <DD_SPI_PCS_DECODER_DEACTIVE+0x18>)
   81b28:	2204      	movs	r2, #4
   81b2a:	635a      	str	r2, [r3, #52]	; 0x34
}
   81b2c:	bf00      	nop
   81b2e:	46bd      	mov	sp, r7
   81b30:	bc80      	pop	{r7}
   81b32:	4770      	bx	lr
   81b34:	400e1000 	.word	0x400e1000

00081b38 <DD_DISABLE_ISOLATORS_MISO_PIN>:

 void DD_DISABLE_ISOLATORS_MISO_PIN(){
   81b38:	b580      	push	{r7, lr}
   81b3a:	af00      	add	r7, sp, #0
	
	dd_SET_OUTPUT_DATA(PIOA, SPI0_MISO_ISOLATER_1_DISABLE_PIN);
   81b3c:	2106      	movs	r1, #6
   81b3e:	4808      	ldr	r0, [pc, #32]	; (81b60 <DD_DISABLE_ISOLATORS_MISO_PIN+0x28>)
   81b40:	4b08      	ldr	r3, [pc, #32]	; (81b64 <DD_DISABLE_ISOLATORS_MISO_PIN+0x2c>)
   81b42:	4798      	blx	r3
	dd_SET_OUTPUT_DATA(PIOA, SPI0_MISO_ISOLATER_2_DISABLE_PIN);
   81b44:	2105      	movs	r1, #5
   81b46:	4806      	ldr	r0, [pc, #24]	; (81b60 <DD_DISABLE_ISOLATORS_MISO_PIN+0x28>)
   81b48:	4b06      	ldr	r3, [pc, #24]	; (81b64 <DD_DISABLE_ISOLATORS_MISO_PIN+0x2c>)
   81b4a:	4798      	blx	r3
	dd_SET_OUTPUT_DATA(PIOA, SPI0_MISO_ISOLATER_3_DISABLE_PIN);
   81b4c:	2104      	movs	r1, #4
   81b4e:	4804      	ldr	r0, [pc, #16]	; (81b60 <DD_DISABLE_ISOLATORS_MISO_PIN+0x28>)
   81b50:	4b04      	ldr	r3, [pc, #16]	; (81b64 <DD_DISABLE_ISOLATORS_MISO_PIN+0x2c>)
   81b52:	4798      	blx	r3
	dd_SET_OUTPUT_DATA(PIOA, SPI0_MISO_ISOLATER_4_DISABLE_PIN);
   81b54:	2103      	movs	r1, #3
   81b56:	4802      	ldr	r0, [pc, #8]	; (81b60 <DD_DISABLE_ISOLATORS_MISO_PIN+0x28>)
   81b58:	4b02      	ldr	r3, [pc, #8]	; (81b64 <DD_DISABLE_ISOLATORS_MISO_PIN+0x2c>)
   81b5a:	4798      	blx	r3
}
   81b5c:	bf00      	nop
   81b5e:	bd80      	pop	{r7, pc}
   81b60:	400e0e00 	.word	0x400e0e00
   81b64:	0008110d 	.word	0x0008110d

00081b68 <DD_ENABLE_ISOLATOR_1>:

void DD_ENABLE_ISOLATOR_1(){	
   81b68:	b580      	push	{r7, lr}
   81b6a:	af00      	add	r7, sp, #0
	dd_CLEAR_OUTPUT_DATA(PIOA, SPI0_MISO_ISOLATER_1_DISABLE_PIN);
   81b6c:	2106      	movs	r1, #6
   81b6e:	4808      	ldr	r0, [pc, #32]	; (81b90 <DD_ENABLE_ISOLATOR_1+0x28>)
   81b70:	4b08      	ldr	r3, [pc, #32]	; (81b94 <DD_ENABLE_ISOLATOR_1+0x2c>)
   81b72:	4798      	blx	r3
	dd_SET_OUTPUT_DATA(PIOA, SPI0_MISO_ISOLATER_2_DISABLE_PIN);
   81b74:	2105      	movs	r1, #5
   81b76:	4806      	ldr	r0, [pc, #24]	; (81b90 <DD_ENABLE_ISOLATOR_1+0x28>)
   81b78:	4b07      	ldr	r3, [pc, #28]	; (81b98 <DD_ENABLE_ISOLATOR_1+0x30>)
   81b7a:	4798      	blx	r3
	dd_SET_OUTPUT_DATA(PIOA, SPI0_MISO_ISOLATER_3_DISABLE_PIN);
   81b7c:	2104      	movs	r1, #4
   81b7e:	4804      	ldr	r0, [pc, #16]	; (81b90 <DD_ENABLE_ISOLATOR_1+0x28>)
   81b80:	4b05      	ldr	r3, [pc, #20]	; (81b98 <DD_ENABLE_ISOLATOR_1+0x30>)
   81b82:	4798      	blx	r3
	dd_SET_OUTPUT_DATA(PIOA, SPI0_MISO_ISOLATER_4_DISABLE_PIN);
   81b84:	2103      	movs	r1, #3
   81b86:	4802      	ldr	r0, [pc, #8]	; (81b90 <DD_ENABLE_ISOLATOR_1+0x28>)
   81b88:	4b03      	ldr	r3, [pc, #12]	; (81b98 <DD_ENABLE_ISOLATOR_1+0x30>)
   81b8a:	4798      	blx	r3
}
   81b8c:	bf00      	nop
   81b8e:	bd80      	pop	{r7, pc}
   81b90:	400e0e00 	.word	0x400e0e00
   81b94:	00081131 	.word	0x00081131
   81b98:	0008110d 	.word	0x0008110d

00081b9c <DD_ENABLE_ISOLATOR_2>:

void DD_ENABLE_ISOLATOR_2(){
   81b9c:	b580      	push	{r7, lr}
   81b9e:	af00      	add	r7, sp, #0
	
	dd_SET_OUTPUT_DATA(PIOA, SPI0_MISO_ISOLATER_1_DISABLE_PIN);
   81ba0:	2106      	movs	r1, #6
   81ba2:	4808      	ldr	r0, [pc, #32]	; (81bc4 <DD_ENABLE_ISOLATOR_2+0x28>)
   81ba4:	4b08      	ldr	r3, [pc, #32]	; (81bc8 <DD_ENABLE_ISOLATOR_2+0x2c>)
   81ba6:	4798      	blx	r3
	dd_CLEAR_OUTPUT_DATA(PIOA, SPI0_MISO_ISOLATER_2_DISABLE_PIN);
   81ba8:	2105      	movs	r1, #5
   81baa:	4806      	ldr	r0, [pc, #24]	; (81bc4 <DD_ENABLE_ISOLATOR_2+0x28>)
   81bac:	4b07      	ldr	r3, [pc, #28]	; (81bcc <DD_ENABLE_ISOLATOR_2+0x30>)
   81bae:	4798      	blx	r3
	dd_SET_OUTPUT_DATA(PIOA, SPI0_MISO_ISOLATER_3_DISABLE_PIN);
   81bb0:	2104      	movs	r1, #4
   81bb2:	4804      	ldr	r0, [pc, #16]	; (81bc4 <DD_ENABLE_ISOLATOR_2+0x28>)
   81bb4:	4b04      	ldr	r3, [pc, #16]	; (81bc8 <DD_ENABLE_ISOLATOR_2+0x2c>)
   81bb6:	4798      	blx	r3
	dd_SET_OUTPUT_DATA(PIOA, SPI0_MISO_ISOLATER_4_DISABLE_PIN);
   81bb8:	2103      	movs	r1, #3
   81bba:	4802      	ldr	r0, [pc, #8]	; (81bc4 <DD_ENABLE_ISOLATOR_2+0x28>)
   81bbc:	4b02      	ldr	r3, [pc, #8]	; (81bc8 <DD_ENABLE_ISOLATOR_2+0x2c>)
   81bbe:	4798      	blx	r3
}
   81bc0:	bf00      	nop
   81bc2:	bd80      	pop	{r7, pc}
   81bc4:	400e0e00 	.word	0x400e0e00
   81bc8:	0008110d 	.word	0x0008110d
   81bcc:	00081131 	.word	0x00081131

00081bd0 <DD_ENABLE_ISOLATOR_3>:

void DD_ENABLE_ISOLATOR_3(){
   81bd0:	b580      	push	{r7, lr}
   81bd2:	af00      	add	r7, sp, #0
	
	dd_SET_OUTPUT_DATA(PIOA, SPI0_MISO_ISOLATER_1_DISABLE_PIN);
   81bd4:	2106      	movs	r1, #6
   81bd6:	4808      	ldr	r0, [pc, #32]	; (81bf8 <DD_ENABLE_ISOLATOR_3+0x28>)
   81bd8:	4b08      	ldr	r3, [pc, #32]	; (81bfc <DD_ENABLE_ISOLATOR_3+0x2c>)
   81bda:	4798      	blx	r3
	dd_SET_OUTPUT_DATA(PIOA, SPI0_MISO_ISOLATER_2_DISABLE_PIN);
   81bdc:	2105      	movs	r1, #5
   81bde:	4806      	ldr	r0, [pc, #24]	; (81bf8 <DD_ENABLE_ISOLATOR_3+0x28>)
   81be0:	4b06      	ldr	r3, [pc, #24]	; (81bfc <DD_ENABLE_ISOLATOR_3+0x2c>)
   81be2:	4798      	blx	r3
	dd_CLEAR_OUTPUT_DATA(PIOA, SPI0_MISO_ISOLATER_3_DISABLE_PIN);
   81be4:	2104      	movs	r1, #4
   81be6:	4804      	ldr	r0, [pc, #16]	; (81bf8 <DD_ENABLE_ISOLATOR_3+0x28>)
   81be8:	4b05      	ldr	r3, [pc, #20]	; (81c00 <DD_ENABLE_ISOLATOR_3+0x30>)
   81bea:	4798      	blx	r3
	dd_SET_OUTPUT_DATA(PIOA, SPI0_MISO_ISOLATER_4_DISABLE_PIN);
   81bec:	2103      	movs	r1, #3
   81bee:	4802      	ldr	r0, [pc, #8]	; (81bf8 <DD_ENABLE_ISOLATOR_3+0x28>)
   81bf0:	4b02      	ldr	r3, [pc, #8]	; (81bfc <DD_ENABLE_ISOLATOR_3+0x2c>)
   81bf2:	4798      	blx	r3
}
   81bf4:	bf00      	nop
   81bf6:	bd80      	pop	{r7, pc}
   81bf8:	400e0e00 	.word	0x400e0e00
   81bfc:	0008110d 	.word	0x0008110d
   81c00:	00081131 	.word	0x00081131

00081c04 <DD_INIT_ALL_SENSORS>:
}




uint16_t DD_INIT_ALL_SENSORS()   {
   81c04:	b580      	push	{r7, lr}
   81c06:	b084      	sub	sp, #16
   81c08:	af00      	add	r7, sp, #0
	 DD_SPI_PCS_DECODER_DEACTIVE();
   81c0a:	4b2c      	ldr	r3, [pc, #176]	; (81cbc <DD_INIT_ALL_SENSORS+0xb8>)
   81c0c:	4798      	blx	r3
	 DD_DISABLE_ISOLATORS_MISO_PIN();
   81c0e:	4b2c      	ldr	r3, [pc, #176]	; (81cc0 <DD_INIT_ALL_SENSORS+0xbc>)
   81c10:	4798      	blx	r3
	 for(int i=0; i<10000;i++) {}
   81c12:	2300      	movs	r3, #0
   81c14:	60fb      	str	r3, [r7, #12]
   81c16:	e002      	b.n	81c1e <DD_INIT_ALL_SENSORS+0x1a>
   81c18:	68fb      	ldr	r3, [r7, #12]
   81c1a:	3301      	adds	r3, #1
   81c1c:	60fb      	str	r3, [r7, #12]
   81c1e:	68fb      	ldr	r3, [r7, #12]
   81c20:	f242 720f 	movw	r2, #9999	; 0x270f
   81c24:	4293      	cmp	r3, r2
   81c26:	ddf7      	ble.n	81c18 <DD_INIT_ALL_SENSORS+0x14>
	 	 
 	  DD_PS1_INIT();
   81c28:	4b26      	ldr	r3, [pc, #152]	; (81cc4 <DD_INIT_ALL_SENSORS+0xc0>)
   81c2a:	4798      	blx	r3
	  DD_PS2_INIT();
   81c2c:	4b26      	ldr	r3, [pc, #152]	; (81cc8 <DD_INIT_ALL_SENSORS+0xc4>)
   81c2e:	4798      	blx	r3
	  DD_PS3_INIT();
   81c30:	4b26      	ldr	r3, [pc, #152]	; (81ccc <DD_INIT_ALL_SENSORS+0xc8>)
   81c32:	4798      	blx	r3

/************************************************************************/
/* ISOLATOR 1 INITIALIZATION DONE HERE                                                                     
/************************************************************************/
	DD_SPI_PCS_DECODER_ACTIVE();
   81c34:	4b26      	ldr	r3, [pc, #152]	; (81cd0 <DD_INIT_ALL_SENSORS+0xcc>)
   81c36:	4798      	blx	r3
    DD_DISABLE_ISOLATORS_MISO_PIN();
   81c38:	4b21      	ldr	r3, [pc, #132]	; (81cc0 <DD_INIT_ALL_SENSORS+0xbc>)
   81c3a:	4798      	blx	r3
	DD_ENABLE_ISOLATOR_1();	
   81c3c:	4b25      	ldr	r3, [pc, #148]	; (81cd4 <DD_INIT_ALL_SENSORS+0xd0>)
   81c3e:	4798      	blx	r3
	 for(int i=0; i < 1000;i++) {}
   81c40:	2300      	movs	r3, #0
   81c42:	60bb      	str	r3, [r7, #8]
   81c44:	e002      	b.n	81c4c <DD_INIT_ALL_SENSORS+0x48>
   81c46:	68bb      	ldr	r3, [r7, #8]
   81c48:	3301      	adds	r3, #1
   81c4a:	60bb      	str	r3, [r7, #8]
   81c4c:	68bb      	ldr	r3, [r7, #8]
   81c4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   81c52:	dbf8      	blt.n	81c46 <DD_INIT_ALL_SENSORS+0x42>

	DD_TS1_INIT();
   81c54:	4b20      	ldr	r3, [pc, #128]	; (81cd8 <DD_INIT_ALL_SENSORS+0xd4>)
   81c56:	4798      	blx	r3
    DD_TS2_INIT();	
   81c58:	4b20      	ldr	r3, [pc, #128]	; (81cdc <DD_INIT_ALL_SENSORS+0xd8>)
   81c5a:	4798      	blx	r3
    DD_CS1_TS_INIT();
   81c5c:	4b20      	ldr	r3, [pc, #128]	; (81ce0 <DD_INIT_ALL_SENSORS+0xdc>)
   81c5e:	4798      	blx	r3
    DD_CS2_TS_INIT();
   81c60:	4b20      	ldr	r3, [pc, #128]	; (81ce4 <DD_INIT_ALL_SENSORS+0xe0>)
   81c62:	4798      	blx	r3
	
    DD_SPI_PCS_DECODER_DEACTIVE();
   81c64:	4b15      	ldr	r3, [pc, #84]	; (81cbc <DD_INIT_ALL_SENSORS+0xb8>)
   81c66:	4798      	blx	r3
	DD_DISABLE_ISOLATORS_MISO_PIN();	
   81c68:	4b15      	ldr	r3, [pc, #84]	; (81cc0 <DD_INIT_ALL_SENSORS+0xbc>)
   81c6a:	4798      	blx	r3
/************************************************************************/
/* isolator 2 DEVICE INITIALIZATION DONE HERE                                                                     */
/************************************************************************/
 	
 	DD_SPI_PCS_DECODER_ACTIVE();	
   81c6c:	4b18      	ldr	r3, [pc, #96]	; (81cd0 <DD_INIT_ALL_SENSORS+0xcc>)
   81c6e:	4798      	blx	r3
	DD_DISABLE_ISOLATORS_MISO_PIN();
   81c70:	4b13      	ldr	r3, [pc, #76]	; (81cc0 <DD_INIT_ALL_SENSORS+0xbc>)
   81c72:	4798      	blx	r3
	DD_ENABLE_ISOLATOR_2();	
   81c74:	4b1c      	ldr	r3, [pc, #112]	; (81ce8 <DD_INIT_ALL_SENSORS+0xe4>)
   81c76:	4798      	blx	r3
	for(int i=0; i<1000;i++) {}
   81c78:	2300      	movs	r3, #0
   81c7a:	607b      	str	r3, [r7, #4]
   81c7c:	e002      	b.n	81c84 <DD_INIT_ALL_SENSORS+0x80>
   81c7e:	687b      	ldr	r3, [r7, #4]
   81c80:	3301      	adds	r3, #1
   81c82:	607b      	str	r3, [r7, #4]
   81c84:	687b      	ldr	r3, [r7, #4]
   81c86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   81c8a:	dbf8      	blt.n	81c7e <DD_INIT_ALL_SENSORS+0x7a>
	
	DD_CS3_TS_INIT();
   81c8c:	4b17      	ldr	r3, [pc, #92]	; (81cec <DD_INIT_ALL_SENSORS+0xe8>)
   81c8e:	4798      	blx	r3
	DD_TS3_INIT(); 	
   81c90:	4b17      	ldr	r3, [pc, #92]	; (81cf0 <DD_INIT_ALL_SENSORS+0xec>)
   81c92:	4798      	blx	r3
// // 	DD_SPARE_TS_CHIP_SELECT();
// 	
	DD_SPI_PCS_DECODER_DEACTIVE();
   81c94:	4b09      	ldr	r3, [pc, #36]	; (81cbc <DD_INIT_ALL_SENSORS+0xb8>)
   81c96:	4798      	blx	r3
 	DD_DISABLE_ISOLATORS_MISO_PIN();
   81c98:	4b09      	ldr	r3, [pc, #36]	; (81cc0 <DD_INIT_ALL_SENSORS+0xbc>)
   81c9a:	4798      	blx	r3
	 for(int i=0; i<1000;i++) {}
   81c9c:	2300      	movs	r3, #0
   81c9e:	603b      	str	r3, [r7, #0]
   81ca0:	e002      	b.n	81ca8 <DD_INIT_ALL_SENSORS+0xa4>
   81ca2:	683b      	ldr	r3, [r7, #0]
   81ca4:	3301      	adds	r3, #1
   81ca6:	603b      	str	r3, [r7, #0]
   81ca8:	683b      	ldr	r3, [r7, #0]
   81caa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   81cae:	dbf8      	blt.n	81ca2 <DD_INIT_ALL_SENSORS+0x9e>
	  command_data_array[0] = DAC2_GAIN_X10 | CS3_GAIN_X100  ;
	  DD_AN_MUX_CHIPSEL_3();
	  dd_spi_set_peripheral_chip_select_value(ISOLTR_4_CS_ID);
	  dd_spi_master_transfer(&command_data_array, 1, ISOLTR_4_CS_ID );	 */
	 
	 return 0;
   81cb0:	2300      	movs	r3, #0
}
   81cb2:	4618      	mov	r0, r3
   81cb4:	3710      	adds	r7, #16
   81cb6:	46bd      	mov	sp, r7
   81cb8:	bd80      	pop	{r7, pc}
   81cba:	bf00      	nop
   81cbc:	00081b1d 	.word	0x00081b1d
   81cc0:	00081b39 	.word	0x00081b39
   81cc4:	000811ed 	.word	0x000811ed
   81cc8:	000812b5 	.word	0x000812b5
   81ccc:	0008137d 	.word	0x0008137d
   81cd0:	00081b01 	.word	0x00081b01
   81cd4:	00081b69 	.word	0x00081b69
   81cd8:	000828b9 	.word	0x000828b9
   81cdc:	0008292d 	.word	0x0008292d
   81ce0:	00080821 	.word	0x00080821
   81ce4:	00080895 	.word	0x00080895
   81ce8:	00081b9d 	.word	0x00081b9d
   81cec:	00080909 	.word	0x00080909
   81cf0:	000829a5 	.word	0x000829a5

00081cf4 <DD_READ_SENSORS>:



sensor_status_t DD_READ_SENSORS(sv_sensortype ID_SENSOR, uint16_t *sensor_status )   {
   81cf4:	b580      	push	{r7, lr}
   81cf6:	b096      	sub	sp, #88	; 0x58
   81cf8:	af00      	add	r7, sp, #0
   81cfa:	4603      	mov	r3, r0
   81cfc:	6039      	str	r1, [r7, #0]
   81cfe:	71fb      	strb	r3, [r7, #7]
	uint16_t  work_reg ;
	*sensor_status=0;
   81d00:	683b      	ldr	r3, [r7, #0]
   81d02:	2200      	movs	r2, #0
   81d04:	801a      	strh	r2, [r3, #0]
	uint8_t conductivity_mux_reg_1, conductivity_mux_reg_2, conductivity_mux_reg_3;
	uint16_t CONDUCTIVITY_SENSOR_RMS_VOLTAGE;
	uint32_t timeout = SENSOR_TIMEOUT;
   81d06:	f643 2398 	movw	r3, #15000	; 0x3a98
   81d0a:	657b      	str	r3, [r7, #84]	; 0x54
	
	switch(ID_SENSOR)
   81d0c:	79fb      	ldrb	r3, [r7, #7]
   81d0e:	3b01      	subs	r3, #1
   81d10:	2b11      	cmp	r3, #17
   81d12:	f200 85ba 	bhi.w	8288a <DD_READ_SENSORS+0xb96>
   81d16:	a201      	add	r2, pc, #4	; (adr r2, 81d1c <DD_READ_SENSORS+0x28>)
   81d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81d1c:	00081d65 	.word	0x00081d65
   81d20:	00081ddb 	.word	0x00081ddb
   81d24:	00081e49 	.word	0x00081e49
   81d28:	00081eb5 	.word	0x00081eb5
   81d2c:	00081ee3 	.word	0x00081ee3
   81d30:	00081f5d 	.word	0x00081f5d
   81d34:	00082011 	.word	0x00082011
   81d38:	00082087 	.word	0x00082087
   81d3c:	000820f9 	.word	0x000820f9
   81d40:	0008216b 	.word	0x0008216b
   81d44:	000821dd 	.word	0x000821dd
   81d48:	00082317 	.word	0x00082317
   81d4c:	0008240f 	.word	0x0008240f
   81d50:	0008251b 	.word	0x0008251b
   81d54:	0008288b 	.word	0x0008288b
   81d58:	0008264b 	.word	0x0008264b
   81d5c:	0008278b 	.word	0x0008278b
   81d60:	0008288b 	.word	0x0008288b
	{
		case SV_PS1_ID:
		   dd_SET_OUTPUT_DATA(PIOC, PD_PS1_SEN_PIN); 
   81d64:	2108      	movs	r1, #8
   81d66:	489c      	ldr	r0, [pc, #624]	; (81fd8 <DD_READ_SENSORS+0x2e4>)
   81d68:	4b9c      	ldr	r3, [pc, #624]	; (81fdc <DD_READ_SENSORS+0x2e8>)
   81d6a:	4798      	blx	r3
		   DD_DISABLE_ISOLATORS_MISO_PIN();
   81d6c:	4b9c      	ldr	r3, [pc, #624]	; (81fe0 <DD_READ_SENSORS+0x2ec>)
   81d6e:	4798      	blx	r3
		   command_data_array[0] = ADS1120_RDATA;
   81d70:	4b9c      	ldr	r3, [pc, #624]	; (81fe4 <DD_READ_SENSORS+0x2f0>)
   81d72:	2210      	movs	r2, #16
   81d74:	701a      	strb	r2, [r3, #0]
		   command_data_array[1] = 0;
   81d76:	4b9b      	ldr	r3, [pc, #620]	; (81fe4 <DD_READ_SENSORS+0x2f0>)
   81d78:	2200      	movs	r2, #0
   81d7a:	705a      	strb	r2, [r3, #1]
		   command_data_array[2] = 0;
   81d7c:	4b99      	ldr	r3, [pc, #612]	; (81fe4 <DD_READ_SENSORS+0x2f0>)
   81d7e:	2200      	movs	r2, #0
   81d80:	709a      	strb	r2, [r3, #2]
		   while (PS1_DRDY_N_status) {
   81d82:	e007      	b.n	81d94 <DD_READ_SENSORS+0xa0>
			   if (!timeout--) {
   81d84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   81d86:	1e5a      	subs	r2, r3, #1
   81d88:	657a      	str	r2, [r7, #84]	; 0x54
   81d8a:	2b00      	cmp	r3, #0
   81d8c:	d102      	bne.n	81d94 <DD_READ_SENSORS+0xa0>
				   return SENSOR_NOT_READY;
   81d8e:	2301      	movs	r3, #1
   81d90:	f000 bd7c 	b.w	8288c <DD_READ_SENSORS+0xb98>
		   dd_SET_OUTPUT_DATA(PIOC, PD_PS1_SEN_PIN); 
		   DD_DISABLE_ISOLATORS_MISO_PIN();
		   command_data_array[0] = ADS1120_RDATA;
		   command_data_array[1] = 0;
		   command_data_array[2] = 0;
		   while (PS1_DRDY_N_status) {
   81d94:	4b94      	ldr	r3, [pc, #592]	; (81fe8 <DD_READ_SENSORS+0x2f4>)
   81d96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   81d98:	089b      	lsrs	r3, r3, #2
   81d9a:	f003 0301 	and.w	r3, r3, #1
   81d9e:	2b00      	cmp	r3, #0
   81da0:	d1f0      	bne.n	81d84 <DD_READ_SENSORS+0x90>
			   if (!timeout--) {
				   return SENSOR_NOT_READY;
			   }
		   }		   
		   DD_SPI_PCS_DECODER_ACTIVE();	   		   		   
   81da2:	4b92      	ldr	r3, [pc, #584]	; (81fec <DD_READ_SENSORS+0x2f8>)
   81da4:	4798      	blx	r3
		   dd_spi_set_peripheral_chip_select_value(PS1_CS_N_ID);
   81da6:	2005      	movs	r0, #5
   81da8:	4b91      	ldr	r3, [pc, #580]	; (81ff0 <DD_READ_SENSORS+0x2fc>)
   81daa:	4798      	blx	r3
		  // for (int i = 0; i <100 ; i++);	
		   dd_spi_master_read(&command_data_array, 3, PS1_CS_N_ID);
   81dac:	2205      	movs	r2, #5
   81dae:	2103      	movs	r1, #3
   81db0:	488c      	ldr	r0, [pc, #560]	; (81fe4 <DD_READ_SENSORS+0x2f0>)
   81db2:	4b90      	ldr	r3, [pc, #576]	; (81ff4 <DD_READ_SENSORS+0x300>)
   81db4:	4798      	blx	r3
		   spi_data.bytearray[1]=command_data_array[1];
   81db6:	4b8b      	ldr	r3, [pc, #556]	; (81fe4 <DD_READ_SENSORS+0x2f0>)
   81db8:	785a      	ldrb	r2, [r3, #1]
   81dba:	4b8f      	ldr	r3, [pc, #572]	; (81ff8 <DD_READ_SENSORS+0x304>)
   81dbc:	705a      	strb	r2, [r3, #1]
		   spi_data.bytearray[0]=command_data_array[2];
   81dbe:	4b89      	ldr	r3, [pc, #548]	; (81fe4 <DD_READ_SENSORS+0x2f0>)
   81dc0:	789a      	ldrb	r2, [r3, #2]
   81dc2:	4b8d      	ldr	r3, [pc, #564]	; (81ff8 <DD_READ_SENSORS+0x304>)
   81dc4:	701a      	strb	r2, [r3, #0]
		   *sensor_status = spi_data.Twobyte;
   81dc6:	4b8c      	ldr	r3, [pc, #560]	; (81ff8 <DD_READ_SENSORS+0x304>)
   81dc8:	881b      	ldrh	r3, [r3, #0]
   81dca:	b29a      	uxth	r2, r3
   81dcc:	683b      	ldr	r3, [r7, #0]
   81dce:	801a      	strh	r2, [r3, #0]
		   DD_DISABLE_ISOLATORS_MISO_PIN();
   81dd0:	4b83      	ldr	r3, [pc, #524]	; (81fe0 <DD_READ_SENSORS+0x2ec>)
   81dd2:	4798      	blx	r3
	       return SENSOR_READ_OK;		  
   81dd4:	2300      	movs	r3, #0
   81dd6:	f000 bd59 	b.w	8288c <DD_READ_SENSORS+0xb98>
		break;
				
		case SV_PS2_ID:
		   DD_DISABLE_ISOLATORS_MISO_PIN();
   81dda:	4b81      	ldr	r3, [pc, #516]	; (81fe0 <DD_READ_SENSORS+0x2ec>)
   81ddc:	4798      	blx	r3
		   command_data_array[0] = ADS1120_RDATA;
   81dde:	4b81      	ldr	r3, [pc, #516]	; (81fe4 <DD_READ_SENSORS+0x2f0>)
   81de0:	2210      	movs	r2, #16
   81de2:	701a      	strb	r2, [r3, #0]
		   command_data_array[1] = 0;
   81de4:	4b7f      	ldr	r3, [pc, #508]	; (81fe4 <DD_READ_SENSORS+0x2f0>)
   81de6:	2200      	movs	r2, #0
   81de8:	705a      	strb	r2, [r3, #1]
		   command_data_array[2] = 0;
   81dea:	4b7e      	ldr	r3, [pc, #504]	; (81fe4 <DD_READ_SENSORS+0x2f0>)
   81dec:	2200      	movs	r2, #0
   81dee:	709a      	strb	r2, [r3, #2]
		   
		    while (PS2_DRDY_N_status) {
   81df0:	e007      	b.n	81e02 <DD_READ_SENSORS+0x10e>
			    if (!timeout--) {
   81df2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   81df4:	1e5a      	subs	r2, r3, #1
   81df6:	657a      	str	r2, [r7, #84]	; 0x54
   81df8:	2b00      	cmp	r3, #0
   81dfa:	d102      	bne.n	81e02 <DD_READ_SENSORS+0x10e>
				    return SENSOR_NOT_READY;
   81dfc:	2301      	movs	r3, #1
   81dfe:	f000 bd45 	b.w	8288c <DD_READ_SENSORS+0xb98>
		   DD_DISABLE_ISOLATORS_MISO_PIN();
		   command_data_array[0] = ADS1120_RDATA;
		   command_data_array[1] = 0;
		   command_data_array[2] = 0;
		   
		    while (PS2_DRDY_N_status) {
   81e02:	4b79      	ldr	r3, [pc, #484]	; (81fe8 <DD_READ_SENSORS+0x2f4>)
   81e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   81e06:	085b      	lsrs	r3, r3, #1
   81e08:	f003 0301 	and.w	r3, r3, #1
   81e0c:	2b00      	cmp	r3, #0
   81e0e:	d1f0      	bne.n	81df2 <DD_READ_SENSORS+0xfe>
			    if (!timeout--) {
				    return SENSOR_NOT_READY;
			    }
		    }		   
		 
		    DD_SPI_PCS_DECODER_ACTIVE();
   81e10:	4b76      	ldr	r3, [pc, #472]	; (81fec <DD_READ_SENSORS+0x2f8>)
   81e12:	4798      	blx	r3
			dd_spi_set_peripheral_chip_select_value(PS2_CS_N_ID);
   81e14:	2006      	movs	r0, #6
   81e16:	4b76      	ldr	r3, [pc, #472]	; (81ff0 <DD_READ_SENSORS+0x2fc>)
   81e18:	4798      	blx	r3
			//for (int i = 0; i <100 ; i++);	
			dd_spi_master_read(&command_data_array, 3, PS2_CS_N_ID);
   81e1a:	2206      	movs	r2, #6
   81e1c:	2103      	movs	r1, #3
   81e1e:	4871      	ldr	r0, [pc, #452]	; (81fe4 <DD_READ_SENSORS+0x2f0>)
   81e20:	4b74      	ldr	r3, [pc, #464]	; (81ff4 <DD_READ_SENSORS+0x300>)
   81e22:	4798      	blx	r3
			spi_data.bytearray[1]=command_data_array[1];
   81e24:	4b6f      	ldr	r3, [pc, #444]	; (81fe4 <DD_READ_SENSORS+0x2f0>)
   81e26:	785a      	ldrb	r2, [r3, #1]
   81e28:	4b73      	ldr	r3, [pc, #460]	; (81ff8 <DD_READ_SENSORS+0x304>)
   81e2a:	705a      	strb	r2, [r3, #1]
			spi_data.bytearray[0]=command_data_array[2];
   81e2c:	4b6d      	ldr	r3, [pc, #436]	; (81fe4 <DD_READ_SENSORS+0x2f0>)
   81e2e:	789a      	ldrb	r2, [r3, #2]
   81e30:	4b71      	ldr	r3, [pc, #452]	; (81ff8 <DD_READ_SENSORS+0x304>)
   81e32:	701a      	strb	r2, [r3, #0]
			*sensor_status = spi_data.Twobyte;
   81e34:	4b70      	ldr	r3, [pc, #448]	; (81ff8 <DD_READ_SENSORS+0x304>)
   81e36:	881b      	ldrh	r3, [r3, #0]
   81e38:	b29a      	uxth	r2, r3
   81e3a:	683b      	ldr	r3, [r7, #0]
   81e3c:	801a      	strh	r2, [r3, #0]
			DD_DISABLE_ISOLATORS_MISO_PIN();  
   81e3e:	4b68      	ldr	r3, [pc, #416]	; (81fe0 <DD_READ_SENSORS+0x2ec>)
   81e40:	4798      	blx	r3
		    return SENSOR_READ_OK;
   81e42:	2300      	movs	r3, #0
   81e44:	f000 bd22 	b.w	8288c <DD_READ_SENSORS+0xb98>
		break;
		
		case SV_PS3_ID:
		   DD_DISABLE_ISOLATORS_MISO_PIN();
   81e48:	4b65      	ldr	r3, [pc, #404]	; (81fe0 <DD_READ_SENSORS+0x2ec>)
   81e4a:	4798      	blx	r3
		   command_data_array[0] = ADS1120_RDATA;
   81e4c:	4b65      	ldr	r3, [pc, #404]	; (81fe4 <DD_READ_SENSORS+0x2f0>)
   81e4e:	2210      	movs	r2, #16
   81e50:	701a      	strb	r2, [r3, #0]
		   command_data_array[1] = 0;
   81e52:	4b64      	ldr	r3, [pc, #400]	; (81fe4 <DD_READ_SENSORS+0x2f0>)
   81e54:	2200      	movs	r2, #0
   81e56:	705a      	strb	r2, [r3, #1]
		   command_data_array[2] = 0;
   81e58:	4b62      	ldr	r3, [pc, #392]	; (81fe4 <DD_READ_SENSORS+0x2f0>)
   81e5a:	2200      	movs	r2, #0
   81e5c:	709a      	strb	r2, [r3, #2]
		   
		   while (PS3_DRDY_N_status) {
   81e5e:	e007      	b.n	81e70 <DD_READ_SENSORS+0x17c>
			   if (!timeout--) {
   81e60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   81e62:	1e5a      	subs	r2, r3, #1
   81e64:	657a      	str	r2, [r7, #84]	; 0x54
   81e66:	2b00      	cmp	r3, #0
   81e68:	d102      	bne.n	81e70 <DD_READ_SENSORS+0x17c>
				   return SENSOR_NOT_READY;
   81e6a:	2301      	movs	r3, #1
   81e6c:	f000 bd0e 	b.w	8288c <DD_READ_SENSORS+0xb98>
		   DD_DISABLE_ISOLATORS_MISO_PIN();
		   command_data_array[0] = ADS1120_RDATA;
		   command_data_array[1] = 0;
		   command_data_array[2] = 0;
		   
		   while (PS3_DRDY_N_status) {
   81e70:	4b5d      	ldr	r3, [pc, #372]	; (81fe8 <DD_READ_SENSORS+0x2f4>)
   81e72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   81e74:	f003 0301 	and.w	r3, r3, #1
   81e78:	2b00      	cmp	r3, #0
   81e7a:	d1f1      	bne.n	81e60 <DD_READ_SENSORS+0x16c>
			   if (!timeout--) {
				   return SENSOR_NOT_READY;
			   }
		   }
		DD_SPI_PCS_DECODER_ACTIVE();
   81e7c:	4b5b      	ldr	r3, [pc, #364]	; (81fec <DD_READ_SENSORS+0x2f8>)
   81e7e:	4798      	blx	r3
		dd_spi_set_peripheral_chip_select_value(PS3_CS_N_ID);
   81e80:	2007      	movs	r0, #7
   81e82:	4b5b      	ldr	r3, [pc, #364]	; (81ff0 <DD_READ_SENSORS+0x2fc>)
   81e84:	4798      	blx	r3
	    //for (int i = 0; i <100 ; i++);	
		dd_spi_master_read(&command_data_array, 3, PS3_CS_N_ID);
   81e86:	2207      	movs	r2, #7
   81e88:	2103      	movs	r1, #3
   81e8a:	4856      	ldr	r0, [pc, #344]	; (81fe4 <DD_READ_SENSORS+0x2f0>)
   81e8c:	4b59      	ldr	r3, [pc, #356]	; (81ff4 <DD_READ_SENSORS+0x300>)
   81e8e:	4798      	blx	r3
	    spi_data.bytearray[1]=command_data_array[1];
   81e90:	4b54      	ldr	r3, [pc, #336]	; (81fe4 <DD_READ_SENSORS+0x2f0>)
   81e92:	785a      	ldrb	r2, [r3, #1]
   81e94:	4b58      	ldr	r3, [pc, #352]	; (81ff8 <DD_READ_SENSORS+0x304>)
   81e96:	705a      	strb	r2, [r3, #1]
		spi_data.bytearray[0]=command_data_array[2];
   81e98:	4b52      	ldr	r3, [pc, #328]	; (81fe4 <DD_READ_SENSORS+0x2f0>)
   81e9a:	789a      	ldrb	r2, [r3, #2]
   81e9c:	4b56      	ldr	r3, [pc, #344]	; (81ff8 <DD_READ_SENSORS+0x304>)
   81e9e:	701a      	strb	r2, [r3, #0]
	    *sensor_status = spi_data.Twobyte;
   81ea0:	4b55      	ldr	r3, [pc, #340]	; (81ff8 <DD_READ_SENSORS+0x304>)
   81ea2:	881b      	ldrh	r3, [r3, #0]
   81ea4:	b29a      	uxth	r2, r3
   81ea6:	683b      	ldr	r3, [r7, #0]
   81ea8:	801a      	strh	r2, [r3, #0]
		DD_DISABLE_ISOLATORS_MISO_PIN();
   81eaa:	4b4d      	ldr	r3, [pc, #308]	; (81fe0 <DD_READ_SENSORS+0x2ec>)
   81eac:	4798      	blx	r3
		return SENSOR_READ_OK;   		  
   81eae:	2300      	movs	r3, #0
   81eb0:	f000 bcec 	b.w	8288c <DD_READ_SENSORS+0xb98>
		   		
		break;
		
		case SV_THERMOCOUPLE_ID:
		 DD_SPI_PCS_DECODER_DEACTIVE();
   81eb4:	4b51      	ldr	r3, [pc, #324]	; (81ffc <DD_READ_SENSORS+0x308>)
   81eb6:	4798      	blx	r3
		
		   DD_DISABLE_ISOLATORS_MISO_PIN();
   81eb8:	4b49      	ldr	r3, [pc, #292]	; (81fe0 <DD_READ_SENSORS+0x2ec>)
   81eba:	4798      	blx	r3
		    DD_SPI_PCS_DECODER_ACTIVE();
   81ebc:	4b4b      	ldr	r3, [pc, #300]	; (81fec <DD_READ_SENSORS+0x2f8>)
   81ebe:	4798      	blx	r3
		   command_data_array[0] = 0;
   81ec0:	4b48      	ldr	r3, [pc, #288]	; (81fe4 <DD_READ_SENSORS+0x2f0>)
   81ec2:	2200      	movs	r2, #0
   81ec4:	701a      	strb	r2, [r3, #0]
		   command_data_array[1] = 0;
   81ec6:	4b47      	ldr	r3, [pc, #284]	; (81fe4 <DD_READ_SENSORS+0x2f0>)
   81ec8:	2200      	movs	r2, #0
   81eca:	705a      	strb	r2, [r3, #1]
		   command_data_array[2] = 0;
   81ecc:	4b45      	ldr	r3, [pc, #276]	; (81fe4 <DD_READ_SENSORS+0x2f0>)
   81ece:	2200      	movs	r2, #0
   81ed0:	709a      	strb	r2, [r3, #2]
		    while (THERMOCOUPLE_DRDY_PIN) {
			    if (!timeout--) {
   81ed2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   81ed4:	1e5a      	subs	r2, r3, #1
   81ed6:	657a      	str	r2, [r7, #84]	; 0x54
   81ed8:	2b00      	cmp	r3, #0
   81eda:	d1fa      	bne.n	81ed2 <DD_READ_SENSORS+0x1de>
				    return SENSOR_NOT_READY;
   81edc:	2301      	movs	r3, #1
   81ede:	f000 bcd5 	b.w	8288c <DD_READ_SENSORS+0xb98>
			DD_DISABLE_ISOLATORS_MISO_PIN();	
			return SENSOR_READ_OK;	   		
		break;
		
		case SV_TS1_ID:
		   command_data_array[0] = 1;
   81ee2:	4b40      	ldr	r3, [pc, #256]	; (81fe4 <DD_READ_SENSORS+0x2f0>)
   81ee4:	2201      	movs	r2, #1
   81ee6:	701a      	strb	r2, [r3, #0]
		   command_data_array[1] = 0;
   81ee8:	4b3e      	ldr	r3, [pc, #248]	; (81fe4 <DD_READ_SENSORS+0x2f0>)
   81eea:	2200      	movs	r2, #0
   81eec:	705a      	strb	r2, [r3, #1]
		   command_data_array[2] = 0;
   81eee:	4b3d      	ldr	r3, [pc, #244]	; (81fe4 <DD_READ_SENSORS+0x2f0>)
   81ef0:	2200      	movs	r2, #0
   81ef2:	709a      	strb	r2, [r3, #2]
		   
		    while (DRDY_TS1_status) {
   81ef4:	e007      	b.n	81f06 <DD_READ_SENSORS+0x212>
			    if (!timeout--) {
   81ef6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   81ef8:	1e5a      	subs	r2, r3, #1
   81efa:	657a      	str	r2, [r7, #84]	; 0x54
   81efc:	2b00      	cmp	r3, #0
   81efe:	d102      	bne.n	81f06 <DD_READ_SENSORS+0x212>
				    return SENSOR_NOT_READY;
   81f00:	2301      	movs	r3, #1
   81f02:	f000 bcc3 	b.w	8288c <DD_READ_SENSORS+0xb98>
		case SV_TS1_ID:
		   command_data_array[0] = 1;
		   command_data_array[1] = 0;
		   command_data_array[2] = 0;
		   
		    while (DRDY_TS1_status) {
   81f06:	4b3e      	ldr	r3, [pc, #248]	; (82000 <DD_READ_SENSORS+0x30c>)
   81f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   81f0a:	0bdb      	lsrs	r3, r3, #15
   81f0c:	f003 0301 	and.w	r3, r3, #1
   81f10:	2b00      	cmp	r3, #0
   81f12:	d1f0      	bne.n	81ef6 <DD_READ_SENSORS+0x202>
			    if (!timeout--) {
				    return SENSOR_NOT_READY;
			    }
		    } 
		   
			   DD_SPI_PCS_DECODER_ACTIVE();
   81f14:	4b35      	ldr	r3, [pc, #212]	; (81fec <DD_READ_SENSORS+0x2f8>)
   81f16:	4798      	blx	r3
			   DD_DISABLE_ISOLATORS_MISO_PIN();
   81f18:	4b31      	ldr	r3, [pc, #196]	; (81fe0 <DD_READ_SENSORS+0x2ec>)
   81f1a:	4798      	blx	r3
			   DD_ENABLE_ISOLATOR_1();			   
   81f1c:	4b39      	ldr	r3, [pc, #228]	; (82004 <DD_READ_SENSORS+0x310>)
   81f1e:	4798      	blx	r3
			   DD_TS1_CHIP_SELECT();			  	   
   81f20:	4b39      	ldr	r3, [pc, #228]	; (82008 <DD_READ_SENSORS+0x314>)
   81f22:	4798      	blx	r3
			   dd_spi_set_peripheral_chip_select_value(ISOLTR_1_CS_ID);
   81f24:	2001      	movs	r0, #1
   81f26:	4b32      	ldr	r3, [pc, #200]	; (81ff0 <DD_READ_SENSORS+0x2fc>)
   81f28:	4798      	blx	r3
			   dd_spi_master_read(&command_data_array, 3, ISOLTR_1_CS_ID);			   
   81f2a:	2201      	movs	r2, #1
   81f2c:	2103      	movs	r1, #3
   81f2e:	482d      	ldr	r0, [pc, #180]	; (81fe4 <DD_READ_SENSORS+0x2f0>)
   81f30:	4b30      	ldr	r3, [pc, #192]	; (81ff4 <DD_READ_SENSORS+0x300>)
   81f32:	4798      	blx	r3
			   spi_data.bytearray[1]=command_data_array[1];
   81f34:	4b2b      	ldr	r3, [pc, #172]	; (81fe4 <DD_READ_SENSORS+0x2f0>)
   81f36:	785a      	ldrb	r2, [r3, #1]
   81f38:	4b2f      	ldr	r3, [pc, #188]	; (81ff8 <DD_READ_SENSORS+0x304>)
   81f3a:	705a      	strb	r2, [r3, #1]
			   spi_data.bytearray[0]=command_data_array[2];
   81f3c:	4b29      	ldr	r3, [pc, #164]	; (81fe4 <DD_READ_SENSORS+0x2f0>)
   81f3e:	789a      	ldrb	r2, [r3, #2]
   81f40:	4b2d      	ldr	r3, [pc, #180]	; (81ff8 <DD_READ_SENSORS+0x304>)
   81f42:	701a      	strb	r2, [r3, #0]
			   *sensor_status = spi_data.Twobyte; 			
   81f44:	4b2c      	ldr	r3, [pc, #176]	; (81ff8 <DD_READ_SENSORS+0x304>)
   81f46:	881b      	ldrh	r3, [r3, #0]
   81f48:	b29a      	uxth	r2, r3
   81f4a:	683b      	ldr	r3, [r7, #0]
   81f4c:	801a      	strh	r2, [r3, #0]
			  // for(unsigned int count=0; count<1000; count++ )   { ;}
 			   DD_SPI_PCS_DECODER_DEACTIVE();
   81f4e:	4b2b      	ldr	r3, [pc, #172]	; (81ffc <DD_READ_SENSORS+0x308>)
   81f50:	4798      	blx	r3
 			   DD_DISABLE_ISOLATORS_MISO_PIN();	
   81f52:	4b23      	ldr	r3, [pc, #140]	; (81fe0 <DD_READ_SENSORS+0x2ec>)
   81f54:	4798      	blx	r3
			   return SENSOR_READ_OK;		   	
   81f56:	2300      	movs	r3, #0
   81f58:	f000 bc98 	b.w	8288c <DD_READ_SENSORS+0xb98>
		break;
		
		case SV_TS2_ID:
		   command_data_array[0] = 1;
   81f5c:	4b21      	ldr	r3, [pc, #132]	; (81fe4 <DD_READ_SENSORS+0x2f0>)
   81f5e:	2201      	movs	r2, #1
   81f60:	701a      	strb	r2, [r3, #0]
		   command_data_array[1] = 0;
   81f62:	4b20      	ldr	r3, [pc, #128]	; (81fe4 <DD_READ_SENSORS+0x2f0>)
   81f64:	2200      	movs	r2, #0
   81f66:	705a      	strb	r2, [r3, #1]
		   command_data_array[2] = 0;
   81f68:	4b1e      	ldr	r3, [pc, #120]	; (81fe4 <DD_READ_SENSORS+0x2f0>)
   81f6a:	2200      	movs	r2, #0
   81f6c:	709a      	strb	r2, [r3, #2]
		   
		   while (DRDY_TS2_status) {
   81f6e:	e007      	b.n	81f80 <DD_READ_SENSORS+0x28c>
			   if (!timeout--) {
   81f70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   81f72:	1e5a      	subs	r2, r3, #1
   81f74:	657a      	str	r2, [r7, #84]	; 0x54
   81f76:	2b00      	cmp	r3, #0
   81f78:	d102      	bne.n	81f80 <DD_READ_SENSORS+0x28c>
				   return SENSOR_NOT_READY;
   81f7a:	2301      	movs	r3, #1
   81f7c:	f000 bc86 	b.w	8288c <DD_READ_SENSORS+0xb98>
		case SV_TS2_ID:
		   command_data_array[0] = 1;
		   command_data_array[1] = 0;
		   command_data_array[2] = 0;
		   
		   while (DRDY_TS2_status) {
   81f80:	4b1f      	ldr	r3, [pc, #124]	; (82000 <DD_READ_SENSORS+0x30c>)
   81f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   81f84:	0c1b      	lsrs	r3, r3, #16
   81f86:	f003 0301 	and.w	r3, r3, #1
   81f8a:	2b00      	cmp	r3, #0
   81f8c:	d1f0      	bne.n	81f70 <DD_READ_SENSORS+0x27c>
				   return SENSOR_NOT_READY;
			   }
		   }
		   
		   
		   DD_SPI_PCS_DECODER_ACTIVE();
   81f8e:	4b17      	ldr	r3, [pc, #92]	; (81fec <DD_READ_SENSORS+0x2f8>)
   81f90:	4798      	blx	r3
		   DD_DISABLE_ISOLATORS_MISO_PIN();
   81f92:	4b13      	ldr	r3, [pc, #76]	; (81fe0 <DD_READ_SENSORS+0x2ec>)
   81f94:	4798      	blx	r3
		   DD_ENABLE_ISOLATOR_1();			   
   81f96:	4b1b      	ldr	r3, [pc, #108]	; (82004 <DD_READ_SENSORS+0x310>)
   81f98:	4798      	blx	r3
		   DD_TS2_CHIP_SELECT();	
   81f9a:	4b1c      	ldr	r3, [pc, #112]	; (8200c <DD_READ_SENSORS+0x318>)
   81f9c:	4798      	blx	r3
		   dd_spi_set_peripheral_chip_select_value(ISOLTR_1_CS_ID);
   81f9e:	2001      	movs	r0, #1
   81fa0:	4b13      	ldr	r3, [pc, #76]	; (81ff0 <DD_READ_SENSORS+0x2fc>)
   81fa2:	4798      	blx	r3
		   dd_spi_master_read(&command_data_array, 3,ISOLTR_1_CS_ID );
   81fa4:	2201      	movs	r2, #1
   81fa6:	2103      	movs	r1, #3
   81fa8:	480e      	ldr	r0, [pc, #56]	; (81fe4 <DD_READ_SENSORS+0x2f0>)
   81faa:	4b12      	ldr	r3, [pc, #72]	; (81ff4 <DD_READ_SENSORS+0x300>)
   81fac:	4798      	blx	r3
		   spi_data.bytearray[1]=command_data_array[1];
   81fae:	4b0d      	ldr	r3, [pc, #52]	; (81fe4 <DD_READ_SENSORS+0x2f0>)
   81fb0:	785a      	ldrb	r2, [r3, #1]
   81fb2:	4b11      	ldr	r3, [pc, #68]	; (81ff8 <DD_READ_SENSORS+0x304>)
   81fb4:	705a      	strb	r2, [r3, #1]
		   spi_data.bytearray[0]=command_data_array[2];
   81fb6:	4b0b      	ldr	r3, [pc, #44]	; (81fe4 <DD_READ_SENSORS+0x2f0>)
   81fb8:	789a      	ldrb	r2, [r3, #2]
   81fba:	4b0f      	ldr	r3, [pc, #60]	; (81ff8 <DD_READ_SENSORS+0x304>)
   81fbc:	701a      	strb	r2, [r3, #0]
		   *sensor_status = spi_data.Twobyte;		   
   81fbe:	4b0e      	ldr	r3, [pc, #56]	; (81ff8 <DD_READ_SENSORS+0x304>)
   81fc0:	881b      	ldrh	r3, [r3, #0]
   81fc2:	b29a      	uxth	r2, r3
   81fc4:	683b      	ldr	r3, [r7, #0]
   81fc6:	801a      	strh	r2, [r3, #0]
 		   DD_SPI_PCS_DECODER_DEACTIVE();
   81fc8:	4b0c      	ldr	r3, [pc, #48]	; (81ffc <DD_READ_SENSORS+0x308>)
   81fca:	4798      	blx	r3
		   DD_DISABLE_ISOLATORS_MISO_PIN();	
   81fcc:	4b04      	ldr	r3, [pc, #16]	; (81fe0 <DD_READ_SENSORS+0x2ec>)
   81fce:	4798      	blx	r3
		   return SENSOR_READ_OK;		    
   81fd0:	2300      	movs	r3, #0
   81fd2:	f000 bc5b 	b.w	8288c <DD_READ_SENSORS+0xb98>
   81fd6:	bf00      	nop
   81fd8:	400e1200 	.word	0x400e1200
   81fdc:	0008110d 	.word	0x0008110d
   81fe0:	00081b39 	.word	0x00081b39
   81fe4:	20070aec 	.word	0x20070aec
   81fe8:	400e1400 	.word	0x400e1400
   81fec:	00081b01 	.word	0x00081b01
   81ff0:	000816b5 	.word	0x000816b5
   81ff4:	0008175d 	.word	0x0008175d
   81ff8:	20070ae8 	.word	0x20070ae8
   81ffc:	00081b1d 	.word	0x00081b1d
   82000:	400e0e00 	.word	0x400e0e00
   82004:	00081b69 	.word	0x00081b69
   82008:	00081a29 	.word	0x00081a29
   8200c:	00081a41 	.word	0x00081a41
		break;
		
		case SV_CS1_TS_ID:
		   command_data_array[0] = 1;
   82010:	4b7f      	ldr	r3, [pc, #508]	; (82210 <DD_READ_SENSORS+0x51c>)
   82012:	2201      	movs	r2, #1
   82014:	701a      	strb	r2, [r3, #0]
		   command_data_array[1] = 0;
   82016:	4b7e      	ldr	r3, [pc, #504]	; (82210 <DD_READ_SENSORS+0x51c>)
   82018:	2200      	movs	r2, #0
   8201a:	705a      	strb	r2, [r3, #1]
		   command_data_array[2] = 0;
   8201c:	4b7c      	ldr	r3, [pc, #496]	; (82210 <DD_READ_SENSORS+0x51c>)
   8201e:	2200      	movs	r2, #0
   82020:	709a      	strb	r2, [r3, #2]
		   
		   while (DRDY_CS1_TS_status) {
   82022:	e007      	b.n	82034 <DD_READ_SENSORS+0x340>
			   if (!timeout--) {
   82024:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   82026:	1e5a      	subs	r2, r3, #1
   82028:	657a      	str	r2, [r7, #84]	; 0x54
   8202a:	2b00      	cmp	r3, #0
   8202c:	d102      	bne.n	82034 <DD_READ_SENSORS+0x340>
				   return SENSOR_NOT_READY;
   8202e:	2301      	movs	r3, #1
   82030:	f000 bc2c 	b.w	8288c <DD_READ_SENSORS+0xb98>
		case SV_CS1_TS_ID:
		   command_data_array[0] = 1;
		   command_data_array[1] = 0;
		   command_data_array[2] = 0;
		   
		   while (DRDY_CS1_TS_status) {
   82034:	4b77      	ldr	r3, [pc, #476]	; (82214 <DD_READ_SENSORS+0x520>)
   82036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   82038:	0c5b      	lsrs	r3, r3, #17
   8203a:	f003 0301 	and.w	r3, r3, #1
   8203e:	2b00      	cmp	r3, #0
   82040:	d1f0      	bne.n	82024 <DD_READ_SENSORS+0x330>
			   if (!timeout--) {
				   return SENSOR_NOT_READY;
			   }
		   }		   
		   
			   DD_SPI_PCS_DECODER_ACTIVE();
   82042:	4b75      	ldr	r3, [pc, #468]	; (82218 <DD_READ_SENSORS+0x524>)
   82044:	4798      	blx	r3
			   DD_ENABLE_ISOLATOR_1();
   82046:	4b75      	ldr	r3, [pc, #468]	; (8221c <DD_READ_SENSORS+0x528>)
   82048:	4798      	blx	r3
			   DD_CS1_TS_CHIP_SELECT();
   8204a:	4b75      	ldr	r3, [pc, #468]	; (82220 <DD_READ_SENSORS+0x52c>)
   8204c:	4798      	blx	r3
			   dd_spi_set_peripheral_chip_select_value(ISOLTR_1_CS_ID);
   8204e:	2001      	movs	r0, #1
   82050:	4b74      	ldr	r3, [pc, #464]	; (82224 <DD_READ_SENSORS+0x530>)
   82052:	4798      	blx	r3
			   dd_spi_master_read(&command_data_array, 3, ISOLTR_1_CS_ID);
   82054:	2201      	movs	r2, #1
   82056:	2103      	movs	r1, #3
   82058:	486d      	ldr	r0, [pc, #436]	; (82210 <DD_READ_SENSORS+0x51c>)
   8205a:	4b73      	ldr	r3, [pc, #460]	; (82228 <DD_READ_SENSORS+0x534>)
   8205c:	4798      	blx	r3
			   spi_data.bytearray[1]=command_data_array[1];
   8205e:	4b6c      	ldr	r3, [pc, #432]	; (82210 <DD_READ_SENSORS+0x51c>)
   82060:	785a      	ldrb	r2, [r3, #1]
   82062:	4b72      	ldr	r3, [pc, #456]	; (8222c <DD_READ_SENSORS+0x538>)
   82064:	705a      	strb	r2, [r3, #1]
			   spi_data.bytearray[0]=command_data_array[2];
   82066:	4b6a      	ldr	r3, [pc, #424]	; (82210 <DD_READ_SENSORS+0x51c>)
   82068:	789a      	ldrb	r2, [r3, #2]
   8206a:	4b70      	ldr	r3, [pc, #448]	; (8222c <DD_READ_SENSORS+0x538>)
   8206c:	701a      	strb	r2, [r3, #0]
			   *sensor_status = spi_data.Twobyte;
   8206e:	4b6f      	ldr	r3, [pc, #444]	; (8222c <DD_READ_SENSORS+0x538>)
   82070:	881b      	ldrh	r3, [r3, #0]
   82072:	b29a      	uxth	r2, r3
   82074:	683b      	ldr	r3, [r7, #0]
   82076:	801a      	strh	r2, [r3, #0]
		   
		   DD_SPI_PCS_DECODER_DEACTIVE();
   82078:	4b6d      	ldr	r3, [pc, #436]	; (82230 <DD_READ_SENSORS+0x53c>)
   8207a:	4798      	blx	r3
		   DD_DISABLE_ISOLATORS_MISO_PIN();	
   8207c:	4b6d      	ldr	r3, [pc, #436]	; (82234 <DD_READ_SENSORS+0x540>)
   8207e:	4798      	blx	r3
		   return SENSOR_READ_OK;	    
   82080:	2300      	movs	r3, #0
   82082:	f000 bc03 	b.w	8288c <DD_READ_SENSORS+0xb98>
		break;
		
		case SV_CS2_TS_ID:
		   command_data_array[0] = 1;
   82086:	4b62      	ldr	r3, [pc, #392]	; (82210 <DD_READ_SENSORS+0x51c>)
   82088:	2201      	movs	r2, #1
   8208a:	701a      	strb	r2, [r3, #0]
		   command_data_array[1] = 0;
   8208c:	4b60      	ldr	r3, [pc, #384]	; (82210 <DD_READ_SENSORS+0x51c>)
   8208e:	2200      	movs	r2, #0
   82090:	705a      	strb	r2, [r3, #1]
		   command_data_array[2] = 0;
   82092:	4b5f      	ldr	r3, [pc, #380]	; (82210 <DD_READ_SENSORS+0x51c>)
   82094:	2200      	movs	r2, #0
   82096:	709a      	strb	r2, [r3, #2]
		   
		   while (DRDY_CS2_TS_status) {
   82098:	e006      	b.n	820a8 <DD_READ_SENSORS+0x3b4>
			   if (!timeout--) {
   8209a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   8209c:	1e5a      	subs	r2, r3, #1
   8209e:	657a      	str	r2, [r7, #84]	; 0x54
   820a0:	2b00      	cmp	r3, #0
   820a2:	d101      	bne.n	820a8 <DD_READ_SENSORS+0x3b4>
				   return SENSOR_NOT_READY;
   820a4:	2301      	movs	r3, #1
   820a6:	e3f1      	b.n	8288c <DD_READ_SENSORS+0xb98>
		case SV_CS2_TS_ID:
		   command_data_array[0] = 1;
		   command_data_array[1] = 0;
		   command_data_array[2] = 0;
		   
		   while (DRDY_CS2_TS_status) {
   820a8:	4b5a      	ldr	r3, [pc, #360]	; (82214 <DD_READ_SENSORS+0x520>)
   820aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   820ac:	0c9b      	lsrs	r3, r3, #18
   820ae:	f003 0301 	and.w	r3, r3, #1
   820b2:	2b00      	cmp	r3, #0
   820b4:	d1f1      	bne.n	8209a <DD_READ_SENSORS+0x3a6>
			   if (!timeout--) {
				   return SENSOR_NOT_READY;
			   }
		   }	   
		  
			   DD_SPI_PCS_DECODER_ACTIVE();
   820b6:	4b58      	ldr	r3, [pc, #352]	; (82218 <DD_READ_SENSORS+0x524>)
   820b8:	4798      	blx	r3
			   DD_ENABLE_ISOLATOR_1();
   820ba:	4b58      	ldr	r3, [pc, #352]	; (8221c <DD_READ_SENSORS+0x528>)
   820bc:	4798      	blx	r3
			   DD_CS2_TS_CHIP_SELECT();
   820be:	4b5e      	ldr	r3, [pc, #376]	; (82238 <DD_READ_SENSORS+0x544>)
   820c0:	4798      	blx	r3
			   dd_spi_set_peripheral_chip_select_value(ISOLTR_1_CS_ID);
   820c2:	2001      	movs	r0, #1
   820c4:	4b57      	ldr	r3, [pc, #348]	; (82224 <DD_READ_SENSORS+0x530>)
   820c6:	4798      	blx	r3
			   dd_spi_master_read(&command_data_array, 3, ISOLTR_1_CS_ID);
   820c8:	2201      	movs	r2, #1
   820ca:	2103      	movs	r1, #3
   820cc:	4850      	ldr	r0, [pc, #320]	; (82210 <DD_READ_SENSORS+0x51c>)
   820ce:	4b56      	ldr	r3, [pc, #344]	; (82228 <DD_READ_SENSORS+0x534>)
   820d0:	4798      	blx	r3
			   spi_data.bytearray[1]=command_data_array[1];
   820d2:	4b4f      	ldr	r3, [pc, #316]	; (82210 <DD_READ_SENSORS+0x51c>)
   820d4:	785a      	ldrb	r2, [r3, #1]
   820d6:	4b55      	ldr	r3, [pc, #340]	; (8222c <DD_READ_SENSORS+0x538>)
   820d8:	705a      	strb	r2, [r3, #1]
			   spi_data.bytearray[0]=command_data_array[2];
   820da:	4b4d      	ldr	r3, [pc, #308]	; (82210 <DD_READ_SENSORS+0x51c>)
   820dc:	789a      	ldrb	r2, [r3, #2]
   820de:	4b53      	ldr	r3, [pc, #332]	; (8222c <DD_READ_SENSORS+0x538>)
   820e0:	701a      	strb	r2, [r3, #0]
			   *sensor_status = spi_data.Twobyte;
   820e2:	4b52      	ldr	r3, [pc, #328]	; (8222c <DD_READ_SENSORS+0x538>)
   820e4:	881b      	ldrh	r3, [r3, #0]
   820e6:	b29a      	uxth	r2, r3
   820e8:	683b      	ldr	r3, [r7, #0]
   820ea:	801a      	strh	r2, [r3, #0]
		   
		   DD_SPI_PCS_DECODER_DEACTIVE();
   820ec:	4b50      	ldr	r3, [pc, #320]	; (82230 <DD_READ_SENSORS+0x53c>)
   820ee:	4798      	blx	r3
		   DD_DISABLE_ISOLATORS_MISO_PIN();	
   820f0:	4b50      	ldr	r3, [pc, #320]	; (82234 <DD_READ_SENSORS+0x540>)
   820f2:	4798      	blx	r3
		   
		   return SENSOR_READ_OK;	 
   820f4:	2300      	movs	r3, #0
   820f6:	e3c9      	b.n	8288c <DD_READ_SENSORS+0xb98>
		break;	
		
		
		case SV_TS3_ID:
		   command_data_array[0] = 1;
   820f8:	4b45      	ldr	r3, [pc, #276]	; (82210 <DD_READ_SENSORS+0x51c>)
   820fa:	2201      	movs	r2, #1
   820fc:	701a      	strb	r2, [r3, #0]
		   command_data_array[1] = 0;
   820fe:	4b44      	ldr	r3, [pc, #272]	; (82210 <DD_READ_SENSORS+0x51c>)
   82100:	2200      	movs	r2, #0
   82102:	705a      	strb	r2, [r3, #1]
		   command_data_array[2] = 0;
   82104:	4b42      	ldr	r3, [pc, #264]	; (82210 <DD_READ_SENSORS+0x51c>)
   82106:	2200      	movs	r2, #0
   82108:	709a      	strb	r2, [r3, #2]
		   
		   while (DRDY_TS3_status) {
   8210a:	e006      	b.n	8211a <DD_READ_SENSORS+0x426>
			   if (!timeout--) {
   8210c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   8210e:	1e5a      	subs	r2, r3, #1
   82110:	657a      	str	r2, [r7, #84]	; 0x54
   82112:	2b00      	cmp	r3, #0
   82114:	d101      	bne.n	8211a <DD_READ_SENSORS+0x426>
				   return SENSOR_NOT_READY;
   82116:	2301      	movs	r3, #1
   82118:	e3b8      	b.n	8288c <DD_READ_SENSORS+0xb98>
		case SV_TS3_ID:
		   command_data_array[0] = 1;
		   command_data_array[1] = 0;
		   command_data_array[2] = 0;
		   
		   while (DRDY_TS3_status) {
   8211a:	4b3e      	ldr	r3, [pc, #248]	; (82214 <DD_READ_SENSORS+0x520>)
   8211c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   8211e:	0d1b      	lsrs	r3, r3, #20
   82120:	f003 0301 	and.w	r3, r3, #1
   82124:	2b00      	cmp	r3, #0
   82126:	d1f1      	bne.n	8210c <DD_READ_SENSORS+0x418>
				   return SENSOR_NOT_READY;
			   }
		   }
		   
		   
			   DD_SPI_PCS_DECODER_ACTIVE();
   82128:	4b3b      	ldr	r3, [pc, #236]	; (82218 <DD_READ_SENSORS+0x524>)
   8212a:	4798      	blx	r3
			   DD_TS3_CHIP_SELECT();
   8212c:	4b43      	ldr	r3, [pc, #268]	; (8223c <DD_READ_SENSORS+0x548>)
   8212e:	4798      	blx	r3
			   DD_ENABLE_ISOLATOR_2();
   82130:	4b43      	ldr	r3, [pc, #268]	; (82240 <DD_READ_SENSORS+0x54c>)
   82132:	4798      	blx	r3
			   dd_spi_set_peripheral_chip_select_value(ISOLTR_2_CS_ID);
   82134:	2002      	movs	r0, #2
   82136:	4b3b      	ldr	r3, [pc, #236]	; (82224 <DD_READ_SENSORS+0x530>)
   82138:	4798      	blx	r3
			   dd_spi_master_read(&command_data_array, 3,ISOLTR_2_CS_ID);
   8213a:	2202      	movs	r2, #2
   8213c:	2103      	movs	r1, #3
   8213e:	4834      	ldr	r0, [pc, #208]	; (82210 <DD_READ_SENSORS+0x51c>)
   82140:	4b39      	ldr	r3, [pc, #228]	; (82228 <DD_READ_SENSORS+0x534>)
   82142:	4798      	blx	r3
			   spi_data.bytearray[1]=command_data_array[1];
   82144:	4b32      	ldr	r3, [pc, #200]	; (82210 <DD_READ_SENSORS+0x51c>)
   82146:	785a      	ldrb	r2, [r3, #1]
   82148:	4b38      	ldr	r3, [pc, #224]	; (8222c <DD_READ_SENSORS+0x538>)
   8214a:	705a      	strb	r2, [r3, #1]
			   spi_data.bytearray[0]=command_data_array[2];
   8214c:	4b30      	ldr	r3, [pc, #192]	; (82210 <DD_READ_SENSORS+0x51c>)
   8214e:	789a      	ldrb	r2, [r3, #2]
   82150:	4b36      	ldr	r3, [pc, #216]	; (8222c <DD_READ_SENSORS+0x538>)
   82152:	701a      	strb	r2, [r3, #0]
			   *sensor_status = spi_data.Twobyte;
   82154:	4b35      	ldr	r3, [pc, #212]	; (8222c <DD_READ_SENSORS+0x538>)
   82156:	881b      	ldrh	r3, [r3, #0]
   82158:	b29a      	uxth	r2, r3
   8215a:	683b      	ldr	r3, [r7, #0]
   8215c:	801a      	strh	r2, [r3, #0]
		   
		    DD_SPI_PCS_DECODER_DEACTIVE();
   8215e:	4b34      	ldr	r3, [pc, #208]	; (82230 <DD_READ_SENSORS+0x53c>)
   82160:	4798      	blx	r3
		    DD_DISABLE_ISOLATORS_MISO_PIN();    
   82162:	4b34      	ldr	r3, [pc, #208]	; (82234 <DD_READ_SENSORS+0x540>)
   82164:	4798      	blx	r3
			
			return SENSOR_READ_OK;
   82166:	2300      	movs	r3, #0
   82168:	e390      	b.n	8288c <DD_READ_SENSORS+0xb98>
		break;
		
		case SV_CS3_TS_ID:
		   command_data_array[0] = 1;
   8216a:	4b29      	ldr	r3, [pc, #164]	; (82210 <DD_READ_SENSORS+0x51c>)
   8216c:	2201      	movs	r2, #1
   8216e:	701a      	strb	r2, [r3, #0]
		   command_data_array[1] = 0;
   82170:	4b27      	ldr	r3, [pc, #156]	; (82210 <DD_READ_SENSORS+0x51c>)
   82172:	2200      	movs	r2, #0
   82174:	705a      	strb	r2, [r3, #1]
		   command_data_array[2] = 0;
   82176:	4b26      	ldr	r3, [pc, #152]	; (82210 <DD_READ_SENSORS+0x51c>)
   82178:	2200      	movs	r2, #0
   8217a:	709a      	strb	r2, [r3, #2]
		   
		   while (DRDY_CS3_TS_status) {
   8217c:	e006      	b.n	8218c <DD_READ_SENSORS+0x498>
			   if (!timeout--) {
   8217e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   82180:	1e5a      	subs	r2, r3, #1
   82182:	657a      	str	r2, [r7, #84]	; 0x54
   82184:	2b00      	cmp	r3, #0
   82186:	d101      	bne.n	8218c <DD_READ_SENSORS+0x498>
				   return SENSOR_NOT_READY;
   82188:	2301      	movs	r3, #1
   8218a:	e37f      	b.n	8288c <DD_READ_SENSORS+0xb98>
		case SV_CS3_TS_ID:
		   command_data_array[0] = 1;
		   command_data_array[1] = 0;
		   command_data_array[2] = 0;
		   
		   while (DRDY_CS3_TS_status) {
   8218c:	4b21      	ldr	r3, [pc, #132]	; (82214 <DD_READ_SENSORS+0x520>)
   8218e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   82190:	0cdb      	lsrs	r3, r3, #19
   82192:	f003 0301 	and.w	r3, r3, #1
   82196:	2b00      	cmp	r3, #0
   82198:	d1f1      	bne.n	8217e <DD_READ_SENSORS+0x48a>
			   if (!timeout--) {
				   return SENSOR_NOT_READY;
			   }
		   }	   
		   
			   DD_SPI_PCS_DECODER_ACTIVE();
   8219a:	4b1f      	ldr	r3, [pc, #124]	; (82218 <DD_READ_SENSORS+0x524>)
   8219c:	4798      	blx	r3
			   DD_CS3_TS_CHIP_SELECT();
   8219e:	4b29      	ldr	r3, [pc, #164]	; (82244 <DD_READ_SENSORS+0x550>)
   821a0:	4798      	blx	r3
			   DD_ENABLE_ISOLATOR_2();
   821a2:	4b27      	ldr	r3, [pc, #156]	; (82240 <DD_READ_SENSORS+0x54c>)
   821a4:	4798      	blx	r3
			   dd_spi_set_peripheral_chip_select_value(ISOLTR_2_CS_ID);
   821a6:	2002      	movs	r0, #2
   821a8:	4b1e      	ldr	r3, [pc, #120]	; (82224 <DD_READ_SENSORS+0x530>)
   821aa:	4798      	blx	r3
			   dd_spi_master_read(&command_data_array, 3, ISOLTR_2_CS_ID);
   821ac:	2202      	movs	r2, #2
   821ae:	2103      	movs	r1, #3
   821b0:	4817      	ldr	r0, [pc, #92]	; (82210 <DD_READ_SENSORS+0x51c>)
   821b2:	4b1d      	ldr	r3, [pc, #116]	; (82228 <DD_READ_SENSORS+0x534>)
   821b4:	4798      	blx	r3
			   spi_data.bytearray[1]=command_data_array[1];
   821b6:	4b16      	ldr	r3, [pc, #88]	; (82210 <DD_READ_SENSORS+0x51c>)
   821b8:	785a      	ldrb	r2, [r3, #1]
   821ba:	4b1c      	ldr	r3, [pc, #112]	; (8222c <DD_READ_SENSORS+0x538>)
   821bc:	705a      	strb	r2, [r3, #1]
			   spi_data.bytearray[0]=command_data_array[2];
   821be:	4b14      	ldr	r3, [pc, #80]	; (82210 <DD_READ_SENSORS+0x51c>)
   821c0:	789a      	ldrb	r2, [r3, #2]
   821c2:	4b1a      	ldr	r3, [pc, #104]	; (8222c <DD_READ_SENSORS+0x538>)
   821c4:	701a      	strb	r2, [r3, #0]
			   *sensor_status = spi_data.Twobyte;
   821c6:	4b19      	ldr	r3, [pc, #100]	; (8222c <DD_READ_SENSORS+0x538>)
   821c8:	881b      	ldrh	r3, [r3, #0]
   821ca:	b29a      	uxth	r2, r3
   821cc:	683b      	ldr	r3, [r7, #0]
   821ce:	801a      	strh	r2, [r3, #0]
		   
		   DD_SPI_PCS_DECODER_DEACTIVE();
   821d0:	4b17      	ldr	r3, [pc, #92]	; (82230 <DD_READ_SENSORS+0x53c>)
   821d2:	4798      	blx	r3
		   DD_DISABLE_ISOLATORS_MISO_PIN();		  
   821d4:	4b17      	ldr	r3, [pc, #92]	; (82234 <DD_READ_SENSORS+0x540>)
   821d6:	4798      	blx	r3
		   
		   return SENSOR_READ_OK; 
   821d8:	2300      	movs	r3, #0
   821da:	e357      	b.n	8288c <DD_READ_SENSORS+0xb98>
		break;
		return SENSOR_READ_OK;
		
		case SV_CS1_ID:
		  
		   command_data_array[0] = ADC128S022_ADC_IP(ADC128S022_CONDUCTIVITY_SENSOR_RMS_VOLTAGE);
   821dc:	4b0c      	ldr	r3, [pc, #48]	; (82210 <DD_READ_SENSORS+0x51c>)
   821de:	2200      	movs	r2, #0
   821e0:	701a      	strb	r2, [r3, #0]
		   command_data_array[1] = 0;  		   
   821e2:	4b0b      	ldr	r3, [pc, #44]	; (82210 <DD_READ_SENSORS+0x51c>)
   821e4:	2200      	movs	r2, #0
   821e6:	705a      	strb	r2, [r3, #1]
            DD_SPI_PCS_DECODER_ACTIVE();
   821e8:	4b0b      	ldr	r3, [pc, #44]	; (82218 <DD_READ_SENSORS+0x524>)
   821ea:	4798      	blx	r3
            DD_CON_ADC_CHIP_SELECT();
   821ec:	4b16      	ldr	r3, [pc, #88]	; (82248 <DD_READ_SENSORS+0x554>)
   821ee:	4798      	blx	r3
			DD_DISABLE_ISOLATORS_MISO_PIN();
   821f0:	4b10      	ldr	r3, [pc, #64]	; (82234 <DD_READ_SENSORS+0x540>)
   821f2:	4798      	blx	r3
            DD_ENABLE_ISOLATOR_3();
   821f4:	4b15      	ldr	r3, [pc, #84]	; (8224c <DD_READ_SENSORS+0x558>)
   821f6:	4798      	blx	r3
            dd_spi_set_peripheral_chip_select_value(ISOLTR_3_CS_ID);
   821f8:	2003      	movs	r0, #3
   821fa:	4b0a      	ldr	r3, [pc, #40]	; (82224 <DD_READ_SENSORS+0x530>)
   821fc:	4798      	blx	r3
            dd_spi_master_read(&command_data_array, 2, ISOLTR_3_CS_ID);		           
   821fe:	2203      	movs	r2, #3
   82200:	2102      	movs	r1, #2
   82202:	4803      	ldr	r0, [pc, #12]	; (82210 <DD_READ_SENSORS+0x51c>)
   82204:	4b08      	ldr	r3, [pc, #32]	; (82228 <DD_READ_SENSORS+0x534>)
   82206:	4798      	blx	r3
			for(unsigned int count=0; count<1000; count++ )   { ; }				
   82208:	2300      	movs	r3, #0
   8220a:	653b      	str	r3, [r7, #80]	; 0x50
   8220c:	e023      	b.n	82256 <DD_READ_SENSORS+0x562>
   8220e:	bf00      	nop
   82210:	20070aec 	.word	0x20070aec
   82214:	400e0e00 	.word	0x400e0e00
   82218:	00081b01 	.word	0x00081b01
   8221c:	00081b69 	.word	0x00081b69
   82220:	00081a5d 	.word	0x00081a5d
   82224:	000816b5 	.word	0x000816b5
   82228:	0008175d 	.word	0x0008175d
   8222c:	20070ae8 	.word	0x20070ae8
   82230:	00081b1d 	.word	0x00081b1d
   82234:	00081b39 	.word	0x00081b39
   82238:	00081a79 	.word	0x00081a79
   8223c:	00081aa9 	.word	0x00081aa9
   82240:	00081b9d 	.word	0x00081b9d
   82244:	00081a91 	.word	0x00081a91
   82248:	00081ae1 	.word	0x00081ae1
   8224c:	00081bd1 	.word	0x00081bd1
   82250:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   82252:	3301      	adds	r3, #1
   82254:	653b      	str	r3, [r7, #80]	; 0x50
   82256:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   82258:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   8225c:	d3f8      	bcc.n	82250 <DD_READ_SENSORS+0x55c>
		   command_data_array[0] = ADC128S022_ADC_IP(ADC128S022_CONDUCTIVITY_SENSOR_RMS_VOLTAGE);
   8225e:	4b8f      	ldr	r3, [pc, #572]	; (8249c <DD_READ_SENSORS+0x7a8>)
   82260:	2200      	movs	r2, #0
   82262:	701a      	strb	r2, [r3, #0]
		   command_data_array[1] = 0;  
   82264:	4b8d      	ldr	r3, [pc, #564]	; (8249c <DD_READ_SENSORS+0x7a8>)
   82266:	2200      	movs	r2, #0
   82268:	705a      	strb	r2, [r3, #1]
		    dd_spi_master_read(&command_data_array, 2, ISOLTR_3_CS_ID);
   8226a:	2203      	movs	r2, #3
   8226c:	2102      	movs	r1, #2
   8226e:	488b      	ldr	r0, [pc, #556]	; (8249c <DD_READ_SENSORS+0x7a8>)
   82270:	4b8b      	ldr	r3, [pc, #556]	; (824a0 <DD_READ_SENSORS+0x7ac>)
   82272:	4798      	blx	r3
		   spi_data.bytearray[1]=command_data_array[0];
   82274:	4b89      	ldr	r3, [pc, #548]	; (8249c <DD_READ_SENSORS+0x7a8>)
   82276:	781a      	ldrb	r2, [r3, #0]
   82278:	4b8a      	ldr	r3, [pc, #552]	; (824a4 <DD_READ_SENSORS+0x7b0>)
   8227a:	705a      	strb	r2, [r3, #1]
           spi_data.bytearray[0]=command_data_array[1];			
   8227c:	4b87      	ldr	r3, [pc, #540]	; (8249c <DD_READ_SENSORS+0x7a8>)
   8227e:	785a      	ldrb	r2, [r3, #1]
   82280:	4b88      	ldr	r3, [pc, #544]	; (824a4 <DD_READ_SENSORS+0x7b0>)
   82282:	701a      	strb	r2, [r3, #0]
           CONDUCTIVITY_SENSOR_RMS_VOLTAGE = spi_data.Twobyte;		   
   82284:	4b87      	ldr	r3, [pc, #540]	; (824a4 <DD_READ_SENSORS+0x7b0>)
   82286:	881b      	ldrh	r3, [r3, #0]
   82288:	847b      	strh	r3, [r7, #34]	; 0x22

			command_data_array[0] = ADC128S022_ADC_IP(ADC128S022_CS1_SEN_RMS_CURRENT);
   8228a:	4b84      	ldr	r3, [pc, #528]	; (8249c <DD_READ_SENSORS+0x7a8>)
   8228c:	2208      	movs	r2, #8
   8228e:	701a      	strb	r2, [r3, #0]
		   command_data_array[1] = 0;  		   
   82290:	4b82      	ldr	r3, [pc, #520]	; (8249c <DD_READ_SENSORS+0x7a8>)
   82292:	2200      	movs	r2, #0
   82294:	705a      	strb	r2, [r3, #1]
            DD_SPI_PCS_DECODER_ACTIVE();
   82296:	4b84      	ldr	r3, [pc, #528]	; (824a8 <DD_READ_SENSORS+0x7b4>)
   82298:	4798      	blx	r3
            DD_CON_ADC_CHIP_SELECT();
   8229a:	4b84      	ldr	r3, [pc, #528]	; (824ac <DD_READ_SENSORS+0x7b8>)
   8229c:	4798      	blx	r3
			DD_DISABLE_ISOLATORS_MISO_PIN();
   8229e:	4b84      	ldr	r3, [pc, #528]	; (824b0 <DD_READ_SENSORS+0x7bc>)
   822a0:	4798      	blx	r3
            DD_ENABLE_ISOLATOR_3();
   822a2:	4b84      	ldr	r3, [pc, #528]	; (824b4 <DD_READ_SENSORS+0x7c0>)
   822a4:	4798      	blx	r3
            dd_spi_set_peripheral_chip_select_value(ISOLTR_3_CS_ID);
   822a6:	2003      	movs	r0, #3
   822a8:	4b83      	ldr	r3, [pc, #524]	; (824b8 <DD_READ_SENSORS+0x7c4>)
   822aa:	4798      	blx	r3
            dd_spi_master_read(&command_data_array, 2, ISOLTR_3_CS_ID);		           
   822ac:	2203      	movs	r2, #3
   822ae:	2102      	movs	r1, #2
   822b0:	487a      	ldr	r0, [pc, #488]	; (8249c <DD_READ_SENSORS+0x7a8>)
   822b2:	4b7b      	ldr	r3, [pc, #492]	; (824a0 <DD_READ_SENSORS+0x7ac>)
   822b4:	4798      	blx	r3
			for(unsigned int count=0; count<1000; count++ )   {;}				
   822b6:	2300      	movs	r3, #0
   822b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   822ba:	e002      	b.n	822c2 <DD_READ_SENSORS+0x5ce>
   822bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   822be:	3301      	adds	r3, #1
   822c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   822c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   822c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   822c8:	d3f8      	bcc.n	822bc <DD_READ_SENSORS+0x5c8>
		   command_data_array[0] = ADC128S022_ADC_IP(ADC128S022_CS1_SEN_RMS_CURRENT);
   822ca:	4b74      	ldr	r3, [pc, #464]	; (8249c <DD_READ_SENSORS+0x7a8>)
   822cc:	2208      	movs	r2, #8
   822ce:	701a      	strb	r2, [r3, #0]
		   command_data_array[1] = 0;  
   822d0:	4b72      	ldr	r3, [pc, #456]	; (8249c <DD_READ_SENSORS+0x7a8>)
   822d2:	2200      	movs	r2, #0
   822d4:	705a      	strb	r2, [r3, #1]
		   dd_spi_master_read(&command_data_array, 2, ISOLTR_3_CS_ID);
   822d6:	2203      	movs	r2, #3
   822d8:	2102      	movs	r1, #2
   822da:	4870      	ldr	r0, [pc, #448]	; (8249c <DD_READ_SENSORS+0x7a8>)
   822dc:	4b70      	ldr	r3, [pc, #448]	; (824a0 <DD_READ_SENSORS+0x7ac>)
   822de:	4798      	blx	r3
		   spi_data.bytearray[1]=command_data_array[0];
   822e0:	4b6e      	ldr	r3, [pc, #440]	; (8249c <DD_READ_SENSORS+0x7a8>)
   822e2:	781a      	ldrb	r2, [r3, #0]
   822e4:	4b6f      	ldr	r3, [pc, #444]	; (824a4 <DD_READ_SENSORS+0x7b0>)
   822e6:	705a      	strb	r2, [r3, #1]
           spi_data.bytearray[0]=command_data_array[1];			   
   822e8:	4b6c      	ldr	r3, [pc, #432]	; (8249c <DD_READ_SENSORS+0x7a8>)
   822ea:	785a      	ldrb	r2, [r3, #1]
   822ec:	4b6d      	ldr	r3, [pc, #436]	; (824a4 <DD_READ_SENSORS+0x7b0>)
   822ee:	701a      	strb	r2, [r3, #0]
		    uint16_t CS1_SEN_RMS_CURRENT;		
            CS1_SEN_RMS_CURRENT = spi_data.Twobyte;	
   822f0:	4b6c      	ldr	r3, [pc, #432]	; (824a4 <DD_READ_SENSORS+0x7b0>)
   822f2:	881b      	ldrh	r3, [r3, #0]
   822f4:	843b      	strh	r3, [r7, #32]
		   	*sensor_status = (CS1_SEN_RMS_CURRENT*1000)/ CONDUCTIVITY_SENSOR_RMS_VOLTAGE;				
   822f6:	8c3b      	ldrh	r3, [r7, #32]
   822f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   822fc:	fb02 f203 	mul.w	r2, r2, r3
   82300:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
   82302:	fb92 f3f3 	sdiv	r3, r2, r3
   82306:	b29a      	uxth	r2, r3
   82308:	683b      	ldr	r3, [r7, #0]
   8230a:	801a      	strh	r2, [r3, #0]
            DD_SPI_PCS_DECODER_DEACTIVE();
   8230c:	4b6b      	ldr	r3, [pc, #428]	; (824bc <DD_READ_SENSORS+0x7c8>)
   8230e:	4798      	blx	r3
            DD_DISABLE_ISOLATORS_MISO_PIN();		   
   82310:	4b67      	ldr	r3, [pc, #412]	; (824b0 <DD_READ_SENSORS+0x7bc>)
   82312:	4798      	blx	r3
		break;
   82314:	e2ba      	b.n	8288c <DD_READ_SENSORS+0xb98>

   
		
		case SV_CS2_ID:
		 command_data_array[0] = ADC128S022_ADC_IP(ADC128S022_CONDUCTIVITY_SENSOR_RMS_VOLTAGE);
   82316:	4b61      	ldr	r3, [pc, #388]	; (8249c <DD_READ_SENSORS+0x7a8>)
   82318:	2200      	movs	r2, #0
   8231a:	701a      	strb	r2, [r3, #0]
		   command_data_array[1] = 0;  		   
   8231c:	4b5f      	ldr	r3, [pc, #380]	; (8249c <DD_READ_SENSORS+0x7a8>)
   8231e:	2200      	movs	r2, #0
   82320:	705a      	strb	r2, [r3, #1]
            DD_SPI_PCS_DECODER_ACTIVE();
   82322:	4b61      	ldr	r3, [pc, #388]	; (824a8 <DD_READ_SENSORS+0x7b4>)
   82324:	4798      	blx	r3
            DD_CON_ADC_CHIP_SELECT();
   82326:	4b61      	ldr	r3, [pc, #388]	; (824ac <DD_READ_SENSORS+0x7b8>)
   82328:	4798      	blx	r3
			DD_DISABLE_ISOLATORS_MISO_PIN();
   8232a:	4b61      	ldr	r3, [pc, #388]	; (824b0 <DD_READ_SENSORS+0x7bc>)
   8232c:	4798      	blx	r3
            DD_ENABLE_ISOLATOR_3();
   8232e:	4b61      	ldr	r3, [pc, #388]	; (824b4 <DD_READ_SENSORS+0x7c0>)
   82330:	4798      	blx	r3
            dd_spi_set_peripheral_chip_select_value(ISOLTR_3_CS_ID);
   82332:	2003      	movs	r0, #3
   82334:	4b60      	ldr	r3, [pc, #384]	; (824b8 <DD_READ_SENSORS+0x7c4>)
   82336:	4798      	blx	r3
            dd_spi_master_read(&command_data_array, 2, ISOLTR_3_CS_ID);		           
   82338:	2203      	movs	r2, #3
   8233a:	2102      	movs	r1, #2
   8233c:	4857      	ldr	r0, [pc, #348]	; (8249c <DD_READ_SENSORS+0x7a8>)
   8233e:	4b58      	ldr	r3, [pc, #352]	; (824a0 <DD_READ_SENSORS+0x7ac>)
   82340:	4798      	blx	r3
			for(unsigned int count=0; count<1000; count++ )   {;}
   82342:	2300      	movs	r3, #0
   82344:	64bb      	str	r3, [r7, #72]	; 0x48
   82346:	e002      	b.n	8234e <DD_READ_SENSORS+0x65a>
   82348:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   8234a:	3301      	adds	r3, #1
   8234c:	64bb      	str	r3, [r7, #72]	; 0x48
   8234e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   82350:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   82354:	d3f8      	bcc.n	82348 <DD_READ_SENSORS+0x654>
		   command_data_array[0] = ADC128S022_ADC_IP(ADC128S022_CONDUCTIVITY_SENSOR_RMS_VOLTAGE);
   82356:	4b51      	ldr	r3, [pc, #324]	; (8249c <DD_READ_SENSORS+0x7a8>)
   82358:	2200      	movs	r2, #0
   8235a:	701a      	strb	r2, [r3, #0]
		   command_data_array[1] = 0;  
   8235c:	4b4f      	ldr	r3, [pc, #316]	; (8249c <DD_READ_SENSORS+0x7a8>)
   8235e:	2200      	movs	r2, #0
   82360:	705a      	strb	r2, [r3, #1]
		    dd_spi_master_read(&command_data_array, 2, ISOLTR_3_CS_ID);
   82362:	2203      	movs	r2, #3
   82364:	2102      	movs	r1, #2
   82366:	484d      	ldr	r0, [pc, #308]	; (8249c <DD_READ_SENSORS+0x7a8>)
   82368:	4b4d      	ldr	r3, [pc, #308]	; (824a0 <DD_READ_SENSORS+0x7ac>)
   8236a:	4798      	blx	r3
		   spi_data.bytearray[1]=command_data_array[0];
   8236c:	4b4b      	ldr	r3, [pc, #300]	; (8249c <DD_READ_SENSORS+0x7a8>)
   8236e:	781a      	ldrb	r2, [r3, #0]
   82370:	4b4c      	ldr	r3, [pc, #304]	; (824a4 <DD_READ_SENSORS+0x7b0>)
   82372:	705a      	strb	r2, [r3, #1]
           spi_data.bytearray[0]=command_data_array[1];			
   82374:	4b49      	ldr	r3, [pc, #292]	; (8249c <DD_READ_SENSORS+0x7a8>)
   82376:	785a      	ldrb	r2, [r3, #1]
   82378:	4b4a      	ldr	r3, [pc, #296]	; (824a4 <DD_READ_SENSORS+0x7b0>)
   8237a:	701a      	strb	r2, [r3, #0]
           CONDUCTIVITY_SENSOR_RMS_VOLTAGE = spi_data.Twobyte;	       
   8237c:	4b49      	ldr	r3, [pc, #292]	; (824a4 <DD_READ_SENSORS+0x7b0>)
   8237e:	881b      	ldrh	r3, [r3, #0]
   82380:	847b      	strh	r3, [r7, #34]	; 0x22
			
			command_data_array[0] = ADC128S022_ADC_IP(ADC128S022_CS2_SEN_RMS_CURRENT);
   82382:	4b46      	ldr	r3, [pc, #280]	; (8249c <DD_READ_SENSORS+0x7a8>)
   82384:	2210      	movs	r2, #16
   82386:	701a      	strb	r2, [r3, #0]
		   command_data_array[1] = 0;  		   
   82388:	4b44      	ldr	r3, [pc, #272]	; (8249c <DD_READ_SENSORS+0x7a8>)
   8238a:	2200      	movs	r2, #0
   8238c:	705a      	strb	r2, [r3, #1]
            DD_SPI_PCS_DECODER_ACTIVE();
   8238e:	4b46      	ldr	r3, [pc, #280]	; (824a8 <DD_READ_SENSORS+0x7b4>)
   82390:	4798      	blx	r3
            DD_CON_ADC_CHIP_SELECT();
   82392:	4b46      	ldr	r3, [pc, #280]	; (824ac <DD_READ_SENSORS+0x7b8>)
   82394:	4798      	blx	r3
			DD_DISABLE_ISOLATORS_MISO_PIN();
   82396:	4b46      	ldr	r3, [pc, #280]	; (824b0 <DD_READ_SENSORS+0x7bc>)
   82398:	4798      	blx	r3
            DD_ENABLE_ISOLATOR_3();
   8239a:	4b46      	ldr	r3, [pc, #280]	; (824b4 <DD_READ_SENSORS+0x7c0>)
   8239c:	4798      	blx	r3
            dd_spi_set_peripheral_chip_select_value(ISOLTR_3_CS_ID);
   8239e:	2003      	movs	r0, #3
   823a0:	4b45      	ldr	r3, [pc, #276]	; (824b8 <DD_READ_SENSORS+0x7c4>)
   823a2:	4798      	blx	r3
            dd_spi_master_read(&command_data_array, 2, ISOLTR_3_CS_ID);		           
   823a4:	2203      	movs	r2, #3
   823a6:	2102      	movs	r1, #2
   823a8:	483c      	ldr	r0, [pc, #240]	; (8249c <DD_READ_SENSORS+0x7a8>)
   823aa:	4b3d      	ldr	r3, [pc, #244]	; (824a0 <DD_READ_SENSORS+0x7ac>)
   823ac:	4798      	blx	r3
			for(unsigned int count=0; count<1000; count++ )   {;}
   823ae:	2300      	movs	r3, #0
   823b0:	647b      	str	r3, [r7, #68]	; 0x44
   823b2:	e002      	b.n	823ba <DD_READ_SENSORS+0x6c6>
   823b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   823b6:	3301      	adds	r3, #1
   823b8:	647b      	str	r3, [r7, #68]	; 0x44
   823ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   823bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   823c0:	d3f8      	bcc.n	823b4 <DD_READ_SENSORS+0x6c0>
			uint16_t CS2_SEN_RMS_CURRENT;			
		   command_data_array[0] = ADC128S022_ADC_IP(ADC128S022_CS2_SEN_RMS_CURRENT);
   823c2:	4b36      	ldr	r3, [pc, #216]	; (8249c <DD_READ_SENSORS+0x7a8>)
   823c4:	2210      	movs	r2, #16
   823c6:	701a      	strb	r2, [r3, #0]
		   command_data_array[1] = 0;  
   823c8:	4b34      	ldr	r3, [pc, #208]	; (8249c <DD_READ_SENSORS+0x7a8>)
   823ca:	2200      	movs	r2, #0
   823cc:	705a      	strb	r2, [r3, #1]
		   dd_spi_master_read(&command_data_array, 2, ISOLTR_3_CS_ID);
   823ce:	2203      	movs	r2, #3
   823d0:	2102      	movs	r1, #2
   823d2:	4832      	ldr	r0, [pc, #200]	; (8249c <DD_READ_SENSORS+0x7a8>)
   823d4:	4b32      	ldr	r3, [pc, #200]	; (824a0 <DD_READ_SENSORS+0x7ac>)
   823d6:	4798      	blx	r3
		   spi_data.bytearray[1]=command_data_array[0];
   823d8:	4b30      	ldr	r3, [pc, #192]	; (8249c <DD_READ_SENSORS+0x7a8>)
   823da:	781a      	ldrb	r2, [r3, #0]
   823dc:	4b31      	ldr	r3, [pc, #196]	; (824a4 <DD_READ_SENSORS+0x7b0>)
   823de:	705a      	strb	r2, [r3, #1]
           spi_data.bytearray[0]=command_data_array[1];			
   823e0:	4b2e      	ldr	r3, [pc, #184]	; (8249c <DD_READ_SENSORS+0x7a8>)
   823e2:	785a      	ldrb	r2, [r3, #1]
   823e4:	4b2f      	ldr	r3, [pc, #188]	; (824a4 <DD_READ_SENSORS+0x7b0>)
   823e6:	701a      	strb	r2, [r3, #0]
           CS2_SEN_RMS_CURRENT = spi_data.Twobyte;	
   823e8:	4b2e      	ldr	r3, [pc, #184]	; (824a4 <DD_READ_SENSORS+0x7b0>)
   823ea:	881b      	ldrh	r3, [r3, #0]
   823ec:	83fb      	strh	r3, [r7, #30]
		   	*sensor_status = (CS2_SEN_RMS_CURRENT*1000)/ CONDUCTIVITY_SENSOR_RMS_VOLTAGE;            
   823ee:	8bfb      	ldrh	r3, [r7, #30]
   823f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   823f4:	fb02 f203 	mul.w	r2, r2, r3
   823f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
   823fa:	fb92 f3f3 	sdiv	r3, r2, r3
   823fe:	b29a      	uxth	r2, r3
   82400:	683b      	ldr	r3, [r7, #0]
   82402:	801a      	strh	r2, [r3, #0]
            DD_SPI_PCS_DECODER_DEACTIVE();
   82404:	4b2d      	ldr	r3, [pc, #180]	; (824bc <DD_READ_SENSORS+0x7c8>)
   82406:	4798      	blx	r3
            DD_DISABLE_ISOLATORS_MISO_PIN();
   82408:	4b29      	ldr	r3, [pc, #164]	; (824b0 <DD_READ_SENSORS+0x7bc>)
   8240a:	4798      	blx	r3
			
		break;		  
   8240c:	e23e      	b.n	8288c <DD_READ_SENSORS+0xb98>
		
		case SV_CS3_ID:
		 command_data_array[0] = ADC128S022_ADC_IP(ADC128S022_CONDUCTIVITY_SENSOR_RMS_VOLTAGE);
   8240e:	4b23      	ldr	r3, [pc, #140]	; (8249c <DD_READ_SENSORS+0x7a8>)
   82410:	2200      	movs	r2, #0
   82412:	701a      	strb	r2, [r3, #0]
		   command_data_array[1] = 0;  		   
   82414:	4b21      	ldr	r3, [pc, #132]	; (8249c <DD_READ_SENSORS+0x7a8>)
   82416:	2200      	movs	r2, #0
   82418:	705a      	strb	r2, [r3, #1]
            DD_SPI_PCS_DECODER_ACTIVE();
   8241a:	4b23      	ldr	r3, [pc, #140]	; (824a8 <DD_READ_SENSORS+0x7b4>)
   8241c:	4798      	blx	r3
            DD_CON_ADC_CHIP_SELECT();
   8241e:	4b23      	ldr	r3, [pc, #140]	; (824ac <DD_READ_SENSORS+0x7b8>)
   82420:	4798      	blx	r3
			DD_DISABLE_ISOLATORS_MISO_PIN();
   82422:	4b23      	ldr	r3, [pc, #140]	; (824b0 <DD_READ_SENSORS+0x7bc>)
   82424:	4798      	blx	r3
            DD_ENABLE_ISOLATOR_3();
   82426:	4b23      	ldr	r3, [pc, #140]	; (824b4 <DD_READ_SENSORS+0x7c0>)
   82428:	4798      	blx	r3
            dd_spi_set_peripheral_chip_select_value(ISOLTR_3_CS_ID);
   8242a:	2003      	movs	r0, #3
   8242c:	4b22      	ldr	r3, [pc, #136]	; (824b8 <DD_READ_SENSORS+0x7c4>)
   8242e:	4798      	blx	r3
            dd_spi_master_read(&command_data_array, 2, ISOLTR_3_CS_ID);		           
   82430:	2203      	movs	r2, #3
   82432:	2102      	movs	r1, #2
   82434:	4819      	ldr	r0, [pc, #100]	; (8249c <DD_READ_SENSORS+0x7a8>)
   82436:	4b1a      	ldr	r3, [pc, #104]	; (824a0 <DD_READ_SENSORS+0x7ac>)
   82438:	4798      	blx	r3
			for(unsigned int count=0; count<1000; count++ )   {;}
   8243a:	2300      	movs	r3, #0
   8243c:	643b      	str	r3, [r7, #64]	; 0x40
   8243e:	e002      	b.n	82446 <DD_READ_SENSORS+0x752>
   82440:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   82442:	3301      	adds	r3, #1
   82444:	643b      	str	r3, [r7, #64]	; 0x40
   82446:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   82448:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   8244c:	d3f8      	bcc.n	82440 <DD_READ_SENSORS+0x74c>
		   command_data_array[0] = ADC128S022_ADC_IP(ADC128S022_CONDUCTIVITY_SENSOR_RMS_VOLTAGE);
   8244e:	4b13      	ldr	r3, [pc, #76]	; (8249c <DD_READ_SENSORS+0x7a8>)
   82450:	2200      	movs	r2, #0
   82452:	701a      	strb	r2, [r3, #0]
		   command_data_array[1] = 0;  
   82454:	4b11      	ldr	r3, [pc, #68]	; (8249c <DD_READ_SENSORS+0x7a8>)
   82456:	2200      	movs	r2, #0
   82458:	705a      	strb	r2, [r3, #1]
		    dd_spi_master_read(&command_data_array, 2, ISOLTR_3_CS_ID);
   8245a:	2203      	movs	r2, #3
   8245c:	2102      	movs	r1, #2
   8245e:	480f      	ldr	r0, [pc, #60]	; (8249c <DD_READ_SENSORS+0x7a8>)
   82460:	4b0f      	ldr	r3, [pc, #60]	; (824a0 <DD_READ_SENSORS+0x7ac>)
   82462:	4798      	blx	r3
		   spi_data.bytearray[1]=command_data_array[0];
   82464:	4b0d      	ldr	r3, [pc, #52]	; (8249c <DD_READ_SENSORS+0x7a8>)
   82466:	781a      	ldrb	r2, [r3, #0]
   82468:	4b0e      	ldr	r3, [pc, #56]	; (824a4 <DD_READ_SENSORS+0x7b0>)
   8246a:	705a      	strb	r2, [r3, #1]
           spi_data.bytearray[0]=command_data_array[1];			
   8246c:	4b0b      	ldr	r3, [pc, #44]	; (8249c <DD_READ_SENSORS+0x7a8>)
   8246e:	785a      	ldrb	r2, [r3, #1]
   82470:	4b0c      	ldr	r3, [pc, #48]	; (824a4 <DD_READ_SENSORS+0x7b0>)
   82472:	701a      	strb	r2, [r3, #0]
           CONDUCTIVITY_SENSOR_RMS_VOLTAGE = spi_data.Twobyte;				
   82474:	4b0b      	ldr	r3, [pc, #44]	; (824a4 <DD_READ_SENSORS+0x7b0>)
   82476:	881b      	ldrh	r3, [r3, #0]
   82478:	847b      	strh	r3, [r7, #34]	; 0x22
			
			command_data_array[0] = ADC128S022_ADC_IP(ADC128S022_CS3_SEN_RMS_CURRENT);
   8247a:	4b08      	ldr	r3, [pc, #32]	; (8249c <DD_READ_SENSORS+0x7a8>)
   8247c:	2238      	movs	r2, #56	; 0x38
   8247e:	701a      	strb	r2, [r3, #0]
		    command_data_array[1] = 0;            
   82480:	4b06      	ldr	r3, [pc, #24]	; (8249c <DD_READ_SENSORS+0x7a8>)
   82482:	2200      	movs	r2, #0
   82484:	705a      	strb	r2, [r3, #1]
            dd_spi_set_peripheral_chip_select_value(ISOLTR_3_CS_ID);
   82486:	2003      	movs	r0, #3
   82488:	4b0b      	ldr	r3, [pc, #44]	; (824b8 <DD_READ_SENSORS+0x7c4>)
   8248a:	4798      	blx	r3
            dd_spi_master_read(&command_data_array, 2, ISOLTR_3_CS_ID);		           
   8248c:	2203      	movs	r2, #3
   8248e:	2102      	movs	r1, #2
   82490:	4802      	ldr	r0, [pc, #8]	; (8249c <DD_READ_SENSORS+0x7a8>)
   82492:	4b03      	ldr	r3, [pc, #12]	; (824a0 <DD_READ_SENSORS+0x7ac>)
   82494:	4798      	blx	r3
			for(unsigned int count=0; count<1000; count++ )   {;}
   82496:	2300      	movs	r3, #0
   82498:	63fb      	str	r3, [r7, #60]	; 0x3c
   8249a:	e014      	b.n	824c6 <DD_READ_SENSORS+0x7d2>
   8249c:	20070aec 	.word	0x20070aec
   824a0:	0008175d 	.word	0x0008175d
   824a4:	20070ae8 	.word	0x20070ae8
   824a8:	00081b01 	.word	0x00081b01
   824ac:	00081ae1 	.word	0x00081ae1
   824b0:	00081b39 	.word	0x00081b39
   824b4:	00081bd1 	.word	0x00081bd1
   824b8:	000816b5 	.word	0x000816b5
   824bc:	00081b1d 	.word	0x00081b1d
   824c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   824c2:	3301      	adds	r3, #1
   824c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   824c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   824c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   824cc:	d3f8      	bcc.n	824c0 <DD_READ_SENSORS+0x7cc>
			uint16_t CS3_SEN_RMS_CURRENT;			
		   command_data_array[0] = ADC128S022_ADC_IP(ADC128S022_CS3_SEN_RMS_CURRENT);
   824ce:	4b88      	ldr	r3, [pc, #544]	; (826f0 <DD_READ_SENSORS+0x9fc>)
   824d0:	2238      	movs	r2, #56	; 0x38
   824d2:	701a      	strb	r2, [r3, #0]
		   command_data_array[1] = 0;  
   824d4:	4b86      	ldr	r3, [pc, #536]	; (826f0 <DD_READ_SENSORS+0x9fc>)
   824d6:	2200      	movs	r2, #0
   824d8:	705a      	strb	r2, [r3, #1]
		   dd_spi_master_read(&command_data_array, 2, ISOLTR_3_CS_ID);
   824da:	2203      	movs	r2, #3
   824dc:	2102      	movs	r1, #2
   824de:	4884      	ldr	r0, [pc, #528]	; (826f0 <DD_READ_SENSORS+0x9fc>)
   824e0:	4b84      	ldr	r3, [pc, #528]	; (826f4 <DD_READ_SENSORS+0xa00>)
   824e2:	4798      	blx	r3
		   spi_data.bytearray[1]=command_data_array[0];
   824e4:	4b82      	ldr	r3, [pc, #520]	; (826f0 <DD_READ_SENSORS+0x9fc>)
   824e6:	781a      	ldrb	r2, [r3, #0]
   824e8:	4b83      	ldr	r3, [pc, #524]	; (826f8 <DD_READ_SENSORS+0xa04>)
   824ea:	705a      	strb	r2, [r3, #1]
           spi_data.bytearray[0]=command_data_array[1];			
   824ec:	4b80      	ldr	r3, [pc, #512]	; (826f0 <DD_READ_SENSORS+0x9fc>)
   824ee:	785a      	ldrb	r2, [r3, #1]
   824f0:	4b81      	ldr	r3, [pc, #516]	; (826f8 <DD_READ_SENSORS+0xa04>)
   824f2:	701a      	strb	r2, [r3, #0]
           CS3_SEN_RMS_CURRENT = spi_data.Twobyte;	
   824f4:	4b80      	ldr	r3, [pc, #512]	; (826f8 <DD_READ_SENSORS+0xa04>)
   824f6:	881b      	ldrh	r3, [r3, #0]
   824f8:	83bb      	strh	r3, [r7, #28]
		   
		   *sensor_status = (CS3_SEN_RMS_CURRENT*10000)/ CONDUCTIVITY_SENSOR_RMS_VOLTAGE;            
   824fa:	8bbb      	ldrh	r3, [r7, #28]
   824fc:	f242 7210 	movw	r2, #10000	; 0x2710
   82500:	fb02 f203 	mul.w	r2, r2, r3
   82504:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
   82506:	fb92 f3f3 	sdiv	r3, r2, r3
   8250a:	b29a      	uxth	r2, r3
   8250c:	683b      	ldr	r3, [r7, #0]
   8250e:	801a      	strh	r2, [r3, #0]
            DD_SPI_PCS_DECODER_DEACTIVE();
   82510:	4b7a      	ldr	r3, [pc, #488]	; (826fc <DD_READ_SENSORS+0xa08>)
   82512:	4798      	blx	r3
            DD_DISABLE_ISOLATORS_MISO_PIN();
   82514:	4b7a      	ldr	r3, [pc, #488]	; (82700 <DD_READ_SENSORS+0xa0c>)
   82516:	4798      	blx	r3
		
		    
		break;
   82518:	e1b8      	b.n	8288c <DD_READ_SENSORS+0xb98>
		
		case SV_DAC1_ID:
		
		
	         command_data_array[0] = ADC128S022_ADC_IP(ADC128S022_CONDUCTIVITY_SENSOR_RMS_VOLTAGE);
   8251a:	4b75      	ldr	r3, [pc, #468]	; (826f0 <DD_READ_SENSORS+0x9fc>)
   8251c:	2200      	movs	r2, #0
   8251e:	701a      	strb	r2, [r3, #0]
	         command_data_array[1] = 0;
   82520:	4b73      	ldr	r3, [pc, #460]	; (826f0 <DD_READ_SENSORS+0x9fc>)
   82522:	2200      	movs	r2, #0
   82524:	705a      	strb	r2, [r3, #1]
	         DD_SPI_PCS_DECODER_ACTIVE();
   82526:	4b77      	ldr	r3, [pc, #476]	; (82704 <DD_READ_SENSORS+0xa10>)
   82528:	4798      	blx	r3
	         DD_CON_ADC_CHIP_SELECT();
   8252a:	4b77      	ldr	r3, [pc, #476]	; (82708 <DD_READ_SENSORS+0xa14>)
   8252c:	4798      	blx	r3
	         DD_DISABLE_ISOLATORS_MISO_PIN();
   8252e:	4b74      	ldr	r3, [pc, #464]	; (82700 <DD_READ_SENSORS+0xa0c>)
   82530:	4798      	blx	r3
	         DD_ENABLE_ISOLATOR_3();
   82532:	4b76      	ldr	r3, [pc, #472]	; (8270c <DD_READ_SENSORS+0xa18>)
   82534:	4798      	blx	r3
	         dd_spi_set_peripheral_chip_select_value(ISOLTR_3_CS_ID);
   82536:	2003      	movs	r0, #3
   82538:	4b75      	ldr	r3, [pc, #468]	; (82710 <DD_READ_SENSORS+0xa1c>)
   8253a:	4798      	blx	r3
	         dd_spi_master_read(&command_data_array, 2, ISOLTR_3_CS_ID);
   8253c:	2203      	movs	r2, #3
   8253e:	2102      	movs	r1, #2
   82540:	486b      	ldr	r0, [pc, #428]	; (826f0 <DD_READ_SENSORS+0x9fc>)
   82542:	4b6c      	ldr	r3, [pc, #432]	; (826f4 <DD_READ_SENSORS+0xa00>)
   82544:	4798      	blx	r3
	         for(unsigned int count=0; count<1000; count++ )   {
   82546:	2300      	movs	r3, #0
   82548:	63bb      	str	r3, [r7, #56]	; 0x38
   8254a:	e002      	b.n	82552 <DD_READ_SENSORS+0x85e>
   8254c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   8254e:	3301      	adds	r3, #1
   82550:	63bb      	str	r3, [r7, #56]	; 0x38
   82552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   82554:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   82558:	d3f8      	bcc.n	8254c <DD_READ_SENSORS+0x858>
		         ;
	         }
	         command_data_array[0] = ADC128S022_ADC_IP(ADC128S022_CONDUCTIVITY_SENSOR_RMS_VOLTAGE);
   8255a:	4b65      	ldr	r3, [pc, #404]	; (826f0 <DD_READ_SENSORS+0x9fc>)
   8255c:	2200      	movs	r2, #0
   8255e:	701a      	strb	r2, [r3, #0]
	         command_data_array[1] = 0;
   82560:	4b63      	ldr	r3, [pc, #396]	; (826f0 <DD_READ_SENSORS+0x9fc>)
   82562:	2200      	movs	r2, #0
   82564:	705a      	strb	r2, [r3, #1]
	         dd_spi_master_read(&command_data_array, 2, ISOLTR_3_CS_ID);
   82566:	2203      	movs	r2, #3
   82568:	2102      	movs	r1, #2
   8256a:	4861      	ldr	r0, [pc, #388]	; (826f0 <DD_READ_SENSORS+0x9fc>)
   8256c:	4b61      	ldr	r3, [pc, #388]	; (826f4 <DD_READ_SENSORS+0xa00>)
   8256e:	4798      	blx	r3
	         spi_data.bytearray[1]=command_data_array[0];
   82570:	4b5f      	ldr	r3, [pc, #380]	; (826f0 <DD_READ_SENSORS+0x9fc>)
   82572:	781a      	ldrb	r2, [r3, #0]
   82574:	4b60      	ldr	r3, [pc, #384]	; (826f8 <DD_READ_SENSORS+0xa04>)
   82576:	705a      	strb	r2, [r3, #1]
	         spi_data.bytearray[0]=command_data_array[1];
   82578:	4b5d      	ldr	r3, [pc, #372]	; (826f0 <DD_READ_SENSORS+0x9fc>)
   8257a:	785a      	ldrb	r2, [r3, #1]
   8257c:	4b5e      	ldr	r3, [pc, #376]	; (826f8 <DD_READ_SENSORS+0xa04>)
   8257e:	701a      	strb	r2, [r3, #0]
	         CONDUCTIVITY_SENSOR_RMS_VOLTAGE = spi_data.Twobyte;
   82580:	4b5d      	ldr	r3, [pc, #372]	; (826f8 <DD_READ_SENSORS+0xa04>)
   82582:	881b      	ldrh	r3, [r3, #0]
   82584:	847b      	strh	r3, [r7, #34]	; 0x22
	         // 	        }
	         // 			DD_SPI_PCS_DECODER_DEACTIVE();
	         //             DD_DISABLE_ISOLATORS_MISO_PIN();
	         
	         
	         command_data_array[0] = ADC128S022_ADC_IP(ADC128S022_DAC1_SEN_RMS_CURRENT);
   82586:	4b5a      	ldr	r3, [pc, #360]	; (826f0 <DD_READ_SENSORS+0x9fc>)
   82588:	2228      	movs	r2, #40	; 0x28
   8258a:	701a      	strb	r2, [r3, #0]
	         command_data_array[1] = 0;
   8258c:	4b58      	ldr	r3, [pc, #352]	; (826f0 <DD_READ_SENSORS+0x9fc>)
   8258e:	2200      	movs	r2, #0
   82590:	705a      	strb	r2, [r3, #1]
	         DD_SPI_PCS_DECODER_ACTIVE();
   82592:	4b5c      	ldr	r3, [pc, #368]	; (82704 <DD_READ_SENSORS+0xa10>)
   82594:	4798      	blx	r3
	         DD_CON_ADC_CHIP_SELECT();
   82596:	4b5c      	ldr	r3, [pc, #368]	; (82708 <DD_READ_SENSORS+0xa14>)
   82598:	4798      	blx	r3
	         DD_DISABLE_ISOLATORS_MISO_PIN();
   8259a:	4b59      	ldr	r3, [pc, #356]	; (82700 <DD_READ_SENSORS+0xa0c>)
   8259c:	4798      	blx	r3
	         DD_ENABLE_ISOLATOR_3();
   8259e:	4b5b      	ldr	r3, [pc, #364]	; (8270c <DD_READ_SENSORS+0xa18>)
   825a0:	4798      	blx	r3
	         dd_spi_set_peripheral_chip_select_value(ISOLTR_3_CS_ID);
   825a2:	2003      	movs	r0, #3
   825a4:	4b5a      	ldr	r3, [pc, #360]	; (82710 <DD_READ_SENSORS+0xa1c>)
   825a6:	4798      	blx	r3
	         dd_spi_master_read(&command_data_array, 2, ISOLTR_3_CS_ID);
   825a8:	2203      	movs	r2, #3
   825aa:	2102      	movs	r1, #2
   825ac:	4850      	ldr	r0, [pc, #320]	; (826f0 <DD_READ_SENSORS+0x9fc>)
   825ae:	4b51      	ldr	r3, [pc, #324]	; (826f4 <DD_READ_SENSORS+0xa00>)
   825b0:	4798      	blx	r3
	         for(unsigned int count=0; count<1000; count++ )   {
   825b2:	2300      	movs	r3, #0
   825b4:	637b      	str	r3, [r7, #52]	; 0x34
   825b6:	e002      	b.n	825be <DD_READ_SENSORS+0x8ca>
   825b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   825ba:	3301      	adds	r3, #1
   825bc:	637b      	str	r3, [r7, #52]	; 0x34
   825be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   825c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   825c4:	d3f8      	bcc.n	825b8 <DD_READ_SENSORS+0x8c4>
		         ;
	         }
	         uint16_t DAC1_SEN_RMS_CURRENT;
	         float DAC1_RESISTANCE, DAC1_CONDUCTANCE;
	         
	         command_data_array[0] = ADC128S022_ADC_IP(ADC128S022_DAC1_SEN_RMS_CURRENT);
   825c6:	4b4a      	ldr	r3, [pc, #296]	; (826f0 <DD_READ_SENSORS+0x9fc>)
   825c8:	2228      	movs	r2, #40	; 0x28
   825ca:	701a      	strb	r2, [r3, #0]
	         command_data_array[1] = 0;
   825cc:	4b48      	ldr	r3, [pc, #288]	; (826f0 <DD_READ_SENSORS+0x9fc>)
   825ce:	2200      	movs	r2, #0
   825d0:	705a      	strb	r2, [r3, #1]
	         dd_spi_master_read(&command_data_array, 2, ISOLTR_3_CS_ID);
   825d2:	2203      	movs	r2, #3
   825d4:	2102      	movs	r1, #2
   825d6:	4846      	ldr	r0, [pc, #280]	; (826f0 <DD_READ_SENSORS+0x9fc>)
   825d8:	4b46      	ldr	r3, [pc, #280]	; (826f4 <DD_READ_SENSORS+0xa00>)
   825da:	4798      	blx	r3
	         spi_data.bytearray[1]=command_data_array[0];
   825dc:	4b44      	ldr	r3, [pc, #272]	; (826f0 <DD_READ_SENSORS+0x9fc>)
   825de:	781a      	ldrb	r2, [r3, #0]
   825e0:	4b45      	ldr	r3, [pc, #276]	; (826f8 <DD_READ_SENSORS+0xa04>)
   825e2:	705a      	strb	r2, [r3, #1]
	         spi_data.bytearray[0]=command_data_array[1];
   825e4:	4b42      	ldr	r3, [pc, #264]	; (826f0 <DD_READ_SENSORS+0x9fc>)
   825e6:	785a      	ldrb	r2, [r3, #1]
   825e8:	4b43      	ldr	r3, [pc, #268]	; (826f8 <DD_READ_SENSORS+0xa04>)
   825ea:	701a      	strb	r2, [r3, #0]
	         DAC1_SEN_RMS_CURRENT = spi_data.Twobyte;
   825ec:	4b42      	ldr	r3, [pc, #264]	; (826f8 <DD_READ_SENSORS+0xa04>)
   825ee:	881b      	ldrh	r3, [r3, #0]
   825f0:	837b      	strh	r3, [r7, #26]
	         DAC1_SEN_RMS_CURRENT;
	         DAC1_RESISTANCE =  (CONDUCTIVITY_SENSOR_RMS_VOLTAGE *1000) / (DAC1_SEN_RMS_CURRENT) ;
   825f2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
   825f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   825f8:	fb02 f203 	mul.w	r2, r2, r3
   825fc:	8b7b      	ldrh	r3, [r7, #26]
   825fe:	fb92 f2f3 	sdiv	r2, r2, r3
   82602:	4b44      	ldr	r3, [pc, #272]	; (82714 <DD_READ_SENSORS+0xa20>)
   82604:	4610      	mov	r0, r2
   82606:	4798      	blx	r3
   82608:	4603      	mov	r3, r0
   8260a:	617b      	str	r3, [r7, #20]
	         DAC1_RESISTANCE =  DAC1_RESISTANCE - 150;
   8260c:	4b42      	ldr	r3, [pc, #264]	; (82718 <DD_READ_SENSORS+0xa24>)
   8260e:	4943      	ldr	r1, [pc, #268]	; (8271c <DD_READ_SENSORS+0xa28>)
   82610:	6978      	ldr	r0, [r7, #20]
   82612:	4798      	blx	r3
   82614:	4603      	mov	r3, r0
   82616:	617b      	str	r3, [r7, #20]
	         DAC1_CONDUCTANCE = (1/DAC1_RESISTANCE)*1000000 ;
   82618:	4b41      	ldr	r3, [pc, #260]	; (82720 <DD_READ_SENSORS+0xa2c>)
   8261a:	6979      	ldr	r1, [r7, #20]
   8261c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
   82620:	4798      	blx	r3
   82622:	4603      	mov	r3, r0
   82624:	461a      	mov	r2, r3
   82626:	4b3f      	ldr	r3, [pc, #252]	; (82724 <DD_READ_SENSORS+0xa30>)
   82628:	493f      	ldr	r1, [pc, #252]	; (82728 <DD_READ_SENSORS+0xa34>)
   8262a:	4610      	mov	r0, r2
   8262c:	4798      	blx	r3
   8262e:	4603      	mov	r3, r0
   82630:	613b      	str	r3, [r7, #16]
	         
	         *sensor_status =  (uint16_t)DAC1_CONDUCTANCE;  //(DAC1_SEN_RMS_CURRENT*2000)/ CONDUCTIVITY_SENSOR_RMS_VOLTAGE;
   82632:	4b3e      	ldr	r3, [pc, #248]	; (8272c <DD_READ_SENSORS+0xa38>)
   82634:	6938      	ldr	r0, [r7, #16]
   82636:	4798      	blx	r3
   82638:	4603      	mov	r3, r0
   8263a:	b29a      	uxth	r2, r3
   8263c:	683b      	ldr	r3, [r7, #0]
   8263e:	801a      	strh	r2, [r3, #0]
	         DD_SPI_PCS_DECODER_DEACTIVE();
   82640:	4b2e      	ldr	r3, [pc, #184]	; (826fc <DD_READ_SENSORS+0xa08>)
   82642:	4798      	blx	r3
	         DD_DISABLE_ISOLATORS_MISO_PIN();
   82644:	4b2e      	ldr	r3, [pc, #184]	; (82700 <DD_READ_SENSORS+0xa0c>)
   82646:	4798      	blx	r3
	         break;
   82648:	e120      	b.n	8288c <DD_READ_SENSORS+0xb98>
		
		case SV_DAB_ID:
	command_data_array[0] = ADC128S022_ADC_IP(ADC128S022_CONDUCTIVITY_SENSOR_RMS_VOLTAGE);
   8264a:	4b29      	ldr	r3, [pc, #164]	; (826f0 <DD_READ_SENSORS+0x9fc>)
   8264c:	2200      	movs	r2, #0
   8264e:	701a      	strb	r2, [r3, #0]
		   command_data_array[1] = 0;  		   
   82650:	4b27      	ldr	r3, [pc, #156]	; (826f0 <DD_READ_SENSORS+0x9fc>)
   82652:	2200      	movs	r2, #0
   82654:	705a      	strb	r2, [r3, #1]
            DD_SPI_PCS_DECODER_ACTIVE();
   82656:	4b2b      	ldr	r3, [pc, #172]	; (82704 <DD_READ_SENSORS+0xa10>)
   82658:	4798      	blx	r3
            DD_CON_ADC_CHIP_SELECT();
   8265a:	4b2b      	ldr	r3, [pc, #172]	; (82708 <DD_READ_SENSORS+0xa14>)
   8265c:	4798      	blx	r3
			DD_DISABLE_ISOLATORS_MISO_PIN();
   8265e:	4b28      	ldr	r3, [pc, #160]	; (82700 <DD_READ_SENSORS+0xa0c>)
   82660:	4798      	blx	r3
            DD_ENABLE_ISOLATOR_3();
   82662:	4b2a      	ldr	r3, [pc, #168]	; (8270c <DD_READ_SENSORS+0xa18>)
   82664:	4798      	blx	r3
            dd_spi_set_peripheral_chip_select_value(ISOLTR_3_CS_ID);
   82666:	2003      	movs	r0, #3
   82668:	4b29      	ldr	r3, [pc, #164]	; (82710 <DD_READ_SENSORS+0xa1c>)
   8266a:	4798      	blx	r3
            dd_spi_master_read(&command_data_array, 2, ISOLTR_3_CS_ID);		           
   8266c:	2203      	movs	r2, #3
   8266e:	2102      	movs	r1, #2
   82670:	481f      	ldr	r0, [pc, #124]	; (826f0 <DD_READ_SENSORS+0x9fc>)
   82672:	4b20      	ldr	r3, [pc, #128]	; (826f4 <DD_READ_SENSORS+0xa00>)
   82674:	4798      	blx	r3
			for(unsigned int count=0; count<1000; count++ )   { ; }
   82676:	2300      	movs	r3, #0
   82678:	633b      	str	r3, [r7, #48]	; 0x30
   8267a:	e002      	b.n	82682 <DD_READ_SENSORS+0x98e>
   8267c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   8267e:	3301      	adds	r3, #1
   82680:	633b      	str	r3, [r7, #48]	; 0x30
   82682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   82684:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   82688:	d3f8      	bcc.n	8267c <DD_READ_SENSORS+0x988>
		   command_data_array[0] = ADC128S022_ADC_IP(ADC128S022_CONDUCTIVITY_SENSOR_RMS_VOLTAGE);
   8268a:	4b19      	ldr	r3, [pc, #100]	; (826f0 <DD_READ_SENSORS+0x9fc>)
   8268c:	2200      	movs	r2, #0
   8268e:	701a      	strb	r2, [r3, #0]
		   command_data_array[1] = 0;  
   82690:	4b17      	ldr	r3, [pc, #92]	; (826f0 <DD_READ_SENSORS+0x9fc>)
   82692:	2200      	movs	r2, #0
   82694:	705a      	strb	r2, [r3, #1]
		    dd_spi_master_read(&command_data_array, 2, ISOLTR_3_CS_ID);
   82696:	2203      	movs	r2, #3
   82698:	2102      	movs	r1, #2
   8269a:	4815      	ldr	r0, [pc, #84]	; (826f0 <DD_READ_SENSORS+0x9fc>)
   8269c:	4b15      	ldr	r3, [pc, #84]	; (826f4 <DD_READ_SENSORS+0xa00>)
   8269e:	4798      	blx	r3
		   spi_data.bytearray[1]=command_data_array[0];
   826a0:	4b13      	ldr	r3, [pc, #76]	; (826f0 <DD_READ_SENSORS+0x9fc>)
   826a2:	781a      	ldrb	r2, [r3, #0]
   826a4:	4b14      	ldr	r3, [pc, #80]	; (826f8 <DD_READ_SENSORS+0xa04>)
   826a6:	705a      	strb	r2, [r3, #1]
           spi_data.bytearray[0]=command_data_array[1];			
   826a8:	4b11      	ldr	r3, [pc, #68]	; (826f0 <DD_READ_SENSORS+0x9fc>)
   826aa:	785a      	ldrb	r2, [r3, #1]
   826ac:	4b12      	ldr	r3, [pc, #72]	; (826f8 <DD_READ_SENSORS+0xa04>)
   826ae:	701a      	strb	r2, [r3, #0]
           CONDUCTIVITY_SENSOR_RMS_VOLTAGE = spi_data.Twobyte;				    
   826b0:	4b11      	ldr	r3, [pc, #68]	; (826f8 <DD_READ_SENSORS+0xa04>)
   826b2:	881b      	ldrh	r3, [r3, #0]
   826b4:	847b      	strh	r3, [r7, #34]	; 0x22
			DD_SPI_PCS_DECODER_DEACTIVE();
   826b6:	4b11      	ldr	r3, [pc, #68]	; (826fc <DD_READ_SENSORS+0xa08>)
   826b8:	4798      	blx	r3
            DD_DISABLE_ISOLATORS_MISO_PIN();			
   826ba:	4b11      	ldr	r3, [pc, #68]	; (82700 <DD_READ_SENSORS+0xa0c>)
   826bc:	4798      	blx	r3
			
			command_data_array[0] = ADC128S022_ADC_IP(ADC128S022_DAB_SEN_RMS_CURRENT);
   826be:	4b0c      	ldr	r3, [pc, #48]	; (826f0 <DD_READ_SENSORS+0x9fc>)
   826c0:	2220      	movs	r2, #32
   826c2:	701a      	strb	r2, [r3, #0]
		    command_data_array[1] = 0;  		   
   826c4:	4b0a      	ldr	r3, [pc, #40]	; (826f0 <DD_READ_SENSORS+0x9fc>)
   826c6:	2200      	movs	r2, #0
   826c8:	705a      	strb	r2, [r3, #1]
            DD_SPI_PCS_DECODER_ACTIVE();
   826ca:	4b0e      	ldr	r3, [pc, #56]	; (82704 <DD_READ_SENSORS+0xa10>)
   826cc:	4798      	blx	r3
            DD_CON_ADC_CHIP_SELECT();
   826ce:	4b0e      	ldr	r3, [pc, #56]	; (82708 <DD_READ_SENSORS+0xa14>)
   826d0:	4798      	blx	r3
			DD_DISABLE_ISOLATORS_MISO_PIN();
   826d2:	4b0b      	ldr	r3, [pc, #44]	; (82700 <DD_READ_SENSORS+0xa0c>)
   826d4:	4798      	blx	r3
            DD_ENABLE_ISOLATOR_3();
   826d6:	4b0d      	ldr	r3, [pc, #52]	; (8270c <DD_READ_SENSORS+0xa18>)
   826d8:	4798      	blx	r3
            dd_spi_set_peripheral_chip_select_value(ISOLTR_3_CS_ID);
   826da:	2003      	movs	r0, #3
   826dc:	4b0c      	ldr	r3, [pc, #48]	; (82710 <DD_READ_SENSORS+0xa1c>)
   826de:	4798      	blx	r3
            dd_spi_master_read(&command_data_array, 2, ISOLTR_3_CS_ID);		           
   826e0:	2203      	movs	r2, #3
   826e2:	2102      	movs	r1, #2
   826e4:	4802      	ldr	r0, [pc, #8]	; (826f0 <DD_READ_SENSORS+0x9fc>)
   826e6:	4b03      	ldr	r3, [pc, #12]	; (826f4 <DD_READ_SENSORS+0xa00>)
   826e8:	4798      	blx	r3
			for(unsigned int count=0; count<1000; count++ )   {;}
   826ea:	2300      	movs	r3, #0
   826ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   826ee:	e022      	b.n	82736 <DD_READ_SENSORS+0xa42>
   826f0:	20070aec 	.word	0x20070aec
   826f4:	0008175d 	.word	0x0008175d
   826f8:	20070ae8 	.word	0x20070ae8
   826fc:	00081b1d 	.word	0x00081b1d
   82700:	00081b39 	.word	0x00081b39
   82704:	00081b01 	.word	0x00081b01
   82708:	00081ae1 	.word	0x00081ae1
   8270c:	00081bd1 	.word	0x00081bd1
   82710:	000816b5 	.word	0x000816b5
   82714:	000847d9 	.word	0x000847d9
   82718:	0008466d 	.word	0x0008466d
   8271c:	43160000 	.word	0x43160000
   82720:	000849e9 	.word	0x000849e9
   82724:	00084881 	.word	0x00084881
   82728:	49742400 	.word	0x49742400
   8272c:	00084b21 	.word	0x00084b21
   82730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   82732:	3301      	adds	r3, #1
   82734:	62fb      	str	r3, [r7, #44]	; 0x2c
   82736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   82738:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   8273c:	d3f8      	bcc.n	82730 <DD_READ_SENSORS+0xa3c>
			uint16_t DAB_SEN_RMS_CURRENT;
			
		   command_data_array[0] = ADC128S022_ADC_IP(ADC128S022_DAB_SEN_RMS_CURRENT);
   8273e:	4b55      	ldr	r3, [pc, #340]	; (82894 <DD_READ_SENSORS+0xba0>)
   82740:	2220      	movs	r2, #32
   82742:	701a      	strb	r2, [r3, #0]
		   command_data_array[1] = 0;  
   82744:	4b53      	ldr	r3, [pc, #332]	; (82894 <DD_READ_SENSORS+0xba0>)
   82746:	2200      	movs	r2, #0
   82748:	705a      	strb	r2, [r3, #1]
		   dd_spi_master_read(&command_data_array, 2, ISOLTR_3_CS_ID);
   8274a:	2203      	movs	r2, #3
   8274c:	2102      	movs	r1, #2
   8274e:	4851      	ldr	r0, [pc, #324]	; (82894 <DD_READ_SENSORS+0xba0>)
   82750:	4b51      	ldr	r3, [pc, #324]	; (82898 <DD_READ_SENSORS+0xba4>)
   82752:	4798      	blx	r3
		   spi_data.bytearray[1]=command_data_array[0];
   82754:	4b4f      	ldr	r3, [pc, #316]	; (82894 <DD_READ_SENSORS+0xba0>)
   82756:	781a      	ldrb	r2, [r3, #0]
   82758:	4b50      	ldr	r3, [pc, #320]	; (8289c <DD_READ_SENSORS+0xba8>)
   8275a:	705a      	strb	r2, [r3, #1]
           spi_data.bytearray[0]=command_data_array[1];			
   8275c:	4b4d      	ldr	r3, [pc, #308]	; (82894 <DD_READ_SENSORS+0xba0>)
   8275e:	785a      	ldrb	r2, [r3, #1]
   82760:	4b4e      	ldr	r3, [pc, #312]	; (8289c <DD_READ_SENSORS+0xba8>)
   82762:	701a      	strb	r2, [r3, #0]
           DAB_SEN_RMS_CURRENT = spi_data.Twobyte;	
   82764:	4b4d      	ldr	r3, [pc, #308]	; (8289c <DD_READ_SENSORS+0xba8>)
   82766:	881b      	ldrh	r3, [r3, #0]
   82768:	81fb      	strh	r3, [r7, #14]
		   *sensor_status = (DAB_SEN_RMS_CURRENT*10000)/ CONDUCTIVITY_SENSOR_RMS_VOLTAGE;            
   8276a:	89fb      	ldrh	r3, [r7, #14]
   8276c:	f242 7210 	movw	r2, #10000	; 0x2710
   82770:	fb02 f203 	mul.w	r2, r2, r3
   82774:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
   82776:	fb92 f3f3 	sdiv	r3, r2, r3
   8277a:	b29a      	uxth	r2, r3
   8277c:	683b      	ldr	r3, [r7, #0]
   8277e:	801a      	strh	r2, [r3, #0]
            DD_SPI_PCS_DECODER_DEACTIVE();
   82780:	4b47      	ldr	r3, [pc, #284]	; (828a0 <DD_READ_SENSORS+0xbac>)
   82782:	4798      	blx	r3
            DD_DISABLE_ISOLATORS_MISO_PIN();
   82784:	4b47      	ldr	r3, [pc, #284]	; (828a4 <DD_READ_SENSORS+0xbb0>)
   82786:	4798      	blx	r3
		   
		break;
   82788:	e080      	b.n	8288c <DD_READ_SENSORS+0xb98>
		
		case SV_DAC2_ID:
		command_data_array[0] = ADC128S022_ADC_IP(ADC128S022_CONDUCTIVITY_SENSOR_RMS_VOLTAGE);
   8278a:	4b42      	ldr	r3, [pc, #264]	; (82894 <DD_READ_SENSORS+0xba0>)
   8278c:	2200      	movs	r2, #0
   8278e:	701a      	strb	r2, [r3, #0]
		   command_data_array[1] = 0;  		   
   82790:	4b40      	ldr	r3, [pc, #256]	; (82894 <DD_READ_SENSORS+0xba0>)
   82792:	2200      	movs	r2, #0
   82794:	705a      	strb	r2, [r3, #1]
            DD_SPI_PCS_DECODER_ACTIVE();
   82796:	4b44      	ldr	r3, [pc, #272]	; (828a8 <DD_READ_SENSORS+0xbb4>)
   82798:	4798      	blx	r3
            DD_CON_ADC_CHIP_SELECT();
   8279a:	4b44      	ldr	r3, [pc, #272]	; (828ac <DD_READ_SENSORS+0xbb8>)
   8279c:	4798      	blx	r3
			DD_DISABLE_ISOLATORS_MISO_PIN();
   8279e:	4b41      	ldr	r3, [pc, #260]	; (828a4 <DD_READ_SENSORS+0xbb0>)
   827a0:	4798      	blx	r3
            DD_ENABLE_ISOLATOR_3();
   827a2:	4b43      	ldr	r3, [pc, #268]	; (828b0 <DD_READ_SENSORS+0xbbc>)
   827a4:	4798      	blx	r3
            dd_spi_set_peripheral_chip_select_value(ISOLTR_3_CS_ID);
   827a6:	2003      	movs	r0, #3
   827a8:	4b42      	ldr	r3, [pc, #264]	; (828b4 <DD_READ_SENSORS+0xbc0>)
   827aa:	4798      	blx	r3
            dd_spi_master_read(&command_data_array, 2, ISOLTR_3_CS_ID);		           
   827ac:	2203      	movs	r2, #3
   827ae:	2102      	movs	r1, #2
   827b0:	4838      	ldr	r0, [pc, #224]	; (82894 <DD_READ_SENSORS+0xba0>)
   827b2:	4b39      	ldr	r3, [pc, #228]	; (82898 <DD_READ_SENSORS+0xba4>)
   827b4:	4798      	blx	r3
			for(unsigned int count=0; count<1000; count++ )   {
   827b6:	2300      	movs	r3, #0
   827b8:	62bb      	str	r3, [r7, #40]	; 0x28
   827ba:	e002      	b.n	827c2 <DD_READ_SENSORS+0xace>
   827bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   827be:	3301      	adds	r3, #1
   827c0:	62bb      	str	r3, [r7, #40]	; 0x28
   827c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   827c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   827c8:	d3f8      	bcc.n	827bc <DD_READ_SENSORS+0xac8>
		      ;
	        }
		   command_data_array[0] = ADC128S022_ADC_IP(ADC128S022_CONDUCTIVITY_SENSOR_RMS_VOLTAGE);
   827ca:	4b32      	ldr	r3, [pc, #200]	; (82894 <DD_READ_SENSORS+0xba0>)
   827cc:	2200      	movs	r2, #0
   827ce:	701a      	strb	r2, [r3, #0]
		   command_data_array[1] = 0;  
   827d0:	4b30      	ldr	r3, [pc, #192]	; (82894 <DD_READ_SENSORS+0xba0>)
   827d2:	2200      	movs	r2, #0
   827d4:	705a      	strb	r2, [r3, #1]
		    dd_spi_master_read(&command_data_array, 2, ISOLTR_3_CS_ID);
   827d6:	2203      	movs	r2, #3
   827d8:	2102      	movs	r1, #2
   827da:	482e      	ldr	r0, [pc, #184]	; (82894 <DD_READ_SENSORS+0xba0>)
   827dc:	4b2e      	ldr	r3, [pc, #184]	; (82898 <DD_READ_SENSORS+0xba4>)
   827de:	4798      	blx	r3
		   spi_data.bytearray[1]=command_data_array[0];
   827e0:	4b2c      	ldr	r3, [pc, #176]	; (82894 <DD_READ_SENSORS+0xba0>)
   827e2:	781a      	ldrb	r2, [r3, #0]
   827e4:	4b2d      	ldr	r3, [pc, #180]	; (8289c <DD_READ_SENSORS+0xba8>)
   827e6:	705a      	strb	r2, [r3, #1]
           spi_data.bytearray[0]=command_data_array[1];			
   827e8:	4b2a      	ldr	r3, [pc, #168]	; (82894 <DD_READ_SENSORS+0xba0>)
   827ea:	785a      	ldrb	r2, [r3, #1]
   827ec:	4b2b      	ldr	r3, [pc, #172]	; (8289c <DD_READ_SENSORS+0xba8>)
   827ee:	701a      	strb	r2, [r3, #0]
           CONDUCTIVITY_SENSOR_RMS_VOLTAGE = spi_data.Twobyte;				    
   827f0:	4b2a      	ldr	r3, [pc, #168]	; (8289c <DD_READ_SENSORS+0xba8>)
   827f2:	881b      	ldrh	r3, [r3, #0]
   827f4:	847b      	strh	r3, [r7, #34]	; 0x22
			DD_SPI_PCS_DECODER_DEACTIVE();
   827f6:	4b2a      	ldr	r3, [pc, #168]	; (828a0 <DD_READ_SENSORS+0xbac>)
   827f8:	4798      	blx	r3
            DD_DISABLE_ISOLATORS_MISO_PIN();		
   827fa:	4b2a      	ldr	r3, [pc, #168]	; (828a4 <DD_READ_SENSORS+0xbb0>)
   827fc:	4798      	blx	r3
			
			
			command_data_array[0] = ADC128S022_ADC_IP(ADC128S022_DAC2_SEN_RMS_CURRENT);
   827fe:	4b25      	ldr	r3, [pc, #148]	; (82894 <DD_READ_SENSORS+0xba0>)
   82800:	2230      	movs	r2, #48	; 0x30
   82802:	701a      	strb	r2, [r3, #0]
		    command_data_array[1] = 0;  		   
   82804:	4b23      	ldr	r3, [pc, #140]	; (82894 <DD_READ_SENSORS+0xba0>)
   82806:	2200      	movs	r2, #0
   82808:	705a      	strb	r2, [r3, #1]
            DD_SPI_PCS_DECODER_ACTIVE();
   8280a:	4b27      	ldr	r3, [pc, #156]	; (828a8 <DD_READ_SENSORS+0xbb4>)
   8280c:	4798      	blx	r3
            DD_CON_ADC_CHIP_SELECT();
   8280e:	4b27      	ldr	r3, [pc, #156]	; (828ac <DD_READ_SENSORS+0xbb8>)
   82810:	4798      	blx	r3
			DD_DISABLE_ISOLATORS_MISO_PIN();
   82812:	4b24      	ldr	r3, [pc, #144]	; (828a4 <DD_READ_SENSORS+0xbb0>)
   82814:	4798      	blx	r3
            DD_ENABLE_ISOLATOR_3();
   82816:	4b26      	ldr	r3, [pc, #152]	; (828b0 <DD_READ_SENSORS+0xbbc>)
   82818:	4798      	blx	r3
            dd_spi_set_peripheral_chip_select_value(ISOLTR_3_CS_ID);
   8281a:	2003      	movs	r0, #3
   8281c:	4b25      	ldr	r3, [pc, #148]	; (828b4 <DD_READ_SENSORS+0xbc0>)
   8281e:	4798      	blx	r3
            dd_spi_master_read(&command_data_array, 2, ISOLTR_3_CS_ID);		           
   82820:	2203      	movs	r2, #3
   82822:	2102      	movs	r1, #2
   82824:	481b      	ldr	r0, [pc, #108]	; (82894 <DD_READ_SENSORS+0xba0>)
   82826:	4b1c      	ldr	r3, [pc, #112]	; (82898 <DD_READ_SENSORS+0xba4>)
   82828:	4798      	blx	r3
			for(unsigned int count=0; count<1000; count++ )   {
   8282a:	2300      	movs	r3, #0
   8282c:	627b      	str	r3, [r7, #36]	; 0x24
   8282e:	e002      	b.n	82836 <DD_READ_SENSORS+0xb42>
   82830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   82832:	3301      	adds	r3, #1
   82834:	627b      	str	r3, [r7, #36]	; 0x24
   82836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   82838:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   8283c:	d3f8      	bcc.n	82830 <DD_READ_SENSORS+0xb3c>
		      ;
	        }
			uint16_t DAC2_SEN_RMS_CURRENT;
			
		   command_data_array[0] = ADC128S022_ADC_IP(ADC128S022_DAC2_SEN_RMS_CURRENT);
   8283e:	4b15      	ldr	r3, [pc, #84]	; (82894 <DD_READ_SENSORS+0xba0>)
   82840:	2230      	movs	r2, #48	; 0x30
   82842:	701a      	strb	r2, [r3, #0]
		   command_data_array[1] = 0;  
   82844:	4b13      	ldr	r3, [pc, #76]	; (82894 <DD_READ_SENSORS+0xba0>)
   82846:	2200      	movs	r2, #0
   82848:	705a      	strb	r2, [r3, #1]
		   dd_spi_master_read(&command_data_array, 2, ISOLTR_3_CS_ID);
   8284a:	2203      	movs	r2, #3
   8284c:	2102      	movs	r1, #2
   8284e:	4811      	ldr	r0, [pc, #68]	; (82894 <DD_READ_SENSORS+0xba0>)
   82850:	4b11      	ldr	r3, [pc, #68]	; (82898 <DD_READ_SENSORS+0xba4>)
   82852:	4798      	blx	r3
		   spi_data.bytearray[1]=command_data_array[0];
   82854:	4b0f      	ldr	r3, [pc, #60]	; (82894 <DD_READ_SENSORS+0xba0>)
   82856:	781a      	ldrb	r2, [r3, #0]
   82858:	4b10      	ldr	r3, [pc, #64]	; (8289c <DD_READ_SENSORS+0xba8>)
   8285a:	705a      	strb	r2, [r3, #1]
           spi_data.bytearray[0]=command_data_array[1];			
   8285c:	4b0d      	ldr	r3, [pc, #52]	; (82894 <DD_READ_SENSORS+0xba0>)
   8285e:	785a      	ldrb	r2, [r3, #1]
   82860:	4b0e      	ldr	r3, [pc, #56]	; (8289c <DD_READ_SENSORS+0xba8>)
   82862:	701a      	strb	r2, [r3, #0]
           DAC2_SEN_RMS_CURRENT = spi_data.Twobyte;	
   82864:	4b0d      	ldr	r3, [pc, #52]	; (8289c <DD_READ_SENSORS+0xba8>)
   82866:	881b      	ldrh	r3, [r3, #0]
   82868:	81bb      	strh	r3, [r7, #12]
		   *sensor_status = (DAC2_SEN_RMS_CURRENT*10000)/ CONDUCTIVITY_SENSOR_RMS_VOLTAGE;            
   8286a:	89bb      	ldrh	r3, [r7, #12]
   8286c:	f242 7210 	movw	r2, #10000	; 0x2710
   82870:	fb02 f203 	mul.w	r2, r2, r3
   82874:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
   82876:	fb92 f3f3 	sdiv	r3, r2, r3
   8287a:	b29a      	uxth	r2, r3
   8287c:	683b      	ldr	r3, [r7, #0]
   8287e:	801a      	strh	r2, [r3, #0]
            DD_SPI_PCS_DECODER_DEACTIVE();
   82880:	4b07      	ldr	r3, [pc, #28]	; (828a0 <DD_READ_SENSORS+0xbac>)
   82882:	4798      	blx	r3
            DD_DISABLE_ISOLATORS_MISO_PIN();
   82884:	4b07      	ldr	r3, [pc, #28]	; (828a4 <DD_READ_SENSORS+0xbb0>)
   82886:	4798      	blx	r3
		break;
   82888:	e000      	b.n	8288c <DD_READ_SENSORS+0xb98>
		
		case SV_FLOW_SENSOR_ID:		
		break;
				
		default:
		break;
   8288a:	bf00      	nop
		
	}	
		
   8288c:	4618      	mov	r0, r3
   8288e:	3758      	adds	r7, #88	; 0x58
   82890:	46bd      	mov	sp, r7
   82892:	bd80      	pop	{r7, pc}
   82894:	20070aec 	.word	0x20070aec
   82898:	0008175d 	.word	0x0008175d
   8289c:	20070ae8 	.word	0x20070ae8
   828a0:	00081b1d 	.word	0x00081b1d
   828a4:	00081b39 	.word	0x00081b39
   828a8:	00081b01 	.word	0x00081b01
   828ac:	00081ae1 	.word	0x00081ae1
   828b0:	00081bd1 	.word	0x00081bd1
   828b4:	000816b5 	.word	0x000816b5

000828b8 <DD_TS1_INIT>:
 */ 
    #include "DD_TS1.h"
	extern uint8_t command_data_array[20]; 
	
	
void DD_TS1_INIT() {		
   828b8:	b580      	push	{r7, lr}
   828ba:	b082      	sub	sp, #8
   828bc:	af00      	add	r7, sp, #0
 	  dd_spi_set_clock_polarity(0, SPI_CLK_POLARITY_1);
   828be:	2101      	movs	r1, #1
   828c0:	2000      	movs	r0, #0
   828c2:	4b13      	ldr	r3, [pc, #76]	; (82910 <DD_TS1_INIT+0x58>)
   828c4:	4798      	blx	r3
 	  dd_spi_set_clock_phase(0, SPI_CLK_PHASE_0);
   828c6:	2100      	movs	r1, #0
   828c8:	2000      	movs	r0, #0
   828ca:	4b12      	ldr	r3, [pc, #72]	; (82914 <DD_TS1_INIT+0x5c>)
   828cc:	4798      	blx	r3
	  
	  command_data_array[0] = MAX31865_WRITE_CONFIGURATION; //0b00000110;
   828ce:	4b12      	ldr	r3, [pc, #72]	; (82918 <DD_TS1_INIT+0x60>)
   828d0:	2280      	movs	r2, #128	; 0x80
   828d2:	701a      	strb	r2, [r3, #0]
	  command_data_array[1] = MAXIM31865_CONFIGURATION_VBIAS | MAXIM31865_CONFIGURATION_AUTO_CONVERTION | MAXIM31865_CONFIGURATION_FAULT_STATUS_CLEAR | MAXIM31865_CONFIGURATION_50HZ_FILTER ;
   828d4:	4b10      	ldr	r3, [pc, #64]	; (82918 <DD_TS1_INIT+0x60>)
   828d6:	22c3      	movs	r2, #195	; 0xc3
   828d8:	705a      	strb	r2, [r3, #1]
     
	  DD_SPI_PCS_DECODER_ACTIVE();
   828da:	4b10      	ldr	r3, [pc, #64]	; (8291c <DD_TS1_INIT+0x64>)
   828dc:	4798      	blx	r3
	  DD_TS1_CHIP_SELECT();
   828de:	4b10      	ldr	r3, [pc, #64]	; (82920 <DD_TS1_INIT+0x68>)
   828e0:	4798      	blx	r3
	  dd_spi_set_peripheral_chip_select_value(ISOLTR_1_CS_ID); //(ISOLTR_1_CS_ID);
   828e2:	2001      	movs	r0, #1
   828e4:	4b0f      	ldr	r3, [pc, #60]	; (82924 <DD_TS1_INIT+0x6c>)
   828e6:	4798      	blx	r3
	  dd_spi_master_transfer(&command_data_array, 2,0 ); //ISOLTR_1_CS_ID
   828e8:	2200      	movs	r2, #0
   828ea:	2102      	movs	r1, #2
   828ec:	480a      	ldr	r0, [pc, #40]	; (82918 <DD_TS1_INIT+0x60>)
   828ee:	4b0e      	ldr	r3, [pc, #56]	; (82928 <DD_TS1_INIT+0x70>)
   828f0:	4798      	blx	r3
	  
	  for(unsigned int count=0; count<1000; count++ )   {
   828f2:	2300      	movs	r3, #0
   828f4:	607b      	str	r3, [r7, #4]
   828f6:	e002      	b.n	828fe <DD_TS1_INIT+0x46>
   828f8:	687b      	ldr	r3, [r7, #4]
   828fa:	3301      	adds	r3, #1
   828fc:	607b      	str	r3, [r7, #4]
   828fe:	687b      	ldr	r3, [r7, #4]
   82900:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   82904:	d3f8      	bcc.n	828f8 <DD_TS1_INIT+0x40>
		  ;
	  } 	  
}
   82906:	bf00      	nop
   82908:	3708      	adds	r7, #8
   8290a:	46bd      	mov	sp, r7
   8290c:	bd80      	pop	{r7, pc}
   8290e:	bf00      	nop
   82910:	000815ad 	.word	0x000815ad
   82914:	00081601 	.word	0x00081601
   82918:	20070aec 	.word	0x20070aec
   8291c:	00081b01 	.word	0x00081b01
   82920:	00081a29 	.word	0x00081a29
   82924:	000816b5 	.word	0x000816b5
   82928:	000816ed 	.word	0x000816ed

0008292c <DD_TS2_INIT>:

 #include "DD_TS2.h"
 extern uint8_t command_data_array[20];
 
 
 void DD_TS2_INIT() {
   8292c:	b580      	push	{r7, lr}
   8292e:	b082      	sub	sp, #8
   82930:	af00      	add	r7, sp, #0
	 dd_spi_set_clock_polarity(0, SPI_CLK_POLARITY_1);
   82932:	2101      	movs	r1, #1
   82934:	2000      	movs	r0, #0
   82936:	4b13      	ldr	r3, [pc, #76]	; (82984 <DD_TS2_INIT+0x58>)
   82938:	4798      	blx	r3
	 dd_spi_set_clock_phase(0, SPI_CLK_PHASE_0);
   8293a:	2100      	movs	r1, #0
   8293c:	2000      	movs	r0, #0
   8293e:	4b12      	ldr	r3, [pc, #72]	; (82988 <DD_TS2_INIT+0x5c>)
   82940:	4798      	blx	r3
	 
	 command_data_array[0] = MAX31865_WRITE_CONFIGURATION; //0b00000110;
   82942:	4b12      	ldr	r3, [pc, #72]	; (8298c <DD_TS2_INIT+0x60>)
   82944:	2280      	movs	r2, #128	; 0x80
   82946:	701a      	strb	r2, [r3, #0]
	 command_data_array[1] = MAXIM31865_CONFIGURATION_VBIAS | MAXIM31865_CONFIGURATION_AUTO_CONVERTION | MAXIM31865_CONFIGURATION_FAULT_STATUS_CLEAR | MAXIM31865_CONFIGURATION_50HZ_FILTER ;
   82948:	4b10      	ldr	r3, [pc, #64]	; (8298c <DD_TS2_INIT+0x60>)
   8294a:	22c3      	movs	r2, #195	; 0xc3
   8294c:	705a      	strb	r2, [r3, #1]
	 
	 DD_SPI_PCS_DECODER_ACTIVE();
   8294e:	4b10      	ldr	r3, [pc, #64]	; (82990 <DD_TS2_INIT+0x64>)
   82950:	4798      	blx	r3
	 DD_TS2_CHIP_SELECT();
   82952:	4b10      	ldr	r3, [pc, #64]	; (82994 <DD_TS2_INIT+0x68>)
   82954:	4798      	blx	r3
	 dd_spi_set_peripheral_chip_select_value(ISOLTR_1_CS_ID); //(ISOLTR_1_CS_ID);
   82956:	2001      	movs	r0, #1
   82958:	4b0f      	ldr	r3, [pc, #60]	; (82998 <DD_TS2_INIT+0x6c>)
   8295a:	4798      	blx	r3
	 dd_spi_master_transfer(&command_data_array, 2,0 ); //ISOLTR_1_CS_ID
   8295c:	2200      	movs	r2, #0
   8295e:	2102      	movs	r1, #2
   82960:	480a      	ldr	r0, [pc, #40]	; (8298c <DD_TS2_INIT+0x60>)
   82962:	4b0e      	ldr	r3, [pc, #56]	; (8299c <DD_TS2_INIT+0x70>)
   82964:	4798      	blx	r3
	 
	 for(unsigned int count=0; count<10000000; count++ )   {
   82966:	2300      	movs	r3, #0
   82968:	607b      	str	r3, [r7, #4]
   8296a:	e002      	b.n	82972 <DD_TS2_INIT+0x46>
   8296c:	687b      	ldr	r3, [r7, #4]
   8296e:	3301      	adds	r3, #1
   82970:	607b      	str	r3, [r7, #4]
   82972:	687b      	ldr	r3, [r7, #4]
   82974:	4a0a      	ldr	r2, [pc, #40]	; (829a0 <DD_TS2_INIT+0x74>)
   82976:	4293      	cmp	r3, r2
   82978:	d9f8      	bls.n	8296c <DD_TS2_INIT+0x40>
		 ;
	 }
	 
   8297a:	bf00      	nop
   8297c:	3708      	adds	r7, #8
   8297e:	46bd      	mov	sp, r7
   82980:	bd80      	pop	{r7, pc}
   82982:	bf00      	nop
   82984:	000815ad 	.word	0x000815ad
   82988:	00081601 	.word	0x00081601
   8298c:	20070aec 	.word	0x20070aec
   82990:	00081b01 	.word	0x00081b01
   82994:	00081a41 	.word	0x00081a41
   82998:	000816b5 	.word	0x000816b5
   8299c:	000816ed 	.word	0x000816ed
   829a0:	0098967f 	.word	0x0098967f

000829a4 <DD_TS3_INIT>:

 #include "DD_TS3.h"
 extern uint8_t command_data_array[20];
 
 
 void DD_TS3_INIT() {
   829a4:	b580      	push	{r7, lr}
   829a6:	b084      	sub	sp, #16
   829a8:	af00      	add	r7, sp, #0
	 dd_spi_set_clock_polarity(1, SPI_CLK_POLARITY_1);
   829aa:	2101      	movs	r1, #1
   829ac:	2001      	movs	r0, #1
   829ae:	4b27      	ldr	r3, [pc, #156]	; (82a4c <DD_TS3_INIT+0xa8>)
   829b0:	4798      	blx	r3
	 dd_spi_set_clock_phase(1, SPI_CLK_PHASE_0);
   829b2:	2100      	movs	r1, #0
   829b4:	2001      	movs	r0, #1
   829b6:	4b26      	ldr	r3, [pc, #152]	; (82a50 <DD_TS3_INIT+0xac>)
   829b8:	4798      	blx	r3
	 
	 command_data_array[0] = MAX31865_WRITE_CONFIGURATION; //0b00000110;
   829ba:	4b26      	ldr	r3, [pc, #152]	; (82a54 <DD_TS3_INIT+0xb0>)
   829bc:	2280      	movs	r2, #128	; 0x80
   829be:	701a      	strb	r2, [r3, #0]
	 command_data_array[1] = MAXIM31865_CONFIGURATION_VBIAS | MAXIM31865_CONFIGURATION_AUTO_CONVERTION | MAXIM31865_CONFIGURATION_FAULT_STATUS_CLEAR | MAXIM31865_CONFIGURATION_50HZ_FILTER ;
   829c0:	4b24      	ldr	r3, [pc, #144]	; (82a54 <DD_TS3_INIT+0xb0>)
   829c2:	22c3      	movs	r2, #195	; 0xc3
   829c4:	705a      	strb	r2, [r3, #1]
	 
	 DD_SPI_PCS_DECODER_ACTIVE();
   829c6:	4b24      	ldr	r3, [pc, #144]	; (82a58 <DD_TS3_INIT+0xb4>)
   829c8:	4798      	blx	r3
	 DD_TS3_CHIP_SELECT();
   829ca:	4b24      	ldr	r3, [pc, #144]	; (82a5c <DD_TS3_INIT+0xb8>)
   829cc:	4798      	blx	r3
	 dd_spi_set_peripheral_chip_select_value(ISOLTR_2_CS_ID); 
   829ce:	2002      	movs	r0, #2
   829d0:	4b23      	ldr	r3, [pc, #140]	; (82a60 <DD_TS3_INIT+0xbc>)
   829d2:	4798      	blx	r3
	 dd_spi_master_transfer(&command_data_array, 2,0 ); 
   829d4:	2200      	movs	r2, #0
   829d6:	2102      	movs	r1, #2
   829d8:	481e      	ldr	r0, [pc, #120]	; (82a54 <DD_TS3_INIT+0xb0>)
   829da:	4b22      	ldr	r3, [pc, #136]	; (82a64 <DD_TS3_INIT+0xc0>)
   829dc:	4798      	blx	r3
	 
	 for(unsigned int count=0; count<1000; count++ )   {
   829de:	2300      	movs	r3, #0
   829e0:	60fb      	str	r3, [r7, #12]
   829e2:	e002      	b.n	829ea <DD_TS3_INIT+0x46>
   829e4:	68fb      	ldr	r3, [r7, #12]
   829e6:	3301      	adds	r3, #1
   829e8:	60fb      	str	r3, [r7, #12]
   829ea:	68fb      	ldr	r3, [r7, #12]
   829ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   829f0:	d3f8      	bcc.n	829e4 <DD_TS3_INIT+0x40>
		 ;
	 }
	 
	 dd_spi_set_clock_polarity(1, SPI_CLK_POLARITY_0);
   829f2:	2100      	movs	r1, #0
   829f4:	2001      	movs	r0, #1
   829f6:	4b15      	ldr	r3, [pc, #84]	; (82a4c <DD_TS3_INIT+0xa8>)
   829f8:	4798      	blx	r3
	 dd_spi_set_clock_phase(1, SPI_CLK_PHASE_0);
   829fa:	2100      	movs	r1, #0
   829fc:	2001      	movs	r0, #1
   829fe:	4b14      	ldr	r3, [pc, #80]	; (82a50 <DD_TS3_INIT+0xac>)
   82a00:	4798      	blx	r3
	  for(unsigned int count=0; count<1000; count++ )   {
   82a02:	2300      	movs	r3, #0
   82a04:	60bb      	str	r3, [r7, #8]
   82a06:	e002      	b.n	82a0e <DD_TS3_INIT+0x6a>
   82a08:	68bb      	ldr	r3, [r7, #8]
   82a0a:	3301      	adds	r3, #1
   82a0c:	60bb      	str	r3, [r7, #8]
   82a0e:	68bb      	ldr	r3, [r7, #8]
   82a10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   82a14:	d3f8      	bcc.n	82a08 <DD_TS3_INIT+0x64>
		 ;
	 }
	 
	 command_data_array[0] =  MAXIM_IC_TO_PT100 ;	 
   82a16:	4b0f      	ldr	r3, [pc, #60]	; (82a54 <DD_TS3_INIT+0xb0>)
   82a18:	22f0      	movs	r2, #240	; 0xf0
   82a1a:	701a      	strb	r2, [r3, #0]
	 dd_spi_set_peripheral_chip_select_value(ISOLTR_2_CS_ID);	 	 
   82a1c:	2002      	movs	r0, #2
   82a1e:	4b10      	ldr	r3, [pc, #64]	; (82a60 <DD_TS3_INIT+0xbc>)
   82a20:	4798      	blx	r3
	 DD_TS_MUX_CHIP_SELECT();
   82a22:	4b11      	ldr	r3, [pc, #68]	; (82a68 <DD_TS3_INIT+0xc4>)
   82a24:	4798      	blx	r3
	 dd_spi_master_transfer(&command_data_array, 1, ISOLTR_2_CS_ID);
   82a26:	2202      	movs	r2, #2
   82a28:	2101      	movs	r1, #1
   82a2a:	480a      	ldr	r0, [pc, #40]	; (82a54 <DD_TS3_INIT+0xb0>)
   82a2c:	4b0d      	ldr	r3, [pc, #52]	; (82a64 <DD_TS3_INIT+0xc0>)
   82a2e:	4798      	blx	r3
	 
	 for(unsigned int count=0; count<1000; count++ )   {
   82a30:	2300      	movs	r3, #0
   82a32:	607b      	str	r3, [r7, #4]
   82a34:	e002      	b.n	82a3c <DD_TS3_INIT+0x98>
   82a36:	687b      	ldr	r3, [r7, #4]
   82a38:	3301      	adds	r3, #1
   82a3a:	607b      	str	r3, [r7, #4]
   82a3c:	687b      	ldr	r3, [r7, #4]
   82a3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   82a42:	d3f8      	bcc.n	82a36 <DD_TS3_INIT+0x92>
		 ;
	 }
	 
	 
   82a44:	bf00      	nop
   82a46:	3710      	adds	r7, #16
   82a48:	46bd      	mov	sp, r7
   82a4a:	bd80      	pop	{r7, pc}
   82a4c:	000815ad 	.word	0x000815ad
   82a50:	00081601 	.word	0x00081601
   82a54:	20070aec 	.word	0x20070aec
   82a58:	00081b01 	.word	0x00081b01
   82a5c:	00081aa9 	.word	0x00081aa9
   82a60:	000816b5 	.word	0x000816b5
   82a64:	000816ed 	.word	0x000816ed
   82a68:	00081ac5 	.word	0x00081ac5

00082a6c <SV_SEND_CAN_MAILBOX>:
uint8_t const No_of_group_id = 6;
static uint16_t TS3_Avg =0, TS2_Avg =0, TS1_Avg =0, TS3_Avg_Backup =0, TS2_Avg_Backup =0,TS1_Avg_Backup =0;
static uint8_t Avg_Count_1 =0, Avg_Count_2 =0, Avg_Count_3 =0;


static void SV_SEND_CAN_MAILBOX(SV_CAN_MAILBOX_SENSOR_DATA_REG_TYPE*  SV_CAN_MAILBOX_SENSOR_DATA_STRUCTURE)   {
   82a6c:	b580      	push	{r7, lr}
   82a6e:	b084      	sub	sp, #16
   82a70:	af00      	add	r7, sp, #0
   82a72:	6078      	str	r0, [r7, #4]
	sv_data_size_type  sv_data_size;
	sv_data_size.bytearray[0] =SV_CAN_MAILBOX_SENSOR_DATA_STRUCTURE->CPU_SENDER_type_reg;
   82a74:	687b      	ldr	r3, [r7, #4]
   82a76:	781b      	ldrb	r3, [r3, #0]
   82a78:	723b      	strb	r3, [r7, #8]
	sv_data_size.bytearray[1] =SV_CAN_MAILBOX_SENSOR_DATA_STRUCTURE->SENSOR_GROUP_ID_type_reg;
   82a7a:	687b      	ldr	r3, [r7, #4]
   82a7c:	785b      	ldrb	r3, [r3, #1]
   82a7e:	727b      	strb	r3, [r7, #9]
	
	sv_data_size.Twobyte[1]   =SV_CAN_MAILBOX_SENSOR_DATA_STRUCTURE->SENSOR_1;	
   82a80:	687b      	ldr	r3, [r7, #4]
   82a82:	885b      	ldrh	r3, [r3, #2]
   82a84:	817b      	strh	r3, [r7, #10]
	sv_data_size.Twobyte[2]   =SV_CAN_MAILBOX_SENSOR_DATA_STRUCTURE->SENSOR_2;
   82a86:	687b      	ldr	r3, [r7, #4]
   82a88:	889b      	ldrh	r3, [r3, #4]
   82a8a:	81bb      	strh	r3, [r7, #12]
	sv_data_size.Twobyte[3]   =SV_CAN_MAILBOX_SENSOR_DATA_STRUCTURE->SENSOR_3;
   82a8c:	687b      	ldr	r3, [r7, #4]
   82a8e:	88db      	ldrh	r3, [r3, #6]
   82a90:	81fb      	strh	r3, [r7, #14]
	
	can0_mailbox.ul_datal     =sv_data_size.fourbyte[0];
   82a92:	68bb      	ldr	r3, [r7, #8]
   82a94:	4a12      	ldr	r2, [pc, #72]	; (82ae0 <SV_SEND_CAN_MAILBOX+0x74>)
   82a96:	6193      	str	r3, [r2, #24]
	can0_mailbox.ul_datah     =sv_data_size.fourbyte[1];
   82a98:	68fb      	ldr	r3, [r7, #12]
   82a9a:	4a11      	ldr	r2, [pc, #68]	; (82ae0 <SV_SEND_CAN_MAILBOX+0x74>)
   82a9c:	61d3      	str	r3, [r2, #28]
	can0_mailbox.uc_length = 8;
   82a9e:	4b10      	ldr	r3, [pc, #64]	; (82ae0 <SV_SEND_CAN_MAILBOX+0x74>)
   82aa0:	2208      	movs	r2, #8
   82aa2:	719a      	strb	r2, [r3, #6]
	can0_mailbox.ul_mb_idx =   MAILBOX_0;
   82aa4:	4b0e      	ldr	r3, [pc, #56]	; (82ae0 <SV_SEND_CAN_MAILBOX+0x74>)
   82aa6:	2200      	movs	r2, #0
   82aa8:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_TX_MODE ;
   82aaa:	4b0d      	ldr	r3, [pc, #52]	; (82ae0 <SV_SEND_CAN_MAILBOX+0x74>)
   82aac:	2203      	movs	r2, #3
   82aae:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = 1;
   82ab0:	4b0b      	ldr	r3, [pc, #44]	; (82ae0 <SV_SEND_CAN_MAILBOX+0x74>)
   82ab2:	2201      	movs	r2, #1
   82ab4:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   82ab6:	4b0a      	ldr	r3, [pc, #40]	; (82ae0 <SV_SEND_CAN_MAILBOX+0x74>)
   82ab8:	2200      	movs	r2, #0
   82aba:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk = CAN_MFID_MFID_VA_dd(CAN_MASK);
   82abc:	4b08      	ldr	r3, [pc, #32]	; (82ae0 <SV_SEND_CAN_MAILBOX+0x74>)
   82abe:	4a09      	ldr	r2, [pc, #36]	; (82ae4 <SV_SEND_CAN_MAILBOX+0x78>)
   82ac0:	60da      	str	r2, [r3, #12]
	can0_mailbox.ul_id = CAN_MID_MIDvA_dd(MASTER_CPU_id);
   82ac2:	4b07      	ldr	r3, [pc, #28]	; (82ae0 <SV_SEND_CAN_MAILBOX+0x74>)
   82ac4:	f44f 1220 	mov.w	r2, #2621440	; 0x280000
   82ac8:	611a      	str	r2, [r3, #16]
	dd_can_mailbox_write(&can0_mailbox);	
   82aca:	4805      	ldr	r0, [pc, #20]	; (82ae0 <SV_SEND_CAN_MAILBOX+0x74>)
   82acc:	4b06      	ldr	r3, [pc, #24]	; (82ae8 <SV_SEND_CAN_MAILBOX+0x7c>)
   82ace:	4798      	blx	r3
	dd_can_global_send_transfer_cmd(CAN_TCR_MB0);	
   82ad0:	2001      	movs	r0, #1
   82ad2:	4b06      	ldr	r3, [pc, #24]	; (82aec <SV_SEND_CAN_MAILBOX+0x80>)
   82ad4:	4798      	blx	r3
}
   82ad6:	bf00      	nop
   82ad8:	3710      	adds	r7, #16
   82ada:	46bd      	mov	sp, r7
   82adc:	bd80      	pop	{r7, pc}
   82ade:	bf00      	nop
   82ae0:	20070abc 	.word	0x20070abc
   82ae4:	1ff00000 	.word	0x1ff00000
   82ae8:	000803d1 	.word	0x000803d1
   82aec:	0008048d 	.word	0x0008048d

00082af0 <SV_put_sensor_data>:


bool SV_put_sensor_data(SV_Sensor_status_type* sensor_struct)   {	
   82af0:	b580      	push	{r7, lr}
   82af2:	b084      	sub	sp, #16
   82af4:	af00      	add	r7, sp, #0
   82af6:	6078      	str	r0, [r7, #4]
	
	SV_CAN_MAILBOX_SENSOR_DATA_REG_TYPE  SV_CAN_MAILBOX_SENSOR_DATA_REG;	
	switch(group_id_reg)   {
   82af8:	4b7e      	ldr	r3, [pc, #504]	; (82cf4 <SV_put_sensor_data+0x204>)
   82afa:	781b      	ldrb	r3, [r3, #0]
   82afc:	b2db      	uxtb	r3, r3
   82afe:	2b06      	cmp	r3, #6
   82b00:	f200 80f1 	bhi.w	82ce6 <SV_put_sensor_data+0x1f6>
   82b04:	a201      	add	r2, pc, #4	; (adr r2, 82b0c <SV_put_sensor_data+0x1c>)
   82b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   82b0a:	bf00      	nop
   82b0c:	00082b29 	.word	0x00082b29
   82b10:	00082c03 	.word	0x00082c03
   82b14:	00082c29 	.word	0x00082c29
   82b18:	00082c4f 	.word	0x00082c4f
   82b1c:	00082c75 	.word	0x00082c75
   82b20:	00082c9b 	.word	0x00082c9b
   82b24:	00082cc1 	.word	0x00082cc1
		case 0:
		    SV_CAN_MAILBOX_SENSOR_DATA_REG.CPU_SENDER_type_reg        = SENSOR_CPU_id ;
   82b28:	2303      	movs	r3, #3
   82b2a:	723b      	strb	r3, [r7, #8]
		    SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_GROUP_ID_type_reg	  = SENSOR_GROUP_ID_1 ;
   82b2c:	2301      	movs	r3, #1
   82b2e:	727b      	strb	r3, [r7, #9]
		    SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_1                   = sensor_struct->ps1status;
   82b30:	687b      	ldr	r3, [r7, #4]
   82b32:	881b      	ldrh	r3, [r3, #0]
   82b34:	817b      	strh	r3, [r7, #10]
		    SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_2	                  = sensor_struct->ps2status;
   82b36:	687b      	ldr	r3, [r7, #4]
   82b38:	885b      	ldrh	r3, [r3, #2]
   82b3a:	81bb      	strh	r3, [r7, #12]
		    SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_3	                  = sensor_struct->ps3status;
   82b3c:	687b      	ldr	r3, [r7, #4]
   82b3e:	889b      	ldrh	r3, [r3, #4]
   82b40:	81fb      	strh	r3, [r7, #14]
		    SV_SEND_CAN_MAILBOX(&SV_CAN_MAILBOX_SENSOR_DATA_REG);
   82b42:	f107 0308 	add.w	r3, r7, #8
   82b46:	4618      	mov	r0, r3
   82b48:	4b6b      	ldr	r3, [pc, #428]	; (82cf8 <SV_put_sensor_data+0x208>)
   82b4a:	4798      	blx	r3
			
			 SV_CAN_MAILBOX_SENSOR_DATA_REG.CPU_SENDER_type_reg        = SENSOR_CPU_id ;
   82b4c:	2303      	movs	r3, #3
   82b4e:	723b      	strb	r3, [r7, #8]
			 SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_GROUP_ID_type_reg	  = SENSOR_GROUP_ID_2 ;
   82b50:	2302      	movs	r3, #2
   82b52:	727b      	strb	r3, [r7, #9]
			 SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_1                   = sensor_struct->thermocouple_status ;//100; //sensor_struct->thermocouple_status;
   82b54:	687b      	ldr	r3, [r7, #4]
   82b56:	88db      	ldrh	r3, [r3, #6]
   82b58:	817b      	strh	r3, [r7, #10]
			 SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_2	                  = sensor_struct->Temp1status ;
   82b5a:	687b      	ldr	r3, [r7, #4]
   82b5c:	891b      	ldrh	r3, [r3, #8]
   82b5e:	81bb      	strh	r3, [r7, #12]
			 SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_3	                  = sensor_struct->Temp2status;
   82b60:	687b      	ldr	r3, [r7, #4]
   82b62:	895b      	ldrh	r3, [r3, #10]
   82b64:	81fb      	strh	r3, [r7, #14]
			 SV_SEND_CAN_MAILBOX(&SV_CAN_MAILBOX_SENSOR_DATA_REG);			 
   82b66:	f107 0308 	add.w	r3, r7, #8
   82b6a:	4618      	mov	r0, r3
   82b6c:	4b62      	ldr	r3, [pc, #392]	; (82cf8 <SV_put_sensor_data+0x208>)
   82b6e:	4798      	blx	r3
			
			 
			  SV_CAN_MAILBOX_SENSOR_DATA_REG.CPU_SENDER_type_reg        = SENSOR_CPU_id ;
   82b70:	2303      	movs	r3, #3
   82b72:	723b      	strb	r3, [r7, #8]
			  SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_GROUP_ID_type_reg	  = SENSOR_GROUP_ID_3 ;
   82b74:	2303      	movs	r3, #3
   82b76:	727b      	strb	r3, [r7, #9]
			  SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_1                   =sensor_struct->CS1_Tempstatus;//sensor_struct->Temp3status;
   82b78:	687b      	ldr	r3, [r7, #4]
   82b7a:	899b      	ldrh	r3, [r3, #12]
   82b7c:	817b      	strh	r3, [r7, #10]
			  SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_2	                  =sensor_struct->CS2_Tempstatus;
   82b7e:	687b      	ldr	r3, [r7, #4]
   82b80:	89db      	ldrh	r3, [r3, #14]
   82b82:	81bb      	strh	r3, [r7, #12]
			  SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_3	                  = sensor_struct->Temp3status;
   82b84:	687b      	ldr	r3, [r7, #4]
   82b86:	8a1b      	ldrh	r3, [r3, #16]
   82b88:	81fb      	strh	r3, [r7, #14]
			  SV_SEND_CAN_MAILBOX(&SV_CAN_MAILBOX_SENSOR_DATA_REG); 
   82b8a:	f107 0308 	add.w	r3, r7, #8
   82b8e:	4618      	mov	r0, r3
   82b90:	4b59      	ldr	r3, [pc, #356]	; (82cf8 <SV_put_sensor_data+0x208>)
   82b92:	4798      	blx	r3
			  
			    SV_CAN_MAILBOX_SENSOR_DATA_REG.CPU_SENDER_type_reg        = SENSOR_CPU_id ;
   82b94:	2303      	movs	r3, #3
   82b96:	723b      	strb	r3, [r7, #8]
			    SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_GROUP_ID_type_reg	  = SENSOR_GROUP_ID_4;
   82b98:	2304      	movs	r3, #4
   82b9a:	727b      	strb	r3, [r7, #9]
			    SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_1                   = sensor_struct->CS3_Tempstatus;
   82b9c:	687b      	ldr	r3, [r7, #4]
   82b9e:	8a5b      	ldrh	r3, [r3, #18]
   82ba0:	817b      	strh	r3, [r7, #10]
			    SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_2	                  = sensor_struct->CS1status ;
   82ba2:	687b      	ldr	r3, [r7, #4]
   82ba4:	8a9b      	ldrh	r3, [r3, #20]
   82ba6:	81bb      	strh	r3, [r7, #12]
			    SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_3	                  = sensor_struct->CS2status;
   82ba8:	687b      	ldr	r3, [r7, #4]
   82baa:	8adb      	ldrh	r3, [r3, #22]
   82bac:	81fb      	strh	r3, [r7, #14]
			    SV_SEND_CAN_MAILBOX(&SV_CAN_MAILBOX_SENSOR_DATA_REG);
   82bae:	f107 0308 	add.w	r3, r7, #8
   82bb2:	4618      	mov	r0, r3
   82bb4:	4b50      	ldr	r3, [pc, #320]	; (82cf8 <SV_put_sensor_data+0x208>)
   82bb6:	4798      	blx	r3
				
				SV_CAN_MAILBOX_SENSOR_DATA_REG.CPU_SENDER_type_reg        = SENSOR_CPU_id ;
   82bb8:	2303      	movs	r3, #3
   82bba:	723b      	strb	r3, [r7, #8]
				SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_GROUP_ID_type_reg	  = SENSOR_GROUP_ID_5 ;
   82bbc:	2305      	movs	r3, #5
   82bbe:	727b      	strb	r3, [r7, #9]
				SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_1                   = sensor_struct->CS3status;
   82bc0:	687b      	ldr	r3, [r7, #4]
   82bc2:	8b1b      	ldrh	r3, [r3, #24]
   82bc4:	817b      	strh	r3, [r7, #10]
				SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_2	                  = sensor_struct->DAC1status ;
   82bc6:	687b      	ldr	r3, [r7, #4]
   82bc8:	8b5b      	ldrh	r3, [r3, #26]
   82bca:	81bb      	strh	r3, [r7, #12]
				SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_3	                  = sensor_struct->DAAstatus;
   82bcc:	687b      	ldr	r3, [r7, #4]
   82bce:	8b9b      	ldrh	r3, [r3, #28]
   82bd0:	81fb      	strh	r3, [r7, #14]
				SV_SEND_CAN_MAILBOX(&SV_CAN_MAILBOX_SENSOR_DATA_REG);
   82bd2:	f107 0308 	add.w	r3, r7, #8
   82bd6:	4618      	mov	r0, r3
   82bd8:	4b47      	ldr	r3, [pc, #284]	; (82cf8 <SV_put_sensor_data+0x208>)
   82bda:	4798      	blx	r3
				
				 SV_CAN_MAILBOX_SENSOR_DATA_REG.CPU_SENDER_type_reg        = SENSOR_CPU_id ;
   82bdc:	2303      	movs	r3, #3
   82bde:	723b      	strb	r3, [r7, #8]
				 SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_GROUP_ID_type_reg	  = SENSOR_GROUP_ID_6 ;
   82be0:	2306      	movs	r3, #6
   82be2:	727b      	strb	r3, [r7, #9]
				 SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_1                   = sensor_struct->DABstatus;
   82be4:	687b      	ldr	r3, [r7, #4]
   82be6:	8bdb      	ldrh	r3, [r3, #30]
   82be8:	817b      	strh	r3, [r7, #10]
				 SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_2	                  = sensor_struct->DAC2status ;
   82bea:	687b      	ldr	r3, [r7, #4]
   82bec:	8c1b      	ldrh	r3, [r3, #32]
   82bee:	81bb      	strh	r3, [r7, #12]
				 SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_3	                  = sensor_struct->flow_sensor_status;
   82bf0:	687b      	ldr	r3, [r7, #4]
   82bf2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
   82bf4:	81fb      	strh	r3, [r7, #14]
				 SV_SEND_CAN_MAILBOX(&SV_CAN_MAILBOX_SENSOR_DATA_REG);
   82bf6:	f107 0308 	add.w	r3, r7, #8
   82bfa:	4618      	mov	r0, r3
   82bfc:	4b3e      	ldr	r3, [pc, #248]	; (82cf8 <SV_put_sensor_data+0x208>)
   82bfe:	4798      	blx	r3
		
		break;
   82c00:	e072      	b.n	82ce8 <SV_put_sensor_data+0x1f8>
		
		case 1:			
		   SV_CAN_MAILBOX_SENSOR_DATA_REG.CPU_SENDER_type_reg        = SENSOR_CPU_id ;
   82c02:	2303      	movs	r3, #3
   82c04:	723b      	strb	r3, [r7, #8]
		   SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_GROUP_ID_type_reg	  = SENSOR_GROUP_ID_1 ;
   82c06:	2301      	movs	r3, #1
   82c08:	727b      	strb	r3, [r7, #9]
		   SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_1                   = sensor_struct->ps1status;		
   82c0a:	687b      	ldr	r3, [r7, #4]
   82c0c:	881b      	ldrh	r3, [r3, #0]
   82c0e:	817b      	strh	r3, [r7, #10]
		   SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_2	                  = sensor_struct->ps2status;
   82c10:	687b      	ldr	r3, [r7, #4]
   82c12:	885b      	ldrh	r3, [r3, #2]
   82c14:	81bb      	strh	r3, [r7, #12]
		   SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_3	                  = sensor_struct->ps3status;
   82c16:	687b      	ldr	r3, [r7, #4]
   82c18:	889b      	ldrh	r3, [r3, #4]
   82c1a:	81fb      	strh	r3, [r7, #14]
           SV_SEND_CAN_MAILBOX(&SV_CAN_MAILBOX_SENSOR_DATA_REG);
   82c1c:	f107 0308 	add.w	r3, r7, #8
   82c20:	4618      	mov	r0, r3
   82c22:	4b35      	ldr	r3, [pc, #212]	; (82cf8 <SV_put_sensor_data+0x208>)
   82c24:	4798      	blx	r3
		break;   	
   82c26:	e05f      	b.n	82ce8 <SV_put_sensor_data+0x1f8>
		
		case 2:	
		   SV_CAN_MAILBOX_SENSOR_DATA_REG.CPU_SENDER_type_reg        = SENSOR_CPU_id ;
   82c28:	2303      	movs	r3, #3
   82c2a:	723b      	strb	r3, [r7, #8]
		   SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_GROUP_ID_type_reg	  = SENSOR_GROUP_ID_2 ;
   82c2c:	2302      	movs	r3, #2
   82c2e:	727b      	strb	r3, [r7, #9]
		   SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_1                   = sensor_struct->thermocouple_status ;//100; //sensor_struct->thermocouple_status;
   82c30:	687b      	ldr	r3, [r7, #4]
   82c32:	88db      	ldrh	r3, [r3, #6]
   82c34:	817b      	strh	r3, [r7, #10]
		   SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_2	                  = sensor_struct->Temp1status ;
   82c36:	687b      	ldr	r3, [r7, #4]
   82c38:	891b      	ldrh	r3, [r3, #8]
   82c3a:	81bb      	strh	r3, [r7, #12]
		   SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_3	                  = sensor_struct->Temp2status;
   82c3c:	687b      	ldr	r3, [r7, #4]
   82c3e:	895b      	ldrh	r3, [r3, #10]
   82c40:	81fb      	strh	r3, [r7, #14]
		   SV_SEND_CAN_MAILBOX(&SV_CAN_MAILBOX_SENSOR_DATA_REG);
   82c42:	f107 0308 	add.w	r3, r7, #8
   82c46:	4618      	mov	r0, r3
   82c48:	4b2b      	ldr	r3, [pc, #172]	; (82cf8 <SV_put_sensor_data+0x208>)
   82c4a:	4798      	blx	r3
 		break;
   82c4c:	e04c      	b.n	82ce8 <SV_put_sensor_data+0x1f8>
		 
		case 3: 
		   SV_CAN_MAILBOX_SENSOR_DATA_REG.CPU_SENDER_type_reg        = SENSOR_CPU_id ;
   82c4e:	2303      	movs	r3, #3
   82c50:	723b      	strb	r3, [r7, #8]
		   SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_GROUP_ID_type_reg	  = SENSOR_GROUP_ID_3 ;
   82c52:	2303      	movs	r3, #3
   82c54:	727b      	strb	r3, [r7, #9]
		   SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_1                   =sensor_struct->CS1_Tempstatus;//sensor_struct->Temp3status;
   82c56:	687b      	ldr	r3, [r7, #4]
   82c58:	899b      	ldrh	r3, [r3, #12]
   82c5a:	817b      	strh	r3, [r7, #10]
		   SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_2	                  =sensor_struct->CS2_Tempstatus; 
   82c5c:	687b      	ldr	r3, [r7, #4]
   82c5e:	89db      	ldrh	r3, [r3, #14]
   82c60:	81bb      	strh	r3, [r7, #12]
		   SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_3	                  = sensor_struct->Temp3status;
   82c62:	687b      	ldr	r3, [r7, #4]
   82c64:	8a1b      	ldrh	r3, [r3, #16]
   82c66:	81fb      	strh	r3, [r7, #14]
		   SV_SEND_CAN_MAILBOX(&SV_CAN_MAILBOX_SENSOR_DATA_REG);
   82c68:	f107 0308 	add.w	r3, r7, #8
   82c6c:	4618      	mov	r0, r3
   82c6e:	4b22      	ldr	r3, [pc, #136]	; (82cf8 <SV_put_sensor_data+0x208>)
   82c70:	4798      	blx	r3
		break;
   82c72:	e039      	b.n	82ce8 <SV_put_sensor_data+0x1f8>
		
		case 4:
		
		   SV_CAN_MAILBOX_SENSOR_DATA_REG.CPU_SENDER_type_reg        = SENSOR_CPU_id ;
   82c74:	2303      	movs	r3, #3
   82c76:	723b      	strb	r3, [r7, #8]
		   SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_GROUP_ID_type_reg	  = SENSOR_GROUP_ID_4 ;
   82c78:	2304      	movs	r3, #4
   82c7a:	727b      	strb	r3, [r7, #9]
		   SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_1                   = sensor_struct->CS3_Tempstatus;
   82c7c:	687b      	ldr	r3, [r7, #4]
   82c7e:	8a5b      	ldrh	r3, [r3, #18]
   82c80:	817b      	strh	r3, [r7, #10]
		   SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_2	                  = sensor_struct->CS1status ;
   82c82:	687b      	ldr	r3, [r7, #4]
   82c84:	8a9b      	ldrh	r3, [r3, #20]
   82c86:	81bb      	strh	r3, [r7, #12]
		   SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_3	                  = sensor_struct->CS2status;
   82c88:	687b      	ldr	r3, [r7, #4]
   82c8a:	8adb      	ldrh	r3, [r3, #22]
   82c8c:	81fb      	strh	r3, [r7, #14]
		   SV_SEND_CAN_MAILBOX(&SV_CAN_MAILBOX_SENSOR_DATA_REG);
   82c8e:	f107 0308 	add.w	r3, r7, #8
   82c92:	4618      	mov	r0, r3
   82c94:	4b18      	ldr	r3, [pc, #96]	; (82cf8 <SV_put_sensor_data+0x208>)
   82c96:	4798      	blx	r3
		break;
   82c98:	e026      	b.n	82ce8 <SV_put_sensor_data+0x1f8>
		
		case  5:
		   SV_CAN_MAILBOX_SENSOR_DATA_REG.CPU_SENDER_type_reg        = SENSOR_CPU_id ;
   82c9a:	2303      	movs	r3, #3
   82c9c:	723b      	strb	r3, [r7, #8]
		   SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_GROUP_ID_type_reg	  = SENSOR_GROUP_ID_5 ;
   82c9e:	2305      	movs	r3, #5
   82ca0:	727b      	strb	r3, [r7, #9]
		   SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_1                   = sensor_struct->CS3status;
   82ca2:	687b      	ldr	r3, [r7, #4]
   82ca4:	8b1b      	ldrh	r3, [r3, #24]
   82ca6:	817b      	strh	r3, [r7, #10]
		   SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_2	                  = sensor_struct->DAC1status ;
   82ca8:	687b      	ldr	r3, [r7, #4]
   82caa:	8b5b      	ldrh	r3, [r3, #26]
   82cac:	81bb      	strh	r3, [r7, #12]
		   SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_3	                  = sensor_struct->DAAstatus;
   82cae:	687b      	ldr	r3, [r7, #4]
   82cb0:	8b9b      	ldrh	r3, [r3, #28]
   82cb2:	81fb      	strh	r3, [r7, #14]
		   SV_SEND_CAN_MAILBOX(&SV_CAN_MAILBOX_SENSOR_DATA_REG);
   82cb4:	f107 0308 	add.w	r3, r7, #8
   82cb8:	4618      	mov	r0, r3
   82cba:	4b0f      	ldr	r3, [pc, #60]	; (82cf8 <SV_put_sensor_data+0x208>)
   82cbc:	4798      	blx	r3
 		break;
   82cbe:	e013      	b.n	82ce8 <SV_put_sensor_data+0x1f8>
		 
		case  6:
		   SV_CAN_MAILBOX_SENSOR_DATA_REG.CPU_SENDER_type_reg        = SENSOR_CPU_id ;
   82cc0:	2303      	movs	r3, #3
   82cc2:	723b      	strb	r3, [r7, #8]
		   SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_GROUP_ID_type_reg	  = SENSOR_GROUP_ID_6 ;
   82cc4:	2306      	movs	r3, #6
   82cc6:	727b      	strb	r3, [r7, #9]
		   SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_1                   = sensor_struct->DABstatus;
   82cc8:	687b      	ldr	r3, [r7, #4]
   82cca:	8bdb      	ldrh	r3, [r3, #30]
   82ccc:	817b      	strh	r3, [r7, #10]
		   SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_2	                  = sensor_struct->DAC2status ;
   82cce:	687b      	ldr	r3, [r7, #4]
   82cd0:	8c1b      	ldrh	r3, [r3, #32]
   82cd2:	81bb      	strh	r3, [r7, #12]
		   SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_3	                  = sensor_struct->flow_sensor_status;
   82cd4:	687b      	ldr	r3, [r7, #4]
   82cd6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
   82cd8:	81fb      	strh	r3, [r7, #14]
		   SV_SEND_CAN_MAILBOX(&SV_CAN_MAILBOX_SENSOR_DATA_REG);
   82cda:	f107 0308 	add.w	r3, r7, #8
   82cde:	4618      	mov	r0, r3
   82ce0:	4b05      	ldr	r3, [pc, #20]	; (82cf8 <SV_put_sensor_data+0x208>)
   82ce2:	4798      	blx	r3
		break;
   82ce4:	e000      	b.n	82ce8 <SV_put_sensor_data+0x1f8>
		
		default:
		break;
   82ce6:	bf00      	nop
		
		return DONE;				
     } 
}
   82ce8:	bf00      	nop
   82cea:	4618      	mov	r0, r3
   82cec:	3710      	adds	r7, #16
   82cee:	46bd      	mov	sp, r7
   82cf0:	bd80      	pop	{r7, pc}
   82cf2:	bf00      	nop
   82cf4:	20070adc 	.word	0x20070adc
   82cf8:	00082a6d 	.word	0x00082a6d

00082cfc <SV_get_sensor_data>:



void SV_get_sensor_data(SV_Sensor_status_type* sensor_struct)   {
   82cfc:	b580      	push	{r7, lr}
   82cfe:	b08e      	sub	sp, #56	; 0x38
   82d00:	af00      	add	r7, sp, #0
   82d02:	6078      	str	r0, [r7, #4]
	 uint16_t sensor_data;
	
	  SV_Sensor_status_type sensor_struct1;
	  uint16_t temp_sensor_data =0;
   82d04:	2300      	movs	r3, #0
   82d06:	86fb      	strh	r3, [r7, #54]	; 0x36
	  uint16_t sensor_status_flag;
	   
	   
 	    sensor_status_flag	= DD_READ_SENSORS(SV_PS1_ID, &sensor_data );	
   82d08:	f107 0332 	add.w	r3, r7, #50	; 0x32
   82d0c:	4619      	mov	r1, r3
   82d0e:	2001      	movs	r0, #1
   82d10:	4b6b      	ldr	r3, [pc, #428]	; (82ec0 <SV_get_sensor_data+0x1c4>)
   82d12:	4798      	blx	r3
   82d14:	4603      	mov	r3, r0
   82d16:	86bb      	strh	r3, [r7, #52]	; 0x34
		 if(sensor_status_flag == SENSOR_READ_OK)	{			 
   82d18:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
   82d1a:	2b00      	cmp	r3, #0
   82d1c:	d104      	bne.n	82d28 <SV_get_sensor_data+0x2c>
			sensor_struct1.ps1status = sensor_data;
   82d1e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
   82d20:	81bb      	strh	r3, [r7, #12]
			sensor_struct->ps1status = sensor_struct1.ps1status	; 
   82d22:	89ba      	ldrh	r2, [r7, #12]
   82d24:	687b      	ldr	r3, [r7, #4]
   82d26:	801a      	strh	r2, [r3, #0]
		 }
		 else {}		
	   
	   sensor_status_flag			= DD_READ_SENSORS(SV_PS2_ID,&sensor_data);	   
   82d28:	f107 0332 	add.w	r3, r7, #50	; 0x32
   82d2c:	4619      	mov	r1, r3
   82d2e:	2002      	movs	r0, #2
   82d30:	4b63      	ldr	r3, [pc, #396]	; (82ec0 <SV_get_sensor_data+0x1c4>)
   82d32:	4798      	blx	r3
   82d34:	4603      	mov	r3, r0
   82d36:	86bb      	strh	r3, [r7, #52]	; 0x34
	    if(sensor_status_flag == SENSOR_READ_OK)	{
   82d38:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
   82d3a:	2b00      	cmp	r3, #0
   82d3c:	d104      	bne.n	82d48 <SV_get_sensor_data+0x4c>
		    sensor_struct1.ps2status = sensor_data;
   82d3e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
   82d40:	81fb      	strh	r3, [r7, #14]
		    sensor_struct->ps2status = sensor_struct1.ps2status	;
   82d42:	89fa      	ldrh	r2, [r7, #14]
   82d44:	687b      	ldr	r3, [r7, #4]
   82d46:	805a      	strh	r2, [r3, #2]
	    }
	    else {}
			
		sensor_status_flag			= DD_READ_SENSORS(SV_PS3_ID, &sensor_data);
   82d48:	f107 0332 	add.w	r3, r7, #50	; 0x32
   82d4c:	4619      	mov	r1, r3
   82d4e:	2003      	movs	r0, #3
   82d50:	4b5b      	ldr	r3, [pc, #364]	; (82ec0 <SV_get_sensor_data+0x1c4>)
   82d52:	4798      	blx	r3
   82d54:	4603      	mov	r3, r0
   82d56:	86bb      	strh	r3, [r7, #52]	; 0x34
		 if(sensor_status_flag == SENSOR_READ_OK)	{
   82d58:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
   82d5a:	2b00      	cmp	r3, #0
   82d5c:	d104      	bne.n	82d68 <SV_get_sensor_data+0x6c>
			 sensor_struct1.ps3status = sensor_data;
   82d5e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
   82d60:	823b      	strh	r3, [r7, #16]
			 sensor_struct->ps3status = sensor_struct1.ps3status	;
   82d62:	8a3a      	ldrh	r2, [r7, #16]
   82d64:	687b      	ldr	r3, [r7, #4]
   82d66:	809a      	strh	r2, [r3, #4]
		 }
		 else {}
	  
   	      sensor_status_flag		= DD_READ_SENSORS(SV_TS1_ID, &sensor_data);
   82d68:	f107 0332 	add.w	r3, r7, #50	; 0x32
   82d6c:	4619      	mov	r1, r3
   82d6e:	2005      	movs	r0, #5
   82d70:	4b53      	ldr	r3, [pc, #332]	; (82ec0 <SV_get_sensor_data+0x1c4>)
   82d72:	4798      	blx	r3
   82d74:	4603      	mov	r3, r0
   82d76:	86bb      	strh	r3, [r7, #52]	; 0x34
		  if(sensor_status_flag == SENSOR_READ_OK)	{
   82d78:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
   82d7a:	2b00      	cmp	r3, #0
   82d7c:	d111      	bne.n	82da2 <SV_get_sensor_data+0xa6>
			  sensor_struct1.Temp1status = sensor_data;
   82d7e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
   82d80:	82bb      	strh	r3, [r7, #20]
		 
			 if (TS1_Avg == 0)
   82d82:	4b50      	ldr	r3, [pc, #320]	; (82ec4 <SV_get_sensor_data+0x1c8>)
   82d84:	881b      	ldrh	r3, [r3, #0]
   82d86:	2b00      	cmp	r3, #0
   82d88:	d102      	bne.n	82d90 <SV_get_sensor_data+0x94>
			 {
				 TS1_Avg = sensor_struct1.Temp1status;
   82d8a:	8aba      	ldrh	r2, [r7, #20]
   82d8c:	4b4d      	ldr	r3, [pc, #308]	; (82ec4 <SV_get_sensor_data+0x1c8>)
   82d8e:	801a      	strh	r2, [r3, #0]
			 }
			 //	TS2_Avg = (TS2_Avg + sensor_struct1.Temp2status)/2;
			 Temp_Averaging(sensor_struct1.Temp1status,1);
   82d90:	8abb      	ldrh	r3, [r7, #20]
   82d92:	2101      	movs	r1, #1
   82d94:	4618      	mov	r0, r3
   82d96:	4b4c      	ldr	r3, [pc, #304]	; (82ec8 <SV_get_sensor_data+0x1cc>)
   82d98:	4798      	blx	r3
			 sensor_struct->Temp1status = TS1_Avg	;
   82d9a:	4b4a      	ldr	r3, [pc, #296]	; (82ec4 <SV_get_sensor_data+0x1c8>)
   82d9c:	881a      	ldrh	r2, [r3, #0]
   82d9e:	687b      	ldr	r3, [r7, #4]
   82da0:	811a      	strh	r2, [r3, #8]
		  }
	//	  else {}
	 
  	   
 		sensor_status_flag			= DD_READ_SENSORS(SV_TS2_ID, &sensor_data); 
   82da2:	f107 0332 	add.w	r3, r7, #50	; 0x32
   82da6:	4619      	mov	r1, r3
   82da8:	2006      	movs	r0, #6
   82daa:	4b45      	ldr	r3, [pc, #276]	; (82ec0 <SV_get_sensor_data+0x1c4>)
   82dac:	4798      	blx	r3
   82dae:	4603      	mov	r3, r0
   82db0:	86bb      	strh	r3, [r7, #52]	; 0x34
	    if(sensor_status_flag == SENSOR_READ_OK)	{
   82db2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
   82db4:	2b00      	cmp	r3, #0
   82db6:	d111      	bne.n	82ddc <SV_get_sensor_data+0xe0>
		    sensor_struct1.Temp2status = sensor_data;
   82db8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
   82dba:	82fb      	strh	r3, [r7, #22]
			if (TS2_Avg == 0)
   82dbc:	4b43      	ldr	r3, [pc, #268]	; (82ecc <SV_get_sensor_data+0x1d0>)
   82dbe:	881b      	ldrh	r3, [r3, #0]
   82dc0:	2b00      	cmp	r3, #0
   82dc2:	d102      	bne.n	82dca <SV_get_sensor_data+0xce>
			{
				 TS2_Avg = sensor_struct1.Temp2status;
   82dc4:	8afa      	ldrh	r2, [r7, #22]
   82dc6:	4b41      	ldr	r3, [pc, #260]	; (82ecc <SV_get_sensor_data+0x1d0>)
   82dc8:	801a      	strh	r2, [r3, #0]
			}
				//		TS2_Avg = (TS2_Avg + sensor_struct1.Temp2status)/2;   
			Temp_Averaging(sensor_struct1.Temp2status,2);   
   82dca:	8afb      	ldrh	r3, [r7, #22]
   82dcc:	2102      	movs	r1, #2
   82dce:	4618      	mov	r0, r3
   82dd0:	4b3d      	ldr	r3, [pc, #244]	; (82ec8 <SV_get_sensor_data+0x1cc>)
   82dd2:	4798      	blx	r3
			sensor_struct->Temp2status = TS2_Avg;		 
   82dd4:	4b3d      	ldr	r3, [pc, #244]	; (82ecc <SV_get_sensor_data+0x1d0>)
   82dd6:	881a      	ldrh	r2, [r3, #0]
   82dd8:	687b      	ldr	r3, [r7, #4]
   82dda:	815a      	strh	r2, [r3, #10]
	    }
//		else {}	
		
		sensor_status_flag			= DD_READ_SENSORS(SV_TS3_ID, &sensor_data);
   82ddc:	f107 0332 	add.w	r3, r7, #50	; 0x32
   82de0:	4619      	mov	r1, r3
   82de2:	2009      	movs	r0, #9
   82de4:	4b36      	ldr	r3, [pc, #216]	; (82ec0 <SV_get_sensor_data+0x1c4>)
   82de6:	4798      	blx	r3
   82de8:	4603      	mov	r3, r0
   82dea:	86bb      	strh	r3, [r7, #52]	; 0x34
		if(sensor_status_flag == SENSOR_READ_OK)	
   82dec:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
   82dee:	2b00      	cmp	r3, #0
   82df0:	d111      	bne.n	82e16 <SV_get_sensor_data+0x11a>
		{
			sensor_struct1.Temp3status = sensor_data;
   82df2:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
   82df4:	83bb      	strh	r3, [r7, #28]
			   if (TS3_Avg == 0)
   82df6:	4b36      	ldr	r3, [pc, #216]	; (82ed0 <SV_get_sensor_data+0x1d4>)
   82df8:	881b      	ldrh	r3, [r3, #0]
   82dfa:	2b00      	cmp	r3, #0
   82dfc:	d102      	bne.n	82e04 <SV_get_sensor_data+0x108>
			  	 {
				  	 TS3_Avg = sensor_struct1.Temp3status;
   82dfe:	8bba      	ldrh	r2, [r7, #28]
   82e00:	4b33      	ldr	r3, [pc, #204]	; (82ed0 <SV_get_sensor_data+0x1d4>)
   82e02:	801a      	strh	r2, [r3, #0]
			  	 }
//			   TS3_Avg = (TS3_Avg + sensor_struct1.Temp3status)/2;      // this shd be sensor_struct1.CS3_Tempstatus for Machine 2 for current sensor board 07082017
				Temp_Averaging(sensor_struct1.Temp3status,3);
   82e04:	8bbb      	ldrh	r3, [r7, #28]
   82e06:	2103      	movs	r1, #3
   82e08:	4618      	mov	r0, r3
   82e0a:	4b2f      	ldr	r3, [pc, #188]	; (82ec8 <SV_get_sensor_data+0x1cc>)
   82e0c:	4798      	blx	r3
			  sensor_struct->Temp3status = TS3_Avg;
   82e0e:	4b30      	ldr	r3, [pc, #192]	; (82ed0 <SV_get_sensor_data+0x1d4>)
   82e10:	881a      	ldrh	r2, [r3, #0]
   82e12:	687b      	ldr	r3, [r7, #4]
   82e14:	821a      	strh	r2, [r3, #16]
// 	
//      Avg_Count_1++;
// 	 Avg_Count_2++;
// 	 Avg_Count_3++;
	  
 	  sensor_status_flag		= DD_READ_SENSORS(SV_CS1_TS_ID, &sensor_data);
   82e16:	f107 0332 	add.w	r3, r7, #50	; 0x32
   82e1a:	4619      	mov	r1, r3
   82e1c:	2007      	movs	r0, #7
   82e1e:	4b28      	ldr	r3, [pc, #160]	; (82ec0 <SV_get_sensor_data+0x1c4>)
   82e20:	4798      	blx	r3
   82e22:	4603      	mov	r3, r0
   82e24:	86bb      	strh	r3, [r7, #52]	; 0x34
	    if(sensor_status_flag == SENSOR_READ_OK)	{
   82e26:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
   82e28:	2b00      	cmp	r3, #0
   82e2a:	d104      	bne.n	82e36 <SV_get_sensor_data+0x13a>
		    sensor_struct1.CS1_Tempstatus = sensor_data;
   82e2c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
   82e2e:	833b      	strh	r3, [r7, #24]
		    sensor_struct->CS1_Tempstatus = sensor_struct1.CS1_Tempstatus	;
   82e30:	8b3a      	ldrh	r2, [r7, #24]
   82e32:	687b      	ldr	r3, [r7, #4]
   82e34:	819a      	strh	r2, [r3, #12]
	    }
	    else {}
	    
 	  
  	  sensor_status_flag   	= DD_READ_SENSORS(SV_CS2_TS_ID, &sensor_data);
   82e36:	f107 0332 	add.w	r3, r7, #50	; 0x32
   82e3a:	4619      	mov	r1, r3
   82e3c:	2008      	movs	r0, #8
   82e3e:	4b20      	ldr	r3, [pc, #128]	; (82ec0 <SV_get_sensor_data+0x1c4>)
   82e40:	4798      	blx	r3
   82e42:	4603      	mov	r3, r0
   82e44:	86bb      	strh	r3, [r7, #52]	; 0x34
		if(sensor_status_flag == SENSOR_READ_OK)	{
   82e46:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
   82e48:	2b00      	cmp	r3, #0
   82e4a:	d104      	bne.n	82e56 <SV_get_sensor_data+0x15a>
			sensor_struct1.CS2_Tempstatus = sensor_data;
   82e4c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
   82e4e:	837b      	strh	r3, [r7, #26]
			sensor_struct->CS2_Tempstatus = sensor_struct1.CS2_Tempstatus	;
   82e50:	8b7a      	ldrh	r2, [r7, #26]
   82e52:	687b      	ldr	r3, [r7, #4]
   82e54:	81da      	strh	r2, [r3, #14]
		}
		else {}
			
	 sensor_status_flag   	= DD_READ_SENSORS(SV_CS3_TS_ID, &sensor_data);
   82e56:	f107 0332 	add.w	r3, r7, #50	; 0x32
   82e5a:	4619      	mov	r1, r3
   82e5c:	200a      	movs	r0, #10
   82e5e:	4b18      	ldr	r3, [pc, #96]	; (82ec0 <SV_get_sensor_data+0x1c4>)
   82e60:	4798      	blx	r3
   82e62:	4603      	mov	r3, r0
   82e64:	86bb      	strh	r3, [r7, #52]	; 0x34
	 if(sensor_status_flag == SENSOR_READ_OK)	{
   82e66:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
   82e68:	2b00      	cmp	r3, #0
   82e6a:	d104      	bne.n	82e76 <SV_get_sensor_data+0x17a>
		 sensor_struct1.CS3_Tempstatus = sensor_data;
   82e6c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
   82e6e:	83fb      	strh	r3, [r7, #30]
		 sensor_struct->CS3_Tempstatus = sensor_struct1.CS3_Tempstatus	;
   82e70:	8bfa      	ldrh	r2, [r7, #30]
   82e72:	687b      	ldr	r3, [r7, #4]
   82e74:	825a      	strh	r2, [r3, #18]
	 }
	 else {}
  	   
	 
	  DD_READ_SENSORS(SV_DAA_ID, &sensor_data);
   82e76:	f107 0332 	add.w	r3, r7, #50	; 0x32
   82e7a:	4619      	mov	r1, r3
   82e7c:	200f      	movs	r0, #15
   82e7e:	4b10      	ldr	r3, [pc, #64]	; (82ec0 <SV_get_sensor_data+0x1c4>)
   82e80:	4798      	blx	r3
	 sensor_struct1.DAAstatus	 = sensor_data;
   82e82:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
   82e84:	853b      	strh	r3, [r7, #40]	; 0x28
	 sensor_struct->DAAstatus            = sensor_struct1.DAAstatus	;
   82e86:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
   82e88:	687b      	ldr	r3, [r7, #4]
   82e8a:	839a      	strh	r2, [r3, #28]
	 
	 
	  DD_READ_SENSORS(SV_DAB_ID, &sensor_data);
   82e8c:	f107 0332 	add.w	r3, r7, #50	; 0x32
   82e90:	4619      	mov	r1, r3
   82e92:	2010      	movs	r0, #16
   82e94:	4b0a      	ldr	r3, [pc, #40]	; (82ec0 <SV_get_sensor_data+0x1c4>)
   82e96:	4798      	blx	r3
	 sensor_struct1.DABstatus	 = sensor_data;
   82e98:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
   82e9a:	857b      	strh	r3, [r7, #42]	; 0x2a
	 sensor_struct->DABstatus            = sensor_struct1.DABstatus	;
   82e9c:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
   82e9e:	687b      	ldr	r3, [r7, #4]
   82ea0:	83da      	strh	r2, [r3, #30]
 	 
	  DD_READ_SENSORS(SV_DAC1_ID, &sensor_data);
   82ea2:	f107 0332 	add.w	r3, r7, #50	; 0x32
   82ea6:	4619      	mov	r1, r3
   82ea8:	200e      	movs	r0, #14
   82eaa:	4b05      	ldr	r3, [pc, #20]	; (82ec0 <SV_get_sensor_data+0x1c4>)
   82eac:	4798      	blx	r3
	 sensor_struct1.DAC1status	 = sensor_data;
   82eae:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
   82eb0:	84fb      	strh	r3, [r7, #38]	; 0x26
	 sensor_struct->DAC1status            = sensor_struct1.DAC1status	;
   82eb2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
   82eb4:	687b      	ldr	r3, [r7, #4]
   82eb6:	835a      	strh	r2, [r3, #26]
				
		
		
		
	/*sensor_struct->flow_sensor_status   = sensor_struct1.flow_sensor_status	;	*/
}
   82eb8:	bf00      	nop
   82eba:	3738      	adds	r7, #56	; 0x38
   82ebc:	46bd      	mov	sp, r7
   82ebe:	bd80      	pop	{r7, pc}
   82ec0:	00081cf5 	.word	0x00081cf5
   82ec4:	20070a00 	.word	0x20070a00
   82ec8:	00082ed5 	.word	0x00082ed5
   82ecc:	200709fe 	.word	0x200709fe
   82ed0:	200709fc 	.word	0x200709fc

00082ed4 <Temp_Averaging>:

uint16_t Temp_Averaging(uint16_t temp,uint8_t temp_ID)
{
   82ed4:	b480      	push	{r7}
   82ed6:	b083      	sub	sp, #12
   82ed8:	af00      	add	r7, sp, #0
   82eda:	4603      	mov	r3, r0
   82edc:	460a      	mov	r2, r1
   82ede:	80fb      	strh	r3, [r7, #6]
   82ee0:	4613      	mov	r3, r2
   82ee2:	717b      	strb	r3, [r7, #5]
	switch (temp_ID)
   82ee4:	797b      	ldrb	r3, [r7, #5]
   82ee6:	2b02      	cmp	r3, #2
   82ee8:	d01e      	beq.n	82f28 <Temp_Averaging+0x54>
   82eea:	2b03      	cmp	r3, #3
   82eec:	d036      	beq.n	82f5c <Temp_Averaging+0x88>
   82eee:	2b01      	cmp	r3, #1
   82ef0:	d000      	beq.n	82ef4 <Temp_Averaging+0x20>
// 			Avg_Count_3 = 0;
// 		}
		break;
		
		default:
		break;
   82ef2:	e04d      	b.n	82f90 <Temp_Averaging+0xbc>
uint16_t Temp_Averaging(uint16_t temp,uint8_t temp_ID)
{
	switch (temp_ID)
	{
		case 1:
		if (TS1_Avg_Backup = 0)
   82ef4:	4b29      	ldr	r3, [pc, #164]	; (82f9c <Temp_Averaging+0xc8>)
   82ef6:	2200      	movs	r2, #0
   82ef8:	801a      	strh	r2, [r3, #0]
		{
			TS1_Avg_Backup = temp;
		}
		else TS1_Avg_Backup = TS1_Avg_Backup + temp;
   82efa:	4b28      	ldr	r3, [pc, #160]	; (82f9c <Temp_Averaging+0xc8>)
   82efc:	881a      	ldrh	r2, [r3, #0]
   82efe:	88fb      	ldrh	r3, [r7, #6]
   82f00:	4413      	add	r3, r2
   82f02:	b29a      	uxth	r2, r3
   82f04:	4b25      	ldr	r3, [pc, #148]	; (82f9c <Temp_Averaging+0xc8>)
   82f06:	801a      	strh	r2, [r3, #0]
		TS1_Avg = (TS1_Avg*7 + temp)/8;
   82f08:	4b25      	ldr	r3, [pc, #148]	; (82fa0 <Temp_Averaging+0xcc>)
   82f0a:	881b      	ldrh	r3, [r3, #0]
   82f0c:	461a      	mov	r2, r3
   82f0e:	4613      	mov	r3, r2
   82f10:	00db      	lsls	r3, r3, #3
   82f12:	1a9a      	subs	r2, r3, r2
   82f14:	88fb      	ldrh	r3, [r7, #6]
   82f16:	4413      	add	r3, r2
   82f18:	2b00      	cmp	r3, #0
   82f1a:	da00      	bge.n	82f1e <Temp_Averaging+0x4a>
   82f1c:	3307      	adds	r3, #7
   82f1e:	10db      	asrs	r3, r3, #3
   82f20:	b29a      	uxth	r2, r3
   82f22:	4b1f      	ldr	r3, [pc, #124]	; (82fa0 <Temp_Averaging+0xcc>)
   82f24:	801a      	strh	r2, [r3, #0]
// 		{
// 			TS1_Avg = TS1_Avg_Backup/10;
// 			TS1_Avg_Backup =0;
// 			Avg_Count_1 = 0;
// 		}
		break;
   82f26:	e033      	b.n	82f90 <Temp_Averaging+0xbc>
		
		case 2:
		if (TS2_Avg_Backup = 0)
   82f28:	4b1e      	ldr	r3, [pc, #120]	; (82fa4 <Temp_Averaging+0xd0>)
   82f2a:	2200      	movs	r2, #0
   82f2c:	801a      	strh	r2, [r3, #0]
		{
			TS2_Avg_Backup = temp;
		}
		else TS2_Avg_Backup = TS2_Avg_Backup + temp;
   82f2e:	4b1d      	ldr	r3, [pc, #116]	; (82fa4 <Temp_Averaging+0xd0>)
   82f30:	881a      	ldrh	r2, [r3, #0]
   82f32:	88fb      	ldrh	r3, [r7, #6]
   82f34:	4413      	add	r3, r2
   82f36:	b29a      	uxth	r2, r3
   82f38:	4b1a      	ldr	r3, [pc, #104]	; (82fa4 <Temp_Averaging+0xd0>)
   82f3a:	801a      	strh	r2, [r3, #0]
		TS2_Avg = (TS2_Avg*7 + temp)/8;
   82f3c:	4b1a      	ldr	r3, [pc, #104]	; (82fa8 <Temp_Averaging+0xd4>)
   82f3e:	881b      	ldrh	r3, [r3, #0]
   82f40:	461a      	mov	r2, r3
   82f42:	4613      	mov	r3, r2
   82f44:	00db      	lsls	r3, r3, #3
   82f46:	1a9a      	subs	r2, r3, r2
   82f48:	88fb      	ldrh	r3, [r7, #6]
   82f4a:	4413      	add	r3, r2
   82f4c:	2b00      	cmp	r3, #0
   82f4e:	da00      	bge.n	82f52 <Temp_Averaging+0x7e>
   82f50:	3307      	adds	r3, #7
   82f52:	10db      	asrs	r3, r3, #3
   82f54:	b29a      	uxth	r2, r3
   82f56:	4b14      	ldr	r3, [pc, #80]	; (82fa8 <Temp_Averaging+0xd4>)
   82f58:	801a      	strh	r2, [r3, #0]
// 		{
// 			TS2_Avg = TS2_Avg_Backup/10;
// 			TS2_Avg_Backup =0;
// 			Avg_Count_2 = 0;
// 		}
		break;
   82f5a:	e019      	b.n	82f90 <Temp_Averaging+0xbc>
		
		case 3:
		if (TS3_Avg_Backup = 0)
   82f5c:	4b13      	ldr	r3, [pc, #76]	; (82fac <Temp_Averaging+0xd8>)
   82f5e:	2200      	movs	r2, #0
   82f60:	801a      	strh	r2, [r3, #0]
		{
			TS3_Avg_Backup = temp;
		}
		else TS3_Avg_Backup = TS3_Avg_Backup + temp;
   82f62:	4b12      	ldr	r3, [pc, #72]	; (82fac <Temp_Averaging+0xd8>)
   82f64:	881a      	ldrh	r2, [r3, #0]
   82f66:	88fb      	ldrh	r3, [r7, #6]
   82f68:	4413      	add	r3, r2
   82f6a:	b29a      	uxth	r2, r3
   82f6c:	4b0f      	ldr	r3, [pc, #60]	; (82fac <Temp_Averaging+0xd8>)
   82f6e:	801a      	strh	r2, [r3, #0]
		TS3_Avg = (TS3_Avg*7+ temp)/8;
   82f70:	4b0f      	ldr	r3, [pc, #60]	; (82fb0 <Temp_Averaging+0xdc>)
   82f72:	881b      	ldrh	r3, [r3, #0]
   82f74:	461a      	mov	r2, r3
   82f76:	4613      	mov	r3, r2
   82f78:	00db      	lsls	r3, r3, #3
   82f7a:	1a9a      	subs	r2, r3, r2
   82f7c:	88fb      	ldrh	r3, [r7, #6]
   82f7e:	4413      	add	r3, r2
   82f80:	2b00      	cmp	r3, #0
   82f82:	da00      	bge.n	82f86 <Temp_Averaging+0xb2>
   82f84:	3307      	adds	r3, #7
   82f86:	10db      	asrs	r3, r3, #3
   82f88:	b29a      	uxth	r2, r3
   82f8a:	4b09      	ldr	r3, [pc, #36]	; (82fb0 <Temp_Averaging+0xdc>)
   82f8c:	801a      	strh	r2, [r3, #0]
// 		{
// 			TS3_Avg = TS3_Avg_Backup/10;
// 			TS3_Avg_Backup =0;
// 			Avg_Count_3 = 0;
// 		}
		break;
   82f8e:	bf00      	nop
// 		Avg_Count = 0;
// 	}
// 	
// 	Avg_Count++;
	
	return 0;
   82f90:	2300      	movs	r3, #0
	
   82f92:	4618      	mov	r0, r3
   82f94:	370c      	adds	r7, #12
   82f96:	46bd      	mov	sp, r7
   82f98:	bc80      	pop	{r7}
   82f9a:	4770      	bx	lr
   82f9c:	20070a06 	.word	0x20070a06
   82fa0:	20070a00 	.word	0x20070a00
   82fa4:	20070a04 	.word	0x20070a04
   82fa8:	200709fe 	.word	0x200709fe
   82fac:	20070a02 	.word	0x20070a02
   82fb0:	200709fc 	.word	0x200709fc

00082fb4 <SV_SYSTEM_INIT>:
#include "SV_SYS.h"
//#include "Platform/Service/SV_SYS//SV_TIMER.h"



void SV_SYSTEM_INIT()   {
   82fb4:	b580      	push	{r7, lr}
   82fb6:	af00      	add	r7, sp, #0
	
	SENSOR_D_INIT_CLOCK();
   82fb8:	4b06      	ldr	r3, [pc, #24]	; (82fd4 <SV_SYSTEM_INIT+0x20>)
   82fba:	4798      	blx	r3
	SENSOR_D_INIT_UART();
   82fbc:	4b06      	ldr	r3, [pc, #24]	; (82fd8 <SV_SYSTEM_INIT+0x24>)
   82fbe:	4798      	blx	r3
	SENSOR_D_INIT_PIO();
   82fc0:	4b06      	ldr	r3, [pc, #24]	; (82fdc <SV_SYSTEM_INIT+0x28>)
   82fc2:	4798      	blx	r3
	SENSOR_DD_INIT_SPI();
   82fc4:	4b06      	ldr	r3, [pc, #24]	; (82fe0 <SV_SYSTEM_INIT+0x2c>)
   82fc6:	4798      	blx	r3
	SENSOR_DD_INIT_CAN();	
   82fc8:	4b06      	ldr	r3, [pc, #24]	; (82fe4 <SV_SYSTEM_INIT+0x30>)
   82fca:	4798      	blx	r3
	DD_INIT_ALL_SENSORS();
   82fcc:	4b06      	ldr	r3, [pc, #24]	; (82fe8 <SV_SYSTEM_INIT+0x34>)
   82fce:	4798      	blx	r3
   82fd0:	bf00      	nop
   82fd2:	bd80      	pop	{r7, pc}
   82fd4:	00080735 	.word	0x00080735
   82fd8:	00083799 	.word	0x00083799
   82fdc:	0008097d 	.word	0x0008097d
   82fe0:	00081889 	.word	0x00081889
   82fe4:	000805a9 	.word	0x000805a9
   82fe8:	00081c05 	.word	0x00081c05

00082fec <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   82fec:	b580      	push	{r7, lr}
   82fee:	b086      	sub	sp, #24
   82ff0:	af00      	add	r7, sp, #0
   82ff2:	60f8      	str	r0, [r7, #12]
   82ff4:	60b9      	str	r1, [r7, #8]
   82ff6:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   82ff8:	2300      	movs	r3, #0
   82ffa:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
   82ffc:	68fb      	ldr	r3, [r7, #12]
   82ffe:	2b01      	cmp	r3, #1
   83000:	d01e      	beq.n	83040 <_write+0x54>
   83002:	68fb      	ldr	r3, [r7, #12]
   83004:	2b02      	cmp	r3, #2
   83006:	d01b      	beq.n	83040 <_write+0x54>
   83008:	68fb      	ldr	r3, [r7, #12]
   8300a:	2b03      	cmp	r3, #3
   8300c:	d018      	beq.n	83040 <_write+0x54>
		return -1;
   8300e:	f04f 33ff 	mov.w	r3, #4294967295
   83012:	e019      	b.n	83048 <_write+0x5c>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
   83014:	4b0e      	ldr	r3, [pc, #56]	; (83050 <_write+0x64>)
   83016:	681a      	ldr	r2, [r3, #0]
   83018:	4b0e      	ldr	r3, [pc, #56]	; (83054 <_write+0x68>)
   8301a:	6818      	ldr	r0, [r3, #0]
   8301c:	68bb      	ldr	r3, [r7, #8]
   8301e:	1c59      	adds	r1, r3, #1
   83020:	60b9      	str	r1, [r7, #8]
   83022:	781b      	ldrb	r3, [r3, #0]
   83024:	4619      	mov	r1, r3
   83026:	4790      	blx	r2
   83028:	4603      	mov	r3, r0
   8302a:	2b00      	cmp	r3, #0
   8302c:	da02      	bge.n	83034 <_write+0x48>
			return -1;
   8302e:	f04f 33ff 	mov.w	r3, #4294967295
   83032:	e009      	b.n	83048 <_write+0x5c>
		}
		++nChars;
   83034:	697b      	ldr	r3, [r7, #20]
   83036:	3301      	adds	r3, #1
   83038:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   8303a:	687b      	ldr	r3, [r7, #4]
   8303c:	3b01      	subs	r3, #1
   8303e:	607b      	str	r3, [r7, #4]
   83040:	687b      	ldr	r3, [r7, #4]
   83042:	2b00      	cmp	r3, #0
   83044:	d1e6      	bne.n	83014 <_write+0x28>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
   83046:	697b      	ldr	r3, [r7, #20]
}
   83048:	4618      	mov	r0, r3
   8304a:	3718      	adds	r7, #24
   8304c:	46bd      	mov	sp, r7
   8304e:	bd80      	pop	{r7, pc}
   83050:	20070b04 	.word	0x20070b04
   83054:	20070b08 	.word	0x20070b08

00083058 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   83058:	b480      	push	{r7}
   8305a:	b089      	sub	sp, #36	; 0x24
   8305c:	af00      	add	r7, sp, #0
   8305e:	60f8      	str	r0, [r7, #12]
   83060:	60b9      	str	r1, [r7, #8]
   83062:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
   83064:	68bb      	ldr	r3, [r7, #8]
   83066:	011a      	lsls	r2, r3, #4
   83068:	687b      	ldr	r3, [r7, #4]
   8306a:	429a      	cmp	r2, r3
   8306c:	d802      	bhi.n	83074 <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
   8306e:	2310      	movs	r3, #16
   83070:	61fb      	str	r3, [r7, #28]
   83072:	e001      	b.n	83078 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
   83074:	2308      	movs	r3, #8
   83076:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   83078:	687b      	ldr	r3, [r7, #4]
   8307a:	00da      	lsls	r2, r3, #3
   8307c:	69fb      	ldr	r3, [r7, #28]
   8307e:	68b9      	ldr	r1, [r7, #8]
   83080:	fb01 f303 	mul.w	r3, r1, r3
   83084:	085b      	lsrs	r3, r3, #1
   83086:	441a      	add	r2, r3
   83088:	69fb      	ldr	r3, [r7, #28]
   8308a:	68b9      	ldr	r1, [r7, #8]
   8308c:	fb01 f303 	mul.w	r3, r1, r3
   83090:	fbb2 f3f3 	udiv	r3, r2, r3
   83094:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
   83096:	69bb      	ldr	r3, [r7, #24]
   83098:	08db      	lsrs	r3, r3, #3
   8309a:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
   8309c:	69bb      	ldr	r3, [r7, #24]
   8309e:	f003 0307 	and.w	r3, r3, #7
   830a2:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   830a4:	697b      	ldr	r3, [r7, #20]
   830a6:	2b00      	cmp	r3, #0
   830a8:	d003      	beq.n	830b2 <usart_set_async_baudrate+0x5a>
   830aa:	697b      	ldr	r3, [r7, #20]
   830ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   830b0:	d301      	bcc.n	830b6 <usart_set_async_baudrate+0x5e>
		return 1;
   830b2:	2301      	movs	r3, #1
   830b4:	e00f      	b.n	830d6 <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
   830b6:	69fb      	ldr	r3, [r7, #28]
   830b8:	2b08      	cmp	r3, #8
   830ba:	d105      	bne.n	830c8 <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
   830bc:	68fb      	ldr	r3, [r7, #12]
   830be:	685b      	ldr	r3, [r3, #4]
   830c0:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
   830c4:	68fb      	ldr	r3, [r7, #12]
   830c6:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
   830c8:	693b      	ldr	r3, [r7, #16]
   830ca:	041a      	lsls	r2, r3, #16
   830cc:	697b      	ldr	r3, [r7, #20]
   830ce:	431a      	orrs	r2, r3
   830d0:	68fb      	ldr	r3, [r7, #12]
   830d2:	621a      	str	r2, [r3, #32]

	return 0;
   830d4:	2300      	movs	r3, #0
}
   830d6:	4618      	mov	r0, r3
   830d8:	3724      	adds	r7, #36	; 0x24
   830da:	46bd      	mov	sp, r7
   830dc:	bc80      	pop	{r7}
   830de:	4770      	bx	lr

000830e0 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
   830e0:	b580      	push	{r7, lr}
   830e2:	b082      	sub	sp, #8
   830e4:	af00      	add	r7, sp, #0
   830e6:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
   830e8:	6878      	ldr	r0, [r7, #4]
   830ea:	4b0d      	ldr	r3, [pc, #52]	; (83120 <usart_reset+0x40>)
   830ec:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
   830ee:	687b      	ldr	r3, [r7, #4]
   830f0:	2200      	movs	r2, #0
   830f2:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
   830f4:	687b      	ldr	r3, [r7, #4]
   830f6:	2200      	movs	r2, #0
   830f8:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
   830fa:	687b      	ldr	r3, [r7, #4]
   830fc:	2200      	movs	r2, #0
   830fe:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
   83100:	6878      	ldr	r0, [r7, #4]
   83102:	4b08      	ldr	r3, [pc, #32]	; (83124 <usart_reset+0x44>)
   83104:	4798      	blx	r3
	usart_reset_rx(p_usart);
   83106:	6878      	ldr	r0, [r7, #4]
   83108:	4b07      	ldr	r3, [pc, #28]	; (83128 <usart_reset+0x48>)
   8310a:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
   8310c:	6878      	ldr	r0, [r7, #4]
   8310e:	4b07      	ldr	r3, [pc, #28]	; (8312c <usart_reset+0x4c>)
   83110:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
   83112:	6878      	ldr	r0, [r7, #4]
   83114:	4b06      	ldr	r3, [pc, #24]	; (83130 <usart_reset+0x50>)
   83116:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
#endif
}
   83118:	bf00      	nop
   8311a:	3708      	adds	r7, #8
   8311c:	46bd      	mov	sp, r7
   8311e:	bd80      	pop	{r7, pc}
   83120:	000832b5 	.word	0x000832b5
   83124:	000831d1 	.word	0x000831d1
   83128:	00083201 	.word	0x00083201
   8312c:	00083219 	.word	0x00083219
   83130:	00083235 	.word	0x00083235

00083134 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
   83134:	b580      	push	{r7, lr}
   83136:	b084      	sub	sp, #16
   83138:	af00      	add	r7, sp, #0
   8313a:	60f8      	str	r0, [r7, #12]
   8313c:	60b9      	str	r1, [r7, #8]
   8313e:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
   83140:	68f8      	ldr	r0, [r7, #12]
   83142:	4b1a      	ldr	r3, [pc, #104]	; (831ac <usart_init_rs232+0x78>)
   83144:	4798      	blx	r3

	ul_reg_val = 0;
   83146:	4b1a      	ldr	r3, [pc, #104]	; (831b0 <usart_init_rs232+0x7c>)
   83148:	2200      	movs	r2, #0
   8314a:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
   8314c:	68bb      	ldr	r3, [r7, #8]
   8314e:	2b00      	cmp	r3, #0
   83150:	d009      	beq.n	83166 <usart_init_rs232+0x32>
   83152:	68bb      	ldr	r3, [r7, #8]
   83154:	681b      	ldr	r3, [r3, #0]
   83156:	687a      	ldr	r2, [r7, #4]
   83158:	4619      	mov	r1, r3
   8315a:	68f8      	ldr	r0, [r7, #12]
   8315c:	4b15      	ldr	r3, [pc, #84]	; (831b4 <usart_init_rs232+0x80>)
   8315e:	4798      	blx	r3
   83160:	4603      	mov	r3, r0
   83162:	2b00      	cmp	r3, #0
   83164:	d001      	beq.n	8316a <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
   83166:	2301      	movs	r3, #1
   83168:	e01b      	b.n	831a2 <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   8316a:	68bb      	ldr	r3, [r7, #8]
   8316c:	685a      	ldr	r2, [r3, #4]
   8316e:	68bb      	ldr	r3, [r7, #8]
   83170:	689b      	ldr	r3, [r3, #8]
   83172:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   83174:	68bb      	ldr	r3, [r7, #8]
   83176:	691b      	ldr	r3, [r3, #16]
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   83178:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   8317a:	68bb      	ldr	r3, [r7, #8]
   8317c:	68db      	ldr	r3, [r3, #12]
   8317e:	431a      	orrs	r2, r3
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   83180:	4b0b      	ldr	r3, [pc, #44]	; (831b0 <usart_init_rs232+0x7c>)
   83182:	681b      	ldr	r3, [r3, #0]
   83184:	4313      	orrs	r3, r2
   83186:	4a0a      	ldr	r2, [pc, #40]	; (831b0 <usart_init_rs232+0x7c>)
   83188:	6013      	str	r3, [r2, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
   8318a:	4b09      	ldr	r3, [pc, #36]	; (831b0 <usart_init_rs232+0x7c>)
   8318c:	681b      	ldr	r3, [r3, #0]
   8318e:	4a08      	ldr	r2, [pc, #32]	; (831b0 <usart_init_rs232+0x7c>)
   83190:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
   83192:	68fb      	ldr	r3, [r7, #12]
   83194:	685a      	ldr	r2, [r3, #4]
   83196:	4b06      	ldr	r3, [pc, #24]	; (831b0 <usart_init_rs232+0x7c>)
   83198:	681b      	ldr	r3, [r3, #0]
   8319a:	431a      	orrs	r2, r3
   8319c:	68fb      	ldr	r3, [r7, #12]
   8319e:	605a      	str	r2, [r3, #4]

	return 0;
   831a0:	2300      	movs	r3, #0
}
   831a2:	4618      	mov	r0, r3
   831a4:	3710      	adds	r7, #16
   831a6:	46bd      	mov	sp, r7
   831a8:	bd80      	pop	{r7, pc}
   831aa:	bf00      	nop
   831ac:	000830e1 	.word	0x000830e1
   831b0:	20070a08 	.word	0x20070a08
   831b4:	00083059 	.word	0x00083059

000831b8 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
   831b8:	b480      	push	{r7}
   831ba:	b083      	sub	sp, #12
   831bc:	af00      	add	r7, sp, #0
   831be:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
   831c0:	687b      	ldr	r3, [r7, #4]
   831c2:	2240      	movs	r2, #64	; 0x40
   831c4:	601a      	str	r2, [r3, #0]
}
   831c6:	bf00      	nop
   831c8:	370c      	adds	r7, #12
   831ca:	46bd      	mov	sp, r7
   831cc:	bc80      	pop	{r7}
   831ce:	4770      	bx	lr

000831d0 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
   831d0:	b480      	push	{r7}
   831d2:	b083      	sub	sp, #12
   831d4:	af00      	add	r7, sp, #0
   831d6:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   831d8:	687b      	ldr	r3, [r7, #4]
   831da:	2288      	movs	r2, #136	; 0x88
   831dc:	601a      	str	r2, [r3, #0]
}
   831de:	bf00      	nop
   831e0:	370c      	adds	r7, #12
   831e2:	46bd      	mov	sp, r7
   831e4:	bc80      	pop	{r7}
   831e6:	4770      	bx	lr

000831e8 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
   831e8:	b480      	push	{r7}
   831ea:	b083      	sub	sp, #12
   831ec:	af00      	add	r7, sp, #0
   831ee:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
   831f0:	687b      	ldr	r3, [r7, #4]
   831f2:	2210      	movs	r2, #16
   831f4:	601a      	str	r2, [r3, #0]
}
   831f6:	bf00      	nop
   831f8:	370c      	adds	r7, #12
   831fa:	46bd      	mov	sp, r7
   831fc:	bc80      	pop	{r7}
   831fe:	4770      	bx	lr

00083200 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
   83200:	b480      	push	{r7}
   83202:	b083      	sub	sp, #12
   83204:	af00      	add	r7, sp, #0
   83206:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   83208:	687b      	ldr	r3, [r7, #4]
   8320a:	2224      	movs	r2, #36	; 0x24
   8320c:	601a      	str	r2, [r3, #0]
}
   8320e:	bf00      	nop
   83210:	370c      	adds	r7, #12
   83212:	46bd      	mov	sp, r7
   83214:	bc80      	pop	{r7}
   83216:	4770      	bx	lr

00083218 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
   83218:	b480      	push	{r7}
   8321a:	b083      	sub	sp, #12
   8321c:	af00      	add	r7, sp, #0
   8321e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
   83220:	687b      	ldr	r3, [r7, #4]
   83222:	f44f 7280 	mov.w	r2, #256	; 0x100
   83226:	601a      	str	r2, [r3, #0]
}
   83228:	bf00      	nop
   8322a:	370c      	adds	r7, #12
   8322c:	46bd      	mov	sp, r7
   8322e:	bc80      	pop	{r7}
   83230:	4770      	bx	lr
   83232:	bf00      	nop

00083234 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
   83234:	b480      	push	{r7}
   83236:	b083      	sub	sp, #12
   83238:	af00      	add	r7, sp, #0
   8323a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
   8323c:	687b      	ldr	r3, [r7, #4]
   8323e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   83242:	601a      	str	r2, [r3, #0]
}
   83244:	bf00      	nop
   83246:	370c      	adds	r7, #12
   83248:	46bd      	mov	sp, r7
   8324a:	bc80      	pop	{r7}
   8324c:	4770      	bx	lr
   8324e:	bf00      	nop

00083250 <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
   83250:	b480      	push	{r7}
   83252:	b083      	sub	sp, #12
   83254:	af00      	add	r7, sp, #0
   83256:	6078      	str	r0, [r7, #4]
   83258:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   8325a:	687b      	ldr	r3, [r7, #4]
   8325c:	695b      	ldr	r3, [r3, #20]
   8325e:	f003 0302 	and.w	r3, r3, #2
   83262:	2b00      	cmp	r3, #0
   83264:	d101      	bne.n	8326a <usart_write+0x1a>
		return 1;
   83266:	2301      	movs	r3, #1
   83268:	e005      	b.n	83276 <usart_write+0x26>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   8326a:	683b      	ldr	r3, [r7, #0]
   8326c:	f3c3 0208 	ubfx	r2, r3, #0, #9
   83270:	687b      	ldr	r3, [r7, #4]
   83272:	61da      	str	r2, [r3, #28]
	return 0;
   83274:	2300      	movs	r3, #0
}
   83276:	4618      	mov	r0, r3
   83278:	370c      	adds	r7, #12
   8327a:	46bd      	mov	sp, r7
   8327c:	bc80      	pop	{r7}
   8327e:	4770      	bx	lr

00083280 <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
   83280:	b480      	push	{r7}
   83282:	b083      	sub	sp, #12
   83284:	af00      	add	r7, sp, #0
   83286:	6078      	str	r0, [r7, #4]
   83288:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   8328a:	687b      	ldr	r3, [r7, #4]
   8328c:	695b      	ldr	r3, [r3, #20]
   8328e:	f003 0301 	and.w	r3, r3, #1
   83292:	2b00      	cmp	r3, #0
   83294:	d101      	bne.n	8329a <usart_read+0x1a>
		return 1;
   83296:	2301      	movs	r3, #1
   83298:	e006      	b.n	832a8 <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   8329a:	687b      	ldr	r3, [r7, #4]
   8329c:	699b      	ldr	r3, [r3, #24]
   8329e:	f3c3 0208 	ubfx	r2, r3, #0, #9
   832a2:	683b      	ldr	r3, [r7, #0]
   832a4:	601a      	str	r2, [r3, #0]

	return 0;
   832a6:	2300      	movs	r3, #0
}
   832a8:	4618      	mov	r0, r3
   832aa:	370c      	adds	r7, #12
   832ac:	46bd      	mov	sp, r7
   832ae:	bc80      	pop	{r7}
   832b0:	4770      	bx	lr
   832b2:	bf00      	nop

000832b4 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
   832b4:	b480      	push	{r7}
   832b6:	b083      	sub	sp, #12
   832b8:	af00      	add	r7, sp, #0
   832ba:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
   832bc:	687b      	ldr	r3, [r7, #4]
   832be:	4a04      	ldr	r2, [pc, #16]	; (832d0 <usart_disable_writeprotect+0x1c>)
   832c0:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
   832c4:	bf00      	nop
   832c6:	370c      	adds	r7, #12
   832c8:	46bd      	mov	sp, r7
   832ca:	bc80      	pop	{r7}
   832cc:	4770      	bx	lr
   832ce:	bf00      	nop
   832d0:	55534100 	.word	0x55534100

000832d4 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   832d4:	b480      	push	{r7}
   832d6:	b085      	sub	sp, #20
   832d8:	af00      	add	r7, sp, #0
   832da:	6078      	str	r0, [r7, #4]
   832dc:	6039      	str	r1, [r7, #0]
	uint32_t cd = 0;
   832de:	2300      	movs	r3, #0
   832e0:	60fb      	str	r3, [r7, #12]

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   832e2:	687b      	ldr	r3, [r7, #4]
   832e4:	22ac      	movs	r2, #172	; 0xac
   832e6:	601a      	str	r2, [r3, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   832e8:	683b      	ldr	r3, [r7, #0]
   832ea:	681a      	ldr	r2, [r3, #0]
   832ec:	683b      	ldr	r3, [r7, #0]
   832ee:	685b      	ldr	r3, [r3, #4]
   832f0:	fbb2 f3f3 	udiv	r3, r2, r3
   832f4:	091b      	lsrs	r3, r3, #4
   832f6:	60fb      	str	r3, [r7, #12]
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   832f8:	68fb      	ldr	r3, [r7, #12]
   832fa:	2b00      	cmp	r3, #0
   832fc:	d003      	beq.n	83306 <uart_init+0x32>
   832fe:	68fb      	ldr	r3, [r7, #12]
   83300:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   83304:	d301      	bcc.n	8330a <uart_init+0x36>
		return 1;
   83306:	2301      	movs	r3, #1
   83308:	e00f      	b.n	8332a <uart_init+0x56>

	p_uart->UART_BRGR = cd;
   8330a:	687b      	ldr	r3, [r7, #4]
   8330c:	68fa      	ldr	r2, [r7, #12]
   8330e:	621a      	str	r2, [r3, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   83310:	683b      	ldr	r3, [r7, #0]
   83312:	689a      	ldr	r2, [r3, #8]
   83314:	687b      	ldr	r3, [r7, #4]
   83316:	605a      	str	r2, [r3, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   83318:	687b      	ldr	r3, [r7, #4]
   8331a:	f240 2202 	movw	r2, #514	; 0x202
   8331e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   83322:	687b      	ldr	r3, [r7, #4]
   83324:	2250      	movs	r2, #80	; 0x50
   83326:	601a      	str	r2, [r3, #0]

	return 0;
   83328:	2300      	movs	r3, #0
}
   8332a:	4618      	mov	r0, r3
   8332c:	3714      	adds	r7, #20
   8332e:	46bd      	mov	sp, r7
   83330:	bc80      	pop	{r7}
   83332:	4770      	bx	lr

00083334 <uart_write>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
   83334:	b480      	push	{r7}
   83336:	b083      	sub	sp, #12
   83338:	af00      	add	r7, sp, #0
   8333a:	6078      	str	r0, [r7, #4]
   8333c:	460b      	mov	r3, r1
   8333e:	70fb      	strb	r3, [r7, #3]
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   83340:	687b      	ldr	r3, [r7, #4]
   83342:	695b      	ldr	r3, [r3, #20]
   83344:	f003 0302 	and.w	r3, r3, #2
   83348:	2b00      	cmp	r3, #0
   8334a:	d101      	bne.n	83350 <uart_write+0x1c>
		return 1;
   8334c:	2301      	movs	r3, #1
   8334e:	e003      	b.n	83358 <uart_write+0x24>

	/* Send character */
	p_uart->UART_THR = uc_data;
   83350:	78fa      	ldrb	r2, [r7, #3]
   83352:	687b      	ldr	r3, [r7, #4]
   83354:	61da      	str	r2, [r3, #28]
	return 0;
   83356:	2300      	movs	r3, #0
}
   83358:	4618      	mov	r0, r3
   8335a:	370c      	adds	r7, #12
   8335c:	46bd      	mov	sp, r7
   8335e:	bc80      	pop	{r7}
   83360:	4770      	bx	lr
   83362:	bf00      	nop

00083364 <uart_read>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
   83364:	b480      	push	{r7}
   83366:	b083      	sub	sp, #12
   83368:	af00      	add	r7, sp, #0
   8336a:	6078      	str	r0, [r7, #4]
   8336c:	6039      	str	r1, [r7, #0]
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   8336e:	687b      	ldr	r3, [r7, #4]
   83370:	695b      	ldr	r3, [r3, #20]
   83372:	f003 0301 	and.w	r3, r3, #1
   83376:	2b00      	cmp	r3, #0
   83378:	d101      	bne.n	8337e <uart_read+0x1a>
		return 1;
   8337a:	2301      	movs	r3, #1
   8337c:	e005      	b.n	8338a <uart_read+0x26>

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   8337e:	687b      	ldr	r3, [r7, #4]
   83380:	699b      	ldr	r3, [r3, #24]
   83382:	b2da      	uxtb	r2, r3
   83384:	683b      	ldr	r3, [r7, #0]
   83386:	701a      	strb	r2, [r3, #0]
	return 0;
   83388:	2300      	movs	r3, #0
}
   8338a:	4618      	mov	r0, r3
   8338c:	370c      	adds	r7, #12
   8338e:	46bd      	mov	sp, r7
   83390:	bc80      	pop	{r7}
   83392:	4770      	bx	lr

00083394 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   83394:	b480      	push	{r7}
   83396:	b083      	sub	sp, #12
   83398:	af00      	add	r7, sp, #0
   8339a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   8339c:	687b      	ldr	r3, [r7, #4]
   8339e:	2b07      	cmp	r3, #7
   833a0:	d825      	bhi.n	833ee <osc_get_rate+0x5a>
   833a2:	a201      	add	r2, pc, #4	; (adr r2, 833a8 <osc_get_rate+0x14>)
   833a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   833a8:	000833c9 	.word	0x000833c9
   833ac:	000833cf 	.word	0x000833cf
   833b0:	000833d5 	.word	0x000833d5
   833b4:	000833db 	.word	0x000833db
   833b8:	000833df 	.word	0x000833df
   833bc:	000833e3 	.word	0x000833e3
   833c0:	000833e7 	.word	0x000833e7
   833c4:	000833eb 	.word	0x000833eb
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   833c8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   833cc:	e010      	b.n	833f0 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   833ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   833d2:	e00d      	b.n	833f0 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   833d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   833d8:	e00a      	b.n	833f0 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   833da:	4b08      	ldr	r3, [pc, #32]	; (833fc <osc_get_rate+0x68>)
   833dc:	e008      	b.n	833f0 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   833de:	4b08      	ldr	r3, [pc, #32]	; (83400 <osc_get_rate+0x6c>)
   833e0:	e006      	b.n	833f0 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   833e2:	4b08      	ldr	r3, [pc, #32]	; (83404 <osc_get_rate+0x70>)
   833e4:	e004      	b.n	833f0 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   833e6:	4b07      	ldr	r3, [pc, #28]	; (83404 <osc_get_rate+0x70>)
   833e8:	e002      	b.n	833f0 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   833ea:	4b06      	ldr	r3, [pc, #24]	; (83404 <osc_get_rate+0x70>)
   833ec:	e000      	b.n	833f0 <osc_get_rate+0x5c>
	}

	return 0;
   833ee:	2300      	movs	r3, #0
}
   833f0:	4618      	mov	r0, r3
   833f2:	370c      	adds	r7, #12
   833f4:	46bd      	mov	sp, r7
   833f6:	bc80      	pop	{r7}
   833f8:	4770      	bx	lr
   833fa:	bf00      	nop
   833fc:	003d0900 	.word	0x003d0900
   83400:	007a1200 	.word	0x007a1200
   83404:	00b71b00 	.word	0x00b71b00

00083408 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   83408:	b580      	push	{r7, lr}
   8340a:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   8340c:	2006      	movs	r0, #6
   8340e:	4b04      	ldr	r3, [pc, #16]	; (83420 <sysclk_get_main_hz+0x18>)
   83410:	4798      	blx	r3
   83412:	4602      	mov	r2, r0
   83414:	4613      	mov	r3, r2
   83416:	00db      	lsls	r3, r3, #3
   83418:	1a9b      	subs	r3, r3, r2
   8341a:	005b      	lsls	r3, r3, #1
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   8341c:	4618      	mov	r0, r3
   8341e:	bd80      	pop	{r7, pc}
   83420:	00083395 	.word	0x00083395

00083424 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
   83424:	b580      	push	{r7, lr}
   83426:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   83428:	4b02      	ldr	r3, [pc, #8]	; (83434 <sysclk_get_peripheral_hz+0x10>)
   8342a:	4798      	blx	r3
   8342c:	4603      	mov	r3, r0
   8342e:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   83430:	4618      	mov	r0, r3
   83432:	bd80      	pop	{r7, pc}
   83434:	00083409 	.word	0x00083409

00083438 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   83438:	b580      	push	{r7, lr}
   8343a:	b082      	sub	sp, #8
   8343c:	af00      	add	r7, sp, #0
   8343e:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   83440:	6878      	ldr	r0, [r7, #4]
   83442:	4b03      	ldr	r3, [pc, #12]	; (83450 <sysclk_enable_peripheral_clock+0x18>)
   83444:	4798      	blx	r3
}
   83446:	bf00      	nop
   83448:	3708      	adds	r7, #8
   8344a:	46bd      	mov	sp, r7
   8344c:	bd80      	pop	{r7, pc}
   8344e:	bf00      	nop
   83450:	00084261 	.word	0x00084261

00083454 <usart_serial_init>:
 * \param opt      Options needed to set up RS232 communication (see
 * \ref usart_options_t).
 */
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
   83454:	b580      	push	{r7, lr}
   83456:	b08c      	sub	sp, #48	; 0x30
   83458:	af00      	add	r7, sp, #0
   8345a:	6078      	str	r0, [r7, #4]
   8345c:	6039      	str	r1, [r7, #0]
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   8345e:	4b40      	ldr	r3, [pc, #256]	; (83560 <usart_serial_init+0x10c>)
   83460:	4798      	blx	r3
   83462:	4603      	mov	r3, r0
   83464:	627b      	str	r3, [r7, #36]	; 0x24
	uart_settings.ul_baudrate = opt->baudrate;
   83466:	683b      	ldr	r3, [r7, #0]
   83468:	681b      	ldr	r3, [r3, #0]
   8346a:	62bb      	str	r3, [r7, #40]	; 0x28
	uart_settings.ul_mode = opt->paritytype;
   8346c:	683b      	ldr	r3, [r7, #0]
   8346e:	689b      	ldr	r3, [r3, #8]
   83470:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
   83472:	683b      	ldr	r3, [r7, #0]
   83474:	681b      	ldr	r3, [r3, #0]
   83476:	60fb      	str	r3, [r7, #12]
	usart_settings.char_length = opt->charlength;
   83478:	683b      	ldr	r3, [r7, #0]
   8347a:	685b      	ldr	r3, [r3, #4]
   8347c:	613b      	str	r3, [r7, #16]
	usart_settings.parity_type = opt->paritytype;
   8347e:	683b      	ldr	r3, [r7, #0]
   83480:	689b      	ldr	r3, [r3, #8]
   83482:	617b      	str	r3, [r7, #20]
	usart_settings.stop_bits= opt->stopbits;
   83484:	683b      	ldr	r3, [r7, #0]
   83486:	68db      	ldr	r3, [r3, #12]
   83488:	61bb      	str	r3, [r7, #24]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
   8348a:	2300      	movs	r3, #0
   8348c:	61fb      	str	r3, [r7, #28]
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
   8348e:	687b      	ldr	r3, [r7, #4]
   83490:	4a34      	ldr	r2, [pc, #208]	; (83564 <usart_serial_init+0x110>)
   83492:	4293      	cmp	r3, r2
   83494:	d108      	bne.n	834a8 <usart_serial_init+0x54>
		sysclk_enable_peripheral_clock(ID_UART);
   83496:	2008      	movs	r0, #8
   83498:	4b33      	ldr	r3, [pc, #204]	; (83568 <usart_serial_init+0x114>)
   8349a:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   8349c:	f107 0324 	add.w	r3, r7, #36	; 0x24
   834a0:	4619      	mov	r1, r3
   834a2:	6878      	ldr	r0, [r7, #4]
   834a4:	4b31      	ldr	r3, [pc, #196]	; (8356c <usart_serial_init+0x118>)
   834a6:	4798      	blx	r3
		usart_enable_tx(p_usart);
		usart_enable_rx(p_usart);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   834a8:	687b      	ldr	r3, [r7, #4]
   834aa:	4a31      	ldr	r2, [pc, #196]	; (83570 <usart_serial_init+0x11c>)
   834ac:	4293      	cmp	r3, r2
   834ae:	d111      	bne.n	834d4 <usart_serial_init+0x80>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM0);
		flexcom_set_opmode(FLEXCOM0, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART0);
   834b0:	2011      	movs	r0, #17
   834b2:	4b2d      	ldr	r3, [pc, #180]	; (83568 <usart_serial_init+0x114>)
   834b4:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
   834b6:	4b2a      	ldr	r3, [pc, #168]	; (83560 <usart_serial_init+0x10c>)
   834b8:	4798      	blx	r3
   834ba:	4602      	mov	r2, r0
   834bc:	f107 030c 	add.w	r3, r7, #12
   834c0:	4619      	mov	r1, r3
   834c2:	6878      	ldr	r0, [r7, #4]
   834c4:	4b2b      	ldr	r3, [pc, #172]	; (83574 <usart_serial_init+0x120>)
   834c6:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
   834c8:	6878      	ldr	r0, [r7, #4]
   834ca:	4b2b      	ldr	r3, [pc, #172]	; (83578 <usart_serial_init+0x124>)
   834cc:	4798      	blx	r3
		usart_enable_rx(p_usart);
   834ce:	6878      	ldr	r0, [r7, #4]
   834d0:	4b2a      	ldr	r3, [pc, #168]	; (8357c <usart_serial_init+0x128>)
   834d2:	4798      	blx	r3
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   834d4:	687b      	ldr	r3, [r7, #4]
   834d6:	4a2a      	ldr	r2, [pc, #168]	; (83580 <usart_serial_init+0x12c>)
   834d8:	4293      	cmp	r3, r2
   834da:	d111      	bne.n	83500 <usart_serial_init+0xac>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM1);
		flexcom_set_opmode(FLEXCOM1, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART1);
   834dc:	2012      	movs	r0, #18
   834de:	4b22      	ldr	r3, [pc, #136]	; (83568 <usart_serial_init+0x114>)
   834e0:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
   834e2:	4b1f      	ldr	r3, [pc, #124]	; (83560 <usart_serial_init+0x10c>)
   834e4:	4798      	blx	r3
   834e6:	4602      	mov	r2, r0
   834e8:	f107 030c 	add.w	r3, r7, #12
   834ec:	4619      	mov	r1, r3
   834ee:	6878      	ldr	r0, [r7, #4]
   834f0:	4b20      	ldr	r3, [pc, #128]	; (83574 <usart_serial_init+0x120>)
   834f2:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
   834f4:	6878      	ldr	r0, [r7, #4]
   834f6:	4b20      	ldr	r3, [pc, #128]	; (83578 <usart_serial_init+0x124>)
   834f8:	4798      	blx	r3
		usart_enable_rx(p_usart);
   834fa:	6878      	ldr	r0, [r7, #4]
   834fc:	4b1f      	ldr	r3, [pc, #124]	; (8357c <usart_serial_init+0x128>)
   834fe:	4798      	blx	r3
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   83500:	687b      	ldr	r3, [r7, #4]
   83502:	4a20      	ldr	r2, [pc, #128]	; (83584 <usart_serial_init+0x130>)
   83504:	4293      	cmp	r3, r2
   83506:	d111      	bne.n	8352c <usart_serial_init+0xd8>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM2);
		flexcom_set_opmode(FLEXCOM2, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART2);
   83508:	2013      	movs	r0, #19
   8350a:	4b17      	ldr	r3, [pc, #92]	; (83568 <usart_serial_init+0x114>)
   8350c:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
   8350e:	4b14      	ldr	r3, [pc, #80]	; (83560 <usart_serial_init+0x10c>)
   83510:	4798      	blx	r3
   83512:	4602      	mov	r2, r0
   83514:	f107 030c 	add.w	r3, r7, #12
   83518:	4619      	mov	r1, r3
   8351a:	6878      	ldr	r0, [r7, #4]
   8351c:	4b15      	ldr	r3, [pc, #84]	; (83574 <usart_serial_init+0x120>)
   8351e:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
   83520:	6878      	ldr	r0, [r7, #4]
   83522:	4b15      	ldr	r3, [pc, #84]	; (83578 <usart_serial_init+0x124>)
   83524:	4798      	blx	r3
		usart_enable_rx(p_usart);
   83526:	6878      	ldr	r0, [r7, #4]
   83528:	4b14      	ldr	r3, [pc, #80]	; (8357c <usart_serial_init+0x128>)
   8352a:	4798      	blx	r3
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   8352c:	687b      	ldr	r3, [r7, #4]
   8352e:	4a16      	ldr	r2, [pc, #88]	; (83588 <usart_serial_init+0x134>)
   83530:	4293      	cmp	r3, r2
   83532:	d111      	bne.n	83558 <usart_serial_init+0x104>
#if (!SAM4L)
#if (SAMG55)
		flexcom_enable(FLEXCOM3);
		flexcom_set_opmode(FLEXCOM3, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART3);
   83534:	2014      	movs	r0, #20
   83536:	4b0c      	ldr	r3, [pc, #48]	; (83568 <usart_serial_init+0x114>)
   83538:	4798      	blx	r3
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
   8353a:	4b09      	ldr	r3, [pc, #36]	; (83560 <usart_serial_init+0x10c>)
   8353c:	4798      	blx	r3
   8353e:	4602      	mov	r2, r0
   83540:	f107 030c 	add.w	r3, r7, #12
   83544:	4619      	mov	r1, r3
   83546:	6878      	ldr	r0, [r7, #4]
   83548:	4b0a      	ldr	r3, [pc, #40]	; (83574 <usart_serial_init+0x120>)
   8354a:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
   8354c:	6878      	ldr	r0, [r7, #4]
   8354e:	4b0a      	ldr	r3, [pc, #40]	; (83578 <usart_serial_init+0x124>)
   83550:	4798      	blx	r3
		usart_enable_rx(p_usart);
   83552:	6878      	ldr	r0, [r7, #4]
   83554:	4b09      	ldr	r3, [pc, #36]	; (8357c <usart_serial_init+0x128>)
   83556:	4798      	blx	r3
	}
# endif

#endif /* ifdef USART */

}
   83558:	bf00      	nop
   8355a:	3730      	adds	r7, #48	; 0x30
   8355c:	46bd      	mov	sp, r7
   8355e:	bd80      	pop	{r7, pc}
   83560:	00083425 	.word	0x00083425
   83564:	400e0800 	.word	0x400e0800
   83568:	00083439 	.word	0x00083439
   8356c:	000832d5 	.word	0x000832d5
   83570:	40098000 	.word	0x40098000
   83574:	00083135 	.word	0x00083135
   83578:	000831b9 	.word	0x000831b9
   8357c:	000831e9 	.word	0x000831e9
   83580:	4009c000 	.word	0x4009c000
   83584:	400a0000 	.word	0x400a0000
   83588:	400a4000 	.word	0x400a4000

0008358c <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   8358c:	b580      	push	{r7, lr}
   8358e:	b082      	sub	sp, #8
   83590:	af00      	add	r7, sp, #0
   83592:	6078      	str	r0, [r7, #4]
   83594:	460b      	mov	r3, r1
   83596:	70fb      	strb	r3, [r7, #3]
#ifdef UART
	if (UART == (Uart*)p_usart) {
   83598:	687b      	ldr	r3, [r7, #4]
   8359a:	4a27      	ldr	r2, [pc, #156]	; (83638 <usart_serial_putchar+0xac>)
   8359c:	4293      	cmp	r3, r2
   8359e:	d10a      	bne.n	835b6 <usart_serial_putchar+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
   835a0:	bf00      	nop
   835a2:	78fb      	ldrb	r3, [r7, #3]
   835a4:	4619      	mov	r1, r3
   835a6:	6878      	ldr	r0, [r7, #4]
   835a8:	4b24      	ldr	r3, [pc, #144]	; (8363c <usart_serial_putchar+0xb0>)
   835aa:	4798      	blx	r3
   835ac:	4603      	mov	r3, r0
   835ae:	2b00      	cmp	r3, #0
   835b0:	d1f7      	bne.n	835a2 <usart_serial_putchar+0x16>
		return 1;
   835b2:	2301      	movs	r3, #1
   835b4:	e03c      	b.n	83630 <usart_serial_putchar+0xa4>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   835b6:	687b      	ldr	r3, [r7, #4]
   835b8:	4a21      	ldr	r2, [pc, #132]	; (83640 <usart_serial_putchar+0xb4>)
   835ba:	4293      	cmp	r3, r2
   835bc:	d10a      	bne.n	835d4 <usart_serial_putchar+0x48>
		while (usart_write(p_usart, c)!=0);
   835be:	bf00      	nop
   835c0:	78fb      	ldrb	r3, [r7, #3]
   835c2:	4619      	mov	r1, r3
   835c4:	6878      	ldr	r0, [r7, #4]
   835c6:	4b1f      	ldr	r3, [pc, #124]	; (83644 <usart_serial_putchar+0xb8>)
   835c8:	4798      	blx	r3
   835ca:	4603      	mov	r3, r0
   835cc:	2b00      	cmp	r3, #0
   835ce:	d1f7      	bne.n	835c0 <usart_serial_putchar+0x34>
		return 1;
   835d0:	2301      	movs	r3, #1
   835d2:	e02d      	b.n	83630 <usart_serial_putchar+0xa4>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   835d4:	687b      	ldr	r3, [r7, #4]
   835d6:	4a1c      	ldr	r2, [pc, #112]	; (83648 <usart_serial_putchar+0xbc>)
   835d8:	4293      	cmp	r3, r2
   835da:	d10a      	bne.n	835f2 <usart_serial_putchar+0x66>
		while (usart_write(p_usart, c)!=0);
   835dc:	bf00      	nop
   835de:	78fb      	ldrb	r3, [r7, #3]
   835e0:	4619      	mov	r1, r3
   835e2:	6878      	ldr	r0, [r7, #4]
   835e4:	4b17      	ldr	r3, [pc, #92]	; (83644 <usart_serial_putchar+0xb8>)
   835e6:	4798      	blx	r3
   835e8:	4603      	mov	r3, r0
   835ea:	2b00      	cmp	r3, #0
   835ec:	d1f7      	bne.n	835de <usart_serial_putchar+0x52>
		return 1;
   835ee:	2301      	movs	r3, #1
   835f0:	e01e      	b.n	83630 <usart_serial_putchar+0xa4>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   835f2:	687b      	ldr	r3, [r7, #4]
   835f4:	4a15      	ldr	r2, [pc, #84]	; (8364c <usart_serial_putchar+0xc0>)
   835f6:	4293      	cmp	r3, r2
   835f8:	d10a      	bne.n	83610 <usart_serial_putchar+0x84>
		while (usart_write(p_usart, c)!=0);
   835fa:	bf00      	nop
   835fc:	78fb      	ldrb	r3, [r7, #3]
   835fe:	4619      	mov	r1, r3
   83600:	6878      	ldr	r0, [r7, #4]
   83602:	4b10      	ldr	r3, [pc, #64]	; (83644 <usart_serial_putchar+0xb8>)
   83604:	4798      	blx	r3
   83606:	4603      	mov	r3, r0
   83608:	2b00      	cmp	r3, #0
   8360a:	d1f7      	bne.n	835fc <usart_serial_putchar+0x70>
		return 1;
   8360c:	2301      	movs	r3, #1
   8360e:	e00f      	b.n	83630 <usart_serial_putchar+0xa4>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   83610:	687b      	ldr	r3, [r7, #4]
   83612:	4a0f      	ldr	r2, [pc, #60]	; (83650 <usart_serial_putchar+0xc4>)
   83614:	4293      	cmp	r3, r2
   83616:	d10a      	bne.n	8362e <usart_serial_putchar+0xa2>
		while (usart_write(p_usart, c)!=0);
   83618:	bf00      	nop
   8361a:	78fb      	ldrb	r3, [r7, #3]
   8361c:	4619      	mov	r1, r3
   8361e:	6878      	ldr	r0, [r7, #4]
   83620:	4b08      	ldr	r3, [pc, #32]	; (83644 <usart_serial_putchar+0xb8>)
   83622:	4798      	blx	r3
   83624:	4603      	mov	r3, r0
   83626:	2b00      	cmp	r3, #0
   83628:	d1f7      	bne.n	8361a <usart_serial_putchar+0x8e>
		return 1;
   8362a:	2301      	movs	r3, #1
   8362c:	e000      	b.n	83630 <usart_serial_putchar+0xa4>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   8362e:	2300      	movs	r3, #0
}
   83630:	4618      	mov	r0, r3
   83632:	3708      	adds	r7, #8
   83634:	46bd      	mov	sp, r7
   83636:	bd80      	pop	{r7, pc}
   83638:	400e0800 	.word	0x400e0800
   8363c:	00083335 	.word	0x00083335
   83640:	40098000 	.word	0x40098000
   83644:	00083251 	.word	0x00083251
   83648:	4009c000 	.word	0x4009c000
   8364c:	400a0000 	.word	0x400a0000
   83650:	400a4000 	.word	0x400a4000

00083654 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   83654:	b580      	push	{r7, lr}
   83656:	b084      	sub	sp, #16
   83658:	af00      	add	r7, sp, #0
   8365a:	6078      	str	r0, [r7, #4]
   8365c:	6039      	str	r1, [r7, #0]
	uint32_t val = 0;
   8365e:	2300      	movs	r3, #0
   83660:	60fb      	str	r3, [r7, #12]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   83662:	687b      	ldr	r3, [r7, #4]
   83664:	4a2b      	ldr	r2, [pc, #172]	; (83714 <usart_serial_getchar+0xc0>)
   83666:	4293      	cmp	r3, r2
   83668:	d107      	bne.n	8367a <usart_serial_getchar+0x26>
		while (uart_read((Uart*)p_usart, data));
   8366a:	bf00      	nop
   8366c:	6839      	ldr	r1, [r7, #0]
   8366e:	6878      	ldr	r0, [r7, #4]
   83670:	4b29      	ldr	r3, [pc, #164]	; (83718 <usart_serial_getchar+0xc4>)
   83672:	4798      	blx	r3
   83674:	4603      	mov	r3, r0
   83676:	2b00      	cmp	r3, #0
   83678:	d1f8      	bne.n	8366c <usart_serial_getchar+0x18>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   8367a:	687b      	ldr	r3, [r7, #4]
   8367c:	4a27      	ldr	r2, [pc, #156]	; (8371c <usart_serial_getchar+0xc8>)
   8367e:	4293      	cmp	r3, r2
   83680:	d10d      	bne.n	8369e <usart_serial_getchar+0x4a>
		while (usart_read(p_usart, &val));
   83682:	bf00      	nop
   83684:	f107 030c 	add.w	r3, r7, #12
   83688:	4619      	mov	r1, r3
   8368a:	6878      	ldr	r0, [r7, #4]
   8368c:	4b24      	ldr	r3, [pc, #144]	; (83720 <usart_serial_getchar+0xcc>)
   8368e:	4798      	blx	r3
   83690:	4603      	mov	r3, r0
   83692:	2b00      	cmp	r3, #0
   83694:	d1f6      	bne.n	83684 <usart_serial_getchar+0x30>
		*data = (uint8_t)(val & 0xFF);
   83696:	68fb      	ldr	r3, [r7, #12]
   83698:	b2da      	uxtb	r2, r3
   8369a:	683b      	ldr	r3, [r7, #0]
   8369c:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   8369e:	687b      	ldr	r3, [r7, #4]
   836a0:	4a20      	ldr	r2, [pc, #128]	; (83724 <usart_serial_getchar+0xd0>)
   836a2:	4293      	cmp	r3, r2
   836a4:	d10d      	bne.n	836c2 <usart_serial_getchar+0x6e>
		while (usart_read(p_usart, &val));
   836a6:	bf00      	nop
   836a8:	f107 030c 	add.w	r3, r7, #12
   836ac:	4619      	mov	r1, r3
   836ae:	6878      	ldr	r0, [r7, #4]
   836b0:	4b1b      	ldr	r3, [pc, #108]	; (83720 <usart_serial_getchar+0xcc>)
   836b2:	4798      	blx	r3
   836b4:	4603      	mov	r3, r0
   836b6:	2b00      	cmp	r3, #0
   836b8:	d1f6      	bne.n	836a8 <usart_serial_getchar+0x54>
		*data = (uint8_t)(val & 0xFF);
   836ba:	68fb      	ldr	r3, [r7, #12]
   836bc:	b2da      	uxtb	r2, r3
   836be:	683b      	ldr	r3, [r7, #0]
   836c0:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   836c2:	687b      	ldr	r3, [r7, #4]
   836c4:	4a18      	ldr	r2, [pc, #96]	; (83728 <usart_serial_getchar+0xd4>)
   836c6:	4293      	cmp	r3, r2
   836c8:	d10d      	bne.n	836e6 <usart_serial_getchar+0x92>
		while (usart_read(p_usart, &val));
   836ca:	bf00      	nop
   836cc:	f107 030c 	add.w	r3, r7, #12
   836d0:	4619      	mov	r1, r3
   836d2:	6878      	ldr	r0, [r7, #4]
   836d4:	4b12      	ldr	r3, [pc, #72]	; (83720 <usart_serial_getchar+0xcc>)
   836d6:	4798      	blx	r3
   836d8:	4603      	mov	r3, r0
   836da:	2b00      	cmp	r3, #0
   836dc:	d1f6      	bne.n	836cc <usart_serial_getchar+0x78>
		*data = (uint8_t)(val & 0xFF);
   836de:	68fb      	ldr	r3, [r7, #12]
   836e0:	b2da      	uxtb	r2, r3
   836e2:	683b      	ldr	r3, [r7, #0]
   836e4:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   836e6:	687b      	ldr	r3, [r7, #4]
   836e8:	4a10      	ldr	r2, [pc, #64]	; (8372c <usart_serial_getchar+0xd8>)
   836ea:	4293      	cmp	r3, r2
   836ec:	d10d      	bne.n	8370a <usart_serial_getchar+0xb6>
		while (usart_read(p_usart, &val));
   836ee:	bf00      	nop
   836f0:	f107 030c 	add.w	r3, r7, #12
   836f4:	4619      	mov	r1, r3
   836f6:	6878      	ldr	r0, [r7, #4]
   836f8:	4b09      	ldr	r3, [pc, #36]	; (83720 <usart_serial_getchar+0xcc>)
   836fa:	4798      	blx	r3
   836fc:	4603      	mov	r3, r0
   836fe:	2b00      	cmp	r3, #0
   83700:	d1f6      	bne.n	836f0 <usart_serial_getchar+0x9c>
		*data = (uint8_t)(val & 0xFF);
   83702:	68fb      	ldr	r3, [r7, #12]
   83704:	b2da      	uxtb	r2, r3
   83706:	683b      	ldr	r3, [r7, #0]
   83708:	701a      	strb	r2, [r3, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   8370a:	bf00      	nop
   8370c:	3710      	adds	r7, #16
   8370e:	46bd      	mov	sp, r7
   83710:	bd80      	pop	{r7, pc}
   83712:	bf00      	nop
   83714:	400e0800 	.word	0x400e0800
   83718:	00083365 	.word	0x00083365
   8371c:	40098000 	.word	0x40098000
   83720:	00083281 	.word	0x00083281
   83724:	4009c000 	.word	0x4009c000
   83728:	400a0000 	.word	0x400a0000
   8372c:	400a4000 	.word	0x400a4000

00083730 <stdio_serial_init>:
 * \param usart       Base address of the USART instance.
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
   83730:	b580      	push	{r7, lr}
   83732:	b082      	sub	sp, #8
   83734:	af00      	add	r7, sp, #0
   83736:	6078      	str	r0, [r7, #4]
   83738:	6039      	str	r1, [r7, #0]
	stdio_base = (void *)usart;
   8373a:	4a0f      	ldr	r2, [pc, #60]	; (83778 <stdio_serial_init+0x48>)
   8373c:	687b      	ldr	r3, [r7, #4]
   8373e:	6013      	str	r3, [r2, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   83740:	4b0e      	ldr	r3, [pc, #56]	; (8377c <stdio_serial_init+0x4c>)
   83742:	4a0f      	ldr	r2, [pc, #60]	; (83780 <stdio_serial_init+0x50>)
   83744:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   83746:	4b0f      	ldr	r3, [pc, #60]	; (83784 <stdio_serial_init+0x54>)
   83748:	4a0f      	ldr	r2, [pc, #60]	; (83788 <stdio_serial_init+0x58>)
   8374a:	601a      	str	r2, [r3, #0]
# if (XMEGA || MEGA_RF)
	usart_serial_init((USART_t *)usart,opt);
# elif UC3
	usart_serial_init(usart,(usart_serial_options_t *)opt);
# elif SAM
	usart_serial_init((Usart *)usart,(usart_serial_options_t *)opt);
   8374c:	6839      	ldr	r1, [r7, #0]
   8374e:	6878      	ldr	r0, [r7, #4]
   83750:	4b0e      	ldr	r3, [pc, #56]	; (8378c <stdio_serial_init+0x5c>)
   83752:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   83754:	4b0e      	ldr	r3, [pc, #56]	; (83790 <stdio_serial_init+0x60>)
   83756:	681b      	ldr	r3, [r3, #0]
   83758:	689b      	ldr	r3, [r3, #8]
   8375a:	2100      	movs	r1, #0
   8375c:	4618      	mov	r0, r3
   8375e:	4b0d      	ldr	r3, [pc, #52]	; (83794 <stdio_serial_init+0x64>)
   83760:	4798      	blx	r3
	setbuf(stdin, NULL);
   83762:	4b0b      	ldr	r3, [pc, #44]	; (83790 <stdio_serial_init+0x60>)
   83764:	681b      	ldr	r3, [r3, #0]
   83766:	685b      	ldr	r3, [r3, #4]
   83768:	2100      	movs	r1, #0
   8376a:	4618      	mov	r0, r3
   8376c:	4b09      	ldr	r3, [pc, #36]	; (83794 <stdio_serial_init+0x64>)
   8376e:	4798      	blx	r3
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
# endif
}
   83770:	bf00      	nop
   83772:	3708      	adds	r7, #8
   83774:	46bd      	mov	sp, r7
   83776:	bd80      	pop	{r7, pc}
   83778:	20070b08 	.word	0x20070b08
   8377c:	20070b04 	.word	0x20070b04
   83780:	0008358d 	.word	0x0008358d
   83784:	20070ab4 	.word	0x20070ab4
   83788:	00083655 	.word	0x00083655
   8378c:	00083455 	.word	0x00083455
   83790:	200705c0 	.word	0x200705c0
   83794:	00084cc5 	.word	0x00084cc5

00083798 <SENSOR_D_INIT_UART>:
	.paritytype = CONF_UART_PARITY,
	.stopbits = true
};*/

void SENSOR_D_INIT_UART()
{
   83798:	b580      	push	{r7, lr}
   8379a:	b084      	sub	sp, #16
   8379c:	af00      	add	r7, sp, #0
	/*UART->UART_CR	= 0x00000050;
	UART->UART_MR	= 0x00000800;
	UART->UART_BRGR = 0x00000046;*/
		
	//uart_init(UART,&uart_options);
	const usart_serial_options_t uart_serial_options = {
   8379e:	463b      	mov	r3, r7
   837a0:	2200      	movs	r2, #0
   837a2:	601a      	str	r2, [r3, #0]
   837a4:	605a      	str	r2, [r3, #4]
   837a6:	609a      	str	r2, [r3, #8]
   837a8:	60da      	str	r2, [r3, #12]
   837aa:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   837ae:	603b      	str	r3, [r7, #0]
   837b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
   837b4:	60bb      	str	r3, [r7, #8]
		.baudrate = CONF_UART_BAUDRATE,
		.paritytype = CONF_UART_PARITY
	};
	stdio_serial_init(UART, &uart_serial_options);
   837b6:	463b      	mov	r3, r7
   837b8:	4619      	mov	r1, r3
   837ba:	4805      	ldr	r0, [pc, #20]	; (837d0 <SENSOR_D_INIT_UART+0x38>)
   837bc:	4b05      	ldr	r3, [pc, #20]	; (837d4 <SENSOR_D_INIT_UART+0x3c>)
   837be:	4798      	blx	r3
	puts(STRING_HEADER);
   837c0:	4805      	ldr	r0, [pc, #20]	; (837d8 <SENSOR_D_INIT_UART+0x40>)
   837c2:	4b06      	ldr	r3, [pc, #24]	; (837dc <SENSOR_D_INIT_UART+0x44>)
   837c4:	4798      	blx	r3
	
}
   837c6:	bf00      	nop
   837c8:	3710      	adds	r7, #16
   837ca:	46bd      	mov	sp, r7
   837cc:	bd80      	pop	{r7, pc}
   837ce:	bf00      	nop
   837d0:	400e0800 	.word	0x400e0800
   837d4:	00083731 	.word	0x00083731
   837d8:	00086810 	.word	0x00086810
   837dc:	00084cb5 	.word	0x00084cb5

000837e0 <osc_enable>:
#define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
   837e0:	b580      	push	{r7, lr}
   837e2:	b082      	sub	sp, #8
   837e4:	af00      	add	r7, sp, #0
   837e6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   837e8:	687b      	ldr	r3, [r7, #4]
   837ea:	2b07      	cmp	r3, #7
   837ec:	d831      	bhi.n	83852 <osc_enable+0x72>
   837ee:	a201      	add	r2, pc, #4	; (adr r2, 837f4 <osc_enable+0x14>)
   837f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   837f4:	00083851 	.word	0x00083851
   837f8:	00083815 	.word	0x00083815
   837fc:	0008381d 	.word	0x0008381d
   83800:	00083825 	.word	0x00083825
   83804:	0008382d 	.word	0x0008382d
   83808:	00083835 	.word	0x00083835
   8380c:	0008383d 	.word	0x0008383d
   83810:	00083847 	.word	0x00083847
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   83814:	2000      	movs	r0, #0
   83816:	4b11      	ldr	r3, [pc, #68]	; (8385c <osc_enable+0x7c>)
   83818:	4798      	blx	r3
		break;
   8381a:	e01a      	b.n	83852 <osc_enable+0x72>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   8381c:	2001      	movs	r0, #1
   8381e:	4b0f      	ldr	r3, [pc, #60]	; (8385c <osc_enable+0x7c>)
   83820:	4798      	blx	r3
		break;
   83822:	e016      	b.n	83852 <osc_enable+0x72>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   83824:	2000      	movs	r0, #0
   83826:	4b0e      	ldr	r3, [pc, #56]	; (83860 <osc_enable+0x80>)
   83828:	4798      	blx	r3
		break;
   8382a:	e012      	b.n	83852 <osc_enable+0x72>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   8382c:	2010      	movs	r0, #16
   8382e:	4b0c      	ldr	r3, [pc, #48]	; (83860 <osc_enable+0x80>)
   83830:	4798      	blx	r3
		break;
   83832:	e00e      	b.n	83852 <osc_enable+0x72>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   83834:	2020      	movs	r0, #32
   83836:	4b0a      	ldr	r3, [pc, #40]	; (83860 <osc_enable+0x80>)
   83838:	4798      	blx	r3
		break;
   8383a:	e00a      	b.n	83852 <osc_enable+0x72>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   8383c:	213e      	movs	r1, #62	; 0x3e
   8383e:	2000      	movs	r0, #0
   83840:	4b08      	ldr	r3, [pc, #32]	; (83864 <osc_enable+0x84>)
   83842:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
   83844:	e005      	b.n	83852 <osc_enable+0x72>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
   83846:	213e      	movs	r1, #62	; 0x3e
   83848:	2001      	movs	r0, #1
   8384a:	4b06      	ldr	r3, [pc, #24]	; (83864 <osc_enable+0x84>)
   8384c:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
   8384e:	e000      	b.n	83852 <osc_enable+0x72>

static inline void osc_enable(uint32_t ul_id)
{
	switch (ul_id) {
	case OSC_SLCK_32K_RC:
		break;
   83850:	bf00      	nop
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
	}
}
   83852:	bf00      	nop
   83854:	3708      	adds	r7, #8
   83856:	46bd      	mov	sp, r7
   83858:	bd80      	pop	{r7, pc}
   8385a:	bf00      	nop
   8385c:	000840ad 	.word	0x000840ad
   83860:	00084119 	.word	0x00084119
   83864:	00084189 	.word	0x00084189

00083868 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
   83868:	b580      	push	{r7, lr}
   8386a:	b082      	sub	sp, #8
   8386c:	af00      	add	r7, sp, #0
   8386e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   83870:	687b      	ldr	r3, [r7, #4]
   83872:	2b07      	cmp	r3, #7
   83874:	d826      	bhi.n	838c4 <osc_is_ready+0x5c>
   83876:	a201      	add	r2, pc, #4	; (adr r2, 8387c <osc_is_ready+0x14>)
   83878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8387c:	0008389d 	.word	0x0008389d
   83880:	000838a1 	.word	0x000838a1
   83884:	000838a1 	.word	0x000838a1
   83888:	000838b3 	.word	0x000838b3
   8388c:	000838b3 	.word	0x000838b3
   83890:	000838b3 	.word	0x000838b3
   83894:	000838b3 	.word	0x000838b3
   83898:	000838b3 	.word	0x000838b3
	case OSC_SLCK_32K_RC:
		return 1;
   8389c:	2301      	movs	r3, #1
   8389e:	e012      	b.n	838c6 <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
   838a0:	4b0b      	ldr	r3, [pc, #44]	; (838d0 <osc_is_ready+0x68>)
   838a2:	4798      	blx	r3
   838a4:	4603      	mov	r3, r0
   838a6:	2b00      	cmp	r3, #0
   838a8:	bf14      	ite	ne
   838aa:	2301      	movne	r3, #1
   838ac:	2300      	moveq	r3, #0
   838ae:	b2db      	uxtb	r3, r3
   838b0:	e009      	b.n	838c6 <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   838b2:	4b08      	ldr	r3, [pc, #32]	; (838d4 <osc_is_ready+0x6c>)
   838b4:	4798      	blx	r3
   838b6:	4603      	mov	r3, r0
   838b8:	2b00      	cmp	r3, #0
   838ba:	bf14      	ite	ne
   838bc:	2301      	movne	r3, #1
   838be:	2300      	moveq	r3, #0
   838c0:	b2db      	uxtb	r3, r3
   838c2:	e000      	b.n	838c6 <osc_is_ready+0x5e>
	}

	return 0;
   838c4:	2300      	movs	r3, #0
}
   838c6:	4618      	mov	r0, r3
   838c8:	3708      	adds	r7, #8
   838ca:	46bd      	mov	sp, r7
   838cc:	bd80      	pop	{r7, pc}
   838ce:	bf00      	nop
   838d0:	000840e5 	.word	0x000840e5
   838d4:	00084201 	.word	0x00084201

000838d8 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   838d8:	b480      	push	{r7}
   838da:	b083      	sub	sp, #12
   838dc:	af00      	add	r7, sp, #0
   838de:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   838e0:	687b      	ldr	r3, [r7, #4]
   838e2:	2b07      	cmp	r3, #7
   838e4:	d825      	bhi.n	83932 <osc_get_rate+0x5a>
   838e6:	a201      	add	r2, pc, #4	; (adr r2, 838ec <osc_get_rate+0x14>)
   838e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   838ec:	0008390d 	.word	0x0008390d
   838f0:	00083913 	.word	0x00083913
   838f4:	00083919 	.word	0x00083919
   838f8:	0008391f 	.word	0x0008391f
   838fc:	00083923 	.word	0x00083923
   83900:	00083927 	.word	0x00083927
   83904:	0008392b 	.word	0x0008392b
   83908:	0008392f 	.word	0x0008392f
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   8390c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   83910:	e010      	b.n	83934 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   83912:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   83916:	e00d      	b.n	83934 <osc_get_rate+0x5c>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   83918:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   8391c:	e00a      	b.n	83934 <osc_get_rate+0x5c>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   8391e:	4b08      	ldr	r3, [pc, #32]	; (83940 <osc_get_rate+0x68>)
   83920:	e008      	b.n	83934 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   83922:	4b08      	ldr	r3, [pc, #32]	; (83944 <osc_get_rate+0x6c>)
   83924:	e006      	b.n	83934 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   83926:	4b08      	ldr	r3, [pc, #32]	; (83948 <osc_get_rate+0x70>)
   83928:	e004      	b.n	83934 <osc_get_rate+0x5c>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   8392a:	4b07      	ldr	r3, [pc, #28]	; (83948 <osc_get_rate+0x70>)
   8392c:	e002      	b.n	83934 <osc_get_rate+0x5c>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   8392e:	4b06      	ldr	r3, [pc, #24]	; (83948 <osc_get_rate+0x70>)
   83930:	e000      	b.n	83934 <osc_get_rate+0x5c>
	}

	return 0;
   83932:	2300      	movs	r3, #0
}
   83934:	4618      	mov	r0, r3
   83936:	370c      	adds	r7, #12
   83938:	46bd      	mov	sp, r7
   8393a:	bc80      	pop	{r7}
   8393c:	4770      	bx	lr
   8393e:	bf00      	nop
   83940:	003d0900 	.word	0x003d0900
   83944:	007a1200 	.word	0x007a1200
   83948:	00b71b00 	.word	0x00b71b00

0008394c <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
   8394c:	b580      	push	{r7, lr}
   8394e:	b082      	sub	sp, #8
   83950:	af00      	add	r7, sp, #0
   83952:	4603      	mov	r3, r0
   83954:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   83956:	bf00      	nop
   83958:	79fb      	ldrb	r3, [r7, #7]
   8395a:	4618      	mov	r0, r3
   8395c:	4b05      	ldr	r3, [pc, #20]	; (83974 <osc_wait_ready+0x28>)
   8395e:	4798      	blx	r3
   83960:	4603      	mov	r3, r0
   83962:	f083 0301 	eor.w	r3, r3, #1
   83966:	b2db      	uxtb	r3, r3
   83968:	2b00      	cmp	r3, #0
   8396a:	d1f5      	bne.n	83958 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
   8396c:	bf00      	nop
   8396e:	3708      	adds	r7, #8
   83970:	46bd      	mov	sp, r7
   83972:	bd80      	pop	{r7, pc}
   83974:	00083869 	.word	0x00083869

00083978 <pll_config_init>:
 * \note The SAM3X PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
   83978:	b580      	push	{r7, lr}
   8397a:	b086      	sub	sp, #24
   8397c:	af00      	add	r7, sp, #0
   8397e:	60f8      	str	r0, [r7, #12]
   83980:	607a      	str	r2, [r7, #4]
   83982:	603b      	str	r3, [r7, #0]
   83984:	460b      	mov	r3, r1
   83986:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
   83988:	687b      	ldr	r3, [r7, #4]
   8398a:	2b00      	cmp	r3, #0
   8398c:	d107      	bne.n	8399e <pll_config_init+0x26>
   8398e:	683b      	ldr	r3, [r7, #0]
   83990:	2b00      	cmp	r3, #0
   83992:	d104      	bne.n	8399e <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
   83994:	68fb      	ldr	r3, [r7, #12]
   83996:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   8399a:	601a      	str	r2, [r3, #0]
   8399c:	e019      	b.n	839d2 <pll_config_init+0x5a>
	} else { /* PLLA */
		/* Calculate internal VCO frequency */
		vco_hz = osc_get_rate(e_src) / ul_div;
   8399e:	7afb      	ldrb	r3, [r7, #11]
   839a0:	4618      	mov	r0, r3
   839a2:	4b0e      	ldr	r3, [pc, #56]	; (839dc <pll_config_init+0x64>)
   839a4:	4798      	blx	r3
   839a6:	4602      	mov	r2, r0
   839a8:	687b      	ldr	r3, [r7, #4]
   839aa:	fbb2 f3f3 	udiv	r3, r2, r3
   839ae:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_INPUT_MIN_HZ);
		Assert(vco_hz <= PLL_INPUT_MAX_HZ);

		vco_hz *= ul_mul;
   839b0:	697b      	ldr	r3, [r7, #20]
   839b2:	683a      	ldr	r2, [r7, #0]
   839b4:	fb02 f303 	mul.w	r3, r2, r3
   839b8:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
		Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

		/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
   839ba:	683b      	ldr	r3, [r7, #0]
   839bc:	3b01      	subs	r3, #1
   839be:	041a      	lsls	r2, r3, #16
   839c0:	4b07      	ldr	r3, [pc, #28]	; (839e0 <pll_config_init+0x68>)
   839c2:	4013      	ands	r3, r2
   839c4:	687a      	ldr	r2, [r7, #4]
   839c6:	b2d2      	uxtb	r2, r2
   839c8:	4313      	orrs	r3, r2
   839ca:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
   839ce:	68fb      	ldr	r3, [r7, #12]
   839d0:	601a      	str	r2, [r3, #0]
	}
}
   839d2:	bf00      	nop
   839d4:	3718      	adds	r7, #24
   839d6:	46bd      	mov	sp, r7
   839d8:	bd80      	pop	{r7, pc}
   839da:	bf00      	nop
   839dc:	000838d9 	.word	0x000838d9
   839e0:	07ff0000 	.word	0x07ff0000

000839e4 <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
   839e4:	b580      	push	{r7, lr}
   839e6:	b082      	sub	sp, #8
   839e8:	af00      	add	r7, sp, #0
   839ea:	6078      	str	r0, [r7, #4]
   839ec:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   839ee:	683b      	ldr	r3, [r7, #0]
   839f0:	2b00      	cmp	r3, #0
   839f2:	d108      	bne.n	83a06 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
   839f4:	4b09      	ldr	r3, [pc, #36]	; (83a1c <pll_enable+0x38>)
   839f6:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   839f8:	4a09      	ldr	r2, [pc, #36]	; (83a20 <pll_enable+0x3c>)
   839fa:	687b      	ldr	r3, [r7, #4]
   839fc:	681b      	ldr	r3, [r3, #0]
   839fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   83a02:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
   83a04:	e005      	b.n	83a12 <pll_enable+0x2e>

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   83a06:	4a06      	ldr	r2, [pc, #24]	; (83a20 <pll_enable+0x3c>)
   83a08:	687b      	ldr	r3, [r7, #4]
   83a0a:	681b      	ldr	r3, [r3, #0]
   83a0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   83a10:	61d3      	str	r3, [r2, #28]
	}
}
   83a12:	bf00      	nop
   83a14:	3708      	adds	r7, #8
   83a16:	46bd      	mov	sp, r7
   83a18:	bd80      	pop	{r7, pc}
   83a1a:	bf00      	nop
   83a1c:	00084219 	.word	0x00084219
   83a20:	400e0600 	.word	0x400e0600

00083a24 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
   83a24:	b580      	push	{r7, lr}
   83a26:	b082      	sub	sp, #8
   83a28:	af00      	add	r7, sp, #0
   83a2a:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   83a2c:	687b      	ldr	r3, [r7, #4]
   83a2e:	2b00      	cmp	r3, #0
   83a30:	d103      	bne.n	83a3a <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
   83a32:	4b05      	ldr	r3, [pc, #20]	; (83a48 <pll_is_locked+0x24>)
   83a34:	4798      	blx	r3
   83a36:	4603      	mov	r3, r0
   83a38:	e002      	b.n	83a40 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
   83a3a:	4b04      	ldr	r3, [pc, #16]	; (83a4c <pll_is_locked+0x28>)
   83a3c:	4798      	blx	r3
   83a3e:	4603      	mov	r3, r0
	}
}
   83a40:	4618      	mov	r0, r3
   83a42:	3708      	adds	r7, #8
   83a44:	46bd      	mov	sp, r7
   83a46:	bd80      	pop	{r7, pc}
   83a48:	00084231 	.word	0x00084231
   83a4c:	00084249 	.word	0x00084249

00083a50 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
   83a50:	b580      	push	{r7, lr}
   83a52:	b082      	sub	sp, #8
   83a54:	af00      	add	r7, sp, #0
   83a56:	4603      	mov	r3, r0
   83a58:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   83a5a:	79fb      	ldrb	r3, [r7, #7]
   83a5c:	3b03      	subs	r3, #3
   83a5e:	2b04      	cmp	r3, #4
   83a60:	d808      	bhi.n	83a74 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
   83a62:	79fb      	ldrb	r3, [r7, #7]
   83a64:	4618      	mov	r0, r3
   83a66:	4b06      	ldr	r3, [pc, #24]	; (83a80 <pll_enable_source+0x30>)
   83a68:	4798      	blx	r3
		osc_wait_ready(e_src);
   83a6a:	79fb      	ldrb	r3, [r7, #7]
   83a6c:	4618      	mov	r0, r3
   83a6e:	4b05      	ldr	r3, [pc, #20]	; (83a84 <pll_enable_source+0x34>)
   83a70:	4798      	blx	r3
		break;
   83a72:	e000      	b.n	83a76 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
   83a74:	bf00      	nop
	}
}
   83a76:	bf00      	nop
   83a78:	3708      	adds	r7, #8
   83a7a:	46bd      	mov	sp, r7
   83a7c:	bd80      	pop	{r7, pc}
   83a7e:	bf00      	nop
   83a80:	000837e1 	.word	0x000837e1
   83a84:	0008394d 	.word	0x0008394d

00083a88 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
   83a88:	b580      	push	{r7, lr}
   83a8a:	b082      	sub	sp, #8
   83a8c:	af00      	add	r7, sp, #0
   83a8e:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   83a90:	bf00      	nop
   83a92:	6878      	ldr	r0, [r7, #4]
   83a94:	4b04      	ldr	r3, [pc, #16]	; (83aa8 <pll_wait_for_lock+0x20>)
   83a96:	4798      	blx	r3
   83a98:	4603      	mov	r3, r0
   83a9a:	2b00      	cmp	r3, #0
   83a9c:	d0f9      	beq.n	83a92 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
   83a9e:	2300      	movs	r3, #0
}
   83aa0:	4618      	mov	r0, r3
   83aa2:	3708      	adds	r7, #8
   83aa4:	46bd      	mov	sp, r7
   83aa6:	bd80      	pop	{r7, pc}
   83aa8:	00083a25 	.word	0x00083a25

00083aac <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   83aac:	b580      	push	{r7, lr}
   83aae:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   83ab0:	2006      	movs	r0, #6
   83ab2:	4b04      	ldr	r3, [pc, #16]	; (83ac4 <sysclk_get_main_hz+0x18>)
   83ab4:	4798      	blx	r3
   83ab6:	4602      	mov	r2, r0
   83ab8:	4613      	mov	r3, r2
   83aba:	00db      	lsls	r3, r3, #3
   83abc:	1a9b      	subs	r3, r3, r2
   83abe:	005b      	lsls	r3, r3, #1
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   83ac0:	4618      	mov	r0, r3
   83ac2:	bd80      	pop	{r7, pc}
   83ac4:	000838d9 	.word	0x000838d9

00083ac8 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   83ac8:	b580      	push	{r7, lr}
   83aca:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   83acc:	4b02      	ldr	r3, [pc, #8]	; (83ad8 <sysclk_get_cpu_hz+0x10>)
   83ace:	4798      	blx	r3
   83ad0:	4603      	mov	r3, r0
   83ad2:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   83ad4:	4618      	mov	r0, r3
   83ad6:	bd80      	pop	{r7, pc}
   83ad8:	00083aad 	.word	0x00083aad

00083adc <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   83adc:	b590      	push	{r4, r7, lr}
   83ade:	b083      	sub	sp, #12
   83ae0:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   83ae2:	4811      	ldr	r0, [pc, #68]	; (83b28 <sysclk_init+0x4c>)
   83ae4:	4b11      	ldr	r3, [pc, #68]	; (83b2c <sysclk_init+0x50>)
   83ae6:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
   83ae8:	2006      	movs	r0, #6
   83aea:	4b11      	ldr	r3, [pc, #68]	; (83b30 <sysclk_init+0x54>)
   83aec:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
   83aee:	1d38      	adds	r0, r7, #4
   83af0:	230e      	movs	r3, #14
   83af2:	2201      	movs	r2, #1
   83af4:	2106      	movs	r1, #6
   83af6:	4c0f      	ldr	r4, [pc, #60]	; (83b34 <sysclk_init+0x58>)
   83af8:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
   83afa:	1d3b      	adds	r3, r7, #4
   83afc:	2100      	movs	r1, #0
   83afe:	4618      	mov	r0, r3
   83b00:	4b0d      	ldr	r3, [pc, #52]	; (83b38 <sysclk_init+0x5c>)
   83b02:	4798      	blx	r3
		pll_wait_for_lock(0);
   83b04:	2000      	movs	r0, #0
   83b06:	4b0d      	ldr	r3, [pc, #52]	; (83b3c <sysclk_init+0x60>)
   83b08:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   83b0a:	2010      	movs	r0, #16
   83b0c:	4b0c      	ldr	r3, [pc, #48]	; (83b40 <sysclk_init+0x64>)
   83b0e:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   83b10:	4b0c      	ldr	r3, [pc, #48]	; (83b44 <sysclk_init+0x68>)
   83b12:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   83b14:	4b0c      	ldr	r3, [pc, #48]	; (83b48 <sysclk_init+0x6c>)
   83b16:	4798      	blx	r3
   83b18:	4603      	mov	r3, r0
   83b1a:	4618      	mov	r0, r3
   83b1c:	4b03      	ldr	r3, [pc, #12]	; (83b2c <sysclk_init+0x50>)
   83b1e:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
   83b20:	bf00      	nop
   83b22:	370c      	adds	r7, #12
   83b24:	46bd      	mov	sp, r7
   83b26:	bd90      	pop	{r4, r7, pc}
   83b28:	0501bd00 	.word	0x0501bd00
   83b2c:	200700d1 	.word	0x200700d1
   83b30:	00083a51 	.word	0x00083a51
   83b34:	00083979 	.word	0x00083979
   83b38:	000839e5 	.word	0x000839e5
   83b3c:	00083a89 	.word	0x00083a89
   83b40:	0008402d 	.word	0x0008402d
   83b44:	00084391 	.word	0x00084391
   83b48:	00083ac9 	.word	0x00083ac9

00083b4c <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   83b4c:	b580      	push	{r7, lr}
   83b4e:	b082      	sub	sp, #8
   83b50:	af00      	add	r7, sp, #0
   83b52:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   83b54:	6878      	ldr	r0, [r7, #4]
   83b56:	4b03      	ldr	r3, [pc, #12]	; (83b64 <sysclk_enable_peripheral_clock+0x18>)
   83b58:	4798      	blx	r3
}
   83b5a:	bf00      	nop
   83b5c:	3708      	adds	r7, #8
   83b5e:	46bd      	mov	sp, r7
   83b60:	bd80      	pop	{r7, pc}
   83b62:	bf00      	nop
   83b64:	00084261 	.word	0x00084261

00083b68 <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
   83b68:	b580      	push	{r7, lr}
   83b6a:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
   83b6c:	200b      	movs	r0, #11
   83b6e:	4b06      	ldr	r3, [pc, #24]	; (83b88 <ioport_init+0x20>)
   83b70:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
   83b72:	200c      	movs	r0, #12
   83b74:	4b04      	ldr	r3, [pc, #16]	; (83b88 <ioport_init+0x20>)
   83b76:	4798      	blx	r3
#endif
#ifdef ID_PIOC
	sysclk_enable_peripheral_clock(ID_PIOC);
   83b78:	200d      	movs	r0, #13
   83b7a:	4b03      	ldr	r3, [pc, #12]	; (83b88 <ioport_init+0x20>)
   83b7c:	4798      	blx	r3
#endif
#ifdef ID_PIOD
	sysclk_enable_peripheral_clock(ID_PIOD);
   83b7e:	200e      	movs	r0, #14
   83b80:	4b01      	ldr	r3, [pc, #4]	; (83b88 <ioport_init+0x20>)
   83b82:	4798      	blx	r3
	arch_ioport_init();
}
   83b84:	bf00      	nop
   83b86:	bd80      	pop	{r7, pc}
   83b88:	00083b4d 	.word	0x00083b4d

00083b8c <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   83b8c:	b580      	push	{r7, lr}
   83b8e:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   83b90:	4b17      	ldr	r3, [pc, #92]	; (83bf0 <board_init+0x64>)
   83b92:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   83b96:	605a      	str	r2, [r3, #4]

	/* GPIO has been deprecated, the old code just keeps it for compatibility.
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
   83b98:	4b16      	ldr	r3, [pc, #88]	; (83bf4 <board_init+0x68>)
   83b9a:	4798      	blx	r3
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   83b9c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   83ba0:	203b      	movs	r0, #59	; 0x3b
   83ba2:	4b15      	ldr	r3, [pc, #84]	; (83bf8 <board_init+0x6c>)
   83ba4:	4798      	blx	r3
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   83ba6:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   83baa:	2055      	movs	r0, #85	; 0x55
   83bac:	4b12      	ldr	r3, [pc, #72]	; (83bf8 <board_init+0x6c>)
   83bae:	4798      	blx	r3
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   83bb0:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   83bb4:	2056      	movs	r0, #86	; 0x56
   83bb6:	4b10      	ldr	r3, [pc, #64]	; (83bf8 <board_init+0x6c>)
   83bb8:	4798      	blx	r3

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   83bba:	4910      	ldr	r1, [pc, #64]	; (83bfc <board_init+0x70>)
   83bbc:	2068      	movs	r0, #104	; 0x68
   83bbe:	4b0e      	ldr	r3, [pc, #56]	; (83bf8 <board_init+0x6c>)
   83bc0:	4798      	blx	r3
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   83bc2:	490f      	ldr	r1, [pc, #60]	; (83c00 <board_init+0x74>)
   83bc4:	205c      	movs	r0, #92	; 0x5c
   83bc6:	4b0c      	ldr	r3, [pc, #48]	; (83bf8 <board_init+0x6c>)
   83bc8:	4798      	blx	r3

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   83bca:	4a0e      	ldr	r2, [pc, #56]	; (83c04 <board_init+0x78>)
   83bcc:	f44f 7140 	mov.w	r1, #768	; 0x300
   83bd0:	480d      	ldr	r0, [pc, #52]	; (83c08 <board_init+0x7c>)
   83bd2:	4b0e      	ldr	r3, [pc, #56]	; (83c0c <board_init+0x80>)
   83bd4:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   83bd6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   83bda:	202b      	movs	r0, #43	; 0x2b
   83bdc:	4b06      	ldr	r3, [pc, #24]	; (83bf8 <board_init+0x6c>)
   83bde:	4798      	blx	r3
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   83be0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   83be4:	202a      	movs	r0, #42	; 0x2a
   83be6:	4b04      	ldr	r3, [pc, #16]	; (83bf8 <board_init+0x6c>)
   83be8:	4798      	blx	r3
	gpio_configure_pin(SPI0_MISO_GPIO, SPI0_MISO_FLAGS);
	gpio_configure_pin(SPI0_MOSI_GPIO, SPI0_MOSI_FLAGS);
	gpio_configure_pin(SPI0_SPCK_GPIO, SPI0_SPCK_FLAGS);
	gpio_configure_pin(SPI0_NPCS0_GPIO, SPI0_NPCS0_FLAGS);
#endif
}
   83bea:	bf00      	nop
   83bec:	bd80      	pop	{r7, pc}
   83bee:	bf00      	nop
   83bf0:	400e1a50 	.word	0x400e1a50
   83bf4:	00083b69 	.word	0x00083b69
   83bf8:	00083ded 	.word	0x00083ded
   83bfc:	28000079 	.word	0x28000079
   83c00:	28000001 	.word	0x28000001
   83c04:	08000001 	.word	0x08000001
   83c08:	400e0e00 	.word	0x400e0e00
   83c0c:	00083e11 	.word	0x00083e11

00083c10 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
   83c10:	b480      	push	{r7}
   83c12:	b085      	sub	sp, #20
   83c14:	af00      	add	r7, sp, #0
   83c16:	60f8      	str	r0, [r7, #12]
   83c18:	60b9      	str	r1, [r7, #8]
   83c1a:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   83c1c:	687b      	ldr	r3, [r7, #4]
   83c1e:	2b00      	cmp	r3, #0
   83c20:	d003      	beq.n	83c2a <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
   83c22:	68fb      	ldr	r3, [r7, #12]
   83c24:	68ba      	ldr	r2, [r7, #8]
   83c26:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
   83c28:	e002      	b.n	83c30 <pio_pull_up+0x20>
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
   83c2a:	68fb      	ldr	r3, [r7, #12]
   83c2c:	68ba      	ldr	r2, [r7, #8]
   83c2e:	661a      	str	r2, [r3, #96]	; 0x60
	}
}
   83c30:	bf00      	nop
   83c32:	3714      	adds	r7, #20
   83c34:	46bd      	mov	sp, r7
   83c36:	bc80      	pop	{r7}
   83c38:	4770      	bx	lr
   83c3a:	bf00      	nop

00083c3c <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
   83c3c:	b480      	push	{r7}
   83c3e:	b087      	sub	sp, #28
   83c40:	af00      	add	r7, sp, #0
   83c42:	60f8      	str	r0, [r7, #12]
   83c44:	60b9      	str	r1, [r7, #8]
   83c46:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   83c48:	68fb      	ldr	r3, [r7, #12]
   83c4a:	687a      	ldr	r2, [r7, #4]
   83c4c:	645a      	str	r2, [r3, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   83c4e:	68bb      	ldr	r3, [r7, #8]
   83c50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   83c54:	d01f      	beq.n	83c96 <pio_set_peripheral+0x5a>
   83c56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   83c5a:	d805      	bhi.n	83c68 <pio_set_peripheral+0x2c>
   83c5c:	2b00      	cmp	r3, #0
   83c5e:	d027      	beq.n	83cb0 <pio_set_peripheral+0x74>
   83c60:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   83c64:	d00a      	beq.n	83c7c <pio_set_peripheral+0x40>
   83c66:	e01f      	b.n	83ca8 <pio_set_peripheral+0x6c>
   83c68:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   83c6c:	d020      	beq.n	83cb0 <pio_set_peripheral+0x74>
   83c6e:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   83c72:	d01d      	beq.n	83cb0 <pio_set_peripheral+0x74>
   83c74:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   83c78:	d01a      	beq.n	83cb0 <pio_set_peripheral+0x74>
   83c7a:	e015      	b.n	83ca8 <pio_set_peripheral+0x6c>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   83c7c:	68fb      	ldr	r3, [r7, #12]
   83c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   83c80:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   83c82:	68fb      	ldr	r3, [r7, #12]
   83c84:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   83c86:	687b      	ldr	r3, [r7, #4]
   83c88:	43d9      	mvns	r1, r3
   83c8a:	697b      	ldr	r3, [r7, #20]
   83c8c:	400b      	ands	r3, r1
   83c8e:	401a      	ands	r2, r3
   83c90:	68fb      	ldr	r3, [r7, #12]
   83c92:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   83c94:	e008      	b.n	83ca8 <pio_set_peripheral+0x6c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   83c96:	68fb      	ldr	r3, [r7, #12]
   83c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   83c9a:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   83c9c:	687a      	ldr	r2, [r7, #4]
   83c9e:	697b      	ldr	r3, [r7, #20]
   83ca0:	431a      	orrs	r2, r3
   83ca2:	68fb      	ldr	r3, [r7, #12]
   83ca4:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   83ca6:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   83ca8:	68fb      	ldr	r3, [r7, #12]
   83caa:	687a      	ldr	r2, [r7, #4]
   83cac:	605a      	str	r2, [r3, #4]
   83cae:	e000      	b.n	83cb2 <pio_set_peripheral+0x76>
		// other types are invalid in this function
	case PIO_INPUT:
	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
   83cb0:	bf00      	nop
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
}
   83cb2:	371c      	adds	r7, #28
   83cb4:	46bd      	mov	sp, r7
   83cb6:	bc80      	pop	{r7}
   83cb8:	4770      	bx	lr
   83cba:	bf00      	nop

00083cbc <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
   83cbc:	b580      	push	{r7, lr}
   83cbe:	b084      	sub	sp, #16
   83cc0:	af00      	add	r7, sp, #0
   83cc2:	60f8      	str	r0, [r7, #12]
   83cc4:	60b9      	str	r1, [r7, #8]
   83cc6:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
   83cc8:	68b9      	ldr	r1, [r7, #8]
   83cca:	68f8      	ldr	r0, [r7, #12]
   83ccc:	4b19      	ldr	r3, [pc, #100]	; (83d34 <pio_set_input+0x78>)
   83cce:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
   83cd0:	687b      	ldr	r3, [r7, #4]
   83cd2:	f003 0301 	and.w	r3, r3, #1
   83cd6:	461a      	mov	r2, r3
   83cd8:	68b9      	ldr	r1, [r7, #8]
   83cda:	68f8      	ldr	r0, [r7, #12]
   83cdc:	4b16      	ldr	r3, [pc, #88]	; (83d38 <pio_set_input+0x7c>)
   83cde:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   83ce0:	687b      	ldr	r3, [r7, #4]
   83ce2:	f003 030a 	and.w	r3, r3, #10
   83ce6:	2b00      	cmp	r3, #0
   83ce8:	d003      	beq.n	83cf2 <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
   83cea:	68fb      	ldr	r3, [r7, #12]
   83cec:	68ba      	ldr	r2, [r7, #8]
   83cee:	621a      	str	r2, [r3, #32]
   83cf0:	e002      	b.n	83cf8 <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
   83cf2:	68fb      	ldr	r3, [r7, #12]
   83cf4:	68ba      	ldr	r2, [r7, #8]
   83cf6:	625a      	str	r2, [r3, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   83cf8:	687b      	ldr	r3, [r7, #4]
   83cfa:	f003 0302 	and.w	r3, r3, #2
   83cfe:	2b00      	cmp	r3, #0
   83d00:	d004      	beq.n	83d0c <pio_set_input+0x50>
		p_pio->PIO_SCIFSR = ul_mask;
   83d02:	68fb      	ldr	r3, [r7, #12]
   83d04:	68ba      	ldr	r2, [r7, #8]
   83d06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   83d0a:	e008      	b.n	83d1e <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   83d0c:	687b      	ldr	r3, [r7, #4]
   83d0e:	f003 0308 	and.w	r3, r3, #8
   83d12:	2b00      	cmp	r3, #0
   83d14:	d003      	beq.n	83d1e <pio_set_input+0x62>
			p_pio->PIO_DIFSR = ul_mask;
   83d16:	68fb      	ldr	r3, [r7, #12]
   83d18:	68ba      	ldr	r2, [r7, #8]
   83d1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   83d1e:	68fb      	ldr	r3, [r7, #12]
   83d20:	68ba      	ldr	r2, [r7, #8]
   83d22:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
   83d24:	68fb      	ldr	r3, [r7, #12]
   83d26:	68ba      	ldr	r2, [r7, #8]
   83d28:	601a      	str	r2, [r3, #0]
}
   83d2a:	bf00      	nop
   83d2c:	3710      	adds	r7, #16
   83d2e:	46bd      	mov	sp, r7
   83d30:	bd80      	pop	{r7, pc}
   83d32:	bf00      	nop
   83d34:	00083da1 	.word	0x00083da1
   83d38:	00083c11 	.word	0x00083c11

00083d3c <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   83d3c:	b580      	push	{r7, lr}
   83d3e:	b084      	sub	sp, #16
   83d40:	af00      	add	r7, sp, #0
   83d42:	60f8      	str	r0, [r7, #12]
   83d44:	60b9      	str	r1, [r7, #8]
   83d46:	607a      	str	r2, [r7, #4]
   83d48:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
   83d4a:	68b9      	ldr	r1, [r7, #8]
   83d4c:	68f8      	ldr	r0, [r7, #12]
   83d4e:	4b12      	ldr	r3, [pc, #72]	; (83d98 <pio_set_output+0x5c>)
   83d50:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
   83d52:	69ba      	ldr	r2, [r7, #24]
   83d54:	68b9      	ldr	r1, [r7, #8]
   83d56:	68f8      	ldr	r0, [r7, #12]
   83d58:	4b10      	ldr	r3, [pc, #64]	; (83d9c <pio_set_output+0x60>)
   83d5a:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   83d5c:	683b      	ldr	r3, [r7, #0]
   83d5e:	2b00      	cmp	r3, #0
   83d60:	d003      	beq.n	83d6a <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
   83d62:	68fb      	ldr	r3, [r7, #12]
   83d64:	68ba      	ldr	r2, [r7, #8]
   83d66:	651a      	str	r2, [r3, #80]	; 0x50
   83d68:	e002      	b.n	83d70 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   83d6a:	68fb      	ldr	r3, [r7, #12]
   83d6c:	68ba      	ldr	r2, [r7, #8]
   83d6e:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   83d70:	687b      	ldr	r3, [r7, #4]
   83d72:	2b00      	cmp	r3, #0
   83d74:	d003      	beq.n	83d7e <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
   83d76:	68fb      	ldr	r3, [r7, #12]
   83d78:	68ba      	ldr	r2, [r7, #8]
   83d7a:	631a      	str	r2, [r3, #48]	; 0x30
   83d7c:	e002      	b.n	83d84 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
   83d7e:	68fb      	ldr	r3, [r7, #12]
   83d80:	68ba      	ldr	r2, [r7, #8]
   83d82:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   83d84:	68fb      	ldr	r3, [r7, #12]
   83d86:	68ba      	ldr	r2, [r7, #8]
   83d88:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
   83d8a:	68fb      	ldr	r3, [r7, #12]
   83d8c:	68ba      	ldr	r2, [r7, #8]
   83d8e:	601a      	str	r2, [r3, #0]
}
   83d90:	bf00      	nop
   83d92:	3710      	adds	r7, #16
   83d94:	46bd      	mov	sp, r7
   83d96:	bd80      	pop	{r7, pc}
   83d98:	00083da1 	.word	0x00083da1
   83d9c:	00083c11 	.word	0x00083c11

00083da0 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
   83da0:	b480      	push	{r7}
   83da2:	b083      	sub	sp, #12
   83da4:	af00      	add	r7, sp, #0
   83da6:	6078      	str	r0, [r7, #4]
   83da8:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
   83daa:	687b      	ldr	r3, [r7, #4]
   83dac:	683a      	ldr	r2, [r7, #0]
   83dae:	645a      	str	r2, [r3, #68]	; 0x44
}
   83db0:	bf00      	nop
   83db2:	370c      	adds	r7, #12
   83db4:	46bd      	mov	sp, r7
   83db6:	bc80      	pop	{r7}
   83db8:	4770      	bx	lr
   83dba:	bf00      	nop

00083dbc <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
   83dbc:	b480      	push	{r7}
   83dbe:	b083      	sub	sp, #12
   83dc0:	af00      	add	r7, sp, #0
   83dc2:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
   83dc4:	687b      	ldr	r3, [r7, #4]
   83dc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
   83dc8:	4618      	mov	r0, r3
   83dca:	370c      	adds	r7, #12
   83dcc:	46bd      	mov	sp, r7
   83dce:	bc80      	pop	{r7}
   83dd0:	4770      	bx	lr
   83dd2:	bf00      	nop

00083dd4 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
   83dd4:	b480      	push	{r7}
   83dd6:	b083      	sub	sp, #12
   83dd8:	af00      	add	r7, sp, #0
   83dda:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
   83ddc:	687b      	ldr	r3, [r7, #4]
   83dde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
   83de0:	4618      	mov	r0, r3
   83de2:	370c      	adds	r7, #12
   83de4:	46bd      	mov	sp, r7
   83de6:	bc80      	pop	{r7}
   83de8:	4770      	bx	lr
   83dea:	bf00      	nop

00083dec <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   83dec:	b580      	push	{r7, lr}
   83dee:	b084      	sub	sp, #16
   83df0:	af00      	add	r7, sp, #0
   83df2:	6078      	str	r0, [r7, #4]
   83df4:	6039      	str	r1, [r7, #0]
	Pio *p_pio = pio_get_pin_group(ul_pin);
   83df6:	6878      	ldr	r0, [r7, #4]
   83df8:	4b04      	ldr	r3, [pc, #16]	; (83e0c <pio_configure_pin+0x20>)
   83dfa:	4798      	blx	r3
   83dfc:	60f8      	str	r0, [r7, #12]
return;
   83dfe:	bf00      	nop
   83e00:	bf00      	nop
	default:
		return 0;
	}

	return 1;
}
   83e02:	4618      	mov	r0, r3
   83e04:	3710      	adds	r7, #16
   83e06:	46bd      	mov	sp, r7
   83e08:	bd80      	pop	{r7, pc}
   83e0a:	bf00      	nop
   83e0c:	00083ef5 	.word	0x00083ef5

00083e10 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   83e10:	b590      	push	{r4, r7, lr}
   83e12:	b087      	sub	sp, #28
   83e14:	af02      	add	r7, sp, #8
   83e16:	60f8      	str	r0, [r7, #12]
   83e18:	60b9      	str	r1, [r7, #8]
   83e1a:	607a      	str	r2, [r7, #4]
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   83e1c:	687b      	ldr	r3, [r7, #4]
   83e1e:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   83e22:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   83e26:	d02e      	beq.n	83e86 <pio_configure_pin_group+0x76>
   83e28:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   83e2c:	d806      	bhi.n	83e3c <pio_configure_pin_group+0x2c>
   83e2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   83e32:	d00a      	beq.n	83e4a <pio_configure_pin_group+0x3a>
   83e34:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   83e38:	d016      	beq.n	83e68 <pio_configure_pin_group+0x58>
   83e3a:	e04c      	b.n	83ed6 <pio_configure_pin_group+0xc6>
   83e3c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   83e40:	d027      	beq.n	83e92 <pio_configure_pin_group+0x82>
   83e42:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   83e46:	d024      	beq.n	83e92 <pio_configure_pin_group+0x82>
   83e48:	e045      	b.n	83ed6 <pio_configure_pin_group+0xc6>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   83e4a:	68ba      	ldr	r2, [r7, #8]
   83e4c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   83e50:	68f8      	ldr	r0, [r7, #12]
   83e52:	4b24      	ldr	r3, [pc, #144]	; (83ee4 <pio_configure_pin_group+0xd4>)
   83e54:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   83e56:	687b      	ldr	r3, [r7, #4]
   83e58:	f003 0301 	and.w	r3, r3, #1
   83e5c:	461a      	mov	r2, r3
   83e5e:	68b9      	ldr	r1, [r7, #8]
   83e60:	68f8      	ldr	r0, [r7, #12]
   83e62:	4b21      	ldr	r3, [pc, #132]	; (83ee8 <pio_configure_pin_group+0xd8>)
   83e64:	4798      	blx	r3
		break;
   83e66:	e038      	b.n	83eda <pio_configure_pin_group+0xca>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   83e68:	68ba      	ldr	r2, [r7, #8]
   83e6a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   83e6e:	68f8      	ldr	r0, [r7, #12]
   83e70:	4b1c      	ldr	r3, [pc, #112]	; (83ee4 <pio_configure_pin_group+0xd4>)
   83e72:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   83e74:	687b      	ldr	r3, [r7, #4]
   83e76:	f003 0301 	and.w	r3, r3, #1
   83e7a:	461a      	mov	r2, r3
   83e7c:	68b9      	ldr	r1, [r7, #8]
   83e7e:	68f8      	ldr	r0, [r7, #12]
   83e80:	4b19      	ldr	r3, [pc, #100]	; (83ee8 <pio_configure_pin_group+0xd8>)
   83e82:	4798      	blx	r3
		break;
   83e84:	e029      	b.n	83eda <pio_configure_pin_group+0xca>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   83e86:	687a      	ldr	r2, [r7, #4]
   83e88:	68b9      	ldr	r1, [r7, #8]
   83e8a:	68f8      	ldr	r0, [r7, #12]
   83e8c:	4b17      	ldr	r3, [pc, #92]	; (83eec <pio_configure_pin_group+0xdc>)
   83e8e:	4798      	blx	r3
		break;
   83e90:	e023      	b.n	83eda <pio_configure_pin_group+0xca>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   83e92:	687b      	ldr	r3, [r7, #4]
   83e94:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   83e98:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   83e9c:	bf0c      	ite	eq
   83e9e:	2301      	moveq	r3, #1
   83ea0:	2300      	movne	r3, #0
   83ea2:	b2db      	uxtb	r3, r3
   83ea4:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   83ea6:	687b      	ldr	r3, [r7, #4]
   83ea8:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   83eac:	2b00      	cmp	r3, #0
   83eae:	bf14      	ite	ne
   83eb0:	2301      	movne	r3, #1
   83eb2:	2300      	moveq	r3, #0
   83eb4:	b2db      	uxtb	r3, r3
   83eb6:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
   83eb8:	687b      	ldr	r3, [r7, #4]
   83eba:	f003 0301 	and.w	r3, r3, #1
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   83ebe:	2b00      	cmp	r3, #0
   83ec0:	bf14      	ite	ne
   83ec2:	2301      	movne	r3, #1
   83ec4:	2300      	moveq	r3, #0
   83ec6:	b2db      	uxtb	r3, r3
   83ec8:	9300      	str	r3, [sp, #0]
   83eca:	460b      	mov	r3, r1
   83ecc:	68b9      	ldr	r1, [r7, #8]
   83ece:	68f8      	ldr	r0, [r7, #12]
   83ed0:	4c07      	ldr	r4, [pc, #28]	; (83ef0 <pio_configure_pin_group+0xe0>)
   83ed2:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   83ed4:	e001      	b.n	83eda <pio_configure_pin_group+0xca>

	default:
		return 0;
   83ed6:	2300      	movs	r3, #0
   83ed8:	e000      	b.n	83edc <pio_configure_pin_group+0xcc>
	}

	return 1;
   83eda:	2301      	movs	r3, #1
}
   83edc:	4618      	mov	r0, r3
   83ede:	3714      	adds	r7, #20
   83ee0:	46bd      	mov	sp, r7
   83ee2:	bd90      	pop	{r4, r7, pc}
   83ee4:	00083c3d 	.word	0x00083c3d
   83ee8:	00083c11 	.word	0x00083c11
   83eec:	00083cbd 	.word	0x00083cbd
   83ef0:	00083d3d 	.word	0x00083d3d

00083ef4 <pio_get_pin_group>:
 * \param ul_pin The pin index.
 *
 * \return Pointer to \ref Pio struct for GPIO port.
 */
Pio *pio_get_pin_group(uint32_t ul_pin)
{
   83ef4:	b480      	push	{r7}
   83ef6:	b085      	sub	sp, #20
   83ef8:	af00      	add	r7, sp, #0
   83efa:	6078      	str	r0, [r7, #4]
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   83efc:	687b      	ldr	r3, [r7, #4]
   83efe:	095b      	lsrs	r3, r3, #5
   83f00:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   83f04:	f203 7307 	addw	r3, r3, #1799	; 0x707
   83f08:	025b      	lsls	r3, r3, #9
   83f0a:	60fb      	str	r3, [r7, #12]
#endif
	return p_pio;
   83f0c:	68fb      	ldr	r3, [r7, #12]
}
   83f0e:	4618      	mov	r0, r3
   83f10:	3714      	adds	r7, #20
   83f12:	46bd      	mov	sp, r7
   83f14:	bc80      	pop	{r7}
   83f16:	4770      	bx	lr

00083f18 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   83f18:	b580      	push	{r7, lr}
   83f1a:	b084      	sub	sp, #16
   83f1c:	af00      	add	r7, sp, #0
   83f1e:	6078      	str	r0, [r7, #4]
   83f20:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   83f22:	6878      	ldr	r0, [r7, #4]
   83f24:	4b26      	ldr	r3, [pc, #152]	; (83fc0 <pio_handler_process+0xa8>)
   83f26:	4798      	blx	r3
   83f28:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
   83f2a:	6878      	ldr	r0, [r7, #4]
   83f2c:	4b25      	ldr	r3, [pc, #148]	; (83fc4 <pio_handler_process+0xac>)
   83f2e:	4798      	blx	r3
   83f30:	4602      	mov	r2, r0
   83f32:	68fb      	ldr	r3, [r7, #12]
   83f34:	4013      	ands	r3, r2
   83f36:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
   83f38:	68fb      	ldr	r3, [r7, #12]
   83f3a:	2b00      	cmp	r3, #0
   83f3c:	d03c      	beq.n	83fb8 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
   83f3e:	2300      	movs	r3, #0
   83f40:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
   83f42:	e034      	b.n	83fae <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   83f44:	4a20      	ldr	r2, [pc, #128]	; (83fc8 <pio_handler_process+0xb0>)
   83f46:	68bb      	ldr	r3, [r7, #8]
   83f48:	011b      	lsls	r3, r3, #4
   83f4a:	4413      	add	r3, r2
   83f4c:	681a      	ldr	r2, [r3, #0]
   83f4e:	683b      	ldr	r3, [r7, #0]
   83f50:	429a      	cmp	r2, r3
   83f52:	d126      	bne.n	83fa2 <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   83f54:	4a1c      	ldr	r2, [pc, #112]	; (83fc8 <pio_handler_process+0xb0>)
   83f56:	68bb      	ldr	r3, [r7, #8]
   83f58:	011b      	lsls	r3, r3, #4
   83f5a:	4413      	add	r3, r2
   83f5c:	3304      	adds	r3, #4
   83f5e:	681a      	ldr	r2, [r3, #0]
   83f60:	68fb      	ldr	r3, [r7, #12]
   83f62:	4013      	ands	r3, r2
   83f64:	2b00      	cmp	r3, #0
   83f66:	d01c      	beq.n	83fa2 <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   83f68:	4a17      	ldr	r2, [pc, #92]	; (83fc8 <pio_handler_process+0xb0>)
   83f6a:	68bb      	ldr	r3, [r7, #8]
   83f6c:	011b      	lsls	r3, r3, #4
   83f6e:	4413      	add	r3, r2
   83f70:	330c      	adds	r3, #12
   83f72:	681b      	ldr	r3, [r3, #0]
   83f74:	4914      	ldr	r1, [pc, #80]	; (83fc8 <pio_handler_process+0xb0>)
   83f76:	68ba      	ldr	r2, [r7, #8]
   83f78:	0112      	lsls	r2, r2, #4
   83f7a:	440a      	add	r2, r1
   83f7c:	6810      	ldr	r0, [r2, #0]
   83f7e:	4912      	ldr	r1, [pc, #72]	; (83fc8 <pio_handler_process+0xb0>)
   83f80:	68ba      	ldr	r2, [r7, #8]
   83f82:	0112      	lsls	r2, r2, #4
   83f84:	440a      	add	r2, r1
   83f86:	3204      	adds	r2, #4
   83f88:	6812      	ldr	r2, [r2, #0]
   83f8a:	4611      	mov	r1, r2
   83f8c:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   83f8e:	4a0e      	ldr	r2, [pc, #56]	; (83fc8 <pio_handler_process+0xb0>)
   83f90:	68bb      	ldr	r3, [r7, #8]
   83f92:	011b      	lsls	r3, r3, #4
   83f94:	4413      	add	r3, r2
   83f96:	3304      	adds	r3, #4
   83f98:	681b      	ldr	r3, [r3, #0]
   83f9a:	43db      	mvns	r3, r3
   83f9c:	68fa      	ldr	r2, [r7, #12]
   83f9e:	4013      	ands	r3, r2
   83fa0:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
   83fa2:	68bb      	ldr	r3, [r7, #8]
   83fa4:	3301      	adds	r3, #1
   83fa6:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
   83fa8:	68bb      	ldr	r3, [r7, #8]
   83faa:	2b06      	cmp	r3, #6
   83fac:	d803      	bhi.n	83fb6 <pio_handler_process+0x9e>

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   83fae:	68fb      	ldr	r3, [r7, #12]
   83fb0:	2b00      	cmp	r3, #0
   83fb2:	d1c7      	bne.n	83f44 <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
   83fb4:	e000      	b.n	83fb8 <pio_handler_process+0xa0>
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
				break;
   83fb6:	bf00      	nop
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
   83fb8:	bf00      	nop
   83fba:	3710      	adds	r7, #16
   83fbc:	46bd      	mov	sp, r7
   83fbe:	bd80      	pop	{r7, pc}
   83fc0:	00083dbd 	.word	0x00083dbd
   83fc4:	00083dd5 	.word	0x00083dd5
   83fc8:	20070a0c 	.word	0x20070a0c

00083fcc <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   83fcc:	b580      	push	{r7, lr}
   83fce:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
   83fd0:	210b      	movs	r1, #11
   83fd2:	4802      	ldr	r0, [pc, #8]	; (83fdc <PIOA_Handler+0x10>)
   83fd4:	4b02      	ldr	r3, [pc, #8]	; (83fe0 <PIOA_Handler+0x14>)
   83fd6:	4798      	blx	r3
}
   83fd8:	bf00      	nop
   83fda:	bd80      	pop	{r7, pc}
   83fdc:	400e0e00 	.word	0x400e0e00
   83fe0:	00083f19 	.word	0x00083f19

00083fe4 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   83fe4:	b580      	push	{r7, lr}
   83fe6:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
   83fe8:	210c      	movs	r1, #12
   83fea:	4802      	ldr	r0, [pc, #8]	; (83ff4 <PIOB_Handler+0x10>)
   83fec:	4b02      	ldr	r3, [pc, #8]	; (83ff8 <PIOB_Handler+0x14>)
   83fee:	4798      	blx	r3
}
   83ff0:	bf00      	nop
   83ff2:	bd80      	pop	{r7, pc}
   83ff4:	400e1000 	.word	0x400e1000
   83ff8:	00083f19 	.word	0x00083f19

00083ffc <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   83ffc:	b580      	push	{r7, lr}
   83ffe:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
   84000:	210d      	movs	r1, #13
   84002:	4802      	ldr	r0, [pc, #8]	; (8400c <PIOC_Handler+0x10>)
   84004:	4b02      	ldr	r3, [pc, #8]	; (84010 <PIOC_Handler+0x14>)
   84006:	4798      	blx	r3
}
   84008:	bf00      	nop
   8400a:	bd80      	pop	{r7, pc}
   8400c:	400e1200 	.word	0x400e1200
   84010:	00083f19 	.word	0x00083f19

00084014 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   84014:	b580      	push	{r7, lr}
   84016:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
   84018:	210e      	movs	r1, #14
   8401a:	4802      	ldr	r0, [pc, #8]	; (84024 <PIOD_Handler+0x10>)
   8401c:	4b02      	ldr	r3, [pc, #8]	; (84028 <PIOD_Handler+0x14>)
   8401e:	4798      	blx	r3
}
   84020:	bf00      	nop
   84022:	bd80      	pop	{r7, pc}
   84024:	400e1400 	.word	0x400e1400
   84028:	00083f19 	.word	0x00083f19

0008402c <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
   8402c:	b480      	push	{r7}
   8402e:	b085      	sub	sp, #20
   84030:	af00      	add	r7, sp, #0
   84032:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   84034:	491c      	ldr	r1, [pc, #112]	; (840a8 <pmc_switch_mck_to_pllack+0x7c>)
   84036:	4b1c      	ldr	r3, [pc, #112]	; (840a8 <pmc_switch_mck_to_pllack+0x7c>)
   84038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8403a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
   8403e:	687b      	ldr	r3, [r7, #4]
   84040:	4313      	orrs	r3, r2
   84042:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   84044:	f44f 6300 	mov.w	r3, #2048	; 0x800
   84048:	60fb      	str	r3, [r7, #12]
   8404a:	e007      	b.n	8405c <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
   8404c:	68fb      	ldr	r3, [r7, #12]
   8404e:	2b00      	cmp	r3, #0
   84050:	d101      	bne.n	84056 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
   84052:	2301      	movs	r3, #1
   84054:	e023      	b.n	8409e <pmc_switch_mck_to_pllack+0x72>
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
   84056:	68fb      	ldr	r3, [r7, #12]
   84058:	3b01      	subs	r3, #1
   8405a:	60fb      	str	r3, [r7, #12]
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8405c:	4b12      	ldr	r3, [pc, #72]	; (840a8 <pmc_switch_mck_to_pllack+0x7c>)
   8405e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   84060:	f003 0308 	and.w	r3, r3, #8
   84064:	2b00      	cmp	r3, #0
   84066:	d0f1      	beq.n	8404c <pmc_switch_mck_to_pllack+0x20>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   84068:	4a0f      	ldr	r2, [pc, #60]	; (840a8 <pmc_switch_mck_to_pllack+0x7c>)
   8406a:	4b0f      	ldr	r3, [pc, #60]	; (840a8 <pmc_switch_mck_to_pllack+0x7c>)
   8406c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8406e:	f023 0303 	bic.w	r3, r3, #3
   84072:	f043 0302 	orr.w	r3, r3, #2
   84076:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   84078:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8407c:	60fb      	str	r3, [r7, #12]
   8407e:	e007      	b.n	84090 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
   84080:	68fb      	ldr	r3, [r7, #12]
   84082:	2b00      	cmp	r3, #0
   84084:	d101      	bne.n	8408a <pmc_switch_mck_to_pllack+0x5e>
			return 1;
   84086:	2301      	movs	r3, #1
   84088:	e009      	b.n	8409e <pmc_switch_mck_to_pllack+0x72>

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
   8408a:	68fb      	ldr	r3, [r7, #12]
   8408c:	3b01      	subs	r3, #1
   8408e:	60fb      	str	r3, [r7, #12]
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   84090:	4b05      	ldr	r3, [pc, #20]	; (840a8 <pmc_switch_mck_to_pllack+0x7c>)
   84092:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   84094:	f003 0308 	and.w	r3, r3, #8
   84098:	2b00      	cmp	r3, #0
   8409a:	d0f1      	beq.n	84080 <pmc_switch_mck_to_pllack+0x54>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   8409c:	2300      	movs	r3, #0
}
   8409e:	4618      	mov	r0, r3
   840a0:	3714      	adds	r7, #20
   840a2:	46bd      	mov	sp, r7
   840a4:	bc80      	pop	{r7}
   840a6:	4770      	bx	lr
   840a8:	400e0600 	.word	0x400e0600

000840ac <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
   840ac:	b480      	push	{r7}
   840ae:	b083      	sub	sp, #12
   840b0:	af00      	add	r7, sp, #0
   840b2:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
   840b4:	687b      	ldr	r3, [r7, #4]
   840b6:	2b01      	cmp	r3, #1
   840b8:	d107      	bne.n	840ca <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
   840ba:	4a08      	ldr	r2, [pc, #32]	; (840dc <pmc_switch_sclk_to_32kxtal+0x30>)
   840bc:	4b07      	ldr	r3, [pc, #28]	; (840dc <pmc_switch_sclk_to_32kxtal+0x30>)
   840be:	689b      	ldr	r3, [r3, #8]
   840c0:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   840c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   840c8:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
   840ca:	4b04      	ldr	r3, [pc, #16]	; (840dc <pmc_switch_sclk_to_32kxtal+0x30>)
   840cc:	4a04      	ldr	r2, [pc, #16]	; (840e0 <pmc_switch_sclk_to_32kxtal+0x34>)
   840ce:	601a      	str	r2, [r3, #0]
}
   840d0:	bf00      	nop
   840d2:	370c      	adds	r7, #12
   840d4:	46bd      	mov	sp, r7
   840d6:	bc80      	pop	{r7}
   840d8:	4770      	bx	lr
   840da:	bf00      	nop
   840dc:	400e1a10 	.word	0x400e1a10
   840e0:	a5000008 	.word	0xa5000008

000840e4 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
   840e4:	b480      	push	{r7}
   840e6:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
   840e8:	4b09      	ldr	r3, [pc, #36]	; (84110 <pmc_osc_is_ready_32kxtal+0x2c>)
   840ea:	695b      	ldr	r3, [r3, #20]
   840ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
   840f0:	2b00      	cmp	r3, #0
   840f2:	d007      	beq.n	84104 <pmc_osc_is_ready_32kxtal+0x20>
   840f4:	4b07      	ldr	r3, [pc, #28]	; (84114 <pmc_osc_is_ready_32kxtal+0x30>)
   840f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   840f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
   840fc:	2b00      	cmp	r3, #0
   840fe:	d001      	beq.n	84104 <pmc_osc_is_ready_32kxtal+0x20>
   84100:	2301      	movs	r3, #1
   84102:	e000      	b.n	84106 <pmc_osc_is_ready_32kxtal+0x22>
   84104:	2300      	movs	r3, #0
}
   84106:	4618      	mov	r0, r3
   84108:	46bd      	mov	sp, r7
   8410a:	bc80      	pop	{r7}
   8410c:	4770      	bx	lr
   8410e:	bf00      	nop
   84110:	400e1a10 	.word	0x400e1a10
   84114:	400e0600 	.word	0x400e0600

00084118 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
   84118:	b480      	push	{r7}
   8411a:	b083      	sub	sp, #12
   8411c:	af00      	add	r7, sp, #0
   8411e:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
   84120:	4a18      	ldr	r2, [pc, #96]	; (84184 <pmc_switch_mainck_to_fastrc+0x6c>)
   84122:	4b18      	ldr	r3, [pc, #96]	; (84184 <pmc_switch_mainck_to_fastrc+0x6c>)
   84124:	6a1b      	ldr	r3, [r3, #32]
   84126:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   8412a:	f043 0308 	orr.w	r3, r3, #8
   8412e:	6213      	str	r3, [r2, #32]

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   84130:	bf00      	nop
   84132:	4b14      	ldr	r3, [pc, #80]	; (84184 <pmc_switch_mainck_to_fastrc+0x6c>)
   84134:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   84136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   8413a:	2b00      	cmp	r3, #0
   8413c:	d0f9      	beq.n	84132 <pmc_switch_mainck_to_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   8413e:	4911      	ldr	r1, [pc, #68]	; (84184 <pmc_switch_mainck_to_fastrc+0x6c>)
   84140:	4b10      	ldr	r3, [pc, #64]	; (84184 <pmc_switch_mainck_to_fastrc+0x6c>)
   84142:	6a1b      	ldr	r3, [r3, #32]
   84144:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   84148:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
   8414c:	687a      	ldr	r2, [r7, #4]
   8414e:	4313      	orrs	r3, r2
   84150:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   84154:	620b      	str	r3, [r1, #32]
			CKGR_MOR_KEY_PASSWD | ul_moscrcf;

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   84156:	bf00      	nop
   84158:	4b0a      	ldr	r3, [pc, #40]	; (84184 <pmc_switch_mainck_to_fastrc+0x6c>)
   8415a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8415c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   84160:	2b00      	cmp	r3, #0
   84162:	d0f9      	beq.n	84158 <pmc_switch_mainck_to_fastrc+0x40>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
   84164:	4a07      	ldr	r2, [pc, #28]	; (84184 <pmc_switch_mainck_to_fastrc+0x6c>)
   84166:	4b07      	ldr	r3, [pc, #28]	; (84184 <pmc_switch_mainck_to_fastrc+0x6c>)
   84168:	6a1b      	ldr	r3, [r3, #32]
   8416a:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
   8416e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   84172:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   84176:	6213      	str	r3, [r2, #32]
			CKGR_MOR_KEY_PASSWD;
}
   84178:	bf00      	nop
   8417a:	370c      	adds	r7, #12
   8417c:	46bd      	mov	sp, r7
   8417e:	bc80      	pop	{r7}
   84180:	4770      	bx	lr
   84182:	bf00      	nop
   84184:	400e0600 	.word	0x400e0600

00084188 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
   84188:	b480      	push	{r7}
   8418a:	b083      	sub	sp, #12
   8418c:	af00      	add	r7, sp, #0
   8418e:	6078      	str	r0, [r7, #4]
   84190:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   84192:	687b      	ldr	r3, [r7, #4]
   84194:	2b00      	cmp	r3, #0
   84196:	d008      	beq.n	841aa <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   84198:	4916      	ldr	r1, [pc, #88]	; (841f4 <pmc_switch_mainck_to_xtal+0x6c>)
   8419a:	4b16      	ldr	r3, [pc, #88]	; (841f4 <pmc_switch_mainck_to_xtal+0x6c>)
   8419c:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   8419e:	4a16      	ldr	r2, [pc, #88]	; (841f8 <pmc_switch_mainck_to_xtal+0x70>)
   841a0:	401a      	ands	r2, r3
   841a2:	4b16      	ldr	r3, [pc, #88]	; (841fc <pmc_switch_mainck_to_xtal+0x74>)
   841a4:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   841a6:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
	}
}
   841a8:	e01e      	b.n	841e8 <pmc_switch_mainck_to_xtal+0x60>
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   841aa:	4912      	ldr	r1, [pc, #72]	; (841f4 <pmc_switch_mainck_to_xtal+0x6c>)
   841ac:	4b11      	ldr	r3, [pc, #68]	; (841f4 <pmc_switch_mainck_to_xtal+0x6c>)
   841ae:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   841b0:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   841b4:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   841b8:	683a      	ldr	r2, [r7, #0]
   841ba:	0212      	lsls	r2, r2, #8
   841bc:	b292      	uxth	r2, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   841be:	4313      	orrs	r3, r2
   841c0:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   841c4:	f043 0301 	orr.w	r3, r3, #1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   841c8:	620b      	str	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   841ca:	bf00      	nop
   841cc:	4b09      	ldr	r3, [pc, #36]	; (841f4 <pmc_switch_mainck_to_xtal+0x6c>)
   841ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   841d0:	f003 0301 	and.w	r3, r3, #1
   841d4:	2b00      	cmp	r3, #0
   841d6:	d0f9      	beq.n	841cc <pmc_switch_mainck_to_xtal+0x44>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   841d8:	4a06      	ldr	r2, [pc, #24]	; (841f4 <pmc_switch_mainck_to_xtal+0x6c>)
   841da:	4b06      	ldr	r3, [pc, #24]	; (841f4 <pmc_switch_mainck_to_xtal+0x6c>)
   841dc:	6a1b      	ldr	r3, [r3, #32]
   841de:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   841e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   841e6:	6213      	str	r3, [r2, #32]
	}
}
   841e8:	bf00      	nop
   841ea:	370c      	adds	r7, #12
   841ec:	46bd      	mov	sp, r7
   841ee:	bc80      	pop	{r7}
   841f0:	4770      	bx	lr
   841f2:	bf00      	nop
   841f4:	400e0600 	.word	0x400e0600
   841f8:	fec8fffc 	.word	0xfec8fffc
   841fc:	01370002 	.word	0x01370002

00084200 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
   84200:	b480      	push	{r7}
   84202:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   84204:	4b03      	ldr	r3, [pc, #12]	; (84214 <pmc_osc_is_ready_mainck+0x14>)
   84206:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   84208:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
   8420c:	4618      	mov	r0, r3
   8420e:	46bd      	mov	sp, r7
   84210:	bc80      	pop	{r7}
   84212:	4770      	bx	lr
   84214:	400e0600 	.word	0x400e0600

00084218 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
   84218:	b480      	push	{r7}
   8421a:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   8421c:	4b03      	ldr	r3, [pc, #12]	; (8422c <pmc_disable_pllack+0x14>)
   8421e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   84222:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
   84224:	bf00      	nop
   84226:	46bd      	mov	sp, r7
   84228:	bc80      	pop	{r7}
   8422a:	4770      	bx	lr
   8422c:	400e0600 	.word	0x400e0600

00084230 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
   84230:	b480      	push	{r7}
   84232:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   84234:	4b03      	ldr	r3, [pc, #12]	; (84244 <pmc_is_locked_pllack+0x14>)
   84236:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   84238:	f003 0302 	and.w	r3, r3, #2
}
   8423c:	4618      	mov	r0, r3
   8423e:	46bd      	mov	sp, r7
   84240:	bc80      	pop	{r7}
   84242:	4770      	bx	lr
   84244:	400e0600 	.word	0x400e0600

00084248 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
   84248:	b480      	push	{r7}
   8424a:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   8424c:	4b03      	ldr	r3, [pc, #12]	; (8425c <pmc_is_locked_upll+0x14>)
   8424e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   84250:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
   84254:	4618      	mov	r0, r3
   84256:	46bd      	mov	sp, r7
   84258:	bc80      	pop	{r7}
   8425a:	4770      	bx	lr
   8425c:	400e0600 	.word	0x400e0600

00084260 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
   84260:	b480      	push	{r7}
   84262:	b083      	sub	sp, #12
   84264:	af00      	add	r7, sp, #0
   84266:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
   84268:	687b      	ldr	r3, [r7, #4]
   8426a:	2b2c      	cmp	r3, #44	; 0x2c
   8426c:	d901      	bls.n	84272 <pmc_enable_periph_clk+0x12>
		return 1;
   8426e:	2301      	movs	r3, #1
   84270:	e02f      	b.n	842d2 <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
   84272:	687b      	ldr	r3, [r7, #4]
   84274:	2b1f      	cmp	r3, #31
   84276:	d813      	bhi.n	842a0 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   84278:	4b18      	ldr	r3, [pc, #96]	; (842dc <pmc_enable_periph_clk+0x7c>)
   8427a:	699a      	ldr	r2, [r3, #24]
   8427c:	2101      	movs	r1, #1
   8427e:	687b      	ldr	r3, [r7, #4]
   84280:	fa01 f303 	lsl.w	r3, r1, r3
   84284:	401a      	ands	r2, r3
   84286:	2101      	movs	r1, #1
   84288:	687b      	ldr	r3, [r7, #4]
   8428a:	fa01 f303 	lsl.w	r3, r1, r3
   8428e:	429a      	cmp	r2, r3
   84290:	d01e      	beq.n	842d0 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
   84292:	4a12      	ldr	r2, [pc, #72]	; (842dc <pmc_enable_periph_clk+0x7c>)
   84294:	2101      	movs	r1, #1
   84296:	687b      	ldr	r3, [r7, #4]
   84298:	fa01 f303 	lsl.w	r3, r1, r3
   8429c:	6113      	str	r3, [r2, #16]
   8429e:	e017      	b.n	842d0 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
	} else {
		ul_id -= 32;
   842a0:	687b      	ldr	r3, [r7, #4]
   842a2:	3b20      	subs	r3, #32
   842a4:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   842a6:	4b0d      	ldr	r3, [pc, #52]	; (842dc <pmc_enable_periph_clk+0x7c>)
   842a8:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   842ac:	2101      	movs	r1, #1
   842ae:	687b      	ldr	r3, [r7, #4]
   842b0:	fa01 f303 	lsl.w	r3, r1, r3
   842b4:	401a      	ands	r2, r3
   842b6:	2101      	movs	r1, #1
   842b8:	687b      	ldr	r3, [r7, #4]
   842ba:	fa01 f303 	lsl.w	r3, r1, r3
   842be:	429a      	cmp	r2, r3
   842c0:	d006      	beq.n	842d0 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
   842c2:	4a06      	ldr	r2, [pc, #24]	; (842dc <pmc_enable_periph_clk+0x7c>)
   842c4:	2101      	movs	r1, #1
   842c6:	687b      	ldr	r3, [r7, #4]
   842c8:	fa01 f303 	lsl.w	r3, r1, r3
   842cc:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
   842d0:	2300      	movs	r3, #0
}
   842d2:	4618      	mov	r0, r3
   842d4:	370c      	adds	r7, #12
   842d6:	46bd      	mov	sp, r7
   842d8:	bc80      	pop	{r7}
   842da:	4770      	bx	lr
   842dc:	400e0600 	.word	0x400e0600

000842e0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   842e0:	b480      	push	{r7}
   842e2:	af00      	add	r7, sp, #0
	while (1) {
	}
   842e4:	e7fe      	b.n	842e4 <Dummy_Handler+0x4>
   842e6:	bf00      	nop

000842e8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   842e8:	b580      	push	{r7, lr}
   842ea:	b082      	sub	sp, #8
   842ec:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
   842ee:	4b1e      	ldr	r3, [pc, #120]	; (84368 <Reset_Handler+0x80>)
   842f0:	607b      	str	r3, [r7, #4]
	pDest = &_srelocate;
   842f2:	4b1e      	ldr	r3, [pc, #120]	; (8436c <Reset_Handler+0x84>)
   842f4:	603b      	str	r3, [r7, #0]

	if (pSrc != pDest) {
   842f6:	687a      	ldr	r2, [r7, #4]
   842f8:	683b      	ldr	r3, [r7, #0]
   842fa:	429a      	cmp	r2, r3
   842fc:	d00c      	beq.n	84318 <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
   842fe:	e007      	b.n	84310 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
   84300:	683b      	ldr	r3, [r7, #0]
   84302:	1d1a      	adds	r2, r3, #4
   84304:	603a      	str	r2, [r7, #0]
   84306:	687a      	ldr	r2, [r7, #4]
   84308:	1d11      	adds	r1, r2, #4
   8430a:	6079      	str	r1, [r7, #4]
   8430c:	6812      	ldr	r2, [r2, #0]
   8430e:	601a      	str	r2, [r3, #0]
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   84310:	683b      	ldr	r3, [r7, #0]
   84312:	4a17      	ldr	r2, [pc, #92]	; (84370 <Reset_Handler+0x88>)
   84314:	4293      	cmp	r3, r2
   84316:	d3f3      	bcc.n	84300 <Reset_Handler+0x18>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   84318:	4b16      	ldr	r3, [pc, #88]	; (84374 <Reset_Handler+0x8c>)
   8431a:	603b      	str	r3, [r7, #0]
   8431c:	e004      	b.n	84328 <Reset_Handler+0x40>
		*pDest++ = 0;
   8431e:	683b      	ldr	r3, [r7, #0]
   84320:	1d1a      	adds	r2, r3, #4
   84322:	603a      	str	r2, [r7, #0]
   84324:	2200      	movs	r2, #0
   84326:	601a      	str	r2, [r3, #0]
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   84328:	683b      	ldr	r3, [r7, #0]
   8432a:	4a13      	ldr	r2, [pc, #76]	; (84378 <Reset_Handler+0x90>)
   8432c:	4293      	cmp	r3, r2
   8432e:	d3f6      	bcc.n	8431e <Reset_Handler+0x36>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
   84330:	4b12      	ldr	r3, [pc, #72]	; (8437c <Reset_Handler+0x94>)
   84332:	607b      	str	r3, [r7, #4]
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   84334:	4a12      	ldr	r2, [pc, #72]	; (84380 <Reset_Handler+0x98>)
   84336:	687b      	ldr	r3, [r7, #4]
   84338:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   8433c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   84340:	6093      	str	r3, [r2, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   84342:	687b      	ldr	r3, [r7, #4]
   84344:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   84348:	d309      	bcc.n	8435e <Reset_Handler+0x76>
   8434a:	687b      	ldr	r3, [r7, #4]
   8434c:	4a0d      	ldr	r2, [pc, #52]	; (84384 <Reset_Handler+0x9c>)
   8434e:	4293      	cmp	r3, r2
   84350:	d805      	bhi.n	8435e <Reset_Handler+0x76>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   84352:	4a0b      	ldr	r2, [pc, #44]	; (84380 <Reset_Handler+0x98>)
   84354:	4b0a      	ldr	r3, [pc, #40]	; (84380 <Reset_Handler+0x98>)
   84356:	689b      	ldr	r3, [r3, #8]
   84358:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   8435c:	6093      	str	r3, [r2, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   8435e:	4b0a      	ldr	r3, [pc, #40]	; (84388 <Reset_Handler+0xa0>)
   84360:	4798      	blx	r3

	/* Branch to main function */
	main();
   84362:	4b0a      	ldr	r3, [pc, #40]	; (8438c <Reset_Handler+0xa4>)
   84364:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   84366:	e7fe      	b.n	84366 <Reset_Handler+0x7e>
   84368:	00086890 	.word	0x00086890
   8436c:	20070000 	.word	0x20070000
   84370:	200709d4 	.word	0x200709d4
   84374:	200709d4 	.word	0x200709d4
   84378:	20070b58 	.word	0x20070b58
   8437c:	00080000 	.word	0x00080000
   84380:	e000ed00 	.word	0xe000ed00
   84384:	200fffff 	.word	0x200fffff
   84388:	00084b61 	.word	0x00084b61
   8438c:	000845d1 	.word	0x000845d1

00084390 <SystemCoreClockUpdate>:

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate(void)
{
   84390:	b480      	push	{r7}
   84392:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   84394:	4b57      	ldr	r3, [pc, #348]	; (844f4 <SystemCoreClockUpdate+0x164>)
   84396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   84398:	f003 0303 	and.w	r3, r3, #3
   8439c:	2b03      	cmp	r3, #3
   8439e:	f200 808a 	bhi.w	844b6 <SystemCoreClockUpdate+0x126>
   843a2:	a201      	add	r2, pc, #4	; (adr r2, 843a8 <SystemCoreClockUpdate+0x18>)
   843a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   843a8:	000843b9 	.word	0x000843b9
   843ac:	000843d9 	.word	0x000843d9
   843b0:	00084429 	.word	0x00084429
   843b4:	00084429 	.word	0x00084429
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   843b8:	4b4f      	ldr	r3, [pc, #316]	; (844f8 <SystemCoreClockUpdate+0x168>)
   843ba:	695b      	ldr	r3, [r3, #20]
   843bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
   843c0:	2b00      	cmp	r3, #0
   843c2:	d004      	beq.n	843ce <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   843c4:	4b4d      	ldr	r3, [pc, #308]	; (844fc <SystemCoreClockUpdate+0x16c>)
   843c6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   843ca:	601a      	str	r2, [r3, #0]
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
		}
		break;
   843cc:	e073      	b.n	844b6 <SystemCoreClockUpdate+0x126>
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   843ce:	4b4b      	ldr	r3, [pc, #300]	; (844fc <SystemCoreClockUpdate+0x16c>)
   843d0:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
   843d4:	601a      	str	r2, [r3, #0]
		}
		break;
   843d6:	e06e      	b.n	844b6 <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   843d8:	4b46      	ldr	r3, [pc, #280]	; (844f4 <SystemCoreClockUpdate+0x164>)
   843da:	6a1b      	ldr	r3, [r3, #32]
   843dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   843e0:	2b00      	cmp	r3, #0
   843e2:	d003      	beq.n	843ec <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   843e4:	4b45      	ldr	r3, [pc, #276]	; (844fc <SystemCoreClockUpdate+0x16c>)
   843e6:	4a46      	ldr	r2, [pc, #280]	; (84500 <SystemCoreClockUpdate+0x170>)
   843e8:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		break;
   843ea:	e064      	b.n	844b6 <SystemCoreClockUpdate+0x126>
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   843ec:	4b43      	ldr	r3, [pc, #268]	; (844fc <SystemCoreClockUpdate+0x16c>)
   843ee:	4a45      	ldr	r2, [pc, #276]	; (84504 <SystemCoreClockUpdate+0x174>)
   843f0:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   843f2:	4b40      	ldr	r3, [pc, #256]	; (844f4 <SystemCoreClockUpdate+0x164>)
   843f4:	6a1b      	ldr	r3, [r3, #32]
   843f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
   843fa:	2b10      	cmp	r3, #16
   843fc:	d004      	beq.n	84408 <SystemCoreClockUpdate+0x78>
   843fe:	2b20      	cmp	r3, #32
   84400:	d008      	beq.n	84414 <SystemCoreClockUpdate+0x84>
   84402:	2b00      	cmp	r3, #0
   84404:	d00e      	beq.n	84424 <SystemCoreClockUpdate+0x94>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   84406:	e00e      	b.n	84426 <SystemCoreClockUpdate+0x96>

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   84408:	4b3c      	ldr	r3, [pc, #240]	; (844fc <SystemCoreClockUpdate+0x16c>)
   8440a:	681b      	ldr	r3, [r3, #0]
   8440c:	005b      	lsls	r3, r3, #1
   8440e:	4a3b      	ldr	r2, [pc, #236]	; (844fc <SystemCoreClockUpdate+0x16c>)
   84410:	6013      	str	r3, [r2, #0]
				break;
   84412:	e008      	b.n	84426 <SystemCoreClockUpdate+0x96>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   84414:	4b39      	ldr	r3, [pc, #228]	; (844fc <SystemCoreClockUpdate+0x16c>)
   84416:	681a      	ldr	r2, [r3, #0]
   84418:	4613      	mov	r3, r2
   8441a:	005b      	lsls	r3, r3, #1
   8441c:	4413      	add	r3, r2
   8441e:	4a37      	ldr	r2, [pc, #220]	; (844fc <SystemCoreClockUpdate+0x16c>)
   84420:	6013      	str	r3, [r2, #0]
				break;
   84422:	e000      	b.n	84426 <SystemCoreClockUpdate+0x96>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
   84424:	bf00      	nop
				break;
			default:
				break;
			}
		}
		break;
   84426:	e046      	b.n	844b6 <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   84428:	4b32      	ldr	r3, [pc, #200]	; (844f4 <SystemCoreClockUpdate+0x164>)
   8442a:	6a1b      	ldr	r3, [r3, #32]
   8442c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   84430:	2b00      	cmp	r3, #0
   84432:	d003      	beq.n	8443c <SystemCoreClockUpdate+0xac>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   84434:	4b31      	ldr	r3, [pc, #196]	; (844fc <SystemCoreClockUpdate+0x16c>)
   84436:	4a32      	ldr	r2, [pc, #200]	; (84500 <SystemCoreClockUpdate+0x170>)
   84438:	601a      	str	r2, [r3, #0]
   8443a:	e01c      	b.n	84476 <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   8443c:	4b2f      	ldr	r3, [pc, #188]	; (844fc <SystemCoreClockUpdate+0x16c>)
   8443e:	4a31      	ldr	r2, [pc, #196]	; (84504 <SystemCoreClockUpdate+0x174>)
   84440:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   84442:	4b2c      	ldr	r3, [pc, #176]	; (844f4 <SystemCoreClockUpdate+0x164>)
   84444:	6a1b      	ldr	r3, [r3, #32]
   84446:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8444a:	2b10      	cmp	r3, #16
   8444c:	d004      	beq.n	84458 <SystemCoreClockUpdate+0xc8>
   8444e:	2b20      	cmp	r3, #32
   84450:	d008      	beq.n	84464 <SystemCoreClockUpdate+0xd4>
   84452:	2b00      	cmp	r3, #0
   84454:	d00e      	beq.n	84474 <SystemCoreClockUpdate+0xe4>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   84456:	e00e      	b.n	84476 <SystemCoreClockUpdate+0xe6>

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   84458:	4b28      	ldr	r3, [pc, #160]	; (844fc <SystemCoreClockUpdate+0x16c>)
   8445a:	681b      	ldr	r3, [r3, #0]
   8445c:	005b      	lsls	r3, r3, #1
   8445e:	4a27      	ldr	r2, [pc, #156]	; (844fc <SystemCoreClockUpdate+0x16c>)
   84460:	6013      	str	r3, [r2, #0]
				break;
   84462:	e008      	b.n	84476 <SystemCoreClockUpdate+0xe6>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   84464:	4b25      	ldr	r3, [pc, #148]	; (844fc <SystemCoreClockUpdate+0x16c>)
   84466:	681a      	ldr	r2, [r3, #0]
   84468:	4613      	mov	r3, r2
   8446a:	005b      	lsls	r3, r3, #1
   8446c:	4413      	add	r3, r2
   8446e:	4a23      	ldr	r2, [pc, #140]	; (844fc <SystemCoreClockUpdate+0x16c>)
   84470:	6013      	str	r3, [r2, #0]
				break;
   84472:	e000      	b.n	84476 <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
   84474:	bf00      	nop
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   84476:	4b1f      	ldr	r3, [pc, #124]	; (844f4 <SystemCoreClockUpdate+0x164>)
   84478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8447a:	f003 0303 	and.w	r3, r3, #3
   8447e:	2b02      	cmp	r3, #2
   84480:	d115      	bne.n	844ae <SystemCoreClockUpdate+0x11e>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   84482:	4b1c      	ldr	r3, [pc, #112]	; (844f4 <SystemCoreClockUpdate+0x164>)
   84484:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   84486:	4b20      	ldr	r3, [pc, #128]	; (84508 <SystemCoreClockUpdate+0x178>)
   84488:	4013      	ands	r3, r2
   8448a:	0c1b      	lsrs	r3, r3, #16
				                            CKGR_PLLAR_MULA_Pos) + 1U);
   8448c:	3301      	adds	r3, #1
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   8448e:	4a1b      	ldr	r2, [pc, #108]	; (844fc <SystemCoreClockUpdate+0x16c>)
   84490:	6812      	ldr	r2, [r2, #0]
   84492:	fb02 f303 	mul.w	r3, r2, r3
   84496:	4a19      	ldr	r2, [pc, #100]	; (844fc <SystemCoreClockUpdate+0x16c>)
   84498:	6013      	str	r3, [r2, #0]
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   8449a:	4b16      	ldr	r3, [pc, #88]	; (844f4 <SystemCoreClockUpdate+0x164>)
   8449c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   8449e:	b2db      	uxtb	r3, r3
   844a0:	4a16      	ldr	r2, [pc, #88]	; (844fc <SystemCoreClockUpdate+0x16c>)
   844a2:	6812      	ldr	r2, [r2, #0]
   844a4:	fbb2 f3f3 	udiv	r3, r2, r3
   844a8:	4a14      	ldr	r2, [pc, #80]	; (844fc <SystemCoreClockUpdate+0x16c>)
   844aa:	6013      	str	r3, [r2, #0]
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
   844ac:	e002      	b.n	844b4 <SystemCoreClockUpdate+0x124>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   844ae:	4b13      	ldr	r3, [pc, #76]	; (844fc <SystemCoreClockUpdate+0x16c>)
   844b0:	4a16      	ldr	r2, [pc, #88]	; (8450c <SystemCoreClockUpdate+0x17c>)
   844b2:	601a      	str	r2, [r3, #0]
		}
		break;
   844b4:	bf00      	nop
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   844b6:	4b0f      	ldr	r3, [pc, #60]	; (844f4 <SystemCoreClockUpdate+0x164>)
   844b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   844ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
   844be:	2b70      	cmp	r3, #112	; 0x70
   844c0:	d108      	bne.n	844d4 <SystemCoreClockUpdate+0x144>
		SystemCoreClock /= 3U;
   844c2:	4b0e      	ldr	r3, [pc, #56]	; (844fc <SystemCoreClockUpdate+0x16c>)
   844c4:	681b      	ldr	r3, [r3, #0]
   844c6:	4a12      	ldr	r2, [pc, #72]	; (84510 <SystemCoreClockUpdate+0x180>)
   844c8:	fba2 2303 	umull	r2, r3, r2, r3
   844cc:	085b      	lsrs	r3, r3, #1
   844ce:	4a0b      	ldr	r2, [pc, #44]	; (844fc <SystemCoreClockUpdate+0x16c>)
   844d0:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
			                          PMC_MCKR_PRES_Pos);
	}
}
   844d2:	e00a      	b.n	844ea <SystemCoreClockUpdate+0x15a>
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   844d4:	4b07      	ldr	r3, [pc, #28]	; (844f4 <SystemCoreClockUpdate+0x164>)
   844d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   844d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
   844dc:	091b      	lsrs	r3, r3, #4
   844de:	4a07      	ldr	r2, [pc, #28]	; (844fc <SystemCoreClockUpdate+0x16c>)
   844e0:	6812      	ldr	r2, [r2, #0]
   844e2:	fa22 f303 	lsr.w	r3, r2, r3
   844e6:	4a05      	ldr	r2, [pc, #20]	; (844fc <SystemCoreClockUpdate+0x16c>)
   844e8:	6013      	str	r3, [r2, #0]
			                          PMC_MCKR_PRES_Pos);
	}
}
   844ea:	bf00      	nop
   844ec:	46bd      	mov	sp, r7
   844ee:	bc80      	pop	{r7}
   844f0:	4770      	bx	lr
   844f2:	bf00      	nop
   844f4:	400e0600 	.word	0x400e0600
   844f8:	400e1a10 	.word	0x400e1a10
   844fc:	20070190 	.word	0x20070190
   84500:	00b71b00 	.word	0x00b71b00
   84504:	003d0900 	.word	0x003d0900
   84508:	07ff0000 	.word	0x07ff0000
   8450c:	0e4e1c00 	.word	0x0e4e1c00
   84510:	aaaaaaab 	.word	0xaaaaaaab

00084514 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   84514:	b480      	push	{r7}
   84516:	b085      	sub	sp, #20
   84518:	af00      	add	r7, sp, #0
   8451a:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
   8451c:	4b10      	ldr	r3, [pc, #64]	; (84560 <_sbrk+0x4c>)
   8451e:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
   84520:	4b10      	ldr	r3, [pc, #64]	; (84564 <_sbrk+0x50>)
   84522:	681b      	ldr	r3, [r3, #0]
   84524:	2b00      	cmp	r3, #0
   84526:	d102      	bne.n	8452e <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
   84528:	4b0e      	ldr	r3, [pc, #56]	; (84564 <_sbrk+0x50>)
   8452a:	4a0f      	ldr	r2, [pc, #60]	; (84568 <_sbrk+0x54>)
   8452c:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   8452e:	4b0d      	ldr	r3, [pc, #52]	; (84564 <_sbrk+0x50>)
   84530:	681b      	ldr	r3, [r3, #0]
   84532:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
   84534:	68ba      	ldr	r2, [r7, #8]
   84536:	687b      	ldr	r3, [r7, #4]
   84538:	441a      	add	r2, r3
   8453a:	68fb      	ldr	r3, [r7, #12]
   8453c:	429a      	cmp	r2, r3
   8453e:	dd02      	ble.n	84546 <_sbrk+0x32>
		return (caddr_t) -1;	
   84540:	f04f 33ff 	mov.w	r3, #4294967295
   84544:	e006      	b.n	84554 <_sbrk+0x40>
	}

	heap += incr;
   84546:	4b07      	ldr	r3, [pc, #28]	; (84564 <_sbrk+0x50>)
   84548:	681a      	ldr	r2, [r3, #0]
   8454a:	687b      	ldr	r3, [r7, #4]
   8454c:	4413      	add	r3, r2
   8454e:	4a05      	ldr	r2, [pc, #20]	; (84564 <_sbrk+0x50>)
   84550:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
   84552:	68bb      	ldr	r3, [r7, #8]
}
   84554:	4618      	mov	r0, r3
   84556:	3714      	adds	r7, #20
   84558:	46bd      	mov	sp, r7
   8455a:	bc80      	pop	{r7}
   8455c:	4770      	bx	lr
   8455e:	bf00      	nop
   84560:	20087ffc 	.word	0x20087ffc
   84564:	20070a7c 	.word	0x20070a7c
   84568:	20072b58 	.word	0x20072b58

0008456c <_close>:
{
	return -1;
}

extern int _close(int file)
{
   8456c:	b480      	push	{r7}
   8456e:	b083      	sub	sp, #12
   84570:	af00      	add	r7, sp, #0
   84572:	6078      	str	r0, [r7, #4]
	return -1;
   84574:	f04f 33ff 	mov.w	r3, #4294967295
}
   84578:	4618      	mov	r0, r3
   8457a:	370c      	adds	r7, #12
   8457c:	46bd      	mov	sp, r7
   8457e:	bc80      	pop	{r7}
   84580:	4770      	bx	lr
   84582:	bf00      	nop

00084584 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
   84584:	b480      	push	{r7}
   84586:	b083      	sub	sp, #12
   84588:	af00      	add	r7, sp, #0
   8458a:	6078      	str	r0, [r7, #4]
   8458c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
   8458e:	683b      	ldr	r3, [r7, #0]
   84590:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   84594:	605a      	str	r2, [r3, #4]

	return 0;
   84596:	2300      	movs	r3, #0
}
   84598:	4618      	mov	r0, r3
   8459a:	370c      	adds	r7, #12
   8459c:	46bd      	mov	sp, r7
   8459e:	bc80      	pop	{r7}
   845a0:	4770      	bx	lr
   845a2:	bf00      	nop

000845a4 <_isatty>:

extern int _isatty(int file)
{
   845a4:	b480      	push	{r7}
   845a6:	b083      	sub	sp, #12
   845a8:	af00      	add	r7, sp, #0
   845aa:	6078      	str	r0, [r7, #4]
	return 1;
   845ac:	2301      	movs	r3, #1
}
   845ae:	4618      	mov	r0, r3
   845b0:	370c      	adds	r7, #12
   845b2:	46bd      	mov	sp, r7
   845b4:	bc80      	pop	{r7}
   845b6:	4770      	bx	lr

000845b8 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
   845b8:	b480      	push	{r7}
   845ba:	b085      	sub	sp, #20
   845bc:	af00      	add	r7, sp, #0
   845be:	60f8      	str	r0, [r7, #12]
   845c0:	60b9      	str	r1, [r7, #8]
   845c2:	607a      	str	r2, [r7, #4]
	return 0;
   845c4:	2300      	movs	r3, #0
}
   845c6:	4618      	mov	r0, r3
   845c8:	3714      	adds	r7, #20
   845ca:	46bd      	mov	sp, r7
   845cc:	bc80      	pop	{r7}
   845ce:	4770      	bx	lr

000845d0 <main>:
extern void SV_get_sensor_data(SV_Sensor_status_type* sensor_struct);
extern bool SV_put_sensor_data(SV_Sensor_status_type* sensor_struct);

SV_Sensor_status_type volatile sensor_data, g_sensor_data;

int main (void){
   845d0:	b580      	push	{r7, lr}
   845d2:	b082      	sub	sp, #8
   845d4:	af00      	add	r7, sp, #0
	/* Insert system clock initialization code here (sysclk_init()). */
	
   
	board_init();
   845d6:	4b1b      	ldr	r3, [pc, #108]	; (84644 <main+0x74>)
   845d8:	4798      	blx	r3
	SV_SYSTEM_INIT(); 
   845da:	4b1b      	ldr	r3, [pc, #108]	; (84648 <main+0x78>)
   845dc:	4798      	blx	r3
	/* Insert application code here, after the board has been initialized. */
	uint32_t count = 0;
   845de:	2300      	movs	r3, #0
   845e0:	603b      	str	r3, [r7, #0]
	while(FOREVER) {	
	for(int i=0;i<10;i++) {}
   845e2:	2300      	movs	r3, #0
   845e4:	607b      	str	r3, [r7, #4]
   845e6:	e002      	b.n	845ee <main+0x1e>
   845e8:	687b      	ldr	r3, [r7, #4]
   845ea:	3301      	adds	r3, #1
   845ec:	607b      	str	r3, [r7, #4]
   845ee:	687b      	ldr	r3, [r7, #4]
   845f0:	2b09      	cmp	r3, #9
   845f2:	ddf9      	ble.n	845e8 <main+0x18>
		SV_get_sensor_data(&sensor_data);
   845f4:	4815      	ldr	r0, [pc, #84]	; (8464c <main+0x7c>)
   845f6:	4b16      	ldr	r3, [pc, #88]	; (84650 <main+0x80>)
   845f8:	4798      	blx	r3
// 		sensor_data.CS3status = g_sensor_data.CS3status;
// 		sensor_data.Temp2status = g_sensor_data.Temp2status ;

//		g_sensor_data.CS3status = (g_sensor_data.CS3status *9 + sensor_data.CS3status)/10;         // Gopal: this and next line should be uncommented for new sensor hardware as DAC1 is CS3
//		sensor_data.CS3status = g_sensor_data.CS3status;
		g_sensor_data.DAC1status = (g_sensor_data.DAC1status *9 + sensor_data.DAC1status)/10;     // Gopal: this and next line shd be commented for new sensor hardware as CS3 is final conductivity
   845fa:	4b16      	ldr	r3, [pc, #88]	; (84654 <main+0x84>)
   845fc:	8b5b      	ldrh	r3, [r3, #26]
   845fe:	b29b      	uxth	r3, r3
   84600:	461a      	mov	r2, r3
   84602:	4613      	mov	r3, r2
   84604:	00db      	lsls	r3, r3, #3
   84606:	4413      	add	r3, r2
   84608:	4a10      	ldr	r2, [pc, #64]	; (8464c <main+0x7c>)
   8460a:	8b52      	ldrh	r2, [r2, #26]
   8460c:	b292      	uxth	r2, r2
   8460e:	4413      	add	r3, r2
   84610:	4a11      	ldr	r2, [pc, #68]	; (84658 <main+0x88>)
   84612:	fb82 1203 	smull	r1, r2, r2, r3
   84616:	1092      	asrs	r2, r2, #2
   84618:	17db      	asrs	r3, r3, #31
   8461a:	1ad3      	subs	r3, r2, r3
   8461c:	b29a      	uxth	r2, r3
   8461e:	4b0d      	ldr	r3, [pc, #52]	; (84654 <main+0x84>)
   84620:	835a      	strh	r2, [r3, #26]
		sensor_data.CS3status = g_sensor_data.DAC1status;
   84622:	4b0c      	ldr	r3, [pc, #48]	; (84654 <main+0x84>)
   84624:	8b5b      	ldrh	r3, [r3, #26]
   84626:	b29a      	uxth	r2, r3
   84628:	4b08      	ldr	r3, [pc, #32]	; (8464c <main+0x7c>)
   8462a:	831a      	strh	r2, [r3, #24]
		
		if(master_requested_sensor_data==1) 	
   8462c:	4b0b      	ldr	r3, [pc, #44]	; (8465c <main+0x8c>)
   8462e:	781b      	ldrb	r3, [r3, #0]
   84630:	b2db      	uxtb	r3, r3
   84632:	2b00      	cmp	r3, #0
   84634:	d0d5      	beq.n	845e2 <main+0x12>
		{			
				

			 SV_put_sensor_data(&sensor_data);			
   84636:	4805      	ldr	r0, [pc, #20]	; (8464c <main+0x7c>)
   84638:	4b09      	ldr	r3, [pc, #36]	; (84660 <main+0x90>)
   8463a:	4798      	blx	r3
			master_requested_sensor_data=0;
   8463c:	4b07      	ldr	r3, [pc, #28]	; (8465c <main+0x8c>)
   8463e:	2200      	movs	r2, #0
   84640:	701a      	strb	r2, [r3, #0]
		}	
	   
	}
   84642:	e7ce      	b.n	845e2 <main+0x12>
   84644:	00083b8d 	.word	0x00083b8d
   84648:	00082fb5 	.word	0x00082fb5
   8464c:	20070b0c 	.word	0x20070b0c
   84650:	00082cfd 	.word	0x00082cfd
   84654:	20070b30 	.word	0x20070b30
   84658:	66666667 	.word	0x66666667
   8465c:	200709f4 	.word	0x200709f4
   84660:	00082af1 	.word	0x00082af1

00084664 <__aeabi_frsub>:
   84664:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   84668:	e002      	b.n	84670 <__addsf3>
   8466a:	bf00      	nop

0008466c <__aeabi_fsub>:
   8466c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00084670 <__addsf3>:
   84670:	0042      	lsls	r2, r0, #1
   84672:	bf1f      	itttt	ne
   84674:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   84678:	ea92 0f03 	teqne	r2, r3
   8467c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   84680:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   84684:	d06a      	beq.n	8475c <__addsf3+0xec>
   84686:	ea4f 6212 	mov.w	r2, r2, lsr #24
   8468a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   8468e:	bfc1      	itttt	gt
   84690:	18d2      	addgt	r2, r2, r3
   84692:	4041      	eorgt	r1, r0
   84694:	4048      	eorgt	r0, r1
   84696:	4041      	eorgt	r1, r0
   84698:	bfb8      	it	lt
   8469a:	425b      	neglt	r3, r3
   8469c:	2b19      	cmp	r3, #25
   8469e:	bf88      	it	hi
   846a0:	4770      	bxhi	lr
   846a2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   846a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   846aa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   846ae:	bf18      	it	ne
   846b0:	4240      	negne	r0, r0
   846b2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   846b6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   846ba:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   846be:	bf18      	it	ne
   846c0:	4249      	negne	r1, r1
   846c2:	ea92 0f03 	teq	r2, r3
   846c6:	d03f      	beq.n	84748 <__addsf3+0xd8>
   846c8:	f1a2 0201 	sub.w	r2, r2, #1
   846cc:	fa41 fc03 	asr.w	ip, r1, r3
   846d0:	eb10 000c 	adds.w	r0, r0, ip
   846d4:	f1c3 0320 	rsb	r3, r3, #32
   846d8:	fa01 f103 	lsl.w	r1, r1, r3
   846dc:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   846e0:	d502      	bpl.n	846e8 <__addsf3+0x78>
   846e2:	4249      	negs	r1, r1
   846e4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   846e8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   846ec:	d313      	bcc.n	84716 <__addsf3+0xa6>
   846ee:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   846f2:	d306      	bcc.n	84702 <__addsf3+0x92>
   846f4:	0840      	lsrs	r0, r0, #1
   846f6:	ea4f 0131 	mov.w	r1, r1, rrx
   846fa:	f102 0201 	add.w	r2, r2, #1
   846fe:	2afe      	cmp	r2, #254	; 0xfe
   84700:	d251      	bcs.n	847a6 <__addsf3+0x136>
   84702:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   84706:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   8470a:	bf08      	it	eq
   8470c:	f020 0001 	biceq.w	r0, r0, #1
   84710:	ea40 0003 	orr.w	r0, r0, r3
   84714:	4770      	bx	lr
   84716:	0049      	lsls	r1, r1, #1
   84718:	eb40 0000 	adc.w	r0, r0, r0
   8471c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
   84720:	f1a2 0201 	sub.w	r2, r2, #1
   84724:	d1ed      	bne.n	84702 <__addsf3+0x92>
   84726:	fab0 fc80 	clz	ip, r0
   8472a:	f1ac 0c08 	sub.w	ip, ip, #8
   8472e:	ebb2 020c 	subs.w	r2, r2, ip
   84732:	fa00 f00c 	lsl.w	r0, r0, ip
   84736:	bfaa      	itet	ge
   84738:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   8473c:	4252      	neglt	r2, r2
   8473e:	4318      	orrge	r0, r3
   84740:	bfbc      	itt	lt
   84742:	40d0      	lsrlt	r0, r2
   84744:	4318      	orrlt	r0, r3
   84746:	4770      	bx	lr
   84748:	f092 0f00 	teq	r2, #0
   8474c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   84750:	bf06      	itte	eq
   84752:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   84756:	3201      	addeq	r2, #1
   84758:	3b01      	subne	r3, #1
   8475a:	e7b5      	b.n	846c8 <__addsf3+0x58>
   8475c:	ea4f 0341 	mov.w	r3, r1, lsl #1
   84760:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   84764:	bf18      	it	ne
   84766:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   8476a:	d021      	beq.n	847b0 <__addsf3+0x140>
   8476c:	ea92 0f03 	teq	r2, r3
   84770:	d004      	beq.n	8477c <__addsf3+0x10c>
   84772:	f092 0f00 	teq	r2, #0
   84776:	bf08      	it	eq
   84778:	4608      	moveq	r0, r1
   8477a:	4770      	bx	lr
   8477c:	ea90 0f01 	teq	r0, r1
   84780:	bf1c      	itt	ne
   84782:	2000      	movne	r0, #0
   84784:	4770      	bxne	lr
   84786:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   8478a:	d104      	bne.n	84796 <__addsf3+0x126>
   8478c:	0040      	lsls	r0, r0, #1
   8478e:	bf28      	it	cs
   84790:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   84794:	4770      	bx	lr
   84796:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   8479a:	bf3c      	itt	cc
   8479c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   847a0:	4770      	bxcc	lr
   847a2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   847a6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   847aa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   847ae:	4770      	bx	lr
   847b0:	ea7f 6222 	mvns.w	r2, r2, asr #24
   847b4:	bf16      	itet	ne
   847b6:	4608      	movne	r0, r1
   847b8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   847bc:	4601      	movne	r1, r0
   847be:	0242      	lsls	r2, r0, #9
   847c0:	bf06      	itte	eq
   847c2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   847c6:	ea90 0f01 	teqeq	r0, r1
   847ca:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   847ce:	4770      	bx	lr

000847d0 <__aeabi_ui2f>:
   847d0:	f04f 0300 	mov.w	r3, #0
   847d4:	e004      	b.n	847e0 <__aeabi_i2f+0x8>
   847d6:	bf00      	nop

000847d8 <__aeabi_i2f>:
   847d8:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   847dc:	bf48      	it	mi
   847de:	4240      	negmi	r0, r0
   847e0:	ea5f 0c00 	movs.w	ip, r0
   847e4:	bf08      	it	eq
   847e6:	4770      	bxeq	lr
   847e8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   847ec:	4601      	mov	r1, r0
   847ee:	f04f 0000 	mov.w	r0, #0
   847f2:	e01c      	b.n	8482e <__aeabi_l2f+0x2a>

000847f4 <__aeabi_ul2f>:
   847f4:	ea50 0201 	orrs.w	r2, r0, r1
   847f8:	bf08      	it	eq
   847fa:	4770      	bxeq	lr
   847fc:	f04f 0300 	mov.w	r3, #0
   84800:	e00a      	b.n	84818 <__aeabi_l2f+0x14>
   84802:	bf00      	nop

00084804 <__aeabi_l2f>:
   84804:	ea50 0201 	orrs.w	r2, r0, r1
   84808:	bf08      	it	eq
   8480a:	4770      	bxeq	lr
   8480c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   84810:	d502      	bpl.n	84818 <__aeabi_l2f+0x14>
   84812:	4240      	negs	r0, r0
   84814:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   84818:	ea5f 0c01 	movs.w	ip, r1
   8481c:	bf02      	ittt	eq
   8481e:	4684      	moveq	ip, r0
   84820:	4601      	moveq	r1, r0
   84822:	2000      	moveq	r0, #0
   84824:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   84828:	bf08      	it	eq
   8482a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   8482e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   84832:	fabc f28c 	clz	r2, ip
   84836:	3a08      	subs	r2, #8
   84838:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   8483c:	db10      	blt.n	84860 <__aeabi_l2f+0x5c>
   8483e:	fa01 fc02 	lsl.w	ip, r1, r2
   84842:	4463      	add	r3, ip
   84844:	fa00 fc02 	lsl.w	ip, r0, r2
   84848:	f1c2 0220 	rsb	r2, r2, #32
   8484c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   84850:	fa20 f202 	lsr.w	r2, r0, r2
   84854:	eb43 0002 	adc.w	r0, r3, r2
   84858:	bf08      	it	eq
   8485a:	f020 0001 	biceq.w	r0, r0, #1
   8485e:	4770      	bx	lr
   84860:	f102 0220 	add.w	r2, r2, #32
   84864:	fa01 fc02 	lsl.w	ip, r1, r2
   84868:	f1c2 0220 	rsb	r2, r2, #32
   8486c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   84870:	fa21 f202 	lsr.w	r2, r1, r2
   84874:	eb43 0002 	adc.w	r0, r3, r2
   84878:	bf08      	it	eq
   8487a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   8487e:	4770      	bx	lr

00084880 <__aeabi_fmul>:
   84880:	f04f 0cff 	mov.w	ip, #255	; 0xff
   84884:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   84888:	bf1e      	ittt	ne
   8488a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   8488e:	ea92 0f0c 	teqne	r2, ip
   84892:	ea93 0f0c 	teqne	r3, ip
   84896:	d06f      	beq.n	84978 <__aeabi_fmul+0xf8>
   84898:	441a      	add	r2, r3
   8489a:	ea80 0c01 	eor.w	ip, r0, r1
   8489e:	0240      	lsls	r0, r0, #9
   848a0:	bf18      	it	ne
   848a2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
   848a6:	d01e      	beq.n	848e6 <__aeabi_fmul+0x66>
   848a8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   848ac:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
   848b0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
   848b4:	fba0 3101 	umull	r3, r1, r0, r1
   848b8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   848bc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
   848c0:	bf3e      	ittt	cc
   848c2:	0049      	lslcc	r1, r1, #1
   848c4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
   848c8:	005b      	lslcc	r3, r3, #1
   848ca:	ea40 0001 	orr.w	r0, r0, r1
   848ce:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
   848d2:	2afd      	cmp	r2, #253	; 0xfd
   848d4:	d81d      	bhi.n	84912 <__aeabi_fmul+0x92>
   848d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   848da:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   848de:	bf08      	it	eq
   848e0:	f020 0001 	biceq.w	r0, r0, #1
   848e4:	4770      	bx	lr
   848e6:	f090 0f00 	teq	r0, #0
   848ea:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   848ee:	bf08      	it	eq
   848f0:	0249      	lsleq	r1, r1, #9
   848f2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   848f6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
   848fa:	3a7f      	subs	r2, #127	; 0x7f
   848fc:	bfc2      	ittt	gt
   848fe:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   84902:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   84906:	4770      	bxgt	lr
   84908:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   8490c:	f04f 0300 	mov.w	r3, #0
   84910:	3a01      	subs	r2, #1
   84912:	dc5d      	bgt.n	849d0 <__aeabi_fmul+0x150>
   84914:	f112 0f19 	cmn.w	r2, #25
   84918:	bfdc      	itt	le
   8491a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
   8491e:	4770      	bxle	lr
   84920:	f1c2 0200 	rsb	r2, r2, #0
   84924:	0041      	lsls	r1, r0, #1
   84926:	fa21 f102 	lsr.w	r1, r1, r2
   8492a:	f1c2 0220 	rsb	r2, r2, #32
   8492e:	fa00 fc02 	lsl.w	ip, r0, r2
   84932:	ea5f 0031 	movs.w	r0, r1, rrx
   84936:	f140 0000 	adc.w	r0, r0, #0
   8493a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
   8493e:	bf08      	it	eq
   84940:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   84944:	4770      	bx	lr
   84946:	f092 0f00 	teq	r2, #0
   8494a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   8494e:	bf02      	ittt	eq
   84950:	0040      	lsleq	r0, r0, #1
   84952:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   84956:	3a01      	subeq	r2, #1
   84958:	d0f9      	beq.n	8494e <__aeabi_fmul+0xce>
   8495a:	ea40 000c 	orr.w	r0, r0, ip
   8495e:	f093 0f00 	teq	r3, #0
   84962:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   84966:	bf02      	ittt	eq
   84968:	0049      	lsleq	r1, r1, #1
   8496a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   8496e:	3b01      	subeq	r3, #1
   84970:	d0f9      	beq.n	84966 <__aeabi_fmul+0xe6>
   84972:	ea41 010c 	orr.w	r1, r1, ip
   84976:	e78f      	b.n	84898 <__aeabi_fmul+0x18>
   84978:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   8497c:	ea92 0f0c 	teq	r2, ip
   84980:	bf18      	it	ne
   84982:	ea93 0f0c 	teqne	r3, ip
   84986:	d00a      	beq.n	8499e <__aeabi_fmul+0x11e>
   84988:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   8498c:	bf18      	it	ne
   8498e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   84992:	d1d8      	bne.n	84946 <__aeabi_fmul+0xc6>
   84994:	ea80 0001 	eor.w	r0, r0, r1
   84998:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   8499c:	4770      	bx	lr
   8499e:	f090 0f00 	teq	r0, #0
   849a2:	bf17      	itett	ne
   849a4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
   849a8:	4608      	moveq	r0, r1
   849aa:	f091 0f00 	teqne	r1, #0
   849ae:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
   849b2:	d014      	beq.n	849de <__aeabi_fmul+0x15e>
   849b4:	ea92 0f0c 	teq	r2, ip
   849b8:	d101      	bne.n	849be <__aeabi_fmul+0x13e>
   849ba:	0242      	lsls	r2, r0, #9
   849bc:	d10f      	bne.n	849de <__aeabi_fmul+0x15e>
   849be:	ea93 0f0c 	teq	r3, ip
   849c2:	d103      	bne.n	849cc <__aeabi_fmul+0x14c>
   849c4:	024b      	lsls	r3, r1, #9
   849c6:	bf18      	it	ne
   849c8:	4608      	movne	r0, r1
   849ca:	d108      	bne.n	849de <__aeabi_fmul+0x15e>
   849cc:	ea80 0001 	eor.w	r0, r0, r1
   849d0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
   849d4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   849d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   849dc:	4770      	bx	lr
   849de:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   849e2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
   849e6:	4770      	bx	lr

000849e8 <__aeabi_fdiv>:
   849e8:	f04f 0cff 	mov.w	ip, #255	; 0xff
   849ec:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
   849f0:	bf1e      	ittt	ne
   849f2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
   849f6:	ea92 0f0c 	teqne	r2, ip
   849fa:	ea93 0f0c 	teqne	r3, ip
   849fe:	d069      	beq.n	84ad4 <__aeabi_fdiv+0xec>
   84a00:	eba2 0203 	sub.w	r2, r2, r3
   84a04:	ea80 0c01 	eor.w	ip, r0, r1
   84a08:	0249      	lsls	r1, r1, #9
   84a0a:	ea4f 2040 	mov.w	r0, r0, lsl #9
   84a0e:	d037      	beq.n	84a80 <__aeabi_fdiv+0x98>
   84a10:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   84a14:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
   84a18:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
   84a1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
   84a20:	428b      	cmp	r3, r1
   84a22:	bf38      	it	cc
   84a24:	005b      	lslcc	r3, r3, #1
   84a26:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
   84a2a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
   84a2e:	428b      	cmp	r3, r1
   84a30:	bf24      	itt	cs
   84a32:	1a5b      	subcs	r3, r3, r1
   84a34:	ea40 000c 	orrcs.w	r0, r0, ip
   84a38:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
   84a3c:	bf24      	itt	cs
   84a3e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
   84a42:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   84a46:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
   84a4a:	bf24      	itt	cs
   84a4c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
   84a50:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   84a54:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   84a58:	bf24      	itt	cs
   84a5a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
   84a5e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   84a62:	011b      	lsls	r3, r3, #4
   84a64:	bf18      	it	ne
   84a66:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
   84a6a:	d1e0      	bne.n	84a2e <__aeabi_fdiv+0x46>
   84a6c:	2afd      	cmp	r2, #253	; 0xfd
   84a6e:	f63f af50 	bhi.w	84912 <__aeabi_fmul+0x92>
   84a72:	428b      	cmp	r3, r1
   84a74:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   84a78:	bf08      	it	eq
   84a7a:	f020 0001 	biceq.w	r0, r0, #1
   84a7e:	4770      	bx	lr
   84a80:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
   84a84:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
   84a88:	327f      	adds	r2, #127	; 0x7f
   84a8a:	bfc2      	ittt	gt
   84a8c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
   84a90:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
   84a94:	4770      	bxgt	lr
   84a96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   84a9a:	f04f 0300 	mov.w	r3, #0
   84a9e:	3a01      	subs	r2, #1
   84aa0:	e737      	b.n	84912 <__aeabi_fmul+0x92>
   84aa2:	f092 0f00 	teq	r2, #0
   84aa6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
   84aaa:	bf02      	ittt	eq
   84aac:	0040      	lsleq	r0, r0, #1
   84aae:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
   84ab2:	3a01      	subeq	r2, #1
   84ab4:	d0f9      	beq.n	84aaa <__aeabi_fdiv+0xc2>
   84ab6:	ea40 000c 	orr.w	r0, r0, ip
   84aba:	f093 0f00 	teq	r3, #0
   84abe:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   84ac2:	bf02      	ittt	eq
   84ac4:	0049      	lsleq	r1, r1, #1
   84ac6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
   84aca:	3b01      	subeq	r3, #1
   84acc:	d0f9      	beq.n	84ac2 <__aeabi_fdiv+0xda>
   84ace:	ea41 010c 	orr.w	r1, r1, ip
   84ad2:	e795      	b.n	84a00 <__aeabi_fdiv+0x18>
   84ad4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
   84ad8:	ea92 0f0c 	teq	r2, ip
   84adc:	d108      	bne.n	84af0 <__aeabi_fdiv+0x108>
   84ade:	0242      	lsls	r2, r0, #9
   84ae0:	f47f af7d 	bne.w	849de <__aeabi_fmul+0x15e>
   84ae4:	ea93 0f0c 	teq	r3, ip
   84ae8:	f47f af70 	bne.w	849cc <__aeabi_fmul+0x14c>
   84aec:	4608      	mov	r0, r1
   84aee:	e776      	b.n	849de <__aeabi_fmul+0x15e>
   84af0:	ea93 0f0c 	teq	r3, ip
   84af4:	d104      	bne.n	84b00 <__aeabi_fdiv+0x118>
   84af6:	024b      	lsls	r3, r1, #9
   84af8:	f43f af4c 	beq.w	84994 <__aeabi_fmul+0x114>
   84afc:	4608      	mov	r0, r1
   84afe:	e76e      	b.n	849de <__aeabi_fmul+0x15e>
   84b00:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
   84b04:	bf18      	it	ne
   84b06:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
   84b0a:	d1ca      	bne.n	84aa2 <__aeabi_fdiv+0xba>
   84b0c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
   84b10:	f47f af5c 	bne.w	849cc <__aeabi_fmul+0x14c>
   84b14:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   84b18:	f47f af3c 	bne.w	84994 <__aeabi_fmul+0x114>
   84b1c:	e75f      	b.n	849de <__aeabi_fmul+0x15e>
   84b1e:	bf00      	nop

00084b20 <__aeabi_f2uiz>:
   84b20:	0042      	lsls	r2, r0, #1
   84b22:	d20e      	bcs.n	84b42 <__aeabi_f2uiz+0x22>
   84b24:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
   84b28:	d30b      	bcc.n	84b42 <__aeabi_f2uiz+0x22>
   84b2a:	f04f 039e 	mov.w	r3, #158	; 0x9e
   84b2e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
   84b32:	d409      	bmi.n	84b48 <__aeabi_f2uiz+0x28>
   84b34:	ea4f 2300 	mov.w	r3, r0, lsl #8
   84b38:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   84b3c:	fa23 f002 	lsr.w	r0, r3, r2
   84b40:	4770      	bx	lr
   84b42:	f04f 0000 	mov.w	r0, #0
   84b46:	4770      	bx	lr
   84b48:	f112 0f61 	cmn.w	r2, #97	; 0x61
   84b4c:	d101      	bne.n	84b52 <__aeabi_f2uiz+0x32>
   84b4e:	0242      	lsls	r2, r0, #9
   84b50:	d102      	bne.n	84b58 <__aeabi_f2uiz+0x38>
   84b52:	f04f 30ff 	mov.w	r0, #4294967295
   84b56:	4770      	bx	lr
   84b58:	f04f 0000 	mov.w	r0, #0
   84b5c:	4770      	bx	lr
   84b5e:	bf00      	nop

00084b60 <__libc_init_array>:
   84b60:	b570      	push	{r4, r5, r6, lr}
   84b62:	4e0f      	ldr	r6, [pc, #60]	; (84ba0 <__libc_init_array+0x40>)
   84b64:	4d0f      	ldr	r5, [pc, #60]	; (84ba4 <__libc_init_array+0x44>)
   84b66:	1b76      	subs	r6, r6, r5
   84b68:	10b6      	asrs	r6, r6, #2
   84b6a:	bf18      	it	ne
   84b6c:	2400      	movne	r4, #0
   84b6e:	d005      	beq.n	84b7c <__libc_init_array+0x1c>
   84b70:	3401      	adds	r4, #1
   84b72:	f855 3b04 	ldr.w	r3, [r5], #4
   84b76:	4798      	blx	r3
   84b78:	42a6      	cmp	r6, r4
   84b7a:	d1f9      	bne.n	84b70 <__libc_init_array+0x10>
   84b7c:	4e0a      	ldr	r6, [pc, #40]	; (84ba8 <__libc_init_array+0x48>)
   84b7e:	4d0b      	ldr	r5, [pc, #44]	; (84bac <__libc_init_array+0x4c>)
   84b80:	f001 fe74 	bl	8686c <_init>
   84b84:	1b76      	subs	r6, r6, r5
   84b86:	10b6      	asrs	r6, r6, #2
   84b88:	bf18      	it	ne
   84b8a:	2400      	movne	r4, #0
   84b8c:	d006      	beq.n	84b9c <__libc_init_array+0x3c>
   84b8e:	3401      	adds	r4, #1
   84b90:	f855 3b04 	ldr.w	r3, [r5], #4
   84b94:	4798      	blx	r3
   84b96:	42a6      	cmp	r6, r4
   84b98:	d1f9      	bne.n	84b8e <__libc_init_array+0x2e>
   84b9a:	bd70      	pop	{r4, r5, r6, pc}
   84b9c:	bd70      	pop	{r4, r5, r6, pc}
   84b9e:	bf00      	nop
   84ba0:	00086878 	.word	0x00086878
   84ba4:	00086878 	.word	0x00086878
   84ba8:	00086880 	.word	0x00086880
   84bac:	00086878 	.word	0x00086878

00084bb0 <memset>:
   84bb0:	b470      	push	{r4, r5, r6}
   84bb2:	0784      	lsls	r4, r0, #30
   84bb4:	d046      	beq.n	84c44 <memset+0x94>
   84bb6:	1e54      	subs	r4, r2, #1
   84bb8:	2a00      	cmp	r2, #0
   84bba:	d041      	beq.n	84c40 <memset+0x90>
   84bbc:	b2cd      	uxtb	r5, r1
   84bbe:	4603      	mov	r3, r0
   84bc0:	e002      	b.n	84bc8 <memset+0x18>
   84bc2:	1e62      	subs	r2, r4, #1
   84bc4:	b3e4      	cbz	r4, 84c40 <memset+0x90>
   84bc6:	4614      	mov	r4, r2
   84bc8:	f803 5b01 	strb.w	r5, [r3], #1
   84bcc:	079a      	lsls	r2, r3, #30
   84bce:	d1f8      	bne.n	84bc2 <memset+0x12>
   84bd0:	2c03      	cmp	r4, #3
   84bd2:	d92e      	bls.n	84c32 <memset+0x82>
   84bd4:	b2cd      	uxtb	r5, r1
   84bd6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   84bda:	2c0f      	cmp	r4, #15
   84bdc:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   84be0:	d919      	bls.n	84c16 <memset+0x66>
   84be2:	4626      	mov	r6, r4
   84be4:	f103 0210 	add.w	r2, r3, #16
   84be8:	3e10      	subs	r6, #16
   84bea:	2e0f      	cmp	r6, #15
   84bec:	f842 5c10 	str.w	r5, [r2, #-16]
   84bf0:	f842 5c0c 	str.w	r5, [r2, #-12]
   84bf4:	f842 5c08 	str.w	r5, [r2, #-8]
   84bf8:	f842 5c04 	str.w	r5, [r2, #-4]
   84bfc:	f102 0210 	add.w	r2, r2, #16
   84c00:	d8f2      	bhi.n	84be8 <memset+0x38>
   84c02:	f1a4 0210 	sub.w	r2, r4, #16
   84c06:	f022 020f 	bic.w	r2, r2, #15
   84c0a:	f004 040f 	and.w	r4, r4, #15
   84c0e:	3210      	adds	r2, #16
   84c10:	2c03      	cmp	r4, #3
   84c12:	4413      	add	r3, r2
   84c14:	d90d      	bls.n	84c32 <memset+0x82>
   84c16:	461e      	mov	r6, r3
   84c18:	4622      	mov	r2, r4
   84c1a:	3a04      	subs	r2, #4
   84c1c:	2a03      	cmp	r2, #3
   84c1e:	f846 5b04 	str.w	r5, [r6], #4
   84c22:	d8fa      	bhi.n	84c1a <memset+0x6a>
   84c24:	1f22      	subs	r2, r4, #4
   84c26:	f022 0203 	bic.w	r2, r2, #3
   84c2a:	3204      	adds	r2, #4
   84c2c:	4413      	add	r3, r2
   84c2e:	f004 0403 	and.w	r4, r4, #3
   84c32:	b12c      	cbz	r4, 84c40 <memset+0x90>
   84c34:	b2c9      	uxtb	r1, r1
   84c36:	441c      	add	r4, r3
   84c38:	f803 1b01 	strb.w	r1, [r3], #1
   84c3c:	42a3      	cmp	r3, r4
   84c3e:	d1fb      	bne.n	84c38 <memset+0x88>
   84c40:	bc70      	pop	{r4, r5, r6}
   84c42:	4770      	bx	lr
   84c44:	4614      	mov	r4, r2
   84c46:	4603      	mov	r3, r0
   84c48:	e7c2      	b.n	84bd0 <memset+0x20>
   84c4a:	bf00      	nop

00084c4c <_puts_r>:
   84c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
   84c4e:	4605      	mov	r5, r0
   84c50:	b089      	sub	sp, #36	; 0x24
   84c52:	4608      	mov	r0, r1
   84c54:	460c      	mov	r4, r1
   84c56:	f000 f8e5 	bl	84e24 <strlen>
   84c5a:	1c43      	adds	r3, r0, #1
   84c5c:	4f14      	ldr	r7, [pc, #80]	; (84cb0 <_puts_r+0x64>)
   84c5e:	9303      	str	r3, [sp, #12]
   84c60:	6bab      	ldr	r3, [r5, #56]	; 0x38
   84c62:	2601      	movs	r6, #1
   84c64:	a904      	add	r1, sp, #16
   84c66:	2202      	movs	r2, #2
   84c68:	9404      	str	r4, [sp, #16]
   84c6a:	9005      	str	r0, [sp, #20]
   84c6c:	68ac      	ldr	r4, [r5, #8]
   84c6e:	9706      	str	r7, [sp, #24]
   84c70:	9607      	str	r6, [sp, #28]
   84c72:	9101      	str	r1, [sp, #4]
   84c74:	9202      	str	r2, [sp, #8]
   84c76:	b1b3      	cbz	r3, 84ca6 <_puts_r+0x5a>
   84c78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   84c7c:	049a      	lsls	r2, r3, #18
   84c7e:	d406      	bmi.n	84c8e <_puts_r+0x42>
   84c80:	6e62      	ldr	r2, [r4, #100]	; 0x64
   84c82:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   84c86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   84c8a:	81a3      	strh	r3, [r4, #12]
   84c8c:	6662      	str	r2, [r4, #100]	; 0x64
   84c8e:	4621      	mov	r1, r4
   84c90:	4628      	mov	r0, r5
   84c92:	aa01      	add	r2, sp, #4
   84c94:	f000 fbf4 	bl	85480 <__sfvwrite_r>
   84c98:	2800      	cmp	r0, #0
   84c9a:	bf14      	ite	ne
   84c9c:	f04f 30ff 	movne.w	r0, #4294967295
   84ca0:	200a      	moveq	r0, #10
   84ca2:	b009      	add	sp, #36	; 0x24
   84ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84ca6:	4628      	mov	r0, r5
   84ca8:	f000 fa96 	bl	851d8 <__sinit>
   84cac:	e7e4      	b.n	84c78 <_puts_r+0x2c>
   84cae:	bf00      	nop
   84cb0:	00086868 	.word	0x00086868

00084cb4 <puts>:
   84cb4:	4b02      	ldr	r3, [pc, #8]	; (84cc0 <puts+0xc>)
   84cb6:	4601      	mov	r1, r0
   84cb8:	6818      	ldr	r0, [r3, #0]
   84cba:	f7ff bfc7 	b.w	84c4c <_puts_r>
   84cbe:	bf00      	nop
   84cc0:	200705c0 	.word	0x200705c0

00084cc4 <setbuf>:
   84cc4:	2900      	cmp	r1, #0
   84cc6:	bf0c      	ite	eq
   84cc8:	2202      	moveq	r2, #2
   84cca:	2200      	movne	r2, #0
   84ccc:	f44f 6380 	mov.w	r3, #1024	; 0x400
   84cd0:	f000 b800 	b.w	84cd4 <setvbuf>

00084cd4 <setvbuf>:
   84cd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   84cd8:	4d51      	ldr	r5, [pc, #324]	; (84e20 <setvbuf+0x14c>)
   84cda:	b083      	sub	sp, #12
   84cdc:	682d      	ldr	r5, [r5, #0]
   84cde:	4604      	mov	r4, r0
   84ce0:	460f      	mov	r7, r1
   84ce2:	4690      	mov	r8, r2
   84ce4:	461e      	mov	r6, r3
   84ce6:	b115      	cbz	r5, 84cee <setvbuf+0x1a>
   84ce8:	6bab      	ldr	r3, [r5, #56]	; 0x38
   84cea:	2b00      	cmp	r3, #0
   84cec:	d079      	beq.n	84de2 <setvbuf+0x10e>
   84cee:	f1b8 0f02 	cmp.w	r8, #2
   84cf2:	d004      	beq.n	84cfe <setvbuf+0x2a>
   84cf4:	f1b8 0f01 	cmp.w	r8, #1
   84cf8:	d87f      	bhi.n	84dfa <setvbuf+0x126>
   84cfa:	2e00      	cmp	r6, #0
   84cfc:	db7d      	blt.n	84dfa <setvbuf+0x126>
   84cfe:	4621      	mov	r1, r4
   84d00:	4628      	mov	r0, r5
   84d02:	f000 f9d5 	bl	850b0 <_fflush_r>
   84d06:	6b21      	ldr	r1, [r4, #48]	; 0x30
   84d08:	b141      	cbz	r1, 84d1c <setvbuf+0x48>
   84d0a:	f104 0340 	add.w	r3, r4, #64	; 0x40
   84d0e:	4299      	cmp	r1, r3
   84d10:	d002      	beq.n	84d18 <setvbuf+0x44>
   84d12:	4628      	mov	r0, r5
   84d14:	f000 facc 	bl	852b0 <_free_r>
   84d18:	2300      	movs	r3, #0
   84d1a:	6323      	str	r3, [r4, #48]	; 0x30
   84d1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   84d20:	2200      	movs	r2, #0
   84d22:	61a2      	str	r2, [r4, #24]
   84d24:	6062      	str	r2, [r4, #4]
   84d26:	061a      	lsls	r2, r3, #24
   84d28:	d454      	bmi.n	84dd4 <setvbuf+0x100>
   84d2a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
   84d2e:	f023 0303 	bic.w	r3, r3, #3
   84d32:	f1b8 0f02 	cmp.w	r8, #2
   84d36:	81a3      	strh	r3, [r4, #12]
   84d38:	d039      	beq.n	84dae <setvbuf+0xda>
   84d3a:	ab01      	add	r3, sp, #4
   84d3c:	466a      	mov	r2, sp
   84d3e:	4621      	mov	r1, r4
   84d40:	4628      	mov	r0, r5
   84d42:	f000 fd49 	bl	857d8 <__swhatbuf_r>
   84d46:	89a3      	ldrh	r3, [r4, #12]
   84d48:	4318      	orrs	r0, r3
   84d4a:	81a0      	strh	r0, [r4, #12]
   84d4c:	b326      	cbz	r6, 84d98 <setvbuf+0xc4>
   84d4e:	b327      	cbz	r7, 84d9a <setvbuf+0xc6>
   84d50:	6bab      	ldr	r3, [r5, #56]	; 0x38
   84d52:	2b00      	cmp	r3, #0
   84d54:	d04d      	beq.n	84df2 <setvbuf+0x11e>
   84d56:	9b00      	ldr	r3, [sp, #0]
   84d58:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   84d5c:	429e      	cmp	r6, r3
   84d5e:	bf1c      	itt	ne
   84d60:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
   84d64:	81a0      	strhne	r0, [r4, #12]
   84d66:	f1b8 0f01 	cmp.w	r8, #1
   84d6a:	bf08      	it	eq
   84d6c:	f040 0001 	orreq.w	r0, r0, #1
   84d70:	b283      	uxth	r3, r0
   84d72:	bf08      	it	eq
   84d74:	81a0      	strheq	r0, [r4, #12]
   84d76:	f003 0008 	and.w	r0, r3, #8
   84d7a:	b280      	uxth	r0, r0
   84d7c:	6027      	str	r7, [r4, #0]
   84d7e:	6127      	str	r7, [r4, #16]
   84d80:	6166      	str	r6, [r4, #20]
   84d82:	b318      	cbz	r0, 84dcc <setvbuf+0xf8>
   84d84:	f013 0001 	ands.w	r0, r3, #1
   84d88:	d02f      	beq.n	84dea <setvbuf+0x116>
   84d8a:	2000      	movs	r0, #0
   84d8c:	4276      	negs	r6, r6
   84d8e:	61a6      	str	r6, [r4, #24]
   84d90:	60a0      	str	r0, [r4, #8]
   84d92:	b003      	add	sp, #12
   84d94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   84d98:	9e00      	ldr	r6, [sp, #0]
   84d9a:	4630      	mov	r0, r6
   84d9c:	f000 fd90 	bl	858c0 <malloc>
   84da0:	4607      	mov	r7, r0
   84da2:	b368      	cbz	r0, 84e00 <setvbuf+0x12c>
   84da4:	89a3      	ldrh	r3, [r4, #12]
   84da6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   84daa:	81a3      	strh	r3, [r4, #12]
   84dac:	e7d0      	b.n	84d50 <setvbuf+0x7c>
   84dae:	2000      	movs	r0, #0
   84db0:	f104 0243 	add.w	r2, r4, #67	; 0x43
   84db4:	f043 0302 	orr.w	r3, r3, #2
   84db8:	2500      	movs	r5, #0
   84dba:	2101      	movs	r1, #1
   84dbc:	81a3      	strh	r3, [r4, #12]
   84dbe:	60a5      	str	r5, [r4, #8]
   84dc0:	6022      	str	r2, [r4, #0]
   84dc2:	6122      	str	r2, [r4, #16]
   84dc4:	6161      	str	r1, [r4, #20]
   84dc6:	b003      	add	sp, #12
   84dc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   84dcc:	60a0      	str	r0, [r4, #8]
   84dce:	b003      	add	sp, #12
   84dd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   84dd4:	6921      	ldr	r1, [r4, #16]
   84dd6:	4628      	mov	r0, r5
   84dd8:	f000 fa6a 	bl	852b0 <_free_r>
   84ddc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   84de0:	e7a3      	b.n	84d2a <setvbuf+0x56>
   84de2:	4628      	mov	r0, r5
   84de4:	f000 f9f8 	bl	851d8 <__sinit>
   84de8:	e781      	b.n	84cee <setvbuf+0x1a>
   84dea:	60a6      	str	r6, [r4, #8]
   84dec:	b003      	add	sp, #12
   84dee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   84df2:	4628      	mov	r0, r5
   84df4:	f000 f9f0 	bl	851d8 <__sinit>
   84df8:	e7ad      	b.n	84d56 <setvbuf+0x82>
   84dfa:	f04f 30ff 	mov.w	r0, #4294967295
   84dfe:	e7e2      	b.n	84dc6 <setvbuf+0xf2>
   84e00:	f8dd 9000 	ldr.w	r9, [sp]
   84e04:	45b1      	cmp	r9, r6
   84e06:	d006      	beq.n	84e16 <setvbuf+0x142>
   84e08:	4648      	mov	r0, r9
   84e0a:	f000 fd59 	bl	858c0 <malloc>
   84e0e:	4607      	mov	r7, r0
   84e10:	b108      	cbz	r0, 84e16 <setvbuf+0x142>
   84e12:	464e      	mov	r6, r9
   84e14:	e7c6      	b.n	84da4 <setvbuf+0xd0>
   84e16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   84e1a:	f04f 30ff 	mov.w	r0, #4294967295
   84e1e:	e7c7      	b.n	84db0 <setvbuf+0xdc>
   84e20:	200705c0 	.word	0x200705c0

00084e24 <strlen>:
   84e24:	f020 0103 	bic.w	r1, r0, #3
   84e28:	f010 0003 	ands.w	r0, r0, #3
   84e2c:	f1c0 0000 	rsb	r0, r0, #0
   84e30:	f851 3b04 	ldr.w	r3, [r1], #4
   84e34:	f100 0c04 	add.w	ip, r0, #4
   84e38:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   84e3c:	f06f 0200 	mvn.w	r2, #0
   84e40:	bf1c      	itt	ne
   84e42:	fa22 f20c 	lsrne.w	r2, r2, ip
   84e46:	4313      	orrne	r3, r2
   84e48:	f04f 0c01 	mov.w	ip, #1
   84e4c:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   84e50:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   84e54:	eba3 020c 	sub.w	r2, r3, ip
   84e58:	ea22 0203 	bic.w	r2, r2, r3
   84e5c:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   84e60:	bf04      	itt	eq
   84e62:	f851 3b04 	ldreq.w	r3, [r1], #4
   84e66:	3004      	addeq	r0, #4
   84e68:	d0f4      	beq.n	84e54 <strlen+0x30>
   84e6a:	f1c2 0100 	rsb	r1, r2, #0
   84e6e:	ea02 0201 	and.w	r2, r2, r1
   84e72:	fab2 f282 	clz	r2, r2
   84e76:	f1c2 021f 	rsb	r2, r2, #31
   84e7a:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   84e7e:	4770      	bx	lr

00084e80 <__swsetup_r>:
   84e80:	b538      	push	{r3, r4, r5, lr}
   84e82:	4b30      	ldr	r3, [pc, #192]	; (84f44 <__swsetup_r+0xc4>)
   84e84:	4605      	mov	r5, r0
   84e86:	6818      	ldr	r0, [r3, #0]
   84e88:	460c      	mov	r4, r1
   84e8a:	b110      	cbz	r0, 84e92 <__swsetup_r+0x12>
   84e8c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   84e8e:	2b00      	cmp	r3, #0
   84e90:	d038      	beq.n	84f04 <__swsetup_r+0x84>
   84e92:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   84e96:	b293      	uxth	r3, r2
   84e98:	0718      	lsls	r0, r3, #28
   84e9a:	d50c      	bpl.n	84eb6 <__swsetup_r+0x36>
   84e9c:	6920      	ldr	r0, [r4, #16]
   84e9e:	b1a8      	cbz	r0, 84ecc <__swsetup_r+0x4c>
   84ea0:	f013 0201 	ands.w	r2, r3, #1
   84ea4:	d01e      	beq.n	84ee4 <__swsetup_r+0x64>
   84ea6:	6963      	ldr	r3, [r4, #20]
   84ea8:	2200      	movs	r2, #0
   84eaa:	425b      	negs	r3, r3
   84eac:	61a3      	str	r3, [r4, #24]
   84eae:	60a2      	str	r2, [r4, #8]
   84eb0:	b1f0      	cbz	r0, 84ef0 <__swsetup_r+0x70>
   84eb2:	2000      	movs	r0, #0
   84eb4:	bd38      	pop	{r3, r4, r5, pc}
   84eb6:	06d9      	lsls	r1, r3, #27
   84eb8:	d53b      	bpl.n	84f32 <__swsetup_r+0xb2>
   84eba:	0758      	lsls	r0, r3, #29
   84ebc:	d425      	bmi.n	84f0a <__swsetup_r+0x8a>
   84ebe:	6920      	ldr	r0, [r4, #16]
   84ec0:	f042 0308 	orr.w	r3, r2, #8
   84ec4:	81a3      	strh	r3, [r4, #12]
   84ec6:	b29b      	uxth	r3, r3
   84ec8:	2800      	cmp	r0, #0
   84eca:	d1e9      	bne.n	84ea0 <__swsetup_r+0x20>
   84ecc:	f403 7220 	and.w	r2, r3, #640	; 0x280
   84ed0:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   84ed4:	d0e4      	beq.n	84ea0 <__swsetup_r+0x20>
   84ed6:	4628      	mov	r0, r5
   84ed8:	4621      	mov	r1, r4
   84eda:	f000 fcad 	bl	85838 <__smakebuf_r>
   84ede:	89a3      	ldrh	r3, [r4, #12]
   84ee0:	6920      	ldr	r0, [r4, #16]
   84ee2:	e7dd      	b.n	84ea0 <__swsetup_r+0x20>
   84ee4:	0799      	lsls	r1, r3, #30
   84ee6:	bf58      	it	pl
   84ee8:	6962      	ldrpl	r2, [r4, #20]
   84eea:	60a2      	str	r2, [r4, #8]
   84eec:	2800      	cmp	r0, #0
   84eee:	d1e0      	bne.n	84eb2 <__swsetup_r+0x32>
   84ef0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   84ef4:	061a      	lsls	r2, r3, #24
   84ef6:	d5dd      	bpl.n	84eb4 <__swsetup_r+0x34>
   84ef8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   84efc:	81a3      	strh	r3, [r4, #12]
   84efe:	f04f 30ff 	mov.w	r0, #4294967295
   84f02:	bd38      	pop	{r3, r4, r5, pc}
   84f04:	f000 f968 	bl	851d8 <__sinit>
   84f08:	e7c3      	b.n	84e92 <__swsetup_r+0x12>
   84f0a:	6b21      	ldr	r1, [r4, #48]	; 0x30
   84f0c:	b151      	cbz	r1, 84f24 <__swsetup_r+0xa4>
   84f0e:	f104 0340 	add.w	r3, r4, #64	; 0x40
   84f12:	4299      	cmp	r1, r3
   84f14:	d004      	beq.n	84f20 <__swsetup_r+0xa0>
   84f16:	4628      	mov	r0, r5
   84f18:	f000 f9ca 	bl	852b0 <_free_r>
   84f1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   84f20:	2300      	movs	r3, #0
   84f22:	6323      	str	r3, [r4, #48]	; 0x30
   84f24:	6920      	ldr	r0, [r4, #16]
   84f26:	2300      	movs	r3, #0
   84f28:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   84f2c:	e884 0009 	stmia.w	r4, {r0, r3}
   84f30:	e7c6      	b.n	84ec0 <__swsetup_r+0x40>
   84f32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   84f36:	2309      	movs	r3, #9
   84f38:	602b      	str	r3, [r5, #0]
   84f3a:	f04f 30ff 	mov.w	r0, #4294967295
   84f3e:	81a2      	strh	r2, [r4, #12]
   84f40:	bd38      	pop	{r3, r4, r5, pc}
   84f42:	bf00      	nop
   84f44:	200705c0 	.word	0x200705c0

00084f48 <register_fini>:
   84f48:	4b02      	ldr	r3, [pc, #8]	; (84f54 <register_fini+0xc>)
   84f4a:	b113      	cbz	r3, 84f52 <register_fini+0xa>
   84f4c:	4802      	ldr	r0, [pc, #8]	; (84f58 <register_fini+0x10>)
   84f4e:	f000 b805 	b.w	84f5c <atexit>
   84f52:	4770      	bx	lr
   84f54:	00000000 	.word	0x00000000
   84f58:	000851ed 	.word	0x000851ed

00084f5c <atexit>:
   84f5c:	2300      	movs	r3, #0
   84f5e:	4601      	mov	r1, r0
   84f60:	461a      	mov	r2, r3
   84f62:	4618      	mov	r0, r3
   84f64:	f001 bada 	b.w	8651c <__register_exitproc>

00084f68 <__sflush_r>:
   84f68:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   84f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84f70:	b29a      	uxth	r2, r3
   84f72:	460d      	mov	r5, r1
   84f74:	0711      	lsls	r1, r2, #28
   84f76:	4680      	mov	r8, r0
   84f78:	d43c      	bmi.n	84ff4 <__sflush_r+0x8c>
   84f7a:	686a      	ldr	r2, [r5, #4]
   84f7c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   84f80:	2a00      	cmp	r2, #0
   84f82:	81ab      	strh	r3, [r5, #12]
   84f84:	dd73      	ble.n	8506e <__sflush_r+0x106>
   84f86:	6aac      	ldr	r4, [r5, #40]	; 0x28
   84f88:	2c00      	cmp	r4, #0
   84f8a:	d04b      	beq.n	85024 <__sflush_r+0xbc>
   84f8c:	b29b      	uxth	r3, r3
   84f8e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   84f92:	2100      	movs	r1, #0
   84f94:	b292      	uxth	r2, r2
   84f96:	f8d8 6000 	ldr.w	r6, [r8]
   84f9a:	f8c8 1000 	str.w	r1, [r8]
   84f9e:	2a00      	cmp	r2, #0
   84fa0:	d069      	beq.n	85076 <__sflush_r+0x10e>
   84fa2:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   84fa4:	075f      	lsls	r7, r3, #29
   84fa6:	d505      	bpl.n	84fb4 <__sflush_r+0x4c>
   84fa8:	6869      	ldr	r1, [r5, #4]
   84faa:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   84fac:	1a52      	subs	r2, r2, r1
   84fae:	b10b      	cbz	r3, 84fb4 <__sflush_r+0x4c>
   84fb0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   84fb2:	1ad2      	subs	r2, r2, r3
   84fb4:	2300      	movs	r3, #0
   84fb6:	69e9      	ldr	r1, [r5, #28]
   84fb8:	4640      	mov	r0, r8
   84fba:	47a0      	blx	r4
   84fbc:	1c44      	adds	r4, r0, #1
   84fbe:	d03c      	beq.n	8503a <__sflush_r+0xd2>
   84fc0:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   84fc4:	6929      	ldr	r1, [r5, #16]
   84fc6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   84fca:	2200      	movs	r2, #0
   84fcc:	81ab      	strh	r3, [r5, #12]
   84fce:	04db      	lsls	r3, r3, #19
   84fd0:	e885 0006 	stmia.w	r5, {r1, r2}
   84fd4:	d449      	bmi.n	8506a <__sflush_r+0x102>
   84fd6:	6b29      	ldr	r1, [r5, #48]	; 0x30
   84fd8:	f8c8 6000 	str.w	r6, [r8]
   84fdc:	b311      	cbz	r1, 85024 <__sflush_r+0xbc>
   84fde:	f105 0340 	add.w	r3, r5, #64	; 0x40
   84fe2:	4299      	cmp	r1, r3
   84fe4:	d002      	beq.n	84fec <__sflush_r+0x84>
   84fe6:	4640      	mov	r0, r8
   84fe8:	f000 f962 	bl	852b0 <_free_r>
   84fec:	2000      	movs	r0, #0
   84fee:	6328      	str	r0, [r5, #48]	; 0x30
   84ff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   84ff4:	692e      	ldr	r6, [r5, #16]
   84ff6:	b1ae      	cbz	r6, 85024 <__sflush_r+0xbc>
   84ff8:	0790      	lsls	r0, r2, #30
   84ffa:	682c      	ldr	r4, [r5, #0]
   84ffc:	bf0c      	ite	eq
   84ffe:	696b      	ldreq	r3, [r5, #20]
   85000:	2300      	movne	r3, #0
   85002:	602e      	str	r6, [r5, #0]
   85004:	1ba4      	subs	r4, r4, r6
   85006:	60ab      	str	r3, [r5, #8]
   85008:	e00a      	b.n	85020 <__sflush_r+0xb8>
   8500a:	4623      	mov	r3, r4
   8500c:	4632      	mov	r2, r6
   8500e:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   85010:	69e9      	ldr	r1, [r5, #28]
   85012:	4640      	mov	r0, r8
   85014:	47b8      	blx	r7
   85016:	2800      	cmp	r0, #0
   85018:	eba4 0400 	sub.w	r4, r4, r0
   8501c:	4406      	add	r6, r0
   8501e:	dd04      	ble.n	8502a <__sflush_r+0xc2>
   85020:	2c00      	cmp	r4, #0
   85022:	dcf2      	bgt.n	8500a <__sflush_r+0xa2>
   85024:	2000      	movs	r0, #0
   85026:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8502a:	89ab      	ldrh	r3, [r5, #12]
   8502c:	f04f 30ff 	mov.w	r0, #4294967295
   85030:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   85034:	81ab      	strh	r3, [r5, #12]
   85036:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8503a:	f8d8 2000 	ldr.w	r2, [r8]
   8503e:	2a1d      	cmp	r2, #29
   85040:	d8f3      	bhi.n	8502a <__sflush_r+0xc2>
   85042:	4b1a      	ldr	r3, [pc, #104]	; (850ac <__sflush_r+0x144>)
   85044:	40d3      	lsrs	r3, r2
   85046:	f003 0301 	and.w	r3, r3, #1
   8504a:	f083 0401 	eor.w	r4, r3, #1
   8504e:	2b00      	cmp	r3, #0
   85050:	d0eb      	beq.n	8502a <__sflush_r+0xc2>
   85052:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   85056:	6929      	ldr	r1, [r5, #16]
   85058:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   8505c:	6029      	str	r1, [r5, #0]
   8505e:	04d9      	lsls	r1, r3, #19
   85060:	606c      	str	r4, [r5, #4]
   85062:	81ab      	strh	r3, [r5, #12]
   85064:	d5b7      	bpl.n	84fd6 <__sflush_r+0x6e>
   85066:	2a00      	cmp	r2, #0
   85068:	d1b5      	bne.n	84fd6 <__sflush_r+0x6e>
   8506a:	6528      	str	r0, [r5, #80]	; 0x50
   8506c:	e7b3      	b.n	84fd6 <__sflush_r+0x6e>
   8506e:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   85070:	2a00      	cmp	r2, #0
   85072:	dc88      	bgt.n	84f86 <__sflush_r+0x1e>
   85074:	e7d6      	b.n	85024 <__sflush_r+0xbc>
   85076:	2301      	movs	r3, #1
   85078:	69e9      	ldr	r1, [r5, #28]
   8507a:	4640      	mov	r0, r8
   8507c:	47a0      	blx	r4
   8507e:	1c43      	adds	r3, r0, #1
   85080:	4602      	mov	r2, r0
   85082:	d002      	beq.n	8508a <__sflush_r+0x122>
   85084:	89ab      	ldrh	r3, [r5, #12]
   85086:	6aac      	ldr	r4, [r5, #40]	; 0x28
   85088:	e78c      	b.n	84fa4 <__sflush_r+0x3c>
   8508a:	f8d8 3000 	ldr.w	r3, [r8]
   8508e:	2b00      	cmp	r3, #0
   85090:	d0f8      	beq.n	85084 <__sflush_r+0x11c>
   85092:	2b1d      	cmp	r3, #29
   85094:	d001      	beq.n	8509a <__sflush_r+0x132>
   85096:	2b16      	cmp	r3, #22
   85098:	d102      	bne.n	850a0 <__sflush_r+0x138>
   8509a:	f8c8 6000 	str.w	r6, [r8]
   8509e:	e7c1      	b.n	85024 <__sflush_r+0xbc>
   850a0:	89ab      	ldrh	r3, [r5, #12]
   850a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   850a6:	81ab      	strh	r3, [r5, #12]
   850a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   850ac:	20400001 	.word	0x20400001

000850b0 <_fflush_r>:
   850b0:	b510      	push	{r4, lr}
   850b2:	4604      	mov	r4, r0
   850b4:	b082      	sub	sp, #8
   850b6:	b108      	cbz	r0, 850bc <_fflush_r+0xc>
   850b8:	6b83      	ldr	r3, [r0, #56]	; 0x38
   850ba:	b153      	cbz	r3, 850d2 <_fflush_r+0x22>
   850bc:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   850c0:	b908      	cbnz	r0, 850c6 <_fflush_r+0x16>
   850c2:	b002      	add	sp, #8
   850c4:	bd10      	pop	{r4, pc}
   850c6:	4620      	mov	r0, r4
   850c8:	b002      	add	sp, #8
   850ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   850ce:	f7ff bf4b 	b.w	84f68 <__sflush_r>
   850d2:	9101      	str	r1, [sp, #4]
   850d4:	f000 f880 	bl	851d8 <__sinit>
   850d8:	9901      	ldr	r1, [sp, #4]
   850da:	e7ef      	b.n	850bc <_fflush_r+0xc>

000850dc <_cleanup_r>:
   850dc:	4901      	ldr	r1, [pc, #4]	; (850e4 <_cleanup_r+0x8>)
   850de:	f000 bb53 	b.w	85788 <_fwalk_reent>
   850e2:	bf00      	nop
   850e4:	000865e5 	.word	0x000865e5

000850e8 <__sinit.part.1>:
   850e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   850ec:	4607      	mov	r7, r0
   850ee:	4835      	ldr	r0, [pc, #212]	; (851c4 <__sinit.part.1+0xdc>)
   850f0:	687d      	ldr	r5, [r7, #4]
   850f2:	2400      	movs	r4, #0
   850f4:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   850f8:	2304      	movs	r3, #4
   850fa:	2103      	movs	r1, #3
   850fc:	63f8      	str	r0, [r7, #60]	; 0x3c
   850fe:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   85102:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   85106:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   8510a:	b083      	sub	sp, #12
   8510c:	602c      	str	r4, [r5, #0]
   8510e:	606c      	str	r4, [r5, #4]
   85110:	60ac      	str	r4, [r5, #8]
   85112:	666c      	str	r4, [r5, #100]	; 0x64
   85114:	81ec      	strh	r4, [r5, #14]
   85116:	612c      	str	r4, [r5, #16]
   85118:	616c      	str	r4, [r5, #20]
   8511a:	61ac      	str	r4, [r5, #24]
   8511c:	81ab      	strh	r3, [r5, #12]
   8511e:	4621      	mov	r1, r4
   85120:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   85124:	2208      	movs	r2, #8
   85126:	f7ff fd43 	bl	84bb0 <memset>
   8512a:	f8df b09c 	ldr.w	fp, [pc, #156]	; 851c8 <__sinit.part.1+0xe0>
   8512e:	68be      	ldr	r6, [r7, #8]
   85130:	f8df a098 	ldr.w	sl, [pc, #152]	; 851cc <__sinit.part.1+0xe4>
   85134:	f8df 9098 	ldr.w	r9, [pc, #152]	; 851d0 <__sinit.part.1+0xe8>
   85138:	f8df 8098 	ldr.w	r8, [pc, #152]	; 851d4 <__sinit.part.1+0xec>
   8513c:	2301      	movs	r3, #1
   8513e:	2209      	movs	r2, #9
   85140:	f8c5 b020 	str.w	fp, [r5, #32]
   85144:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   85148:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   8514c:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   85150:	61ed      	str	r5, [r5, #28]
   85152:	4621      	mov	r1, r4
   85154:	81f3      	strh	r3, [r6, #14]
   85156:	81b2      	strh	r2, [r6, #12]
   85158:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   8515c:	6034      	str	r4, [r6, #0]
   8515e:	6074      	str	r4, [r6, #4]
   85160:	60b4      	str	r4, [r6, #8]
   85162:	6674      	str	r4, [r6, #100]	; 0x64
   85164:	6134      	str	r4, [r6, #16]
   85166:	6174      	str	r4, [r6, #20]
   85168:	61b4      	str	r4, [r6, #24]
   8516a:	2208      	movs	r2, #8
   8516c:	9301      	str	r3, [sp, #4]
   8516e:	f7ff fd1f 	bl	84bb0 <memset>
   85172:	68fd      	ldr	r5, [r7, #12]
   85174:	2012      	movs	r0, #18
   85176:	2202      	movs	r2, #2
   85178:	61f6      	str	r6, [r6, #28]
   8517a:	f8c6 b020 	str.w	fp, [r6, #32]
   8517e:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   85182:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   85186:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   8518a:	4621      	mov	r1, r4
   8518c:	81a8      	strh	r0, [r5, #12]
   8518e:	81ea      	strh	r2, [r5, #14]
   85190:	602c      	str	r4, [r5, #0]
   85192:	606c      	str	r4, [r5, #4]
   85194:	60ac      	str	r4, [r5, #8]
   85196:	666c      	str	r4, [r5, #100]	; 0x64
   85198:	612c      	str	r4, [r5, #16]
   8519a:	616c      	str	r4, [r5, #20]
   8519c:	61ac      	str	r4, [r5, #24]
   8519e:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   851a2:	2208      	movs	r2, #8
   851a4:	f7ff fd04 	bl	84bb0 <memset>
   851a8:	9b01      	ldr	r3, [sp, #4]
   851aa:	61ed      	str	r5, [r5, #28]
   851ac:	f8c5 b020 	str.w	fp, [r5, #32]
   851b0:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   851b4:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   851b8:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   851bc:	63bb      	str	r3, [r7, #56]	; 0x38
   851be:	b003      	add	sp, #12
   851c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   851c4:	000850dd 	.word	0x000850dd
   851c8:	00086469 	.word	0x00086469
   851cc:	0008648d 	.word	0x0008648d
   851d0:	000864c9 	.word	0x000864c9
   851d4:	000864e9 	.word	0x000864e9

000851d8 <__sinit>:
   851d8:	6b83      	ldr	r3, [r0, #56]	; 0x38
   851da:	b103      	cbz	r3, 851de <__sinit+0x6>
   851dc:	4770      	bx	lr
   851de:	f7ff bf83 	b.w	850e8 <__sinit.part.1>
   851e2:	bf00      	nop

000851e4 <__sfp_lock_acquire>:
   851e4:	4770      	bx	lr
   851e6:	bf00      	nop

000851e8 <__sfp_lock_release>:
   851e8:	4770      	bx	lr
   851ea:	bf00      	nop

000851ec <__libc_fini_array>:
   851ec:	b538      	push	{r3, r4, r5, lr}
   851ee:	4d07      	ldr	r5, [pc, #28]	; (8520c <__libc_fini_array+0x20>)
   851f0:	4c07      	ldr	r4, [pc, #28]	; (85210 <__libc_fini_array+0x24>)
   851f2:	1b2c      	subs	r4, r5, r4
   851f4:	10a4      	asrs	r4, r4, #2
   851f6:	d005      	beq.n	85204 <__libc_fini_array+0x18>
   851f8:	3c01      	subs	r4, #1
   851fa:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   851fe:	4798      	blx	r3
   85200:	2c00      	cmp	r4, #0
   85202:	d1f9      	bne.n	851f8 <__libc_fini_array+0xc>
   85204:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   85208:	f001 bb3a 	b.w	86880 <_fini>
   8520c:	00086890 	.word	0x00086890
   85210:	0008688c 	.word	0x0008688c

00085214 <_malloc_trim_r>:
   85214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   85216:	460c      	mov	r4, r1
   85218:	4f22      	ldr	r7, [pc, #136]	; (852a4 <_malloc_trim_r+0x90>)
   8521a:	4606      	mov	r6, r0
   8521c:	f000 ff24 	bl	86068 <__malloc_lock>
   85220:	68bb      	ldr	r3, [r7, #8]
   85222:	685d      	ldr	r5, [r3, #4]
   85224:	f025 0503 	bic.w	r5, r5, #3
   85228:	1b29      	subs	r1, r5, r4
   8522a:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   8522e:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   85232:	f021 010f 	bic.w	r1, r1, #15
   85236:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   8523a:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   8523e:	db07      	blt.n	85250 <_malloc_trim_r+0x3c>
   85240:	2100      	movs	r1, #0
   85242:	4630      	mov	r0, r6
   85244:	f001 f8fe 	bl	86444 <_sbrk_r>
   85248:	68bb      	ldr	r3, [r7, #8]
   8524a:	442b      	add	r3, r5
   8524c:	4298      	cmp	r0, r3
   8524e:	d004      	beq.n	8525a <_malloc_trim_r+0x46>
   85250:	4630      	mov	r0, r6
   85252:	f000 ff0b 	bl	8606c <__malloc_unlock>
   85256:	2000      	movs	r0, #0
   85258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8525a:	4261      	negs	r1, r4
   8525c:	4630      	mov	r0, r6
   8525e:	f001 f8f1 	bl	86444 <_sbrk_r>
   85262:	3001      	adds	r0, #1
   85264:	d00d      	beq.n	85282 <_malloc_trim_r+0x6e>
   85266:	4b10      	ldr	r3, [pc, #64]	; (852a8 <_malloc_trim_r+0x94>)
   85268:	68ba      	ldr	r2, [r7, #8]
   8526a:	6819      	ldr	r1, [r3, #0]
   8526c:	1b2d      	subs	r5, r5, r4
   8526e:	f045 0501 	orr.w	r5, r5, #1
   85272:	4630      	mov	r0, r6
   85274:	1b09      	subs	r1, r1, r4
   85276:	6055      	str	r5, [r2, #4]
   85278:	6019      	str	r1, [r3, #0]
   8527a:	f000 fef7 	bl	8606c <__malloc_unlock>
   8527e:	2001      	movs	r0, #1
   85280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   85282:	2100      	movs	r1, #0
   85284:	4630      	mov	r0, r6
   85286:	f001 f8dd 	bl	86444 <_sbrk_r>
   8528a:	68ba      	ldr	r2, [r7, #8]
   8528c:	1a83      	subs	r3, r0, r2
   8528e:	2b0f      	cmp	r3, #15
   85290:	ddde      	ble.n	85250 <_malloc_trim_r+0x3c>
   85292:	4c06      	ldr	r4, [pc, #24]	; (852ac <_malloc_trim_r+0x98>)
   85294:	4904      	ldr	r1, [pc, #16]	; (852a8 <_malloc_trim_r+0x94>)
   85296:	6824      	ldr	r4, [r4, #0]
   85298:	f043 0301 	orr.w	r3, r3, #1
   8529c:	1b00      	subs	r0, r0, r4
   8529e:	6053      	str	r3, [r2, #4]
   852a0:	6008      	str	r0, [r1, #0]
   852a2:	e7d5      	b.n	85250 <_malloc_trim_r+0x3c>
   852a4:	200705c4 	.word	0x200705c4
   852a8:	20070a8c 	.word	0x20070a8c
   852ac:	200709d0 	.word	0x200709d0

000852b0 <_free_r>:
   852b0:	2900      	cmp	r1, #0
   852b2:	d045      	beq.n	85340 <_free_r+0x90>
   852b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   852b8:	460d      	mov	r5, r1
   852ba:	4680      	mov	r8, r0
   852bc:	f000 fed4 	bl	86068 <__malloc_lock>
   852c0:	f855 7c04 	ldr.w	r7, [r5, #-4]
   852c4:	496a      	ldr	r1, [pc, #424]	; (85470 <_free_r+0x1c0>)
   852c6:	f1a5 0408 	sub.w	r4, r5, #8
   852ca:	f027 0301 	bic.w	r3, r7, #1
   852ce:	18e2      	adds	r2, r4, r3
   852d0:	688e      	ldr	r6, [r1, #8]
   852d2:	6850      	ldr	r0, [r2, #4]
   852d4:	42b2      	cmp	r2, r6
   852d6:	f020 0003 	bic.w	r0, r0, #3
   852da:	d062      	beq.n	853a2 <_free_r+0xf2>
   852dc:	07fe      	lsls	r6, r7, #31
   852de:	6050      	str	r0, [r2, #4]
   852e0:	d40b      	bmi.n	852fa <_free_r+0x4a>
   852e2:	f855 7c08 	ldr.w	r7, [r5, #-8]
   852e6:	f101 0e08 	add.w	lr, r1, #8
   852ea:	1be4      	subs	r4, r4, r7
   852ec:	68a5      	ldr	r5, [r4, #8]
   852ee:	443b      	add	r3, r7
   852f0:	4575      	cmp	r5, lr
   852f2:	d06f      	beq.n	853d4 <_free_r+0x124>
   852f4:	68e7      	ldr	r7, [r4, #12]
   852f6:	60ef      	str	r7, [r5, #12]
   852f8:	60bd      	str	r5, [r7, #8]
   852fa:	1815      	adds	r5, r2, r0
   852fc:	686d      	ldr	r5, [r5, #4]
   852fe:	07ed      	lsls	r5, r5, #31
   85300:	d542      	bpl.n	85388 <_free_r+0xd8>
   85302:	f043 0201 	orr.w	r2, r3, #1
   85306:	6062      	str	r2, [r4, #4]
   85308:	50e3      	str	r3, [r4, r3]
   8530a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   8530e:	d218      	bcs.n	85342 <_free_r+0x92>
   85310:	08db      	lsrs	r3, r3, #3
   85312:	6848      	ldr	r0, [r1, #4]
   85314:	109d      	asrs	r5, r3, #2
   85316:	2201      	movs	r2, #1
   85318:	3301      	adds	r3, #1
   8531a:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   8531e:	fa02 f505 	lsl.w	r5, r2, r5
   85322:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
   85326:	4328      	orrs	r0, r5
   85328:	3a08      	subs	r2, #8
   8532a:	60e2      	str	r2, [r4, #12]
   8532c:	60a7      	str	r7, [r4, #8]
   8532e:	6048      	str	r0, [r1, #4]
   85330:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   85334:	60fc      	str	r4, [r7, #12]
   85336:	4640      	mov	r0, r8
   85338:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8533c:	f000 be96 	b.w	8606c <__malloc_unlock>
   85340:	4770      	bx	lr
   85342:	0a5a      	lsrs	r2, r3, #9
   85344:	2a04      	cmp	r2, #4
   85346:	d853      	bhi.n	853f0 <_free_r+0x140>
   85348:	099a      	lsrs	r2, r3, #6
   8534a:	f102 0739 	add.w	r7, r2, #57	; 0x39
   8534e:	007f      	lsls	r7, r7, #1
   85350:	f102 0538 	add.w	r5, r2, #56	; 0x38
   85354:	eb01 0087 	add.w	r0, r1, r7, lsl #2
   85358:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
   8535c:	3808      	subs	r0, #8
   8535e:	4290      	cmp	r0, r2
   85360:	4943      	ldr	r1, [pc, #268]	; (85470 <_free_r+0x1c0>)
   85362:	d04d      	beq.n	85400 <_free_r+0x150>
   85364:	6851      	ldr	r1, [r2, #4]
   85366:	f021 0103 	bic.w	r1, r1, #3
   8536a:	428b      	cmp	r3, r1
   8536c:	d202      	bcs.n	85374 <_free_r+0xc4>
   8536e:	6892      	ldr	r2, [r2, #8]
   85370:	4290      	cmp	r0, r2
   85372:	d1f7      	bne.n	85364 <_free_r+0xb4>
   85374:	68d0      	ldr	r0, [r2, #12]
   85376:	60e0      	str	r0, [r4, #12]
   85378:	60a2      	str	r2, [r4, #8]
   8537a:	6084      	str	r4, [r0, #8]
   8537c:	60d4      	str	r4, [r2, #12]
   8537e:	4640      	mov	r0, r8
   85380:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   85384:	f000 be72 	b.w	8606c <__malloc_unlock>
   85388:	6895      	ldr	r5, [r2, #8]
   8538a:	4f3a      	ldr	r7, [pc, #232]	; (85474 <_free_r+0x1c4>)
   8538c:	4403      	add	r3, r0
   8538e:	42bd      	cmp	r5, r7
   85390:	d03f      	beq.n	85412 <_free_r+0x162>
   85392:	68d0      	ldr	r0, [r2, #12]
   85394:	f043 0201 	orr.w	r2, r3, #1
   85398:	60e8      	str	r0, [r5, #12]
   8539a:	6085      	str	r5, [r0, #8]
   8539c:	6062      	str	r2, [r4, #4]
   8539e:	50e3      	str	r3, [r4, r3]
   853a0:	e7b3      	b.n	8530a <_free_r+0x5a>
   853a2:	07ff      	lsls	r7, r7, #31
   853a4:	4403      	add	r3, r0
   853a6:	d407      	bmi.n	853b8 <_free_r+0x108>
   853a8:	f855 5c08 	ldr.w	r5, [r5, #-8]
   853ac:	1b64      	subs	r4, r4, r5
   853ae:	68e2      	ldr	r2, [r4, #12]
   853b0:	68a0      	ldr	r0, [r4, #8]
   853b2:	442b      	add	r3, r5
   853b4:	60c2      	str	r2, [r0, #12]
   853b6:	6090      	str	r0, [r2, #8]
   853b8:	4a2f      	ldr	r2, [pc, #188]	; (85478 <_free_r+0x1c8>)
   853ba:	f043 0001 	orr.w	r0, r3, #1
   853be:	6812      	ldr	r2, [r2, #0]
   853c0:	6060      	str	r0, [r4, #4]
   853c2:	4293      	cmp	r3, r2
   853c4:	608c      	str	r4, [r1, #8]
   853c6:	d3b6      	bcc.n	85336 <_free_r+0x86>
   853c8:	4b2c      	ldr	r3, [pc, #176]	; (8547c <_free_r+0x1cc>)
   853ca:	4640      	mov	r0, r8
   853cc:	6819      	ldr	r1, [r3, #0]
   853ce:	f7ff ff21 	bl	85214 <_malloc_trim_r>
   853d2:	e7b0      	b.n	85336 <_free_r+0x86>
   853d4:	1811      	adds	r1, r2, r0
   853d6:	6849      	ldr	r1, [r1, #4]
   853d8:	07c9      	lsls	r1, r1, #31
   853da:	d444      	bmi.n	85466 <_free_r+0x1b6>
   853dc:	6891      	ldr	r1, [r2, #8]
   853de:	4403      	add	r3, r0
   853e0:	68d2      	ldr	r2, [r2, #12]
   853e2:	f043 0001 	orr.w	r0, r3, #1
   853e6:	60ca      	str	r2, [r1, #12]
   853e8:	6091      	str	r1, [r2, #8]
   853ea:	6060      	str	r0, [r4, #4]
   853ec:	50e3      	str	r3, [r4, r3]
   853ee:	e7a2      	b.n	85336 <_free_r+0x86>
   853f0:	2a14      	cmp	r2, #20
   853f2:	d817      	bhi.n	85424 <_free_r+0x174>
   853f4:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   853f8:	007f      	lsls	r7, r7, #1
   853fa:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   853fe:	e7a9      	b.n	85354 <_free_r+0xa4>
   85400:	10aa      	asrs	r2, r5, #2
   85402:	684b      	ldr	r3, [r1, #4]
   85404:	2501      	movs	r5, #1
   85406:	fa05 f202 	lsl.w	r2, r5, r2
   8540a:	4313      	orrs	r3, r2
   8540c:	604b      	str	r3, [r1, #4]
   8540e:	4602      	mov	r2, r0
   85410:	e7b1      	b.n	85376 <_free_r+0xc6>
   85412:	f043 0201 	orr.w	r2, r3, #1
   85416:	614c      	str	r4, [r1, #20]
   85418:	610c      	str	r4, [r1, #16]
   8541a:	60e5      	str	r5, [r4, #12]
   8541c:	60a5      	str	r5, [r4, #8]
   8541e:	6062      	str	r2, [r4, #4]
   85420:	50e3      	str	r3, [r4, r3]
   85422:	e788      	b.n	85336 <_free_r+0x86>
   85424:	2a54      	cmp	r2, #84	; 0x54
   85426:	d806      	bhi.n	85436 <_free_r+0x186>
   85428:	0b1a      	lsrs	r2, r3, #12
   8542a:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   8542e:	007f      	lsls	r7, r7, #1
   85430:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   85434:	e78e      	b.n	85354 <_free_r+0xa4>
   85436:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   8543a:	d806      	bhi.n	8544a <_free_r+0x19a>
   8543c:	0bda      	lsrs	r2, r3, #15
   8543e:	f102 0778 	add.w	r7, r2, #120	; 0x78
   85442:	007f      	lsls	r7, r7, #1
   85444:	f102 0577 	add.w	r5, r2, #119	; 0x77
   85448:	e784      	b.n	85354 <_free_r+0xa4>
   8544a:	f240 5054 	movw	r0, #1364	; 0x554
   8544e:	4282      	cmp	r2, r0
   85450:	d806      	bhi.n	85460 <_free_r+0x1b0>
   85452:	0c9a      	lsrs	r2, r3, #18
   85454:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   85458:	007f      	lsls	r7, r7, #1
   8545a:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   8545e:	e779      	b.n	85354 <_free_r+0xa4>
   85460:	27fe      	movs	r7, #254	; 0xfe
   85462:	257e      	movs	r5, #126	; 0x7e
   85464:	e776      	b.n	85354 <_free_r+0xa4>
   85466:	f043 0201 	orr.w	r2, r3, #1
   8546a:	6062      	str	r2, [r4, #4]
   8546c:	50e3      	str	r3, [r4, r3]
   8546e:	e762      	b.n	85336 <_free_r+0x86>
   85470:	200705c4 	.word	0x200705c4
   85474:	200705cc 	.word	0x200705cc
   85478:	200709cc 	.word	0x200709cc
   8547c:	20070a88 	.word	0x20070a88

00085480 <__sfvwrite_r>:
   85480:	6893      	ldr	r3, [r2, #8]
   85482:	2b00      	cmp	r3, #0
   85484:	f000 80ab 	beq.w	855de <__sfvwrite_r+0x15e>
   85488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8548c:	898b      	ldrh	r3, [r1, #12]
   8548e:	b085      	sub	sp, #20
   85490:	460c      	mov	r4, r1
   85492:	0719      	lsls	r1, r3, #28
   85494:	9002      	str	r0, [sp, #8]
   85496:	4616      	mov	r6, r2
   85498:	d528      	bpl.n	854ec <__sfvwrite_r+0x6c>
   8549a:	6922      	ldr	r2, [r4, #16]
   8549c:	b332      	cbz	r2, 854ec <__sfvwrite_r+0x6c>
   8549e:	f003 0802 	and.w	r8, r3, #2
   854a2:	fa1f f088 	uxth.w	r0, r8
   854a6:	6835      	ldr	r5, [r6, #0]
   854a8:	b378      	cbz	r0, 8550a <__sfvwrite_r+0x8a>
   854aa:	f04f 0900 	mov.w	r9, #0
   854ae:	46c8      	mov	r8, r9
   854b0:	f8df a2d0 	ldr.w	sl, [pc, #720]	; 85784 <__sfvwrite_r+0x304>
   854b4:	f1b8 0f00 	cmp.w	r8, #0
   854b8:	f000 808b 	beq.w	855d2 <__sfvwrite_r+0x152>
   854bc:	45d0      	cmp	r8, sl
   854be:	4643      	mov	r3, r8
   854c0:	464a      	mov	r2, r9
   854c2:	bf28      	it	cs
   854c4:	4653      	movcs	r3, sl
   854c6:	69e1      	ldr	r1, [r4, #28]
   854c8:	9802      	ldr	r0, [sp, #8]
   854ca:	6a67      	ldr	r7, [r4, #36]	; 0x24
   854cc:	47b8      	blx	r7
   854ce:	2800      	cmp	r0, #0
   854d0:	f340 80a5 	ble.w	8561e <__sfvwrite_r+0x19e>
   854d4:	68b3      	ldr	r3, [r6, #8]
   854d6:	4481      	add	r9, r0
   854d8:	1a1b      	subs	r3, r3, r0
   854da:	ebc0 0808 	rsb	r8, r0, r8
   854de:	60b3      	str	r3, [r6, #8]
   854e0:	2b00      	cmp	r3, #0
   854e2:	d1e7      	bne.n	854b4 <__sfvwrite_r+0x34>
   854e4:	2000      	movs	r0, #0
   854e6:	b005      	add	sp, #20
   854e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   854ec:	4621      	mov	r1, r4
   854ee:	9802      	ldr	r0, [sp, #8]
   854f0:	f7ff fcc6 	bl	84e80 <__swsetup_r>
   854f4:	2800      	cmp	r0, #0
   854f6:	f040 813c 	bne.w	85772 <__sfvwrite_r+0x2f2>
   854fa:	89a3      	ldrh	r3, [r4, #12]
   854fc:	6835      	ldr	r5, [r6, #0]
   854fe:	f003 0802 	and.w	r8, r3, #2
   85502:	fa1f f088 	uxth.w	r0, r8
   85506:	2800      	cmp	r0, #0
   85508:	d1cf      	bne.n	854aa <__sfvwrite_r+0x2a>
   8550a:	f013 0901 	ands.w	r9, r3, #1
   8550e:	f040 8090 	bne.w	85632 <__sfvwrite_r+0x1b2>
   85512:	464f      	mov	r7, r9
   85514:	9601      	str	r6, [sp, #4]
   85516:	2f00      	cmp	r7, #0
   85518:	d056      	beq.n	855c8 <__sfvwrite_r+0x148>
   8551a:	059a      	lsls	r2, r3, #22
   8551c:	f8d4 8008 	ldr.w	r8, [r4, #8]
   85520:	d55f      	bpl.n	855e2 <__sfvwrite_r+0x162>
   85522:	4547      	cmp	r7, r8
   85524:	46c2      	mov	sl, r8
   85526:	f0c0 80bf 	bcc.w	856a8 <__sfvwrite_r+0x228>
   8552a:	f413 6f90 	tst.w	r3, #1152	; 0x480
   8552e:	f000 80bd 	beq.w	856ac <__sfvwrite_r+0x22c>
   85532:	6962      	ldr	r2, [r4, #20]
   85534:	6820      	ldr	r0, [r4, #0]
   85536:	6921      	ldr	r1, [r4, #16]
   85538:	eb02 0842 	add.w	r8, r2, r2, lsl #1
   8553c:	ebc1 0a00 	rsb	sl, r1, r0
   85540:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
   85544:	f10a 0001 	add.w	r0, sl, #1
   85548:	ea4f 0868 	mov.w	r8, r8, asr #1
   8554c:	4438      	add	r0, r7
   8554e:	4540      	cmp	r0, r8
   85550:	4642      	mov	r2, r8
   85552:	bf84      	itt	hi
   85554:	4680      	movhi	r8, r0
   85556:	4642      	movhi	r2, r8
   85558:	055b      	lsls	r3, r3, #21
   8555a:	f140 80f2 	bpl.w	85742 <__sfvwrite_r+0x2c2>
   8555e:	4611      	mov	r1, r2
   85560:	9802      	ldr	r0, [sp, #8]
   85562:	f000 f9b5 	bl	858d0 <_malloc_r>
   85566:	4683      	mov	fp, r0
   85568:	2800      	cmp	r0, #0
   8556a:	f000 8105 	beq.w	85778 <__sfvwrite_r+0x2f8>
   8556e:	4652      	mov	r2, sl
   85570:	6921      	ldr	r1, [r4, #16]
   85572:	f000 fc9f 	bl	85eb4 <memcpy>
   85576:	89a3      	ldrh	r3, [r4, #12]
   85578:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   8557c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   85580:	81a3      	strh	r3, [r4, #12]
   85582:	ebca 0308 	rsb	r3, sl, r8
   85586:	eb0b 000a 	add.w	r0, fp, sl
   8558a:	f8c4 8014 	str.w	r8, [r4, #20]
   8558e:	46ba      	mov	sl, r7
   85590:	46b8      	mov	r8, r7
   85592:	f8c4 b010 	str.w	fp, [r4, #16]
   85596:	6020      	str	r0, [r4, #0]
   85598:	60a3      	str	r3, [r4, #8]
   8559a:	4652      	mov	r2, sl
   8559c:	4649      	mov	r1, r9
   8559e:	f000 fcff 	bl	85fa0 <memmove>
   855a2:	68a0      	ldr	r0, [r4, #8]
   855a4:	6823      	ldr	r3, [r4, #0]
   855a6:	ebc8 0000 	rsb	r0, r8, r0
   855aa:	60a0      	str	r0, [r4, #8]
   855ac:	4638      	mov	r0, r7
   855ae:	4453      	add	r3, sl
   855b0:	6023      	str	r3, [r4, #0]
   855b2:	9a01      	ldr	r2, [sp, #4]
   855b4:	4481      	add	r9, r0
   855b6:	6893      	ldr	r3, [r2, #8]
   855b8:	1a3f      	subs	r7, r7, r0
   855ba:	1a1b      	subs	r3, r3, r0
   855bc:	6093      	str	r3, [r2, #8]
   855be:	2b00      	cmp	r3, #0
   855c0:	d090      	beq.n	854e4 <__sfvwrite_r+0x64>
   855c2:	89a3      	ldrh	r3, [r4, #12]
   855c4:	2f00      	cmp	r7, #0
   855c6:	d1a8      	bne.n	8551a <__sfvwrite_r+0x9a>
   855c8:	f8d5 9000 	ldr.w	r9, [r5]
   855cc:	686f      	ldr	r7, [r5, #4]
   855ce:	3508      	adds	r5, #8
   855d0:	e7a1      	b.n	85516 <__sfvwrite_r+0x96>
   855d2:	f8d5 9000 	ldr.w	r9, [r5]
   855d6:	f8d5 8004 	ldr.w	r8, [r5, #4]
   855da:	3508      	adds	r5, #8
   855dc:	e76a      	b.n	854b4 <__sfvwrite_r+0x34>
   855de:	2000      	movs	r0, #0
   855e0:	4770      	bx	lr
   855e2:	6820      	ldr	r0, [r4, #0]
   855e4:	6923      	ldr	r3, [r4, #16]
   855e6:	4298      	cmp	r0, r3
   855e8:	d803      	bhi.n	855f2 <__sfvwrite_r+0x172>
   855ea:	6962      	ldr	r2, [r4, #20]
   855ec:	4297      	cmp	r7, r2
   855ee:	f080 8083 	bcs.w	856f8 <__sfvwrite_r+0x278>
   855f2:	45b8      	cmp	r8, r7
   855f4:	bf28      	it	cs
   855f6:	46b8      	movcs	r8, r7
   855f8:	4649      	mov	r1, r9
   855fa:	4642      	mov	r2, r8
   855fc:	f000 fcd0 	bl	85fa0 <memmove>
   85600:	68a3      	ldr	r3, [r4, #8]
   85602:	6822      	ldr	r2, [r4, #0]
   85604:	ebc8 0303 	rsb	r3, r8, r3
   85608:	4442      	add	r2, r8
   8560a:	60a3      	str	r3, [r4, #8]
   8560c:	6022      	str	r2, [r4, #0]
   8560e:	2b00      	cmp	r3, #0
   85610:	d148      	bne.n	856a4 <__sfvwrite_r+0x224>
   85612:	4621      	mov	r1, r4
   85614:	9802      	ldr	r0, [sp, #8]
   85616:	f7ff fd4b 	bl	850b0 <_fflush_r>
   8561a:	2800      	cmp	r0, #0
   8561c:	d042      	beq.n	856a4 <__sfvwrite_r+0x224>
   8561e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   85622:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   85626:	f04f 30ff 	mov.w	r0, #4294967295
   8562a:	81a3      	strh	r3, [r4, #12]
   8562c:	b005      	add	sp, #20
   8562e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85632:	4680      	mov	r8, r0
   85634:	4682      	mov	sl, r0
   85636:	4681      	mov	r9, r0
   85638:	9001      	str	r0, [sp, #4]
   8563a:	f1b9 0f00 	cmp.w	r9, #0
   8563e:	d029      	beq.n	85694 <__sfvwrite_r+0x214>
   85640:	9b01      	ldr	r3, [sp, #4]
   85642:	2b00      	cmp	r3, #0
   85644:	d04b      	beq.n	856de <__sfvwrite_r+0x25e>
   85646:	45c8      	cmp	r8, r9
   85648:	46c3      	mov	fp, r8
   8564a:	bf28      	it	cs
   8564c:	46cb      	movcs	fp, r9
   8564e:	6820      	ldr	r0, [r4, #0]
   85650:	6923      	ldr	r3, [r4, #16]
   85652:	465f      	mov	r7, fp
   85654:	4298      	cmp	r0, r3
   85656:	6962      	ldr	r2, [r4, #20]
   85658:	d903      	bls.n	85662 <__sfvwrite_r+0x1e2>
   8565a:	68a3      	ldr	r3, [r4, #8]
   8565c:	4413      	add	r3, r2
   8565e:	459b      	cmp	fp, r3
   85660:	dc5c      	bgt.n	8571c <__sfvwrite_r+0x29c>
   85662:	4593      	cmp	fp, r2
   85664:	db24      	blt.n	856b0 <__sfvwrite_r+0x230>
   85666:	4613      	mov	r3, r2
   85668:	6a67      	ldr	r7, [r4, #36]	; 0x24
   8566a:	4652      	mov	r2, sl
   8566c:	69e1      	ldr	r1, [r4, #28]
   8566e:	9802      	ldr	r0, [sp, #8]
   85670:	47b8      	blx	r7
   85672:	1e07      	subs	r7, r0, #0
   85674:	ddd3      	ble.n	8561e <__sfvwrite_r+0x19e>
   85676:	ebb8 0807 	subs.w	r8, r8, r7
   8567a:	d027      	beq.n	856cc <__sfvwrite_r+0x24c>
   8567c:	68b3      	ldr	r3, [r6, #8]
   8567e:	44ba      	add	sl, r7
   85680:	1bdb      	subs	r3, r3, r7
   85682:	ebc7 0909 	rsb	r9, r7, r9
   85686:	60b3      	str	r3, [r6, #8]
   85688:	2b00      	cmp	r3, #0
   8568a:	f43f af2b 	beq.w	854e4 <__sfvwrite_r+0x64>
   8568e:	f1b9 0f00 	cmp.w	r9, #0
   85692:	d1d5      	bne.n	85640 <__sfvwrite_r+0x1c0>
   85694:	2300      	movs	r3, #0
   85696:	f8d5 a000 	ldr.w	sl, [r5]
   8569a:	f8d5 9004 	ldr.w	r9, [r5, #4]
   8569e:	9301      	str	r3, [sp, #4]
   856a0:	3508      	adds	r5, #8
   856a2:	e7ca      	b.n	8563a <__sfvwrite_r+0x1ba>
   856a4:	4640      	mov	r0, r8
   856a6:	e784      	b.n	855b2 <__sfvwrite_r+0x132>
   856a8:	46b8      	mov	r8, r7
   856aa:	46ba      	mov	sl, r7
   856ac:	6820      	ldr	r0, [r4, #0]
   856ae:	e774      	b.n	8559a <__sfvwrite_r+0x11a>
   856b0:	465a      	mov	r2, fp
   856b2:	4651      	mov	r1, sl
   856b4:	f000 fc74 	bl	85fa0 <memmove>
   856b8:	68a2      	ldr	r2, [r4, #8]
   856ba:	6823      	ldr	r3, [r4, #0]
   856bc:	ebcb 0202 	rsb	r2, fp, r2
   856c0:	445b      	add	r3, fp
   856c2:	ebb8 0807 	subs.w	r8, r8, r7
   856c6:	60a2      	str	r2, [r4, #8]
   856c8:	6023      	str	r3, [r4, #0]
   856ca:	d1d7      	bne.n	8567c <__sfvwrite_r+0x1fc>
   856cc:	4621      	mov	r1, r4
   856ce:	9802      	ldr	r0, [sp, #8]
   856d0:	f7ff fcee 	bl	850b0 <_fflush_r>
   856d4:	2800      	cmp	r0, #0
   856d6:	d1a2      	bne.n	8561e <__sfvwrite_r+0x19e>
   856d8:	f8cd 8004 	str.w	r8, [sp, #4]
   856dc:	e7ce      	b.n	8567c <__sfvwrite_r+0x1fc>
   856de:	464a      	mov	r2, r9
   856e0:	210a      	movs	r1, #10
   856e2:	4650      	mov	r0, sl
   856e4:	f000 fba0 	bl	85e28 <memchr>
   856e8:	2800      	cmp	r0, #0
   856ea:	d03d      	beq.n	85768 <__sfvwrite_r+0x2e8>
   856ec:	3001      	adds	r0, #1
   856ee:	2301      	movs	r3, #1
   856f0:	ebca 0800 	rsb	r8, sl, r0
   856f4:	9301      	str	r3, [sp, #4]
   856f6:	e7a6      	b.n	85646 <__sfvwrite_r+0x1c6>
   856f8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   856fc:	42bb      	cmp	r3, r7
   856fe:	bf28      	it	cs
   85700:	463b      	movcs	r3, r7
   85702:	fb93 f3f2 	sdiv	r3, r3, r2
   85706:	69e1      	ldr	r1, [r4, #28]
   85708:	fb02 f303 	mul.w	r3, r2, r3
   8570c:	9802      	ldr	r0, [sp, #8]
   8570e:	464a      	mov	r2, r9
   85710:	6a66      	ldr	r6, [r4, #36]	; 0x24
   85712:	47b0      	blx	r6
   85714:	2800      	cmp	r0, #0
   85716:	f73f af4c 	bgt.w	855b2 <__sfvwrite_r+0x132>
   8571a:	e780      	b.n	8561e <__sfvwrite_r+0x19e>
   8571c:	461a      	mov	r2, r3
   8571e:	4651      	mov	r1, sl
   85720:	9303      	str	r3, [sp, #12]
   85722:	f000 fc3d 	bl	85fa0 <memmove>
   85726:	6822      	ldr	r2, [r4, #0]
   85728:	9b03      	ldr	r3, [sp, #12]
   8572a:	4621      	mov	r1, r4
   8572c:	441a      	add	r2, r3
   8572e:	6022      	str	r2, [r4, #0]
   85730:	9802      	ldr	r0, [sp, #8]
   85732:	f7ff fcbd 	bl	850b0 <_fflush_r>
   85736:	9b03      	ldr	r3, [sp, #12]
   85738:	2800      	cmp	r0, #0
   8573a:	f47f af70 	bne.w	8561e <__sfvwrite_r+0x19e>
   8573e:	461f      	mov	r7, r3
   85740:	e799      	b.n	85676 <__sfvwrite_r+0x1f6>
   85742:	9802      	ldr	r0, [sp, #8]
   85744:	f000 fc94 	bl	86070 <_realloc_r>
   85748:	4683      	mov	fp, r0
   8574a:	2800      	cmp	r0, #0
   8574c:	f47f af19 	bne.w	85582 <__sfvwrite_r+0x102>
   85750:	9d02      	ldr	r5, [sp, #8]
   85752:	6921      	ldr	r1, [r4, #16]
   85754:	4628      	mov	r0, r5
   85756:	f7ff fdab 	bl	852b0 <_free_r>
   8575a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8575e:	220c      	movs	r2, #12
   85760:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   85764:	602a      	str	r2, [r5, #0]
   85766:	e75c      	b.n	85622 <__sfvwrite_r+0x1a2>
   85768:	2301      	movs	r3, #1
   8576a:	f109 0801 	add.w	r8, r9, #1
   8576e:	9301      	str	r3, [sp, #4]
   85770:	e769      	b.n	85646 <__sfvwrite_r+0x1c6>
   85772:	f04f 30ff 	mov.w	r0, #4294967295
   85776:	e6b6      	b.n	854e6 <__sfvwrite_r+0x66>
   85778:	9a02      	ldr	r2, [sp, #8]
   8577a:	230c      	movs	r3, #12
   8577c:	6013      	str	r3, [r2, #0]
   8577e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   85782:	e74e      	b.n	85622 <__sfvwrite_r+0x1a2>
   85784:	7ffffc00 	.word	0x7ffffc00

00085788 <_fwalk_reent>:
   85788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8578c:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   85790:	d01e      	beq.n	857d0 <_fwalk_reent+0x48>
   85792:	4688      	mov	r8, r1
   85794:	4607      	mov	r7, r0
   85796:	f04f 0900 	mov.w	r9, #0
   8579a:	6875      	ldr	r5, [r6, #4]
   8579c:	68b4      	ldr	r4, [r6, #8]
   8579e:	3d01      	subs	r5, #1
   857a0:	d410      	bmi.n	857c4 <_fwalk_reent+0x3c>
   857a2:	89a3      	ldrh	r3, [r4, #12]
   857a4:	3d01      	subs	r5, #1
   857a6:	2b01      	cmp	r3, #1
   857a8:	d908      	bls.n	857bc <_fwalk_reent+0x34>
   857aa:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   857ae:	3301      	adds	r3, #1
   857b0:	d004      	beq.n	857bc <_fwalk_reent+0x34>
   857b2:	4621      	mov	r1, r4
   857b4:	4638      	mov	r0, r7
   857b6:	47c0      	blx	r8
   857b8:	ea49 0900 	orr.w	r9, r9, r0
   857bc:	1c6b      	adds	r3, r5, #1
   857be:	f104 0468 	add.w	r4, r4, #104	; 0x68
   857c2:	d1ee      	bne.n	857a2 <_fwalk_reent+0x1a>
   857c4:	6836      	ldr	r6, [r6, #0]
   857c6:	2e00      	cmp	r6, #0
   857c8:	d1e7      	bne.n	8579a <_fwalk_reent+0x12>
   857ca:	4648      	mov	r0, r9
   857cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   857d0:	46b1      	mov	r9, r6
   857d2:	4648      	mov	r0, r9
   857d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000857d8 <__swhatbuf_r>:
   857d8:	b570      	push	{r4, r5, r6, lr}
   857da:	460e      	mov	r6, r1
   857dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   857e0:	b090      	sub	sp, #64	; 0x40
   857e2:	2900      	cmp	r1, #0
   857e4:	4614      	mov	r4, r2
   857e6:	461d      	mov	r5, r3
   857e8:	db14      	blt.n	85814 <__swhatbuf_r+0x3c>
   857ea:	aa01      	add	r2, sp, #4
   857ec:	f000 ff3c 	bl	86668 <_fstat_r>
   857f0:	2800      	cmp	r0, #0
   857f2:	db0f      	blt.n	85814 <__swhatbuf_r+0x3c>
   857f4:	9a02      	ldr	r2, [sp, #8]
   857f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
   857fa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   857fe:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   85802:	fab2 f282 	clz	r2, r2
   85806:	f44f 6000 	mov.w	r0, #2048	; 0x800
   8580a:	0952      	lsrs	r2, r2, #5
   8580c:	602a      	str	r2, [r5, #0]
   8580e:	6023      	str	r3, [r4, #0]
   85810:	b010      	add	sp, #64	; 0x40
   85812:	bd70      	pop	{r4, r5, r6, pc}
   85814:	89b2      	ldrh	r2, [r6, #12]
   85816:	2000      	movs	r0, #0
   85818:	f002 0280 	and.w	r2, r2, #128	; 0x80
   8581c:	b292      	uxth	r2, r2
   8581e:	6028      	str	r0, [r5, #0]
   85820:	b11a      	cbz	r2, 8582a <__swhatbuf_r+0x52>
   85822:	2340      	movs	r3, #64	; 0x40
   85824:	6023      	str	r3, [r4, #0]
   85826:	b010      	add	sp, #64	; 0x40
   85828:	bd70      	pop	{r4, r5, r6, pc}
   8582a:	4610      	mov	r0, r2
   8582c:	f44f 6380 	mov.w	r3, #1024	; 0x400
   85830:	6023      	str	r3, [r4, #0]
   85832:	b010      	add	sp, #64	; 0x40
   85834:	bd70      	pop	{r4, r5, r6, pc}
   85836:	bf00      	nop

00085838 <__smakebuf_r>:
   85838:	898a      	ldrh	r2, [r1, #12]
   8583a:	460b      	mov	r3, r1
   8583c:	0792      	lsls	r2, r2, #30
   8583e:	d506      	bpl.n	8584e <__smakebuf_r+0x16>
   85840:	f101 0243 	add.w	r2, r1, #67	; 0x43
   85844:	2101      	movs	r1, #1
   85846:	601a      	str	r2, [r3, #0]
   85848:	611a      	str	r2, [r3, #16]
   8584a:	6159      	str	r1, [r3, #20]
   8584c:	4770      	bx	lr
   8584e:	b5f0      	push	{r4, r5, r6, r7, lr}
   85850:	b083      	sub	sp, #12
   85852:	ab01      	add	r3, sp, #4
   85854:	466a      	mov	r2, sp
   85856:	460c      	mov	r4, r1
   85858:	4605      	mov	r5, r0
   8585a:	f7ff ffbd 	bl	857d8 <__swhatbuf_r>
   8585e:	9900      	ldr	r1, [sp, #0]
   85860:	4606      	mov	r6, r0
   85862:	4628      	mov	r0, r5
   85864:	f000 f834 	bl	858d0 <_malloc_r>
   85868:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8586c:	b1d0      	cbz	r0, 858a4 <__smakebuf_r+0x6c>
   8586e:	e89d 0006 	ldmia.w	sp, {r1, r2}
   85872:	4f12      	ldr	r7, [pc, #72]	; (858bc <__smakebuf_r+0x84>)
   85874:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   85878:	63ef      	str	r7, [r5, #60]	; 0x3c
   8587a:	81a3      	strh	r3, [r4, #12]
   8587c:	6020      	str	r0, [r4, #0]
   8587e:	6120      	str	r0, [r4, #16]
   85880:	6161      	str	r1, [r4, #20]
   85882:	b91a      	cbnz	r2, 8588c <__smakebuf_r+0x54>
   85884:	4333      	orrs	r3, r6
   85886:	81a3      	strh	r3, [r4, #12]
   85888:	b003      	add	sp, #12
   8588a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8588c:	4628      	mov	r0, r5
   8588e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   85892:	f000 fefd 	bl	86690 <_isatty_r>
   85896:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8589a:	2800      	cmp	r0, #0
   8589c:	d0f2      	beq.n	85884 <__smakebuf_r+0x4c>
   8589e:	f043 0301 	orr.w	r3, r3, #1
   858a2:	e7ef      	b.n	85884 <__smakebuf_r+0x4c>
   858a4:	059a      	lsls	r2, r3, #22
   858a6:	d4ef      	bmi.n	85888 <__smakebuf_r+0x50>
   858a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
   858ac:	f043 0302 	orr.w	r3, r3, #2
   858b0:	2101      	movs	r1, #1
   858b2:	81a3      	strh	r3, [r4, #12]
   858b4:	6022      	str	r2, [r4, #0]
   858b6:	6122      	str	r2, [r4, #16]
   858b8:	6161      	str	r1, [r4, #20]
   858ba:	e7e5      	b.n	85888 <__smakebuf_r+0x50>
   858bc:	000850dd 	.word	0x000850dd

000858c0 <malloc>:
   858c0:	4b02      	ldr	r3, [pc, #8]	; (858cc <malloc+0xc>)
   858c2:	4601      	mov	r1, r0
   858c4:	6818      	ldr	r0, [r3, #0]
   858c6:	f000 b803 	b.w	858d0 <_malloc_r>
   858ca:	bf00      	nop
   858cc:	200705c0 	.word	0x200705c0

000858d0 <_malloc_r>:
   858d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   858d4:	f101 050b 	add.w	r5, r1, #11
   858d8:	2d16      	cmp	r5, #22
   858da:	b083      	sub	sp, #12
   858dc:	4606      	mov	r6, r0
   858de:	f240 80a0 	bls.w	85a22 <_malloc_r+0x152>
   858e2:	f035 0507 	bics.w	r5, r5, #7
   858e6:	f100 80c0 	bmi.w	85a6a <_malloc_r+0x19a>
   858ea:	42a9      	cmp	r1, r5
   858ec:	f200 80bd 	bhi.w	85a6a <_malloc_r+0x19a>
   858f0:	f000 fbba 	bl	86068 <__malloc_lock>
   858f4:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   858f8:	f0c0 8290 	bcc.w	85e1c <_malloc_r+0x54c>
   858fc:	0a6b      	lsrs	r3, r5, #9
   858fe:	f000 80bb 	beq.w	85a78 <_malloc_r+0x1a8>
   85902:	2b04      	cmp	r3, #4
   85904:	f200 8177 	bhi.w	85bf6 <_malloc_r+0x326>
   85908:	09a8      	lsrs	r0, r5, #6
   8590a:	f100 0e39 	add.w	lr, r0, #57	; 0x39
   8590e:	ea4f 014e 	mov.w	r1, lr, lsl #1
   85912:	3038      	adds	r0, #56	; 0x38
   85914:	4fbe      	ldr	r7, [pc, #760]	; (85c10 <_malloc_r+0x340>)
   85916:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   8591a:	684c      	ldr	r4, [r1, #4]
   8591c:	3908      	subs	r1, #8
   8591e:	42a1      	cmp	r1, r4
   85920:	d107      	bne.n	85932 <_malloc_r+0x62>
   85922:	e0ae      	b.n	85a82 <_malloc_r+0x1b2>
   85924:	2a00      	cmp	r2, #0
   85926:	f280 80ae 	bge.w	85a86 <_malloc_r+0x1b6>
   8592a:	68e4      	ldr	r4, [r4, #12]
   8592c:	42a1      	cmp	r1, r4
   8592e:	f000 80a8 	beq.w	85a82 <_malloc_r+0x1b2>
   85932:	6863      	ldr	r3, [r4, #4]
   85934:	f023 0303 	bic.w	r3, r3, #3
   85938:	1b5a      	subs	r2, r3, r5
   8593a:	2a0f      	cmp	r2, #15
   8593c:	ddf2      	ble.n	85924 <_malloc_r+0x54>
   8593e:	49b4      	ldr	r1, [pc, #720]	; (85c10 <_malloc_r+0x340>)
   85940:	693c      	ldr	r4, [r7, #16]
   85942:	f101 0e08 	add.w	lr, r1, #8
   85946:	4574      	cmp	r4, lr
   85948:	f000 81a8 	beq.w	85c9c <_malloc_r+0x3cc>
   8594c:	6863      	ldr	r3, [r4, #4]
   8594e:	f023 0303 	bic.w	r3, r3, #3
   85952:	1b5a      	subs	r2, r3, r5
   85954:	2a0f      	cmp	r2, #15
   85956:	f300 818e 	bgt.w	85c76 <_malloc_r+0x3a6>
   8595a:	2a00      	cmp	r2, #0
   8595c:	f8c1 e014 	str.w	lr, [r1, #20]
   85960:	f8c1 e010 	str.w	lr, [r1, #16]
   85964:	f280 8093 	bge.w	85a8e <_malloc_r+0x1be>
   85968:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   8596c:	f080 815c 	bcs.w	85c28 <_malloc_r+0x358>
   85970:	08db      	lsrs	r3, r3, #3
   85972:	684a      	ldr	r2, [r1, #4]
   85974:	ea4f 09a3 	mov.w	r9, r3, asr #2
   85978:	f04f 0c01 	mov.w	ip, #1
   8597c:	3301      	adds	r3, #1
   8597e:	f851 8033 	ldr.w	r8, [r1, r3, lsl #3]
   85982:	fa0c f909 	lsl.w	r9, ip, r9
   85986:	eb01 0cc3 	add.w	ip, r1, r3, lsl #3
   8598a:	ea49 0202 	orr.w	r2, r9, r2
   8598e:	f1ac 0c08 	sub.w	ip, ip, #8
   85992:	f8c4 c00c 	str.w	ip, [r4, #12]
   85996:	f8c4 8008 	str.w	r8, [r4, #8]
   8599a:	604a      	str	r2, [r1, #4]
   8599c:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   859a0:	f8c8 400c 	str.w	r4, [r8, #12]
   859a4:	1083      	asrs	r3, r0, #2
   859a6:	2401      	movs	r4, #1
   859a8:	409c      	lsls	r4, r3
   859aa:	4294      	cmp	r4, r2
   859ac:	d87c      	bhi.n	85aa8 <_malloc_r+0x1d8>
   859ae:	4214      	tst	r4, r2
   859b0:	d106      	bne.n	859c0 <_malloc_r+0xf0>
   859b2:	f020 0003 	bic.w	r0, r0, #3
   859b6:	0064      	lsls	r4, r4, #1
   859b8:	4214      	tst	r4, r2
   859ba:	f100 0004 	add.w	r0, r0, #4
   859be:	d0fa      	beq.n	859b6 <_malloc_r+0xe6>
   859c0:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   859c4:	46cc      	mov	ip, r9
   859c6:	4680      	mov	r8, r0
   859c8:	f8dc 100c 	ldr.w	r1, [ip, #12]
   859cc:	458c      	cmp	ip, r1
   859ce:	d107      	bne.n	859e0 <_malloc_r+0x110>
   859d0:	e166      	b.n	85ca0 <_malloc_r+0x3d0>
   859d2:	2a00      	cmp	r2, #0
   859d4:	f280 8174 	bge.w	85cc0 <_malloc_r+0x3f0>
   859d8:	68c9      	ldr	r1, [r1, #12]
   859da:	458c      	cmp	ip, r1
   859dc:	f000 8160 	beq.w	85ca0 <_malloc_r+0x3d0>
   859e0:	684b      	ldr	r3, [r1, #4]
   859e2:	f023 0303 	bic.w	r3, r3, #3
   859e6:	1b5a      	subs	r2, r3, r5
   859e8:	2a0f      	cmp	r2, #15
   859ea:	ddf2      	ble.n	859d2 <_malloc_r+0x102>
   859ec:	460c      	mov	r4, r1
   859ee:	68cb      	ldr	r3, [r1, #12]
   859f0:	f854 cf08 	ldr.w	ip, [r4, #8]!
   859f4:	f045 0801 	orr.w	r8, r5, #1
   859f8:	f8c1 8004 	str.w	r8, [r1, #4]
   859fc:	440d      	add	r5, r1
   859fe:	f042 0101 	orr.w	r1, r2, #1
   85a02:	f8cc 300c 	str.w	r3, [ip, #12]
   85a06:	4630      	mov	r0, r6
   85a08:	f8c3 c008 	str.w	ip, [r3, #8]
   85a0c:	617d      	str	r5, [r7, #20]
   85a0e:	613d      	str	r5, [r7, #16]
   85a10:	f8c5 e00c 	str.w	lr, [r5, #12]
   85a14:	f8c5 e008 	str.w	lr, [r5, #8]
   85a18:	6069      	str	r1, [r5, #4]
   85a1a:	50aa      	str	r2, [r5, r2]
   85a1c:	f000 fb26 	bl	8606c <__malloc_unlock>
   85a20:	e01f      	b.n	85a62 <_malloc_r+0x192>
   85a22:	2910      	cmp	r1, #16
   85a24:	d821      	bhi.n	85a6a <_malloc_r+0x19a>
   85a26:	f000 fb1f 	bl	86068 <__malloc_lock>
   85a2a:	2510      	movs	r5, #16
   85a2c:	2306      	movs	r3, #6
   85a2e:	2002      	movs	r0, #2
   85a30:	4f77      	ldr	r7, [pc, #476]	; (85c10 <_malloc_r+0x340>)
   85a32:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   85a36:	685c      	ldr	r4, [r3, #4]
   85a38:	f1a3 0208 	sub.w	r2, r3, #8
   85a3c:	4294      	cmp	r4, r2
   85a3e:	f000 8138 	beq.w	85cb2 <_malloc_r+0x3e2>
   85a42:	6863      	ldr	r3, [r4, #4]
   85a44:	68e1      	ldr	r1, [r4, #12]
   85a46:	f023 0303 	bic.w	r3, r3, #3
   85a4a:	4423      	add	r3, r4
   85a4c:	685a      	ldr	r2, [r3, #4]
   85a4e:	68a5      	ldr	r5, [r4, #8]
   85a50:	f042 0201 	orr.w	r2, r2, #1
   85a54:	60e9      	str	r1, [r5, #12]
   85a56:	4630      	mov	r0, r6
   85a58:	608d      	str	r5, [r1, #8]
   85a5a:	605a      	str	r2, [r3, #4]
   85a5c:	f000 fb06 	bl	8606c <__malloc_unlock>
   85a60:	3408      	adds	r4, #8
   85a62:	4620      	mov	r0, r4
   85a64:	b003      	add	sp, #12
   85a66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85a6a:	2400      	movs	r4, #0
   85a6c:	4620      	mov	r0, r4
   85a6e:	230c      	movs	r3, #12
   85a70:	6033      	str	r3, [r6, #0]
   85a72:	b003      	add	sp, #12
   85a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85a78:	2180      	movs	r1, #128	; 0x80
   85a7a:	f04f 0e40 	mov.w	lr, #64	; 0x40
   85a7e:	203f      	movs	r0, #63	; 0x3f
   85a80:	e748      	b.n	85914 <_malloc_r+0x44>
   85a82:	4670      	mov	r0, lr
   85a84:	e75b      	b.n	8593e <_malloc_r+0x6e>
   85a86:	4423      	add	r3, r4
   85a88:	685a      	ldr	r2, [r3, #4]
   85a8a:	68e1      	ldr	r1, [r4, #12]
   85a8c:	e7df      	b.n	85a4e <_malloc_r+0x17e>
   85a8e:	4423      	add	r3, r4
   85a90:	685a      	ldr	r2, [r3, #4]
   85a92:	4630      	mov	r0, r6
   85a94:	f042 0201 	orr.w	r2, r2, #1
   85a98:	605a      	str	r2, [r3, #4]
   85a9a:	3408      	adds	r4, #8
   85a9c:	f000 fae6 	bl	8606c <__malloc_unlock>
   85aa0:	4620      	mov	r0, r4
   85aa2:	b003      	add	sp, #12
   85aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85aa8:	68bc      	ldr	r4, [r7, #8]
   85aaa:	6863      	ldr	r3, [r4, #4]
   85aac:	f023 0803 	bic.w	r8, r3, #3
   85ab0:	45a8      	cmp	r8, r5
   85ab2:	d304      	bcc.n	85abe <_malloc_r+0x1ee>
   85ab4:	ebc5 0308 	rsb	r3, r5, r8
   85ab8:	2b0f      	cmp	r3, #15
   85aba:	f300 808c 	bgt.w	85bd6 <_malloc_r+0x306>
   85abe:	4b55      	ldr	r3, [pc, #340]	; (85c14 <_malloc_r+0x344>)
   85ac0:	f8df 9160 	ldr.w	r9, [pc, #352]	; 85c24 <_malloc_r+0x354>
   85ac4:	681a      	ldr	r2, [r3, #0]
   85ac6:	f8d9 3000 	ldr.w	r3, [r9]
   85aca:	442a      	add	r2, r5
   85acc:	3301      	adds	r3, #1
   85ace:	eb04 0a08 	add.w	sl, r4, r8
   85ad2:	f000 8160 	beq.w	85d96 <_malloc_r+0x4c6>
   85ad6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   85ada:	320f      	adds	r2, #15
   85adc:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
   85ae0:	f022 020f 	bic.w	r2, r2, #15
   85ae4:	4611      	mov	r1, r2
   85ae6:	4630      	mov	r0, r6
   85ae8:	9201      	str	r2, [sp, #4]
   85aea:	f000 fcab 	bl	86444 <_sbrk_r>
   85aee:	f1b0 3fff 	cmp.w	r0, #4294967295
   85af2:	4683      	mov	fp, r0
   85af4:	9a01      	ldr	r2, [sp, #4]
   85af6:	f000 8158 	beq.w	85daa <_malloc_r+0x4da>
   85afa:	4582      	cmp	sl, r0
   85afc:	f200 80fc 	bhi.w	85cf8 <_malloc_r+0x428>
   85b00:	4b45      	ldr	r3, [pc, #276]	; (85c18 <_malloc_r+0x348>)
   85b02:	45da      	cmp	sl, fp
   85b04:	6819      	ldr	r1, [r3, #0]
   85b06:	4411      	add	r1, r2
   85b08:	6019      	str	r1, [r3, #0]
   85b0a:	f000 8153 	beq.w	85db4 <_malloc_r+0x4e4>
   85b0e:	f8d9 0000 	ldr.w	r0, [r9]
   85b12:	f8df e110 	ldr.w	lr, [pc, #272]	; 85c24 <_malloc_r+0x354>
   85b16:	3001      	adds	r0, #1
   85b18:	bf1b      	ittet	ne
   85b1a:	ebca 0a0b 	rsbne	sl, sl, fp
   85b1e:	4451      	addne	r1, sl
   85b20:	f8ce b000 	streq.w	fp, [lr]
   85b24:	6019      	strne	r1, [r3, #0]
   85b26:	f01b 0107 	ands.w	r1, fp, #7
   85b2a:	f000 8117 	beq.w	85d5c <_malloc_r+0x48c>
   85b2e:	f1c1 0008 	rsb	r0, r1, #8
   85b32:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   85b36:	4483      	add	fp, r0
   85b38:	3108      	adds	r1, #8
   85b3a:	445a      	add	r2, fp
   85b3c:	f3c2 020b 	ubfx	r2, r2, #0, #12
   85b40:	ebc2 0901 	rsb	r9, r2, r1
   85b44:	4649      	mov	r1, r9
   85b46:	4630      	mov	r0, r6
   85b48:	9301      	str	r3, [sp, #4]
   85b4a:	f000 fc7b 	bl	86444 <_sbrk_r>
   85b4e:	1c43      	adds	r3, r0, #1
   85b50:	9b01      	ldr	r3, [sp, #4]
   85b52:	f000 813f 	beq.w	85dd4 <_malloc_r+0x504>
   85b56:	ebcb 0200 	rsb	r2, fp, r0
   85b5a:	444a      	add	r2, r9
   85b5c:	f042 0201 	orr.w	r2, r2, #1
   85b60:	6819      	ldr	r1, [r3, #0]
   85b62:	42bc      	cmp	r4, r7
   85b64:	4449      	add	r1, r9
   85b66:	f8c7 b008 	str.w	fp, [r7, #8]
   85b6a:	6019      	str	r1, [r3, #0]
   85b6c:	f8cb 2004 	str.w	r2, [fp, #4]
   85b70:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 85c18 <_malloc_r+0x348>
   85b74:	d016      	beq.n	85ba4 <_malloc_r+0x2d4>
   85b76:	f1b8 0f0f 	cmp.w	r8, #15
   85b7a:	f240 80fd 	bls.w	85d78 <_malloc_r+0x4a8>
   85b7e:	6862      	ldr	r2, [r4, #4]
   85b80:	f1a8 030c 	sub.w	r3, r8, #12
   85b84:	f023 0307 	bic.w	r3, r3, #7
   85b88:	f002 0201 	and.w	r2, r2, #1
   85b8c:	18e0      	adds	r0, r4, r3
   85b8e:	f04f 0e05 	mov.w	lr, #5
   85b92:	431a      	orrs	r2, r3
   85b94:	2b0f      	cmp	r3, #15
   85b96:	6062      	str	r2, [r4, #4]
   85b98:	f8c0 e004 	str.w	lr, [r0, #4]
   85b9c:	f8c0 e008 	str.w	lr, [r0, #8]
   85ba0:	f200 811c 	bhi.w	85ddc <_malloc_r+0x50c>
   85ba4:	4b1d      	ldr	r3, [pc, #116]	; (85c1c <_malloc_r+0x34c>)
   85ba6:	68bc      	ldr	r4, [r7, #8]
   85ba8:	681a      	ldr	r2, [r3, #0]
   85baa:	4291      	cmp	r1, r2
   85bac:	bf88      	it	hi
   85bae:	6019      	strhi	r1, [r3, #0]
   85bb0:	4b1b      	ldr	r3, [pc, #108]	; (85c20 <_malloc_r+0x350>)
   85bb2:	681a      	ldr	r2, [r3, #0]
   85bb4:	4291      	cmp	r1, r2
   85bb6:	6862      	ldr	r2, [r4, #4]
   85bb8:	bf88      	it	hi
   85bba:	6019      	strhi	r1, [r3, #0]
   85bbc:	f022 0203 	bic.w	r2, r2, #3
   85bc0:	4295      	cmp	r5, r2
   85bc2:	eba2 0305 	sub.w	r3, r2, r5
   85bc6:	d801      	bhi.n	85bcc <_malloc_r+0x2fc>
   85bc8:	2b0f      	cmp	r3, #15
   85bca:	dc04      	bgt.n	85bd6 <_malloc_r+0x306>
   85bcc:	4630      	mov	r0, r6
   85bce:	f000 fa4d 	bl	8606c <__malloc_unlock>
   85bd2:	2400      	movs	r4, #0
   85bd4:	e745      	b.n	85a62 <_malloc_r+0x192>
   85bd6:	f045 0201 	orr.w	r2, r5, #1
   85bda:	f043 0301 	orr.w	r3, r3, #1
   85bde:	4425      	add	r5, r4
   85be0:	6062      	str	r2, [r4, #4]
   85be2:	4630      	mov	r0, r6
   85be4:	60bd      	str	r5, [r7, #8]
   85be6:	3408      	adds	r4, #8
   85be8:	606b      	str	r3, [r5, #4]
   85bea:	f000 fa3f 	bl	8606c <__malloc_unlock>
   85bee:	4620      	mov	r0, r4
   85bf0:	b003      	add	sp, #12
   85bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85bf6:	2b14      	cmp	r3, #20
   85bf8:	d971      	bls.n	85cde <_malloc_r+0x40e>
   85bfa:	2b54      	cmp	r3, #84	; 0x54
   85bfc:	f200 80a4 	bhi.w	85d48 <_malloc_r+0x478>
   85c00:	0b28      	lsrs	r0, r5, #12
   85c02:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
   85c06:	ea4f 014e 	mov.w	r1, lr, lsl #1
   85c0a:	306e      	adds	r0, #110	; 0x6e
   85c0c:	e682      	b.n	85914 <_malloc_r+0x44>
   85c0e:	bf00      	nop
   85c10:	200705c4 	.word	0x200705c4
   85c14:	20070a88 	.word	0x20070a88
   85c18:	20070a8c 	.word	0x20070a8c
   85c1c:	20070a84 	.word	0x20070a84
   85c20:	20070a80 	.word	0x20070a80
   85c24:	200709d0 	.word	0x200709d0
   85c28:	0a5a      	lsrs	r2, r3, #9
   85c2a:	2a04      	cmp	r2, #4
   85c2c:	d95e      	bls.n	85cec <_malloc_r+0x41c>
   85c2e:	2a14      	cmp	r2, #20
   85c30:	f200 80b3 	bhi.w	85d9a <_malloc_r+0x4ca>
   85c34:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   85c38:	0049      	lsls	r1, r1, #1
   85c3a:	325b      	adds	r2, #91	; 0x5b
   85c3c:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
   85c40:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
   85c44:	f1ac 0c08 	sub.w	ip, ip, #8
   85c48:	458c      	cmp	ip, r1
   85c4a:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 85e24 <_malloc_r+0x554>
   85c4e:	f000 8088 	beq.w	85d62 <_malloc_r+0x492>
   85c52:	684a      	ldr	r2, [r1, #4]
   85c54:	f022 0203 	bic.w	r2, r2, #3
   85c58:	4293      	cmp	r3, r2
   85c5a:	d202      	bcs.n	85c62 <_malloc_r+0x392>
   85c5c:	6889      	ldr	r1, [r1, #8]
   85c5e:	458c      	cmp	ip, r1
   85c60:	d1f7      	bne.n	85c52 <_malloc_r+0x382>
   85c62:	f8d1 c00c 	ldr.w	ip, [r1, #12]
   85c66:	687a      	ldr	r2, [r7, #4]
   85c68:	f8c4 c00c 	str.w	ip, [r4, #12]
   85c6c:	60a1      	str	r1, [r4, #8]
   85c6e:	f8cc 4008 	str.w	r4, [ip, #8]
   85c72:	60cc      	str	r4, [r1, #12]
   85c74:	e696      	b.n	859a4 <_malloc_r+0xd4>
   85c76:	f045 0701 	orr.w	r7, r5, #1
   85c7a:	f042 0301 	orr.w	r3, r2, #1
   85c7e:	4425      	add	r5, r4
   85c80:	6067      	str	r7, [r4, #4]
   85c82:	4630      	mov	r0, r6
   85c84:	614d      	str	r5, [r1, #20]
   85c86:	610d      	str	r5, [r1, #16]
   85c88:	f8c5 e00c 	str.w	lr, [r5, #12]
   85c8c:	f8c5 e008 	str.w	lr, [r5, #8]
   85c90:	606b      	str	r3, [r5, #4]
   85c92:	50aa      	str	r2, [r5, r2]
   85c94:	3408      	adds	r4, #8
   85c96:	f000 f9e9 	bl	8606c <__malloc_unlock>
   85c9a:	e6e2      	b.n	85a62 <_malloc_r+0x192>
   85c9c:	684a      	ldr	r2, [r1, #4]
   85c9e:	e681      	b.n	859a4 <_malloc_r+0xd4>
   85ca0:	f108 0801 	add.w	r8, r8, #1
   85ca4:	f018 0f03 	tst.w	r8, #3
   85ca8:	f10c 0c08 	add.w	ip, ip, #8
   85cac:	f47f ae8c 	bne.w	859c8 <_malloc_r+0xf8>
   85cb0:	e030      	b.n	85d14 <_malloc_r+0x444>
   85cb2:	68dc      	ldr	r4, [r3, #12]
   85cb4:	42a3      	cmp	r3, r4
   85cb6:	bf08      	it	eq
   85cb8:	3002      	addeq	r0, #2
   85cba:	f43f ae40 	beq.w	8593e <_malloc_r+0x6e>
   85cbe:	e6c0      	b.n	85a42 <_malloc_r+0x172>
   85cc0:	460c      	mov	r4, r1
   85cc2:	440b      	add	r3, r1
   85cc4:	685a      	ldr	r2, [r3, #4]
   85cc6:	68c9      	ldr	r1, [r1, #12]
   85cc8:	f854 5f08 	ldr.w	r5, [r4, #8]!
   85ccc:	f042 0201 	orr.w	r2, r2, #1
   85cd0:	605a      	str	r2, [r3, #4]
   85cd2:	4630      	mov	r0, r6
   85cd4:	60e9      	str	r1, [r5, #12]
   85cd6:	608d      	str	r5, [r1, #8]
   85cd8:	f000 f9c8 	bl	8606c <__malloc_unlock>
   85cdc:	e6c1      	b.n	85a62 <_malloc_r+0x192>
   85cde:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
   85ce2:	f103 005b 	add.w	r0, r3, #91	; 0x5b
   85ce6:	ea4f 014e 	mov.w	r1, lr, lsl #1
   85cea:	e613      	b.n	85914 <_malloc_r+0x44>
   85cec:	099a      	lsrs	r2, r3, #6
   85cee:	f102 0139 	add.w	r1, r2, #57	; 0x39
   85cf2:	0049      	lsls	r1, r1, #1
   85cf4:	3238      	adds	r2, #56	; 0x38
   85cf6:	e7a1      	b.n	85c3c <_malloc_r+0x36c>
   85cf8:	42bc      	cmp	r4, r7
   85cfa:	4b4a      	ldr	r3, [pc, #296]	; (85e24 <_malloc_r+0x554>)
   85cfc:	f43f af00 	beq.w	85b00 <_malloc_r+0x230>
   85d00:	689c      	ldr	r4, [r3, #8]
   85d02:	6862      	ldr	r2, [r4, #4]
   85d04:	f022 0203 	bic.w	r2, r2, #3
   85d08:	e75a      	b.n	85bc0 <_malloc_r+0x2f0>
   85d0a:	f859 3908 	ldr.w	r3, [r9], #-8
   85d0e:	4599      	cmp	r9, r3
   85d10:	f040 8082 	bne.w	85e18 <_malloc_r+0x548>
   85d14:	f010 0f03 	tst.w	r0, #3
   85d18:	f100 30ff 	add.w	r0, r0, #4294967295
   85d1c:	d1f5      	bne.n	85d0a <_malloc_r+0x43a>
   85d1e:	687b      	ldr	r3, [r7, #4]
   85d20:	ea23 0304 	bic.w	r3, r3, r4
   85d24:	607b      	str	r3, [r7, #4]
   85d26:	0064      	lsls	r4, r4, #1
   85d28:	429c      	cmp	r4, r3
   85d2a:	f63f aebd 	bhi.w	85aa8 <_malloc_r+0x1d8>
   85d2e:	2c00      	cmp	r4, #0
   85d30:	f43f aeba 	beq.w	85aa8 <_malloc_r+0x1d8>
   85d34:	421c      	tst	r4, r3
   85d36:	4640      	mov	r0, r8
   85d38:	f47f ae42 	bne.w	859c0 <_malloc_r+0xf0>
   85d3c:	0064      	lsls	r4, r4, #1
   85d3e:	421c      	tst	r4, r3
   85d40:	f100 0004 	add.w	r0, r0, #4
   85d44:	d0fa      	beq.n	85d3c <_malloc_r+0x46c>
   85d46:	e63b      	b.n	859c0 <_malloc_r+0xf0>
   85d48:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   85d4c:	d818      	bhi.n	85d80 <_malloc_r+0x4b0>
   85d4e:	0be8      	lsrs	r0, r5, #15
   85d50:	f100 0e78 	add.w	lr, r0, #120	; 0x78
   85d54:	ea4f 014e 	mov.w	r1, lr, lsl #1
   85d58:	3077      	adds	r0, #119	; 0x77
   85d5a:	e5db      	b.n	85914 <_malloc_r+0x44>
   85d5c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   85d60:	e6eb      	b.n	85b3a <_malloc_r+0x26a>
   85d62:	2101      	movs	r1, #1
   85d64:	f8d8 3004 	ldr.w	r3, [r8, #4]
   85d68:	1092      	asrs	r2, r2, #2
   85d6a:	fa01 f202 	lsl.w	r2, r1, r2
   85d6e:	431a      	orrs	r2, r3
   85d70:	f8c8 2004 	str.w	r2, [r8, #4]
   85d74:	4661      	mov	r1, ip
   85d76:	e777      	b.n	85c68 <_malloc_r+0x398>
   85d78:	2301      	movs	r3, #1
   85d7a:	f8cb 3004 	str.w	r3, [fp, #4]
   85d7e:	e725      	b.n	85bcc <_malloc_r+0x2fc>
   85d80:	f240 5254 	movw	r2, #1364	; 0x554
   85d84:	4293      	cmp	r3, r2
   85d86:	d820      	bhi.n	85dca <_malloc_r+0x4fa>
   85d88:	0ca8      	lsrs	r0, r5, #18
   85d8a:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
   85d8e:	ea4f 014e 	mov.w	r1, lr, lsl #1
   85d92:	307c      	adds	r0, #124	; 0x7c
   85d94:	e5be      	b.n	85914 <_malloc_r+0x44>
   85d96:	3210      	adds	r2, #16
   85d98:	e6a4      	b.n	85ae4 <_malloc_r+0x214>
   85d9a:	2a54      	cmp	r2, #84	; 0x54
   85d9c:	d826      	bhi.n	85dec <_malloc_r+0x51c>
   85d9e:	0b1a      	lsrs	r2, r3, #12
   85da0:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   85da4:	0049      	lsls	r1, r1, #1
   85da6:	326e      	adds	r2, #110	; 0x6e
   85da8:	e748      	b.n	85c3c <_malloc_r+0x36c>
   85daa:	68bc      	ldr	r4, [r7, #8]
   85dac:	6862      	ldr	r2, [r4, #4]
   85dae:	f022 0203 	bic.w	r2, r2, #3
   85db2:	e705      	b.n	85bc0 <_malloc_r+0x2f0>
   85db4:	f3ca 000b 	ubfx	r0, sl, #0, #12
   85db8:	2800      	cmp	r0, #0
   85dba:	f47f aea8 	bne.w	85b0e <_malloc_r+0x23e>
   85dbe:	4442      	add	r2, r8
   85dc0:	68bb      	ldr	r3, [r7, #8]
   85dc2:	f042 0201 	orr.w	r2, r2, #1
   85dc6:	605a      	str	r2, [r3, #4]
   85dc8:	e6ec      	b.n	85ba4 <_malloc_r+0x2d4>
   85dca:	21fe      	movs	r1, #254	; 0xfe
   85dcc:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
   85dd0:	207e      	movs	r0, #126	; 0x7e
   85dd2:	e59f      	b.n	85914 <_malloc_r+0x44>
   85dd4:	2201      	movs	r2, #1
   85dd6:	f04f 0900 	mov.w	r9, #0
   85dda:	e6c1      	b.n	85b60 <_malloc_r+0x290>
   85ddc:	f104 0108 	add.w	r1, r4, #8
   85de0:	4630      	mov	r0, r6
   85de2:	f7ff fa65 	bl	852b0 <_free_r>
   85de6:	f8d9 1000 	ldr.w	r1, [r9]
   85dea:	e6db      	b.n	85ba4 <_malloc_r+0x2d4>
   85dec:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   85df0:	d805      	bhi.n	85dfe <_malloc_r+0x52e>
   85df2:	0bda      	lsrs	r2, r3, #15
   85df4:	f102 0178 	add.w	r1, r2, #120	; 0x78
   85df8:	0049      	lsls	r1, r1, #1
   85dfa:	3277      	adds	r2, #119	; 0x77
   85dfc:	e71e      	b.n	85c3c <_malloc_r+0x36c>
   85dfe:	f240 5154 	movw	r1, #1364	; 0x554
   85e02:	428a      	cmp	r2, r1
   85e04:	d805      	bhi.n	85e12 <_malloc_r+0x542>
   85e06:	0c9a      	lsrs	r2, r3, #18
   85e08:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   85e0c:	0049      	lsls	r1, r1, #1
   85e0e:	327c      	adds	r2, #124	; 0x7c
   85e10:	e714      	b.n	85c3c <_malloc_r+0x36c>
   85e12:	21fe      	movs	r1, #254	; 0xfe
   85e14:	227e      	movs	r2, #126	; 0x7e
   85e16:	e711      	b.n	85c3c <_malloc_r+0x36c>
   85e18:	687b      	ldr	r3, [r7, #4]
   85e1a:	e784      	b.n	85d26 <_malloc_r+0x456>
   85e1c:	08e8      	lsrs	r0, r5, #3
   85e1e:	1c43      	adds	r3, r0, #1
   85e20:	005b      	lsls	r3, r3, #1
   85e22:	e605      	b.n	85a30 <_malloc_r+0x160>
   85e24:	200705c4 	.word	0x200705c4

00085e28 <memchr>:
   85e28:	0783      	lsls	r3, r0, #30
   85e2a:	b470      	push	{r4, r5, r6}
   85e2c:	b2cd      	uxtb	r5, r1
   85e2e:	d03d      	beq.n	85eac <memchr+0x84>
   85e30:	1e53      	subs	r3, r2, #1
   85e32:	b302      	cbz	r2, 85e76 <memchr+0x4e>
   85e34:	7802      	ldrb	r2, [r0, #0]
   85e36:	42aa      	cmp	r2, r5
   85e38:	d01e      	beq.n	85e78 <memchr+0x50>
   85e3a:	1c42      	adds	r2, r0, #1
   85e3c:	e004      	b.n	85e48 <memchr+0x20>
   85e3e:	b1d3      	cbz	r3, 85e76 <memchr+0x4e>
   85e40:	7804      	ldrb	r4, [r0, #0]
   85e42:	3b01      	subs	r3, #1
   85e44:	42ac      	cmp	r4, r5
   85e46:	d017      	beq.n	85e78 <memchr+0x50>
   85e48:	f012 0f03 	tst.w	r2, #3
   85e4c:	4610      	mov	r0, r2
   85e4e:	f102 0201 	add.w	r2, r2, #1
   85e52:	d1f4      	bne.n	85e3e <memchr+0x16>
   85e54:	2b03      	cmp	r3, #3
   85e56:	d811      	bhi.n	85e7c <memchr+0x54>
   85e58:	b353      	cbz	r3, 85eb0 <memchr+0x88>
   85e5a:	7802      	ldrb	r2, [r0, #0]
   85e5c:	42aa      	cmp	r2, r5
   85e5e:	d00b      	beq.n	85e78 <memchr+0x50>
   85e60:	4403      	add	r3, r0
   85e62:	1c42      	adds	r2, r0, #1
   85e64:	e002      	b.n	85e6c <memchr+0x44>
   85e66:	7801      	ldrb	r1, [r0, #0]
   85e68:	42a9      	cmp	r1, r5
   85e6a:	d005      	beq.n	85e78 <memchr+0x50>
   85e6c:	4293      	cmp	r3, r2
   85e6e:	4610      	mov	r0, r2
   85e70:	f102 0201 	add.w	r2, r2, #1
   85e74:	d1f7      	bne.n	85e66 <memchr+0x3e>
   85e76:	2000      	movs	r0, #0
   85e78:	bc70      	pop	{r4, r5, r6}
   85e7a:	4770      	bx	lr
   85e7c:	4604      	mov	r4, r0
   85e7e:	020e      	lsls	r6, r1, #8
   85e80:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
   85e84:	432e      	orrs	r6, r5
   85e86:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   85e8a:	6822      	ldr	r2, [r4, #0]
   85e8c:	4620      	mov	r0, r4
   85e8e:	4072      	eors	r2, r6
   85e90:	f1a2 3101 	sub.w	r1, r2, #16843009	; 0x1010101
   85e94:	ea21 0202 	bic.w	r2, r1, r2
   85e98:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   85e9c:	f104 0404 	add.w	r4, r4, #4
   85ea0:	d1db      	bne.n	85e5a <memchr+0x32>
   85ea2:	3b04      	subs	r3, #4
   85ea4:	2b03      	cmp	r3, #3
   85ea6:	4620      	mov	r0, r4
   85ea8:	d8ef      	bhi.n	85e8a <memchr+0x62>
   85eaa:	e7d5      	b.n	85e58 <memchr+0x30>
   85eac:	4613      	mov	r3, r2
   85eae:	e7d1      	b.n	85e54 <memchr+0x2c>
   85eb0:	4618      	mov	r0, r3
   85eb2:	e7e1      	b.n	85e78 <memchr+0x50>

00085eb4 <memcpy>:
   85eb4:	4684      	mov	ip, r0
   85eb6:	ea41 0300 	orr.w	r3, r1, r0
   85eba:	f013 0303 	ands.w	r3, r3, #3
   85ebe:	d149      	bne.n	85f54 <memcpy+0xa0>
   85ec0:	3a40      	subs	r2, #64	; 0x40
   85ec2:	d323      	bcc.n	85f0c <memcpy+0x58>
   85ec4:	680b      	ldr	r3, [r1, #0]
   85ec6:	6003      	str	r3, [r0, #0]
   85ec8:	684b      	ldr	r3, [r1, #4]
   85eca:	6043      	str	r3, [r0, #4]
   85ecc:	688b      	ldr	r3, [r1, #8]
   85ece:	6083      	str	r3, [r0, #8]
   85ed0:	68cb      	ldr	r3, [r1, #12]
   85ed2:	60c3      	str	r3, [r0, #12]
   85ed4:	690b      	ldr	r3, [r1, #16]
   85ed6:	6103      	str	r3, [r0, #16]
   85ed8:	694b      	ldr	r3, [r1, #20]
   85eda:	6143      	str	r3, [r0, #20]
   85edc:	698b      	ldr	r3, [r1, #24]
   85ede:	6183      	str	r3, [r0, #24]
   85ee0:	69cb      	ldr	r3, [r1, #28]
   85ee2:	61c3      	str	r3, [r0, #28]
   85ee4:	6a0b      	ldr	r3, [r1, #32]
   85ee6:	6203      	str	r3, [r0, #32]
   85ee8:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   85eea:	6243      	str	r3, [r0, #36]	; 0x24
   85eec:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   85eee:	6283      	str	r3, [r0, #40]	; 0x28
   85ef0:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   85ef2:	62c3      	str	r3, [r0, #44]	; 0x2c
   85ef4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   85ef6:	6303      	str	r3, [r0, #48]	; 0x30
   85ef8:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   85efa:	6343      	str	r3, [r0, #52]	; 0x34
   85efc:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   85efe:	6383      	str	r3, [r0, #56]	; 0x38
   85f00:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   85f02:	63c3      	str	r3, [r0, #60]	; 0x3c
   85f04:	3040      	adds	r0, #64	; 0x40
   85f06:	3140      	adds	r1, #64	; 0x40
   85f08:	3a40      	subs	r2, #64	; 0x40
   85f0a:	d2db      	bcs.n	85ec4 <memcpy+0x10>
   85f0c:	3230      	adds	r2, #48	; 0x30
   85f0e:	d30b      	bcc.n	85f28 <memcpy+0x74>
   85f10:	680b      	ldr	r3, [r1, #0]
   85f12:	6003      	str	r3, [r0, #0]
   85f14:	684b      	ldr	r3, [r1, #4]
   85f16:	6043      	str	r3, [r0, #4]
   85f18:	688b      	ldr	r3, [r1, #8]
   85f1a:	6083      	str	r3, [r0, #8]
   85f1c:	68cb      	ldr	r3, [r1, #12]
   85f1e:	60c3      	str	r3, [r0, #12]
   85f20:	3010      	adds	r0, #16
   85f22:	3110      	adds	r1, #16
   85f24:	3a10      	subs	r2, #16
   85f26:	d2f3      	bcs.n	85f10 <memcpy+0x5c>
   85f28:	320c      	adds	r2, #12
   85f2a:	d305      	bcc.n	85f38 <memcpy+0x84>
   85f2c:	f851 3b04 	ldr.w	r3, [r1], #4
   85f30:	f840 3b04 	str.w	r3, [r0], #4
   85f34:	3a04      	subs	r2, #4
   85f36:	d2f9      	bcs.n	85f2c <memcpy+0x78>
   85f38:	3204      	adds	r2, #4
   85f3a:	d008      	beq.n	85f4e <memcpy+0x9a>
   85f3c:	07d2      	lsls	r2, r2, #31
   85f3e:	bf1c      	itt	ne
   85f40:	f811 3b01 	ldrbne.w	r3, [r1], #1
   85f44:	f800 3b01 	strbne.w	r3, [r0], #1
   85f48:	d301      	bcc.n	85f4e <memcpy+0x9a>
   85f4a:	880b      	ldrh	r3, [r1, #0]
   85f4c:	8003      	strh	r3, [r0, #0]
   85f4e:	4660      	mov	r0, ip
   85f50:	4770      	bx	lr
   85f52:	bf00      	nop
   85f54:	2a08      	cmp	r2, #8
   85f56:	d313      	bcc.n	85f80 <memcpy+0xcc>
   85f58:	078b      	lsls	r3, r1, #30
   85f5a:	d0b1      	beq.n	85ec0 <memcpy+0xc>
   85f5c:	f010 0303 	ands.w	r3, r0, #3
   85f60:	d0ae      	beq.n	85ec0 <memcpy+0xc>
   85f62:	f1c3 0304 	rsb	r3, r3, #4
   85f66:	1ad2      	subs	r2, r2, r3
   85f68:	07db      	lsls	r3, r3, #31
   85f6a:	bf1c      	itt	ne
   85f6c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   85f70:	f800 3b01 	strbne.w	r3, [r0], #1
   85f74:	d3a4      	bcc.n	85ec0 <memcpy+0xc>
   85f76:	f831 3b02 	ldrh.w	r3, [r1], #2
   85f7a:	f820 3b02 	strh.w	r3, [r0], #2
   85f7e:	e79f      	b.n	85ec0 <memcpy+0xc>
   85f80:	3a04      	subs	r2, #4
   85f82:	d3d9      	bcc.n	85f38 <memcpy+0x84>
   85f84:	3a01      	subs	r2, #1
   85f86:	f811 3b01 	ldrb.w	r3, [r1], #1
   85f8a:	f800 3b01 	strb.w	r3, [r0], #1
   85f8e:	d2f9      	bcs.n	85f84 <memcpy+0xd0>
   85f90:	780b      	ldrb	r3, [r1, #0]
   85f92:	7003      	strb	r3, [r0, #0]
   85f94:	784b      	ldrb	r3, [r1, #1]
   85f96:	7043      	strb	r3, [r0, #1]
   85f98:	788b      	ldrb	r3, [r1, #2]
   85f9a:	7083      	strb	r3, [r0, #2]
   85f9c:	4660      	mov	r0, ip
   85f9e:	4770      	bx	lr

00085fa0 <memmove>:
   85fa0:	4288      	cmp	r0, r1
   85fa2:	b5f0      	push	{r4, r5, r6, r7, lr}
   85fa4:	d90d      	bls.n	85fc2 <memmove+0x22>
   85fa6:	188b      	adds	r3, r1, r2
   85fa8:	4298      	cmp	r0, r3
   85faa:	d20a      	bcs.n	85fc2 <memmove+0x22>
   85fac:	1881      	adds	r1, r0, r2
   85fae:	2a00      	cmp	r2, #0
   85fb0:	d051      	beq.n	86056 <memmove+0xb6>
   85fb2:	1a9a      	subs	r2, r3, r2
   85fb4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   85fb8:	4293      	cmp	r3, r2
   85fba:	f801 4d01 	strb.w	r4, [r1, #-1]!
   85fbe:	d1f9      	bne.n	85fb4 <memmove+0x14>
   85fc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   85fc2:	2a0f      	cmp	r2, #15
   85fc4:	d948      	bls.n	86058 <memmove+0xb8>
   85fc6:	ea41 0300 	orr.w	r3, r1, r0
   85fca:	079b      	lsls	r3, r3, #30
   85fcc:	d146      	bne.n	8605c <memmove+0xbc>
   85fce:	4615      	mov	r5, r2
   85fd0:	f100 0410 	add.w	r4, r0, #16
   85fd4:	f101 0310 	add.w	r3, r1, #16
   85fd8:	f853 6c10 	ldr.w	r6, [r3, #-16]
   85fdc:	3d10      	subs	r5, #16
   85fde:	f844 6c10 	str.w	r6, [r4, #-16]
   85fe2:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   85fe6:	2d0f      	cmp	r5, #15
   85fe8:	f844 6c0c 	str.w	r6, [r4, #-12]
   85fec:	f853 6c08 	ldr.w	r6, [r3, #-8]
   85ff0:	f104 0410 	add.w	r4, r4, #16
   85ff4:	f844 6c18 	str.w	r6, [r4, #-24]
   85ff8:	f853 6c04 	ldr.w	r6, [r3, #-4]
   85ffc:	f103 0310 	add.w	r3, r3, #16
   86000:	f844 6c14 	str.w	r6, [r4, #-20]
   86004:	d8e8      	bhi.n	85fd8 <memmove+0x38>
   86006:	f1a2 0310 	sub.w	r3, r2, #16
   8600a:	f023 030f 	bic.w	r3, r3, #15
   8600e:	f002 0e0f 	and.w	lr, r2, #15
   86012:	3310      	adds	r3, #16
   86014:	f1be 0f03 	cmp.w	lr, #3
   86018:	4419      	add	r1, r3
   8601a:	4403      	add	r3, r0
   8601c:	d921      	bls.n	86062 <memmove+0xc2>
   8601e:	460e      	mov	r6, r1
   86020:	4674      	mov	r4, lr
   86022:	1f1d      	subs	r5, r3, #4
   86024:	f856 7b04 	ldr.w	r7, [r6], #4
   86028:	3c04      	subs	r4, #4
   8602a:	2c03      	cmp	r4, #3
   8602c:	f845 7f04 	str.w	r7, [r5, #4]!
   86030:	d8f8      	bhi.n	86024 <memmove+0x84>
   86032:	f1ae 0404 	sub.w	r4, lr, #4
   86036:	f024 0403 	bic.w	r4, r4, #3
   8603a:	3404      	adds	r4, #4
   8603c:	4423      	add	r3, r4
   8603e:	4421      	add	r1, r4
   86040:	f002 0203 	and.w	r2, r2, #3
   86044:	b162      	cbz	r2, 86060 <memmove+0xc0>
   86046:	3b01      	subs	r3, #1
   86048:	440a      	add	r2, r1
   8604a:	f811 4b01 	ldrb.w	r4, [r1], #1
   8604e:	428a      	cmp	r2, r1
   86050:	f803 4f01 	strb.w	r4, [r3, #1]!
   86054:	d1f9      	bne.n	8604a <memmove+0xaa>
   86056:	bdf0      	pop	{r4, r5, r6, r7, pc}
   86058:	4603      	mov	r3, r0
   8605a:	e7f3      	b.n	86044 <memmove+0xa4>
   8605c:	4603      	mov	r3, r0
   8605e:	e7f2      	b.n	86046 <memmove+0xa6>
   86060:	bdf0      	pop	{r4, r5, r6, r7, pc}
   86062:	4672      	mov	r2, lr
   86064:	e7ee      	b.n	86044 <memmove+0xa4>
   86066:	bf00      	nop

00086068 <__malloc_lock>:
   86068:	4770      	bx	lr
   8606a:	bf00      	nop

0008606c <__malloc_unlock>:
   8606c:	4770      	bx	lr
   8606e:	bf00      	nop

00086070 <_realloc_r>:
   86070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86074:	4617      	mov	r7, r2
   86076:	b083      	sub	sp, #12
   86078:	2900      	cmp	r1, #0
   8607a:	f000 808f 	beq.w	8619c <_realloc_r+0x12c>
   8607e:	460d      	mov	r5, r1
   86080:	4681      	mov	r9, r0
   86082:	f107 040b 	add.w	r4, r7, #11
   86086:	f7ff ffef 	bl	86068 <__malloc_lock>
   8608a:	f855 ec04 	ldr.w	lr, [r5, #-4]
   8608e:	2c16      	cmp	r4, #22
   86090:	f02e 0603 	bic.w	r6, lr, #3
   86094:	f1a5 0808 	sub.w	r8, r5, #8
   86098:	d83c      	bhi.n	86114 <_realloc_r+0xa4>
   8609a:	2210      	movs	r2, #16
   8609c:	4614      	mov	r4, r2
   8609e:	42a7      	cmp	r7, r4
   860a0:	d83d      	bhi.n	8611e <_realloc_r+0xae>
   860a2:	4296      	cmp	r6, r2
   860a4:	da42      	bge.n	8612c <_realloc_r+0xbc>
   860a6:	4bc6      	ldr	r3, [pc, #792]	; (863c0 <_realloc_r+0x350>)
   860a8:	eb08 0006 	add.w	r0, r8, r6
   860ac:	6899      	ldr	r1, [r3, #8]
   860ae:	4288      	cmp	r0, r1
   860b0:	6841      	ldr	r1, [r0, #4]
   860b2:	f000 80d7 	beq.w	86264 <_realloc_r+0x1f4>
   860b6:	f021 0301 	bic.w	r3, r1, #1
   860ba:	4403      	add	r3, r0
   860bc:	685b      	ldr	r3, [r3, #4]
   860be:	07db      	lsls	r3, r3, #31
   860c0:	d54c      	bpl.n	8615c <_realloc_r+0xec>
   860c2:	f01e 0f01 	tst.w	lr, #1
   860c6:	f000 809d 	beq.w	86204 <_realloc_r+0x194>
   860ca:	4639      	mov	r1, r7
   860cc:	4648      	mov	r0, r9
   860ce:	f7ff fbff 	bl	858d0 <_malloc_r>
   860d2:	4607      	mov	r7, r0
   860d4:	2800      	cmp	r0, #0
   860d6:	d03a      	beq.n	8614e <_realloc_r+0xde>
   860d8:	f855 3c04 	ldr.w	r3, [r5, #-4]
   860dc:	f1a0 0208 	sub.w	r2, r0, #8
   860e0:	f023 0301 	bic.w	r3, r3, #1
   860e4:	4443      	add	r3, r8
   860e6:	429a      	cmp	r2, r3
   860e8:	f000 813e 	beq.w	86368 <_realloc_r+0x2f8>
   860ec:	1f32      	subs	r2, r6, #4
   860ee:	2a24      	cmp	r2, #36	; 0x24
   860f0:	f200 812b 	bhi.w	8634a <_realloc_r+0x2da>
   860f4:	2a13      	cmp	r2, #19
   860f6:	f200 80ff 	bhi.w	862f8 <_realloc_r+0x288>
   860fa:	4603      	mov	r3, r0
   860fc:	462a      	mov	r2, r5
   860fe:	6811      	ldr	r1, [r2, #0]
   86100:	6019      	str	r1, [r3, #0]
   86102:	6851      	ldr	r1, [r2, #4]
   86104:	6059      	str	r1, [r3, #4]
   86106:	6892      	ldr	r2, [r2, #8]
   86108:	609a      	str	r2, [r3, #8]
   8610a:	4629      	mov	r1, r5
   8610c:	4648      	mov	r0, r9
   8610e:	f7ff f8cf 	bl	852b0 <_free_r>
   86112:	e01c      	b.n	8614e <_realloc_r+0xde>
   86114:	f024 0407 	bic.w	r4, r4, #7
   86118:	2c00      	cmp	r4, #0
   8611a:	4622      	mov	r2, r4
   8611c:	dabf      	bge.n	8609e <_realloc_r+0x2e>
   8611e:	230c      	movs	r3, #12
   86120:	2000      	movs	r0, #0
   86122:	f8c9 3000 	str.w	r3, [r9]
   86126:	b003      	add	sp, #12
   86128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8612c:	462f      	mov	r7, r5
   8612e:	1b33      	subs	r3, r6, r4
   86130:	2b0f      	cmp	r3, #15
   86132:	f8d8 2004 	ldr.w	r2, [r8, #4]
   86136:	d81d      	bhi.n	86174 <_realloc_r+0x104>
   86138:	f002 0201 	and.w	r2, r2, #1
   8613c:	4332      	orrs	r2, r6
   8613e:	eb08 0106 	add.w	r1, r8, r6
   86142:	f8c8 2004 	str.w	r2, [r8, #4]
   86146:	684b      	ldr	r3, [r1, #4]
   86148:	f043 0301 	orr.w	r3, r3, #1
   8614c:	604b      	str	r3, [r1, #4]
   8614e:	4648      	mov	r0, r9
   86150:	f7ff ff8c 	bl	8606c <__malloc_unlock>
   86154:	4638      	mov	r0, r7
   86156:	b003      	add	sp, #12
   86158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8615c:	f021 0103 	bic.w	r1, r1, #3
   86160:	4431      	add	r1, r6
   86162:	4291      	cmp	r1, r2
   86164:	db20      	blt.n	861a8 <_realloc_r+0x138>
   86166:	68c3      	ldr	r3, [r0, #12]
   86168:	6882      	ldr	r2, [r0, #8]
   8616a:	462f      	mov	r7, r5
   8616c:	60d3      	str	r3, [r2, #12]
   8616e:	460e      	mov	r6, r1
   86170:	609a      	str	r2, [r3, #8]
   86172:	e7dc      	b.n	8612e <_realloc_r+0xbe>
   86174:	f002 0201 	and.w	r2, r2, #1
   86178:	eb08 0104 	add.w	r1, r8, r4
   8617c:	4314      	orrs	r4, r2
   8617e:	f043 0201 	orr.w	r2, r3, #1
   86182:	f8c8 4004 	str.w	r4, [r8, #4]
   86186:	440b      	add	r3, r1
   86188:	604a      	str	r2, [r1, #4]
   8618a:	685a      	ldr	r2, [r3, #4]
   8618c:	3108      	adds	r1, #8
   8618e:	f042 0201 	orr.w	r2, r2, #1
   86192:	605a      	str	r2, [r3, #4]
   86194:	4648      	mov	r0, r9
   86196:	f7ff f88b 	bl	852b0 <_free_r>
   8619a:	e7d8      	b.n	8614e <_realloc_r+0xde>
   8619c:	4611      	mov	r1, r2
   8619e:	b003      	add	sp, #12
   861a0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   861a4:	f7ff bb94 	b.w	858d0 <_malloc_r>
   861a8:	f01e 0f01 	tst.w	lr, #1
   861ac:	d18d      	bne.n	860ca <_realloc_r+0x5a>
   861ae:	f855 3c08 	ldr.w	r3, [r5, #-8]
   861b2:	ebc3 0a08 	rsb	sl, r3, r8
   861b6:	f8da 3004 	ldr.w	r3, [sl, #4]
   861ba:	f023 0c03 	bic.w	ip, r3, #3
   861be:	eb01 0e0c 	add.w	lr, r1, ip
   861c2:	4596      	cmp	lr, r2
   861c4:	db26      	blt.n	86214 <_realloc_r+0x1a4>
   861c6:	4657      	mov	r7, sl
   861c8:	68c3      	ldr	r3, [r0, #12]
   861ca:	6881      	ldr	r1, [r0, #8]
   861cc:	1f32      	subs	r2, r6, #4
   861ce:	60cb      	str	r3, [r1, #12]
   861d0:	6099      	str	r1, [r3, #8]
   861d2:	f857 1f08 	ldr.w	r1, [r7, #8]!
   861d6:	f8da 300c 	ldr.w	r3, [sl, #12]
   861da:	2a24      	cmp	r2, #36	; 0x24
   861dc:	60cb      	str	r3, [r1, #12]
   861de:	6099      	str	r1, [r3, #8]
   861e0:	f200 80c9 	bhi.w	86376 <_realloc_r+0x306>
   861e4:	2a13      	cmp	r2, #19
   861e6:	f240 8092 	bls.w	8630e <_realloc_r+0x29e>
   861ea:	682b      	ldr	r3, [r5, #0]
   861ec:	2a1b      	cmp	r2, #27
   861ee:	f8ca 3008 	str.w	r3, [sl, #8]
   861f2:	686b      	ldr	r3, [r5, #4]
   861f4:	f8ca 300c 	str.w	r3, [sl, #12]
   861f8:	f200 80cd 	bhi.w	86396 <_realloc_r+0x326>
   861fc:	3508      	adds	r5, #8
   861fe:	f10a 0310 	add.w	r3, sl, #16
   86202:	e085      	b.n	86310 <_realloc_r+0x2a0>
   86204:	f855 3c08 	ldr.w	r3, [r5, #-8]
   86208:	ebc3 0a08 	rsb	sl, r3, r8
   8620c:	f8da 3004 	ldr.w	r3, [sl, #4]
   86210:	f023 0c03 	bic.w	ip, r3, #3
   86214:	eb06 030c 	add.w	r3, r6, ip
   86218:	4293      	cmp	r3, r2
   8621a:	f6ff af56 	blt.w	860ca <_realloc_r+0x5a>
   8621e:	4657      	mov	r7, sl
   86220:	f8da 100c 	ldr.w	r1, [sl, #12]
   86224:	f857 0f08 	ldr.w	r0, [r7, #8]!
   86228:	1f32      	subs	r2, r6, #4
   8622a:	2a24      	cmp	r2, #36	; 0x24
   8622c:	60c1      	str	r1, [r0, #12]
   8622e:	6088      	str	r0, [r1, #8]
   86230:	f200 80aa 	bhi.w	86388 <_realloc_r+0x318>
   86234:	2a13      	cmp	r2, #19
   86236:	f240 80a5 	bls.w	86384 <_realloc_r+0x314>
   8623a:	6829      	ldr	r1, [r5, #0]
   8623c:	2a1b      	cmp	r2, #27
   8623e:	f8ca 1008 	str.w	r1, [sl, #8]
   86242:	6869      	ldr	r1, [r5, #4]
   86244:	f8ca 100c 	str.w	r1, [sl, #12]
   86248:	f200 80bc 	bhi.w	863c4 <_realloc_r+0x354>
   8624c:	3508      	adds	r5, #8
   8624e:	f10a 0210 	add.w	r2, sl, #16
   86252:	6829      	ldr	r1, [r5, #0]
   86254:	461e      	mov	r6, r3
   86256:	6011      	str	r1, [r2, #0]
   86258:	6869      	ldr	r1, [r5, #4]
   8625a:	46d0      	mov	r8, sl
   8625c:	6051      	str	r1, [r2, #4]
   8625e:	68ab      	ldr	r3, [r5, #8]
   86260:	6093      	str	r3, [r2, #8]
   86262:	e764      	b.n	8612e <_realloc_r+0xbe>
   86264:	f021 0b03 	bic.w	fp, r1, #3
   86268:	f104 0010 	add.w	r0, r4, #16
   8626c:	44b3      	add	fp, r6
   8626e:	4583      	cmp	fp, r0
   86270:	da57      	bge.n	86322 <_realloc_r+0x2b2>
   86272:	f01e 0f01 	tst.w	lr, #1
   86276:	f47f af28 	bne.w	860ca <_realloc_r+0x5a>
   8627a:	f855 1c08 	ldr.w	r1, [r5, #-8]
   8627e:	ebc1 0a08 	rsb	sl, r1, r8
   86282:	f8da 1004 	ldr.w	r1, [sl, #4]
   86286:	f021 0c03 	bic.w	ip, r1, #3
   8628a:	44e3      	add	fp, ip
   8628c:	4558      	cmp	r0, fp
   8628e:	dcc1      	bgt.n	86214 <_realloc_r+0x1a4>
   86290:	4657      	mov	r7, sl
   86292:	f8da 100c 	ldr.w	r1, [sl, #12]
   86296:	f857 0f08 	ldr.w	r0, [r7, #8]!
   8629a:	1f32      	subs	r2, r6, #4
   8629c:	2a24      	cmp	r2, #36	; 0x24
   8629e:	60c1      	str	r1, [r0, #12]
   862a0:	6088      	str	r0, [r1, #8]
   862a2:	f200 80b1 	bhi.w	86408 <_realloc_r+0x398>
   862a6:	2a13      	cmp	r2, #19
   862a8:	f240 80a2 	bls.w	863f0 <_realloc_r+0x380>
   862ac:	6829      	ldr	r1, [r5, #0]
   862ae:	2a1b      	cmp	r2, #27
   862b0:	f8ca 1008 	str.w	r1, [sl, #8]
   862b4:	6869      	ldr	r1, [r5, #4]
   862b6:	f8ca 100c 	str.w	r1, [sl, #12]
   862ba:	f200 80ac 	bhi.w	86416 <_realloc_r+0x3a6>
   862be:	3508      	adds	r5, #8
   862c0:	f10a 0210 	add.w	r2, sl, #16
   862c4:	6829      	ldr	r1, [r5, #0]
   862c6:	6011      	str	r1, [r2, #0]
   862c8:	6869      	ldr	r1, [r5, #4]
   862ca:	6051      	str	r1, [r2, #4]
   862cc:	68a9      	ldr	r1, [r5, #8]
   862ce:	6091      	str	r1, [r2, #8]
   862d0:	ebc4 020b 	rsb	r2, r4, fp
   862d4:	eb0a 0104 	add.w	r1, sl, r4
   862d8:	f042 0201 	orr.w	r2, r2, #1
   862dc:	6099      	str	r1, [r3, #8]
   862de:	604a      	str	r2, [r1, #4]
   862e0:	f8da 3004 	ldr.w	r3, [sl, #4]
   862e4:	4648      	mov	r0, r9
   862e6:	f003 0301 	and.w	r3, r3, #1
   862ea:	431c      	orrs	r4, r3
   862ec:	f8ca 4004 	str.w	r4, [sl, #4]
   862f0:	f7ff febc 	bl	8606c <__malloc_unlock>
   862f4:	4638      	mov	r0, r7
   862f6:	e72e      	b.n	86156 <_realloc_r+0xe6>
   862f8:	682b      	ldr	r3, [r5, #0]
   862fa:	2a1b      	cmp	r2, #27
   862fc:	6003      	str	r3, [r0, #0]
   862fe:	686b      	ldr	r3, [r5, #4]
   86300:	6043      	str	r3, [r0, #4]
   86302:	d826      	bhi.n	86352 <_realloc_r+0x2e2>
   86304:	f100 0308 	add.w	r3, r0, #8
   86308:	f105 0208 	add.w	r2, r5, #8
   8630c:	e6f7      	b.n	860fe <_realloc_r+0x8e>
   8630e:	463b      	mov	r3, r7
   86310:	682a      	ldr	r2, [r5, #0]
   86312:	4676      	mov	r6, lr
   86314:	601a      	str	r2, [r3, #0]
   86316:	686a      	ldr	r2, [r5, #4]
   86318:	46d0      	mov	r8, sl
   8631a:	605a      	str	r2, [r3, #4]
   8631c:	68aa      	ldr	r2, [r5, #8]
   8631e:	609a      	str	r2, [r3, #8]
   86320:	e705      	b.n	8612e <_realloc_r+0xbe>
   86322:	ebc4 0b0b 	rsb	fp, r4, fp
   86326:	eb08 0104 	add.w	r1, r8, r4
   8632a:	f04b 0201 	orr.w	r2, fp, #1
   8632e:	6099      	str	r1, [r3, #8]
   86330:	604a      	str	r2, [r1, #4]
   86332:	f855 3c04 	ldr.w	r3, [r5, #-4]
   86336:	4648      	mov	r0, r9
   86338:	f003 0301 	and.w	r3, r3, #1
   8633c:	431c      	orrs	r4, r3
   8633e:	f845 4c04 	str.w	r4, [r5, #-4]
   86342:	f7ff fe93 	bl	8606c <__malloc_unlock>
   86346:	4628      	mov	r0, r5
   86348:	e705      	b.n	86156 <_realloc_r+0xe6>
   8634a:	4629      	mov	r1, r5
   8634c:	f7ff fe28 	bl	85fa0 <memmove>
   86350:	e6db      	b.n	8610a <_realloc_r+0x9a>
   86352:	68ab      	ldr	r3, [r5, #8]
   86354:	2a24      	cmp	r2, #36	; 0x24
   86356:	6083      	str	r3, [r0, #8]
   86358:	68eb      	ldr	r3, [r5, #12]
   8635a:	60c3      	str	r3, [r0, #12]
   8635c:	d027      	beq.n	863ae <_realloc_r+0x33e>
   8635e:	f100 0310 	add.w	r3, r0, #16
   86362:	f105 0210 	add.w	r2, r5, #16
   86366:	e6ca      	b.n	860fe <_realloc_r+0x8e>
   86368:	f850 3c04 	ldr.w	r3, [r0, #-4]
   8636c:	462f      	mov	r7, r5
   8636e:	f023 0303 	bic.w	r3, r3, #3
   86372:	441e      	add	r6, r3
   86374:	e6db      	b.n	8612e <_realloc_r+0xbe>
   86376:	4629      	mov	r1, r5
   86378:	4638      	mov	r0, r7
   8637a:	4676      	mov	r6, lr
   8637c:	46d0      	mov	r8, sl
   8637e:	f7ff fe0f 	bl	85fa0 <memmove>
   86382:	e6d4      	b.n	8612e <_realloc_r+0xbe>
   86384:	463a      	mov	r2, r7
   86386:	e764      	b.n	86252 <_realloc_r+0x1e2>
   86388:	4629      	mov	r1, r5
   8638a:	4638      	mov	r0, r7
   8638c:	461e      	mov	r6, r3
   8638e:	46d0      	mov	r8, sl
   86390:	f7ff fe06 	bl	85fa0 <memmove>
   86394:	e6cb      	b.n	8612e <_realloc_r+0xbe>
   86396:	68ab      	ldr	r3, [r5, #8]
   86398:	2a24      	cmp	r2, #36	; 0x24
   8639a:	f8ca 3010 	str.w	r3, [sl, #16]
   8639e:	68eb      	ldr	r3, [r5, #12]
   863a0:	f8ca 3014 	str.w	r3, [sl, #20]
   863a4:	d01a      	beq.n	863dc <_realloc_r+0x36c>
   863a6:	3510      	adds	r5, #16
   863a8:	f10a 0318 	add.w	r3, sl, #24
   863ac:	e7b0      	b.n	86310 <_realloc_r+0x2a0>
   863ae:	692a      	ldr	r2, [r5, #16]
   863b0:	f100 0318 	add.w	r3, r0, #24
   863b4:	6102      	str	r2, [r0, #16]
   863b6:	6969      	ldr	r1, [r5, #20]
   863b8:	f105 0218 	add.w	r2, r5, #24
   863bc:	6141      	str	r1, [r0, #20]
   863be:	e69e      	b.n	860fe <_realloc_r+0x8e>
   863c0:	200705c4 	.word	0x200705c4
   863c4:	68a9      	ldr	r1, [r5, #8]
   863c6:	2a24      	cmp	r2, #36	; 0x24
   863c8:	f8ca 1010 	str.w	r1, [sl, #16]
   863cc:	68e9      	ldr	r1, [r5, #12]
   863ce:	f8ca 1014 	str.w	r1, [sl, #20]
   863d2:	d00f      	beq.n	863f4 <_realloc_r+0x384>
   863d4:	3510      	adds	r5, #16
   863d6:	f10a 0218 	add.w	r2, sl, #24
   863da:	e73a      	b.n	86252 <_realloc_r+0x1e2>
   863dc:	692a      	ldr	r2, [r5, #16]
   863de:	f10a 0320 	add.w	r3, sl, #32
   863e2:	f8ca 2018 	str.w	r2, [sl, #24]
   863e6:	696a      	ldr	r2, [r5, #20]
   863e8:	3518      	adds	r5, #24
   863ea:	f8ca 201c 	str.w	r2, [sl, #28]
   863ee:	e78f      	b.n	86310 <_realloc_r+0x2a0>
   863f0:	463a      	mov	r2, r7
   863f2:	e767      	b.n	862c4 <_realloc_r+0x254>
   863f4:	6929      	ldr	r1, [r5, #16]
   863f6:	f10a 0220 	add.w	r2, sl, #32
   863fa:	f8ca 1018 	str.w	r1, [sl, #24]
   863fe:	6969      	ldr	r1, [r5, #20]
   86400:	3518      	adds	r5, #24
   86402:	f8ca 101c 	str.w	r1, [sl, #28]
   86406:	e724      	b.n	86252 <_realloc_r+0x1e2>
   86408:	4629      	mov	r1, r5
   8640a:	4638      	mov	r0, r7
   8640c:	9301      	str	r3, [sp, #4]
   8640e:	f7ff fdc7 	bl	85fa0 <memmove>
   86412:	9b01      	ldr	r3, [sp, #4]
   86414:	e75c      	b.n	862d0 <_realloc_r+0x260>
   86416:	68a9      	ldr	r1, [r5, #8]
   86418:	2a24      	cmp	r2, #36	; 0x24
   8641a:	f8ca 1010 	str.w	r1, [sl, #16]
   8641e:	68e9      	ldr	r1, [r5, #12]
   86420:	f8ca 1014 	str.w	r1, [sl, #20]
   86424:	d003      	beq.n	8642e <_realloc_r+0x3be>
   86426:	3510      	adds	r5, #16
   86428:	f10a 0218 	add.w	r2, sl, #24
   8642c:	e74a      	b.n	862c4 <_realloc_r+0x254>
   8642e:	6929      	ldr	r1, [r5, #16]
   86430:	f10a 0220 	add.w	r2, sl, #32
   86434:	f8ca 1018 	str.w	r1, [sl, #24]
   86438:	6969      	ldr	r1, [r5, #20]
   8643a:	3518      	adds	r5, #24
   8643c:	f8ca 101c 	str.w	r1, [sl, #28]
   86440:	e740      	b.n	862c4 <_realloc_r+0x254>
   86442:	bf00      	nop

00086444 <_sbrk_r>:
   86444:	b538      	push	{r3, r4, r5, lr}
   86446:	4c07      	ldr	r4, [pc, #28]	; (86464 <_sbrk_r+0x20>)
   86448:	2300      	movs	r3, #0
   8644a:	4605      	mov	r5, r0
   8644c:	4608      	mov	r0, r1
   8644e:	6023      	str	r3, [r4, #0]
   86450:	f7fe f860 	bl	84514 <_sbrk>
   86454:	1c43      	adds	r3, r0, #1
   86456:	d000      	beq.n	8645a <_sbrk_r+0x16>
   86458:	bd38      	pop	{r3, r4, r5, pc}
   8645a:	6823      	ldr	r3, [r4, #0]
   8645c:	2b00      	cmp	r3, #0
   8645e:	d0fb      	beq.n	86458 <_sbrk_r+0x14>
   86460:	602b      	str	r3, [r5, #0]
   86462:	bd38      	pop	{r3, r4, r5, pc}
   86464:	20070b54 	.word	0x20070b54

00086468 <__sread>:
   86468:	b510      	push	{r4, lr}
   8646a:	460c      	mov	r4, r1
   8646c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   86470:	f000 f936 	bl	866e0 <_read_r>
   86474:	2800      	cmp	r0, #0
   86476:	db03      	blt.n	86480 <__sread+0x18>
   86478:	6d23      	ldr	r3, [r4, #80]	; 0x50
   8647a:	4403      	add	r3, r0
   8647c:	6523      	str	r3, [r4, #80]	; 0x50
   8647e:	bd10      	pop	{r4, pc}
   86480:	89a3      	ldrh	r3, [r4, #12]
   86482:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   86486:	81a3      	strh	r3, [r4, #12]
   86488:	bd10      	pop	{r4, pc}
   8648a:	bf00      	nop

0008648c <__swrite>:
   8648c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   86490:	460c      	mov	r4, r1
   86492:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   86496:	461f      	mov	r7, r3
   86498:	05cb      	lsls	r3, r1, #23
   8649a:	4616      	mov	r6, r2
   8649c:	4605      	mov	r5, r0
   8649e:	d507      	bpl.n	864b0 <__swrite+0x24>
   864a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   864a4:	2302      	movs	r3, #2
   864a6:	2200      	movs	r2, #0
   864a8:	f000 f904 	bl	866b4 <_lseek_r>
   864ac:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   864b0:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   864b4:	81a1      	strh	r1, [r4, #12]
   864b6:	463b      	mov	r3, r7
   864b8:	4632      	mov	r2, r6
   864ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   864be:	4628      	mov	r0, r5
   864c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   864c4:	f000 b814 	b.w	864f0 <_write_r>

000864c8 <__sseek>:
   864c8:	b510      	push	{r4, lr}
   864ca:	460c      	mov	r4, r1
   864cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   864d0:	f000 f8f0 	bl	866b4 <_lseek_r>
   864d4:	89a3      	ldrh	r3, [r4, #12]
   864d6:	1c42      	adds	r2, r0, #1
   864d8:	bf0e      	itee	eq
   864da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   864de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   864e2:	6520      	strne	r0, [r4, #80]	; 0x50
   864e4:	81a3      	strh	r3, [r4, #12]
   864e6:	bd10      	pop	{r4, pc}

000864e8 <__sclose>:
   864e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   864ec:	f000 b868 	b.w	865c0 <_close_r>

000864f0 <_write_r>:
   864f0:	b570      	push	{r4, r5, r6, lr}
   864f2:	460d      	mov	r5, r1
   864f4:	4c08      	ldr	r4, [pc, #32]	; (86518 <_write_r+0x28>)
   864f6:	4611      	mov	r1, r2
   864f8:	4606      	mov	r6, r0
   864fa:	461a      	mov	r2, r3
   864fc:	4628      	mov	r0, r5
   864fe:	2300      	movs	r3, #0
   86500:	6023      	str	r3, [r4, #0]
   86502:	f7fc fd73 	bl	82fec <_write>
   86506:	1c43      	adds	r3, r0, #1
   86508:	d000      	beq.n	8650c <_write_r+0x1c>
   8650a:	bd70      	pop	{r4, r5, r6, pc}
   8650c:	6823      	ldr	r3, [r4, #0]
   8650e:	2b00      	cmp	r3, #0
   86510:	d0fb      	beq.n	8650a <_write_r+0x1a>
   86512:	6033      	str	r3, [r6, #0]
   86514:	bd70      	pop	{r4, r5, r6, pc}
   86516:	bf00      	nop
   86518:	20070b54 	.word	0x20070b54

0008651c <__register_exitproc>:
   8651c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   86520:	4c25      	ldr	r4, [pc, #148]	; (865b8 <__register_exitproc+0x9c>)
   86522:	4606      	mov	r6, r0
   86524:	6825      	ldr	r5, [r4, #0]
   86526:	4688      	mov	r8, r1
   86528:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
   8652c:	4692      	mov	sl, r2
   8652e:	4699      	mov	r9, r3
   86530:	b3c4      	cbz	r4, 865a4 <__register_exitproc+0x88>
   86532:	6860      	ldr	r0, [r4, #4]
   86534:	281f      	cmp	r0, #31
   86536:	dc17      	bgt.n	86568 <__register_exitproc+0x4c>
   86538:	1c41      	adds	r1, r0, #1
   8653a:	b176      	cbz	r6, 8655a <__register_exitproc+0x3e>
   8653c:	eb04 0380 	add.w	r3, r4, r0, lsl #2
   86540:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
   86544:	f8d4 5188 	ldr.w	r5, [r4, #392]	; 0x188
   86548:	2201      	movs	r2, #1
   8654a:	4082      	lsls	r2, r0
   8654c:	4315      	orrs	r5, r2
   8654e:	2e02      	cmp	r6, #2
   86550:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
   86554:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
   86558:	d01e      	beq.n	86598 <__register_exitproc+0x7c>
   8655a:	1c83      	adds	r3, r0, #2
   8655c:	6061      	str	r1, [r4, #4]
   8655e:	2000      	movs	r0, #0
   86560:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
   86564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   86568:	4b14      	ldr	r3, [pc, #80]	; (865bc <__register_exitproc+0xa0>)
   8656a:	b303      	cbz	r3, 865ae <__register_exitproc+0x92>
   8656c:	f44f 70c8 	mov.w	r0, #400	; 0x190
   86570:	f7ff f9a6 	bl	858c0 <malloc>
   86574:	4604      	mov	r4, r0
   86576:	b1d0      	cbz	r0, 865ae <__register_exitproc+0x92>
   86578:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
   8657c:	2700      	movs	r7, #0
   8657e:	e884 0088 	stmia.w	r4, {r3, r7}
   86582:	4638      	mov	r0, r7
   86584:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   86588:	2101      	movs	r1, #1
   8658a:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
   8658e:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
   86592:	2e00      	cmp	r6, #0
   86594:	d0e1      	beq.n	8655a <__register_exitproc+0x3e>
   86596:	e7d1      	b.n	8653c <__register_exitproc+0x20>
   86598:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   8659c:	431a      	orrs	r2, r3
   8659e:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   865a2:	e7da      	b.n	8655a <__register_exitproc+0x3e>
   865a4:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
   865a8:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   865ac:	e7c1      	b.n	86532 <__register_exitproc+0x16>
   865ae:	f04f 30ff 	mov.w	r0, #4294967295
   865b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   865b6:	bf00      	nop
   865b8:	00086864 	.word	0x00086864
   865bc:	000858c1 	.word	0x000858c1

000865c0 <_close_r>:
   865c0:	b538      	push	{r3, r4, r5, lr}
   865c2:	4c07      	ldr	r4, [pc, #28]	; (865e0 <_close_r+0x20>)
   865c4:	2300      	movs	r3, #0
   865c6:	4605      	mov	r5, r0
   865c8:	4608      	mov	r0, r1
   865ca:	6023      	str	r3, [r4, #0]
   865cc:	f7fd ffce 	bl	8456c <_close>
   865d0:	1c43      	adds	r3, r0, #1
   865d2:	d000      	beq.n	865d6 <_close_r+0x16>
   865d4:	bd38      	pop	{r3, r4, r5, pc}
   865d6:	6823      	ldr	r3, [r4, #0]
   865d8:	2b00      	cmp	r3, #0
   865da:	d0fb      	beq.n	865d4 <_close_r+0x14>
   865dc:	602b      	str	r3, [r5, #0]
   865de:	bd38      	pop	{r3, r4, r5, pc}
   865e0:	20070b54 	.word	0x20070b54

000865e4 <_fclose_r>:
   865e4:	2900      	cmp	r1, #0
   865e6:	d03d      	beq.n	86664 <_fclose_r+0x80>
   865e8:	b570      	push	{r4, r5, r6, lr}
   865ea:	4605      	mov	r5, r0
   865ec:	460c      	mov	r4, r1
   865ee:	b108      	cbz	r0, 865f4 <_fclose_r+0x10>
   865f0:	6b83      	ldr	r3, [r0, #56]	; 0x38
   865f2:	b37b      	cbz	r3, 86654 <_fclose_r+0x70>
   865f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   865f8:	b90b      	cbnz	r3, 865fe <_fclose_r+0x1a>
   865fa:	2000      	movs	r0, #0
   865fc:	bd70      	pop	{r4, r5, r6, pc}
   865fe:	4621      	mov	r1, r4
   86600:	4628      	mov	r0, r5
   86602:	f7fe fcb1 	bl	84f68 <__sflush_r>
   86606:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   86608:	4606      	mov	r6, r0
   8660a:	b133      	cbz	r3, 8661a <_fclose_r+0x36>
   8660c:	69e1      	ldr	r1, [r4, #28]
   8660e:	4628      	mov	r0, r5
   86610:	4798      	blx	r3
   86612:	2800      	cmp	r0, #0
   86614:	bfb8      	it	lt
   86616:	f04f 36ff 	movlt.w	r6, #4294967295
   8661a:	89a3      	ldrh	r3, [r4, #12]
   8661c:	061b      	lsls	r3, r3, #24
   8661e:	d41c      	bmi.n	8665a <_fclose_r+0x76>
   86620:	6b21      	ldr	r1, [r4, #48]	; 0x30
   86622:	b141      	cbz	r1, 86636 <_fclose_r+0x52>
   86624:	f104 0340 	add.w	r3, r4, #64	; 0x40
   86628:	4299      	cmp	r1, r3
   8662a:	d002      	beq.n	86632 <_fclose_r+0x4e>
   8662c:	4628      	mov	r0, r5
   8662e:	f7fe fe3f 	bl	852b0 <_free_r>
   86632:	2300      	movs	r3, #0
   86634:	6323      	str	r3, [r4, #48]	; 0x30
   86636:	6c61      	ldr	r1, [r4, #68]	; 0x44
   86638:	b121      	cbz	r1, 86644 <_fclose_r+0x60>
   8663a:	4628      	mov	r0, r5
   8663c:	f7fe fe38 	bl	852b0 <_free_r>
   86640:	2300      	movs	r3, #0
   86642:	6463      	str	r3, [r4, #68]	; 0x44
   86644:	f7fe fdce 	bl	851e4 <__sfp_lock_acquire>
   86648:	2300      	movs	r3, #0
   8664a:	81a3      	strh	r3, [r4, #12]
   8664c:	f7fe fdcc 	bl	851e8 <__sfp_lock_release>
   86650:	4630      	mov	r0, r6
   86652:	bd70      	pop	{r4, r5, r6, pc}
   86654:	f7fe fdc0 	bl	851d8 <__sinit>
   86658:	e7cc      	b.n	865f4 <_fclose_r+0x10>
   8665a:	6921      	ldr	r1, [r4, #16]
   8665c:	4628      	mov	r0, r5
   8665e:	f7fe fe27 	bl	852b0 <_free_r>
   86662:	e7dd      	b.n	86620 <_fclose_r+0x3c>
   86664:	2000      	movs	r0, #0
   86666:	4770      	bx	lr

00086668 <_fstat_r>:
   86668:	b538      	push	{r3, r4, r5, lr}
   8666a:	460b      	mov	r3, r1
   8666c:	4c07      	ldr	r4, [pc, #28]	; (8668c <_fstat_r+0x24>)
   8666e:	4605      	mov	r5, r0
   86670:	4611      	mov	r1, r2
   86672:	4618      	mov	r0, r3
   86674:	2300      	movs	r3, #0
   86676:	6023      	str	r3, [r4, #0]
   86678:	f7fd ff84 	bl	84584 <_fstat>
   8667c:	1c43      	adds	r3, r0, #1
   8667e:	d000      	beq.n	86682 <_fstat_r+0x1a>
   86680:	bd38      	pop	{r3, r4, r5, pc}
   86682:	6823      	ldr	r3, [r4, #0]
   86684:	2b00      	cmp	r3, #0
   86686:	d0fb      	beq.n	86680 <_fstat_r+0x18>
   86688:	602b      	str	r3, [r5, #0]
   8668a:	bd38      	pop	{r3, r4, r5, pc}
   8668c:	20070b54 	.word	0x20070b54

00086690 <_isatty_r>:
   86690:	b538      	push	{r3, r4, r5, lr}
   86692:	4c07      	ldr	r4, [pc, #28]	; (866b0 <_isatty_r+0x20>)
   86694:	2300      	movs	r3, #0
   86696:	4605      	mov	r5, r0
   86698:	4608      	mov	r0, r1
   8669a:	6023      	str	r3, [r4, #0]
   8669c:	f7fd ff82 	bl	845a4 <_isatty>
   866a0:	1c43      	adds	r3, r0, #1
   866a2:	d000      	beq.n	866a6 <_isatty_r+0x16>
   866a4:	bd38      	pop	{r3, r4, r5, pc}
   866a6:	6823      	ldr	r3, [r4, #0]
   866a8:	2b00      	cmp	r3, #0
   866aa:	d0fb      	beq.n	866a4 <_isatty_r+0x14>
   866ac:	602b      	str	r3, [r5, #0]
   866ae:	bd38      	pop	{r3, r4, r5, pc}
   866b0:	20070b54 	.word	0x20070b54

000866b4 <_lseek_r>:
   866b4:	b570      	push	{r4, r5, r6, lr}
   866b6:	460d      	mov	r5, r1
   866b8:	4c08      	ldr	r4, [pc, #32]	; (866dc <_lseek_r+0x28>)
   866ba:	4611      	mov	r1, r2
   866bc:	4606      	mov	r6, r0
   866be:	461a      	mov	r2, r3
   866c0:	4628      	mov	r0, r5
   866c2:	2300      	movs	r3, #0
   866c4:	6023      	str	r3, [r4, #0]
   866c6:	f7fd ff77 	bl	845b8 <_lseek>
   866ca:	1c43      	adds	r3, r0, #1
   866cc:	d000      	beq.n	866d0 <_lseek_r+0x1c>
   866ce:	bd70      	pop	{r4, r5, r6, pc}
   866d0:	6823      	ldr	r3, [r4, #0]
   866d2:	2b00      	cmp	r3, #0
   866d4:	d0fb      	beq.n	866ce <_lseek_r+0x1a>
   866d6:	6033      	str	r3, [r6, #0]
   866d8:	bd70      	pop	{r4, r5, r6, pc}
   866da:	bf00      	nop
   866dc:	20070b54 	.word	0x20070b54

000866e0 <_read_r>:
   866e0:	b570      	push	{r4, r5, r6, lr}
   866e2:	460d      	mov	r5, r1
   866e4:	4c08      	ldr	r4, [pc, #32]	; (86708 <_read_r+0x28>)
   866e6:	4611      	mov	r1, r2
   866e8:	4606      	mov	r6, r0
   866ea:	461a      	mov	r2, r3
   866ec:	4628      	mov	r0, r5
   866ee:	2300      	movs	r3, #0
   866f0:	6023      	str	r3, [r4, #0]
   866f2:	f7f9 fd2d 	bl	80150 <_read>
   866f6:	1c43      	adds	r3, r0, #1
   866f8:	d000      	beq.n	866fc <_read_r+0x1c>
   866fa:	bd70      	pop	{r4, r5, r6, pc}
   866fc:	6823      	ldr	r3, [r4, #0]
   866fe:	2b00      	cmp	r3, #0
   86700:	d0fb      	beq.n	866fa <_read_r+0x1a>
   86702:	6033      	str	r3, [r6, #0]
   86704:	bd70      	pop	{r4, r5, r6, pc}
   86706:	bf00      	nop
   86708:	20070b54 	.word	0x20070b54

0008670c <can_bit_time>:
   8670c:	02020308 02094b03 43020303 0303030a     .....K.....C....
   8671c:	040b4603 48040303 0404030c 040d4304     .F.....H.....C..
   8672c:	4d040404 0504040e 040f4004 43040505     ...M.....@.....C
   8673c:	05050510 06114504 47040505 06060512     .....E.....G....
   8674c:	06134304 44040606 06060714 08154604     .C.....D.....F..
   8675c:	47040606 07070716 08174404 46040708     ...G.....D.....F
   8676c:	08080718 08194304 44040808 204e4143     .....C.....DCAN 
   8677c:	74696e69 696c6169 6974617a 28206e6f     initialization (
   8678c:	636e7973 52452029 0d524f52 00000000     sync) ERROR.....
   8679c:	204e4143 74696e69 696c6169 6974617a     CAN initializati
   867ac:	69206e6f 6f632073 656c706d 2e646574     on is completed.
   867bc:	0000000d 43202d2d 45204e41 706d6178     ....-- CAN Examp
   867cc:	2d20656c 2d0a0d2d 7241202d 6e697564     le --..-- Arduin
   867dc:	7544206f 20582f65 0a0d2d2d 43202d2d     o Due/X --..-- C
   867ec:	69706d6f 3a64656c 67754120 20382020     ompiled: Aug  8 
   867fc:	37313032 3a363120 343a3431 2d2d2031     2017 16:14:41 --
   8680c:	0000000d 43202d2d 45204e41 706d6178     ....-- CAN Examp
   8681c:	2d20656c 2d0a0d2d 7241202d 6e697564     le --..-- Arduin
   8682c:	7544206f 20582f65 0a0d2d2d 43202d2d     o Due/X --..-- C
   8683c:	69706d6f 3a64656c 67754120 20382020     ompiled: Aug  8 
   8684c:	37313032 3a363120 343a3431 2d2d2032     2017 16:14:42 --
   8685c:	0000000d 00000043                       ....C...

00086864 <_global_impure_ptr>:
   86864:	20070198 0000000a                       ... ....

0008686c <_init>:
   8686c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8686e:	bf00      	nop
   86870:	bcf8      	pop	{r3, r4, r5, r6, r7}
   86872:	bc08      	pop	{r3}
   86874:	469e      	mov	lr, r3
   86876:	4770      	bx	lr

00086878 <__init_array_start>:
   86878:	00084f49 	.word	0x00084f49

0008687c <__frame_dummy_init_array_entry>:
   8687c:	00080119                                ....

00086880 <_fini>:
   86880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   86882:	bf00      	nop
   86884:	bcf8      	pop	{r3, r4, r5, r6, r7}
   86886:	bc08      	pop	{r3}
   86888:	469e      	mov	lr, r3
   8688a:	4770      	bx	lr

0008688c <__fini_array_start>:
   8688c:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
 * Initialize the System and update the SystemFrequency variable.
 */
__no_inline
RAMFUNC
void SystemInit(void)
{
20070000:	b480      	push	{r7}
20070002:	af00      	add	r7, sp, #0
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070004:	4b2a      	ldr	r3, [pc, #168]	; (200700b0 <SystemInit+0xb0>)
20070006:	f44f 6280 	mov.w	r2, #1024	; 0x400
2007000a:	601a      	str	r2, [r3, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
2007000c:	4b29      	ldr	r3, [pc, #164]	; (200700b4 <SystemInit+0xb4>)
2007000e:	f44f 6280 	mov.w	r2, #1024	; 0x400
20070012:	601a      	str	r2, [r3, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
20070014:	4b28      	ldr	r3, [pc, #160]	; (200700b8 <SystemInit+0xb8>)
20070016:	6a1b      	ldr	r3, [r3, #32]
20070018:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
2007001c:	2b00      	cmp	r3, #0
2007001e:	d109      	bne.n	20070034 <SystemInit+0x34>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070020:	4b25      	ldr	r3, [pc, #148]	; (200700b8 <SystemInit+0xb8>)
20070022:	4a26      	ldr	r2, [pc, #152]	; (200700bc <SystemInit+0xbc>)
20070024:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
20070026:	bf00      	nop
20070028:	4b23      	ldr	r3, [pc, #140]	; (200700b8 <SystemInit+0xb8>)
2007002a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2007002c:	f003 0301 	and.w	r3, r3, #1
20070030:	2b00      	cmp	r3, #0
20070032:	d0f9      	beq.n	20070028 <SystemInit+0x28>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070034:	4b20      	ldr	r3, [pc, #128]	; (200700b8 <SystemInit+0xb8>)
20070036:	4a22      	ldr	r2, [pc, #136]	; (200700c0 <SystemInit+0xc0>)
20070038:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007003a:	bf00      	nop
2007003c:	4b1e      	ldr	r3, [pc, #120]	; (200700b8 <SystemInit+0xb8>)
2007003e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20070040:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
20070044:	2b00      	cmp	r3, #0
20070046:	d0f9      	beq.n	2007003c <SystemInit+0x3c>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070048:	4a1b      	ldr	r2, [pc, #108]	; (200700b8 <SystemInit+0xb8>)
2007004a:	4b1b      	ldr	r3, [pc, #108]	; (200700b8 <SystemInit+0xb8>)
2007004c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
2007004e:	f023 0303 	bic.w	r3, r3, #3
20070052:	f043 0301 	orr.w	r3, r3, #1
20070056:	6313      	str	r3, [r2, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070058:	bf00      	nop
2007005a:	4b17      	ldr	r3, [pc, #92]	; (200700b8 <SystemInit+0xb8>)
2007005c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2007005e:	f003 0308 	and.w	r3, r3, #8
20070062:	2b00      	cmp	r3, #0
20070064:	d0f9      	beq.n	2007005a <SystemInit+0x5a>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
20070066:	4b14      	ldr	r3, [pc, #80]	; (200700b8 <SystemInit+0xb8>)
20070068:	4a16      	ldr	r2, [pc, #88]	; (200700c4 <SystemInit+0xc4>)
2007006a:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
2007006c:	bf00      	nop
2007006e:	4b12      	ldr	r3, [pc, #72]	; (200700b8 <SystemInit+0xb8>)
20070070:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20070072:	f003 0302 	and.w	r3, r3, #2
20070076:	2b00      	cmp	r3, #0
20070078:	d0f9      	beq.n	2007006e <SystemInit+0x6e>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007007a:	4b0f      	ldr	r3, [pc, #60]	; (200700b8 <SystemInit+0xb8>)
2007007c:	2211      	movs	r2, #17
2007007e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070080:	bf00      	nop
20070082:	4b0d      	ldr	r3, [pc, #52]	; (200700b8 <SystemInit+0xb8>)
20070084:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20070086:	f003 0308 	and.w	r3, r3, #8
2007008a:	2b00      	cmp	r3, #0
2007008c:	d0f9      	beq.n	20070082 <SystemInit+0x82>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007008e:	4b0a      	ldr	r3, [pc, #40]	; (200700b8 <SystemInit+0xb8>)
20070090:	2212      	movs	r2, #18
20070092:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070094:	bf00      	nop
20070096:	4b08      	ldr	r3, [pc, #32]	; (200700b8 <SystemInit+0xb8>)
20070098:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2007009a:	f003 0308 	and.w	r3, r3, #8
2007009e:	2b00      	cmp	r3, #0
200700a0:	d0f9      	beq.n	20070096 <SystemInit+0x96>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
200700a2:	4b09      	ldr	r3, [pc, #36]	; (200700c8 <SystemInit+0xc8>)
200700a4:	4a09      	ldr	r2, [pc, #36]	; (200700cc <SystemInit+0xcc>)
200700a6:	601a      	str	r2, [r3, #0]
}
200700a8:	bf00      	nop
200700aa:	46bd      	mov	sp, r7
200700ac:	bc80      	pop	{r7}
200700ae:	4770      	bx	lr
200700b0:	400e0a00 	.word	0x400e0a00
200700b4:	400e0c00 	.word	0x400e0c00
200700b8:	400e0600 	.word	0x400e0600
200700bc:	00370809 	.word	0x00370809
200700c0:	01370809 	.word	0x01370809
200700c4:	200d3f01 	.word	0x200d3f01
200700c8:	20070190 	.word	0x20070190
200700cc:	0501bd00 	.word	0x0501bd00

200700d0 <system_init_flash>:
 * Initialize flash.
 */
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
200700d0:	b480      	push	{r7}
200700d2:	b083      	sub	sp, #12
200700d4:	af00      	add	r7, sp, #0
200700d6:	6078      	str	r0, [r7, #4]
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700d8:	687b      	ldr	r3, [r7, #4]
200700da:	4a25      	ldr	r2, [pc, #148]	; (20070170 <system_init_flash+0xa0>)
200700dc:	4293      	cmp	r3, r2
200700de:	d806      	bhi.n	200700ee <system_init_flash+0x1e>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700e0:	4b24      	ldr	r3, [pc, #144]	; (20070174 <system_init_flash+0xa4>)
200700e2:	2200      	movs	r2, #0
200700e4:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700e6:	4b24      	ldr	r3, [pc, #144]	; (20070178 <system_init_flash+0xa8>)
200700e8:	2200      	movs	r2, #0
200700ea:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
	}
}
200700ec:	e03b      	b.n	20070166 <system_init_flash+0x96>
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700ee:	687b      	ldr	r3, [r7, #4]
200700f0:	4a22      	ldr	r2, [pc, #136]	; (2007017c <system_init_flash+0xac>)
200700f2:	4293      	cmp	r3, r2
200700f4:	d808      	bhi.n	20070108 <system_init_flash+0x38>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700f6:	4b1f      	ldr	r3, [pc, #124]	; (20070174 <system_init_flash+0xa4>)
200700f8:	f44f 7280 	mov.w	r2, #256	; 0x100
200700fc:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700fe:	4b1e      	ldr	r3, [pc, #120]	; (20070178 <system_init_flash+0xa8>)
20070100:	f44f 7280 	mov.w	r2, #256	; 0x100
20070104:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
	}
}
20070106:	e02e      	b.n	20070166 <system_init_flash+0x96>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
20070108:	687b      	ldr	r3, [r7, #4]
2007010a:	4a1d      	ldr	r2, [pc, #116]	; (20070180 <system_init_flash+0xb0>)
2007010c:	4293      	cmp	r3, r2
2007010e:	d808      	bhi.n	20070122 <system_init_flash+0x52>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
20070110:	4b18      	ldr	r3, [pc, #96]	; (20070174 <system_init_flash+0xa4>)
20070112:	f44f 7200 	mov.w	r2, #512	; 0x200
20070116:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
20070118:	4b17      	ldr	r3, [pc, #92]	; (20070178 <system_init_flash+0xa8>)
2007011a:	f44f 7200 	mov.w	r2, #512	; 0x200
2007011e:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
	}
}
20070120:	e021      	b.n	20070166 <system_init_flash+0x96>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
20070122:	687b      	ldr	r3, [r7, #4]
20070124:	4a17      	ldr	r2, [pc, #92]	; (20070184 <system_init_flash+0xb4>)
20070126:	4293      	cmp	r3, r2
20070128:	d808      	bhi.n	2007013c <system_init_flash+0x6c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
2007012a:	4b12      	ldr	r3, [pc, #72]	; (20070174 <system_init_flash+0xa4>)
2007012c:	f44f 7240 	mov.w	r2, #768	; 0x300
20070130:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
20070132:	4b11      	ldr	r3, [pc, #68]	; (20070178 <system_init_flash+0xa8>)
20070134:	f44f 7240 	mov.w	r2, #768	; 0x300
20070138:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
	}
}
2007013a:	e014      	b.n	20070166 <system_init_flash+0x96>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
2007013c:	687b      	ldr	r3, [r7, #4]
2007013e:	4a12      	ldr	r2, [pc, #72]	; (20070188 <system_init_flash+0xb8>)
20070140:	4293      	cmp	r3, r2
20070142:	d808      	bhi.n	20070156 <system_init_flash+0x86>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070144:	4b0b      	ldr	r3, [pc, #44]	; (20070174 <system_init_flash+0xa4>)
20070146:	f44f 6280 	mov.w	r2, #1024	; 0x400
2007014a:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
2007014c:	4b0a      	ldr	r3, [pc, #40]	; (20070178 <system_init_flash+0xa8>)
2007014e:	f44f 6280 	mov.w	r2, #1024	; 0x400
20070152:	601a      	str	r2, [r3, #0]
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
	}
}
20070154:	e007      	b.n	20070166 <system_init_flash+0x96>
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070156:	4b07      	ldr	r3, [pc, #28]	; (20070174 <system_init_flash+0xa4>)
20070158:	f44f 62a0 	mov.w	r2, #1280	; 0x500
2007015c:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
2007015e:	4b06      	ldr	r3, [pc, #24]	; (20070178 <system_init_flash+0xa8>)
20070160:	f44f 62a0 	mov.w	r2, #1280	; 0x500
20070164:	601a      	str	r2, [r3, #0]
	}
}
20070166:	bf00      	nop
20070168:	370c      	adds	r7, #12
2007016a:	46bd      	mov	sp, r7
2007016c:	bc80      	pop	{r7}
2007016e:	4770      	bx	lr
20070170:	0121eabf 	.word	0x0121eabf
20070174:	400e0a00 	.word	0x400e0a00
20070178:	400e0c00 	.word	0x400e0c00
2007017c:	02faf07f 	.word	0x02faf07f
20070180:	03d08fff 	.word	0x03d08fff
20070184:	04c4b3ff 	.word	0x04c4b3ff
20070188:	055d4a7f 	.word	0x055d4a7f

2007018c <gs_ul_spi_clock>:
2007018c:	00050910                                ....

20070190 <SystemCoreClock>:
20070190:	003d0900 00000000                       ..=.....

20070198 <impure_data>:
20070198:	00000000 20070484 200704ec 20070554     ....... ... T.. 
	...
200701cc:	00086860 00000000 00000000 00000000     `h..............
	...
20070240:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20070250:	0005deec 0000000b 00000000 00000000     ................
	...

200705c0 <_impure_ptr>:
200705c0:	20070198                                ... 

200705c4 <__malloc_av_>:
	...
200705cc:	200705c4 200705c4 200705cc 200705cc     ... ... ... ... 
200705dc:	200705d4 200705d4 200705dc 200705dc     ... ... ... ... 
200705ec:	200705e4 200705e4 200705ec 200705ec     ... ... ... ... 
200705fc:	200705f4 200705f4 200705fc 200705fc     ... ... ... ... 
2007060c:	20070604 20070604 2007060c 2007060c     ... ... ... ... 
2007061c:	20070614 20070614 2007061c 2007061c     ... ... ... ... 
2007062c:	20070624 20070624 2007062c 2007062c     $.. $.. ,.. ,.. 
2007063c:	20070634 20070634 2007063c 2007063c     4.. 4.. <.. <.. 
2007064c:	20070644 20070644 2007064c 2007064c     D.. D.. L.. L.. 
2007065c:	20070654 20070654 2007065c 2007065c     T.. T.. \.. \.. 
2007066c:	20070664 20070664 2007066c 2007066c     d.. d.. l.. l.. 
2007067c:	20070674 20070674 2007067c 2007067c     t.. t.. |.. |.. 
2007068c:	20070684 20070684 2007068c 2007068c     ... ... ... ... 
2007069c:	20070694 20070694 2007069c 2007069c     ... ... ... ... 
200706ac:	200706a4 200706a4 200706ac 200706ac     ... ... ... ... 
200706bc:	200706b4 200706b4 200706bc 200706bc     ... ... ... ... 
200706cc:	200706c4 200706c4 200706cc 200706cc     ... ... ... ... 
200706dc:	200706d4 200706d4 200706dc 200706dc     ... ... ... ... 
200706ec:	200706e4 200706e4 200706ec 200706ec     ... ... ... ... 
200706fc:	200706f4 200706f4 200706fc 200706fc     ... ... ... ... 
2007070c:	20070704 20070704 2007070c 2007070c     ... ... ... ... 
2007071c:	20070714 20070714 2007071c 2007071c     ... ... ... ... 
2007072c:	20070724 20070724 2007072c 2007072c     $.. $.. ,.. ,.. 
2007073c:	20070734 20070734 2007073c 2007073c     4.. 4.. <.. <.. 
2007074c:	20070744 20070744 2007074c 2007074c     D.. D.. L.. L.. 
2007075c:	20070754 20070754 2007075c 2007075c     T.. T.. \.. \.. 
2007076c:	20070764 20070764 2007076c 2007076c     d.. d.. l.. l.. 
2007077c:	20070774 20070774 2007077c 2007077c     t.. t.. |.. |.. 
2007078c:	20070784 20070784 2007078c 2007078c     ... ... ... ... 
2007079c:	20070794 20070794 2007079c 2007079c     ... ... ... ... 
200707ac:	200707a4 200707a4 200707ac 200707ac     ... ... ... ... 
200707bc:	200707b4 200707b4 200707bc 200707bc     ... ... ... ... 
200707cc:	200707c4 200707c4 200707cc 200707cc     ... ... ... ... 
200707dc:	200707d4 200707d4 200707dc 200707dc     ... ... ... ... 
200707ec:	200707e4 200707e4 200707ec 200707ec     ... ... ... ... 
200707fc:	200707f4 200707f4 200707fc 200707fc     ... ... ... ... 
2007080c:	20070804 20070804 2007080c 2007080c     ... ... ... ... 
2007081c:	20070814 20070814 2007081c 2007081c     ... ... ... ... 
2007082c:	20070824 20070824 2007082c 2007082c     $.. $.. ,.. ,.. 
2007083c:	20070834 20070834 2007083c 2007083c     4.. 4.. <.. <.. 
2007084c:	20070844 20070844 2007084c 2007084c     D.. D.. L.. L.. 
2007085c:	20070854 20070854 2007085c 2007085c     T.. T.. \.. \.. 
2007086c:	20070864 20070864 2007086c 2007086c     d.. d.. l.. l.. 
2007087c:	20070874 20070874 2007087c 2007087c     t.. t.. |.. |.. 
2007088c:	20070884 20070884 2007088c 2007088c     ... ... ... ... 
2007089c:	20070894 20070894 2007089c 2007089c     ... ... ... ... 
200708ac:	200708a4 200708a4 200708ac 200708ac     ... ... ... ... 
200708bc:	200708b4 200708b4 200708bc 200708bc     ... ... ... ... 
200708cc:	200708c4 200708c4 200708cc 200708cc     ... ... ... ... 
200708dc:	200708d4 200708d4 200708dc 200708dc     ... ... ... ... 
200708ec:	200708e4 200708e4 200708ec 200708ec     ... ... ... ... 
200708fc:	200708f4 200708f4 200708fc 200708fc     ... ... ... ... 
2007090c:	20070904 20070904 2007090c 2007090c     ... ... ... ... 
2007091c:	20070914 20070914 2007091c 2007091c     ... ... ... ... 
2007092c:	20070924 20070924 2007092c 2007092c     $.. $.. ,.. ,.. 
2007093c:	20070934 20070934 2007093c 2007093c     4.. 4.. <.. <.. 
2007094c:	20070944 20070944 2007094c 2007094c     D.. D.. L.. L.. 
2007095c:	20070954 20070954 2007095c 2007095c     T.. T.. \.. \.. 
2007096c:	20070964 20070964 2007096c 2007096c     d.. d.. l.. l.. 
2007097c:	20070974 20070974 2007097c 2007097c     t.. t.. |.. |.. 
2007098c:	20070984 20070984 2007098c 2007098c     ... ... ... ... 
2007099c:	20070994 20070994 2007099c 2007099c     ... ... ... ... 
200709ac:	200709a4 200709a4 200709ac 200709ac     ... ... ... ... 
200709bc:	200709b4 200709b4 200709bc 200709bc     ... ... ... ... 

200709cc <__malloc_trim_threshold>:
200709cc:	00020000                                ....

200709d0 <__malloc_sbrk_base>:
200709d0:	ffffffff                                ....
