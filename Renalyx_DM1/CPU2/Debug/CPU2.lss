
CPU2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007680  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00087680  00087680  00017680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000914  20070000  00087688  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000005cc  20070914  00087f9c  00020914  2**2
                  ALLOC
  4 .stack        00002000  20070ee0  00088568  00020914  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020914  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  0002093d  2**0
                  CONTENTS, READONLY
  7 .debug_info   00019598  00000000  00000000  00020996  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003930  00000000  00000000  00039f2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000082be  00000000  00000000  0003d85e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000f30  00000000  00000000  00045b1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000d80  00000000  00000000  00046a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001d7cd  00000000  00000000  000477cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001b83e  00000000  00000000  00064f99  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00063afa  00000000  00000000  000807d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00004900  00000000  00000000  000e42d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20072ee0 	.word	0x20072ee0
   80004:	00083ee1 	.word	0x00083ee1
   80008:	00083ed9 	.word	0x00083ed9
   8000c:	00083ed9 	.word	0x00083ed9
   80010:	00083ed9 	.word	0x00083ed9
   80014:	00083ed9 	.word	0x00083ed9
   80018:	00083ed9 	.word	0x00083ed9
	...
   8002c:	00083ed9 	.word	0x00083ed9
   80030:	00083ed9 	.word	0x00083ed9
   80034:	00000000 	.word	0x00000000
   80038:	00083ed9 	.word	0x00083ed9
   8003c:	00083ed9 	.word	0x00083ed9
   80040:	00083ed9 	.word	0x00083ed9
   80044:	00083ed9 	.word	0x00083ed9
   80048:	00083ed9 	.word	0x00083ed9
   8004c:	00083ed9 	.word	0x00083ed9
   80050:	00083ed9 	.word	0x00083ed9
   80054:	00083ed9 	.word	0x00083ed9
   80058:	00083ed9 	.word	0x00083ed9
   8005c:	00083ed9 	.word	0x00083ed9
   80060:	00083ed9 	.word	0x00083ed9
   80064:	00083ed9 	.word	0x00083ed9
   80068:	00000000 	.word	0x00000000
   8006c:	00083b5d 	.word	0x00083b5d
   80070:	00083b75 	.word	0x00083b75
   80074:	00083b8d 	.word	0x00083b8d
   80078:	00083ba5 	.word	0x00083ba5
	...
   80084:	00083ed9 	.word	0x00083ed9
   80088:	00083ed9 	.word	0x00083ed9
   8008c:	00083ed9 	.word	0x00083ed9
   80090:	00083ed9 	.word	0x00083ed9
   80094:	00083ed9 	.word	0x00083ed9
   80098:	00083ed9 	.word	0x00083ed9
   8009c:	00083ed9 	.word	0x00083ed9
   800a0:	00083ed9 	.word	0x00083ed9
   800a4:	00000000 	.word	0x00000000
   800a8:	00083ed9 	.word	0x00083ed9
   800ac:	00081509 	.word	0x00081509
   800b0:	00081585 	.word	0x00081585
   800b4:	00081655 	.word	0x00081655
   800b8:	00083ed9 	.word	0x00083ed9
   800bc:	00083ed9 	.word	0x00083ed9
   800c0:	00083ed9 	.word	0x00083ed9
   800c4:	0008167d 	.word	0x0008167d
   800c8:	00083ed9 	.word	0x00083ed9
   800cc:	00083ed9 	.word	0x00083ed9
   800d0:	00083ed9 	.word	0x00083ed9
   800d4:	00083ed9 	.word	0x00083ed9
   800d8:	00083ed9 	.word	0x00083ed9
   800dc:	00083ed9 	.word	0x00083ed9
   800e0:	00083ed9 	.word	0x00083ed9
   800e4:	00083ed9 	.word	0x00083ed9
   800e8:	00083ed9 	.word	0x00083ed9
   800ec:	000802a1 	.word	0x000802a1
   800f0:	00083ed9 	.word	0x00083ed9

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070914 	.word	0x20070914
   80110:	00000000 	.word	0x00000000
   80114:	00087688 	.word	0x00087688

00080118 <frame_dummy>:
   80118:	4b08      	ldr	r3, [pc, #32]	; (8013c <frame_dummy+0x24>)
   8011a:	b510      	push	{r4, lr}
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4908      	ldr	r1, [pc, #32]	; (80140 <frame_dummy+0x28>)
   80120:	4808      	ldr	r0, [pc, #32]	; (80144 <frame_dummy+0x2c>)
   80122:	f3af 8000 	nop.w
   80126:	4808      	ldr	r0, [pc, #32]	; (80148 <frame_dummy+0x30>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b903      	cbnz	r3, 8012e <frame_dummy+0x16>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	4b07      	ldr	r3, [pc, #28]	; (8014c <frame_dummy+0x34>)
   80130:	2b00      	cmp	r3, #0
   80132:	d0fb      	beq.n	8012c <frame_dummy+0x14>
   80134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80138:	4718      	bx	r3
   8013a:	bf00      	nop
   8013c:	00000000 	.word	0x00000000
   80140:	20070918 	.word	0x20070918
   80144:	00087688 	.word	0x00087688
   80148:	00087688 	.word	0x00087688
   8014c:	00000000 	.word	0x00000000

00080150 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   80150:	b580      	push	{r7, lr}
   80152:	b082      	sub	sp, #8
   80154:	af00      	add	r7, sp, #0
   80156:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   80158:	6878      	ldr	r0, [r7, #4]
   8015a:	4b03      	ldr	r3, [pc, #12]	; (80168 <sysclk_enable_peripheral_clock+0x18>)
   8015c:	4798      	blx	r3
}
   8015e:	bf00      	nop
   80160:	3708      	adds	r7, #8
   80162:	46bd      	mov	sp, r7
   80164:	bd80      	pop	{r7, pc}
   80166:	bf00      	nop
   80168:	00083e21 	.word	0x00083e21

0008016c <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
   8016c:	b580      	push	{r7, lr}
   8016e:	b082      	sub	sp, #8
   80170:	af00      	add	r7, sp, #0
   80172:	6078      	str	r0, [r7, #4]
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM)
	if (p_spi == SPI0) {
   80174:	687b      	ldr	r3, [r7, #4]
   80176:	4a05      	ldr	r2, [pc, #20]	; (8018c <spi_enable_clock+0x20>)
   80178:	4293      	cmp	r3, r2
   8017a:	d102      	bne.n	80182 <spi_enable_clock+0x16>
		sysclk_enable_peripheral_clock(ID_SPI0);
   8017c:	2018      	movs	r0, #24
   8017e:	4b04      	ldr	r3, [pc, #16]	; (80190 <spi_enable_clock+0x24>)
   80180:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
   80182:	bf00      	nop
   80184:	3708      	adds	r7, #8
   80186:	46bd      	mov	sp, r7
   80188:	bd80      	pop	{r7, pc}
   8018a:	bf00      	nop
   8018c:	40008000 	.word	0x40008000
   80190:	00080151 	.word	0x00080151

00080194 <CPU2_D_INIT_CLOCK>:
 *  Author: wid7
 */ 
#include "CLOCK.h"

void CPU2_D_INIT_CLOCK()
{
   80194:	b580      	push	{r7, lr}
   80196:	af00      	add	r7, sp, #0
	sysclk_init();
   80198:	4b07      	ldr	r3, [pc, #28]	; (801b8 <CPU2_D_INIT_CLOCK+0x24>)
   8019a:	4798      	blx	r3
	PMC->PMC_WPMR  = 0x504D4300;
   8019c:	4b07      	ldr	r3, [pc, #28]	; (801bc <CPU2_D_INIT_CLOCK+0x28>)
   8019e:	4a08      	ldr	r2, [pc, #32]	; (801c0 <CPU2_D_INIT_CLOCK+0x2c>)
   801a0:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PMC->PMC_PCER0 = 0xF8407900;
   801a4:	4b05      	ldr	r3, [pc, #20]	; (801bc <CPU2_D_INIT_CLOCK+0x28>)
   801a6:	4a07      	ldr	r2, [pc, #28]	; (801c4 <CPU2_D_INIT_CLOCK+0x30>)
   801a8:	611a      	str	r2, [r3, #16]
	PMC->PMC_PCER1 = 0x0000083F;
   801aa:	4b04      	ldr	r3, [pc, #16]	; (801bc <CPU2_D_INIT_CLOCK+0x28>)
   801ac:	f640 023f 	movw	r2, #2111	; 0x83f
   801b0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   801b4:	bf00      	nop
   801b6:	bd80      	pop	{r7, pc}
   801b8:	00083565 	.word	0x00083565
   801bc:	400e0600 	.word	0x400e0600
   801c0:	504d4300 	.word	0x504d4300
   801c4:	f8407900 	.word	0xf8407900

000801c8 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   801c8:	b480      	push	{r7}
   801ca:	b083      	sub	sp, #12
   801cc:	af00      	add	r7, sp, #0
   801ce:	4603      	mov	r3, r0
   801d0:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   801d2:	4908      	ldr	r1, [pc, #32]	; (801f4 <NVIC_EnableIRQ+0x2c>)
   801d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
   801d8:	095b      	lsrs	r3, r3, #5
   801da:	79fa      	ldrb	r2, [r7, #7]
   801dc:	f002 021f 	and.w	r2, r2, #31
   801e0:	2001      	movs	r0, #1
   801e2:	fa00 f202 	lsl.w	r2, r0, r2
   801e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   801ea:	bf00      	nop
   801ec:	370c      	adds	r7, #12
   801ee:	46bd      	mov	sp, r7
   801f0:	bc80      	pop	{r7}
   801f2:	4770      	bx	lr
   801f4:	e000e100 	.word	0xe000e100

000801f8 <ioport_set_pin_level>:
 *
 * \param pin IOPORT pin to configure
 * \param level Logical value of the pin
 */
static inline void ioport_set_pin_level(ioport_pin_t pin, bool level)
{
   801f8:	b480      	push	{r7}
   801fa:	b08b      	sub	sp, #44	; 0x2c
   801fc:	af00      	add	r7, sp, #0
   801fe:	6078      	str	r0, [r7, #4]
   80200:	460b      	mov	r3, r1
   80202:	70fb      	strb	r3, [r7, #3]
   80204:	687b      	ldr	r3, [r7, #4]
   80206:	627b      	str	r3, [r7, #36]	; 0x24
   80208:	78fb      	ldrb	r3, [r7, #3]
   8020a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
   8020e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80210:	61fb      	str	r3, [r7, #28]
   80212:	69fb      	ldr	r3, [r7, #28]
   80214:	61bb      	str	r3, [r7, #24]
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
   80216:	69bb      	ldr	r3, [r7, #24]
   80218:	095b      	lsrs	r3, r3, #5
   8021a:	617b      	str	r3, [r7, #20]
}

__always_inline static Pio *arch_ioport_port_to_base(ioport_port_t port)
{
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   8021c:	697b      	ldr	r3, [r7, #20]
   8021e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80222:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80226:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);
   80228:	613b      	str	r3, [r7, #16]

	if (level) {
   8022a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   8022e:	2b00      	cmp	r3, #0
   80230:	d009      	beq.n	80246 <ioport_set_pin_level+0x4e>
   80232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80234:	60fb      	str	r3, [r7, #12]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   80236:	68fb      	ldr	r3, [r7, #12]
   80238:	f003 031f 	and.w	r3, r3, #31
   8023c:	2201      	movs	r2, #1
   8023e:	409a      	lsls	r2, r3
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80240:	693b      	ldr	r3, [r7, #16]
   80242:	631a      	str	r2, [r3, #48]	; 0x30
	arch_ioport_set_pin_level(pin, level);
}
   80244:	e008      	b.n	80258 <ioport_set_pin_level+0x60>
   80246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80248:	60bb      	str	r3, [r7, #8]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   8024a:	68bb      	ldr	r3, [r7, #8]
   8024c:	f003 031f 	and.w	r3, r3, #31
   80250:	2201      	movs	r2, #1
   80252:	409a      	lsls	r2, r3
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80254:	693b      	ldr	r3, [r7, #16]
   80256:	635a      	str	r2, [r3, #52]	; 0x34
   80258:	bf00      	nop
   8025a:	372c      	adds	r7, #44	; 0x2c
   8025c:	46bd      	mov	sp, r7
   8025e:	bc80      	pop	{r7}
   80260:	4770      	bx	lr
   80262:	bf00      	nop

00080264 <sn65hvda540_set_en>:
uint32_t bp_speed;

DD_Sensor_status_type sensor_data;
     
void sn65hvda540_set_en(sn65hvda540_ctrl_t *p_component, uint32_t pin_idx)
{
   80264:	b480      	push	{r7}
   80266:	b083      	sub	sp, #12
   80268:	af00      	add	r7, sp, #0
   8026a:	6078      	str	r0, [r7, #4]
   8026c:	6039      	str	r1, [r7, #0]
	p_component->pio_en_idx = pin_idx;
   8026e:	687b      	ldr	r3, [r7, #4]
   80270:	683a      	ldr	r2, [r7, #0]
   80272:	601a      	str	r2, [r3, #0]
}
   80274:	bf00      	nop
   80276:	370c      	adds	r7, #12
   80278:	46bd      	mov	sp, r7
   8027a:	bc80      	pop	{r7}
   8027c:	4770      	bx	lr
   8027e:	bf00      	nop

00080280 <sn65hvda540_normal_mode>:

void sn65hvda540_normal_mode(sn65hvda540_ctrl_t *p_component)
{
   80280:	b580      	push	{r7, lr}
   80282:	b082      	sub	sp, #8
   80284:	af00      	add	r7, sp, #0
   80286:	6078      	str	r0, [r7, #4]
	/* Raise EN pin of SN65HVD234 to High Level (Vcc). */
	ioport_set_pin_level(p_component->pio_en_idx, CAN_NORMAL_MODE);
   80288:	687b      	ldr	r3, [r7, #4]
   8028a:	681b      	ldr	r3, [r3, #0]
   8028c:	2100      	movs	r1, #0
   8028e:	4618      	mov	r0, r3
   80290:	4b02      	ldr	r3, [pc, #8]	; (8029c <sn65hvda540_normal_mode+0x1c>)
   80292:	4798      	blx	r3
}
   80294:	bf00      	nop
   80296:	3708      	adds	r7, #8
   80298:	46bd      	mov	sp, r7
   8029a:	bd80      	pop	{r7, pc}
   8029c:	000801f9 	.word	0x000801f9

000802a0 <CAN0_Handler>:
can_mb_conf_t can0_mailbox;
volatile uint32_t g_ul_recv_status = 0;
temp_struct_type  temp_struct;


void CAN0_Handler(void)   {
   802a0:	b580      	push	{r7, lr}
   802a2:	b082      	sub	sp, #8
   802a4:	af00      	add	r7, sp, #0
	uint32_t ul_status;
	ul_status = (CAN0 -> CAN_SR);
   802a6:	4b11      	ldr	r3, [pc, #68]	; (802ec <CAN0_Handler+0x4c>)
   802a8:	691b      	ldr	r3, [r3, #16]
   802aa:	607b      	str	r3, [r7, #4]
	if (ul_status & GLOBAL_MAILBOX_MASK) {
   802ac:	687b      	ldr	r3, [r7, #4]
   802ae:	b2db      	uxtb	r3, r3
   802b0:	2b00      	cmp	r3, #0
   802b2:	d017      	beq.n	802e4 <CAN0_Handler+0x44>
		ul_status = CAN0->CAN_MB[1].CAN_MSR ;
   802b4:	4b0d      	ldr	r3, [pc, #52]	; (802ec <CAN0_Handler+0x4c>)
   802b6:	f8d3 3230 	ldr.w	r3, [r3, #560]	; 0x230
   802ba:	607b      	str	r3, [r7, #4]
		if ((ul_status & CAN_MSR_MRDY) == CAN_MSR_MRDY) {
   802bc:	687b      	ldr	r3, [r7, #4]
   802be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   802c2:	2b00      	cmp	r3, #0
   802c4:	d00e      	beq.n	802e4 <CAN0_Handler+0x44>
			can0_mailbox.ul_mb_idx = 1;
   802c6:	4b0a      	ldr	r3, [pc, #40]	; (802f0 <CAN0_Handler+0x50>)
   802c8:	2201      	movs	r2, #1
   802ca:	601a      	str	r2, [r3, #0]
			can0_mailbox.ul_status = ul_status;
   802cc:	4a08      	ldr	r2, [pc, #32]	; (802f0 <CAN0_Handler+0x50>)
   802ce:	687b      	ldr	r3, [r7, #4]
   802d0:	6093      	str	r3, [r2, #8]
			dd_can_mailbox_read(&can0_mailbox);
   802d2:	4807      	ldr	r0, [pc, #28]	; (802f0 <CAN0_Handler+0x50>)
   802d4:	4b07      	ldr	r3, [pc, #28]	; (802f4 <CAN0_Handler+0x54>)
   802d6:	4798      	blx	r3
			dd_can_extract_mailbox_data(&can0_mailbox);
   802d8:	4805      	ldr	r0, [pc, #20]	; (802f0 <CAN0_Handler+0x50>)
   802da:	4b07      	ldr	r3, [pc, #28]	; (802f8 <CAN0_Handler+0x58>)
   802dc:	4798      	blx	r3
			g_ul_recv_status = 1;
   802de:	4b07      	ldr	r3, [pc, #28]	; (802fc <CAN0_Handler+0x5c>)
   802e0:	2201      	movs	r2, #1
   802e2:	601a      	str	r2, [r3, #0]
		}
		
	}
}
   802e4:	bf00      	nop
   802e6:	3708      	adds	r7, #8
   802e8:	46bd      	mov	sp, r7
   802ea:	bd80      	pop	{r7, pc}
   802ec:	400b4000 	.word	0x400b4000
   802f0:	20070a44 	.word	0x20070a44
   802f4:	000804a1 	.word	0x000804a1
   802f8:	00080301 	.word	0x00080301
   802fc:	20070940 	.word	0x20070940

00080300 <dd_can_extract_mailbox_data>:
	p_mailbox->ul_datal = 0;
	p_mailbox->ul_datah = 0;
}


static void dd_can_extract_mailbox_data(can_mb_conf_t *p_mailbox )   {
   80300:	b480      	push	{r7}
   80302:	b085      	sub	sp, #20
   80304:	af00      	add	r7, sp, #0
   80306:	6078      	str	r0, [r7, #4]
		 uint32_t ul_reg;
		 uint16_t speed;
	     uint8_t master_command_byte, master_data_byte;
		 
	
	   temp_struct.temp_reg_32 = (p_mailbox->ul_datal);
   80308:	687b      	ldr	r3, [r7, #4]
   8030a:	699b      	ldr	r3, [r3, #24]
   8030c:	4a5b      	ldr	r2, [pc, #364]	; (8047c <dd_can_extract_mailbox_data+0x17c>)
   8030e:	6013      	str	r3, [r2, #0]
	   if (temp_struct.temp_reg_8[0] == MASTER_CPU_id)
   80310:	4b5a      	ldr	r3, [pc, #360]	; (8047c <dd_can_extract_mailbox_data+0x17c>)
   80312:	781b      	ldrb	r3, [r3, #0]
   80314:	2b0a      	cmp	r3, #10
   80316:	f040 80ac 	bne.w	80472 <dd_can_extract_mailbox_data+0x172>
	   {
	  
	   master_command_byte  =  temp_struct.temp_reg_8[1]  ;
   8031a:	4b58      	ldr	r3, [pc, #352]	; (8047c <dd_can_extract_mailbox_data+0x17c>)
   8031c:	785b      	ldrb	r3, [r3, #1]
   8031e:	73fb      	strb	r3, [r7, #15]
	   data_buff[0] = master_command_byte;
   80320:	4a57      	ldr	r2, [pc, #348]	; (80480 <dd_can_extract_mailbox_data+0x180>)
   80322:	7bfb      	ldrb	r3, [r7, #15]
   80324:	7013      	strb	r3, [r2, #0]
	       //master_data_byte     =  temp_struct.temp_reg_8[1]  ;
	 //  sv_rxrdy_flag = true;
	
	   speed = temp_struct.temp_reg_16[1];				//temp_struct.temp_reg_16[0];
   80326:	4b55      	ldr	r3, [pc, #340]	; (8047c <dd_can_extract_mailbox_data+0x17c>)
   80328:	885b      	ldrh	r3, [r3, #2]
   8032a:	81bb      	strh	r3, [r7, #12]
			switch (state)
   8032c:	4b55      	ldr	r3, [pc, #340]	; (80484 <dd_can_extract_mailbox_data+0x184>)
   8032e:	781b      	ldrb	r3, [r3, #0]
   80330:	2b00      	cmp	r3, #0
   80332:	d003      	beq.n	8033c <dd_can_extract_mailbox_data+0x3c>
   80334:	2b01      	cmp	r3, #1
   80336:	f000 8083 	beq.w	80440 <dd_can_extract_mailbox_data+0x140>
// 				twi_enable_interrupt(BOARD_BASE_TWI_SLAVE, TWI_SR_SVACC);
// 				twi_disable_interrupt(BOARD_BASE_TWI_SLAVE, TWI_IDR_RXRDY | TWI_IDR_GACC |
// 				TWI_IDR_NACK | TWI_IDR_EOSACC | TWI_IDR_SCL_WS |TWI_SR_TXRDY);
// 			}
// 		}
}
   8033a:	e09a      	b.n	80472 <dd_can_extract_mailbox_data+0x172>
				
// 				data[data_count] = twi_read_byte(BOARD_BASE_TWI_SLAVE);
// 				data_buff[data_count] = data[data_count];
// 				
// 				start_c[0] =data_buff[0];
				switch (master_command_byte)
   8033c:	7bfb      	ldrb	r3, [r7, #15]
   8033e:	3b20      	subs	r3, #32
   80340:	2b08      	cmp	r3, #8
   80342:	d879      	bhi.n	80438 <dd_can_extract_mailbox_data+0x138>
   80344:	a201      	add	r2, pc, #4	; (adr r2, 8034c <dd_can_extract_mailbox_data+0x4c>)
   80346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8034a:	bf00      	nop
   8034c:	00080371 	.word	0x00080371
   80350:	0008038d 	.word	0x0008038d
   80354:	000803a9 	.word	0x000803a9
   80358:	000803e1 	.word	0x000803e1
   8035c:	00080425 	.word	0x00080425
   80360:	000803b7 	.word	0x000803b7
   80364:	000803c5 	.word	0x000803c5
   80368:	0008040f 	.word	0x0008040f
   8036c:	000803d3 	.word	0x000803d3
					case BP_START_BLOOD_PUMP:
					//printf("%d\n",var);
					//printf("s\n");
					//flag = 1;
					//count_start++;
					flag_buff++;
   80370:	4b45      	ldr	r3, [pc, #276]	; (80488 <dd_can_extract_mailbox_data+0x188>)
   80372:	781b      	ldrb	r3, [r3, #0]
   80374:	b2db      	uxtb	r3, r3
   80376:	3301      	adds	r3, #1
   80378:	b2da      	uxtb	r2, r3
   8037a:	4b43      	ldr	r3, [pc, #268]	; (80488 <dd_can_extract_mailbox_data+0x188>)
   8037c:	701a      	strb	r2, [r3, #0]
					bp_start_command = master_command_byte;
   8037e:	4a43      	ldr	r2, [pc, #268]	; (8048c <dd_can_extract_mailbox_data+0x18c>)
   80380:	7bfb      	ldrb	r3, [r7, #15]
   80382:	7013      	strb	r3, [r2, #0]
					state = HEMO_IDLE;
   80384:	4b3f      	ldr	r3, [pc, #252]	; (80484 <dd_can_extract_mailbox_data+0x184>)
   80386:	2200      	movs	r2, #0
   80388:	701a      	strb	r2, [r3, #0]
					break;
   8038a:	e058      	b.n	8043e <dd_can_extract_mailbox_data+0x13e>
					case BP_STOP_PUMP:
					//printf("%d\n",var);
					//printf("st\n");
					//flag = 1;
					//count_stop++;
					flag_buff++;
   8038c:	4b3e      	ldr	r3, [pc, #248]	; (80488 <dd_can_extract_mailbox_data+0x188>)
   8038e:	781b      	ldrb	r3, [r3, #0]
   80390:	b2db      	uxtb	r3, r3
   80392:	3301      	adds	r3, #1
   80394:	b2da      	uxtb	r2, r3
   80396:	4b3c      	ldr	r3, [pc, #240]	; (80488 <dd_can_extract_mailbox_data+0x188>)
   80398:	701a      	strb	r2, [r3, #0]
					bp_stop_command = master_command_byte;
   8039a:	4a3d      	ldr	r2, [pc, #244]	; (80490 <dd_can_extract_mailbox_data+0x190>)
   8039c:	7bfb      	ldrb	r3, [r7, #15]
   8039e:	7013      	strb	r3, [r2, #0]
					state =  HEMO_IDLE;
   803a0:	4b38      	ldr	r3, [pc, #224]	; (80484 <dd_can_extract_mailbox_data+0x184>)
   803a2:	2200      	movs	r2, #0
   803a4:	701a      	strb	r2, [r3, #0]
					break;
   803a6:	e04a      	b.n	8043e <dd_can_extract_mailbox_data+0x13e>
					case BP_COMPLETED:
					//flag = 1;
						flag_buff = 1;
   803a8:	4b37      	ldr	r3, [pc, #220]	; (80488 <dd_can_extract_mailbox_data+0x188>)
   803aa:	2201      	movs	r2, #1
   803ac:	701a      	strb	r2, [r3, #0]
					state =  HEMO_IDLE;
   803ae:	4b35      	ldr	r3, [pc, #212]	; (80484 <dd_can_extract_mailbox_data+0x184>)
   803b0:	2200      	movs	r2, #0
   803b2:	701a      	strb	r2, [r3, #0]
					break;
   803b4:	e043      	b.n	8043e <dd_can_extract_mailbox_data+0x13e>
					case BP_INC:
					//flag = 1;
						flag_buff = 1;
   803b6:	4b34      	ldr	r3, [pc, #208]	; (80488 <dd_can_extract_mailbox_data+0x188>)
   803b8:	2201      	movs	r2, #1
   803ba:	701a      	strb	r2, [r3, #0]
					state =  HEMO_IDLE;
   803bc:	4b31      	ldr	r3, [pc, #196]	; (80484 <dd_can_extract_mailbox_data+0x184>)
   803be:	2200      	movs	r2, #0
   803c0:	701a      	strb	r2, [r3, #0]
					break;
   803c2:	e03c      	b.n	8043e <dd_can_extract_mailbox_data+0x13e>
					case BP_DEC:
					//flag = 1;
						flag_buff = 1;
   803c4:	4b30      	ldr	r3, [pc, #192]	; (80488 <dd_can_extract_mailbox_data+0x188>)
   803c6:	2201      	movs	r2, #1
   803c8:	701a      	strb	r2, [r3, #0]
					state =  HEMO_IDLE;
   803ca:	4b2e      	ldr	r3, [pc, #184]	; (80484 <dd_can_extract_mailbox_data+0x184>)
   803cc:	2200      	movs	r2, #0
   803ce:	701a      	strb	r2, [r3, #0]
					break;
   803d0:	e035      	b.n	8043e <dd_can_extract_mailbox_data+0x13e>
					case BP_RECOVER:
					//flag = 1;
						flag_buff = 1;
   803d2:	4b2d      	ldr	r3, [pc, #180]	; (80488 <dd_can_extract_mailbox_data+0x188>)
   803d4:	2201      	movs	r2, #1
   803d6:	701a      	strb	r2, [r3, #0]
					state =  HEMO_IDLE;
   803d8:	4b2a      	ldr	r3, [pc, #168]	; (80484 <dd_can_extract_mailbox_data+0x184>)
   803da:	2200      	movs	r2, #0
   803dc:	701a      	strb	r2, [r3, #0]
					break;
   803de:	e02e      	b.n	8043e <dd_can_extract_mailbox_data+0x13e>
					case BP_SPEED_CHANGE:

					
					if(speed > 0)
   803e0:	89bb      	ldrh	r3, [r7, #12]
   803e2:	2b00      	cmp	r3, #0
   803e4:	d02a      	beq.n	8043c <dd_can_extract_mailbox_data+0x13c>
					{

						bp_speed = speed;						
   803e6:	89bb      	ldrh	r3, [r7, #12]
   803e8:	4a2a      	ldr	r2, [pc, #168]	; (80494 <dd_can_extract_mailbox_data+0x194>)
   803ea:	6013      	str	r3, [r2, #0]
							flag = 1;
   803ec:	4b2a      	ldr	r3, [pc, #168]	; (80498 <dd_can_extract_mailbox_data+0x198>)
   803ee:	2201      	movs	r2, #1
   803f0:	701a      	strb	r2, [r3, #0]
							flag_buff++;
   803f2:	4b25      	ldr	r3, [pc, #148]	; (80488 <dd_can_extract_mailbox_data+0x188>)
   803f4:	781b      	ldrb	r3, [r3, #0]
   803f6:	b2db      	uxtb	r3, r3
   803f8:	3301      	adds	r3, #1
   803fa:	b2da      	uxtb	r2, r3
   803fc:	4b22      	ldr	r3, [pc, #136]	; (80488 <dd_can_extract_mailbox_data+0x188>)
   803fe:	701a      	strb	r2, [r3, #0]
							bp_Speed_change_command = master_command_byte;
   80400:	4a26      	ldr	r2, [pc, #152]	; (8049c <dd_can_extract_mailbox_data+0x19c>)
   80402:	7bfb      	ldrb	r3, [r7, #15]
   80404:	7013      	strb	r3, [r2, #0]
							state =  HEMO_IDLE;
   80406:	4b1f      	ldr	r3, [pc, #124]	; (80484 <dd_can_extract_mailbox_data+0x184>)
   80408:	2200      	movs	r2, #0
   8040a:	701a      	strb	r2, [r3, #0]

					}
				
				
					break;
   8040c:	e016      	b.n	8043c <dd_can_extract_mailbox_data+0x13c>
					case BP_APT_VPT_SEND_TO_MASTER:
					//printf("speed\n");
					//state = HEMO_IDLE;
					flag = 0;
   8040e:	4b22      	ldr	r3, [pc, #136]	; (80498 <dd_can_extract_mailbox_data+0x198>)
   80410:	2200      	movs	r2, #0
   80412:	701a      	strb	r2, [r3, #0]
					flag_buff ++;
   80414:	4b1c      	ldr	r3, [pc, #112]	; (80488 <dd_can_extract_mailbox_data+0x188>)
   80416:	781b      	ldrb	r3, [r3, #0]
   80418:	b2db      	uxtb	r3, r3
   8041a:	3301      	adds	r3, #1
   8041c:	b2da      	uxtb	r2, r3
   8041e:	4b1a      	ldr	r3, [pc, #104]	; (80488 <dd_can_extract_mailbox_data+0x188>)
   80420:	701a      	strb	r2, [r3, #0]
					break;
   80422:	e00c      	b.n	8043e <dd_can_extract_mailbox_data+0x13e>
					case BP_DAC_REF:
					state =  HEMO_WAIT;
   80424:	4b17      	ldr	r3, [pc, #92]	; (80484 <dd_can_extract_mailbox_data+0x184>)
   80426:	2201      	movs	r2, #1
   80428:	701a      	strb	r2, [r3, #0]
					flag = 0;
   8042a:	4b1b      	ldr	r3, [pc, #108]	; (80498 <dd_can_extract_mailbox_data+0x198>)
   8042c:	2200      	movs	r2, #0
   8042e:	701a      	strb	r2, [r3, #0]
					flag_buff = 0;
   80430:	4b15      	ldr	r3, [pc, #84]	; (80488 <dd_can_extract_mailbox_data+0x188>)
   80432:	2200      	movs	r2, #0
   80434:	701a      	strb	r2, [r3, #0]
					break;
   80436:	e002      	b.n	8043e <dd_can_extract_mailbox_data+0x13e>
					default:
					break;
   80438:	bf00      	nop
   8043a:	e01a      	b.n	80472 <dd_can_extract_mailbox_data+0x172>
							state =  HEMO_IDLE;

					}
				
				
					break;
   8043c:	bf00      	nop
					flag_buff = 0;
					break;
					default:
					break;
				}
				break;
   8043e:	e018      	b.n	80472 <dd_can_extract_mailbox_data+0x172>
				
				case HEMO_WAIT:
				
//				if (data_count <= 2)

				if(speed > 0)
   80440:	89bb      	ldrh	r3, [r7, #12]
   80442:	2b00      	cmp	r3, #0
   80444:	d014      	beq.n	80470 <dd_can_extract_mailbox_data+0x170>
				{
// 					data[data_count] = twi_read_byte(BOARD_BASE_TWI_SLAVE);
// 					data_buff[data_count] = data[data_count];
// 					start_c[data_count]= data_buff[data_count];
//					bp_speed = temp_struct.temp_reg_16[1];
					bp_speed = speed;
   80446:	89bb      	ldrh	r3, [r7, #12]
   80448:	4a12      	ldr	r2, [pc, #72]	; (80494 <dd_can_extract_mailbox_data+0x194>)
   8044a:	6013      	str	r3, [r2, #0]
					state =  HEMO_WAIT;
   8044c:	4b0d      	ldr	r3, [pc, #52]	; (80484 <dd_can_extract_mailbox_data+0x184>)
   8044e:	2201      	movs	r2, #1
   80450:	701a      	strb	r2, [r3, #0]
					flag = 0;
   80452:	4b11      	ldr	r3, [pc, #68]	; (80498 <dd_can_extract_mailbox_data+0x198>)
   80454:	2200      	movs	r2, #0
   80456:	701a      	strb	r2, [r3, #0]
					flag_buff = 0;
   80458:	4b0b      	ldr	r3, [pc, #44]	; (80488 <dd_can_extract_mailbox_data+0x188>)
   8045a:	2200      	movs	r2, #0
   8045c:	701a      	strb	r2, [r3, #0]
					
					
					{
						//printf("%d \t %d \t %d\n",data_buff[0],data_buff[1],data_buff[2]);
						
						flag = 1;
   8045e:	4b0e      	ldr	r3, [pc, #56]	; (80498 <dd_can_extract_mailbox_data+0x198>)
   80460:	2201      	movs	r2, #1
   80462:	701a      	strb	r2, [r3, #0]
								flag_buff = 1;
   80464:	4b08      	ldr	r3, [pc, #32]	; (80488 <dd_can_extract_mailbox_data+0x188>)
   80466:	2201      	movs	r2, #1
   80468:	701a      	strb	r2, [r3, #0]
						state =  HEMO_IDLE;
   8046a:	4b06      	ldr	r3, [pc, #24]	; (80484 <dd_can_extract_mailbox_data+0x184>)
   8046c:	2200      	movs	r2, #0
   8046e:	701a      	strb	r2, [r3, #0]
					}
				}
				break;
   80470:	bf00      	nop
// 				twi_enable_interrupt(BOARD_BASE_TWI_SLAVE, TWI_SR_SVACC);
// 				twi_disable_interrupt(BOARD_BASE_TWI_SLAVE, TWI_IDR_RXRDY | TWI_IDR_GACC |
// 				TWI_IDR_NACK | TWI_IDR_EOSACC | TWI_IDR_SCL_WS |TWI_SR_TXRDY);
// 			}
// 		}
}
   80472:	bf00      	nop
   80474:	3714      	adds	r7, #20
   80476:	46bd      	mov	sp, r7
   80478:	bc80      	pop	{r7}
   8047a:	4770      	bx	lr
   8047c:	20070a3c 	.word	0x20070a3c
   80480:	20070938 	.word	0x20070938
   80484:	20070930 	.word	0x20070930
   80488:	20070a64 	.word	0x20070a64
   8048c:	2007093b 	.word	0x2007093b
   80490:	2007093c 	.word	0x2007093c
   80494:	20070a68 	.word	0x20070a68
   80498:	20070a38 	.word	0x20070a38
   8049c:	2007093d 	.word	0x2007093d

000804a0 <dd_can_mailbox_read>:
	   
	 
	


static uint32_t dd_can_mailbox_read(can_mb_conf_t *p_mailbox)   {
   804a0:	b480      	push	{r7}
   804a2:	b087      	sub	sp, #28
   804a4:	af00      	add	r7, sp, #0
   804a6:	6078      	str	r0, [r7, #4]

	uint32_t ul_status;
	uint8_t uc_index;
	uint32_t ul_retval;

	ul_retval = 0;
   804a8:	2300      	movs	r3, #0
   804aa:	617b      	str	r3, [r7, #20]
	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   804ac:	687b      	ldr	r3, [r7, #4]
   804ae:	681b      	ldr	r3, [r3, #0]
   804b0:	74fb      	strb	r3, [r7, #19]
	ul_status = p_mailbox->ul_status;
   804b2:	687b      	ldr	r3, [r7, #4]
   804b4:	689b      	ldr	r3, [r3, #8]
   804b6:	60fb      	str	r3, [r7, #12]
	 /* Check whether there is overwriting happening in Receive with * Overwrite mode,
	 * or there're messages lost in Receive mode. */
	 
	if ((ul_status & CAN_MSR_MRDY) && (ul_status & CAN_MSR_MMI)) {	ul_retval = CAN_MAILBOX_RX_OVER;	}
   804b8:	68fb      	ldr	r3, [r7, #12]
   804ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   804be:	2b00      	cmp	r3, #0
   804c0:	d006      	beq.n	804d0 <dd_can_mailbox_read+0x30>
   804c2:	68fb      	ldr	r3, [r7, #12]
   804c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   804c8:	2b00      	cmp	r3, #0
   804ca:	d001      	beq.n	804d0 <dd_can_mailbox_read+0x30>
   804cc:	2302      	movs	r3, #2
   804ce:	617b      	str	r3, [r7, #20]

	/* Read the message family ID. */
	p_mailbox->ul_fid =	CAN0->CAN_MB[uc_index].CAN_MFID & CAN_MFID_MFID_Msk;	
   804d0:	4a26      	ldr	r2, [pc, #152]	; (8056c <dd_can_mailbox_read+0xcc>)
   804d2:	7cfb      	ldrb	r3, [r7, #19]
   804d4:	015b      	lsls	r3, r3, #5
   804d6:	4413      	add	r3, r2
   804d8:	f503 7303 	add.w	r3, r3, #524	; 0x20c
   804dc:	681b      	ldr	r3, [r3, #0]
   804de:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   804e2:	687b      	ldr	r3, [r7, #4]
   804e4:	615a      	str	r2, [r3, #20]

	/* Read received data length. */
	p_mailbox->uc_length = (ul_status & CAN_MSR_MDLC_Msk) >> CAN_MSR_MDLC_Pos;
   804e6:	68fb      	ldr	r3, [r7, #12]
   804e8:	0c1b      	lsrs	r3, r3, #16
   804ea:	b2db      	uxtb	r3, r3
   804ec:	f003 030f 	and.w	r3, r3, #15
   804f0:	b2da      	uxtb	r2, r3
   804f2:	687b      	ldr	r3, [r7, #4]
   804f4:	719a      	strb	r2, [r3, #6]
	
	/* Read received data. */
	p_mailbox->ul_datal = CAN0->CAN_MB[uc_index].CAN_MDL;
   804f6:	4a1d      	ldr	r2, [pc, #116]	; (8056c <dd_can_mailbox_read+0xcc>)
   804f8:	7cfb      	ldrb	r3, [r7, #19]
   804fa:	015b      	lsls	r3, r3, #5
   804fc:	4413      	add	r3, r2
   804fe:	f503 7305 	add.w	r3, r3, #532	; 0x214
   80502:	681a      	ldr	r2, [r3, #0]
   80504:	687b      	ldr	r3, [r7, #4]
   80506:	619a      	str	r2, [r3, #24]
	p_mailbox->ul_datah = CAN0->CAN_MB[uc_index].CAN_MDH;
   80508:	4a18      	ldr	r2, [pc, #96]	; (8056c <dd_can_mailbox_read+0xcc>)
   8050a:	7cfb      	ldrb	r3, [r7, #19]
   8050c:	015b      	lsls	r3, r3, #5
   8050e:	4413      	add	r3, r2
   80510:	f503 7306 	add.w	r3, r3, #536	; 0x218
   80514:	681a      	ldr	r2, [r3, #0]
   80516:	687b      	ldr	r3, [r7, #4]
   80518:	61da      	str	r2, [r3, #28]
	
	
	/* Read the mailbox status again to check whether the software needs to
	 * re-read mailbox data register. */
	p_mailbox->ul_status = CAN0->CAN_MB[uc_index].CAN_MSR;
   8051a:	4a14      	ldr	r2, [pc, #80]	; (8056c <dd_can_mailbox_read+0xcc>)
   8051c:	7cfb      	ldrb	r3, [r7, #19]
   8051e:	015b      	lsls	r3, r3, #5
   80520:	4413      	add	r3, r2
   80522:	f503 7304 	add.w	r3, r3, #528	; 0x210
   80526:	681a      	ldr	r2, [r3, #0]
   80528:	687b      	ldr	r3, [r7, #4]
   8052a:	609a      	str	r2, [r3, #8]
	ul_status = p_mailbox->ul_status;
   8052c:	687b      	ldr	r3, [r7, #4]
   8052e:	689b      	ldr	r3, [r3, #8]
   80530:	60fb      	str	r3, [r7, #12]
	if (ul_status & CAN_MSR_MMI) {ul_retval |= CAN_MAILBOX_RX_NEED_RD_AGAIN;	}
   80532:	68fb      	ldr	r3, [r7, #12]
   80534:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   80538:	2b00      	cmp	r3, #0
   8053a:	d003      	beq.n	80544 <dd_can_mailbox_read+0xa4>
   8053c:	697b      	ldr	r3, [r7, #20]
   8053e:	f043 0304 	orr.w	r3, r3, #4
   80542:	617b      	str	r3, [r7, #20]
	else { ul_retval |= CAN_MAILBOX_TRANSFER_OK; }		
		
	/* Enable next receive process. */	 // Allows the reception of the next message
	CAN0->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MTCR |CAN_MCR_MDLC(p_mailbox->uc_length);    
   80544:	4909      	ldr	r1, [pc, #36]	; (8056c <dd_can_mailbox_read+0xcc>)
   80546:	7cfb      	ldrb	r3, [r7, #19]
   80548:	687a      	ldr	r2, [r7, #4]
   8054a:	7992      	ldrb	r2, [r2, #6]
   8054c:	0412      	lsls	r2, r2, #16
   8054e:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   80552:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
   80556:	015b      	lsls	r3, r3, #5
   80558:	440b      	add	r3, r1
   8055a:	f503 7307 	add.w	r3, r3, #540	; 0x21c
   8055e:	601a      	str	r2, [r3, #0]
	return ul_retval;
   80560:	697b      	ldr	r3, [r7, #20]
}
   80562:	4618      	mov	r0, r3
   80564:	371c      	adds	r7, #28
   80566:	46bd      	mov	sp, r7
   80568:	bc80      	pop	{r7}
   8056a:	4770      	bx	lr
   8056c:	400b4000 	.word	0x400b4000

00080570 <dd_can_mailbox_write>:

		
 uint32_t dd_can_mailbox_write(can_mb_conf_t *p_mailbox)
{
   80570:	b480      	push	{r7}
   80572:	b085      	sub	sp, #20
   80574:	af00      	add	r7, sp, #0
   80576:	6078      	str	r0, [r7, #4]
	uint32_t ul_status;
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   80578:	687b      	ldr	r3, [r7, #4]
   8057a:	681b      	ldr	r3, [r3, #0]
   8057c:	73fb      	strb	r3, [r7, #15]
	/* Read the mailbox status firstly to check whether the mailbox is ready
	 *or not. */
	p_mailbox->ul_status = CAN0->CAN_MB[uc_index].CAN_MSR;
   8057e:	4a2a      	ldr	r2, [pc, #168]	; (80628 <dd_can_mailbox_write+0xb8>)
   80580:	7bfb      	ldrb	r3, [r7, #15]
   80582:	015b      	lsls	r3, r3, #5
   80584:	4413      	add	r3, r2
   80586:	f503 7304 	add.w	r3, r3, #528	; 0x210
   8058a:	681a      	ldr	r2, [r3, #0]
   8058c:	687b      	ldr	r3, [r7, #4]
   8058e:	609a      	str	r2, [r3, #8]
	ul_status = p_mailbox->ul_status;
   80590:	687b      	ldr	r3, [r7, #4]
   80592:	689b      	ldr	r3, [r3, #8]
   80594:	60bb      	str	r3, [r7, #8]
	if (!(ul_status & CAN_MSR_MRDY)) {
   80596:	68bb      	ldr	r3, [r7, #8]
   80598:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
   8059c:	2b00      	cmp	r3, #0
   8059e:	d101      	bne.n	805a4 <dd_can_mailbox_write+0x34>
		return CAN_MAILBOX_NOT_READY;
   805a0:	2301      	movs	r3, #1
   805a2:	e03b      	b.n	8061c <dd_can_mailbox_write+0xac>
	}

	/* Write transmit identifier. */
	if (p_mailbox->uc_id_ver) { 
   805a4:	687b      	ldr	r3, [r7, #4]
   805a6:	795b      	ldrb	r3, [r3, #5]
   805a8:	2b00      	cmp	r3, #0
   805aa:	d00b      	beq.n	805c4 <dd_can_mailbox_write+0x54>
		CAN0->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id | CAN_MAM_MIDE;
   805ac:	491e      	ldr	r1, [pc, #120]	; (80628 <dd_can_mailbox_write+0xb8>)
   805ae:	7bfb      	ldrb	r3, [r7, #15]
   805b0:	687a      	ldr	r2, [r7, #4]
   805b2:	6912      	ldr	r2, [r2, #16]
   805b4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   805b8:	015b      	lsls	r3, r3, #5
   805ba:	440b      	add	r3, r1
   805bc:	f503 7302 	add.w	r3, r3, #520	; 0x208
   805c0:	601a      	str	r2, [r3, #0]
   805c2:	e008      	b.n	805d6 <dd_can_mailbox_write+0x66>
	} else {
		CAN0->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;
   805c4:	4918      	ldr	r1, [pc, #96]	; (80628 <dd_can_mailbox_write+0xb8>)
   805c6:	7bfb      	ldrb	r3, [r7, #15]
   805c8:	687a      	ldr	r2, [r7, #4]
   805ca:	6912      	ldr	r2, [r2, #16]
   805cc:	015b      	lsls	r3, r3, #5
   805ce:	440b      	add	r3, r1
   805d0:	f503 7302 	add.w	r3, r3, #520	; 0x208
   805d4:	601a      	str	r2, [r3, #0]
	}

	/* Write transmit data into mailbox data register. */
	CAN0->CAN_MB[uc_index].CAN_MDL = p_mailbox->ul_datal;
   805d6:	4914      	ldr	r1, [pc, #80]	; (80628 <dd_can_mailbox_write+0xb8>)
   805d8:	7bfb      	ldrb	r3, [r7, #15]
   805da:	687a      	ldr	r2, [r7, #4]
   805dc:	6992      	ldr	r2, [r2, #24]
   805de:	015b      	lsls	r3, r3, #5
   805e0:	440b      	add	r3, r1
   805e2:	f503 7305 	add.w	r3, r3, #532	; 0x214
   805e6:	601a      	str	r2, [r3, #0]
	if (p_mailbox->uc_length > 4) {  CAN0->CAN_MB[uc_index].CAN_MDH = p_mailbox->ul_datah;
   805e8:	687b      	ldr	r3, [r7, #4]
   805ea:	799b      	ldrb	r3, [r3, #6]
   805ec:	2b04      	cmp	r3, #4
   805ee:	d908      	bls.n	80602 <dd_can_mailbox_write+0x92>
   805f0:	490d      	ldr	r1, [pc, #52]	; (80628 <dd_can_mailbox_write+0xb8>)
   805f2:	7bfb      	ldrb	r3, [r7, #15]
   805f4:	687a      	ldr	r2, [r7, #4]
   805f6:	69d2      	ldr	r2, [r2, #28]
   805f8:	015b      	lsls	r3, r3, #5
   805fa:	440b      	add	r3, r1
   805fc:	f503 7306 	add.w	r3, r3, #536	; 0x218
   80600:	601a      	str	r2, [r3, #0]
	}

	/* Write transmit data length into mailbox control register. */
	CAN0->CAN_MB[uc_index].CAN_MCR = CAN_MCR_MDLC(p_mailbox->uc_length);
   80602:	4909      	ldr	r1, [pc, #36]	; (80628 <dd_can_mailbox_write+0xb8>)
   80604:	7bfb      	ldrb	r3, [r7, #15]
   80606:	687a      	ldr	r2, [r7, #4]
   80608:	7992      	ldrb	r2, [r2, #6]
   8060a:	0412      	lsls	r2, r2, #16
   8060c:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
   80610:	015b      	lsls	r3, r3, #5
   80612:	440b      	add	r3, r1
   80614:	f503 7307 	add.w	r3, r3, #540	; 0x21c
   80618:	601a      	str	r2, [r3, #0]

	return CAN_MAILBOX_TRANSFER_OK;
   8061a:	2300      	movs	r3, #0
}
   8061c:	4618      	mov	r0, r3
   8061e:	3714      	adds	r7, #20
   80620:	46bd      	mov	sp, r7
   80622:	bc80      	pop	{r7}
   80624:	4770      	bx	lr
   80626:	bf00      	nop
   80628:	400b4000 	.word	0x400b4000

0008062c <dd_can_global_send_transfer_cmd>:

void dd_can_global_send_transfer_cmd(uint8_t uc_mask)
{
   8062c:	b480      	push	{r7}
   8062e:	b085      	sub	sp, #20
   80630:	af00      	add	r7, sp, #0
   80632:	4603      	mov	r3, r0
   80634:	71fb      	strb	r3, [r7, #7]
	uint32_t ul_reg;

	ul_reg = CAN0->CAN_TCR & ((uint32_t) ~GLOBAL_MAILBOX_MASK);
   80636:	4b07      	ldr	r3, [pc, #28]	; (80654 <dd_can_global_send_transfer_cmd+0x28>)
   80638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   8063a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   8063e:	60fb      	str	r3, [r7, #12]
	CAN0->CAN_TCR = ul_reg | uc_mask;
   80640:	4904      	ldr	r1, [pc, #16]	; (80654 <dd_can_global_send_transfer_cmd+0x28>)
   80642:	79fa      	ldrb	r2, [r7, #7]
   80644:	68fb      	ldr	r3, [r7, #12]
   80646:	4313      	orrs	r3, r2
   80648:	624b      	str	r3, [r1, #36]	; 0x24
}
   8064a:	bf00      	nop
   8064c:	3714      	adds	r7, #20
   8064e:	46bd      	mov	sp, r7
   80650:	bc80      	pop	{r7}
   80652:	4770      	bx	lr
   80654:	400b4000 	.word	0x400b4000

00080658 <dd_can_mailbox_conf>:



 void dd_can_mailbox_conf(can_mb_conf_t *p_mailbox)
{
   80658:	b480      	push	{r7}
   8065a:	b085      	sub	sp, #20
   8065c:	af00      	add	r7, sp, #0
   8065e:	6078      	str	r0, [r7, #4]
	uint8_t uc_index;

	uc_index = (uint8_t)p_mailbox->ul_mb_idx;
   80660:	687b      	ldr	r3, [r7, #4]
   80662:	681b      	ldr	r3, [r3, #0]
   80664:	73fb      	strb	r3, [r7, #15]
	/* Check the object type of the mailbox. If it's used to disable the
	 * mailbox, reset the whole mailbox. */
	if (!p_mailbox->uc_obj_type) {
   80666:	687b      	ldr	r3, [r7, #4]
   80668:	791b      	ldrb	r3, [r3, #4]
   8066a:	2b00      	cmp	r3, #0
   8066c:	d12f      	bne.n	806ce <dd_can_mailbox_conf+0x76>
		CAN0->CAN_MB[uc_index].CAN_MMR = 0;
   8066e:	4a35      	ldr	r2, [pc, #212]	; (80744 <dd_can_mailbox_conf+0xec>)
   80670:	7bfb      	ldrb	r3, [r7, #15]
   80672:	3310      	adds	r3, #16
   80674:	015b      	lsls	r3, r3, #5
   80676:	4413      	add	r3, r2
   80678:	2200      	movs	r2, #0
   8067a:	601a      	str	r2, [r3, #0]
		CAN0->CAN_MB[uc_index].CAN_MAM = 0;
   8067c:	4a31      	ldr	r2, [pc, #196]	; (80744 <dd_can_mailbox_conf+0xec>)
   8067e:	7bfb      	ldrb	r3, [r7, #15]
   80680:	3310      	adds	r3, #16
   80682:	015b      	lsls	r3, r3, #5
   80684:	4413      	add	r3, r2
   80686:	3304      	adds	r3, #4
   80688:	2200      	movs	r2, #0
   8068a:	601a      	str	r2, [r3, #0]
		CAN0->CAN_MB[uc_index].CAN_MID = 0;
   8068c:	4a2d      	ldr	r2, [pc, #180]	; (80744 <dd_can_mailbox_conf+0xec>)
   8068e:	7bfb      	ldrb	r3, [r7, #15]
   80690:	015b      	lsls	r3, r3, #5
   80692:	4413      	add	r3, r2
   80694:	f503 7302 	add.w	r3, r3, #520	; 0x208
   80698:	2200      	movs	r2, #0
   8069a:	601a      	str	r2, [r3, #0]
		CAN0->CAN_MB[uc_index].CAN_MDL = 0;
   8069c:	4a29      	ldr	r2, [pc, #164]	; (80744 <dd_can_mailbox_conf+0xec>)
   8069e:	7bfb      	ldrb	r3, [r7, #15]
   806a0:	015b      	lsls	r3, r3, #5
   806a2:	4413      	add	r3, r2
   806a4:	f503 7305 	add.w	r3, r3, #532	; 0x214
   806a8:	2200      	movs	r2, #0
   806aa:	601a      	str	r2, [r3, #0]
		CAN0->CAN_MB[uc_index].CAN_MDH = 0;
   806ac:	4a25      	ldr	r2, [pc, #148]	; (80744 <dd_can_mailbox_conf+0xec>)
   806ae:	7bfb      	ldrb	r3, [r7, #15]
   806b0:	015b      	lsls	r3, r3, #5
   806b2:	4413      	add	r3, r2
   806b4:	f503 7306 	add.w	r3, r3, #536	; 0x218
   806b8:	2200      	movs	r2, #0
   806ba:	601a      	str	r2, [r3, #0]
		CAN0->CAN_MB[uc_index].CAN_MCR = 0;
   806bc:	4a21      	ldr	r2, [pc, #132]	; (80744 <dd_can_mailbox_conf+0xec>)
   806be:	7bfb      	ldrb	r3, [r7, #15]
   806c0:	015b      	lsls	r3, r3, #5
   806c2:	4413      	add	r3, r2
   806c4:	f503 7307 	add.w	r3, r3, #540	; 0x21c
   806c8:	2200      	movs	r2, #0
   806ca:	601a      	str	r2, [r3, #0]
		return;
   806cc:	e035      	b.n	8073a <dd_can_mailbox_conf+0xe2>
	}
	
	/* Set the priority in Transmit mode. */                                                                   
	CAN0->CAN_MB[uc_index].CAN_MMR = (CAN0->CAN_MB[uc_index].CAN_MMR &  ~CAN_MMR_PRIOR_Msk) | (p_mailbox->uc_tx_prio << CAN_MMR_PRIOR_Pos);  
   806ce:	481d      	ldr	r0, [pc, #116]	; (80744 <dd_can_mailbox_conf+0xec>)
   806d0:	7bfb      	ldrb	r3, [r7, #15]
   806d2:	491c      	ldr	r1, [pc, #112]	; (80744 <dd_can_mailbox_conf+0xec>)
   806d4:	7bfa      	ldrb	r2, [r7, #15]
   806d6:	3210      	adds	r2, #16
   806d8:	0152      	lsls	r2, r2, #5
   806da:	440a      	add	r2, r1
   806dc:	6812      	ldr	r2, [r2, #0]
   806de:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
   806e2:	6879      	ldr	r1, [r7, #4]
   806e4:	79c9      	ldrb	r1, [r1, #7]
   806e6:	0409      	lsls	r1, r1, #16
   806e8:	430a      	orrs	r2, r1
   806ea:	3310      	adds	r3, #16
   806ec:	015b      	lsls	r3, r3, #5
   806ee:	4403      	add	r3, r0
   806f0:	601a      	str	r2, [r3, #0]
	/* Set the message ID and message acceptance mask for the mailbox in * other modes. */	
		CAN0 ->CAN_MB[uc_index].CAN_MAM = p_mailbox->ul_id_msk;
   806f2:	4914      	ldr	r1, [pc, #80]	; (80744 <dd_can_mailbox_conf+0xec>)
   806f4:	7bfb      	ldrb	r3, [r7, #15]
   806f6:	687a      	ldr	r2, [r7, #4]
   806f8:	68d2      	ldr	r2, [r2, #12]
   806fa:	3310      	adds	r3, #16
   806fc:	015b      	lsls	r3, r3, #5
   806fe:	440b      	add	r3, r1
   80700:	3304      	adds	r3, #4
   80702:	601a      	str	r2, [r3, #0]
		CAN0 ->CAN_MB[uc_index].CAN_MID = p_mailbox->ul_id;	
   80704:	490f      	ldr	r1, [pc, #60]	; (80744 <dd_can_mailbox_conf+0xec>)
   80706:	7bfb      	ldrb	r3, [r7, #15]
   80708:	687a      	ldr	r2, [r7, #4]
   8070a:	6912      	ldr	r2, [r2, #16]
   8070c:	015b      	lsls	r3, r3, #5
   8070e:	440b      	add	r3, r1
   80710:	f503 7302 	add.w	r3, r3, #520	; 0x208
   80714:	601a      	str	r2, [r3, #0]

	/* Set up mailbox in one of the five different modes. */                                                      
	CAN0 ->CAN_MB[uc_index].CAN_MMR = (CAN0 ->CAN_MB[uc_index].CAN_MMR & ~CAN_MMR_MOT_Msk) | (p_mailbox->uc_obj_type << CAN_MMR_MOT_Pos);		
   80716:	480b      	ldr	r0, [pc, #44]	; (80744 <dd_can_mailbox_conf+0xec>)
   80718:	7bfb      	ldrb	r3, [r7, #15]
   8071a:	490a      	ldr	r1, [pc, #40]	; (80744 <dd_can_mailbox_conf+0xec>)
   8071c:	7bfa      	ldrb	r2, [r7, #15]
   8071e:	3210      	adds	r2, #16
   80720:	0152      	lsls	r2, r2, #5
   80722:	440a      	add	r2, r1
   80724:	6812      	ldr	r2, [r2, #0]
   80726:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
   8072a:	6879      	ldr	r1, [r7, #4]
   8072c:	7909      	ldrb	r1, [r1, #4]
   8072e:	0609      	lsls	r1, r1, #24
   80730:	430a      	orrs	r2, r1
   80732:	3310      	adds	r3, #16
   80734:	015b      	lsls	r3, r3, #5
   80736:	4403      	add	r3, r0
   80738:	601a      	str	r2, [r3, #0]
}
   8073a:	3714      	adds	r7, #20
   8073c:	46bd      	mov	sp, r7
   8073e:	bc80      	pop	{r7}
   80740:	4770      	bx	lr
   80742:	bf00      	nop
   80744:	400b4000 	.word	0x400b4000

00080748 <DD_INIT_CAN>:
	p_mailbox->ul_fid = 0;
	p_mailbox->ul_datal = 0;
	p_mailbox->ul_datah = 0;
}

void DD_INIT_CAN()     {
   80748:	b580      	push	{r7, lr}
   8074a:	b08e      	sub	sp, #56	; 0x38
   8074c:	af00      	add	r7, sp, #0
	can_bit_timing_t  *p_bit_time ;
	p_bit_time = (can_bit_timing_t *)&can_bit_time[6];
   8074e:	4b4f      	ldr	r3, [pc, #316]	; (8088c <DD_INIT_CAN+0x144>)
   80750:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t ul_flag;
	uint32_t ul_tick;
	uint8_t uc_prescale = 120;
   80752:	2378      	movs	r3, #120	; 0x78
   80754:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint32_t ul_sysclk;
	CAN0 ->CAN_WPMR = 0x43414E00;  //Can write protection disabled
   80758:	4b4d      	ldr	r3, [pc, #308]	; (80890 <DD_INIT_CAN+0x148>)
   8075a:	4a4e      	ldr	r2, [pc, #312]	; (80894 <DD_INIT_CAN+0x14c>)
   8075c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	CAN0 ->CAN_MR &= ~CAN_MR_CANEN ;  //0xFFFFFFFE; // DISABLE CAN0
   80760:	4a4b      	ldr	r2, [pc, #300]	; (80890 <DD_INIT_CAN+0x148>)
   80762:	4b4b      	ldr	r3, [pc, #300]	; (80890 <DD_INIT_CAN+0x148>)
   80764:	681b      	ldr	r3, [r3, #0]
   80766:	f023 0301 	bic.w	r3, r3, #1
   8076a:	6013      	str	r3, [r2, #0]
	CAN0->CAN_BR = CAN_BR_PHASE2(p_bit_time->uc_phase2 - 1) |CAN_BR_PHASE1(p_bit_time->uc_phase1 - 1) | CAN_BR_PROPAG(p_bit_time->uc_prog - 1) | CAN_BR_SJW(p_bit_time->uc_sjw - 1) |	CAN_BR_BRP(uc_prescale - 1);
   8076c:	4948      	ldr	r1, [pc, #288]	; (80890 <DD_INIT_CAN+0x148>)
   8076e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   80770:	78db      	ldrb	r3, [r3, #3]
   80772:	3b01      	subs	r3, #1
   80774:	f003 0207 	and.w	r2, r3, #7
   80778:	6abb      	ldr	r3, [r7, #40]	; 0x28
   8077a:	789b      	ldrb	r3, [r3, #2]
   8077c:	3b01      	subs	r3, #1
   8077e:	011b      	lsls	r3, r3, #4
   80780:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80784:	431a      	orrs	r2, r3
   80786:	6abb      	ldr	r3, [r7, #40]	; 0x28
   80788:	785b      	ldrb	r3, [r3, #1]
   8078a:	3b01      	subs	r3, #1
   8078c:	021b      	lsls	r3, r3, #8
   8078e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
   80792:	431a      	orrs	r2, r3
   80794:	6abb      	ldr	r3, [r7, #40]	; 0x28
   80796:	791b      	ldrb	r3, [r3, #4]
   80798:	3b01      	subs	r3, #1
   8079a:	031b      	lsls	r3, r3, #12
   8079c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
   807a0:	431a      	orrs	r2, r3
   807a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
   807a6:	3b01      	subs	r3, #1
   807a8:	041b      	lsls	r3, r3, #16
   807aa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
   807ae:	4313      	orrs	r3, r2
   807b0:	614b      	str	r3, [r1, #20]
	can_mb_conf_t mb_config_t;
	
	//RESET ALL MAIL BOX
	//can_bit_timing_t *p_bit_time;
	/* Set the mailbox object type parameter to disable the mailbox. */
	mb_config_t.uc_obj_type = CAN_MB_DISABLE_MODE;
   807b2:	2300      	movs	r3, #0
   807b4:	723b      	strb	r3, [r7, #8]
	for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   807b6:	2300      	movs	r3, #0
   807b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   807bc:	e00b      	b.n	807d6 <DD_INIT_CAN+0x8e>
		mb_config_t.ul_mb_idx = i;
   807be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   807c2:	607b      	str	r3, [r7, #4]
		dd_can_mailbox_conf(&mb_config_t);
   807c4:	1d3b      	adds	r3, r7, #4
   807c6:	4618      	mov	r0, r3
   807c8:	4b33      	ldr	r3, [pc, #204]	; (80898 <DD_INIT_CAN+0x150>)
   807ca:	4798      	blx	r3
	
	//RESET ALL MAIL BOX
	//can_bit_timing_t *p_bit_time;
	/* Set the mailbox object type parameter to disable the mailbox. */
	mb_config_t.uc_obj_type = CAN_MB_DISABLE_MODE;
	for (uint8_t i = 0; i < CANMB_NUMBER; i++) {
   807cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   807d0:	3301      	adds	r3, #1
   807d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
   807d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
   807da:	2b07      	cmp	r3, #7
   807dc:	d9ef      	bls.n	807be <DD_INIT_CAN+0x76>
		mb_config_t.ul_mb_idx = i;
		dd_can_mailbox_conf(&mb_config_t);
	}
	// ALL MAIL BOX HAS BEEN RESET
	CAN0->CAN_MR |= CAN_MR_CANEN ;  //0x00000001; // CAN IS ENABLED
   807de:	4a2c      	ldr	r2, [pc, #176]	; (80890 <DD_INIT_CAN+0x148>)
   807e0:	4b2b      	ldr	r3, [pc, #172]	; (80890 <DD_INIT_CAN+0x148>)
   807e2:	681b      	ldr	r3, [r3, #0]
   807e4:	f043 0301 	orr.w	r3, r3, #1
   807e8:	6013      	str	r3, [r2, #0]
	
	/* Wait until the CAN is synchronized with the bus activity. */
	ul_flag = 0;
   807ea:	2300      	movs	r3, #0
   807ec:	637b      	str	r3, [r7, #52]	; 0x34
	ul_tick = 0;
   807ee:	2300      	movs	r3, #0
   807f0:	633b      	str	r3, [r7, #48]	; 0x30
	while  (!(ul_flag & CAN_SR_WAKEUP) && (ul_tick < CAN_TIMEOUT))    {//(!(ul_flag & 0x100000 ) && (ul_tick < CAN_TIMEOUT)) {  //check can_bus wakeup bit
   807f2:	e005      	b.n	80800 <DD_INIT_CAN+0xb8>
		ul_flag = (CAN0->CAN_SR);
   807f4:	4b26      	ldr	r3, [pc, #152]	; (80890 <DD_INIT_CAN+0x148>)
   807f6:	691b      	ldr	r3, [r3, #16]
   807f8:	637b      	str	r3, [r7, #52]	; 0x34
		ul_tick++;
   807fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   807fc:	3301      	adds	r3, #1
   807fe:	633b      	str	r3, [r7, #48]	; 0x30
	CAN0->CAN_MR |= CAN_MR_CANEN ;  //0x00000001; // CAN IS ENABLED
	
	/* Wait until the CAN is synchronized with the bus activity. */
	ul_flag = 0;
	ul_tick = 0;
	while  (!(ul_flag & CAN_SR_WAKEUP) && (ul_tick < CAN_TIMEOUT))    {//(!(ul_flag & 0x100000 ) && (ul_tick < CAN_TIMEOUT)) {  //check can_bus wakeup bit
   80800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   80802:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
   80806:	2b00      	cmp	r3, #0
   80808:	d103      	bne.n	80812 <DD_INIT_CAN+0xca>
   8080a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   8080c:	4a23      	ldr	r2, [pc, #140]	; (8089c <DD_INIT_CAN+0x154>)
   8080e:	4293      	cmp	r3, r2
   80810:	d9f0      	bls.n	807f4 <DD_INIT_CAN+0xac>
	/* Timeout or the CAN module has been synchronized with the bus. */
/*	if (CAN_TIMEOUT == ul_tick) { puts("CAN initialization (sync) ERROR" STRING_EOL);	}
	else {	puts("CAN initialization is completed." STRING_EOL);
	}*/
	//NVIC-> ISER reset_mailbox_conf(&can0_mailbox);
	can0_mailbox.ul_mb_idx =   MAILBOX_1;
   80812:	4b23      	ldr	r3, [pc, #140]	; (808a0 <DD_INIT_CAN+0x158>)
   80814:	2201      	movs	r2, #1
   80816:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_RX_MODE ;
   80818:	4b21      	ldr	r3, [pc, #132]	; (808a0 <DD_INIT_CAN+0x158>)
   8081a:	2201      	movs	r2, #1
   8081c:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = 0;
   8081e:	4b20      	ldr	r3, [pc, #128]	; (808a0 <DD_INIT_CAN+0x158>)
   80820:	2200      	movs	r2, #0
   80822:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   80824:	4b1e      	ldr	r3, [pc, #120]	; (808a0 <DD_INIT_CAN+0x158>)
   80826:	2200      	movs	r2, #0
   80828:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk =  CAN_MFID_MFID_VA_dd(CAN_MASK);   // 0x7FC | CAN_MAM_MIDvA_Msk ;
   8082a:	4b1d      	ldr	r3, [pc, #116]	; (808a0 <DD_INIT_CAN+0x158>)
   8082c:	4a1d      	ldr	r2, [pc, #116]	; (808a4 <DD_INIT_CAN+0x15c>)
   8082e:	60da      	str	r2, [r3, #12]
	can0_mailbox.ul_id = CAN_MID_MIDvA_dd(HEMO_CPU_id) ;
   80830:	4b1b      	ldr	r3, [pc, #108]	; (808a0 <DD_INIT_CAN+0x158>)
   80832:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   80836:	611a      	str	r2, [r3, #16]
	dd_can_mailbox_conf(&can0_mailbox);
   80838:	4819      	ldr	r0, [pc, #100]	; (808a0 <DD_INIT_CAN+0x158>)
   8083a:	4b17      	ldr	r3, [pc, #92]	; (80898 <DD_INIT_CAN+0x150>)
   8083c:	4798      	blx	r3
	NVIC_EnableIRQ(CAN0_IRQn);
   8083e:	202b      	movs	r0, #43	; 0x2b
   80840:	4b19      	ldr	r3, [pc, #100]	; (808a8 <DD_INIT_CAN+0x160>)
   80842:	4798      	blx	r3
	CAN0->CAN_IER = CAN_IER_MB1;
   80844:	4b12      	ldr	r3, [pc, #72]	; (80890 <DD_INIT_CAN+0x148>)
   80846:	2202      	movs	r2, #2
   80848:	605a      	str	r2, [r3, #4]
	
	can0_mailbox.ul_mb_idx =   MAILBOX_0;
   8084a:	4b15      	ldr	r3, [pc, #84]	; (808a0 <DD_INIT_CAN+0x158>)
   8084c:	2200      	movs	r2, #0
   8084e:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_TX_MODE ;
   80850:	4b13      	ldr	r3, [pc, #76]	; (808a0 <DD_INIT_CAN+0x158>)
   80852:	2203      	movs	r2, #3
   80854:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = 1;
   80856:	4b12      	ldr	r3, [pc, #72]	; (808a0 <DD_INIT_CAN+0x158>)
   80858:	2201      	movs	r2, #1
   8085a:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   8085c:	4b10      	ldr	r3, [pc, #64]	; (808a0 <DD_INIT_CAN+0x158>)
   8085e:	2200      	movs	r2, #0
   80860:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk = CAN_MFID_MFID_VA_dd(CAN_MASK);// 0x7FC | CAN_MAM_MIDvA_Msk | CAN_MAM_MIDvB_Msk ;
   80862:	4b0f      	ldr	r3, [pc, #60]	; (808a0 <DD_INIT_CAN+0x158>)
   80864:	4a0f      	ldr	r2, [pc, #60]	; (808a4 <DD_INIT_CAN+0x15c>)
   80866:	60da      	str	r2, [r3, #12]
	can0_mailbox.ul_id = CAN_MID_MIDvA_dd(MASTER_CPU_id);
   80868:	4b0d      	ldr	r3, [pc, #52]	; (808a0 <DD_INIT_CAN+0x158>)
   8086a:	f44f 1220 	mov.w	r2, #2621440	; 0x280000
   8086e:	611a      	str	r2, [r3, #16]
	dd_can_mailbox_conf(&can0_mailbox);	
   80870:	480b      	ldr	r0, [pc, #44]	; (808a0 <DD_INIT_CAN+0x158>)
   80872:	4b09      	ldr	r3, [pc, #36]	; (80898 <DD_INIT_CAN+0x150>)
   80874:	4798      	blx	r3
	
		sn65hvda540_set_en(&can0_transceiver ,PIN_CAN0_STANDBY_IDX);
   80876:	2102      	movs	r1, #2
   80878:	480c      	ldr	r0, [pc, #48]	; (808ac <DD_INIT_CAN+0x164>)
   8087a:	4b0d      	ldr	r3, [pc, #52]	; (808b0 <DD_INIT_CAN+0x168>)
   8087c:	4798      	blx	r3
		sn65hvda540_normal_mode(&can0_transceiver);
   8087e:	480b      	ldr	r0, [pc, #44]	; (808ac <DD_INIT_CAN+0x164>)
   80880:	4b0c      	ldr	r3, [pc, #48]	; (808b4 <DD_INIT_CAN+0x16c>)
   80882:	4798      	blx	r3
}
   80884:	bf00      	nop
   80886:	3738      	adds	r7, #56	; 0x38
   80888:	46bd      	mov	sp, r7
   8088a:	bd80      	pop	{r7, pc}
   8088c:	0008756c 	.word	0x0008756c
   80890:	400b4000 	.word	0x400b4000
   80894:	43414e00 	.word	0x43414e00
   80898:	00080659 	.word	0x00080659
   8089c:	0001869f 	.word	0x0001869f
   808a0:	20070a44 	.word	0x20070a44
   808a4:	1ffc0000 	.word	0x1ffc0000
   808a8:	000801c9 	.word	0x000801c9
   808ac:	20070a70 	.word	0x20070a70
   808b0:	00080265 	.word	0x00080265
   808b4:	00080281 	.word	0x00080281

000808b8 <dd_APT_REG_INIT>:
#include  "Platform/Driver/CPU2_DD_SPI/D_SPI.h"
uint16_t command_data_array[5];
	

void dd_APT_REG_INIT()
     	{
   808b8:	b580      	push	{r7, lr}
   808ba:	b084      	sub	sp, #16
   808bc:	af00      	add	r7, sp, #0
    	
		command_data_array[0] = ADS1120_RESET;
   808be:	4b1e      	ldr	r3, [pc, #120]	; (80938 <dd_APT_REG_INIT+0x80>)
   808c0:	2206      	movs	r2, #6
   808c2:	801a      	strh	r2, [r3, #0]
     	dd_spi_master_transfer(&command_data_array, 1);
   808c4:	2101      	movs	r1, #1
   808c6:	481c      	ldr	r0, [pc, #112]	; (80938 <dd_APT_REG_INIT+0x80>)
   808c8:	4b1c      	ldr	r3, [pc, #112]	; (8093c <dd_APT_REG_INIT+0x84>)
   808ca:	4798      	blx	r3
		 
		 
		 for (int i=0;i<10000;i++)
   808cc:	2300      	movs	r3, #0
   808ce:	60fb      	str	r3, [r7, #12]
   808d0:	e002      	b.n	808d8 <dd_APT_REG_INIT+0x20>
   808d2:	68fb      	ldr	r3, [r7, #12]
   808d4:	3301      	adds	r3, #1
   808d6:	60fb      	str	r3, [r7, #12]
   808d8:	68fb      	ldr	r3, [r7, #12]
   808da:	f242 720f 	movw	r2, #9999	; 0x270f
   808de:	4293      	cmp	r3, r2
   808e0:	ddf7      	ble.n	808d2 <dd_APT_REG_INIT+0x1a>
		 {
	;
		 }
		 		 
		 command_data_array[0] = ADS1120_WREG_COMMAND | ADS1120_WREG_START_REG_ADR(0) | ADS1120_WREG_NO_OF_BYTES(3) ; //0x43;
   808e2:	4b15      	ldr	r3, [pc, #84]	; (80938 <dd_APT_REG_INIT+0x80>)
   808e4:	2243      	movs	r2, #67	; 0x43
   808e6:	801a      	strh	r2, [r3, #0]
		 command_data_array[1] = ADS1120_CONFIG_REG0_MUX(ADS1120_MUX_AIN1_AIN2) |  ADS1120_CONFIG_REG0_GAIN(ADS1120_DEVICE_GAIN_32) ;    //3E                                      //0b00110001;
   808e8:	4b13      	ldr	r3, [pc, #76]	; (80938 <dd_APT_REG_INIT+0x80>)
   808ea:	223a      	movs	r2, #58	; 0x3a
   808ec:	805a      	strh	r2, [r3, #2]
		 command_data_array[2] = 0x04;      //ADS1120_CONFIG_REG1_CM | ADS1120_CONFIG_REG1_MODE(ADS1120_MODE_MORMAL) | ADS1120_CONFIG_REG1_DR(ADS1120_DR_20_SPS);//0b00000100; 04
   808ee:	4b12      	ldr	r3, [pc, #72]	; (80938 <dd_APT_REG_INIT+0x80>)
   808f0:	2204      	movs	r2, #4
   808f2:	809a      	strh	r2, [r3, #4]
		 command_data_array[3] = 0x98;                  //ADS1120_CONFIG_REG2_IDAC(ADS1120_IDAC_OFF) | ADS1120_CONFIG_REG2_50_60(ADS1120_FIR_50_60_REJECTION) | ADS1120_CONFIG_REG2_VREF(ADS1120_EXTERNAL_REF_REFP1_REFN1); //0b10011000   98;
   808f4:	4b10      	ldr	r3, [pc, #64]	; (80938 <dd_APT_REG_INIT+0x80>)
   808f6:	2298      	movs	r2, #152	; 0x98
   808f8:	80da      	strh	r2, [r3, #6]
		 command_data_array[4] = 0;                       //0b00000000;
   808fa:	4b0f      	ldr	r3, [pc, #60]	; (80938 <dd_APT_REG_INIT+0x80>)
   808fc:	2200      	movs	r2, #0
   808fe:	811a      	strh	r2, [r3, #8]
		 // 							  dd_spi_set_peripheral_chip_select_value(PS1_CS_N_ID);
		 // 					 	  dd_spi_master_transfer(&command_data_array, sizeof(command_data_array), PS1_CS_N_ID);
		 dd_spi_master_transfer(&command_data_array, 5);
   80900:	2105      	movs	r1, #5
   80902:	480d      	ldr	r0, [pc, #52]	; (80938 <dd_APT_REG_INIT+0x80>)
   80904:	4b0d      	ldr	r3, [pc, #52]	; (8093c <dd_APT_REG_INIT+0x84>)
   80906:	4798      	blx	r3
		 
		 
										  
										  
						
		  command_data_array[0] = ADS1120_START_OR_SYNC;
   80908:	4b0b      	ldr	r3, [pc, #44]	; (80938 <dd_APT_REG_INIT+0x80>)
   8090a:	2208      	movs	r2, #8
   8090c:	801a      	strh	r2, [r3, #0]
		dd_spi_master_transfer(&command_data_array, 1);
   8090e:	2101      	movs	r1, #1
   80910:	4809      	ldr	r0, [pc, #36]	; (80938 <dd_APT_REG_INIT+0x80>)
   80912:	4b0a      	ldr	r3, [pc, #40]	; (8093c <dd_APT_REG_INIT+0x84>)
   80914:	4798      	blx	r3
  
		 
		   for (int i=0;i<10000;i++)
   80916:	2300      	movs	r3, #0
   80918:	60bb      	str	r3, [r7, #8]
   8091a:	e002      	b.n	80922 <dd_APT_REG_INIT+0x6a>
   8091c:	68bb      	ldr	r3, [r7, #8]
   8091e:	3301      	adds	r3, #1
   80920:	60bb      	str	r3, [r7, #8]
   80922:	68bb      	ldr	r3, [r7, #8]
   80924:	f242 720f 	movw	r2, #9999	; 0x270f
   80928:	4293      	cmp	r3, r2
   8092a:	ddf7      	ble.n	8091c <dd_APT_REG_INIT+0x64>
		   {
			   ;
		   }   
		   int i = 0;
   8092c:	2300      	movs	r3, #0
   8092e:	607b      	str	r3, [r7, #4]
 }
   80930:	bf00      	nop
   80932:	3710      	adds	r7, #16
   80934:	46bd      	mov	sp, r7
   80936:	bd80      	pop	{r7, pc}
   80938:	20070e64 	.word	0x20070e64
   8093c:	00080b79 	.word	0x00080b79

00080940 <dd_VPT_REG_INIT>:
		   
		   
		   void dd_VPT_REG_INIT()
		   {
   80940:	b580      	push	{r7, lr}
   80942:	b084      	sub	sp, #16
   80944:	af00      	add	r7, sp, #0
			   command_data_array[0] = ADS1120_RESET;
   80946:	4b1e      	ldr	r3, [pc, #120]	; (809c0 <dd_VPT_REG_INIT+0x80>)
   80948:	2206      	movs	r2, #6
   8094a:	801a      	strh	r2, [r3, #0]
			   dd_spi_master_transfer(&command_data_array, 1);
   8094c:	2101      	movs	r1, #1
   8094e:	481c      	ldr	r0, [pc, #112]	; (809c0 <dd_VPT_REG_INIT+0x80>)
   80950:	4b1c      	ldr	r3, [pc, #112]	; (809c4 <dd_VPT_REG_INIT+0x84>)
   80952:	4798      	blx	r3
			   
			   
			   for (int i=0;i<10000;i++)
   80954:	2300      	movs	r3, #0
   80956:	60fb      	str	r3, [r7, #12]
   80958:	e002      	b.n	80960 <dd_VPT_REG_INIT+0x20>
   8095a:	68fb      	ldr	r3, [r7, #12]
   8095c:	3301      	adds	r3, #1
   8095e:	60fb      	str	r3, [r7, #12]
   80960:	68fb      	ldr	r3, [r7, #12]
   80962:	f242 720f 	movw	r2, #9999	; 0x270f
   80966:	4293      	cmp	r3, r2
   80968:	ddf7      	ble.n	8095a <dd_VPT_REG_INIT+0x1a>
			   {
				   ;
			   }
			   			   
			   command_data_array[0] = ADS1120_WREG_COMMAND | ADS1120_WREG_START_REG_ADR(0) | ADS1120_WREG_NO_OF_BYTES(3) ; //0x43;
   8096a:	4b15      	ldr	r3, [pc, #84]	; (809c0 <dd_VPT_REG_INIT+0x80>)
   8096c:	2243      	movs	r2, #67	; 0x43
   8096e:	801a      	strh	r2, [r3, #0]
			   command_data_array[1] = ADS1120_CONFIG_REG0_MUX(ADS1120_MUX_AIN1_AIN2) |  ADS1120_CONFIG_REG0_GAIN(ADS1120_DEVICE_GAIN_32) ;    //3E                                      //0b00110001;
   80970:	4b13      	ldr	r3, [pc, #76]	; (809c0 <dd_VPT_REG_INIT+0x80>)
   80972:	223a      	movs	r2, #58	; 0x3a
   80974:	805a      	strh	r2, [r3, #2]
			   command_data_array[2] = 0x04;      //ADS1120_CONFIG_REG1_CM | ADS1120_CONFIG_REG1_MODE(ADS1120_MODE_MORMAL) | ADS1120_CONFIG_REG1_DR(ADS1120_DR_20_SPS);//0b00000100; 04
   80976:	4b12      	ldr	r3, [pc, #72]	; (809c0 <dd_VPT_REG_INIT+0x80>)
   80978:	2204      	movs	r2, #4
   8097a:	809a      	strh	r2, [r3, #4]
			   command_data_array[3] = 0x98;                  //ADS1120_CONFIG_REG2_IDAC(ADS1120_IDAC_OFF) | ADS1120_CONFIG_REG2_50_60(ADS1120_FIR_50_60_REJECTION) | ADS1120_CONFIG_REG2_VREF(ADS1120_EXTERNAL_REF_REFP1_REFN1); //0b10011000   98;
   8097c:	4b10      	ldr	r3, [pc, #64]	; (809c0 <dd_VPT_REG_INIT+0x80>)
   8097e:	2298      	movs	r2, #152	; 0x98
   80980:	80da      	strh	r2, [r3, #6]
			   command_data_array[4] = 0;                       //0b00000000;
   80982:	4b0f      	ldr	r3, [pc, #60]	; (809c0 <dd_VPT_REG_INIT+0x80>)
   80984:	2200      	movs	r2, #0
   80986:	811a      	strh	r2, [r3, #8]
			   // 							  dd_spi_set_peripheral_chip_select_value(PS1_CS_N_ID);
			   // 					 	  dd_spi_master_transfer(&command_data_array, sizeof(command_data_array), PS1_CS_N_ID);
			   dd_spi_master_transfer(&command_data_array, 5);
   80988:	2105      	movs	r1, #5
   8098a:	480d      	ldr	r0, [pc, #52]	; (809c0 <dd_VPT_REG_INIT+0x80>)
   8098c:	4b0d      	ldr	r3, [pc, #52]	; (809c4 <dd_VPT_REG_INIT+0x84>)
   8098e:	4798      	blx	r3
			   
			   
			   command_data_array[0] = ADS1120_START_OR_SYNC;
   80990:	4b0b      	ldr	r3, [pc, #44]	; (809c0 <dd_VPT_REG_INIT+0x80>)
   80992:	2208      	movs	r2, #8
   80994:	801a      	strh	r2, [r3, #0]
			   dd_spi_master_transfer(&command_data_array, 1);
   80996:	2101      	movs	r1, #1
   80998:	4809      	ldr	r0, [pc, #36]	; (809c0 <dd_VPT_REG_INIT+0x80>)
   8099a:	4b0a      	ldr	r3, [pc, #40]	; (809c4 <dd_VPT_REG_INIT+0x84>)
   8099c:	4798      	blx	r3
			   
			   
			   for (int i=0;i<10000;i++)
   8099e:	2300      	movs	r3, #0
   809a0:	60bb      	str	r3, [r7, #8]
   809a2:	e002      	b.n	809aa <dd_VPT_REG_INIT+0x6a>
   809a4:	68bb      	ldr	r3, [r7, #8]
   809a6:	3301      	adds	r3, #1
   809a8:	60bb      	str	r3, [r7, #8]
   809aa:	68bb      	ldr	r3, [r7, #8]
   809ac:	f242 720f 	movw	r2, #9999	; 0x270f
   809b0:	4293      	cmp	r3, r2
   809b2:	ddf7      	ble.n	809a4 <dd_VPT_REG_INIT+0x64>
			   {
				   ;
			   }
			   int i = 0;
   809b4:	2300      	movs	r3, #0
   809b6:	607b      	str	r3, [r7, #4]
   809b8:	bf00      	nop
   809ba:	3710      	adds	r7, #16
   809bc:	46bd      	mov	sp, r7
   809be:	bd80      	pop	{r7, pc}
   809c0:	20070e64 	.word	0x20070e64
   809c4:	00080b79 	.word	0x00080b79

000809c8 <dd_spi_set_transfer_delay>:
void dd_spi_set_delay_between_chip_select(uint32_t ul_delay) {
	SPI0->SPI_MR &= (~SPI_MR_DLYBCS_Msk);
	SPI0->SPI_MR |= SPI_MR_DLYBCS(ul_delay);
}

void dd_spi_set_transfer_delay(uint16_t ul_pcs_group_id, uint8_t uc_dlybs, uint8_t uc_dlybct)  {
   809c8:	b490      	push	{r4, r7}
   809ca:	b082      	sub	sp, #8
   809cc:	af00      	add	r7, sp, #0
   809ce:	4603      	mov	r3, r0
   809d0:	80fb      	strh	r3, [r7, #6]
   809d2:	460b      	mov	r3, r1
   809d4:	717b      	strb	r3, [r7, #5]
   809d6:	4613      	mov	r3, r2
   809d8:	713b      	strb	r3, [r7, #4]
	SPI0->SPI_CSR[ul_pcs_group_id] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
   809da:	4911      	ldr	r1, [pc, #68]	; (80a20 <dd_spi_set_transfer_delay+0x58>)
   809dc:	88fb      	ldrh	r3, [r7, #6]
   809de:	4810      	ldr	r0, [pc, #64]	; (80a20 <dd_spi_set_transfer_delay+0x58>)
   809e0:	88fa      	ldrh	r2, [r7, #6]
   809e2:	320c      	adds	r2, #12
   809e4:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   809e8:	b292      	uxth	r2, r2
   809ea:	330c      	adds	r3, #12
   809ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	SPI0->SPI_CSR[ul_pcs_group_id] |= SPI_CSR_DLYBS(uc_dlybs) | SPI_CSR_DLYBCT(uc_dlybct);
   809f0:	4c0b      	ldr	r4, [pc, #44]	; (80a20 <dd_spi_set_transfer_delay+0x58>)
   809f2:	88fb      	ldrh	r3, [r7, #6]
   809f4:	490a      	ldr	r1, [pc, #40]	; (80a20 <dd_spi_set_transfer_delay+0x58>)
   809f6:	88fa      	ldrh	r2, [r7, #6]
   809f8:	320c      	adds	r2, #12
   809fa:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   809fe:	797a      	ldrb	r2, [r7, #5]
   80a00:	0412      	lsls	r2, r2, #16
   80a02:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
   80a06:	7938      	ldrb	r0, [r7, #4]
   80a08:	0600      	lsls	r0, r0, #24
   80a0a:	4302      	orrs	r2, r0
   80a0c:	430a      	orrs	r2, r1
   80a0e:	330c      	adds	r3, #12
   80a10:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
}
   80a14:	bf00      	nop
   80a16:	3708      	adds	r7, #8
   80a18:	46bd      	mov	sp, r7
   80a1a:	bc90      	pop	{r4, r7}
   80a1c:	4770      	bx	lr
   80a1e:	bf00      	nop
   80a20:	40008000 	.word	0x40008000

00080a24 <dd_spi_set_bits_per_transfer>:

void dd_spi_set_bits_per_transfer(uint16_t ul_pcs_group_id, uint32_t ul_bits)
{
   80a24:	b480      	push	{r7}
   80a26:	b083      	sub	sp, #12
   80a28:	af00      	add	r7, sp, #0
   80a2a:	4603      	mov	r3, r0
   80a2c:	6039      	str	r1, [r7, #0]
   80a2e:	80fb      	strh	r3, [r7, #6]
	SPI0->SPI_CSR[ul_pcs_group_id] &= (~SPI_CSR_BITS_Msk);
   80a30:	490e      	ldr	r1, [pc, #56]	; (80a6c <dd_spi_set_bits_per_transfer+0x48>)
   80a32:	88fb      	ldrh	r3, [r7, #6]
   80a34:	480d      	ldr	r0, [pc, #52]	; (80a6c <dd_spi_set_bits_per_transfer+0x48>)
   80a36:	88fa      	ldrh	r2, [r7, #6]
   80a38:	320c      	adds	r2, #12
   80a3a:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   80a3e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
   80a42:	330c      	adds	r3, #12
   80a44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	SPI0->SPI_CSR[ul_pcs_group_id] |= ul_bits;
   80a48:	4808      	ldr	r0, [pc, #32]	; (80a6c <dd_spi_set_bits_per_transfer+0x48>)
   80a4a:	88fb      	ldrh	r3, [r7, #6]
   80a4c:	4907      	ldr	r1, [pc, #28]	; (80a6c <dd_spi_set_bits_per_transfer+0x48>)
   80a4e:	88fa      	ldrh	r2, [r7, #6]
   80a50:	320c      	adds	r2, #12
   80a52:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   80a56:	683a      	ldr	r2, [r7, #0]
   80a58:	430a      	orrs	r2, r1
   80a5a:	330c      	adds	r3, #12
   80a5c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
   80a60:	bf00      	nop
   80a62:	370c      	adds	r7, #12
   80a64:	46bd      	mov	sp, r7
   80a66:	bc80      	pop	{r7}
   80a68:	4770      	bx	lr
   80a6a:	bf00      	nop
   80a6c:	40008000 	.word	0x40008000

00080a70 <dd_spi_set_clock_polarity>:
		SPI0->SPI_WPMR =  (0x5350490u << 1);
	}
	
}

void dd_spi_set_clock_polarity(uint16_t ul_pcs_group_id, uint32_t ul_polarity)   {
   80a70:	b480      	push	{r7}
   80a72:	b083      	sub	sp, #12
   80a74:	af00      	add	r7, sp, #0
   80a76:	4603      	mov	r3, r0
   80a78:	6039      	str	r1, [r7, #0]
   80a7a:	80fb      	strh	r3, [r7, #6]
	
	if (ul_polarity) {
   80a7c:	683b      	ldr	r3, [r7, #0]
   80a7e:	2b00      	cmp	r3, #0
   80a80:	d00c      	beq.n	80a9c <dd_spi_set_clock_polarity+0x2c>
		SPI0->SPI_CSR[ul_pcs_group_id] |= SPI_CSR_CPOL;
   80a82:	490f      	ldr	r1, [pc, #60]	; (80ac0 <dd_spi_set_clock_polarity+0x50>)
   80a84:	88fb      	ldrh	r3, [r7, #6]
   80a86:	480e      	ldr	r0, [pc, #56]	; (80ac0 <dd_spi_set_clock_polarity+0x50>)
   80a88:	88fa      	ldrh	r2, [r7, #6]
   80a8a:	320c      	adds	r2, #12
   80a8c:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   80a90:	f042 0201 	orr.w	r2, r2, #1
   80a94:	330c      	adds	r3, #12
   80a96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		} else {
		SPI0->SPI_CSR[ul_pcs_group_id] &= (~SPI_CSR_CPOL);
	}	
}
   80a9a:	e00b      	b.n	80ab4 <dd_spi_set_clock_polarity+0x44>
void dd_spi_set_clock_polarity(uint16_t ul_pcs_group_id, uint32_t ul_polarity)   {
	
	if (ul_polarity) {
		SPI0->SPI_CSR[ul_pcs_group_id] |= SPI_CSR_CPOL;
		} else {
		SPI0->SPI_CSR[ul_pcs_group_id] &= (~SPI_CSR_CPOL);
   80a9c:	4908      	ldr	r1, [pc, #32]	; (80ac0 <dd_spi_set_clock_polarity+0x50>)
   80a9e:	88fb      	ldrh	r3, [r7, #6]
   80aa0:	4807      	ldr	r0, [pc, #28]	; (80ac0 <dd_spi_set_clock_polarity+0x50>)
   80aa2:	88fa      	ldrh	r2, [r7, #6]
   80aa4:	320c      	adds	r2, #12
   80aa6:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   80aaa:	f022 0201 	bic.w	r2, r2, #1
   80aae:	330c      	adds	r3, #12
   80ab0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}	
}
   80ab4:	bf00      	nop
   80ab6:	370c      	adds	r7, #12
   80ab8:	46bd      	mov	sp, r7
   80aba:	bc80      	pop	{r7}
   80abc:	4770      	bx	lr
   80abe:	bf00      	nop
   80ac0:	40008000 	.word	0x40008000

00080ac4 <dd_spi_set_clock_phase>:

void dd_spi_set_clock_phase(uint16_t ul_pcs_group_id, uint32_t ul_phase)
{
   80ac4:	b480      	push	{r7}
   80ac6:	b083      	sub	sp, #12
   80ac8:	af00      	add	r7, sp, #0
   80aca:	4603      	mov	r3, r0
   80acc:	6039      	str	r1, [r7, #0]
   80ace:	80fb      	strh	r3, [r7, #6]
	if (ul_phase) {
   80ad0:	683b      	ldr	r3, [r7, #0]
   80ad2:	2b00      	cmp	r3, #0
   80ad4:	d00c      	beq.n	80af0 <dd_spi_set_clock_phase+0x2c>
		SPI0->SPI_CSR[ul_pcs_group_id] |= SPI_CSR_NCPHA;
   80ad6:	490f      	ldr	r1, [pc, #60]	; (80b14 <dd_spi_set_clock_phase+0x50>)
   80ad8:	88fb      	ldrh	r3, [r7, #6]
   80ada:	480e      	ldr	r0, [pc, #56]	; (80b14 <dd_spi_set_clock_phase+0x50>)
   80adc:	88fa      	ldrh	r2, [r7, #6]
   80ade:	320c      	adds	r2, #12
   80ae0:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   80ae4:	f042 0202 	orr.w	r2, r2, #2
   80ae8:	330c      	adds	r3, #12
   80aea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		} else {
		SPI0->SPI_CSR[ul_pcs_group_id] &= (~SPI_CSR_NCPHA);
	}
}
   80aee:	e00b      	b.n	80b08 <dd_spi_set_clock_phase+0x44>
void dd_spi_set_clock_phase(uint16_t ul_pcs_group_id, uint32_t ul_phase)
{
	if (ul_phase) {
		SPI0->SPI_CSR[ul_pcs_group_id] |= SPI_CSR_NCPHA;
		} else {
		SPI0->SPI_CSR[ul_pcs_group_id] &= (~SPI_CSR_NCPHA);
   80af0:	4908      	ldr	r1, [pc, #32]	; (80b14 <dd_spi_set_clock_phase+0x50>)
   80af2:	88fb      	ldrh	r3, [r7, #6]
   80af4:	4807      	ldr	r0, [pc, #28]	; (80b14 <dd_spi_set_clock_phase+0x50>)
   80af6:	88fa      	ldrh	r2, [r7, #6]
   80af8:	320c      	adds	r2, #12
   80afa:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   80afe:	f022 0202 	bic.w	r2, r2, #2
   80b02:	330c      	adds	r3, #12
   80b04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}
}
   80b08:	bf00      	nop
   80b0a:	370c      	adds	r7, #12
   80b0c:	46bd      	mov	sp, r7
   80b0e:	bc80      	pop	{r7}
   80b10:	4770      	bx	lr
   80b12:	bf00      	nop
   80b14:	40008000 	.word	0x40008000

00080b18 <dd_spi_set_baudrate_div>:

int16_t dd_spi_set_baudrate_div(uint16_t ul_pcs_group_id,uint8_t uc_baudrate_divider)
{
   80b18:	b480      	push	{r7}
   80b1a:	b083      	sub	sp, #12
   80b1c:	af00      	add	r7, sp, #0
   80b1e:	4603      	mov	r3, r0
   80b20:	460a      	mov	r2, r1
   80b22:	80fb      	strh	r3, [r7, #6]
   80b24:	4613      	mov	r3, r2
   80b26:	717b      	strb	r3, [r7, #5]
	/* Programming the SCBR field to 0 is forbidden */
	if (!uc_baudrate_divider)
   80b28:	797b      	ldrb	r3, [r7, #5]
   80b2a:	2b00      	cmp	r3, #0
   80b2c:	d102      	bne.n	80b34 <dd_spi_set_baudrate_div+0x1c>
	return -1;
   80b2e:	f04f 33ff 	mov.w	r3, #4294967295
   80b32:	e01a      	b.n	80b6a <dd_spi_set_baudrate_div+0x52>

	SPI0->SPI_CSR[ul_pcs_group_id] &= (~SPI_CSR_SCBR_Msk);
   80b34:	490f      	ldr	r1, [pc, #60]	; (80b74 <dd_spi_set_baudrate_div+0x5c>)
   80b36:	88fb      	ldrh	r3, [r7, #6]
   80b38:	480e      	ldr	r0, [pc, #56]	; (80b74 <dd_spi_set_baudrate_div+0x5c>)
   80b3a:	88fa      	ldrh	r2, [r7, #6]
   80b3c:	320c      	adds	r2, #12
   80b3e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
   80b42:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
   80b46:	330c      	adds	r3, #12
   80b48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	SPI0->SPI_CSR[ul_pcs_group_id] |= SPI_CSR_SCBR(uc_baudrate_divider);
   80b4c:	4809      	ldr	r0, [pc, #36]	; (80b74 <dd_spi_set_baudrate_div+0x5c>)
   80b4e:	88fb      	ldrh	r3, [r7, #6]
   80b50:	4908      	ldr	r1, [pc, #32]	; (80b74 <dd_spi_set_baudrate_div+0x5c>)
   80b52:	88fa      	ldrh	r2, [r7, #6]
   80b54:	320c      	adds	r2, #12
   80b56:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   80b5a:	797a      	ldrb	r2, [r7, #5]
   80b5c:	0212      	lsls	r2, r2, #8
   80b5e:	b292      	uxth	r2, r2
   80b60:	430a      	orrs	r2, r1
   80b62:	330c      	adds	r3, #12
   80b64:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	return 0;
   80b68:	2300      	movs	r3, #0
}
   80b6a:	4618      	mov	r0, r3
   80b6c:	370c      	adds	r7, #12
   80b6e:	46bd      	mov	sp, r7
   80b70:	bc80      	pop	{r7}
   80b72:	4770      	bx	lr
   80b74:	40008000 	.word	0x40008000

00080b78 <dd_spi_master_transfer>:
{
	SPI0->SPI_MR &= (~SPI_MR_PCS_Msk);
	SPI0->SPI_MR |= ((SPI_MR_PCS_Msk & ((pcs_ul_value) << SPI_MR_PCS_Pos)));
}

void dd_spi_master_transfer(void *p_buf, uint32_t size)  {
   80b78:	b580      	push	{r7, lr}
   80b7a:	b086      	sub	sp, #24
   80b7c:	af00      	add	r7, sp, #0
   80b7e:	6078      	str	r0, [r7, #4]
   80b80:	6039      	str	r1, [r7, #0]
	uint32_t i;
	uint8_t uc_pcs;
	static uint8_t data;
	uint32_t timeout = SPI_TIMEOUT;
   80b82:	f643 2398 	movw	r3, #15000	; 0x3a98
   80b86:	613b      	str	r3, [r7, #16]

	uint16_t *p_buffer;

	p_buffer = p_buf;
   80b88:	687b      	ldr	r3, [r7, #4]
   80b8a:	60fb      	str	r3, [r7, #12]

	for (i = 0; i < size; i++) {
   80b8c:	2300      	movs	r3, #0
   80b8e:	617b      	str	r3, [r7, #20]
   80b90:	e022      	b.n	80bd8 <dd_spi_master_transfer+0x60>
		dd_spi_write(p_buffer[i]);
   80b92:	697b      	ldr	r3, [r7, #20]
   80b94:	005b      	lsls	r3, r3, #1
   80b96:	68fa      	ldr	r2, [r7, #12]
   80b98:	4413      	add	r3, r2
   80b9a:	881b      	ldrh	r3, [r3, #0]
   80b9c:	b2db      	uxtb	r3, r3
   80b9e:	4618      	mov	r0, r3
   80ba0:	4b12      	ldr	r3, [pc, #72]	; (80bec <dd_spi_master_transfer+0x74>)
   80ba2:	4798      	blx	r3
		/* Wait transfer done. */
		while  ( ((SPI0->SPI_SR) & SPI_SR_RDRF) == 0)
   80ba4:	e004      	b.n	80bb0 <dd_spi_master_transfer+0x38>
			 {
				if (!timeout--) {
   80ba6:	693b      	ldr	r3, [r7, #16]
   80ba8:	1e5a      	subs	r2, r3, #1
   80baa:	613a      	str	r2, [r7, #16]
   80bac:	2b00      	cmp	r3, #0
   80bae:	d018      	beq.n	80be2 <dd_spi_master_transfer+0x6a>
	p_buffer = p_buf;

	for (i = 0; i < size; i++) {
		dd_spi_write(p_buffer[i]);
		/* Wait transfer done. */
		while  ( ((SPI0->SPI_SR) & SPI_SR_RDRF) == 0)
   80bb0:	4b0f      	ldr	r3, [pc, #60]	; (80bf0 <dd_spi_master_transfer+0x78>)
   80bb2:	691b      	ldr	r3, [r3, #16]
   80bb4:	f003 0301 	and.w	r3, r3, #1
   80bb8:	2b00      	cmp	r3, #0
   80bba:	d0f4      	beq.n	80ba6 <dd_spi_master_transfer+0x2e>
			 {
				if (!timeout--) {
					return SPI_ERROR_TIMEOUT;
				}
			 }
		dd_spi_read(&data);
   80bbc:	480d      	ldr	r0, [pc, #52]	; (80bf4 <dd_spi_master_transfer+0x7c>)
   80bbe:	4b0e      	ldr	r3, [pc, #56]	; (80bf8 <dd_spi_master_transfer+0x80>)
   80bc0:	4798      	blx	r3
		p_buffer[i] = data;
   80bc2:	697b      	ldr	r3, [r7, #20]
   80bc4:	005b      	lsls	r3, r3, #1
   80bc6:	68fa      	ldr	r2, [r7, #12]
   80bc8:	4413      	add	r3, r2
   80bca:	4a0a      	ldr	r2, [pc, #40]	; (80bf4 <dd_spi_master_transfer+0x7c>)
   80bcc:	7812      	ldrb	r2, [r2, #0]
   80bce:	b292      	uxth	r2, r2
   80bd0:	801a      	strh	r2, [r3, #0]

	uint16_t *p_buffer;

	p_buffer = p_buf;

	for (i = 0; i < size; i++) {
   80bd2:	697b      	ldr	r3, [r7, #20]
   80bd4:	3301      	adds	r3, #1
   80bd6:	617b      	str	r3, [r7, #20]
   80bd8:	697a      	ldr	r2, [r7, #20]
   80bda:	683b      	ldr	r3, [r7, #0]
   80bdc:	429a      	cmp	r2, r3
   80bde:	d3d8      	bcc.n	80b92 <dd_spi_master_transfer+0x1a>
   80be0:	e000      	b.n	80be4 <dd_spi_master_transfer+0x6c>
		dd_spi_write(p_buffer[i]);
		/* Wait transfer done. */
		while  ( ((SPI0->SPI_SR) & SPI_SR_RDRF) == 0)
			 {
				if (!timeout--) {
					return SPI_ERROR_TIMEOUT;
   80be2:	bf00      	nop
				}
			 }
		dd_spi_read(&data);
		p_buffer[i] = data;
	}
}
   80be4:	3718      	adds	r7, #24
   80be6:	46bd      	mov	sp, r7
   80be8:	bd80      	pop	{r7, pc}
   80bea:	bf00      	nop
   80bec:	00080c59 	.word	0x00080c59
   80bf0:	40008000 	.word	0x40008000
   80bf4:	20070945 	.word	0x20070945
   80bf8:	00080bfd 	.word	0x00080bfd

00080bfc <dd_spi_read>:

spi_status_t dd_spi_read(uint8_t *us_data) {
   80bfc:	b480      	push	{r7}
   80bfe:	b085      	sub	sp, #20
   80c00:	af00      	add	r7, sp, #0
   80c02:	6078      	str	r0, [r7, #4]
	uint32_t timeout = SPI_TIMEOUT;
   80c04:	f643 2398 	movw	r3, #15000	; 0x3a98
   80c08:	60fb      	str	r3, [r7, #12]
	static uint32_t reg_value;

	while (!(SPI0->SPI_SR & SPI_SR_RDRF)) {
   80c0a:	e006      	b.n	80c1a <dd_spi_read+0x1e>
		if (!timeout--) {
   80c0c:	68fb      	ldr	r3, [r7, #12]
   80c0e:	1e5a      	subs	r2, r3, #1
   80c10:	60fa      	str	r2, [r7, #12]
   80c12:	2b00      	cmp	r3, #0
   80c14:	d101      	bne.n	80c1a <dd_spi_read+0x1e>
			return SPI_ERROR_TIMEOUT;
   80c16:	2301      	movs	r3, #1
   80c18:	e015      	b.n	80c46 <dd_spi_read+0x4a>

spi_status_t dd_spi_read(uint8_t *us_data) {
	uint32_t timeout = SPI_TIMEOUT;
	static uint32_t reg_value;

	while (!(SPI0->SPI_SR & SPI_SR_RDRF)) {
   80c1a:	4b0d      	ldr	r3, [pc, #52]	; (80c50 <dd_spi_read+0x54>)
   80c1c:	691b      	ldr	r3, [r3, #16]
   80c1e:	f003 0301 	and.w	r3, r3, #1
   80c22:	2b00      	cmp	r3, #0
   80c24:	d0f2      	beq.n	80c0c <dd_spi_read+0x10>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

if(SPI0->SPI_SR & SPI_SR_RDRF)
   80c26:	4b0a      	ldr	r3, [pc, #40]	; (80c50 <dd_spi_read+0x54>)
   80c28:	691b      	ldr	r3, [r3, #16]
   80c2a:	f003 0301 	and.w	r3, r3, #1
   80c2e:	2b00      	cmp	r3, #0
   80c30:	d003      	beq.n	80c3a <dd_spi_read+0x3e>
{
	reg_value = SPI0->SPI_RDR;
   80c32:	4b07      	ldr	r3, [pc, #28]	; (80c50 <dd_spi_read+0x54>)
   80c34:	689b      	ldr	r3, [r3, #8]
   80c36:	4a07      	ldr	r2, [pc, #28]	; (80c54 <dd_spi_read+0x58>)
   80c38:	6013      	str	r3, [r2, #0]
}

	*us_data =  (reg_value & SPI_RDR_RD_Msk);   	
   80c3a:	4b06      	ldr	r3, [pc, #24]	; (80c54 <dd_spi_read+0x58>)
   80c3c:	681b      	ldr	r3, [r3, #0]
   80c3e:	b2da      	uxtb	r2, r3
   80c40:	687b      	ldr	r3, [r7, #4]
   80c42:	701a      	strb	r2, [r3, #0]
	return SPI_OK;
   80c44:	2300      	movs	r3, #0
}
   80c46:	4618      	mov	r0, r3
   80c48:	3714      	adds	r7, #20
   80c4a:	46bd      	mov	sp, r7
   80c4c:	bc80      	pop	{r7}
   80c4e:	4770      	bx	lr
   80c50:	40008000 	.word	0x40008000
   80c54:	20070948 	.word	0x20070948

00080c58 <dd_spi_write>:

spi_status_t dd_spi_write(uint8_t us_data)  {																																																																																																																																																																																																																																																																																																																																						
   80c58:	b480      	push	{r7}
   80c5a:	b085      	sub	sp, #20
   80c5c:	af00      	add	r7, sp, #0
   80c5e:	4603      	mov	r3, r0
   80c60:	71fb      	strb	r3, [r7, #7]
	uint32_t timeout = SPI_TIMEOUT;
   80c62:	f643 2398 	movw	r3, #15000	; 0x3a98
   80c66:	60fb      	str	r3, [r7, #12]
	uint32_t value;

	while (!(SPI0->SPI_SR & SPI_SR_TDRE)) {
   80c68:	e006      	b.n	80c78 <dd_spi_write+0x20>
		if (!timeout--) {
   80c6a:	68fb      	ldr	r3, [r7, #12]
   80c6c:	1e5a      	subs	r2, r3, #1
   80c6e:	60fa      	str	r2, [r7, #12]
   80c70:	2b00      	cmp	r3, #0
   80c72:	d101      	bne.n	80c78 <dd_spi_write+0x20>
			return SPI_ERROR_TIMEOUT;
   80c74:	2301      	movs	r3, #1
   80c76:	e00b      	b.n	80c90 <dd_spi_write+0x38>

spi_status_t dd_spi_write(uint8_t us_data)  {																																																																																																																																																																																																																																																																																																																																						
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(SPI0->SPI_SR & SPI_SR_TDRE)) {
   80c78:	4b08      	ldr	r3, [pc, #32]	; (80c9c <dd_spi_write+0x44>)
   80c7a:	691b      	ldr	r3, [r3, #16]
   80c7c:	f003 0302 	and.w	r3, r3, #2
   80c80:	2b00      	cmp	r3, #0
   80c82:	d0f2      	beq.n	80c6a <dd_spi_write+0x12>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}
	value = SPI_TDR_TD(us_data);
   80c84:	79fb      	ldrb	r3, [r7, #7]
   80c86:	60bb      	str	r3, [r7, #8]
	SPI0->SPI_TDR = value;
   80c88:	4a04      	ldr	r2, [pc, #16]	; (80c9c <dd_spi_write+0x44>)
   80c8a:	68bb      	ldr	r3, [r7, #8]
   80c8c:	60d3      	str	r3, [r2, #12]

	return SPI_OK;
   80c8e:	2300      	movs	r3, #0
}
   80c90:	4618      	mov	r0, r3
   80c92:	3714      	adds	r7, #20
   80c94:	46bd      	mov	sp, r7
   80c96:	bc80      	pop	{r7}
   80c98:	4770      	bx	lr
   80c9a:	bf00      	nop
   80c9c:	40008000 	.word	0x40008000

00080ca0 <dd_spi_master_read>:

 void dd_spi_master_read(void *p_buf, uint32_t size)
{
   80ca0:	b580      	push	{r7, lr}
   80ca2:	b086      	sub	sp, #24
   80ca4:	af00      	add	r7, sp, #0
   80ca6:	6078      	str	r0, [r7, #4]
   80ca8:	6039      	str	r1, [r7, #0]
	uint32_t i;
	uint8_t uc_pcs;
	static uint8_t data;
	uint32_t timeout = SPI_TIMEOUT;
   80caa:	f643 2398 	movw	r3, #15000	; 0x3a98
   80cae:	613b      	str	r3, [r7, #16]

	volatile uint8_t *p_buffer;
	
// 	uint8_t   dummy[4];
// 
	p_buffer = p_buf;
   80cb0:	687b      	ldr	r3, [r7, #4]
   80cb2:	60fb      	str	r3, [r7, #12]
//  	dd_spi_read(&data);
// 	
// 	dd_spi_write(p_buffer[0]);
// 	dd_spi_read(&data);
	
	for (i = 0; i < size ; i++) {
   80cb4:	2300      	movs	r3, #0
   80cb6:	617b      	str	r3, [r7, #20]
   80cb8:	e01f      	b.n	80cfa <dd_spi_master_read+0x5a>
		dd_spi_write(p_buffer[i]);
   80cba:	68fa      	ldr	r2, [r7, #12]
   80cbc:	697b      	ldr	r3, [r7, #20]
   80cbe:	4413      	add	r3, r2
   80cc0:	781b      	ldrb	r3, [r3, #0]
   80cc2:	b2db      	uxtb	r3, r3
   80cc4:	4618      	mov	r0, r3
   80cc6:	4b11      	ldr	r3, [pc, #68]	; (80d0c <dd_spi_master_read+0x6c>)
   80cc8:	4798      	blx	r3
		/*dd_spi_write(p_buffer[1]);*/
	//	while(((SPI0->SPI_SR) & SPI_SR_RDRF) == 0);
	//	dd_spi_read(&data);	
		
		while(((SPI0->SPI_SR) & SPI_SR_RDRF) == 0)
   80cca:	e004      	b.n	80cd6 <dd_spi_master_read+0x36>
			 {
				if (!timeout--) {
   80ccc:	693b      	ldr	r3, [r7, #16]
   80cce:	1e5a      	subs	r2, r3, #1
   80cd0:	613a      	str	r2, [r7, #16]
   80cd2:	2b00      	cmp	r3, #0
   80cd4:	d016      	beq.n	80d04 <dd_spi_master_read+0x64>
		dd_spi_write(p_buffer[i]);
		/*dd_spi_write(p_buffer[1]);*/
	//	while(((SPI0->SPI_SR) & SPI_SR_RDRF) == 0);
	//	dd_spi_read(&data);	
		
		while(((SPI0->SPI_SR) & SPI_SR_RDRF) == 0)
   80cd6:	4b0e      	ldr	r3, [pc, #56]	; (80d10 <dd_spi_master_read+0x70>)
   80cd8:	691b      	ldr	r3, [r3, #16]
   80cda:	f003 0301 	and.w	r3, r3, #1
   80cde:	2b00      	cmp	r3, #0
   80ce0:	d0f4      	beq.n	80ccc <dd_spi_master_read+0x2c>
			 {
				if (!timeout--) {
					return SPI_ERROR_TIMEOUT;
				}
			 }
		dd_spi_read(&data);
   80ce2:	480c      	ldr	r0, [pc, #48]	; (80d14 <dd_spi_master_read+0x74>)
   80ce4:	4b0c      	ldr	r3, [pc, #48]	; (80d18 <dd_spi_master_read+0x78>)
   80ce6:	4798      	blx	r3
		p_buffer[i] = data;
   80ce8:	68fa      	ldr	r2, [r7, #12]
   80cea:	697b      	ldr	r3, [r7, #20]
   80cec:	4413      	add	r3, r2
   80cee:	4a09      	ldr	r2, [pc, #36]	; (80d14 <dd_spi_master_read+0x74>)
   80cf0:	7812      	ldrb	r2, [r2, #0]
   80cf2:	701a      	strb	r2, [r3, #0]
//  	dd_spi_read(&data);
// 	
// 	dd_spi_write(p_buffer[0]);
// 	dd_spi_read(&data);
	
	for (i = 0; i < size ; i++) {
   80cf4:	697b      	ldr	r3, [r7, #20]
   80cf6:	3301      	adds	r3, #1
   80cf8:	617b      	str	r3, [r7, #20]
   80cfa:	697a      	ldr	r2, [r7, #20]
   80cfc:	683b      	ldr	r3, [r7, #0]
   80cfe:	429a      	cmp	r2, r3
   80d00:	d3db      	bcc.n	80cba <dd_spi_master_read+0x1a>
   80d02:	e000      	b.n	80d06 <dd_spi_master_read+0x66>
	//	dd_spi_read(&data);	
		
		while(((SPI0->SPI_SR) & SPI_SR_RDRF) == 0)
			 {
				if (!timeout--) {
					return SPI_ERROR_TIMEOUT;
   80d04:	bf00      	nop
			 }
		dd_spi_read(&data);
		p_buffer[i] = data;
		
	}
}
   80d06:	3718      	adds	r7, #24
   80d08:	46bd      	mov	sp, r7
   80d0a:	bd80      	pop	{r7, pc}
   80d0c:	00080c59 	.word	0x00080c59
   80d10:	40008000 	.word	0x40008000
   80d14:	2007094c 	.word	0x2007094c
   80d18:	00080bfd 	.word	0x00080bfd

00080d1c <CPU2_DD_INIT_SPI>:
		data_ready = false;
	}	
}

void CPU2_DD_INIT_SPI(void)
{
   80d1c:	b580      	push	{r7, lr}
   80d1e:	b082      	sub	sp, #8
   80d20:	af00      	add	r7, sp, #0

	///////////////////////////////////////////////
	SPI0->SPI_WPMR = 0x53504900;         // SPI_WPMR_WPEN
   80d22:	4b43      	ldr	r3, [pc, #268]	; (80e30 <CPU2_DD_INIT_SPI+0x114>)
   80d24:	4a43      	ldr	r2, [pc, #268]	; (80e34 <CPU2_DD_INIT_SPI+0x118>)
   80d26:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	//puts("-I- Initialize SPI as master\r");	
	//dd_spi_set_writeprotect(0);	
	
	PMC->PMC_WPMR = 0x504D4300;
   80d2a:	4b43      	ldr	r3, [pc, #268]	; (80e38 <CPU2_DD_INIT_SPI+0x11c>)
   80d2c:	4a43      	ldr	r2, [pc, #268]	; (80e3c <CPU2_DD_INIT_SPI+0x120>)
   80d2e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	spi_enable_clock(SPI_MASTER_BASE);
   80d32:	483f      	ldr	r0, [pc, #252]	; (80e30 <CPU2_DD_INIT_SPI+0x114>)
   80d34:	4b42      	ldr	r3, [pc, #264]	; (80e40 <CPU2_DD_INIT_SPI+0x124>)
   80d36:	4798      	blx	r3
	
	
	
	 SPI0->SPI_CR = SPI_CR_SPIDIS;	
   80d38:	4b3d      	ldr	r3, [pc, #244]	; (80e30 <CPU2_DD_INIT_SPI+0x114>)
   80d3a:	2202      	movs	r2, #2
   80d3c:	601a      	str	r2, [r3, #0]
	//spi_disable(SPI_MASTER_BASE);
	
	SPI0->SPI_CR = SPI_CR_SWRST;
   80d3e:	4b3c      	ldr	r3, [pc, #240]	; (80e30 <CPU2_DD_INIT_SPI+0x114>)
   80d40:	2280      	movs	r2, #128	; 0x80
   80d42:	601a      	str	r2, [r3, #0]
	//spi_reset(SPI_MASTER_BASE);
	
	SPI0->SPI_CR = SPI_CR_LASTXFER;
   80d44:	4b3a      	ldr	r3, [pc, #232]	; (80e30 <CPU2_DD_INIT_SPI+0x114>)
   80d46:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   80d4a:	601a      	str	r2, [r3, #0]
	//spi_set_lastxfer(SPI_MASTER_BASE);
	
	SPI0->SPI_MR |= SPI_MR_MSTR;
   80d4c:	4a38      	ldr	r2, [pc, #224]	; (80e30 <CPU2_DD_INIT_SPI+0x114>)
   80d4e:	4b38      	ldr	r3, [pc, #224]	; (80e30 <CPU2_DD_INIT_SPI+0x114>)
   80d50:	685b      	ldr	r3, [r3, #4]
   80d52:	f043 0301 	orr.w	r3, r3, #1
   80d56:	6053      	str	r3, [r2, #4]
	//spi_set_master_mode(SPI_MASTER_BASE);
	
	SPI0->SPI_MR |= SPI_MR_MODFDIS;
   80d58:	4a35      	ldr	r2, [pc, #212]	; (80e30 <CPU2_DD_INIT_SPI+0x114>)
   80d5a:	4b35      	ldr	r3, [pc, #212]	; (80e30 <CPU2_DD_INIT_SPI+0x114>)
   80d5c:	685b      	ldr	r3, [r3, #4]
   80d5e:	f043 0310 	orr.w	r3, r3, #16
   80d62:	6053      	str	r3, [r2, #4]
// 	SPI0->SPI_MR = 0x00000001;
// 	SPI0->SPI_CSR = 0x10800080;
	
	
	//spi_set_peripheral_chip_select_value(SPI_MASTER_BASE, SPI_CHIP_PCS);	
	dd_spi_set_clock_polarity(APT_CHIP_SEL, SPI_CLK_POLARITY_0);
   80d64:	4b37      	ldr	r3, [pc, #220]	; (80e44 <CPU2_DD_INIT_SPI+0x128>)
   80d66:	781b      	ldrb	r3, [r3, #0]
   80d68:	b29b      	uxth	r3, r3
   80d6a:	2100      	movs	r1, #0
   80d6c:	4618      	mov	r0, r3
   80d6e:	4b36      	ldr	r3, [pc, #216]	; (80e48 <CPU2_DD_INIT_SPI+0x12c>)
   80d70:	4798      	blx	r3
	dd_spi_set_clock_phase(APT_CHIP_SEL, SPI_CLK_PHASE_1);	
   80d72:	4b34      	ldr	r3, [pc, #208]	; (80e44 <CPU2_DD_INIT_SPI+0x128>)
   80d74:	781b      	ldrb	r3, [r3, #0]
   80d76:	b29b      	uxth	r3, r3
   80d78:	2101      	movs	r1, #1
   80d7a:	4618      	mov	r0, r3
   80d7c:	4b33      	ldr	r3, [pc, #204]	; (80e4c <CPU2_DD_INIT_SPI+0x130>)
   80d7e:	4798      	blx	r3
	dd_spi_set_bits_per_transfer(APT_CHIP_SEL,SPI_CSR_BITS_8_BIT);	
   80d80:	4b30      	ldr	r3, [pc, #192]	; (80e44 <CPU2_DD_INIT_SPI+0x128>)
   80d82:	781b      	ldrb	r3, [r3, #0]
   80d84:	b29b      	uxth	r3, r3
   80d86:	2100      	movs	r1, #0
   80d88:	4618      	mov	r0, r3
   80d8a:	4b31      	ldr	r3, [pc, #196]	; (80e50 <CPU2_DD_INIT_SPI+0x134>)
   80d8c:	4798      	blx	r3
	dd_spi_set_baudrate_div(APT_CHIP_SEL, 0xff );	//(sysclk_get_peripheral_hz()/ gs_ul_spi_clock)
   80d8e:	4b2d      	ldr	r3, [pc, #180]	; (80e44 <CPU2_DD_INIT_SPI+0x128>)
   80d90:	781b      	ldrb	r3, [r3, #0]
   80d92:	b29b      	uxth	r3, r3
   80d94:	21ff      	movs	r1, #255	; 0xff
   80d96:	4618      	mov	r0, r3
   80d98:	4b2e      	ldr	r3, [pc, #184]	; (80e54 <CPU2_DD_INIT_SPI+0x138>)
   80d9a:	4798      	blx	r3
	dd_spi_set_transfer_delay(APT_CHIP_SEL, SPI_DLYBS,SPI_DLYBCT);
   80d9c:	4b29      	ldr	r3, [pc, #164]	; (80e44 <CPU2_DD_INIT_SPI+0x128>)
   80d9e:	781b      	ldrb	r3, [r3, #0]
   80da0:	b29b      	uxth	r3, r3
   80da2:	2230      	movs	r2, #48	; 0x30
   80da4:	21ff      	movs	r1, #255	; 0xff
   80da6:	4618      	mov	r0, r3
   80da8:	4b2b      	ldr	r3, [pc, #172]	; (80e58 <CPU2_DD_INIT_SPI+0x13c>)
   80daa:	4798      	blx	r3
	
	//spi_set_peripheral_chip_select_value(SPI_MASTER_BASE, SPI_CHIP_PCS);	
	dd_spi_set_clock_polarity(VPT_CHIP_SEL, SPI_CLK_POLARITY_0);
   80dac:	4b2b      	ldr	r3, [pc, #172]	; (80e5c <CPU2_DD_INIT_SPI+0x140>)
   80dae:	781b      	ldrb	r3, [r3, #0]
   80db0:	b29b      	uxth	r3, r3
   80db2:	2100      	movs	r1, #0
   80db4:	4618      	mov	r0, r3
   80db6:	4b24      	ldr	r3, [pc, #144]	; (80e48 <CPU2_DD_INIT_SPI+0x12c>)
   80db8:	4798      	blx	r3
	dd_spi_set_clock_phase(VPT_CHIP_SEL, SPI_CLK_PHASE_1);	
   80dba:	4b28      	ldr	r3, [pc, #160]	; (80e5c <CPU2_DD_INIT_SPI+0x140>)
   80dbc:	781b      	ldrb	r3, [r3, #0]
   80dbe:	b29b      	uxth	r3, r3
   80dc0:	2101      	movs	r1, #1
   80dc2:	4618      	mov	r0, r3
   80dc4:	4b21      	ldr	r3, [pc, #132]	; (80e4c <CPU2_DD_INIT_SPI+0x130>)
   80dc6:	4798      	blx	r3
	dd_spi_set_bits_per_transfer(VPT_CHIP_SEL,SPI_CSR_BITS_8_BIT);	
   80dc8:	4b24      	ldr	r3, [pc, #144]	; (80e5c <CPU2_DD_INIT_SPI+0x140>)
   80dca:	781b      	ldrb	r3, [r3, #0]
   80dcc:	b29b      	uxth	r3, r3
   80dce:	2100      	movs	r1, #0
   80dd0:	4618      	mov	r0, r3
   80dd2:	4b1f      	ldr	r3, [pc, #124]	; (80e50 <CPU2_DD_INIT_SPI+0x134>)
   80dd4:	4798      	blx	r3
	dd_spi_set_baudrate_div(VPT_CHIP_SEL, 0xff );	//(sysclk_get_peripheral_hz()/ gs_ul_spi_clock)
   80dd6:	4b21      	ldr	r3, [pc, #132]	; (80e5c <CPU2_DD_INIT_SPI+0x140>)
   80dd8:	781b      	ldrb	r3, [r3, #0]
   80dda:	b29b      	uxth	r3, r3
   80ddc:	21ff      	movs	r1, #255	; 0xff
   80dde:	4618      	mov	r0, r3
   80de0:	4b1c      	ldr	r3, [pc, #112]	; (80e54 <CPU2_DD_INIT_SPI+0x138>)
   80de2:	4798      	blx	r3
	dd_spi_set_transfer_delay(VPT_CHIP_SEL, SPI_DLYBS,SPI_DLYBCT);
   80de4:	4b1d      	ldr	r3, [pc, #116]	; (80e5c <CPU2_DD_INIT_SPI+0x140>)
   80de6:	781b      	ldrb	r3, [r3, #0]
   80de8:	b29b      	uxth	r3, r3
   80dea:	2230      	movs	r2, #48	; 0x30
   80dec:	21ff      	movs	r1, #255	; 0xff
   80dee:	4618      	mov	r0, r3
   80df0:	4b19      	ldr	r3, [pc, #100]	; (80e58 <CPU2_DD_INIT_SPI+0x13c>)
   80df2:	4798      	blx	r3
	SPI0->SPI_CR = SPI_CR_SPIEN;
   80df4:	4b0e      	ldr	r3, [pc, #56]	; (80e30 <CPU2_DD_INIT_SPI+0x114>)
   80df6:	2201      	movs	r2, #1
   80df8:	601a      	str	r2, [r3, #0]
	
	dd_APT_CS();
   80dfa:	4b19      	ldr	r3, [pc, #100]	; (80e60 <CPU2_DD_INIT_SPI+0x144>)
   80dfc:	4798      	blx	r3
	dd_APT_REG_INIT();
   80dfe:	4b19      	ldr	r3, [pc, #100]	; (80e64 <CPU2_DD_INIT_SPI+0x148>)
   80e00:	4798      	blx	r3
	uint k = 0;
   80e02:	2300      	movs	r3, #0
   80e04:	607b      	str	r3, [r7, #4]
	while (k < 100000)
   80e06:	e002      	b.n	80e0e <CPU2_DD_INIT_SPI+0xf2>
	{
		k++;
   80e08:	687b      	ldr	r3, [r7, #4]
   80e0a:	3301      	adds	r3, #1
   80e0c:	607b      	str	r3, [r7, #4]
	SPI0->SPI_CR = SPI_CR_SPIEN;
	
	dd_APT_CS();
	dd_APT_REG_INIT();
	uint k = 0;
	while (k < 100000)
   80e0e:	687b      	ldr	r3, [r7, #4]
   80e10:	4a15      	ldr	r2, [pc, #84]	; (80e68 <CPU2_DD_INIT_SPI+0x14c>)
   80e12:	4293      	cmp	r3, r2
   80e14:	d9f8      	bls.n	80e08 <CPU2_DD_INIT_SPI+0xec>
	{
		k++;
	}
	
	 dd_spi_master_read( &DATA_array, 2);
   80e16:	2102      	movs	r1, #2
   80e18:	4814      	ldr	r0, [pc, #80]	; (80e6c <CPU2_DD_INIT_SPI+0x150>)
   80e1a:	4b15      	ldr	r3, [pc, #84]	; (80e70 <CPU2_DD_INIT_SPI+0x154>)
   80e1c:	4798      	blx	r3
	dd_VPT_CS();
   80e1e:	4b15      	ldr	r3, [pc, #84]	; (80e74 <CPU2_DD_INIT_SPI+0x158>)
   80e20:	4798      	blx	r3
	dd_VPT_REG_INIT();
   80e22:	4b15      	ldr	r3, [pc, #84]	; (80e78 <CPU2_DD_INIT_SPI+0x15c>)
   80e24:	4798      	blx	r3
	
	
			
}
   80e26:	bf00      	nop
   80e28:	3708      	adds	r7, #8
   80e2a:	46bd      	mov	sp, r7
   80e2c:	bd80      	pop	{r7, pc}
   80e2e:	bf00      	nop
   80e30:	40008000 	.word	0x40008000
   80e34:	53504900 	.word	0x53504900
   80e38:	400e0600 	.word	0x400e0600
   80e3c:	504d4300 	.word	0x504d4300
   80e40:	0008016d 	.word	0x0008016d
   80e44:	20070944 	.word	0x20070944
   80e48:	00080a71 	.word	0x00080a71
   80e4c:	00080ac5 	.word	0x00080ac5
   80e50:	00080a25 	.word	0x00080a25
   80e54:	00080b19 	.word	0x00080b19
   80e58:	000809c9 	.word	0x000809c9
   80e5c:	20070000 	.word	0x20070000
   80e60:	00080e7d 	.word	0x00080e7d
   80e64:	000808b9 	.word	0x000808b9
   80e68:	0001869f 	.word	0x0001869f
   80e6c:	20070e78 	.word	0x20070e78
   80e70:	00080ca1 	.word	0x00080ca1
   80e74:	00080ed1 	.word	0x00080ed1
   80e78:	00080941 	.word	0x00080941

00080e7c <dd_APT_CS>:

 void dd_APT_CS()
	 {
   80e7c:	b480      	push	{r7}
   80e7e:	af00      	add	r7, sp, #0
		 SPI0->SPI_MR &= (~SPI_MR_PS); // SPI SET FIXED PERIPHERAL.	/ 	SPI0->SPI_MR &= (~SPI_MR_PCSDEC); // The chip selects are directly connected to a peripheral device.	
   80e80:	4a11      	ldr	r2, [pc, #68]	; (80ec8 <dd_APT_CS+0x4c>)
   80e82:	4b11      	ldr	r3, [pc, #68]	; (80ec8 <dd_APT_CS+0x4c>)
   80e84:	685b      	ldr	r3, [r3, #4]
   80e86:	f023 0302 	bic.w	r3, r3, #2
   80e8a:	6053      	str	r3, [r2, #4]
 	SPI0->SPI_MR &= (~SPI_MR_PCS_Msk);
   80e8c:	4a0e      	ldr	r2, [pc, #56]	; (80ec8 <dd_APT_CS+0x4c>)
   80e8e:	4b0e      	ldr	r3, [pc, #56]	; (80ec8 <dd_APT_CS+0x4c>)
   80e90:	685b      	ldr	r3, [r3, #4]
   80e92:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
   80e96:	6053      	str	r3, [r2, #4]
	 SPI0->SPI_MR &= (~SPI_MR_PCSDEC);
   80e98:	4a0b      	ldr	r2, [pc, #44]	; (80ec8 <dd_APT_CS+0x4c>)
   80e9a:	4b0b      	ldr	r3, [pc, #44]	; (80ec8 <dd_APT_CS+0x4c>)
   80e9c:	685b      	ldr	r3, [r3, #4]
   80e9e:	f023 0304 	bic.w	r3, r3, #4
   80ea2:	6053      	str	r3, [r2, #4]
 	SPI0->SPI_MR |= SPI_MR_PCS(APT_CHIP_PCS);
   80ea4:	4908      	ldr	r1, [pc, #32]	; (80ec8 <dd_APT_CS+0x4c>)
   80ea6:	4b08      	ldr	r3, [pc, #32]	; (80ec8 <dd_APT_CS+0x4c>)
   80ea8:	685a      	ldr	r2, [r3, #4]
   80eaa:	4b08      	ldr	r3, [pc, #32]	; (80ecc <dd_APT_CS+0x50>)
   80eac:	781b      	ldrb	r3, [r3, #0]
   80eae:	4618      	mov	r0, r3
   80eb0:	2301      	movs	r3, #1
   80eb2:	4083      	lsls	r3, r0
   80eb4:	43db      	mvns	r3, r3
   80eb6:	041b      	lsls	r3, r3, #16
   80eb8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
   80ebc:	4313      	orrs	r3, r2
   80ebe:	604b      	str	r3, [r1, #4]
		 
	 }
   80ec0:	bf00      	nop
   80ec2:	46bd      	mov	sp, r7
   80ec4:	bc80      	pop	{r7}
   80ec6:	4770      	bx	lr
   80ec8:	40008000 	.word	0x40008000
   80ecc:	20070944 	.word	0x20070944

00080ed0 <dd_VPT_CS>:
	 
void dd_VPT_CS()
	 {
   80ed0:	b480      	push	{r7}
   80ed2:	af00      	add	r7, sp, #0
		  SPI0->SPI_MR &= (~SPI_MR_PS); // SPI SET FIXED PERIPHERAL.	/ 	SPI0->SPI_MR &= (~SPI_MR_PCSDEC); // The chip selects are directly connected to a peripheral device.	
   80ed4:	4a11      	ldr	r2, [pc, #68]	; (80f1c <dd_VPT_CS+0x4c>)
   80ed6:	4b11      	ldr	r3, [pc, #68]	; (80f1c <dd_VPT_CS+0x4c>)
   80ed8:	685b      	ldr	r3, [r3, #4]
   80eda:	f023 0302 	bic.w	r3, r3, #2
   80ede:	6053      	str	r3, [r2, #4]
 	SPI0->SPI_MR &= (~SPI_MR_PCS_Msk);
   80ee0:	4a0e      	ldr	r2, [pc, #56]	; (80f1c <dd_VPT_CS+0x4c>)
   80ee2:	4b0e      	ldr	r3, [pc, #56]	; (80f1c <dd_VPT_CS+0x4c>)
   80ee4:	685b      	ldr	r3, [r3, #4]
   80ee6:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
   80eea:	6053      	str	r3, [r2, #4]
	 SPI0->SPI_MR &= (~SPI_MR_PCSDEC);
   80eec:	4a0b      	ldr	r2, [pc, #44]	; (80f1c <dd_VPT_CS+0x4c>)
   80eee:	4b0b      	ldr	r3, [pc, #44]	; (80f1c <dd_VPT_CS+0x4c>)
   80ef0:	685b      	ldr	r3, [r3, #4]
   80ef2:	f023 0304 	bic.w	r3, r3, #4
   80ef6:	6053      	str	r3, [r2, #4]
 	SPI0->SPI_MR |= SPI_MR_PCS(VPT_CHIP_PCS);
   80ef8:	4908      	ldr	r1, [pc, #32]	; (80f1c <dd_VPT_CS+0x4c>)
   80efa:	4b08      	ldr	r3, [pc, #32]	; (80f1c <dd_VPT_CS+0x4c>)
   80efc:	685a      	ldr	r2, [r3, #4]
   80efe:	4b08      	ldr	r3, [pc, #32]	; (80f20 <dd_VPT_CS+0x50>)
   80f00:	781b      	ldrb	r3, [r3, #0]
   80f02:	4618      	mov	r0, r3
   80f04:	2301      	movs	r3, #1
   80f06:	4083      	lsls	r3, r0
   80f08:	43db      	mvns	r3, r3
   80f0a:	041b      	lsls	r3, r3, #16
   80f0c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
   80f10:	4313      	orrs	r3, r2
   80f12:	604b      	str	r3, [r1, #4]
	 }
   80f14:	bf00      	nop
   80f16:	46bd      	mov	sp, r7
   80f18:	bc80      	pop	{r7}
   80f1a:	4770      	bx	lr
   80f1c:	40008000 	.word	0x40008000
   80f20:	20070000 	.word	0x20070000

00080f24 <DD_READ_SENSORS>:
 
uint16_t DD_READ_SENSORS(sv_sensortype ID_SENSOR)
{
   80f24:	b580      	push	{r7, lr}
   80f26:	b084      	sub	sp, #16
   80f28:	af00      	add	r7, sp, #0
   80f2a:	4603      	mov	r3, r0
   80f2c:	71fb      	strb	r3, [r7, #7]
	uint16_t sensor_status = 0;
   80f2e:	2300      	movs	r3, #0
   80f30:	81fb      	strh	r3, [r7, #14]
	
	sensor_data.CPU_SENDER_type_reg = HEMO_CPU_id;
   80f32:	4b29      	ldr	r3, [pc, #164]	; (80fd8 <DD_READ_SENSORS+0xb4>)
   80f34:	2201      	movs	r2, #1
   80f36:	701a      	strb	r2, [r3, #0]
	sensor_data.SENSOR_GROUP_type_reg = GROUP_ID_7;
   80f38:	4b27      	ldr	r3, [pc, #156]	; (80fd8 <DD_READ_SENSORS+0xb4>)
   80f3a:	2207      	movs	r2, #7
   80f3c:	705a      	strb	r2, [r3, #1]
	
	 switch(ID_SENSOR)
   80f3e:	79fb      	ldrb	r3, [r7, #7]
   80f40:	2b01      	cmp	r3, #1
   80f42:	d003      	beq.n	80f4c <DD_READ_SENSORS+0x28>
   80f44:	2b02      	cmp	r3, #2
   80f46:	d022      	beq.n	80f8e <DD_READ_SENSORS+0x6a>
		 }
		 return sensor_status;
		 break;
	
		default:
		break;
   80f48:	bf00      	nop
	
	 }
	
	
		
   80f4a:	e040      	b.n	80fce <DD_READ_SENSORS+0xaa>
		 uint32_t volatile temp ;
		 case SV_APT:
		 
	//	 temp = SPI_APT_READY;
		
		 while(SPI_APT_READY)
   80f4c:	bf00      	nop
   80f4e:	4b23      	ldr	r3, [pc, #140]	; (80fdc <DD_READ_SENSORS+0xb8>)
   80f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   80f52:	099b      	lsrs	r3, r3, #6
   80f54:	f003 0301 	and.w	r3, r3, #1
   80f58:	2b00      	cmp	r3, #0
   80f5a:	d1f8      	bne.n	80f4e <DD_READ_SENSORS+0x2a>
	//	 if(temp == 0)
		 
		 {
			 
		 
		 dd_APT_CS();
   80f5c:	4b20      	ldr	r3, [pc, #128]	; (80fe0 <DD_READ_SENSORS+0xbc>)
   80f5e:	4798      	blx	r3
		 DATA_array[0]=0;
   80f60:	4b20      	ldr	r3, [pc, #128]	; (80fe4 <DD_READ_SENSORS+0xc0>)
   80f62:	2200      	movs	r2, #0
   80f64:	701a      	strb	r2, [r3, #0]
		 DATA_array[1]=0;
   80f66:	4b1f      	ldr	r3, [pc, #124]	; (80fe4 <DD_READ_SENSORS+0xc0>)
   80f68:	2200      	movs	r2, #0
   80f6a:	705a      	strb	r2, [r3, #1]
		 
		 dd_spi_master_read( &DATA_array, 2);
   80f6c:	2102      	movs	r1, #2
   80f6e:	481d      	ldr	r0, [pc, #116]	; (80fe4 <DD_READ_SENSORS+0xc0>)
   80f70:	4b1d      	ldr	r3, [pc, #116]	; (80fe8 <DD_READ_SENSORS+0xc4>)
   80f72:	4798      	blx	r3
		 
		 spi_data.bytearray[1] =DATA_array[0];
   80f74:	4b1b      	ldr	r3, [pc, #108]	; (80fe4 <DD_READ_SENSORS+0xc0>)
   80f76:	781a      	ldrb	r2, [r3, #0]
   80f78:	4b1c      	ldr	r3, [pc, #112]	; (80fec <DD_READ_SENSORS+0xc8>)
   80f7a:	705a      	strb	r2, [r3, #1]
		 spi_data.bytearray[0] = DATA_array[1];
   80f7c:	4b19      	ldr	r3, [pc, #100]	; (80fe4 <DD_READ_SENSORS+0xc0>)
   80f7e:	785a      	ldrb	r2, [r3, #1]
   80f80:	4b1a      	ldr	r3, [pc, #104]	; (80fec <DD_READ_SENSORS+0xc8>)
   80f82:	701a      	strb	r2, [r3, #0]
		 
		 sensor_status = spi_data.Twobyte;
   80f84:	4b19      	ldr	r3, [pc, #100]	; (80fec <DD_READ_SENSORS+0xc8>)
   80f86:	881b      	ldrh	r3, [r3, #0]
   80f88:	81fb      	strh	r3, [r7, #14]
		 
		 }
		 return sensor_status;
   80f8a:	89fb      	ldrh	r3, [r7, #14]
   80f8c:	e01f      	b.n	80fce <DD_READ_SENSORS+0xaa>
// 		 
		 
		 break;
		 
		 case SV_VPT:
		 while(SPI_VPT_READY)
   80f8e:	bf00      	nop
   80f90:	4b12      	ldr	r3, [pc, #72]	; (80fdc <DD_READ_SENSORS+0xb8>)
   80f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   80f94:	095b      	lsrs	r3, r3, #5
   80f96:	f003 0301 	and.w	r3, r3, #1
   80f9a:	2b00      	cmp	r3, #0
   80f9c:	d1f8      	bne.n	80f90 <DD_READ_SENSORS+0x6c>
		 {
			 // return if TIME EOUT
		 };
		 {
		 dd_VPT_CS();
   80f9e:	4b14      	ldr	r3, [pc, #80]	; (80ff0 <DD_READ_SENSORS+0xcc>)
   80fa0:	4798      	blx	r3
		 
		 DATA_array[0]=0;
   80fa2:	4b10      	ldr	r3, [pc, #64]	; (80fe4 <DD_READ_SENSORS+0xc0>)
   80fa4:	2200      	movs	r2, #0
   80fa6:	701a      	strb	r2, [r3, #0]
		 DATA_array[1]=0;
   80fa8:	4b0e      	ldr	r3, [pc, #56]	; (80fe4 <DD_READ_SENSORS+0xc0>)
   80faa:	2200      	movs	r2, #0
   80fac:	705a      	strb	r2, [r3, #1]
		 
		 
		 dd_spi_master_read( &DATA_array, 2);
   80fae:	2102      	movs	r1, #2
   80fb0:	480c      	ldr	r0, [pc, #48]	; (80fe4 <DD_READ_SENSORS+0xc0>)
   80fb2:	4b0d      	ldr	r3, [pc, #52]	; (80fe8 <DD_READ_SENSORS+0xc4>)
   80fb4:	4798      	blx	r3
		 
		 spi_data.bytearray[1] =DATA_array[0];
   80fb6:	4b0b      	ldr	r3, [pc, #44]	; (80fe4 <DD_READ_SENSORS+0xc0>)
   80fb8:	781a      	ldrb	r2, [r3, #0]
   80fba:	4b0c      	ldr	r3, [pc, #48]	; (80fec <DD_READ_SENSORS+0xc8>)
   80fbc:	705a      	strb	r2, [r3, #1]
		 spi_data.bytearray[0] = DATA_array[1];
   80fbe:	4b09      	ldr	r3, [pc, #36]	; (80fe4 <DD_READ_SENSORS+0xc0>)
   80fc0:	785a      	ldrb	r2, [r3, #1]
   80fc2:	4b0a      	ldr	r3, [pc, #40]	; (80fec <DD_READ_SENSORS+0xc8>)
   80fc4:	701a      	strb	r2, [r3, #0]
		 sensor_status = spi_data.Twobyte;
   80fc6:	4b09      	ldr	r3, [pc, #36]	; (80fec <DD_READ_SENSORS+0xc8>)
   80fc8:	881b      	ldrh	r3, [r3, #0]
   80fca:	81fb      	strh	r3, [r7, #14]
// 		 for (int i=0;i<100000;i++)
// 		 {
// 			 ;
// 		 }
		 }
		 return sensor_status;
   80fcc:	89fb      	ldrh	r3, [r7, #14]
	
	 }
	
	
		
   80fce:	4618      	mov	r0, r3
   80fd0:	3710      	adds	r7, #16
   80fd2:	46bd      	mov	sp, r7
   80fd4:	bd80      	pop	{r7, pc}
   80fd6:	bf00      	nop
   80fd8:	20070a2c 	.word	0x20070a2c
   80fdc:	400e1200 	.word	0x400e1200
   80fe0:	00080e7d 	.word	0x00080e7d
   80fe4:	20070e78 	.word	0x20070e78
   80fe8:	00080ca1 	.word	0x00080ca1
   80fec:	20070e70 	.word	0x20070e70
   80ff0:	00080ed1 	.word	0x00080ed1

00080ff4 <CPU2_D_INIT_PIO>:
 *  Author: wid7
 */ 
#include "GPIO.h"

void CPU2_D_INIT_PIO()
{
   80ff4:	b580      	push	{r7, lr}
   80ff6:	af00      	add	r7, sp, #0
	/*pmc_enable_periph_clk(ID_PIOA);
	pmc_enable_periph_clk(ID_PIOB);
	pmc_enable_periph_clk(ID_PIOC);
	pmc_enable_periph_clk(ID_PIOD);*/
	
	PIOA->PIO_WPMR = 0x50494F00;
   80ff8:	4b3b      	ldr	r3, [pc, #236]	; (810e8 <CPU2_D_INIT_PIO+0xf4>)
   80ffa:	4a3c      	ldr	r2, [pc, #240]	; (810ec <CPU2_D_INIT_PIO+0xf8>)
   80ffc:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOB->PIO_WPMR = 0x50494F00;
   81000:	4b3b      	ldr	r3, [pc, #236]	; (810f0 <CPU2_D_INIT_PIO+0xfc>)
   81002:	4a3a      	ldr	r2, [pc, #232]	; (810ec <CPU2_D_INIT_PIO+0xf8>)
   81004:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOC->PIO_WPMR = 0x50494F00;
   81008:	4b3a      	ldr	r3, [pc, #232]	; (810f4 <CPU2_D_INIT_PIO+0x100>)
   8100a:	4a38      	ldr	r2, [pc, #224]	; (810ec <CPU2_D_INIT_PIO+0xf8>)
   8100c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOD->PIO_WPMR = 0x50494F00;
   81010:	4b39      	ldr	r3, [pc, #228]	; (810f8 <CPU2_D_INIT_PIO+0x104>)
   81012:	4a36      	ldr	r2, [pc, #216]	; (810ec <CPU2_D_INIT_PIO+0xf8>)
   81014:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	
	PIOA->PIO_PUER = 0x00060000;			
   81018:	4b33      	ldr	r3, [pc, #204]	; (810e8 <CPU2_D_INIT_PIO+0xf4>)
   8101a:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
   8101e:	665a      	str	r2, [r3, #100]	; 0x64
	PIOA->PIO_PDR =	 0x3E060000;				// initialization for TWI //
   81020:	4b31      	ldr	r3, [pc, #196]	; (810e8 <CPU2_D_INIT_PIO+0xf4>)
   81022:	4a36      	ldr	r2, [pc, #216]	; (810fc <CPU2_D_INIT_PIO+0x108>)
   81024:	605a      	str	r2, [r3, #4]
	//PIOA->PIO_ABSR = 0x00090000;
	
	PIOA->PIO_PUER = 0x00000300;			// for scanf statement//
   81026:	4b30      	ldr	r3, [pc, #192]	; (810e8 <CPU2_D_INIT_PIO+0xf4>)
   81028:	f44f 7240 	mov.w	r2, #768	; 0x300
   8102c:	665a      	str	r2, [r3, #100]	; 0x64
	
	PIOA->PIO_PER  = 0x00007C00;
   8102e:	4b2e      	ldr	r3, [pc, #184]	; (810e8 <CPU2_D_INIT_PIO+0xf4>)
   81030:	f44f 42f8 	mov.w	r2, #31744	; 0x7c00
   81034:	601a      	str	r2, [r3, #0]
	PIOA->PIO_OER  = 0x00002800;
   81036:	4b2c      	ldr	r3, [pc, #176]	; (810e8 <CPU2_D_INIT_PIO+0xf4>)
   81038:	f44f 5220 	mov.w	r2, #10240	; 0x2800
   8103c:	611a      	str	r2, [r3, #16]
	PIOA->PIO_ODR  = 0x00005400;
   8103e:	4b2a      	ldr	r3, [pc, #168]	; (810e8 <CPU2_D_INIT_PIO+0xf4>)
   81040:	f44f 42a8 	mov.w	r2, #21504	; 0x5400
   81044:	615a      	str	r2, [r3, #20]
	PIOA->PIO_SODR = 0x00000800;
   81046:	4b28      	ldr	r3, [pc, #160]	; (810e8 <CPU2_D_INIT_PIO+0xf4>)
   81048:	f44f 6200 	mov.w	r2, #2048	; 0x800
   8104c:	631a      	str	r2, [r3, #48]	; 0x30
	PIOA->PIO_CODR = 0x00002000;
   8104e:	4b26      	ldr	r3, [pc, #152]	; (810e8 <CPU2_D_INIT_PIO+0xf4>)
   81050:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   81054:	635a      	str	r2, [r3, #52]	; 0x34
	PIOA->PIO_PUER = 0x00002800;
   81056:	4b24      	ldr	r3, [pc, #144]	; (810e8 <CPU2_D_INIT_PIO+0xf4>)
   81058:	f44f 5220 	mov.w	r2, #10240	; 0x2800
   8105c:	665a      	str	r2, [r3, #100]	; 0x64
	
	
	PIOB->PIO_PER  = 0x06008000;
   8105e:	4b24      	ldr	r3, [pc, #144]	; (810f0 <CPU2_D_INIT_PIO+0xfc>)
   81060:	4a27      	ldr	r2, [pc, #156]	; (81100 <CPU2_D_INIT_PIO+0x10c>)
   81062:	601a      	str	r2, [r3, #0]
	PIOB->PIO_OER  = 0x06000000;
   81064:	4b22      	ldr	r3, [pc, #136]	; (810f0 <CPU2_D_INIT_PIO+0xfc>)
   81066:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
   8106a:	611a      	str	r2, [r3, #16]
	PIOB->PIO_ODR  = 0x00008000;
   8106c:	4b20      	ldr	r3, [pc, #128]	; (810f0 <CPU2_D_INIT_PIO+0xfc>)
   8106e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   81072:	615a      	str	r2, [r3, #20]
	PIOB->PIO_SODR = 0x06000000;
   81074:	4b1e      	ldr	r3, [pc, #120]	; (810f0 <CPU2_D_INIT_PIO+0xfc>)
   81076:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
   8107a:	631a      	str	r2, [r3, #48]	; 0x30
	
	PIOC->PIO_PER  = 0x018FF06A;
   8107c:	4b1d      	ldr	r3, [pc, #116]	; (810f4 <CPU2_D_INIT_PIO+0x100>)
   8107e:	4a21      	ldr	r2, [pc, #132]	; (81104 <CPU2_D_INIT_PIO+0x110>)
   81080:	601a      	str	r2, [r3, #0]
	PIOC->PIO_OER  = 0x008FF002;
   81082:	4b1c      	ldr	r3, [pc, #112]	; (810f4 <CPU2_D_INIT_PIO+0x100>)
   81084:	4a20      	ldr	r2, [pc, #128]	; (81108 <CPU2_D_INIT_PIO+0x114>)
   81086:	611a      	str	r2, [r3, #16]
	PIOC->PIO_ODR  = 0x01000068;
   81088:	4b1a      	ldr	r3, [pc, #104]	; (810f4 <CPU2_D_INIT_PIO+0x100>)
   8108a:	4a20      	ldr	r2, [pc, #128]	; (8110c <CPU2_D_INIT_PIO+0x118>)
   8108c:	615a      	str	r2, [r3, #20]
	PIOC->PIO_SODR = 0x000BF002;
   8108e:	4b19      	ldr	r3, [pc, #100]	; (810f4 <CPU2_D_INIT_PIO+0x100>)
   81090:	4a1f      	ldr	r2, [pc, #124]	; (81110 <CPU2_D_INIT_PIO+0x11c>)
   81092:	631a      	str	r2, [r3, #48]	; 0x30
	PIOC->PIO_PUER = 0x008FF002;
   81094:	4b17      	ldr	r3, [pc, #92]	; (810f4 <CPU2_D_INIT_PIO+0x100>)
   81096:	4a1c      	ldr	r2, [pc, #112]	; (81108 <CPU2_D_INIT_PIO+0x114>)
   81098:	665a      	str	r2, [r3, #100]	; 0x64
	PIOC->PIO_CODR = 0x00840000;
   8109a:	4b16      	ldr	r3, [pc, #88]	; (810f4 <CPU2_D_INIT_PIO+0x100>)
   8109c:	f44f 0204 	mov.w	r2, #8650752	; 0x840000
   810a0:	635a      	str	r2, [r3, #52]	; 0x34

	PIOD->PIO_PER  = 0x000006EF;
   810a2:	4b15      	ldr	r3, [pc, #84]	; (810f8 <CPU2_D_INIT_PIO+0x104>)
   810a4:	f240 62ef 	movw	r2, #1775	; 0x6ef
   810a8:	601a      	str	r2, [r3, #0]
	PIOD->PIO_OER  = 0x0000064F;
   810aa:	4b13      	ldr	r3, [pc, #76]	; (810f8 <CPU2_D_INIT_PIO+0x104>)
   810ac:	f240 624f 	movw	r2, #1615	; 0x64f
   810b0:	611a      	str	r2, [r3, #16]
	PIOD->PIO_ODR  = 0x00000020;
   810b2:	4b11      	ldr	r3, [pc, #68]	; (810f8 <CPU2_D_INIT_PIO+0x104>)
   810b4:	2220      	movs	r2, #32
   810b6:	615a      	str	r2, [r3, #20]
	PIOD->PIO_SODR = 0x0000064F;
   810b8:	4b0f      	ldr	r3, [pc, #60]	; (810f8 <CPU2_D_INIT_PIO+0x104>)
   810ba:	f240 624f 	movw	r2, #1615	; 0x64f
   810be:	631a      	str	r2, [r3, #48]	; 0x30
	PIOD->PIO_PUER = 0x0000064F;
   810c0:	4b0d      	ldr	r3, [pc, #52]	; (810f8 <CPU2_D_INIT_PIO+0x104>)
   810c2:	f240 624f 	movw	r2, #1615	; 0x64f
   810c6:	665a      	str	r2, [r3, #100]	; 0x64
	
	gpio_configure_pin(PIN_CAN0_RX_IDX, PIN_CAN0_RX_FLAGS);
   810c8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   810cc:	2001      	movs	r0, #1
   810ce:	4b11      	ldr	r3, [pc, #68]	; (81114 <CPU2_D_INIT_PIO+0x120>)
   810d0:	4798      	blx	r3
	gpio_configure_pin(PIN_CAN0_TX_IDX, PIN_CAN0_TX_FLAGS);
   810d2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   810d6:	2000      	movs	r0, #0
   810d8:	4b0e      	ldr	r3, [pc, #56]	; (81114 <CPU2_D_INIT_PIO+0x120>)
   810da:	4798      	blx	r3
	gpio_configure_pin(PIN_CAN0_STANDBY_IDX, PIN_CAN0_STANDBY_FLAGS);
   810dc:	490e      	ldr	r1, [pc, #56]	; (81118 <CPU2_D_INIT_PIO+0x124>)
   810de:	2002      	movs	r0, #2
   810e0:	4b0c      	ldr	r3, [pc, #48]	; (81114 <CPU2_D_INIT_PIO+0x120>)
   810e2:	4798      	blx	r3
	
//	sn65hvda540_set_en(&can0_transceiver ,PIN_CAN0_STANDBY_IDX);
//	sn65hvda540_normal_mode(&can0_transceiver);
}
   810e4:	bf00      	nop
   810e6:	bd80      	pop	{r7, pc}
   810e8:	400e0e00 	.word	0x400e0e00
   810ec:	50494f00 	.word	0x50494f00
   810f0:	400e1000 	.word	0x400e1000
   810f4:	400e1200 	.word	0x400e1200
   810f8:	400e1400 	.word	0x400e1400
   810fc:	3e060000 	.word	0x3e060000
   81100:	06008000 	.word	0x06008000
   81104:	018ff06a 	.word	0x018ff06a
   81108:	008ff002 	.word	0x008ff002
   8110c:	01000068 	.word	0x01000068
   81110:	000bf002 	.word	0x000bf002
   81114:	00083891 	.word	0x00083891
   81118:	30000001 	.word	0x30000001

0008111c <CPU2_D_SET_PIO>:



uint8_t CPU2_D_SET_PIO(pio_type peripheral,uint32_t pio)
{
   8111c:	b480      	push	{r7}
   8111e:	b083      	sub	sp, #12
   81120:	af00      	add	r7, sp, #0
   81122:	6078      	str	r0, [r7, #4]
   81124:	6039      	str	r1, [r7, #0]
	switch (peripheral)
   81126:	687b      	ldr	r3, [r7, #4]
   81128:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   8112c:	d014      	beq.n	81158 <CPU2_D_SET_PIO+0x3c>
   8112e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   81132:	d803      	bhi.n	8113c <CPU2_D_SET_PIO+0x20>
   81134:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   81138:	d007      	beq.n	8114a <CPU2_D_SET_PIO+0x2e>
   8113a:	e022      	b.n	81182 <CPU2_D_SET_PIO+0x66>
   8113c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
   81140:	d011      	beq.n	81166 <CPU2_D_SET_PIO+0x4a>
   81142:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   81146:	d015      	beq.n	81174 <CPU2_D_SET_PIO+0x58>
   81148:	e01b      	b.n	81182 <CPU2_D_SET_PIO+0x66>
	{
		case PA:
		PIOA->PIO_SODR = 1<<pio;
   8114a:	4a11      	ldr	r2, [pc, #68]	; (81190 <CPU2_D_SET_PIO+0x74>)
   8114c:	2101      	movs	r1, #1
   8114e:	683b      	ldr	r3, [r7, #0]
   81150:	fa01 f303 	lsl.w	r3, r1, r3
   81154:	6313      	str	r3, [r2, #48]	; 0x30
		break;
   81156:	e014      	b.n	81182 <CPU2_D_SET_PIO+0x66>
		case PB:
		PIOB->PIO_SODR = 1<<pio;
   81158:	4a0e      	ldr	r2, [pc, #56]	; (81194 <CPU2_D_SET_PIO+0x78>)
   8115a:	2101      	movs	r1, #1
   8115c:	683b      	ldr	r3, [r7, #0]
   8115e:	fa01 f303 	lsl.w	r3, r1, r3
   81162:	6313      	str	r3, [r2, #48]	; 0x30
		break;
   81164:	e00d      	b.n	81182 <CPU2_D_SET_PIO+0x66>
		case PC:
		PIOC->PIO_SODR = 1<<pio;
   81166:	4a0c      	ldr	r2, [pc, #48]	; (81198 <CPU2_D_SET_PIO+0x7c>)
   81168:	2101      	movs	r1, #1
   8116a:	683b      	ldr	r3, [r7, #0]
   8116c:	fa01 f303 	lsl.w	r3, r1, r3
   81170:	6313      	str	r3, [r2, #48]	; 0x30
		break;
   81172:	e006      	b.n	81182 <CPU2_D_SET_PIO+0x66>
		case PD:
		PIOD->PIO_SODR = 1<<pio;
   81174:	4a09      	ldr	r2, [pc, #36]	; (8119c <CPU2_D_SET_PIO+0x80>)
   81176:	2101      	movs	r1, #1
   81178:	683b      	ldr	r3, [r7, #0]
   8117a:	fa01 f303 	lsl.w	r3, r1, r3
   8117e:	6313      	str	r3, [r2, #48]	; 0x30
		break;	
   81180:	bf00      	nop
	}
	return 0;
   81182:	2300      	movs	r3, #0
}
   81184:	4618      	mov	r0, r3
   81186:	370c      	adds	r7, #12
   81188:	46bd      	mov	sp, r7
   8118a:	bc80      	pop	{r7}
   8118c:	4770      	bx	lr
   8118e:	bf00      	nop
   81190:	400e0e00 	.word	0x400e0e00
   81194:	400e1000 	.word	0x400e1000
   81198:	400e1200 	.word	0x400e1200
   8119c:	400e1400 	.word	0x400e1400

000811a0 <CPU2_D_RESET_PIO>:

uint8_t CPU2_D_RESET_PIO(const pio_type peripheral,uint32_t pio)
  {
   811a0:	b480      	push	{r7}
   811a2:	b083      	sub	sp, #12
   811a4:	af00      	add	r7, sp, #0
   811a6:	6078      	str	r0, [r7, #4]
   811a8:	6039      	str	r1, [r7, #0]
	  switch (peripheral)
   811aa:	687b      	ldr	r3, [r7, #4]
   811ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   811b0:	d014      	beq.n	811dc <CPU2_D_RESET_PIO+0x3c>
   811b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   811b6:	d803      	bhi.n	811c0 <CPU2_D_RESET_PIO+0x20>
   811b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   811bc:	d007      	beq.n	811ce <CPU2_D_RESET_PIO+0x2e>
   811be:	e022      	b.n	81206 <CPU2_D_RESET_PIO+0x66>
   811c0:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
   811c4:	d011      	beq.n	811ea <CPU2_D_RESET_PIO+0x4a>
   811c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   811ca:	d015      	beq.n	811f8 <CPU2_D_RESET_PIO+0x58>
   811cc:	e01b      	b.n	81206 <CPU2_D_RESET_PIO+0x66>
	  {
		  case PA:
		  PIOA->PIO_CODR = 1<<pio;
   811ce:	4a11      	ldr	r2, [pc, #68]	; (81214 <CPU2_D_RESET_PIO+0x74>)
   811d0:	2101      	movs	r1, #1
   811d2:	683b      	ldr	r3, [r7, #0]
   811d4:	fa01 f303 	lsl.w	r3, r1, r3
   811d8:	6353      	str	r3, [r2, #52]	; 0x34
		  break;
   811da:	e014      	b.n	81206 <CPU2_D_RESET_PIO+0x66>
		  case PB:
		  PIOB->PIO_CODR = 1<<pio;
   811dc:	4a0e      	ldr	r2, [pc, #56]	; (81218 <CPU2_D_RESET_PIO+0x78>)
   811de:	2101      	movs	r1, #1
   811e0:	683b      	ldr	r3, [r7, #0]
   811e2:	fa01 f303 	lsl.w	r3, r1, r3
   811e6:	6353      	str	r3, [r2, #52]	; 0x34
		  break;
   811e8:	e00d      	b.n	81206 <CPU2_D_RESET_PIO+0x66>
		  case PC:
		  PIOC->PIO_CODR = 1<<pio;
   811ea:	4a0c      	ldr	r2, [pc, #48]	; (8121c <CPU2_D_RESET_PIO+0x7c>)
   811ec:	2101      	movs	r1, #1
   811ee:	683b      	ldr	r3, [r7, #0]
   811f0:	fa01 f303 	lsl.w	r3, r1, r3
   811f4:	6353      	str	r3, [r2, #52]	; 0x34
		  break;
   811f6:	e006      	b.n	81206 <CPU2_D_RESET_PIO+0x66>
		  case PD:
		  PIOD->PIO_CODR = 1<<pio;
   811f8:	4a09      	ldr	r2, [pc, #36]	; (81220 <CPU2_D_RESET_PIO+0x80>)
   811fa:	2101      	movs	r1, #1
   811fc:	683b      	ldr	r3, [r7, #0]
   811fe:	fa01 f303 	lsl.w	r3, r1, r3
   81202:	6353      	str	r3, [r2, #52]	; 0x34
		  break;  
   81204:	bf00      	nop
	  }
	  return 0;
   81206:	2300      	movs	r3, #0
  }
   81208:	4618      	mov	r0, r3
   8120a:	370c      	adds	r7, #12
   8120c:	46bd      	mov	sp, r7
   8120e:	bc80      	pop	{r7}
   81210:	4770      	bx	lr
   81212:	bf00      	nop
   81214:	400e0e00 	.word	0x400e0e00
   81218:	400e1000 	.word	0x400e1000
   8121c:	400e1200 	.word	0x400e1200
   81220:	400e1400 	.word	0x400e1400

00081224 <CPU2_D_READ_PIO>:
  
  uint16_t CPU2_D_READ_PIO( pio_type peripheral,uint32_t pio)
  {
   81224:	b480      	push	{r7}
   81226:	b085      	sub	sp, #20
   81228:	af00      	add	r7, sp, #0
   8122a:	6078      	str	r0, [r7, #4]
   8122c:	6039      	str	r1, [r7, #0]
	  uint16_t ret_val=0;
   8122e:	2300      	movs	r3, #0
   81230:	81fb      	strh	r3, [r7, #14]
	  switch (peripheral)
   81232:	687b      	ldr	r3, [r7, #4]
   81234:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   81238:	d01a      	beq.n	81270 <CPU2_D_READ_PIO+0x4c>
   8123a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   8123e:	d803      	bhi.n	81248 <CPU2_D_READ_PIO+0x24>
   81240:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   81244:	d007      	beq.n	81256 <CPU2_D_READ_PIO+0x32>
   81246:	e03c      	b.n	812c2 <CPU2_D_READ_PIO+0x9e>
   81248:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
   8124c:	d01d      	beq.n	8128a <CPU2_D_READ_PIO+0x66>
   8124e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   81252:	d029      	beq.n	812a8 <CPU2_D_READ_PIO+0x84>
   81254:	e035      	b.n	812c2 <CPU2_D_READ_PIO+0x9e>
	  {
		  case PA:
		  
		  if( (PIOA->PIO_PDSR & (1<<pio)) == 0)
   81256:	4b1d      	ldr	r3, [pc, #116]	; (812cc <CPU2_D_READ_PIO+0xa8>)
   81258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   8125a:	2101      	movs	r1, #1
   8125c:	683a      	ldr	r2, [r7, #0]
   8125e:	fa01 f202 	lsl.w	r2, r1, r2
   81262:	4013      	ands	r3, r2
   81264:	2b00      	cmp	r3, #0
   81266:	d101      	bne.n	8126c <CPU2_D_READ_PIO+0x48>
		  {
			  return 0;
   81268:	2300      	movs	r3, #0
   8126a:	e02a      	b.n	812c2 <CPU2_D_READ_PIO+0x9e>
		  }
		  else
		  {
			  return 1;
   8126c:	2301      	movs	r3, #1
   8126e:	e028      	b.n	812c2 <CPU2_D_READ_PIO+0x9e>
		  } 
		  break;
		  case PB:
		  if( (PIOB->PIO_PDSR & (1<<pio)) == 0)
   81270:	4b17      	ldr	r3, [pc, #92]	; (812d0 <CPU2_D_READ_PIO+0xac>)
   81272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   81274:	2101      	movs	r1, #1
   81276:	683a      	ldr	r2, [r7, #0]
   81278:	fa01 f202 	lsl.w	r2, r1, r2
   8127c:	4013      	ands	r3, r2
   8127e:	2b00      	cmp	r3, #0
   81280:	d101      	bne.n	81286 <CPU2_D_READ_PIO+0x62>
		  {
			  return 0;
   81282:	2300      	movs	r3, #0
   81284:	e01d      	b.n	812c2 <CPU2_D_READ_PIO+0x9e>
		  }
		  else
		  {
			  return 1;
   81286:	2301      	movs	r3, #1
   81288:	e01b      	b.n	812c2 <CPU2_D_READ_PIO+0x9e>
		  }
		  break;
		  case PC:
		  if( (PIOC->PIO_PDSR & (1<<pio)) == 0)
   8128a:	4b12      	ldr	r3, [pc, #72]	; (812d4 <CPU2_D_READ_PIO+0xb0>)
   8128c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   8128e:	2101      	movs	r1, #1
   81290:	683a      	ldr	r2, [r7, #0]
   81292:	fa01 f202 	lsl.w	r2, r1, r2
   81296:	4013      	ands	r3, r2
   81298:	2b00      	cmp	r3, #0
   8129a:	d101      	bne.n	812a0 <CPU2_D_READ_PIO+0x7c>
		  {
			  return 0;
   8129c:	2300      	movs	r3, #0
   8129e:	e010      	b.n	812c2 <CPU2_D_READ_PIO+0x9e>
		  }
		  else
		  {
			 ret_val = 1;
   812a0:	2301      	movs	r3, #1
   812a2:	81fb      	strh	r3, [r7, #14]
			 return(ret_val);
   812a4:	89fb      	ldrh	r3, [r7, #14]
   812a6:	e00c      	b.n	812c2 <CPU2_D_READ_PIO+0x9e>
			 
		  }
		  break;
		  case PD:
		  if( (PIOD->PIO_PDSR & (1<<pio)) == 0)
   812a8:	4b0b      	ldr	r3, [pc, #44]	; (812d8 <CPU2_D_READ_PIO+0xb4>)
   812aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   812ac:	2101      	movs	r1, #1
   812ae:	683a      	ldr	r2, [r7, #0]
   812b0:	fa01 f202 	lsl.w	r2, r1, r2
   812b4:	4013      	ands	r3, r2
   812b6:	2b00      	cmp	r3, #0
   812b8:	d101      	bne.n	812be <CPU2_D_READ_PIO+0x9a>
		  {
			  return 0;
   812ba:	2300      	movs	r3, #0
   812bc:	e001      	b.n	812c2 <CPU2_D_READ_PIO+0x9e>
		  }
		  else
		  {
			  return 1;
   812be:	2301      	movs	r3, #1
   812c0:	e7ff      	b.n	812c2 <CPU2_D_READ_PIO+0x9e>
		  }
		  break; 
	  }
   812c2:	4618      	mov	r0, r3
   812c4:	3714      	adds	r7, #20
   812c6:	46bd      	mov	sp, r7
   812c8:	bc80      	pop	{r7}
   812ca:	4770      	bx	lr
   812cc:	400e0e00 	.word	0x400e0e00
   812d0:	400e1000 	.word	0x400e1000
   812d4:	400e1200 	.word	0x400e1200
   812d8:	400e1400 	.word	0x400e1400

000812dc <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   812dc:	b480      	push	{r7}
   812de:	b083      	sub	sp, #12
   812e0:	af00      	add	r7, sp, #0
   812e2:	4603      	mov	r3, r0
   812e4:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   812e6:	4908      	ldr	r1, [pc, #32]	; (81308 <NVIC_EnableIRQ+0x2c>)
   812e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
   812ec:	095b      	lsrs	r3, r3, #5
   812ee:	79fa      	ldrb	r2, [r7, #7]
   812f0:	f002 021f 	and.w	r2, r2, #31
   812f4:	2001      	movs	r0, #1
   812f6:	fa00 f202 	lsl.w	r2, r0, r2
   812fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   812fe:	bf00      	nop
   81300:	370c      	adds	r7, #12
   81302:	46bd      	mov	sp, r7
   81304:	bc80      	pop	{r7}
   81306:	4770      	bx	lr
   81308:	e000e100 	.word	0xe000e100

0008130c <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
   8130c:	b480      	push	{r7}
   8130e:	b083      	sub	sp, #12
   81310:	af00      	add	r7, sp, #0
   81312:	4603      	mov	r3, r0
   81314:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   81316:	4909      	ldr	r1, [pc, #36]	; (8133c <NVIC_DisableIRQ+0x30>)
   81318:	f997 3007 	ldrsb.w	r3, [r7, #7]
   8131c:	095b      	lsrs	r3, r3, #5
   8131e:	79fa      	ldrb	r2, [r7, #7]
   81320:	f002 021f 	and.w	r2, r2, #31
   81324:	2001      	movs	r0, #1
   81326:	fa00 f202 	lsl.w	r2, r0, r2
   8132a:	3320      	adds	r3, #32
   8132c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   81330:	bf00      	nop
   81332:	370c      	adds	r7, #12
   81334:	46bd      	mov	sp, r7
   81336:	bc80      	pop	{r7}
   81338:	4770      	bx	lr
   8133a:	bf00      	nop
   8133c:	e000e100 	.word	0xe000e100

00081340 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
   81340:	b480      	push	{r7}
   81342:	b083      	sub	sp, #12
   81344:	af00      	add	r7, sp, #0
   81346:	4603      	mov	r3, r0
   81348:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   8134a:	4909      	ldr	r1, [pc, #36]	; (81370 <NVIC_ClearPendingIRQ+0x30>)
   8134c:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81350:	095b      	lsrs	r3, r3, #5
   81352:	79fa      	ldrb	r2, [r7, #7]
   81354:	f002 021f 	and.w	r2, r2, #31
   81358:	2001      	movs	r0, #1
   8135a:	fa00 f202 	lsl.w	r2, r0, r2
   8135e:	3360      	adds	r3, #96	; 0x60
   81360:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   81364:	bf00      	nop
   81366:	370c      	adds	r7, #12
   81368:	46bd      	mov	sp, r7
   8136a:	bc80      	pop	{r7}
   8136c:	4770      	bx	lr
   8136e:	bf00      	nop
   81370:	e000e100 	.word	0xe000e100

00081374 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   81374:	b480      	push	{r7}
   81376:	b083      	sub	sp, #12
   81378:	af00      	add	r7, sp, #0
   8137a:	4603      	mov	r3, r0
   8137c:	6039      	str	r1, [r7, #0]
   8137e:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   81380:	f997 3007 	ldrsb.w	r3, [r7, #7]
   81384:	2b00      	cmp	r3, #0
   81386:	da0b      	bge.n	813a0 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   81388:	490d      	ldr	r1, [pc, #52]	; (813c0 <NVIC_SetPriority+0x4c>)
   8138a:	79fb      	ldrb	r3, [r7, #7]
   8138c:	f003 030f 	and.w	r3, r3, #15
   81390:	3b04      	subs	r3, #4
   81392:	683a      	ldr	r2, [r7, #0]
   81394:	b2d2      	uxtb	r2, r2
   81396:	0112      	lsls	r2, r2, #4
   81398:	b2d2      	uxtb	r2, r2
   8139a:	440b      	add	r3, r1
   8139c:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
   8139e:	e009      	b.n	813b4 <NVIC_SetPriority+0x40>
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   813a0:	4908      	ldr	r1, [pc, #32]	; (813c4 <NVIC_SetPriority+0x50>)
   813a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
   813a6:	683a      	ldr	r2, [r7, #0]
   813a8:	b2d2      	uxtb	r2, r2
   813aa:	0112      	lsls	r2, r2, #4
   813ac:	b2d2      	uxtb	r2, r2
   813ae:	440b      	add	r3, r1
   813b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   813b4:	bf00      	nop
   813b6:	370c      	adds	r7, #12
   813b8:	46bd      	mov	sp, r7
   813ba:	bc80      	pop	{r7}
   813bc:	4770      	bx	lr
   813be:	bf00      	nop
   813c0:	e000ed00 	.word	0xe000ed00
   813c4:	e000e100 	.word	0xe000e100

000813c8 <CPU2_D_INIT_INT>:
#include "INT.h"

#define BOARD_TWI_IRQn          TWI0_IRQn

void CPU2_D_INIT_INT()
{
   813c8:	b580      	push	{r7, lr}
   813ca:	af00      	add	r7, sp, #0
	
	NVIC_DisableIRQ(BOARD_TWI_IRQn);
   813cc:	2016      	movs	r0, #22
   813ce:	4b29      	ldr	r3, [pc, #164]	; (81474 <CPU2_D_INIT_INT+0xac>)
   813d0:	4798      	blx	r3
	NVIC_ClearPendingIRQ(BOARD_TWI_IRQn);
   813d2:	2016      	movs	r0, #22
   813d4:	4b28      	ldr	r3, [pc, #160]	; (81478 <CPU2_D_INIT_INT+0xb0>)
   813d6:	4798      	blx	r3
	NVIC_SetPriority(BOARD_TWI_IRQn, 0);
   813d8:	2100      	movs	r1, #0
   813da:	2016      	movs	r0, #22
   813dc:	4b27      	ldr	r3, [pc, #156]	; (8147c <CPU2_D_INIT_INT+0xb4>)
   813de:	4798      	blx	r3
	NVIC_EnableIRQ(BOARD_TWI_IRQn);
   813e0:	2016      	movs	r0, #22
   813e2:	4b27      	ldr	r3, [pc, #156]	; (81480 <CPU2_D_INIT_INT+0xb8>)
   813e4:	4798      	blx	r3
	
	NVIC_DisableIRQ(UART_IRQn);
   813e6:	2008      	movs	r0, #8
   813e8:	4b22      	ldr	r3, [pc, #136]	; (81474 <CPU2_D_INIT_INT+0xac>)
   813ea:	4798      	blx	r3
	NVIC_ClearPendingIRQ(UART_IRQn);
   813ec:	2008      	movs	r0, #8
   813ee:	4b22      	ldr	r3, [pc, #136]	; (81478 <CPU2_D_INIT_INT+0xb0>)
   813f0:	4798      	blx	r3
	NVIC_SetPriority(UART_IRQn,0);
   813f2:	2100      	movs	r1, #0
   813f4:	2008      	movs	r0, #8
   813f6:	4b21      	ldr	r3, [pc, #132]	; (8147c <CPU2_D_INIT_INT+0xb4>)
   813f8:	4798      	blx	r3
	NVIC_EnableIRQ(UART_IRQn);
   813fa:	2008      	movs	r0, #8
   813fc:	4b20      	ldr	r3, [pc, #128]	; (81480 <CPU2_D_INIT_INT+0xb8>)
   813fe:	4798      	blx	r3
	uart_enable_interrupt(UART,UART_SR_RXRDY);
   81400:	2101      	movs	r1, #1
   81402:	4820      	ldr	r0, [pc, #128]	; (81484 <CPU2_D_INIT_INT+0xbc>)
   81404:	4b20      	ldr	r3, [pc, #128]	; (81488 <CPU2_D_INIT_INT+0xc0>)
   81406:	4798      	blx	r3
		
	NVIC_DisableIRQ(TC0_IRQn);
   81408:	201b      	movs	r0, #27
   8140a:	4b1a      	ldr	r3, [pc, #104]	; (81474 <CPU2_D_INIT_INT+0xac>)
   8140c:	4798      	blx	r3
	NVIC_ClearPendingIRQ(TC0_IRQn);
   8140e:	201b      	movs	r0, #27
   81410:	4b19      	ldr	r3, [pc, #100]	; (81478 <CPU2_D_INIT_INT+0xb0>)
   81412:	4798      	blx	r3
	NVIC_SetPriority(TC0_IRQn,0);
   81414:	2100      	movs	r1, #0
   81416:	201b      	movs	r0, #27
   81418:	4b18      	ldr	r3, [pc, #96]	; (8147c <CPU2_D_INIT_INT+0xb4>)
   8141a:	4798      	blx	r3
	NVIC_EnableIRQ(TC0_IRQn);
   8141c:	201b      	movs	r0, #27
   8141e:	4b18      	ldr	r3, [pc, #96]	; (81480 <CPU2_D_INIT_INT+0xb8>)
   81420:	4798      	blx	r3

	NVIC_DisableIRQ(TC1_IRQn);
   81422:	201c      	movs	r0, #28
   81424:	4b13      	ldr	r3, [pc, #76]	; (81474 <CPU2_D_INIT_INT+0xac>)
   81426:	4798      	blx	r3
	NVIC_ClearPendingIRQ(TC1_IRQn);
   81428:	201c      	movs	r0, #28
   8142a:	4b13      	ldr	r3, [pc, #76]	; (81478 <CPU2_D_INIT_INT+0xb0>)
   8142c:	4798      	blx	r3
	NVIC_SetPriority(TC1_IRQn,0);
   8142e:	2100      	movs	r1, #0
   81430:	201c      	movs	r0, #28
   81432:	4b12      	ldr	r3, [pc, #72]	; (8147c <CPU2_D_INIT_INT+0xb4>)
   81434:	4798      	blx	r3
	NVIC_EnableIRQ(TC1_IRQn);
   81436:	201c      	movs	r0, #28
   81438:	4b11      	ldr	r3, [pc, #68]	; (81480 <CPU2_D_INIT_INT+0xb8>)
   8143a:	4798      	blx	r3
// 	NVIC_DisableIRQ(TC2_IRQn);
// 	NVIC_ClearPendingIRQ(TC2_IRQn);
// 	NVIC_SetPriority(TC2_IRQn,0);
// 	NVIC_EnableIRQ(TC2_IRQn);
	
	NVIC_DisableIRQ(TC3_IRQn);
   8143c:	201e      	movs	r0, #30
   8143e:	4b0d      	ldr	r3, [pc, #52]	; (81474 <CPU2_D_INIT_INT+0xac>)
   81440:	4798      	blx	r3
	NVIC_ClearPendingIRQ(TC3_IRQn);
   81442:	201e      	movs	r0, #30
   81444:	4b0c      	ldr	r3, [pc, #48]	; (81478 <CPU2_D_INIT_INT+0xb0>)
   81446:	4798      	blx	r3
	NVIC_SetPriority(TC3_IRQn,0);
   81448:	2100      	movs	r1, #0
   8144a:	201e      	movs	r0, #30
   8144c:	4b0b      	ldr	r3, [pc, #44]	; (8147c <CPU2_D_INIT_INT+0xb4>)
   8144e:	4798      	blx	r3
	NVIC_EnableIRQ(TC3_IRQn);
   81450:	201e      	movs	r0, #30
   81452:	4b0b      	ldr	r3, [pc, #44]	; (81480 <CPU2_D_INIT_INT+0xb8>)
   81454:	4798      	blx	r3
	
	NVIC_DisableIRQ(TC6_IRQn);
   81456:	2021      	movs	r0, #33	; 0x21
   81458:	4b06      	ldr	r3, [pc, #24]	; (81474 <CPU2_D_INIT_INT+0xac>)
   8145a:	4798      	blx	r3
	NVIC_ClearPendingIRQ(TC6_IRQn);
   8145c:	2021      	movs	r0, #33	; 0x21
   8145e:	4b06      	ldr	r3, [pc, #24]	; (81478 <CPU2_D_INIT_INT+0xb0>)
   81460:	4798      	blx	r3
	NVIC_SetPriority(TC6_IRQn,0);
   81462:	2100      	movs	r1, #0
   81464:	2021      	movs	r0, #33	; 0x21
   81466:	4b05      	ldr	r3, [pc, #20]	; (8147c <CPU2_D_INIT_INT+0xb4>)
   81468:	4798      	blx	r3
	NVIC_EnableIRQ(TC6_IRQn);
   8146a:	2021      	movs	r0, #33	; 0x21
   8146c:	4b04      	ldr	r3, [pc, #16]	; (81480 <CPU2_D_INIT_INT+0xb8>)
   8146e:	4798      	blx	r3
	
   81470:	bf00      	nop
   81472:	bd80      	pop	{r7, pc}
   81474:	0008130d 	.word	0x0008130d
   81478:	00081341 	.word	0x00081341
   8147c:	00081375 	.word	0x00081375
   81480:	000812dd 	.word	0x000812dd
   81484:	400e0800 	.word	0x400e0800
   81488:	00082115 	.word	0x00082115

0008148c <CPU2_D_INIT_PWM>:
 *  Author: wid7
 */ 
#include "PWM.h"

void CPU2_D_INIT_PWM()
{
   8148c:	b480      	push	{r7}
   8148e:	af00      	add	r7, sp, #0
	PWM->PWM_WPCR = 0x50574D00;
   81490:	4b0d      	ldr	r3, [pc, #52]	; (814c8 <CPU2_D_INIT_PWM+0x3c>)
   81492:	4a0e      	ldr	r2, [pc, #56]	; (814cc <CPU2_D_INIT_PWM+0x40>)
   81494:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	
	PWM->PWM_CH_NUM[4].PWM_CMR = PWM_CMR_CPOL|PWM_CMR_CPRE_MCK_DIV_32|PWM_CMR_CES|PWM_CMR_DTE|PWM_CMR_DTHI|PWM_CMR_DTLI;
   81498:	4b0b      	ldr	r3, [pc, #44]	; (814c8 <CPU2_D_INIT_PWM+0x3c>)
   8149a:	4a0d      	ldr	r2, [pc, #52]	; (814d0 <CPU2_D_INIT_PWM+0x44>)
   8149c:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280

	PWM->PWM_DIS = 0x000000FF;
   814a0:	4b09      	ldr	r3, [pc, #36]	; (814c8 <CPU2_D_INIT_PWM+0x3c>)
   814a2:	22ff      	movs	r2, #255	; 0xff
   814a4:	609a      	str	r2, [r3, #8]
	
	PWM->PWM_CH_NUM[4].PWM_CPRD = 0x00000A41;
   814a6:	4b08      	ldr	r3, [pc, #32]	; (814c8 <CPU2_D_INIT_PWM+0x3c>)
   814a8:	f640 2241 	movw	r2, #2625	; 0xa41
   814ac:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
	PWM->PWM_CH_NUM[4].PWM_CDTY = 0x00000397;
   814b0:	4b05      	ldr	r3, [pc, #20]	; (814c8 <CPU2_D_INIT_PWM+0x3c>)
   814b2:	f240 3297 	movw	r2, #919	; 0x397
   814b6:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284
	
	PWM->PWM_ENA = 0x00000010;
   814ba:	4b03      	ldr	r3, [pc, #12]	; (814c8 <CPU2_D_INIT_PWM+0x3c>)
   814bc:	2210      	movs	r2, #16
   814be:	605a      	str	r2, [r3, #4]
}
   814c0:	bf00      	nop
   814c2:	46bd      	mov	sp, r7
   814c4:	bc80      	pop	{r7}
   814c6:	4770      	bx	lr
   814c8:	40094000 	.word	0x40094000
   814cc:	50574d00 	.word	0x50574d00
   814d0:	00070605 	.word	0x00070605

000814d4 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
   814d4:	b480      	push	{r7}
   814d6:	b083      	sub	sp, #12
   814d8:	af00      	add	r7, sp, #0
   814da:	4603      	mov	r3, r0
   814dc:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   814de:	4909      	ldr	r1, [pc, #36]	; (81504 <NVIC_ClearPendingIRQ+0x30>)
   814e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
   814e4:	095b      	lsrs	r3, r3, #5
   814e6:	79fa      	ldrb	r2, [r7, #7]
   814e8:	f002 021f 	and.w	r2, r2, #31
   814ec:	2001      	movs	r0, #1
   814ee:	fa00 f202 	lsl.w	r2, r0, r2
   814f2:	3360      	adds	r3, #96	; 0x60
   814f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   814f8:	bf00      	nop
   814fa:	370c      	adds	r7, #12
   814fc:	46bd      	mov	sp, r7
   814fe:	bc80      	pop	{r7}
   81500:	4770      	bx	lr
   81502:	bf00      	nop
   81504:	e000e100 	.word	0xe000e100

00081508 <TC0_Handler>:
volatile uint32_t i2c_counter = 0 ;
extern bool sv_acc_flag, sv_end_flag, sv_rxrdy_flag;
volatile uint8_t spi_count=0;
uint32_t time_tick = 0;
void TC0_Handler()
{
   81508:	b580      	push	{r7, lr}
   8150a:	af00      	add	r7, sp, #0
	spi_count++;
   8150c:	4b13      	ldr	r3, [pc, #76]	; (8155c <TC0_Handler+0x54>)
   8150e:	781b      	ldrb	r3, [r3, #0]
   81510:	b2db      	uxtb	r3, r3
   81512:	3301      	adds	r3, #1
   81514:	b2da      	uxtb	r2, r3
   81516:	4b11      	ldr	r3, [pc, #68]	; (8155c <TC0_Handler+0x54>)
   81518:	701a      	strb	r2, [r3, #0]
	printf("count = %d\n",fedbck_cnt);
   8151a:	4b11      	ldr	r3, [pc, #68]	; (81560 <TC0_Handler+0x58>)
   8151c:	681b      	ldr	r3, [r3, #0]
   8151e:	4619      	mov	r1, r3
   81520:	4810      	ldr	r0, [pc, #64]	; (81564 <TC0_Handler+0x5c>)
   81522:	4b11      	ldr	r3, [pc, #68]	; (81568 <TC0_Handler+0x60>)
   81524:	4798      	blx	r3
	fedbck_cnt1=fedbck_cnt;
   81526:	4b0e      	ldr	r3, [pc, #56]	; (81560 <TC0_Handler+0x58>)
   81528:	681b      	ldr	r3, [r3, #0]
   8152a:	4a10      	ldr	r2, [pc, #64]	; (8156c <TC0_Handler+0x64>)
   8152c:	6013      	str	r3, [r2, #0]
	
	if (modify==1)                                   // Timer interrupt every 10 sec
   8152e:	4b10      	ldr	r3, [pc, #64]	; (81570 <TC0_Handler+0x68>)
   81530:	781b      	ldrb	r3, [r3, #0]
   81532:	b2db      	uxtb	r3, r3
   81534:	2b01      	cmp	r3, #1
   81536:	d10a      	bne.n	8154e <TC0_Handler+0x46>
	{
		count_2++;
   81538:	4b0e      	ldr	r3, [pc, #56]	; (81574 <TC0_Handler+0x6c>)
   8153a:	681b      	ldr	r3, [r3, #0]
   8153c:	3301      	adds	r3, #1
   8153e:	4a0d      	ldr	r2, [pc, #52]	; (81574 <TC0_Handler+0x6c>)
   81540:	6013      	str	r3, [r2, #0]
		flag_1=1;
   81542:	4b0d      	ldr	r3, [pc, #52]	; (81578 <TC0_Handler+0x70>)
   81544:	2201      	movs	r2, #1
   81546:	701a      	strb	r2, [r3, #0]
		fedbck_cnt=0;
   81548:	4b05      	ldr	r3, [pc, #20]	; (81560 <TC0_Handler+0x58>)
   8154a:	2200      	movs	r2, #0
   8154c:	601a      	str	r2, [r3, #0]
	{
		count = 0;
		PIOD->PIO_ODSR = array[count].A;
		PIOC->PIO_ODSR = array[count].B;
	}*/
	if ((tc_get_status(TC0, 0) & TC_SR_CPCS) == TC_SR_CPCS)
   8154e:	2100      	movs	r1, #0
   81550:	480a      	ldr	r0, [pc, #40]	; (8157c <TC0_Handler+0x74>)
   81552:	4b0b      	ldr	r3, [pc, #44]	; (81580 <TC0_Handler+0x78>)
   81554:	4798      	blx	r3
	{
		
	}
}
   81556:	bf00      	nop
   81558:	bd80      	pop	{r7, pc}
   8155a:	bf00      	nop
   8155c:	20070964 	.word	0x20070964
   81560:	20070958 	.word	0x20070958
   81564:	000875b4 	.word	0x000875b4
   81568:	00084669 	.word	0x00084669
   8156c:	2007095c 	.word	0x2007095c
   81570:	2007096f 	.word	0x2007096f
   81574:	20070960 	.word	0x20070960
   81578:	20070954 	.word	0x20070954
   8157c:	40080000 	.word	0x40080000
   81580:	00082091 	.word	0x00082091

00081584 <TC1_Handler>:

void TC1_Handler()
{
   81584:	b598      	push	{r3, r4, r7, lr}
   81586:	af00      	add	r7, sp, #0
	cnt++;
   81588:	4b29      	ldr	r3, [pc, #164]	; (81630 <TC1_Handler+0xac>)
   8158a:	681b      	ldr	r3, [r3, #0]
   8158c:	3301      	adds	r3, #1
   8158e:	4a28      	ldr	r2, [pc, #160]	; (81630 <TC1_Handler+0xac>)
   81590:	6013      	str	r3, [r2, #0]
	if (mode == 1)
   81592:	4b28      	ldr	r3, [pc, #160]	; (81634 <TC1_Handler+0xb0>)
   81594:	681b      	ldr	r3, [r3, #0]
   81596:	2b01      	cmp	r3, #1
   81598:	d122      	bne.n	815e0 <TC1_Handler+0x5c>
	{
		if ( rc == default_speed)
   8159a:	4b27      	ldr	r3, [pc, #156]	; (81638 <TC1_Handler+0xb4>)
   8159c:	681a      	ldr	r2, [r3, #0]
   8159e:	4b27      	ldr	r3, [pc, #156]	; (8163c <TC1_Handler+0xb8>)
   815a0:	681b      	ldr	r3, [r3, #0]
   815a2:	429a      	cmp	r2, r3
   815a4:	d104      	bne.n	815b0 <TC1_Handler+0x2c>
		{
		//printf("timer stop\n");
			tc_stop(TC0,1);                                   // Timer interrupt based on RC value
   815a6:	2101      	movs	r1, #1
   815a8:	4825      	ldr	r0, [pc, #148]	; (81640 <TC1_Handler+0xbc>)
   815aa:	4b26      	ldr	r3, [pc, #152]	; (81644 <TC1_Handler+0xc0>)
   815ac:	4798      	blx	r3
   815ae:	e039      	b.n	81624 <TC1_Handler+0xa0>
		}
		else
		{
			if (cnt == 2)
   815b0:	4b1f      	ldr	r3, [pc, #124]	; (81630 <TC1_Handler+0xac>)
   815b2:	681b      	ldr	r3, [r3, #0]
   815b4:	2b02      	cmp	r3, #2
   815b6:	d135      	bne.n	81624 <TC1_Handler+0xa0>
			{
				//printf("temer2\n");
				rc = rc-1;
   815b8:	4b1f      	ldr	r3, [pc, #124]	; (81638 <TC1_Handler+0xb4>)
   815ba:	681b      	ldr	r3, [r3, #0]
   815bc:	3b01      	subs	r3, #1
   815be:	4a1e      	ldr	r2, [pc, #120]	; (81638 <TC1_Handler+0xb4>)
   815c0:	6013      	str	r3, [r2, #0]
				tc_stop(TC0,0);
   815c2:	2100      	movs	r1, #0
   815c4:	481e      	ldr	r0, [pc, #120]	; (81640 <TC1_Handler+0xbc>)
   815c6:	4b1f      	ldr	r3, [pc, #124]	; (81644 <TC1_Handler+0xc0>)
   815c8:	4798      	blx	r3
				//tc_write_rc(TC0,0,rc);
				startTimer1(TC0,0,TC0_IRQn,rc);
   815ca:	4b1b      	ldr	r3, [pc, #108]	; (81638 <TC1_Handler+0xb4>)
   815cc:	681b      	ldr	r3, [r3, #0]
   815ce:	221b      	movs	r2, #27
   815d0:	2100      	movs	r1, #0
   815d2:	481b      	ldr	r0, [pc, #108]	; (81640 <TC1_Handler+0xbc>)
   815d4:	4c1c      	ldr	r4, [pc, #112]	; (81648 <TC1_Handler+0xc4>)
   815d6:	47a0      	blx	r4
				cnt = 0;
   815d8:	4b15      	ldr	r3, [pc, #84]	; (81630 <TC1_Handler+0xac>)
   815da:	2200      	movs	r2, #0
   815dc:	601a      	str	r2, [r3, #0]
   815de:	e021      	b.n	81624 <TC1_Handler+0xa0>
			}
		}
	}
	else if (mode == 0)
   815e0:	4b14      	ldr	r3, [pc, #80]	; (81634 <TC1_Handler+0xb0>)
   815e2:	681b      	ldr	r3, [r3, #0]
   815e4:	2b00      	cmp	r3, #0
   815e6:	d11d      	bne.n	81624 <TC1_Handler+0xa0>
	{
		if ( rc == default_speed)
   815e8:	4b13      	ldr	r3, [pc, #76]	; (81638 <TC1_Handler+0xb4>)
   815ea:	681a      	ldr	r2, [r3, #0]
   815ec:	4b13      	ldr	r3, [pc, #76]	; (8163c <TC1_Handler+0xb8>)
   815ee:	681b      	ldr	r3, [r3, #0]
   815f0:	429a      	cmp	r2, r3
   815f2:	d104      	bne.n	815fe <TC1_Handler+0x7a>
		{
			tc_stop(TC0,1);
   815f4:	2101      	movs	r1, #1
   815f6:	4812      	ldr	r0, [pc, #72]	; (81640 <TC1_Handler+0xbc>)
   815f8:	4b12      	ldr	r3, [pc, #72]	; (81644 <TC1_Handler+0xc0>)
   815fa:	4798      	blx	r3
   815fc:	e012      	b.n	81624 <TC1_Handler+0xa0>
		}
		else
		{
			if (cnt == 2)
   815fe:	4b0c      	ldr	r3, [pc, #48]	; (81630 <TC1_Handler+0xac>)
   81600:	681b      	ldr	r3, [r3, #0]
   81602:	2b02      	cmp	r3, #2
   81604:	d10e      	bne.n	81624 <TC1_Handler+0xa0>
			{
				
				rc = rc+1;
   81606:	4b0c      	ldr	r3, [pc, #48]	; (81638 <TC1_Handler+0xb4>)
   81608:	681b      	ldr	r3, [r3, #0]
   8160a:	3301      	adds	r3, #1
   8160c:	4a0a      	ldr	r2, [pc, #40]	; (81638 <TC1_Handler+0xb4>)
   8160e:	6013      	str	r3, [r2, #0]
				tc_write_rc(TC0,0,rc);
   81610:	4b09      	ldr	r3, [pc, #36]	; (81638 <TC1_Handler+0xb4>)
   81612:	681b      	ldr	r3, [r3, #0]
   81614:	461a      	mov	r2, r3
   81616:	2100      	movs	r1, #0
   81618:	4809      	ldr	r0, [pc, #36]	; (81640 <TC1_Handler+0xbc>)
   8161a:	4b0c      	ldr	r3, [pc, #48]	; (8164c <TC1_Handler+0xc8>)
   8161c:	4798      	blx	r3
				cnt = 0;
   8161e:	4b04      	ldr	r3, [pc, #16]	; (81630 <TC1_Handler+0xac>)
   81620:	2200      	movs	r2, #0
   81622:	601a      	str	r2, [r3, #0]
			}
		}
	}
	if ((tc_get_status(TC0, 1) & TC_SR_CPCS) == TC_SR_CPCS)
   81624:	2101      	movs	r1, #1
   81626:	4806      	ldr	r0, [pc, #24]	; (81640 <TC1_Handler+0xbc>)
   81628:	4b09      	ldr	r3, [pc, #36]	; (81650 <TC1_Handler+0xcc>)
   8162a:	4798      	blx	r3
	{
		
	}
}
   8162c:	bf00      	nop
   8162e:	bd98      	pop	{r3, r4, r7, pc}
   81630:	20070e80 	.word	0x20070e80
   81634:	20070eb0 	.word	0x20070eb0
   81638:	20070e94 	.word	0x20070e94
   8163c:	20070004 	.word	0x20070004
   81640:	40080000 	.word	0x40080000
   81644:	00082025 	.word	0x00082025
   81648:	00081b45 	.word	0x00081b45
   8164c:	00082045 	.word	0x00082045
   81650:	00082091 	.word	0x00082091

00081654 <TC2_Handler>:

void TC2_Handler()
{
   81654:	b480      	push	{r7}
   81656:	af00      	add	r7, sp, #0
	
	
	if(time_tick++ > 65000)
   81658:	4b07      	ldr	r3, [pc, #28]	; (81678 <TC2_Handler+0x24>)
   8165a:	681b      	ldr	r3, [r3, #0]
   8165c:	1c5a      	adds	r2, r3, #1
   8165e:	4906      	ldr	r1, [pc, #24]	; (81678 <TC2_Handler+0x24>)
   81660:	600a      	str	r2, [r1, #0]
   81662:	f64f 52e8 	movw	r2, #65000	; 0xfde8
   81666:	4293      	cmp	r3, r2
   81668:	d902      	bls.n	81670 <TC2_Handler+0x1c>
	{
		time_tick = 0;
   8166a:	4b03      	ldr	r3, [pc, #12]	; (81678 <TC2_Handler+0x24>)
   8166c:	2200      	movs	r2, #0
   8166e:	601a      	str	r2, [r3, #0]
// 	}
// 	if ((tc_get_status(TC0, 2) & TC_SR_CPCS) == TC_SR_CPCS)
// 	{
// 		
// 	}
}
   81670:	bf00      	nop
   81672:	46bd      	mov	sp, r7
   81674:	bc80      	pop	{r7}
   81676:	4770      	bx	lr
   81678:	20070950 	.word	0x20070950

0008167c <TC6_Handler>:
void TC6_Handler()
{
   8167c:	b580      	push	{r7, lr}
   8167e:	b086      	sub	sp, #24
   81680:	af00      	add	r7, sp, #0
	NVIC_ClearPendingIRQ(TC6_IRQn);
   81682:	2021      	movs	r0, #33	; 0x21
   81684:	4b25      	ldr	r3, [pc, #148]	; (8171c <TC6_Handler+0xa0>)
   81686:	4798      	blx	r3
	uint32_t tick =0,tick_10 = 0,tick_50=0,tick_100=0,tick_500=0;                       // Timer interrupt every 1 msec
   81688:	2300      	movs	r3, #0
   8168a:	607b      	str	r3, [r7, #4]
   8168c:	2300      	movs	r3, #0
   8168e:	617b      	str	r3, [r7, #20]
   81690:	2300      	movs	r3, #0
   81692:	613b      	str	r3, [r7, #16]
   81694:	2300      	movs	r3, #0
   81696:	60fb      	str	r3, [r7, #12]
   81698:	2300      	movs	r3, #0
   8169a:	60bb      	str	r3, [r7, #8]
	tick++;
   8169c:	687b      	ldr	r3, [r7, #4]
   8169e:	3301      	adds	r3, #1
   816a0:	607b      	str	r3, [r7, #4]
	if (tick == 10)
   816a2:	687b      	ldr	r3, [r7, #4]
   816a4:	2b0a      	cmp	r3, #10
   816a6:	d107      	bne.n	816b8 <TC6_Handler+0x3c>
	{
		tick_10++;
   816a8:	697b      	ldr	r3, [r7, #20]
   816aa:	3301      	adds	r3, #1
   816ac:	617b      	str	r3, [r7, #20]
		tick = 0;
   816ae:	2300      	movs	r3, #0
   816b0:	607b      	str	r3, [r7, #4]
		time_tick = TICK_10MS;                                            
   816b2:	4b1b      	ldr	r3, [pc, #108]	; (81720 <TC6_Handler+0xa4>)
   816b4:	2200      	movs	r2, #0
   816b6:	601a      	str	r2, [r3, #0]
	}
	if (tick_10 == 5)
   816b8:	697b      	ldr	r3, [r7, #20]
   816ba:	2b05      	cmp	r3, #5
   816bc:	d107      	bne.n	816ce <TC6_Handler+0x52>
	{
		tick_50++;
   816be:	693b      	ldr	r3, [r7, #16]
   816c0:	3301      	adds	r3, #1
   816c2:	613b      	str	r3, [r7, #16]
		tick_10 = 0;
   816c4:	2300      	movs	r3, #0
   816c6:	617b      	str	r3, [r7, #20]
		time_tick = TICK_50MS;
   816c8:	4b15      	ldr	r3, [pc, #84]	; (81720 <TC6_Handler+0xa4>)
   816ca:	2201      	movs	r2, #1
   816cc:	601a      	str	r2, [r3, #0]
	}
	if (tick_50 == 2)
   816ce:	693b      	ldr	r3, [r7, #16]
   816d0:	2b02      	cmp	r3, #2
   816d2:	d107      	bne.n	816e4 <TC6_Handler+0x68>
	{
		tick_100++;
   816d4:	68fb      	ldr	r3, [r7, #12]
   816d6:	3301      	adds	r3, #1
   816d8:	60fb      	str	r3, [r7, #12]
		tick_50 = 0;
   816da:	2300      	movs	r3, #0
   816dc:	613b      	str	r3, [r7, #16]
		time_tick = TICK_100MS;
   816de:	4b10      	ldr	r3, [pc, #64]	; (81720 <TC6_Handler+0xa4>)
   816e0:	2202      	movs	r2, #2
   816e2:	601a      	str	r2, [r3, #0]
	}
	if (tick_100 == 5)
   816e4:	68fb      	ldr	r3, [r7, #12]
   816e6:	2b05      	cmp	r3, #5
   816e8:	d107      	bne.n	816fa <TC6_Handler+0x7e>
	{
		tick_500++;
   816ea:	68bb      	ldr	r3, [r7, #8]
   816ec:	3301      	adds	r3, #1
   816ee:	60bb      	str	r3, [r7, #8]
		tick_100 = 0;
   816f0:	2300      	movs	r3, #0
   816f2:	60fb      	str	r3, [r7, #12]
		time_tick = TICK_500MS;
   816f4:	4b0a      	ldr	r3, [pc, #40]	; (81720 <TC6_Handler+0xa4>)
   816f6:	2203      	movs	r2, #3
   816f8:	601a      	str	r2, [r3, #0]
	}
	if (tick_500 == 2)
   816fa:	68bb      	ldr	r3, [r7, #8]
   816fc:	2b02      	cmp	r3, #2
   816fe:	d104      	bne.n	8170a <TC6_Handler+0x8e>
	{
		tick_500 = 0;
   81700:	2300      	movs	r3, #0
   81702:	60bb      	str	r3, [r7, #8]
		time_tick = TICK_SEC;
   81704:	4b06      	ldr	r3, [pc, #24]	; (81720 <TC6_Handler+0xa4>)
   81706:	2204      	movs	r2, #4
   81708:	601a      	str	r2, [r3, #0]
	}
	
	if ((tc_get_status(TC2, 0) & TC_SR_CPCS) == TC_SR_CPCS)
   8170a:	2100      	movs	r1, #0
   8170c:	4805      	ldr	r0, [pc, #20]	; (81724 <TC6_Handler+0xa8>)
   8170e:	4b06      	ldr	r3, [pc, #24]	; (81728 <TC6_Handler+0xac>)
   81710:	4798      	blx	r3
	{
		//printf("i m in handler tc6\n");
	}
}
   81712:	bf00      	nop
   81714:	3718      	adds	r7, #24
   81716:	46bd      	mov	sp, r7
   81718:	bd80      	pop	{r7, pc}
   8171a:	bf00      	nop
   8171c:	000814d5 	.word	0x000814d5
   81720:	20070950 	.word	0x20070950
   81724:	40088000 	.word	0x40088000
   81728:	00082091 	.word	0x00082091

0008172c <CPU2_D_SET_PUMP>:

#include "D_SYS.h"
#include "Platform/Service/CPU2_S_interface.h"
extern uint32_t DUTY;
uint8_t CPU2_D_SET_PUMP(sv_pumptype id_pump)
{
   8172c:	b580      	push	{r7, lr}
   8172e:	b082      	sub	sp, #8
   81730:	af00      	add	r7, sp, #0
   81732:	4603      	mov	r3, r0
   81734:	71fb      	strb	r3, [r7, #7]
	switch (id_pump)
   81736:	79fb      	ldrb	r3, [r7, #7]
   81738:	2b01      	cmp	r3, #1
   8173a:	d000      	beq.n	8173e <CPU2_D_SET_PUMP+0x12>
			PWM->PWM_CH_NUM[4].PWM_CDTY = DUTY;			//35% duty cycle
			PWM->PWM_ENA =0x00000010;
			gpio_configure_pin(PIN_PWM_LED0_GPIO,PIN_PWM_LED0_FLAGS);
		break;
		default:
		break;
   8173c:	e012      	b.n	81764 <CPU2_D_SET_PUMP+0x38>
{
	switch (id_pump)
	{
		
		case BLOODPUMP: //BLOOD PUMP
			PWM->PWM_CH_NUM[4].PWM_CPRD = 0x00000A41;
   8173e:	4b0c      	ldr	r3, [pc, #48]	; (81770 <CPU2_D_SET_PUMP+0x44>)
   81740:	f640 2241 	movw	r2, #2625	; 0xa41
   81744:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
			PWM->PWM_CH_NUM[4].PWM_CDTY = DUTY;			//35% duty cycle
   81748:	4a09      	ldr	r2, [pc, #36]	; (81770 <CPU2_D_SET_PUMP+0x44>)
   8174a:	4b0a      	ldr	r3, [pc, #40]	; (81774 <CPU2_D_SET_PUMP+0x48>)
   8174c:	681b      	ldr	r3, [r3, #0]
   8174e:	f8c2 3284 	str.w	r3, [r2, #644]	; 0x284
			PWM->PWM_ENA =0x00000010;
   81752:	4b07      	ldr	r3, [pc, #28]	; (81770 <CPU2_D_SET_PUMP+0x44>)
   81754:	2210      	movs	r2, #16
   81756:	605a      	str	r2, [r3, #4]
			gpio_configure_pin(PIN_PWM_LED0_GPIO,PIN_PWM_LED0_FLAGS);
   81758:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8175c:	2055      	movs	r0, #85	; 0x55
   8175e:	4b06      	ldr	r3, [pc, #24]	; (81778 <CPU2_D_SET_PUMP+0x4c>)
   81760:	4798      	blx	r3
		break;
   81762:	bf00      	nop
		default:
		break;
	}
	
	return 0;
   81764:	2300      	movs	r3, #0
}
   81766:	4618      	mov	r0, r3
   81768:	3708      	adds	r7, #8
   8176a:	46bd      	mov	sp, r7
   8176c:	bd80      	pop	{r7, pc}
   8176e:	bf00      	nop
   81770:	40094000 	.word	0x40094000
   81774:	20070008 	.word	0x20070008
   81778:	00083891 	.word	0x00083891

0008177c <CPU2_D_RESET_PUMP>:

uint8_t CPU2_D_RESET_PUMP(sv_pumptype id_pump)
{
   8177c:	b480      	push	{r7}
   8177e:	b083      	sub	sp, #12
   81780:	af00      	add	r7, sp, #0
   81782:	4603      	mov	r3, r0
   81784:	71fb      	strb	r3, [r7, #7]
	switch (id_pump)
   81786:	79fb      	ldrb	r3, [r7, #7]
   81788:	2b01      	cmp	r3, #1
   8178a:	d000      	beq.n	8178e <CPU2_D_RESET_PUMP+0x12>
		case BLOODPUMP: //BLOOD PUMP
			PWM->PWM_DIS =0x00000010;
		break;
		
		default:
		break;
   8178c:	e003      	b.n	81796 <CPU2_D_RESET_PUMP+0x1a>
{
	switch (id_pump)
	{
		
		case BLOODPUMP: //BLOOD PUMP
			PWM->PWM_DIS =0x00000010;
   8178e:	4b05      	ldr	r3, [pc, #20]	; (817a4 <CPU2_D_RESET_PUMP+0x28>)
   81790:	2210      	movs	r2, #16
   81792:	609a      	str	r2, [r3, #8]
		break;
   81794:	bf00      	nop
		
		default:
		break;
		
	}
	return 0;
   81796:	2300      	movs	r3, #0
}
   81798:	4618      	mov	r0, r3
   8179a:	370c      	adds	r7, #12
   8179c:	46bd      	mov	sp, r7
   8179e:	bc80      	pop	{r7}
   817a0:	4770      	bx	lr
   817a2:	bf00      	nop
   817a4:	40094000 	.word	0x40094000

000817a8 <CPU2_D_SET_VALVE>:


uint8_t CPU2_D_SET_VALVE(sv_valvetype id_valve)
{
   817a8:	b580      	push	{r7, lr}
   817aa:	b084      	sub	sp, #16
   817ac:	af00      	add	r7, sp, #0
   817ae:	4603      	mov	r3, r0
   817b0:	71fb      	strb	r3, [r7, #7]
	uint32_t p_io = 0, peri;
   817b2:	2300      	movs	r3, #0
   817b4:	60fb      	str	r3, [r7, #12]
	switch(id_valve)
   817b6:	79fb      	ldrb	r3, [r7, #7]
   817b8:	3b01      	subs	r3, #1
   817ba:	2b07      	cmp	r3, #7
   817bc:	d836      	bhi.n	8182c <CPU2_D_SET_VALVE+0x84>
   817be:	a201      	add	r2, pc, #4	; (adr r2, 817c4 <CPU2_D_SET_VALVE+0x1c>)
   817c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   817c4:	000817e5 	.word	0x000817e5
   817c8:	000817fd 	.word	0x000817fd
   817cc:	0008182d 	.word	0x0008182d
   817d0:	0008182d 	.word	0x0008182d
   817d4:	000817f1 	.word	0x000817f1
   817d8:	00081809 	.word	0x00081809
   817dc:	00081815 	.word	0x00081815
   817e0:	00081821 	.word	0x00081821
	{
		
		case HEMO_IF4:
		p_io = 21;
   817e4:	2315      	movs	r3, #21
   817e6:	60fb      	str	r3, [r7, #12]
		peri = PA;
   817e8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   817ec:	60bb      	str	r3, [r7, #8]
		break;
   817ee:	e01e      	b.n	8182e <CPU2_D_SET_VALVE+0x86>
		
		case CLAMP_PWR:
		p_io = 13;
   817f0:	230d      	movs	r3, #13
   817f2:	60fb      	str	r3, [r7, #12]
		peri = PA;
   817f4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   817f8:	60bb      	str	r3, [r7, #8]
		break;
   817fa:	e018      	b.n	8182e <CPU2_D_SET_VALVE+0x86>
		
		case HEMO_IF3:
		p_io = 22;
   817fc:	2316      	movs	r3, #22
   817fe:	60fb      	str	r3, [r7, #12]
		peri = PA;
   81800:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   81804:	60bb      	str	r3, [r7, #8]
		break;
   81806:	e012      	b.n	8182e <CPU2_D_SET_VALVE+0x86>
		
		case BYPS_PWR:
		p_io = 11;
   81808:	230b      	movs	r3, #11
   8180a:	60fb      	str	r3, [r7, #12]
		peri = PA;
   8180c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   81810:	60bb      	str	r3, [r7, #8]
		break;
   81812:	e00c      	b.n	8182e <CPU2_D_SET_VALVE+0x86>
		
		case RUDNCY_INT:
		p_io = 23;
   81814:	2317      	movs	r3, #23
   81816:	60fb      	str	r3, [r7, #12]
		peri = PC;
   81818:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   8181c:	60bb      	str	r3, [r7, #8]
		break;
   8181e:	e006      	b.n	8182e <CPU2_D_SET_VALVE+0x86>
		
		case CPU_INT:
		p_io = 18;
   81820:	2312      	movs	r3, #18
   81822:	60fb      	str	r3, [r7, #12]
		peri = PC;
   81824:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   81828:	60bb      	str	r3, [r7, #8]
		break;
   8182a:	e000      	b.n	8182e <CPU2_D_SET_VALVE+0x86>
		
		default:
		break;
   8182c:	bf00      	nop
	}
	
	CPU2_D_SET_PIO(peri,p_io);
   8182e:	68f9      	ldr	r1, [r7, #12]
   81830:	68b8      	ldr	r0, [r7, #8]
   81832:	4b03      	ldr	r3, [pc, #12]	; (81840 <CPU2_D_SET_VALVE+0x98>)
   81834:	4798      	blx	r3
	return 0;
   81836:	2300      	movs	r3, #0
}
   81838:	4618      	mov	r0, r3
   8183a:	3710      	adds	r7, #16
   8183c:	46bd      	mov	sp, r7
   8183e:	bd80      	pop	{r7, pc}
   81840:	0008111d 	.word	0x0008111d

00081844 <CPU2_D_RESET_VALVE>:


uint8_t CPU2_D_RESET_VALVE(sv_valvetype id_valve)
{
   81844:	b580      	push	{r7, lr}
   81846:	b084      	sub	sp, #16
   81848:	af00      	add	r7, sp, #0
   8184a:	4603      	mov	r3, r0
   8184c:	71fb      	strb	r3, [r7, #7]
	uint32_t p_io = 0, peri;
   8184e:	2300      	movs	r3, #0
   81850:	60fb      	str	r3, [r7, #12]
	switch(id_valve)
   81852:	79fb      	ldrb	r3, [r7, #7]
   81854:	3b01      	subs	r3, #1
   81856:	2b07      	cmp	r3, #7
   81858:	d836      	bhi.n	818c8 <CPU2_D_RESET_VALVE+0x84>
   8185a:	a201      	add	r2, pc, #4	; (adr r2, 81860 <CPU2_D_RESET_VALVE+0x1c>)
   8185c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81860:	00081881 	.word	0x00081881
   81864:	00081899 	.word	0x00081899
   81868:	000818c9 	.word	0x000818c9
   8186c:	000818c9 	.word	0x000818c9
   81870:	0008188d 	.word	0x0008188d
   81874:	000818a5 	.word	0x000818a5
   81878:	000818b1 	.word	0x000818b1
   8187c:	000818bd 	.word	0x000818bd
// 		p_io = 10;
// 		peri = PD;
// 		break;
// 		
		case HEMO_IF4:
		p_io = 21;
   81880:	2315      	movs	r3, #21
   81882:	60fb      	str	r3, [r7, #12]
		peri = PA;
   81884:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   81888:	60bb      	str	r3, [r7, #8]
		break;
   8188a:	e01e      	b.n	818ca <CPU2_D_RESET_VALVE+0x86>
		
		case CLAMP_PWR:
		p_io = 13;
   8188c:	230d      	movs	r3, #13
   8188e:	60fb      	str	r3, [r7, #12]
		peri = PA;
   81890:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   81894:	60bb      	str	r3, [r7, #8]
		break;
   81896:	e018      	b.n	818ca <CPU2_D_RESET_VALVE+0x86>
		
		case HEMO_IF3:
		p_io = 22;
   81898:	2316      	movs	r3, #22
   8189a:	60fb      	str	r3, [r7, #12]
		peri = PA;
   8189c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   818a0:	60bb      	str	r3, [r7, #8]
 		break;
   818a2:	e012      	b.n	818ca <CPU2_D_RESET_VALVE+0x86>
		
		case BYPS_PWR:
		p_io = 11;
   818a4:	230b      	movs	r3, #11
   818a6:	60fb      	str	r3, [r7, #12]
		peri = PA;
   818a8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   818ac:	60bb      	str	r3, [r7, #8]
		break;
   818ae:	e00c      	b.n	818ca <CPU2_D_RESET_VALVE+0x86>
		
		case RUDNCY_INT:
		p_io = 23;
   818b0:	2317      	movs	r3, #23
   818b2:	60fb      	str	r3, [r7, #12]
		peri = PC;
   818b4:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   818b8:	60bb      	str	r3, [r7, #8]
		break;
   818ba:	e006      	b.n	818ca <CPU2_D_RESET_VALVE+0x86>
		
		case CPU_INT:
		p_io = 18;
   818bc:	2312      	movs	r3, #18
   818be:	60fb      	str	r3, [r7, #12]
		peri = PC;
   818c0:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   818c4:	60bb      	str	r3, [r7, #8]
		break;
   818c6:	e000      	b.n	818ca <CPU2_D_RESET_VALVE+0x86>
		
		default:
		break;
   818c8:	bf00      	nop
	}
	CPU2_D_RESET_PIO(peri,p_io);
   818ca:	68f9      	ldr	r1, [r7, #12]
   818cc:	68b8      	ldr	r0, [r7, #8]
   818ce:	4b03      	ldr	r3, [pc, #12]	; (818dc <CPU2_D_RESET_VALVE+0x98>)
   818d0:	4798      	blx	r3
	return 0;
   818d2:	2300      	movs	r3, #0
}
   818d4:	4618      	mov	r0, r3
   818d6:	3710      	adds	r7, #16
   818d8:	46bd      	mov	sp, r7
   818da:	bd80      	pop	{r7, pc}
   818dc:	000811a1 	.word	0x000811a1

000818e0 <CPU2_D_RD_SENSIN>:

uint8_t CPU2_D_RD_SENSIN(sv_sensintype id_sensein)
{
   818e0:	b580      	push	{r7, lr}
   818e2:	b086      	sub	sp, #24
   818e4:	af00      	add	r7, sp, #0
   818e6:	4603      	mov	r3, r0
   818e8:	71fb      	strb	r3, [r7, #7]
	uint32_t p_io, peri;
	uint8_t pio_val= 0;
   818ea:	2300      	movs	r3, #0
   818ec:	73fb      	strb	r3, [r7, #15]
	switch(id_sensein)
   818ee:	79fb      	ldrb	r3, [r7, #7]
   818f0:	3b01      	subs	r3, #1
   818f2:	2b06      	cmp	r3, #6
   818f4:	d83a      	bhi.n	8196c <CPU2_D_RD_SENSIN+0x8c>
   818f6:	a201      	add	r2, pc, #4	; (adr r2, 818fc <CPU2_D_RD_SENSIN+0x1c>)
   818f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   818fc:	00081919 	.word	0x00081919
   81900:	00081925 	.word	0x00081925
   81904:	00081931 	.word	0x00081931
   81908:	0008193d 	.word	0x0008193d
   8190c:	00081949 	.word	0x00081949
   81910:	00081955 	.word	0x00081955
   81914:	00081961 	.word	0x00081961
	{
		case SV_BP_DOOR:
		p_io = 10;               // bp_door
   81918:	230a      	movs	r3, #10
   8191a:	617b      	str	r3, [r7, #20]
		peri = PC;
   8191c:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   81920:	613b      	str	r3, [r7, #16]
		break;
   81922:	e024      	b.n	8196e <CPU2_D_RD_SENSIN+0x8e>
		
		case SV_BP_FB:					// pump_sense
		p_io = 9;
   81924:	2309      	movs	r3, #9
   81926:	617b      	str	r3, [r7, #20]
		peri = PC;
   81928:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   8192c:	613b      	str	r3, [r7, #16]
		break;
   8192e:	e01e      	b.n	8196e <CPU2_D_RD_SENSIN+0x8e>
		
		case SV_CLAMP_FB:					// clamp_feedback
		p_io = 7;
   81930:	2307      	movs	r3, #7
   81932:	617b      	str	r3, [r7, #20]
		peri = PC;
   81934:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   81938:	613b      	str	r3, [r7, #16]
		break;
   8193a:	e018      	b.n	8196e <CPU2_D_RD_SENSIN+0x8e>
		
		case SV_CLAMP_DOOR:					// clamp_door
		
		p_io = 7;
   8193c:	2307      	movs	r3, #7
   8193e:	617b      	str	r3, [r7, #20]
		peri = PC;
   81940:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   81944:	613b      	str	r3, [r7, #16]
		break;
   81946:	e012      	b.n	8196e <CPU2_D_RD_SENSIN+0x8e>
		
		case SV_BD:					// blood dectector
		
		p_io = 12;
   81948:	230c      	movs	r3, #12
   8194a:	617b      	str	r3, [r7, #20]
		peri = PB;
   8194c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   81950:	613b      	str	r3, [r7, #16]
		break;
   81952:	e00c      	b.n	8196e <CPU2_D_RD_SENSIN+0x8e>
		
		case SV_ABD:					// ABD
		
		p_io = 8;
   81954:	2308      	movs	r3, #8
   81956:	617b      	str	r3, [r7, #20]
		peri = PC;
   81958:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   8195c:	613b      	str	r3, [r7, #16]
		break;
   8195e:	e006      	b.n	8196e <CPU2_D_RD_SENSIN+0x8e>
		
		case SV_REDUNDANCY_IRQ:					//Redundancy_irq
		p_io = 24;
   81960:	2318      	movs	r3, #24
   81962:	617b      	str	r3, [r7, #20]
		peri = PC;
   81964:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
   81968:	613b      	str	r3, [r7, #16]
		break;
   8196a:	e000      	b.n	8196e <CPU2_D_RD_SENSIN+0x8e>
		
		default:
		break;
   8196c:	bf00      	nop
	}
	
	pio_val = CPU2_D_READ_PIO(peri, p_io);
   8196e:	6979      	ldr	r1, [r7, #20]
   81970:	6938      	ldr	r0, [r7, #16]
   81972:	4b04      	ldr	r3, [pc, #16]	; (81984 <CPU2_D_RD_SENSIN+0xa4>)
   81974:	4798      	blx	r3
   81976:	4603      	mov	r3, r0
   81978:	73fb      	strb	r3, [r7, #15]
	
	return pio_val;
   8197a:	7bfb      	ldrb	r3, [r7, #15]
	
}
   8197c:	4618      	mov	r0, r3
   8197e:	3718      	adds	r7, #24
   81980:	46bd      	mov	sp, r7
   81982:	bd80      	pop	{r7, pc}
   81984:	00081225 	.word	0x00081225

00081988 <CPU2_D_READ_SENSORS>:


uint16_t CPU2_D_READ_SENSORS(sv_sensortype ID_SENSOR)
{
   81988:	b580      	push	{r7, lr}
   8198a:	b084      	sub	sp, #16
   8198c:	af00      	add	r7, sp, #0
   8198e:	4603      	mov	r3, r0
   81990:	71fb      	strb	r3, [r7, #7]
	int16_t SENSOR_VAL;
	 uint8_t channel = 0;
   81992:	2300      	movs	r3, #0
   81994:	737b      	strb	r3, [r7, #13]
	//adc_chnl channel = channel_0;
	 switch(ID_SENSOR)
   81996:	79fb      	ldrb	r3, [r7, #7]
   81998:	2b01      	cmp	r3, #1
   8199a:	d002      	beq.n	819a2 <CPU2_D_READ_SENSORS+0x1a>
   8199c:	2b02      	cmp	r3, #2
   8199e:	d008      	beq.n	819b2 <CPU2_D_READ_SENSORS+0x2a>
// 		 //channel = channel_3;
// 		 channel =  4;
// 		 break;
		 
		 default:
		 break;
   819a0:	e00f      	b.n	819c2 <CPU2_D_READ_SENSORS+0x3a>
	//adc_chnl channel = channel_0;
	 switch(ID_SENSOR)
	 {
		 case SV_APT:
		 //channel = channel_7;
		 SENSOR_VAL = DD_READ_SENSORS(SV_APT);
   819a2:	2001      	movs	r0, #1
   819a4:	4b09      	ldr	r3, [pc, #36]	; (819cc <CPU2_D_READ_SENSORS+0x44>)
   819a6:	4798      	blx	r3
   819a8:	4603      	mov	r3, r0
   819aa:	81fb      	strh	r3, [r7, #14]
		 channel = 0;
   819ac:	2300      	movs	r3, #0
   819ae:	737b      	strb	r3, [r7, #13]
		 break;
   819b0:	e007      	b.n	819c2 <CPU2_D_READ_SENSORS+0x3a>
		 
		 case SV_VPT:
		SENSOR_VAL = DD_READ_SENSORS(SV_VPT);
   819b2:	2002      	movs	r0, #2
   819b4:	4b05      	ldr	r3, [pc, #20]	; (819cc <CPU2_D_READ_SENSORS+0x44>)
   819b6:	4798      	blx	r3
   819b8:	4603      	mov	r3, r0
   819ba:	81fb      	strh	r3, [r7, #14]
		 channel =  1;
   819bc:	2301      	movs	r3, #1
   819be:	737b      	strb	r3, [r7, #13]
		 break;
   819c0:	bf00      	nop
		 
	 }
	
//	SENSOR_VAL= CPU2_D_READ_ADC(channel);
	
	return SENSOR_VAL;
   819c2:	89fb      	ldrh	r3, [r7, #14]
	
}
   819c4:	4618      	mov	r0, r3
   819c6:	3710      	adds	r7, #16
   819c8:	46bd      	mov	sp, r7
   819ca:	bd80      	pop	{r7, pc}
   819cc:	00080f25 	.word	0x00080f25

000819d0 <CPU2_D_CONFIG_TIMER>:

uint8_t CPU2_D_CONFIG_TIMER(uint8_t timer_no, uint8_t timer_res)
{
   819d0:	b590      	push	{r4, r7, lr}
   819d2:	b089      	sub	sp, #36	; 0x24
   819d4:	af00      	add	r7, sp, #0
   819d6:	4603      	mov	r3, r0
   819d8:	460a      	mov	r2, r1
   819da:	71fb      	strb	r3, [r7, #7]
   819dc:	4613      	mov	r3, r2
   819de:	71bb      	strb	r3, [r7, #6]
	uint32_t ch_no=0,rc;
   819e0:	2300      	movs	r3, #0
   819e2:	61fb      	str	r3, [r7, #28]
	double rc_cal;
	rc_cal = ((84000000/(128 * timer_res)) -1);
   819e4:	79bb      	ldrb	r3, [r7, #6]
   819e6:	01db      	lsls	r3, r3, #7
   819e8:	4a1b      	ldr	r2, [pc, #108]	; (81a58 <CPU2_D_CONFIG_TIMER+0x88>)
   819ea:	fb92 f3f3 	sdiv	r3, r2, r3
   819ee:	1e5a      	subs	r2, r3, #1
   819f0:	4b1a      	ldr	r3, [pc, #104]	; (81a5c <CPU2_D_CONFIG_TIMER+0x8c>)
   819f2:	4610      	mov	r0, r2
   819f4:	4798      	blx	r3
   819f6:	4603      	mov	r3, r0
   819f8:	460c      	mov	r4, r1
   819fa:	e9c7 3404 	strd	r3, r4, [r7, #16]
	rc = rc_cal;
   819fe:	4b18      	ldr	r3, [pc, #96]	; (81a60 <CPU2_D_CONFIG_TIMER+0x90>)
   81a00:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
   81a04:	4798      	blx	r3
   81a06:	4603      	mov	r3, r0
   81a08:	60fb      	str	r3, [r7, #12]

	switch (timer_no)
   81a0a:	79fb      	ldrb	r3, [r7, #7]
   81a0c:	2b01      	cmp	r3, #1
   81a0e:	d00b      	beq.n	81a28 <CPU2_D_CONFIG_TIMER+0x58>
   81a10:	2b02      	cmp	r3, #2
   81a12:	d012      	beq.n	81a3a <CPU2_D_CONFIG_TIMER+0x6a>
   81a14:	2b00      	cmp	r3, #0
   81a16:	d000      	beq.n	81a1a <CPU2_D_CONFIG_TIMER+0x4a>
		rc = timer_res;
		startTimer2(TC0,1,TC1_IRQn,rc);
		break;
		
		default:
		break;
   81a18:	e018      	b.n	81a4c <CPU2_D_CONFIG_TIMER+0x7c>
	rc = rc_cal;

	switch (timer_no)
	{
		case 0:
		CPU2_D_MAIN_TIMER( TC2, ch_no, TC6_IRQn, rc);
   81a1a:	68fb      	ldr	r3, [r7, #12]
   81a1c:	2221      	movs	r2, #33	; 0x21
   81a1e:	69f9      	ldr	r1, [r7, #28]
   81a20:	4810      	ldr	r0, [pc, #64]	; (81a64 <CPU2_D_CONFIG_TIMER+0x94>)
   81a22:	4c11      	ldr	r4, [pc, #68]	; (81a68 <CPU2_D_CONFIG_TIMER+0x98>)
   81a24:	47a0      	blx	r4
		break;
   81a26:	e011      	b.n	81a4c <CPU2_D_CONFIG_TIMER+0x7c>
		
		case 1:
		rc = timer_res;
   81a28:	79bb      	ldrb	r3, [r7, #6]
   81a2a:	60fb      	str	r3, [r7, #12]
		startTimer1(TC0,0,TC0_IRQn,rc);
   81a2c:	68fb      	ldr	r3, [r7, #12]
   81a2e:	221b      	movs	r2, #27
   81a30:	2100      	movs	r1, #0
   81a32:	480e      	ldr	r0, [pc, #56]	; (81a6c <CPU2_D_CONFIG_TIMER+0x9c>)
   81a34:	4c0e      	ldr	r4, [pc, #56]	; (81a70 <CPU2_D_CONFIG_TIMER+0xa0>)
   81a36:	47a0      	blx	r4
		break;
   81a38:	e008      	b.n	81a4c <CPU2_D_CONFIG_TIMER+0x7c>
		
		case 2:
		rc = timer_res;
   81a3a:	79bb      	ldrb	r3, [r7, #6]
   81a3c:	60fb      	str	r3, [r7, #12]
		startTimer2(TC0,1,TC1_IRQn,rc);
   81a3e:	68fb      	ldr	r3, [r7, #12]
   81a40:	221c      	movs	r2, #28
   81a42:	2101      	movs	r1, #1
   81a44:	4809      	ldr	r0, [pc, #36]	; (81a6c <CPU2_D_CONFIG_TIMER+0x9c>)
   81a46:	4c0b      	ldr	r4, [pc, #44]	; (81a74 <CPU2_D_CONFIG_TIMER+0xa4>)
   81a48:	47a0      	blx	r4
		break;
   81a4a:	bf00      	nop
		
		default:
		break;
		
	}
}
   81a4c:	bf00      	nop
   81a4e:	4618      	mov	r0, r3
   81a50:	3724      	adds	r7, #36	; 0x24
   81a52:	46bd      	mov	sp, r7
   81a54:	bd90      	pop	{r4, r7, pc}
   81a56:	bf00      	nop
   81a58:	0501bd00 	.word	0x0501bd00
   81a5c:	0008450d 	.word	0x0008450d
   81a60:	000845d9 	.word	0x000845d9
   81a64:	40088000 	.word	0x40088000
   81a68:	00081ae9 	.word	0x00081ae9
   81a6c:	40080000 	.word	0x40080000
   81a70:	00081b45 	.word	0x00081b45
   81a74:	00081bb5 	.word	0x00081bb5

00081a78 <CPU2_D_INIT_TIMER>:


extern uint32_t ra,rc;

void CPU2_D_INIT_TIMER()
{
   81a78:	b580      	push	{r7, lr}
   81a7a:	af00      	add	r7, sp, #0
	TC0->TC_WPMR = 0x54494D00;
   81a7c:	4b16      	ldr	r3, [pc, #88]	; (81ad8 <CPU2_D_INIT_TIMER+0x60>)
   81a7e:	4a17      	ldr	r2, [pc, #92]	; (81adc <CPU2_D_INIT_TIMER+0x64>)
   81a80:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	TC1->TC_WPMR = 0x54494D00;
   81a84:	4b16      	ldr	r3, [pc, #88]	; (81ae0 <CPU2_D_INIT_TIMER+0x68>)
   81a86:	4a15      	ldr	r2, [pc, #84]	; (81adc <CPU2_D_INIT_TIMER+0x64>)
   81a88:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
//	TC2->TC_WPMR = 0x54494D00;
	pmc_enable_periph_clk(ID_TC0);
   81a8c:	201b      	movs	r0, #27
   81a8e:	4b15      	ldr	r3, [pc, #84]	; (81ae4 <CPU2_D_INIT_TIMER+0x6c>)
   81a90:	4798      	blx	r3
	pmc_enable_periph_clk(ID_TC1);
   81a92:	201c      	movs	r0, #28
   81a94:	4b13      	ldr	r3, [pc, #76]	; (81ae4 <CPU2_D_INIT_TIMER+0x6c>)
   81a96:	4798      	blx	r3
//	pmc_enable_periph_clk(ID_TC2);
	pmc_enable_periph_clk(ID_TC6);
   81a98:	2021      	movs	r0, #33	; 0x21
   81a9a:	4b12      	ldr	r3, [pc, #72]	; (81ae4 <CPU2_D_INIT_TIMER+0x6c>)
   81a9c:	4798      	blx	r3
	TC0->TC_CHANNEL[0].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   81a9e:	4b0e      	ldr	r3, [pc, #56]	; (81ad8 <CPU2_D_INIT_TIMER+0x60>)
   81aa0:	f24c 0203 	movw	r2, #49155	; 0xc003
   81aa4:	605a      	str	r2, [r3, #4]
	TC0->TC_CHANNEL[1].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   81aa6:	4b0c      	ldr	r3, [pc, #48]	; (81ad8 <CPU2_D_INIT_TIMER+0x60>)
   81aa8:	f24c 0203 	movw	r2, #49155	; 0xc003
   81aac:	645a      	str	r2, [r3, #68]	; 0x44
	TC0->TC_CHANNEL[2].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   81aae:	4b0a      	ldr	r3, [pc, #40]	; (81ad8 <CPU2_D_INIT_TIMER+0x60>)
   81ab0:	f24c 0203 	movw	r2, #49155	; 0xc003
   81ab4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
//	TC2->TC_CHANNEL[0].TC_CMR = TC_CMR_WAVE|TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
	
	TC0->TC_CHANNEL[0].TC_IER = TC_IER_CPCS;
   81ab8:	4b07      	ldr	r3, [pc, #28]	; (81ad8 <CPU2_D_INIT_TIMER+0x60>)
   81aba:	2210      	movs	r2, #16
   81abc:	625a      	str	r2, [r3, #36]	; 0x24
	TC0->TC_CHANNEL[1].TC_IER = TC_IER_CPCS;
   81abe:	4b06      	ldr	r3, [pc, #24]	; (81ad8 <CPU2_D_INIT_TIMER+0x60>)
   81ac0:	2210      	movs	r2, #16
   81ac2:	665a      	str	r2, [r3, #100]	; 0x64
	TC0->TC_CHANNEL[2].TC_IER = TC_IER_CPCS;
   81ac4:	4b04      	ldr	r3, [pc, #16]	; (81ad8 <CPU2_D_INIT_TIMER+0x60>)
   81ac6:	2210      	movs	r2, #16
   81ac8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	TC1->TC_CHANNEL[0].TC_IER = TC_IER_CPCS;
   81acc:	4b04      	ldr	r3, [pc, #16]	; (81ae0 <CPU2_D_INIT_TIMER+0x68>)
   81ace:	2210      	movs	r2, #16
   81ad0:	625a      	str	r2, [r3, #36]	; 0x24
//	TC2->TC_CHANNEL[0].TC_IER = TC_IER_CPCS;
}
   81ad2:	bf00      	nop
   81ad4:	bd80      	pop	{r7, pc}
   81ad6:	bf00      	nop
   81ad8:	40080000 	.word	0x40080000
   81adc:	54494d00 	.word	0x54494d00
   81ae0:	40084000 	.word	0x40084000
   81ae4:	00083e21 	.word	0x00083e21

00081ae8 <CPU2_D_MAIN_TIMER>:


uint8_t CPU2_D_MAIN_TIMER(Tc *tc, uint32_t channel, IRQn_Type irq, uint32_t fre)
{
   81ae8:	b580      	push	{r7, lr}
   81aea:	b084      	sub	sp, #16
   81aec:	af00      	add	r7, sp, #0
   81aee:	60f8      	str	r0, [r7, #12]
   81af0:	60b9      	str	r1, [r7, #8]
   81af2:	603b      	str	r3, [r7, #0]
   81af4:	4613      	mov	r3, r2
   81af6:	71fb      	strb	r3, [r7, #7]
	pmc_set_writeprotect(0);
   81af8:	2000      	movs	r0, #0
   81afa:	4b0d      	ldr	r3, [pc, #52]	; (81b30 <CPU2_D_MAIN_TIMER+0x48>)
   81afc:	4798      	blx	r3
	channel=0;
   81afe:	2300      	movs	r3, #0
   81b00:	60bb      	str	r3, [r7, #8]
	TC2->TC_CHANNEL[0].TC_CMR = TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   81b02:	4b0c      	ldr	r3, [pc, #48]	; (81b34 <CPU2_D_MAIN_TIMER+0x4c>)
   81b04:	f24c 0203 	movw	r2, #49155	; 0xc003
   81b08:	605a      	str	r2, [r3, #4]
	tc_write_rc(tc, channel, fre);
   81b0a:	683a      	ldr	r2, [r7, #0]
   81b0c:	68b9      	ldr	r1, [r7, #8]
   81b0e:	68f8      	ldr	r0, [r7, #12]
   81b10:	4b09      	ldr	r3, [pc, #36]	; (81b38 <CPU2_D_MAIN_TIMER+0x50>)
   81b12:	4798      	blx	r3
	tc_start(tc, channel);
   81b14:	68b9      	ldr	r1, [r7, #8]
   81b16:	68f8      	ldr	r0, [r7, #12]
   81b18:	4b08      	ldr	r3, [pc, #32]	; (81b3c <CPU2_D_MAIN_TIMER+0x54>)
   81b1a:	4798      	blx	r3
	tc_enable_interrupt(tc, channel, TC_IER_CPCS);
   81b1c:	2210      	movs	r2, #16
   81b1e:	68b9      	ldr	r1, [r7, #8]
   81b20:	68f8      	ldr	r0, [r7, #12]
   81b22:	4b07      	ldr	r3, [pc, #28]	; (81b40 <CPU2_D_MAIN_TIMER+0x58>)
   81b24:	4798      	blx	r3
	/*if (SysTick_Config(sysclk_get_cpu_hz() / 1000)) {
		puts("-F- Systick configuration error\r");
		while (1);
	}*/
}
   81b26:	bf00      	nop
   81b28:	4618      	mov	r0, r3
   81b2a:	3710      	adds	r7, #16
   81b2c:	46bd      	mov	sp, r7
   81b2e:	bd80      	pop	{r7, pc}
   81b30:	00083ea1 	.word	0x00083ea1
   81b34:	40088000 	.word	0x40088000
   81b38:	00082045 	.word	0x00082045
   81b3c:	00082005 	.word	0x00082005
   81b40:	00082069 	.word	0x00082069

00081b44 <startTimer1>:

void startTimer1(Tc *tc, uint32_t channel, IRQn_Type irq, uint32_t stepcount)
{
   81b44:	b580      	push	{r7, lr}
   81b46:	b084      	sub	sp, #16
   81b48:	af00      	add	r7, sp, #0
   81b4a:	60f8      	str	r0, [r7, #12]
   81b4c:	60b9      	str	r1, [r7, #8]
   81b4e:	603b      	str	r3, [r7, #0]
   81b50:	4613      	mov	r3, r2
   81b52:	71fb      	strb	r3, [r7, #7]
	pmc_set_writeprotect(0);
   81b54:	2000      	movs	r0, #0
   81b56:	4b10      	ldr	r3, [pc, #64]	; (81b98 <startTimer1+0x54>)
   81b58:	4798      	blx	r3
	pmc_enable_periph_clk(ID_TC0);
   81b5a:	201b      	movs	r0, #27
   81b5c:	4b0f      	ldr	r3, [pc, #60]	; (81b9c <startTimer1+0x58>)
   81b5e:	4798      	blx	r3
	tc_init(tc, channel, TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4);
   81b60:	f24c 0203 	movw	r2, #49155	; 0xc003
   81b64:	68b9      	ldr	r1, [r7, #8]
   81b66:	68f8      	ldr	r0, [r7, #12]
   81b68:	4b0d      	ldr	r3, [pc, #52]	; (81ba0 <startTimer1+0x5c>)
   81b6a:	4798      	blx	r3
	TC0->TC_CHANNEL[0].TC_CMR = TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   81b6c:	4b0d      	ldr	r3, [pc, #52]	; (81ba4 <startTimer1+0x60>)
   81b6e:	f24c 0203 	movw	r2, #49155	; 0xc003
   81b72:	605a      	str	r2, [r3, #4]
	tc_write_rc(tc, channel, stepcount);
   81b74:	683a      	ldr	r2, [r7, #0]
   81b76:	68b9      	ldr	r1, [r7, #8]
   81b78:	68f8      	ldr	r0, [r7, #12]
   81b7a:	4b0b      	ldr	r3, [pc, #44]	; (81ba8 <startTimer1+0x64>)
   81b7c:	4798      	blx	r3
	tc_enable_interrupt(TC0,0,TC_IER_CPCS);
   81b7e:	2210      	movs	r2, #16
   81b80:	2100      	movs	r1, #0
   81b82:	4808      	ldr	r0, [pc, #32]	; (81ba4 <startTimer1+0x60>)
   81b84:	4b09      	ldr	r3, [pc, #36]	; (81bac <startTimer1+0x68>)
   81b86:	4798      	blx	r3
	tc_start(tc, channel);
   81b88:	68b9      	ldr	r1, [r7, #8]
   81b8a:	68f8      	ldr	r0, [r7, #12]
   81b8c:	4b08      	ldr	r3, [pc, #32]	; (81bb0 <startTimer1+0x6c>)
   81b8e:	4798      	blx	r3
}
   81b90:	bf00      	nop
   81b92:	3710      	adds	r7, #16
   81b94:	46bd      	mov	sp, r7
   81b96:	bd80      	pop	{r7, pc}
   81b98:	00083ea1 	.word	0x00083ea1
   81b9c:	00083e21 	.word	0x00083e21
   81ba0:	00081fcd 	.word	0x00081fcd
   81ba4:	40080000 	.word	0x40080000
   81ba8:	00082045 	.word	0x00082045
   81bac:	00082069 	.word	0x00082069
   81bb0:	00082005 	.word	0x00082005

00081bb4 <startTimer2>:

void startTimer2(Tc *tc, uint32_t channel, IRQn_Type irq, uint32_t rampingcount)
{
   81bb4:	b580      	push	{r7, lr}
   81bb6:	b084      	sub	sp, #16
   81bb8:	af00      	add	r7, sp, #0
   81bba:	60f8      	str	r0, [r7, #12]
   81bbc:	60b9      	str	r1, [r7, #8]
   81bbe:	603b      	str	r3, [r7, #0]
   81bc0:	4613      	mov	r3, r2
   81bc2:	71fb      	strb	r3, [r7, #7]
	pmc_set_writeprotect(0);
   81bc4:	2000      	movs	r0, #0
   81bc6:	4b10      	ldr	r3, [pc, #64]	; (81c08 <startTimer2+0x54>)
   81bc8:	4798      	blx	r3
	pmc_enable_periph_clk(ID_TC1);
   81bca:	201c      	movs	r0, #28
   81bcc:	4b0f      	ldr	r3, [pc, #60]	; (81c0c <startTimer2+0x58>)
   81bce:	4798      	blx	r3
	tc_init(tc, channel, TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4);
   81bd0:	f24c 0203 	movw	r2, #49155	; 0xc003
   81bd4:	68b9      	ldr	r1, [r7, #8]
   81bd6:	68f8      	ldr	r0, [r7, #12]
   81bd8:	4b0d      	ldr	r3, [pc, #52]	; (81c10 <startTimer2+0x5c>)
   81bda:	4798      	blx	r3
	TC0->TC_CHANNEL[1].TC_CMR = TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   81bdc:	4b0d      	ldr	r3, [pc, #52]	; (81c14 <startTimer2+0x60>)
   81bde:	f24c 0203 	movw	r2, #49155	; 0xc003
   81be2:	645a      	str	r2, [r3, #68]	; 0x44
	tc_write_rc(tc, channel, rampingcount);
   81be4:	683a      	ldr	r2, [r7, #0]
   81be6:	68b9      	ldr	r1, [r7, #8]
   81be8:	68f8      	ldr	r0, [r7, #12]
   81bea:	4b0b      	ldr	r3, [pc, #44]	; (81c18 <startTimer2+0x64>)
   81bec:	4798      	blx	r3
	tc_enable_interrupt(TC0,1,TC_IER_CPCS);
   81bee:	2210      	movs	r2, #16
   81bf0:	2101      	movs	r1, #1
   81bf2:	4808      	ldr	r0, [pc, #32]	; (81c14 <startTimer2+0x60>)
   81bf4:	4b09      	ldr	r3, [pc, #36]	; (81c1c <startTimer2+0x68>)
   81bf6:	4798      	blx	r3
	tc_start(tc, channel);
   81bf8:	68b9      	ldr	r1, [r7, #8]
   81bfa:	68f8      	ldr	r0, [r7, #12]
   81bfc:	4b08      	ldr	r3, [pc, #32]	; (81c20 <startTimer2+0x6c>)
   81bfe:	4798      	blx	r3
}
   81c00:	bf00      	nop
   81c02:	3710      	adds	r7, #16
   81c04:	46bd      	mov	sp, r7
   81c06:	bd80      	pop	{r7, pc}
   81c08:	00083ea1 	.word	0x00083ea1
   81c0c:	00083e21 	.word	0x00083e21
   81c10:	00081fcd 	.word	0x00081fcd
   81c14:	40080000 	.word	0x40080000
   81c18:	00082045 	.word	0x00082045
   81c1c:	00082069 	.word	0x00082069
   81c20:	00082005 	.word	0x00082005

00081c24 <startTimer3>:
void startTimer3(Tc *tc, uint32_t channel, IRQn_Type irq, uint32_t rampingcount)
{
   81c24:	b580      	push	{r7, lr}
   81c26:	b084      	sub	sp, #16
   81c28:	af00      	add	r7, sp, #0
   81c2a:	60f8      	str	r0, [r7, #12]
   81c2c:	60b9      	str	r1, [r7, #8]
   81c2e:	603b      	str	r3, [r7, #0]
   81c30:	4613      	mov	r3, r2
   81c32:	71fb      	strb	r3, [r7, #7]
	pmc_set_writeprotect(0);
   81c34:	2000      	movs	r0, #0
   81c36:	4b11      	ldr	r3, [pc, #68]	; (81c7c <startTimer3+0x58>)
   81c38:	4798      	blx	r3
	pmc_enable_periph_clk(ID_TC2);
   81c3a:	201d      	movs	r0, #29
   81c3c:	4b10      	ldr	r3, [pc, #64]	; (81c80 <startTimer3+0x5c>)
   81c3e:	4798      	blx	r3
	tc_init(tc, channel, TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4);
   81c40:	f24c 0203 	movw	r2, #49155	; 0xc003
   81c44:	68b9      	ldr	r1, [r7, #8]
   81c46:	68f8      	ldr	r0, [r7, #12]
   81c48:	4b0e      	ldr	r3, [pc, #56]	; (81c84 <startTimer3+0x60>)
   81c4a:	4798      	blx	r3
	TC0->TC_CHANNEL[2].TC_CMR = TC_CMR_WAVE | TC_CMR_WAVSEL_UP_RC |TC_CMR_TCCLKS_TIMER_CLOCK4;
   81c4c:	4b0e      	ldr	r3, [pc, #56]	; (81c88 <startTimer3+0x64>)
   81c4e:	f24c 0203 	movw	r2, #49155	; 0xc003
   81c52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	tc_write_rc(tc, channel, rampingcount);
   81c56:	683a      	ldr	r2, [r7, #0]
   81c58:	68b9      	ldr	r1, [r7, #8]
   81c5a:	68f8      	ldr	r0, [r7, #12]
   81c5c:	4b0b      	ldr	r3, [pc, #44]	; (81c8c <startTimer3+0x68>)
   81c5e:	4798      	blx	r3
	tc_enable_interrupt(TC0,2,TC_IER_CPCS);
   81c60:	2210      	movs	r2, #16
   81c62:	2102      	movs	r1, #2
   81c64:	4808      	ldr	r0, [pc, #32]	; (81c88 <startTimer3+0x64>)
   81c66:	4b0a      	ldr	r3, [pc, #40]	; (81c90 <startTimer3+0x6c>)
   81c68:	4798      	blx	r3
	tc_start(tc, channel);
   81c6a:	68b9      	ldr	r1, [r7, #8]
   81c6c:	68f8      	ldr	r0, [r7, #12]
   81c6e:	4b09      	ldr	r3, [pc, #36]	; (81c94 <startTimer3+0x70>)
   81c70:	4798      	blx	r3
   81c72:	bf00      	nop
   81c74:	3710      	adds	r7, #16
   81c76:	46bd      	mov	sp, r7
   81c78:	bd80      	pop	{r7, pc}
   81c7a:	bf00      	nop
   81c7c:	00083ea1 	.word	0x00083ea1
   81c80:	00083e21 	.word	0x00083e21
   81c84:	00081fcd 	.word	0x00081fcd
   81c88:	40080000 	.word	0x40080000
   81c8c:	00082045 	.word	0x00082045
   81c90:	00082069 	.word	0x00082069
   81c94:	00082005 	.word	0x00082005

00081c98 <cpu2_sv_cntrl_activatepump>:
 */ 
#include "CNTRL.h"


uint8_t cpu2_sv_cntrl_activatepump(sv_pumptype sv_pump_id)
{
   81c98:	b580      	push	{r7, lr}
   81c9a:	b082      	sub	sp, #8
   81c9c:	af00      	add	r7, sp, #0
   81c9e:	4603      	mov	r3, r0
   81ca0:	71fb      	strb	r3, [r7, #7]
	CPU2_D_SET_PUMP(sv_pump_id);
   81ca2:	79fb      	ldrb	r3, [r7, #7]
   81ca4:	4618      	mov	r0, r3
   81ca6:	4b03      	ldr	r3, [pc, #12]	; (81cb4 <cpu2_sv_cntrl_activatepump+0x1c>)
   81ca8:	4798      	blx	r3
	
	return 0;
   81caa:	2300      	movs	r3, #0
}
   81cac:	4618      	mov	r0, r3
   81cae:	3708      	adds	r7, #8
   81cb0:	46bd      	mov	sp, r7
   81cb2:	bd80      	pop	{r7, pc}
   81cb4:	0008172d 	.word	0x0008172d

00081cb8 <cpu2_sv_cntrl_deactivatepump>:

uint8_t cpu2_sv_cntrl_deactivatepump(sv_pumptype sv_pump_id)
{
   81cb8:	b580      	push	{r7, lr}
   81cba:	b082      	sub	sp, #8
   81cbc:	af00      	add	r7, sp, #0
   81cbe:	4603      	mov	r3, r0
   81cc0:	71fb      	strb	r3, [r7, #7]
	CPU2_D_RESET_PUMP(sv_pump_id);
   81cc2:	79fb      	ldrb	r3, [r7, #7]
   81cc4:	4618      	mov	r0, r3
   81cc6:	4b03      	ldr	r3, [pc, #12]	; (81cd4 <cpu2_sv_cntrl_deactivatepump+0x1c>)
   81cc8:	4798      	blx	r3
	
	return 0;
   81cca:	2300      	movs	r3, #0
}
   81ccc:	4618      	mov	r0, r3
   81cce:	3708      	adds	r7, #8
   81cd0:	46bd      	mov	sp, r7
   81cd2:	bd80      	pop	{r7, pc}
   81cd4:	0008177d 	.word	0x0008177d

00081cd8 <cpu2_sv_cntrl_activate_pin>:


uint8_t cpu2_sv_cntrl_activate_pin(sv_valvetype sv_pin_id)
{
   81cd8:	b580      	push	{r7, lr}
   81cda:	b082      	sub	sp, #8
   81cdc:	af00      	add	r7, sp, #0
   81cde:	4603      	mov	r3, r0
   81ce0:	71fb      	strb	r3, [r7, #7]
	CPU2_D_SET_VALVE(sv_pin_id);
   81ce2:	79fb      	ldrb	r3, [r7, #7]
   81ce4:	4618      	mov	r0, r3
   81ce6:	4b03      	ldr	r3, [pc, #12]	; (81cf4 <cpu2_sv_cntrl_activate_pin+0x1c>)
   81ce8:	4798      	blx	r3
	
	return 0;
   81cea:	2300      	movs	r3, #0
}
   81cec:	4618      	mov	r0, r3
   81cee:	3708      	adds	r7, #8
   81cf0:	46bd      	mov	sp, r7
   81cf2:	bd80      	pop	{r7, pc}
   81cf4:	000817a9 	.word	0x000817a9

00081cf8 <cpu2_sv_cntrl_deactivate_pin>:

uint8_t cpu2_sv_cntrl_deactivate_pin(sv_valvetype sv_pin_id)
{
   81cf8:	b580      	push	{r7, lr}
   81cfa:	b082      	sub	sp, #8
   81cfc:	af00      	add	r7, sp, #0
   81cfe:	4603      	mov	r3, r0
   81d00:	71fb      	strb	r3, [r7, #7]
	CPU2_D_RESET_VALVE(sv_pin_id);
   81d02:	79fb      	ldrb	r3, [r7, #7]
   81d04:	4618      	mov	r0, r3
   81d06:	4b03      	ldr	r3, [pc, #12]	; (81d14 <cpu2_sv_cntrl_deactivate_pin+0x1c>)
   81d08:	4798      	blx	r3
	
	return 0;
   81d0a:	2300      	movs	r3, #0
   81d0c:	4618      	mov	r0, r3
   81d0e:	3708      	adds	r7, #8
   81d10:	46bd      	mov	sp, r7
   81d12:	bd80      	pop	{r7, pc}
   81d14:	00081845 	.word	0x00081845

00081d18 <cpu2_sv_status_getsystemstatus>:

#include "STATUS.h"
#define CAN_MID_MIDvA_dd(value) ((0x1FFC0000 & ((value) << 18)))
extern can_mb_conf_t can0_mailbox;
uint16_t cpu2_sv_status_getsystemstatus(Sys_statusType* sensor_struct)
{
   81d18:	b580      	push	{r7, lr}
   81d1a:	b088      	sub	sp, #32
   81d1c:	af00      	add	r7, sp, #0
   81d1e:	6078      	str	r0, [r7, #4]
	
	 Sys_statusType sensor_struct1;

	sensor_struct1.vptstatus			= CPU2_D_READ_SENSORS(SV_VPT);
   81d20:	2002      	movs	r0, #2
   81d22:	4b29      	ldr	r3, [pc, #164]	; (81dc8 <cpu2_sv_status_getsystemstatus+0xb0>)
   81d24:	4798      	blx	r3
   81d26:	4603      	mov	r3, r0
   81d28:	81fb      	strh	r3, [r7, #14]
	sensor_struct1.aptstatus			= CPU2_D_READ_SENSORS(SV_APT);
   81d2a:	2001      	movs	r0, #1
   81d2c:	4b26      	ldr	r3, [pc, #152]	; (81dc8 <cpu2_sv_status_getsystemstatus+0xb0>)
   81d2e:	4798      	blx	r3
   81d30:	4603      	mov	r3, r0
   81d32:	81bb      	strh	r3, [r7, #12]
// 	sensor_struct1.Tempstatus			= CPU2_D_READ_SENSORS(SV_SENSOR_ID3);
// 	sensor_struct1.cond1_status			= CPU2_D_READ_SENSORS(SV_SENSOR_ID4);
// 	sensor_struct1.cond2_status			= CPU2_D_READ_SENSORS(SV_SENSOR_ID5);
	
	sensor_struct1.bp_door			= CPU2_D_RD_SENSIN(SV_BP_DOOR);
   81d34:	2001      	movs	r0, #1
   81d36:	4b25      	ldr	r3, [pc, #148]	; (81dcc <cpu2_sv_status_getsystemstatus+0xb4>)
   81d38:	4798      	blx	r3
   81d3a:	4603      	mov	r3, r0
   81d3c:	b29b      	uxth	r3, r3
   81d3e:	82bb      	strh	r3, [r7, #20]
	sensor_struct1.bp_sense			= CPU2_D_RD_SENSIN(SV_BP_FB);
   81d40:	2002      	movs	r0, #2
   81d42:	4b22      	ldr	r3, [pc, #136]	; (81dcc <cpu2_sv_status_getsystemstatus+0xb4>)
   81d44:	4798      	blx	r3
   81d46:	4603      	mov	r3, r0
   81d48:	b29b      	uxth	r3, r3
   81d4a:	82fb      	strh	r3, [r7, #22]
	sensor_struct1.clamp_fdbk		= CPU2_D_RD_SENSIN(SV_CLAMP_FB);
   81d4c:	2003      	movs	r0, #3
   81d4e:	4b1f      	ldr	r3, [pc, #124]	; (81dcc <cpu2_sv_status_getsystemstatus+0xb4>)
   81d50:	4798      	blx	r3
   81d52:	4603      	mov	r3, r0
   81d54:	b29b      	uxth	r3, r3
   81d56:	833b      	strh	r3, [r7, #24]
	sensor_struct1.clamp_door			= CPU2_D_RD_SENSIN(SV_CLAMP_DOOR);
   81d58:	2004      	movs	r0, #4
   81d5a:	4b1c      	ldr	r3, [pc, #112]	; (81dcc <cpu2_sv_status_getsystemstatus+0xb4>)
   81d5c:	4798      	blx	r3
   81d5e:	4603      	mov	r3, r0
   81d60:	b29b      	uxth	r3, r3
   81d62:	837b      	strh	r3, [r7, #26]
	sensor_struct1.bdstatus				= CPU2_D_RD_SENSIN(SV_BD);
   81d64:	2005      	movs	r0, #5
   81d66:	4b19      	ldr	r3, [pc, #100]	; (81dcc <cpu2_sv_status_getsystemstatus+0xb4>)
   81d68:	4798      	blx	r3
   81d6a:	4603      	mov	r3, r0
   81d6c:	b29b      	uxth	r3, r3
   81d6e:	827b      	strh	r3, [r7, #18]
	sensor_struct1.abdstatus			= CPU2_D_RD_SENSIN(SV_ABD);
   81d70:	2006      	movs	r0, #6
   81d72:	4b16      	ldr	r3, [pc, #88]	; (81dcc <cpu2_sv_status_getsystemstatus+0xb4>)
   81d74:	4798      	blx	r3
   81d76:	4603      	mov	r3, r0
   81d78:	b29b      	uxth	r3, r3
   81d7a:	823b      	strh	r3, [r7, #16]
	sensor_struct1.rudncy_irq			= CPU2_D_RD_SENSIN(SV_REDUNDANCY_IRQ);
   81d7c:	2007      	movs	r0, #7
   81d7e:	4b13      	ldr	r3, [pc, #76]	; (81dcc <cpu2_sv_status_getsystemstatus+0xb4>)
   81d80:	4798      	blx	r3
   81d82:	4603      	mov	r3, r0
   81d84:	b29b      	uxth	r3, r3
   81d86:	83bb      	strh	r3, [r7, #28]
	
	
// 	sensor_struct->cond1_status			= sensor_struct1.cond1_status;
// 	sensor_struct->cond2_status			= sensor_struct1.cond2_status;
// 	sensor_struct->Tempstatus			= sensor_struct1.Tempstatus;
	sensor_struct->aptstatus			= sensor_struct1.aptstatus;
   81d88:	89ba      	ldrh	r2, [r7, #12]
   81d8a:	687b      	ldr	r3, [r7, #4]
   81d8c:	801a      	strh	r2, [r3, #0]
	sensor_struct->vptstatus			= sensor_struct1.vptstatus;
   81d8e:	89fa      	ldrh	r2, [r7, #14]
   81d90:	687b      	ldr	r3, [r7, #4]
   81d92:	805a      	strh	r2, [r3, #2]
	
	
	sensor_struct->bdstatus				= sensor_struct1.bdstatus;
   81d94:	8a7a      	ldrh	r2, [r7, #18]
   81d96:	687b      	ldr	r3, [r7, #4]
   81d98:	80da      	strh	r2, [r3, #6]
	sensor_struct->abdstatus			= sensor_struct1.abdstatus;
   81d9a:	8a3a      	ldrh	r2, [r7, #16]
   81d9c:	687b      	ldr	r3, [r7, #4]
   81d9e:	809a      	strh	r2, [r3, #4]
	sensor_struct->bp_door				= sensor_struct1.bp_door;
   81da0:	8aba      	ldrh	r2, [r7, #20]
   81da2:	687b      	ldr	r3, [r7, #4]
   81da4:	811a      	strh	r2, [r3, #8]
	sensor_struct->bp_sense				= sensor_struct1.bp_sense;
   81da6:	8afa      	ldrh	r2, [r7, #22]
   81da8:	687b      	ldr	r3, [r7, #4]
   81daa:	815a      	strh	r2, [r3, #10]
	sensor_struct->clamp_fdbk			= sensor_struct1.clamp_fdbk;
   81dac:	8b3a      	ldrh	r2, [r7, #24]
   81dae:	687b      	ldr	r3, [r7, #4]
   81db0:	819a      	strh	r2, [r3, #12]
	sensor_struct->clamp_door			= sensor_struct1.clamp_door;
   81db2:	8b7a      	ldrh	r2, [r7, #26]
   81db4:	687b      	ldr	r3, [r7, #4]
   81db6:	81da      	strh	r2, [r3, #14]
	sensor_struct->rudncy_irq			= sensor_struct1.rudncy_irq;
   81db8:	8bba      	ldrh	r2, [r7, #28]
   81dba:	687b      	ldr	r3, [r7, #4]
   81dbc:	821a      	strh	r2, [r3, #16]
	
	return 0;
   81dbe:	2300      	movs	r3, #0

}
   81dc0:	4618      	mov	r0, r3
   81dc2:	3720      	adds	r7, #32
   81dc4:	46bd      	mov	sp, r7
   81dc6:	bd80      	pop	{r7, pc}
   81dc8:	00081989 	.word	0x00081989
   81dcc:	000818e1 	.word	0x000818e1

00081dd0 <SV_put_sensor_data>:

bool SV_put_sensor_data(Sys_statusType* sensor_struct)   {
   81dd0:	b580      	push	{r7, lr}
   81dd2:	b084      	sub	sp, #16
   81dd4:	af00      	add	r7, sp, #0
   81dd6:	6078      	str	r0, [r7, #4]
	
 DD_CAN_MAILBOX_SENSOR_DATA_REG_TYPE  SV_CAN_MAILBOX_SENSOR_DATA_REG;
	
	
	SV_CAN_MAILBOX_SENSOR_DATA_REG.CPU_SENDER_type_reg        = HEMO_CPU_id ;
   81dd8:	2301      	movs	r3, #1
   81dda:	723b      	strb	r3, [r7, #8]
	SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_GROUP_ID_type_reg	  = GROUP_ID_7 ;
   81ddc:	2307      	movs	r3, #7
   81dde:	727b      	strb	r3, [r7, #9]
	SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_1                   = sensor_struct->aptstatus;
   81de0:	687b      	ldr	r3, [r7, #4]
   81de2:	881b      	ldrh	r3, [r3, #0]
   81de4:	817b      	strh	r3, [r7, #10]
	SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_2	                  = sensor_struct->vptstatus;
   81de6:	687b      	ldr	r3, [r7, #4]
   81de8:	885b      	ldrh	r3, [r3, #2]
   81dea:	81bb      	strh	r3, [r7, #12]
	SV_CAN_MAILBOX_SENSOR_DATA_REG.SENSOR_3	                  = 0;
   81dec:	2300      	movs	r3, #0
   81dee:	81fb      	strh	r3, [r7, #14]
	SV_SEND_CAN_MAILBOX(&SV_CAN_MAILBOX_SENSOR_DATA_REG);
   81df0:	f107 0308 	add.w	r3, r7, #8
   81df4:	4618      	mov	r0, r3
   81df6:	4b04      	ldr	r3, [pc, #16]	; (81e08 <SV_put_sensor_data+0x38>)
   81df8:	4798      	blx	r3
	
	return ;
   81dfa:	bf00      	nop
   81dfc:	bf00      	nop
}
   81dfe:	4618      	mov	r0, r3
   81e00:	3710      	adds	r7, #16
   81e02:	46bd      	mov	sp, r7
   81e04:	bd80      	pop	{r7, pc}
   81e06:	bf00      	nop
   81e08:	00081e0d 	.word	0x00081e0d

00081e0c <SV_SEND_CAN_MAILBOX>:


void SV_SEND_CAN_MAILBOX(DD_CAN_MAILBOX_SENSOR_DATA_REG_TYPE*  SV_CAN_MAILBOX_SENSOR_DATA_STRUCTURE)   {
   81e0c:	b580      	push	{r7, lr}
   81e0e:	b084      	sub	sp, #16
   81e10:	af00      	add	r7, sp, #0
   81e12:	6078      	str	r0, [r7, #4]
	sv_data_size_type  sv_data_size;
	sv_data_size.bytearray[0]                                =SV_CAN_MAILBOX_SENSOR_DATA_STRUCTURE->CPU_SENDER_type_reg;
   81e14:	687b      	ldr	r3, [r7, #4]
   81e16:	781b      	ldrb	r3, [r3, #0]
   81e18:	723b      	strb	r3, [r7, #8]
	sv_data_size.bytearray[1]                                =SV_CAN_MAILBOX_SENSOR_DATA_STRUCTURE->SENSOR_GROUP_ID_type_reg;
   81e1a:	687b      	ldr	r3, [r7, #4]
   81e1c:	785b      	ldrb	r3, [r3, #1]
   81e1e:	727b      	strb	r3, [r7, #9]
	
	sv_data_size.Twobyte[1]                                  =SV_CAN_MAILBOX_SENSOR_DATA_STRUCTURE->SENSOR_1;
   81e20:	687b      	ldr	r3, [r7, #4]
   81e22:	885b      	ldrh	r3, [r3, #2]
   81e24:	817b      	strh	r3, [r7, #10]
	sv_data_size.Twobyte[2]                                  =SV_CAN_MAILBOX_SENSOR_DATA_STRUCTURE->SENSOR_2;
   81e26:	687b      	ldr	r3, [r7, #4]
   81e28:	889b      	ldrh	r3, [r3, #4]
   81e2a:	81bb      	strh	r3, [r7, #12]
	sv_data_size.Twobyte[3]                                  =SV_CAN_MAILBOX_SENSOR_DATA_STRUCTURE->SENSOR_3;
   81e2c:	687b      	ldr	r3, [r7, #4]
   81e2e:	88db      	ldrh	r3, [r3, #6]
   81e30:	81fb      	strh	r3, [r7, #14]
	
	can0_mailbox.ul_datal                                    =sv_data_size.fourbyte[0];
   81e32:	68bb      	ldr	r3, [r7, #8]
   81e34:	4a14      	ldr	r2, [pc, #80]	; (81e88 <SV_SEND_CAN_MAILBOX+0x7c>)
   81e36:	6193      	str	r3, [r2, #24]
	can0_mailbox.ul_datah                                    =sv_data_size.fourbyte[1];
   81e38:	68fb      	ldr	r3, [r7, #12]
   81e3a:	4a13      	ldr	r2, [pc, #76]	; (81e88 <SV_SEND_CAN_MAILBOX+0x7c>)
   81e3c:	61d3      	str	r3, [r2, #28]
	can0_mailbox.uc_length                                  = 8;
   81e3e:	4b12      	ldr	r3, [pc, #72]	; (81e88 <SV_SEND_CAN_MAILBOX+0x7c>)
   81e40:	2208      	movs	r2, #8
   81e42:	719a      	strb	r2, [r3, #6]
	can0_mailbox.ul_mb_idx =   MAILBOX_0;
   81e44:	4b10      	ldr	r3, [pc, #64]	; (81e88 <SV_SEND_CAN_MAILBOX+0x7c>)
   81e46:	2200      	movs	r2, #0
   81e48:	601a      	str	r2, [r3, #0]
	can0_mailbox.uc_obj_type = CAN_MB_TX_MODE ;
   81e4a:	4b0f      	ldr	r3, [pc, #60]	; (81e88 <SV_SEND_CAN_MAILBOX+0x7c>)
   81e4c:	2203      	movs	r2, #3
   81e4e:	711a      	strb	r2, [r3, #4]
	can0_mailbox.uc_tx_prio = 1;
   81e50:	4b0d      	ldr	r3, [pc, #52]	; (81e88 <SV_SEND_CAN_MAILBOX+0x7c>)
   81e52:	2201      	movs	r2, #1
   81e54:	71da      	strb	r2, [r3, #7]
	can0_mailbox.uc_id_ver = 0;
   81e56:	4b0c      	ldr	r3, [pc, #48]	; (81e88 <SV_SEND_CAN_MAILBOX+0x7c>)
   81e58:	2200      	movs	r2, #0
   81e5a:	715a      	strb	r2, [r3, #5]
	can0_mailbox.ul_id_msk = 0x7FC ;
   81e5c:	4b0a      	ldr	r3, [pc, #40]	; (81e88 <SV_SEND_CAN_MAILBOX+0x7c>)
   81e5e:	f240 72fc 	movw	r2, #2044	; 0x7fc
   81e62:	60da      	str	r2, [r3, #12]
	can0_mailbox.ul_id = CAN_MID_MIDvA_dd(MASTER_CPU_id); ;
   81e64:	4b08      	ldr	r3, [pc, #32]	; (81e88 <SV_SEND_CAN_MAILBOX+0x7c>)
   81e66:	f44f 1220 	mov.w	r2, #2621440	; 0x280000
   81e6a:	611a      	str	r2, [r3, #16]
	while (CAN_MAILBOX_NOT_READY == dd_can_mailbox_write(&can0_mailbox));	
   81e6c:	bf00      	nop
   81e6e:	4806      	ldr	r0, [pc, #24]	; (81e88 <SV_SEND_CAN_MAILBOX+0x7c>)
   81e70:	4b06      	ldr	r3, [pc, #24]	; (81e8c <SV_SEND_CAN_MAILBOX+0x80>)
   81e72:	4798      	blx	r3
   81e74:	4603      	mov	r3, r0
   81e76:	2b01      	cmp	r3, #1
   81e78:	d0f9      	beq.n	81e6e <SV_SEND_CAN_MAILBOX+0x62>
	//dd_can_mailbox_write(&can0_mailbox);
	dd_can_global_send_transfer_cmd(CAN_TCR_MB0);
   81e7a:	2001      	movs	r0, #1
   81e7c:	4b04      	ldr	r3, [pc, #16]	; (81e90 <SV_SEND_CAN_MAILBOX+0x84>)
   81e7e:	4798      	blx	r3
   81e80:	bf00      	nop
   81e82:	3710      	adds	r7, #16
   81e84:	46bd      	mov	sp, r7
   81e86:	bd80      	pop	{r7, pc}
   81e88:	20070a44 	.word	0x20070a44
   81e8c:	00080571 	.word	0x00080571
   81e90:	0008062d 	.word	0x0008062d

00081e94 <CPU2_S_SYSTEM_INIT>:
#include "S_SYS.h"
#include "Platform/Service/CPU2_S_TIMER/S_TIMER.h"
#include "Platform/Driver/Driver_calls.h"

void CPU2_S_SYSTEM_INIT()
{
   81e94:	b580      	push	{r7, lr}
   81e96:	af00      	add	r7, sp, #0
	CPU2_D_INIT_CLOCK();
   81e98:	4b0a      	ldr	r3, [pc, #40]	; (81ec4 <CPU2_S_SYSTEM_INIT+0x30>)
   81e9a:	4798      	blx	r3
//	CPU2_D_INIT_ADC();
	CPU2_D_INIT_INT();
   81e9c:	4b0a      	ldr	r3, [pc, #40]	; (81ec8 <CPU2_S_SYSTEM_INIT+0x34>)
   81e9e:	4798      	blx	r3
	CPU2_D_INIT_PIO();
   81ea0:	4b0a      	ldr	r3, [pc, #40]	; (81ecc <CPU2_S_SYSTEM_INIT+0x38>)
   81ea2:	4798      	blx	r3
	CPU2_D_INIT_PWM();
   81ea4:	4b0a      	ldr	r3, [pc, #40]	; (81ed0 <CPU2_S_SYSTEM_INIT+0x3c>)
   81ea6:	4798      	blx	r3
	CPU2_D_INIT_TIMER();
   81ea8:	4b0a      	ldr	r3, [pc, #40]	; (81ed4 <CPU2_S_SYSTEM_INIT+0x40>)
   81eaa:	4798      	blx	r3
	DD_INIT_CAN();
   81eac:	4b0a      	ldr	r3, [pc, #40]	; (81ed8 <CPU2_S_SYSTEM_INIT+0x44>)
   81eae:	4798      	blx	r3
	CPU2_DD_INIT_SPI();
   81eb0:	4b0a      	ldr	r3, [pc, #40]	; (81edc <CPU2_S_SYSTEM_INIT+0x48>)
   81eb2:	4798      	blx	r3
	//CPU2_D_INIT_IIC();
	
	CPU2_S_START_TIMER(0,1000);			//1ms means 1000Hz interrupt frequency
   81eb4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   81eb8:	2000      	movs	r0, #0
   81eba:	4b09      	ldr	r3, [pc, #36]	; (81ee0 <CPU2_S_SYSTEM_INIT+0x4c>)
   81ebc:	4798      	blx	r3
}
   81ebe:	bf00      	nop
   81ec0:	bd80      	pop	{r7, pc}
   81ec2:	bf00      	nop
   81ec4:	00080195 	.word	0x00080195
   81ec8:	000813c9 	.word	0x000813c9
   81ecc:	00080ff5 	.word	0x00080ff5
   81ed0:	0008148d 	.word	0x0008148d
   81ed4:	00081a79 	.word	0x00081a79
   81ed8:	00080749 	.word	0x00080749
   81edc:	00080d1d 	.word	0x00080d1d
   81ee0:	00081ee5 	.word	0x00081ee5

00081ee4 <CPU2_S_START_TIMER>:
 */ 
#include "S_TIMER.h"


uint8_t CPU2_S_START_TIMER(uint8_t timer_no, uint32_t timer_res)
{
   81ee4:	b580      	push	{r7, lr}
   81ee6:	b082      	sub	sp, #8
   81ee8:	af00      	add	r7, sp, #0
   81eea:	4603      	mov	r3, r0
   81eec:	6039      	str	r1, [r7, #0]
   81eee:	71fb      	strb	r3, [r7, #7]
	// 	timer_no = 2;
	// 	timer_res = 100;
	// 	printf("inside sv start");
	CPU2_D_CONFIG_TIMER(timer_no, timer_res);
   81ef0:	683b      	ldr	r3, [r7, #0]
   81ef2:	b2da      	uxtb	r2, r3
   81ef4:	79fb      	ldrb	r3, [r7, #7]
   81ef6:	4611      	mov	r1, r2
   81ef8:	4618      	mov	r0, r3
   81efa:	4b03      	ldr	r3, [pc, #12]	; (81f08 <CPU2_S_START_TIMER+0x24>)
   81efc:	4798      	blx	r3
	
	return 0;
   81efe:	2300      	movs	r3, #0
}
   81f00:	4618      	mov	r0, r3
   81f02:	3708      	adds	r7, #8
   81f04:	46bd      	mov	sp, r7
   81f06:	bd80      	pop	{r7, pc}
   81f08:	000819d1 	.word	0x000819d1

00081f0c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   81f0c:	b580      	push	{r7, lr}
   81f0e:	b086      	sub	sp, #24
   81f10:	af00      	add	r7, sp, #0
   81f12:	60f8      	str	r0, [r7, #12]
   81f14:	60b9      	str	r1, [r7, #8]
   81f16:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   81f18:	2300      	movs	r3, #0
   81f1a:	617b      	str	r3, [r7, #20]

	if (file != 0) {
   81f1c:	68fb      	ldr	r3, [r7, #12]
   81f1e:	2b00      	cmp	r3, #0
   81f20:	d012      	beq.n	81f48 <_read+0x3c>
		return -1;
   81f22:	f04f 33ff 	mov.w	r3, #4294967295
   81f26:	e013      	b.n	81f50 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   81f28:	4b0b      	ldr	r3, [pc, #44]	; (81f58 <_read+0x4c>)
   81f2a:	681b      	ldr	r3, [r3, #0]
   81f2c:	4a0b      	ldr	r2, [pc, #44]	; (81f5c <_read+0x50>)
   81f2e:	6812      	ldr	r2, [r2, #0]
   81f30:	68b9      	ldr	r1, [r7, #8]
   81f32:	4610      	mov	r0, r2
   81f34:	4798      	blx	r3
		ptr++;
   81f36:	68bb      	ldr	r3, [r7, #8]
   81f38:	3301      	adds	r3, #1
   81f3a:	60bb      	str	r3, [r7, #8]
		nChars++;
   81f3c:	697b      	ldr	r3, [r7, #20]
   81f3e:	3301      	adds	r3, #1
   81f40:	617b      	str	r3, [r7, #20]

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   81f42:	687b      	ldr	r3, [r7, #4]
   81f44:	3b01      	subs	r3, #1
   81f46:	607b      	str	r3, [r7, #4]
   81f48:	687b      	ldr	r3, [r7, #4]
   81f4a:	2b00      	cmp	r3, #0
   81f4c:	dcec      	bgt.n	81f28 <_read+0x1c>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
   81f4e:	697b      	ldr	r3, [r7, #20]
}
   81f50:	4618      	mov	r0, r3
   81f52:	3718      	adds	r7, #24
   81f54:	46bd      	mov	sp, r7
   81f56:	bd80      	pop	{r7, pc}
   81f58:	20070e88 	.word	0x20070e88
   81f5c:	20070e90 	.word	0x20070e90

00081f60 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   81f60:	b580      	push	{r7, lr}
   81f62:	b086      	sub	sp, #24
   81f64:	af00      	add	r7, sp, #0
   81f66:	60f8      	str	r0, [r7, #12]
   81f68:	60b9      	str	r1, [r7, #8]
   81f6a:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   81f6c:	2300      	movs	r3, #0
   81f6e:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
   81f70:	68fb      	ldr	r3, [r7, #12]
   81f72:	2b01      	cmp	r3, #1
   81f74:	d01e      	beq.n	81fb4 <_write+0x54>
   81f76:	68fb      	ldr	r3, [r7, #12]
   81f78:	2b02      	cmp	r3, #2
   81f7a:	d01b      	beq.n	81fb4 <_write+0x54>
   81f7c:	68fb      	ldr	r3, [r7, #12]
   81f7e:	2b03      	cmp	r3, #3
   81f80:	d018      	beq.n	81fb4 <_write+0x54>
		return -1;
   81f82:	f04f 33ff 	mov.w	r3, #4294967295
   81f86:	e019      	b.n	81fbc <_write+0x5c>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
   81f88:	4b0e      	ldr	r3, [pc, #56]	; (81fc4 <_write+0x64>)
   81f8a:	681a      	ldr	r2, [r3, #0]
   81f8c:	4b0e      	ldr	r3, [pc, #56]	; (81fc8 <_write+0x68>)
   81f8e:	6818      	ldr	r0, [r3, #0]
   81f90:	68bb      	ldr	r3, [r7, #8]
   81f92:	1c59      	adds	r1, r3, #1
   81f94:	60b9      	str	r1, [r7, #8]
   81f96:	781b      	ldrb	r3, [r3, #0]
   81f98:	4619      	mov	r1, r3
   81f9a:	4790      	blx	r2
   81f9c:	4603      	mov	r3, r0
   81f9e:	2b00      	cmp	r3, #0
   81fa0:	da02      	bge.n	81fa8 <_write+0x48>
			return -1;
   81fa2:	f04f 33ff 	mov.w	r3, #4294967295
   81fa6:	e009      	b.n	81fbc <_write+0x5c>
		}
		++nChars;
   81fa8:	697b      	ldr	r3, [r7, #20]
   81faa:	3301      	adds	r3, #1
   81fac:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   81fae:	687b      	ldr	r3, [r7, #4]
   81fb0:	3b01      	subs	r3, #1
   81fb2:	607b      	str	r3, [r7, #4]
   81fb4:	687b      	ldr	r3, [r7, #4]
   81fb6:	2b00      	cmp	r3, #0
   81fb8:	d1e6      	bne.n	81f88 <_write+0x28>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
   81fba:	697b      	ldr	r3, [r7, #20]
}
   81fbc:	4618      	mov	r0, r3
   81fbe:	3718      	adds	r7, #24
   81fc0:	46bd      	mov	sp, r7
   81fc2:	bd80      	pop	{r7, pc}
   81fc4:	20070e8c 	.word	0x20070e8c
   81fc8:	20070e90 	.word	0x20070e90

00081fcc <tc_init>:
 * This is because the setting forces TIOB to be an input even if the
 * external event trigger has not been enabled with \c TC_CMR_ENETRG, and
 * thus prevents normal operation of TIOB.
 */
void tc_init(Tc *p_tc, uint32_t ul_channel, uint32_t ul_mode)
{
   81fcc:	b480      	push	{r7}
   81fce:	b087      	sub	sp, #28
   81fd0:	af00      	add	r7, sp, #0
   81fd2:	60f8      	str	r0, [r7, #12]
   81fd4:	60b9      	str	r1, [r7, #8]
   81fd6:	607a      	str	r2, [r7, #4]
	TcChannel *tc_channel;

	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   81fd8:	68fa      	ldr	r2, [r7, #12]
   81fda:	68bb      	ldr	r3, [r7, #8]
   81fdc:	019b      	lsls	r3, r3, #6
   81fde:	4413      	add	r3, r2
   81fe0:	617b      	str	r3, [r7, #20]

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   81fe2:	697b      	ldr	r3, [r7, #20]
   81fe4:	2202      	movs	r2, #2
   81fe6:	601a      	str	r2, [r3, #0]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   81fe8:	697b      	ldr	r3, [r7, #20]
   81fea:	f04f 32ff 	mov.w	r2, #4294967295
   81fee:	629a      	str	r2, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   81ff0:	697b      	ldr	r3, [r7, #20]
   81ff2:	6a1b      	ldr	r3, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   81ff4:	697b      	ldr	r3, [r7, #20]
   81ff6:	687a      	ldr	r2, [r7, #4]
   81ff8:	605a      	str	r2, [r3, #4]
}
   81ffa:	bf00      	nop
   81ffc:	371c      	adds	r7, #28
   81ffe:	46bd      	mov	sp, r7
   82000:	bc80      	pop	{r7}
   82002:	4770      	bx	lr

00082004 <tc_start>:
 *
 * \param p_tc Pointer to a TC instance.
 * \param ul_channel Channel to configure.
 */
void tc_start(Tc *p_tc, uint32_t ul_channel)
{
   82004:	b480      	push	{r7}
   82006:	b083      	sub	sp, #12
   82008:	af00      	add	r7, sp, #0
   8200a:	6078      	str	r0, [r7, #4]
   8200c:	6039      	str	r1, [r7, #0]
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   8200e:	687a      	ldr	r2, [r7, #4]
   82010:	683b      	ldr	r3, [r7, #0]
   82012:	019b      	lsls	r3, r3, #6
   82014:	4413      	add	r3, r2
   82016:	2205      	movs	r2, #5
   82018:	601a      	str	r2, [r3, #0]
}
   8201a:	bf00      	nop
   8201c:	370c      	adds	r7, #12
   8201e:	46bd      	mov	sp, r7
   82020:	bc80      	pop	{r7}
   82022:	4770      	bx	lr

00082024 <tc_stop>:
 *
 * \param p_tc Pointer to a TC instance.
 * \param ul_channel Channel to configure.
 */
void tc_stop(Tc *p_tc, uint32_t ul_channel)
{
   82024:	b480      	push	{r7}
   82026:	b083      	sub	sp, #12
   82028:	af00      	add	r7, sp, #0
   8202a:	6078      	str	r0, [r7, #4]
   8202c:	6039      	str	r1, [r7, #0]
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
   8202e:	687a      	ldr	r2, [r7, #4]
   82030:	683b      	ldr	r3, [r7, #0]
   82032:	019b      	lsls	r3, r3, #6
   82034:	4413      	add	r3, r2
   82036:	2202      	movs	r2, #2
   82038:	601a      	str	r2, [r3, #0]
}
   8203a:	bf00      	nop
   8203c:	370c      	adds	r7, #12
   8203e:	46bd      	mov	sp, r7
   82040:	bc80      	pop	{r7}
   82042:	4770      	bx	lr

00082044 <tc_write_rc>:
 * \param ul_channel Channel to configure.
 * \param ul_value Value to set in register.
 */
void tc_write_rc(Tc *p_tc, uint32_t ul_channel,
		uint32_t ul_value)
{
   82044:	b480      	push	{r7}
   82046:	b085      	sub	sp, #20
   82048:	af00      	add	r7, sp, #0
   8204a:	60f8      	str	r0, [r7, #12]
   8204c:	60b9      	str	r1, [r7, #8]
   8204e:	607a      	str	r2, [r7, #4]
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
   82050:	68fa      	ldr	r2, [r7, #12]
   82052:	68bb      	ldr	r3, [r7, #8]
   82054:	019b      	lsls	r3, r3, #6
   82056:	4413      	add	r3, r2
   82058:	331c      	adds	r3, #28
   8205a:	687a      	ldr	r2, [r7, #4]
   8205c:	601a      	str	r2, [r3, #0]
}
   8205e:	bf00      	nop
   82060:	3714      	adds	r7, #20
   82062:	46bd      	mov	sp, r7
   82064:	bc80      	pop	{r7}
   82066:	4770      	bx	lr

00082068 <tc_enable_interrupt>:
 * \param ul_channel Channel to configure.
 * \param ul_sources Interrupt sources bit map.
 */
void tc_enable_interrupt(Tc *p_tc, uint32_t ul_channel,
		uint32_t ul_sources)
{
   82068:	b480      	push	{r7}
   8206a:	b087      	sub	sp, #28
   8206c:	af00      	add	r7, sp, #0
   8206e:	60f8      	str	r0, [r7, #12]
   82070:	60b9      	str	r1, [r7, #8]
   82072:	607a      	str	r2, [r7, #4]
	TcChannel *tc_channel;

	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   82074:	68fa      	ldr	r2, [r7, #12]
   82076:	68bb      	ldr	r3, [r7, #8]
   82078:	019b      	lsls	r3, r3, #6
   8207a:	4413      	add	r3, r2
   8207c:	617b      	str	r3, [r7, #20]
	tc_channel->TC_IER = ul_sources;
   8207e:	697b      	ldr	r3, [r7, #20]
   82080:	687a      	ldr	r2, [r7, #4]
   82082:	625a      	str	r2, [r3, #36]	; 0x24
}
   82084:	bf00      	nop
   82086:	371c      	adds	r7, #28
   82088:	46bd      	mov	sp, r7
   8208a:	bc80      	pop	{r7}
   8208c:	4770      	bx	lr
   8208e:	bf00      	nop

00082090 <tc_get_status>:
 * \param ul_channel Channel to configure.
 *
 * \return The current TC status.
 */
uint32_t tc_get_status(Tc *p_tc, uint32_t ul_channel)
{
   82090:	b480      	push	{r7}
   82092:	b085      	sub	sp, #20
   82094:	af00      	add	r7, sp, #0
   82096:	6078      	str	r0, [r7, #4]
   82098:	6039      	str	r1, [r7, #0]
	TcChannel *tc_channel;

	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   8209a:	687a      	ldr	r2, [r7, #4]
   8209c:	683b      	ldr	r3, [r7, #0]
   8209e:	019b      	lsls	r3, r3, #6
   820a0:	4413      	add	r3, r2
   820a2:	60fb      	str	r3, [r7, #12]
	return tc_channel->TC_SR;
   820a4:	68fb      	ldr	r3, [r7, #12]
   820a6:	6a1b      	ldr	r3, [r3, #32]
}
   820a8:	4618      	mov	r0, r3
   820aa:	3714      	adds	r7, #20
   820ac:	46bd      	mov	sp, r7
   820ae:	bc80      	pop	{r7}
   820b0:	4770      	bx	lr
   820b2:	bf00      	nop

000820b4 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   820b4:	b480      	push	{r7}
   820b6:	b085      	sub	sp, #20
   820b8:	af00      	add	r7, sp, #0
   820ba:	6078      	str	r0, [r7, #4]
   820bc:	6039      	str	r1, [r7, #0]
	uint32_t cd = 0;
   820be:	2300      	movs	r3, #0
   820c0:	60fb      	str	r3, [r7, #12]

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   820c2:	687b      	ldr	r3, [r7, #4]
   820c4:	22ac      	movs	r2, #172	; 0xac
   820c6:	601a      	str	r2, [r3, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   820c8:	683b      	ldr	r3, [r7, #0]
   820ca:	681a      	ldr	r2, [r3, #0]
   820cc:	683b      	ldr	r3, [r7, #0]
   820ce:	685b      	ldr	r3, [r3, #4]
   820d0:	fbb2 f3f3 	udiv	r3, r2, r3
   820d4:	091b      	lsrs	r3, r3, #4
   820d6:	60fb      	str	r3, [r7, #12]
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   820d8:	68fb      	ldr	r3, [r7, #12]
   820da:	2b00      	cmp	r3, #0
   820dc:	d003      	beq.n	820e6 <uart_init+0x32>
   820de:	68fb      	ldr	r3, [r7, #12]
   820e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   820e4:	d301      	bcc.n	820ea <uart_init+0x36>
		return 1;
   820e6:	2301      	movs	r3, #1
   820e8:	e00f      	b.n	8210a <uart_init+0x56>

	p_uart->UART_BRGR = cd;
   820ea:	687b      	ldr	r3, [r7, #4]
   820ec:	68fa      	ldr	r2, [r7, #12]
   820ee:	621a      	str	r2, [r3, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   820f0:	683b      	ldr	r3, [r7, #0]
   820f2:	689a      	ldr	r2, [r3, #8]
   820f4:	687b      	ldr	r3, [r7, #4]
   820f6:	605a      	str	r2, [r3, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   820f8:	687b      	ldr	r3, [r7, #4]
   820fa:	f240 2202 	movw	r2, #514	; 0x202
   820fe:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   82102:	687b      	ldr	r3, [r7, #4]
   82104:	2250      	movs	r2, #80	; 0x50
   82106:	601a      	str	r2, [r3, #0]

	return 0;
   82108:	2300      	movs	r3, #0
}
   8210a:	4618      	mov	r0, r3
   8210c:	3714      	adds	r7, #20
   8210e:	46bd      	mov	sp, r7
   82110:	bc80      	pop	{r7}
   82112:	4770      	bx	lr

00082114 <uart_enable_interrupt>:
 *
 * \param p_uart Pointer to a UART instance.
 *  \param ul_sources Interrupts to be enabled.
 */
void uart_enable_interrupt(Uart *p_uart, uint32_t ul_sources)
{
   82114:	b480      	push	{r7}
   82116:	b083      	sub	sp, #12
   82118:	af00      	add	r7, sp, #0
   8211a:	6078      	str	r0, [r7, #4]
   8211c:	6039      	str	r1, [r7, #0]
	p_uart->UART_IER = ul_sources;
   8211e:	687b      	ldr	r3, [r7, #4]
   82120:	683a      	ldr	r2, [r7, #0]
   82122:	609a      	str	r2, [r3, #8]
}
   82124:	bf00      	nop
   82126:	370c      	adds	r7, #12
   82128:	46bd      	mov	sp, r7
   8212a:	bc80      	pop	{r7}
   8212c:	4770      	bx	lr
   8212e:	bf00      	nop

00082130 <uart_write>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
   82130:	b480      	push	{r7}
   82132:	b083      	sub	sp, #12
   82134:	af00      	add	r7, sp, #0
   82136:	6078      	str	r0, [r7, #4]
   82138:	460b      	mov	r3, r1
   8213a:	70fb      	strb	r3, [r7, #3]
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   8213c:	687b      	ldr	r3, [r7, #4]
   8213e:	695b      	ldr	r3, [r3, #20]
   82140:	f003 0302 	and.w	r3, r3, #2
   82144:	2b00      	cmp	r3, #0
   82146:	d101      	bne.n	8214c <uart_write+0x1c>
		return 1;
   82148:	2301      	movs	r3, #1
   8214a:	e003      	b.n	82154 <uart_write+0x24>

	/* Send character */
	p_uart->UART_THR = uc_data;
   8214c:	78fa      	ldrb	r2, [r7, #3]
   8214e:	687b      	ldr	r3, [r7, #4]
   82150:	61da      	str	r2, [r3, #28]
	return 0;
   82152:	2300      	movs	r3, #0
}
   82154:	4618      	mov	r0, r3
   82156:	370c      	adds	r7, #12
   82158:	46bd      	mov	sp, r7
   8215a:	bc80      	pop	{r7}
   8215c:	4770      	bx	lr
   8215e:	bf00      	nop

00082160 <uart_read>:
 *
 * \retval 0 Success.
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
   82160:	b480      	push	{r7}
   82162:	b083      	sub	sp, #12
   82164:	af00      	add	r7, sp, #0
   82166:	6078      	str	r0, [r7, #4]
   82168:	6039      	str	r1, [r7, #0]
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   8216a:	687b      	ldr	r3, [r7, #4]
   8216c:	695b      	ldr	r3, [r3, #20]
   8216e:	f003 0301 	and.w	r3, r3, #1
   82172:	2b00      	cmp	r3, #0
   82174:	d101      	bne.n	8217a <uart_read+0x1a>
		return 1;
   82176:	2301      	movs	r3, #1
   82178:	e005      	b.n	82186 <uart_read+0x26>

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   8217a:	687b      	ldr	r3, [r7, #4]
   8217c:	699b      	ldr	r3, [r3, #24]
   8217e:	b2da      	uxtb	r2, r3
   82180:	683b      	ldr	r3, [r7, #0]
   82182:	701a      	strb	r2, [r3, #0]
	return 0;
   82184:	2300      	movs	r3, #0
}
   82186:	4618      	mov	r0, r3
   82188:	370c      	adds	r7, #12
   8218a:	46bd      	mov	sp, r7
   8218c:	bc80      	pop	{r7}
   8218e:	4770      	bx	lr

00082190 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
static uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   82190:	b480      	push	{r7}
   82192:	b089      	sub	sp, #36	; 0x24
   82194:	af00      	add	r7, sp, #0
   82196:	60f8      	str	r0, [r7, #12]
   82198:	60b9      	str	r1, [r7, #8]
   8219a:	607a      	str	r2, [r7, #4]
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
   8219c:	68bb      	ldr	r3, [r7, #8]
   8219e:	011a      	lsls	r2, r3, #4
   821a0:	687b      	ldr	r3, [r7, #4]
   821a2:	429a      	cmp	r2, r3
   821a4:	d802      	bhi.n	821ac <usart_set_async_baudrate+0x1c>
		over = HIGH_FRQ_SAMPLE_DIV;
   821a6:	2310      	movs	r3, #16
   821a8:	61fb      	str	r3, [r7, #28]
   821aa:	e001      	b.n	821b0 <usart_set_async_baudrate+0x20>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
   821ac:	2308      	movs	r3, #8
   821ae:	61fb      	str	r3, [r7, #28]
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   821b0:	687b      	ldr	r3, [r7, #4]
   821b2:	00da      	lsls	r2, r3, #3
   821b4:	69fb      	ldr	r3, [r7, #28]
   821b6:	68b9      	ldr	r1, [r7, #8]
   821b8:	fb01 f303 	mul.w	r3, r1, r3
   821bc:	085b      	lsrs	r3, r3, #1
   821be:	441a      	add	r2, r3
   821c0:	69fb      	ldr	r3, [r7, #28]
   821c2:	68b9      	ldr	r1, [r7, #8]
   821c4:	fb01 f303 	mul.w	r3, r1, r3
   821c8:	fbb2 f3f3 	udiv	r3, r2, r3
   821cc:	61bb      	str	r3, [r7, #24]
	cd = cd_fp >> 3;
   821ce:	69bb      	ldr	r3, [r7, #24]
   821d0:	08db      	lsrs	r3, r3, #3
   821d2:	617b      	str	r3, [r7, #20]
	fp = cd_fp & 0x07;
   821d4:	69bb      	ldr	r3, [r7, #24]
   821d6:	f003 0307 	and.w	r3, r3, #7
   821da:	613b      	str	r3, [r7, #16]
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   821dc:	697b      	ldr	r3, [r7, #20]
   821de:	2b00      	cmp	r3, #0
   821e0:	d003      	beq.n	821ea <usart_set_async_baudrate+0x5a>
   821e2:	697b      	ldr	r3, [r7, #20]
   821e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   821e8:	d301      	bcc.n	821ee <usart_set_async_baudrate+0x5e>
		return 1;
   821ea:	2301      	movs	r3, #1
   821ec:	e00f      	b.n	8220e <usart_set_async_baudrate+0x7e>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
   821ee:	69fb      	ldr	r3, [r7, #28]
   821f0:	2b08      	cmp	r3, #8
   821f2:	d105      	bne.n	82200 <usart_set_async_baudrate+0x70>
		p_usart->US_MR |= US_MR_OVER;
   821f4:	68fb      	ldr	r3, [r7, #12]
   821f6:	685b      	ldr	r3, [r3, #4]
   821f8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
   821fc:	68fb      	ldr	r3, [r7, #12]
   821fe:	605a      	str	r2, [r3, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
   82200:	693b      	ldr	r3, [r7, #16]
   82202:	041a      	lsls	r2, r3, #16
   82204:	697b      	ldr	r3, [r7, #20]
   82206:	431a      	orrs	r2, r3
   82208:	68fb      	ldr	r3, [r7, #12]
   8220a:	621a      	str	r2, [r3, #32]

	return 0;
   8220c:	2300      	movs	r3, #0
}
   8220e:	4618      	mov	r0, r3
   82210:	3724      	adds	r7, #36	; 0x24
   82212:	46bd      	mov	sp, r7
   82214:	bc80      	pop	{r7}
   82216:	4770      	bx	lr

00082218 <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
   82218:	b580      	push	{r7, lr}
   8221a:	b082      	sub	sp, #8
   8221c:	af00      	add	r7, sp, #0
   8221e:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
   82220:	6878      	ldr	r0, [r7, #4]
   82222:	4b0d      	ldr	r3, [pc, #52]	; (82258 <usart_reset+0x40>)
   82224:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
   82226:	687b      	ldr	r3, [r7, #4]
   82228:	2200      	movs	r2, #0
   8222a:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
   8222c:	687b      	ldr	r3, [r7, #4]
   8222e:	2200      	movs	r2, #0
   82230:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
   82232:	687b      	ldr	r3, [r7, #4]
   82234:	2200      	movs	r2, #0
   82236:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
   82238:	6878      	ldr	r0, [r7, #4]
   8223a:	4b08      	ldr	r3, [pc, #32]	; (8225c <usart_reset+0x44>)
   8223c:	4798      	blx	r3
	usart_reset_rx(p_usart);
   8223e:	6878      	ldr	r0, [r7, #4]
   82240:	4b07      	ldr	r3, [pc, #28]	; (82260 <usart_reset+0x48>)
   82242:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
   82244:	6878      	ldr	r0, [r7, #4]
   82246:	4b07      	ldr	r3, [pc, #28]	; (82264 <usart_reset+0x4c>)
   82248:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
   8224a:	6878      	ldr	r0, [r7, #4]
   8224c:	4b06      	ldr	r3, [pc, #24]	; (82268 <usart_reset+0x50>)
   8224e:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
#endif
}
   82250:	bf00      	nop
   82252:	3708      	adds	r7, #8
   82254:	46bd      	mov	sp, r7
   82256:	bd80      	pop	{r7, pc}
   82258:	000823ed 	.word	0x000823ed
   8225c:	00082309 	.word	0x00082309
   82260:	00082339 	.word	0x00082339
   82264:	00082351 	.word	0x00082351
   82268:	0008236d 	.word	0x0008236d

0008226c <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
   8226c:	b580      	push	{r7, lr}
   8226e:	b084      	sub	sp, #16
   82270:	af00      	add	r7, sp, #0
   82272:	60f8      	str	r0, [r7, #12]
   82274:	60b9      	str	r1, [r7, #8]
   82276:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
   82278:	68f8      	ldr	r0, [r7, #12]
   8227a:	4b1a      	ldr	r3, [pc, #104]	; (822e4 <usart_init_rs232+0x78>)
   8227c:	4798      	blx	r3

	ul_reg_val = 0;
   8227e:	4b1a      	ldr	r3, [pc, #104]	; (822e8 <usart_init_rs232+0x7c>)
   82280:	2200      	movs	r2, #0
   82282:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
   82284:	68bb      	ldr	r3, [r7, #8]
   82286:	2b00      	cmp	r3, #0
   82288:	d009      	beq.n	8229e <usart_init_rs232+0x32>
   8228a:	68bb      	ldr	r3, [r7, #8]
   8228c:	681b      	ldr	r3, [r3, #0]
   8228e:	687a      	ldr	r2, [r7, #4]
   82290:	4619      	mov	r1, r3
   82292:	68f8      	ldr	r0, [r7, #12]
   82294:	4b15      	ldr	r3, [pc, #84]	; (822ec <usart_init_rs232+0x80>)
   82296:	4798      	blx	r3
   82298:	4603      	mov	r3, r0
   8229a:	2b00      	cmp	r3, #0
   8229c:	d001      	beq.n	822a2 <usart_init_rs232+0x36>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
   8229e:	2301      	movs	r3, #1
   822a0:	e01b      	b.n	822da <usart_init_rs232+0x6e>
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   822a2:	68bb      	ldr	r3, [r7, #8]
   822a4:	685a      	ldr	r2, [r3, #4]
   822a6:	68bb      	ldr	r3, [r7, #8]
   822a8:	689b      	ldr	r3, [r3, #8]
   822aa:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   822ac:	68bb      	ldr	r3, [r7, #8]
   822ae:	691b      	ldr	r3, [r3, #16]
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   822b0:	431a      	orrs	r2, r3
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   822b2:	68bb      	ldr	r3, [r7, #8]
   822b4:	68db      	ldr	r3, [r3, #12]
   822b6:	431a      	orrs	r2, r3
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   822b8:	4b0b      	ldr	r3, [pc, #44]	; (822e8 <usart_init_rs232+0x7c>)
   822ba:	681b      	ldr	r3, [r3, #0]
   822bc:	4313      	orrs	r3, r2
   822be:	4a0a      	ldr	r2, [pc, #40]	; (822e8 <usart_init_rs232+0x7c>)
   822c0:	6013      	str	r3, [r2, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;
   822c2:	4b09      	ldr	r3, [pc, #36]	; (822e8 <usart_init_rs232+0x7c>)
   822c4:	681b      	ldr	r3, [r3, #0]
   822c6:	4a08      	ldr	r2, [pc, #32]	; (822e8 <usart_init_rs232+0x7c>)
   822c8:	6013      	str	r3, [r2, #0]

	p_usart->US_MR |= ul_reg_val;
   822ca:	68fb      	ldr	r3, [r7, #12]
   822cc:	685a      	ldr	r2, [r3, #4]
   822ce:	4b06      	ldr	r3, [pc, #24]	; (822e8 <usart_init_rs232+0x7c>)
   822d0:	681b      	ldr	r3, [r3, #0]
   822d2:	431a      	orrs	r2, r3
   822d4:	68fb      	ldr	r3, [r7, #12]
   822d6:	605a      	str	r2, [r3, #4]

	return 0;
   822d8:	2300      	movs	r3, #0
}
   822da:	4618      	mov	r0, r3
   822dc:	3710      	adds	r7, #16
   822de:	46bd      	mov	sp, r7
   822e0:	bd80      	pop	{r7, pc}
   822e2:	bf00      	nop
   822e4:	00082219 	.word	0x00082219
   822e8:	20070968 	.word	0x20070968
   822ec:	00082191 	.word	0x00082191

000822f0 <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
   822f0:	b480      	push	{r7}
   822f2:	b083      	sub	sp, #12
   822f4:	af00      	add	r7, sp, #0
   822f6:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
   822f8:	687b      	ldr	r3, [r7, #4]
   822fa:	2240      	movs	r2, #64	; 0x40
   822fc:	601a      	str	r2, [r3, #0]
}
   822fe:	bf00      	nop
   82300:	370c      	adds	r7, #12
   82302:	46bd      	mov	sp, r7
   82304:	bc80      	pop	{r7}
   82306:	4770      	bx	lr

00082308 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
   82308:	b480      	push	{r7}
   8230a:	b083      	sub	sp, #12
   8230c:	af00      	add	r7, sp, #0
   8230e:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   82310:	687b      	ldr	r3, [r7, #4]
   82312:	2288      	movs	r2, #136	; 0x88
   82314:	601a      	str	r2, [r3, #0]
}
   82316:	bf00      	nop
   82318:	370c      	adds	r7, #12
   8231a:	46bd      	mov	sp, r7
   8231c:	bc80      	pop	{r7}
   8231e:	4770      	bx	lr

00082320 <usart_enable_rx>:
 * \brief Enable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
   82320:	b480      	push	{r7}
   82322:	b083      	sub	sp, #12
   82324:	af00      	add	r7, sp, #0
   82326:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RXEN;
   82328:	687b      	ldr	r3, [r7, #4]
   8232a:	2210      	movs	r2, #16
   8232c:	601a      	str	r2, [r3, #0]
}
   8232e:	bf00      	nop
   82330:	370c      	adds	r7, #12
   82332:	46bd      	mov	sp, r7
   82334:	bc80      	pop	{r7}
   82336:	4770      	bx	lr

00082338 <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
   82338:	b480      	push	{r7}
   8233a:	b083      	sub	sp, #12
   8233c:	af00      	add	r7, sp, #0
   8233e:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   82340:	687b      	ldr	r3, [r7, #4]
   82342:	2224      	movs	r2, #36	; 0x24
   82344:	601a      	str	r2, [r3, #0]
}
   82346:	bf00      	nop
   82348:	370c      	adds	r7, #12
   8234a:	46bd      	mov	sp, r7
   8234c:	bc80      	pop	{r7}
   8234e:	4770      	bx	lr

00082350 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
   82350:	b480      	push	{r7}
   82352:	b083      	sub	sp, #12
   82354:	af00      	add	r7, sp, #0
   82356:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
   82358:	687b      	ldr	r3, [r7, #4]
   8235a:	f44f 7280 	mov.w	r2, #256	; 0x100
   8235e:	601a      	str	r2, [r3, #0]
}
   82360:	bf00      	nop
   82362:	370c      	adds	r7, #12
   82364:	46bd      	mov	sp, r7
   82366:	bc80      	pop	{r7}
   82368:	4770      	bx	lr
   8236a:	bf00      	nop

0008236c <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
   8236c:	b480      	push	{r7}
   8236e:	b083      	sub	sp, #12
   82370:	af00      	add	r7, sp, #0
   82372:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
   82374:	687b      	ldr	r3, [r7, #4]
   82376:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   8237a:	601a      	str	r2, [r3, #0]
}
   8237c:	bf00      	nop
   8237e:	370c      	adds	r7, #12
   82380:	46bd      	mov	sp, r7
   82382:	bc80      	pop	{r7}
   82384:	4770      	bx	lr
   82386:	bf00      	nop

00082388 <usart_write>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
   82388:	b480      	push	{r7}
   8238a:	b083      	sub	sp, #12
   8238c:	af00      	add	r7, sp, #0
   8238e:	6078      	str	r0, [r7, #4]
   82390:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   82392:	687b      	ldr	r3, [r7, #4]
   82394:	695b      	ldr	r3, [r3, #20]
   82396:	f003 0302 	and.w	r3, r3, #2
   8239a:	2b00      	cmp	r3, #0
   8239c:	d101      	bne.n	823a2 <usart_write+0x1a>
		return 1;
   8239e:	2301      	movs	r3, #1
   823a0:	e005      	b.n	823ae <usart_write+0x26>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   823a2:	683b      	ldr	r3, [r7, #0]
   823a4:	f3c3 0208 	ubfx	r2, r3, #0, #9
   823a8:	687b      	ldr	r3, [r7, #4]
   823aa:	61da      	str	r2, [r3, #28]
	return 0;
   823ac:	2300      	movs	r3, #0
}
   823ae:	4618      	mov	r0, r3
   823b0:	370c      	adds	r7, #12
   823b2:	46bd      	mov	sp, r7
   823b4:	bc80      	pop	{r7}
   823b6:	4770      	bx	lr

000823b8 <usart_read>:
 *
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
   823b8:	b480      	push	{r7}
   823ba:	b083      	sub	sp, #12
   823bc:	af00      	add	r7, sp, #0
   823be:	6078      	str	r0, [r7, #4]
   823c0:	6039      	str	r1, [r7, #0]
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   823c2:	687b      	ldr	r3, [r7, #4]
   823c4:	695b      	ldr	r3, [r3, #20]
   823c6:	f003 0301 	and.w	r3, r3, #1
   823ca:	2b00      	cmp	r3, #0
   823cc:	d101      	bne.n	823d2 <usart_read+0x1a>
		return 1;
   823ce:	2301      	movs	r3, #1
   823d0:	e006      	b.n	823e0 <usart_read+0x28>
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   823d2:	687b      	ldr	r3, [r7, #4]
   823d4:	699b      	ldr	r3, [r3, #24]
   823d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
   823da:	683b      	ldr	r3, [r7, #0]
   823dc:	601a      	str	r2, [r3, #0]

	return 0;
   823de:	2300      	movs	r3, #0
}
   823e0:	4618      	mov	r0, r3
   823e2:	370c      	adds	r7, #12
   823e4:	46bd      	mov	sp, r7
   823e6:	bc80      	pop	{r7}
   823e8:	4770      	bx	lr
   823ea:	bf00      	nop

000823ec <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
   823ec:	b480      	push	{r7}
   823ee:	b083      	sub	sp, #12
   823f0:	af00      	add	r7, sp, #0
   823f2:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY(US_WPKEY_VALUE);
   823f4:	687b      	ldr	r3, [r7, #4]
   823f6:	4a04      	ldr	r2, [pc, #16]	; (82408 <usart_disable_writeprotect+0x1c>)
   823f8:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
   823fc:	bf00      	nop
   823fe:	370c      	adds	r7, #12
   82400:	46bd      	mov	sp, r7
   82402:	bc80      	pop	{r7}
   82404:	4770      	bx	lr
   82406:	bf00      	nop
   82408:	55534100 	.word	0x55534100

0008240c <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   8240c:	b480      	push	{r7}
   8240e:	b083      	sub	sp, #12
   82410:	af00      	add	r7, sp, #0
   82412:	4603      	mov	r3, r0
   82414:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   82416:	4908      	ldr	r1, [pc, #32]	; (82438 <NVIC_EnableIRQ+0x2c>)
   82418:	f997 3007 	ldrsb.w	r3, [r7, #7]
   8241c:	095b      	lsrs	r3, r3, #5
   8241e:	79fa      	ldrb	r2, [r7, #7]
   82420:	f002 021f 	and.w	r2, r2, #31
   82424:	2001      	movs	r0, #1
   82426:	fa00 f202 	lsl.w	r2, r0, r2
   8242a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   8242e:	bf00      	nop
   82430:	370c      	adds	r7, #12
   82432:	46bd      	mov	sp, r7
   82434:	bc80      	pop	{r7}
   82436:	4770      	bx	lr
   82438:	e000e100 	.word	0xe000e100

0008243c <NVIC_DisableIRQ>:
    The function disables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
   8243c:	b480      	push	{r7}
   8243e:	b083      	sub	sp, #12
   82440:	af00      	add	r7, sp, #0
   82442:	4603      	mov	r3, r0
   82444:	71fb      	strb	r3, [r7, #7]
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
   82446:	4909      	ldr	r1, [pc, #36]	; (8246c <NVIC_DisableIRQ+0x30>)
   82448:	f997 3007 	ldrsb.w	r3, [r7, #7]
   8244c:	095b      	lsrs	r3, r3, #5
   8244e:	79fa      	ldrb	r2, [r7, #7]
   82450:	f002 021f 	and.w	r2, r2, #31
   82454:	2001      	movs	r0, #1
   82456:	fa00 f202 	lsl.w	r2, r0, r2
   8245a:	3320      	adds	r3, #32
   8245c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   82460:	bf00      	nop
   82462:	370c      	adds	r7, #12
   82464:	46bd      	mov	sp, r7
   82466:	bc80      	pop	{r7}
   82468:	4770      	bx	lr
   8246a:	bf00      	nop
   8246c:	e000e100 	.word	0xe000e100

00082470 <NVIC_ClearPendingIRQ>:
    The function clears the pending bit of an external interrupt.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
   82470:	b480      	push	{r7}
   82472:	b083      	sub	sp, #12
   82474:	af00      	add	r7, sp, #0
   82476:	4603      	mov	r3, r0
   82478:	71fb      	strb	r3, [r7, #7]
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   8247a:	4909      	ldr	r1, [pc, #36]	; (824a0 <NVIC_ClearPendingIRQ+0x30>)
   8247c:	f997 3007 	ldrsb.w	r3, [r7, #7]
   82480:	095b      	lsrs	r3, r3, #5
   82482:	79fa      	ldrb	r2, [r7, #7]
   82484:	f002 021f 	and.w	r2, r2, #31
   82488:	2001      	movs	r0, #1
   8248a:	fa00 f202 	lsl.w	r2, r0, r2
   8248e:	3360      	adds	r3, #96	; 0x60
   82490:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   82494:	bf00      	nop
   82496:	370c      	adds	r7, #12
   82498:	46bd      	mov	sp, r7
   8249a:	bc80      	pop	{r7}
   8249c:	4770      	bx	lr
   8249e:	bf00      	nop
   824a0:	e000e100 	.word	0xe000e100

000824a4 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   824a4:	b480      	push	{r7}
   824a6:	b083      	sub	sp, #12
   824a8:	af00      	add	r7, sp, #0
   824aa:	4603      	mov	r3, r0
   824ac:	6039      	str	r1, [r7, #0]
   824ae:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   824b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
   824b4:	2b00      	cmp	r3, #0
   824b6:	da0b      	bge.n	824d0 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   824b8:	490d      	ldr	r1, [pc, #52]	; (824f0 <NVIC_SetPriority+0x4c>)
   824ba:	79fb      	ldrb	r3, [r7, #7]
   824bc:	f003 030f 	and.w	r3, r3, #15
   824c0:	3b04      	subs	r3, #4
   824c2:	683a      	ldr	r2, [r7, #0]
   824c4:	b2d2      	uxtb	r2, r2
   824c6:	0112      	lsls	r2, r2, #4
   824c8:	b2d2      	uxtb	r2, r2
   824ca:	440b      	add	r3, r1
   824cc:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
   824ce:	e009      	b.n	824e4 <NVIC_SetPriority+0x40>
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   824d0:	4908      	ldr	r1, [pc, #32]	; (824f4 <NVIC_SetPriority+0x50>)
   824d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
   824d6:	683a      	ldr	r2, [r7, #0]
   824d8:	b2d2      	uxtb	r2, r2
   824da:	0112      	lsls	r2, r2, #4
   824dc:	b2d2      	uxtb	r2, r2
   824de:	440b      	add	r3, r1
   824e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   824e4:	bf00      	nop
   824e6:	370c      	adds	r7, #12
   824e8:	46bd      	mov	sp, r7
   824ea:	bc80      	pop	{r7}
   824ec:	4770      	bx	lr
   824ee:	bf00      	nop
   824f0:	e000ed00 	.word	0xe000ed00
   824f4:	e000e100 	.word	0xe000e100

000824f8 <osc_get_rate>:

	return 0;
}

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   824f8:	b480      	push	{r7}
   824fa:	b083      	sub	sp, #12
   824fc:	af00      	add	r7, sp, #0
   824fe:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   82500:	687b      	ldr	r3, [r7, #4]
   82502:	2b07      	cmp	r3, #7
   82504:	d825      	bhi.n	82552 <osc_get_rate+0x5a>
   82506:	a201      	add	r2, pc, #4	; (adr r2, 8250c <osc_get_rate+0x14>)
   82508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8250c:	0008252d 	.word	0x0008252d
   82510:	00082533 	.word	0x00082533
   82514:	00082539 	.word	0x00082539
   82518:	0008253f 	.word	0x0008253f
   8251c:	00082543 	.word	0x00082543
   82520:	00082547 	.word	0x00082547
   82524:	0008254b 	.word	0x0008254b
   82528:	0008254f 	.word	0x0008254f
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   8252c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   82530:	e010      	b.n	82554 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   82532:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   82536:	e00d      	b.n	82554 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   82538:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   8253c:	e00a      	b.n	82554 <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   8253e:	4b08      	ldr	r3, [pc, #32]	; (82560 <osc_get_rate+0x68>)
   82540:	e008      	b.n	82554 <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   82542:	4b08      	ldr	r3, [pc, #32]	; (82564 <osc_get_rate+0x6c>)
   82544:	e006      	b.n	82554 <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   82546:	4b08      	ldr	r3, [pc, #32]	; (82568 <osc_get_rate+0x70>)
   82548:	e004      	b.n	82554 <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   8254a:	4b07      	ldr	r3, [pc, #28]	; (82568 <osc_get_rate+0x70>)
   8254c:	e002      	b.n	82554 <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   8254e:	4b06      	ldr	r3, [pc, #24]	; (82568 <osc_get_rate+0x70>)
   82550:	e000      	b.n	82554 <osc_get_rate+0x5c>
#endif
	}

	return 0;
   82552:	2300      	movs	r3, #0
}
   82554:	4618      	mov	r0, r3
   82556:	370c      	adds	r7, #12
   82558:	46bd      	mov	sp, r7
   8255a:	bc80      	pop	{r7}
   8255c:	4770      	bx	lr
   8255e:	bf00      	nop
   82560:	003d0900 	.word	0x003d0900
   82564:	007a1200 	.word	0x007a1200
   82568:	00b71b00 	.word	0x00b71b00

0008256c <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   8256c:	b580      	push	{r7, lr}
   8256e:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   82570:	2006      	movs	r0, #6
   82572:	4b04      	ldr	r3, [pc, #16]	; (82584 <sysclk_get_main_hz+0x18>)
   82574:	4798      	blx	r3
   82576:	4602      	mov	r2, r0
   82578:	4613      	mov	r3, r2
   8257a:	00db      	lsls	r3, r3, #3
   8257c:	1a9b      	subs	r3, r3, r2
   8257e:	005b      	lsls	r3, r3, #1
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   82580:	4618      	mov	r0, r3
   82582:	bd80      	pop	{r7, pc}
   82584:	000824f9 	.word	0x000824f9

00082588 <sysclk_get_peripheral_hz>:
 * \brief Retrieves the current rate in Hz of the peripheral clocks.
 *
 * \return Frequency of the peripheral clocks, in Hz.
 */
static inline uint32_t sysclk_get_peripheral_hz(void)
{
   82588:	b580      	push	{r7, lr}
   8258a:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   8258c:	4b02      	ldr	r3, [pc, #8]	; (82598 <sysclk_get_peripheral_hz+0x10>)
   8258e:	4798      	blx	r3
   82590:	4603      	mov	r3, r0
   82592:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   82594:	4618      	mov	r0, r3
   82596:	bd80      	pop	{r7, pc}
   82598:	0008256d 	.word	0x0008256d

0008259c <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   8259c:	b580      	push	{r7, lr}
   8259e:	b082      	sub	sp, #8
   825a0:	af00      	add	r7, sp, #0
   825a2:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   825a4:	6878      	ldr	r0, [r7, #4]
   825a6:	4b03      	ldr	r3, [pc, #12]	; (825b4 <sysclk_enable_peripheral_clock+0x18>)
   825a8:	4798      	blx	r3
}
   825aa:	bf00      	nop
   825ac:	3708      	adds	r7, #8
   825ae:	46bd      	mov	sp, r7
   825b0:	bd80      	pop	{r7, pc}
   825b2:	bf00      	nop
   825b4:	00083e21 	.word	0x00083e21

000825b8 <usart_serial_init>:
 * \param opt      Options needed to set up RS232 communication (see
 * \ref usart_options_t).
 */
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
   825b8:	b580      	push	{r7, lr}
   825ba:	b08c      	sub	sp, #48	; 0x30
   825bc:	af00      	add	r7, sp, #0
   825be:	6078      	str	r0, [r7, #4]
   825c0:	6039      	str	r1, [r7, #0]
#if (!SAM4L)
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   825c2:	4b40      	ldr	r3, [pc, #256]	; (826c4 <usart_serial_init+0x10c>)
   825c4:	4798      	blx	r3
   825c6:	4603      	mov	r3, r0
   825c8:	623b      	str	r3, [r7, #32]
	uart_settings.ul_baudrate = opt->baudrate;
   825ca:	683b      	ldr	r3, [r7, #0]
   825cc:	681b      	ldr	r3, [r3, #0]
   825ce:	627b      	str	r3, [r7, #36]	; 0x24
	uart_settings.ul_mode = opt->paritytype;
   825d0:	683b      	ldr	r3, [r7, #0]
   825d2:	689b      	ldr	r3, [r3, #8]
   825d4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
   825d6:	683b      	ldr	r3, [r7, #0]
   825d8:	681b      	ldr	r3, [r3, #0]
   825da:	60bb      	str	r3, [r7, #8]
	usart_settings.char_length = opt->charlength;
   825dc:	683b      	ldr	r3, [r7, #0]
   825de:	685b      	ldr	r3, [r3, #4]
   825e0:	60fb      	str	r3, [r7, #12]
	usart_settings.parity_type = opt->paritytype;
   825e2:	683b      	ldr	r3, [r7, #0]
   825e4:	689b      	ldr	r3, [r3, #8]
   825e6:	613b      	str	r3, [r7, #16]
	usart_settings.stop_bits= opt->stopbits;
   825e8:	683b      	ldr	r3, [r7, #0]
   825ea:	7b1b      	ldrb	r3, [r3, #12]
   825ec:	617b      	str	r3, [r7, #20]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
   825ee:	2300      	movs	r3, #0
   825f0:	61bb      	str	r3, [r7, #24]
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
   825f2:	687b      	ldr	r3, [r7, #4]
   825f4:	4a34      	ldr	r2, [pc, #208]	; (826c8 <usart_serial_init+0x110>)
   825f6:	4293      	cmp	r3, r2
   825f8:	d108      	bne.n	8260c <usart_serial_init+0x54>
		sysclk_enable_peripheral_clock(ID_UART);
   825fa:	2008      	movs	r0, #8
   825fc:	4b33      	ldr	r3, [pc, #204]	; (826cc <usart_serial_init+0x114>)
   825fe:	4798      	blx	r3
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   82600:	f107 0320 	add.w	r3, r7, #32
   82604:	4619      	mov	r1, r3
   82606:	6878      	ldr	r0, [r7, #4]
   82608:	4b31      	ldr	r3, [pc, #196]	; (826d0 <usart_serial_init+0x118>)
   8260a:	4798      	blx	r3
		usart_enable_tx(p_usart);
		usart_enable_rx(p_usart);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   8260c:	687b      	ldr	r3, [r7, #4]
   8260e:	4a31      	ldr	r2, [pc, #196]	; (826d4 <usart_serial_init+0x11c>)
   82610:	4293      	cmp	r3, r2
   82612:	d111      	bne.n	82638 <usart_serial_init+0x80>
#if (!SAM4L)
		sysclk_enable_peripheral_clock(ID_USART0);
   82614:	2011      	movs	r0, #17
   82616:	4b2d      	ldr	r3, [pc, #180]	; (826cc <usart_serial_init+0x114>)
   82618:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
   8261a:	4b2a      	ldr	r3, [pc, #168]	; (826c4 <usart_serial_init+0x10c>)
   8261c:	4798      	blx	r3
   8261e:	4602      	mov	r2, r0
   82620:	f107 0308 	add.w	r3, r7, #8
   82624:	4619      	mov	r1, r3
   82626:	6878      	ldr	r0, [r7, #4]
   82628:	4b2b      	ldr	r3, [pc, #172]	; (826d8 <usart_serial_init+0x120>)
   8262a:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
   8262c:	6878      	ldr	r0, [r7, #4]
   8262e:	4b2b      	ldr	r3, [pc, #172]	; (826dc <usart_serial_init+0x124>)
   82630:	4798      	blx	r3
		usart_enable_rx(p_usart);
   82632:	6878      	ldr	r0, [r7, #4]
   82634:	4b2a      	ldr	r3, [pc, #168]	; (826e0 <usart_serial_init+0x128>)
   82636:	4798      	blx	r3
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   82638:	687b      	ldr	r3, [r7, #4]
   8263a:	4a2a      	ldr	r2, [pc, #168]	; (826e4 <usart_serial_init+0x12c>)
   8263c:	4293      	cmp	r3, r2
   8263e:	d111      	bne.n	82664 <usart_serial_init+0xac>
#if (!SAM4L)
		sysclk_enable_peripheral_clock(ID_USART1);
   82640:	2012      	movs	r0, #18
   82642:	4b22      	ldr	r3, [pc, #136]	; (826cc <usart_serial_init+0x114>)
   82644:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
   82646:	4b1f      	ldr	r3, [pc, #124]	; (826c4 <usart_serial_init+0x10c>)
   82648:	4798      	blx	r3
   8264a:	4602      	mov	r2, r0
   8264c:	f107 0308 	add.w	r3, r7, #8
   82650:	4619      	mov	r1, r3
   82652:	6878      	ldr	r0, [r7, #4]
   82654:	4b20      	ldr	r3, [pc, #128]	; (826d8 <usart_serial_init+0x120>)
   82656:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
   82658:	6878      	ldr	r0, [r7, #4]
   8265a:	4b20      	ldr	r3, [pc, #128]	; (826dc <usart_serial_init+0x124>)
   8265c:	4798      	blx	r3
		usart_enable_rx(p_usart);
   8265e:	6878      	ldr	r0, [r7, #4]
   82660:	4b1f      	ldr	r3, [pc, #124]	; (826e0 <usart_serial_init+0x128>)
   82662:	4798      	blx	r3
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   82664:	687b      	ldr	r3, [r7, #4]
   82666:	4a20      	ldr	r2, [pc, #128]	; (826e8 <usart_serial_init+0x130>)
   82668:	4293      	cmp	r3, r2
   8266a:	d111      	bne.n	82690 <usart_serial_init+0xd8>
#if (!SAM4L)
		sysclk_enable_peripheral_clock(ID_USART2);
   8266c:	2013      	movs	r0, #19
   8266e:	4b17      	ldr	r3, [pc, #92]	; (826cc <usart_serial_init+0x114>)
   82670:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
   82672:	4b14      	ldr	r3, [pc, #80]	; (826c4 <usart_serial_init+0x10c>)
   82674:	4798      	blx	r3
   82676:	4602      	mov	r2, r0
   82678:	f107 0308 	add.w	r3, r7, #8
   8267c:	4619      	mov	r1, r3
   8267e:	6878      	ldr	r0, [r7, #4]
   82680:	4b15      	ldr	r3, [pc, #84]	; (826d8 <usart_serial_init+0x120>)
   82682:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
   82684:	6878      	ldr	r0, [r7, #4]
   82686:	4b15      	ldr	r3, [pc, #84]	; (826dc <usart_serial_init+0x124>)
   82688:	4798      	blx	r3
		usart_enable_rx(p_usart);
   8268a:	6878      	ldr	r0, [r7, #4]
   8268c:	4b14      	ldr	r3, [pc, #80]	; (826e0 <usart_serial_init+0x128>)
   8268e:	4798      	blx	r3
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   82690:	687b      	ldr	r3, [r7, #4]
   82692:	4a16      	ldr	r2, [pc, #88]	; (826ec <usart_serial_init+0x134>)
   82694:	4293      	cmp	r3, r2
   82696:	d111      	bne.n	826bc <usart_serial_init+0x104>
#if (!SAM4L)
		sysclk_enable_peripheral_clock(ID_USART3);
   82698:	2014      	movs	r0, #20
   8269a:	4b0c      	ldr	r3, [pc, #48]	; (826cc <usart_serial_init+0x114>)
   8269c:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
   8269e:	4b09      	ldr	r3, [pc, #36]	; (826c4 <usart_serial_init+0x10c>)
   826a0:	4798      	blx	r3
   826a2:	4602      	mov	r2, r0
   826a4:	f107 0308 	add.w	r3, r7, #8
   826a8:	4619      	mov	r1, r3
   826aa:	6878      	ldr	r0, [r7, #4]
   826ac:	4b0a      	ldr	r3, [pc, #40]	; (826d8 <usart_serial_init+0x120>)
   826ae:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
   826b0:	6878      	ldr	r0, [r7, #4]
   826b2:	4b0a      	ldr	r3, [pc, #40]	; (826dc <usart_serial_init+0x124>)
   826b4:	4798      	blx	r3
		usart_enable_rx(p_usart);
   826b6:	6878      	ldr	r0, [r7, #4]
   826b8:	4b09      	ldr	r3, [pc, #36]	; (826e0 <usart_serial_init+0x128>)
   826ba:	4798      	blx	r3
		usart_enable_rx(p_usart);
	}
# endif
#endif /* ifdef USART */

}
   826bc:	bf00      	nop
   826be:	3730      	adds	r7, #48	; 0x30
   826c0:	46bd      	mov	sp, r7
   826c2:	bd80      	pop	{r7, pc}
   826c4:	00082589 	.word	0x00082589
   826c8:	400e0800 	.word	0x400e0800
   826cc:	0008259d 	.word	0x0008259d
   826d0:	000820b5 	.word	0x000820b5
   826d4:	40098000 	.word	0x40098000
   826d8:	0008226d 	.word	0x0008226d
   826dc:	000822f1 	.word	0x000822f1
   826e0:	00082321 	.word	0x00082321
   826e4:	4009c000 	.word	0x4009c000
   826e8:	400a0000 	.word	0x400a0000
   826ec:	400a4000 	.word	0x400a4000

000826f0 <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   826f0:	b580      	push	{r7, lr}
   826f2:	b082      	sub	sp, #8
   826f4:	af00      	add	r7, sp, #0
   826f6:	6078      	str	r0, [r7, #4]
   826f8:	460b      	mov	r3, r1
   826fa:	70fb      	strb	r3, [r7, #3]
#ifdef UART
	if (UART == (Uart*)p_usart) {
   826fc:	687b      	ldr	r3, [r7, #4]
   826fe:	4a27      	ldr	r2, [pc, #156]	; (8279c <usart_serial_putchar+0xac>)
   82700:	4293      	cmp	r3, r2
   82702:	d10a      	bne.n	8271a <usart_serial_putchar+0x2a>
		while (uart_write((Uart*)p_usart, c)!=0);
   82704:	bf00      	nop
   82706:	78fb      	ldrb	r3, [r7, #3]
   82708:	4619      	mov	r1, r3
   8270a:	6878      	ldr	r0, [r7, #4]
   8270c:	4b24      	ldr	r3, [pc, #144]	; (827a0 <usart_serial_putchar+0xb0>)
   8270e:	4798      	blx	r3
   82710:	4603      	mov	r3, r0
   82712:	2b00      	cmp	r3, #0
   82714:	d1f7      	bne.n	82706 <usart_serial_putchar+0x16>
		return 1;
   82716:	2301      	movs	r3, #1
   82718:	e03c      	b.n	82794 <usart_serial_putchar+0xa4>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   8271a:	687b      	ldr	r3, [r7, #4]
   8271c:	4a21      	ldr	r2, [pc, #132]	; (827a4 <usart_serial_putchar+0xb4>)
   8271e:	4293      	cmp	r3, r2
   82720:	d10a      	bne.n	82738 <usart_serial_putchar+0x48>
		while (usart_write(p_usart, c)!=0);
   82722:	bf00      	nop
   82724:	78fb      	ldrb	r3, [r7, #3]
   82726:	4619      	mov	r1, r3
   82728:	6878      	ldr	r0, [r7, #4]
   8272a:	4b1f      	ldr	r3, [pc, #124]	; (827a8 <usart_serial_putchar+0xb8>)
   8272c:	4798      	blx	r3
   8272e:	4603      	mov	r3, r0
   82730:	2b00      	cmp	r3, #0
   82732:	d1f7      	bne.n	82724 <usart_serial_putchar+0x34>
		return 1;
   82734:	2301      	movs	r3, #1
   82736:	e02d      	b.n	82794 <usart_serial_putchar+0xa4>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   82738:	687b      	ldr	r3, [r7, #4]
   8273a:	4a1c      	ldr	r2, [pc, #112]	; (827ac <usart_serial_putchar+0xbc>)
   8273c:	4293      	cmp	r3, r2
   8273e:	d10a      	bne.n	82756 <usart_serial_putchar+0x66>
		while (usart_write(p_usart, c)!=0);
   82740:	bf00      	nop
   82742:	78fb      	ldrb	r3, [r7, #3]
   82744:	4619      	mov	r1, r3
   82746:	6878      	ldr	r0, [r7, #4]
   82748:	4b17      	ldr	r3, [pc, #92]	; (827a8 <usart_serial_putchar+0xb8>)
   8274a:	4798      	blx	r3
   8274c:	4603      	mov	r3, r0
   8274e:	2b00      	cmp	r3, #0
   82750:	d1f7      	bne.n	82742 <usart_serial_putchar+0x52>
		return 1;
   82752:	2301      	movs	r3, #1
   82754:	e01e      	b.n	82794 <usart_serial_putchar+0xa4>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   82756:	687b      	ldr	r3, [r7, #4]
   82758:	4a15      	ldr	r2, [pc, #84]	; (827b0 <usart_serial_putchar+0xc0>)
   8275a:	4293      	cmp	r3, r2
   8275c:	d10a      	bne.n	82774 <usart_serial_putchar+0x84>
		while (usart_write(p_usart, c)!=0);
   8275e:	bf00      	nop
   82760:	78fb      	ldrb	r3, [r7, #3]
   82762:	4619      	mov	r1, r3
   82764:	6878      	ldr	r0, [r7, #4]
   82766:	4b10      	ldr	r3, [pc, #64]	; (827a8 <usart_serial_putchar+0xb8>)
   82768:	4798      	blx	r3
   8276a:	4603      	mov	r3, r0
   8276c:	2b00      	cmp	r3, #0
   8276e:	d1f7      	bne.n	82760 <usart_serial_putchar+0x70>
		return 1;
   82770:	2301      	movs	r3, #1
   82772:	e00f      	b.n	82794 <usart_serial_putchar+0xa4>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   82774:	687b      	ldr	r3, [r7, #4]
   82776:	4a0f      	ldr	r2, [pc, #60]	; (827b4 <usart_serial_putchar+0xc4>)
   82778:	4293      	cmp	r3, r2
   8277a:	d10a      	bne.n	82792 <usart_serial_putchar+0xa2>
		while (usart_write(p_usart, c)!=0);
   8277c:	bf00      	nop
   8277e:	78fb      	ldrb	r3, [r7, #3]
   82780:	4619      	mov	r1, r3
   82782:	6878      	ldr	r0, [r7, #4]
   82784:	4b08      	ldr	r3, [pc, #32]	; (827a8 <usart_serial_putchar+0xb8>)
   82786:	4798      	blx	r3
   82788:	4603      	mov	r3, r0
   8278a:	2b00      	cmp	r3, #0
   8278c:	d1f7      	bne.n	8277e <usart_serial_putchar+0x8e>
		return 1;
   8278e:	2301      	movs	r3, #1
   82790:	e000      	b.n	82794 <usart_serial_putchar+0xa4>
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   82792:	2300      	movs	r3, #0
}
   82794:	4618      	mov	r0, r3
   82796:	3708      	adds	r7, #8
   82798:	46bd      	mov	sp, r7
   8279a:	bd80      	pop	{r7, pc}
   8279c:	400e0800 	.word	0x400e0800
   827a0:	00082131 	.word	0x00082131
   827a4:	40098000 	.word	0x40098000
   827a8:	00082389 	.word	0x00082389
   827ac:	4009c000 	.word	0x4009c000
   827b0:	400a0000 	.word	0x400a0000
   827b4:	400a4000 	.word	0x400a4000

000827b8 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   827b8:	b580      	push	{r7, lr}
   827ba:	b084      	sub	sp, #16
   827bc:	af00      	add	r7, sp, #0
   827be:	6078      	str	r0, [r7, #4]
   827c0:	6039      	str	r1, [r7, #0]
	uint32_t val = 0;
   827c2:	2300      	movs	r3, #0
   827c4:	60fb      	str	r3, [r7, #12]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   827c6:	687b      	ldr	r3, [r7, #4]
   827c8:	4a2b      	ldr	r2, [pc, #172]	; (82878 <usart_serial_getchar+0xc0>)
   827ca:	4293      	cmp	r3, r2
   827cc:	d107      	bne.n	827de <usart_serial_getchar+0x26>
		while (uart_read((Uart*)p_usart, data));
   827ce:	bf00      	nop
   827d0:	6839      	ldr	r1, [r7, #0]
   827d2:	6878      	ldr	r0, [r7, #4]
   827d4:	4b29      	ldr	r3, [pc, #164]	; (8287c <usart_serial_getchar+0xc4>)
   827d6:	4798      	blx	r3
   827d8:	4603      	mov	r3, r0
   827da:	2b00      	cmp	r3, #0
   827dc:	d1f8      	bne.n	827d0 <usart_serial_getchar+0x18>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   827de:	687b      	ldr	r3, [r7, #4]
   827e0:	4a27      	ldr	r2, [pc, #156]	; (82880 <usart_serial_getchar+0xc8>)
   827e2:	4293      	cmp	r3, r2
   827e4:	d10d      	bne.n	82802 <usart_serial_getchar+0x4a>
		while (usart_read(p_usart, &val));
   827e6:	bf00      	nop
   827e8:	f107 030c 	add.w	r3, r7, #12
   827ec:	4619      	mov	r1, r3
   827ee:	6878      	ldr	r0, [r7, #4]
   827f0:	4b24      	ldr	r3, [pc, #144]	; (82884 <usart_serial_getchar+0xcc>)
   827f2:	4798      	blx	r3
   827f4:	4603      	mov	r3, r0
   827f6:	2b00      	cmp	r3, #0
   827f8:	d1f6      	bne.n	827e8 <usart_serial_getchar+0x30>
		*data = (uint8_t)(val & 0xFF);
   827fa:	68fb      	ldr	r3, [r7, #12]
   827fc:	b2da      	uxtb	r2, r3
   827fe:	683b      	ldr	r3, [r7, #0]
   82800:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   82802:	687b      	ldr	r3, [r7, #4]
   82804:	4a20      	ldr	r2, [pc, #128]	; (82888 <usart_serial_getchar+0xd0>)
   82806:	4293      	cmp	r3, r2
   82808:	d10d      	bne.n	82826 <usart_serial_getchar+0x6e>
		while (usart_read(p_usart, &val));
   8280a:	bf00      	nop
   8280c:	f107 030c 	add.w	r3, r7, #12
   82810:	4619      	mov	r1, r3
   82812:	6878      	ldr	r0, [r7, #4]
   82814:	4b1b      	ldr	r3, [pc, #108]	; (82884 <usart_serial_getchar+0xcc>)
   82816:	4798      	blx	r3
   82818:	4603      	mov	r3, r0
   8281a:	2b00      	cmp	r3, #0
   8281c:	d1f6      	bne.n	8280c <usart_serial_getchar+0x54>
		*data = (uint8_t)(val & 0xFF);
   8281e:	68fb      	ldr	r3, [r7, #12]
   82820:	b2da      	uxtb	r2, r3
   82822:	683b      	ldr	r3, [r7, #0]
   82824:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   82826:	687b      	ldr	r3, [r7, #4]
   82828:	4a18      	ldr	r2, [pc, #96]	; (8288c <usart_serial_getchar+0xd4>)
   8282a:	4293      	cmp	r3, r2
   8282c:	d10d      	bne.n	8284a <usart_serial_getchar+0x92>
		while (usart_read(p_usart, &val));
   8282e:	bf00      	nop
   82830:	f107 030c 	add.w	r3, r7, #12
   82834:	4619      	mov	r1, r3
   82836:	6878      	ldr	r0, [r7, #4]
   82838:	4b12      	ldr	r3, [pc, #72]	; (82884 <usart_serial_getchar+0xcc>)
   8283a:	4798      	blx	r3
   8283c:	4603      	mov	r3, r0
   8283e:	2b00      	cmp	r3, #0
   82840:	d1f6      	bne.n	82830 <usart_serial_getchar+0x78>
		*data = (uint8_t)(val & 0xFF);
   82842:	68fb      	ldr	r3, [r7, #12]
   82844:	b2da      	uxtb	r2, r3
   82846:	683b      	ldr	r3, [r7, #0]
   82848:	701a      	strb	r2, [r3, #0]
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   8284a:	687b      	ldr	r3, [r7, #4]
   8284c:	4a10      	ldr	r2, [pc, #64]	; (82890 <usart_serial_getchar+0xd8>)
   8284e:	4293      	cmp	r3, r2
   82850:	d10d      	bne.n	8286e <usart_serial_getchar+0xb6>
		while (usart_read(p_usart, &val));
   82852:	bf00      	nop
   82854:	f107 030c 	add.w	r3, r7, #12
   82858:	4619      	mov	r1, r3
   8285a:	6878      	ldr	r0, [r7, #4]
   8285c:	4b09      	ldr	r3, [pc, #36]	; (82884 <usart_serial_getchar+0xcc>)
   8285e:	4798      	blx	r3
   82860:	4603      	mov	r3, r0
   82862:	2b00      	cmp	r3, #0
   82864:	d1f6      	bne.n	82854 <usart_serial_getchar+0x9c>
		*data = (uint8_t)(val & 0xFF);
   82866:	68fb      	ldr	r3, [r7, #12]
   82868:	b2da      	uxtb	r2, r3
   8286a:	683b      	ldr	r3, [r7, #0]
   8286c:	701a      	strb	r2, [r3, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   8286e:	bf00      	nop
   82870:	3710      	adds	r7, #16
   82872:	46bd      	mov	sp, r7
   82874:	bd80      	pop	{r7, pc}
   82876:	bf00      	nop
   82878:	400e0800 	.word	0x400e0800
   8287c:	00082161 	.word	0x00082161
   82880:	40098000 	.word	0x40098000
   82884:	000823b9 	.word	0x000823b9
   82888:	4009c000 	.word	0x4009c000
   8288c:	400a0000 	.word	0x400a0000
   82890:	400a4000 	.word	0x400a4000

00082894 <stdio_serial_init>:
 * \param usart       Base address of the USART instance.
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
   82894:	b580      	push	{r7, lr}
   82896:	b082      	sub	sp, #8
   82898:	af00      	add	r7, sp, #0
   8289a:	6078      	str	r0, [r7, #4]
   8289c:	6039      	str	r1, [r7, #0]
	stdio_base = (void *)usart;
   8289e:	4a0f      	ldr	r2, [pc, #60]	; (828dc <stdio_serial_init+0x48>)
   828a0:	687b      	ldr	r3, [r7, #4]
   828a2:	6013      	str	r3, [r2, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   828a4:	4b0e      	ldr	r3, [pc, #56]	; (828e0 <stdio_serial_init+0x4c>)
   828a6:	4a0f      	ldr	r2, [pc, #60]	; (828e4 <stdio_serial_init+0x50>)
   828a8:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   828aa:	4b0f      	ldr	r3, [pc, #60]	; (828e8 <stdio_serial_init+0x54>)
   828ac:	4a0f      	ldr	r2, [pc, #60]	; (828ec <stdio_serial_init+0x58>)
   828ae:	601a      	str	r2, [r3, #0]
# if (XMEGA || MEGA_RF)
	usart_serial_init((USART_t *)usart,opt);
# elif UC3
	usart_serial_init(usart,(usart_serial_options_t *)opt);
# elif SAM
	usart_serial_init((Usart *)usart,(usart_serial_options_t *)opt);
   828b0:	6839      	ldr	r1, [r7, #0]
   828b2:	6878      	ldr	r0, [r7, #4]
   828b4:	4b0e      	ldr	r3, [pc, #56]	; (828f0 <stdio_serial_init+0x5c>)
   828b6:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   828b8:	4b0e      	ldr	r3, [pc, #56]	; (828f4 <stdio_serial_init+0x60>)
   828ba:	681b      	ldr	r3, [r3, #0]
   828bc:	689b      	ldr	r3, [r3, #8]
   828be:	2100      	movs	r1, #0
   828c0:	4618      	mov	r0, r3
   828c2:	4b0d      	ldr	r3, [pc, #52]	; (828f8 <stdio_serial_init+0x64>)
   828c4:	4798      	blx	r3
	setbuf(stdin, NULL);
   828c6:	4b0b      	ldr	r3, [pc, #44]	; (828f4 <stdio_serial_init+0x60>)
   828c8:	681b      	ldr	r3, [r3, #0]
   828ca:	685b      	ldr	r3, [r3, #4]
   828cc:	2100      	movs	r1, #0
   828ce:	4618      	mov	r0, r3
   828d0:	4b09      	ldr	r3, [pc, #36]	; (828f8 <stdio_serial_init+0x64>)
   828d2:	4798      	blx	r3
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
#  endif
# endif
}
   828d4:	bf00      	nop
   828d6:	3708      	adds	r7, #8
   828d8:	46bd      	mov	sp, r7
   828da:	bd80      	pop	{r7, pc}
   828dc:	20070e90 	.word	0x20070e90
   828e0:	20070e8c 	.word	0x20070e8c
   828e4:	000826f1 	.word	0x000826f1
   828e8:	20070e88 	.word	0x20070e88
   828ec:	000827b9 	.word	0x000827b9
   828f0:	000825b9 	.word	0x000825b9
   828f4:	200704d8 	.word	0x200704d8
   828f8:	0008472d 	.word	0x0008472d

000828fc <configure_console>:
{
	{50,700,50},{60,750,57},{65,750,64},{70,750,70},{75,750,74},{80,750,78},{85,750,82},{90,750,86},{95,750,90},{100,760,100},{110,780,110},{120,810,120},
	{140,810,140},{150,850,150},{200,970,200},{300,1200,290},{400,1250,350}	
};
static void configure_console(void)
{
   828fc:	b580      	push	{r7, lr}
   828fe:	b084      	sub	sp, #16
   82900:	af00      	add	r7, sp, #0
	const usart_serial_options_t uart_serial_options = {
   82902:	463b      	mov	r3, r7
   82904:	2200      	movs	r2, #0
   82906:	601a      	str	r2, [r3, #0]
   82908:	605a      	str	r2, [r3, #4]
   8290a:	609a      	str	r2, [r3, #8]
   8290c:	60da      	str	r2, [r3, #12]
   8290e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   82912:	603b      	str	r3, [r7, #0]
   82914:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82918:	60bb      	str	r3, [r7, #8]
		.baudrate = 115200,
		.paritytype = UART_MR_PAR_NO
	};

	/* Configure console UART. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
   8291a:	2008      	movs	r0, #8
   8291c:	4b05      	ldr	r3, [pc, #20]	; (82934 <configure_console+0x38>)
   8291e:	4798      	blx	r3
	stdio_serial_init(CONSOLE_UART, &uart_serial_options);
   82920:	463b      	mov	r3, r7
   82922:	4619      	mov	r1, r3
   82924:	4804      	ldr	r0, [pc, #16]	; (82938 <configure_console+0x3c>)
   82926:	4b05      	ldr	r3, [pc, #20]	; (8293c <configure_console+0x40>)
   82928:	4798      	blx	r3
}
   8292a:	bf00      	nop
   8292c:	3710      	adds	r7, #16
   8292e:	46bd      	mov	sp, r7
   82930:	bd80      	pop	{r7, pc}
   82932:	bf00      	nop
   82934:	0008259d 	.word	0x0008259d
   82938:	400e0800 	.word	0x400e0800
   8293c:	00082895 	.word	0x00082895

00082940 <main>:
volatile uint32_t fed_value=0;
extern uint32_t array_dummy[100];
extern uint32_t var;
uint8_t command =  0;
int main (void)
{
   82940:	b590      	push	{r4, r7, lr}
   82942:	b085      	sub	sp, #20
   82944:	af00      	add	r7, sp, #0
	
	speed_data speed_d;
	static uint32_t status=0;
	static uint32_t prev_status=0;
	sysclk_init();
   82946:	4b96      	ldr	r3, [pc, #600]	; (82ba0 <main+0x260>)
   82948:	4798      	blx	r3
	board_init();
   8294a:	4b96      	ldr	r3, [pc, #600]	; (82ba4 <main+0x264>)
   8294c:	4798      	blx	r3
	CPU2_S_SYSTEM_INIT();
   8294e:	4b96      	ldr	r3, [pc, #600]	; (82ba8 <main+0x268>)
   82950:	4798      	blx	r3
	configure_console();
   82952:	4b96      	ldr	r3, [pc, #600]	; (82bac <main+0x26c>)
   82954:	4798      	blx	r3
	printf("welcome\n");
   82956:	4896      	ldr	r0, [pc, #600]	; (82bb0 <main+0x270>)
   82958:	4b96      	ldr	r3, [pc, #600]	; (82bb4 <main+0x274>)
   8295a:	4798      	blx	r3
	printf("Version1.1\n");
   8295c:	4896      	ldr	r0, [pc, #600]	; (82bb8 <main+0x278>)
   8295e:	4b95      	ldr	r3, [pc, #596]	; (82bb4 <main+0x274>)
   82960:	4798      	blx	r3
	PIOA->PIO_WPMR = 0x50494F00;
   82962:	4b96      	ldr	r3, [pc, #600]	; (82bbc <main+0x27c>)
   82964:	4a96      	ldr	r2, [pc, #600]	; (82bc0 <main+0x280>)
   82966:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOA->PIO_PUER = 0x00000300;
   8296a:	4b94      	ldr	r3, [pc, #592]	; (82bbc <main+0x27c>)
   8296c:	f44f 7240 	mov.w	r2, #768	; 0x300
   82970:	665a      	str	r2, [r3, #100]	; 0x64
	//PIOA->PIO_PUER = 0x00060000;
	PIOA->PIO_PDR =	 0x00060000;
   82972:	4b92      	ldr	r3, [pc, #584]	; (82bbc <main+0x27c>)
   82974:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
   82978:	605a      	str	r2, [r3, #4]
	PIOA->PIO_ABSR = 0x00090000;
   8297a:	4b90      	ldr	r3, [pc, #576]	; (82bbc <main+0x27c>)
   8297c:	f44f 2210 	mov.w	r2, #589824	; 0x90000
   82980:	671a      	str	r2, [r3, #112]	; 0x70
	pmc_enable_periph_clk(ID_PIOD);
   82982:	200e      	movs	r0, #14
   82984:	4b8f      	ldr	r3, [pc, #572]	; (82bc4 <main+0x284>)
   82986:	4798      	blx	r3
	pmc_enable_periph_clk(ID_PIOC);
   82988:	200d      	movs	r0, #13
   8298a:	4b8e      	ldr	r3, [pc, #568]	; (82bc4 <main+0x284>)
   8298c:	4798      	blx	r3
	pmc_enable_periph_clk(ID_PWM);
   8298e:	2024      	movs	r0, #36	; 0x24
   82990:	4b8c      	ldr	r3, [pc, #560]	; (82bc4 <main+0x284>)
   82992:	4798      	blx	r3

	PIOD->PIO_WPMR = 0x50494F00;
   82994:	4b8c      	ldr	r3, [pc, #560]	; (82bc8 <main+0x288>)
   82996:	4a8a      	ldr	r2, [pc, #552]	; (82bc0 <main+0x280>)
   82998:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOD->PIO_PER  = 0x000002CF;
   8299c:	4b8a      	ldr	r3, [pc, #552]	; (82bc8 <main+0x288>)
   8299e:	f240 22cf 	movw	r2, #719	; 0x2cf
   829a2:	601a      	str	r2, [r3, #0]
	PIOD->PIO_OER  = 0x0000024F;
   829a4:	4b88      	ldr	r3, [pc, #544]	; (82bc8 <main+0x288>)
   829a6:	f240 224f 	movw	r2, #591	; 0x24f
   829aa:	611a      	str	r2, [r3, #16]
	PIOD->PIO_ODR  = 0x00000080;				//m1,m2,m3,m4,directionA,BrakeA
   829ac:	4b86      	ldr	r3, [pc, #536]	; (82bc8 <main+0x288>)
   829ae:	2280      	movs	r2, #128	; 0x80
   829b0:	615a      	str	r2, [r3, #20]
	PIOD->PIO_CODR = 0x0000024F;
   829b2:	4b85      	ldr	r3, [pc, #532]	; (82bc8 <main+0x288>)
   829b4:	f240 224f 	movw	r2, #591	; 0x24f
   829b8:	635a      	str	r2, [r3, #52]	; 0x34
	PIOD->PIO_PUER = 0x0000024F;
   829ba:	4b83      	ldr	r3, [pc, #524]	; (82bc8 <main+0x288>)
   829bc:	f240 224f 	movw	r2, #591	; 0x24f
   829c0:	665a      	str	r2, [r3, #100]	; 0x64

	PIOC->PIO_WPMR = 0x50494F00;
   829c2:	4b82      	ldr	r3, [pc, #520]	; (82bcc <main+0x28c>)
   829c4:	4a7e      	ldr	r2, [pc, #504]	; (82bc0 <main+0x280>)
   829c6:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOC->PIO_PER  = 0x0007F000;
   829ca:	4b80      	ldr	r3, [pc, #512]	; (82bcc <main+0x28c>)
   829cc:	f44f 22fe 	mov.w	r2, #520192	; 0x7f000
   829d0:	601a      	str	r2, [r3, #0]
	PIOC->PIO_OER  = 0x0007F000;				//m1,m2,m3,m4,directionB,BrakeB
   829d2:	4b7e      	ldr	r3, [pc, #504]	; (82bcc <main+0x28c>)
   829d4:	f44f 22fe 	mov.w	r2, #520192	; 0x7f000
   829d8:	611a      	str	r2, [r3, #16]
	PIOC->PIO_CODR = 0x0007F000;
   829da:	4b7c      	ldr	r3, [pc, #496]	; (82bcc <main+0x28c>)
   829dc:	f44f 22fe 	mov.w	r2, #520192	; 0x7f000
   829e0:	635a      	str	r2, [r3, #52]	; 0x34
	PIOC->PIO_PUER = 0x0007F000;
   829e2:	4b7a      	ldr	r3, [pc, #488]	; (82bcc <main+0x28c>)
   829e4:	f44f 22fe 	mov.w	r2, #520192	; 0x7f000
   829e8:	665a      	str	r2, [r3, #100]	; 0x64

	PIOA->PIO_PUER = 0x00000300;
   829ea:	4b74      	ldr	r3, [pc, #464]	; (82bbc <main+0x27c>)
   829ec:	f44f 7240 	mov.w	r2, #768	; 0x300
   829f0:	665a      	str	r2, [r3, #100]	; 0x64
	PIOA->PIO_PUER = 0x00060000;
   829f2:	4b72      	ldr	r3, [pc, #456]	; (82bbc <main+0x27c>)
   829f4:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
   829f8:	665a      	str	r2, [r3, #100]	; 0x64
	
	PWM->PWM_WPCR = 0x50574D00;
   829fa:	4b75      	ldr	r3, [pc, #468]	; (82bd0 <main+0x290>)
   829fc:	4a75      	ldr	r2, [pc, #468]	; (82bd4 <main+0x294>)
   829fe:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	//PWM->PWM_DIS = 0x000000FF;
	
	PWM->PWM_CH_NUM[4].PWM_CMR = PWM_CMR_CPOL|PWM_CMR_CPRE_MCK_DIV_32|PWM_CMR_CES|PWM_CMR_DTE|PWM_CMR_DTHI|PWM_CMR_DTLI;
   82a02:	4b73      	ldr	r3, [pc, #460]	; (82bd0 <main+0x290>)
   82a04:	4a74      	ldr	r2, [pc, #464]	; (82bd8 <main+0x298>)
   82a06:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280

	PWM->PWM_CH_NUM[4].PWM_CPRD = 0x00000A41;
   82a0a:	4b71      	ldr	r3, [pc, #452]	; (82bd0 <main+0x290>)
   82a0c:	f640 2241 	movw	r2, #2625	; 0xa41
   82a10:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
	PWM->PWM_CH_NUM[4].PWM_CDTY = DUTY;			//35% duty cycle
   82a14:	4a6e      	ldr	r2, [pc, #440]	; (82bd0 <main+0x290>)
   82a16:	4b71      	ldr	r3, [pc, #452]	; (82bdc <main+0x29c>)
   82a18:	681b      	ldr	r3, [r3, #0]
   82a1a:	f8c2 3284 	str.w	r3, [r2, #644]	; 0x284
	PIOD->PIO_WPMR	= 0x50494F00;
   82a1e:	4b6a      	ldr	r3, [pc, #424]	; (82bc8 <main+0x288>)
   82a20:	4a67      	ldr	r2, [pc, #412]	; (82bc0 <main+0x280>)
   82a22:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	PIOD->PIO_PER   = 0x0000024F;
   82a26:	4b68      	ldr	r3, [pc, #416]	; (82bc8 <main+0x288>)
   82a28:	f240 224f 	movw	r2, #591	; 0x24f
   82a2c:	601a      	str	r2, [r3, #0]
	PIOD->PIO_OER   = 0x0000024F;
   82a2e:	4b66      	ldr	r3, [pc, #408]	; (82bc8 <main+0x288>)
   82a30:	f240 224f 	movw	r2, #591	; 0x24f
   82a34:	611a      	str	r2, [r3, #16]
	PIOD->PIO_PUER  = 0x0000000F;
   82a36:	4b64      	ldr	r3, [pc, #400]	; (82bc8 <main+0x288>)
   82a38:	220f      	movs	r2, #15
   82a3a:	665a      	str	r2, [r3, #100]	; 0x64
	PIOD->PIO_SODR  = 0x00000200;
   82a3c:	4b62      	ldr	r3, [pc, #392]	; (82bc8 <main+0x288>)
   82a3e:	f44f 7200 	mov.w	r2, #512	; 0x200
   82a42:	631a      	str	r2, [r3, #48]	; 0x30
	status=(((PIOA->PIO_PDSR)>>14)&1);
   82a44:	4b5d      	ldr	r3, [pc, #372]	; (82bbc <main+0x27c>)
   82a46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   82a48:	0b9b      	lsrs	r3, r3, #14
   82a4a:	f003 0301 	and.w	r3, r3, #1
   82a4e:	4a64      	ldr	r2, [pc, #400]	; (82be0 <main+0x2a0>)
   82a50:	6013      	str	r3, [r2, #0]
	prev_status=status;
   82a52:	4b63      	ldr	r3, [pc, #396]	; (82be0 <main+0x2a0>)
   82a54:	681b      	ldr	r3, [r3, #0]
   82a56:	4a63      	ldr	r2, [pc, #396]	; (82be4 <main+0x2a4>)
   82a58:	6013      	str	r3, [r2, #0]
	NVIC_DisableIRQ(SPI_IRQn);
   82a5a:	2018      	movs	r0, #24
   82a5c:	4b62      	ldr	r3, [pc, #392]	; (82be8 <main+0x2a8>)
   82a5e:	4798      	blx	r3
	NVIC_ClearPendingIRQ(SPI_IRQn);
   82a60:	2018      	movs	r0, #24
   82a62:	4b62      	ldr	r3, [pc, #392]	; (82bec <main+0x2ac>)
   82a64:	4798      	blx	r3
	NVIC_SetPriority(SPI_IRQn, 0);
   82a66:	2100      	movs	r1, #0
   82a68:	2018      	movs	r0, #24
   82a6a:	4b61      	ldr	r3, [pc, #388]	; (82bf0 <main+0x2b0>)
   82a6c:	4798      	blx	r3
	NVIC_EnableIRQ(SPI_IRQn);
   82a6e:	2018      	movs	r0, #24
   82a70:	4b60      	ldr	r3, [pc, #384]	; (82bf4 <main+0x2b4>)
   82a72:	4798      	blx	r3

//	spi_slave_initialize();
	//spi_master_initialize();
	//pio_enable_interrupt(PIOA,PIO_IER_P14);
	uint32_t expire_time = 6562490;			//10 sec
   82a74:	4b60      	ldr	r3, [pc, #384]	; (82bf8 <main+0x2b8>)
   82a76:	60fb      	str	r3, [r7, #12]
	uint32_t stepcount = 6562;			//10 sec
   82a78:	f641 13a2 	movw	r3, #6562	; 0x19a2
   82a7c:	60bb      	str	r3, [r7, #8]
	startTimer1(TC0,0,TC0_IRQn,expire_time);
   82a7e:	68fb      	ldr	r3, [r7, #12]
   82a80:	221b      	movs	r2, #27
   82a82:	2100      	movs	r1, #0
   82a84:	485d      	ldr	r0, [pc, #372]	; (82bfc <main+0x2bc>)
   82a86:	4c5e      	ldr	r4, [pc, #376]	; (82c00 <main+0x2c0>)
   82a88:	47a0      	blx	r4
	int i=0;
   82a8a:	2300      	movs	r3, #0
   82a8c:	607b      	str	r3, [r7, #4]
	startTimer3(TC0,2,TC2_IRQn,stepcount);
   82a8e:	68bb      	ldr	r3, [r7, #8]
   82a90:	221d      	movs	r2, #29
   82a92:	2102      	movs	r1, #2
   82a94:	4859      	ldr	r0, [pc, #356]	; (82bfc <main+0x2bc>)
   82a96:	4c5b      	ldr	r4, [pc, #364]	; (82c04 <main+0x2c4>)
   82a98:	47a0      	blx	r4
	
//	start_bloodpump();
	
	CPU2_D_SET_PIO(PIO_TYPE_PIO_A,13);      // VENOUS CLAMP POWER ENABLED
   82a9a:	210d      	movs	r1, #13
   82a9c:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   82aa0:	4b59      	ldr	r3, [pc, #356]	; (82c08 <main+0x2c8>)
   82aa2:	4798      	blx	r3
	CPU2_D_SET_PIO(PIO_TYPE_PIO_A,11);     // BYPASS VALVE POWER ENABLED
   82aa4:	210b      	movs	r1, #11
   82aa6:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
   82aaa:	4b57      	ldr	r3, [pc, #348]	; (82c08 <main+0x2c8>)
   82aac:	4798      	blx	r3
			/*if ()				// fpr conductivity and temp
			{
			}*/
		//}
		
		while (flag_buff >= 1)
   82aae:	e166      	b.n	82d7e <main+0x43e>
		{ 
			command = data_buff[0];
   82ab0:	4b56      	ldr	r3, [pc, #344]	; (82c0c <main+0x2cc>)
   82ab2:	781a      	ldrb	r2, [r3, #0]
   82ab4:	4b56      	ldr	r3, [pc, #344]	; (82c10 <main+0x2d0>)
   82ab6:	701a      	strb	r2, [r3, #0]
				if (command == BP_APT_VPT_SEND_TO_MASTER)
   82ab8:	4b55      	ldr	r3, [pc, #340]	; (82c10 <main+0x2d0>)
   82aba:	781b      	ldrb	r3, [r3, #0]
   82abc:	2b27      	cmp	r3, #39	; 0x27
   82abe:	d105      	bne.n	82acc <main+0x18c>
				{
					//printf("start\n");
									
					//send CAN Message for APT and VPT
					SV_put_sensor_data(&sv_sys_statbuffer);
   82ac0:	4854      	ldr	r0, [pc, #336]	; (82c14 <main+0x2d4>)
   82ac2:	4b55      	ldr	r3, [pc, #340]	; (82c18 <main+0x2d8>)
   82ac4:	4798      	blx	r3
					command = (uint8_t)0;
   82ac6:	4b52      	ldr	r3, [pc, #328]	; (82c10 <main+0x2d0>)
   82ac8:	2200      	movs	r2, #0
   82aca:	701a      	strb	r2, [r3, #0]
				//	flag_buff--;
				}
			//	continue;
								
			//printf("enter\n");
			switch (states_2)
   82acc:	4b53      	ldr	r3, [pc, #332]	; (82c1c <main+0x2dc>)
   82ace:	781b      	ldrb	r3, [r3, #0]
   82ad0:	2b26      	cmp	r3, #38	; 0x26
   82ad2:	f200 8149 	bhi.w	82d68 <main+0x428>
   82ad6:	a201      	add	r2, pc, #4	; (adr r2, 82adc <main+0x19c>)
   82ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   82adc:	00082b79 	.word	0x00082b79
   82ae0:	00082c2d 	.word	0x00082c2d
   82ae4:	00082d21 	.word	0x00082d21
   82ae8:	00082d69 	.word	0x00082d69
   82aec:	00082d69 	.word	0x00082d69
   82af0:	00082d69 	.word	0x00082d69
   82af4:	00082d69 	.word	0x00082d69
   82af8:	00082d69 	.word	0x00082d69
   82afc:	00082d69 	.word	0x00082d69
   82b00:	00082d69 	.word	0x00082d69
   82b04:	00082d69 	.word	0x00082d69
   82b08:	00082d69 	.word	0x00082d69
   82b0c:	00082d69 	.word	0x00082d69
   82b10:	00082d69 	.word	0x00082d69
   82b14:	00082d69 	.word	0x00082d69
   82b18:	00082d69 	.word	0x00082d69
   82b1c:	00082d69 	.word	0x00082d69
   82b20:	00082d69 	.word	0x00082d69
   82b24:	00082d69 	.word	0x00082d69
   82b28:	00082d69 	.word	0x00082d69
   82b2c:	00082d69 	.word	0x00082d69
   82b30:	00082d69 	.word	0x00082d69
   82b34:	00082d69 	.word	0x00082d69
   82b38:	00082d69 	.word	0x00082d69
   82b3c:	00082d69 	.word	0x00082d69
   82b40:	00082d69 	.word	0x00082d69
   82b44:	00082d69 	.word	0x00082d69
   82b48:	00082d69 	.word	0x00082d69
   82b4c:	00082d69 	.word	0x00082d69
   82b50:	00082d69 	.word	0x00082d69
   82b54:	00082d69 	.word	0x00082d69
   82b58:	00082d69 	.word	0x00082d69
   82b5c:	00082d69 	.word	0x00082d69
   82b60:	00082d69 	.word	0x00082d69
   82b64:	00082d69 	.word	0x00082d69
   82b68:	00082d69 	.word	0x00082d69
   82b6c:	00082d69 	.word	0x00082d69
   82b70:	00082d69 	.word	0x00082d69
   82b74:	00082cf9 	.word	0x00082cf9
			{
				case CPU2_STANDBY:
				
					if (bp_start_command == BP_START_BLOOD_PUMP)
   82b78:	4b29      	ldr	r3, [pc, #164]	; (82c20 <main+0x2e0>)
   82b7a:	781b      	ldrb	r3, [r3, #0]
   82b7c:	b2db      	uxtb	r3, r3
   82b7e:	2b20      	cmp	r3, #32
   82b80:	d107      	bne.n	82b92 <main+0x252>
					{
						//printf("start\n");
						bp_start_command = 0;
   82b82:	4b27      	ldr	r3, [pc, #156]	; (82c20 <main+0x2e0>)
   82b84:	2200      	movs	r2, #0
   82b86:	701a      	strb	r2, [r3, #0]
						start_bloodpump();
   82b88:	4b26      	ldr	r3, [pc, #152]	; (82c24 <main+0x2e4>)
   82b8a:	4798      	blx	r3
						states_2 = CPU2_BLOODPUMP;
   82b8c:	4b23      	ldr	r3, [pc, #140]	; (82c1c <main+0x2dc>)
   82b8e:	2201      	movs	r2, #1
   82b90:	701a      	strb	r2, [r3, #0]
					}
					command = (uint8_t)0;
   82b92:	4b1f      	ldr	r3, [pc, #124]	; (82c10 <main+0x2d0>)
   82b94:	2200      	movs	r2, #0
   82b96:	701a      	strb	r2, [r3, #0]
				//	flag_buff = 0;
					data_count = 0;			
   82b98:	4b23      	ldr	r3, [pc, #140]	; (82c28 <main+0x2e8>)
   82b9a:	2200      	movs	r2, #0
   82b9c:	601a      	str	r2, [r3, #0]
					
				break;
   82b9e:	e0e4      	b.n	82d6a <main+0x42a>
   82ba0:	00083565 	.word	0x00083565
   82ba4:	0008360d 	.word	0x0008360d
   82ba8:	00081e95 	.word	0x00081e95
   82bac:	000828fd 	.word	0x000828fd
   82bb0:	000875c0 	.word	0x000875c0
   82bb4:	00084669 	.word	0x00084669
   82bb8:	000875cc 	.word	0x000875cc
   82bbc:	400e0e00 	.word	0x400e0e00
   82bc0:	50494f00 	.word	0x50494f00
   82bc4:	00083e21 	.word	0x00083e21
   82bc8:	400e1400 	.word	0x400e1400
   82bcc:	400e1200 	.word	0x400e1200
   82bd0:	40094000 	.word	0x40094000
   82bd4:	50574d00 	.word	0x50574d00
   82bd8:	00070605 	.word	0x00070605
   82bdc:	20070008 	.word	0x20070008
   82be0:	2007097c 	.word	0x2007097c
   82be4:	20070980 	.word	0x20070980
   82be8:	0008243d 	.word	0x0008243d
   82bec:	00082471 	.word	0x00082471
   82bf0:	000824a5 	.word	0x000824a5
   82bf4:	0008240d 	.word	0x0008240d
   82bf8:	006422ba 	.word	0x006422ba
   82bfc:	40080000 	.word	0x40080000
   82c00:	00081b45 	.word	0x00081b45
   82c04:	00081c25 	.word	0x00081c25
   82c08:	0008111d 	.word	0x0008111d
   82c0c:	20070938 	.word	0x20070938
   82c10:	20070978 	.word	0x20070978
   82c14:	20070e9c 	.word	0x20070e9c
   82c18:	00081dd1 	.word	0x00081dd1
   82c1c:	2007096c 	.word	0x2007096c
   82c20:	2007093b 	.word	0x2007093b
   82c24:	00082fd9 	.word	0x00082fd9
   82c28:	20070931 	.word	0x20070931
				
// 
// 					switch (command)
// 					{

						if (bp_start_command == BP_START_BLOOD_PUMP)
   82c2c:	4b9d      	ldr	r3, [pc, #628]	; (82ea4 <main+0x564>)
   82c2e:	781b      	ldrb	r3, [r3, #0]
   82c30:	b2db      	uxtb	r3, r3
   82c32:	2b20      	cmp	r3, #32
   82c34:	d11b      	bne.n	82c6e <main+0x32e>
						{	
							bp_start_command =  0;
   82c36:	4b9b      	ldr	r3, [pc, #620]	; (82ea4 <main+0x564>)
   82c38:	2200      	movs	r2, #0
   82c3a:	701a      	strb	r2, [r3, #0]
							start_bloodpump();
   82c3c:	4b9a      	ldr	r3, [pc, #616]	; (82ea8 <main+0x568>)
   82c3e:	4798      	blx	r3
							//printf("start\n");
							if (modify_1==1)
   82c40:	4b9a      	ldr	r3, [pc, #616]	; (82eac <main+0x56c>)
   82c42:	781b      	ldrb	r3, [r3, #0]
   82c44:	b2db      	uxtb	r3, r3
   82c46:	2b01      	cmp	r3, #1
   82c48:	d10e      	bne.n	82c68 <main+0x328>
							{
								modify=1;
   82c4a:	4b99      	ldr	r3, [pc, #612]	; (82eb0 <main+0x570>)
   82c4c:	2201      	movs	r2, #1
   82c4e:	701a      	strb	r2, [r3, #0]
								flag_3=1;
   82c50:	4b98      	ldr	r3, [pc, #608]	; (82eb4 <main+0x574>)
   82c52:	2201      	movs	r2, #1
   82c54:	701a      	strb	r2, [r3, #0]
								flag_1=1;
   82c56:	4b98      	ldr	r3, [pc, #608]	; (82eb8 <main+0x578>)
   82c58:	2201      	movs	r2, #1
   82c5a:	701a      	strb	r2, [r3, #0]
								flag_2=1;
   82c5c:	4b97      	ldr	r3, [pc, #604]	; (82ebc <main+0x57c>)
   82c5e:	2201      	movs	r2, #1
   82c60:	701a      	strb	r2, [r3, #0]
								count_2=2;
   82c62:	4b97      	ldr	r3, [pc, #604]	; (82ec0 <main+0x580>)
   82c64:	2202      	movs	r2, #2
   82c66:	701a      	strb	r2, [r3, #0]
							}
						//	flag_buff--;
							states_2 = CPU2_BLOODPUMP;
   82c68:	4b96      	ldr	r3, [pc, #600]	; (82ec4 <main+0x584>)
   82c6a:	2201      	movs	r2, #1
   82c6c:	701a      	strb	r2, [r3, #0]
						}
					//	break;

						if (bp_stop_command == BP_STOP_PUMP)
   82c6e:	4b96      	ldr	r3, [pc, #600]	; (82ec8 <main+0x588>)
   82c70:	781b      	ldrb	r3, [r3, #0]
   82c72:	b2db      	uxtb	r3, r3
   82c74:	2b21      	cmp	r3, #33	; 0x21
   82c76:	d119      	bne.n	82cac <main+0x36c>
						{
							
						bp_stop_command = 0;
   82c78:	4b93      	ldr	r3, [pc, #588]	; (82ec8 <main+0x588>)
   82c7a:	2200      	movs	r2, #0
   82c7c:	701a      	strb	r2, [r3, #0]
						//printf("stop\n");
							stop_bloodpump();
   82c7e:	4b93      	ldr	r3, [pc, #588]	; (82ecc <main+0x58c>)
   82c80:	4798      	blx	r3
							//states_2 = CPU2_STANDBY;
							fedbck_cnt=0;
   82c82:	4b93      	ldr	r3, [pc, #588]	; (82ed0 <main+0x590>)
   82c84:	2200      	movs	r2, #0
   82c86:	601a      	str	r2, [r3, #0]
							modify=0;
   82c88:	4b89      	ldr	r3, [pc, #548]	; (82eb0 <main+0x570>)
   82c8a:	2200      	movs	r2, #0
   82c8c:	701a      	strb	r2, [r3, #0]
							flag_3=0;
   82c8e:	4b89      	ldr	r3, [pc, #548]	; (82eb4 <main+0x574>)
   82c90:	2200      	movs	r2, #0
   82c92:	701a      	strb	r2, [r3, #0]
							flag_1=0;
   82c94:	4b88      	ldr	r3, [pc, #544]	; (82eb8 <main+0x578>)
   82c96:	2200      	movs	r2, #0
   82c98:	701a      	strb	r2, [r3, #0]
							flag_2=0;
   82c9a:	4b88      	ldr	r3, [pc, #544]	; (82ebc <main+0x57c>)
   82c9c:	2200      	movs	r2, #0
   82c9e:	701a      	strb	r2, [r3, #0]
							count_2=0;
   82ca0:	4b87      	ldr	r3, [pc, #540]	; (82ec0 <main+0x580>)
   82ca2:	2200      	movs	r2, #0
   82ca4:	701a      	strb	r2, [r3, #0]
							states_2 = CPU2_BLOODPUMP;
   82ca6:	4b87      	ldr	r3, [pc, #540]	; (82ec4 <main+0x584>)
   82ca8:	2201      	movs	r2, #1
   82caa:	701a      	strb	r2, [r3, #0]
							count_stop = 0;
							
							//CPU2_D_INIT_IIC();
							states_2 = CPU2_STANDBY;
						break;*/
							if (bp_Speed_change_command == BP_SPEED_CHANGE)
   82cac:	4b89      	ldr	r3, [pc, #548]	; (82ed4 <main+0x594>)
   82cae:	781b      	ldrb	r3, [r3, #0]
   82cb0:	b2db      	uxtb	r3, r3
   82cb2:	2b23      	cmp	r3, #35	; 0x23
   82cb4:	d113      	bne.n	82cde <main+0x39e>
							{
								
							bp_Speed_change_command = 0;
   82cb6:	4b87      	ldr	r3, [pc, #540]	; (82ed4 <main+0x594>)
   82cb8:	2200      	movs	r2, #0
   82cba:	701a      	strb	r2, [r3, #0]
// 								data_stream.bytearray[0] = data_buff[1];
// 								data_stream.bytearray[1] = data_buff[2];
// 								speed_d.byte[0]= data_stream.bytearray[0];
// 								speed_d.byte[1]= data_stream.bytearray[1];
// 								//printf("%d\n",data_stream.Twobyte);
								speedchange_bloodpump(bp_speed);
   82cbc:	4b86      	ldr	r3, [pc, #536]	; (82ed8 <main+0x598>)
   82cbe:	681b      	ldr	r3, [r3, #0]
   82cc0:	4618      	mov	r0, r3
   82cc2:	4b86      	ldr	r3, [pc, #536]	; (82edc <main+0x59c>)
   82cc4:	4798      	blx	r3
								states_2 = CPU2_BLOODPUMP;
   82cc6:	4b7f      	ldr	r3, [pc, #508]	; (82ec4 <main+0x584>)
   82cc8:	2201      	movs	r2, #1
   82cca:	701a      	strb	r2, [r3, #0]
								modify=1;
   82ccc:	4b78      	ldr	r3, [pc, #480]	; (82eb0 <main+0x570>)
   82cce:	2201      	movs	r2, #1
   82cd0:	701a      	strb	r2, [r3, #0]
								modify_1=1;
   82cd2:	4b76      	ldr	r3, [pc, #472]	; (82eac <main+0x56c>)
   82cd4:	2201      	movs	r2, #1
   82cd6:	701a      	strb	r2, [r3, #0]
								data_count1=0;
   82cd8:	4b81      	ldr	r3, [pc, #516]	; (82ee0 <main+0x5a0>)
   82cda:	2200      	movs	r2, #0
   82cdc:	601a      	str	r2, [r3, #0]
							}			
							//}
					//	break;
						
							if (bp_inc == BP_INC)
   82cde:	4b81      	ldr	r3, [pc, #516]	; (82ee4 <main+0x5a4>)
   82ce0:	781b      	ldrb	r3, [r3, #0]
   82ce2:	b2db      	uxtb	r3, r3
   82ce4:	2b25      	cmp	r3, #37	; 0x25
   82ce6:	d107      	bne.n	82cf8 <main+0x3b8>
							{
								bp_inc = 0;
   82ce8:	4b7e      	ldr	r3, [pc, #504]	; (82ee4 <main+0x5a4>)
   82cea:	2200      	movs	r2, #0
   82cec:	701a      	strb	r2, [r3, #0]
						//	}
						//	printf("inc\n");
							fed_value = fed_value+10;
   82cee:	4b7e      	ldr	r3, [pc, #504]	; (82ee8 <main+0x5a8>)
   82cf0:	681b      	ldr	r3, [r3, #0]
   82cf2:	330a      	adds	r3, #10
   82cf4:	4a7c      	ldr	r2, [pc, #496]	; (82ee8 <main+0x5a8>)
   82cf6:	6013      	str	r3, [r2, #0]
							//printf("%d\n",fed_value);
							}
					//	break;
						case BP_DEC:
							if (bp_dec == BP_DEC)
   82cf8:	4b7c      	ldr	r3, [pc, #496]	; (82eec <main+0x5ac>)
   82cfa:	781b      	ldrb	r3, [r3, #0]
   82cfc:	b2db      	uxtb	r3, r3
   82cfe:	2b26      	cmp	r3, #38	; 0x26
   82d00:	d107      	bne.n	82d12 <main+0x3d2>
							{
								bp_dec = 0;
   82d02:	4b7a      	ldr	r3, [pc, #488]	; (82eec <main+0x5ac>)
   82d04:	2200      	movs	r2, #0
   82d06:	701a      	strb	r2, [r3, #0]
					//	printf("dec\n");
							fed_value = fed_value-10;
   82d08:	4b77      	ldr	r3, [pc, #476]	; (82ee8 <main+0x5a8>)
   82d0a:	681b      	ldr	r3, [r3, #0]
   82d0c:	3b0a      	subs	r3, #10
   82d0e:	4a76      	ldr	r2, [pc, #472]	; (82ee8 <main+0x5a8>)
   82d10:	6013      	str	r3, [r2, #0]
// 						break;
// 						
// 						default:
// 						break;
			//		}
					command = (uint8_t)0;
   82d12:	4b77      	ldr	r3, [pc, #476]	; (82ef0 <main+0x5b0>)
   82d14:	2200      	movs	r2, #0
   82d16:	701a      	strb	r2, [r3, #0]
					//flag_buff = 0;
					data_count = 0;
   82d18:	4b76      	ldr	r3, [pc, #472]	; (82ef4 <main+0x5b4>)
   82d1a:	2200      	movs	r2, #0
   82d1c:	601a      	str	r2, [r3, #0]
				break;
   82d1e:	e024      	b.n	82d6a <main+0x42a>
				
				case CPU2_SAFETYSTATE:
				//printf("%d\n",data_buff[0]);
				switch (command)
   82d20:	4b73      	ldr	r3, [pc, #460]	; (82ef0 <main+0x5b0>)
   82d22:	781b      	ldrb	r3, [r3, #0]
   82d24:	2b28      	cmp	r3, #40	; 0x28
   82d26:	d000      	beq.n	82d2a <main+0x3ea>
						states_2 = CPU2_SAFETYSTATE;
					}
					break;
					
					default:
					break;
   82d28:	e01d      	b.n	82d66 <main+0x426>
				case CPU2_SAFETYSTATE:
				//printf("%d\n",data_buff[0]);
				switch (command)
				{
					case BP_RECOVER:
					cpu2_sensorstatus();
   82d2a:	4b73      	ldr	r3, [pc, #460]	; (82ef8 <main+0x5b8>)
   82d2c:	4798      	blx	r3
					
					if (sensor_status.bldpump_door == 0)
   82d2e:	4b73      	ldr	r3, [pc, #460]	; (82efc <main+0x5bc>)
   82d30:	789b      	ldrb	r3, [r3, #2]
   82d32:	2b00      	cmp	r3, #0
   82d34:	d10b      	bne.n	82d4e <main+0x40e>
					{
						states_2 = CPU2_BLOODPUMP;
   82d36:	4b63      	ldr	r3, [pc, #396]	; (82ec4 <main+0x584>)
   82d38:	2201      	movs	r2, #1
   82d3a:	701a      	strb	r2, [r3, #0]
						cpu2_sv_cntrl_deactivate_pin(RUDNCY_INT);
   82d3c:	2007      	movs	r0, #7
   82d3e:	4b70      	ldr	r3, [pc, #448]	; (82f00 <main+0x5c0>)
   82d40:	4798      	blx	r3
						cpu2_sv_cntrl_deactivate_pin(CPU_INT);
   82d42:	2008      	movs	r0, #8
   82d44:	4b6e      	ldr	r3, [pc, #440]	; (82f00 <main+0x5c0>)
   82d46:	4798      	blx	r3
						safety_measure_deactivate();
   82d48:	4b6e      	ldr	r3, [pc, #440]	; (82f04 <main+0x5c4>)
   82d4a:	4798      	blx	r3
						cpu2_sv_cntrl_activate_pin(RUDNCY_INT);
						cpu2_sv_cntrl_activate_pin(CPU_INT);
						safety_measure_activate();
						states_2 = CPU2_SAFETYSTATE;
					}
					break;
   82d4c:	e00a      	b.n	82d64 <main+0x424>
						cpu2_sv_cntrl_deactivate_pin(CPU_INT);
						safety_measure_deactivate();
					}
					else
					{
						cpu2_sv_cntrl_activate_pin(RUDNCY_INT);
   82d4e:	2007      	movs	r0, #7
   82d50:	4b6d      	ldr	r3, [pc, #436]	; (82f08 <main+0x5c8>)
   82d52:	4798      	blx	r3
						cpu2_sv_cntrl_activate_pin(CPU_INT);
   82d54:	2008      	movs	r0, #8
   82d56:	4b6c      	ldr	r3, [pc, #432]	; (82f08 <main+0x5c8>)
   82d58:	4798      	blx	r3
						safety_measure_activate();
   82d5a:	4b6c      	ldr	r3, [pc, #432]	; (82f0c <main+0x5cc>)
   82d5c:	4798      	blx	r3
						states_2 = CPU2_SAFETYSTATE;
   82d5e:	4b59      	ldr	r3, [pc, #356]	; (82ec4 <main+0x584>)
   82d60:	2202      	movs	r2, #2
   82d62:	701a      	strb	r2, [r3, #0]
					}
					break;
   82d64:	bf00      	nop
					
					default:
					break;
					//similarly for the temp and conductivity
				}
				break;
   82d66:	e000      	b.n	82d6a <main+0x42a>
				
				default:
				break;
   82d68:	bf00      	nop
				
			}
			command = (uint8_t)0;
   82d6a:	4b61      	ldr	r3, [pc, #388]	; (82ef0 <main+0x5b0>)
   82d6c:	2200      	movs	r2, #0
   82d6e:	701a      	strb	r2, [r3, #0]
			//data_buff[1] = (uint8_t)0;
			//data_buff[2] = (uint8_t)0;
		//	flag_buff = 0;
		flag_buff--;
   82d70:	4b67      	ldr	r3, [pc, #412]	; (82f10 <main+0x5d0>)
   82d72:	781b      	ldrb	r3, [r3, #0]
   82d74:	b2db      	uxtb	r3, r3
   82d76:	3b01      	subs	r3, #1
   82d78:	b2da      	uxtb	r2, r3
   82d7a:	4b65      	ldr	r3, [pc, #404]	; (82f10 <main+0x5d0>)
   82d7c:	701a      	strb	r2, [r3, #0]
			/*if ()				// fpr conductivity and temp
			{
			}*/
		//}
		
		while (flag_buff >= 1)
   82d7e:	4b64      	ldr	r3, [pc, #400]	; (82f10 <main+0x5d0>)
   82d80:	781b      	ldrb	r3, [r3, #0]
   82d82:	b2db      	uxtb	r3, r3
   82d84:	2b00      	cmp	r3, #0
   82d86:	f47f ae93 	bne.w	82ab0 <main+0x170>
//			data_count = 0;
		}
		
		
				
		if (!( time_tick % 5))
   82d8a:	4b62      	ldr	r3, [pc, #392]	; (82f14 <main+0x5d4>)
   82d8c:	6819      	ldr	r1, [r3, #0]
   82d8e:	4b62      	ldr	r3, [pc, #392]	; (82f18 <main+0x5d8>)
   82d90:	fba3 2301 	umull	r2, r3, r3, r1
   82d94:	089a      	lsrs	r2, r3, #2
   82d96:	4613      	mov	r3, r2
   82d98:	009b      	lsls	r3, r3, #2
   82d9a:	4413      	add	r3, r2
   82d9c:	1aca      	subs	r2, r1, r3
   82d9e:	2a00      	cmp	r2, #0
   82da0:	d101      	bne.n	82da6 <main+0x466>
		{
			// read APT and VPT from spi
			cpu2_sensorstatus();
   82da2:	4b55      	ldr	r3, [pc, #340]	; (82ef8 <main+0x5b8>)
   82da4:	4798      	blx	r3
		}
		if(modify==1)
   82da6:	4b42      	ldr	r3, [pc, #264]	; (82eb0 <main+0x570>)
   82da8:	781b      	ldrb	r3, [r3, #0]
   82daa:	b2db      	uxtb	r3, r3
   82dac:	2b01      	cmp	r3, #1
   82dae:	f47f ae7e 	bne.w	82aae <main+0x16e>
		{
			status=(((PIOA->PIO_PDSR)>>14)&1);
   82db2:	4b5a      	ldr	r3, [pc, #360]	; (82f1c <main+0x5dc>)
   82db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   82db6:	0b9b      	lsrs	r3, r3, #14
   82db8:	f003 0301 	and.w	r3, r3, #1
   82dbc:	4a58      	ldr	r2, [pc, #352]	; (82f20 <main+0x5e0>)
   82dbe:	6013      	str	r3, [r2, #0]
			if (status==1 && prev_status ==0)
   82dc0:	4b57      	ldr	r3, [pc, #348]	; (82f20 <main+0x5e0>)
   82dc2:	681b      	ldr	r3, [r3, #0]
   82dc4:	2b01      	cmp	r3, #1
   82dc6:	d108      	bne.n	82dda <main+0x49a>
   82dc8:	4b56      	ldr	r3, [pc, #344]	; (82f24 <main+0x5e4>)
   82dca:	681b      	ldr	r3, [r3, #0]
   82dcc:	2b00      	cmp	r3, #0
   82dce:	d104      	bne.n	82dda <main+0x49a>
			{
				fedbck_cnt++;
   82dd0:	4b3f      	ldr	r3, [pc, #252]	; (82ed0 <main+0x590>)
   82dd2:	681b      	ldr	r3, [r3, #0]
   82dd4:	3301      	adds	r3, #1
   82dd6:	4a3e      	ldr	r2, [pc, #248]	; (82ed0 <main+0x590>)
   82dd8:	6013      	str	r3, [r2, #0]
			}
			prev_status= status;
   82dda:	4b51      	ldr	r3, [pc, #324]	; (82f20 <main+0x5e0>)
   82ddc:	681b      	ldr	r3, [r3, #0]
   82dde:	4a51      	ldr	r2, [pc, #324]	; (82f24 <main+0x5e4>)
   82de0:	6013      	str	r3, [r2, #0]
		
			if (flag_1==1 && flag_2==1)
   82de2:	4b35      	ldr	r3, [pc, #212]	; (82eb8 <main+0x578>)
   82de4:	781b      	ldrb	r3, [r3, #0]
   82de6:	2b01      	cmp	r3, #1
   82de8:	f47f ae61 	bne.w	82aae <main+0x16e>
   82dec:	4b33      	ldr	r3, [pc, #204]	; (82ebc <main+0x57c>)
   82dee:	781b      	ldrb	r3, [r3, #0]
   82df0:	b2db      	uxtb	r3, r3
   82df2:	2b01      	cmp	r3, #1
   82df4:	f47f ae5b 	bne.w	82aae <main+0x16e>
			{
				if (count_2==2)
   82df8:	4b31      	ldr	r3, [pc, #196]	; (82ec0 <main+0x580>)
   82dfa:	781b      	ldrb	r3, [r3, #0]
   82dfc:	b2db      	uxtb	r3, r3
   82dfe:	2b02      	cmp	r3, #2
   82e00:	d102      	bne.n	82e08 <main+0x4c8>
				{
					flag_3=1;
   82e02:	4b2c      	ldr	r3, [pc, #176]	; (82eb4 <main+0x574>)
   82e04:	2201      	movs	r2, #1
   82e06:	701a      	strb	r2, [r3, #0]
				}
				if (flag_3==1)
   82e08:	4b2a      	ldr	r3, [pc, #168]	; (82eb4 <main+0x574>)
   82e0a:	781b      	ldrb	r3, [r3, #0]
   82e0c:	b2db      	uxtb	r3, r3
   82e0e:	2b01      	cmp	r3, #1
   82e10:	f040 80d0 	bne.w	82fb4 <main+0x674>
				{
					if (fedbck_cnt1 > fed_value )
   82e14:	4b44      	ldr	r3, [pc, #272]	; (82f28 <main+0x5e8>)
   82e16:	681a      	ldr	r2, [r3, #0]
   82e18:	4b33      	ldr	r3, [pc, #204]	; (82ee8 <main+0x5a8>)
   82e1a:	681b      	ldr	r3, [r3, #0]
   82e1c:	429a      	cmp	r2, r3
   82e1e:	f240 80b9 	bls.w	82f94 <main+0x654>
						{
							DUTY=DUTY-2;
							PWM->PWM_CH_NUM[4].PWM_CDTYUPD = DUTY;
							printf("DUTY=%d\n",DUTY);
						}*/
								if (fedbck_cnt1 > fed_value+100)
   82e22:	4b31      	ldr	r3, [pc, #196]	; (82ee8 <main+0x5a8>)
   82e24:	681b      	ldr	r3, [r3, #0]
   82e26:	f103 0264 	add.w	r2, r3, #100	; 0x64
   82e2a:	4b3f      	ldr	r3, [pc, #252]	; (82f28 <main+0x5e8>)
   82e2c:	681b      	ldr	r3, [r3, #0]
   82e2e:	429a      	cmp	r2, r3
   82e30:	d20a      	bcs.n	82e48 <main+0x508>
								{
									//printf("decrment by 60....\n");
									DUTY=DUTY-60;
   82e32:	4b3e      	ldr	r3, [pc, #248]	; (82f2c <main+0x5ec>)
   82e34:	681b      	ldr	r3, [r3, #0]
   82e36:	3b3c      	subs	r3, #60	; 0x3c
   82e38:	4a3c      	ldr	r2, [pc, #240]	; (82f2c <main+0x5ec>)
   82e3a:	6013      	str	r3, [r2, #0]
									PWM->PWM_CH_NUM[4].PWM_CDTYUPD = DUTY;
   82e3c:	4a3c      	ldr	r2, [pc, #240]	; (82f30 <main+0x5f0>)
   82e3e:	4b3b      	ldr	r3, [pc, #236]	; (82f2c <main+0x5ec>)
   82e40:	681b      	ldr	r3, [r3, #0]
   82e42:	f8c2 3288 	str.w	r3, [r2, #648]	; 0x288
   82e46:	e0b5      	b.n	82fb4 <main+0x674>
							//		printf("DUTY=%d\n",DUTY);
								}
								else if (fedbck_cnt1 > fed_value+80)
   82e48:	4b27      	ldr	r3, [pc, #156]	; (82ee8 <main+0x5a8>)
   82e4a:	681b      	ldr	r3, [r3, #0]
   82e4c:	f103 0250 	add.w	r2, r3, #80	; 0x50
   82e50:	4b35      	ldr	r3, [pc, #212]	; (82f28 <main+0x5e8>)
   82e52:	681b      	ldr	r3, [r3, #0]
   82e54:	429a      	cmp	r2, r3
   82e56:	d20a      	bcs.n	82e6e <main+0x52e>
								{
									//printf("decrment by 50....\n");
									DUTY=DUTY-50;
   82e58:	4b34      	ldr	r3, [pc, #208]	; (82f2c <main+0x5ec>)
   82e5a:	681b      	ldr	r3, [r3, #0]
   82e5c:	3b32      	subs	r3, #50	; 0x32
   82e5e:	4a33      	ldr	r2, [pc, #204]	; (82f2c <main+0x5ec>)
   82e60:	6013      	str	r3, [r2, #0]
									PWM->PWM_CH_NUM[4].PWM_CDTYUPD = DUTY;
   82e62:	4a33      	ldr	r2, [pc, #204]	; (82f30 <main+0x5f0>)
   82e64:	4b31      	ldr	r3, [pc, #196]	; (82f2c <main+0x5ec>)
   82e66:	681b      	ldr	r3, [r3, #0]
   82e68:	f8c2 3288 	str.w	r3, [r2, #648]	; 0x288
   82e6c:	e0a2      	b.n	82fb4 <main+0x674>
								//	printf("DUTY=%d\n",DUTY);
								}
								else if ((fedbck_cnt1 >= fed_value+20) && (fedbck_cnt1 <=fed_value+80))
   82e6e:	4b1e      	ldr	r3, [pc, #120]	; (82ee8 <main+0x5a8>)
   82e70:	681b      	ldr	r3, [r3, #0]
   82e72:	f103 0214 	add.w	r2, r3, #20
   82e76:	4b2c      	ldr	r3, [pc, #176]	; (82f28 <main+0x5e8>)
   82e78:	681b      	ldr	r3, [r3, #0]
   82e7a:	429a      	cmp	r2, r3
   82e7c:	d85a      	bhi.n	82f34 <main+0x5f4>
   82e7e:	4b1a      	ldr	r3, [pc, #104]	; (82ee8 <main+0x5a8>)
   82e80:	681b      	ldr	r3, [r3, #0]
   82e82:	f103 0250 	add.w	r2, r3, #80	; 0x50
   82e86:	4b28      	ldr	r3, [pc, #160]	; (82f28 <main+0x5e8>)
   82e88:	681b      	ldr	r3, [r3, #0]
   82e8a:	429a      	cmp	r2, r3
   82e8c:	d352      	bcc.n	82f34 <main+0x5f4>
								{
									//printf("decrment by 40....\n");
									DUTY=DUTY-40;
   82e8e:	4b27      	ldr	r3, [pc, #156]	; (82f2c <main+0x5ec>)
   82e90:	681b      	ldr	r3, [r3, #0]
   82e92:	3b28      	subs	r3, #40	; 0x28
   82e94:	4a25      	ldr	r2, [pc, #148]	; (82f2c <main+0x5ec>)
   82e96:	6013      	str	r3, [r2, #0]
									PWM->PWM_CH_NUM[4].PWM_CDTYUPD = DUTY;
   82e98:	4a25      	ldr	r2, [pc, #148]	; (82f30 <main+0x5f0>)
   82e9a:	4b24      	ldr	r3, [pc, #144]	; (82f2c <main+0x5ec>)
   82e9c:	681b      	ldr	r3, [r3, #0]
   82e9e:	f8c2 3288 	str.w	r3, [r2, #648]	; 0x288
   82ea2:	e087      	b.n	82fb4 <main+0x674>
   82ea4:	2007093b 	.word	0x2007093b
   82ea8:	00082fd9 	.word	0x00082fd9
   82eac:	20070970 	.word	0x20070970
   82eb0:	2007096f 	.word	0x2007096f
   82eb4:	2007096e 	.word	0x2007096e
   82eb8:	20070954 	.word	0x20070954
   82ebc:	2007096d 	.word	0x2007096d
   82ec0:	20070960 	.word	0x20070960
   82ec4:	2007096c 	.word	0x2007096c
   82ec8:	2007093c 	.word	0x2007093c
   82ecc:	00083005 	.word	0x00083005
   82ed0:	20070958 	.word	0x20070958
   82ed4:	2007093d 	.word	0x2007093d
   82ed8:	20070a68 	.word	0x20070a68
   82edc:	00083029 	.word	0x00083029
   82ee0:	20070934 	.word	0x20070934
   82ee4:	2007093e 	.word	0x2007093e
   82ee8:	20070974 	.word	0x20070974
   82eec:	2007093f 	.word	0x2007093f
   82ef0:	20070978 	.word	0x20070978
   82ef4:	20070931 	.word	0x20070931
   82ef8:	000831b5 	.word	0x000831b5
   82efc:	20070eb4 	.word	0x20070eb4
   82f00:	00081cf9 	.word	0x00081cf9
   82f04:	00083249 	.word	0x00083249
   82f08:	00081cd9 	.word	0x00081cd9
   82f0c:	00083229 	.word	0x00083229
   82f10:	20070a64 	.word	0x20070a64
   82f14:	20070950 	.word	0x20070950
   82f18:	cccccccd 	.word	0xcccccccd
   82f1c:	400e0e00 	.word	0x400e0e00
   82f20:	2007097c 	.word	0x2007097c
   82f24:	20070980 	.word	0x20070980
   82f28:	2007095c 	.word	0x2007095c
   82f2c:	20070008 	.word	0x20070008
   82f30:	40094000 	.word	0x40094000
								//	printf("DUTY=%d\n",DUTY);
								}
								else if (fedbck_cnt1 > fed_value+10)
   82f34:	4b23      	ldr	r3, [pc, #140]	; (82fc4 <main+0x684>)
   82f36:	681b      	ldr	r3, [r3, #0]
   82f38:	f103 020a 	add.w	r2, r3, #10
   82f3c:	4b22      	ldr	r3, [pc, #136]	; (82fc8 <main+0x688>)
   82f3e:	681b      	ldr	r3, [r3, #0]
   82f40:	429a      	cmp	r2, r3
   82f42:	d20a      	bcs.n	82f5a <main+0x61a>
								{
									//printf("decrment by 20....\n");
									DUTY=DUTY-20;
   82f44:	4b21      	ldr	r3, [pc, #132]	; (82fcc <main+0x68c>)
   82f46:	681b      	ldr	r3, [r3, #0]
   82f48:	3b14      	subs	r3, #20
   82f4a:	4a20      	ldr	r2, [pc, #128]	; (82fcc <main+0x68c>)
   82f4c:	6013      	str	r3, [r2, #0]
									PWM->PWM_CH_NUM[4].PWM_CDTYUPD = DUTY;
   82f4e:	4a20      	ldr	r2, [pc, #128]	; (82fd0 <main+0x690>)
   82f50:	4b1e      	ldr	r3, [pc, #120]	; (82fcc <main+0x68c>)
   82f52:	681b      	ldr	r3, [r3, #0]
   82f54:	f8c2 3288 	str.w	r3, [r2, #648]	; 0x288
   82f58:	e02c      	b.n	82fb4 <main+0x674>
								//	printf("DUTY=%d\n",DUTY);
								}
								
								else if (fedbck_cnt1 > fed_value+5)
   82f5a:	4b1a      	ldr	r3, [pc, #104]	; (82fc4 <main+0x684>)
   82f5c:	681b      	ldr	r3, [r3, #0]
   82f5e:	1d5a      	adds	r2, r3, #5
   82f60:	4b19      	ldr	r3, [pc, #100]	; (82fc8 <main+0x688>)
   82f62:	681b      	ldr	r3, [r3, #0]
   82f64:	429a      	cmp	r2, r3
   82f66:	d20a      	bcs.n	82f7e <main+0x63e>
								{
									//printf("decrment by 10....\n");
									DUTY=DUTY-10;
   82f68:	4b18      	ldr	r3, [pc, #96]	; (82fcc <main+0x68c>)
   82f6a:	681b      	ldr	r3, [r3, #0]
   82f6c:	3b0a      	subs	r3, #10
   82f6e:	4a17      	ldr	r2, [pc, #92]	; (82fcc <main+0x68c>)
   82f70:	6013      	str	r3, [r2, #0]
									PWM->PWM_CH_NUM[4].PWM_CDTYUPD = DUTY;
   82f72:	4a17      	ldr	r2, [pc, #92]	; (82fd0 <main+0x690>)
   82f74:	4b15      	ldr	r3, [pc, #84]	; (82fcc <main+0x68c>)
   82f76:	681b      	ldr	r3, [r3, #0]
   82f78:	f8c2 3288 	str.w	r3, [r2, #648]	; 0x288
   82f7c:	e01a      	b.n	82fb4 <main+0x674>
								//	printf("DUTY=%d\n",DUTY);
								}
								else
								{
									//printf("decrment by 2....\n");
									DUTY=DUTY-2;
   82f7e:	4b13      	ldr	r3, [pc, #76]	; (82fcc <main+0x68c>)
   82f80:	681b      	ldr	r3, [r3, #0]
   82f82:	3b02      	subs	r3, #2
   82f84:	4a11      	ldr	r2, [pc, #68]	; (82fcc <main+0x68c>)
   82f86:	6013      	str	r3, [r2, #0]
									PWM->PWM_CH_NUM[4].PWM_CDTYUPD = DUTY;
   82f88:	4a11      	ldr	r2, [pc, #68]	; (82fd0 <main+0x690>)
   82f8a:	4b10      	ldr	r3, [pc, #64]	; (82fcc <main+0x68c>)
   82f8c:	681b      	ldr	r3, [r3, #0]
   82f8e:	f8c2 3288 	str.w	r3, [r2, #648]	; 0x288
   82f92:	e00f      	b.n	82fb4 <main+0x674>
								
						}
							
						//fedbck_cnt2=fedbck_cnt1;
						
					else if (fedbck_cnt1 < fed_value)
   82f94:	4b0c      	ldr	r3, [pc, #48]	; (82fc8 <main+0x688>)
   82f96:	681a      	ldr	r2, [r3, #0]
   82f98:	4b0a      	ldr	r3, [pc, #40]	; (82fc4 <main+0x684>)
   82f9a:	681b      	ldr	r3, [r3, #0]
   82f9c:	429a      	cmp	r2, r3
   82f9e:	d209      	bcs.n	82fb4 <main+0x674>
					{
						//	printf("less...\n");
							DUTY=DUTY+1;
   82fa0:	4b0a      	ldr	r3, [pc, #40]	; (82fcc <main+0x68c>)
   82fa2:	681b      	ldr	r3, [r3, #0]
   82fa4:	3301      	adds	r3, #1
   82fa6:	4a09      	ldr	r2, [pc, #36]	; (82fcc <main+0x68c>)
   82fa8:	6013      	str	r3, [r2, #0]
							PWM->PWM_CH_NUM[4].PWM_CDTYUPD = DUTY;
   82faa:	4a09      	ldr	r2, [pc, #36]	; (82fd0 <main+0x690>)
   82fac:	4b07      	ldr	r3, [pc, #28]	; (82fcc <main+0x68c>)
   82fae:	681b      	ldr	r3, [r3, #0]
   82fb0:	f8c2 3288 	str.w	r3, [r2, #648]	; 0x288
						//	printf("DUTY=%d\n",DUTY);
						
					}
				}
				fedbck_cnt1=0;
   82fb4:	4b04      	ldr	r3, [pc, #16]	; (82fc8 <main+0x688>)
   82fb6:	2200      	movs	r2, #0
   82fb8:	601a      	str	r2, [r3, #0]
				flag_1=0;
   82fba:	4b06      	ldr	r3, [pc, #24]	; (82fd4 <main+0x694>)
   82fbc:	2200      	movs	r2, #0
   82fbe:	701a      	strb	r2, [r3, #0]
		}
		
		
		
		
	}	
   82fc0:	e575      	b.n	82aae <main+0x16e>
   82fc2:	bf00      	nop
   82fc4:	20070974 	.word	0x20070974
   82fc8:	2007095c 	.word	0x2007095c
   82fcc:	20070008 	.word	0x20070008
   82fd0:	40094000 	.word	0x40094000
   82fd4:	20070954 	.word	0x20070954

00082fd8 <start_bloodpump>:
}

void start_bloodpump()
{
   82fd8:	b580      	push	{r7, lr}
   82fda:	af00      	add	r7, sp, #0
	//startTimer1(TC0,0,TC0_IRQn,rc);
	//startTimer2(TC0,1,TC1_IRQn,ra);
	defaultspeed_bloodpump(rc);				// 10 rotation rc count is 231
	rampingspeed_bloodpump(ra);	*/
	
	PIOD->PIO_SODR = 0x00000008;				// setting of dac input that is 8
   82fdc:	4b07      	ldr	r3, [pc, #28]	; (82ffc <start_bloodpump+0x24>)
   82fde:	2208      	movs	r2, #8
   82fe0:	631a      	str	r2, [r3, #48]	; 0x30
	PIOD->PIO_CODR = 0x00000040;
   82fe2:	4b06      	ldr	r3, [pc, #24]	; (82ffc <start_bloodpump+0x24>)
   82fe4:	2240      	movs	r2, #64	; 0x40
   82fe6:	635a      	str	r2, [r3, #52]	; 0x34
	PIOD->PIO_CODR = 0x00000200;
   82fe8:	4b04      	ldr	r3, [pc, #16]	; (82ffc <start_bloodpump+0x24>)
   82fea:	f44f 7200 	mov.w	r2, #512	; 0x200
   82fee:	635a      	str	r2, [r3, #52]	; 0x34
	cpu2_sv_cntrl_activatepump(BLOODPUMP);		//35 rotation ra count will be 4179	
   82ff0:	2001      	movs	r0, #1
   82ff2:	4b03      	ldr	r3, [pc, #12]	; (83000 <start_bloodpump+0x28>)
   82ff4:	4798      	blx	r3
	
}
   82ff6:	bf00      	nop
   82ff8:	bd80      	pop	{r7, pc}
   82ffa:	bf00      	nop
   82ffc:	400e1400 	.word	0x400e1400
   83000:	00081c99 	.word	0x00081c99

00083004 <stop_bloodpump>:
void stop_bloodpump()
{
   83004:	b580      	push	{r7, lr}
   83006:	af00      	add	r7, sp, #0
	cpu2_sv_cntrl_deactivatepump(BLOODPUMP);
   83008:	2001      	movs	r0, #1
   8300a:	4b05      	ldr	r3, [pc, #20]	; (83020 <stop_bloodpump+0x1c>)
   8300c:	4798      	blx	r3
	PIOD->PIO_CODR = 0x0000000F;
   8300e:	4b05      	ldr	r3, [pc, #20]	; (83024 <stop_bloodpump+0x20>)
   83010:	220f      	movs	r2, #15
   83012:	635a      	str	r2, [r3, #52]	; 0x34
	PIOD->PIO_SODR = 0x00000200;
   83014:	4b03      	ldr	r3, [pc, #12]	; (83024 <stop_bloodpump+0x20>)
   83016:	f44f 7200 	mov.w	r2, #512	; 0x200
   8301a:	631a      	str	r2, [r3, #48]	; 0x30
	/*PIOD->PIO_SODR = 0x00000200;
	PIOC->PIO_SODR = 0x00001000;
	cpu2_sv_cntrl_deactivatepump(BLOODPUMP);
	CPU2_S_STOP_TIMER(0);
	CPU2_S_STOP_TIMER(1);*/
}
   8301c:	bf00      	nop
   8301e:	bd80      	pop	{r7, pc}
   83020:	00081cb9 	.word	0x00081cb9
   83024:	400e1400 	.word	0x400e1400

00083028 <speedchange_bloodpump>:
void speedchange_bloodpump(uint32_t spd_change)
{
   83028:	b590      	push	{r4, r7, lr}
   8302a:	b085      	sub	sp, #20
   8302c:	af00      	add	r7, sp, #0
   8302e:	6078      	str	r0, [r7, #4]
	int i;
	
	//printf("Before %d\n",spd_change);
	
	for(i=0;i<20;i++)
   83030:	2300      	movs	r3, #0
   83032:	60fb      	str	r3, [r7, #12]
   83034:	e096      	b.n	83164 <speedchange_bloodpump+0x13c>
	{
		if(spd_change == blood_array[i].ml)
   83036:	4a56      	ldr	r2, [pc, #344]	; (83190 <speedchange_bloodpump+0x168>)
   83038:	68fb      	ldr	r3, [r7, #12]
   8303a:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
   8303e:	b29b      	uxth	r3, r3
   83040:	461a      	mov	r2, r3
   83042:	687b      	ldr	r3, [r7, #4]
   83044:	429a      	cmp	r2, r3
   83046:	d113      	bne.n	83070 <speedchange_bloodpump+0x48>
		{
			printf("value matched\n");
   83048:	4852      	ldr	r0, [pc, #328]	; (83194 <speedchange_bloodpump+0x16c>)
   8304a:	4b53      	ldr	r3, [pc, #332]	; (83198 <speedchange_bloodpump+0x170>)
   8304c:	4798      	blx	r3
			DUTY=blood_array[i].duty_value;
   8304e:	4a50      	ldr	r2, [pc, #320]	; (83190 <speedchange_bloodpump+0x168>)
   83050:	68fb      	ldr	r3, [r7, #12]
   83052:	00db      	lsls	r3, r3, #3
   83054:	4413      	add	r3, r2
   83056:	885b      	ldrh	r3, [r3, #2]
   83058:	b29b      	uxth	r3, r3
   8305a:	461a      	mov	r2, r3
   8305c:	4b4f      	ldr	r3, [pc, #316]	; (8319c <speedchange_bloodpump+0x174>)
   8305e:	601a      	str	r2, [r3, #0]
			fed_value=blood_array[i].fdbck;
   83060:	4a4b      	ldr	r2, [pc, #300]	; (83190 <speedchange_bloodpump+0x168>)
   83062:	68fb      	ldr	r3, [r7, #12]
   83064:	00db      	lsls	r3, r3, #3
   83066:	4413      	add	r3, r2
   83068:	685b      	ldr	r3, [r3, #4]
   8306a:	4a4d      	ldr	r2, [pc, #308]	; (831a0 <speedchange_bloodpump+0x178>)
   8306c:	6013      	str	r3, [r2, #0]
			//value=i;
			break;
   8306e:	e07d      	b.n	8316c <speedchange_bloodpump+0x144>
		}
		else if((spd_change > blood_array[i].ml) && (spd_change < blood_array[i+1].ml))
   83070:	4a47      	ldr	r2, [pc, #284]	; (83190 <speedchange_bloodpump+0x168>)
   83072:	68fb      	ldr	r3, [r7, #12]
   83074:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
   83078:	b29b      	uxth	r3, r3
   8307a:	461a      	mov	r2, r3
   8307c:	687b      	ldr	r3, [r7, #4]
   8307e:	429a      	cmp	r2, r3
   83080:	d26d      	bcs.n	8315e <speedchange_bloodpump+0x136>
   83082:	68fb      	ldr	r3, [r7, #12]
   83084:	3301      	adds	r3, #1
   83086:	4a42      	ldr	r2, [pc, #264]	; (83190 <speedchange_bloodpump+0x168>)
   83088:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
   8308c:	b29b      	uxth	r3, r3
   8308e:	461a      	mov	r2, r3
   83090:	687b      	ldr	r3, [r7, #4]
   83092:	429a      	cmp	r2, r3
   83094:	d963      	bls.n	8315e <speedchange_bloodpump+0x136>
		{
			printf("manipulation\n");
   83096:	4843      	ldr	r0, [pc, #268]	; (831a4 <speedchange_bloodpump+0x17c>)
   83098:	4b3f      	ldr	r3, [pc, #252]	; (83198 <speedchange_bloodpump+0x170>)
   8309a:	4798      	blx	r3
			DUTY = blood_array[i].duty_value+((blood_array[i+1].duty_value-blood_array[i].duty_value)/(blood_array[i+1].ml-blood_array[i].ml))*(spd_change-blood_array[i].ml);
   8309c:	4a3c      	ldr	r2, [pc, #240]	; (83190 <speedchange_bloodpump+0x168>)
   8309e:	68fb      	ldr	r3, [r7, #12]
   830a0:	00db      	lsls	r3, r3, #3
   830a2:	4413      	add	r3, r2
   830a4:	885b      	ldrh	r3, [r3, #2]
   830a6:	b29b      	uxth	r3, r3
   830a8:	4618      	mov	r0, r3
   830aa:	68fb      	ldr	r3, [r7, #12]
   830ac:	3301      	adds	r3, #1
   830ae:	4a38      	ldr	r2, [pc, #224]	; (83190 <speedchange_bloodpump+0x168>)
   830b0:	00db      	lsls	r3, r3, #3
   830b2:	4413      	add	r3, r2
   830b4:	885b      	ldrh	r3, [r3, #2]
   830b6:	b29b      	uxth	r3, r3
   830b8:	4619      	mov	r1, r3
   830ba:	4a35      	ldr	r2, [pc, #212]	; (83190 <speedchange_bloodpump+0x168>)
   830bc:	68fb      	ldr	r3, [r7, #12]
   830be:	00db      	lsls	r3, r3, #3
   830c0:	4413      	add	r3, r2
   830c2:	885b      	ldrh	r3, [r3, #2]
   830c4:	b29b      	uxth	r3, r3
   830c6:	1aca      	subs	r2, r1, r3
   830c8:	68fb      	ldr	r3, [r7, #12]
   830ca:	3301      	adds	r3, #1
   830cc:	4930      	ldr	r1, [pc, #192]	; (83190 <speedchange_bloodpump+0x168>)
   830ce:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
   830d2:	b29b      	uxth	r3, r3
   830d4:	461c      	mov	r4, r3
   830d6:	492e      	ldr	r1, [pc, #184]	; (83190 <speedchange_bloodpump+0x168>)
   830d8:	68fb      	ldr	r3, [r7, #12]
   830da:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
   830de:	b29b      	uxth	r3, r3
   830e0:	1ae3      	subs	r3, r4, r3
   830e2:	fb92 f3f3 	sdiv	r3, r2, r3
   830e6:	4619      	mov	r1, r3
   830e8:	4a29      	ldr	r2, [pc, #164]	; (83190 <speedchange_bloodpump+0x168>)
   830ea:	68fb      	ldr	r3, [r7, #12]
   830ec:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
   830f0:	b29b      	uxth	r3, r3
   830f2:	461a      	mov	r2, r3
   830f4:	687b      	ldr	r3, [r7, #4]
   830f6:	1a9b      	subs	r3, r3, r2
   830f8:	fb03 f301 	mul.w	r3, r3, r1
   830fc:	4403      	add	r3, r0
   830fe:	4a27      	ldr	r2, [pc, #156]	; (8319c <speedchange_bloodpump+0x174>)
   83100:	6013      	str	r3, [r2, #0]
			//value=19;
			//fed_value = blood_array[i].fdbck+((blood_array[i+1].fdbck-blood_array[i].fdbck)/(blood_array[i+1].ml-blood_array[i].ml))*(spd_change-blood_array[i].ml);
			fed_value = ((spd_change-blood_array[i].ml)*(blood_array[i+1].fdbck-blood_array[i].fdbck)/(blood_array[i+1].ml-blood_array[i].ml))+blood_array[i].fdbck;
   83102:	4a23      	ldr	r2, [pc, #140]	; (83190 <speedchange_bloodpump+0x168>)
   83104:	68fb      	ldr	r3, [r7, #12]
   83106:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
   8310a:	b29b      	uxth	r3, r3
   8310c:	461a      	mov	r2, r3
   8310e:	687b      	ldr	r3, [r7, #4]
   83110:	1a9a      	subs	r2, r3, r2
   83112:	68fb      	ldr	r3, [r7, #12]
   83114:	3301      	adds	r3, #1
   83116:	491e      	ldr	r1, [pc, #120]	; (83190 <speedchange_bloodpump+0x168>)
   83118:	00db      	lsls	r3, r3, #3
   8311a:	440b      	add	r3, r1
   8311c:	6859      	ldr	r1, [r3, #4]
   8311e:	481c      	ldr	r0, [pc, #112]	; (83190 <speedchange_bloodpump+0x168>)
   83120:	68fb      	ldr	r3, [r7, #12]
   83122:	00db      	lsls	r3, r3, #3
   83124:	4403      	add	r3, r0
   83126:	685b      	ldr	r3, [r3, #4]
   83128:	1acb      	subs	r3, r1, r3
   8312a:	fb03 f302 	mul.w	r3, r3, r2
   8312e:	68fa      	ldr	r2, [r7, #12]
   83130:	3201      	adds	r2, #1
   83132:	4917      	ldr	r1, [pc, #92]	; (83190 <speedchange_bloodpump+0x168>)
   83134:	f831 2032 	ldrh.w	r2, [r1, r2, lsl #3]
   83138:	b292      	uxth	r2, r2
   8313a:	4610      	mov	r0, r2
   8313c:	4914      	ldr	r1, [pc, #80]	; (83190 <speedchange_bloodpump+0x168>)
   8313e:	68fa      	ldr	r2, [r7, #12]
   83140:	f831 2032 	ldrh.w	r2, [r1, r2, lsl #3]
   83144:	b292      	uxth	r2, r2
   83146:	1a82      	subs	r2, r0, r2
   83148:	fbb3 f2f2 	udiv	r2, r3, r2
   8314c:	4910      	ldr	r1, [pc, #64]	; (83190 <speedchange_bloodpump+0x168>)
   8314e:	68fb      	ldr	r3, [r7, #12]
   83150:	00db      	lsls	r3, r3, #3
   83152:	440b      	add	r3, r1
   83154:	685b      	ldr	r3, [r3, #4]
   83156:	4413      	add	r3, r2
   83158:	4a11      	ldr	r2, [pc, #68]	; (831a0 <speedchange_bloodpump+0x178>)
   8315a:	6013      	str	r3, [r2, #0]
			//blood_array[value].fdbck=fed_value;
			//printf("After %d\n",fed_value);
			break;
   8315c:	e006      	b.n	8316c <speedchange_bloodpump+0x144>
{
	int i;
	
	//printf("Before %d\n",spd_change);
	
	for(i=0;i<20;i++)
   8315e:	68fb      	ldr	r3, [r7, #12]
   83160:	3301      	adds	r3, #1
   83162:	60fb      	str	r3, [r7, #12]
   83164:	68fb      	ldr	r3, [r7, #12]
   83166:	2b13      	cmp	r3, #19
   83168:	f77f af65 	ble.w	83036 <speedchange_bloodpump+0xe>
			//printf("After %d\n",fed_value);
			break;
		}
	}
	//spd_change=spd_change+200;
	printf("After %d\n",DUTY);
   8316c:	4b0b      	ldr	r3, [pc, #44]	; (8319c <speedchange_bloodpump+0x174>)
   8316e:	681b      	ldr	r3, [r3, #0]
   83170:	4619      	mov	r1, r3
   83172:	480d      	ldr	r0, [pc, #52]	; (831a8 <speedchange_bloodpump+0x180>)
   83174:	4b08      	ldr	r3, [pc, #32]	; (83198 <speedchange_bloodpump+0x170>)
   83176:	4798      	blx	r3
	PWM->PWM_CH_NUM[4].PWM_CDTYUPD = DUTY;
   83178:	4a0c      	ldr	r2, [pc, #48]	; (831ac <speedchange_bloodpump+0x184>)
   8317a:	4b08      	ldr	r3, [pc, #32]	; (8319c <speedchange_bloodpump+0x174>)
   8317c:	681b      	ldr	r3, [r3, #0]
   8317e:	f8c2 3288 	str.w	r3, [r2, #648]	; 0x288
	flag_2=1;
   83182:	4b0b      	ldr	r3, [pc, #44]	; (831b0 <speedchange_bloodpump+0x188>)
   83184:	2201      	movs	r2, #1
   83186:	701a      	strb	r2, [r3, #0]
		ra = (84000000/(128*val))-1;
		//startTimer2(TC0,1,TC1_IRQn,ra);
		rampingspeed_bloodpump(ra);
	}*/
	
}
   83188:	bf00      	nop
   8318a:	3714      	adds	r7, #20
   8318c:	46bd      	mov	sp, r7
   8318e:	bd90      	pop	{r4, r7, pc}
   83190:	2007000c 	.word	0x2007000c
   83194:	000875d8 	.word	0x000875d8
   83198:	00084669 	.word	0x00084669
   8319c:	20070008 	.word	0x20070008
   831a0:	20070974 	.word	0x20070974
   831a4:	000875e8 	.word	0x000875e8
   831a8:	000875f8 	.word	0x000875f8
   831ac:	40094000 	.word	0x40094000
   831b0:	2007096d 	.word	0x2007096d

000831b4 <cpu2_sensorstatus>:
{
	CPU2_S_START_TIMER(2,rampingspeed);
}

void cpu2_sensorstatus(void)
{
   831b4:	b580      	push	{r7, lr}
   831b6:	af00      	add	r7, sp, #0
	
	
	cpu2_sv_status_getsystemstatus(&sv_sys_statbuffer);
   831b8:	4818      	ldr	r0, [pc, #96]	; (8321c <cpu2_sensorstatus+0x68>)
   831ba:	4b19      	ldr	r3, [pc, #100]	; (83220 <cpu2_sensorstatus+0x6c>)
   831bc:	4798      	blx	r3
	
	sensor_status.abd=sv_sys_statbuffer.abdstatus;
   831be:	4b17      	ldr	r3, [pc, #92]	; (8321c <cpu2_sensorstatus+0x68>)
   831c0:	889b      	ldrh	r3, [r3, #4]
   831c2:	b2da      	uxtb	r2, r3
   831c4:	4b17      	ldr	r3, [pc, #92]	; (83224 <cpu2_sensorstatus+0x70>)
   831c6:	701a      	strb	r2, [r3, #0]
	sensor_status.bd=sv_sys_statbuffer.bdstatus;
   831c8:	4b14      	ldr	r3, [pc, #80]	; (8321c <cpu2_sensorstatus+0x68>)
   831ca:	88db      	ldrh	r3, [r3, #6]
   831cc:	b2da      	uxtb	r2, r3
   831ce:	4b15      	ldr	r3, [pc, #84]	; (83224 <cpu2_sensorstatus+0x70>)
   831d0:	705a      	strb	r2, [r3, #1]
	sensor_status.bldpump_door=sv_sys_statbuffer.bp_door;
   831d2:	4b12      	ldr	r3, [pc, #72]	; (8321c <cpu2_sensorstatus+0x68>)
   831d4:	891b      	ldrh	r3, [r3, #8]
   831d6:	b2da      	uxtb	r2, r3
   831d8:	4b12      	ldr	r3, [pc, #72]	; (83224 <cpu2_sensorstatus+0x70>)
   831da:	709a      	strb	r2, [r3, #2]
	sensor_status.bldpump_sense=sv_sys_statbuffer.bp_sense;
   831dc:	4b0f      	ldr	r3, [pc, #60]	; (8321c <cpu2_sensorstatus+0x68>)
   831de:	895b      	ldrh	r3, [r3, #10]
   831e0:	b2da      	uxtb	r2, r3
   831e2:	4b10      	ldr	r3, [pc, #64]	; (83224 <cpu2_sensorstatus+0x70>)
   831e4:	70da      	strb	r2, [r3, #3]
	sensor_status.clamp_fdbk=sv_sys_statbuffer.clamp_fdbk;
   831e6:	4b0d      	ldr	r3, [pc, #52]	; (8321c <cpu2_sensorstatus+0x68>)
   831e8:	899b      	ldrh	r3, [r3, #12]
   831ea:	b2da      	uxtb	r2, r3
   831ec:	4b0d      	ldr	r3, [pc, #52]	; (83224 <cpu2_sensorstatus+0x70>)
   831ee:	711a      	strb	r2, [r3, #4]
	sensor_status.clamp_door=sv_sys_statbuffer.clamp_door;
   831f0:	4b0a      	ldr	r3, [pc, #40]	; (8321c <cpu2_sensorstatus+0x68>)
   831f2:	89db      	ldrh	r3, [r3, #14]
   831f4:	b2da      	uxtb	r2, r3
   831f6:	4b0b      	ldr	r3, [pc, #44]	; (83224 <cpu2_sensorstatus+0x70>)
   831f8:	715a      	strb	r2, [r3, #5]
	sensor_status.rdncy_irq=sv_sys_statbuffer.rudncy_irq;
   831fa:	4b08      	ldr	r3, [pc, #32]	; (8321c <cpu2_sensorstatus+0x68>)
   831fc:	8a1b      	ldrh	r3, [r3, #16]
   831fe:	b2da      	uxtb	r2, r3
   83200:	4b08      	ldr	r3, [pc, #32]	; (83224 <cpu2_sensorstatus+0x70>)
   83202:	719a      	strb	r2, [r3, #6]
// 	sensor_status.cond1=sv_sys_statbuffer.cond1_status;
// 	sensor_status.cond2=sv_sys_statbuffer.cond2_status;
// 	sensor_status.temp=sv_sys_statbuffer.Tempstatus;
	sensor_status.apt=sv_sys_statbuffer.aptstatus;
   83204:	4b05      	ldr	r3, [pc, #20]	; (8321c <cpu2_sensorstatus+0x68>)
   83206:	881b      	ldrh	r3, [r3, #0]
   83208:	461a      	mov	r2, r3
   8320a:	4b06      	ldr	r3, [pc, #24]	; (83224 <cpu2_sensorstatus+0x70>)
   8320c:	615a      	str	r2, [r3, #20]
	sensor_status.vpt=sv_sys_statbuffer.vptstatus;	
   8320e:	4b03      	ldr	r3, [pc, #12]	; (8321c <cpu2_sensorstatus+0x68>)
   83210:	885b      	ldrh	r3, [r3, #2]
   83212:	461a      	mov	r2, r3
   83214:	4b03      	ldr	r3, [pc, #12]	; (83224 <cpu2_sensorstatus+0x70>)
   83216:	619a      	str	r2, [r3, #24]
}
   83218:	bf00      	nop
   8321a:	bd80      	pop	{r7, pc}
   8321c:	20070e9c 	.word	0x20070e9c
   83220:	00081d19 	.word	0x00081d19
   83224:	20070eb4 	.word	0x20070eb4

00083228 <safety_measure_activate>:

void safety_measure_activate(void)
{
   83228:	b580      	push	{r7, lr}
   8322a:	af00      	add	r7, sp, #0
	cpu2_sv_cntrl_activate_pin(CLAMP_PWR);
   8322c:	2005      	movs	r0, #5
   8322e:	4b04      	ldr	r3, [pc, #16]	; (83240 <safety_measure_activate+0x18>)
   83230:	4798      	blx	r3
	stop_bloodpump();
   83232:	4b04      	ldr	r3, [pc, #16]	; (83244 <safety_measure_activate+0x1c>)
   83234:	4798      	blx	r3
	cpu2_sv_cntrl_activate_pin(BYPS_PWR);
   83236:	2006      	movs	r0, #6
   83238:	4b01      	ldr	r3, [pc, #4]	; (83240 <safety_measure_activate+0x18>)
   8323a:	4798      	blx	r3
}
   8323c:	bf00      	nop
   8323e:	bd80      	pop	{r7, pc}
   83240:	00081cd9 	.word	0x00081cd9
   83244:	00083005 	.word	0x00083005

00083248 <safety_measure_deactivate>:
void safety_measure_deactivate(void)
{
   83248:	b580      	push	{r7, lr}
   8324a:	af00      	add	r7, sp, #0
	cpu2_sv_cntrl_deactivate_pin(CLAMP_PWR);
   8324c:	2005      	movs	r0, #5
   8324e:	4b04      	ldr	r3, [pc, #16]	; (83260 <safety_measure_deactivate+0x18>)
   83250:	4798      	blx	r3
	start_bloodpump();
   83252:	4b04      	ldr	r3, [pc, #16]	; (83264 <safety_measure_deactivate+0x1c>)
   83254:	4798      	blx	r3
	cpu2_sv_cntrl_deactivate_pin(BYPS_PWR);
   83256:	2006      	movs	r0, #6
   83258:	4b01      	ldr	r3, [pc, #4]	; (83260 <safety_measure_deactivate+0x18>)
   8325a:	4798      	blx	r3
	//states_2= CPU2_BLOODPUMP;
}
   8325c:	bf00      	nop
   8325e:	bd80      	pop	{r7, pc}
   83260:	00081cf9 	.word	0x00081cf9
   83264:	00082fd9 	.word	0x00082fd9

00083268 <osc_enable>:
#define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
   83268:	b580      	push	{r7, lr}
   8326a:	b082      	sub	sp, #8
   8326c:	af00      	add	r7, sp, #0
   8326e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   83270:	687b      	ldr	r3, [r7, #4]
   83272:	2b07      	cmp	r3, #7
   83274:	d831      	bhi.n	832da <osc_enable+0x72>
   83276:	a201      	add	r2, pc, #4	; (adr r2, 8327c <osc_enable+0x14>)
   83278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8327c:	000832d9 	.word	0x000832d9
   83280:	0008329d 	.word	0x0008329d
   83284:	000832a5 	.word	0x000832a5
   83288:	000832ad 	.word	0x000832ad
   8328c:	000832b5 	.word	0x000832b5
   83290:	000832bd 	.word	0x000832bd
   83294:	000832c5 	.word	0x000832c5
   83298:	000832cf 	.word	0x000832cf
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   8329c:	2000      	movs	r0, #0
   8329e:	4b11      	ldr	r3, [pc, #68]	; (832e4 <osc_enable+0x7c>)
   832a0:	4798      	blx	r3
		break;
   832a2:	e01a      	b.n	832da <osc_enable+0x72>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   832a4:	2001      	movs	r0, #1
   832a6:	4b0f      	ldr	r3, [pc, #60]	; (832e4 <osc_enable+0x7c>)
   832a8:	4798      	blx	r3
		break;
   832aa:	e016      	b.n	832da <osc_enable+0x72>


	case OSC_MAINCK_4M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   832ac:	2000      	movs	r0, #0
   832ae:	4b0e      	ldr	r3, [pc, #56]	; (832e8 <osc_enable+0x80>)
   832b0:	4798      	blx	r3
		break;
   832b2:	e012      	b.n	832da <osc_enable+0x72>

	case OSC_MAINCK_8M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   832b4:	2010      	movs	r0, #16
   832b6:	4b0c      	ldr	r3, [pc, #48]	; (832e8 <osc_enable+0x80>)
   832b8:	4798      	blx	r3
		break;
   832ba:	e00e      	b.n	832da <osc_enable+0x72>

	case OSC_MAINCK_12M_RC:
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   832bc:	2020      	movs	r0, #32
   832be:	4b0a      	ldr	r3, [pc, #40]	; (832e8 <osc_enable+0x80>)
   832c0:	4798      	blx	r3
		break;
   832c2:	e00a      	b.n	832da <osc_enable+0x72>


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   832c4:	213e      	movs	r1, #62	; 0x3e
   832c6:	2000      	movs	r0, #0
   832c8:	4b08      	ldr	r3, [pc, #32]	; (832ec <osc_enable+0x84>)
   832ca:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
   832cc:	e005      	b.n	832da <osc_enable+0x72>

	case OSC_MAINCK_BYPASS:
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
   832ce:	213e      	movs	r1, #62	; 0x3e
   832d0:	2001      	movs	r0, #1
   832d2:	4b06      	ldr	r3, [pc, #24]	; (832ec <osc_enable+0x84>)
   832d4:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
   832d6:	e000      	b.n	832da <osc_enable+0x72>

static inline void osc_enable(uint32_t ul_id)
{
	switch (ul_id) {
	case OSC_SLCK_32K_RC:
		break;
   832d8:	bf00      	nop
		pmc_switch_mainck_to_xtal(PMC_OSC_BYPASS,
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
	}
}
   832da:	bf00      	nop
   832dc:	3708      	adds	r7, #8
   832de:	46bd      	mov	sp, r7
   832e0:	bd80      	pop	{r7, pc}
   832e2:	bf00      	nop
   832e4:	00083c3d 	.word	0x00083c3d
   832e8:	00083ca9 	.word	0x00083ca9
   832ec:	00083d49 	.word	0x00083d49

000832f0 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
   832f0:	b580      	push	{r7, lr}
   832f2:	b082      	sub	sp, #8
   832f4:	af00      	add	r7, sp, #0
   832f6:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   832f8:	687b      	ldr	r3, [r7, #4]
   832fa:	2b07      	cmp	r3, #7
   832fc:	d826      	bhi.n	8334c <osc_is_ready+0x5c>
   832fe:	a201      	add	r2, pc, #4	; (adr r2, 83304 <osc_is_ready+0x14>)
   83300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83304:	00083325 	.word	0x00083325
   83308:	00083329 	.word	0x00083329
   8330c:	00083329 	.word	0x00083329
   83310:	0008333b 	.word	0x0008333b
   83314:	0008333b 	.word	0x0008333b
   83318:	0008333b 	.word	0x0008333b
   8331c:	0008333b 	.word	0x0008333b
   83320:	0008333b 	.word	0x0008333b
	case OSC_SLCK_32K_RC:
		return 1;
   83324:	2301      	movs	r3, #1
   83326:	e012      	b.n	8334e <osc_is_ready+0x5e>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
   83328:	4b0b      	ldr	r3, [pc, #44]	; (83358 <osc_is_ready+0x68>)
   8332a:	4798      	blx	r3
   8332c:	4603      	mov	r3, r0
   8332e:	2b00      	cmp	r3, #0
   83330:	bf14      	ite	ne
   83332:	2301      	movne	r3, #1
   83334:	2300      	moveq	r3, #0
   83336:	b2db      	uxtb	r3, r3
   83338:	e009      	b.n	8334e <osc_is_ready+0x5e>
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   8333a:	4b08      	ldr	r3, [pc, #32]	; (8335c <osc_is_ready+0x6c>)
   8333c:	4798      	blx	r3
   8333e:	4603      	mov	r3, r0
   83340:	2b00      	cmp	r3, #0
   83342:	bf14      	ite	ne
   83344:	2301      	movne	r3, #1
   83346:	2300      	moveq	r3, #0
   83348:	b2db      	uxtb	r3, r3
   8334a:	e000      	b.n	8334e <osc_is_ready+0x5e>
	}

	return 0;
   8334c:	2300      	movs	r3, #0
}
   8334e:	4618      	mov	r0, r3
   83350:	3708      	adds	r7, #8
   83352:	46bd      	mov	sp, r7
   83354:	bd80      	pop	{r7, pc}
   83356:	bf00      	nop
   83358:	00083c75 	.word	0x00083c75
   8335c:	00083dc1 	.word	0x00083dc1

00083360 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   83360:	b480      	push	{r7}
   83362:	b083      	sub	sp, #12
   83364:	af00      	add	r7, sp, #0
   83366:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   83368:	687b      	ldr	r3, [r7, #4]
   8336a:	2b07      	cmp	r3, #7
   8336c:	d825      	bhi.n	833ba <osc_get_rate+0x5a>
   8336e:	a201      	add	r2, pc, #4	; (adr r2, 83374 <osc_get_rate+0x14>)
   83370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83374:	00083395 	.word	0x00083395
   83378:	0008339b 	.word	0x0008339b
   8337c:	000833a1 	.word	0x000833a1
   83380:	000833a7 	.word	0x000833a7
   83384:	000833ab 	.word	0x000833ab
   83388:	000833af 	.word	0x000833af
   8338c:	000833b3 	.word	0x000833b3
   83390:	000833b7 	.word	0x000833b7
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   83394:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   83398:	e010      	b.n	833bc <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_SLCK_XTAL
	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   8339a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   8339e:	e00d      	b.n	833bc <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_SLCK_BYPASS
	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   833a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   833a4:	e00a      	b.n	833bc <osc_get_rate+0x5c>
#endif

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   833a6:	4b08      	ldr	r3, [pc, #32]	; (833c8 <osc_get_rate+0x68>)
   833a8:	e008      	b.n	833bc <osc_get_rate+0x5c>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   833aa:	4b08      	ldr	r3, [pc, #32]	; (833cc <osc_get_rate+0x6c>)
   833ac:	e006      	b.n	833bc <osc_get_rate+0x5c>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   833ae:	4b08      	ldr	r3, [pc, #32]	; (833d0 <osc_get_rate+0x70>)
   833b0:	e004      	b.n	833bc <osc_get_rate+0x5c>

#ifdef BOARD_FREQ_MAINCK_XTAL
	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   833b2:	4b07      	ldr	r3, [pc, #28]	; (833d0 <osc_get_rate+0x70>)
   833b4:	e002      	b.n	833bc <osc_get_rate+0x5c>
#endif

#ifdef BOARD_FREQ_MAINCK_BYPASS
	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   833b6:	4b06      	ldr	r3, [pc, #24]	; (833d0 <osc_get_rate+0x70>)
   833b8:	e000      	b.n	833bc <osc_get_rate+0x5c>
#endif
	}

	return 0;
   833ba:	2300      	movs	r3, #0
}
   833bc:	4618      	mov	r0, r3
   833be:	370c      	adds	r7, #12
   833c0:	46bd      	mov	sp, r7
   833c2:	bc80      	pop	{r7}
   833c4:	4770      	bx	lr
   833c6:	bf00      	nop
   833c8:	003d0900 	.word	0x003d0900
   833cc:	007a1200 	.word	0x007a1200
   833d0:	00b71b00 	.word	0x00b71b00

000833d4 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
   833d4:	b580      	push	{r7, lr}
   833d6:	b082      	sub	sp, #8
   833d8:	af00      	add	r7, sp, #0
   833da:	4603      	mov	r3, r0
   833dc:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   833de:	bf00      	nop
   833e0:	79fb      	ldrb	r3, [r7, #7]
   833e2:	4618      	mov	r0, r3
   833e4:	4b05      	ldr	r3, [pc, #20]	; (833fc <osc_wait_ready+0x28>)
   833e6:	4798      	blx	r3
   833e8:	4603      	mov	r3, r0
   833ea:	f083 0301 	eor.w	r3, r3, #1
   833ee:	b2db      	uxtb	r3, r3
   833f0:	2b00      	cmp	r3, #0
   833f2:	d1f5      	bne.n	833e0 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
   833f4:	bf00      	nop
   833f6:	3708      	adds	r7, #8
   833f8:	46bd      	mov	sp, r7
   833fa:	bd80      	pop	{r7, pc}
   833fc:	000832f1 	.word	0x000832f1

00083400 <pll_config_init>:
 * \note The SAM3X PLL hardware interprets mul as mul+1. For readability the hardware mul+1
 * is hidden in this implementation. Use mul as mul effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
   83400:	b580      	push	{r7, lr}
   83402:	b086      	sub	sp, #24
   83404:	af00      	add	r7, sp, #0
   83406:	60f8      	str	r0, [r7, #12]
   83408:	607a      	str	r2, [r7, #4]
   8340a:	603b      	str	r3, [r7, #0]
   8340c:	460b      	mov	r3, r1
   8340e:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
   83410:	687b      	ldr	r3, [r7, #4]
   83412:	2b00      	cmp	r3, #0
   83414:	d107      	bne.n	83426 <pll_config_init+0x26>
   83416:	683b      	ldr	r3, [r7, #0]
   83418:	2b00      	cmp	r3, #0
   8341a:	d104      	bne.n	83426 <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
   8341c:	68fb      	ldr	r3, [r7, #12]
   8341e:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   83422:	601a      	str	r2, [r3, #0]
   83424:	e019      	b.n	8345a <pll_config_init+0x5a>
	} else { /* PLLA */
		/* Calculate internal VCO frequency */
		vco_hz = osc_get_rate(e_src) / ul_div;
   83426:	7afb      	ldrb	r3, [r7, #11]
   83428:	4618      	mov	r0, r3
   8342a:	4b0e      	ldr	r3, [pc, #56]	; (83464 <pll_config_init+0x64>)
   8342c:	4798      	blx	r3
   8342e:	4602      	mov	r2, r0
   83430:	687b      	ldr	r3, [r7, #4]
   83432:	fbb2 f3f3 	udiv	r3, r2, r3
   83436:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_INPUT_MIN_HZ);
		Assert(vco_hz <= PLL_INPUT_MAX_HZ);

		vco_hz *= ul_mul;
   83438:	697b      	ldr	r3, [r7, #20]
   8343a:	683a      	ldr	r2, [r7, #0]
   8343c:	fb02 f303 	mul.w	r3, r2, r3
   83440:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
		Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

		/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) | CKGR_PLLAR_DIVA(ul_div) | CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
   83442:	683b      	ldr	r3, [r7, #0]
   83444:	3b01      	subs	r3, #1
   83446:	041a      	lsls	r2, r3, #16
   83448:	4b07      	ldr	r3, [pc, #28]	; (83468 <pll_config_init+0x68>)
   8344a:	4013      	ands	r3, r2
   8344c:	687a      	ldr	r2, [r7, #4]
   8344e:	b2d2      	uxtb	r2, r2
   83450:	4313      	orrs	r3, r2
   83452:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
   83456:	68fb      	ldr	r3, [r7, #12]
   83458:	601a      	str	r2, [r3, #0]
	}
}
   8345a:	bf00      	nop
   8345c:	3718      	adds	r7, #24
   8345e:	46bd      	mov	sp, r7
   83460:	bd80      	pop	{r7, pc}
   83462:	bf00      	nop
   83464:	00083361 	.word	0x00083361
   83468:	07ff0000 	.word	0x07ff0000

0008346c <pll_enable>:
		PMC->CKGR_UCKR = p_cfg->ctrl;
	}
}

static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
   8346c:	b580      	push	{r7, lr}
   8346e:	b082      	sub	sp, #8
   83470:	af00      	add	r7, sp, #0
   83472:	6078      	str	r0, [r7, #4]
   83474:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   83476:	683b      	ldr	r3, [r7, #0]
   83478:	2b00      	cmp	r3, #0
   8347a:	d108      	bne.n	8348e <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
   8347c:	4b09      	ldr	r3, [pc, #36]	; (834a4 <pll_enable+0x38>)
   8347e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   83480:	4a09      	ldr	r2, [pc, #36]	; (834a8 <pll_enable+0x3c>)
   83482:	687b      	ldr	r3, [r7, #4]
   83484:	681b      	ldr	r3, [r3, #0]
   83486:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   8348a:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
   8348c:	e005      	b.n	8349a <pll_enable+0x2e>

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   8348e:	4a06      	ldr	r2, [pc, #24]	; (834a8 <pll_enable+0x3c>)
   83490:	687b      	ldr	r3, [r7, #4]
   83492:	681b      	ldr	r3, [r3, #0]
   83494:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   83498:	61d3      	str	r3, [r2, #28]
	}
}
   8349a:	bf00      	nop
   8349c:	3708      	adds	r7, #8
   8349e:	46bd      	mov	sp, r7
   834a0:	bd80      	pop	{r7, pc}
   834a2:	bf00      	nop
   834a4:	00083dd9 	.word	0x00083dd9
   834a8:	400e0600 	.word	0x400e0600

000834ac <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
   834ac:	b580      	push	{r7, lr}
   834ae:	b082      	sub	sp, #8
   834b0:	af00      	add	r7, sp, #0
   834b2:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   834b4:	687b      	ldr	r3, [r7, #4]
   834b6:	2b00      	cmp	r3, #0
   834b8:	d103      	bne.n	834c2 <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
   834ba:	4b05      	ldr	r3, [pc, #20]	; (834d0 <pll_is_locked+0x24>)
   834bc:	4798      	blx	r3
   834be:	4603      	mov	r3, r0
   834c0:	e002      	b.n	834c8 <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
   834c2:	4b04      	ldr	r3, [pc, #16]	; (834d4 <pll_is_locked+0x28>)
   834c4:	4798      	blx	r3
   834c6:	4603      	mov	r3, r0
	}
}
   834c8:	4618      	mov	r0, r3
   834ca:	3708      	adds	r7, #8
   834cc:	46bd      	mov	sp, r7
   834ce:	bd80      	pop	{r7, pc}
   834d0:	00083df1 	.word	0x00083df1
   834d4:	00083e09 	.word	0x00083e09

000834d8 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
   834d8:	b580      	push	{r7, lr}
   834da:	b082      	sub	sp, #8
   834dc:	af00      	add	r7, sp, #0
   834de:	4603      	mov	r3, r0
   834e0:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   834e2:	79fb      	ldrb	r3, [r7, #7]
   834e4:	3b03      	subs	r3, #3
   834e6:	2b04      	cmp	r3, #4
   834e8:	d808      	bhi.n	834fc <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
   834ea:	79fb      	ldrb	r3, [r7, #7]
   834ec:	4618      	mov	r0, r3
   834ee:	4b06      	ldr	r3, [pc, #24]	; (83508 <pll_enable_source+0x30>)
   834f0:	4798      	blx	r3
		osc_wait_ready(e_src);
   834f2:	79fb      	ldrb	r3, [r7, #7]
   834f4:	4618      	mov	r0, r3
   834f6:	4b05      	ldr	r3, [pc, #20]	; (8350c <pll_enable_source+0x34>)
   834f8:	4798      	blx	r3
		break;
   834fa:	e000      	b.n	834fe <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
   834fc:	bf00      	nop
	}
}
   834fe:	bf00      	nop
   83500:	3708      	adds	r7, #8
   83502:	46bd      	mov	sp, r7
   83504:	bd80      	pop	{r7, pc}
   83506:	bf00      	nop
   83508:	00083269 	.word	0x00083269
   8350c:	000833d5 	.word	0x000833d5

00083510 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
   83510:	b580      	push	{r7, lr}
   83512:	b082      	sub	sp, #8
   83514:	af00      	add	r7, sp, #0
   83516:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   83518:	bf00      	nop
   8351a:	6878      	ldr	r0, [r7, #4]
   8351c:	4b04      	ldr	r3, [pc, #16]	; (83530 <pll_wait_for_lock+0x20>)
   8351e:	4798      	blx	r3
   83520:	4603      	mov	r3, r0
   83522:	2b00      	cmp	r3, #0
   83524:	d0f9      	beq.n	8351a <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
   83526:	2300      	movs	r3, #0
}
   83528:	4618      	mov	r0, r3
   8352a:	3708      	adds	r7, #8
   8352c:	46bd      	mov	sp, r7
   8352e:	bd80      	pop	{r7, pc}
   83530:	000834ad 	.word	0x000834ad

00083534 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   83534:	b580      	push	{r7, lr}
   83536:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   83538:	2006      	movs	r0, #6
   8353a:	4b04      	ldr	r3, [pc, #16]	; (8354c <sysclk_get_main_hz+0x18>)
   8353c:	4798      	blx	r3
   8353e:	4602      	mov	r2, r0
   83540:	4613      	mov	r3, r2
   83542:	00db      	lsls	r3, r3, #3
   83544:	1a9b      	subs	r3, r3, r2
   83546:	005b      	lsls	r3, r3, #1
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   83548:	4618      	mov	r0, r3
   8354a:	bd80      	pop	{r7, pc}
   8354c:	00083361 	.word	0x00083361

00083550 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   83550:	b580      	push	{r7, lr}
   83552:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   83554:	4b02      	ldr	r3, [pc, #8]	; (83560 <sysclk_get_cpu_hz+0x10>)
   83556:	4798      	blx	r3
   83558:	4603      	mov	r3, r0
   8355a:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   8355c:	4618      	mov	r0, r3
   8355e:	bd80      	pop	{r7, pc}
   83560:	00083535 	.word	0x00083535

00083564 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   83564:	b590      	push	{r4, r7, lr}
   83566:	b083      	sub	sp, #12
   83568:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   8356a:	4b10      	ldr	r3, [pc, #64]	; (835ac <sysclk_init+0x48>)
   8356c:	4798      	blx	r3
   8356e:	4603      	mov	r3, r0
   83570:	4618      	mov	r0, r3
   83572:	4b0f      	ldr	r3, [pc, #60]	; (835b0 <sysclk_init+0x4c>)
   83574:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
   83576:	2006      	movs	r0, #6
   83578:	4b0e      	ldr	r3, [pc, #56]	; (835b4 <sysclk_init+0x50>)
   8357a:	4798      	blx	r3
		pll_config_defaults(&pllcfg, 0);
   8357c:	1d38      	adds	r0, r7, #4
   8357e:	230e      	movs	r3, #14
   83580:	2201      	movs	r2, #1
   83582:	2106      	movs	r1, #6
   83584:	4c0c      	ldr	r4, [pc, #48]	; (835b8 <sysclk_init+0x54>)
   83586:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
   83588:	1d3b      	adds	r3, r7, #4
   8358a:	2100      	movs	r1, #0
   8358c:	4618      	mov	r0, r3
   8358e:	4b0b      	ldr	r3, [pc, #44]	; (835bc <sysclk_init+0x58>)
   83590:	4798      	blx	r3
		pll_wait_for_lock(0);
   83592:	2000      	movs	r0, #0
   83594:	4b0a      	ldr	r3, [pc, #40]	; (835c0 <sysclk_init+0x5c>)
   83596:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   83598:	2010      	movs	r0, #16
   8359a:	4b0a      	ldr	r3, [pc, #40]	; (835c4 <sysclk_init+0x60>)
   8359c:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   8359e:	4b0a      	ldr	r3, [pc, #40]	; (835c8 <sysclk_init+0x64>)
   835a0:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
   835a2:	bf00      	nop
   835a4:	370c      	adds	r7, #12
   835a6:	46bd      	mov	sp, r7
   835a8:	bd90      	pop	{r4, r7, pc}
   835aa:	bf00      	nop
   835ac:	00083551 	.word	0x00083551
   835b0:	0008410d 	.word	0x0008410d
   835b4:	000834d9 	.word	0x000834d9
   835b8:	00083401 	.word	0x00083401
   835bc:	0008346d 	.word	0x0008346d
   835c0:	00083511 	.word	0x00083511
   835c4:	00083bbd 	.word	0x00083bbd
   835c8:	00083f89 	.word	0x00083f89

000835cc <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   835cc:	b580      	push	{r7, lr}
   835ce:	b082      	sub	sp, #8
   835d0:	af00      	add	r7, sp, #0
   835d2:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   835d4:	6878      	ldr	r0, [r7, #4]
   835d6:	4b03      	ldr	r3, [pc, #12]	; (835e4 <sysclk_enable_peripheral_clock+0x18>)
   835d8:	4798      	blx	r3
}
   835da:	bf00      	nop
   835dc:	3708      	adds	r7, #8
   835de:	46bd      	mov	sp, r7
   835e0:	bd80      	pop	{r7, pc}
   835e2:	bf00      	nop
   835e4:	00083e21 	.word	0x00083e21

000835e8 <ioport_init>:
 *
 * This function must be called before using any other functions in the IOPORT
 * service.
 */
static inline void ioport_init(void)
{
   835e8:	b580      	push	{r7, lr}
   835ea:	af00      	add	r7, sp, #0
}

__always_inline static void arch_ioport_init(void)
{
#ifdef ID_PIOA
	sysclk_enable_peripheral_clock(ID_PIOA);
   835ec:	200b      	movs	r0, #11
   835ee:	4b06      	ldr	r3, [pc, #24]	; (83608 <ioport_init+0x20>)
   835f0:	4798      	blx	r3
#endif
#ifdef ID_PIOB
	sysclk_enable_peripheral_clock(ID_PIOB);
   835f2:	200c      	movs	r0, #12
   835f4:	4b04      	ldr	r3, [pc, #16]	; (83608 <ioport_init+0x20>)
   835f6:	4798      	blx	r3
#endif
#ifdef ID_PIOC
	sysclk_enable_peripheral_clock(ID_PIOC);
   835f8:	200d      	movs	r0, #13
   835fa:	4b03      	ldr	r3, [pc, #12]	; (83608 <ioport_init+0x20>)
   835fc:	4798      	blx	r3
#endif
#ifdef ID_PIOD
	sysclk_enable_peripheral_clock(ID_PIOD);
   835fe:	200e      	movs	r0, #14
   83600:	4b01      	ldr	r3, [pc, #4]	; (83608 <ioport_init+0x20>)
   83602:	4798      	blx	r3
	arch_ioport_init();
}
   83604:	bf00      	nop
   83606:	bd80      	pop	{r7, pc}
   83608:	000835cd 	.word	0x000835cd

0008360c <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   8360c:	b580      	push	{r7, lr}
   8360e:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   83610:	4b21      	ldr	r3, [pc, #132]	; (83698 <board_init+0x8c>)
   83612:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   83616:	605a      	str	r2, [r3, #4]

	/* GPIO has been deprecated, the old code just keeps it for compatibility.
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
   83618:	4b20      	ldr	r3, [pc, #128]	; (8369c <board_init+0x90>)
   8361a:	4798      	blx	r3
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   8361c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   83620:	203b      	movs	r0, #59	; 0x3b
   83622:	4b1f      	ldr	r3, [pc, #124]	; (836a0 <board_init+0x94>)
   83624:	4798      	blx	r3
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   83626:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8362a:	2055      	movs	r0, #85	; 0x55
   8362c:	4b1c      	ldr	r3, [pc, #112]	; (836a0 <board_init+0x94>)
   8362e:	4798      	blx	r3
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   83630:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   83634:	2056      	movs	r0, #86	; 0x56
   83636:	4b1a      	ldr	r3, [pc, #104]	; (836a0 <board_init+0x94>)
   83638:	4798      	blx	r3

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   8363a:	491a      	ldr	r1, [pc, #104]	; (836a4 <board_init+0x98>)
   8363c:	2068      	movs	r0, #104	; 0x68
   8363e:	4b18      	ldr	r3, [pc, #96]	; (836a0 <board_init+0x94>)
   83640:	4798      	blx	r3
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   83642:	4919      	ldr	r1, [pc, #100]	; (836a8 <board_init+0x9c>)
   83644:	205c      	movs	r0, #92	; 0x5c
   83646:	4b16      	ldr	r3, [pc, #88]	; (836a0 <board_init+0x94>)
   83648:	4798      	blx	r3

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   8364a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   8364e:	f44f 7140 	mov.w	r1, #768	; 0x300
   83652:	4816      	ldr	r0, [pc, #88]	; (836ac <board_init+0xa0>)
   83654:	4b16      	ldr	r3, [pc, #88]	; (836b0 <board_init+0xa4>)
   83656:	4798      	blx	r3
	gpio_configure_pin(PIN_PWM_LED2_GPIO, PIN_PWM_LED2_FLAGS);
#endif

	/* Configure SPI0 pins */
#ifdef CONF_BOARD_SPI0
	gpio_configure_pin(SPI0_MISO_GPIO, SPI0_MISO_FLAGS);
   83658:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8365c:	2019      	movs	r0, #25
   8365e:	4b10      	ldr	r3, [pc, #64]	; (836a0 <board_init+0x94>)
   83660:	4798      	blx	r3
	gpio_configure_pin(SPI0_MOSI_GPIO, SPI0_MOSI_FLAGS);
   83662:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   83666:	201a      	movs	r0, #26
   83668:	4b0d      	ldr	r3, [pc, #52]	; (836a0 <board_init+0x94>)
   8366a:	4798      	blx	r3
	gpio_configure_pin(SPI0_SPCK_GPIO, SPI0_SPCK_FLAGS);
   8366c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   83670:	201b      	movs	r0, #27
   83672:	4b0b      	ldr	r3, [pc, #44]	; (836a0 <board_init+0x94>)
   83674:	4798      	blx	r3
	 * CONF_BOARD_SPI_NPCS_GPIO and
	 * CONF_BOARD_SPI_NPCS_FLAGS macros.
	 */

#   ifdef CONF_BOARD_SPI0_NPCS0
		gpio_configure_pin(SPI0_NPCS0_GPIO, SPI0_NPCS0_FLAGS);
   83676:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8367a:	201c      	movs	r0, #28
   8367c:	4b08      	ldr	r3, [pc, #32]	; (836a0 <board_init+0x94>)
   8367e:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   83680:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   83684:	202b      	movs	r0, #43	; 0x2b
   83686:	4b06      	ldr	r3, [pc, #24]	; (836a0 <board_init+0x94>)
   83688:	4798      	blx	r3
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   8368a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8368e:	202a      	movs	r0, #42	; 0x2a
   83690:	4b03      	ldr	r3, [pc, #12]	; (836a0 <board_init+0x94>)
   83692:	4798      	blx	r3
	gpio_configure_pin(SPI0_MISO_GPIO, SPI0_MISO_FLAGS);
	gpio_configure_pin(SPI0_MOSI_GPIO, SPI0_MOSI_FLAGS);
	gpio_configure_pin(SPI0_SPCK_GPIO, SPI0_SPCK_FLAGS);
	gpio_configure_pin(SPI0_NPCS0_GPIO, SPI0_NPCS0_FLAGS);
#endif
}
   83694:	bf00      	nop
   83696:	bd80      	pop	{r7, pc}
   83698:	400e1a50 	.word	0x400e1a50
   8369c:	000835e9 	.word	0x000835e9
   836a0:	00083891 	.word	0x00083891
   836a4:	28000079 	.word	0x28000079
   836a8:	28000001 	.word	0x28000001
   836ac:	400e0e00 	.word	0x400e0e00
   836b0:	000839cd 	.word	0x000839cd

000836b4 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
   836b4:	b480      	push	{r7}
   836b6:	b085      	sub	sp, #20
   836b8:	af00      	add	r7, sp, #0
   836ba:	60f8      	str	r0, [r7, #12]
   836bc:	60b9      	str	r1, [r7, #8]
   836be:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   836c0:	687b      	ldr	r3, [r7, #4]
   836c2:	2b00      	cmp	r3, #0
   836c4:	d003      	beq.n	836ce <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
   836c6:	68fb      	ldr	r3, [r7, #12]
   836c8:	68ba      	ldr	r2, [r7, #8]
   836ca:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
   836cc:	e002      	b.n	836d4 <pio_pull_up+0x20>
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
   836ce:	68fb      	ldr	r3, [r7, #12]
   836d0:	68ba      	ldr	r2, [r7, #8]
   836d2:	661a      	str	r2, [r3, #96]	; 0x60
	}
}
   836d4:	bf00      	nop
   836d6:	3714      	adds	r7, #20
   836d8:	46bd      	mov	sp, r7
   836da:	bc80      	pop	{r7}
   836dc:	4770      	bx	lr
   836de:	bf00      	nop

000836e0 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
   836e0:	b480      	push	{r7}
   836e2:	b087      	sub	sp, #28
   836e4:	af00      	add	r7, sp, #0
   836e6:	60f8      	str	r0, [r7, #12]
   836e8:	60b9      	str	r1, [r7, #8]
   836ea:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   836ec:	68fb      	ldr	r3, [r7, #12]
   836ee:	687a      	ldr	r2, [r7, #4]
   836f0:	645a      	str	r2, [r3, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   836f2:	68bb      	ldr	r3, [r7, #8]
   836f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   836f8:	d01f      	beq.n	8373a <pio_set_peripheral+0x5a>
   836fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   836fe:	d805      	bhi.n	8370c <pio_set_peripheral+0x2c>
   83700:	2b00      	cmp	r3, #0
   83702:	d027      	beq.n	83754 <pio_set_peripheral+0x74>
   83704:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   83708:	d00a      	beq.n	83720 <pio_set_peripheral+0x40>
   8370a:	e01f      	b.n	8374c <pio_set_peripheral+0x6c>
   8370c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   83710:	d020      	beq.n	83754 <pio_set_peripheral+0x74>
   83712:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   83716:	d01d      	beq.n	83754 <pio_set_peripheral+0x74>
   83718:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   8371c:	d01a      	beq.n	83754 <pio_set_peripheral+0x74>
   8371e:	e015      	b.n	8374c <pio_set_peripheral+0x6c>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   83720:	68fb      	ldr	r3, [r7, #12]
   83722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   83724:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   83726:	68fb      	ldr	r3, [r7, #12]
   83728:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   8372a:	687b      	ldr	r3, [r7, #4]
   8372c:	43d9      	mvns	r1, r3
   8372e:	697b      	ldr	r3, [r7, #20]
   83730:	400b      	ands	r3, r1
   83732:	401a      	ands	r2, r3
   83734:	68fb      	ldr	r3, [r7, #12]
   83736:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   83738:	e008      	b.n	8374c <pio_set_peripheral+0x6c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   8373a:	68fb      	ldr	r3, [r7, #12]
   8373c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   8373e:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   83740:	687a      	ldr	r2, [r7, #4]
   83742:	697b      	ldr	r3, [r7, #20]
   83744:	431a      	orrs	r2, r3
   83746:	68fb      	ldr	r3, [r7, #12]
   83748:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   8374a:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   8374c:	68fb      	ldr	r3, [r7, #12]
   8374e:	687a      	ldr	r2, [r7, #4]
   83750:	605a      	str	r2, [r3, #4]
   83752:	e000      	b.n	83756 <pio_set_peripheral+0x76>
		// other types are invalid in this function
	case PIO_INPUT:
	case PIO_OUTPUT_0:
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
   83754:	bf00      	nop
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
}
   83756:	371c      	adds	r7, #28
   83758:	46bd      	mov	sp, r7
   8375a:	bc80      	pop	{r7}
   8375c:	4770      	bx	lr
   8375e:	bf00      	nop

00083760 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
   83760:	b580      	push	{r7, lr}
   83762:	b084      	sub	sp, #16
   83764:	af00      	add	r7, sp, #0
   83766:	60f8      	str	r0, [r7, #12]
   83768:	60b9      	str	r1, [r7, #8]
   8376a:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
   8376c:	68b9      	ldr	r1, [r7, #8]
   8376e:	68f8      	ldr	r0, [r7, #12]
   83770:	4b19      	ldr	r3, [pc, #100]	; (837d8 <pio_set_input+0x78>)
   83772:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
   83774:	687b      	ldr	r3, [r7, #4]
   83776:	f003 0301 	and.w	r3, r3, #1
   8377a:	461a      	mov	r2, r3
   8377c:	68b9      	ldr	r1, [r7, #8]
   8377e:	68f8      	ldr	r0, [r7, #12]
   83780:	4b16      	ldr	r3, [pc, #88]	; (837dc <pio_set_input+0x7c>)
   83782:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   83784:	687b      	ldr	r3, [r7, #4]
   83786:	f003 030a 	and.w	r3, r3, #10
   8378a:	2b00      	cmp	r3, #0
   8378c:	d003      	beq.n	83796 <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
   8378e:	68fb      	ldr	r3, [r7, #12]
   83790:	68ba      	ldr	r2, [r7, #8]
   83792:	621a      	str	r2, [r3, #32]
   83794:	e002      	b.n	8379c <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
   83796:	68fb      	ldr	r3, [r7, #12]
   83798:	68ba      	ldr	r2, [r7, #8]
   8379a:	625a      	str	r2, [r3, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   8379c:	687b      	ldr	r3, [r7, #4]
   8379e:	f003 0302 	and.w	r3, r3, #2
   837a2:	2b00      	cmp	r3, #0
   837a4:	d004      	beq.n	837b0 <pio_set_input+0x50>
		p_pio->PIO_SCIFSR = ul_mask;
   837a6:	68fb      	ldr	r3, [r7, #12]
   837a8:	68ba      	ldr	r2, [r7, #8]
   837aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   837ae:	e008      	b.n	837c2 <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   837b0:	687b      	ldr	r3, [r7, #4]
   837b2:	f003 0308 	and.w	r3, r3, #8
   837b6:	2b00      	cmp	r3, #0
   837b8:	d003      	beq.n	837c2 <pio_set_input+0x62>
			p_pio->PIO_SCIFSR = ul_mask;
   837ba:	68fb      	ldr	r3, [r7, #12]
   837bc:	68ba      	ldr	r2, [r7, #8]
   837be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   837c2:	68fb      	ldr	r3, [r7, #12]
   837c4:	68ba      	ldr	r2, [r7, #8]
   837c6:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
   837c8:	68fb      	ldr	r3, [r7, #12]
   837ca:	68ba      	ldr	r2, [r7, #8]
   837cc:	601a      	str	r2, [r3, #0]
}
   837ce:	bf00      	nop
   837d0:	3710      	adds	r7, #16
   837d2:	46bd      	mov	sp, r7
   837d4:	bd80      	pop	{r7, pc}
   837d6:	bf00      	nop
   837d8:	00083845 	.word	0x00083845
   837dc:	000836b5 	.word	0x000836b5

000837e0 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   837e0:	b580      	push	{r7, lr}
   837e2:	b084      	sub	sp, #16
   837e4:	af00      	add	r7, sp, #0
   837e6:	60f8      	str	r0, [r7, #12]
   837e8:	60b9      	str	r1, [r7, #8]
   837ea:	607a      	str	r2, [r7, #4]
   837ec:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
   837ee:	68b9      	ldr	r1, [r7, #8]
   837f0:	68f8      	ldr	r0, [r7, #12]
   837f2:	4b12      	ldr	r3, [pc, #72]	; (8383c <pio_set_output+0x5c>)
   837f4:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
   837f6:	69ba      	ldr	r2, [r7, #24]
   837f8:	68b9      	ldr	r1, [r7, #8]
   837fa:	68f8      	ldr	r0, [r7, #12]
   837fc:	4b10      	ldr	r3, [pc, #64]	; (83840 <pio_set_output+0x60>)
   837fe:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   83800:	683b      	ldr	r3, [r7, #0]
   83802:	2b00      	cmp	r3, #0
   83804:	d003      	beq.n	8380e <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
   83806:	68fb      	ldr	r3, [r7, #12]
   83808:	68ba      	ldr	r2, [r7, #8]
   8380a:	651a      	str	r2, [r3, #80]	; 0x50
   8380c:	e002      	b.n	83814 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   8380e:	68fb      	ldr	r3, [r7, #12]
   83810:	68ba      	ldr	r2, [r7, #8]
   83812:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   83814:	687b      	ldr	r3, [r7, #4]
   83816:	2b00      	cmp	r3, #0
   83818:	d003      	beq.n	83822 <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
   8381a:	68fb      	ldr	r3, [r7, #12]
   8381c:	68ba      	ldr	r2, [r7, #8]
   8381e:	631a      	str	r2, [r3, #48]	; 0x30
   83820:	e002      	b.n	83828 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
   83822:	68fb      	ldr	r3, [r7, #12]
   83824:	68ba      	ldr	r2, [r7, #8]
   83826:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   83828:	68fb      	ldr	r3, [r7, #12]
   8382a:	68ba      	ldr	r2, [r7, #8]
   8382c:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
   8382e:	68fb      	ldr	r3, [r7, #12]
   83830:	68ba      	ldr	r2, [r7, #8]
   83832:	601a      	str	r2, [r3, #0]
}
   83834:	bf00      	nop
   83836:	3710      	adds	r7, #16
   83838:	46bd      	mov	sp, r7
   8383a:	bd80      	pop	{r7, pc}
   8383c:	00083845 	.word	0x00083845
   83840:	000836b5 	.word	0x000836b5

00083844 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
   83844:	b480      	push	{r7}
   83846:	b083      	sub	sp, #12
   83848:	af00      	add	r7, sp, #0
   8384a:	6078      	str	r0, [r7, #4]
   8384c:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
   8384e:	687b      	ldr	r3, [r7, #4]
   83850:	683a      	ldr	r2, [r7, #0]
   83852:	645a      	str	r2, [r3, #68]	; 0x44
}
   83854:	bf00      	nop
   83856:	370c      	adds	r7, #12
   83858:	46bd      	mov	sp, r7
   8385a:	bc80      	pop	{r7}
   8385c:	4770      	bx	lr
   8385e:	bf00      	nop

00083860 <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
   83860:	b480      	push	{r7}
   83862:	b083      	sub	sp, #12
   83864:	af00      	add	r7, sp, #0
   83866:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
   83868:	687b      	ldr	r3, [r7, #4]
   8386a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
   8386c:	4618      	mov	r0, r3
   8386e:	370c      	adds	r7, #12
   83870:	46bd      	mov	sp, r7
   83872:	bc80      	pop	{r7}
   83874:	4770      	bx	lr
   83876:	bf00      	nop

00083878 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
   83878:	b480      	push	{r7}
   8387a:	b083      	sub	sp, #12
   8387c:	af00      	add	r7, sp, #0
   8387e:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
   83880:	687b      	ldr	r3, [r7, #4]
   83882:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
   83884:	4618      	mov	r0, r3
   83886:	370c      	adds	r7, #12
   83888:	46bd      	mov	sp, r7
   8388a:	bc80      	pop	{r7}
   8388c:	4770      	bx	lr
   8388e:	bf00      	nop

00083890 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   83890:	b590      	push	{r4, r7, lr}
   83892:	b087      	sub	sp, #28
   83894:	af02      	add	r7, sp, #8
   83896:	6078      	str	r0, [r7, #4]
   83898:	6039      	str	r1, [r7, #0]
	Pio *p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   8389a:	687b      	ldr	r3, [r7, #4]
   8389c:	095b      	lsrs	r3, r3, #5
   8389e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   838a2:	f203 7307 	addw	r3, r3, #1799	; 0x707
   838a6:	025b      	lsls	r3, r3, #9
   838a8:	60fb      	str	r3, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   838aa:	683b      	ldr	r3, [r7, #0]
   838ac:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   838b0:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   838b4:	d046      	beq.n	83944 <pio_configure_pin+0xb4>
   838b6:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   838ba:	d806      	bhi.n	838ca <pio_configure_pin+0x3a>
   838bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   838c0:	d00a      	beq.n	838d8 <pio_configure_pin+0x48>
   838c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   838c6:	d022      	beq.n	8390e <pio_configure_pin+0x7e>
   838c8:	e070      	b.n	839ac <pio_configure_pin+0x11c>
   838ca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   838ce:	d045      	beq.n	8395c <pio_configure_pin+0xcc>
   838d0:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   838d4:	d042      	beq.n	8395c <pio_configure_pin+0xcc>
   838d6:	e069      	b.n	839ac <pio_configure_pin+0x11c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   838d8:	687b      	ldr	r3, [r7, #4]
   838da:	f003 031f 	and.w	r3, r3, #31
   838de:	2201      	movs	r2, #1
   838e0:	fa02 f303 	lsl.w	r3, r2, r3
   838e4:	461a      	mov	r2, r3
   838e6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   838ea:	68f8      	ldr	r0, [r7, #12]
   838ec:	4b33      	ldr	r3, [pc, #204]	; (839bc <pio_configure_pin+0x12c>)
   838ee:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   838f0:	687b      	ldr	r3, [r7, #4]
   838f2:	f003 031f 	and.w	r3, r3, #31
   838f6:	2201      	movs	r2, #1
   838f8:	fa02 f303 	lsl.w	r3, r2, r3
   838fc:	4619      	mov	r1, r3
   838fe:	683b      	ldr	r3, [r7, #0]
   83900:	f003 0301 	and.w	r3, r3, #1
   83904:	461a      	mov	r2, r3
   83906:	68f8      	ldr	r0, [r7, #12]
   83908:	4b2d      	ldr	r3, [pc, #180]	; (839c0 <pio_configure_pin+0x130>)
   8390a:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   8390c:	e050      	b.n	839b0 <pio_configure_pin+0x120>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   8390e:	687b      	ldr	r3, [r7, #4]
   83910:	f003 031f 	and.w	r3, r3, #31
   83914:	2201      	movs	r2, #1
   83916:	fa02 f303 	lsl.w	r3, r2, r3
   8391a:	461a      	mov	r2, r3
   8391c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   83920:	68f8      	ldr	r0, [r7, #12]
   83922:	4b26      	ldr	r3, [pc, #152]	; (839bc <pio_configure_pin+0x12c>)
   83924:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   83926:	687b      	ldr	r3, [r7, #4]
   83928:	f003 031f 	and.w	r3, r3, #31
   8392c:	2201      	movs	r2, #1
   8392e:	fa02 f303 	lsl.w	r3, r2, r3
   83932:	4619      	mov	r1, r3
   83934:	683b      	ldr	r3, [r7, #0]
   83936:	f003 0301 	and.w	r3, r3, #1
   8393a:	461a      	mov	r2, r3
   8393c:	68f8      	ldr	r0, [r7, #12]
   8393e:	4b20      	ldr	r3, [pc, #128]	; (839c0 <pio_configure_pin+0x130>)
   83940:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   83942:	e035      	b.n	839b0 <pio_configure_pin+0x120>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   83944:	687b      	ldr	r3, [r7, #4]
   83946:	f003 031f 	and.w	r3, r3, #31
   8394a:	2201      	movs	r2, #1
   8394c:	fa02 f303 	lsl.w	r3, r2, r3
   83950:	683a      	ldr	r2, [r7, #0]
   83952:	4619      	mov	r1, r3
   83954:	68f8      	ldr	r0, [r7, #12]
   83956:	4b1b      	ldr	r3, [pc, #108]	; (839c4 <pio_configure_pin+0x134>)
   83958:	4798      	blx	r3
		break;
   8395a:	e029      	b.n	839b0 <pio_configure_pin+0x120>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   8395c:	687b      	ldr	r3, [r7, #4]
   8395e:	f003 031f 	and.w	r3, r3, #31
   83962:	2201      	movs	r2, #1
   83964:	fa02 f303 	lsl.w	r3, r2, r3
   83968:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8396a:	683b      	ldr	r3, [r7, #0]
   8396c:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   83970:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   83974:	bf0c      	ite	eq
   83976:	2301      	moveq	r3, #1
   83978:	2300      	movne	r3, #0
   8397a:	b2db      	uxtb	r3, r3
   8397c:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   8397e:	683b      	ldr	r3, [r7, #0]
   83980:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   83984:	2b00      	cmp	r3, #0
   83986:	bf14      	ite	ne
   83988:	2301      	movne	r3, #1
   8398a:	2300      	moveq	r3, #0
   8398c:	b2db      	uxtb	r3, r3
   8398e:	4618      	mov	r0, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
   83990:	683b      	ldr	r3, [r7, #0]
   83992:	f003 0301 	and.w	r3, r3, #1
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   83996:	2b00      	cmp	r3, #0
   83998:	bf14      	ite	ne
   8399a:	2301      	movne	r3, #1
   8399c:	2300      	moveq	r3, #0
   8399e:	b2db      	uxtb	r3, r3
   839a0:	9300      	str	r3, [sp, #0]
   839a2:	4603      	mov	r3, r0
   839a4:	68f8      	ldr	r0, [r7, #12]
   839a6:	4c08      	ldr	r4, [pc, #32]	; (839c8 <pio_configure_pin+0x138>)
   839a8:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   839aa:	e001      	b.n	839b0 <pio_configure_pin+0x120>

	default:
		return 0;
   839ac:	2300      	movs	r3, #0
   839ae:	e000      	b.n	839b2 <pio_configure_pin+0x122>
	}

	return 1;
   839b0:	2301      	movs	r3, #1
}
   839b2:	4618      	mov	r0, r3
   839b4:	3714      	adds	r7, #20
   839b6:	46bd      	mov	sp, r7
   839b8:	bd90      	pop	{r4, r7, pc}
   839ba:	bf00      	nop
   839bc:	000836e1 	.word	0x000836e1
   839c0:	000836b5 	.word	0x000836b5
   839c4:	00083761 	.word	0x00083761
   839c8:	000837e1 	.word	0x000837e1

000839cc <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   839cc:	b590      	push	{r4, r7, lr}
   839ce:	b087      	sub	sp, #28
   839d0:	af02      	add	r7, sp, #8
   839d2:	60f8      	str	r0, [r7, #12]
   839d4:	60b9      	str	r1, [r7, #8]
   839d6:	607a      	str	r2, [r7, #4]
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   839d8:	687b      	ldr	r3, [r7, #4]
   839da:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   839de:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   839e2:	d02e      	beq.n	83a42 <pio_configure_pin_group+0x76>
   839e4:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   839e8:	d806      	bhi.n	839f8 <pio_configure_pin_group+0x2c>
   839ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   839ee:	d00a      	beq.n	83a06 <pio_configure_pin_group+0x3a>
   839f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   839f4:	d016      	beq.n	83a24 <pio_configure_pin_group+0x58>
   839f6:	e04c      	b.n	83a92 <pio_configure_pin_group+0xc6>
   839f8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   839fc:	d027      	beq.n	83a4e <pio_configure_pin_group+0x82>
   839fe:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   83a02:	d024      	beq.n	83a4e <pio_configure_pin_group+0x82>
   83a04:	e045      	b.n	83a92 <pio_configure_pin_group+0xc6>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   83a06:	68ba      	ldr	r2, [r7, #8]
   83a08:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   83a0c:	68f8      	ldr	r0, [r7, #12]
   83a0e:	4b24      	ldr	r3, [pc, #144]	; (83aa0 <pio_configure_pin_group+0xd4>)
   83a10:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   83a12:	687b      	ldr	r3, [r7, #4]
   83a14:	f003 0301 	and.w	r3, r3, #1
   83a18:	461a      	mov	r2, r3
   83a1a:	68b9      	ldr	r1, [r7, #8]
   83a1c:	68f8      	ldr	r0, [r7, #12]
   83a1e:	4b21      	ldr	r3, [pc, #132]	; (83aa4 <pio_configure_pin_group+0xd8>)
   83a20:	4798      	blx	r3
		break;
   83a22:	e038      	b.n	83a96 <pio_configure_pin_group+0xca>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   83a24:	68ba      	ldr	r2, [r7, #8]
   83a26:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   83a2a:	68f8      	ldr	r0, [r7, #12]
   83a2c:	4b1c      	ldr	r3, [pc, #112]	; (83aa0 <pio_configure_pin_group+0xd4>)
   83a2e:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   83a30:	687b      	ldr	r3, [r7, #4]
   83a32:	f003 0301 	and.w	r3, r3, #1
   83a36:	461a      	mov	r2, r3
   83a38:	68b9      	ldr	r1, [r7, #8]
   83a3a:	68f8      	ldr	r0, [r7, #12]
   83a3c:	4b19      	ldr	r3, [pc, #100]	; (83aa4 <pio_configure_pin_group+0xd8>)
   83a3e:	4798      	blx	r3
		break;
   83a40:	e029      	b.n	83a96 <pio_configure_pin_group+0xca>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   83a42:	687a      	ldr	r2, [r7, #4]
   83a44:	68b9      	ldr	r1, [r7, #8]
   83a46:	68f8      	ldr	r0, [r7, #12]
   83a48:	4b17      	ldr	r3, [pc, #92]	; (83aa8 <pio_configure_pin_group+0xdc>)
   83a4a:	4798      	blx	r3
		break;
   83a4c:	e023      	b.n	83a96 <pio_configure_pin_group+0xca>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   83a4e:	687b      	ldr	r3, [r7, #4]
   83a50:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   83a54:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   83a58:	bf0c      	ite	eq
   83a5a:	2301      	moveq	r3, #1
   83a5c:	2300      	movne	r3, #0
   83a5e:	b2db      	uxtb	r3, r3
   83a60:	461a      	mov	r2, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   83a62:	687b      	ldr	r3, [r7, #4]
   83a64:	f003 0304 	and.w	r3, r3, #4
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   83a68:	2b00      	cmp	r3, #0
   83a6a:	bf14      	ite	ne
   83a6c:	2301      	movne	r3, #1
   83a6e:	2300      	moveq	r3, #0
   83a70:	b2db      	uxtb	r3, r3
   83a72:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
   83a74:	687b      	ldr	r3, [r7, #4]
   83a76:	f003 0301 	and.w	r3, r3, #1
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   83a7a:	2b00      	cmp	r3, #0
   83a7c:	bf14      	ite	ne
   83a7e:	2301      	movne	r3, #1
   83a80:	2300      	moveq	r3, #0
   83a82:	b2db      	uxtb	r3, r3
   83a84:	9300      	str	r3, [sp, #0]
   83a86:	460b      	mov	r3, r1
   83a88:	68b9      	ldr	r1, [r7, #8]
   83a8a:	68f8      	ldr	r0, [r7, #12]
   83a8c:	4c07      	ldr	r4, [pc, #28]	; (83aac <pio_configure_pin_group+0xe0>)
   83a8e:	47a0      	blx	r4
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   83a90:	e001      	b.n	83a96 <pio_configure_pin_group+0xca>

	default:
		return 0;
   83a92:	2300      	movs	r3, #0
   83a94:	e000      	b.n	83a98 <pio_configure_pin_group+0xcc>
	}

	return 1;
   83a96:	2301      	movs	r3, #1
}
   83a98:	4618      	mov	r0, r3
   83a9a:	3714      	adds	r7, #20
   83a9c:	46bd      	mov	sp, r7
   83a9e:	bd90      	pop	{r4, r7, pc}
   83aa0:	000836e1 	.word	0x000836e1
   83aa4:	000836b5 	.word	0x000836b5
   83aa8:	00083761 	.word	0x00083761
   83aac:	000837e1 	.word	0x000837e1

00083ab0 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   83ab0:	b580      	push	{r7, lr}
   83ab2:	b084      	sub	sp, #16
   83ab4:	af00      	add	r7, sp, #0
   83ab6:	6078      	str	r0, [r7, #4]
   83ab8:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   83aba:	6878      	ldr	r0, [r7, #4]
   83abc:	4b24      	ldr	r3, [pc, #144]	; (83b50 <pio_handler_process+0xa0>)
   83abe:	4798      	blx	r3
   83ac0:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
   83ac2:	6878      	ldr	r0, [r7, #4]
   83ac4:	4b23      	ldr	r3, [pc, #140]	; (83b54 <pio_handler_process+0xa4>)
   83ac6:	4798      	blx	r3
   83ac8:	4602      	mov	r2, r0
   83aca:	68fb      	ldr	r3, [r7, #12]
   83acc:	4013      	ands	r3, r2
   83ace:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
   83ad0:	68fb      	ldr	r3, [r7, #12]
   83ad2:	2b00      	cmp	r3, #0
   83ad4:	d037      	beq.n	83b46 <pio_handler_process+0x96>
		/* Find triggering source */
		i = 0;
   83ad6:	2300      	movs	r3, #0
   83ad8:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
   83ada:	e031      	b.n	83b40 <pio_handler_process+0x90>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   83adc:	4a1e      	ldr	r2, [pc, #120]	; (83b58 <pio_handler_process+0xa8>)
   83ade:	68bb      	ldr	r3, [r7, #8]
   83ae0:	011b      	lsls	r3, r3, #4
   83ae2:	4413      	add	r3, r2
   83ae4:	681a      	ldr	r2, [r3, #0]
   83ae6:	683b      	ldr	r3, [r7, #0]
   83ae8:	429a      	cmp	r2, r3
   83aea:	d126      	bne.n	83b3a <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   83aec:	4a1a      	ldr	r2, [pc, #104]	; (83b58 <pio_handler_process+0xa8>)
   83aee:	68bb      	ldr	r3, [r7, #8]
   83af0:	011b      	lsls	r3, r3, #4
   83af2:	4413      	add	r3, r2
   83af4:	3304      	adds	r3, #4
   83af6:	681a      	ldr	r2, [r3, #0]
   83af8:	68fb      	ldr	r3, [r7, #12]
   83afa:	4013      	ands	r3, r2
   83afc:	2b00      	cmp	r3, #0
   83afe:	d01c      	beq.n	83b3a <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   83b00:	4a15      	ldr	r2, [pc, #84]	; (83b58 <pio_handler_process+0xa8>)
   83b02:	68bb      	ldr	r3, [r7, #8]
   83b04:	011b      	lsls	r3, r3, #4
   83b06:	4413      	add	r3, r2
   83b08:	330c      	adds	r3, #12
   83b0a:	681b      	ldr	r3, [r3, #0]
   83b0c:	4912      	ldr	r1, [pc, #72]	; (83b58 <pio_handler_process+0xa8>)
   83b0e:	68ba      	ldr	r2, [r7, #8]
   83b10:	0112      	lsls	r2, r2, #4
   83b12:	440a      	add	r2, r1
   83b14:	6810      	ldr	r0, [r2, #0]
   83b16:	4910      	ldr	r1, [pc, #64]	; (83b58 <pio_handler_process+0xa8>)
   83b18:	68ba      	ldr	r2, [r7, #8]
   83b1a:	0112      	lsls	r2, r2, #4
   83b1c:	440a      	add	r2, r1
   83b1e:	3204      	adds	r2, #4
   83b20:	6812      	ldr	r2, [r2, #0]
   83b22:	4611      	mov	r1, r2
   83b24:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   83b26:	4a0c      	ldr	r2, [pc, #48]	; (83b58 <pio_handler_process+0xa8>)
   83b28:	68bb      	ldr	r3, [r7, #8]
   83b2a:	011b      	lsls	r3, r3, #4
   83b2c:	4413      	add	r3, r2
   83b2e:	3304      	adds	r3, #4
   83b30:	681b      	ldr	r3, [r3, #0]
   83b32:	43db      	mvns	r3, r3
   83b34:	68fa      	ldr	r2, [r7, #12]
   83b36:	4013      	ands	r3, r2
   83b38:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
   83b3a:	68bb      	ldr	r3, [r7, #8]
   83b3c:	3301      	adds	r3, #1
   83b3e:	60bb      	str	r3, [r7, #8]

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   83b40:	68fb      	ldr	r3, [r7, #12]
   83b42:	2b00      	cmp	r3, #0
   83b44:	d1ca      	bne.n	83adc <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
   83b46:	bf00      	nop
   83b48:	3710      	adds	r7, #16
   83b4a:	46bd      	mov	sp, r7
   83b4c:	bd80      	pop	{r7, pc}
   83b4e:	bf00      	nop
   83b50:	00083861 	.word	0x00083861
   83b54:	00083879 	.word	0x00083879
   83b58:	20070984 	.word	0x20070984

00083b5c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   83b5c:	b580      	push	{r7, lr}
   83b5e:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
   83b60:	210b      	movs	r1, #11
   83b62:	4802      	ldr	r0, [pc, #8]	; (83b6c <PIOA_Handler+0x10>)
   83b64:	4b02      	ldr	r3, [pc, #8]	; (83b70 <PIOA_Handler+0x14>)
   83b66:	4798      	blx	r3
}
   83b68:	bf00      	nop
   83b6a:	bd80      	pop	{r7, pc}
   83b6c:	400e0e00 	.word	0x400e0e00
   83b70:	00083ab1 	.word	0x00083ab1

00083b74 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   83b74:	b580      	push	{r7, lr}
   83b76:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
   83b78:	210c      	movs	r1, #12
   83b7a:	4802      	ldr	r0, [pc, #8]	; (83b84 <PIOB_Handler+0x10>)
   83b7c:	4b02      	ldr	r3, [pc, #8]	; (83b88 <PIOB_Handler+0x14>)
   83b7e:	4798      	blx	r3
}
   83b80:	bf00      	nop
   83b82:	bd80      	pop	{r7, pc}
   83b84:	400e1000 	.word	0x400e1000
   83b88:	00083ab1 	.word	0x00083ab1

00083b8c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   83b8c:	b580      	push	{r7, lr}
   83b8e:	af00      	add	r7, sp, #0
	pio_handler_process(PIOC, ID_PIOC);
   83b90:	210d      	movs	r1, #13
   83b92:	4802      	ldr	r0, [pc, #8]	; (83b9c <PIOC_Handler+0x10>)
   83b94:	4b02      	ldr	r3, [pc, #8]	; (83ba0 <PIOC_Handler+0x14>)
   83b96:	4798      	blx	r3
}
   83b98:	bf00      	nop
   83b9a:	bd80      	pop	{r7, pc}
   83b9c:	400e1200 	.word	0x400e1200
   83ba0:	00083ab1 	.word	0x00083ab1

00083ba4 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   83ba4:	b580      	push	{r7, lr}
   83ba6:	af00      	add	r7, sp, #0
	pio_handler_process(PIOD, ID_PIOD);
   83ba8:	210e      	movs	r1, #14
   83baa:	4802      	ldr	r0, [pc, #8]	; (83bb4 <PIOD_Handler+0x10>)
   83bac:	4b02      	ldr	r3, [pc, #8]	; (83bb8 <PIOD_Handler+0x14>)
   83bae:	4798      	blx	r3
}
   83bb0:	bf00      	nop
   83bb2:	bd80      	pop	{r7, pc}
   83bb4:	400e1400 	.word	0x400e1400
   83bb8:	00083ab1 	.word	0x00083ab1

00083bbc <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
   83bbc:	b480      	push	{r7}
   83bbe:	b085      	sub	sp, #20
   83bc0:	af00      	add	r7, sp, #0
   83bc2:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   83bc4:	491c      	ldr	r1, [pc, #112]	; (83c38 <pmc_switch_mck_to_pllack+0x7c>)
   83bc6:	4b1c      	ldr	r3, [pc, #112]	; (83c38 <pmc_switch_mck_to_pllack+0x7c>)
   83bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83bca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
   83bce:	687b      	ldr	r3, [r7, #4]
   83bd0:	4313      	orrs	r3, r2
   83bd2:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83bd4:	f44f 6300 	mov.w	r3, #2048	; 0x800
   83bd8:	60fb      	str	r3, [r7, #12]
   83bda:	e007      	b.n	83bec <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
   83bdc:	68fb      	ldr	r3, [r7, #12]
   83bde:	2b00      	cmp	r3, #0
   83be0:	d101      	bne.n	83be6 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
   83be2:	2301      	movs	r3, #1
   83be4:	e023      	b.n	83c2e <pmc_switch_mck_to_pllack+0x72>
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
   83be6:	68fb      	ldr	r3, [r7, #12]
   83be8:	3b01      	subs	r3, #1
   83bea:	60fb      	str	r3, [r7, #12]
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83bec:	4b12      	ldr	r3, [pc, #72]	; (83c38 <pmc_switch_mck_to_pllack+0x7c>)
   83bee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83bf0:	f003 0308 	and.w	r3, r3, #8
   83bf4:	2b00      	cmp	r3, #0
   83bf6:	d0f1      	beq.n	83bdc <pmc_switch_mck_to_pllack+0x20>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   83bf8:	4a0f      	ldr	r2, [pc, #60]	; (83c38 <pmc_switch_mck_to_pllack+0x7c>)
   83bfa:	4b0f      	ldr	r3, [pc, #60]	; (83c38 <pmc_switch_mck_to_pllack+0x7c>)
   83bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83bfe:	f023 0303 	bic.w	r3, r3, #3
   83c02:	f043 0302 	orr.w	r3, r3, #2
   83c06:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83c08:	f44f 6300 	mov.w	r3, #2048	; 0x800
   83c0c:	60fb      	str	r3, [r7, #12]
   83c0e:	e007      	b.n	83c20 <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
   83c10:	68fb      	ldr	r3, [r7, #12]
   83c12:	2b00      	cmp	r3, #0
   83c14:	d101      	bne.n	83c1a <pmc_switch_mck_to_pllack+0x5e>
			return 1;
   83c16:	2301      	movs	r3, #1
   83c18:	e009      	b.n	83c2e <pmc_switch_mck_to_pllack+0x72>

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
   83c1a:	68fb      	ldr	r3, [r7, #12]
   83c1c:	3b01      	subs	r3, #1
   83c1e:	60fb      	str	r3, [r7, #12]
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83c20:	4b05      	ldr	r3, [pc, #20]	; (83c38 <pmc_switch_mck_to_pllack+0x7c>)
   83c22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83c24:	f003 0308 	and.w	r3, r3, #8
   83c28:	2b00      	cmp	r3, #0
   83c2a:	d0f1      	beq.n	83c10 <pmc_switch_mck_to_pllack+0x54>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   83c2c:	2300      	movs	r3, #0
}
   83c2e:	4618      	mov	r0, r3
   83c30:	3714      	adds	r7, #20
   83c32:	46bd      	mov	sp, r7
   83c34:	bc80      	pop	{r7}
   83c36:	4770      	bx	lr
   83c38:	400e0600 	.word	0x400e0600

00083c3c <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
   83c3c:	b480      	push	{r7}
   83c3e:	b083      	sub	sp, #12
   83c40:	af00      	add	r7, sp, #0
   83c42:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
   83c44:	687b      	ldr	r3, [r7, #4]
   83c46:	2b01      	cmp	r3, #1
   83c48:	d107      	bne.n	83c5a <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY(SUPC_KEY_VALUE) |
   83c4a:	4a08      	ldr	r2, [pc, #32]	; (83c6c <pmc_switch_sclk_to_32kxtal+0x30>)
   83c4c:	4b07      	ldr	r3, [pc, #28]	; (83c6c <pmc_switch_sclk_to_32kxtal+0x30>)
   83c4e:	689b      	ldr	r3, [r3, #8]
   83c50:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   83c54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   83c58:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY(SUPC_KEY_VALUE) | SUPC_CR_XTALSEL;
   83c5a:	4b04      	ldr	r3, [pc, #16]	; (83c6c <pmc_switch_sclk_to_32kxtal+0x30>)
   83c5c:	4a04      	ldr	r2, [pc, #16]	; (83c70 <pmc_switch_sclk_to_32kxtal+0x34>)
   83c5e:	601a      	str	r2, [r3, #0]
}
   83c60:	bf00      	nop
   83c62:	370c      	adds	r7, #12
   83c64:	46bd      	mov	sp, r7
   83c66:	bc80      	pop	{r7}
   83c68:	4770      	bx	lr
   83c6a:	bf00      	nop
   83c6c:	400e1a10 	.word	0x400e1a10
   83c70:	a5000008 	.word	0xa5000008

00083c74 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
   83c74:	b480      	push	{r7}
   83c76:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
   83c78:	4b09      	ldr	r3, [pc, #36]	; (83ca0 <pmc_osc_is_ready_32kxtal+0x2c>)
   83c7a:	695b      	ldr	r3, [r3, #20]
   83c7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
   83c80:	2b00      	cmp	r3, #0
   83c82:	d007      	beq.n	83c94 <pmc_osc_is_ready_32kxtal+0x20>
   83c84:	4b07      	ldr	r3, [pc, #28]	; (83ca4 <pmc_osc_is_ready_32kxtal+0x30>)
   83c86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83c88:	f003 0380 	and.w	r3, r3, #128	; 0x80
   83c8c:	2b00      	cmp	r3, #0
   83c8e:	d001      	beq.n	83c94 <pmc_osc_is_ready_32kxtal+0x20>
   83c90:	2301      	movs	r3, #1
   83c92:	e000      	b.n	83c96 <pmc_osc_is_ready_32kxtal+0x22>
   83c94:	2300      	movs	r3, #0
}
   83c96:	4618      	mov	r0, r3
   83c98:	46bd      	mov	sp, r7
   83c9a:	bc80      	pop	{r7}
   83c9c:	4770      	bx	lr
   83c9e:	bf00      	nop
   83ca0:	400e1a10 	.word	0x400e1a10
   83ca4:	400e0600 	.word	0x400e0600

00083ca8 <pmc_switch_mainck_to_fastrc>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 * \retval 2 Invalid frequency.
 */
void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
{
   83ca8:	b480      	push	{r7}
   83caa:	b085      	sub	sp, #20
   83cac:	af00      	add	r7, sp, #0
   83cae:	6078      	str	r0, [r7, #4]
	uint32_t ul_needXTEN = 0;
   83cb0:	2300      	movs	r3, #0
   83cb2:	60fb      	str	r3, [r7, #12]

	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	if (PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN) {
   83cb4:	4b21      	ldr	r3, [pc, #132]	; (83d3c <pmc_switch_mainck_to_fastrc+0x94>)
   83cb6:	6a1b      	ldr	r3, [r3, #32]
   83cb8:	f003 0301 	and.w	r3, r3, #1
   83cbc:	2b00      	cmp	r3, #0
   83cbe:	d00e      	beq.n	83cde <pmc_switch_mainck_to_fastrc+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   83cc0:	491e      	ldr	r1, [pc, #120]	; (83d3c <pmc_switch_mainck_to_fastrc+0x94>)
   83cc2:	4b1e      	ldr	r3, [pc, #120]	; (83d3c <pmc_switch_mainck_to_fastrc+0x94>)
   83cc4:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
   83cc6:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   83cca:	f023 0378 	bic.w	r3, r3, #120	; 0x78
   83cce:	687a      	ldr	r2, [r7, #4]
   83cd0:	4313      	orrs	r3, r2
   83cd2:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   83cd6:	f043 0308 	orr.w	r3, r3, #8
{
	uint32_t ul_needXTEN = 0;

	/* Enable Fast RC oscillator but DO NOT switch to RC now */
	if (PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   83cda:	620b      	str	r3, [r1, #32]
   83cdc:	e00b      	b.n	83cf6 <pmc_switch_mainck_to_fastrc+0x4e>
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				ul_moscrcf;
	} else {
		ul_needXTEN = 1;
   83cde:	2301      	movs	r3, #1
   83ce0:	60fb      	str	r3, [r7, #12]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   83ce2:	4916      	ldr	r1, [pc, #88]	; (83d3c <pmc_switch_mainck_to_fastrc+0x94>)
   83ce4:	4b15      	ldr	r3, [pc, #84]	; (83d3c <pmc_switch_mainck_to_fastrc+0x94>)
   83ce6:	6a1a      	ldr	r2, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST_Msk |
   83ce8:	4b15      	ldr	r3, [pc, #84]	; (83d40 <pmc_switch_mainck_to_fastrc+0x98>)
   83cea:	4013      	ands	r3, r2
   83cec:	687a      	ldr	r2, [r7, #4]
   83cee:	431a      	orrs	r2, r3
   83cf0:	4b14      	ldr	r3, [pc, #80]	; (83d44 <pmc_switch_mainck_to_fastrc+0x9c>)
   83cf2:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCRCEN |
				ul_moscrcf;
	} else {
		ul_needXTEN = 1;
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   83cf4:	620b      	str	r3, [r1, #32]
				CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCXTST_Msk |
				ul_moscrcf;
	}

	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   83cf6:	bf00      	nop
   83cf8:	4b10      	ldr	r3, [pc, #64]	; (83d3c <pmc_switch_mainck_to_fastrc+0x94>)
   83cfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83cfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   83d00:	2b00      	cmp	r3, #0
   83d02:	d0f9      	beq.n	83cf8 <pmc_switch_mainck_to_fastrc+0x50>

	/* Switch to Fast RC */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
   83d04:	4a0d      	ldr	r2, [pc, #52]	; (83d3c <pmc_switch_mainck_to_fastrc+0x94>)
   83d06:	4b0d      	ldr	r3, [pc, #52]	; (83d3c <pmc_switch_mainck_to_fastrc+0x94>)
   83d08:	6a1b      	ldr	r3, [r3, #32]
   83d0a:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
   83d0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   83d12:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   83d16:	6213      	str	r3, [r2, #32]
			PMC_CKGR_MOR_KEY_VALUE;

	/* Disable xtal oscillator */
	if (ul_needXTEN) {
   83d18:	68fb      	ldr	r3, [r7, #12]
   83d1a:	2b00      	cmp	r3, #0
   83d1c:	d009      	beq.n	83d32 <pmc_switch_mainck_to_fastrc+0x8a>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   83d1e:	4a07      	ldr	r2, [pc, #28]	; (83d3c <pmc_switch_mainck_to_fastrc+0x94>)
   83d20:	4b06      	ldr	r3, [pc, #24]	; (83d3c <pmc_switch_mainck_to_fastrc+0x94>)
   83d22:	6a1b      	ldr	r3, [r3, #32]
   83d24:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   83d28:	f023 0301 	bic.w	r3, r3, #1
   83d2c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   83d30:	6213      	str	r3, [r2, #32]
				PMC_CKGR_MOR_KEY_VALUE;
	}
}
   83d32:	bf00      	nop
   83d34:	3714      	adds	r7, #20
   83d36:	46bd      	mov	sp, r7
   83d38:	bc80      	pop	{r7}
   83d3a:	4770      	bx	lr
   83d3c:	400e0600 	.word	0x400e0600
   83d40:	ffc80086 	.word	0xffc80086
   83d44:	0037ff09 	.word	0x0037ff09

00083d48 <pmc_switch_mainck_to_xtal>:
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
   83d48:	b480      	push	{r7}
   83d4a:	b083      	sub	sp, #12
   83d4c:	af00      	add	r7, sp, #0
   83d4e:	6078      	str	r0, [r7, #4]
   83d50:	6039      	str	r1, [r7, #0]
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   83d52:	687b      	ldr	r3, [r7, #4]
   83d54:	2b00      	cmp	r3, #0
   83d56:	d008      	beq.n	83d6a <pmc_switch_mainck_to_xtal+0x22>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   83d58:	4916      	ldr	r1, [pc, #88]	; (83db4 <pmc_switch_mainck_to_xtal+0x6c>)
   83d5a:	4b16      	ldr	r3, [pc, #88]	; (83db4 <pmc_switch_mainck_to_xtal+0x6c>)
   83d5c:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
   83d5e:	4a16      	ldr	r2, [pc, #88]	; (83db8 <pmc_switch_mainck_to_xtal+0x70>)
   83d60:	401a      	ands	r2, r3
   83d62:	4b16      	ldr	r3, [pc, #88]	; (83dbc <pmc_switch_mainck_to_xtal+0x74>)
   83d64:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   83d66:	620b      	str	r3, [r1, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));

		PMC->CKGR_MOR |= PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCSEL;
	}
}
   83d68:	e01e      	b.n	83da8 <pmc_switch_mainck_to_xtal+0x60>
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   83d6a:	4912      	ldr	r1, [pc, #72]	; (83db4 <pmc_switch_mainck_to_xtal+0x6c>)
   83d6c:	4b11      	ldr	r3, [pc, #68]	; (83db4 <pmc_switch_mainck_to_xtal+0x6c>)
   83d6e:	6a1b      	ldr	r3, [r3, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   83d70:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   83d74:	f023 0303 	bic.w	r3, r3, #3
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   83d78:	683a      	ldr	r2, [r7, #0]
   83d7a:	0212      	lsls	r2, r2, #8
   83d7c:	b292      	uxth	r2, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
   83d7e:	4313      	orrs	r3, r2
   83d80:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   83d84:	f043 0301 	orr.w	r3, r3, #1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   83d88:	620b      	str	r3, [r1, #32]
				PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   83d8a:	bf00      	nop
   83d8c:	4b09      	ldr	r3, [pc, #36]	; (83db4 <pmc_switch_mainck_to_xtal+0x6c>)
   83d8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83d90:	f003 0301 	and.w	r3, r3, #1
   83d94:	2b00      	cmp	r3, #0
   83d96:	d0f9      	beq.n	83d8c <pmc_switch_mainck_to_xtal+0x44>

		PMC->CKGR_MOR |= PMC_CKGR_MOR_KEY_VALUE | CKGR_MOR_MOSCSEL;
   83d98:	4a06      	ldr	r2, [pc, #24]	; (83db4 <pmc_switch_mainck_to_xtal+0x6c>)
   83d9a:	4b06      	ldr	r3, [pc, #24]	; (83db4 <pmc_switch_mainck_to_xtal+0x6c>)
   83d9c:	6a1b      	ldr	r3, [r3, #32]
   83d9e:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   83da2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   83da6:	6213      	str	r3, [r2, #32]
	}
}
   83da8:	bf00      	nop
   83daa:	370c      	adds	r7, #12
   83dac:	46bd      	mov	sp, r7
   83dae:	bc80      	pop	{r7}
   83db0:	4770      	bx	lr
   83db2:	bf00      	nop
   83db4:	400e0600 	.word	0x400e0600
   83db8:	fec8fffc 	.word	0xfec8fffc
   83dbc:	01370002 	.word	0x01370002

00083dc0 <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
   83dc0:	b480      	push	{r7}
   83dc2:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   83dc4:	4b03      	ldr	r3, [pc, #12]	; (83dd4 <pmc_osc_is_ready_mainck+0x14>)
   83dc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83dc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
   83dcc:	4618      	mov	r0, r3
   83dce:	46bd      	mov	sp, r7
   83dd0:	bc80      	pop	{r7}
   83dd2:	4770      	bx	lr
   83dd4:	400e0600 	.word	0x400e0600

00083dd8 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
   83dd8:	b480      	push	{r7}
   83dda:	af00      	add	r7, sp, #0
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   83ddc:	4b03      	ldr	r3, [pc, #12]	; (83dec <pmc_disable_pllack+0x14>)
   83dde:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   83de2:	629a      	str	r2, [r3, #40]	; 0x28
}
   83de4:	bf00      	nop
   83de6:	46bd      	mov	sp, r7
   83de8:	bc80      	pop	{r7}
   83dea:	4770      	bx	lr
   83dec:	400e0600 	.word	0x400e0600

00083df0 <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
   83df0:	b480      	push	{r7}
   83df2:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   83df4:	4b03      	ldr	r3, [pc, #12]	; (83e04 <pmc_is_locked_pllack+0x14>)
   83df6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83df8:	f003 0302 	and.w	r3, r3, #2
}
   83dfc:	4618      	mov	r0, r3
   83dfe:	46bd      	mov	sp, r7
   83e00:	bc80      	pop	{r7}
   83e02:	4770      	bx	lr
   83e04:	400e0600 	.word	0x400e0600

00083e08 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
   83e08:	b480      	push	{r7}
   83e0a:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   83e0c:	4b03      	ldr	r3, [pc, #12]	; (83e1c <pmc_is_locked_upll+0x14>)
   83e0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   83e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
   83e14:	4618      	mov	r0, r3
   83e16:	46bd      	mov	sp, r7
   83e18:	bc80      	pop	{r7}
   83e1a:	4770      	bx	lr
   83e1c:	400e0600 	.word	0x400e0600

00083e20 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
   83e20:	b480      	push	{r7}
   83e22:	b083      	sub	sp, #12
   83e24:	af00      	add	r7, sp, #0
   83e26:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
   83e28:	687b      	ldr	r3, [r7, #4]
   83e2a:	2b2c      	cmp	r3, #44	; 0x2c
   83e2c:	d901      	bls.n	83e32 <pmc_enable_periph_clk+0x12>
		return 1;
   83e2e:	2301      	movs	r3, #1
   83e30:	e02f      	b.n	83e92 <pmc_enable_periph_clk+0x72>
	}

	if (ul_id < 32) {
   83e32:	687b      	ldr	r3, [r7, #4]
   83e34:	2b1f      	cmp	r3, #31
   83e36:	d813      	bhi.n	83e60 <pmc_enable_periph_clk+0x40>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   83e38:	4b18      	ldr	r3, [pc, #96]	; (83e9c <pmc_enable_periph_clk+0x7c>)
   83e3a:	699a      	ldr	r2, [r3, #24]
   83e3c:	2101      	movs	r1, #1
   83e3e:	687b      	ldr	r3, [r7, #4]
   83e40:	fa01 f303 	lsl.w	r3, r1, r3
   83e44:	401a      	ands	r2, r3
   83e46:	2101      	movs	r1, #1
   83e48:	687b      	ldr	r3, [r7, #4]
   83e4a:	fa01 f303 	lsl.w	r3, r1, r3
   83e4e:	429a      	cmp	r2, r3
   83e50:	d01e      	beq.n	83e90 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER0 = 1 << ul_id;
   83e52:	4a12      	ldr	r2, [pc, #72]	; (83e9c <pmc_enable_periph_clk+0x7c>)
   83e54:	2101      	movs	r1, #1
   83e56:	687b      	ldr	r3, [r7, #4]
   83e58:	fa01 f303 	lsl.w	r3, r1, r3
   83e5c:	6113      	str	r3, [r2, #16]
   83e5e:	e017      	b.n	83e90 <pmc_enable_periph_clk+0x70>
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E)
	} else {
		ul_id -= 32;
   83e60:	687b      	ldr	r3, [r7, #4]
   83e62:	3b20      	subs	r3, #32
   83e64:	607b      	str	r3, [r7, #4]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   83e66:	4b0d      	ldr	r3, [pc, #52]	; (83e9c <pmc_enable_periph_clk+0x7c>)
   83e68:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   83e6c:	2101      	movs	r1, #1
   83e6e:	687b      	ldr	r3, [r7, #4]
   83e70:	fa01 f303 	lsl.w	r3, r1, r3
   83e74:	401a      	ands	r2, r3
   83e76:	2101      	movs	r1, #1
   83e78:	687b      	ldr	r3, [r7, #4]
   83e7a:	fa01 f303 	lsl.w	r3, r1, r3
   83e7e:	429a      	cmp	r2, r3
   83e80:	d006      	beq.n	83e90 <pmc_enable_periph_clk+0x70>
			PMC->PMC_PCER1 = 1 << ul_id;
   83e82:	4a06      	ldr	r2, [pc, #24]	; (83e9c <pmc_enable_periph_clk+0x7c>)
   83e84:	2101      	movs	r1, #1
   83e86:	687b      	ldr	r3, [r7, #4]
   83e88:	fa01 f303 	lsl.w	r3, r1, r3
   83e8c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
		}
#endif
	}

	return 0;
   83e90:	2300      	movs	r3, #0
}
   83e92:	4618      	mov	r0, r3
   83e94:	370c      	adds	r7, #12
   83e96:	46bd      	mov	sp, r7
   83e98:	bc80      	pop	{r7}
   83e9a:	4770      	bx	lr
   83e9c:	400e0600 	.word	0x400e0600

00083ea0 <pmc_set_writeprotect>:
 * \brief Enable or disable write protect of PMC registers.
 *
 * \param ul_enable 1 to enable, 0 to disable.
 */
void pmc_set_writeprotect(uint32_t ul_enable)
{
   83ea0:	b480      	push	{r7}
   83ea2:	b083      	sub	sp, #12
   83ea4:	af00      	add	r7, sp, #0
   83ea6:	6078      	str	r0, [r7, #4]
	if (ul_enable) {
   83ea8:	687b      	ldr	r3, [r7, #4]
   83eaa:	2b00      	cmp	r3, #0
   83eac:	d004      	beq.n	83eb8 <pmc_set_writeprotect+0x18>
		PMC->PMC_WPMR = PMC_WPMR_WPKEY_VALUE | PMC_WPMR_WPEN;
   83eae:	4b07      	ldr	r3, [pc, #28]	; (83ecc <pmc_set_writeprotect+0x2c>)
   83eb0:	4a07      	ldr	r2, [pc, #28]	; (83ed0 <pmc_set_writeprotect+0x30>)
   83eb2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	} else {
		PMC->PMC_WPMR = PMC_WPMR_WPKEY_VALUE;
	}
}
   83eb6:	e003      	b.n	83ec0 <pmc_set_writeprotect+0x20>
void pmc_set_writeprotect(uint32_t ul_enable)
{
	if (ul_enable) {
		PMC->PMC_WPMR = PMC_WPMR_WPKEY_VALUE | PMC_WPMR_WPEN;
	} else {
		PMC->PMC_WPMR = PMC_WPMR_WPKEY_VALUE;
   83eb8:	4b04      	ldr	r3, [pc, #16]	; (83ecc <pmc_set_writeprotect+0x2c>)
   83eba:	4a06      	ldr	r2, [pc, #24]	; (83ed4 <pmc_set_writeprotect+0x34>)
   83ebc:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	}
}
   83ec0:	bf00      	nop
   83ec2:	370c      	adds	r7, #12
   83ec4:	46bd      	mov	sp, r7
   83ec6:	bc80      	pop	{r7}
   83ec8:	4770      	bx	lr
   83eca:	bf00      	nop
   83ecc:	400e0600 	.word	0x400e0600
   83ed0:	504d4301 	.word	0x504d4301
   83ed4:	504d4300 	.word	0x504d4300

00083ed8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   83ed8:	b480      	push	{r7}
   83eda:	af00      	add	r7, sp, #0
	//printf("dummy\n");
	while (1) {
	}
   83edc:	e7fe      	b.n	83edc <Dummy_Handler+0x4>
   83ede:	bf00      	nop

00083ee0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   83ee0:	b580      	push	{r7, lr}
   83ee2:	b082      	sub	sp, #8
   83ee4:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
   83ee6:	4b1e      	ldr	r3, [pc, #120]	; (83f60 <Reset_Handler+0x80>)
   83ee8:	607b      	str	r3, [r7, #4]
	pDest = &_srelocate;
   83eea:	4b1e      	ldr	r3, [pc, #120]	; (83f64 <Reset_Handler+0x84>)
   83eec:	603b      	str	r3, [r7, #0]

	if (pSrc != pDest) {
   83eee:	687a      	ldr	r2, [r7, #4]
   83ef0:	683b      	ldr	r3, [r7, #0]
   83ef2:	429a      	cmp	r2, r3
   83ef4:	d00c      	beq.n	83f10 <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
   83ef6:	e007      	b.n	83f08 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
   83ef8:	683b      	ldr	r3, [r7, #0]
   83efa:	1d1a      	adds	r2, r3, #4
   83efc:	603a      	str	r2, [r7, #0]
   83efe:	687a      	ldr	r2, [r7, #4]
   83f00:	1d11      	adds	r1, r2, #4
   83f02:	6079      	str	r1, [r7, #4]
   83f04:	6812      	ldr	r2, [r2, #0]
   83f06:	601a      	str	r2, [r3, #0]
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   83f08:	683b      	ldr	r3, [r7, #0]
   83f0a:	4a17      	ldr	r2, [pc, #92]	; (83f68 <Reset_Handler+0x88>)
   83f0c:	4293      	cmp	r3, r2
   83f0e:	d3f3      	bcc.n	83ef8 <Reset_Handler+0x18>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   83f10:	4b16      	ldr	r3, [pc, #88]	; (83f6c <Reset_Handler+0x8c>)
   83f12:	603b      	str	r3, [r7, #0]
   83f14:	e004      	b.n	83f20 <Reset_Handler+0x40>
		*pDest++ = 0;
   83f16:	683b      	ldr	r3, [r7, #0]
   83f18:	1d1a      	adds	r2, r3, #4
   83f1a:	603a      	str	r2, [r7, #0]
   83f1c:	2200      	movs	r2, #0
   83f1e:	601a      	str	r2, [r3, #0]
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   83f20:	683b      	ldr	r3, [r7, #0]
   83f22:	4a13      	ldr	r2, [pc, #76]	; (83f70 <Reset_Handler+0x90>)
   83f24:	4293      	cmp	r3, r2
   83f26:	d3f6      	bcc.n	83f16 <Reset_Handler+0x36>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
   83f28:	4b12      	ldr	r3, [pc, #72]	; (83f74 <Reset_Handler+0x94>)
   83f2a:	607b      	str	r3, [r7, #4]
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   83f2c:	4a12      	ldr	r2, [pc, #72]	; (83f78 <Reset_Handler+0x98>)
   83f2e:	687b      	ldr	r3, [r7, #4]
   83f30:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   83f34:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   83f38:	6093      	str	r3, [r2, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   83f3a:	687b      	ldr	r3, [r7, #4]
   83f3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   83f40:	d309      	bcc.n	83f56 <Reset_Handler+0x76>
   83f42:	687b      	ldr	r3, [r7, #4]
   83f44:	4a0d      	ldr	r2, [pc, #52]	; (83f7c <Reset_Handler+0x9c>)
   83f46:	4293      	cmp	r3, r2
   83f48:	d805      	bhi.n	83f56 <Reset_Handler+0x76>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   83f4a:	4a0b      	ldr	r2, [pc, #44]	; (83f78 <Reset_Handler+0x98>)
   83f4c:	4b0a      	ldr	r3, [pc, #40]	; (83f78 <Reset_Handler+0x98>)
   83f4e:	689b      	ldr	r3, [r3, #8]
   83f50:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   83f54:	6093      	str	r3, [r2, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   83f56:	4b0a      	ldr	r3, [pc, #40]	; (83f80 <Reset_Handler+0xa0>)
   83f58:	4798      	blx	r3

	/* Branch to main function */
	main();
   83f5a:	4b0a      	ldr	r3, [pc, #40]	; (83f84 <Reset_Handler+0xa4>)
   83f5c:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   83f5e:	e7fe      	b.n	83f5e <Reset_Handler+0x7e>
   83f60:	00087688 	.word	0x00087688
   83f64:	20070000 	.word	0x20070000
   83f68:	20070914 	.word	0x20070914
   83f6c:	20070914 	.word	0x20070914
   83f70:	20070ee0 	.word	0x20070ee0
   83f74:	00080000 	.word	0x00080000
   83f78:	e000ed00 	.word	0xe000ed00
   83f7c:	200fffff 	.word	0x200fffff
   83f80:	00084619 	.word	0x00084619
   83f84:	00082941 	.word	0x00082941

00083f88 <SystemCoreClockUpdate>:

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate(void)
{
   83f88:	b480      	push	{r7}
   83f8a:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   83f8c:	4b57      	ldr	r3, [pc, #348]	; (840ec <SystemCoreClockUpdate+0x164>)
   83f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   83f90:	f003 0303 	and.w	r3, r3, #3
   83f94:	2b03      	cmp	r3, #3
   83f96:	f200 808a 	bhi.w	840ae <SystemCoreClockUpdate+0x126>
   83f9a:	a201      	add	r2, pc, #4	; (adr r2, 83fa0 <SystemCoreClockUpdate+0x18>)
   83f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   83fa0:	00083fb1 	.word	0x00083fb1
   83fa4:	00083fd1 	.word	0x00083fd1
   83fa8:	00084021 	.word	0x00084021
   83fac:	00084021 	.word	0x00084021
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   83fb0:	4b4f      	ldr	r3, [pc, #316]	; (840f0 <SystemCoreClockUpdate+0x168>)
   83fb2:	695b      	ldr	r3, [r3, #20]
   83fb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
   83fb8:	2b00      	cmp	r3, #0
   83fba:	d004      	beq.n	83fc6 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   83fbc:	4b4d      	ldr	r3, [pc, #308]	; (840f4 <SystemCoreClockUpdate+0x16c>)
   83fbe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   83fc2:	601a      	str	r2, [r3, #0]
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
		}
		break;
   83fc4:	e073      	b.n	840ae <SystemCoreClockUpdate+0x126>
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   83fc6:	4b4b      	ldr	r3, [pc, #300]	; (840f4 <SystemCoreClockUpdate+0x16c>)
   83fc8:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
   83fcc:	601a      	str	r2, [r3, #0]
		}
		break;
   83fce:	e06e      	b.n	840ae <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   83fd0:	4b46      	ldr	r3, [pc, #280]	; (840ec <SystemCoreClockUpdate+0x164>)
   83fd2:	6a1b      	ldr	r3, [r3, #32]
   83fd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   83fd8:	2b00      	cmp	r3, #0
   83fda:	d003      	beq.n	83fe4 <SystemCoreClockUpdate+0x5c>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   83fdc:	4b45      	ldr	r3, [pc, #276]	; (840f4 <SystemCoreClockUpdate+0x16c>)
   83fde:	4a46      	ldr	r2, [pc, #280]	; (840f8 <SystemCoreClockUpdate+0x170>)
   83fe0:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		break;
   83fe2:	e064      	b.n	840ae <SystemCoreClockUpdate+0x126>
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   83fe4:	4b43      	ldr	r3, [pc, #268]	; (840f4 <SystemCoreClockUpdate+0x16c>)
   83fe6:	4a45      	ldr	r2, [pc, #276]	; (840fc <SystemCoreClockUpdate+0x174>)
   83fe8:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   83fea:	4b40      	ldr	r3, [pc, #256]	; (840ec <SystemCoreClockUpdate+0x164>)
   83fec:	6a1b      	ldr	r3, [r3, #32]
   83fee:	f003 0370 	and.w	r3, r3, #112	; 0x70
   83ff2:	2b10      	cmp	r3, #16
   83ff4:	d004      	beq.n	84000 <SystemCoreClockUpdate+0x78>
   83ff6:	2b20      	cmp	r3, #32
   83ff8:	d008      	beq.n	8400c <SystemCoreClockUpdate+0x84>
   83ffa:	2b00      	cmp	r3, #0
   83ffc:	d00e      	beq.n	8401c <SystemCoreClockUpdate+0x94>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   83ffe:	e00e      	b.n	8401e <SystemCoreClockUpdate+0x96>

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   84000:	4b3c      	ldr	r3, [pc, #240]	; (840f4 <SystemCoreClockUpdate+0x16c>)
   84002:	681b      	ldr	r3, [r3, #0]
   84004:	005b      	lsls	r3, r3, #1
   84006:	4a3b      	ldr	r2, [pc, #236]	; (840f4 <SystemCoreClockUpdate+0x16c>)
   84008:	6013      	str	r3, [r2, #0]
				break;
   8400a:	e008      	b.n	8401e <SystemCoreClockUpdate+0x96>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   8400c:	4b39      	ldr	r3, [pc, #228]	; (840f4 <SystemCoreClockUpdate+0x16c>)
   8400e:	681a      	ldr	r2, [r3, #0]
   84010:	4613      	mov	r3, r2
   84012:	005b      	lsls	r3, r3, #1
   84014:	4413      	add	r3, r2
   84016:	4a37      	ldr	r2, [pc, #220]	; (840f4 <SystemCoreClockUpdate+0x16c>)
   84018:	6013      	str	r3, [r2, #0]
				break;
   8401a:	e000      	b.n	8401e <SystemCoreClockUpdate+0x96>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
   8401c:	bf00      	nop
				break;
			default:
				break;
			}
		}
		break;
   8401e:	e046      	b.n	840ae <SystemCoreClockUpdate+0x126>
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   84020:	4b32      	ldr	r3, [pc, #200]	; (840ec <SystemCoreClockUpdate+0x164>)
   84022:	6a1b      	ldr	r3, [r3, #32]
   84024:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   84028:	2b00      	cmp	r3, #0
   8402a:	d003      	beq.n	84034 <SystemCoreClockUpdate+0xac>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   8402c:	4b31      	ldr	r3, [pc, #196]	; (840f4 <SystemCoreClockUpdate+0x16c>)
   8402e:	4a32      	ldr	r2, [pc, #200]	; (840f8 <SystemCoreClockUpdate+0x170>)
   84030:	601a      	str	r2, [r3, #0]
   84032:	e01c      	b.n	8406e <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   84034:	4b2f      	ldr	r3, [pc, #188]	; (840f4 <SystemCoreClockUpdate+0x16c>)
   84036:	4a31      	ldr	r2, [pc, #196]	; (840fc <SystemCoreClockUpdate+0x174>)
   84038:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   8403a:	4b2c      	ldr	r3, [pc, #176]	; (840ec <SystemCoreClockUpdate+0x164>)
   8403c:	6a1b      	ldr	r3, [r3, #32]
   8403e:	f003 0370 	and.w	r3, r3, #112	; 0x70
   84042:	2b10      	cmp	r3, #16
   84044:	d004      	beq.n	84050 <SystemCoreClockUpdate+0xc8>
   84046:	2b20      	cmp	r3, #32
   84048:	d008      	beq.n	8405c <SystemCoreClockUpdate+0xd4>
   8404a:	2b00      	cmp	r3, #0
   8404c:	d00e      	beq.n	8406c <SystemCoreClockUpdate+0xe4>
				break;
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
				break;
			default:
				break;
   8404e:	e00e      	b.n	8406e <SystemCoreClockUpdate+0xe6>

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   84050:	4b28      	ldr	r3, [pc, #160]	; (840f4 <SystemCoreClockUpdate+0x16c>)
   84052:	681b      	ldr	r3, [r3, #0]
   84054:	005b      	lsls	r3, r3, #1
   84056:	4a27      	ldr	r2, [pc, #156]	; (840f4 <SystemCoreClockUpdate+0x16c>)
   84058:	6013      	str	r3, [r2, #0]
				break;
   8405a:	e008      	b.n	8406e <SystemCoreClockUpdate+0xe6>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   8405c:	4b25      	ldr	r3, [pc, #148]	; (840f4 <SystemCoreClockUpdate+0x16c>)
   8405e:	681a      	ldr	r2, [r3, #0]
   84060:	4613      	mov	r3, r2
   84062:	005b      	lsls	r3, r3, #1
   84064:	4413      	add	r3, r2
   84066:	4a23      	ldr	r2, [pc, #140]	; (840f4 <SystemCoreClockUpdate+0x16c>)
   84068:	6013      	str	r3, [r2, #0]
				break;
   8406a:	e000      	b.n	8406e <SystemCoreClockUpdate+0xe6>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
   8406c:	bf00      	nop
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   8406e:	4b1f      	ldr	r3, [pc, #124]	; (840ec <SystemCoreClockUpdate+0x164>)
   84070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   84072:	f003 0303 	and.w	r3, r3, #3
   84076:	2b02      	cmp	r3, #2
   84078:	d115      	bne.n	840a6 <SystemCoreClockUpdate+0x11e>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   8407a:	4b1c      	ldr	r3, [pc, #112]	; (840ec <SystemCoreClockUpdate+0x164>)
   8407c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   8407e:	4b20      	ldr	r3, [pc, #128]	; (84100 <SystemCoreClockUpdate+0x178>)
   84080:	4013      	ands	r3, r2
   84082:	0c1b      	lsrs	r3, r3, #16
				                            CKGR_PLLAR_MULA_Pos) + 1U);
   84084:	3301      	adds	r3, #1
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   84086:	4a1b      	ldr	r2, [pc, #108]	; (840f4 <SystemCoreClockUpdate+0x16c>)
   84088:	6812      	ldr	r2, [r2, #0]
   8408a:	fb02 f303 	mul.w	r3, r2, r3
   8408e:	4a19      	ldr	r2, [pc, #100]	; (840f4 <SystemCoreClockUpdate+0x16c>)
   84090:	6013      	str	r3, [r2, #0]
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   84092:	4b16      	ldr	r3, [pc, #88]	; (840ec <SystemCoreClockUpdate+0x164>)
   84094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   84096:	b2db      	uxtb	r3, r3
   84098:	4a16      	ldr	r2, [pc, #88]	; (840f4 <SystemCoreClockUpdate+0x16c>)
   8409a:	6812      	ldr	r2, [r2, #0]
   8409c:	fbb2 f3f3 	udiv	r3, r2, r3
   840a0:	4a14      	ldr	r2, [pc, #80]	; (840f4 <SystemCoreClockUpdate+0x16c>)
   840a2:	6013      	str	r3, [r2, #0]
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
   840a4:	e002      	b.n	840ac <SystemCoreClockUpdate+0x124>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   840a6:	4b13      	ldr	r3, [pc, #76]	; (840f4 <SystemCoreClockUpdate+0x16c>)
   840a8:	4a16      	ldr	r2, [pc, #88]	; (84104 <SystemCoreClockUpdate+0x17c>)
   840aa:	601a      	str	r2, [r3, #0]
		}
		break;
   840ac:	bf00      	nop
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   840ae:	4b0f      	ldr	r3, [pc, #60]	; (840ec <SystemCoreClockUpdate+0x164>)
   840b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   840b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
   840b6:	2b70      	cmp	r3, #112	; 0x70
   840b8:	d108      	bne.n	840cc <SystemCoreClockUpdate+0x144>
		SystemCoreClock /= 3U;
   840ba:	4b0e      	ldr	r3, [pc, #56]	; (840f4 <SystemCoreClockUpdate+0x16c>)
   840bc:	681b      	ldr	r3, [r3, #0]
   840be:	4a12      	ldr	r2, [pc, #72]	; (84108 <SystemCoreClockUpdate+0x180>)
   840c0:	fba2 2303 	umull	r2, r3, r2, r3
   840c4:	085b      	lsrs	r3, r3, #1
   840c6:	4a0b      	ldr	r2, [pc, #44]	; (840f4 <SystemCoreClockUpdate+0x16c>)
   840c8:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
			                          PMC_MCKR_PRES_Pos);
	}
}
   840ca:	e00a      	b.n	840e2 <SystemCoreClockUpdate+0x15a>
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   840cc:	4b07      	ldr	r3, [pc, #28]	; (840ec <SystemCoreClockUpdate+0x164>)
   840ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   840d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
   840d4:	091b      	lsrs	r3, r3, #4
   840d6:	4a07      	ldr	r2, [pc, #28]	; (840f4 <SystemCoreClockUpdate+0x16c>)
   840d8:	6812      	ldr	r2, [r2, #0]
   840da:	fa22 f303 	lsr.w	r3, r2, r3
   840de:	4a05      	ldr	r2, [pc, #20]	; (840f4 <SystemCoreClockUpdate+0x16c>)
   840e0:	6013      	str	r3, [r2, #0]
			                          PMC_MCKR_PRES_Pos);
	}
}
   840e2:	bf00      	nop
   840e4:	46bd      	mov	sp, r7
   840e6:	bc80      	pop	{r7}
   840e8:	4770      	bx	lr
   840ea:	bf00      	nop
   840ec:	400e0600 	.word	0x400e0600
   840f0:	400e1a10 	.word	0x400e1a10
   840f4:	200700ac 	.word	0x200700ac
   840f8:	00b71b00 	.word	0x00b71b00
   840fc:	003d0900 	.word	0x003d0900
   84100:	07ff0000 	.word	0x07ff0000
   84104:	0e4e1c00 	.word	0x0e4e1c00
   84108:	aaaaaaab 	.word	0xaaaaaaab

0008410c <system_init_flash>:

/** 
 * Initialize flash.
 */
void system_init_flash(uint32_t ul_clk)
{
   8410c:	b480      	push	{r7}
   8410e:	b083      	sub	sp, #12
   84110:	af00      	add	r7, sp, #0
   84112:	6078      	str	r0, [r7, #4]
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
   84114:	687b      	ldr	r3, [r7, #4]
   84116:	4a25      	ldr	r2, [pc, #148]	; (841ac <system_init_flash+0xa0>)
   84118:	4293      	cmp	r3, r2
   8411a:	d806      	bhi.n	8412a <system_init_flash+0x1e>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
   8411c:	4b24      	ldr	r3, [pc, #144]	; (841b0 <system_init_flash+0xa4>)
   8411e:	2200      	movs	r2, #0
   84120:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
   84122:	4b24      	ldr	r3, [pc, #144]	; (841b4 <system_init_flash+0xa8>)
   84124:	2200      	movs	r2, #0
   84126:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
	}
}
   84128:	e03b      	b.n	841a2 <system_init_flash+0x96>
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
   8412a:	687b      	ldr	r3, [r7, #4]
   8412c:	4a22      	ldr	r2, [pc, #136]	; (841b8 <system_init_flash+0xac>)
   8412e:	4293      	cmp	r3, r2
   84130:	d808      	bhi.n	84144 <system_init_flash+0x38>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
   84132:	4b1f      	ldr	r3, [pc, #124]	; (841b0 <system_init_flash+0xa4>)
   84134:	f44f 7280 	mov.w	r2, #256	; 0x100
   84138:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
   8413a:	4b1e      	ldr	r3, [pc, #120]	; (841b4 <system_init_flash+0xa8>)
   8413c:	f44f 7280 	mov.w	r2, #256	; 0x100
   84140:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
	}
}
   84142:	e02e      	b.n	841a2 <system_init_flash+0x96>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
   84144:	687b      	ldr	r3, [r7, #4]
   84146:	4a1d      	ldr	r2, [pc, #116]	; (841bc <system_init_flash+0xb0>)
   84148:	4293      	cmp	r3, r2
   8414a:	d808      	bhi.n	8415e <system_init_flash+0x52>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
   8414c:	4b18      	ldr	r3, [pc, #96]	; (841b0 <system_init_flash+0xa4>)
   8414e:	f44f 7200 	mov.w	r2, #512	; 0x200
   84152:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
   84154:	4b17      	ldr	r3, [pc, #92]	; (841b4 <system_init_flash+0xa8>)
   84156:	f44f 7200 	mov.w	r2, #512	; 0x200
   8415a:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
	}
}
   8415c:	e021      	b.n	841a2 <system_init_flash+0x96>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
   8415e:	687b      	ldr	r3, [r7, #4]
   84160:	4a17      	ldr	r2, [pc, #92]	; (841c0 <system_init_flash+0xb4>)
   84162:	4293      	cmp	r3, r2
   84164:	d808      	bhi.n	84178 <system_init_flash+0x6c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
   84166:	4b12      	ldr	r3, [pc, #72]	; (841b0 <system_init_flash+0xa4>)
   84168:	f44f 7240 	mov.w	r2, #768	; 0x300
   8416c:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
   8416e:	4b11      	ldr	r3, [pc, #68]	; (841b4 <system_init_flash+0xa8>)
   84170:	f44f 7240 	mov.w	r2, #768	; 0x300
   84174:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
	}
}
   84176:	e014      	b.n	841a2 <system_init_flash+0x96>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
   84178:	687b      	ldr	r3, [r7, #4]
   8417a:	4a12      	ldr	r2, [pc, #72]	; (841c4 <system_init_flash+0xb8>)
   8417c:	4293      	cmp	r3, r2
   8417e:	d808      	bhi.n	84192 <system_init_flash+0x86>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   84180:	4b0b      	ldr	r3, [pc, #44]	; (841b0 <system_init_flash+0xa4>)
   84182:	f44f 6280 	mov.w	r2, #1024	; 0x400
   84186:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
   84188:	4b0a      	ldr	r3, [pc, #40]	; (841b4 <system_init_flash+0xa8>)
   8418a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   8418e:	601a      	str	r2, [r3, #0]
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
	}
}
   84190:	e007      	b.n	841a2 <system_init_flash+0x96>
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
   84192:	4b07      	ldr	r3, [pc, #28]	; (841b0 <system_init_flash+0xa4>)
   84194:	f44f 62a0 	mov.w	r2, #1280	; 0x500
   84198:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
   8419a:	4b06      	ldr	r3, [pc, #24]	; (841b4 <system_init_flash+0xa8>)
   8419c:	f44f 62a0 	mov.w	r2, #1280	; 0x500
   841a0:	601a      	str	r2, [r3, #0]
	}
}
   841a2:	bf00      	nop
   841a4:	370c      	adds	r7, #12
   841a6:	46bd      	mov	sp, r7
   841a8:	bc80      	pop	{r7}
   841aa:	4770      	bx	lr
   841ac:	0121eabf 	.word	0x0121eabf
   841b0:	400e0a00 	.word	0x400e0a00
   841b4:	400e0c00 	.word	0x400e0c00
   841b8:	02faf07f 	.word	0x02faf07f
   841bc:	03d08fff 	.word	0x03d08fff
   841c0:	04c4b3ff 	.word	0x04c4b3ff
   841c4:	055d4a7f 	.word	0x055d4a7f

000841c8 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   841c8:	b480      	push	{r7}
   841ca:	b085      	sub	sp, #20
   841cc:	af00      	add	r7, sp, #0
   841ce:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   841d0:	4b0a      	ldr	r3, [pc, #40]	; (841fc <_sbrk+0x34>)
   841d2:	681b      	ldr	r3, [r3, #0]
   841d4:	2b00      	cmp	r3, #0
   841d6:	d102      	bne.n	841de <_sbrk+0x16>
		heap = (unsigned char *)&_end;
   841d8:	4b08      	ldr	r3, [pc, #32]	; (841fc <_sbrk+0x34>)
   841da:	4a09      	ldr	r2, [pc, #36]	; (84200 <_sbrk+0x38>)
   841dc:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   841de:	4b07      	ldr	r3, [pc, #28]	; (841fc <_sbrk+0x34>)
   841e0:	681b      	ldr	r3, [r3, #0]
   841e2:	60fb      	str	r3, [r7, #12]

	heap += incr;
   841e4:	4b05      	ldr	r3, [pc, #20]	; (841fc <_sbrk+0x34>)
   841e6:	681a      	ldr	r2, [r3, #0]
   841e8:	687b      	ldr	r3, [r7, #4]
   841ea:	4413      	add	r3, r2
   841ec:	4a03      	ldr	r2, [pc, #12]	; (841fc <_sbrk+0x34>)
   841ee:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
   841f0:	68fb      	ldr	r3, [r7, #12]
}
   841f2:	4618      	mov	r0, r3
   841f4:	3714      	adds	r7, #20
   841f6:	46bd      	mov	sp, r7
   841f8:	bc80      	pop	{r7}
   841fa:	4770      	bx	lr
   841fc:	200709f4 	.word	0x200709f4
   84200:	20072ee0 	.word	0x20072ee0

00084204 <_close>:
{
	return -1;
}

extern int _close(int file)
{
   84204:	b480      	push	{r7}
   84206:	b083      	sub	sp, #12
   84208:	af00      	add	r7, sp, #0
   8420a:	6078      	str	r0, [r7, #4]
	return -1;
   8420c:	f04f 33ff 	mov.w	r3, #4294967295
}
   84210:	4618      	mov	r0, r3
   84212:	370c      	adds	r7, #12
   84214:	46bd      	mov	sp, r7
   84216:	bc80      	pop	{r7}
   84218:	4770      	bx	lr
   8421a:	bf00      	nop

0008421c <_fstat>:

extern int _fstat(int file, struct stat *st)
{
   8421c:	b480      	push	{r7}
   8421e:	b083      	sub	sp, #12
   84220:	af00      	add	r7, sp, #0
   84222:	6078      	str	r0, [r7, #4]
   84224:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
   84226:	683b      	ldr	r3, [r7, #0]
   84228:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   8422c:	605a      	str	r2, [r3, #4]

	return 0;
   8422e:	2300      	movs	r3, #0
}
   84230:	4618      	mov	r0, r3
   84232:	370c      	adds	r7, #12
   84234:	46bd      	mov	sp, r7
   84236:	bc80      	pop	{r7}
   84238:	4770      	bx	lr
   8423a:	bf00      	nop

0008423c <_isatty>:

extern int _isatty(int file)
{
   8423c:	b480      	push	{r7}
   8423e:	b083      	sub	sp, #12
   84240:	af00      	add	r7, sp, #0
   84242:	6078      	str	r0, [r7, #4]
	return 1;
   84244:	2301      	movs	r3, #1
}
   84246:	4618      	mov	r0, r3
   84248:	370c      	adds	r7, #12
   8424a:	46bd      	mov	sp, r7
   8424c:	bc80      	pop	{r7}
   8424e:	4770      	bx	lr

00084250 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
   84250:	b480      	push	{r7}
   84252:	b085      	sub	sp, #20
   84254:	af00      	add	r7, sp, #0
   84256:	60f8      	str	r0, [r7, #12]
   84258:	60b9      	str	r1, [r7, #8]
   8425a:	607a      	str	r2, [r7, #4]
	return 0;
   8425c:	2300      	movs	r3, #0
}
   8425e:	4618      	mov	r0, r3
   84260:	3714      	adds	r7, #20
   84262:	46bd      	mov	sp, r7
   84264:	bc80      	pop	{r7}
   84266:	4770      	bx	lr

00084268 <__aeabi_drsub>:
   84268:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   8426c:	e002      	b.n	84274 <__adddf3>
   8426e:	bf00      	nop

00084270 <__aeabi_dsub>:
   84270:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00084274 <__adddf3>:
   84274:	b530      	push	{r4, r5, lr}
   84276:	ea4f 0441 	mov.w	r4, r1, lsl #1
   8427a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   8427e:	ea94 0f05 	teq	r4, r5
   84282:	bf08      	it	eq
   84284:	ea90 0f02 	teqeq	r0, r2
   84288:	bf1f      	itttt	ne
   8428a:	ea54 0c00 	orrsne.w	ip, r4, r0
   8428e:	ea55 0c02 	orrsne.w	ip, r5, r2
   84292:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   84296:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8429a:	f000 80e2 	beq.w	84462 <__adddf3+0x1ee>
   8429e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   842a2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   842a6:	bfb8      	it	lt
   842a8:	426d      	neglt	r5, r5
   842aa:	dd0c      	ble.n	842c6 <__adddf3+0x52>
   842ac:	442c      	add	r4, r5
   842ae:	ea80 0202 	eor.w	r2, r0, r2
   842b2:	ea81 0303 	eor.w	r3, r1, r3
   842b6:	ea82 0000 	eor.w	r0, r2, r0
   842ba:	ea83 0101 	eor.w	r1, r3, r1
   842be:	ea80 0202 	eor.w	r2, r0, r2
   842c2:	ea81 0303 	eor.w	r3, r1, r3
   842c6:	2d36      	cmp	r5, #54	; 0x36
   842c8:	bf88      	it	hi
   842ca:	bd30      	pophi	{r4, r5, pc}
   842cc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   842d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   842d4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   842d8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   842dc:	d002      	beq.n	842e4 <__adddf3+0x70>
   842de:	4240      	negs	r0, r0
   842e0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   842e4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   842e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   842ec:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   842f0:	d002      	beq.n	842f8 <__adddf3+0x84>
   842f2:	4252      	negs	r2, r2
   842f4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   842f8:	ea94 0f05 	teq	r4, r5
   842fc:	f000 80a7 	beq.w	8444e <__adddf3+0x1da>
   84300:	f1a4 0401 	sub.w	r4, r4, #1
   84304:	f1d5 0e20 	rsbs	lr, r5, #32
   84308:	db0d      	blt.n	84326 <__adddf3+0xb2>
   8430a:	fa02 fc0e 	lsl.w	ip, r2, lr
   8430e:	fa22 f205 	lsr.w	r2, r2, r5
   84312:	1880      	adds	r0, r0, r2
   84314:	f141 0100 	adc.w	r1, r1, #0
   84318:	fa03 f20e 	lsl.w	r2, r3, lr
   8431c:	1880      	adds	r0, r0, r2
   8431e:	fa43 f305 	asr.w	r3, r3, r5
   84322:	4159      	adcs	r1, r3
   84324:	e00e      	b.n	84344 <__adddf3+0xd0>
   84326:	f1a5 0520 	sub.w	r5, r5, #32
   8432a:	f10e 0e20 	add.w	lr, lr, #32
   8432e:	2a01      	cmp	r2, #1
   84330:	fa03 fc0e 	lsl.w	ip, r3, lr
   84334:	bf28      	it	cs
   84336:	f04c 0c02 	orrcs.w	ip, ip, #2
   8433a:	fa43 f305 	asr.w	r3, r3, r5
   8433e:	18c0      	adds	r0, r0, r3
   84340:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   84344:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   84348:	d507      	bpl.n	8435a <__adddf3+0xe6>
   8434a:	f04f 0e00 	mov.w	lr, #0
   8434e:	f1dc 0c00 	rsbs	ip, ip, #0
   84352:	eb7e 0000 	sbcs.w	r0, lr, r0
   84356:	eb6e 0101 	sbc.w	r1, lr, r1
   8435a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   8435e:	d31b      	bcc.n	84398 <__adddf3+0x124>
   84360:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   84364:	d30c      	bcc.n	84380 <__adddf3+0x10c>
   84366:	0849      	lsrs	r1, r1, #1
   84368:	ea5f 0030 	movs.w	r0, r0, rrx
   8436c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   84370:	f104 0401 	add.w	r4, r4, #1
   84374:	ea4f 5244 	mov.w	r2, r4, lsl #21
   84378:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   8437c:	f080 809a 	bcs.w	844b4 <__adddf3+0x240>
   84380:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   84384:	bf08      	it	eq
   84386:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8438a:	f150 0000 	adcs.w	r0, r0, #0
   8438e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   84392:	ea41 0105 	orr.w	r1, r1, r5
   84396:	bd30      	pop	{r4, r5, pc}
   84398:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   8439c:	4140      	adcs	r0, r0
   8439e:	eb41 0101 	adc.w	r1, r1, r1
   843a2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   843a6:	f1a4 0401 	sub.w	r4, r4, #1
   843aa:	d1e9      	bne.n	84380 <__adddf3+0x10c>
   843ac:	f091 0f00 	teq	r1, #0
   843b0:	bf04      	itt	eq
   843b2:	4601      	moveq	r1, r0
   843b4:	2000      	moveq	r0, #0
   843b6:	fab1 f381 	clz	r3, r1
   843ba:	bf08      	it	eq
   843bc:	3320      	addeq	r3, #32
   843be:	f1a3 030b 	sub.w	r3, r3, #11
   843c2:	f1b3 0220 	subs.w	r2, r3, #32
   843c6:	da0c      	bge.n	843e2 <__adddf3+0x16e>
   843c8:	320c      	adds	r2, #12
   843ca:	dd08      	ble.n	843de <__adddf3+0x16a>
   843cc:	f102 0c14 	add.w	ip, r2, #20
   843d0:	f1c2 020c 	rsb	r2, r2, #12
   843d4:	fa01 f00c 	lsl.w	r0, r1, ip
   843d8:	fa21 f102 	lsr.w	r1, r1, r2
   843dc:	e00c      	b.n	843f8 <__adddf3+0x184>
   843de:	f102 0214 	add.w	r2, r2, #20
   843e2:	bfd8      	it	le
   843e4:	f1c2 0c20 	rsble	ip, r2, #32
   843e8:	fa01 f102 	lsl.w	r1, r1, r2
   843ec:	fa20 fc0c 	lsr.w	ip, r0, ip
   843f0:	bfdc      	itt	le
   843f2:	ea41 010c 	orrle.w	r1, r1, ip
   843f6:	4090      	lslle	r0, r2
   843f8:	1ae4      	subs	r4, r4, r3
   843fa:	bfa2      	ittt	ge
   843fc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   84400:	4329      	orrge	r1, r5
   84402:	bd30      	popge	{r4, r5, pc}
   84404:	ea6f 0404 	mvn.w	r4, r4
   84408:	3c1f      	subs	r4, #31
   8440a:	da1c      	bge.n	84446 <__adddf3+0x1d2>
   8440c:	340c      	adds	r4, #12
   8440e:	dc0e      	bgt.n	8442e <__adddf3+0x1ba>
   84410:	f104 0414 	add.w	r4, r4, #20
   84414:	f1c4 0220 	rsb	r2, r4, #32
   84418:	fa20 f004 	lsr.w	r0, r0, r4
   8441c:	fa01 f302 	lsl.w	r3, r1, r2
   84420:	ea40 0003 	orr.w	r0, r0, r3
   84424:	fa21 f304 	lsr.w	r3, r1, r4
   84428:	ea45 0103 	orr.w	r1, r5, r3
   8442c:	bd30      	pop	{r4, r5, pc}
   8442e:	f1c4 040c 	rsb	r4, r4, #12
   84432:	f1c4 0220 	rsb	r2, r4, #32
   84436:	fa20 f002 	lsr.w	r0, r0, r2
   8443a:	fa01 f304 	lsl.w	r3, r1, r4
   8443e:	ea40 0003 	orr.w	r0, r0, r3
   84442:	4629      	mov	r1, r5
   84444:	bd30      	pop	{r4, r5, pc}
   84446:	fa21 f004 	lsr.w	r0, r1, r4
   8444a:	4629      	mov	r1, r5
   8444c:	bd30      	pop	{r4, r5, pc}
   8444e:	f094 0f00 	teq	r4, #0
   84452:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   84456:	bf06      	itte	eq
   84458:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   8445c:	3401      	addeq	r4, #1
   8445e:	3d01      	subne	r5, #1
   84460:	e74e      	b.n	84300 <__adddf3+0x8c>
   84462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   84466:	bf18      	it	ne
   84468:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8446c:	d029      	beq.n	844c2 <__adddf3+0x24e>
   8446e:	ea94 0f05 	teq	r4, r5
   84472:	bf08      	it	eq
   84474:	ea90 0f02 	teqeq	r0, r2
   84478:	d005      	beq.n	84486 <__adddf3+0x212>
   8447a:	ea54 0c00 	orrs.w	ip, r4, r0
   8447e:	bf04      	itt	eq
   84480:	4619      	moveq	r1, r3
   84482:	4610      	moveq	r0, r2
   84484:	bd30      	pop	{r4, r5, pc}
   84486:	ea91 0f03 	teq	r1, r3
   8448a:	bf1e      	ittt	ne
   8448c:	2100      	movne	r1, #0
   8448e:	2000      	movne	r0, #0
   84490:	bd30      	popne	{r4, r5, pc}
   84492:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   84496:	d105      	bne.n	844a4 <__adddf3+0x230>
   84498:	0040      	lsls	r0, r0, #1
   8449a:	4149      	adcs	r1, r1
   8449c:	bf28      	it	cs
   8449e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   844a2:	bd30      	pop	{r4, r5, pc}
   844a4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   844a8:	bf3c      	itt	cc
   844aa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   844ae:	bd30      	popcc	{r4, r5, pc}
   844b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   844b4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   844b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   844bc:	f04f 0000 	mov.w	r0, #0
   844c0:	bd30      	pop	{r4, r5, pc}
   844c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   844c6:	bf1a      	itte	ne
   844c8:	4619      	movne	r1, r3
   844ca:	4610      	movne	r0, r2
   844cc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   844d0:	bf1c      	itt	ne
   844d2:	460b      	movne	r3, r1
   844d4:	4602      	movne	r2, r0
   844d6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   844da:	bf06      	itte	eq
   844dc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   844e0:	ea91 0f03 	teqeq	r1, r3
   844e4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   844e8:	bd30      	pop	{r4, r5, pc}
   844ea:	bf00      	nop

000844ec <__aeabi_ui2d>:
   844ec:	f090 0f00 	teq	r0, #0
   844f0:	bf04      	itt	eq
   844f2:	2100      	moveq	r1, #0
   844f4:	4770      	bxeq	lr
   844f6:	b530      	push	{r4, r5, lr}
   844f8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   844fc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   84500:	f04f 0500 	mov.w	r5, #0
   84504:	f04f 0100 	mov.w	r1, #0
   84508:	e750      	b.n	843ac <__adddf3+0x138>
   8450a:	bf00      	nop

0008450c <__aeabi_i2d>:
   8450c:	f090 0f00 	teq	r0, #0
   84510:	bf04      	itt	eq
   84512:	2100      	moveq	r1, #0
   84514:	4770      	bxeq	lr
   84516:	b530      	push	{r4, r5, lr}
   84518:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8451c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   84520:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   84524:	bf48      	it	mi
   84526:	4240      	negmi	r0, r0
   84528:	f04f 0100 	mov.w	r1, #0
   8452c:	e73e      	b.n	843ac <__adddf3+0x138>
   8452e:	bf00      	nop

00084530 <__aeabi_f2d>:
   84530:	0042      	lsls	r2, r0, #1
   84532:	ea4f 01e2 	mov.w	r1, r2, asr #3
   84536:	ea4f 0131 	mov.w	r1, r1, rrx
   8453a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   8453e:	bf1f      	itttt	ne
   84540:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   84544:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   84548:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   8454c:	4770      	bxne	lr
   8454e:	f092 0f00 	teq	r2, #0
   84552:	bf14      	ite	ne
   84554:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   84558:	4770      	bxeq	lr
   8455a:	b530      	push	{r4, r5, lr}
   8455c:	f44f 7460 	mov.w	r4, #896	; 0x380
   84560:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   84564:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   84568:	e720      	b.n	843ac <__adddf3+0x138>
   8456a:	bf00      	nop

0008456c <__aeabi_ul2d>:
   8456c:	ea50 0201 	orrs.w	r2, r0, r1
   84570:	bf08      	it	eq
   84572:	4770      	bxeq	lr
   84574:	b530      	push	{r4, r5, lr}
   84576:	f04f 0500 	mov.w	r5, #0
   8457a:	e00a      	b.n	84592 <__aeabi_l2d+0x16>

0008457c <__aeabi_l2d>:
   8457c:	ea50 0201 	orrs.w	r2, r0, r1
   84580:	bf08      	it	eq
   84582:	4770      	bxeq	lr
   84584:	b530      	push	{r4, r5, lr}
   84586:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   8458a:	d502      	bpl.n	84592 <__aeabi_l2d+0x16>
   8458c:	4240      	negs	r0, r0
   8458e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   84592:	f44f 6480 	mov.w	r4, #1024	; 0x400
   84596:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8459a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   8459e:	f43f aedc 	beq.w	8435a <__adddf3+0xe6>
   845a2:	f04f 0203 	mov.w	r2, #3
   845a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   845aa:	bf18      	it	ne
   845ac:	3203      	addne	r2, #3
   845ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   845b2:	bf18      	it	ne
   845b4:	3203      	addne	r2, #3
   845b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   845ba:	f1c2 0320 	rsb	r3, r2, #32
   845be:	fa00 fc03 	lsl.w	ip, r0, r3
   845c2:	fa20 f002 	lsr.w	r0, r0, r2
   845c6:	fa01 fe03 	lsl.w	lr, r1, r3
   845ca:	ea40 000e 	orr.w	r0, r0, lr
   845ce:	fa21 f102 	lsr.w	r1, r1, r2
   845d2:	4414      	add	r4, r2
   845d4:	e6c1      	b.n	8435a <__adddf3+0xe6>
   845d6:	bf00      	nop

000845d8 <__aeabi_d2uiz>:
   845d8:	004a      	lsls	r2, r1, #1
   845da:	d211      	bcs.n	84600 <__aeabi_d2uiz+0x28>
   845dc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   845e0:	d211      	bcs.n	84606 <__aeabi_d2uiz+0x2e>
   845e2:	d50d      	bpl.n	84600 <__aeabi_d2uiz+0x28>
   845e4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   845e8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   845ec:	d40e      	bmi.n	8460c <__aeabi_d2uiz+0x34>
   845ee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   845f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   845f6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   845fa:	fa23 f002 	lsr.w	r0, r3, r2
   845fe:	4770      	bx	lr
   84600:	f04f 0000 	mov.w	r0, #0
   84604:	4770      	bx	lr
   84606:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   8460a:	d102      	bne.n	84612 <__aeabi_d2uiz+0x3a>
   8460c:	f04f 30ff 	mov.w	r0, #4294967295
   84610:	4770      	bx	lr
   84612:	f04f 0000 	mov.w	r0, #0
   84616:	4770      	bx	lr

00084618 <__libc_init_array>:
   84618:	b570      	push	{r4, r5, r6, lr}
   8461a:	4e0f      	ldr	r6, [pc, #60]	; (84658 <__libc_init_array+0x40>)
   8461c:	4d0f      	ldr	r5, [pc, #60]	; (8465c <__libc_init_array+0x44>)
   8461e:	1b76      	subs	r6, r6, r5
   84620:	10b6      	asrs	r6, r6, #2
   84622:	bf18      	it	ne
   84624:	2400      	movne	r4, #0
   84626:	d005      	beq.n	84634 <__libc_init_array+0x1c>
   84628:	3401      	adds	r4, #1
   8462a:	f855 3b04 	ldr.w	r3, [r5], #4
   8462e:	4798      	blx	r3
   84630:	42a6      	cmp	r6, r4
   84632:	d1f9      	bne.n	84628 <__libc_init_array+0x10>
   84634:	4e0a      	ldr	r6, [pc, #40]	; (84660 <__libc_init_array+0x48>)
   84636:	4d0b      	ldr	r5, [pc, #44]	; (84664 <__libc_init_array+0x4c>)
   84638:	f003 f810 	bl	8765c <_init>
   8463c:	1b76      	subs	r6, r6, r5
   8463e:	10b6      	asrs	r6, r6, #2
   84640:	bf18      	it	ne
   84642:	2400      	movne	r4, #0
   84644:	d006      	beq.n	84654 <__libc_init_array+0x3c>
   84646:	3401      	adds	r4, #1
   84648:	f855 3b04 	ldr.w	r3, [r5], #4
   8464c:	4798      	blx	r3
   8464e:	42a6      	cmp	r6, r4
   84650:	d1f9      	bne.n	84646 <__libc_init_array+0x2e>
   84652:	bd70      	pop	{r4, r5, r6, pc}
   84654:	bd70      	pop	{r4, r5, r6, pc}
   84656:	bf00      	nop
   84658:	00087668 	.word	0x00087668
   8465c:	00087668 	.word	0x00087668
   84660:	00087670 	.word	0x00087670
   84664:	00087668 	.word	0x00087668

00084668 <iprintf>:
   84668:	b40f      	push	{r0, r1, r2, r3}
   8466a:	b510      	push	{r4, lr}
   8466c:	4b07      	ldr	r3, [pc, #28]	; (8468c <iprintf+0x24>)
   8466e:	b082      	sub	sp, #8
   84670:	ac04      	add	r4, sp, #16
   84672:	f854 2b04 	ldr.w	r2, [r4], #4
   84676:	6818      	ldr	r0, [r3, #0]
   84678:	4623      	mov	r3, r4
   8467a:	6881      	ldr	r1, [r0, #8]
   8467c:	9401      	str	r4, [sp, #4]
   8467e:	f000 f96f 	bl	84960 <_vfiprintf_r>
   84682:	b002      	add	sp, #8
   84684:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   84688:	b004      	add	sp, #16
   8468a:	4770      	bx	lr
   8468c:	200704d8 	.word	0x200704d8

00084690 <memset>:
   84690:	b470      	push	{r4, r5, r6}
   84692:	0784      	lsls	r4, r0, #30
   84694:	d046      	beq.n	84724 <memset+0x94>
   84696:	1e54      	subs	r4, r2, #1
   84698:	2a00      	cmp	r2, #0
   8469a:	d041      	beq.n	84720 <memset+0x90>
   8469c:	b2cd      	uxtb	r5, r1
   8469e:	4603      	mov	r3, r0
   846a0:	e002      	b.n	846a8 <memset+0x18>
   846a2:	1e62      	subs	r2, r4, #1
   846a4:	b3e4      	cbz	r4, 84720 <memset+0x90>
   846a6:	4614      	mov	r4, r2
   846a8:	f803 5b01 	strb.w	r5, [r3], #1
   846ac:	079a      	lsls	r2, r3, #30
   846ae:	d1f8      	bne.n	846a2 <memset+0x12>
   846b0:	2c03      	cmp	r4, #3
   846b2:	d92e      	bls.n	84712 <memset+0x82>
   846b4:	b2cd      	uxtb	r5, r1
   846b6:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   846ba:	2c0f      	cmp	r4, #15
   846bc:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   846c0:	d919      	bls.n	846f6 <memset+0x66>
   846c2:	4626      	mov	r6, r4
   846c4:	f103 0210 	add.w	r2, r3, #16
   846c8:	3e10      	subs	r6, #16
   846ca:	2e0f      	cmp	r6, #15
   846cc:	f842 5c10 	str.w	r5, [r2, #-16]
   846d0:	f842 5c0c 	str.w	r5, [r2, #-12]
   846d4:	f842 5c08 	str.w	r5, [r2, #-8]
   846d8:	f842 5c04 	str.w	r5, [r2, #-4]
   846dc:	f102 0210 	add.w	r2, r2, #16
   846e0:	d8f2      	bhi.n	846c8 <memset+0x38>
   846e2:	f1a4 0210 	sub.w	r2, r4, #16
   846e6:	f022 020f 	bic.w	r2, r2, #15
   846ea:	f004 040f 	and.w	r4, r4, #15
   846ee:	3210      	adds	r2, #16
   846f0:	2c03      	cmp	r4, #3
   846f2:	4413      	add	r3, r2
   846f4:	d90d      	bls.n	84712 <memset+0x82>
   846f6:	461e      	mov	r6, r3
   846f8:	4622      	mov	r2, r4
   846fa:	3a04      	subs	r2, #4
   846fc:	2a03      	cmp	r2, #3
   846fe:	f846 5b04 	str.w	r5, [r6], #4
   84702:	d8fa      	bhi.n	846fa <memset+0x6a>
   84704:	1f22      	subs	r2, r4, #4
   84706:	f022 0203 	bic.w	r2, r2, #3
   8470a:	3204      	adds	r2, #4
   8470c:	4413      	add	r3, r2
   8470e:	f004 0403 	and.w	r4, r4, #3
   84712:	b12c      	cbz	r4, 84720 <memset+0x90>
   84714:	b2c9      	uxtb	r1, r1
   84716:	441c      	add	r4, r3
   84718:	f803 1b01 	strb.w	r1, [r3], #1
   8471c:	42a3      	cmp	r3, r4
   8471e:	d1fb      	bne.n	84718 <memset+0x88>
   84720:	bc70      	pop	{r4, r5, r6}
   84722:	4770      	bx	lr
   84724:	4614      	mov	r4, r2
   84726:	4603      	mov	r3, r0
   84728:	e7c2      	b.n	846b0 <memset+0x20>
   8472a:	bf00      	nop

0008472c <setbuf>:
   8472c:	2900      	cmp	r1, #0
   8472e:	bf0c      	ite	eq
   84730:	2202      	moveq	r2, #2
   84732:	2200      	movne	r2, #0
   84734:	f44f 6380 	mov.w	r3, #1024	; 0x400
   84738:	f000 b800 	b.w	8473c <setvbuf>

0008473c <setvbuf>:
   8473c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   84740:	4d51      	ldr	r5, [pc, #324]	; (84888 <setvbuf+0x14c>)
   84742:	b083      	sub	sp, #12
   84744:	682d      	ldr	r5, [r5, #0]
   84746:	4604      	mov	r4, r0
   84748:	460f      	mov	r7, r1
   8474a:	4690      	mov	r8, r2
   8474c:	461e      	mov	r6, r3
   8474e:	b115      	cbz	r5, 84756 <setvbuf+0x1a>
   84750:	6bab      	ldr	r3, [r5, #56]	; 0x38
   84752:	2b00      	cmp	r3, #0
   84754:	d079      	beq.n	8484a <setvbuf+0x10e>
   84756:	f1b8 0f02 	cmp.w	r8, #2
   8475a:	d004      	beq.n	84766 <setvbuf+0x2a>
   8475c:	f1b8 0f01 	cmp.w	r8, #1
   84760:	d87f      	bhi.n	84862 <setvbuf+0x126>
   84762:	2e00      	cmp	r6, #0
   84764:	db7d      	blt.n	84862 <setvbuf+0x126>
   84766:	4621      	mov	r1, r4
   84768:	4628      	mov	r0, r5
   8476a:	f001 f93b 	bl	859e4 <_fflush_r>
   8476e:	6b21      	ldr	r1, [r4, #48]	; 0x30
   84770:	b141      	cbz	r1, 84784 <setvbuf+0x48>
   84772:	f104 0340 	add.w	r3, r4, #64	; 0x40
   84776:	4299      	cmp	r1, r3
   84778:	d002      	beq.n	84780 <setvbuf+0x44>
   8477a:	4628      	mov	r0, r5
   8477c:	f001 fa8e 	bl	85c9c <_free_r>
   84780:	2300      	movs	r3, #0
   84782:	6323      	str	r3, [r4, #48]	; 0x30
   84784:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   84788:	2200      	movs	r2, #0
   8478a:	61a2      	str	r2, [r4, #24]
   8478c:	6062      	str	r2, [r4, #4]
   8478e:	061a      	lsls	r2, r3, #24
   84790:	d454      	bmi.n	8483c <setvbuf+0x100>
   84792:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
   84796:	f023 0303 	bic.w	r3, r3, #3
   8479a:	f1b8 0f02 	cmp.w	r8, #2
   8479e:	81a3      	strh	r3, [r4, #12]
   847a0:	d039      	beq.n	84816 <setvbuf+0xda>
   847a2:	ab01      	add	r3, sp, #4
   847a4:	466a      	mov	r2, sp
   847a6:	4621      	mov	r1, r4
   847a8:	4628      	mov	r0, r5
   847aa:	f001 fd15 	bl	861d8 <__swhatbuf_r>
   847ae:	89a3      	ldrh	r3, [r4, #12]
   847b0:	4318      	orrs	r0, r3
   847b2:	81a0      	strh	r0, [r4, #12]
   847b4:	b326      	cbz	r6, 84800 <setvbuf+0xc4>
   847b6:	b327      	cbz	r7, 84802 <setvbuf+0xc6>
   847b8:	6bab      	ldr	r3, [r5, #56]	; 0x38
   847ba:	2b00      	cmp	r3, #0
   847bc:	d04d      	beq.n	8485a <setvbuf+0x11e>
   847be:	9b00      	ldr	r3, [sp, #0]
   847c0:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   847c4:	429e      	cmp	r6, r3
   847c6:	bf1c      	itt	ne
   847c8:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
   847cc:	81a0      	strhne	r0, [r4, #12]
   847ce:	f1b8 0f01 	cmp.w	r8, #1
   847d2:	bf08      	it	eq
   847d4:	f040 0001 	orreq.w	r0, r0, #1
   847d8:	b283      	uxth	r3, r0
   847da:	bf08      	it	eq
   847dc:	81a0      	strheq	r0, [r4, #12]
   847de:	f003 0008 	and.w	r0, r3, #8
   847e2:	b280      	uxth	r0, r0
   847e4:	6027      	str	r7, [r4, #0]
   847e6:	6127      	str	r7, [r4, #16]
   847e8:	6166      	str	r6, [r4, #20]
   847ea:	b318      	cbz	r0, 84834 <setvbuf+0xf8>
   847ec:	f013 0001 	ands.w	r0, r3, #1
   847f0:	d02f      	beq.n	84852 <setvbuf+0x116>
   847f2:	2000      	movs	r0, #0
   847f4:	4276      	negs	r6, r6
   847f6:	61a6      	str	r6, [r4, #24]
   847f8:	60a0      	str	r0, [r4, #8]
   847fa:	b003      	add	sp, #12
   847fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   84800:	9e00      	ldr	r6, [sp, #0]
   84802:	4630      	mov	r0, r6
   84804:	f001 fd5c 	bl	862c0 <malloc>
   84808:	4607      	mov	r7, r0
   8480a:	b368      	cbz	r0, 84868 <setvbuf+0x12c>
   8480c:	89a3      	ldrh	r3, [r4, #12]
   8480e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   84812:	81a3      	strh	r3, [r4, #12]
   84814:	e7d0      	b.n	847b8 <setvbuf+0x7c>
   84816:	2000      	movs	r0, #0
   84818:	f104 0243 	add.w	r2, r4, #67	; 0x43
   8481c:	f043 0302 	orr.w	r3, r3, #2
   84820:	2500      	movs	r5, #0
   84822:	2101      	movs	r1, #1
   84824:	81a3      	strh	r3, [r4, #12]
   84826:	60a5      	str	r5, [r4, #8]
   84828:	6022      	str	r2, [r4, #0]
   8482a:	6122      	str	r2, [r4, #16]
   8482c:	6161      	str	r1, [r4, #20]
   8482e:	b003      	add	sp, #12
   84830:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   84834:	60a0      	str	r0, [r4, #8]
   84836:	b003      	add	sp, #12
   84838:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8483c:	6921      	ldr	r1, [r4, #16]
   8483e:	4628      	mov	r0, r5
   84840:	f001 fa2c 	bl	85c9c <_free_r>
   84844:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   84848:	e7a3      	b.n	84792 <setvbuf+0x56>
   8484a:	4628      	mov	r0, r5
   8484c:	f001 f95e 	bl	85b0c <__sinit>
   84850:	e781      	b.n	84756 <setvbuf+0x1a>
   84852:	60a6      	str	r6, [r4, #8]
   84854:	b003      	add	sp, #12
   84856:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8485a:	4628      	mov	r0, r5
   8485c:	f001 f956 	bl	85b0c <__sinit>
   84860:	e7ad      	b.n	847be <setvbuf+0x82>
   84862:	f04f 30ff 	mov.w	r0, #4294967295
   84866:	e7e2      	b.n	8482e <setvbuf+0xf2>
   84868:	f8dd 9000 	ldr.w	r9, [sp]
   8486c:	45b1      	cmp	r9, r6
   8486e:	d006      	beq.n	8487e <setvbuf+0x142>
   84870:	4648      	mov	r0, r9
   84872:	f001 fd25 	bl	862c0 <malloc>
   84876:	4607      	mov	r7, r0
   84878:	b108      	cbz	r0, 8487e <setvbuf+0x142>
   8487a:	464e      	mov	r6, r9
   8487c:	e7c6      	b.n	8480c <setvbuf+0xd0>
   8487e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   84882:	f04f 30ff 	mov.w	r0, #4294967295
   84886:	e7c7      	b.n	84818 <setvbuf+0xdc>
   84888:	200704d8 	.word	0x200704d8

0008488c <strlen>:
   8488c:	f020 0103 	bic.w	r1, r0, #3
   84890:	f010 0003 	ands.w	r0, r0, #3
   84894:	f1c0 0000 	rsb	r0, r0, #0
   84898:	f851 3b04 	ldr.w	r3, [r1], #4
   8489c:	f100 0c04 	add.w	ip, r0, #4
   848a0:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   848a4:	f06f 0200 	mvn.w	r2, #0
   848a8:	bf1c      	itt	ne
   848aa:	fa22 f20c 	lsrne.w	r2, r2, ip
   848ae:	4313      	orrne	r3, r2
   848b0:	f04f 0c01 	mov.w	ip, #1
   848b4:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   848b8:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   848bc:	eba3 020c 	sub.w	r2, r3, ip
   848c0:	ea22 0203 	bic.w	r2, r2, r3
   848c4:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   848c8:	bf04      	itt	eq
   848ca:	f851 3b04 	ldreq.w	r3, [r1], #4
   848ce:	3004      	addeq	r0, #4
   848d0:	d0f4      	beq.n	848bc <strlen+0x30>
   848d2:	f1c2 0100 	rsb	r1, r2, #0
   848d6:	ea02 0201 	and.w	r2, r2, r1
   848da:	fab2 f282 	clz	r2, r2
   848de:	f1c2 021f 	rsb	r2, r2, #31
   848e2:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   848e6:	4770      	bx	lr

000848e8 <__sprint_r.part.0>:
   848e8:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   848ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   848ee:	049c      	lsls	r4, r3, #18
   848f0:	4692      	mov	sl, r2
   848f2:	d52c      	bpl.n	8494e <__sprint_r.part.0+0x66>
   848f4:	6893      	ldr	r3, [r2, #8]
   848f6:	6812      	ldr	r2, [r2, #0]
   848f8:	b33b      	cbz	r3, 8494a <__sprint_r.part.0+0x62>
   848fa:	460f      	mov	r7, r1
   848fc:	4680      	mov	r8, r0
   848fe:	f102 0908 	add.w	r9, r2, #8
   84902:	e919 0060 	ldmdb	r9, {r5, r6}
   84906:	08b6      	lsrs	r6, r6, #2
   84908:	d017      	beq.n	8493a <__sprint_r.part.0+0x52>
   8490a:	3d04      	subs	r5, #4
   8490c:	2400      	movs	r4, #0
   8490e:	e001      	b.n	84914 <__sprint_r.part.0+0x2c>
   84910:	42a6      	cmp	r6, r4
   84912:	d010      	beq.n	84936 <__sprint_r.part.0+0x4e>
   84914:	463a      	mov	r2, r7
   84916:	f855 1f04 	ldr.w	r1, [r5, #4]!
   8491a:	4640      	mov	r0, r8
   8491c:	f001 f95e 	bl	85bdc <_fputwc_r>
   84920:	1c43      	adds	r3, r0, #1
   84922:	f104 0401 	add.w	r4, r4, #1
   84926:	d1f3      	bne.n	84910 <__sprint_r.part.0+0x28>
   84928:	2300      	movs	r3, #0
   8492a:	f8ca 3008 	str.w	r3, [sl, #8]
   8492e:	f8ca 3004 	str.w	r3, [sl, #4]
   84932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   84936:	f8da 3008 	ldr.w	r3, [sl, #8]
   8493a:	eba3 0386 	sub.w	r3, r3, r6, lsl #2
   8493e:	f8ca 3008 	str.w	r3, [sl, #8]
   84942:	f109 0908 	add.w	r9, r9, #8
   84946:	2b00      	cmp	r3, #0
   84948:	d1db      	bne.n	84902 <__sprint_r.part.0+0x1a>
   8494a:	2000      	movs	r0, #0
   8494c:	e7ec      	b.n	84928 <__sprint_r.part.0+0x40>
   8494e:	f001 fa8d 	bl	85e6c <__sfvwrite_r>
   84952:	2300      	movs	r3, #0
   84954:	f8ca 3008 	str.w	r3, [sl, #8]
   84958:	f8ca 3004 	str.w	r3, [sl, #4]
   8495c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00084960 <_vfiprintf_r>:
   84960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84964:	b0ab      	sub	sp, #172	; 0xac
   84966:	461c      	mov	r4, r3
   84968:	9100      	str	r1, [sp, #0]
   8496a:	4690      	mov	r8, r2
   8496c:	9304      	str	r3, [sp, #16]
   8496e:	9005      	str	r0, [sp, #20]
   84970:	b118      	cbz	r0, 8497a <_vfiprintf_r+0x1a>
   84972:	6b83      	ldr	r3, [r0, #56]	; 0x38
   84974:	2b00      	cmp	r3, #0
   84976:	f000 80de 	beq.w	84b36 <_vfiprintf_r+0x1d6>
   8497a:	9800      	ldr	r0, [sp, #0]
   8497c:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
   84980:	b28a      	uxth	r2, r1
   84982:	0495      	lsls	r5, r2, #18
   84984:	d407      	bmi.n	84996 <_vfiprintf_r+0x36>
   84986:	6e43      	ldr	r3, [r0, #100]	; 0x64
   84988:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
   8498c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   84990:	8182      	strh	r2, [r0, #12]
   84992:	6643      	str	r3, [r0, #100]	; 0x64
   84994:	b292      	uxth	r2, r2
   84996:	0711      	lsls	r1, r2, #28
   84998:	f140 80b1 	bpl.w	84afe <_vfiprintf_r+0x19e>
   8499c:	9b00      	ldr	r3, [sp, #0]
   8499e:	691b      	ldr	r3, [r3, #16]
   849a0:	2b00      	cmp	r3, #0
   849a2:	f000 80ac 	beq.w	84afe <_vfiprintf_r+0x19e>
   849a6:	f002 021a 	and.w	r2, r2, #26
   849aa:	2a0a      	cmp	r2, #10
   849ac:	f000 80b5 	beq.w	84b1a <_vfiprintf_r+0x1ba>
   849b0:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
   849b4:	46d3      	mov	fp, sl
   849b6:	2300      	movs	r3, #0
   849b8:	9302      	str	r3, [sp, #8]
   849ba:	930f      	str	r3, [sp, #60]	; 0x3c
   849bc:	930e      	str	r3, [sp, #56]	; 0x38
   849be:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
   849c2:	f898 3000 	ldrb.w	r3, [r8]
   849c6:	4644      	mov	r4, r8
   849c8:	b1fb      	cbz	r3, 84a0a <_vfiprintf_r+0xaa>
   849ca:	2b25      	cmp	r3, #37	; 0x25
   849cc:	d102      	bne.n	849d4 <_vfiprintf_r+0x74>
   849ce:	e01c      	b.n	84a0a <_vfiprintf_r+0xaa>
   849d0:	2b25      	cmp	r3, #37	; 0x25
   849d2:	d003      	beq.n	849dc <_vfiprintf_r+0x7c>
   849d4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   849d8:	2b00      	cmp	r3, #0
   849da:	d1f9      	bne.n	849d0 <_vfiprintf_r+0x70>
   849dc:	ebc8 0504 	rsb	r5, r8, r4
   849e0:	b19d      	cbz	r5, 84a0a <_vfiprintf_r+0xaa>
   849e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   849e4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   849e6:	3301      	adds	r3, #1
   849e8:	442a      	add	r2, r5
   849ea:	2b07      	cmp	r3, #7
   849ec:	f8cb 8000 	str.w	r8, [fp]
   849f0:	f8cb 5004 	str.w	r5, [fp, #4]
   849f4:	920f      	str	r2, [sp, #60]	; 0x3c
   849f6:	930e      	str	r3, [sp, #56]	; 0x38
   849f8:	dd7b      	ble.n	84af2 <_vfiprintf_r+0x192>
   849fa:	2a00      	cmp	r2, #0
   849fc:	f040 851f 	bne.w	8543e <_vfiprintf_r+0xade>
   84a00:	46d3      	mov	fp, sl
   84a02:	9b02      	ldr	r3, [sp, #8]
   84a04:	920e      	str	r2, [sp, #56]	; 0x38
   84a06:	442b      	add	r3, r5
   84a08:	9302      	str	r3, [sp, #8]
   84a0a:	7823      	ldrb	r3, [r4, #0]
   84a0c:	2b00      	cmp	r3, #0
   84a0e:	f000 843b 	beq.w	85288 <_vfiprintf_r+0x928>
   84a12:	f04f 0300 	mov.w	r3, #0
   84a16:	2100      	movs	r1, #0
   84a18:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   84a1c:	f104 0801 	add.w	r8, r4, #1
   84a20:	7863      	ldrb	r3, [r4, #1]
   84a22:	4608      	mov	r0, r1
   84a24:	460e      	mov	r6, r1
   84a26:	460c      	mov	r4, r1
   84a28:	f04f 32ff 	mov.w	r2, #4294967295
   84a2c:	9201      	str	r2, [sp, #4]
   84a2e:	f108 0801 	add.w	r8, r8, #1
   84a32:	f1a3 0220 	sub.w	r2, r3, #32
   84a36:	2a58      	cmp	r2, #88	; 0x58
   84a38:	f200 838b 	bhi.w	85152 <_vfiprintf_r+0x7f2>
   84a3c:	e8df f012 	tbh	[pc, r2, lsl #1]
   84a40:	0389033d 	.word	0x0389033d
   84a44:	03450389 	.word	0x03450389
   84a48:	03890389 	.word	0x03890389
   84a4c:	03890389 	.word	0x03890389
   84a50:	03890389 	.word	0x03890389
   84a54:	026b007e 	.word	0x026b007e
   84a58:	00860389 	.word	0x00860389
   84a5c:	03890270 	.word	0x03890270
   84a60:	025d01cc 	.word	0x025d01cc
   84a64:	025d025d 	.word	0x025d025d
   84a68:	025d025d 	.word	0x025d025d
   84a6c:	025d025d 	.word	0x025d025d
   84a70:	025d025d 	.word	0x025d025d
   84a74:	03890389 	.word	0x03890389
   84a78:	03890389 	.word	0x03890389
   84a7c:	03890389 	.word	0x03890389
   84a80:	03890389 	.word	0x03890389
   84a84:	03890389 	.word	0x03890389
   84a88:	038901d1 	.word	0x038901d1
   84a8c:	03890389 	.word	0x03890389
   84a90:	03890389 	.word	0x03890389
   84a94:	03890389 	.word	0x03890389
   84a98:	03890389 	.word	0x03890389
   84a9c:	021a0389 	.word	0x021a0389
   84aa0:	03890389 	.word	0x03890389
   84aa4:	03890389 	.word	0x03890389
   84aa8:	02e50389 	.word	0x02e50389
   84aac:	03890389 	.word	0x03890389
   84ab0:	03890308 	.word	0x03890308
   84ab4:	03890389 	.word	0x03890389
   84ab8:	03890389 	.word	0x03890389
   84abc:	03890389 	.word	0x03890389
   84ac0:	03890389 	.word	0x03890389
   84ac4:	032b0389 	.word	0x032b0389
   84ac8:	03890382 	.word	0x03890382
   84acc:	03890389 	.word	0x03890389
   84ad0:	0382035e 	.word	0x0382035e
   84ad4:	03890389 	.word	0x03890389
   84ad8:	03890363 	.word	0x03890363
   84adc:	028d0370 	.word	0x028d0370
   84ae0:	02e0008b 	.word	0x02e0008b
   84ae4:	02930389 	.word	0x02930389
   84ae8:	02b20389 	.word	0x02b20389
   84aec:	03890389 	.word	0x03890389
   84af0:	034a      	.short	0x034a
   84af2:	f10b 0b08 	add.w	fp, fp, #8
   84af6:	9b02      	ldr	r3, [sp, #8]
   84af8:	442b      	add	r3, r5
   84afa:	9302      	str	r3, [sp, #8]
   84afc:	e785      	b.n	84a0a <_vfiprintf_r+0xaa>
   84afe:	9900      	ldr	r1, [sp, #0]
   84b00:	9805      	ldr	r0, [sp, #20]
   84b02:	f000 fe57 	bl	857b4 <__swsetup_r>
   84b06:	2800      	cmp	r0, #0
   84b08:	f040 8545 	bne.w	85596 <_vfiprintf_r+0xc36>
   84b0c:	9b00      	ldr	r3, [sp, #0]
   84b0e:	899a      	ldrh	r2, [r3, #12]
   84b10:	f002 021a 	and.w	r2, r2, #26
   84b14:	2a0a      	cmp	r2, #10
   84b16:	f47f af4b 	bne.w	849b0 <_vfiprintf_r+0x50>
   84b1a:	9900      	ldr	r1, [sp, #0]
   84b1c:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
   84b20:	2b00      	cmp	r3, #0
   84b22:	f6ff af45 	blt.w	849b0 <_vfiprintf_r+0x50>
   84b26:	4623      	mov	r3, r4
   84b28:	4642      	mov	r2, r8
   84b2a:	9805      	ldr	r0, [sp, #20]
   84b2c:	f000 fe0c 	bl	85748 <__sbprintf>
   84b30:	b02b      	add	sp, #172	; 0xac
   84b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84b36:	f000 ffe9 	bl	85b0c <__sinit>
   84b3a:	e71e      	b.n	8497a <_vfiprintf_r+0x1a>
   84b3c:	9a04      	ldr	r2, [sp, #16]
   84b3e:	4613      	mov	r3, r2
   84b40:	6814      	ldr	r4, [r2, #0]
   84b42:	3304      	adds	r3, #4
   84b44:	2c00      	cmp	r4, #0
   84b46:	9304      	str	r3, [sp, #16]
   84b48:	da02      	bge.n	84b50 <_vfiprintf_r+0x1f0>
   84b4a:	4264      	negs	r4, r4
   84b4c:	f046 0604 	orr.w	r6, r6, #4
   84b50:	f898 3000 	ldrb.w	r3, [r8]
   84b54:	e76b      	b.n	84a2e <_vfiprintf_r+0xce>
   84b56:	f04f 0300 	mov.w	r3, #0
   84b5a:	9804      	ldr	r0, [sp, #16]
   84b5c:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   84b60:	4603      	mov	r3, r0
   84b62:	2130      	movs	r1, #48	; 0x30
   84b64:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
   84b68:	9901      	ldr	r1, [sp, #4]
   84b6a:	2278      	movs	r2, #120	; 0x78
   84b6c:	2900      	cmp	r1, #0
   84b6e:	9406      	str	r4, [sp, #24]
   84b70:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
   84b74:	6804      	ldr	r4, [r0, #0]
   84b76:	f103 0304 	add.w	r3, r3, #4
   84b7a:	f04f 0500 	mov.w	r5, #0
   84b7e:	f046 0202 	orr.w	r2, r6, #2
   84b82:	f2c0 850c 	blt.w	8559e <_vfiprintf_r+0xc3e>
   84b86:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   84b8a:	ea54 0205 	orrs.w	r2, r4, r5
   84b8e:	f046 0602 	orr.w	r6, r6, #2
   84b92:	9304      	str	r3, [sp, #16]
   84b94:	f040 84b5 	bne.w	85502 <_vfiprintf_r+0xba2>
   84b98:	48b3      	ldr	r0, [pc, #716]	; (84e68 <_vfiprintf_r+0x508>)
   84b9a:	9b01      	ldr	r3, [sp, #4]
   84b9c:	2b00      	cmp	r3, #0
   84b9e:	f040 8462 	bne.w	85466 <_vfiprintf_r+0xb06>
   84ba2:	4699      	mov	r9, r3
   84ba4:	4657      	mov	r7, sl
   84ba6:	2300      	movs	r3, #0
   84ba8:	9301      	str	r3, [sp, #4]
   84baa:	9303      	str	r3, [sp, #12]
   84bac:	9b01      	ldr	r3, [sp, #4]
   84bae:	9a03      	ldr	r2, [sp, #12]
   84bb0:	4293      	cmp	r3, r2
   84bb2:	bfb8      	it	lt
   84bb4:	4613      	movlt	r3, r2
   84bb6:	461d      	mov	r5, r3
   84bb8:	f1b9 0f00 	cmp.w	r9, #0
   84bbc:	d000      	beq.n	84bc0 <_vfiprintf_r+0x260>
   84bbe:	3501      	adds	r5, #1
   84bc0:	f016 0302 	ands.w	r3, r6, #2
   84bc4:	9307      	str	r3, [sp, #28]
   84bc6:	bf18      	it	ne
   84bc8:	3502      	addne	r5, #2
   84bca:	f016 0384 	ands.w	r3, r6, #132	; 0x84
   84bce:	9308      	str	r3, [sp, #32]
   84bd0:	f040 82e8 	bne.w	851a4 <_vfiprintf_r+0x844>
   84bd4:	9b06      	ldr	r3, [sp, #24]
   84bd6:	1b5c      	subs	r4, r3, r5
   84bd8:	2c00      	cmp	r4, #0
   84bda:	f340 82e3 	ble.w	851a4 <_vfiprintf_r+0x844>
   84bde:	2c10      	cmp	r4, #16
   84be0:	f340 853c 	ble.w	8565c <_vfiprintf_r+0xcfc>
   84be4:	f8df 9284 	ldr.w	r9, [pc, #644]	; 84e6c <_vfiprintf_r+0x50c>
   84be8:	f8dd e038 	ldr.w	lr, [sp, #56]	; 0x38
   84bec:	46dc      	mov	ip, fp
   84bee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   84bf0:	46c3      	mov	fp, r8
   84bf2:	2310      	movs	r3, #16
   84bf4:	46a8      	mov	r8, r5
   84bf6:	4670      	mov	r0, lr
   84bf8:	464d      	mov	r5, r9
   84bfa:	f8dd 9014 	ldr.w	r9, [sp, #20]
   84bfe:	e007      	b.n	84c10 <_vfiprintf_r+0x2b0>
   84c00:	f100 0e02 	add.w	lr, r0, #2
   84c04:	4608      	mov	r0, r1
   84c06:	f10c 0c08 	add.w	ip, ip, #8
   84c0a:	3c10      	subs	r4, #16
   84c0c:	2c10      	cmp	r4, #16
   84c0e:	dd13      	ble.n	84c38 <_vfiprintf_r+0x2d8>
   84c10:	1c41      	adds	r1, r0, #1
   84c12:	3210      	adds	r2, #16
   84c14:	2907      	cmp	r1, #7
   84c16:	920f      	str	r2, [sp, #60]	; 0x3c
   84c18:	f8cc 5000 	str.w	r5, [ip]
   84c1c:	f8cc 3004 	str.w	r3, [ip, #4]
   84c20:	910e      	str	r1, [sp, #56]	; 0x38
   84c22:	dded      	ble.n	84c00 <_vfiprintf_r+0x2a0>
   84c24:	2a00      	cmp	r2, #0
   84c26:	f040 82a5 	bne.w	85174 <_vfiprintf_r+0x814>
   84c2a:	3c10      	subs	r4, #16
   84c2c:	2c10      	cmp	r4, #16
   84c2e:	4610      	mov	r0, r2
   84c30:	f04f 0e01 	mov.w	lr, #1
   84c34:	46d4      	mov	ip, sl
   84c36:	dceb      	bgt.n	84c10 <_vfiprintf_r+0x2b0>
   84c38:	46a9      	mov	r9, r5
   84c3a:	4670      	mov	r0, lr
   84c3c:	4645      	mov	r5, r8
   84c3e:	46d8      	mov	r8, fp
   84c40:	46e3      	mov	fp, ip
   84c42:	4422      	add	r2, r4
   84c44:	2807      	cmp	r0, #7
   84c46:	920f      	str	r2, [sp, #60]	; 0x3c
   84c48:	f8cb 9000 	str.w	r9, [fp]
   84c4c:	f8cb 4004 	str.w	r4, [fp, #4]
   84c50:	900e      	str	r0, [sp, #56]	; 0x38
   84c52:	f300 836d 	bgt.w	85330 <_vfiprintf_r+0x9d0>
   84c56:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   84c5a:	f10b 0b08 	add.w	fp, fp, #8
   84c5e:	f100 0e01 	add.w	lr, r0, #1
   84c62:	2b00      	cmp	r3, #0
   84c64:	f040 82a7 	bne.w	851b6 <_vfiprintf_r+0x856>
   84c68:	9b07      	ldr	r3, [sp, #28]
   84c6a:	2b00      	cmp	r3, #0
   84c6c:	f000 82ba 	beq.w	851e4 <_vfiprintf_r+0x884>
   84c70:	3202      	adds	r2, #2
   84c72:	a90c      	add	r1, sp, #48	; 0x30
   84c74:	2302      	movs	r3, #2
   84c76:	f1be 0f07 	cmp.w	lr, #7
   84c7a:	920f      	str	r2, [sp, #60]	; 0x3c
   84c7c:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   84c80:	e88b 000a 	stmia.w	fp, {r1, r3}
   84c84:	f340 8370 	ble.w	85368 <_vfiprintf_r+0xa08>
   84c88:	2a00      	cmp	r2, #0
   84c8a:	f040 8400 	bne.w	8548e <_vfiprintf_r+0xb2e>
   84c8e:	9b08      	ldr	r3, [sp, #32]
   84c90:	f04f 0e01 	mov.w	lr, #1
   84c94:	2b80      	cmp	r3, #128	; 0x80
   84c96:	4610      	mov	r0, r2
   84c98:	46d3      	mov	fp, sl
   84c9a:	f040 82a7 	bne.w	851ec <_vfiprintf_r+0x88c>
   84c9e:	9b06      	ldr	r3, [sp, #24]
   84ca0:	1b5c      	subs	r4, r3, r5
   84ca2:	2c00      	cmp	r4, #0
   84ca4:	f340 82a2 	ble.w	851ec <_vfiprintf_r+0x88c>
   84ca8:	2c10      	cmp	r4, #16
   84caa:	f340 84f8 	ble.w	8569e <_vfiprintf_r+0xd3e>
   84cae:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 84e70 <_vfiprintf_r+0x510>
   84cb2:	46de      	mov	lr, fp
   84cb4:	2310      	movs	r3, #16
   84cb6:	46c3      	mov	fp, r8
   84cb8:	46a8      	mov	r8, r5
   84cba:	464d      	mov	r5, r9
   84cbc:	f8dd 9014 	ldr.w	r9, [sp, #20]
   84cc0:	e007      	b.n	84cd2 <_vfiprintf_r+0x372>
   84cc2:	f100 0c02 	add.w	ip, r0, #2
   84cc6:	4608      	mov	r0, r1
   84cc8:	f10e 0e08 	add.w	lr, lr, #8
   84ccc:	3c10      	subs	r4, #16
   84cce:	2c10      	cmp	r4, #16
   84cd0:	dd13      	ble.n	84cfa <_vfiprintf_r+0x39a>
   84cd2:	1c41      	adds	r1, r0, #1
   84cd4:	3210      	adds	r2, #16
   84cd6:	2907      	cmp	r1, #7
   84cd8:	920f      	str	r2, [sp, #60]	; 0x3c
   84cda:	f8ce 5000 	str.w	r5, [lr]
   84cde:	f8ce 3004 	str.w	r3, [lr, #4]
   84ce2:	910e      	str	r1, [sp, #56]	; 0x38
   84ce4:	dded      	ble.n	84cc2 <_vfiprintf_r+0x362>
   84ce6:	2a00      	cmp	r2, #0
   84ce8:	f040 830c 	bne.w	85304 <_vfiprintf_r+0x9a4>
   84cec:	3c10      	subs	r4, #16
   84cee:	2c10      	cmp	r4, #16
   84cf0:	f04f 0c01 	mov.w	ip, #1
   84cf4:	4610      	mov	r0, r2
   84cf6:	46d6      	mov	lr, sl
   84cf8:	dceb      	bgt.n	84cd2 <_vfiprintf_r+0x372>
   84cfa:	46a9      	mov	r9, r5
   84cfc:	4645      	mov	r5, r8
   84cfe:	46d8      	mov	r8, fp
   84d00:	46f3      	mov	fp, lr
   84d02:	4422      	add	r2, r4
   84d04:	f1bc 0f07 	cmp.w	ip, #7
   84d08:	920f      	str	r2, [sp, #60]	; 0x3c
   84d0a:	f8cb 9000 	str.w	r9, [fp]
   84d0e:	f8cb 4004 	str.w	r4, [fp, #4]
   84d12:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
   84d16:	f300 83c8 	bgt.w	854aa <_vfiprintf_r+0xb4a>
   84d1a:	9b01      	ldr	r3, [sp, #4]
   84d1c:	9903      	ldr	r1, [sp, #12]
   84d1e:	f10b 0b08 	add.w	fp, fp, #8
   84d22:	1a5c      	subs	r4, r3, r1
   84d24:	2c00      	cmp	r4, #0
   84d26:	f10c 0e01 	add.w	lr, ip, #1
   84d2a:	4660      	mov	r0, ip
   84d2c:	f300 8264 	bgt.w	851f8 <_vfiprintf_r+0x898>
   84d30:	9903      	ldr	r1, [sp, #12]
   84d32:	f1be 0f07 	cmp.w	lr, #7
   84d36:	440a      	add	r2, r1
   84d38:	920f      	str	r2, [sp, #60]	; 0x3c
   84d3a:	f8cb 7000 	str.w	r7, [fp]
   84d3e:	f8cb 1004 	str.w	r1, [fp, #4]
   84d42:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   84d46:	f340 82c5 	ble.w	852d4 <_vfiprintf_r+0x974>
   84d4a:	2a00      	cmp	r2, #0
   84d4c:	f040 8332 	bne.w	853b4 <_vfiprintf_r+0xa54>
   84d50:	0770      	lsls	r0, r6, #29
   84d52:	920e      	str	r2, [sp, #56]	; 0x38
   84d54:	d538      	bpl.n	84dc8 <_vfiprintf_r+0x468>
   84d56:	9b06      	ldr	r3, [sp, #24]
   84d58:	1b5c      	subs	r4, r3, r5
   84d5a:	2c00      	cmp	r4, #0
   84d5c:	dd34      	ble.n	84dc8 <_vfiprintf_r+0x468>
   84d5e:	46d3      	mov	fp, sl
   84d60:	2c10      	cmp	r4, #16
   84d62:	f340 8496 	ble.w	85692 <_vfiprintf_r+0xd32>
   84d66:	f8df 9104 	ldr.w	r9, [pc, #260]	; 84e6c <_vfiprintf_r+0x50c>
   84d6a:	990e      	ldr	r1, [sp, #56]	; 0x38
   84d6c:	464f      	mov	r7, r9
   84d6e:	2610      	movs	r6, #16
   84d70:	f8dd 9014 	ldr.w	r9, [sp, #20]
   84d74:	e006      	b.n	84d84 <_vfiprintf_r+0x424>
   84d76:	1c88      	adds	r0, r1, #2
   84d78:	4619      	mov	r1, r3
   84d7a:	f10b 0b08 	add.w	fp, fp, #8
   84d7e:	3c10      	subs	r4, #16
   84d80:	2c10      	cmp	r4, #16
   84d82:	dd13      	ble.n	84dac <_vfiprintf_r+0x44c>
   84d84:	1c4b      	adds	r3, r1, #1
   84d86:	3210      	adds	r2, #16
   84d88:	2b07      	cmp	r3, #7
   84d8a:	920f      	str	r2, [sp, #60]	; 0x3c
   84d8c:	f8cb 7000 	str.w	r7, [fp]
   84d90:	f8cb 6004 	str.w	r6, [fp, #4]
   84d94:	930e      	str	r3, [sp, #56]	; 0x38
   84d96:	ddee      	ble.n	84d76 <_vfiprintf_r+0x416>
   84d98:	2a00      	cmp	r2, #0
   84d9a:	f040 8285 	bne.w	852a8 <_vfiprintf_r+0x948>
   84d9e:	3c10      	subs	r4, #16
   84da0:	2c10      	cmp	r4, #16
   84da2:	f04f 0001 	mov.w	r0, #1
   84da6:	4611      	mov	r1, r2
   84da8:	46d3      	mov	fp, sl
   84daa:	dceb      	bgt.n	84d84 <_vfiprintf_r+0x424>
   84dac:	46b9      	mov	r9, r7
   84dae:	4422      	add	r2, r4
   84db0:	2807      	cmp	r0, #7
   84db2:	920f      	str	r2, [sp, #60]	; 0x3c
   84db4:	f8cb 9000 	str.w	r9, [fp]
   84db8:	f8cb 4004 	str.w	r4, [fp, #4]
   84dbc:	900e      	str	r0, [sp, #56]	; 0x38
   84dbe:	f340 8292 	ble.w	852e6 <_vfiprintf_r+0x986>
   84dc2:	2a00      	cmp	r2, #0
   84dc4:	f040 840c 	bne.w	855e0 <_vfiprintf_r+0xc80>
   84dc8:	9b02      	ldr	r3, [sp, #8]
   84dca:	9a06      	ldr	r2, [sp, #24]
   84dcc:	42aa      	cmp	r2, r5
   84dce:	bfac      	ite	ge
   84dd0:	189b      	addge	r3, r3, r2
   84dd2:	195b      	addlt	r3, r3, r5
   84dd4:	9302      	str	r3, [sp, #8]
   84dd6:	e290      	b.n	852fa <_vfiprintf_r+0x99a>
   84dd8:	f046 0680 	orr.w	r6, r6, #128	; 0x80
   84ddc:	f898 3000 	ldrb.w	r3, [r8]
   84de0:	e625      	b.n	84a2e <_vfiprintf_r+0xce>
   84de2:	9406      	str	r4, [sp, #24]
   84de4:	2900      	cmp	r1, #0
   84de6:	f040 8485 	bne.w	856f4 <_vfiprintf_r+0xd94>
   84dea:	f046 0610 	orr.w	r6, r6, #16
   84dee:	06b3      	lsls	r3, r6, #26
   84df0:	f140 8304 	bpl.w	853fc <_vfiprintf_r+0xa9c>
   84df4:	9904      	ldr	r1, [sp, #16]
   84df6:	3107      	adds	r1, #7
   84df8:	f021 0107 	bic.w	r1, r1, #7
   84dfc:	e9d1 2300 	ldrd	r2, r3, [r1]
   84e00:	4614      	mov	r4, r2
   84e02:	461d      	mov	r5, r3
   84e04:	3108      	adds	r1, #8
   84e06:	9104      	str	r1, [sp, #16]
   84e08:	2a00      	cmp	r2, #0
   84e0a:	f173 0300 	sbcs.w	r3, r3, #0
   84e0e:	f2c0 837c 	blt.w	8550a <_vfiprintf_r+0xbaa>
   84e12:	9b01      	ldr	r3, [sp, #4]
   84e14:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
   84e18:	2b00      	cmp	r3, #0
   84e1a:	f2c0 830b 	blt.w	85434 <_vfiprintf_r+0xad4>
   84e1e:	ea54 0305 	orrs.w	r3, r4, r5
   84e22:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   84e26:	f000 80de 	beq.w	84fe6 <_vfiprintf_r+0x686>
   84e2a:	2d00      	cmp	r5, #0
   84e2c:	bf08      	it	eq
   84e2e:	2c0a      	cmpeq	r4, #10
   84e30:	f0c0 80de 	bcc.w	84ff0 <_vfiprintf_r+0x690>
   84e34:	4657      	mov	r7, sl
   84e36:	4620      	mov	r0, r4
   84e38:	4629      	mov	r1, r5
   84e3a:	220a      	movs	r2, #10
   84e3c:	2300      	movs	r3, #0
   84e3e:	f002 f9f3 	bl	87228 <__aeabi_uldivmod>
   84e42:	3230      	adds	r2, #48	; 0x30
   84e44:	f807 2d01 	strb.w	r2, [r7, #-1]!
   84e48:	4620      	mov	r0, r4
   84e4a:	4629      	mov	r1, r5
   84e4c:	2300      	movs	r3, #0
   84e4e:	220a      	movs	r2, #10
   84e50:	f002 f9ea 	bl	87228 <__aeabi_uldivmod>
   84e54:	4604      	mov	r4, r0
   84e56:	460d      	mov	r5, r1
   84e58:	ea54 0305 	orrs.w	r3, r4, r5
   84e5c:	d1eb      	bne.n	84e36 <_vfiprintf_r+0x4d6>
   84e5e:	ebc7 030a 	rsb	r3, r7, sl
   84e62:	9303      	str	r3, [sp, #12]
   84e64:	e6a2      	b.n	84bac <_vfiprintf_r+0x24c>
   84e66:	bf00      	nop
   84e68:	00087630 	.word	0x00087630
   84e6c:	0008764c 	.word	0x0008764c
   84e70:	0008760c 	.word	0x0008760c
   84e74:	9406      	str	r4, [sp, #24]
   84e76:	2900      	cmp	r1, #0
   84e78:	f040 8438 	bne.w	856ec <_vfiprintf_r+0xd8c>
   84e7c:	f046 0610 	orr.w	r6, r6, #16
   84e80:	f016 0320 	ands.w	r3, r6, #32
   84e84:	f000 82a1 	beq.w	853ca <_vfiprintf_r+0xa6a>
   84e88:	f04f 0200 	mov.w	r2, #0
   84e8c:	9b04      	ldr	r3, [sp, #16]
   84e8e:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
   84e92:	3307      	adds	r3, #7
   84e94:	f023 0307 	bic.w	r3, r3, #7
   84e98:	f103 0208 	add.w	r2, r3, #8
   84e9c:	e9d3 4500 	ldrd	r4, r5, [r3]
   84ea0:	9b01      	ldr	r3, [sp, #4]
   84ea2:	9204      	str	r2, [sp, #16]
   84ea4:	2b00      	cmp	r3, #0
   84ea6:	db0a      	blt.n	84ebe <_vfiprintf_r+0x55e>
   84ea8:	ea54 0305 	orrs.w	r3, r4, r5
   84eac:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   84eb0:	d105      	bne.n	84ebe <_vfiprintf_r+0x55e>
   84eb2:	9b01      	ldr	r3, [sp, #4]
   84eb4:	2b00      	cmp	r3, #0
   84eb6:	f000 8427 	beq.w	85708 <_vfiprintf_r+0xda8>
   84eba:	2400      	movs	r4, #0
   84ebc:	2500      	movs	r5, #0
   84ebe:	f04f 0900 	mov.w	r9, #0
   84ec2:	4657      	mov	r7, sl
   84ec4:	08e2      	lsrs	r2, r4, #3
   84ec6:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   84eca:	08e9      	lsrs	r1, r5, #3
   84ecc:	f004 0307 	and.w	r3, r4, #7
   84ed0:	460d      	mov	r5, r1
   84ed2:	4614      	mov	r4, r2
   84ed4:	3330      	adds	r3, #48	; 0x30
   84ed6:	ea54 0205 	orrs.w	r2, r4, r5
   84eda:	f807 3d01 	strb.w	r3, [r7, #-1]!
   84ede:	d1f1      	bne.n	84ec4 <_vfiprintf_r+0x564>
   84ee0:	07f4      	lsls	r4, r6, #31
   84ee2:	d5bc      	bpl.n	84e5e <_vfiprintf_r+0x4fe>
   84ee4:	2b30      	cmp	r3, #48	; 0x30
   84ee6:	d0ba      	beq.n	84e5e <_vfiprintf_r+0x4fe>
   84ee8:	2230      	movs	r2, #48	; 0x30
   84eea:	1e7b      	subs	r3, r7, #1
   84eec:	f807 2c01 	strb.w	r2, [r7, #-1]
   84ef0:	ebc3 020a 	rsb	r2, r3, sl
   84ef4:	9203      	str	r2, [sp, #12]
   84ef6:	461f      	mov	r7, r3
   84ef8:	e658      	b.n	84bac <_vfiprintf_r+0x24c>
   84efa:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   84efe:	2400      	movs	r4, #0
   84f00:	f818 3b01 	ldrb.w	r3, [r8], #1
   84f04:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   84f08:	eb02 0444 	add.w	r4, r2, r4, lsl #1
   84f0c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   84f10:	2a09      	cmp	r2, #9
   84f12:	d9f5      	bls.n	84f00 <_vfiprintf_r+0x5a0>
   84f14:	e58d      	b.n	84a32 <_vfiprintf_r+0xd2>
   84f16:	f898 3000 	ldrb.w	r3, [r8]
   84f1a:	2101      	movs	r1, #1
   84f1c:	202b      	movs	r0, #43	; 0x2b
   84f1e:	e586      	b.n	84a2e <_vfiprintf_r+0xce>
   84f20:	f898 3000 	ldrb.w	r3, [r8]
   84f24:	f108 0501 	add.w	r5, r8, #1
   84f28:	2b2a      	cmp	r3, #42	; 0x2a
   84f2a:	f000 83cc 	beq.w	856c6 <_vfiprintf_r+0xd66>
   84f2e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   84f32:	2a09      	cmp	r2, #9
   84f34:	46a8      	mov	r8, r5
   84f36:	bf98      	it	ls
   84f38:	2500      	movls	r5, #0
   84f3a:	f200 83b5 	bhi.w	856a8 <_vfiprintf_r+0xd48>
   84f3e:	f818 3b01 	ldrb.w	r3, [r8], #1
   84f42:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   84f46:	eb02 0545 	add.w	r5, r2, r5, lsl #1
   84f4a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   84f4e:	2a09      	cmp	r2, #9
   84f50:	d9f5      	bls.n	84f3e <_vfiprintf_r+0x5de>
   84f52:	ea45 72e5 	orr.w	r2, r5, r5, asr #31
   84f56:	9201      	str	r2, [sp, #4]
   84f58:	e56b      	b.n	84a32 <_vfiprintf_r+0xd2>
   84f5a:	9406      	str	r4, [sp, #24]
   84f5c:	2900      	cmp	r1, #0
   84f5e:	d08f      	beq.n	84e80 <_vfiprintf_r+0x520>
   84f60:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   84f64:	e78c      	b.n	84e80 <_vfiprintf_r+0x520>
   84f66:	f04f 0300 	mov.w	r3, #0
   84f6a:	9a04      	ldr	r2, [sp, #16]
   84f6c:	9406      	str	r4, [sp, #24]
   84f6e:	6817      	ldr	r7, [r2, #0]
   84f70:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   84f74:	1d14      	adds	r4, r2, #4
   84f76:	9b01      	ldr	r3, [sp, #4]
   84f78:	2f00      	cmp	r7, #0
   84f7a:	f000 837f 	beq.w	8567c <_vfiprintf_r+0xd1c>
   84f7e:	2b00      	cmp	r3, #0
   84f80:	f2c0 8353 	blt.w	8562a <_vfiprintf_r+0xcca>
   84f84:	461a      	mov	r2, r3
   84f86:	2100      	movs	r1, #0
   84f88:	4638      	mov	r0, r7
   84f8a:	f001 fc4d 	bl	86828 <memchr>
   84f8e:	2800      	cmp	r0, #0
   84f90:	f000 838e 	beq.w	856b0 <_vfiprintf_r+0xd50>
   84f94:	1bc3      	subs	r3, r0, r7
   84f96:	9303      	str	r3, [sp, #12]
   84f98:	2300      	movs	r3, #0
   84f9a:	9404      	str	r4, [sp, #16]
   84f9c:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
   84fa0:	9301      	str	r3, [sp, #4]
   84fa2:	e603      	b.n	84bac <_vfiprintf_r+0x24c>
   84fa4:	9406      	str	r4, [sp, #24]
   84fa6:	2900      	cmp	r1, #0
   84fa8:	f040 839d 	bne.w	856e6 <_vfiprintf_r+0xd86>
   84fac:	f016 0920 	ands.w	r9, r6, #32
   84fb0:	d134      	bne.n	8501c <_vfiprintf_r+0x6bc>
   84fb2:	f016 0310 	ands.w	r3, r6, #16
   84fb6:	d103      	bne.n	84fc0 <_vfiprintf_r+0x660>
   84fb8:	f016 0940 	ands.w	r9, r6, #64	; 0x40
   84fbc:	f040 831f 	bne.w	855fe <_vfiprintf_r+0xc9e>
   84fc0:	9a04      	ldr	r2, [sp, #16]
   84fc2:	2500      	movs	r5, #0
   84fc4:	4613      	mov	r3, r2
   84fc6:	6814      	ldr	r4, [r2, #0]
   84fc8:	9a01      	ldr	r2, [sp, #4]
   84fca:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
   84fce:	2a00      	cmp	r2, #0
   84fd0:	f103 0304 	add.w	r3, r3, #4
   84fd4:	f2c0 8327 	blt.w	85626 <_vfiprintf_r+0xcc6>
   84fd8:	ea54 0205 	orrs.w	r2, r4, r5
   84fdc:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   84fe0:	9304      	str	r3, [sp, #16]
   84fe2:	f47f af22 	bne.w	84e2a <_vfiprintf_r+0x4ca>
   84fe6:	9b01      	ldr	r3, [sp, #4]
   84fe8:	2b00      	cmp	r3, #0
   84fea:	f43f addb 	beq.w	84ba4 <_vfiprintf_r+0x244>
   84fee:	2400      	movs	r4, #0
   84ff0:	af2a      	add	r7, sp, #168	; 0xa8
   84ff2:	3430      	adds	r4, #48	; 0x30
   84ff4:	f807 4d41 	strb.w	r4, [r7, #-65]!
   84ff8:	ebc7 030a 	rsb	r3, r7, sl
   84ffc:	9303      	str	r3, [sp, #12]
   84ffe:	e5d5      	b.n	84bac <_vfiprintf_r+0x24c>
   85000:	f046 0620 	orr.w	r6, r6, #32
   85004:	f898 3000 	ldrb.w	r3, [r8]
   85008:	e511      	b.n	84a2e <_vfiprintf_r+0xce>
   8500a:	9406      	str	r4, [sp, #24]
   8500c:	2900      	cmp	r1, #0
   8500e:	f040 8375 	bne.w	856fc <_vfiprintf_r+0xd9c>
   85012:	f046 0610 	orr.w	r6, r6, #16
   85016:	f016 0920 	ands.w	r9, r6, #32
   8501a:	d0ca      	beq.n	84fb2 <_vfiprintf_r+0x652>
   8501c:	f04f 0200 	mov.w	r2, #0
   85020:	9b04      	ldr	r3, [sp, #16]
   85022:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
   85026:	3307      	adds	r3, #7
   85028:	f023 0307 	bic.w	r3, r3, #7
   8502c:	f103 0208 	add.w	r2, r3, #8
   85030:	e9d3 4500 	ldrd	r4, r5, [r3]
   85034:	9b01      	ldr	r3, [sp, #4]
   85036:	9204      	str	r2, [sp, #16]
   85038:	2b00      	cmp	r3, #0
   8503a:	f2c0 81f9 	blt.w	85430 <_vfiprintf_r+0xad0>
   8503e:	ea54 0305 	orrs.w	r3, r4, r5
   85042:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   85046:	f04f 0900 	mov.w	r9, #0
   8504a:	f47f aeee 	bne.w	84e2a <_vfiprintf_r+0x4ca>
   8504e:	e7ca      	b.n	84fe6 <_vfiprintf_r+0x686>
   85050:	9406      	str	r4, [sp, #24]
   85052:	2900      	cmp	r1, #0
   85054:	f040 8355 	bne.w	85702 <_vfiprintf_r+0xda2>
   85058:	06b2      	lsls	r2, r6, #26
   8505a:	48b2      	ldr	r0, [pc, #712]	; (85324 <_vfiprintf_r+0x9c4>)
   8505c:	d541      	bpl.n	850e2 <_vfiprintf_r+0x782>
   8505e:	9a04      	ldr	r2, [sp, #16]
   85060:	3207      	adds	r2, #7
   85062:	f022 0207 	bic.w	r2, r2, #7
   85066:	f102 0108 	add.w	r1, r2, #8
   8506a:	9104      	str	r1, [sp, #16]
   8506c:	e9d2 4500 	ldrd	r4, r5, [r2]
   85070:	f016 0901 	ands.w	r9, r6, #1
   85074:	f000 817e 	beq.w	85374 <_vfiprintf_r+0xa14>
   85078:	ea54 0205 	orrs.w	r2, r4, r5
   8507c:	f040 822b 	bne.w	854d6 <_vfiprintf_r+0xb76>
   85080:	f04f 0300 	mov.w	r3, #0
   85084:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   85088:	9b01      	ldr	r3, [sp, #4]
   8508a:	2b00      	cmp	r3, #0
   8508c:	f2c0 82f3 	blt.w	85676 <_vfiprintf_r+0xd16>
   85090:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   85094:	e581      	b.n	84b9a <_vfiprintf_r+0x23a>
   85096:	9a04      	ldr	r2, [sp, #16]
   85098:	f04f 0100 	mov.w	r1, #0
   8509c:	6813      	ldr	r3, [r2, #0]
   8509e:	2501      	movs	r5, #1
   850a0:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   850a4:	4613      	mov	r3, r2
   850a6:	3304      	adds	r3, #4
   850a8:	9406      	str	r4, [sp, #24]
   850aa:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
   850ae:	9304      	str	r3, [sp, #16]
   850b0:	9503      	str	r5, [sp, #12]
   850b2:	af10      	add	r7, sp, #64	; 0x40
   850b4:	2300      	movs	r3, #0
   850b6:	9301      	str	r3, [sp, #4]
   850b8:	e582      	b.n	84bc0 <_vfiprintf_r+0x260>
   850ba:	f898 3000 	ldrb.w	r3, [r8]
   850be:	2800      	cmp	r0, #0
   850c0:	f47f acb5 	bne.w	84a2e <_vfiprintf_r+0xce>
   850c4:	2101      	movs	r1, #1
   850c6:	2020      	movs	r0, #32
   850c8:	e4b1      	b.n	84a2e <_vfiprintf_r+0xce>
   850ca:	f046 0601 	orr.w	r6, r6, #1
   850ce:	f898 3000 	ldrb.w	r3, [r8]
   850d2:	e4ac      	b.n	84a2e <_vfiprintf_r+0xce>
   850d4:	9406      	str	r4, [sp, #24]
   850d6:	2900      	cmp	r1, #0
   850d8:	f040 832a 	bne.w	85730 <_vfiprintf_r+0xdd0>
   850dc:	06b2      	lsls	r2, r6, #26
   850de:	4892      	ldr	r0, [pc, #584]	; (85328 <_vfiprintf_r+0x9c8>)
   850e0:	d4bd      	bmi.n	8505e <_vfiprintf_r+0x6fe>
   850e2:	9904      	ldr	r1, [sp, #16]
   850e4:	06f7      	lsls	r7, r6, #27
   850e6:	460a      	mov	r2, r1
   850e8:	f100 819d 	bmi.w	85426 <_vfiprintf_r+0xac6>
   850ec:	0675      	lsls	r5, r6, #25
   850ee:	f140 819a 	bpl.w	85426 <_vfiprintf_r+0xac6>
   850f2:	3204      	adds	r2, #4
   850f4:	880c      	ldrh	r4, [r1, #0]
   850f6:	9204      	str	r2, [sp, #16]
   850f8:	2500      	movs	r5, #0
   850fa:	e7b9      	b.n	85070 <_vfiprintf_r+0x710>
   850fc:	f046 0640 	orr.w	r6, r6, #64	; 0x40
   85100:	f898 3000 	ldrb.w	r3, [r8]
   85104:	e493      	b.n	84a2e <_vfiprintf_r+0xce>
   85106:	f898 3000 	ldrb.w	r3, [r8]
   8510a:	2b6c      	cmp	r3, #108	; 0x6c
   8510c:	bf03      	ittte	eq
   8510e:	f898 3001 	ldrbeq.w	r3, [r8, #1]
   85112:	f046 0620 	orreq.w	r6, r6, #32
   85116:	f108 0801 	addeq.w	r8, r8, #1
   8511a:	f046 0610 	orrne.w	r6, r6, #16
   8511e:	e486      	b.n	84a2e <_vfiprintf_r+0xce>
   85120:	2900      	cmp	r1, #0
   85122:	f040 8302 	bne.w	8572a <_vfiprintf_r+0xdca>
   85126:	06b4      	lsls	r4, r6, #26
   85128:	f140 8220 	bpl.w	8556c <_vfiprintf_r+0xc0c>
   8512c:	9a04      	ldr	r2, [sp, #16]
   8512e:	4613      	mov	r3, r2
   85130:	3304      	adds	r3, #4
   85132:	9304      	str	r3, [sp, #16]
   85134:	9b02      	ldr	r3, [sp, #8]
   85136:	6811      	ldr	r1, [r2, #0]
   85138:	17dd      	asrs	r5, r3, #31
   8513a:	461a      	mov	r2, r3
   8513c:	462b      	mov	r3, r5
   8513e:	e9c1 2300 	strd	r2, r3, [r1]
   85142:	e43e      	b.n	849c2 <_vfiprintf_r+0x62>
   85144:	9406      	str	r4, [sp, #24]
   85146:	2900      	cmp	r1, #0
   85148:	f43f ae51 	beq.w	84dee <_vfiprintf_r+0x48e>
   8514c:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   85150:	e64d      	b.n	84dee <_vfiprintf_r+0x48e>
   85152:	9406      	str	r4, [sp, #24]
   85154:	2900      	cmp	r1, #0
   85156:	f040 82e5 	bne.w	85724 <_vfiprintf_r+0xdc4>
   8515a:	2b00      	cmp	r3, #0
   8515c:	f000 8094 	beq.w	85288 <_vfiprintf_r+0x928>
   85160:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
   85164:	f04f 0300 	mov.w	r3, #0
   85168:	2501      	movs	r5, #1
   8516a:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   8516e:	9503      	str	r5, [sp, #12]
   85170:	af10      	add	r7, sp, #64	; 0x40
   85172:	e79f      	b.n	850b4 <_vfiprintf_r+0x754>
   85174:	aa0d      	add	r2, sp, #52	; 0x34
   85176:	9900      	ldr	r1, [sp, #0]
   85178:	4648      	mov	r0, r9
   8517a:	9309      	str	r3, [sp, #36]	; 0x24
   8517c:	f7ff fbb4 	bl	848e8 <__sprint_r.part.0>
   85180:	2800      	cmp	r0, #0
   85182:	f040 8088 	bne.w	85296 <_vfiprintf_r+0x936>
   85186:	980e      	ldr	r0, [sp, #56]	; 0x38
   85188:	46d4      	mov	ip, sl
   8518a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8518c:	f100 0e01 	add.w	lr, r0, #1
   85190:	9b09      	ldr	r3, [sp, #36]	; 0x24
   85192:	e53a      	b.n	84c0a <_vfiprintf_r+0x2aa>
   85194:	aa0d      	add	r2, sp, #52	; 0x34
   85196:	9900      	ldr	r1, [sp, #0]
   85198:	9805      	ldr	r0, [sp, #20]
   8519a:	f7ff fba5 	bl	848e8 <__sprint_r.part.0>
   8519e:	2800      	cmp	r0, #0
   851a0:	d179      	bne.n	85296 <_vfiprintf_r+0x936>
   851a2:	46d3      	mov	fp, sl
   851a4:	980e      	ldr	r0, [sp, #56]	; 0x38
   851a6:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   851aa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   851ac:	f100 0e01 	add.w	lr, r0, #1
   851b0:	2b00      	cmp	r3, #0
   851b2:	f43f ad59 	beq.w	84c68 <_vfiprintf_r+0x308>
   851b6:	3201      	adds	r2, #1
   851b8:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
   851bc:	2301      	movs	r3, #1
   851be:	f1be 0f07 	cmp.w	lr, #7
   851c2:	920f      	str	r2, [sp, #60]	; 0x3c
   851c4:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   851c8:	e88b 000a 	stmia.w	fp, {r1, r3}
   851cc:	f340 80c0 	ble.w	85350 <_vfiprintf_r+0x9f0>
   851d0:	2a00      	cmp	r2, #0
   851d2:	f040 814d 	bne.w	85470 <_vfiprintf_r+0xb10>
   851d6:	9907      	ldr	r1, [sp, #28]
   851d8:	2900      	cmp	r1, #0
   851da:	f040 80bf 	bne.w	8535c <_vfiprintf_r+0x9fc>
   851de:	469e      	mov	lr, r3
   851e0:	4610      	mov	r0, r2
   851e2:	46d3      	mov	fp, sl
   851e4:	9b08      	ldr	r3, [sp, #32]
   851e6:	2b80      	cmp	r3, #128	; 0x80
   851e8:	f43f ad59 	beq.w	84c9e <_vfiprintf_r+0x33e>
   851ec:	9b01      	ldr	r3, [sp, #4]
   851ee:	9903      	ldr	r1, [sp, #12]
   851f0:	1a5c      	subs	r4, r3, r1
   851f2:	2c00      	cmp	r4, #0
   851f4:	f77f ad9c 	ble.w	84d30 <_vfiprintf_r+0x3d0>
   851f8:	2c10      	cmp	r4, #16
   851fa:	f8df 9130 	ldr.w	r9, [pc, #304]	; 8532c <_vfiprintf_r+0x9cc>
   851fe:	dd25      	ble.n	8524c <_vfiprintf_r+0x8ec>
   85200:	46dc      	mov	ip, fp
   85202:	2310      	movs	r3, #16
   85204:	46c3      	mov	fp, r8
   85206:	46a8      	mov	r8, r5
   85208:	464d      	mov	r5, r9
   8520a:	f8dd 9014 	ldr.w	r9, [sp, #20]
   8520e:	e007      	b.n	85220 <_vfiprintf_r+0x8c0>
   85210:	f100 0e02 	add.w	lr, r0, #2
   85214:	4608      	mov	r0, r1
   85216:	f10c 0c08 	add.w	ip, ip, #8
   8521a:	3c10      	subs	r4, #16
   8521c:	2c10      	cmp	r4, #16
   8521e:	dd11      	ble.n	85244 <_vfiprintf_r+0x8e4>
   85220:	1c41      	adds	r1, r0, #1
   85222:	3210      	adds	r2, #16
   85224:	2907      	cmp	r1, #7
   85226:	920f      	str	r2, [sp, #60]	; 0x3c
   85228:	f8cc 5000 	str.w	r5, [ip]
   8522c:	f8cc 3004 	str.w	r3, [ip, #4]
   85230:	910e      	str	r1, [sp, #56]	; 0x38
   85232:	dded      	ble.n	85210 <_vfiprintf_r+0x8b0>
   85234:	b9d2      	cbnz	r2, 8526c <_vfiprintf_r+0x90c>
   85236:	3c10      	subs	r4, #16
   85238:	2c10      	cmp	r4, #16
   8523a:	f04f 0e01 	mov.w	lr, #1
   8523e:	4610      	mov	r0, r2
   85240:	46d4      	mov	ip, sl
   85242:	dced      	bgt.n	85220 <_vfiprintf_r+0x8c0>
   85244:	46a9      	mov	r9, r5
   85246:	4645      	mov	r5, r8
   85248:	46d8      	mov	r8, fp
   8524a:	46e3      	mov	fp, ip
   8524c:	4422      	add	r2, r4
   8524e:	f1be 0f07 	cmp.w	lr, #7
   85252:	920f      	str	r2, [sp, #60]	; 0x3c
   85254:	f8cb 9000 	str.w	r9, [fp]
   85258:	f8cb 4004 	str.w	r4, [fp, #4]
   8525c:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   85260:	dc2e      	bgt.n	852c0 <_vfiprintf_r+0x960>
   85262:	f10b 0b08 	add.w	fp, fp, #8
   85266:	f10e 0e01 	add.w	lr, lr, #1
   8526a:	e561      	b.n	84d30 <_vfiprintf_r+0x3d0>
   8526c:	aa0d      	add	r2, sp, #52	; 0x34
   8526e:	9900      	ldr	r1, [sp, #0]
   85270:	4648      	mov	r0, r9
   85272:	9301      	str	r3, [sp, #4]
   85274:	f7ff fb38 	bl	848e8 <__sprint_r.part.0>
   85278:	b968      	cbnz	r0, 85296 <_vfiprintf_r+0x936>
   8527a:	980e      	ldr	r0, [sp, #56]	; 0x38
   8527c:	46d4      	mov	ip, sl
   8527e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   85280:	f100 0e01 	add.w	lr, r0, #1
   85284:	9b01      	ldr	r3, [sp, #4]
   85286:	e7c8      	b.n	8521a <_vfiprintf_r+0x8ba>
   85288:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8528a:	b123      	cbz	r3, 85296 <_vfiprintf_r+0x936>
   8528c:	9805      	ldr	r0, [sp, #20]
   8528e:	aa0d      	add	r2, sp, #52	; 0x34
   85290:	9900      	ldr	r1, [sp, #0]
   85292:	f7ff fb29 	bl	848e8 <__sprint_r.part.0>
   85296:	9b00      	ldr	r3, [sp, #0]
   85298:	899b      	ldrh	r3, [r3, #12]
   8529a:	065a      	lsls	r2, r3, #25
   8529c:	f100 817b 	bmi.w	85596 <_vfiprintf_r+0xc36>
   852a0:	9802      	ldr	r0, [sp, #8]
   852a2:	b02b      	add	sp, #172	; 0xac
   852a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   852a8:	aa0d      	add	r2, sp, #52	; 0x34
   852aa:	9900      	ldr	r1, [sp, #0]
   852ac:	4648      	mov	r0, r9
   852ae:	f7ff fb1b 	bl	848e8 <__sprint_r.part.0>
   852b2:	2800      	cmp	r0, #0
   852b4:	d1ef      	bne.n	85296 <_vfiprintf_r+0x936>
   852b6:	990e      	ldr	r1, [sp, #56]	; 0x38
   852b8:	46d3      	mov	fp, sl
   852ba:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   852bc:	1c48      	adds	r0, r1, #1
   852be:	e55e      	b.n	84d7e <_vfiprintf_r+0x41e>
   852c0:	2a00      	cmp	r2, #0
   852c2:	f040 80fa 	bne.w	854ba <_vfiprintf_r+0xb5a>
   852c6:	46d3      	mov	fp, sl
   852c8:	9a03      	ldr	r2, [sp, #12]
   852ca:	2301      	movs	r3, #1
   852cc:	921b      	str	r2, [sp, #108]	; 0x6c
   852ce:	920f      	str	r2, [sp, #60]	; 0x3c
   852d0:	971a      	str	r7, [sp, #104]	; 0x68
   852d2:	930e      	str	r3, [sp, #56]	; 0x38
   852d4:	f10b 0b08 	add.w	fp, fp, #8
   852d8:	0771      	lsls	r1, r6, #29
   852da:	d504      	bpl.n	852e6 <_vfiprintf_r+0x986>
   852dc:	9b06      	ldr	r3, [sp, #24]
   852de:	1b5c      	subs	r4, r3, r5
   852e0:	2c00      	cmp	r4, #0
   852e2:	f73f ad3d 	bgt.w	84d60 <_vfiprintf_r+0x400>
   852e6:	9b02      	ldr	r3, [sp, #8]
   852e8:	9906      	ldr	r1, [sp, #24]
   852ea:	42a9      	cmp	r1, r5
   852ec:	bfac      	ite	ge
   852ee:	185b      	addge	r3, r3, r1
   852f0:	195b      	addlt	r3, r3, r5
   852f2:	9302      	str	r3, [sp, #8]
   852f4:	2a00      	cmp	r2, #0
   852f6:	f040 80ad 	bne.w	85454 <_vfiprintf_r+0xaf4>
   852fa:	2300      	movs	r3, #0
   852fc:	930e      	str	r3, [sp, #56]	; 0x38
   852fe:	46d3      	mov	fp, sl
   85300:	f7ff bb5f 	b.w	849c2 <_vfiprintf_r+0x62>
   85304:	aa0d      	add	r2, sp, #52	; 0x34
   85306:	9900      	ldr	r1, [sp, #0]
   85308:	4648      	mov	r0, r9
   8530a:	9307      	str	r3, [sp, #28]
   8530c:	f7ff faec 	bl	848e8 <__sprint_r.part.0>
   85310:	2800      	cmp	r0, #0
   85312:	d1c0      	bne.n	85296 <_vfiprintf_r+0x936>
   85314:	980e      	ldr	r0, [sp, #56]	; 0x38
   85316:	46d6      	mov	lr, sl
   85318:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8531a:	f100 0c01 	add.w	ip, r0, #1
   8531e:	9b07      	ldr	r3, [sp, #28]
   85320:	e4d4      	b.n	84ccc <_vfiprintf_r+0x36c>
   85322:	bf00      	nop
   85324:	0008761c 	.word	0x0008761c
   85328:	00087630 	.word	0x00087630
   8532c:	0008760c 	.word	0x0008760c
   85330:	2a00      	cmp	r2, #0
   85332:	f47f af2f 	bne.w	85194 <_vfiprintf_r+0x834>
   85336:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   8533a:	2b00      	cmp	r3, #0
   8533c:	f000 80f3 	beq.w	85526 <_vfiprintf_r+0xbc6>
   85340:	2301      	movs	r3, #1
   85342:	461a      	mov	r2, r3
   85344:	469e      	mov	lr, r3
   85346:	46d3      	mov	fp, sl
   85348:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
   8534c:	931b      	str	r3, [sp, #108]	; 0x6c
   8534e:	911a      	str	r1, [sp, #104]	; 0x68
   85350:	4670      	mov	r0, lr
   85352:	f10b 0b08 	add.w	fp, fp, #8
   85356:	f10e 0e01 	add.w	lr, lr, #1
   8535a:	e485      	b.n	84c68 <_vfiprintf_r+0x308>
   8535c:	469e      	mov	lr, r3
   8535e:	46d3      	mov	fp, sl
   85360:	a90c      	add	r1, sp, #48	; 0x30
   85362:	2202      	movs	r2, #2
   85364:	911a      	str	r1, [sp, #104]	; 0x68
   85366:	921b      	str	r2, [sp, #108]	; 0x6c
   85368:	4670      	mov	r0, lr
   8536a:	f10b 0b08 	add.w	fp, fp, #8
   8536e:	f10e 0e01 	add.w	lr, lr, #1
   85372:	e737      	b.n	851e4 <_vfiprintf_r+0x884>
   85374:	9b01      	ldr	r3, [sp, #4]
   85376:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
   8537a:	2b00      	cmp	r3, #0
   8537c:	f2c0 811b 	blt.w	855b6 <_vfiprintf_r+0xc56>
   85380:	ea54 0305 	orrs.w	r3, r4, r5
   85384:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   85388:	f43f ac07 	beq.w	84b9a <_vfiprintf_r+0x23a>
   8538c:	4657      	mov	r7, sl
   8538e:	0923      	lsrs	r3, r4, #4
   85390:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   85394:	0929      	lsrs	r1, r5, #4
   85396:	f004 020f 	and.w	r2, r4, #15
   8539a:	460d      	mov	r5, r1
   8539c:	461c      	mov	r4, r3
   8539e:	5c83      	ldrb	r3, [r0, r2]
   853a0:	f807 3d01 	strb.w	r3, [r7, #-1]!
   853a4:	ea54 0305 	orrs.w	r3, r4, r5
   853a8:	d1f1      	bne.n	8538e <_vfiprintf_r+0xa2e>
   853aa:	ebc7 030a 	rsb	r3, r7, sl
   853ae:	9303      	str	r3, [sp, #12]
   853b0:	f7ff bbfc 	b.w	84bac <_vfiprintf_r+0x24c>
   853b4:	aa0d      	add	r2, sp, #52	; 0x34
   853b6:	9900      	ldr	r1, [sp, #0]
   853b8:	9805      	ldr	r0, [sp, #20]
   853ba:	f7ff fa95 	bl	848e8 <__sprint_r.part.0>
   853be:	2800      	cmp	r0, #0
   853c0:	f47f af69 	bne.w	85296 <_vfiprintf_r+0x936>
   853c4:	46d3      	mov	fp, sl
   853c6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   853c8:	e786      	b.n	852d8 <_vfiprintf_r+0x978>
   853ca:	f016 0210 	ands.w	r2, r6, #16
   853ce:	f000 80b5 	beq.w	8553c <_vfiprintf_r+0xbdc>
   853d2:	9904      	ldr	r1, [sp, #16]
   853d4:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   853d8:	460a      	mov	r2, r1
   853da:	680c      	ldr	r4, [r1, #0]
   853dc:	9901      	ldr	r1, [sp, #4]
   853de:	3204      	adds	r2, #4
   853e0:	2900      	cmp	r1, #0
   853e2:	f04f 0500 	mov.w	r5, #0
   853e6:	f2c0 8152 	blt.w	8568e <_vfiprintf_r+0xd2e>
   853ea:	ea54 0105 	orrs.w	r1, r4, r5
   853ee:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   853f2:	9204      	str	r2, [sp, #16]
   853f4:	f43f ad5d 	beq.w	84eb2 <_vfiprintf_r+0x552>
   853f8:	4699      	mov	r9, r3
   853fa:	e562      	b.n	84ec2 <_vfiprintf_r+0x562>
   853fc:	9a04      	ldr	r2, [sp, #16]
   853fe:	06f7      	lsls	r7, r6, #27
   85400:	4613      	mov	r3, r2
   85402:	d409      	bmi.n	85418 <_vfiprintf_r+0xab8>
   85404:	0675      	lsls	r5, r6, #25
   85406:	d507      	bpl.n	85418 <_vfiprintf_r+0xab8>
   85408:	f9b2 4000 	ldrsh.w	r4, [r2]
   8540c:	3304      	adds	r3, #4
   8540e:	17e5      	asrs	r5, r4, #31
   85410:	9304      	str	r3, [sp, #16]
   85412:	4622      	mov	r2, r4
   85414:	462b      	mov	r3, r5
   85416:	e4f7      	b.n	84e08 <_vfiprintf_r+0x4a8>
   85418:	681c      	ldr	r4, [r3, #0]
   8541a:	3304      	adds	r3, #4
   8541c:	17e5      	asrs	r5, r4, #31
   8541e:	9304      	str	r3, [sp, #16]
   85420:	4622      	mov	r2, r4
   85422:	462b      	mov	r3, r5
   85424:	e4f0      	b.n	84e08 <_vfiprintf_r+0x4a8>
   85426:	6814      	ldr	r4, [r2, #0]
   85428:	3204      	adds	r2, #4
   8542a:	9204      	str	r2, [sp, #16]
   8542c:	2500      	movs	r5, #0
   8542e:	e61f      	b.n	85070 <_vfiprintf_r+0x710>
   85430:	f04f 0900 	mov.w	r9, #0
   85434:	ea54 0305 	orrs.w	r3, r4, r5
   85438:	f47f acf7 	bne.w	84e2a <_vfiprintf_r+0x4ca>
   8543c:	e5d8      	b.n	84ff0 <_vfiprintf_r+0x690>
   8543e:	aa0d      	add	r2, sp, #52	; 0x34
   85440:	9900      	ldr	r1, [sp, #0]
   85442:	9805      	ldr	r0, [sp, #20]
   85444:	f7ff fa50 	bl	848e8 <__sprint_r.part.0>
   85448:	2800      	cmp	r0, #0
   8544a:	f47f af24 	bne.w	85296 <_vfiprintf_r+0x936>
   8544e:	46d3      	mov	fp, sl
   85450:	f7ff bb51 	b.w	84af6 <_vfiprintf_r+0x196>
   85454:	aa0d      	add	r2, sp, #52	; 0x34
   85456:	9900      	ldr	r1, [sp, #0]
   85458:	9805      	ldr	r0, [sp, #20]
   8545a:	f7ff fa45 	bl	848e8 <__sprint_r.part.0>
   8545e:	2800      	cmp	r0, #0
   85460:	f43f af4b 	beq.w	852fa <_vfiprintf_r+0x99a>
   85464:	e717      	b.n	85296 <_vfiprintf_r+0x936>
   85466:	2400      	movs	r4, #0
   85468:	2500      	movs	r5, #0
   8546a:	f04f 0900 	mov.w	r9, #0
   8546e:	e78d      	b.n	8538c <_vfiprintf_r+0xa2c>
   85470:	aa0d      	add	r2, sp, #52	; 0x34
   85472:	9900      	ldr	r1, [sp, #0]
   85474:	9805      	ldr	r0, [sp, #20]
   85476:	f7ff fa37 	bl	848e8 <__sprint_r.part.0>
   8547a:	2800      	cmp	r0, #0
   8547c:	f47f af0b 	bne.w	85296 <_vfiprintf_r+0x936>
   85480:	980e      	ldr	r0, [sp, #56]	; 0x38
   85482:	46d3      	mov	fp, sl
   85484:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   85486:	f100 0e01 	add.w	lr, r0, #1
   8548a:	f7ff bbed 	b.w	84c68 <_vfiprintf_r+0x308>
   8548e:	aa0d      	add	r2, sp, #52	; 0x34
   85490:	9900      	ldr	r1, [sp, #0]
   85492:	9805      	ldr	r0, [sp, #20]
   85494:	f7ff fa28 	bl	848e8 <__sprint_r.part.0>
   85498:	2800      	cmp	r0, #0
   8549a:	f47f aefc 	bne.w	85296 <_vfiprintf_r+0x936>
   8549e:	980e      	ldr	r0, [sp, #56]	; 0x38
   854a0:	46d3      	mov	fp, sl
   854a2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   854a4:	f100 0e01 	add.w	lr, r0, #1
   854a8:	e69c      	b.n	851e4 <_vfiprintf_r+0x884>
   854aa:	2a00      	cmp	r2, #0
   854ac:	f040 80c8 	bne.w	85640 <_vfiprintf_r+0xce0>
   854b0:	f04f 0e01 	mov.w	lr, #1
   854b4:	4610      	mov	r0, r2
   854b6:	46d3      	mov	fp, sl
   854b8:	e698      	b.n	851ec <_vfiprintf_r+0x88c>
   854ba:	aa0d      	add	r2, sp, #52	; 0x34
   854bc:	9900      	ldr	r1, [sp, #0]
   854be:	9805      	ldr	r0, [sp, #20]
   854c0:	f7ff fa12 	bl	848e8 <__sprint_r.part.0>
   854c4:	2800      	cmp	r0, #0
   854c6:	f47f aee6 	bne.w	85296 <_vfiprintf_r+0x936>
   854ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   854cc:	46d3      	mov	fp, sl
   854ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   854d0:	f103 0e01 	add.w	lr, r3, #1
   854d4:	e42c      	b.n	84d30 <_vfiprintf_r+0x3d0>
   854d6:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
   854da:	f04f 0300 	mov.w	r3, #0
   854de:	2230      	movs	r2, #48	; 0x30
   854e0:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
   854e4:	9a01      	ldr	r2, [sp, #4]
   854e6:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   854ea:	2a00      	cmp	r2, #0
   854ec:	f046 0302 	orr.w	r3, r6, #2
   854f0:	f2c0 80bb 	blt.w	8566a <_vfiprintf_r+0xd0a>
   854f4:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   854f8:	f046 0602 	orr.w	r6, r6, #2
   854fc:	f04f 0900 	mov.w	r9, #0
   85500:	e744      	b.n	8538c <_vfiprintf_r+0xa2c>
   85502:	f04f 0900 	mov.w	r9, #0
   85506:	488c      	ldr	r0, [pc, #560]	; (85738 <_vfiprintf_r+0xdd8>)
   85508:	e740      	b.n	8538c <_vfiprintf_r+0xa2c>
   8550a:	9b01      	ldr	r3, [sp, #4]
   8550c:	4264      	negs	r4, r4
   8550e:	f04f 092d 	mov.w	r9, #45	; 0x2d
   85512:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   85516:	2b00      	cmp	r3, #0
   85518:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
   8551c:	f6ff ac85 	blt.w	84e2a <_vfiprintf_r+0x4ca>
   85520:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   85524:	e481      	b.n	84e2a <_vfiprintf_r+0x4ca>
   85526:	9b07      	ldr	r3, [sp, #28]
   85528:	2b00      	cmp	r3, #0
   8552a:	d063      	beq.n	855f4 <_vfiprintf_r+0xc94>
   8552c:	ab0c      	add	r3, sp, #48	; 0x30
   8552e:	2202      	movs	r2, #2
   85530:	931a      	str	r3, [sp, #104]	; 0x68
   85532:	921b      	str	r2, [sp, #108]	; 0x6c
   85534:	f04f 0e01 	mov.w	lr, #1
   85538:	46d3      	mov	fp, sl
   8553a:	e715      	b.n	85368 <_vfiprintf_r+0xa08>
   8553c:	f016 0940 	ands.w	r9, r6, #64	; 0x40
   85540:	d03b      	beq.n	855ba <_vfiprintf_r+0xc5a>
   85542:	9904      	ldr	r1, [sp, #16]
   85544:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
   85548:	460b      	mov	r3, r1
   8554a:	880c      	ldrh	r4, [r1, #0]
   8554c:	9901      	ldr	r1, [sp, #4]
   8554e:	3304      	adds	r3, #4
   85550:	2900      	cmp	r1, #0
   85552:	f04f 0500 	mov.w	r5, #0
   85556:	f2c0 808c 	blt.w	85672 <_vfiprintf_r+0xd12>
   8555a:	ea54 0105 	orrs.w	r1, r4, r5
   8555e:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   85562:	9304      	str	r3, [sp, #16]
   85564:	f43f aca5 	beq.w	84eb2 <_vfiprintf_r+0x552>
   85568:	4691      	mov	r9, r2
   8556a:	e4aa      	b.n	84ec2 <_vfiprintf_r+0x562>
   8556c:	06f0      	lsls	r0, r6, #27
   8556e:	d40a      	bmi.n	85586 <_vfiprintf_r+0xc26>
   85570:	0671      	lsls	r1, r6, #25
   85572:	d508      	bpl.n	85586 <_vfiprintf_r+0xc26>
   85574:	9a04      	ldr	r2, [sp, #16]
   85576:	6813      	ldr	r3, [r2, #0]
   85578:	3204      	adds	r2, #4
   8557a:	9204      	str	r2, [sp, #16]
   8557c:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   85580:	801a      	strh	r2, [r3, #0]
   85582:	f7ff ba1e 	b.w	849c2 <_vfiprintf_r+0x62>
   85586:	9a04      	ldr	r2, [sp, #16]
   85588:	6813      	ldr	r3, [r2, #0]
   8558a:	3204      	adds	r2, #4
   8558c:	9204      	str	r2, [sp, #16]
   8558e:	9a02      	ldr	r2, [sp, #8]
   85590:	601a      	str	r2, [r3, #0]
   85592:	f7ff ba16 	b.w	849c2 <_vfiprintf_r+0x62>
   85596:	f04f 30ff 	mov.w	r0, #4294967295
   8559a:	f7ff bac9 	b.w	84b30 <_vfiprintf_r+0x1d0>
   8559e:	4616      	mov	r6, r2
   855a0:	4865      	ldr	r0, [pc, #404]	; (85738 <_vfiprintf_r+0xdd8>)
   855a2:	ea54 0205 	orrs.w	r2, r4, r5
   855a6:	9304      	str	r3, [sp, #16]
   855a8:	f04f 0900 	mov.w	r9, #0
   855ac:	f47f aeee 	bne.w	8538c <_vfiprintf_r+0xa2c>
   855b0:	2400      	movs	r4, #0
   855b2:	2500      	movs	r5, #0
   855b4:	e6ea      	b.n	8538c <_vfiprintf_r+0xa2c>
   855b6:	9b04      	ldr	r3, [sp, #16]
   855b8:	e7f3      	b.n	855a2 <_vfiprintf_r+0xc42>
   855ba:	9a04      	ldr	r2, [sp, #16]
   855bc:	f88d 902f 	strb.w	r9, [sp, #47]	; 0x2f
   855c0:	4613      	mov	r3, r2
   855c2:	6814      	ldr	r4, [r2, #0]
   855c4:	9a01      	ldr	r2, [sp, #4]
   855c6:	3304      	adds	r3, #4
   855c8:	2a00      	cmp	r2, #0
   855ca:	f04f 0500 	mov.w	r5, #0
   855ce:	db50      	blt.n	85672 <_vfiprintf_r+0xd12>
   855d0:	ea54 0205 	orrs.w	r2, r4, r5
   855d4:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   855d8:	9304      	str	r3, [sp, #16]
   855da:	f47f ac72 	bne.w	84ec2 <_vfiprintf_r+0x562>
   855de:	e468      	b.n	84eb2 <_vfiprintf_r+0x552>
   855e0:	aa0d      	add	r2, sp, #52	; 0x34
   855e2:	9900      	ldr	r1, [sp, #0]
   855e4:	9805      	ldr	r0, [sp, #20]
   855e6:	f7ff f97f 	bl	848e8 <__sprint_r.part.0>
   855ea:	2800      	cmp	r0, #0
   855ec:	f47f ae53 	bne.w	85296 <_vfiprintf_r+0x936>
   855f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   855f2:	e678      	b.n	852e6 <_vfiprintf_r+0x986>
   855f4:	4610      	mov	r0, r2
   855f6:	f04f 0e01 	mov.w	lr, #1
   855fa:	46d3      	mov	fp, sl
   855fc:	e5f6      	b.n	851ec <_vfiprintf_r+0x88c>
   855fe:	9904      	ldr	r1, [sp, #16]
   85600:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
   85604:	460a      	mov	r2, r1
   85606:	880c      	ldrh	r4, [r1, #0]
   85608:	9901      	ldr	r1, [sp, #4]
   8560a:	3204      	adds	r2, #4
   8560c:	2900      	cmp	r1, #0
   8560e:	f04f 0500 	mov.w	r5, #0
   85612:	db55      	blt.n	856c0 <_vfiprintf_r+0xd60>
   85614:	ea54 0105 	orrs.w	r1, r4, r5
   85618:	f026 0680 	bic.w	r6, r6, #128	; 0x80
   8561c:	9204      	str	r2, [sp, #16]
   8561e:	4699      	mov	r9, r3
   85620:	f47f ac03 	bne.w	84e2a <_vfiprintf_r+0x4ca>
   85624:	e4df      	b.n	84fe6 <_vfiprintf_r+0x686>
   85626:	9304      	str	r3, [sp, #16]
   85628:	e704      	b.n	85434 <_vfiprintf_r+0xad4>
   8562a:	4638      	mov	r0, r7
   8562c:	9404      	str	r4, [sp, #16]
   8562e:	f7ff f92d 	bl	8488c <strlen>
   85632:	2300      	movs	r3, #0
   85634:	9003      	str	r0, [sp, #12]
   85636:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
   8563a:	9301      	str	r3, [sp, #4]
   8563c:	f7ff bab6 	b.w	84bac <_vfiprintf_r+0x24c>
   85640:	aa0d      	add	r2, sp, #52	; 0x34
   85642:	9900      	ldr	r1, [sp, #0]
   85644:	9805      	ldr	r0, [sp, #20]
   85646:	f7ff f94f 	bl	848e8 <__sprint_r.part.0>
   8564a:	2800      	cmp	r0, #0
   8564c:	f47f ae23 	bne.w	85296 <_vfiprintf_r+0x936>
   85650:	980e      	ldr	r0, [sp, #56]	; 0x38
   85652:	46d3      	mov	fp, sl
   85654:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   85656:	f100 0e01 	add.w	lr, r0, #1
   8565a:	e5c7      	b.n	851ec <_vfiprintf_r+0x88c>
   8565c:	980e      	ldr	r0, [sp, #56]	; 0x38
   8565e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   85660:	3001      	adds	r0, #1
   85662:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 85740 <_vfiprintf_r+0xde0>
   85666:	f7ff baec 	b.w	84c42 <_vfiprintf_r+0x2e2>
   8566a:	461e      	mov	r6, r3
   8566c:	f04f 0900 	mov.w	r9, #0
   85670:	e68c      	b.n	8538c <_vfiprintf_r+0xa2c>
   85672:	9304      	str	r3, [sp, #16]
   85674:	e423      	b.n	84ebe <_vfiprintf_r+0x55e>
   85676:	f04f 0900 	mov.w	r9, #0
   8567a:	e799      	b.n	855b0 <_vfiprintf_r+0xc50>
   8567c:	2b06      	cmp	r3, #6
   8567e:	bf28      	it	cs
   85680:	2306      	movcs	r3, #6
   85682:	9303      	str	r3, [sp, #12]
   85684:	9404      	str	r4, [sp, #16]
   85686:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
   8568a:	4f2c      	ldr	r7, [pc, #176]	; (8573c <_vfiprintf_r+0xddc>)
   8568c:	e512      	b.n	850b4 <_vfiprintf_r+0x754>
   8568e:	9204      	str	r2, [sp, #16]
   85690:	e415      	b.n	84ebe <_vfiprintf_r+0x55e>
   85692:	980e      	ldr	r0, [sp, #56]	; 0x38
   85694:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 85740 <_vfiprintf_r+0xde0>
   85698:	3001      	adds	r0, #1
   8569a:	f7ff bb88 	b.w	84dae <_vfiprintf_r+0x44e>
   8569e:	46f4      	mov	ip, lr
   856a0:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 85744 <_vfiprintf_r+0xde4>
   856a4:	f7ff bb2d 	b.w	84d02 <_vfiprintf_r+0x3a2>
   856a8:	2200      	movs	r2, #0
   856aa:	9201      	str	r2, [sp, #4]
   856ac:	f7ff b9c1 	b.w	84a32 <_vfiprintf_r+0xd2>
   856b0:	9b01      	ldr	r3, [sp, #4]
   856b2:	9404      	str	r4, [sp, #16]
   856b4:	9303      	str	r3, [sp, #12]
   856b6:	9001      	str	r0, [sp, #4]
   856b8:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
   856bc:	f7ff ba76 	b.w	84bac <_vfiprintf_r+0x24c>
   856c0:	9204      	str	r2, [sp, #16]
   856c2:	4699      	mov	r9, r3
   856c4:	e6b6      	b.n	85434 <_vfiprintf_r+0xad4>
   856c6:	9a04      	ldr	r2, [sp, #16]
   856c8:	6813      	ldr	r3, [r2, #0]
   856ca:	3204      	adds	r2, #4
   856cc:	2b00      	cmp	r3, #0
   856ce:	9301      	str	r3, [sp, #4]
   856d0:	9204      	str	r2, [sp, #16]
   856d2:	f898 3001 	ldrb.w	r3, [r8, #1]
   856d6:	46a8      	mov	r8, r5
   856d8:	f6bf a9a9 	bge.w	84a2e <_vfiprintf_r+0xce>
   856dc:	f04f 32ff 	mov.w	r2, #4294967295
   856e0:	9201      	str	r2, [sp, #4]
   856e2:	f7ff b9a4 	b.w	84a2e <_vfiprintf_r+0xce>
   856e6:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   856ea:	e45f      	b.n	84fac <_vfiprintf_r+0x64c>
   856ec:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   856f0:	f7ff bbc4 	b.w	84e7c <_vfiprintf_r+0x51c>
   856f4:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   856f8:	f7ff bb77 	b.w	84dea <_vfiprintf_r+0x48a>
   856fc:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   85700:	e487      	b.n	85012 <_vfiprintf_r+0x6b2>
   85702:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   85706:	e4a7      	b.n	85058 <_vfiprintf_r+0x6f8>
   85708:	4699      	mov	r9, r3
   8570a:	07f3      	lsls	r3, r6, #31
   8570c:	d505      	bpl.n	8571a <_vfiprintf_r+0xdba>
   8570e:	af2a      	add	r7, sp, #168	; 0xa8
   85710:	2330      	movs	r3, #48	; 0x30
   85712:	f807 3d41 	strb.w	r3, [r7, #-65]!
   85716:	f7ff bba2 	b.w	84e5e <_vfiprintf_r+0x4fe>
   8571a:	9b01      	ldr	r3, [sp, #4]
   8571c:	4657      	mov	r7, sl
   8571e:	9303      	str	r3, [sp, #12]
   85720:	f7ff ba44 	b.w	84bac <_vfiprintf_r+0x24c>
   85724:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   85728:	e517      	b.n	8515a <_vfiprintf_r+0x7fa>
   8572a:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   8572e:	e4fa      	b.n	85126 <_vfiprintf_r+0x7c6>
   85730:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   85734:	e4d2      	b.n	850dc <_vfiprintf_r+0x77c>
   85736:	bf00      	nop
   85738:	00087630 	.word	0x00087630
   8573c:	00087644 	.word	0x00087644
   85740:	0008764c 	.word	0x0008764c
   85744:	0008760c 	.word	0x0008760c

00085748 <__sbprintf>:
   85748:	b5f0      	push	{r4, r5, r6, r7, lr}
   8574a:	460c      	mov	r4, r1
   8574c:	8989      	ldrh	r1, [r1, #12]
   8574e:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
   85752:	6e65      	ldr	r5, [r4, #100]	; 0x64
   85754:	f021 0102 	bic.w	r1, r1, #2
   85758:	6a66      	ldr	r6, [r4, #36]	; 0x24
   8575a:	f8ad 100c 	strh.w	r1, [sp, #12]
   8575e:	69e1      	ldr	r1, [r4, #28]
   85760:	89e7      	ldrh	r7, [r4, #14]
   85762:	9519      	str	r5, [sp, #100]	; 0x64
   85764:	2500      	movs	r5, #0
   85766:	9107      	str	r1, [sp, #28]
   85768:	9609      	str	r6, [sp, #36]	; 0x24
   8576a:	9506      	str	r5, [sp, #24]
   8576c:	ae1a      	add	r6, sp, #104	; 0x68
   8576e:	f44f 6580 	mov.w	r5, #1024	; 0x400
   85772:	4669      	mov	r1, sp
   85774:	9600      	str	r6, [sp, #0]
   85776:	9604      	str	r6, [sp, #16]
   85778:	9502      	str	r5, [sp, #8]
   8577a:	9505      	str	r5, [sp, #20]
   8577c:	f8ad 700e 	strh.w	r7, [sp, #14]
   85780:	4606      	mov	r6, r0
   85782:	f7ff f8ed 	bl	84960 <_vfiprintf_r>
   85786:	1e05      	subs	r5, r0, #0
   85788:	db07      	blt.n	8579a <__sbprintf+0x52>
   8578a:	4630      	mov	r0, r6
   8578c:	4669      	mov	r1, sp
   8578e:	f000 f929 	bl	859e4 <_fflush_r>
   85792:	2800      	cmp	r0, #0
   85794:	bf18      	it	ne
   85796:	f04f 35ff 	movne.w	r5, #4294967295
   8579a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   8579e:	065b      	lsls	r3, r3, #25
   857a0:	d503      	bpl.n	857aa <__sbprintf+0x62>
   857a2:	89a3      	ldrh	r3, [r4, #12]
   857a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   857a8:	81a3      	strh	r3, [r4, #12]
   857aa:	4628      	mov	r0, r5
   857ac:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
   857b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   857b2:	bf00      	nop

000857b4 <__swsetup_r>:
   857b4:	b538      	push	{r3, r4, r5, lr}
   857b6:	4b30      	ldr	r3, [pc, #192]	; (85878 <__swsetup_r+0xc4>)
   857b8:	4605      	mov	r5, r0
   857ba:	6818      	ldr	r0, [r3, #0]
   857bc:	460c      	mov	r4, r1
   857be:	b110      	cbz	r0, 857c6 <__swsetup_r+0x12>
   857c0:	6b83      	ldr	r3, [r0, #56]	; 0x38
   857c2:	2b00      	cmp	r3, #0
   857c4:	d038      	beq.n	85838 <__swsetup_r+0x84>
   857c6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   857ca:	b293      	uxth	r3, r2
   857cc:	0718      	lsls	r0, r3, #28
   857ce:	d50c      	bpl.n	857ea <__swsetup_r+0x36>
   857d0:	6920      	ldr	r0, [r4, #16]
   857d2:	b1a8      	cbz	r0, 85800 <__swsetup_r+0x4c>
   857d4:	f013 0201 	ands.w	r2, r3, #1
   857d8:	d01e      	beq.n	85818 <__swsetup_r+0x64>
   857da:	6963      	ldr	r3, [r4, #20]
   857dc:	2200      	movs	r2, #0
   857de:	425b      	negs	r3, r3
   857e0:	61a3      	str	r3, [r4, #24]
   857e2:	60a2      	str	r2, [r4, #8]
   857e4:	b1f0      	cbz	r0, 85824 <__swsetup_r+0x70>
   857e6:	2000      	movs	r0, #0
   857e8:	bd38      	pop	{r3, r4, r5, pc}
   857ea:	06d9      	lsls	r1, r3, #27
   857ec:	d53b      	bpl.n	85866 <__swsetup_r+0xb2>
   857ee:	0758      	lsls	r0, r3, #29
   857f0:	d425      	bmi.n	8583e <__swsetup_r+0x8a>
   857f2:	6920      	ldr	r0, [r4, #16]
   857f4:	f042 0308 	orr.w	r3, r2, #8
   857f8:	81a3      	strh	r3, [r4, #12]
   857fa:	b29b      	uxth	r3, r3
   857fc:	2800      	cmp	r0, #0
   857fe:	d1e9      	bne.n	857d4 <__swsetup_r+0x20>
   85800:	f403 7220 	and.w	r2, r3, #640	; 0x280
   85804:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   85808:	d0e4      	beq.n	857d4 <__swsetup_r+0x20>
   8580a:	4628      	mov	r0, r5
   8580c:	4621      	mov	r1, r4
   8580e:	f000 fd13 	bl	86238 <__smakebuf_r>
   85812:	89a3      	ldrh	r3, [r4, #12]
   85814:	6920      	ldr	r0, [r4, #16]
   85816:	e7dd      	b.n	857d4 <__swsetup_r+0x20>
   85818:	0799      	lsls	r1, r3, #30
   8581a:	bf58      	it	pl
   8581c:	6962      	ldrpl	r2, [r4, #20]
   8581e:	60a2      	str	r2, [r4, #8]
   85820:	2800      	cmp	r0, #0
   85822:	d1e0      	bne.n	857e6 <__swsetup_r+0x32>
   85824:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   85828:	061a      	lsls	r2, r3, #24
   8582a:	d5dd      	bpl.n	857e8 <__swsetup_r+0x34>
   8582c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   85830:	81a3      	strh	r3, [r4, #12]
   85832:	f04f 30ff 	mov.w	r0, #4294967295
   85836:	bd38      	pop	{r3, r4, r5, pc}
   85838:	f000 f968 	bl	85b0c <__sinit>
   8583c:	e7c3      	b.n	857c6 <__swsetup_r+0x12>
   8583e:	6b21      	ldr	r1, [r4, #48]	; 0x30
   85840:	b151      	cbz	r1, 85858 <__swsetup_r+0xa4>
   85842:	f104 0340 	add.w	r3, r4, #64	; 0x40
   85846:	4299      	cmp	r1, r3
   85848:	d004      	beq.n	85854 <__swsetup_r+0xa0>
   8584a:	4628      	mov	r0, r5
   8584c:	f000 fa26 	bl	85c9c <_free_r>
   85850:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   85854:	2300      	movs	r3, #0
   85856:	6323      	str	r3, [r4, #48]	; 0x30
   85858:	6920      	ldr	r0, [r4, #16]
   8585a:	2300      	movs	r3, #0
   8585c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   85860:	e884 0009 	stmia.w	r4, {r0, r3}
   85864:	e7c6      	b.n	857f4 <__swsetup_r+0x40>
   85866:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   8586a:	2309      	movs	r3, #9
   8586c:	602b      	str	r3, [r5, #0]
   8586e:	f04f 30ff 	mov.w	r0, #4294967295
   85872:	81a2      	strh	r2, [r4, #12]
   85874:	bd38      	pop	{r3, r4, r5, pc}
   85876:	bf00      	nop
   85878:	200704d8 	.word	0x200704d8

0008587c <register_fini>:
   8587c:	4b02      	ldr	r3, [pc, #8]	; (85888 <register_fini+0xc>)
   8587e:	b113      	cbz	r3, 85886 <register_fini+0xa>
   85880:	4802      	ldr	r0, [pc, #8]	; (8588c <register_fini+0x10>)
   85882:	f000 b805 	b.w	85890 <atexit>
   85886:	4770      	bx	lr
   85888:	00000000 	.word	0x00000000
   8588c:	00085b21 	.word	0x00085b21

00085890 <atexit>:
   85890:	2300      	movs	r3, #0
   85892:	4601      	mov	r1, r0
   85894:	461a      	mov	r2, r3
   85896:	4618      	mov	r0, r3
   85898:	f001 bbce 	b.w	87038 <__register_exitproc>

0008589c <__sflush_r>:
   8589c:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   858a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   858a4:	b29a      	uxth	r2, r3
   858a6:	460d      	mov	r5, r1
   858a8:	0711      	lsls	r1, r2, #28
   858aa:	4680      	mov	r8, r0
   858ac:	d43c      	bmi.n	85928 <__sflush_r+0x8c>
   858ae:	686a      	ldr	r2, [r5, #4]
   858b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   858b4:	2a00      	cmp	r2, #0
   858b6:	81ab      	strh	r3, [r5, #12]
   858b8:	dd73      	ble.n	859a2 <__sflush_r+0x106>
   858ba:	6aac      	ldr	r4, [r5, #40]	; 0x28
   858bc:	2c00      	cmp	r4, #0
   858be:	d04b      	beq.n	85958 <__sflush_r+0xbc>
   858c0:	b29b      	uxth	r3, r3
   858c2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   858c6:	2100      	movs	r1, #0
   858c8:	b292      	uxth	r2, r2
   858ca:	f8d8 6000 	ldr.w	r6, [r8]
   858ce:	f8c8 1000 	str.w	r1, [r8]
   858d2:	2a00      	cmp	r2, #0
   858d4:	d069      	beq.n	859aa <__sflush_r+0x10e>
   858d6:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   858d8:	075f      	lsls	r7, r3, #29
   858da:	d505      	bpl.n	858e8 <__sflush_r+0x4c>
   858dc:	6869      	ldr	r1, [r5, #4]
   858de:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   858e0:	1a52      	subs	r2, r2, r1
   858e2:	b10b      	cbz	r3, 858e8 <__sflush_r+0x4c>
   858e4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   858e6:	1ad2      	subs	r2, r2, r3
   858e8:	2300      	movs	r3, #0
   858ea:	69e9      	ldr	r1, [r5, #28]
   858ec:	4640      	mov	r0, r8
   858ee:	47a0      	blx	r4
   858f0:	1c44      	adds	r4, r0, #1
   858f2:	d03c      	beq.n	8596e <__sflush_r+0xd2>
   858f4:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   858f8:	6929      	ldr	r1, [r5, #16]
   858fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   858fe:	2200      	movs	r2, #0
   85900:	81ab      	strh	r3, [r5, #12]
   85902:	04db      	lsls	r3, r3, #19
   85904:	e885 0006 	stmia.w	r5, {r1, r2}
   85908:	d449      	bmi.n	8599e <__sflush_r+0x102>
   8590a:	6b29      	ldr	r1, [r5, #48]	; 0x30
   8590c:	f8c8 6000 	str.w	r6, [r8]
   85910:	b311      	cbz	r1, 85958 <__sflush_r+0xbc>
   85912:	f105 0340 	add.w	r3, r5, #64	; 0x40
   85916:	4299      	cmp	r1, r3
   85918:	d002      	beq.n	85920 <__sflush_r+0x84>
   8591a:	4640      	mov	r0, r8
   8591c:	f000 f9be 	bl	85c9c <_free_r>
   85920:	2000      	movs	r0, #0
   85922:	6328      	str	r0, [r5, #48]	; 0x30
   85924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85928:	692e      	ldr	r6, [r5, #16]
   8592a:	b1ae      	cbz	r6, 85958 <__sflush_r+0xbc>
   8592c:	0790      	lsls	r0, r2, #30
   8592e:	682c      	ldr	r4, [r5, #0]
   85930:	bf0c      	ite	eq
   85932:	696b      	ldreq	r3, [r5, #20]
   85934:	2300      	movne	r3, #0
   85936:	602e      	str	r6, [r5, #0]
   85938:	1ba4      	subs	r4, r4, r6
   8593a:	60ab      	str	r3, [r5, #8]
   8593c:	e00a      	b.n	85954 <__sflush_r+0xb8>
   8593e:	4623      	mov	r3, r4
   85940:	4632      	mov	r2, r6
   85942:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   85944:	69e9      	ldr	r1, [r5, #28]
   85946:	4640      	mov	r0, r8
   85948:	47b8      	blx	r7
   8594a:	2800      	cmp	r0, #0
   8594c:	eba4 0400 	sub.w	r4, r4, r0
   85950:	4406      	add	r6, r0
   85952:	dd04      	ble.n	8595e <__sflush_r+0xc2>
   85954:	2c00      	cmp	r4, #0
   85956:	dcf2      	bgt.n	8593e <__sflush_r+0xa2>
   85958:	2000      	movs	r0, #0
   8595a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8595e:	89ab      	ldrh	r3, [r5, #12]
   85960:	f04f 30ff 	mov.w	r0, #4294967295
   85964:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   85968:	81ab      	strh	r3, [r5, #12]
   8596a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8596e:	f8d8 2000 	ldr.w	r2, [r8]
   85972:	2a1d      	cmp	r2, #29
   85974:	d8f3      	bhi.n	8595e <__sflush_r+0xc2>
   85976:	4b1a      	ldr	r3, [pc, #104]	; (859e0 <__sflush_r+0x144>)
   85978:	40d3      	lsrs	r3, r2
   8597a:	f003 0301 	and.w	r3, r3, #1
   8597e:	f083 0401 	eor.w	r4, r3, #1
   85982:	2b00      	cmp	r3, #0
   85984:	d0eb      	beq.n	8595e <__sflush_r+0xc2>
   85986:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   8598a:	6929      	ldr	r1, [r5, #16]
   8598c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   85990:	6029      	str	r1, [r5, #0]
   85992:	04d9      	lsls	r1, r3, #19
   85994:	606c      	str	r4, [r5, #4]
   85996:	81ab      	strh	r3, [r5, #12]
   85998:	d5b7      	bpl.n	8590a <__sflush_r+0x6e>
   8599a:	2a00      	cmp	r2, #0
   8599c:	d1b5      	bne.n	8590a <__sflush_r+0x6e>
   8599e:	6528      	str	r0, [r5, #80]	; 0x50
   859a0:	e7b3      	b.n	8590a <__sflush_r+0x6e>
   859a2:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   859a4:	2a00      	cmp	r2, #0
   859a6:	dc88      	bgt.n	858ba <__sflush_r+0x1e>
   859a8:	e7d6      	b.n	85958 <__sflush_r+0xbc>
   859aa:	2301      	movs	r3, #1
   859ac:	69e9      	ldr	r1, [r5, #28]
   859ae:	4640      	mov	r0, r8
   859b0:	47a0      	blx	r4
   859b2:	1c43      	adds	r3, r0, #1
   859b4:	4602      	mov	r2, r0
   859b6:	d002      	beq.n	859be <__sflush_r+0x122>
   859b8:	89ab      	ldrh	r3, [r5, #12]
   859ba:	6aac      	ldr	r4, [r5, #40]	; 0x28
   859bc:	e78c      	b.n	858d8 <__sflush_r+0x3c>
   859be:	f8d8 3000 	ldr.w	r3, [r8]
   859c2:	2b00      	cmp	r3, #0
   859c4:	d0f8      	beq.n	859b8 <__sflush_r+0x11c>
   859c6:	2b1d      	cmp	r3, #29
   859c8:	d001      	beq.n	859ce <__sflush_r+0x132>
   859ca:	2b16      	cmp	r3, #22
   859cc:	d102      	bne.n	859d4 <__sflush_r+0x138>
   859ce:	f8c8 6000 	str.w	r6, [r8]
   859d2:	e7c1      	b.n	85958 <__sflush_r+0xbc>
   859d4:	89ab      	ldrh	r3, [r5, #12]
   859d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   859da:	81ab      	strh	r3, [r5, #12]
   859dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   859e0:	20400001 	.word	0x20400001

000859e4 <_fflush_r>:
   859e4:	b510      	push	{r4, lr}
   859e6:	4604      	mov	r4, r0
   859e8:	b082      	sub	sp, #8
   859ea:	b108      	cbz	r0, 859f0 <_fflush_r+0xc>
   859ec:	6b83      	ldr	r3, [r0, #56]	; 0x38
   859ee:	b153      	cbz	r3, 85a06 <_fflush_r+0x22>
   859f0:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   859f4:	b908      	cbnz	r0, 859fa <_fflush_r+0x16>
   859f6:	b002      	add	sp, #8
   859f8:	bd10      	pop	{r4, pc}
   859fa:	4620      	mov	r0, r4
   859fc:	b002      	add	sp, #8
   859fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   85a02:	f7ff bf4b 	b.w	8589c <__sflush_r>
   85a06:	9101      	str	r1, [sp, #4]
   85a08:	f000 f880 	bl	85b0c <__sinit>
   85a0c:	9901      	ldr	r1, [sp, #4]
   85a0e:	e7ef      	b.n	859f0 <_fflush_r+0xc>

00085a10 <_cleanup_r>:
   85a10:	4901      	ldr	r1, [pc, #4]	; (85a18 <_cleanup_r+0x8>)
   85a12:	f000 bbaf 	b.w	86174 <_fwalk_reent>
   85a16:	bf00      	nop
   85a18:	00087101 	.word	0x00087101

00085a1c <__sinit.part.1>:
   85a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85a20:	4607      	mov	r7, r0
   85a22:	4835      	ldr	r0, [pc, #212]	; (85af8 <__sinit.part.1+0xdc>)
   85a24:	687d      	ldr	r5, [r7, #4]
   85a26:	2400      	movs	r4, #0
   85a28:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   85a2c:	2304      	movs	r3, #4
   85a2e:	2103      	movs	r1, #3
   85a30:	63f8      	str	r0, [r7, #60]	; 0x3c
   85a32:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   85a36:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   85a3a:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   85a3e:	b083      	sub	sp, #12
   85a40:	602c      	str	r4, [r5, #0]
   85a42:	606c      	str	r4, [r5, #4]
   85a44:	60ac      	str	r4, [r5, #8]
   85a46:	666c      	str	r4, [r5, #100]	; 0x64
   85a48:	81ec      	strh	r4, [r5, #14]
   85a4a:	612c      	str	r4, [r5, #16]
   85a4c:	616c      	str	r4, [r5, #20]
   85a4e:	61ac      	str	r4, [r5, #24]
   85a50:	81ab      	strh	r3, [r5, #12]
   85a52:	4621      	mov	r1, r4
   85a54:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   85a58:	2208      	movs	r2, #8
   85a5a:	f7fe fe19 	bl	84690 <memset>
   85a5e:	f8df b09c 	ldr.w	fp, [pc, #156]	; 85afc <__sinit.part.1+0xe0>
   85a62:	68be      	ldr	r6, [r7, #8]
   85a64:	f8df a098 	ldr.w	sl, [pc, #152]	; 85b00 <__sinit.part.1+0xe4>
   85a68:	f8df 9098 	ldr.w	r9, [pc, #152]	; 85b04 <__sinit.part.1+0xe8>
   85a6c:	f8df 8098 	ldr.w	r8, [pc, #152]	; 85b08 <__sinit.part.1+0xec>
   85a70:	2301      	movs	r3, #1
   85a72:	2209      	movs	r2, #9
   85a74:	f8c5 b020 	str.w	fp, [r5, #32]
   85a78:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   85a7c:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   85a80:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   85a84:	61ed      	str	r5, [r5, #28]
   85a86:	4621      	mov	r1, r4
   85a88:	81f3      	strh	r3, [r6, #14]
   85a8a:	81b2      	strh	r2, [r6, #12]
   85a8c:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   85a90:	6034      	str	r4, [r6, #0]
   85a92:	6074      	str	r4, [r6, #4]
   85a94:	60b4      	str	r4, [r6, #8]
   85a96:	6674      	str	r4, [r6, #100]	; 0x64
   85a98:	6134      	str	r4, [r6, #16]
   85a9a:	6174      	str	r4, [r6, #20]
   85a9c:	61b4      	str	r4, [r6, #24]
   85a9e:	2208      	movs	r2, #8
   85aa0:	9301      	str	r3, [sp, #4]
   85aa2:	f7fe fdf5 	bl	84690 <memset>
   85aa6:	68fd      	ldr	r5, [r7, #12]
   85aa8:	2012      	movs	r0, #18
   85aaa:	2202      	movs	r2, #2
   85aac:	61f6      	str	r6, [r6, #28]
   85aae:	f8c6 b020 	str.w	fp, [r6, #32]
   85ab2:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   85ab6:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   85aba:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   85abe:	4621      	mov	r1, r4
   85ac0:	81a8      	strh	r0, [r5, #12]
   85ac2:	81ea      	strh	r2, [r5, #14]
   85ac4:	602c      	str	r4, [r5, #0]
   85ac6:	606c      	str	r4, [r5, #4]
   85ac8:	60ac      	str	r4, [r5, #8]
   85aca:	666c      	str	r4, [r5, #100]	; 0x64
   85acc:	612c      	str	r4, [r5, #16]
   85ace:	616c      	str	r4, [r5, #20]
   85ad0:	61ac      	str	r4, [r5, #24]
   85ad2:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   85ad6:	2208      	movs	r2, #8
   85ad8:	f7fe fdda 	bl	84690 <memset>
   85adc:	9b01      	ldr	r3, [sp, #4]
   85ade:	61ed      	str	r5, [r5, #28]
   85ae0:	f8c5 b020 	str.w	fp, [r5, #32]
   85ae4:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   85ae8:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   85aec:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   85af0:	63bb      	str	r3, [r7, #56]	; 0x38
   85af2:	b003      	add	sp, #12
   85af4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85af8:	00085a11 	.word	0x00085a11
   85afc:	00086e69 	.word	0x00086e69
   85b00:	00086e8d 	.word	0x00086e8d
   85b04:	00086ec9 	.word	0x00086ec9
   85b08:	00086ee9 	.word	0x00086ee9

00085b0c <__sinit>:
   85b0c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   85b0e:	b103      	cbz	r3, 85b12 <__sinit+0x6>
   85b10:	4770      	bx	lr
   85b12:	f7ff bf83 	b.w	85a1c <__sinit.part.1>
   85b16:	bf00      	nop

00085b18 <__sfp_lock_acquire>:
   85b18:	4770      	bx	lr
   85b1a:	bf00      	nop

00085b1c <__sfp_lock_release>:
   85b1c:	4770      	bx	lr
   85b1e:	bf00      	nop

00085b20 <__libc_fini_array>:
   85b20:	b538      	push	{r3, r4, r5, lr}
   85b22:	4d07      	ldr	r5, [pc, #28]	; (85b40 <__libc_fini_array+0x20>)
   85b24:	4c07      	ldr	r4, [pc, #28]	; (85b44 <__libc_fini_array+0x24>)
   85b26:	1b2c      	subs	r4, r5, r4
   85b28:	10a4      	asrs	r4, r4, #2
   85b2a:	d005      	beq.n	85b38 <__libc_fini_array+0x18>
   85b2c:	3c01      	subs	r4, #1
   85b2e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   85b32:	4798      	blx	r3
   85b34:	2c00      	cmp	r4, #0
   85b36:	d1f9      	bne.n	85b2c <__libc_fini_array+0xc>
   85b38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   85b3c:	f001 bd98 	b.w	87670 <_fini>
   85b40:	00087680 	.word	0x00087680
   85b44:	0008767c 	.word	0x0008767c

00085b48 <__fputwc>:
   85b48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   85b4c:	b082      	sub	sp, #8
   85b4e:	4606      	mov	r6, r0
   85b50:	460f      	mov	r7, r1
   85b52:	4614      	mov	r4, r2
   85b54:	f000 fb3a 	bl	861cc <__locale_mb_cur_max>
   85b58:	2801      	cmp	r0, #1
   85b5a:	d032      	beq.n	85bc2 <__fputwc+0x7a>
   85b5c:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   85b60:	463a      	mov	r2, r7
   85b62:	a901      	add	r1, sp, #4
   85b64:	4630      	mov	r0, r6
   85b66:	f001 fa19 	bl	86f9c <_wcrtomb_r>
   85b6a:	f1b0 3fff 	cmp.w	r0, #4294967295
   85b6e:	4680      	mov	r8, r0
   85b70:	d020      	beq.n	85bb4 <__fputwc+0x6c>
   85b72:	b370      	cbz	r0, 85bd2 <__fputwc+0x8a>
   85b74:	f89d 1004 	ldrb.w	r1, [sp, #4]
   85b78:	2500      	movs	r5, #0
   85b7a:	e008      	b.n	85b8e <__fputwc+0x46>
   85b7c:	6823      	ldr	r3, [r4, #0]
   85b7e:	1c5a      	adds	r2, r3, #1
   85b80:	6022      	str	r2, [r4, #0]
   85b82:	7019      	strb	r1, [r3, #0]
   85b84:	3501      	adds	r5, #1
   85b86:	4545      	cmp	r5, r8
   85b88:	d223      	bcs.n	85bd2 <__fputwc+0x8a>
   85b8a:	ab01      	add	r3, sp, #4
   85b8c:	5d59      	ldrb	r1, [r3, r5]
   85b8e:	68a3      	ldr	r3, [r4, #8]
   85b90:	3b01      	subs	r3, #1
   85b92:	2b00      	cmp	r3, #0
   85b94:	60a3      	str	r3, [r4, #8]
   85b96:	daf1      	bge.n	85b7c <__fputwc+0x34>
   85b98:	69a2      	ldr	r2, [r4, #24]
   85b9a:	4293      	cmp	r3, r2
   85b9c:	db01      	blt.n	85ba2 <__fputwc+0x5a>
   85b9e:	290a      	cmp	r1, #10
   85ba0:	d1ec      	bne.n	85b7c <__fputwc+0x34>
   85ba2:	4622      	mov	r2, r4
   85ba4:	4630      	mov	r0, r6
   85ba6:	f001 f9a3 	bl	86ef0 <__swbuf_r>
   85baa:	1c43      	adds	r3, r0, #1
   85bac:	d1ea      	bne.n	85b84 <__fputwc+0x3c>
   85bae:	b002      	add	sp, #8
   85bb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85bb4:	89a3      	ldrh	r3, [r4, #12]
   85bb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   85bba:	81a3      	strh	r3, [r4, #12]
   85bbc:	b002      	add	sp, #8
   85bbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85bc2:	1e7b      	subs	r3, r7, #1
   85bc4:	2bfe      	cmp	r3, #254	; 0xfe
   85bc6:	d8c9      	bhi.n	85b5c <__fputwc+0x14>
   85bc8:	b2f9      	uxtb	r1, r7
   85bca:	4680      	mov	r8, r0
   85bcc:	f88d 1004 	strb.w	r1, [sp, #4]
   85bd0:	e7d2      	b.n	85b78 <__fputwc+0x30>
   85bd2:	4638      	mov	r0, r7
   85bd4:	b002      	add	sp, #8
   85bd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85bda:	bf00      	nop

00085bdc <_fputwc_r>:
   85bdc:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   85be0:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   85be4:	d10a      	bne.n	85bfc <_fputwc_r+0x20>
   85be6:	b410      	push	{r4}
   85be8:	6e54      	ldr	r4, [r2, #100]	; 0x64
   85bea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   85bee:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
   85bf2:	6654      	str	r4, [r2, #100]	; 0x64
   85bf4:	8193      	strh	r3, [r2, #12]
   85bf6:	bc10      	pop	{r4}
   85bf8:	f7ff bfa6 	b.w	85b48 <__fputwc>
   85bfc:	f7ff bfa4 	b.w	85b48 <__fputwc>

00085c00 <_malloc_trim_r>:
   85c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   85c02:	460c      	mov	r4, r1
   85c04:	4f22      	ldr	r7, [pc, #136]	; (85c90 <_malloc_trim_r+0x90>)
   85c06:	4606      	mov	r6, r0
   85c08:	f000 ff2e 	bl	86a68 <__malloc_lock>
   85c0c:	68bb      	ldr	r3, [r7, #8]
   85c0e:	685d      	ldr	r5, [r3, #4]
   85c10:	f025 0503 	bic.w	r5, r5, #3
   85c14:	1b29      	subs	r1, r5, r4
   85c16:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   85c1a:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   85c1e:	f021 010f 	bic.w	r1, r1, #15
   85c22:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   85c26:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   85c2a:	db07      	blt.n	85c3c <_malloc_trim_r+0x3c>
   85c2c:	2100      	movs	r1, #0
   85c2e:	4630      	mov	r0, r6
   85c30:	f001 f908 	bl	86e44 <_sbrk_r>
   85c34:	68bb      	ldr	r3, [r7, #8]
   85c36:	442b      	add	r3, r5
   85c38:	4298      	cmp	r0, r3
   85c3a:	d004      	beq.n	85c46 <_malloc_trim_r+0x46>
   85c3c:	4630      	mov	r0, r6
   85c3e:	f000 ff15 	bl	86a6c <__malloc_unlock>
   85c42:	2000      	movs	r0, #0
   85c44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   85c46:	4261      	negs	r1, r4
   85c48:	4630      	mov	r0, r6
   85c4a:	f001 f8fb 	bl	86e44 <_sbrk_r>
   85c4e:	3001      	adds	r0, #1
   85c50:	d00d      	beq.n	85c6e <_malloc_trim_r+0x6e>
   85c52:	4b10      	ldr	r3, [pc, #64]	; (85c94 <_malloc_trim_r+0x94>)
   85c54:	68ba      	ldr	r2, [r7, #8]
   85c56:	6819      	ldr	r1, [r3, #0]
   85c58:	1b2d      	subs	r5, r5, r4
   85c5a:	f045 0501 	orr.w	r5, r5, #1
   85c5e:	4630      	mov	r0, r6
   85c60:	1b09      	subs	r1, r1, r4
   85c62:	6055      	str	r5, [r2, #4]
   85c64:	6019      	str	r1, [r3, #0]
   85c66:	f000 ff01 	bl	86a6c <__malloc_unlock>
   85c6a:	2001      	movs	r0, #1
   85c6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   85c6e:	2100      	movs	r1, #0
   85c70:	4630      	mov	r0, r6
   85c72:	f001 f8e7 	bl	86e44 <_sbrk_r>
   85c76:	68ba      	ldr	r2, [r7, #8]
   85c78:	1a83      	subs	r3, r0, r2
   85c7a:	2b0f      	cmp	r3, #15
   85c7c:	ddde      	ble.n	85c3c <_malloc_trim_r+0x3c>
   85c7e:	4c06      	ldr	r4, [pc, #24]	; (85c98 <_malloc_trim_r+0x98>)
   85c80:	4904      	ldr	r1, [pc, #16]	; (85c94 <_malloc_trim_r+0x94>)
   85c82:	6824      	ldr	r4, [r4, #0]
   85c84:	f043 0301 	orr.w	r3, r3, #1
   85c88:	1b00      	subs	r0, r0, r4
   85c8a:	6053      	str	r3, [r2, #4]
   85c8c:	6008      	str	r0, [r1, #0]
   85c8e:	e7d5      	b.n	85c3c <_malloc_trim_r+0x3c>
   85c90:	20070500 	.word	0x20070500
   85c94:	20070a04 	.word	0x20070a04
   85c98:	2007090c 	.word	0x2007090c

00085c9c <_free_r>:
   85c9c:	2900      	cmp	r1, #0
   85c9e:	d045      	beq.n	85d2c <_free_r+0x90>
   85ca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   85ca4:	460d      	mov	r5, r1
   85ca6:	4680      	mov	r8, r0
   85ca8:	f000 fede 	bl	86a68 <__malloc_lock>
   85cac:	f855 7c04 	ldr.w	r7, [r5, #-4]
   85cb0:	496a      	ldr	r1, [pc, #424]	; (85e5c <_free_r+0x1c0>)
   85cb2:	f1a5 0408 	sub.w	r4, r5, #8
   85cb6:	f027 0301 	bic.w	r3, r7, #1
   85cba:	18e2      	adds	r2, r4, r3
   85cbc:	688e      	ldr	r6, [r1, #8]
   85cbe:	6850      	ldr	r0, [r2, #4]
   85cc0:	42b2      	cmp	r2, r6
   85cc2:	f020 0003 	bic.w	r0, r0, #3
   85cc6:	d062      	beq.n	85d8e <_free_r+0xf2>
   85cc8:	07fe      	lsls	r6, r7, #31
   85cca:	6050      	str	r0, [r2, #4]
   85ccc:	d40b      	bmi.n	85ce6 <_free_r+0x4a>
   85cce:	f855 7c08 	ldr.w	r7, [r5, #-8]
   85cd2:	f101 0e08 	add.w	lr, r1, #8
   85cd6:	1be4      	subs	r4, r4, r7
   85cd8:	68a5      	ldr	r5, [r4, #8]
   85cda:	443b      	add	r3, r7
   85cdc:	4575      	cmp	r5, lr
   85cde:	d06f      	beq.n	85dc0 <_free_r+0x124>
   85ce0:	68e7      	ldr	r7, [r4, #12]
   85ce2:	60ef      	str	r7, [r5, #12]
   85ce4:	60bd      	str	r5, [r7, #8]
   85ce6:	1815      	adds	r5, r2, r0
   85ce8:	686d      	ldr	r5, [r5, #4]
   85cea:	07ed      	lsls	r5, r5, #31
   85cec:	d542      	bpl.n	85d74 <_free_r+0xd8>
   85cee:	f043 0201 	orr.w	r2, r3, #1
   85cf2:	6062      	str	r2, [r4, #4]
   85cf4:	50e3      	str	r3, [r4, r3]
   85cf6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   85cfa:	d218      	bcs.n	85d2e <_free_r+0x92>
   85cfc:	08db      	lsrs	r3, r3, #3
   85cfe:	6848      	ldr	r0, [r1, #4]
   85d00:	109d      	asrs	r5, r3, #2
   85d02:	2201      	movs	r2, #1
   85d04:	3301      	adds	r3, #1
   85d06:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   85d0a:	fa02 f505 	lsl.w	r5, r2, r5
   85d0e:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
   85d12:	4328      	orrs	r0, r5
   85d14:	3a08      	subs	r2, #8
   85d16:	60e2      	str	r2, [r4, #12]
   85d18:	60a7      	str	r7, [r4, #8]
   85d1a:	6048      	str	r0, [r1, #4]
   85d1c:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   85d20:	60fc      	str	r4, [r7, #12]
   85d22:	4640      	mov	r0, r8
   85d24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   85d28:	f000 bea0 	b.w	86a6c <__malloc_unlock>
   85d2c:	4770      	bx	lr
   85d2e:	0a5a      	lsrs	r2, r3, #9
   85d30:	2a04      	cmp	r2, #4
   85d32:	d853      	bhi.n	85ddc <_free_r+0x140>
   85d34:	099a      	lsrs	r2, r3, #6
   85d36:	f102 0739 	add.w	r7, r2, #57	; 0x39
   85d3a:	007f      	lsls	r7, r7, #1
   85d3c:	f102 0538 	add.w	r5, r2, #56	; 0x38
   85d40:	eb01 0087 	add.w	r0, r1, r7, lsl #2
   85d44:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
   85d48:	3808      	subs	r0, #8
   85d4a:	4290      	cmp	r0, r2
   85d4c:	4943      	ldr	r1, [pc, #268]	; (85e5c <_free_r+0x1c0>)
   85d4e:	d04d      	beq.n	85dec <_free_r+0x150>
   85d50:	6851      	ldr	r1, [r2, #4]
   85d52:	f021 0103 	bic.w	r1, r1, #3
   85d56:	428b      	cmp	r3, r1
   85d58:	d202      	bcs.n	85d60 <_free_r+0xc4>
   85d5a:	6892      	ldr	r2, [r2, #8]
   85d5c:	4290      	cmp	r0, r2
   85d5e:	d1f7      	bne.n	85d50 <_free_r+0xb4>
   85d60:	68d0      	ldr	r0, [r2, #12]
   85d62:	60e0      	str	r0, [r4, #12]
   85d64:	60a2      	str	r2, [r4, #8]
   85d66:	6084      	str	r4, [r0, #8]
   85d68:	60d4      	str	r4, [r2, #12]
   85d6a:	4640      	mov	r0, r8
   85d6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   85d70:	f000 be7c 	b.w	86a6c <__malloc_unlock>
   85d74:	6895      	ldr	r5, [r2, #8]
   85d76:	4f3a      	ldr	r7, [pc, #232]	; (85e60 <_free_r+0x1c4>)
   85d78:	4403      	add	r3, r0
   85d7a:	42bd      	cmp	r5, r7
   85d7c:	d03f      	beq.n	85dfe <_free_r+0x162>
   85d7e:	68d0      	ldr	r0, [r2, #12]
   85d80:	f043 0201 	orr.w	r2, r3, #1
   85d84:	60e8      	str	r0, [r5, #12]
   85d86:	6085      	str	r5, [r0, #8]
   85d88:	6062      	str	r2, [r4, #4]
   85d8a:	50e3      	str	r3, [r4, r3]
   85d8c:	e7b3      	b.n	85cf6 <_free_r+0x5a>
   85d8e:	07ff      	lsls	r7, r7, #31
   85d90:	4403      	add	r3, r0
   85d92:	d407      	bmi.n	85da4 <_free_r+0x108>
   85d94:	f855 5c08 	ldr.w	r5, [r5, #-8]
   85d98:	1b64      	subs	r4, r4, r5
   85d9a:	68e2      	ldr	r2, [r4, #12]
   85d9c:	68a0      	ldr	r0, [r4, #8]
   85d9e:	442b      	add	r3, r5
   85da0:	60c2      	str	r2, [r0, #12]
   85da2:	6090      	str	r0, [r2, #8]
   85da4:	4a2f      	ldr	r2, [pc, #188]	; (85e64 <_free_r+0x1c8>)
   85da6:	f043 0001 	orr.w	r0, r3, #1
   85daa:	6812      	ldr	r2, [r2, #0]
   85dac:	6060      	str	r0, [r4, #4]
   85dae:	4293      	cmp	r3, r2
   85db0:	608c      	str	r4, [r1, #8]
   85db2:	d3b6      	bcc.n	85d22 <_free_r+0x86>
   85db4:	4b2c      	ldr	r3, [pc, #176]	; (85e68 <_free_r+0x1cc>)
   85db6:	4640      	mov	r0, r8
   85db8:	6819      	ldr	r1, [r3, #0]
   85dba:	f7ff ff21 	bl	85c00 <_malloc_trim_r>
   85dbe:	e7b0      	b.n	85d22 <_free_r+0x86>
   85dc0:	1811      	adds	r1, r2, r0
   85dc2:	6849      	ldr	r1, [r1, #4]
   85dc4:	07c9      	lsls	r1, r1, #31
   85dc6:	d444      	bmi.n	85e52 <_free_r+0x1b6>
   85dc8:	6891      	ldr	r1, [r2, #8]
   85dca:	4403      	add	r3, r0
   85dcc:	68d2      	ldr	r2, [r2, #12]
   85dce:	f043 0001 	orr.w	r0, r3, #1
   85dd2:	60ca      	str	r2, [r1, #12]
   85dd4:	6091      	str	r1, [r2, #8]
   85dd6:	6060      	str	r0, [r4, #4]
   85dd8:	50e3      	str	r3, [r4, r3]
   85dda:	e7a2      	b.n	85d22 <_free_r+0x86>
   85ddc:	2a14      	cmp	r2, #20
   85dde:	d817      	bhi.n	85e10 <_free_r+0x174>
   85de0:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   85de4:	007f      	lsls	r7, r7, #1
   85de6:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   85dea:	e7a9      	b.n	85d40 <_free_r+0xa4>
   85dec:	10aa      	asrs	r2, r5, #2
   85dee:	684b      	ldr	r3, [r1, #4]
   85df0:	2501      	movs	r5, #1
   85df2:	fa05 f202 	lsl.w	r2, r5, r2
   85df6:	4313      	orrs	r3, r2
   85df8:	604b      	str	r3, [r1, #4]
   85dfa:	4602      	mov	r2, r0
   85dfc:	e7b1      	b.n	85d62 <_free_r+0xc6>
   85dfe:	f043 0201 	orr.w	r2, r3, #1
   85e02:	614c      	str	r4, [r1, #20]
   85e04:	610c      	str	r4, [r1, #16]
   85e06:	60e5      	str	r5, [r4, #12]
   85e08:	60a5      	str	r5, [r4, #8]
   85e0a:	6062      	str	r2, [r4, #4]
   85e0c:	50e3      	str	r3, [r4, r3]
   85e0e:	e788      	b.n	85d22 <_free_r+0x86>
   85e10:	2a54      	cmp	r2, #84	; 0x54
   85e12:	d806      	bhi.n	85e22 <_free_r+0x186>
   85e14:	0b1a      	lsrs	r2, r3, #12
   85e16:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   85e1a:	007f      	lsls	r7, r7, #1
   85e1c:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   85e20:	e78e      	b.n	85d40 <_free_r+0xa4>
   85e22:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   85e26:	d806      	bhi.n	85e36 <_free_r+0x19a>
   85e28:	0bda      	lsrs	r2, r3, #15
   85e2a:	f102 0778 	add.w	r7, r2, #120	; 0x78
   85e2e:	007f      	lsls	r7, r7, #1
   85e30:	f102 0577 	add.w	r5, r2, #119	; 0x77
   85e34:	e784      	b.n	85d40 <_free_r+0xa4>
   85e36:	f240 5054 	movw	r0, #1364	; 0x554
   85e3a:	4282      	cmp	r2, r0
   85e3c:	d806      	bhi.n	85e4c <_free_r+0x1b0>
   85e3e:	0c9a      	lsrs	r2, r3, #18
   85e40:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   85e44:	007f      	lsls	r7, r7, #1
   85e46:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   85e4a:	e779      	b.n	85d40 <_free_r+0xa4>
   85e4c:	27fe      	movs	r7, #254	; 0xfe
   85e4e:	257e      	movs	r5, #126	; 0x7e
   85e50:	e776      	b.n	85d40 <_free_r+0xa4>
   85e52:	f043 0201 	orr.w	r2, r3, #1
   85e56:	6062      	str	r2, [r4, #4]
   85e58:	50e3      	str	r3, [r4, r3]
   85e5a:	e762      	b.n	85d22 <_free_r+0x86>
   85e5c:	20070500 	.word	0x20070500
   85e60:	20070508 	.word	0x20070508
   85e64:	20070908 	.word	0x20070908
   85e68:	20070a00 	.word	0x20070a00

00085e6c <__sfvwrite_r>:
   85e6c:	6893      	ldr	r3, [r2, #8]
   85e6e:	2b00      	cmp	r3, #0
   85e70:	f000 80ab 	beq.w	85fca <__sfvwrite_r+0x15e>
   85e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85e78:	898b      	ldrh	r3, [r1, #12]
   85e7a:	b085      	sub	sp, #20
   85e7c:	460c      	mov	r4, r1
   85e7e:	0719      	lsls	r1, r3, #28
   85e80:	9002      	str	r0, [sp, #8]
   85e82:	4616      	mov	r6, r2
   85e84:	d528      	bpl.n	85ed8 <__sfvwrite_r+0x6c>
   85e86:	6922      	ldr	r2, [r4, #16]
   85e88:	b332      	cbz	r2, 85ed8 <__sfvwrite_r+0x6c>
   85e8a:	f003 0802 	and.w	r8, r3, #2
   85e8e:	fa1f f088 	uxth.w	r0, r8
   85e92:	6835      	ldr	r5, [r6, #0]
   85e94:	b378      	cbz	r0, 85ef6 <__sfvwrite_r+0x8a>
   85e96:	f04f 0900 	mov.w	r9, #0
   85e9a:	46c8      	mov	r8, r9
   85e9c:	f8df a2d0 	ldr.w	sl, [pc, #720]	; 86170 <__sfvwrite_r+0x304>
   85ea0:	f1b8 0f00 	cmp.w	r8, #0
   85ea4:	f000 808b 	beq.w	85fbe <__sfvwrite_r+0x152>
   85ea8:	45d0      	cmp	r8, sl
   85eaa:	4643      	mov	r3, r8
   85eac:	464a      	mov	r2, r9
   85eae:	bf28      	it	cs
   85eb0:	4653      	movcs	r3, sl
   85eb2:	69e1      	ldr	r1, [r4, #28]
   85eb4:	9802      	ldr	r0, [sp, #8]
   85eb6:	6a67      	ldr	r7, [r4, #36]	; 0x24
   85eb8:	47b8      	blx	r7
   85eba:	2800      	cmp	r0, #0
   85ebc:	f340 80a5 	ble.w	8600a <__sfvwrite_r+0x19e>
   85ec0:	68b3      	ldr	r3, [r6, #8]
   85ec2:	4481      	add	r9, r0
   85ec4:	1a1b      	subs	r3, r3, r0
   85ec6:	ebc0 0808 	rsb	r8, r0, r8
   85eca:	60b3      	str	r3, [r6, #8]
   85ecc:	2b00      	cmp	r3, #0
   85ece:	d1e7      	bne.n	85ea0 <__sfvwrite_r+0x34>
   85ed0:	2000      	movs	r0, #0
   85ed2:	b005      	add	sp, #20
   85ed4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85ed8:	4621      	mov	r1, r4
   85eda:	9802      	ldr	r0, [sp, #8]
   85edc:	f7ff fc6a 	bl	857b4 <__swsetup_r>
   85ee0:	2800      	cmp	r0, #0
   85ee2:	f040 813c 	bne.w	8615e <__sfvwrite_r+0x2f2>
   85ee6:	89a3      	ldrh	r3, [r4, #12]
   85ee8:	6835      	ldr	r5, [r6, #0]
   85eea:	f003 0802 	and.w	r8, r3, #2
   85eee:	fa1f f088 	uxth.w	r0, r8
   85ef2:	2800      	cmp	r0, #0
   85ef4:	d1cf      	bne.n	85e96 <__sfvwrite_r+0x2a>
   85ef6:	f013 0901 	ands.w	r9, r3, #1
   85efa:	f040 8090 	bne.w	8601e <__sfvwrite_r+0x1b2>
   85efe:	464f      	mov	r7, r9
   85f00:	9601      	str	r6, [sp, #4]
   85f02:	2f00      	cmp	r7, #0
   85f04:	d056      	beq.n	85fb4 <__sfvwrite_r+0x148>
   85f06:	059a      	lsls	r2, r3, #22
   85f08:	f8d4 8008 	ldr.w	r8, [r4, #8]
   85f0c:	d55f      	bpl.n	85fce <__sfvwrite_r+0x162>
   85f0e:	4547      	cmp	r7, r8
   85f10:	46c2      	mov	sl, r8
   85f12:	f0c0 80bf 	bcc.w	86094 <__sfvwrite_r+0x228>
   85f16:	f413 6f90 	tst.w	r3, #1152	; 0x480
   85f1a:	f000 80bd 	beq.w	86098 <__sfvwrite_r+0x22c>
   85f1e:	6962      	ldr	r2, [r4, #20]
   85f20:	6820      	ldr	r0, [r4, #0]
   85f22:	6921      	ldr	r1, [r4, #16]
   85f24:	eb02 0842 	add.w	r8, r2, r2, lsl #1
   85f28:	ebc1 0a00 	rsb	sl, r1, r0
   85f2c:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
   85f30:	f10a 0001 	add.w	r0, sl, #1
   85f34:	ea4f 0868 	mov.w	r8, r8, asr #1
   85f38:	4438      	add	r0, r7
   85f3a:	4540      	cmp	r0, r8
   85f3c:	4642      	mov	r2, r8
   85f3e:	bf84      	itt	hi
   85f40:	4680      	movhi	r8, r0
   85f42:	4642      	movhi	r2, r8
   85f44:	055b      	lsls	r3, r3, #21
   85f46:	f140 80f2 	bpl.w	8612e <__sfvwrite_r+0x2c2>
   85f4a:	4611      	mov	r1, r2
   85f4c:	9802      	ldr	r0, [sp, #8]
   85f4e:	f000 f9bf 	bl	862d0 <_malloc_r>
   85f52:	4683      	mov	fp, r0
   85f54:	2800      	cmp	r0, #0
   85f56:	f000 8105 	beq.w	86164 <__sfvwrite_r+0x2f8>
   85f5a:	4652      	mov	r2, sl
   85f5c:	6921      	ldr	r1, [r4, #16]
   85f5e:	f000 fca9 	bl	868b4 <memcpy>
   85f62:	89a3      	ldrh	r3, [r4, #12]
   85f64:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   85f68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   85f6c:	81a3      	strh	r3, [r4, #12]
   85f6e:	ebca 0308 	rsb	r3, sl, r8
   85f72:	eb0b 000a 	add.w	r0, fp, sl
   85f76:	f8c4 8014 	str.w	r8, [r4, #20]
   85f7a:	46ba      	mov	sl, r7
   85f7c:	46b8      	mov	r8, r7
   85f7e:	f8c4 b010 	str.w	fp, [r4, #16]
   85f82:	6020      	str	r0, [r4, #0]
   85f84:	60a3      	str	r3, [r4, #8]
   85f86:	4652      	mov	r2, sl
   85f88:	4649      	mov	r1, r9
   85f8a:	f000 fd09 	bl	869a0 <memmove>
   85f8e:	68a0      	ldr	r0, [r4, #8]
   85f90:	6823      	ldr	r3, [r4, #0]
   85f92:	ebc8 0000 	rsb	r0, r8, r0
   85f96:	60a0      	str	r0, [r4, #8]
   85f98:	4638      	mov	r0, r7
   85f9a:	4453      	add	r3, sl
   85f9c:	6023      	str	r3, [r4, #0]
   85f9e:	9a01      	ldr	r2, [sp, #4]
   85fa0:	4481      	add	r9, r0
   85fa2:	6893      	ldr	r3, [r2, #8]
   85fa4:	1a3f      	subs	r7, r7, r0
   85fa6:	1a1b      	subs	r3, r3, r0
   85fa8:	6093      	str	r3, [r2, #8]
   85faa:	2b00      	cmp	r3, #0
   85fac:	d090      	beq.n	85ed0 <__sfvwrite_r+0x64>
   85fae:	89a3      	ldrh	r3, [r4, #12]
   85fb0:	2f00      	cmp	r7, #0
   85fb2:	d1a8      	bne.n	85f06 <__sfvwrite_r+0x9a>
   85fb4:	f8d5 9000 	ldr.w	r9, [r5]
   85fb8:	686f      	ldr	r7, [r5, #4]
   85fba:	3508      	adds	r5, #8
   85fbc:	e7a1      	b.n	85f02 <__sfvwrite_r+0x96>
   85fbe:	f8d5 9000 	ldr.w	r9, [r5]
   85fc2:	f8d5 8004 	ldr.w	r8, [r5, #4]
   85fc6:	3508      	adds	r5, #8
   85fc8:	e76a      	b.n	85ea0 <__sfvwrite_r+0x34>
   85fca:	2000      	movs	r0, #0
   85fcc:	4770      	bx	lr
   85fce:	6820      	ldr	r0, [r4, #0]
   85fd0:	6923      	ldr	r3, [r4, #16]
   85fd2:	4298      	cmp	r0, r3
   85fd4:	d803      	bhi.n	85fde <__sfvwrite_r+0x172>
   85fd6:	6962      	ldr	r2, [r4, #20]
   85fd8:	4297      	cmp	r7, r2
   85fda:	f080 8083 	bcs.w	860e4 <__sfvwrite_r+0x278>
   85fde:	45b8      	cmp	r8, r7
   85fe0:	bf28      	it	cs
   85fe2:	46b8      	movcs	r8, r7
   85fe4:	4649      	mov	r1, r9
   85fe6:	4642      	mov	r2, r8
   85fe8:	f000 fcda 	bl	869a0 <memmove>
   85fec:	68a3      	ldr	r3, [r4, #8]
   85fee:	6822      	ldr	r2, [r4, #0]
   85ff0:	ebc8 0303 	rsb	r3, r8, r3
   85ff4:	4442      	add	r2, r8
   85ff6:	60a3      	str	r3, [r4, #8]
   85ff8:	6022      	str	r2, [r4, #0]
   85ffa:	2b00      	cmp	r3, #0
   85ffc:	d148      	bne.n	86090 <__sfvwrite_r+0x224>
   85ffe:	4621      	mov	r1, r4
   86000:	9802      	ldr	r0, [sp, #8]
   86002:	f7ff fcef 	bl	859e4 <_fflush_r>
   86006:	2800      	cmp	r0, #0
   86008:	d042      	beq.n	86090 <__sfvwrite_r+0x224>
   8600a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8600e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   86012:	f04f 30ff 	mov.w	r0, #4294967295
   86016:	81a3      	strh	r3, [r4, #12]
   86018:	b005      	add	sp, #20
   8601a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8601e:	4680      	mov	r8, r0
   86020:	4682      	mov	sl, r0
   86022:	4681      	mov	r9, r0
   86024:	9001      	str	r0, [sp, #4]
   86026:	f1b9 0f00 	cmp.w	r9, #0
   8602a:	d029      	beq.n	86080 <__sfvwrite_r+0x214>
   8602c:	9b01      	ldr	r3, [sp, #4]
   8602e:	2b00      	cmp	r3, #0
   86030:	d04b      	beq.n	860ca <__sfvwrite_r+0x25e>
   86032:	45c8      	cmp	r8, r9
   86034:	46c3      	mov	fp, r8
   86036:	bf28      	it	cs
   86038:	46cb      	movcs	fp, r9
   8603a:	6820      	ldr	r0, [r4, #0]
   8603c:	6923      	ldr	r3, [r4, #16]
   8603e:	465f      	mov	r7, fp
   86040:	4298      	cmp	r0, r3
   86042:	6962      	ldr	r2, [r4, #20]
   86044:	d903      	bls.n	8604e <__sfvwrite_r+0x1e2>
   86046:	68a3      	ldr	r3, [r4, #8]
   86048:	4413      	add	r3, r2
   8604a:	459b      	cmp	fp, r3
   8604c:	dc5c      	bgt.n	86108 <__sfvwrite_r+0x29c>
   8604e:	4593      	cmp	fp, r2
   86050:	db24      	blt.n	8609c <__sfvwrite_r+0x230>
   86052:	4613      	mov	r3, r2
   86054:	6a67      	ldr	r7, [r4, #36]	; 0x24
   86056:	4652      	mov	r2, sl
   86058:	69e1      	ldr	r1, [r4, #28]
   8605a:	9802      	ldr	r0, [sp, #8]
   8605c:	47b8      	blx	r7
   8605e:	1e07      	subs	r7, r0, #0
   86060:	ddd3      	ble.n	8600a <__sfvwrite_r+0x19e>
   86062:	ebb8 0807 	subs.w	r8, r8, r7
   86066:	d027      	beq.n	860b8 <__sfvwrite_r+0x24c>
   86068:	68b3      	ldr	r3, [r6, #8]
   8606a:	44ba      	add	sl, r7
   8606c:	1bdb      	subs	r3, r3, r7
   8606e:	ebc7 0909 	rsb	r9, r7, r9
   86072:	60b3      	str	r3, [r6, #8]
   86074:	2b00      	cmp	r3, #0
   86076:	f43f af2b 	beq.w	85ed0 <__sfvwrite_r+0x64>
   8607a:	f1b9 0f00 	cmp.w	r9, #0
   8607e:	d1d5      	bne.n	8602c <__sfvwrite_r+0x1c0>
   86080:	2300      	movs	r3, #0
   86082:	f8d5 a000 	ldr.w	sl, [r5]
   86086:	f8d5 9004 	ldr.w	r9, [r5, #4]
   8608a:	9301      	str	r3, [sp, #4]
   8608c:	3508      	adds	r5, #8
   8608e:	e7ca      	b.n	86026 <__sfvwrite_r+0x1ba>
   86090:	4640      	mov	r0, r8
   86092:	e784      	b.n	85f9e <__sfvwrite_r+0x132>
   86094:	46b8      	mov	r8, r7
   86096:	46ba      	mov	sl, r7
   86098:	6820      	ldr	r0, [r4, #0]
   8609a:	e774      	b.n	85f86 <__sfvwrite_r+0x11a>
   8609c:	465a      	mov	r2, fp
   8609e:	4651      	mov	r1, sl
   860a0:	f000 fc7e 	bl	869a0 <memmove>
   860a4:	68a2      	ldr	r2, [r4, #8]
   860a6:	6823      	ldr	r3, [r4, #0]
   860a8:	ebcb 0202 	rsb	r2, fp, r2
   860ac:	445b      	add	r3, fp
   860ae:	ebb8 0807 	subs.w	r8, r8, r7
   860b2:	60a2      	str	r2, [r4, #8]
   860b4:	6023      	str	r3, [r4, #0]
   860b6:	d1d7      	bne.n	86068 <__sfvwrite_r+0x1fc>
   860b8:	4621      	mov	r1, r4
   860ba:	9802      	ldr	r0, [sp, #8]
   860bc:	f7ff fc92 	bl	859e4 <_fflush_r>
   860c0:	2800      	cmp	r0, #0
   860c2:	d1a2      	bne.n	8600a <__sfvwrite_r+0x19e>
   860c4:	f8cd 8004 	str.w	r8, [sp, #4]
   860c8:	e7ce      	b.n	86068 <__sfvwrite_r+0x1fc>
   860ca:	464a      	mov	r2, r9
   860cc:	210a      	movs	r1, #10
   860ce:	4650      	mov	r0, sl
   860d0:	f000 fbaa 	bl	86828 <memchr>
   860d4:	2800      	cmp	r0, #0
   860d6:	d03d      	beq.n	86154 <__sfvwrite_r+0x2e8>
   860d8:	3001      	adds	r0, #1
   860da:	2301      	movs	r3, #1
   860dc:	ebca 0800 	rsb	r8, sl, r0
   860e0:	9301      	str	r3, [sp, #4]
   860e2:	e7a6      	b.n	86032 <__sfvwrite_r+0x1c6>
   860e4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   860e8:	42bb      	cmp	r3, r7
   860ea:	bf28      	it	cs
   860ec:	463b      	movcs	r3, r7
   860ee:	fb93 f3f2 	sdiv	r3, r3, r2
   860f2:	69e1      	ldr	r1, [r4, #28]
   860f4:	fb02 f303 	mul.w	r3, r2, r3
   860f8:	9802      	ldr	r0, [sp, #8]
   860fa:	464a      	mov	r2, r9
   860fc:	6a66      	ldr	r6, [r4, #36]	; 0x24
   860fe:	47b0      	blx	r6
   86100:	2800      	cmp	r0, #0
   86102:	f73f af4c 	bgt.w	85f9e <__sfvwrite_r+0x132>
   86106:	e780      	b.n	8600a <__sfvwrite_r+0x19e>
   86108:	461a      	mov	r2, r3
   8610a:	4651      	mov	r1, sl
   8610c:	9303      	str	r3, [sp, #12]
   8610e:	f000 fc47 	bl	869a0 <memmove>
   86112:	6822      	ldr	r2, [r4, #0]
   86114:	9b03      	ldr	r3, [sp, #12]
   86116:	4621      	mov	r1, r4
   86118:	441a      	add	r2, r3
   8611a:	6022      	str	r2, [r4, #0]
   8611c:	9802      	ldr	r0, [sp, #8]
   8611e:	f7ff fc61 	bl	859e4 <_fflush_r>
   86122:	9b03      	ldr	r3, [sp, #12]
   86124:	2800      	cmp	r0, #0
   86126:	f47f af70 	bne.w	8600a <__sfvwrite_r+0x19e>
   8612a:	461f      	mov	r7, r3
   8612c:	e799      	b.n	86062 <__sfvwrite_r+0x1f6>
   8612e:	9802      	ldr	r0, [sp, #8]
   86130:	f000 fc9e 	bl	86a70 <_realloc_r>
   86134:	4683      	mov	fp, r0
   86136:	2800      	cmp	r0, #0
   86138:	f47f af19 	bne.w	85f6e <__sfvwrite_r+0x102>
   8613c:	9d02      	ldr	r5, [sp, #8]
   8613e:	6921      	ldr	r1, [r4, #16]
   86140:	4628      	mov	r0, r5
   86142:	f7ff fdab 	bl	85c9c <_free_r>
   86146:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8614a:	220c      	movs	r2, #12
   8614c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   86150:	602a      	str	r2, [r5, #0]
   86152:	e75c      	b.n	8600e <__sfvwrite_r+0x1a2>
   86154:	2301      	movs	r3, #1
   86156:	f109 0801 	add.w	r8, r9, #1
   8615a:	9301      	str	r3, [sp, #4]
   8615c:	e769      	b.n	86032 <__sfvwrite_r+0x1c6>
   8615e:	f04f 30ff 	mov.w	r0, #4294967295
   86162:	e6b6      	b.n	85ed2 <__sfvwrite_r+0x66>
   86164:	9a02      	ldr	r2, [sp, #8]
   86166:	230c      	movs	r3, #12
   86168:	6013      	str	r3, [r2, #0]
   8616a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8616e:	e74e      	b.n	8600e <__sfvwrite_r+0x1a2>
   86170:	7ffffc00 	.word	0x7ffffc00

00086174 <_fwalk_reent>:
   86174:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   86178:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   8617c:	d01e      	beq.n	861bc <_fwalk_reent+0x48>
   8617e:	4688      	mov	r8, r1
   86180:	4607      	mov	r7, r0
   86182:	f04f 0900 	mov.w	r9, #0
   86186:	6875      	ldr	r5, [r6, #4]
   86188:	68b4      	ldr	r4, [r6, #8]
   8618a:	3d01      	subs	r5, #1
   8618c:	d410      	bmi.n	861b0 <_fwalk_reent+0x3c>
   8618e:	89a3      	ldrh	r3, [r4, #12]
   86190:	3d01      	subs	r5, #1
   86192:	2b01      	cmp	r3, #1
   86194:	d908      	bls.n	861a8 <_fwalk_reent+0x34>
   86196:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   8619a:	3301      	adds	r3, #1
   8619c:	d004      	beq.n	861a8 <_fwalk_reent+0x34>
   8619e:	4621      	mov	r1, r4
   861a0:	4638      	mov	r0, r7
   861a2:	47c0      	blx	r8
   861a4:	ea49 0900 	orr.w	r9, r9, r0
   861a8:	1c6b      	adds	r3, r5, #1
   861aa:	f104 0468 	add.w	r4, r4, #104	; 0x68
   861ae:	d1ee      	bne.n	8618e <_fwalk_reent+0x1a>
   861b0:	6836      	ldr	r6, [r6, #0]
   861b2:	2e00      	cmp	r6, #0
   861b4:	d1e7      	bne.n	86186 <_fwalk_reent+0x12>
   861b6:	4648      	mov	r0, r9
   861b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   861bc:	46b1      	mov	r9, r6
   861be:	4648      	mov	r0, r9
   861c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000861c4 <__locale_charset>:
   861c4:	4800      	ldr	r0, [pc, #0]	; (861c8 <__locale_charset+0x4>)
   861c6:	4770      	bx	lr
   861c8:	200704dc 	.word	0x200704dc

000861cc <__locale_mb_cur_max>:
   861cc:	4b01      	ldr	r3, [pc, #4]	; (861d4 <__locale_mb_cur_max+0x8>)
   861ce:	6818      	ldr	r0, [r3, #0]
   861d0:	4770      	bx	lr
   861d2:	bf00      	nop
   861d4:	200704fc 	.word	0x200704fc

000861d8 <__swhatbuf_r>:
   861d8:	b570      	push	{r4, r5, r6, lr}
   861da:	460e      	mov	r6, r1
   861dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   861e0:	b090      	sub	sp, #64	; 0x40
   861e2:	2900      	cmp	r1, #0
   861e4:	4614      	mov	r4, r2
   861e6:	461d      	mov	r5, r3
   861e8:	db14      	blt.n	86214 <__swhatbuf_r+0x3c>
   861ea:	aa01      	add	r2, sp, #4
   861ec:	f000 ffca 	bl	87184 <_fstat_r>
   861f0:	2800      	cmp	r0, #0
   861f2:	db0f      	blt.n	86214 <__swhatbuf_r+0x3c>
   861f4:	9a02      	ldr	r2, [sp, #8]
   861f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
   861fa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   861fe:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   86202:	fab2 f282 	clz	r2, r2
   86206:	f44f 6000 	mov.w	r0, #2048	; 0x800
   8620a:	0952      	lsrs	r2, r2, #5
   8620c:	602a      	str	r2, [r5, #0]
   8620e:	6023      	str	r3, [r4, #0]
   86210:	b010      	add	sp, #64	; 0x40
   86212:	bd70      	pop	{r4, r5, r6, pc}
   86214:	89b2      	ldrh	r2, [r6, #12]
   86216:	2000      	movs	r0, #0
   86218:	f002 0280 	and.w	r2, r2, #128	; 0x80
   8621c:	b292      	uxth	r2, r2
   8621e:	6028      	str	r0, [r5, #0]
   86220:	b11a      	cbz	r2, 8622a <__swhatbuf_r+0x52>
   86222:	2340      	movs	r3, #64	; 0x40
   86224:	6023      	str	r3, [r4, #0]
   86226:	b010      	add	sp, #64	; 0x40
   86228:	bd70      	pop	{r4, r5, r6, pc}
   8622a:	4610      	mov	r0, r2
   8622c:	f44f 6380 	mov.w	r3, #1024	; 0x400
   86230:	6023      	str	r3, [r4, #0]
   86232:	b010      	add	sp, #64	; 0x40
   86234:	bd70      	pop	{r4, r5, r6, pc}
   86236:	bf00      	nop

00086238 <__smakebuf_r>:
   86238:	898a      	ldrh	r2, [r1, #12]
   8623a:	460b      	mov	r3, r1
   8623c:	0792      	lsls	r2, r2, #30
   8623e:	d506      	bpl.n	8624e <__smakebuf_r+0x16>
   86240:	f101 0243 	add.w	r2, r1, #67	; 0x43
   86244:	2101      	movs	r1, #1
   86246:	601a      	str	r2, [r3, #0]
   86248:	611a      	str	r2, [r3, #16]
   8624a:	6159      	str	r1, [r3, #20]
   8624c:	4770      	bx	lr
   8624e:	b5f0      	push	{r4, r5, r6, r7, lr}
   86250:	b083      	sub	sp, #12
   86252:	ab01      	add	r3, sp, #4
   86254:	466a      	mov	r2, sp
   86256:	460c      	mov	r4, r1
   86258:	4605      	mov	r5, r0
   8625a:	f7ff ffbd 	bl	861d8 <__swhatbuf_r>
   8625e:	9900      	ldr	r1, [sp, #0]
   86260:	4606      	mov	r6, r0
   86262:	4628      	mov	r0, r5
   86264:	f000 f834 	bl	862d0 <_malloc_r>
   86268:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8626c:	b1d0      	cbz	r0, 862a4 <__smakebuf_r+0x6c>
   8626e:	e89d 0006 	ldmia.w	sp, {r1, r2}
   86272:	4f12      	ldr	r7, [pc, #72]	; (862bc <__smakebuf_r+0x84>)
   86274:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   86278:	63ef      	str	r7, [r5, #60]	; 0x3c
   8627a:	81a3      	strh	r3, [r4, #12]
   8627c:	6020      	str	r0, [r4, #0]
   8627e:	6120      	str	r0, [r4, #16]
   86280:	6161      	str	r1, [r4, #20]
   86282:	b91a      	cbnz	r2, 8628c <__smakebuf_r+0x54>
   86284:	4333      	orrs	r3, r6
   86286:	81a3      	strh	r3, [r4, #12]
   86288:	b003      	add	sp, #12
   8628a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8628c:	4628      	mov	r0, r5
   8628e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   86292:	f000 ff8b 	bl	871ac <_isatty_r>
   86296:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8629a:	2800      	cmp	r0, #0
   8629c:	d0f2      	beq.n	86284 <__smakebuf_r+0x4c>
   8629e:	f043 0301 	orr.w	r3, r3, #1
   862a2:	e7ef      	b.n	86284 <__smakebuf_r+0x4c>
   862a4:	059a      	lsls	r2, r3, #22
   862a6:	d4ef      	bmi.n	86288 <__smakebuf_r+0x50>
   862a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
   862ac:	f043 0302 	orr.w	r3, r3, #2
   862b0:	2101      	movs	r1, #1
   862b2:	81a3      	strh	r3, [r4, #12]
   862b4:	6022      	str	r2, [r4, #0]
   862b6:	6122      	str	r2, [r4, #16]
   862b8:	6161      	str	r1, [r4, #20]
   862ba:	e7e5      	b.n	86288 <__smakebuf_r+0x50>
   862bc:	00085a11 	.word	0x00085a11

000862c0 <malloc>:
   862c0:	4b02      	ldr	r3, [pc, #8]	; (862cc <malloc+0xc>)
   862c2:	4601      	mov	r1, r0
   862c4:	6818      	ldr	r0, [r3, #0]
   862c6:	f000 b803 	b.w	862d0 <_malloc_r>
   862ca:	bf00      	nop
   862cc:	200704d8 	.word	0x200704d8

000862d0 <_malloc_r>:
   862d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   862d4:	f101 050b 	add.w	r5, r1, #11
   862d8:	2d16      	cmp	r5, #22
   862da:	b083      	sub	sp, #12
   862dc:	4606      	mov	r6, r0
   862de:	f240 80a0 	bls.w	86422 <_malloc_r+0x152>
   862e2:	f035 0507 	bics.w	r5, r5, #7
   862e6:	f100 80c0 	bmi.w	8646a <_malloc_r+0x19a>
   862ea:	42a9      	cmp	r1, r5
   862ec:	f200 80bd 	bhi.w	8646a <_malloc_r+0x19a>
   862f0:	f000 fbba 	bl	86a68 <__malloc_lock>
   862f4:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   862f8:	f0c0 8290 	bcc.w	8681c <_malloc_r+0x54c>
   862fc:	0a6b      	lsrs	r3, r5, #9
   862fe:	f000 80bb 	beq.w	86478 <_malloc_r+0x1a8>
   86302:	2b04      	cmp	r3, #4
   86304:	f200 8177 	bhi.w	865f6 <_malloc_r+0x326>
   86308:	09a8      	lsrs	r0, r5, #6
   8630a:	f100 0e39 	add.w	lr, r0, #57	; 0x39
   8630e:	ea4f 014e 	mov.w	r1, lr, lsl #1
   86312:	3038      	adds	r0, #56	; 0x38
   86314:	4fbe      	ldr	r7, [pc, #760]	; (86610 <_malloc_r+0x340>)
   86316:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   8631a:	684c      	ldr	r4, [r1, #4]
   8631c:	3908      	subs	r1, #8
   8631e:	42a1      	cmp	r1, r4
   86320:	d107      	bne.n	86332 <_malloc_r+0x62>
   86322:	e0ae      	b.n	86482 <_malloc_r+0x1b2>
   86324:	2a00      	cmp	r2, #0
   86326:	f280 80ae 	bge.w	86486 <_malloc_r+0x1b6>
   8632a:	68e4      	ldr	r4, [r4, #12]
   8632c:	42a1      	cmp	r1, r4
   8632e:	f000 80a8 	beq.w	86482 <_malloc_r+0x1b2>
   86332:	6863      	ldr	r3, [r4, #4]
   86334:	f023 0303 	bic.w	r3, r3, #3
   86338:	1b5a      	subs	r2, r3, r5
   8633a:	2a0f      	cmp	r2, #15
   8633c:	ddf2      	ble.n	86324 <_malloc_r+0x54>
   8633e:	49b4      	ldr	r1, [pc, #720]	; (86610 <_malloc_r+0x340>)
   86340:	693c      	ldr	r4, [r7, #16]
   86342:	f101 0e08 	add.w	lr, r1, #8
   86346:	4574      	cmp	r4, lr
   86348:	f000 81a8 	beq.w	8669c <_malloc_r+0x3cc>
   8634c:	6863      	ldr	r3, [r4, #4]
   8634e:	f023 0303 	bic.w	r3, r3, #3
   86352:	1b5a      	subs	r2, r3, r5
   86354:	2a0f      	cmp	r2, #15
   86356:	f300 818e 	bgt.w	86676 <_malloc_r+0x3a6>
   8635a:	2a00      	cmp	r2, #0
   8635c:	f8c1 e014 	str.w	lr, [r1, #20]
   86360:	f8c1 e010 	str.w	lr, [r1, #16]
   86364:	f280 8093 	bge.w	8648e <_malloc_r+0x1be>
   86368:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   8636c:	f080 815c 	bcs.w	86628 <_malloc_r+0x358>
   86370:	08db      	lsrs	r3, r3, #3
   86372:	684a      	ldr	r2, [r1, #4]
   86374:	ea4f 09a3 	mov.w	r9, r3, asr #2
   86378:	f04f 0c01 	mov.w	ip, #1
   8637c:	3301      	adds	r3, #1
   8637e:	f851 8033 	ldr.w	r8, [r1, r3, lsl #3]
   86382:	fa0c f909 	lsl.w	r9, ip, r9
   86386:	eb01 0cc3 	add.w	ip, r1, r3, lsl #3
   8638a:	ea49 0202 	orr.w	r2, r9, r2
   8638e:	f1ac 0c08 	sub.w	ip, ip, #8
   86392:	f8c4 c00c 	str.w	ip, [r4, #12]
   86396:	f8c4 8008 	str.w	r8, [r4, #8]
   8639a:	604a      	str	r2, [r1, #4]
   8639c:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   863a0:	f8c8 400c 	str.w	r4, [r8, #12]
   863a4:	1083      	asrs	r3, r0, #2
   863a6:	2401      	movs	r4, #1
   863a8:	409c      	lsls	r4, r3
   863aa:	4294      	cmp	r4, r2
   863ac:	d87c      	bhi.n	864a8 <_malloc_r+0x1d8>
   863ae:	4214      	tst	r4, r2
   863b0:	d106      	bne.n	863c0 <_malloc_r+0xf0>
   863b2:	f020 0003 	bic.w	r0, r0, #3
   863b6:	0064      	lsls	r4, r4, #1
   863b8:	4214      	tst	r4, r2
   863ba:	f100 0004 	add.w	r0, r0, #4
   863be:	d0fa      	beq.n	863b6 <_malloc_r+0xe6>
   863c0:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   863c4:	46cc      	mov	ip, r9
   863c6:	4680      	mov	r8, r0
   863c8:	f8dc 100c 	ldr.w	r1, [ip, #12]
   863cc:	458c      	cmp	ip, r1
   863ce:	d107      	bne.n	863e0 <_malloc_r+0x110>
   863d0:	e166      	b.n	866a0 <_malloc_r+0x3d0>
   863d2:	2a00      	cmp	r2, #0
   863d4:	f280 8174 	bge.w	866c0 <_malloc_r+0x3f0>
   863d8:	68c9      	ldr	r1, [r1, #12]
   863da:	458c      	cmp	ip, r1
   863dc:	f000 8160 	beq.w	866a0 <_malloc_r+0x3d0>
   863e0:	684b      	ldr	r3, [r1, #4]
   863e2:	f023 0303 	bic.w	r3, r3, #3
   863e6:	1b5a      	subs	r2, r3, r5
   863e8:	2a0f      	cmp	r2, #15
   863ea:	ddf2      	ble.n	863d2 <_malloc_r+0x102>
   863ec:	460c      	mov	r4, r1
   863ee:	68cb      	ldr	r3, [r1, #12]
   863f0:	f854 cf08 	ldr.w	ip, [r4, #8]!
   863f4:	f045 0801 	orr.w	r8, r5, #1
   863f8:	f8c1 8004 	str.w	r8, [r1, #4]
   863fc:	440d      	add	r5, r1
   863fe:	f042 0101 	orr.w	r1, r2, #1
   86402:	f8cc 300c 	str.w	r3, [ip, #12]
   86406:	4630      	mov	r0, r6
   86408:	f8c3 c008 	str.w	ip, [r3, #8]
   8640c:	617d      	str	r5, [r7, #20]
   8640e:	613d      	str	r5, [r7, #16]
   86410:	f8c5 e00c 	str.w	lr, [r5, #12]
   86414:	f8c5 e008 	str.w	lr, [r5, #8]
   86418:	6069      	str	r1, [r5, #4]
   8641a:	50aa      	str	r2, [r5, r2]
   8641c:	f000 fb26 	bl	86a6c <__malloc_unlock>
   86420:	e01f      	b.n	86462 <_malloc_r+0x192>
   86422:	2910      	cmp	r1, #16
   86424:	d821      	bhi.n	8646a <_malloc_r+0x19a>
   86426:	f000 fb1f 	bl	86a68 <__malloc_lock>
   8642a:	2510      	movs	r5, #16
   8642c:	2306      	movs	r3, #6
   8642e:	2002      	movs	r0, #2
   86430:	4f77      	ldr	r7, [pc, #476]	; (86610 <_malloc_r+0x340>)
   86432:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   86436:	685c      	ldr	r4, [r3, #4]
   86438:	f1a3 0208 	sub.w	r2, r3, #8
   8643c:	4294      	cmp	r4, r2
   8643e:	f000 8138 	beq.w	866b2 <_malloc_r+0x3e2>
   86442:	6863      	ldr	r3, [r4, #4]
   86444:	68e1      	ldr	r1, [r4, #12]
   86446:	f023 0303 	bic.w	r3, r3, #3
   8644a:	4423      	add	r3, r4
   8644c:	685a      	ldr	r2, [r3, #4]
   8644e:	68a5      	ldr	r5, [r4, #8]
   86450:	f042 0201 	orr.w	r2, r2, #1
   86454:	60e9      	str	r1, [r5, #12]
   86456:	4630      	mov	r0, r6
   86458:	608d      	str	r5, [r1, #8]
   8645a:	605a      	str	r2, [r3, #4]
   8645c:	f000 fb06 	bl	86a6c <__malloc_unlock>
   86460:	3408      	adds	r4, #8
   86462:	4620      	mov	r0, r4
   86464:	b003      	add	sp, #12
   86466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8646a:	2400      	movs	r4, #0
   8646c:	4620      	mov	r0, r4
   8646e:	230c      	movs	r3, #12
   86470:	6033      	str	r3, [r6, #0]
   86472:	b003      	add	sp, #12
   86474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86478:	2180      	movs	r1, #128	; 0x80
   8647a:	f04f 0e40 	mov.w	lr, #64	; 0x40
   8647e:	203f      	movs	r0, #63	; 0x3f
   86480:	e748      	b.n	86314 <_malloc_r+0x44>
   86482:	4670      	mov	r0, lr
   86484:	e75b      	b.n	8633e <_malloc_r+0x6e>
   86486:	4423      	add	r3, r4
   86488:	685a      	ldr	r2, [r3, #4]
   8648a:	68e1      	ldr	r1, [r4, #12]
   8648c:	e7df      	b.n	8644e <_malloc_r+0x17e>
   8648e:	4423      	add	r3, r4
   86490:	685a      	ldr	r2, [r3, #4]
   86492:	4630      	mov	r0, r6
   86494:	f042 0201 	orr.w	r2, r2, #1
   86498:	605a      	str	r2, [r3, #4]
   8649a:	3408      	adds	r4, #8
   8649c:	f000 fae6 	bl	86a6c <__malloc_unlock>
   864a0:	4620      	mov	r0, r4
   864a2:	b003      	add	sp, #12
   864a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   864a8:	68bc      	ldr	r4, [r7, #8]
   864aa:	6863      	ldr	r3, [r4, #4]
   864ac:	f023 0803 	bic.w	r8, r3, #3
   864b0:	45a8      	cmp	r8, r5
   864b2:	d304      	bcc.n	864be <_malloc_r+0x1ee>
   864b4:	ebc5 0308 	rsb	r3, r5, r8
   864b8:	2b0f      	cmp	r3, #15
   864ba:	f300 808c 	bgt.w	865d6 <_malloc_r+0x306>
   864be:	4b55      	ldr	r3, [pc, #340]	; (86614 <_malloc_r+0x344>)
   864c0:	f8df 9160 	ldr.w	r9, [pc, #352]	; 86624 <_malloc_r+0x354>
   864c4:	681a      	ldr	r2, [r3, #0]
   864c6:	f8d9 3000 	ldr.w	r3, [r9]
   864ca:	442a      	add	r2, r5
   864cc:	3301      	adds	r3, #1
   864ce:	eb04 0a08 	add.w	sl, r4, r8
   864d2:	f000 8160 	beq.w	86796 <_malloc_r+0x4c6>
   864d6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   864da:	320f      	adds	r2, #15
   864dc:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
   864e0:	f022 020f 	bic.w	r2, r2, #15
   864e4:	4611      	mov	r1, r2
   864e6:	4630      	mov	r0, r6
   864e8:	9201      	str	r2, [sp, #4]
   864ea:	f000 fcab 	bl	86e44 <_sbrk_r>
   864ee:	f1b0 3fff 	cmp.w	r0, #4294967295
   864f2:	4683      	mov	fp, r0
   864f4:	9a01      	ldr	r2, [sp, #4]
   864f6:	f000 8158 	beq.w	867aa <_malloc_r+0x4da>
   864fa:	4582      	cmp	sl, r0
   864fc:	f200 80fc 	bhi.w	866f8 <_malloc_r+0x428>
   86500:	4b45      	ldr	r3, [pc, #276]	; (86618 <_malloc_r+0x348>)
   86502:	45da      	cmp	sl, fp
   86504:	6819      	ldr	r1, [r3, #0]
   86506:	4411      	add	r1, r2
   86508:	6019      	str	r1, [r3, #0]
   8650a:	f000 8153 	beq.w	867b4 <_malloc_r+0x4e4>
   8650e:	f8d9 0000 	ldr.w	r0, [r9]
   86512:	f8df e110 	ldr.w	lr, [pc, #272]	; 86624 <_malloc_r+0x354>
   86516:	3001      	adds	r0, #1
   86518:	bf1b      	ittet	ne
   8651a:	ebca 0a0b 	rsbne	sl, sl, fp
   8651e:	4451      	addne	r1, sl
   86520:	f8ce b000 	streq.w	fp, [lr]
   86524:	6019      	strne	r1, [r3, #0]
   86526:	f01b 0107 	ands.w	r1, fp, #7
   8652a:	f000 8117 	beq.w	8675c <_malloc_r+0x48c>
   8652e:	f1c1 0008 	rsb	r0, r1, #8
   86532:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   86536:	4483      	add	fp, r0
   86538:	3108      	adds	r1, #8
   8653a:	445a      	add	r2, fp
   8653c:	f3c2 020b 	ubfx	r2, r2, #0, #12
   86540:	ebc2 0901 	rsb	r9, r2, r1
   86544:	4649      	mov	r1, r9
   86546:	4630      	mov	r0, r6
   86548:	9301      	str	r3, [sp, #4]
   8654a:	f000 fc7b 	bl	86e44 <_sbrk_r>
   8654e:	1c43      	adds	r3, r0, #1
   86550:	9b01      	ldr	r3, [sp, #4]
   86552:	f000 813f 	beq.w	867d4 <_malloc_r+0x504>
   86556:	ebcb 0200 	rsb	r2, fp, r0
   8655a:	444a      	add	r2, r9
   8655c:	f042 0201 	orr.w	r2, r2, #1
   86560:	6819      	ldr	r1, [r3, #0]
   86562:	42bc      	cmp	r4, r7
   86564:	4449      	add	r1, r9
   86566:	f8c7 b008 	str.w	fp, [r7, #8]
   8656a:	6019      	str	r1, [r3, #0]
   8656c:	f8cb 2004 	str.w	r2, [fp, #4]
   86570:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 86618 <_malloc_r+0x348>
   86574:	d016      	beq.n	865a4 <_malloc_r+0x2d4>
   86576:	f1b8 0f0f 	cmp.w	r8, #15
   8657a:	f240 80fd 	bls.w	86778 <_malloc_r+0x4a8>
   8657e:	6862      	ldr	r2, [r4, #4]
   86580:	f1a8 030c 	sub.w	r3, r8, #12
   86584:	f023 0307 	bic.w	r3, r3, #7
   86588:	f002 0201 	and.w	r2, r2, #1
   8658c:	18e0      	adds	r0, r4, r3
   8658e:	f04f 0e05 	mov.w	lr, #5
   86592:	431a      	orrs	r2, r3
   86594:	2b0f      	cmp	r3, #15
   86596:	6062      	str	r2, [r4, #4]
   86598:	f8c0 e004 	str.w	lr, [r0, #4]
   8659c:	f8c0 e008 	str.w	lr, [r0, #8]
   865a0:	f200 811c 	bhi.w	867dc <_malloc_r+0x50c>
   865a4:	4b1d      	ldr	r3, [pc, #116]	; (8661c <_malloc_r+0x34c>)
   865a6:	68bc      	ldr	r4, [r7, #8]
   865a8:	681a      	ldr	r2, [r3, #0]
   865aa:	4291      	cmp	r1, r2
   865ac:	bf88      	it	hi
   865ae:	6019      	strhi	r1, [r3, #0]
   865b0:	4b1b      	ldr	r3, [pc, #108]	; (86620 <_malloc_r+0x350>)
   865b2:	681a      	ldr	r2, [r3, #0]
   865b4:	4291      	cmp	r1, r2
   865b6:	6862      	ldr	r2, [r4, #4]
   865b8:	bf88      	it	hi
   865ba:	6019      	strhi	r1, [r3, #0]
   865bc:	f022 0203 	bic.w	r2, r2, #3
   865c0:	4295      	cmp	r5, r2
   865c2:	eba2 0305 	sub.w	r3, r2, r5
   865c6:	d801      	bhi.n	865cc <_malloc_r+0x2fc>
   865c8:	2b0f      	cmp	r3, #15
   865ca:	dc04      	bgt.n	865d6 <_malloc_r+0x306>
   865cc:	4630      	mov	r0, r6
   865ce:	f000 fa4d 	bl	86a6c <__malloc_unlock>
   865d2:	2400      	movs	r4, #0
   865d4:	e745      	b.n	86462 <_malloc_r+0x192>
   865d6:	f045 0201 	orr.w	r2, r5, #1
   865da:	f043 0301 	orr.w	r3, r3, #1
   865de:	4425      	add	r5, r4
   865e0:	6062      	str	r2, [r4, #4]
   865e2:	4630      	mov	r0, r6
   865e4:	60bd      	str	r5, [r7, #8]
   865e6:	3408      	adds	r4, #8
   865e8:	606b      	str	r3, [r5, #4]
   865ea:	f000 fa3f 	bl	86a6c <__malloc_unlock>
   865ee:	4620      	mov	r0, r4
   865f0:	b003      	add	sp, #12
   865f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   865f6:	2b14      	cmp	r3, #20
   865f8:	d971      	bls.n	866de <_malloc_r+0x40e>
   865fa:	2b54      	cmp	r3, #84	; 0x54
   865fc:	f200 80a4 	bhi.w	86748 <_malloc_r+0x478>
   86600:	0b28      	lsrs	r0, r5, #12
   86602:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
   86606:	ea4f 014e 	mov.w	r1, lr, lsl #1
   8660a:	306e      	adds	r0, #110	; 0x6e
   8660c:	e682      	b.n	86314 <_malloc_r+0x44>
   8660e:	bf00      	nop
   86610:	20070500 	.word	0x20070500
   86614:	20070a00 	.word	0x20070a00
   86618:	20070a04 	.word	0x20070a04
   8661c:	200709fc 	.word	0x200709fc
   86620:	200709f8 	.word	0x200709f8
   86624:	2007090c 	.word	0x2007090c
   86628:	0a5a      	lsrs	r2, r3, #9
   8662a:	2a04      	cmp	r2, #4
   8662c:	d95e      	bls.n	866ec <_malloc_r+0x41c>
   8662e:	2a14      	cmp	r2, #20
   86630:	f200 80b3 	bhi.w	8679a <_malloc_r+0x4ca>
   86634:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   86638:	0049      	lsls	r1, r1, #1
   8663a:	325b      	adds	r2, #91	; 0x5b
   8663c:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
   86640:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
   86644:	f1ac 0c08 	sub.w	ip, ip, #8
   86648:	458c      	cmp	ip, r1
   8664a:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 86824 <_malloc_r+0x554>
   8664e:	f000 8088 	beq.w	86762 <_malloc_r+0x492>
   86652:	684a      	ldr	r2, [r1, #4]
   86654:	f022 0203 	bic.w	r2, r2, #3
   86658:	4293      	cmp	r3, r2
   8665a:	d202      	bcs.n	86662 <_malloc_r+0x392>
   8665c:	6889      	ldr	r1, [r1, #8]
   8665e:	458c      	cmp	ip, r1
   86660:	d1f7      	bne.n	86652 <_malloc_r+0x382>
   86662:	f8d1 c00c 	ldr.w	ip, [r1, #12]
   86666:	687a      	ldr	r2, [r7, #4]
   86668:	f8c4 c00c 	str.w	ip, [r4, #12]
   8666c:	60a1      	str	r1, [r4, #8]
   8666e:	f8cc 4008 	str.w	r4, [ip, #8]
   86672:	60cc      	str	r4, [r1, #12]
   86674:	e696      	b.n	863a4 <_malloc_r+0xd4>
   86676:	f045 0701 	orr.w	r7, r5, #1
   8667a:	f042 0301 	orr.w	r3, r2, #1
   8667e:	4425      	add	r5, r4
   86680:	6067      	str	r7, [r4, #4]
   86682:	4630      	mov	r0, r6
   86684:	614d      	str	r5, [r1, #20]
   86686:	610d      	str	r5, [r1, #16]
   86688:	f8c5 e00c 	str.w	lr, [r5, #12]
   8668c:	f8c5 e008 	str.w	lr, [r5, #8]
   86690:	606b      	str	r3, [r5, #4]
   86692:	50aa      	str	r2, [r5, r2]
   86694:	3408      	adds	r4, #8
   86696:	f000 f9e9 	bl	86a6c <__malloc_unlock>
   8669a:	e6e2      	b.n	86462 <_malloc_r+0x192>
   8669c:	684a      	ldr	r2, [r1, #4]
   8669e:	e681      	b.n	863a4 <_malloc_r+0xd4>
   866a0:	f108 0801 	add.w	r8, r8, #1
   866a4:	f018 0f03 	tst.w	r8, #3
   866a8:	f10c 0c08 	add.w	ip, ip, #8
   866ac:	f47f ae8c 	bne.w	863c8 <_malloc_r+0xf8>
   866b0:	e030      	b.n	86714 <_malloc_r+0x444>
   866b2:	68dc      	ldr	r4, [r3, #12]
   866b4:	42a3      	cmp	r3, r4
   866b6:	bf08      	it	eq
   866b8:	3002      	addeq	r0, #2
   866ba:	f43f ae40 	beq.w	8633e <_malloc_r+0x6e>
   866be:	e6c0      	b.n	86442 <_malloc_r+0x172>
   866c0:	460c      	mov	r4, r1
   866c2:	440b      	add	r3, r1
   866c4:	685a      	ldr	r2, [r3, #4]
   866c6:	68c9      	ldr	r1, [r1, #12]
   866c8:	f854 5f08 	ldr.w	r5, [r4, #8]!
   866cc:	f042 0201 	orr.w	r2, r2, #1
   866d0:	605a      	str	r2, [r3, #4]
   866d2:	4630      	mov	r0, r6
   866d4:	60e9      	str	r1, [r5, #12]
   866d6:	608d      	str	r5, [r1, #8]
   866d8:	f000 f9c8 	bl	86a6c <__malloc_unlock>
   866dc:	e6c1      	b.n	86462 <_malloc_r+0x192>
   866de:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
   866e2:	f103 005b 	add.w	r0, r3, #91	; 0x5b
   866e6:	ea4f 014e 	mov.w	r1, lr, lsl #1
   866ea:	e613      	b.n	86314 <_malloc_r+0x44>
   866ec:	099a      	lsrs	r2, r3, #6
   866ee:	f102 0139 	add.w	r1, r2, #57	; 0x39
   866f2:	0049      	lsls	r1, r1, #1
   866f4:	3238      	adds	r2, #56	; 0x38
   866f6:	e7a1      	b.n	8663c <_malloc_r+0x36c>
   866f8:	42bc      	cmp	r4, r7
   866fa:	4b4a      	ldr	r3, [pc, #296]	; (86824 <_malloc_r+0x554>)
   866fc:	f43f af00 	beq.w	86500 <_malloc_r+0x230>
   86700:	689c      	ldr	r4, [r3, #8]
   86702:	6862      	ldr	r2, [r4, #4]
   86704:	f022 0203 	bic.w	r2, r2, #3
   86708:	e75a      	b.n	865c0 <_malloc_r+0x2f0>
   8670a:	f859 3908 	ldr.w	r3, [r9], #-8
   8670e:	4599      	cmp	r9, r3
   86710:	f040 8082 	bne.w	86818 <_malloc_r+0x548>
   86714:	f010 0f03 	tst.w	r0, #3
   86718:	f100 30ff 	add.w	r0, r0, #4294967295
   8671c:	d1f5      	bne.n	8670a <_malloc_r+0x43a>
   8671e:	687b      	ldr	r3, [r7, #4]
   86720:	ea23 0304 	bic.w	r3, r3, r4
   86724:	607b      	str	r3, [r7, #4]
   86726:	0064      	lsls	r4, r4, #1
   86728:	429c      	cmp	r4, r3
   8672a:	f63f aebd 	bhi.w	864a8 <_malloc_r+0x1d8>
   8672e:	2c00      	cmp	r4, #0
   86730:	f43f aeba 	beq.w	864a8 <_malloc_r+0x1d8>
   86734:	421c      	tst	r4, r3
   86736:	4640      	mov	r0, r8
   86738:	f47f ae42 	bne.w	863c0 <_malloc_r+0xf0>
   8673c:	0064      	lsls	r4, r4, #1
   8673e:	421c      	tst	r4, r3
   86740:	f100 0004 	add.w	r0, r0, #4
   86744:	d0fa      	beq.n	8673c <_malloc_r+0x46c>
   86746:	e63b      	b.n	863c0 <_malloc_r+0xf0>
   86748:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8674c:	d818      	bhi.n	86780 <_malloc_r+0x4b0>
   8674e:	0be8      	lsrs	r0, r5, #15
   86750:	f100 0e78 	add.w	lr, r0, #120	; 0x78
   86754:	ea4f 014e 	mov.w	r1, lr, lsl #1
   86758:	3077      	adds	r0, #119	; 0x77
   8675a:	e5db      	b.n	86314 <_malloc_r+0x44>
   8675c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   86760:	e6eb      	b.n	8653a <_malloc_r+0x26a>
   86762:	2101      	movs	r1, #1
   86764:	f8d8 3004 	ldr.w	r3, [r8, #4]
   86768:	1092      	asrs	r2, r2, #2
   8676a:	fa01 f202 	lsl.w	r2, r1, r2
   8676e:	431a      	orrs	r2, r3
   86770:	f8c8 2004 	str.w	r2, [r8, #4]
   86774:	4661      	mov	r1, ip
   86776:	e777      	b.n	86668 <_malloc_r+0x398>
   86778:	2301      	movs	r3, #1
   8677a:	f8cb 3004 	str.w	r3, [fp, #4]
   8677e:	e725      	b.n	865cc <_malloc_r+0x2fc>
   86780:	f240 5254 	movw	r2, #1364	; 0x554
   86784:	4293      	cmp	r3, r2
   86786:	d820      	bhi.n	867ca <_malloc_r+0x4fa>
   86788:	0ca8      	lsrs	r0, r5, #18
   8678a:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
   8678e:	ea4f 014e 	mov.w	r1, lr, lsl #1
   86792:	307c      	adds	r0, #124	; 0x7c
   86794:	e5be      	b.n	86314 <_malloc_r+0x44>
   86796:	3210      	adds	r2, #16
   86798:	e6a4      	b.n	864e4 <_malloc_r+0x214>
   8679a:	2a54      	cmp	r2, #84	; 0x54
   8679c:	d826      	bhi.n	867ec <_malloc_r+0x51c>
   8679e:	0b1a      	lsrs	r2, r3, #12
   867a0:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   867a4:	0049      	lsls	r1, r1, #1
   867a6:	326e      	adds	r2, #110	; 0x6e
   867a8:	e748      	b.n	8663c <_malloc_r+0x36c>
   867aa:	68bc      	ldr	r4, [r7, #8]
   867ac:	6862      	ldr	r2, [r4, #4]
   867ae:	f022 0203 	bic.w	r2, r2, #3
   867b2:	e705      	b.n	865c0 <_malloc_r+0x2f0>
   867b4:	f3ca 000b 	ubfx	r0, sl, #0, #12
   867b8:	2800      	cmp	r0, #0
   867ba:	f47f aea8 	bne.w	8650e <_malloc_r+0x23e>
   867be:	4442      	add	r2, r8
   867c0:	68bb      	ldr	r3, [r7, #8]
   867c2:	f042 0201 	orr.w	r2, r2, #1
   867c6:	605a      	str	r2, [r3, #4]
   867c8:	e6ec      	b.n	865a4 <_malloc_r+0x2d4>
   867ca:	21fe      	movs	r1, #254	; 0xfe
   867cc:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
   867d0:	207e      	movs	r0, #126	; 0x7e
   867d2:	e59f      	b.n	86314 <_malloc_r+0x44>
   867d4:	2201      	movs	r2, #1
   867d6:	f04f 0900 	mov.w	r9, #0
   867da:	e6c1      	b.n	86560 <_malloc_r+0x290>
   867dc:	f104 0108 	add.w	r1, r4, #8
   867e0:	4630      	mov	r0, r6
   867e2:	f7ff fa5b 	bl	85c9c <_free_r>
   867e6:	f8d9 1000 	ldr.w	r1, [r9]
   867ea:	e6db      	b.n	865a4 <_malloc_r+0x2d4>
   867ec:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   867f0:	d805      	bhi.n	867fe <_malloc_r+0x52e>
   867f2:	0bda      	lsrs	r2, r3, #15
   867f4:	f102 0178 	add.w	r1, r2, #120	; 0x78
   867f8:	0049      	lsls	r1, r1, #1
   867fa:	3277      	adds	r2, #119	; 0x77
   867fc:	e71e      	b.n	8663c <_malloc_r+0x36c>
   867fe:	f240 5154 	movw	r1, #1364	; 0x554
   86802:	428a      	cmp	r2, r1
   86804:	d805      	bhi.n	86812 <_malloc_r+0x542>
   86806:	0c9a      	lsrs	r2, r3, #18
   86808:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   8680c:	0049      	lsls	r1, r1, #1
   8680e:	327c      	adds	r2, #124	; 0x7c
   86810:	e714      	b.n	8663c <_malloc_r+0x36c>
   86812:	21fe      	movs	r1, #254	; 0xfe
   86814:	227e      	movs	r2, #126	; 0x7e
   86816:	e711      	b.n	8663c <_malloc_r+0x36c>
   86818:	687b      	ldr	r3, [r7, #4]
   8681a:	e784      	b.n	86726 <_malloc_r+0x456>
   8681c:	08e8      	lsrs	r0, r5, #3
   8681e:	1c43      	adds	r3, r0, #1
   86820:	005b      	lsls	r3, r3, #1
   86822:	e605      	b.n	86430 <_malloc_r+0x160>
   86824:	20070500 	.word	0x20070500

00086828 <memchr>:
   86828:	0783      	lsls	r3, r0, #30
   8682a:	b470      	push	{r4, r5, r6}
   8682c:	b2cd      	uxtb	r5, r1
   8682e:	d03d      	beq.n	868ac <memchr+0x84>
   86830:	1e53      	subs	r3, r2, #1
   86832:	b302      	cbz	r2, 86876 <memchr+0x4e>
   86834:	7802      	ldrb	r2, [r0, #0]
   86836:	42aa      	cmp	r2, r5
   86838:	d01e      	beq.n	86878 <memchr+0x50>
   8683a:	1c42      	adds	r2, r0, #1
   8683c:	e004      	b.n	86848 <memchr+0x20>
   8683e:	b1d3      	cbz	r3, 86876 <memchr+0x4e>
   86840:	7804      	ldrb	r4, [r0, #0]
   86842:	3b01      	subs	r3, #1
   86844:	42ac      	cmp	r4, r5
   86846:	d017      	beq.n	86878 <memchr+0x50>
   86848:	f012 0f03 	tst.w	r2, #3
   8684c:	4610      	mov	r0, r2
   8684e:	f102 0201 	add.w	r2, r2, #1
   86852:	d1f4      	bne.n	8683e <memchr+0x16>
   86854:	2b03      	cmp	r3, #3
   86856:	d811      	bhi.n	8687c <memchr+0x54>
   86858:	b353      	cbz	r3, 868b0 <memchr+0x88>
   8685a:	7802      	ldrb	r2, [r0, #0]
   8685c:	42aa      	cmp	r2, r5
   8685e:	d00b      	beq.n	86878 <memchr+0x50>
   86860:	4403      	add	r3, r0
   86862:	1c42      	adds	r2, r0, #1
   86864:	e002      	b.n	8686c <memchr+0x44>
   86866:	7801      	ldrb	r1, [r0, #0]
   86868:	42a9      	cmp	r1, r5
   8686a:	d005      	beq.n	86878 <memchr+0x50>
   8686c:	4293      	cmp	r3, r2
   8686e:	4610      	mov	r0, r2
   86870:	f102 0201 	add.w	r2, r2, #1
   86874:	d1f7      	bne.n	86866 <memchr+0x3e>
   86876:	2000      	movs	r0, #0
   86878:	bc70      	pop	{r4, r5, r6}
   8687a:	4770      	bx	lr
   8687c:	4604      	mov	r4, r0
   8687e:	020e      	lsls	r6, r1, #8
   86880:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
   86884:	432e      	orrs	r6, r5
   86886:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   8688a:	6822      	ldr	r2, [r4, #0]
   8688c:	4620      	mov	r0, r4
   8688e:	4072      	eors	r2, r6
   86890:	f1a2 3101 	sub.w	r1, r2, #16843009	; 0x1010101
   86894:	ea21 0202 	bic.w	r2, r1, r2
   86898:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   8689c:	f104 0404 	add.w	r4, r4, #4
   868a0:	d1db      	bne.n	8685a <memchr+0x32>
   868a2:	3b04      	subs	r3, #4
   868a4:	2b03      	cmp	r3, #3
   868a6:	4620      	mov	r0, r4
   868a8:	d8ef      	bhi.n	8688a <memchr+0x62>
   868aa:	e7d5      	b.n	86858 <memchr+0x30>
   868ac:	4613      	mov	r3, r2
   868ae:	e7d1      	b.n	86854 <memchr+0x2c>
   868b0:	4618      	mov	r0, r3
   868b2:	e7e1      	b.n	86878 <memchr+0x50>

000868b4 <memcpy>:
   868b4:	4684      	mov	ip, r0
   868b6:	ea41 0300 	orr.w	r3, r1, r0
   868ba:	f013 0303 	ands.w	r3, r3, #3
   868be:	d149      	bne.n	86954 <memcpy+0xa0>
   868c0:	3a40      	subs	r2, #64	; 0x40
   868c2:	d323      	bcc.n	8690c <memcpy+0x58>
   868c4:	680b      	ldr	r3, [r1, #0]
   868c6:	6003      	str	r3, [r0, #0]
   868c8:	684b      	ldr	r3, [r1, #4]
   868ca:	6043      	str	r3, [r0, #4]
   868cc:	688b      	ldr	r3, [r1, #8]
   868ce:	6083      	str	r3, [r0, #8]
   868d0:	68cb      	ldr	r3, [r1, #12]
   868d2:	60c3      	str	r3, [r0, #12]
   868d4:	690b      	ldr	r3, [r1, #16]
   868d6:	6103      	str	r3, [r0, #16]
   868d8:	694b      	ldr	r3, [r1, #20]
   868da:	6143      	str	r3, [r0, #20]
   868dc:	698b      	ldr	r3, [r1, #24]
   868de:	6183      	str	r3, [r0, #24]
   868e0:	69cb      	ldr	r3, [r1, #28]
   868e2:	61c3      	str	r3, [r0, #28]
   868e4:	6a0b      	ldr	r3, [r1, #32]
   868e6:	6203      	str	r3, [r0, #32]
   868e8:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   868ea:	6243      	str	r3, [r0, #36]	; 0x24
   868ec:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   868ee:	6283      	str	r3, [r0, #40]	; 0x28
   868f0:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   868f2:	62c3      	str	r3, [r0, #44]	; 0x2c
   868f4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   868f6:	6303      	str	r3, [r0, #48]	; 0x30
   868f8:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   868fa:	6343      	str	r3, [r0, #52]	; 0x34
   868fc:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   868fe:	6383      	str	r3, [r0, #56]	; 0x38
   86900:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   86902:	63c3      	str	r3, [r0, #60]	; 0x3c
   86904:	3040      	adds	r0, #64	; 0x40
   86906:	3140      	adds	r1, #64	; 0x40
   86908:	3a40      	subs	r2, #64	; 0x40
   8690a:	d2db      	bcs.n	868c4 <memcpy+0x10>
   8690c:	3230      	adds	r2, #48	; 0x30
   8690e:	d30b      	bcc.n	86928 <memcpy+0x74>
   86910:	680b      	ldr	r3, [r1, #0]
   86912:	6003      	str	r3, [r0, #0]
   86914:	684b      	ldr	r3, [r1, #4]
   86916:	6043      	str	r3, [r0, #4]
   86918:	688b      	ldr	r3, [r1, #8]
   8691a:	6083      	str	r3, [r0, #8]
   8691c:	68cb      	ldr	r3, [r1, #12]
   8691e:	60c3      	str	r3, [r0, #12]
   86920:	3010      	adds	r0, #16
   86922:	3110      	adds	r1, #16
   86924:	3a10      	subs	r2, #16
   86926:	d2f3      	bcs.n	86910 <memcpy+0x5c>
   86928:	320c      	adds	r2, #12
   8692a:	d305      	bcc.n	86938 <memcpy+0x84>
   8692c:	f851 3b04 	ldr.w	r3, [r1], #4
   86930:	f840 3b04 	str.w	r3, [r0], #4
   86934:	3a04      	subs	r2, #4
   86936:	d2f9      	bcs.n	8692c <memcpy+0x78>
   86938:	3204      	adds	r2, #4
   8693a:	d008      	beq.n	8694e <memcpy+0x9a>
   8693c:	07d2      	lsls	r2, r2, #31
   8693e:	bf1c      	itt	ne
   86940:	f811 3b01 	ldrbne.w	r3, [r1], #1
   86944:	f800 3b01 	strbne.w	r3, [r0], #1
   86948:	d301      	bcc.n	8694e <memcpy+0x9a>
   8694a:	880b      	ldrh	r3, [r1, #0]
   8694c:	8003      	strh	r3, [r0, #0]
   8694e:	4660      	mov	r0, ip
   86950:	4770      	bx	lr
   86952:	bf00      	nop
   86954:	2a08      	cmp	r2, #8
   86956:	d313      	bcc.n	86980 <memcpy+0xcc>
   86958:	078b      	lsls	r3, r1, #30
   8695a:	d0b1      	beq.n	868c0 <memcpy+0xc>
   8695c:	f010 0303 	ands.w	r3, r0, #3
   86960:	d0ae      	beq.n	868c0 <memcpy+0xc>
   86962:	f1c3 0304 	rsb	r3, r3, #4
   86966:	1ad2      	subs	r2, r2, r3
   86968:	07db      	lsls	r3, r3, #31
   8696a:	bf1c      	itt	ne
   8696c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   86970:	f800 3b01 	strbne.w	r3, [r0], #1
   86974:	d3a4      	bcc.n	868c0 <memcpy+0xc>
   86976:	f831 3b02 	ldrh.w	r3, [r1], #2
   8697a:	f820 3b02 	strh.w	r3, [r0], #2
   8697e:	e79f      	b.n	868c0 <memcpy+0xc>
   86980:	3a04      	subs	r2, #4
   86982:	d3d9      	bcc.n	86938 <memcpy+0x84>
   86984:	3a01      	subs	r2, #1
   86986:	f811 3b01 	ldrb.w	r3, [r1], #1
   8698a:	f800 3b01 	strb.w	r3, [r0], #1
   8698e:	d2f9      	bcs.n	86984 <memcpy+0xd0>
   86990:	780b      	ldrb	r3, [r1, #0]
   86992:	7003      	strb	r3, [r0, #0]
   86994:	784b      	ldrb	r3, [r1, #1]
   86996:	7043      	strb	r3, [r0, #1]
   86998:	788b      	ldrb	r3, [r1, #2]
   8699a:	7083      	strb	r3, [r0, #2]
   8699c:	4660      	mov	r0, ip
   8699e:	4770      	bx	lr

000869a0 <memmove>:
   869a0:	4288      	cmp	r0, r1
   869a2:	b5f0      	push	{r4, r5, r6, r7, lr}
   869a4:	d90d      	bls.n	869c2 <memmove+0x22>
   869a6:	188b      	adds	r3, r1, r2
   869a8:	4298      	cmp	r0, r3
   869aa:	d20a      	bcs.n	869c2 <memmove+0x22>
   869ac:	1881      	adds	r1, r0, r2
   869ae:	2a00      	cmp	r2, #0
   869b0:	d051      	beq.n	86a56 <memmove+0xb6>
   869b2:	1a9a      	subs	r2, r3, r2
   869b4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   869b8:	4293      	cmp	r3, r2
   869ba:	f801 4d01 	strb.w	r4, [r1, #-1]!
   869be:	d1f9      	bne.n	869b4 <memmove+0x14>
   869c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   869c2:	2a0f      	cmp	r2, #15
   869c4:	d948      	bls.n	86a58 <memmove+0xb8>
   869c6:	ea41 0300 	orr.w	r3, r1, r0
   869ca:	079b      	lsls	r3, r3, #30
   869cc:	d146      	bne.n	86a5c <memmove+0xbc>
   869ce:	4615      	mov	r5, r2
   869d0:	f100 0410 	add.w	r4, r0, #16
   869d4:	f101 0310 	add.w	r3, r1, #16
   869d8:	f853 6c10 	ldr.w	r6, [r3, #-16]
   869dc:	3d10      	subs	r5, #16
   869de:	f844 6c10 	str.w	r6, [r4, #-16]
   869e2:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   869e6:	2d0f      	cmp	r5, #15
   869e8:	f844 6c0c 	str.w	r6, [r4, #-12]
   869ec:	f853 6c08 	ldr.w	r6, [r3, #-8]
   869f0:	f104 0410 	add.w	r4, r4, #16
   869f4:	f844 6c18 	str.w	r6, [r4, #-24]
   869f8:	f853 6c04 	ldr.w	r6, [r3, #-4]
   869fc:	f103 0310 	add.w	r3, r3, #16
   86a00:	f844 6c14 	str.w	r6, [r4, #-20]
   86a04:	d8e8      	bhi.n	869d8 <memmove+0x38>
   86a06:	f1a2 0310 	sub.w	r3, r2, #16
   86a0a:	f023 030f 	bic.w	r3, r3, #15
   86a0e:	f002 0e0f 	and.w	lr, r2, #15
   86a12:	3310      	adds	r3, #16
   86a14:	f1be 0f03 	cmp.w	lr, #3
   86a18:	4419      	add	r1, r3
   86a1a:	4403      	add	r3, r0
   86a1c:	d921      	bls.n	86a62 <memmove+0xc2>
   86a1e:	460e      	mov	r6, r1
   86a20:	4674      	mov	r4, lr
   86a22:	1f1d      	subs	r5, r3, #4
   86a24:	f856 7b04 	ldr.w	r7, [r6], #4
   86a28:	3c04      	subs	r4, #4
   86a2a:	2c03      	cmp	r4, #3
   86a2c:	f845 7f04 	str.w	r7, [r5, #4]!
   86a30:	d8f8      	bhi.n	86a24 <memmove+0x84>
   86a32:	f1ae 0404 	sub.w	r4, lr, #4
   86a36:	f024 0403 	bic.w	r4, r4, #3
   86a3a:	3404      	adds	r4, #4
   86a3c:	4423      	add	r3, r4
   86a3e:	4421      	add	r1, r4
   86a40:	f002 0203 	and.w	r2, r2, #3
   86a44:	b162      	cbz	r2, 86a60 <memmove+0xc0>
   86a46:	3b01      	subs	r3, #1
   86a48:	440a      	add	r2, r1
   86a4a:	f811 4b01 	ldrb.w	r4, [r1], #1
   86a4e:	428a      	cmp	r2, r1
   86a50:	f803 4f01 	strb.w	r4, [r3, #1]!
   86a54:	d1f9      	bne.n	86a4a <memmove+0xaa>
   86a56:	bdf0      	pop	{r4, r5, r6, r7, pc}
   86a58:	4603      	mov	r3, r0
   86a5a:	e7f3      	b.n	86a44 <memmove+0xa4>
   86a5c:	4603      	mov	r3, r0
   86a5e:	e7f2      	b.n	86a46 <memmove+0xa6>
   86a60:	bdf0      	pop	{r4, r5, r6, r7, pc}
   86a62:	4672      	mov	r2, lr
   86a64:	e7ee      	b.n	86a44 <memmove+0xa4>
   86a66:	bf00      	nop

00086a68 <__malloc_lock>:
   86a68:	4770      	bx	lr
   86a6a:	bf00      	nop

00086a6c <__malloc_unlock>:
   86a6c:	4770      	bx	lr
   86a6e:	bf00      	nop

00086a70 <_realloc_r>:
   86a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86a74:	4617      	mov	r7, r2
   86a76:	b083      	sub	sp, #12
   86a78:	2900      	cmp	r1, #0
   86a7a:	f000 808f 	beq.w	86b9c <_realloc_r+0x12c>
   86a7e:	460d      	mov	r5, r1
   86a80:	4681      	mov	r9, r0
   86a82:	f107 040b 	add.w	r4, r7, #11
   86a86:	f7ff ffef 	bl	86a68 <__malloc_lock>
   86a8a:	f855 ec04 	ldr.w	lr, [r5, #-4]
   86a8e:	2c16      	cmp	r4, #22
   86a90:	f02e 0603 	bic.w	r6, lr, #3
   86a94:	f1a5 0808 	sub.w	r8, r5, #8
   86a98:	d83c      	bhi.n	86b14 <_realloc_r+0xa4>
   86a9a:	2210      	movs	r2, #16
   86a9c:	4614      	mov	r4, r2
   86a9e:	42a7      	cmp	r7, r4
   86aa0:	d83d      	bhi.n	86b1e <_realloc_r+0xae>
   86aa2:	4296      	cmp	r6, r2
   86aa4:	da42      	bge.n	86b2c <_realloc_r+0xbc>
   86aa6:	4bc6      	ldr	r3, [pc, #792]	; (86dc0 <_realloc_r+0x350>)
   86aa8:	eb08 0006 	add.w	r0, r8, r6
   86aac:	6899      	ldr	r1, [r3, #8]
   86aae:	4288      	cmp	r0, r1
   86ab0:	6841      	ldr	r1, [r0, #4]
   86ab2:	f000 80d7 	beq.w	86c64 <_realloc_r+0x1f4>
   86ab6:	f021 0301 	bic.w	r3, r1, #1
   86aba:	4403      	add	r3, r0
   86abc:	685b      	ldr	r3, [r3, #4]
   86abe:	07db      	lsls	r3, r3, #31
   86ac0:	d54c      	bpl.n	86b5c <_realloc_r+0xec>
   86ac2:	f01e 0f01 	tst.w	lr, #1
   86ac6:	f000 809d 	beq.w	86c04 <_realloc_r+0x194>
   86aca:	4639      	mov	r1, r7
   86acc:	4648      	mov	r0, r9
   86ace:	f7ff fbff 	bl	862d0 <_malloc_r>
   86ad2:	4607      	mov	r7, r0
   86ad4:	2800      	cmp	r0, #0
   86ad6:	d03a      	beq.n	86b4e <_realloc_r+0xde>
   86ad8:	f855 3c04 	ldr.w	r3, [r5, #-4]
   86adc:	f1a0 0208 	sub.w	r2, r0, #8
   86ae0:	f023 0301 	bic.w	r3, r3, #1
   86ae4:	4443      	add	r3, r8
   86ae6:	429a      	cmp	r2, r3
   86ae8:	f000 813e 	beq.w	86d68 <_realloc_r+0x2f8>
   86aec:	1f32      	subs	r2, r6, #4
   86aee:	2a24      	cmp	r2, #36	; 0x24
   86af0:	f200 812b 	bhi.w	86d4a <_realloc_r+0x2da>
   86af4:	2a13      	cmp	r2, #19
   86af6:	f200 80ff 	bhi.w	86cf8 <_realloc_r+0x288>
   86afa:	4603      	mov	r3, r0
   86afc:	462a      	mov	r2, r5
   86afe:	6811      	ldr	r1, [r2, #0]
   86b00:	6019      	str	r1, [r3, #0]
   86b02:	6851      	ldr	r1, [r2, #4]
   86b04:	6059      	str	r1, [r3, #4]
   86b06:	6892      	ldr	r2, [r2, #8]
   86b08:	609a      	str	r2, [r3, #8]
   86b0a:	4629      	mov	r1, r5
   86b0c:	4648      	mov	r0, r9
   86b0e:	f7ff f8c5 	bl	85c9c <_free_r>
   86b12:	e01c      	b.n	86b4e <_realloc_r+0xde>
   86b14:	f024 0407 	bic.w	r4, r4, #7
   86b18:	2c00      	cmp	r4, #0
   86b1a:	4622      	mov	r2, r4
   86b1c:	dabf      	bge.n	86a9e <_realloc_r+0x2e>
   86b1e:	230c      	movs	r3, #12
   86b20:	2000      	movs	r0, #0
   86b22:	f8c9 3000 	str.w	r3, [r9]
   86b26:	b003      	add	sp, #12
   86b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86b2c:	462f      	mov	r7, r5
   86b2e:	1b33      	subs	r3, r6, r4
   86b30:	2b0f      	cmp	r3, #15
   86b32:	f8d8 2004 	ldr.w	r2, [r8, #4]
   86b36:	d81d      	bhi.n	86b74 <_realloc_r+0x104>
   86b38:	f002 0201 	and.w	r2, r2, #1
   86b3c:	4332      	orrs	r2, r6
   86b3e:	eb08 0106 	add.w	r1, r8, r6
   86b42:	f8c8 2004 	str.w	r2, [r8, #4]
   86b46:	684b      	ldr	r3, [r1, #4]
   86b48:	f043 0301 	orr.w	r3, r3, #1
   86b4c:	604b      	str	r3, [r1, #4]
   86b4e:	4648      	mov	r0, r9
   86b50:	f7ff ff8c 	bl	86a6c <__malloc_unlock>
   86b54:	4638      	mov	r0, r7
   86b56:	b003      	add	sp, #12
   86b58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86b5c:	f021 0103 	bic.w	r1, r1, #3
   86b60:	4431      	add	r1, r6
   86b62:	4291      	cmp	r1, r2
   86b64:	db20      	blt.n	86ba8 <_realloc_r+0x138>
   86b66:	68c3      	ldr	r3, [r0, #12]
   86b68:	6882      	ldr	r2, [r0, #8]
   86b6a:	462f      	mov	r7, r5
   86b6c:	60d3      	str	r3, [r2, #12]
   86b6e:	460e      	mov	r6, r1
   86b70:	609a      	str	r2, [r3, #8]
   86b72:	e7dc      	b.n	86b2e <_realloc_r+0xbe>
   86b74:	f002 0201 	and.w	r2, r2, #1
   86b78:	eb08 0104 	add.w	r1, r8, r4
   86b7c:	4314      	orrs	r4, r2
   86b7e:	f043 0201 	orr.w	r2, r3, #1
   86b82:	f8c8 4004 	str.w	r4, [r8, #4]
   86b86:	440b      	add	r3, r1
   86b88:	604a      	str	r2, [r1, #4]
   86b8a:	685a      	ldr	r2, [r3, #4]
   86b8c:	3108      	adds	r1, #8
   86b8e:	f042 0201 	orr.w	r2, r2, #1
   86b92:	605a      	str	r2, [r3, #4]
   86b94:	4648      	mov	r0, r9
   86b96:	f7ff f881 	bl	85c9c <_free_r>
   86b9a:	e7d8      	b.n	86b4e <_realloc_r+0xde>
   86b9c:	4611      	mov	r1, r2
   86b9e:	b003      	add	sp, #12
   86ba0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86ba4:	f7ff bb94 	b.w	862d0 <_malloc_r>
   86ba8:	f01e 0f01 	tst.w	lr, #1
   86bac:	d18d      	bne.n	86aca <_realloc_r+0x5a>
   86bae:	f855 3c08 	ldr.w	r3, [r5, #-8]
   86bb2:	ebc3 0a08 	rsb	sl, r3, r8
   86bb6:	f8da 3004 	ldr.w	r3, [sl, #4]
   86bba:	f023 0c03 	bic.w	ip, r3, #3
   86bbe:	eb01 0e0c 	add.w	lr, r1, ip
   86bc2:	4596      	cmp	lr, r2
   86bc4:	db26      	blt.n	86c14 <_realloc_r+0x1a4>
   86bc6:	4657      	mov	r7, sl
   86bc8:	68c3      	ldr	r3, [r0, #12]
   86bca:	6881      	ldr	r1, [r0, #8]
   86bcc:	1f32      	subs	r2, r6, #4
   86bce:	60cb      	str	r3, [r1, #12]
   86bd0:	6099      	str	r1, [r3, #8]
   86bd2:	f857 1f08 	ldr.w	r1, [r7, #8]!
   86bd6:	f8da 300c 	ldr.w	r3, [sl, #12]
   86bda:	2a24      	cmp	r2, #36	; 0x24
   86bdc:	60cb      	str	r3, [r1, #12]
   86bde:	6099      	str	r1, [r3, #8]
   86be0:	f200 80c9 	bhi.w	86d76 <_realloc_r+0x306>
   86be4:	2a13      	cmp	r2, #19
   86be6:	f240 8092 	bls.w	86d0e <_realloc_r+0x29e>
   86bea:	682b      	ldr	r3, [r5, #0]
   86bec:	2a1b      	cmp	r2, #27
   86bee:	f8ca 3008 	str.w	r3, [sl, #8]
   86bf2:	686b      	ldr	r3, [r5, #4]
   86bf4:	f8ca 300c 	str.w	r3, [sl, #12]
   86bf8:	f200 80cd 	bhi.w	86d96 <_realloc_r+0x326>
   86bfc:	3508      	adds	r5, #8
   86bfe:	f10a 0310 	add.w	r3, sl, #16
   86c02:	e085      	b.n	86d10 <_realloc_r+0x2a0>
   86c04:	f855 3c08 	ldr.w	r3, [r5, #-8]
   86c08:	ebc3 0a08 	rsb	sl, r3, r8
   86c0c:	f8da 3004 	ldr.w	r3, [sl, #4]
   86c10:	f023 0c03 	bic.w	ip, r3, #3
   86c14:	eb06 030c 	add.w	r3, r6, ip
   86c18:	4293      	cmp	r3, r2
   86c1a:	f6ff af56 	blt.w	86aca <_realloc_r+0x5a>
   86c1e:	4657      	mov	r7, sl
   86c20:	f8da 100c 	ldr.w	r1, [sl, #12]
   86c24:	f857 0f08 	ldr.w	r0, [r7, #8]!
   86c28:	1f32      	subs	r2, r6, #4
   86c2a:	2a24      	cmp	r2, #36	; 0x24
   86c2c:	60c1      	str	r1, [r0, #12]
   86c2e:	6088      	str	r0, [r1, #8]
   86c30:	f200 80aa 	bhi.w	86d88 <_realloc_r+0x318>
   86c34:	2a13      	cmp	r2, #19
   86c36:	f240 80a5 	bls.w	86d84 <_realloc_r+0x314>
   86c3a:	6829      	ldr	r1, [r5, #0]
   86c3c:	2a1b      	cmp	r2, #27
   86c3e:	f8ca 1008 	str.w	r1, [sl, #8]
   86c42:	6869      	ldr	r1, [r5, #4]
   86c44:	f8ca 100c 	str.w	r1, [sl, #12]
   86c48:	f200 80bc 	bhi.w	86dc4 <_realloc_r+0x354>
   86c4c:	3508      	adds	r5, #8
   86c4e:	f10a 0210 	add.w	r2, sl, #16
   86c52:	6829      	ldr	r1, [r5, #0]
   86c54:	461e      	mov	r6, r3
   86c56:	6011      	str	r1, [r2, #0]
   86c58:	6869      	ldr	r1, [r5, #4]
   86c5a:	46d0      	mov	r8, sl
   86c5c:	6051      	str	r1, [r2, #4]
   86c5e:	68ab      	ldr	r3, [r5, #8]
   86c60:	6093      	str	r3, [r2, #8]
   86c62:	e764      	b.n	86b2e <_realloc_r+0xbe>
   86c64:	f021 0b03 	bic.w	fp, r1, #3
   86c68:	f104 0010 	add.w	r0, r4, #16
   86c6c:	44b3      	add	fp, r6
   86c6e:	4583      	cmp	fp, r0
   86c70:	da57      	bge.n	86d22 <_realloc_r+0x2b2>
   86c72:	f01e 0f01 	tst.w	lr, #1
   86c76:	f47f af28 	bne.w	86aca <_realloc_r+0x5a>
   86c7a:	f855 1c08 	ldr.w	r1, [r5, #-8]
   86c7e:	ebc1 0a08 	rsb	sl, r1, r8
   86c82:	f8da 1004 	ldr.w	r1, [sl, #4]
   86c86:	f021 0c03 	bic.w	ip, r1, #3
   86c8a:	44e3      	add	fp, ip
   86c8c:	4558      	cmp	r0, fp
   86c8e:	dcc1      	bgt.n	86c14 <_realloc_r+0x1a4>
   86c90:	4657      	mov	r7, sl
   86c92:	f8da 100c 	ldr.w	r1, [sl, #12]
   86c96:	f857 0f08 	ldr.w	r0, [r7, #8]!
   86c9a:	1f32      	subs	r2, r6, #4
   86c9c:	2a24      	cmp	r2, #36	; 0x24
   86c9e:	60c1      	str	r1, [r0, #12]
   86ca0:	6088      	str	r0, [r1, #8]
   86ca2:	f200 80b1 	bhi.w	86e08 <_realloc_r+0x398>
   86ca6:	2a13      	cmp	r2, #19
   86ca8:	f240 80a2 	bls.w	86df0 <_realloc_r+0x380>
   86cac:	6829      	ldr	r1, [r5, #0]
   86cae:	2a1b      	cmp	r2, #27
   86cb0:	f8ca 1008 	str.w	r1, [sl, #8]
   86cb4:	6869      	ldr	r1, [r5, #4]
   86cb6:	f8ca 100c 	str.w	r1, [sl, #12]
   86cba:	f200 80ac 	bhi.w	86e16 <_realloc_r+0x3a6>
   86cbe:	3508      	adds	r5, #8
   86cc0:	f10a 0210 	add.w	r2, sl, #16
   86cc4:	6829      	ldr	r1, [r5, #0]
   86cc6:	6011      	str	r1, [r2, #0]
   86cc8:	6869      	ldr	r1, [r5, #4]
   86cca:	6051      	str	r1, [r2, #4]
   86ccc:	68a9      	ldr	r1, [r5, #8]
   86cce:	6091      	str	r1, [r2, #8]
   86cd0:	ebc4 020b 	rsb	r2, r4, fp
   86cd4:	eb0a 0104 	add.w	r1, sl, r4
   86cd8:	f042 0201 	orr.w	r2, r2, #1
   86cdc:	6099      	str	r1, [r3, #8]
   86cde:	604a      	str	r2, [r1, #4]
   86ce0:	f8da 3004 	ldr.w	r3, [sl, #4]
   86ce4:	4648      	mov	r0, r9
   86ce6:	f003 0301 	and.w	r3, r3, #1
   86cea:	431c      	orrs	r4, r3
   86cec:	f8ca 4004 	str.w	r4, [sl, #4]
   86cf0:	f7ff febc 	bl	86a6c <__malloc_unlock>
   86cf4:	4638      	mov	r0, r7
   86cf6:	e72e      	b.n	86b56 <_realloc_r+0xe6>
   86cf8:	682b      	ldr	r3, [r5, #0]
   86cfa:	2a1b      	cmp	r2, #27
   86cfc:	6003      	str	r3, [r0, #0]
   86cfe:	686b      	ldr	r3, [r5, #4]
   86d00:	6043      	str	r3, [r0, #4]
   86d02:	d826      	bhi.n	86d52 <_realloc_r+0x2e2>
   86d04:	f100 0308 	add.w	r3, r0, #8
   86d08:	f105 0208 	add.w	r2, r5, #8
   86d0c:	e6f7      	b.n	86afe <_realloc_r+0x8e>
   86d0e:	463b      	mov	r3, r7
   86d10:	682a      	ldr	r2, [r5, #0]
   86d12:	4676      	mov	r6, lr
   86d14:	601a      	str	r2, [r3, #0]
   86d16:	686a      	ldr	r2, [r5, #4]
   86d18:	46d0      	mov	r8, sl
   86d1a:	605a      	str	r2, [r3, #4]
   86d1c:	68aa      	ldr	r2, [r5, #8]
   86d1e:	609a      	str	r2, [r3, #8]
   86d20:	e705      	b.n	86b2e <_realloc_r+0xbe>
   86d22:	ebc4 0b0b 	rsb	fp, r4, fp
   86d26:	eb08 0104 	add.w	r1, r8, r4
   86d2a:	f04b 0201 	orr.w	r2, fp, #1
   86d2e:	6099      	str	r1, [r3, #8]
   86d30:	604a      	str	r2, [r1, #4]
   86d32:	f855 3c04 	ldr.w	r3, [r5, #-4]
   86d36:	4648      	mov	r0, r9
   86d38:	f003 0301 	and.w	r3, r3, #1
   86d3c:	431c      	orrs	r4, r3
   86d3e:	f845 4c04 	str.w	r4, [r5, #-4]
   86d42:	f7ff fe93 	bl	86a6c <__malloc_unlock>
   86d46:	4628      	mov	r0, r5
   86d48:	e705      	b.n	86b56 <_realloc_r+0xe6>
   86d4a:	4629      	mov	r1, r5
   86d4c:	f7ff fe28 	bl	869a0 <memmove>
   86d50:	e6db      	b.n	86b0a <_realloc_r+0x9a>
   86d52:	68ab      	ldr	r3, [r5, #8]
   86d54:	2a24      	cmp	r2, #36	; 0x24
   86d56:	6083      	str	r3, [r0, #8]
   86d58:	68eb      	ldr	r3, [r5, #12]
   86d5a:	60c3      	str	r3, [r0, #12]
   86d5c:	d027      	beq.n	86dae <_realloc_r+0x33e>
   86d5e:	f100 0310 	add.w	r3, r0, #16
   86d62:	f105 0210 	add.w	r2, r5, #16
   86d66:	e6ca      	b.n	86afe <_realloc_r+0x8e>
   86d68:	f850 3c04 	ldr.w	r3, [r0, #-4]
   86d6c:	462f      	mov	r7, r5
   86d6e:	f023 0303 	bic.w	r3, r3, #3
   86d72:	441e      	add	r6, r3
   86d74:	e6db      	b.n	86b2e <_realloc_r+0xbe>
   86d76:	4629      	mov	r1, r5
   86d78:	4638      	mov	r0, r7
   86d7a:	4676      	mov	r6, lr
   86d7c:	46d0      	mov	r8, sl
   86d7e:	f7ff fe0f 	bl	869a0 <memmove>
   86d82:	e6d4      	b.n	86b2e <_realloc_r+0xbe>
   86d84:	463a      	mov	r2, r7
   86d86:	e764      	b.n	86c52 <_realloc_r+0x1e2>
   86d88:	4629      	mov	r1, r5
   86d8a:	4638      	mov	r0, r7
   86d8c:	461e      	mov	r6, r3
   86d8e:	46d0      	mov	r8, sl
   86d90:	f7ff fe06 	bl	869a0 <memmove>
   86d94:	e6cb      	b.n	86b2e <_realloc_r+0xbe>
   86d96:	68ab      	ldr	r3, [r5, #8]
   86d98:	2a24      	cmp	r2, #36	; 0x24
   86d9a:	f8ca 3010 	str.w	r3, [sl, #16]
   86d9e:	68eb      	ldr	r3, [r5, #12]
   86da0:	f8ca 3014 	str.w	r3, [sl, #20]
   86da4:	d01a      	beq.n	86ddc <_realloc_r+0x36c>
   86da6:	3510      	adds	r5, #16
   86da8:	f10a 0318 	add.w	r3, sl, #24
   86dac:	e7b0      	b.n	86d10 <_realloc_r+0x2a0>
   86dae:	692a      	ldr	r2, [r5, #16]
   86db0:	f100 0318 	add.w	r3, r0, #24
   86db4:	6102      	str	r2, [r0, #16]
   86db6:	6969      	ldr	r1, [r5, #20]
   86db8:	f105 0218 	add.w	r2, r5, #24
   86dbc:	6141      	str	r1, [r0, #20]
   86dbe:	e69e      	b.n	86afe <_realloc_r+0x8e>
   86dc0:	20070500 	.word	0x20070500
   86dc4:	68a9      	ldr	r1, [r5, #8]
   86dc6:	2a24      	cmp	r2, #36	; 0x24
   86dc8:	f8ca 1010 	str.w	r1, [sl, #16]
   86dcc:	68e9      	ldr	r1, [r5, #12]
   86dce:	f8ca 1014 	str.w	r1, [sl, #20]
   86dd2:	d00f      	beq.n	86df4 <_realloc_r+0x384>
   86dd4:	3510      	adds	r5, #16
   86dd6:	f10a 0218 	add.w	r2, sl, #24
   86dda:	e73a      	b.n	86c52 <_realloc_r+0x1e2>
   86ddc:	692a      	ldr	r2, [r5, #16]
   86dde:	f10a 0320 	add.w	r3, sl, #32
   86de2:	f8ca 2018 	str.w	r2, [sl, #24]
   86de6:	696a      	ldr	r2, [r5, #20]
   86de8:	3518      	adds	r5, #24
   86dea:	f8ca 201c 	str.w	r2, [sl, #28]
   86dee:	e78f      	b.n	86d10 <_realloc_r+0x2a0>
   86df0:	463a      	mov	r2, r7
   86df2:	e767      	b.n	86cc4 <_realloc_r+0x254>
   86df4:	6929      	ldr	r1, [r5, #16]
   86df6:	f10a 0220 	add.w	r2, sl, #32
   86dfa:	f8ca 1018 	str.w	r1, [sl, #24]
   86dfe:	6969      	ldr	r1, [r5, #20]
   86e00:	3518      	adds	r5, #24
   86e02:	f8ca 101c 	str.w	r1, [sl, #28]
   86e06:	e724      	b.n	86c52 <_realloc_r+0x1e2>
   86e08:	4629      	mov	r1, r5
   86e0a:	4638      	mov	r0, r7
   86e0c:	9301      	str	r3, [sp, #4]
   86e0e:	f7ff fdc7 	bl	869a0 <memmove>
   86e12:	9b01      	ldr	r3, [sp, #4]
   86e14:	e75c      	b.n	86cd0 <_realloc_r+0x260>
   86e16:	68a9      	ldr	r1, [r5, #8]
   86e18:	2a24      	cmp	r2, #36	; 0x24
   86e1a:	f8ca 1010 	str.w	r1, [sl, #16]
   86e1e:	68e9      	ldr	r1, [r5, #12]
   86e20:	f8ca 1014 	str.w	r1, [sl, #20]
   86e24:	d003      	beq.n	86e2e <_realloc_r+0x3be>
   86e26:	3510      	adds	r5, #16
   86e28:	f10a 0218 	add.w	r2, sl, #24
   86e2c:	e74a      	b.n	86cc4 <_realloc_r+0x254>
   86e2e:	6929      	ldr	r1, [r5, #16]
   86e30:	f10a 0220 	add.w	r2, sl, #32
   86e34:	f8ca 1018 	str.w	r1, [sl, #24]
   86e38:	6969      	ldr	r1, [r5, #20]
   86e3a:	3518      	adds	r5, #24
   86e3c:	f8ca 101c 	str.w	r1, [sl, #28]
   86e40:	e740      	b.n	86cc4 <_realloc_r+0x254>
   86e42:	bf00      	nop

00086e44 <_sbrk_r>:
   86e44:	b538      	push	{r3, r4, r5, lr}
   86e46:	4c07      	ldr	r4, [pc, #28]	; (86e64 <_sbrk_r+0x20>)
   86e48:	2300      	movs	r3, #0
   86e4a:	4605      	mov	r5, r0
   86e4c:	4608      	mov	r0, r1
   86e4e:	6023      	str	r3, [r4, #0]
   86e50:	f7fd f9ba 	bl	841c8 <_sbrk>
   86e54:	1c43      	adds	r3, r0, #1
   86e56:	d000      	beq.n	86e5a <_sbrk_r+0x16>
   86e58:	bd38      	pop	{r3, r4, r5, pc}
   86e5a:	6823      	ldr	r3, [r4, #0]
   86e5c:	2b00      	cmp	r3, #0
   86e5e:	d0fb      	beq.n	86e58 <_sbrk_r+0x14>
   86e60:	602b      	str	r3, [r5, #0]
   86e62:	bd38      	pop	{r3, r4, r5, pc}
   86e64:	20070edc 	.word	0x20070edc

00086e68 <__sread>:
   86e68:	b510      	push	{r4, lr}
   86e6a:	460c      	mov	r4, r1
   86e6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   86e70:	f000 f9c4 	bl	871fc <_read_r>
   86e74:	2800      	cmp	r0, #0
   86e76:	db03      	blt.n	86e80 <__sread+0x18>
   86e78:	6d23      	ldr	r3, [r4, #80]	; 0x50
   86e7a:	4403      	add	r3, r0
   86e7c:	6523      	str	r3, [r4, #80]	; 0x50
   86e7e:	bd10      	pop	{r4, pc}
   86e80:	89a3      	ldrh	r3, [r4, #12]
   86e82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   86e86:	81a3      	strh	r3, [r4, #12]
   86e88:	bd10      	pop	{r4, pc}
   86e8a:	bf00      	nop

00086e8c <__swrite>:
   86e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   86e90:	460c      	mov	r4, r1
   86e92:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   86e96:	461f      	mov	r7, r3
   86e98:	05cb      	lsls	r3, r1, #23
   86e9a:	4616      	mov	r6, r2
   86e9c:	4605      	mov	r5, r0
   86e9e:	d507      	bpl.n	86eb0 <__swrite+0x24>
   86ea0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   86ea4:	2302      	movs	r3, #2
   86ea6:	2200      	movs	r2, #0
   86ea8:	f000 f992 	bl	871d0 <_lseek_r>
   86eac:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   86eb0:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   86eb4:	81a1      	strh	r1, [r4, #12]
   86eb6:	463b      	mov	r3, r7
   86eb8:	4632      	mov	r2, r6
   86eba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   86ebe:	4628      	mov	r0, r5
   86ec0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   86ec4:	f000 b8a2 	b.w	8700c <_write_r>

00086ec8 <__sseek>:
   86ec8:	b510      	push	{r4, lr}
   86eca:	460c      	mov	r4, r1
   86ecc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   86ed0:	f000 f97e 	bl	871d0 <_lseek_r>
   86ed4:	89a3      	ldrh	r3, [r4, #12]
   86ed6:	1c42      	adds	r2, r0, #1
   86ed8:	bf0e      	itee	eq
   86eda:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   86ede:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   86ee2:	6520      	strne	r0, [r4, #80]	; 0x50
   86ee4:	81a3      	strh	r3, [r4, #12]
   86ee6:	bd10      	pop	{r4, pc}

00086ee8 <__sclose>:
   86ee8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   86eec:	f000 b8f6 	b.w	870dc <_close_r>

00086ef0 <__swbuf_r>:
   86ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   86ef2:	460e      	mov	r6, r1
   86ef4:	4614      	mov	r4, r2
   86ef6:	4607      	mov	r7, r0
   86ef8:	b110      	cbz	r0, 86f00 <__swbuf_r+0x10>
   86efa:	6b83      	ldr	r3, [r0, #56]	; 0x38
   86efc:	2b00      	cmp	r3, #0
   86efe:	d04a      	beq.n	86f96 <__swbuf_r+0xa6>
   86f00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   86f04:	69a3      	ldr	r3, [r4, #24]
   86f06:	b291      	uxth	r1, r2
   86f08:	0708      	lsls	r0, r1, #28
   86f0a:	60a3      	str	r3, [r4, #8]
   86f0c:	d538      	bpl.n	86f80 <__swbuf_r+0x90>
   86f0e:	6923      	ldr	r3, [r4, #16]
   86f10:	2b00      	cmp	r3, #0
   86f12:	d035      	beq.n	86f80 <__swbuf_r+0x90>
   86f14:	0489      	lsls	r1, r1, #18
   86f16:	b2f5      	uxtb	r5, r6
   86f18:	d515      	bpl.n	86f46 <__swbuf_r+0x56>
   86f1a:	6822      	ldr	r2, [r4, #0]
   86f1c:	6961      	ldr	r1, [r4, #20]
   86f1e:	1ad3      	subs	r3, r2, r3
   86f20:	428b      	cmp	r3, r1
   86f22:	da1c      	bge.n	86f5e <__swbuf_r+0x6e>
   86f24:	3301      	adds	r3, #1
   86f26:	68a1      	ldr	r1, [r4, #8]
   86f28:	1c50      	adds	r0, r2, #1
   86f2a:	3901      	subs	r1, #1
   86f2c:	60a1      	str	r1, [r4, #8]
   86f2e:	6020      	str	r0, [r4, #0]
   86f30:	7016      	strb	r6, [r2, #0]
   86f32:	6962      	ldr	r2, [r4, #20]
   86f34:	429a      	cmp	r2, r3
   86f36:	d01a      	beq.n	86f6e <__swbuf_r+0x7e>
   86f38:	89a3      	ldrh	r3, [r4, #12]
   86f3a:	07db      	lsls	r3, r3, #31
   86f3c:	d501      	bpl.n	86f42 <__swbuf_r+0x52>
   86f3e:	2d0a      	cmp	r5, #10
   86f40:	d015      	beq.n	86f6e <__swbuf_r+0x7e>
   86f42:	4628      	mov	r0, r5
   86f44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   86f46:	6e61      	ldr	r1, [r4, #100]	; 0x64
   86f48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   86f4c:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   86f50:	81a2      	strh	r2, [r4, #12]
   86f52:	6822      	ldr	r2, [r4, #0]
   86f54:	6661      	str	r1, [r4, #100]	; 0x64
   86f56:	6961      	ldr	r1, [r4, #20]
   86f58:	1ad3      	subs	r3, r2, r3
   86f5a:	428b      	cmp	r3, r1
   86f5c:	dbe2      	blt.n	86f24 <__swbuf_r+0x34>
   86f5e:	4621      	mov	r1, r4
   86f60:	4638      	mov	r0, r7
   86f62:	f7fe fd3f 	bl	859e4 <_fflush_r>
   86f66:	b940      	cbnz	r0, 86f7a <__swbuf_r+0x8a>
   86f68:	6822      	ldr	r2, [r4, #0]
   86f6a:	2301      	movs	r3, #1
   86f6c:	e7db      	b.n	86f26 <__swbuf_r+0x36>
   86f6e:	4621      	mov	r1, r4
   86f70:	4638      	mov	r0, r7
   86f72:	f7fe fd37 	bl	859e4 <_fflush_r>
   86f76:	2800      	cmp	r0, #0
   86f78:	d0e3      	beq.n	86f42 <__swbuf_r+0x52>
   86f7a:	f04f 30ff 	mov.w	r0, #4294967295
   86f7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   86f80:	4621      	mov	r1, r4
   86f82:	4638      	mov	r0, r7
   86f84:	f7fe fc16 	bl	857b4 <__swsetup_r>
   86f88:	2800      	cmp	r0, #0
   86f8a:	d1f6      	bne.n	86f7a <__swbuf_r+0x8a>
   86f8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   86f90:	6923      	ldr	r3, [r4, #16]
   86f92:	b291      	uxth	r1, r2
   86f94:	e7be      	b.n	86f14 <__swbuf_r+0x24>
   86f96:	f7fe fdb9 	bl	85b0c <__sinit>
   86f9a:	e7b1      	b.n	86f00 <__swbuf_r+0x10>

00086f9c <_wcrtomb_r>:
   86f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   86fa0:	4605      	mov	r5, r0
   86fa2:	b086      	sub	sp, #24
   86fa4:	461e      	mov	r6, r3
   86fa6:	460c      	mov	r4, r1
   86fa8:	b1a1      	cbz	r1, 86fd4 <_wcrtomb_r+0x38>
   86faa:	4b10      	ldr	r3, [pc, #64]	; (86fec <_wcrtomb_r+0x50>)
   86fac:	4617      	mov	r7, r2
   86fae:	f8d3 8000 	ldr.w	r8, [r3]
   86fb2:	f7ff f907 	bl	861c4 <__locale_charset>
   86fb6:	9600      	str	r6, [sp, #0]
   86fb8:	4603      	mov	r3, r0
   86fba:	463a      	mov	r2, r7
   86fbc:	4621      	mov	r1, r4
   86fbe:	4628      	mov	r0, r5
   86fc0:	47c0      	blx	r8
   86fc2:	1c43      	adds	r3, r0, #1
   86fc4:	d103      	bne.n	86fce <_wcrtomb_r+0x32>
   86fc6:	2200      	movs	r2, #0
   86fc8:	238a      	movs	r3, #138	; 0x8a
   86fca:	6032      	str	r2, [r6, #0]
   86fcc:	602b      	str	r3, [r5, #0]
   86fce:	b006      	add	sp, #24
   86fd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   86fd4:	4b05      	ldr	r3, [pc, #20]	; (86fec <_wcrtomb_r+0x50>)
   86fd6:	681f      	ldr	r7, [r3, #0]
   86fd8:	f7ff f8f4 	bl	861c4 <__locale_charset>
   86fdc:	9600      	str	r6, [sp, #0]
   86fde:	4603      	mov	r3, r0
   86fe0:	4622      	mov	r2, r4
   86fe2:	a903      	add	r1, sp, #12
   86fe4:	4628      	mov	r0, r5
   86fe6:	47b8      	blx	r7
   86fe8:	e7eb      	b.n	86fc2 <_wcrtomb_r+0x26>
   86fea:	bf00      	nop
   86fec:	20070910 	.word	0x20070910

00086ff0 <__ascii_wctomb>:
   86ff0:	b121      	cbz	r1, 86ffc <__ascii_wctomb+0xc>
   86ff2:	2aff      	cmp	r2, #255	; 0xff
   86ff4:	d804      	bhi.n	87000 <__ascii_wctomb+0x10>
   86ff6:	700a      	strb	r2, [r1, #0]
   86ff8:	2001      	movs	r0, #1
   86ffa:	4770      	bx	lr
   86ffc:	4608      	mov	r0, r1
   86ffe:	4770      	bx	lr
   87000:	238a      	movs	r3, #138	; 0x8a
   87002:	6003      	str	r3, [r0, #0]
   87004:	f04f 30ff 	mov.w	r0, #4294967295
   87008:	4770      	bx	lr
   8700a:	bf00      	nop

0008700c <_write_r>:
   8700c:	b570      	push	{r4, r5, r6, lr}
   8700e:	460d      	mov	r5, r1
   87010:	4c08      	ldr	r4, [pc, #32]	; (87034 <_write_r+0x28>)
   87012:	4611      	mov	r1, r2
   87014:	4606      	mov	r6, r0
   87016:	461a      	mov	r2, r3
   87018:	4628      	mov	r0, r5
   8701a:	2300      	movs	r3, #0
   8701c:	6023      	str	r3, [r4, #0]
   8701e:	f7fa ff9f 	bl	81f60 <_write>
   87022:	1c43      	adds	r3, r0, #1
   87024:	d000      	beq.n	87028 <_write_r+0x1c>
   87026:	bd70      	pop	{r4, r5, r6, pc}
   87028:	6823      	ldr	r3, [r4, #0]
   8702a:	2b00      	cmp	r3, #0
   8702c:	d0fb      	beq.n	87026 <_write_r+0x1a>
   8702e:	6033      	str	r3, [r6, #0]
   87030:	bd70      	pop	{r4, r5, r6, pc}
   87032:	bf00      	nop
   87034:	20070edc 	.word	0x20070edc

00087038 <__register_exitproc>:
   87038:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8703c:	4c25      	ldr	r4, [pc, #148]	; (870d4 <__register_exitproc+0x9c>)
   8703e:	4606      	mov	r6, r0
   87040:	6825      	ldr	r5, [r4, #0]
   87042:	4688      	mov	r8, r1
   87044:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
   87048:	4692      	mov	sl, r2
   8704a:	4699      	mov	r9, r3
   8704c:	b3c4      	cbz	r4, 870c0 <__register_exitproc+0x88>
   8704e:	6860      	ldr	r0, [r4, #4]
   87050:	281f      	cmp	r0, #31
   87052:	dc17      	bgt.n	87084 <__register_exitproc+0x4c>
   87054:	1c41      	adds	r1, r0, #1
   87056:	b176      	cbz	r6, 87076 <__register_exitproc+0x3e>
   87058:	eb04 0380 	add.w	r3, r4, r0, lsl #2
   8705c:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
   87060:	f8d4 5188 	ldr.w	r5, [r4, #392]	; 0x188
   87064:	2201      	movs	r2, #1
   87066:	4082      	lsls	r2, r0
   87068:	4315      	orrs	r5, r2
   8706a:	2e02      	cmp	r6, #2
   8706c:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
   87070:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
   87074:	d01e      	beq.n	870b4 <__register_exitproc+0x7c>
   87076:	1c83      	adds	r3, r0, #2
   87078:	6061      	str	r1, [r4, #4]
   8707a:	2000      	movs	r0, #0
   8707c:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
   87080:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   87084:	4b14      	ldr	r3, [pc, #80]	; (870d8 <__register_exitproc+0xa0>)
   87086:	b303      	cbz	r3, 870ca <__register_exitproc+0x92>
   87088:	f44f 70c8 	mov.w	r0, #400	; 0x190
   8708c:	f7ff f918 	bl	862c0 <malloc>
   87090:	4604      	mov	r4, r0
   87092:	b1d0      	cbz	r0, 870ca <__register_exitproc+0x92>
   87094:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
   87098:	2700      	movs	r7, #0
   8709a:	e884 0088 	stmia.w	r4, {r3, r7}
   8709e:	4638      	mov	r0, r7
   870a0:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   870a4:	2101      	movs	r1, #1
   870a6:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
   870aa:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
   870ae:	2e00      	cmp	r6, #0
   870b0:	d0e1      	beq.n	87076 <__register_exitproc+0x3e>
   870b2:	e7d1      	b.n	87058 <__register_exitproc+0x20>
   870b4:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   870b8:	431a      	orrs	r2, r3
   870ba:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   870be:	e7da      	b.n	87076 <__register_exitproc+0x3e>
   870c0:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
   870c4:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
   870c8:	e7c1      	b.n	8704e <__register_exitproc+0x16>
   870ca:	f04f 30ff 	mov.w	r0, #4294967295
   870ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   870d2:	bf00      	nop
   870d4:	00087608 	.word	0x00087608
   870d8:	000862c1 	.word	0x000862c1

000870dc <_close_r>:
   870dc:	b538      	push	{r3, r4, r5, lr}
   870de:	4c07      	ldr	r4, [pc, #28]	; (870fc <_close_r+0x20>)
   870e0:	2300      	movs	r3, #0
   870e2:	4605      	mov	r5, r0
   870e4:	4608      	mov	r0, r1
   870e6:	6023      	str	r3, [r4, #0]
   870e8:	f7fd f88c 	bl	84204 <_close>
   870ec:	1c43      	adds	r3, r0, #1
   870ee:	d000      	beq.n	870f2 <_close_r+0x16>
   870f0:	bd38      	pop	{r3, r4, r5, pc}
   870f2:	6823      	ldr	r3, [r4, #0]
   870f4:	2b00      	cmp	r3, #0
   870f6:	d0fb      	beq.n	870f0 <_close_r+0x14>
   870f8:	602b      	str	r3, [r5, #0]
   870fa:	bd38      	pop	{r3, r4, r5, pc}
   870fc:	20070edc 	.word	0x20070edc

00087100 <_fclose_r>:
   87100:	2900      	cmp	r1, #0
   87102:	d03d      	beq.n	87180 <_fclose_r+0x80>
   87104:	b570      	push	{r4, r5, r6, lr}
   87106:	4605      	mov	r5, r0
   87108:	460c      	mov	r4, r1
   8710a:	b108      	cbz	r0, 87110 <_fclose_r+0x10>
   8710c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8710e:	b37b      	cbz	r3, 87170 <_fclose_r+0x70>
   87110:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   87114:	b90b      	cbnz	r3, 8711a <_fclose_r+0x1a>
   87116:	2000      	movs	r0, #0
   87118:	bd70      	pop	{r4, r5, r6, pc}
   8711a:	4621      	mov	r1, r4
   8711c:	4628      	mov	r0, r5
   8711e:	f7fe fbbd 	bl	8589c <__sflush_r>
   87122:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   87124:	4606      	mov	r6, r0
   87126:	b133      	cbz	r3, 87136 <_fclose_r+0x36>
   87128:	69e1      	ldr	r1, [r4, #28]
   8712a:	4628      	mov	r0, r5
   8712c:	4798      	blx	r3
   8712e:	2800      	cmp	r0, #0
   87130:	bfb8      	it	lt
   87132:	f04f 36ff 	movlt.w	r6, #4294967295
   87136:	89a3      	ldrh	r3, [r4, #12]
   87138:	061b      	lsls	r3, r3, #24
   8713a:	d41c      	bmi.n	87176 <_fclose_r+0x76>
   8713c:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8713e:	b141      	cbz	r1, 87152 <_fclose_r+0x52>
   87140:	f104 0340 	add.w	r3, r4, #64	; 0x40
   87144:	4299      	cmp	r1, r3
   87146:	d002      	beq.n	8714e <_fclose_r+0x4e>
   87148:	4628      	mov	r0, r5
   8714a:	f7fe fda7 	bl	85c9c <_free_r>
   8714e:	2300      	movs	r3, #0
   87150:	6323      	str	r3, [r4, #48]	; 0x30
   87152:	6c61      	ldr	r1, [r4, #68]	; 0x44
   87154:	b121      	cbz	r1, 87160 <_fclose_r+0x60>
   87156:	4628      	mov	r0, r5
   87158:	f7fe fda0 	bl	85c9c <_free_r>
   8715c:	2300      	movs	r3, #0
   8715e:	6463      	str	r3, [r4, #68]	; 0x44
   87160:	f7fe fcda 	bl	85b18 <__sfp_lock_acquire>
   87164:	2300      	movs	r3, #0
   87166:	81a3      	strh	r3, [r4, #12]
   87168:	f7fe fcd8 	bl	85b1c <__sfp_lock_release>
   8716c:	4630      	mov	r0, r6
   8716e:	bd70      	pop	{r4, r5, r6, pc}
   87170:	f7fe fccc 	bl	85b0c <__sinit>
   87174:	e7cc      	b.n	87110 <_fclose_r+0x10>
   87176:	6921      	ldr	r1, [r4, #16]
   87178:	4628      	mov	r0, r5
   8717a:	f7fe fd8f 	bl	85c9c <_free_r>
   8717e:	e7dd      	b.n	8713c <_fclose_r+0x3c>
   87180:	2000      	movs	r0, #0
   87182:	4770      	bx	lr

00087184 <_fstat_r>:
   87184:	b538      	push	{r3, r4, r5, lr}
   87186:	460b      	mov	r3, r1
   87188:	4c07      	ldr	r4, [pc, #28]	; (871a8 <_fstat_r+0x24>)
   8718a:	4605      	mov	r5, r0
   8718c:	4611      	mov	r1, r2
   8718e:	4618      	mov	r0, r3
   87190:	2300      	movs	r3, #0
   87192:	6023      	str	r3, [r4, #0]
   87194:	f7fd f842 	bl	8421c <_fstat>
   87198:	1c43      	adds	r3, r0, #1
   8719a:	d000      	beq.n	8719e <_fstat_r+0x1a>
   8719c:	bd38      	pop	{r3, r4, r5, pc}
   8719e:	6823      	ldr	r3, [r4, #0]
   871a0:	2b00      	cmp	r3, #0
   871a2:	d0fb      	beq.n	8719c <_fstat_r+0x18>
   871a4:	602b      	str	r3, [r5, #0]
   871a6:	bd38      	pop	{r3, r4, r5, pc}
   871a8:	20070edc 	.word	0x20070edc

000871ac <_isatty_r>:
   871ac:	b538      	push	{r3, r4, r5, lr}
   871ae:	4c07      	ldr	r4, [pc, #28]	; (871cc <_isatty_r+0x20>)
   871b0:	2300      	movs	r3, #0
   871b2:	4605      	mov	r5, r0
   871b4:	4608      	mov	r0, r1
   871b6:	6023      	str	r3, [r4, #0]
   871b8:	f7fd f840 	bl	8423c <_isatty>
   871bc:	1c43      	adds	r3, r0, #1
   871be:	d000      	beq.n	871c2 <_isatty_r+0x16>
   871c0:	bd38      	pop	{r3, r4, r5, pc}
   871c2:	6823      	ldr	r3, [r4, #0]
   871c4:	2b00      	cmp	r3, #0
   871c6:	d0fb      	beq.n	871c0 <_isatty_r+0x14>
   871c8:	602b      	str	r3, [r5, #0]
   871ca:	bd38      	pop	{r3, r4, r5, pc}
   871cc:	20070edc 	.word	0x20070edc

000871d0 <_lseek_r>:
   871d0:	b570      	push	{r4, r5, r6, lr}
   871d2:	460d      	mov	r5, r1
   871d4:	4c08      	ldr	r4, [pc, #32]	; (871f8 <_lseek_r+0x28>)
   871d6:	4611      	mov	r1, r2
   871d8:	4606      	mov	r6, r0
   871da:	461a      	mov	r2, r3
   871dc:	4628      	mov	r0, r5
   871de:	2300      	movs	r3, #0
   871e0:	6023      	str	r3, [r4, #0]
   871e2:	f7fd f835 	bl	84250 <_lseek>
   871e6:	1c43      	adds	r3, r0, #1
   871e8:	d000      	beq.n	871ec <_lseek_r+0x1c>
   871ea:	bd70      	pop	{r4, r5, r6, pc}
   871ec:	6823      	ldr	r3, [r4, #0]
   871ee:	2b00      	cmp	r3, #0
   871f0:	d0fb      	beq.n	871ea <_lseek_r+0x1a>
   871f2:	6033      	str	r3, [r6, #0]
   871f4:	bd70      	pop	{r4, r5, r6, pc}
   871f6:	bf00      	nop
   871f8:	20070edc 	.word	0x20070edc

000871fc <_read_r>:
   871fc:	b570      	push	{r4, r5, r6, lr}
   871fe:	460d      	mov	r5, r1
   87200:	4c08      	ldr	r4, [pc, #32]	; (87224 <_read_r+0x28>)
   87202:	4611      	mov	r1, r2
   87204:	4606      	mov	r6, r0
   87206:	461a      	mov	r2, r3
   87208:	4628      	mov	r0, r5
   8720a:	2300      	movs	r3, #0
   8720c:	6023      	str	r3, [r4, #0]
   8720e:	f7fa fe7d 	bl	81f0c <_read>
   87212:	1c43      	adds	r3, r0, #1
   87214:	d000      	beq.n	87218 <_read_r+0x1c>
   87216:	bd70      	pop	{r4, r5, r6, pc}
   87218:	6823      	ldr	r3, [r4, #0]
   8721a:	2b00      	cmp	r3, #0
   8721c:	d0fb      	beq.n	87216 <_read_r+0x1a>
   8721e:	6033      	str	r3, [r6, #0]
   87220:	bd70      	pop	{r4, r5, r6, pc}
   87222:	bf00      	nop
   87224:	20070edc 	.word	0x20070edc

00087228 <__aeabi_uldivmod>:
   87228:	b953      	cbnz	r3, 87240 <__aeabi_uldivmod+0x18>
   8722a:	b94a      	cbnz	r2, 87240 <__aeabi_uldivmod+0x18>
   8722c:	2900      	cmp	r1, #0
   8722e:	bf08      	it	eq
   87230:	2800      	cmpeq	r0, #0
   87232:	bf1c      	itt	ne
   87234:	f04f 31ff 	movne.w	r1, #4294967295
   87238:	f04f 30ff 	movne.w	r0, #4294967295
   8723c:	f000 b982 	b.w	87544 <__aeabi_idiv0>
   87240:	f1ad 0c08 	sub.w	ip, sp, #8
   87244:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   87248:	f000 f806 	bl	87258 <__udivmoddi4>
   8724c:	f8dd e004 	ldr.w	lr, [sp, #4]
   87250:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   87254:	b004      	add	sp, #16
   87256:	4770      	bx	lr

00087258 <__udivmoddi4>:
   87258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8725c:	468c      	mov	ip, r1
   8725e:	460c      	mov	r4, r1
   87260:	4605      	mov	r5, r0
   87262:	9e09      	ldr	r6, [sp, #36]	; 0x24
   87264:	2b00      	cmp	r3, #0
   87266:	d14f      	bne.n	87308 <__udivmoddi4+0xb0>
   87268:	428a      	cmp	r2, r1
   8726a:	4617      	mov	r7, r2
   8726c:	d96b      	bls.n	87346 <__udivmoddi4+0xee>
   8726e:	fab2 fe82 	clz	lr, r2
   87272:	f1be 0f00 	cmp.w	lr, #0
   87276:	d00b      	beq.n	87290 <__udivmoddi4+0x38>
   87278:	f1ce 0520 	rsb	r5, lr, #32
   8727c:	fa20 f505 	lsr.w	r5, r0, r5
   87280:	fa01 f30e 	lsl.w	r3, r1, lr
   87284:	ea45 0c03 	orr.w	ip, r5, r3
   87288:	fa02 f70e 	lsl.w	r7, r2, lr
   8728c:	fa00 f50e 	lsl.w	r5, r0, lr
   87290:	0c39      	lsrs	r1, r7, #16
   87292:	fbbc f0f1 	udiv	r0, ip, r1
   87296:	b2ba      	uxth	r2, r7
   87298:	fb01 c310 	mls	r3, r1, r0, ip
   8729c:	fb00 f802 	mul.w	r8, r0, r2
   872a0:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   872a4:	ea4c 4403 	orr.w	r4, ip, r3, lsl #16
   872a8:	45a0      	cmp	r8, r4
   872aa:	d909      	bls.n	872c0 <__udivmoddi4+0x68>
   872ac:	19e4      	adds	r4, r4, r7
   872ae:	f100 33ff 	add.w	r3, r0, #4294967295
   872b2:	f080 8128 	bcs.w	87506 <__udivmoddi4+0x2ae>
   872b6:	45a0      	cmp	r8, r4
   872b8:	f240 8125 	bls.w	87506 <__udivmoddi4+0x2ae>
   872bc:	3802      	subs	r0, #2
   872be:	443c      	add	r4, r7
   872c0:	ebc8 0404 	rsb	r4, r8, r4
   872c4:	fbb4 f3f1 	udiv	r3, r4, r1
   872c8:	fb01 4c13 	mls	ip, r1, r3, r4
   872cc:	fb03 f202 	mul.w	r2, r3, r2
   872d0:	b2ac      	uxth	r4, r5
   872d2:	ea44 410c 	orr.w	r1, r4, ip, lsl #16
   872d6:	428a      	cmp	r2, r1
   872d8:	d909      	bls.n	872ee <__udivmoddi4+0x96>
   872da:	19c9      	adds	r1, r1, r7
   872dc:	f103 34ff 	add.w	r4, r3, #4294967295
   872e0:	f080 810f 	bcs.w	87502 <__udivmoddi4+0x2aa>
   872e4:	428a      	cmp	r2, r1
   872e6:	f240 810c 	bls.w	87502 <__udivmoddi4+0x2aa>
   872ea:	3b02      	subs	r3, #2
   872ec:	4439      	add	r1, r7
   872ee:	1a8a      	subs	r2, r1, r2
   872f0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   872f4:	2100      	movs	r1, #0
   872f6:	2e00      	cmp	r6, #0
   872f8:	d063      	beq.n	873c2 <__udivmoddi4+0x16a>
   872fa:	fa22 f20e 	lsr.w	r2, r2, lr
   872fe:	2300      	movs	r3, #0
   87300:	e886 000c 	stmia.w	r6, {r2, r3}
   87304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87308:	428b      	cmp	r3, r1
   8730a:	d907      	bls.n	8731c <__udivmoddi4+0xc4>
   8730c:	2e00      	cmp	r6, #0
   8730e:	d056      	beq.n	873be <__udivmoddi4+0x166>
   87310:	2100      	movs	r1, #0
   87312:	e886 0011 	stmia.w	r6, {r0, r4}
   87316:	4608      	mov	r0, r1
   87318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8731c:	fab3 f183 	clz	r1, r3
   87320:	2900      	cmp	r1, #0
   87322:	f040 8093 	bne.w	8744c <__udivmoddi4+0x1f4>
   87326:	42a3      	cmp	r3, r4
   87328:	d302      	bcc.n	87330 <__udivmoddi4+0xd8>
   8732a:	4282      	cmp	r2, r0
   8732c:	f200 80fe 	bhi.w	8752c <__udivmoddi4+0x2d4>
   87330:	1a85      	subs	r5, r0, r2
   87332:	eb64 0303 	sbc.w	r3, r4, r3
   87336:	469c      	mov	ip, r3
   87338:	2001      	movs	r0, #1
   8733a:	2e00      	cmp	r6, #0
   8733c:	d041      	beq.n	873c2 <__udivmoddi4+0x16a>
   8733e:	e886 1020 	stmia.w	r6, {r5, ip}
   87342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87346:	b912      	cbnz	r2, 8734e <__udivmoddi4+0xf6>
   87348:	2701      	movs	r7, #1
   8734a:	fbb7 f7f2 	udiv	r7, r7, r2
   8734e:	fab7 fe87 	clz	lr, r7
   87352:	f1be 0f00 	cmp.w	lr, #0
   87356:	d136      	bne.n	873c6 <__udivmoddi4+0x16e>
   87358:	1be4      	subs	r4, r4, r7
   8735a:	ea4f 4817 	mov.w	r8, r7, lsr #16
   8735e:	fa1f f987 	uxth.w	r9, r7
   87362:	2101      	movs	r1, #1
   87364:	fbb4 f3f8 	udiv	r3, r4, r8
   87368:	fb08 4413 	mls	r4, r8, r3, r4
   8736c:	fb09 f203 	mul.w	r2, r9, r3
   87370:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   87374:	ea4c 4404 	orr.w	r4, ip, r4, lsl #16
   87378:	42a2      	cmp	r2, r4
   8737a:	d907      	bls.n	8738c <__udivmoddi4+0x134>
   8737c:	19e4      	adds	r4, r4, r7
   8737e:	f103 30ff 	add.w	r0, r3, #4294967295
   87382:	d202      	bcs.n	8738a <__udivmoddi4+0x132>
   87384:	42a2      	cmp	r2, r4
   87386:	f200 80d3 	bhi.w	87530 <__udivmoddi4+0x2d8>
   8738a:	4603      	mov	r3, r0
   8738c:	1aa4      	subs	r4, r4, r2
   8738e:	fbb4 f0f8 	udiv	r0, r4, r8
   87392:	fb08 4810 	mls	r8, r8, r0, r4
   87396:	fb09 f900 	mul.w	r9, r9, r0
   8739a:	b2ac      	uxth	r4, r5
   8739c:	ea44 4208 	orr.w	r2, r4, r8, lsl #16
   873a0:	4591      	cmp	r9, r2
   873a2:	d907      	bls.n	873b4 <__udivmoddi4+0x15c>
   873a4:	19d2      	adds	r2, r2, r7
   873a6:	f100 34ff 	add.w	r4, r0, #4294967295
   873aa:	d202      	bcs.n	873b2 <__udivmoddi4+0x15a>
   873ac:	4591      	cmp	r9, r2
   873ae:	f200 80ba 	bhi.w	87526 <__udivmoddi4+0x2ce>
   873b2:	4620      	mov	r0, r4
   873b4:	ebc9 0202 	rsb	r2, r9, r2
   873b8:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   873bc:	e79b      	b.n	872f6 <__udivmoddi4+0x9e>
   873be:	4631      	mov	r1, r6
   873c0:	4630      	mov	r0, r6
   873c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   873c6:	fa07 f70e 	lsl.w	r7, r7, lr
   873ca:	f1ce 0c20 	rsb	ip, lr, #32
   873ce:	fa24 f30c 	lsr.w	r3, r4, ip
   873d2:	ea4f 4817 	mov.w	r8, r7, lsr #16
   873d6:	fbb3 faf8 	udiv	sl, r3, r8
   873da:	fa1f f987 	uxth.w	r9, r7
   873de:	fb08 351a 	mls	r5, r8, sl, r3
   873e2:	fa20 fc0c 	lsr.w	ip, r0, ip
   873e6:	fa04 f40e 	lsl.w	r4, r4, lr
   873ea:	fb0a fb09 	mul.w	fp, sl, r9
   873ee:	ea4c 0c04 	orr.w	ip, ip, r4
   873f2:	ea4f 421c 	mov.w	r2, ip, lsr #16
   873f6:	ea42 4305 	orr.w	r3, r2, r5, lsl #16
   873fa:	459b      	cmp	fp, r3
   873fc:	fa00 f50e 	lsl.w	r5, r0, lr
   87400:	d90a      	bls.n	87418 <__udivmoddi4+0x1c0>
   87402:	19db      	adds	r3, r3, r7
   87404:	f10a 32ff 	add.w	r2, sl, #4294967295
   87408:	f080 808b 	bcs.w	87522 <__udivmoddi4+0x2ca>
   8740c:	459b      	cmp	fp, r3
   8740e:	f240 8088 	bls.w	87522 <__udivmoddi4+0x2ca>
   87412:	f1aa 0a02 	sub.w	sl, sl, #2
   87416:	443b      	add	r3, r7
   87418:	ebcb 0303 	rsb	r3, fp, r3
   8741c:	fbb3 f0f8 	udiv	r0, r3, r8
   87420:	fb08 3310 	mls	r3, r8, r0, r3
   87424:	fb00 f409 	mul.w	r4, r0, r9
   87428:	fa1f fc8c 	uxth.w	ip, ip
   8742c:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
   87430:	429c      	cmp	r4, r3
   87432:	d907      	bls.n	87444 <__udivmoddi4+0x1ec>
   87434:	19db      	adds	r3, r3, r7
   87436:	f100 32ff 	add.w	r2, r0, #4294967295
   8743a:	d26e      	bcs.n	8751a <__udivmoddi4+0x2c2>
   8743c:	429c      	cmp	r4, r3
   8743e:	d96c      	bls.n	8751a <__udivmoddi4+0x2c2>
   87440:	3802      	subs	r0, #2
   87442:	443b      	add	r3, r7
   87444:	1b1c      	subs	r4, r3, r4
   87446:	ea40 410a 	orr.w	r1, r0, sl, lsl #16
   8744a:	e78b      	b.n	87364 <__udivmoddi4+0x10c>
   8744c:	f1c1 0e20 	rsb	lr, r1, #32
   87450:	408b      	lsls	r3, r1
   87452:	fa22 fc0e 	lsr.w	ip, r2, lr
   87456:	ea4c 0c03 	orr.w	ip, ip, r3
   8745a:	fa24 f70e 	lsr.w	r7, r4, lr
   8745e:	ea4f 491c 	mov.w	r9, ip, lsr #16
   87462:	fbb7 faf9 	udiv	sl, r7, r9
   87466:	fa1f f38c 	uxth.w	r3, ip
   8746a:	fb09 771a 	mls	r7, r9, sl, r7
   8746e:	fa20 f80e 	lsr.w	r8, r0, lr
   87472:	408c      	lsls	r4, r1
   87474:	fb0a f503 	mul.w	r5, sl, r3
   87478:	ea48 0404 	orr.w	r4, r8, r4
   8747c:	ea4f 4814 	mov.w	r8, r4, lsr #16
   87480:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
   87484:	42bd      	cmp	r5, r7
   87486:	fa02 f201 	lsl.w	r2, r2, r1
   8748a:	fa00 fb01 	lsl.w	fp, r0, r1
   8748e:	d909      	bls.n	874a4 <__udivmoddi4+0x24c>
   87490:	eb17 070c 	adds.w	r7, r7, ip
   87494:	f10a 30ff 	add.w	r0, sl, #4294967295
   87498:	d241      	bcs.n	8751e <__udivmoddi4+0x2c6>
   8749a:	42bd      	cmp	r5, r7
   8749c:	d93f      	bls.n	8751e <__udivmoddi4+0x2c6>
   8749e:	f1aa 0a02 	sub.w	sl, sl, #2
   874a2:	4467      	add	r7, ip
   874a4:	1b7f      	subs	r7, r7, r5
   874a6:	fbb7 f5f9 	udiv	r5, r7, r9
   874aa:	fb09 7715 	mls	r7, r9, r5, r7
   874ae:	fb05 f303 	mul.w	r3, r5, r3
   874b2:	b2a4      	uxth	r4, r4
   874b4:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
   874b8:	42bb      	cmp	r3, r7
   874ba:	d908      	bls.n	874ce <__udivmoddi4+0x276>
   874bc:	eb17 070c 	adds.w	r7, r7, ip
   874c0:	f105 30ff 	add.w	r0, r5, #4294967295
   874c4:	d227      	bcs.n	87516 <__udivmoddi4+0x2be>
   874c6:	42bb      	cmp	r3, r7
   874c8:	d925      	bls.n	87516 <__udivmoddi4+0x2be>
   874ca:	3d02      	subs	r5, #2
   874cc:	4467      	add	r7, ip
   874ce:	ea45 400a 	orr.w	r0, r5, sl, lsl #16
   874d2:	fba0 8902 	umull	r8, r9, r0, r2
   874d6:	1aff      	subs	r7, r7, r3
   874d8:	454f      	cmp	r7, r9
   874da:	4645      	mov	r5, r8
   874dc:	464c      	mov	r4, r9
   874de:	d314      	bcc.n	8750a <__udivmoddi4+0x2b2>
   874e0:	d029      	beq.n	87536 <__udivmoddi4+0x2de>
   874e2:	b366      	cbz	r6, 8753e <__udivmoddi4+0x2e6>
   874e4:	ebbb 0305 	subs.w	r3, fp, r5
   874e8:	eb67 0704 	sbc.w	r7, r7, r4
   874ec:	fa07 fe0e 	lsl.w	lr, r7, lr
   874f0:	40cb      	lsrs	r3, r1
   874f2:	40cf      	lsrs	r7, r1
   874f4:	ea4e 0303 	orr.w	r3, lr, r3
   874f8:	e886 0088 	stmia.w	r6, {r3, r7}
   874fc:	2100      	movs	r1, #0
   874fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87502:	4623      	mov	r3, r4
   87504:	e6f3      	b.n	872ee <__udivmoddi4+0x96>
   87506:	4618      	mov	r0, r3
   87508:	e6da      	b.n	872c0 <__udivmoddi4+0x68>
   8750a:	ebb8 0502 	subs.w	r5, r8, r2
   8750e:	eb69 040c 	sbc.w	r4, r9, ip
   87512:	3801      	subs	r0, #1
   87514:	e7e5      	b.n	874e2 <__udivmoddi4+0x28a>
   87516:	4605      	mov	r5, r0
   87518:	e7d9      	b.n	874ce <__udivmoddi4+0x276>
   8751a:	4610      	mov	r0, r2
   8751c:	e792      	b.n	87444 <__udivmoddi4+0x1ec>
   8751e:	4682      	mov	sl, r0
   87520:	e7c0      	b.n	874a4 <__udivmoddi4+0x24c>
   87522:	4692      	mov	sl, r2
   87524:	e778      	b.n	87418 <__udivmoddi4+0x1c0>
   87526:	3802      	subs	r0, #2
   87528:	443a      	add	r2, r7
   8752a:	e743      	b.n	873b4 <__udivmoddi4+0x15c>
   8752c:	4608      	mov	r0, r1
   8752e:	e704      	b.n	8733a <__udivmoddi4+0xe2>
   87530:	3b02      	subs	r3, #2
   87532:	443c      	add	r4, r7
   87534:	e72a      	b.n	8738c <__udivmoddi4+0x134>
   87536:	45c3      	cmp	fp, r8
   87538:	d3e7      	bcc.n	8750a <__udivmoddi4+0x2b2>
   8753a:	463c      	mov	r4, r7
   8753c:	e7d1      	b.n	874e2 <__udivmoddi4+0x28a>
   8753e:	4631      	mov	r1, r6
   87540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00087544 <__aeabi_idiv0>:
   87544:	4770      	bx	lr
   87546:	bf00      	nop

00087548 <can_bit_time>:
   87548:	0308 0202 4b03 0209 0303 4302 030a 0303     .....K.....C....
   87558:	4603 040b 0303 4804 030c 0404 4304 040d     .F.....H.....C..
   87568:	0404 4d04 040e 0504 4004 040f 0505 4304     ...M.....@.....C
   87578:	0510 0505 4504 0611 0505 4704 0512 0606     .....E.....G....
   87588:	4304 0613 0606 4404 0714 0606 4604 0815     .C.....D.....F..
   87598:	0606 4704 0716 0707 4404 0817 0708 4604     ...G.....D.....F
   875a8:	0718 0808 4304 0819 0808 4404 6f63 6e75     .....C.....Dcoun
   875b8:	2074 203d 6425 000a 6577 636c 6d6f 0a65     t = %d..welcome.
   875c8:	0000 0000 6556 7372 6f69 316e 312e 000a     ....Version1.1..
   875d8:	6176 756c 2065 616d 6374 6568 0a64 0000     value matched...
   875e8:	616d 696e 7570 616c 6974 6e6f 000a 0000     manipulation....
   875f8:	6641 6574 2072 6425 000a 0000 0043 0000     After %d....C...

00087608 <_global_impure_ptr>:
   87608:	00b0 2007                                   ... 

0008760c <zeroes.6993>:
   8760c:	3030 3030 3030 3030 3030 3030 3030 3030     0000000000000000
   8761c:	3130 3332 3534 3736 3938 4241 4443 4645     0123456789ABCDEF
   8762c:	0000 0000 3130 3332 3534 3736 3938 6261     ....0123456789ab
   8763c:	6463 6665 0000 0000 6e28 6c75 296c 0000     cdef....(null)..

0008764c <blanks.6992>:
   8764c:	2020 2020 2020 2020 2020 2020 2020 2020                     

0008765c <_init>:
   8765c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8765e:	bf00      	nop
   87660:	bcf8      	pop	{r3, r4, r5, r6, r7}
   87662:	bc08      	pop	{r3}
   87664:	469e      	mov	lr, r3
   87666:	4770      	bx	lr

00087668 <__init_array_start>:
   87668:	0008587d 	.word	0x0008587d

0008766c <__frame_dummy_init_array_entry>:
   8766c:	00080119                                ....

00087670 <_fini>:
   87670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   87672:	bf00      	nop
   87674:	bcf8      	pop	{r3, r4, r5, r6, r7}
   87676:	bc08      	pop	{r3}
   87678:	469e      	mov	lr, r3
   8767a:	4770      	bx	lr

0008767c <__fini_array_start>:
   8767c:	000800f5 	.word	0x000800f5
